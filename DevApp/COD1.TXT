OBJECT Codeunit 1 ApplicationManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,4PS9.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DebuggerManagement@1017 : Codeunit 9500;
      LogInManagement@1027 : Codeunit 40;
      TextManagement@1003 : Codeunit 41;
      CaptionManagement@1000 : Codeunit 42;
      LanguageManagement@1002 : Codeunit 43;
      AutoFormatManagement@1012 : Codeunit 45;
      NotSupportedErr@1004 : TextConst 'ENU=The value is not supported.';
      ExtFieldPropRead@1100409001 : Boolean;
      ExtFieldPropPresent@1100409000 : Boolean;
      StoredPaperSourceFirstPage@1100528002 : Integer;
      StoredPaperSourceDefaultPage@1100528001 : Integer;
      StoredPaperSourceLastPage@1100528000 : Integer;
      DCSetupRead@1100528200 : Boolean;
      DocumentCaptureSetup@1100528201 : Record 6085573;

    PROCEDURE CompanyOpen@30();
    BEGIN
      OnBeforeCompanyOpen;
      LogInManagement.CompanyOpen;
      OnAfterCompanyOpen;
    END;

    PROCEDURE GetSystemIndicator@51(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    VAR
      CompanyInformation@1002 : Record 79;
    BEGIN
      IF CompanyInformation.GET THEN
        CompanyInformation.GetSystemIndicator(Text,Style);
      OnAfterGetSystemIndicator(Text,Style);
    END;

    PROCEDURE CompanyClose@31();
    BEGIN
      OnBeforeCompanyClose;
      LogInManagement.CompanyClose;
      OnAfterCompanyClose;
    END;

    PROCEDURE FindPrinter@11(ReportID@1000 : Integer) : Text[250];
    VAR
      PrinterSelection@1001 : Record 78;
      PrinterName@1002 : Text[250];
      PrinterSelectionPerCompany@1100409000 : Record 11020313;
      PrinterSelectionCU@1100409001 : Codeunit 11020214;
      RepUsageMgt@1100529900 : Codeunit 11012362;
    BEGIN
      CLEAR(PrinterSelection);

      //**4PS.so
      //IF NOT PrinterSelection.GET(USERID,ReportID) THEN
      //  IF NOT PrinterSelection.GET('',ReportID) THEN
      //    IF NOT PrinterSelection.GET(USERID,0) THEN
      //      IF PrinterSelection.GET('',0) THEN;
      //PrinterName := PrinterSelection."Printer Name";
      //**4PS.eo

      //**4PS.sn
      CLEAR(PrinterSelectionPerCompany);
      StorePaperSources(0, 0, 0);

      RepUsageMgt.AddReport(ReportID); //**4PS.n DJN DP00309

      PrinterSelectionCU.GetPrinterWithPaperSources(
        ReportID, PrinterName, StoredPaperSourceFirstPage, StoredPaperSourceDefaultPage, StoredPaperSourceLastPage);
      IF PrinterName <> '' THEN BEGIN
        IF PrinterName = PrinterSelectionCU.IgnoreIndicator() THEN BEGIN //* See comment in codeunit 'Printer Selection' (CU1102214)
          PrinterName := '';
          StorePaperSources(0, 0, 0);
        END;
        OnAfterFindPrinter(ReportID,PrinterName);
        EXIT(PrinterName);
      END;

      IF PrinterSelectionPerCompany.GET(USERID,ReportID) THEN BEGIN
        StorePaperSources(PrinterSelectionPerCompany."Paper Source First Page", PrinterSelectionPerCompany."Paper Source Default Page", PrinterSelectionPerCompany."Paper Source Last Page");
        PrinterName := PrinterSelectionPerCompany."Printer Name";
      END ELSE
        IF PrinterSelectionPerCompany.GET('',ReportID) THEN BEGIN
          StorePaperSources(PrinterSelectionPerCompany."Paper Source First Page", PrinterSelectionPerCompany."Paper Source Default Page", PrinterSelectionPerCompany."Paper Source Last Page");
          PrinterName := PrinterSelectionPerCompany."Printer Name";
        END ELSE
          IF PrinterSelectionPerCompany.GET(USERID,0) THEN BEGIN
            StorePaperSources(PrinterSelectionPerCompany."Paper Source First Page", PrinterSelectionPerCompany."Paper Source Default Page", PrinterSelectionPerCompany."Paper Source Last Page");
            PrinterName := PrinterSelectionPerCompany."Printer Name";
          END ELSE
            IF PrinterSelectionPerCompany.GET('',0) THEN BEGIN
              StorePaperSources(PrinterSelectionPerCompany."Paper Source First Page", PrinterSelectionPerCompany."Paper Source Default Page", PrinterSelectionPerCompany."Paper Source Last Page");
              PrinterName := PrinterSelectionPerCompany."Printer Name";
            END ELSE BEGIN
              IF NOT PrinterSelection.GET(USERID,ReportID) THEN BEGIN
                IF NOT PrinterSelection.GET('',ReportID) THEN BEGIN
                  IF NOT PrinterSelection.GET(USERID,0) THEN BEGIN
                    IF PrinterSelection.GET('',0) THEN
                      StorePaperSources(PrinterSelection."Paper Source First Page", PrinterSelection."Paper Source Default Page", PrinterSelection."Paper Source Last Page")
                    ELSE
                      StorePaperSources(0, 0, 0);
                  END ELSE
                    StorePaperSources(PrinterSelection."Paper Source First Page", PrinterSelection."Paper Source Default Page", PrinterSelection."Paper Source Last Page");
                END ELSE
                  StorePaperSources(PrinterSelection."Paper Source First Page", PrinterSelection."Paper Source Default Page", PrinterSelection."Paper Source Last Page");
              END ELSE
                StorePaperSources(PrinterSelection."Paper Source First Page", PrinterSelection."Paper Source Default Page", PrinterSelection."Paper Source Last Page");
              PrinterName := PrinterSelection."Printer Name";
            END;
      //**4PS.en
      OnAfterFindPrinter(ReportID,PrinterName);
      EXIT(PrinterName);
    END;

    PROCEDURE ApplicationVersion@2() : Text[80];
    VAR
      AppVersion@1000 : Text[80];
    BEGIN
      AppVersion := CustomApplicationVersion('W1 Dynamics NAV 9.0');
      OnAfterGetApplicationVersion(AppVersion);
      EXIT(AppVersion);
    END;

    LOCAL PROCEDURE CustomApplicationVersion@1051(BaseBuildVersion@1000 : Text[80]) : Text[80];
    BEGIN
      //EXIT(BaseBuildVersion); //**4PS.o
      //**4PS.sn
      IF ProductExtension <> '' THEN
        EXIT(STRSUBSTNO('%1-%2-%3-%4 %5',
          BaseBuildVersion,
          ProductLocalization,
          ProductRelease,
          ProductHotfix,
          ProductExtension))
      ELSE
         EXIT(STRSUBSTNO('%1-%2-%3-%4',
          BaseBuildVersion,
          ProductLocalization,
          ProductRelease,
          ProductHotfix));
      //**4PS.en
    END;

    PROCEDURE ApplicationBuild@3() : Text[80];
    BEGIN
      EXIT(CustomApplicationBuild('45480'));
    END;

    LOCAL PROCEDURE CustomApplicationBuild@1050(BaseBuildNumber@1000 : Text[80]) : Text[80];
    BEGIN
      EXIT(BaseBuildNumber);
    END;

    PROCEDURE ProductLocalization@1100529211() : Text[80];
    BEGIN
      //**4PS
      EXIT('4PSW1');
    END;

    PROCEDURE ProductVersion@1100529215() : Text[80];
    BEGIN
      //**4PS
      EXIT('9.00');
    END;

    PROCEDURE ProductRelease@1100529200() : Text[80];
    BEGIN
      //**4PS
      EXIT('001');
    END;

    PROCEDURE ProductHotfix@1100529213() : Text[80];
    BEGIN
      //**4PS
      EXIT('01');
    END;

    PROCEDURE ProductExtension@1100529216() : Text[80];
    BEGIN
      //**4PS
      EXIT('SE-01-Beta1');
    END;

    PROCEDURE DataModelRevision@1100525000() : Text[80];
    BEGIN
      //**4PS
      EXIT('60019');
    END;

    PROCEDURE ApplicationLanguage@4() : Integer;
    BEGIN
      EXIT(1033);
    END;

    PROCEDURE DefaultRoleCenter@50() : Integer;
    VAR
      ConfPersMgt@1000 : Codeunit 9170;
      DefaultRoleCenterID@1001 : Integer;
    BEGIN
      DefaultRoleCenterID := ConfPersMgt.DefaultRoleCenterID;
      OnAfterGetDefaultRoleCenter(DefaultRoleCenterID);
      EXIT(DefaultRoleCenterID);
    END;

    PROCEDURE MakeDateTimeText@114(VAR DateTimeText@1000 : Text[250]) : Integer;
    BEGIN
      EXIT(TextManagement.MakeDateTimeText(DateTimeText));
    END;

    PROCEDURE GetSeparateDateTime@10011(DateTimeText@1000 : Text[250];VAR Date@1005 : Date;VAR Time@1006 : Time) : Boolean;
    BEGIN
      EXIT(TextManagement.GetSeparateDateTime(DateTimeText,Date,Time));
    END;

    PROCEDURE MakeDateText@105(VAR DateText@1000 : Text[250]) : Integer;
    VAR
      Position@1001 : Integer;
    BEGIN
      Position := TextManagement.MakeDateText(DateText);
      OnAfterMakeDateText(Position,DateText);
      EXIT(Position);
    END;

    PROCEDURE MakeTimeText@106(VAR TimeText@1000 : Text[250]) : Integer;
    VAR
      Position@1001 : Integer;
    BEGIN
      Position := TextManagement.MakeTimeText(TimeText);
      OnAfterMakeTimeText(Position,TimeText);
      EXIT(Position);
    END;

    PROCEDURE MakeText@107(VAR Text@1000 : Text[250]) : Integer;
    VAR
      Position@1001 : Integer;
    BEGIN
      Position := TextManagement.MakeText(Text);
      OnAfterMakeText(Position,Text);
      EXIT(Position);
    END;

    PROCEDURE MakeDateTimeFilter@214(VAR DateTimeFilterText@1000 : Text[250]) : Integer;
    VAR
      Position@1001 : Integer;
    BEGIN
      Position := TextManagement.MakeDateTimeFilter(DateTimeFilterText);
      OnAfterMakeDateTimeFilter(Position,DateTimeFilterText);
      EXIT(Position);
    END;

    PROCEDURE MakeDateFilter@205(VAR DateFilterText@1000 : Text[1024]) : Integer;
    VAR
      Position@1001 : Integer;
    BEGIN
      Position := TextManagement.MakeDateFilter(DateFilterText);
      OnAfterMakeDateFilter(Position,DateFilterText);
      EXIT(Position);
    END;

    PROCEDURE MakeTextFilter@207(VAR TextFilterText@1000 : Text) : Integer;
    VAR
      Position@1001 : Integer;
    BEGIN
      Position := TextManagement.MakeTextFilter(TextFilterText);
      OnAfterMakeTextFilter(Position,TextFilterText);
      EXIT(Position);
    END;

    PROCEDURE MakeCodeFilter@209(VAR TextFilterText@1000 : Text) : Integer;
    VAR
      Position@1001 : Integer;
    BEGIN
      Position := TextManagement.MakeTextFilter(TextFilterText);
      OnAfterMakeCodeFilter(Position,TextFilterText);
      EXIT(Position);
    END;

    PROCEDURE MakeTimeFilter@206(VAR TimeFilterText@1000 : Text[250]) : Integer;
    VAR
      Position@1001 : Integer;
    BEGIN
      Position := TextManagement.MakeTimeFilter(TimeFilterText);
      OnAfterMakeTimeFilter(Position,TimeFilterText);
      EXIT(Position);
    END;

    PROCEDURE AutoFormatTranslate@12(AutoFormatType@1000 : Integer;AutoFormatExpr@1001 : Text[80]) : Text[80];
    VAR
      AutoFormatTranslation@1002 : Text[80];
    BEGIN
      AutoFormatTranslation := AutoFormatManagement.AutoFormatTranslate(AutoFormatType,AutoFormatExpr);
      OnAfterAutoFormatTranslate(AutoFormatType,AutoFormatExpr,AutoFormatTranslation);
      EXIT(AutoFormatTranslation);
    END;

    PROCEDURE ReadRounding@14() : Decimal;
    BEGIN
      EXIT(AutoFormatManagement.ReadRounding);
    END;

    PROCEDURE CaptionClassTranslate@15(Language@1000 : Integer;CaptionExpr@1001 : Text[1024]) : Text[1024];
    VAR
      Caption@1002 : Text[1024];
    BEGIN
      Caption := CaptionManagement.CaptionClassTranslate(Language,CaptionExpr);
      OnAfterCaptionClassTranslate(Language,CaptionExpr,Caption);
      EXIT(Caption);
    END;

    PROCEDURE GetCueStyle@16(TableId@1000 : Integer;FieldNo@1002 : Integer;CueValue@1001 : Decimal) : Text;
    VAR
      CueSetup@1003 : Codeunit 9701;
    BEGIN
      EXIT(CueSetup.GetCustomizedCueStyle(TableId,FieldNo,CueValue));
    END;

    PROCEDURE SetGlobalLanguage@5();
    BEGIN
      LanguageManagement.SetGlobalLanguage;
    END;

    PROCEDURE ValidateApplicationlLanguage@1102601001(LanguageID@1037 : Integer);
    BEGIN
      LanguageManagement.ValidateApplicationLanguage(LanguageID);
    END;

    PROCEDURE LookupApplicationlLanguage@1102601005(VAR LanguageID@1040 : Integer);
    BEGIN
      LanguageManagement.LookupApplicationLanguage(LanguageID);
    END;

    PROCEDURE GetGlobalTableTriggerMask@20(TableID@1000 : Integer) : Integer;
    VAR
      TableTriggerMask@1001 : Integer;
    BEGIN
      // Replaced by GetDatabaseTableTriggerSetup
      OnAfterGetGlobalTableTriggerMask(TableID,TableTriggerMask);
      EXIT(TableTriggerMask);
    END;

    PROCEDURE OnGlobalInsert@21(RecRef@1000 : RecordRef);
    BEGIN
      // Replaced by OnDataBaseInsert. This trigger is only called from pages.
      OnAfterOnGlobalInsert(RecRef);
    END;

    PROCEDURE OnGlobalModify@22(RecRef@1000 : RecordRef;xRecRef@1002 : RecordRef);
    BEGIN
      // Replaced by OnDataBaseModify. This trigger is only called from pages.
      OnAfterOnGlobalModify(RecRef,xRecRef);
    END;

    PROCEDURE OnGlobalDelete@23(RecRef@1000 : RecordRef);
    BEGIN
      // Replaced by OnDataBaseDelete. This trigger is only called from pages.
      OnAfterOnGlobalDelete(RecRef);
    END;

    PROCEDURE OnGlobalRename@24(RecRef@1000 : RecordRef;xRecRef@1002 : RecordRef);
    BEGIN
      // Replaced by OnDataBaseRename. This trigger is only called from pages.
      OnAfterOnGlobalRename(RecRef,xRecRef);
    END;

    PROCEDURE GetDatabaseTableTriggerSetup@25(TableId@1000 : Integer;VAR OnDatabaseInsert@1001 : Boolean;VAR OnDatabaseModify@1002 : Boolean;VAR OnDatabaseDelete@1003 : Boolean;VAR OnDatabaseRename@1004 : Boolean);
    VAR
      IntegrationManagement@1005 : Codeunit 5150;
      ChangeLogMgt@1006 : Codeunit 423;
    BEGIN
      ChangeLogMgt.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
      IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);

      OnAfterGetDatabaseTableTriggerSetup(TableId,OnDatabaseInsert,OnDatabaseModify,OnDatabaseDelete,OnDatabaseRename);
    END;

    PROCEDURE OnDatabaseInsert@26(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
    BEGIN
      ChangeLogMgt.LogInsertion(RecRef);

      IntegrationManagement.OnDatabaseInsert(RecRef);
      OnAfterOnDatabaseInsert(RecRef);
    END;

    PROCEDURE OnDatabaseModify@27(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
    BEGIN
      ChangeLogMgt.LogModification(RecRef);

      CheckFieldAutorisation(RecRef); //**4PS.n


      IntegrationManagement.OnDatabaseModify(RecRef);
      OnAfterOnDatabaseModify(RecRef);
    END;

    PROCEDURE OnDatabaseDelete@28(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
      ChangeLogMgt@1002 : Codeunit 423;
    BEGIN
      ChangeLogMgt.LogDeletion(RecRef);

      IntegrationManagement.OnDatabaseDelete(RecRef);
      OnAfterOnDatabaseDelete(RecRef);
    END;

    PROCEDURE OnDatabaseRename@29(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    VAR
      IntegrationManagement@1002 : Codeunit 5150;
      ChangeLogMgt@1003 : Codeunit 423;
    BEGIN
      ChangeLogMgt.LogRename(RecRef,xRecRef);
      CheckFieldAutorisation(RecRef); //**4PS.n


      IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
      OnAfterOnDatabaseRename(RecRef,xRecRef);
    END;

    PROCEDURE OnDebuggerBreak@55(ErrorMessage@1000 : Text);
    BEGIN
      DebuggerManagement.ProcessDebuggerBreak(ErrorMessage);
    END;

    PROCEDURE LaunchDebugger@60();
    BEGIN
      PAGE.RUN(PAGE::"Session List");
    END;

    PROCEDURE CustomizeChart@70(VAR TempChart@1000 : TEMPORARY Record 2000000078) : Boolean;
    VAR
      GenericChartMgt@1001 : Codeunit 9180;
    BEGIN
      EXIT(GenericChartMgt.ChartCustomization(TempChart));
    END;

    PROCEDURE HasCustomLayout@76(ObjectType@1004 : 'Report,Page';ObjectID@1000 : Integer) : Integer;
    VAR
      ReportLayoutSelection@1003 : Record 9651;
    BEGIN
      // Return value:
      // 0: No custom layout
      // 1: RDLC layout
      // 2: Word layout
      IF ObjectType <> ObjectType::Report THEN
        ERROR(NotSupportedErr);

      EXIT(ReportLayoutSelection.HasCustomLayout(ObjectID));
    END;

    PROCEDURE MergeDocument@77(ObjectType@1006 : 'Report,Page';ObjectID@1000 : Integer;ReportAction@1001 : 'SaveAsPdf,SaveAsWord,SaveAsExcel,Preview,Print';XmlData@1002 : InStream;FileName@1003 : Text);
    VAR
      DocumentReportMgt@1004 : Codeunit 9651;
    BEGIN
      IF ObjectType <> ObjectType::Report THEN
        ERROR(NotSupportedErr);

      DocumentReportMgt.MergeWordLayout(ObjectID,ReportAction,XmlData,FileName);
    END;

    PROCEDURE ReportGetCustomRdlc@78(ReportId@1000 : Integer) : Text;
    VAR
      CustomReportLayout@1002 : Record 9650;
    BEGIN
      EXIT(CustomReportLayout.GetCustomRdlc(ReportId));
    END;

    PROCEDURE ReportScheduler@79(ReportId@1000 : Integer;RequestPageXml@1001 : Text) : Boolean;
    VAR
      ScheduleAReport@1002 : Page 682;
    BEGIN
      EXIT(ScheduleAReport.ScheduleAReport(ReportId,RequestPageXml));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetApplicationVersion@1(VAR AppVersion@1000 : Text[80]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCompanyOpen@1010();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCompanyOpen@1007();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCompanyClose@1017();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCompanyClose@1013();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetSystemIndicator@1018(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFindPrinter@1023(ReportID@1000 : Integer;VAR PrinterName@1001 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetDefaultRoleCenter@1033(VAR DefaultRoleCenterID@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeDateText@1036(VAR Position@1000 : Integer;VAR DateText@1001 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeTimeText@1039(VAR Position@1001 : Integer;VAR TimeText@1000 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeText@1040(VAR Position@1001 : Integer;VAR Text@1000 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeDateTimeFilter@1045(VAR Position@1001 : Integer;VAR DateTimeFilterText@1000 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeDateFilter@1046(VAR Position@1001 : Integer;VAR DateFilterText@1000 : Text[1024]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeTextFilter@1047(VAR Position@1001 : Integer;VAR TextFilterText@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeCodeFilter@1052(VAR Position@1001 : Integer;VAR TextFilterText@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMakeTimeFilter@1053(VAR Position@1001 : Integer;VAR TimeFilterText@1000 : Text[250]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAutoFormatTranslate@1056(AutoFormatType@1001 : Integer;AutoFormatExpression@1000 : Text[80];VAR AutoFormatTranslation@1002 : Text[80]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCaptionClassTranslate@1061(Language@1001 : Integer;CaptionExpression@1000 : Text[1024];VAR Caption@1002 : Text[1024]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetGlobalTableTriggerMask@1001(TableID@1000 : Integer;VAR TableTriggerMask@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnGlobalInsert@1002(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnGlobalModify@1003(RecRef@1000 : RecordRef;xRecRef@1002 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnGlobalDelete@1004(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnGlobalRename@1005(RecRef@1000 : RecordRef;xRecRef@1002 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetDatabaseTableTriggerSetup@1020(TableId@1000 : Integer;VAR OnDatabaseInsert@1001 : Boolean;VAR OnDatabaseModify@1002 : Boolean;VAR OnDatabaseDelete@1003 : Boolean;VAR OnDatabaseRename@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDatabaseInsert@1035(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDatabaseModify@1034(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDatabaseDelete@1032(RecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOnDatabaseRename@1024(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    BEGIN
    END;

    PROCEDURE "Fmt Decimal"@304(Data@1000 : Decimal;Arg@1001 : Text[200]) : Text[260];
    VAR
      DatetimeMgt@1003 : Codeunit 11020218;
    BEGIN
      //**4PS (db, 07-09-09: T3915)
      IF Arg = 'DATETIME' THEN
        EXIT(DatetimeMgt.OLDDatetime2Text(Data));
    END;

    PROCEDURE "Eval Decimal"@404(Source@1000 : Text[260];SourceLen@1001 : Integer;VAR SourceUsed@1002 : Integer;Arg@1003 : Text[30]) : Decimal;
    VAR
      DatetimeMgt@1006 : Codeunit 11020218;
      StringPosition@1004 : Integer;
    BEGIN
      //**4PS (db, 07-09-09: T3915)
      IF Arg = 'DATETIME' THEN BEGIN
        StringPosition := STRPOS(Source,'..');
        IF StringPosition = 0 THEN
          StringPosition := STRPOS(Source,'|');

        IF StringPosition > 0 THEN BEGIN
          SourceUsed := StringPosition - 1;
          Source := COPYSTR(Source, 1, SourceUsed);
        END ELSE
          SourceUsed := SourceLen;
        EXIT(DatetimeMgt.OLDText2Datetime(Source));
      END;
      EXIT(0);
    END;

    PROCEDURE CheckFieldAutorisation@1100525002(RecRef@1100525001 : RecordRef);
    VAR
      ExtendedFieldProperty@1100525002 : Record 11020567;
      FieldAutorisationMgt@1100525003 : Codeunit 11012395;
    BEGIN
      //**4PS
      IF NOT ExtFieldPropRead THEN BEGIN
        ExtendedFieldProperty.SETCURRENTKEY("Check Field Authorization");
        ExtendedFieldProperty.SETRANGE("Check Field Authorization",TRUE);
        ExtFieldPropPresent := NOT ExtendedFieldProperty.ISEMPTY;
        ExtFieldPropRead := TRUE;
      END;
      IF NOT ExtFieldPropPresent THEN
        EXIT;
      FieldAutorisationMgt.CheckFieldPermission(RecRef);
    END;

    PROCEDURE IsDataPerCompany@1100409000(TableNo@1100409000 : Integer) : Boolean;
    VAR
      TableInformation@1100409001 : Record 2000000028;
    BEGIN
      //**4PS
      //EXIT(Object.GET(Object.Type::TableData, COMPANYNAME, TableNo)); //No longer suitable for NAV2013 R2, T005249
      EXIT(TableInformation.GET(COMPANYNAME,TableNo)); //NAV2013 R2
    END;

    PROCEDURE GetLastChangeDateObjects@1100409001() : Date;
    VAR
      Object@1100528000 : Record 2000000001;
      LastDate@1100528001 : Date;
    BEGIN
      //**4PS
      Object.SETFILTER(ID, '..%1|%2..', 49999, 999999); //Skip custom objects

      IF NOT Object.FINDSET THEN
        EXIT(0D);

      REPEAT
        IF Object.Date > LastDate THEN
          LastDate := Object.Date;
      UNTIL Object.NEXT = 0;

      EXIT(LastDate);
    END;

    LOCAL PROCEDURE StorePaperSources@1100528000(PaperSourceFirstPage@1100528002 : Integer;PaperSourceDefaultPage@1100528001 : Integer;PaperSourceLastPage@1100528000 : Integer);
    BEGIN
      //**4PS
      StoredPaperSourceFirstPage := PaperSourceFirstPage;
      StoredPaperSourceDefaultPage := PaperSourceDefaultPage;
      StoredPaperSourceLastPage := PaperSourceLastPage;
    END;

    PROCEDURE GetPaperTrayForReport@75(ReportID@1000 : Integer;VAR FirstPage@1001 : Integer;VAR DefaultPage@1002 : Integer;VAR LastPage@1003 : Integer);
    VAR
      PrinterSelection@1100528000 : Record 78;
      PrinterSelectionperCompany@1100528001 : Record 11020313;
    BEGIN
      //**4PS, Signature is NAV, implicit function called when submitting print command, don't change!!
      FirstPage := StoredPaperSourceFirstPage;
      DefaultPage := StoredPaperSourceDefaultPage;
      LastPage := StoredPaperSourceLastPage;
    END;

    BEGIN
    {
      se-100-46 2016-05-03 13:32:30
      se-201-05
      w1-900-001
      NAVFI7.10.00.36281
      NAVNO7
      NAVDK7
      NAVSE6 (LB)
      NAVSE9.00.00.45834 (NAV2016 cu07)
    }
    END.
  }
}

