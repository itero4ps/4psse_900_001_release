OBJECT Codeunit 11012006 Cost Control Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TotCostDec@1210190005 : Decimal;
      AllowedDec@1210190009 : Decimal;
      AllowedHoursDec@1210190008 : Decimal;
      PrevAllowedDec@1210190007 : Decimal;
      PrevAllowedHoursDec@1210190006 : Decimal;
      PurchaseDec@1210190004 : Decimal;
      EstimPurchResultDec@1210190003 : Decimal;
      PurchCostDec@1210190002 : Decimal;
      ActualPurchResultDec@1210190001 : Decimal;
      TotPurchResultDec@1210190000 : Decimal;
      AllowedPerc@1210190010 : Decimal;
      CalculatedEndResultDec@1210190011 : Decimal;
      TotHoursDec@1100485000 : Decimal;
      TotContrAmnt@1100485001 : Decimal;
      TotContractDec@1100485002 : Decimal;
      TotBudgetDec@1100485003 : Decimal;
      TotAllowedDec@1100485004 : Decimal;
      TotOpenDec@1100485005 : Decimal;
      SetupRead@1100525000 : Boolean;
      JobSetup@1100525001 : Record 315;
      Project@1210190012 : Record 11072003;
      CostContMgt@1210190013 : Codeunit 11012006;
      BudgetOrAllowedPresentGlobal@1100528500 : Boolean;
      BudgetOrAllowedPresentMainProj@1100528501 : Boolean;
      BudgetOrAllowedPresentProject@1100528502 : Boolean;
      BudgetOrAllowedCheckedGlobal@1100528503 : Boolean;
      BudgetOrAllowedCheckedMainProj@1100528504 : Code[20];
      BudgetOrAllowedCheckedProject@1100528505 : Code[20];

    PROCEDURE CalcFieldsProject@1210190007(VAR Rec@1210190000 : Record 11072003);
    BEGIN
      WITH Rec DO BEGIN
        IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
          SETFILTER("Project Filter", "No.")
        ELSE
          IF GETFILTER("Project Status") = '' THEN  //**4PS03.n
            SETFILTER("Project Filter", '');

        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours (Entire Project)");

        CALCFIELDS(
          Prognosis, "Prognosis Total Cost", "Hours Prognosis", "Risc Coverage (Prognosis)",
          "Contract Amount", "Project Contract Amount",
          "Extension Contract Amount", "Options Contract Amount",
          "Preregistration WIP Account",
          "Closed Costs", "Closed Revenues");

        IF "Preregistration WIP Account" <> '' THEN
          CALCFIELDS("Preregistered WIP")
        ELSE
          "Preregistered WIP" := 0;

      END;
    END;

    PROCEDURE CalcFieldsCostType@1210190026(VAR Rec@1210190000 : Record 11012046);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS("Single/Main/Sub Project");
        IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
          SETFILTER("Project Filter", "Project No.")
        ELSE
          SETFILTER("Project Filter", '');
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours");
        CALCFIELDS(
          Prognosis, "Prognosis Total Cost", "Hours Prognosis","Risc Coverage (Prognosis)",
          Revenues, "Purchase Period", "Actuals Period");
        IF "Cost Type" <> "Cost Type"::Labor THEN
          "Actual Hours" := 0;  //db, 29-11-11: M31135
      END;
    END;

    PROCEDURE CalcFieldsCostObj@1210190034(VAR Rec@1210190000 : Record 11012047);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS("Single/Main/Sub Project");
        IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
          SETFILTER("Project Filter", "Project No.")
        ELSE
          SETFILTER("Project Filter", '');
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours");
        CALCFIELDS(
          Prognosis, "Prognosis Total Cost", "Hours Prognosis", "Risc Coverage (Prognosis)",
          "Original Budget Amount", "Original Budget Hours",
          Adjustments, "Adjustments Hours",
          Extension, "Extension Hours",
          Options , "Option Hours",
          "Purchase Period", "Actuals Period", "Actual Hours Period");
      END;
    END;

    PROCEDURE CalcFieldsElem@1210190071(VAR Rec@1210190000 : Record 11012048);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS("Single/Main/Sub Project");
        IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
          SETFILTER("Project Filter", "Project No.")
        ELSE
          SETFILTER("Project Filter", '');
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced","Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours");
        CALCFIELDS(
          Prognosis, "Prognosis Total Cost","Hours Prognosis", "Risc Coverage (Prognosis)",
          Revenues, "Purchase Period",
          "Revenues Period", "Actuals Period");
      END;
    END;

    PROCEDURE CalcFieldsElemCostType@1210190041(VAR Rec@1210190000 : Record 11012049);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS("Single/Main/Sub Project");
        IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
          SETFILTER("Project Filter", "Project No.")
        ELSE
          SETFILTER("Project Filter", '');
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)",
          "Open Ovh. Surch. Soft (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours");
        CALCFIELDS(
          Prognosis, "Prognosis Total Cost","Hours Prognosis", "Risc Coverage (Prognosis)",
          "Purchase Period", "Actuals Period");
        IF "Cost Type" <> "Cost Type"::Labor THEN
          "Actual Hours" := 0;  //db, 29-11-11: M31135
      END;
    END;

    PROCEDURE CalcFieldsElemCostObj@1210190047(VAR Rec@1210190000 : Record 11012050);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS("Single/Main/Sub Project");
        IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
          SETFILTER("Project Filter", "Project No.")
        ELSE
          SETFILTER("Project Filter", '');
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)",
          "Open Ovh. Surch. Soft (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours");
        CALCFIELDS(
          Prognosis, "Prognosis Total Cost","Hours Prognosis", "Risc Coverage (Prognosis)",
          "Original Budget Amount", "Purchase Period",
          "Hours Prognosis", "Actuals Period",
          "Actual Hours Period", Extension,
          Options, Adjustments);
      END;
    END;

    PROCEDURE CalcFieldsExt@1210190103(VAR Rec@1210190000 : Record 11012004);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours", Revenues);
        CALCFIELDS("Open Ovh. Surch. Soft (Purch.)");
      END;
    END;

    PROCEDURE CalcFieldsExtCostType@1210190108(VAR Rec@1210190000 : Record 11020222);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours");
        CALCFIELDS("Open Ovh. Surch. Soft (Purch.)");
        IF "Cost Type" <> "Cost Type"::Labor THEN
          "Actual Hours" := 0;  //db, 29-11-11: M31135
      END;
    END;

    PROCEDURE CalcFieldsExtCostObj@1210190112(VAR Rec@1210190000 : Record 11020223);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours");
        CALCFIELDS("Open Ovh. Surch. Soft (Purch.)");
      END;
    END;

    PROCEDURE CalcFieldsCostComp@1100485046(VAR Rec@1210190000 : Record 11020297);
    VAR
      PrognLineCC@1100285000 : Record 11128270;
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS("Single/Main/Sub Project");
        IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN
          SETFILTER("Project Filter", "Project No.")
        ELSE
          SETFILTER("Project Filter", '');
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase, "Purchase Budget",
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Risc Coverage", "Risc Coverage Withdraw",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)",
          "Open Amount (Hours)", "Open Hours", "Open Ovh. Surch. (Hours)",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          Budget, "Budget Hours");
        CALCFIELDS(
      //>>4PS-001
          //"Prognosis Cost",
          //"Prognosis Total Cost",
      //<<4PS-001
          "Hours Prognosis", "Risc Coverage (Prognosis)",
          "Open Ovh. Surch. Soft (Purch.)",
          "Purchase Period", "Actual Costs Period",
          "Actual Hours Period");
      END;

      //>>4PS-001
      PrognLineCC.RESET;
      PrognLineCC.SETRANGE("Main Project No.", Rec."Main Project No.");
      PrognLineCC.SETRANGE("Cost Component Code", Rec."Cost Component");
      IF Rec.GETFILTER("Project Filter") <> '' THEN
        PrognLineCC.SETRANGE("Project No.", Rec.GETFILTER("Project Filter"));
      IF Rec.GETFILTER("Prognosis Filter") <> '' THEN
        PrognLineCC.SETFILTER("Prognosis Date", Rec.GETFILTER("Prognosis Filter"));

      PrognLineCC.CALCSUMS("Prognosis Costs","Overhead Surch. Progn. Costs");
      Rec."Prognosis Cost" :=
        PrognLineCC."Prognosis Costs" + PrognLineCC."Overhead Surch. Progn. Costs";
      //<<4PS-001
    END;

    PROCEDURE CalcFieldsServContr@1210190070(VAR Rec@1210190000 : Record 11012812);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase,
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)",
          "Open Amount (Hours)", "Open Ovh. Surch. (Hours)", "Open Hours",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          "Allowed Costs", "Allowed Costs (Ovh. Surch.)", "Allowed Hours",
          "Order Amount");
        CALCFIELDS(
          "Budget Amount (ServOrder)", "Budget Ovh. Surch. (ServOrder)", "Budget Hours (ServOrder)",
          "Budget Amount (Contract)", "Budget Ovh. Surch. (Contract)", "Budget Hours (Contract)",
          "Budget Amount (ST Contract)", "Budget Ovh. Surch. (ST Contr)");
        CALCFIELDS(
          "Open Ovh. Surch. Soft (Purch.)",
          "Closed Costs", "Closed Revenues"); //M17847

      END;
    END;

    PROCEDURE CalcFieldsServOrder@1210190089(VAR Rec@1210190000 : Record 11012823);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS(
          "Actual Costs", "Actual Hours",
          Purchase,
          "Received/Not Invoiced", "Received/Not Inv. Hours",
          "Open (Purchase)", "Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)",
          "Open Amount (Hours)", "Open Ovh. Surch. (Hours)", "Open Hours",
          "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
          "Allowed Costs", "Allowed Costs (Ovh. Surch.)", "Allowed Hours",
          "Budget Amount", "Budget Overhead Surcharge");  //db, 08-04-10: M18560
      END;
    END;

    PROCEDURE OutstandingProject@1210190000(VAR Rec@1210190000 : Record 11072003;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingCostType@1210190028(VAR Rec@1210190000 : Record 11012046;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingCostObj@1210190042(VAR Rec@1210190000 : Record 11012047;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingElem@1210190072(VAR Rec@1210190000 : Record 11012048;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingElemCostType@1210190054(VAR Rec@1210190000 : Record 11012049;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingElemCostObj@1210190048(VAR Rec@1210190000 : Record 11012050;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingExt@1210190116(VAR Rec@1210190000 : Record 11012004;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingExtCostType@1210190111(VAR Rec@1210190000 : Record 11020222;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingExtCostObj@1210190123(VAR Rec@1210190000 : Record 11020223;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingServContr@1210190083(VAR Rec@1210190000 : Record 11012812;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE OutstandingServOrder@1210190090(VAR Rec@1210190000 : Record 11012823;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open (Purchase)");
        EXIT("Open (Purchase)");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedProject@1210190001(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedCostType@1210190029(VAR Rec@1210190001 : Record 11012046;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedCostObj@1210190043(VAR Rec@1210190001 : Record 11012047;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedElem@1210190073(VAR Rec@1210190001 : Record 11012048;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedElemCostTyp@1210190059(VAR Rec@1210190001 : Record 11012049;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedElemCostObj@1210190049(VAR Rec@1210190001 : Record 11012050;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedExt@1210190117(VAR Rec@1210190001 : Record 11012004;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedExtCostType@1210190113(VAR Rec@1210190001 : Record 11020222;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedExtCostObj@1210190124(VAR Rec@1210190001 : Record 11020223;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedServContr@1210190084(VAR Rec@1210190001 : Record 11012812;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvoicedServOrder@1210190091(VAR Rec@1210190001 : Record 11012823;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Invoiced");
        EXIT("Received/Not Invoiced");
      END;
    END;

    PROCEDURE ReceivedNotInvHoursCostObj@1210190102(VAR Rec@1210190001 : Record 11012047;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Received/Not Inv. Hours");
        EXIT("Received/Not Inv. Hours");
      END;
    END;

    PROCEDURE OpenOvhPurchProject@1210190003(VAR Rec@1210190000 : Record 11072003;ExecCalcFields@1210190001 : Boolean) : Decimal;
    VAR
      ProjectSetup@1100525000 : Record 315;
    BEGIN
      ProjectSetup.GET;
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchCostType@1210190025(VAR Rec@1210190000 : Record 11012046;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchCostObj@1210190044(VAR Rec@1210190000 : Record 11012047;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchElem@1210190074(VAR Rec@1210190000 : Record 11012048;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchElemCostType@1210190061(VAR Rec@1210190000 : Record 11012049;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchElemCostObj@1210190050(VAR Rec@1210190000 : Record 11012050;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchExt@1210190118(VAR Rec@1210190000 : Record 11012004;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchExtCostType@1210190114(VAR Rec@1210190000 : Record 11020222;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchExtCostObj@1210190125(VAR Rec@1210190000 : Record 11020223;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchServContr@1210190085(VAR Rec@1210190000 : Record 11012812;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE OpenOvhPurchServOrder@1210190092(VAR Rec@1210190000 : Record 11012823;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Open Ovh. Surch. Firm (Purch.)", "Open Ovh. Surch. Soft (Purch.)");
        IF InclOpenPurchase THEN
          EXIT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)")
        ELSE
          EXIT("Open Ovh. Surch. Firm (Purch.)")
      END;
    END;

    PROCEDURE TotOpenServContr@1100485131(VAR Rec@1210190000 : Record 11012812;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Open (Purchase)", "Received/Not Invoiced", "Open Ovh. Surch. Firm (Purch.)",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)");

        TotOpenDec :=
          "Open (Purchase)" + "Received/Not Invoiced" +
          "Open Ovh. Surch. Soft (Purch.)" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)";
        EXIT(TotOpenDec);
      END;
    END;

    PROCEDURE TotOpenServOrder@1100485132(VAR Rec@1210190000 : Record 11012823;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Open (Purchase)", "Received/Not Invoiced", "Open Ovh. Surch. Firm (Purch.)",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)");

        TotOpenDec :=
          "Open (Purchase)" + "Received/Not Invoiced" +
          "Open Ovh. Surch. Soft (Purch.)" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)";
        EXIT(TotOpenDec);
      END;
    END;

    PROCEDURE TotCostProject@1210190021(VAR Rec@1210190000 : Record 11072003;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Firm (Purch.)",  "Open Ovh. Surch. Soft (Purch.)",
            "Received/Not Invoiced",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
            "Risc Coverage (Prognosis)");

        TotCostDec :=
          "Actual Costs" +
           "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)" +
          "Risc Coverage (Prognosis)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostCostType@1210190024(VAR Rec@1210190000 : Record 11012046;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
            "Risc Coverage (Prognosis)");

        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)" +
          "Risc Coverage (Prognosis)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostCostObj@1210190036(VAR Rec@1210190000 : Record 11012047;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
            "Risc Coverage (Prognosis)");

        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)" +
          "Risc Coverage (Prognosis)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostElem@1210190075(VAR Rec@1210190000 : Record 11012048;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
            "Risc Coverage (Prognosis)");
        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)" +
          "Risc Coverage (Prognosis)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostElemCostType@1210190062(VAR Rec@1210190000 : Record 11012049;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
            "Risc Coverage (Prognosis)");

        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)" +
          "Risc Coverage (Prognosis)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostElemCostObj@1210190051(VAR Rec@1210190000 : Record 11012050;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
            "Risc Coverage (Prognosis)");

        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)" +
          "Risc Coverage (Prognosis)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostExt@1210190107(VAR Rec@1210190000 : Record 11012004;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)");

        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostExtCostType@1210190115(VAR Rec@1210190000 : Record 11020222;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)");

        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostExtCostObj@1210190126(VAR Rec@1210190000 : Record 11020223;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
            "Open (Inventory)", "Open Ovh. Surch. (Inventory)");

        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
          "Open (Inventory)" + "Open Ovh. Surch. (Inventory)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostCostComp@1100485003(VAR Rec@1210190000 : Record 11020297;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Costs", "Open (Purchase)",
            "Open Ovh. Surch. Firm (Purch.)", "Received/Not Invoiced",
            "Open Ovh. Surch. Soft (Purch.)",
            "Open Amount (Hours)", "Open Ovh. Surch. (Hours)",
      //>>4PS-001
          "Open (Inventory)",
      //<<4PS-001
            "Risc Coverage (Prognosis)");

        TotCostDec :=
          "Actual Costs" +
          "Received/Not Invoiced" + "Open Ovh. Surch. Firm (Purch.)" +
          "Open Amount (Hours)" + "Open Ovh. Surch. (Hours)" +
      //>>4PS-001
          "Open (Inventory)"+
      //<<4PS-001
          "Risc Coverage (Prognosis)";

        IF InclOpenPurchase THEN
          TotCostDec := TotCostDec + "Open (Purchase)" + "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostServContr@1210190086(VAR Rec@1210190000 : Record 11012812;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Actual Costs", "Open (Purchase)");

        TotOpenDec := TotOpenServContr(Rec, ExecCalcFields);
        TotCostDec := "Actual Costs" + TotOpenDec;

        IF NOT InclOpenPurchase THEN
          TotCostDec := TotCostDec - "Open (Purchase)" - "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotCostServOrder@1210190093(VAR Rec@1210190000 : Record 11012823;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Actual Costs", "Open (Purchase)");

        TotOpenDec := TotOpenServOrder(Rec, ExecCalcFields);
        TotCostDec := "Actual Costs" + TotOpenDec;

        IF NOT InclOpenPurchase THEN
          TotCostDec := TotCostDec - "Open (Purchase)" - "Open Ovh. Surch. Soft (Purch.)";

        EXIT(TotCostDec);
      END;
    END;

    PROCEDURE TotHoursProject@1100485001(VAR Rec@1100485001 : Record 11072003;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";

        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursCostType@1100485002(VAR Rec@1100485001 : Record 11012046;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          IF ExecCalcFields THEN
            CALCFIELDS(
              "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

          TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        END ELSE
          TotHoursDec := 0;
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursCostObj@1100485000(VAR Rec@1210190000 : Record 11012047;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursElem@1100485004(VAR Rec@1100485001 : Record 11012048;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursElemCostType@1100485013(VAR Rec@1100485001 : Record 11012049;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          IF ExecCalcFields THEN
            CALCFIELDS(
              "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

          TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        END ELSE
          TotHoursDec := 0;
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursElemCostObj@1100485014(VAR Rec@1100485001 : Record 11012050;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursExt@1100485015(VAR Rec@1100485001 : Record 11012004;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursExtCostType@1100485021(VAR Rec@1100485001 : Record 11020222;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursExtCostObj@1100485017(VAR Rec@1100485001 : Record 11020223;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursCostComp@1100485045(VAR Rec@1210190000 : Record 11020297;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursServContr@1100485022(VAR Rec@1100485001 : Record 11012812;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotHoursServOrder@1100485019(VAR Rec@1100485001 : Record 11012823;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Actual Hours", "Received/Not Inv. Hours", "Open Hours");

        TotHoursDec := "Actual Hours" + "Received/Not Inv. Hours" + "Open Hours";
        EXIT(TotHoursDec);
      END;
    END;

    PROCEDURE TotContrAmntProject@1100485081(VAR Rec@1100485001 : Record 11072003;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Project Contract Amount","Extension Contract Amount","Options Contract Amount");

        TotContractDec := "Project Contract Amount" + "Extension Contract Amount" + "Options Contract Amount";
        EXIT(TotContractDec);
      END;
    END;

    PROCEDURE TotContrAmntServContr@1100485080(VAR Rec@1100485001 : Record 11012812;ExecCalcFields@1100485000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Order Amount");
        TotContractDec := "Order Amount";

        EXIT(TotContractDec);
      END;
    END;

    PROCEDURE BudgetHoursServContr@1100485102(VAR Rec@1100485001 : Record 11012812;ExecCalcFields@1100485000 : Boolean) BudgetHours : Decimal;
    VAR
      lvOverlap@1100485002 : Boolean;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Budget Hours (ServOrder)", "Budget Hours (Contract)");
        IF GETFILTER("Source Type Filter") = '' THEN
          lvOverlap := TRUE
        ELSE
          IF GETRANGEMAX("Source Type Filter") = "Source Type Filter"::Contract THEN
            lvOverlap := TRUE;
        IF lvOverlap = FALSE THEN
          BudgetHours := "Budget Hours (ServOrder)"
        ELSE
          BudgetHours := "Budget Hours (Contract)";
        EXIT(BudgetHours);
      END;
    END;

    PROCEDURE BudgetHoursServOrder@1100485104(VAR Rec@1100485001 : Record 11012823;ExecCalcFields@1100485000 : Boolean) BudgetHours : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Budget Hours");
        BudgetHours := "Budget Hours";
        EXIT(BudgetHours);
      END;
    END;

    PROCEDURE TotBudgetServContr@1100485079(VAR Rec@1100485001 : Record 11012812;ExecCalcFields@1100485000 : Boolean) TotBudgetDec : Decimal;
    VAR
      lvOverlap@1100485002 : Boolean;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Budget Amount (ServOrder)", "Budget Ovh. Surch. (ServOrder)",
            "Budget Amount (Contract)", "Budget Ovh. Surch. (Contract)",
            "Budget Amount (ST Contract)", "Budget Ovh. Surch. (ST Contr)");
        IF GETFILTER("Source Type Filter") = '' THEN
          lvOverlap := TRUE
        ELSE
          IF GETRANGEMAX("Source Type Filter") = "Source Type Filter"::Contract THEN
            lvOverlap := TRUE;
        IF lvOverlap = FALSE THEN
          TotBudgetDec :=
            ("Budget Amount (ServOrder)" + "Budget Ovh. Surch. (ServOrder)")
        ELSE
          TotBudgetDec :=
            ("Budget Amount (ServOrder)" + "Budget Ovh. Surch. (ServOrder)") +
            ("Budget Amount (Contract)" + "Budget Ovh. Surch. (Contract)") -
            ("Budget Amount (ST Contract)" + "Budget Ovh. Surch. (ST Contr)");
        EXIT(TotBudgetDec);
      END;
    END;

    PROCEDURE TotBudgetServOrder@1100485087(VAR Rec@1100485001 : Record 11012823;ExecCalcFields@1100485000 : Boolean) TotBudgetDec : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Budget Amount", "Budget Overhead Surcharge");
        TotBudgetDec := "Budget Amount" + "Budget Overhead Surcharge";
        EXIT(TotBudgetDec);
      END;
    END;

    PROCEDURE TotBudgetHoursServContr@1100525004(VAR Rec@1100485001 : Record 11012812;ExecCalcFields@1100485000 : Boolean) TotBudgetHours : Decimal;
    VAR
      lvOverlap@1100485002 : Boolean;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(
            "Budget Hours (ServOrder)",
            "Budget Hours (Contract)",
            "Budget Hours (ST Contract)");
        IF GETFILTER("Source Type Filter") = '' THEN
          lvOverlap := TRUE
        ELSE
          IF GETRANGEMAX("Source Type Filter") = "Source Type Filter"::Contract THEN
            lvOverlap := TRUE;
        IF lvOverlap = FALSE THEN
          TotBudgetHours :=
            ("Budget Hours (ServOrder)")
        ELSE
          TotBudgetHours :=
            ("Budget Hours (ServOrder)") +
            ("Budget Hours (Contract)" ) -
            ("Budget Hours (ST Contract)");
        EXIT(TotBudgetHours);
      END;
    END;

    PROCEDURE TotAllowedServContr@1100485099(VAR Rec@1100485001 : Record 11012812;ExecCalcFields@1100485000 : Boolean) TotAllowedDec : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Allowed Costs", "Allowed Costs (Ovh. Surch.)");
        TotAllowedDec := "Allowed Costs" + "Allowed Costs (Ovh. Surch.)";
        EXIT(TotAllowedDec);
      END;
    END;

    PROCEDURE TotAllowedServOrder@1100485100(VAR Rec@1100485001 : Record 11012823;ExecCalcFields@1100485000 : Boolean) TotAllowedDec : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Allowed Costs", "Allowed Costs (Ovh. Surch.)");
        TotAllowedDec := "Allowed Costs" + "Allowed Costs (Ovh. Surch.)";
        EXIT(TotAllowedDec);
      END;
    END;

    PROCEDURE PrognTotCostProject@1100485025(VAR Rec@1210190000 : Record 11072003;ExecCalcFields@1210190002 : Boolean) : Decimal;
    VAR
      PrognosisRec@1100485001 : Record 11012034;
      PrognosisSubRec@1100525003 : Record 11012034;
      SubProjRec@1100525002 : Record 11072003;
      lvRoughPrognosisPresent@1100485000 : Boolean;
      lvPrognosisPresent@1100525000 : Boolean;
      lvPrognTotCost@1100525001 : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF GETFILTER("Prognosis Filter") <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "No.");
          PrognosisRec.SETFILTER("Prognosis Date", GETFILTER("Prognosis Filter"));
          IF PrognosisRec.FINDFIRST THEN BEGIN
            lvPrognosisPresent := TRUE;
            lvRoughPrognosisPresent := PrognosisRec."Prognosis Level" = PrognosisRec."Prognosis Level"::Rough;
          END;
        END;
        IF lvRoughPrognosisPresent THEN
          EXIT(PrognosisRec."Rough Prognosis Total Cost");

        IF ("Single/Main/Sub Project" = "Single/Main/Sub Project"::"Main Project") AND NOT lvPrognosisPresent THEN BEGIN
          //This part speeds up situations in which no prognoses are made
          PrognosisSubRec.SETCURRENTKEY("Main Project No.","Prognosis Date");
          PrognosisSubRec.SETRANGE("Main Project No.", "No.");
          PrognosisSubRec.SETFILTER("Prognosis Date",GETFILTER("Cumulation Filter"));
          IF NOT PrognosisSubRec.ISEMPTY THEN BEGIN
          //
            SubProjRec.SETCURRENTKEY("Main Project");
            SubProjRec.SETRANGE("Main Project", "Main Project");
            Rec.COPYFILTER("Cumulation Filter", SubProjRec."Cumulation Filter");
            IF SubProjRec.FINDSET THEN
              REPEAT
                SubProjRec.SETRANGE("Project Filter", SubProjRec."No.");
                PrognosisSubRec.RESET;
                PrognosisSubRec.SETRANGE("Project No.", SubProjRec."No.");
                PrognosisSubRec.SETFILTER("Prognosis Date", GETFILTER("Cumulation Filter"));
                IF PrognosisSubRec.FINDLAST THEN BEGIN
                  IF PrognosisSubRec."Prognosis Level" = PrognosisSubRec."Prognosis Level"::Rough THEN
                    lvPrognTotCost := lvPrognTotCost + PrognosisSubRec."Rough Prognosis Total Cost"
                  ELSE BEGIN
                    PrognosisSubRec.CALCFIELDS("Prognosis Total Cost");
                    lvPrognTotCost := lvPrognTotCost + PrognosisSubRec."Prognosis Total Cost";
                  END;
                END ELSE BEGIN
                  lvPrognTotCost := lvPrognTotCost + CostContMgt.TotCostProject(SubProjRec, TRUE);
                END;
              UNTIL SubProjRec.NEXT = 0;
            EXIT(lvPrognTotCost);
          END;
        END;

        IF lvPrognosisPresent THEN BEGIN
          IF PrognosisRec."Fix Prognosis Line" THEN BEGIN
            IF ExecCalcFields THEN
              CALCFIELDS("Prognosis Total Cost");
            EXIT("Prognosis Total Cost");
          END ELSE BEGIN
            IF ExecCalcFields THEN BEGIN
              TotCostDec := TotCostProject(Rec, ExecCalcFields);
              //>>4PS-001
              //CALCFIELDS(Prognosis);
              CALCFIELDS(Prognosis,"Overhead Surch. Progn. Costs");
              //<<4PS-001
            END;
            //>>4PS-001
            //EXIT(TotCostDec + Prognosis);
            EXIT(TotCostDec + Prognosis + "Overhead Surch. Progn. Costs");
            //<<4PS-001
          END;
        END ELSE BEGIN
          IF ExecCalcFields THEN
            TotCostDec := TotCostProject(Rec, ExecCalcFields);
          EXIT(TotCostDec);
        END;
      END;
    END;

    PROCEDURE PrognTotCostCostType@1210190023(VAR Rec@1210190000 : Record 11012046;ExecCalcFields@1210190002 : Boolean) : Decimal;
    VAR
      PrognosisRec@1210190004 : Record 11012034;
      SubProjRec@1210190006 : Record 11072003;
      SubControlProjectCostType@1210190005 : Record 11012046;
      PrognTotCost@1210190008 : Decimal;
      FiltGroup@1210190003 : Integer;
      PrognDateFilter@1210190001 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Prognosis Total Cost");

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

      //call 33954
        GetProject("Project No.");
        IF (Project."Single/Main/Sub Project" = Project."Single/Main/Sub Project"::"Main Project") THEN BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF (PrognosisRec."Project No." = '') THEN BEGIN
            SubProjRec.SETCURRENTKEY("Main Project");
            SubProjRec.SETRANGE("Main Project", "Main Project No.");
            Rec.COPYFILTER("Cumulation Filter", SubProjRec."Cumulation Filter");
            IF SubProjRec.FINDSET THEN BEGIN
              REPEAT
                SubControlProjectCostType.COPY(Rec);
                SubControlProjectCostType.SETRANGE("Project Filter", SubProjRec."No.");
                SubControlProjectCostType."Project No." := SubProjRec."No.";
                IF SubProjRec."No." = "Main Project No." THEN
                  PrognTotCost := PrognTotCost + CostContMgt.TotCostCostType(
                    SubControlProjectCostType, TRUE)
                ELSE
                  PrognTotCost := PrognTotCost + CostContMgt.PrognTotCostCostType(
                    SubControlProjectCostType, TRUE);
              UNTIL SubProjRec.NEXT = 0;
              EXIT(PrognTotCost);
            END;
          END;
        END;
      //

        IF ("Prognosis Total Cost" = 0) AND (PrognDateFilter = '') THEN BEGIN
          TotCostDec := TotCostCostType(Rec, ExecCalcFields);
          EXIT(TotCostDec);
        END ELSE BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF PrognosisRec."Fix Prognosis Line" THEN
            EXIT("Prognosis Total Cost")
          ELSE BEGIN
            IF ExecCalcFields THEN BEGIN
              TotCostDec := TotCostCostType(Rec, ExecCalcFields);
              CALCFIELDS(Prognosis);
            END;
            EXIT(TotCostDec + Prognosis);
          END;
        END;
      END;
    END;

    PROCEDURE PrognTotCostCostObj@1210190037(VAR Rec@1210190000 : Record 11012047;ExecCalcFields@1210190002 : Boolean) : Decimal;
    VAR
      PrognosisRec@1210190004 : Record 11012034;
      SubProjRec@1210190006 : Record 11072003;
      SubControlProjectCostObject@1210190005 : Record 11012047;
      PrognTotCost@1210190008 : Decimal;
      FiltGroup@1210190003 : Integer;
      PrognDateFilter@1210190001 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Prognosis Total Cost");

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

      //call 33954
        GetProject("Project No.");
        IF (Project."Single/Main/Sub Project" = Project."Single/Main/Sub Project"::"Main Project") THEN BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF (PrognosisRec."Project No." = '') THEN BEGIN
            SubProjRec.SETCURRENTKEY("Main Project");
            SubProjRec.SETRANGE("Main Project", "Main Project No.");
            Rec.COPYFILTER("Cumulation Filter", SubProjRec."Cumulation Filter");
            IF SubProjRec.FINDSET THEN BEGIN
              REPEAT
                SubControlProjectCostObject.COPY(Rec);
                SubControlProjectCostObject.SETRANGE("Project Filter", SubProjRec."No.");
                SubControlProjectCostObject."Project No." := SubProjRec."No.";
                IF SubProjRec."No." = "Main Project No." THEN
                  PrognTotCost := PrognTotCost + CostContMgt.TotCostCostObj(
                    SubControlProjectCostObject, TRUE)
                ELSE
                  PrognTotCost := PrognTotCost + CostContMgt.PrognTotCostCostObj(
                    SubControlProjectCostObject, TRUE);
              UNTIL SubProjRec.NEXT = 0;
              EXIT(PrognTotCost);
            END;
          END;
        END;
      //

        IF ("Prognosis Total Cost" = 0) AND (PrognDateFilter = '') THEN BEGIN
          TotCostDec := TotCostCostObj(Rec, ExecCalcFields);
          EXIT(TotCostDec);
        END ELSE BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF PrognosisRec."Fix Prognosis Line" THEN
            EXIT("Prognosis Total Cost")
          ELSE BEGIN
            IF ExecCalcFields THEN BEGIN
              TotCostDec := TotCostCostObj(Rec, ExecCalcFields);
              CALCFIELDS(Prognosis);
            END;
            //>>4PS-001
            //EXIT(TotCostDec + Prognosis);
            EXIT("Prognosis Total Cost");
            //<<4PS-001
          END;
        END;
      END;
    END;

    PROCEDURE PrognTotCostElem@1210190076(VAR Rec@1210190000 : Record 11012048;ExecCalcFields@1210190002 : Boolean) : Decimal;
    VAR
      PrognosisRec@1210190004 : Record 11012034;
      SubProjRec@1210190007 : Record 11072003;
      SubControlProjectElem@1210190006 : Record 11012048;
      PrognTotCost@1210190005 : Decimal;
      FiltGroup@1210190003 : Integer;
      PrognDateFilter@1210190001 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Prognosis Total Cost");

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

      //call 33954
        GetProject("Project No.");
        IF (Project."Single/Main/Sub Project" = Project."Single/Main/Sub Project"::"Main Project") THEN BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF (PrognosisRec."Project No." = '') THEN BEGIN
            SubProjRec.SETCURRENTKEY("Main Project");
            SubProjRec.SETRANGE("Main Project", "Main Project No.");
            Rec.COPYFILTER("Cumulation Filter", SubProjRec."Cumulation Filter");
            IF SubProjRec.FINDSET THEN BEGIN
              REPEAT
                SubControlProjectElem.COPY(Rec);
                SubControlProjectElem.SETRANGE("Project Filter", SubProjRec."No.");
                SubControlProjectElem."Project No." := SubProjRec."No.";
                IF SubProjRec."No." = "Main Project No." THEN
                  PrognTotCost := PrognTotCost + CostContMgt.TotCostElem(
                   SubControlProjectElem, TRUE)
                ELSE
                  PrognTotCost := PrognTotCost + CostContMgt.PrognTotCostElem(
                    SubControlProjectElem, TRUE);
              UNTIL SubProjRec.NEXT = 0;
              EXIT(PrognTotCost);
            END;
          END;
        END;
      //

        IF ("Prognosis Total Cost" = 0) AND (PrognDateFilter = '') THEN BEGIN
          TotCostDec := TotCostElem(Rec, ExecCalcFields);
          EXIT(TotCostDec);
        END ELSE BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF PrognosisRec."Fix Prognosis Line" THEN
            EXIT("Prognosis Total Cost")
          ELSE BEGIN
            IF ExecCalcFields THEN BEGIN
              TotCostDec := TotCostElem(Rec, ExecCalcFields);
              CALCFIELDS(Prognosis);
            END;
            EXIT(TotCostDec + Prognosis);
          END;
        END;
      END;
    END;

    PROCEDURE PrognTotCostElemCostType@1210190063(VAR Rec@1210190000 : Record 11012049;ExecCalcFields@1210190002 : Boolean) : Decimal;
    VAR
      PrognosisRec@1210190004 : Record 11012034;
      SubProjRec@1210190007 : Record 11072003;
      SubControlProjElemCostType@1210190006 : Record 11012049;
      PrognTotCost@1210190005 : Decimal;
      FiltGroup@1210190003 : Integer;
      PrognDateFilter@1210190001 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Prognosis Total Cost");

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

      //call 33954
        GetProject("Project No.");
        IF (Project."Single/Main/Sub Project" = Project."Single/Main/Sub Project"::"Main Project") THEN BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF (PrognosisRec."Project No." = '') THEN BEGIN
            SubProjRec.SETCURRENTKEY("Main Project");
            SubProjRec.SETRANGE("Main Project", "Main Project No.");
            Rec.COPYFILTER("Cumulation Filter", SubProjRec."Cumulation Filter");
            IF SubProjRec.FINDSET THEN BEGIN
              REPEAT
                SubControlProjElemCostType.COPY(Rec);
                SubControlProjElemCostType.SETRANGE("Project Filter", SubProjRec."No.");
                SubControlProjElemCostType."Project No." := SubProjRec."No.";
                IF SubProjRec."No." = "Main Project No." THEN
                  PrognTotCost := PrognTotCost + CostContMgt.TotCostElemCostType(
                    SubControlProjElemCostType, TRUE)
                ELSE
                  PrognTotCost := PrognTotCost + CostContMgt.PrognTotCostElemCostType(
                    SubControlProjElemCostType, TRUE);
              UNTIL SubProjRec.NEXT = 0;
              EXIT(PrognTotCost);
            END;
          END;
        END;
      //

        IF ("Prognosis Total Cost" = 0) AND (PrognDateFilter = '') THEN BEGIN
          TotCostDec := TotCostElemCostType(Rec, ExecCalcFields);
          EXIT(TotCostDec);
        END ELSE BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF PrognosisRec."Fix Prognosis Line" THEN
            EXIT("Prognosis Total Cost")
          ELSE BEGIN
            IF ExecCalcFields THEN BEGIN
              TotCostDec := TotCostElemCostType(Rec, ExecCalcFields);
              CALCFIELDS(Prognosis);
            END;
            EXIT(TotCostDec + Prognosis);
          END;
        END;
      END;
    END;

    PROCEDURE PrognTotCostElemCostObj@1210190060(VAR Rec@1210190000 : Record 11012050;ExecCalcFields@1210190002 : Boolean) : Decimal;
    VAR
      PrognosisRec@1210190004 : Record 11012034;
      SubProjRec@1210190007 : Record 11072003;
      SubControlProjElemCostObject@1210190006 : Record 11012050;
      PrognTotCost@1210190005 : Decimal;
      FiltGroup@1210190003 : Integer;
      PrognDateFilter@1210190001 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Prognosis Total Cost");

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

      //call 33954
        GetProject("Project No.");
        IF (Project."Single/Main/Sub Project" = Project."Single/Main/Sub Project"::"Main Project") THEN BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF (PrognosisRec."Project No." = '') THEN BEGIN
            SubProjRec.SETCURRENTKEY("Main Project");
            SubProjRec.SETRANGE("Main Project", "Main Project No.");
            Rec.COPYFILTER("Cumulation Filter", SubProjRec."Cumulation Filter");
            IF SubProjRec.FINDSET THEN BEGIN
              REPEAT
                SubControlProjElemCostObject.COPY(Rec);
                SubControlProjElemCostObject.SETRANGE("Project Filter", SubProjRec."No.");
                SubControlProjElemCostObject."Project No." := SubProjRec."No.";
                IF SubProjRec."No." = "Main Project No." THEN
                  PrognTotCost := PrognTotCost + CostContMgt.TotCostElemCostObj(
                    SubControlProjElemCostObject, TRUE)
                ELSE
                  PrognTotCost := PrognTotCost + CostContMgt.PrognTotCostElemCostObj(
                    SubControlProjElemCostObject, TRUE);
              UNTIL SubProjRec.NEXT = 0;
              EXIT(PrognTotCost);
            END;
          END;
        END;
      //

        IF ("Prognosis Total Cost" = 0) AND (PrognDateFilter = '') THEN BEGIN
          TotCostDec := TotCostElemCostObj(Rec, ExecCalcFields);
          EXIT(TotCostDec);
        END ELSE BEGIN
          GetPrognosis(PrognosisRec, "Project No.", PrognDateFilter);
          IF PrognosisRec."Fix Prognosis Line" THEN
            EXIT("Prognosis Total Cost")
          ELSE BEGIN
            IF ExecCalcFields THEN BEGIN
              TotCostDec := TotCostElemCostObj(Rec, ExecCalcFields);
              CALCFIELDS(Prognosis);
            END;
            EXIT(TotCostDec + Prognosis);
          END;
        END;
      END;
    END;

    PROCEDURE PrognTotHoursProject@1100485036(VAR Rec@1210190000 : Record 11072003;ExecCalcFields@1210190002 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Hours Prognosis");
          TotHoursDec := TotHoursProject(Rec, ExecCalcFields);
        END;
        EXIT("Hours Prognosis" + TotHoursDec);
      END;
    END;

    PROCEDURE PrognTotHoursCostType@1100485023(VAR Rec@1210190000 : Record 11012046;ExecCalcFields@1210190002 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          IF ExecCalcFields THEN BEGIN
            CALCFIELDS("Hours Prognosis");
            TotHoursDec := TotHoursCostType(Rec, ExecCalcFields);
          END;
          EXIT("Hours Prognosis" + TotHoursDec);
        END;
      END;
    END;

    PROCEDURE PrognTotHoursCostObj@1100485035(VAR Rec@1210190000 : Record 11012047;ExecCalcFields@1210190002 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Hours Prognosis");
          TotHoursDec := TotHoursCostObj(Rec, ExecCalcFields);
        END;
        EXIT("Hours Prognosis" + TotHoursDec);
      END;
    END;

    PROCEDURE PrognTotHoursElem@1100485037(VAR Rec@1210190000 : Record 11012048;ExecCalcFields@1210190002 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Hours Prognosis");
          TotHoursDec := TotHoursElem(Rec, ExecCalcFields);
        END;
        EXIT("Hours Prognosis" + TotHoursDec);
      END;
    END;

    PROCEDURE PrognTotHoursElemCostType@1100485038(VAR Rec@1210190000 : Record 11012049;ExecCalcFields@1210190002 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          IF ExecCalcFields THEN BEGIN
            CALCFIELDS("Hours Prognosis");
            TotHoursDec := TotHoursElemCostType(Rec, ExecCalcFields);
          END;
          EXIT("Hours Prognosis" + TotHoursDec);
        END;
      END;
    END;

    PROCEDURE PrognTotHoursElemCostObj@1100485039(VAR Rec@1210190000 : Record 11012050;ExecCalcFields@1210190002 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Hours Prognosis");
          TotHoursDec := TotHoursElemCostObj(Rec, ExecCalcFields);
        END;
        EXIT("Hours Prognosis" + TotHoursDec);
      END;
    END;

    PROCEDURE PurchResultProject@1210190006(VAR Rec@1210190000 : Record 11072003;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingProject(Rec, ExecCalcFields) -
          ReceivedNotInvoicedProject(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchProject(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PurchResultCostType@1210190030(VAR Rec@1210190000 : Record 11012046;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingCostType(Rec, ExecCalcFields) -
          ReceivedNotInvoicedCostType(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchCostType(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PurchResultCostObj@1210190045(VAR Rec@1210190000 : Record 11012047;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingCostObj(Rec, ExecCalcFields) -
          ReceivedNotInvoicedCostObj(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchCostObj(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PurchResultElem@1210190077(VAR Rec@1210190000 : Record 11012048;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingElem(Rec, ExecCalcFields) -
          ReceivedNotInvoicedElem(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchElem(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PurchResultElemCostType@1210190064(VAR Rec@1210190000 : Record 11012049;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingElemCostType(Rec, ExecCalcFields) -
          ReceivedNotInvoicedElemCostTyp(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchElemCostType(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PurchResultElemCostObj@1210190038(VAR Rec@1210190000 : Record 11012050;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingElemCostObj(Rec, ExecCalcFields) -
          ReceivedNotInvoicedElemCostObj(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchElemCostObj(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PurchResultExt@1210190104(VAR Rec@1210190000 : Record 11012004;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingExt(Rec, ExecCalcFields) -
          ReceivedNotInvoicedExt(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchExt(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PurchResultExtCostType@1210190119(VAR Rec@1210190000 : Record 11020222;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingExtCostType(Rec, ExecCalcFields) -
          ReceivedNotInvoicedExtCostType(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchExtCostType(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PurchResultExtCostObj@1210190130(VAR Rec@1210190000 : Record 11020223;ExecCalcFields@1210190001 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Purchase Budget", "Risc Coverage", "Risc Coverage Withdraw", "Actual Costs");
        EXIT(
          "Purchase Budget" - OutstandingExtCostObj(Rec, ExecCalcFields) -
          ReceivedNotInvoicedExtCostObj(Rec, ExecCalcFields) -
          "Risc Coverage" + "Risc Coverage Withdraw" -
          "Actual Costs" - OpenOvhPurchExtCostObj(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE AllowedAndPurchProject@1210190008(VAR Rec@1210190010 : Record 11072003;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;CalcPurchase@1210190005 : Boolean;VAR lPurchaseDec@1210190004 : Decimal;VAR lEstimPurchResultDec@1210190003 : Decimal;VAR lPurchCostDec@1210190002 : Decimal;VAR lActualPurchResultDec@1210190001 : Decimal;VAR lTotPurchResultDec@1210190000 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN
        IF CheckBudgetOrAllowedPresent(Rec) THEN //C010480
          Rec.CalcAllowedPrevAllowAndPurch(
            lAllowedDec, lAllowedHoursDec, lPrevAllowedDec, lPrevAllowedHoursDec, CalcPurchase,
            lPurchaseDec, lEstimPurchResultDec, lPurchCostDec, lActualPurchResultDec, lTotPurchResultDec)
        //C014148.sn
        ELSE BEGIN
          lAllowedDec := 0;
          lAllowedHoursDec := 0;
          lPrevAllowedDec := 0;
          lPrevAllowedHoursDec := 0;
          lPurchaseDec := 0;
          lEstimPurchResultDec := 0;
          lPurchCostDec := 0;
          lActualPurchResultDec := 0;
          lTotPurchResultDec := 0;
        END;
        //C014148.en
      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
      PurchaseDec := lPurchaseDec;
      EstimPurchResultDec := lEstimPurchResultDec;
      PurchCostDec := lPurchCostDec;
      ActualPurchResultDec := lActualPurchResultDec;
      TotPurchResultDec := TotPurchResultDec;
    END;

    PROCEDURE AllowedAndPurchCostType@1210190027(VAR Rec@1210190010 : Record 11012046;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;VAR lPurchaseDec@1210190004 : Decimal;VAR lEstimPurchResultDec@1210190003 : Decimal;VAR lPurchCostDec@1210190002 : Decimal;VAR lActualPurchResultDec@1210190001 : Decimal;VAR lTotPurchResultDec@1210190000 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN
        Rec.CalculateAllowedAndPurchase(
          lAllowedDec, lAllowedHoursDec, lPrevAllowedDec, lPrevAllowedHoursDec,
          lPurchaseDec, lEstimPurchResultDec, lPurchCostDec, lActualPurchResultDec, lTotPurchResultDec);

      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
      PurchaseDec := lPurchaseDec;
      EstimPurchResultDec := lEstimPurchResultDec;
      PurchCostDec := lPurchCostDec;
      ActualPurchResultDec := lActualPurchResultDec;
      TotPurchResultDec := TotPurchResultDec;
    END;

    PROCEDURE AllowedAndPurchCostObj@1210190035(VAR Rec@1210190010 : Record 11012047;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;VAR lPurchaseDec@1210190004 : Decimal;VAR lEstimPurchResultDec@1210190003 : Decimal;VAR lPurchCostDec@1210190002 : Decimal;VAR lActualPurchResultDec@1210190001 : Decimal;VAR lTotPurchResultDec@1210190000 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN BEGIN
        Rec.CalculateAllowedAndPrevious(lAllowedDec,lAllowedHoursDec,lPrevAllowedDec,lPrevAllowedHoursDec);
        Rec.CalculatePurchaseResults(
          lAllowedDec,lPurchaseDec,lEstimPurchResultDec,lPurchCostDec,lActualPurchResultDec,lTotPurchResultDec);
      END;

      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
      PurchaseDec := lPurchaseDec;
      EstimPurchResultDec := lEstimPurchResultDec;
      PurchCostDec := lPurchCostDec;
      ActualPurchResultDec := lActualPurchResultDec;
      TotPurchResultDec := TotPurchResultDec;
    END;

    PROCEDURE AllowedAndPurchElem@1210190078(VAR Rec@1210190010 : Record 11012048;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN
        Rec.CalculateAllowed(lAllowedDec,lAllowedHoursDec,lPrevAllowedDec,lPrevAllowedHoursDec,3,Rec.Element);

      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
    END;

    PROCEDURE AllowedAndPurchElemCostType@1210190065(VAR Rec@1210190010 : Record 11012049;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN
        Rec.CalculateAllowed(lAllowedDec,lAllowedHoursDec,lPrevAllowedDec,lPrevAllowedHoursDec);

      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
    END;

    PROCEDURE AllowedAndPurchElemCostObj@1210190052(VAR Rec@1210190010 : Record 11012050;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;VAR lPurchaseDec@1100485004 : Decimal;VAR lEstimPurchResultDec@1100485003 : Decimal;VAR lPurchCostDec@1100485002 : Decimal;VAR lActualPurchResultDec@1100485001 : Decimal;VAR lTotPurchResultDec@1100485000 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN BEGIN
        Rec.CalculateAllowedAndPrevious(lAllowedDec,lAllowedHoursDec,lPrevAllowedDec,lPrevAllowedHoursDec);
        //**4PS01.sn
        Rec.CalculatePurchaseResults(
          lAllowedDec,lPurchaseDec,lEstimPurchResultDec,lPurchCostDec,lActualPurchResultDec,lTotPurchResultDec);
        //**4PS01.en
      END;

      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
      //**4PS01.sn
      PurchaseDec := lPurchaseDec;
      EstimPurchResultDec := lEstimPurchResultDec;
      PurchCostDec := lPurchCostDec;
      ActualPurchResultDec := lActualPurchResultDec;
      TotPurchResultDec := TotPurchResultDec;
      //**4PS01.en
    END;

    PROCEDURE AllowedAndPurchExt@1210190106(VAR Rec@1210190010 : Record 11012004;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN
        Rec.CalculateAllowed(lAllowedDec,lAllowedHoursDec,lPrevAllowedDec,lPrevAllowedHoursDec);

      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
    END;

    PROCEDURE AllowedAndPurchExtCostType@1210190120(VAR Rec@1210190010 : Record 11020222;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN
        Rec.CalculateAllowed(lAllowedDec,lAllowedHoursDec,lPrevAllowedDec,lPrevAllowedHoursDec);

      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
    END;

    PROCEDURE AllowedAndPurchExtCostObj@1210190127(VAR Rec@1210190010 : Record 11020223;VAR lAllowedDec@1210190009 : Decimal;VAR lAllowedHoursDec@1210190008 : Decimal;VAR lPrevAllowedDec@1210190007 : Decimal;VAR lPrevAllowedHoursDec@1210190006 : Decimal;ExecCalcFields@1210190011 : Boolean);
    BEGIN
      IF ExecCalcFields THEN
        Rec.CalculateAllowed(lAllowedDec,lAllowedHoursDec,lPrevAllowedDec,lPrevAllowedHoursDec);

      AllowedDec := lAllowedDec;
      AllowedHoursDec := lAllowedHoursDec;
      PrevAllowedDec := lPrevAllowedDec;
      PrevAllowedHoursDec := lPrevAllowedHoursDec;
    END;

    LOCAL PROCEDURE CalcAllowedProject@1210190009(VAR Rec@1210190000 : Record 11072003);
    BEGIN
      AllowedAndPurchProject(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec, FALSE,
        PurchaseDec, EstimPurchResultDec, PurchCostDec, ActualPurchResultDec, TotPurchResultDec,
        TRUE);
    END;

    LOCAL PROCEDURE CalcAllowedCostType@1210190032(VAR Rec@1210190000 : Record 11012046);
    BEGIN
      AllowedAndPurchCostType(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
        PurchaseDec, EstimPurchResultDec, PurchCostDec, ActualPurchResultDec, TotPurchResultDec,
        TRUE);
    END;

    LOCAL PROCEDURE CalcAllowedCostObj@1210190046(VAR Rec@1210190000 : Record 11012047);
    BEGIN
      AllowedAndPurchCostObj(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
        PurchaseDec, EstimPurchResultDec, PurchCostDec, ActualPurchResultDec, TotPurchResultDec,
        TRUE);
    END;

    LOCAL PROCEDURE CalcAllowedElem@1210190079(VAR Rec@1210190000 : Record 11012048);
    BEGIN
      AllowedAndPurchElem(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
        TRUE);
    END;

    LOCAL PROCEDURE CalcAllowedElemCostType@1210190066(VAR Rec@1210190000 : Record 11012049);
    BEGIN
      AllowedAndPurchElemCostType(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
        TRUE);
    END;

    LOCAL PROCEDURE CalcAllowedElemCostObj@1210190053(VAR Rec@1210190000 : Record 11012050);
    BEGIN
      AllowedAndPurchElemCostObj(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
        PurchaseDec, EstimPurchResultDec, PurchCostDec, ActualPurchResultDec, TotPurchResultDec,     //**4PS01.n
        TRUE);
    END;

    LOCAL PROCEDURE CalcAllowedExt@1210190110(VAR Rec@1210190000 : Record 11012004);
    BEGIN
      AllowedAndPurchExt(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
        TRUE);
    END;

    LOCAL PROCEDURE CalcAllowedExtCostType@1210190121(VAR Rec@1210190000 : Record 11020222);
    BEGIN
      AllowedAndPurchExtCostType(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
        TRUE);
    END;

    LOCAL PROCEDURE CalcAllowedExtCostObj@1210190128(VAR Rec@1210190000 : Record 11020223);
    BEGIN
      AllowedAndPurchExtCostObj(
        Rec,
        AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
        TRUE);
    END;

    PROCEDURE AllowedPercProject@1210190005(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        IF Budget = 0 THEN
          AllowedPerc := 100
        ELSE BEGIN
          IF ExecCalcFields THEN
            CalcAllowedProject(Rec);
          AllowedPerc := AllowedDec / Budget * 100;
        END;
        EXIT(AllowedPerc);
      END;
    END;

    PROCEDURE AllowedPercCostType@1100485029(VAR Rec@1100485000 : Record 11012046;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        IF Budget = 0 THEN
          AllowedPerc := 100
        ELSE BEGIN
          IF ExecCalcFields THEN
            CalcAllowedCostType(Rec);
          AllowedPerc := AllowedDec / Budget * 100;
        END;
        EXIT(AllowedPerc);
      END;
    END;

    PROCEDURE AllowedPercCostObj@1100485028(VAR Rec@1100485000 : Record 11012047;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        IF Budget = 0 THEN
          AllowedPerc := 100
        ELSE BEGIN
          IF ExecCalcFields THEN
            CalcAllowedCostObj(Rec);
          AllowedPerc := AllowedDec / Budget * 100;
        END;
        EXIT(AllowedPerc);
      END;
    END;

    PROCEDURE AllowedPercElem@1100485027(VAR Rec@1100485000 : Record 11012048;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        IF Budget = 0 THEN
          AllowedPerc := 100
        ELSE BEGIN
          IF ExecCalcFields THEN
            CalcAllowedElem(Rec);
          AllowedPerc := AllowedDec / Budget * 100;
        END;
        EXIT(AllowedPerc);
      END;
    END;

    PROCEDURE AllowedPercServContr@1100485054(VAR Rec@1210190001 : Record 11012812;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        TotAllowedDec := TotAllowedServContr(Rec,ExecCalcFields);
        TotBudgetDec := TotBudgetServContr(Rec,ExecCalcFields);
        IF TotBudgetDec = 0 THEN
          AllowedPerc := 100
        ELSE
          AllowedPerc := TotAllowedDec / TotBudgetDec * 100;
        EXIT(AllowedPerc);
      END;
    END;

    PROCEDURE AllowedPercServOrder@1100485057(VAR Rec@1210190001 : Record 11012823;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        TotAllowedDec := TotAllowedServOrder(Rec,ExecCalcFields);
        TotBudgetDec := TotBudgetServOrder(Rec,ExecCalcFields);
        IF TotBudgetDec = 0 THEN
          AllowedPerc := 100
        ELSE
          AllowedPerc := TotAllowedDec / TotBudgetDec * 100;
        EXIT(AllowedPerc);
      END;
    END;

    PROCEDURE ResultProject@1210190018(VAR Rec@1210190004 : Record 11072003;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostProject(Rec, ExecCalcFields);
        CalcAllowedProject(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultCostType@1210190031(VAR Rec@1210190004 : Record 11012046;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostCostType(Rec, ExecCalcFields);
        CalcAllowedCostType(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultCostObj@1210190057(VAR Rec@1210190004 : Record 11012047;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostCostObj(Rec, ExecCalcFields);
        CalcAllowedCostObj(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultElem@1210190080(VAR Rec@1210190004 : Record 11012048;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostElem(Rec, ExecCalcFields);
        CalcAllowedElem(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultElemCostType@1210190067(VAR Rec@1210190004 : Record 11012049;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostElemCostType(Rec, ExecCalcFields);
        CalcAllowedElemCostType(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultElemCostObj@1210190058(VAR Rec@1210190004 : Record 11012050;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostElemCostObj(Rec, ExecCalcFields);
        CalcAllowedElemCostObj(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultExt@1210190109(VAR Rec@1210190004 : Record 11012004;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostExt(Rec, ExecCalcFields);
        CalcAllowedExt(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultExtCostType@1210190122(VAR Rec@1210190004 : Record 11020222;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostExtCostType(Rec, ExecCalcFields);
        CalcAllowedExtCostType(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultExtCostObj@1210190129(VAR Rec@1210190004 : Record 11020223;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotCostDec := TotCostExtCostObj(Rec, ExecCalcFields);
        CalcAllowedExtCostObj(Rec);
      END;
      EXIT(AllowedDec - TotCostDec);
    END;

    PROCEDURE ResultServContr@1210190088(VAR Rec@1210190004 : Record 11012812;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      TotCostDec := TotCostServContr(Rec, ExecCalcFields);
      TotAllowedDec := TotAllowedServContr(Rec, ExecCalcFields);
      EXIT(TotAllowedDec - TotCostDec);
    END;

    PROCEDURE ResultServOrder@1210190095(VAR Rec@1210190004 : Record 11012823;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      TotCostDec := TotCostServOrder(Rec, ExecCalcFields);
      TotAllowedDec := TotAllowedServOrder(Rec, ExecCalcFields);
      EXIT(TotAllowedDec - TotCostDec);
    END;

    PROCEDURE ResultHoursProject@1100485041(VAR Rec@1210190004 : Record 11072003;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotHoursDec := TotHoursProject(Rec, ExecCalcFields);
        CalcAllowedProject(Rec);
      END;
      EXIT(AllowedHoursDec - TotHoursDec);
    END;

    PROCEDURE ResultHoursCostType@1100485040(VAR Rec@1210190004 : Record 11012046;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotHoursDec := TotHoursCostType(Rec, ExecCalcFields);
        CalcAllowedCostType(Rec);
      END;
      EXIT(AllowedHoursDec - TotHoursDec);
    END;

    PROCEDURE ResultHoursCostObj@1100485012(VAR Rec@1210190004 : Record 11012047;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotHoursDec := TotHoursCostObj(Rec, ExecCalcFields);
        CalcAllowedCostObj(Rec);
      END;
      EXIT(AllowedHoursDec - TotHoursDec);
    END;

    PROCEDURE ResultHoursElem@1100485042(VAR Rec@1210190004 : Record 11012048;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotHoursDec := TotHoursElem(Rec, ExecCalcFields);
        CalcAllowedElem(Rec);
      END;
      EXIT(AllowedHoursDec - TotHoursDec);
    END;

    PROCEDURE ResultHoursElemCostType@1100485043(VAR Rec@1210190004 : Record 11012049;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotHoursDec := TotHoursElemCostType(Rec, ExecCalcFields);
        CalcAllowedElemCostType(Rec);
      END;
      EXIT(AllowedHoursDec - TotHoursDec);
    END;

    PROCEDURE ResultHoursElemCostObj@1100485044(VAR Rec@1210190004 : Record 11012050;ExecCalcFields@1210190003 : Boolean) : Decimal;
    BEGIN
      IF ExecCalcFields THEN BEGIN
        TotHoursDec := TotHoursElemCostObj(Rec, ExecCalcFields);
        CalcAllowedElemCostObj(Rec);
      END;
      EXIT(AllowedHoursDec - TotHoursDec);
    END;

    PROCEDURE ResultPercProject@1210190013(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        IF Budget = 0 THEN
          EXIT(100)
        ELSE
          EXIT( ResultProject(Rec,ExecCalcFields) / Budget * 100);
      END;
    END;

    PROCEDURE CalculatedEndResultProject@1210190010(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          AllowedPerc := AllowedPercProject(Rec,ExecCalcFields);
        IF AllowedPerc = 0 THEN
          CalculatedEndResultDec := ResultProject(Rec,ExecCalcFields)
        ELSE
          CalculatedEndResultDec := ResultProject(Rec,ExecCalcFields) / AllowedPerc * 100;
        EXIT(CalculatedEndResultDec);
      END;
    END;

    PROCEDURE CalcEndResVersusBudgetProject@1210190012(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        IF Budget = 0 THEN
          EXIT(100)
        ELSE
          EXIT( CalculatedEndResultProject(Rec,ExecCalcFields) / Budget * 100);
      END;
    END;

    PROCEDURE BudgetResultProject@1210190004(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        EXIT(TotContrAmntProject(Rec, ExecCalcFields) - Budget );
      END;
    END;

    PROCEDURE BudgetResultPercProject@1210190015(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        TotContrAmnt := TotContrAmntProject(Rec, ExecCalcFields);
        IF (TotContrAmnt = 0) THEN
          EXIT(100)
        ELSE
          EXIT(BudgetResultProject(Rec, ExecCalcFields) / TotContrAmnt * 100);
      END;
    END;

    PROCEDURE BudgetResultServContr@1100485030(VAR Rec@1210190001 : Record 11012812;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        EXIT(
          TotContrAmntServContr(Rec, ExecCalcFields) -
          TotBudgetServContr(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE BudgetResultPercServContr@1100485031(VAR Rec@1210190001 : Record 11012812;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        TotContrAmnt := TotContrAmntServContr(Rec, ExecCalcFields);
        IF (TotContrAmnt = 0) THEN
          EXIT(100)
        ELSE
          EXIT(BudgetResultServContr(Rec, ExecCalcFields) / TotContrAmnt * 100);
      END;
    END;

    PROCEDURE PrognResultProject@1210190002(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Actual Costs", Prognosis);
          CalcAllowedProject(Rec);
        END;
        EXIT(AllowedDec - "Actual Costs" - Prognosis);
      END;
    END;

    PROCEDURE PrognResultCostType@1210190033(VAR Rec@1210190001 : Record 11012046;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Actual Costs", Prognosis);
          CalcAllowedCostType(Rec);
        END;
        EXIT(AllowedDec - "Actual Costs" - Prognosis);
      END;
    END;

    PROCEDURE PrognResultCostObj@1210190039(VAR Rec@1210190001 : Record 11012047;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Actual Costs", Prognosis);
          CalcAllowedCostObj(Rec);
        END;
        EXIT(AllowedDec - "Actual Costs" - Prognosis);
      END;
    END;

    PROCEDURE PrognResultElem@1210190081(VAR Rec@1210190001 : Record 11012048;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Actual Costs", Prognosis);
          CalcAllowedElem(Rec);
        END;
        EXIT(AllowedDec - "Actual Costs" - Prognosis);
      END;
    END;

    PROCEDURE PrognResultElemCostType@1210190068(VAR Rec@1210190001 : Record 11012049;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Actual Costs", Prognosis);
          CalcAllowedElemCostType(Rec);
        END;
        EXIT(AllowedDec - "Actual Costs" - Prognosis);
      END;
    END;

    PROCEDURE PrognResultElemCostObj@1210190055(VAR Rec@1210190001 : Record 11012050;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN BEGIN
          CALCFIELDS("Actual Costs", Prognosis);
          CalcAllowedElemCostObj(Rec);
        END;
        EXIT(AllowedDec - "Actual Costs" - Prognosis);
      END;
    END;

    PROCEDURE PrognEndResVrsContrAmtProject@1210190019(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        EXIT(
          TotContrAmntProject(Rec, ExecCalcFields) -
          PrognTotCostProject(Rec, ExecCalcFields));
      END;
    END;

    PROCEDURE PrognEndResVrsContrAmtProjPerc@1210190016(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        TotContrAmnt := TotContrAmntProject(Rec, ExecCalcFields);
        IF (TotContrAmnt = 0) THEN
          EXIT(100)
        ELSE
          EXIT(PrognEndResVrsContrAmtProject(Rec,ExecCalcFields) / TotContrAmnt * 100);
      END;
    END;

    PROCEDURE PrognEndResultProject@1210190017(VAR Rec@1210190003 : Record 11072003;ExecCalcFields@1210190002 : Boolean) lPrognEndResultDec : Decimal;
    VAR
      ProjectSetup@1100525000 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        lPrognEndResultDec := Budget - PrognTotCostProject(Rec, ExecCalcFields);

        IF GETFILTER("Prognosis Filter") <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "No.");
          PrognosisRec.SETFILTER("Prognosis Date", GETFILTER("Prognosis Filter"));
          IF PrognosisRec.FINDFIRST THEN BEGIN
            IF PrognosisRec."Prognosis Level" = PrognosisRec."Prognosis Level"::Rough THEN BEGIN
              lPrognEndResultDec := PrognosisRec."Rough Prognosis End Result";
            END ELSE BEGIN
              ProjectSetup.GET;
              IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
                PrognosisLineRec.SETRANGE("Project No.", "No.");
                PrognosisLineRec.SETFILTER("Prognosis Date", GETFILTER("Prognosis Filter"));
                PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
                IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                  lPrognEndResultDec := 0;
                  REPEAT
                    lPrognEndResultDec := lPrognEndResultDec + PrognosisLineRec."Prognosis End Result";
                  UNTIL PrognosisLineRec.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultCostType@1210190022(VAR Rec@1210190003 : Record 11012046;ExecCalcFields@1210190002 : Boolean) lPrognEndResultDec : Decimal;
    VAR
      ProjectSetup@1210190004 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525000 : Integer;
      PrognDateFilter@1100525001 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        lPrognEndResultDec := Budget - PrognTotCostCostType(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "Project No.");
              PrognosisLineRec.SETRANGE("Cost Type", "Cost Type");
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultDec := 0;
                REPEAT
                  lPrognEndResultDec := lPrognEndResultDec + PrognosisLineRec."Prognosis End Result";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultCostObj@1210190040(VAR Rec@1210190003 : Record 11012047;ExecCalcFields@1210190002 : Boolean) lPrognEndResultDec : Decimal;
    VAR
      ProjectSetup@1210190004 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        lPrognEndResultDec := Budget - PrognTotCostCostObj(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "Project No.");
              PrognosisLineRec.SETRANGE("Cost Object", "Cost Object");
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultDec := 0;
                REPEAT
                  lPrognEndResultDec := lPrognEndResultDec + PrognosisLineRec."Prognosis End Result";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultElem@1210190082(VAR Rec@1210190003 : Record 11012048;ExecCalcFields@1210190002 : Boolean) lPrognEndResultDec : Decimal;
    VAR
      ProjectSetup@1210190004 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        lPrognEndResultDec := Budget - PrognTotCostElem(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "Project No.");
              PrognosisLineRec.SETRANGE(Element, Element);
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultDec := 0;
                REPEAT
                  lPrognEndResultDec := lPrognEndResultDec + PrognosisLineRec."Prognosis End Result";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultElemCostType@1210190069(VAR Rec@1210190003 : Record 11012049;ExecCalcFields@1210190002 : Boolean) lPrognEndResultDec : Decimal;
    VAR
      ProjectSetup@1210190004 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        lPrognEndResultDec := Budget - PrognTotCostElemCostType(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "Project No.");
              PrognosisLineRec.SETRANGE(Element, Element);
              PrognosisLineRec.SETRANGE("Cost Type", "Cost Type");
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultDec := 0;
                REPEAT
                  lPrognEndResultDec := lPrognEndResultDec + PrognosisLineRec."Prognosis End Result";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultElemCostObj@1210190056(VAR Rec@1210190003 : Record 11012050;ExecCalcFields@1210190002 : Boolean) lPrognEndResultDec : Decimal;
    VAR
      ProjectSetup@1210190004 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        lPrognEndResultDec := Budget - PrognTotCostElemCostObj(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "Project No.");
              PrognosisLineRec.SETRANGE(Element, Element);
              PrognosisLineRec.SETRANGE("Cost Object", "Cost Object");
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultDec := 0;
                REPEAT
                  lPrognEndResultDec := lPrognEndResultDec + PrognosisLineRec."Prognosis End Result";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResVersusBudgetProject@1210190020(VAR Rec@1210190001 : Record 11072003;ExecCalcFields@1210190000 : Boolean) : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS(Budget);
        IF Budget = 0 THEN
          EXIT(100)
        ELSE
          EXIT(PrognEndResultProject(Rec, ExecCalcFields) / Budget * 100);
      END;
    END;

    PROCEDURE PrognEndResultHoursProject@1100485049(VAR Rec@1210190003 : Record 11072003;ExecCalcFields@1210190002 : Boolean) lPrognEndResultHoursDec : Decimal;
    VAR
      ProjectSetup@1100485000 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Budget Hours (Entire Project)");
        lPrognEndResultHoursDec := "Budget Hours (Entire Project)" - PrognTotHoursProject(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "No.");
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultHoursDec := 0;
                REPEAT
                  lPrognEndResultHoursDec := lPrognEndResultHoursDec + PrognosisLineRec."Prognosis End Result Hours";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultHoursCostType@1100485048(VAR Rec@1210190003 : Record 11012046;ExecCalcFields@1210190002 : Boolean) lPrognEndResultHoursDec : Decimal;
    VAR
      ProjectSetup@1100485000 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          IF ExecCalcFields THEN
            CALCFIELDS("Budget Hours");
          lPrognEndResultHoursDec := "Budget Hours" - PrognTotHoursCostType(Rec, ExecCalcFields);

          FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
            FILTERGROUP(FiltGroup);
            IF PrognDateFilter = '' THEN
              IF (GETFILTER("Prognosis Filter") <> '') THEN
                PrognDateFilter := GETFILTER("Prognosis Filter");
          END;

          IF PrognDateFilter <> '' THEN BEGIN
            PrognosisRec.SETRANGE("Project No.", "Project No.");
            PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
            IF PrognosisRec.FINDFIRST THEN BEGIN
              ProjectSetup.GET;
              IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
                PrognosisLineRec.SETRANGE("Project No.", "Project No.");
                PrognosisLineRec.SETRANGE("Cost Type", "Cost Type");
                PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
                PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
                IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                  lPrognEndResultHoursDec := 0;
                  REPEAT
                    lPrognEndResultHoursDec := lPrognEndResultHoursDec + PrognosisLineRec."Prognosis End Result Hours";
                  UNTIL PrognosisLineRec.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultHoursCostObj@1100485011(VAR Rec@1210190003 : Record 11012047;ExecCalcFields@1210190002 : Boolean) lPrognEndResultHoursDec : Decimal;
    VAR
      ProjectSetup@1100485000 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Budget Hours");
        lPrognEndResultHoursDec := "Budget Hours" - PrognTotHoursCostObj(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "Project No.");
              PrognosisLineRec.SETRANGE("Cost Object", "Cost Object");
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultHoursDec := 0;
                REPEAT
                  lPrognEndResultHoursDec := lPrognEndResultHoursDec + PrognosisLineRec."Prognosis End Result Hours";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultHoursElem@1100485052(VAR Rec@1210190003 : Record 11012048;ExecCalcFields@1210190002 : Boolean) lPrognEndResultHoursDec : Decimal;
    VAR
      ProjectSetup@1100485000 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Budget Hours");
        lPrognEndResultHoursDec := "Budget Hours" - PrognTotHoursElem(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "Project No.");
              PrognosisLineRec.SETRANGE(Element, Element);
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultHoursDec := 0;
                REPEAT
                  lPrognEndResultHoursDec := lPrognEndResultHoursDec + PrognosisLineRec."Prognosis End Result Hours";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultHoursElemCostTyp@1100485051(VAR Rec@1210190003 : Record 11012049;ExecCalcFields@1210190002 : Boolean) lPrognEndResultHoursDec : Decimal;
    VAR
      ProjectSetup@1100485000 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          IF ExecCalcFields THEN
            CALCFIELDS("Budget Hours");
          lPrognEndResultHoursDec := "Budget Hours" - PrognTotHoursElemCostType(Rec, ExecCalcFields);

          FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
            FILTERGROUP(FiltGroup);
            IF PrognDateFilter = '' THEN
              IF (GETFILTER("Prognosis Filter") <> '') THEN
                PrognDateFilter := GETFILTER("Prognosis Filter");
          END;

          IF PrognDateFilter <> '' THEN BEGIN
            PrognosisRec.SETRANGE("Project No.", "Project No.");
            PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
            IF PrognosisRec.FINDFIRST THEN BEGIN
              ProjectSetup.GET;
              IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
                PrognosisLineRec.SETRANGE("Project No.", "Project No.");
                PrognosisLineRec.SETRANGE(Element, Element);
                PrognosisLineRec.SETRANGE("Cost Type", "Cost Type");
                PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
                PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
                IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                  lPrognEndResultHoursDec := 0;
                  REPEAT
                    lPrognEndResultHoursDec := lPrognEndResultHoursDec + PrognosisLineRec."Prognosis End Result Hours";
                  UNTIL PrognosisLineRec.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognEndResultHoursElemCostObj@1100485050(VAR Rec@1210190003 : Record 11012050;ExecCalcFields@1210190002 : Boolean) lPrognEndResultHoursDec : Decimal;
    VAR
      ProjectSetup@1100485000 : Record 315;
      PrognosisRec@1210190001 : Record 11012034;
      PrognosisLineRec@1210190000 : Record 11012035;
      FiltGroup@1100525001 : Integer;
      PrognDateFilter@1100525000 : Text[250];
    BEGIN
      WITH Rec DO BEGIN
        IF ExecCalcFields THEN
          CALCFIELDS("Budget Hours");
        lPrognEndResultHoursDec := "Budget Hours" - PrognTotHoursElemCostObj(Rec, ExecCalcFields);

        FOR FiltGroup := 4 DOWNTO 0 DO BEGIN
          FILTERGROUP(FiltGroup);
          IF PrognDateFilter = '' THEN
            IF (GETFILTER("Prognosis Filter") <> '') THEN
              PrognDateFilter := GETFILTER("Prognosis Filter");
        END;

        IF PrognDateFilter <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", PrognDateFilter);
          IF PrognosisRec.FINDFIRST THEN BEGIN
            ProjectSetup.GET;
            IF (ProjectSetup."Fix Prognosis Line") OR (PrognosisRec."Fix Prognosis Line") THEN BEGIN  //db, 13-01-11
              PrognosisLineRec.SETRANGE("Project No.", "Project No.");
              PrognosisLineRec.SETRANGE(Element, Element);
              PrognosisLineRec.SETRANGE("Cost Object", "Cost Object");
              PrognosisLineRec.SETFILTER("Prognosis Date", PrognDateFilter);
              PrognosisLineRec.SETRANGE("Fix Prognosis Line",TRUE);
              IF PrognosisLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
                lPrognEndResultHoursDec := 0;
                REPEAT
                  lPrognEndResultHoursDec := lPrognEndResultHoursDec + PrognosisLineRec."Prognosis End Result Hours";
                UNTIL PrognosisLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE PrognTotFinResultProject@1100525009(VAR Rec@1100525001 : Record 11072003;ExecCalcFields@1100525000 : Boolean;VAR PrognTotCost@1100525005 : Decimal;VAR PrognRevenues@1100525003 : Decimal;VAR PrognTotRevenue@1100525004 : Decimal;VAR PrognFinResult@1100525006 : Decimal;VAR ExpFinishDate@1100525007 : Date;VAR PrognLevel@1100525008 : 'Detailed,,Rough');
    VAR
      PrognosisRec@1100525002 : Record 11012034;
      PrognosisSubProj@1100525010 : Record 11012034;
      SubProject@1100525011 : Record 11072003;
      CostContMgt@1100525013 : Codeunit 11012006;
      PrognosisPresent@1100525009 : Boolean;
    BEGIN
      PrognTotCost := 0;
      PrognRevenues := 0;
      PrognTotRevenue := 0;
      PrognFinResult := 0;
      ExpFinishDate := 0D;
      PrognLevel := Rec."Prognosis Level";

      WITH Rec DO BEGIN
        IF GETFILTER("Prognosis Filter") <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "No.");
          PrognosisRec.SETFILTER("Prognosis Date", GETFILTER("Prognosis Filter"));
          IF PrognosisRec.FINDFIRST THEN BEGIN
            PrognosisPresent := TRUE;
            IF PrognosisRec."Prognosis Level" = PrognosisRec."Prognosis Level"::Rough THEN BEGIN
              PrognTotCost := PrognosisRec."Rough Prognosis Total Cost";
              PrognTotRevenue := PrognosisRec."Rough Prognosis Total Revenues";
            END ELSE BEGIN
              PrognosisRec.CALCFIELDS("Prognosis Revenue");
              IF ExecCalcFields THEN
                CALCFIELDS("Prognosis Total Cost");
              PrognTotCost := "Prognosis Total Cost";
              PrognRevenues := PrognosisRec."Prognosis Revenue";
              PrognTotRevenue := PrognosisRec."Project Invoiced" + PrognosisRec."Prognosis Revenue";
            END;
            ExpFinishDate := PrognosisRec."Expected Finishing Date";
            PrognLevel := PrognosisRec."Prognosis Level";
          END;
        END;

        IF ("Single/Main/Sub Project" = "Single/Main/Sub Project"::"Main Project") AND NOT PrognosisPresent THEN BEGIN
          //This part speeds up situations in which no prognoses are made
          PrognosisSubProj.SETCURRENTKEY("Main Project No.","Prognosis Date");
          PrognosisSubProj.SETRANGE("Main Project No.", "No.");
          PrognosisSubProj.SETFILTER("Prognosis Date",GETFILTER("Cumulation Filter"));
          IF NOT PrognosisSubProj.ISEMPTY THEN BEGIN
          //
            PrognosisPresent := TRUE;
            SubProject.SETCURRENTKEY("Main Project");
            SubProject.SETRANGE("Main Project", "Main Project");
            Rec.COPYFILTER("Cumulation Filter", SubProject."Cumulation Filter");
            IF SubProject.FINDSET THEN
              REPEAT
                SubProject.SETRANGE("Project Filter", SubProject."No.");
                PrognosisSubProj.RESET;
                PrognosisSubProj.SETRANGE("Project No.", SubProject."No.");
                PrognosisSubProj.SETFILTER("Prognosis Date", GETFILTER("Cumulation Filter"));
                IF PrognosisSubProj.FINDLAST THEN BEGIN
                  IF PrognosisSubProj."Prognosis Level" = "Prognosis Level"::Rough THEN BEGIN
                    PrognTotCost := PrognTotCost + PrognosisSubProj."Rough Prognosis Total Cost";
                    PrognTotRevenue := PrognTotRevenue + PrognosisSubProj."Rough Prognosis Total Revenues";
                  END ELSE BEGIN
                    PrognosisSubProj.CALCFIELDS("Prognosis Revenue", "Prognosis Total Cost");
                    PrognTotCost := PrognTotCost + PrognosisSubProj."Prognosis Total Cost";
                    PrognRevenues := PrognRevenues + PrognosisSubProj."Prognosis Revenue";
                    PrognTotRevenue := PrognTotRevenue + PrognosisSubProj."Project Invoiced" + PrognosisSubProj."Prognosis Revenue";
                  END;
                  IF PrognosisRec."Expected Finishing Date" > ExpFinishDate THEN
                    ExpFinishDate := PrognosisRec."Expected Finishing Date";
                END ELSE
                  PrognTotCost := PrognTotCost + CostContMgt.TotCostProject(SubProject, TRUE);
              UNTIL SubProject.NEXT = 0;
          END;
        END;

        IF NOT PrognosisPresent THEN BEGIN
          IF ExecCalcFields THEN
            TotCostDec := TotCostProject(Rec, ExecCalcFields);
          PrognTotCost := TotCostDec;
        END;
        PrognFinResult := PrognTotRevenue - PrognTotCost;

      END;
    END;

    PROCEDURE InventoryProject@1210190014(VAR Rec@1210190002 : Record 11072003;ExecCalcFields@1210190001 : Boolean) lProjInventAmt : Decimal;
    VAR
      ProjInventRec@1210190000 : Record 11012670;
    BEGIN
      WITH Rec DO BEGIN
        lProjInventAmt := 0;
        ProjInventRec.RESET;
        ProjInventRec.SETCURRENTKEY("Project No.");
        ProjInventRec.SETRANGE("Project No.", "No.");
        ProjInventRec.SETFILTER("Posting Date", GETFILTER("Cumulation Filter"));
        IF ProjInventRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lProjInventAmt := lProjInventAmt + (ProjInventRec.Quantity * ProjInventRec.GetItemPrice());
          UNTIL ProjInventRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InclOpenPurchase@1100525000() : Boolean;
    BEGIN
      IF NOT SetupRead THEN BEGIN
        JobSetup.GET;
        SetupRead := TRUE;
      END;

      EXIT(NOT JobSetup."Total Cost Excl. Open Purchase");
    END;

    PROCEDURE NumericFilter@1100530000(Text@11012001 : Text[250]) Res@11012000 : Boolean;
    BEGIN
      //db, 11-01-11: M24919
      EXIT(DELCHR(Text,'=','0123456789')='');
    END;

    PROCEDURE GetPrognosis@1210190011(VAR Prognosis@1210190000 : Record 11012034;ProjCde@1210190001 : Code[20];PrognDateTxt@1210190002 : Text[250]);
    VAR
      PrognDate@1210190003 : Date;
    BEGIN
      IF PrognDateTxt = '' THEN BEGIN
        CLEAR(Prognosis);
        EXIT;
      END;

      IF NOT EVALUATE(PrognDate, PrognDateTxt) THEN BEGIN
        CLEAR(Prognosis);
        EXIT;
      END;

      IF (Prognosis."Project No." = ProjCde) AND (Prognosis."Prognosis Date" = PrognDate) THEN
        EXIT;

      Prognosis.SETRANGE("Project No.", ProjCde);
      Prognosis.SETRANGE("Prognosis Date", PrognDate);
      IF NOT Prognosis.FINDFIRST THEN
        CLEAR(Prognosis);
    END;

    PROCEDURE GetProject@1210190087(ProjNo@1210190000 : Code[20]);
    BEGIN
      IF Project."No." = ProjNo THEN
        EXIT;

      IF NOT Project.GET(ProjNo) THEN
        CLEAR(Project);
    END;

    PROCEDURE CheckBudgetOrAllowedPresent@1100409000(Job@1100409000 : Record 11072003) : Boolean;
    VAR
      BudgetLine@1100409001 : Record 11012001;
      ProgressLine@1100409002 : Record 11012037;
    BEGIN
      //C010480
      IF NOT BudgetOrAllowedCheckedGlobal THEN BEGIN
        BudgetOrAllowedPresentGlobal := NOT (BudgetLine.ISEMPTY AND ProgressLine.ISEMPTY);
        BudgetOrAllowedCheckedGlobal := TRUE;
      END;

      IF NOT BudgetOrAllowedPresentGlobal THEN
        EXIT(FALSE);

      IF BudgetOrAllowedCheckedMainProj <> Job."Main Project" THEN BEGIN
        BudgetLine.SETCURRENTKEY("Main Project No.");
        BudgetLine.SETRANGE("Main Project No.", Job."Main Project");
        ProgressLine.SETCURRENTKEY("Main Project No.");
        ProgressLine .SETRANGE("Main Project No.", Job."Main Project");
        BudgetOrAllowedPresentMainProj := NOT (BudgetLine.ISEMPTY AND ProgressLine.ISEMPTY);
        BudgetOrAllowedCheckedMainProj := Job."Main Project";
      END;

      IF NOT BudgetOrAllowedPresentMainProj THEN
        EXIT(FALSE);

      IF BudgetOrAllowedCheckedProject <> Job."No." THEN BEGIN
        BudgetLine.RESET;
        BudgetLine.SETCURRENTKEY("Project No.");
        BudgetLine.SETRANGE("Project No.", Job."No.");
        ProgressLine.SETCURRENTKEY("Project No.");
        ProgressLine .SETRANGE("Project No.", Job."No.");
        BudgetOrAllowedPresentProject := NOT (BudgetLine.ISEMPTY AND ProgressLine.ISEMPTY);
        BudgetOrAllowedCheckedProject := Job."No.";
      END;

      EXIT(BudgetOrAllowedPresentProject);
    END;

    LOCAL PROCEDURE "** IMSE-008"@1100285000();
    BEGIN
    END;

    PROCEDURE FBoxSub1RevenuesExp@1100285001(VAR pProjectNo@1100285007 : Code[20];ExecCalcFields@1210190001 : Boolean) : Decimal;
    VAR
      lProjContr@1100285000 : Record 11012046;
      lProjectInstallment@1100285002 : Record 11012018;
      lTotal@1100285001 : Decimal;
      lTotal1@1100285003 : Decimal;
      lTotal2@1100285004 : Decimal;
      lTotal3@1100285006 : Decimal;
      lProject@1100285005 : Record 11072003;
    BEGIN
      lTotal:= 0;
      //
      IF lProject.GET(pProjectNo) THEN
      BEGIN
        IF lProject."Single/Main/Sub Project" = lProject."Single/Main/Sub Project" :: "Main Project" THEN
        BEGIN
        CLEAR(lProject);
        lProject.SETRANGE("Main Project"  , pProjectNo);
      //>>IME424x
      //  IF lProject.FINDFIRST THEN
        IF lProject.FINDSET(FALSE) THEN
      //<<IME424x
           REPEAT
             lProjectInstallment.RESET;
             lProjectInstallment.SETRANGE("Project No.", lProject."No." );
             //lProjectInstallment.SETRANGE(Chargeable ,   TRUE);
      //>>IME424x
      //       IF lProjectInstallment.FINDFIRST THEN
             IF lProjectInstallment.FINDSET(FALSE) THEN
      //<<IME424x
                REPEAT
                  lProjectInstallment.CALCFIELDS("Invoice in Process (LCY)","Invoiced Price (LCY)");
                  IF lProjectInstallment."Invoiced Price (LCY)" = 0 THEN
                     lTotal := lTotal + lProjectInstallment."Installment Amount (LCY)" - lProjectInstallment."Withheld Amount (LCY)";
                     IF lProjectInstallment."Invoice in Process (LCY)" <> 0 THEN
                        lTotal:= lTotal - lProjectInstallment."Invoice in Process (LCY)";
                UNTIL lProjectInstallment.NEXT = 0;
           UNTIL lProject.NEXT = 0;
        END
      ELSE
        BEGIN
        lProjectInstallment.RESET;
        lProjectInstallment.SETRANGE("Project No.", pProjectNo );
        //lProjectInstallment.SETRANGE(Chargeable ,   TRUE);
      //>>IME424x
      //  IF lProjectInstallment.FINDFIRST THEN
        IF lProjectInstallment.FINDSET(FALSE) THEN
      //<<IME424x
           REPEAT
             lProjectInstallment.CALCFIELDS("Invoice in Process (LCY)","Invoiced Price (LCY)");
             lProjectInstallment.CALCFIELDS("Invoice in Process (LCY)");
             IF lProjectInstallment."Invoiced Price (LCY)" = 0 THEN
                lTotal := lTotal + lProjectInstallment."Installment Amount (LCY)" - lProjectInstallment."Withheld Amount (LCY)";
                IF lProjectInstallment."Invoice in Process (LCY)" <> 0 THEN
                   lTotal:= lTotal - lProjectInstallment."Invoice in Process (LCY)";
           UNTIL lProjectInstallment.NEXT = 0;
        END;
      END;
      EXIT(lTotal);
    END;

    PROCEDURE FBoxSub2RevenuesExp@1100285010(pProjectNo@1100285007 : Code[20];ExecCalcFields@1210190001 : Boolean) : Decimal;
    VAR
      lJobLedgerEntry@1100285000 : Record 11072005;
      lTotal@1100285001 : Decimal;
    BEGIN
      lTotal:= 0;
      lJobLedgerEntry.SETCURRENTKEY("Main Project No.","Cost Component");
      CLEAR(lJobLedgerEntry);
      lJobLedgerEntry.CALCFIELDS("Quantity Invoiced");
      lJobLedgerEntry.SETRANGE("No." , pProjectNo);
      lJobLedgerEntry.SETRANGE("Entry Type" , lJobLedgerEntry."Entry Type" :: Sale);
      lJobLedgerEntry.SETFILTER("Quantity Invoiced", '=0');
      //>>IME424x
      //IF lJobLedgerEntry.FINDFIRST THEN
      IF lJobLedgerEntry.FINDSET(FALSE) THEN
      //<<IME424x
         REPEAT
           lTotal := lTotal + lJobLedgerEntry."Total Price (LCY)";
         UNTIL lJobLedgerEntry.NEXT = 0;
      EXIT(lTotal);
    END;

    PROCEDURE FBoxSub3RevenuesExp@1100285011(VAR pProjectNo@1100285007 : Code[20];ExecCalcFields@1210190001 : Boolean) : Decimal;
    VAR
      lTotal@1100285001 : Decimal;
      lSalesInvLines@1100285005 : Record 37;
      lProject@1100285000 : Record 11072003;
    BEGIN
      lTotal:= 0;
      IF lProject.GET(pProjectNo) THEN
      BEGIN
        IF lProject."Single/Main/Sub Project" = lProject."Single/Main/Sub Project" :: "Main Project" THEN
        BEGIN
        CLEAR(lProject);
        lProject.SETRANGE("Main Project"  , pProjectNo);
      //>>IME424x
      //  IF lProject.FINDFIRST THEN
        IF lProject.FINDSET(FALSE) THEN
      //<<IME424x
           REPEAT
             CLEAR(lSalesInvLines);
             lSalesInvLines.SETCURRENTKEY("Document Type","Project Invoice","Installment Invoice",
                                          "Job No.","Sell-to Customer No.","Installment No.","Plot No.");
             lSalesInvLines.SETRANGE("Document Type", lSalesInvLines."Document Type" :: Invoice);
             lSalesInvLines.SETRANGE("Job No." , lProject."No.");
      //>>IME424x
      //       IF lSalesInvLines.FINDFIRST THEN
             IF lSalesInvLines.FINDSET(FALSE) THEN
      //<<IME424x
                REPEAT
                  lTotal := lTotal + lSalesInvLines."Amount (LCY)";
                UNTIL lSalesInvLines.NEXT = 0;
           UNTIL lProject.NEXT = 0;
        END
      ELSE
        BEGIN
          CLEAR(lSalesInvLines);
          lSalesInvLines.SETCURRENTKEY("Document Type","Project Invoice","Installment Invoice",
                                       "Job No.","Sell-to Customer No.","Installment No.","Plot No.");
          lSalesInvLines.SETRANGE("Document Type", lSalesInvLines."Document Type" :: Invoice);
          lSalesInvLines.SETRANGE("Job No." , pProjectNo);
      //>>IME424x
      //    IF lSalesInvLines.FINDFIRST THEN
          IF lSalesInvLines.FINDSET(FALSE) THEN
      //<<IME424x
             REPEAT
               lTotal := lTotal + lSalesInvLines."Amount (LCY)";
             UNTIL lSalesInvLines.NEXT = 0;
         END;
      END;

      EXIT(lTotal);
    END;

    PROCEDURE FBoxSurCharges@1100285002(VAR pProjectNo@1100285002 : Code[20];ExecCalcFields@1210190001 : Boolean) : Decimal;
    VAR
      lJobLedgerEntry@1100285000 : Record 11072005;
      lTotal@1100285001 : Decimal;
      lProject@1100285003 : Record 11072003;
    BEGIN
      lTotal := 0;
      IF lProject.GET(pProjectNo) THEN
      BEGIN
        IF lProject."Single/Main/Sub Project" = lProject."Single/Main/Sub Project" :: "Main Project" THEN
        BEGIN
          lJobLedgerEntry.SETCURRENTKEY("Main Project No.","Cost Component");
          CLEAR(lJobLedgerEntry);
          lJobLedgerEntry.SETRANGE("Main Project No." , pProjectNo);
          lJobLedgerEntry.SETRANGE(Surcharge          ,TRUE);
      //>>IME424x
      //    IF lJobLedgerEntry.FINDFIRST THEN
          IF lJobLedgerEntry.FINDSET(FALSE) THEN
      //<<IME424x
             REPEAT
               lTotal := lTotal + lJobLedgerEntry."Total Cost (LCY)";
             UNTIL lJobLedgerEntry.NEXT = 0;
       END
      ELSE
        BEGIN
          lJobLedgerEntry.SETCURRENTKEY("Job No.","Cost Component");
          CLEAR(lJobLedgerEntry);
          lJobLedgerEntry.SETRANGE("Job No." , pProjectNo);
          lJobLedgerEntry.SETRANGE(Surcharge          ,TRUE);
      //>>IME424x
      //    IF lJobLedgerEntry.FINDFIRST THEN
          IF lJobLedgerEntry.FINDSET(FALSE) THEN
      //<<IME424x
             REPEAT
               lTotal := lTotal + lJobLedgerEntry."Total Cost (LCY)";
             UNTIL lJobLedgerEntry.NEXT = 0;
       END;
      END;
      EXIT(lTotal);
    END;

    BEGIN
    {
      This codeunit makes all functions on all security levels clear.
      To keep it this way, please put all similar functions below each other.
      4PS01 JD Call C-006737 18-12-2006 Add Estimated Purchase Result to Prognosis page
      4PS02 JD, 13 feb 2007, Project Cost Control forms and reports must give overview of the costs of a mainproject as well.
      4PS03 JD, 19 jul 2007, Call 10044, Filter on project status added to project control card
      4PS, 21-11-13, C010480, Performance changes.

      4PSSE GH 130412     IMSE-011: New function + controle message
      4PSSE DL    4PS-001: correction of EXIT(values)
                  "Prognosis Cost" := "Prognosis Costs" + "Overhead Surch. Progn. Costs"
      160229 ITERO.DL IME424x repace 'findfirst then repeat' (causes locking) with 'findset(false) then repeat'
    }
    END.
  }
}

