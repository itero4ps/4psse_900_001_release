OBJECT Codeunit 11012007 Generate Project Installments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012011 : TextConst 'ENU=Do you want to generate Installments ?';
      Text001@11012012 : TextConst 'ENU=Total percentage of Installment Scheme ''%1'' is not 100 percent. Continue?';
      Text002@11012013 : TextConst 'ENU=Installment schem %1 has no plot Installment to invoice the Plot price on.';
      Text003@11012014 : TextConst 'ENU=No installments generated.';
      Text004@11012015 : TextConst 'ENU=%1 installments created';
      Text005@11012016 : TextConst 'ENU=Plot Price not filled, continue ?';
      Text006@11012017 : TextConst 'ENU=Process aborted.';
      Text007@11012018 : TextConst 'ENU="Contract Amount not filled; continue ?"';
      ProjPrincipalRec@11012000 : Record 11012005;
      PlotNoRec@11012001 : Record 11012500;
      ExtBudgetRec@11012002 : Record 11012004;
      OptionRec@11012003 : Record 11012502;
      ProjSetupRec@1210190000 : Record 315;
      ProjRec@11012004 : Record 11072003;
      InstalmRec@11012005 : Record 11012017;
      ProjInstalmRec@11012006 : Record 11012018;
      VATPostingSetupRec@1210190005 : Record 325;
      InstallmentsGenerated@11012008 : Boolean;
      FromProj@11012009 : Boolean;
      PriceQuestion1@1100485006 : Boolean;
      PriceQuestion2@1100485005 : Boolean;
      PercentageQuestion@1100485007 : Boolean;
      Counter@1100485003 : Integer;
      HelpInstallmAmount@1210190004 : Decimal;
      Text008@1210190001 : TextConst 'ENU=Total percentage of Installment Scheme from Plot  %1-%2  is not 100 percent. Continue?';
      Text009@1210190002 : TextConst 'ENU=Installment scheme from Plot %1-%2 has no plot Installment to invoice the Plot price on.';
      Text010@1210190003 : TextConst 'ENU=For Plot %1-%2 the Contract Date is empty.';
      SaveElemCheckProjNo@1100485002 : Code[20];
      SaveElemCheckPrincipal@1100485001 : Code[20];
      SaveElemCheckPlotNo@1100485000 : Code[10];
      Text011@1100485004 : TextConst 'ENU=In the installment scheme the same element is used several times.\Therefore the element can not be filled for all project installments in Project ''%1'', Principal ''%2'', Plot No. ''%3''.';
      Text012@1100525000 : TextConst 'ENU=%2 is released.';
      bSilent@1100285000 : Boolean;
      Text11128230@1100285001 : TextConst 'ENU=Final Installment';
      DimMgt@1100285500 : Codeunit 408;
      DimValRec@1100285501 : Record 349;

    PROCEDURE FromPrincipal@1(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20]);
    VAR
      lvCommissionRec@1100485001 : Record 11012020;
      lvCommissionNo@1100485000 : Code[20];
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;

      WITH ProjPrincipalRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Principal,CurrentPrincipal);
        SETRANGE("Generate Installments",TRUE);
        SETRANGE("Installments Generated",FALSE);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            TESTFIELD("Project No.");
            ProjSetupRec.GET;
            ProjRec.GET("Project No.");
            IF (ProjSetupRec."Provisions at Closure") THEN
              ProjRec.CheckProjectStatus(-1)
            ELSE
              ProjRec.CheckProjectStatus(0);

            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            lvCommissionNo := '';
            IF (STRLEN("Principal Reference") <= MAXSTRLEN(lvCommissionRec."No.")) THEN BEGIN
              IF lvCommissionRec.GET("Project No.", Principal, "Principal Reference") THEN
                lvCommissionNo := "Principal Reference";
            END;
            GenerateProjectInstallments(
              CurrProj, Principal, "Installment Scheme", "Currency Code", "Contract Amount", "Plot Price",
              '','','','','','','',lvCommissionNo,"VAT Amount Long Lease",
              // SESB.I022 KD 18.07.2013 >>
              "Method Last Installment" = "Method Last Installment"::"Final Installment",
              "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount");
              // SESB.I022 KD 18.07.2013 <<
            IF InstallmentsGenerated THEN BEGIN
              "Installments Generated" := TRUE;
              "Generation Date" := TODAY;
              MODIFY;
            END;
          UNTIL NEXT = 0;
        END ELSE BEGIN
          IF NOT FromProj THEN BEGIN
            SETRANGE("Generate Installments");
            SETRANGE("Installments Generated");
            SETRANGE("Installments per Plot",TRUE);
            IF FINDFIRST THEN BEGIN
              FromProj := TRUE;  //prevents 2x question and informing
              FromPlotNumber(CurrProj,CurrentPrincipal,'');
              FromProj := FALSE;
            END;
          END;
        END;
      END;

      IF NOT FromProj THEN
        Inform();
    END;

    PROCEDURE FromPlotNumber@10(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrentPlot@1210190000 : Code[20]);
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;

      WITH PlotNoRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Principal,CurrentPrincipal);
        SETFILTER("Plot No.",CurrentPlot);
        SETRANGE("Generate Installments",TRUE);
        SETRANGE("Installments Generated",FALSE);
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            IF "Interest Applicable" THEN BEGIN
              IF ("Contract Date" = 0D) THEN BEGIN
                IF NOT FromProj THEN
                  ERROR(Text010);
              END ELSE BEGIN
                GenerateProjPlotInstallments(
                  CurrProj, Principal, "Installment Scheme", ("Building Price" + "Additional Costs"),
                  "Plot Price", '','', "Plot No.",'','','','',"VAT Amount Long Lease");
              END
            END ELSE
              GenerateProjectInstallments(
                CurrProj, Principal, "Installment Scheme", '', ("Building Price" + "Additional Costs"),
                "Plot Price", '','', "Plot No.",'','','','','',"VAT Amount Long Lease",
                FALSE,0,0); // SESB.I022 KD 18.07.2013

            IF InstallmentsGenerated THEN BEGIN
              "Installments Generated" := TRUE;
              "Generation Date" := TODAY;
              MODIFY;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT FromProj THEN
        Inform();
    END;

    PROCEDURE FromExtension@2(CurrProj@11012000 : Code[20];CurrContract@11012001 : Code[10]);
    VAR
      lvCommissionRec@1210190000 : Record 11012020;
      lvCommissionNo@1210190001 : Code[20];
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;
      WITH ExtBudgetRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER("Contract No.",CurrContract);
        SETRANGE("Generate Installments",TRUE);
        SETRANGE("Installments Generated",FALSE);
        SETFILTER(Status, '%1|%2', Status::Order, Status::"Invoicing Allowed");
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            TESTFIELD("Settlement Method", "Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            lvCommissionNo := '';
            IF (STRLEN("Your Reference") <= MAXSTRLEN(lvCommissionRec."No.")) THEN BEGIN
              IF lvCommissionRec.GET("Project No.", Principal, "Your Reference") THEN
                lvCommissionNo := "Your Reference";
            END;
            GenerateProjectInstallments(
              CurrProj,Principal,"Installment Scheme", "Contract Currency Code",
              "Contract Amount",0,'',"Contract No.",'','','','','',lvCommissionNo,0,
              // SESB.I022 KD 18.07.2013 >>
              //"Contract Amount",0,'',"Contract No.",'','','','','',lvCommissionNo,0);
              "Method Last Installment" = "Method Last Installment"::"Final Installment",
              "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount");
              // SESB.I022 KD 18.07.2013 <<
              //* Do not add 'Description' because contract description is available on Installment line and
              //* an extra text line will be created for this at an invoice. Otherwise everything will be twice on the invoice.
              //* Besides, combine 2 fields of 50 pos. in a field of 50 pos., will not fit. A (big) part will disappear.
            IF InstallmentsGenerated THEN BEGIN
              "Installments Generated" := TRUE;
              "Generation Date" := TODAY;
              MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
      IF NOT FromProj THEN
        Inform();
    END;

    PROCEDURE FromOption@8(CurrProj@11012000 : Code[20];CurrPlotNo@1210190004 : Code[10];CurrModel@1210190000 : Code[20];CurrMainGroup@1210190001 : Code[20];CurrGroup@1210190002 : Code[20];CurrSubGroup@1210190003 : Code[20];CurrOption@1210190005 : Code[20]);
    VAR
      lCustomerRec@1100485001 : Record 18;
      lvInstallmentAmount@1100485000 : Decimal;
      lvOptionAmount@1100485002 : Decimal;
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;

      WITH OptionRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Option,CurrOption);
        SETFILTER("Plot No.",CurrPlotNo);
        SETFILTER("House Model", CurrModel);
        SETFILTER("Main Group", CurrMainGroup);
        SETFILTER(Group, CurrGroup);
        SETFILTER("Sub Group", CurrSubGroup);
        SETRANGE("Generate Installments",TRUE);
        SETRANGE("Installments Generated",FALSE);
        SETFILTER(Status, '%1|%2', Status::Order, Status::Invoice);
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            lCustomerRec.GET(Principal);
            lvInstallmentAmount := CalcInstallmentAmount(CurrProj,CurrPlotNo,CurrModel,CurrMainGroup,CurrGroup,CurrSubGroup,CurrOption);
            IF lCustomerRec."Prices Including VAT" THEN
              lvOptionAmount := "Sales Amount incl. VAT" - lvInstallmentAmount
            ELSE
              lvOptionAmount := "Contract Amount" - lvInstallmentAmount;

            GenerateProjectInstallments(
              CurrProj, Principal, "Installment Scheme", '',lvOptionAmount, 0, Description,'', "Plot No.",
              Option, Group, "Sub Group", "Main Group",'',0,
              FALSE,0,0); // SESB.I022 KD 18.07.2013
            IF InstallmentsGenerated THEN BEGIN
              "Installments Generated" := TRUE;
              "Generation Date" := TODAY;
              MODIFY;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT FromProj THEN
        Inform();
    END;

    PROCEDURE FromProject@4(CurrProj@11012000 : Code[20]);
    BEGIN
      IF NOT CONFIRM(Text000,FALSE) THEN
        EXIT;
      FromProj := TRUE;
      FromPrincipal(CurrProj,'');
      FromPlotNumber(CurrProj,'','');
      FromExtension(CurrProj,'');
      FromOption(CurrProj,'','','','','','');
      Inform();
    END;

    PROCEDURE GenerateProjectInstallments@5(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrScheme@11012002 : Code[10];CurrCurrency@1100525001 : Code[20];CurrContractPrice@11012003 : Decimal;CurPlotPrice@11012004 : Decimal;ExtraDescription@11012005 : Text[100];Extension@11012006 : Code[10];CurrPlotNo@11012007 : Code[10];Option@11012008 : Code[20];OptionGroup@11012009 : Code[20];OptionSubGroup@11012010 : Code[20];OptionMainGroup@1210190002 : Code[20];CommissionNo@1210190003 : Code[20];VATAmountLongLease@1100485000 : Decimal;CreateFinalInstalment@1100285002 : Boolean;LineWithheldAmtPerc@1100285001 : Decimal;TotalWithheldAmtPerc@1100285000 : Decimal);
    VAR
      lvJobSetupRec@1100525000 : Record 315;
      NrOfInst@1210190001 : Integer;
      TotInst@1210190000 : Decimal;
      CreateFinalInstalmentLoc@1100285007 : Boolean;
      TotalWithheldAmt@1100285006 : Decimal;
      InsertedWithheldAmt@1100285005 : Decimal;
      LineWithheldAmt@1100285004 : Decimal;
      WithheldAmtRercLoc@1100285003 : Decimal;
    BEGIN
      SaveElemCheckProjNo := '';
      SaveElemCheckPrincipal := '';
      SaveElemCheckPlotNo := '';

      // SESB.I022 KD 18.07.2013 >>
      CreateFinalInstalmentLoc := CreateFinalInstalment AND (LineWithheldAmtPerc <> 0) AND (TotalWithheldAmtPerc <> 0);
      IF CreateFinalInstalmentLoc THEN BEGIN
        TotalWithheldAmt := ROUND(CurrContractPrice * TotalWithheldAmtPerc / 100);
        InsertedWithheldAmt := 0;
      END;
      // SESB.I022 KD 18.07.2013 <<

      lvJobSetupRec.GET;                                  //* 4PS03.sn

      InstallmentsGenerated := FALSE;
      InstalmRec.SETRANGE(Scheme,CurrScheme);
      InstalmRec.SETRANGE("Installment No.");
      IF InstalmRec.FINDSET THEN BEGIN
        InstalmRec.CALCFIELDS("Total percentage");
        IF (InstalmRec."Total percentage" <> 0) THEN BEGIN
          IF (NOT PercentageQuestion) AND (InstalmRec."Total percentage" <> 100) THEN BEGIN
            IF NOT CONFIRM(Text001, FALSE, InstalmRec.Scheme) THEN
              ERROR('')
            ELSE
              PercentageQuestion := TRUE;
          END;
        END;
        IF (InstalmRec."Installment No." > '0') AND (CurPlotPrice <> 0) THEN
          ERROR(Text002, InstalmRec.Scheme);
        NrOfInst := InstalmRec.COUNT;
        TotInst := 0;
        REPEAT
          IF lvJobSetupRec."Cost Component Mandatory" THEN
            InstalmRec.TESTFIELD("Cost Component");           //* 4PS03.en
          IF InstalmRec."Installment No." = '0' THEN BEGIN
            //Installment 0 = Plot Installment
            IF CurPlotPrice = 0 THEN
              CheckProgress(0);
            IF ProjInstalmRec.GET(CurrProj,CurrentPrincipal,CurrPlotNo,'0') THEN BEGIN
              ProjInstalmRec.VALIDATE("Currency Code", CurrCurrency);
              ProjInstalmRec.VALIDATE(
                "Installment Amount (LCY)", ProjInstalmRec."Installment Amount (LCY)" + CurPlotPrice);
              ProjInstalmRec.MODIFY(TRUE);
            END ELSE BEGIN
              ProjInstalmRec.INIT;
              ProjInstalmRec."Project No." := CurrProj;
              ProjInstalmRec.Principal := CurrentPrincipal;
              ProjInstalmRec."Plot No." := CurrPlotNo;
              ProjInstalmRec."Extension Contract" := Extension;
              ProjInstalmRec.Option := Option;
              ProjInstalmRec."Main Group" := OptionMainGroup;
              ProjInstalmRec.Group := OptionGroup;
              ProjInstalmRec."Sub Group" := OptionSubGroup;
              ProjInstalmRec.Element := FillElementCode(CurrProj,CurrentPrincipal,CurrPlotNo,InstalmRec.Element,Option,Extension);
              ProjInstalmRec."Installment No." := '0';
              ProjInstalmRec.Description := InstalmRec.Description;
              //ProjInstalmRec."Cost Object" := InstalmRec."Cost Object";  //*29882.o
              ProjInstalmRec."Cost Object" := GetCostObject(InstalmRec."Cost Object", CurrProj, CurrentPrincipal);  //*29882.n
              ProjInstalmRec."Cost Component" := InstalmRec."Cost Component";
              ProjInstalmRec."Last Installment" := InstalmRec."Last Installment";
              ProjInstalmRec."Commission No." := CommissionNo;
              //ProjInstalmRec."VAT Prod. Posting Group" := GetProdPostingGroup(CurrProj,CurrentPrincipal); //*C-026129.o
              ProjInstalmRec."VAT Prod. Posting Group" := GetProdPostingGroup(CurrProj,CurrentPrincipal,Extension); //*C-026129.n
              ProjInstalmRec.VALIDATE("Currency Code", CurrCurrency);
              ProjInstalmRec.VALIDATE("Installment Amount (LCY)",CurPlotPrice);
              // SESB.I022 KD 18.07.2013 >>
              IF CreateFinalInstalmentLoc THEN
                IF InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
                  LineWithheldAmt := ROUND(ProjInstalmRec."Installment Amount" * LineWithheldAmtPerc / 100);
                  IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
                    ProjInstalmRec.VALIDATE("Withheld Amount",LineWithheldAmt);
                    InsertedWithheldAmt += LineWithheldAmt;
                  END ELSE BEGIN
                    ProjInstalmRec.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
                    InsertedWithheldAmt := TotalWithheldAmt;
                  END;
                END;
              // SESB.I022 KD 18.07.2013 <<
              ProjInstalmRec.VALIDATE("VAT Amount Long Lease",VATAmountLongLease);
              ProjInstalmRec."Installment Scheme SerNo." := InstalmRec."Installment No.";
              ProjInstalmRec.INSERT(TRUE);
            END;
          END ELSE BEGIN
            //Installment 1..
            IF CurrContractPrice = 0 THEN
              CheckProgress(1);
            ProjInstalmRec.RESET;
            ProjInstalmRec.INIT;
            ProjInstalmRec."Project No." := CurrProj;
            ProjInstalmRec.Principal := CurrentPrincipal;
            ProjInstalmRec."Plot No." := CurrPlotNo;
            ProjInstalmRec."Installment No." := GetFreeInstallmentNo(CurrProj, CurrentPrincipal, CurrPlotNo);  //30-01-2008
            ProjInstalmRec."Extension Contract" := Extension;
            ProjInstalmRec.Option := Option;
            ProjInstalmRec."Main Group" := OptionMainGroup;
            ProjInstalmRec.Group := OptionGroup;
            ProjInstalmRec."Sub Group" := OptionSubGroup;
            ProjInstalmRec.Element := FillElementCode(CurrProj, CurrentPrincipal, CurrPlotNo, InstalmRec.Element,Option,Extension);
            ProjInstalmRec.Description := InstalmRec.Description;
            ProjInstalmRec.Description := ProjInstalmRec.Description +
              COPYSTR(' ' + ExtraDescription,1,MAXSTRLEN(ProjInstalmRec.Description)-STRLEN(ProjInstalmRec.Description));
            //ProjInstalmRec."Cost Object" := InstalmRec."Cost Object";  //*29882.o
            ProjInstalmRec."Cost Object" := GetCostObject(InstalmRec."Cost Object", CurrProj, CurrentPrincipal);  //*29882.n
            ProjInstalmRec."Cost Component" := InstalmRec."Cost Component";
            ProjInstalmRec."Last Installment" := InstalmRec."Last Installment";
            ProjInstalmRec."Installment Scheme SerNo." := InstalmRec."Installment No.";
            //ProjInstalmRec."VAT Prod. Posting Group" := GetProdPostingGroup(CurrProj,CurrentPrincipal); //*C-026129.o
            ProjInstalmRec."VAT Prod. Posting Group" := GetProdPostingGroup(CurrProj,CurrentPrincipal,Extension); //*C-026129.n
            InstalmRec.CALCFIELDS("Total percentage"); //**4PS02.n
            ProjInstalmRec.VALIDATE("Currency Code", CurrCurrency);

            IF (NrOfInst = Counter + 1) AND (InstalmRec."Total percentage" = 100) THEN
              ProjInstalmRec.VALIDATE("Installment Amount",ROUND(CurrContractPrice - TotInst))
            ELSE
              ProjInstalmRec.VALIDATE("Installment Amount",ROUND(InstalmRec.Percentage/100 * CurrContractPrice));

            // SESB.I022 KD 18.07.2013 >>
            IF CreateFinalInstalmentLoc THEN
              IF InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
                LineWithheldAmt := ROUND(ProjInstalmRec."Installment Amount" * LineWithheldAmtPerc / 100);
                IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
                  ProjInstalmRec.VALIDATE("Withheld Amount",LineWithheldAmt);
                  InsertedWithheldAmt += LineWithheldAmt;
                END ELSE BEGIN
                  ProjInstalmRec.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
                  InsertedWithheldAmt := TotalWithheldAmt;
                END;
              END;
            // SESB.I022 KD 18.07.2013 <<

            ProjInstalmRec."Commission No." := CommissionNo;
            ProjInstalmRec."Percentage Contract Amount" := InstalmRec.Percentage;
            ProjInstalmRec.INSERT(TRUE);

            TotInst := TotInst + ProjInstalmRec."Installment Amount";
          END;
          InstallmentsGenerated := TRUE;
          Counter := Counter + 1;
        UNTIL InstalmRec.NEXT = 0;
      END;

      // SESB.I022 KD 18.07.2013 >>
      IF CreateFinalInstalmentLoc THEN
        CalcFinalInstalment(
          CurrProj,CurrentPrincipal,CurrCurrency,Extension,CommissionNo,TotalWithheldAmtPerc,
          InsertedWithheldAmt,CurrContractPrice,lvJobSetupRec."Final Installment Cost Object")
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE GenerateProjPlotInstallments@1210190002(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrScheme@11012002 : Code[10];CurrContractPrice@11012003 : Decimal;CurPlotPrice@11012004 : Decimal;ExtraDescription@11012005 : Text[100];Extension@11012006 : Code[10];CurrPlotNo@11012007 : Code[10];Option@11012008 : Code[20];OptionGroup@11012009 : Code[20];OptionSubGroup@11012010 : Code[20];OptionMainGroup@1210190011 : Code[20];VATAmountLongLease@1100485000 : Decimal);
    VAR
      PlotInstalmRec@1210190002 : Record 11012510;
      lJobSetupRec@1210190003 : Record 315;
      lJobRec@1210190004 : Record 11072003;
      lPlotRec@1210190005 : Record 11012500;
      lCustomerRec@1210190006 : Record 18;
      lvProjPrinRec@1100485001 : Record 11012005;
      lPaymentTermsRec@1210190007 : Record 3;
      lDimValRec@1210190010 : Record 349;
      NrOfInst@1210190001 : Integer;
      TotInst@1210190000 : Decimal;
      lInstallmAmount@1210190009 : Decimal;
      lDays@1210190008 : Integer;
      PaymentTermsCode@1210190012 : Code[10];
    BEGIN
      SaveElemCheckProjNo := '';
      SaveElemCheckPrincipal := '';
      SaveElemCheckPlotNo := '';

      InstallmentsGenerated := FALSE;
      PlotInstalmRec.SETRANGE("Project No.",CurrProj);
      PlotInstalmRec.SETRANGE("Plot No.",CurrPlotNo);

      lJobSetupRec.GET;
      lJobRec.GET(CurrProj);
      lPlotRec.GET(CurrProj,CurrPlotNo);
      lCustomerRec.GET(lPlotRec.Principal);

      lJobSetupRec.TESTFIELD("Cost Object Interest Contract");
      lJobRec.TESTFIELD("VAT Prod. P. Group Inst. Int.");
      lCustomerRec.TESTFIELD("Payment Terms Code");

      IF PlotInstalmRec.FINDSET THEN BEGIN
        PlotInstalmRec.CALCFIELDS("Total percentage");
        IF (PlotInstalmRec."Total percentage" <> 0) THEN BEGIN
          IF (NOT PercentageQuestion) AND (PlotInstalmRec."Total percentage" <> 100) THEN BEGIN
            IF NOT CONFIRM(Text008, FALSE, CurrProj, CurrPlotNo) THEN
              ERROR('')
            ELSE
              PercentageQuestion := TRUE;
          END;
        END;
        IF (PlotInstalmRec."Installment No." > '0') AND (CurPlotPrice <> 0) THEN
          ERROR(Text009,  CurrProj, CurrPlotNo);
        NrOfInst := PlotInstalmRec.COUNT;
        TotInst := 0;
        REPEAT
          IF lJobSetupRec."Cost Component Mandatory" THEN
            PlotInstalmRec.TESTFIELD("Cost Component");  //* 4PS03.en //kzwerver, 130613, c, #C008040
          IF PlotInstalmRec."Installment No." = '0' THEN BEGIN
            //Installment 0 = Plot Installment
            IF CurPlotPrice = 0 THEN
              CheckProgress(0);
            IF ProjInstalmRec.GET(CurrProj,CurrentPrincipal,CurrPlotNo,'0') THEN BEGIN
              ProjInstalmRec.VALIDATE(
                "Installment Amount (LCY)", ProjInstalmRec."Installment Amount (LCY)" + CurPlotPrice);
              ProjInstalmRec.MODIFY(TRUE);
            END ELSE BEGIN
              ProjInstalmRec.INIT;
              ProjInstalmRec."Project No." := CurrProj;
              ProjInstalmRec.Principal := CurrentPrincipal;
              ProjInstalmRec."Plot No." := CurrPlotNo;
              ProjInstalmRec."Extension Contract" := Extension;
              ProjInstalmRec.Option := Option;
              ProjInstalmRec."Main Group" := OptionMainGroup;
              ProjInstalmRec.Group := OptionGroup;
              ProjInstalmRec."Sub Group" := OptionSubGroup;
              ProjInstalmRec.Element := FillElementCode(CurrProj,CurrentPrincipal,CurrPlotNo,PlotInstalmRec.Element,Option,Extension);
              ProjInstalmRec."Installment No." := '0';
              ProjInstalmRec.Description := PlotInstalmRec.Description;
              //ProjInstalmRec."Cost Object" := PlotInstalmRec."Cost Object";  //*29882.o
              ProjInstalmRec."Cost Object" := GetCostObject(PlotInstalmRec."Cost Object", CurrProj, CurrentPrincipal);  //*29882.n
              ProjInstalmRec."Cost Component" := PlotInstalmRec."Cost Component";
              ProjInstalmRec."Last Installment" := PlotInstalmRec."Last Installment";
              ProjInstalmRec."VAT Prod. Posting Group" := PlotInstalmRec."VAT Prod. Posting Group";
              ProjInstalmRec.VALIDATE("Installment Amount (LCY)",CurPlotPrice);
              ProjInstalmRec.VALIDATE("VAT Amount Long Lease",VATAmountLongLease);
              ProjInstalmRec."Due Date Base" := lPlotRec."Due Date Plot";
              ProjInstalmRec."Installment Scheme SerNo." := PlotInstalmRec."Installment No.";
              ProjInstalmRec.INSERT(TRUE);
            END;
          END ELSE BEGIN
            //Installment 1..
            IF CurrContractPrice = 0 THEN
              CheckProgress(1);
            ProjInstalmRec.RESET;
            ProjInstalmRec.INIT;
            ProjInstalmRec."Project No." := CurrProj;
            ProjInstalmRec.Principal := CurrentPrincipal;
            ProjInstalmRec."Plot No." := CurrPlotNo;
            ProjInstalmRec."Installment No." := GetFreeInstallmentNo(CurrProj, CurrentPrincipal, CurrPlotNo);  //30-01-2008
            ProjInstalmRec."Extension Contract" := Extension;
            ProjInstalmRec.Option := Option;
            ProjInstalmRec."Main Group" := OptionMainGroup;
            ProjInstalmRec.Group := OptionGroup;
            ProjInstalmRec."Sub Group" := OptionSubGroup;
            ProjInstalmRec.Element := FillElementCode(CurrProj,CurrentPrincipal,CurrPlotNo,PlotInstalmRec.Element,Option,Extension);
            ProjInstalmRec.Description := PlotInstalmRec.Description;
            ProjInstalmRec.Description := ProjInstalmRec.Description +
              COPYSTR(' ' + ExtraDescription,1,MAXSTRLEN(ProjInstalmRec.Description)-STRLEN(ProjInstalmRec.Description));
            //ProjInstalmRec."Cost Object" := PlotInstalmRec."Cost Object";  //*29882.o
            ProjInstalmRec."Cost Object" := GetCostObject(PlotInstalmRec."Cost Object", CurrProj, CurrentPrincipal);  //*29882.n
            ProjInstalmRec."Cost Component" := PlotInstalmRec."Cost Component";
            ProjInstalmRec."Last Installment" := PlotInstalmRec."Last Installment";
            ProjInstalmRec."VAT Prod. Posting Group" := PlotInstalmRec."VAT Prod. Posting Group";
            PlotInstalmRec.CALCFIELDS("Total percentage");  //**4PS02.n
            IF (NrOfInst = Counter + 1) AND (PlotInstalmRec."Total percentage" = 100) THEN
              ProjInstalmRec.VALIDATE("Installment Amount (LCY)",ROUND(CurrContractPrice - TotInst))
            ELSE
              ProjInstalmRec.VALIDATE("Installment Amount (LCY)",ROUND(PlotInstalmRec.Percentage/100 * CurrContractPrice));
            ProjInstalmRec."Due Date Base" := PlotInstalmRec."Due Date";
            ProjInstalmRec."Installment Scheme SerNo." := PlotInstalmRec."Installment No.";
            ProjInstalmRec."Percentage Contract Amount" := PlotInstalmRec.Percentage;
            ProjInstalmRec.INSERT(TRUE);

            TotInst := TotInst + ProjInstalmRec."Installment Amount (LCY)";
          END;
          InstallmentsGenerated := TRUE;
          Counter := Counter + 1;
        UNTIL PlotInstalmRec.NEXT = 0;

        IF lPlotRec."Contract Date" > 0D THEN BEGIN
          IF (lCustomerRec."Payment Terms Code" <> '') AND
             (lJobSetupRec."Cost Object Interest Contract" <> '') AND
             (lJobRec."VAT Prod. P. Group Inst. Int." <> '') THEN
          BEGIN
            lInstallmAmount := 0;
            ProjInstalmRec.RESET;
            ProjInstalmRec.SETRANGE("Project No.",CurrProj);
            ProjInstalmRec.SETFILTER(Principal,CurrentPrincipal);
            ProjInstalmRec.SETRANGE("Plot No.",CurrPlotNo);
            ProjInstalmRec.SETRANGE("Installment No.");
            IF ProjInstalmRec.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                IF (ProjInstalmRec."Due Date Base" <> 0D) THEN BEGIN
                  IF ProjInstalmRec."Installment No." <> '0' THEN BEGIN
                    //ProjInstalmRec.CALCFIELDS("Payment Terms Code"); // 25692.o
                    //lPaymentTermsRec.GET(ProjInstalmRec."Payment Terms Code"); // 25692.o
                    PaymentTermsCode := ProjInstalmRec.GetPaymentTermsCode();  // 25692.n
                    lPaymentTermsRec.GET(PaymentTermsCode); // 25692.n
                    ProjInstalmRec."Due Date Actual" :=
                      CALCDATE(lPaymentTermsRec."Due Date Calculation",ProjInstalmRec."Due Date Base");
                  END ELSE
                    ProjInstalmRec."Due Date Actual" := ProjInstalmRec."Due Date Base";

                  IF (ProjInstalmRec."Due Date Actual" < lPlotRec."Contract Date") THEN BEGIN
                    lDays := lPlotRec."Contract Date" - ProjInstalmRec."Due Date Actual";
                    IF lCustomerRec."Prices Including VAT" THEN BEGIN
                      IF NOT lvProjPrinRec.GET(CurrProj, CurrentPrincipal) THEN
                        lvProjPrinRec.INIT;
                      IF (lvProjPrinRec."VAT Bus. Posting Group" <> '') THEN
                        VATPostingSetupRec.GET(lvProjPrinRec."VAT Bus. Posting Group", ProjInstalmRec."VAT Prod. Posting Group")
                      ELSE
                        VATPostingSetupRec.GET(lJobRec."VAT Bus. Posting Group", ProjInstalmRec."VAT Prod. Posting Group");
                      // Get VAT from Installment.
                      HelpInstallmAmount := 100 * (ProjInstalmRec."Installment Amount (LCY)"/(100+VATPostingSetupRec."VAT %"));
                    END ELSE
                      HelpInstallmAmount := ProjInstalmRec."Installment Amount (LCY)";
                    IF lPlotRec."Div. Int. Before Contract Date" = 0 THEN
                      lInstallmAmount := lInstallmAmount +
                                         (HelpInstallmAmount *
                                          (ProjRec."Interest Before Contract Date"/100) *
                                          (lDays/365)
                                         )
                    ELSE
                      lInstallmAmount := lInstallmAmount +
                                         (HelpInstallmAmount *
                                          (lPlotRec."Div. Int. Before Contract Date"/100) *
                                          (lDays/365)
                                         )

                  END;
                  ProjInstalmRec.MODIFY;
                END;
              UNTIL ProjInstalmRec.NEXT = 0;

              IF lInstallmAmount <> 0 THEN BEGIN

                lDimValRec.SETCURRENTKEY(Code,"Global Dimension No.");
                lDimValRec.INIT;
                IF lJobSetupRec."Cost Object Interest Contract" <> '' THEN BEGIN
                  lDimValRec.SETRANGE(Code,lJobSetupRec."Cost Object Interest Contract");
                  lDimValRec.SETRANGE("Global Dimension No.",2);
                  lDimValRec.FINDFIRST;
                END;

                ProjInstalmRec.RESET;
                ProjInstalmRec.INIT;
                ProjInstalmRec."Project No." := CurrProj;
                ProjInstalmRec.Principal := CurrentPrincipal;
                ProjInstalmRec."Plot No." := CurrPlotNo;
                ProjInstalmRec."Installment No." := GetFreeInstallmentNo(CurrProj, CurrentPrincipal, CurrPlotNo);  //30-01-2008
                ProjInstalmRec."Extension Contract" := Extension;
                ProjInstalmRec.Option := Option;
                ProjInstalmRec."Main Group" := OptionMainGroup;
                ProjInstalmRec.Group := OptionGroup;
                ProjInstalmRec."Sub Group" := OptionSubGroup;
                ProjInstalmRec.Element := FillElementCode(CurrProj, CurrentPrincipal, CurrPlotNo, '', Option, Extension);
                ProjInstalmRec.Description := lDimValRec.Name;
                ProjInstalmRec."Cost Object" := lJobSetupRec."Cost Object Interest Contract";
                ProjInstalmRec."Last Installment" := FALSE;
                ProjInstalmRec."VAT Prod. Posting Group" := lJobRec."VAT Prod. P. Group Inst. Int.";
                IF lCustomerRec."Prices Including VAT" THEN BEGIN
                  IF NOT lvProjPrinRec.GET(CurrProj, CurrentPrincipal) THEN
                    lvProjPrinRec.INIT;
                  IF (lvProjPrinRec."VAT Bus. Posting Group" <> '') THEN
                    VATPostingSetupRec.GET(lvProjPrinRec."VAT Bus. Posting Group", ProjInstalmRec."VAT Prod. Posting Group")
                  ELSE
                    VATPostingSetupRec.GET(lJobRec."VAT Bus. Posting Group", ProjInstalmRec."VAT Prod. Posting Group");
                  IF VATPostingSetupRec."VAT %" <> 0 THEN
                    lInstallmAmount := lInstallmAmount + (lInstallmAmount * VATPostingSetupRec."VAT %"  /100);
                END;
                ProjInstalmRec.VALIDATE("Installment Amount (LCY)",ROUND(lInstallmAmount));
                ProjInstalmRec."Due Date Base" := lPlotRec."Contract Date";
                ProjInstalmRec."Due Date Actual":=CALCDATE(lPaymentTermsRec."Due Date Calculation",ProjInstalmRec."Due Date Base");
                ProjInstalmRec."Interest Installment" := ProjInstalmRec."Interest Installment"::"Before Contract Date";
                ProjInstalmRec.INSERT(TRUE);

                TotInst := TotInst + ProjInstalmRec."Installment Amount (LCY)";
                InstallmentsGenerated := TRUE;
                Counter := Counter + 1;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE Inform@7();
    BEGIN
      IF Counter = 0 THEN
        MESSAGE(Text003)
      ELSE
        MESSAGE(Text004,Counter);
    END;

    PROCEDURE CheckProgress@6(lvInstalm@11012000 : Integer);
    BEGIN
      IF lvInstalm = 0 THEN BEGIN
        IF PriceQuestion1 = FALSE THEN
          IF CONFIRM(Text005, TRUE) THEN
            PriceQuestion1 := TRUE
          ELSE
            ERROR(Text006);
      END ELSE BEGIN
        IF PriceQuestion2 = FALSE THEN
          IF CONFIRM(Text007, TRUE) THEN
            PriceQuestion2 := TRUE
          ELSE
            ERROR(Text006);
      END;
    END;

    PROCEDURE GetProdPostingGroup@9(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];ExtContractNo@1210190000 : Code[10]) : Code[10];
    VAR
      ExtContr@1210190001 : Record 11012004;
    BEGIN
      IF InstalmRec."VAT Prod. Posting Group" <> '' THEN
        EXIT(InstalmRec."VAT Prod. Posting Group");

      //*C-026129.sn
      IF ExtContractNo <> '' THEN BEGIN
        IF ExtContr.GET(CurrProj, ExtContractNo) THEN BEGIN
          IF ExtContr."VAT Prod. Posting Group" <> '' THEN
            EXIT(ExtContr."VAT Prod. Posting Group");
        END;
      END;
      //*C-026129.en

      IF (ProjPrincipalRec."Project No." <> CurrProj) OR
         (ProjPrincipalRec.Principal <> CurrentPrincipal)
      THEN
        // SESB.I022 KD 08.09.2013 >>
        // ProjPrincipalRec.GET(CurrProj,CurrentPrincipal);
        IF NOT ProjPrincipalRec.GET(CurrProj,CurrentPrincipal) THEN
          CLEAR(ProjPrincipalRec);
        // SESB.I022 KD 08.09.2013 <<

      EXIT(ProjPrincipalRec."VAT Prod. Posting Group");
    END;

    PROCEDURE FillElementCode@1210190003(IProjectNo@1210190000 : Code[20];IPrincipal@1210190007 : Code[20];IPlotNo@1210190008 : Code[10];IElement@1210190003 : Code[20];IOption@1210190002 : Code[20];IExtensionContract@1100485000 : Code[10]) : Code[20];
    VAR
      lvProjRec@1210190001 : Record 11072003;
      lvProjInstalmRec@1210190005 : Record 11012018;
      lvCreateProjElemCU@1210190004 : Codeunit 11012058;
      lvInstallNo@1210190006 : Code[10];
    BEGIN
      IF (IProjectNo = '') THEN
        EXIT('');

      IF NOT lvProjRec.GET(IProjectNo) THEN
        lvProjRec.INIT;


      IF (IElement <> '') THEN BEGIN
        //IF lvProjRec."Progress from Instal. Progress" AND (IOption = '') THEN BEGIN  //C-019166.o
        IF lvProjRec."Progress from Instal. Progress" AND lvProjRec."Element per Installment" AND (IOption = '') THEN BEGIN //C-019166.n
          IF NOT lvProjInstalmRec.CheckElementAllowedOnInstall(
                   IProjectNo, IPrincipal, IPlotNo, IElement, IOption, IExtensionContract, '', lvInstallNo)
          THEN BEGIN
            IF (IProjectNo <> SaveElemCheckProjNo) OR
               (IPrincipal <> SaveElemCheckPrincipal) OR
               (IPlotNo <> SaveElemCheckPlotNo)
           THEN BEGIN
              SaveElemCheckProjNo := IProjectNo;
              SaveElemCheckPrincipal := IPrincipal;
              SaveElemCheckPlotNo := IPlotNo;
              MESSAGE(Text011, IProjectNo, IPrincipal, IPlotNo);
            END;
            EXIT('');
          END;
        END;
        lvCreateProjElemCU.CreateProjElementWithParents(IProjectNo, IElement);
        EXIT(IElement);
      END ELSE BEGIN
        //IF NOT lvProjRec."Progress from Instal. Progress" THEN  //C-019166.o
        IF (NOT lvProjRec."Progress from Instal. Progress") OR (NOT lvProjRec."Element per Installment") THEN //C-019166.n
          EXIT(GetDefaultElement(IProjectNo));
      END;

      EXIT('');
    END;

    PROCEDURE GetDefaultElement@1210190000(CurrProj@1210190000 : Code[20]) : Code[20];
    VAR
      ProjElemRec@1210190001 : Record 11012010;
    BEGIN
      ProjElemRec.SETRANGE("Project No.", CurrProj);
      ProjElemRec.SETRANGE(Level, 0);
      ProjElemRec.SETRANGE(Blocked, FALSE);  //C015872.n
      IF ProjElemRec.FINDFIRST THEN
        EXIT(ProjElemRec.Element)
      ELSE
        EXIT('');
    END;

    PROCEDURE FromExtensionNotAsk@1100525001(CurrProj@1100525000 : Code[20];CurrContract@1100525001 : Code[10]);
    VAR
      ExtensionContract@1100525003 : Record 11012004;
    BEGIN
      //kzwerver, 08-12-2010, FO Release Extension Contract
      FromProj := TRUE;
      FromExtension(CurrProj, CurrContract);
      FromProj := FALSE;

      IF (NOT bSilent) THEN BEGIN  //DP00793-RFC11
        IF (Counter = 0) THEN
          MESSAGE(Text003 + '\' + Text012, '', ExtensionContract.TABLECAPTION)
        ELSE
          MESSAGE(Text004 + '\' + Text012, Counter, ExtensionContract.TABLECAPTION);
      END;
    END;

    PROCEDURE FromOptionNotAsk@1210190001(CurrProj@11012000 : Code[20];CurrPlotNo@1210190004 : Code[10];CurrModel@1210190003 : Code[20];CurrMainGroup@1210190002 : Code[20];CurrGroup@1210190001 : Code[20];CurrSubGroup@1210190000 : Code[20];CurrOption@11012001 : Code[20]);
    BEGIN
      FromProj := TRUE;
      FromOption(CurrProj,CurrPlotNo,CurrModel,CurrMainGroup,CurrGroup,CurrSubGroup,CurrOption);
      FromProj := FALSE;
    END;

    PROCEDURE CalcInstallmentAmount@1100485000(CurrProj@1100485006 : Code[20];CurrPlotNo@1100485005 : Code[10];CurrModel@1100485004 : Code[20];CurrMainGroup@1100485003 : Code[20];CurrGroup@1100485002 : Code[20];CurrSubGroup@1100485001 : Code[20];CurrOption@1100485000 : Code[20]) rAmount : Decimal;
    VAR
      lvProjInstallmentRec@1100485007 : Record 11012018;
    BEGIN
      rAmount := 0;
      WITH lvProjInstallmentRec DO BEGIN
        SETRANGE("Project No.",CurrProj);
        SETRANGE("Plot No.",CurrPlotNo);
        SETRANGE("Main Group",CurrMainGroup);
        SETRANGE(Group,CurrGroup);
        SETRANGE("Sub Group",CurrSubGroup);
        SETRANGE(Option,CurrOption);
        IF FINDSET THEN
          REPEAT
            rAmount += lvProjInstallmentRec."Installment Amount (LCY)";
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetFreeInstallmentNo@1100485001(IProjectNo@1100485002 : Code[20];IPrincipal@1100485001 : Code[20];IPlotNo@1100485000 : Code[10]) : Code[10];
    VAR
      lvProjInstallmentRec@1100485003 : Record 11012018;
    BEGIN
      lvProjInstallmentRec.SETRANGE("Project No.", IProjectNo);
      lvProjInstallmentRec.SETFILTER(Principal, IPrincipal);
      lvProjInstallmentRec.SETRANGE("Plot No.", IPlotNo);
      IF NOT lvProjInstallmentRec.FINDLAST THEN
        EXIT('1');

      //* 'REPEAT - UNTIL' is needed for SQL environment (for different sorting in SQL).
      //* Read till non existing number found.
      REPEAT
        lvProjInstallmentRec."Installment No." := INCSTR(lvProjInstallmentRec."Installment No.")
      UNTIL NOT lvProjInstallmentRec.GET(IProjectNo, IPrincipal, IPlotNo, lvProjInstallmentRec."Installment No.");

      EXIT(lvProjInstallmentRec."Installment No.");
    END;

    PROCEDURE GetCostObject@1210190004(InstallCostObject@1210190000 : Code[20];ProjNo@1210190003 : Code[20];PrinNo@1210190004 : Code[20]) : Code[20];
    VAR
      ProjSetup@1210190001 : Record 315;
      ProjPrin@1210190002 : Record 11012005;
    BEGIN
      //*29882
      ProjSetup.GET;
      IF (ProjSetup."Cost Object from" = ProjSetup."Cost Object from"::"Project Principal") THEN BEGIN
        IF ProjPrin.GET(ProjNo, PrinNo) THEN BEGIN
          IF ProjPrin."Cost Object" <> '' THEN
            EXIT(ProjPrin."Cost Object");       //* Only if proj-principal exist with Cost Object filled
        END;
      END;
      EXIT(InstallCostObject);  //* So also if Cost Object from "Project Principal" but not found/filled there
                                //* (was also in old situation).
    END;

    PROCEDURE CalcFinalInstalmentPrincipal@1100294005(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20]);
    VAR
      lvCommissionRec@1100485001 : Record 11012020;
      lvCommissionNo@1100485000 : Code[20];
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      WITH ProjPrincipalRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Principal,CurrentPrincipal);
        IF FINDSET THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjSetupRec.GET;
            ProjRec.GET("Project No.");
            IF (ProjSetupRec."Provisions at Closure") THEN
              ProjRec.CheckProjectStatus(-1)
            ELSE
              ProjRec.CheckProjectStatus(0);

            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            lvCommissionNo := '';
            IF (STRLEN("Principal Reference") <= MAXSTRLEN(lvCommissionRec."No.")) THEN BEGIN
              IF lvCommissionRec.GET("Project No.",Principal,"Principal Reference") THEN
                lvCommissionNo := "Principal Reference";
            END;

            UpdateWithheldAmount(
              CurrProj,Principal,"Currency Code","Contract Amount",'',lvCommissionNo,
              "Method Last Installment" = "Method Last Installment"::"Final Installment",
              "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount");
          UNTIL NEXT = 0;
      END;
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE CalcFinalInstalmentExtension@1100294004(CurrProj@11012000 : Code[20];CurrContract@11012001 : Code[10]);
    VAR
      lvCommissionRec@1210190000 : Record 11012020;
      lvCommissionNo@1210190001 : Code[20];
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      WITH ExtBudgetRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER("Contract No.",CurrContract);
        IF FINDSET THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            TESTFIELD("Settlement Method","Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            lvCommissionNo := '';
            IF (STRLEN("Your Reference") <= MAXSTRLEN(lvCommissionRec."No.")) THEN BEGIN
              IF lvCommissionRec.GET("Project No.", Principal, "Your Reference") THEN
                lvCommissionNo := "Your Reference";
            END;

      //>>140425 ITERO.DJ IME134
        IF "Method Last Installment" <> "Method Last Installment"::" " THEN
      //<<140425 ITERO.DJ IME134
              UpdateWithheldAmount(
                CurrProj,Principal,"Contract Currency Code","Contract Amount","Contract No.",lvCommissionNo,
                "Method Last Installment" = "Method Last Installment"::"Final Installment",
                "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount");
            UNTIL NEXT = 0;
      END;
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE CalcFinalInstalmentProject@1100294003(CurrProj@11012000 : Code[20]);
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      CalcFinalInstalmentPrincipal(CurrProj,'');
      CalcFinalInstalmentExtension(CurrProj,'');
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE UpdateWithheldAmount@1100294002(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrCurrency@1100525001 : Code[20];CurrContractPrice@1100294009 : Decimal;Extension@11012006 : Code[10];CommissionNo@1210190003 : Code[20];CreateFinalInstalment@1100294000 : Boolean;LineWithheldAmtPerc@1100294001 : Decimal;TotalWithheldAmtPerc@1100294002 : Decimal);
    VAR
      lvJobSetupRec@1100525000 : Record 315;
      CreateFinalInstalmentLoc@1100294003 : Boolean;
      TotalWithheldAmt@1100294004 : Decimal;
      InsertedWithheldAmt@1100294005 : Decimal;
      LineWithheldAmt@1100294006 : Decimal;
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      CreateFinalInstalmentLoc := CreateFinalInstalment AND (LineWithheldAmtPerc <> 0) AND (TotalWithheldAmtPerc <> 0);
      IF NOT CreateFinalInstalmentLoc THEN
        EXIT;

      ProjInstalmRec.RESET;
      ProjInstalmRec.SETCURRENTKEY("Project No.",Principal,"Extension Contract","Plot No.");
      ProjInstalmRec.SETRANGE("Project No.",CurrProj);
      ProjInstalmRec.SETRANGE(Principal,CurrentPrincipal);
      ProjInstalmRec.SETRANGE("Extension Contract",Extension);
      ProjInstalmRec.SETRANGE("Plot No.",'');
      IF ProjInstalmRec.ISEMPTY THEN
        EXIT;
      ProjInstalmRec.SETRANGE("Last Installment",TRUE);
      IF NOT ProjInstalmRec.ISEMPTY THEN
        EXIT;

      TotalWithheldAmt := ROUND(CurrContractPrice * TotalWithheldAmtPerc / 100);
      InsertedWithheldAmt := 0;

      lvJobSetupRec.GET;

      ProjInstalmRec.SETRANGE("Last Installment");

      //>>ENH015
      IF ProjInstalmRec.FINDSET THEN
      REPEAT
        ProjInstalmRec.CALCFIELDS("Invoiced Price","Invoice in Process");
        IF (ProjInstalmRec."Invoiced Price" = 0) AND (ProjInstalmRec."Invoice in Process" = 0) THEN BEGIN
          ProjInstalmRec.VALIDATE("Withheld Amount",0);
          ProjInstalmRec.MODIFY(TRUE);
        END
        ELSE
         InsertedWithheldAmt += ProjInstalmRec."Withheld Amount";
      UNTIL (ProjInstalmRec.NEXT = 0) ;
      //<<ENH015

      ProjInstalmRec.SETCURRENTKEY("Project No.",Principal,"Plot No.","Installment No.");
      ProjInstalmRec.FINDSET;

      REPEAT
        LineWithheldAmt := ROUND(ProjInstalmRec."Installment Amount" * LineWithheldAmtPerc / 100);
        IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
          ProjInstalmRec.VALIDATE("Withheld Amount",LineWithheldAmt);
          InsertedWithheldAmt += LineWithheldAmt;
        END ELSE BEGIN
          ProjInstalmRec.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
          InsertedWithheldAmt := TotalWithheldAmt;
        END;
        //>> ITERO.LP NAVSE
        ProjInstalmRec.VALIDATE("Withheld Amount", 0);
        //<< ITERO.LP NAVSE

        ProjInstalmRec.MODIFY(TRUE)
      UNTIL (ProjInstalmRec.NEXT = 0) OR (InsertedWithheldAmt = TotalWithheldAmt);

      CalcFinalInstalment(
        CurrProj,CurrentPrincipal,CurrCurrency,Extension,CommissionNo,TotalWithheldAmtPerc,
        InsertedWithheldAmt,CurrContractPrice,lvJobSetupRec."Final Installment Cost Object")
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE CalcFinalInstalment@1100294001(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrCurrency@1100525001 : Code[20];Extension@11012006 : Code[10];CommissionNo@1210190003 : Code[20];WithheldAmtRerc@1100294002 : Decimal;WithheldAmt@1100294007 : Decimal;TotalAmt@1100294001 : Decimal;FinalInstCostObject@1100294000 : Code[20]);
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      ProjInstalmRec.RESET;
      ProjInstalmRec.SetSuspendAmountCheck;
      ProjInstalmRec.INIT;
      ProjInstalmRec."Project No." := CurrProj;
      ProjInstalmRec.Principal := CurrentPrincipal;
      ProjInstalmRec."Installment No." := GetFreeInstallmentNo(CurrProj,CurrentPrincipal,'');
      ProjInstalmRec."Extension Contract" := Extension;
      ProjInstalmRec.Description := Text11128230;
      ProjInstalmRec."Cost Object" := FinalInstCostObject;

      //>>140428 IME140 ITERO.DJ
      IF ProjInstalmRec."Cost Object" <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, ProjInstalmRec."Cost Object", DimValRec, TRUE, ProjInstalmRec."Project No.");
        ProjInstalmRec."Cost Component" := DimValRec."Cost Component";
      END;
      //<<140428 IME140 ITERO.DJ

      ProjInstalmRec."Last Installment" := TRUE;
      ProjInstalmRec."VAT Prod. Posting Group" := GetProdPostingGroup(CurrProj,CurrentPrincipal,Extension);
      ProjInstalmRec.VALIDATE("Currency Code", CurrCurrency);
      ProjInstalmRec.VALIDATE("Installment Amount",WithheldAmt);
      IF WithheldAmt = ROUND(TotalAmt * WithheldAmtRerc / 100) THEN
        ProjInstalmRec."Percentage Contract Amount" := WithheldAmtRerc
      ELSE
        ProjInstalmRec."Percentage Contract Amount" := ROUND(100 * WithheldAmt / TotalAmt);
      ProjInstalmRec."Commission No." := CommissionNo;
      ProjInstalmRec.INSERT(TRUE);

      Counter := Counter + 1;
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE CheckFinalInstCreated@1100294000(ProjPrincipalLoc@1100294002 : Record 11012005) : Boolean;
    BEGIN
      // SESB.I022 KD 09.08.2013 >>
      WITH ProjInstalmRec DO BEGIN
        RESET;
        SETRANGE("Project No.",ProjPrincipalLoc."Project No.");
        SETRANGE(Principal,ProjPrincipalLoc.Principal);
        SETRANGE("Plot No.",'');

        IF ProjPrincipalLoc."Method Last Installment" = ProjPrincipalLoc."Method Last Installment"::"Final Installment" THEN BEGIN
          SETRANGE("Extension Contract",'');
          IF NOT ISEMPTY THEN BEGIN
            SETRANGE("Last Installment",TRUE);
            IF ISEMPTY THEN
              EXIT(FALSE);
            SETRANGE("Last Installment");
          END;
        END;

        SETFILTER("Extension Contract",'<>''''');
        IF ISEMPTY THEN
          EXIT(TRUE);
        FINDSET;
        REPEAT
          SETRANGE("Extension Contract","Extension Contract");
          IF ExtBudgetRec.GET("Project No.","Extension Contract") THEN
            IF ExtBudgetRec."Method Last Installment" = ExtBudgetRec."Method Last Installment"::"Final Installment" THEN BEGIN
              SETRANGE("Last Installment",TRUE);
              IF ISEMPTY THEN
                EXIT(FALSE);
            END;
          SETRANGE("Last Installment");
          FINDLAST;
          SETRANGE("Extension Contract");
        UNTIL NEXT = 0;
      END;

      EXIT(TRUE);
      // SESB.I022 KD 09.08.2013 <<
    END;

    PROCEDURE RecalculateProjInstalment@1100285500(CurrProj@1100285508 : Code[20];CurrentPrincipal@1100285507 : Code[20];CurrCurrency@1100285506 : Code[20];CurrContractPrice@1100285505 : Decimal;Extension@1100285504 : Code[10];CommissionNo@1100285503 : Code[20];CreateFinalInstalment@1100285502 : Boolean;LineWithheldAmtPerc@1100285501 : Decimal;TotalWithheldAmtPerc@1100285500 : Decimal;InstallmentNo@1100285514 : Code[10];InstallmentChargeable@1100285515 : Boolean);
    VAR
      lvJobSetupRec@1100285513 : Record 315;
      CreateFinalInstalmentLoc@1100285512 : Boolean;
      TotalWithheldAmt@1100285511 : Decimal;
      InsertedWithheldAmt@1100285510 : Decimal;
      LineWithheldAmt@1100285509 : Decimal;
    BEGIN
      //>>ITERO.DJ/DL, 140317, ENH015
      CreateFinalInstalmentLoc := CreateFinalInstalment AND (LineWithheldAmtPerc <> 0) AND (TotalWithheldAmtPerc <> 0);
      IF NOT CreateFinalInstalmentLoc THEN
        EXIT;

      ProjInstalmRec.RESET;
      ProjInstalmRec.SETRANGE("Project No.",CurrProj);
      ProjInstalmRec.SETRANGE(Principal,CurrentPrincipal);
      ProjInstalmRec.SETRANGE("Extension Contract",Extension);
      ProjInstalmRec.SETRANGE("Plot No.",'');
      IF ProjInstalmRec.ISEMPTY THEN
        EXIT;

      ProjInstalmRec.SETRANGE("Last Installment",TRUE);
      IF ProjInstalmRec.FINDFIRST THEN
        IF ProjInstalmRec.Chargeable THEN
          EXIT;
      ProjInstalmRec.SETRANGE("Last Installment");


      TotalWithheldAmt := ROUND(CurrContractPrice * TotalWithheldAmtPerc / 100);
      InsertedWithheldAmt := 0;
      lvJobSetupRec.GET;

      IF ProjInstalmRec.FINDSET THEN
      REPEAT
        ProjInstalmRec.CALCFIELDS("Invoiced Price","Invoice in Process");
        IF (ProjInstalmRec."Invoiced Price" = 0) AND (ProjInstalmRec."Invoice in Process" = 0) THEN BEGIN
          ProjInstalmRec.VALIDATE("Withheld Amount",0);
          ProjInstalmRec.MODIFY(TRUE);
        END
        ELSE
         InsertedWithheldAmt += ProjInstalmRec."Withheld Amount";
      UNTIL (ProjInstalmRec.NEXT = 0) ;


      ProjInstalmRec.SETCURRENTKEY("Project No.",Principal,"Plot No.","Installment No.");
      //>>140509 ITERO.DJ IME134
      ProjInstalmRec.SETRANGE("Last Installment", FALSE);
      //<<140509 ITERO.DJ IME134
      IF ProjInstalmRec.FINDSET THEN
      REPEAT
        ProjInstalmRec.CALCFIELDS("Invoiced Price","Invoice in Process");
        IF (ProjInstalmRec.Chargeable OR
            ((ProjInstalmRec."Installment No." = InstallmentNo) AND (ProjInstalmRec.Chargeable <> InstallmentChargeable))
            ) AND (ProjInstalmRec."Invoiced Price" = 0)
            AND (ProjInstalmRec."Invoice in Process" = 0)
            THEN BEGIN
          LineWithheldAmt := ROUND(ProjInstalmRec."Installment Amount" * LineWithheldAmtPerc / 100);
          IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
            ProjInstalmRec.VALIDATE("Withheld Amount",LineWithheldAmt);
          END ELSE BEGIN
            ProjInstalmRec.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
          END;
          InsertedWithheldAmt += ProjInstalmRec."Withheld Amount";
          ProjInstalmRec.MODIFY(TRUE);
        END;
      UNTIL (ProjInstalmRec.NEXT = 0) OR (InsertedWithheldAmt = TotalWithheldAmt);


      //ProjInstalmRec.SETRANGE(Chargeable, FALSE);
      IF ProjInstalmRec.FINDSET THEN
      REPEAT
        ProjInstalmRec.CALCFIELDS("Invoiced Price","Invoice in Process");
        IF ((NOT ProjInstalmRec.Chargeable ) OR
            ((ProjInstalmRec."Installment No." = InstallmentNo) AND (ProjInstalmRec.Chargeable <> InstallmentChargeable))
            ) AND (ProjInstalmRec."Invoiced Price" = 0)
            AND (ProjInstalmRec."Invoice in Process" = 0)
            THEN BEGIN

        LineWithheldAmt := ROUND(ProjInstalmRec."Installment Amount" * LineWithheldAmtPerc / 100);
        IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
          ProjInstalmRec.VALIDATE("Withheld Amount",LineWithheldAmt);
        END ELSE BEGIN
          ProjInstalmRec.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
        END;
        InsertedWithheldAmt += ProjInstalmRec."Withheld Amount";
        ProjInstalmRec.MODIFY(TRUE);
      END;
      UNTIL (ProjInstalmRec.NEXT = 0) OR (InsertedWithheldAmt = TotalWithheldAmt);
      ProjInstalmRec.SETRANGE(Chargeable);

      ProjInstalmRec.SETRANGE("Last Installment",TRUE);
      IF NOT ProjInstalmRec.ISEMPTY THEN
        EXIT;
      CalcFinalInstalment(
        CurrProj,CurrentPrincipal,CurrCurrency,Extension,CommissionNo,TotalWithheldAmtPerc,
        InsertedWithheldAmt,CurrContractPrice,lvJobSetupRec."Final Installment Cost Object")
      //<<ITERO.DJ/DL, 140317, ENH015
    END;

    PROCEDURE SetSilent@1100285000(pSilent@1100285000 : Boolean);
    BEGIN
      //DP00793-RFC11
      bSilent := pSilent;
    END;

    BEGIN
    {
      4PS01 JD 04-12-2006 Call 6110 When Principal Reference is an 'Commission' like linked to a Principal,
      then also take to the Installments, same as done at Extension contracts.
      4PS02 JD 08-01-2007 Call 8832 Total of Installments is sometimes higher then contract amount caused by Rounding Difference.
      4PS03 JD 23-12-2008 Call 13244 Early 'crash' when costcomponent not filled while mandatory
      4PSSE GH 130412     IMSE-011: New function + controle message

      SESB.I022 Final Instalment
         KD 18.07.2013 Trigger FromPrincipal changed
         KD 18.07.2013 Trigger FromPlotNumber changed
         KD 18.07.2013 Trigger FromExtension changed
         KD 18.07.2013 Trigger FromOption changed
         KD 18.07.2013 Trigger GenerateProjectInstallments changed
         KD 18.07.2013 Trigger CalcFinalInstalmentPrincipal added
         KD 18.07.2013 Trigger CalcFinalInstalmentExtension added
         KD 18.07.2013 Trigger CalcFinalInstalmentProject added
         KD 18.07.2013 Trigger UpdateWithheldAmount added
         KD 18.07.2013 Trigger CalcFinalInstalment added
         KD 08.08.2013 Trigger GetProdPostingGroup changed
         KD 09.08.2013 Trigger CheckFinalInstCreated added

      ITERO.DJ 140425 IME134 added check for method last instalment before calculating
      ITERO.DJ 140428 IME140 added cost component for final installment
      ITERO.DJ 140509 IME134 exclude last installment line from recalculation
      ITERO.LP 160316 NAVSE Adjustment in function UpdateWithheldAmount.
    }
    END.
  }
}

