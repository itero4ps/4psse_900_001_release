OBJECT Codeunit 11012033 Validate Items
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemSetup@1100485000 : Record 11012300;
      InventSetup@1100485001 : Record 313;
      GLSetup@1100485005 : Record 98;
      Cust@1210190004 : Record 18;
      DimVal@1210190007 : Record 349;
      LanguageCode@1100525000 : Code[10];
      QuanDec@1100525001 : Decimal;
      GetBasicItemOnly@1210190000 : Boolean;
      ItemRelationsRead@1210190002 : Boolean;
      ItemRelationsPresent@1210190001 : Boolean;
      CustPresent@1210190003 : Boolean;
      GLSetupRead@1210190006 : Boolean;
      InventSetupRead@1210190005 : Boolean;
      SkipError@1100525002 : Boolean;
      VendorTradeItem@1100525003 : Code[20];
      ShowSalesDiscount@1100525005 : Boolean;
      "-EVRY-"@1100285003 : Integer;
      PriceListCode@1100285002 : Code[10];
      PriceHistFound@1100285001 : Boolean;
      PriceListVendorNo@1100285000 : Code[20];
      LatestCustGrossPrice@1100409000 : Decimal;
      "-ITERO-"@1100285005 : Integer;
      DontUseSingleGTIN@1100285004 : Boolean;
      gvFoundSalesDiscRef@1100285006 : Code[20];

    PROCEDURE ValidateItem@1(lvItemOpt@11012000 : 'Item,Basic Item,Trade Item,Trade Vendor';VAR TradeCde@11012001 : Code[20];VAR ItemCde@11012002 : Code[20];VAR ManufCde@11012003 : Code[20];VAR VendorCde@11012004 : Code[20];VAR BasicCde@11012005 : Code[20];VAR CostObject@11012006 : Code[20];VAR DescTxt@11012007 : Text[50];VAR UnitCde@11012008 : Code[10];VAR NettPrice@11012009 : Decimal;VAR DiscPerc@11012010 : Decimal;VAR ItemRefDate@11012011 : Date;VAR GrossPrice@11012012 : Decimal;VAR DescTxt2@1210190000 : Text[50];VAR CostComp@1100485000 : Code[10];DiscRef1@1100485003 : Code[20];DiscRef2@1100485002 : Code[20];PriceRefDate@1100485001 : Date;DiscPrio@1100525000 : Code[10]);
    BEGIN
      CASE lvItemOpt OF
        lvItemOpt::Item:
          BEGIN
            BasicCde := '';
            ManufCde := '';
            TradeCde := '';
            VendorCde := '';
            ValidateInventoryItem(TradeCde,ItemCde,ManufCde,VendorCde,BasicCde,CostObject,DescTxt,UnitCde,
                                  NettPrice,DiscPerc,ItemRefDate,GrossPrice,DescTxt2,CostComp,
                                  DiscRef1,DiscRef2,PriceRefDate,DiscPrio);
          END;
        lvItemOpt::"Basic Item":
          BEGIN
            ItemCde := '';
            //ManufCde := '';  //db, 17-11-04: M5517
            TradeCde := '';
            VendorCde := '';
            ValidateBasicItem(TradeCde,ItemCde,ManufCde,VendorCde,BasicCde,CostObject,DescTxt,UnitCde,
                              NettPrice,DiscPerc,ItemRefDate,GrossPrice,DescTxt2,CostComp,
                              DiscRef1,DiscRef2,PriceRefDate,DiscPrio);
          END;
        lvItemOpt::"Trade Item":
          BEGIN
            ItemCde := '';
            ValidateTradeItem(TradeCde,ItemCde,ManufCde,VendorCde,BasicCde,CostObject,DescTxt,UnitCde,
                              NettPrice,DiscPerc,ItemRefDate,GrossPrice,DescTxt2,CostComp,
                              DiscRef1,DiscRef2,PriceRefDate,DiscPrio);
          END;
        lvItemOpt::"Trade Vendor":
          BEGIN
            ValidateTradeVendor(TradeCde,ItemCde,ManufCde,VendorCde,BasicCde,CostObject,DescTxt,UnitCde,
                                NettPrice,DiscPerc,ItemRefDate,GrossPrice,DescTxt2,CostComp,
                                DiscRef1,DiscRef2,PriceRefDate,DiscPrio);
          END;
      END;
    END;

    PROCEDURE ValidateInventoryItem@2(VAR TradeCde@11012000 : Code[20];ItemCde@11012001 : Code[20];VAR ManufCde@11012002 : Code[20];VAR VendorCde@11012003 : Code[20];VAR BasicCde@11012004 : Code[20];VAR CostObject@11012005 : Code[20];VAR DescTxt@11012006 : Text[50];VAR UnitCde@11012007 : Code[10];VAR NettPrice@11012008 : Decimal;VAR DiscPerc@11012009 : Decimal;VAR ItemRefDate@11012010 : Date;VAR GrossPrice@11012011 : Decimal;VAR DescTxt2@1210190000 : Text[50];VAR CostComp@1100485000 : Code[10];DiscRef1@1100485009 : Code[20];DiscRef2@1100485008 : Code[20];PriceRefDate@1100485001 : Date;DiscPrio@1100525000 : Code[10]);
    VAR
      lvItemRec@1100485006 : Record 27;
      lvItemRelationRec@1100485007 : Record 11012319;
      lvTradeItemRec@1100525001 : Record 11012317;
      lvTradeItem@1100485005 : Code[20];
      lvVendor@1100485004 : Code[20];
      lvManufacturer@1100485003 : Code[20];
      lvBasicItem@1100485002 : Code[20];
      RelationLevel@1100525002 : Integer;
    BEGIN
      IF lvItemRec.GET(ItemCde) THEN BEGIN
        // Search through relation table if standard item exist as base-/trade item
        IF GetItemRelationsPresent THEN BEGIN  //call 23762
          lvItemRelationRec.RESET;
          lvItemRelationRec.SETCURRENTKEY("Navision Item");
          lvItemRelationRec.SETRANGE("Navision Item", ItemCde);
          lvItemRelationRec.SETRANGE("Expired (Trade Item)", FALSE);  //db, 08-11-12: C002132
          IF lvItemRelationRec.FINDFIRST THEN BEGIN
            lvVendor := lvItemRelationRec.Vendor;
            lvTradeItem := lvItemRelationRec."Trade Item";
            lvManufacturer := lvItemRelationRec.Manufacturer ;
            lvBasicItem := lvItemRelationRec."Basic Item" ;
            //db.sn, 25-03-13: 32565
            IF (VendorTradeItem <> lvVendor) AND (VendorTradeItem <> '') THEN BEGIN
              //db.sn, 15-08-13: C008837
              IF lvItemRelationRec."GTIN Code" = '' THEN
                RelationLevel := 1;
              //db.en, 15-08-13: C008837
              IF RelationLevel = 0 THEN BEGIN  //GTIN-code
                lvTradeItemRec.RESET;
                lvTradeItemRec.SETCURRENTKEY("GTIN Code (Item)");
                lvTradeItemRec.SETRANGE("GTIN Code (Item)", lvItemRelationRec."GTIN Code");
                lvTradeItemRec.SETRANGE(Vendor, VendorTradeItem);
                IF lvTradeItemRec.FINDFIRST THEN BEGIN
                  lvVendor := lvTradeItemRec.Vendor;
                  lvTradeItem := lvTradeItemRec."Item Code";
                  lvManufacturer := lvTradeItemRec.Manufacturer ;
                  lvBasicItem := lvTradeItemRec."Product Code" ;
                END ELSE BEGIN
                  RelationLevel := RelationLevel + 1;
                END;
              END;
              IF RelationLevel = 1 THEN
                IF (lvItemRelationRec.Manufacturer = '') OR (lvItemRelationRec."Basic Item" = '') THEN
                  RelationLevel := 2;  //db, 26-09-13: C009383
              IF RelationLevel = 1 THEN BEGIN  //Basic Item
                lvTradeItemRec.RESET;
                lvTradeItemRec.SETCURRENTKEY("Product Code", Manufacturer);
                lvTradeItemRec.SETRANGE("Product Code", lvItemRelationRec."Basic Item");
                lvTradeItemRec.SETRANGE(Manufacturer, lvItemRelationRec.Manufacturer);
                lvTradeItemRec.SETRANGE(Vendor, VendorTradeItem);
                IF lvTradeItemRec.FINDFIRST THEN BEGIN
                  lvVendor := lvTradeItemRec.Vendor;
                  lvTradeItem := lvTradeItemRec."Item Code";
                  lvManufacturer := lvTradeItemRec.Manufacturer ;
                  lvBasicItem := lvTradeItemRec."Product Code" ;
                END;
              END;
              lvItemRelationRec.Manufacturer := lvManufacturer;
              lvItemRelationRec."Basic Item" := lvBasicItem;
              lvItemRelationRec.Vendor := lvVendor;
              lvItemRelationRec."Trade Item" := lvTradeItem;
            END;
            //db.en, 25-03-13: 32565
            IF CheckPreferredVendor(lvTradeItem,ItemCde,lvManufacturer,lvVendor,lvBasicItem) THEN BEGIN
              lvItemRelationRec."Source Type" := lvItemRelationRec."Source Type"::"Trade Item";
              lvItemRelationRec.Manufacturer := lvManufacturer;
              lvItemRelationRec."Basic Item" := lvBasicItem;
              lvItemRelationRec.Vendor := lvVendor;
              lvItemRelationRec."Trade Item" := lvTradeItem;
            END;

            CASE lvItemRelationRec."Source Type" OF
              lvItemRelationRec."Source Type"::"Basic Item":
                BEGIN
                  IF BasicCde = '' THEN BEGIN
                    BasicCde := lvItemRelationRec."Basic Item";
                    ManufCde := lvItemRelationRec.Manufacturer;
                    ValidateBasicItem(TradeCde,ItemCde,ManufCde,VendorCde,BasicCde,CostObject,DescTxt,UnitCde,
                                      NettPrice,DiscPerc,ItemRefDate,GrossPrice,DescTxt2,CostComp,
                                      DiscRef1,DiscRef2,PriceRefDate,DiscPrio);
                  END;
                END;
              lvItemRelationRec."Source Type"::"Trade Item":
                BEGIN
                  IF TradeCde = '' THEN BEGIN
                    BasicCde := lvItemRelationRec."Basic Item";
                    ManufCde := lvItemRelationRec.Manufacturer;
                    TradeCde := lvItemRelationRec."Trade Item";
                    VendorCde := lvItemRelationRec.Vendor;
                    ValidateTradeItem(TradeCde,ItemCde,ManufCde,VendorCde,BasicCde,CostObject,DescTxt,UnitCde,
                                      NettPrice,DiscPerc,ItemRefDate,GrossPrice,DescTxt2,CostComp,
                                      DiscRef1,DiscRef2,PriceRefDate,DiscPrio);
                  END;
                END;
            END;
          END;
        END; //call 23762

        //db.sn, 20-12-11: M31760
        ItemCde := lvItemRec."No.";  //db, 11-06-10: M19596
        GetInventSetup; //call 23762
        IF (NOT InventSetup."Item Info Trade Item Leading") OR (TradeCde = '') THEN
          GetNavisionItemInfo(ItemCde, DescTxt, DescTxt2, CostObject, CostComp, FALSE);
        IF (NOT InventSetup."Price Info Trade Item Leading") OR (TradeCde = '') THEN //call 33754
          GetNavisionItemPrices(ItemCde, UnitCde, NettPrice, DiscPerc, GrossPrice, FALSE); //call 33754
        //db.en, 20-12-11: M31760
      END;
    END;

    PROCEDURE ValidateBasicItem@3(VAR TradeCde@11012000 : Code[20];VAR ItemCde@11012001 : Code[20];VAR ManufCde@11012002 : Code[20];VAR VendorCde@11012003 : Code[20];BasicCde@11012004 : Code[20];VAR CostObject@11012005 : Code[20];VAR DescTxt@11012006 : Text[50];VAR UnitCde@11012007 : Code[10];VAR NettPrice@11012008 : Decimal;VAR DiscPerc@11012009 : Decimal;VAR ItemRefDate@11012010 : Date;VAR GrossPrice@11012011 : Decimal;VAR DescTxt2@1210190000 : Text[50];VAR CostComp@1100485000 : Code[10];DiscRef1@1100485005 : Code[20];DiscRef2@1100485004 : Code[20];PriceRefDate@1100485003 : Date;DiscPrio@1100525000 : Code[10]);
    VAR
      lvItemRelationRec@1100485001 : Record 11012319;
      lvBasicItemRec@1100485002 : Record 11012316;
      lvPrefVendorRec@1210190001 : Record 11012318;
    BEGIN
      lvBasicItemRec.RESET;
      lvBasicItemRec.SETCURRENTKEY("Product Code", Manufacturer);
      lvBasicItemRec.SETRANGE("Product Code", BasicCde);
      IF ManufCde <> '' THEN BEGIN
        lvBasicItemRec.SETRANGE(Manufacturer, ManufCde);
        IF NOT lvBasicItemRec.FINDFIRST THEN BEGIN
          lvBasicItemRec.SETRANGE(Manufacturer);
        END;
      END;
      IF lvBasicItemRec.FINDFIRST THEN BEGIN
        ManufCde := lvBasicItemRec.Manufacturer;
        IF GetItemRelationsPresent THEN BEGIN //call 23762
          //mg.sn, 10-06-11: M26005
          IF (VendorCde = '') AND (TradeCde = '') THEN BEGIN
            lvPrefVendorRec.RESET;
            lvPrefVendorRec.SETCURRENTKEY(Manufacturer, "Basic Item");
            lvPrefVendorRec.SETRANGE(Manufacturer, ManufCde);
            lvPrefVendorRec.SETRANGE("Basic Item", BasicCde);
            lvPrefVendorRec.SETFILTER(Vendor, '<>%1', '');
            lvPrefVendorRec.SETFILTER("Trade Item", '<>%1', '');
            IF lvPrefVendorRec.FINDFIRST THEN BEGIN
              VendorCde := lvPrefVendorRec.Vendor;
              TradeCde := lvPrefVendorRec."Trade Item";
            END;
          END;
          //mg.en, 10-06-11: M26005
          lvItemRelationRec.RESET;
          lvItemRelationRec.SETCURRENTKEY(Manufacturer, "Basic Item");
          lvItemRelationRec.SETRANGE(Manufacturer, lvBasicItemRec.Manufacturer);
          lvItemRelationRec.SETRANGE("Basic Item", lvBasicItemRec."Product Code");
          lvItemRelationRec.SETRANGE("Source Type", lvItemRelationRec."Source Type"::"Basic Item");
          lvItemRelationRec.SETRANGE("GTIN Code", lvBasicItemRec."GTIN Code");
          IF lvItemRelationRec.FINDFIRST THEN
            ItemCde := lvItemRelationRec."Navision Item";
        END; //call 23762

        IF GetBasicItemOnly THEN EXIT; //call 23762

        CostObject := lvBasicItemRec."Cost Object";
        GetCostComponent(CostObject, CostComp);
        DescTxt := lvBasicItemRec."Product Description";
        DescTxt2 := lvBasicItemRec."Product Description 2";
        GetNavisionItemInfo(ItemCde, DescTxt, DescTxt2, CostObject, CostComp, TRUE);  //db, 20-12-11: M31760

        GetPriceBasicItem(lvBasicItemRec, PriceRefDate, DiscRef1, DiscRef2, DiscPrio, FALSE);
        UnitCde := lvBasicItemRec."Application Unit";
        ItemRefDate := lvBasicItemRec."Price Reference Date";
        DiscPerc := lvBasicItemRec."Discount Percentage";
        IF lvBasicItemRec."Qty. per Unit of Measure" <> 0 THEN BEGIN
          NettPrice := lvBasicItemRec."Nett Price" / lvBasicItemRec."Qty. per Unit of Measure";
          GrossPrice := lvBasicItemRec."Gross Price" / lvBasicItemRec."Qty. per Unit of Measure";
        END ELSE BEGIN
          NettPrice := lvBasicItemRec."Nett Price";
          GrossPrice := lvBasicItemRec."Gross Price";
        END;
      END;
    END;

    PROCEDURE ValidateTradeItem@4(VAR TradeCde@11012000 : Code[20];VAR ItemCde@11012001 : Code[20];VAR ManufCde@11012002 : Code[20];VAR VendorCde@11012003 : Code[20];VAR BasicCde@11012004 : Code[20];VAR CostObject@11012005 : Code[20];VAR DescTxt@11012006 : Text[50];VAR UnitCde@11012007 : Code[10];VAR NettPrice@11012008 : Decimal;VAR Discperc@11012009 : Decimal;VAR ItemRefDate@11012010 : Date;VAR GrossPrice@11012011 : Decimal;VAR DescTxt2@1210190000 : Text[50];VAR CostComp@1100485000 : Code[10];DiscRef1@1100485007 : Code[20];DiscRef2@1100485006 : Code[20];PriceRefDate@1100485005 : Date;DiscPrio@1100525000 : Code[10]);
    VAR
      lvPrefVendorRec@1100485001 : Record 11012318;
      lvItemRelationRec@1100485002 : Record 11012319;
      lvBasicItemRec@1100485003 : Record 11012316;
      lvTradeItemRec@1100485004 : Record 11012317;
      lvItemVendor@1100525001 : Record 99;
      ItemRelationFound@1100409000 : Boolean;
    BEGIN
      // - VAR-parameter switched on for vendor-item in this function
      // - searchfunction changed: existing option (manual input vendor-item) extended with
      //   possibility to return vendor-item after changing vendor.

      lvTradeItemRec.RESET;
      IF TradeCde <> '' THEN BEGIN
        BasicCde := '';
        ManufCde := '';
        lvTradeItemRec.SETCURRENTKEY("Item Code");
        lvTradeItemRec.SETRANGE("Item Code", TradeCde);
        lvTradeItemRec.SETRANGE(Vendor, VendorCde);
        //IF NOT lvTradeItemRec.FINDFIRST THEN BEGIN
        //  VendorCde := '';
        //  lvTradeItemRec.SETRANGE(Vendor);
        //END;
        //this occurs when user selects vendor-item by zoom or manual input.
        //program is searching for vendor related vendor-item, based on (abusive) condition of no duplicate value for vendor-item.
      END ELSE BEGIN
        //db, 18-04-07: this variant not used anymore since 22-11-06; replaced by ValidateTradeVendor
        lvTradeItemRec.SETCURRENTKEY("Product Code");
        lvTradeItemRec.SETRANGE("Product Code", BasicCde);
        lvTradeItemRec.SETRANGE(Manufacturer, ManufCde);
        lvTradeItemRec.SETRANGE(Vendor, VendorCde);
        //this occurs when user selects another vendor for existing item.
        //clear vendor-item when function called  (for example adviced purchase-orders).
      END;
      IF lvTradeItemRec.FINDFIRST THEN BEGIN
        IF VendorCde = '' THEN
          VendorCde := lvTradeItemRec.Vendor;
        IF TradeCde = '' THEN
          TradeCde := lvTradeItemRec."Item Code";
        //db, 31-05-05: first check Item Relation based on Trade Item, second on Basic Item and EAN-code
        IF lvBasicItemRec.GET(lvTradeItemRec.Manufacturer, lvTradeItemRec."Product Code") THEN BEGIN
          ManufCde := lvTradeItemRec.Manufacturer;
          BasicCde := lvTradeItemRec."Product Code";
          GetBasicItemOnly := TRUE; //call 23762
          ValidateBasicItem(TradeCde,ItemCde,ManufCde,VendorCde,BasicCde,CostObject,DescTxt,UnitCde,
                            NettPrice,Discperc,ItemRefDate,GrossPrice,DescTxt2,CostComp,
                            DiscRef1,DiscRef2,PriceRefDate,DiscPrio);
          GetBasicItemOnly := FALSE; //call 23762
        END;

        lvPrefVendorRec.RESET;
        lvPrefVendorRec.SETCURRENTKEY(Vendor, "Trade Item");
        lvPrefVendorRec.SETRANGE(Vendor, VendorCde);
        lvPrefVendorRec.SETRANGE("Trade Item", TradeCde);
        lvPrefVendorRec.SETFILTER("Navision Item", '<>%1', '');
        IF lvPrefVendorRec.FINDFIRST THEN BEGIN
          ItemCde := lvPrefVendorRec."Navision Item";
        END ELSE BEGIN
          IF GetItemRelationsPresent THEN BEGIN //call 23762
            lvItemRelationRec.RESET;
            lvItemRelationRec.SETCURRENTKEY(Vendor, "Trade Item");
            lvItemRelationRec.SETRANGE(Vendor, VendorCde);
            lvItemRelationRec.SETRANGE("Trade Item", TradeCde);
            IF lvItemRelationRec.FINDFIRST THEN BEGIN
              ItemCde := lvItemRelationRec."Navision Item";
              ItemRelationFound := TRUE;  //db, 14-12-12: 32565
            END;
            //db.sn, 14-12-12: 32565
            IF NOT ItemRelationFound THEN BEGIN
              IF lvTradeItemRec."GTIN Code (Item)" <> '' THEN BEGIN
                lvItemRelationRec.RESET;
                lvItemRelationRec.SETCURRENTKEY("GTIN Code");
                lvItemRelationRec.SETRANGE("GTIN Code", lvTradeItemRec."GTIN Code (Item)");
      //>>150608, SYM086
                IF DontUseSingleGTIN THEN
                  lvItemRelationRec.SETRANGE(Vendor, VendorCde);
      //<<150608
                IF lvItemRelationRec.FINDFIRST THEN BEGIN
                  ItemCde := lvItemRelationRec."Navision Item";
                  ItemRelationFound := TRUE;
                END;
              END;
            END;
            IF NOT ItemRelationFound THEN BEGIN
              IF (lvTradeItemRec."Product Code" <> '') AND (lvTradeItemRec.Manufacturer <> '') THEN BEGIN
                lvItemRelationRec.RESET;
                lvItemRelationRec.SETCURRENTKEY(Manufacturer, "Basic Item");
                lvItemRelationRec.SETRANGE("Basic Item", lvTradeItemRec."Product Code");
                lvItemRelationRec.SETRANGE(Manufacturer, lvTradeItemRec.Manufacturer);
                IF lvItemRelationRec.FINDFIRST THEN BEGIN
                  ItemCde := lvItemRelationRec."Navision Item";
                  ItemRelationFound := TRUE;
                END;
              END;
            END;
            //db.en, 14-12-12: 32565
          END; //call 23762
        END;
        IF ItemCde = '' THEN BEGIN
          lvItemVendor.SETRANGE("Vendor Item No.",TradeCde);
          IF lvItemVendor.FINDFIRST THEN
            ItemCde := lvItemVendor."Item No.";
        END;

        CostObject := lvTradeItemRec."Cost Object";
        GetCostComponent(CostObject, CostComp);
        DescTxt := lvTradeItemRec."Item Description";
        DescTxt2 := lvTradeItemRec."Item Description 2";
        GetNavisionItemInfo(ItemCde, DescTxt, DescTxt2, CostObject, CostComp, TRUE);  //db, 20-12-11: M31760

        GetPriceTradeItem(lvTradeItemRec, PriceRefDate, DiscRef1, DiscRef2, DiscPrio);
        UnitCde := lvTradeItemRec."Application Unit";
        ItemRefDate := lvTradeItemRec."Price Reference Date";
        Discperc := lvTradeItemRec."Discount Percentage";
        IF lvTradeItemRec."Qty. per Unit of Measure" <> 0 THEN BEGIN
          NettPrice := lvTradeItemRec."Nett Price" / lvTradeItemRec."Qty. per Unit of Measure";
          GrossPrice := lvTradeItemRec."Gross Price" / lvTradeItemRec."Qty. per Unit of Measure";
        END ELSE BEGIN
          NettPrice := lvTradeItemRec."Nett Price";
          GrossPrice := lvTradeItemRec."Gross Price";
        END;
        GetNavisionItemPrices(ItemCde, UnitCde, NettPrice, Discperc, GrossPrice, TRUE); //call 33754

      END;
    END;

    PROCEDURE ValidateTradeVendor@1210190003(VAR TradeCde@11012000 : Code[20];VAR ItemCde@11012001 : Code[20];VAR ManufCde@11012002 : Code[20];VAR VendorCde@11012003 : Code[20];VAR BasicCde@11012004 : Code[20];VAR CostObject@11012005 : Code[20];VAR DescTxt@11012006 : Text[50];VAR UnitCde@11012007 : Code[10];VAR NettPrice@11012008 : Decimal;VAR DiscPerc@11012009 : Decimal;VAR ItemRefDate@11012010 : Date;VAR GrossPrice@11012011 : Decimal;VAR DescTxt2@1210190000 : Text[50];VAR CostComp@1100485000 : Code[10];DiscRef1@1100485007 : Code[20];DiscRef2@1100485006 : Code[20];PriceRefDate@1100485005 : Date;DiscPrio@1100525000 : Code[10]);
    VAR
      lvPrefVendorRec@1100485001 : Record 11012318;
      lvItemRelationRec@1100485002 : Record 11012319;
      lvBasicItemRec@1100485003 : Record 11012316;
      lvTradeItemRec@1100485004 : Record 11012317;
    BEGIN
      //this occurs when user selects another vendor for existing item.
      lvTradeItemRec.RESET;
      lvTradeItemRec.SETCURRENTKEY("Product Code");
      lvTradeItemRec.SETRANGE("Product Code", BasicCde);
      lvTradeItemRec.SETRANGE(Manufacturer, ManufCde);
      lvTradeItemRec.SETRANGE(Vendor, VendorCde);
      lvTradeItemRec.SETRANGE(Expired, FALSE);
      IF lvTradeItemRec.FINDFIRST THEN BEGIN
        TradeCde := lvTradeItemRec."Item Code";
        IF lvBasicItemRec.GET(lvTradeItemRec.Manufacturer, lvTradeItemRec."Product Code") THEN BEGIN
          lvPrefVendorRec.RESET;
          lvPrefVendorRec.SETCURRENTKEY(Vendor, "Trade Item");
          lvPrefVendorRec.SETRANGE(Vendor, VendorCde);
          lvPrefVendorRec.SETRANGE("Trade Item", TradeCde);
          lvPrefVendorRec.SETFILTER("Navision Item", '<>%1', '');
          IF lvPrefVendorRec.FINDFIRST THEN BEGIN
            ItemCde := lvPrefVendorRec."Navision Item";
          END ELSE BEGIN
            IF GetItemRelationsPresent THEN BEGIN //call 23762
              lvItemRelationRec.RESET;
              lvItemRelationRec.SETCURRENTKEY(Manufacturer, "Basic Item");
              lvItemRelationRec.SETRANGE(Manufacturer, lvBasicItemRec.Manufacturer);
              lvItemRelationRec.SETRANGE("Basic Item", lvBasicItemRec."Product Code");
              lvItemRelationRec.SETRANGE(Vendor, VendorCde);
              lvItemRelationRec.SETRANGE("Trade Item", TradeCde);
              IF lvItemRelationRec.FINDFIRST THEN BEGIN
                ItemCde := lvItemRelationRec."Navision Item";
              END ELSE BEGIN
                lvItemRelationRec.SETRANGE(Vendor);
                lvItemRelationRec.SETRANGE("Trade Item");
                IF lvItemRelationRec.FINDSET THEN BEGIN
                  REPEAT
                    IF (lvItemRelationRec."GTIN Code" <> '') AND
                     //(lvItemRelationRec."Item Vendor" = '') AND
                       (lvItemRelationRec."Source Type" = lvItemRelationRec."Source Type"::"Basic Item") AND
                       (lvItemRelationRec."Navision Item" = ItemCde) THEN
                    BEGIN
                      lvTradeItemRec.RESET;
                      lvTradeItemRec.SETCURRENTKEY("GTIN Code (Item)");
                      lvTradeItemRec.SETRANGE("GTIN Code (Item)",lvItemRelationRec."GTIN Code");
                      lvTradeItemRec.SETRANGE(Vendor,VendorCde);
                      IF lvTradeItemRec.FINDFIRST THEN
                        TradeCde := lvTradeItemRec."Item Code";
                    END;
                  UNTIL lvItemRelationRec.NEXT = 0;
                END;
              END;
            END; //call 23762
          END;
        END;

        CostObject := lvTradeItemRec."Cost Object";
        GetCostComponent(CostObject, CostComp);
        DescTxt := lvTradeItemRec."Item Description";
        DescTxt2 := lvTradeItemRec."Item Description 2";
        GetNavisionItemInfo(ItemCde, DescTxt, DescTxt2, CostObject, CostComp, TRUE);  //db, 20-12-11: M31760

        GetPriceTradeItem(lvTradeItemRec, PriceRefDate, DiscRef1, DiscRef2, DiscPrio);
        UnitCde := lvTradeItemRec."Application Unit";
        ItemRefDate := lvTradeItemRec."Price Reference Date";
        DiscPerc := lvTradeItemRec."Discount Percentage";
        IF lvTradeItemRec."Qty. per Unit of Measure" <> 0 THEN BEGIN
          NettPrice := lvTradeItemRec."Nett Price" / lvTradeItemRec."Qty. per Unit of Measure";
          GrossPrice := lvTradeItemRec."Gross Price" / lvTradeItemRec."Qty. per Unit of Measure";
        END ELSE BEGIN
          NettPrice := lvTradeItemRec."Nett Price";
          GrossPrice := lvTradeItemRec."Gross Price";
        END;
        GetNavisionItemPrices(ItemCde, UnitCde, NettPrice, DiscPerc, GrossPrice, TRUE); //call 33754

      END ELSE BEGIN
        DescTxt := PADSTR('', MAXSTRLEN(DescTxt), '*');
        DescTxt2 := PADSTR('', MAXSTRLEN(DescTxt2), '*');
      END;
    END;

    PROCEDURE CheckPreferredVendor@1100485001(VAR TradeCde@11012000 : Code[20];VAR ItemCde@11012001 : Code[20];VAR ManufCde@11012002 : Code[20];VAR VendorCde@11012003 : Code[20];VAR BasicCde@11012004 : Code[20]) : Boolean;
    VAR
      lvTradeItemRec@1100485001 : Record 11012317;
      lvPrefVendorRec@1100485000 : Record 11012318;
    BEGIN
      //jth, 02-04-07
      lvPrefVendorRec.RESET;
      lvPrefVendorRec.SETCURRENTKEY(Type, "Navision Item", Manufacturer, "Basic Item");
      IF ItemCde <> '' THEN BEGIN
        lvPrefVendorRec.SETRANGE(Type, lvPrefVendorRec.Type::"Navision Item");
        lvPrefVendorRec.SETRANGE("Navision Item", ItemCde);
      END ELSE BEGIN
        IF (ManufCde = '') AND (BasicCde = '') THEN
          EXIT(FALSE);
        lvPrefVendorRec.SETRANGE(Type, lvPrefVendorRec.Type::"Basic Item");
        lvPrefVendorRec.SETRANGE("Navision Item");
        lvPrefVendorRec.SETRANGE(Manufacturer, ManufCde);
        lvPrefVendorRec.SETRANGE("Basic Item", BasicCde);
      END;
      lvPrefVendorRec.SETFILTER("Trade Item", '<>%1', '');
      lvPrefVendorRec.SETFILTER(Vendor, '<>%1', '');

      IF lvPrefVendorRec.FINDFIRST THEN BEGIN
        IF lvTradeItemRec.GET(lvPrefVendorRec.Vendor, lvPrefVendorRec."Trade Item") THEN BEGIN
          ManufCde  := lvTradeItemRec.Manufacturer;
          BasicCde  := lvTradeItemRec."Product Code";
          VendorCde := lvTradeItemRec.Vendor;
          TradeCde  := lvTradeItemRec."Item Code";
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetSalesDiscount@1210190000(lvCust@1210190002 : Code[20];lvItem@1210190011 : Code[20];lvBasicItem@1210190008 : Code[20];lvTradeItem@1210190012 : Code[20];lvManufacturer@1210190006 : Code[20];lvVendor@1210190005 : Code[20];VAR NettPrice@1210190004 : Decimal;VAR DiscPerc@1210190003 : Decimal;GrossPrice@1210190001 : Decimal;lvRefDate@1100485000 : Date;lvCustDiscGrp@1100485002 : Code[20];lvDiscRef1@1100525003 : Code[20];lvDiscRef2@1100525002 : Code[20];lvDiscPrio@1100525000 : Code[10]) : Boolean;
    VAR
      lvVendorRec@1100485004 : Record 11012304;
      lvItemRec@1100485009 : Record 27;
      lvTradeItemRec@1100485007 : Record 11012317;
      lvBasicItemRec@1100485008 : Record 11012316;
      lvItemRelationRec@1100409000 : Record 11012319;
      CustLevl@1210190010 : Integer;
      ItemLevl@1100485001 : Integer;
      CustPriceGrp@1100530000 : Code[20];
      CustDiscGrp@1210190009 : Code[20];
      ItemDiscGrp@1210190014 : Code[20];
      DefCust@1100485003 : Code[20];
      DiscPrice@1100525008 : Decimal;
      SalesPrice@1100525001 : Decimal;
      SalesDisc@1100525004 : Decimal;
      MaxCustLevl@1100525005 : Integer;
      MaxItemLevl@1100525006 : Integer;
      DiscFound@1100525007 : Boolean;
      PriceFound@1210190000 : Boolean;
      lvPriceHistRec@1100409001 : Record 11012315;
    BEGIN
      //db, 28-12-09: M16871
      IF lvItem + lvBasicItem + lvTradeItem = '' THEN EXIT;  //for cost object no discountgroup defined.

      GetGLSetup; //call 23762
      GetInventSetup; //call 23762
      DefCust := InventSetup."Default Customer";

      CustLevl := 0;
      ItemLevl := 0;
      DiscPerc := 0;
      MaxCustLevl := 1;
      MaxItemLevl := 2;
      NettPrice := GrossPrice;
      gvFoundSalesDiscRef := '';
      IF InventSetup."Use UnitPrice at ItemRelation" THEN BEGIN  //db, 14-10-14: C010501
        IF (lvItem <> '') AND (lvTradeItem <> '') THEN
          IF lvItemRelationRec.GET(lvItem) THEN
            ItemLevl := 2;  //ignore discount TradeItem and only check NavItem (price+discount)
        IF ItemLevl = 2 THEN BEGIN
          lvItemRec.GET(lvItem);
          NettPrice := lvItemRec."Unit Price";
        END;
      END;

      //>> ANCA 150527 IME-355
      IF (PriceListCode <> '' ) THEN BEGIN
        lvPriceHistRec.SETCURRENTKEY("Item Code", "Starting Date", "Price List Code");
        lvPriceHistRec.SETRANGE("Item Code", lvTradeItem);
        lvPriceHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
        lvPriceHistRec.SETRANGE("Price List Code",PriceListCode);

        IF lvPriceHistRec.FINDLAST THEN BEGIN
          lvVendor := lvPriceHistRec.Vendor;
          LatestCustGrossPrice := lvPriceHistRec."Gross Price";
          PriceHistFound := TRUE;
          PriceListVendorNo := lvPriceHistRec.Vendor;
        END ELSE BEGIN
          LatestCustGrossPrice := GrossPrice;
        END;
      END ELSE BEGIN
        LatestCustGrossPrice := GrossPrice;  //150912 ITERO.AC IME413
      END;
      //<< IME-355

      REPEAT  //check both discount levels on sequence Trade-Basic-Navision Item
        REPEAT
          IF CustLevl = 0 THEN
            IF NOT GetCust(lvCust) THEN  //call 23762
              CustLevl := 1;  //for dummy contract without customer
          IF CustLevl = 1 THEN
            IF NOT GetCust(DefCust) THEN; //call 23762
          IF (lvCustDiscGrp <> '') THEN  //db, 31-10-13: DP00260 (12501)
            CustDiscGrp := lvCustDiscGrp  //preselected CustGrp (estimate)
          ELSE
            CustDiscGrp := Cust."Customer Disc. Group";
          CustPriceGrp := Cust."Customer Price Group";  //db, 10-01-11: M22235

          IF (lvTradeItem <> '') AND (lvVendor <> '') AND (ItemLevl = 0) THEN BEGIN
            IF lvTradeItemRec.GET(lvVendor, lvTradeItem) THEN BEGIN
              IF EvaluateSalesDiscount(lvTradeItemRec, DiscPrice, DiscPerc, GrossPrice, lvCust, CustDiscGrp,
                lvRefDate, lvDiscRef1, lvDiscRef2, lvDiscPrio) THEN
                gvFoundSalesDiscRef := lvDiscRef1;  // 150914 ITERO.AC RFC001-2
                DiscFound := TRUE;
            END;
          END;

          IF (lvBasicItem <> '') AND (lvManufacturer <> '') AND (ItemLevl = 1) AND
             (lvTradeItem = '') AND (lvVendor = '') THEN BEGIN   //db, 18-01-11: M24622
            IF lvTradeItemRec.GET(lvManufacturer, lvBasicItem) THEN BEGIN
              IF EvaluateSalesDiscount(lvTradeItemRec, DiscPrice, DiscPerc, GrossPrice, lvCust, CustDiscGrp,
                lvRefDate, lvDiscRef1, lvDiscRef2, lvDiscPrio) THEN
                DiscFound := TRUE;
            END;
            IF NOT lvVendorRec.GET(lvManufacturer) THEN
              lvVendorRec.INIT
            ELSE
              lvVendorRec.CALCFIELDS("Vendor (Price/Discount)");
            IF lvVendorRec."Vendor (Price/Discount)" <> '' THEN BEGIN
              lvTradeItemRec.RESET;
              lvTradeItemRec.SETCURRENTKEY("Product Code");
              lvTradeItemRec.SETRANGE("Product Code", lvBasicItem);
              lvTradeItemRec.SETRANGE(Manufacturer, lvManufacturer);
              lvTradeItemRec.SETRANGE(Vendor, lvVendorRec."Vendor (Price/Discount)");
              IF lvTradeItemRec.FINDFIRST THEN BEGIN
                IF EvaluateSalesDiscount(lvTradeItemRec, DiscPrice, DiscPerc, GrossPrice, lvCust, CustDiscGrp,
                  lvRefDate, lvDiscRef1, lvDiscRef2, lvDiscPrio) THEN
                  DiscFound := TRUE;
              END;
            END;
            IF lvBasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BEGIN
              lvTradeItemRec.RESET;
              lvTradeItemRec.SETCURRENTKEY("Product Code");
              lvTradeItemRec.SETRANGE("Product Code", lvBasicItem);
              lvTradeItemRec.SETRANGE(Manufacturer, lvManufacturer);
              lvTradeItemRec.SETRANGE("GTIN Code (Item)", lvBasicItemRec."GTIN Code");
              IF lvTradeItemRec.FINDFIRST THEN BEGIN
                IF EvaluateSalesDiscount(lvTradeItemRec, DiscPrice, DiscPerc, GrossPrice, lvCust, CustDiscGrp,
                  lvRefDate, lvDiscRef1, lvDiscRef2, lvDiscPrio) THEN
                  DiscFound := TRUE;
              END;
            END;
          END;

          IF (lvItem <> '') AND (ItemLevl = 2) THEN BEGIN
            //db.sn, 27-05-10: M17900
            IF GetSalesPriceItem(lvCust, CustPriceGrp, lvItem, lvRefDate, SalesPrice) THEN BEGIN //db, 10-01-11: M22235
              IF NOT PriceFound THEN BEGIN  //db, 04-03-11: M23882
                NettPrice := SalesPrice;
              END ELSE BEGIN
                IF SalesPrice < NettPrice THEN
                  NettPrice := SalesPrice;
              END;
              PriceFound := TRUE;
            END;
            //db.en, 27-05-10: M17900
            IF DiscountPercItemPresent(lvCust, CustDiscGrp, lvItem, lvRefDate, DiscPerc) THEN BEGIN
              //DiscPrice := ((100 - DiscPerc)/100 ) * GrossPrice;
              DiscFound := TRUE;
            END ELSE BEGIN
              IF lvItemRec.GET(lvItem) THEN BEGIN
                ItemDiscGrp := lvItemRec."Item Disc. Group";
                IF DiscountPercItemGroupPresent(lvCust, CustDiscGrp, ItemDiscGrp, lvRefDate, DiscPerc) THEN BEGIN
                  //DiscPrice := ((100 - DiscPerc)/100 ) * GrossPrice;
                  DiscFound := TRUE;
                END;
              END;
            END;
          END;
          CustLevl := CustLevl + 1;
        UNTIL (CustLevl > MaxCustLevl) OR DiscFound;
        CustLevl := 0;
        ItemLevl := ItemLevl + 1;
      UNTIL (ItemLevl > MaxItemLevl) OR DiscFound;

      DiscPrice := ((100 - DiscPerc)/100 ) * NettPrice;
      IF GrossPrice <> 0 THEN BEGIN
        DiscPerc := ((GrossPrice - DiscPrice) / GrossPrice) * 100;
        NettPrice := ((100 - DiscPerc)/100 ) * GrossPrice;
      END ELSE BEGIN
        NettPrice := DiscPrice;
      END;

      EXIT(DiscFound OR PriceFound);  //db, 27-05-14: C015604
    END;

    PROCEDURE DiscountPercItemGroupPresent@1210190004(lvCust@1100525001 : Code[20];lvCustGrp@1210190001 : Code[20];lvItemGrp@1210190000 : Code[20];lvRefDate@1100525000 : Date;VAR DiscPerc@1210190003 : Decimal) : Boolean;
    VAR
      lvSalesDiscRec@1210190002 : Record 7004;
    BEGIN
      WITH lvSalesDiscRec DO BEGIN
        SETRANGE(Type, Type::"Item Disc. Group");
        SETRANGE(Code, lvItemGrp);
        //db.sn, 27-05-10: M17900
        SETRANGE("Sales Type", "Sales Type"::Customer);
        SETRANGE("Sales Code", lvCust);
        //db.en, 27-05-10: M17900
        SETRANGE("Starting Date", 0D, lvRefDate);
        SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);
        SETFILTER("Minimum Quantity", '..%1', ABS(QuanDec));  //db, 28-12-09: M16871 //mg.c, 21-09-11: M29206
        IF FINDLAST THEN BEGIN
          DiscPerc := "Line Discount %";
          IF ShowSalesDiscount THEN
            PAGE.RUNMODAL(0, lvSalesDiscRec);  //db, 27-05-14: C015604
          EXIT(TRUE);
        END ELSE BEGIN
          //db.sn, 27-05-10: M17900
          SETRANGE("Sales Type", "Sales Type"::"Customer Disc. Group");
          SETRANGE("Sales Code", lvCustGrp);
          IF FINDLAST THEN BEGIN
            DiscPerc := "Line Discount %";
            IF ShowSalesDiscount THEN
              PAGE.RUNMODAL(0, lvSalesDiscRec);  //db, 27-05-14: C015604
            EXIT(TRUE);
          END ELSE BEGIN
            SETRANGE("Sales Type", "Sales Type"::"All Customers");
            SETFILTER("Sales Code", '%1', '');
            IF FINDLAST THEN BEGIN
              DiscPerc := "Line Discount %";
              IF ShowSalesDiscount THEN
                PAGE.RUNMODAL(0, lvSalesDiscRec);  //db, 27-05-14: C015604
              EXIT(TRUE);
            END;
          END;
          //db.en, 27-05-10: M17900
        END;
      END;

      DiscPerc := 0;
      EXIT(FALSE);
    END;

    PROCEDURE DiscountPercItemPresent@1100485000(lvCust@1100485003 : Code[20];lvCustGrp@1100525000 : Code[20];lvItem@1100485002 : Code[20];lvRefDate@1100485001 : Date;VAR DiscPerc@1100485000 : Decimal) : Boolean;
    VAR
      lvSalesDiscRec@1210190002 : Record 7004;
    BEGIN
      WITH lvSalesDiscRec DO BEGIN
        SETRANGE(Type, Type::Item);
        SETRANGE(Code, lvItem);
        SETRANGE("Sales Type", "Sales Type"::Customer);
        SETRANGE("Sales Code", lvCust);
        SETRANGE("Starting Date", 0D, lvRefDate);
        SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);
        SETFILTER("Minimum Quantity", '..%1', ABS(QuanDec));  //db, 28-12-09: M16871 //mg.c, 21-09-11: M29206
        IF FINDLAST THEN BEGIN
          DiscPerc := "Line Discount %";
          IF ShowSalesDiscount THEN
            PAGE.RUNMODAL(0, lvSalesDiscRec);  //db, 27-05-14: C015604
          EXIT(TRUE);
        END ELSE BEGIN
          //db.sn, 27-05-10: M17900
          SETRANGE("Sales Type", "Sales Type"::"Customer Disc. Group");
          SETRANGE("Sales Code", lvCustGrp);
          IF FINDLAST THEN BEGIN
            DiscPerc := "Line Discount %";
            IF ShowSalesDiscount THEN
              PAGE.RUNMODAL(0, lvSalesDiscRec);  //db, 27-05-14: C015604
            EXIT(TRUE);
          END ELSE BEGIN
            SETRANGE("Sales Type", "Sales Type"::"All Customers");
            SETFILTER("Sales Code", '%1', '');
            IF FINDLAST THEN BEGIN
              DiscPerc := "Line Discount %";
              IF ShowSalesDiscount THEN
                PAGE.RUNMODAL(0, lvSalesDiscRec);  //db, 27-05-14: C015604
              EXIT(TRUE);
            END;
          END;
          //db.en, 27-05-10: M17900
        END;
      END;

      DiscPerc := 0;
      EXIT(FALSE);
    END;

    PROCEDURE GetSalesPriceItem@1210190010(lvCust@1100485002 : Code[20];lvCustGrp@1100525000 : Code[20];lvItem@1100485001 : Code[20];lvRefDate@1100485000 : Date;VAR SalesPrice@1210190000 : Decimal) : Boolean;
    VAR
      lvSalesPriceRec@1210190001 : Record 7002;
    BEGIN
      //db, 28-12-09: M16871
      WITH lvSalesPriceRec DO BEGIN
        SETRANGE("Item No.", lvItem);
        SETRANGE("Sales Type", "Sales Type"::Customer);
        SETRANGE("Sales Code", lvCust);
        SETRANGE("Starting Date", 0D, lvRefDate);
        SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);
        SETFILTER("Minimum Quantity", '..%1', ABS(QuanDec)); //mg.c, 21-09-11: M29206
        IF FINDLAST THEN BEGIN
          SalesPrice := "Unit Price";
          IF ShowSalesDiscount THEN
            PAGE.RUNMODAL(0, lvSalesPriceRec);  //db, 27-05-14: C015604
          EXIT(TRUE);
        END ELSE BEGIN
          //db.sn, 27-05-10: M17900
          SETRANGE("Sales Type", "Sales Type"::"Customer Price Group");
          SETRANGE("Sales Code", lvCustGrp);
          IF FINDLAST THEN BEGIN
            SalesPrice := "Unit Price";
            IF ShowSalesDiscount THEN
              PAGE.RUNMODAL(0, lvSalesPriceRec);  //db, 27-05-14: C015604
            EXIT(TRUE);
          END ELSE BEGIN
            SETRANGE("Sales Type", "Sales Type"::"All Customers");
            SETFILTER("Sales Code", '%1', '');
            IF FINDLAST THEN BEGIN
              SalesPrice := "Unit Price";
              IF ShowSalesDiscount THEN
                PAGE.RUNMODAL(0, lvSalesPriceRec);  //db, 27-05-14: C015604
              EXIT(TRUE);
            END;
          END;
          //db.en, 27-05-10: M17900
        END;
      END;

      SalesPrice := 0;
      EXIT(FALSE);
    END;

    PROCEDURE ValidateUnit@1210190002(lvItemOpt@11012000 : 'Item,Basic Item,Trade Item,,Trade Vendor';lvItem@11012001 : Code[20];lvBasicItem@11012002 : Code[20];lvTradeItem@11012003 : Code[20];lvManufacturer@11012005 : Code[20];lvVendor@11012006 : Code[20];VAR QuanDec@11012009 : Decimal;lvUnit@1210190000 : Code[10];VAR FactDec@1210190002 : Decimal);
    VAR
      lvitemRec@1100485003 : Record 27;
      lvItemUnitRec@1210190003 : Record 5404;
      lvBasicItemRec@1100485002 : Record 11012316;
      lvTradeItemRec@1100485001 : Record 11012317;
      QuanOld@1210190001 : Decimal;
      FactOld@1210190004 : Decimal;
      lvText000@1100485000 : TextConst 'ENU=Unit is %7, only switch between %1 %2 and %3 %4 supported for %5 %6.';
    BEGIN
      QuanOld := QuanDec;
      FactOld := FactDec;

      IF lvItemOpt <> lvItemOpt::Item THEN BEGIN  //db, 10-02-05: M6225
        ItemSetup.GET;
        IF ItemSetup."Check Price/Quantity by Unit" <> ItemSetup."Check Price/Quantity by Unit"::Convert THEN EXIT;
      END;

      CASE lvItemOpt OF
        lvItemOpt::Item:
          BEGIN
            IF lvitemRec.GET(lvItem) THEN BEGIN
              //db, 26-04-07: first switch to Base Unit
              IF FactOld <> 0 THEN BEGIN
                QuanDec := QuanDec * FactOld;
                FactDec := FactDec / FactOld;
              END;
              IF NOT lvItemUnitRec.GET(lvItem, lvUnit) THEN
                lvItemUnitRec.INIT;
              IF lvItemUnitRec."Qty. per Unit of Measure" <> 0 THEN BEGIN
                QuanDec := QuanDec / lvItemUnitRec."Qty. per Unit of Measure";
                FactDec := FactDec * lvItemUnitRec."Qty. per Unit of Measure";
              END;
              //mg.sn, 30-09-11: M28653
              IF QuanOld <> QuanDec THEN
                QuanDec := ROUND(QuanDec, 1, '>');
              //mg.en, 30-09-11: M28653
            END;
          END;
        lvItemOpt::"Basic Item":
          BEGIN
            IF lvBasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BEGIN
              IF lvBasicItemRec."Qty. per Unit of Measure" = 0 THEN
                lvBasicItemRec."Qty. per Unit of Measure" := 1;
              IF lvUnit = UPPERCASE(lvBasicItemRec."Application Unit") THEN BEGIN
                QuanDec := QuanDec * lvBasicItemRec."Qty. per Unit of Measure";
                FactDec := FactDec / lvBasicItemRec."Qty. per Unit of Measure";
              END ELSE BEGIN
                IF lvUnit = UPPERCASE(lvBasicItemRec."Packaging Unit") THEN BEGIN
                  QuanDec := QuanDec / lvBasicItemRec."Qty. per Unit of Measure";
                  FactDec := FactDec * lvBasicItemRec."Qty. per Unit of Measure";
                END ELSE BEGIN
                  IF SkipError THEN EXIT;  //db, 21-03-13: C002191
                  ERROR(lvText000,
                    lvBasicItemRec.FIELDCAPTION("Application Unit"), lvBasicItemRec."Application Unit",
                    lvBasicItemRec.FIELDCAPTION("Packaging Unit"), lvBasicItemRec."Packaging Unit",
                    lvBasicItemRec.TABLECAPTION, lvBasicItemRec."Product Code", lvUnit);  //*33812.c Extra argument
                END;
              END;
              //mg.sn, 30-09-11: M28653
              IF QuanOld <> QuanDec THEN
                QuanDec := ROUND(QuanDec, 1, '>');
              //mg.en, 30-09-11: M28653
            END;
          END;
        lvItemOpt::"Trade Item":
          BEGIN
            IF lvTradeItemRec.GET(lvVendor, lvTradeItem) THEN BEGIN
              IF lvTradeItemRec."Qty. per Unit of Measure" = 0 THEN
                lvTradeItemRec."Qty. per Unit of Measure" := 1;
              //db.sn, 21-10-11: M28653
              IF lvTradeItemRec."Lot Size Quantity" = 0 THEN
                lvTradeItemRec."Lot Size Quantity" := 1;
              IF lvTradeItemRec."Application Unit Quantity" = 0 THEN
                lvTradeItemRec."Application Unit Quantity" := 1;
              //db.en, 21-10-11: M28653
              IF lvUnit = UPPERCASE(lvTradeItemRec."Application Unit") THEN BEGIN
                QuanDec := QuanDec * lvTradeItemRec."Qty. per Unit of Measure";
                FactDec := FactDec / lvTradeItemRec."Qty. per Unit of Measure";
              END ELSE BEGIN
                IF lvUnit = UPPERCASE(lvTradeItemRec."Packaging Unit") THEN BEGIN
                  QuanDec := QuanDec / lvTradeItemRec."Qty. per Unit of Measure";
                  FactDec := FactDec * lvTradeItemRec."Qty. per Unit of Measure";
                END ELSE BEGIN
                  IF SkipError THEN EXIT;  //db, 21-03-13: C002191
                  ERROR(lvText000,
                    lvTradeItemRec.FIELDCAPTION("Application Unit"), lvTradeItemRec."Application Unit",
                    lvTradeItemRec.FIELDCAPTION("Packaging Unit"), lvTradeItemRec."Packaging Unit",
                    lvTradeItemRec.TABLECAPTION, lvTradeItemRec."Item Code", lvUnit);  //*33812.c Extra argument
                END;
              END;
              //mg.sn, 30-09-11: M28653
              IF QuanOld <> QuanDec THEN BEGIN
                IF lvUnit = UPPERCASE(lvTradeItemRec."Packaging Unit") THEN
                  QuanDec := ROUND(QuanDec, lvTradeItemRec."Lot Size Quantity", '>')
                ELSE
                  QuanDec := ROUND(QuanDec, lvTradeItemRec."Application Unit Quantity", '>');
              END;
              //mg.en, 30-09-11: M28653
            END;
          END;
      END;

      //mg.so, 30-09-11: M28653
      //IF QuanOld <> QuanDec THEN
      //  QuanDec := ROUND(QuanDec, 1, '>');
      //mg.eo, 30-09-11: M28653
    END;

    PROCEDURE GetCostComponent@1100485005(lvCostObject@1100485002 : Code[20];VAR CostComp@1100485000 : Code[10]);
    BEGIN
      IF lvCostObject <> '' THEN BEGIN
        IF DimVal.Code <> lvCostObject THEN BEGIN //Call 23762
          GetGLSetup;  //Call 23762
          IF DimVal.GET(GLSetup."Global Dimension 2 Code", lvCostObject) THEN;  //Call 23762
        END;  //Call 23762
        CostComp := DimVal."Cost Component";
      END;
    END;

    PROCEDURE GetItemTranslation@42(lvItem@1100485002 : Code[20];VAR Desc1@1100485003 : Text[50];VAR Desc2@1100485004 : Text[50]);
    VAR
      UserSetup@1100485000 : Record 91;
      lvEmplRec@1100485001 : Record 5200;
      lvItemRec@1100485006 : Record 27;
      lvItemTranslationRec@1100485005 : Record 30;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN UserSetup.INIT;
      IF NOT lvEmplRec.GET(UserSetup."Employee No.") THEN lvEmplRec.INIT;

      //db.sn, 20-12-11: M31760
      GetInventSetup;
      IF InventSetup."Item Info Trade Item Leading" THEN EXIT;
      //db.en, 20-12-11: M31760

      //IF InvtSetup."Price Info Trade Item Leading" = FALSE THEN BEGIN  //db, 11-08-11: M22691
        IF NOT lvItemRec.GET(lvItem) THEN EXIT;
        Desc1 := lvItemRec.Description;
        Desc2 := lvItemRec."Description 2";
      //END;

      IF lvItemTranslationRec.GET(lvItem,'',LanguageCode) THEN BEGIN
        Desc1 := lvItemTranslationRec.Description;
        Desc2 := lvItemTranslationRec."Description 2";
      END;
    END;

    PROCEDURE GetDeliveryTimeItem@1100485002(lvItem@1100485001 : Code[20];lvManufacturer@1100485002 : Code[20];lvBasicItem@1100485003 : Code[20];lvVendor@1100485004 : Code[20];lvTradeItem@1100485000 : Code[20];lvDocType@1100485006 : Integer;lvDocNo@1100485007 : Code[20];lvNavisionVendor@1100485005 : Code[20]) DeliveryPeriod : Text[30];
    VAR
      lvItemRec@1100485008 : Record 27;
      lvBasicItemRec@1100485009 : Record 11012316;
      lvTradeItemRec@1100485010 : Record 11012317;
    BEGIN
      //db, 02-03-09: M13785
      GetInventSetup;
      IF (NOT InventSetup."Item Info Trade Item Leading") AND (lvItem <> '') THEN BEGIN
        IF lvItemRec.GET(lvItem) THEN BEGIN
          DeliveryPeriod := STRSUBSTNO('%1', lvItemRec."Lead Time Calculation");
          IF DeliveryPeriod <> '' THEN
            EXIT(DeliveryPeriod);
        END;
      END;

      IF (lvTradeItem <> '') AND (lvVendor <> '') THEN BEGIN
        IF lvTradeItemRec.GET(lvVendor, lvTradeItem) THEN BEGIN
          lvTradeItemRec.CALCFIELDS("Delivery Time Unit");
          IF UPPERCASE(lvTradeItemRec."Delivery Time Unit") = 'U' THEN BEGIN
            lvTradeItemRec."Delivery Time Unit" := 'D';
            lvTradeItemRec."Delivery Period" := ROUND(lvTradeItemRec."Delivery Period" / 24, 1);
          END;
          IF UPPERCASE(lvTradeItemRec."Delivery Time Unit") = 'D' THEN
            lvTradeItemRec."Delivery Period" := ROUND(lvTradeItemRec."Delivery Period", 1);
          IF UPPERCASE(lvTradeItemRec."Delivery Time Unit") = 'W' THEN
            lvTradeItemRec."Delivery Period" := ROUND(lvTradeItemRec."Delivery Period", 1);
          IF (lvTradeItemRec."Delivery Period" <> 0) AND (lvTradeItemRec."Delivery Time Unit" <> '') THEN
            DeliveryPeriod := STRSUBSTNO('%1', lvTradeItemRec."Delivery Period") +
              UPPERCASE(COPYSTR(lvTradeItemRec."Delivery Time Unit",1,1));
          IF DeliveryPeriod <> '' THEN
            EXIT(DeliveryPeriod);
        END;
      END;

      IF (lvBasicItem <> '') AND (lvManufacturer <> '') AND
         (lvTradeItem = '') AND (lvVendor = '') THEN BEGIN
        IF lvBasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BEGIN
          // Basic Item has no Delivery Period: Search for Trade Item with same number.
          IF lvTradeItemRec.GET(lvManufacturer, lvBasicItem) THEN BEGIN
            lvTradeItemRec.CALCFIELDS("Delivery Time Unit");
            IF UPPERCASE(lvTradeItemRec."Delivery Time Unit") = 'U' THEN BEGIN
              lvTradeItemRec."Delivery Time Unit" := 'D';
              lvTradeItemRec."Delivery Period" := ROUND(lvTradeItemRec."Delivery Period" / 24, 1);
            END;
            IF UPPERCASE(lvTradeItemRec."Delivery Time Unit") = 'D' THEN
              lvTradeItemRec."Delivery Period" := ROUND(lvTradeItemRec."Delivery Period", 1);
            IF UPPERCASE(lvTradeItemRec."Delivery Time Unit") = 'W' THEN
              lvTradeItemRec."Delivery Period" := ROUND(lvTradeItemRec."Delivery Period", 1);
            IF (lvTradeItemRec."Delivery Period" <> 0) AND (lvTradeItemRec."Delivery Time Unit" <> '') THEN
              DeliveryPeriod := STRSUBSTNO('%1', lvTradeItemRec."Delivery Period") +
                UPPERCASE(COPYSTR(lvTradeItemRec."Delivery Time Unit",1,1));
          END;
          IF DeliveryPeriod <> '' THEN
            EXIT(DeliveryPeriod);
        END;
      END;
      IF lvItem <> '' THEN BEGIN
        IF lvItemRec.GET(lvItem) THEN BEGIN
          DeliveryPeriod := STRSUBSTNO('%1', lvItemRec."Lead Time Calculation");
          IF DeliveryPeriod <> '' THEN
            EXIT(DeliveryPeriod);
        END;
      END;

      IF DeliveryPeriod = '' THEN
        GetDefaultDeliveryTime(lvDocType, lvDocNo, lvNavisionVendor, DeliveryPeriod);
    END;

    PROCEDURE GetDefaultDeliveryTime@1100485004(lvDocType@1100485005 : Integer;lvDocNo@1100485004 : Code[20];lvVendor@1100485002 : Code[20];VAR DeliveryPeriod@1100485003 : Text[30]);
    VAR
      VendorRec@1100485000 : Record 23;
      PurchHeaderRec@1100485006 : Record 38;
    BEGIN
      IF lvDocNo <> '' THEN BEGIN
        PurchHeaderRec.GET(lvDocType, lvDocNo);
        DeliveryPeriod := STRSUBSTNO('%1', PurchHeaderRec."Lead Time Calculation");
      END;

      IF DeliveryPeriod <> '' THEN EXIT;

      IF lvVendor <> '' THEN BEGIN
        VendorRec.GET(lvVendor);
        DeliveryPeriod := STRSUBSTNO('%1', VendorRec."Lead Time Calculation");
      END;

      IF DeliveryPeriod <> '' THEN EXIT;

      GetInventSetup; //call 23762
      DeliveryPeriod := STRSUBSTNO('%1', InventSetup."Delivery Period");
    END;

    PROCEDURE GetPriceTradeItem@1100485007(VAR lvTradeItemRec@1100485000 : Record 11012317;lvRefDate@1100485008 : Date;lvDiscRef1@1100485002 : Code[20];lvDiscRef2@1100485004 : Code[20];lvDiscPrio@1100525000 : Code[10]);
    VAR
      lvPriceHistRec@1100485007 : Record 11012315;
      lvDiscHistRec@1100485010 : Record 11012312;
      lvconvfact@1100485001 : Decimal;
      lvHistNettPrice@1100485003 : Decimal;
      lvDiscPerc0@1100485011 : Decimal;
      lvDiscPerc1@1100485006 : Decimal;
      lvDiscPerc2@1100485009 : Decimal;
      lvVendorDiscPerc@1100485012 : Decimal;
      lvVendorDiscPerc1@1100485013 : Decimal;
      lvVendorDiscPerc2@1100485014 : Decimal;
      lvDiscLevel@1100485005 : Integer;
      lvDiscPrio0@1100525001 : Integer;
      lvDiscPrio1@1100525002 : Integer;
      lvDiscPrio2@1100525003 : Integer;
      lvDiscPresent0@1100525004 : Boolean;
      lvDiscPresent1@1100525005 : Boolean;
      lvDiscPresent2@1100525006 : Boolean;
      lvDiscType@1100525007 : 'Purchase,Sales';
      CurrPrio@1100525008 : Integer;
    BEGIN
      WITH lvTradeItemRec DO BEGIN
        "Price Reference Date" := 0D;
        // LAHE 130319 ? "Gross Price" := 0;
        "Discount Percentage" := 0;
        "Nett Price" := 0;  //db, 30-10-14: T005487
        lvconvfact := 1;
        lvHistNettPrice := 0;
        IF lvRefDate = 0D THEN
          lvRefDate := TODAY;

        GetGLSetup; //call 23762

        //>>  ANCA 150529 IME-296 and IME-355
        "Gross Price" := 0;
        lvHistNettPrice := 0;
        PriceHistFound := FALSE;
        PriceListVendorNo := '';
        //<<

        lvPriceHistRec.SETRANGE("Item Code", "Item Code");
        lvPriceHistRec.SETRANGE(Vendor, Vendor);
        lvPriceHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
        //lvPriceHistRec.SETFILTER("Gross Price", '<>%1', 0);  //db, 31-10-14: T005487
        //>> ANCA 150319 IME-296
        IF PriceListCode <> '' THEN //<<
          lvPriceHistRec.SETRANGE("Price List Code",PriceListCode); // LAHE 130116, using remote passed price list code, if any

        IF lvPriceHistRec.FINDLAST THEN BEGIN
          "Price Reference Date" := lvPriceHistRec."Starting Date";
          IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
            lvconvfact := lvconvfact * lvPriceHistRec."Quantity Per Price";

          "Gross Price" := lvPriceHistRec."Gross Price" / lvconvfact;
          lvHistNettPrice := lvPriceHistRec."Nett Price" / lvconvfact;
        //>> LAHE 130116
          PriceHistFound := PriceListCode <> ''; //TRUE;
          PriceListVendorNo := lvPriceHistRec.Vendor; // LAHE 130425
          //IF NOT CONFIRM('PriceHistFound: %1',TRUE,"Gross Price") THEN ERROR(''); // LAHE WIP
        END ELSE BEGIN
          //>> ANCA 150529 IME-296 and IME-355  PriceListCode is not set when run from Trade Item Page, Test PriceList <> '' to avoid displaying wrong prices in Trade Item Page
          IF (PriceListCode <> '') THEN BEGIN
            lvPriceHistRec.SETCURRENTKEY("Item Code", "Starting Date", "Price List Code");  // Use Price History for current customer Pricelist, Use new Key to speed up things
            lvPriceHistRec.SETRANGE(Vendor);
            IF lvPriceHistRec.FINDLAST THEN BEGIN
              "Price Reference Date" := lvPriceHistRec."Starting Date";
              IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
                lvconvfact := lvconvfact * lvPriceHistRec."Quantity Per Price";

              "Gross Price" := lvPriceHistRec."Gross Price" / lvconvfact;
              lvHistNettPrice := lvPriceHistRec."Nett Price" / lvconvfact;
              PriceHistFound := PriceListCode <> ''; //TRUE;
              PriceListVendorNo := lvPriceHistRec.Vendor; // LAHE 130425
              //IF NOT CONFIRM('PriceHistNoVendorFound: %1',TRUE,"Gross Price") THEN ERROR(''); // LAHE WIP

            END ELSE BEGIN
              //>>   ANCA IME-355 150529
              lvPriceHistRec.SETRANGE("Starting Date");      // ANCA 150529 Try to get a later record in price history
              IF lvPriceHistRec.FINDFIRST THEN BEGIN
                "Price Reference Date" := lvPriceHistRec."Starting Date";
                IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
                  lvconvfact := lvconvfact * lvPriceHistRec."Quantity Per Price";

                "Gross Price" := lvPriceHistRec."Gross Price" / lvconvfact;
                lvHistNettPrice := lvPriceHistRec."Nett Price" / lvconvfact;
                PriceHistFound := TRUE;
                PriceListVendorNo := lvPriceHistRec.Vendor;
              //<< ANCA IME-355
              END ELSE BEGIN
                lvPriceHistRec.SETCURRENTKEY(Vendor,"Item Code","Starting Date","Price List Code");
                lvPriceHistRec.SETRANGE(Vendor, Vendor);
                lvPriceHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
                lvPriceHistRec.SETRANGE("Price List Code"); // LAHE Try without pricelist filter

                IF lvPriceHistRec.FINDLAST THEN BEGIN
                  "Price Reference Date" := lvPriceHistRec."Starting Date";
                  IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
                    lvconvfact := lvconvfact * lvPriceHistRec."Quantity Per Price";

                  "Gross Price" := lvPriceHistRec."Gross Price" / lvconvfact;
                  lvHistNettPrice := lvPriceHistRec."Nett Price" / lvconvfact;

                END;
              END;
              //IF NOT CONFIRM('No PriceHistFound: %1',TRUE,"Gross Price") THEN ERROR(''); // LAHE WIP
            END;
          END;
        //<< LAHE 130116
        END;

        IF "Factor Price-Purchase Unit" <> 0 THEN BEGIN
          "Gross Price" := "Gross Price" * "Factor Price-Purchase Unit";
          lvHistNettPrice := lvHistNettPrice * "Factor Price-Purchase Unit";  //db, 04-03-13: T001418
        END;

        "Gross Price" := ROUND("Gross Price", GLSetup."Unit-Amount Rounding Precision");

        //db.sn, 28-04-10: M19237 (change procedure nett price with discount term)
        //IF (lvHistNettPrice <> 0) AND ("Discount Group Code" = '') THEN
        //  "Nett Price" := lvHistNettPrice
        //ELSE
        //  "Nett Price" := "Gross Price";
        IF (lvHistNettPrice <> 0) THEN BEGIN
          lvDiscLevel := 0;
          lvDiscPresent0 :=
            CheckDiscountLevel(lvTradeItemRec, lvDiscHistRec, FALSE, lvDiscLevel, '', lvRefDate, lvDiscType::Purchase);
          IF lvDiscPresent0 = FALSE THEN BEGIN
            IF "Gross Price" <> 0 THEN
              lvDiscPerc0 := 100 * ("Gross Price" - lvHistNettPrice) / "Gross Price";
          END;
        END;
        //db.en, 28-04-10: M19237

        CheckDiscPrio(lvDiscRef1, lvDiscRef2, lvDiscPrio, lvDiscPrio0, lvDiscPrio1, lvDiscPrio2);
        IF (lvDiscPrio2 >= 0) AND (lvDiscRef2 <> '') THEN BEGIN
          lvDiscLevel := 2;
          lvDiscPresent2 :=
            CheckDiscountLevel(lvTradeItemRec, lvDiscHistRec, FALSE, lvDiscLevel, lvDiscRef2, lvRefDate, lvDiscType::Purchase);
          lvDiscPerc2 := lvTradeItemRec."Discount Percentage";
          lvVendorDiscPerc2 := CheckVendorDiscount(lvDiscLevel, lvDiscRef2, Vendor);
        END;
        IF (lvDiscPrio1 >= 0) AND (lvDiscRef1 <> '') THEN BEGIN
          lvDiscLevel := 1;
          lvDiscPresent1 :=
            CheckDiscountLevel(lvTradeItemRec, lvDiscHistRec, FALSE, lvDiscLevel, lvDiscRef1, lvRefDate, lvDiscType::Purchase);
          lvDiscPerc1 := lvTradeItemRec."Discount Percentage";
          lvVendorDiscPerc1 := CheckVendorDiscount(lvDiscLevel, lvDiscRef1, Vendor);
        END;
        IF lvDiscPrio0 >= 0 THEN BEGIN
          lvDiscLevel := 0;
          lvDiscPresent0 :=
            CheckDiscountLevel(lvTradeItemRec, lvDiscHistRec, FALSE, lvDiscLevel, '', lvRefDate, lvDiscType::Purchase);
          IF lvDiscPerc0 = 0 THEN  //db, 28-04-10: M19237 (discount based on nett price)
            lvDiscPerc0 := lvTradeItemRec."Discount Percentage";
      //  lvVendorDiscPerc0 := CheckVendorDiscount(lvDiscLevel, lvDiscRef0, Vendor); //no DiscRef for Company
        END;

        IF lvVendorDiscPerc2 > lvVendorDiscPerc THEN
          lvVendorDiscPerc := lvVendorDiscPerc2;
        IF lvVendorDiscPerc1 > lvVendorDiscPerc THEN
          lvVendorDiscPerc := lvVendorDiscPerc1;

        //db.sn, 11-08-15: C023137
        lvTradeItemRec."Discount Percentage" := lvDiscPerc0;
        CurrPrio := lvDiscPrio0;
        IF ((lvDiscPrio1 = CurrPrio) AND (lvDiscPerc1 > lvTradeItemRec."Discount Percentage")) OR
           ((lvDiscPrio1 > CurrPrio) AND (lvDiscPresent1 = TRUE)) THEN BEGIN
          lvTradeItemRec."Discount Percentage" := lvDiscPerc1;
          CurrPrio := lvDiscPrio1;
        END;
        IF ((lvDiscPrio2 = CurrPrio) AND (lvDiscPerc2 > lvTradeItemRec."Discount Percentage")) OR
           ((lvDiscPrio2 > CurrPrio) AND (lvDiscPresent2 = TRUE)) THEN BEGIN
          lvTradeItemRec."Discount Percentage" := lvDiscPerc2;
          CurrPrio := lvDiscPrio2;
        END;
        lvTradeItemRec."Discount Percentage" := lvTradeItemRec."Discount Percentage" + lvVendorDiscPerc;
        //db.en, 11-08-15: C023137

        lvTradeItemRec."Nett Price" :=
          ROUND(lvTradeItemRec."Gross Price"*(100-lvTradeItemRec."Discount Percentage")/100,GLSetup."Unit-Amount Rounding Precision");
        IF (lvHistNettPrice <> 0) AND (lvTradeItemRec."Gross Price" = 0) THEN  //db, 30-10-14: T005487
          lvTradeItemRec."Nett Price" := lvHistNettPrice;  //if gross price not filled, but only nett price without discount-condition
      END;
    END;

    PROCEDURE PriceHistory0Exists@1100528601(IItemCode@1100528601 : Code[20];IVendor@1100528602 : Code[15];IReferenceDate@1100528603 : Date) : Boolean;
    VAR
      PriceHistoryTradeItem@1100528600 : Record 11012315;
    BEGIN
      PriceHistoryTradeItem.SETRANGE("Item Code", IItemCode);
      PriceHistoryTradeItem.SETRANGE(Vendor, IVendor);
      PriceHistoryTradeItem.SETRANGE("Starting Date", 0D, IReferenceDate);
      IF PriceHistoryTradeItem.FINDLAST THEN
        EXIT(PriceHistoryTradeItem."Gross Price" = 0);
    END;

    PROCEDURE CheckDiscountLevel@1100485003(VAR lvTradeItemRec@1100485000 : Record 11012317;VAR lvDiscHistRec@1100525001 : Record 11012312;lvCheckSales@1100485003 : Boolean;lvDiscLevel@1100485006 : Integer;lvDiscRef@1100485007 : Code[20];lvRefDate@1100485008 : Date;lvDiscType@1100525000 : 'Purchase,Sales') : Boolean;
    VAR
      lvVendorRec@1100485004 : Record 11012304;
      lvDiscHistRec2@1100485009 : Record 11012312;
      HGSCode@1210190000 : Text[250];
      lenHGS@1100485001 : Integer;
      posWildCard@1100485002 : Integer;
    BEGIN
      //- Discount Level: 0=company, 1=customer, 2=project

      WITH lvTradeItemRec DO BEGIN
        IF NOT lvCheckSales THEN  //db, 13-04-10: M19040
          "Discount Percentage" := 0;  //db, 26-11-09: M17158
        lvDiscHistRec.RESET;
        lvDiscHistRec.SETRANGE(Vendor, Vendor);
        lvDiscHistRec.SETFILTER("Discount Group", '%1', '');
        lvDiscHistRec.SETRANGE("Item Code", "Item Code");
        lvDiscHistRec.SETRANGE("Discount Level", lvDiscLevel);
        lvDiscHistRec.SETRANGE("Discount Reference", lvDiscRef);
        lvDiscHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
        lvDiscHistRec.SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);  //db, 11-01-10: M14768
        IF lvDiscHistRec.FINDLAST THEN BEGIN
          //Item-level
          IF NOT lvCheckSales THEN
            CheckDiscountTerm(lvTradeItemRec, lvDiscHistRec, lvRefDate, lvDiscType);
          IF ShowSalesDiscount THEN
            PAGE.RUNMODAL(0, lvDiscHistRec);  //db, 27-05-14: C015604
          EXIT(TRUE);
        END ELSE BEGIN
          lvDiscHistRec.RESET;
          lvDiscHistRec.SETRANGE(Vendor, Vendor);
          lvDiscHistRec.SETRANGE("Discount Group", "Discount Group Code");
          lvDiscHistRec.SETFILTER("Item Code", '%1', '');
          lvDiscHistRec.SETRANGE("Discount Level", lvDiscLevel);
          lvDiscHistRec.SETRANGE("Discount Reference", lvDiscRef);
          lvDiscHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
          lvDiscHistRec.SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);  //db, 11-01-10: M14768
          IF lvDiscHistRec.FINDLAST THEN BEGIN
            //Discountgroup-level
            IF NOT lvCheckSales THEN
              CheckDiscountTerm(lvTradeItemRec, lvDiscHistRec, lvRefDate, lvDiscType);
            IF ShowSalesDiscount THEN
              PAGE.RUNMODAL(0, lvDiscHistRec);  //db, 27-05-14: C015604
            EXIT(TRUE);
          END ELSE BEGIN
            IF NOT lvVendorRec.GET(Vendor) THEN lvVendorRec.INIT;
            IF lvVendorRec."Format Discount Term" = lvVendorRec."Format Discount Term"::Wildcard THEN BEGIN
              //icc-format (instalnet) is based on discount terms like 02*, 016*, 1141* or 03225
              HGSCode := "Discount Group Code";
              lenHGS := STRLEN(HGSCode);
              WHILE lenHGS > 0 DO BEGIN
                lvDiscHistRec.RESET;
                lvDiscHistRec.SETRANGE(Vendor, Vendor);
                lvDiscHistRec.SETFILTER("Discount Group", '%1', HGSCode + '*');
                lvDiscHistRec.SETFILTER("Item Code", '%1', '');
                lvDiscHistRec.SETRANGE("Discount Level", lvDiscLevel);
                lvDiscHistRec.SETRANGE("Discount Reference", lvDiscRef);
                lvDiscHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
                lvDiscHistRec.SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);  //db, 11-01-10: M14768
                IF lvDiscHistRec.FINDSET THEN BEGIN
                  REPEAT
                    posWildCard := STRPOS(lvDiscHistRec."Discount Group", '*');
                    IF (posWildCard = lenHGS + 1) THEN BEGIN
                      lvDiscHistRec2.COPY(lvDiscHistRec);
                      lvDiscHistRec2.SETRANGE("Discount Group", lvDiscHistRec."Discount Group");
                      IF lvDiscHistRec2.FINDLAST THEN BEGIN  //find last date for this condition
                        lvDiscHistRec.COPY(lvDiscHistRec2);
                        IF NOT lvCheckSales THEN
                          CheckDiscountTerm(lvTradeItemRec, lvDiscHistRec, lvRefDate, lvDiscType);
                        IF ShowSalesDiscount THEN
                          PAGE.RUNMODAL(0, lvDiscHistRec);  //db, 27-05-14: C015604
                        EXIT(TRUE);
                      END;
                    END;
                  UNTIL lvDiscHistRec.NEXT = 0;
                END;
                lenHGS := lenHGS - 1;
                IF lenHGS > 0 THEN
                  HGSCode := COPYSTR("Discount Group Code", 1, lenHGS);
              END;
            END;
            IF lvVendorRec."Format Discount Term" = lvVendorRec."Format Discount Term"::HGS THEN BEGIN
              IF COPYSTR("Discount Group Code", 5, 2) < '80' THEN BEGIN
                //With subgroup higher then 80 don't search for discount on higher level
                //TU supplies discount groups in format hhggss
                HGSCode := COPYSTR("Discount Group Code", 1, 4) + '99';
                lvDiscHistRec.RESET;
                lvDiscHistRec.SETRANGE(Vendor, Vendor);
                lvDiscHistRec.SETRANGE("Discount Group", HGSCode);
                lvDiscHistRec.SETFILTER("Item Code", '%1', '');
                lvDiscHistRec.SETRANGE("Discount Level", lvDiscLevel);
                lvDiscHistRec.SETRANGE("Discount Reference", lvDiscRef);
                lvDiscHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
                lvDiscHistRec.SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);  //db, 11-01-10: M14768
                IF lvDiscHistRec.FINDLAST THEN BEGIN
                  //Group-level (TU)
                  IF NOT lvCheckSales THEN
                    CheckDiscountTerm(lvTradeItemRec, lvDiscHistRec, lvRefDate, lvDiscType);
                  IF ShowSalesDiscount THEN
                    PAGE.RUNMODAL(0, lvDiscHistRec);  //db, 27-05-14: C015604
                  EXIT(TRUE);
                END;
                HGSCode := COPYSTR("Discount Group Code", 1, 2) + '9999';
                lvDiscHistRec.RESET;
                lvDiscHistRec.SETRANGE(Vendor, Vendor);
                lvDiscHistRec.SETRANGE("Discount Group", HGSCode);
                lvDiscHistRec.SETFILTER("Item Code", '%1', '');
                lvDiscHistRec.SETRANGE("Discount Level", lvDiscLevel);
                lvDiscHistRec.SETRANGE("Discount Reference", lvDiscRef);
                lvDiscHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
                lvDiscHistRec.SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);  //db, 11-01-10: M14768
                IF lvDiscHistRec.FINDLAST THEN BEGIN
                  //Maingroup-level (TU)
                  IF NOT lvCheckSales THEN
                    CheckDiscountTerm(lvTradeItemRec, lvDiscHistRec, lvRefDate, lvDiscType);
                  IF ShowSalesDiscount THEN
                    PAGE.RUNMODAL(0, lvDiscHistRec);  //db, 27-05-14: C015604
                  EXIT(TRUE);
                END;
              END;
            END;
            lvDiscHistRec.RESET;
            lvDiscHistRec.SETRANGE(Vendor, Vendor);
            lvDiscHistRec.SETFILTER("Discount Group", '%1', '');
            lvDiscHistRec.SETFILTER("Item Code", '%1', '');
            lvDiscHistRec.SETRANGE("Discount Level", lvDiscLevel);
            lvDiscHistRec.SETRANGE("Discount Reference", lvDiscRef);
            lvDiscHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
            lvDiscHistRec.SETFILTER("Ending Date", '%1|>=%2', 0D, lvRefDate);  //db, 11-01-10: M14768
            IF lvDiscHistRec.FINDLAST THEN BEGIN
              //Vendor-level
              IF NOT lvCheckSales THEN
                CheckDiscountTerm(lvTradeItemRec, lvDiscHistRec, lvRefDate, lvDiscType);
              IF ShowSalesDiscount THEN
                PAGE.RUNMODAL(0, lvDiscHistRec);  //db, 27-05-14: C015604
              EXIT(TRUE);
            END;
          END;
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckDiscountTerm@1100485011(VAR lvTradeItemRec@1100485000 : Record 11012317;VAR lvDiscHistRec@1100485003 : Record 11012312;lvRefDate@1100485004 : Date;lvDiscType@1100525000 : 'Purchase,Sales');
    VAR
      lvPriceHistRec@1100485002 : Record 11012315;
    BEGIN
      WITH lvTradeItemRec DO BEGIN
        //DP00065.sn
        //IF lvDiscHistRec."Cost Object" <> '' THEN
        //  "Cost Object" := lvDiscHistRec."Cost Object";
        //IF lvDiscHistRec."Cost Object (Removal)" <> '' THEN
        //  "Cost Object (Removal)" := lvDiscHistRec."Cost Object (Removal)";
        //DP00065.en

        IF lvDiscType = lvDiscType::Sales THEN BEGIN
          //db.sn, 17-05-10: M19372
          IF lvDiscHistRec."Sales Price" <> 0 THEN BEGIN
            lvPriceHistRec.SETRANGE(Vendor, Vendor);
            lvPriceHistRec.SETRANGE("Item Code", "Item Code");
            lvPriceHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
            //>> ANCA 150527 IME-355
            IF (PriceListCode <> '') THEN
              lvPriceHistRec.SETRANGE("Price List Code",PriceListCode);
            //<<
            IF NOT lvPriceHistRec.FINDLAST THEN
              lvPriceHistRec.INIT;
            IF lvPriceHistRec."Gross Price" = 0 THEN BEGIN
              "Discount Percentage" := 0;
              "Gross Price" := lvDiscHistRec."Sales Price";
              IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
                "Gross Price" := "Gross Price" / lvPriceHistRec."Quantity Per Price";
            END ELSE BEGIN
              "Discount Percentage" :=
                100 * (lvPriceHistRec."Gross Price"-lvDiscHistRec."Sales Price") / lvPriceHistRec."Gross Price";
            END;
          END ELSE BEGIN
            "Discount Percentage" := lvDiscHistRec."Sales Discount Percentage";
          END;
          "Nett Price" :=
            ROUND("Gross Price" * (100-"Discount Percentage")/100, GLSetup."Unit-Amount Rounding Precision");
          //db.en, 17-05-10: M19372
        END;
        IF lvDiscType = lvDiscType::Purchase THEN BEGIN
          IF lvDiscHistRec."Purchase Price" <> 0 THEN BEGIN
            //price agreement is in same unit of measure as gross price in price history
            lvPriceHistRec.SETRANGE(Vendor, Vendor);
            lvPriceHistRec.SETRANGE("Item Code", "Item Code");
            lvPriceHistRec.SETRANGE("Starting Date", 0D, lvRefDate);
            IF NOT lvPriceHistRec.FINDLAST THEN
              lvPriceHistRec.INIT;
            IF lvPriceHistRec."Gross Price" = 0 THEN BEGIN
              "Discount Percentage" := 0;
              "Gross Price" := lvDiscHistRec."Purchase Price";
              IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
                "Gross Price" := "Gross Price" / lvPriceHistRec."Quantity Per Price";
            END ELSE BEGIN
              "Discount Percentage" :=
                100 * (lvPriceHistRec."Gross Price"-lvDiscHistRec."Purchase Price") / lvPriceHistRec."Gross Price";
            END;
          END ELSE BEGIN
            "Discount Percentage" := lvDiscHistRec.GetPurchaseDiscount;
          END;
          "Nett Price" :=
            ROUND("Gross Price" * (100-"Discount Percentage")/100, GLSetup."Unit-Amount Rounding Precision");
         END;
      END;
    END;

    PROCEDURE CheckVendorDiscount@1100485014(lvDiscLevel@1100485002 : Integer;lvDiscRef@1100485001 : Code[20];lvVendor@1100485003 : Code[20]) : Decimal;
    VAR
      VendorDiscRec@1100485000 : Record 11012339;
    BEGIN
      IF NOT VendorDiscRec.GET(lvDiscLevel, lvDiscRef, lvVendor) THEN
        VendorDiscRec.INIT;

      EXIT(VendorDiscRec."Discount %");
    END;

    PROCEDURE CheckUnitConversion@1100485008(lvUnit@1100485000 : Code[10]) : Text[30];
    VAR
      lvUnitRec@1100485001 : Record 11012307;
    BEGIN
      IF lvUnitRec.GET(lvUnit) THEN BEGIN
        IF lvUnitRec."Unit (NAV)" <> '' THEN
          EXIT(lvUnitRec."Unit (NAV)")
        ELSE
          EXIT(lvUnitRec."Unit of Measure");
      END;

      EXIT(lvUnit);
    END;

    PROCEDURE GetPriceBasicItem@1100485006(VAR lvBasicItemRec@1100485000 : Record 11012316;lvRefDate@1100485005 : Date;lvDiscRef1@1100485004 : Code[20];lvDiscRef2@1100485003 : Code[20];lvDiscPrio@1100525000 : Code[10];lvUpdate@1100485006 : Boolean);
    VAR
      lvTradeItemRec@1100485001 : Record 11012317;
      lvVendorRec@1100485002 : Record 11012304;
    BEGIN
      WITH lvBasicItemRec DO BEGIN
        IF lvTradeItemRec.GET(Manufacturer, "Product Code") THEN BEGIN
          GetPriceTradeItem(lvTradeItemRec, lvRefDate, lvDiscRef1, lvDiscRef2, lvDiscPrio);
          CheckProductRelation(lvBasicItemRec, lvTradeItemRec, FALSE);
        END ELSE BEGIN
          IF NOT lvVendorRec.GET(Manufacturer) THEN
            lvVendorRec.INIT
          ELSE
            lvVendorRec.CALCFIELDS("Vendor (Price/Discount)");
          lvTradeItemRec.RESET;
          IF "GTIN Code" <> '' THEN BEGIN
            lvTradeItemRec.SETCURRENTKEY("GTIN Code (Item)");
            lvTradeItemRec.SETRANGE("GTIN Code (Item)", "GTIN Code");
          END ELSE BEGIN
            lvTradeItemRec.SETCURRENTKEY("Product Code");
            lvTradeItemRec.SETRANGE(Manufacturer, Manufacturer);
            lvTradeItemRec.SETRANGE("Product Code", "Product Code");
          END;
          IF lvVendorRec."Vendor (Price/Discount)" <> '' THEN
            lvTradeItemRec.SETRANGE(Vendor, lvVendorRec."Vendor (Price/Discount)");
          IF lvTradeItemRec.FINDFIRST THEN BEGIN
            GetPriceTradeItem(lvTradeItemRec, lvRefDate, lvDiscRef1, lvDiscRef2, lvDiscPrio);
            CheckProductRelation(lvBasicItemRec, lvTradeItemRec, lvUpdate);
          END ELSE BEGIN
            lvTradeItemRec.SETRANGE(Vendor);
            IF lvTradeItemRec.FINDFIRST THEN BEGIN
              GetPriceTradeItem(lvTradeItemRec, lvRefDate, lvDiscRef1, lvDiscRef2, lvDiscPrio);
              CheckProductRelation(lvBasicItemRec, lvTradeItemRec, lvUpdate);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CheckProductRelation@1100485009(VAR lvBasicItemRec@1100485000 : Record 11012316;lvTradeItemRec@1100485001 : Record 11012317;lvUpdate@1100485002 : Boolean);
    BEGIN
      lvBasicItemRec."Gross Price" := lvTradeItemRec."Gross Price";
      lvBasicItemRec."Nett Price" := lvTradeItemRec."Nett Price";
      lvBasicItemRec."Discount Percentage" := lvTradeItemRec."Discount Percentage";
      lvBasicItemRec."Application Unit" := lvTradeItemRec."Application Unit";
      lvBasicItemRec."Packaging Unit" := lvTradeItemRec."Packaging Unit";
      lvBasicItemRec."Qty. per Unit of Measure" := lvTradeItemRec."Qty. per Unit of Measure";
      lvBasicItemRec."Price Reference Date" := lvTradeItemRec."Price Reference Date";
      lvBasicItemRec."Cost Object" := lvTradeItemRec."Cost Object";
      lvBasicItemRec."Cost Object (Removal)" := lvTradeItemRec."Cost Object (Removal)";
      lvBasicItemRec."Removal Contribution" := lvTradeItemRec."Removal Contribution";

      IF lvUpdate = FALSE THEN EXIT;

      IF lvBasicItemRec."GTIN Code" = lvTradeItemRec."GTIN Code (Item)" THEN BEGIN
        lvBasicItemRec."Product Description" := lvTradeItemRec."Item Description";
        lvBasicItemRec."Product Description 2" := lvTradeItemRec."Item Description 2";
      END;
    END;

    PROCEDURE GetAdditionalProductData@1100485013(VAR lvBasicItemRec@1100485001 : Record 11012316);
    BEGIN
      WITH lvBasicItemRec DO BEGIN
        GetProductClass(lvBasicItemRec);
        GetCostObject(lvBasicItemRec);
      END;
    END;

    PROCEDURE GetProductClass@1100485012(VAR lvBasicItemRec@1100485001 : Record 11012316);
    VAR
      lvItemClassRec@1210190008 : Record 11012303;
    BEGIN
      WITH lvBasicItemRec DO BEGIN
        IF lvItemClassRec.GET(lvBasicItemRec."Product Group", lvBasicItemRec."Product Group Line No.") THEN BEGIN
          "Product Class" := lvItemClassRec."Product Class";
          "Application Unit" := CheckUnitConversion(lvItemClassRec."Unit ID");
        END;
      END;
    END;

    PROCEDURE GetCostObject@1100485010(VAR lvBasicItemRec@1100485001 : Record 11012316);
    VAR
      lvProductGrpRec@1210190007 : Record 11012302;
    BEGIN
      WITH lvBasicItemRec DO BEGIN
        IF lvProductGrpRec.GET(lvBasicItemRec."Product Group") THEN BEGIN
          IF lvProductGrpRec."Cost Object" <> '' THEN
            "Cost Object" := lvProductGrpRec."Cost Object";
          IF lvProductGrpRec."Cost Object (Removal)" <> '' THEN
            "Cost Object (Removal)" := lvProductGrpRec."Cost Object (Removal)";
        END;
      END;
    END;

    PROCEDURE GetRefDiscEstimate@1100525002(lvEstRec@1100525001 : Record 11012151;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485002 : Code[20];lvDiscType@1100525000 : 'Purchase,Sales');
    BEGIN
      IF lvDiscType = lvDiscType::Purchase THEN BEGIN
        lvDiscRef1 := lvEstRec."Purch Discount Term Group 1";
        lvDiscRef2 := lvEstRec."Purch Discount Term Group 2";
      END;
      IF lvDiscType = lvDiscType::Sales THEN BEGIN
        lvDiscRef1 := lvEstRec."Sales Discount Term Group 1";
        lvDiscRef2 := lvEstRec."Sales Discount Term Group 2";
      END;
    END;

    PROCEDURE GetRefDiscProject@1100525003(lvProjRec@1100525002 : Record 11072003;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485002 : Code[20];lvDiscType@1100525000 : 'Purchase,Sales');
    BEGIN
      IF lvDiscType = lvDiscType::Purchase THEN BEGIN
        lvDiscRef1 := lvProjRec."Purch Discount Term Group 1";
        lvDiscRef2 := lvProjRec."Purch Discount Term Group 2";
      END;
      IF lvDiscType = lvDiscType::Sales THEN BEGIN
        lvDiscRef1 := lvProjRec."Sales Discount Term Group 1";
        lvDiscRef2 := lvProjRec."Sales Discount Term Group 2";
      END;
    END;

    PROCEDURE GetRefDiscServContract@1100525004(lvServContrRec@1100525001 : Record 11012812;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485002 : Code[20];lvDiscType@1100525000 : 'Purchase,Sales');
    BEGIN
      IF lvDiscType = lvDiscType::Purchase THEN BEGIN
        lvDiscRef1 := lvServContrRec."Purch Discount Term Group 1";
        lvDiscRef2 := lvServContrRec."Purch Discount Term Group 2";
      END;
      IF lvDiscType = lvDiscType::Sales THEN BEGIN
        lvDiscRef1 := lvServContrRec."Sales Discount Term Group 1";
        lvDiscRef2 := lvServContrRec."Sales Discount Term Group 2";
      END;
    END;

    PROCEDURE GetRefDiscServOrder@1100525005(lvServOrderRec@1100525001 : Record 11012823;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485002 : Code[20];lvDiscType@1100525000 : 'Purchase,Sales');
    BEGIN
      IF lvDiscType = lvDiscType::Purchase THEN BEGIN
      //  lvDiscRef1 := lvServOrderRec."Purch Discount Term Group 1";
      //  lvDiscRef2 := lvServOrderRec."Purch Discount Term Group 2";
      END;
      IF lvDiscType = lvDiscType::Sales THEN BEGIN
        lvDiscRef1 := lvServOrderRec."Sales Discount Term Group 1";
        lvDiscRef2 := lvServOrderRec."Sales Discount Term Group 2";
      END;
    END;

    PROCEDURE GetRefPrioEstimate@1100525000(lvEstRec@1100485000 : Record 11012151;lvDiscType@1100525000 : 'Purchase,Sales') lvRefPrio : Code[10];
    BEGIN
      CASE lvDiscType OF
        lvDiscType::Purchase:
          BEGIN
            IF lvEstRec."Priority Purch Disc Term Grp 0" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvEstRec."Priority Purch Disc Term Grp 0";
            IF lvEstRec."Priority Purch Disc Term Grp 1" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvEstRec."Priority Purch Disc Term Grp 1";
            IF lvEstRec."Priority Purch Disc Term Grp 2" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvEstRec."Priority Purch Disc Term Grp 2";
          END;
        lvDiscType::Sales:
          BEGIN
            IF lvEstRec."Priority Sales Disc Term Grp 0" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvEstRec."Priority Sales Disc Term Grp 0";
            IF lvEstRec."Priority Sales Disc Term Grp 1" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvEstRec."Priority Sales Disc Term Grp 1";
            IF lvEstRec."Priority Sales Disc Term Grp 2" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvEstRec."Priority Sales Disc Term Grp 2";
          END;
      END;

      IF lvRefPrio = PADSTR('', STRLEN(lvRefPrio), '~') THEN
        lvRefPrio := '';

      EXIT(lvRefPrio);
    END;

    PROCEDURE GetRefPrioProject@1100525007(lvProjRec@1100525001 : Record 11072003;lvDiscType@1100525000 : 'Purchase,Sales') lvRefPrio : Code[10];
    BEGIN
      CASE lvDiscType OF
        lvDiscType::Purchase:
          BEGIN
            IF lvProjRec."Priority Purch Disc Term Grp 0" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvProjRec."Priority Purch Disc Term Grp 0";
            IF lvProjRec."Priority Purch Disc Term Grp 1" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvProjRec."Priority Purch Disc Term Grp 1";
            IF lvProjRec."Priority Purch Disc Term Grp 2" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvProjRec."Priority Purch Disc Term Grp 2";
          END;
        lvDiscType::Sales:
          BEGIN
            IF lvProjRec."Priority Sales Disc Term Grp 0" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvProjRec."Priority Sales Disc Term Grp 0";
            IF lvProjRec."Priority Sales Disc Term Grp 1" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvProjRec."Priority Sales Disc Term Grp 1";
            IF lvProjRec."Priority Sales Disc Term Grp 2" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvProjRec."Priority Sales Disc Term Grp 2";
          END;
      END;

      IF lvRefPrio = PADSTR('', STRLEN(lvRefPrio), '~') THEN
        lvRefPrio := '';

      EXIT(lvRefPrio);
    END;

    PROCEDURE GetRefPrioServContract@1100525009(lvServContrRec@1100525001 : Record 11012812;lvDiscType@1100525000 : 'Purchase,Sales') lvRefPrio : Code[10];
    BEGIN
      CASE lvDiscType OF
        lvDiscType::Purchase:
          BEGIN
            IF lvServContrRec."Priority Purch Disc Term Grp 0" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvServContrRec."Priority Purch Disc Term Grp 0";
            IF lvServContrRec."Priority Purch Disc Term Grp 1" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvServContrRec."Priority Purch Disc Term Grp 1";
            IF lvServContrRec."Priority Purch Disc Term Grp 2" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvServContrRec."Priority Purch Disc Term Grp 2";
          END;
        lvDiscType::Sales:
          BEGIN
            IF lvServContrRec."Priority Sales Disc Term Grp 0" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvServContrRec."Priority Sales Disc Term Grp 0";
            IF lvServContrRec."Priority Sales Disc Term Grp 1" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvServContrRec."Priority Sales Disc Term Grp 1";
            IF lvServContrRec."Priority Sales Disc Term Grp 2" = '' THEN
              lvRefPrio := lvRefPrio + '~'
            ELSE
              lvRefPrio := lvRefPrio + lvServContrRec."Priority Sales Disc Term Grp 2";
          END;
      END;

      IF lvRefPrio = PADSTR('', STRLEN(lvRefPrio), '~') THEN
        lvRefPrio := '';

      EXIT(lvRefPrio);
    END;

    PROCEDURE CheckDiscPrio@1100525001(lvDiscRef1@1100525000 : Code[20];lvDiscRef2@1100525001 : Code[20];lvDiscPrio@1100525005 : Code[10];VAR lvDiscPrio0@1100525002 : Integer;VAR lvDiscPrio1@1100525003 : Integer;VAR lvDiscPrio2@1100525004 : Integer);
    BEGIN
      IF lvDiscPrio = '' THEN BEGIN
        lvDiscPrio0 := 0;
        lvDiscPrio1 := 0;
        lvDiscPrio2 := 0;
      END ELSE BEGIN
        IF NOT EVALUATE(lvDiscPrio0, COPYSTR(lvDiscPrio, 1, 1)) THEN lvDiscPrio0 := -1;
        IF NOT EVALUATE(lvDiscPrio1, COPYSTR(lvDiscPrio, 2, 1)) THEN lvDiscPrio1 := -1;
        IF NOT EVALUATE(lvDiscPrio2, COPYSTR(lvDiscPrio, 3, 1)) THEN lvDiscPrio2 := -1;
      END;
    END;

    PROCEDURE GetRefDateEstimate@1100485015(lvEstRec@1100485000 : Record 11012151) lvRefDate : Date;
    BEGIN
      lvRefDate := lvEstRec."Reference Date (Item)";

      IF lvRefDate = 0D THEN
        lvRefDate := CheckRefDateLevel(lvEstRec."Customer No.");

      EXIT(lvRefDate);
    END;

    PROCEDURE GetRefDateProject@1100485017(lvProjRec@1100485000 : Record 11072003) lvRefDate : Date;
    BEGIN
      lvRefDate := lvProjRec."Reference Date (Item)";

      IF lvRefDate = 0D THEN
        lvRefDate := CheckRefDateLevel(lvProjRec."Bill-to Customer No.");

      EXIT(lvRefDate);
    END;

    PROCEDURE GetRefDateServContract@1100485018(lvServContrRec@1100485000 : Record 11012812) lvRefDate : Date;
    BEGIN
      lvRefDate := lvServContrRec."Reference Date (Item)";

      IF lvRefDate = 0D THEN
        lvRefDate := CheckRefDateLevel(lvServContrRec."Bill-to Customer No. (CP)");

      EXIT(lvRefDate);
    END;

    PROCEDURE GetRefDateServOrder@1100485024(lvServOrderRec@1100485000 : Record 11012823) lvRefDate : Date;
    BEGIN
      lvRefDate := lvServOrderRec."Reference Date (Item)";

      IF lvRefDate = 0D THEN
        lvRefDate := CheckRefDateLevel(lvServOrderRec."Bill-to Customer No.");

      EXIT(lvRefDate);
    END;

    PROCEDURE CheckRefDateLevel@1100485016(lvCust@1100485000 : Code[20]) lvRefDate : Date;
    BEGIN
      IF lvRefDate = 0D THEN
        IF lvCust <> '' THEN BEGIN //call 23762
          GetCust(lvCust); //call 23762
          lvRefDate := Cust."Reference Date (Item)";
        END;
      IF lvRefDate = 0D THEN BEGIN
        GetInventSetup; //call 23762
        lvRefDate := InventSetup."Reference Date (Item)";
      END;

      IF lvRefDate = 0D THEN
        lvRefDate := TODAY;

      EXIT(lvRefDate);
    END;

    PROCEDURE EvaluateSalesDiscount@1100525006(lvTradeItemRec@1100525007 : Record 11012317;VAR NettPrice@1100525003 : Decimal;VAR DiscPerc@1100525002 : Decimal;GrossPrice@1100525001 : Decimal;CustCde@1100525022 : Code[20];CustGrp@1100525005 : Code[20];lvRefDate@1100525006 : Date;lvDiscRef1@1100525011 : Code[20];lvDiscRef2@1100525010 : Code[20];lvDiscPrio@1100525009 : Code[10]) : Boolean;
    VAR
      ItemGrp@1100525004 : Code[20];
      lvDiscHistRec@1100525000 : Record 11012312;
      lvDiscLevel@1100525008 : Integer;
      lvDiscPrio0@1100525021 : Integer;
      lvDiscPrio1@1100525020 : Integer;
      lvDiscPrio2@1100525019 : Integer;
      lvDiscPresent0@1100525018 : Boolean;
      lvDiscPresent1@1100525017 : Boolean;
      lvDiscPresent2@1100525016 : Boolean;
      lvDiscPerc2@1100525015 : Decimal;
      lvDiscPerc1@1100525014 : Decimal;
      lvDiscPerc0@1100525013 : Decimal;
      lvDiscType@1100525012 : 'Purchase,Sales';
    BEGIN
      lvTradeItemRec."Gross Price" := GrossPrice;  //db, 17-11-14: C018893
      IF InventSetup."Sales Disc Trade Item based on" = InventSetup."Sales Disc Trade Item based on"::DiscTerm THEN BEGIN
        CheckDiscPrio(lvDiscRef1, lvDiscRef2, lvDiscPrio, lvDiscPrio0, lvDiscPrio1, lvDiscPrio2);
        IF (lvDiscPrio2 >= 0) AND (lvDiscRef2 <> '') THEN BEGIN
          lvDiscLevel := 2;
          lvDiscPresent2 :=
            CheckDiscountLevel(lvTradeItemRec, lvDiscHistRec, FALSE, lvDiscLevel, lvDiscRef2, lvRefDate, lvDiscType::Sales);
          lvDiscPerc2 := lvTradeItemRec."Discount Percentage";
        END;
        IF (lvDiscPrio1 >= 0) AND (lvDiscRef1 <> '') THEN BEGIN
          lvDiscLevel := 1;
          lvDiscPresent1 :=
            CheckDiscountLevel(lvTradeItemRec, lvDiscHistRec, FALSE, lvDiscLevel, lvDiscRef1, lvRefDate, lvDiscType::Sales);
          lvDiscPerc1 := lvTradeItemRec."Discount Percentage";
        END;
        IF lvDiscPrio0 >= 0 THEN BEGIN
          lvDiscLevel := 0;
          lvDiscPresent0 :=
            CheckDiscountLevel(lvTradeItemRec, lvDiscHistRec, FALSE, lvDiscLevel, '', lvRefDate, lvDiscType::Sales);
          lvDiscPerc0 := lvTradeItemRec."Discount Percentage";
        END;
        DiscPerc := lvDiscPerc0;
        IF ((lvDiscPrio1 = lvDiscPrio0) AND (lvDiscPerc1 > DiscPerc) AND (lvDiscPerc1 <> 0)) OR  //db, 17-11-14: C018893
           ((lvDiscPrio1 > lvDiscPrio0) AND (lvDiscPresent1 = TRUE)) THEN
          DiscPerc := lvDiscPerc1;
        IF ((lvDiscPrio2 = lvDiscPrio0) AND (lvDiscPerc2 > DiscPerc) AND (lvDiscPerc2 <> 0)) OR  //db, 17-11-14: C018893
           ((lvDiscPrio2 > lvDiscPrio0) AND (lvDiscPresent2 = TRUE)) THEN
          DiscPerc := lvDiscPerc2;
        NettPrice := ROUND(GrossPrice * (100-DiscPerc)/100, GLSetup."Unit-Amount Rounding Precision");
        IF lvDiscPresent2 OR lvDiscPresent1 OR lvDiscPresent0 THEN
          IF DiscPerc <> 0 THEN
            EXIT(TRUE);
      END ELSE BEGIN
        CheckDiscountLevel(lvTradeItemRec, lvDiscHistRec, TRUE, 0, '', lvRefDate, lvDiscType::Sales);
        ItemGrp := lvDiscHistRec."Sales Discount Group";
        IF DiscountPercItemGroupPresent(CustCde, CustGrp, ItemGrp, lvRefDate, DiscPerc) THEN BEGIN
          NettPrice := ((100 - DiscPerc)/100 ) * GrossPrice;
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetSalesBuyBackRates@1100525008(ItemNo@1100525000 : Code[20];PlantLocCode@1100525001 : Code[20];RefDate@1100525002 : Date;VAR SalesRate@1100525003 : Decimal;VAR BuyBackRate@1100525004 : Decimal);
    VAR
      Item2@1100525005 : Record 27;
      PlantOrder@1100525006 : Record 11012556;
      PlantOrderLine@1100525007 : Record 11012557;
      PlantOrderLine2@1100529000 : Record 11012557;
    BEGIN
      //dbeekman, 31-03-09
      CLEAR(BuyBackRate);

      Item2.GET(ItemNo);
      IF Item2."Sales/Buy-Back Item (Plant)" THEN BEGIN
        PlantOrder."Transfer Date" := RefDate;
        PlantOrder."To Location" := PlantLocCode;
        PlantOrder.Type := PlantOrder.Type::Arrival;
        PlantOrderLine.SetOrderHeader(PlantOrder);
        PlantOrderLine.VALIDATE(Type,PlantOrderLine.Type::Item);
        PlantOrderLine.VALIDATE("Item No.",ItemNo);
        SalesRate := PlantOrderLine."Sales Rate";

        PlantOrder."From Location" := PlantLocCode;
        PlantOrder.Type := PlantOrder.Type::Removal;
        PlantOrderLine2.SetOrderHeader(PlantOrder);
        PlantOrderLine2.VALIDATE(Type,PlantOrderLine.Type::Item);
        PlantOrderLine2.VALIDATE("Item No.",ItemNo);
        BuyBackRate := PlantOrderLine2."Sales Rate";
      END;
    END;

    PROCEDURE SetLanguageCode@1100525010(iLanguageCode@1100525000 : Code[10]);
    BEGIN
      LanguageCode := iLanguageCode;
    END;

    PROCEDURE SetQuantity@1100525012(iQuanDec@1100525000 : Decimal);
    BEGIN
      //db, 28-12-09: M16871
      QuanDec := iQuanDec;
    END;

    PROCEDURE SetVendor@1100525013(iVendor@1100525000 : Code[20]);
    VAR
      VendorRec@1100525001 : Record 23;
    BEGIN
      //db, 25-03-13: 32565
      IF NOT VendorRec.GET(iVendor) THEN VendorRec.INIT;
      VendorTradeItem := VendorRec."Vendor (Trade Item)";

      IF (VendorTradeItem = '') THEN BEGIN
        IF NOT VendorRec.GET(VendorRec."Main Vendor") THEN VendorRec.INIT;
        VendorTradeItem := VendorRec."Vendor (Trade Item)";
      END;
    END;

    PROCEDURE GetBaseUnit@1100525011(IItem@1100525004 : Code[20];IBasicItem@1100525003 : Code[20];ITradeItem@1100525002 : Code[20];IManufacturer@1100525001 : Code[20];IVendor@1100525000 : Code[20]) : Text[10];
    VAR
      Item@1100525005 : Record 27;
      TradeItem@1100525006 : Record 11012317;
      BasicItem@1100525007 : Record 11012316;
    BEGIN
      //db, 20-12-10: M23993
      IF ITradeItem <> '' THEN BEGIN
        IF TradeItem.GET(IVendor, ITradeItem) THEN
          EXIT(TradeItem."Application Unit");
      END ELSE BEGIN
        IF IBasicItem <> '' THEN BEGIN
          IF BasicItem.GET(IManufacturer, IBasicItem) THEN
            EXIT(BasicItem."Application Unit");
        END ELSE BEGIN
          IF IItem <> '' THEN BEGIN
            IF Item.GET(IItem) THEN
              EXIT(Item."Base Unit of Measure");
          END;
        END;
      END;

      EXIT('');
    END;

    PROCEDURE GetItemRelationsPresent@1210190001() : Boolean;
    VAR
      ItemRelation@1210190000 : Record 11012319;
    BEGIN
      //Call 23762
      IF NOT ItemRelationsRead THEN
        ItemRelationsPresent := NOT ItemRelation.ISEMPTY;

      ItemRelationsRead:= TRUE;
      EXIT(ItemRelationsPresent);
    END;

    PROCEDURE GetGLSetup@1210190014();
    BEGIN
      //Call 23762
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
    END;

    PROCEDURE GetInventSetup@1210190005();
    BEGIN
      //Call 23762
      IF NOT InventSetupRead THEN BEGIN
        InventSetup.GET;
        InventSetupRead := TRUE;
      END;
    END;

    PROCEDURE GetCust@1210190007(CustNo@1210190000 : Code[20]) : Boolean;
    BEGIN
      //Call 23762
      IF CustNo <> Cust."No." THEN BEGIN
        CustPresent := Cust.GET(CustNo);
        IF NOT CustPresent THEN
          Cust.INIT;
      END;
      EXIT(CustPresent);
    END;

    LOCAL PROCEDURE GetNavisionItemInfo@1210190006(VAR ItemCde@1210190000 : Code[20];VAR DescTxt@1210190003 : Text[50];VAR DescTxt2@1210190002 : Text[50];VAR CostObject@1210190004 : Code[20];VAR CostComp@1210190001 : Code[10];CheckSetup@1210190006 : Boolean);
    VAR
      lvItemRec@1210190005 : Record 27;
    BEGIN
      //db, 20-12-11: M31760
      IF ItemCde = '' THEN
        EXIT;

      IF CheckSetup THEN BEGIN
        GetInventSetup;
        IF InventSetup."Item Info Trade Item Leading" THEN
          EXIT;
      END;
      IF NOT lvItemRec.GET(ItemCde) THEN
        EXIT;

      CostObject := lvItemRec."Global Dimension 2 Code";
      GetCostComponent(CostObject, CostComp);
      DescTxt := lvItemRec.Description;
      DescTxt2 := lvItemRec."Description 2";
      GetItemTranslation(ItemCde, DescTxt, DescTxt2);
    END;

    PROCEDURE GetNavisionItemPrices@1210190008(ItemCde@1210190004 : Code[20];VAR UnitCde@1210190003 : Code[10];VAR NettPrice@1210190002 : Decimal;VAR DiscPerc@1210190001 : Decimal;VAR GrossPrice@1210190000 : Decimal;CheckSetup@1210190005 : Boolean);
    VAR
      Item@1210190006 : Record 27;
    BEGIN
      //call 33754
      IF ItemCde = '' THEN
        EXIT;

      GetInventSetup;
      IF CheckSetup AND InventSetup."Price Info Trade Item Leading" THEN
          EXIT;

      IF NOT Item.GET(ItemCde) THEN
        EXIT;

      UnitCde := Item."Base Unit of Measure";
      IF (InventSetup."Use Direct Unit Cost as Budget") AND  //db, 05-03-07: M8248
         (Item."Replenishment System" = Item."Replenishment System"::Purchase ) THEN  //db, 28-03-08: M9270
        NettPrice := Item."Last Direct Cost"
      ELSE
        NettPrice := Item."Unit Cost";
      GrossPrice := Item."Unit Price";
      IF GrossPrice = 0 THEN GrossPrice := NettPrice;  //db, 28-11-14: C018215
      DiscPerc := 0;
      IF GrossPrice <> 0 THEN
        DiscPerc := 100 * (GrossPrice - NettPrice) / GrossPrice;
    END;

    PROCEDURE SkipErrorUnitConversion@1100409000(iSkipError@1100409000 : Boolean);
    BEGIN
      //db, 21-03-13: C002191
      SkipError := iSkipError;
    END;

    PROCEDURE ShowSalesCondition@1100525014(lvCust@1100525013 : Code[20];lvItem@1100525012 : Code[20];lvBasicItem@1100525011 : Code[20];lvTradeItem@1100525010 : Code[20];lvManufacturer@1100525009 : Code[20];lvVendor@1100525008 : Code[20];NettPrice@1100525007 : Decimal;DiscPerc@1100525006 : Decimal;GrossPrice@1100525005 : Decimal;lvRefDate@1100525004 : Date;lvCustDiscGrp@1100525003 : Code[20];lvDiscRef1@1100525002 : Code[20];lvDiscRef2@1100525001 : Code[20];lvDiscPrio@1100525000 : Code[10]);
    BEGIN
      //db, 27-05-14: C015604
      ShowSalesDiscount := TRUE;
      GetSalesDiscount(
        lvCust, lvItem, lvBasicItem, lvTradeItem, lvManufacturer, lvVendor,
        NettPrice, DiscPerc, GrossPrice, lvRefDate, lvCustDiscGrp,
        lvDiscRef1, lvDiscRef2, lvDiscPrio);
      ShowSalesDiscount := FALSE;
    END;

    LOCAL PROCEDURE "---EVRY---"@1100290003();
    BEGIN
    END;

    PROCEDURE SetPriceListCode@1100290004(_code@1100290000 : Code[10]);
    BEGIN
      // LAHE 130116
      PriceListCode := _code;
    END;

    PROCEDURE GetPriceHistFound@1100290001() : Boolean;
    BEGIN
      // LAHE 130116
      EXIT(PriceHistFound);
    END;

    PROCEDURE GetPriceHistVendorNo@1000000000() : Code[20];
    BEGIN
      // LAHE 130116
      EXIT(PriceListVendorNo);
    END;

    PROCEDURE GetLatestCustGrossPrice@1100409003() : Decimal;
    BEGIN
      // ANCA 150527
      EXIT(LatestCustGrossPrice);
    END;

    LOCAL PROCEDURE "--ITERO---"@5();
    BEGIN
    END;

    PROCEDURE SetDontUseSingleGTIN@7(setFlag@1000 : Boolean);
    BEGIN
      DontUseSingleGTIN := setFlag;
    END;

    PROCEDURE GetFoundSalesDiscRef@1100285002() : Code[20];
    BEGIN
      // 150914 ITERO.AC RFC001-2
      EXIT(gvFoundSalesDiscRef);
    END;

    BEGIN
    {
      4PS01 HBK 06-08-09: Added function SetLanguageCode and changed GetItemTranslation

      -SE EVRY-
      LAHE 130116 "Price List Code"


      150608 ITERO.DL SYM086, Error unit of measure NAV
      150912 ITERO.AC IME413 Bugfix in Sales price calculation when DetermineSalesDiscount is called from Project Cost Plus Entry and (customer) Price List Code = ''
      150914 ITERO.AC RFC001-2 Save found Discount Reference in gvFoundSalesDiscRef in order to read set the value in table "Project Cost Plus Entry", Get Function GetFoundSalesDiscRef(), Modified DetermineSalesDiscount()
    }
    END.
  }
}

