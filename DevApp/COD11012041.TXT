OBJECT Codeunit 11012041 Advice Order Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11012055;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AdviceRec@1210190004 : Record 11012055;
      AdviceRec2@1210190003 : Record 11012055;
      TmpAdviceRec@1210190029 : TEMPORARY Record 11012055;
      ReqLineRec@1210190002 : Record 246;
      ItemJnlLineRec@1210190001 : Record 83;
      ImexRec@1210190000 : Record 11012056;
      ItemRec@1210190007 : Record 27;
      TradeItemRec@1210190034 : Record 11012317;
      ServOrderRec@1100485000 : Record 11012823;
      ProjRec@1210190017 : Record 11072003;
      ProjPurchActRec@1100485008 : Record 11012026;
      ProjSetUp@1210190005 : Record 315;
      Text000@1100528301 : TextConst 'ENU=There are no %1 within the Filter.\\Filters: %2';
      Text001@1100525005 : TextConst 'ENU=Template/Batch not present for Purchase Proposal';
      Text002@1100525006 : TextConst 'ENU=%1 not set in %2';
      Text003@1210190011 : TextConst 'ENU="Order Date occurs before Today; modify Order Date automatically ?"';
      Text006@1210190008 : TextConst 'ENU=Item Unknown';
      InvtSetup@1210190036 : Record 313;
      PurchSetup@1100528901 : Record 312;
      InventoryBatchRec@1210190028 : Record 233;
      InventoryTemplateRec@1210190027 : Record 82;
      ItemUnitRec@1210190014 : Record 5404;
      VendorRec@1210190013 : Record 23;
      DimValRec@1210190023 : Record 349;
      NoSeriesMgt@1210190021 : Codeunit 396;
      DimMgt@1210190020 : Codeunit 408;
      RouteRefMgtCU@1210190019 : Codeunit 11012045;
      MakePurchOrder@1210190018 : Report 493;
      Text008@1210190024 : TextConst 'ENU=Journal Template/Batch not present for Item Journal';
      Text009@1210190032 : TextConst 'ENU=Before editing text enter the line first';
      Text010@1210190025 : TextConst 'ENU=There are %1 inverntory entries created in Item Journal.';
      Text011@1210190031 : TextConst 'ENU=First select line(s).';
      Text012@1210190030 : TextConst 'ENU=Do you want to split this advice order ?';
      Text013@1100485006 : TextConst 'ENU=Do you want to move these budget lines to Advice Orders ?';
      Text014@1100485005 : TextConst 'ENU=Remove these Budget Lines from Advice Orders ?';
      Text015@1100485010 : TextConst 'ENU="All lines are already advised; total budget will be shown"';
      Text016@1100485009 : TextConst 'ENU="No lines are advised; total budget will be shown"';
      Text017@1100525002 : TextConst 'ENU=No budget line present of project ''%1'', purchase action ''%2''.';
      Text021@1100485004 : TextConst 'ENU=No shipping Details Created';
      Text023@1100485002 : TextConst 'ENU=There are %1 Shipping Details created';
      Text024@1100485001 : TextConst 'ENU=Replace Vendor by %1';
      Text025@1100485011 : TextConst 'ENU=No Vendors modified within Selection.';
      Text026@1100525000 : TextConst 'ENU=Do you wat to divide the Advice Order Lines in order to the available inventory on the preferred locations?';
      SkipMessage@1100525001 : Boolean;
      Text027@1100525003 : TextConst 'ENU=BOM Item %1 has to be exploded';
      Text028@1210190010 : TextConst 'ENU=The Plant Requests (%1) are created.';
      TransferCommentLines@1100529800 : Boolean;
      CompressByElement@1210190022 : Boolean;
      CompressByVariContract@1210190016 : Boolean;
      Text029@1100528300 : TextConst 'ENU=This function can only be used where %1 is empty.';
      Text030@1100525004 : TextConst 'ENU=First select Lines';
      SelectionMethod@1100528900 : 'Vendor,Project,Project-Ship-to Location,Ship-to Location,Work Order';
      PrintPurchOrders@1100528909 : Boolean;
      ProcElectronicOrderType@1100528910 : Boolean;
      gCollectiveRun@1100409003 : Boolean;
      OptionsForAdviceOrderDone@1100409005 : Boolean;
      varNoSeries@1100528905 : Code[20];
      varPurchHeader@1100528902 : Record 38;
      TmpPurchHeader@1100528906 : TEMPORARY Record 38;
      PurchOrderHeader@1100528907 : Record 38;
      PurchOrderLine@1100528908 : Record 39;
      StartProcess@1100528800 : Boolean;
      LinkItemDocsToOrder@1100528000 : Boolean;
      varPeriodFilterTxt@1100409000 : Text[30];
      Text031@1100409002 : TextConst 'ENU=Function aborted';
      ToTypeSelected@1100409001 : Boolean;
      gvToType@1100409004 : 'Item Journal,Item Reclass. Journal';

    PROCEDURE SelectProjectBudget@8(IProjectNo@1210190000 : Code[20];IPurchaseAction@11012000 : Code[20];IProjectElementFilter@1100528800 : Code[20]);
    VAR
      BudgetFrm@11012001 : Page 11012005;
      BudgetRec@11012002 : Record 11012001;
    BEGIN
      BudgetRec.RESET;
      BudgetRec.SETRANGE("Project No.", IProjectNo);
      IF IProjectElementFilter <> '' THEN
        BudgetRec.SETRANGE(Element, IProjectElementFilter);
      BudgetRec.SETFILTER("Cost Type", '%1..%2', BudgetRec."Cost Type"::Material, BudgetRec."Cost Type"::Sundry);
      BudgetRec.SETRANGE(Supply,FALSE);
      IF IPurchaseAction <> '' THEN BEGIN
        BudgetRec.SETRANGE("Purchase Action", IPurchaseAction);
        IF BudgetRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            BudgetRec.MARK := TRUE;
          UNTIL BudgetRec.NEXT = 0;
        END ELSE BEGIN
          MESSAGE(Text017, IProjectNo, IPurchaseAction);
          EXIT;
        END;
        BudgetRec.MARKEDONLY(TRUE);
        CreateProjectAdvice(BudgetRec);
      END ELSE BEGIN
        CLEAR(BudgetFrm);
        BudgetFrm.SETRECORD(BudgetRec);
        BudgetFrm.SETTABLEVIEW(BudgetRec);
        BudgetFrm.SetSelectionAdvice;
        BudgetFrm.EDITABLE(FALSE);
        BudgetFrm.RUNMODAL;
      END;
    END;

    PROCEDURE SelectPurchaseAction@10(lvProj@1210190000 : Code[20]);
    BEGIN
      ProjPurchActRec.SETFILTER(Status,'>=%1',ProjPurchActRec.Status::Approved);
      ProjPurchActRec.SETFILTER("Project No.", lvProj);
      ProjPurchActRec.SETFILTER("Activate for", '%1|%2',
        ProjPurchActRec."Activate for"::" ", ProjPurchActRec."Activate for"::Advice);
      IF PAGE.RUNMODAL(PAGE::"Project Purchase Action List",ProjPurchActRec) = ACTION::LookupOK THEN BEGIN
        SelectProjectBudget(ProjPurchActRec."Project No.", ProjPurchActRec.Code, '');
      END;
    END;

    PROCEDURE SelectServiceBudget@1100485004(lvServOrder@1210190000 : Code[20]);
    VAR
      BudgetFrm@11012001 : Page 11125247;
      BudgetRec@11012002 : Record 11012875;
    BEGIN
      BudgetRec.RESET;
      BudgetRec.SETRANGE("Budget Type", BudgetRec."Budget Type"::Order);
      BudgetRec.SETRANGE("Service Order No.", lvServOrder);
      BudgetRec.SETFILTER("Cost Type", '%1..%2', BudgetRec."Cost Type"::Material, BudgetRec."Cost Type"::Sundry);
      BudgetRec.SETRANGE(Supply,FALSE);  //db, 20-12-10: M23516

      CLEAR(BudgetFrm);
      BudgetFrm.SETRECORD(BudgetRec);
      BudgetFrm.SETTABLEVIEW(BudgetRec);
      BudgetFrm.SetSelectionAdvice;
      BudgetFrm.EDITABLE(FALSE);
      BudgetFrm.RUNMODAL;
    END;

    PROCEDURE CreateProjectAdvice@1100485001(VAR gvBudgetLineRec@1100485000 : Record 11012001);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012001;
      Item@1210190001 : Record 27;
      ImexFrm@11012004 : Page 11012104;
      defDeliver@1100485004 : ' ,Location,Project Location';
      ItemTypeOpt@1210190000 : 'Item,Basic Item,Trade Item';
      defLocation@1100485003 : Code[20];
      defShippingDate@1100485002 : Date;
      lvPurchAction@1100485005 : Code[20];
      ConfirmAction@1100485006 : Boolean;
      OldAdviceRec@1100525000 : Record 11012055;
    BEGIN
      lvBudgetLineRec.COPY(gvBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        //different construction than usual because function is called from form,page and codeunit
        MARKEDONLY(TRUE);
        IF NOT FINDFIRST THEN BEGIN
          MARKEDONLY(FALSE);
          IF NOT FINDFIRST THEN BEGIN
            MESSAGE(Text030);
            EXIT;
          END;
        END;

        //** zet default project tbv tussenscherm
        ImexRec.INIT;
        ImexRec."User ID" := USERID;
        ImexRec."Process ID" := 'F51011.1';
        ImexRec.Type := ImexRec.Type::Import;
        ImexRec.Description := 'Project';
        ImexRec.Condition := "Project No.";
        IF ImexRec.INSERT THEN;   //db, 06-08-10 (PT)

        //db.sn, 06-08-10 (PT)
        ImexRec.SETRANGE("User ID", USERID);
        ImexRec.SETFILTER("Process ID", 'F51011*');
        ImexRec.SETRANGE(Type, ImexRec.Type::Export);
        ImexRec.DELETEALL;
        //db.en, 06-08-10 (PT)
        COMMIT;

        //** vraag overige defaults op
        ImexFrm.RUNMODAL;
        defLocation := '';
        defShippingDate := 0D;

        //ImexFrm.GetVars(TransferCommentLines); // **4PS MVOS, // 14586.o
        ImexFrm.GetVars(TransferCommentLines, CompressByElement, CompressByVariContract); // 14586.n, 31907+C004646

        //** lees defaults uit tussenscherm
        ImexRec.SETRANGE("User ID", USERID);
        ImexRec.SETFILTER("Process ID", 'F51011*');
        ImexRec.SETRANGE(Type, ImexRec.Type::Export);
        IF ImexRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF ImexRec.Description = 'Location' THEN
              defLocation := ImexRec.Condition;
            IF ImexRec.Description = 'Shipm.Date' THEN
              EVALUATE(defShippingDate, ImexRec.Condition);
            IF ImexRec.Description = 'Shipm.Method' THEN BEGIN
              IF ImexRec.Condition = 'PR' THEN
                defDeliver := defDeliver::" ";
              IF ImexRec.Condition = 'IL' THEN
                defDeliver := defDeliver::Location;
              IF ImexRec.Condition = 'PL' THEN
                defDeliver := defDeliver::"Project Location";
            END;
            ImexRec.DELETE;
          UNTIL ImexRec.NEXT = 0;
        END;
        COMMIT;

        lvPurchAction := GETFILTER("Purchase Action");
        IF lvPurchAction <> '' THEN
          ConfirmAction := TRUE
        ELSE
          ConfirmAction := CONFIRM(Text013,TRUE);
        IF ConfirmAction = TRUE THEN BEGIN
          REPEAT;
            IF (Advised = FALSE) AND ("Cost Type" <> "Cost Type"::Labor) THEN
            BEGIN
              //**BOM Issues.sn
              IF "Item No." <> '' THEN BEGIN
                IF ItemRec.GET("Item No.") THEN BEGIN
                  ItemRec.CALCFIELDS("Assembly BOM");
                  IF ItemRec."Logistics on Component Level" AND ItemRec."Assembly BOM" THEN
                    ERROR(Text027,"Item No.");
                END;
              END;
              //**BOM Issues.en
              Advised := TRUE;
              MODIFY;  //voorkom controle op status bevroren via aansturen tabel-modify-trigger
              AdviceRec.RESET;
              AdviceRec.SETCURRENTKEY("Project No.", Element, "Extension Contract",
                "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item");
              AdviceRec.SETRANGE("Project No.", "Project No.");
              IF NOT CompressByElement THEN // 14586.n
                AdviceRec.SETRANGE(Element, Element);
              IF NOT CompressByVariContract THEN  // 14586.n
                AdviceRec.SETRANGE("Extension Contract", "Extension Contract");
              AdviceRec.SETRANGE("Item No.", "Item No.");
              AdviceRec.SETRANGE("Basic Item", "Basic Item");
              AdviceRec.SETRANGE(Manufacturer, Manufacturer);
              AdviceRec.SETRANGE("Trade Item", "Trade Item");
              AdviceRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
              AdviceRec.SETRANGE("Project Planning Activity No.", "Project Planning Activity No."); //M30394
              AdviceRec.SETRANGE("Cost Object", "Cost Object");
              AdviceRec.SETRANGE("Cost Component", "Cost Component");
              AdviceRec.SETRANGE(Description, Description);
              AdviceRec.SETRANGE("Description 2", "Description 2");
              AdviceRec.SETRANGE("Unit of Measure", "Unit of Measure");
              AdviceRec.SETRANGE("Purchase Action", "Purchase Action");
              AdviceRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
              AdviceRec.SETRANGE("Price Agreement", "Price Agreement");
              //db.sn, 08-03-16
              AdviceRec.SETRANGE("Currency Code", "Currency Code");
              AdviceRec.SETRANGE("Currency Agreement", "Currency Agreement");
              //db.en, 08-03-16
              //IF ("Price Agreement") THEN  //27824
              //  AdviceRec.SETRANGE(Price, Price);
              //IF "Cost Type" = "Cost Type"::Subcontracting THEN  //db, 18-04-07 (melding 9380)
              //  AdviceRec.SETRANGE(Price, Price);
              IF NOT ItemLine("Item No.", "Basic Item", "Trade Item") OR ("Price Agreement") THEN  //db, 15-11-12: C003891
                AdviceRec.SETRANGE(Price, Price);
              AdviceRec.SETRANGE("Scheme Code",'');
              IF Vendor <> '' THEN
                AdviceRec.SETRANGE(Vendor, Vendor);
              AdviceRec.SETRANGE("External Text", "External Text");
              AdviceRec.SETRANGE("FSC Type Code", "FSC Type Code");  //DP00129
              AdviceRec.SETRANGE("Entity No.", "Entity No.");         //DP00481

              IF NOT AdviceRec.FINDFIRST OR ("Scheme Code" <> '') THEN BEGIN
              //IF NOT AdviceRec.FINDFIRST THEN BEGIN
                AdviceRec.INIT;
                AdviceRec."Record Type" := AdviceRec."Record Type"::Project;
                AdviceRec."Project No." := "Project No.";
                AdviceRec.VALIDATE("Line No.", 0);  //** 0=signaal voor tabeltrigger om eerst vrije volgnummer te bepalen
                AdviceRec.INSERT(TRUE);

                //db.sn, 08-03-16
                AdviceRec."Currency Code" := "Currency Code";
                AdviceRec."Currency Agreement" := "Currency Agreement";
                //db.en, 08-03-16
      //          AdviceRec.Element := Element;  call 19261
                IF NOT CompressByElement THEN // 14586.n
                  AdviceRec.VALIDATE(Element, Element);  //  call 19261
                IF NOT CompressByVariContract THEN  // 14586.n
                  AdviceRec.VALIDATE("Extension Contract", "Extension Contract"); // call 21488
                AdviceRec."Plot No." := "Plot No.";
                AdviceRec."Tender Paragraph" := "Tender Paragraph";  //db, 03-12-09
                AdviceRec."Tender Paragraph Part" := "Tender Paragraph Part";  //db, 03-12-09

                AdviceRec.Manufacturer := Manufacturer;
                AdviceRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
                IF "Trade Item" <> '' THEN
                  AdviceRec.VALIDATE("Trade Item", "Trade Item")
                ELSE
                  IF "Basic Item" <> '' THEN
                    AdviceRec.VALIDATE("Basic Item", "Basic Item")
                  ELSE
                    IF "Item No." <> '' THEN
                      AdviceRec.VALIDATE("Item No.", "Item No.");
                IF ("Item No." <> '') AND (AdviceRec."Item No." <> "Item No.") THEN
                  //if same basic item related to more Navision items with different EAN-code (unit)
                  AdviceRec.VALIDATE("Item No.", "Item No.");  //db, 31-12-03 (call 3239: see also table 11012055)
                AdviceRec.VALIDATE("Plant Type", "Plant Type"); //mg, 07-07-11: RFC605

                IF (AdviceRec."Item No." <> '') THEN BEGIN
                  IF (Item.GET(gvBudgetLineRec."Item No.")) THEN
                    AdviceRec."Item Category Code" := Item."Item Category Code";
                END;

                //db.sn, 05-07-12: W008938
                IF AdviceRec."Unit of Measure" <> "Unit of Measure" THEN BEGIN
                  OldAdviceRec := AdviceRec;
                  AdviceRec."Unit of Measure" := "Unit of Measure";
                  //adjust price before assign quantity; next function skipped by validate unit
                  AdviceRec.CheckItemUnitConversion(AdviceRec, OldAdviceRec);
                END;
                //db.en, 05-07-12: W008938

                AdviceRec."Quantity (Budget)" := Quantity;
                AdviceRec.VALIDATE("Quantity (Advice)", (AdviceRec."Quantity (Budget)" - AdviceRec."Quantity (Processed)"));
                AdviceRec.VALIDATE("Unit of Measure", "Unit of Measure");
                //IF ("Price Agreement") THEN BEGIN  //27824
                IF NOT ItemLine("Item No.", "Basic Item", "Trade Item") OR ("Price Agreement") THEN BEGIN  //db, 15-11-12: C003891
                  AdviceRec.Price := Price;
                  AdviceRec."Gross Price" := "Gross Price";
                  AdviceRec."Discount %" := "Discount %";
                END;
                AdviceRec.VALIDATE("Delivery Period");
                AdviceRec.EvaluateStartDate(defShippingDate);  //db, 16-11-09: M13846; 31907+C004646
                AdviceRec."Cost Object" := "Cost Object";
                AdviceRec."Project Planning Activity No." := "Project Planning Activity No."; //M30394
                AdviceRec."Cost Type" := "Cost Type" - 1;
                AdviceRec."Cost Component" := "Cost Component";
                AdviceRec."Variant Code" := "Variant Code";

                AdviceRec.Description := Description;
                AdviceRec."Description 2" := "Description 2";
                AdviceRec."Purchase Action" := "Purchase Action";
                AdviceRec."Purchase Phase" := "Purchase Phase";
                AdviceRec."Purchaser Code" := AdviceRec.GetDefaultPurchaser("Project No.");
                AdviceRec.VALIDATE("External Text", "External Text");
                AdviceRec.Deliver := defDeliver;
                AdviceRec."Ship To Location" := defLocation;
                AdviceRec."Purchase Route Reference" := "Purchase Route Reference";
                AdviceRec."Price Agreement" := "Price Agreement";
                IF AdviceRec."Vendor (Trade Item)" = '' THEN
                  AdviceRec.ValidateVendor;
                IF Vendor <> '' THEN
                  AdviceRec.Vendor := Vendor;
                AdviceRec."Scheme Code" := "Scheme Code";
                AdviceRec."Comments for Logistics" := "Comments for Logistics";
                AdviceRec."FSC Type Code" := "FSC Type Code";  //DP00129
                AdviceRec."Entity No." := "Entity No.";                         //DP00481
                IF AdviceRec."Entity No." <> '' THEN                            //DP00481
                  AdviceRec."Entity Type" := AdviceRec."Entity Type"::Position; //DP00481

                AdviceRec.CalculateTotal;  //db, 07-06-11: M27396
                AdviceRec.MODIFY(TRUE);

                // **4PS MVOS - Add Comment Lines only if new Advice Order Line is created.
                CopyCommentLines(lvBudgetLineRec);
              END ELSE BEGIN
                //kzwerver, 110622, sn, #27824
                CASE TRUE OF
                  "Trade Item" <> '':
                    AdviceRec.ValidateItem(ItemTypeOpt::"Trade Item");
                  "Basic Item" <> '':
                    AdviceRec.ValidateItem(ItemTypeOpt::"Basic Item");
                  "Item No." <> '':
                    AdviceRec.ValidateItem(ItemTypeOpt::Item);
                END;
                //kzwerver, 110622, en, #27824
                //IF ("Price Agreement") THEN BEGIN  //27824
                IF NOT ItemLine("Item No.", "Basic Item", "Trade Item") OR ("Price Agreement") THEN BEGIN  //db, 15-11-12: C003891
                  AdviceRec.Price := Price;
                  AdviceRec."Gross Price" := Price;
                  AdviceRec."Discount %" := 0;
                END;
                AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" + Quantity;
                AdviceRec.VALIDATE("Quantity (Advice)", (AdviceRec."Quantity (Advice)" + Quantity));
                AdviceRec.EvaluateStartDate(defShippingDate);  //db, 16-11-09: M13846; 31907+C004646
                AdviceRec.MODIFY(TRUE);
              END;
            END;
          UNTIL NEXT = 0;
        END;

        gvBudgetLineRec.CLEARMARKS;
        IF lvPurchAction = '' THEN BEGIN
          ToggleProject(1, gvBudgetLineRec);
        END ELSE BEGIN
          ProjPurchActRec.SETFILTER("Project No.", "Project No.");
          ProjPurchActRec.SETFILTER(Code, lvPurchAction);
          IF ProjPurchActRec.FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              ProjPurchActRec."Activate for" := ProjPurchActRec."Activate for"::Advice;
              ProjPurchActRec.MODIFY;
            UNTIL ProjPurchActRec.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CreateServiceAdvice@1100485005(VAR gvBudgetLineRec@1100485000 : Record 11012875);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012875;
      Item@1210190000 : Record 27;
      defDeliver@1100485004 : ' ,Location,Project Location';
      defLocation@1100485003 : Code[20];
      defShippingDate@1100485002 : Date;
      ConfirmAction@1100485006 : Boolean;
      OldAdviceRec@1100525000 : Record 11012055;
    BEGIN
      lvBudgetLineRec.COPY(gvBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(Text030);
          EXIT;
        END;

        defShippingDate := TODAY;
        ConfirmAction := CONFIRM(Text013,TRUE);
        IF ConfirmAction = TRUE THEN BEGIN
          FINDSET(TRUE, FALSE);
          REPEAT;
            IF (Advised = FALSE) AND ("Cost Type" <> "Cost Type"::Labor) THEN
            BEGIN
              Advised := TRUE;
              MODIFY;

              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
              AdviceRec.SETFILTER("Project No.", '%1', '');
              AdviceRec.SETRANGE("Service Order No.", "Service Order No.");
              AdviceRec.SETRANGE("Item No.", "Item No.");
              AdviceRec.SETRANGE("Basic Item", "Basic Item");
              AdviceRec.SETRANGE(Manufacturer, Manufacturer);
              AdviceRec.SETRANGE("Trade Item", "Trade Item");
              AdviceRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");

              AdviceRec.SETRANGE("Cost Object", "Cost Object");
              AdviceRec.SETRANGE("Cost Component", "Cost Component");
              AdviceRec.SETRANGE(Description, Description);
              AdviceRec.SETRANGE("Description 2", "Description 2");
              AdviceRec.SETRANGE("Unit of Measure", "Unit of Measure");
              AdviceRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
              AdviceRec.SETRANGE("Price Agreement", "Price Agreement");
              IF Vendor <> '' THEN
                AdviceRec.SETRANGE(Vendor, Vendor);
              IF "Cost Type" = "Cost Type"::Subcontracting THEN  //db, 18-04-07 (melding 9380)
                AdviceRec.SETRANGE(Price, Price);
              AdviceRec.SETRANGE("External Text", "External Text");

              IF NOT AdviceRec.FINDFIRST THEN BEGIN
                AdviceRec.INIT;
                AdviceRec."Record Type" := AdviceRec."Record Type"::ServOrder;
                AdviceRec.VALIDATE("Service Order No.", "Service Order No.");
                AdviceRec.VALIDATE("Line No.", 0);  //** 0=signaal voor tabeltrigger om eerst vrije volgnummer te bepalen
                AdviceRec.INSERT(TRUE);

                AdviceRec.Manufacturer := Manufacturer;
                AdviceRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
                IF "Trade Item" <> '' THEN
                  AdviceRec.VALIDATE("Trade Item", "Trade Item")
                ELSE
                  IF "Basic Item" <> '' THEN
                    AdviceRec.VALIDATE("Basic Item", "Basic Item")
                  ELSE
                    IF "Item No." <> '' THEN
                      AdviceRec.VALIDATE("Item No.", "Item No.");
                IF ("Item No." <> '') AND (AdviceRec."Item No." <> "Item No.") THEN
                  //if same basic item related to more Navision items with different EAN-code (unit)
                  AdviceRec.VALIDATE("Item No.", "Item No.");  //db, 31-12-03 (call 3239: see also table 11012055)

                IF (AdviceRec."Item No." <> '') THEN BEGIN
                  IF (Item.GET(gvBudgetLineRec."Item No.")) THEN
                    AdviceRec."Item Category Code" := Item."Item Category Code";
                END;

                //db.sn, 05-07-12: W008938
                IF AdviceRec."Unit of Measure" <> "Unit of Measure" THEN BEGIN
                  OldAdviceRec := AdviceRec;
                  AdviceRec."Unit of Measure" := "Unit of Measure";
                  //adjust price before assign quantity; next function skipped by validate unit
                  AdviceRec.CheckItemUnitConversion(AdviceRec, OldAdviceRec);
                END;
                //db.en, 05-07-12: W008938

                AdviceRec."Quantity (Budget)" := Quantity;
                AdviceRec.VALIDATE("Quantity (Advice)", (AdviceRec."Quantity (Budget)" - AdviceRec."Quantity (Processed)"));
                AdviceRec.VALIDATE("Unit of Measure", "Unit of Measure");
                AdviceRec.Price := Price;
                AdviceRec."Gross Price" := "Gross Price";
                AdviceRec."Discount %" := "Discount %";
                AdviceRec.VALIDATE("Delivery Period");
                AdviceRec.EvaluateStartDate(defShippingDate);  //db, 16-11-09: M13846; 31907+C004646
                AdviceRec."Cost Object" := "Cost Object";
                AdviceRec."Cost Type" := "Cost Type" - 1;
                AdviceRec."Cost Component" := "Cost Component";
                AdviceRec."Variant Code" := "Variant Code";
                AdviceRec."Additional Cost (Service)" := "Additional Cost";

                AdviceRec.Description := Description;
                AdviceRec."Description 2" := "Description 2";
                AdviceRec.VALIDATE("External Text", "External Text");
                AdviceRec.Deliver := defDeliver;
                AdviceRec."Ship To Location" := defLocation;
                AdviceRec."Purchase Route Reference" := "Purchase Route Reference";
                AdviceRec."Price Agreement" := "Price Agreement";
                IF Vendor <> '' THEN
                  AdviceRec.Vendor := Vendor;
                //db.sn, 20-12-10: M23516
                AdviceRec."Scheme Code" := "Scheme Code";
                AdviceRec."Comments for Logistics" := "Comments for Logistics";
                //db.en, 20-12-10: M23516
                AdviceRec.CalculateTotal;  //db, 07-06-11: M27396
                AdviceRec.MODIFY(TRUE);
              END ELSE BEGIN
                AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" + Quantity;
                AdviceRec.VALIDATE("Quantity (Advice)", (AdviceRec."Quantity (Advice)" + Quantity));
                AdviceRec.VALIDATE("Receipt Date", defShippingDate);
                IF AdviceRec."Delivery Period" = '' THEN
                  AdviceRec.VALIDATE("Order Date", AdviceRec."Receipt Date");
                AdviceRec.MODIFY(TRUE);
              END;
            END;
          UNTIL NEXT = 0;
        END;

        gvBudgetLineRec.CLEARMARKS;
        ToggleService(1, gvBudgetLineRec);
      END;
    END;

    PROCEDURE RemoveProjectAdvice@1100485000(VAR gvBudgetLineRec@1100485000 : Record 11012001);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012001;
    BEGIN
      lvBudgetLineRec.COPY(gvBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(Text030);
          EXIT;
        END;

        IF CONFIRM(Text014,TRUE) THEN BEGIN
          FINDSET(TRUE,FALSE);
          REPEAT;
            IF (Advised = TRUE) AND ("Cost Type" <> "Cost Type"::Labor) THEN
            BEGIN
              Advised := FALSE;
              MODIFY;  //voorkom controle op status bevroren via aansturen tabel-modify-trigger

              AdviceRec.SETCURRENTKEY("Project No.", Element, "Extension Contract",
                "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item");
              AdviceRec.SETRANGE("Project No.", "Project No.");
              AdviceRec.SETRANGE(Element, Element);
              AdviceRec.SETRANGE("Extension Contract", "Extension Contract");
              AdviceRec.SETRANGE("Item No.", "Item No.");
              AdviceRec.SETRANGE("Basic Item", "Basic Item");
              AdviceRec.SETRANGE(Manufacturer, Manufacturer);
              AdviceRec.SETRANGE("Trade Item", "Trade Item");
              AdviceRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
              AdviceRec.SETRANGE("Cost Object", "Cost Object");
              AdviceRec.SETRANGE("Project Planning Activity No.", "Project Planning Activity No."); //M30394
              AdviceRec.SETRANGE("Cost Component", "Cost Component");
              AdviceRec.SETRANGE(Description, Description);
              AdviceRec.SETRANGE("Description 2", "Description 2");
              AdviceRec.SETRANGE("Unit of Measure", "Unit of Measure");
              AdviceRec.SETRANGE("Purchase Action", "Purchase Action");
              AdviceRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
              AdviceRec.SETRANGE("Price Agreement", "Price Agreement");
              IF Vendor <> '' THEN
                AdviceRec.SETRANGE(Vendor, Vendor);
              IF "Cost Type" = "Cost Type"::Subcontracting THEN  //db, 18-04-07 (melding 9380)
                AdviceRec.SETRANGE(Price, Price);
              AdviceRec.SETRANGE("External Text", "External Text");
              IF AdviceRec.FINDSET(TRUE, FALSE) THEN BEGIN
                AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" - Quantity;
                AdviceRec."Quantity (Advice)" := AdviceRec."Quantity (Advice)" - Quantity;
                IF AdviceRec."Quantity (Advice)" = 0 THEN BEGIN
                  AdviceRec.DELETE(TRUE);
                END ELSE BEGIN
                  AdviceRec.CalculateTotal;  //db, 07-06-11: M27396
                  AdviceRec.MODIFY(TRUE);
                END;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      gvBudgetLineRec.CLEARMARKS;
      ToggleProject(2, gvBudgetLineRec);
    END;

    PROCEDURE RemoveServiceAdvice@1100485008(VAR gvBudgetLineRec@1100485000 : Record 11012875);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012875;
    BEGIN
      lvBudgetLineRec.COPY(gvBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(Text030);
          EXIT;
        END;
        IF CONFIRM(Text014,TRUE) THEN BEGIN
          FINDSET(TRUE,FALSE);
          REPEAT;
            IF (Advised = TRUE) AND ("Cost Type" <> "Cost Type"::Labor) THEN
            BEGIN
              Advised := FALSE;
              MODIFY;

              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
              AdviceRec.SETFILTER("Project No.", '%1', '');
              AdviceRec.SETRANGE("Service Order No.", "Service Order No.");
              AdviceRec.SETRANGE("Item No.", "Item No.");
              AdviceRec.SETRANGE("Basic Item", "Basic Item");
              AdviceRec.SETRANGE(Manufacturer, Manufacturer);
              AdviceRec.SETRANGE("Trade Item", "Trade Item");
              AdviceRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
              AdviceRec.SETRANGE("Cost Object", "Cost Object");
              AdviceRec.SETRANGE("Cost Component", "Cost Component");
              AdviceRec.SETRANGE(Description, Description);
              AdviceRec.SETRANGE("Description 2", "Description 2");
              AdviceRec.SETRANGE("Unit of Measure", "Unit of Measure");
              AdviceRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
              AdviceRec.SETRANGE("Price Agreement", "Price Agreement");
              IF Vendor <> '' THEN
                AdviceRec.SETRANGE(Vendor, Vendor);
              IF "Cost Type" = "Cost Type"::Subcontracting THEN  //db, 18-04-07 (melding 9380)
                AdviceRec.SETRANGE(Price, Price);
              AdviceRec.SETRANGE("External Text", "External Text");
              IF AdviceRec.FINDSET(TRUE, FALSE) THEN BEGIN
                AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" - Quantity;
                AdviceRec."Quantity (Advice)" := AdviceRec."Quantity (Advice)" - Quantity;
                IF AdviceRec."Quantity (Advice)" = 0 THEN BEGIN
                  AdviceRec.DELETE(TRUE)
                END ELSE BEGIN
                  AdviceRec.CalculateTotal;  //db, 07-06-11: M27396
                  AdviceRec.MODIFY(TRUE);
                END;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      gvBudgetLineRec.CLEARMARKS;
      ToggleService(2, gvBudgetLineRec);
    END;

    PROCEDURE ToggleProject@5(Phase@11012000 : Integer;VAR gvBudgetLineRec@1100485000 : Record 11012001);
    BEGIN
      WITH gvBudgetLineRec DO BEGIN
        IF Phase = 0 THEN
          SETRANGE(Advised);
        IF Phase = 1 THEN
          SETRANGE(Advised, FALSE);
        IF Phase = 2 THEN
          SETRANGE(Advised, TRUE);
        IF NOT FINDFIRST THEN BEGIN
          SETRANGE(Advised);
          IF Phase = 1 THEN
            MESSAGE(Text015);
          IF Phase = 2 THEN
            MESSAGE(Text016);
        END;
      END;
    END;

    PROCEDURE ToggleService@1100485006(Phase@11012000 : Integer;VAR gvBudgetLineRec@1100485000 : Record 11012875);
    BEGIN
      WITH gvBudgetLineRec DO BEGIN
        IF Phase = 0 THEN
          SETRANGE(Advised);
        IF Phase = 1 THEN
          SETRANGE(Advised, FALSE);
        IF Phase = 2 THEN
          SETRANGE(Advised, TRUE);
        IF NOT FINDFIRST THEN BEGIN
          SETRANGE(Advised);
          IF Phase = 1 THEN
            MESSAGE(Text015);
          IF Phase = 2 THEN
            MESSAGE(Text016);
        END;
      END;
    END;

    PROCEDURE ProcessPurchaseRequisition@1100525007(VAR gvAdviceRec@1210190001 : Record 11012055);
    VAR
      PurchaseBatchRec@1100525001 : Record 245;
      lvPurchHeadRec@1210190006 : Record 38;
      LineNumber@11012000 : Integer;
      ConFirmAnswered@11012002 : Boolean;
      LastRefNo@1210190002 : Code[20];
      lvNoSeries@1210190005 : Code[10];
      lvFactor@1100485000 : Decimal;
      lvBaseUnit@1100485001 : Code[20];
      StrategicPurchMgt@1100525000 : Codeunit 11020211;
      AdviceRec2@1100525002 : Record 11012055;
    BEGIN
      //C014851: Anonymous Purchase Requisition Lines will be created (not related to Project or Service Order).
      IF NOT ProjSetUp.GET THEN ProjSetUp.INIT;
      IF NOT PurchaseBatchRec.GET(ProjSetUp."Purchase Journal Template", ProjSetUp."Purchase Journal Batch") THEN
        ERROR(Text001);

      AdviceRec.COPY(gvAdviceRec);
      AdviceRec.MARKEDONLY(TRUE);
      IF NOT AdviceRec.FINDFIRST THEN
        AdviceRec.MARKEDONLY(FALSE);

      AdviceRec.FILTERGROUP(8); //user filters are kept
      AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Requisition);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.SETFILTER("Source Type", '<>%1', AdviceRec."Source Type"::"Recipe Header");
      AdviceRec.CALCFIELDS("Consent Lines Available", "Consent Lines Serv. Available");
      AdviceRec.SETRANGE("Consent Lines Available", FALSE);
      AdviceRec.SETRANGE("Consent Lines Serv. Available", FALSE);
      IF NOT AdviceRec.FINDFIRST THEN
        IF NOT ProjSetUp."Release Advice Order Mandatory"  THEN
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);

      IF NOT AdviceRec.FINDSET(FALSE) THEN BEGIN
        IF GUIALLOWED THEN
          MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
        EXIT;
      END;

      InvtSetup.GET;
      //IF NOT ItemRec.GET(InvtSetup."Default Item") THEN
      //  ERROR(Text002, InvtSetup.FIELDCAPTION("Default Item"), InvtSetup.TABLECAPTION); voorlopig niet implementeren

      //Confirm before locking
      REPEAT
        IF (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          IF NOT CONFIRM(Text003, TRUE) THEN
            ERROR('');
          ConFirmAnswered := TRUE;
       END;
      UNTIL (AdviceRec.NEXT = 0) OR ConFirmAnswered;

      IF NOT AdviceRec.FINDFIRST THEN EXIT;

      LastRefNo := '';

      ReqLineRec.LOCKTABLE;
      ReqLineRec.RESET;
      ReqLineRec.SETRANGE("Worksheet Template Name", ProjSetUp."Purchase Journal Template");
      ReqLineRec.SETRANGE("Journal Batch Name", ProjSetUp."Purchase Journal Batch");
      IF ReqLineRec.FINDLAST THEN
        LineNumber := ReqLineRec."Line No."
      ELSE
        LineNumber := 0;

      AdviceRec.FINDSET(TRUE);
      REPEAT
        StrategicPurchMgt.CheckStratPurchForAdviceOrder(AdviceRec);
        AdviceRec.TESTFIELD("Order Date");
        AdviceRec.CheckRecordType(1); //check status of project/service order
        AdviceRec.CheckDeliver;
        IF (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          //Already permitted in 'Confirm before locking', see above
          AdviceRec."Order Date" := TODAY;
          AdviceRec.VALIDATE("Delivery Period");
        END;

        AdviceRec.VALIDATE("Ship To Location");

        ReqLineRec.INIT;
        ReqLineRec."Worksheet Template Name" := ProjSetUp."Purchase Journal Template";
        ReqLineRec."Journal Batch Name" := ProjSetUp."Purchase Journal Batch";
        ReqLineRec."Line No." := LineNumber + 1;
        ReqLineRec.INSERT;
        LineNumber := ReqLineRec."Line No.";

        ReqLineRec.VALIDATE(Deliver, AdviceRec.Deliver);
        //ReqLineRec."Ship To Location" := AdviceRec."Ship To Location";
        ReqLineRec.VALIDATE("Ship To Location", AdviceRec."Ship To Location");  //CALL C015571

        IF AdviceRec."Quantity (Advice)" < 0 THEN
            AdviceRec.FIELDERROR("Quantity (Advice)");

        ReqLineRec.Quantity := AdviceRec."Quantity (Advice)";
        ReqLineRec.Type := ReqLineRec.Type::Item;
        ReqLineRec."Scheme Code" := AdviceRec."Scheme Code";
        lvFactor := 1;
        IF (AdviceRec."Item No." <> '') AND (AdviceRec."Trade Item" + AdviceRec."Basic Item" = '') THEN BEGIN
          ReqLineRec.VALIDATE("No.", AdviceRec."Item No.");
          ReqLineRec.Manufacturer := AdviceRec.Manufacturer;
          ReqLineRec."Vendor (Trade Item)" := AdviceRec."Vendor (Trade Item)";
          ReqLineRec."Basic Item" := AdviceRec."Basic Item";
          ReqLineRec."Trade Item" := AdviceRec."Trade Item";
        END ELSE BEGIN
          //ReqLineRec.VALIDATE("No.", InvtSetup."Default Item");voorlopig niet implementeren
          IF AdviceRec."Trade Item" <> '' THEN BEGIN
            ReqLineRec."Vendor (Trade Item)" := AdviceRec."Vendor (Trade Item)";
            ReqLineRec.VALIDATE("Trade Item", AdviceRec."Trade Item");
            TradeItemRec.GET(AdviceRec."Vendor (Trade Item)", AdviceRec."Trade Item");
            IF AdviceRec."Unit of Measure" = UPPERCASE(TradeItemRec."Packaging Unit") THEN BEGIN
              lvFactor := TradeItemRec."Qty. per Unit of Measure";
              lvBaseUnit := TradeItemRec."Application Unit";
            END;
          END ELSE BEGIN
            IF AdviceRec."Basic Item" <> '' THEN BEGIN
              ReqLineRec.Manufacturer := AdviceRec.Manufacturer;
              ReqLineRec.VALIDATE("Basic Item", AdviceRec."Basic Item");
              IF AdviceRec."Trade Item" = '' THEN
                TradeItemVendor;
            END;
          END;
        END;

        //IF ReqLineRec."No." = '' THEN
        //  ReqLineRec."No." := InvtSetup."Default Item"; voorlopig niet implementeren

        AdviceRec.TESTFIELD(Vendor);
        VendorRec.GET(AdviceRec.Vendor);
        ReqLineRec.VALIDATE("Vendor No.", AdviceRec.Vendor);
        ReqLineRec."Order Address Code" := AdviceRec."Order Address Code";
        ReqLineRec.Description := AdviceRec.Description;
        ReqLineRec."Description 2" := AdviceRec."Description 2";
        ReqLineRec."Comments for Logistics" := AdviceRec."Comments for Logistics";
        ReqLineRec."Sales Price" := AdviceRec."Sales Price";
        ReqLineRec."Unit of Measure Code" := AdviceRec."Unit of Measure";
        IF NOT ItemUnitRec.GET(ReqLineRec."No.", ReqLineRec."Unit of Measure Code") THEN BEGIN
          ItemUnitRec.INIT;
          ItemUnitRec."Item No." := ReqLineRec."No.";
          ItemUnitRec.Code := ReqLineRec."Unit of Measure Code";
          ItemUnitRec."Qty. per Unit of Measure" := 1;
          ItemUnitRec.INSERT;
        END;
        IF (lvFactor <> 0) AND (lvFactor <> 1) THEN BEGIN
          ReqLineRec.Quantity := AdviceRec."Quantity (Advice)" * lvFactor;
          ReqLineRec.VALIDATE("Unit of Measure Code", lvBaseUnit);
        END ELSE BEGIN
          ReqLineRec.VALIDATE("Unit of Measure Code", AdviceRec."Unit of Measure");
        END;
        AdviceRec.TESTFIELD("Cost Object");
        DimMgt.GetDimValueRec(2,AdviceRec."Cost Object",DimValRec,TRUE,'');
        ReqLineRec.VALIDATE("Shortcut Dimension 2 Code", AdviceRec."Cost Object");
        ReqLineRec."Cost Component" := AdviceRec."Cost Component";
        ReqLineRec."Price Agreement" := AdviceRec."Price Agreement";
        ReqLineRec."Direct Unit Cost" := AdviceRec.Price;
        ReqLineRec."Unit Cost (LCY)" := AdviceRec.Price;
        IF (lvFactor <> 0) AND (lvFactor <> 1) THEN BEGIN
          ReqLineRec."Direct Unit Cost" := ReqLineRec."Direct Unit Cost" / lvFactor;
          ReqLineRec."Unit Cost (LCY)" := ReqLineRec."Unit Cost (LCY)"/ lvFactor;
        END;
        ReqLineRec."Unit Price (LCY)" := AdviceRec."Gross Price";
        ReqLineRec."Discount % (Item)" := AdviceRec."Discount %";
        IF ReqLineRec."Currency Factor" <> 0 THEN
          ReqLineRec."Direct Unit Cost":= ReqLineRec."Direct Unit Cost" * ReqLineRec."Currency Factor";
        ReqLineRec."Purchase Action" := AdviceRec."Purchase Action";
        ReqLineRec."Purchase Phase" := AdviceRec."Purchase Phase";
        ReqLineRec."Due Date" := AdviceRec."Receipt Date";
        ReqLineRec."Order Date" := AdviceRec."Order Date";
        ReqLineRec.VALIDATE(Text, AdviceRec."External Text");
        ReqLineRec."Item Category Code" := AdviceRec."Item Category Code";
        ReqLineRec."Created by" := USERID;
        ReqLineRec."Date Created" := TODAY;

        StrategicPurchMgt.FindContractForAdviceOrder(AdviceRec);
        ReqLineRec."Accept Action Message" := TRUE;

        ReqLineRec."Use Blanket Order" :=
          AdviceRec."Contract Type" IN [
            AdviceRec."Contract Type"::"General Blanket Order",
            AdviceRec."Contract Type"::"Project Blanket Order",
            AdviceRec."Contract Type"::"Service Blanket Order"];

        ReqLineRec."Contract Type" := AdviceRec."Contract Type";
        //IF AdviceRec.Deliver = AdviceRec.Deliver::Location THEN BEGIN
        IF (AdviceRec.Deliver = AdviceRec.Deliver::Location) AND (ReqLineRec."Location Code" = '') THEN BEGIN //Call C015571
          ReqLineRec."Location Code" := AdviceRec."Location Code";
          ReqLineRec."Bin Code" := AdviceRec."Bin Code (Project Inventory)";
        END;

        IF (AdviceRec."Purchase Route Reference" <> '') THEN BEGIN
          ReqLineRec."Purchase Route Reference" := AdviceRec."Purchase Route Reference";
        END ELSE BEGIN
          IF (LastRefNo = '') THEN
            LastRefNo := RouteRefMgtCU.GetLastRefNo();
          LastRefNo := INCSTR(LastRefNo);
          ReqLineRec."Purchase Route Reference" := LastRefNo;
        END;
        ReqLineRec."Modified by" := USERID;
        ReqLineRec."Last Date Modified" := TODAY;
        ReqLineRec."Variant Code" := AdviceRec."Variant Code";
        ReqLineRec."FSC Type Code" := AdviceRec."FSC Type Code";
        AdviceRec.CALCFIELDS("Shelf No. (Item)");
        ReqLineRec."Shelf No. (Item)" := AdviceRec."Shelf No. (Item)";
        ReqLineRec.GetItemComposition;
        ReqLineRec.MODIFY;

        //db.sn, 27-03-15: C021893
        AdviceRec2.COPY(AdviceRec);  //don't disturbe pointer on original selection
        AdviceRec2."Purchase Route Reference" := ReqLineRec."Purchase Route Reference";
        AdviceRec2."Quantity (Advice)" := AdviceRec2."Quantity (Advice)" - ReqLineRec.Quantity;
        AdviceRec2."Quantity (Processed)" := AdviceRec2."Quantity (Processed)" + ReqLineRec.Quantity;
        IF AdviceRec2."Quantity (Processed)" < AdviceRec2."Quantity (Budget)" THEN BEGIN
          AdviceRec2.ProcessOpenStatus;
        END ELSE BEGIN
          AdviceRec2.ProcessCloseStatus;
        END;
        SaveAdviceRec(AdviceRec2);
        AdviceRec2.MODIFY(TRUE);
        RestoreAdviceRec(AdviceRec2);
        //db.en, 27-03-15: C021893

      UNTIL AdviceRec.NEXT = 0;

      IF (LastRefNo <> '') THEN
        RouteRefMgtCU.WriteLastRefNo(LastRefNo);

      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE ProcessGenQuote@1210190006(VAR gvAdviceRec@1210190002 : Record 11012055);
    VAR
      AdviceOrderLine@1210190001 : Record 11012055;
      lvGenQuoteFromAdvOrderCU@1210190000 : Codeunit 11012047;
    BEGIN
      AdviceOrderLine.COPY(gvAdviceRec);
      AdviceOrderLine.SETRANGE("Project No.", gvAdviceRec."Project No.");
      lvGenQuoteFromAdvOrderCU.GenerateQuoteFromAdvOrder(AdviceOrderLine);
      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE ProcessPurchase@2(VAR gvAdviceRec@1210190001 : Record 11012055;CollectRun@1210190000 : Boolean;ItemRun@1210190003 : Boolean);
    BEGIN
      //DP00137
      //in this function ReqLine (codeunit 333) is skipped, but interface (report 493) is still used for old and new procedure

      TmpAdviceRec.DELETEALL;
      TmpPurchHeader.DELETEALL;
      COMMIT; //NAV2016 needed in case of workflow on table PurchHeader.

      CheckAdviceBeforeProcessing(gvAdviceRec, CollectRun, ItemRun);
      IF StartProcess THEN  // C003664.n
        CreatePurchaseOrders;

      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE ProcessInventory@3(VAR gvAdviceRec@1210190000 : Record 11012055;CollectRun@1210190001 : Boolean;ItemRun@1210190002 : Boolean) Counter : Integer;
    VAR
      LastRefNo@1100409000 : Code[20];
    BEGIN
      InvtSetup.GET;
      IF NOT ProjSetUp.GET THEN ProjSetUp.INIT;

      IF CollectRun = FALSE THEN BEGIN
        AdviceRec.COPY(gvAdviceRec);
        AdviceRec.MARKEDONLY(TRUE);
        IF NOT AdviceRec.FINDFIRST THEN
          AdviceRec.MARKEDONLY(FALSE);  //db, 18-01-12: M32140
        AdviceRec.FILTERGROUP(8); //call 33763, user filters are kept
        IF ItemRun = FALSE THEN BEGIN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
            AdviceRec.SETRANGE("Project No.", AdviceRec."Project No.");
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
            AdviceRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
        END;
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;
      AdviceRec.FILTERGROUP(8); //call 33763, user filters are kept
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Inventory);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.CALCFIELDS("Logistics on Component Level"); // Call 27339
      AdviceRec.SETRANGE("Logistics on Component Level",FALSE);  // Call 27339
      AdviceRec.CALCFIELDS("Consent Lines Available", "Consent Lines Serv. Available");
      AdviceRec.SETRANGE("Consent Lines Available", FALSE);
      AdviceRec.SETRANGE("Consent Lines Serv. Available", FALSE);
      IF NOT AdviceRec.FINDFIRST THEN
        IF (ProjSetUp."Release Advice Order Mandatory" = TRUE) THEN BEGIN
          IF (AdviceRec.COUNT = 0) AND GUIALLOWED THEN
            MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
          EXIT;
        END ELSE
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);

      IF (NOT AdviceRec.FINDFIRST) THEN BEGIN
        IF (AdviceRec.COUNT = 0) AND GUIALLOWED THEN
          MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
        EXIT;
      END;

      // C017980 sn Check if Item 'Transfer' is possible instead of 'Sales'
      // C019988 CodeUnit Sometimes called when transaction is on, resulting in runtime-error.
      IF NOT ToTypeSelected THEN
        SelectToTypeAndBatch(gvToType);
      // C017980 en

      Counter := 0;
      REPEAT
        AdviceRec2.COPY(AdviceRec);

        IF (AdviceRec2."Supplying Company Inventory" = '') THEN BEGIN
          IF InvtSetup."Location Mandatory" THEN
            AdviceRec2.TESTFIELD("Location Code");
          AdviceRec2.VALIDATE("Location Code");
          AdviceRec2.VALIDATE("Ship To Location");
          //C025259.sn
          IF (AdviceRec."Record Type" = AdviceRec."Record Type"::Project) AND (AdviceRec.Element = '') THEN BEGIN
            ProjRec.GET(AdviceRec."Project No.");
            IF ProjRec."Posting Element Mandatory" THEN
              AdviceRec.TESTFIELD(Element);
          END;
          //C025259.en

          ItemJnlLineRec.LOCKTABLE;
          ItemJnlLineRec.INIT;
          IF gvToType = gvToType::"Item Journal" THEN
            ItemJnlLineRec."Line No." := GetBatchAndLastLineNo(AdviceRec2."Location Code",InventoryBatchRec) + 1
          ELSE
            //C017980 sn
            ItemJnlLineRec."Line No." := GetBatchAndLastLineNoInventory(InventoryBatchRec) + 1;
            //C017980 en
          ItemJnlLineRec."Journal Template Name" := InventoryBatchRec."Journal Template Name";
          ItemJnlLineRec."Journal Batch Name" := InventoryBatchRec.Name;
          ItemJnlLineRec.INSERT(TRUE);

          ItemJnlLineRec."Origin Type Line" := ItemJnlLineRec."Origin Type Line"::AdviceOrderLine;
          IF InventoryBatchRec."No. Series" <> '' THEN BEGIN
            CLEAR(NoSeriesMgt);
            ItemJnlLineRec."Document No." := NoSeriesMgt.GetNextNo(InventoryBatchRec."No. Series",0D,FALSE);
          END;
          ItemJnlLineRec."Salespers./Purch. Code" := AdviceRec2."Purchaser Code";  //34477.n
          IF AdviceRec2."Record Type" = AdviceRec2."Record Type"::Project THEN
            ItemJnlLineRec.VALIDATE("Job No.", AdviceRec2."Project No.");
          IF AdviceRec2."Record Type" = AdviceRec2."Record Type"::ServOrder THEN BEGIN
            ItemJnlLineRec."Additional Cost (Service)" := AdviceRec2."Additional Cost (Service)";
            ItemJnlLineRec.VALIDATE("Service Order No.", AdviceRec2."Service Order No.");
          END;
          ItemJnlLineRec.Element := AdviceRec2.Element;
          ItemJnlLineRec."Extension Contract" := AdviceRec2."Extension Contract";
          ItemJnlLineRec."Location Code" := AdviceRec2."Location Code";
          IF AdviceRec2."Quantity (Advice)" < 0 THEN
            AdviceRec2.FIELDERROR("Quantity (Advice)");
          ItemJnlLineRec.Quantity := AdviceRec2."Quantity (Advice)";
          ItemJnlLineRec."Delivery Date" := AdviceRec2."Receipt Date";
          IF gvToType = gvToType::"Item Journal" THEN
            ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Sale
          ELSE
           //C017980 sn
            ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Transfer;
           //C017980 en
          ItemJnlLineRec."Posting Date" := TODAY;
          ItemJnlLineRec."Document Date" := TODAY;
          ItemJnlLineRec."Source Code" := InventoryTemplateRec."Source Code";
          ItemJnlLineRec."Reason Code" := InventoryBatchRec."Reason Code";
          IF NOT ItemRec.GET(AdviceRec2."Item No.") THEN
            ERROR(Text006)
          ELSE
            ItemJnlLineRec.VALIDATE("Item No.", AdviceRec2."Item No.");
          ItemJnlLineRec."Bin Code" := AdviceRec2."Bin Code";  //db, 30-03-11
          ItemJnlLineRec."Bin Code (Project Inventory)" := AdviceRec2."Bin Code (Project Inventory)";  //db, 30-03-11
          ItemJnlLineRec.VALIDATE("Unit of Measure Code", AdviceRec2."Unit of Measure");
          AdviceRec2.TESTFIELD("Cost Object");
          DimMgt.GetDimValueRec(2,AdviceRec2."Cost Object",DimValRec,TRUE,'');
          ItemJnlLineRec.VALIDATE("Shortcut Dimension 2 Code", AdviceRec2."Cost Object");
          ItemJnlLineRec."Cost Component" := AdviceRec2."Cost Component";
          ItemJnlLineRec.Description := AdviceRec2.Description;
          ItemJnlLineRec."Description 2" := AdviceRec2."Description 2";
          IF AdviceRec2.Deliver = AdviceRec2.Deliver::"Service Location" THEN
            ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::"Service Location"
          ELSE
            IF AdviceRec2.Deliver = AdviceRec2.Deliver::"Project Location" THEN
              ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::"Project Location"
            ELSE
              ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::Location;
          IF gvToType = gvToType::"Item Journal" THEN
            ItemJnlLineRec."Ship To Location" := AdviceRec2."Ship To Location"
          ELSE
            //C017980 sn
            ItemJnlLineRec.VALIDATE("New Location Code", AdviceRec2."Ship To Location");
            //C017980 en
          ItemJnlLineRec.VALIDATE(Text, AdviceRec2."External Text");
          ItemJnlLineRec.Blocked := InvtSetup."Default Blocked";
          ItemJnlLineRec."Entity Type" := AdviceRec2."Entity Type";
          ItemJnlLineRec."System No." := AdviceRec2."System No.";
          ItemJnlLineRec."Yard No." := AdviceRec2."Yard No.";
          ItemJnlLineRec."Entity No." := AdviceRec2."Entity No.";
          ItemJnlLineRec."Cable Transit Pos." := AdviceRec2."Cable Transit Pos.";
          ItemJnlLineRec."Comments for Logistics" := AdviceRec2."Comments for Logistics";
          ItemJnlLineRec."Variant Code" := AdviceRec2."Variant Code";
          ItemJnlLineRec."Item Category Code" := AdviceRec."Item Category Code";
          ItemJnlLineRec."Delivery Time" := AdviceRec2."Delivery Time";
          //DP00629.sn
          IF AdviceRec2."Purchase Route Reference" = '' THEN BEGIN
            LastRefNo := RouteRefMgtCU.GetLastRefNo();
            LastRefNo := INCSTR(LastRefNo);
            AdviceRec2."Purchase Route Reference" := LastRefNo;
            RouteRefMgtCU.WriteLastRefNo(LastRefNo);
          END;
          ItemJnlLineRec."Purchase Route Reference" := AdviceRec2."Purchase Route Reference";
          //DP00629.en
        IF (AdviceRec2."Supplying Company Inventory" = '') THEN
          ItemJnlLineRec.MODIFY(TRUE)  //db, 27-04-10: fill quantity (reserved)
        END ELSE BEGIN
          WriteInventoryOrderLine(AdviceRec2);

          ItemJnlLineRec.Quantity := AdviceRec2."Quantity (Advice)"; //see test below
        END;
        Counter := Counter + 1;

        AdviceRec2."Quantity (Advice)" := AdviceRec2."Quantity (Advice)" - ItemJnlLineRec.Quantity;
        AdviceRec2."Quantity (Processed)" := AdviceRec2."Quantity (Processed)" + ItemJnlLineRec.Quantity;
        IF AdviceRec2."Quantity (Processed)" < AdviceRec2."Quantity (Budget)" THEN BEGIN
          AdviceRec2.ProcessOpenStatus;  //db, 09-12-11: M31310
        END ELSE BEGIN
          AdviceRec2.ProcessCloseStatus;  //db, 09-12-11: M31310
        END;
        SaveAdviceRec(AdviceRec2);
        AdviceRec2.MODIFY(TRUE);
        RestoreAdviceRec(AdviceRec2);
      UNTIL AdviceRec.NEXT = 0;

      IF NOT SkipMessage THEN
        MESSAGE(Text010, Counter);

      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE ProcessPlant@1210190008(VAR gvAdviceRec@1210190001 : Record 11012055;CollectRun@1210190000 : Boolean;ItemRun@1210190003 : Boolean);
    VAR
      PlantSetup@1210190013 : Record 11012550;
      PlantRequest@1210190007 : Record 11020520;
      PlantRequestLine@1210190008 : Record 11020521;
      PlantLocation@1210190015 : Record 11012554;
      LineNumber@11012000 : Integer;
      ConFirmAnswered@11012002 : Boolean;
      CheckElementMandatory@1210190014 : Boolean;
      DateFormula@11012003 : Text[30];
      LastPlantLocation@1210190006 : Code[20];
      CreatedRequestNos@1210190009 : Text[30];
      FirstRequestNo@1210190010 : Code[20];
      LastRequestNo@1210190011 : Code[20];
      LastReceiptDate@1210190012 : Date;
    BEGIN
      //mg, 07-07-11: RFC605
      IF NOT ProjSetUp.GET THEN ProjSetUp.INIT;

      IF NOT CollectRun THEN BEGIN
        AdviceRec.COPY(gvAdviceRec);
        AdviceRec.MARKEDONLY(TRUE);
        IF NOT AdviceRec.FINDFIRST THEN
          AdviceRec.MARKEDONLY(FALSE);
        AdviceRec.FILTERGROUP(8); //call 33763, user filters are kept
        IF NOT ItemRun THEN BEGIN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN BEGIN
            AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::Project);
            AdviceRec.SETRANGE("Project No.", AdviceRec."Project No.");
          END;
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN BEGIN
            AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
            AdviceRec.SETFILTER("Project No.", '%1', '');
            AdviceRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
          END;
        END;
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;
      AdviceRec.FILTERGROUP(8); //call 33763, user filters are kept
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Plant);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.SETFILTER("Source Type", '<>%1', AdviceRec."Source Type"::"Recipe Header");  //db, 24-06-11: M15569
      AdviceRec.CALCFIELDS("Consent Lines Available", "Consent Lines Serv. Available");
      AdviceRec.SETRANGE("Consent Lines Available", FALSE);
      AdviceRec.SETRANGE("Consent Lines Serv. Available", FALSE);
      IF NOT AdviceRec.FINDFIRST THEN
        IF ProjSetUp."Release Advice Order Mandatory" THEN
          EXIT
        ELSE
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);
      IF NOT AdviceRec.FINDSET(FALSE) THEN EXIT;

      //Confirm before locking
      PlantSetup.GET;
      REPEAT
        AdviceRec.TESTFIELD("Plant Location");
        //IF PlantSetup."Plant Order Element Mandatory" THEN  //*32519.o
        //  AdviceRec.TESTFIELD(Element);                     //*32519.o
        //*32519.sn
        //call 33062
        IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN BEGIN
          CheckElementMandatory := FALSE;
          IF PlantSetup."Plant - Element Mandatory" THEN BEGIN
            PlantLocation.GET(AdviceRec."Plant Location");
            IF PlantLocation."Project No." = AdviceRec."Project No." THEN
              CheckElementMandatory := TRUE;
          END;
          IF CheckElementMandatory THEN BEGIN
            ProjRec.GET(AdviceRec."Project No.");
            IF ProjRec."Posting Element Mandatory" THEN
              AdviceRec.TESTFIELD(Element);
          END;
        END;
        //*32519.en
        IF (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          IF NOT CONFIRM(Text003, TRUE) THEN
            ERROR('');
          ConFirmAnswered := TRUE;
       END;
      UNTIL (AdviceRec.NEXT = 0) OR ConFirmAnswered;

      IF NOT AdviceRec.FINDFIRST THEN EXIT;  //db, 05-09-05: sql-problem

      PlantRequest.LOCKTABLE;
      PlantRequestLine.LOCKTABLE;

      AdviceRec.FINDSET(TRUE);
      REPEAT
        AdviceRec.TESTFIELD("Order Date");
        AdviceRec.CheckRecordType(1); //check status of project/service order
        AdviceRec.CheckDeliver;
        IF (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          //Already permitted in 'Confirm before locking', see above
          DateFormula := STRSUBSTNO('<%1D>', TODAY - AdviceRec."Order Date");  //db, 15-03-11
          AdviceRec."Receipt Date" := CALCDATE(DateFormula, AdviceRec."Receipt Date");
          AdviceRec."Order Date" := TODAY;
        END;
      UNTIL AdviceRec.NEXT = 0;

      AdviceRec.SETCURRENTKEY("Project No.", "Plant Location");
      AdviceRec.FINDSET(TRUE);
      REPEAT
        IF (AdviceRec."Plant Location" <> LastPlantLocation) OR (AdviceRec."Receipt Date" <> LastReceiptDate) THEN BEGIN
          CreateNewPlantRequest(AdviceRec, PlantRequest);

          LastPlantLocation := AdviceRec."Plant Location";
          LastReceiptDate := AdviceRec."Receipt Date";
          IF FirstRequestNo = '' THEN
            FirstRequestNo := PlantRequest."No.";
          LastRequestNo := PlantRequest."No.";
        END;

        PlantRequestLine.INIT;
        PlantRequestLine."Plant Request No." := PlantRequest."No.";
        PlantRequestLine."Line No." := LineNumber + 10000;
        PlantRequestLine.INSERT;
        LineNumber := PlantRequestLine."Line No.";

        CASE TRUE OF
          AdviceRec."Plant Type" <> '':
            BEGIN
              PlantRequestLine.Type := PlantRequestLine.Type::Plant;
              PlantRequestLine.VALIDATE("Plant Type", AdviceRec."Plant Type");
            END;
          AdviceRec."Item No." <> '':
            BEGIN
              PlantRequestLine.VALIDATE(Type, PlantRequestLine.Type::Item);
              PlantRequestLine.VALIDATE("Item No.", AdviceRec."Item No.");
            END;
        ELSE
          PlantRequestLine.Type := PlantRequestLine.Type::Text;
        END;

        IF PlantRequestLine.Type <> PlantRequestLine.Type::Text THEN
          PlantRequestLine.VALIDATE(Quantity, AdviceRec."Quantity (Advice)");
        PlantRequestLine.Description := AdviceRec.Description;
        PlantRequestLine."Expected return on" := AdviceRec."Expected return on";
        IF PlantRequestLine.Type <> PlantRequestLine.Type::Text THEN
          PlantRequestLine.VALIDATE(Element, AdviceRec.Element);
        PlantRequestLine.MODIFY(TRUE);

        IF PlantRequestLine.Type <> PlantRequestLine.Type::Text THEN BEGIN
          AdviceRec."Quantity (Advice)" -= PlantRequestLine.Quantity;
          AdviceRec."Quantity (Processed)" += PlantRequestLine.Quantity;
        END ELSE BEGIN
          AdviceRec."Quantity (Processed)" += AdviceRec."Quantity (Advice)";
          AdviceRec."Quantity (Advice)" := 0;
        END;

        IF AdviceRec."Quantity (Processed)" < AdviceRec."Quantity (Budget)" THEN BEGIN
          AdviceRec.ProcessOpenStatus;  //db, 09-12-11: M31310
        END ELSE BEGIN
          AdviceRec.ProcessCloseStatus;  //db, 09-12-11: M31310
        END;
        SaveAdviceRec(AdviceRec);
        AdviceRec.MODIFY(TRUE);
        RestoreAdviceRec(AdviceRec);
      UNTIL AdviceRec.NEXT = 0;

      IF FirstRequestNo = LastRequestNo THEN
        CreatedRequestNos := FirstRequestNo
      ELSE
        CreatedRequestNos := STRSUBSTNO('%1..%2', FirstRequestNo, LastRequestNo);

      MESSAGE(Text028, CreatedRequestNos);

      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE UpdateReceiptDateFromProjectElement@1100528800(VAR AdviceOrderLine@1100528800 : Record 11012055);
    VAR
      ProjectElement@1100528801 : Record 11012010;
    BEGIN
      IF AdviceOrderLine.FINDSET THEN
        REPEAT
          IF (AdviceOrderLine."Project No." <> '') AND (AdviceOrderLine.Element <> '') THEN BEGIN
            ProjectElement.SETRANGE("Project No.", AdviceOrderLine."Project No.");
            ProjectElement.SETRANGE(Element, AdviceOrderLine.Element);
            IF ProjectElement.FINDFIRST THEN
              IF ProjectElement."Starting Date" <> 0D THEN BEGIN
                AdviceOrderLine.VALIDATE("Receipt Date", ProjectElement."Starting Date");
                AdviceOrderLine.MODIFY;
              END;
          END;
        UNTIL AdviceOrderLine.NEXT = 0;
    END;

    PROCEDURE GetBatchAndLastLineNo@1100525000(Location@1100525000 : Code[10];VAR ItemJournalBatch@1100525001 : Record 233) LastLineNo : Integer;
    VAR
      LocationRec@1100525002 : Record 14;
      ItemJournalLine@1100525003 : Record 83;
    BEGIN
      IF LocationRec.GET(Location) THEN BEGIN
        IF (LocationRec."Inventory Journal Template" <> '') AND (LocationRec."Inventory Journal Batch" <> '') THEN BEGIN
          IF NOT InventoryTemplateRec.GET(LocationRec."Inventory Journal Template") THEN
            InventoryTemplateRec.INIT;
          IF NOT InventoryBatchRec.GET(LocationRec."Inventory Journal Template",LocationRec."Inventory Journal Batch") THEN
            ERROR(Text008);
        END ELSE BEGIN
          IF NOT InventoryTemplateRec.GET(ProjSetUp."Inventory Journal Template") THEN
            InventoryTemplateRec.INIT;
          IF NOT InventoryBatchRec.GET(ProjSetUp."Inventory Journal Template", ProjSetUp."Inventory Journal Batch") THEN
            ERROR(Text008);
        END;
      END ELSE BEGIN
        IF NOT InventoryTemplateRec.GET(ProjSetUp."Inventory Journal Template") THEN
          InventoryTemplateRec.INIT;
        IF NOT InventoryBatchRec.GET(ProjSetUp."Inventory Journal Template", ProjSetUp."Inventory Journal Batch") THEN
          ERROR(Text008);
      END;

      ItemJournalLine.SETRANGE("Journal Template Name",InventoryBatchRec."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",InventoryBatchRec.Name);
      IF ItemJournalLine.FINDLAST THEN
        LastLineNo := ItemJournalLine."Line No."
      ELSE
        LastLineNo := 0;
    END;

    PROCEDURE GetBatchAndLastLineNoInventory@1100409001(VAR ItemJournalBatch@1100525001 : Record 233) LastLineNo : Integer;
    VAR
      LocationRec@1100525002 : Record 14;
      ItemJournalLine@1100525003 : Record 83;
    BEGIN
      IF NOT InventoryBatchRec.GET(ItemJournalBatch."Journal Template Name", ItemJournalBatch.Name) THEN
        ERROR(Text008);

      ItemJournalLine.SETRANGE("Journal Template Name",InventoryBatchRec."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",InventoryBatchRec.Name);
      IF ItemJournalLine.FINDLAST THEN
        LastLineNo := ItemJournalLine."Line No."
      ELSE
        LastLineNo := 0;
    END;

    PROCEDURE ProcessRun@12(ItemRun@1210190000 : Boolean);
    VAR
      ImexFrm@11012000 : Page 11012105;
      ServOrderFilter@1100485001 : Text[80];
      ProjectFilter@1100485000 : Text[80];
      ElemFilter@11012002 : Text[80];
      TrunFilter@11012003 : Text[80];
      LdatFilter@11012004 : Text[80];
      InventoryRun@11012005 : Boolean;
      PurchaseRun@11012006 : Boolean;
    BEGIN
      CLEAR(ImexFrm);
      ImexFrm.RUNMODAL;   //**select advice orders
      TrunFilter := '';
      ServOrderFilter := '';
      ProjectFilter := '';
      ElemFilter := '';
      LdatFilter := '';

      ImexRec.SETRANGE("User ID", USERID);
      ImexRec.SETFILTER("Process ID", 'F51012*');
      ImexRec.SETRANGE(Type, ImexRec.Type::Export);
      IF ImexRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF ImexRec.Description = 'Transaction' THEN
            TrunFilter := ImexRec.Condition;
          IF ImexRec.Description = 'Project' THEN
            ProjectFilter := ImexRec.Condition;
          IF ImexRec.Description = 'Element' THEN
            ElemFilter := ImexRec.Condition;
          IF ImexRec.Description = 'Shipm.Date' THEN
            LdatFilter := ImexRec.Condition;
          IF ImexRec.Description = 'ServOrder' THEN
            ServOrderFilter := ImexRec.Condition;
          ImexRec.DELETE;
        UNTIL ImexRec.NEXT = 0;
      END;
      IF TrunFilter = '' THEN EXIT;

      AdviceRec.RESET;
      IF ServOrderFilter <> '' THEN AdviceRec.SETFILTER("Service Order No.", ServOrderFilter);
      IF ProjectFilter <> '' THEN AdviceRec.SETFILTER("Project No.", ProjectFilter);
      IF ElemFilter <> '' THEN AdviceRec.SETFILTER(Element, ElemFilter);
      IF LdatFilter <> '' THEN BEGIN
        LdatFilter := LdatFilter + STRSUBSTNO('& > %1', 00010101D);
        AdviceRec.SETFILTER("Receipt Date", LdatFilter);
      END ELSE BEGIN
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      IF NOT AdviceRec.FINDFIRST THEN EXIT;

      PurchaseRun := FALSE;
      InventoryRun := FALSE;

      REPEAT
        IF AdviceRec.Transaction = AdviceRec.Transaction::Purchase THEN BEGIN
          IF (TrunFilter = 'Purchases') OR (TrunFilter = 'Both') THEN PurchaseRun := TRUE;
        END;
        IF AdviceRec.Transaction = AdviceRec.Transaction::Inventory THEN BEGIN
          IF (TrunFilter = 'Inventory') OR (TrunFilter = 'Both') THEN InventoryRun := TRUE;
        END;
      UNTIL (AdviceRec.NEXT = 0) OR
            ((TrunFilter = 'Purchases') AND (PurchaseRun = TRUE)) OR
            ((TrunFilter = 'Inventory') AND (InventoryRun = TRUE)) OR
            ((TrunFilter = 'Both') AND (PurchaseRun = TRUE) AND (InventoryRun = TRUE));

      COMMIT;  //db, 15-05-13: C006703

      IF PurchaseRun = TRUE THEN ProcessPurchase(AdviceRec, TRUE, ItemRun);
      IF InventoryRun = TRUE THEN ProcessInventory(AdviceRec, TRUE, ItemRun);
    END;

    PROCEDURE ProcessShippingDetails@1100485003(VAR gvAdviceRec@1100485000 : Record 11012055);
    VAR
      lShippingDetailsFrm@1210190006 : Page 11012485;
      lShippingDetailsRec@1210190005 : Record 11012120;
      lShippingDetailsCU@1210190000 : Codeunit 11012286;
      lLineNr@1210190003 : Integer;
      lCounter@1210190004 : Integer;
      lShow@1210190001 : Boolean;
      lvShippingAgent@1100485001 : Text[30];
      lvOrder@1100485002 : Text[30];
    BEGIN
      AdviceRec.COPY(gvAdviceRec);

      WITH AdviceRec DO BEGIN
        IF NOT FINDFIRST THEN
          ERROR(Text011);

        lCounter := 0;
        SETRANGE(Processed, FALSE);
        IF "Record Type" = "Record Type"::Project THEN
          SETRANGE("Project No.", "Project No.");
        IF "Record Type" = "Record Type"::ServOrder THEN
          SETRANGE("Service Order No.", "Service Order No.");
        SETFILTER("Shipping Detail Line", '%1', 0);
        IF FINDSET(TRUE,TRUE) THEN BEGIN
          IF "Record Type" = "Record Type"::Project THEN BEGIN
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD("Shipping Agent Code");
            lvShippingAgent := ProjRec."Shipping Agent Code";
            lvOrder := ProjRec."No.";
          END;
          IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
            ServOrderRec.GET("Service Order No.");
            ServOrderRec.TESTFIELD("Shipping Agent Code");
            lvShippingAgent := ServOrderRec."Shipping Agent Code";
            lvOrder := ServOrderRec."No.";
          END;

          AdviceRec2.INIT;
          REPEAT
            IF (AdviceRec2.Deliver <> Deliver) OR (AdviceRec2."Ship To Location" <> "Ship To Location") THEN BEGIN
              AdviceRec2.COPY(AdviceRec);
              AdviceRec2.SETRANGE(Deliver, Deliver);
              AdviceRec2.SETRANGE("Ship To Location", "Ship To Location");
              lLineNr := lShippingDetailsCU.ShippingDetailsAdviceOrder(AdviceRec2, ServOrderRec, ProjRec);
              lCounter := lCounter + 1;
              IF AdviceRec2.FINDSET(TRUE, FALSE) THEN BEGIN
                REPEAT
                  AdviceRec2."Shipping Detail Line" := lLineNr;
                  AdviceRec2.MODIFY;
                UNTIL AdviceRec2.NEXT = 0 ;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      IF lCounter <> 0 THEN
        MESSAGE(Text023, lCounter);

      lShippingDetailsRec.SETRANGE("Shipping Agent Code", lvShippingAgent);
      lShippingDetailsRec.SETRANGE(Source, lShippingDetailsRec.Source::AdviceOrder);
      lShippingDetailsRec.SETRANGE("Order No.", lvOrder);
      lShow := TRUE;

      IF lShippingDetailsRec.FINDFIRST THEN BEGIN
        IF lCounter = 0 THEN
          lShow := CONFIRM(Text011);
        IF lShow THEN BEGIN
          CLEAR(lShippingDetailsFrm);
          lShippingDetailsFrm.SETTABLEVIEW(lShippingDetailsRec);
          lShippingDetailsFrm.SETRECORD(lShippingDetailsRec);
          lShippingDetailsFrm.RUN;
        END;
      END ELSE BEGIN
        MESSAGE(Text021);
      END;

      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE RemoveAdviceOrders@1100528900(VAR gvAdviceRec@1100528904 : Record 11012055);
    VAR
      AdviceOrder@1100528900 : Record 11012055;
      AdviceRep@1100528600 : Report 11012666;
    BEGIN
      //db, 18-06-12
      WITH gvAdviceRec DO BEGIN
        AdviceOrder.SETRANGE("Record Type", "Record Type");
        IF "Record Type"= "Record Type"::Project THEN BEGIN
          AdviceOrder.SETRANGE("Project No.", "Project No.");
          AdviceOrder.SETFILTER("Project Status", '%1..', AdviceOrder."Project Status"::Finished);
        END ELSE BEGIN
          AdviceOrder.SETRANGE("Service Order No.", "Service Order No.");
          AdviceOrder.SETFILTER("Service Order Status", '%1..', AdviceOrder."Service Order Status"::Finished);
        END;
        AdviceOrder.SETFILTER("Process Status", '%1|%2', "Process Status"::Cancelled, "Process Status"::Processed);
        AdviceOrder.SETFILTER("Order Date", '..%1', CALCDATE('<-1M>', TODAY));
        AdviceRep.SETTABLEVIEW(AdviceOrder);
        AdviceRep.RUNMODAL;
        CLEAR(AdviceRep);
      END;
    END;

    PROCEDURE ApproveLines@1210190002(VAR gvAdviceRec@1210190000 : Record 11012055);
    BEGIN
      AdviceRec.COPY(gvAdviceRec);
      IF NOT AdviceRec.FINDFIRST THEN
        ERROR(Text030);

      IF NOT AdviceRec.FINDSET(TRUE,FALSE) THEN EXIT;
      REPEAT
        IF (AdviceRec."Process Status" = AdviceRec."Process Status"::Open) OR
           (AdviceRec."Process Status" = AdviceRec."Process Status"::"Partly Processed") THEN
        BEGIN
          IF AdviceRec.Processed = FALSE THEN BEGIN
            AdviceRec.VALIDATE("Process Status",AdviceRec."Process Status"::Released);  //db, 01-02-11: M24423
            AdviceRec.MODIFY(TRUE);
          END;
        END;
      UNTIL AdviceRec.NEXT = 0;

      AdviceRec.MARKEDONLY(FALSE);  //db, 12-12-11
      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE CompressLines@1(gvAdviceRec@1210190000 : Record 11012055);
    VAR
      MainRec@11012000 : Record 11012055;
      OldAdviceRec@1100409000 : Record 11012055;
      PurchaseLineDetail@1210190002 : Record 11020660;
      PurchaseLineDetailIsCopied@1210190001 : Boolean;
      CompressAdviceOrder@1100525000 : Page 11126586;
      ContinueBln@1100525004 : Boolean;
      SelectElement@1100525003 : Boolean;
      SelectExtensionContract@1100525002 : Boolean;
      SelectPlanningActivity@1100525001 : Boolean;
    BEGIN
      //db.sn, 12-12-11
      AdviceRec.COPY(gvAdviceRec);
      //db.en, 12-12-11

      IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
        MainRec.SETRANGE("Project No.", AdviceRec."Project No.");
      IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
        MainRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
      IF NOT MainRec.FINDSET(FALSE, FALSE) THEN EXIT;

      //DP00796.sn
      CompressAdviceOrder.LOOKUPMODE := TRUE;
      ContinueBln := (CompressAdviceOrder.RUNMODAL = ACTION::LookupOK);  //db, 10-08-15
      IF NOT ContinueBln THEN EXIT;
      CompressAdviceOrder.GetSelection(SelectElement,SelectExtensionContract,SelectPlanningActivity);
      //DP00796.en

      REPEAT
        AdviceRec.RESET;
        IF MainRec."Record Type" = MainRec."Record Type"::Project THEN BEGIN
          AdviceRec.SETCURRENTKEY("Project No.", Element, "Extension Contract",
            "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item");
          AdviceRec.SETRANGE("Project No.", MainRec."Project No.");
          IF SelectElement THEN  //DP00796
            AdviceRec.SETRANGE(Element, MainRec.Element);
          IF SelectExtensionContract THEN  //DP00796
            AdviceRec.SETRANGE("Extension Contract", MainRec."Extension Contract");
          IF SelectPlanningActivity THEN  //DP00796
            AdviceRec.SETRANGE("Project Planning Activity No.", MainRec."Project Planning Activity No.");
        END;
        IF MainRec."Record Type" = MainRec."Record Type"::ServOrder THEN BEGIN
          AdviceRec.SETFILTER("Project No.", '%1', '');
          AdviceRec.SETRANGE("Service Order No.", MainRec."Service Order No.");
        END;
        AdviceRec.SETRANGE("Item No.", MainRec."Item No.");
        AdviceRec.SETRANGE("Basic Item", MainRec."Basic Item");
        AdviceRec.SETRANGE(Manufacturer, MainRec.Manufacturer);
        AdviceRec.SETRANGE("Trade Item", MainRec."Trade Item");
        AdviceRec.SETRANGE("Vendor (Trade Item)", MainRec."Vendor (Trade Item)");

        AdviceRec.SETRANGE("Cost Object", MainRec."Cost Object");
        AdviceRec.SETRANGE("Cost Component", MainRec."Cost Component");
        AdviceRec.SETRANGE("Unit of Measure", MainRec."Unit of Measure");
        AdviceRec.SETRANGE(Description, MainRec.Description);
        AdviceRec.SETRANGE("Description 2", MainRec."Description 2");
        AdviceRec.SETRANGE("External Text", MainRec."External Text");
        AdviceRec.SETRANGE("FSC Type Code", MainRec."FSC Type Code");  //*DP00129

        AdviceRec.SETRANGE("Purchase Action", MainRec."Purchase Action");
        AdviceRec.SETRANGE("Purchase Route Reference", MainRec."Purchase Route Reference");

        AdviceRec.SETRANGE("Location Code", MainRec."Location Code");
        AdviceRec.SETRANGE("Ship To Location", MainRec."Ship To Location");
        AdviceRec.SETRANGE(Transaction, MainRec.Transaction);
        AdviceRec.SETRANGE("Supplying Company Inventory", MainRec."Supplying Company Inventory");
        AdviceRec.SETRANGE(Deliver, MainRec.Deliver);

        AdviceRec.SETRANGE(Price, MainRec.Price);
        AdviceRec.SETRANGE("Discount %", MainRec."Discount %");

        AdviceRec.SETFILTER("Line No.", '<>%1', MainRec."Line No.");
        AdviceRec.SETFILTER("Process Status", '<>%1', AdviceRec."Process Status"::Cancelled);
        IF AdviceRec.FINDSET(TRUE, FALSE) THEN BEGIN
          OldAdviceRec := AdviceRec;  //db, 08-11-12: C003628
          AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" + MainRec."Quantity (Budget)";
          AdviceRec."Quantity (Advice)" := AdviceRec."Quantity (Advice)" + MainRec."Quantity (Advice)";
          AdviceRec.VALIDATE("Quantity (Advice)");  //db, 21-10-11: M29336 (evaluate GetDefaults)
          AdviceRec."Quantity (Processed)" := AdviceRec."Quantity (Processed)" + MainRec."Quantity (Processed)";
          AdviceRec.GetStatusOnProcess(FALSE);  //db, 09-12-11: M31310
          IF (OldAdviceRec."Process Status" = OldAdviceRec."Process Status"::Released) AND
             (MainRec."Process Status" = MainRec."Process Status"::Released) THEN
            AdviceRec."Process Status" := AdviceRec."Process Status"::Released;  //db, 08-11-12: C003628 (reset by GetStatusOnProcess)
          IF (AdviceRec."Purchaser Code" = '') THEN AdviceRec."Purchaser Code" := MainRec."Purchaser Code";
          AdviceRec."Scheme Code" := '';
          AdviceRec."Comments for Logistics" := '';
          //DP00796.sn:
          //db, 22-06-15: clear of inheret from MainRec ?
          IF SelectElement THEN
            AdviceRec.Element := '';
          IF SelectExtensionContract THEN
            AdviceRec."Extension Contract" := '';
          IF SelectPlanningActivity THEN
            AdviceRec."Project Planning Activity No." := '';
          //DP00796.en
          AdviceRec.CalculateTotal();  // Call 21850
          AdviceRec.MODIFY(TRUE);
          IF (NOT PurchaseLineDetailIsCopied) THEN BEGIN
            PurchaseLineDetailIsCopied := PurchaseLineDetail.CopyLine(
              PurchaseLineDetail."Line Type"::"Advice Order",
              MainRec."Record Type", MainRec."Project No.", MainRec."Yard No.",
              MainRec."System No.", MainRec."Entity Type", MainRec."Entity No.",
              MainRec."Service Order No.", '', MainRec."Line No.",
              PurchaseLineDetail."Line Type"::"Advice Order", '', AdviceRec."Line No.",
              FALSE);
          END;
          CopyDocLinks(MainRec, AdviceRec);
          ProcessProjectMatReqLines(MainRec, AdviceRec);
          AdviceRec.RESET;
          AdviceRec.SETCURRENTKEY("Record Type", "Project No.", "Service Order No.", "Line No.");
          IF AdviceRec.GET(MainRec."Record Type", MainRec."Project No.", MainRec."Service Order No.", MainRec."Line No.") THEN BEGIN
            AdviceRec.SetCalledFromCompressingLines(TRUE); //kzwerver, 110215, n
            AdviceRec.DELETE(TRUE);
            AdviceRec.SetCalledFromCompressingLines(FALSE); //kzwerver, 110215, n
          END;
        END;
      UNTIL MainRec.NEXT = 0;
    END;

    PROCEDURE SplitLines@9(VAR gvAdviceRec@1210190000 : Record 11012055);
    VAR
      PurchaseLineDetail@1210190002 : Record 11020660;
      LineNumber@11012000 : Integer;
      InventoryQuan@1210190001 : Decimal;
    BEGIN
      AdviceRec.COPY(gvAdviceRec);
      AdviceRec.SETFILTER("Process Status", '<>%1', AdviceRec."Process Status"::Cancelled);

      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text030);
        EXIT;
      END;

      AdviceRec.SETRANGE("Supplying Company Inventory", '');
      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text029, AdviceRec.FIELDCAPTION("Supplying Company Inventory"));
        AdviceRec.MARKEDONLY(FALSE);
        gvAdviceRec.CLEARMARKS;
        EXIT;
      END;

      IF (AdviceRec.FINDSET(TRUE, TRUE)) THEN BEGIN
        IF CONFIRM(Text012,TRUE) THEN BEGIN
          REPEAT;
            LineNumber := AdviceRec."Line No." + 1;
            WHILE AdviceRec2.GET(AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Service Order No.", LineNumber) DO
              LineNumber := LineNumber + 1;
            AdviceRec2 := AdviceRec; //mg.c, 22-01-2014: C010838
            AdviceRec2."Line No." := LineNumber;
            //**4PS.n, Onderstaande regel uitgeschakeld nav melding 26213.
            //AdviceRec2.TESTFIELD("Quantity (Budget)");  //db, 29-01-08 (bij geen budget wordt origineel advies leeg gemaakt)
            InventoryQuan := InventoryReservation(AdviceRec."Item No.");
            IF InventoryQuan > 0 THEN BEGIN
              AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Inventory);  //db, 05-08-10 (PT)
              //AdviceRec2.Deliver := AdviceRec2.Deliver::Location; //db, 29-01-08 (ivm testfield OnInsert)
              IF InventoryQuan < (AdviceRec."Quantity (Budget)" - AdviceRec."Quantity (Processed)") THEN
                AdviceRec2."Quantity (Budget)" := InventoryQuan
              ELSE
                AdviceRec2."Quantity (Budget)" := AdviceRec."Quantity (Budget)" - AdviceRec."Quantity (Processed)";
            END ELSE BEGIN
              AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Purchase);  //db, 05-08-10 (PT)
              AdviceRec2."Location Code" := '';  //db, 05-08-10 (PT)
              AdviceRec2."Quantity (Budget)" := 0;
            END;
            AdviceRec2."Quantity (Advice)" := AdviceRec2."Quantity (Budget)";
            AdviceRec2."Quantity (Processed)" := 0;
            AdviceRec2.ProcessOpenStatus;  //db, 09-12-11: M31310
            //db.sn, 05-08-10 (PT)
            AdviceRec2.GetDefaults;
            AdviceRec2.CalculateTotal;
            //db.en, 05-08-10 (PT)
            AdviceRec2.INSERT(TRUE);
            PurchaseLineDetail.CopyLine(PurchaseLineDetail."Line Type"::"Advice Order",
              AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Yard No.",
              AdviceRec."System No.", AdviceRec."Entity Type", AdviceRec."Entity No.",
              AdviceRec."Service Order No.", '', AdviceRec."Line No.",
              PurchaseLineDetail."Line Type"::"Advice Order", '', AdviceRec2."Line No.",
              FALSE);
            CopyDocLinks(AdviceRec, AdviceRec2);
            IF (AdviceRec."Purchase Route Reference" <> '') THEN BEGIN
              AdviceRec2."Purchase Route Reference" := AdviceRec."Purchase Route Reference";
              AdviceRec2.MODIFY;
            END;

            AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" - AdviceRec2."Quantity (Budget)";
            AdviceRec."Quantity (Advice)" := AdviceRec."Quantity (Advice)" - AdviceRec2."Quantity (Advice)";  //db, 05-01-09
            IF (AdviceRec."Quantity (Processed)" < AdviceRec."Quantity (Budget)") OR
               (AdviceRec."Quantity (Advice)" > 0 ) THEN BEGIN //db, 05-01-09
              AdviceRec.ProcessOpenStatus;  //db, 09-12-11: M31310
            END ELSE BEGIN
              AdviceRec.ProcessCloseStatus;  //db, 09-12-11: M31310
            END;
            AdviceRec.CalculateTotal;  //05-08-10 (PT)
            AdviceRec.MODIFY(TRUE);
          UNTIL AdviceRec.NEXT = 0;
        END;
      END;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE GenerateICKOrder@1100525009(VAR gvAdviceRec@1100525012 : Record 11012055);
    VAR
      PurchSetup@1100525007 : Record 312;
      TmpPurchHeaderRec@1100525000 : TEMPORARY Record 38;
      TmpPurchLineRec@1100525001 : TEMPORARY Record 39;
      ProjRec@1100525004 : Record 11072003;
      ServOrderRec@1100525006 : Record 11012823;
      ServLocRec@1100409001 : Record 11012801;
      ProjLocRec@1210190004 : Record 11012011;
      LocRec@1100409000 : Record 14;
      NewDoc@1100525002 : Code[20];
      LastLine@1100525003 : Integer;
      ICMCodeunit@1100525005 : Codeunit 11012247;
      NoSeriesMgt@1100525008 : Codeunit 396;
      FileMgt@1100525013 : Codeunit 419;
      FirstOrder@1100525009 : Text[30];
      LastOrder@1100525010 : Text[30];
      Text000@1100525011 : TextConst 'ENU=The orders (%1) have been created.';
      lvPath@1210190000 : Text[250];
      lvFile@1210190001 : Text[250];
      lvFactor@1210190003 : Decimal;
    BEGIN
      //db, 17-08-10: M15519
      AdviceRec.COPY(gvAdviceRec);

      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text030);
        EXIT;
      END;

      PurchSetup.GET;
      PurchSetup.TESTFIELD("ICK Order Nos.");

      IF AdviceRec.FINDSET(TRUE, TRUE) THEN BEGIN
        REPEAT
          AdviceRec.TESTFIELD(Vendor);

          IF TmpPurchHeaderRec."Buy-from Vendor No." <> AdviceRec.Vendor THEN BEGIN
            TmpPurchHeaderRec.INIT;
            TmpPurchHeaderRec."Document Type" := TmpPurchHeaderRec."Document Type"::Order;
            TmpPurchHeaderRec."No." := NoSeriesMgt.GetNextNo(PurchSetup."ICK Order Nos.",0D,TRUE);
            TmpPurchHeaderRec."Buy-from Vendor No." := AdviceRec.Vendor;
            IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN BEGIN
              TmpPurchHeaderRec."Job No." := AdviceRec."Project No.";
              ProjRec.GET(AdviceRec."Project No.");
              TmpPurchHeaderRec."Ship-to Name" := ProjRec.Description;
              TmpPurchHeaderRec."Ship-to Address" := ProjRec.Address;
              TmpPurchHeaderRec."Ship-to Post Code" := ProjRec."Post Code";
              TmpPurchHeaderRec."Ship-to City" := ProjRec.City;
              //db.sn, 04-01-13: C000137
              IF ProjRec.Deliver = ProjRec.Deliver::Location THEN BEGIN
                IF LocRec.GET(ProjRec."Ship To Location") THEN BEGIN
                  TmpPurchHeaderRec."Ship-to Address" := LocRec.Address;
                  TmpPurchHeaderRec."Ship-to Post Code" := LocRec."Post Code";
                  TmpPurchHeaderRec."Ship-to City" := LocRec.City;
                END;
              END;
              IF ProjRec.Deliver = ProjRec.Deliver::"Project Location" THEN BEGIN
                IF ProjLocRec.GET(AdviceRec."Project No.", ProjRec."Ship To Location") THEN BEGIN
                  TmpPurchHeaderRec."Ship-to Address" := ProjLocRec.Address;
                  TmpPurchHeaderRec."Ship-to Post Code" := ProjLocRec."Post Code";
                  TmpPurchHeaderRec."Ship-to City" := ProjLocRec.City;
                END;
              END;
              //db.en, 04-01-13: C000137
            END ELSE BEGIN
              TmpPurchHeaderRec."Service Order No." := AdviceRec."Service Order No.";
              ServOrderRec.GET(AdviceRec."Service Order No.");
              TmpPurchHeaderRec."Ship-to Name" := ServOrderRec.Name;
              TmpPurchHeaderRec."Ship-to Address" := ServOrderRec.Address;
              TmpPurchHeaderRec."Ship-to Post Code" := ServOrderRec."Post Code";
              TmpPurchHeaderRec."Ship-to City" := ServOrderRec.City;
              //db.sn, 04-01-13: C000137
              IF ServLocRec.GET(ServOrderRec."Service Location No.") THEN BEGIN
                IF ServLocRec.Deliver = ServLocRec.Deliver::Location THEN BEGIN
                  IF LocRec.GET(ServLocRec."Ship To Location") THEN BEGIN
                    TmpPurchHeaderRec."Ship-to Address" := LocRec.Address;
                    TmpPurchHeaderRec."Ship-to Post Code" := LocRec."Post Code";
                    TmpPurchHeaderRec."Ship-to City" := LocRec.City;
                  END;
                END;
              END;
              //db.en, 04-01-13: C000137
            END;
            TmpPurchHeaderRec.INSERT;
            NewDoc := TmpPurchHeaderRec."No.";
            LastLine := 0;
            IF FirstOrder = '' THEN FirstOrder := TmpPurchHeaderRec."No.";
            LastOrder := TmpPurchHeaderRec."No.";
          END;

          TmpPurchLineRec.INIT;
          TmpPurchLineRec."Document Type" := TmpPurchHeaderRec."Document Type";
          TmpPurchLineRec."Document No." := TmpPurchHeaderRec."No.";
          TmpPurchLineRec."Buy-from Vendor No." := TmpPurchHeaderRec."Buy-from Vendor No.";
          TmpPurchLineRec."Trade Item" := AdviceRec."Trade Item";
          TmpPurchLineRec.Description := AdviceRec.Description;
          //db.sn, 06-06-11: M27736; 17-09-12: C002344
          lvFactor := 0;
          IF TradeItemRec.GET(AdviceRec."Vendor (Trade Item)", AdviceRec."Trade Item") THEN
            IF AdviceRec."Unit of Measure" = UPPERCASE(TradeItemRec."Application Unit") THEN
              lvFactor := TradeItemRec."Qty. per Unit of Measure";
          IF lvFactor = 0 THEN lvFactor := 1;
          TmpPurchLineRec."ICM Quantity" := ROUND(AdviceRec.GetDeliverableQuantity / lvFactor);
          TmpPurchLineRec."Direct Unit Cost" := ROUND(AdviceRec.Price * lvFactor);
          //db.en, 06-06-11: M27736; 17-09-12: C002344
          TmpPurchLineRec."Line No." := LastLine + 1;
          TmpPurchLineRec."Input by" := USERID; //DP00469
          TmpPurchLineRec."Input Date" := TODAY; //DP00469
          TmpPurchLineRec.INSERT;
          LastLine := TmpPurchLineRec."Line No.";

          IF AdviceRec."Receipt Date" > TmpPurchHeaderRec."Expected Receipt Date" THEN
            TmpPurchHeaderRec."Expected Receipt Date" := AdviceRec."Receipt Date";
          TmpPurchHeaderRec.MODIFY;

          AdviceRec."ICK Order" := LastOrder;
          AdviceRec.MODIFY;
        UNTIL AdviceRec.NEXT = 0;
      END;

      ICMCodeunit.SetTruncateAddress(TRUE); //kzwerver, 110520, n, #27454
      ICMCodeunit.ProcessAdviceOrder(TmpPurchHeaderRec, TmpPurchLineRec);

      //db.sn, 24-05-11: M26764
      FirstOrder := '';
      LastOrder := '';
      IF AdviceRec.FINDSET THEN BEGIN
        REPEAT
          VendorRec.GET(AdviceRec.Vendor);
          lvPath := VendorRec."Pathname Purchase Exchange" + VendorRec."Directory ICK";
          lvFile := AdviceRec."ICK Order" + '.ick';

          //check erase ICK-file due to errors in ICMCodeunit
          IF NOT FileMgt.ClientFileExists(lvPath + lvFile) THEN BEGIN
            IF TmpPurchHeaderRec.GET(TmpPurchHeaderRec."Document Type"::Order, AdviceRec."ICK Order") THEN
              TmpPurchHeaderRec.DELETE;
            AdviceRec."ICK Order" := '';
            AdviceRec.MODIFY;
          END;
        UNTIL AdviceRec.NEXT = 0;
        IF TmpPurchHeaderRec.FINDFIRST THEN
          FirstOrder := TmpPurchHeaderRec."No.";
        IF TmpPurchHeaderRec.FINDLAST THEN
          LastOrder := TmpPurchHeaderRec."No.";
      END;
      //db.en, 24-05-11: M26764

      IF FirstOrder <> '' THEN BEGIN
        IF FirstOrder <> LastOrder THEN
          MESSAGE(Text000, FirstOrder + '..' + LastOrder)
        ELSE
          MESSAGE(Text000, FirstOrder);
      END;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE UpdateVendorTradeItem@1100485009(VAR AORec@1100485000 : Record 11012055;NewVendor@1100485001 : Code[20];Final@1100485012 : 'Yes,Only Report');
    VAR
      AO@1100485009 : Record 11012055;
      TempAO@1100485010 : TEMPORARY Record 11012055;
      VendorRec@1100485002 : Record 11012304;
      TradeItemRec@1100485008 : Record 11012317;
      NewTradeItem@1100485011 : Code[20];
      UpdateRep@1100525000 : Report 11012350;
    BEGIN
      IF NewVendor = '' THEN
        EXIT;

      TempAO.DELETEALL;
      VendorRec.GET(NewVendor);

      AO.COPY(AORec);

      IF AO.ISEMPTY THEN BEGIN
        ERROR(Text030);
        EXIT;
      END;

      AO.SETFILTER("Vendor (Trade Item)", '<>%1', NewVendor);
      IF AO.FINDSET(TRUE, TRUE) THEN
        IF CONFIRM(Text024,TRUE, VendorRec.Name ) THEN BEGIN
          REPEAT;

            IF TradeItemRec.CheckReplaceVendor(AO."Vendor (Trade Item)", AO."Trade Item", NewVendor, NewTradeItem) THEN BEGIN
              TempAO := AO;
              AO."Trade Item" := '';
              AO.VALIDATE("Vendor (Trade Item)", NewVendor);
              AO.VALIDATE("Trade Item", NewTradeItem);
              IF (AO."Item No." = TempAO."Item No.") AND
                 (AO."Vendor (Trade Item)" = NewVendor) AND
                 (AO."Trade Item" = NewTradeItem) THEN
              BEGIN
                IF Final = Final::Yes THEN BEGIN
                  AO.MODIFY(TRUE);
                END ELSE BEGIN
                  TempAO := AO;
                END;
                TempAO.INSERT;
              END;
            END;
          UNTIL AO.NEXT = 0;
        END;

      IF NOT TempAO.FINDFIRST THEN
        MESSAGE(Text025)
      ELSE BEGIN
        COMMIT;
        UpdateRep.SetTempAdviceOrder(TempAO,Final);
        AO.SETRANGE("Vendor (Trade Item)");
        UpdateRep.SETTABLEVIEW(AO);
        UpdateRep.RUNMODAL;
      END;
    END;

    PROCEDURE UpdateActualPrice@1210190007(iType@1100525002 : Integer;iCode@1100525001 : Code[20]);
    VAR
      MainRec@1210190000 : Record 11012055;
      OldMainRec@1210190011 : Record 11012055;
      NewMainRec@1210190012 : Record 11012055;
      Status@1210190004 : Dialog;
      maxrec@1210190003 : Integer;
      currec@1210190002 : Integer;
      lvText001@1210190006 : TextConst 'ENU=Busy with       #1################# @2@@@@@@@@@@@@@';
      lvText002@1210190005 : TextConst 'ENU=Project Advice Orders';
      UnitOld@1210190010 : Code[20];
      UnitNew@1210190013 : Code[20];
      ItemTypeOpt@1100525000 : 'Item,Basic Item,Trade Item';
      TradeItemRec@1100525005 : Record 11012317;
      BasicItemRec@1100525004 : Record 11012316;
      ItemRec@1100525003 : Record 27;
    BEGIN
      //db, 15-01-16
      Status.OPEN(lvText001);
      Status.UPDATE(1,lvText002);

      WITH MainRec DO BEGIN
        IF iType = 0 THEN BEGIN
          SETRANGE("Record Type", "Record Type"::Project);
          SETRANGE("Project No.", iCode);
        END;
        IF iType = 1 THEN BEGIN
          SETRANGE("Record Type", "Record Type"::ServOrder);
          SETRANGE("Service Order No.", iCode);
        END;
        SETRANGE(Processed, FALSE);
        SETRANGE("Price Agreement", FALSE);
        SETFILTER("Purchase Route Reference", '%1', '');
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          currec := 0;
          maxrec := COUNT;
          REPEAT
            OldMainRec := MainRec;
            IF "Trade Item" <> '' THEN BEGIN
              IF TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN
                ValidateItem(ItemTypeOpt::"Trade Item");
            END ELSE BEGIN
              IF "Basic Item" <> '' THEN BEGIN
                IF BasicItemRec.GET(Manufacturer, "Basic Item") THEN
                  ValidateItem(ItemTypeOpt::"Basic Item");
              END ELSE BEGIN
                IF "Item No." <> '' THEN BEGIN
                  IF ItemRec.GET("Item No.") THEN
                    ValidateItem(ItemTypeOpt::Item);
                END;
              END;
            END;
            NewMainRec := MainRec;
            IF NewMainRec."Unit of Measure" <> OldMainRec."Unit of Measure" THEN BEGIN
              UnitOld := OldMainRec."Unit of Measure";
              UnitNew := NewMainRec."Unit of Measure";
              NewMainRec."Unit of Measure" := UnitOld;
              OldMainRec."Unit of Measure" := UnitNew;
              CheckItemUnitConversion(NewMainRec, OldMainRec);
              "Unit of Measure" := UnitOld;
              "Gross Price":= NewMainRec."Gross Price";
              "Discount %":= NewMainRec."Discount %";
              Price:= NewMainRec.Price;
            END;
            CalculateTotal;
            MODIFY(TRUE);
            currec := currec + 1;
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL NEXT = 0;
        END;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateQuotePrice@1100485007(VAR gvAdviceRec@1100485000 : Record 11012055);
    VAR
      PurchLineRec@1100485001 : Record 39;
      Status@1100485004 : Dialog;
      maxrec@1100485003 : Integer;
      currec@1100485002 : Integer;
      lvText001@1100485006 : TextConst 'ENU=Busy with       #1################# @2@@@@@@@@@@@@@';
      UnitPrice@1100525001 : Decimal;
    BEGIN
      Status.OPEN(lvText001);

      AdviceRec.COPY(gvAdviceRec);
      WITH AdviceRec DO BEGIN
        SETRANGE("Record Type", gvAdviceRec."Record Type");
        SETRANGE("Project No.", gvAdviceRec."Project No.");
        SETRANGE("Service Order No.", gvAdviceRec."Service Order No.");
        SETFILTER("Purchase Route Reference", '<>%1', '');
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          currec := 0;
          maxrec := COUNT;
          REPEAT
            Status.UPDATE(1, "Project No." + "Service Order No.");
            PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
            PurchLineRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
            PurchLineRec.SETRANGE("Quote Selected", TRUE);
            IF PurchLineRec.FINDFIRST THEN BEGIN
              //db.sn, 25-06-10: M19825
              "Gross Price" := PurchLineRec."Unit Price (LCY)";
              "Discount %" := PurchLineRec."Discount % (Item)";
              IF ("Gross Price" <> 0) AND ("Discount %" <> 0) THEN  //db, 06-08-10: M21863
                UnitPrice := "Gross Price" * (100-"Discount %"/ 100)
              ELSE
                UnitPrice := PurchLineRec."Unit Cost (LCY)";
              VALIDATE(Price, UnitPrice);
              //PurchHeaderRec.GET(PurchLineRec."Document Type", PurchLineRec."Document No.");
              //IF PurchHeaderRec."Currency Factor" = 0 THEN
              //  VALIDATE(Price, PurchLineRec."Direct Unit Cost")
              //ELSE
              //  VALIDATE(Price, PurchLineRec."Direct Unit Cost" / PurchHeaderRec."Currency Factor");
              //db.en, 25-06-10: M19825
              VALIDATE(Vendor, PurchLineRec."Buy-from Vendor No.");
              "Price Agreement" := TRUE;
              MODIFY(TRUE);
            END;
            currec := currec + 1;
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL NEXT = 0;
        END;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE EditText@1210190004(lvAdviceRec@1210190000 : Record 11012055);
    VAR
      TextFrm@11012001 : Page 11012120;
    BEGIN
      WITH lvAdviceRec DO BEGIN
        IF "Line No." = 0 THEN
          ERROR(Text009);

        TextFrm.SetSelection(DATABASE::"Advice Order Line","Project No.","Service Order No.",
          '','','','',"Line No.","Record Type");

        TextFrm.RUNMODAL;
        CLEAR(TextFrm);
      END;
    END;

    PROCEDURE DrillDownInventory@1100525003(VAR gvAdviceRec@1100525005 : Record 11012055;ShowLocations@1100525003 : 'All,PrefLocations,Location');
    VAR
      ItemAvailByLoc@1100525001 : Page 492;
      PrefLocationRec@1100525002 : Record 11020353;
      LocationRec@1100525004 : Record 14;
    BEGIN
      WITH gvAdviceRec DO BEGIN
        TESTFIELD("Item No.");

        IF ("Supplying Company Inventory" <> '') THEN BEGIN
          PrefLocationRec.CHANGECOMPANY("Supplying Company Inventory");
          LocationRec.CHANGECOMPANY("Supplying Company Inventory");
          ItemAvailByLoc.SetCompany("Supplying Company Inventory");
        END;

        CASE ShowLocations OF
          ShowLocations::PrefLocations:
            BEGIN
              IF "Record Type" = "Record Type"::Project THEN BEGIN
                PrefLocationRec.SETRANGE(Type,PrefLocationRec.Type::Job);
                PrefLocationRec.SETRANGE("No.","Project No.");
              END ELSE BEGIN
                PrefLocationRec.SETRANGE(Type,PrefLocationRec.Type::"Service Order");
                PrefLocationRec.SETRANGE("No.","Service Order No.");
              END;
              IF PrefLocationRec.FINDSET THEN
                REPEAT
                  IF LocationRec.GET(PrefLocationRec."Location Code") THEN
                    LocationRec.MARK(TRUE);
                UNTIL PrefLocationRec.NEXT = 0;
              LocationRec.MARKEDONLY(TRUE);
            END;
          ShowLocations::Location:
            BEGIN
              LocationRec.GET("Location Code");
              LocationRec.SETRECFILTER;
            END;
        END;
        ItemAvailByLoc.SetLocations(LocationRec);
        ItemRec.GET("Item No.");
        IF "Record Type" = "Record Type"::Project THEN
          ItemRec.SETRANGE("Project Filter","Project No.");
        ItemRec.SETRANGE("Date Filter","Receipt Date");
        ItemAvailByLoc.SETRECORD(ItemRec);
        ItemAvailByLoc.SETTABLEVIEW(ItemRec);
        ItemAvailByLoc.RUN;
        ItemRec.SETRANGE("Date Filter");
      END;
    END;

    LOCAL PROCEDURE InventoryReservation@4(lItem@11012000 : Code[20]) : Decimal;
    BEGIN
      IF ItemRec.GET(lItem) THEN
        ItemRec.CALCFIELDS(Inventory)
      ELSE
        ItemRec.INIT;

      EXIT(ItemRec.Inventory);
    END;

    LOCAL PROCEDURE TradeItemVendor@6();
    VAR
      TradeRec@11012000 : Record 11012317;
    BEGIN
      IF NOT VendorRec.GET(AdviceRec.Vendor) THEN VendorRec.INIT;
      IF VendorRec."Vendor (Trade Item)" = '' THEN EXIT;

      TradeRec.SETRANGE("Product Code", AdviceRec."Basic Item");
      TradeRec.SETRANGE(Manufacturer, AdviceRec.Manufacturer);
      TradeRec.SETRANGE("Item Code");
      TradeRec.SETRANGE(Vendor, VendorRec."Vendor (Trade Item)");
      IF TradeRec.FINDFIRST THEN BEGIN
        ReqLineRec."Trade Item"    := TradeRec."Item Code";
        ReqLineRec."Vendor (Trade Item)" := TradeRec.Vendor;
      END ELSE BEGIN
        TradeRec.SETRANGE("Item Code", AdviceRec."Basic Item");
        TradeRec.SETRANGE(Vendor, AdviceRec.Manufacturer);
        IF TradeRec.FINDFIRST THEN BEGIN
          ReqLineRec."Trade Item"    := TradeRec."Item Code";
          ReqLineRec."Vendor (Trade Item)" := TradeRec.Vendor;
        END;
      END;
    END;

    LOCAL PROCEDURE SaveAdviceRec@1210190003(iAdviceRec@1210190000 : Record 11012055);
    BEGIN
      TmpAdviceRec := iAdviceRec;
    END;

    LOCAL PROCEDURE RestoreAdviceRec@1210190005(VAR AdviceRec@1100525000 : Record 11012055);
    BEGIN
      AdviceRec."Modified by" := TmpAdviceRec."Modified by";
      AdviceRec."Last Date Modified" := TmpAdviceRec."Last Date Modified";
      AdviceRec.MODIFY;  //use MODIFY with 'RunTrigger' is "FALSE".
    END;

    PROCEDURE SplitLinesPrefLoc@1100525005(VAR gvAdviceRec@1210190000 : Record 11012055);
    VAR
      PurchaseLineDetail@1210190002 : Record 11020660;
      LineNumber@11012000 : Integer;
      InventoryQuan@1210190001 : Decimal;
      RemainingQuantity@1100525000 : Decimal;
      PreferenceLocation@1100525001 : Record 11020353;
      OriginalLineUpdated@1100525002 : Boolean;
      Item@1100525003 : Record 27;
    BEGIN
      gvAdviceRec.TESTFIELD("Quantity (Advice)");

      AdviceRec.COPY(gvAdviceRec);

      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text030);
        EXIT;
      END;

      AdviceRec.SETRANGE("Supplying Company Inventory", '');
      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text029, AdviceRec.FIELDCAPTION("Supplying Company Inventory"));
        AdviceRec.MARKEDONLY(FALSE);
        gvAdviceRec.CLEARMARKS;
        EXIT;
      END;

      IF NOT CONFIRM(Text026,TRUE) THEN BEGIN
        AdviceRec.MARKEDONLY(FALSE);
        gvAdviceRec.CLEARMARKS;
        EXIT;
      END;

      AdviceRec.SETFILTER("Process Status", '<>%1', AdviceRec."Process Status"::Cancelled);
      IF AdviceRec.FINDSET(TRUE,TRUE) THEN
        REPEAT
          OriginalLineUpdated := FALSE;
          RemainingQuantity := AdviceRec."Quantity (Advice)";
          LineNumber := AdviceRec."Line No." + 1;

          PreferenceLocation.SETCURRENTKEY(Priority);
          PreferenceLocation.SETRANGE(Type,AdviceRec."Record Type");
          CASE AdviceRec."Record Type" OF
            AdviceRec."Record Type"::Project: PreferenceLocation.SETRANGE("No.",AdviceRec."Project No.");
            AdviceRec."Record Type"::ServOrder: PreferenceLocation.SETRANGE("No.",AdviceRec."Service Order No.");
          END;
          IF PreferenceLocation.FINDSET THEN BEGIN
            REPEAT
              IF RemainingQuantity > 0 THEN BEGIN
                WHILE AdviceRec2.GET(AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Service Order No.", LineNumber) DO
                  LineNumber += 1;
                AdviceRec2 := AdviceRec;
                IF OriginalLineUpdated THEN
                  AdviceRec2."Line No." := LineNumber;
                Item.GET(AdviceRec."Item No.");
                Item.SETRANGE("Project Filter",AdviceRec."Project No."); //hbk, 02-06-2010
                InventoryQuan := AdviceRec.GetInventory(PreferenceLocation."Location Code",Item,FALSE);
                IF InventoryQuan > 0 THEN BEGIN
                  //AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Inventory);  //db, 05-08-10 (PT) C003180 old
                  AdviceRec2."Location Code" := PreferenceLocation."Location Code";
                  AdviceRec2.VALIDATE("Delivery Period", '');  //db, 05-08-10 (PT)
                  IF InventoryQuan >= RemainingQuantity THEN BEGIN
                    AdviceRec2."Quantity (Advice)" := RemainingQuantity;
                    RemainingQuantity := 0;
                  END ELSE BEGIN
                    AdviceRec2."Quantity (Advice)" := InventoryQuan;
                    RemainingQuantity := RemainingQuantity - InventoryQuan;
                  END;
                  AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Inventory);  //Call C003180 new
                  AdviceRec2.CalculateTotal;  //db, 05-08-10 (PT)
                  IF NOT OriginalLineUpdated THEN BEGIN
                    AdviceRec2.MODIFY(TRUE);
                    OriginalLineUpdated := TRUE;
                  END ELSE
                    AdviceRec2.INSERT(TRUE);
                    PurchaseLineDetail.CopyLine( //kzwerver, 110606, n, #27784
                      PurchaseLineDetail."Line Type"::"Advice Order",
                      AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Yard No.",
                      AdviceRec."System No.", AdviceRec."Entity Type", AdviceRec."Entity No.",
                      AdviceRec."Service Order No.", '', AdviceRec."Line No.",
                      PurchaseLineDetail."Line Type"::"Advice Order", '', AdviceRec2."Line No.",
                      FALSE);
                    CopyDocLinks(AdviceRec, AdviceRec2);
                END;
              END;
            UNTIL PreferenceLocation.NEXT = 0;

            //create purchase
            IF RemainingQuantity > 0 THEN BEGIN
              WHILE AdviceRec2.GET(AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Service Order No.", LineNumber) DO
                LineNumber += 1;
              AdviceRec2 := AdviceRec;
              AdviceRec2."Line No." := LineNumber;
              AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Purchase);  //db, 05-08-10 (PT)
              AdviceRec2."Quantity (Advice)" := RemainingQuantity;
              AdviceRec2.CalculateTotal;  //db, 05-08-10 (PT)
              AdviceRec2.INSERT(TRUE);
              PurchaseLineDetail.CopyLine( //kzwerver, 110606, n, #27784
                PurchaseLineDetail."Line Type"::"Advice Order",
                AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Yard No.",
                AdviceRec."System No.", AdviceRec."Entity Type", AdviceRec."Entity No.",
                AdviceRec."Service Order No.", '', AdviceRec."Line No.",
                PurchaseLineDetail."Line Type"::"Advice Order", '', AdviceRec2."Line No.",
                FALSE);
              CopyDocLinks(AdviceRec, AdviceRec2);
            END;
          END;
        UNTIL AdviceRec.NEXT = 0;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE UpdateLines@1100525001(VAR gvAdviceRec@1100525000 : Record 11012055);
    VAR
      lvAdviceRec@1100525001 : Record 11012055;
    BEGIN
      AdviceRec.COPY(gvAdviceRec);  //db, 23-08-10: M22385

      //db.sn, 06-08-10 (PT)
      AdviceRec.MARKEDONLY(TRUE);
      IF NOT AdviceRec.FINDFIRST THEN
        AdviceRec.MARKEDONLY(FALSE);
      //db.en, 06-08-10 (PT)

      AdviceRec.SETRANGE(Processed, FALSE);  //db, 23-08-10: M22385
      IF AdviceRec.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lvAdviceRec := AdviceRec;
          lvAdviceRec.GetDefaults;
          lvAdviceRec.EvaluateStartDate(lvAdviceRec."Receipt Date"); //mg, 06-09-10: M22317; 31907+C004646
          //db.sn, 06-08-10 (PT)
          IF lvAdviceRec.Transaction <> AdviceRec.Transaction THEN
            lvAdviceRec.VALIDATE(Transaction);
          //db.en, 06-08-10 (PT)
          lvAdviceRec.MODIFY;
        UNTIL AdviceRec.NEXT = 0;
      END;

      //db.sn, 06-08-10 (PT)
      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
      //db.en, 06-08-10 (PT)
    END;

    PROCEDURE SetSkipMessage@1100525002();
    BEGIN
      SkipMessage := TRUE;
    END;

    LOCAL PROCEDURE CopyDocLinks@1100528400(SourceAdviceOrderLine@1100528400 : Record 11012055;TargetAdviceOrderLine@1100528401 : Record 11012055);
    VAR
      DocumentLinkMgt@1100528402 : Codeunit 11012401;
      SourceRecRef@1100528403 : RecordRef;
      TargetRecRef@1100528404 : RecordRef;
    BEGIN
      SourceRecRef.GETTABLE(SourceAdviceOrderLine);
      TargetRecRef.GETTABLE(TargetAdviceOrderLine);
      DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    PROCEDURE CreateNewPlantRequest@1210190510(AdviceOrderLine@1210190001 : Record 11012055;VAR OPlantRequest@1210190000 : Record 11020520);
    BEGIN
      //mg, 07-07-11: RFC605
      OPlantRequest.INIT;
      OPlantRequest."No." := '';
      OPlantRequest.INSERT(TRUE);

      OPlantRequest.VALIDATE(Type, OPlantRequest.Type::Arrival);
      OPlantRequest.VALIDATE("To Location", AdviceOrderLine."Plant Location");
      OPlantRequest.VALIDATE("Transfer Date", AdviceOrderLine."Receipt Date");
      OPlantRequest."Advice Order" := TRUE;

      OPlantRequest.MODIFY;
    END;

    PROCEDURE CopyCommentLines@1100529800(BudgetLine@1100529800 : Record 11012001);
    VAR
      CommentLineFrom@1100529801 : Record 11020634;
      CommentLineTo@1100529802 : Record 11020634;
      RecRef@1100529803 : RecordRef;
      LineNo@1100529804 : Integer;
    BEGIN
      // **4PS MVOS
      IF NOT TransferCommentLines THEN
        EXIT;

      RecRef.GETTABLE(BudgetLine);

      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::Budget);
      CommentLineFrom.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF CommentLineFrom.FINDSET THEN BEGIN
        RecRef.GETTABLE(AdviceRec);

        CommentLineTo.RESET;
        CommentLineTo.SETRANGE("Table Name", CommentLineTo."Table Name"::"Advice Order");
        CommentLineTo.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
        IF CommentLineTo.FINDLAST THEN
          LineNo := CommentLineTo."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          CommentLineTo.INIT;
          CommentLineTo := CommentLineFrom;
          CommentLineTo."Table Name" := CommentLineTo."Table Name"::"Advice Order";
          CommentLineTo."Record ID" := RecRef.RECORDID();
          CommentLineTo."Line No." := LineNo;
          CommentLineTo.INSERT;

          LineNo += 10000;
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    PROCEDURE ProcessProjectMatReqLines@1210190511(SourceAdviceOrderLine@1210190001 : Record 11012055;TargetAdviceOrderLine@1210190000 : Record 11012055);
    VAR
      ProjectMaterialReqLine@1210190002 : Record 11012526;
    BEGIN
      ProjectMaterialReqLine.SETRANGE("Project No.", SourceAdviceOrderLine."Project No.");
      ProjectMaterialReqLine.SETRANGE("Yard No.", SourceAdviceOrderLine."Yard No.");
      ProjectMaterialReqLine.SETRANGE("Entity Type", SourceAdviceOrderLine."Entity Type");
      ProjectMaterialReqLine.SETRANGE("System No.", SourceAdviceOrderLine."System No.");
      ProjectMaterialReqLine.SETRANGE("Entity No.", SourceAdviceOrderLine."Entity No.");
      ProjectMaterialReqLine.SETRANGE("Item No.", SourceAdviceOrderLine."Item No.");
      ProjectMaterialReqLine.SETRANGE("Basic Item", SourceAdviceOrderLine."Basic Item");
      ProjectMaterialReqLine.SETRANGE("Trade Item", SourceAdviceOrderLine."Trade Item");
      ProjectMaterialReqLine.SETRANGE("Vendor (Trade Item)", SourceAdviceOrderLine."Vendor (Trade Item)");
      ProjectMaterialReqLine.SETRANGE(Manufacturer, SourceAdviceOrderLine.Manufacturer);
      ProjectMaterialReqLine.SETRANGE(Element, SourceAdviceOrderLine.Element);
      ProjectMaterialReqLine.SETRANGE("Cost Object", SourceAdviceOrderLine."Cost Object");
      ProjectMaterialReqLine.SETRANGE(Quantity, SourceAdviceOrderLine."Quantity (Advice)");
      ProjectMaterialReqLine.SETRANGE("Unit of Measure",SourceAdviceOrderLine."Unit of Measure");
      //ProjectMaterialReqLine.SETRANGE(Processed, TRUE);  //db.o, 09-10-15
      ProjectMaterialReqLine.SETRANGE("Advice Order Line No.", SourceAdviceOrderLine."Line No.");
      IF (ProjectMaterialReqLine.FINDSET(TRUE)) THEN BEGIN
        ProjectMaterialReqLine."Advice Order Line No." := TargetAdviceOrderLine."Line No.";
        ProjectMaterialReqLine.MODIFY;
      END;
    END;

    PROCEDURE RunItemInventoryByCompany@1100528300(ItemNo@1100528305 : Code[20]);
    VAR
      GenericTempTable@1100528300 : TEMPORARY Record 11020579;
      Company@1100528302 : Record 2000000006;
      ItemRec@1100528301 : Record 27;
      LocationRec@1100528303 : Record 14;
      ItemLedgerEntry@1100528304 : Record 32;
    BEGIN
      ItemLedgerEntry.SETCURRENTKEY("Item No.");

      Company.FINDFIRST;
      REPEAT
        ItemLedgerEntry.CHANGECOMPANY(Company.Name);
        ItemRec.CHANGECOMPANY(Company.Name);
        LocationRec.CHANGECOMPANY(Company.Name);

        ItemLedgerEntry.SETRANGE("Item No.", ItemNo);
        IF (ItemLedgerEntry.FINDFIRST) THEN BEGIN
          REPEAT
            IF (NOT LocationRec.GET(ItemLedgerEntry."Location Code")) THEN LocationRec.INIT;
            IF (NOT ItemRec.GET(ItemLedgerEntry."Item No.")) THEN ItemRec.INIT;

            GenericTempTable.INIT;
            IF (NOT GenericTempTable.GET(ItemLedgerEntry."Item No.", Company.Name, ItemLedgerEntry."Location Code",
              '', '', ''))
            THEN BEGIN
              GenericTempTable."Key Code1" := ItemLedgerEntry."Item No.";
              GenericTempTable."Key Code2" := Company.Name;
              GenericTempTable."Key Code3" := ItemLedgerEntry."Location Code";
              GenericTempTable.INSERT;
            END;

            GenericTempTable.Text1 := ItemRec.Description;
            GenericTempTable.Text2 := Company.Name;
            GenericTempTable.Text3 := LocationRec.Name;
            GenericTempTable.Dec1 += ItemLedgerEntry.Quantity;

            GenericTempTable.MODIFY;
          UNTIL (ItemLedgerEntry.NEXT = 0);
        END;
      UNTIL (Company.NEXT = 0);

      PAGE.RUNMODAL(PAGE::"Item Inventory by Comp by Loc", GenericTempTable);
    END;

    PROCEDURE WriteInventoryOrderLine@1100528301(AdviceOrderLine@1100528300 : Record 11012055);
    VAR
      ICInventoryLine@1100528302 : Record 11020692;
      Item@1100528301 : Record 27;
    BEGIN
      IF AdviceOrderLine."Quantity (Advice)" < 0 THEN
        AdviceOrderLine.FIELDERROR("Quantity (Advice)");

      ICInventoryLine.INIT;
      ICInventoryLine.Type := ICInventoryLine.Type::Order;
      ICInventoryLine."Supplying Company" := COMPANYNAME;
      ICInventoryLine."Receiving Company" := AdviceOrderLine."Supplying Company Inventory";
      ICInventoryLine."Line No." := 0;
      ICInventoryLine."Entry Type" := ICInventoryLine."Entry Type"::Sale;
      ICInventoryLine."Document Date" := TODAY;
      ICInventoryLine."Posting Date" := TODAY;
      IF NOT Item.GET(AdviceOrderLine."Item No.") THEN
        ERROR(Text006);
      ICInventoryLine."Item No." := AdviceOrderLine."Item No.";
      ICInventoryLine.Quantity := AdviceOrderLine.GetDeliverableQuantity;
      ICInventoryLine."Unit of Measure" := Item."Base Unit of Measure";
      ICInventoryLine."Delivery Date" := AdviceOrderLine."Receipt Date";
      ICInventoryLine."Project No." := AdviceOrderLine."Project No.";
      ICInventoryLine."Service Order No." := AdviceOrderLine."Service Order No.";
      ICInventoryLine."Delivery Time" := AdviceOrderLine."Delivery Time";
      ICInventoryLine.Element := AdviceOrderLine.Element; //C018402
      ICInventoryLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CheckAdviceBeforeProcessing@1100528901(VAR gvAdviceRec@1100528902 : Record 11012055;CollectRun@1100528901 : Boolean;ItemRun@1100528900 : Boolean);
    VAR
      ConFirmAnswered@1100528903 : Boolean;
      StrategicPurchMgt@1100528904 : Codeunit 11020211;
      LastRefNo@1100528907 : Code[20];
      UserSetup@1100525000 : Record 91;
    BEGIN
      //DP00137
      ProjSetUp.GET;
      PurchSetup.GET;
      //varPeriodFilterTxt := '';

      IF GUIALLOWED THEN BEGIN
        IF NOT (gCollectiveRun AND OptionsForAdviceOrderDone) THEN BEGIN
          CLEAR(MakePurchOrder);
          IF gvAdviceRec.FINDFIRST THEN
            IF gvAdviceRec."Record Type" = gvAdviceRec."Record Type"::ServOrder THEN
              MakePurchOrder.SetActivateFromSOAdviceOrder
            ELSE
              MakePurchOrder.SetActivateFromAdviceOrder;
          MakePurchOrder.RUNMODAL;
          MakePurchOrder.GetOptionsForAdviceOrder(
            StartProcess,SelectionMethod,varPurchHeader,PrintPurchOrders,
            ProcElectronicOrderType,TransferCommentLines,varPeriodFilterTxt,LinkItemDocsToOrder);
          IF gCollectiveRun THEN
            OptionsForAdviceOrderDone := TRUE;
        END;
        // C003664.sn
        IF NOT StartProcess THEN
          EXIT;
        // C003664.en
      END ELSE BEGIN
        //This code is executed on NAS when a purchase order is created for an advice order line that is created on mobile
        StartProcess := TRUE;
        SelectionMethod := SelectionMethod::Vendor;
        PrintPurchOrders := FALSE;
        ProcElectronicOrderType := FALSE;
        TransferCommentLines := TRUE;
        IF UserSetup.GET(USERID) THEN
          varPurchHeader."Purchaser Code" := UserSetup.Purchaser;
        varPurchHeader."Order Date" := WORKDATE;
        varPurchHeader."Posting Date" := WORKDATE;
        varPeriodFilterTxt := '';
        LinkItemDocsToOrder := PurchSetup."Allow Link Item Docs to Purch.";
      END;
      varPurchHeader.CheckAskForNoSeries(varPurchHeader."Document Type"::Order, varNoSeries);  //db, 23-07-12

      IF CollectRun = FALSE THEN BEGIN
        AdviceRec.COPY(gvAdviceRec);
        AdviceRec.MARKEDONLY(TRUE);
        IF NOT AdviceRec.FINDFIRST THEN
          AdviceRec.MARKEDONLY(FALSE);
        AdviceRec.FILTERGROUP(8); //call 33763, user filters are kept
        IF ItemRun = FALSE THEN BEGIN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN BEGIN
            AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::Project);
            AdviceRec.SETRANGE("Project No.", AdviceRec."Project No.");
          END;
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN BEGIN
            AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
            AdviceRec.SETFILTER("Project No.", '%1', '');
            AdviceRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
          END;
          AdviceRec.CALCFIELDS("Logistics on Component Level"); // Call 27339
          AdviceRec.SETRANGE("Logistics on Component Level",FALSE);  // Call 27339
        END;
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;
      AdviceRec.CALCFIELDS("Consent Lines Available",AdviceRec."Consent Lines Serv. Available");
      AdviceRec.SETRANGE("Consent Lines Available",FALSE);
      AdviceRec.SETRANGE("Consent Lines Serv. Available",FALSE);
      AdviceRec.FILTERGROUP(8); //call 33763, user filters are kept
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Purchase);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.SETFILTER("Source Type", '<>%1', AdviceRec."Source Type"::"Recipe Header");  //db, 24-06-11: M15569
      IF varPeriodFilterTxt <> '' THEN                            //DP00556
        AdviceRec.SETFILTER("Receipt Date", varPeriodFilterTxt);  //DP00556

      IF NOT AdviceRec.FINDFIRST THEN
        IF (ProjSetUp."Release Advice Order Mandatory" = TRUE) THEN BEGIN
          IF (AdviceRec.COUNT = 0) AND GUIALLOWED THEN
            MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
          EXIT;
        END ELSE
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);

      IF (NOT AdviceRec.FINDSET(FALSE)) THEN BEGIN
          IF (AdviceRec.COUNT = 0) AND GUIALLOWED THEN
            MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
          EXIT;
      END;

      REPEAT
        StrategicPurchMgt.CheckStratPurchForAdviceOrder(AdviceRec);
        StrategicPurchMgt.FindContractForAdviceOrder(AdviceRec);  //*C004541
        AdviceRec.TESTFIELD("Order Date");
        AdviceRec.CheckRecordType(1); //check status of project/service order
        AdviceRec.CheckDeliver;
        AdviceRec.VALIDATE("Ship To Location");
        IF (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          IF NOT ConFirmAnswered THEN
            IF NOT CONFIRM(Text003, TRUE) THEN
              ERROR('');
          ConFirmAnswered := TRUE;
          AdviceRec."Order Date" := TODAY;
          AdviceRec.VALIDATE("Delivery Period"); //call 31318
        END;
        IF AdviceRec."Quantity (Advice)" < 0 THEN
          AdviceRec.FIELDERROR("Quantity (Advice)");

        AdviceRec.TESTFIELD(Vendor);
        VendorRec.GET(AdviceRec.Vendor);

        AdviceRec.TESTFIELD("Cost Object");
        DimMgt.GetDimValueRec(2,AdviceRec."Cost Object",DimValRec,TRUE,'');

        //C025259.sn
        IF (AdviceRec."Record Type" = AdviceRec."Record Type"::Project) AND (AdviceRec.Element = '') THEN BEGIN
          ProjRec.GET(AdviceRec."Project No.");
          IF ProjRec."Posting Element Mandatory" THEN
            AdviceRec.TESTFIELD(Element);
        END;
        //C025259.en

        FillSortAdviceOrder(AdviceRec);

        IF (AdviceRec."Purchase Route Reference" = '') THEN BEGIN
          LastRefNo := RouteRefMgtCU.GetLastRefNo();
          LastRefNo := INCSTR(LastRefNo);
          AdviceRec."Purchase Route Reference" := LastRefNo;
          RouteRefMgtCU.WriteLastRefNo(LastRefNo);
        END;
        AdviceRec."Modified by" := USERID;
        AdviceRec."Last Date Modified" := TODAY;
        AdviceRec.MODIFY(TRUE);

        TmpAdviceRec := AdviceRec;
        TmpAdviceRec.INSERT;
      UNTIL AdviceRec.NEXT = 0;

      IF (TmpAdviceRec.COUNT = 0) THEN
        MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
    END;

    LOCAL PROCEDURE FillSortAdviceOrder@1210190000(VAR AdviceRec@1100525000 : Record 11012055);
    VAR
      PurchaseLineDetail@1100528900 : Record 11020660;
    BEGIN
      //DP00137
      AdviceRec."Sort Purchase" := '';
      AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~V~' + AdviceRec.Vendor;
      IF PurchSetup."Create Order by Cost Type" = TRUE THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~C~' + STRSUBSTNO('%1', AdviceRec."Cost Type");

      IF SelectionMethod = SelectionMethod::Project THEN BEGIN
        //AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No.";
      //CALL 28843 sn DP00556
        IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN   //Project or Service
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No."
        ELSE
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Order No.";
      END;
      //CALL 28843 en DP00556
      //CALL C016506  sn DP00556
      IF SelectionMethod = SelectionMethod::"Project-Ship-to Location" THEN BEGIN
        IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN   //Project or Service
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No."
        ELSE
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Order No.";
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~L~' + AdviceRec."Ship To Location";
      END;
      //CALL C016506  en DP00556
      IF SelectionMethod = SelectionMethod::"Work Order" THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~W~' + AdviceRec."Work Order No.";
      IF SelectionMethod = SelectionMethod::"Ship-to Location" THEN BEGIN
        IF AdviceRec.Deliver = AdviceRec.Deliver::" " THEN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No."
          ELSE
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Order No.";
        IF AdviceRec.Deliver = AdviceRec.Deliver::"Project Location" THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No." + '~' + AdviceRec."Ship To Location";
        IF AdviceRec.Deliver = AdviceRec.Deliver::"Service Location" THEN BEGIN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Order No.";
          IF AdviceRec."Ship To Location" <> '' THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~' + AdviceRec."Ship To Location";
        END;
        IF AdviceRec.Deliver = AdviceRec.Deliver::Location THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~L~' + AdviceRec."Ship To Location";
      END;

      IF ProjSetUp."Compress Adv Order by Element" THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~M~' + AdviceRec.Element;
      IF ProjSetUp."Compress Adv Order by Variant" THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~R~' + AdviceRec."Variant Code";

      IF (ProjSetUp."Compress Adv Order by Version") OR
         (ProjSetUp."Compress Adv Order by Color") THEN BEGIN
        IF PurchaseLineDetail.GET(PurchaseLineDetail."Line Type"::"Advice Order",
          AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Yard No.",
          AdviceRec."System No.", AdviceRec."Entity Type", AdviceRec."Entity No.",
          AdviceRec."Service Order No.", '', AdviceRec."Line No.") THEN BEGIN
          IF ProjSetUp."Compress Adv Order by Version" THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~N~' + PurchaseLineDetail.Version;
          IF ProjSetUp."Compress Adv Order by Color" THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~O~' + PurchaseLineDetail.Color;
        END;
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrders@1100528902();
    VAR
      DummyBlanketOrderLine@1100409001 : Record 39;
      UseBlanketOrder@1100409000 : Boolean;
      PrevSort@1100528903 : Text[250];
    BEGIN
      //DP00137
      //varPurchHeader.CheckAskForNoSeries(varPurchHeader."Document Type"::Order, varNoSeries);  //db, 23-07-12

      TmpAdviceRec.SETCURRENTKEY("Sort Purchase");
      IF TmpAdviceRec.FINDSET THEN BEGIN
        REPEAT
          IF (PrevSort <> TmpAdviceRec."Sort Purchase") THEN BEGIN
            PrevSort := TmpAdviceRec."Sort Purchase";
            CreatePurchaseHeader;
            InsertTmpPurchaseHeader;
          END;
          ModifyTmpPurchaseHeader;
          //CreatePurchaseLine;  //*C004541.o
          //*C004541.sn
          UseBlanketOrder := TmpAdviceRec."Contract Type" IN [
            TmpAdviceRec."Contract Type"::"General Blanket Order",
            TmpAdviceRec."Contract Type"::"Project Blanket Order",
            TmpAdviceRec."Contract Type"::"Service Blanket Order"];
          IF (NOT UseBlanketOrder) OR (TmpAdviceRec."Quantity (Advice)" = 0) THEN
            CreatePurchaseLine(TmpAdviceRec."Quantity (Advice)", FALSE, DummyBlanketOrderLine)
          ELSE
            CreatePurchLinesWithBlktOrders();
          //*C004541.en
          UpdateAdviceLine;
        UNTIL TmpAdviceRec.NEXT = 0;
      END;

      FinalizeTmpPurchaseHeader;
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@1100528903();
    VAR
      PurchaserRec@1100528901 : Record 13;
      PurchaseHeaderExtension@1100528300 : Record 11020398;
    BEGIN
      WITH TmpAdviceRec DO BEGIN
        PurchSetup.GET;
        PurchSetup.TESTFIELD("Order Nos.");

        PurchOrderHeader.INIT;
        PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
        PurchOrderHeader."No." := '';
        PurchOrderHeader."No. Series" := varNoSeries;
        PurchOrderHeader.GetNoForSelectedNoSeries(PurchOrderHeader);
        PurchOrderHeader.INSERT(TRUE);

        PurchOrderHeader."Order Date" := varPurchHeader."Order Date";
        PurchOrderHeader."Posting Date" := varPurchHeader."Posting Date";
        PurchOrderHeader."Purchaser Code" := ''; //db, 08-05-15: 26032
        //-skip default purchaser by user initialized by InitRecord on init-trigger of PurchOrderHeader
        //-if Dim1 filled for purchaser, validate vendor creates dimension due to standard Navision rules
        PurchOrderHeader.VALIDATE("Buy-from Vendor No.", Vendor);
        PurchOrderHeader.VALIDATE("Order Address Code","Order Address Code");
        PurchOrderHeader.VALIDATE("Received on Project", "Project No.");
        PurchOrderHeader.VALIDATE("Service Order No.", "Service Order No.");
        PurchOrderHeader.VALIDATE(Deliver, Deliver);
        PurchOrderHeader.VALIDATE("Ship To Location", "Ship To Location");
        PurchOrderHeader."Your Reference" := varPurchHeader."Your Reference";
        //db.sn, 08-05-15: 26032
        IF PurchaserRec.GET(varPurchHeader."Purchaser Code") THEN
          PurchOrderHeader.VALIDATE("Purchaser Code", varPurchHeader."Purchaser Code"); //check create dim1 and fill reference (icm)
        //db.en, 08-05-15: 26032
        IF "Global Dimension 1 Code" <> '' THEN
          PurchOrderHeader.VALIDATE("Shortcut Dimension 1 Code", "Global Dimension 1 Code");
        IF FORMAT(PurchOrderHeader."Lead Time Calculation") <> '' THEN BEGIN
          CLEAR(PurchOrderHeader."Lead Time Calculation");  //skip Delivery Period by Vendor
          PurchOrderHeader."Expected Receipt Date" := 0D;   //receipt date will be reset afterwards
        END;
        PurchOrderHeader."Amounts only" := FALSE;
        PurchOrderHeader.MODIFY;

        PurchaseHeaderExtension."Delivery Time" := "Delivery Time";
        PurchaseHeaderExtension.UpdatePurchHeadExtension(PurchOrderHeader."Document Type",
          PurchOrderHeader."No.")
      END;
    END;

    LOCAL PROCEDURE CreatePurchLinesWithBlktOrders@1100409000();
    VAR
      BlanketOrder@1100525005 : Record 38;
      BlanketOrderLine@1100525004 : Record 39;
      RemainingQuantity@1100525003 : Decimal;
      ProcessQuantity@1100525002 : Decimal;
      DeliverableQuan@1100525006 : Decimal;
    BEGIN
      //*C004541 (DP00137)
      WITH TmpAdviceRec DO BEGIN
        //create purchase order line on base of blanket order line (if exists)
        RemainingQuantity := "Quantity (Advice)";
        BlanketOrder.SETRANGE("Document Type", BlanketOrderLine."Document Type"::"Blanket Order");
        BlanketOrder.SETRANGE("Buy-from Vendor No.", Vendor);
        BlanketOrder.SETFILTER(Status,'<>%1',BlanketOrder.Status::Closed);
        IF BlanketOrder.FINDSET THEN
          REPEAT
            IF RemainingQuantity > 0 THEN BEGIN
              BlanketOrderLine.SETRANGE("Document Type",BlanketOrder."Document Type");
              BlanketOrderLine.SETRANGE("Document No.",BlanketOrder."No.");
              //mg.sc, 20-06-11: M27193
              IF "Item No." <> '' THEN
                BlanketOrderLine.SETRANGE("Item No.", "Item No.");
              //mg.ec, 20-06-11: M27193
              IF "Trade Item" <> '' THEN
                BlanketOrderLine.SETRANGE("Trade Item","Trade Item");
              IF BlanketOrder."Consumption per Location" THEN
                BlanketOrderLine.SETRANGE("Location Code","Location Code");
              //BlanketOrderLine.SETFILTER("Qty. to Receive",'<>%1',0);  //db, 25-05-10: M19111
              IF "Contract Type" = "Contract Type"::"Project Blanket Order" THEN
                BlanketOrderLine.SETRANGE("Job No.","Project No.");
              IF "Contract Type" = "Contract Type"::"Service Blanket Order" THEN
                BlanketOrderLine.SETRANGE("Service Contract No.","Service Contract No.");
              IF BlanketOrderLine.FINDSET THEN
                REPEAT
                  DeliverableQuan := BlanketOrderLine.GetQuanToBeDelivered;  //db, 25-05-10: M19111
                  IF RemainingQuantity > 0 THEN BEGIN
                    IF RemainingQuantity >= DeliverableQuan THEN
                      ProcessQuantity := DeliverableQuan  //db, 25-05-10: M19111
                    ELSE
                      ProcessQuantity := RemainingQuantity;
                    IF ProcessQuantity > 0 THEN BEGIN
                      CreatePurchaseLine(ProcessQuantity, TRUE, BlanketOrderLine);
                      RemainingQuantity -= ProcessQuantity;
                    END;
                  END;
                UNTIL BlanketOrderLine.NEXT = 0;
            END;
          UNTIL BlanketOrder.NEXT = 0;

        //create order for remaing amount
        IF RemainingQuantity > 0 THEN BEGIN
          CLEAR(BlanketOrderLine);
          CreatePurchaseLine(RemainingQuantity, FALSE, BlanketOrderLine);
        END;

      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1100528904(PurchLineQty@1100409001 : Decimal;UseBlanketOrder@1100409002 : Boolean;BlanketOrderLine@1100409003 : Record 39);
    VAR
      LastLine@1100528900 : Integer;
      PurchQuoteLine@1100528901 : Record 39;
      MakeOrderMgt@1100528902 : Codeunit 333;
      CalendarMgt@1100528903 : Codeunit 7600;
      TransferExtendedText@1100409000 : Codeunit 378;
      CalChange@1100528904 : Record 11072016;
      PurchaseLineExtension@1100528905 : Record 11020644;
      UnitFactor@1100528907 : Decimal;
      BaseUnit@1100528906 : Code[20];
      CurrencyCode@1100528400 : Code[20];
      CalendarMgmt@1100528803 : Codeunit 7600;
      CompInfoRec@1100528802 : Record 79;
      NonWorkDate@1100528801 : Boolean;
      dummyDesc@1100528800 : Text[30];
      VendorPrice@1100528401 : Decimal;
    BEGIN
      //DP00137
      WITH TmpAdviceRec DO BEGIN
        PurchOrderLine.RESET;
        PurchOrderLine.SETRANGE(PurchOrderLine."Document Type",PurchOrderHeader."Document Type");
        PurchOrderLine.SETRANGE(PurchOrderLine."Document No.",PurchOrderHeader."No.");
        IF PurchOrderLine.FINDLAST THEN
          LastLine := PurchOrderLine."Line No.";

        PurchOrderLine.INIT;
        PurchOrderLine.BlockDynamicTracking(TRUE);
        PurchOrderLine.SetCreateFromReqLine;
        PurchOrderLine.SuspendUpdateAmounts(TRUE);
        PurchOrderLine."Document Type" := PurchOrderHeader."Document Type";
        PurchOrderLine."Document No." := PurchOrderHeader."No.";
        PurchOrderLine."Line No." := LastLine + 10000;
        PurchOrderLine."Buy-from Vendor No." := Vendor;
        PurchOrderLine."Input by" := USERID; //DP00469
        PurchOrderLine."Input Date" := TODAY; //DP00469
        PurchOrderLine.INSERT;

        //*C004541.sn
        IF UseBlanketOrder THEN BEGIN
          PurchOrderLine."Blanket Order No." := BlanketOrderLine."Document No.";
          PurchOrderLine."Blanket Order Line No." := BlanketOrderLine."Line No.";
        END;
        //*C004541.en
        UnitFactor := 1;
        IF "Trade Item" <> '' THEN BEGIN
          TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
          IF "Unit of Measure" = UPPERCASE(TradeItemRec."Packaging Unit") THEN BEGIN
            UnitFactor := TradeItemRec."Qty. per Unit of Measure";
            BaseUnit := TradeItemRec."Application Unit";
          END;
        END ELSE BEGIN
          IF "Item No." <> '' THEN BEGIN
            ItemRec.GET("Item No.");
            ItemUnitRec.GET("Item No.", "Unit of Measure");
            UnitFactor := ItemUnitRec."Qty. per Unit of Measure";
            BaseUnit := ItemRec."Base Unit of Measure";
          END;
        END;
        IF (UnitFactor <> 0) AND (UnitFactor <> 1) THEN BEGIN
          //"Quantity (Advice)" := "Quantity (Advice)" * UnitFactor;  //*C004541.o
          PurchLineQty := PurchLineQty * UnitFactor;  //*C004541.n
          VALIDATE("Unit of Measure", BaseUnit);
          VALIDATE(Price, Price / UnitFactor);
        END;
        //IF ("Quantity (Advice)" > 0) AND (Price < 0) THEN BEGIN  //mg, 05-04-11: M24388  //*C004541.o
        //  "Quantity (Advice)" := -"Quantity (Advice)";                                   //*C004541.o
        IF (PurchLineQty > 0) AND (Price < 0) THEN BEGIN  //mg, 05-04-11: M24388  //*C004541.n
          PurchLineQty := -PurchLineQty;                                          //*C004541.n
          Price := -Price;
        END;

        //next validate of unit and quantity copied from old procedure (codeunit 333); execute before validate item
        PurchOrderLine.Type := PurchOrderLine.Type::"G/L Account";
        //db.sn, 14-12-12: C004556 (dirty solution copied from codeunit 333: required for check at validate quantity)
        PurchOrderLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        PurchOrderLine."Trade Item" := "Trade Item";
        //db.en, 14-12-12: C004556
        PurchOrderLine.VALIDATE("Unit of Measure Code", "Unit of Measure");
        //PurchOrderLine.VALIDATE(Quantity, "Quantity (Advice)");  //*C004541.o
        PurchOrderLine.VALIDATE(Quantity, PurchLineQty);  //*C004541.n
        PurchOrderLine."Sales Price" := "Sales Price";

        TESTFIELD("Cost Object");
        IF "Cost Object" <> '' THEN BEGIN
          DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');
          PurchOrderLine."Cost Type" := DimValRec."Cost Type" + 1;  //required for job/serv.order to determine GL-account
        END;
        IF "Project No." <> '' THEN BEGIN
          PurchOrderLine.VALIDATE("Job No.", "Project No.");
          PurchOrderLine.VALIDATE(Element, Element);
          PurchOrderLine."Extension Contract" := "Extension Contract";
          PurchOrderLine."Tender Paragraph" := "Tender Paragraph";
          PurchOrderLine."Tender Paragraph Part" := "Tender Paragraph Part";
        END;
        IF "Service Order No." <> '' THEN
          PurchOrderLine.VALIDATE("Service Order No.", "Service Order No.");

        IF "Cost Object" <> '' THEN BEGIN  //db, 10-06-14: C009727: disturbed by validate (CreateDim)
          //PurchOrderLine."Cost Type" := "Cost Type" + 1;
          DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');
          PurchOrderLine."Cost Type" := DimValRec."Cost Type" + 1;  //db, 17-06-14: C015938
          PurchOrderLine."Shortcut Dimension 2 Code" := "Cost Object";
        END;

        IF "Trade Item" <> '' THEN BEGIN
          PurchOrderLine.Manufacturer := Manufacturer;
          PurchOrderLine."Basic Item" := "Basic Item";
          PurchOrderLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
          PurchOrderLine."Trade Item" := '';
          PurchOrderLine.VALIDATE("Trade Item", "Trade Item");
          IF ItemRec.GET("Item No.") THEN
            PurchOrderLine."Item No." := "Item No.";
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            PurchOrderLine.Manufacturer := Manufacturer;
            PurchOrderLine."Basic Item" := '';
            PurchOrderLine.VALIDATE("Basic Item", "Basic Item");
          END ELSE BEGIN
            IF "Item No." <> '' THEN BEGIN
              PurchOrderLine."Item No." := '';
              PurchOrderLine.VALIDATE("Item No." , "Item No.");
            END ELSE BEGIN
              "Price Agreement" := TRUE;
            END;
          END;
        END;
        PurchOrderLine."Price Agreement" := "Price Agreement";
        PurchOrderLine."Purchase Route Reference" := "Purchase Route Reference";
        IF RouteRefMgtCU.CheckReferenceHasSelectedQuote("Purchase Route Reference", PurchQuoteLine) THEN BEGIN
          PurchOrderLine."Price Agreement" := TRUE;
          Price := PurchQuoteLine."Direct Unit Cost";
        END;

        //db, 22-02-05: due to validate of item, project several settings can be reset: dim2 evaluates account (and price)
        PurchOrderLine."Additional Cost (Service)" := "Additional Cost (Service)";
        PurchOrderLine.VALIDATE("Shortcut Dimension 1 Code", "Global Dimension 1 Code");
        PurchOrderLine.VALIDATE("Shortcut Dimension 2 Code", "Cost Object");
        PurchOrderLine."Shortcut Dimension 2 Code" := "Cost Object";
        PurchOrderLine.ValidateShortcutDimCode(2, PurchOrderLine."Shortcut Dimension 2 Code");
        IF PurchOrderLine."Price Agreement" = TRUE THEN BEGIN
          //db, 22-02-05: evaluate price agreement (from quote or manual) reset by validate item-data (melding 4693)
          Price :=  Price *  PurchOrderLine."Qty. per Unit of Measure";
          VendorPrice := GetVendorPrice(Vendor, Price, CurrencyCode);
          IF PurchOrderHeader."Prices Including VAT" THEN
            PurchOrderLine.VALIDATE("Direct Unit Cost", VendorPrice * (1 + PurchOrderLine."VAT %" / 100))
          ELSE
            PurchOrderLine.VALIDATE("Direct Unit Cost", VendorPrice);
          //db.sn, 31-12-12: C004763
          PurchOrderLine."Discount % (Item)" := "Discount %";
          IF (1 - "Discount %" / 100) <> 0 THEN  //db, 15-05-13: C007375
            PurchOrderLine."Unit Price (LCY)" := PurchOrderLine."Unit Cost (LCY)" / (1 - "Discount %" / 100);
          IF PurchOrderLine."Unit Price (LCY)" = 0 THEN
            PurchOrderLine."Unit Price (LCY)" := PurchOrderLine."Unit Cost (LCY)";
          //db.en, 31-12-12: C004763
        END;
        //*C004541.sn
        IF UseBlanketOrder THEN BEGIN
          PurchOrderLine.VALIDATE("Direct Unit Cost",BlanketOrderLine."Direct Unit Cost");
          IF BlanketOrderLine."Unit Cost (LCY)" <> 0 THEN
            PurchOrderLine.VALIDATE("Unit Cost (LCY)",BlanketOrderLine."Unit Cost (LCY)");
          IF BlanketOrderLine."Unit Price (LCY)" <> 0 THEN
            PurchOrderLine.VALIDATE("Unit Price (LCY)",BlanketOrderLine."Unit Price (LCY)");
        END;
        //*C004541.en
        IF ("Item No." + "Basic Item" + "Trade Item" = '') THEN
          PurchOrderLine."Unit of Measure Code" := "Unit of Measure";  //db, 03-09-13: C009226 (disturbed by validate Cost Object)
        PurchOrderLine."Cost Component" := "Cost Component";
        PurchOrderLine.Description := Description;
        PurchOrderLine."Description 2" := "Description 2";
        PurchOrderLine."Variant Code" := "Variant Code";
        PurchOrderLine."Posting Date" := PurchOrderHeader."Posting Date";
        PurchOrderLine."Order Date" := PurchOrderHeader."Order Date";
        IF "Receipt Date" <> 0D THEN BEGIN
          PurchOrderLine.VALIDATE("Expected Receipt Date", "Receipt Date");
          PurchOrderLine."Requested Receipt Date" := "Receipt Date";
        END;
        MakeOrderMgt.GetDeliveryPeriod(
          PurchOrderLine."Order Date", PurchOrderLine."Expected Receipt Date", PurchOrderLine."Lead Time Calculation");

        IF PurchOrderLine."Expected Receipt Date" <> 0D THEN
          PurchOrderLine."Planned Receipt Date" :=
            CalendarMgt.CalcDateBOC2(PurchOrderLine.InternalLeadTimeDays(PurchOrderLine."Expected Receipt Date"),
              PurchOrderLine."Expected Receipt Date",
              CalChange."Source Type"::Location,PurchOrderLine."Location Code",'',
              CalChange."Source Type"::Vendor,PurchOrderLine."Buy-from Vendor No.",'',TRUE)
        ELSE
          PurchOrderLine."Planned Receipt Date" :=  PurchOrderLine."Expected Receipt Date";

        // dp00310.sn
        PurchSetup.GET;
        CompInfoRec.GET;
        IF PurchSetup."Allow Nonworking Receipt Date" THEN BEGIN
          NonWorkDate := CalendarMgmt.CheckDateStatus(CompInfoRec."Base Calendar Code", "Receipt Date", dummyDesc);
          IF NonWorkDate = TRUE THEN BEGIN
            PurchOrderLine."Requested Receipt Date" := "Receipt Date";
            PurchOrderLine."Expected Receipt Date" := "Receipt Date";
            PurchOrderLine."Planned Receipt Date" := "Receipt Date";
            EVALUATE(PurchOrderLine."Lead Time Calculation", "Delivery Period");
          END;
        END;
        // dp00310.en

        PurchOrderLine."Contract Type" := "Contract Type";
        PurchOrderLine."Scheme Code" := "Scheme Code";
        PurchOrderLine."Plot No." := "Plot No.";
        PurchOrderLine."Comments for Logistics" := "Comments for Logistics";
        PurchOrderLine."Bin Code" := "Bin Code";  //disturbed by validate project
        PurchOrderLine."Purchase Action" := "Purchase Action";
        PurchOrderLine."Purchase Phase" := "Purchase Phase";
        PurchOrderLine.VALIDATE(Text, "External Text");

        PurchOrderLine.SuspendUpdateAmounts(FALSE);
        PurchOrderLine.UpdateAmounts;

        PurchOrderLine."Entity Type" := "Entity Type";
        PurchaseLineExtension."Yard No." := "Yard No.";
        PurchaseLineExtension."System No." := "System No.";
        PurchaseLineExtension."Entity No." := "Entity No.";
        PurchaseLineExtension."Cable Transit Pos." := "Cable Transit Pos.";
        PurchaseLineExtension."Source Advice Order" := TRUE;
        PurchaseLineExtension."Work Order No." := "Work Order No.";
        PurchaseLineExtension.UpdatePurchLineExtension(
          PurchOrderLine."Document Type", PurchOrderLine."Document No.", PurchOrderLine."Line No.");
        PurchOrderLine.VALIDATE("Item Category Code", "Item Category Code");
        PurchOrderLine."FSC Type Code" := "FSC Type Code";
        TmpAdviceRec.CALCFIELDS("Shelf No. (Item)");  // C004108.n
        PurchOrderLine."Shelf No." := "Shelf No. (Item)"; // C004108.n

        PurchOrderLine."Modified by" := USERID; //DP00469
        PurchOrderLine."Last Date Modified" := TODAY;//DP00469
        PurchOrderLine.MODIFY;

        CopyDocLinksAdvicePurchOrder;
        CopyCommLinesAdvicePurchOrder;
        CopyDetailsAdvicePurchOrder;

        PurchOrderLine.CreatePurchOrderControl(FALSE);

        IF TransferExtendedText.PurchCheckIfAnyExtText(PurchOrderLine, FALSE) THEN  //*C004564.n
          TransferExtendedText.InsertPurchExtText(PurchOrderLine);                  //*C004564.n
      END;
    END;

    PROCEDURE InsertTmpPurchaseHeader@1100528911();
    BEGIN
      //DP00137
      TmpPurchHeader.COPY(PurchOrderHeader);
      TmpPurchHeader."Job No." := TmpAdviceRec."Project No.";
      TmpPurchHeader."Service Order No." := TmpAdviceRec."Service Order No.";
      TmpPurchHeader."Expected Receipt Date" := TmpAdviceRec."Receipt Date";
      TmpPurchHeader."Requested Receipt Date":= TmpAdviceRec."Receipt Date";
      TmpPurchHeader.INSERT;
    END;

    PROCEDURE ModifyTmpPurchaseHeader@1100528912();
    VAR
      PurchaseHeaderExtension@1100528300 : Record 11020398;
    BEGIN
      //DP00137
      IF TmpAdviceRec."Project No." <> TmpPurchHeader."Job No." THEN
        TmpPurchHeader."Job No." := '';
      IF TmpAdviceRec."Service Order No." <> TmpPurchHeader."Service Order No." THEN
        TmpPurchHeader."Service Order No." := '';
      IF TmpAdviceRec."Receipt Date" < TmpPurchHeader."Expected Receipt Date" THEN
        TmpPurchHeader."Expected Receipt Date" := TmpAdviceRec."Receipt Date";
      IF TmpAdviceRec."Receipt Date" < TmpPurchHeader."Requested Receipt Date" THEN
        TmpPurchHeader."Requested Receipt Date" := TmpAdviceRec."Receipt Date";
      TmpPurchHeader.MODIFY;

      PurchaseHeaderExtension.GetPurchHeadExtension(PurchOrderHeader."Document Type", PurchOrderHeader."No.");
      IF (PurchaseHeaderExtension."Delivery Time" > TmpAdviceRec."Delivery Time") THEN BEGIN
        PurchaseHeaderExtension."Delivery Time" := TmpAdviceRec."Delivery Time";
        PurchaseHeaderExtension.UpdatePurchHeadExtension(PurchOrderHeader."Document Type", PurchOrderHeader."No.");
      END;
    END;

    PROCEDURE FinalizeTmpPurchaseHeader@1100528905();
    VAR
      ProjRec@1100528900 : Record 11072003;
      ErrorRec@1100528902 : Record 11012051;
      PurchOrderHeader2@1100528903 : Record 38;
      PurchLine2@1100528000 : Record 39;
      CarryOutAction@1100528901 : Codeunit 99000813;
      Text000@1100528904 : TextConst 'ENU=The orders (%1) have been created.';
      DocumentPrint@1100528400 : Codeunit 229;
      ChangeStatus@1100528402 : 'None,Released,Closed';
      DirectPostOrder@1100528401 : 'According to Vendor,Not';
      FirstOrder@1100528906 : Code[20];
      LastOrder@1100528905 : Code[20];
    BEGIN
      //DP00137
      IF TmpPurchHeader.FINDSET THEN BEGIN
        REPEAT
          IF FirstOrder = '' THEN
            FirstOrder := TmpPurchHeader."No.";
          LastOrder := TmpPurchHeader."No.";

          PurchOrderHeader.GET(TmpPurchHeader."Document Type",TmpPurchHeader."No.");
          PurchOrderHeader."Expected Receipt Date" := TmpPurchHeader."Expected Receipt Date";
          IF TmpPurchHeader."Requested Receipt Date" <> 0D THEN
            PurchOrderHeader."Requested Receipt Date" := TmpPurchHeader."Requested Receipt Date"
          ELSE
            PurchOrderHeader."Requested Receipt Date" := TmpPurchHeader."Expected Receipt Date";
          PurchOrderHeader.SetHideValidationDialog(TRUE);
          IF PurchOrderHeader."Job No." = '' THEN
            IF TmpPurchHeader."Job No." <> '' THEN BEGIN
              PurchOrderHeader.VALIDATE("Job No.", TmpPurchHeader."Job No.");
              IF ProjRec.GET(TmpPurchHeader."Job No.") THEN
                PurchOrderHeader.Expediter := ProjRec.Expediter;
            END;

          PurchOrderHeader."Service Order No." := TmpPurchHeader."Service Order No.";
          PurchOrderHeader.SetHideValidationDialog(FALSE);
          PurchOrderHeader.MODIFY;

          PurchOrderHeader.CalcInvDiscForHeader;
          PurchOrderHeader.DetermineRemovalContribution;
          IF LinkItemDocsToOrder THEN
            PurchLine2.LinkItemDocumentsToPurchHead(PurchOrderHeader, PurchLine2, TRUE);
        UNTIL TmpPurchHeader.NEXT = 0;
      END;

      IF (FirstOrder <> '') AND (NOT gCollectiveRun) THEN BEGIN
        IF FirstOrder <> LastOrder THEN
          MESSAGE(Text000, FirstOrder + '..' + LastOrder)
        ELSE
          MESSAGE(Text000, FirstOrder);
      END;
      COMMIT;

      IF TmpPurchHeader.FINDSET THEN BEGIN
        REPEAT
          PurchOrderHeader.GET(TmpPurchHeader."Document Type",TmpPurchHeader."No.");
          IF PurchOrderHeader."Buy-from Vendor No." <> '' THEN BEGIN
            VendorRec.GET(PurchOrderHeader."Buy-from Vendor No.");
            IF PrintPurchOrders THEN BEGIN
              CarryOutAction.SetPrintOrder(PrintPurchOrders);
              CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
            END;
            IF (ProcElectronicOrderType) THEN BEGIN
              IF (NOT PrintPurchOrders) AND
                 (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::Standard)
              THEN BEGIN
                CarryOutAction.SetPrintOrder(TRUE);
                CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
              END;
              IF (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"ICM/ICF") AND
                 (VendorRec."ICM Login Code" <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                REPORT.RUNMODAL(REPORT::"Create ICM Files",FALSE,FALSE,PurchOrderHeader2);
              END;
              IF VendorRec.PurchaseOrdersAreSentByEMail AND
                 (PurchOrderHeader.GetEMailOrder <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                DocumentPrint.EmailPurchHeader(
                  PurchOrderHeader2, FALSE, ChangeStatus::None,
                  DirectPostOrder::"According to Vendor", FALSE, TRUE);
              END;
              IF ((VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"GS1 (SOAP)") OR
                  (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"GS1 (XML-RPC)")) AND
                 (VendorRec."GLN Code" <> '') AND
                 (VendorRec."URL GS1 Purchase Order" <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                REPORT.RUNMODAL(REPORT::"Send Purchase Order GS1", FALSE, FALSE, PurchOrderHeader2);
              END;
            END;
          END;
        UNTIL TmpPurchHeader.NEXT = 0;

        ErrorRec.SETRANGE("User ID", USERID);
        ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"ICM Export");
        IF ErrorRec.FIND('-') THEN BEGIN
          COMMIT;
          PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
        END;
      END;
    END;

    PROCEDURE UpdateAdviceLine@1100528906();
    BEGIN
      //DP00137
      AdviceRec.GET(TmpAdviceRec."Record Type", TmpAdviceRec."Project No.", TmpAdviceRec."Service Order No.", TmpAdviceRec."Line No.");
      AdviceRec.GetStatusOnProcess(TRUE);
      AdviceRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CopyDocLinksAdvicePurchOrder@1100528910();
    VAR
      DocumentLinkMgt@1100528403 : Codeunit 11012401;
      AdviceOrderLineRecRef@1100528404 : RecordRef;
      PurchaseOrderHeaderRecRef@1100528405 : RecordRef;
    BEGIN
      //DP00137
      AdviceOrderLineRecRef.GETTABLE(TmpAdviceRec);
      PurchaseOrderHeaderRecRef.GETTABLE(PurchOrderHeader);
      DocumentLinkMgt.CopyDocLinks(AdviceOrderLineRecRef, PurchaseOrderHeaderRecRef);
    END;

    PROCEDURE CopyCommLinesAdvicePurchOrder@1100528909();
    VAR
      CommentLineFrom@1100529803 : Record 11020634;
      PurchCommentLine@1100529804 : Record 43;
      RecRef@1100529806 : RecordRef;
      LineNo@1100529805 : Integer;
    BEGIN
      //DP00137
      IF NOT TransferCommentLines THEN
        EXIT;

      RecRef.GETTABLE(TmpAdviceRec);

      CommentLineFrom.RESET;
      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::"Advice Order");
      CommentLineFrom.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF CommentLineFrom.FINDSET THEN BEGIN
        PurchCommentLine.RESET;
        PurchCommentLine.SETRANGE("Document Type", PurchOrderLine."Document Type");
        PurchCommentLine.SETRANGE("No.", PurchOrderLine."Document No.");
        PurchCommentLine.SETRANGE("Document Line No.", PurchOrderLine."Line No.");
        IF PurchCommentLine.FINDLAST THEN
          LineNo := PurchCommentLine."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          PurchCommentLine.INIT;
          PurchCommentLine."Document Type" := PurchOrderLine."Document Type";
          PurchCommentLine."No." := PurchOrderLine."Document No.";
          PurchCommentLine."Document Line No." := PurchOrderLine."Line No.";
          PurchCommentLine."Line No." := LineNo;
          PurchCommentLine.Date := CommentLineFrom.Date;
          PurchCommentLine.Code := CommentLineFrom.Code;
          PurchCommentLine.Comment := CommentLineFrom.Comment;
          PurchCommentLine."Line Break" := CommentLineFrom."Line Break";
          PurchCommentLine."Created by" := CommentLineFrom."Created by";
          PurchCommentLine.INSERT(TRUE);

          LineNo += 10000
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyDetailsAdvicePurchOrder@1100528908();
    VAR
      PurchaseLineDetail@1210190004 : Record 11020660;
    BEGIN
      //DP00137
      PurchaseLineDetail.CopyLine(PurchaseLineDetail."Line Type"::"Advice Order",
        TmpAdviceRec."Record Type", TmpAdviceRec."Project No.", TmpAdviceRec."Yard No.", TmpAdviceRec."System No.",
        TmpAdviceRec."Entity Type", TmpAdviceRec."Entity No.",
        TmpAdviceRec."Service Order No.", '', TmpAdviceRec."Line No.",
        PurchaseLineDetail."Line Type"::"Purchase Order", PurchOrderLine."Document No.", PurchOrderLine."Line No.",
        FALSE);
    END;

    PROCEDURE ItemLine@1100409002(NavItem@1100409000 : Code[20];BasicItem@1100409001 : Code[20];TradeItem@1100409002 : Code[20]) : Boolean;
    BEGIN
      EXIT((NavItem <> '') OR (BasicItem <> '') OR (TradeItem <> ''));  //db, 15-11-12
    END;

    PROCEDURE SelectBaseRecipe@1100525004(VAR AdviceRec@1100525000 : Record 11012055);
    VAR
      RecipeFrm@1100525001 : Page 11125073;
      RecipeFrmOld@1100525003 : Page 11012164;
      EstSetup@1100525002 : Record 11012150;
    BEGIN
      //DP00381
      WITH AdviceRec DO BEGIN
        CLEAR(RecipeFrm);
        EstSetup.GET;
        IF EstSetup.Converted THEN BEGIN  //db, 03-04-14
          RecipeFrm.SetSelection(DATABASE::"Advice Order Line",
            "Project No.","Service Order No.",Element,"Extension Contract",'','','','','',TRUE,"Line No.");  //C027336
          RecipeFrm.RUNMODAL;
        END ELSE BEGIN
          RecipeFrmOld.SetSelection(DATABASE::"Advice Order Line",
           "Project No.","Service Order No.",Element,"Extension Contract",'','','','','',TRUE);
          RecipeFrmOld.RUNMODAL;
        END
      END;
    END;

    PROCEDURE ModifyRun@1100525006(VAR AdviceRec@1100525010 : Record 11012055);
    VAR
      NewValuesAdviceRec@1100525009 : Record 11012055;
      Employee@1100525011 : Record 5200;
      Location@1100525012 : Record 14;
      ResourceWOP@1100525005 : Record 11229278;
      ImexFrm@11012000 : Page 11130219;
      EditDeliver@1100525003 : Boolean;
      EditEmplLocation@1100525002 : Boolean;
      EditTransaction@1100525004 : Boolean;
      EditOrderDate@1100525001 : Boolean;
      EditReceiptDate@1100525000 : Boolean;
      IDeliver@1100409001 : ' ,Location,Project Location,Service Location,Order Address,Location Employee';
      ITransaction@1100409000 : ' ,Purchase,Inventory,Plant,Requisition';
    BEGIN
      //DP00676
      CLEAR(ImexFrm);
      ImexFrm.RUNMODAL;   //**modify advice orders

      EditDeliver := FALSE;
      EditTransaction := FALSE;
      EditOrderDate := FALSE;
      EditReceiptDate := FALSE;
      EditEmplLocation := FALSE;

      ImexRec.SETRANGE("User ID", USERID);
      ImexRec.SETFILTER("Process ID", 'P11130219*');
      ImexRec.SETRANGE(Type, ImexRec.Type::Export);
      IF ImexRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF ImexRec.Description = 'Transaction' THEN BEGIN
            EditTransaction := TRUE;
            EVALUATE(NewValuesAdviceRec.Transaction, ImexRec.Condition);
          END;
          IF  ImexRec.Description = 'From Location' THEN BEGIN
            IF NewValuesAdviceRec.Transaction = NewValuesAdviceRec.Transaction::Inventory THEN BEGIN
              EVALUATE(NewValuesAdviceRec."Location Code", ImexRec.Condition);
            END;
          END;

          IF ImexRec.Description = 'Deliver' THEN BEGIN
            EVALUATE(IDeliver, ImexRec.Condition);
            IF IDeliver = IDeliver::"Location Employee" THEN BEGIN
              EditEmplLocation := TRUE;
            END ELSE BEGIN
              EditDeliver := TRUE;
              EVALUATE(NewValuesAdviceRec.Deliver, ImexRec.Condition);
            END;
          END;

          IF ImexRec.Description = 'To Location' THEN BEGIN
            IF NewValuesAdviceRec.Deliver = NewValuesAdviceRec.Deliver::Location THEN BEGIN
              EVALUATE(NewValuesAdviceRec."Ship To Location", ImexRec.Condition);
            END;
          END;

          IF ImexRec.Description = 'Order Date' THEN BEGIN
            EditOrderDate := TRUE;
            EVALUATE(NewValuesAdviceRec."Order Date", ImexRec.Condition);
          END;

          IF ImexRec.Description = 'Receipt Date' THEN BEGIN
            EditReceiptDate := TRUE;
            EVALUATE(NewValuesAdviceRec."Receipt Date", ImexRec.Condition);

          END;
          ImexRec.DELETE;
        UNTIL ImexRec.NEXT = 0;
      END ELSE
        EXIT;

      IF NOT (EditDeliver OR EditTransaction OR EditOrderDate OR EditReceiptDate OR EditEmplLocation) THEN
        EXIT;

      IF AdviceRec.FINDSET(TRUE, FALSE) THEN
        REPEAT

          IF EditTransaction THEN BEGIN
            AdviceRec.VALIDATE(Transaction, NewValuesAdviceRec.Transaction);
            IF (NewValuesAdviceRec.Transaction = NewValuesAdviceRec.Transaction::Inventory) AND
              (NewValuesAdviceRec."Location Code" <> '')THEN
              AdviceRec.VALIDATE("Location Code", NewValuesAdviceRec."Location Code");
          END;
          IF EditDeliver THEN BEGIN
            AdviceRec.VALIDATE(Deliver, NewValuesAdviceRec.Deliver);
            IF (NewValuesAdviceRec.Deliver = NewValuesAdviceRec.Deliver::Location) AND
              (NewValuesAdviceRec."Ship To Location" <> '')THEN
              AdviceRec.VALIDATE("Ship To Location", NewValuesAdviceRec."Ship To Location");
          END;

          IF EditOrderDate THEN
            AdviceRec.VALIDATE("Order Date", NewValuesAdviceRec."Order Date");
          IF EditReceiptDate THEN
            AdviceRec.VALIDATE("Receipt Date", NewValuesAdviceRec."Receipt Date");
          IF EditEmplLocation THEN BEGIN
            IF ServOrderRec.GET(AdviceRec."Service Order No.") THEN BEGIN
              IF ServOrderRec."Employee No." <> '' THEN BEGIN
                IF ResourceWOP.GET(ServOrderRec."Employee No.") THEN BEGIN
                  IF ResourceWOP."Source No." <> '' THEN BEGIN
                    Employee.CHANGECOMPANY(ResourceWOP.Company);
                    IF Employee.GET(ResourceWOP."Source No.") THEN BEGIN
                      IF Employee."Location Code" <> '' THEN BEGIN
                        IF Location.GET(Employee."Location Code") THEN BEGIN
                          AdviceRec.VALIDATE(Deliver, AdviceRec.Deliver::Location);
                          AdviceRec.VALIDATE("Ship To Location",  Employee."Location Code");
                        END;
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END;
          AdviceRec.MODIFY(TRUE);
        UNTIL AdviceRec.NEXT = 0;

      COMMIT;
    END;

    PROCEDURE SelectToTypeAndBatch@1100409003(VAR lvToType@1100409001 : 'Item Journal,Item Reclass. Journal');
    VAR
      AdviceRec3@1100409003 : Record 11012055;
      SelectBatchForAdviceOrders@1100409002 : Page 11126526;
      lvCounter@1100409004 : Integer;
      lvMixedSources@1100409000 : Boolean;
    BEGIN
      //CALL C019988
      lvCounter := AdviceRec.COUNT;
      AdviceRec3.COPY(AdviceRec);
      AdviceRec3.SETFILTER("Location Code", '<>%1', '');
      AdviceRec3.SETFILTER("Ship To Location", '<>%1', '');
      AdviceRec3.SETRANGE(Deliver, AdviceRec3.Deliver::Location);
      IF NOT (AdviceRec3.COUNT = 0) THEN BEGIN
        IF AdviceRec3.COUNT <> lvCounter THEN BEGIN
          lvMixedSources := TRUE;
        END ELSE BEGIN
          lvMixedSources := FALSE;
        END;
        // select template and batch
        lvToType := lvToType::"Item Journal";
        SelectBatchForAdviceOrders.SetDefaults(lvToType,
          InventoryBatchRec."Journal Template Name",
          InventoryBatchRec.Name,
          lvMixedSources);
        SelectBatchForAdviceOrders.RUNMODAL;
        IF NOT SelectBatchForAdviceOrders.GetDefaults(lvToType,
             InventoryBatchRec."Journal Template Name",
             InventoryBatchRec.Name) THEN
          ERROR(Text031)
      END;
      ToTypeSelected := TRUE;
    END;

    PROCEDURE PreSetToTypeAndBatch@1100409007(VAR gvAdviceRec@1100409002 : Record 11012055;CollectRun@1100409001 : Boolean;ItemRun@1100409000 : Boolean);
    BEGIN
      //CALL C019988
      IF NOT ProjSetUp.GET THEN ProjSetUp.INIT;

      IF CollectRun = FALSE THEN BEGIN
        AdviceRec.COPY(gvAdviceRec);
        AdviceRec.MARKEDONLY(TRUE);
        IF NOT AdviceRec.FINDFIRST THEN
          AdviceRec.MARKEDONLY(FALSE);  //db, 18-01-12: M32140
        AdviceRec.FILTERGROUP(8); //call 33763, user filters are kept
        IF ItemRun = FALSE THEN BEGIN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
            AdviceRec.SETRANGE("Project No.", AdviceRec."Project No.");
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
            AdviceRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
        END;
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;
      AdviceRec.FILTERGROUP(8); //call 33763, user filters are kept
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Inventory);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.CALCFIELDS("Logistics on Component Level"); // Call 27339
      AdviceRec.SETRANGE("Logistics on Component Level",FALSE);  // Call 27339
      IF NOT AdviceRec.FINDFIRST THEN
        IF  NOT ProjSetUp."Release Advice Order Mandatory" THEN
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);

      IF (NOT AdviceRec.FINDFIRST) THEN
        EXIT;

      SelectToTypeAndBatch(gvToType);
    END;

    PROCEDURE SetCollectiveRun@1100409005();
    BEGIN
      gCollectiveRun := TRUE;
    END;

    BEGIN
    END.
  }
}

