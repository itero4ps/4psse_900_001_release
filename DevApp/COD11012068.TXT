OBJECT Codeunit 11012068 Multiple Copy Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 39=m;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100485001 : TextConst 'ENU=Unknown Source Table';
      PurchHeaderRec@1100485037 : Record 38;
      PurchLineRec@1100485036 : Record 39;
      StdPurchRec@1100485043 : Record 174;
      ProjRec@1100485035 : Record 11072003;
      ExtRec@1100485034 : Record 11012004;
      AdjRec@1100485033 : Record 11012003;
      BudgetOptionRec@1100485032 : Record 11012503;
      BudgetLineRec@1100485031 : Record 11012001;
      AdviceRec@1100485030 : Record 11012055;
      ProjCostPlusRec@1100485029 : Record 11012019;
      EstRec@1100485028 : Record 11012151;
      OldEstLineRec@1100485027 : Record 11012154;
      NewEstLineRec@1100528900 : Record 11072072;
      OldRecipeLineRec@1100485026 : Record 11012156;
      NewRecipeLineRec@1100528902 : Record 11072075;
      BaseRecipeRec@1100528904 : Record 11020581;
      BaseRecipeLineRec@1100528903 : Record 11020582;
      OldPartLineRec@1100485025 : Record 11012187;
      NewPartLineRec@1100528901 : Record 11072076;
      ServLocRec@1100485024 : Record 11012801;
      ServOrderRec@1100485021 : Record 11012823;
      ServCostPlusRec@1100485020 : Record 11012825;
      ServiceOrderBudgetLine@1100528600 : Record 11012875;
      RcpCombRec@1100485019 : Record 11012185;
      ItemJnlLineRec@1100525002 : Record 83;
      CurrencyRec@1210190001 : Record 4;
      CurrExchRateRec@1210190000 : Record 330;
      RawLineRec@1210190003 : Record 11125680;
      TempTrackingSpecification@1100528501 : TEMPORARY Record 336;
      MaintSchemeVersionLine@1100528601 : Record 11071744;
      ServSurvObjectAddAct@1100528602 : Record 11071814;
      g_int1@1100485018 : Integer;
      g_int2@1100485017 : Integer;
      g_int3@1100485039 : Integer;
      g_int4@1100525000 : Integer;
      g_table@1100485016 : Integer;
      g_code1@1100485015 : Code[20];
      g_code2@1100485014 : Code[20];
      g_code3@1100485013 : Code[20];
      g_code4@1100485012 : Code[20];
      g_code5@1100485011 : Code[20];
      g_code6@1100485010 : Code[20];
      g_code7@1100485009 : Code[20];
      g_code8@1100485008 : Code[20];
      g_code9@1100485000 : Code[20];
      g_date1@1210190002 : Date;
      g_text1@1100528400 : Text[30];
      Gap@1100485007 : Integer;
      MarkNo@1100485006 : Integer;
      CurrLino@1100485005 : Integer;
      PrevLino@1100485004 : Integer;
      AdvicePresent@1100485003 : Boolean;
      RcpQuan@1100485038 : Decimal;
      desc1@1100485042 : Text[100];
      desc2@1100485041 : Text[100];
      Text002@1100409001 : TextConst 'ENU=Get ''Quantity/Amount to Receive'',Get ''Quantity/Amount''';
      Text010@1100525001 : TextConst 'ENU=Estimate Part        #1##########\\';
      Status@1100525003 : Dialog;
      ShowProgress@1100525004 : Boolean;
      Text041@1100525500 : TextConst 'ENU=First select records';
      Text042@1210190004 : TextConst 'ENU=Centrale Management Active. Changes are not allowed.';
      CompanyRelationsCentralMgt@1210190009 : Record 11012059;
      CentralDataManagementCU@1210190008 : Codeunit 11012010;
      NavBln@1210190007 : Boolean;
      DiscBln@1210190006 : Boolean;
      DiscGroupBln@1210190010 : Boolean;
      RcpBln@1210190005 : Boolean;
      ErrorFound@1100528500 : Boolean;
      GetQtyToReceive@1100528502 : Boolean;

    PROCEDURE CopyNavisionItems@1210190005(VAR MarkedRec@1210190000 : TEMPORARY Record 27);
    VAR
      PlantOrderLine@1210190001 : Record 11012557;
    BEGIN
      IF NOT MarkedRec.FINDSET THEN BEGIN
        MESSAGE(Text041);
        EXIT;
      END;

      MarkNo := MarkedRec.COUNT;
      CurrLino := g_int2;
      PrevLino := 0;
      Gap := 0;

      CASE g_table OF
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeaderRec.GET(g_int1, g_code1);

            PurchLineRec.LOCKTABLE;
            PurchLineRec.SETRANGE("Document Type", g_int1);
            PurchLineRec.SETRANGE("Document No.", g_code1);
            IF PurchLineRec.GET(g_int1, g_code1, CurrLino) THEN BEGIN
              PurchLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF PurchLineRec.FINDLAST THEN PrevLino := PurchLineRec."Line No.";
              PurchLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF PurchLineRec.FINDLAST THEN
                CurrLino := PurchLineRec."Line No.";
            END;
            REPEAT
              PurchLineRec.INIT;
              PurchLineRec."Document Type" := g_int1;
              PurchLineRec."Document No." := g_code1;
              PurchLineRec."Line No." := CurrLino + Gap;
              CurrLino := PurchLineRec."Line No.";
              PurchLineRec."System-Created Entry" := TRUE;
              PurchLineRec."Posting Date" := PurchHeaderRec."Posting Date";
              PurchLineRec.VALIDATE("Currency Code", PurchHeaderRec."Currency Code");
              PurchLineRec.VALIDATE(Type, PurchLineRec.Type::"G/L Account");
              PurchLineRec."Job No." := g_code3;
              IF PurchLineRec."Job No." = '' THEN
                PurchLineRec."Job No." := PurchHeaderRec."Received on Project";
              IF PurchLineRec."Job No." = '' THEN
                PurchLineRec."Job No." := PurchHeaderRec."Job No.";
              PurchLineRec.VALIDATE(Element, g_code2);
              PurchLineRec.VALIDATE("No.", DetermineGLAccount(PurchLineRec."Job No."));
              PurchLineRec.VALIDATE("Service Order No.", g_code4);
              PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Material;
              PurchLineRec.VALIDATE("Item No.", MarkedRec."No.");
              PurchLineRec.FillMainProject;
              PurchLineRec."Input by" := USERID; //DP00469
              PurchLineRec."Input Date" := TODAY; //DP00469
              PurchLineRec.INSERT;
              PurchLineRec.CreatePurchOrderControl(FALSE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Item Journal Line":
          BEGIN
            ItemJnlLineRec.LOCKTABLE;
            ItemJnlLineRec.SETRANGE("Journal Template Name",g_code1);
            ItemJnlLineRec.SETRANGE("Journal Batch Name",g_code2);
            IF ItemJnlLineRec.GET(g_code1, g_code2, CurrLino) THEN BEGIN
              ItemJnlLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF ItemJnlLineRec.FINDLAST THEN PrevLino := ItemJnlLineRec."Line No.";
              ItemJnlLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ItemJnlLineRec.FINDLAST THEN
                CurrLino := ItemJnlLineRec."Line No.";
            END;
            REPEAT
              ItemJnlLineRec.INIT;
              ItemJnlLineRec."Journal Template Name" := g_code1;
              ItemJnlLineRec."Journal Batch Name" := g_code2;
              ItemJnlLineRec."Line No." := CurrLino + Gap;
              CurrLino := ItemJnlLineRec."Line No.";
              ItemJnlLineRec.INSERT(TRUE);

              ItemJnlLineRec.SetUpNewLine(ItemJnlLineRec);

              ItemJnlLineRec.VALIDATE("Job No.", g_code3);
              ItemJnlLineRec.VALIDATE(Element, g_code7);
              ItemJnlLineRec."Extension Contract" := g_code8;
              ItemJnlLineRec.VALIDATE("Service Order No.", g_code4);
              ItemJnlLineRec."Entry Type" := g_int1;
              ItemJnlLineRec."Document No." := g_code5;
              ItemJnlLineRec."Posting Date" := WORKDATE;
              ItemJnlLineRec."Document Date" := WORKDATE;
              ItemJnlLineRec.VALIDATE("Item No.", MarkedRec."No.");
              ItemJnlLineRec.MODIFY(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Budget Line":
          BEGIN
            BudgetLineRec.LOCKTABLE;
            BudgetLineRec.SETRANGE("Project No.", g_code1);
            BudgetLineRec.SETRANGE("Extension Contract", g_code2);
            BudgetLineRec.SETRANGE(Adjustment, g_code3);
            BudgetLineRec.SETRANGE(Option, '');
            IF BudgetLineRec.GET(g_code1, g_code2, g_code3, '', CurrLino) THEN BEGIN
              BudgetLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BudgetLineRec.FINDLAST THEN PrevLino := BudgetLineRec."Line No.";
              BudgetLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BudgetLineRec.FINDLAST THEN
                CurrLino := BudgetLineRec."Line No.";
            END;
            REPEAT
              BudgetLineRec.INIT;
              BudgetLineRec."Project No." := g_code1;
              BudgetLineRec."Extension Contract" := g_code2;
              BudgetLineRec.Adjustment := g_code3;
              BudgetLineRec.VALIDATE(Element, g_code4);
              BudgetLineRec."Line No." := CurrLino + Gap;
              CurrLino := BudgetLineRec."Line No.";
              IF g_code1 <> '' THEN BEGIN
                ProjRec.GET(g_code1);
                BudgetLineRec."Version Date" := ProjRec."Version Date";
                BudgetLineRec."Department Code" := ProjRec."Global Dimension 1 Code";  //*31927
              END;
              IF g_code2 <> '' THEN BEGIN
                ExtRec.GET(g_code1, g_code2);
                BudgetLineRec."Version Date" := ExtRec."Version Date";
              END;
              IF g_code3 <> '' THEN BEGIN
                AdjRec.GET(g_code1, g_code3);
                BudgetLineRec."Version Date" := AdjRec."Version Date";
              END;
              BudgetLineRec."Cost Type" := BudgetLineRec."Cost Type"::Material;
              BudgetLineRec.VALIDATE("Item No.", MarkedRec."No.");
              BudgetLineRec.FillMainProject;
              BudgetLineRec.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Project Cost Plus Entry":
          BEGIN
            ProjCostPlusRec.LOCKTABLE;
            ProjCostPlusRec.SETRANGE("Project No.", g_code1);
            ProjCostPlusRec.SETRANGE(Principal, g_code2);
            ProjCostPlusRec.SETRANGE("Commission No.", g_code3);
            ProjCostPlusRec.SETRANGE("Settl.Sheet No.", g_code4);
            IF ProjCostPlusRec.GET(g_code1, g_code2, g_code3, g_code4, CurrLino) THEN BEGIN
              ProjCostPlusRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF ProjCostPlusRec.FINDLAST THEN PrevLino := ProjCostPlusRec."Line No.";
              ProjCostPlusRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ProjCostPlusRec.FINDLAST THEN
                CurrLino := ProjCostPlusRec."Line No.";
            END;
            REPEAT
              ProjCostPlusRec.INIT;
              ProjCostPlusRec."Project No." := g_code1;
              ProjCostPlusRec.Principal := g_code2;
              ProjCostPlusRec."Commission No." := g_code3;
              ProjCostPlusRec."Settl.Sheet No." := g_code4;
              ProjCostPlusRec."Line No." := CurrLino + Gap;
              CurrLino := ProjCostPlusRec."Line No.";
              ProjCostPlusRec."Cost Type" := ProjCostPlusRec."Cost Type"::Material;
              ProjCostPlusRec.VALIDATE("Item No.", MarkedRec."No.");
              ProjCostPlusRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Option Budget":
          BEGIN
            BudgetOptionRec.LOCKTABLE;
            BudgetOptionRec.SETRANGE("Project No.", g_code1);
            BudgetOptionRec.SETRANGE("Plot No.", g_code4);
            BudgetOptionRec.SETRANGE("House Model", g_code5);
            BudgetOptionRec.SETRANGE("Main Group", g_code6);
            BudgetOptionRec.SETRANGE(Group, g_code7);
            BudgetOptionRec.SETRANGE("Sub Group", g_code8);
            BudgetOptionRec.SETRANGE(Option, g_code2);
            IF BudgetOptionRec.GET(g_code1, g_code4, g_code5, g_code6, g_code7, g_code8, g_code2, CurrLino) THEN BEGIN
              BudgetOptionRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BudgetOptionRec.FINDLAST THEN PrevLino := BudgetOptionRec."Line No.";
              BudgetOptionRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BudgetOptionRec.FINDLAST THEN
                CurrLino := BudgetOptionRec."Line No.";
            END;
            REPEAT
              BudgetOptionRec.INIT;
              BudgetOptionRec."Project No." := g_code1;
              BudgetOptionRec."Plot No." := g_code4;
              BudgetOptionRec."House Model" := g_code5;
              BudgetOptionRec."Main Group" := g_code6;
              BudgetOptionRec.Group := g_code7;
              BudgetOptionRec."Sub Group" := g_code8;
              BudgetOptionRec.Option := g_code2;
              BudgetOptionRec.VALIDATE(Element, g_code3);
              BudgetOptionRec."Line No." := CurrLino + Gap;
              CurrLino := BudgetOptionRec."Line No.";
              BudgetOptionRec."Cost Type" := BudgetOptionRec."Cost Type"::Material;
              BudgetOptionRec.VALIDATE("Item No.", MarkedRec."No.");
              BudgetOptionRec.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Part Line OLD":  //DP00381
          BEGIN
            OldPartLineRec.LOCKTABLE;
            OldPartLineRec.SETRANGE("Part Group",g_code6);
            OldPartLineRec.SETRANGE(Part,g_code3);
            IF OldPartLineRec.GET(g_code6, g_code3, CurrLino) THEN BEGIN
              OldPartLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldPartLineRec.FINDLAST THEN PrevLino := OldPartLineRec."Line No.";
              OldPartLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldPartLineRec.FINDLAST THEN
                CurrLino := OldPartLineRec."Line No.";
            END;
            REPEAT
              OldPartLineRec.INIT;
              OldPartLineRec."Part Group" := g_code6;
              OldPartLineRec.Part := g_code3;
              OldPartLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldPartLineRec."Line No.";
              OldPartLineRec.VALIDATE("Item No.", MarkedRec."No.");
              OldPartLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Part Line NEW":  //DP00381
          BEGIN
            NewPartLineRec.LOCKTABLE;
            NewPartLineRec.SETRANGE("Part Group",g_code6);
            NewPartLineRec.SETRANGE(Part,g_code3);
            IF NewPartLineRec.GET(g_code6, g_code3, CurrLino) THEN BEGIN
              NewPartLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewPartLineRec.FINDLAST THEN PrevLino := NewPartLineRec."Line No.";
              NewPartLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewPartLineRec.FINDLAST THEN
                CurrLino := NewPartLineRec."Line No.";
            END;
            REPEAT
              NewPartLineRec.INIT;
              NewPartLineRec."Part Group" := g_code6;
              NewPartLineRec.Part := g_code3;
              NewPartLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewPartLineRec."Line No.";
              NewPartLineRec.VALIDATE("Item No.", MarkedRec."No.");
              NewPartLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Line OLD":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            OldEstLineRec.LOCKTABLE;
            OldEstLineRec.SETRANGE("Estimate No.", g_code1);
            OldEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            OldEstLineRec.SETRANGE("Part Group",g_code6);
            OldEstLineRec.SETRANGE(Part,g_code3);
            IF OldEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              OldEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldEstLineRec.FINDLAST THEN PrevLino := OldEstLineRec."Line No.";
              OldEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldEstLineRec.FINDLAST THEN
                CurrLino := OldEstLineRec."Line No.";
            END;
            REPEAT
              OldEstLineRec.INIT;
              OldEstLineRec."Estimate No." := g_code1;
              OldEstLineRec."Sub-Estimate No." := g_code2;
              OldEstLineRec."Part Group" := g_code6;
              OldEstLineRec.Part := g_code3;
              OldEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldEstLineRec."Line No.";
              OldEstLineRec.VALIDATE("Item No.", MarkedRec."No.");
              OldEstLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Line NEW":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            NewEstLineRec.LOCKTABLE;
            NewEstLineRec.SETRANGE("Estimate No.", g_code1);
            NewEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            NewEstLineRec.SETRANGE("Part Group",g_code6);
            NewEstLineRec.SETRANGE(Part,g_code3);
            IF NewEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              NewEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewEstLineRec.FINDLAST THEN PrevLino := NewEstLineRec."Line No.";
              NewEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewEstLineRec.FINDLAST THEN
                CurrLino := NewEstLineRec."Line No.";
            END;
            REPEAT
              NewEstLineRec.INIT;
              NewEstLineRec."Estimate No." := g_code1;
              NewEstLineRec."Sub-Estimate No." := g_code2;
              NewEstLineRec."Part Group" := g_code6;
              NewEstLineRec.Part := g_code3;
              NewEstLineRec.InitRecord;
              NewEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewEstLineRec."Line No.";
              NewEstLineRec.VALIDATE("Item No.", MarkedRec."No.");
              NewEstLineRec.INSERT(TRUE);
              NewEstLineRec.UpdateLineTotals;  //db, 23-06-14
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Recipe Line OLD":  //DP00381
          BEGIN
            IF g_code1 <> '' THEN BEGIN
              EstRec.GET(g_code1);
              EstRec.TESTFIELD(Fixed, FALSE);
            END;

            //mg.sn, 06-06-12: M34512
            IF CompanyRelationsCentralMgt.READPERMISSION THEN BEGIN
              CentralDataManagementCU.ItemFormEditable(NavBln, DiscBln, DiscGroupBln, RcpBln);
              IF RcpBln THEN
                ERROR(Text042);
            END;
            //mg.en, 06-06-12: M34512

            OldRecipeLineRec.LOCKTABLE;
            OldRecipeLineRec.SETRANGE("Estimate No.",g_code1);
            OldRecipeLineRec.SETRANGE("Sub-Estimate No.",g_code2);
            OldRecipeLineRec.SETRANGE("Part Group",g_code6);
            OldRecipeLineRec.SETRANGE(Part,g_code3);
            OldRecipeLineRec.SETRANGE("Estimate Line",g_int1);
            OldRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            OldRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF OldRecipeLineRec.GET(g_code1, g_code2, g_code6, g_code3, g_int1, g_code5, g_code4, CurrLino) THEN BEGIN
              OldRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldRecipeLineRec.FINDLAST THEN PrevLino := OldRecipeLineRec."Line No.";
              OldRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldRecipeLineRec.FINDLAST THEN
                CurrLino := OldRecipeLineRec."Line No.";
            END;
            REPEAT;
              OldRecipeLineRec.INIT;
              OldRecipeLineRec."Estimate No." := g_code1;
              OldRecipeLineRec."Sub-Estimate No." := g_code2;
              OldRecipeLineRec."Part Group" := g_code6;
              OldRecipeLineRec.Part := g_code3;
              OldRecipeLineRec.Recipe := g_code4;
              OldRecipeLineRec."Recipe Group" := g_code5;
              OldRecipeLineRec."Estimate Line" := g_int1;
              OldRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldRecipeLineRec."Line No.";
              OldRecipeLineRec.VALIDATE("Item No.", MarkedRec."No.");
              OldRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Base Recipe Line":  //DP00381
          BEGIN
            BaseRecipeRec.GET(g_code5, g_code4);
            BaseRecipeRec.TESTFIELD(Fixed, FALSE);

            //mg.sn, 06-06-12: M34512
            IF CompanyRelationsCentralMgt.READPERMISSION THEN BEGIN
              CentralDataManagementCU.ItemFormEditable(NavBln, DiscBln, DiscGroupBln, RcpBln);
              IF RcpBln THEN
                ERROR(Text042);
            END;
            //mg.en, 06-06-12: M34512

            BaseRecipeLineRec.LOCKTABLE;
            BaseRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            BaseRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF BaseRecipeLineRec.GET(g_code5, g_code4, CurrLino) THEN BEGIN
              BaseRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BaseRecipeLineRec.FINDLAST THEN PrevLino := BaseRecipeLineRec."Line No.";
              BaseRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BaseRecipeLineRec.FINDLAST THEN
                CurrLino := BaseRecipeLineRec."Line No.";
            END;
            REPEAT;
              BaseRecipeLineRec.INIT;
              BaseRecipeLineRec.Recipe := g_code4;
              BaseRecipeLineRec."Recipe Group" := g_code5;
              BaseRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := BaseRecipeLineRec."Line No.";
              BaseRecipeLineRec.VALIDATE("Item No.", MarkedRec."No.");
              BaseRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Recipe Line":  //DP00381
          BEGIN
            IF g_code1 <> '' THEN BEGIN
              EstRec.GET(g_code1);
              EstRec.TESTFIELD(Fixed, FALSE);
            END;

            NewRecipeLineRec.LOCKTABLE;
            NewRecipeLineRec.SETRANGE("Estimate No.",g_code1);
            NewRecipeLineRec.SETRANGE("Sub-Estimate No.",g_code2);
            NewRecipeLineRec.SETRANGE("Part Group",g_code6);
            NewRecipeLineRec.SETRANGE(Part,g_code3);
            NewRecipeLineRec.SETRANGE("Estimate Line",g_int1);
            NewRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            NewRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF NewRecipeLineRec.GET(g_code1, g_code2, g_code6, g_code3, g_int1, g_code5, g_code4, CurrLino) THEN BEGIN
              NewRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewRecipeLineRec.FINDLAST THEN PrevLino := NewRecipeLineRec."Line No.";
              NewRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewRecipeLineRec.FINDLAST THEN
                CurrLino := NewRecipeLineRec."Line No.";
            END;
            REPEAT;
              NewRecipeLineRec.INIT;
              NewRecipeLineRec."Estimate No." := g_code1;
              NewRecipeLineRec."Sub-Estimate No." := g_code2;
              NewRecipeLineRec."Part Group" := g_code6;
              NewRecipeLineRec.Part := g_code3;
              NewRecipeLineRec.Recipe := g_code4;
              NewRecipeLineRec."Recipe Group" := g_code5;
              NewRecipeLineRec."Estimate Line" := g_int1;
              NewRecipeLineRec.InitRecord;
              NewRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewRecipeLineRec."Line No.";
              NewRecipeLineRec.VALIDATE("Item No.", MarkedRec."No.");
              NewRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Advice Order Line":
          BEGIN
            AdviceRec.LOCKTABLE;
            IF g_int1 <> 0 THEN BEGIN
              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
              AdviceRec.SETRANGE("Service Order No.", g_code4);
              IF AdviceRec.GET(AdviceRec."Record Type"::ServOrder, '', g_code4, CurrLino) THEN
                AdvicePresent := TRUE
              ELSE
                AdvicePresent := FALSE;
            END ELSE BEGIN
              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::Project);
              AdviceRec.SETRANGE("Project No.", g_code1);
              IF AdviceRec.GET(AdviceRec."Record Type"::Project, g_code1, '', CurrLino) THEN
                AdvicePresent := TRUE
              ELSE
                AdvicePresent := FALSE;
            END;
            IF AdvicePresent = TRUE THEN BEGIN
              AdviceRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF AdviceRec.FINDLAST THEN PrevLino := AdviceRec."Line No.";
              AdviceRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF AdviceRec.FINDLAST THEN
                CurrLino := AdviceRec."Line No.";
            END;
            REPEAT
              AdviceRec.INIT;
              IF g_int1 <> 0 THEN BEGIN
                AdviceRec."Record Type" := AdviceRec."Record Type"::ServOrder;
                AdviceRec.VALIDATE("Service Order No.", g_code4);
              END ELSE BEGIN
                AdviceRec."Record Type" := AdviceRec."Record Type"::Project;
                AdviceRec."Project No." := g_code1;
                AdviceRec.Element := g_code2;
                AdviceRec."Extension Contract" := g_code3;
              END;
              AdviceRec."Line No." := CurrLino + Gap;
              CurrLino := AdviceRec."Line No.";
              AdviceRec.VALIDATE("Item No.", MarkedRec."No.");
              AdviceRec.InitRecord;  //db, 23-06-09: M15627
              AdviceRec."Purchaser Code" := AdviceRec.GetDefaultPurchaser(g_code1);
              AdviceRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            ServOrderRec.GET(g_code1);

            ServCostPlusRec.LOCKTABLE;
            ServCostPlusRec.SETRANGE("Service Order No.", g_code1);
            IF ServCostPlusRec.GET(g_code1, CurrLino) THEN BEGIN
              ServCostPlusRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF ServCostPlusRec.FINDLAST THEN PrevLino := ServCostPlusRec."Line No.";
              ServCostPlusRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ServCostPlusRec.FINDLAST THEN
                CurrLino := ServCostPlusRec."Line No.";
            END;
            REPEAT
              ServCostPlusRec.INIT;
              ServCostPlusRec.VALIDATE("Service Order No.", g_code1);
              ServCostPlusRec."Line No." := CurrLino + Gap;
              CurrLino := ServCostPlusRec."Line No.";
              ServCostPlusRec."Customer No." := ServOrderRec."Customer No.";
              ServCostPlusRec."Bill-to Customer No." := ServOrderRec."Bill-to Customer No.";
              ServCostPlusRec."Service Location No." := ServOrderRec."Service Location No.";
              ServCostPlusRec."Posting Date" := TODAY;  //db, 05-10-06 (required for discount)
              ServCostPlusRec.VALIDATE("Item No.", MarkedRec."No.");
              ServCostPlusRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Plant Order Line":  //*32459
          BEGIN
            PlantOrderLine.LOCKTABLE;
            PlantOrderLine.SETRANGE("Plant Order No.", g_code1);
            IF PlantOrderLine.GET(g_code1, CurrLino) THEN BEGIN
              PlantOrderLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF PlantOrderLine.FINDLAST THEN PrevLino := PlantOrderLine."Line No.";
              PlantOrderLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF PlantOrderLine.FINDLAST THEN
                CurrLino := PlantOrderLine."Line No.";
            END;
            REPEAT
              PlantOrderLine.INIT;
              PlantOrderLine."Plant Order No." := g_code1;
              PlantOrderLine."Line No." := CurrLino + Gap;
              CurrLino := PlantOrderLine."Line No.";
              PlantOrderLine.VALIDATE(Type, PlantOrderLine.Type::Item);
              PlantOrderLine.VALIDATE("Item No.", MarkedRec."No.");
              PlantOrderLine.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        ELSE
          MESSAGE(Text001);
      END;

      COMMIT;
    END;

    PROCEDURE CopyBasicItems@1210190011(VAR MarkedRec@1210190000 : TEMPORARY Record 11012316);
    BEGIN
      IF NOT MarkedRec.FINDSET THEN BEGIN
        MESSAGE(Text041);
        EXIT;
      END;

      MarkNo := MarkedRec.COUNT;
      CurrLino := g_int2;
      PrevLino := 0;
      Gap := 0;

      CASE g_table OF
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeaderRec.GET(g_int1, g_code1);

            PurchLineRec.LOCKTABLE;
            PurchLineRec.SETRANGE("Document Type", g_int1);
            PurchLineRec.SETRANGE("Document No.", g_code1);
            IF PurchLineRec.GET(g_int1, g_code1, CurrLino) THEN BEGIN
              PurchLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF PurchLineRec.FINDLAST THEN PrevLino := PurchLineRec."Line No.";
              PurchLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF PurchLineRec.FINDLAST THEN
                CurrLino := PurchLineRec."Line No.";
            END;
            REPEAT
              PurchLineRec.INIT;
              PurchLineRec."Document Type" := g_int1;
              PurchLineRec."Document No." := g_code1;
              PurchLineRec."Line No." := CurrLino + Gap;
              CurrLino := PurchLineRec."Line No.";
              PurchLineRec."System-Created Entry" := TRUE;
              PurchLineRec."Posting Date" := PurchHeaderRec."Posting Date";
              PurchLineRec.VALIDATE("Currency Code", PurchHeaderRec."Currency Code");
              PurchLineRec.VALIDATE(Type, PurchLineRec.Type::"G/L Account");
              PurchLineRec."Job No." := g_code3;
              IF PurchLineRec."Job No." = '' THEN
                PurchLineRec."Job No." := PurchHeaderRec."Received on Project";
              IF PurchLineRec."Job No." = '' THEN
                PurchLineRec."Job No." := PurchHeaderRec."Job No.";
              PurchLineRec.VALIDATE(Element, g_code2);
              PurchLineRec.VALIDATE("No.", DetermineGLAccount(PurchLineRec."Job No."));
              PurchLineRec.VALIDATE("Service Order No.", g_code4);
              PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Material;
              PurchLineRec.Manufacturer := MarkedRec.Manufacturer;
              PurchLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              PurchLineRec.FillMainProject;
              PurchLineRec."Input by" := USERID; //DP00469
              PurchLineRec."Input Date" := TODAY; //DP00469
              PurchLineRec.INSERT;
              PurchLineRec.CreatePurchOrderControl(FALSE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Standard Purchase Line":
          BEGIN
            StdPurchRec.LOCKTABLE;
            StdPurchRec.SETRANGE("Standard Purchase Code", g_code1);
            IF StdPurchRec.GET(g_code1, CurrLino) THEN BEGIN
              StdPurchRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF StdPurchRec.FINDLAST THEN PrevLino := StdPurchRec."Line No.";
              StdPurchRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF StdPurchRec.FINDLAST THEN
                CurrLino := StdPurchRec."Line No.";
            END;
            REPEAT
              StdPurchRec.INIT;
              StdPurchRec."Standard Purchase Code" := g_code1;
              StdPurchRec."Line No." := CurrLino + Gap;
              CurrLino := StdPurchRec."Line No.";
              StdPurchRec.Type := StdPurchRec.Type::Item;
              StdPurchRec.Manufacturer := MarkedRec.Manufacturer;
              StdPurchRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              StdPurchRec.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Budget Line":
          BEGIN
            BudgetLineRec.LOCKTABLE;
            BudgetLineRec.SETRANGE("Project No.", g_code1);
            BudgetLineRec.SETRANGE("Extension Contract", g_code2);
            BudgetLineRec.SETRANGE(Adjustment, g_code3);
            BudgetLineRec.SETRANGE(Option, '');
            IF BudgetLineRec.GET(g_code1, g_code2, g_code3, '', CurrLino) THEN BEGIN
              BudgetLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BudgetLineRec.FINDLAST THEN PrevLino := BudgetLineRec."Line No.";
              BudgetLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BudgetLineRec.FINDLAST THEN
                CurrLino := BudgetLineRec."Line No.";
            END;
            REPEAT
              BudgetLineRec.INIT;
              BudgetLineRec."Project No." := g_code1;
              BudgetLineRec."Extension Contract" := g_code2;
              BudgetLineRec.Adjustment := g_code3;
              BudgetLineRec.VALIDATE(Element, g_code4);
              BudgetLineRec."Line No." := CurrLino + Gap;
              CurrLino := BudgetLineRec."Line No.";
              IF g_code1 <> '' THEN BEGIN
                ProjRec.GET(g_code1);
                BudgetLineRec."Version Date" := ProjRec."Version Date";
                BudgetLineRec."Department Code" := ProjRec."Global Dimension 1 Code";  //*31927
              END;
              IF g_code2 <> '' THEN BEGIN
                ExtRec.GET(g_code1, g_code2);
                BudgetLineRec."Version Date" := ExtRec."Version Date";
              END;
              IF g_code3 <> '' THEN BEGIN
                AdjRec.GET(g_code1, g_code3);
                BudgetLineRec."Version Date" := AdjRec."Version Date";
              END;
              BudgetLineRec."Cost Type" := BudgetLineRec."Cost Type"::Material;
              BudgetLineRec.Manufacturer := MarkedRec.Manufacturer;
              BudgetLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              BudgetLineRec.FillMainProject;
              BudgetLineRec.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Project Cost Plus Entry":
          BEGIN
            ProjCostPlusRec.LOCKTABLE;
            ProjCostPlusRec.SETRANGE("Project No.", g_code1);
            ProjCostPlusRec.SETRANGE(Principal, g_code2);
            ProjCostPlusRec.SETRANGE("Commission No.", g_code3);
            ProjCostPlusRec.SETRANGE("Settl.Sheet No.", g_code4);
            IF ProjCostPlusRec.GET(g_code1, g_code2, g_code3, g_code4, CurrLino) THEN BEGIN
              ProjCostPlusRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF ProjCostPlusRec.FINDLAST THEN PrevLino := ProjCostPlusRec."Line No.";
              ProjCostPlusRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ProjCostPlusRec.FINDLAST THEN
                CurrLino := ProjCostPlusRec."Line No.";
            END;
            REPEAT
              ProjCostPlusRec.INIT;
              ProjCostPlusRec."Project No." := g_code1;
              ProjCostPlusRec.Principal := g_code2;
              ProjCostPlusRec."Commission No." := g_code3;
              ProjCostPlusRec."Settl.Sheet No." := g_code4;
              ProjCostPlusRec."Line No." := CurrLino + Gap;
              CurrLino := ProjCostPlusRec."Line No.";
              ProjCostPlusRec."Cost Type" := ProjCostPlusRec."Cost Type"::Material;
              ProjCostPlusRec.Manufacturer := MarkedRec.Manufacturer;
              ProjCostPlusRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              ProjCostPlusRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Option Budget":
          BEGIN
            BudgetOptionRec.LOCKTABLE;
            BudgetOptionRec.SETRANGE("Project No.", g_code1);
            BudgetOptionRec.SETRANGE("Plot No.", g_code4);
            BudgetOptionRec.SETRANGE("House Model", g_code5);
            BudgetOptionRec.SETRANGE("Main Group", g_code6);
            BudgetOptionRec.SETRANGE(Group, g_code7);
            BudgetOptionRec.SETRANGE("Sub Group", g_code8);
            BudgetOptionRec.SETRANGE(Option, g_code2);
            IF BudgetOptionRec.GET(g_code1, g_code4, g_code5, g_code6, g_code7, g_code8, g_code2, CurrLino) THEN BEGIN
              BudgetOptionRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BudgetOptionRec.FINDLAST THEN PrevLino := BudgetOptionRec."Line No.";
              BudgetOptionRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BudgetOptionRec.FINDLAST THEN
                CurrLino := BudgetOptionRec."Line No.";
            END;
            REPEAT
              BudgetOptionRec.INIT;
              BudgetOptionRec."Project No." := g_code1;
              BudgetOptionRec."Plot No." := g_code4;
              BudgetOptionRec."House Model" := g_code5;
              BudgetOptionRec."Main Group" := g_code6;
              BudgetOptionRec.Group := g_code7;
              BudgetOptionRec."Sub Group" := g_code8;
              BudgetOptionRec.Option := g_code2;
              BudgetOptionRec.VALIDATE(Element, g_code3);
              BudgetOptionRec."Line No." := CurrLino + Gap;
              CurrLino := BudgetOptionRec."Line No.";
              BudgetOptionRec."Cost Type" := BudgetOptionRec."Cost Type"::Material;
              BudgetOptionRec.Manufacturer := MarkedRec.Manufacturer;
              BudgetOptionRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              BudgetOptionRec.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Part Line OLD":  //DP00381
          BEGIN
            OldPartLineRec.LOCKTABLE;
            OldPartLineRec.SETRANGE("Part Group",g_code6);
            OldPartLineRec.SETRANGE(Part,g_code3);
            IF OldPartLineRec.GET(g_code6, g_code3, CurrLino) THEN BEGIN
              OldPartLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldPartLineRec.FINDLAST THEN PrevLino := OldPartLineRec."Line No.";
              OldPartLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldPartLineRec.FINDLAST THEN
                CurrLino := OldPartLineRec."Line No.";
            END;
            REPEAT
              OldPartLineRec.INIT;
              OldPartLineRec."Part Group" := g_code6;
              OldPartLineRec.Part := g_code3;
              OldPartLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldPartLineRec."Line No.";
              OldPartLineRec.Manufacturer := MarkedRec.Manufacturer;
              OldPartLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              OldPartLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Part Line NEW":  //DP00381
          BEGIN
            NewPartLineRec.LOCKTABLE;
            NewPartLineRec.SETRANGE("Part Group",g_code6);
            NewPartLineRec.SETRANGE(Part,g_code3);
            IF NewPartLineRec.GET(g_code6, g_code3, CurrLino) THEN BEGIN
              NewPartLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewPartLineRec.FINDLAST THEN PrevLino := NewPartLineRec."Line No.";
              NewPartLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewPartLineRec.FINDLAST THEN
                CurrLino := NewPartLineRec."Line No.";
            END;
            REPEAT
              NewPartLineRec.INIT;
              NewPartLineRec."Part Group" := g_code6;
              NewPartLineRec.Part := g_code3;
              NewPartLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewPartLineRec."Line No.";
              NewPartLineRec.Manufacturer := MarkedRec.Manufacturer;
              NewPartLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              NewPartLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Line OLD":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            OldEstLineRec.LOCKTABLE;
            OldEstLineRec.SETRANGE("Estimate No.", g_code1);
            OldEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            OldEstLineRec.SETRANGE("Part Group",g_code6);
            OldEstLineRec.SETRANGE(Part,g_code3);
            IF OldEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              OldEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldEstLineRec.FINDLAST THEN PrevLino := OldEstLineRec."Line No.";
              OldEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldEstLineRec.FINDLAST THEN
                CurrLino := OldEstLineRec."Line No.";
            END;
            REPEAT
              OldEstLineRec.INIT;
              OldEstLineRec."Estimate No." := g_code1;
              OldEstLineRec."Sub-Estimate No." := g_code2;
              OldEstLineRec."Part Group" := g_code6;
              OldEstLineRec.Part := g_code3;
              OldEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldEstLineRec."Line No.";
              OldEstLineRec.Manufacturer := MarkedRec.Manufacturer;
              OldEstLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              OldEstLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Line NEW":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            NewEstLineRec.LOCKTABLE;
            NewEstLineRec.SETRANGE("Estimate No.", g_code1);
            NewEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            NewEstLineRec.SETRANGE("Part Group",g_code6);
            NewEstLineRec.SETRANGE(Part,g_code3);
            IF NewEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              NewEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewEstLineRec.FINDLAST THEN PrevLino := NewEstLineRec."Line No.";
              NewEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewEstLineRec.FINDLAST THEN
                CurrLino := NewEstLineRec."Line No.";
            END;
            REPEAT
              NewEstLineRec.INIT;
              NewEstLineRec."Estimate No." := g_code1;
              NewEstLineRec."Sub-Estimate No." := g_code2;
              NewEstLineRec."Part Group" := g_code6;
              NewEstLineRec.Part := g_code3;
              NewEstLineRec.InitRecord;
              NewEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewEstLineRec."Line No.";
              NewEstLineRec.Manufacturer := MarkedRec.Manufacturer;
              NewEstLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              NewEstLineRec.INSERT(TRUE);
              NewEstLineRec.UpdateLineTotals;  //db, 23-06-14
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Recipe Line OLD":  //DP00381
          BEGIN
            IF g_code1 <> '' THEN BEGIN
              EstRec.GET(g_code1);
              EstRec.TESTFIELD(Fixed, FALSE);
            END;

            //mg.sn, 06-06-12: M34512
            IF CompanyRelationsCentralMgt.READPERMISSION THEN BEGIN
              CentralDataManagementCU.ItemFormEditable(NavBln, DiscBln, DiscGroupBln, RcpBln);
              IF RcpBln THEN
                ERROR(Text042);
            END;
            //mg.en, 06-06-12: M34512

            OldRecipeLineRec.LOCKTABLE;
            OldRecipeLineRec.SETRANGE("Estimate No.",g_code1);
            OldRecipeLineRec.SETRANGE("Sub-Estimate No.",g_code2);
            OldRecipeLineRec.SETRANGE("Part Group",g_code6);
            OldRecipeLineRec.SETRANGE(Part,g_code3);
            OldRecipeLineRec.SETRANGE("Estimate Line",g_int1);
            OldRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            OldRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF OldRecipeLineRec.GET(g_code1, g_code2, g_code6, g_code3, g_int1, g_code5, g_code4, CurrLino) THEN BEGIN
              OldRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldRecipeLineRec.FINDLAST THEN PrevLino := OldRecipeLineRec."Line No.";
              OldRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldRecipeLineRec.FINDLAST THEN
                CurrLino := OldRecipeLineRec."Line No.";
            END;
            REPEAT;
              OldRecipeLineRec.INIT;
              OldRecipeLineRec."Estimate No." := g_code1;
              OldRecipeLineRec."Sub-Estimate No." := g_code2;
              OldRecipeLineRec."Part Group" := g_code6;
              OldRecipeLineRec.Part := g_code3;
              OldRecipeLineRec.Recipe := g_code4;
              OldRecipeLineRec."Recipe Group" := g_code5;
              OldRecipeLineRec."Estimate Line" := g_int1;
              OldRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldRecipeLineRec."Line No.";
              OldRecipeLineRec.Manufacturer := MarkedRec.Manufacturer;
              OldRecipeLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              OldRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Base Recipe Line":  //DP00381
          BEGIN
            BaseRecipeRec.GET(g_code5, g_code4);
            BaseRecipeRec.TESTFIELD(Fixed, FALSE);

            //mg.sn, 06-06-12: M34512
            IF CompanyRelationsCentralMgt.READPERMISSION THEN BEGIN
              CentralDataManagementCU.ItemFormEditable(NavBln, DiscBln, DiscGroupBln, RcpBln);
              IF RcpBln THEN
                ERROR(Text042);
            END;
            //mg.en, 06-06-12: M34512

            BaseRecipeLineRec.LOCKTABLE;
            BaseRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            BaseRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF BaseRecipeLineRec.GET(g_code5, g_code4, CurrLino) THEN BEGIN
              BaseRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BaseRecipeLineRec.FINDLAST THEN PrevLino := BaseRecipeLineRec."Line No.";
              BaseRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BaseRecipeLineRec.FINDLAST THEN
                CurrLino := BaseRecipeLineRec."Line No.";
            END;
            REPEAT;
              BaseRecipeLineRec.INIT;
              BaseRecipeLineRec.Recipe := g_code4;
              BaseRecipeLineRec."Recipe Group" := g_code5;
              BaseRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := BaseRecipeLineRec."Line No.";
              BaseRecipeLineRec.Manufacturer := MarkedRec.Manufacturer;
              BaseRecipeLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              BaseRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Recipe Line":  //DP00381
          BEGIN
            IF g_code1 <> '' THEN BEGIN
              EstRec.GET(g_code1);
              EstRec.TESTFIELD(Fixed, FALSE);
            END;

            NewRecipeLineRec.LOCKTABLE;
            NewRecipeLineRec.SETRANGE("Estimate No.",g_code1);
            NewRecipeLineRec.SETRANGE("Sub-Estimate No.",g_code2);
            NewRecipeLineRec.SETRANGE("Part Group",g_code6);
            NewRecipeLineRec.SETRANGE(Part,g_code3);
            NewRecipeLineRec.SETRANGE("Estimate Line",g_int1);
            NewRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            NewRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF NewRecipeLineRec.GET(g_code1, g_code2, g_code6, g_code3, g_int1, g_code5, g_code4, CurrLino) THEN BEGIN
              NewRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewRecipeLineRec.FINDLAST THEN PrevLino := NewRecipeLineRec."Line No.";
              NewRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewRecipeLineRec.FINDLAST THEN
                CurrLino := NewRecipeLineRec."Line No.";
            END;
            REPEAT;
              NewRecipeLineRec.INIT;
              NewRecipeLineRec."Estimate No." := g_code1;
              NewRecipeLineRec."Sub-Estimate No." := g_code2;
              NewRecipeLineRec."Part Group" := g_code6;
              NewRecipeLineRec.Part := g_code3;
              NewRecipeLineRec.Recipe := g_code4;
              NewRecipeLineRec."Recipe Group" := g_code5;
              NewRecipeLineRec."Estimate Line" := g_int1;
              NewRecipeLineRec.InitRecord;
              NewRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewRecipeLineRec."Line No.";
              NewRecipeLineRec.Manufacturer := MarkedRec.Manufacturer;
              NewRecipeLineRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              NewRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Advice Order Line":
          BEGIN
            AdviceRec.LOCKTABLE;
            IF g_int1 <> 0 THEN BEGIN
              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
              AdviceRec.SETRANGE("Service Order No.", g_code4);
              IF AdviceRec.GET(AdviceRec."Record Type"::ServOrder, '', g_code4, CurrLino) THEN
                AdvicePresent := TRUE
              ELSE
                AdvicePresent := FALSE;
            END ELSE BEGIN
              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::Project);
              AdviceRec.SETRANGE("Project No.", g_code1);
              IF AdviceRec.GET(AdviceRec."Record Type"::Project, g_code1, '', CurrLino) THEN
                AdvicePresent := TRUE
              ELSE
                AdvicePresent := FALSE;
            END;
            IF AdvicePresent = TRUE THEN BEGIN
              AdviceRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF AdviceRec.FINDLAST THEN PrevLino := AdviceRec."Line No.";
              AdviceRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF AdviceRec.FINDLAST THEN
                CurrLino := AdviceRec."Line No.";
            END;
            REPEAT
              AdviceRec.INIT;
              IF g_int1 <> 0 THEN BEGIN
                AdviceRec."Record Type" := AdviceRec."Record Type"::ServOrder;
                AdviceRec.VALIDATE("Service Order No.", g_code4);
              END ELSE BEGIN
                AdviceRec."Record Type" := AdviceRec."Record Type"::Project;
                AdviceRec."Project No." := g_code1;
                AdviceRec.Element := g_code2;
                AdviceRec."Extension Contract" := g_code3;
              END;
              AdviceRec."Line No." := CurrLino + Gap;
              CurrLino := AdviceRec."Line No.";
              AdviceRec.Manufacturer := MarkedRec.Manufacturer;
              AdviceRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              AdviceRec.InitRecord;  //db, 23-06-09: M15627
              AdviceRec."Purchaser Code" := AdviceRec.GetDefaultPurchaser(g_code1);
              AdviceRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            ServOrderRec.GET(g_code1);

            ServCostPlusRec.LOCKTABLE;
            ServCostPlusRec.SETRANGE("Service Order No.", g_code1);
            IF ServCostPlusRec.GET(g_code1, CurrLino) THEN BEGIN
              ServCostPlusRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF ServCostPlusRec.FINDLAST THEN PrevLino := ServCostPlusRec."Line No.";
              ServCostPlusRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ServCostPlusRec.FINDLAST THEN
                CurrLino := ServCostPlusRec."Line No.";
            END;
            REPEAT
              ServCostPlusRec.INIT;
              ServCostPlusRec.VALIDATE("Service Order No.", g_code1);
              ServCostPlusRec."Line No." := CurrLino + Gap;
              CurrLino := ServCostPlusRec."Line No.";
              ServCostPlusRec."Customer No." := ServOrderRec."Customer No.";
              ServCostPlusRec."Bill-to Customer No." := ServOrderRec."Bill-to Customer No.";
              ServCostPlusRec."Service Location No." := ServOrderRec."Service Location No.";
              ServCostPlusRec.Manufacturer := MarkedRec.Manufacturer;
              ServCostPlusRec."Posting Date" := TODAY;  //db, 05-10-06 (required for discount)
              ServCostPlusRec.VALIDATE("Basic Item", MarkedRec."Product Code");
              ServCostPlusRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        ELSE
          MESSAGE(Text001);
      END;

      COMMIT;
    END;

    PROCEDURE CopyTradeItems@1210190010(VAR MarkedRec@1210190000 : TEMPORARY Record 11012317);
    VAR
      MaintenanceScheme@1100525000 : Record 11071745;
      MaintenanceSchemeCode@1100525001 : Code[20];
    BEGIN
      IF NOT MarkedRec.FINDSET THEN BEGIN
        MESSAGE(Text041);
        EXIT;
      END;

      MarkNo := MarkedRec.COUNT;
      CurrLino := g_int2;
      PrevLino := 0;
      Gap := 0;

      CASE g_table OF
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeaderRec.GET(g_int1, g_code1);

            PurchLineRec.LOCKTABLE;
            PurchLineRec.SETRANGE("Document Type", g_int1);
            PurchLineRec.SETRANGE("Document No.", g_code1);
            IF PurchLineRec.GET(g_int1, g_code1, CurrLino) THEN BEGIN
              PurchLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF PurchLineRec.FINDLAST THEN PrevLino := PurchLineRec."Line No.";
              PurchLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF PurchLineRec.FINDLAST THEN
                CurrLino := PurchLineRec."Line No.";
            END;
            REPEAT
              PurchLineRec.INIT;
              PurchLineRec."Document Type" := g_int1;
              PurchLineRec."Document No." := g_code1;
              PurchLineRec."Line No." := CurrLino + Gap;
              CurrLino := PurchLineRec."Line No.";
              PurchLineRec."System-Created Entry" := TRUE;
              PurchLineRec."Posting Date" := PurchHeaderRec."Posting Date";
              PurchLineRec.VALIDATE("Currency Code", PurchHeaderRec."Currency Code");
              PurchLineRec.VALIDATE(Type, PurchLineRec.Type::"G/L Account");
              PurchLineRec."Job No." := g_code4;
              IF PurchLineRec."Job No." = '' THEN
                PurchLineRec."Job No." := PurchHeaderRec."Received on Project";
              IF PurchLineRec."Job No." = '' THEN
                PurchLineRec."Job No." := PurchHeaderRec."Job No.";
              PurchLineRec.VALIDATE(Element, g_code2);
              PurchLineRec.VALIDATE("No.", DetermineGLAccount(PurchLineRec."Job No."));
              PurchLineRec.VALIDATE("Service Order No.", g_code5);
              PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Material;
              PurchLineRec.Manufacturer := MarkedRec.Manufacturer;
              PurchLineRec."Basic Item" := MarkedRec."Product Code";
              PurchLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              PurchLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              PurchLineRec.FillMainProject;
              PurchLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              PurchLineRec."Input by" := USERID; //DP00469
              PurchLineRec."Input Date" := TODAY; //DP00469
              PurchLineRec.INSERT;
              PurchLineRec.CreatePurchOrderControl(FALSE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Standard Purchase Line":
          BEGIN
            StdPurchRec.LOCKTABLE;
            StdPurchRec.SETRANGE("Standard Purchase Code", g_code1);
            IF StdPurchRec.GET(g_code1, CurrLino) THEN BEGIN
              StdPurchRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF StdPurchRec.FINDLAST THEN PrevLino := StdPurchRec."Line No.";
              StdPurchRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF StdPurchRec.FINDLAST THEN
                CurrLino := StdPurchRec."Line No.";
            END;
            REPEAT
              StdPurchRec.INIT;
              StdPurchRec."Standard Purchase Code" := g_code1;
              StdPurchRec."Line No." := CurrLino + Gap;
              CurrLino := StdPurchRec."Line No.";
              StdPurchRec.Type := StdPurchRec.Type::Item;
              StdPurchRec.Manufacturer := MarkedRec.Manufacturer;
              StdPurchRec."Basic Item" := MarkedRec."Product Code";
              StdPurchRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              StdPurchRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              StdPurchRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              StdPurchRec.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Budget Line":
          BEGIN
            BudgetLineRec.LOCKTABLE;
            BudgetLineRec.SETRANGE("Project No.", g_code1);
            BudgetLineRec.SETRANGE("Extension Contract", g_code2);
            BudgetLineRec.SETRANGE(Adjustment, g_code3);
            BudgetLineRec.SETRANGE(Option, g_code5);
            IF BudgetLineRec.GET(g_code1, g_code2, g_code3, g_code5, CurrLino) THEN BEGIN
              BudgetLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BudgetLineRec.FINDLAST THEN PrevLino := BudgetLineRec."Line No.";
              BudgetLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BudgetLineRec.FINDLAST THEN
                CurrLino := BudgetLineRec."Line No.";
            END;
            REPEAT
              BudgetLineRec.INIT;
              BudgetLineRec."Project No." := g_code1;
              BudgetLineRec."Extension Contract" := g_code2;
              BudgetLineRec.Adjustment := g_code3;
              BudgetLineRec.Option := g_code5;
              BudgetLineRec.VALIDATE(Element, g_code4);
              BudgetLineRec."Line No." := CurrLino + Gap;
              CurrLino := BudgetLineRec."Line No.";
              IF g_code1 <> '' THEN BEGIN
                ProjRec.GET(g_code1);
                BudgetLineRec."Version Date" := ProjRec."Version Date";
                BudgetLineRec."Department Code" := ProjRec."Global Dimension 1 Code";  //*31927
              END;
              IF g_code2 <> '' THEN BEGIN
                ExtRec.GET(g_code1, g_code2);
                BudgetLineRec."Version Date" := ExtRec."Version Date";
              END;
              IF g_code3 <> '' THEN BEGIN
                AdjRec.GET(g_code1, g_code3);
                BudgetLineRec."Version Date" := AdjRec."Version Date";
              END;
              BudgetLineRec."Cost Type" := BudgetLineRec."Cost Type"::Material;
              BudgetLineRec.Manufacturer := MarkedRec.Manufacturer;
              BudgetLineRec."Basic Item" := MarkedRec."Product Code";
              BudgetLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              BudgetLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              BudgetLineRec.FillMainProject;
              BudgetLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              BudgetLineRec.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Project Cost Plus Entry":
          BEGIN
            ProjCostPlusRec.LOCKTABLE;
            ProjCostPlusRec.SETRANGE("Project No.", g_code1);
            ProjCostPlusRec.SETRANGE(Principal, g_code2);
            ProjCostPlusRec.SETRANGE("Commission No.", g_code3);
            ProjCostPlusRec.SETRANGE("Settl.Sheet No.", g_code4);
            IF ProjCostPlusRec.GET(g_code1, g_code2, g_code3, g_code4, CurrLino) THEN BEGIN
              ProjCostPlusRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF ProjCostPlusRec.FINDLAST THEN PrevLino := ProjCostPlusRec."Line No.";
              ProjCostPlusRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ProjCostPlusRec.FINDLAST THEN
                CurrLino := ProjCostPlusRec."Line No.";
            END;
            REPEAT
              ProjCostPlusRec.INIT;
              ProjCostPlusRec."Project No." := g_code1;
              ProjCostPlusRec.Principal := g_code2;
              ProjCostPlusRec."Commission No." := g_code3;
              ProjCostPlusRec."Settl.Sheet No." := g_code4;
              ProjCostPlusRec."Line No." := CurrLino + Gap;
              CurrLino := ProjCostPlusRec."Line No.";
              ProjCostPlusRec."Cost Type" := ProjCostPlusRec."Cost Type"::Material;
              ProjCostPlusRec.Manufacturer := MarkedRec.Manufacturer;
              ProjCostPlusRec."Basic Item" := MarkedRec."Product Code";
              ProjCostPlusRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              ProjCostPlusRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              ProjCostPlusRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              ProjCostPlusRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Option Budget":
          BEGIN
            BudgetOptionRec.LOCKTABLE;
            BudgetOptionRec.SETRANGE("Project No.", g_code1);
            BudgetOptionRec.SETRANGE("Plot No.", g_code4);
            BudgetOptionRec.SETRANGE("House Model", g_code5);
            BudgetOptionRec.SETRANGE("Main Group", g_code6);
            BudgetOptionRec.SETRANGE(Group, g_code7);
            BudgetOptionRec.SETRANGE("Sub Group", g_code8);
            BudgetOptionRec.SETRANGE(Option, g_code2);
            IF BudgetOptionRec.GET(g_code1, g_code4, g_code5, g_code6, g_code7, g_code8, g_code2, CurrLino) THEN BEGIN
              BudgetOptionRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BudgetOptionRec.FINDLAST THEN PrevLino := BudgetOptionRec."Line No.";
              BudgetOptionRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BudgetOptionRec.FINDLAST THEN
                CurrLino := BudgetOptionRec."Line No.";
            END;
            REPEAT
              BudgetOptionRec.INIT;
              BudgetOptionRec."Project No." := g_code1;
              BudgetOptionRec."Plot No." := g_code4;
              BudgetOptionRec."House Model" := g_code5;
              BudgetOptionRec."Main Group" := g_code6;
              BudgetOptionRec.Group := g_code7;
              BudgetOptionRec."Sub Group" := g_code8;
              BudgetOptionRec.Option := g_code2;
              BudgetOptionRec.VALIDATE(Element, g_code3);
              BudgetOptionRec."Line No." := CurrLino + Gap;
              CurrLino := BudgetOptionRec."Line No.";
              BudgetOptionRec."Cost Type" := BudgetOptionRec."Cost Type"::Material;
              BudgetOptionRec.Manufacturer := MarkedRec.Manufacturer;
              BudgetOptionRec."Basic Item" := MarkedRec."Product Code";
              BudgetOptionRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              BudgetOptionRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              BudgetOptionRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              BudgetOptionRec.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Part Line OLD":  //DP00381
          BEGIN
            OldPartLineRec.LOCKTABLE;
            OldPartLineRec.SETRANGE("Part Group",g_code6);
            OldPartLineRec.SETRANGE(Part,g_code3);
            IF OldPartLineRec.GET(g_code6, g_code3, CurrLino) THEN BEGIN
              OldPartLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldPartLineRec.FINDLAST THEN PrevLino := OldPartLineRec."Line No.";
              OldPartLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldPartLineRec.FINDLAST THEN
                CurrLino := OldPartLineRec."Line No.";
            END;
            REPEAT
              OldPartLineRec.INIT;
              OldPartLineRec."Part Group" := g_code6;
              OldPartLineRec.Part := g_code3;
              OldPartLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldPartLineRec."Line No.";
              OldPartLineRec.Manufacturer := MarkedRec.Manufacturer;
              OldPartLineRec."Basic Item" := MarkedRec."Product Code";
              OldPartLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              OldPartLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              OldPartLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              OldPartLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Part Line NEW":  //DP00381
          BEGIN
            NewPartLineRec.LOCKTABLE;
            NewPartLineRec.SETRANGE("Part Group",g_code6);
            NewPartLineRec.SETRANGE(Part,g_code3);
            IF NewPartLineRec.GET(g_code6, g_code3, CurrLino) THEN BEGIN
              NewPartLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewPartLineRec.FINDLAST THEN PrevLino := NewPartLineRec."Line No.";
              NewPartLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewPartLineRec.FINDLAST THEN
                CurrLino := NewPartLineRec."Line No.";
            END;
            REPEAT
              NewPartLineRec.INIT;
              NewPartLineRec."Part Group" := g_code6;
              NewPartLineRec.Part := g_code3;
              NewPartLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewPartLineRec."Line No.";
              NewPartLineRec.Manufacturer := MarkedRec.Manufacturer;
              NewPartLineRec."Basic Item" := MarkedRec."Product Code";
              NewPartLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              NewPartLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              NewPartLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              NewPartLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Line OLD":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            OldEstLineRec.LOCKTABLE;
            OldEstLineRec.SETRANGE("Estimate No.", g_code1);
            OldEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            OldEstLineRec.SETRANGE("Part Group",g_code6);
            OldEstLineRec.SETRANGE(Part,g_code3);
            IF OldEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              OldEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldEstLineRec.FINDLAST THEN PrevLino := OldEstLineRec."Line No.";
              OldEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldEstLineRec.FINDLAST THEN
                CurrLino := OldEstLineRec."Line No.";
            END;
            REPEAT
              OldEstLineRec.INIT;
              OldEstLineRec."Estimate No." := g_code1;
              OldEstLineRec."Sub-Estimate No." := g_code2;
              OldEstLineRec."Part Group" := g_code6;
              OldEstLineRec.Part := g_code3;
              OldEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldEstLineRec."Line No.";
              OldEstLineRec.Manufacturer := MarkedRec.Manufacturer;
              OldEstLineRec."Basic Item" := MarkedRec."Product Code";
              OldEstLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              OldEstLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              OldEstLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              OldEstLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Line NEW":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            NewEstLineRec.LOCKTABLE;
            NewEstLineRec.SETRANGE("Estimate No.", g_code1);
            NewEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            NewEstLineRec.SETRANGE("Part Group",g_code6);
            NewEstLineRec.SETRANGE(Part,g_code3);
            IF NewEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              NewEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewEstLineRec.FINDLAST THEN PrevLino := NewEstLineRec."Line No.";
              NewEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewEstLineRec.FINDLAST THEN
                CurrLino := NewEstLineRec."Line No.";
            END;
            REPEAT
              NewEstLineRec.INIT;
              NewEstLineRec."Estimate No." := g_code1;
              NewEstLineRec."Sub-Estimate No." := g_code2;
              NewEstLineRec."Part Group" := g_code6;
              NewEstLineRec.Part := g_code3;
              NewEstLineRec.InitRecord;
              NewEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewEstLineRec."Line No.";
              NewEstLineRec.Manufacturer := MarkedRec.Manufacturer;
              NewEstLineRec."Basic Item" := MarkedRec."Product Code";
              NewEstLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              NewEstLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              NewEstLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              NewEstLineRec.INSERT(TRUE);
              NewEstLineRec.UpdateLineTotals;  //db, 23-06-14
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Recipe Line OLD":  //DP00381
          BEGIN
            IF g_code1 <> '' THEN BEGIN
              EstRec.GET(g_code1);
              EstRec.TESTFIELD(Fixed, FALSE);
            END;

            //mg.sn, 06-06-12: M34512
            IF CompanyRelationsCentralMgt.READPERMISSION THEN BEGIN
              CentralDataManagementCU.ItemFormEditable(NavBln, DiscBln, DiscGroupBln, RcpBln);
              IF RcpBln THEN
                ERROR(Text042);
            END;
            //mg.en, 06-06-12: M34512

            OldRecipeLineRec.LOCKTABLE;
            OldRecipeLineRec.SETRANGE("Estimate No.",g_code1);
            OldRecipeLineRec.SETRANGE("Sub-Estimate No.",g_code2);
            OldRecipeLineRec.SETRANGE("Part Group",g_code6);
            OldRecipeLineRec.SETRANGE(Part,g_code3);
            OldRecipeLineRec.SETRANGE("Estimate Line",g_int1);
            OldRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            OldRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF OldRecipeLineRec.GET(g_code1, g_code2, g_code6, g_code3, g_int1, g_code5, g_code4, CurrLino) THEN BEGIN
              OldRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldRecipeLineRec.FINDLAST THEN PrevLino := OldRecipeLineRec."Line No.";
              OldRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldRecipeLineRec.FINDLAST THEN
                CurrLino := OldRecipeLineRec."Line No.";
            END;
            REPEAT;
              OldRecipeLineRec.INIT;
              OldRecipeLineRec."Estimate No." := g_code1;
              OldRecipeLineRec."Sub-Estimate No." := g_code2;
              OldRecipeLineRec."Part Group" := g_code6;
              OldRecipeLineRec.Part := g_code3;
              OldRecipeLineRec.Recipe := g_code4;
              OldRecipeLineRec."Recipe Group" := g_code5;
              OldRecipeLineRec."Estimate Line" := g_int1;
              OldRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldRecipeLineRec."Line No.";
              OldRecipeLineRec.Manufacturer := MarkedRec.Manufacturer;
              OldRecipeLineRec."Basic Item" := MarkedRec."Product Code";
              OldRecipeLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              OldRecipeLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              OldRecipeLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              OldRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Base Recipe Line":  //DP00381
          BEGIN
            BaseRecipeRec.GET(g_code5, g_code4);
            BaseRecipeRec.TESTFIELD(Fixed, FALSE);

            //mg.sn, 06-06-12: M34512
            IF CompanyRelationsCentralMgt.READPERMISSION THEN BEGIN
              CentralDataManagementCU.ItemFormEditable(NavBln, DiscBln, DiscGroupBln, RcpBln);
              IF RcpBln THEN
                ERROR(Text042);
            END;
            //mg.en, 06-06-12: M34512

            BaseRecipeLineRec.LOCKTABLE;
            BaseRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            BaseRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF BaseRecipeLineRec.GET(g_code5, g_code4, CurrLino) THEN BEGIN
              BaseRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF BaseRecipeLineRec.FINDLAST THEN PrevLino := BaseRecipeLineRec."Line No.";
              BaseRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF BaseRecipeLineRec.FINDLAST THEN
                CurrLino := BaseRecipeLineRec."Line No.";
            END;
            REPEAT;
              BaseRecipeLineRec.INIT;
              BaseRecipeLineRec.Recipe := g_code4;
              BaseRecipeLineRec."Recipe Group" := g_code5;
              BaseRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := BaseRecipeLineRec."Line No.";
              BaseRecipeLineRec.Manufacturer := MarkedRec.Manufacturer;
              BaseRecipeLineRec."Basic Item" := MarkedRec."Product Code";
              BaseRecipeLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              BaseRecipeLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              BaseRecipeLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              BaseRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Recipe Line":  //DP00381
          BEGIN
            IF g_code1 <> '' THEN BEGIN
              EstRec.GET(g_code1);
              EstRec.TESTFIELD(Fixed, FALSE);
            END;

            NewRecipeLineRec.LOCKTABLE;
            NewRecipeLineRec.SETRANGE("Estimate No.",g_code1);
            NewRecipeLineRec.SETRANGE("Sub-Estimate No.",g_code2);
            NewRecipeLineRec.SETRANGE("Part Group",g_code6);
            NewRecipeLineRec.SETRANGE(Part,g_code3);
            NewRecipeLineRec.SETRANGE("Estimate Line",g_int1);
            NewRecipeLineRec.SETRANGE("Recipe Group",g_code5);
            NewRecipeLineRec.SETRANGE(Recipe,g_code4);
            IF NewRecipeLineRec.GET(g_code1, g_code2, g_code6, g_code3, g_int1, g_code5, g_code4, CurrLino) THEN BEGIN
              NewRecipeLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewRecipeLineRec.FINDLAST THEN PrevLino := NewRecipeLineRec."Line No.";
              NewRecipeLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewRecipeLineRec.FINDLAST THEN
                CurrLino := NewRecipeLineRec."Line No.";
            END;
            REPEAT;
              NewRecipeLineRec.INIT;
              NewRecipeLineRec."Estimate No." := g_code1;
              NewRecipeLineRec."Sub-Estimate No." := g_code2;
              NewRecipeLineRec."Part Group" := g_code6;
              NewRecipeLineRec.Part := g_code3;
              NewRecipeLineRec.Recipe := g_code4;
              NewRecipeLineRec."Recipe Group" := g_code5;
              NewRecipeLineRec."Estimate Line" := g_int1;
              NewRecipeLineRec.InitRecord;
              NewRecipeLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewRecipeLineRec."Line No.";
              NewRecipeLineRec.Manufacturer := MarkedRec.Manufacturer;
              NewRecipeLineRec."Basic Item" := MarkedRec."Product Code";
              NewRecipeLineRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              NewRecipeLineRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              NewRecipeLineRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              NewRecipeLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Advice Order Line":
          BEGIN
            AdviceRec.LOCKTABLE;
            IF g_int1 <> 0 THEN BEGIN
              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
              AdviceRec.SETRANGE("Service Order No.", g_code4);
              IF AdviceRec.GET(AdviceRec."Record Type"::ServOrder, '', g_code4, CurrLino) THEN
                AdvicePresent := TRUE
              ELSE
                AdvicePresent := FALSE;
            END ELSE BEGIN
              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::Project);
              AdviceRec.SETRANGE("Project No.", g_code1);
              IF AdviceRec.GET(AdviceRec."Record Type"::Project, g_code1, '', CurrLino) THEN
                AdvicePresent := TRUE
              ELSE
                AdvicePresent := FALSE;
            END;
            IF AdvicePresent = TRUE THEN BEGIN
              AdviceRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF AdviceRec.FINDLAST THEN PrevLino := AdviceRec."Line No.";
              AdviceRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF AdviceRec.FINDLAST THEN
                CurrLino := AdviceRec."Line No.";
            END;
            REPEAT
              AdviceRec.INIT;
              IF g_int1 <> 0 THEN BEGIN
                AdviceRec."Record Type" := AdviceRec."Record Type"::ServOrder;
                AdviceRec.VALIDATE("Service Order No.", g_code4);
              END ELSE BEGIN
                AdviceRec."Record Type" := AdviceRec."Record Type"::Project;
                AdviceRec."Project No." := g_code1;
                AdviceRec.Element := g_code2;
                AdviceRec."Extension Contract" := g_code3;
              END;
              AdviceRec."Line No." := CurrLino + Gap;
              CurrLino := AdviceRec."Line No.";
              AdviceRec.Manufacturer := MarkedRec.Manufacturer;
              AdviceRec."Basic Item" := MarkedRec."Product Code";
              AdviceRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              AdviceRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              AdviceRec.InitRecord;  //db, 23-06-09: M15627
              AdviceRec."Purchaser Code" := AdviceRec.GetDefaultPurchaser(g_code1);
              AdviceRec.VALIDATE("Quantity (Advice)",MarkedRec."Quantity Per Price"); //C025959
              AdviceRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            ServOrderRec.GET(g_code1);

            ServCostPlusRec.LOCKTABLE;
            ServCostPlusRec.SETRANGE("Service Order No.", g_code1);
            IF ServCostPlusRec.GET(g_code1, CurrLino) THEN BEGIN
              ServCostPlusRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF ServCostPlusRec.FINDLAST THEN PrevLino := ServCostPlusRec."Line No.";
              ServCostPlusRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ServCostPlusRec.FINDLAST THEN
                CurrLino := ServCostPlusRec."Line No.";
            END;
            REPEAT
              ServCostPlusRec.INIT;
              ServCostPlusRec.VALIDATE("Service Order No.", g_code1);
              ServCostPlusRec."Line No." := CurrLino + Gap;
              CurrLino := ServCostPlusRec."Line No.";
              ServCostPlusRec."Customer No." := ServOrderRec."Customer No.";
              ServCostPlusRec."Bill-to Customer No." := ServOrderRec."Bill-to Customer No.";
              ServCostPlusRec."Service Location No." := ServOrderRec."Service Location No.";
              ServCostPlusRec.Manufacturer := MarkedRec.Manufacturer;
              ServCostPlusRec."Basic Item" := MarkedRec."Product Code";
              ServCostPlusRec."Vendor (Trade Item)" := MarkedRec.Vendor;
              ServCostPlusRec."Posting Date" := TODAY;  //db, 05-10-06 (required for discount)
              ServCostPlusRec.VALIDATE("Trade Item", MarkedRec."Item Code");
              ServCostPlusRec.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              ServCostPlusRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Service Order Budget Line":
          BEGIN
            ServOrderRec.GET(g_code1);
            ServiceOrderBudgetLine.LOCKTABLE;
            ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
            ServiceOrderBudgetLine.SETRANGE("Service Order No.", g_code1);
            ServiceOrderBudgetLine.SETRANGE("Service Contract No.", '');
            ServiceOrderBudgetLine.SETRANGE("Object No.", g_code2);
            ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", g_code3);
            IF ServiceOrderBudgetLine.GET(ServiceOrderBudgetLine."Budget Type"::Order, g_code1, '', g_code2, g_code3, CurrLino) THEN BEGIN
              ServiceOrderBudgetLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF ServiceOrderBudgetLine.FINDLAST THEN PrevLino := ServiceOrderBudgetLine."Line No.";
              ServiceOrderBudgetLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ServiceOrderBudgetLine.FINDLAST THEN
                CurrLino := ServiceOrderBudgetLine."Line No.";
            END;
            REPEAT
              ServiceOrderBudgetLine.INIT;
              ServiceOrderBudgetLine."Budget Type" := ServiceOrderBudgetLine."Budget Type"::Order;
              ServiceOrderBudgetLine.VALIDATE("Service Order No.", g_code1);
              ServiceOrderBudgetLine."Service Contract No." := '';
              ServiceOrderBudgetLine.VALIDATE("Object No.", g_code2);
              ServiceOrderBudgetLine.VALIDATE("Maintenance Scheme", g_code3);
              ServiceOrderBudgetLine."Line No." := CurrLino + Gap;
              CurrLino := ServiceOrderBudgetLine."Line No.";
              ServiceOrderBudgetLine."Service Location No." := ServOrderRec."Service Location No.";
              ServiceOrderBudgetLine."Cost Type" := ServiceOrderBudgetLine."Cost Type"::Material;
              ServiceOrderBudgetLine.Manufacturer := MarkedRec.Manufacturer;
              ServiceOrderBudgetLine."Basic Item" := MarkedRec."Product Code";
              ServiceOrderBudgetLine."Vendor (Trade Item)" := MarkedRec.Vendor;
              ServiceOrderBudgetLine.VALIDATE("Trade Item", MarkedRec."Item Code");
              ServiceOrderBudgetLine.VALIDATE(Quantity,MarkedRec."Quantity Per Price"); //C025959
              ServiceOrderBudgetLine.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Maint. Scheme Version Line":
          BEGIN
            MaintSchemeVersionLine.LOCKTABLE;
            MaintSchemeVersionLine.SETRANGE("Line Type", g_int1);
            MaintSchemeVersionLine.SETRANGE("Type Code", g_code1);
            MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", g_code2);
            MaintSchemeVersionLine.SETRANGE("Index Date", g_date1);
            IF MaintSchemeVersionLine.GET(g_int1, g_code1, g_code2, g_date1, CurrLino) THEN BEGIN
              MaintSchemeVersionLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF MaintSchemeVersionLine.FINDLAST THEN PrevLino := MaintSchemeVersionLine."Line No.";
              MaintSchemeVersionLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF MaintSchemeVersionLine.FINDLAST THEN
                CurrLino := MaintSchemeVersionLine."Line No.";
            END;
            REPEAT
              MaintSchemeVersionLine.INIT;
              MaintSchemeVersionLine."Line Type" := g_int1;
              MaintSchemeVersionLine."Type Code" := g_code1;
              MaintSchemeVersionLine."Belongs to Scheme" := g_code2;
              MaintSchemeVersionLine."Index Date" := g_date1;
              MaintSchemeVersionLine."Line No." := CurrLino + Gap;
              CurrLino := MaintSchemeVersionLine."Line No.";
              MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Material;
              MaintSchemeVersionLine.Manufacturer := MarkedRec.Manufacturer;
              MaintSchemeVersionLine."Basic Item" := MarkedRec."Product Code";
              MaintSchemeVersionLine."Vendor (Trade Item)" := MarkedRec.Vendor;
              MaintSchemeVersionLine.VALIDATE("Trade Item", MarkedRec."Item Code");
              IF MaintSchemeVersionLine."Line Type" = MaintSchemeVersionLine."Line Type"::"Maintenance Scheme" THEN
                MaintenanceSchemeCode := MaintSchemeVersionLine."Type Code"
              ELSE
                MaintenanceSchemeCode := MaintSchemeVersionLine."Belongs to Scheme";
              IF NOT MaintenanceScheme.GET(MaintenanceSchemeCode) THEN
                MaintenanceScheme.INIT;
              IF NOT MaintenanceScheme."Survey Template" THEN
                MaintSchemeVersionLine.VALIDATE(Quantity, MarkedRec."Quantity Per Price");
              MaintSchemeVersionLine.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Serv. Surv. Object Add. Act.":
          BEGIN
            ServSurvObjectAddAct.LOCKTABLE;
            ServSurvObjectAddAct.SETRANGE("Survey No.", g_code1);
            ServSurvObjectAddAct.SETRANGE("Location Code", g_code2);
            ServSurvObjectAddAct.SETRANGE("Seq. No.", g_int1);
            ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", g_code3);
            IF ServSurvObjectAddAct.GET(g_code1, g_code2, g_int1, g_code3, CurrLino) THEN BEGIN
              ServSurvObjectAddAct.SETFILTER("Line No.", '<%1', CurrLino);
              IF ServSurvObjectAddAct.FINDLAST THEN PrevLino := ServSurvObjectAddAct."Line No.";
              ServSurvObjectAddAct.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ServSurvObjectAddAct.FINDLAST THEN
                CurrLino := ServSurvObjectAddAct."Line No.";
            END;
            REPEAT
              ServSurvObjectAddAct.INIT;
              ServSurvObjectAddAct."Survey No." := g_code1;
              ServSurvObjectAddAct."Location Code" := g_code2;
              ServSurvObjectAddAct."Seq. No." := g_int1;
              ServSurvObjectAddAct."Maintenance Scheme Code" := g_code3;
              ServSurvObjectAddAct."Line No." := CurrLino + Gap;
              CurrLino := ServSurvObjectAddAct."Line No.";
              ServSurvObjectAddAct."Cost Type" := ServSurvObjectAddAct."Cost Type"::Material;
              ServSurvObjectAddAct.Manufacturer := MarkedRec.Manufacturer;
              ServSurvObjectAddAct."Basic Item" := MarkedRec."Product Code";
              ServSurvObjectAddAct."Vendor (Trade Item)" := MarkedRec.Vendor;
              ServSurvObjectAddAct.VALIDATE("Trade Item", MarkedRec."Item Code");
              IF NOT MaintenanceScheme.GET(ServSurvObjectAddAct."Maintenance Scheme Code") THEN
                MaintenanceScheme.INIT;
              IF NOT MaintenanceScheme."Survey Template" THEN
                ServSurvObjectAddAct.VALIDATE(Quantity, MarkedRec."Quantity Per Price");
              ServSurvObjectAddAct.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;
        ELSE
          MESSAGE(Text001);
      END;

      COMMIT;
    END;

    PROCEDURE SetSelectionProgress@1100525005(iShowProgress@1100525000 : Boolean);
    BEGIN
      ShowProgress := iShowProgress;  //db, 02-07-10: M19985
    END;

    PROCEDURE SetSelectionItem@1210190008(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20];l_int1@11012005 : Integer;l_code5@11012006 : Code[20];l_code6@11012007 : Code[20];l_int2@1210190000 : Integer;l_code7@1210190002 : Code[20];l_code8@1210190001 : Code[20];l_date1@1100528600 : Date);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_code7 := l_code7;
      g_code8 := l_code8;
      g_int1 := l_int1;
      g_int2 := l_int2;
      g_date1 := l_date1;
    END;

    PROCEDURE SetSelectionRecipe@1210190002(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20];l_code5@1210190000 : Code[20];l_code6@1210190004 : Code[20];l_code7@1210190003 : Code[20];l_code8@1210190002 : Code[20];l_code9@1210190001 : Code[20];l_int1@1100525000 : Integer);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_code7 := l_code7;
      g_code8 := l_code8;
      g_code9 := l_code9;
      g_int1 := l_int1;  //C027336
    END;

    PROCEDURE SetSelectionPart@1100485001(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@1100485000 : Code[20]);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
    END;

    PROCEDURE SetSelectionOperation@1100485004(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20];l_int1@1100485001 : Integer;l_code5@1210190000 : Code[20];l_code6@1100485000 : Code[20]);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_int1 := l_int1;
      g_code5 := l_code5;
      g_code6 := l_code6;
    END;

    PROCEDURE SetSelectionServFeature@4(l_table@1100485000 : Integer;l_int3@1210190007 : Integer;l_code1@11012000 : Code[20];l_code2@1210190000 : Code[20];l_code3@1210190001 : Code[20];l_code4@1210190002 : Code[20];l_int1@1210190003 : Integer;l_code5@1210190004 : Code[20];l_code6@1210190005 : Code[20];l_int2@1210190006 : Integer;l_code7@1100525000 : Code[20];l_int4@1100525001 : Integer;l_code8@1100525002 : Code[20]);
    BEGIN
      g_table := l_table;
      g_int3 := l_int3-1;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_code7 := l_code7;
      g_code8 := l_code8;
      g_int1 := l_int1;
      g_int2 := l_int2;
      g_int4 := l_int4;
    END;

    PROCEDURE SetSelectionEntries@1100485010(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20];l_int1@11012005 : Integer;l_code5@11012006 : Code[20];l_code6@11012007 : Code[20];l_int2@1210190000 : Integer);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_int1 := l_int1;
      g_int2 := l_int2;
    END;

    PROCEDURE SetSelectionObligation@1100485012(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@11012002 : Code[20];l_code3@11012003 : Code[20];l_code4@11012004 : Code[20]);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
    END;

    PROCEDURE SetSelectionObject@1100525001(l_table@11012000 : Integer;l_code1@11012001 : Code[20];l_code2@1100528600 : Code[20];l_code3@1100528601 : Code[20];l_int1@1100528602 : Integer);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionShippingOrder@1100525008(l_table@1100525008 : Integer;l_int1@1100525007 : Integer;l_code1@1100525006 : Code[20];l_int2@1100525000 : Integer;l_code2@1100529800 : Code[20]);
    BEGIN
      //mg, 22-12-10: M24679
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
      g_int2 := l_int2;
      g_code2 := l_code2; // MVOS M28943
    END;

    PROCEDURE SetSelectionServInstallPart@1100525015(l_table@1100525002 : Integer;l_code1@1100525000 : Code[20];l_date1@1210190000 : Date);
    BEGIN
      //mg, 15-02-11: M25293
      g_table := l_table;
      g_code1 := l_code1;
      g_date1 := l_date1;
    END;

    PROCEDURE SetSelectionEngineeringDoc@1210190003(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionEngineeringSystem@1210190012(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionEngLocation@1210190015(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionEngCable@1210190016(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionEngDevice@1210190017(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionEngExtraNeed@1210190018(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionDistCable@1210190019(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionDistDevice@1210190020(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionDistExtraNeed@1210190021(l_table@1210190000 : Integer;l_code1@1210190001 : Code[20];l_int1@1210190003 : Integer);
    BEGIN
      //mg, 19-05-11: M20072
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionServiceObjects@1100526200(l_table@1100526201 : Integer;l_code1@1100526200 : Code[20];l_code2@1100528600 : Code[20];l_int1@1100526202 : Integer);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionInspectionLines@1100528600(l_table@1100528600 : Integer;l_int1@1100528601 : Integer;l_code1@1100528602 : Code[20];l_code2@1100528603 : Code[20];l_code3@1100525001 : Code[20];l_code4@1100525002 : Code[20];l_date1@1100525000 : Date;l_int2@1100528605 : Integer);
    BEGIN
      g_table := l_table;
      g_int1 := l_int1;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_date1 := l_date1;
      g_int2 := l_int2;
    END;

    PROCEDURE SetSelectionObjSpecLines@1100528602(l_table@1100528600 : Integer;l_int1@1100528601 : Integer;l_code1@1100528602 : Code[20];l_int2@1100528605 : Integer;l_int3@1100528900 : Integer);
    BEGIN
      g_table := l_table;
      g_int1 := l_int1;
      g_code1 := l_code1;
      g_int2 := l_int2;
      g_int3 := l_int3;  //DP00118
    END;

    PROCEDURE SetSelectionComplexSpecLines@1100528300(l_table@1100528600 : Integer;l_int1@1100528601 : Integer;l_code1@1100528602 : Code[20];l_int2@1100528605 : Integer);
    BEGIN
      g_table := l_table;
      g_int1 := l_int1;
      g_code1 := l_code1;
      g_int2 := l_int2;
    END;

    PROCEDURE SetSelectionBuildings@1100528605(l_table@1100528602 : Integer;l_code1@1100528601 : Code[20]);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
    END;

    PROCEDURE SetSelectionBuildingObjectRels@1100528603(l_table@1100528603 : Integer;l_code1@1100528602 : Code[20];l_code2@1100528600 : Code[20]);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
    END;

    PROCEDURE SetSelectionLocSpecLines@1100528608(l_table@1100528600 : Integer;l_code1@1100528601 : Code[20];l_int1@1100528602 : Integer);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_int1 := l_int1;
    END;

    PROCEDURE SetSelectionSurveyObjectSpecLines@1100528609(l_table@1100528602 : Integer;l_code1@1100528601 : Code[20];l_code2@1100528603 : Code[10];l_int1@1100528600 : Integer;l_int2@1100528604 : Integer);
    BEGIN
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_int1 := l_int1;
      g_int2 := l_int2;
    END;

    PROCEDURE SetSelectionResources@1100528612(l_table@1100528604 : Integer);
    BEGIN
      g_table := l_table;
    END;

    PROCEDURE SetSelectionEmployees@1100528400(l_table@1100528400 : Integer;l_int1@1100528401 : Integer;l_int2@1100528402 : Integer;l_code1@1100528403 : Code[20];l_int3@1100528404 : Integer;l_int4@1100528406 : Integer;l_text1@1100528405 : Text[30]);
    BEGIN
      g_table := l_table;
      g_int1 := l_int1;
      g_int2 := l_int2;
      g_code1 := l_code1;
      g_int3 := l_int3;
      g_int4 := l_int4;
      g_text1 := l_text1;
    END;

    PROCEDURE SplitDesc@1100485013(lvDesc@1100485000 : Text[100];lvMaxLen@1100485001 : Integer);
    VAR
      sep@1210190000 : Integer;
    BEGIN
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
      END ELSE BEGIN
        IF STRLEN(lvDesc) > lvMaxLen THEN BEGIN
          desc1 := COPYSTR(lvDesc, 1, lvMaxLen);
          desc2 := COPYSTR(lvDesc, lvMaxLen+1, lvMaxLen);
        END ELSE BEGIN
          desc1 := lvDesc;
          desc2 := '';
        END;
      END;

      desc1 := COPYSTR(desc1, 1, lvMaxLen);
      desc2 := COPYSTR(desc2, 1, lvMaxLen);
    END;

    PROCEDURE CheckGap@1210190007();
    BEGIN
      Gap := ROUND((CurrLino - PrevLino) / (MarkNo + 1), 1);
      IF (Gap * MarkNo) >= (CurrLino - PrevLino) THEN Gap := 0;
      CurrLino := PrevLino;
    END;

    PROCEDURE DetermineGLAccount@1210190006(lvProj@11012000 : Code[20]) : Code[20];
    VAR
      ProjSetUp@1210190002 : Record 315;
      ProjTypeRec@1210190000 : Record 11012009;
      lDimValRec@1100485003 : Record 349;
    BEGIN
      ProjSetUp.GET;
      IF ProjRec.GET(lvProj) THEN
        IF ProjTypeRec.GET(ProjRec."Project Type") THEN BEGIN
          EXIT(ProjTypeRec.GetWipAcc(ProjRec."Project Type",
                                     lDimValRec."Cost Type"::Material,
                                     ProjRec."Project Status",
                                     ProjSetUp."Provisions at Closure",
                                     COMPANYNAME,
                                     lDimValRec."Cost Type"::Material,''));
        END;
      EXIT('');
    END;

    PROCEDURE CheckItemUnitConversion@1100525003(iItem@1100525000 : Code[20];iManufacturer@1100525001 : Code[20];iBasicItem@1100525002 : Code[20];iVendor@1100525003 : Code[20];iTradeItem@1100525004 : Code[20];VAR ioQuantity@1100525007 : Decimal;iUnitNew@1100525008 : Code[20];iUnitOld@1100525009 : Code[20]);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
      ValidateCu@1100525006 : Codeunit 11012033;
      ItemTypeOpt@1100525005 : 'Item,Basic Item,Trade Item,Trade Vendor';
    BEGIN
      //db, 16-09-09: M16105 (derived from function in EstLineRec)
      UnitFactorOld := 1;
      UnitFactorNew := 1;
      IF iTradeItem <> '' THEN BEGIN
        ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
          iItem,iBasicItem,iTradeItem,iManufacturer,iVendor,ioQuantity,iUnitNew,UnitFactorNew);
      END ELSE BEGIN
        IF iBasicItem <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
            iItem,iBasicItem,iTradeItem,iManufacturer,iVendor,ioQuantity,iUnitNew,UnitFactorNew);
        END ELSE BEGIN
          IF iItem <> '' THEN BEGIN
            ItemRec.GET(iItem);
            UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, iUnitOld);
            UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, iUnitNew);
            UnitFactor := UnitFactorOld;
            ValidateCu.ValidateUnit(ItemTypeOpt::Item,
              iItem,iBasicItem,iTradeItem,iManufacturer,iVendor,ioQuantity,iUnitNew,UnitFactorNew);
          END;
        END;
      END;
      {
      IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
        VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld));
        VALIDATE(Weight,(Weight * UnitFactorNew / UnitFactorOld));
      END;
      }
    END;

    PROCEDURE CopyObjects@1100525002(VAR gvObjectRec@1100485000 : Record 11020334);
    VAR
      lvObjectRec@1100485001 : Record 11020334;
      ServiceEstimateLine@1100528600 : Record 11071806;
      ServSurvLocationObject@1100528601 : Record 11071813;
      ServiceSurvey@1100528602 : Record 11071803;
      LastLine@1100485002 : Integer;
    BEGIN
      lvObjectRec.COPY(gvObjectRec);
      WITH lvObjectRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        LastLine := 0;

        CASE g_table OF
          DATABASE::"Service Survey Structure Line":
            BEGIN
              ServiceEstimateLine.LOCKTABLE;
              ServiceEstimateLine.SETRANGE("Survey No.", g_code1);
              ServiceEstimateLine.SETRANGE("Location Code", g_code2);
              ServiceEstimateLine.SETRANGE("Structure No.", g_int1);
              ServiceEstimateLine.SETRANGE(Code, g_code3);
              IF ServiceEstimateLine.FINDLAST THEN
                LastLine := ServiceEstimateLine."Line No.";

             ServiceSurvey.GET(g_code1);
              REPEAT
                ServSurvLocationObject.INIT;
                ServSurvLocationObject."Survey No." := g_code1;
                ServSurvLocationObject."Location Code" := g_code2;
                ServSurvLocationObject."Seq. No." := 0;
                ServSurvLocationObject.INSERT(TRUE);
                ServSurvLocationObject.VALIDATE("Standard Object No.", "No.");
                IF ServiceSurvey."Service Package" <> '' THEN
                  ServSurvLocationObject.VALIDATE("Service Package", ServiceSurvey."Service Package");
                ServSurvLocationObject.VALIDATE(Quantity, 1);
                ServSurvLocationObject.MODIFY(TRUE);

                LastLine += 10000;
                ServiceEstimateLine.INIT;
                ServiceEstimateLine."Survey No." := g_code1;
                ServiceEstimateLine."Location Code" := g_code2;
                ServiceEstimateLine."Structure No." := g_int1;
                ServiceEstimateLine.VALIDATE(Code, g_code3);  //DP00978: evaluate Level and Element (1+2)
                ServiceEstimateLine."Line No." := LastLine;
                ServiceEstimateLine."Object Line" := TRUE;
                ServiceEstimateLine."Seq. No." := ServSurvLocationObject."Seq. No.";
                ServiceEstimateLine.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;
          DATABASE::"Serv. Surv. Location Object":
            BEGIN
              ServiceSurvey.GET(g_code1);
              REPEAT
                ServSurvLocationObject.INIT;
                ServSurvLocationObject."Survey No." := g_code1;
                ServSurvLocationObject."Location Code" := g_code2;
                ServSurvLocationObject."Seq. No." := 0;
                ServSurvLocationObject.INSERT(TRUE);
                ServSurvLocationObject.VALIDATE("Standard Object No.", "No.");
                IF ServiceSurvey."Service Package" <> '' THEN
                  ServSurvLocationObject.VALIDATE("Service Package", ServiceSurvey."Service Package");
                ServSurvLocationObject.VALIDATE(Quantity, 1);
                ServSurvLocationObject.MODIFY(TRUE);
              UNTIL NEXT = 0;
            END;
          ELSE
            MESSAGE(Text001);
        END;
      END;

      gvObjectRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyBaseRecipes@1100528900(VAR gvRcpRec@1100485000 : Record 11020581);
    VAR
      lvRcpRec@1100485001 : Record 11020581;
      RawElemRec@1210190000 : Record 11125679;
      CommentLineRAW@1100525000 : Record 11125684;
      LastLine@1100485002 : Integer;
    BEGIN
      //DP00381
      lvRcpRec.COPY(gvRcpRec);
      WITH lvRcpRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        //C027336.sn
        MarkNo := COUNT;
        CurrLino := g_int1;
        PrevLino := 0;
        Gap := 0;
        //C027336.en
        LastLine := 0;

        CASE g_table OF
          DATABASE::"Advice Order Line":
            BEGIN
              REPEAT
                TESTFIELD(Blocked, FALSE);
                AdviceRec.INIT;
                AdviceRec."Project No." := g_code1;
                IF g_code2 <> '' THEN   //db, 25-05-10: M19006
                  AdviceRec.VALIDATE("Service Order No.", g_code2);
                AdviceRec.Element := g_code3;
                AdviceRec."Extension Contract" := g_code4;
                IF AdviceRec."Project No." <> '' THEN
                  AdviceRec."Record Type" := AdviceRec."Record Type"::Project;
                IF AdviceRec."Service Order No." <> '' THEN
                  AdviceRec."Record Type" := AdviceRec."Record Type"::ServOrder;
                AdviceRec.InitRecord;  //db, 23-06-09: M15627
                AdviceRec."Purchaser Code" := AdviceRec.GetDefaultPurchaser(g_code1);
                //db.sn, 24-06-11: M15569
                AdviceRec.Recipe := "No.";
                AdviceRec."Recipe Group" := "Recipe Group";
                SplitDesc(Description, MAXSTRLEN(AdviceRec.Description));
                AdviceRec.Description := desc1;
                AdviceRec."Description 2" := desc2;
                AdviceRec."Unit of Measure" := "Unit of Measure";
                AdviceRec."Cost Type" := AdviceRec."Cost Type"::Sundry;
                AdviceRec."Source Type" := AdviceRec."Source Type"::"Recipe Header";
                AdviceRec."Quantity (Advice)" := 1;  //db, 21-12-11: avoid problem with zero-lines; with header all lines are deleted
                AdviceRec.VALIDATE("Line No.", 0);
                AdviceRec.INSERT(TRUE);
                LastLine := AdviceRec."Line No.";
                //db.en, 24-06-11: M15569
                CopyBaseRecipeLine("Recipe Group", "No.", LastLine, LastLine, 1);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Estimate Part Line NEW":  //DP00381
            BEGIN
              NewPartLineRec.LOCKTABLE;
              NewPartLineRec.SETRANGE("Part Group",g_code3);
              NewPartLineRec.SETRANGE(Part,g_code4);
              IF NewPartLineRec.FINDLAST THEN
                LastLine := NewPartLineRec."Line No.";

              REPEAT
                TESTFIELD(Blocked, FALSE);
                LastLine := LastLine + 10000;
                NewPartLineRec.INIT;
                NewPartLineRec."Part Group" := g_code3;
                NewPartLineRec.Part := g_code4;
                NewPartLineRec."Line No." := LastLine;
                NewPartLineRec.Recipe := "No.";
                NewPartLineRec."Recipe Group" := "Recipe Group";
                NewPartLineRec.Description := Description;
                NewPartLineRec."Unit of Measure" := "Unit of Measure";
                NewPartLineRec."Cost Type (Price)" := NewPartLineRec."Cost Type (Price)"::" ";  //C026231
                NewPartLineRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Base Recipe Line":  //DP00381
            BEGIN
              BaseRecipeLineRec.LOCKTABLE;
              BaseRecipeLineRec.SETRANGE("Recipe Group",g_code3);
              BaseRecipeLineRec.SETRANGE(Recipe,g_code4);
              IF BaseRecipeLineRec.FINDLAST THEN
                LastLine := BaseRecipeLineRec."Line No.";

              REPEAT
                TESTFIELD(Blocked, FALSE);
                LastLine := LastLine + 10000;
                BaseRecipeLineRec.INIT;
                BaseRecipeLineRec."Recipe Group" := g_code3;
                BaseRecipeLineRec.Recipe := g_code4;
                BaseRecipeLineRec."Line No." := LastLine;
                BaseRecipeLineRec."Recipe (Child)" := "No.";
                BaseRecipeLineRec."Recipe Group (Child)" := "Recipe Group";
                BaseRecipeLineRec.Description := Description;
                BaseRecipeLineRec."Unit of Measure" := "Unit of Measure";
                BaseRecipeLineRec."Cost Type (Price)" := BaseRecipeLineRec."Cost Type (Price)"::" ";  //C026231
                BaseRecipeLineRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Estimate Line NEW":  //DP00381
            BEGIN
              NewEstLineRec.LOCKTABLE;
              NewEstLineRec.SETRANGE("Estimate No.", g_code1);
              NewEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
              NewEstLineRec.SETRANGE("Part Group",g_code3);
              NewEstLineRec.SETRANGE(Part,g_code4);
              //C027336.sn
              //IF NewEstLineRec.FINDLAST THEN
              //  LastLine := NewEstLineRec."Line No.";
              IF NewEstLineRec.GET(g_code1, g_code2, g_code3, g_code4, CurrLino) THEN BEGIN
                NewEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
                IF NewEstLineRec.FINDLAST THEN PrevLino := NewEstLineRec."Line No.";
                NewEstLineRec.SETRANGE("Line No.");
                CheckGap;
              END;
              IF Gap = 0 THEN BEGIN
                Gap := 10000;
                IF NewEstLineRec.FINDLAST THEN
                  CurrLino := NewEstLineRec."Line No.";
              END;
              //C027336.en

              REPEAT
                TESTFIELD(Blocked, FALSE);
                //LastLine := LastLine + 10000;  //C027336.o
                NewEstLineRec.INIT;
                NewEstLineRec."Estimate No." := g_code1;
                NewEstLineRec."Sub-Estimate No." := g_code2;
                NewEstLineRec."Part Group" := g_code3;
                NewEstLineRec.Part := g_code4;
                NewEstLineRec.InitRecord;
                //C027336.sn
                //NewEstLineRec."Line No." := LastLine;
                NewEstLineRec."Line No." := CurrLino + Gap;
                CurrLino := NewEstLineRec."Line No.";
                //C027336.en
                NewEstLineRec.Recipe := "No.";
                NewEstLineRec."Recipe Group" := "Recipe Group";
                NewEstLineRec.Description := Description;
                NewEstLineRec."Unit of Measure" := "Unit of Measure";
                NewEstLineRec.Manufacturer := Manufacturer;
                NewEstLineRec.CopyRecipe();
                NewEstLineRec."Cost Type (Price)" := NewEstLineRec."Cost Type (Price)"::" ";  //C026231
                NewEstLineRec.INSERT(TRUE);
                NewEstLineRec.UpdateLineTotals;  //db, 23-06-14
                NewEstLineRec.VALIDATE("Quantity Sheet Feature", "Quantity Sheet Feature");  //DP00686
                NewEstLineRec.MODIFY;
              UNTIL NEXT = 0;
              NewEstLineRec.CheckUpdateQuantityFromRelation(
                NewEstLineRec."Estimate No.", NewEstLineRec."Sub-Estimate No.",
                NewEstLineRec."Part Group", NewEstLineRec.Part);   //DP00686
            END;

          DATABASE::"Estimate Line (RAW)":  //X001
            BEGIN
              RawLineRec.LOCKTABLE;
              RawLineRec.SETRANGE("Estimate No.", g_code1);
              RawLineRec.SETRANGE("Element No.", g_code2);

              RawElemRec.SETRANGE("Estimate No.", g_code1);
              RawElemRec.SETRANGE("Element No.", g_code2);
              //RawElemRec.SETRANGE(Commitment, TRUE);  //db, 25-10-11: M30062
              RawElemRec.SETFILTER("Construction Spec. Line No.", '00');  //db, 01-12-11: M31258
              IF NOT RawElemRec.FINDSET THEN
                RawElemRec.INIT;

              REPEAT
                TESTFIELD(Blocked, FALSE);
                IF RawLineRec.FINDLAST THEN
                  LastLine := RawLineRec."Line No.";

                RawLineRec.INIT;
                RawLineRec."Estimate No." := g_code1;
                RawLineRec."Element No." := g_code2;
                RawLineRec."Line No." := LastLine + 10000;
                RawLineRec.INSERT(TRUE);
                RawLineRec.Source := RawLineRec.Source::User;  //do not used Source::Recipe
                RawLineRec."Recipe Type" := RawLineRec."Recipe Type"::"Recipe Header";
                RawLineRec."Recipe No." := "No.";
                RawLineRec."Recipe Group" := "Recipe Group";
                RawLineRec.Description := Description;
                RawLineRec."Unit of Measure" := "Unit of Measure";
                RawLineRec.Quantity := 1;
                RawLineRec.VALIDATE("Part Quantity", RawElemRec.Quantity);
                RawLineRec.MODIFY;
                CommentLineRAW.CopyCommentRecipeToEstLine(RawLineRec."Recipe Group", RawLineRec."Recipe No.", 0, RawLineRec);  //DP01086

                RawLineRec.AddLineFromStandardRecipe(
                  RawLineRec."Estimate No.", RawLineRec."Element No.",
                  RawLineRec."Recipe Group", RawLineRec."Recipe No.",
                  RawLineRec."Line No.",
                  RawLineRec."Recipe Type"::"Recipe Line",
                  RawLineRec."Part Quantity",
                  RawLineRec.Source);  //db, 28-11-11: M30177
              UNTIL NEXT = 0;
            END;

          DATABASE::"Recipes by Combination":
            BEGIN
              REPEAT
                TESTFIELD(Blocked, FALSE);
                RcpCombRec.INIT;
                RcpCombRec."Feature Group" := g_code1;
                RcpCombRec."Feature Cluster" := g_code2;
                RcpCombRec."Feature Combination" := g_code3;
                RcpCombRec."Sub-Estimate Level" := g_code4;
                RcpCombRec.Recipe := "No.";
                RcpCombRec."Recipe Group" := "Recipe Group";
                RcpCombRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Budget Line":
            BEGIN
              BudgetLineRec.LOCKTABLE;
              BudgetLineRec.SETRANGE("Project No.",g_code1);
              BudgetLineRec.SETRANGE("Extension Contract",g_code2);
              BudgetLineRec.SETRANGE(Adjustment,g_code3);
              BudgetLineRec.SETRANGE(Option, '');
              IF BudgetLineRec.FINDLAST THEN
                LastLine := BudgetLineRec."Line No.";

              REPEAT
                TESTFIELD(Blocked, FALSE);
                LastLine := LastLine + 10000;
                BudgetLineRec.INIT;
                BudgetLineRec."Project No." := g_code1;
                BudgetLineRec."Extension Contract" := g_code2;
                BudgetLineRec.Adjustment := g_code3;
                BudgetLineRec."Line No." := LastLine;
                BudgetLineRec.Element := g_code4;
                IF g_code1 <> '' THEN BEGIN
                  ProjRec.GET(g_code1);
                  BudgetLineRec."Version Date" := ProjRec."Version Date";
                END;
                IF g_code2 <> '' THEN BEGIN
                  ExtRec.GET(g_code1, g_code2);
                  BudgetLineRec."Version Date" := ExtRec."Version Date";
                END;
                IF g_code3 <> '' THEN BEGIN
                  AdjRec.GET(g_code1, g_code3);
                  BudgetLineRec."Version Date" := AdjRec."Version Date";
                END;
                BudgetLineRec.Recipe := "No.";
                BudgetLineRec."Recipe Group" := "Recipe Group";
                SplitDesc(Description, MAXSTRLEN(BudgetLineRec.Description));  //db, 17-06-10: M19845
                BudgetLineRec.Description := desc1;
                BudgetLineRec."Description 2" := desc2;
                BudgetLineRec."Unit of Measure" := "Unit of Measure";
                BudgetLineRec."Cost Type" := BudgetLineRec."Cost Type"::Sundry;
                BudgetLineRec."Source Type" := BudgetLineRec."Source Type"::"Recipe Header";
                BudgetLineRec.INSERT(TRUE);
                CopyBaseRecipeLine("Recipe Group", "No.", LastLine, LastLine, 1);
                IF RcpQuan <> 0 THEN BEGIN
                  BudgetLineRec.VALIDATE(Quantity, RcpQuan);
                  BudgetLineRec.MODIFY(TRUE);
                END;
              UNTIL NEXT = 0;
            END;

          DATABASE::"Option Budget":
            BEGIN
              BudgetOptionRec.LOCKTABLE;
              BudgetOptionRec.SETRANGE("Project No.",g_code1);
              BudgetOptionRec.SETRANGE("Plot No.",g_code2);
              BudgetOptionRec.SETRANGE(Option,g_code3);
              BudgetOptionRec.SETRANGE("House Model",g_code6);
              BudgetOptionRec.SETRANGE("Main Group",g_code7);
              BudgetOptionRec.SETRANGE(Group,g_code8);
              BudgetOptionRec.SETRANGE("Sub Group",g_code9);
              IF BudgetOptionRec.FINDLAST THEN
                LastLine := BudgetOptionRec."Line No.";

              REPEAT
                TESTFIELD(Blocked, FALSE);
                LastLine := LastLine + 10000;
                BudgetOptionRec.INIT;
                BudgetOptionRec."Project No." := g_code1;
                BudgetOptionRec."Plot No." := g_code2;
                BudgetOptionRec."House Model" := g_code6;
                BudgetOptionRec."Main Group" := g_code7;
                BudgetOptionRec.Group := g_code8;
                BudgetOptionRec."Sub Group" := g_code9;
                BudgetOptionRec.Option := g_code3;
                BudgetOptionRec."Line No." := LastLine;
                BudgetOptionRec.Element := g_code4;
                BudgetOptionRec.Recipe := "No.";
                BudgetOptionRec."Recipe Group" := "Recipe Group";
                SplitDesc(Description, MAXSTRLEN(BudgetOptionRec.Description));  //db, 17-06-10: M19845
                BudgetOptionRec.Description := desc1;
                BudgetOptionRec."Description 2" := desc2;
                BudgetOptionRec."Unit of Measure" := "Unit of Measure";
                BudgetOptionRec."Cost Type" := BudgetOptionRec."Cost Type"::Sundry;
                BudgetOptionRec."Source Type" := BudgetOptionRec."Source Type"::"Recipe Header";
                BudgetOptionRec.INSERT(TRUE);
                CopyBaseRecipeLine("Recipe Group", "No.", LastLine, LastLine, 1);
                IF RcpQuan <> 0 THEN BEGIN
                  BudgetOptionRec.VALIDATE(Quantity, RcpQuan);
                  BudgetOptionRec.MODIFY(TRUE);
                END;
              UNTIL NEXT = 0;
            END;
          ELSE
            MESSAGE(Text001);
        END;
      END;

      gvRcpRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyBaseRecipeLine@1100528901(lvRcpGrp@1210190000 : Code[20];lvRcp@1210190001 : Code[20];VAR LastLine@1100485001 : Integer;HeaderLine@1100525001 : Integer;lvQuan@1100485000 : Decimal);
    VAR
      SaveRcpLineRec@1100525000 : Record 11020582;
      SurchargeQuantity@1100525002 : Decimal;
    BEGIN
      //db, 02-02-09: header line
      SaveRcpLineRec.COPY(BaseRecipeLineRec);  //db, 18-11-09: M17024

      BaseRecipeLineRec.RESET;
      BaseRecipeLineRec.SETRANGE("Recipe Group", lvRcpGrp);
      BaseRecipeLineRec.SETRANGE(Recipe, lvRcp);
      IF BaseRecipeLineRec.FINDSET THEN BEGIN
        REPEAT
          IF BaseRecipeLineRec."Recipe (Child)" <> '' THEN BEGIN
            CopyBaseRecipeLine(BaseRecipeLineRec."Recipe Group (Child)", BaseRecipeLineRec."Recipe (Child)",
              LastLine, HeaderLine, lvQuan*BaseRecipeLineRec.Quantity);
          END ELSE BEGIN
            //db.sn, 20-03-15: C018810
            SurchargeQuantity := 1;
            IF BaseRecipeLineRec.Norm <> 0 THEN BEGIN
              IF BaseRecipeLineRec."Surcharge %" <> 0 THEN
                IF BaseRecipeLineRec."Surcharge Type" = BaseRecipeLineRec."Surcharge Type"::Labor THEN
                  SurchargeQuantity := BaseRecipeLineRec."Surcharge %" / 100;
              SplitBaseRecipeLine(1, LastLine, HeaderLine, lvQuan*BaseRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            IF BaseRecipeLineRec."Cost Type (Price)" = BaseRecipeLineRec."Cost Type (Price)"::Material THEN BEGIN
              IF BaseRecipeLineRec."Surcharge %" <> 0 THEN
                IF BaseRecipeLineRec."Surcharge Type" = BaseRecipeLineRec."Surcharge Type"::Material THEN
                  SurchargeQuantity := BaseRecipeLineRec."Surcharge %" / 100;
              SplitBaseRecipeLine(2, LastLine, HeaderLine, lvQuan*BaseRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            IF BaseRecipeLineRec."Cost Type (Price)" = BaseRecipeLineRec."Cost Type (Price)"::Subcontracting THEN BEGIN
              IF BaseRecipeLineRec."Surcharge %" <> 0 THEN
                IF BaseRecipeLineRec."Surcharge Type" = BaseRecipeLineRec."Surcharge Type"::Subcontracting THEN
                  SurchargeQuantity := BaseRecipeLineRec."Surcharge %" / 100;
              SplitBaseRecipeLine(3, LastLine, HeaderLine, lvQuan*BaseRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            IF BaseRecipeLineRec."Cost Type (Price)" = BaseRecipeLineRec."Cost Type (Price)"::Plant THEN BEGIN
              IF BaseRecipeLineRec."Surcharge %" <> 0 THEN
                IF BaseRecipeLineRec."Surcharge Type" = BaseRecipeLineRec."Surcharge Type"::Plant THEN
                  SurchargeQuantity := BaseRecipeLineRec."Surcharge %" / 100;
              SplitBaseRecipeLine(4, LastLine, HeaderLine, lvQuan*BaseRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            IF BaseRecipeLineRec."Cost Type (Price)" = BaseRecipeLineRec."Cost Type (Price)"::Sundry THEN BEGIN
              IF BaseRecipeLineRec."Surcharge %" <> 0 THEN
                IF BaseRecipeLineRec."Surcharge Type" = BaseRecipeLineRec."Surcharge Type"::Sundry THEN
                  SurchargeQuantity := BaseRecipeLineRec."Surcharge %" / 100;
              SplitBaseRecipeLine(5, LastLine, HeaderLine, lvQuan*BaseRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            //db.en, 20-03-15: C018810
          END;
        UNTIL BaseRecipeLineRec.NEXT = 0;
      END;

      BaseRecipeLineRec.COPY(SaveRcpLineRec);  //db, 18-11-09: M17024
    END;

    PROCEDURE CopyRecipesOLD@1210190000(VAR gvRcpRec@1100485000 : Record 11012155);
    VAR
      lvRcpRec@1100485001 : Record 11012155;
      RawElemRec@1210190000 : Record 11125679;
      LastLine@1100485002 : Integer;
    BEGIN
      lvRcpRec.COPY(gvRcpRec);
      WITH lvRcpRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        LastLine := 0;

        CASE g_table OF
          DATABASE::"Advice Order Line":
            BEGIN
              REPEAT
                TESTFIELD(Blocked, FALSE);
                AdviceRec.INIT;
                AdviceRec."Project No." := g_code1;
                IF g_code2 <> '' THEN   //db, 25-05-10: M19006
                  AdviceRec.VALIDATE("Service Order No.", g_code2);
                AdviceRec.Element := g_code3;
                AdviceRec."Extension Contract" := g_code4;
                IF AdviceRec."Project No." <> '' THEN
                  AdviceRec."Record Type" := AdviceRec."Record Type"::Project;
                IF AdviceRec."Service Order No." <> '' THEN
                  AdviceRec."Record Type" := AdviceRec."Record Type"::ServOrder;
                AdviceRec.InitRecord;  //db, 23-06-09: M15627
                AdviceRec."Purchaser Code" := AdviceRec.GetDefaultPurchaser(g_code1);
                //db.sn, 24-06-11: M15569
                AdviceRec.Recipe := "No.";
                AdviceRec."Recipe Group" := "Recipe Group";
                SplitDesc(Description, MAXSTRLEN(AdviceRec.Description));
                AdviceRec.Description := desc1;
                AdviceRec."Description 2" := desc2;
                AdviceRec."Unit of Measure" := "Unit of Measure";
                AdviceRec."Cost Type" := AdviceRec."Cost Type"::Sundry;
                AdviceRec."Source Type" := AdviceRec."Source Type"::"Recipe Header";
                AdviceRec."Quantity (Advice)" := 1;  //db, 21-12-11: avoid problem with zero-lines; with header all lines are deleted
                AdviceRec.VALIDATE("Line No.", 0);
                AdviceRec.INSERT(TRUE);
                LastLine := AdviceRec."Line No.";
                //db.en, 24-06-11: M15569
                CopyRecipeLineOLD("Recipe Group", "No.", LastLine, LastLine, 1);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Estimate Part Line OLD":  //DP00381
            BEGIN
              OldPartLineRec.LOCKTABLE;
              OldPartLineRec.SETRANGE("Part Group",g_code3);
              OldPartLineRec.SETRANGE(Part,g_code4);
              IF OldPartLineRec.FINDLAST THEN
                LastLine := OldPartLineRec."Line No.";

              REPEAT
                TESTFIELD(Blocked, FALSE);
                LastLine := LastLine + 10000;
                OldPartLineRec.INIT;
                OldPartLineRec."Part Group" := g_code3;
                OldPartLineRec.Part := g_code4;
                OldPartLineRec."Line No." := LastLine;
                OldPartLineRec.Recipe := "No.";
                OldPartLineRec."Recipe Group" := "Recipe Group";
                OldPartLineRec.Description := Description;
                OldPartLineRec."Unit of Measure" := "Unit of Measure";
                OldPartLineRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Estimate Line OLD":  //DP00381
            BEGIN
              OldEstLineRec.LOCKTABLE;
              OldEstLineRec.SETRANGE("Estimate No.", g_code1);
              OldEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
              OldEstLineRec.SETRANGE("Part Group",g_code3);
              OldEstLineRec.SETRANGE(Part,g_code4);
              IF OldEstLineRec.FINDLAST THEN
                LastLine := OldEstLineRec."Line No.";

              REPEAT
                TESTFIELD(Blocked, FALSE);
                LastLine := LastLine + 10000;
                OldEstLineRec.INIT;
                OldEstLineRec."Estimate No." := g_code1;
                OldEstLineRec."Sub-Estimate No." := g_code2;
                OldEstLineRec."Part Group" := g_code3;
                OldEstLineRec.Part := g_code4;
                OldEstLineRec."Line No." := LastLine;
                OldEstLineRec.Recipe := "No.";
                OldEstLineRec."Recipe Group" := "Recipe Group";
                OldEstLineRec.Description := Description;
                OldEstLineRec."Unit of Measure" := "Unit of Measure";
                OldEstLineRec.Manufacturer := Manufacturer;
                OldEstLineRec.CopyRecipe();
                OldEstLineRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Estimate Line (RAW)":  //X001
            BEGIN
              RawLineRec.LOCKTABLE;
              RawLineRec.SETRANGE("Estimate No.", g_code1);
              RawLineRec.SETRANGE("Element No.", g_code2);

              RawElemRec.SETRANGE("Estimate No.", g_code1);
              RawElemRec.SETRANGE("Element No.", g_code2);
              //RawElemRec.SETRANGE(Commitment, TRUE);  //db, 25-10-11: M30062
              RawElemRec.SETFILTER("Construction Spec. Line No.", '00');  //db, 01-12-11: M31258
              IF NOT RawElemRec.FINDSET THEN
                RawElemRec.INIT;

              REPEAT
                TESTFIELD(Blocked, FALSE);
                IF RawLineRec.FINDLAST THEN
                  LastLine := RawLineRec."Line No.";

                RawLineRec.INIT;
                RawLineRec."Estimate No." := g_code1;
                RawLineRec."Element No." := g_code2;
                RawLineRec."Line No." := LastLine + 10000;
                RawLineRec.INSERT(TRUE);
                RawLineRec.Source := RawLineRec.Source::User;  //do not used Source::Recipe
                RawLineRec."Recipe Type" := RawLineRec."Recipe Type"::"Recipe Header";
                RawLineRec."Recipe No." := "No.";
                RawLineRec."Recipe Group" := "Recipe Group";
                RawLineRec.Description := Description;
                RawLineRec."Unit of Measure" := "Unit of Measure";
                RawLineRec.Quantity := 1;
                RawLineRec.VALIDATE("Part Quantity", RawElemRec.Quantity);
                RawLineRec.MODIFY;

                RawLineRec.AddLineFromStandardRecipe(
                  RawLineRec."Estimate No.", RawLineRec."Element No.",
                  RawLineRec."Recipe Group", RawLineRec."Recipe No.",
                  RawLineRec."Line No.",
                  RawLineRec."Recipe Type"::"Recipe Line",
                  RawLineRec."Part Quantity",
                  RawLineRec.Source);  //db, 28-11-11: M30177
              UNTIL NEXT = 0;
            END;

          DATABASE::"Recipes by Combination":
            BEGIN
              REPEAT
                TESTFIELD(Blocked, FALSE);
                RcpCombRec.INIT;
                RcpCombRec."Feature Group" := g_code1;
                RcpCombRec."Feature Cluster" := g_code2;
                RcpCombRec."Feature Combination" := g_code3;
                RcpCombRec."Sub-Estimate Level" := g_code4;
                RcpCombRec.Recipe := "No.";
                RcpCombRec."Recipe Group" := "Recipe Group";
                RcpCombRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Budget Line":
            BEGIN
              BudgetLineRec.LOCKTABLE;
              BudgetLineRec.SETRANGE("Project No.",g_code1);
              BudgetLineRec.SETRANGE("Extension Contract",g_code2);
              BudgetLineRec.SETRANGE(Adjustment,g_code3);
              BudgetLineRec.SETRANGE(Option, '');
              IF BudgetLineRec.FINDLAST THEN
                LastLine := BudgetLineRec."Line No.";

              REPEAT
                TESTFIELD(Blocked, FALSE);
                LastLine := LastLine + 10000;
                BudgetLineRec.INIT;
                BudgetLineRec."Project No." := g_code1;
                BudgetLineRec."Extension Contract" := g_code2;
                BudgetLineRec.Adjustment := g_code3;
                BudgetLineRec."Line No." := LastLine;
                BudgetLineRec.Element := g_code4;
                IF g_code1 <> '' THEN BEGIN
                  ProjRec.GET(g_code1);
                  BudgetLineRec."Version Date" := ProjRec."Version Date";
                END;
                IF g_code2 <> '' THEN BEGIN
                  ExtRec.GET(g_code1, g_code2);
                  BudgetLineRec."Version Date" := ExtRec."Version Date";
                END;
                IF g_code3 <> '' THEN BEGIN
                  AdjRec.GET(g_code1, g_code3);
                  BudgetLineRec."Version Date" := AdjRec."Version Date";
                END;
                BudgetLineRec.Recipe := "No.";
                BudgetLineRec."Recipe Group" := "Recipe Group";
                SplitDesc(Description, MAXSTRLEN(BudgetLineRec.Description));  //db, 17-06-10: M19845
                BudgetLineRec.Description := desc1;
                BudgetLineRec."Description 2" := desc2;
                BudgetLineRec."Unit of Measure" := "Unit of Measure";
                BudgetLineRec."Cost Type" := BudgetLineRec."Cost Type"::Sundry;
                BudgetLineRec."Source Type" := BudgetLineRec."Source Type"::"Recipe Header";
                BudgetLineRec.INSERT(TRUE);
                CopyRecipeLineOLD("Recipe Group", "No.", LastLine, LastLine, 1);
                IF RcpQuan <> 0 THEN BEGIN
                  BudgetLineRec.VALIDATE(Quantity, RcpQuan);
                  BudgetLineRec.MODIFY(TRUE);
                END;
              UNTIL NEXT = 0;
            END;

          DATABASE::"Option Budget":
            BEGIN
              BudgetOptionRec.LOCKTABLE;
              BudgetOptionRec.SETRANGE("Project No.",g_code1);
              BudgetOptionRec.SETRANGE("Plot No.",g_code2);
              BudgetOptionRec.SETRANGE(Option,g_code3);
              BudgetOptionRec.SETRANGE("House Model",g_code6);
              BudgetOptionRec.SETRANGE("Main Group",g_code7);
              BudgetOptionRec.SETRANGE(Group,g_code8);
              BudgetOptionRec.SETRANGE("Sub Group",g_code9);
              IF BudgetOptionRec.FINDLAST THEN
                LastLine := BudgetOptionRec."Line No.";

              REPEAT
                TESTFIELD(Blocked, FALSE);
                LastLine := LastLine + 10000;
                BudgetOptionRec.INIT;
                BudgetOptionRec."Project No." := g_code1;
                BudgetOptionRec."Plot No." := g_code2;
                BudgetOptionRec."House Model" := g_code6;
                BudgetOptionRec."Main Group" := g_code7;
                BudgetOptionRec.Group := g_code8;
                BudgetOptionRec."Sub Group" := g_code9;
                BudgetOptionRec.Option := g_code3;
                BudgetOptionRec."Line No." := LastLine;
                BudgetOptionRec.Element := g_code4;
                BudgetOptionRec.Recipe := "No.";
                BudgetOptionRec."Recipe Group" := "Recipe Group";
                SplitDesc(Description, MAXSTRLEN(BudgetOptionRec.Description));  //db, 17-06-10: M19845
                BudgetOptionRec.Description := desc1;
                BudgetOptionRec."Description 2" := desc2;
                BudgetOptionRec."Unit of Measure" := "Unit of Measure";
                BudgetOptionRec."Cost Type" := BudgetOptionRec."Cost Type"::Sundry;
                BudgetOptionRec."Source Type" := BudgetOptionRec."Source Type"::"Recipe Header";
                BudgetOptionRec.INSERT(TRUE);
                CopyRecipeLineOLD("Recipe Group", "No.", LastLine, LastLine, 1);
                IF RcpQuan <> 0 THEN BEGIN
                  BudgetOptionRec.VALIDATE(Quantity, RcpQuan);
                  BudgetOptionRec.MODIFY(TRUE);
                END;
              UNTIL NEXT = 0;
            END;

          ELSE
            MESSAGE(Text001);
        END;
      END;

      gvRcpRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyRecipeLineOLD@1000000001(lvRcpGrp@1210190000 : Code[20];lvRcp@1210190001 : Code[20];VAR LastLine@1100485001 : Integer;HeaderLine@1100525001 : Integer;lvQuan@1100485000 : Decimal);
    VAR
      SaveRcpLineRec@1100525000 : Record 11012156;
      SurchargeQuantity@1100525002 : Decimal;
    BEGIN
      //db, 02-02-09: header line
      SaveRcpLineRec.COPY(OldRecipeLineRec);  //db, 18-11-09: M17024

      OldRecipeLineRec.RESET;
      OldRecipeLineRec.SETFILTER("Estimate No.", '%1', '');
      OldRecipeLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
      OldRecipeLineRec.SETFILTER("Part Group", '%1', '');
      OldRecipeLineRec.SETFILTER(Part, '%1', '');
      OldRecipeLineRec.SETFILTER("Estimate Line", '%1', 0);
      OldRecipeLineRec.SETRANGE("Recipe Group", lvRcpGrp);
      OldRecipeLineRec.SETRANGE(Recipe, lvRcp);
      IF OldRecipeLineRec.FINDSET THEN BEGIN
        REPEAT
          IF OldRecipeLineRec."Recipe (Child)" <> '' THEN BEGIN
            CopyRecipeLineOLD(OldRecipeLineRec."Recipe Group (Child)", OldRecipeLineRec."Recipe (Child)",
              LastLine, HeaderLine, lvQuan*OldRecipeLineRec.Quantity);
          END ELSE BEGIN
            //db.sn, 20-03-15: C018810
            SurchargeQuantity := 1;
            IF OldRecipeLineRec.Norm <> 0 THEN BEGIN
              IF OldRecipeLineRec."Surcharge %" <> 0 THEN
                IF OldRecipeLineRec."Surcharge Type" = OldRecipeLineRec."Surcharge Type"::Labor THEN
                  SurchargeQuantity := OldRecipeLineRec."Surcharge %" / 100;
              SplitRecipeLineOLD(1, LastLine, HeaderLine, lvQuan*OldRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            IF OldRecipeLineRec."Material Price" <> 0 THEN BEGIN
              IF OldRecipeLineRec."Surcharge %" <> 0 THEN
                IF OldRecipeLineRec."Surcharge Type" = OldRecipeLineRec."Surcharge Type"::Material THEN
                  SurchargeQuantity := OldRecipeLineRec."Surcharge %" / 100;
              SplitRecipeLineOLD(2, LastLine, HeaderLine, lvQuan*OldRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            IF OldRecipeLineRec."Subcontracting Price" <> 0 THEN BEGIN
              IF OldRecipeLineRec."Surcharge %" <> 0 THEN
                IF OldRecipeLineRec."Surcharge Type" = OldRecipeLineRec."Surcharge Type"::Subcontracting THEN
                  SurchargeQuantity := OldRecipeLineRec."Surcharge %" / 100;
              SplitRecipeLineOLD(3, LastLine, HeaderLine, lvQuan*OldRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            IF OldRecipeLineRec."Plant Price" <> 0 THEN BEGIN
              IF OldRecipeLineRec."Surcharge %" <> 0 THEN
                IF OldRecipeLineRec."Surcharge Type" = OldRecipeLineRec."Surcharge Type"::Plant THEN
                  SurchargeQuantity := OldRecipeLineRec."Surcharge %" / 100;
              SplitRecipeLineOLD(4, LastLine, HeaderLine, lvQuan*OldRecipeLineRec.Quantity*SurchargeQuantity);
            END;
            //db.en, 20-03-15: C018810
            IF (OldRecipeLineRec.Norm = 0) AND
               (OldRecipeLineRec."Material Price" = 0) AND
               (OldRecipeLineRec."Subcontracting Price" = 0) AND
               (OldRecipeLineRec."Plant Price" = 0) THEN
              IF OldRecipeLineRec."Item No." + OldRecipeLineRec."Basic Item" + OldRecipeLineRec."Trade Item" <> '' THEN
                SplitRecipeLineOLD(2, LastLine, HeaderLine, lvQuan*OldRecipeLineRec.Quantity)
              ELSE
                SplitRecipeLineOLD(0, LastLine, HeaderLine, lvQuan*OldRecipeLineRec.Quantity);
          END;
        UNTIL OldRecipeLineRec.NEXT = 0;
      END;

      OldRecipeLineRec.COPY(SaveRcpLineRec);  //db, 18-11-09: M17024
    END;

    PROCEDURE SplitRecipeLineOLD@11012006(CostTypeInt@1000000000 : Integer;VAR LastLine@1100485000 : Integer;HeaderLine@1100525001 : Integer;lvQuan@1100485002 : Decimal);
    VAR
      OptionLineRec@1210190000 : Record 11012503;
      lvAdviceRec@1100485001 : Record 11012055;
      lvBudgetLineRec@1100525000 : Record 11012001;
    BEGIN
      //db, 02-02-09: header line
      CASE g_table OF
        DATABASE::"Advice Order Line":
          BEGIN
            IF CostTypeInt = 1 THEN EXIT;
            lvAdviceRec := AdviceRec;
            //db.sn, 24-06-11: M15569
            lvAdviceRec."Source Type" := lvAdviceRec."Source Type"::"Recipe Line";
            lvAdviceRec."Attached to Line No." := HeaderLine;
            //db.en, 24-06-11: M15569
            //lvAdviceRec."Quantity (Advice)" := OldRecipeLineRec.Quantity;
            lvAdviceRec."Quantity (Advice)" := lvQuan;  //db, 18-11-09: M17024
            lvAdviceRec."Unit of Measure" := OldRecipeLineRec."Unit of Measure";
            SplitDesc(OldRecipeLineRec.Description, MAXSTRLEN(lvAdviceRec.Description));
            lvAdviceRec.Description := desc1;
            lvAdviceRec."Description 2" := desc2;
            lvAdviceRec."Cost Component" := OldRecipeLineRec."Cost Component";
            lvAdviceRec."Price Agreement" := OldRecipeLineRec."Price Agreement";
            IF OldRecipeLineRec.Element <> '' THEN
              lvAdviceRec.Element := OldRecipeLineRec.Element;  //db, 26-11-08: M13466

            CASE CostTypeInt OF
              2:BEGIN
                  lvAdviceRec."Vendor (Trade Item)" := OldRecipeLineRec."Vendor (Trade Item)";
                  lvAdviceRec.Manufacturer := OldRecipeLineRec.Manufacturer;
                  IF OldRecipeLineRec."Trade Item" <> '' THEN
                    lvAdviceRec.VALIDATE("Trade Item", OldRecipeLineRec."Trade Item")
                  ELSE
                    IF OldRecipeLineRec."Basic Item" <> '' THEN
                      lvAdviceRec.VALIDATE("Basic Item", OldRecipeLineRec."Basic Item")
                    ELSE
                      IF OldRecipeLineRec."Item No." <> '' THEN
                        lvAdviceRec.VALIDATE("Item No.", OldRecipeLineRec."Item No.")
                      ELSE
                        lvAdviceRec.Price := OldRecipeLineRec."Material Price";
                  IF lvAdviceRec."Price Agreement" THEN
                    lvAdviceRec.VALIDATE(Price, OldRecipeLineRec."Material Price");
                  lvAdviceRec."Cost Type" := lvAdviceRec."Cost Type"::Material;
                  lvAdviceRec."Cost Object" := OldRecipeLineRec."Cost Object Material";
                  IF OldRecipeLineRec.Vendor <> '' THEN  //db, 11-11-09: M16996
                    lvAdviceRec.Vendor := OldRecipeLineRec.Vendor;
                  //db.sn, 18-01-11: M25004
                  lvAdviceRec."Scheme Code" := OldRecipeLineRec."Scheme Code";
                  lvAdviceRec."Comments for Logistics" := OldRecipeLineRec."Comments for Logistics";
                  //db.en, 18-01-11: M25004
                END;
              3:BEGIN
                  lvAdviceRec.Price := OldRecipeLineRec."Subcontracting Price";
                  lvAdviceRec."Cost Type" := lvAdviceRec."Cost Type"::Subcontracting;
                  lvAdviceRec."Cost Object" := OldRecipeLineRec."Cost Object Subcontracting";
                  lvAdviceRec.Vendor := OldRecipeLineRec.Subcontractor;
                END;
              4:BEGIN
                  lvAdviceRec.Price := OldRecipeLineRec."Plant Price";
                  lvAdviceRec."Cost Type" := lvAdviceRec."Cost Type"::Plant;
                  lvAdviceRec."Cost Object" := OldRecipeLineRec."Cost Object Plant";
                END;
            END;
            lvAdviceRec.VALIDATE("External Text", OldRecipeLineRec."External Text");
            lvAdviceRec.VALIDATE("Line No.", 0);
            lvAdviceRec.INSERT(TRUE);
          END;

        DATABASE::"Budget Line":
          BEGIN
            lvBudgetLineRec := BudgetLineRec;
            lvBudgetLineRec."Source Type" := lvBudgetLineRec."Source Type"::"Recipe Line";
            lvBudgetLineRec."Attached to Recipe Line" := HeaderLine;
            //lvBudgetLineRec.Quantity := OldRecipeLineRec.Quantity;
            lvBudgetLineRec.Quantity := lvQuan;  //db, 18-11-09: M17024
            lvBudgetLineRec."Unit of Measure" := OldRecipeLineRec."Unit of Measure";
            lvBudgetLineRec."Time Quantity" := OldRecipeLineRec."Time Quantity";
            lvBudgetLineRec."Unit of Time" := OldRecipeLineRec."Unit of Time";
            SplitDesc(OldRecipeLineRec.Description, MAXSTRLEN(lvBudgetLineRec.Description));
            lvBudgetLineRec.Description := desc1;
            lvBudgetLineRec."Description 2" := desc2;
            lvBudgetLineRec."Cost Component" := OldRecipeLineRec."Cost Component";
            IF OldRecipeLineRec.Element <> '' THEN
              lvBudgetLineRec.Element := OldRecipeLineRec.Element;

            lvBudgetLineRec."Line No." := LastLine + 10000;
            LastLine := lvBudgetLineRec."Line No.";

            CASE CostTypeInt OF
              1:BEGIN
                  IF OldRecipeLineRec."Rate Type" = OldRecipeLineRec."Rate Type"::Minuts THEN
                    IF OldRecipeLineRec."Team Size" <> 0 THEN
                      lvBudgetLineRec.Norm := ROUND(OldRecipeLineRec.Norm * OldRecipeLineRec."Team Size" / 60, 0.00001)
                    ELSE
                      lvBudgetLineRec.Norm := ROUND(OldRecipeLineRec.Norm / 60, 0.00001)
                  ELSE
                    lvBudgetLineRec.Norm := OldRecipeLineRec.Norm;
                  IF lvBudgetLineRec.Norm * lvBudgetLineRec.Quantity <> 0 THEN
                    lvBudgetLineRec.Rate :=
                      ROUND(OldRecipeLineRec."Labor Amount" / (lvBudgetLineRec.Norm * lvBudgetLineRec.Quantity), 0.00001);
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Labor;
                  lvBudgetLineRec."Cost Object" := OldRecipeLineRec."Cost Object Labor";
                END;
              2:BEGIN
                  lvBudgetLineRec."Item No." := OldRecipeLineRec."Item No.";
                  lvBudgetLineRec."Basic Item" := OldRecipeLineRec."Basic Item";
                  lvBudgetLineRec."Trade Item" := OldRecipeLineRec."Trade Item";
                  lvBudgetLineRec."Vendor (Trade Item)" := OldRecipeLineRec."Vendor (Trade Item)";
                  lvBudgetLineRec.Manufacturer := OldRecipeLineRec.Manufacturer;
                  //db.sn, 20-03-15: C018810
                  lvBudgetLineRec."Gross Price" := OldRecipeLineRec."Gross Price";
                  lvBudgetLineRec."Discount %" := OldRecipeLineRec."Purchase Discount %";
                  //db.en, 20-03-15: C018810
                  lvBudgetLineRec.Price := OldRecipeLineRec."Material Price";
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Material;
                  lvBudgetLineRec."Cost Object" := OldRecipeLineRec."Cost Object Material";
                  //db.sn, 18-01-11: M25004
                  lvBudgetLineRec."Scheme Code" := OldRecipeLineRec."Scheme Code";
                  lvBudgetLineRec."Comments for Logistics" := OldRecipeLineRec."Comments for Logistics";
                  lvBudgetLineRec.Comments := OldRecipeLineRec.Comments;
                  lvBudgetLineRec.Supply := OldRecipeLineRec.Supply;
                  lvBudgetLineRec."Material Sheet" := OldRecipeLineRec."Material Sheet";
                  //db.en, 18-01-11: M25004
                END;
              3:BEGIN
                  lvBudgetLineRec.Price := OldRecipeLineRec."Subcontracting Price";
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Subcontracting;
                  lvBudgetLineRec."Cost Object" := OldRecipeLineRec."Cost Object Subcontracting";
                END;
              4:BEGIN
                  lvBudgetLineRec.Price := OldRecipeLineRec."Plant Price";
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Plant;
                  lvBudgetLineRec."Cost Object" := OldRecipeLineRec."Cost Object Plant";
                END;
            END;
            lvBudgetLineRec.CalcTotals;
            lvBudgetLineRec.INSERT(TRUE);
          END;

        DATABASE::"Option Budget":
          BEGIN
            OptionLineRec := BudgetOptionRec;
            OptionLineRec."Source Type" := OptionLineRec."Source Type"::"Recipe Line";
            OptionLineRec."Attached to Recipe Line" := HeaderLine;
            //OptionLineRec.Quantity := OldRecipeLineRec.Quantity;
            OptionLineRec.Quantity := lvQuan;  //db, 18-11-09: M17024
            OptionLineRec."Unit of Measure" := OldRecipeLineRec."Unit of Measure";
            OptionLineRec."Time Quantity" := OldRecipeLineRec."Time Quantity";
            OptionLineRec."Unit of Time" := OldRecipeLineRec."Unit of Time";
            SplitDesc(OldRecipeLineRec.Description, MAXSTRLEN(OptionLineRec.Description));
            OptionLineRec.Description := desc1;
            OptionLineRec."Description 2" := desc2;
            OptionLineRec."Cost Component" := OldRecipeLineRec."Cost Component";
            IF OldRecipeLineRec.Element <> '' THEN
              OptionLineRec.Element := OldRecipeLineRec.Element;  //db, 26-11-08: M13466

            OptionLineRec."Line No." := LastLine + 10000;
            LastLine := OptionLineRec."Line No.";

            CASE CostTypeInt OF
              1:BEGIN
                  IF OldRecipeLineRec."Rate Type" = OldRecipeLineRec."Rate Type"::Minuts THEN
                    IF OldRecipeLineRec."Team Size" <> 0 THEN
                      OptionLineRec.Norm := ROUND(OldRecipeLineRec.Norm * OldRecipeLineRec."Team Size" / 60, 0.00001)
                    ELSE
                      OptionLineRec.Norm := ROUND(OldRecipeLineRec.Norm / 60, 0.00001)
                  ELSE
                    OptionLineRec.Norm := OldRecipeLineRec.Norm;
                  IF OptionLineRec.Norm * OptionLineRec.Quantity <> 0 THEN
                    OptionLineRec.Rate :=
                      ROUND(OldRecipeLineRec."Labor Amount" / (OptionLineRec.Norm * OptionLineRec.Quantity), 0.00001);
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Labor;
                  OptionLineRec."Cost Object" := OldRecipeLineRec."Cost Object Labor";
                END;
              2:BEGIN
                  OptionLineRec."Item No." := OldRecipeLineRec."Item No.";
                  OptionLineRec."Basic Item" := OldRecipeLineRec."Basic Item";
                  OptionLineRec."Trade Item" := OldRecipeLineRec."Trade Item";
                  OptionLineRec."Vendor (Trade Item)" := OldRecipeLineRec."Vendor (Trade Item)";
                  OptionLineRec.Manufacturer := OldRecipeLineRec.Manufacturer;
                  OptionLineRec.Price := OldRecipeLineRec."Material Price";
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Material;
                  OptionLineRec."Cost Object" := OldRecipeLineRec."Cost Object Material";
                END;
              3:BEGIN
                  OptionLineRec.Price := OldRecipeLineRec."Subcontracting Price";
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Subcontracting;
                  OptionLineRec."Cost Object" := OldRecipeLineRec."Cost Object Subcontracting";
                END;
              4:BEGIN
                  OptionLineRec.Price := OldRecipeLineRec."Plant Price";
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Plant;
                  OptionLineRec."Cost Object" := OldRecipeLineRec."Cost Object Plant";
                END;
            END;
            OptionLineRec.CalcTotals;
            OptionLineRec.INSERT(TRUE);
          END;
        ELSE
          MESSAGE(Text001);
      END;
    END;

    PROCEDURE SplitBaseRecipeLine@1100528902(CostTypeInt@1000000000 : Integer;VAR LastLine@1100485000 : Integer;HeaderLine@1100525001 : Integer;lvQuan@1100485002 : Decimal);
    VAR
      OptionLineRec@1210190000 : Record 11012503;
      lvAdviceRec@1100485001 : Record 11012055;
      lvBudgetLineRec@1100525000 : Record 11012001;
    BEGIN
      //db, 02-02-09: header line
      CASE g_table OF
        DATABASE::"Advice Order Line":
          BEGIN
            IF CostTypeInt = 1 THEN EXIT;
            lvAdviceRec := AdviceRec;
            //db.sn, 24-06-11: M15569
            lvAdviceRec."Source Type" := lvAdviceRec."Source Type"::"Recipe Line";
            lvAdviceRec."Attached to Line No." := HeaderLine;
            //db.en, 24-06-11: M15569
            //lvAdviceRec."Quantity (Advice)" := BaseRecipeLineRec.Quantity;
            lvAdviceRec."Quantity (Advice)" := lvQuan;  //db, 18-11-09: M17024
            lvAdviceRec."Unit of Measure" := BaseRecipeLineRec."Unit of Measure";
            SplitDesc(BaseRecipeLineRec.Description, MAXSTRLEN(lvAdviceRec.Description));
            lvAdviceRec.Description := desc1;
            lvAdviceRec."Description 2" := desc2;
            lvAdviceRec."Cost Component" := BaseRecipeLineRec."Cost Component";
            lvAdviceRec."Price Agreement" := BaseRecipeLineRec."Price Agreement";
            IF BaseRecipeLineRec.Element <> '' THEN
              lvAdviceRec.Element := BaseRecipeLineRec.Element;  //db, 26-11-08: M13466

            CASE CostTypeInt OF
              2:BEGIN
                  lvAdviceRec."Vendor (Trade Item)" := BaseRecipeLineRec."Vendor (Trade Item)";
                  lvAdviceRec.Manufacturer := BaseRecipeLineRec.Manufacturer;
                  IF BaseRecipeLineRec."Trade Item" <> '' THEN
                    lvAdviceRec.VALIDATE("Trade Item", BaseRecipeLineRec."Trade Item")
                  ELSE
                    IF BaseRecipeLineRec."Basic Item" <> '' THEN
                      lvAdviceRec.VALIDATE("Basic Item", BaseRecipeLineRec."Basic Item")
                    ELSE
                      IF BaseRecipeLineRec."Item No." <> '' THEN
                        lvAdviceRec.VALIDATE("Item No.", BaseRecipeLineRec."Item No.")
                      ELSE
                        lvAdviceRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  IF lvAdviceRec."Price Agreement" THEN
                    lvAdviceRec.VALIDATE(Price, BaseRecipeLineRec."Nett Cost Price");
                  lvAdviceRec."Cost Type" := lvAdviceRec."Cost Type"::Material;
                  lvAdviceRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                  IF BaseRecipeLineRec.Vendor <> '' THEN  //db, 11-11-09: M16996
                    lvAdviceRec.Vendor := BaseRecipeLineRec.Vendor;
                  //db.sn, 18-01-11: M25004
                  lvAdviceRec."Scheme Code" := BaseRecipeLineRec."Scheme Code";
                  lvAdviceRec."Comments for Logistics" := BaseRecipeLineRec."Comments for Logistics";
                  //db.en, 18-01-11: M25004
                END;
              3:BEGIN
                  lvAdviceRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  lvAdviceRec."Cost Type" := lvAdviceRec."Cost Type"::Subcontracting;
                  lvAdviceRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                  lvAdviceRec.Vendor := BaseRecipeLineRec.Subcontractor;
                END;
              4:BEGIN
                  lvAdviceRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  lvAdviceRec."Cost Type" := lvAdviceRec."Cost Type"::Plant;
                  lvAdviceRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
              5:BEGIN
                  lvAdviceRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  lvAdviceRec."Cost Type" := lvAdviceRec."Cost Type"::Sundry;
                  lvAdviceRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
            END;
            lvAdviceRec.VALIDATE("External Text", BaseRecipeLineRec."External Text");
            lvAdviceRec.VALIDATE("Line No.", 0);
            lvAdviceRec.INSERT(TRUE);
          END;

        DATABASE::"Budget Line":
          BEGIN
            lvBudgetLineRec := BudgetLineRec;
            lvBudgetLineRec."Source Type" := lvBudgetLineRec."Source Type"::"Recipe Line";
            lvBudgetLineRec."Attached to Recipe Line" := HeaderLine;
            //lvBudgetLineRec.Quantity := BaseRecipeLineRec.Quantity;
            lvBudgetLineRec.Quantity := lvQuan;  //db, 18-11-09: M17024
            lvBudgetLineRec."Unit of Measure" := BaseRecipeLineRec."Unit of Measure";
            lvBudgetLineRec."Time Quantity" := BaseRecipeLineRec."Time Quantity";
            lvBudgetLineRec."Unit of Time" := BaseRecipeLineRec."Unit of Time";
            SplitDesc(BaseRecipeLineRec.Description, MAXSTRLEN(lvBudgetLineRec.Description));
            lvBudgetLineRec.Description := desc1;
            lvBudgetLineRec."Description 2" := desc2;
            lvBudgetLineRec."Cost Component" := BaseRecipeLineRec."Cost Component";
            IF BaseRecipeLineRec.Element <> '' THEN
              lvBudgetLineRec.Element := BaseRecipeLineRec.Element;

            lvBudgetLineRec."Line No." := LastLine + 10000;
            LastLine := lvBudgetLineRec."Line No.";

            CASE CostTypeInt OF
              1:BEGIN
                  IF BaseRecipeLineRec."Rate Type" = BaseRecipeLineRec."Rate Type"::Minuts THEN
                    IF BaseRecipeLineRec."Team Size" <> 0 THEN
                      lvBudgetLineRec.Norm := ROUND(BaseRecipeLineRec.Norm * BaseRecipeLineRec."Team Size" / 60, 0.00001)
                    ELSE
                      lvBudgetLineRec.Norm := ROUND(BaseRecipeLineRec.Norm / 60, 0.00001)
                  ELSE
                    lvBudgetLineRec.Norm := BaseRecipeLineRec.Norm;
                  IF lvBudgetLineRec.Norm * lvBudgetLineRec.Quantity <> 0 THEN
                    lvBudgetLineRec.Rate :=
                      ROUND(BaseRecipeLineRec."Labor Amount" / (lvBudgetLineRec.Norm * lvBudgetLineRec.Quantity), 0.00001);
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Labor;
                  lvBudgetLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Labor";
                END;
              2:BEGIN
                  lvBudgetLineRec."Item No." := BaseRecipeLineRec."Item No.";
                  lvBudgetLineRec."Basic Item" := BaseRecipeLineRec."Basic Item";
                  lvBudgetLineRec."Trade Item" := BaseRecipeLineRec."Trade Item";
                  lvBudgetLineRec."Vendor (Trade Item)" := BaseRecipeLineRec."Vendor (Trade Item)";
                  lvBudgetLineRec.Manufacturer := BaseRecipeLineRec.Manufacturer;
                  //db.sn, 20-03-15: C018810
                  lvBudgetLineRec."Gross Price" := BaseRecipeLineRec."Gross Price";
                  lvBudgetLineRec."Discount %" := BaseRecipeLineRec."Purchase Discount %";
                  //db.en, 20-03-15: C018810
                  lvBudgetLineRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Material;
                  lvBudgetLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                  //db.sn, 18-01-11: M25004
                  lvBudgetLineRec."Scheme Code" := BaseRecipeLineRec."Scheme Code";
                  lvBudgetLineRec."Comments for Logistics" := BaseRecipeLineRec."Comments for Logistics";
                  lvBudgetLineRec.Comments := BaseRecipeLineRec.Comments;
                  lvBudgetLineRec.Supply := BaseRecipeLineRec.Supply;
                  lvBudgetLineRec."Material Sheet" := BaseRecipeLineRec."Material Sheet";
                  //db.en, 18-01-11: M25004
                END;
              3:BEGIN
                  lvBudgetLineRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Subcontracting;
                  lvBudgetLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
              4:BEGIN
                  lvBudgetLineRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Plant;
                  lvBudgetLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
              5:BEGIN
                  lvBudgetLineRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  lvBudgetLineRec."Cost Type" := lvBudgetLineRec."Cost Type"::Sundry;
                  lvBudgetLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
            END;
            lvBudgetLineRec.CalcTotals;
            lvBudgetLineRec.INSERT(TRUE);
          END;

        DATABASE::"Option Budget":
          BEGIN
            OptionLineRec := BudgetOptionRec;
            OptionLineRec."Source Type" := OptionLineRec."Source Type"::"Recipe Line";
            OptionLineRec."Attached to Recipe Line" := HeaderLine;
            //OptionLineRec.Quantity := BaseRecipeLineRec.Quantity;
            OptionLineRec.Quantity := lvQuan;  //db, 18-11-09: M17024
            OptionLineRec."Unit of Measure" := BaseRecipeLineRec."Unit of Measure";
            OptionLineRec."Time Quantity" := BaseRecipeLineRec."Time Quantity";
            OptionLineRec."Unit of Time" := BaseRecipeLineRec."Unit of Time";
            SplitDesc(BaseRecipeLineRec.Description, MAXSTRLEN(OptionLineRec.Description));
            OptionLineRec.Description := desc1;
            OptionLineRec."Description 2" := desc2;
            OptionLineRec."Cost Component" := BaseRecipeLineRec."Cost Component";
            IF BaseRecipeLineRec.Element <> '' THEN
              OptionLineRec.Element := BaseRecipeLineRec.Element;  //db, 26-11-08: M13466

            OptionLineRec."Line No." := LastLine + 10000;
            LastLine := OptionLineRec."Line No.";

            CASE CostTypeInt OF
              1:BEGIN
                  IF BaseRecipeLineRec."Rate Type" = BaseRecipeLineRec."Rate Type"::Minuts THEN
                    IF BaseRecipeLineRec."Team Size" <> 0 THEN
                      OptionLineRec.Norm := ROUND(BaseRecipeLineRec.Norm * BaseRecipeLineRec."Team Size" / 60, 0.00001)
                    ELSE
                      OptionLineRec.Norm := ROUND(BaseRecipeLineRec.Norm / 60, 0.00001)
                  ELSE
                    OptionLineRec.Norm := BaseRecipeLineRec.Norm;
                  IF OptionLineRec.Norm * OptionLineRec.Quantity <> 0 THEN
                    OptionLineRec.Rate :=
                      ROUND(BaseRecipeLineRec."Labor Amount" / (OptionLineRec.Norm * OptionLineRec.Quantity), 0.00001);
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Labor;
                  OptionLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Labor";
                END;
              2:BEGIN
                  OptionLineRec."Item No." := BaseRecipeLineRec."Item No.";
                  OptionLineRec."Basic Item" := BaseRecipeLineRec."Basic Item";
                  OptionLineRec."Trade Item" := BaseRecipeLineRec."Trade Item";
                  OptionLineRec."Vendor (Trade Item)" := BaseRecipeLineRec."Vendor (Trade Item)";
                  OptionLineRec.Manufacturer := BaseRecipeLineRec.Manufacturer;
                  OptionLineRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Material;
                  OptionLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
              3:BEGIN
                  OptionLineRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Subcontracting;
                  OptionLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
              4:BEGIN
                  OptionLineRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Plant;
                  OptionLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
              5:BEGIN
                  OptionLineRec.Price := BaseRecipeLineRec."Nett Cost Price";
                  OptionLineRec."Cost Type" := OptionLineRec."Cost Type"::Sundry;
                  OptionLineRec."Cost Object" := BaseRecipeLineRec."Cost Object Price";
                END;
            END;
            OptionLineRec.CalcTotals;
            OptionLineRec.INSERT(TRUE);
          END;
        ELSE
          MESSAGE(Text001);
      END;
    END;

    PROCEDURE ReplaceRecipe@1210190001(lvAction@1210190001 : Integer);
    VAR
      OptionLineRec@1210190000 : Record 11012503;
      TmpOptionLineRec@1210190003 : TEMPORARY Record 11012503;
      RcpRec@1100485000 : Record 11020581;
    BEGIN
      OptionLineRec.RESET;
      IF lvAction = 1 THEN BEGIN
        //standard option (all)
        OptionLineRec.SETFILTER("Project No.", '%1', '');
        OptionLineRec.SETFILTER(Option, '<>%1', '');
        IF g_code4 <> '' THEN
          OptionLineRec.SETFILTER("Recipe Group", g_code4);
        IF g_code5 <> '' THEN
          OptionLineRec.SETFILTER(Recipe, g_code5);
      END;
      IF lvAction = 2 THEN BEGIN
        //project option (all)
        OptionLineRec.SETFILTER("Project No.", '<>%1', '');
        OptionLineRec.SETFILTER(Option, '<>%1', '');
        IF g_code4 <> '' THEN
          OptionLineRec.SETFILTER("Recipe Group", g_code4);
        IF g_code5 <> '' THEN
          OptionLineRec.SETFILTER(Recipe, g_code5);
      END;
      IF lvAction = 3 THEN BEGIN
        //specified option (std/prj/plot)
        IF g_code1 <> '' THEN
          OptionLineRec.SETRANGE("Project No.", g_code1)
        ELSE
          OptionLineRec.SETFILTER("Project No.", '%1', '');

        IF g_code2 <> '' THEN
          OptionLineRec.SETRANGE("Plot No.", g_code2)
        ELSE
          OptionLineRec.SETFILTER("Plot No.", '%1', '');
        IF g_code3 <> '' THEN
          OptionLineRec.SETRANGE(Option, g_code3);
        IF g_code6 <> '' THEN
          OptionLineRec.SETRANGE("House Model", g_code6);
        IF g_code7 <> '' THEN
          OptionLineRec.SETRANGE("Main Group", g_code7);
        IF g_code8 <> '' THEN
          OptionLineRec.SETRANGE(Group, g_code8);
        IF g_code9 <> '' THEN
          OptionLineRec.SETRANGE("Sub Group", g_code9);

        OptionLineRec.SETFILTER("Recipe Group", '<>%1', '');
        OptionLineRec.SETFILTER(Recipe, '<>%1', '');
      END;
      OptionLineRec.SETRANGE("Source Type", OptionLineRec."Source Type"::"Recipe Header");

      TmpOptionLineRec.RESET;
      IF OptionLineRec.FINDSET THEN BEGIN
        REPEAT
          TmpOptionLineRec := OptionLineRec;
          TmpOptionLineRec.INSERT;
        UNTIL OptionLineRec.NEXT = 0;
        OptionLineRec.DELETEALL(TRUE);
      END;

      IF TmpOptionLineRec.FIND('-') THEN BEGIN
        REPEAT
          RcpRec.GET(TmpOptionLineRec."Recipe Group", TmpOptionLineRec.Recipe);
          RcpRec.MARK := TRUE;
          RcpRec.SETRECFILTER; //To prevent that all recipes are copied in RTC.
          g_code1 := TmpOptionLineRec."Project No.";
          g_code2 := TmpOptionLineRec."Plot No.";
          g_code3 := TmpOptionLineRec.Option;
          g_code4 := TmpOptionLineRec.Element;
          g_code6 := TmpOptionLineRec."House Model";
          g_code7 := TmpOptionLineRec."Main Group";
          g_code8 := TmpOptionLineRec.Group;
          g_code9 := TmpOptionLineRec."Sub Group";
          RcpQuan := TmpOptionLineRec.Quantity;
          CopyBaseRecipes(RcpRec);  //DP00381
          RcpQuan := 0;
        UNTIL TmpOptionLineRec.NEXT = 0;
        TmpOptionLineRec.DELETEALL;
      END;

      COMMIT;
    END;

    PROCEDURE CopyEstPartsOLD@1(VAR gvPartRec@1100485000 : Record 11012169);
    VAR
      lvPartRec@1100485001 : Record 11012169;
      EstRec@1210190001 : Record 11012151;
      EstPartRec@11012000 : Record 11012153;
      StdPartRec@11012001 : Record 11012169;
      EstLineRec@1210190000 : Record 11012154;
      MarkedLevel@11012002 : Integer;
    BEGIN
      EstRec.GET(g_code1);
      EstRec.TESTFIELD(Fixed, FALSE);

      IF g_table = DATABASE::"Configurator Part" THEN BEGIN
        CopyEstConfigurator(gvPartRec);
        EXIT;
      END;

      lvPartRec.COPY(gvPartRec);
      WITH lvPartRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        IF ShowProgress THEN  //db, 02-07-10: M19985
          Status.OPEN(Text010);  //db, 08-06-10: M19367
        REPEAT
          IF ShowProgress THEN  //db, 02-07-10: M19985
            Status.UPDATE(1,Code);  //db, 08-06-10: M19367
          IF NOT EstPartRec.GET(g_code1, g_code2, "Part Group", Code) THEN BEGIN
            EstPartRec.INIT;
            EstPartRec."Estimate No." := g_code1;
            EstPartRec."Sub-Estimate No." := g_code2;
            EstPartRec."Part Group" := "Part Group";
            EstPartRec.VALIDATE(Part, Code);
            EstPartRec.VALIDATE("Excel Estimate Template",lvPartRec."Excel Estimate Template");
            EstPartRec.INSERT(TRUE);
            EstLineRec.CopyPartLines(EstPartRec,OldPartLineRec,FALSE);
          END;

          IF (Level = 1) OR (Level = 2) THEN BEGIN
            StdPartRec.RESET;
            StdPartRec.SETRANGE("Part Group", "Part Group");
            IF Level = 1 THEN StdPartRec.SETRANGE(Chapter, Code);
            IF Level = 2 THEN StdPartRec.SETRANGE(Paragraph, Code);
            IF StdPartRec.FINDSET THEN BEGIN
              REPEAT
                IF ShowProgress THEN  //db, 02-07-10: M19985
                  Status.UPDATE(1,StdPartRec.Code);  //db, 08-06-10: M19367
                IF NOT EstPartRec.GET(g_code1, g_code2, StdPartRec."Part Group", StdPartRec.Code) THEN BEGIN
                  EstPartRec.INIT;
                  EstPartRec."Estimate No." := g_code1;
                  EstPartRec."Sub-Estimate No." := g_code2;
                  EstPartRec."Part Group"  := StdPartRec."Part Group";
                  EstPartRec.VALIDATE(Part, StdPartRec.Code);
                  EstPartRec.VALIDATE("Excel Estimate Template",StdPartRec."Excel Estimate Template");
                  EstPartRec.INSERT(TRUE);
                  EstLineRec.CopyPartLines(EstPartRec,OldPartLineRec,FALSE);
                END;
              UNTIL StdPartRec.NEXT = 0;
            END;
          END;

          MarkedLevel := Level;
          REPEAT
            StdPartRec.RESET;
            StdPartRec.SETRANGE("Part Group", "Part Group");
            IF MarkedLevel = 1 THEN StdPartRec.SETRANGE(Level, 0);
            IF MarkedLevel = 2 THEN StdPartRec.SETRANGE(Code, Chapter);
            IF MarkedLevel = 3 THEN StdPartRec.SETRANGE(Code, Paragraph);
            IF StdPartRec.FINDSET THEN BEGIN
              REPEAT
                IF ShowProgress THEN  //db, 02-07-10: M19985
                  Status.UPDATE(1,StdPartRec.Code);  //db, 08-06-10: M19367
                IF NOT EstPartRec.GET(g_code1, g_code2, StdPartRec."Part Group", StdPartRec.Code) THEN BEGIN
                  EstPartRec.INIT;
                  EstPartRec."Estimate No." := g_code1;
                  EstPartRec."Sub-Estimate No." := g_code2;
                  EstPartRec."Part Group" := StdPartRec."Part Group";
                  EstPartRec.VALIDATE(Part, StdPartRec.Code);
                  EstPartRec.VALIDATE("Excel Estimate Template",StdPartRec."Excel Estimate Template");
                  EstPartRec.INSERT(TRUE);
                  EstLineRec.CopyPartLines(EstPartRec,OldPartLineRec,FALSE);
                END;
              UNTIL StdPartRec.NEXT = 0;
            END;
            IF MarkedLevel > 0 THEN
              MarkedLevel := MarkedLevel - 1;
          UNTIL MarkedLevel = 0;
        UNTIL NEXT = 0;
        IF ShowProgress THEN  //db, 02-07-10: M19985
          Status.CLOSE;  //db, 08-06-10: M19367
      END;

      gvPartRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyEstPartsNEW@1100528903(VAR gvPartRec@1100485000 : Record 11012169);
    VAR
      lvPartRec@1100485001 : Record 11012169;
      EstRec@1210190001 : Record 11012151;
      EstPartRec@11012000 : Record 11072073;
      StdPartRec@11012001 : Record 11012169;
      EstLineRec@1210190000 : Record 11072072;
      MarkedLevel@11012002 : Integer;
      NewPartRec@1100409002 : Record 11229768;
      NewPart@1100409001 : Code[20];
    BEGIN
      EstRec.GET(g_code1);
      EstRec.TESTFIELD(Fixed, FALSE);

      lvPartRec.COPY(gvPartRec);
      WITH lvPartRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        IF ShowProgress THEN  //db, 02-07-10: M19985
          Status.OPEN(Text010);  //db, 08-06-10: M19367
        REPEAT
          IF ShowProgress THEN  //db, 02-07-10: M19985
            Status.UPDATE(1,Code);  //db, 08-06-10: M19367
          //DP00686.sn
          IF NewPartRec.GET("Part Group", Code) THEN BEGIN
            NewPart := NewPartRec."New Part";
            NewPartRec.DELETE;
          END ELSE BEGIN
            NewPartRec.INIT;
            NewPart := Code;
          END;
          StdPartRec.GET("Part Group", Code);
          //DP00686.en
          IF NOT EstPartRec.GET(g_code1, g_code2, "Part Group", NewPart) THEN BEGIN  //DP00686
            EstPartRec.INIT;
            EstPartRec."Estimate No." := g_code1;
            EstPartRec."Sub-Estimate No." := g_code2;
            EstPartRec."Part Group" := "Part Group";
            //DP00686.sn
            EstPartRec.VALIDATE(Part, NewPart);
            IF NewPartRec."New Part" <> '' THEN BEGIN
              EstPartRec.TESTFIELD(Level, StdPartRec.Level);
              //inherit data, normaly assigned by validate Part
              EstPartRec.Description := StdPartRec.Description;
              EstPartRec.Quantity := StdPartRec.Quantity;
              EstPartRec."Unit of Measure" := StdPartRec."Unit of Measure";
              IF StdPartRec.Element <> '' THEN
                EstPartRec.Element := StdPartRec.Element;
              IF StdPartRec."Project Plann. Base Act. Code" <> '' THEN
                EstPartRec."Project Planning Activity Code" := StdPartRec."Project Plann. Base Act. Code";
              EstPartRec."Unit of Qty per Unit" := StdPartRec."Unit of Qty per Unit";
              EstPartRec.CopyPartText(Code, NewPart);
              EstPartRec.CopyPartQuantitySheet(Code, NewPart);
            END;
            //DP00686.en
            EstPartRec.VALIDATE("Excel Estimate Template",StdPartRec."Excel Estimate Template");
            EstPartRec.InitSurcharge;  //db, 14-11-13: DP00381
            EstPartRec.INSERT(TRUE);
            EstLineRec.CopyPartLines(EstPartRec,NewPartLineRec,FALSE,Code,NewPart);  //DP00686
          END;

          IF NewPartRec."New Part" = '' THEN BEGIN  //db, 30-12-14: start skip copy parent-child
          IF (Level = 1) OR (Level = 2) THEN BEGIN
            StdPartRec.RESET;
            StdPartRec.SETRANGE("Part Group", "Part Group");
            IF Level = 1 THEN StdPartRec.SETRANGE(Chapter, Code);
            IF Level = 2 THEN StdPartRec.SETRANGE(Paragraph, Code);
            IF StdPartRec.FINDSET THEN BEGIN
              REPEAT
                IF ShowProgress THEN  //db, 02-07-10: M19985
                  Status.UPDATE(1,StdPartRec.Code);  //db, 08-06-10: M19367
                IF NOT EstPartRec.GET(g_code1, g_code2, StdPartRec."Part Group", StdPartRec.Code) THEN BEGIN
                  EstPartRec.INIT;
                  EstPartRec."Estimate No." := g_code1;
                  EstPartRec."Sub-Estimate No." := g_code2;
                  EstPartRec."Part Group"  := StdPartRec."Part Group";
                  EstPartRec.VALIDATE(Part, StdPartRec.Code);
                  EstPartRec.VALIDATE("Excel Estimate Template",StdPartRec."Excel Estimate Template");
                  EstPartRec.InitSurcharge;  //db, 14-11-13: DP00381
                  EstPartRec.INSERT(TRUE);
                  EstLineRec.CopyPartLines(EstPartRec,NewPartLineRec,FALSE,'','');
                END;
              UNTIL StdPartRec.NEXT = 0;
            END;
          END;

          MarkedLevel := Level;
          REPEAT
            StdPartRec.RESET;
            StdPartRec.SETRANGE("Part Group", "Part Group");
            IF MarkedLevel = 1 THEN StdPartRec.SETRANGE(Level, 0);
            IF MarkedLevel = 2 THEN StdPartRec.SETRANGE(Code, Chapter);
            IF MarkedLevel = 3 THEN StdPartRec.SETRANGE(Code, Paragraph);
            IF StdPartRec.FINDSET THEN BEGIN
              REPEAT
                IF ShowProgress THEN  //db, 02-07-10: M19985
                  Status.UPDATE(1,StdPartRec.Code);  //db, 08-06-10: M19367
                IF NOT EstPartRec.GET(g_code1, g_code2, StdPartRec."Part Group", StdPartRec.Code) THEN BEGIN
                  EstPartRec.INIT;
                  EstPartRec."Estimate No." := g_code1;
                  EstPartRec."Sub-Estimate No." := g_code2;
                  EstPartRec."Part Group" := StdPartRec."Part Group";
                  EstPartRec.VALIDATE(Part, StdPartRec.Code);
                  EstPartRec.VALIDATE("Excel Estimate Template",StdPartRec."Excel Estimate Template");
                  EstPartRec.InitSurcharge;  //db, 14-11-13: DP00381
                  EstPartRec.INSERT(TRUE);
                  EstLineRec.CopyPartLines(EstPartRec,NewPartLineRec,FALSE,'','');
                END;
              UNTIL StdPartRec.NEXT = 0;
            END;
            IF MarkedLevel > 0 THEN
              MarkedLevel := MarkedLevel - 1;
          UNTIL MarkedLevel = 0;
          END;  //db, 30-12-14: end skip copy parent-child

        UNTIL NEXT = 0;
        IF ShowProgress THEN  //db, 02-07-10: M19985
          Status.CLOSE;  //db, 08-06-10: M19367
      END;

      gvPartRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyEstConfigurator@1100485000(VAR gvPartRec@1100485000 : Record 11012169);
    VAR
      lvPartRec@1100485001 : Record 11012169;
      TO_PART@11012002 : Record 11012176;
      STD_PART@11012003 : Record 11012169;
      MarkedLevel@11012004 : Integer;
      LastLine@1210190000 : Integer;
      SeqNo@1210190001 : Integer;
      PartInserted@1210190002 : Boolean;
    BEGIN
      lvPartRec.COPY(gvPartRec);
      WITH lvPartRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        TO_PART.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", "Line No.");
        TO_PART.SETRANGE("Estimate No.", g_code1);
        TO_PART.SETRANGE("Sub-Estimate No.", g_code2);
        IF NOT TO_PART.FINDLAST THEN
          LastLine := 0
        ELSE
          LastLine := TO_PART."Line No.";
        TO_PART.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", "Part Group", "Part (Configurator)");

        REPEAT
          SeqNo := 0;
          REPEAT
            TO_PART.SETRANGE("Part Group", "Part Group");
            TO_PART.SETRANGE("Part (Configurator)", Code);
            TO_PART.SETRANGE("Part (Seq. No.)", SeqNo);
            IF NOT TO_PART.FINDFIRST THEN BEGIN
              TO_PART.INIT;
              TO_PART."Estimate No." := g_code1;
              TO_PART."Sub-Estimate No." := g_code2;
              TO_PART."Part Group" := "Part Group";
              TO_PART."Part (Configurator)" := Code;
              TO_PART."Part (Seq. No.)" := SeqNo;
              TO_PART."Part Description" := Description;
              TO_PART.Chapter := Chapter;
              TO_PART.Paragraph := Paragraph;
              TO_PART.Level := Level;
              TO_PART."Line No." := LastLine + 10000;
              TO_PART.INSERT(TRUE);
              LastLine := TO_PART."Line No.";
              PartInserted := TRUE;
            END ELSE BEGIN
              SeqNo := SeqNo + 1;
              PartInserted := FALSE;
            END;
          UNTIL PartInserted = TRUE;

          IF (Level = 1) OR (Level = 2) THEN BEGIN
            STD_PART.SETRANGE("Part Group", "Part Group");
            IF Level = 1 THEN STD_PART.SETRANGE(Chapter, Code);
            IF Level = 2 THEN STD_PART.SETRANGE(Paragraph, Code);
            IF STD_PART.FINDSET THEN BEGIN
              REPEAT
                TO_PART.SETRANGE("Part Group", STD_PART."Part Group");
                TO_PART.SETRANGE("Part (Configurator)", STD_PART.Code);
                IF NOT TO_PART.FINDFIRST THEN BEGIN
                  TO_PART.INIT;
                  TO_PART."Estimate No." := g_code1;
                  TO_PART."Sub-Estimate No." := g_code2;
                  TO_PART."Part Group" := STD_PART."Part Group";
                  TO_PART."Part (Configurator)" := STD_PART.Code;
                  TO_PART."Part (Seq. No.)" := SeqNo;
                  TO_PART."Part Description" := STD_PART.Description;
                  TO_PART.Chapter := STD_PART.Chapter;
                  TO_PART.Paragraph := STD_PART.Paragraph;
                  TO_PART.Level := STD_PART.Level;
                  TO_PART."Line No." := LastLine + 10000;
                  TO_PART.INSERT(TRUE);
                  LastLine := TO_PART."Line No.";
                END;
              UNTIL STD_PART.NEXT = 0;
            END;
          END;

          MarkedLevel := Level;
          REPEAT
            STD_PART.RESET;
            STD_PART.SETRANGE("Part Group", "Part Group");
            IF MarkedLevel = 1 THEN STD_PART.SETRANGE(Level, 0);
            IF MarkedLevel = 2 THEN STD_PART.SETRANGE(Code, Chapter);
            IF MarkedLevel = 3 THEN STD_PART.SETRANGE(Code, Paragraph);
            IF STD_PART.FINDSET THEN BEGIN
              REPEAT
                TO_PART.SETRANGE("Part Group", STD_PART."Part Group");
                TO_PART.SETRANGE("Part (Configurator)", STD_PART.Code);
                IF MarkedLevel = 1 THEN
                  TO_PART.SETRANGE("Part (Seq. No.)", 0);
                IF NOT TO_PART.FINDFIRST THEN BEGIN
                  TO_PART.INIT;
                  TO_PART."Estimate No." := g_code1;
                  TO_PART."Sub-Estimate No." := g_code2;
                  TO_PART."Part Group" := STD_PART."Part Group";
                  TO_PART."Part (Configurator)" := STD_PART.Code;
                  TO_PART."Part (Seq. No.)" := SeqNo;
                  TO_PART."Part Description" := STD_PART.Description;
                  TO_PART.Chapter := STD_PART.Chapter;
                  TO_PART.Paragraph := STD_PART.Paragraph;
                  TO_PART.Level := STD_PART.Level;
                  TO_PART."Line No." := LastLine + 10000;
                  TO_PART.INSERT(TRUE);
                  LastLine := TO_PART."Line No.";
                END;
              UNTIL STD_PART.NEXT = 0;
            END;
            IF MarkedLevel > 0 THEN
              MarkedLevel := MarkedLevel - 1;
          UNTIL MarkedLevel = 0;
        UNTIL NEXT = 0;
      END;

      gvPartRec.CLEARMARKS;
      COMMIT;

      TO_PART.ReorganiseParts(g_code1, g_code2);
    END;

    PROCEDURE CopyEstPartLinesOLD@1100525000(VAR gvPartLineRec@1100485000 : Record 11012187);
    VAR
      lvPartLineRec@1210190007 : Record 11012187;
      LastLine@1210190001 : Integer;
    BEGIN
      //function is started from form 11071702: Config. Estimate Part List  (subform 11071703)

      lvPartLineRec.COPY(gvPartLineRec);
      WITH lvPartLineRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        EstRec.GET(g_code1);
        EstRec.TESTFIELD(Fixed, FALSE);
        REPEAT
          LastLine := 0;
          OldEstLineRec.SETRANGE("Estimate No.", g_code1);
          OldEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
          OldEstLineRec.SETRANGE("Part Group", g_code3);
          OldEstLineRec.SETRANGE(Part, g_code4);
          IF OldEstLineRec.FINDLAST THEN
            LastLine := OldEstLineRec."Line No.";

          OldEstLineRec.INIT;
          OldEstLineRec."Estimate No." := g_code1;
          OldEstLineRec."Sub-Estimate No." := g_code2;
          OldEstLineRec."Part Group" := g_code3;
          OldEstLineRec.Part := g_code4;
          OldEstLineRec."Line No."  := LastLine + 10000;
          OldEstLineRec.Description := Description;
          IF Recipe <> '' THEN BEGIN
            OldEstLineRec.VALIDATE("Recipe Group", "Recipe Group");
            OldEstLineRec.VALIDATE(Recipe, Recipe);
          END ELSE BEGIN
            OldEstLineRec.VALIDATE("Item No.", "Item No.");
            OldEstLineRec.Manufacturer := Manufacturer;
            OldEstLineRec.VALIDATE("Basic Item", "Basic Item");
            OldEstLineRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
            OldEstLineRec.VALIDATE("Trade Item", "Trade Item");
          END;
          OldEstLineRec.VALIDATE(Quantity, Quantity);
          OldEstLineRec.VALIDATE("Unit of Measure", "Unit of Measure");
          OldEstLineRec.VALIDATE("Rate Code", EstRec."Rate Code");
          OldEstLineRec.VALIDATE("Sub Operation Code");
          OldEstLineRec.INSERT(TRUE);

          IF OldEstLineRec.Recipe <> '' THEN BEGIN
            OldEstLineRec.CopyRecipe;
            OldEstLineRec.MODIFY;
          END;
        UNTIL lvPartLineRec.NEXT = 0;
      END;

      gvPartLineRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyEstPartLinesNEW@1100528904(VAR gvPartLineRec@1100485000 : Record 11072076);
    VAR
      lvPartLineRec@1210190007 : Record 11072076;
      LastLine@1210190001 : Integer;
    BEGIN
      //function is started from form 11071702: Config. Estimate Part List  (subform 11071703)

      lvPartLineRec.COPY(gvPartLineRec);
      WITH lvPartLineRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        EstRec.GET(g_code1);
        EstRec.TESTFIELD(Fixed, FALSE);
        REPEAT
          LastLine := 0;
          NewEstLineRec.SETRANGE("Estimate No.", g_code1);
          NewEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
          NewEstLineRec.SETRANGE("Part Group", g_code3);
          NewEstLineRec.SETRANGE(Part, g_code4);
          IF NewEstLineRec.FINDLAST THEN
            LastLine := NewEstLineRec."Line No.";

          NewEstLineRec.INIT;
          NewEstLineRec."Estimate No." := g_code1;
          NewEstLineRec."Sub-Estimate No." := g_code2;
          NewEstLineRec."Part Group" := g_code3;
          NewEstLineRec.Part := g_code4;
          NewEstLineRec.InitRecord;
          NewEstLineRec."Line No."  := LastLine + 10000;
          NewEstLineRec.Description := Description;
          IF Recipe <> '' THEN BEGIN
            NewEstLineRec.VALIDATE("Recipe Group", "Recipe Group");
            NewEstLineRec.VALIDATE(Recipe, Recipe);
          END ELSE BEGIN
            NewEstLineRec.VALIDATE("Item No.", "Item No.");
            NewEstLineRec.Manufacturer := Manufacturer;
            NewEstLineRec.VALIDATE("Basic Item", "Basic Item");
            NewEstLineRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
            NewEstLineRec.VALIDATE("Trade Item", "Trade Item");
          END;
          NewEstLineRec.VALIDATE(Quantity, Quantity);
          NewEstLineRec.VALIDATE("Unit of Measure", "Unit of Measure");
          NewEstLineRec.VALIDATE("Rate Code", EstRec."Rate Code");
          NewEstLineRec.VALIDATE("Sub Operation Code");
          NewEstLineRec.INSERT(TRUE);
          NewEstLineRec.UpdateLineTotals;  //db, 23-06-14

          IF NewEstLineRec.Recipe <> '' THEN BEGIN
            NewEstLineRec.CopyRecipe;
            NewEstLineRec.MODIFY;
          END;
        UNTIL lvPartLineRec.NEXT = 0;
      END;

      gvPartLineRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyOperations@1100485003(VAR gvOperRec@1100485000 : Record 11012166);
    VAR
      lvOperRec@1100485001 : Record 11012166;
      SubOperationBuffer@1100525000 : TEMPORARY Record 11012166;
    BEGIN
      //rtc: old function, only to be used from ClassicClient since in uses marked records
      lvOperRec.COPY(gvOperRec);
      WITH lvOperRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        REPEAT
          SubOperationBuffer := lvOperRec;
          SubOperationBuffer.INSERT
        UNTIL NEXT = 0;
      END;

      CopyOperationsFromBuffer(SubOperationBuffer);
    END;

    PROCEDURE CopyOperationsFromBuffer@1100525508(VAR gvOperRec@1100485000 : Record 11012166);
    VAR
      LastLine@1100485002 : Integer;
    BEGIN
      //rtc: new copy function
      WITH gvOperRec DO BEGIN
        IF NOT FINDSET THEN
          EXIT;

        LastLine := 0;

        CASE g_table OF
          DATABASE::"Estimate Line OLD":  //DP00381
            BEGIN
              OldEstLineRec.LOCKTABLE;
              OldEstLineRec.SETRANGE("Estimate No.", g_code1);
              OldEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
              OldEstLineRec.SETRANGE("Part Group",g_code3);
              OldEstLineRec.SETRANGE(Part,g_code4);
              IF OldEstLineRec.FINDLAST THEN
                LastLine := OldEstLineRec."Line No.";

              REPEAT
                LastLine := LastLine + 10000;
                OldEstLineRec.INIT;
                OldEstLineRec."Estimate No." := g_code1;
                OldEstLineRec."Sub-Estimate No." := g_code2;
                OldEstLineRec."Part Group" := g_code3;
                OldEstLineRec.Part := g_code4;
                OldEstLineRec."Line No." := LastLine;
                OldEstLineRec.VALIDATE("Sub Operation Code", Code);
                OldEstLineRec.Description := Description;
                OldEstLineRec."Unit of Measure" := "Unit of Measure";
                OldEstLineRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Estimate Line NEW":  //DP00381
            BEGIN
              NewEstLineRec.LOCKTABLE;
              NewEstLineRec.SETRANGE("Estimate No.", g_code1);
              NewEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
              NewEstLineRec.SETRANGE("Part Group",g_code3);
              NewEstLineRec.SETRANGE(Part,g_code4);
              IF NewEstLineRec.FINDLAST THEN
                LastLine := NewEstLineRec."Line No.";

              REPEAT
                LastLine := LastLine + 10000;
                NewEstLineRec.INIT;
                NewEstLineRec."Estimate No." := g_code1;
                NewEstLineRec."Sub-Estimate No." := g_code2;
                NewEstLineRec."Part Group" := g_code3;
                NewEstLineRec.Part := g_code4;
                NewEstLineRec.InitRecord;
                NewEstLineRec."Line No." := LastLine;
                NewEstLineRec.VALIDATE("Sub Operation Code", Code);
                NewEstLineRec.Description := Description;
                NewEstLineRec."Unit of Measure" := "Unit of Measure";
                NewEstLineRec.INSERT(TRUE);
                NewEstLineRec.UpdateLineTotals;  //db, 23-06-14
              UNTIL NEXT = 0;
            END;

          DATABASE::"Recipe Line OLD":  //DP00381
            BEGIN
              OldRecipeLineRec.LOCKTABLE;
              OldRecipeLineRec.SETRANGE("Estimate No.", g_code1);
              OldRecipeLineRec.SETRANGE("Sub-Estimate No.", g_code2);
              OldRecipeLineRec.SETRANGE("Part Group",g_code3);
              OldRecipeLineRec.SETRANGE(Part,g_code4);
              OldRecipeLineRec.SETRANGE("Estimate Line",g_int1);
              OldRecipeLineRec.SETRANGE("Recipe Group",g_code5);
              OldRecipeLineRec.SETRANGE(Recipe,g_code6);
              IF OldRecipeLineRec.FINDLAST THEN
                LastLine := OldRecipeLineRec."Line No.";

              REPEAT
                LastLine := LastLine + 10000;
                OldRecipeLineRec.INIT;
                OldRecipeLineRec."Estimate No." := g_code1;
                OldRecipeLineRec."Sub-Estimate No." := g_code2;
                OldRecipeLineRec."Part Group" := g_code3;
                OldRecipeLineRec.Part := g_code4;
                OldRecipeLineRec."Estimate Line" := g_int1;
                OldRecipeLineRec."Recipe Group" := g_code5;
                OldRecipeLineRec.Recipe := g_code6;
                OldRecipeLineRec."Line No." := LastLine;
                OldRecipeLineRec.VALIDATE("Sub Operation Code", Code);
                OldRecipeLineRec.Description := Description;
                OldRecipeLineRec."Unit of Measure" := "Unit of Measure";
                OldRecipeLineRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Base Recipe Line":  //DP00381
            BEGIN
              BaseRecipeLineRec.LOCKTABLE;
              BaseRecipeLineRec.SETRANGE("Recipe Group",g_code5);
              BaseRecipeLineRec.SETRANGE(Recipe,g_code6);
              IF BaseRecipeLineRec.FINDLAST THEN
                LastLine := BaseRecipeLineRec."Line No.";

              REPEAT
                LastLine := LastLine + 10000;
                BaseRecipeLineRec.INIT;
                BaseRecipeLineRec."Recipe Group" := g_code5;
                BaseRecipeLineRec.Recipe := g_code6;
                BaseRecipeLineRec."Line No." := LastLine;
                BaseRecipeLineRec.VALIDATE("Sub Operation Code", Code);
                BaseRecipeLineRec.Description := Description;
                BaseRecipeLineRec."Unit of Measure" := "Unit of Measure";
                BaseRecipeLineRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;

          DATABASE::"Estimate Recipe Line":  //DP00381
            BEGIN
              NewRecipeLineRec.LOCKTABLE;
              NewRecipeLineRec.SETRANGE("Estimate No.", g_code1);
              NewRecipeLineRec.SETRANGE("Sub-Estimate No.", g_code2);
              NewRecipeLineRec.SETRANGE("Part Group",g_code3);
              NewRecipeLineRec.SETRANGE(Part,g_code4);
              NewRecipeLineRec.SETRANGE("Estimate Line",g_int1);
              NewRecipeLineRec.SETRANGE("Recipe Group",g_code5);
              NewRecipeLineRec.SETRANGE(Recipe,g_code6);
              IF NewRecipeLineRec.FINDLAST THEN
                LastLine := NewRecipeLineRec."Line No.";

              REPEAT
                LastLine := LastLine + 10000;
                NewRecipeLineRec.INIT;
                NewRecipeLineRec."Estimate No." := g_code1;
                NewRecipeLineRec."Sub-Estimate No." := g_code2;
                NewRecipeLineRec."Part Group" := g_code3;
                NewRecipeLineRec.Part := g_code4;
                NewRecipeLineRec.InitRecord;
                NewRecipeLineRec."Estimate Line" := g_int1;
                NewRecipeLineRec."Recipe Group" := g_code5;
                NewRecipeLineRec.Recipe := g_code6;
                NewRecipeLineRec."Line No." := LastLine;
                NewRecipeLineRec.VALIDATE("Sub Operation Code", Code);
                NewRecipeLineRec.Description := Description;
                NewRecipeLineRec."Unit of Measure" := "Unit of Measure";
                NewRecipeLineRec.INSERT(TRUE);
              UNTIL NEXT = 0;
            END;
          ELSE
            MESSAGE(Text001);
        END;
      END;

      COMMIT;
    END;

    PROCEDURE CopyServEntries@1100485008(VAR MarkedRec@1100485000 : TEMPORARY Record 11012819);
    VAR
      ShippingOrderLine@1100528800 : Record 11071885;
      RecRef@1100528801 : RecordRef;
    BEGIN
      IF NOT MarkedRec.FINDSET THEN BEGIN
        MESSAGE(Text041);  //db, 01-12-14
        EXIT;
      END;

      MarkNo := MarkedRec.COUNT;
      CurrLino := g_int2;
      PrevLino := 0;
      Gap := 0;

      CASE g_table OF
        DATABASE::"Estimate Line OLD":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            OldEstLineRec.LOCKTABLE;
            OldEstLineRec.SETRANGE("Estimate No.", g_code1);
            OldEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            OldEstLineRec.SETRANGE("Part Group",g_code6);
            OldEstLineRec.SETRANGE(Part,g_code3);
            IF OldEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              OldEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldEstLineRec.FINDLAST THEN PrevLino := OldEstLineRec."Line No.";
              OldEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldEstLineRec.FINDLAST THEN
                CurrLino := OldEstLineRec."Line No.";
            END;
            REPEAT
              OldEstLineRec.INIT;
              OldEstLineRec."Estimate No." := g_code1;
              OldEstLineRec."Sub-Estimate No." := g_code2;
              OldEstLineRec."Part Group" := g_code6;
              OldEstLineRec.Part := g_code3;
              OldEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldEstLineRec."Line No.";
              OldEstLineRec.Description := MarkedRec.Description;
              OldEstLineRec.Manufacturer := MarkedRec.Manufacturer;
              OldEstLineRec."Vendor (Trade Item)" := MarkedRec."Vendor (Trade Item)";
              IF MarkedRec."Trade Item" <> '' THEN
                OldEstLineRec.VALIDATE("Trade Item", MarkedRec."Trade Item")
              ELSE
                IF MarkedRec."Basic Item" <> '' THEN
                  OldEstLineRec.VALIDATE("Basic Item", MarkedRec."Basic Item")
                ELSE
                  IF MarkedRec."Item No." <> '' THEN
                    OldEstLineRec.VALIDATE("Item No.", MarkedRec."Item No.");
              IF MarkedRec."Trade Item" + MarkedRec."Basic Item" + MarkedRec."Item No." = '' THEN BEGIN  //C026169
                OldEstLineRec.VALIDATE("Cost Object Material", MarkedRec."Global Dimension 2 Code");
                OldEstLineRec.VALIDATE("Material Price", MarkedRec."Unit Cost (LCY)");
              END;
              IF (OldEstLineRec."Unit of Measure" <> MarkedRec."Unit of Measure Code") AND
                 (OldEstLineRec."Unit of Measure" <> '') THEN BEGIN   //db, 16-09-09: M16105
                CheckItemUnitConversion(
                  MarkedRec."Item No.", MarkedRec.Manufacturer, MarkedRec."Basic Item",
                  MarkedRec."Vendor (Trade Item)", MarkedRec."Trade Item",
                  MarkedRec.Quantity, OldEstLineRec."Unit of Measure", MarkedRec."Unit of Measure Code");
              END ELSE BEGIN
                OldEstLineRec.VALIDATE("Unit of Measure", MarkedRec."Unit of Measure Code");
              END;
              OldEstLineRec.VALIDATE(Quantity, MarkedRec.Quantity);
              OldEstLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Line NEW":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            NewEstLineRec.LOCKTABLE;
            NewEstLineRec.SETRANGE("Estimate No.", g_code1);
            NewEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            NewEstLineRec.SETRANGE("Part Group",g_code6);
            NewEstLineRec.SETRANGE(Part,g_code3);
            IF NewEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              NewEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewEstLineRec.FINDLAST THEN PrevLino := NewEstLineRec."Line No.";
              NewEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewEstLineRec.FINDLAST THEN
                CurrLino := NewEstLineRec."Line No.";
            END;
            REPEAT
              NewEstLineRec.INIT;
              NewEstLineRec."Estimate No." := g_code1;
              NewEstLineRec."Sub-Estimate No." := g_code2;
              NewEstLineRec."Part Group" := g_code6;
              NewEstLineRec.Part := g_code3;
              NewEstLineRec.InitRecord;
              NewEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewEstLineRec."Line No.";
              NewEstLineRec.Description := MarkedRec.Description;
              NewEstLineRec.Manufacturer := MarkedRec.Manufacturer;
              NewEstLineRec."Vendor (Trade Item)" := MarkedRec."Vendor (Trade Item)";
              IF MarkedRec."Trade Item" <> '' THEN
                NewEstLineRec.VALIDATE("Trade Item", MarkedRec."Trade Item")
              ELSE
                IF MarkedRec."Basic Item" <> '' THEN
                  NewEstLineRec.VALIDATE("Basic Item", MarkedRec."Basic Item")
                ELSE
                  IF MarkedRec."Item No." <> '' THEN
                    NewEstLineRec.VALIDATE("Item No.", MarkedRec."Item No.");
              IF MarkedRec."Trade Item" + MarkedRec."Basic Item" + MarkedRec."Item No." = '' THEN BEGIN  //C026169
                NewEstLineRec.VALIDATE("Cost Object Price", MarkedRec."Global Dimension 2 Code");
                NewEstLineRec.VALIDATE("Nett Cost Price", MarkedRec."Unit Cost (LCY)");
              END;
              IF (NewEstLineRec."Unit of Measure" <> MarkedRec."Unit of Measure Code") AND
                 (NewEstLineRec."Unit of Measure" <> '') THEN BEGIN   //db, 16-09-09: M16105
                CheckItemUnitConversion(
                  MarkedRec."Item No.", MarkedRec.Manufacturer, MarkedRec."Basic Item",
                  MarkedRec."Vendor (Trade Item)", MarkedRec."Trade Item",
                  MarkedRec.Quantity, NewEstLineRec."Unit of Measure", MarkedRec."Unit of Measure Code");
              END ELSE BEGIN
                NewEstLineRec.VALIDATE("Unit of Measure", MarkedRec."Unit of Measure Code");
              END;
              NewEstLineRec.VALIDATE(Quantity, MarkedRec.Quantity);
              NewEstLineRec.INSERT(TRUE);
              NewEstLineRec.UpdateLineTotals;  //db, 23-06-14
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Shipping Order Line":
          BEGIN
            ShippingOrderLine.SETRANGE("Document No.", g_code1);
            IF ShippingOrderLine.GET(g_code1, CurrLino) THEN BEGIN
              ShippingOrderLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF ShippingOrderLine.FINDLAST THEN
                PrevLino := ShippingOrderLine."Line No.";
              ShippingOrderLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ShippingOrderLine.FINDLAST THEN
                CurrLino := ShippingOrderLine."Line No.";
            END;
            ShippingOrderLine.RESET;

            MarkedRec.FINDFIRST;
            REPEAT
              ShippingOrderLine.INIT; //C015243
              ShippingOrderLine."Document No." := g_code1;
              ShippingOrderLine."Line No." := CurrLino + Gap;
              CurrLino := ShippingOrderLine."Line No.";
      //      ShippingOrderLine."Source Line No." := MarkedRec."Entry No."; //C015243
              RecRef.GETTABLE(MarkedRec);
              ShippingOrderLine.FillShipmentLine(RecRef, FALSE);
              ShippingOrderLine.INSERT;
            UNTIL MarkedRec.NEXT = 0;
          END;

        ELSE
          MESSAGE(Text001);

      END;

      COMMIT;
    END;

    PROCEDURE CopyJobEntries@1100485009(VAR MarkedRec@1100485000 : TEMPORARY Record 11072005);
    BEGIN
      IF NOT MarkedRec.FINDSET THEN BEGIN
        MESSAGE(Text041);  //db, 01-12-14
        EXIT;
      END;

      MarkNo := MarkedRec.COUNT;
      CurrLino := g_int2;
      PrevLino := 0;
      Gap := 0;

      CASE g_table OF
        DATABASE::"Estimate Line OLD":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            OldEstLineRec.LOCKTABLE;
            OldEstLineRec.SETRANGE("Estimate No.", g_code1);
            OldEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            OldEstLineRec.SETRANGE("Part Group",g_code6);
            OldEstLineRec.SETRANGE(Part,g_code3);
            IF OldEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              OldEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF OldEstLineRec.FINDLAST THEN PrevLino := OldEstLineRec."Line No.";
              OldEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF OldEstLineRec.FINDLAST THEN
                CurrLino := OldEstLineRec."Line No.";
            END;
            REPEAT
              OldEstLineRec.INIT;
              OldEstLineRec."Estimate No." := g_code1;
              OldEstLineRec."Sub-Estimate No." := g_code2;
              OldEstLineRec."Part Group" := g_code6;
              OldEstLineRec.Part := g_code3;
              OldEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := OldEstLineRec."Line No.";
              OldEstLineRec.Description := MarkedRec.Description;
              OldEstLineRec.Manufacturer := MarkedRec.Manufacturer;
              OldEstLineRec."Vendor (Trade Item)" := MarkedRec."Vendor (Trade Item)";
              IF MarkedRec."Trade Item" <> '' THEN
                OldEstLineRec.VALIDATE("Trade Item", MarkedRec."Trade Item")
              ELSE
                IF MarkedRec."Basic Item" <> '' THEN
                  OldEstLineRec.VALIDATE("Basic Item", MarkedRec."Basic Item")
                ELSE
                  IF MarkedRec."Item No." <> '' THEN
                    OldEstLineRec.VALIDATE("Item No.", MarkedRec."Item No.");
              IF MarkedRec."Trade Item" + MarkedRec."Basic Item" + MarkedRec."Item No." = '' THEN BEGIN  //C026169
                OldEstLineRec.VALIDATE("Cost Object Material", MarkedRec."Global Dimension 2 Code");
                OldEstLineRec.VALIDATE("Material Price", MarkedRec."Unit Cost (LCY)");
              END;
              IF (OldEstLineRec."Unit of Measure" <> MarkedRec."Unit of Measure Code") AND
                 (OldEstLineRec."Unit of Measure" <> '') THEN BEGIN   //db, 16-09-09: M16105
                CheckItemUnitConversion(
                  MarkedRec."Item No.", MarkedRec.Manufacturer, MarkedRec."Basic Item",
                  MarkedRec."Vendor (Trade Item)", MarkedRec."Trade Item",
                  MarkedRec.Quantity, OldEstLineRec."Unit of Measure", MarkedRec."Unit of Measure Code");
              END ELSE BEGIN
                OldEstLineRec.VALIDATE("Unit of Measure", MarkedRec."Unit of Measure Code");
              END;
              OldEstLineRec.VALIDATE(Quantity, MarkedRec.Quantity);
              OldEstLineRec.INSERT(TRUE);
            UNTIL MarkedRec.NEXT = 0;
          END;

        DATABASE::"Estimate Line NEW":  //DP00381
          BEGIN
            EstRec.GET(g_code1);
            EstRec.TESTFIELD(Fixed, FALSE);

            NewEstLineRec.LOCKTABLE;
            NewEstLineRec.SETRANGE("Estimate No.", g_code1);
            NewEstLineRec.SETRANGE("Sub-Estimate No.", g_code2);
            NewEstLineRec.SETRANGE("Part Group",g_code6);
            NewEstLineRec.SETRANGE(Part,g_code3);
            IF NewEstLineRec.GET(g_code1, g_code2, g_code6, g_code3, CurrLino) THEN BEGIN
              NewEstLineRec.SETFILTER("Line No.", '<%1', CurrLino);
              IF NewEstLineRec.FINDLAST THEN PrevLino := NewEstLineRec."Line No.";
              NewEstLineRec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF NewEstLineRec.FINDLAST THEN
                CurrLino := NewEstLineRec."Line No.";
            END;
            REPEAT
              NewEstLineRec.INIT;
              NewEstLineRec."Estimate No." := g_code1;
              NewEstLineRec."Sub-Estimate No." := g_code2;
              NewEstLineRec."Part Group" := g_code6;
              NewEstLineRec.Part := g_code3;
              NewEstLineRec.InitRecord;
              NewEstLineRec."Line No." := CurrLino + Gap;
              CurrLino := NewEstLineRec."Line No.";
              NewEstLineRec.Description := MarkedRec.Description;
              NewEstLineRec.Manufacturer := MarkedRec.Manufacturer;
              NewEstLineRec."Vendor (Trade Item)" := MarkedRec."Vendor (Trade Item)";
              IF MarkedRec."Trade Item" <> '' THEN
                NewEstLineRec.VALIDATE("Trade Item", MarkedRec."Trade Item")
              ELSE
                IF MarkedRec."Basic Item" <> '' THEN
                  NewEstLineRec.VALIDATE("Basic Item", MarkedRec."Basic Item")
                ELSE
                  IF MarkedRec."Item No." <> '' THEN
                    NewEstLineRec.VALIDATE("Item No.", MarkedRec."Item No.");
              IF MarkedRec."Trade Item" + MarkedRec."Basic Item" + MarkedRec."Item No." = '' THEN BEGIN  //C026169
                NewEstLineRec.VALIDATE("Cost Object Price", MarkedRec."Global Dimension 2 Code");
                NewEstLineRec.VALIDATE("Nett Cost Price", MarkedRec."Unit Cost (LCY)");
              END;
              IF (NewEstLineRec."Unit of Measure" <> MarkedRec."Unit of Measure Code") AND
                 (NewEstLineRec."Unit of Measure" <> '') THEN BEGIN   //db, 16-09-09: M16105
                CheckItemUnitConversion(
                  MarkedRec."Item No.", MarkedRec.Manufacturer, MarkedRec."Basic Item",
                  MarkedRec."Vendor (Trade Item)", MarkedRec."Trade Item",
                  MarkedRec.Quantity, NewEstLineRec."Unit of Measure", MarkedRec."Unit of Measure Code");
              END ELSE BEGIN
                NewEstLineRec.VALIDATE("Unit of Measure", MarkedRec."Unit of Measure Code");
              END;
              NewEstLineRec.VALIDATE(Quantity, MarkedRec.Quantity);
              NewEstLineRec.INSERT(TRUE);
              NewEstLineRec.UpdateLineTotals;  //db, 23-06-14
            UNTIL MarkedRec.NEXT = 0;
          END;
        ELSE
          MESSAGE(Text001);
      END;

      COMMIT;
    END;

    PROCEDURE CopyPurchObligations@1210190004(VAR gvPurchLineRec@1100485001 : Record 39);
    VAR
      lvPurchLineRec@1100485002 : Record 39;
      GetQtyToReceive@1100409000 : Boolean;
      lvSelect@1100409001 : Integer;
      TotQtyToInvoice@1100528500 : Decimal;
      QtyToInvoice@1100528505 : Decimal;
      TotQuanSpecified@1100528504 : Decimal;
    BEGIN
      lvPurchLineRec.COPY(gvPurchLineRec);
      WITH lvPurchLineRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        lvSelect := STRMENU(Text002, 2);  //db, 31-08-12: C002025
        IF lvSelect = 1 THEN GetQtyToReceive := TRUE;

        REPEAT
          //DP00121
          TotQuanSpecified := 0;
          IF PurchHeaderRec."Amounts only" THEN
            TotQtyToInvoice := 1  //db, 31-08-12: C002025
          ELSE
            IF GetQtyToReceive THEN //*C001994/5.n
              TotQtyToInvoice := "Qty. to Receive"
            ELSE
              TotQtyToInvoice := Quantity;
          GetTrackingSpecification(lvPurchLineRec,GetQtyToReceive);

          IF TempTrackingSpecification.FINDSET THEN BEGIN
            REPEAT
              IF GetQtyToReceive THEN
                QtyToInvoice := TempTrackingSpecification."Qty. to Handle (Base)"
              ELSE
                QtyToInvoice := TempTrackingSpecification."Quantity (Base)";
              IF QtyToInvoice <> 0 THEN BEGIN
                GenerateCostPlus(
                  lvPurchLineRec, QtyToInvoice,
                  TempTrackingSpecification."Serial No.",
                  TempTrackingSpecification."Lot No.");
                //db.sn, 02-01-14: C010942
                "Cost Plus Entry Created" := TRUE;
                MODIFY;
                //db.en, 02-01-14: C010942
              END;
              TotQuanSpecified := TotQuanSpecified + QtyToInvoice;
            UNTIL TempTrackingSpecification.NEXT = 0;
          END;
          IF TotQtyToInvoice <> TotQuanSpecified THEN BEGIN
            GenerateCostPlus(
              lvPurchLineRec, TotQtyToInvoice - TotQuanSpecified, '', '');
            //db.sn, 02-01-14: C010942
            "Cost Plus Entry Created" := TRUE;
            MODIFY;
            //db.en, 02-01-14: C010942
          END;
        UNTIL NEXT = 0;
      END;

      IF ErrorFound THEN BEGIN
        MESSAGE(Text001);
      END ELSE BEGIN
        //gvPurchLineRec.MODIFYALL("Cost Plus Entry Created", TRUE);  //db, 02-01-14: C010942
        gvPurchLineRec.MARKEDONLY(FALSE);
      END;
      gvPurchLineRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyHourObligations@1100485011(VAR gvHourLineRec@1100485001 : Record 11012039);
    VAR
      lvHourLineRec@1100485004 : Record 11012039;
      EmplRec@1100485000 : Record 5200;
      lvText002@1100485002 : TextConst 'ENU="Hours "';
      lvText003@1100485003 : TextConst 'ENU="Expenses "';
      ErrorFound@1100485005 : Boolean;
    BEGIN
      lvHourLineRec.COPY(gvHourLineRec);
      WITH lvHourLineRec DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        REPEAT
          CASE g_table OF
            DATABASE::"Service Order Cost Plus Entry":
              BEGIN
                IF "Service Order No." <> '' THEN
                  g_code1 := "Service Order No.";  //is needed when navigating from form 11125118
                ServCostPlusRec.LOCKTABLE;
                ServCostPlusRec.SETRANGE("Service Order No.", g_code1);
                IF ServCostPlusRec.FINDLAST THEN
                  CurrLino := ServCostPlusRec."Line No."
                ELSE
                  CurrLino := 0;

                ServCostPlusRec.INIT;
                ServCostPlusRec.VALIDATE("Service Order No.", g_code1);
                ServCostPlusRec."Line No." := CurrLino + 10000;
                CurrLino := ServCostPlusRec."Line No.";
                ServCostPlusRec.INSERT(TRUE);

                ServCostPlusRec."Posting Date" := "Posting Date";
                ServCostPlusRec."Source Document" := "Document No.";
                IF NOT "Cost Plus Entry Created" THEN
                  ServCostPlusRec."Source Line" := "Line No.";
                ServCostPlusRec."Surcharge %" := ServCostPlusRec.GetSurcharge;
                ServCostPlusRec.VALIDATE("Employee No.","Employee No.");
                ServCostPlusRec.VALIDATE("Cost Object","Cost Object");
                ServCostPlusRec."Cost Component" := "Cost Component";
                ServCostPlusRec."Wage Component" := "Wage Component";

                EmplRec.GET(ServCostPlusRec."Employee No.");
                CASE "Component Type" OF
                  "Component Type"::Hours: ServCostPlusRec.Description := lvText002;
                  "Component Type"::Expenses: ServCostPlusRec.Description := lvText003;
                END;
                ServCostPlusRec.Description :=
                  COPYSTR(ServCostPlusRec.Description + EmplRec."Full Name", 1, MAXSTRLEN(ServCostPlusRec.Description));
                ServCostPlusRec.VALIDATE(Quantity,"Total Line");
                ServCostPlusRec."Cost Price (LCY)" := "Unit Cost (LCY)";
                ServCostPlusRec.VALIDATE("Basic Price (LCY)","Unit Cost (LCY)");
                ServCostPlusRec.MODIFY(TRUE);
              END;
            DATABASE::"Project Cost Plus Entry":
              BEGIN
                ProjCostPlusRec.LOCKTABLE;
                ProjCostPlusRec.SETRANGE("Project No.", g_code1);
                ProjCostPlusRec.SETRANGE(Principal, g_code2);
                ProjCostPlusRec.SETRANGE("Commission No.", g_code3);
                ProjCostPlusRec.SETRANGE("Settl.Sheet No.", g_code4);
                IF ProjCostPlusRec.FINDLAST THEN
                  CurrLino := ProjCostPlusRec."Line No."
                ELSE
                  CurrLino := 0;

                ProjCostPlusRec.INIT;
                ProjCostPlusRec."Project No." := g_code1;
                ProjCostPlusRec.Principal := g_code2;
                ProjCostPlusRec."Commission No." := g_code3;
                ProjCostPlusRec."Settl.Sheet No." := g_code4;
                ProjCostPlusRec."Line No." := CurrLino + 10000;
                CurrLino := ProjCostPlusRec."Line No.";
                ProjCostPlusRec.INSERT(TRUE);

                ProjCostPlusRec."Source Document" := "Document No.";
                IF NOT "Cost Plus Entry Created" THEN
                  ProjCostPlusRec."Source Line" := "Line No.";
                ProjCostPlusRec."Surcharge %" := ProjCostPlusRec.GetSurcharge;
                ProjCostPlusRec.VALIDATE("Employee No.","Employee No.");
                ProjCostPlusRec.VALIDATE("Cost Object","Cost Object");
                ProjCostPlusRec."Cost Component" := "Cost Component";
                ProjCostPlusRec."Wage Component" := "Wage Component";

                EmplRec.GET(ProjCostPlusRec."Employee No.");
                CASE "Component Type" OF
                  "Component Type"::Hours: ProjCostPlusRec.Description := lvText002;
                  "Component Type"::Expenses: ProjCostPlusRec.Description := lvText003;
                END;
                ProjCostPlusRec.Description :=
                  COPYSTR(ProjCostPlusRec.Description + EmplRec."Full Name", 1, MAXSTRLEN(ProjCostPlusRec.Description));
                ProjCostPlusRec.VALIDATE(Quantity,"Total Line");
                ProjCostPlusRec."Cost Price" := "Unit Cost (LCY)";
                ProjCostPlusRec.VALIDATE("Basic Price","Unit Cost (LCY)");
                ProjCostPlusRec.MODIFY(TRUE);
              END;
            ELSE
              ErrorFound := TRUE;
          END;
        UNTIL NEXT = 0;
      END;

      IF ErrorFound THEN BEGIN
        MESSAGE(Text001);
      END ELSE BEGIN
        gvHourLineRec.MODIFYALL("Cost Plus Entry Created", TRUE);
        gvHourLineRec.MARKEDONLY(FALSE);
      END;
      gvHourLineRec.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyPlantTypeToSalesLine@1100485014(VAR IMarkedPlantTypeRec@1100485000 : TEMPORARY Record 11012551;ISalesHeadRec@1100485001 : Record 36;ICurrLineNo@1100485003 : Integer);
    VAR
      lvSalesLineRec@1100485002 : Record 37;
    BEGIN
      //* This function is made for Sales Rental Contracts
      IF NOT IMarkedPlantTypeRec.FINDSET THEN BEGIN
        MESSAGE(Text041);
        EXIT;
      END;

      MarkNo := IMarkedPlantTypeRec.COUNT;
      CurrLino := ICurrLineNo;
      PrevLino := 0;
      Gap := 0;

      lvSalesLineRec.LOCKTABLE;
      lvSalesLineRec.SETRANGE("Document Type", ISalesHeadRec."Document Type");
      lvSalesLineRec.SETRANGE("Document No.", ISalesHeadRec."No.");
      IF lvSalesLineRec.GET(ISalesHeadRec."Document Type", ISalesHeadRec."No.", CurrLino) THEN BEGIN
        lvSalesLineRec.SETFILTER("Line No.", '<%1', CurrLino);
        IF lvSalesLineRec.FINDLAST THEN
          PrevLino := lvSalesLineRec."Line No.";
        lvSalesLineRec.SETRANGE("Line No.");
        CheckGap;
      END;
      IF Gap = 0 THEN BEGIN
        Gap := 10000;
        IF lvSalesLineRec.FINDLAST THEN
          CurrLino := lvSalesLineRec."Line No.";
      END;
      lvSalesLineRec.RESET;

      REPEAT
        lvSalesLineRec.INIT;
        lvSalesLineRec."Document Type" := ISalesHeadRec."Document Type";
        lvSalesLineRec."Document No." := ISalesHeadRec."No.";
        lvSalesLineRec."Line No." := CurrLino + Gap;
        CurrLino := lvSalesLineRec."Line No.";
        lvSalesLineRec.InitRecord;
        lvSalesLineRec.VALIDATE("Plant Type", IMarkedPlantTypeRec.Code);
        lvSalesLineRec.INSERT(TRUE);
      UNTIL IMarkedPlantTypeRec.NEXT = 0;
      COMMIT;
    END;

    PROCEDURE CopyPlantTypeToPlantOrderLine@1100525004(VAR MarkedPlantTypeRec@1100485000 : TEMPORARY Record 11012551;PlantOrderRec@1100485001 : Record 11012556;CurrentLineNo@1100485003 : Integer);
    VAR
      PlantOrderLineRec@1100485002 : Record 11012557;
    BEGIN
      IF NOT MarkedPlantTypeRec.FINDSET THEN BEGIN
        MESSAGE(Text041);
        EXIT;
      END;

      MarkNo := MarkedPlantTypeRec.COUNT;
      CurrLino := CurrentLineNo;
      PrevLino := 0;
      Gap := 0;

      PlantOrderLineRec.SETRANGE("Plant Order No.", PlantOrderRec."No.");
      IF PlantOrderLineRec.GET(PlantOrderRec."No.", CurrLino) THEN BEGIN
        PlantOrderLineRec.SETFILTER("Line No.", '<%1', CurrLino);
        IF PlantOrderLineRec.FINDLAST THEN
          PrevLino := PlantOrderLineRec."Line No.";
        PlantOrderLineRec.SETRANGE("Line No.");
        CheckGap;
      END;
      IF Gap = 0 THEN BEGIN
        Gap := 10000;
        IF PlantOrderLineRec.FINDLAST THEN
          CurrLino := PlantOrderLineRec."Line No.";
      END;
      PlantOrderLineRec.RESET;

      REPEAT
        PlantOrderLineRec.INIT;
        PlantOrderLineRec."Plant Order No." := PlantOrderRec."No.";
        PlantOrderLineRec."Line No." := CurrLino + Gap;
        CurrLino := PlantOrderLineRec."Line No.";
        PlantOrderLineRec.InitRecord;
        PlantOrderLineRec.Type := PlantOrderLineRec.Type::Plant;
        PlantOrderLineRec.VALIDATE("Plant Type", MarkedPlantTypeRec.Code);
        PlantOrderLineRec.INSERT(TRUE);
      UNTIL MarkedPlantTypeRec.NEXT = 0;
      COMMIT;
    END;

    PROCEDURE CopyPlantTypeToPlantRequesLine@1100525006(VAR MarkedPlantTypeRec@1100485000 : TEMPORARY Record 11012551;PlantRequestRec@1100485001 : Record 11020520;CurrentLineNo@1100485003 : Integer);
    VAR
      PlantRequestLineRec@1100485002 : Record 11020521;
    BEGIN
      IF NOT MarkedPlantTypeRec.FINDSET THEN BEGIN
        MESSAGE(Text041);
        EXIT;
      END;

      MarkNo := MarkedPlantTypeRec.COUNT;
      CurrLino := CurrentLineNo;
      PrevLino := 0;
      Gap := 0;

      PlantRequestLineRec.SETRANGE("Plant Request No.", PlantRequestRec."No.");
      IF PlantRequestLineRec.GET(PlantRequestRec."No.", CurrLino) THEN BEGIN
        PlantRequestLineRec.SETFILTER("Line No.", '<%1', CurrLino);
        IF PlantRequestLineRec.FINDLAST THEN
          PrevLino := PlantRequestLineRec."Line No.";
        PlantRequestLineRec.SETRANGE("Line No.");
        CheckGap;
      END;
      IF Gap = 0 THEN BEGIN
        Gap := 10000;
        IF PlantRequestLineRec.FINDLAST THEN
          CurrLino := PlantRequestLineRec."Line No.";
      END;
      PlantRequestLineRec.RESET;

      REPEAT
        PlantRequestLineRec.INIT;
        PlantRequestLineRec."Plant Request No." := PlantRequestRec."No.";
        PlantRequestLineRec."Line No." := CurrLino + Gap;
        CurrLino := PlantRequestLineRec."Line No.";
        PlantRequestLineRec.Type := PlantRequestLineRec.Type::Plant;
        PlantRequestLineRec.VALIDATE("Plant Type", MarkedPlantTypeRec.Code);
        PlantRequestLineRec.INSERT(TRUE);
      UNTIL MarkedPlantTypeRec.NEXT = 0;
      COMMIT;
    END;

    PROCEDURE CopyPlantTypeToPlantNeedLine@1100525016(VAR MarkedPlantType@1100485000 : TEMPORARY Record 11012551;PlantLocation@1100485001 : Code[20];CurrentLineNo@1100485003 : Integer);
    VAR
      PlantNeedLine@1100485002 : Record 11012579;
    BEGIN
      IF NOT MarkedPlantType.FINDSET THEN BEGIN
        MESSAGE(Text041);
        EXIT;
      END;

      MarkNo := MarkedPlantType.COUNT;
      CurrLino := CurrentLineNo;
      PrevLino := 0;
      Gap := 0;

      PlantNeedLine.SETRANGE(Location, PlantLocation);
      IF PlantNeedLine.GET(PlantLocation, CurrLino) THEN BEGIN
        PlantNeedLine.SETFILTER("Line No.", '<%1', CurrLino);
        IF PlantNeedLine.FINDLAST THEN
          PrevLino := PlantNeedLine."Line No.";
        PlantNeedLine.SETRANGE("Line No.");
        CheckGap;
      END;
      IF Gap = 0 THEN BEGIN
        Gap := 10000;
        IF PlantNeedLine.FINDLAST THEN
          CurrLino := PlantNeedLine."Line No.";
      END;
      PlantNeedLine.RESET;

      REPEAT
        PlantNeedLine.INIT;
        PlantNeedLine.Location := PlantLocation;
        PlantNeedLine."Line No." := CurrLino + Gap;
        CurrLino := PlantNeedLine."Line No.";
        PlantNeedLine.VALIDATE("Plant Type", MarkedPlantType.Code);
        PlantNeedLine.INSERT(TRUE);
      UNTIL MarkedPlantType.NEXT = 0;
      COMMIT;
    END;

    PROCEDURE CopyItemJournalObligations@1100525007(VAR IItemJournalLine@1100485001 : Record 83);
    VAR
      ItemJournalLine@1100485002 : Record 83;
      ErrorFound@1100485000 : Boolean;
    BEGIN
      ItemJournalLine.COPY(IItemJournalLine);
      WITH ItemJournalLine DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text041);
          EXIT;
        END;

        REPEAT
          CASE g_table OF
            DATABASE::"Service Order Cost Plus Entry":
              BEGIN
                IF "Service Order No." <> '' THEN
                  g_code1 := "Service Order No.";  //is needed when navigating from form 11125118
                ServCostPlusRec.LOCKTABLE;
                ServCostPlusRec.SETRANGE("Service Order No.", g_code1);
                IF ServCostPlusRec.FINDLAST THEN
                  CurrLino := ServCostPlusRec."Line No."
                ELSE
                  CurrLino := 0;

                ServCostPlusRec.INIT;
                ServCostPlusRec.VALIDATE("Service Order No.", g_code1);
                ServCostPlusRec."Line No." := CurrLino + 10000;
                CurrLino := ServCostPlusRec."Line No.";
                ServCostPlusRec.INSERT(TRUE);

                ServCostPlusRec.Description := Description;

                //db, 05-07-05: set defaults for cost object without item code
                ServCostPlusRec."Cost Object" := "Shortcut Dimension 2 Code";
                ServCostPlusRec."Cost Component" := "Cost Component";
                ServCostPlusRec."Cost Price (LCY)" := "Unit Cost";
                ServCostPlusRec."Basic Price (LCY)" := "Unit Cost";
                ServCostPlusRec."Basic Price Found at" := TABLECAPTION;
                ServCostPlusRec."Sales Price (LCY)" := ServCostPlusRec."Basic Price (LCY)";
                ServCostPlusRec.VALIDATE("Surcharge %", ServCostPlusRec.GetSurcharge);
                IF "Item No." <> '' THEN
                  ServCostPlusRec.VALIDATE("Item No.", "Item No.");
                ServCostPlusRec.VALIDATE("Unit of Measure", "Unit of Measure Code");
                ServCostPlusRec.VALIDATE(Quantity, Quantity);
                // Cannot use "Document No.". Should use Journal Template Name/Journal Batch Name
      //          ServCostPlusRec."Source Document" := "Document No.";
      //          IF NOT "Cost Plus Entry Created" THEN
      //            ServCostPlusRec."Source Line" := "Line No.";
                ServCostPlusRec.MODIFY(TRUE);
                ServCostPlusRec.DetermineRemovalContribution(FALSE);
              END;
            DATABASE::"Project Cost Plus Entry":
              BEGIN
                ProjCostPlusRec.LOCKTABLE;
                ProjCostPlusRec.SETRANGE("Project No.", g_code1);
                ProjCostPlusRec.SETRANGE(Principal, g_code2);
                ProjCostPlusRec.SETRANGE("Commission No.",g_code3);
                ProjCostPlusRec.SETRANGE("Settl.Sheet No.", g_code4);
                IF ProjCostPlusRec.FINDLAST THEN
                  CurrLino := ProjCostPlusRec."Line No."
                ELSE
                  CurrLino := 0;

                ProjCostPlusRec.INIT;
                ProjCostPlusRec."Project No." := g_code1;
                ProjCostPlusRec.Principal := g_code2;
                ProjCostPlusRec."Commission No." := g_code3;
                ProjCostPlusRec."Settl.Sheet No." := g_code4;
                ProjCostPlusRec."Line No." := CurrLino + 10000;
                CurrLino := ProjCostPlusRec."Line No.";
                ProjCostPlusRec.INSERT(TRUE);

                ProjCostPlusRec.Element := Element;
                ProjCostPlusRec.DetermineVATProdPostingGroup;  //db, 20-08-07
                ProjCostPlusRec.Description := Description;

                //db, 05-07-05: set defaults for cost object without item code
                ProjCostPlusRec."Cost Object" := "Shortcut Dimension 2 Code";
                ProjCostPlusRec."Cost Component" := "Cost Component";
                ProjCostPlusRec."Cost Price" := "Unit Cost";
                ProjCostPlusRec."Basic Price" := "Unit Cost";
                ProjCostPlusRec."Sales Price" := ProjCostPlusRec."Basic Price";
                ProjCostPlusRec.VALIDATE("Surcharge %", ProjCostPlusRec.GetSurcharge);
                IF "Item No." <> '' THEN
                  ProjCostPlusRec.VALIDATE("Item No.", "Item No.");
                ProjCostPlusRec.VALIDATE("Unit of Measure", "Unit of Measure Code");
                ProjCostPlusRec.VALIDATE(Quantity, Quantity);
      //          ProjCostPlusRec."Source Document" := "Document No.";
      //          IF NOT "Cost Plus Entry Created" THEN
      //            ProjCostPlusRec."Source Line" := "Line No.";
                ProjCostPlusRec.MODIFY(TRUE);
                ProjCostPlusRec.DetermineRemovalContribution;
              END;
            ELSE
              ErrorFound := TRUE;
          END;
        UNTIL NEXT = 0;
      END;

      IF ErrorFound THEN BEGIN
        MESSAGE(Text001);
      END ELSE BEGIN
        ItemJournalLine.MODIFYALL("Cost Plus Entry Created", TRUE);
        ItemJournalLine.MARKEDONLY(FALSE);
      END;
      ItemJournalLine.CLEARMARKS;
      COMMIT;
    END;

    PROCEDURE CopyProjInventToShippingLine@1100525018(VAR MarkedLine@1100525000 : Record 11012670);
    VAR
      ShippingOrderLine@1100525001 : Record 11071885;
      RecRef@1100525003 : RecordRef;
    BEGIN
      //db, 13-07-15: C009868
      IF MarkedLine.COUNT = 0 THEN
        ERROR(Text041);

      MarkNo := MarkedLine.COUNT;
      CurrLino := g_int2;
      PrevLino := 0;
      Gap := 0;

      ShippingOrderLine.SETRANGE("Document No.", g_code1);
      IF ShippingOrderLine.GET(g_code1, CurrLino) THEN BEGIN
        ShippingOrderLine.SETFILTER("Line No.", '<%1', CurrLino);
        IF ShippingOrderLine.FINDLAST THEN
          PrevLino := ShippingOrderLine."Line No.";
        ShippingOrderLine.SETRANGE("Line No.");
        CheckGap;
      END;
      IF Gap = 0 THEN BEGIN
        Gap := 10000;
        IF ShippingOrderLine.FINDLAST THEN
          CurrLino := ShippingOrderLine."Line No.";
      END;
      ShippingOrderLine.RESET;

      MarkedLine.FINDFIRST;
      REPEAT
        ShippingOrderLine.INIT; //C015243
        ShippingOrderLine."Document No." := g_code1;
        ShippingOrderLine."Line No." := CurrLino + Gap;
        CurrLino := ShippingOrderLine."Line No.";
      //ShippingOrderLine."Source Line No." := MarkedLine."Line No."; //C015243
        RecRef.GETTABLE(MarkedLine);
        ShippingOrderLine.FillShipmentLine(RecRef, FALSE);
        ShippingOrderLine.INSERT;
      UNTIL MarkedLine.NEXT = 0;
      COMMIT;
    END;

    PROCEDURE CopySalesLineToShippingLine@1100525011(VAR MarkedSalesLine@1100525000 : Record 37);
    VAR
      ShippingOrderLine@1100525001 : Record 11071885;
      RecRef@1100525003 : RecordRef;
    BEGIN
      IF MarkedSalesLine.COUNT = 0 THEN
        ERROR(Text041);

      MarkNo := MarkedSalesLine.COUNT;
      CurrLino := g_int2;
      PrevLino := 0;
      Gap := 0;

      ShippingOrderLine.SETRANGE("Document No.", g_code1);
      IF ShippingOrderLine.GET(g_code1, CurrLino) THEN BEGIN
        ShippingOrderLine.SETFILTER("Line No.", '<%1', CurrLino);
        IF ShippingOrderLine.FINDLAST THEN
          PrevLino := ShippingOrderLine."Line No.";
        ShippingOrderLine.SETRANGE("Line No.");
        CheckGap;
      END;
      IF Gap = 0 THEN BEGIN
        Gap := 10000;
        IF ShippingOrderLine.FINDLAST THEN
          CurrLino := ShippingOrderLine."Line No.";
      END;
      ShippingOrderLine.RESET;

      MarkedSalesLine.FINDFIRST;
      REPEAT
        ShippingOrderLine.INIT; //C015243
        ShippingOrderLine."Document No." := g_code1;
        ShippingOrderLine."Line No." := CurrLino + Gap;
        CurrLino := ShippingOrderLine."Line No.";
      //ShippingOrderLine."Source Line No." := MarkedSalesLine."Line No."; //C015243
        RecRef.GETTABLE(MarkedSalesLine);
        ShippingOrderLine.FillShipmentLine(RecRef, FALSE);
        ShippingOrderLine.INSERT;
      UNTIL MarkedSalesLine.NEXT = 0;
      COMMIT;
    END;

    PROCEDURE CopyPurchLineToShippingLine@1100525010(VAR MarkedPurchaseLine@1100525000 : Record 39);
    VAR
      ShippingOrderLine@1100525001 : Record 11071885;
      RecRef@1100525003 : RecordRef;
    BEGIN
      IF MarkedPurchaseLine.COUNT = 0 THEN
        ERROR(Text041);

      MarkNo := MarkedPurchaseLine.COUNT;
      CurrLino := g_int2;
      PrevLino := 0;
      Gap := 0;

      ShippingOrderLine.SETRANGE("Document No.", g_code1);
      IF ShippingOrderLine.GET(g_code1, CurrLino) THEN BEGIN
        ShippingOrderLine.SETFILTER("Line No.", '<%1', CurrLino);
        IF ShippingOrderLine.FINDLAST THEN
          PrevLino := ShippingOrderLine."Line No.";
        ShippingOrderLine.SETRANGE("Line No.");
        CheckGap;
      END;
      IF Gap = 0 THEN BEGIN
        Gap := 10000;
        IF ShippingOrderLine.FINDLAST THEN
          CurrLino := ShippingOrderLine."Line No.";
      END;
      ShippingOrderLine.RESET;

      MarkedPurchaseLine.FINDFIRST;
      REPEAT
        ShippingOrderLine.INIT; //C015243
        ShippingOrderLine."Document No." := g_code1;
        ShippingOrderLine."Line No." := CurrLino + Gap;
        CurrLino := ShippingOrderLine."Line No.";
      //ShippingOrderLine."Source Line No." := MarkedPurchaseLine."Line No."; //C015243.o
        RecRef.GETTABLE(MarkedPurchaseLine);
        ShippingOrderLine.FillShipmentLine(RecRef, FALSE);
        ShippingOrderLine.INSERT;
      UNTIL MarkedPurchaseLine.NEXT = 0;
      COMMIT;
    END;

    PROCEDURE CopyServiceObjects@1100526201(VAR MarkedServiceObject@1100526200 : Record 11071691);
    VAR
      ContractObject@1100526201 : Record 11071702;
      ProjectBuildingObjectRel@1100528600 : Record 11071919;
      TryOutSuccessor@1100409000 : Record 11012761;
      ServiceLocStructureLine@1100528601 : Record 11071720;
      LastLineNo@1100409001 : Integer;
    BEGIN
      IF MarkedServiceObject.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Contract Object":
          BEGIN
            MarkedServiceObject.FINDSET;
            REPEAT
              ContractObject.INIT;
              ContractObject.VALIDATE("Service Contract No.", g_code1);
              ContractObject."Service Object No." := '';
              ContractObject.VALIDATE("Service Object No.", MarkedServiceObject."No.");
              ContractObject.INSERT(TRUE);
            UNTIL MarkedServiceObject.NEXT = 0;
            COMMIT;
          END;
        DATABASE::"Project-Building-Object Rel.":
          BEGIN
            MarkedServiceObject.FINDSET;
            REPEAT
              ProjectBuildingObjectRel.INIT;
              ProjectBuildingObjectRel."Project No." := g_code1;
              ProjectBuildingObjectRel."Building Code" := g_code2;
              ProjectBuildingObjectRel.VALIDATE("Object No.", MarkedServiceObject."No.");
              ProjectBuildingObjectRel.INSERT(TRUE);
            UNTIL MarkedServiceObject.NEXT = 0;
            COMMIT;
          END;
        //kzwerver, 120823, sn, #T000649
        DATABASE::"Try-out Successor": BEGIN
          TryOutSuccessor.SETRANGE("Try-out No.", g_code1);
          TryOutSuccessor.SETRANGE("Try-out Quote", g_code2);
          IF (TryOutSuccessor.FINDLAST) THEN
            LastLineNo := TryOutSuccessor."Line No.";
          MarkedServiceObject.FINDSET;
          REPEAT
            LastLineNo += 10000;
            TryOutSuccessor.INIT;
            TryOutSuccessor."Try-out No." := g_code1;
            TryOutSuccessor."Try-out Quote" := g_code2;
            TryOutSuccessor."Line No." := LastLineNo;
            TryOutSuccessor.VALIDATE("Service Object No.", MarkedServiceObject."No.");
            TryOutSuccessor.INSERT(TRUE);
          UNTIL (MarkedServiceObject.NEXT = 0);
          COMMIT;
        END;
        //kzwerver, 120823, en, #T000649
        DATABASE::"Service Loc. Structure Line":
          BEGIN
            IF MarkedServiceObject.FINDSET THEN
              REPEAT
                ServiceLocStructureLine.INIT;
                ServiceLocStructureLine.VALIDATE("Service Location No.", g_code1);
                ServiceLocStructureLine.VALIDATE("Structure No.", g_int1);
                ServiceLocStructureLine.VALIDATE("No.", g_code2);
                ServiceLocStructureLine.VALIDATE("Service Object No.", MarkedServiceObject."No.");
                ServiceLocStructureLine.INSERT(TRUE);
              UNTIL MarkedServiceObject.NEXT = 0;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE CopyInspectionLines@1100528601(VAR MarkedBaseServiceInspLine@1100528600 : Record 11071748);
    VAR
      ServiceInspectionLine@1100528601 : Record 11071751;
    BEGIN
      IF MarkedBaseServiceInspLine.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Service Inspection Line":
          BEGIN
            MarkNo := MarkedBaseServiceInspLine.COUNT;
            CurrLino := g_int2;
            PrevLino := 0;
            Gap := 0;

            ServiceInspectionLine.SETRANGE("Inspection Type", g_int1);
            ServiceInspectionLine.SETRANGE("Service Contract No.", g_code1);
            ServiceInspectionLine.SETRANGE(Code, g_code2);
            ServiceInspectionLine.SETRANGE("Belongs to Scheme", g_code3);
            ServiceInspectionLine.SETRANGE("Belongs to Base Insp. List", g_code4);
            ServiceInspectionLine.SETRANGE("Index Date", g_date1);
            IF ServiceInspectionLine.GET(g_int1, g_code1, g_code2, g_code3, g_code4, g_date1, g_int2) THEN BEGIN
              ServiceInspectionLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF ServiceInspectionLine.FINDLAST THEN
                PrevLino := ServiceInspectionLine."Line No.";
              ServiceInspectionLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ServiceInspectionLine.FINDLAST THEN
                CurrLino := ServiceInspectionLine."Line No.";
            END;

            MarkedBaseServiceInspLine.FINDSET;
            REPEAT
              ServiceInspectionLine.INIT;
              ServiceInspectionLine.VALIDATE("Inspection Type", g_int1);
              ServiceInspectionLine.VALIDATE("Service Contract No.", g_code1);
              ServiceInspectionLine.VALIDATE(Code, g_code2);
              ServiceInspectionLine.VALIDATE("Belongs to Scheme", g_code3);
              ServiceInspectionLine.VALIDATE("Belongs to Base Insp. List", g_code4);
              ServiceInspectionLine.VALIDATE("Index Date", g_date1);
              ServiceInspectionLine.VALIDATE("Line No.", CurrLino + Gap);
              CurrLino := ServiceInspectionLine."Line No.";
              ServiceInspectionLine.VALIDATE(Type, ServiceInspectionLine.Type::Line);
              ServiceInspectionLine.VALIDATE("Inspection Code", MarkedBaseServiceInspLine.Code);
              ServiceInspectionLine.VALIDATE(Description, MarkedBaseServiceInspLine.Description);
              ServiceInspectionLine.VALIDATE("Field Type", MarkedBaseServiceInspLine."Field Type");
              ServiceInspectionLine.VALIDATE("Unit Of Measure", MarkedBaseServiceInspLine."Unit Of Measure");
              ServiceInspectionLine.INSERT(TRUE);
            UNTIL MarkedBaseServiceInspLine.NEXT = 0;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE CopyPlantInspectionLines@1100528800(VAR MarkedBasePlantInspLine@1100528600 : Record 11072679);
    VAR
      PlantInspectionLine@1100528601 : Record 11072684;
    BEGIN
      IF MarkedBasePlantInspLine.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Plant Inspection Line":
          BEGIN
            MarkNo := MarkedBasePlantInspLine.COUNT;
            CurrLino := g_int2;
            PrevLino := 0;
            Gap := 0;

            PlantInspectionLine.SETRANGE(Level, g_int1);
            PlantInspectionLine.SETRANGE("Plant Type", g_code1);
            PlantInspectionLine.SETRANGE("Level Code", g_code2);
            PlantInspectionLine.SETRANGE("Maintenance Scheme", g_code3);
            PlantInspectionLine.SETRANGE("Base Inspection List", g_code4);
            PlantInspectionLine.SETRANGE("Index Date", g_date1);
            IF PlantInspectionLine.GET(g_int1, g_code1, g_code2, g_code3, g_code4, g_date1, g_int2) THEN BEGIN
              PlantInspectionLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF PlantInspectionLine.FINDLAST THEN
                PrevLino := PlantInspectionLine."Line No.";
              PlantInspectionLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF PlantInspectionLine.FINDLAST THEN
                CurrLino := PlantInspectionLine."Line No.";
            END;

            MarkedBasePlantInspLine.FINDSET;
            REPEAT
              PlantInspectionLine.INIT;
              PlantInspectionLine.VALIDATE(Level, g_int1);
              PlantInspectionLine.VALIDATE("Plant Type", g_code1);
              PlantInspectionLine.VALIDATE("Level Code", g_code2);
              PlantInspectionLine.VALIDATE("Maintenance Scheme", g_code3);
              PlantInspectionLine.VALIDATE("Base Inspection List", g_code4);
              PlantInspectionLine.VALIDATE("Index Date", g_date1);
              PlantInspectionLine.VALIDATE("Line No.", CurrLino + Gap);
              CurrLino := PlantInspectionLine."Line No.";
              PlantInspectionLine.VALIDATE(Type, PlantInspectionLine.Type::Line);
              PlantInspectionLine.VALIDATE("Inspection Code", MarkedBasePlantInspLine.Code);
              PlantInspectionLine.VALIDATE(Description, MarkedBasePlantInspLine.Description);
              PlantInspectionLine.VALIDATE("Field Type", MarkedBasePlantInspLine."Field Type");
              PlantInspectionLine.VALIDATE("Unit Of Measure", MarkedBasePlantInspLine."Unit Of Measure");
              PlantInspectionLine.INSERT(TRUE);
            UNTIL MarkedBasePlantInspLine.NEXT = 0;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE CopyObjSpecificationLines@1100528604(VAR MarkedBaseObjSpecificationLine@1100528600 : Record 11071779);
    VAR
      ObjectSpecificationLine@1100528601 : Record 11071781;
    BEGIN
      IF MarkedBaseObjSpecificationLine.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Object Specification Line",
        DATABASE::"Service Order Obj. Spec. Line":
          BEGIN
            MarkNo := MarkedBaseObjSpecificationLine.COUNT;
            CurrLino := g_int2;
            PrevLino := 0;
            Gap := 0;

            ObjectSpecificationLine.SETRANGE("Specification Type", g_int1);
            ObjectSpecificationLine.SETRANGE(Code, g_code1);
            ObjectSpecificationLine.SETRANGE("Object Line No.", g_int3);  //DP00118
            IF ObjectSpecificationLine.GET(g_int1, g_code1, g_int3, g_int2) THEN BEGIN  //DP00118
              ObjectSpecificationLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF ObjectSpecificationLine.FINDLAST THEN
                PrevLino := ObjectSpecificationLine."Line No.";
              ObjectSpecificationLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ObjectSpecificationLine.FINDLAST THEN
                CurrLino := ObjectSpecificationLine."Line No.";
            END;

            MarkedBaseObjSpecificationLine.FINDSET;
            REPEAT
              ObjectSpecificationLine.INIT;
              ObjectSpecificationLine.VALIDATE("Specification Type", g_int1);
              ObjectSpecificationLine.VALIDATE(Code, g_code1);
              ObjectSpecificationLine."Object Line No." := g_int3;  //DP00118
              ObjectSpecificationLine.VALIDATE("Line No.", CurrLino + Gap);
              CurrLino := ObjectSpecificationLine."Line No.";
              ObjectSpecificationLine.VALIDATE(Type, ObjectSpecificationLine.Type::Line);
              ObjectSpecificationLine.VALIDATE("Specification Code", MarkedBaseObjSpecificationLine.Code);
              ObjectSpecificationLine.VALIDATE(Description, MarkedBaseObjSpecificationLine.Description);
              ObjectSpecificationLine.VALIDATE("Field Type", MarkedBaseObjSpecificationLine."Field Type");
              ObjectSpecificationLine.VALIDATE("Unit Of Measure", MarkedBaseObjSpecificationLine."Unit Of Measure");
              ObjectSpecificationLine.INSERT(TRUE);
            UNTIL MarkedBaseObjSpecificationLine.NEXT = 0;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE CopySurveyObjectSpecLines@1100528611(VAR MarkedBaseObjSpecificationLine@1100528600 : Record 11071779);
    VAR
      ServiceSurveyObjectSpec@1100528601 : Record 11071972;
    BEGIN
      IF MarkedBaseObjSpecificationLine.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Service Survey Object Spec.":
          BEGIN
            MarkNo := MarkedBaseObjSpecificationLine.COUNT;
            CurrLino := g_int2;
            PrevLino := 0;
            Gap := 0;

            ServiceSurveyObjectSpec.SETRANGE("Survey No.", g_code1);
            ServiceSurveyObjectSpec.SETRANGE("Location Code", g_code2);
            ServiceSurveyObjectSpec.SETRANGE("Seq. No.", g_int1);
            IF ServiceSurveyObjectSpec.GET(g_code1, g_code2, g_int1, g_int2) THEN BEGIN
              ServiceSurveyObjectSpec.SETFILTER("Line No.", '<%1', CurrLino);
              IF ServiceSurveyObjectSpec.FINDLAST THEN
                PrevLino := ServiceSurveyObjectSpec."Line No.";
              ServiceSurveyObjectSpec.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ServiceSurveyObjectSpec.FINDLAST THEN
                CurrLino := ServiceSurveyObjectSpec."Line No.";
            END;

            MarkedBaseObjSpecificationLine.FINDSET;
            REPEAT
              ServiceSurveyObjectSpec.INIT;
              ServiceSurveyObjectSpec.VALIDATE("Survey No.", g_code1);
              ServiceSurveyObjectSpec.VALIDATE("Location Code", g_code2);
              ServiceSurveyObjectSpec.VALIDATE("Seq. No.", g_int1);
              ServiceSurveyObjectSpec.VALIDATE("Line No.", CurrLino + Gap);
              CurrLino := ServiceSurveyObjectSpec."Line No.";
              ServiceSurveyObjectSpec.VALIDATE(Type, ServiceSurveyObjectSpec.Type::Line);
              ServiceSurveyObjectSpec.VALIDATE("Specification Code", MarkedBaseObjSpecificationLine.Code);
              ServiceSurveyObjectSpec.VALIDATE(Description, MarkedBaseObjSpecificationLine.Description);
              ServiceSurveyObjectSpec.VALIDATE("Field Type", MarkedBaseObjSpecificationLine."Field Type");
              ServiceSurveyObjectSpec.VALIDATE("Unit Of Measure", MarkedBaseObjSpecificationLine."Unit Of Measure");
              ServiceSurveyObjectSpec.INSERT(TRUE);
            UNTIL MarkedBaseObjSpecificationLine.NEXT = 0;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE CopyComplexSpecLines@1100528302(VAR MarkedBaseComplexBuildingSpec@1100528300 : Record 11071817);
    VAR
      ComplexBuildingSpecification@1100528301 : Record 11071920;
    BEGIN
      IF MarkedBaseComplexBuildingSpec.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Base Complex/Building Spec.":
          BEGIN
            MarkNo := MarkedBaseComplexBuildingSpec.COUNT;
            CurrLino := g_int2;
            PrevLino := 0;
            Gap := 0;

            ComplexBuildingSpecification.SETRANGE("Specification Type", g_int1);
            ComplexBuildingSpecification.SETRANGE(Code, g_code1);
            IF ComplexBuildingSpecification.GET(g_int1, g_code1, g_int2) THEN BEGIN
              ComplexBuildingSpecification.SETFILTER("Line No.", '<%1', CurrLino);
              IF ComplexBuildingSpecification.FINDLAST THEN
                PrevLino := ComplexBuildingSpecification."Line No.";
              ComplexBuildingSpecification.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF ComplexBuildingSpecification.FINDLAST THEN
                CurrLino := ComplexBuildingSpecification."Line No.";
            END;

            MarkedBaseComplexBuildingSpec.FINDSET;
            REPEAT
              ComplexBuildingSpecification.TRANSFERFIELDS(MarkedBaseComplexBuildingSpec);
              ComplexBuildingSpecification.VALIDATE("Specification Type", g_int1);
              ComplexBuildingSpecification.VALIDATE(Code, g_code1);
              ComplexBuildingSpecification."Line Type" := ComplexBuildingSpecification."Line Type"::Line;
              ComplexBuildingSpecification.VALIDATE("Line No.", CurrLino + Gap);
              CurrLino := ComplexBuildingSpecification."Line No.";
              ComplexBuildingSpecification.INSERT(TRUE);
            UNTIL MarkedBaseComplexBuildingSpec.NEXT = 0;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE CopyBuildings@1100528606(VAR MarkedBuilding@1100528600 : Record 11071819);
    VAR
      ProjectBuildingRelation@1100528601 : Record 11071918;
    BEGIN
      IF MarkedBuilding.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Project-Building Relation":
          BEGIN
            IF MarkedBuilding.FINDSET THEN
              REPEAT
                ProjectBuildingRelation.INIT;
                ProjectBuildingRelation.VALIDATE("Project No.", g_code1);
                ProjectBuildingRelation.VALIDATE("Building Code", MarkedBuilding.Code);
                ProjectBuildingRelation.INSERT(TRUE);
              UNTIL MarkedBuilding.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE CopyBuildingObjects@1100528607(VAR MarkedBuildingObject@1100528600 : Record 11071820);
    VAR
      ProjectBuildingObjectRel@1100528601 : Record 11071919;
    BEGIN
      IF MarkedBuildingObject.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Project-Building-Object Rel.":
          BEGIN
            IF MarkedBuildingObject.FINDSET THEN
              REPEAT
                ProjectBuildingObjectRel.INIT;
                ProjectBuildingObjectRel.VALIDATE("Project No.", g_code1);
                ProjectBuildingObjectRel.VALIDATE("Building Code", g_code2);
                ProjectBuildingObjectRel.VALIDATE("Object No.", MarkedBuildingObject."Object No.");
                ProjectBuildingObjectRel.INSERT(TRUE);
              UNTIL MarkedBuildingObject.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE CopyLocSpecificationLines@1100528610(VAR MarkedBaseLocationSpecLine@1100528600 : Record 11071959);
    VAR
      LocationSpecificationLine@1100528601 : Record 11071961;
    BEGIN
      IF MarkedBaseLocationSpecLine.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Location Specification Line":
          BEGIN
            MarkNo := MarkedBaseLocationSpecLine.COUNT;
            CurrLino := g_int2;
            PrevLino := 0;
            Gap := 0;

            LocationSpecificationLine.SETRANGE("Service Location No.", g_code1);
            IF LocationSpecificationLine.GET(g_code1, g_int1) THEN BEGIN
              LocationSpecificationLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF LocationSpecificationLine.FINDLAST THEN
                PrevLino := LocationSpecificationLine."Line No.";
              LocationSpecificationLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF LocationSpecificationLine.FINDLAST THEN
                CurrLino := LocationSpecificationLine."Line No.";
            END;

            MarkedBaseLocationSpecLine.FINDSET;
            REPEAT
              LocationSpecificationLine.INIT;
              LocationSpecificationLine.VALIDATE("Service Location No.", g_code1);
              LocationSpecificationLine.VALIDATE("Line No.", CurrLino + Gap);
              CurrLino := LocationSpecificationLine."Line No.";
              LocationSpecificationLine.VALIDATE(Type, LocationSpecificationLine.Type::Line);
              LocationSpecificationLine.VALIDATE("Specification Code", MarkedBaseLocationSpecLine.Code);
              LocationSpecificationLine.VALIDATE(Description, MarkedBaseLocationSpecLine.Description);
              LocationSpecificationLine.VALIDATE("Field Type", MarkedBaseLocationSpecLine."Field Type");
              LocationSpecificationLine.VALIDATE("Unit Of Measure", MarkedBaseLocationSpecLine."Unit Of Measure");
              LocationSpecificationLine.INSERT(TRUE);
            UNTIL MarkedBaseLocationSpecLine.NEXT = 0;
            COMMIT;
          END;
      END;
    END;

    PROCEDURE CopyResources@1100528614(VAR MarkedResourceWOP@1100528600 : Record 11229278);
    VAR
      CollectivePlanTeam@1100528601 : Record 11071979;
    BEGIN
      IF MarkedResourceWOP.ISEMPTY THEN
        ERROR(Text041);

      CASE g_table OF
        DATABASE::"Collective Plan Team":
          BEGIN
          END;
      END;
    END;

    PROCEDURE GenerateCostPlus@1100528501(PurchLine@1100528500 : Record 39;QtyToInvoice@1100528501 : Decimal;SerialNo@1100528502 : Code[40];LotNo@1100528503 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528505 : Record 11012819;
      ProjLedgerEntry@1100528504 : Record 11072005;
    BEGIN
      //DP00121
      CASE g_table OF
        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            //db, 10-01-11: M22696 (use same function as report 11012801)
            FillServEntryForCostPlus(PurchLine,ServiceLedgerEntry,QtyToInvoice);
            ServCostPlusRec.GenerateCostPlusFromServEntry(ServiceLedgerEntry,
              //db.sn, 07-07-11: M21954
              //FALSE,   //HistCostPriceItem
              //FALSE,   //HistCostPriceCostObject
              //db.en, 07-07-11: M21954
              TRUE,    //ConvertUnit
              FALSE,   //AutoTranslate
              SerialNo,//DP00121
              LotNo);  //DP00121
          END;
        DATABASE::"Project Cost Plus Entry":
          BEGIN
            //db, 10-01-11: M22696 (use same function as report 11012013)
            FillProjEntryForCostPlus(PurchLine,ProjLedgerEntry,QtyToInvoice);
            ProjCostPlusRec.GenerateCostPlusFromProjEntry(ProjLedgerEntry,
              g_code1, //ProjCde,
              g_code2, //CustCde,
              g_code3, //CommCde,
              g_code4, //SettlCde,
              FALSE,   //RestQuanLedgEntryAlso
              0D,      //RestQuantityStartDate
              //db.sn, 07-07-11: M21954
              //FALSE,   //HistCostPriceItem
              //FALSE,   //HistCostPriceCostObject
              //db.en, 07-07-11: M21954
              TRUE,    //ConvertUnit
              FALSE,   //AutoTranslate
              SerialNo,//DP00121
              LotNo);  //DP00121
          END;
        ELSE
          ErrorFound := TRUE;
      END;
    END;

    PROCEDURE FillServEntryForCostPlus@1100530000(VAR PurchLineRec@1100530000 : Record 39;VAR ServEntryRec@1100530002 : Record 11012819;QtyToInvoice@1100409000 : Decimal);
    VAR
      ServiceSetup@1100525000 : Record 11012800;
      UnitCost@1100409001 : Decimal;
    BEGIN
      //db, 10-01-11: M22696
      ServiceSetup.GET;
      WITH PurchLineRec DO BEGIN
        PurchHeaderRec.GET("Document Type", "Document No.");  //db, 31-08-12: C002025
        ServEntryRec.INIT;
        ServEntryRec."Entry No." := 0;  //trigger to fill Document Line for Cost Plus
        ServEntryRec."Service Order No." := PurchLineRec."Service Order No.";
        ServEntryRec.Description := Description;
        ServEntryRec."Item No." := "Item No.";
        ServEntryRec.Manufacturer := Manufacturer;
        ServEntryRec."Basic Item" := "Basic Item";
        ServEntryRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
        ServEntryRec."Trade Item" := "Trade Item";
        ServEntryRec."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ServEntryRec."Cost Component" := "Cost Component";
        ServEntryRec."Additional Cost" := "Additional Cost (Service)";
        ServEntryRec.Quantity := QtyToInvoice; //DP00121
        ServEntryRec."Unit of Measure Code" := "Unit of Measure Code";
        //db.sn, 20-09-11: M28558
        PurchHeaderRec.GET("Document Type","Document No.");
        IF PurchHeaderRec."Currency Code" = '' THEN BEGIN
          CurrencyRec.InitRoundingPrecision;
        END ELSE BEGIN
          PurchHeaderRec.TESTFIELD("Currency Factor");
          CurrencyRec.GET(PurchHeaderRec."Currency Code");
          CurrencyRec.TESTFIELD("Amount Rounding Precision");
        END;
        IF PurchHeaderRec."Amounts only" AND GetQtyToReceive THEN  //db, 31-08-12: C002025
          UnitCost := "Amnt. to Receive"
        ELSE
          UnitCost := "Direct Unit Cost";
        ServEntryRec."Unit Cost (LCY)" := ROUND(CurrExchRateRec.ExchangeAmtFCYToLCY(
          1, PurchHeaderRec."Job No.", GetDate, "Currency Code",
          UnitCost, PurchHeaderRec."Currency Factor",FALSE),
          CurrencyRec."Amount Rounding Precision");
        ServEntryRec."Unit Cost" := UnitCost;
        //db.en, 20-09-11: M28558
        ServEntryRec."Document No." := "Document No.";
        ServEntryRec."Document Line No." := "Line No.";
        ServEntryRec."Posting Date" := WORKDATE;
        ServEntryRec."Wage Component" := "Wage Component";  //db, 10-08-11: M28631
      END;
    END;

    PROCEDURE FillProjEntryForCostPlus@1100530001(VAR PurchLineRec@1100530000 : Record 39;VAR ProjEntryRec@1100530002 : Record 11072005;QtyToInvoice@1100409000 : Decimal);
    VAR
      UnitCost@1100409001 : Decimal;
    BEGIN
      //db, 10-01-11: M22696
      WITH PurchLineRec DO BEGIN
        PurchHeaderRec.GET("Document Type", "Document No.");  //db, 31-08-12: C002025
        ProjEntryRec.INIT;
        ProjEntryRec."Entry No." := 0;  //trigger to fill Document Line for Cost Plus
        ProjEntryRec."Job No." := g_code1;
        IF "Job No." = g_code1 THEN BEGIN
          ProjEntryRec.Element := Element;
          ProjEntryRec."Extension Contract":= "Extension Contract";
        END;
        ProjEntryRec.Description := Description;
        ProjEntryRec."Item No." := "Item No.";
        ProjEntryRec.Manufacturer := Manufacturer;
        ProjEntryRec."Basic Item" := "Basic Item";
        ProjEntryRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
        ProjEntryRec."Trade Item" := "Trade Item";
        ProjEntryRec."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ProjEntryRec."Cost Component" := "Cost Component";
        ProjEntryRec.Quantity := QtyToInvoice; //DP00121
        ProjEntryRec."Unit of Measure Code" := "Unit of Measure Code";
        //db.sn, 20-09-11: M28558
        PurchHeaderRec.GET("Document Type","Document No.");
        IF PurchHeaderRec."Currency Code" = '' THEN BEGIN
          CurrencyRec.InitRoundingPrecision;
        END ELSE BEGIN
          PurchHeaderRec.TESTFIELD("Currency Factor");
          CurrencyRec.GET(PurchHeaderRec."Currency Code");
          CurrencyRec.TESTFIELD("Amount Rounding Precision");
        END;
        IF PurchHeaderRec."Amounts only" AND GetQtyToReceive THEN  //db, 31-08-12: C002025
          UnitCost := "Amnt. to Receive"
        ELSE
          UnitCost := "Direct Unit Cost";
        ProjEntryRec."Unit Cost (LCY)" := ROUND(CurrExchRateRec.ExchangeAmtFCYToLCY(  //*C000504.n
          1, PurchHeaderRec."Job No.", GetDate, "Currency Code",
          UnitCost, PurchHeaderRec."Currency Factor",FALSE),
          CurrencyRec."Amount Rounding Precision");
        ProjEntryRec."Unit Cost" := UnitCost;  //*C000504.n
        //db.en, 20-09-11: M28558
        ProjEntryRec."Document No." := "Document No.";
        ProjEntryRec."Document Line No." := "Line No.";
        ProjEntryRec."Posting Date" := WORKDATE;
        ProjEntryRec."Wage Component" := "Wage Component";  //db, 10-08-11: M28631
      END;
    END;

    PROCEDURE GetTrackingSpecification@1100528500(PurchLine@1100528500 : Record 39;GetQtyToReceive@1100528506 : Boolean);
    VAR
      ReservEntry@1100528501 : Record 337;
      NSReservEntry@1100528502 : Record 11071900;
      TrackingSpecification@1100528503 : Record 336;
      NSTrackingSpecification@1100528504 : Record 11071901;
      ItemTrackingLines@1100528505 : Page 6510;
    BEGIN
      //DP00121
      TempTrackingSpecification.RESET;
      TempTrackingSpecification.DELETEALL;

      IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
        ReservEntry.SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");

        ReservEntry.SETRANGE("Source ID",PurchLine."Document No.");
        ReservEntry.SETRANGE("Source Ref. No.",PurchLine."Line No.");
        ReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
        ReservEntry.SETRANGE("Source Subtype",PurchLine."Document Type");
        ReservEntry.SETRANGE("Source Batch Name",'');
        ReservEntry.SETRANGE("Source Prod. Order Line",0);

        ItemTrackingLines.AddReservEntriesToTempRecSet(ReservEntry,TempTrackingSpecification,FALSE,0);

        IF NOT GetQtyToReceive THEN BEGIN
          TrackingSpecification.SETCURRENTKEY(
            "Source ID","Source Type","Source Subtype",
            "Source Batch Name","Source Prod. Order Line","Source Ref. No.");

          TrackingSpecification.SETRANGE("Source ID",PurchLine."Document No.");
          TrackingSpecification.SETRANGE("Source Type",DATABASE::"Purchase Line");
          TrackingSpecification.SETRANGE("Source Subtype",PurchLine."Document Type");
          TrackingSpecification.SETRANGE("Source Batch Name",'');
          TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
          TrackingSpecification.SETRANGE("Source Ref. No.",PurchLine."Line No.");
          IF TrackingSpecification.FINDSET THEN
            REPEAT
              TempTrackingSpecification := TrackingSpecification;
              TempTrackingSpecification.INSERT;
            UNTIL TrackingSpecification.NEXT = 0;
        END;
      END ELSE BEGIN
        NSReservEntry.SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");

        NSReservEntry.SETRANGE("Source ID",PurchLine."Document No.");
        NSReservEntry.SETRANGE("Source Ref. No.",PurchLine."Line No.");
        NSReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
        NSReservEntry.SETRANGE("Source Subtype",PurchLine."Document Type");
        NSReservEntry.SETRANGE("Source Batch Name",'');
        NSReservEntry.SETRANGE("Source Prod. Order Line",0);

        ItemTrackingLines.AddNSReservEntriesToTempRecSet(NSReservEntry,TempTrackingSpecification,FALSE,0);

        IF NOT GetQtyToReceive THEN BEGIN
          NSTrackingSpecification.SETCURRENTKEY(
            "Source ID","Source Type","Source Subtype",
            "Source Batch Name","Source Prod. Order Line","Source Ref. No.");

          NSTrackingSpecification.SETRANGE("Source ID",PurchLine."Document No.");
          NSTrackingSpecification.SETRANGE("Source Type",DATABASE::"Purchase Line");
          NSTrackingSpecification.SETRANGE("Source Subtype",PurchLine."Document Type");
          NSTrackingSpecification.SETRANGE("Source Batch Name",'');
          NSTrackingSpecification.SETRANGE("Source Prod. Order Line",0);
          NSTrackingSpecification.SETRANGE("Source Ref. No.",PurchLine."Line No.");
          IF NSTrackingSpecification.FINDSET THEN
            REPEAT
              TempTrackingSpecification.TRANSFERFIELDS(NSTrackingSpecification,TRUE);
              TempTrackingSpecification.INSERT;
            UNTIL NSTrackingSpecification.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CopyEmployees@1100528402(VAR MarkedEmployee@1100528400 : Record 5200);
    VAR
      HourAccountingProjectLine@1100528402 : Record 11020225;
      HourAccountingProject@1100528401 : Record 11020224;
    BEGIN
      IF NOT MarkedEmployee.FINDSET THEN
        ERROR(Text041);

      MarkNo := MarkedEmployee.COUNT;
      CurrLino := g_int3;
      PrevLino := 0;
      Gap := 0;

      CASE g_table OF
        DATABASE::"Hour Accounting Project Line":
          BEGIN
            HourAccountingProject.GET(g_int1, g_int2, g_code1);
            HourAccountingProjectLine.LOCKTABLE;
            HourAccountingProjectLine.SETRANGE(Year, g_int1);
            HourAccountingProjectLine.SETRANGE(Week, g_int2);
            HourAccountingProjectLine.SETRANGE("Header Project No.", g_code1);
            IF HourAccountingProjectLine.GET(g_int1, g_int2, g_code1, CurrLino) THEN BEGIN
              HourAccountingProjectLine.SETFILTER("Line No.", '<%1', CurrLino);
              IF HourAccountingProjectLine.FINDLAST THEN
                PrevLino := HourAccountingProjectLine."Line No.";
              HourAccountingProjectLine.SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF HourAccountingProjectLine.FINDLAST THEN
                CurrLino := HourAccountingProjectLine."Line No.";
            END;
            REPEAT
              HourAccountingProjectLine.INIT;
              HourAccountingProjectLine.VALIDATE(Year, g_int1);
              HourAccountingProjectLine.VALIDATE(Week, g_int2);
              HourAccountingProjectLine.VALIDATE("Header Project No.", g_code1);
              HourAccountingProjectLine.VALIDATE(Type, g_int4);
              HourAccountingProjectLine."Line No." := CurrLino + Gap;
              CurrLino := HourAccountingProjectLine."Line No.";
              HourAccountingProjectLine.VALIDATE("Supplying Company", g_text1);
              HourAccountingProjectLine.VALIDATE("Employee No.", MarkedEmployee."No.");
              HourAccountingProjectLine.INSERT(TRUE);
            UNTIL MarkedEmployee.NEXT = 0;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

