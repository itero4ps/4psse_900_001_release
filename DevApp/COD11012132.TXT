OBJECT Codeunit 11012132 Consent Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm,
                TableData 38=rm,
                TableData 122=rm,
                TableData 124=rm;
    OnRun=VAR
            ConsentUserSetup@1100485000 : Record 11012229;
          BEGIN
            //**4PS01.sn
            IF ConsentUserSetup.READPERMISSION THEN
              Consent(TRUE)
            ELSE
              MESSAGE(Text010);
            //**4PS01.en
          END;

  }
  CODE
  {
    VAR
      TempConsentRec@1100485000 : TEMPORARY Record 11012226;
      Text000@1100485001 : TextConst 'ENU=You have %1 invoices waiting for consent. %2 of them are temporarily ignored.\View Invoices ?';
      Text001@1100485002 : TextConst 'ENU=The upper Consenter (%1) has already approved %2.\Consent can not be undone.';
      Text002@1100485003 : TextConst 'ENU=Already Invoiced. Consent can not be undone.';
      Text003@1100485004 : TextConst 'ENU=Payment is alread in Process. Consent can not be undone.';
      Text004@1100485005 : TextConst 'ENU=***';
      Text005@1100485008 : TextConst 'ENU=You are not the only Subsitute for User %1.';
      Text006@1100485007 : TextConst 'ENU=Substitute for USer %1 is not active.';
      Text007@1100485006 : TextConst 'ENU=No Consent Setup present for user %1.';
      Text008@1100485009 : TextConst 'ENU=There is no previous %1.';
      Text010@1100485011 : TextConst 'ENU=You are not authorized to read consent tables.';
      Text011@1100485012 : TextConst 'ENU=Consent is not set up.';
      ConsentRec@1100525000 : Record 11012226;
      DimensionManagement@1100528400 : Codeunit 408;
      TempTableBuild@1100525002 : Boolean;
      TempConsentRule@1100525001 : TEMPORARY Record 11012227;
      PurchSetupRec@1100525003 : Record 312;
      Text012@1210190000 : TextConst 'ENU=No %1 can be found. Please check %2 %3.';
      Text025@1100528201 : TextConst 'ENU=%1 is not a valid limit type for %2 %3.';
      Text129@1100528202 : TextConst 'ENU=No Approval Templates are enabled for document type %1.';
      Text300@1100528205 : TextConst;
      Text301@1100528206 : TextConst 'ENU=Approval flow already in process.';
      Text302@1100528208 : TextConst;
      Text303@1100528209 : TextConst;
      Text304@1100528210 : TextConst 'ENU=%1 %2 is already approved.\Start new approval flow?';
      PurchaseHeaderDCInfo@1100528200 : Record 6085767;
      DCApprovalsBridge@1100528203 : Codeunit 6085790;

    PROCEDURE PostPurchaseHeader@1100485001(PurchHeadRec@1100485000 : Record 38;PostedDocNo@1100485001 : Code[20]);
    VAR
      ConsentRec@1100485002 : Record 11012226;
      ConsInvRec@1100485003 : Record 11012226;
      DocType@1100528401 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';
      ConsentProcess@1100528402 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      AmountLCY@1100528400 : Decimal;
    BEGIN
      PurchSetupRec.GET;
      //**4PS.sn
      IF PurchSetupRec."Use Consent Approval Entries" AND
         PurchSetupRec."Use Consent Purchase Invoices" THEN
        EXIT;
      //

      IF NOT PurchSetupRec."Use Consent Purchase Invoices" THEN
        EXIT;

      WITH PurchHeadRec DO BEGIN
        CALCFIELDS(Amount);
        AmountLCY := CalcAmountLCY(
          Amount, PurchHeadRec."Currency Code", PurchHeadRec."Currency Factor",
          PurchHeadRec."Job No.", PurchHeadRec."Posting Date");
        CASE "Document Type" OF
          "Document Type"::Invoice:
            BEGIN
              ConsentRec.SETRANGE("Document Type",ConsentRec."Document Type"::Invoice);
              ConsentRec.SETRANGE("Document No.","No.");
              IF ConsentRec.FINDSET THEN BEGIN
                REPEAT
                  ConsInvRec := ConsentRec;
                  ConsInvRec."Document Type" := ConsInvRec."Document Type"::"Posted Invoice";
                  ConsInvRec."Document No." := PostedDocNo;
                  ConsInvRec."Vendor No." := "Buy-from Vendor No."; //**4PS04.n
                  ConsInvRec.INSERT;
                UNTIL ConsentRec.NEXT = 0;
                ConsentRec.DELETEALL; //**4PS03.n
              END;
              DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
              DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);
              CreateConsentLines(
                DocType::"Posted Invoice",ConsentProcess::Invoice,0,PostedDocNo,0,DimArrayCde,"Job No.",'',
                "Service Order No.",'',"Buy-from Vendor No.",'','',"Location Code",'',AmountLCY,0,0,FALSE);
            END;
          PurchHeadRec."Document Type"::"Credit Memo":
            BEGIN
              ConsentRec.SETRANGE("Document Type",ConsentRec."Document Type"::"Credit Memo");
              ConsentRec.SETRANGE("Document No.","No.");
              IF ConsentRec.FINDSET THEN BEGIN
                REPEAT
                  ConsInvRec := ConsentRec;
                  ConsInvRec."Document Type" :=  ConsInvRec."Document Type"::"Posted Credit Memo";
                  ConsInvRec."Document No." := PostedDocNo;
                  ConsInvRec."Vendor No." := "Buy-from Vendor No."; //**4PS04.n
                  ConsInvRec.INSERT;
                UNTIL ConsentRec.NEXT = 0;
                ConsentRec.DELETEALL; //**4PS03.n
              END;
              DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
              DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);
              CreateConsentLines(
                DocType::"Posted Credit Memo",ConsentProcess::"Credit Memo",0,PostedDocNo,0,DimArrayCde,"Job No.",
                '',"Service Order No.",'',"Buy-from Vendor No.",'','',"Location Code",'',AmountLCY,0,0,FALSE);
            END;
        END;
      END;
    END;

    PROCEDURE HandlePurchaseHeader@1100485000(VAR PurchHeader@1100485000 : Record 38;DocType@1100485002 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';TempBln@1100485001 : Boolean);
    VAR
      ConsentRec@1100485003 : Record 11012226;
      PurchaseLineRec@1100485004 : Record 39;
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      ConsentProcess@1100525001 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      AmountLCY@1100528400 : Decimal;
    BEGIN
      WITH PurchHeader DO BEGIN
        CALCFIELDS(Amount);
        AmountLCY := CalcAmountLCY(
          Amount, PurchHeader."Currency Code", PurchHeader."Currency Factor",
          PurchHeader."Job No.", PurchHeader."Posting Date");
        IF TempBln THEN BEGIN
          ConsentRec.SETRANGE("Document Type",DocType);
          ConsentRec.SETRANGE("Document No.","No.");
          IF ConsentRec.FINDSET THEN BEGIN
            REPEAT
              TempConsentRec := ConsentRec;
              TempConsentRec.INSERT;
            UNTIL ConsentRec.NEXT = 0;
          END;
        END;

        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);

        ConsentProcess := GetConsentProcessForPurchHeader(DocType);

        CreateConsentLines(
          DocType,ConsentProcess,0,"No.",0,DimArrayCde,"Job No.",'',"Service Order No.",'',
          "Buy-from Vendor No.",'','',"Location Code",'',AmountLCY,0,0,TempBln);

        PurchaseLineRec.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchaseLineRec.SETRANGE("Document No.",PurchHeader."No.");
        IF PurchaseLineRec.FINDSET THEN BEGIN
          REPEAT
            HandlePurchaseLine(PurchaseLineRec,DocType,PurchHeader."No.",TempBln);
          UNTIL PurchaseLineRec.NEXT = 0;
        END;
        IF TempBln THEN
          PAGE.RUN(11071870,TempConsentRec);
      END;
    END;

    PROCEDURE HandlePurchaseAction@1100528408(ProjectPurchaseAction@1100528400 : Record 11012026);
    VAR
      DocType@1100528404 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';
      ConsentProcess@1100528403 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      DimArrayCde@1100528405 : ARRAY [8] OF Code[20];
      Amount@1100528402 : Decimal;
    BEGIN
      PurchSetupRec.GET;

      IF NOT PurchSetupRec."Use Consent Purchase Actions" THEN
        EXIT;

      Amount := CalcPurchaseActionAmount(ProjectPurchaseAction);
      CreateConsentLines(
        DocType::"Purchase Action",ConsentProcess::"Purchase Action",0,ProjectPurchaseAction.Code,0,
        DimArrayCde,ProjectPurchaseAction."Project No.",'','','','','','','','',Amount,0,0,FALSE);
    END;

    PROCEDURE CalcPurchaseActionAmount@1100528420(ProjectPurchaseAction@1100528400 : Record 11012026) Amount : Decimal;
    VAR
      BudgetLine@1100528401 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      BudgetLine.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      IF BudgetLine.FINDSET THEN
        REPEAT
          Amount += BudgetLine.Amount;
        UNTIL BudgetLine.NEXT = 0;
    END;

    PROCEDURE ApplyConsentPurchaseHeadertoApprovals@1100528208(VAR PurchHeader@1100485000 : Record 38;DocType@1100485002 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';TempBln@1100485001 : Boolean;ApprovalEntryArgument@1100528200 : Record 454) ConsentUsed : Boolean;
    VAR
      PurchaseLineRec@1100485004 : Record 39;
      Setup@1000000000 : Record 6085573;
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      ConsentProcess@1100525001 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      AmountLCY@1100528201 : Decimal;
      DCApprovalsBridge@1100528202 : Codeunit 6085790;
      DimensionManagement@1100528203 : Codeunit 408;
    BEGIN
      //**4PS DC Approvals
      WITH PurchHeader DO BEGIN
        CALCFIELDS(Amount);
        AmountLCY := CalcAmountLCY(
          Amount, PurchHeader."Currency Code", PurchHeader."Currency Factor",
          PurchHeader."Job No.", PurchHeader."Posting Date");

        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);

        ConsentProcess := GetConsentProcessForPurchHeader(DocType);

        CreateConsentLines(
          DocType,ConsentProcess,0,"No.",0,DimArrayCde,"Job No.",'',"Service Order No.",'',
          "Buy-from Vendor No.",'','',"Location Code",'',AmountLCY,0,0,TempBln);

        PurchaseLineRec.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchaseLineRec.SETRANGE("Document No.",PurchHeader."No.");
        IF PurchaseLineRec.FINDSET THEN BEGIN
          REPEAT
            HandlePurchaseLine(PurchaseLineRec,DocType,PurchHeader."No.",TempBln);
          UNTIL PurchaseLineRec.NEXT = 0;
        END;

        Setup.GET;
        IF Setup."Auto. Post Purch. Allocation" THEN
          PostAllocationDC(PurchHeader);

        TempConsentRec.SETCURRENTKEY("Document Type", "Document No.", Level);
        IF TempConsentRec.FINDSET THEN BEGIN
          ConsentUsed := TRUE;
          REPEAT
            CopyConsentToApproval(TempConsentRec, ApprovalEntryArgument);
          UNTIL TempConsentRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE PostAllocationDC@1000000002(VAR PurchHeader@1000000001 : Record 38);
    VAR
      PurchAllocHeader@1000000000 : Record 6085730;
      PurchAllocLine@1000000002 : Record 6085731;
      PurchAllocHeader2@1000000003 : Record 6085730;
      Setup@1000000005 : Record 6085573;
      PurchDocMgnt@1000000009 : Codeunit 6085709;
      AmountExclVAT@1000000007 : Decimal;
      AmountInclVAT@1000000010 : Decimal;
      LineAmountExclVAT@1000000008 : Decimal;
      LineAmountInclVAT@1000000011 : Decimal;
      PurchAllocPosted@1000000004 : Boolean;
      HasAmount@1000000006 : Boolean;
    BEGIN
      //**4PS IDYN DC
      Setup.GET;

      PurchAllocHeader.SETCURRENTKEY("Document Type","Document No.");
      PurchAllocHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchAllocHeader.SETRANGE("Document No.",PurchHeader."No.");
      PurchAllocHeader.SETFILTER(Status,'>%1',PurchAllocHeader.Status::Open);
      IF NOT PurchAllocHeader.ISEMPTY THEN
        EXIT;

      PurchDocMgnt.GetPurchStatusAmounts(PurchHeader, AmountExclVAT, AmountInclVAT, LineAmountExclVAT, LineAmountInclVAT);

      PurchAllocHeader.SETRANGE(Status);
      IF PurchAllocHeader.FINDFIRST THEN
        REPEAT
          PurchAllocLine.SETRANGE("Document No.",PurchAllocHeader."No.");
          PurchAllocLine.SETFILTER(Amount,'>%1',0);
          IF NOT PurchAllocLine.ISEMPTY THEN BEGIN
            PurchAllocHeader2 := PurchAllocHeader;
            CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Post",PurchAllocHeader2);
            PurchAllocPosted := TRUE;
          END;
        UNTIL PurchAllocHeader.NEXT = 0;

      IF Setup."Purch. Alloc. Amounts to Use" = Setup."Purch. Alloc. Amounts to Use"::"Use Lines or Imported Amounts" THEN
        HasAmount := (AmountExclVAT <> 0) OR (LineAmountExclVAT <> 0)
      ELSE
        HasAmount := AmountExclVAT <> 0;

      IF (NOT PurchAllocPosted) AND HasAmount THEN BEGIN
        PurchAllocHeader.INIT;
        PurchAllocHeader."No." := '';
        PurchAllocHeader.INSERT(TRUE);

        PurchAllocHeader.VALIDATE("Document Type",PurchHeader."Document Type");
        PurchAllocHeader.VALIDATE("Document No.",PurchHeader."No.");
        PurchAllocHeader.MODIFY(TRUE);

        PurchAllocHeader.AutoCreateLines;

        CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Post",PurchAllocHeader);
      END;

      PurchAllocHeader.SETRANGE(Status,PurchAllocHeader.Status::Open);
      PurchAllocHeader.DELETEALL(TRUE);
    END;

    PROCEDURE CopyConsentToApproval@1000000009(ConsentLine2@1000000000 : Record 11012226;ApprovalEntryArgument@1100528202 : Record 454);
    VAR
      UserSetup2@1000000007 : Record 91;
      ApprovalEntry@1100528200 : Record 454;
      DCApprovalManagement@1100528201 : Codeunit 6085722;
      DCApprovalsBridge@1100528204 : Codeunit 6085790;
      SequenceNo@1100528203 : Integer;
    BEGIN
      //**4PS DC Approvals
      SequenceNo := DCApprovalsBridge.GetLastSequenceNo(ApprovalEntryArgument);
      UserSetup2.GET(ConsentLine2."User ID");

      ApprovalEntry.SETRANGE("Table ID", ApprovalEntryArgument."Table ID");
      ApprovalEntry.SETRANGE("Document Type", ApprovalEntryArgument."Document Type");
      ApprovalEntry.SETRANGE("Record ID to Approve", ApprovalEntryArgument."Record ID to Approve");
      ApprovalEntry.SETRANGE("Approval Code", ApprovalEntryArgument."Approval Code");
      ApprovalEntry.SETRANGE("Workflow Step Instance ID", ApprovalEntryArgument."Workflow Step Instance ID");
      ApprovalEntry.SETRANGE("Approver ID", UserSetup2."User ID");
      ApprovalEntry.SETFILTER(Status, '%1|%2', ApprovalEntry.Status::Open, ApprovalEntry.Status::Created);
      DCApprovalManagement.SetNoOpenEntry(TRUE); //CALL C023060 ?This should not be necessary?

      IF NOT ApprovalEntry.FINDFIRST THEN
        DCApprovalManagement.MakeApprovalEntry(ApprovalEntryArgument, SequenceNo, UserSetup2."User ID")
    END;

    PROCEDURE PostPurchaseLine@1100485059(PurchLineRec@1100485001 : Record 39;PostedDocNo@1100485000 : Code[20]);
    VAR
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528203 : Record 124;
      MessageID@1100528204 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval';
      DocType@1100528400 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';
    BEGIN
      PurchSetupRec.GET;
      IF NOT PurchSetupRec."Use Consent Purchase Invoices" THEN
        EXIT;

      IF PurchSetupRec."Use Consent Approval Entries" THEN
        EXIT;

      CASE PurchLineRec."Document Type" OF
        PurchLineRec."Document Type"::Invoice:
          HandlePurchaseLine(PurchLineRec,DocType::"Posted Invoice",PostedDocNo,FALSE);
        PurchLineRec."Document Type"::"Credit Memo":
          HandlePurchaseLine(PurchLineRec,DocType::"Posted Credit Memo",PostedDocNo,FALSE);
      END;
    END;

    PROCEDURE HandlePurchaseLine@1100485004(VAR PurchLineRec@1100485000 : Record 39;DocType@1100485005 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocNo@1100485006 : Code[20];TempBln@1100485001 : Boolean);
    VAR
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      ConsentProcess@1100525001 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
    BEGIN
      ConsentProcess := GetConsentProcessForPurchHeader(DocType);

      WITH PurchLineRec DO BEGIN
        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);
        CreateConsentLines(
          DocType,ConsentProcess,1,DocNo,PurchLineRec."Line No.",DimArrayCde,"Job No.",Element,"Service Order No.","No.",
          "Buy-from Vendor No.","Item No.","Plant Type","Location Code","Receiving Company",
          "Amount (LCY)",0,0,TempBln);
      END;
    END;

    PROCEDURE HandleInvoiceHeader@1100485005(VAR InvoiceHeader@1100485000 : Record 122;DocType@1100485002 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';TempBln@1100485001 : Boolean;HeaderOnly@1100485005 : Boolean);
    VAR
      ConsentRec@1100485003 : Record 11012226;
      ConsentProcess@1100528401 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      AmountLCY@1100528400 : Decimal;
    BEGIN
      WITH InvoiceHeader DO BEGIN
        CALCFIELDS(Amount);
        AmountLCY := CalcAmountLCY(
          Amount, InvoiceHeader."Currency Code", InvoiceHeader."Currency Factor",
          InvoiceHeader."Job No.", InvoiceHeader."Posting Date");
        IF TempBln THEN BEGIN
          ConsentRec.SETRANGE("Document Type",DocType);
          ConsentRec.SETRANGE("Document No.","No.");
          IF ConsentRec.FINDSET THEN BEGIN
            REPEAT
              TempConsentRec := ConsentRec;
              TempConsentRec.INSERT;
            UNTIL ConsentRec.NEXT = 0;
          END;
        END;

        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);
        CreateConsentLines(
          DocType,ConsentProcess::"Invoice Approval",0,"No.",0,DimArrayCde,"Job No.",'',"Service Order No.",'',
          "Buy-from Vendor No.",'','',"Location Code",'',AmountLCY,0,0,TempBln);

        IF NOT HeaderOnly THEN
          LoopPostedLines(InvoiceHeader."No.",DocType,InvoiceHeader."Invoice Approved",TempBln);

        IF TempBln THEN
          PAGE.RUN(11071870,TempConsentRec);
      END;
    END;

    PROCEDURE HandleCreditMemoHeader@1100485019(VAR CredMemHeader@1100485000 : Record 124;DocType@1100485002 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';TempBln@1100485001 : Boolean;HeaderOnly@1100485005 : Boolean);
    VAR
      ConsentRec@1100485003 : Record 11012226;
      ConsentProcess@1100528401 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      AmountLCY@1100528400 : Decimal;
    BEGIN
      WITH CredMemHeader DO BEGIN
        CALCFIELDS(Amount);
        AmountLCY := CalcAmountLCY(
          Amount, CredMemHeader."Currency Code", CredMemHeader."Currency Factor",
          CredMemHeader."Job No.", CredMemHeader."Posting Date");
        IF TempBln THEN BEGIN
          ConsentRec.SETRANGE("Document Type",DocType);
          ConsentRec.SETRANGE("Document No.",CredMemHeader."No.");
          IF ConsentRec.FINDSET THEN BEGIN
            REPEAT
              TempConsentRec := ConsentRec;
              TempConsentRec.INSERT;
            UNTIL ConsentRec.NEXT = 0;
          END;
        END;

        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);
        CreateConsentLines(
          DocType,ConsentProcess::"Credit Memo Approval",0,"No.",0,DimArrayCde,"Job No.",'',"Service Order No.",'',
          "Buy-from Vendor No.",'','',"Location Code",'',AmountLCY,0,0,TempBln);

        IF NOT HeaderOnly THEN
          LoopPostedLines(CredMemHeader."No.",DocType,CredMemHeader."Credit Memo Approved",TempBln);

        IF TempBln THEN
          PAGE.RUN(11071870,TempConsentRec);
      END;
    END;

    PROCEDURE HandleAdviceOrders@1100485010(lvAdviceOrderRec@1100485002 : Record 11012055;lvTempBln@1100485000 : Boolean;lvPerLineBln@1100485001 : Boolean);
    VAR
      ConsentRec@1100485004 : Record 11012226;
      AdvOrderRec@1100485003 : Record 11012055;
    BEGIN
      PurchSetupRec.GET;
      IF NOT PurchSetupRec."Use Consent Advice Orders" THEN
        EXIT;

      WITH lvAdviceOrderRec DO BEGIN
        IF lvTempBln THEN BEGIN
          ConsentRec.SETRANGE(Process,ConsentRec.Process::"Advice Order");
          ConsentRec.SETRANGE("Document Type",ConsentRec."Document Type"::"Advice Order");

          CASE "Record Type" OF
            "Record Type"::Project:
              BEGIN
                ConsentRec.SETRANGE(Type,ConsentRec.Type::Project);
                ConsentRec.SETRANGE("Type No.","Project No.");
              END;
            "Record Type"::ServOrder:
              BEGIN
                ConsentRec.SETRANGE(Type,ConsentRec.Type::"Service Order");
                ConsentRec.SETRANGE("Type No.","Service Order No.");
              END;
          END;

          IF lvPerLineBln THEN
            ConsentRec.SETRANGE("Document Line No.","Line No.")
          ELSE
            ConsentRec.SETRANGE("Document Line No.");

          IF ConsentRec.FINDSET THEN BEGIN
            REPEAT
              TempConsentRec := ConsentRec;
              TempConsentRec.INSERT;
            UNTIL ConsentRec.NEXT = 0;
          END;
        END;
      END;

      IF lvPerLineBln THEN
        InsertConsentLinesAdviceOrder(lvAdviceOrderRec,lvTempBln)
      ELSE BEGIN
        WITH AdvOrderRec DO BEGIN
          RESET;
          IF NOT lvTempBln THEN
            SETRANGE("Process Status","Process Status"::Released)
          ELSE
            SETFILTER("Process Status",'%1|%2',"Process Status"::Open,"Process Status"::Released);
          CASE lvAdviceOrderRec."Record Type" OF
            lvAdviceOrderRec."Record Type"::Project: SETRANGE("Project No.",lvAdviceOrderRec."Project No.");
            lvAdviceOrderRec."Record Type"::ServOrder: SETRANGE("Service Order No.",lvAdviceOrderRec."Service Order No.");
          END;
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              InsertConsentLinesAdviceOrder(AdvOrderRec,lvTempBln);
            UNTIL NEXT = 0;
          END;
        END;
      END;

      IF lvTempBln THEN
        PAGE.RUN(11071870,TempConsentRec);
    END;

    PROCEDURE InsertConsentLinesAdviceOrder@1100485014(lvAdviceOrderRec@1100485000 : Record 11012055;lvTempBln@1100485001 : Boolean);
    VAR
      DocType@1100528400 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';
      ConsentProcess@1100528401 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
    BEGIN
      WITH lvAdviceOrderRec DO BEGIN
        FillGlobalDimsInDimArray('', "Cost Object", DimArrayCde);
        CreateConsentLines(
          DocType::"Advice Order",ConsentProcess::"Advice Order",1,'',"Line No.",DimArrayCde,"Project No.",
          Element,"Service Order No.",'',Vendor,"Item No.","Plant Type","Location Code",'',Amount,0,0,lvTempBln);
      END;
    END;

    PROCEDURE PostInvApprovalLine@1100485008(ApprovallineRec@1100485003 : Record 11012032;PostedDocNo@1100485000 : Code[20]);
    VAR
      DocType@1100528400 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';
    BEGIN
      PurchSetupRec.GET;
      //**4PS.sn
      IF PurchSetupRec."Use Consent Approval Entries" AND
         PurchSetupRec."Use Consent Purchase Invoices" THEN BEGIN
        EXIT;
      END;
      //

      IF NOT PurchSetupRec."Use Consent Purchase Invoices" THEN
        EXIT;

      CASE ApprovallineRec."Document Type" OF
        ApprovallineRec."Document Type"::"Purchase Invoice":
          HandleApprovalLine(ApprovallineRec,DocType::"Posted Invoice",PostedDocNo,FALSE);
        ApprovallineRec."Document Type"::"Credit Memo":
          HandleApprovalLine(ApprovallineRec,DocType::"Posted Credit Memo",PostedDocNo,FALSE);
      END;
    END;

    PROCEDURE HandleApprovalLine@1100485003(VAR ApprovalLineRec@1100485000 : Record 11012032;DocType@1100485006 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocNo@1100485005 : Code[20];TempBln@1100485001 : Boolean);
    VAR
      DimensionManagement@1100528401 : Codeunit 408;
      PurchInvHeader@1100485007 : Record 122;
      CreditMemoHeader@1100485008 : Record 124;
      ConsentProcess@1100528402 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      lvVendorCode@1100485009 : Code[20];
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      AmountLCY@1100528400 : Decimal;
    BEGIN
      WITH ApprovalLineRec DO BEGIN
        CASE "Document Type" OF
          "Document Type"::"Purchase Invoice":
            BEGIN
              PurchInvHeader.GET(ApprovalLineRec."Document No.");
              lvVendorCode := PurchInvHeader."Buy-from Vendor No.";
              AmountLCY := CalcAmountLCY(
                ApprovalLineRec.Amount, PurchInvHeader."Currency Code", PurchInvHeader."Currency Factor",
                ApprovalLineRec."Project No.", ApprovalLineRec."Posting Date");
              ConsentProcess := ConsentProcess::"Invoice Approval";
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              CreditMemoHeader.GET(ApprovalLineRec."Document No.");
              lvVendorCode := CreditMemoHeader."Buy-from Vendor No.";
              AmountLCY := CalcAmountLCY(
                ApprovalLineRec.Amount, CreditMemoHeader."Currency Code", CreditMemoHeader."Currency Factor",
                ApprovalLineRec."Project No.", ApprovalLineRec."Posting Date");
              ConsentProcess := ConsentProcess::"Credit Memo Approval"
            END;
        END;

        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);
        CreateConsentLines(
          DocType,ConsentProcess,1,DocNo,ApprovalLineRec."Line No.",DimArrayCde,"Project No.",Element,
          "Service Order No.","Account No.",lvVendorCode,"Item No.","Plant Type",'',"Receiving Company",
          AmountLCY,0,0,TempBln);
      END;
    END;

    PROCEDURE Consent@1100485002(RunFromMenu@1100485007 : Boolean);
    VAR
      CompressionLevel@1100528400 : 'Default,Detailed,Compressed';
    BEGIN
      StartConsentForm(RunFromMenu, TRUE, 0, '', CompressionLevel::Default, FALSE);
    END;

    PROCEDURE ConsentDocumentConsentLines@1100528400(RunFromMenu@1100485007 : Boolean;DocumentType@1100528400 : Integer;DocumentNo@1100528401 : Code[20]);
    VAR
      CompressionLevel@1100528402 : 'Default,Detailed,Compressed';
    BEGIN
      StartConsentForm(RunFromMenu, FALSE, DocumentType, DocumentNo, CompressionLevel::Default, FALSE);
    END;

    PROCEDURE ShowAllDetailedConsentLinesFromCompressedConsentPage@1100528434();
    VAR
      CompressionLevel@1100528400 : 'Default,Detailed,Compressed';
    BEGIN
      StartConsentForm(TRUE, TRUE, 0, '', CompressionLevel::Detailed, TRUE);
    END;

    PROCEDURE ShowAllCompressedConsentLinesFromDetailedConsentPage@1100528439();
    VAR
      CompressionLevel@1100528400 : 'Default,Detailed,Compressed';
    BEGIN
      StartConsentForm(TRUE, TRUE, 0, '', CompressionLevel::Compressed, TRUE);
    END;

    LOCAL PROCEDURE StartConsentForm@1100528401(RunFromMenu@1100485007 : Boolean;ShowAllConsentLines@1100528400 : Boolean;DocumentType@1100528401 : Integer;DocumentNo@1100528402 : Code[20];CompressionLevel@1100528403 : 'Default,Detailed,Compressed';FromConsentPage@1100528405 : Boolean);
    VAR
      PurchSetup@1100485001 : Record 312;
      ConsentRec@1100485002 : Record 11012226;
      Consent2Rec@1100485006 : Record 11012226;
      ConsentFilterString@1100485003 : Text[1000];
      NoConsentInt@1100485004 : Integer;
      NoIgnoreInt@1100485005 : Integer;
      ConsentPageID@1100528404 : Integer;
    BEGIN
      IF PurchSetup.GET THEN BEGIN
        IF NOT PurchSetup.ConsentIsUsed THEN
          IF RunFromMenu THEN
            MESSAGE(Text011);
      END ELSE
        EXIT;

      FillTempConsentLines(TempConsentRec, ShowAllConsentLines, FALSE, DocumentType, DocumentNo, USERID, CompressionLevel);
      IF TempConsentRec.FINDFIRST THEN;

      IF CompressionIsUsed(USERID, CompressionLevel) THEN
        ConsentPageID := PAGE::"Consent (Compressed)"
      ELSE
        ConsentPageID := PAGE::"Consent (Detailed)";
      IF NOT RunFromMenu THEN BEGIN
        NoConsentInt := TempConsentRec.COUNT;
        IF NoConsentInt > 0 THEN BEGIN
          TempConsentRec.SETRANGE("Ignore Temporary",TRUE);
          NoIgnoreInt := TempConsentRec.COUNT;
          TempConsentRec.SETRANGE("Ignore Temporary");
          IF CONFIRM(STRSUBSTNO(Text000,NoConsentInt,NoIgnoreInt), TRUE) THEN
            PAGE.RUN(ConsentPageID, TempConsentRec);
        END;
      END ELSE
        IF FromConsentPage THEN
          PAGE.RUNMODAL(ConsentPageID, TempConsentRec)
        ELSE
          PAGE.RUN(ConsentPageID, TempConsentRec);
    END;

    PROCEDURE LowerLevelExists@1100485032(ConsentRec@1100485000 : Record 11012226) HigherLevelPrecense : Boolean;
    VAR
      lConsent2Rec@1100485001 : Record 11012226;
    BEGIN
      lConsent2Rec.RESET;
      lConsent2Rec.SETRANGE("Document Type", ConsentRec."Document Type");
      lConsent2Rec.SETRANGE("Document No.", ConsentRec."Document No.");
      IF ConsentRec."Document Type" IN
         [ConsentRec."Document Type"::"Advice Order", ConsentRec."Document Type"::"Purchase Action"]
      THEN BEGIN
        lConsent2Rec.SETRANGE("Document Line No.", ConsentRec."Document Line No.");
        lConsent2Rec.SETRANGE(Type, ConsentRec.Type);
        lConsent2Rec.SETRANGE("Type No.", ConsentRec."Type No.");
      END;
      lConsent2Rec.SETRANGE(Consent, FALSE);
      lConsent2Rec.SETFILTER(Level, '<%1', ConsentRec.Level);
      EXIT(lConsent2Rec.FINDFIRST);
    END;

    PROCEDURE UpdateHigherLevel@1000000007(ConsentRec@1100485000 : Record 11012226);
    VAR
      Consent2@1000000000 : Record 11012226;
    BEGIN
      Consent2.SETRANGE("Document Type", ConsentRec."Document Type");
      Consent2.SETRANGE("Document No.", ConsentRec."Document No.");
      Consent2.SETRANGE("Document Line No.", ConsentRec."Document Line No.");
      IF ConsentRec."Document Type" IN
         [ConsentRec."Document Type"::"Advice Order", ConsentRec."Document Type"::"Purchase Action"]
      THEN BEGIN
        Consent2.SETRANGE(Type, ConsentRec.Type);
        Consent2.SETRANGE("Type No.", ConsentRec."Type No.");
      END;
      Consent2.SETRANGE(Consent, FALSE);
      Consent2.SETFILTER(Level, '>%1', ConsentRec.Level);

      IF Consent2.FINDSET THEN
        REPEAT
          Consent2."Creation  Date" := TODAY;
          Consent2."Last Consent User ID" := ConsentRec."User ID";
          Consent2."Last Consenter Group Code" := ConsentRec."Consenter Group Code";
          Consent2."Handled By" := ConsentRec."Handled By";
          Consent2."Return To Previous" := FALSE;
          Consent2.Consent := FALSE;
          Consent2.MODIFY(TRUE);
        UNTIL Consent2.NEXT=0;
    END;

    PROCEDURE UpdateLowerLevel@1000000008(ConsentRec@1100485000 : Record 11012226);
    VAR
      Consent2@1000000000 : Record 11012226;
      Consenter@1100528400 : Record 11012229;
    BEGIN
      IF (ConsentRec."Last Consent User ID" = '') AND
         (ConsentRec."Last Consenter Group Code" = '')
      THEN
        ERROR(Text008, Consenter.TABLECAPTION);
      IF Consent2.GET(
        ConsentRec."Document Type", ConsentRec."Document No.", ConsentRec."Document Line No.",
        ConsentRec."Last Consent User ID", ConsentRec."Last Consenter Group Code",
        ConsentRec.Type, ConsentRec."Type No.")
      THEN BEGIN
        Consent2.Consent := FALSE;
        Consent2."Handled By" := ConsentRec."Handled By";
        Consent2.MODIFY(TRUE);
      END ELSE
        ERROR(Text008, Consenter.TABLECAPTION);
    END;

    PROCEDURE ValidateConsentUndo@1100485006(VAR ConsentRec@1100485000 : Record 11012226);
    VAR
      Consent2@1100485001 : Record 11012226;
      VendLedgEntry@1100485002 : Record 25;
    BEGIN
      WITH ConsentRec DO BEGIN
        Consent2.SETRANGE("Document Type","Document Type");
        Consent2.SETRANGE("Document No.","Document No.");
        IF "Document Type" IN
           ["Document Type"::"Advice Order", "Document Type"::"Purchase Action"]
        THEN BEGIN
          Consent2.SETRANGE("Document Line No.", ConsentRec."Document Line No.");
          Consent2.SETRANGE(Type, Type);
          Consent2.SETRANGE("Type No.", "Type No.");
        END;
        Consent2.SETFILTER(Level,'>%1',Level);
        Consent2.SETRANGE(Consent,TRUE);
        IF Consent2.FIND('-') THEN
          ERROR(Text001,Consent2."User ID",Consent2."Document No.");
        IF ("Document Type" = "Document Type"::"Posted Invoice") OR
           ("Document Type" = "Document Type"::"Posted Credit Memo") THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Document No.");
          VendLedgEntry.SETRANGE("Document No.","Document No.");
          CASE "Document Type" OF
            "Document Type"::Invoice:
              VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
            "Document Type"::"Credit Memo":
              VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
          END;
          VendLedgEntry.SETRANGE(Open,TRUE);
          IF VendLedgEntry.FIND('-') THEN BEGIN
            VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
            IF VendLedgEntry.Amount <> VendLedgEntry."Remaining Amount" THEN
              ERROR(Text002);
          END;
        END;
        CLEAR("Consent Date");
        "Consent By" := '';
      END;
    END;

    PROCEDURE UpdateConsentPurchaseInvoice@1000000000(VAR ConsentRec@1100485001 : Record 11012226);
    VAR
      PurchInvHeader@1000000000 : Record 122;
      VendLedgEntry@1000000003 : Record 25;
      Consent2@1100485000 : Record 11012226;
    BEGIN
      WITH ConsentRec DO BEGIN
        IF PurchInvHeader.GET("Document No.") THEN BEGIN
          Consent2.RESET;
          Consent2.SETRANGE("Document Type","Document Type");
          Consent2.SETRANGE("Document No.",ConsentRec."Document No.");
          Consent2.SETRANGE(Consent,FALSE);
          //Consent2.SETFILTER("User ID",'<>%1',ConsentRec."User ID"); //kzwerver, 131023, o, #C009850
          //IF (Consent2.FINDFIRST) OR                                        //**4PS02.so
          //   ((NOT ConsentRec.Consent) AND (ConsentRec."User ID" <>'')) THEN
          //  PurchInvHeader."On Hold" := Text004
          //ELSE BEGIN
          //  IF PurchInvHeader."On Hold" = Text004 THEN
          //    PurchInvHeader."On Hold" := '';
          //PurchInvHeader.MODIFY;                                            //**4PS02.eo
          IF NOT (Consent2.FINDFIRST OR                                       //**4PS02.sn
              (NOT ConsentRec.Consent AND (ConsentRec."User ID" <>''))) THEN BEGIN
            PurchInvHeader."On Hold" := '';
            PurchInvHeader."Consented Date-Time" := CURRENTDATETIME;
            PurchInvHeader.MODIFY;
          END;                                                                //**4PS02.en

          VendLedgEntry.SETCURRENTKEY("Document No.");
          VendLedgEntry.SETRANGE("Document No.","Document No.");
          VendLedgEntry.SETRANGE("Document Type", VendLedgEntry."Document Type"::Invoice);
          //VendLedgEntry.SETRANGE("Vendor No.",PurchInvHeader."Buy-from Vendor No."); //kzwerver, 130903, o, #C006495
          VendLedgEntry.SETRANGE("Vendor No.",PurchInvHeader."Pay-to Vendor No."); //kzwerver, 130903, n, #C006495
          IF VendLedgEntry.FIND('-') THEN BEGIN
            VendLedgEntry."On Hold" := PurchInvHeader."On Hold";
            VendLedgEntry.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE UpdateConsentCredPurchInvoice@1000000004(VAR ConsentRec@1100485000 : Record 11012226);
    VAR
      PurchCreditMemoHdr@1000000000 : Record 124;
      VendLedgEntry@1000000003 : Record 25;
      Consent2@1100485001 : Record 11012226;
    BEGIN
      WITH ConsentRec DO BEGIN
        IF PurchCreditMemoHdr.GET("Document No.") THEN BEGIN
          Consent2.RESET;
          Consent2.SETRANGE("Document Type","Document Type");
          Consent2.SETRANGE("Document No.",ConsentRec."Document No.");
          Consent2.SETRANGE(Consent,FALSE);
          //Consent2.SETFILTER("User ID",'<>%1',"User ID"); //kzwerver, 131023, o, #C009850
          //IF (Consent2.FINDFIRST) OR                                        //**4PS02.so
          //   ((NOT ConsentRec.Consent) AND (ConsentRec."User ID" <>'')) THEN
          //  PurchCreditMemoHdr."On Hold" := Text004
          //ELSE
          //  IF PurchCreditMemoHdr."On Hold" = Text004 THEN
          //    PurchCreditMemoHdr."On Hold" := '';
          //PurchCreditMemoHdr.MODIFY;                                        //**4PS02.eo
          IF NOT (Consent2.FINDFIRST OR                                       //**4PS02.sn
              (NOT ConsentRec.Consent AND (ConsentRec."User ID" <>''))) THEN BEGIN
            PurchCreditMemoHdr."On Hold" := '';
            PurchCreditMemoHdr."Consented Date-Time" := CURRENTDATETIME;
            PurchCreditMemoHdr.MODIFY;
          END;                                                                //**4PS02.en

          VendLedgEntry.SETCURRENTKEY("Document No.");
          VendLedgEntry.SETRANGE("Document No.","Document No.");
          VendLedgEntry.SETRANGE("Document Type", VendLedgEntry."Document Type"::"Credit Memo");
          //VendLedgEntry.SETRANGE("Vendor No.",PurchCreditMemoHdr."Buy-from Vendor No."); //kzwerver, 130903, o, #C006495
          VendLedgEntry.SETRANGE("Vendor No.",PurchCreditMemoHdr."Pay-to Vendor No."); //kzwerver, 130903, n, #C006495
          IF VendLedgEntry.FINDFIRST THEN BEGIN
            VendLedgEntry."On Hold" := PurchCreditMemoHdr."On Hold";
            VendLedgEntry.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE UpdateConsentPurchHeader@1100525004(VAR ConsentRec@1100525000 : Record 11012226);
    VAR
      PurchHeader@1100525001 : Record 38;
      Consent2@1100525002 : Record 11012226;
      PhasePlanMgt@1100525003 : Codeunit 11012242;
      PhaseAction@1100525004 : 'Consent,Print,ICMStatus,Word,Confirm,OrderStatus,QuoteStatus,Manual,E-mail,GS1';
      DocumentType@1100528400 : Integer;
    BEGIN
      WITH ConsentRec DO BEGIN
        CASE ConsentRec."Document Type" OF
          ConsentRec."Document Type"::"Purchase Quote":
            DocumentType := PurchHeader."Document Type"::Quote;
          ConsentRec."Document Type"::Order:
            DocumentType := PurchHeader."Document Type"::Order;
        END;
        IF NOT PurchHeader.GET(DocumentType, "Document No.") THEN
          EXIT;

        Consent2.SETRANGE("Document Type","Document Type");
        Consent2.SETRANGE("Document No.",ConsentRec."Document No.");
        IF NOT Consent2.ISEMPTY THEN BEGIN
          Consent2.SETRANGE(Consent,FALSE);
          IF NOT Consent2.ISEMPTY THEN
            EXIT;
        END;
        PurchHeader."Consented Date-Time" := CURRENTDATETIME;
        PurchHeader.MODIFY;
        IF "Document Type" = "Document Type"::Order THEN
          PhasePlanMgt.FinishPhase(PurchHeader,PhaseAction::Consent,1);
      END;
    END;

    PROCEDURE UpdateConsentAdviceOrderLine@1100528402(ConsentLine@1100528400 : Record 11012226);
    VAR
      ConsentLine2@1100528401 : Record 11012226;
      AdviceOrderLine@1100528402 : Record 11012055;
    BEGIN
      IF ConsentLine.Type = ConsentLine.Type::Project THEN
        IF AdviceOrderLine.GET(
          AdviceOrderLine."Record Type"::Project, ConsentLine."Type No.", '', ConsentLine."Document Line No.")
        THEN BEGIN
          AdviceOrderLine.CALCFIELDS("Consent Lines Available");
          IF NOT AdviceOrderLine."Consent Lines Available" THEN BEGIN
            AdviceOrderLine."Consented Date-Time" := CURRENTDATETIME;
            AdviceOrderLine.MODIFY;
          END;
        END;

      IF ConsentLine.Type = ConsentLine.Type::"Service Order" THEN
        IF AdviceOrderLine.GET(
          AdviceOrderLine."Record Type"::ServOrder, '', ConsentLine."Type No.", ConsentLine."Document Line No.")
        THEN BEGIN
          AdviceOrderLine.CALCFIELDS("Consent Lines Serv. Available");
          IF NOT AdviceOrderLine."Consent Lines Serv. Available" THEN BEGIN
            AdviceOrderLine."Consented Date-Time" := CURRENTDATETIME;
            AdviceOrderLine.MODIFY;
          END;
        END;
    END;

    PROCEDURE UpdateConsentPurchaseAction@1100528411(ConsentLine@1100528400 : Record 11012226);
    VAR
      ProjectPurchaseAction@1100528401 : Record 11012026;
    BEGIN
      IF ProjectPurchaseAction.GET(
        ConsentLine."Type No.", ConsentLine."Document No.")
      THEN BEGIN
        ProjectPurchaseAction.CALCFIELDS("Consent Lines Available");
        IF NOT ProjectPurchaseAction."Consent Lines Available" THEN BEGIN
          ProjectPurchaseAction."Consented Date-Time" := CURRENTDATETIME;
          ProjectPurchaseAction.MODIFY;
        END;
      END;
    END;

    PROCEDURE CheckUser@1100485007(lUserId@1100485001 : Code[50]);
    VAR
      ConcentUserRec@1100485000 : Record 11012229;
    BEGIN
      IF lUserId <> UPPERCASE(USERID) THEN BEGIN
        IF ConcentUserRec.GET(USERID) THEN
          IF ConcentUserRec."Super Consenter" THEN
            EXIT;
        IF ConcentUserRec.GET(lUserId) THEN BEGIN
          IF UPPERCASE(USERID) = ConcentUserRec."Substitute Consenter" THEN BEGIN
            IF ConcentUserRec."Substitution Active" = FALSE THEN
              ERROR(STRSUBSTNO(Text006,lUserId));
          END ELSE
            ERROR(STRSUBSTNO(Text005,lUserId));
        END ELSE
          ERROR(STRSUBSTNO(Text007,lUserId));
      END;
    END;

    LOCAL PROCEDURE FillGlobalDimsInDimArray@1100525002(DimValue1Cde@1100525000 : Code[20];DimValue2Cde@1100525001 : Code[20];VAR DimArrayCde@1100525008 : ARRAY [8] OF Code[20]);
    BEGIN
      IF DimValue1Cde <> '' THEN
        DimArrayCde[1] := DimValue1Cde;

      IF DimValue2Cde <> '' THEN
        DimArrayCde[2] := DimValue2Cde;
    END;

    LOCAL PROCEDURE CreateConsentLines@1100525000(DocType@1100525014 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';ConsentProcess@1100525000 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';lvRecordTypeOpt@1100525001 : 'Header,Line';lvDocNoCde@1100525015 : Code[20];lvDocLineNoInt@1100525016 : Integer;lvDimValueCde@1100525003 : ARRAY [8] OF Code[20];lvProjCde@1100525004 : Code[20];ProjectElement@1100528401 : Code[20];lvServOrderCde@1100525012 : Code[20];lvAccountNoCde@1100525005 : Code[20];lvVendorCde@1100525006 : Code[20];ItemNo@1100528402 : Code[20];PlantTypeCode@1100528403 : Code[20];lvLocationCde@1100525022 : Code[10];ReceivingCompany@1100528405 : Text[30];lvAmountDec@1100525007 : Decimal;lvDifferDec@1100525008 : Decimal;lvPercentageDec@1100525009 : Decimal;lvRunTempBln@1100525017 : Boolean);
    VAR
      lvReceiveLines@1100525011 : Record 121;
      lvPurchLineRec@1100525018 : Record 39;
      lvPurchHeadRec@1100525019 : Record 122;
      lvApprovalLineRec@1100525020 : Record 11012032;
      lvCreditMemoRec@1100525021 : Record 124;
      PurchInvLine@1100525023 : Record 123;
      PurchCrMemoLine@1100525024 : Record 125;
      ReceiptNo@1100525025 : Code[20];
      ReceiptLineNo@1100525026 : Integer;
      Sign@1100525027 : Integer;
      ReceiptLineFound@1100528400 : Boolean;
      BudgetFound@1100528408 : Boolean;
      ConsentRuleHasBeenFound@1100528404 : Boolean;
      Type2@1100528407 : ' ,Project,Service Order';
      TypeNo@1100528406 : Code[20];
    BEGIN
      IF NOT TempTableBuild THEN BEGIN
        TempTableBuild := BuildTempConsentRuleTable;
        IF NOT TempTableBuild THEN
          EXIT;
      END;

      IF lvProjCde <> '' THEN BEGIN
        Type2 := Type2::Project;
        TypeNo := lvProjCde;
      END ELSE
        IF lvServOrderCde <> '' THEN BEGIN
          Type2 := Type2::"Service Order";
          TypeNo := lvServOrderCde;
        END ELSE BEGIN
          Type2 := Type2::" ";
          TypeNo := '';
        END;

      WITH TempConsentRule DO BEGIN
        IF lvRecordTypeOpt = lvRecordTypeOpt::Header THEN
          SETRANGE(Level,Level::Header)
        ELSE
          SETRANGE(Level,Level::Line);
        SETRANGE(Process, ConsentProcess);

        IF FINDSET THEN BEGIN
          REPEAT
            IF DocType IN [
              DocType::Order, DocType::"Purchase Quote"]
            THEN
              CalculateDeviationFromBudget(
                DocType, lvRecordTypeOpt, lvDocNoCde, lvDocLineNoInt, lvAmountDec,
                lvDifferDec, lvPercentageDec, BudgetFound)
            ELSE
              IF Level = Level::Line THEN BEGIN
                CASE Process OF
                  Process::Invoice, Process::"Credit Memo":
                    BEGIN
                      ReceiptNo := '';
                      ReceiptLineNo := 0;
                      ReceiptLineFound := FALSE;
                      lvDifferDec := 0;
                      lvPercentageDec := 0;
                      Sign := 1;
                      CASE DocType OF
                        DocType::Invoice:
                          BEGIN
                            IF lvPurchLineRec.GET(lvPurchLineRec."Document Type"::Invoice,lvDocNoCde,lvDocLineNoInt) THEN;
                            ReceiptNo := lvPurchLineRec."Receipt No.";
                            ReceiptLineNo := lvPurchLineRec."Receipt Line No.";
                          END;
                        DocType::"Posted Invoice":
                          BEGIN
                            IF PurchInvLine.GET(lvDocNoCde, lvDocLineNoInt) THEN;
                            ReceiptNo := PurchInvLine."Receipt No.";
                            ReceiptLineNo := PurchInvLine."Receipt Line No.";
                          END;
                        DocType::"Credit Memo":
                          BEGIN
                            IF lvPurchLineRec.GET(lvPurchLineRec."Document Type"::"Credit Memo",lvDocNoCde,lvDocLineNoInt) THEN;
                            ReceiptNo := lvPurchLineRec."Receipt No.";
                            ReceiptLineNo := lvPurchLineRec."Receipt Line No.";
                            Sign := -1;
                          END;
                        DocType::"Posted Credit Memo":
                          BEGIN
                            IF PurchCrMemoLine.GET(lvDocNoCde, lvDocLineNoInt) THEN;
                            ReceiptNo := PurchCrMemoLine."Receipt No.";
                            ReceiptLineNo := PurchCrMemoLine."Receipt Line No.";
                            Sign := -1;
                          END;
                      END;

                      IF lvReceiveLines.GET(ReceiptNo, ReceiptLineNo) THEN BEGIN
                        ReceiptLineFound := TRUE;
                        lvDifferDec := Sign * (lvAmountDec - (Sign * lvReceiveLines."Amount (LCY)"));
                        IF (lvAmountDec <> 0) AND (lvReceiveLines."Amount (LCY)" <> 0) THEN BEGIN
                         lvPercentageDec := Sign *
                           ((lvAmountDec - (Sign * lvReceiveLines."Amount (LCY)")) /
                            (Sign * lvReceiveLines."Amount (LCY)"));
                          lvPercentageDec := lvPercentageDec * 100;
                        END;
                      END;
                    END;
                  Process::"Invoice Approval", Process::"Credit Memo Approval":
                    BEGIN
                      ReceiptLineFound := FALSE;
                      lvDifferDec := 0;
                      lvPercentageDec := 0;
                      Sign := 1;
                      CASE DocType OF
                        DocType::"Posted Invoice":
                          BEGIN
                            IF lvPurchHeadRec.GET(lvDocNoCde) THEN BEGIN
                              IF lvApprovalLineRec.GET(lvPurchHeadRec."Journal Template",
                                                       lvApprovalLineRec."Document Type"::"Purchase Invoice",
                                                       lvDocNoCde,
                                                       lvDocLineNoInt) THEN BEGIN
                                IF lvReceiveLines.GET(lvApprovalLineRec."Receipt No.",lvApprovalLineRec."Receipt Line No.") THEN BEGIN
                                  ReceiptLineFound := TRUE;
                                  lvDifferDec := Sign * (lvAmountDec - (Sign * lvReceiveLines."Amount (LCY)"));
                                  IF (lvAmountDec <> 0) AND (lvReceiveLines."Amount (LCY)" <> 0) THEN BEGIN
                                    lvPercentageDec := Sign *
                                      ((lvAmountDec - (Sign * lvReceiveLines."Amount (LCY)")) /
                                       (Sign * lvReceiveLines."Amount (LCY)"));
                                    lvPercentageDec := lvPercentageDec * 100;
                                  END;
                                END;
                              END;
                            END;
                          END;
                        DocType::"Posted Credit Memo":
                          BEGIN
                            Sign := -1;
                            IF lvCreditMemoRec.GET(lvDocNoCde) THEN BEGIN
                              IF lvApprovalLineRec.GET(lvCreditMemoRec."Journal Template",
                                                       lvApprovalLineRec."Document Type"::"Credit Memo",
                                                       lvDocNoCde,
                                                       lvDocLineNoInt) THEN BEGIN
                                IF lvReceiveLines.GET(lvApprovalLineRec."Receipt No.",lvApprovalLineRec."Receipt Line No.") THEN BEGIN
                                  ReceiptLineFound := TRUE;
                                  lvDifferDec := Sign * (lvAmountDec - (Sign * lvReceiveLines."Amount (LCY)"));
                                  IF (lvAmountDec <> 0) AND (lvReceiveLines."Amount (LCY)" <> 0) THEN BEGIN
                                    lvPercentageDec := Sign *
                                      ((lvAmountDec - (Sign * lvReceiveLines."Amount (LCY)")) /
                                       (Sign * lvReceiveLines."Amount (LCY)"));
                                    lvPercentageDec := lvPercentageDec * 100;
                                  END;
                                END;
                              END;
                            END;
                          END;
                      END;
                    END;
                END;
              END;

            IF ConsentLineMustBeCreated(
              TempConsentRule,lvDimValueCde,lvProjCde,ProjectElement,lvServOrderCde,lvAccountNoCde,lvVendorCde,
              ItemNo,PlantTypeCode,lvLocationCde,lvAmountDec,BudgetFound,ReceiptLineFound,lvDifferDec,lvPercentageDec,
              DocType,lvDocNoCde,ConsentRuleHasBeenFound)
            THEN BEGIN
              TempConsentRule.Consenter := DetermineConsenter(
                TempConsentRule, lvProjCde, lvServOrderCde, ReceivingCompany);
              CreateConsentLine(
                ConsentProcess,DocType,lvDocNoCde,lvDocLineNoInt,lvAmountDec,
                lvVendorCde,Type2,TypeNo,TempConsentRule,lvRunTempBln);
            END;
          UNTIL NEXT = 0;
        END;
      END;

      IF NOT ConsentRuleHasBeenFound THEN
        CreateConsentLineForSuperConsenterDeniedLines(
          ConsentProcess,DocType,lvDocNoCde,lvDocLineNoInt,
          lvAmountDec,lvVendorCde,Type2,TypeNo,lvRunTempBln);
    END;

    LOCAL PROCEDURE CalculateDeviationFromBudget@1100525005(DocType@1100525000 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';Level@1100525006 : 'Header,Line';DocumentNo@1100525005 : Code[20];DocumentLineNo@1100525004 : Integer;Amount@1100525008 : Decimal;VAR Difference@1100525002 : Decimal;VAR Percentage@1100525001 : Decimal;VAR BudgetFound@1100525003 : Boolean);
    VAR
      BudgetLine@1100525007 : Record 11012001;
      PurchaseHeader@1100525010 : Record 38;
      PurchaseLine@1100525011 : Record 39;
      BudgetAmount@1100528400 : Decimal;
    BEGIN
      Difference := 0;
      Percentage := 0;
      BudgetFound := FALSE;
      CASE DocType OF
        DocType::Order:
          IF Level = Level::Header THEN
            MarkBudgetLinesOfPurchaseHeader(
              PurchaseHeader."Document Type"::Order, DocumentNo, BudgetLine)
          ELSE
            MarkBudgetLinesOfPurchaseLine(
              PurchaseHeader."Document Type"::Order, DocumentNo, DocumentLineNo, BudgetLine);
        DocType::"Purchase Quote":
          IF Level = Level::Header THEN
            MarkBudgetLinesOfPurchaseHeader(
              PurchaseHeader."Document Type"::Quote, DocumentNo, BudgetLine)
          ELSE
            MarkBudgetLinesOfPurchaseLine(
              PurchaseHeader."Document Type"::Quote, DocumentNo, DocumentLineNo, BudgetLine);
      END;

      BudgetLine.MARKEDONLY(TRUE);
      IF BudgetLine.FINDSET THEN BEGIN
        REPEAT
          BudgetAmount := BudgetAmount + BudgetLine.Amount;
          BudgetFound := TRUE;
        UNTIL BudgetLine.NEXT = 0;

        Difference := Amount - BudgetAmount;
        IF BudgetAmount <> 0 THEN BEGIN
          Percentage := 100 * Difference / BudgetAmount;
        END;
      END;
    END;

    LOCAL PROCEDURE MarkBudgetLinesOfPurchaseHeader@1100528443(DocumentType@1100528400 : Integer;DocumentNo@1100528401 : Code[20];VAR BudgetLine@1100528402 : Record 11012001);
    VAR
      PurchaseHeader@1100528403 : Record 38;
      PurchaseLine@1100528404 : Record 39;
    BEGIN
      IF NOT PurchaseHeader.GET(DocumentType, DocumentNo) THEN
        EXIT;

      PurchaseLine.SETRANGE("Document Type", DocumentType);
      PurchaseLine.SETRANGE("Document No.", DocumentNo);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          MarkBudgetLinesOfPurchaseLine(
            DocumentType, DocumentNo, PurchaseLine."Line No.", BudgetLine);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE MarkBudgetLinesOfPurchaseLine@1100528446(DocumentType@1100528402 : Integer;DocumentNo@1100528401 : Code[20];DocumentLineNo@1100528403 : Integer;VAR BudgetLine@1100528400 : Record 11012001);
    VAR
      PurchaseLine@1100528404 : Record 39;
    BEGIN
      IF NOT PurchaseLine.GET(DocumentType, DocumentNo, DocumentLineNo) THEN
        EXIT;
      IF PurchaseLine."Purchase Route Reference" = '' THEN
        EXIT;

      BudgetLine.SETCURRENTKEY("Purchase Route Reference");
      BudgetLine.SETRANGE("Purchase Route Reference", PurchaseLine."Purchase Route Reference");
      IF BudgetLine.FINDSET THEN
        REPEAT
          BudgetLine.MARK(TRUE);
        UNTIL BudgetLine.NEXT = 0;
      BudgetLine.SETRANGE("Purchase Route Reference");
    END;

    LOCAL PROCEDURE BuildTempConsentRuleTable@1100525007() Present : Boolean;
    VAR
      ConsentRule@1100525001 : Record 11012227;
    BEGIN
      TempConsentRule.DELETEALL;
      IF ConsentRule.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          TempConsentRule := ConsentRule;
          TempConsentRule.INSERT;
        UNTIL ConsentRule.NEXT = 0;
        TempConsentRule.SETCURRENTKEY("Consent Level");
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE ConsentLineMustBeCreated@1100525001(ConsentRule@1100525000 : Record 11012227;DimValueCodes@1100525007 : ARRAY [8] OF Code[20];JobNo@1100525011 : Code[20];ProjectElement@1100528401 : Code[20];ServiceOrderNo@1100525010 : Code[20];AccountNo@1100525005 : Code[20];VendorNo@1100525004 : Code[20];ItemNo@1100528402 : Code[20];PlantTypeCode@1100528403 : Code[20];LocationCode@1100525018 : Code[10];Amount@1100525003 : Decimal;BudgetFound@1100528405 : Boolean;ReceiptLineFound@1100528400 : Boolean;Difference@1100525002 : Decimal;Percentage@1100525001 : Decimal;DocumentType@1100528000 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocumentNo@1100528001 : Code[20];VAR ConsentRuleHasBeenFound@1100528404 : Boolean) : Boolean;
    VAR
      lvExitBln@1100525009 : Boolean;
      i@1100525013 : Integer;
      lvJobRec@1100525014 : Record 11072003;
      lvUserSetupRec@1100525015 : Record 91;
      lvConsenterRec@1100525016 : Record 11012229;
      ServiceOrder@1100528600 : Record 11012823;
      FilterResult@1100528200 : 'NoFilter,InFilter,OutOfFilter';
    BEGIN
      IF NOT ConsentIsNeededForAmount(
        ConsentRule, Amount, BudgetFound, ReceiptLineFound, Difference, Percentage)
      THEN
        EXIT(FALSE);

      IF (ConsentRule.Type IN [ConsentRule.Type::Service, ConsentRule.Type::Other]) AND
         (JobNo <> '')
      THEN
        EXIT(FALSE);

      IF ConsentRule.Type = ConsentRule.Type::Project THEN BEGIN
        IF JobNo = '' THEN
          EXIT(FALSE)
      END;

      IF (ConsentRule.Type IN [ConsentRule.Type::Project, ConsentRule.Type::Other]) AND
         (ServiceOrderNo <> '')
      THEN
        EXIT(FALSE);

      IF ConsentRule.Type = ConsentRule.Type::Service THEN
        IF ServiceOrderNo = '' THEN
          EXIT(FALSE);

      FilterResult := RecordWithinConsentRuleFilters(
        ConsentRule, DimValueCodes, JobNo, ProjectElement, ServiceOrderNo,
        AccountNo, VendorNo, ItemNo, PlantTypeCode, LocationCode,
        DocumentType, DocumentNo);
      IF FilterResult = FilterResult::OutOfFilter THEN
        EXIT(FALSE);

      ConsentRuleHasBeenFound := TRUE;

      IF ConsentRule."No Consent" THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ConsentIsNeededForAmount@1100528403(ConsentRule@1100528403 : Record 11012227;Amount@1100528402 : Decimal;BudgetFound@1100528405 : Boolean;ReceiptLineFound@1100528404 : Boolean;Difference@1100528401 : Decimal;Percentage@1100528400 : Decimal) : Boolean;
    BEGIN
      IF (ConsentRule."Minimum Amount" <> 0) OR
         (ConsentRule."Maximum Amount" <> 0)
      THEN
        IF (Amount >= ConsentRule."Minimum Amount") AND
           (Amount <= ConsentRule."Maximum Amount")
        THEN
          EXIT(TRUE);

      IF ConsentIsNeededForDeviation(
        ConsentRule."Min. Deviation From Rcpt. %", Percentage,
        ConsentRule."Min. Deviation From Rcpt.", Difference, Amount,
        (ConsentRule."Consent Deviation if No Rcpt." AND NOT ReceiptLineFound))
      THEN
        EXIT(TRUE);

      IF ConsentIsNeededForDeviation(
        ConsentRule."Min. Deviation From Budget %", Percentage,
        ConsentRule."Min. Deviation From Budget", Difference, Amount,
        (ConsentRule."Consent Deviation if No Budget" AND NOT BudgetFound))
      THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE ConsentIsNeededForDeviation@1100528444(MinDeviationPercentage@1100528400 : Decimal;DeviationPercentage@1100528403 : Decimal;MinDeviation@1100528401 : Decimal;Deviation@1100528404 : Decimal;Amount@1100528405 : Decimal;ConsiderAmountAsDeviation@1100528402 : Boolean) : Boolean;
    BEGIN
      IF (MinDeviationPercentage <> 0) AND
         (ABS(DeviationPercentage) >= MinDeviationPercentage)
      THEN
        EXIT(TRUE);

      IF (MinDeviation <> 0) AND
         (ABS(Deviation) >= MinDeviation)
      THEN
        EXIT(TRUE);

      IF ConsiderAmountAsDeviation THEN BEGIN
        IF (MinDeviationPercentage <> 0) AND
           (ABS(Amount) > 0)
        THEN
          EXIT(TRUE);

        IF (MinDeviation <> 0) AND
           (ABS(Amount) >= MinDeviation)
        THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE DetermineConsenter@1100528414(ConsentRule@1100525000 : Record 11012227;JobNo@1100525011 : Code[20];ServiceOrderNo@1100525010 : Code[20];ReceivingCompany@1100528400 : Text[30]) ConsenterUserID : Code[50];
    BEGIN
      IF ConsentRule."Consenter Group Code" <> '' THEN
        EXIT; //When consenter group code has been specified, consenter user id must be empty.

      ConsenterUserID := ConsentRule.Consenter;
      IF ConsenterUserID <> '' THEN
        EXIT;

      IF (ReceivingCompany = '') OR
         (ReceivingCompany = COMPANYNAME)
      THEN BEGIN
        CASE ConsentRule.Type OF
          ConsentRule.Type::Project:
            ConsenterUserID := DetermineConsenterForProject(ConsentRule, JobNo, ReceivingCompany);
          ConsentRule.Type::Service:
            ConsenterUserID := DetermineConsenterForServiceOrder(ConsentRule, ServiceOrderNo, ReceivingCompany);
        END;
      END ELSE
        IF ConsenterUserID = '' THEN
          ConsenterUserID := ConsentRule.GetSuperConsenter;
    END;

    LOCAL PROCEDURE DetermineConsenterForProject@1100528422(ConsentRule@1100525000 : Record 11012227;JobNo@1100525011 : Code[20];ReceivingCompany@1100528400 : Text[30]) ConsenterUserID : Code[50];
    VAR
      Job@1100525014 : Record 11072003;
    BEGIN
      IF Job.GET(JobNo) THEN
        CASE ConsentRule."Project Role" OF
          ConsentRule."Project Role"::"Project Manager":
            IF Job."Project Manager" <> '' THEN
              ConsenterUserID := GetConsenterBasedOnRole('', Job."Project Manager")
            ELSE
              Job.TESTFIELD("Project Manager");
          ConsentRule."Project Role"::"Project Engineer":
            IF Job."Project Engineer" <> '' THEN
              ConsenterUserID := GetConsenterBasedOnRole('', Job."Project Engineer")
            ELSE
              Job.TESTFIELD("Project Engineer");
          ConsentRule."Project Role"::Purchaser:
            IF Job."Purchaser Code" <> '' THEN
              ConsenterUserID := GetConsenterBasedOnRole(Job."Purchaser Code", '')
            ELSE
              Job.TESTFIELD("Purchaser Code");
          ConsentRule."Project Role"::"Site Manager":
            IF Job."Site Manager" <> '' THEN
              ConsenterUserID := GetConsenterBasedOnRole('', Job."Site Manager")
            ELSE
              Job.TESTFIELD("Site Manager");
          ConsentRule."Project Role"::Administrator:
            IF Job."Project Administrator" <> '' THEN
              ConsenterUserID := GetConsenterBasedOnRole('', Job."Project Administrator")
            ELSE
              Job.TESTFIELD("Project Administrator");
          ConsentRule."Project Role"::Estimator:
            IF Job.Estimator <> '' THEN
              ConsenterUserID := GetConsenterBasedOnRole('', Job.Estimator)
            ELSE
              Job.TESTFIELD(Estimator);
        END;
    END;

    LOCAL PROCEDURE DetermineConsenterForServiceOrder@1100528423(ConsentRule@1100525000 : Record 11012227;ServiceOrderNo@1100525010 : Code[20];ReceivingCompany@1100528402 : Text[30]) ConsenterUserID : Code[50];
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ResourceWOP@1100528403 : Record 11229278;
      ServiceLocation@1100528400 : Record 11012801;
      ServiceContract@1100528401 : Record 11012812;
    BEGIN
      IF ServiceOrder.GET(ServiceOrderNo) THEN
        CASE ConsentRule."Service Role" OF
          ConsentRule."Service Role"::"Order Manager":
            IF ServiceOrder."Order Manager" <> '' THEN
              ConsenterUserID := GetConsenterBasedOnRole(ServiceOrder."Order Manager", '')
            ELSE
              ServiceOrder.TESTFIELD("Order Manager");
          ConsentRule."Service Role"::"Assigned to":
            IF ServiceOrder."Assigned to" <> '' THEN
              ConsenterUserID := GetConsenterBasedOnRole('', ServiceOrder."Assigned to")
            ELSE
              ServiceOrder.TESTFIELD("Assigned to");
          ConsentRule."Service Role"::Employee:
            IF ServiceOrder."Employee No." <> '' THEN BEGIN
              IF ResourceWOP.GET(ServiceOrder."Employee No.") THEN BEGIN
                ResourceWOP.TESTFIELD(Type, ResourceWOP.Type::Employee);
                IF ResourceWOP."Source No." <> '' THEN
                  ConsenterUserID := GetConsenterBasedOnRole('', ResourceWOP."Source No.")
                END ELSE
                  ResourceWOP.TESTFIELD("Source No.");
            END ELSE
              ServiceOrder.TESTFIELD("Employee No.");
          ConsentRule."Service Role"::"Location Manager":
            IF ServiceOrder."Service Location No." <> '' THEN BEGIN
              IF ServiceLocation.GET(ServiceOrder."Service Location No.") THEN
                IF ServiceLocation."Location Manager" <> '' THEN
                  ConsenterUserID := GetConsenterBasedOnRole(ServiceLocation."Location Manager", '')
                ELSE
                  ServiceLocation.TESTFIELD("Location Manager");
            END ELSE
              ServiceOrder.TESTFIELD("Service Location No.");
          ConsentRule."Service Role"::"Contract Manager":
            IF ServiceOrder."Service Contract No." <> '' THEN BEGIN
              IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN
                IF ServiceContract."Contract Manager" <> '' THEN
                  ConsenterUserID := GetConsenterBasedOnRole(ServiceContract."Contract Manager", '')
                ELSE
                  ServiceContract.TESTFIELD("Contract Manager");
            END ELSE
              ServiceOrder.TESTFIELD("Service Contract No.");
        END;
    END;

    LOCAL PROCEDURE GetConsenterBasedOnRole@1100528405(PurchaserCode@1100528403 : Code[10];EmployeeNo@1100528404 : Code[20]) ConsenterUserID : Code[50];
    VAR
      UserSetup@1100528400 : Record 91;
      Consenter@1100528401 : Record 11012229;
    BEGIN
      IF PurchaserCode <> '' THEN BEGIN
        UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
        UserSetup.SETRANGE("Salespers./Purch. Code", PurchaserCode);
      END ELSE
        UserSetup.SETRANGE("Employee No.", EmployeeNo);

      UserSetup.FINDFIRST;
      Consenter.GET(UserSetup."User ID");
      ConsenterUserID := UserSetup."User ID";
    END;

    PROCEDURE CreateConsentLine@1100525003(ConsentProcess@1100525010 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';DocType@1100525007 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocNo@1100525006 : Code[20];DocLineNo@1100525005 : Integer;Amount@1100525004 : Decimal;VendorNo@1100525003 : Code[20];Type@1100525002 : ' ,Project,Service Order';TypeNo@1100525001 : Code[20];ConsentRule@1100525011 : Record 11012227;RunTemp@1100525000 : Boolean);
    VAR
      lvPurchInvHeaderRec@1100525016 : Record 122;
      Consenter@1210190000 : Record 11012229;
    BEGIN
      IF RunTemp THEN BEGIN
        InsertConsentLine(
          TempConsentRec, ConsentProcess, DocType, DocNo, DocLineNo, Amount, VendorNo,
          Type, TypeNo, ConsentRule);
      END ELSE BEGIN
        InsertConsentLine(
          ConsentRec, ConsentProcess, DocType, DocNo, DocLineNo, Amount, VendorNo,
          Type, TypeNo, ConsentRule);
      END;
    END;

    PROCEDURE InsertConsentLine@1100528427(VAR ConsentLine@1100528400 : Record 11012226;ConsentProcess@1100525010 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';DocType@1100525007 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocNo@1100525006 : Code[20];DocLineNo@1100525005 : Integer;Amount@1100525004 : Decimal;VendorNo@1100525003 : Code[20];Type@1100525002 : ' ,Project,Service Order';TypeNo@1100525001 : Code[20];ConsentRule@1100525011 : Record 11012227);
    VAR
      Consenter@1210190000 : Record 11012229;
    BEGIN
      IF ConsentLine.GET(
        DocType, DocNo, DocLineNo, ConsentRule.Consenter, ConsentRule."Consenter Group Code", Type, TypeNo)
      THEN
        IF ConsentLine.Level = 0 THEN
          EXIT // Do not overwrite manual lines
        ELSE
          ConsentLine.DELETE;

      ConsentLine.INIT;
      ConsentLine.Process := ConsentProcess;
      ConsentLine."Document Type" := DocType;
      ConsentLine."Document Line No." := DocLineNo;
      ConsentLine."Document No." := DocNo;
      ConsentLine."Document Line No." := DocLineNo;
      ConsentLine."User ID" := ConsentRule.Consenter;
      ConsentLine."Consenter Group Code" := ConsentRule."Consenter Group Code";
      IF (ConsentLine."User ID" = '') AND (ConsentLine."Consenter Group Code" = '') THEN
        ERROR(Text012, Consenter.TABLECAPTION, ConsentRule.TABLECAPTION, ConsentRule."Line No.");
      ConsentLine.Level := ConsentRule."Consent Level";
      ConsentLine."Creation  Date" := TODAY;
      ConsentLine.Amount := Amount;
      ConsentLine."Amount From"  := ConsentRule."Minimum Amount";
      ConsentLine."Amount To" := ConsentRule."Maximum Amount";
      ConsentLine."Vendor No." := VendorNo;
      ConsentLine.Type := Type;
      ConsentLine."Type No." := TypeNo;
      ConsentLine."Consent Rule Line No." := ConsentRule."Line No.";
      IF CurrentUserCanConsentThisLine(ConsentRule, Type, TypeNo) THEN
        ConsentLine."To be Consented Automatically" := TRUE;
      ConsentLine."Created by" := USERID;
      ConsentLine.INSERT;
    END;

    LOCAL PROCEDURE CurrentUserCanConsentThisLine@1100528413(ConsentRule@1100528400 : Record 11012227;Type@1100528402 : ' ,Project,Service Order';TypeNo@1100528401 : Code[20]) : Boolean;
    BEGIN
      IF NOT ConsentRule."Autom. Consent Own Lines" THEN
        EXIT(FALSE);

      IF ConsentRule.Consenter = USERID THEN
        EXIT(TRUE);

      IF CurrentUserIsConsenterGroupMember(ConsentRule) THEN
        EXIT(TRUE);

      IF Type = Type::Project THEN
        IF CurrentUserHasProjectRole(ConsentRule, TypeNo) THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE CurrentUserIsConsenterGroupMember@1100528415(ConsentRule@1100528400 : Record 11012227) : Boolean;
    VAR
      ConsenterGroupMember@1100528401 : Record 11012232;
    BEGIN
      IF ConsentRule."Consenter Group Code" = '' THEN
        EXIT(FALSE);

      IF ConsenterGroupMember.GET(ConsentRule."Consenter Group Code", USERID) THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE CurrentUserHasProjectRole@1100528416(ConsentRule@1100528400 : Record 11012227;ProjectNo@1100528401 : Code[20]) : Boolean;
    VAR
      JobsSetup@1100528403 : Record 315;
      UserSetup@1100528405 : Record 91;
      ProjectResponsiblePerson@1100528402 : Record 11012040;
      ResponsibilityCode@1100528404 : Code[10];
    BEGIN
      IF ProjectNo = '' THEN
        EXIT(FALSE);
      IF NOT JobsSetup.GET THEN
        EXIT(FALSE);
      IF NOT UserSetup.GET(USERID) THEN
        EXIT(FALSE);

      CASE ConsentRule."Project Role" OF
        ConsentRule."Project Role"::" ":
          ResponsibilityCode := '';
        ConsentRule."Project Role"::"Project Manager":
          ResponsibilityCode := JobsSetup."Responsibility Project Manager";
        ConsentRule."Project Role"::"Project Engineer":
          ResponsibilityCode := JobsSetup."Responsibility ProjectEngineer";
        ConsentRule."Project Role"::Purchaser:
          ResponsibilityCode := '';
        ConsentRule."Project Role"::"Site Manager":
          ResponsibilityCode := JobsSetup."Responsibility Site Manager";
        ConsentRule."Project Role"::Administrator:
          ResponsibilityCode := '';
        ConsentRule."Project Role"::Estimator:
          ResponsibilityCode := JobsSetup."Responsibility Estimator";
      END;

      IF ResponsibilityCode <> '' THEN BEGIN
        ProjectResponsiblePerson.SETCURRENTKEY("Employee No.", Responsibility, "Project No.");
        ProjectResponsiblePerson.SETRANGE("Employee No.", UserSetup."Employee No.");
        ProjectResponsiblePerson.SETRANGE(Responsibility, ResponsibilityCode);
        ProjectResponsiblePerson.SETRANGE("Project No.", ProjectNo);
        IF NOT ProjectResponsiblePerson.ISEMPTY THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetTempConsentDataSet@1100409000(VAR OTmpConsentLine@1100409000 : Record 11012226;ConsenterUserID@1100528400 : Code[50]);
    VAR
      TmpConsentLine@1100409001 : TEMPORARY Record 11012226;
      PurchasesPayablesSetup@1100409002 : Record 312;
      ConsentLine@1100409004 : Record 11012226;
      ConsentLine2@1100409005 : Record 11012226;
      ConsentFilterString@1100409003 : Text[1000];
      CompressionLevel@1100528401 : 'Default,Detailed,Compressed';
    BEGIN
      TmpConsentLine.COPY(OTmpConsentLine, TRUE);
      OTmpConsentLine.DELETEALL;

      IF NOT PurchasesPayablesSetup.GET THEN
        EXIT;
      IF NOT PurchasesPayablesSetup.ConsentIsUsed THEN
        EXIT;

      FillTempConsentLines(OTmpConsentLine, TRUE, FALSE, 0, '', ConsenterUserID, CompressionLevel::Default);
    END;

    PROCEDURE GetNoOfConsentLines@1100528600() : Integer;
    VAR
      TmpConsentLine@1100528600 : TEMPORARY Record 11012226;
    BEGIN
      GetTempConsentDataSet(TmpConsentLine, USERID);
      EXIT(TmpConsentLine.COUNT);
    END;

    PROCEDURE GetNoOfConsentLinesForConsenter@1100528426(ConsenterUserID@1100528400 : Code[50]) : Integer;
    VAR
      TmpConsentLine@1100528600 : TEMPORARY Record 11012226;
    BEGIN
      GetTempConsentDataSet(TmpConsentLine, ConsenterUserID);
      EXIT(TmpConsentLine.COUNT);
    END;

    PROCEDURE ShowConsentLines@1100528601();
    VAR
      TmpConsentLine@1100528600 : TEMPORARY Record 11012226;
      CompressionLevel@1100528400 : 'Default,Detailed,Compressed';
      ConsentPageID@1100528401 : Integer;
    BEGIN
      GetTempConsentDataSet(TmpConsentLine, USERID);
      IF CompressionIsUsed(USERID, CompressionLevel::Default) THEN
        ConsentPageID := PAGE::"Consent (Compressed)"
      ELSE
        ConsentPageID := PAGE::"Consent (Detailed)";
      //PAGE.RUN(0, TmpConsentLine); //C017995.o
      PAGE.RUNMODAL(ConsentPageID, TmpConsentLine); //C017995.n
    END;

    PROCEDURE CalcAmountLCY@1100528404(Amount@1100528400 : Decimal;CurrencyCode@1100528402 : Code[10];CurrencyFactor@1100528406 : Decimal;JobNo@1100528404 : Code[20];PostingDate@1100528405 : Date) AmountLCY : Decimal;
    VAR
      Currency@1100528401 : Record 4;
      CurrencyExchangeRate@1100528403 : Record 330;
      CurrExchRateDate@1100528407 : Date;
    BEGIN
      IF PostingDate <> 0D THEN
        CurrExchRateDate := PostingDate
      ELSE
        CurrExchRateDate := WORKDATE;

      Currency.InitRoundingPrecision;
      IF CurrencyCode <> '' THEN
        AmountLCY :=
          ROUND(
            CurrencyExchangeRate.ExchangeAmtFCYToLCY(
              1, JobNo, CurrExchRateDate, CurrencyCode,
              Amount, CurrencyFactor, FALSE),
            Currency."Amount Rounding Precision")
      ELSE
        AmountLCY :=
          ROUND(Amount, Currency."Amount Rounding Precision");
    END;

    PROCEDURE ApplyConsentPurchInvHeadertoApprovals@1100528206(VAR PurchInvHeader@1100485000 : Record 122;DocType@1100485002 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';TempBln@1100485001 : Boolean;ApprovalEntryArgument@1100528200 : Record 454) ConsentUsed : Boolean;
    VAR
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      ConsentProcess@1100525001 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      PurchCMRec@1100528201 : Record 124;
      AmountLCY@1100528202 : Decimal;
    BEGIN
      //**4PS Document Capture

      WITH PurchInvHeader DO BEGIN
        IF "Invoice Approved" THEN
          ConsentProcess := ConsentProcess::Invoice
        ELSE
          ConsentProcess := ConsentProcess::"Invoice Approval";

        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);

        CreateConsentLines(
          DocType,ConsentProcess,0,"No.",0,DimArrayCde,"Job No.",'',"Service Order No.",'',
          "Buy-from Vendor No.",'','',"Location Code",'',AmountLCY,0,0,TempBln);

        LoopPostedLines(PurchInvHeader."No.",DocType,PurchInvHeader."Invoice Approved",TempBln);

        TempConsentRec.SETCURRENTKEY("Document Type", "Document No.", Level);
        IF TempConsentRec.FINDSET THEN BEGIN
          ConsentUsed := TRUE;
          REPEAT
            CopyConsentToApproval(TempConsentRec, ApprovalEntryArgument);
          UNTIL TempConsentRec.NEXT = 0;
          TempConsentRec.DELETEALL;
        END;
      END;
    END;

    PROCEDURE ApplyConsentPurchCrMemHeadertoApprovals@1100528207(VAR PurchCMemoHdr@1100485000 : Record 124;DocType@1100485002 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';TempBln@1100485001 : Boolean;ApprovalEntryArgument@1100528200 : Record 454) ConsentUsed : Boolean;
    VAR
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      ConsentProcess@1100525001 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      PurchInvHdr@1100528201 : Record 122;
      AmountLCY@1100528202 : Decimal;
    BEGIN
      //**4PS Document Capture
      WITH PurchCMemoHdr DO BEGIN
        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);

        IF "Credit Memo Approved" THEN
          ConsentProcess := ConsentProcess::"Credit Memo"
        ELSE
          ConsentProcess := ConsentProcess::"Credit Memo Approval";

        CreateConsentLines(
          DocType,ConsentProcess,0,"No.",0,DimArrayCde,"Job No.",'',"Service Order No.",'',
          "Buy-from Vendor No.",'','',"Location Code",'',AmountLCY ,0,0,TempBln);

        LoopPostedLines(PurchCMemoHdr."No.",DocType,PurchCMemoHdr."Credit Memo Approved",TempBln);

        TempConsentRec.SETCURRENTKEY("Document Type", "Document No.", Level);
        IF TempConsentRec.FINDSET THEN BEGIN
          ConsentUsed := TRUE;
          REPEAT
            CopyConsentToApproval(TempConsentRec, ApprovalEntryArgument);
          UNTIL TempConsentRec.NEXT = 0;
          TempConsentRec.DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE RecordWithinConsentRuleFilters@1000000003(ConsentRule@1000000000 : Record 11012227;DimValueCodes@1000000008 : ARRAY [8] OF Code[20];JobNo@1000000007 : Code[20];ProjectElement@1100528400 : Code[20];ServiceOrderNo@1000000006 : Code[20];AccountNo@1000000004 : Code[20];VendorNo@1000000003 : Code[20];ItemNo@1100528401 : Code[20];PlantTypeCode@1100528402 : Code[20];LocationCode@1000000002 : Code[10];DocumentType@1100528000 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocumentNo@1100528001 : Code[20]) : Integer;
    VAR
      ConsentRuleFilter@1000000001 : Record 11229793;
      AllObjWithCaption@1100528403 : Record 2000000058;
      I@1000000013 : Integer;
      DimensionCode@1100528407 : Code[20];
      FilterResult@1100528404 : 'NoFilter,InFilter,OutOfFilter';
    BEGIN
      ConsentRuleFilter.SETRANGE("Consent Rule Line No.", ConsentRule."Line No.");
      IF ConsentRuleFilter.ISEMPTY THEN
        EXIT(FilterResult::NoFilter);
      ConsentRuleFilter.GetApplicableTables(AllObjWithCaption);
      IF NOT AllObjWithCaption.FINDSET THEN
        EXIT(FilterResult::NoFilter);
      REPEAT
        ConsentRuleFilter.SETRANGE("Table No.",AllObjWithCaption."Object ID");
        IF NOT ConsentRuleFilter.ISEMPTY THEN
          CASE TRUE OF
            AllObjWithCaption."Object ID" = DATABASE::Vendor:
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", VendorNo, 1, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
            AllObjWithCaption."Object ID" = DATABASE::"Dimension Value":
              FOR I := 1 TO 8 DO BEGIN
                DimensionCode := GetShortcutDimensionCode(I);
                IF DimensionCode <> '' THEN BEGIN
                  ConsentRuleFilter.SETRANGE("Dimension Code", DimensionCode);
                  IF NOT FieldsAreWithinFilters(
                    ConsentRuleFilter,AllObjWithCaption."Object ID", DimensionCode, 1, DimValueCodes[I], 2)
                  THEN
                    EXIT(FilterResult::OutOfFilter);
                  ConsentRuleFilter.SETRANGE("Dimension Code");
                END;
              END;
            AllObjWithCaption."Object ID" = DATABASE::Job:
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", JobNo, 1, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
            AllObjWithCaption."Object ID" = DATABASE::"Service Order":
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", ServiceOrderNo, 10, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
            AllObjWithCaption."Object ID" = DATABASE::"Purchase Header":
              IF DocumentType IN
                [DocumentType::"Purchase Quote", DocumentType::Order,
                 DocumentType::Invoice, DocumentType::"Credit Memo"]
              THEN
                IF NOT FieldsAreWithinFilters(
                  ConsentRuleFilter,AllObjWithCaption."Object ID", GetPurchHeaderDocumentTypeFilter(DocumentType), 1, DocumentNo, 3)
                THEN
                  EXIT(FilterResult::OutOfFilter);
            (AllObjWithCaption."Object ID" = DATABASE::"Purch. Inv. Header") AND (DocumentType = DocumentType::"Posted Invoice"):
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", DocumentNo, 3, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
            (AllObjWithCaption."Object ID" = DATABASE::"Purch. Cr. Memo Hdr.") AND (DocumentType = DocumentType::"Posted Credit Memo"):
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", DocumentNo, 3, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
            AllObjWithCaption."Object ID" = DATABASE::Location:
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", LocationCode, 1, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
            AllObjWithCaption."Object ID" = DATABASE::"Project Element":
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", JobNo, 10, ProjectElement, 20) THEN
                EXIT(FilterResult::OutOfFilter);
            AllObjWithCaption."Object ID" = DATABASE::"G/L Account":
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", AccountNo, 1, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
            AllObjWithCaption."Object ID" = DATABASE::Item:
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", ItemNo, 1, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
            AllObjWithCaption."Object ID" = DATABASE::"Plant Type":
              IF NOT FieldsAreWithinFilters(ConsentRuleFilter,AllObjWithCaption."Object ID", PlantTypeCode, 10, '', 0) THEN
                EXIT(FilterResult::OutOfFilter);
          END;
      UNTIL AllObjWithCaption.NEXT = 0;
      EXIT(FilterResult::InFilter);
    END;

    LOCAL PROCEDURE FieldsAreWithinFilters@1100528428(VAR ConsentRuleFilter@1100528401 : Record 11229793;TableID@1100528403 : Integer;PrimaryKeyValue1@1100528400 : Text;PrimaryKeyFieldNo1@1100528406 : Integer;PrimaryKeyValue2@1100528409 : Text;PrimaryKeyFieldNo2@1100528408 : Integer) WithinFilter : Boolean;
    VAR
      ConsentRuleFilter2@1100528402 : Record 11229793;
      RecRef@1100528404 : RecordRef;
      FieldRef@1100528405 : FieldRef;
    BEGIN
      WithinFilter := TRUE;
      ConsentRuleFilter2.COPYFILTERS(ConsentRuleFilter);
      IF NOT ConsentRuleFilter2.FINDSET THEN
        EXIT; // No filter specified, so within filter.

      RecRef.OPEN(TableID);
      RecRef.FILTERGROUP(9);
      IF PrimaryKeyFieldNo1 > 0 THEN BEGIN
        FieldRef := RecRef.FIELD(PrimaryKeyFieldNo1);
        FieldRef.SETFILTER('%1', PrimaryKeyValue1);
      END;
      IF PrimaryKeyFieldNo2 > 0 THEN BEGIN
        FieldRef := RecRef.FIELD(PrimaryKeyFieldNo2);
        FieldRef.SETFILTER('%1', PrimaryKeyValue2);
      END;
      RecRef.FILTERGROUP(0);

      REPEAT
        FieldRef := RecRef.FIELD(ConsentRuleFilter2."Field No.");
        FieldRef.SETFILTER(ConsentRuleFilter2.Filter);
      UNTIL ConsentRuleFilter2.NEXT = 0;

      IF RecRef.ISEMPTY THEN
        WithinFilter := FALSE;
      RecRef.CLOSE;
    END;

    LOCAL PROCEDURE GetShortcutDimensionCode@1100528406(I@1100528400 : Integer) DimensionCode : Code[20];
    VAR
      GeneralLedgerSetup@1100528401 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      CASE I OF
        1:
          DimensionCode := GeneralLedgerSetup."Shortcut Dimension 1 Code";
        2:
          DimensionCode := GeneralLedgerSetup."Shortcut Dimension 2 Code";
        3:
          DimensionCode := GeneralLedgerSetup."Shortcut Dimension 3 Code";
        4:
          DimensionCode := GeneralLedgerSetup."Shortcut Dimension 4 Code";
        5:
          DimensionCode := GeneralLedgerSetup."Shortcut Dimension 5 Code";
        6:
          DimensionCode := GeneralLedgerSetup."Shortcut Dimension 6 Code";
        7:
          DimensionCode := GeneralLedgerSetup."Shortcut Dimension 7 Code";
        8:
          DimensionCode := GeneralLedgerSetup."Shortcut Dimension 8 Code";
      END;
    END;

    LOCAL PROCEDURE GetPurchHeaderDocumentTypeFilter@1100528419(DocumentType@1100528400 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote') DocumentTypeFilter : Text;
    VAR
      PurchaseHeader@1100528402 : Record 38;
      DocumentTypeInt@1100528401 : Integer;
    BEGIN
      CASE DocumentType OF
        DocumentType::"Purchase Quote":
          DocumentTypeInt := PurchaseHeader."Document Type"::Quote;
        DocumentType::Order:
          DocumentTypeInt := PurchaseHeader."Document Type"::Order;
        DocumentType::Invoice:
          DocumentTypeInt := PurchaseHeader."Document Type"::Invoice;
        DocumentType::"Credit Memo":
          DocumentTypeInt := PurchaseHeader."Document Type"::"Credit Memo";
      END;
      DocumentTypeFilter := STRSUBSTNO('%1', DocumentTypeInt);
    END;

    PROCEDURE LoopPostedLines@1100528216(DocNo@1100528202 : Code[20];DocType@1100528201 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo';DocApproved@1100528203 : Boolean;TempBln@1100528200 : Boolean);
    BEGIN
      IF NOT DocApproved THEN
        LoopApprovalLines(DocNo,DocType,TempBln)
      ELSE
        LoopPostedPurchLines(DocNo,DocType,TempBln);
    END;

    PROCEDURE LoopApprovalLines@1100485013(DocNo@1100485000 : Code[20];DocType@1100485002 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo';TempBln@1100485001 : Boolean);
    VAR
      ApprovallineRec@1100485003 : Record 11012032;
    BEGIN
      CASE DocType OF
        DocType::"Posted Invoice":
          ApprovallineRec.SETRANGE("Document Type",ApprovallineRec."Document Type"::"Purchase Invoice");
        DocType::"Posted Credit Memo":
          ApprovallineRec.SETRANGE("Document Type",ApprovallineRec."Document Type"::"Credit Memo");
      END;

      ApprovallineRec.SETRANGE("Document No.",DocNo);
      IF ApprovallineRec.FINDSET THEN BEGIN
        REPEAT
          HandleApprovalLine(ApprovallineRec,DocType,DocNo,TempBln);
        UNTIL ApprovallineRec.NEXT = 0;
      END;
    END;

    PROCEDURE LoopPostedPurchLines@1100528204(DocNo@1100485000 : Code[20];DocType@1100485002 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo';TempBln@1100485001 : Boolean);
    VAR
      PurchInvLine@1100485003 : Record 123;
      PurchCrMemoLine@1100528200 : Record 125;
    BEGIN
      CASE DocType OF
        DocType::"Posted Invoice":
        BEGIN
          PurchInvLine.SETRANGE("Document No.",DocNo);
          IF PurchInvLine.FINDSET THEN BEGIN
            REPEAT
              HandlePostedPurchInvLine(PurchInvLine,DocType,DocNo,TempBln);
            UNTIL PurchInvLine.NEXT = 0;
          END;
        END;
        DocType::"Posted Credit Memo":
        BEGIN
          PurchCrMemoLine.SETRANGE("Document No.",DocNo);
          IF PurchCrMemoLine.FINDSET THEN BEGIN
            REPEAT
              HandlePostedCrMemoLine(PurchCrMemoLine,DocType,DocNo,TempBln);
            UNTIL PurchCrMemoLine.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE HandlePostedPurchInvLine@1100528210(VAR PurchInvLine@1100485000 : Record 123;DocType@1100485005 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocNo@1100485006 : Code[20];TempBln@1100485001 : Boolean);
    VAR
      PurchInvHeader@1100528401 : Record 122;
      DimensionManagement@1100528400 : Codeunit 408;
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      ConsentProcess@1100525001 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
    BEGIN
      ConsentProcess := ConsentProcess::Invoice;

      IF PurchInvHeader.GET(PurchInvLine."Document No.") THEN;

      //Purchase Registration Line should not be considered in consent of posted purchase invoice
      IF (NOT PurchInvHeader."Direct Posting") AND (NOT PurchInvLine."Approval Entry") THEN
        EXIT;

      WITH PurchInvLine DO BEGIN
        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);
        CreateConsentLines(
          DocType,ConsentProcess,1,DocNo,"Line No.",DimArrayCde,"Job No.",Element,"Service Order No.","No.",
          "Buy-from Vendor No.","Item No.","Plant Type", "Location Code","Receiving Company",
          "Amount (LCY)",0,0,TempBln);
      END;
    END;

    PROCEDURE HandlePostedCrMemoLine@1100528211(VAR PurchCrMemoLine@1100485000 : Record 125;DocType@1100485005 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocNo@1100485006 : Code[20];TempBln@1100485001 : Boolean);
    VAR
      PurchCrMemoHdr@1100528401 : Record 124;
      DimensionManagement@1100528400 : Codeunit 408;
      DimArrayCde@1100525000 : ARRAY [8] OF Code[20];
      ConsentProcess@1100525001 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
    BEGIN
      ConsentProcess := ConsentProcess::"Credit Memo";

      IF PurchCrMemoHdr.GET(PurchCrMemoLine."Document No.") THEN;

      //Purchase Registration Line should not be considered in consent of posted credit memo
      IF (NOT PurchCrMemoHdr."Direct Posting") AND (NOT PurchCrMemoLine."Approval Entry") THEN
        EXIT;

      WITH PurchCrMemoLine DO BEGIN
        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID", DimArrayCde[1], DimArrayCde[2]);
        DimensionManagement.GetShortcutDimensions("Dimension Set ID", DimArrayCde);
        CreateConsentLines(
          DocType,ConsentProcess,1,DocNo,"Line No.",DimArrayCde,"Job No.",Element,"Service Order No.","No.",
          "Buy-from Vendor No.","Item No.","Plant Type","Location Code","Receiving Company",
          "Amount (LCY)",0,0,TempBln);
      END;
    END;

    PROCEDURE ShowDetailedConsentLinesForCompressedLine@1100528438(TempCompressedConsentLine@1100528400 : TEMPORARY Record 11012226);
    VAR
      TempConsentLine@1100528600 : TEMPORARY Record 11012226;
    BEGIN
      FillTempDetailedConsentLinesForCompressedLine(TempConsentLine, TempCompressedConsentLine);
      IF TempConsentLine.FINDFIRST THEN;
      PAGE.RUNMODAL(PAGE::"Consent (Detailed)", TempConsentLine);
    END;

    PROCEDURE FillTempDetailedConsentLinesForCompressedLine@1100528433(VAR TempConsentLine@1100528402 : TEMPORARY Record 11012226;TempCompressedConsentLine@1100528400 : TEMPORARY Record 11012226);
    VAR
      ConsentLine@1100528401 : Record 11012226;
    BEGIN
      ConsentLine.SETRANGE("Document Type", TempCompressedConsentLine."Document Type");
      ConsentLine.SETRANGE("Document No.", TempCompressedConsentLine."Document No.");
      IF TempCompressedConsentLine."Compressed Document Line" THEN
        ConsentLine.SETFILTER("Document Line No.", '<>%1', 0)
      ELSE
        ConsentLine.SETRANGE("Document Line No.", TempCompressedConsentLine."Document Line No.");
      ConsentLine.SETRANGE("User ID", TempCompressedConsentLine."User ID");
      ConsentLine.SETRANGE("Consenter Group Code", TempCompressedConsentLine."Consenter Group Code");
      IF TempCompressedConsentLine."Document Type" IN
         [TempCompressedConsentLine."Document Type"::"Advice Order",
         TempCompressedConsentLine."Document Type"::"Purchase Action"]
      THEN BEGIN
        ConsentLine.SETRANGE(Type, TempCompressedConsentLine.Type);
        ConsentLine.SETRANGE("Type No.", TempCompressedConsentLine."Type No.");
      END;

      ConsentLine.SETRANGE(Consent, FALSE);

      IF ConsentLine.FINDSET THEN
        REPEAT
          IF NOT LowerLevelExists(ConsentLine) THEN BEGIN
            TempConsentLine := ConsentLine;
            FillNextConsenter(TempConsentLine);
            TempConsentLine.INSERT;
          END;
        UNTIL ConsentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FillNextConsenter@1100528430(VAR ConsentLine@1100528400 : Record 11012226);
    VAR
      ConsentLine2@1100528401 : Record 11012226;
    BEGIN
      ConsentLine2.SETCURRENTKEY("Document Type", "Document No.", Level);
      ConsentLine2.SETRANGE("Document Type", ConsentLine."Document Type");
      ConsentLine2.SETRANGE("Document No.", ConsentLine."Document No.");
      ConsentLine2.SETRANGE("Document Line No.", ConsentLine."Document Line No.");
      IF ConsentLine."Document Type" IN
         [ConsentLine."Document Type"::"Advice Order", ConsentLine."Document Type"::"Purchase Action"]
      THEN BEGIN
        ConsentLine2.SETRANGE(Type, ConsentLine.Type);
        ConsentLine2.SETRANGE("Type No.", ConsentLine."Type No.");
      END;

      ConsentLine2.SETRANGE(Consent, FALSE);
      ConsentLine2.SETFILTER(Level, '>%1', ConsentLine.Level);
      IF ConsentLine2.FINDFIRST THEN BEGIN
        ConsentLine."Next Consent User ID" := ConsentLine2."User ID";
        ConsentLine."Next Consenter Group Code" := ConsentLine2."Consenter Group Code";
      END;
    END;

    PROCEDURE FillTempConsentLines@1100528412(VAR TempConsentLine@1100528402 : TEMPORARY Record 11012226;ShowAllTypes@1100528400 : Boolean;ShowLinesOfAllUsers@1100528407 : Boolean;DocumentType@1100528405 : Integer;DocumentNo@1100528404 : Code[20];ConsenterUserID@1100528408 : Code[50];CompressionLevel@1100528410 : 'Default,Detailed,Compressed');
    VAR
      ConsentLine@1100528401 : Record 11012226;
      ConsentLine2@1100528406 : Record 11012226;
      ConsentFilterString@1100528403 : Text;
      UseCompression@1100528409 : Boolean;
    BEGIN
      IF NOT ShowAllTypes THEN BEGIN
        ConsentLine.SETRANGE("Document Type", DocumentType);
        ConsentLine.SETRANGE("Document No.", DocumentNo);
      END;

      ConsentLine.SETRANGE(Consent, FALSE);

      IF NOT ShowLinesOfAllUsers THEN BEGIN
        MarkConsentLinesOfUserID(ConsentLine, ConsenterUserID);
        MarkConsentLinesOfConsenterGroup(ConsentLine, ConsenterUserID);
        ConsentLine.MARKEDONLY(TRUE);
      END;

      IF ConsentLine.FINDSET THEN BEGIN
        UseCompression := CompressionIsUsed(ConsenterUserID, CompressionLevel);
        REPEAT
          IF NOT LowerLevelExists(ConsentLine) THEN BEGIN
            AddTempConsentLine(TempConsentLine, ConsentLine, UseCompression);
          END;
        UNTIL ConsentLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddTempConsentLine@1100528409(VAR TempConsentLine@1100528400 : TEMPORARY Record 11012226;ConsentLine@1100528401 : TEMPORARY Record 11012226;UseCompression@1100528402 : Boolean);
    BEGIN
      IF (ConsentLine."Document Type" <> ConsentLine."Document Type"::"Advice Order") AND
         (ConsentLine."Document Type" <> ConsentLine."Document Type"::"Purchase Action") AND
         (ConsentLine."Document Line No." <> 0) AND
         UseCompression
      THEN BEGIN
        IF TempConsentLine.GET(
          ConsentLine."Document Type", ConsentLine."Document No.", CompressedLineNo,
          ConsentLine."User ID", ConsentLine."Consenter Group Code",
          ConsentLine.Type::" ", '')
        THEN BEGIN
          TempConsentLine.Amount := TempConsentLine.Amount + ConsentLine.Amount;
          IF NOT ConsentLine."Ignore Temporary" THEN
            TempConsentLine."Ignore Temporary" := FALSE;
          TempConsentLine.MODIFY;
        END ELSE BEGIN
          TempConsentLine := ConsentLine;
          TempConsentLine."Document Line No." := CompressedLineNo;
          TempConsentLine."Compressed Document Line" := TRUE;
          TempConsentLine.Type := TempConsentLine.Type::" ";
          TempConsentLine."Type No.":= '';
          TempConsentLine.INSERT;
        END;
      END ELSE BEGIN
        TempConsentLine := ConsentLine;
        TempConsentLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE CompressedLineNo@1100528410() : Integer;
    BEGIN
      EXIT(-10000);
    END;

    LOCAL PROCEDURE MarkConsentLinesOfUserID@1100528424(VAR ConsentLine@1100528400 : Record 11012226;ConsenterUserID@1100528402 : Code[50]);
    VAR
      Consenter@1100528401 : Record 11012229;
    BEGIN
      ConsentLine.SETCURRENTKEY("User ID");

      ConsentLine.SETRANGE("User ID", ConsenterUserID);
      MarkConsentLines(ConsentLine);

      Consenter.SETRANGE("Substitute Consenter", ConsenterUserID);
      Consenter.SETRANGE("Substitution Active",  TRUE);
      IF Consenter.FINDSET THEN BEGIN
        REPEAT
          ConsentLine.SETRANGE("User ID", Consenter."User ID");
          MarkConsentLines(ConsentLine);
        UNTIL Consenter.NEXT=0;
      END;

      ConsentLine.SETRANGE("User ID");
    END;

    LOCAL PROCEDURE MarkConsentLinesOfConsenterGroup@1100528432(VAR ConsentLine@1100528400 : Record 11012226;ConsenterUserID@1100528404 : Code[50]);
    VAR
      Consenter@1100528401 : Record 11012229;
      ConsenterGroup@1100528402 : Record 11012228;
      ConsenterGroupMember@1100528403 : Record 11012232;
    BEGIN
      ConsentLine.SETCURRENTKEY("Consenter Group Code");

      ConsenterGroupMember.SETRANGE("Consenter User ID", ConsenterUserID);
      IF ConsenterGroupMember.FINDSET THEN
        REPEAT
          ConsentLine.SETRANGE("Consenter Group Code", ConsenterGroupMember."Consenter Group Code");
          MarkConsentLines(ConsentLine);
        UNTIL ConsenterGroupMember.NEXT = 0;

      ConsentLine.SETRANGE("Consenter Group Code");
    END;

    LOCAL PROCEDURE MarkConsentLines@1100528425(VAR ConsentLine@1100528400 : Record 11012226);
    BEGIN
      IF ConsentLine.FINDSET THEN
        REPEAT
          ConsentLine.MARK(TRUE);
        UNTIL ConsentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetConsentProcessForPurchHeader@1100528407(DocType@1100528400 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote') : Integer;
    VAR
      ConsentProcess@1100528401 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
    BEGIN
      CASE DocType OF
        DocType::"Purchase Quote":
          ConsentProcess := ConsentProcess::"Purchase Quote";
        DocType::Order:
          ConsentProcess := ConsentProcess::"Purchase Order";
        DocType::Invoice, DocType::"Posted Invoice":
          ConsentProcess := ConsentProcess::Invoice;
        DocType::"Credit Memo", DocType::"Posted Credit Memo":
          ConsentProcess := ConsentProcess::"Credit Memo";
      END;

      EXIT(ConsentProcess);
    END;

    LOCAL PROCEDURE CreateConsentLineForSuperConsenterDeniedLines@1100528418(ConsentProcess@1100528409 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';DocType@1100528408 : 'Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote';DocNo@1100528407 : Code[20];DocLineNo@1100528406 : Integer;Amount@1100528405 : Decimal;VendorNo@1100528404 : Code[20];Type@1100528403 : ' ,Project,Service Order';TypeNo@1100528402 : Code[20];RunTemp@1100528400 : Boolean);
    VAR
      PurchasesPayablesSetup@1100528410 : Record 312;
      ConsentRule@1100528401 : Record 11012227;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.TESTFIELD("Super Consenter Denied Lines");
      ConsentRule.Consenter := PurchasesPayablesSetup."Super Consenter Denied Lines";
      ConsentRule."Consent Level" := 1; //Not 0 because then it would be a manual consent line.
      CreateConsentLine(
        ConsentProcess, DocType, DocNo, DocLineNo, Amount,
        VendorNo, Type, TypeNo, ConsentRule, RunTemp);
    END;

    PROCEDURE AutoConsentAdviceOrderLine@1100528429(AdviceOrderLine@1100528405 : Record 11012055);
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      CASE AdviceOrderLine."Record Type" OF
        AdviceOrderLine."Record Type"::Project:
          BEGIN
            ConsentLine.SETRANGE(Type, ConsentLine.Type::Project);
            ConsentLine.SETRANGE("Type No.", AdviceOrderLine."Project No.");
          END;
        AdviceOrderLine."Record Type"::ServOrder:
          BEGIN
            ConsentLine.SETRANGE(Type, ConsentLine.Type::"Service Order");
            ConsentLine.SETRANGE("Type No.", AdviceOrderLine."Service Order No.");
          END;
      END;
      ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Advice Order");
      ConsentLine.SETRANGE("Document Line No.", AdviceOrderLine."Line No.");
      AutoConsentConsentLines(ConsentLine);
    END;

    PROCEDURE AutoConsentProjectPurchaseAction@1100528435(ProjectPurchaseAction@1100528404 : Record 11012026);
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      ConsentLine.SETRANGE(Type, ConsentLine.Type::Project);
      ConsentLine.SETRANGE("Type No.", ProjectPurchaseAction."Project No.");
      ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Purchase Action");
      ConsentLine.SETRANGE("Document No.", ProjectPurchaseAction.Code);
      AutoConsentConsentLines(ConsentLine);
    END;

    PROCEDURE AutoConsentPurchaseHeader@1100528431(PurchaseHeader@1100528402 : Record 38);
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Quote:
          ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Purchase Quote");
        PurchaseHeader."Document Type"::Order:
          ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::Order);
        PurchaseHeader."Document Type"::Invoice:
          ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::Invoice);
        PurchaseHeader."Document Type"::"Credit Memo":
          ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Credit Memo");
      END;
      ConsentLine.SETRANGE("Document No.", PurchaseHeader."No.");
      AutoConsentConsentLines(ConsentLine);
    END;

    PROCEDURE AutoConsentPurchInvHeader@1100528436(PurchInvHeaderNo@1100528402 : Code[20]);
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Posted Invoice");
      ConsentLine.SETRANGE("Document No.", PurchInvHeaderNo);
      AutoConsentConsentLines(ConsentLine);
    END;

    PROCEDURE AutoConsentPurchCrMemoHdr@1100528437(PurchCrMemoHdrNo@1100528401 : Code[20]);
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Posted Credit Memo");
      ConsentLine.SETRANGE("Document No.", PurchCrMemoHdrNo);
      AutoConsentConsentLines(ConsentLine);
    END;

    LOCAL PROCEDURE AutoConsentConsentLines@1100528417(VAR ConsentLine@1100528400 : Record 11012226);
    VAR
      ConsentLine2@1100528401 : Record 11012226;
    BEGIN
      ConsentLine.SETRANGE("To be Consented Automatically", TRUE);
      IF ConsentLine.FINDSET THEN
        REPEAT
          AutoConsentLowerLevelConsentLines(ConsentLine);
          // Consent line may be changed by changes in lower level consent lines.
          IF ConsentLine2.GET(
            ConsentLine."Document Type", ConsentLine."Document No.", ConsentLine."Document Line No.",
            ConsentLine."User ID", ConsentLine."Consenter Group Code", ConsentLine.Type,
            ConsentLine."Type No.")
          THEN
            AutoConsentConsentLine(ConsentLine2);
        UNTIL ConsentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AutoConsentLowerLevelConsentLines@1100528440(VAR ConsentLine@1100528400 : Record 11012226);
    VAR
      ConsentLine2@1100528401 : Record 11012226;
    BEGIN
      ConsentLine2.SETCURRENTKEY("Document Type", "Document No.", Level);
      ConsentLine2.SETRANGE("Document Type", ConsentLine."Document Type");
      ConsentLine2.SETRANGE("Document No.", ConsentLine."Document No.");
      ConsentLine2.SETRANGE("Document Line No.", ConsentLine."Document Line No.");
      IF ConsentLine."Document Type" IN
         [ConsentLine."Document Type"::"Advice Order", ConsentLine."Document Type"::"Purchase Action"]
      THEN BEGIN
        ConsentLine2.SETRANGE(Type, ConsentLine.Type);
        ConsentLine2.SETRANGE("Type No.", ConsentLine."Type No.");
      END;
      ConsentLine2.SETRANGE(Manual, FALSE);
      ConsentLine2.SETFILTER(Level, '<%1', ConsentLine.Level);
      IF ConsentLine2.FINDSET THEN
        REPEAT
          AutoConsentConsentLine(ConsentLine2);
        UNTIL ConsentLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE AutoConsentConsentLine@1100528421(VAR ConsentLine@1100528400 : Record 11012226);
    BEGIN
      ConsentLine."Consented Automatically" := TRUE;
      ConsentLine."To be Consented Automatically" := FALSE;
      ConsentLine."Handled By" := ''; // Handled by will be filled by validating Consent.
      ConsentLine.VALIDATE(Consent, TRUE);
      ConsentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CompressionIsUsed@1100528445(ConsenterUserID@1100528401 : Code[50];CompressionLevel@1100528400 : 'Default,Detailed,Compressed') UseCompression : Boolean;
    VAR
      Consenter@1100528402 : Record 11012229;
    BEGIN
      UseCompression := TRUE;
      CASE CompressionLevel OF
        CompressionLevel::Default:
          IF Consenter.GET(ConsenterUserID) THEN
            IF Consenter."Initial View Consent Lines" = Consenter."Initial View Consent Lines"::Compressed THEN
              UseCompression := TRUE
            ELSE
              UseCompression := FALSE;
        CompressionLevel::Detailed:
          UseCompression := FALSE;
        CompressionLevel::Compressed:
          UseCompression := TRUE;
      END;
    END;

    BEGIN
    END.
  }
}

