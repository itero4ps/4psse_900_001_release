OBJECT Codeunit 11012150 Estimate Buffer Mgt OLD
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Gap@1100485015 : Integer;
      MarkNo@1100485014 : Integer;
      CurrLino@1100485013 : Integer;
      PrevLino@1100485012 : Integer;
      gvEst@1100485011 : Code[20];
      gvSubEst@1100485010 : Code[20];
      gvPartGrp@1100485009 : Code[20];
      gvPart@1100485008 : Code[20];
      gvEstLine@1100485007 : Integer;
      gvRcpGrp@1100485006 : Code[20];
      gvRcp@1100485005 : Code[20];
      gvRcpLine@1100485004 : Integer;
      SkipMark@1100485003 : Boolean;
      Text001@1100485016 : TextConst 'ENU=%1 Lines copied';
      SelectDest@1100485000 : Boolean;
      gvDest@1100485001 : Integer;
      Text002@1100525000 : TextConst 'ENU="First select records "';

    PROCEDURE CopyToBuffer@1210190005(lvAction@1100485002 : Integer;VAR EstLineRec@1100485000 : Record 11012154;VAR RcpLineRec@1100485003 : Record 11012156;VAR PartLineRec@1100485005 : Record 11012187);
    VAR
      lvEstLineRec@1100485001 : Record 11012154;
      lvRcpLineRec@1100485004 : Record 11012156;
      lvPartLineRec@1100485007 : Record 11012187;
      BufferRec@1100485006 : Record 11012195;
    BEGIN
      IF lvAction = 0 THEN BEGIN
        lvEstLineRec.COPY(EstLineRec);
        WITH lvEstLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Estimate No." := "Estimate No.";
              BufferRec."Sub-Estimate No." := "Sub-Estimate No.";
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Line No.";
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        EstLineRec.CLEARMARKS;
      END;

      IF lvAction = 1 THEN BEGIN
        lvRcpLineRec.COPY(RcpLineRec);
        WITH lvRcpLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Estimate No." := "Estimate No.";
              BufferRec."Sub-Estimate No." := "Sub-Estimate No.";
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Estimate Line";
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              BufferRec."Recipe Line" := "Line No.";
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        RcpLineRec.CLEARMARKS;
      END;

      IF lvAction = 2 THEN BEGIN
        lvPartLineRec.COPY(PartLineRec);
        WITH lvPartLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Line No.";
              BufferRec.Description := Description;
              //BufferRec."Recipe Group" := "Recipe Group";
              //BufferRec.Recipe := Recipe;  //db, 04-09-07 (used as filter when copied from buffer)
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        PartLineRec.CLEARMARKS;
      END;
    END;

    PROCEDURE CopyFromBuffer@1210190006(lvAction@1100485001 : Integer;EstLineRec@1100485000 : Record 11012154;RcpLineRec@1100485002 : Record 11012156;PartLineRec@1100485003 : Record 11012187);
    VAR
      BufferRec@1100485004 : Record 11012195;
    BEGIN
      IF lvAction = 0 THEN
        WITH EstLineRec DO
          SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.", '', '', 0, TRUE, FALSE);

      IF lvAction = 1 THEN
        WITH RcpLineRec DO
          SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
          "Recipe Group", Recipe, "Line No.", TRUE, FALSE);

      IF lvAction = 2 THEN
        WITH PartLineRec DO
          SetSelection('', '', "Part Group", Part, "Line No.", '', '', 0, TRUE, FALSE);

      CopyLines(BufferRec);
    END;

    PROCEDURE ShowBuffer@1210190007(lvAction@1100485002 : Integer;EstLineRec@1100485000 : Record 11012154;RcpLineRec@1100485001 : Record 11012156;PartLineRec@1100485005 : Record 11012187);
    VAR
      BufferRec@1100485004 : Record 11012195;
      BufferFrm@1100485003 : Page 11012250;
    BEGIN
      BufferRec.FILTERGROUP(2);
      BufferRec.SETRANGE("User ID", USERID);
      BufferRec.FILTERGROUP(0);

      IF lvAction = 0 THEN
        WITH EstLineRec DO
          BufferFrm.SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.", '', '', 0, FALSE, FALSE);

      IF lvAction = 1 THEN
        WITH RcpLineRec DO
          BufferFrm.SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
          "Recipe Group", Recipe, "Line No.", FALSE, FALSE);

      IF lvAction = 2 THEN
        WITH PartLineRec DO
          BufferFrm.SetSelection('', '', "Part Group", Part, "Line No.", '', '', 0, FALSE,FALSE);

      BufferFrm.SETTABLEVIEW(BufferRec);
      BufferFrm.RUNMODAL;
      CLEAR(BufferFrm);
    END;

    PROCEDURE SetSelection@1210190004(lvEst@1210190000 : Code[20];lvSubEst@1210190001 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190003 : Code[20];lvEstLine@1210190004 : Integer;lvRcpGrp@1100485000 : Code[20];lvRcp@1100485001 : Code[20];lvRcpLine@1100485002 : Integer;lvSkipMark@1100485003 : Boolean;lvSelectDest@1100485004 : Boolean);
    BEGIN
      gvEst := lvEst;
      gvSubEst := lvSubEst;
      gvPartGrp := lvPartGrp;
      gvPart := lvPart;
      gvEstLine := lvEstLine;
      gvRcpGrp := lvRcpGrp;
      gvRcp := lvRcp;
      gvRcpLine := lvRcpLine;
      SkipMark := lvSkipMark;
      SelectDest := lvSelectDest;

      IF gvEst = '' THEN BEGIN
        IF gvRcp = '' THEN
          gvDest := 20
        ELSE
          gvDest := 10;
      END ELSE BEGIN
        IF gvRcp = '' THEN
          gvDest := 0
        ELSE
          gvDest := 1;
      END;
    END;

    PROCEDURE CopyLines@1210190000(VAR BufferRec@1100485004 : Record 11012195);
    VAR
      EstRec@1210190002 : Record 11012151;
      EstPartRec@1210190000 : Record 11012153;
      StdPartRec@1100485006 : Record 11012169;
      OrigEstLineRec@1210190001 : Record 11012154;
      DestEstLineRec@1210190003 : Record 11012154;
      RcpRec@1100485001 : Record 11012155;
      OrigRcpLineRec@1100485002 : Record 11012156;
      DestRcpLineRec@1100485003 : Record 11012156;
      OrigPartLineRec@1100485007 : Record 11012187;
      DestPartLineRec@1100485008 : Record 11012187;
      CopyRcpFrm@1100485000 : Page 11012213;
      lvBufferRec@1100485005 : Record 11012195;
      EstSetup@1100525000 : Record 11012150;
    BEGIN
      EstSetup.GET;  //db, 10-02-15: C009772
      lvBufferRec.COPY(BufferRec);
      WITH BufferRec DO BEGIN
        IF SkipMark = TRUE THEN BEGIN
          SETRANGE("User ID", USERID);
          SETRANGE(Store, FALSE);
          IF NOT FINDSET THEN
            EXIT;
        END ELSE BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
            EXIT;
          END;
        END;

        MarkNo := COUNT;
        CurrLino := 0;
        PrevLino := 0;
        Gap := 0;
        CLEAR(RcpRec);
        CLEAR(StdPartRec);
        CLEAR(EstPartRec);

        CASE gvDest OF
          0,  //estimate line
          1:  //estimate recipe line
            BEGIN
              EstPartRec."Estimate No." := gvEst;
              EstPartRec."Sub-Estimate No." := gvSubEst;
              EstPartRec."Part Group" := gvPartGrp;
              EstPartRec.Part := gvPart;
              IF SelectDest THEN BEGIN
                EstPartRec.SETRANGE("Estimate No.", gvEst);
                IF PAGE.RUNMODAL(PAGE::"Estimate Part List", EstPartRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                IF gvDest = 0 THEN
                  CurrLino := gvEstLine;
                IF gvDest = 1 THEN BEGIN
                  CurrLino := gvRcpLine;
                  RcpRec."Recipe Group" := gvRcpGrp;
                  RcpRec."No." := gvRcp;
                END;
              END;
              IF gvDest = 0 THEN
                DetermineLino(
                  EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.",
                  EstPartRec."Part Group", EstPartRec.Part, CurrLino,
                  '', '', 0);
              IF gvDest = 1 THEN
                DetermineLino(
                  gvEst, gvSubEst,
                  gvPartGrp, gvPart, gvEstLine,
                  RcpRec."Recipe Group", RcpRec."No.", CurrLino);
              EstRec.GET(EstPartRec."Estimate No.");
              EstRec.TESTFIELD(Fixed, FALSE);
            END;
          10:  //standard recipe line
            BEGIN
              RcpRec."Recipe Group" := gvRcpGrp;
              RcpRec."No." := gvRcp;
              IF SelectDest THEN BEGIN
                RcpRec.SETRANGE("Recipe Group", gvRcpGrp);
                IF PAGE.RUNMODAL(PAGE::"Recipe List", RcpRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                CurrLino := gvRcpLine;
              END;
              DetermineLino(
                gvEst, gvSubEst,
                gvPartGrp, gvPart, gvEstLine,
                RcpRec."Recipe Group", RcpRec."No.", CurrLino);
              RcpRec.GET(RcpRec."Recipe Group", RcpRec."No.");
              RcpRec.TESTFIELD(Fixed, FALSE);
            END;
          20:  //standart part line
            BEGIN
              StdPartRec."Part Group" := gvPartGrp;
              StdPartRec.Code := gvPart;
              IF SelectDest THEN BEGIN
                StdPartRec.SETRANGE("Part Group", gvPartGrp);
                IF PAGE.RUNMODAL(PAGE::"Part List", StdPartRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                CurrLino := gvEstLine;
              END;
              DetermineLino('', '', StdPartRec."Part Group", StdPartRec.Code, 0, '', '', 0);
            END;
        END;

        REPEAT
          IF (gvEst = '') AND (gvRcp = '') THEN BEGIN
            //voorlopig alleen uitwisselen tussen standaard onderdelen onderling
            IF ("Estimate No." = '') AND (Recipe = '') THEN BEGIN
              IF OrigPartLineRec.GET("Part Group", Part, "Estimate Line") THEN BEGIN
                DestPartLineRec := OrigPartLineRec;
                DestPartLineRec."Part Group" := StdPartRec."Part Group";
                DestPartLineRec.Part := StdPartRec.Code;
                DestPartLineRec."Line No." := CurrLino + Gap;
                CurrLino := DestPartLineRec."Line No.";
                DestPartLineRec.INSERT(TRUE);
              END;
            END ELSE BEGIN
              IF gvDest = 20 THEN ERROR('Alleen uitwisseling tussen standaard onderdelen toegestaan');  //db, 04-09-07
            END;
          END;
          IF gvEst <> '' THEN BEGIN
            IF (gvRcp = '') OR (SelectDest = TRUE) THEN BEGIN
              //tijdelijk: selecteren bestemming werkt alleen voor onderdeel, niet voor recept(=calc.regel)
              //bestemming: calculatieregel
              IF "Recipe Line" = 0 THEN BEGIN
                //oorsprong: calculatieregel
                IF OrigEstLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line") THEN
                BEGIN
                  DestEstLineRec := OrigEstLineRec;
                  DestEstLineRec."Estimate No." := EstPartRec."Estimate No.";
                  DestEstLineRec."Sub-Estimate No." := EstPartRec."Sub-Estimate No.";
                  DestEstLineRec."Part Group" := EstPartRec."Part Group";
                  DestEstLineRec.Part := EstPartRec.Part;
                  DestEstLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestEstLineRec."Line No.";
                  DestEstLineRec.INSERT(TRUE);
                  DestEstLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                  DestEstLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                  DestEstLineRec."Subcontracting Agreement" := OrigEstLineRec."Subcontracting Agreement";
                  DestEstLineRec."Plant Agreement" := OrigEstLineRec."Plant Agreement";
                  IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, FALSE);
                  GetSalesDiscountEstLine(DestEstLineRec);  //db, 23-05-13: C006745
                  DestEstLineRec.MODIFY;
                  CopyDetails(
                    OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                    OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.", '', '', 0,
                    DestEstLineRec."Estimate No.", DestEstLineRec."Sub-Estimate No.",
                    DestEstLineRec."Part Group", DestEstLineRec.Part, DestEstLineRec."Line No.", '', '', 0,
                    (Recipe<>''));  //DP00381
                END;
              END ELSE BEGIN
                //oorsprong: receptregel
                IF OrigRcpLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line",
                  "Recipe Group", Recipe, "Recipe Line") THEN
                BEGIN
                  DestEstLineRec."Estimate No." := EstPartRec."Estimate No.";
                  DestEstLineRec."Sub-Estimate No." := EstPartRec."Sub-Estimate No.";
                  DestEstLineRec."Part Group" := EstPartRec."Part Group";
                  DestEstLineRec.Part := EstPartRec.Part;
                  DestEstLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestEstLineRec."Line No.";
                  AssignRecipeToEstimateLine(DestEstLineRec, OrigRcpLineRec);
                  DestEstLineRec.INSERT(TRUE);
                  DestEstLineRec."Price Agreement" := OrigRcpLineRec."Price Agreement";
                  DestEstLineRec."Norm Agreement" := OrigRcpLineRec."Norm Agreement";
                  DestEstLineRec."Subcontracting Agreement" := OrigRcpLineRec."Subcontracting Agreement";
                  DestEstLineRec."Plant Agreement" := OrigRcpLineRec."Plant Agreement";
                  IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, FALSE);
                  GetSalesDiscountEstLine(DestEstLineRec);  //db, 23-05-13: C006745
                  DestEstLineRec.MODIFY;
                  CopyDetails(
                    OrigRcpLineRec."Estimate No.", OrigRcpLineRec."Sub-Estimate No.",
                    OrigRcpLineRec."Part Group", OrigRcpLineRec.Part, OrigRcpLineRec."Estimate Line",
                    OrigRcpLineRec."Recipe Group", OrigRcpLineRec.Recipe, OrigRcpLineRec."Line No.",
                    DestEstLineRec."Estimate No.", DestEstLineRec."Sub-Estimate No.",
                    DestEstLineRec."Part Group", DestEstLineRec.Part, DestEstLineRec."Line No.", '', '', 0,
                    FALSE);  //DP00381
                END;
              END;
            END ELSE BEGIN
              //bestemming: receptregel (calculatie)
              //tijdelijk: werkt alleen zonder selectie bestemming
              IF "Recipe Line" = 0 THEN BEGIN
                //oorsprong: calculatieregel
                IF OrigEstLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line") THEN
                BEGIN
                  DestRcpLineRec.INIT;
                  DestRcpLineRec."Estimate No." := gvEst;
                  DestRcpLineRec."Sub-Estimate No." := gvSubEst;
                  DestRcpLineRec."Part Group" := gvPartGrp;
                  DestRcpLineRec.Part := gvPart;
                  DestRcpLineRec."Estimate Line" := gvEstLine;
                  DestRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                  DestRcpLineRec.Recipe := RcpRec."No.";
                  DestRcpLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestRcpLineRec."Line No.";
                  AssignEstimateToRecipeLine(DestRcpLineRec, OrigEstLineRec);
                  DestRcpLineRec.INSERT(TRUE);
                  DestRcpLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                  DestRcpLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                  DestRcpLineRec."Subcontracting Agreement" := OrigEstLineRec."Subcontracting Agreement";
                  DestRcpLineRec."Plant Agreement" := OrigEstLineRec."Plant Agreement";
                  IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, TRUE);  //db, 05-03-15
                  GetSalesDiscountRcpLine(DestRcpLineRec);  //db, 23-05-13: C006745
                  DestRcpLineRec.MODIFY;
                  CopyDetails(
                    OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                    OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.",
                    '', '', 0,
                    DestRcpLineRec."Estimate No.", DestRcpLineRec."Sub-Estimate No.",
                    DestRcpLineRec."Part Group", DestRcpLineRec.Part, DestRcpLineRec."Estimate Line",
                    DestRcpLineRec."Recipe Group", DestRcpLineRec.Recipe, DestRcpLineRec."Line No.",
                    FALSE);  //DP00381
                END;
              END ELSE BEGIN
                //oorsprong: receptregel
                IF OrigRcpLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line",
                  "Recipe Group", Recipe, "Recipe Line") THEN
                BEGIN
                  DestRcpLineRec := OrigRcpLineRec;
                  DestRcpLineRec."Estimate No." := gvEst;
                  DestRcpLineRec."Sub-Estimate No." := gvSubEst;
                  DestRcpLineRec."Part Group" := gvPartGrp;
                  DestRcpLineRec.Part := gvPart;
                  DestRcpLineRec."Estimate Line" := gvEstLine;
                  DestRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                  DestRcpLineRec.Recipe := RcpRec."No.";
                  DestRcpLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestRcpLineRec."Line No.";
                  DestRcpLineRec.INSERT(TRUE);
                  DestRcpLineRec."Price Agreement" := OrigRcpLineRec."Price Agreement";
                  DestRcpLineRec."Norm Agreement" := OrigRcpLineRec."Norm Agreement";
                  DestRcpLineRec."Subcontracting Agreement" := OrigRcpLineRec."Subcontracting Agreement";
                  DestRcpLineRec."Plant Agreement" := OrigRcpLineRec."Plant Agreement";
                  IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, TRUE);  //db, 05-03-15
                  GetSalesDiscountRcpLine(DestRcpLineRec);  //db, 23-05-13: C006745
                  DestRcpLineRec.MODIFY;
                  CopyDetails(
                    OrigRcpLineRec."Estimate No.", OrigRcpLineRec."Sub-Estimate No.",
                    OrigRcpLineRec."Part Group", OrigRcpLineRec.Part, OrigRcpLineRec."Estimate Line",
                    OrigRcpLineRec."Recipe Group", OrigRcpLineRec.Recipe, OrigRcpLineRec."Line No.",
                    DestRcpLineRec."Estimate No.", DestRcpLineRec."Sub-Estimate No.",
                    DestRcpLineRec."Part Group", DestRcpLineRec.Part, DestRcpLineRec."Estimate Line",
                    DestRcpLineRec."Recipe Group", DestRcpLineRec.Recipe, DestRcpLineRec."Line No.",
                    FALSE);  //DP00381
                END;
              END;
            END;
          END ELSE BEGIN
            //bestemming: receptregel (standaard)
            IF "Recipe Line" = 0 THEN BEGIN
              //oorsprong: calculatieregel
              IF OrigEstLineRec.GET(
                "Estimate No.", "Sub-Estimate No.",
                "Part Group", Part, "Estimate Line") THEN
              BEGIN
                DestRcpLineRec.INIT;
                DestRcpLineRec."Estimate No." := gvEst;
                DestRcpLineRec."Sub-Estimate No." := gvSubEst;
                DestRcpLineRec."Part Group" := gvPartGrp;
                DestRcpLineRec.Part := gvPart;
                DestRcpLineRec."Estimate Line" := gvEstLine;
                DestRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                DestRcpLineRec.Recipe := RcpRec."No.";
                DestRcpLineRec."Line No." := CurrLino + Gap;
                CurrLino := DestRcpLineRec."Line No.";
                AssignEstimateToRecipeLine(DestRcpLineRec, OrigEstLineRec);
                DestRcpLineRec.INSERT(TRUE);
                DestRcpLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                DestRcpLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                DestRcpLineRec."Subcontracting Agreement" := OrigEstLineRec."Subcontracting Agreement";
                DestRcpLineRec."Plant Agreement" := OrigEstLineRec."Plant Agreement";
                IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                  CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, TRUE);  //db, 05-03-15
                GetSalesDiscountRcpLine(DestRcpLineRec);  //db, 23-05-13: C006745
                DestRcpLineRec.MODIFY;
                CopyDetails(
                  OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                  OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.",
                  '', '', 0,
                  DestRcpLineRec."Estimate No.", DestRcpLineRec."Sub-Estimate No.",
                  DestRcpLineRec."Part Group", DestRcpLineRec.Part, DestRcpLineRec."Estimate Line",
                  DestRcpLineRec."Recipe Group", DestRcpLineRec.Recipe, DestRcpLineRec."Line No.",
                  FALSE);  //DP00381
              END;
            END ELSE BEGIN
              //oorsprong: receptregel
              IF OrigRcpLineRec.GET(
                "Estimate No.", "Sub-Estimate No.",
                "Part Group", Part, "Estimate Line",
                "Recipe Group", Recipe, "Recipe Line") THEN
              BEGIN
                DestRcpLineRec := OrigRcpLineRec;
                DestRcpLineRec."Estimate No." := gvEst;
                DestRcpLineRec."Sub-Estimate No." := gvSubEst;
                DestRcpLineRec."Part Group" := gvPartGrp;
                DestRcpLineRec.Part := gvPart;
                DestRcpLineRec."Estimate Line" := gvEstLine;
                DestRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                DestRcpLineRec.Recipe := RcpRec."No.";
                DestRcpLineRec."Line No." := CurrLino + Gap;
                CurrLino := DestRcpLineRec."Line No.";
                DestRcpLineRec.INSERT(TRUE);
                DestRcpLineRec."Price Agreement" := OrigRcpLineRec."Price Agreement";
                DestRcpLineRec."Norm Agreement" := OrigRcpLineRec."Norm Agreement";
                DestRcpLineRec."Subcontracting Agreement" := OrigRcpLineRec."Subcontracting Agreement";
                DestRcpLineRec."Plant Agreement" := OrigRcpLineRec."Plant Agreement";
                IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                  CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, TRUE);  //db, 05-03-15
                GetSalesDiscountRcpLine(DestRcpLineRec);  //db, 23-05-13: C006745
                DestRcpLineRec.MODIFY;
                CopyDetails(
                  OrigRcpLineRec."Estimate No.", OrigRcpLineRec."Sub-Estimate No.",
                  OrigRcpLineRec."Part Group", OrigRcpLineRec.Part, OrigRcpLineRec."Estimate Line",
                  OrigRcpLineRec."Recipe Group", OrigRcpLineRec.Recipe, OrigRcpLineRec."Line No.",
                  DestRcpLineRec."Estimate No.", DestRcpLineRec."Sub-Estimate No.",
                  DestRcpLineRec."Part Group", DestRcpLineRec.Part, DestRcpLineRec."Estimate Line",
                  DestRcpLineRec."Recipe Group", DestRcpLineRec.Recipe, DestRcpLineRec."Line No.",
                  FALSE);  //DP00381
              END;
            END;
          END;
        UNTIL NEXT = 0;

        IF SkipMark = TRUE THEN BEGIN
          DELETEALL;
        END ELSE BEGIN
          MARKEDONLY(FALSE);
          MESSAGE(Text001, MarkNo);
        END;
      END;
      BufferRec.CLEARMARKS;
    END;

    PROCEDURE DetermineLino@1100485003(lvEst@1100485008 : Code[20];lvSubEst@1100485007 : Code[20];lvPartGrp@1100485006 : Code[20];lvPart@1100485005 : Code[20];lvEstLine@1100485004 : Integer;lvRcpGrp@1100485003 : Code[20];lvRcp@1100485002 : Code[20];lvRcpLine@1100485001 : Integer);
    VAR
      lvEstLineRec@1100485000 : Record 11012154;
      lvRcpLineRec@1100485009 : Record 11012156;
      lvPartLineRec@1100485010 : Record 11012187;
    BEGIN
      IF (lvEst = '') AND (lvRcp = '') THEN BEGIN
        WITH lvPartLineRec DO BEGIN
          LOCKTABLE;
          SETRANGE("Part Group", lvPartGrp);
          SETRANGE(Part, lvPart);
          IF GET(lvPartGrp, lvPart, CurrLino) THEN BEGIN
            SETFILTER("Line No.", '<%1', CurrLino);
            IF FINDLAST THEN PrevLino := "Line No.";
            SETRANGE("Line No.");
            CheckGap;
          END;
          IF Gap = 0 THEN BEGIN
            Gap := 10000;
            IF FINDLAST THEN
              CurrLino := "Line No.";
          END;
        END;
        EXIT;
      END;

      IF lvRcp = '' THEN BEGIN
        WITH lvEstLineRec DO BEGIN
          LOCKTABLE;
          SETRANGE("Estimate No.", lvEst);
          SETRANGE("Sub-Estimate No.", lvSubEst);
          SETRANGE("Part Group", lvPartGrp);
          SETRANGE(Part, lvPart);
          IF GET(lvEst, lvSubEst, lvPartGrp, lvPart, CurrLino) THEN BEGIN
            SETFILTER("Line No.", '<%1', CurrLino);
            IF FINDLAST THEN PrevLino := "Line No.";
            SETRANGE("Line No.");
            CheckGap;
          END;
          IF Gap = 0 THEN BEGIN
            Gap := 10000;
            IF FINDLAST THEN
              CurrLino := "Line No.";
          END;
        END;
      END ELSE BEGIN
        WITH lvRcpLineRec DO BEGIN
          LOCKTABLE;
          SETRANGE("Estimate No.", lvEst);
          SETRANGE("Sub-Estimate No.", lvSubEst);
          SETRANGE("Part Group", lvPartGrp);
          SETRANGE(Part, lvPart);
          SETRANGE("Estimate Line", lvEstLine);
          SETRANGE("Recipe Group", lvRcpGrp);
          SETRANGE(Recipe, lvRcp);
          IF GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, lvRcpGrp, lvRcp, CurrLino) THEN BEGIN
            SETFILTER("Line No.", '<%1', CurrLino);
            IF FINDLAST THEN PrevLino := "Line No.";
            SETRANGE("Line No.");
            CheckGap;
          END;
          IF Gap = 0 THEN BEGIN
            Gap := 10000;
            IF FINDLAST THEN
              CurrLino := "Line No.";
          END;
        END;
      END;
    END;

    PROCEDURE CheckGap@1100485002();
    BEGIN
      Gap := ROUND((CurrLino - PrevLino) / (MarkNo + 1), 1);
      IF (Gap * MarkNo) >= (CurrLino - PrevLino) THEN Gap := 0;
      CurrLino := PrevLino;
    END;

    PROCEDURE AssignEstimateToRecipeLine@1100485004(VAR RcpLineRec@1100485000 : Record 11012156;EstLineRec@1100485001 : Record 11012154);
    BEGIN
      WITH RcpLineRec DO BEGIN
        Description := EstLineRec.Description;
        Quantity := EstLineRec.Quantity;
        "Unit of Measure" := EstLineRec."Unit of Measure";
        "Norm Group" := EstLineRec."Norm Group";
        "Sub Operation Code" := EstLineRec."Sub Operation Code";
        Norm := EstLineRec.Norm;
        "Rate Code" := EstLineRec."Rate Code";
        Rate := EstLineRec.Rate;
        "Wage Component" := EstLineRec."Wage Component";  //DP00236
        "Material Price" := EstLineRec."Material Price";
        "Subcontracting Price" := EstLineRec."Subcontracting Price";
        "Plant Price" := EstLineRec."Plant Price";
        Hours := EstLineRec.Hours;
        "Labor Amount" := EstLineRec."Labor Amount";
        "Material Amount" := EstLineRec."Material Amount";
        "Gross Amount" := EstLineRec."Gross Amount";
        "Subcontracting Amount" := EstLineRec."Subcontracting Amount";
        "Plant Amount" := EstLineRec."Plant Amount";
        Amount := EstLineRec.Amount;
        "Project No." := EstLineRec."Project No.";
        Element := EstLineRec.Element;
        "Project Planning Activity Code" := EstLineRec."Project Planning Activity Code";
        "Cost Object Labor" := EstLineRec."Cost Object Labor";
        "Cost Object Material" := EstLineRec."Cost Object Material";
        "Cost Object Subcontracting" := EstLineRec."Cost Object Subcontracting";
        "Cost Object Plant" := EstLineRec."Cost Object Plant";
        "Cost Component" := EstLineRec."Cost Component";
        "Item No." := EstLineRec."Item No.";
        "Basic Item" := EstLineRec."Basic Item";
        "Trade Item" := EstLineRec."Trade Item";
        "Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
        Manufacturer := EstLineRec.Manufacturer;
        "Gross Price" := EstLineRec."Gross Price";
        "Discount %" := EstLineRec."Discount %";
        "Price Reference Date" := EstLineRec."Price Reference Date";
        "Rate Type" := EstLineRec."Rate Type";
        "Team Size" := EstLineRec."Team Size";
        "Time Quantity" := EstLineRec."Time Quantity";
        "Unit of Time" := EstLineRec."Unit of Time";
        "Surcharge %" := EstLineRec."Surcharge %";
        "Surcharge Type" := EstLineRec."Surcharge Type";
        "Line Status" := EstLineRec."Line Status";
        "Cumulative Hours" := EstLineRec."Cumulative Hours";
        "Cumulative Labor" := EstLineRec."Cumulative Labor";
        "Cumulative Material" := EstLineRec."Cumulative Material";
        "Cumulative Subcontracting" := EstLineRec."Cumulative Subcontracting";
        "Cumulative Plant" := EstLineRec."Cumulative Plant";
        Length := EstLineRec.Length;
        Width := EstLineRec.Width;
        Height := EstLineRec.Height;
        "Uncoded Labor" := EstLineRec."Uncoded Labor";
        "Uncoded Material" := EstLineRec."Uncoded Material";
        "Uncoded Subcontracting" := EstLineRec."Uncoded Subcontracting";
        "Uncoded Plant" := EstLineRec."Uncoded Plant";
        "Adjustment Factor Hours" := EstLineRec."Adjustment Factor Hours";
        "Adjustment Factor Material" := EstLineRec."Adjustment Factor Material";
        "Adjustment Factor Subcontr." := EstLineRec."Adjustment Factor Subcontr.";
        "Adjustment Factor Plant" := EstLineRec."Adjustment Factor Plant";
        "Cum. Adj. Factor Hours" := EstLineRec."Cum. Adj. Factor Hours";
        "Cum. Adj. Factor Material" := EstLineRec."Cum. Adj. Factor Material";
        "Cum. Adj. Factor Subcontr." := EstLineRec."Cum. Adj. Factor Subcontr.";
        "Cum. Adj. Factor Plant" := EstLineRec."Cum. Adj. Factor Plant";
        "External Text" := EstLineRec."External Text";
        "External Text Block" := EstLineRec."External Text Block";
        "Internal Text" := EstLineRec."Internal Text";
        "Internal Text Block" := EstLineRec."Internal Text Block";
        "Ask for Quote" := EstLineRec."Ask for Quote";
        "Purchase Route Reference" := EstLineRec."Purchase Route Reference";
        "Document No." := EstLineRec."Document No.";
        Code := EstLineRec.Code;
        "Price Agreement" := EstLineRec."Price Agreement";
        "Norm Agreement" := EstLineRec."Norm Agreement";
        "Subcontracting Agreement" := EstLineRec."Subcontracting Agreement";
        "Plant Agreement" := EstLineRec."Plant Agreement";
        Vendor := EstLineRec.Vendor;
        Subcontractor := EstLineRec.Subcontractor;
        //db.sn, 21-01-10
        "Buy Back Price" := EstLineRec."Buy Back Price";
        "Buy Back %" := EstLineRec."Buy Back %";
        "Purchase Discount %" := EstLineRec."Purchase Discount %";
        "Sales Discount %" := EstLineRec."Sales Discount %";
        Weight := EstLineRec.Weight;
        Discipline := EstLineRec.Discipline;
        "Trade Speciality" := EstLineRec."Trade Speciality";
        "Trade Expertise" := EstLineRec."Trade Expertise";
        "Removal Contribution" := EstLineRec."Removal Contribution";
        "Scheme Code" := EstLineRec."Scheme Code";
        Comments := EstLineRec.Comments;
        Supply := EstLineRec.Supply;
        "Comments for Logistics" := EstLineRec."Comments for Logistics";
        "Material Sheet" := EstLineRec."Material Sheet";
        "Plant Type" := EstLineRec."Plant Type";
        "Plant Price Type" := EstLineRec."Plant Price Type";
        "Start Rental Period" := EstLineRec."Start Rental Period";
        "End Rental Period" := EstLineRec."End Rental Period";
        "Rental Period Formula" := EstLineRec."Rental Period Formula";
        "Rental Time Units" := EstLineRec."Rental Time Units";
        Admicode := EstLineRec.Admicode;
        "Purchase Action Mat." := EstLineRec."Purchase Action Mat.";
        "Purchase Phase Mat." := EstLineRec."Purchase Phase Mat.";
        "Purchase Action Subc." := EstLineRec."Purchase Action Subc.";
        "Purchase Phase Subc." := EstLineRec."Purchase Phase Subc.";
        "Purchase Action Plant" := EstLineRec."Purchase Action Plant";
        "Purchase Phase Plant" := EstLineRec."Purchase Phase Plant";
        "Object Type" := EstLineRec."Object Type";
        "Object Brand" := EstLineRec."Object Brand";
        //db.en, 21-01-10
      END;
    END;

    PROCEDURE AssignRecipeToEstimateLine@1100485001(VAR EstLineRec@1100485000 : Record 11012154;RcpLineRec@1100485001 : Record 11012156);
    BEGIN
      WITH EstLineRec DO BEGIN
        Description := RcpLineRec.Description;
        Quantity := RcpLineRec.Quantity;
        "Unit of Measure" := RcpLineRec."Unit of Measure";
        "Norm Group" := RcpLineRec."Norm Group";
        "Sub Operation Code" := RcpLineRec."Sub Operation Code";
        Norm := RcpLineRec.Norm;
        "Rate Code" := RcpLineRec."Rate Code";
        Rate := RcpLineRec.Rate;
        "Wage Component" := RcpLineRec."Wage Component";  //DP00236
        "Material Price" := RcpLineRec."Material Price";
        "Subcontracting Price" := RcpLineRec."Subcontracting Price";
        "Plant Price" := RcpLineRec."Plant Price";
        Hours := RcpLineRec.Hours;
        "Labor Amount" := RcpLineRec."Labor Amount";
        "Material Amount" := RcpLineRec."Material Amount";
        "Gross Amount" := RcpLineRec."Gross Amount";
        "Subcontracting Amount" := RcpLineRec."Subcontracting Amount";
        "Plant Amount" := RcpLineRec."Plant Amount";
        Amount := RcpLineRec.Amount;
        "Project No." := RcpLineRec."Project No.";
        Element := RcpLineRec.Element;
        "Project Planning Activity Code" := RcpLineRec."Project Planning Activity Code";
        "Cost Object Labor" := RcpLineRec."Cost Object Labor";
        "Cost Object Material" := RcpLineRec."Cost Object Material";
        "Cost Object Subcontracting" := RcpLineRec."Cost Object Subcontracting";
        "Cost Object Plant" := RcpLineRec."Cost Object Plant";
        "Cost Component" := RcpLineRec."Cost Component";
        "Item No." := RcpLineRec."Item No.";
        "Basic Item" := RcpLineRec."Basic Item";
        "Trade Item" := RcpLineRec."Trade Item";
        "Vendor (Trade Item)" := RcpLineRec."Vendor (Trade Item)";
        Manufacturer := RcpLineRec.Manufacturer;
        "Gross Price" := RcpLineRec."Gross Price";
        "Discount %" := RcpLineRec."Discount %";
        "Price Reference Date" := RcpLineRec."Price Reference Date";
        "Rate Type" := RcpLineRec."Rate Type";
        "Team Size" := RcpLineRec."Team Size";
        "Time Quantity" := RcpLineRec."Time Quantity";
        "Unit of Time" := RcpLineRec."Unit of Time";
        "Surcharge %" := RcpLineRec."Surcharge %";
        "Surcharge Type" := RcpLineRec."Surcharge Type";
        "Line Status" := RcpLineRec."Line Status";
        "Cumulative Hours" := RcpLineRec."Cumulative Hours";
        "Cumulative Labor" := RcpLineRec."Cumulative Labor";
        "Cumulative Material" := RcpLineRec."Cumulative Material";
        "Cumulative Subcontracting" := RcpLineRec."Cumulative Subcontracting";
        "Cumulative Plant" := RcpLineRec."Cumulative Plant";
        Length := RcpLineRec.Length;
        Width := RcpLineRec.Width;
        Height := RcpLineRec.Height;
        "Uncoded Labor" := RcpLineRec."Uncoded Labor";
        "Uncoded Material" := RcpLineRec."Uncoded Material";
        "Uncoded Subcontracting" := RcpLineRec."Uncoded Subcontracting";
        "Uncoded Plant" := RcpLineRec."Uncoded Plant";
        "Adjustment Factor Hours" := RcpLineRec."Adjustment Factor Hours";
        "Adjustment Factor Material" := RcpLineRec."Adjustment Factor Material";
        "Adjustment Factor Subcontr." := RcpLineRec."Adjustment Factor Subcontr.";
        "Adjustment Factor Plant" := RcpLineRec."Adjustment Factor Plant";
        "Cum. Adj. Factor Hours" := RcpLineRec."Cum. Adj. Factor Hours";
        "Cum. Adj. Factor Material" := RcpLineRec."Cum. Adj. Factor Material";
        "Cum. Adj. Factor Subcontr." := RcpLineRec."Cum. Adj. Factor Subcontr.";
        "Cum. Adj. Factor Plant" := RcpLineRec."Cum. Adj. Factor Plant";
        "External Text" := RcpLineRec."External Text";
        "External Text Block" := RcpLineRec."External Text Block";
        "Internal Text" := RcpLineRec."Internal Text";
        "Internal Text Block" := RcpLineRec."Internal Text Block";
        "Ask for Quote" := RcpLineRec."Ask for Quote";
        "Purchase Route Reference" := RcpLineRec."Purchase Route Reference";
        "Document No." := RcpLineRec."Document No.";
        Code := RcpLineRec.Code;
        "Price Agreement" := RcpLineRec."Price Agreement";
        "Norm Agreement" := RcpLineRec."Norm Agreement";
        "Subcontracting Agreement" := RcpLineRec."Subcontracting Agreement";
        "Plant Agreement" := RcpLineRec."Plant Agreement";
        Vendor := RcpLineRec.Vendor;
        Subcontractor := RcpLineRec.Subcontractor;
        //db.sn, 21-01-10
        "Buy Back Price" := RcpLineRec."Buy Back Price";
        "Buy Back %" := RcpLineRec."Buy Back %";
        "Purchase Discount %" := RcpLineRec."Purchase Discount %";
        "Sales Discount %" := RcpLineRec."Sales Discount %";
        Weight := RcpLineRec.Weight;
        Discipline := RcpLineRec.Discipline;
        "Trade Speciality" := RcpLineRec."Trade Speciality";
        "Trade Expertise" := RcpLineRec."Trade Expertise";
        "Removal Contribution" := RcpLineRec."Removal Contribution";
        "Scheme Code" := RcpLineRec."Scheme Code";
        Comments := RcpLineRec.Comments;
        Supply := RcpLineRec.Supply;
        "Comments for Logistics" := RcpLineRec."Comments for Logistics";
        "Material Sheet" := RcpLineRec."Material Sheet";
        "Plant Type" := RcpLineRec."Plant Type";
        "Plant Price Type" := RcpLineRec."Plant Price Type";
        "Start Rental Period" := RcpLineRec."Start Rental Period";
        "End Rental Period" := RcpLineRec."End Rental Period";
        "Rental Period Formula" := RcpLineRec."Rental Period Formula";
        "Rental Time Units" := RcpLineRec."Rental Time Units";
        Admicode := RcpLineRec.Admicode;
        "Purchase Action Mat." := RcpLineRec."Purchase Action Mat.";
        "Purchase Phase Mat." := RcpLineRec."Purchase Phase Mat.";
        "Purchase Action Subc." := RcpLineRec."Purchase Action Subc.";
        "Purchase Phase Subc." := RcpLineRec."Purchase Phase Subc.";
        "Purchase Action Plant" := RcpLineRec."Purchase Action Plant";
        "Purchase Phase Plant" := RcpLineRec."Purchase Phase Plant";
        "Object Type" := RcpLineRec."Object Type";
        "Object Brand" := RcpLineRec."Object Brand";
        //db.en, 21-01-10
      END;
    END;

    PROCEDURE StartRecipe@1();
    BEGIN
      ERROR('Obsolete function');
    END;

    PROCEDURE GetSalesDiscountEstLine@1100525001(VAR EstLineRec@1100525007 : Record 11012154);
    VAR
      ValidateCu@1100525008 : Codeunit 11012033;
      lvEstRec@1100525000 : Record 11012151;
      lvRefDate@1100525006 : Date;
      lvDiscRef1@1100525005 : Code[20];
      lvDiscRef2@1100525004 : Code[20];
      lvRefPrio@1100525003 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      //db, 23-05-13: C006745
      WITH EstLineRec DO BEGIN
        lvEstRec.GET("Estimate No.");
        IF lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales THEN BEGIN
          GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
          lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
          ValidateCu.GetSalesDiscount(
            lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
            "Material Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          "Discount %" := "Sales Discount %";
          CalculateTotals;  //db, 28-05-13
        END;
      END;
    END;

    PROCEDURE GetSalesDiscountRcpLine@1100525000(VAR RcpLineRec@1100525007 : Record 11012156);
    VAR
      ValidateCu@1100525008 : Codeunit 11012033;
      lvEstRec@1100525000 : Record 11012151;
      lvRefDate@1100525006 : Date;
      lvDiscRef1@1100525005 : Code[20];
      lvDiscRef2@1100525004 : Code[20];
      lvRefPrio@1100525003 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      //db, 23-05-13: C006745
      WITH RcpLineRec DO BEGIN
        IF NOT lvEstRec.GET("Estimate No.") THEN
          lvEstRec.INIT;  //db, 18-10-13: T003792 (skip std-rcp)
        IF lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales THEN BEGIN
          GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
          lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
          ValidateCu.GetSalesDiscount(
            lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
            "Material Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          "Discount %" := "Sales Discount %";
          CalculateTotals;  //db, 28-05-13
        END;
      END;
    END;

    PROCEDURE CopyDetails@1100528901(EstFrom@1210190013 : Code[20];SubEstFrom@1210190011 : Code[20];PartGrpFrom@1210190009 : Code[20];EstPartFrom@1210190007 : Code[20];EstLineFrom@1210190005 : Integer;RecipeGrpFrom@1210190003 : Code[20];RecipeFrom@1210190001 : Code[20];RecipeLineFrom@1100485000 : Integer;EstTo@1210190012 : Code[20];SubEstTo@1210190010 : Code[20];PartGrpTo@1210190008 : Code[20];EstPartTo@1210190006 : Code[20];EstLineTo@1210190004 : Integer;RecipeGrpTo@1210190002 : Code[20];RecipeTo@1210190000 : Code[20];RecipeLineTo@1100485001 : Integer;CopyRecipeLine@1100528900 : Boolean);
    VAR
      EstRec@1100528924 : Record 11012151;
      EstRec2@1100528923 : Record 11012151;
      SubEstRec@1100528922 : Record 11012152;
      EstPartRec@1100528921 : Record 11012153;
      EstLineRec@1100528920 : Record 11012154;
      RgrpRec@1100528919 : Record 11020580;
      RecipeRec@1100528918 : Record 11012155;
      RcpRec2@1100528917 : Record 11012155;
      RecipeLineRec@1100528916 : Record 11012156;
      RcpLineRec2@1100528915 : Record 11012156;
      TextRec@1100528914 : Record 11020595;
      TextRec2@1100528913 : Record 11020595;
      EstCodeRec@1100528912 : Record 11012194;
      EstCodeRec2@1100528911 : Record 11012194;
      ChrgRec@1100528910 : Record 11012175;
      ChrgRec2@1100528909 : Record 11012175;
      QuanSheetRec@1100528908 : Record 11012186;
      QuanSheetRec2@1100528907 : Record 11012186;
      QuanModelRec@1100528906 : Record 11012197;
      QuanModelRec2@1100528905 : Record 11012197;
      EstSetup@1100525000 : Record 11012150;
    BEGIN
      //DP00381
      EstSetup.GET;  //db, 12-05-15: C009772
      IF CopyRecipeLine = TRUE THEN BEGIN
        //db, 09-01-14: T004143 (previously form function)
        RecipeLineRec.SETRANGE("Estimate No.",EstFrom);
        RecipeLineRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
        RecipeLineRec.SETRANGE("Part Group",PartGrpFrom);
        RecipeLineRec.SETRANGE(Part,EstPartFrom);
        RecipeLineRec.SETRANGE("Estimate Line",EstLineFrom);
        //db.sn, 29-10-12: T000942
        IF RecipeGrpFrom <> '' THEN
          RecipeLineRec.SETRANGE("Recipe Group",RecipeGrpFrom);
        IF RecipeFrom <> '' THEN
          RecipeLineRec.SETRANGE(Recipe,RecipeFrom);
        IF RecipeLineFrom <> 0 THEN
          RecipeLineRec.SETRANGE("Line No.",RecipeLineFrom);
        //db.en, 29-10-12: T000942
        IF RecipeLineRec.FINDSET THEN BEGIN
          REPEAT
            RcpLineRec2.COPY(RecipeLineRec);
            RcpLineRec2."Estimate No." := EstTo;
            RcpLineRec2."Sub-Estimate No." := SubEstTo;
            RcpLineRec2."Part Group" := PartGrpTo;
            RcpLineRec2.Part := EstPartTo;
            RcpLineRec2."Estimate Line" := EstLineTo;
            IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
              RcpLineRec2."Recipe Group" := RecipeGrpTo;
              IF RecipeTo <> '' THEN
                RcpLineRec2.Recipe := RecipeTo;
            END;
            RcpLineRec2.INSERT(TRUE);
            //db.en, 12-05-09: M15306
            RcpLineRec2."Norm Agreement" := RecipeLineRec."Norm Agreement";
            RcpLineRec2."Price Agreement" := RecipeLineRec."Price Agreement";
            RcpLineRec2."Subcontracting Agreement" := RecipeLineRec."Subcontracting Agreement";
            RcpLineRec2."Plant Agreement" := RecipeLineRec."Plant Agreement";
            //db.en, 12-05-09
            //db.sn, 12-05-15: C009772
            IF EstTo <> '' THEN BEGIN
              IF EstSetup."Copy Norm Group from Target" THEN
                CheckDefaultNormGroup(EstLineRec, RcpLineRec2, TRUE);
            END;
            //db.en, 12-05-15: C009772
            //db.sn, 19-10-12: copy from buffer missing check on estimate type
            IF NOT EstRec.GET(EstTo) THEN EstRec.INIT;
            IF NOT EstRec2.GET(EstFrom) THEN EstRec2.INIT;
            //db.en, 19-10-12
            IF EstRec."Estimate Type" <> EstRec2."Estimate Type" THEN BEGIN
              //db.sn, 03-04-13: C006746
              IF RecipeLineRec."Trade Item" <> '' THEN BEGIN
                RcpLineRec2."Trade Item" := '';
                RcpLineRec2.VALIDATE("Trade Item", RecipeLineRec."Trade Item");
              END ELSE BEGIN
                IF RecipeLineRec."Basic Item" <> '' THEN BEGIN
                  RcpLineRec2."Basic Item" := '';
                  RcpLineRec2.VALIDATE("Basic Item", RecipeLineRec."Basic Item");
                END ELSE BEGIN
                  IF RecipeLineRec."Item No." <> '' THEN BEGIN
                    RcpLineRec2."Item No." := '';
                    RcpLineRec2.VALIDATE("Item No.", RecipeLineRec."Item No.");
                  END;
                END;
              END;
              //db.en, 03-04-13: C006746
            END;
            RcpLineRec2.MODIFY(TRUE);
          UNTIL RecipeLineRec.NEXT = 0;
          RcpLineRec2.UpdateEstLines;
        END;
      END;

      IF CopyRecipeLine = TRUE THEN BEGIN
        ChrgRec.SETRANGE("Estimate No.",EstFrom);
        ChrgRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
        ChrgRec.SETRANGE("Part Group",PartGrpFrom);
        ChrgRec.SETRANGE(Part,EstPartFrom);
        ChrgRec.SETRANGE("Recipe Line",EstLineFrom);
        //db.sn, 29-10-12: T000942
        IF RecipeGrpFrom <> '' THEN
          ChrgRec.SETRANGE("Recipe Group",RecipeGrpFrom);
        IF RecipeFrom <> '' THEN
          ChrgRec.SETRANGE(Recipe,RecipeFrom);
        IF RecipeLineFrom <> 0 THEN
          ChrgRec.SETRANGE("Recipe Line",RecipeLineFrom);
        //db.en, 29-10-12: T000942
        IF ChrgRec.FINDSET THEN BEGIN
          REPEAT
            ChrgRec2.COPY(ChrgRec);
            ChrgRec2."Estimate No." := EstTo;
            ChrgRec2."Sub-Estimate No." := SubEstTo;
            ChrgRec2."Part Group" := PartGrpTo;
            ChrgRec2.Part := EstPartTo;
            ChrgRec2."Recipe Line" := EstLineTo;
            IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
              ChrgRec2."Recipe Group" := RecipeGrpTo;
              IF RecipeTo <> '' THEN
                ChrgRec2.Recipe := RecipeTo;
              IF RecipeLineTo <> 0 THEN
                ChrgRec2."Recipe Line" := RecipeLineTo;
            END;
            ChrgRec2.INSERT(TRUE);  //db, 03-01-14: C010706
          UNTIL ChrgRec.NEXT = 0;
        END;
      END;

      QuanSheetRec.SETRANGE("Estimate No.",EstFrom);
      QuanSheetRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      QuanSheetRec.SETRANGE("Part Group",PartGrpFrom);
      QuanSheetRec.SETRANGE(Part,EstPartFrom);
      QuanSheetRec.SETRANGE("Estimate Line",EstLineFrom);
      //db.sn, 29-10-12: T000942
      IF RecipeGrpFrom <> '' THEN
        QuanSheetRec.SETRANGE("Recipe Group",RecipeGrpFrom);
      IF RecipeFrom <> '' THEN
        QuanSheetRec.SETRANGE(Recipe,RecipeFrom);
      IF RecipeLineFrom <> 0 THEN
        QuanSheetRec.SETRANGE("Recipe Line",RecipeLineFrom);
      //db.en, 29-10-12: T000942
      IF QuanSheetRec.FINDSET THEN BEGIN
        REPEAT
          QuanSheetRec2.COPY(QuanSheetRec);
          QuanSheetRec2."Estimate No." := EstTo;
          QuanSheetRec2."Sub-Estimate No." := SubEstTo;
          QuanSheetRec2."Part Group" := PartGrpTo;
          QuanSheetRec2.Part := EstPartTo;
          QuanSheetRec2."Estimate Line" := EstLineTo;
          IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
            QuanSheetRec2."Recipe Group" := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              QuanSheetRec2.Recipe := RecipeTo;
            IF RecipeLineTo <> 0 THEN
              QuanSheetRec2."Recipe Line" := RecipeLineTo;
          END;
          QuanSheetRec2.INSERT;
        UNTIL QuanSheetRec.NEXT = 0;
      END;

      QuanModelRec.SETRANGE("Estimate No.",EstFrom);
      QuanModelRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      QuanModelRec.SETRANGE("Part Group",PartGrpFrom);
      QuanModelRec.SETRANGE(Part,EstPartFrom);
      QuanModelRec.SETRANGE("Estimate Line",EstLineFrom);
      IF QuanModelRec.FINDSET THEN BEGIN
        REPEAT
          QuanModelRec2.COPY(QuanModelRec);
          QuanModelRec2."Estimate No." := EstTo;
          QuanModelRec2."Sub-Estimate No." := SubEstTo;
          QuanModelRec2."Part Group" := PartGrpTo;
          QuanModelRec2.Part := EstPartTo;
          QuanModelRec2."Estimate Line" := EstLineTo;
          QuanModelRec2.INSERT;
        UNTIL QuanModelRec.NEXT = 0;
      END;

      //db.sn, 25-03-11
      TextRec.SETRANGE("Estimate No.",EstFrom);
      TextRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      TextRec.SETRANGE("Part Group",PartGrpFrom);
      TextRec.SETRANGE(Part,EstPartFrom);
      TextRec.SETRANGE("Estimate Line No.",EstLineFrom);
      //db.sn, 29-10-12: T000942
      IF EstFrom <> '' THEN BEGIN
        //text only available for recipe header (or estimate line with recipecode)
        TextRec.SETRANGE(Group, '');
        TextRec.SETRANGE("No.", '');
        IF RecipeLineFrom <> 0 THEN
          TextRec.SETFILTER("Line No.", '<%1', 0);  //disable copy from buffer for recipe line;
      END ELSE BEGIN
        IF RecipeGrpFrom <> '' THEN
          TextRec.SETRANGE(Group,RecipeGrpFrom);
        IF RecipeFrom <> '' THEN
          TextRec.SETRANGE("No.",RecipeFrom);
      END;
      //db.en, 29-10-12: T000942
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          TextRec2."Estimate No." := EstTo;
          TextRec2."Sub-Estimate No." := SubEstTo;
          TextRec2."Part Group" := PartGrpTo;
          TextRec2.Part := EstPartTo;
          TextRec2."Estimate Line No." := EstLineTo;
          IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
            TextRec2.Group := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              TextRec2."No." := RecipeTo;
            //IF RecipeLineTo <> 0 THEN
            //  TextRec2."Recipe Line" := RecipeLineTo;
          END;
          IF TextRec2.INSERT THEN;  //db, 06-12-11 (error with copy text from estimate line, while copy recipe lines from buffer)
        UNTIL TextRec.NEXT = 0;
      END;
      //db.en, 25-03-11

      EstCodeRec.SETRANGE("Estimate No.",EstFrom);
      EstCodeRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      EstCodeRec.SETRANGE("Part Group",PartGrpFrom);
      EstCodeRec.SETRANGE(Part,EstPartFrom);
      EstCodeRec.SETRANGE("Estimate Line",EstLineFrom);
      //db.sn, 29-10-12: T000942
      IF RecipeGrpFrom <> '' THEN
        EstCodeRec.SETRANGE("Recipe Group",RecipeGrpFrom);
      IF RecipeFrom <> '' THEN
        EstCodeRec.SETRANGE(Recipe,RecipeFrom);
      IF RecipeLineFrom <> 0 THEN
        EstCodeRec.SETRANGE("Recipe Line",RecipeLineFrom);
      //db.en, 29-10-12: T000942
      IF EstCodeRec.FINDSET THEN BEGIN
        REPEAT
          EstCodeRec2.COPY(EstCodeRec);
          EstCodeRec2."Estimate No." := EstTo;
          EstCodeRec2."Sub-Estimate No." := SubEstTo;
          EstCodeRec2."Part Group" := PartGrpTo;
          EstCodeRec2.Part := EstPartTo;
          EstCodeRec2."Estimate Line" := EstLineTo;
          IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
            EstCodeRec2."Recipe Group" := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              EstCodeRec2.Recipe := RecipeTo;
            IF RecipeLineTo <> 0 THEN
              EstCodeRec2."Recipe Line" := RecipeLineTo;
          END;
          EstCodeRec2.INSERT;
        UNTIL EstCodeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckDefaultNormGroup@1100525002(VAR DestEstLineRec@1100525011 : Record 11012154;VAR DestRcpLineRec@1100525010 : Record 11012156;RcpBln@1100525005 : Boolean);
    VAR
      EstRecTo@1100525001 : Record 11012151;
      SubEstRecTo@1100525000 : Record 11012152;
      EstPartRecTo@1100525002 : Record 11012153;
      EstTo@1100525006 : Code[20];
      SubEstTo@1100525007 : Code[20];
      PartGrpTo@1100525008 : Code[20];
      PartTo@1100525009 : Code[20];
      NormGroup@1100525003 : Code[20];
      NormGroupSales@1100525004 : Code[20];
    BEGIN
      //db, 10-02-15: C009772
      IF RcpBln THEN BEGIN
        EstTo := DestRcpLineRec."Estimate No.";
        SubEstTo := DestRcpLineRec."Sub-Estimate No.";
        PartGrpTo := DestRcpLineRec."Part Group";
        PartTo := DestRcpLineRec.Part;
      END ELSE BEGIN
        EstTo := DestEstLineRec."Estimate No.";
        SubEstTo := DestEstLineRec."Sub-Estimate No.";
        PartGrpTo := DestEstLineRec."Part Group";
        PartTo := DestEstLineRec.Part;
      END;

      EstRecTo.GET(EstTo);
      SubEstRecTo.GET(EstTo,SubEstTo);
      EstPartRecTo.GET(EstTo,SubEstTo,PartGrpTo,PartTo);

      IF EstPartRecTo."Norm Group" <> '' THEN
        NormGroup := EstPartRecTo."Norm Group"
      ELSE
        IF SubEstRecTo."Norm Group" <> '' THEN
          NormGroup := SubEstRecTo."Norm Group"
        ELSE
          NormGroup := EstRecTo."Norm Group";

      IF RcpBln THEN BEGIN
        IF NormGroup <> '' THEN
          DestRcpLineRec.VALIDATE("Norm Group", NormGroup);
      END ELSE BEGIN
        IF NormGroup <> '' THEN
          DestEstLineRec.VALIDATE("Norm Group", NormGroup);
      END;
    END;

    BEGIN
    END.
  }
}

