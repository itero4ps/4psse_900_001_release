OBJECT Codeunit 11012154 Create Excel Summary Sheet
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11012172;
    OnRun=BEGIN
            ProcessSheet(Rec, FALSE);
          END;

  }
  CODE
  {
    VAR
      Text000@11012002 : TextConst 'ENU=Estimate Summary';
      ExcelAutomation@11012000 : Codeunit 11012402;
      FileMgt@1100525500 : Codeunit 419;
      EstSetupRec@11012001 : Record 11012150;
      Text001@1210190000 : TextConst 'ENU=Template not found: %1';

    PROCEDURE ProcessSheet@1000000001(VAR SumRec@1000000000 : Record 11012172;SumPrint@1000000001 : Boolean);
    VAR
      TemplExt@1100485000 : Text[5];
      SheetExt@1100485001 : Text[5];
    BEGIN
      CLEAR(ExcelAutomation);  //db, 26-03-08: M10778
      ExcelAutomation.InitExcel;

      EstSetupRec.GET;
      EstSetupRec.TESTFIELD("Pathname Excel Templates");
      EstSetupRec.TESTFIELD("Pathname Excel Sheets");

      SumRec.GET(SumRec."Estimate No.", SumRec.Summary);

      IF SumRec."Excel Template" <> '' THEN
        TemplExt := GetFileExtension(EstSetupRec."Pathname Excel Templates" + SumRec."Excel Template", TRUE);
      SheetExt := GetFileExtension(EstSetupRec."Pathname Excel Sheets" + SumRec."Excel Sheet", FALSE);

      IF NOT FileMgt.ClientFileExists(
           EstSetupRec."Pathname Excel Sheets" + SumRec."Excel Sheet" + SheetExt)
      THEN BEGIN
        SumRec.TESTFIELD("Excel Template");
        IF NOT FileMgt.ClientFileExists(
             EstSetupRec."Pathname Excel Templates" + SumRec."Excel Template" + TemplExt)
        THEN BEGIN
          ExcelAutomation.TermExcel();
          ERROR(Text001,EstSetupRec."Pathname Excel Templates" + SumRec."Excel Template" + TemplExt);
        END;
        ExcelAutomation.OpenWorkbook(EstSetupRec."Pathname Excel Templates" + SumRec."Excel Template" + TemplExt);
        SumRec."Excel Sheet" :=
          CONVERTSTR(Text000 + ' ' + SumRec."Estimate No." + ' ' + SumRec.Summary, '.', '_'); //mg.c, 01-02-11: M24908
        SumRec.MODIFY;
        IF (TemplExt = '.xltm') OR
          (SumRec."Excel Template contains Macros" AND (ExcelAutomation.ExcelMajorVersionNo >= 12)) THEN //mg.c, 27-07-11: M28550
          ExcelAutomation.SaveWorkbookAsXMLMacroEnabled(EstSetupRec."Pathname Excel Sheets" + SumRec."Excel Sheet")
        ELSE
          ExcelAutomation.SaveWorkbookAs(EstSetupRec."Pathname Excel Sheets" + SumRec."Excel Sheet");
        ExcelAutomation.CloseWorkbook();
        ExcelAutomation.InitExcel;
      END;

      SheetExt := GetFileExtension(EstSetupRec."Pathname Excel Sheets" + SumRec."Excel Sheet", FALSE);
      ExcelAutomation.OpenWorkbook(EstSetupRec."Pathname Excel Sheets" + SumRec."Excel Sheet" + SheetExt);

      FillFields(SumRec);

      IF SumPrint = TRUE THEN BEGIN
        // jhoek.220610.begin
        //ExcelAutomation.PrintSheet();
        ExcelAutomation.PrintWorkBook;
        ExcelAutomation.CloseWorkbookWithoutSaving();
        // ExcelAutomation.CloseWorkbook();
        // jhoek.220610.end
        ExcelAutomation.TermExcel();
      END ELSE BEGIN;
        ExcelAutomation.GiveUserControl();
      END;

      CLEAR(ExcelAutomation);
    END;

    PROCEDURE GetFileExtension@1100485000(lvFileName@1100485000 : Text[1024];lvTemplate@1100485001 : Boolean) SheetExt : Text[5];
    VAR
      VersionText@1100485003 : Text[30];
      Version@1100485002 : Integer;
    BEGIN
      //Beter was het geweest de extensie gewoon op te nemen in de naam van de onderlegger en het excelbestand,
      //dit is gewoon gokken. Opmerking naar aanleiding van melding 16290

      IF lvTemplate THEN BEGIN

        SheetExt := '.xltm';                             //** M16290
        IF NOT FileMgt.ClientFileExists(lvFileName + SheetExt) THEN BEGIN  //** M16290
          SheetExt := '.xltx'; //mg.c, 09-12-10: M22642
          IF NOT FileMgt.ClientFileExists(lvFileName + SheetExt) THEN BEGIN
            SheetExt := '.xlt';
            IF NOT FileMgt.ClientFileExists(lvFileName + SheetExt) THEN BEGIN
              VersionText := ExcelAutomation.ExcelVersion;
              IF STRPOS(VersionText,'.') <> 0 THEN
                VersionText := COPYSTR(VersionText,1,STRPOS(VersionText,'.')-1);
              EVALUATE(Version,VersionText);
              IF Version < 12 THEN
                SheetExt := '.xlt'
              ELSE
                SheetExt := '.xltx';
            END;
          END;
        END;                                             //** M16290

      END ELSE BEGIN

        SheetExt := '.xlsm';                             //** M16290
        IF NOT FileMgt.ClientFileExists(lvFileName + SheetExt) THEN BEGIN  //** M16290
          SheetExt := '.xlsx';
          IF NOT FileMgt.ClientFileExists(lvFileName + SheetExt) THEN BEGIN
            SheetExt := '.xls';
            IF NOT FileMgt.ClientFileExists(lvFileName + SheetExt) THEN BEGIN
              VersionText := ExcelAutomation.ExcelVersion;
              IF STRPOS(VersionText,'.') <> 0 THEN
                VersionText := COPYSTR(VersionText,1,STRPOS(VersionText,'.')-1);
              EVALUATE(Version,VersionText);
              IF Version < 12 THEN
                SheetExt := '.xls'
              ELSE
                SheetExt := '.xlsx';
            END;
          END;
        END;                                               //** M16290

      END;
    END;

    PROCEDURE FillFields@1(SummaryRec@11012000 : Record 11012172);
    VAR
      SumExcRelRec@11012001 : Record 11012173;
      SumLineRec@11012002 : Record 11012171;
    BEGIN
      SumLineRec.SETRANGE("Estimate No.",SummaryRec."Estimate No.");
      SumLineRec.SETRANGE(Summary,SummaryRec.Summary);
      SumExcRelRec.SETRANGE("Estimate No.",SummaryRec."Estimate No.");
      SumExcRelRec.SETRANGE(Summary,SummaryRec.Summary);
      REPEAT
        SumExcRelRec.SETRANGE("Row No.",SumLineRec."Row No.");
        SumExcRelRec.SETFILTER(Row, '>%1', 0);
        SumExcRelRec.SETFILTER("Column No.", '>%1', 0);
        IF SumExcRelRec.FIND('-') THEN BEGIN
          REPEAT
            CASE SumExcRelRec.Field OF
              SumExcRelRec.Field::Description:
                ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row,SumLineRec.Description);
              SumExcRelRec.Field::Surcharge:
                ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec."Surcharge Percentage"));
              SumExcRelRec.Field::"Subtotal Hours":
                BEGIN
                  SumLineRec.CALCFIELDS("Subtotal Hours");
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec."Subtotal Hours"));
                END;
              SumExcRelRec.Field::Subtotal:
                BEGIN
                  SumLineRec.CALCFIELDS("Subtotal Amount");
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec."Subtotal Amount"));
                END;
              SumExcRelRec.Field::Hours:
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec.Hours));
              SumExcRelRec.Field::Amount:
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec.Amount));
              SumExcRelRec.Field::"Adjustment Factor Hours":
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec."Adjustment Factor Hours"));
              SumExcRelRec.Field::Variable:
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec.Variable));
              SumExcRelRec.Field::"Rate Code":
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, SumLineRec."Rate Code");
              SumExcRelRec.Field::Rate:
                BEGIN
                  SumLineRec.CALCFIELDS("Cost Rate");
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec."Cost Rate"));
                END;
              SumExcRelRec.Field::Quantity:  //db, 31-10-13: DP00260 (14457)
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, STRSUBSTNO('%1',SumLineRec.Quantity));
              SumExcRelRec.Field::Unit:  //db, 31-10-13: DP00260 (14457)
                  ExcelAutomation.WriteCell(SumExcRelRec."Column No.",SumExcRelRec.Row, SumLineRec."Unit of Measure");
            END;
          UNTIL SumExcRelRec.NEXT = 0;
        END;
      UNTIL SumLineRec.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

