OBJECT Codeunit 11012155 Update Estimate OLD
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text010@1210190003 : TextConst 'ENU=Estimatepart  #1################# @2@@@@@@@@@@@@@';
      Text011@1210190002 : TextConst 'ENU=Busy with       #1################# @2@@@@@@@@@@@@@';
      Text012@1210190001 : TextConst 'ENU=Estimate Lines';
      Text013@1210190000 : TextConst 'ENU=Recipe Lines';
      EstSetup@1210190005 : Record 11012150;
      EstRec@1210190004 : Record 11012151;
      SubEstRec@1210190016 : Record 11012152;
      EstPartRec@1210190015 : Record 11012153;
      EstLineRec@1210190012 : Record 11012154;
      RcpRec@1210190039 : Record 11012155;
      RcpLineRec@1210190011 : Record 11012156;
      LastRcpLineRec@1210190007 : Record 11012156;
      EstCodeRec@1210190031 : Record 11012194;
      QuanSheetRec@1210190030 : Record 11012186;
      QuanModelRec@1210190037 : Record 11012197;
      QuanRelationRec@1100409002 : Record 11020463;
      ChrgRec@1210190026 : Record 11012175;
      TextRec@1100409000 : Record 11020595;
      NormRec@1210190014 : Record 11012163;
      RateRec@1210190018 : Record 11012162;
      DateRateRec@1100485005 : Record 11012188;
      DateRateRec2@1100485006 : Record 11012188;
      EstRateRec@1210190013 : Record 11012160;
      BudgetRateRec@1210190017 : Record 11012000;
      PurchLineRec@1210190019 : Record 39;
      PlantTypeRec@1100485004 : Record 11012551;
      LastProcLine@1210190006 : Text[250];
      Status@1210190010 : Dialog;
      maxrec@1210190009 : Integer;
      currec@1210190008 : Integer;
      TmpEstRec@1100485003 : TEMPORARY Record 11012151;
      TmpEstLineRec@1210190021 : TEMPORARY Record 11012154;
      TmpRcpLineRec@1210190020 : TEMPORARY Record 11012156;
      Text014@1210190022 : TextConst 'ENU=Surcharge Lines';
      Text015@1210190034 : TextConst 'ENU=Quantity Sheet';
      Text016@1210190035 : TextConst 'ENU=Codes';
      TmpEstCodeRec@1210190033 : TEMPORARY Record 11012194;
      TmpQuanSheetRec@1210190032 : TEMPORARY Record 11012186;
      TmpQuanModelRec@1210190038 : TEMPORARY Record 11012197;
      TmpQuanRelationRec@1100409003 : TEMPORARY Record 11020463;
      TmpChrgRec@1210190023 : TEMPORARY Record 11012175;
      Text022@1210190028 : TextConst 'ENU=Condition: Estimate copied. Reshuffle Estimate Lines ?';
      Text022a@1100525000 : TextConst 'ENU=Condition: Recipe copied. Reshuffle Recipe Lines ?';
      Text023@1210190029 : TextConst 'ENU=Initialize Adjustment Factor,Calculate Cumulative Adjustment Factor';
      TmpTextRec@1100409001 : TEMPORARY Record 11020595;
      TmpRelationRec@1210190025 : TEMPORARY Record 11012156;
      DimMgt@1100485001 : Codeunit 408;
      DimValRec@1100485000 : Record 349;
      Text004@1100485002 : TextConst 'ENU=No Vendors modified within Selection.';
      gvUseDialog@1210190024 : Boolean;

    PROCEDURE DeleteZeroLines@1(VAR lvEstLineRec@1100485003 : Record 11012154;DeleteEmptyPart@1100485002 : Boolean;EmptyRecipe@1100485004 : 'ZeroHeader,ZeroLines';UseLock@1210190001 : Boolean;UseDialog@1100409000 : Boolean);
    VAR
      RecordDeleted@1100525000 : Boolean;
      CommitEachRcds@1210190000 : Integer;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);
      EstSetup.GET;

      ClearTmpTables;
      IF UseDialog THEN
        Status.OPEN(Text010);

      CommitEachRcds := 10;
      //remove zerolines in recipe
      RcpLineRec.SETRANGE(Quantity, 0);
      IF RcpLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        RecordDeleted := FALSE;
        //C030221.sn
        REPEAT
          TmpRcpLineRec := RcpLineRec;
          TmpRcpLineRec.INSERT;
        UNTIL RcpLineRec.NEXT = 0;
        IF TmpRcpLineRec.FINDSET THEN;
        //C030221.en
        REPEAT
          RcpLineRec := TmpRcpLineRec;  //C030221
          currec := currec + 1;
          IF UseDialog THEN BEGIN
            Status.UPDATE(1,RcpLineRec.Part);
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          END;
          IF (RcpLineRec.Norm <> 0) OR (RcpLineRec."Material Price" <> 0) OR
             (RcpLineRec."Subcontracting Price" <> 0) OR (RcpLineRec."Plant Price" <> 0) THEN BEGIN
            CheckEstFixed(RcpLineRec."Estimate No.");
            RcpLineRec.SetFromEstimateLineDelete(TRUE);  //C030221: delete zero-recipeline will not influence total recipe header (skip update estimate line)
            RcpLineRec.DELETE(TRUE);
            RcpLineRec.SetFromEstimateLineDelete(FALSE);
            RecordDeleted := TRUE;
          END;
          IF RecordDeleted AND ((currec MOD CommitEachRcds) = 0) THEN BEGIN
            COMMIT;
            RecordDeleted := FALSE;
          END;
        UNTIL TmpRcpLineRec.NEXT = 0;  //C030221
        TmpRcpLineRec.DELETEALL;  //C030221
      END;
      RcpLineRec.RESET;
      IF RecordDeleted THEN
        COMMIT;

      //remove estimatelines with recipe and no recipelines left, or recipeheader disabled by zero quantities
      EstLineRec.SETFILTER(Recipe, '<>%1', '');
      IF EstLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        RecordDeleted := FALSE;
        //C030221.sn
        REPEAT
          TmpEstLineRec := EstLineRec;
          TmpEstLineRec.INSERT;
        UNTIL EstLineRec.NEXT = 0;
        IF TmpEstLineRec.FINDSET THEN;
        //C030221.en
        REPEAT
          EstLineRec := TmpEstLineRec;  //C030221
          currec := currec + 1;
          IF UseDialog THEN BEGIN
            Status.UPDATE(1,EstLineRec.Part);
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          END;
          IF EmptyRecipe = EmptyRecipe::ZeroHeader THEN BEGIN  //db, 12-10-15: C025640
            IF EstLineRec.Quantity = 0 THEN BEGIN
              CheckEstFixed(EstLineRec."Estimate No.");
              EstLineRec.DELETE(TRUE);
              RecordDeleted := TRUE;
            END;
          END ELSE BEGIN
            RcpLineRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
            RcpLineRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
            RcpLineRec.SETRANGE("Part Group", EstLineRec."Part Group");
            RcpLineRec.SETRANGE(Part, EstLineRec.Part);
            RcpLineRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
            IF NOT RcpLineRec.FINDFIRST THEN BEGIN
              CheckEstFixed(EstLineRec."Estimate No.");
              EstLineRec.DELETE(TRUE);
              RecordDeleted := TRUE;
            END;
          END;
          IF RecordDeleted AND ((currec MOD CommitEachRcds) = 0) THEN BEGIN
            COMMIT;
            RecordDeleted := FALSE;
          END;
        UNTIL TmpEstLineRec.NEXT = 0;  //C030221
        TmpEstLineRec.DELETEALL;  //C030221
      END;
      IF RecordDeleted THEN
        COMMIT;

      //remove estimatelines
      EstLineRec.SETFILTER(Recipe, '%1', '');  //db, 12-10-15: C025640
      EstLineRec.SETRANGE(Quantity, 0);
      IF EstLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        RecordDeleted := FALSE;
        //C030221.sn
        REPEAT
          TmpEstLineRec := EstLineRec;
          TmpEstLineRec.INSERT;
        UNTIL EstLineRec.NEXT = 0;
        IF TmpEstLineRec.FINDSET THEN;
        //C030221.en
        REPEAT
          EstLineRec := TmpEstLineRec;  //C030221
          currec := currec + 1;
          IF UseDialog THEN BEGIN
            Status.UPDATE(1,EstLineRec.Part);
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          END;
          IF (EstLineRec.Norm <> 0) OR (EstLineRec."Material Price" <> 0) OR
             (EstLineRec."Subcontracting Price" <> 0) OR (EstLineRec."Plant Price" <> 0) THEN BEGIN
            EstLineRec.CALCFIELDS(
              "Quantity Model Exist","Quantity Sheet Exist","Quantity Sheet Relation Exist");
            IF NOT EstSetup."Quantity Sheet with Relations" AND
               (EstLineRec."Quantity Model Exist" = FALSE) AND
               (EstLineRec."Quantity Sheet Exist" = FALSE) THEN BEGIN
              CheckEstFixed(EstLineRec."Estimate No.");
              EstLineRec.DELETE(TRUE);
              RecordDeleted := TRUE;
              IF UseDialog THEN
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
            END;
            IF EstSetup."Quantity Sheet with Relations" AND
               (EstLineRec."Quantity Model Exist" = FALSE) AND
               (EstLineRec."Quantity Sheet Relation Exist" = FALSE) THEN BEGIN
              CheckEstFixed(EstLineRec."Estimate No.");
              EstLineRec.DELETE(TRUE);
              RecordDeleted := TRUE;
            END;
          END;
          IF RecordDeleted AND ((currec MOD CommitEachRcds) = 0) THEN BEGIN
            COMMIT;
            RecordDeleted := FALSE;
          END;
        UNTIL TmpEstLineRec.NEXT = 0;  //C030221
        TmpEstLineRec.DELETEALL;  //C030221
      END;
      IF RecordDeleted THEN
        COMMIT;

      IF DeleteEmptyPart THEN
        CheckEmptyParts(EstLineRec.GETFILTER("Estimate No."), EstLineRec.GETFILTER("Sub-Estimate No."));

      UpdateFromTmp;
      COMMIT;
      IF UseDialog THEN
        Status.CLOSE;
    END;

    PROCEDURE ReshuffleLines@1210190008(CurrEst@1210190000 : Code[20];UseLock@1210190006 : Boolean);
    VAR
      NewEst@1210190004 : Code[20];
      NewEstLine@1210190001 : Integer;
      NewRcpLine@1210190005 : Integer;
      ChrgBln@1210190002 : Boolean;
      PrevPart@1210190003 : Text[100];
      EstimateMgmt@1100525000 : Codeunit 11012153;
    BEGIN
      IF NOT CONFIRM(Text022, FALSE) THEN EXIT;

      ClearTmpTables;
      Status.OPEN(Text010);

      NewEst := 'CU11012155_RESHUFFLE';
      PrevPart := '~';

      EstLineRec.RESET;
      EstLineRec.SETRANGE("Estimate No.", CurrEst);
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          IF PrevPart <> EstLineRec."Estimate No." + EstLineRec."Sub-Estimate No." +
                         EstLineRec."Part Group" + EstLineRec.Part THEN BEGIN
            PrevPart := EstLineRec."Estimate No." + EstLineRec."Sub-Estimate No." +
                        EstLineRec."Part Group" + EstLineRec.Part;
            NewEstLine := 0;
          END;
          NewEstLine := NewEstLine + 10000;
          currec := currec + 1;
          Status.UPDATE(1,EstLineRec.Part);
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));

          TmpEstLineRec := EstLineRec;
          TmpEstLineRec."Estimate No." := NewEst;
          EstimateMgmt.SetNewHeadLineNo(NewEstLine);
          EstimateMgmt.ModifyLinkedEstLines(2,EstLineRec,0);
          TmpEstLineRec."Line No." := NewEstLine;
          TmpEstLineRec.INSERT;

          ChrgBln := (EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" ");
          CheckCharge(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, ChrgBln, NewEst, NewEstLine, EstLineRec.Description);

          CheckQuanSheet(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);

          CheckQuanModel(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);

          CheckQuanRelation(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);  //db, 02-10-12: C001465

          CheckCode(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);

          CheckText(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
            0, NewEst, NewEstLine);  //db, 02-10-12: C001465

          RcpLineRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
          RcpLineRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
          RcpLineRec.SETRANGE("Part Group", EstLineRec."Part Group");
          RcpLineRec.SETRANGE(Part, EstLineRec.Part);
          RcpLineRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
          IF RcpLineRec.FINDSET THEN BEGIN
            NewRcpLine := 0;
            REPEAT
              NewRcpLine := NewRcpLine + 10000;
              TmpRcpLineRec := RcpLineRec;
              TmpRcpLineRec."Estimate No." := NewEst;
              TmpRcpLineRec."Estimate Line" := NewEstLine;
              TmpRcpLineRec."Line No." := NewRcpLine;
              TmpRcpLineRec.INSERT;

              ChrgBln := (RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" ");
              CheckCharge(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
                RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
                ChrgBln, NewEst, NewRcpLine, RcpLineRec.Description);

              CheckQuanSheet(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
                RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
                NewEst, NewRcpLine);

              //CheckQuanModel(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
              //  RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
              //  RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
              //  NewEst, NewRcpLine);  //not implemented for recipe lines

              //CheckQuanRelation(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
              //  RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
              //  RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
              //  NewEst, NewRcpLine);  //not implemented for recipe lines

              CheckCode(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
                RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
                NewEst, NewRcpLine);

            UNTIL RcpLineRec.NEXT = 0;
          END;
        UNTIL EstLineRec.NEXT = 0;
        EstLineRec.DELETEALL(TRUE);
      END;

      Status.UPDATE(1,Text012);
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstLineRec.COUNT;
        REPEAT
          EstLineRec.COPY(TmpEstLineRec);
          EstLineRec."Estimate No." := CurrEst;
          EstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);
      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpRcpLineRec.COUNT;
        REPEAT
          RcpLineRec.COPY(TmpRcpLineRec);
          RcpLineRec."Estimate No." := CurrEst;
          RcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpRcpLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text014);
      IF TmpChrgRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpChrgRec.COUNT;
        REPEAT
          ChrgRec.COPY(TmpChrgRec);
          ChrgRec."Estimate No." := CurrEst;
          ChrgRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpChrgRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text015);
      IF TmpQuanSheetRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanSheetRec.COUNT;
        REPEAT
          QuanSheetRec.COPY(TmpQuanSheetRec);
          QuanSheetRec."Estimate No." := CurrEst;
          QuanSheetRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanSheetRec.NEXT = 0;
      END;

      Status.UPDATE(1,QuanModelRec.TABLECAPTION);
      IF TmpQuanModelRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanModelRec.COUNT;
        REPEAT
          QuanModelRec.COPY(TmpQuanModelRec);
          QuanModelRec."Estimate No." := CurrEst;
          QuanModelRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanModelRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text016);
      IF TmpEstCodeRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstCodeRec.COUNT;
        REPEAT
          EstCodeRec.COPY(TmpEstCodeRec);
          EstCodeRec."Estimate No." := CurrEst;
          EstCodeRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstCodeRec.NEXT = 0;
      END;

      //db.sn, 02-10-12: C001465
      Status.UPDATE(1,QuanRelationRec.TABLECAPTION);
      IF TmpQuanRelationRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanRelationRec.COUNT;
        REPEAT
          QuanRelationRec.COPY(TmpQuanRelationRec);
          QuanRelationRec."Estimate No." := CurrEst;
          QuanRelationRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanRelationRec.NEXT = 0;
      END;

      Status.UPDATE(1,TextRec.TABLECAPTION);
      IF TmpTextRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpTextRec.COUNT;
        REPEAT
          TextRec.COPY(TmpTextRec);
          TextRec."Estimate No." := CurrEst;
          TextRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpTextRec.NEXT = 0;
      END;
      //db.en, 02-10-12: C001465

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReshuffleStdRecipeLines@1100525002(CurrGroup@1210190000 : Code[20];CurrRecipe@1100525001 : Code[20];UseLock@1210190006 : Boolean);
    VAR
      NewEst@1210190004 : Code[20];
      NewEstLine@1210190001 : Integer;
      NewRcpLine@1210190005 : Integer;
      ChrgBln@1210190002 : Boolean;
      PrevRecipe@1210190003 : Text[100];
      EstimateMgmt@1100525000 : Codeunit 11012153;
    BEGIN
      //db, 19-06-14: C014496
      IF NOT CONFIRM(Text022a, FALSE) THEN EXIT;

      ClearTmpTables;
      Status.OPEN(Text010);

      NewEst := 'RESHUFFLE_STD_RCP';
      PrevRecipe := '~';
      RcpLineRec.RESET;
      RcpLineRec.SETFILTER("Estimate No.", '%1', '');
      RcpLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
      RcpLineRec.SETFILTER("Part Group", '%1', '');
      RcpLineRec.SETFILTER(Part, '%1', '');
      RcpLineRec.SETRANGE("Estimate Line", 0);
      IF CurrGroup <> '' THEN
        RcpLineRec.SETRANGE("Recipe Group", CurrGroup);
      IF CurrRecipe <> '' THEN
        RcpLineRec.SETRANGE(Recipe, CurrRecipe);
      IF RcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        //function copied from ReshuffleLines for Estimate: same functions as CheckCharge used, assumming record present
        //in TmpRelationRec set by Estimate Line before same function is checked for Recipe Line.
        TmpRelationRec."Estimate No." := '';
        TmpRelationRec."Sub-Estimate No." := '';
        TmpRelationRec."Part Group" := '';
        TmpRelationRec.Part := '';
        TmpRelationRec."Estimate Line" := 0;
        TmpRelationRec."Recipe Group" := '';
        TmpRelationRec.Recipe := '';
        TmpRelationRec."Line No." := 0;
        TmpRelationRec.INSERT;
        REPEAT
          IF PrevRecipe <> RcpLineRec."Recipe Group" + RcpLineRec.Recipe THEN BEGIN
            PrevRecipe :=  RcpLineRec."Recipe Group" + RcpLineRec.Recipe;
            NewRcpLine := 0;
          END;
          NewRcpLine := NewRcpLine + 10000;
          currec := currec + 1;
          Status.UPDATE(1,RcpLineRec.Recipe);
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));

          TmpRcpLineRec := RcpLineRec;
          TmpRcpLineRec."Estimate No." := NewEst;
          TmpRcpLineRec."Line No." := NewRcpLine;
          TmpRcpLineRec.INSERT;

          ChrgBln := (RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" ");
          CheckCharge(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
            RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
            RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
            ChrgBln, NewEst, NewRcpLine, RcpLineRec.Description);

          CheckCode(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
            RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line",
            RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.",
            NewEst, NewRcpLine);

        UNTIL RcpLineRec.NEXT = 0;
        RcpLineRec.DELETEALL(TRUE);
      END;

      Status.UPDATE(1,Text013);
      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpRcpLineRec.COUNT;
        REPEAT
          RcpLineRec.COPY(TmpRcpLineRec);
          RcpLineRec."Estimate No." := '';
          RcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpRcpLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text014);
      IF TmpChrgRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpChrgRec.COUNT;
        REPEAT
          ChrgRec.COPY(TmpChrgRec);
          ChrgRec."Estimate No." := '';
          ChrgRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpChrgRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text016);
      IF TmpEstCodeRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstCodeRec.COUNT;
        REPEAT
          EstCodeRec.COPY(TmpEstCodeRec);
          EstCodeRec."Estimate No." := '';
          EstCodeRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstCodeRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ResetAdjustmentFactor@1210190006(CurrEst@1210190000 : Code[20];CurrSubEst@1210190006 : Code[20];CurrPartGrp@1210190008 : Code[20];CurrPart@1210190007 : Code[20];CurrLino@1210190009 : Integer;UseDialog@1210190001 : Boolean;UpdateLevel@1210190002 : Integer;IAdjType@1210190011 : Integer);
    VAR
      lvSubEstRec@1210190003 : Record 11012152;
      SubEstimateOriginal@1210190020 : Record 11012152;
      lvEstPartRec@1210190004 : Record 11012153;
      SubEstPartOriginal@1210190005 : Record 11012153;
      EstimateLineOriginal@1210190018 : Record 11012154;
      RecipeLineOriginal@1210190019 : Record 11012156;
      lvSelect@1210190010 : Integer;
      lvDoAdjHours@1210190012 : Boolean;
      lvDoAdjMaterial@1210190013 : Boolean;
      lvDoAdjSubcontr@1210190014 : Boolean;
      lvDoAdjPlant@1210190015 : Boolean;
      lvFound@1210190016 : Boolean;
      lvSurch@1210190017 : Boolean;
      lvSubEst@1100485000 : Code[20];
    BEGIN
      //UpdateLevel: 0=Estimate; 1=Sub-Estimate; 2=EstimatePart; 3=EstimateLine; 4=RecipeLine; 5=StandardRecipe
      //IAdjType: 0=All; 1=Hours; 2=Material; 3=Subcontracting; 4=Plant

      IF (UpdateLevel = 0) OR ((UpdateLevel = 5) AND (CurrLino = 0)) THEN
        lvSelect := STRMENU(Text023, 2)  //1=initialiseren; 2=opbouwen
      ELSE
        lvSelect := 2;
      IF (lvSelect <> 1) AND (lvSelect <> 2) THEN EXIT;

      lvDoAdjHours := ((IAdjType = 1) OR (IAdjType = 0));
      lvDoAdjMaterial := ((IAdjType = 2) OR (IAdjType = 0));
      lvDoAdjSubcontr := ((IAdjType = 3) OR (IAdjType = 0));
      lvDoAdjPlant := ((IAdjType = 4) OR (IAdjType = 0));

      ClearTmpTables;
      IF UseDialog THEN  //db, 13-02-12: M33098
        Status.OPEN(Text010);

      IF UpdateLevel <= 1 THEN BEGIN
        SubEstRec.RESET;
        SubEstRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          SubEstRec.SETRANGE("Sub-Estimate No.", CurrSubEst);
        IF SubEstRec.FINDSET(FALSE, FALSE) THEN BEGIN //call 30195 FALSE FALSE
          currec := 0;
          maxrec := SubEstRec.COUNT;
          REPEAT
            SubEstimateOriginal := SubEstRec;  //call 30195
            IF UseDialog THEN  //db, 13-02-12: M33098
              Status.UPDATE(1,SubEstRec."Sub-Estimate No.");
            currec := currec + 1;
            IF ((lvSelect = 1) AND lvDoAdjHours) OR (SubEstRec."Adjustment Factor Hours" = 0) THEN
              SubEstRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (SubEstRec."Adjustment Factor Material" = 0) THEN
              SubEstRec."Adjustment Factor Material" := 1;
            IF ((lvSelect = 1) AND lvDoAdjSubcontr) OR (SubEstRec."Adjustment Factor Subcontr." = 0) THEN
              SubEstRec."Adjustment Factor Subcontr." := 1;
            IF ((lvSelect = 1) AND lvDoAdjPlant) OR (SubEstRec."Adjustment Factor Plant" = 0) THEN
              SubEstRec."Adjustment Factor Plant" := 1;
            //
            SubEstRec."Cum. Adj. Factor Hours" := SubEstRec."Adjustment Factor Hours";
            SubEstRec."Cum. Adj. Factor Material" := SubEstRec."Adjustment Factor Material";
            SubEstRec."Cum. Adj. Factor Subcontr." := SubEstRec."Adjustment Factor Subcontr.";
            SubEstRec."Cum. Adj. Factor Plant" := SubEstRec."Adjustment Factor Plant";
            IF SubEstRec.Level > 0 THEN BEGIN
              lvSubEst := '';
              IF SubEstRec.Level = 1 THEN
                lvSubEst := SubEstRec.Chapter;
              IF SubEstRec.Level = 2 THEN
                lvSubEst := SubEstRec.Paragraph;
              IF lvSubEstRec.GET(SubEstRec."Estimate No.", lvSubEst) THEN BEGIN
                SubEstRec."Cum. Adj. Factor Hours" :=
                  SubEstRec."Cum. Adj. Factor Hours" * lvSubEstRec."Cum. Adj. Factor Hours";
                SubEstRec."Cum. Adj. Factor Material" :=
                  SubEstRec."Cum. Adj. Factor Material" * lvSubEstRec."Cum. Adj. Factor Material";
                SubEstRec."Cum. Adj. Factor Subcontr." :=
                  SubEstRec."Cum. Adj. Factor Subcontr." * lvSubEstRec."Cum. Adj. Factor Subcontr.";
                SubEstRec."Cum. Adj. Factor Plant" :=
                  SubEstRec."Cum. Adj. Factor Plant" * lvSubEstRec."Cum. Adj. Factor Plant";
              END;
            END;
            IF FORMAT(SubEstRec) <> FORMAT(SubEstimateOriginal) THEN //call 30195
              SubEstRec.MODIFY;
            IF UseDialog THEN  //db, 13-02-12: M33098
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL SubEstRec.NEXT = 0;
        END;
      END;

      IF UpdateLevel <= 2 THEN BEGIN
        EstPartRec.RESET;
        EstPartRec.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", Level, Chapter, Paragraph);
        EstPartRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          EstPartRec.SETRANGE("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          EstPartRec.SETRANGE("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          EstPartRec.SETRANGE(Part, CurrPart);
        IF EstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN  //call 30195 FALSE FALSE
          currec := 0;
          maxrec := EstPartRec.COUNT;
          REPEAT
            SubEstPartOriginal := EstPartRec; //call 30195
            IF UseDialog THEN  //db, 13-02-12: M33098
              Status.UPDATE(1,EstPartRec.Part);
            currec := currec + 1;
            IF ((lvSelect = 1) AND lvDoAdjHours) OR (EstPartRec."Adjustment Factor Hours" = 0) THEN
              EstPartRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (EstPartRec."Adjustment Factor Material" = 0) THEN
              EstPartRec."Adjustment Factor Material" := 1;
            IF ((lvSelect = 1) AND lvDoAdjSubcontr) OR (EstPartRec."Adjustment Factor Subcontr." = 0) THEN
              EstPartRec."Adjustment Factor Subcontr." := 1;
            IF ((lvSelect = 1) AND lvDoAdjPlant) OR (EstPartRec."Adjustment Factor Plant" = 0) THEN
              EstPartRec."Adjustment Factor Plant" := 1;
            //
            EstPartRec."Cum. Adj. Factor Hours" := EstPartRec."Adjustment Factor Hours";
            EstPartRec."Cum. Adj. Factor Material" := EstPartRec."Adjustment Factor Material";
            EstPartRec."Cum. Adj. Factor Subcontr." := EstPartRec."Adjustment Factor Subcontr.";
            EstPartRec."Cum. Adj. Factor Plant" := EstPartRec."Adjustment Factor Plant";
            IF EstPartRec.Level = 0 THEN BEGIN
              IF lvSubEstRec.GET(EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.") THEN BEGIN
                EstPartRec."Cum. Adj. Factor Hours" :=
                  EstPartRec."Cum. Adj. Factor Hours" * lvSubEstRec."Cum. Adj. Factor Hours";
                EstPartRec."Cum. Adj. Factor Material" :=
                  EstPartRec."Cum. Adj. Factor Material" * lvSubEstRec."Cum. Adj. Factor Material";
                EstPartRec."Cum. Adj. Factor Subcontr." :=
                  EstPartRec."Cum. Adj. Factor Subcontr." * lvSubEstRec."Cum. Adj. Factor Subcontr.";
                EstPartRec."Cum. Adj. Factor Plant" :=
                  EstPartRec."Cum. Adj. Factor Plant" * lvSubEstRec."Cum. Adj. Factor Plant";
              END;
            END;
            IF (EstPartRec.Level = 1) OR (EstPartRec.Level = 2) OR (EstPartRec.Level = 3) THEN BEGIN
              lvFound := FALSE;
              IF EstPartRec.Level = 1 THEN BEGIN
                lvEstPartRec.SETRANGE("Estimate No.", EstPartRec."Estimate No.");
                lvEstPartRec.SETRANGE("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
                lvEstPartRec.SETRANGE("Part Group", EstPartRec."Part Group");
                lvEstPartRec.SETRANGE(Level, 0);
                lvFound := lvEstPartRec.FINDFIRST;
              END;
              IF EstPartRec.Level = 2 THEN
                lvFound := lvEstPartRec.GET(
                  EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.", EstPartRec."Part Group", EstPartRec.Chapter);
              IF EstPartRec.Level = 3 THEN
                lvFound := lvEstPartRec.GET(
                  EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.", EstPartRec."Part Group", EstPartRec.Paragraph);
              IF lvFound THEN BEGIN
                EstPartRec."Cum. Adj. Factor Hours" :=
                  EstPartRec."Cum. Adj. Factor Hours" * lvEstPartRec."Cum. Adj. Factor Hours";
                EstPartRec."Cum. Adj. Factor Material" :=
                  EstPartRec."Cum. Adj. Factor Material" * lvEstPartRec."Cum. Adj. Factor Material";
                EstPartRec."Cum. Adj. Factor Subcontr." :=
                  EstPartRec."Cum. Adj. Factor Subcontr." * lvEstPartRec."Cum. Adj. Factor Subcontr.";
                EstPartRec."Cum. Adj. Factor Plant" :=
                  EstPartRec."Cum. Adj. Factor Plant" * lvEstPartRec."Cum. Adj. Factor Plant";
              END;
            END;
            IF FORMAT(EstPartRec) <> FORMAT(SubEstPartOriginal) THEN //call 30195
              EstPartRec.MODIFY;
            IF UseDialog THEN  //db, 13-02-12: M33098
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL EstPartRec.NEXT = 0;
        END;
      END;

      IF UpdateLevel <= 3 THEN BEGIN
        EstLineRec.RESET;
        EstLineRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          EstLineRec.SETRANGE("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          EstLineRec.SETRANGE("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          EstLineRec.SETRANGE(Part, CurrPart);
        IF CurrLino <> 0 THEN
          EstLineRec.SETRANGE("Line No.", CurrLino);
        IF EstLineRec.FINDSET THEN BEGIN
          currec := 0;
          maxrec := EstLineRec.COUNT;
          REPEAT
            EstimateLineOriginal := EstLineRec; //call 30195
            IF UseDialog THEN  //db, 13-02-12: M33098
              Status.UPDATE(1,EstLineRec.Part);
            currec := currec + 1;
            lvSurch := (EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" ");
              // OR (EstLineRec.Recipe <> '')); //mg.o, 21-06-12: C001145

            IF ((lvSelect = 1) AND lvDoAdjHours) OR (EstLineRec."Adjustment Factor Hours" = 0) OR (lvSurch) THEN
              EstLineRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (EstLineRec."Adjustment Factor Material" = 0) OR (lvSurch) THEN
              EstLineRec."Adjustment Factor Material" := 1;
            IF ((lvSelect = 1) AND lvDoAdjSubcontr) OR (EstLineRec."Adjustment Factor Subcontr." = 0) OR (lvSurch) THEN
              EstLineRec."Adjustment Factor Subcontr." := 1;
            IF ((lvSelect = 1) AND lvDoAdjPlant) OR (EstLineRec."Adjustment Factor Plant" = 0) OR (lvSurch) THEN
              EstLineRec."Adjustment Factor Plant" := 1;
            //
            EstLineRec."Cum. Adj. Factor Hours" := EstLineRec."Adjustment Factor Hours";
            EstLineRec."Cum. Adj. Factor Material" := EstLineRec."Adjustment Factor Material";
            EstLineRec."Cum. Adj. Factor Subcontr." := EstLineRec."Adjustment Factor Subcontr.";
            EstLineRec."Cum. Adj. Factor Plant" := EstLineRec."Adjustment Factor Plant";
            IF NOT lvSurch THEN BEGIN
              IF lvEstPartRec.GET(
                EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.", EstLineRec."Part Group", EstLineRec.Part)
              THEN BEGIN
                EstLineRec."Cum. Adj. Factor Hours" :=
                 EstLineRec."Cum. Adj. Factor Hours" * lvEstPartRec."Cum. Adj. Factor Hours";
                EstLineRec."Cum. Adj. Factor Material" :=
                  EstLineRec."Cum. Adj. Factor Material" * lvEstPartRec."Cum. Adj. Factor Material";
                EstLineRec."Cum. Adj. Factor Subcontr." :=
                  EstLineRec."Cum. Adj. Factor Subcontr." * lvEstPartRec."Cum. Adj. Factor Subcontr.";
                EstLineRec."Cum. Adj. Factor Plant" :=
                  EstLineRec."Cum. Adj. Factor Plant" * lvEstPartRec."Cum. Adj. Factor Plant";
              END;
            END;
            EstLineRec.CalculateTotals;
            IF (FORMAT(EstLineRec) <> FORMAT(EstimateLineOriginal)) OR lvSurch //mg, 14-05-12: C000516
            THEN BEGIN //call 30195
              TmpEstLineRec := EstLineRec;
              TmpEstLineRec.INSERT;
            END;
            IF UseDialog THEN  //db, 13-02-12: M33098
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL EstLineRec.NEXT = 0;
        END;
      END;

      IF UpdateLevel <= 5 THEN BEGIN
        IF UpdateLevel <= 4 THEN BEGIN  //estimate recipe
          RcpLineRec.RESET;
          RcpLineRec.SETRANGE("Estimate No.", CurrEst);
          IF CurrSubEst <> '' THEN
            RcpLineRec.SETRANGE("Sub-Estimate No.", CurrSubEst);
          IF CurrPartGrp <> '' THEN
            RcpLineRec.SETRANGE("Part Group", CurrPartGrp);
          IF CurrPart <> '' THEN
            RcpLineRec.SETRANGE(Part, CurrPart);
          IF CurrLino <> 0 THEN
            RcpLineRec.SETRANGE("Estimate Line", CurrLino);
        END;
        IF UpdateLevel = 5 THEN BEGIN  //standard recipe
          RcpLineRec.SETFILTER("Estimate No.", '%1', '');
          RcpLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
          RcpLineRec.SETFILTER("Part Group", '%1', '');
          RcpLineRec.SETFILTER(Part, '%1', '');
          RcpLineRec.SETRANGE("Estimate Line", 0);
          RcpLineRec.SETRANGE("Recipe Group", CurrPartGrp);
          RcpLineRec.SETRANGE(Recipe, CurrPart);
          IF CurrLino <> 0 THEN
            RcpLineRec.SETRANGE("Line No.", CurrLino);
        END;
        IF RcpLineRec.FINDSET THEN BEGIN
          currec := 0;
          maxrec := RcpLineRec.COUNT;
          REPEAT
            RecipeLineOriginal := RcpLineRec; //call 30195
            IF UseDialog THEN  //db, 13-02-12: M33098
              Status.UPDATE(1,RcpLineRec.Part);
            currec := currec + 1;
            lvSurch := (RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" ");

            IF ((lvSelect = 1) AND lvDoAdjHours) OR (RcpLineRec."Adjustment Factor Hours" = 0) OR (lvSurch) THEN
              RcpLineRec."Adjustment Factor Hours" := 1;
            IF ((lvSelect = 1) AND lvDoAdjMaterial) OR (RcpLineRec."Adjustment Factor Material" = 0) OR (lvSurch) THEN
              RcpLineRec."Adjustment Factor Material" := 1;
            IF ((lvSelect = 1) AND lvDoAdjSubcontr) OR (RcpLineRec."Adjustment Factor Subcontr." = 0) OR (lvSurch) THEN
              RcpLineRec."Adjustment Factor Subcontr." := 1;
            IF ((lvSelect = 1) AND lvDoAdjPlant) OR (RcpLineRec."Adjustment Factor Plant" = 0) OR (lvSurch) THEN
              RcpLineRec."Adjustment Factor Plant" := 1;
            //
            RcpLineRec."Cum. Adj. Factor Hours" := RcpLineRec."Adjustment Factor Hours";
            RcpLineRec."Cum. Adj. Factor Material" := RcpLineRec."Adjustment Factor Material";
            RcpLineRec."Cum. Adj. Factor Subcontr." := RcpLineRec."Adjustment Factor Subcontr.";
            RcpLineRec."Cum. Adj. Factor Plant" := RcpLineRec."Adjustment Factor Plant";
            IF NOT lvSurch THEN BEGIN
              IF lvEstPartRec.GET(
                RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.", RcpLineRec."Part Group", RcpLineRec.Part)
              THEN BEGIN
                RcpLineRec."Cum. Adj. Factor Hours" :=
                 RcpLineRec."Cum. Adj. Factor Hours" * lvEstPartRec."Cum. Adj. Factor Hours";
                RcpLineRec."Cum. Adj. Factor Material" :=
                  RcpLineRec."Cum. Adj. Factor Material" * lvEstPartRec."Cum. Adj. Factor Material";
                RcpLineRec."Cum. Adj. Factor Subcontr." :=
                  RcpLineRec."Cum. Adj. Factor Subcontr." * lvEstPartRec."Cum. Adj. Factor Subcontr.";
                RcpLineRec."Cum. Adj. Factor Plant" :=
                  RcpLineRec."Cum. Adj. Factor Plant" * lvEstPartRec."Cum. Adj. Factor Plant";
              END;
            END;
            RcpLineRec.CalculateTotals;
            IF (FORMAT(RcpLineRec) <> FORMAT(RecipeLineOriginal)) OR lvSurch //mg, 14-05-12: C000516
            THEN BEGIN //call 30195
              TmpRcpLineRec := RcpLineRec;
              TmpRcpLineRec.INSERT;
            END;
            IF UseDialog THEN  //db, 13-02-12: M33098
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL RcpLineRec.NEXT = 0;
        END;
      END;

      UpdateFromTmp;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      IF UseDialog THEN  //db, 13-02-12: M33098
        Status.CLOSE;
    END;

    PROCEDURE ReplaceRecipe@1210190011(CurrEst@1210190009 : Code[20];CurrSubEst@1210190008 : Code[20];GrpCode@1210190007 : Code[20];RcpCode@1210190005 : Code[20];ActEstRcp@1100485001 : ' ,Update,Replace');
    VAR
      RcpRec@1000000001 : Record 11012155;
      SubEstRec@1000000000 : Record 11012152;
      EstLineRec@1000000002 : Record 11012154;
    BEGIN
      Status.OPEN(Text011);
      Status.UPDATE(1,Text013);

      IF GrpCode <> '' THEN
        RcpRec.SETFILTER("Recipe Group", GrpCode);
      IF RcpCode <> '' THEN
        RcpRec.SETFILTER("No.", RcpCode);
      IF RcpRec.FINDSET THEN BEGIN
        REPEAT
          SubEstRec.RESET;
          IF CurrEst <> '' THEN
            SubEstRec.SETFILTER("Estimate No.", CurrEst);
          IF CurrSubEst <> '' THEN
            SubEstRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
          IF SubEstRec.FINDSET THEN BEGIN
            REPEAT
              EstLineRec.SETRANGE("Estimate No.", SubEstRec."Estimate No.");
              EstLineRec.SETRANGE("Sub-Estimate No.", SubEstRec."Sub-Estimate No.");
              EstLineRec.SETRANGE("Recipe Group", RcpRec."Recipe Group");
              EstLineRec.SETRANGE(Recipe, RcpRec."No.");
              IF EstLineRec.FINDSET THEN BEGIN
                currec := 0;
                maxrec := EstLineRec.COUNT;
                REPEAT
                  UpdateEstimateRecipe(EstLineRec, ActEstRcp, RcpRec."Recipe Group", RcpRec."No.");  //db, 18-01-13: DP00258
                  currec := currec + 1;
                  Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
                UNTIL EstLineRec.NEXT = 0;
              END;
            UNTIL SubEstRec.NEXT = 0;
          END;
        UNTIL RcpRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceRateCode@1210190000(VAR lvEstLineRec@1100485000 : Record 11012154;OldRateCode@1210190008 : Code[20];NewRateCode@1210190007 : Code[20];UseLock@1210190000 : Boolean);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldRateCode <> '' THEN
        EstLineRec.SETFILTER("Rate Code", OldRateCode)
      ELSE
        EstLineRec.SETFILTER("Rate Code", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec.VALIDATE("Rate Code", NewRateCode);
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldRateCode <> '' THEN
        RcpLineRec.SETFILTER("Rate Code", OldRateCode)
      ELSE
        RcpLineRec.SETFILTER("Rate Code", '<>%1', '');
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          RcpLineRec.VALIDATE("Rate Code", NewRateCode);
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Rate Code");
      TmpRcpLineRec.SETRANGE("Rate Code");
      UpdateFromTmp;

      IF EstLineRec.GETFILTER("Estimate No.") <> '' THEN
        EstRec.SETFILTER("No.", EstLineRec.GETFILTER("Estimate No."));
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF (EstRec."Rate Code" = OldRateCode) OR (OldRateCode = '') THEN BEGIN
            IF (EstLineRec.GETFILTER("Sub-Estimate No.") = '') AND
               (EstLineRec.GETFILTER(Part) = '') THEN BEGIN  //db, 04-03-14: C007957
              EstRec."Rate Code" := NewRateCode;
              EstRec.MODIFY;
            END;
          END;
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceRateGroup@1210190004(CurrEst@1210190006 : Code[20];OldGroupCode@1210190007 : Code[20];NewGroupCode@1210190001 : Code[20];UseLock@1210190000 : Boolean);
    VAR
      lvEstLineRec@1100485000 : Record 11012154;
    BEGIN
      ClearTmpTables;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      EstSetup.GET;
      IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group" THEN BEGIN
        RateRec.SETRANGE("Rate Group", NewGroupCode);
        IF RateRec.FINDSET THEN BEGIN
          REPEAT
            IF EstRateRec.GET(CurrEst, RateRec."Rate Code") THEN BEGIN
              EstRateRec.Description := RateRec.Description;
              EstRateRec."Cost Rate" := RateRec."Cost Rate";
              EstRateRec."Sales Rate" := RateRec."Sales Rate";  //db, 02-06-14: C012973
              EstRateRec."Rate Type" := RateRec."Rate Type";
              EstRateRec."Team Size" := RateRec."Team Size";
              EstRateRec."Cost Object" := RateRec."Cost Object";  //db, 21-09-11: M28881
              EstRateRec.MODIFY;
            END ELSE BEGIN
              EstRateRec."Estimate No." := CurrEst;
              EstRateRec."Rate Code" := RateRec."Rate Code";
              EstRateRec.Description := RateRec.Description;
              EstRateRec."Cost Rate" := RateRec."Cost Rate";
              EstRateRec."Sales Rate" := RateRec."Sales Rate";  //db, 02-06-14: C012973
              EstRateRec."Rate Type" := RateRec."Rate Type";
              EstRateRec."Team Size" := RateRec."Team Size";
              EstRateRec."Cost Object" := RateRec."Cost Object";  //db, 21-09-11: M28881
              EstRateRec.INSERT;
            END;
          UNTIL RateRec.NEXT = 0;
        END;
        //db.sn, 06-03-08
        DateRateRec.RESET;
        DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Estimate);
        DateRateRec.SETRANGE("Estimate No.", CurrEst);
        DateRateRec.DELETEALL;

        DateRateRec.RESET;
        DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Standard);
        DateRateRec.SETRANGE("Rate Group", NewGroupCode);
        IF DateRateRec.FIND('-') THEN BEGIN
          REPEAT
            DateRateRec2.COPY(DateRateRec);
            DateRateRec2."Record Type" := DateRateRec."Record Type"::Estimate;
            DateRateRec2."Estimate No." := CurrEst;
            DateRateRec2."Rate Group" := '';
            IF DateRateRec2.INSERT THEN;
          UNTIL DateRateRec.NEXT = 0;
        END;
        //db.en, 06-03-08
      END ELSE BEGIN
        BudgetRateRec.SETRANGE("Starting Date",0D,TODAY);
        BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
        IF BudgetRateRec.FINDSET THEN BEGIN
          REPEAT
            IF EstRateRec.GET(CurrEst, BudgetRateRec.Code) THEN BEGIN
              EstRateRec.Description := BudgetRateRec.Description;
              EstRateRec."Cost Rate" := BudgetRateRec.Rate;
              EstRateRec."Rate Type" := EstRateRec."Rate Type"::Hours;
              EstRateRec.MODIFY;
            END ELSE BEGIN
              EstRateRec."Estimate No." := CurrEst;
              EstRateRec."Rate Code" := BudgetRateRec.Code;
              EstRateRec.Description := BudgetRateRec.Description;
              EstRateRec."Cost Rate" := BudgetRateRec.Rate;
              EstRateRec."Rate Type" := RateRec."Rate Type"::Hours;
              EstRateRec.INSERT;
            END;
          UNTIL BudgetRateRec.NEXT = 0;
        END;
      END;

      IF CurrEst <> '' THEN
        EstRateRec.SETFILTER("Estimate No.", CurrEst);
      IF EstRateRec.FINDSET THEN BEGIN
        REPEAT
          IF CurrEst <> '' THEN
            lvEstLineRec.SETFILTER("Estimate No.", CurrEst);
          ReplaceRateCode(lvEstLineRec, EstRateRec."Rate Code", EstRateRec."Rate Code", UseLock);
        UNTIL EstRateRec.NEXT = 0;
      END;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          EstRec."Rate Group" := NewGroupCode;
          EstRec.MODIFY;
        UNTIL EstRec.NEXT = 0;
      END;
    END;

    PROCEDURE ReplaceNormGroup@1210190001(VAR lvEstLineRec@1100485000 : Record 11012154;OldGroupCode@1210190007 : Code[20];NewGroupCode@1210190005 : Code[20];UseLock@1210190000 : Boolean);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldGroupCode <> '' THEN
        EstLineRec.SETFILTER("Norm Group", OldGroupCode)
      ELSE
        EstLineRec.SETFILTER("Sub Operation Code", '<>%1', '');  //db, 16-06-11: M19721
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec."Norm Group" := NewGroupCode;
          IF NormRec.GET(EstLineRec."Sub Operation Code", EstLineRec."Norm Group") THEN BEGIN
            EstLineRec.Norm := NormRec.Norm;
            //db.sn, 24-09-12: C002252
            IF EstLineRec.Norm <> 0 THEN
              EstLineRec."Production Rate" := 1 / EstLineRec.Norm
            ELSE
              EstLineRec."Production Rate" := 0;
            //db.en, 24-09-12: C002252
            EstLineRec.ConvertNorm(FALSE,FALSE);  //db, 19-08-04: incl. check on rate type and team size
          END;
          EstLineRec.CalculateTotals;
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldGroupCode <> '' THEN
        RcpLineRec.SETFILTER("Norm Group", OldGroupCode)
      ELSE
        RcpLineRec.SETFILTER("Sub Operation Code", '<>%1', '');  //db, 16-06-11: M19721
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          RcpLineRec."Norm Group" := NewGroupCode;
          IF NormRec.GET(RcpLineRec."Sub Operation Code", RcpLineRec."Norm Group") THEN BEGIN
            RcpLineRec.Norm := NormRec.Norm;
            //db.sn, 24-09-12: C002252
            IF RcpLineRec.Norm <> 0 THEN
              RcpLineRec."Production Rate" := 1 / RcpLineRec.Norm
            ELSE
              RcpLineRec."Production Rate" := 0;
            //db.en, 24-09-12: C002252
            RcpLineRec.ConvertNorm(FALSE,FALSE);  //db, 19-08-04: incl. check on rate type and team size
          END;
          RcpLineRec.CalculateTotals;
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      WITH EstLineRec DO BEGIN
        IF GETFILTER("Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF OldGroupCode <> '' THEN
          SubEstRec.SETFILTER("Norm Group", OldGroupCode);
      //ELSE
      //  SubEstRec.SETFILTER("Norm Group", '<>%1', '');  //db, 16-06-11: M19721
        SubEstRec.MODIFYALL("Norm Group", NewGroupCode);

        IF GETFILTER("Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER(Part) <> '' THEN
          EstPartRec.SETFILTER(Part, GETFILTER(Part));
        IF OldGroupCode <> '' THEN
          EstPartRec.SETFILTER("Norm Group", OldGroupCode);
      //ELSE
      //  EstPartRec.SETFILTER("Norm Group", '<>%1', '');  //db, 16-06-11: M19721
        EstPartRec.MODIFYALL("Norm Group", NewGroupCode);

        IF GETFILTER("Estimate No.") <> '' THEN
          EstRec.SETFILTER("No.", GETFILTER("Estimate No."));
        IF OldGroupCode <> '' THEN
          EstRec.SETFILTER("Norm Group", OldGroupCode);
      //ELSE
      //  EstRec.SETFILTER("Norm Group", '<>%1', '');  //db, 16-06-11: M19721
        IF (GETFILTER("Sub-Estimate No.") = '') AND (GETFILTER(Part) = '') THEN  //db, 04-03-14: C007957
          EstRec.MODIFYALL("Norm Group", NewGroupCode);
      END;

      TmpEstLineRec.SETRANGE("Norm Group");
      TmpRcpLineRec.SETRANGE("Norm Group");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceCondition@1100485001(VAR lvEstLineRec@1100485001 : Record 11012154;OldCondition@1210190007 : Code[20];NewCondition@1210190005 : Code[20];UseLock@1210190000 : Boolean);
    VAR
      RcpRec2@1100485000 : Record 11012155;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      EstLineRec.SETRANGE(Condition, OldCondition);
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          IF RcpRec.GET(EstLineRec."Recipe Group", EstLineRec.Recipe) THEN BEGIN
            RcpRec2.SETRANGE("Recipe Group", RcpRec."Recipe Group");
            RcpRec2.SETRANGE("Condition Group", RcpRec."Condition Group");
            RcpRec2.SETRANGE(Condition, NewCondition);
            IF RcpRec2.COUNT = 1 THEN BEGIN
              RcpRec2.FINDFIRST;
              EstLineRec.VALIDATE(Recipe, RcpRec2."No.");
              EstLineRec.MODIFY;
            END;
          END;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      WITH EstLineRec DO BEGIN
        IF GETFILTER("Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          SubEstRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        SubEstRec.SETRANGE(Condition, OldCondition);
        SubEstRec.MODIFYALL(Condition, NewCondition);

        IF GETFILTER("Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."));
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER(Part) <> '' THEN
          EstPartRec.SETFILTER(Part, GETFILTER(Part));
        EstPartRec.SETRANGE(Condition, OldCondition);
        EstPartRec.MODIFYALL(Condition, NewCondition);

        IF GETFILTER("Estimate No.") <> '' THEN
          EstRec.SETFILTER("No.", GETFILTER("Estimate No."));
        EstRec.SETRANGE(Condition, OldCondition);
        EstRec.MODIFYALL(Condition, NewCondition);
      END;

      TmpEstLineRec.SETRANGE(Condition);

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceTradeVendor@1100485003(VAR lvEstLineRec@1100485007 : Record 11012154;OldTradeVendor@1210190007 : Code[20];NewTradeVendor@1210190005 : Code[20];UseLock@1210190000 : Boolean);
    VAR
      Temp2RcpLineRec@1100485003 : TEMPORARY Record 11012156;
      Temp2EstLineRec@1100485004 : TEMPORARY Record 11012154;
      lvTradeItemRec@1100485006 : Record 11012317;
      UpdateRep@1100485005 : Report 11012318;
      NewTradeItem@1100485008 : Code[20];
      Final@1100485009 : 'Yes,No Report';
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Temp2RcpLineRec.DELETEALL;
      Temp2EstLineRec.DELETEALL;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldTradeVendor <> '' THEN
        EstLineRec.SETFILTER("Vendor (Trade Item)", OldTradeVendor)
      ELSE
        EstLineRec.SETFILTER("Vendor (Trade Item)", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          Temp2EstLineRec := EstLineRec;
          IF lvTradeItemRec.CheckReplaceVendor(EstLineRec."Vendor (Trade Item)", EstLineRec."Trade Item",
                                                  NewTradeVendor, NewTradeItem) THEN BEGIN
            CheckEstFixed(EstLineRec."Estimate No.");

            EstLineRec."Trade Item" := '';
            EstLineRec.VALIDATE("Vendor (Trade Item)", NewTradeVendor);
            EstLineRec.VALIDATE("Trade Item", NewTradeItem);
            IF (EstLineRec."Item No." = Temp2EstLineRec."Item No.") AND
               (EstLineRec."Vendor (Trade Item)" = NewTradeVendor) AND
               (EstLineRec."Trade Item" = NewTradeItem) THEN BEGIN
              TmpEstLineRec.COPY(EstLineRec);
              TmpEstLineRec.INSERT;
              Temp2EstLineRec.INSERT;
              currec := currec + 1;
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
            END;
          END;
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF OldTradeVendor <> '' THEN
        RcpLineRec.SETFILTER("Vendor (Trade Item)", OldTradeVendor)
      ELSE
        RcpLineRec.SETFILTER("Vendor (Trade Item)", '<>%1', '');
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          Temp2RcpLineRec := RcpLineRec;
          IF lvTradeItemRec.CheckReplaceVendor(RcpLineRec."Vendor (Trade Item)", RcpLineRec."Trade Item",
                                                  NewTradeVendor, NewTradeItem) THEN BEGIN
            CheckEstFixed(RcpLineRec."Estimate No.");

            RcpLineRec."Trade Item" := '';
            RcpLineRec.VALIDATE("Vendor (Trade Item)", NewTradeVendor);
            RcpLineRec.VALIDATE("Trade Item", NewTradeItem);
            IF (RcpLineRec."Item No." = Temp2RcpLineRec."Item No.") AND
              (RcpLineRec."Vendor (Trade Item)" = NewTradeVendor) AND
              (RcpLineRec."Trade Item" = NewTradeItem) THEN
            BEGIN
              TmpRcpLineRec.COPY(RcpLineRec);
              TmpRcpLineRec.INSERT;
              Temp2RcpLineRec.INSERT;
              currec := currec + 1;
              Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
            END;
          END;
        UNTIL RcpLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Vendor (Trade Item)");
      TmpRcpLineRec.SETRANGE("Vendor (Trade Item)");
      UpdateFromTmp;

      COMMIT;
      Status.CLOSE;

      IF (Temp2EstLineRec.COUNT = 0) AND (Temp2RcpLineRec.COUNT = 0) THEN
        MESSAGE(Text004)
      ELSE BEGIN
        UpdateRep.SetTempEstimateLineOLD(Temp2EstLineRec,Temp2RcpLineRec,Final);
        UpdateRep.SETTABLEVIEW(EstLineRec);
        UpdateRep.SETTABLEVIEW(RcpLineRec);
        UpdateRep.RUNMODAL;
      END;
    END;

    PROCEDURE ReplaceItem@4(VAR ConvRec@1100525006 : Record 11012322;VAR lvEstLineRec@1100525000 : Record 11012154;VAR lvRcpLineRec@1100525010 : Record 11012156;ActEst@1100525011 : Boolean;ActRcp@1100525012 : Boolean;SetRcpFilter@1100525013 : Boolean;ActPrice@1100525008 : Boolean;UseLock@1100525009 : Boolean);
    VAR
      DimValRec@1100525005 : Record 349;
      DimMgt@1100525004 : Codeunit 408;
      ItemTypeOpt@1100525007 : 'Item,Basic Item,Trade Item';
      Status@1100525003 : Dialog;
      maxrec@1100525002 : Integer;
      currec@1100525001 : Integer;
    BEGIN
      //db, 07-10-08: M11811
      //- form 11012350: Replace Items
      //- report 11012166: Replace Estimate Data

      EstLineRec.COPY(lvEstLineRec);
      IF SetRcpFilter THEN
        CheckEstFilters(EstLineRec, RcpLineRec)
      ELSE
        RcpLineRec.COPY(lvRcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);

      ConvRec.MARKEDONLY(TRUE);
      IF NOT ConvRec.FINDFIRST THEN BEGIN
        ConvRec.MARKEDONLY(FALSE);
        ConvRec.SETRANGE(Select, TRUE);
      END;
      IF ConvRec.FINDSET THEN BEGIN
        REPEAT
          ConvRec.VALIDATE(Select);

          IF ActEst = TRUE THEN BEGIN
            Status.UPDATE(1,Text012);
            EstLineRec.SETRANGE(Recipe, '');
            IF ConvRec."Trade Item (Old)" <> '' THEN BEGIN
              EstLineRec.SETRANGE("Trade Item", ConvRec."Trade Item (Old)");
              EstLineRec.SETRANGE("Vendor (Trade Item)", ConvRec."Vendor (Old)");
            END ELSE BEGIN
              IF ConvRec."Basic Item (Old)" <> '' THEN BEGIN
                EstLineRec.SETRANGE("Basic Item", ConvRec."Basic Item (Old)");
                EstLineRec.SETRANGE(Manufacturer, ConvRec."Manufacturer (Old)");
              END ELSE BEGIN
                IF ConvRec."Item No. (Old)" <> '' THEN BEGIN
                  EstLineRec.SETRANGE("Item No.", ConvRec."Item No. (Old)");
                END ELSE BEGIN
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    EstLineRec.SETFILTER("Trade Item", '%1', '');
                    EstLineRec.SETFILTER("Vendor (Trade Item)", '%1', '');
                    EstLineRec.SETFILTER("Basic Item", '%1', '');
                    EstLineRec.SETFILTER(Manufacturer, '%1', '');
                    EstLineRec.SETFILTER("Item No.", '%1', '');
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (Old)", DimValRec, TRUE, '');
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                      EstLineRec.SETRANGE("Cost Object Labor", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
                      EstLineRec.SETRANGE("Cost Object Material", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
                      EstLineRec.SETRANGE("Cost Object Subcontracting", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
                      EstLineRec.SETRANGE("Cost Object Plant", ConvRec."Cost Object (Old)");
                  END;
                END;
              END;
            END;
            IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              currec := 0;
              maxrec := EstLineRec.COUNT;
              REPEAT
                CheckEstFixed(EstLineRec."Estimate No.");
                IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                  DimMgt.GetDimValueRec(2, ConvRec."Cost Object (New)", DimValRec, TRUE, '');
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                    EstLineRec."Cost Object Labor" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
                    EstLineRec."Cost Object Material" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
                    EstLineRec."Cost Object Subcontracting" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
                    EstLineRec."Cost Object Plant" := ConvRec."Cost Object (New)";
                END ELSE BEGIN
                  EstLineRec."Item No." := ConvRec."Item No. (New)";
                  EstLineRec."Basic Item" := ConvRec."Basic Item (New)";
                  EstLineRec."Trade Item" := ConvRec."Trade Item (New)";
                  EstLineRec.Manufacturer := ConvRec."Manufacturer (New)";
                  EstLineRec."Vendor (Trade Item)" := ConvRec."Vendor (New)";
                END;
                IF ActPrice = TRUE THEN BEGIN
                  IF ConvRec."Trade Item (New)" <> '' THEN
                    EstLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE)
                  ELSE
                    IF ConvRec."Basic Item (New)" <> '' THEN
                      EstLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE)
                    ELSE
                      IF ConvRec."Item No. (New)" <> '' THEN
                        EstLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, TRUE)
                      ELSE
                        IF ConvRec."Cost Object (New)" <> '' THEN
                          EstLineRec.CheckCostObject(ConvRec."Cost Object (New)",FALSE);
                END;
                EstLineRec.CalculateTotals;
                EstLineRec.MODIFY;
                currec := currec + 1;
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
              UNTIL EstLineRec.NEXT = 0;
            END;
          END;

          IF ActRcp = TRUE THEN BEGIN
            Status.UPDATE(1,Text013);
            IF ConvRec."Trade Item (Old)" <> '' THEN BEGIN
              RcpLineRec.SETRANGE("Trade Item", ConvRec."Trade Item (Old)");
              RcpLineRec.SETRANGE("Vendor (Trade Item)", ConvRec."Vendor (Old)");
            END ELSE BEGIN
              IF ConvRec."Basic Item (Old)" <> '' THEN BEGIN
                RcpLineRec.SETRANGE("Basic Item", ConvRec."Basic Item (Old)");
                RcpLineRec.SETRANGE(Manufacturer, ConvRec."Manufacturer (Old)");
              END ELSE BEGIN
                IF ConvRec."Item No. (Old)" <> '' THEN BEGIN
                  RcpLineRec.SETRANGE("Item No.", ConvRec."Item No. (Old)");
                END ELSE BEGIN
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    RcpLineRec.SETFILTER("Trade Item", '%1', '');
                    RcpLineRec.SETFILTER("Vendor (Trade Item)", '%1', '');
                    RcpLineRec.SETFILTER("Basic Item", '%1', '');
                    RcpLineRec.SETFILTER(Manufacturer, '%1', '');
                    RcpLineRec.SETFILTER("Item No.", '%1', '');
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (Old)", DimValRec, TRUE, '');
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                      RcpLineRec.SETRANGE("Cost Object Labor", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
                      RcpLineRec.SETRANGE("Cost Object Material", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
                      RcpLineRec.SETRANGE("Cost Object Subcontracting", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
                      RcpLineRec.SETRANGE("Cost Object Plant", ConvRec."Cost Object (Old)");
                  END;
                END;
              END;
            END;
            IF RcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              currec := 0;
              maxrec := RcpLineRec.COUNT;
              REPEAT
                IF RcpLineRec."Estimate No." <> '' THEN
                  CheckEstFixed(RcpLineRec."Estimate No.")
                ELSE
                  EstRec.INIT;
                IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                  DimMgt.GetDimValueRec(2, ConvRec."Cost Object (New)", DimValRec, TRUE, '');
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                    RcpLineRec."Cost Object Labor" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
                    RcpLineRec."Cost Object Material" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
                    RcpLineRec."Cost Object Subcontracting" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
                    RcpLineRec."Cost Object Plant" := ConvRec."Cost Object (New)";
                END ELSE BEGIN
                  RcpLineRec."Item No." := ConvRec."Item No. (New)";
                  RcpLineRec."Basic Item" := ConvRec."Basic Item (New)";
                  RcpLineRec."Trade Item" := ConvRec."Trade Item (New)";
                  RcpLineRec.Manufacturer := ConvRec."Manufacturer (New)";
                  RcpLineRec."Vendor (Trade Item)" := ConvRec."Vendor (New)";
                END;
                IF ActPrice = TRUE THEN BEGIN
                  IF ConvRec."Trade Item (New)" <> '' THEN
                    RcpLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE)
                  ELSE
                    IF ConvRec."Basic Item (New)" <> '' THEN
                      RcpLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE)
                    ELSE
                      IF ConvRec."Item No. (New)" <> '' THEN
                        RcpLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, TRUE)
                      ELSE
                        IF ConvRec."Cost Object (New)" <> '' THEN
                          RcpLineRec.CheckCostObject(ConvRec."Cost Object (New)",FALSE);
                END;
                RcpLineRec.CalculateTotals;
                RcpLineRec.MODIFY(TRUE);    //Call 33212 use TRUE here because of central management.
                RcpLineRec.UpdateEstLines;
                currec := currec + 1;
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
              UNTIL RcpLineRec.NEXT = 0;
            END;
          END;
        UNTIL ConvRec.NEXT = 0;
      END;

      Status.CLOSE;
    END;

    PROCEDURE UpdateQuotePrice@1100485007(VAR lvEstLineRec@1100485000 : Record 11012154;QuoteFilter@1100485002 : Text[250];UseLock@1100485005 : Boolean);
    VAR
      PurchLineRec@1100485001 : Record 39;
      UnitPrice@1100525000 : Decimal;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1, PurchLineRec.TABLECAPTION);

      PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
      IF QuoteFilter <> '' THEN
        PurchLineRec.SETFILTER("Document No.", QuoteFilter);
      IF EstLineRec.GETFILTER("Estimate No.") <> '' THEN
        PurchLineRec.SETFILTER("Estimate No.", EstLineRec.GETFILTER("Estimate No."))
      ELSE
        PurchLineRec.SETFILTER("Estimate No.", '<>%1', '');  //db, 04-09-07
      PurchLineRec.SETFILTER("Purchase Route Reference", '<>%1', '');
      PurchLineRec.SETRANGE("Quote Selected", TRUE);
      IF PurchLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := PurchLineRec.COUNT;
        REPEAT
          EstLineRec.SETFILTER("Purchase Route Reference", PurchLineRec."Purchase Route Reference");
          IF EstLineRec.FINDSET THEN BEGIN
            REPEAT
              CheckEstFixed(EstLineRec."Estimate No.");

              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Material THEN BEGIN
                EstLineRec."Price Agreement" := TRUE;
                //db.sn, 25-06-10: M19825
                EstLineRec."Gross Price" := PurchLineRec."Unit Price (LCY)";
                //db.sn, 18-02-14: C010958
                IF PurchLineRec."Line Discount %" <> 0 THEN
                  EstLineRec."Discount %" := PurchLineRec."Line Discount %"
                ELSE
                  EstLineRec."Discount %" := PurchLineRec."Discount % (Item)";
                EstLineRec."Purchase Discount %" :=  EstLineRec."Discount %";
                //db.en, 18-02-14: C010958
                IF (EstLineRec."Gross Price" <> 0) AND (EstLineRec."Discount %" <> 0) THEN  //db, 06-08-10: M21863
                  UnitPrice := EstLineRec."Gross Price" * ((100-EstLineRec."Discount %")/ 100)
                ELSE
                  UnitPrice := PurchLineRec."Unit Cost (LCY)";
                EstLineRec.VALIDATE("Material Price", UnitPrice);
                //db.en, 25-06-10: M19825
                EstLineRec.Vendor := PurchLineRec."Buy-from Vendor No.";
              END;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Subcontracting THEN BEGIN
                EstLineRec."Subcontracting Price" := PurchLineRec."Unit Cost (LCY)";  //db, 25-06-10: M19825
                EstLineRec.Subcontractor := PurchLineRec."Buy-from Vendor No.";
              END;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Plant THEN
                EstLineRec."Plant Price" := PurchLineRec."Unit Cost (LCY)";  //db, 25-06-10: M19825
              EstLineRec.CalculateDiscount;
              EstLineRec.CalculateTotals;
              TmpEstLineRec.COPY(EstLineRec);
              TmpEstLineRec.INSERT;
            UNTIL EstLineRec.NEXT = 0;
          END;

          RcpLineRec.SETFILTER("Purchase Route Reference", PurchLineRec."Purchase Route Reference");
          IF RcpLineRec.FINDSET THEN BEGIN
            REPEAT
              CheckEstFixed(RcpLineRec."Estimate No.");

              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Material THEN BEGIN
                RcpLineRec."Price Agreement" := TRUE;
                //db.sn, 25-06-10: M19825
                RcpLineRec."Gross Price" := PurchLineRec."Unit Price (LCY)";
                //db.sn, 18-02-14: C010958
                IF PurchLineRec."Line Discount %" <> 0 THEN
                  RcpLineRec."Discount %" := PurchLineRec."Line Discount %"
                ELSE
                  RcpLineRec."Discount %" := PurchLineRec."Discount % (Item)";
                RcpLineRec."Purchase Discount %" :=  RcpLineRec."Discount %";
                //db.en, 18-02-14: C010958
                IF (RcpLineRec."Gross Price" <> 0) AND (RcpLineRec."Discount %" <> 0) THEN  //db, 06-08-10: M21863
                  UnitPrice := RcpLineRec."Gross Price" * (100-RcpLineRec."Discount %"/ 100)
                ELSE
                  UnitPrice := PurchLineRec."Unit Cost (LCY)";
                RcpLineRec.VALIDATE("Material Price", UnitPrice);
                //db.en, 25-06-10: M19825
                RcpLineRec.Vendor := PurchLineRec."Buy-from Vendor No.";
              END;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Subcontracting THEN BEGIN
                RcpLineRec."Subcontracting Price" := PurchLineRec."Unit Cost (LCY)";  //db, 25-06-10: M19825
                RcpLineRec.Subcontractor := PurchLineRec."Buy-from Vendor No.";
              END;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Plant THEN
                RcpLineRec."Plant Price" := PurchLineRec."Unit Cost (LCY)";  //db, 25-06-10: M19825
              RcpLineRec.CalculateDiscount;
              RcpLineRec.CalculateTotals;
      //      RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
              TmpRcpLineRec.COPY(RcpLineRec);
              TmpRcpLineRec.INSERT;
            UNTIL RcpLineRec.NEXT = 0;
          END;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL PurchLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Purchase Route Reference");
      TmpRcpLineRec.SETRANGE("Purchase Route Reference");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateActualPrice@1210190002(VAR lvEstLineRec@1100485001 : Record 11012154;ActNorm@1210190013 : Boolean;ActPrice@1210190012 : Boolean;ActPlantPrice@1100485002 : Boolean;ActCostObject@1210190011 : Boolean;ActDesc@1210190010 : Boolean;ActSubOper@1210190021 : Boolean;PriceMethod@1210190017 : 'Actualise GP+DP+NP,Actualise GP + Fix DP + Calculate NP,Fix GP + Actualise DP + Calculate NP,Fix GP + Calculate DP + Actualise NP,Calculate GP + Fix DP + Actualise NP';UseLock@1210190003 : Boolean);
    VAR
      ItemTypeOpt@1210190009 : 'Item,Basic Item,Trade Item';
      OldCostObjectItem@1210190015 : Code[20];
      OldCostObjectLabor@1210190002 : Code[20];
      OldCostComponent@1100485000 : Code[20];
      OldDesc@1210190014 : Text[100];
      OldGrossPrice@1210190018 : Decimal;
      OldDiscPerc@1210190019 : Decimal;
      UnitOld@1210190006 : Code[20];
      UnitNew@1210190005 : Code[20];
      SubOperNew@1210190022 : Code[20];
      OldEstLineRec@1210190008 : Record 11012154;
      NewEstLineRec@1210190007 : Record 11012154;
      OldRcpLineRec@1210190016 : Record 11012156;
      NewRcpLineRec@1210190020 : Record 11012156;
      EstimateLineOriginal@1210190000 : Record 11012154;
      RecipeLineOriginal@1210190001 : Record 11012156;
      SubOperRec@1100525001 : Record 11012166;
      OperRec@1100525000 : Record 11012165;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          EstimateLineOriginal := EstLineRec; //call 30195
          CheckEstFixed(EstLineRec."Estimate No.");

          OldCostObjectLabor := EstLineRec."Cost Object Labor";
          OldCostObjectItem := EstLineRec."Cost Object Material";
          OldDesc := EstLineRec.Description;
          OldCostComponent := EstLineRec."Cost Component";
          OldGrossPrice := EstLineRec."Gross Price";
          OldDiscPerc := EstLineRec."Discount %";
          IF ActNorm = TRUE THEN BEGIN
            IF ActSubOper = TRUE THEN
              SubOperNew := CheckSubOperation(EstLineRec.Manufacturer, EstLineRec."Vendor (Trade Item)",
                EstLineRec."Item No.", EstLineRec."Basic Item", EstLineRec."Trade Item");
            IF SubOperNew <> '' THEN
              EstLineRec.VALIDATE("Sub Operation Code", SubOperNew)
            ELSE
              EstLineRec.VALIDATE("Sub Operation Code");
            IF EstLineRec."Sub Operation Code" <> '' THEN BEGIN  //db, 08-06-15: C020235
              IF SubOperRec.GET(EstLineRec."Sub Operation Code") THEN BEGIN
                EstLineRec.Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(EstLineRec.Description));
                IF OperRec.GET(SubOperRec.Operation) THEN
                  IF OperRec."Cost Object" <> '' THEN
                    EstLineRec."Cost Object Labor" := OperRec."Cost Object";
               END;
            END;
          END;
          IF ActPrice = TRUE THEN BEGIN
            OldEstLineRec := EstLineRec;  //db.n: 01-07-04
            IF EstLineRec."Trade Item" <> '' THEN
              EstLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, FALSE)
            ELSE
              IF EstLineRec."Basic Item" <> '' THEN
                EstLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, FALSE)
              ELSE
                IF EstLineRec."Item No." <> '' THEN
                  EstLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, FALSE);

            //db.sn: 01-07-04
            NewEstLineRec := EstLineRec;
            IF NewEstLineRec."Unit of Measure" <> OldEstLineRec."Unit of Measure" THEN BEGIN
              UnitOld := OldEstLineRec."Unit of Measure";
              UnitNew := NewEstLineRec."Unit of Measure";
              NewEstLineRec."Unit of Measure" := UnitOld;
              OldEstLineRec."Unit of Measure" := UnitNew;
              EstLineRec.CheckItemUnitConversion(NewEstLineRec, OldEstLineRec);
              EstLineRec."Unit of Measure" := UnitOld;
              EstLineRec."Material Price":= NewEstLineRec."Material Price";
              EstLineRec."Gross Price":= NewEstLineRec."Gross Price";
            END;
            //db.en: 01-07-04
            IF PriceMethod = PriceMethod::"Actualise GP + Fix DP + Calculate NP" THEN BEGIN
              EstLineRec."Discount %" := OldDiscPerc;
              EstLineRec.CalculateNettPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Actualise DP + Calculate NP" THEN BEGIN
              EstLineRec."Gross Price" := OldGrossPrice;
              EstLineRec.CalculateNettPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Calculate DP + Actualise NP" THEN BEGIN
              EstLineRec."Gross Price" := OldGrossPrice;
              EstLineRec.CalculateDiscount;
            END;
            IF PriceMethod = PriceMethod::"Calculate GP + Fix DP + Actualise NP" THEN BEGIN
              EstLineRec."Discount %" := OldDiscPerc;
              EstLineRec.CalculateGrossPrice;
            END;
          END;
          IF ActPlantPrice = TRUE THEN
            EstLineRec.DeterminePlantPrice;

          IF (ActDesc) AND (EstLineRec."Plant Type" <> '') AND
             (PlantTypeRec.READPERMISSION ) THEN
          BEGIN
            PlantTypeRec.GET(EstLineRec."Plant Type");
            EstLineRec.Description := PlantTypeRec.Description;
          END;

          IF ActCostObject = FALSE THEN BEGIN
            EstLineRec."Cost Object Labor" := OldCostObjectLabor;
            EstLineRec."Cost Object Material" := OldCostObjectItem;
            EstLineRec."Cost Component" := OldCostComponent;
          END;
          IF ActDesc = FALSE THEN
            EstLineRec.Description := OldDesc;
          EstLineRec.CalculateTotals;
          IF FORMAT(EstLineRec) <> FORMAT(EstimateLineOriginal) THEN BEGIN //call 30195
            TmpEstLineRec := EstLineRec;
            TmpEstLineRec.INSERT;
          END; //call 30195
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          RecipeLineOriginal := RcpLineRec; //call 30195
          CheckEstFixed(RcpLineRec."Estimate No.");

          OldCostObjectLabor := RcpLineRec."Cost Object Labor";
          OldCostObjectItem := RcpLineRec."Cost Object Material";
          OldDesc := RcpLineRec.Description;
          OldCostComponent := RcpLineRec."Cost Component";  //db, 26-10-10: M23434
          OldGrossPrice := RcpLineRec."Gross Price";
          OldDiscPerc := RcpLineRec."Discount %";

          //db.sn, 01-08-05
          IF RcpLineRec."Recipe (Child)" <> '' THEN BEGIN
            RcpRec.GET(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)");
            RcpRec.CALCFIELDS(Hours, "Material Amount (Nett)", "Subcontracting Amount", "Plant Amount");
            IF ActNorm = TRUE THEN
              RcpLineRec.Norm := RcpRec.Hours;
            IF ActPrice = TRUE THEN BEGIN
              RcpLineRec."Material Price" := RcpRec."Material Amount (Nett)";
              RcpLineRec."Subcontracting Price" := RcpRec."Subcontracting Amount";
              RcpLineRec."Plant Price" := RcpRec."Plant Amount";
            END;
          END;
          //db.en, 01-08-05

          IF ActNorm = TRUE THEN BEGIN
            IF ActSubOper = TRUE THEN
              SubOperNew := CheckSubOperation(RcpLineRec.Manufacturer, RcpLineRec."Vendor (Trade Item)",
                RcpLineRec."Item No.", RcpLineRec."Basic Item", RcpLineRec."Trade Item");
            IF SubOperNew <> '' THEN
              RcpLineRec.VALIDATE("Sub Operation Code", SubOperNew)
            ELSE
              RcpLineRec.VALIDATE("Sub Operation Code");
            IF RcpLineRec."Sub Operation Code" <> '' THEN BEGIN  //db, 08-06-15: C020235
              IF SubOperRec.GET(RcpLineRec."Sub Operation Code") THEN BEGIN
                RcpLineRec.Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(RcpLineRec.Description));
                IF OperRec.GET(SubOperRec.Operation) THEN
                  IF OperRec."Cost Object" <> '' THEN
                    RcpLineRec."Cost Object Labor" := OperRec."Cost Object";
               END;
            END;
          END;
          IF ActPrice = TRUE THEN BEGIN
            OldRcpLineRec := RcpLineRec;  //db.n: 01-07-04
            IF RcpLineRec."Trade Item" <> '' THEN
              RcpLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, FALSE)
            ELSE
              IF RcpLineRec."Basic Item" <> '' THEN
                RcpLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, FALSE)
              ELSE
                IF RcpLineRec."Item No." <> '' THEN
                  RcpLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, FALSE);

            //db.sn: 01-07-04
            NewRcpLineRec := RcpLineRec;
            IF NewRcpLineRec."Unit of Measure" <> OldRcpLineRec."Unit of Measure" THEN BEGIN
              UnitOld := OldRcpLineRec."Unit of Measure";
              UnitNew := NewRcpLineRec."Unit of Measure";
              NewRcpLineRec."Unit of Measure" := UnitOld;
              OldRcpLineRec."Unit of Measure" := UnitNew;
              RcpLineRec.CheckItemUnitConversion(NewRcpLineRec, OldRcpLineRec);
              RcpLineRec."Unit of Measure" := UnitOld;
              RcpLineRec."Material Price":= NewRcpLineRec."Material Price";
              RcpLineRec."Gross Price":= NewRcpLineRec."Gross Price";
            END;
            //db.en: 01-07-04

            IF PriceMethod = PriceMethod::"Actualise GP + Fix DP + Calculate NP" THEN BEGIN
              RcpLineRec."Discount %" := OldDiscPerc;
              RcpLineRec.CalculateNettPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Actualise DP + Calculate NP" THEN BEGIN
              RcpLineRec."Gross Price" := OldGrossPrice;
              RcpLineRec.CalculateNettPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Calculate DP + Actualise NP" THEN BEGIN
              RcpLineRec."Gross Price" := OldGrossPrice;
              RcpLineRec.CalculateDiscount;
            END;
            IF PriceMethod = PriceMethod::"Calculate GP + Fix DP + Actualise NP" THEN BEGIN
              RcpLineRec."Discount %" := OldDiscPerc;
              RcpLineRec.CalculateGrossPrice;
            END;
          END;
          IF ActPrice = TRUE THEN
            RcpLineRec.DeterminePlantPrice;

          IF (ActDesc) AND (RcpLineRec."Plant Type" <> '') AND
             (PlantTypeRec.READPERMISSION ) THEN
          BEGIN
            PlantTypeRec.GET(RcpLineRec."Plant Type");
            RcpLineRec.Description := PlantTypeRec.Description;
          END;

          IF ActCostObject = FALSE THEN BEGIN
            RcpLineRec."Cost Object Labor" := OldCostObjectLabor;
            RcpLineRec."Cost Object Material" := OldCostObjectItem;
            RcpLineRec."Cost Component" := OldCostComponent;
          END;
          IF ActDesc = FALSE THEN
            RcpLineRec.Description := OldDesc;

          RcpLineRec.CalculateTotals;
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: moved to UpdateFromTmp because of lock
          TmpRcpLineRec := RcpLineRec;
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdatePriceWithPercentage@1210190003(VAR lvEstLineRec@1100485000 : Record 11012154;PercNorm@1210190011 : Decimal;PercItemNP@1210190010 : Decimal;PercItemGP@1210190000 : Decimal;PercSubc@1210190009 : Decimal;PercEqmt@1210190008 : Decimal;UseLock@1210190002 : Boolean);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");
          IF PercNorm <> 0 THEN
            EstLineRec.Norm := ROUND(EstLineRec.Norm * (100+PercNorm)/100, 0.00001);
          //db.sn, 07-07-11: M21918
          IF PercItemGP <> 0 THEN BEGIN
            EstLineRec."Gross Price" := ROUND(EstLineRec."Gross Price" * (100+PercItemGP)/100, 0.00001);
            IF EstLineRec."Discount %" = 0 THEN BEGIN
              EstLineRec."Material Price" := EstLineRec."Gross Price";
            END ELSE BEGIN
              EstLineRec."Material Price" :=
                ROUND(EstLineRec."Gross Price" - ((EstLineRec."Gross Price"/100) * EstLineRec."Discount %"), 0.00001);
            END;
          END;
          IF PercItemNP <> 0 THEN BEGIN
            EstLineRec."Material Price" := ROUND(EstLineRec."Material Price" * (100+PercItemNP)/100, 0.00001);
            IF EstLineRec."Discount %" = 0 THEN BEGIN
              EstLineRec."Gross Price":= EstLineRec."Material Price";
            END ELSE BEGIN
              IF EstLineRec."Gross Price" <> 0 THEN
                EstLineRec."Discount %" :=
                  ROUND(100 * (EstLineRec."Gross Price" - EstLineRec."Material Price")/(EstLineRec."Gross Price"), 0.00001);
            END;
          END;
          //db.en, 07-07-11: M21918
          IF PercSubc <> 0 THEN
            EstLineRec."Subcontracting Price" := ROUND(EstLineRec."Subcontracting Price" * (100+PercSubc)/100, 0.00001);
          IF PercEqmt <> 0 THEN
            EstLineRec."Plant Price" := ROUND(EstLineRec."Plant Price" * (100+PercEqmt)/100, 0.00001);
          EstLineRec.CalculateTotals;
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          CheckEstFixed(RcpLineRec."Estimate No.");

          IF PercNorm <> 0 THEN
            RcpLineRec.Norm := ROUND(RcpLineRec.Norm * (100+PercNorm)/100, 0.00001);
          //db.sn, 07-07-11: M21918
          IF PercItemGP <> 0 THEN BEGIN
            RcpLineRec."Gross Price" := ROUND(RcpLineRec."Gross Price" * (100+PercItemGP)/100, 0.00001);
            IF RcpLineRec."Gross Price" <> 0 THEN
              RcpLineRec."Discount %" :=
                ROUND(((RcpLineRec."Gross Price" - RcpLineRec."Material Price") / RcpLineRec."Gross Price") * 100, 0.00001);
          END;
          IF PercItemNP <> 0 THEN BEGIN
            RcpLineRec."Material Price" := ROUND(RcpLineRec."Material Price" * (100+PercItemNP)/100, 0.00001);
            IF RcpLineRec."Discount %" = 0 THEN BEGIN
              RcpLineRec."Gross Price":= RcpLineRec."Material Price";
            END ELSE BEGIN
              IF RcpLineRec."Gross Price" <> 0 THEN
                RcpLineRec."Discount %" :=
                  ROUND(100 * (RcpLineRec."Gross Price" - RcpLineRec."Material Price")/(RcpLineRec."Gross Price"), 0.00001);
            END;
          END;
          //db.en, 07-07-11: M21918
          IF PercSubc <> 0 THEN
            RcpLineRec."Subcontracting Price" := ROUND(RcpLineRec."Subcontracting Price" * (100+PercSubc)/100, 0.00001);
          IF PercEqmt <> 0 THEN
            RcpLineRec."Plant Price" := ROUND(RcpLineRec."Plant Price" * (100+PercEqmt)/100, 0.00001);
          RcpLineRec.CalculateTotals;
      //  RcpLineRec.CheckRecipeCharge;   //db, 16-06-03: move to UpdateFromTmp because of lock
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateRecipe@1100409002(VAR lvEstLineRec@1100409001 : Record 11012154;RecipeMethod@1100409002 : ' ,Update,Replace');
    VAR
      RecipeRec@1100409000 : Record 11012155;
    BEGIN
      //db, 18-01-13: DP00258
      EstLineRec.COPY(lvEstLineRec);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.GETFILTER("Recipe Group") = '' THEN
        EstLineRec.SETFILTER("Recipe Group", '<>%1', '');
      IF EstLineRec.GETFILTER(Recipe) = '' THEN
        EstLineRec.SETFILTER(Recipe, '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");
          IF RecipeRec.GET(EstLineRec."Recipe Group", EstLineRec.Recipe) THEN  //db, 01-08-13: C004367
            UpdateEstimateRecipe(EstLineRec, RecipeMethod, EstLineRec."Recipe Group", EstLineRec.Recipe);
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateEstimateRecipe@1100409003(EstLineRec@1100409001 : Record 11012154;RecipeMethod@1100409000 : ' ,Update,Replace';RecipeGroup@1100409002 : Code[20];RecipeCode@1100409003 : Code[20]);
    VAR
      RcpLineRec@1100409011 : Record 11012156;
      EstRcpLineRec@1100409010 : Record 11012156;
      EstRcpLineRec2@1100409009 : Record 11012156;
      EstRcpLineRec3@1100409008 : Record 11012156;
      LastLino@1100409004 : Integer;
    BEGIN
      //db, 18-01-13: DP00258
      IF RecipeMethod = RecipeMethod::Replace THEN BEGIN
        EstLineRec.Recipe := '';
        EstLineRec.VALIDATE(Recipe, RecipeCode);
        EstLineRec.MODIFY;
      END ELSE BEGIN
        RcpLineRec.SETFILTER("Estimate No.", '%1', '');
        RcpLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
        RcpLineRec.SETFILTER("Part Group", '%1', '');
        RcpLineRec.SETFILTER(Part, '%1', '');
        RcpLineRec.SETRANGE("Estimate Line", 0);
        RcpLineRec.SETRANGE("Recipe Group", RecipeGroup);
        RcpLineRec.SETRANGE(Recipe, RecipeCode);
        IF RcpLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            EstRcpLineRec.RESET;  //db, 19-08-10: M22220
            EstRcpLineRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
            EstRcpLineRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
            EstRcpLineRec.SETRANGE("Part Group", EstLineRec."Part Group");
            EstRcpLineRec.SETRANGE(Part, EstLineRec.Part);
            EstRcpLineRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
            //db.sn, 19-08-10: M22220
            IF RcpLineRec."Trade Item" <> '' THEN BEGIN
              EstRcpLineRec.SETRANGE("Vendor (Trade Item)", RcpLineRec."Vendor (Trade Item)");
              EstRcpLineRec.SETRANGE("Trade Item", RcpLineRec."Trade Item");
            END ELSE BEGIN
              IF RcpLineRec."Basic Item" <> '' THEN BEGIN
                EstRcpLineRec.SETRANGE(Manufacturer, RcpLineRec.Manufacturer);
                EstRcpLineRec.SETRANGE("Basic Item", RcpLineRec."Basic Item");
                EstRcpLineRec.SETFILTER("Vendor (Trade Item)", '%1', '');
                EstRcpLineRec.SETFILTER("Trade Item", '%1', '');
              END ELSE BEGIN
                IF RcpLineRec."Item No." <> '' THEN BEGIN
                  EstRcpLineRec.SETRANGE("Item No.", RcpLineRec."Item No.");
                END ELSE BEGIN
                  EstRcpLineRec.SETRANGE(Description, RcpLineRec.Description);
                END;
              END;
            END;
            //db.en, 19-08-10: M22220
            IF EstRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                EstRcpLineRec.Description := RcpLineRec.Description;  //db, 19-08-10: M22220
                IF (EstRcpLineRec."Recipe Header" = TRUE) THEN BEGIN
                  //db.sn, 21-01-14: C012356 (repair bug)
                  EstRcpLineRec.Norm := 0;
                  EstRcpLineRec."Material Price" := 0;
                  EstRcpLineRec."Gross Price" := 0;
                  EstRcpLineRec."Subcontracting Price" := 0;
                  EstRcpLineRec."Plant Price" := 0;
                  EstRcpLineRec."Discount %" := 0;
                  EstRcpLineRec."Surcharge %" := 0;
                  EstRcpLineRec."Norm Group" := '';
                  EstRcpLineRec."Sub Operation Code" := '';
                  EstRcpLineRec."Cost Object Labor" := '';
                  EstRcpLineRec."Cost Object Material" := '';
                  EstRcpLineRec."Cost Object Subcontracting" := '';
                  EstRcpLineRec."Cost Object Plant" := '';
                  EstRcpLineRec."Cost Component" := '';
                  //db.en, 21-01-14: C012356 (repair bug)
                END ELSE BEGIN
                  IF (EstRcpLineRec."Recipe (Child)" = RcpLineRec."Recipe (Child)") THEN BEGIN  //db, 21-01-14: C012356
                    EstRcpLineRec.Norm := RcpLineRec.Norm;
                    EstRcpLineRec."Material Price" := RcpLineRec."Material Price";
                    EstRcpLineRec."Gross Price" := RcpLineRec."Gross Price";
                    EstRcpLineRec."Subcontracting Price" := RcpLineRec."Subcontracting Price";
                    EstRcpLineRec."Plant Price" := RcpLineRec."Plant Price";
                    EstRcpLineRec."Discount %" := RcpLineRec."Discount %";
                    EstRcpLineRec."Surcharge %" := RcpLineRec."Surcharge %";
                    EstRcpLineRec."Norm Group" := RcpLineRec."Norm Group";
                    EstRcpLineRec."Sub Operation Code" := RcpLineRec."Sub Operation Code";
                    EstRcpLineRec."Cost Object Labor" := RcpLineRec."Cost Object Labor";
                    EstRcpLineRec."Cost Object Material" := RcpLineRec."Cost Object Material";
                    EstRcpLineRec."Cost Object Subcontracting" := RcpLineRec."Cost Object Subcontracting";
                    EstRcpLineRec."Cost Object Plant" := RcpLineRec."Cost Object Plant";
                    EstRcpLineRec."Cost Component" := RcpLineRec."Cost Component";
                  END;
                END;
                EstRcpLineRec.CalculateTotals;
                EstRcpLineRec.MODIFY;
                EstRcpLineRec.UpdateEstLines;
              UNTIL EstRcpLineRec.NEXT = 0;
            END ELSE BEGIN
              //db.sn, 19-08-10: M22220
              //EstRcpLineRec2.COPY(EstRcpLineRec);
              //EstRcpLineRec2.SETRANGE(Description);
              EstRcpLineRec2.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
              EstRcpLineRec2.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
              EstRcpLineRec2.SETRANGE("Part Group", EstLineRec."Part Group");
              EstRcpLineRec2.SETRANGE(Part, EstLineRec.Part);
              EstRcpLineRec2.SETRANGE("Estimate Line", EstLineRec."Line No.");
              //db.en, 19-08-10: M22220
              IF EstRcpLineRec2.FINDLAST THEN
                LastLino := EstRcpLineRec2."Line No."
              ELSE
                LastLino := 0;

              EstRcpLineRec2 := RcpLineRec;
              EstRcpLineRec2."Estimate No." := EstLineRec."Estimate No.";
              EstRcpLineRec2."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
              EstRcpLineRec2."Part Group" := EstLineRec."Part Group";
              EstRcpLineRec2.Part := EstLineRec.Part;
              EstRcpLineRec2."Estimate Line" := EstLineRec."Line No.";
              EstRcpLineRec2."Line No." := LastLino + 10000;
              LastLino := EstRcpLineRec2."Line No.";
              EstRcpLineRec2.Quantity := 0;
              EstRcpLineRec2.CalculateTotals;
              EstRcpLineRec2.INSERT;
            END;
          UNTIL RcpLineRec.NEXT = 0;
        END;
        EstRcpLineRec3.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
        EstRcpLineRec3.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
        EstRcpLineRec3.SETRANGE("Part Group", EstLineRec."Part Group");
        EstRcpLineRec3.SETRANGE(Part, EstLineRec.Part);
        EstRcpLineRec3.SETRANGE("Estimate Line", EstLineRec."Line No.");
        EstRcpLineRec3.SETFILTER("Recipe (Child)", '<>%1', '');
        IF EstRcpLineRec3.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            EstRcpLineRec3.VALIDATE("Recipe (Child)");
            EstRcpLineRec3.MODIFY;
            EstRcpLineRec3.UpdateEstLines;
          UNTIL EstRcpLineRec3.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateCode@1210190016(CurrEst@1210190001 : Code[20];CurrSubEst@1210190000 : Code[20];CurrPart@1210190003 : Code[20];CurrCode@1210190002 : Code[20];UseLock@1210190004 : Boolean);
    BEGIN
      ClearTmpTables;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      EstLineRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        EstLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        EstLineRec.SETFILTER(Part, CurrPart);
      EstLineRec.SETFILTER(Recipe, '%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          EstLineRec.Code := GetCode(FALSE);
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      RcpLineRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        RcpLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        RcpLineRec.SETFILTER(Part, CurrPart);
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          RcpLineRec.Code := GetCode(TRUE);
          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      UpdateFromTmp;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateTotals@1100485000(CurrEst@1210190001 : Code[20];CurrSubEst@1210190000 : Code[20];CurrPart@1210190003 : Code[20];UseDialog@1210190004 : Boolean);
    VAR
      lvSubEstRec@1100485000 : Record 11012152;
      EstimateLineOriginal@1210190002 : Record 11012154;
      RecipeLineOriginal@1210190005 : Record 11012156;
      EstimateLine@1100409001 : Record 11012154;
      RecipeLine@1100409000 : Record 11012156;
    BEGIN
      gvUseDialog := UseDialog;  //db, 13-02-12: M33098

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      lvSubEstRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        lvSubEstRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF lvSubEstRec.FINDSET THEN BEGIN
        //take care: this function uses same dialog-window and tmp-tables
        REPEAT
          //update Cumulative Adjustment Factors:
          ResetAdjustmentFactor(lvSubEstRec."Estimate No.", lvSubEstRec."Sub-Estimate No.", '', '', 0,
            UseDialog, 1, 0);  //db, 13-02-12: M33098
        UNTIL lvSubEstRec.NEXT = 0;
      END;

      ClearTmpTables;
      IF UseDialog THEN BEGIN  //db, 13-02-12: M33098
        Status.OPEN(Text011);
        Status.UPDATE(1, lvSubEstRec.TABLECAPTION);
      END;

      lvSubEstRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        lvSubEstRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF lvSubEstRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := lvSubEstRec.COUNT;
        REPEAT
          //update Cumulative Frequency; skip calculate estimate lines
          lvSubEstRec.ProcessFrequency(lvSubEstRec."Estimate No.", lvSubEstRec."Sub-Estimate No.", FALSE);
          currec := currec + 1;
          IF UseDialog THEN  //db, 13-02-12: M33098
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL lvSubEstRec.NEXT = 0;
      END;

      IF UseDialog THEN  //db, 13-02-12: M33098
        Status.UPDATE(1,Text012);

      EstLineRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        EstLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        EstLineRec.SETFILTER(Part, CurrPart);
      EstLineRec.SETFILTER(Recipe, '%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          EstimateLineOriginal := EstLineRec; //call 30195
          IF EstLineRec."Rate Code" <> '' THEN BEGIN
            EstRateRec.GET(EstLineRec."Estimate No.", EstLineRec."Rate Code");
            EstLineRec.Rate := EstRateRec."Cost Rate";
            EstLineRec."Rate Type" := EstRateRec."Rate Type";
            EstLineRec."Team Size" := EstRateRec."Team Size";
          END;

          //includes update Part Quantity and functions UpdateRecipeTotals, CalculateTotals:
          EstLineRec.VALIDATE(Quantity);
          IF FORMAT(EstLineRec) <> FORMAT(EstimateLineOriginal) THEN BEGIN //call 30195
            TmpEstLineRec := EstLineRec;
            TmpEstLineRec.INSERT;
          END;
          currec := currec + 1;
          IF UseDialog THEN  //db, 13-02-12: M33098
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      IF UseDialog THEN  //db, 13-02-12: M33098
        Status.UPDATE(1,Text013);

      RcpLineRec.SETRANGE("Estimate No.", CurrEst);
      IF CurrSubEst <> '' THEN
        RcpLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
      IF CurrPart <> '' THEN
        RcpLineRec.SETFILTER(Part, CurrPart);
      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          RecipeLineOriginal := RcpLineRec; //call 30195
          IF RcpLineRec."Rate Code" <> '' THEN BEGIN
            EstRateRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Rate Code");
            RcpLineRec.Rate := EstRateRec."Cost Rate";
            RcpLineRec."Rate Type" := EstRateRec."Rate Type";
            RcpLineRec."Team Size" := EstRateRec."Team Size";
          END;
          RcpLineRec.VALIDATE(Quantity);
          IF FORMAT(RcpLineRec) <> FORMAT(RecipeLineOriginal) THEN BEGIN //call 30195
            TmpRcpLineRec := RcpLineRec;
            TmpRcpLineRec.INSERT;
          END;
          currec := currec + 1;
          IF UseDialog THEN  //db, 13-02-12: M33098
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      //db.sn, 22-01-13: C005089
      //- missing check diff EstLine-RcpLine, due to check on recordchange by format
      //- add at least 1 line for each recipe in Tmp-file to activate function CheckUpdateTotal
      EstimateLine.COPY(EstLineRec);
      EstimateLine.SETFILTER(Recipe, '<>%1', '');
      IF EstimateLine.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstimateLine.COUNT;
        REPEAT
          TmpRcpLineRec.SETRANGE("Estimate No.", EstimateLine."Estimate No.");
          TmpRcpLineRec.SETRANGE("Sub-Estimate No.", EstimateLine."Sub-Estimate No.");
          TmpRcpLineRec.SETRANGE("Part Group", EstimateLine."Part Group");
          TmpRcpLineRec.SETRANGE(Part, EstimateLine.Part);
          TmpRcpLineRec.SETRANGE("Estimate Line", EstimateLine."Line No.");
          IF NOT TmpRcpLineRec.FINDFIRST THEN BEGIN
            RecipeLine.COPY(TmpRcpLineRec);
            IF RecipeLine.FINDFIRST THEN BEGIN
              TmpRcpLineRec := RecipeLine;
              TmpRcpLineRec.INSERT;
            END;
          END;
          currec := currec + 1;
          IF UseDialog THEN
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstimateLine.NEXT = 0;
      END;
      TmpRcpLineRec.RESET;  //db, 30-10-14: C015798
      //db.en, 22-01-13: C005089

      UpdateFromTmp;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      IF UseDialog THEN  //db, 13-02-12: M33098
        Status.CLOSE;
    END;

    PROCEDURE UpdateDiscountWithPercentage@1100485004(VAR lvEstLineRec@1100485001 : Record 11012154;PercDiscount@1210190011 : Decimal;DiscMethod@1100485000 : 'Replace,Add,Increase';UseLock@1100485002 : Boolean);
    VAR
      lvPerc@1100525000 : Decimal;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);
      CheckEstFilters(EstLineRec, RcpLineRec);

      ClearTmpTables;

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          IF EstLineRec."Gross Price" <> 0 THEN BEGIN
            CheckEstFixed(EstLineRec."Estimate No.");
            CASE DiscMethod OF
              DiscMethod::Replace:
                lvPerc := PercDiscount;
              DiscMethod::Add:
                lvPerc := EstLineRec."Discount %" + PercDiscount;
              DiscMethod::Increase:
                lvPerc := EstLineRec."Discount %" * (100+PercDiscount)/100;
            END;
            IF lvPerc < 0 THEN lvPerc := 0;
            IF lvPerc > 100 THEN lvPerc := 100;
            EstLineRec.VALIDATE("Discount %", lvPerc);
          END;

          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text013);

      IF RcpLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := RcpLineRec.COUNT;
        REPEAT
          IF RcpLineRec."Gross Price" <> 0 THEN BEGIN
            CheckEstFixed(RcpLineRec."Estimate No.");
            CASE DiscMethod OF
              DiscMethod::Replace:
                lvPerc := PercDiscount;
              DiscMethod::Add:
                lvPerc := RcpLineRec."Discount %" + PercDiscount;
              DiscMethod::Increase:
                lvPerc := RcpLineRec."Discount %" * (100+PercDiscount)/100;
            END;
            IF lvPerc < 0 THEN lvPerc := 0;
            IF lvPerc > 100 THEN lvPerc := 100;
            RcpLineRec.VALIDATE("Discount %", lvPerc);
          END;

          TmpRcpLineRec.COPY(RcpLineRec);
          TmpRcpLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE DetermineRemovalContribution@1100485002(lvAction@1100485014 : Integer;CurrEst@1100485011 : Code[20];CurrSubEst@1100485008 : Code[20];CurrPartGrp@1100485007 : Code[20];CurrPart@1100485006 : Code[20];CurrRcpGrp@1100485013 : Code[20];CurrRcp@1100485012 : Code[20]);
    VAR
      lvEstLineRec@1100485003 : Record 11012154;
      lvEstLineRec2@1100485002 : Record 11012154;
      lvRcpLineRec@1100485009 : Record 11012156;
      lvRcpLineRec2@1100485010 : Record 11012156;
      lvItemRec@1100485001 : Record 27;
      lvTradeItemRec@1100485000 : Record 11012317;
      lvCostObject@1100485004 : Code[20];
      lvRemovalContribution@1100485005 : Decimal;
    BEGIN
      IF (lvAction = 0) OR (lvAction = 1) THEN BEGIN
        lvEstLineRec.SETRANGE("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          lvEstLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          lvEstLineRec.SETFILTER("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          lvEstLineRec.SETFILTER(Part, CurrPart);
        lvEstLineRec.SETFILTER(Recipe, '%1', '');
        lvEstLineRec.SETRANGE("Removal Contribution", TRUE);
        lvEstLineRec.DELETEALL(TRUE);

        lvEstLineRec.SETRANGE("Removal Contribution");
        IF lvEstLineRec.FINDSET THEN BEGIN
          REPEAT
            lvCostObject := '';
            lvRemovalContribution := 0;

            IF lvEstLineRec."Item No." <> '' THEN BEGIN
              lvItemRec.GET(lvEstLineRec."Item No.");
              lvCostObject := lvItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvItemRec."Removal Contribution";
              IF lvRemovalContribution <> 0 THEN
                lvItemRec.TESTFIELD("Cost Object (Removal)");
            END;

           IF lvEstLineRec."Trade Item" <> '' THEN BEGIN
              lvTradeItemRec.GET(lvEstLineRec."Vendor (Trade Item)", lvEstLineRec."Trade Item");
              lvCostObject := lvTradeItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvTradeItemRec."Removal Contribution";
             IF lvRemovalContribution <> 0 THEN
                lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
            END;

            IF lvRemovalContribution <> 0 THEN BEGIN
              lvEstLineRec2.INIT;
              lvEstLineRec2."Estimate No." := lvEstLineRec."Estimate No.";
              lvEstLineRec2.VALIDATE("Sub-Estimate No.", lvEstLineRec."Sub-Estimate No.");
              lvEstLineRec2."Part Group" := lvEstLineRec."Part Group";
              lvEstLineRec2.VALIDATE(Part, lvEstLineRec.Part);
              lvEstLineRec2."Line No." := lvEstLineRec."Line No.";
              REPEAT
                lvEstLineRec2."Line No." := lvEstLineRec2."Line No." + 1;
              UNTIL lvEstLineRec2.INSERT;

              DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE, '');
              CASE DimValRec."Cost Type" OF
                DimValRec."Cost Type"::Material:
                  BEGIN
                    lvEstLineRec2."Cost Object Material" := lvCostObject;
                    lvEstLineRec2.VALIDATE("Material Price", lvRemovalContribution);
                  END;
                DimValRec."Cost Type"::Subcontracting:
                  BEGIN
                    lvEstLineRec2."Cost Object Subcontracting" := lvCostObject;
                    lvEstLineRec2.VALIDATE("Subcontracting Price", lvRemovalContribution);
                  END;
                DimValRec."Cost Type"::Plant:
                  BEGIN
                    lvEstLineRec2."Cost Object Plant" := lvCostObject;
                    lvEstLineRec2.VALIDATE("Plant Price", lvRemovalContribution);
                  END;
                ELSE
                  ERROR('kostensoort verwijderingbijdrage niet toegestaan');
              END;
              //db.sn, 20-03-14: C013892
              lvEstLineRec2."Time Quantity" := lvEstLineRec."Time Quantity";
              lvEstLineRec2."Unit of Time" := lvEstLineRec."Unit of Time";
              lvEstLineRec2."Line Status" := lvEstLineRec."Line Status";
              lvEstLineRec2."Cost Component" := lvEstLineRec."Cost Component";
              lvEstLineRec2.Discipline := lvEstLineRec.Discipline;
              lvEstLineRec2."Trade Speciality" := lvEstLineRec."Trade Speciality";
              lvEstLineRec2."Trade Expertise" := lvEstLineRec."Trade Expertise";
              //db.en, 20-03-14: C013892
              lvEstLineRec2.Description := DimValRec.Name;
              lvEstLineRec2."Unit of Measure" := DimValRec."Unit of Measure";
              lvEstLineRec2.VALIDATE(Quantity, lvEstLineRec.Quantity);  //incl. calculate total
              lvEstLineRec2."Removal Contribution" := TRUE;
              //lvEstLineRec2."Additional Cost (Service)" := lvEstLineRec."Additional Cost (Service)";
              lvEstLineRec2.MODIFY(TRUE);
            END;
          UNTIL lvEstLineRec.NEXT = 0;
        END;
      END;

      IF (lvAction = 0) OR (lvAction = 2) THEN BEGIN
        IF CurrEst <> '' THEN
          lvRcpLineRec.SETFILTER("Estimate No.", CurrEst)
        ELSE
          lvRcpLineRec.SETFILTER("Estimate No.", '%1', '');
        IF CurrSubEst <> '' THEN
          lvRcpLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
        IF CurrPartGrp <> '' THEN
          lvRcpLineRec.SETFILTER("Part Group", CurrPartGrp);
        IF CurrPart <> '' THEN
          lvRcpLineRec.SETFILTER(Part, CurrPart);
        IF CurrRcpGrp <> '' THEN
          lvRcpLineRec.SETFILTER("Recipe Group", CurrRcpGrp);
        IF CurrRcp <> '' THEN
          lvRcpLineRec.SETFILTER(Recipe, CurrRcp);

        lvRcpLineRec.SETRANGE("Removal Contribution", TRUE);
        lvRcpLineRec.DELETEALL(TRUE);

        lvRcpLineRec.SETRANGE("Removal Contribution");
        IF lvRcpLineRec.FINDSET THEN BEGIN
          REPEAT
            lvCostObject := '';
            lvRemovalContribution := 0;

            IF lvRcpLineRec."Item No." <> '' THEN BEGIN
              lvItemRec.GET(lvRcpLineRec."Item No.");
              lvCostObject := lvItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvItemRec."Removal Contribution";
              IF lvRemovalContribution <> 0 THEN
                lvItemRec.TESTFIELD("Cost Object (Removal)");
            END;

            IF lvRcpLineRec."Trade Item" <> '' THEN BEGIN
              lvTradeItemRec.GET(lvRcpLineRec."Vendor (Trade Item)", lvRcpLineRec."Trade Item");
              lvCostObject := lvTradeItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvTradeItemRec."Removal Contribution";
              IF lvRemovalContribution <> 0 THEN
                lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
            END;

            IF lvRemovalContribution <> 0 THEN BEGIN
              lvRcpLineRec2.INIT;
              lvRcpLineRec2."Estimate No." := lvRcpLineRec."Estimate No.";
              lvRcpLineRec2.VALIDATE("Sub-Estimate No.", lvRcpLineRec."Sub-Estimate No.");
              lvRcpLineRec2."Part Group" := lvRcpLineRec."Part Group";
              lvRcpLineRec2.VALIDATE(Part, lvRcpLineRec.Part);
              lvRcpLineRec2."Estimate Line" := lvRcpLineRec."Estimate Line";
              lvRcpLineRec2."Recipe Group" := lvRcpLineRec."Recipe Group";
              lvRcpLineRec2.Recipe := lvRcpLineRec.Recipe;
              lvRcpLineRec2."Line No." := lvRcpLineRec."Line No.";
              REPEAT
                lvRcpLineRec2."Line No." := lvRcpLineRec2."Line No." + 1;
              UNTIL lvRcpLineRec2.INSERT;

              DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE, '');
              CASE DimValRec."Cost Type" OF
                DimValRec."Cost Type"::Material:
                  BEGIN
                    lvRcpLineRec2."Cost Object Material" := lvCostObject;
                    lvRcpLineRec2.VALIDATE("Material Price", lvRemovalContribution);
                  END;
                DimValRec."Cost Type"::Subcontracting:
                  BEGIN
                    lvRcpLineRec2."Cost Object Subcontracting" := lvCostObject;
                    lvRcpLineRec2.VALIDATE("Subcontracting Price", lvRemovalContribution);
                  END;
                DimValRec."Cost Type"::Plant:
                  BEGIN
                    lvRcpLineRec2."Cost Object Plant" := lvCostObject;
                    lvRcpLineRec2.VALIDATE("Plant Price", lvRemovalContribution);
                  END;
                ELSE
                  ERROR('kostensoort verwijderingbijdrage niet toegestaan');
              END;
              //db.sn, 20-03-14: C013892
              lvRcpLineRec2."Time Quantity" := lvRcpLineRec."Time Quantity";
              lvRcpLineRec2."Unit of Time" := lvRcpLineRec."Unit of Time";
              lvRcpLineRec2."Line Status" := lvRcpLineRec."Line Status";
              lvRcpLineRec2."Cost Component" := lvRcpLineRec."Cost Component";
              lvRcpLineRec2.Discipline := lvRcpLineRec.Discipline;
              lvRcpLineRec2."Trade Speciality" := lvRcpLineRec."Trade Speciality";
              lvRcpLineRec2."Trade Expertise" := lvRcpLineRec."Trade Expertise";
              //db.en, 20-03-14: C013892
              lvRcpLineRec2.Description := DimValRec.Name;
              lvRcpLineRec2."Unit of Measure" := DimValRec."Unit of Measure";
              lvRcpLineRec2.VALIDATE(Quantity, lvRcpLineRec.Quantity);  //incl. calculate total
              lvRcpLineRec2."Removal Contribution" := TRUE;
              //lvRcpLineRec2."Additional Cost (Service)" := lvRcpLineRec."Additional Cost (Service)";
              lvRcpLineRec2.MODIFY(TRUE);
              IF CurrEst = '' THEN
                lvRcpLineRec2.UpdateRelatedRecipe(lvRcpLineRec2."Recipe Group", lvRcpLineRec2.Recipe)
              ELSE
                lvRcpLineRec2.UpdateEstLines;
            END;
          UNTIL lvRcpLineRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckUpdateTotals@1210190010(lvUpdate@1210190000 : Boolean;RcpLineRec@1210190001 : Record 11012156);
    BEGIN
      IF LastProcLine <> (RcpLineRec."Estimate No." + '~' +
                          RcpLineRec."Sub-Estimate No." + '~' +
                          RcpLineRec."Part Group" + '~' +
                          RcpLineRec.Part + '~' +
                          STRSUBSTNO('%1', RcpLineRec."Estimate Line") ) THEN
        IF LastProcLine <> '' THEN
          lvUpdate := TRUE;

      IF lvUpdate = TRUE THEN BEGIN
        //LastRcpLineRec.CheckRecipeCharge;  //db, 15-06-06: moved to function UpdateFromTmp (18-07-06)
        LastRcpLineRec.UpdateEstLines;
      END;

      LastRcpLineRec.COPY(RcpLineRec);
      LastProcLine := RcpLineRec."Estimate No." + '~' +
                      RcpLineRec."Sub-Estimate No." +'~' +
                      RcpLineRec."Part Group" + '~' +
                      RcpLineRec.Part + '~' +
                      STRSUBSTNO('%1', RcpLineRec."Estimate Line");
    END;

    LOCAL PROCEDURE CheckEmptyParts@1210190007(CurrEst@1210190002 : Code[20];CurrSubEst@1100485001 : Code[20]);
    VAR
      curlvl@1210190000 : Integer;
      lvEstLineRec@1210190001 : Record 11012154;
      lvEstPartRec@1210190003 : Record 11012153;
    BEGIN
      curlvl := 3;
      REPEAT
        EstPartRec.RESET;
        IF CurrEst <> '' THEN
          EstPartRec.SETFILTER("Estimate No.", CurrEst);
        IF CurrSubEst <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", CurrSubEst);
        EstPartRec.SETRANGE(Level, curlvl);
        IF EstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN //call 30195 FALSE FALSE
          currec := 0;
          maxrec := EstPartRec.COUNT;
          REPEAT
            Status.UPDATE(1,EstPartRec.Part);
            currec := currec + 1;
            lvEstPartRec.RESET;
            lvEstPartRec.SETRANGE("Estimate No.", EstPartRec."Estimate No.");
            lvEstPartRec.SETRANGE("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
            lvEstPartRec.SETRANGE("Part Group", EstPartRec."Part Group");
            IF curlvl = 2 THEN
              lvEstPartRec.SETRANGE(Paragraph, EstPartRec.Part);
            IF curlvl = 1 THEN
              lvEstPartRec.SETRANGE(Chapter, EstPartRec.Part);
            lvEstPartRec.SETRANGE(Level, curlvl + 1);
            IF NOT lvEstPartRec.FINDFIRST THEN BEGIN
              lvEstLineRec.SETRANGE("Estimate No.", EstPartRec."Estimate No.");
              lvEstLineRec.SETRANGE("Sub-Estimate No.", EstPartRec."Sub-Estimate No.");
              lvEstLineRec.SETRANGE(Part, EstPartRec.Part);
              lvEstLineRec.SETRANGE("Part Group", EstPartRec."Part Group");
              IF NOT lvEstLineRec.FINDFIRST THEN
                EstPartRec.DELETE;
            END;
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL EstPartRec.NEXT = 0;
        END;
        curlvl := curlvl - 1;
      UNTIL curlvl < 0;
    END;

    PROCEDURE CheckCharge@1210190014(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;ChrgBln@1210190011 : Boolean;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer;Desc@1210190000 : Text[100]);
    VAR
      SkipLine@1210190001 : Boolean;
    BEGIN
      TmpRelationRec."Estimate No." := lvEst;
      TmpRelationRec."Sub-Estimate No." := lvSubEst;
      TmpRelationRec."Part Group" := lvPartGrp;
      TmpRelationRec.Part := lvPart;
      TmpRelationRec."Estimate Line" := lvEstLine;
      TmpRelationRec."Recipe Group" := lvRcpGrp;
      TmpRelationRec.Recipe := lvRcp;
      TmpRelationRec."Line No." := lvRcpLine;
      TmpRelationRec.Description := Desc;
      TmpRelationRec.Quantity := NewLine;
      TmpRelationRec.INSERT;

      IF ChrgBln = FALSE THEN EXIT;

      ChrgRec.RESET;
      ChrgRec.SETRANGE("Estimate No.", lvEst);
      ChrgRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      ChrgRec.SETRANGE("Part Group", lvPartGrp);
      ChrgRec.SETRANGE(Part, lvPart);
      IF lvRcp = '' THEN BEGIN
        ChrgRec.SETRANGE("Recipe Line", 0);
        ChrgRec.SETFILTER("Recipe Group", '%1', '');
        ChrgRec.SETFILTER(Recipe, '%1', '');
        ChrgRec.SETRANGE("Surcharge Line", lvEstLine);
      END ELSE BEGIN
        ChrgRec.SETRANGE("Recipe Line", lvEstLine);
        ChrgRec.SETRANGE("Recipe Group", lvRcpGrp);
        ChrgRec.SETRANGE(Recipe, lvRcp);
        ChrgRec.SETRANGE("Surcharge Line", lvRcpLine);
      END;
      IF ChrgRec.FINDSET THEN BEGIN
        REPEAT
          TmpChrgRec := ChrgRec;
          TmpChrgRec."Estimate No." := NewEst;
          TmpChrgRec."Surcharge Line" := NewLine;
          SkipLine := FALSE;
          IF lvRcp = '' THEN BEGIN
            IF NOT TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, ChrgRec."Basic Line", '', '', 0) THEN
              SkipLine := TRUE
            ELSE
              TmpChrgRec."Basic Line" := TmpRelationRec.Quantity;
          END ELSE BEGIN
            IF NOT TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, lvRcpGrp, lvRcp, ChrgRec."Basic Line") THEN
              SkipLine := TRUE
            ELSE
              TmpChrgRec."Basic Line" := TmpRelationRec.Quantity;
            IF NOT TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, '', '', 0) THEN
              SkipLine := TRUE
            ELSE
              TmpChrgRec."Recipe Line" := TmpRelationRec.Quantity;
          END;
          IF SkipLine = FALSE THEN
            TmpChrgRec.INSERT;
        UNTIL ChrgRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckQuanSheet@1210190013(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanSheetRec.RESET;
      QuanSheetRec.SETRANGE("Estimate No.", lvEst);
      QuanSheetRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanSheetRec.SETRANGE("Part Group", lvPartGrp);
      QuanSheetRec.SETRANGE(Part, lvPart);
      IF lvRcp = '' THEN BEGIN
        QuanSheetRec.SETRANGE("Estimate Line", lvEstLine);
        QuanSheetRec.SETRANGE("Recipe Line", 0);
        QuanSheetRec.SETFILTER("Recipe Group", '%1', '');
        QuanSheetRec.SETFILTER(Recipe, '%1', '');
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Estimate Line", lvEstLine);
        QuanSheetRec.SETRANGE("Recipe Group", lvRcpGrp);
        QuanSheetRec.SETRANGE(Recipe, lvRcp);
        QuanSheetRec.SETRANGE("Recipe Line", lvRcpLine);
      END;
      IF QuanSheetRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanSheetRec := QuanSheetRec;
          TmpQuanSheetRec."Estimate No." := NewEst;
          IF lvRcp = '' THEN BEGIN
            TmpQuanSheetRec."Estimate Line" := NewLine;
          END ELSE BEGIN
            TmpQuanSheetRec."Recipe Line" := NewLine;
            TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, '', '', 0);
            TmpQuanSheetRec."Estimate Line" := TmpRelationRec.Quantity;
          END;
          TmpQuanSheetRec.INSERT;
        UNTIL QuanSheetRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckQuanModel@1210190022(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanModelRec.RESET;
      QuanModelRec.SETRANGE("Estimate No.", lvEst);
      QuanModelRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanModelRec.SETRANGE("Part Group", lvPartGrp);
      QuanModelRec.SETRANGE(Part, lvPart);
      QuanModelRec.SETRANGE("Estimate Line", lvEstLine);
      IF QuanModelRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanModelRec := QuanModelRec;
          TmpQuanModelRec."Estimate No." := NewEst;
          TmpQuanModelRec."Estimate Line" := NewLine;
          TmpQuanModelRec.INSERT;
        UNTIL QuanModelRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckQuanRelation@1100409000(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      //db, 02-10-12: C001465
      QuanRelationRec.RESET;
      QuanRelationRec.SETRANGE("Estimate No.", lvEst);
      QuanRelationRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanRelationRec.SETRANGE("Part Group", lvPartGrp);
      QuanRelationRec.SETRANGE(Part, lvPart);
      QuanRelationRec.SETRANGE("Estimate Line", lvEstLine);
      IF QuanRelationRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanRelationRec := QuanRelationRec;
          TmpQuanRelationRec."Estimate No." := NewEst;
          TmpQuanRelationRec."Estimate Line" := NewLine;
          TmpQuanRelationRec.INSERT;
        UNTIL QuanRelationRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCode@1210190015(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      EstCodeRec.RESET;
      EstCodeRec.SETRANGE("Estimate No.", lvEst);
      EstCodeRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      EstCodeRec.SETRANGE("Part Group", lvPartGrp);
      EstCodeRec.SETRANGE(Part, lvPart);
      IF lvRcp = '' THEN BEGIN
        EstCodeRec.SETRANGE("Estimate Line", lvEstLine);
        EstCodeRec.SETRANGE("Recipe Line", 0);
        EstCodeRec.SETFILTER("Recipe Group", '%1', '');
        EstCodeRec.SETFILTER(Recipe, '%1', '');
      END ELSE BEGIN
        EstCodeRec.SETRANGE("Estimate Line", lvEstLine);
        EstCodeRec.SETRANGE("Recipe Group", lvRcpGrp);
        EstCodeRec.SETRANGE(Recipe, lvRcp);
        EstCodeRec.SETRANGE("Recipe Line", lvRcpLine);
      END;
      IF EstCodeRec.FINDSET THEN BEGIN
        REPEAT
          TmpEstCodeRec := EstCodeRec;
          TmpEstCodeRec."Estimate No." := NewEst;
          IF lvRcp = '' THEN BEGIN
            TmpEstCodeRec."Estimate Line" := NewLine;
          END ELSE BEGIN
            TmpEstCodeRec."Recipe Line" := NewLine;
            TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, '', '', 0);
            TmpEstCodeRec."Estimate Line" := TmpRelationRec.Quantity;
          END;
          TmpEstCodeRec.INSERT;
        UNTIL EstCodeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckText@1100409001(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      //db, 02-10-12: C001465
      TextRec.RESET;
      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETFILTER(Group, '%1', '');
      TextRec.SETFILTER("No.", '%1', '');
      TextRec.SETRANGE("Estimate No.", lvEst);
      TextRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      TextRec.SETRANGE("Part Group", lvPartGrp);
      TextRec.SETRANGE(Part, lvPart);
      TextRec.SETRANGE("Estimate Line No.", lvEstLine);
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TmpTextRec := TextRec;
          TmpTextRec."Estimate No." := NewEst;
          TmpTextRec."Estimate Line No." := NewLine;
          TmpTextRec.INSERT;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckSubOperation@1210190017(lvManufacturer@1210190004 : Code[20];lvVendor@1210190005 : Code[20];lvItem@1210190000 : Code[20];lvBasicItem@1210190001 : Code[20];lvTradeItem@1210190002 : Code[20]) : Code[20];
    VAR
      TradeItemRec@1210190008 : Record 11012317;
      BasicItemRec@1210190007 : Record 11012316;
      ItemRec@1210190006 : Record 27;
    BEGIN
      IF lvTradeItem <> '' THEN BEGIN
        IF NOT TradeItemRec.GET(lvVendor, lvTradeItem) THEN TradeItemRec.INIT;
        IF TradeItemRec."Sub Operation Code" <> '' THEN
          EXIT(TradeItemRec."Sub Operation Code");
      END;

      IF lvBasicItem <> '' THEN BEGIN
        IF NOT BasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BasicItemRec.INIT;
        IF BasicItemRec."Sub Operation Code" <> '' THEN
          EXIT(BasicItemRec."Sub Operation Code");
      END;

      IF lvItem <> '' THEN BEGIN
        IF NOT ItemRec.GET(lvItem) THEN ItemRec.INIT;
        IF ItemRec."Sub Operation Code" <> '' THEN
          EXIT(ItemRec."Sub Operation Code");
      END;

      EXIT('');
    END;

    PROCEDURE CheckBackSlash@1210190019(lvDesc@1210190004 : Text[100]);
    VAR
      sep@1210190000 : Integer;
      desc1@1210190001 : Text[100];
      desc2@1210190002 : Text[100];
      lvText000@1210190003 : TextConst 'ENU=Part %1 of Description exceeds 50 characters: \%2';
    BEGIN
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
        IF STRLEN(desc1) > 50 THEN ERROR(lvText000, '1', desc1);
        IF STRLEN(desc2) > 50 THEN ERROR(lvText000, '2', desc2);
      END;
    END;

    PROCEDURE GetCode@1210190018(RcpBln@1210190000 : Boolean) : Code[20];
    BEGIN
      EstCodeRec.RESET;
      EstPartRec.RESET;
      SubEstRec.RESET;

      IF RcpBln = FALSE THEN BEGIN
        EstCodeRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
        EstCodeRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
        EstCodeRec.SETRANGE("Part Group", EstLineRec."Part Group");
        EstCodeRec.SETRANGE(Part, EstLineRec.Part);
        EstCodeRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
        EstCodeRec.SETRANGE("Coding System", EstRec."Coding System");

        EstPartRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
                       EstLineRec."Part Group", EstLineRec.Part);

        SubEstRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.");
      END ELSE BEGIN
        EstCodeRec.SETRANGE("Estimate No.", RcpLineRec."Estimate No.");
        EstCodeRec.SETRANGE("Sub-Estimate No.", RcpLineRec."Sub-Estimate No.");
        EstCodeRec.SETRANGE("Part Group", RcpLineRec."Part Group");
        EstCodeRec.SETRANGE(Part, RcpLineRec.Part);
        EstCodeRec.SETRANGE("Estimate Line", RcpLineRec."Estimate Line");
        EstCodeRec.SETRANGE("Recipe Group", RcpLineRec."Recipe Group");
        EstCodeRec.SETRANGE(Recipe, EstLineRec.Recipe);
        EstCodeRec.SETRANGE("Recipe Line", RcpLineRec."Line No.");
        EstCodeRec.SETRANGE("Coding System", EstRec."Coding System");

        EstPartRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                       RcpLineRec."Part Group", RcpLineRec.Part);

        SubEstRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.");
      END;

      IF EstCodeRec.FINDFIRST THEN
        EXIT(EstCodeRec.Code);

      IF EstPartRec.Code <> '' THEN
        EXIT(EstPartRec.Code);

      IF SubEstRec.Code <> '' THEN
        EXIT(SubEstRec.Code);

      EXIT(EstRec.Code);
    END;

    LOCAL PROCEDURE UpdateFromTmp@1210190005();
    VAR
      TmpSubEstimatePart@1100525000 : TEMPORARY Record 11012153;
    BEGIN
      IF gvUseDialog THEN  //db, 13-02-12: M33098
        Status.UPDATE(1,Text012);
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstLineRec.COUNT;
        REPEAT
          EstLineRec.COPY(TmpEstLineRec);
          //mg.sc, 04-10-10: M23201
          IF EstLineRec."Removal Contribution" THEN BEGIN
            IF NOT TmpSubEstimatePart.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.", EstLineRec."Part Group",
              EstLineRec.Part) THEN BEGIN
              TmpSubEstimatePart.INIT;
              TmpSubEstimatePart."Estimate No." := EstLineRec."Estimate No.";
              TmpSubEstimatePart."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
              TmpSubEstimatePart."Part Group" := EstLineRec."Part Group";
              TmpSubEstimatePart.Part := EstLineRec.Part;
              TmpSubEstimatePart.INSERT;
            END;
          END ELSE
          //call 30195.sn
          BEGIN
            EstLineRec.FIND;
            IF FORMAT(EstLineRec) <> FORMAT(TmpEstLineRec) THEN BEGIN
              EstLineRec := TmpEstLineRec;
          //call 30195.en
              EstLineRec.MODIFY;
          //call 30195.sn
            END;
          END;
          //call 30195.en
          //mg.ec, 04-10-10: M23201
          IF EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" " THEN
            EstLineRec.CheckEstimateCharge;  //db, 27-10-03: force update surcharge line.
          currec := currec + 1;
          IF gvUseDialog THEN  //db, 13-02-12: M33098
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      IF gvUseDialog THEN  //db, 13-02-12: M33098
        Status.UPDATE(1,Text013);
      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpRcpLineRec.COUNT;
        LastProcLine := '';
        REPEAT
          RcpLineRec.COPY(TmpRcpLineRec);
          //mg.sc, 04-10-10: M23201
          IF RcpLineRec."Removal Contribution" = TRUE THEN
            DetermineRemovalContribution(2, RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
              RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Recipe Group", RcpLineRec.Recipe)
          ELSE
          //call 30195.sn
          BEGIN
            RcpLineRec.FIND;
            IF FORMAT(RcpLineRec) <> FORMAT(TmpRcpLineRec) THEN BEGIN
              RcpLineRec := TmpRcpLineRec;
          //call 30195.en
              RcpLineRec.MODIFY;
          //call 30195.sn
            END;
          END;
          //call 30195.en
          //mg.ec, 04-10-10: M23201

          IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
            RcpLineRec.CheckRecipeCharge;        //db, 15-06-06: force update surcharge line
          CheckUpdateTotals(FALSE, RcpLineRec);  //db, 18-07-06: restore update recipe totals
          currec := currec + 1;
          IF gvUseDialog THEN  //db, 13-02-12: M33098
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpRcpLineRec.NEXT = 0;
        CheckUpdateTotals(TRUE, RcpLineRec);     //db, 18-07-06: restore update recipe totals
      END;

      //mg.sn, 04-10-10: M23201
      IF TmpSubEstimatePart.FINDSET THEN
        REPEAT
          DetermineRemovalContribution(1, TmpSubEstimatePart."Estimate No.", TmpSubEstimatePart."Sub-Estimate No.",
            TmpSubEstimatePart."Part Group", TmpSubEstimatePart.Part, '', '')
        UNTIL TmpSubEstimatePart.NEXT = 0;
      //mg.en, 04-10-10: M23201

      IF TmpEstRec.FIND('-') THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(TmpEstRec."No.");
          TmpEstRec.DELETE;
        UNTIL TmpEstRec.NEXT = 0;
      END;
    END;

    PROCEDURE ClearTmpTables@1210190009();
    BEGIN
      //db, 02-10-12: C001465
      TmpEstRec.RESET;
      TmpEstRec.DELETEALL;

      TmpEstLineRec.RESET;
      TmpEstLineRec.DELETEALL;

      TmpRcpLineRec.RESET;
      TmpRcpLineRec.DELETEALL;

      TmpEstCodeRec.RESET;
      TmpEstCodeRec.DELETEALL;

      TmpQuanSheetRec.RESET;
      TmpQuanSheetRec.DELETEALL;

      TmpQuanModelRec.RESET;
      TmpQuanModelRec.DELETEALL;

      TmpQuanRelationRec.RESET;
      TmpQuanRelationRec.DELETEALL;

      TmpChrgRec.RESET;
      TmpChrgRec.DELETEALL;

      TmpTextRec.RESET;
      TmpTextRec.DELETEALL;

      TmpRelationRec.RESET;
      TmpRelationRec.DELETEALL;
    END;

    PROCEDURE CheckEstFilters@1100485006(VAR EstLineRec@1100485001 : Record 11012154;VAR RcpLineRec@1100485000 : Record 11012156);
    BEGIN
      //db, 10-08-07
      WITH EstLineRec DO BEGIN
        IF GETFILTER("Estimate No.") <> '' THEN
          RcpLineRec.SETFILTER("Estimate No.", GETFILTER("Estimate No."))
        ELSE
          RcpLineRec.SETFILTER("Estimate No.", '<>%1' , '');
        IF GETFILTER("Sub-Estimate No.") <> '' THEN
          RcpLineRec.SETFILTER("Sub-Estimate No.", GETFILTER("Sub-Estimate No."));
        IF GETFILTER("Part Group") <> '' THEN
          RcpLineRec.SETFILTER("Part Group", GETFILTER("Part Group"));
        IF GETFILTER(Part) <> '' THEN
          RcpLineRec.SETFILTER(Part, GETFILTER(Part));
        IF GETFILTER("Recipe Group") <> '' THEN
          RcpLineRec.SETFILTER("Recipe Group", GETFILTER("Recipe Group"));
        IF GETFILTER(Recipe) <> '' THEN
          RcpLineRec.SETFILTER(Recipe, GETFILTER(Recipe));

        IF GETFILTER("Item No.") <> '' THEN
          RcpLineRec.SETFILTER("Item No.", GETFILTER("Item No."));
        IF GETFILTER(Manufacturer) <> '' THEN
          RcpLineRec.SETFILTER(Manufacturer, GETFILTER(Manufacturer));
        IF GETFILTER("Basic Item") <> '' THEN
          RcpLineRec.SETFILTER("Basic Item", GETFILTER("Basic Item"));
        IF GETFILTER("Vendor (Trade Item)") <> '' THEN
          RcpLineRec.SETFILTER("Vendor (Trade Item)", GETFILTER("Vendor (Trade Item)"));
        IF GETFILTER("Trade Item") <> '' THEN
          RcpLineRec.SETFILTER("Trade Item", GETFILTER("Trade Item"));
        IF GETFILTER("Cost Object Labor") <> '' THEN
          RcpLineRec.SETFILTER("Cost Object Labor", GETFILTER("Cost Object Labor"));
        IF GETFILTER("Cost Object Material") <> '' THEN
          RcpLineRec.SETFILTER("Cost Object Material", GETFILTER("Cost Object Material"));
        IF GETFILTER("Cost Object Subcontracting") <> '' THEN
          RcpLineRec.SETFILTER("Cost Object Subcontracting", GETFILTER("Cost Object Subcontracting"));
        IF GETFILTER("Cost Object Plant") <> '' THEN
          RcpLineRec.SETFILTER("Cost Object Plant", GETFILTER("Cost Object Plant"));
        IF GETFILTER("Cost Component") <> '' THEN
          RcpLineRec.SETFILTER("Cost Component", GETFILTER("Cost Component"));

        IF GETFILTER("Norm Group") <> '' THEN
          RcpLineRec.SETFILTER("Norm Group", GETFILTER("Norm Group"));
        IF GETFILTER("Sub Operation Code") <> '' THEN
          RcpLineRec.SETFILTER("Sub Operation Code", GETFILTER("Sub Operation Code"));
        IF GETFILTER("Rate Code") <> '' THEN
          RcpLineRec.SETFILTER("Rate Code", GETFILTER("Rate Code"));
        IF GETFILTER("Line Status") <> '' THEN
          RcpLineRec.SETFILTER("Line Status", GETFILTER("Line Status"));

        IF GETFILTER("Project No.") <> '' THEN
          RcpLineRec.SETFILTER("Project No.", GETFILTER("Project No."));
        IF GETFILTER(Element) <> '' THEN
          RcpLineRec.SETFILTER(Element, GETFILTER(Element));
        IF GETFILTER("Project Planning Activity Code") <> '' THEN
          RcpLineRec.SETFILTER("Project Planning Activity Code", GETFILTER("Project Planning Activity Code"));
        IF GETFILTER(Vendor) <> '' THEN
          RcpLineRec.SETFILTER(Vendor, GETFILTER(Vendor));
        IF GETFILTER(Subcontractor) <> '' THEN
          RcpLineRec.SETFILTER(Subcontractor, GETFILTER(Subcontractor));
        IF GETFILTER(Discipline) <> '' THEN
          RcpLineRec.SETFILTER(Discipline, GETFILTER(Discipline));
        IF GETFILTER("Trade Speciality") <> '' THEN
          RcpLineRec.SETFILTER("Trade Speciality", GETFILTER("Trade Speciality"));
        IF GETFILTER("Trade Expertise") <> '' THEN
          RcpLineRec.SETFILTER("Trade Expertise", GETFILTER("Trade Expertise"));

        SETFILTER(Recipe, '%1', '');  //db, 30-08-07 (do not transfer this filter to recipe line)
      END;
    END;

    PROCEDURE CheckEstFixed@1100485005(CurrEst@1100485000 : Code[20]);
    BEGIN
      //db, 10-08-07
      IF CurrEst <> EstRec."No." THEN BEGIN
        EstRec.GET(CurrEst);
        EstRec.TESTFIELD(Fixed, FALSE);
        TmpEstRec := EstRec;
        //TmpEstRec.INSERT; // C004183.o
        IF TmpEstRec.INSERT THEN; // C004183.n
      END;
    END;

    PROCEDURE CheckUncodedLines@1100525000(lvAction@1210190000 : Integer;EstNo@1100525002 : Code[20]);
    VAR
      lvEstLineRec@1100525001 : Record 11012154;
      lvRcpLineRec@1100525000 : Record 11012156;
      lvEstRec@1100525003 : Record 11012151;
      lvEstLine2@1100525010 : Record 11012154;
      lvRcpLine2@1100525009 : Record 11012156;
      lvAdmiRec@1100525008 : Record 11012390;
      lvCostObjLabor@1100525004 : Code[20];
      lvCostObjMaterial@1100525005 : Code[20];
      lvCostObjSubc@1100525006 : Code[20];
      lvCostObjPlant@1100525007 : Code[20];
    BEGIN
      IF lvAction = 1 THEN BEGIN
        WITH lvEstLineRec DO BEGIN
          SETRANGE("Estimate No.", EstNo);
          SETFILTER(Recipe, '%1', '');

          SETRANGE("Uncoded Labor", TRUE);
          MODIFYALL("Uncoded Labor", FALSE);
          SETRANGE("Uncoded Labor");

          SETRANGE("Uncoded Material", TRUE);
          MODIFYALL("Uncoded Material", FALSE);
          SETRANGE("Uncoded Material");

          SETRANGE("Uncoded Subcontracting", TRUE);
          MODIFYALL("Uncoded Subcontracting", FALSE);
          SETRANGE("Uncoded Subcontracting");

          SETRANGE("Uncoded Plant", TRUE);
          MODIFYALL("Uncoded Plant", FALSE);
          SETRANGE("Uncoded Plant");

          SETRANGE("Uncoded Line", TRUE);
          MODIFYALL("Uncoded Line", FALSE);
          SETRANGE("Uncoded Line");

          IF FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              lvCostObjLabor := "Cost Object Labor";
              lvCostObjMaterial := "Cost Object Material";
              lvCostObjSubc := "Cost Object Subcontracting";
              lvCostObjPlant := "Cost Object Plant";
              IF Admicode <> '' THEN BEGIN
                IF lvAdmiRec.GET(Admicode) THEN BEGIN
                  IF lvCostObjLabor = '' THEN
                    lvCostObjLabor := lvAdmiRec."Cost Object Labor";
                  IF lvCostObjMaterial = '' THEN
                    lvCostObjMaterial := lvAdmiRec."Cost Object Material";
                  IF lvCostObjSubc = '' THEN
                    lvCostObjSubc := lvAdmiRec."Cost Object Subcontracting";
                  IF lvCostObjPlant = '' THEN
                  lvCostObjPlant := lvAdmiRec."Cost Object Plant";
                END;
              END;

              IF (lvCostObjLabor = '') AND ("Labor Amount" <> 0) THEN
                 "Uncoded Labor" := TRUE;
              IF (lvCostObjMaterial = '') AND ("Material Amount" <> 0) THEN
                "Uncoded Material" := TRUE;
              IF (lvCostObjSubc = '') AND ("Subcontracting Amount" <> 0) THEN
                "Uncoded Subcontracting" := TRUE;
              IF (lvCostObjPlant = '') AND ("Plant Amount" <> 0) THEN
                "Uncoded Plant" := TRUE;

              IF "Uncoded Labor" OR "Uncoded Material" OR "Uncoded Subcontracting" OR "Uncoded Plant" THEN BEGIN
                "Uncoded Line" := TRUE;
                MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
          COMMIT;

          lvEstLine2.SETRANGE("Estimate No.",EstNo);
          PAGE.RUNMODAL(PAGE::"Uncoded Estimate Lines", lvEstLine2);

          SETRANGE("Uncoded Labor", TRUE);
          MODIFYALL("Uncoded Labor", FALSE);
          SETRANGE("Uncoded Labor");

          SETRANGE("Uncoded Material", TRUE);
          MODIFYALL("Uncoded Material", FALSE);
          SETRANGE("Uncoded Material");

          SETRANGE("Uncoded Subcontracting", TRUE);
          MODIFYALL("Uncoded Subcontracting", FALSE);
          SETRANGE("Uncoded Subcontracting");

          SETRANGE("Uncoded Plant", TRUE);
          MODIFYALL("Uncoded Plant", FALSE);
          SETRANGE("Uncoded Plant");

          SETRANGE("Uncoded Line", TRUE);
          MODIFYALL("Uncoded Line", FALSE);
          SETRANGE("Uncoded Line");

          COMMIT;
        END;
      END;

      IF lvAction = 2 THEN BEGIN
        WITH lvRcpLineRec DO BEGIN
          SETRANGE("Estimate No.", EstNo);

          SETRANGE("Uncoded Labor", TRUE);
          MODIFYALL("Uncoded Labor", FALSE);
          SETRANGE("Uncoded Labor");

          SETRANGE("Uncoded Material", TRUE);
          MODIFYALL("Uncoded Material", FALSE);
          SETRANGE("Uncoded Material");

          SETRANGE("Uncoded Subcontracting", TRUE);
          MODIFYALL("Uncoded Subcontracting", FALSE);
          SETRANGE("Uncoded Subcontracting");

          SETRANGE("Uncoded Plant", TRUE);
          MODIFYALL("Uncoded Plant", FALSE);
          SETRANGE("Uncoded Plant");

          SETRANGE("Uncoded Line", TRUE);
          MODIFYALL("Uncoded Line", FALSE);
          SETRANGE("Uncoded Line");

          IF FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              lvCostObjLabor := "Cost Object Labor";
              lvCostObjMaterial := "Cost Object Material";
              lvCostObjSubc := "Cost Object Subcontracting";
              lvCostObjPlant := "Cost Object Plant";
              IF Admicode <> '' THEN BEGIN
                IF lvAdmiRec.GET(Admicode) THEN BEGIN
                  IF lvCostObjLabor = '' THEN
                    lvCostObjLabor := lvAdmiRec."Cost Object Labor";
                  IF lvCostObjMaterial = '' THEN
                    lvCostObjMaterial := lvAdmiRec."Cost Object Material";
                  IF lvCostObjSubc = '' THEN
                    lvCostObjSubc := lvAdmiRec."Cost Object Subcontracting";
                  IF lvCostObjPlant = '' THEN
                  lvCostObjPlant := lvAdmiRec."Cost Object Plant";
                END;
              END;

              IF (lvCostObjLabor = '') AND ("Labor Amount" <> 0) THEN
                 "Uncoded Labor" := TRUE;
              IF (lvCostObjMaterial = '') AND ("Material Amount" <> 0) THEN
                "Uncoded Material" := TRUE;
              IF (lvCostObjSubc = '') AND ("Subcontracting Amount" <> 0) THEN
                "Uncoded Subcontracting" := TRUE;
              IF (lvCostObjPlant = '') AND ("Plant Amount" <> 0) THEN
                "Uncoded Plant" := TRUE;

              IF "Uncoded Labor" OR "Uncoded Material" OR "Uncoded Subcontracting" OR "Uncoded Plant" THEN BEGIN
                "Uncoded Line" := TRUE;
                MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
          COMMIT;

          lvRcpLine2.SETRANGE("Estimate No.",EstNo);
          PAGE.RUNMODAL(PAGE::"Uncoded Recipe Lines", lvRcpLine2);

          SETRANGE("Uncoded Labor", TRUE);
          MODIFYALL("Uncoded Labor", FALSE);
          SETRANGE("Uncoded Labor");

          SETRANGE("Uncoded Material", TRUE);
          MODIFYALL("Uncoded Material", FALSE);
          SETRANGE("Uncoded Material");

          SETRANGE("Uncoded Subcontracting", TRUE);
          MODIFYALL("Uncoded Subcontracting", FALSE);
          SETRANGE("Uncoded Subcontracting");

          SETRANGE("Uncoded Plant", TRUE);
          MODIFYALL("Uncoded Plant", FALSE);
          SETRANGE("Uncoded Plant");

          SETRANGE("Uncoded Line", TRUE);
          MODIFYALL("Uncoded Line", FALSE);
          SETRANGE("Uncoded Line");


          COMMIT;
        END;
      END;
    END;

    PROCEDURE UpdateFullCostSalesPrice@1100525003(IEstimateNo@1100525000 : Code[20]);
    VAR
      Estimate@1100525001 : Record 11012151;
    BEGIN
      //mg, 07-12-10: M22588
      IF NOT Estimate.GET(IEstimateNo) THEN
        EXIT;
      IF Estimate.Fixed OR (Estimate."Estimate Type" <> Estimate."Estimate Type"::Sales) THEN
        EXIT;

      UpdateOfferAmounts(IEstimateNo);
      IF Estimate."Copied from Cost Estimate" <> '' THEN
        UpdateCalculatedAmounts(Estimate."Copied from Cost Estimate");
      UpdateCalculatedAmounts(IEstimateNo);

      Estimate."Full Cost/Sales Price Updated" := TRUE;
      Estimate.MODIFY;
    END;

    LOCAL PROCEDURE UpdateOfferAmounts@1100525008(IEstimateNo@1100525002 : Code[20]);
    VAR
      SubEstimatePart@1100525001 : Record 11012153;
      LevelLoop@1100525000 : Integer;
      PartQuantity@1100525003 : Decimal;
    BEGIN
      //mg, 07-12-10: M22588
      SubEstimatePart.SETRANGE("Estimate No.", IEstimateNo);
      FOR LevelLoop := 3 DOWNTO 0 DO BEGIN
        SubEstimatePart.SETRANGE(Level, LevelLoop);
        IF SubEstimatePart.FINDSET THEN
          REPEAT
            IF SubEstimatePart.PartHasLowerLevels THEN
              SubEstimatePart."Offer Amount" := CalcAmountLowerLevels(SubEstimatePart."Estimate No.",
                SubEstimatePart."Sub-Estimate No.", SubEstimatePart."Part Group", SubEstimatePart.Chapter,
                SubEstimatePart.Paragraph, LevelLoop, 0);
            PartQuantity := SubEstimatePart.GetPartQuantity;
            IF PartQuantity <> 0 THEN
              SubEstimatePart."Offer Price" := SubEstimatePart."Offer Amount" / PartQuantity
            ELSE BEGIN
              SubEstimatePart."Offer Price" := SubEstimatePart."Offer Amount";
              SubEstimatePart."Offer Amount" := 0;
            END;
            SubEstimatePart.MODIFY;
         UNTIL SubEstimatePart.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateCalculatedAmounts@1100525001(IEstimateNo@1100525004 : Code[20]);
    VAR
      SubEstimatePart@1100525002 : Record 11012153;
      LevelLoop@1100525001 : Integer;
      PartQuantity@1100525000 : Decimal;
    BEGIN
      //mg, 07-12-10: M22588
      SubEstimatePart.SETRANGE("Estimate No.", IEstimateNo);
      FOR LevelLoop := 3 DOWNTO 0 DO BEGIN
        SubEstimatePart.SETRANGE(Level, LevelLoop);
        IF SubEstimatePart.FINDSET THEN
          REPEAT
            IF SubEstimatePart.PartHasLowerLevels THEN
              SubEstimatePart."Calculated Amount" := CalcAmountLowerLevels(SubEstimatePart."Estimate No.",
                SubEstimatePart."Sub-Estimate No.", SubEstimatePart."Part Group", SubEstimatePart.Chapter,
                SubEstimatePart.Paragraph, LevelLoop, 1);
            PartQuantity := SubEstimatePart.GetPartQuantity;
            IF PartQuantity <> 0 THEN
              SubEstimatePart."Calculated Price" := SubEstimatePart."Calculated Amount" / PartQuantity
            ELSE BEGIN
              SubEstimatePart."Calculated Price" := SubEstimatePart."Calculated Amount";
              SubEstimatePart."Calculated Amount" := 0;
            END;
            SubEstimatePart.MODIFY;
         UNTIL SubEstimatePart.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcAmountLowerLevels@1100525009(IEstimateNo@1100525001 : Code[20];ISubEstimateNo@1100525004 : Code[20];IPartGroup@1100525006 : Code[10];IChapter@1100525000 : Code[20];IParagraph@1100525005 : Code[20];ILevel@1100525002 : Integer;IAmountType@1100525007 : 'Offer Amount,Calculated Amount') retValue : Decimal;
    VAR
      SubEstimatePart@1100525003 : Record 11012153;
    BEGIN
      //mg, 07-12-10: M22588
      SubEstimatePart.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", Level, Chapter, Paragraph);
      SubEstimatePart.SETRANGE("Estimate No.", IEstimateNo);
      SubEstimatePart.SETRANGE("Sub-Estimate No.", ISubEstimateNo);
      SubEstimatePart.SETRANGE("Part Group", IPartGroup);
      SubEstimatePart.SETRANGE(Level, ILevel +1);
      CASE ILevel +1 OF
        2:
          SubEstimatePart.SETRANGE(Chapter, IChapter);
        3:
          BEGIN
            SubEstimatePart.SETRANGE(Chapter, IChapter);
            SubEstimatePart.SETRANGE(Paragraph, IParagraph);
          END;
      END;
      IF NOT SubEstimatePart.FINDSET THEN
        EXIT;
      //REPEAT
      CASE IAmountType OF
        IAmountType::"Offer Amount":
          BEGIN
            SubEstimatePart.CALCSUMS("Offer Amount");
            retValue += SubEstimatePart."Offer Amount";
          END;
        IAmountType::"Calculated Amount":
          BEGIN
            SubEstimatePart.CALCSUMS("Calculated Amount");
            retValue += SubEstimatePart."Calculated Amount";
          END;
      END;
      //UNTIL SubEstimatePart.NEXT = 0;
      EXIT(retValue);
    END;

    BEGIN
    END.
  }
}

