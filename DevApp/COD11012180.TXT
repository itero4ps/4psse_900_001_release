OBJECT Codeunit 11012180 Site Mngmnt. Hrs Replic. File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            SiteMngCompRec@1100525000 : Record 11012356;
          BEGIN
            AllowGUI := FALSE;   //variable is more practical while testing then GUIALLOWED
            ErrorRec.RESET;
            ErrorRec.SETRANGE("User ID", USERID);
            ErrorRec.DELETEALL;
            ErrorNextLineNo := 1;

            IF SiteMngCompRec.FINDSET THEN
              REPEAT
                //No Userinteraction
                CreateTables2(SiteMngCompRec);
              UNTIL SiteMngCompRec.NEXT = 0;

            //Errors are present in Error tabel now.
            //IF Required another job cue could be made to run the error report.
            //Tabel: Error
            //Report: Errors
          END;

  }
  CODE
  {
    VAR
      ErrorRec@1100409005 : Record 11012051;
      Window@1100525000 : Dialog;
      Text000@1100525003 : TextConst 'ENU="Create Company #1######### "';
      Text001@1100525002 : TextConst 'ENU="File #2######### "';
      Text002@1100525001 : TextConst 'ENU=@3@@@@@@@@@@@@@@@@@@@@@';
      NoOfLines@1100525004 : Integer;
      LineCounter@1100525005 : Integer;
      Text003@1210190000 : TextConst 'ENU=Not all data processed due to limited user rights. Show messages?';
      ErrorNextLineNo@1100409006 : Integer;
      Text004@1100409007 : TextConst 'ENU=No read permission for company ''%1''';
      Text005@1100409008 : TextConst 'ENU=, table ''%1''';
      Text006@1100528000 : TextConst 'ENU=Table %1: Field %2 has not the correct Value (Key: %3, Field Value: ''%4'').';
      Text007@1100528001 : TextConst 'ENU=Company %1';
      NewCompanyRec@1100528002 : Boolean;
      RelationCode@1100525006 : Code[10];
      TempSiteMngCompRec@1100525007 : TEMPORARY Record 11012356;
      AllowGUI@1100525008 : Boolean;

    PROCEDURE CreateTables@1100485000();
    VAR
      SiteMngCompRec@1100485002 : Record 11012356;
      CostCode@1100409000 : Record 11012083;
      WageComp@1100409001 : Record 11012014;
      Project@1100409002 : Record 11072003;
      ProjElem@1100409003 : Record 11012010;
      Employee@1100409004 : Record 5200;
      ErrorsReport@1100528000 : Report 11012040;
    BEGIN
      AllowGUI := TRUE;
      SiteMngCompRec.GET(COMPANYNAME);
      RelationCode := SiteMngCompRec."Relation Code";
      SiteMngCompRec.RESET;

      SiteMngCompRec.SETRANGE("Relation Code", RelationCode);
      IF SiteMngCompRec.FINDSET(FALSE,FALSE) THEN BEGIN
        Window.OPEN(Text000 + Text001 + Text002);
        ErrorRec.RESET;
        ErrorRec.SETRANGE("User ID", USERID);
        ErrorRec.DELETEALL;
        ErrorNextLineNo := 1;
        REPEAT
          NewCompanyRec := TRUE;
          Window.UPDATE(1,SiteMngCompRec.Company);
          CreateCostCodes(SiteMngCompRec.Company);
          CreateWageComponents(SiteMngCompRec.Company);
          CreateProjects(SiteMngCompRec.Company);
          CreateEmployees(SiteMngCompRec.Company);
          CreateServiceOrders(SiteMngCompRec.Company);
        UNTIL SiteMngCompRec.NEXT = 0;
        Window.CLOSE;
        IF ErrorRec.FINDFIRST THEN BEGIN
          //IF (confirm(Text003)) THEN BEGIN
            COMMIT;
            //TmpError.FILTERGROUP(1);
            //TmpError.SETRANGE("Tempory Table", TRUE);  // Flowfilter needed for printing
            //TmpError.FILTERGROUP(0);
            //PAGE.RUNMODAL(PAGE::Errors, TmpError);
            ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::General);
            ErrorsReport.SETTABLEVIEW(ErrorRec);
            ErrorsReport.RUNMODAL;
          //END;
        END;
      END;
    END;

    PROCEDURE CreateTables2@1100525002(SiteMngCompRec@1100525000 : Record 11012356);
    VAR
      CostCode@1100409000 : Record 11012083;
      WageComp@1100409001 : Record 11012014;
      Project@1100409002 : Record 11072003;
      ProjElem@1100409003 : Record 11012010;
      Employee@1100409004 : Record 5200;
    BEGIN
      //DP00947 Called from Job Cue, no GUI.
      RelationCode := SiteMngCompRec."Relation Code";
      SiteMngCompRec.SETRANGE("Relation Code", RelationCode);
      IF SiteMngCompRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          TempSiteMngCompRec.COPY(SiteMngCompRec);
          IF NOT TempSiteMngCompRec.FIND('=') THEN BEGIN
            NewCompanyRec := TRUE;
            CreateCostCodes(SiteMngCompRec.Company);
            CreateWageComponents(SiteMngCompRec.Company);
            CreateProjects(SiteMngCompRec.Company);
            CreateEmployees(SiteMngCompRec.Company);
            CreateServiceOrders(SiteMngCompRec.Company);
            TempSiteMngCompRec.INSERT;
          END
        UNTIL SiteMngCompRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateCostCodes@1100485002(CompanyTxt@1100485000 : Text[50]);
    VAR
      SiteMngCodesRec@1100485001 : Record 11012359;
      lvText000@1100485002 : TextConst 'ENU=Cost Codes';
      CostCodeRec@1100485003 : Record 11012083;
    BEGIN
      CostCodeRec.CHANGECOMPANY(CompanyTxt);
      IF NOT CostCodeRec.READPERMISSION THEN BEGIN //call 33059
        WriteError(CompanyTxt, STRSUBSTNO(Text004, CompanyTxt) + STRSUBSTNO(Text005, CostCodeRec.TABLECAPTION));
        EXIT;
      END;
      CostCodeRec.SETRANGE(Blocked, FALSE);

      WITH SiteMngCodesRec DO BEGIN
        SETRANGE(Company,CompanyTxt);
        SETRANGE(Type,Type::"Cost Code");
        SETRANGE("Relation Code", RelationCode);
        DELETEALL;
        IF AllowGUI THEN
          Window.UPDATE(2,lvText000);
        IF CostCodeRec.FINDSET(FALSE,FALSE) THEN BEGIN
          NoOfLines := CostCodeRec.COUNT;
          REPEAT
            LineCounter := LineCounter + 1;
            Company := CompanyTxt;
            Type := Type::"Cost Code";
            Code := CostCodeRec.Code;
            Description := CostCodeRec.Description;
            "Department Code" := CostCodeRec."Global Dimension 1 Code";
            INSERT;
            TestCostCode(CompanyTxt, CostCodeRec);
            IF AllowGUI THEN
              Window.UPDATE(3, ROUND(LineCounter/NoOfLines*10000,1));
          UNTIL CostCodeRec.NEXT = 0;
        END;
      END;
      LineCounter := 0;
      NoOfLines := 0;
    END;

    LOCAL PROCEDURE TestCostCode@1100528006(CompanyTxt@1100528000 : Text[50];CostCode@1100528001 : Record 11012083);
    BEGIN
    END;

    LOCAL PROCEDURE CreateWageComponents@1100485003(CompanyTxt@1100485000 : Text[50]);
    VAR
      lvText000@1100485001 : TextConst 'ENU=Wage Components';
      WageCompRec@1100485002 : Record 11012014;
      SiteMngCodesRec@1100485003 : Record 11012358;
    BEGIN
      WageCompRec.CHANGECOMPANY(CompanyTxt);
      IF NOT WageCompRec.READPERMISSION THEN BEGIN
        WriteError(CompanyTxt, STRSUBSTNO(Text004, CompanyTxt) + STRSUBSTNO(Text005, WageCompRec.TABLECAPTION));
        EXIT;
      END;

      WageCompRec.SETFILTER("Component Type",'%1|%2',WageCompRec."Component Type"::Hours,
                                                     WageCompRec."Component Type"::Expenses);
      WITH SiteMngCodesRec DO BEGIN
        SETRANGE(Company,CompanyTxt);
        SETRANGE(Type,Type::"Wage Components");
        SETRANGE("Relation Code", RelationCode);
        DELETEALL;
        IF AllowGUI THEN
          Window.UPDATE(2,lvText000);
        IF WageCompRec.FINDSET(FALSE,FALSE) THEN BEGIN
          NoOfLines := WageCompRec.COUNT;
          REPEAT
            LineCounter := LineCounter + 1;
            Company := CompanyTxt;
            Type := Type::"Wage Components";
            Code := WageCompRec.Code;
            Description := WageCompRec.Description;
            "Component Type" := WageCompRec."Component Type";
            Overtime := WageCompRec.Overtime;
            "CAO Filter" := WageCompRec."CAO Filter";
            INSERT;
            TestWageComponent(CompanyTxt, WageCompRec);
            IF AllowGUI THEN
              Window.UPDATE(3, ROUND(LineCounter/NoOfLines*10000,1));
          UNTIL WageCompRec.NEXT = 0;
        END;
      END;
      LineCounter := 0;
      NoOfLines := 0;
    END;

    LOCAL PROCEDURE TestWageComponent@1100528007(CompanyTxt@1100528000 : Text[50];WageComponent@1100528001 : Record 11012014);
    BEGIN
    END;

    LOCAL PROCEDURE CreateProjects@1100485015(CompanyTxt@1100485000 : Text[50]);
    VAR
      SiteMngObjRec@1100485002 : Record 11012359;
      JobRec@1100485003 : Record 11072003;
      lvText000@1100485004 : TextConst 'ENU=Projects';
    BEGIN
      JobRec.CHANGECOMPANY(CompanyTxt);
      IF NOT JobRec.READPERMISSION THEN BEGIN
        WriteError(CompanyTxt, STRSUBSTNO(Text004, CompanyTxt) + STRSUBSTNO(Text005, JobRec.TABLECAPTION));
        EXIT;
      END;

      WITH SiteMngObjRec DO BEGIN
        SETRANGE(Type,Type::Project);
        SETRANGE(Company,CompanyTxt);
        SETRANGE("Relation Code", RelationCode);
        DELETEALL;
        IF AllowGUI THEN
          Window.UPDATE(2,lvText000);
        IF JobRec.FINDSET(FALSE,FALSE) THEN BEGIN
          NoOfLines := JobRec.COUNT;
          REPEAT
            LineCounter := LineCounter + 1;
            Company := CompanyTxt;
            Type := Type::Project;
            Code := JobRec."No.";
            Description := JobRec.Description;
            "Department Code" := JobRec."Global Dimension 1 Code";
            IF InsertProject(JobRec) THEN BEGIN
              INSERT;
              TestProject(CompanyTxt, JobRec);
              CreateElements(JobRec,CompanyTxt);
            END;
            IF AllowGUI THEN
              Window.UPDATE(3, ROUND(LineCounter/NoOfLines*10000,1));
          UNTIL JobRec.NEXT = 0;
        END;
      END;
      LineCounter := 0;
      NoOfLines := 0;
    END;

    LOCAL PROCEDURE InsertProject@1100485006(JobRec@1100485000 : Record 11072003) DoInsert : Boolean;
    VAR
      SiteMngSetupRec@1100485001 : Record 11012355;
    BEGIN
      SiteMngSetupRec.GET;
      CASE JobRec."Project Status" OF
        JobRec."Project Status"::Estimation:
          IF SiteMngSetupRec.Estimating THEN
            EXIT(TRUE);
        JobRec."Project Status"::Preparation:
          IF SiteMngSetupRec.Preparation THEN
            EXIT(TRUE);
        JobRec."Project Status"::Production:
          IF SiteMngSetupRec.Production THEN
            EXIT(TRUE);
        JobRec."Project Status"::"Technical Finished":
          IF SiteMngSetupRec."Technical Finished" THEN
            EXIT(TRUE);
        // 32362.sn
        JobRec."Project Status"::"Administrative Finished":
          IF SiteMngSetupRec."Administrative Finished" THEN
            EXIT(TRUE);
        JobRec."Project Status"::Finished:
          IF SiteMngSetupRec.Finished THEN
            EXIT(TRUE);
        // 32362.en
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE TestProject@1100528008(CompanyTxt@1100528000 : Text[50];Job@1100528001 : Record 11072003);
    BEGIN
      IF (Job."Project Manager" = '') THEN
        WriteError(CompanyTxt, STRSUBSTNO(Text006, Job.TABLECAPTION, Job.FIELDCAPTION("Project Manager"), Job."No.",
          Job."Project Manager"));
    END;

    LOCAL PROCEDURE CreateElements@1100485017(JobRec@1100485000 : Record 11072003;CompanyTxt@1100485002 : Text[50]);
    VAR
      SiteMngCodesRec@1100485001 : Record 11012358;
      ElementRec@1100485003 : Record 11012010;
    BEGIN
      ElementRec.CHANGECOMPANY(CompanyTxt);
      IF NOT ElementRec.READPERMISSION THEN BEGIN
        WriteError(CompanyTxt, STRSUBSTNO(Text004, CompanyTxt) + STRSUBSTNO(Text005, ElementRec.TABLECAPTION));
        EXIT;
      END;

      WITH SiteMngCodesRec DO BEGIN
        SETRANGE(Company,CompanyTxt);
        SETRANGE(Type,Type::Element);
        SETRANGE("Project No.",JobRec."No.");
        DELETEALL;

        ElementRec.SETRANGE("Project No.",JobRec."No.");
        IF ElementRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            Company := CompanyTxt;
            Type := Type::Element;
            "Project No." := JobRec."No.";
            Code := ElementRec.Element;
            Description := ElementRec.Description;
            Blocked := ElementRec.Blocked;
            INSERT;
            TestElement(CompanyTxt, ElementRec);
          UNTIL ElementRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE TestElement@1100528009(CompanyTxt@1100528000 : Text[50];ProjectElement@1100528001 : Record 11012010);
    BEGIN
    END;

    LOCAL PROCEDURE CreateCostObjects@1100485001(CompanyTxt@1100485000 : Text[50]);
    BEGIN
    END;

    LOCAL PROCEDURE TestCostObject@1100528010(CompanyTxt@1100528000 : Text[50];CostObject@1100528001 : Record 1113);
    BEGIN
    END;

    LOCAL PROCEDURE CreateEmployees@1100485012(CompanyTxt@1100485000 : Text[50]);
    VAR
      SiteMngEmplRec@1100485001 : Record 11012357;
      EmployeeRec@1100485002 : Record 5200;
      lvText000@1100485003 : TextConst 'ENU=Employees';
    BEGIN
      EmployeeRec.CHANGECOMPANY(CompanyTxt);
      IF NOT EmployeeRec.READPERMISSION THEN BEGIN
        WriteError(CompanyTxt, STRSUBSTNO(Text004, CompanyTxt) + STRSUBSTNO(Text005, EmployeeRec.TABLECAPTION));
        EXIT;
      END;

      WITH SiteMngEmplRec DO BEGIN
        SETRANGE(Company,CompanyTxt);
        SETRANGE("Relation Code", RelationCode);
        DELETEALL;
        EmployeeRec.SETFILTER(CAO,'<>%1','');
        EmployeeRec.SETRANGE(Status,EmployeeRec.Status::Active);
        EmployeeRec.SETRANGE(
          "Account Hours", EmployeeRec."Account Hours"::"Required according to Norm", EmployeeRec."Account Hours"::Optional);
        IF AllowGUI THEN
          Window.UPDATE(2,lvText000);
        IF EmployeeRec.FINDSET(FALSE,FALSE) THEN BEGIN
          NoOfLines := EmployeeRec.COUNT;
          REPEAT
            LineCounter := LineCounter + 1;
            Company := CompanyTxt;
            "No." := EmployeeRec."No.";
            "Full Name" := EmployeeRec."Full Name";
            "Norm Hours" := EmployeeRec."Norm Hours";
            "Norm Days" := EmployeeRec."Norm Days";
            "Trade Association" := EmployeeRec."Trade Association";
            External := EmployeeRec.External;
            Employer := EmployeeRec.Employer;
            "Search Name" := EmployeeRec."Search Name";
            "Global Dimension 2 Code" := EmployeeRec."Global Dimension 2 Code";
            "Account Hours" := EmployeeRec."Account Hours";  //* 26682
            CAO := EmployeeRec.CAO;
            "Show in Hours Portal" := EmployeeRec."Show in Hours Portal";
            "Department Code" := EmployeeRec."Global Dimension 1 Code";
            INSERT;
            TestEmployee(CompanyTxt, EmployeeRec);
            IF AllowGUI THEN
              Window.UPDATE(3, ROUND(LineCounter/NoOfLines*10000,1));
          UNTIL EmployeeRec.NEXT = 0;
        END;
      END;
      LineCounter := 0;
      NoOfLines := 0;
    END;

    LOCAL PROCEDURE TestEmployee@1100528011(CompanyTxt@1100528000 : Text[50];Employee@1100528001 : Record 5200);
    BEGIN
      IF (Employee."Global Dimension 1 Code" = '') THEN
        WriteError(CompanyTxt, STRSUBSTNO(Text006, Employee.TABLECAPTION, Employee.FIELDCAPTION("Global Dimension 1 Code"), Employee."No.",
          Employee."Global Dimension 1 Code"));
      IF (Employee."Manager No." = '') THEN
        WriteError(CompanyTxt, STRSUBSTNO(Text006, Employee.TABLECAPTION, Employee.FIELDCAPTION("Manager No."), Employee."No.",
          Employee."Manager No."));
      IF (Employee."Trade Association" = '') THEN
        WriteError(CompanyTxt, STRSUBSTNO(Text006, Employee.TABLECAPTION, Employee.FIELDCAPTION("Trade Association"), Employee."No.",
          Employee."Trade Association"));
    END;

    LOCAL PROCEDURE CreateServiceOrders@1100528302(CompanyTxt@1100485000 : Text[50]);
    VAR
      SiteMngObjRec@1100485002 : Record 11012359;
      ServiceOrder@1100485003 : Record 11012823;
      lvText000@1100485004 : TextConst 'ENU=Service Orders';
    BEGIN
      ServiceOrder.CHANGECOMPANY(CompanyTxt);
      IF NOT ServiceOrder.READPERMISSION THEN BEGIN
        WriteError(CompanyTxt, STRSUBSTNO(Text004, CompanyTxt) + STRSUBSTNO(Text005, ServiceOrder.TABLECAPTION));
        EXIT;
      END;

      WITH SiteMngObjRec DO BEGIN
        SETRANGE(Type,Type::"Service Order");
        SETRANGE(Company,CompanyTxt);
        SETRANGE("Relation Code", RelationCode);
        DELETEALL;
        IF AllowGUI THEN
          Window.UPDATE(2,lvText000);
        IF ServiceOrder.FINDSET(FALSE,FALSE) THEN BEGIN
          NoOfLines := ServiceOrder.COUNT;
          REPEAT
            LineCounter := LineCounter + 1;
            Company := CompanyTxt;
            Type := Type::"Service Order";
            Code := ServiceOrder."No.";
            Description := ServiceOrder.Description;
            "Department Code" := ServiceOrder."Global Dimension 1 Code";
            IF InsertServiceOrder(ServiceOrder) THEN BEGIN
              INSERT;
              TestServiceOrder(CompanyTxt, ServiceOrder);
            END;
            IF AllowGUI THEN
              Window.UPDATE(3, ROUND(LineCounter/NoOfLines*10000,1));
          UNTIL ServiceOrder.NEXT = 0;
        END;
      END;
      LineCounter := 0;
      NoOfLines := 0;
    END;

    LOCAL PROCEDURE InsertServiceOrder@1100528301(ServiceOrder@1100485000 : Record 11012823) : Boolean;
    VAR
      SiteMngSetupRec@1100485001 : Record 11012355;
    BEGIN
      SiteMngSetupRec.GET;
      CASE ServiceOrder.Status OF
        ServiceOrder.Status::Open:
          IF SiteMngSetupRec."SO Open" THEN
            EXIT(TRUE);
        ServiceOrder.Status::"In Process":
          IF SiteMngSetupRec."SO In Process" THEN
            EXIT(TRUE);
        ServiceOrder.Status::"Technical Finished":
          IF SiteMngSetupRec."SO Technical Finished" THEN
            EXIT(TRUE);
        ServiceOrder.Status::"Administrative Finished":
          IF SiteMngSetupRec."SO Administrative Finished" THEN
            EXIT(TRUE);
        ServiceOrder.Status::Finished:
          IF SiteMngSetupRec."SO Finished" THEN
            EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE TestServiceOrder@1100528300(CompanyTxt@1100528000 : Text[50];ServiceOrder@1100528001 : Record 11012823);
    BEGIN
      IF (ServiceOrder."Order Manager" = '') THEN
        WriteError(CompanyTxt, STRSUBSTNO(Text006, ServiceOrder.TABLECAPTION, ServiceOrder.FIELDCAPTION("Order Manager"),
          ServiceOrder."No.", ServiceOrder."Order Manager"));
    END;

    PROCEDURE CheckDeletedCompanies@1100525000();
    VAR
      lvSiteMngCompRec@1100525000 : Record 11012356;
      lvSiteMngEmplRec@1100525001 : Record 11012357;
    BEGIN
      IF lvSiteMngCompRec.FINDSET(FALSE,FALSE) THEN
        REPEAT
          lvSiteMngEmplRec.SETRANGE(Company,lvSiteMngCompRec.Company);
          IF lvSiteMngEmplRec.FIND('=') THEN
            lvSiteMngEmplRec.MARK(TRUE);
        UNTIL lvSiteMngCompRec.NEXT = 0;

      lvSiteMngEmplRec.SETRANGE(Company);
      lvSiteMngEmplRec.MARKEDONLY(FALSE);
      IF lvSiteMngEmplRec.FIND('=') THEN
        lvSiteMngEmplRec.DELETE;
    END;

    LOCAL PROCEDURE WriteError@1100409002(Company@1100409000 : Text[50];ErrorText@1100528000 : Text);
    BEGIN
      IF NOT GUIALLOWED THEN // CALL T006598.n
        EXIT;                // CALL T006598.n

      IF (NewCompanyRec) THEN BEGIN
        ErrorRec.INIT;
        ErrorRec."User ID" := USERID;
        ErrorRec."Source Type" := ErrorRec."Source Type"::General;
        ErrorRec."Line No." := ErrorNextLineNo;
        ErrorRec.INSERT;
        ErrorNextLineNo := ErrorNextLineNo + 1;

        ErrorRec."Line No." := ErrorNextLineNo;
        ErrorRec."Error message" := STRSUBSTNO(Text007, Company);
        ErrorRec.INSERT;
        ErrorNextLineNo := ErrorNextLineNo + 1;
      END;
      NewCompanyRec := FALSE;

      ErrorRec.INIT;
      ErrorRec."User ID" := USERID;
      ErrorRec."Source Type" := ErrorRec."Source Type"::General;
      ErrorRec."Line No." := ErrorNextLineNo;
      ErrorRec."Error message" := ErrorText;
      ErrorRec.INSERT;
      ErrorNextLineNo := ErrorNextLineNo + 1;
    END;

    BEGIN
    {
      4PS, 13-03-12, call 33059, Only Data within rights are updated
    }
    END.
  }
}

