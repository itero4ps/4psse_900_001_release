OBJECT Codeunit 11012183 Copy Estimate Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=39;
    OnRun=VAR
            ProjPurchaseActionRec@11012000 : Record 11012026;
          BEGIN
            //MOET NOG ZIEN OF DIT GEBRUIKT WORDT
            {
            PurchHeaderRec.GET("Document Type","Document No.");

            IF PurchHeaderRec."Job No." <> '' THEN
              ProjPurchaseActionRec.SETRANGE("Project No.", PurchHeaderRec."Job No.");
            IF PurchHeaderRec."Received on Project" <> '' THEN
              ProjPurchaseActionRec.SETRANGE("Project No.", PurchHeaderRec."Received on Project");
            ProjPurchaseActionRec.SETFILTER(Status,'>=%1',ProjPurchaseActionRec.Status::Approved);
            IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Quote THEN
              ProjPurchaseActionRec.SETFILTER("Activate for", '%1|%2',
              ProjPurchaseActionRec."Activate for"::" ", ProjPurchaseActionRec."Activate for"::Quote);
            IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Order THEN
              ProjPurchaseActionRec.SETFILTER("Activate for", '%1|%2',
              ProjPurchaseActionRec."Activate for"::" ", ProjPurchaseActionRec."Activate for"::Purchase);
            IF PAGE.RUNMODAL(PAGE::"Project Purchase Action List",ProjPurchaseActionRec) = ACTION::LookupOK THEN
              IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Quote THEN
                CopyLines(ProjPurchaseActionRec,Rec,FALSE)
              ELSE
                CopyLines(ProjPurchaseActionRec,Rec,TRUE);
            }
          END;

  }
  CODE
  {
    VAR
      EstRec@1100485009 : Record 11012151;
      EstLineRec@11012000 : Record 11012154;
      RcplineRec@1100485006 : Record 11012156;
      ItemRec@1100485000 : Record 27;
      DimValRec@11012001 : Record 349;
      PurchLineRec@1210190002 : Record 39;
      PurchHeaderRec@1210190001 : Record 38;
      TmpEstLineRec@1100485008 : TEMPORARY Record 11012154;
      DimMgt@1210190003 : Codeunit 408;
      UOMMgt@1210190000 : Codeunit 5402;
      NextLineNo@1210190005 : Integer;
      PurchLineCounter@1100485001 : Integer;

    PROCEDURE CopyLines@1210190000(IEstPurchActionRec@1210190002 : Record 11012366;IPurchLineRec@1210190001 : Record 39;ICloseLine@1210190000 : Boolean);
    BEGIN
      EstLineRec.SETRANGE("Estimate No.",IEstPurchActionRec."Estimate No.");

      RcplineRec.SETRANGE("Estimate No.",IEstPurchActionRec."Estimate No.");
      RcplineRec.SETRANGE("Purchase Action Mat.",IEstPurchActionRec.Code);
      RcplineRec.SETRANGE("Advised Mat.", FALSE);

      EstRec.GET(IEstPurchActionRec."Estimate No.");

      InsertPurchLines(IPurchLineRec, IEstPurchActionRec.Code, ICloseLine);

      IF ICloseLine THEN BEGIN
        IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Quote THEN
          IF IEstPurchActionRec."Activate for" < IEstPurchActionRec."Activate for"::Quote THEN
            IEstPurchActionRec."Activate for" := IEstPurchActionRec."Activate for"::Quote;
        IF PurchHeaderRec."Document Type" = PurchHeaderRec."Document Type"::Order THEN
          IF IEstPurchActionRec."Activate for" < IEstPurchActionRec."Activate for"::Purchase THEN
            IEstPurchActionRec."Activate for" := IEstPurchActionRec."Activate for"::Purchase;
        IEstPurchActionRec.MODIFY;
      END;

      //COMMIT;  //* Geen commit want dan worden halverwege bepaalde processen al gegevens weggeschreven.
                 //* Als ergens nodig dan moet op bewuste plek maar direct na aanroep een commit.
    END;

    PROCEDURE CopyMarkedBudgetLines@1210190001(VAR IBudgetRec@1210190002 : Record 11012001;IPurchLineRec@1210190001 : Record 39;ICloseBudgetLine@1210190000 : Boolean);
    BEGIN
      //NOG NIET AANGEPAST --> let op twee tabellen estimate en recipe lines
      //EstLineRec.COPY(IBudgetRec);
      //
      //InsertPurchLines(IPurchLineRec, ICloseBudgetLine);
    END;

    PROCEDURE InsertPurchLines@1210190005(IPurchLineRec@1210190000 : Record 39;IPurchAction@1100485004 : Code[10];ICloseLine@1210190001 : Boolean);
    VAR
      lvAdmiCodeRec@1100485003 : Record 11012390;
      CompressedTotal@1210190002 : Decimal;
      SavedCostObject@1100485000 : Code[20];
      TestCostObject@1100485002 : Code[20];
      lvLoopCount@1100485001 : Integer;
    BEGIN
      PurchLineCounter := 0;
      PurchHeaderRec.GET(IPurchLineRec."Document Type",IPurchLineRec."Document No.");

      PurchLineRec.LOCKTABLE;
      PurchLineRec.SETRANGE("Document Type",IPurchLineRec."Document Type");
      PurchLineRec.SETRANGE("Document No.",IPurchLineRec."Document No.");
      IF PurchLineRec.FINDLAST THEN
        NextLineNo := PurchLineRec."Line No."
      ELSE
        NextLineNo := 0;


      //3X lussen voor materiaal, onderaanneming en materieel
      FOR lvLoopCount := 1 TO 3 DO BEGIN
        TmpEstLineRec.RESET;
        TmpEstLineRec.DELETEALL;

        CASE lvLoopCount OF
          1: BEGIN
               EstLineRec.SETRANGE("Purchase Action Mat.",IPurchAction);
               EstLineRec.SETRANGE("Advised Mat.", FALSE);
               EstLineRec.SETRANGE("Purchase Action Subc.");
               EstLineRec.SETRANGE("Advised Subc.");
               EstLineRec.SETRANGE("Purchase Action Plant");
               EstLineRec.SETRANGE("Advised Plant");
             END;
          2: BEGIN
               EstLineRec.SETRANGE("Purchase Action Subc.",IPurchAction);
               EstLineRec.SETRANGE("Advised Subc.", FALSE);
               EstLineRec.SETRANGE("Purchase Action Plant");
               EstLineRec.SETRANGE("Advised Plant");
               EstLineRec.SETRANGE("Purchase Action Mat.");
               EstLineRec.SETRANGE("Advised Mat.");
             END;
          3: BEGIN
               EstLineRec.SETRANGE("Purchase Action Plant",IPurchAction);
               EstLineRec.SETRANGE("Advised Plant", FALSE);
               EstLineRec.SETRANGE("Purchase Action Subc.");
               EstLineRec.SETRANGE("Advised Subc.");
               EstLineRec.SETRANGE("Purchase Action Mat.");
               EstLineRec.SETRANGE("Advised Mat.");
             END;
        END;

        IF EstLineRec.FINDSET(ICloseLine, FALSE) THEN BEGIN
          REPEAT
            lvAdmiCodeRec.INIT;
            IF EstLineRec.Admicode <> '' THEN BEGIN
              IF lvAdmiCodeRec.GET(EstLineRec.Admicode) THEN;
            END;

            CASE lvLoopCount OF
              1: BEGIN
                   TestCostObject := EstLineRec."Cost Object Material";
                   IF TestCostObject = '' THEN
                     TestCostObject := lvAdmiCodeRec."Cost Object Material";
                 END;
              2: BEGIN
                   TestCostObject := EstLineRec."Cost Object Subcontracting";
                   IF TestCostObject = '' THEN
                     TestCostObject := lvAdmiCodeRec."Cost Object Subcontracting";
                 END;
              3: BEGIN
                   TestCostObject := EstLineRec."Cost Object Plant";
                   IF TestCostObject = '' THEN
                     TestCostObject := lvAdmiCodeRec."Cost Object Plant";
                 END;
            END;

            IF TestCostObject <> '' THEN BEGIN

              TmpEstLineRec := EstLineRec;
              IF NOT TmpEstLineRec.FIND('=') THEN BEGIN
                CompressedTotal := CheckSameProperty(lvLoopCount);
                IF CompressedTotal > 0 THEN BEGIN
                  PurchLineRec.INIT;
                  NextLineNo := NextLineNo + 10000;
                  PurchLineRec."Document Type"  := IPurchLineRec."Document Type";
                  PurchLineRec."Document No." := IPurchLineRec."Document No.";
                  PurchLineRec."Line No." := NextLineNo;
                  PurchLineRec."Input by" := USERID; //DP00469
                  PurchLineRec."Input Date" := TODAY; //DP00469
                  PurchLineRec.INSERT;
                  PurchLineCounter := PurchLineCounter + 1;
                  PurchLineRec.Type := PurchLineRec.Type::"G/L Account";
                  PurchLineRec.VALIDATE("Currency Code", IPurchLineRec."Currency Code");
                  PurchLineRec.VALIDATE("Job No.", EstRec."Project No.");
                  PurchLineRec.VALIDATE("Estimate No.", EstRec."No.");

                  CASE lvLoopCount OF
                    1: BEGIN
                         PurchLineRec.VALIDATE("Purchase Action", EstLineRec."Purchase Action Mat.");
                         PurchLineRec."Purchase Phase" := EstLineRec."Purchase Phase Mat.";
                         PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Material;
                         PurchLineRec."Shortcut Dimension 2 Code" := TestCostObject;
                         IF ICloseLine THEN
                           EstLineRec."Advised Mat." := TRUE;
                       END;
                    2: BEGIN
                         PurchLineRec.VALIDATE("Purchase Action", EstLineRec."Purchase Action Subc.");
                         PurchLineRec."Purchase Phase" := EstLineRec."Purchase Phase Subc.";
                         PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Subcontracting;
                         PurchLineRec."Shortcut Dimension 2 Code" := TestCostObject;
                         IF ICloseLine THEN
                           EstLineRec."Advised Subc." := TRUE;
                       END;
                    3: BEGIN
                         PurchLineRec.VALIDATE("Purchase Action", EstLineRec."Purchase Action Plant");
                         PurchLineRec."Purchase Phase" := EstLineRec."Purchase Phase Plant";
                         PurchLineRec."Cost Type" := PurchLineRec."Cost Type"::Plant;
                         PurchLineRec."Shortcut Dimension 2 Code" := TestCostObject;
                         IF ICloseLine THEN
                           EstLineRec."Advised Plant" := TRUE;
                       END;
                  END;

                  DimMgt.GetDimValueRec(2, PurchLineRec."Shortcut Dimension 2 Code", DimValRec, TRUE, '');
                  SavedCostObject := PurchLineRec."Shortcut Dimension 2 Code";

                  PurchLineRec.VALIDATE("Unit of Measure Code", EstLineRec."Unit of Measure");
                  IF ItemRec.GET(EstLineRec."Item No.") THEN
                   PurchLineRec."Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec, PurchLineRec."Unit of Measure Code"
      );
                  IF PurchHeaderRec."Amounts only" THEN BEGIN
                    PurchLineRec.VALIDATE("Direct Unit Cost", CompressedTotal);
                  END ELSE BEGIN
                    PurchLineRec.VALIDATE(Quantity, CompressedTotal);
                  END;

                  IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Material THEN BEGIN
                    PurchLineRec."Item No." := EstLineRec."Item No.";
                    PurchLineRec.Manufacturer := EstLineRec.Manufacturer;
                    PurchLineRec."Basic Item" := EstLineRec."Basic Item";
                    PurchLineRec."Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
                    PurchLineRec."Trade Item" := EstLineRec."Trade Item";
                    IF EstLineRec."Item No." <> '' THEN BEGIN
                      PurchLineRec."Item No." := '';  //check on xRec in validate itemdata
                      PurchLineRec.VALIDATE("Item No.", EstLineRec."Item No.");
                    END ELSE BEGIN
                      IF EstLineRec."Trade Item" <> '' THEN BEGIN
                        PurchLineRec."Trade Item" := '';
                        PurchLineRec.VALIDATE("Trade Item", EstLineRec."Trade Item");
                      END ELSE BEGIN
                        IF EstLineRec."Basic Item" <> '' THEN BEGIN
                          PurchLineRec."Basic Item" := '';
                          PurchLineRec.VALIDATE("Basic Item", EstLineRec."Basic Item");
                        END;
                      END;
                    END;
                  END;

                  IF PurchHeaderRec."Amounts only" THEN
                    PurchLineRec.VALIDATE("Direct Unit Cost", CompressedTotal);

                  PurchLineRec.VALIDATE("Shortcut Dimension 2 Code", SavedCostObject);
                  PurchLineRec."Posting Date" := PurchHeaderRec."Posting Date";
                  PurchLineRec.VALIDATE("Expected Receipt Date", EstRec."Reference Date (Rate)");
                  PurchLineRec."Cost Component" := EstLineRec."Cost Component";
                  PurchLineRec.Description := COPYSTR(EstLineRec.Description, 1, 50);
                  PurchLineRec."Description 2" := COPYSTR(EstLineRec.Description, 51, 50);
                  PurchLineRec.VALIDATE(Text, EstLineRec."External Text");
                  IF PurchHeaderRec."Amounts only" THEN
                    PurchLineRec.InitAmntToReceive;
                  PurchLineRec."Modified by" := USERID; //DP00469
                  PurchLineRec."Last Date Modified" := TODAY;//DP00469
                  PurchLineRec.MODIFY;
                  PurchLineRec.CreatePurchOrderControl(FALSE);
                END;
              END ELSE BEGIN
                IF ICloseLine THEN
                  CASE lvLoopCount OF
                    1: EstLineRec."Advised Mat." := TRUE;
                    2: EstLineRec."Advised Subc." := TRUE;
                    3: EstLineRec."Advised Plant" := TRUE;
                  END;
              END;

              IF ICloseLine THEN
                EstLineRec.MODIFY;
            END;
          UNTIL EstLineRec.NEXT = 0;
      END;

      IF RcplineRec.FINDSET(ICloseLine, FALSE) THEN BEGIN
        REPEAT

          //Hierin bovenstaande van estimate lines kopieren voor recipe lines

        UNTIL RcplineRec.NEXT = 0;
      END;

      END;
    END;

    PROCEDURE CheckSameProperty@1100485002(lvLoopCount@1100485000 : Integer) SubTotal : Decimal;
    VAR
      lvEstLineRec@1210190000 : Record 11012154;
    BEGIN
      //totaal telling voor gelijksoortige regels

      IF PurchHeaderRec."Amounts only" THEN BEGIN
        CASE lvLoopCount OF
          1: BEGIN
               SubTotal := EstLineRec."Cumulative Material";
             END;
          2: BEGIN
               SubTotal := EstLineRec."Cumulative Subcontracting";
             END;
          3: BEGIN
               SubTotal := EstLineRec."Cumulative Plant";
             END;
        END;
      END ELSE
        SubTotal := EstLineRec."Part Quantity" * EstLineRec.Quantity * EstLineRec."Time Quantity";

      lvEstLineRec.COPY(EstLineRec);

      lvEstLineRec.SETRANGE("Estimate No.");
      lvEstLineRec.SETRANGE("Item No.");
      lvEstLineRec.SETRANGE("Basic Item");
      lvEstLineRec.SETRANGE(Manufacturer);
      lvEstLineRec.SETRANGE("Trade Item");
      lvEstLineRec.SETRANGE("Vendor (Trade Item)");
      lvEstLineRec.SETRANGE("Cost Component");

      lvEstLineRec.SETRANGE(Description, EstLineRec.Description);
      lvEstLineRec.SETRANGE("Unit of Measure", EstLineRec."Unit of Measure");
      lvEstLineRec.SETRANGE("Purchase Route Reference", EstLineRec."Purchase Route Reference");
      lvEstLineRec.SETRANGE("Price Agreement", EstLineRec."Price Agreement");
      IF EstLineRec.Vendor <> '' THEN
        lvEstLineRec.SETRANGE(Vendor, EstLineRec.Vendor);
      lvEstLineRec.SETRANGE("External Text", EstLineRec."External Text");

      lvEstLineRec.SETRANGE("Material Price");
      lvEstLineRec.SETRANGE("Subcontracting Price");
      lvEstLineRec.SETRANGE("Plant Price");

      lvEstLineRec.SETRANGE("Cost Object Labor");
      lvEstLineRec.SETRANGE("Cost Object Subcontracting");
      lvEstLineRec.SETRANGE("Cost Object Plant");

      lvEstLineRec.SETRANGE("Purchase Action Mat.");
      lvEstLineRec.SETRANGE("Purchase Action Subc.");
      lvEstLineRec.SETRANGE("Purchase Action Plant");

      CASE lvLoopCount OF
        1: BEGIN
             lvEstLineRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
             lvEstLineRec.SETRANGE("Item No.", EstLineRec."Item No.");
             lvEstLineRec.SETRANGE("Basic Item", EstLineRec."Basic Item");
             lvEstLineRec.SETRANGE(Manufacturer, EstLineRec.Manufacturer);
             lvEstLineRec.SETRANGE("Trade Item", EstLineRec."Trade Item");
             lvEstLineRec.SETRANGE("Vendor (Trade Item)", EstLineRec."Vendor (Trade Item)");
             lvEstLineRec.SETRANGE("Material Price", EstLineRec."Material Price");
             lvEstLineRec.SETRANGE("Purchase Action Mat.", EstLineRec."Purchase Action Mat.");

             lvEstLineRec.SETRANGE("Cost Object Material", EstLineRec."Cost Object Material");
           END;
        2: BEGIN
             lvEstLineRec.SETRANGE("Purchase Action Subc.", EstLineRec."Purchase Action Subc.");
             lvEstLineRec.SETRANGE("Cost Object Subcontracting", EstLineRec."Cost Object Subcontracting");
             lvEstLineRec.SETRANGE("Subcontracting Price", EstLineRec."Subcontracting Price");
           END;
        3: BEGIN
             lvEstLineRec.SETRANGE("Purchase Action Plant", EstLineRec."Purchase Action Plant");
             lvEstLineRec.SETRANGE("Cost Object Plant", EstLineRec."Cost Object Plant");
             lvEstLineRec.SETRANGE("Plant Price", EstLineRec."Plant Price");
           END;
      END;

      IF lvEstLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF (lvEstLineRec."Sub-Estimate No." <> EstLineRec."Sub-Estimate No.") OR
             (lvEstLineRec."Part Group" <> EstLineRec."Part Group") OR
             (lvEstLineRec.Part <> EstLineRec.Part) OR
             (lvEstLineRec."Line No." <> EstLineRec."Line No.")
          THEN BEGIN
            TmpEstLineRec := lvEstLineRec;
            IF TmpEstLineRec.INSERT THEN;

            IF PurchHeaderRec."Amounts only" THEN BEGIN
              CASE lvLoopCount OF
                1: BEGIN
                     SubTotal := SubTotal + lvEstLineRec."Cumulative Material";
                   END;
                2: BEGIN
                     SubTotal := SubTotal + lvEstLineRec."Cumulative Subcontracting";
                   END;
                3: BEGIN
                     SubTotal := SubTotal + lvEstLineRec."Cumulative Plant";
                   END;
              END;
            END ELSE
              SubTotal := SubTotal + lvEstLineRec."Part Quantity" * lvEstLineRec.Quantity * lvEstLineRec."Time Quantity";
          END;
        UNTIL lvEstLineRec.NEXT = 0;
      END;

      EXIT(SubTotal);
    END;

    BEGIN
    END.
  }
}

