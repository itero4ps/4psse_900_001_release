OBJECT Codeunit 11012194 Exchange Mgt (4PS-Mobile)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11020444;
    OnRun=BEGIN
            IF ("Work Order No." <> '') OR ("Resource No. (Employee)" <> '') THEN  //Only Run from C11229164 allowed
              ProcessReceivedDebriefMess(Rec);
          END;

  }
  CODE
  {
    VAR
      LogbookRec@1100485003 : Record 11012677;
      ErrorRec@1100485005 : Record 11012678;
      XMLEncodeCU@1100485001 : Codeunit 11012195;
      XMLDecodeCU@1100485000 : Codeunit 11012198;
      ReqHandlerCU@1100485002 : Codeunit 11012193;
      PostDebriefCU@1100485004 : Codeunit 11012199;
      Text001@1100485006 : TextConst 'ENU=Error during posting the debrief line';
      CurrDateTime@1100528000 : DateTime;

    PROCEDURE SendMobileSetup@1100525005(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";ResourceNo@1100525000 : Code[20]) : Boolean;
    VAR
      FPSMobileSetup@1100485006 : Record 11012676;
      ServiceSetup@1100528100 : Record 11012800;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT ServiceSetup.GET() THEN
        ServiceSetup.INIT;
      IF FPSMobileSetup.GET() THEN BEGIN
        lvXMLDocOut := lvXMLDocOut.XmlDocument;
        XMLEncodeCU.MobileSetup(FPSMobileSetup, ServiceSetup, ResourceNo, lvXMLDocOut);
        ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
        CLEAR(lvXMLDocOut);
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendMobileUserSettings@1100409002(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";ComputerName@1100409002 : Text;WindowsUserName@1100409003 : Text) : Boolean;
    VAR
      MobileUserSettings1@1100409012 : Record 11125654;
      MobileUserSettings2@1100409004 : Record 11125654;
      MobileUserSettings3@1100409005 : Record 11125654;
      FieldTable@1100409009 : Record 2000000041;
      RecRef1@1100409000 : RecordRef;
      RecRef2@1100409006 : RecordRef;
      RecRef3@1100409013 : RecordRef;
      FldRef1@1100409008 : FieldRef;
      FldRef2@1100409007 : FieldRef;
      FldRef3@1100409014 : FieldRef;
      XMLDocument@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      TextValue@1100409011 : Text;
      DecimalValue@1100409015 : Decimal;
      OptionValue@1100409010 : Integer;
    BEGIN
      IF (ComputerName = '') OR (WindowsUserName = '') THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;

      MobileUserSettings1.SETFILTER("Computer Name", '%1', '');
      MobileUserSettings1.SETFILTER("Windows User Name", '%1', '');
      MobileUserSettings1.SETFILTER("Resource No. (Employee)", '%1', '');
      IF NOT MobileUserSettings1.FINDFIRST THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);
        EXIT(TRUE);
      END;

      MobileUserSettings2."Computer Name" := ComputerName;
      MobileUserSettings2."Windows User Name" := WindowsUserName;
      IF NOT MobileUserSettings2.FIND THEN BEGIN
        MobileUserSettings2.INSERT;
        ReqHandlerCU.EndTransaction(InMsg);
        EXIT(TRUE);
      END;

      RecRef1.GETTABLE(MobileUserSettings1);
      RecRef2.GETTABLE(MobileUserSettings2);
      RecRef3.GETTABLE(MobileUserSettings3);

      FieldTable.SETRANGE(TableNo, RecRef1.NUMBER);
      FieldTable.SETRANGE(Enabled, TRUE);
      IF FieldTable.FINDSET THEN BEGIN
        REPEAT
          FldRef1 := RecRef1.FIELD(FieldTable."No.");
          FldRef2 := RecRef2.FIELD(FieldTable."No.");
          FldRef3 := RecRef3.FIELD(FieldTable."No.");
          CASE FieldTable.Type OF
            FieldTable.Type::Code, FieldTable.Type::Text :
              BEGIN
                IF EVALUATE(TextValue, FORMAT(FldRef2.VALUE)) THEN
                  IF TextValue <> '' THEN
                    FldRef3.VALUE := FldRef2.VALUE
                  ELSE
                    FldRef3.VALUE := FldRef1.VALUE;
              END;
            FieldTable.Type::Integer, FieldTable.Type::Decimal :
              BEGIN
                IF EVALUATE(DecimalValue, FORMAT(FldRef2.VALUE)) THEN
                  IF DecimalValue <> 0 THEN
                    FldRef3.VALUE := FldRef2.VALUE
                  ELSE
                    FldRef3.VALUE := FldRef1.VALUE;
              END;
            FieldTable.Type::Option :
              BEGIN
                OptionValue := FldRef2.VALUE;
                IF OptionValue > 0 THEN
                  FldRef3.VALUE := FldRef2.VALUE
                ELSE
                  FldRef3.VALUE := FldRef1.VALUE;
              END;
          END;
        UNTIL FieldTable.NEXT = 0;

        RecRef3.SETTABLE(MobileUserSettings3);
      END;

      XMLDocument := XMLDocument.XmlDocument;
      XMLEncodeCU.MobileUserSettings(MobileUserSettings3, XMLDocument);
      ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
      CLEAR(XMLDocument);

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE GetDatabaseName@1100528113() : Text[1024];
    VAR
      ServerEnvironmentManagement@1100525000 : Codeunit 11012284;
      ServerName@1100528106 : Text[512];
      DatabaseName@1100528105 : Text[512];
    BEGIN
      ServerName := ServerEnvironmentManagement.GetDatabaseServerName;
      IF ServerName = '' THEN
        ServerName := 'unknown';

      DatabaseName := ServerEnvironmentManagement.GetDatabaseName;
      IF DatabaseName = '' THEN
        DatabaseName := 'unknown';

      EXIT(STRSUBSTNO('%1:%2', ServerName, DatabaseName));
    END;

    PROCEDURE SendApplicationVersion@1100525006(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100485006 : Record 11012676;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF lvRec.GET THEN BEGIN
        lvXMLDocOut := lvXMLDocOut.XmlDocument;
        XMLEncodeCU.ApplicationVersion(lvRec, lvXMLDocOut, GetDatabaseName());
        ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
        CLEAR(lvXMLDocOut);
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendOrderKind@1100485001(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceOrderIndication@1100485006 : Record 11012837;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH ServiceOrderIndication DO BEGIN
        FILTERGROUP(8);
        SETRANGE(Indication, Indication::Kind);
        FILTERGROUP(0);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.OrderKind(ServiceOrderIndication, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Order Indication");
        DeletedDataMOB.SETRANGE("Code 1", FORMAT(ServiceOrderIndication.Indication::Kind, 0, 2));
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceOrderIndication.GET(CodeToInt(DeletedDataMOB."Code 1"), DeletedDataMOB."Code 2") THEN BEGIN
              ServiceOrderIndication.INIT;
              ServiceOrderIndication.Indication := CodeToInt(DeletedDataMOB."Code 1");
              ServiceOrderIndication.Code := DeletedDataMOB."Code 2";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.OrderKind(ServiceOrderIndication, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendOrderType@1100485002(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceOrderIndication@1100485006 : Record 11012837;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH ServiceOrderIndication DO BEGIN
        FILTERGROUP(8);
        SETRANGE(Indication, Indication::Type);
        FILTERGROUP(0);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.OrderType(ServiceOrderIndication, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Order Indication");
        DeletedDataMOB.SETRANGE("Code 1", FORMAT(ServiceOrderIndication.Indication::Type, 0, 2));
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceOrderIndication.GET(CodeToInt(DeletedDataMOB."Code 1"), DeletedDataMOB."Code 2") THEN BEGIN
              ServiceOrderIndication.INIT;
              ServiceOrderIndication.Indication := CodeToInt(DeletedDataMOB."Code 1");
              ServiceOrderIndication.Code := DeletedDataMOB."Code 2";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.OrderType(ServiceOrderIndication, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendProblem@1100485003(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceAnalysis@1100485006 : Record 11012842;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH ServiceAnalysis DO BEGIN
        FILTERGROUP(8);
        SETRANGE("Analysis Type", "Analysis Type"::Problem);
        FILTERGROUP(0);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.Problem(ServiceAnalysis, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Analysis");
        DeletedDataMOB.SETRANGE("Code 1", FORMAT(ServiceAnalysis."Analysis Type"::Problem, 0, 2));
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceAnalysis.GET(CodeToInt(DeletedDataMOB."Code 1"), DeletedDataMOB."Code 2") THEN BEGIN
              ServiceAnalysis.INIT;
              ServiceAnalysis."Analysis Type" := CodeToInt(DeletedDataMOB."Code 1");
              ServiceAnalysis.Code := DeletedDataMOB."Code 2";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.Problem(ServiceAnalysis, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendCause@1100485004(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528701 : Date) : Boolean;
    VAR
      ServiceAnalysis@1100485006 : Record 11012842;
      DeletedDataMOB@1100528700 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH ServiceAnalysis DO BEGIN
        FILTERGROUP(8);
        SETRANGE("Analysis Type", "Analysis Type"::Cause);
        FILTERGROUP(0);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.Cause(ServiceAnalysis, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Analysis");
        DeletedDataMOB.SETRANGE("Code 1", FORMAT(ServiceAnalysis."Analysis Type"::Cause, 0, 2));
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceAnalysis.GET(CodeToInt(DeletedDataMOB."Code 1"), DeletedDataMOB."Code 2") THEN BEGIN
              ServiceAnalysis.INIT;
              ServiceAnalysis."Analysis Type" := CodeToInt(DeletedDataMOB."Code 1");
              ServiceAnalysis.Code := DeletedDataMOB."Code 2";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.Cause(ServiceAnalysis, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendSolution@1100485005(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceAnalysis@1100485006 : Record 11012842;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH ServiceAnalysis DO BEGIN
        FILTERGROUP(8);
        SETRANGE("Analysis Type", "Analysis Type"::Solution);
        FILTERGROUP(0);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.Solution(ServiceAnalysis, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Analysis");
        DeletedDataMOB.SETRANGE("Code 1", FORMAT(ServiceAnalysis."Analysis Type"::Solution, 0, 2));
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceAnalysis.GET(CodeToInt(DeletedDataMOB."Code 1"), DeletedDataMOB."Code 2") THEN BEGIN
              ServiceAnalysis.INIT;
              ServiceAnalysis."Analysis Type" := CodeToInt(DeletedDataMOB."Code 1");
              ServiceAnalysis.Code := DeletedDataMOB."Code 2";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.Solution(ServiceAnalysis, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendProblemDiscipline@1100409003(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";ServiceAnalysis@1100409000 : Record 11012842) : Boolean;
    VAR
      ServiceAnalysisDiscipline@1100485006 : Record 11072198;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH ServiceAnalysisDiscipline DO BEGIN
        SETRANGE("Analysis Type", "Analysis Type"::Problem);
        SETRANGE("Analysis Code", ServiceAnalysis.Code);
        IF FINDSET THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.ProblemDiscipline(ServiceAnalysisDiscipline, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendProblemDiscipline2@1100525037(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceAnalysisDiscipline@1100525000 : Record 11072198;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // DP00981
      WITH ServiceAnalysisDiscipline DO BEGIN
        SETRANGE("Analysis Type", "Analysis Type"::Problem);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.ProblemDiscipline(ServiceAnalysisDiscipline, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Analysis Discipline");
        DeletedDataMOB.SETRANGE("Code 1", FORMAT(ServiceAnalysisDiscipline."Analysis Type"::Problem, 0, 2));
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceAnalysisDiscipline.GET(CodeToInt(DeletedDataMOB."Code 1"), DeletedDataMOB."Code 2", DeletedDataMOB."Code 3") THEN BEGIN
              ServiceAnalysisDiscipline.INIT;
              ServiceAnalysisDiscipline."Analysis Type" := CodeToInt(DeletedDataMOB."Code 1");
              ServiceAnalysisDiscipline."Analysis Code" := DeletedDataMOB."Code 2";
              ServiceAnalysisDiscipline.Discipline := DeletedDataMOB."Code 3";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.ProblemDiscipline(ServiceAnalysisDiscipline, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendProblemCause@1100409004(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";ServiceAnalysis@1100409000 : Record 11012842) : Boolean;
    VAR
      ServiceAnalysisRelation@1100485006 : Record 11072199;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // obsolete from version 210
      WITH ServiceAnalysisRelation DO BEGIN
        SETRANGE("Problem Code", ServiceAnalysis.Code);
        SETRANGE("Analysis Type", "Analysis Type"::Cause);
        IF FINDSET THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.ProblemCause(ServiceAnalysisRelation, XMLDocument);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendProblemSolution@1100409005(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";ServiceAnalysis@1100409000 : Record 11012842) : Boolean;
    VAR
      ServiceAnalysisRelation@1100485006 : Record 11072199;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // obsolete from version 210
      WITH ServiceAnalysisRelation DO BEGIN
        SETRANGE("Problem Code", ServiceAnalysis.Code);
        SETRANGE("Analysis Type", "Analysis Type"::Solution);
        IF FINDSET THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.ProblemSolution(ServiceAnalysisRelation, XMLDocument);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceAnalysisRelation@1100409007(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceAnalysisRelation@1100485006 : Record 11072238;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100409000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH ServiceAnalysisRelation DO BEGIN
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.ServiceAnalysisRelation(ServiceAnalysisRelation, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Analysis Relation");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceAnalysisRelation.GET(DeletedDataMOB."Code 1", DeletedDataMOB."Code 2", DeletedDataMOB."Code 3") THEN BEGIN
              ServiceAnalysisRelation.INIT;
              ServiceAnalysisRelation."Problem Code" := DeletedDataMOB."Code 1";
              ServiceAnalysisRelation."Cause Code" := DeletedDataMOB."Code 2";
              ServiceAnalysisRelation."Solution Code" := DeletedDataMOB."Code 3";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.ServiceAnalysisRelation(ServiceAnalysisRelation, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceAnalysisSetup@1100528701(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      ServiceAnalysisSetup@1100525002 : Record 11072232;
      XMLDocument@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF ServiceAnalysisSetup.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.ServiceAnalysisSetup(ServiceAnalysisSetup, XMLDocument);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL ServiceAnalysisSetup.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceLocationType@1100525038(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceLocationType@1100485006 : Record 11072280;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // DP00981
      ServiceLocationType.SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
      IF ServiceLocationType.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.ServiceLocationType(ServiceLocationType, XMLDocument, FALSE);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL ServiceLocationType.NEXT = 0;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Location Type");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceLocationType.GET(DeletedDataMOB."Code 1") THEN BEGIN
              ServiceLocationType.INIT;
              ServiceLocationType.Code := DeletedDataMOB."Code 1";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.ServiceLocationType(ServiceLocationType, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceLocationTypeRoom@1100525039(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceLocationTypeRoom@1100485006 : Record 11072281;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // DP00981
      ServiceLocationTypeRoom.SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
      IF ServiceLocationTypeRoom.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.ServiceLocationTypeRoom(ServiceLocationTypeRoom, XMLDocument, FALSE);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL ServiceLocationTypeRoom.NEXT = 0;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Location Type - Room");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceLocationTypeRoom.GET(DeletedDataMOB."Code 1", DeletedDataMOB."Code 2", DeletedDataMOB."Code 3") THEN BEGIN
              ServiceLocationTypeRoom.INIT;
              ServiceLocationTypeRoom."Service Location Type" := DeletedDataMOB."Code 1";
              ServiceLocationTypeRoom."Customer No." := DeletedDataMOB."Code 2";
              ServiceLocationTypeRoom."Room (SUP)" := DeletedDataMOB."Code 3";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.ServiceLocationTypeRoom(ServiceLocationTypeRoom, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendSUPRoom@1100525032(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      SUPRoom@1100485006 : Record 11071950;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // DP00981
      SUPRoom.SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
      IF SUPRoom.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.SUPRoom(SUPRoom, XMLDocument, FALSE);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL SUPRoom.NEXT = 0;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"SUP Room");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT SUPRoom.GET(DeletedDataMOB."Code 1", DeletedDataMOB."Code 2") THEN BEGIN
              SUPRoom.INIT;
              SUPRoom."Customer No." := DeletedDataMOB."Code 1";
              SUPRoom.Code := DeletedDataMOB."Code 2";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.SUPRoom(SUPRoom, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendSUPPart@1100525033(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      SUPPart@1100485006 : Record 11071951;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // DP00981
      SUPPart.SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
      IF SUPPart.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.SUPPart(SUPPart, XMLDocument, FALSE);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL SUPPart.NEXT = 0;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"SUP Part");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT SUPPart.GET(DeletedDataMOB."Code 1", DeletedDataMOB."Code 2") THEN BEGIN
              SUPPart.INIT;
              SUPPart."Customer No." := DeletedDataMOB."Code 1";
              SUPPart.Code := DeletedDataMOB."Code 2";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.SUPPart(SUPPart, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendSUPRoomPart@1100525035(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      SUPRoomPart@1100485006 : Record 11072282;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // DP00981
      SUPRoomPart.SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
      IF SUPRoomPart.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.SUPRoomPart(SUPRoomPart, XMLDocument, FALSE);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL SUPRoomPart.NEXT = 0;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"SUP Room - Part");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT SUPRoomPart.GET(DeletedDataMOB."Code 1", DeletedDataMOB."Code 2", DeletedDataMOB."Code 3") THEN BEGIN
              SUPRoomPart.INIT;
              SUPRoomPart."Customer No." := DeletedDataMOB."Code 1";
              SUPRoomPart."Room (SUP)" := DeletedDataMOB."Code 2";
              SUPRoomPart."Part (SUP)" := DeletedDataMOB."Code 3";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.SUPRoomPart(SUPRoomPart, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendSUPPartProblem@1100525036(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      SUPPartServiceAnalysis@1100485006 : Record 11072283;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // DP00981
      SUPPartServiceAnalysis.SETRANGE("Analysis Type", SUPPartServiceAnalysis."Analysis Type"::Problem);
      SUPPartServiceAnalysis.SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
      IF SUPPartServiceAnalysis.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.SUPPartProblem(SUPPartServiceAnalysis, XMLDocument, FALSE);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL SUPPartServiceAnalysis.NEXT = 0;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"SUP Part - Service Analysis");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT SUPPartServiceAnalysis.GET(DeletedDataMOB."Code 1", DeletedDataMOB."Code 2", CodeToInt(DeletedDataMOB."Code 3"), DeletedDataMOB."Code 4") THEN BEGIN
              SUPPartServiceAnalysis.INIT;
              SUPPartServiceAnalysis."Customer No." := DeletedDataMOB."Code 1";
              SUPPartServiceAnalysis."Part (SUP)" := DeletedDataMOB."Code 2";
              SUPPartServiceAnalysis."Analysis Type" := CodeToInt(DeletedDataMOB."Code 3");
              SUPPartServiceAnalysis."Analysis Code" := DeletedDataMOB."Code 4";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.SUPPartProblem(SUPPartServiceAnalysis, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServicePriority@1100485038(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServicePriority@1100485006 : Record 11012829;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH ServicePriority DO BEGIN
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.ServicePriority(ServicePriority, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Priority");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServicePriority.GET(DeletedDataMOB."Code 1") THEN BEGIN
              ServicePriority.INIT;
              ServicePriority.Code := DeletedDataMOB."Code 1";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.ServicePriority(ServicePriority, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendUnitOfMeasure@1100485006(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];Company@1100409000 : Text;LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      UnitofMeasure@1100485006 : Record 204;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ExportFilterSetMgtMobile@1100525001 : Codeunit 11012200;
    BEGIN
      WITH UnitofMeasure DO BEGIN
        IF FilterSetCode <> '' THEN
          ExportFilterSetMgtMobile.SetExportFiltersOnUnitOfMeasur(FilterSetCode, Company, UnitofMeasure);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.UnitOfMeasure(UnitofMeasure, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Unit of Measure");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT UnitofMeasure.GET(DeletedDataMOB."Code 1") THEN BEGIN
              UnitofMeasure.INIT;
              UnitofMeasure.Code := DeletedDataMOB."Code 1";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.UnitOfMeasure(UnitofMeasure, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendTerritory@1100485039(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      Territory@1100485006 : Record 286;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH Territory DO BEGIN
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.Territory(Territory, XMLDocument);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendCostComponent@1100485007(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      CostComponent@1100485006 : Record 11012012;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH CostComponent DO BEGIN
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.CostComponent(CostComponent, XMLDocument);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendCostCenter@1100485040(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvGLSetupRec@1100485001 : Record 98;
      lvRec@1100485006 : Record 349;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        lvGLSetupRec.GET;
        FILTERGROUP(8);
        SETRANGE("Dimension Code", lvGLSetupRec."Global Dimension 1 Code");
        SETRANGE("Global Dimension No.", 1);
        FILTERGROUP(0);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.CostCenter(lvRec, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendCostObject@1100485008(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];Company@1100409000 : Text) : Boolean;
    VAR
      lvGLSetupRec@1100485001 : Record 98;
      lvRec@1100485006 : Record 349;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvExportFilterMgtCU@1100525001 : Codeunit 11012200;
    BEGIN
      WITH lvRec DO BEGIN
        lvGLSetupRec.GET;
        IF FilterSetCode <> '' THEN
          lvExportFilterMgtCU.SetExportFiltersOnCostObject(FilterSetCode, Company, lvRec);
        FILTERGROUP(8);
        SETRANGE("Dimension Code", lvGLSetupRec."Global Dimension 2 Code");
        SETRANGE("Global Dimension No.", 2);
        FILTERGROUP(0);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.CostObject(lvRec, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendWageComponent@1100485009(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];Company@1100409000 : Text;EmployeeNo@1100527000 : Code[20];LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      WageComponent@1100485006 : Record 11012014;
      Employee@1100527001 : Record 5200;
      TimeshPortAllowancePerDay@1100528100 : Record 11125855;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ExportFilterSetMgtMobile@1100525001 : Codeunit 11012200;
    BEGIN
      WITH WageComponent DO BEGIN
        IF FilterSetCode <> '' THEN
          ExportFilterSetMgtMobile.SetExportFiltersOnWageComp(FilterSetCode, Company, WageComponent);
        FILTERGROUP(8);
        SETFILTER("Component Type", '%1|%2', "Component Type"::Hours, "Component Type"::Expenses);
        FILTERGROUP(0);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            IF TimeshPortAllowancePerDay.READPERMISSION THEN BEGIN
              IF NOT Employee.GET(EmployeeNo) THEN BEGIN
                Employee."No." := EmployeeNo;
                Employee.INIT;
              END;
              TimeshPortAllowancePerDay.GetAllowancePerDay(WageComponent.Code, Employee, TimeshPortAllowancePerDay);
            END;
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.WageComponent(WageComponent, TimeshPortAllowancePerDay, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Wage Component");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT WageComponent.GET(DeletedDataMOB."Code 1") THEN BEGIN
              WageComponent.INIT;
              WageComponent.Code := DeletedDataMOB."Code 1";
              TimeshPortAllowancePerDay.INIT;
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.WageComponent(WageComponent, TimeshPortAllowancePerDay, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendCostCode@1100485010(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];Company@1100409000 : Text;LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      CostCode@1100485006 : Record 11012083;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ExportFilterSetMgtMobile@1100525001 : Codeunit 11012200;
    BEGIN
      WITH CostCode DO BEGIN
        IF FilterSetCode <> '' THEN
          ExportFilterSetMgtMobile.SetExportFiltersOnCostCode(FilterSetCode, Company, CostCode);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.CostCode(CostCode, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Cost Code");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT CostCode.GET(DeletedDataMOB."Code 1") THEN BEGIN
              CostCode.INIT;
              CostCode.Code := DeletedDataMOB."Code 1";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.CostCode(CostCode, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendDebriefTextRubric@1100485011(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      DebriefTextRubric@1100485006 : Record 11012885;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH DebriefTextRubric DO BEGIN
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.DebriefTextRubric(DebriefTextRubric, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Debrief Text Rubric");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT DebriefTextRubric.GET(DeletedDataMOB."Code 1") THEN BEGIN
              DebriefTextRubric.INIT;
              DebriefTextRubric.Code := DeletedDataMOB."Code 1";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.DebriefTextRubric(DebriefTextRubric, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendItem@1100485012(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];LocationCode@1100409001 : Code[20];Company@1100409000 : Text;LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      Item@1100485006 : Record 27;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ExportFilterSetMgtMobile@1100525001 : Codeunit 11012200;
    BEGIN
      WITH Item DO BEGIN
        IF FilterSetCode <> '' THEN
          ExportFilterSetMgtMobile.SetExportFiltersOnItem(FilterSetCode, Company, Item);
        FILTERGROUP(8);
        SETRANGE("Active in FSA", TRUE);
        FILTERGROUP(0);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            IF LocationCode <> '' THEN BEGIN
              SETFILTER("Location Filter", LocationCode);
              CALCFIELDS(Inventory);
            END;
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.Item(Item, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::Item);
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT Item.GET(DeletedDataMOB."Code 1") THEN BEGIN
              Item.INIT;
              Item."No." := DeletedDataMOB."Code 1";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.Item(Item, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendResource@1100529002(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];Company@1100409000 : Text) : Boolean;
    VAR
      Resource@1100485006 : Record 11229278;
      CompanyPlanGroup@1100525003 : Record 11229300;
      Employee@1100529000 : Record 5200;
      Vendor@1100525002 : Record 23;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ExportFilterSetMgtMobile@1100525001 : Codeunit 11012200;
    BEGIN
      WITH Resource DO BEGIN
        IF FilterSetCode <> '' THEN
          ExportFilterSetMgtMobile.SetExportFiltersOnResource(FilterSetCode, Company, Resource);
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            IF ("Source No." <> '') AND
               (CompanyPlanGroup.BelongsCompanyToCurrentCompanyPlanGroup(Resource.Company)) THEN BEGIN
              CASE Type OF
                Type::Employee:
                  BEGIN
                    Vendor.INIT;
                    Employee.RESET;
                    Employee.CHANGECOMPANY(Company);
                    ExportFilterSetMgtMobile.SetExportFiltersOnEmployee(FilterSetCode, Company, Employee);
                    Employee.FILTERGROUP(8);
                    Employee.SETRANGE("No.", Resource."Source No.");
                    Employee.FILTERGROUP(0);
                    IF Employee.FINDFIRST THEN BEGIN
                      XMLDocument := XMLDocument.XmlDocument;
                      XMLEncodeCU.Resource(Resource, XMLDocument, Employee, Vendor);
                      ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
                      CLEAR(XMLDocument);
                    END;
                  END;
                Type::Subcontractor:
                  BEGIN
                    Employee.INIT;
                    Vendor.RESET;
                    Vendor.CHANGECOMPANY(Company);
                    Vendor.SETRANGE("No.", Resource."Source No.");
                    IF Vendor.FINDFIRST THEN BEGIN
                      XMLDocument := XMLDocument.XmlDocument;
                      XMLEncodeCU.Resource(Resource, XMLDocument, Employee, Vendor);
                      ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
                      CLEAR(XMLDocument);
                    END;
                  END;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceLocation@1100485024(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];Company@1100409000 : Text;LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      ServiceLocation@1100485006 : Record 11012801;
      ServiceSetup@1210190000 : Record 11012800;
      DeletedDataMOB@1100528702 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ExportFilterSetMgtMobile@1100525001 : Codeunit 11012200;
    BEGIN
      WITH ServiceLocation DO BEGIN
        CHANGECOMPANY(Company);
        IF FilterSetCode <> '' THEN
          ExportFilterSetMgtMobile.SetExportFiltersOnServLoc(FilterSetCode, Company, ServiceLocation);
        IF NOT ServiceSetup.GET() THEN
          ServiceSetup.INIT;
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.ServiceLocation(ServiceLocation, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.CHANGECOMPANY(Company);
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Service Location");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT ServiceLocation.GET(DeletedDataMOB."Code 1") THEN BEGIN
              XMLDocument := XMLDocument.XmlDocument;
              ServiceLocation.INIT;
              ServiceLocation."No." := DeletedDataMOB."Code 1";
              XMLEncodeCU.ServiceLocation(ServiceLocation, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendWorkOrder@1100529000(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";ResourceNo@1100529000 : Code[20]) : Boolean;
    VAR
      lvRec@1100485006 : Record 11229279;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (ResourceNo = '') THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;

      WITH lvRec DO BEGIN
        SETCURRENTKEY("Resource No.", "Export to FSA");
        SETRANGE("Resource No.", ResourceNo);
        SETRANGE("Resource Type", "Resource Type"::Employee);
        SETRANGE("Export to FSA", TRUE);
        SETFILTER("Source No.", '<>%1', '');
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.WorkOrder(lvRec, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
            //* Do not reset "Export to FSA" (also do not fill DateTimeExport), that is done if WO is received in Mobile.
            //* Then there a status message (code 20) is returned. See CU11012199.
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendWorkOrderByOrderNo@1100528705(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      DebriefServiceOrderObject@1100528701 : Record 11125652;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // dp00276
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;

      DebriefServiceOrderObject.CHANGECOMPANY(WorkOrder."Source Company");
      DebriefServiceOrderObject.SETRANGE("Work Order No.", WorkOrder."No.");
      DebriefServiceOrderObject.SETRANGE("Resource No. (Employee)", WorkOrder."Resource No.");
      DebriefServiceOrderObject.SETFILTER(Status, '<>%1', DebriefServiceOrderObject.Status::Processed);
      IF NOT DebriefServiceOrderObject.ISEMPTY THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Not all lines have been processed. Send empty list
        EXIT(TRUE);
      END;

      DebriefServiceOrderObject.SETRANGE(Status);
      IF DebriefServiceOrderObject.FINDLAST THEN
        IF NOT DebriefServiceOrderObject."Last Object of Message" THEN BEGIN
          ReqHandlerCU.EndTransaction(InMsg); // Last object not last object of last message. Send empty list
          EXIT(TRUE);
        END;

      XMLDocument := XMLDocument.XmlDocument;
      XMLEncodeCU.WorkOrder(WorkOrder, XMLDocument);
      ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
      CLEAR(XMLDocument);

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendDeletedWorkOrder@1100525013(InMsg@1100525003 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";ResourceNo@1100525002 : Code[20]) : Boolean;
    VAR
      lvRec@1100525005 : Record 11229281;
      lvXMLDocOut@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        SETRANGE("Resource No.", ResourceNo);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.DeletedWorkOrder(lvRec, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendBudgetLine@1100485013(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012875;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Budget Type", "Budget Type"::Order);
        SETRANGE("Service Order No.", WorkOrder."Source No.");
        SETRANGE("Surcharge Line", FALSE); //mg, 12-05-2014: C015065
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.BudgetLine(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendContractAgreement@1100485019(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012882;
      ServOrder@1100529001 : Record 11012823;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        ServOrder.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT ServOrder.GET(WorkOrder."Source No.") THEN
           ServOrder."Service Contract No." := '';
        IF ServOrder."Service Contract No." <> '' THEN BEGIN
          CHANGECOMPANY(WorkOrder."Source Company");
          SETRANGE("Table Name", "Table Name"::"Service Contract");
          SETRANGE("No.", ServOrder."Service Contract No.");
          SETRANGE("Table Field", 0);  //db, 27-05-10: M13735
          SETRANGE("Active in FSA", TRUE);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.ContractAgreement(lvRec, WorkOrder, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendReportProcedureLocWO@1100485021(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100527000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012882;
      ServOrder@1100529001 : Record 11012823;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvExportFilterMgtCU@1100525002 : Codeunit 11012200;
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        ServOrder.CHANGECOMPANY(WorkOrder."Source Company");
        IF NOT ServOrder.GET(WorkOrder."Source No.") THEN
           ServOrder."Service Location No." := '';
        IF ServOrder."Service Location No." <> '' THEN BEGIN
          CHANGECOMPANY(WorkOrder."Source Company");
          SETRANGE("Table Name", "Table Name"::"Service Location");
          SETRANGE("No.", ServOrder."Service Location No.");
          SETRANGE("Active in FSA", TRUE);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.ReportProcedure(lvRec, WorkOrder."No.", lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendReportProcedureLocs@1100527001(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];Company@1100409000 : Text) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012882;
      ServLoc@1100525001 : Record 11012801;
      ServOrder@1100529001 : Record 11012823;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvExportFilterMgtCU@1100525002 : Codeunit 11012200;
    BEGIN
      WITH lvRec DO BEGIN
        IF FilterSetCode <> '' THEN
          lvExportFilterMgtCU.SetExportFiltersOnServLoc(FilterSetCode, Company, ServLoc);
        IF ServLoc.FINDSET(FALSE,FALSE) THEN BEGIN
          SETRANGE("Table Name", "Table Name"::"Service Location");
          SETRANGE("Active in FSA", TRUE);
          REPEAT
            SETRANGE("No.", ServLoc."No.");
            IF FINDSET(FALSE,FALSE) THEN BEGIN
              REPEAT
                lvXMLDocOut := lvXMLDocOut.XmlDocument;
                XMLEncodeCU.ReportProcedure(lvRec, '', lvXMLDocOut);
                ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
                CLEAR(lvXMLDocOut);
              UNTIL NEXT = 0;
            END;
          UNTIL ServLoc.NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendRelatedWorkOrders@1100485037(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100485001 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11229279;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;

      WITH lvRec DO BEGIN
        SETCURRENTKEY("Source Company", "Source Type", "Source No.");
        SETRANGE("Source Company", WorkOrder."Source Company");
        SETRANGE("Source Type", WorkOrder."Source Type");
        SETRANGE("Source No.", WorkOrder."Source No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.RelatedWorkOrders(lvRec, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendWorkOrderNoOfDecentralOrder@1100525007(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";MobileWorkOrderNo@1100525001 : Code[20];ResourceNo@1100525000 : Code[20]) : Boolean;
    VAR
      lvRec@1100485006 : Record 11125649;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(ResourceNo, MobileWorkOrderNo) AND (MobileWorkOrderNo <> '' ) THEN BEGIN
          lvXMLDocOut := lvXMLDocOut.XmlDocument;
          XMLEncodeCU.WorkOrderNoOfDecentralOrder(lvRec,lvXMLDocOut);
          ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
          CLEAR(lvXMLDocOut);
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendObjectNoByDecentralObject@1100525025(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100525001 : Record 11229279) : Boolean;
    VAR
      MobileDecentralObject@1100485006 : Record 11012688;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // dp00276
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;

      MobileDecentralObject.CHANGECOMPANY(WorkOrder."Source Company");
      MobileDecentralObject.SETRANGE("Work Order No.", WorkOrder."No.");
      MobileDecentralObject.SETRANGE("Resource No. (Employee)", WorkOrder."Resource No.");
      IF MobileDecentralObject.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.ObjectNoByDecentralObject(MobileDecentralObject, XMLDocument);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL MobileDecentralObject.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendExtraCost@1100525008(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11020344;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Entity Type", "Entity Type"::"Service Order");
        SETRANGE("Entity Code", WorkOrder."Source No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.ExtraCost(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendRelatedUsedItems@1100525009(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012825;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Service Order No.", WorkOrder."Source No.");
        SETRANGE("Cost Type", lvRec."Cost Type"::Material);
        SETRANGE("Extra Cost", FALSE);
        SETFILTER("Created by Work Order No.", '<>%1', WorkOrder."No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.CostPlus(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendRelatedWorkingTimes@1100525010(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012825;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Service Order No.", WorkOrder."Source No.");
        SETRANGE("Cost Type", lvRec."Cost Type"::Labor);
        SETRANGE("Extra Cost", FALSE);
        SETFILTER("Created by Work Order No.", '<>%1', WorkOrder."No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.CostPlus(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendRelatedExtraCosts@1100525011(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012825;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Service Order No.", WorkOrder."Source No.");
        SETRANGE("Extra Cost", TRUE);
        SETFILTER("Created by Work Order No.", '<>%1', WorkOrder."No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.CostPlus(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendRelatedItemsToOrder@1100525012(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012055;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Record Type", "Record Type"::ServOrder);
        SETRANGE("Service Order No.", WorkOrder."Source No.");
        SETRANGE("Decentral Created", TRUE);
        SETFILTER("Created by Work Order No.", '<>%1', WorkOrder."No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.AdviceOrderLine(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendCentralServiceOrderFields@1100525015(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012823;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("No.", WorkOrder."Source No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.CentralServiceOrderFields(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendHistoricWorkOrders@1210190000(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      ServiceOrder@1100485006 : Record 11012823;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      TmpHistServOrder@1210190000 : TEMPORARY Record 11012823;
      RelHistWorkOrder@1100525000 : Record 11229279;
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
      IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
        FillTmpHistoricOrdersTable(ServiceOrder, WorkOrder, TmpHistServOrder);
        WITH TmpHistServOrder DO BEGIN
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              RelHistWorkOrder.SETCURRENTKEY("Source Type","Source No."); // Do not filter on Source Company
              RelHistWorkOrder.SETRANGE("Source Type", WorkOrder."Source Type");
              RelHistWorkOrder.SETRANGE("Source No.", TmpHistServOrder."No.");
              RelHistWorkOrder.SETFILTER("No.", '<>%1', WorkOrder."No.");
              IF RelHistWorkOrder.FINDSET(FALSE,FALSE) THEN BEGIN
                REPEAT
                  lvXMLDocOut := lvXMLDocOut.XmlDocument;
                  XMLEncodeCU.HistoricWorkOrder(RelHistWorkOrder, TmpHistServOrder, WorkOrder, lvXMLDocOut);
                  ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
                  CLEAR(lvXMLDocOut);
                UNTIL RelHistWorkOrder.NEXT = 0;
              END;
            UNTIL NEXT = 0;
          END;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE FillTmpHistoricOrdersTable@1100525014(ServiceOrder@1210190002 : Record 11012823;WorkOrder@1100525000 : Record 11229279;VAR TempServiceOrder@1210190000 : Record 11012823);
    VAR
      ServiceOrder2@1100485001 : Record 11012823;
      ServiceOrderObject@1100525001 : Record 11071724;
      ServiceOrderObject2@1100525002 : Record 11071724;
      MobileSetup@1210190001 : Record 11012676;
      WorkOrder2@1100528700 : Record 11229279;
      Count@1100485002 : Integer;
      Level@1100485003 : Integer;
      Add@1100525003 : Boolean;
      I@1100528000 : Integer;
    BEGIN
      // dp00563
      TempServiceOrder.RESET;
      TempServiceOrder.DELETEALL;

      MobileSetup.CHANGECOMPANY(WorkOrder."Source Company");
      MobileSetup.GET;
      IF (MobileSetup."Number of Historic Orders" < 1) OR (ServiceOrder."Service Location No." = '') THEN
        EXIT;

      ServiceOrderObject.CHANGECOMPANY(WorkOrder."Source Company");
      ServiceOrderObject.SETRANGE("Service Order No.", ServiceOrder."No.");

      I := 1;
      REPEAT
        ServiceOrder2.CHANGECOMPANY(WorkOrder."Source Company");
        ServiceOrder2.SETCURRENTKEY("Service Location No.","Order Date","Order Time");
        ServiceOrder2.SETRANGE("Service Location No.", ServiceOrder."Service Location No.");
        ServiceOrder2.SETRANGE("Order Date", 0D, ServiceOrder."Order Date");
        ServiceOrder2.SETFILTER("Source Type", SourceTypeFilter());
        IF I = 1 THEN
          ServiceOrder2.SETRANGE("No.", ServiceOrder."No.") // First try current service order
        ELSE
          ServiceOrder2.SETFILTER("No.", '<>%1', ServiceOrder."No.");
        ServiceOrder2.ASCENDING(FALSE);
        Level := 1;
        REPEAT
          IF ServiceOrder2.FINDSET THEN BEGIN
            REPEAT
              WorkOrder2.RESET;
              WorkOrder2.SETCURRENTKEY("Source Type","Source No."); // Do not filter on Source Company
              WorkOrder2.SETRANGE("Source Type", WorkOrder."Source Type");
              WorkOrder2.SETRANGE("Source No.", ServiceOrder2."No.");
              WorkOrder2.SETFILTER("No.", '<>%1', WorkOrder."No.");
              WorkOrder2.SETRANGE("Actual Field Service Status", '100');
              IF NOT WorkOrder2.ISEMPTY THEN BEGIN
                Add := FALSE;
                IF NOT TempServiceOrder.GET(ServiceOrder2."No.") THEN BEGIN
                  IF Level = 1 THEN BEGIN // First try orders with same objects
                    ServiceOrderObject2.RESET;
                    ServiceOrderObject2.CHANGECOMPANY(WorkOrder."Source Company");
                    ServiceOrderObject2.SETRANGE("Service Order No.", ServiceOrder2."No.");
                    IF ServiceOrderObject.FINDSET THEN BEGIN
                      REPEAT
                        ServiceOrderObject2.SETRANGE("Object No.", ServiceOrderObject."Object No.");
                        IF NOT ServiceOrderObject2.ISEMPTY THEN
                          Add := TRUE;
                      UNTIL (ServiceOrderObject.NEXT = 0) OR (Add);
                    END;
                  END ELSE
                    Add := TRUE;
                END;

                IF Add THEN BEGIN
                  TempServiceOrder.TRANSFERFIELDS(ServiceOrder2);
                  TempServiceOrder.INSERT;
                  Count += 1;
                END;
              END;
            UNTIL (ServiceOrder2.NEXT = 0) OR (Count >= MobileSetup."Number of Historic Orders");
          END;
          Level += 1;
        UNTIL (Level > 2) OR (Count >= MobileSetup."Number of Historic Orders");
        I += 1;
      UNTIL (I > 2) OR (Count >= MobileSetup."Number of Historic Orders");
    END;

    PROCEDURE SendHistoryUsedItems@1100525001(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279;HistoryWorkOrder@1100525000 : Record 11229279) : Boolean;
    VAR
      ServiceOrderCostPlusEntry@1100485006 : Record 11012825;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // dp00563
      IF (HistoryWorkOrder."Source No." = '') OR
         (HistoryWorkOrder."Source Type" <> HistoryWorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH ServiceOrderCostPlusEntry DO BEGIN
        CHANGECOMPANY(HistoryWorkOrder."Source Company");
        SETRANGE("Service Order No.", HistoryWorkOrder."Source No.");
        SETRANGE("Cost Type", "Cost Type"::Material);
        SETRANGE("Extra Cost", FALSE);
        SETFILTER("Created by Work Order No.", '<>%1', HistoryWorkOrder."No.");
        SETFILTER(Quantity, '<>%1', 0);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.HistoryUsedItem(ServiceOrderCostPlusEntry, HistoryWorkOrder, XMLDocument);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendHistoryInspectionLines@1100525002(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279;HistoryWorkOrder@1100525001 : Record 11229279) : Boolean;
    VAR
      MobileSetup@1100525000 : Record 11012676;
      ServiceOrderInspectionLine@1100485006 : Record 11071753;
      ServiceOrderObject@1100525002 : Record 11071724;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // dp00563
      MobileSetup.GET;

      IF NOT MobileSetup."Inspection Lines in History" THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT;
      END;

      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder) OR
         (HistoryWorkOrder."Source No." = '') OR
         (HistoryWorkOrder."Source Type" <> HistoryWorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      ServiceOrderObject.CHANGECOMPANY(WorkOrder."Source Company");
      ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
      WITH ServiceOrderInspectionLine DO BEGIN
        CHANGECOMPANY(HistoryWorkOrder."Source Company");
        SETRANGE("Service Order No.", HistoryWorkOrder."Source No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            ServiceOrderObject.SETRANGE("Object No.", ServiceOrderInspectionLine."Service Object No.");
            IF NOT ServiceOrderObject.ISEMPTY THEN BEGIN
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.HistoryInspectionLine(ServiceOrderInspectionLine, HistoryWorkOrder, XMLDocument);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SourceTypeFilter@1100528112() FilterText : Text[250];
    VAR
      MobileSetup@1100528100 : Record 11012676;
      ServiceOrder@1100528101 : Record 11012823;
    BEGIN
      MobileSetup.GET();
      IF MobileSetup."Source Type Call As History" THEN
        FilterText := STRSUBSTNO('%1|', ServiceOrder."Source Type"::Call);
      IF MobileSetup."Source Type Contract As Hist." THEN
        FilterText := STRSUBSTNO('%1%2|',FilterText, ServiceOrder."Source Type"::Contract);
      IF MobileSetup."Source Type Direct As History" THEN
        FilterText := STRSUBSTNO('%1%2|',FilterText, ServiceOrder."Source Type"::Direct);
      IF MobileSetup."Source Type Estimate As Hist." THEN
        FilterText := STRSUBSTNO('%1%2|',FilterText, ServiceOrder."Source Type"::Estimate);
      IF MobileSetup."Source Type Modific. As Hist." THEN
        FilterText := STRSUBSTNO('%1%2|',FilterText, ServiceOrder."Source Type"::Modification);
      IF MobileSetup."Source Type Replacem. As Hist." THEN
        FilterText := STRSUBSTNO('%1%2|',FilterText, ServiceOrder."Source Type"::Replacement);
      IF COPYSTR(FilterText, STRLEN(FilterText)) = '|' THEN
        FilterText := COPYSTR(FilterText, 1, STRLEN(FilterText) -1);
    END;

    PROCEDURE SendConsignments@1100528108(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";Resource@1100525000 : Record 11229278) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012865;
      FPSMobileSetup@1100528100 : Record 11012676;
      EndDateHorizon@1100528102 : Date;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        CHANGECOMPANY(Resource.Company);
        SETCURRENTKEY("Employee No.");
        SETRANGE("Employee No.", Resource."Source No.");
        FPSMobileSetup.CHANGECOMPANY(Resource.Company);
        FPSMobileSetup.GET;
        EndDateHorizon := CALCDATE(STRSUBSTNO('<+%1D>', FPSMobileSetup."Sync. Window Consign. Absence") ,TODAY);
        SETRANGE("Start Date", TODAY, EndDateHorizon);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.ConsignmentRoster(lvRec, Resource.Company, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendEmployeeAbsences@1100528109(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";Resource@1100528100 : Record 11229278) : Boolean;
    VAR
      lvRec@1100485006 : Record 5207;
      FPSMobileSetup@1100528102 : Record 11012676;
      EndDateHorizon@1100528101 : Date;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        CHANGECOMPANY(Resource.Company);
        SETCURRENTKEY("Employee No.","From Date");
        SETRANGE("Employee No.", Resource."Source No.");
        FPSMobileSetup.CHANGECOMPANY(Resource.Company);
        FPSMobileSetup.GET;
        EndDateHorizon := CALCDATE(STRSUBSTNO('<+%1D>', FPSMobileSetup."Sync. Window Consign. Absence") ,TODAY);
      //  SETRANGE("From Date", TODAY, EndDateHorizon);
        SETFILTER("From Date", '..%1', EndDateHorizon);
        SETFILTER("To Date", '%1..', TODAY);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.EmployeeAbsence(lvRec, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServLocStructureLines@1100528100(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      ServiceOrder@1210190000 : Record 11012823;
      ServiceOrderObject@1100485006 : Record 11071724;
      ServiceLocationStructure@1100528101 : Record 11071719;
      ServiceLocStructureLine@1100528100 : Record 11071720;
      TmpServLocStructureLine@1100528102 : TEMPORARY Record 11071720;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
      IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
        ServiceLocationStructure.CHANGECOMPANY(WorkOrder."Source Company");
        ServiceLocationStructure.SETRANGE("Service Location No.", ServiceOrder."Service Location No.");
        ServiceLocationStructure.SETRANGE("Available for 4PS Mobile", TRUE);
        IF ServiceLocationStructure.FINDFIRST THEN BEGIN
          ServiceOrderObject.CHANGECOMPANY(WorkOrder."Source Company");
          ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
          IF ServiceOrderObject.FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              FillTmpServLocStructureLine(ServiceLocationStructure, ServiceOrderObject, WorkOrder."Source Company", TmpServLocStructureLine);
            UNTIL ServiceOrderObject.NEXT = 0;
          END;
        END;
        IF TmpServLocStructureLine.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.ServiceLocStructureLine(TmpServLocStructureLine, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL TmpServLocStructureLine.NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendTransactionMode@1100409006(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100409000 : Code[20]) : Boolean;
    BEGIN
      ReqHandlerCU.EndTransaction(InMsg); // Send empty list
      EXIT(TRUE);
    END;

    PROCEDURE SendFieldServiceStatusReason@1100525026(InMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      FieldServiceStatusReason@1100525001 : Record 11229868;
      XMLDocument@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH FieldServiceStatusReason DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.FieldServiceStatusReason(FieldServiceStatusReason, XMLDocument);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendDispatchAttachmentType@1100525040(InMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100525003 : Date) : Boolean;
    VAR
      DispatchAttachmentType@1100525001 : Record 11072277;
      DeletedDataMOB@1100525004 : Record 11229871;
      XMLDocument@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH DispatchAttachmentType DO BEGIN
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.DispatchAttachmentType(DispatchAttachmentType, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Dispatch Attachment Type");
        DeletedDataMOB.SETRANGE("Code 1", DispatchAttachmentType.Code);
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT DispatchAttachmentType.GET(DeletedDataMOB."Code 1") THEN BEGIN
              DispatchAttachmentType.INIT;
              DispatchAttachmentType.Code := DeletedDataMOB."Code 1";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.DispatchAttachmentType(DispatchAttachmentType, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE FillTmpServLocStructureLine@1100528102(ServiceLocationStructure@1100528100 : Record 11071719;ServiceOrderObject@1100528101 : Record 11071724;ServCompany@1100525000 : Text[30];VAR TmpServiceLocStructureLine@1100528102 : Record 11071720);
    VAR
      ServiceLocStructureLine@1100528103 : Record 11071720;
      ServiceLocStructureLine2@1100528104 : Record 11071720;
    BEGIN
      WITH ServiceLocStructureLine DO BEGIN
        CHANGECOMPANY(ServCompany);
        SETRANGE("Service Location No.", ServiceLocationStructure."Service Location No.");
        SETRANGE("Structure No.", ServiceLocationStructure."No.");
        SETRANGE("Service Object No.", ServiceOrderObject."Object No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          IF ServiceLocStructureLine."Object Line" THEN BEGIN
            TmpServiceLocStructureLine := ServiceLocStructureLine;
            IF TmpServiceLocStructureLine.INSERT(FALSE) THEN BEGIN
              ServiceLocStructureLine2.CHANGECOMPANY(ServCompany);
              IF ServiceLocStructureLine2.GET("Service Location No.", "Structure No.","No.",'') THEN BEGIN
                TmpServiceLocStructureLine := ServiceLocStructureLine2;
                IF TmpServiceLocStructureLine.INSERT(FALSE) THEN BEGIN
                  IF ServiceLocStructureLine2.Level > 0 THEN BEGIN
                    FillTmpStructLineHigherLevels(ServiceLocationStructure, ServiceLocStructureLine2,
                      ServCompany, TmpServiceLocStructureLine);
                  END;
                END;
              END;
            END;
          END
        END;
      END;
    END;

    PROCEDURE FillTmpStructLineHigherLevels@1100528103(ServiceLocationStructure@1100528100 : Record 11071719;ServiceLocStructureLine@1100528103 : Record 11071720;ServCompany@1100525000 : Text[30];VAR TmpServiceLocStructureLine@1100528102 : Record 11071720);
    BEGIN
      WITH ServiceLocStructureLine DO BEGIN
        CHANGECOMPANY(ServCompany);
        SETRANGE("Service Location No.", ServiceLocationStructure."Service Location No.");
        SETRANGE("Structure No.", ServiceLocationStructure."No.");
        SETRANGE("Service Object No.");
        //get parent of parent
        IF Level > 2 THEN BEGIN
          GET("Service Location No.", "Structure No.", "Element Level 2", '');
          TmpServiceLocStructureLine := ServiceLocStructureLine;
          IF TmpServiceLocStructureLine.INSERT(FALSE) THEN;
        END;
        IF Level > 1 THEN BEGIN
          GET("Service Location No.", "Structure No.", "Element Level 1", '');
          TmpServiceLocStructureLine := ServiceLocStructureLine;
          IF TmpServiceLocStructureLine.INSERT(FALSE) THEN;
        END;
        SETRANGE(Level, 0);
        IF FINDFIRST THEN BEGIN
          TmpServiceLocStructureLine := ServiceLocStructureLine;
          IF TmpServiceLocStructureLine.INSERT(FALSE) THEN;
        END;
      END;
    END;

    PROCEDURE SendServiceOrderObjects@1100528101(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11071724;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Service Order No.", WorkOrder."Source No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.ServiceOrderObject(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServOrderInspectionLines@1100528104(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11071753;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE(lvRec."Service Order No.", WorkOrder."Source No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.ServiceOrderInspectionLine(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceInspectionOptions@1100528105(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";LastUpdateDate@1100528701 : Date) : Boolean;
    VAR
      BaseServiceInspectionOption@1100485006 : Record 11071749;
      DeletedDataMOB@1100528700 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      BaseServiceInspectionOption.SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
      IF BaseServiceInspectionOption.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.ServiceInspectionOption(BaseServiceInspectionOption, XMLDocument, FALSE);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL BaseServiceInspectionOption.NEXT = 0;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::"Base Service Inspection Option");
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT BaseServiceInspectionOption.GET(DeletedDataMOB."Code 1", DeletedDataMOB."Code 2") THEN BEGIN
              BaseServiceInspectionOption.INIT;
              BaseServiceInspectionOption."Base Inspection Line Code" := DeletedDataMOB."Code 1";
              BaseServiceInspectionOption.Code := DeletedDataMOB."Code 2";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.ServiceInspectionOption(BaseServiceInspectionOption, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceOrderObjSpecLines@1210190003(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11071782;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE(lvRec."Service Order No.", WorkOrder."Source No.");
        SETFILTER("Specification Type", '<>%1',"Specification Type"::"Object Line");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.ServiceOrderObjSpecLine(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendBaseObjectSpecOptions@1210190002(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      BaseObjectSpecificationOpt@1100485006 : Record 11071780;
      ServiceOrderObjSpecLine@1100528100 : Record 11071782;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;

      WITH ServiceOrderObjSpecLine DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Service Order No.", WorkOrder."Source No.");
        SETRANGE("Field Type", ServiceOrderObjSpecLine."Field Type"::Option);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            BaseObjectSpecificationOpt.CHANGECOMPANY(WorkOrder."Source Company");
            BaseObjectSpecificationOpt.SETRANGE("Base Object Spec. Line Code", ServiceOrderObjSpecLine."Specification Code");
            IF BaseObjectSpecificationOpt.FINDSET(FALSE,FALSE) THEN BEGIN
              REPEAT
                lvXMLDocOut := lvXMLDocOut.XmlDocument;
                XMLEncodeCU.BaseObjectSpecificationOpt(BaseObjectSpecificationOpt, WorkOrder, lvXMLDocOut);
                ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
                CLEAR(lvXMLDocOut);
              UNTIL BaseObjectSpecificationOpt.NEXT = 0;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceTexts@1210190006(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      lvRec@1100485006 : Record 11012882;
      WorkOrderText@1100528600 : Record 11229284;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      WITH lvRec DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Table Name", lvRec."Table Name"::"Service Order");
        SETRANGE("No.", WorkOrder."Source No.");
        //DP00106.sn
        SETFILTER("Table Field", '%1|%2|%3|%4',
          90,  //ServiceOrder.FIELDNO("Problem Text"),
          91,  //ServiceOrder.FIELDNO("Internal Text"),
          92,  //ServiceOrder.FIELDNO("Solution Text"),
          94); //ServiceOrder.FIELDNO("Cause Text"));
        //DP00106.en
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.ServiceText(lvRec, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      WorkOrderText.CHANGECOMPANY(WorkOrder."Source Company");
      WorkOrderText.SETRANGE("Table Name", WorkOrderText."Table Name"::"Work Order");
      WorkOrderText.SETRANGE("No.", WorkOrder."No.");
      WorkOrderText.SETRANGE("Table Field", 0);
      IF WorkOrderText.FINDSET(FALSE,FALSE) THEN
        REPEAT
          lvXMLDocOut := lvXMLDocOut.XmlDocument;
          XMLEncodeCU.WorkOrderText(WorkOrderText, WorkOrder, lvXMLDocOut);
          ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
          CLEAR(lvXMLDocOut);
        UNTIL WorkOrderText.NEXT = 0;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendMobileItemUsage@1100528114(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100527000 : Record 11229279) : Boolean;
    VAR
      FPSMobileItemUsage@1100528103 : Record 11125647;
      WorkOrder2@1100525000 : Record 11229279;
      lvXMLDocOut@1100528104 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder) OR
         (NOT WorkOrder."Export Item Usage to FSA")
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        WorkOrder2.SETRANGE("No.", WorkOrder."No.");
        WorkOrder2.FINDSET(TRUE);
        WorkOrder2."Item Used Exported On" := CURRENTDATETIME;
        WorkOrder2.MODIFY;
        EXIT(TRUE);
      END;
      WITH FPSMobileItemUsage DO BEGIN
        CHANGECOMPANY(WorkOrder."Source Company");
        SETRANGE("Service Order No.", WorkOrder."Source No.");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.FPSMobileItemUsage(FPSMobileItemUsage, WorkOrder, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      WorkOrder2.SETRANGE("No.", WorkOrder."No.");
      WorkOrder2.FINDSET(TRUE);
      WorkOrder2."Item Used Exported On" := CURRENTDATETIME;
      WorkOrder2.MODIFY;
      EXIT(TRUE);
    END;

    PROCEDURE SendVendor@1100525017(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";FilterSetCode@1100525000 : Code[20];Company@1100409000 : Text;LastUpdateDate@1100528700 : Date) : Boolean;
    VAR
      Vendor@1100485006 : Record 23;
      DeletedDataMOB@1100528701 : Record 11229871;
      XMLDocument@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ExportFilterSetMgtMobile@1100525001 : Codeunit 11012200;
    BEGIN
      WITH Vendor DO BEGIN
        IF FilterSetCode <> '' THEN
          ExportFilterSetMgtMobile.SetExportFiltersOnVendor(FilterSetCode, Company, Vendor);
        FILTERGROUP(8);
        SETRANGE("Active in FSA", TRUE);
        FILTERGROUP(0);
        SETFILTER("Last Date Modified", '>=%1', LastUpdateDate);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.Vendor(Vendor, XMLDocument, FALSE);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          UNTIL NEXT = 0;
        END;
      END;

      IF LastUpdateDate <> 0D THEN BEGIN
        DeletedDataMOB.SETRANGE("Table ID", DATABASE::Vendor);
        DeletedDataMOB.SETFILTER(Date, '>=%1', LastUpdateDate);
        IF DeletedDataMOB.FINDSET THEN
          REPEAT
            IF NOT Vendor.GET(DeletedDataMOB."Code 1") THEN BEGIN
              Vendor.INIT;
              Vendor."No." := DeletedDataMOB."Code 1";
              XMLDocument := XMLDocument.XmlDocument;
              XMLEncodeCU.Vendor(Vendor, XMLDocument, TRUE);
              ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
              CLEAR(XMLDocument);
            END;
          UNTIL DeletedDataMOB.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendUnitPriceWorkOrder@1100525000(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100525000 : Record 11229279) : Boolean;
    VAR
      ServiceOrder@1100525005 : Record 11012823;
      UnitPriceServiceOrder@1100525002 : Record 11071772;
      ServiceOrderExtension@1100525006 : Record 11071727;
      lvXMLDocOut@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lvExportFilterMgtCU1@1100525003 : Codeunit 11012200;
    BEGIN
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
      IF NOT ServiceOrder.GET(WorkOrder."Source No.") THEN
        ServiceOrder.INIT;
      ServiceOrderExtension.CHANGECOMPANY(WorkOrder."Source Company");
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
      UnitPriceServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
      UnitPriceServiceOrder.SETRANGE("Service Order No.", WorkOrder."Source No.");
      UnitPriceServiceOrder.SETRANGE("Price Book Type", ServiceOrder."Price Book Type");
      UnitPriceServiceOrder.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
      UnitPriceServiceOrder.SETRANGE("Index Date", ServiceOrderExtension."Price Book Index Date");
      UnitPriceServiceOrder.SETFILTER("Work Order No.", '%1|%2', '', WorkOrder."No.");
      IF UnitPriceServiceOrder.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          lvXMLDocOut := lvXMLDocOut.XmlDocument;
          XMLEncodeCU.UnitPriceWorkOrder(UnitPriceServiceOrder, WorkOrder, lvXMLDocOut);
          ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
          CLEAR(lvXMLDocOut);
        UNTIL UnitPriceServiceOrder.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE SendServiceSourceEMail@1100525004(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";WorkOrder@1100525000 : Record 11229279) : Boolean;
    VAR
      ServiceOrder@1100525006 : Record 11012823;
      ServiceSourceEMail@1100525002 : Record 11071711;
      XMLDocument@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // dp00563
      IF (WorkOrder."Source No." = '') OR
         (WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder)
      THEN BEGIN
        ReqHandlerCU.EndTransaction(InMsg);  // Send empty list
        EXIT(TRUE);
      END;
      ServiceOrder.CHANGECOMPANY(WorkOrder."Source Company");
      IF NOT ServiceOrder.GET(WorkOrder."Source No.") THEN
        ServiceOrder.INIT;

      ServiceSourceEMail.CHANGECOMPANY(WorkOrder."Source Company");
      ServiceSourceEMail.SetFiltersServiceOrder(ServiceOrder);
      IF ServiceSourceEMail.FINDSET THEN BEGIN
        REPEAT
          XMLDocument := XMLDocument.XmlDocument;
          XMLEncodeCU.ServiceSourceEMail(ServiceSourceEMail, WorkOrder, XMLDocument);
          ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
          CLEAR(XMLDocument);
        UNTIL ServiceSourceEMail.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);

      EXIT(TRUE);
    END;

    PROCEDURE SendServiceInspectionLists@1100525019(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      BaseServiceInspectionList@1100525000 : Record 11071930;
      ServiceInspectionVersion@1100525002 : Record 11071750;
      XMLDocument@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // dp00626
      BaseServiceInspectionList.SETRANGE("Visible for Field Service", TRUE);
      IF BaseServiceInspectionList.FINDSET THEN BEGIN
        REPEAT
          ServiceInspectionVersion.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type"::"Base Inspection List");
          ServiceInspectionVersion.SETRANGE(Code, BaseServiceInspectionList.Code);
          ServiceInspectionVersion.SETFILTER("Index Date", '..%1', TODAY);
          IF ServiceInspectionVersion.FINDLAST THEN BEGIN
            XMLDocument := XMLDocument.XmlDocument;
            XMLEncodeCU.BaseServiceInspectionList(BaseServiceInspectionList, XMLDocument);
            ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
            CLEAR(XMLDocument);
          END;
        UNTIL BaseServiceInspectionList.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);

      EXIT(TRUE);
    END;

    PROCEDURE SendServiceInspectionLines@1100525020(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";BaseServiceInspectionList@1100525000 : Record 11071930) : Boolean;
    VAR
      ServiceInspectionVersion@1100525004 : Record 11071750;
      ServiceInspectionLine@1100525002 : Record 11071751;
      ServiceInspectionLineGroup@1100525005 : Record 11071751;
      TempServiceInspectionLine@1100525007 : TEMPORARY Record 11071751;
      ServiceInspectionManagement@1100525006 : Codeunit 11012844;
      XMLDocument@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // dp00626
      ServiceInspectionManagement.CollectTmpInspVersionLines(
        ServiceInspectionLine."Inspection Type"::"Base Inspection List", '', BaseServiceInspectionList.Code, '', '', TODAY,
        ServiceInspectionLine."Inspection Type"::"Base Inspection List", '', BaseServiceInspectionList.Code, '', '', FALSE, TempServiceInspectionLine);
      IF TempServiceInspectionLine.FINDSET THEN BEGIN
        REPEAT
           XMLDocument := XMLDocument.XmlDocument;
           XMLEncodeCU.ServiceInspectionLine(TempServiceInspectionLine, XMLDocument);
           ReqHandlerCU.WriteToQueue(InMsg, XMLDocument);
           CLEAR(XMLDocument);
        UNTIL TempServiceInspectionLine.NEXT = 0;
      END;

      ReqHandlerCU.EndTransaction(InMsg);

      EXIT(TRUE);
    END;

    PROCEDURE ProcessReceivedDebriefMess@1100529016(VAR DebriefReceivedMess@1100529000 : Record 11020444);
    BEGIN
      //Process (post) the received debrief messages in the logbook via NAS. Function is called from C11229163/164.
      WITH DebriefReceivedMess DO BEGIN
        DELETE;
        CASE "Debrief Type" OF
          "Debrief Type"::WorkOrder:
            ProcessWorkOrder(DebriefReceivedMess);
          "Debrief Type"::Budget:
            ProcessBudgetLine(DebriefReceivedMess);
          "Debrief Type"::CostPlus:
            ProcessCostPlusEntry(DebriefReceivedMess);
          "Debrief Type"::AdviceOrder:
            ProcessAdviceOrderLine(DebriefReceivedMess);
          "Debrief Type"::AdviceOrderText:
            BEGIN END; // Text is processed by ProcessAdviceOrderLine
          "Debrief Type"::Status:
            ProcessStatusFS(DebriefReceivedMess);
          "Debrief Type"::Text:
            ProcessDebriefText(DebriefReceivedMess);
          "Debrief Type"::Hours:
            ProcessHourAccountingLine(DebriefReceivedMess);
          "Debrief Type"::DecentralWO:
            ProcessDecentralWorkOrder(DebriefReceivedMess);
          "Debrief Type"::InspectionLine:
            ProcessOrderInspectionLine(DebriefReceivedMess);
          "Debrief Type"::ObjectSpecification:
            ProcessOrderObjectSpecLine(DebriefReceivedMess);
          "Debrief Type"::OrderText:
            ProcessWorkOrderText(DebriefReceivedMess);
          "Debrief Type"::RestockItem:
            ProcessRestockItem(DebriefReceivedMess);
          "Debrief Type"::CreateRestockPurchOrder: // C024394.n
            ProcessCreateRestockPurchOrder(DebriefReceivedMess);
          "Debrief Type"::Planning:
            ProcessPlanning(DebriefReceivedMess);
          "Debrief Type"::CreatePurchOrder:
            ProcessPurchaseAdviceOrder(DebriefReceivedMess);
          "Debrief Type"::SUPProduction:
            ProcessWUPProduction(DebriefReceivedMess);
          "Debrief Type"::ServiceOrderObject: // dp00276
            ProcessServiceOrderObject(DebriefReceivedMess);
        END;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveWorkOrder@1100529001(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11012679;
      Rec2@1100485004 : Record 11012679;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.WorkOrder(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::WorkOrder;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessWorkOrder@1100485014(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11012679;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostWorkorder(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostWorkOrder@1100485020(VAR VarRec@1100485001 : Record 11012679;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostWorkorder(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostWorkorder@1100528001(VAR VarRec@1100528000 : Record 11012679);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::WorkOrder, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefWorkorder(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          PostDebriefCU.GetPostDebriefWorkorder(VarRec); // DP00826.n
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveBudgetLine@1100529005(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11012680;
      Rec2@1100485004 : Record 11012680;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.BudgetLine(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::Budget;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessBudgetLine@1100485022(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11012680;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostBudgetLine(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostBudgetLine@1100485031(VAR VarRec@1100485001 : Record 11012680;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostBudgetLine(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostBudgetLine@1100528002(VAR VarRec@1100528000 : Record 11012680);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::Budget, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefBudgetLine(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveCostPlusEntry@1100529007(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11012681;
      Rec2@1100485004 : Record 11012681;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
      SaveDebriefCompany@1100529001 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.CostPlusEntry(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::CostPlus;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);

          IF Stock THEN BEGIN  // Indicator for write in Item Journal during posting
            SaveDebriefCompany := DebriefCompany;
            DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", 1004); //1004 used for CostPlus-IC part
            IF DebriefCompany <> SaveDebriefCompany THEN BEGIN  // IC, then logbook in Empl.Comp. (only for ItemJnl)
              Rec1.CHANGECOMPANY(DebriefCompany);
              Rec2.CHANGECOMPANY(DebriefCompany);
              LogbookRec.CHANGECOMPANY(DebriefCompany);
              ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

              Rec2.SETRANGE("Work Order No.", "Work Order No.");
              Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
              IF NOT Rec2.FINDLAST THEN
                Rec2."Line No." := 0;
              "Line No." := Rec2."Line No." + 1;
              INSERT;
              WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
            END;
          END;
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessCostPlusEntry@1100485025(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11012681;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostCostPlusEntry(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostCostPlusEntry@1100485032(VAR VarRec@1100485001 : Record 11012681;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostCostPlusEntry(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostCostPlusEntry@1100528003(VAR VarRec@1100528000 : Record 11012681);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::CostPlus, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefCostPlusEntry(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveAdviceOrderLine@1100529006(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11012682;
      Rec2@1100485004 : Record 11012682;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.AdviceOrderLine(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::AdviceOrder;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ReceiveAdviceOrderLineText@1100525031(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      DebriefAdviceOrderLineText@1100485003 : Record 11229870;
      DebriefAdviceOrderLineText2@1100485004 : Record 11229870;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH DebriefAdviceOrderLineText DO BEGIN
        IF XMLDecodeCU.AdviceOrderLineText(XMLCurrNode, DebriefAdviceOrderLineText) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::AdviceOrderText;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          DebriefAdviceOrderLineText.CHANGECOMPANY(DebriefCompany);
          DebriefAdviceOrderLineText2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          DebriefAdviceOrderLineText2.SETRANGE("Work Order No.", "Work Order No.");
          DebriefAdviceOrderLineText2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT DebriefAdviceOrderLineText2.FINDLAST THEN
            DebriefAdviceOrderLineText2."Line No." := 0;
          "Line No." := DebriefAdviceOrderLineText2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessAdviceOrderLine@1100485026(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      DebriefAdviceOrderLine@1100485003 : Record 11012682;
    BEGIN
      WITH DebriefAdviceOrderLine DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostAdviceOrderLine(DebriefAdviceOrderLine);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostAdviceOrderLine@1100485033(VAR VarRec@1100485001 : Record 11012682;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostAdviceOrderLine(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostAdviceOrderLine@1100528004(VAR DebriefAdviceOrderLine@1100528000 : Record 11012682);
    VAR
      DebriefAdviceOrderLineText@1100525000 : Record 11229870;
      JobsSetup@1100528001 : Record 315;
    BEGIN
      WITH DebriefAdviceOrderLine DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::AdviceOrder, FALSE);
        ErrorRec.DeleteErrors(LogbookRec, "Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefAdviceOrderLine(DebriefAdviceOrderLine);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;

      IF DebriefAdviceOrderLine.Status = DebriefAdviceOrderLine.Status::Processed THEN BEGIN
        DebriefAdviceOrderLineText.SETCURRENTKEY("Decentral Created Guid");
        DebriefAdviceOrderLineText.SETRANGE("Decentral Created Guid", DebriefAdviceOrderLine."Decentral Created Guid");
        DebriefAdviceOrderLineText.SETFILTER(Status, '<>%1', DebriefAdviceOrderLineText.Status::Processed);
        IF DebriefAdviceOrderLineText.FINDSET THEN
          REPEAT
            PostAdviceOrderLineText(DebriefAdviceOrderLineText);
          UNTIL DebriefAdviceOrderLineText.NEXT = 0;

        JobsSetup.GET; //kzwerver.n, #C015642
        //Send mail in new transaction because this mail cause the transaction to take too long
        IF (NOT DebriefAdviceOrderLine.Purchase) OR (JobsSetup."Release Advice Order Mandatory") THEN //kzwerver.n, #C015642
          NotifyAboutAdviceOrderLine(DebriefAdviceOrderLine);
      END;
    END;

    LOCAL PROCEDURE PostAdviceOrderLineText@1100525034(VAR DebriefAdviceOrderLineText@1100528000 : Record 11229870);
    VAR
      JobsSetup@1100528001 : Record 315;
    BEGIN
      WITH DebriefAdviceOrderLineText DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::AdviceOrderText, FALSE);
        ErrorRec.DeleteErrors(LogbookRec, "Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefAdviceOrderLineText(DebriefAdviceOrderLineText);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE NotifyAboutAdviceOrderLine@1100528115(DebriefAdviceOrderLine@1100528102 : Record 11012682);
    VAR
      Resource@1100528106 : Record 11229278;
      WorkOrder@1100528108 : Record 11229279;
      ETIMVendor@1100528110 : Record 11012304;
      SMTPMail@1100528101 : Codeunit 400;
      SenderName@1100528100 : Text[50];
      SenderEmail@1100528103 : Text[80];
      Text001@1100528104 : TextConst 'ENU=Employee %1 (%2) needs items';
      Text002@1100528105 : TextConst 'ENU=for %1 %2 (%3).';
      Reciptiens@1100528107 : Text[1024];
    BEGIN
      WITH DebriefAdviceOrderLine DO BEGIN
        IF ("Work Order No." = '') OR ("Resource No. (Employee)" = '') THEN
          EXIT;
        IF NOT Resource.GET("Resource No. (Employee)") THEN
          EXIT;
        IF (Resource.Type <> Resource.Type::Employee) OR (Resource."Source No." = '') THEN
          EXIT;
        IF NOT WorkOrder.GET("Work Order No.") THEN
          EXIT;
        IF (WorkOrder."Source No." = '') THEN
          EXIT;
        GetSender(SenderName, SenderEmail);
        IF SenderEmail = '' THEN
          EXIT;
        Reciptiens := GetReciptients(Resource);
        IF Reciptiens = '' THEN
          EXIT;
        SMTPMail.CreateMessage(SenderName, SenderEmail, Reciptiens,
          STRSUBSTNO(Text001, Resource.Name, Resource."Source No."),
          STRSUBSTNO(Text001, Resource.Name, Resource."Source No.") + ' ' +
          STRSUBSTNO(Text002, WorkOrder."Source Type", WorkOrder."Source No.", WorkOrder.Description) + CrLf + CrLf,
          FALSE);
        IF "Item No." <> '' THEN
          SMTPMail.AppendBody(FIELDCAPTION("Item No.") + ' : ' + "Item No." + CrLf);
        IF ("Vendor (Trade Item)" <> '') AND ("Trade Item" <> '') THEN BEGIN
          IF NOT ETIMVendor.GET("Vendor (Trade Item)") THEN
            ETIMVendor.INIT;
          SMTPMail.AppendBody(
            FIELDCAPTION("Vendor (Trade Item)") + ' : ' + "Vendor (Trade Item)" + ' (' + ETIMVendor.Name + ')' + CrLf);
          SMTPMail.AppendBody(FIELDCAPTION("Trade Item") + ' : ' + "Trade Item" + CrLf);
        END;
        SMTPMail.AppendBody(FIELDCAPTION(Description) + ' : ' + Description + CrLf);
        IF "Description 2" <> '' THEN
          SMTPMail.AppendBody(FIELDCAPTION("Description 2") + ' : ' + "Description 2" + CrLf);
        SMTPMail.AppendBody(FIELDCAPTION(Quantity) + ' : ' + FORMAT(Quantity) + ' ' + "Unit of Measure" + CrLf);
        SMTPMail.Send;
      END;
    END;

    LOCAL PROCEDURE GetSender@1100528116(VAR Name@1100528102 : Text[50];VAR Email@1100528103 : Text[80]);
    VAR
      EmailOnBehalf@1100528101 : Record 11012768;
      CompanyInfo@1100528100 : Record 79;
    BEGIN
      EmailOnBehalf.SETRANGE(Usage, EmailOnBehalf.Usage::"Service Order");
      IF EmailOnBehalf.FINDFIRST THEN BEGIN
        IF EmailOnBehalf."Send On Behalf Of E-mail" <> '' THEN BEGIN
          Name := EmailOnBehalf."Send On Behalf Of Name";
          Email := EmailOnBehalf."Send On Behalf Of E-mail";
          EXIT;
        END;
      END;
      CompanyInfo.GET;
      IF CompanyInfo."E-Mail" <> '' THEN BEGIN
        Name := CompanyInfo.Name;
        Email := CompanyInfo."E-Mail";
      END;
    END;

    LOCAL PROCEDURE GetReciptients@1100528117(Resource@1100528100 : Record 11229278) Reciptiens : Text[1024];
    VAR
      MobileSetup@1100528101 : Record 11012676;
      EmployeePlanner@1100528103 : Record 5200;
    BEGIN
      MobileSetup.GET;
      IF MobileSetup."Notify Planner Advice Order" AND (Resource.Planner <> '') THEN BEGIN
        IF (Resource."Planner Company" <> '') AND (Resource."Planner Company" <> COMPANYNAME) THEN
          EmployeePlanner.CHANGECOMPANY(Resource."Planner Company");
        IF EmployeePlanner.GET(Resource.Planner) THEN BEGIN
          IF EmployeePlanner."Company E-Mail" <> '' THEN
            Reciptiens := EmployeePlanner."Company E-Mail";
        END;
      END;
      IF MobileSetup."Email Notification Adv. Order" <> '' THEN BEGIN
        IF Reciptiens <> '' THEN
          Reciptiens += ';';
        Reciptiens += MobileSetup."Email Notification Adv. Order";
      END;
    END;

    LOCAL PROCEDURE CrLf@1100528118() Result : Text[2];
    BEGIN
      Result[1] := 13;
      Result[2] := 10;
    END;

    PROCEDURE ReceivePurchaseAdviceOrder@1100527000(XMLCurrNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100525007 : Record 11125648;
      Rec2@1100525001 : Record 11125648;
      DebriefType@1100527001 : Option;
      DebriefCompany@1100527000 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.CreatePurchaseOrder(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::CreatePurchOrder;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessPurchaseAdviceOrder@1100525018(DebriefReceivedMess@1100527000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100525007 : Record 11125648;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostPurchaseAdviceOrder(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPurchaseAdviceOrder@1100525021(VAR VarRec@1100485001 : Record 11125648;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostPurchaseAdviceOrder(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostPurchaseAdviceOrder@1100528005(VAR VarRec@1100528000 : Record 11125648);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::CreatePurchOrder, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefCreatePurchOrder(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveStatusFS@1100529008(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11012683;
      Rec2@1100485004 : Record 11012683;
      WorkOrder@1100527000 : Record 11229279;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.StatusFS(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::Status;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);

          // Reset 'Export to FSA' immediately, do not wait until this debrief message is processed from the logbook.
          // Otherwise the work order can be send again (and again ...).
          IF ("Field Service Status" = '20') OR ("Field Service Status" = '25') OR ("Field Service Status" = '500') THEN BEGIN
            // Fixed status values for 4PS-Mobile: 20=Sended, 25=Sended again, 500=Sended but already completed
            SELECTLATESTVERSION;  //02-12-2014
            IF WorkOrder.GET("Work Order No.") THEN BEGIN
              IF "Date/Time" > WorkOrder."Date/Time Export to FSA" THEN
                WorkOrder."Date/Time Export to FSA" := "Date/Time";
              WorkOrder."Export to FSA" := FALSE; // Reset when Mobile sends back a message that received (No Validate!)
              WorkOrder.MODIFY;
            END;
          END;
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessStatusFS@1100485027(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11012683;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostStatusFS(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostStatusFS@1100485034(VAR VarRec@1100485001 : Record 11012683;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostStatusFS(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostStatusFS@1100528007(VAR VarRec@1100528000 : Record 11012683);
    VAR
      DocRefPoint@1100528002 : Record 11020296;
      NewRefPoint@1100528001 : Boolean;
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::Status, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefStatusFS(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;

      IF VarRec.Status = VarRec.Status::Processed THEN BEGIN
        PostDebriefCU.GetPostDebriefStatusFS(DocRefPoint, NewRefPoint);
        IF NewRefPoint THEN BEGIN
          DocRefPoint.SendMail(DocRefPoint.Type, DocRefPoint."Document No.", DocRefPoint."Reference Point"); //**4PS.n 18912
          COMMIT;
        END;
      END;
    END;

    PROCEDURE ReceiveDebriefText@1100529009(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11012684;
      Rec2@1100485004 : Record 11012684;
      TempDebriefTextMobile@1100525007 : TEMPORARY Record 11012684;
      TextNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
      SkipNextSpace@1100525006 : Boolean;
      DebriefType@1100485006 : Option;
      MaxLen@1100485005 : Integer;
      TextLen@1100525001 : Integer;
      Pos@1100525002 : Integer;
      SpacePos@1100525004 : Integer;
      Counter@1100525005 : Integer;
      TextChar@1100485002 : Text[1];
      CommentTxt@1100525003 : Text[1024];
      DebriefCompany@1100529000 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.DebriefText(XMLCurrNode,Rec1,TextNode) THEN BEGIN
          IF NOT ISNULL(TextNode) THEN BEGIN
            TextLen := TextNode.Length;
            IF TextLen > 0 THEN BEGIN
              DebriefType := LogbookRec."Debrief Type"::Text;
              DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
              Rec1.CHANGECOMPANY(DebriefCompany);
              Rec2.CHANGECOMPANY(DebriefCompany);
              LogbookRec.CHANGECOMPANY(DebriefCompany);
              ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

              Rec2.SETRANGE("Work Order No.", "Work Order No.");
              Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
              IF NOT Rec2.FINDLAST THEN
                Rec2."Line No." := 0;
              "Line No." := Rec2."Line No.";

              CommentTxt := '';
              Counter := 0;
              SpacePos := 0;
              MaxLen := MAXSTRLEN(Comment);
              SkipNextSpace := FALSE;
              TextLen := TextLen - 1;  //* Correction because text starts on position 0
              FOR Pos := 0 TO TextLen DO BEGIN
                TextChar := TextNode.Substring(Pos, 1);
                IF NOT ((TextChar = ' ') AND SkipNextSpace) THEN BEGIN
                  CommentTxt := CommentTxt + TextChar;
                  Counter := Counter + 1;
                  IF TextChar = ' ' THEN
                    SpacePos := Counter;
                END;
                IF SkipNextSpace THEN
                  SkipNextSpace := FALSE;
                IF (Counter = MaxLen) OR (Pos = TextLen) THEN BEGIN
                  IF (Counter = MaxLen) AND (Pos < TextLen) THEN BEGIN
                    IF TextNode.Substring(Pos+1, 1) = ' ' THEN
                      SkipNextSpace := TRUE;
                  END;
                  IF (Pos = TextLen) OR (SpacePos = MaxLen) OR (SpacePos < 2) OR SkipNextSpace THEN BEGIN
                    Comment := CommentTxt;
                    CommentTxt := '';
                    Counter := 0;
                    SpacePos := 0;
                  END ELSE BEGIN
                    Comment := COPYSTR(CommentTxt, 1, SpacePos);
                    CommentTxt := COPYSTR(CommentTxt, SpacePos+1);
                    Counter := STRLEN(CommentTxt);
                    SpacePos := 0;
                  END;
                  Comment := DELCHR(Comment, '>', ' ');
                  "Line No." := "Line No." + 1;
                  INSERT;
                  TempDebriefTextMobile.TRANSFERFIELDS(Rec1);
                  TempDebriefTextMobile.INSERT;
                END;
              END;
              IF TempDebriefTextMobile.FINDSET THEN
                REPEAT
                  WriteReceivedMessage(
                    TempDebriefTextMobile."Work Order No.",
                    TempDebriefTextMobile."Resource No. (Employee)",
                    DebriefType,
                    TempDebriefTextMobile."Line No.",
                    DebriefCompany);
                UNTIL TempDebriefTextMobile.NEXT = 0;
              COMMIT;
            END;
          END;
        END;
      END;

      CLEAR(TextNode);

      EXIT(TRUE);
    END;

    PROCEDURE ProcessDebriefText@1100485028(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11012684;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostTextLine(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostDebriefText@1100485035(VAR VarRec@1100485001 : Record 11012684;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostTextLine(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostTextLine@1100528006(VAR VarRec@1100528000 : Record 11012684);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::Text, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefTextLine(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;

      IF VarRec.Status = VarRec.Status::Processed THEN BEGIN
       //Send mail in new transaction because this mail cause the transaction to take too long
       EMailDebriefText(VarRec);  //dp00563.en
      END;
    END;

    PROCEDURE ReceiveHourAccountingLine@1100529010(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11012685;
      Rec2@1100485004 : Record 11012685;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text;
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.HourAccountingLine(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::Hours;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessHourAccountingLine@1100485029(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11012685;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostHourAccountingLine(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostHourAccountingLine@1100485036(VAR VarRec@1100485001 : Record 11012685;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostHourAccountingLine(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostHourAccountingLine@1100528008(VAR VarRec@1100528000 : Record 11012685);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::Hours, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefHourAccLine(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveDecentralWorkOrder@1100529011(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11012686;
      Rec2@1100485004 : Record 11012686;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.DecentralWorkOrder(XMLCurrNode,Rec1,DebriefCompany) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::DecentralWO;
          IF DebriefCompany = '' THEN
            DebriefCompany := DetermineDebriefCompany("Mobile Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Mobile Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Mobile Work Order No.", "Mobile Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Mobile Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessDecentralWorkOrder@1100485042(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11012686;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostDecentralWorkOrder(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostDecentralWorkOrder@1100485041(VAR VarRec@1100485001 : Record 11012686;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostDecentralWorkOrder(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostDecentralWorkOrder@1100528009(VAR VarRec@1100528000 : Record 11012686);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Mobile Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::DecentralWO, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefDecentralWorkOrder(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ProcessAcknowledge@1100525016(XMLCurrNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      DeletedWorkOrderCache@1100525004 : Record 11229281;
      WorkOrder@1100525005 : Record 11229279;
      MobileItemUsage@1100525006 : Record 11125647;
      WorkOrderNo@1100525002 : Code[20];
      Type@1100525001 : Text[30];
      ResourceNo@1100525003 : Code[20];
    BEGIN
      //No logging or debrief table is needed because it cannot fail. If it does fail its not a problem
      IF XMLDecodeCU.Acknowledge(XMLCurrNode, Type, ResourceNo, WorkOrderNo) THEN BEGIN
        CASE Type OF
          'DeletedWorkOrder':
            BEGIN
              // Note: Change Company not needed for this table, DataPerCompany is No.
              IF DeletedWorkOrderCache.GET(ResourceNo, WorkOrderNo) THEN BEGIN
                DeletedWorkOrderCache.DELETE;
                COMMIT;
              END;
            END;
          'ExportItemUsage':
            BEGIN
              SELECTLATESTVERSION;  //02-12-2014
              IF WorkOrder.GET(WorkOrderNo) THEN BEGIN
                MobileItemUsage.CHANGECOMPANY(WorkOrder."Source Company");
                MobileItemUsage.SETRANGE("Service Order No.", WorkOrder."Source No.");
                MobileItemUsage.SETFILTER("Last Modified Date", '>%1', WorkOrder."Item Used Exported On");
                IF MobileItemUsage.ISEMPTY THEN BEGIN
                  WorkOrder."Export Item Usage to FSA" := FALSE;
                  WorkOrder.MODIFY;
                  COMMIT;
                END;
              END;
            END;
        END; //case
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessPositionLogEntry@1210190010(XMLCurrNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      lvRec@1100525001 : Record 11020446;
      Resource@1100527000 : Record 11229278;
      ResourceNo@1100527001 : Code[20];
    BEGIN
      WITH lvRec DO BEGIN
        //No logging or debrief table is needed because no validation is needed
        IF XMLDecodeCU.PositionLogEntry(XMLCurrNode,lvRec,ResourceNo) THEN BEGIN
          IF ResourceNo <> '' THEN BEGIN
            IF Resource.GET(ResourceNo) THEN BEGIN
              IF (Resource.Type = Resource.Type::Employee) AND (Resource."Source No." <> '') THEN BEGIN
                IF (Resource.Company <> '') AND (Resource.Company <> COMPANYNAME) THEN
                  CHANGECOMPANY(Resource.Company);
                "Employee No." := Resource."Source No.";
                IF INSERT THEN;
                COMMIT;
              END;
            END;
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ReadWriteLogbook@1100485017(WorkOrderNo@1100485001 : Code[20];ResourceNo@1100485002 : Code[20];DebriefType@1100485003 : Option;OnReceive@1100529000 : Boolean);
    BEGIN
      // If not OnReceive then logbook record will/should be present (if not then insert)
      WITH LogbookRec DO BEGIN
        IF NOT GET(WorkOrderNo, ResourceNo, DebriefType) THEN BEGIN
          INIT;
          "Work Order No." := WorkOrderNo;
          "Resource No. (Employee)" := ResourceNo;
          "Debrief Type" := DebriefType;
          "Last Receive" := CURRENTDATETIME;
          INSERT;
        END ELSE BEGIN
          IF OnReceive THEN BEGIN
            "Last Receive" := CURRENTDATETIME;
            MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE GetLineFromText@1100485023(VAR VarText@1100485000 : Text[1024];IMaxLen@1100485003 : Integer;VAR OTextLine@1100485004 : Text[1024]);
    VAR
      lvLen@1100485002 : Integer;
      lvPos@1100485001 : Integer;
    BEGIN
      OTextLine := '';
      IF VarText = '' THEN
        EXIT;

      OTextLine := COPYSTR(VarText, 1, IMaxLen);
      VarText := COPYSTR(VarText, IMaxLen + 1);
      IF VarText = '' THEN
        EXIT;

      IF COPYSTR(VarText, 1, 1) = ' ' THEN BEGIN
        VarText := COPYSTR(VarText, 2);
        EXIT;
      END;

      lvLen := STRLEN(OTextLine);
      IF (lvLen < IMaxLen) OR (COPYSTR(OTextLine, IMaxLen, 1) = ' ') THEN
        EXIT;

      FOR lvPos := IMaxLen-1 DOWNTO 1 DO BEGIN
        IF (COPYSTR(OTextLine, lvPos, 1) = ' ') THEN BEGIN
          VarText := COPYSTR(OTextLine, lvPos+1) + VarText;
          OTextLine := COPYSTR(OTextLine, 1, lvPos);
          EXIT;
        END;
      END;
    END;

    PROCEDURE ReceiveOrderInspectionLine@1100529012(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11020447;
      Rec2@1100485004 : Record 11020447;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.OrderInspectionLine(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::InspectionLine;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessOrderInspectionLine@1100528106(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11020447;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostOrderInspectionLine(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostOrderInspectionLine@1100528107(VAR VarRec@1100485001 : Record 11020447;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostOrderInspectionLine(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostOrderInspectionLine@1100528010(VAR VarRec@1100528000 : Record 11020447);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::InspectionLine, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefInspectionLine(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveOrderObjectSpecLine@1100529013(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11020448;
      Rec2@1100485004 : Record 11020448;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.OrderObjectSpecificationLine(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::ObjectSpecification;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessOrderObjectSpecLine@1210190005(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11020448;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostOrderObjectSpecLine(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostOrderObjectSpecLine@1210190004(VAR VarRec@1100485001 : Record 11020448;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostOrderObjectSpecLine(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostOrderObjectSpecLine@1100528012(VAR VarRec@1100528000 : Record 11020448);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::ObjectSpecification, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefObjectSpecLine(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveWorkOrderText@1100529014(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11020449;
      Rec2@1100485004 : Record 11020449;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.WorkOrderText(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::OrderText;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessWorkOrderText@1210190008(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11020449;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostWorkOrderText(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostWorkOrderText@1210190007(VAR VarRec@1100485001 : Record 11020449;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostWorkOrderText(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostWorkOrderText@1100528014(VAR VarRec@1100528000 : Record 11020449);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::OrderText, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefWorkOrderText(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveRestockItem@1100529015(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11125645;
      Rec2@1100485004 : Record 11125645;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.RestockItem(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::RestockItem;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessRestockItem@1100528111(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11125645;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostRestockItem(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostRestockItem@1100528110(VAR VarRec@1100485001 : Record 11125645;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostRestockItem(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostRestockItem@1100528013(VAR VarRec@1100528000 : Record 11125645);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::RestockItem, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefRestockItem(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveCreateRestockPurchOrder@1100525027(XMLCurrNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      DebriefCreateRestockPO@1100525001 : Record 11229869;
      DebriefCreateRestockPO2@1100525004 : Record 11229869;
      MobileSetup@1100525005 : Record 11012676;
      DebriefType@1100525003 : Option;
      DebriefCompany@1100525002 : Text[30];
    BEGIN
      // C024394
      MobileSetup.GET;
      IF NOT MobileSetup."Post Restock Purch Jour Auto" THEN
        EXIT(TRUE);

      WITH DebriefCreateRestockPO DO BEGIN
        IF XMLDecodeCU.CreateRestockPurchOrder(XMLCurrNode, DebriefCreateRestockPO) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::CreateRestockPurchOrder;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          DebriefCreateRestockPO.CHANGECOMPANY(DebriefCompany);
          DebriefCreateRestockPO2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          DebriefCreateRestockPO2.SETRANGE("Work Order No.", "Work Order No.");
          DebriefCreateRestockPO2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT DebriefCreateRestockPO2.FINDLAST THEN
            DebriefCreateRestockPO2."Line No." := 0;
          "Line No." := DebriefCreateRestockPO2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ProcessCreateRestockPurchOrder@1100525028(DebriefReceivedMess@1100525001 : Record 11020444) : Boolean;
    VAR
      DebriefCreateRestockPO@1100525000 : Record 11229869;
    BEGIN
      // C024394
      WITH DebriefCreateRestockPO DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostCreateRestockPurchOrder(DebriefCreateRestockPO);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostCreateRestockPurchOrder@1100525029(VAR DebriefCreateRestockPO@1100525001 : Record 11229869;VAR OCounter@1100525002 : Integer;VAR OPosted@1100525000 : Integer);
    BEGIN
      // C024394
      WITH DebriefCreateRestockPO DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostCreateRestockPurchOrder(DebriefCreateRestockPO);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostCreateRestockPurchOrder@1100525030(VAR DebriefCreateRestockPO@1100525000 : Record 11229869);
    BEGIN
      // C024394
      WITH DebriefCreateRestockPO DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::CreateRestockPurchOrder, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefCreateRestockPurchOrder(DebriefCreateRestockPO);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceivePlanning@1100529018(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100485003 : Record 11125646;
      Rec2@1100485004 : Record 11125646;
      DebriefType@1100529000 : Option;
      DebriefCompany@1100485002 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.Planning(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::Planning;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessPlanning@1100409001(DebriefReceivedMess@1100529000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100485003 : Record 11125646;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostPlanning(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostPlanning@1100409000(VAR VarRec@1100485001 : Record 11125646;VAR OCounter@1100485002 : Integer;VAR OPosted@1100485003 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostPlanning(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostPlanning@1100528015(VAR VarRec@1100528000 : Record 11125646);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::Planning, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefPlanning(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveWUPProduction@1100525022(XMLCurrNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      Rec1@1100525004 : Record 11125650;
      Rec2@1100525003 : Record 11125650;
      DebriefType@1100525002 : Option;
      DebriefCompany@1100525001 : Text[30];
    BEGIN
      WITH Rec1 DO BEGIN
        IF XMLDecodeCU.SUPProduction(XMLCurrNode,Rec1) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::SUPProduction;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          Rec1.CHANGECOMPANY(DebriefCompany);
          Rec2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          Rec2.SETRANGE("Work Order No.", "Work Order No.");
          Rec2.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          IF NOT Rec2.FINDLAST THEN
            Rec2."Line No." := 0;
          "Line No." := Rec2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessWUPProduction@1100525023(DebriefReceivedMess@1100525000 : Record 11020444) : Boolean;
    VAR
      lvRec@1100525002 : Record 11125650;
    BEGIN
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostWUPProduction(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostWUPProduction@1100525024(VAR VarRec@1100525002 : Record 11125650;VAR OCounter@1100525001 : Integer;VAR OPosted@1100525000 : Integer);
    BEGIN
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostWUPProduction(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostWUPProduction@1100528011(VAR VarRec@1100528000 : Record 11125650);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::SUPProduction, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefWUPProduction(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE ReceiveServiceOrderObject@1100528700(XMLCurrNode@1100528700 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      DebriefServiceOrderObject@1100528701 : Record 11125652;
      DebriefServiceOrderObject2@1100525000 : Record 11125652;
      DebriefType@1100528703 : Option;
      DebriefCompany@1100528702 : Text[30];
    BEGIN
      // dp00276
      WITH DebriefServiceOrderObject DO BEGIN
        IF XMLDecodeCU.ServiceOrderObject(XMLCurrNode, DebriefServiceOrderObject) THEN BEGIN
          DebriefType := LogbookRec."Debrief Type"::ServiceOrderObject;
          DebriefCompany := DetermineDebriefCompany("Work Order No.", "Resource No. (Employee)", DebriefType);
          DebriefServiceOrderObject.CHANGECOMPANY(DebriefCompany);
          DebriefServiceOrderObject2.CHANGECOMPANY(DebriefCompany);
          LogbookRec.CHANGECOMPANY(DebriefCompany);
          ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", DebriefType, TRUE);

          DebriefServiceOrderObject2 := DebriefServiceOrderObject;
          DebriefServiceOrderObject2.SETRECFILTER;
          DebriefServiceOrderObject2.SETRANGE("Line No.");
          IF NOT DebriefServiceOrderObject2.FINDLAST THEN
            DebriefServiceOrderObject2."Line No." := 0;
          "Line No." := DebriefServiceOrderObject2."Line No." + 1;
          INSERT;
          WriteReceivedMessage("Work Order No.", "Resource No. (Employee)", DebriefType, "Line No.", DebriefCompany);
          COMMIT;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcessServiceOrderObject@1100528703(DebriefReceivedMess@1100528702 : Record 11020444) : Boolean;
    VAR
      lvRec@1100528701 : Record 11125652;
    BEGIN
      // dp00276
      WITH lvRec DO BEGIN
        IF GET(DebriefReceivedMess."Work Order No.", DebriefReceivedMess."Resource No. (Employee)", DebriefReceivedMess."Debrief Line No.") THEN BEGIN
          IF Status = Status::Received THEN
            PostServiceOrderObject(lvRec);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RetryPostServiceOrderObject@1100528704(VAR VarRec@1100528702 : Record 11125652;VAR OCounter@1100528701 : Integer;VAR OPosted@1100528700 : Integer);
    BEGIN
      // dp00276
      WITH VarRec DO BEGIN
        OCounter := 0;
        OPosted := 0;
        CurrDateTime := CURRENTDATETIME;
        FILTERGROUP(9);
        SETRANGE(Status, Status::Received, Status::Error);
        SETRANGE("Received on", 0DT, CurrDateTime-DelayTime(FALSE));
        FILTERGROUP(0);
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF NOT SkipDelayReceivedNotProcessed(Status = Status::Received, CurrDateTime, "Received on") THEN BEGIN
              OCounter := OCounter + 1;
              PostServiceOrderObject(VarRec);
              IF Status = Status::Processed THEN
                OPosted := OPosted + 1;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostServiceOrderObject@1100528018(VAR VarRec@1100528000 : Record 11125652);
    BEGIN
      WITH VarRec DO BEGIN
        ReadWriteLogbook("Work Order No.", "Resource No. (Employee)", LogbookRec."Debrief Type"::ServiceOrderObject, FALSE);
        ErrorRec.DeleteErrors(LogbookRec,"Line No.");
        COMMIT;
        CLEAR(PostDebriefCU);
        PostDebriefCU.SetPostDebriefServiceOrderObject(VarRec);
        CLEARLASTERROR;
        IF PostDebriefCU.RUN(LogbookRec) THEN BEGIN
          PostDebriefCU.GetPostDebriefServiceOrderObject(VarRec); // DP00826.n
          CALCFIELDS("No. of Errors");
          IF "No. of Errors" = 0 THEN
            Status := Status::Processed
          ELSE
            Status := Status::Error;
        END ELSE BEGIN
          Status := Status::Error;
          WriteLastErrorText(LogbookRec, "Line No.");
        END;
        "Processed on" := CURRENTDATETIME;
        MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE DetermineDebriefCompany@1100529003(WorkOrderNo@1100529002 : Code[20];ResourceNo@1100529001 : Code[20];DebriefType@1100529000 : Option) : Text[30];
    VAR
      Workorder@1100529003 : Record 11229279;
      Resource@1100529004 : Record 11229278;
    BEGIN
      CASE DebriefType OF
        LogbookRec."Debrief Type"::Hours,
        1004,  // Debrieftype option: Indicator for (also) in employee company (IC)
        LogbookRec."Debrief Type"::DecentralWO,
        LogbookRec."Debrief Type"::RestockItem,
        LogbookRec."Debrief Type"::CreateRestockPurchOrder: // C024394.n
          BEGIN
            IF Resource.GET(ResourceNo) THEN BEGIN
              IF Resource.Company <> '' THEN
                EXIT(Resource.Company);
            END;
          END;
       ELSE
         BEGIN
          IF Workorder.GET(WorkOrderNo) THEN BEGIN
            IF Workorder."Source Company" <> '' THEN
              EXIT(Workorder."Source Company");
          END;
         END;
      END;

      EXIT(COMPANYNAME);
    END;

    PROCEDURE WriteReceivedMessage@1100529004(WorkOrderNo@1100529002 : Code[20];ResourceNo@1100529001 : Code[20];DebriefType@1100529000 : Option;DebriefLineNo@1100529003 : Integer;DebriefCompany@1100529004 : Text[30]);
    VAR
      DebriefReceivedMess@1100529005 : Record 11020444;
    BEGIN
      DebriefReceivedMess.CHANGECOMPANY(DebriefCompany);
      IF NOT DebriefReceivedMess.GET(WorkOrderNo, ResourceNo, DebriefType, DebriefLineNo) THEN BEGIN
        DebriefReceivedMess.INIT;
        DebriefReceivedMess."Work Order No." := WorkOrderNo;
        DebriefReceivedMess."Resource No. (Employee)" := ResourceNo;
        DebriefReceivedMess."Debrief Type" := DebriefType;
        DebriefReceivedMess."Debrief Line No." := DebriefLineNo;
        DebriefReceivedMess."Date/Time" := CURRENTDATETIME;
        DebriefReceivedMess.INSERT;
      END ELSE BEGIN
        DebriefReceivedMess."Date/Time" := CURRENTDATETIME;
        DebriefReceivedMess.MODIFY;
      END;
    END;

    LOCAL PROCEDURE EMailDebriefText@1100525003(DebriefTextMobile@1100525006 : Record 11012684);
    VAR
      DebriefTextMobile2@1100525007 : Record 11012684;
      WorkOrder@1100525008 : Record 11229279;
      ServiceOrder@1100525002 : Record 11012823;
      DebriefText@1100525005 : Record 11012886;
      DebriefTextRubric@1100525003 : Record 11012885;
      DebriefEMailBodyText@1100525001 : Record 11071984;
      CompanyInformation@1100525004 : Record 79;
      TextLine@1100525009 : Text;
      SMTPMail@1100525000 : Codeunit 400;
    BEGIN
      // dp00563
      IF DebriefTextMobile.Status <> DebriefTextMobile.Status::Processed THEN
        EXIT;

      DebriefTextMobile2.SETRANGE("Work Order No.", DebriefTextMobile."Work Order No.");
      DebriefTextMobile2.SETRANGE("Resource No. (Employee)", DebriefTextMobile."Resource No. (Employee)");
      DebriefTextMobile2.SETRANGE("Text Rubric", DebriefTextMobile."Text Rubric");
      DebriefTextMobile2.SETFILTER(Status, '<>%1', DebriefTextMobile2.Status::Processed);
      IF DebriefTextMobile2.FINDFIRST THEN
        EXIT; // not all lines have been processed

      DebriefTextMobile2.SETRANGE(Status);
      DebriefTextMobile2.SETRANGE("Last Text Line of Rubric", TRUE);
      IF NOT DebriefTextMobile2.FINDFIRST THEN
        EXIT;

      WorkOrder.GET(DebriefTextMobile."Work Order No.");
      IF (WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder) AND (WorkOrder."Source No." <> '') THEN BEGIN
        IF ServiceOrder.GET(WorkOrder."Source No.") THEN BEGIN
          DebriefText.SETRANGE(Type, DebriefText.Type::ServiceOrder);
          DebriefText.SETRANGE("No.", WorkOrder."Source No.");
          DebriefText.SETRANGE(Rubric, DebriefTextMobile."Text Rubric");
          DebriefText.SETRANGE("Work Order No.", DebriefTextMobile."Work Order No.");
          IF DebriefText.FINDFIRST THEN BEGIN
            IF NOT DebriefTextRubric.GET(DebriefText.Rubric) THEN
              EXIT;

            IF DebriefTextRubric."E-Mail" = '' THEN
              EXIT;

            IF NOT CompanyInformation.GET THEN
              EXIT;

            SMTPMail.CreateMessage(
              CompanyInformation.Name,
              CompanyInformation."E-Mail",
              DebriefTextRubric."E-Mail",
              DebriefText.TABLECAPTION + ' ' + ServiceOrder.TABLECAPTION + ' ' + ServiceOrder."No.", // subject
              '',
              FALSE);

            DebriefEMailBodyText.SETRANGE("Debrief Text Rubric Code", DebriefText.Rubric);
            IF DebriefEMailBodyText.FINDSET THEN BEGIN
              REPEAT
                IF DebriefEMailBodyText."Table No." = DATABASE::"Debrief Text" THEN BEGIN
                  IF DebriefText.FINDSET THEN
                    REPEAT
                      TextLine := DebriefEMailBodyText.GetSubstituteResultTextLine(DebriefText, ServiceOrder);
                      SMTPMail.AppendBody(TextLine + CrLf);
                    UNTIL DebriefText.NEXT = 0;
                END ELSE BEGIN
                  TextLine := DebriefEMailBodyText.GetSubstituteResultTextLine(DebriefText, ServiceOrder);
                  SMTPMail.AppendBody(TextLine + CrLf);
                END;
              UNTIL DebriefEMailBodyText.NEXT = 0;
            END;

            SMTPMail.Send;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE WriteLastErrorText@1100528000(Logbook@1100528000 : Record 11012677;DebriefLineNo@1100528001 : Integer);
    VAR
      ErrorMessage@1100528002 : Text;
    BEGIN
      ErrorMessage := COPYSTR(GETLASTERRORTEXT, 1, MAXSTRLEN(ErrorRec."Error Message"));
      IF ErrorMessage = '' THEN
        ErrorMessage := Text001;
      ErrorRec.WriteError(ErrorMessage, Logbook, DebriefLineNo);
    END;

    LOCAL PROCEDURE SkipDelayReceivedNotProcessed@1100528020(CurrStatusIsReceived@1100528000 : Boolean;CurrDateTime@1100528001 : DateTime;ReceivedOn@1100528002 : DateTime) : Boolean;
    BEGIN
      // If status is Received then not processed yet by NAS process. Expeced that this will be done by NAS process.
      // Note: If processd then status is already Processed or Error.
      IF CurrStatusIsReceived THEN BEGIN
        IF ReceivedOn > CurrDateTime - DelayTime(TRUE) THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE DelayTime@1100528016(ExtraDelay@1100528000 : Boolean) : Integer;
    BEGIN
      // Delay time in msec
      // Do not process (very) recent received debrief messages in the retry posting process
      // If not processed yet then extra (long) delay
      IF ExtraDelay THEN
        EXIT(5 * 60000)   // 5 min
      ELSE
        EXIT(10000);  // 10 sec
    END;

    LOCAL PROCEDURE CodeToInt@1100528702(Code@1100528700 : Code[10]) Result : Integer;
    BEGIN
      EVALUATE(Result, Code);
    END;

    BEGIN
    {
      4PS02 JD 07-05-2009 Adjusted ReportProcedure to make is possible to return the report procedures of all servicelocation in one
                          message
    }
    END.
  }
}

