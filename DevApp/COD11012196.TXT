OBJECT Codeunit 11012196 Load 4PS Mobile License
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012449=rim,
                TableData 11020491=rid;
    OnRun=VAR
            NoOfUsers@1100525000 : Integer;
          BEGIN
            CheckHashLicenseCreator();
            NoOfUsers := LoadMobileLicense();
            AlignUsersWithLicense();
            MESSAGE(Text006, NoOfUsers);
          END;

  }
  CODE
  {
    VAR
      Text003@1100525003 : TextConst 'ENU=THe version of the 4PS Mobile License Validator is not correct. Contact 4PS Support.';
      Text005@1100525004 : TextConst 'ENU=Select a license file for 4PS Mobile';
      Text006@1100525006 : TextConst 'ENU=The license file for 4PS Mobile is succesfully loaded. Number of users: %1.';

    LOCAL PROCEDURE LoadMobileLicense@1100525000() : Integer;
    VAR
      ConstructCustomLicense@1100525001 : Record 11012449;
      FileMgt@1100525006 : Codeunit 419;
      NoOfUsers@1100525002 : Integer;
      LicenseValidator@1100525003 : DotNet "'_4PS.Mobile.LicenseValidator, Version=2.0.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'._4PS.Mobile.LicenseValidator.Validator" RUNONCLIENT;
      FileName@1100525000 : Text[500];
      FilterText@1100525007 : Text;
    BEGIN
      LicenseValidator := LicenseValidator.Validator;

      FilterText := FileMgt.GetToFilterText('', '.lic');
      FileName := FileMgt.OpenFileDialog(Text005, '', FilterText);
      IF FileName = '' THEN
        EXIT;
      LicenseValidator.LoadLicense(FileName);

      NoOfUsers := LicenseValidator.GetConcurrentUsers();
      IF ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS Mobile") THEN BEGIN
        ConstructCustomLicense."Number of Licenses" := NoOfUsers;
        ConstructCustomLicense.Hash := GetHashOfUsers(NoOfUsers);
        ConstructCustomLicense.MODIFY(TRUE);
      END ELSE BEGIN
        ConstructCustomLicense."Licence Type" := ConstructCustomLicense."Licence Type"::"4PS Mobile";
        ConstructCustomLicense."Number of Licenses" := NoOfUsers;
        ConstructCustomLicense.Hash := GetHashOfUsers(NoOfUsers);
        ConstructCustomLicense.INSERT(TRUE);
      END;
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE CheckHashLicenseCreator@1100525002();
    VAR
      TempBlob@1100525002 : Record 99008535;
      LicenseValidator@1100525015 : DotNet "'_4PS.Mobile.LicenseValidator, Version=2.0.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'._4PS.Mobile.LicenseValidator.Validator" RUNONCLIENT;
      IStream@1100525007 : InStream;
      EncryptionMgt@1100525000 : Codeunit 824;
      FileMgt@1100525014 : Codeunit 419;
      Base64String@1100525016 : Text;
      LicenseValidatorFileName@1100525005 : Text[250];
      PartOfBase64String@1100525006 : Text[1024];
      Hash@1100525003 : ARRAY [50] OF Text[100];
      HashReference@1100525009 : ARRAY [50] OF Text[100];
      I@1100525013 : Integer;
      StartPos@1100525017 : Integer;
    BEGIN
      LicenseValidator := LicenseValidator.Validator;
      LicenseValidatorFileName := LicenseValidator.GetType.Assembly.Location;

      FileMgt.BLOBImport4PS(TempBlob, LicenseValidatorFileName, FALSE);
      TempBlob.Blob.CREATEINSTREAM(IStream);
      Base64EncodeStream(IStream, Base64String);

      HashReference[1] := '6112848918db04f6b68ccc78d08f6585';
      HashReference[2] := 'ea34c8de90e8d1d25e48630c5596116d';
      HashReference[3] := 'a5857d563d73d64b146b8b7cab2e10df';
      HashReference[4] := '4813a0f96074b7c1bb1407ab3b9f8c59';
      HashReference[5] := 'a028dbe4f343753b9c52b07c0c11de29';
      HashReference[6] := 'ad6daec82ee2a419f1b154bf2e5b054c';
      HashReference[7] := 'ab93f1b3caa2de34e389d042171e3743';
      HashReference[8] := '1ebff0d210dbdbc90ac42d1f00e7fb84';
      HashReference[9] := 'a055b8e4b5c1d6f2fe280ca204f0aaf2';
      HashReference[10] := 'd12d0392901358e37c3a2d5711f0d282';
      HashReference[11] := '86ebc2cd01ca7cd1aabc335017bec49c';
      HashReference[12] := '1515cc88b305e01fafc7cf68d89ca975';
      HashReference[13] := 'bb7915971eda8b249d4a44939d919157';
      HashReference[14] := 'e86da9d33b36ebace8fac1e049fbfb45';
      HashReference[15] := 'f5f3c723565370a35391bc5878ea202c';
      HashReference[16] := '761ffe90d8201be6c3b9a578df17bece';
      HashReference[17] := 'ea3ea3ff847b80a963627b241cf98eb4';
      HashReference[18] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[19] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[20] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[21] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[22] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[23] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[24] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[25] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[26] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[27] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[28] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[29] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[30] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[31] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[32] := 'd47b127bc2de2d687ddc82dac354c415';

      I := 1;
      StartPos := 1;
      WHILE StartPos < STRLEN(Base64String) DO BEGIN
        PartOfBase64String := COPYSTR(Base64String, StartPos, MAXSTRLEN(PartOfBase64String));
        IF PartOfBase64String <> '' THEN BEGIN
          Hash[I] := EncryptionMgt.CalculateStringMD5(PartOfBase64String);
          IF Hash[I] <> HashReference[I] THEN
            ERROR(Text003);
        END;
        I := I + 1;
        StartPos := StartPos + MAXSTRLEN(PartOfBase64String);
      END;
    END;

    LOCAL PROCEDURE Base64EncodeStream@1100525003(VAR IStream@1100525000 : InStream;VAR Base64String@1100525001 : Text);
    VAR
      MemoryStream@1100525008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Bytes@1100525007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@1100525006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      MemoryStream := MemoryStream.MemoryStream;
      COPYSTREAM(MemoryStream, IStream);
      Bytes := MemoryStream.GetBuffer;
      Base64String := Convert.ToBase64String(Bytes);
    END;

    LOCAL PROCEDURE GetHashOfUsers@1100525001(NumberOfUsers@1100525000 : Integer) : Text[32];
    VAR
      EncryptionMgt@1100525001 : Codeunit 824;
      UsersString@1100525002 : Text[100];
    BEGIN
      UsersString := STRSUBSTNO('Dit is de sleutel!%1', NumberOfUsers);
      EXIT(EncryptionMgt.CalculateStringMD5(UsersString));
    END;

    PROCEDURE IsLicenseValid@1210190135() : Boolean;
    VAR
      CustomLicense@1210190000 : Record 11012449;
      Hash@1210190001 : Text[32];
    BEGIN
      CustomLicense.GET(CustomLicense."Licence Type"::"4PS Mobile");
      Hash := GetHashOfUsers(CustomLicense."Number of Licenses");
      IF Hash <> CustomLicense.Hash THEN BEGIN
        EXIT(FALSE);
      END ELSE BEGIN
        EXIT(TRUE);
      END;
    END;

    PROCEDURE AlignUsersWithLicense@1100525004();
    VAR
      Employee@1100525001 : Record 5200;
      ConstructCustomLicense@1100525004 : Record 11012449;
      Company@1100525007 : Record 2000000006;
      EmployeeCount@1100525002 : Integer;
      EmployeeInFieldServiceCount@1100525003 : Integer;
      i@1100525005 : Integer;
      MaxActive@1100525006 : Integer;
    BEGIN
      //DP00465.o  Update T11020491 'Employee in Field Service' (with DataPerCompany=No) not needed anymore
      //           Now resource of the type 'Employee' with 'Active in FSA' are counted (also table with DataPerCompany=No)
      //EmployeeInFieldServiceCount := EmployeeInFieldService.COUNT;
      //EmployeeCount := 0;
      //IF Company.FINDSET THEN
      //  REPEAT
      //    Employee.CHANGECOMPANY(Company.Name);
      //    Employee.SETRANGE("Active in FSA", TRUE);
      //    EmployeeCount += Employee.COUNT;
      //  UNTIL Company.NEXT = 0;
      //ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS Mobile");
      //MaxActive := ConstructCustomLicense."Number of Licenses";
      //IF (EmployeeCount <> EmployeeInFieldServiceCount) OR (EmployeeInFieldServiceCount > MaxActive) THEN BEGIN
      //  EmployeeInFieldService.DELETEALL;
      //  i := 0;
      //  IF Company.FINDSET THEN BEGIN
      //    REPEAT
      //      Employee.CHANGECOMPANY(Company.Name);
      //      Employee.SETRANGE("Active in FSA", TRUE);
      //      IF Employee.FINDSET(TRUE, FALSE) THEN BEGIN
      //        REPEAT
      //          i += 1;
      //          IF i <= MaxActive THEN BEGIN
      //            EmployeeInFieldService."Company Name" := Company.Name;
      //            EmployeeInFieldService."Employee No." := Employee."No.";
      //            EmployeeInFieldService.INSERT(FALSE); //in other company
      //          END ELSE BEGIN
      //            Employee."Active in FSA" := FALSE;  //in other company, no validation
      //            Employee.MODIFY(FALSE); ; //in other company
      //          END;
      //        UNTIL Employee.NEXT = 0;
      //      END;
      //    UNTIL Company.NEXT = 0;
      //  END;
      //END;
    END;

    BEGIN
    END.
  }
}

