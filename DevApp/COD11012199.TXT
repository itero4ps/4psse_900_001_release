OBJECT Codeunit 11012199 Post Debrief Data (4PS-Mobile)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11012677;
    OnRun=VAR
            Logbook@1100528000 : Record 11012677;
          BEGIN
            Logbook.COPY(Rec);
            WITH Logbook DO BEGIN
              CASE "Debrief Type" OF
                "Debrief Type"::WorkOrder:
                  PostDebriefWorkOrder(gDebriefWorkOrder, Logbook);
                "Debrief Type"::Budget:
                  PostDebriefBudgetLine(gDebriefBudgetLine, Logbook);
                "Debrief Type"::CostPlus:
                  PostDebriefCostPlusEntry(gDebriefCostPlusEntry, Logbook);
                "Debrief Type"::AdviceOrder:
                  PostDebriefAdviceOrderLine(gDebriefAdviceOrderLine, Logbook);
                "Debrief Type"::AdviceOrderText:
                  PostDebriefAdviceOrderLineText(gDebriefAdviceOrderLineText, Logbook);
                "Debrief Type"::CreatePurchOrder:
                  PostDebriefCreatePurchOrder(gDebriefCreatePurchOrder, Logbook);
                "Debrief Type"::Status:
                  PostDebriefStatusFS(gDebriefStatusFS, Logbook);
                "Debrief Type"::Text:
                  PostDebriefTextLine(gDebriefTextLine, Logbook);
                "Debrief Type"::Hours:
                  PostDebriefHourAccLine(gDebriefHourAccountingLine, Logbook);
                "Debrief Type"::DecentralWO:
                  PostDebriefDecentralWorkOrder(gDebriefDecentralWorkOrder, Logbook);
                "Debrief Type"::InspectionLine:
                  PostDebriefInspectionLine(gDebriefInspectionLine, Logbook);
                "Debrief Type"::ObjectSpecification:
                  PostDebriefObjectSpecLine(gDebriefObjectSpecLine, Logbook);
                "Debrief Type"::OrderText:
                  PostDebriefWorkOrderText(gDebriefWorkOrderText, Logbook);
                "Debrief Type"::RestockItem:
            // C024394.sn
                  IF gDebriefRestockItem.Purchase THEN
                    PostDebriefRestockItemPurchase(gDebriefRestockItem, Logbook)
                  ELSE
            // C024394.en
                    PostDebriefRestockItem(gDebriefRestockItem, Logbook);
                "Debrief Type"::CreateRestockPurchOrder:                                 // C024394.n
                  PostDebriefCreateRestockPurchOrder(gDebriefCreateRestockPO, Logbook);  // C024394.n
                "Debrief Type"::Planning:
                  PostDebriefPlanning(gDebriefPlanning, Logbook);
                "Debrief Type"::SUPProduction:
                  PostDebriefWUPProduction(gDebriefWUPProduction, Logbook);
                "Debrief Type"::ServiceOrderObject: // dp00276
                  PostDebriefServiceOrderObject(gDebriefServiceOrderObject, Logbook);
              END;
            END;
          END;

  }
  CODE
  {
    VAR
      ErrorRec@1100485004 : Record 11012678;
      Text000@1100485002 : TextConst 'ENU=%1 ''%2'' not present';
      MobileSetupRec@1100485010 : Record 11012676;
      GLSetupRec@1100485009 : Record 98;
      Text001@1100485007 : TextConst 'ENU=%1 must be filled';
      Text002@1100485000 : TextConst 'ENU=%1 ''%2'' is already present';
      Text003@1210190000 : TextConst 'ENU=%1 or %2 must be filled';
      Text004@1100529000 : TextConst 'ENU="%1 ''%2'' of %3 must be ''%4'' "';
      Text005@1100529001 : TextConst 'ENU=%1 ''%2'' not allowed for %3 ''%4''';
      Text006@1100527000 : TextConst 'ENU=%1 %2 in company ''%3'' must be the same as in current company (%4/%5)';
      JobSetup@1100525000 : Record 315;
      gDebriefWorkOrder@1100528001 : Record 11012679;
      gDebriefBudgetLine@1100528002 : Record 11012680;
      gDebriefCostPlusEntry@1100528003 : Record 11012681;
      gDebriefAdviceOrderLine@1100528004 : Record 11012682;
      gDebriefAdviceOrderLineText@1100525002 : Record 11229870;
      gDebriefCreatePurchOrder@1100528005 : Record 11125648;
      gDebriefStatusFS@1100528006 : Record 11012683;
      gDebriefTextLine@1100528009 : Record 11012684;
      gDebriefHourAccountingLine@1100528010 : Record 11012685;
      gDebriefDecentralWorkOrder@1100528011 : Record 11012686;
      gDebriefInspectionLine@1100528012 : Record 11020447;
      gDebriefObjectSpecLine@1100528013 : Record 11020448;
      gDebriefWorkOrderText@1100528014 : Record 11020449;
      gDebriefRestockItem@1100528015 : Record 11125645;
      gDebriefCreateRestockPO@1100525001 : Record 11229869;
      gDebriefPlanning@1100528016 : Record 11125646;
      gDebriefWUPProduction@1100528017 : Record 11125650;
      gDebriefServiceOrderObject@1100528018 : Record 11125652;
      gStatusFS_DocRefPoint@1100528008 : Record 11020296;
      gStatusFS_NewDocRefPoint@1100528007 : Boolean;

    PROCEDURE SetPostDebriefWorkorder@1100528000(VAR DebriefWorkOrder@1100528001 : Record 11012679);
    BEGIN
      gDebriefWorkOrder.COPY(DebriefWorkOrder);
    END;

    PROCEDURE GetPostDebriefWorkorder@1100525001(VAR DebriefWorkOrder@1100528001 : Record 11012679);
    BEGIN
      DebriefWorkOrder.COPY(gDebriefWorkOrder); // DP00826.n
    END;

    PROCEDURE SetPostDebriefBudgetLine@1100528007(VAR DebriefBudgetLine@1100528001 : Record 11012680);
    BEGIN
      gDebriefBudgetLine.COPY(DebriefBudgetLine);
    END;

    PROCEDURE SetPostDebriefCostPlusEntry@1100528001(VAR DebriefCostPlusEntry@1100528001 : Record 11012681);
    BEGIN
      gDebriefCostPlusEntry.COPY(DebriefCostPlusEntry);
    END;

    PROCEDURE SetPostDebriefAdviceOrderLine@1100528002(VAR DebriefAdviceOrderLine@1100528001 : Record 11012682);
    BEGIN
      gDebriefAdviceOrderLine.COPY(DebriefAdviceOrderLine);
    END;

    PROCEDURE SetPostDebriefAdviceOrderLineText@1100525009(VAR DebriefAdviceOrderLineText@1100528001 : Record 11229870);
    BEGIN
      gDebriefAdviceOrderLineText.COPY(DebriefAdviceOrderLineText);
    END;

    PROCEDURE SetPostDebriefCreatePurchOrder@1100528003(VAR DebriefCreatePurchOrder@1100528001 : Record 11125648);
    BEGIN
      gDebriefCreatePurchOrder.COPY(DebriefCreatePurchOrder);
    END;

    PROCEDURE SetPostDebriefStatusFS@1100528004(VAR DebriefStatusFS@1100528001 : Record 11012683);
    BEGIN
      gDebriefStatusFS.COPY(DebriefStatusFS);
    END;

    PROCEDURE GetPostDebriefStatusFS@1100528005(VAR DocRefPoint@1100528001 : Record 11020296;VAR NewDocRefPoint@1100528000 : Boolean);
    BEGIN
      DocRefPoint := gStatusFS_DocRefPoint;
      NewDocRefPoint := gStatusFS_NewDocRefPoint;
    END;

    PROCEDURE SetPostDebriefTextLine@1100528006(VAR DebriefTextLine@1100528001 : Record 11012684);
    BEGIN
      gDebriefTextLine.COPY(DebriefTextLine);
    END;

    PROCEDURE SetPostDebriefHourAccLine@1100528008(VAR DebriefHourAccountingLine@1100528001 : Record 11012685);
    BEGIN
      gDebriefHourAccountingLine.COPY(DebriefHourAccountingLine);
    END;

    PROCEDURE SetPostDebriefDecentralWorkOrder@1100528009(VAR DebriefDecentralWorkOrder@1100528001 : Record 11012686);
    BEGIN
      gDebriefDecentralWorkOrder.COPY(DebriefDecentralWorkOrder);
    END;

    PROCEDURE SetPostDebriefInspectionLine@1100528010(VAR DebriefInspectionLine@1100528001 : Record 11020447);
    BEGIN
      gDebriefInspectionLine.COPY(DebriefInspectionLine);
    END;

    PROCEDURE SetPostDebriefObjectSpecLine@1100528011(VAR DebriefObjectSpecLine@1100528001 : Record 11020448);
    BEGIN
      gDebriefObjectSpecLine.COPY(DebriefObjectSpecLine);
    END;

    PROCEDURE SetPostDebriefWorkOrderText@1100528013(VAR DebriefWorkOrderText@1100528001 : Record 11020449);
    BEGIN
      gDebriefWorkOrderText.COPY(DebriefWorkOrderText);
    END;

    PROCEDURE SetPostDebriefRestockItem@1100528012(VAR DebriefRestockItem@1100528001 : Record 11125645);
    BEGIN
      gDebriefRestockItem.COPY(DebriefRestockItem);
    END;

    PROCEDURE SetPostDebriefCreateRestockPurchOrder@1100525006(VAR DebriefCreateRestockPO@1100525000 : Record 11229869);
    BEGIN
      gDebriefCreateRestockPO.COPY(DebriefCreateRestockPO); // C024394.n
    END;

    PROCEDURE SetPostDebriefPlanning@1100528014(VAR DebriefPlanning@1100528001 : Record 11125646);
    BEGIN
      gDebriefPlanning.COPY(DebriefPlanning);
    END;

    PROCEDURE SetPostDebriefWUPProduction@1100528015(VAR DebriefWUPProduction@1100528001 : Record 11125650);
    BEGIN
      gDebriefWUPProduction.COPY(DebriefWUPProduction);
    END;

    PROCEDURE SetPostDebriefServiceOrderObject@1100528016(VAR DebriefServiceOrderObject@1100528001 : Record 11125652);
    BEGIN
      gDebriefServiceOrderObject.COPY(DebriefServiceOrderObject);
    END;

    PROCEDURE GetPostDebriefServiceOrderObject@1100525002(VAR DebriefServiceOrderObject@1100528001 : Record 11125652);
    BEGIN
      DebriefServiceOrderObject.COPY(gDebriefServiceOrderObject); // DP00826.n
    END;

    LOCAL PROCEDURE PostDebriefWorkOrder@1100527000(VAR DebriefWorkOrder@1100485010 : Record 11012679;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100527002 : Record 11229279;
      ServOrder@1100527001 : Record 11012823;
      Project@1100527000 : Record 11072003;
      SignatureWO@1100527003 : Record 11229280;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefWorkOrder."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        IF (DebriefWorkOrder.Signer <> '') AND (DebriefWorkOrder.Signer <> WorkOrder.Signer) THEN BEGIN
          WorkOrder.Signer := DebriefWorkOrder.Signer;
          WorkOrder.MODIFY;
        END;
        DebriefWorkOrder.CALCFIELDS(Signature);
        IF DebriefWorkOrder.Signature.HASVALUE THEN BEGIN
          IF NOT SignatureWO.GET(WorkOrder."No.") THEN BEGIN
            SignatureWO.INIT;
            SignatureWO."Work Order No." := WorkOrder."No.";
            SignatureWO.INSERT;
          END;
          SignatureWO.Signature := DebriefWorkOrder.Signature;
          SignatureWO.MODIFY;
        END;

        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefWorkOrderSO(DebriefWorkOrder, Logbook, ServOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefWorkOrder."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefWorkOrderSO@1100485004(VAR VarDebriefServOrderRec@1100485010 : Record 11012679;ILogbookRec@1100485003 : Record 11012677;ServOrder@1100527001 : Record 11012823) : Boolean;
    VAR
      lvServAnalRec@1100485001 : Record 11012842;
      lvServiceOrderIndicationRec@1100485009 : Record 11012837;
      ServOrderExtension@1100527002 : Record 11071727;
      SignatureSO@1100527000 : Record 11020349;
      ServiceLocation@1100528601 : Record 11012801;
      ServiceLocContactDebrief@1100528600 : Record 11072288;
      lvError@1100485000 : Boolean;
      lvUpdate@1100485002 : Boolean;
    BEGIN
      WITH VarDebriefServOrderRec DO BEGIN
        //* Check
        IF ("Order Kind" <> '') THEN BEGIN
          IF lvServiceOrderIndicationRec.GET(lvServiceOrderIndicationRec.Indication::Kind, "Order Kind") THEN BEGIN
            lvUpdate := TRUE;
          END ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Order Kind"),"Order Kind"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Order Type" <> '') THEN BEGIN
          IF lvServiceOrderIndicationRec.GET(lvServiceOrderIndicationRec.Indication::Type, "Order Type") THEN BEGIN
            lvUpdate := TRUE;
          END ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Order Type"),"Order Type"),ILogbookRec,"Line No.");
          END;
        END;
        IF (Problem <> '') AND (Problem <> ServOrder.Problem) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Problem, Problem) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION(Problem),Problem),ILogbookRec,"Line No.");
          END;
        END;
        IF (Cause <> '') AND (Cause <> ServOrder.Cause) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Cause, Cause) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION(Cause),Cause),ILogbookRec,"Line No.");
          END;
        END;
        IF (Solution <> '') AND (Solution <> ServOrder.Solution) THEN BEGIN
          IF lvServAnalRec.GET(lvServAnalRec."Analysis Type"::Solution, Solution) THEN
            lvUpdate := TRUE
          ELSE BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION(Solution),Solution),ILogbookRec,"Line No.");
          END;
        END;
        IF (Signer <> '') AND (Signer <> ServOrder.Signer) THEN
          lvUpdate := TRUE;
        IF ("E-Mail Signer" <> '') AND ("E-Mail Signer" <> ServOrder."E-Mail Signer") THEN
          lvUpdate := TRUE;
        CALCFIELDS(Signature);
        IF Signature.HASVALUE THEN
          lvUpdate := TRUE;
        IF ("Order No. Customer" <> '') AND ("Order No. Customer" <> ServOrder."Order No. Customer") THEN
          lvUpdate := TRUE;
        IF ("Send Report" <> ServOrder."Send Report") THEN
          lvUpdate := TRUE;
        IF("Contact Name" <> ServOrder."Contact Name") THEN
          lvUpdate := TRUE;
        IF("Phone No." <> ServOrder."Phone No.") THEN
          lvUpdate := TRUE;
        IF("Phone No. 2" <> ServOrder."Phone No. 2") THEN
          lvUpdate := TRUE;
        IF("Mobile Phone No." <> ServOrder."Mobile Phone No.") THEN
          lvUpdate := TRUE;
        IF("E-Mail" <> ServOrder."E-Mail") THEN
          lvUpdate := TRUE;
          lvUpdate := TRUE;
        IF ("Room (SUP)" <> '') AND ("Room (SUP)" <> ServOrder."Room (SUP)") THEN
          lvUpdate := TRUE;
        IF ("Part (SUP)" <> '') AND ("Part (SUP)" <> ServOrder."Part (SUP)") THEN
          lvUpdate := TRUE;

        IF lvError THEN
          EXIT(FALSE);
        IF NOT lvUpdate THEN
          EXIT(TRUE);

        //* Post
        IF Signature.HASVALUE THEN BEGIN
          IF NOT SignatureSO.GET(ServOrder."No.") THEN BEGIN
            SignatureSO.INIT;
            SignatureSO."Service Order No." := ServOrder."No.";
            SignatureSO.INSERT;
          END;
          SignatureSO.Signature := Signature;
          SignatureSO.MODIFY;
        END;

        ServOrder.GET(ServOrder."No.");
        ServOrder.SetSkipUpdateServiceText(TRUE);
        "Old Contact Name" := ServOrder."Contact Name";
        "Old Phone No." := ServOrder."Phone No.";
        "Old Phone No. 2" := ServOrder."Phone No. 2";
        "Old Mobile Phone No." := ServOrder."Mobile Phone No.";
        "Old E-Mail" := ServOrder."E-Mail";
        IF ("Order Kind" <> '') THEN
          ServOrder.VALIDATE("Order Kind", "Order Kind");
        IF ("Order Type" <> '') THEN
          ServOrder.VALIDATE("Order Type", "Order Type");
        IF ("Room (SUP)" <> '') AND ("Room (SUP)" <> ServOrder."Room (SUP)") THEN
          ServOrder.VALIDATE("Room (SUP)", "Room (SUP)");
        IF ("Part (SUP)" <> '') AND ("Part (SUP)" <> ServOrder."Part (SUP)") THEN
          ServOrder.VALIDATE("Part (SUP)", "Part (SUP)");
        IF (Problem <> '') AND (Problem <> ServOrder.Problem) THEN
          ServOrder.VALIDATE(Problem, Problem);
        IF (Cause <> '') AND (Cause <> ServOrder.Cause) THEN
          ServOrder.VALIDATE(Cause, Cause);
        IF (Solution <> '') AND (Solution <> ServOrder.Solution) THEN
          ServOrder.VALIDATE(Solution, Solution);
        IF ("E-Mail Signer" <> '') THEN
          ServOrder."E-Mail Signer" := "E-Mail Signer";
        IF (Signer <> '') THEN
          ServOrder.Signer := Signer;
        IF ("Order No. Customer" <> '') THEN
          ServOrder.VALIDATE("Order No. Customer", "Order No. Customer");
        ServOrder.VALIDATE("Send Report", "Send Report");
        ServOrder.VALIDATE("Contact Name", "Contact Name");
        ServOrder.VALIDATE("Phone No.", "Phone No.");
        ServOrder.VALIDATE("Phone No. 2", "Phone No. 2");
        ServOrder.VALIDATE("Mobile Phone No.", "Mobile Phone No.");
        ServOrder.VALIDATE("E-Mail", "E-Mail");
        ServOrder.MODIFY(TRUE);

        IF ServOrder."Service Location No." <> '' THEN BEGIN
          IF ServiceLocation.GET(ServOrder."Service Location No.") THEN BEGIN
            IF ServiceLocation."Phone No." <> "Phone No." THEN
              InsertOrModifyServLocContactDebrief(
                ServOrder."No.", DATABASE::"Service Location", ServiceLocation.FIELDNO("Phone No."), ServiceLocation."Phone No.", "Phone No.");
            IF ServiceLocation."Phone No. 2" <> "Phone No. 2" THEN
              InsertOrModifyServLocContactDebrief(
                ServOrder."No.", DATABASE::"Service Location", ServiceLocation.FIELDNO("Phone No. 2"), ServiceLocation."Phone No. 2", "Phone No. 2");
            IF ServiceLocation."Mobile Phone No." <> "Mobile Phone No." THEN
              InsertOrModifyServLocContactDebrief(
                ServOrder."No.", DATABASE::"Service Location", ServiceLocation.FIELDNO("Mobile Phone No."), ServiceLocation."Mobile Phone No.", "Mobile Phone No.");
            IF ServiceLocation."E-Mail" <> "E-Mail" THEN
              InsertOrModifyServLocContactDebrief(
                ServOrder."No.", DATABASE::"Service Location", ServiceLocation.FIELDNO("E-Mail"), ServiceLocation."E-Mail", "E-Mail");
          END;
        END;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefBudgetLine@1100529002(VAR DebriefBudgetLine@1100485007 : Record 11012680;Logbook@1100485001 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529000 : Record 11229279;
      ServOrder@1100529001 : Record 11012823;
      Project@1100529002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefBudgetLine."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefBudgetLineSO(DebriefBudgetLine, Logbook, WorkOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefBudgetLine."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefBudgetLineSO@1100485009(VAR VarDebriefBudgetLineRec@1100485007 : Record 11012680;ILogbookRec@1100485001 : Record 11012677;WorkOrder@1100529003 : Record 11229279) : Boolean;
    VAR
      lvBudgetRec@1100485004 : Record 11012875;
      lvError@1100485000 : Boolean;
      lvUpdate@1100485002 : Boolean;
      lvExist@1100485006 : Boolean;
    BEGIN
      WITH VarDebriefBudgetLineRec DO BEGIN
        //* Check
        lvBudgetRec.SETRANGE("Budget Type", lvBudgetRec."Budget Type"::Order);
        lvBudgetRec.SETRANGE("Service Order No.", WorkOrder."Source No.");
        lvBudgetRec.SETRANGE("Object No.", "Object No.");
        lvBudgetRec.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
        lvBudgetRec.SETRANGE("Line No.", "Budget Line No.");
        lvExist := lvBudgetRec.FINDFIRST;
        IF (NOT lvExist) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(
            STRSUBSTNO(Text000,
              lvBudgetRec.TABLECAPTION, WorkOrder."Source No." + '-' + "Object No." + '-' +
              "Maintenance Scheme" + '-' + FORMAT("Budget Line No.")),
            ILogbookRec, "Line No.");
          EXIT(FALSE); //*If Budget Line not present, then further testing not needed
        END;
        IF (Finished <> lvBudgetRec.Finished) THEN
          lvUpdate := TRUE;
        IF ("Follow-up Job" <> lvBudgetRec."Follow-up Job") THEN
          lvUpdate := TRUE;

        IF lvError THEN
          EXIT(FALSE);
        IF NOT lvUpdate THEN
          EXIT(TRUE);

        //* Post
        IF (Finished <> lvBudgetRec.Finished) THEN
          lvBudgetRec.VALIDATE(Finished, Finished);
        IF ("Follow-up Job" <> lvBudgetRec."Follow-up Job") THEN
          lvBudgetRec.VALIDATE("Follow-up Job", "Follow-up Job");
        lvBudgetRec.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefCostPlusEntry@1100529003(VAR DebriefCostPlus@1100485013 : Record 11012681;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
      PostingIC@1100529003 : Boolean;
    BEGIN
      // If IC then debrief message is present in logbook of both companies. CostPlus is always/only done in the WO-company.
      // If not IC then the ItmJnl posting is also done in the WO-company. IF IC then only the ItmJnl posting is done (
      // (in Resource/empl company)'.
      IF DebriefCostPlus.Stock THEN BEGIN
        Logbook.CALCFIELDS("Source Company");
        IF (Logbook."Source Company" <> COMPANYNAME) AND (Logbook."Source Company" <> '') THEN
          PostingIC := TRUE;
      END;
      IF CheckWorkorder(Logbook, DebriefCostPlus."Line No.", (NOT PostingIC), WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefCostPlusEntrySO(DebriefCostPlus, Logbook, WorkOrder, PostingIC));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefCostPlus."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefCostPlusEntrySO@1100485000(VAR VarDebriefCostPlusRec@1100485013 : Record 11012681;ILogbookRec@1100485003 : Record 11012677;WorkOrder@1100529000 : Record 11229279;PostingIC@1100529003 : Boolean) : Boolean;
    VAR
      Resource@1100529001 : Record 11229278;
      Empl@1100529002 : Record 5200;
      lvCostPlusRec@1100485004 : Record 11012825;
      lvCostPlusRec2@1100485002 : Record 11012825;
      lvItemJnlLineRec@1100485007 : Record 83;
      lvItemJnlLineRec2@1100485008 : Record 83;
      lvItemRec@1100485005 : Record 27;
      lvDimValRec@1100485009 : Record 349;
      lvWageCompRec@1100485011 : Record 11012014;
      lvUnitRec@1100485012 : Record 204;
      lvVendorRec@1100528100 : Record 11012304;
      lvTradeItemRec@1100528101 : Record 11012317;
      lvLocRec@1100525002 : Record 14;
      DimensionValue@1100525004 : Record 349;
      ServiceSetup@1100525003 : Record 11012800;
      lvError@1100485000 : Boolean;
      lvExisting@1100525000 : Boolean;
      lvPrice@1100525001 : Decimal;
      SalesReceivablesSetup@1100525005 : Record 311;
    BEGIN
      WITH VarDebriefCostPlusRec DO BEGIN
        SalesReceivablesSetup.GET;                                       //CALL C025831 n
        MobileSetupRec.GET('');
        GLSetupRec.GET;

        //* Check
        IF NOT CheckResource(ILogbookRec, "Line No.", PostingIC, Resource, Empl) THEN
          lvError := TRUE;

        IF ("Posting Date" = 0D) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION("Posting Date")),ILogbookRec,"Line No.");
        END;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT lvItemRec.GET("Item No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Item No."),"Item No."),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Vendor (Trade Item)" <> '') THEN BEGIN
          IF NOT lvVendorRec.GET("Vendor (Trade Item)") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Vendor (Trade Item)"), "Vendor (Trade Item)"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Trade Item" <> '') THEN BEGIN
          IF NOT lvTradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Trade Item"),
              STRSUBSTNO('%1; %2',"Vendor (Trade Item)", "Trade Item")),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Cost Object" <> '') THEN BEGIN
          IF NOT lvDimValRec.GET(GLSetupRec."Shortcut Dimension 2 Code","Cost Object") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Cost Object"),"Cost Object"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Wage Component" <> '') THEN BEGIN
          IF NOT lvWageCompRec.GET("Wage Component") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Wage Component"),"Wage Component"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT lvUnitRec.GET("Unit of Measure") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Unit of Measure"),"Unit of Measure"),ILogbookRec,"Line No.");
          END;
        END;
        IF Stock AND PostingIC THEN BEGIN
          IF NOT CheckMobSetupReasonReceivComp(MobileSetupRec, WorkOrder."Source Company", ILogbookRec, "Line No.") THEN
            lvError := TRUE;
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        IF ("Cost Plus Line No." <> 0) AND (NOT PostingIC) THEN BEGIN
          //Update existing record
          lvExisting := lvCostPlusRec.GET(WorkOrder."Source No.", "Cost Plus Line No.");
        END;

        IF Stock AND (NOT lvExisting) AND (PostingIC OR ((WorkOrder."Source Company" = COMPANYNAME) AND (Resource.Company = COMPANYNAME))) THEN BEGIN
          //Only for used items
          MobileSetupRec.TESTFIELD("Item Journal Template");
          MobileSetupRec.TESTFIELD("Item Journal Batch");

          IF ("Location Code" <> '') THEN BEGIN // Call C006619
            IF lvLocRec.GET("Location Code") THEN BEGIN
              IF (lvLocRec."Inventory Journal Template" <> '') AND (lvLocRec."Inventory Journal Batch" <> '') THEN BEGIN
                MobileSetupRec."Item Journal Template" := lvLocRec."Inventory Journal Template";
                MobileSetupRec."Item Journal Batch" := lvLocRec."Inventory Journal Batch";
              END;
              //C019313.sn
              IF (lvLocRec."Restock Item Journal Template" <> '') AND (lvLocRec."Restock Item Journal Batch" <> '') THEN BEGIN
                MobileSetupRec."Restock Item Journal Template" := lvLocRec."Restock Item Journal Template";
                MobileSetupRec."Restock Item Journal Batch" := lvLocRec."Restock Item Journal Batch";
              END;
              //C019313.en
            END;
          END;                                  // Call C006619

          lvItemJnlLineRec.INIT;
          lvItemJnlLineRec.VALIDATE("Journal Template Name", MobileSetupRec."Item Journal Template");
          lvItemJnlLineRec.VALIDATE("Journal Batch Name", MobileSetupRec."Item Journal Batch");
          lvItemJnlLineRec2.SETRANGE("Journal Template Name", lvItemJnlLineRec."Journal Template Name");
          lvItemJnlLineRec2.SETRANGE("Journal Batch Name", lvItemJnlLineRec."Journal Batch Name");
          IF lvItemJnlLineRec2.FINDLAST THEN
            lvItemJnlLineRec."Line No." := lvItemJnlLineRec2."Line No." + 10000
          ELSE BEGIN
            lvItemJnlLineRec."Line No." := 10000;
          END;
          lvItemJnlLineRec2."Entry Type" := lvItemJnlLineRec."Entry Type"::Sale;
          lvItemJnlLineRec.SetUpNewLine(lvItemJnlLineRec2);
          lvItemJnlLineRec.INSERT(TRUE);
          lvItemJnlLineRec."Document No." := WorkOrder."Source No.";
          IF ("Posting Date" <> 0D) THEN
            lvItemJnlLineRec.VALIDATE("Posting Date", "Posting Date");
          IF PostingIC THEN
            lvItemJnlLineRec.VALIDATE("Receiving Company", WorkOrder."Source Company");
          lvItemJnlLineRec.VALIDATE("Service Order No.", WorkOrder."Source No.");
          IF ("Item No." <> '') THEN BEGIN
            lvItemJnlLineRec.VALIDATE("Item No.", "Item No.");
            IF ("Location Code" <> '') THEN
              lvItemJnlLineRec.VALIDATE("Location Code", "Location Code");
            IF ("Unit of Measure" <> '') THEN
              lvItemJnlLineRec.VALIDATE("Unit of Measure Code", "Unit of Measure");
            IF (Quantity <> 0) THEN
              lvItemJnlLineRec.VALIDATE(Quantity, ROUND(Quantity,0.00001));
          END ELSE BEGIN  //because in validation of Location Code a.o. the Item No. is being used.
            IF ("Location Code" <> '') THEN
              lvItemJnlLineRec."Location Code" := "Location Code";
            IF ("Unit of Measure" <> '') THEN
              lvItemJnlLineRec."Unit of Measure Code" := "Unit of Measure";
            IF (Quantity <> 0) THEN
              lvItemJnlLineRec.Quantity := ROUND(Quantity,0.00001);
          END;
          IF ("Object No." <> '') THEN
            lvItemJnlLineRec.VALIDATE("Service Object No.", "Object No.");
          IF (Description <> '') THEN
            lvItemJnlLineRec.VALIDATE(Description, Description);
          IF ("Description 2" <> '') THEN
            lvItemJnlLineRec.VALIDATE("Description 2", "Description 2");  //db, 25-02-13: C005716
          IF ("Posting Date" <> 0D) THEN
            lvItemJnlLineRec.VALIDATE("Delivery Date", "Posting Date");
          IF (MobileSetupRec."Reason Code Hours/Material" <> '') THEN
            lvItemJnlLineRec."Reason Code" := MobileSetupRec."Reason Code Hours/Material";
          lvItemJnlLineRec.MODIFY(TRUE);
        END;

        IF NOT PostingIC THEN BEGIN
          IF NOT lvExisting THEN BEGIN
            lvCostPlusRec.INIT;
            lvCostPlusRec.VALIDATE("Service Order No.", WorkOrder."Source No.");
            lvCostPlusRec2.SETRANGE("Service Order No.", lvCostPlusRec."Service Order No.");
            IF lvCostPlusRec2.FINDLAST THEN
              lvCostPlusRec."Line No." := lvCostPlusRec2."Line No." + 10000
            ELSE
              lvCostPlusRec."Line No." := 10000;
            lvCostPlusRec.INSERT(TRUE);
            lvCostPlusRec."Created by Employee No." := Resource."Source No.";
            IF Resource.Company <> COMPANYNAME THEN
              lvCostPlusRec."Created by Employee Company" := Resource.Company;
            IF VarDebriefCostPlusRec."Created by Work Order No." <> '' THEN // C019647.n
              lvCostPlusRec."Created by Work Order No." := VarDebriefCostPlusRec."Created by Work Order No."
       // C019647.sn
            ELSE
              lvCostPlusRec."Created by Work Order No." := WorkOrder."No.";
       // C019647.en
          END;

          //Note that the order of below validations is crucial, because
          IF ("Posting Date" <> 0D) THEN
            lvCostPlusRec.VALIDATE("Posting Date", "Posting Date");
      // C023511.sn
          IF (NOT lvExisting) AND (Resource."Source No." <> '') AND (Resource.Company = COMPANYNAME) THEN BEGIN
            DimensionValue.SETRANGE(Code, "Cost Object");
            DimensionValue.SETRANGE("Global Dimension No.", 2);
            IF DimensionValue.FINDFIRST THEN
              IF DimensionValue."Cost Type" = DimensionValue."Cost Type"::Labor THEN
      // C023511.en
                lvCostPlusRec."Employee No." := Resource."Source No.";
          END; // C023511.n
          IF ("Item No." <> '') THEN
            lvCostPlusRec.VALIDATE("Item No.", "Item No.");
          IF ("Vendor (Trade Item)" <> '') THEN
            lvCostPlusRec.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
          IF ("Trade Item" <> '') THEN
            lvCostPlusRec.VALIDATE("Trade Item", "Trade Item");
          IF ("Cost Object" <> '') AND (lvCostPlusRec."Cost Object" = '') THEN BEGIN
            lvCostPlusRec.SetCostObject; //call T000440
            lvCostPlusRec.VALIDATE("Cost Object", "Cost Object");
          END; //call T000440
          IF ("Wage Component" <> '') THEN
            lvCostPlusRec.VALIDATE("Wage Component", "Wage Component");
          IF ("Unit of Measure" <> '') THEN
            lvCostPlusRec.VALIDATE("Unit of Measure", "Unit of Measure");
          lvCostPlusRec.VALIDATE(Quantity, ROUND(Quantity,0.00001));
          lvCostPlusRec.VALIDATE("Additional Cost", "Additional Cost");
          lvCostPlusRec.VALIDATE("Extra Cost", "Extra Cost");
          IF ("Object No." <> '') THEN
            lvCostPlusRec.VALIDATE("Object No.", "Object No.");
          IF (Description <> '') THEN
            lvCostPlusRec.VALIDATE(Description, Description);
          IF ("Description 2" <> '') THEN
            lvCostPlusRec.VALIDATE("Description 2", "Description 2");
      // C022905.sn
          ServiceSetup.GET;
          lvCostPlusRec.CALCFIELDS("Cost Type");
          IF (ServiceSetup."Description Cost Plus Entry" = ServiceSetup."Description Cost Plus Entry"::RateCode) AND
             (lvCostPlusRec."Cost Type" = lvCostPlusRec."Cost Type"::Labor) AND
             (lvCostPlusRec."Cost Object" <> '') THEN
            lvCostPlusRec.GetDescription;
      // C022905.en
          IF "Extra Cost" THEN //Call 17798
            IF Amount <> 0 THEN BEGIN
               IF Quantity <> 0 THEN
                 lvPrice := Amount / Quantity
               ELSE
                 lvPrice := Amount;
              lvCostPlusRec.VALIDATE("Basic Price (LCY)", lvPrice);
          END;
          lvCostPlusRec.VALIDATE("FSA-Created Entry", TRUE);

          IF lvCostPlusRec."Cost Type" = lvCostPlusRec."Cost Type"::Labor THEN
            lvCostPlusRec.GetCostPrice;

          IF ((NOT lvExisting) AND IsSUPOrder(WorkOrder."Source No.")) THEN
            lvCostPlusRec.VALIDATE(Chargeable, FALSE);

          lvCostPlusRec.MODIFY(TRUE);

          IF SalesReceivablesSetup."Charge Removal Contribution" THEN  //CALL C025831 n
            lvCostPlusRec.DetermineRemovalContribLine(lvCostPlusRec, FALSE);

        END;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefAdviceOrderLine@1100485007(VAR VarDebriefAdviceOrderRec@1100485001 : Record 11012682;ILogbookRec@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
      Resource@1100529003 : Record 11229278;
      Empl@1100529004 : Record 5200;
      lvAdvOrderRec@1100485004 : Record 11012055;
      lvAdvOrderRec2@1100485002 : Record 11012055;
      lvTradeItem@1210190000 : Record 11012317;
      lvETIMVendor@1210190001 : Record 11012304;
      lvItemRec@1100485005 : Record 27;
      lvUnitRec@1100485012 : Record 204;
      lvError@1100485000 : Boolean;
    BEGIN
      WITH VarDebriefAdviceOrderRec DO BEGIN
        JobSetup.GET;
        //* Check
        IF NOT CheckWorkorder(ILogbookRec, "Line No.", TRUE, WorkOrder, ServOrder, Project) THEN
          EXIT(FALSE); //* If not ok then no more testing
        IF WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder THEN BEGIN  // (Temporary?) not supported for Project in Mobile(/NAV)
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, ILogbookRec.FIELDCAPTION("Debrief Type"), ILogbookRec."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"), ILogbookRec, "Line No.");
          EXIT(FALSE);
        END;
        IF NOT CheckResource(ILogbookRec, "Line No.", FALSE, Resource, Empl) THEN
          lvError := TRUE;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT lvItemRec.GET("Item No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Item No."),"Item No."),ILogbookRec,"Line No.");
          END;
        END;
        IF (Quantity = 0) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION(Quantity)),ILogbookRec,"Line No.");
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT lvUnitRec.GET("Unit of Measure") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Unit of Measure"),"Unit of Measure"),ILogbookRec,"Line No.");
          END;
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvAdvOrderRec.INIT;
        lvAdvOrderRec.SetFrom4PSMobile();
        IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
          lvAdvOrderRec."Record Type" := lvAdvOrderRec."Record Type"::Project;
          lvAdvOrderRec."Service Order No." := '';
          lvAdvOrderRec.VALIDATE("Project No.", WorkOrder."Source No.");
        END ELSE BEGIN
          lvAdvOrderRec."Record Type" := lvAdvOrderRec."Record Type"::ServOrder;
          lvAdvOrderRec."Project No." := '';
          lvAdvOrderRec.VALIDATE("Service Order No.", WorkOrder."Source No.");
        END;
        lvAdvOrderRec2.SETRANGE("Record Type", lvAdvOrderRec."Record Type");
        lvAdvOrderRec2.SETRANGE("Project No.", lvAdvOrderRec."Project No.");
        lvAdvOrderRec2.SETRANGE("Service Order No.", lvAdvOrderRec."Service Order No.");
        IF lvAdvOrderRec2.FINDLAST THEN
          lvAdvOrderRec."Line No." := lvAdvOrderRec2."Line No." + 10000
        ELSE
          lvAdvOrderRec."Line No." := 10000;
        lvAdvOrderRec.INSERT(TRUE);

        IF ("Item No." <> '') THEN
          lvAdvOrderRec.VALIDATE("Item No.", "Item No.");
        IF (("Vendor (Trade Item)" <> '') AND ("Trade Item" <> '')) THEN BEGIN
          IF lvETIMVendor.GET("Vendor (Trade Item)") THEN BEGIN
            IF lvTradeItem.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
              lvAdvOrderRec.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
              lvAdvOrderRec.VALIDATE("Trade Item","Trade Item");
            END;
          END;
        END;
        lvAdvOrderRec."Comments for Logistics" := "Comments for Logistics";
        IF ( lvAdvOrderRec."Cost Object" = '') THEN BEGIN
          MobileSetupRec.GET('');
          lvAdvOrderRec.VALIDATE("Cost Object", MobileSetupRec."Def. Cost Object Items");
        END;
        IF (Description <> '') THEN
          lvAdvOrderRec.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          lvAdvOrderRec.VALIDATE("Description 2", "Description 2");
        IF ("Unit of Measure" <> '') THEN
          lvAdvOrderRec.VALIDATE("Unit of Measure", "Unit of Measure");
        IF (Quantity <> 0) THEN
          lvAdvOrderRec.VALIDATE("Quantity (Advice)", ROUND(Quantity,0.00001));
        lvAdvOrderRec."Created by Employee No." := Resource."Source No.";
        IF Resource.Company <> COMPANYNAME THEN
          lvAdvOrderRec."Created by Employee Company" := Resource.Company;
        lvAdvOrderRec."Created by Work Order No." := WorkOrder."No.";
        lvAdvOrderRec."Decentral Created" := TRUE;
        lvAdvOrderRec.VALIDATE("Decentral Created Guid", VarDebriefAdviceOrderRec."Decentral Created Guid");
        lvAdvOrderRec.VALIDATE("Purchase by Field Service", Purchase);
        IF Purchase THEN BEGIN
      //    lvAdvOrderRec.VALIDATE(Transaction, lvAdvOrderRec.Transaction::Purchase);
          lvAdvOrderRec.VALIDATE(Transaction, JobSetup."Default Advice Order Trans.");
          IF ("Vendor No." <> '') THEN
            lvAdvOrderRec.VALIDATE(Vendor, VarDebriefAdviceOrderRec."Vendor No.");
          lvAdvOrderRec."Order Date" := TODAY;
        END;
        lvAdvOrderRec.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefAdviceOrderLineText@1100525007(DebriefAdviceOrderLineText@1100525000 : Record 11229870;Logbook@1100525005 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100525008 : Record 11229279;
      ServiceOrder@1100525007 : Record 11012823;
      Project@1100525006 : Record 11072003;
      AdviceOrderLine@1100525009 : Record 11012055;
      CommentLineJobText@1100525002 : Record 11020634;
      CommentLineJobText2@1100525003 : Record 11020634;
      RecRef@1100525004 : RecordRef;
    BEGIN
      IF NOT CheckWorkorder(Logbook, DebriefAdviceOrderLineText."Line No.", TRUE, WorkOrder, ServiceOrder, Project) THEN
        EXIT(FALSE);
      IF WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder THEN BEGIN
        ErrorRec.WriteError(
          STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
          WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
          Logbook, DebriefAdviceOrderLineText."Line No.");
        EXIT(FALSE);
      END;

      IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
        AdviceOrderLine.SETFILTER("Service Order No.", '%1', '');
        AdviceOrderLine.SETRANGE("Project No.", WorkOrder."Source No.");
      END ELSE BEGIN
        AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
        AdviceOrderLine.SETRANGE("Service Order No.", WorkOrder."Source No.");
        AdviceOrderLine.SETFILTER("Project No.", '%1', '');
      END;
      AdviceOrderLine.SETRANGE("Decentral Created Guid", DebriefAdviceOrderLineText."Decentral Created Guid");
      AdviceOrderLine.FINDFIRST;
      RecRef.GETTABLE(AdviceOrderLine);
      CommentLineJobText.INIT;
      CommentLineJobText."Table Name" := CommentLineJobText."Table Name"::"Advice Order";
      CommentLineJobText."Record ID" := RecRef.RECORDID;
      CommentLineJobText2.SETRANGE("Table Name", CommentLineJobText."Table Name");
      CommentLineJobText2.SETRANGE("Record ID", CommentLineJobText."Record ID");
      IF CommentLineJobText2.FINDLAST THEN
        CommentLineJobText."Line No." := CommentLineJobText2."Line No." + 10000
      ELSE
        CommentLineJobText."Line No." := 10000;
      CommentLineJobText.Comment := DebriefAdviceOrderLineText.Comment;
      CommentLineJobText.Date := TODAY;
      CommentLineJobText."Time Created" := TIME;
      CommentLineJobText."Line Break" := TRUE;
      CommentLineJobText.INSERT(TRUE);
    END;

    LOCAL PROCEDURE PostDebriefCreatePurchOrder@1100525003(VAR DebriefCreatePurchOrd@1100485007 : Record 11125648;ILogbookRec@1100485001 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100527000 : Record 11229279;
      ServOrder@1100527001 : Record 11012823;
      Project@1100527002 : Record 11072003;
      AdviceOrderLine@1100525000 : Record 11012055;
      AdviceOrderToPurchaseOrder@1100528000 : Codeunit 11229162;
    BEGIN
      WITH DebriefCreatePurchOrd DO BEGIN
        JobSetup.GET;
        //* Check
        IF NOT CheckWorkorder(ILogbookRec, "Line No.", TRUE, WorkOrder, ServOrder, Project) THEN
          EXIT(TRUE); //* Exit True. If WO not present/not ok then nothing to process (no advice lines of WO).
        IF WorkOrder."Source Type" <> WorkOrder."Source Type"::ServiceOrder THEN BEGIN  // (Temporary?) not supported for Project in Mobile(/NAV)
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, ILogbookRec.FIELDCAPTION("Debrief Type"), ILogbookRec."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"), ILogbookRec, "Line No.");
          EXIT(FALSE);
        END;

        //* Post
        IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN BEGIN
          AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
          AdviceOrderLine.SETRANGE("Project No.", WorkOrder."Source No.");
          AdviceOrderLine.SETFILTER("Service Order No.", '%1', '');
        END ELSE BEGIN
          AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
          AdviceOrderLine.SETFILTER("Project No.", '%1', '');
          AdviceOrderLine.SETRANGE("Service Order No.", WorkOrder."Source No.");
        END;
        //AdviceOrderLine.SETRANGE(Transaction, AdviceOrderLine.Transaction::Purchase);
        AdviceOrderLine.SETRANGE(Transaction, JobSetup."Default Advice Order Trans.");
        AdviceOrderLine.SETFILTER(Vendor, '<>%1', '');
        AdviceOrderLine.SETRANGE("Created by Work Order No.", "Work Order No.");
        AdviceOrderLine.SETRANGE("Decentral Created", TRUE);
        AdviceOrderLine.SETRANGE(Processed, FALSE);
        AdviceOrderLine.SETRANGE("Purchase by Field Service", TRUE);
        AdviceOrderLine.SETCURRENTKEY("Record Type");
        IF NOT AdviceOrderLine.FINDSET(FALSE, FALSE) THEN
          EXIT(TRUE);  // Nothing to process, so OK
        REPEAT
          AdviceOrderLine.MARK(TRUE);
        UNTIL AdviceOrderLine.NEXT = 0;
        //EXIT(CreatePurchOrderFromAdvOrder(AdviceOrderLine, DebriefCreatePurchOrd, ILogbookRec));
        AdviceOrderToPurchaseOrder.RUN(AdviceOrderLine);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefStatusFS@1100485002(VAR VarDebriefStatusFS@1100485006 : Record 11012683;Logbook@1100485007 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100527000 : Record 11229279;
      ServOrder@1100527001 : Record 11012823;
      Project@1100527002 : Record 11072003;
      Resource@1100527005 : Record 11229278;
      Empl@1100527004 : Record 5200;
      FieldServiceStatus@1100527003 : Record 11012274;
      RelatedWorkOrder@1100527006 : Record 11229279;
      WorkOrderReferencePoint@1100525000 : Record 11229282;
      lvError@1100485000 : Boolean;
    BEGIN
      gStatusFS_NewDocRefPoint := FALSE;
      WITH VarDebriefStatusFS DO BEGIN
        //* Check
        IF ("Field Service Status" = '') THEN
          EXIT(TRUE);  //* No action needed
        IF NOT CheckWorkorder(Logbook, "Line No.", TRUE, WorkOrder, ServOrder, Project) THEN
          EXIT(FALSE);
        IF NOT CheckResource(Logbook, "Line No.", FALSE, Resource, Empl) THEN
          lvError := TRUE;
        IF NOT FieldServiceStatus.GET(FieldServiceStatus.Type::Status, "Field Service Status") THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Field Service Status"),"Field Service Status"),Logbook,"Line No.");
        END;
        IF ("Date/Time" = 0DT) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION("Date/Time")),Logbook,"Line No.");
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        WorkOrder.GET("Work Order No.");
        WorkOrder.VALIDATE("Actual Field Service Status", "Field Service Status");
        WorkOrder.SetDateTimeRefPointRegistr("Date/Time");
        WorkOrder.SetUpdateRefPointFromMobile(Resource."Source No.");
        WorkOrder.MODIFY(TRUE);

      // DP00816.sn
        IF ("Fld Srv Status Reason Desc." <> '') THEN BEGIN
          WorkOrderReferencePoint.SETRANGE("Work Order No.", WorkOrder."No.");
          WorkOrderReferencePoint.SETRANGE("Field Service Status", WorkOrder."Actual Field Service Status");
          IF WorkOrderReferencePoint.FINDLAST THEN BEGIN
            WorkOrderReferencePoint."Fld Srv Status Reason Desc." := "Fld Srv Status Reason Desc.";
            WorkOrderReferencePoint.MODIFY(FALSE);
          END;
          //C030500.sc
          WorkOrder."Fld Srv Status Reason Desc." := "Fld Srv Status Reason Desc.";
          WorkOrder.MODIFY(FALSE);
          //C030500.ec
        END;
      // DP00816.en

        gStatusFS_NewDocRefPoint := WorkOrder.GetNewDocRefPoint(gStatusFS_DocRefPoint);

        IF WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder THEN BEGIN
          IF ("Field Service Status" = '20') OR ("Field Service Status" = '25') OR ("Field Service Status" = '500') THEN BEGIN
            IF ServOrder.GET(WorkOrder."Source No.") THEN BEGIN
              IF ServOrder."Export to FSA" THEN BEGIN
                RelatedWorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
                RelatedWorkOrder.SETRANGE("Source Company", WorkOrder."Source Company");
                RelatedWorkOrder.SETRANGE("Source Type", WorkOrder."Source Type");
                RelatedWorkOrder.SETRANGE("Source No.", WorkOrder."Source No.");
                RelatedWorkOrder.SETRANGE("Export to FSA", TRUE);
                IF RelatedWorkOrder.ISEMPTY THEN
                  ServOrder."Export to FSA" := FALSE;
              END;
              IF "Date/Time" > ServOrder."Date/Time Export to FSA" THEN
                ServOrder."Date/Time Export to FSA" := "Date/Time";
              ServOrder.MODIFY(FALSE);
            END;
          END;
          UpdateFLSStatus(ServOrder, VarDebriefStatusFS);
        END;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefTextLine@1100529006(VAR DebriefTextLine@1100485003 : Record 11012684;Logbook@1100485005 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefTextLine."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefTextLineSO(DebriefTextLine, Logbook, WorkOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefTextLine."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefTextLineSO@1100485003(VAR VarDebriefTextRec@1100485003 : Record 11012684;ILogbookRec@1100485005 : Record 11012677;WorkOrder@1100529001 : Record 11229279) : Boolean;
    VAR
      lvDebriefTextRec@1100485004 : Record 11012886;
      lvDebriefTextRec2@1100485001 : Record 11012886;
      lvError@1100485000 : Boolean;
      lvNextLineNo@1100485006 : Integer;
    BEGIN
      WITH VarDebriefTextRec DO BEGIN
        //* Check
        //* Accept unknown rubric (can be added later on) and employee (is only 'Modified by') here.

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvDebriefTextRec.RESET;
        lvDebriefTextRec.SETRANGE(Type, lvDebriefTextRec.Type::ServiceOrder);
        lvDebriefTextRec.SETRANGE("No.", WorkOrder."Source No.");
        IF lvDebriefTextRec.FINDLAST THEN
          lvNextLineNo := lvDebriefTextRec."Line No." + 10000
        ELSE
          lvNextLineNo := 10000;

        lvDebriefTextRec.RESET;
        lvDebriefTextRec.INIT;
        lvDebriefTextRec.Type := lvDebriefTextRec.Type::ServiceOrder;
        lvDebriefTextRec.VALIDATE("No.", WorkOrder."Source No.");
        lvDebriefTextRec2.SETRANGE(Type, lvDebriefTextRec.Type);
        lvDebriefTextRec2.SETRANGE("No.", lvDebriefTextRec."No.");
        IF lvDebriefTextRec2.FINDLAST THEN
          lvDebriefTextRec."Line No." := lvDebriefTextRec2."Line No." + 10000
        ELSE
          lvDebriefTextRec."Line No." := 10000;

        IF (Date <> 0D) THEN
          lvDebriefTextRec.Date := Date;
        IF ("Text Rubric" <> '') THEN
          lvDebriefTextRec.Rubric := "Text Rubric";
        lvDebriefTextRec.Comment := Comment;
        lvDebriefTextRec."Work Order No." := "Work Order No."; // dp00563.n

        lvDebriefTextRec.FillModifiedBy();
        IF ("Resource No. (Employee)" <> '') THEN
          lvDebriefTextRec."Modified by Resource" := "Resource No. (Employee)";  // Mod. by Empl is a Resource No.
        lvDebriefTextRec.INSERT(FALSE);  //* FALSE!

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefHourAccLine@1100485005(VAR VarDebriefHourAccRec@1100485016 : Record 11012685;ILogbookRec@1100485017 : Record 11012677) : Boolean;
    VAR
      lvHourAccRec@1100485012 : Record 11012038;
      lvHourAccLineRec@1100485004 : Record 11012039;
      lvHourAccLineRec2@1100485018 : Record 11012039;
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529002 : Record 11012823;
      Project@1100529003 : Record 11072003;
      Resource@1100529000 : Record 11229278;
      lvEmplRec@1100485001 : Record 5200;
      lvCostCodeRec@1100485005 : Record 11012083;
      lvDimValRec@1100485009 : Record 349;
      lvWageCompRec@1100485011 : Record 11012014;
      lvError@1100485000 : Boolean;
      lvYear@1100485003 : Integer;
      lvWeek@1100485008 : Integer;
      lvLineQuantity@1100485013 : Decimal;
    BEGIN
      WITH VarDebriefHourAccRec DO BEGIN
        MobileSetupRec.GET('');
        GLSetupRec.GET;

        //* Check
        IF NOT CheckResource(ILogbookRec, "Line No.", TRUE, Resource, lvEmplRec) THEN
          lvError := TRUE;
        IF (Date = 0D) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION(Date)),ILogbookRec,"Line No.");
        END;
        IF (Type = Type::Indirect) THEN BEGIN
          IF ("Cost Code" = '') OR (NOT lvCostCodeRec.GET("Cost Code")) THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Cost Code"),"Cost Code"),ILogbookRec,"Line No.");
          END;
        END;
        IF (Type = Type::Direct) THEN BEGIN
          //IF ("Work Order No." = '') AND ("Project No." = '') THEN BEGIN
          //    lvError := TRUE;
          //    ErrorRec.WriteError(STRSUBSTNO(Text003,FIELDCAPTION("Work Order No."), FIELDCAPTION("Project No.")),
          //                        ILogbookRec,"Line No.");
          //END ELSE BEGIN
          //  IF ("Work Order No." <> '') THEN BEGIN
              IF NOT CheckWorkorder(ILogbookRec, "Line No.", FALSE, WorkOrder, ServOrder, Project) THEN
                lvError := TRUE;
              IF WorkOrder."Source Company" <> COMPANYNAME THEN BEGIN
                IF NOT CheckMobSetupReasonReceivComp(MobileSetupRec, WorkOrder."Source Company", ILogbookRec, "Line No.") THEN
                  lvError := TRUE;
              END;
          //  END ELSE BEGIN
          //    IF ("Project No.") <> '' THEN BEGIN
          //      IF NOT Project.GET("Project No.") THEN BEGIN
          //        lvError := TRUE;
          //        ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Project No."),"Project No."),ILogbookRec,"Line No.");
          //      END;
          //    END;
          //  END;
          //END;
        END;
        IF ("Cost Object" <> '') THEN BEGIN
          IF NOT lvDimValRec.GET(GLSetupRec."Shortcut Dimension 2 Code","Cost Object") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Cost Object"),"Cost Object"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Wage Component" <> '') THEN BEGIN
          IF NOT lvWageCompRec.GET("Wage Component") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Wage Component"),"Wage Component"),ILogbookRec,"Line No.");
          END;
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        lvYear := DATE2DWY(Date, 3);
        lvWeek := DATE2DWY(Date, 2);
        IF NOT lvHourAccRec.GET(lvYear, lvWeek, Resource."Source No.") THEN BEGIN
          lvHourAccRec.INIT;
          lvHourAccRec.SetSuppressMessages(TRUE);
          lvHourAccRec.VALIDATE(Year, lvYear);
          lvHourAccRec.VALIDATE(Week, lvWeek);
          lvHourAccRec.VALIDATE("Employee No.", Resource."Source No.");
          lvHourAccRec.INSERT(TRUE);
        END;

        lvHourAccLineRec.INIT;
        lvHourAccLineRec.VALIDATE(Year, lvYear);
        lvHourAccLineRec.VALIDATE(Week, lvWeek);
        lvHourAccLineRec.VALIDATE("Employee No.", Resource."Source No.");
        lvHourAccLineRec2.SETRANGE(Year, lvHourAccLineRec.Year);
        lvHourAccLineRec2.SETRANGE(Week, lvHourAccLineRec.Week);
        lvHourAccLineRec2.SETRANGE("Employee No.", lvHourAccLineRec."Employee No.");
        IF lvHourAccLineRec2.FINDLAST THEN
          lvHourAccLineRec."Line No." := lvHourAccLineRec2."Line No." + 10000
        ELSE
          lvHourAccLineRec."Line No." := 10000;

        IF (Type = Type::Indirect) THEN BEGIN
          lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Indirect);
          lvHourAccLineRec.VALIDATE("Cost Code", "Cost Code");
        END;
        IF (Type = Type::Direct) THEN BEGIN
          //IF ("Work Order No." <> '') THEN BEGIN
            IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN
              lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Project)
            ELSE
              lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Service);
            IF WorkOrder."Source Company" <> COMPANYNAME THEN
              lvHourAccLineRec.VALIDATE("Receiving Company", WorkOrder."Source Company");
            IF WorkOrder."Source Type" = WorkOrder."Source Type"::Project THEN
              lvHourAccLineRec.VALIDATE("Project No.", WorkOrder."Source No.")
            ELSE BEGIN
              lvHourAccLineRec.VALIDATE("Service Order No.", WorkOrder."Source No."); //* Serv.location also filled here
              lvHourAccLineRec.VALIDATE("Additional Cost (Service)", "Additional Cost (Service)");
            END;
          //END ELSE BEGIN
          //  IF ("Project No." <> '') THEN BEGIN
          //    lvHourAccLineRec.VALIDATE(Type, lvHourAccLineRec.Type::Project);
          //    lvHourAccLineRec.VALIDATE("Project No.", "Project No.");
          //  END;
          //END;
        END;
        IF "Wage Component" <> '' THEN                                            //** 4PS01.n
          //in code above the wagecomponent of the costobject of the employee is set. Overrule it here because it may not
          //match the cost object below.
          lvHourAccLineRec."Wage Component" := "Wage Component";                  //** 4PS01.n
        IF ("Cost Object" <> '') THEN
          lvHourAccLineRec.VALIDATE("Cost Object", "Cost Object");
        IF ("Wage Component" <> '') THEN
          lvHourAccLineRec.VALIDATE("Wage Component", "Wage Component");
        lvHourAccLineRec.CALCFIELDS("Component Type");

        IF (Quantity = 0) AND (("Time From" <> 0T) OR ("Time Until" <> 0T)) THEN BEGIN
          //Hour Accounting on Time
          lvHourAccLineRec.Day := DATE2DWY(Date, 1);
          lvHourAccLineRec.VALIDATE("Time From", "Time From");
          lvHourAccLineRec.VALIDATE("Time Until", "Time Until");
        END ELSE BEGIN
          lvLineQuantity := ROUND(Quantity,0.001);
          IF (lvHourAccLineRec."Component Type" = lvHourAccLineRec."Component Type"::Expenses) THEN BEGIN
            IF Amount = 0 THEN BEGIN
              lvHourAccLineRec."Unit Cost (LCY)" := 0;     //* Enforce that rate of expenses is determined
              lvHourAccLineRec.CalcRateAndAmount();
              lvHourAccLineRec.VALIDATE(Quantity, lvLineQuantity);
            END ELSE BEGIN
              lvHourAccLineRec.VALIDATE(Quantity, lvLineQuantity);
              lvHourAccLineRec.VALIDATE("Amount (LCY)", Amount);
            END;
          END ELSE BEGIN
            CASE DATE2DWY(Date, 1) OF
              1: lvHourAccLineRec.VALIDATE(Monday, lvLineQuantity);
              2: lvHourAccLineRec.VALIDATE(Tuesday, lvLineQuantity);
              3: lvHourAccLineRec.VALIDATE(Wednesday, lvLineQuantity);
              4: lvHourAccLineRec.VALIDATE(Thursday, lvLineQuantity);
              5: lvHourAccLineRec.VALIDATE(Friday, lvLineQuantity);
              6: lvHourAccLineRec.VALIDATE(Saturday, lvLineQuantity);
              7: lvHourAccLineRec.VALIDATE(Sunday, lvLineQuantity);
            END;
          END;
        END;
        IF (Comment <> '') THEN
          lvHourAccLineRec.VALIDATE(Comment, COPYSTR(Comment,1,MAXSTRLEN(lvHourAccLineRec.Comment)));
        lvHourAccLineRec."Posting Date" := Date;
        lvHourAccLineRec.INSERT(TRUE);

        IF (MobileSetupRec."Reason Code Hours/Material" <> '') THEN BEGIN
          lvHourAccLineRec."Reason Code" := MobileSetupRec."Reason Code Hours/Material";
          lvHourAccLineRec.MODIFY(TRUE);
        END;

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefDecentralWorkOrder@1100485001(VAR VarDebriefDecentralWORec@1100485010 : Record 11012686;ILogbookRec@1100485003 : Record 11012677) : Boolean;
    VAR
      Resource@1100527001 : Record 11229278;
      ServOrderRec@1100529000 : Record 11012823;
      Employee@1100485001 : Record 5200;
      ServiceLocation@1100485004 : Record 11012801;
      Customer@1100525004 : Record 18;
      ServiceObject@1100525003 : Record 11071691;
      lvServPrioRec@1100485005 : Record 11012829;
      lvServCallRec@1100485006 : Record 11012822;
      lvMobileSetupRec@1100525001 : Record 11012676;
      MobileDecentralWorkOrder@1100525002 : Record 11125649;
      ServOrderExtension@1100527000 : Record 11071727;
      DimensionValue@1100525005 : Record 349;
      lvError@1100485000 : Boolean;
      lvNoSeriesMgt@1100525000 : Codeunit 396;
      UpdateContractNo@1100525006 : Boolean;
      lvUserID@1100285300 : Code[50];
      lvUserSetup@1100285301 : Record 91;
      lvGlobDim1Code@1100285302 : Code[20];
    BEGIN
      // Create work order and service order. So never WO and project!
      WITH VarDebriefDecentralWORec DO BEGIN
        //* Check
        IF NOT CheckResource(ILogbookRec, "Line No.", FALSE, Resource, Employee) THEN
          lvError := TRUE;
        IF ("Mobile Work Order No." = '') THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION("Mobile Work Order No.")),ILogbookRec,"Line No.");
        END ELSE BEGIN
          IF MobileDecentralWorkOrder.GET("Resource No. (Employee)", "Mobile Work Order No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text002,FIELDCAPTION("Mobile Work Order No."),
              STRSUBSTNO('%1 (%2)',"Mobile Work Order No.", MobileDecentralWorkOrder."Work Order No.")),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Service Location No." <> '') THEN BEGIN
          IF NOT ServiceLocation.GET("Service Location No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text000,FIELDCAPTION("Service Location No."),"Service Location No."),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Customer No." <> '') THEN BEGIN
          IF NOT Customer.GET("Customer No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text000,FIELDCAPTION("Customer No."), "Customer No."), ILogbookRec, "Line No.");
          END;
        END;
        IF ("Global Dimension 1 Code" <> '') THEN BEGIN
          DimensionValue.SETRANGE(Code, "Global Dimension 1 Code");
          DimensionValue.SETRANGE("Global Dimension No.", 1);
          IF NOT DimensionValue.FINDFIRST THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text000, FIELDCAPTION("Global Dimension 1 Code"), "Global Dimension 1 Code"), ILogbookRec, "Line No.");
          END;
        END;
        IF (Priority <> '') THEN BEGIN
          IF NOT lvServPrioRec.GET(Priority) THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION(Priority),Priority),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Date/Time" = 0DT) THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text001,FIELDCAPTION("Date/Time")),ILogbookRec,"Line No.");
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        ServOrderRec.INIT;
        lvMobileSetupRec.GET;
        lvMobileSetupRec.TESTFIELD("Service Order Nos. (Decentral)");
      //>>151104
        IF (Resource.Type = Resource.Type::Employee) AND (Employee."No."<>'') THEN BEGIN
        //find usersetup from employee
          IF Resource.Company <> COMPANYNAME THEN
            lvUserSetup.CHANGECOMPANY(Resource.Company);
          lvUserSetup.SETRANGE("Employee No.",Employee."No.");
          IF lvUserSetup.FINDFIRST THEN
            lvUserID := lvUserSetup."User ID";
          lvNoSeriesMgt.InitSeriesAltUser(lvMobileSetupRec."Service Order Nos. (Decentral)",'',0D,ServOrderRec."No.",ServOrderRec."No. Series",lvUserID);
      //>>151229
          IF DPA_OnInsertAltUserID(ServOrderRec."No. Series",lvUserID,lvGlobDim1Code) THEN
            ServOrderRec.VALIDATE("Global Dimension 1 Code",lvGlobDim1Code);
      //<<151229
        END
        ELSE
      //<<151104
          lvNoSeriesMgt.InitSeries(lvMobileSetupRec."Service Order Nos. (Decentral)",'',0D,ServOrderRec."No.",ServOrderRec."No. Series");
        ServOrderRec."Source Type" := ServOrderRec."Source Type"::Call;
        ServOrderRec.SetUseFilledOrderDateTime(TRUE);
        ServOrderRec."Order Date" := DT2DATE("Date/Time");
        ServOrderRec."Order Time" := DT2TIME("Date/Time");
        ServOrderRec."Starting Date" := ServOrderRec."Order Date";
        ServOrderRec."Starting Time" := ServOrderRec."Order Time";
        ServOrderRec.VALIDATE("Contact Name", "Contact Name");
        ServOrderRec.Origin := ServOrderRec.Origin::Mobile;
        ServOrderRec.INSERT(TRUE);
        ServOrderRec.TESTFIELD("No.");

        ServOrderRec.SetUseFilledOrderDateTime(FALSE);
        ServOrderRec."Date/Time Export to FSA" := CURRENTDATETIME;  //* This is also a indicator that it is a FSA serviceorder.
        ServOrderRec."Decentral Created" := TRUE;
        //ServOrderRec."Plan during Clock Time" := TRUE;
        ServOrderRec.VALIDATE("Employee No.", "Resource No. (Employee)"); // C019480.n
        IF "Service Location No." <> '' THEN BEGIN
          ServOrderRec.VALIDATE("Service Location No.", "Service Location No.");
          ServOrderRec.DetermineContractNo;
        END;
        IF "Customer No." <> '' THEN BEGIN
          ServOrderRec.VALIDATE("Customer No.", "Customer No.");
          IF "Global Dimension 1 Code" <> '' THEN
            ServOrderRec.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
        END;
        IF (Name <> '') THEN
          ServOrderRec.Name := Name;
        IF (Address <> '') THEN
          ServOrderRec.Address := Address;
        IF ("Post Code" <> '') THEN
          ServOrderRec."Post Code" := "Post Code";
        IF (City <> '') THEN
          ServOrderRec.City := City;
        IF ("Phone No." <> '') THEN
          ServOrderRec."Phone No." := "Phone No.";
        IF ("Contact Name" <> '') THEN
          ServOrderRec."Contact Name" := "Contact Name";
        IF (Description <> '') THEN
          ServOrderRec.VALIDATE(Description, Description);
        IF (Priority <> '') THEN
          ServOrderRec.VALIDATE(Priority, Priority);
      //  ServOrderRec.VALIDATE("Employee No.", "Resource No. (Employee)"); // C019480.o
        IF ("Order No. Customer" <> '') THEN
          ServOrderRec."Order No. Customer" := "Order No. Customer";
        IF ("Call No." <> '') THEN BEGIN
          IF lvServCallRec.GET("Call No.") THEN BEGIN
            ServOrderRec."Call No." := "Call No.";
            lvServCallRec."Next Step" := lvServCallRec."Next Step"::ServiceOrder;  //call 18915.sn
            IF (lvServCallRec."Service Order No." <> '') THEN BEGIN                                   //DP00132.sn
              ServOrderRec.VALIDATE("Previous Service Order No.", lvServCallRec."Service Order No.");
              ServOrderRec.VALIDATE("Base Service Order", FALSE);
            END ELSE BEGIN
              ServOrderRec.VALIDATE("Base Service Order", TRUE);                                      //DP00132.en

              lvServCallRec."Service Order No." := ServOrderRec."No.";
            END;
            lvServCallRec.Status := lvServCallRec.Status::"In Process";
            lvServCallRec.MODIFY;                                    //call 18915.en
          END;
        END ELSE BEGIN
          CreateDecentralServCall(ServOrderRec, ServOrderExtension, VarDebriefDecentralWORec);
        END;
        ServOrderRec.MODIFY(TRUE);
        CreateDecentralWorkOrder(VarDebriefDecentralWORec, ServOrderRec."No.");  // First the SO must be created, then WO

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateDecentralWorkOrder@1100527002(DebriefDecentralWO@1100527000 : Record 11012686;ServiceOrderNo@1100527001 : Code[20]);
    VAR
      Workorder@1100527003 : Record 11229279;
      MobileDecentralWorkOrder@1100527002 : Record 11125649;
    BEGIN
      Workorder.INIT;
      Workorder."No." := '';
      Workorder.VALIDATE("Source Company", COMPANYNAME);
      Workorder.VALIDATE("Source Type", Workorder."Source Type"::ServiceOrder);
      Workorder.VALIDATE("Source No.", ServiceOrderNo);
      Workorder.SetDateTimeRefPointRegistr(DebriefDecentralWO."Date/Time"); //mg, 24-02-2015: T005700
      Workorder.INSERT(TRUE);
      Workorder.TESTFIELD("No.");

      Workorder.VALIDATE("Resource Type", Workorder."Resource Type"::Employee);
      Workorder.VALIDATE("Resource No.", DebriefDecentralWO."Resource No. (Employee)");
      IF DebriefDecentralWO.Description <> '' THEN
        Workorder.VALIDATE(Description, DebriefDecentralWO.Description);
      Workorder."Plan during Clock Time" := TRUE;
      Workorder."Date/Time Export to FSA" := CURRENTDATETIME;  //* This is also a indicator that it is a FSA serviceorder.
      Workorder.MODIFY(TRUE);

      MobileDecentralWorkOrder.INIT;
      MobileDecentralWorkOrder."Resource No. (Employee)" := Workorder."Resource No.";
      MobileDecentralWorkOrder."Mobile Work Order No." := DebriefDecentralWO."Mobile Work Order No.";
      MobileDecentralWorkOrder."Work Order No." := Workorder."No.";
      MobileDecentralWorkOrder.INSERT;
    END;

    LOCAL PROCEDURE CreateDecentralServCall@1100528103(VAR ServiceOrder@1100528100 : Record 11012823;ServiceOrderExtension@1100528102 : Record 11071727;VarDebriefDecentralSORec@1100528106 : Record 11012686);
    VAR
      ServiceCall@1100528101 : Record 11012822;
      ServiceObject@1100525000 : Record 11071691;
      MobileSetup@1100525001 : Record 11012676;
    BEGIN
      ServiceCall.INIT;
      ServiceCall."No." := '';
      ServiceCall.Origin := ServiceCall.Origin::Mobile;
      ServiceCall.INSERT(TRUE);
      ServiceCall.VALIDATE("Expected Date", ServiceOrder."Starting Date");
      ServiceCall.VALIDATE("Expected Time", ServiceOrder."Starting Time");
      ServiceCall.VALIDATE("Contact Name", ServiceOrder."Contact Name");
      ServiceCall.VALIDATE("Decentral Created", TRUE);
      ServiceCall.VALIDATE("Plan during Clock Time", TRUE);
      ServiceCall.VALIDATE("Service Location No.", ServiceOrder."Service Location No.");
      ServiceCall.VALIDATE(Name, ServiceOrder.Name);
      ServiceCall.Address := ServiceOrder.Address;
      ServiceCall.City := ServiceOrder.City;
      ServiceCall."Post Code" := ServiceOrder."Post Code";
      ServiceCall.VALIDATE(Description, ServiceOrder.Description);
      ServiceCall.VALIDATE(Priority, ServiceOrder.Priority);
      ServiceCall.VALIDATE("Employee No.", ServiceOrder."Employee No.");
      ServiceCall.VALIDATE("Order No. Customer", ServiceOrder."Order No. Customer");
      IF VarDebriefDecentralSORec."Object No." <> '' THEN
        IF ServiceObject.GET(VarDebriefDecentralSORec."Object No.") THEN
          IF NOT ServiceObject.Blocked THEN
            ServiceCall.VALIDATE("Object No.", VarDebriefDecentralSORec."Object No.");
      ServiceCall.VALIDATE("Calling Contact", VarDebriefDecentralSORec."Calling Contact");
      ServiceCall.VALIDATE("Calling Phone No.", VarDebriefDecentralSORec."Calling Phone No.");

      ServiceCall."Next Step" := ServiceCall."Next Step"::ServiceOrder;
      ServiceCall.Status := ServiceCall.Status::"In Process";
      ServiceCall."Service Order No." := ServiceOrder."No.";
      // DP01061.sn
      MobileSetup.GET;
      IF MobileSetup."Use Vessel Functionality" THEN
        ServiceCall.VALIDATE("Vessel Service Call", TRUE);
      // DP01061.en
      ServiceCall.MODIFY(TRUE);

      ServiceOrder."Call No." := ServiceCall."No.";
    END;

    LOCAL PROCEDURE PostDebriefInspectionLine@1100529008(VAR DebriefInspection@1100485010 : Record 11020447;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529002 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529001 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefInspection."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefInspectionLineSO(DebriefInspection, Logbook, WorkOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefInspection."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefInspectionLineSO@1100528100(VAR VarDebriefInspectionRec@1100485010 : Record 11020447;ILogbookRec@1100485003 : Record 11012677;WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      ServiceOrderInspectionLine@1100485002 : Record 11071753;
      lvError@1100485000 : Boolean;
    BEGIN
      WITH VarDebriefInspectionRec DO BEGIN
        //* Check
        IF NOT VarDebriefInspectionRec."Is Added By User" THEN BEGIN // DP00626.n
          IF NOT ServiceOrderInspectionLine.GET(
            WorkOrder."Source No.","Service Object No.","Maintenance Scheme Code","Inspection Line No.")
          THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,ServiceOrderInspectionLine.TABLECAPTION,
                WorkOrder."Source No."+'-'+"Service Object No."+'-'+"Maintenance Scheme Code"+'-'+FORMAT("Inspection Line No."))
                ,ILogbookRec,"Line No.");
          END;
      // DP00626.sn
        END ELSE BEGIN
          ServiceOrderInspectionLine.SETRANGE("Service Order No.", WorkOrder."Source No.");
          ServiceOrderInspectionLine.SETRANGE("Service Object No.", "Service Object No.");
          ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", '');
          ServiceOrderInspectionLine.SETRANGE("Inspection Type", ServiceOrderInspectionLine."Inspection Type"::"Service Order Object");
          ServiceOrderInspectionLine.SETRANGE(Type, Type);
          ServiceOrderInspectionLine.SETRANGE("Inspection Code", "Inspection Code");
          ServiceOrderInspectionLine.SETRANGE("Inspection Group Code", "Inspection Group Code");
          IF NOT ServiceOrderInspectionLine.FINDSET THEN BEGIN
            ServiceOrderInspectionLine.RESET;
            ServiceOrderInspectionLine.INIT;
            ServiceOrderInspectionLine."Service Order No." := WorkOrder."Source No.";
            ServiceOrderInspectionLine."Service Object No." := "Service Object No.";
            ServiceOrderInspectionLine."Maintenance Scheme Code" := '';
            ServiceOrderInspectionLine."Line No." := ServiceOrderInspectionLine.GetLastLineNo + 10000;
            ServiceOrderInspectionLine."Inspection Type" := ServiceOrderInspectionLine."Inspection Type"::"Service Order Object";
            ServiceOrderInspectionLine.Type := Type;
            ServiceOrderInspectionLine."Inspection Code" := "Inspection Code";
            ServiceOrderInspectionLine.Description := Description;
            ServiceOrderInspectionLine."Field Type" := "Field Type";
            ServiceOrderInspectionLine."Unit Of Measure" := "Unit Of Measure";
            ServiceOrderInspectionLine."Inspection Group Code" := "Inspection Group Code";
            ServiceOrderInspectionLine.Mandatory := Mandatory;
            ServiceOrderInspectionLine.INSERT;
          END;
        END;
      // DP00626.en

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        CASE ServiceOrderInspectionLine."Field Type" OF
            ServiceOrderInspectionLine."Field Type"::Date:
              BEGIN
                IF DateValue = 0D THEN
                  ServiceOrderInspectionLine.VALIDATE(Value, '')
                ELSE
                  ServiceOrderInspectionLine.VALIDATE(Value, FORMAT(DateValue));
              END;
            ServiceOrderInspectionLine."Field Type"::Value:
              BEGIN
                IF "NumberValue Is Empty" THEN
                  ServiceOrderInspectionLine.VALIDATE(Value, '')
                ELSE
                  ServiceOrderInspectionLine.VALIDATE(Value, FORMAT(NumberValue));
              END;
            ServiceOrderInspectionLine."Field Type"::Text:
              BEGIN
                ServiceOrderInspectionLine.VALIDATE(Value, TextValue);
              END;
            ServiceOrderInspectionLine."Field Type"::Option,
            ServiceOrderInspectionLine."Field Type"::"Yes/No":
              BEGIN
                ServiceOrderInspectionLine.VALIDATE(Value,ServiceOrderInspectionLine.GetOptionDescriptionFromCode(OptionValue));
              END;
        END;

        ServiceOrderInspectionLine.VALIDATE(Comment, Comment);
        ServiceOrderInspectionLine.MODIFY;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefObjectSpecLine@1100529014(VAR DebriefObjectSpec@1100485010 : Record 11020448;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefObjectSpec."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefObjectSpecLineSO(DebriefObjectSpec, Logbook, WorkOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefObjectSpec."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefObjectSpecLineSO@1210190000(VAR VarDebriefObjSpecRec@1100485010 : Record 11020448;ILogbookRec@1100485003 : Record 11012677;WorkOrder@1100529000 : Record 11229279) : Boolean;
    VAR
      ServiceOrderObjSpecLine@1100485002 : Record 11071782;
      lvError@1100485000 : Boolean;
    BEGIN
      WITH VarDebriefObjSpecRec DO BEGIN
        //* Check
        //* Fill "Object Line No." with 0, because no exchange of Plant Stocktaking Lines with MOB.
        IF NOT ServiceOrderObjSpecLine.GET(WorkOrder."Source No.","Service Object No.",
          "Specification Type",Code, 0, "Specification Line No.")
        THEN BEGIN
          lvError := TRUE;
          ErrorRec.WriteError(STRSUBSTNO(Text000,ServiceOrderObjSpecLine.TABLECAPTION,
              WorkOrder."Source No."+'-'+"Service Object No."+'-'+FORMAT("Specification Type")+
              '-'+Code+'-'+FORMAT("Specification Line No."))
              ,ILogbookRec,"Line No.");
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        CASE ServiceOrderObjSpecLine."Field Type" OF
            ServiceOrderObjSpecLine."Field Type"::Date:
              BEGIN
                IF DateValue = 0D THEN
                  ServiceOrderObjSpecLine.VALIDATE("New Value", '')
                ELSE
                  ServiceOrderObjSpecLine.VALIDATE("New Value", FORMAT(DateValue));
              END;
            ServiceOrderObjSpecLine."Field Type"::Value:
              BEGIN
                IF "NumberValue Is Empty" THEN
                  ServiceOrderObjSpecLine.VALIDATE("New Value", '')
                ELSE
                  ServiceOrderObjSpecLine.VALIDATE("New Value", FORMAT(NumberValue));
              END;
            ServiceOrderObjSpecLine."Field Type"::Text:
              BEGIN
                ServiceOrderObjSpecLine.VALIDATE("New Value", TextValue);
              END;
            ServiceOrderObjSpecLine."Field Type"::Option:
              BEGIN
                ServiceOrderObjSpecLine.VALIDATE("New Value",
                  ServiceOrderObjSpecLine.GetOptionDescriptionFromCode(OptionValue));
              END;
        END;
        ServiceOrderObjSpecLine.Status := ServiceOrderObjSpecLine.Status::Received;
        ServiceOrderObjSpecLine.MODIFY;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefWorkOrderText@1100529018(VAR DebriefWorkOrderText@1100485010 : Record 11020449;Logbook@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100529001 : Record 11229279;
      ServOrder@1100529000 : Record 11012823;
      Project@1100529002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(Logbook, DebriefWorkOrderText."Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefWorkOrderTextSO(DebriefWorkOrderText, Logbook, WorkOrder, ServOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefWorkOrderText."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefWorkOrderTextSO@1210190001(VAR VarDebriefRec@1100485010 : Record 11020449;ILogbookRec@1100485003 : Record 11012677;WorkOrder@1100529000 : Record 11229279;ServOrder@1100529001 : Record 11012823) : Boolean;
    VAR
      Resource@1100525000 : Record 11229278;
      Employee@1100525001 : Record 5200;
      lvError@1100485000 : Boolean;
    BEGIN
      WITH VarDebriefRec DO BEGIN
        //* Check
        IF NOT CheckResource(ILogbookRec, "Line No.", FALSE, Resource, Employee) THEN
          lvError := TRUE;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        CreateServiceText(VarDebriefRec, "First Line", FALSE, WorkOrder, '', Resource);
        IF "Add Text To Call" THEN
          CreateServiceText(VarDebriefRec, FALSE, TRUE, WorkOrder, ServOrder."Call No.", Resource);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceText@1100528104(VarDebriefRec@1100528100 : Record 11020449;DeleteExistingLines@1100528101 : Boolean;AddToCall@1100528102 : Boolean;WorkOrder@1100529000 : Record 11229279;ServCallNo@1100529001 : Code[20];Resource@1100525000 : Record 11229278);
    VAR
      ServiceText@1100528105 : Record 11012882;
      ServiceText2@1100528104 : Record 11012882;
      TableFieldNo@1100528106 : Integer;
    BEGIN
      WITH  VarDebriefRec DO BEGIN
        IF AddToCall THEN BEGIN
          ServiceText2.SETRANGE("Table Name", ServiceText."Table Name"::"Service Call");
          ServiceText2.SETRANGE("No.", ServCallNo);
          ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
          ServiceText."No." := ServCallNo;
          TableFieldNo := GetCallFieldNo("Table Field");
          IF TableFieldNo = 0 THEN EXIT;
        END ELSE BEGIN
          ServiceText2.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
          ServiceText2.SETRANGE("No.", WorkOrder."Source No.");
          ServiceText."Table Name" := ServiceText."Table Name"::"Service Order";
          ServiceText."No." := WorkOrder."Source No.";
          TableFieldNo := "Table Field";
          ServiceText2.SETRANGE("Table Field", TableFieldNo);
        END;

        IF ServiceText2.FINDLAST THEN
          ServiceText."Line No." := ServiceText2."Line No." + 10000
        ELSE
          ServiceText."Line No." := 10000;
        ServiceText."Table Field" := TableFieldNo;
        ServiceText.Comment := Comment;
        ServiceText.Date := TODAY;
        ServiceText."Time Created" := TIME;
        ServiceText."Line Break" := "Line Break";
        ServiceText.INSERT(TRUE);

        ServiceText."Created by Employee No." := Resource."Source No.";
        IF Resource.Company <> COMPANYNAME THEN
          ServiceText."Created by Employee Company" := Resource.Company;
        ServiceText.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetCallFieldNo@1100528105(ServiceOrderFieldNo@1100528100 : Integer) : Integer;
    BEGIN
      CASE ServiceOrderFieldNo OF
        90: EXIT(60);    //Problem text
        91: EXIT(70);    //Internal text
        92: EXIT(0);     //Solution text
        94: EXIT(0);     //Cause text
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE PostDebriefRestockItem@1100528101(VAR VarDebriefRestockItemRec@1100485001 : Record 11125645;ILogbookRec@1100485003 : Record 11012677) : Boolean;
    VAR
      Resource@1100529000 : Record 11229278;
      Empl@1100529001 : Record 5200;
      lvItemRec@1100409007 : Record 27;
      lvUnitRec@1100409006 : Record 204;
      lvLocation@1100409005 : Record 14;
      lvItemJnlLineRec@1100409004 : Record 83;
      lvItemJnlLineRec2@1100409003 : Record 83;
      lvError@1100409001 : Boolean;
    BEGIN
      WITH VarDebriefRestockItemRec DO BEGIN
        MobileSetupRec.GET('');

        //* Check
        // No Workorder for this debrief type, Work Order No is always empty here.
        IF NOT CheckResource(ILogbookRec, "Line No.", TRUE, Resource, Empl) THEN
          lvError := TRUE;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT lvItemRec.GET("Item No.") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Item No."),"Item No."),ILogbookRec,"Line No.");
          END;
        END;
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT lvUnitRec.GET("Unit of Measure") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("Unit of Measure"),"Unit of Measure"),ILogbookRec,"Line No.");
          END;
        END;
        IF ("New Location Code" <> '') THEN BEGIN
          IF NOT lvLocation.GET("New Location Code") THEN BEGIN
            lvError := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000,FIELDCAPTION("New Location Code"),"New Location Code"),ILogbookRec,"Line No.");
          END;
          //C019313.sn
          IF (lvLocation."Restock Item Journal Template" <> '') AND (lvLocation."Restock Item Journal Batch" <> '') THEN BEGIN
            MobileSetupRec."Restock Item Journal Template" := lvLocation."Restock Item Journal Template";
            MobileSetupRec."Restock Item Journal Batch" := lvLocation."Restock Item Journal Batch";
          END;
          //C019313.en
        END;

        IF lvError THEN
          EXIT(FALSE);

        //* Post
        MobileSetupRec.TESTFIELD("Restock Item Journal Template");
        MobileSetupRec.TESTFIELD("Restock Item Journal Batch");
        lvItemJnlLineRec.INIT;
        lvItemJnlLineRec.VALIDATE("Journal Template Name", MobileSetupRec."Restock Item Journal Template");
        lvItemJnlLineRec.VALIDATE("Journal Batch Name", MobileSetupRec."Restock Item Journal Batch");
        lvItemJnlLineRec2.SETRANGE("Journal Template Name", lvItemJnlLineRec."Journal Template Name");
        lvItemJnlLineRec2.SETRANGE("Journal Batch Name", lvItemJnlLineRec."Journal Batch Name");
        IF lvItemJnlLineRec2.FINDLAST THEN
          lvItemJnlLineRec."Line No." := lvItemJnlLineRec2."Line No." + 10000
        ELSE BEGIN
          lvItemJnlLineRec."Line No." := 10000;
          lvItemJnlLineRec2."Entry Type" := lvItemJnlLineRec."Entry Type"::Transfer;
        END;
        lvItemJnlLineRec.SetUpNewLine(lvItemJnlLineRec2);
        lvItemJnlLineRec.INSERT(TRUE);
        lvItemJnlLineRec.VALIDATE("Posting Date", TODAY);
        IF ("Item No." <> '') THEN
          lvItemJnlLineRec.VALIDATE("Item No.", "Item No.");
        IF ("New Location Code" <> '') THEN
          lvItemJnlLineRec.VALIDATE("New Location Code", "New Location Code");
        IF ("Item No." <> '') AND ("Unit of Measure" <> '') THEN
          lvItemJnlLineRec.VALIDATE("Unit of Measure Code", "Unit of Measure");
        IF (Quantity <> 0) THEN
          lvItemJnlLineRec.VALIDATE(Quantity, ROUND(Quantity,0.00001));
        IF (Description <> '') THEN
          lvItemJnlLineRec.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          lvItemJnlLineRec.VALIDATE("Description 2", "Description 2");  //db, 25-02-13: C005716
        lvItemJnlLineRec."Comments for Logistics" := COPYSTR(STRSUBSTNO('%1 %2',Resource."Source No.",Resource.Name), 1, MAXSTRLEN(lvItemJnlLineRec."Comments for Logistics"));
        lvItemJnlLineRec.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefRestockItemPurchase@1100525005(VAR DebriefRestockItem@1100525001 : Record 11125645;DebriefLogbook@1100525000 : Record 11012677) : Boolean;
    VAR
      MobileSetup@1100525002 : Record 11012676;
      Resource@1100525006 : Record 11229278;
      Employee@1100525005 : Record 5200;
      Item@1100525007 : Record 27;
      ETIMVendor@1100525011 : Record 11012304;
      TradeItem@1100525010 : Record 11012317;
      UnitofMeasure@1100525009 : Record 204;
      Location@1100525008 : Record 14;
      RequisitionLine@1100525003 : Record 246;
      RequisitionLine2@1100525012 : Record 246;
      Error@1100525004 : Boolean;
    BEGIN
      // C024394
      WITH DebriefRestockItem DO BEGIN
        //* Check
        // No Workorder for this debrief type, Work Order No is always empty here.
        IF NOT CheckResource(DebriefLogbook, "Line No.", TRUE, Resource, Employee) THEN
          Error := TRUE;
        IF ("Item No." <> '') THEN BEGIN
          IF NOT Item.GET("Item No.") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Item No."), "Item No."), DebriefLogbook, "Line No.");
          END;
        END;
        IF ("Vendor (Trade Item)" <> '') THEN BEGIN
          IF NOT ETIMVendor.GET("Vendor (Trade Item)") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Vendor (Trade Item)"), "Vendor (Trade Item)"), DebriefLogbook, "Line No.");
          END;
        END;
        IF ("Trade Item" <> '') THEN BEGIN
          IF NOT TradeItem.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Trade Item"), STRSUBSTNO('%1; %2',"Vendor (Trade Item)", "Trade Item")), DebriefLogbook, "Line No.");
          END;
        END;
        IF ("Item No." = '') AND ("Trade Item" = '') THEN
          ErrorRec.WriteError(STRSUBSTNO(Text001, STRSUBSTNO('%1/%2', FIELDCAPTION("Item No."), FIELDCAPTION("Trade Item"))), DebriefLogbook, "Line No.");
        IF ("Unit of Measure" <> '') THEN BEGIN
          IF NOT UnitofMeasure.GET("Unit of Measure") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("Unit of Measure"), "Unit of Measure"), DebriefLogbook, "Line No.");
          END;
        END;
        IF ("New Location Code" <> '') THEN BEGIN
          IF NOT Location.GET("New Location Code") THEN BEGIN
            Error := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, FIELDCAPTION("New Location Code"), "New Location Code"), DebriefLogbook, "Line No.");
          END;
        END ELSE
          ErrorRec.WriteError(STRSUBSTNO(Text001, FIELDCAPTION("New Location Code")), DebriefLogbook, "Line No.");

        IF Error THEN
          EXIT(FALSE);

        MobileSetup.GET;
        MobileSetup.TESTFIELD("Restock Purch Journal Template");
        MobileSetup.TESTFIELD("Restock Purch Journal Batch");

        RequisitionLine.INIT;
        RequisitionLine.VALIDATE("Worksheet Template Name", MobileSetup."Restock Purch Journal Template");
        RequisitionLine.VALIDATE("Journal Batch Name", MobileSetup."Restock Purch Journal Batch");
        RequisitionLine2 := RequisitionLine;
        RequisitionLine2.SETRANGE("Worksheet Template Name", RequisitionLine2."Worksheet Template Name");
        RequisitionLine2.SETRANGE("Journal Batch Name", RequisitionLine2."Journal Batch Name");
        IF RequisitionLine2.FINDLAST THEN
          RequisitionLine."Line No." := RequisitionLine2."Line No." + 10000
        ELSE
          RequisitionLine."Line No." := 10000;
        RequisitionLine."Order Date" := WORKDATE;
        RequisitionLine.INSERT(TRUE);
        RequisitionLine.VALIDATE(Type, RequisitionLine.Type::Item);
        IF ("Item No." <> '') THEN
          RequisitionLine.VALIDATE("No.", "Item No.");
        IF ("Vendor (Trade Item)" <> '') AND ("Trade Item" <> '') THEN BEGIN
          RequisitionLine.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
          RequisitionLine.VALIDATE("Trade Item", "Trade Item");
        END;
        IF (Description <> '') THEN
          RequisitionLine.VALIDATE(Description, Description);
        IF ("Description 2" <> '') THEN
          RequisitionLine.VALIDATE("Description 2", "Description 2");
        IF ("Unit of Measure" <> '') THEN
          RequisitionLine.VALIDATE("Unit of Measure Code", "Unit of Measure");
        IF (Quantity <> 0) THEN
          RequisitionLine.VALIDATE(Quantity, ROUND(Quantity, 0.00001));
        RequisitionLine.VALIDATE(Deliver, RequisitionLine.Deliver::Location);
        RequisitionLine.VALIDATE("Ship To Location", "New Location Code");
        RequisitionLine."Decentral Created Guid" := "Decentral Created Guid";
        RequisitionLine.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefCreateRestockPurchOrder@1100525008(VAR DebriefCreateRestockPO@1100525000 : Record 11229869;DebriefILogbook@1100525001 : Record 11012677) : Boolean;
    VAR
      RequisitionLine@1100525002 : Record 246;
      ReqWkshMakeOrder@1100525003 : Codeunit 333;
    BEGIN
      // C024394
      WITH DebriefCreateRestockPO DO BEGIN
        RequisitionLine.SETRANGE("Decentral Created Guid", "Decentral Created Guid");
        IF NOT RequisitionLine.FINDSET THEN
          EXIT(TRUE);
        ReqWkshMakeOrder.SetMethod(0); // Collect by Vendor
        ReqWkshMakeOrder.CarryOutBatchAction(RequisitionLine);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDebriefPlanning@1100409000(VAR VarDebriefPlanning@1100485001 : Record 11125646;ILogbookRec@1100485003 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100527003 : Record 11229279;
      ServOrder@1100527002 : Record 11012823;
      Project@1100527001 : Record 11072003;
      lvError@1100485000 : Boolean;
      lvExist@1100409000 : Boolean;
      DocumentReferencePoint@1100409001 : Record 11020296;
      StartDateTime@1100527000 : DateTime;
    BEGIN
      WITH VarDebriefPlanning DO BEGIN
        IF NOT CheckWorkorder(ILogbookRec, "Line No.", TRUE, WorkOrder, ServOrder, Project) THEN BEGIN
          lvError := TRUE;
          EXIT(FALSE); //* When order not present, no further testing
        END;

        IF lvError THEN
          EXIT(FALSE);

        StartDateTime := CREATEDATETIME("Starting Date", "Starting Time");
        IF StartDateTime <> WorkOrder."Starting Date/Time" THEN BEGIN
          WorkOrder."Ending Date/Time" := 0DT;

          WorkOrder.VALIDATE("Starting Date/Time", StartDateTime);
          WorkOrder.MODIFY(TRUE);
        END;

        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckPermissionRefPoint@1100485010();
    BEGIN
      //db, 03-09-07
      //* Empty function that checks permission of user to write log moment (table 11020296).
      //* For Mobile, just like FSA.
    END;

    PROCEDURE CheckMobSetupReasonReceivComp@1100527001(MobileSetup@1100527000 : Record 11012676;ReceivingCompany@1100527001 : Text[30];Logbook@1100527004 : Record 11012677;LineNo@1100527005 : Integer) : Boolean;
    VAR
      MobileSetup2@1100527002 : Record 11012676;
      MaxLen@1100527006 : Integer;
      ErrorText@1100527003 : Text[500];
    BEGIN
      IF (ReceivingCompany <> '') AND (ReceivingCompany <> COMPANYNAME) THEN BEGIN
        MobileSetup2.CHANGECOMPANY(ReceivingCompany);
        IF NOT MobileSetup2.GET THEN
          MobileSetup2.INIT;
        IF MobileSetup."Reason Code Hours/Material" <> MobileSetup2."Reason Code Hours/Material" THEN BEGIN
          ErrorText := STRSUBSTNO(Text006,
            MobileSetup.TABLECAPTION, MobileSetup.FIELDCAPTION("Reason Code Hours/Material"), ReceivingCompany,
            MobileSetup2."Reason Code Hours/Material", MobileSetup."Reason Code Hours/Material");
          MaxLen := MAXSTRLEN(ErrorRec."Error Message");
          ErrorRec.WriteError(COPYSTR(ErrorText, 1, MaxLen), Logbook, LineNo);
          IF STRLEN(ErrorText) > MaxLen THEN
            ErrorRec.WriteError(COPYSTR(ErrorText, MaxLen+1, MaxLen), Logbook, LineNo);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckWorkorder@1100529000(Logbook@1100529000 : Record 11012677;LineNo@1100529001 : Integer;InCurrCompany@1100529005 : Boolean;VAR WorkOrder@1100529002 : Record 11229279;VAR ServOrder@1100529003 : Record 11012823;VAR Project@1100529004 : Record 11072003) : Boolean;
    VAR
      Errors@1100529006 : Boolean;
    BEGIN
      WITH WorkOrder DO BEGIN
        Errors := FALSE;
        CLEAR(WorkOrder);
        CLEAR(ServOrder);
        CLEAR(Project);
        IF (Logbook."Work Order No." = '') OR (NOT GET(Logbook."Work Order No.")) THEN BEGIN
          Errors := TRUE;
          ErrorRec.WriteError(
            STRSUBSTNO(Text000, Logbook.FIELDCAPTION("Work Order No."), Logbook."Work Order No."), Logbook, LineNo);
        END ELSE BEGIN
          IF "Source No." = '' THEN BEGIN
            Errors := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text003, FIELDCAPTION("Source No."), Logbook.FIELDCAPTION("Work Order No.")), Logbook, LineNo);
          END;
          IF "Source Company" = '' THEN BEGIN
            Errors := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text003, FIELDCAPTION("Source Company"), Logbook.FIELDCAPTION("Work Order No.")), Logbook, LineNo);
          END;
          IF InCurrCompany THEN BEGIN //For most Debrief Types the Source of the workorder must be in de current company
            IF WorkOrder."Source Company" <> COMPANYNAME THEN BEGIN
              Errors := TRUE;
              ErrorRec.WriteError(
                STRSUBSTNO(Text004,FIELDCAPTION("Source Company"),"Source Company",Logbook.FIELDCAPTION("Work Order No."),COMPANYNAME),
                Logbook, LineNo);
            END;
         END;
        END;
        IF NOT Errors THEN BEGIN
          CASE "Source Type" OF
            "Source Type"::ServiceOrder:
              BEGIN
                IF "Source Company" <> COMPANYNAME THEN
                  ServOrder.CHANGECOMPANY("Source Company");
                IF NOT ServOrder.GET("Source No.") THEN BEGIN
                  Errors := TRUE;
                  ErrorRec.WriteError(STRSUBSTNO(Text000, ServOrder.TABLECAPTION, "Source No."), Logbook, LineNo);
                END;
              END;
            "Source Type"::Project:
              BEGIN
                IF "Source Company" <> COMPANYNAME THEN
                  Project.CHANGECOMPANY("Source Company");
                IF NOT Project.GET("Source No.") THEN BEGIN
                  Errors := TRUE;
                  ErrorRec.WriteError(STRSUBSTNO(Text000, Project.TABLECAPTION, "Source No."), Logbook, LineNo);
                END;
              END;
          END;
        END;
      END;
      EXIT(NOT Errors);
    END;

    LOCAL PROCEDURE CheckResource@1100529001(Logbook@1100529000 : Record 11012677;LineNo@1100529003 : Integer;InCurrCompany@1100529004 : Boolean;VAR Resource@1100529001 : Record 11229278;VAR Empl@1100529002 : Record 5200) : Boolean;
    VAR
      WorkOrder@1100529005 : Record 11229279;
      Errors@1100529006 : Boolean;
    BEGIN
      WITH Resource DO BEGIN
        Errors := FALSE;
        CLEAR(Resource);
        CLEAR(Empl);
        IF (Logbook."Resource No. (Employee)" = '') OR (NOT GET(Logbook."Resource No. (Employee)")) THEN BEGIN
          Errors := TRUE;
          ErrorRec.WriteError(
            STRSUBSTNO(Text000, WorkOrder.FIELDCAPTION("Resource No."), Logbook."Resource No. (Employee)"),
            Logbook, LineNo);
        END ELSE BEGIN
          IF Type <> Resource.Type::Employee THEN BEGIN
            Errors := TRUE;
            ErrorRec.WriteError(
              STRSUBSTNO(Text004, Type, Type, WorkOrder.FIELDCAPTION("Resource No."), FORMAT(Type::Employee)),
              Logbook, LineNo);
          END ELSE BEGIN
            IF "Source No." = '' THEN BEGIN
              Errors := TRUE;
              ErrorRec.WriteError(
                STRSUBSTNO(Text003, FIELDCAPTION("Source No."), WorkOrder.FIELDCAPTION("Resource No.")),
                Logbook, LineNo);
            END;
            IF Company = '' THEN BEGIN
              Errors := TRUE;
              ErrorRec.WriteError(
                STRSUBSTNO(Text003, FIELDCAPTION(Company), WorkOrder.FIELDCAPTION("Resource No.")), Logbook, LineNo);
            END;
            IF InCurrCompany THEN BEGIN //For some Debrief Types the Source of the resource must be in de current company
              IF Company <> COMPANYNAME THEN BEGIN
                Errors := TRUE;
                ErrorRec.WriteError(
                  STRSUBSTNO(Text004, FIELDCAPTION(Company), Company, WorkOrder.FIELDCAPTION("Resource No."), COMPANYNAME),
                  Logbook, LineNo);
              END;
            END;
          END;
        END;
        IF NOT Errors THEN BEGIN
          IF Company <> COMPANYNAME THEN
            Empl.CHANGECOMPANY(Company);
          IF (Resource."Source No." = '') OR (NOT Empl.GET(Resource."Source No.")) THEN BEGIN
            Errors := TRUE;
            ErrorRec.WriteError(STRSUBSTNO(Text000, Empl.TABLECAPTION, Resource."Source No."), Logbook, LineNo);
          END;
        END;
      END;
      EXIT(NOT Errors);
    END;

    LOCAL PROCEDURE PostDebriefWUPProduction@1100525000(VAR VarDebriefProduction@1100525001 : Record 11125650;ILogbook@1100525000 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100525004 : Record 11229279;
      ServiceOrder@1100525003 : Record 11012823;
      Project@1100525002 : Record 11072003;
    BEGIN
      IF CheckWorkorder(ILogbook, VarDebriefProduction."Line No.", TRUE, WorkOrder, ServiceOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefWUPProductionSO(VarDebriefProduction, ILogbook, WorkOrder, ServiceOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, ILogbook.FIELDCAPTION("Debrief Type"), ILogbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            ILogbook, VarDebriefProduction."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefWUPProductionSO@1100525004(VAR VarDebriefRec@1100525001 : Record 11125650;ILogbook@1100525000 : Record 11012677;IWorkOrder@1100525002 : Record 11229279;IServiceOrder@1100525005 : Record 11012823) : Boolean;
    VAR
      SUPProduction@1100525006 : Record 11071773;
      SUPProductionLine@1100525004 : Record 11071774;
      MobileSetup@1100528700 : Record 11012676;
      lvError@1100525003 : Boolean;
      LineNo@1100525007 : Integer;
    BEGIN
      //* Check
      IF lvError THEN
        EXIT(FALSE);

      //* Post
      SUPProductionLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      SUPProductionLine.SETRANGE("Production Date", VarDebriefRec."Production Date");
      SUPProductionLine.SETRANGE(Room, VarDebriefRec.Room);
      SUPProductionLine.SETRANGE("Unit Price Code", VarDebriefRec."Unit Price Code");
      SUPProductionLine.SETRANGE("SUP Production Status", SUPProductionLine."SUP Production Status"::Proposal);
      IF NOT SUPProductionLine.FINDFIRST THEN BEGIN
        SUPProduction.SETRANGE("Service Order No.", IServiceOrder."No.");
        SUPProduction.SETRANGE("Production Date", VarDebriefRec."Production Date");
        SUPProduction.SETRANGE(Status, SUPProduction.Status::Proposal);
        IF NOT SUPProduction.FINDFIRST THEN BEGIN
          SUPProduction.INIT;
          SUPProduction.VALIDATE("Service Order No.", IServiceOrder."No.");
          SUPProduction.VALIDATE("Production Date", VarDebriefRec."Production Date");
          SUPProduction.INSERT(TRUE);
        END;
        SUPProductionLine.RESET;
        SUPProductionLine.SETRANGE("Service Order No.", IServiceOrder."No.");
        SUPProductionLine.SETRANGE("Production Seq. No.", SUPProduction."Seq. No.");
        IF SUPProductionLine.FINDLAST THEN
          LineNo := SUPProductionLine."Line No.";
        LineNo += 10000;

        SUPProductionLine.INIT;
        SUPProductionLine.VALIDATE("Service Order No.", SUPProduction."Service Order No.");
        SUPProductionLine.VALIDATE("Production Seq. No.", SUPProduction."Seq. No.");
        SUPProductionLine.VALIDATE("Production Date", SUPProduction."Production Date");
        SUPProductionLine."Line No." := LineNo;
        SUPProductionLine.VALIDATE(Room, VarDebriefRec.Room);
        SUPProductionLine.VALIDATE("Unit Price Code", VarDebriefRec."Unit Price Code");
        SUPProductionLine.VALIDATE(Production, VarDebriefRec.Production);
        SUPProductionLine.INSERT(TRUE);
      END ELSE BEGIN
        SUPProductionLine.VALIDATE(Production, VarDebriefRec.Production);
        SUPProductionLine.MODIFY(TRUE);
      END;

      MobileSetup.GET;
      IF MobileSetup."Create CP Lines for SUP Auto" THEN BEGIN
        SUPProduction.GET(SUPProductionLine."Service Order No.", SUPProductionLine."Production Seq. No.");
        SUPProduction.VALIDATE(Status, SUPProduction.Status::Approved);
        SUPProduction.MODIFY(TRUE);
        SUPProduction.CreateCostPlusEntries;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDebriefServiceOrderObject@1100528700(VAR DebriefServiceOrderObject@1100528701 : Record 11125652;Logbook@1100528700 : Record 11012677) : Boolean;
    VAR
      WorkOrder@1100528704 : Record 11229279;
      ServiceOrder@1100528703 : Record 11012823;
      Project@1100528702 : Record 11072003;
    BEGIN
      // dp00276
      IF CheckWorkorder(Logbook, DebriefServiceOrderObject."Line No.", TRUE, WorkOrder, ServiceOrder, Project) THEN BEGIN
        CASE WorkOrder."Source Type" OF
          WorkOrder."Source Type"::ServiceOrder:
            EXIT(PostDebriefServiceOrderObjectSO(DebriefServiceOrderObject, Logbook, WorkOrder, ServiceOrder));
        ELSE
          ErrorRec.WriteError(
            STRSUBSTNO(Text005, Logbook.FIELDCAPTION("Debrief Type"), Logbook."Debrief Type",
            WorkOrder.FIELDCAPTION("Source Type"), WorkOrder."Source Type"),
            Logbook, DebriefServiceOrderObject."Line No.");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostDebriefServiceOrderObjectSO@1100528701(VAR DebriefServiceOrderObject@1100528703 : Record 11125652;Logbook@1100528702 : Record 11012677;WorkOrder@1100528701 : Record 11229279;ServiceOrder@1100528700 : Record 11012823) : Boolean;
    VAR
      ServiceObject@1100409000 : Record 11071691;
      ServiceOrderObject@1100528704 : Record 11071724;
      StandardObject@1100528708 : Record 11020334;
      MobileDecentralObject@1100525000 : Record 11012688;
      ServiceSetup@1100525001 : Record 11012800;
      ReplacementLine@1100525003 : Record 11071710;
      ServiceObjectReplacement@1100525004 : Record 11071691;
      ServiceInspectionManagement@1100409002 : Codeunit 11012844;
      ObjectInspectionManagement@1100409001 : Codeunit 11012848;
      ReplacementManagement@1100525002 : Codeunit 11012838;
    BEGIN
      // dp00276
      WITH DebriefServiceOrderObject DO BEGIN
      // DP00826.sn
        IF ServiceObject.GET("Service Object No.") THEN BEGIN
          "Old Description" := ServiceObject.Description;
          "Old Standard Object No." := ServiceObject."Standard Object No.";
          "Old Brand Code" := ServiceObject."Brand Code";
          "Old Model Code" := ServiceObject."Model Code";
          "Old Type Code" := ServiceObject."Type Code";
          "Old Building" := ServiceObject.Building;
          "Old Floor" := ServiceObject.Floor;
          "Old Room" := ServiceObject.Room;
          "Old Object Customer" := ServiceObject."Object Customer";
          "Old Quantity" := ServiceObject.Quantity;
        END;

        IF "Has Been Deleted by User" AND ("Service Object No." <> '') THEN BEGIN
          ServiceOrderObject.RESET;
          ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
          ServiceOrderObject.SETRANGE("Object No.", "Service Object No.");
          IF ServiceOrderObject.FINDFIRST THEN BEGIN
            IF NOT ServiceOrderObject.Finished THEN // avoid message
              ServiceOrderObject.DELETE(TRUE);
          END;
          EXIT(TRUE);
        END;
      // DP00826.en

        //* Check
        IF NOT "Has Been Added by User" THEN BEGIN
          ServiceOrderObject.RESET;
          ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
          ServiceOrderObject.SETRANGE("Object No.", "Service Object No.");
          IF ServiceOrderObject.ISEMPTY THEN BEGIN
            ErrorRec.WriteError(
                STRSUBSTNO(Text000, ServiceOrderObject.TABLECAPTION, WorkOrder."Source No." + '-' + "Service Object No."),
                Logbook, "Line No.");
            EXIT(FALSE);
          END;
        END;

        IF "Has Been Created by User" THEN BEGIN
          MobileDecentralObject.SETRANGE("Work Order No.", "Work Order No.");
          MobileDecentralObject.SETRANGE("Resource No. (Employee)", "Resource No. (Employee)");
          MobileDecentralObject.SETRANGE("Mobile Service Object No.", "Mobile Service Object No.");
          IF NOT MobileDecentralObject.FINDFIRST THEN BEGIN
            ServiceObject.INIT;
            ServiceObject.INSERT(TRUE);
            ServiceObject.VALIDATE("Standard Object No.", "Standard Object No.");
            ServiceObject.VALIDATE("Service Location No.", ServiceOrder."Service Location No.");
            ServiceObject.MODIFY(TRUE);

            MobileDecentralObject.INIT;
            MobileDecentralObject."Work Order No." := "Work Order No.";
            MobileDecentralObject."Resource No. (Employee)" := "Resource No. (Employee)";
            MobileDecentralObject."Mobile Service Object No." := "Mobile Service Object No.";
            MobileDecentralObject."Service Object No." := ServiceObject."No.";
            MobileDecentralObject.INSERT;
          END;
          "Service Object No." := MobileDecentralObject."Service Object No.";
        END;

        IF "Has Been Modified by User" THEN BEGIN
          IF NOT ServiceObject.GET("Service Object No.") THEN BEGIN
            ErrorRec.WriteError(
                STRSUBSTNO(Text000, ServiceObject.TABLECAPTION, "Service Object No."),
                Logbook, "Line No.");
            EXIT(FALSE);
          END;
          IF ServiceObject."Standard Object No." <> "Standard Object No." THEN BEGIN
            StandardObject.GET("Standard Object No.");
            ServiceObject.Description := StandardObject.Description; // avoid message
            ServiceObject.VALIDATE("Standard Object No.", "Standard Object No.");
            ServiceObject.MODIFY(TRUE);

            ServiceOrderObject.RESET;
            ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
            ServiceOrderObject.SETRANGE("Object No.", "Service Object No.");
            IF ServiceOrderObject.FINDFIRST THEN BEGIN
              ServiceInspectionManagement.DeleteSOInspectionLines(
                ServiceOrderObject."Service Order No.",
                ServiceOrderObject."Object No.",
                ServiceOrderObject."Maintenance Scheme");
              ObjectInspectionManagement.DeleteSOSpecificationLines(
                ServiceOrderObject."Service Order No.",
                ServiceOrderObject."Object No.");
              ServiceInspectionManagement.CreateSOInspectionLines(
                ServiceOrderObject."Service Order No.",
                ServiceOrderObject."Service Contract No.",
                ServiceOrderObject."Object No.",
                ServiceOrderObject."Maintenance Scheme",
                ServiceOrderObject.Code);
              ObjectInspectionManagement.CreateSOSpecificationLines(
                ServiceOrderObject."Service Order No.",
                ServiceOrderObject."Object No.");
            END;
          END;
          ServiceObject.Description := Description;
      // DP00826.sn
          ServiceSetup.GET;
          IF NOT ServiceSetup."Sync. Object Brand/Model/Type" THEN BEGIN
            IF ("Brand Code" <> ServiceObject."Brand Code") THEN
              ServiceObject.VALIDATE("Brand Code", "Brand Code");
            IF ("Model Code" <> ServiceObject."Model Code") THEN
              ServiceObject.VALIDATE("Model Code", "Model Code");
            IF ("Type Code" <> ServiceObject."Type Code") THEN
              ServiceObject.VALIDATE("Type Code", "Type Code");
          END;
      // DP00826.en
          ServiceObject.Building := Building;
          ServiceObject.Floor := Floor;
          ServiceObject.Room := Room;
          ServiceObject."Object Customer" := "Object Customer";
          ServiceObject.Quantity := Quantity;
          ServiceObject.MODIFY(TRUE);
        END;

      // DP00835.sn
        IF "Has Been Replaced by User" THEN BEGIN
          IF NOT ServiceObject.GET("Service Object No.") THEN BEGIN
            ErrorRec.WriteError(
                STRSUBSTNO(Text000, ServiceObject.TABLECAPTION, "Service Object No."),
                Logbook, "Line No.");
            EXIT(FALSE);
          END;

          ServiceObject."Replace with Standard Object" := "Standard Obj. No. Replacement";
          ReplacementLine.INIT;
          ReplacementManagement.InsertObject(
            ReplacementLine, ServiceObject, ServiceObjectReplacement, "Effective Date Replacement");
          ServiceObjectReplacement.Description := "Description Replacement";
          ServiceObjectReplacement.MODIFY;

          IF ServiceOrder."Service Contract No." <> '' THEN BEGIN
            ReplacementManagement.InsertContractObject(ServiceObjectReplacement, ServiceOrder."Service Contract No.", "Effective Date Replacement");
            ReplacementManagement.CloseContractObject(ServiceObject, ServiceOrder."Service Contract No.", "Effective Date Replacement" - 1);
          END;
        END;
      // DP00835.en

        IF "Has Been Added by User" OR "Has Been Replaced by User" THEN BEGIN
          ServiceOrderObject.RESET;
          ServiceOrderObject.SETRANGE("Service Order No.", WorkOrder."Source No.");
          IF "Has Been Replaced by User" THEN
            ServiceOrderObject.SETRANGE("Object No.", ServiceObjectReplacement."No.")
          ELSE
            ServiceOrderObject.SETRANGE("Object No.", "Service Object No.");
          IF NOT ServiceOrderObject.FINDFIRST THEN BEGIN
            ServiceOrderObject.INIT;
            ServiceOrderObject.VALIDATE("Service Order No.", WorkOrder."Source No.");
            IF "Has Been Replaced by User" THEN
              ServiceOrderObject.VALIDATE("Object No.", ServiceObjectReplacement."No.")
            ELSE
              ServiceOrderObject.VALIDATE("Object No.", "Service Object No.");
            ServiceOrderObject.INSERT(TRUE);
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateFLSStatus@1100528300(ServiceOrder@1100409000 : Record 11012823;DebriefFSStatusMobile@1100528300 : Record 11012683);
    VAR
      ReferencePoint@1100409002 : Record 11020271;
      FLSVisiTourInterface@1100409003 : Codeunit 11072090;
    BEGIN
      IF (ServiceOrder."FLS VisiTour ID" = 0) THEN
        EXIT;

      CASE DebriefFSStatusMobile."Field Service Status" OF
        '30', '50', '60', '65', '70', '90':
          FLSVisiTourInterface.MobileMessage(ServiceOrder, DebriefFSStatusMobile);
      END;
    END;

    LOCAL PROCEDURE DPA_OnInsertAltUserID@1000000000(ServOrderRecNoSeries@1100285306 : Code[10];lvUserID@1100285302 : Code[50];VAR lvGlobDim1Code@1100285301 : Code[20]) : Boolean;
    VAR
      DepartmentAuthorizObject@1100285300 : Record 11012466;
      DPA_Management@1100285303 : Codeunit 11012783;
      Dimension1Code@1100285304 : Code[20];
    BEGIN
      //151229
      //IF NOT DPA_IsActive THEN
      //  EXIT;
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      DPA_Management.SetAlternativeUserID(lvUserID);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);


      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          ServOrderRecNoSeries,
          '',
          DATABASE::"Service Order");
      IF Dimension1Code <> '' THEN BEGIN
        lvGlobDim1Code := Dimension1Code;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSUPOrder@1100528702(ServiceOrderNo@1100528700 : Code[20]) : Boolean;
    VAR
      SUPRecordingLine@1100528701 : Record 11071772;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrderNo);
      EXIT(NOT SUPRecordingLine.ISEMPTY);
    END;

    LOCAL PROCEDURE InsertOrModifyServLocContactDebrief@1100528601(IServiceOrderNo@1100528600 : Code[20];ITableNo@1100528603 : Integer;IFieldNo@1100528601 : Integer;IOldValue@1100528602 : Text[80];INewValue@1100528604 : Text[80]);
    VAR
      ServiceLocContactDebrief@1100528605 : Record 11072288;
    BEGIN
      IF NOT (ITableNo IN [DATABASE::"Service Location"]) THEN
        EXIT;
      IF NOT ServiceLocContactDebrief.GET(IServiceOrderNo, ITableNo, IFieldNo) THEN BEGIN
        ServiceLocContactDebrief."Service Order No." := IServiceOrderNo;
        CASE ITableNo OF
          DATABASE::"Service Location":
            ServiceLocContactDebrief.VALIDATE("Table Type", ServiceLocContactDebrief."Table Type"::"Service Location");
        END;
        ServiceLocContactDebrief."Field No." := IFieldNo;
        ServiceLocContactDebrief.INSERT(TRUE);
      END;
      IF ServiceLocContactDebrief."Processed Date" = 0D THEN BEGIN
        ServiceLocContactDebrief."Old Value" := IOldValue;
        ServiceLocContactDebrief."New Value" := INewValue;
        ServiceLocContactDebrief.MODIFY(TRUE);
      END;
    END;

    BEGIN
    {
      Copied from codeunit 'Post Import Data (FSA)' (CU11012158), and changed for Mobile,

      151104 ITERO.DL select NoSeries based on user-departmentcode
      151229 ITERO.DL assign global dimension 1 code from DPA
                      new function  DPA_OnInsertAltUserID()
    }
    END.
  }
}

