OBJECT Codeunit 11012228 Estimate Transfer Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012171=rimd,
                TableData 11012172=rimd,
                TableData 11012173=rimd,
                TableData 11072003=m;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012015 : TextConst 'ENU=Copy from          #1##########\\';
      Text001@11012016 : TextConst 'ENU=Copy to              #2##########\\';
      Text002@11012017 : TextConst 'ENU=Busy with         #3################# @4@@@@@@@@@@@@@';
      Text003@11012018 : TextConst 'ENU=Budget is Fixed, transfer Estimate only allowed to Adjustment or Extension';
      Text004@11012019 : TextConst 'ENU=Collect';
      Text005@11012020 : TextConst 'ENU=Summary %1: select Element for Project on level Estimate, Sub-Estimate or Summary Sheet';
      Text006@11012021 : TextConst 'ENU=Transfer';
      Text007@11012022 : TextConst 'ENU=No data within selection';
      Text008@11012023 : TextConst 'ENU=There is a budget for this project %1, do you want to add estimate ?';
      Text009@11012024 : TextConst 'ENU=Create Start Element in table %1';
      Text010@11012025 : TextConst 'ENU=Sub-Estimate %1, Part %2: select Element for Project on level Estimate, Sub-Estimate or Estimate Part.';
      HelpRec@11012000 : TEMPORARY Record 11012174;
      EstSetup@1210190005 : Record 11012150;
      JobSetup@1100525038 : Record 315;
      EstRec@1100525005 : Record 11012151;
      EstRateRec@1210190000 : Record 11012160;
      SubEstRec@1100525018 : Record 11072074;
      EstPartRec@1210190011 : Record 11072073;
      EstLineRec@11012001 : Record 11072072;
      RcpLineRec@11012002 : Record 11072075;
      ServSetup@1100525020 : Record 11012800;
      ServOrderRec@1100525004 : Record 11012823;
      TmpServOrderRec@1100525006 : TEMPORARY Record 11012823;
      TryOutRec@1100525011 : Record 11012761;
      ProjRec@1210190004 : Record 11072003;
      PlotRec@1100485005 : Record 11012500;
      ProjBudgetRec@11012006 : Record 11012001;
      ProjElemRec@11012007 : Record 11012010;
      ElemRec@11012008 : Record 11012060;
      Elem2Rec@11012014 : Record 11012060;
      AssemblyYardNumberObject@1100525037 : Record 11020596;
      ObjectModification@1100528603 : Record 11071700;
      TmpObjectModification@1100528601 : TEMPORARY Record 11071700;
      FormatMgt@1210190012 : Codeunit 11012022;
      RouteRefMgtCU@1210190008 : Codeunit 11012045;
      Status@11012011 : Dialog;
      NoOfRecords@11012012 : Integer;
      LineCount@11012013 : Integer;
      HelpLino@1100525013 : Integer;
      BudgetLino@1100525015 : Integer;
      ProjectElement@11012009 : Code[20];
      JobNo@1210190001 : Code[20];
      Text011@1210190002 : TextConst 'ENU=Adjustment Hours Additional Costs Summary Sheet';
      Text012@1210190003 : TextConst 'ENU="Correction Factor %1: "';
      ProjTo@1100525025 : Code[20];
      ExtTo@1100525024 : Code[20];
      AdjTo@1100525023 : Code[20];
      PlotTo@1100485004 : Code[20];
      HouseModelTo@1210190018 : Code[20];
      MainGroupTo@1210190017 : Code[20];
      GroupTo@1210190016 : Code[20];
      SubGroupTo@1210190015 : Code[20];
      OptTo@1100525026 : Code[20];
      OrderKind@1100525028 : Code[20];
      OrderType@1100525027 : Code[20];
      desc1@1210190014 : Text[100];
      desc2@1210190013 : Text[100];
      Text013@1100485001 : TextConst 'ENU=Do you want to transfer this estimate to more then 1 project ?';
      LastProject@1100485002 : Code[20];
      ServSheet@1100525014 : Code[20];
      SeriesServOrder@1100525009 : Code[10];
      SkipQuestionProject@1100485003 : Boolean;
      TransferZeroLines@1100525003 : Boolean;
      TransferStructure@1100525002 : Boolean;
      TransferSalesPrice@1100485006 : Boolean;
      TransferSubEstimate@1100485007 : Boolean;
      TransferPurchAction@1100485008 : Boolean;
      TransferPartToTenderElement@1100525000 : Boolean;
      TransferCommentLines@1100529800 : Boolean;
      TransferDestination@1100525001 : 'Project,ServLoc,ServOrder,Modification';
      SettlementMethod@1100525008 : 'FixedPrice,CostPlus';
      CopyTryOut@1100525007 : Boolean;
      Text014@1100525012 : TextConst 'ENU=%1 (%2) updated';
      CopyFeatures@1100525016 : ' ,TechSpec,CheckList,Both';
      SelectSheet@1100525022 : Boolean;
      UpdateProject@1100525021 : Boolean;
      CollectSubEstimates@1210190006 : Boolean;
      CopyFromCostEst@1100525029 : Code[20];
      ServOrderNo@1100525010 : Code[20];
      EstFrom@1100525033 : Code[20];
      SubEstFilter@1100525032 : Text[250];
      EstPartFilter@1100525031 : Text[250];
      SheetFilter@1100525030 : Text[250];
      StatusFilter@1100525019 : Text[250];
      Text015@1100525034 : TextConst 'ENU=of line within recipe %1 with description "%2" must have a value';
      BomLine@1100525035 : Integer;
      CommentLinesTransfered@1100529801 : Boolean;
      CopyPrPlActivities@1210190009 : Boolean;
      CopyPrPlTemplate@1210190007 : Code[10];
      Text016@1100525036 : TextConst 'ENU=There is a budget for Service Order %1, do you want to add estimate ?';
      UpdateOrderAmount@1100409002 : ' ,Summary,TryOutQuote';
      OrderAmount@1100409001 : Decimal;
      InstScheme@1100409000 : Code[20];
      HandleEntityNo@1100525017 : Boolean;
      ValidateRateCode@1100525039 : Boolean;
      SaveRecipeStructure@1100409005 : Boolean;
      LastRecipe@1100409004 : Text[1024];
      RecipeHeaderLine@1100409003 : Integer;
      ObjectModificationNo@1100528600 : Code[10];
      Text017@1100528602 : TextConst 'ENU=There is a Modification Activities for Object Modification %1, do you want to add estimate ?';

    PROCEDURE SetTransferOptions@1100485003(iTransferZeroLines@1100525002 : Boolean;iTransferStructure@1100525001 : Boolean;iTransferPartToTenderElement@1100525000 : Boolean;iTransferSalesPrice@1100485000 : Boolean;iTransferSubEstimate@1100485001 : Boolean;iTransferPurchAction@1100485002 : Boolean;iTransferCommentLines@1100529800 : Boolean;iTransferDestination@1100525003 : 'Project,ServLoc,ServOrder,Modification';iSettlementMethod@1100525005 : 'FixedPrice,CostPlus';iCopyTryOut@1100525004 : Boolean;iCopyFeatures@1100525006 : ' ,TechSpec,CheckList,Both';iSelectSheet@1100525008 : Boolean;iUpdateProject@1100525007 : Boolean;iCollectSubEstimates@1210190000 : Boolean);
    BEGIN
      TransferZeroLines := iTransferZeroLines;
      TransferStructure := iTransferStructure;
      TransferPartToTenderElement := iTransferPartToTenderElement;
      TransferSalesPrice := iTransferSalesPrice;
      TransferSubEstimate := iTransferSubEstimate;
      TransferPurchAction := iTransferPurchAction;
      TransferCommentLines := iTransferCommentLines;
      TransferDestination := iTransferDestination;
      SettlementMethod := iSettlementMethod;
      CopyTryOut := iCopyTryOut;
      CopyFeatures := iCopyFeatures;
      SelectSheet := iSelectSheet;
      UpdateProject := iUpdateProject;
      CollectSubEstimates := iCollectSubEstimates; //mg, 05-01-12: M31753
    END;

    PROCEDURE SetEstimateOptions@1100525019(iEstFrom@1100525004 : Code[20];iSubEstFilter@1100525003 : Text[250];iEstPartFilter@1100525002 : Text[250];iSheetFilter@1100525001 : Text[250];iStatusFilter@1100525000 : Text[250]);
    BEGIN
      EstFrom := iEstFrom;
      SubEstFilter := iSubEstFilter;
      EstPartFilter := iEstPartFilter;
      SheetFilter := iSheetFilter;
      StatusFilter := iStatusFilter;
    END;

    PROCEDURE SetProjectOptions@1100525020(iProjTo@1100525008 : Code[20];iExtTo@1100525007 : Code[20];iAdjTo@1100525006 : Code[20];iPlotTo@1100525005 : Code[20];iHouseModelTo@1100525004 : Code[20];iMainGroupTo@1100525003 : Code[20];iGroupTo@1100525002 : Code[20];iSubGroupTo@1100525001 : Code[20];iOptTo@1100525000 : Code[20]);
    BEGIN
      ProjTo := iProjTo;
      ExtTo := iExtTo;
      AdjTo := iAdjTo;
      PlotTo := iPlotTo;
      HouseModelTo := iHouseModelTo;
      MainGroupTo := iMainGroupTo;
      GroupTo := iGroupTo;
      SubGroupTo := iSubGroupTo;
      OptTo := iOptTo;
    END;

    PROCEDURE SetProjectPlanningOptions@1210190007(iCopyPrPlActivities@1210190000 : Boolean;iCopyPrPlTemplate@1210190001 : Code[10]);
    BEGIN
      CopyPrPlActivities := iCopyPrPlActivities;
      CopyPrPlTemplate := iCopyPrPlTemplate;
    END;

    PROCEDURE SetServiceOptions@1100525021(iOrderKind@1100525000 : Code[20];iOrderType@1100525001 : Code[20];iUpdateOrderAmount@1100409002 : ' ,Summary,TryOutQuote';iOrderAmount@1100409001 : Decimal;iInstScheme@1100409000 : Code[20]);
    BEGIN
      OrderKind := iOrderKind;
      OrderType := iOrderType;
      //db.sn, 15-01-13: 34378
      UpdateOrderAmount := iUpdateOrderAmount;
      OrderAmount := iOrderAmount;
      InstScheme := iInstScheme;
      //db.en, 15-01-13: 34378
    END;

    PROCEDURE SetValidateRateCode@1100525025(iValidateRateCode@1100525000 : Boolean);
    BEGIN
      ValidateRateCode := iValidateRateCode;  //db, 20-05-14: C011364 (for Service Order Object Mgt only)
    END;

    PROCEDURE SetSaveStructureRecipe@1100409000(iSaveRecipeStructure@1100525000 : Boolean);
    BEGIN
      SaveRecipeStructure := iSaveRecipeStructure;  //db, 23-09-14: C016015
    END;

    PROCEDURE Start@1();
    BEGIN
      Status.OPEN(
         Text000 +
         Text001 +
         Text002);
      Status.UPDATE(1, EstFrom);
      Status.UPDATE(2, ProjTo);

      IF TransferDestination = TransferDestination::Project THEN BEGIN
        IF ProjRec.GET(ProjTo) THEN
          IF ProjRec."Budget Fixed" AND ((ExtTo = '') AND (AdjTo = '') AND (OptTo = '')) THEN
            ERROR(Text003);
      END;

      EstSetup.GET;
      JobSetup.GET;

      EstRec.GET(EstFrom);
      IF (EstRec."Estimate Type" = EstRec."Estimate Type"::Sales) AND
         (EstRec."Copied from Cost Estimate" <> '') THEN
        CopyFromCostEst := EstRec."Copied from Cost Estimate"
      ELSE
        CopyFromCostEst := EstFrom;

      Collect;
      Transfer;

      IF TransferDestination = TransferDestination::Project THEN BEGIN
        IF UpdateProject THEN
          UpdateProjRec;
        IF TransferPartToTenderElement THEN
          CopyPartsToTenderElements;
        IF CopyPrPlTemplate <> '' THEN
          CopyPrPLTemplateToProjectPl;
        IF CopyTryOut AND TryOutRec.READPERMISSION THEN
          TryOutRec.CopyRelation(1, 0, EstFrom, ProjTo);  //db, 10-03-14: C010450 (EstRec."No.", EstRec."Project No.");
        CheckBudgetSummary;  //db, 13-08-09: M15776
      END;

      Status.CLOSE;
    END;

    PROCEDURE CopySalesRecipeToProjBudget@1100525023(VAR SalesLine@1100525000 : Record 37);
    VAR
      SalesLine2@1100525001 : Record 37;
      ProjectPrincipal@1100528900 : Record 11012005;
    BEGIN
      //DP00481
      Status.OPEN(
         Text000 +
         Text001 +
         Text002);
      Status.UPDATE(1, EstFrom);
      Status.UPDATE(2, ProjTo);

      IF TransferDestination = TransferDestination::Project THEN BEGIN
        IF ProjRec.GET(ProjTo) THEN
          IF ProjRec."Budget Fixed" AND ((ExtTo = '') AND (AdjTo = '') AND (OptTo = '')) THEN
            ERROR(Text003);
      END;

      EstSetup.GET;
      JobSetup.GET;

      HandleEntityNo := FALSE;
      IF AssemblyYardNumberObject.READPERMISSION THEN
        HandleEntityNo := TRUE;

      IF SalesLine.FINDSET(TRUE,FALSE) THEN
        Status.UPDATE(3, Text004);
        REPEAT
          SalesLine2 := SalesLine;
          SalesLine.VALIDATE("Job No.", ProjTo);
          //Call C012922 sn
          IF SalesLine."Shortcut Dimension 2 Code" = '' THEN BEGIN
            ProjectPrincipal.INIT;
            IF ProjRec."Bill-to Customer No." <> '' THEN
              ProjectPrincipal.GET(ProjRec."No.", ProjRec."Bill-to Customer No.");
            ProjectPrincipal.TESTFIELD("Cost Object");         //Cost Object MUST be filled
            SalesLine.VALIDATE("Shortcut Dimension 2 Code", ProjectPrincipal."Cost Object");
          END;
          //Call C012922 en
          SalesLine.Description := SalesLine2.Description;
          SalesLine."Description 2" := SalesLine2."Description 2";
          SalesLine.MODIFY;

          IF HandleEntityNo THEN
            CreateAssemblyYardNumberObjectBasedOnSalesLine(SalesLine);

          CollectFromSalesLineRcp(SalesLine);

        UNTIL SalesLine.NEXT = 0;

      IF NOT HelpRec.FINDSET THEN
        ERROR(Text007);

      Transfer;

      IF (TransferDestination = TransferDestination::Project) THEN BEGIN
        ProjBudgetRec.RESET;
        ProjBudgetRec.SETRANGE("Project No.", ProjTo);
        ProjBudgetRec.GenerateBudgetToMatReqLines(ProjTo);
      END;

      IF TransferDestination = TransferDestination::Project THEN BEGIN
        IF UpdateProject THEN
          UpdateProjRec;
        IF TransferPartToTenderElement THEN
          CopyPartsToTenderElements;
        IF CopyPrPlTemplate <> '' THEN
          CopyPrPLTemplateToProjectPl;
        IF CopyTryOut AND TryOutRec.READPERMISSION THEN
          TryOutRec.CopyRelation(1, 0, EstRec."No.", EstRec."Project No.");
        CheckBudgetSummary;
      END;

      Status.CLOSE;
    END;

    PROCEDURE CopyEstimateRecipesToAssemblyProject@1100528400(VAR EstimateLine@1100525000 : Record 11072072);
    VAR
      Job@1100528400 : Record 11072003;
      BudgetLine@1100528401 : Record 11012001;
      LastPurchaseRouteReference@1100528402 : Code[20];
    BEGIN
      //DP00595
      Status.OPEN(
         Text000 +
         Text001 +
         Text002);
      Status.UPDATE(1, EstFrom);
      Status.UPDATE(2, ProjTo);

      IF Job.GET(ProjTo) THEN
        IF Job."Budget Fixed" THEN
          ERROR(Text003);

      EstSetup.GET;
      JobSetup.GET;
      HandleEntityNo := TRUE;

      IF EstimateLine.FINDSET(TRUE, FALSE) THEN BEGIN
        Status.UPDATE(3, Text004);
        REPEAT
          GetLastPurchaseRouteReference(LastPurchaseRouteReference);
          EstimateLine."Purchase Route Reference" := LastPurchaseRouteReference;
          EstimateLine.VALIDATE("Assembly Project No.", ProjTo);
          EstimateLine.MODIFY;
          CreateAssemblyYardNumberObjectBasedOnEstimateLine(EstimateLine);
          CollectFromRcpLineForAssemblyProject(EstimateLine);
        UNTIL EstimateLine.NEXT = 0;
        WriteLastPurchaseRouteReference(LastPurchaseRouteReference);
      END;

      IF NOT HelpRec.FINDSET THEN
        ERROR(Text007);

      Transfer;

      BudgetLine.RESET;
      BudgetLine.SETRANGE("Project No.", ProjTo);
      BudgetLine.GenerateBudgetToMatReqLines(ProjTo);
      CheckBudgetSummary;
      Status.CLOSE;
    END;

    PROCEDURE Collect@2();
    BEGIN
      Status.UPDATE(3, Text004);
      HelpLino := 0;

      CollectFromEstLine;
      CollectFromRcpLine;
      IF SelectSheet = TRUE THEN BEGIN
        IF TransferDestination = TransferDestination::Project THEN
          CollectFromSumLine(EstFrom, CopyFromCostEst, SheetFilter);
      END;
    END;

    PROCEDURE CollectFromEstLine@1100525010();
    BEGIN
      //EstLineRec.SETRANGE("Estimate No.", EstFrom);
      EstLineRec.SETRANGE("Estimate No.", CopyFromCostEst);
      IF SubEstFilter <> '' THEN
        EstLineRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
      IF EstPartFilter <> '' THEN
        EstLineRec.SETFILTER(Part, EstPartFilter);
      IF StatusFilter <> '' THEN
        EstLineRec.SETFILTER("Line Status", StatusFilter);
      EstLineRec.SETRANGE(Recipe, '');
      IF EstLineRec.FINDSET THEN BEGIN
        LineCount := 0;
        NoOfRecords := EstLineRec.COUNT;
        REPEAT
          CASE TransferDestination OF
            TransferDestination::Project:
              BEGIN
                IF (EstLineRec."Project No." <> '') THEN
                  JobNo := EstLineRec."Project No."
                ELSE
                  JobNo := DetermineProject(
                    EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
                    EstLineRec."Part Group", EstLineRec.Part, '');
                IF (EstLineRec.Element <> '') THEN
                  ProjectElement := EstLineRec.Element
                ELSE
                  ProjectElement := DetermineElement(
                    EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
                    EstLineRec."Part Group", EstLineRec.Part, '');
              END;
            TransferDestination::ServOrder:
              BEGIN
                IF (EstLineRec."Service Order No." <> '') THEN BEGIN
                  ServOrderNo := EstLineRec."Service Order No.";
                END ELSE BEGIN
                  SubEstRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.");
                  ServOrderNo := SubEstRec."Service Order No.";
                END;
              END;
            TransferDestination::Modification:
              BEGIN
                IF EstLineRec."Object Modification No." <> '' THEN BEGIN
                  ObjectModificationNo := EstLineRec."Object Modification No.";
                END ELSE BEGIN
                  SubEstRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.");
                  ObjectModificationNo := SubEstRec."Object Modification No.";
                END;
              END;
          END;
          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          FillHelpEstimateRec;
        UNTIL EstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CollectFromRcpLine@1100525013();
    BEGIN
      //RcpLineRec.SETRANGE("Estimate No.", EstFrom);
      RcpLineRec.SETRANGE("Estimate No.", CopyFromCostEst);
      IF SubEstFilter <> '' THEN
        RcpLineRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
      IF EstPartFilter <> '' THEN
        RcpLineRec.SETFILTER(Part, EstPartFilter);
      IF StatusFilter <> '' THEN
        RcpLineRec.SETFILTER("Line Status", StatusFilter);
      IF RcpLineRec.FINDSET THEN BEGIN
        LineCount := 0;
        NoOfRecords := RcpLineRec.COUNT;
        REPEAT
          EstLineRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
            RcpLineRec."Part Group", RcpLineRec.Part, RcpLineRec."Estimate Line");

          IF TransferDestination = TransferDestination::Project THEN BEGIN
            IF (RcpLineRec."Project No." <> '') OR (EstLineRec."Project No." <> '') THEN BEGIN
              IF RcpLineRec."Project No." <> '' THEN
                JobNo := RcpLineRec."Project No."
              ELSE
                JobNo := EstLineRec."Project No.";
            END ELSE BEGIN
              JobNo := DetermineProject(
                RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, '');
            END;
            IF (RcpLineRec.Element <> '') OR (EstLineRec.Element <> '') THEN BEGIN
              IF (RcpLineRec.Element <> '') THEN
                ProjectElement := RcpLineRec.Element
              ELSE
                ProjectElement := EstLineRec.Element;
            END ELSE BEGIN
              ProjectElement := DetermineElement(
                RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.",
                RcpLineRec."Part Group", RcpLineRec.Part, '');
            END;
          END;
          //db.sn, 13-11-09: M16953
          CASE TransferDestination OF
            TransferDestination::ServOrder:
              BEGIN
                IF (EstLineRec."Service Order No." <> '') THEN BEGIN
                  ServOrderNo := EstLineRec."Service Order No.";
                END ELSE BEGIN
                  SubEstRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.");
                  ServOrderNo := SubEstRec."Service Order No.";
                END;
              END;
            TransferDestination::Modification:
              BEGIN
                IF (EstLineRec."Object Modification No." <> '') THEN BEGIN
                  ObjectModificationNo := EstLineRec."Object Modification No.";
                END ELSE BEGIN
                  SubEstRec.GET(RcpLineRec."Estimate No.", RcpLineRec."Sub-Estimate No.");
                  ObjectModificationNo := SubEstRec."Object Modification No.";
                END;
              END;
          END;
          //db.en, 13-11-09: M16953
          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          IF (RcpLineRec."Recipe (Child)" <> '') AND (RcpLineRec."Recipe Exploded" = FALSE) THEN  //db, 28-10-13: DP00381
            ProcessRecipeChild(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)", RcpLineRec.Quantity)
          ELSE
            FillHelpRecipeRec;
        UNTIL RcpLineRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CollectFromRcpLineForAssemblyProject@1100528406(EstimateLine@1100528400 : Record 11072072);
    VAR
      EstimateRecipeLine@1100528401 : Record 11072075;
    BEGIN
      //DP00595
      EstimateRecipeLine.SETRANGE("Estimate No.", EstimateLine."Estimate No.");
      EstimateRecipeLine.SETRANGE("Sub-Estimate No.", EstimateLine."Sub-Estimate No.");
      EstimateRecipeLine.SETRANGE("Part Group", EstimateLine."Part Group");
      EstimateRecipeLine.SETRANGE(Part, EstimateLine.Part);
      EstimateRecipeLine.SETRANGE("Estimate Line", EstimateLine."Line No.");

      JobNo := ProjTo;

      IF EstimateRecipeLine.FINDSET THEN BEGIN
        LineCount := 0;
        NoOfRecords := EstimateRecipeLine.COUNT;
        REPEAT
          IF (EstimateRecipeLine.Element <> '') OR (EstimateLine.Element <> '') THEN BEGIN
            IF (EstimateRecipeLine.Element <> '') THEN
              ProjectElement := EstimateRecipeLine.Element
            ELSE
              ProjectElement := EstimateLine.Element;
          END ELSE BEGIN
            ProjectElement := DetermineElement(
              EstimateRecipeLine."Estimate No.", EstimateRecipeLine."Sub-Estimate No.",
              EstimateRecipeLine."Part Group", EstimateRecipeLine.Part, '');
          END;

          LineCount := LineCount + 1;
          Status.UPDATE(4, ROUND(LineCount / NoOfRecords * 10000, 1));
          EstLineRec.COPY(EstimateLine);
          RcpLineRec.COPY(EstimateRecipeLine);
          IF (RcpLineRec."Recipe (Child)" <> '') AND (NOT RcpLineRec."Recipe Exploded") THEN
            ProcessRecipeChild(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)", RcpLineRec.Quantity)
          ELSE
            FillHelpRecipeRec;
        UNTIL EstimateRecipeLine.NEXT = 0;
      END;
    END;

    PROCEDURE CollectFromSalesLineRcp@1100525024(SalesLine@1100525000 : Record 37);
    VAR
      SalesRecipeLine@1100525001 : Record 11229789;
    BEGIN
      //DP00481
      SalesRecipeLine.SETRANGE("Sales Document Type", SalesLine."Document Type");
      SalesRecipeLine.SETRANGE("Sales Document No.", SalesLine."Document No.");
      SalesRecipeLine.SETRANGE("Sales Line No.", SalesLine."Line No.");
      SalesRecipeLine.SETRANGE("Recipe Group", SalesLine."Recipe Group");
      SalesRecipeLine.SETRANGE(Recipe, SalesLine.Recipe);

      IF SalesRecipeLine.FINDSET THEN BEGIN
        LineCount := 0;
        NoOfRecords := SalesRecipeLine.COUNT;
        REPEAT
          JobNo := ProjTo;

          IF (SalesRecipeLine.Element <> '') OR (SalesLine.Element <> '') THEN BEGIN
              IF (SalesRecipeLine.Element <> '') THEN
                ProjectElement := SalesRecipeLine.Element
              ELSE
                ProjectElement := SalesLine.Element;
          END;

          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          EstLineRec.Quantity := SalesLine.Quantity;
          EstLineRec."Part Quantity" := 1;
          IF (RcpLineRec."Recipe (Child)" <> '') AND (RcpLineRec."Recipe Exploded" = FALSE) THEN  //db, 28-10-13: DP00381
            //(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)", RcpLineRec.Quantity)
            ERROR('Child Recipes not implemented')
          ELSE
            RcpLineRec.TRANSFERFIELDS(SalesRecipeLine);
            FillHelpRecipeRec;
        UNTIL SalesRecipeLine.NEXT = 0;
      END;
    END;

    PROCEDURE CollectFromSumLine@1100525016(EstFrom@1100525002 : Code[20];CopyFromCostEst@1100525001 : Code[20];SheetFilter@1100525000 : Code[250]);
    VAR
      SumLineRec@1100525003 : Record 11012171;
    BEGIN
      //SumLineRec.SETRANGE("Estimate No.", EstFrom);
      SumLineRec.SETRANGE("Estimate No.", CopyFromCostEst);
      IF SheetFilter <> '' THEN
        SumLineRec.SETFILTER(Summary, SheetFilter);
      //SumLineRec.SETFILTER("Cost Object", '<>%1', '');  //db, 14-05-08: M11119
      SumLineRec.SETFILTER(Amount, '<>%1', 0);
      SumLineRec.SETRANGE("Transfer to Budget", TRUE);  //db, 14-05-08: M11119
      IF SumLineRec.FINDSET THEN BEGIN
        LineCount := 0;
        NoOfRecords := SumLineRec.COUNT;
        REPEAT
          IF TransferDestination = TransferDestination::Project THEN BEGIN
            JobNo := DetermineProject(SumLineRec."Estimate No.", '', '', '', SumLineRec.Summary);
            IF SumLineRec.Element <> '' THEN
              ProjectElement := SumLineRec.Element
            ELSE
              ProjectElement := DetermineElement(
                SumLineRec."Estimate No.", SumLineRec."Sub-Estimate No.",
                SumLineRec."Part Group", SumLineRec.Part, SumLineRec.Summary);
          END;
          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          FillHelpSummaryRec(SumLineRec);
        UNTIL SumLineRec.NEXT = 0;
      END;

      IF TransferDestination = TransferDestination::ServOrder THEN BEGIN
        SumLineRec.RESET;
      //SumLineRec.SETRANGE("Estimate No.", EstFrom);
        SumLineRec.SETRANGE("Estimate No.", CopyFromCostEst);
        IF SheetFilter <> '' THEN
          SumLineRec.SETFILTER(Summary, SheetFilter);
        SumLineRec.SETRANGE("Contract Amount", TRUE);
        IF SumLineRec.FINDFIRST THEN BEGIN
          SumLineRec.CALCFIELDS("Subtotal Amount");
          SumLineRec.Amount := SumLineRec."Subtotal Amount";
          FillHelpSummaryRec(SumLineRec);
        END;
      END;
    END;

    PROCEDURE Transfer@4();
    VAR
      StoreProj@1210190000 : Code[20];
      SwitchProj@1210190001 : Boolean;
      LineTransfered@1210190005 : Boolean;
      lvCostType@1100485000 : Integer;
      PrevCode@1100525000 : Code[20];
    BEGIN
      Status.UPDATE(3, Text006);
      BudgetLino := 0;
      StoreProj := ProjTo;
      SwitchProj := TRUE;
      PrevCode := '~';

      JobSetup.GET;

      CASE TransferDestination OF
        TransferDestination::ServOrder:
          BEGIN
            ServSetup.GET;
            IF NOT TestSOBudgetLinesExist THEN
              EXIT;
            IF TransferStructure = TRUE THEN
              HelpRec.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.")
            ELSE
              HelpRec.SETCURRENTKEY("Estimate No.", Code);
            HelpRec.SETRANGE("Summary Line", FALSE);
          END;
        TransferDestination::Modification:
          BEGIN
            IF NOT TestObjectModificationLinesExists THEN
              EXIT;
          END;
      END;
      HelpRec.SETRANGE("Estimate No.", EstFrom);
      IF NOT HelpRec.FINDSET THEN BEGIN
        MESSAGE(Text007);
      END ELSE BEGIN
        LineCount := 0;
        NoOfRecords := HelpRec.COUNT;
        REPEAT
          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));

          CASE TransferDestination OF
            TransferDestination::Project:
              BEGIN
                IF HelpRec."Project No." = '' THEN
                  HelpRec."Project No." := StoreProj;
                IF ProjTo <> HelpRec."Project No." THEN BEGIN
                  ProjTo := HelpRec."Project No.";
                  SwitchProj := TRUE;
                END;
                IF ProjRec.GET(ProjTo) THEN BEGIN
                  ProjRec."Estimate No." := EstFrom;
                  ProjRec.MODIFY(TRUE);
                END;

                ProjBudgetRec.RESET;
                ProjBudgetRec.SETRANGE("Project No.", ProjTo);
                ProjBudgetRec.SETRANGE("Extension Contract", '');
                ProjBudgetRec.SETRANGE(Adjustment, '');
                ProjBudgetRec.SETRANGE(Option, '');
                IF ExtTo <> '' THEN
                  ProjBudgetRec.SETRANGE("Extension Contract", ExtTo);
                IF AdjTo <> '' THEN
                  ProjBudgetRec.SETRANGE(Adjustment, AdjTo);
                IF OptTo <> '' THEN
                  ProjBudgetRec.SETRANGE(Option, OptTo);
                ProjBudgetRec.SETRANGE("Budget Summary Line", FALSE);  //db, 07-10-09
                IF ProjBudgetRec.FINDLAST THEN BEGIN
                  IF SwitchProj = TRUE THEN
                    IF NOT CONFIRM(Text008, FALSE, ProjTo) THEN
                      ERROR('');
                  BudgetLino := ProjBudgetRec."Line No.";
                END;

                SwitchProj := FALSE;
                IF ProjTo <> '' THEN
                  CheckProjectElement(ProjTo);
                IF PlotTo <> '' THEN
                  PlotRec.GET(ProjTo, PlotTo);
              END;
            TransferDestination::ServOrder:
              BEGIN
                ServSetup.GET;  //db, 23-11-10: M24097
                IF (CollectSubEstimates AND (HelpRec."Estimate No." <> PrevCode)) OR //mg.c, 05-01-12: M31753
                   (NOT CollectSubEstimates AND (
                    ((TransferStructure = FALSE) AND (HelpRec.Code <> PrevCode)) OR
                    ((TransferStructure = TRUE) AND (HelpRec."Sub-Estimate No." <> PrevCode)))
                   ) THEN BEGIN
                  IF HelpRec."Service Order No." = '' THEN BEGIN
                    IF (TransferStructure = TRUE) AND NOT CollectSubEstimates THEN //mg, 05-01-12: M31753
                      CreateServOrder(ServOrderRec, HelpRec."Sub-Estimate No.")
                    ELSE
                      CreateServOrder(ServOrderRec, '');
                    BudgetLino := 0;
                  END;
                END;
                IF (HelpRec."Service Order No." <> '') AND (HelpRec."Service Order No." <> ServOrderRec."No.") THEN BEGIN
                  ServOrderRec.GET(HelpRec."Service Order No.");
                  IF ServOrderRec."Expected Hours" = 0 THEN   //db, 24-03-14: get default from Setup; may be overruled by ServOrderindication
                    ServOrderRec."Expected Hours" := ServSetup."Expected Hours";
                  UpdateServOrderIndication;
                  UpdateServOrderAmount;  //db, 15-01-13: 34378
                  //UpdateServOrderDurationTime;  //db, 24-03-14: evaluate budget/expected hours vs duration time
                  ServOrderRec.MODIFY;
                END;
                //db.sn, 13-11-09: M16953
                IF HelpRec."Service Order No." = '' THEN
                  HelpRec."Service Order No." := ServOrderRec."No.";
                IF EstLineRec.GET(HelpRec."Estimate No.", HelpRec."Sub-Estimate No.",
                  HelpRec."Part Group", HelpRec.Part, HelpRec."Estimate Line No.") THEN BEGIN
                  EstLineRec."Service Order No." := HelpRec."Service Order No.";
                  EstLineRec.MODIFY;
                END;
                //db.en, 13-11-09: M16953
                IF CollectSubEstimates THEN //mg, 05-01-12: M31753
                  PrevCode := HelpRec."Estimate No."
                ELSE
                  IF TransferStructure = TRUE THEN
                    PrevCode := HelpRec."Sub-Estimate No."
                  ELSE
                    PrevCode := HelpRec.Code;
              END;
            TransferDestination::Modification:
              BEGIN
                IF HelpRec."Estimate No." <> PrevCode THEN
                  IF HelpRec."Object Modification No." = '' THEN
                    CreateObjectModification(ObjectModification);
                IF (HelpRec."Object Modification No." <> '') AND (HelpRec."Object Modification No." <> ObjectModification."No.") THEN
                  ObjectModification.GET(HelpRec."Object Modification No.");
                IF HelpRec."Object Modification No." = '' THEN
                  HelpRec."Object Modification No." := ObjectModification."No.";
                IF EstLineRec.GET(HelpRec."Estimate No.", HelpRec."Sub-Estimate No.", HelpRec."Part Group", HelpRec.Part, HelpRec."Estimate Line No.")
                THEN BEGIN
                  EstLineRec."Object Modification No." := HelpRec."Object Modification No.";
                  EstLineRec.MODIFY;
                END;
                PrevCode := HelpRec."Estimate No.";
              END;
          END;

          IF (HelpRec.Quantity <> 0) OR (HelpRec."BOM Item No." <> '') OR  //db, 21-02-11: M25087
             (SaveRecipeStructure AND (HelpRec.Recipe <> '')) OR  //db, 23-09-14: C016015
             (TransferZeroLines = TRUE) THEN BEGIN  //db, 20-05-14: T004754
            LineTransfered := FALSE;
            CommentLinesTransfered := FALSE; // **4PS MVOS
            FOR lvCostType := 1 TO 5 DO BEGIN
              IF CostTypeValid(lvCostType) THEN BEGIN
                LineTransfered := TRUE;
                CASE TransferDestination OF
                  TransferDestination::Project:
                    BEGIN
                      IF CheckProjBudgetPresent(lvCostType) THEN
                        UpdateProjBudget
                      ELSE BEGIN
                        FillProjBudgetRec(lvCostType);
                        CopyCommentLines(lvCostType); // **4PS MVOS
                      END;
                      IF ProjBudgetRec.Option <> '' THEN
                        AssignOptionBudget;
                    END;
                  TransferDestination::ServOrder:
                    UpdateServBudgetFromEstimate(lvCostType);
                  TransferDestination::Modification:
                    UpdateModificationFromEstimate(lvCostType);
                END;
              END;
            END;
            IF LineTransfered = FALSE THEN BEGIN
              lvCostType := 5;
              IF HelpRec."Item No." + HelpRec."Basic Item" + HelpRec."Trade Item" <> '' THEN
                lvCostType := 2
              ELSE
                IF HelpRec."Cost Object Labor" <> '' THEN
                  lvCostType := 1
                ELSE
                  IF HelpRec."Cost Object Material" <> '' THEN
                    lvCostType := 2
                  ELSE
                    IF HelpRec."Cost Object Subcontracting" <> '' THEN
                      lvCostType := 3
                    ELSE
                      IF HelpRec."Cost Object Plant" <> '' THEN
                        lvCostType := 4;
              CASE TransferDestination OF
                TransferDestination::Project:
                  BEGIN
                    IF CheckProjBudgetPresent(lvCostType) THEN
                      UpdateProjBudget
                    ELSE BEGIN
                      FillProjBudgetRec(lvCostType);
                      // **4PS MVOS
                      IF NOT CommentLinesTransfered THEN
                        CopyCommentLines(lvCostType);
                      // **4PS MVOS
                    END;
                    IF ProjBudgetRec.Option <> '' THEN
                      AssignOptionBudget;
                  END;
                TransferDestination::ServOrder:
                  UpdateServBudgetFromEstimate(lvCostType);
                TransferDestination::Modification:
                  UpdateModificationFromEstimate(lvCostType);
              END;
            END;
          END;
          //Testcall 4394.sn
          IF TransferDestination = TransferDestination::ServOrder THEN BEGIN
            IF ServOrderRec.GET(HelpRec."Service Order No.") THEN BEGIN
              IF EstRec."Starting Date" <> 0D THEN
                ServOrderRec."Starting Date" := EstRec."Starting Date"
              ELSE
                ServOrderRec."Starting Date" := WORKDATE;
              IF EstRec."Ending Date" <> 0D THEN
                ServOrderRec."Ending Date" := EstRec."Ending Date";
              ServOrderRec.MODIFY;
            END;
          END;
          //Testcall 4394.en
        UNTIL HelpRec.NEXT = 0;
      END;

      CASE TransferDestination OF
        TransferDestination::ServOrder:
          BEGIN
            CheckRelationSubEstServOrder;
            UpdateServOrderSummary;
          END;
        TransferDestination::Modification:
          CheckRelationSubEstObjectModification;
      END;
    END;

    PROCEDURE DetermineProject@13(lvEst@1210190000 : Code[20];lvSubEst@1210190001 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190003 : Code[20];lvSum@1210190004 : Code[20]) : Code[20];
    VAR
      EstPartRec@1210190005 : Record 11072073;
      SubEstRec@11012001 : Record 11072074;
      EstRec@11012002 : Record 11012151;
      SumRec@1210190006 : Record 11012172;
    BEGIN
      IF lvSum <> '' THEN BEGIN
        IF NOT SumRec.GET(lvEst, lvSum) THEN
          SumRec.INIT;
        lvSubEst := SumRec."Sub-Estimate No.";
        IF SumRec."Project No." <> '' THEN
          EXIT(SumRec."Project No.");
      END;

      IF lvPart <> '' THEN BEGIN
        IF NOT EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN
          EstPartRec.INIT;
        IF EstPartRec."Project No." <> '' THEN
          EXIT(EstPartRec."Project No.");

        IF EstPartRec.Level = 3 THEN BEGIN
          lvPart := EstPartRec.Paragraph;
          IF NOT EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN
            EstPartRec.INIT;
          IF EstPartRec."Project No." <> '' THEN
            EXIT(EstPartRec."Project No.");
        END;
        IF EstPartRec.Level = 2 THEN BEGIN
          lvPart := EstPartRec.Chapter;
          IF NOT EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN
            EstPartRec.INIT;
          IF EstPartRec."Project No." <> '' THEN
            EXIT(EstPartRec."Project No.");
        END;
        IF EstPartRec.Level = 1 THEN BEGIN
          EstPartRec.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", Level, Chapter, Paragraph);
          EstPartRec.SETRANGE("Estimate No.", lvEst);
          EstPartRec.SETRANGE("Sub-Estimate No.", lvSubEst);
          EstPartRec.SETRANGE(Level, 0);
          IF NOT EstPartRec.FINDFIRST THEN
            EstPartRec.INIT;
          IF EstPartRec."Project No." <> '' THEN
            EXIT(EstPartRec."Project No.");
        END;
      END;

      IF NOT SubEstRec.GET(lvEst, lvSubEst) THEN
        SubEstRec.INIT;
      IF SubEstRec."Project No." <> '' THEN
        EXIT(SubEstRec."Project No.");

      IF SubEstRec.Level = 1 THEN BEGIN
        lvSubEst := SubEstRec.Chapter;
        IF NOT SubEstRec.GET(lvEst, lvSubEst) THEN
          SubEstRec.INIT;
        IF SubEstRec."Project No." <> '' THEN
          EXIT(SubEstRec."Project No.");
      END;

      IF NOT EstRec.GET(lvEst) THEN
        EstRec.INIT;
      IF EstRec."Project No." <> '' THEN
        EXIT(EstRec."Project No.");

      EXIT(ProjTo);  //db, 12-05-14: C015206 (for CopyStructure)
    END;

    PROCEDURE DetermineElement@1210190000(lvEst@1210190004 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190001 : Code[20];lvSum@1210190000 : Code[20]) : Code[20];
    VAR
      EstPartRec@11012000 : Record 11072073;
      SubEstRec@11012001 : Record 11072074;
      EstRec@11012002 : Record 11012151;
      SumRec@1210190005 : Record 11012172;
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      IF lvPart <> '' THEN BEGIN
        IF TransferStructure = TRUE THEN BEGIN
          CopyStructure(lvEst, lvSubEst, lvPartGrp, lvPart);
          EXIT(lvPart);
        END;
        IF NOT EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN
          EstPartRec.INIT;
        IF EstPartRec.Element <> '' THEN
          EXIT(EstPartRec.Element);

        IF EstPartRec.Level = 3 THEN BEGIN
          lvPart := EstPartRec.Paragraph;
          IF NOT EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN
            EstPartRec.INIT;
          IF EstPartRec.Element <> '' THEN
            EXIT(EstPartRec.Element);
        END;
        IF EstPartRec.Level = 2 THEN BEGIN
          lvPart := EstPartRec.Chapter;
          IF NOT EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN
            EstPartRec.INIT;
          IF EstPartRec.Element <> '' THEN
            EXIT(EstPartRec.Element);
        END;
        IF EstPartRec.Level = 1 THEN BEGIN
          EstPartRec.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", Level, Chapter, Paragraph);
          EstPartRec.SETRANGE("Estimate No.", lvEst);
          EstPartRec.SETRANGE("Sub-Estimate No.", lvSubEst);
          EstPartRec.SETRANGE(Level, 0);
          IF NOT EstPartRec.FINDFIRST THEN
            EstPartRec.INIT;
          IF EstPartRec.Element <> '' THEN
            EXIT(EstPartRec.Element);
        END;
      END;

      IF lvSum <> '' THEN BEGIN
        IF NOT SumRec.GET(lvEst, lvSum) THEN
          SumRec.INIT;
        lvSubEst := SumRec."Sub-Estimate No.";
        IF SumRec.Element <> '' THEN
          EXIT(SumRec.Element);
      END;

      IF NOT SubEstRec.GET(lvEst, lvSubEst) THEN
        SubEstRec.INIT;
      IF SubEstRec.Element <> '' THEN
        EXIT(SubEstRec.Element);

      IF SubEstRec.Level = 1 THEN BEGIN
        lvSubEst := SubEstRec.Chapter;
        IF NOT SubEstRec.GET(lvEst, lvSubEst) THEN
          SubEstRec.INIT;
        IF SubEstRec.Element <> '' THEN
          EXIT(SubEstRec.Element);
      END;

      IF NOT EstRec.GET(lvEst) THEN
        EstRec.INIT;
      IF EstRec.Element <> '' THEN
        EXIT(EstRec.Element);

      IF lvProjRec.GET(JobNo) THEN
        IF lvProjRec."Posting Element Mandatory" THEN
          IF lvSum <> '' THEN
            ERROR(Text005, lvSum)
          ELSE
            ERROR(Text010, lvSubEst, lvPart);

      EXIT('');
    END;

    PROCEDURE CheckProjectElement@1210190002(lvProj@1210190000 : Code[20]);
    BEGIN
      ProjElemRec.SETRANGE("Project No.", lvProj);
      ProjElemRec.SETFILTER(Level, '%1', 0);
      IF NOT ProjElemRec.FINDSET(TRUE, FALSE) THEN BEGIN
        ElemRec.SETFILTER(Level, '%1', 0);
        IF NOT ElemRec.FINDFIRST THEN BEGIN
          ERROR(Text009, ElemRec.TABLECAPTION);
        END ELSE BEGIN
          ProjElemRec.INIT;
          ProjElemRec."Project No." := lvProj;
          ProjElemRec.VALIDATE(Element, ElemRec.Code);
          ProjElemRec.INSERT(TRUE);

          ProjRec.GET(lvProj);
          ProjElemRec."Starting Date" := ProjRec."Starting Date";
          ProjElemRec."Ending Date" := ProjRec."Ending Date";
          ProjElemRec.Description := ElemRec.Description;
          ProjElemRec."Unit of Measure" := ElemRec."Unit of Measure";
          ProjElemRec.Quantity := 1;
          ProjElemRec.MODIFY(TRUE);
        END;
      END;

      ProjElemRec.RESET;
      ElemRec.RESET;

      IF NOT ProjElemRec.GET(lvProj, HelpRec."Project Element") THEN BEGIN
        IF ElemRec.GET(HelpRec."Project Element") THEN BEGIN
          IF NOT ProjElemRec.GET(lvProj, ElemRec.Chapter) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Chapter) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := lvProj;
              ProjElemRec.VALIDATE(Element, ElemRec.Chapter);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
          IF NOT ProjElemRec.GET(lvProj, ElemRec.Paragraph) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Paragraph) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := lvProj;
              ProjElemRec.VALIDATE(Element, ElemRec.Paragraph);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
          IF NOT ProjElemRec.GET(lvProj, ElemRec.Code) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Code) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := lvProj;
              ProjElemRec.VALIDATE(Element, ElemRec.Code);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CopyStructure@1210190003(lvEst@1210190003 : Code[20];lvSubEst@1210190002 : Code[20];lvPartGrp@1210190001 : Code[20];lvPart@1210190000 : Code[20]);
    VAR
      lvChapter@1210190004 : Code[20];
      lvParagraph@1210190005 : Code[20];
      lvLevel@1210190006 : Integer;
    BEGIN
      IF NOT ProjElemRec.GET(JobNo, lvPart) THEN BEGIN
        FormatMgt.FormatElemExtended(2,lvPart,lvChapter,lvParagraph,lvLevel);
        IF (lvChapter <> '') AND NOT ProjElemRec.GET(JobNo, lvChapter) THEN BEGIN
          EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvChapter);
          ProjElemRec.INIT;
          ProjElemRec."Project No." := JobNo;
          ProjElemRec.VALIDATE(Element, EstPartRec.Part);
          ProjElemRec.INSERT(TRUE);
          ProjElemRec.Description := COPYSTR(EstPartRec.Description, 1, MAXSTRLEN(ProjElemRec.Description));
          //DP00686.sn
          ProjElemRec."Description 2" := COPYSTR(EstPartRec."Description 2", 1, MAXSTRLEN(ProjElemRec."Description 2"));
          ProjElemRec."Unit of Measure" := EstPartRec."Unit of Qty per Unit";
          ProjElemRec.Quantity := EstPartRec."Quantity per Unit";
          IF ProjElemRec.Quantity = 0 THEN
            ProjElemRec.Quantity := 1;
          //DP00686.en
          ProjElemRec.MODIFY(TRUE);
        END;
        IF (lvParagraph <> '') AND NOT ProjElemRec.GET(JobNo, lvParagraph) THEN BEGIN
          EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvParagraph);
          ProjElemRec.INIT;
          ProjElemRec."Project No." := JobNo;
          ProjElemRec.VALIDATE(Element, EstPartRec.Part);
          ProjElemRec.INSERT(TRUE);
          ProjElemRec.Description := COPYSTR(EstPartRec.Description, 1, MAXSTRLEN(ProjElemRec.Description));
          //DP00686.sn
          ProjElemRec."Description 2" := COPYSTR(EstPartRec."Description 2", 1, MAXSTRLEN(ProjElemRec."Description 2"));
          ProjElemRec."Unit of Measure" := EstPartRec."Unit of Qty per Unit";
          ProjElemRec.Quantity := EstPartRec."Quantity per Unit";
          IF ProjElemRec.Quantity = 0 THEN
            ProjElemRec.Quantity := 1;
          //DP00686.en
          ProjElemRec.MODIFY(TRUE);
        END;
        IF NOT ProjElemRec.GET(JobNo, lvPart) THEN BEGIN
          EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart);
          ProjElemRec.INIT;
          ProjElemRec."Project No." := JobNo;
          ProjElemRec.VALIDATE(Element, EstPartRec.Part);
          ProjElemRec.INSERT(TRUE);
          ProjElemRec.Description := COPYSTR(EstPartRec.Description, 1, MAXSTRLEN(ProjElemRec.Description));
          //DP00686.sn
          ProjElemRec."Description 2" := COPYSTR(EstPartRec."Description 2", 1, MAXSTRLEN(ProjElemRec."Description 2"));
          ProjElemRec."Unit of Measure" := EstPartRec."Unit of Qty per Unit";
          ProjElemRec.Quantity := EstPartRec."Quantity per Unit";
          IF ProjElemRec.Quantity = 0 THEN
            ProjElemRec.Quantity := 1;
          //DP00686.en
          ProjElemRec.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        //db, 18-12-09: M16806
        EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart);
        ProjElemRec.Description := COPYSTR(EstPartRec.Description, 1, MAXSTRLEN(ProjElemRec.Description));
        //DP00686.sn
        ProjElemRec."Description 2" := COPYSTR(EstPartRec."Description 2", 1, MAXSTRLEN(ProjElemRec."Description 2"));
        ProjElemRec."Unit of Measure" := EstPartRec."Unit of Qty per Unit";
        ProjElemRec.Quantity := EstPartRec."Quantity per Unit";
        IF ProjElemRec.Quantity = 0 THEN
          ProjElemRec.Quantity := 1;
        //DP00686.en
        ProjElemRec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE FillHelpEstimateRec@12();
    BEGIN
      HelpRec.INIT;
      //HelpRec."Estimate No." := EstLineRec."Estimate No.";
      HelpRec."Estimate No." := EstFrom;
      HelpRec."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
      HelpRec."Part Group" := EstLineRec."Part Group";
      HelpRec.Part := EstLineRec.Part;
      HelpRec."Estimate Line No." := EstLineRec."Line No.";
      HelpRec."Line No." := HelpLino + 10000;
      HelpLino := HelpRec."Line No.";
      HelpRec."Project No." := JobNo;
      HelpRec."Project Element" := ProjectElement;
      HelpRec.Description := EstLineRec.Description;
      HelpRec."Time Quantity" := EstLineRec."Time Quantity";
      HelpRec."Unit of Time" := EstLineRec."Unit of Time";
      HelpRec.Quantity := EstLineRec.Quantity * EstLineRec."Part Quantity";  //db, 05-03-15: C019184
      IF EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" " THEN
        HelpRec.Quantity := HelpRec.Quantity * EstLineRec."Surcharge %"/100;
      HelpRec."Unit of Measure" := EstLineRec."Unit of Measure";
      IF EstLineRec."Cum. Adj. Factor Hours" <> 0 THEN
        HelpRec.Norm := EstLineRec.Norm * EstLineRec."Cum. Adj. Factor Hours"
      ELSE
        HelpRec.Norm := EstLineRec.Norm;
      IF EstLineRec."Cost Type (Hours)" = EstLineRec."Cost Type (Hours)"::Plant THEN BEGIN  //DP01047
        HelpRec.Norm := 0;
        HelpRec."Norm (Plant)" := EstLineRec.Norm;
      END;
      HelpRec."Rate Code" := EstLineRec."Rate Code";
      HelpRec.Rate := EstLineRec."Cost Rate";
      HelpRec."Wage Component" := EstLineRec."Wage Component";  //DP00236
      IF EstLineRec."Cum. Adj. Factor Price" = 0 THEN
        EstLineRec."Cum. Adj. Factor Price" := 1;  //db, 25-08-15
      //DP00381.sn
      IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Material THEN
        HelpRec."Material Price" := EstLineRec."Nett Cost Price" * EstLineRec."Cum. Adj. Factor Price";
      IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Subcontracting THEN
        HelpRec."Subcontracting Price" := EstLineRec."Nett Cost Price" * EstLineRec."Cum. Adj. Factor Price";
      IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Plant THEN
        HelpRec."Plant Price" := EstLineRec."Nett Cost Price" * EstLineRec."Cum. Adj. Factor Price";
      IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Sundry THEN
        HelpRec."Sundry Cost" := EstLineRec."Nett Cost Price" * EstLineRec."Cum. Adj. Factor Price";
      //DP00381.en
      HelpRec."Gross Price" := EstLineRec."Gross Price";
      HelpRec."Discount %" := EstLineRec."Purchase Discount %";
      HelpRec."Cost Object Labor" := EstLineRec."Cost Object Labor";
      IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Material THEN
        HelpRec."Cost Object Material" := EstLineRec."Cost Object Price";
      IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Subcontracting THEN
        HelpRec."Cost Object Subcontracting" := EstLineRec."Cost Object Price";
      IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Plant THEN
        HelpRec."Cost Object Plant" := EstLineRec."Cost Object Price";
      IF EstLineRec."Cost Type (Price)" = EstLineRec."Cost Type (Price)"::Sundry THEN  //DP00381
        HelpRec."Cost Object Sundry" := EstLineRec."Cost Object Price";
      FillWithAdmiCodeCostobjects(EstLineRec.Admicode);
      HelpRec."Cost Component" := EstLineRec."Cost Component";
      HelpRec."Item No." := EstLineRec."Item No.";
      HelpRec."Basic Item" := EstLineRec."Basic Item";
      HelpRec."Trade Item" := EstLineRec."Trade Item";
      HelpRec."Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
      HelpRec.Manufacturer := EstLineRec.Manufacturer;
      HelpRec."External Text" := EstLineRec."External Text";
      HelpRec."Purchase Route Reference" := EstLineRec."Purchase Route Reference";
      HelpRec."Price Agreement" := EstLineRec."Price Agreement";
      HelpRec.Vendor := EstLineRec.Vendor;
      HelpRec.Subcontractor := EstLineRec.Subcontractor;
      HelpRec.Discipline := EstLineRec.Discipline;
      HelpRec."Trade Speciality" := EstLineRec."Trade Speciality";
      HelpRec."Trade Expertise" := EstLineRec."Trade Expertise";
      HelpRec."Scheme Code" := EstLineRec."Scheme Code";
      HelpRec.Comments := EstLineRec. Comments;
      HelpRec.Supply := EstLineRec.Supply;
      HelpRec."Remarks for Logistics" := EstLineRec."Comments for Logistics";
      HelpRec."Material Sheet" := EstLineRec."Material Sheet";
      IF TransferPurchAction THEN BEGIN
        HelpRec."Purchase Action Mat." := EstLineRec."Purchase Action Mat.";
        HelpRec."Purchase Action Subc." := EstLineRec."Purchase Action Subc." ;
        HelpRec."Purchase Action Plant" := EstLineRec."Purchase Action Plant";
      END;
      //db.sn, 21-02-11: M25087
      HelpRec."BOM Item No." := EstLineRec."BOM Item No.";
      HelpRec."Level BOM" := EstLineRec."Level BOM";
      HelpRec."Original Quantity" := EstLineRec."Original Quantity";
      //db.en, 21-02-11: M25087

      HelpRec."Record Type" := TransferDestination;
      HelpRec."Summary Line" := FALSE;
      HelpRec."Service Order No." := ServOrderNo;  //db, 13-11-09: M16953
      HelpRec."Object Modification No." := ObjectModificationNo;
      HelpRec.Code := GetCode(HelpRec.FIELDNO(Code),
        HelpRec."Estimate No.", HelpRec."Sub-Estimate No.",
        HelpRec."Part Group", HelpRec.Part, 0, EstLineRec.Code);
      HelpRec."Object No." := GetCode(HelpRec.FIELDNO("Object No."),
        HelpRec."Estimate No.", HelpRec."Sub-Estimate No.",
        HelpRec."Part Group", HelpRec.Part, 0, EstLineRec."Object No.");
      HelpRec."Object Customer" := GetCode(HelpRec.FIELDNO("Object Customer"),
        HelpRec."Estimate No.", HelpRec."Sub-Estimate No.",
        HelpRec."Part Group", HelpRec.Part, 0, EstLineRec."Object Customer");
      HelpRec."Surcharge Line" := (EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" ");  //db, 19-05-10: M19082

      HelpRec."Plant Type" := EstLineRec."Plant Type"; //mg, 03-03-11: M24448

      IF CopyPrPlActivities THEN BEGIN
        HelpRec."Project Planning Activity Code" := EstLineRec."Project Planning Activity Code";
        HelpRec."Project Planning Activity No." := HelpRec."Project No." + EstLineRec."Project Planning Activity Code";
      END;

      IF (HelpRec.Quantity <> 0) THEN BEGIN //db, 10-12-09: M16344
        HelpRec.INSERT;
      END ELSE BEGIN
        IF (HelpRec."BOM Item No." <> '') THEN BEGIN  //db, 21-02-11: M25087
          HelpRec.INSERT;
        END ELSE BEGIN
          IF TransferZeroLines THEN
            HelpRec.INSERT;  //db, 20-05-14: T004754
        END;
      END;

      CASE TransferDestination OF
        TransferDestination::Project:
          CheckLastProject;
        TransferDestination::ServOrder:
          FillTmpServOrder;
        TransferDestination::Modification:
          FillTmpObjectModification;
      END;
    END;

    PROCEDURE FillHelpRecipeRec@6();
    VAR
      CurrRecipe@1100525000 : Text[1024];
      SaveHelpRec@1100525002 : Record 11012174;
    BEGIN
      HelpRec.INIT;
      //HelpRec."Estimate No." := RcpLineRec."Estimate No.";
      HelpRec."Estimate No." := EstFrom;
      HelpRec."Sub-Estimate No." := RcpLineRec."Sub-Estimate No.";
      HelpRec."Part Group" := RcpLineRec."Part Group";
      HelpRec.Part := RcpLineRec.Part;
      HelpRec."Estimate Line No." := RcpLineRec."Estimate Line";
      HelpRec."Line No." := HelpLino + 10000;
      HelpLino := HelpRec."Line No.";
      IF SaveRecipeStructure THEN BEGIN  //db, 23-09-14: C016015
        HelpRec."Recipe Group" := RcpLineRec."Recipe Group";
        HelpRec.Recipe := RcpLineRec.Recipe;
        HelpRec."Recipe Line No." := RcpLineRec."Line No.";
        CurrRecipe :=
          HelpRec."Estimate No." + '~' + HelpRec."Sub-Estimate No." + '~' +
          HelpRec."Part Group" + '~' + HelpRec.Part + '~' +
          STRSUBSTNO('%1', HelpRec."Estimate Line No.") + '~' +
          HelpRec."Recipe Group" + '~' + HelpRec.Recipe;
        IF CurrRecipe <> LastRecipe THEN BEGIN
          SaveHelpRec := HelpRec;
          EstLineRec.GET(HelpRec."Estimate No.", HelpRec."Sub-Estimate No.", HelpRec."Part Group", HelpRec.Part,
            HelpRec."Estimate Line No.");
          HelpRec."Line No." := SaveHelpRec."Line No." - 1;
          HelpRec."Recipe Line No." := 0;
          HelpRec."Time Quantity" := EstLineRec."Time Quantity";
          HelpRec.Quantity := EstLineRec.Quantity * EstLineRec."Part Quantity";  //db, 05-03-15: C019184
          HelpRec.Description := EstLineRec.Description;
          HelpRec."Project No." := JobNo;
          HelpRec."Project Element" := ProjectElement;
          HelpRec.INSERT;
          HelpRec := SaveHelpRec;
        END;
        LastRecipe :=
          HelpRec."Estimate No." + '~' + HelpRec."Sub-Estimate No." + '~' +
          HelpRec."Part Group" + '~' + HelpRec.Part + '~' +
          STRSUBSTNO('%1', HelpRec."Estimate Line No.") + '~' +
          HelpRec."Recipe Group" + '~' + HelpRec.Recipe;
      END;
      HelpRec."Project No." := JobNo;
      HelpRec."Project Element" := ProjectElement;
      HelpRec.Description := RcpLineRec.Description;
      HelpRec."Time Quantity" := RcpLineRec."Time Quantity";  //db, 26-02-09: M14329
      HelpRec."Unit of Time" := RcpLineRec."Unit of Time";    //db, 26-02-09: M14329
      IF RcpLineRec."Ignore Recipe Quantity" THEN
        HelpRec.Quantity := RcpLineRec.Quantity * EstLineRec."Part Quantity"
      ELSE
        HelpRec.Quantity := RcpLineRec.Quantity * EstLineRec.Quantity * EstLineRec."Part Quantity";
      IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
        HelpRec.Quantity := HelpRec.Quantity * RcpLineRec."Surcharge %"/100;
      HelpRec."Unit of Measure" := RcpLineRec."Unit of Measure";
      IF RcpLineRec."Cum. Adj. Factor Hours" <> 0 THEN
        HelpRec.Norm := RcpLineRec.Norm * RcpLineRec."Cum. Adj. Factor Hours"
      ELSE
        HelpRec.Norm := RcpLineRec.Norm;
      IF RcpLineRec."Cost Type (Hours)" = RcpLineRec."Cost Type (Hours)"::Plant THEN BEGIN  //DP01047
        HelpRec.Norm := 0;
        HelpRec."Norm (Plant)" := RcpLineRec.Norm;
      END;
      HelpRec."Rate Code" := RcpLineRec."Rate Code";
      HelpRec.Rate := RcpLineRec."Cost Rate";
      HelpRec."Wage Component" := RcpLineRec."Wage Component";  //DP00236
      IF RcpLineRec."Cum. Adj. Factor Price" = 0 THEN
        RcpLineRec."Cum. Adj. Factor Price" := 1;  //db, 25-08-15
      //DP00381.sn
      IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Material THEN
        HelpRec."Material Price" := RcpLineRec."Nett Cost Price" * RcpLineRec."Cum. Adj. Factor Price";
      IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting THEN
        HelpRec."Subcontracting Price" := RcpLineRec."Nett Cost Price" * RcpLineRec."Cum. Adj. Factor Price";
      IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Plant THEN
        HelpRec."Plant Price" := RcpLineRec."Nett Cost Price" * RcpLineRec."Cum. Adj. Factor Price";
      IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Sundry THEN
        HelpRec."Sundry Cost" := RcpLineRec."Nett Cost Price" * RcpLineRec."Cum. Adj. Factor Price";
      //DP00381.en
      HelpRec."Gross Price" := RcpLineRec."Gross Price";
      HelpRec."Discount %" := RcpLineRec."Purchase Discount %";
      HelpRec."Cost Object Labor" := RcpLineRec."Cost Object Labor";
      IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Material THEN
        HelpRec."Cost Object Material" := RcpLineRec."Cost Object Price";
      IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting THEN
        HelpRec."Cost Object Subcontracting" := RcpLineRec."Cost Object Price";
      IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Plant THEN
        HelpRec."Cost Object Plant" := RcpLineRec."Cost Object Price";
      IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Sundry THEN  //DP00381
        HelpRec."Cost Object Sundry" := RcpLineRec."Cost Object Price";
      FillWithAdmiCodeCostobjects(RcpLineRec.Admicode);
      HelpRec."Cost Component" := RcpLineRec."Cost Component";
      HelpRec."Item No." := RcpLineRec."Item No.";
      HelpRec."Basic Item" := RcpLineRec."Basic Item";
      HelpRec."Trade Item" := RcpLineRec."Trade Item";
      HelpRec."Vendor (Trade Item)" := RcpLineRec."Vendor (Trade Item)";
      HelpRec.Manufacturer := RcpLineRec.Manufacturer;
      HelpRec."External Text" := RcpLineRec."External Text";
      HelpRec."Purchase Route Reference" := RcpLineRec."Purchase Route Reference";
      HelpRec."Price Agreement" := RcpLineRec."Price Agreement";
      HelpRec.Vendor := RcpLineRec.Vendor;
      HelpRec.Subcontractor := RcpLineRec.Subcontractor;
      HelpRec.Discipline := RcpLineRec.Discipline;
      HelpRec."Trade Speciality" := RcpLineRec."Trade Speciality";
      HelpRec."Trade Expertise" := RcpLineRec."Trade Expertise";
      HelpRec."Scheme Code" := RcpLineRec."Scheme Code";
      HelpRec.Comments := RcpLineRec. Comments;
      HelpRec.Supply := RcpLineRec.Supply;
      HelpRec."Remarks for Logistics" := RcpLineRec."Comments for Logistics";
      HelpRec."Material Sheet" := RcpLineRec."Material Sheet";
      IF TransferPurchAction THEN BEGIN
        HelpRec."Purchase Action Mat." := RcpLineRec."Purchase Action Mat.";
        HelpRec."Purchase Action Subc." := RcpLineRec."Purchase Action Subc." ;
        HelpRec."Purchase Action Plant" := RcpLineRec."Purchase Action Plant";
      END;

      HelpRec."Record Type" := TransferDestination;
      HelpRec."Summary Line" := FALSE;
      HelpRec."Service Order No." := ServOrderNo;  //db, 13-11-09: M16953
      HelpRec."Object Modification No." := ObjectModificationNo;
      HelpRec.Code := GetCode(HelpRec.FIELDNO(Code),
        HelpRec."Estimate No.", HelpRec."Sub-Estimate No.",
        HelpRec."Part Group", HelpRec.Part, HelpRec."Estimate Line No.", RcpLineRec.Code);
      HelpRec."Object No." := GetCode(HelpRec.FIELDNO("Object No."),
        HelpRec."Estimate No.", HelpRec."Sub-Estimate No.",
        HelpRec."Part Group", HelpRec.Part, HelpRec."Estimate Line No.", '');
      HelpRec."Object Customer" := GetCode(HelpRec.FIELDNO("Object Customer"),
        HelpRec."Estimate No.", HelpRec."Sub-Estimate No.",
        HelpRec."Part Group", HelpRec.Part, HelpRec."Estimate Line No.", '');
      HelpRec."Surcharge Line" := (RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" ");  //db, 19-05-10: M19082

      HelpRec."Plant Type" := RcpLineRec."Plant Type";  //mg, 03-03-11: M24448

      IF CopyPrPlActivities THEN BEGIN
        HelpRec."Project Planning Activity Code" := RcpLineRec."Project Planning Activity Code";
        HelpRec."Project Planning Activity No." := HelpRec."Project No." + RcpLineRec."Project Planning Activity Code";
      END;

      IF HandleEntityNo THEN
        HelpRec."Entity No." := AssemblyYardNumberObject."Entity No.";  //DP00481

      IF (HelpRec.Quantity <> 0) THEN  //db, 10-12-09: M16344
        HelpRec.INSERT;

      IF TransferDestination = TransferDestination::Project THEN
        CheckLastProject;

      IF TransferDestination = TransferDestination::ServOrder THEN
        FillTmpServOrder;
    END;

    PROCEDURE FillHelpSummaryRec@9(SumLineRec@1100485000 : Record 11012171);
    VAR
      DimValRec@11012000 : Record 349;
      DimMgt@11012001 : Codeunit 408;
      AdjustFactor@1210190000 : Integer;
    BEGIN
      EstSetup.GET;  //db, 13-12-07: also called for transfer estimate to serviceorder
      JobSetup.GET;

      AdjustFactor := 0;

      HelpRec.INIT;
      //HelpRec."Estimate No." := SumLineRec."Estimate No.";
      HelpRec."Estimate No." := EstFrom;
      HelpRec."Line No." := HelpLino + 10000;
      HelpLino := HelpRec."Line No.";
      HelpRec."Project No." := JobNo;
      HelpRec."Project Element" := ProjectElement;
      HelpRec.Description := SumLineRec.Description;
      HelpRec."Cost Component" := SumLineRec."Cost Component";
      HelpRec."Wage Component" := SumLineRec."Wage Component";
      HelpRec.Quantity := 1;
      HelpRec."Time Quantity" := 1;

      IF SumLineRec."Cost Object" = '' THEN BEGIN  //db, 14-05-08: M11119
        EstSetup.TESTFIELD("Absence Value Sundry Cost");
        SumLineRec."Cost Object" := EstSetup."Absence Value Sundry Cost";
      END;
      DimMgt.GetDimValueRec(2, SumLineRec."Cost Object", DimValRec, TRUE, JobNo);

      CASE DimValRec."Cost Type" OF
        DimValRec."Cost Type"::Labor:
          BEGIN
            AdjustFactor := AdjustFactor + 1;
            HelpRec."Cost Object Labor" := DimValRec.Code;
            HelpRec.Norm := 1;
            HelpRec.Rate := SumLineRec.Amount;

            IF SumLineRec."Adjustment Factor Hours" <> 0 THEN BEGIN
              AdjustFactor := AdjustFactor - 1;
              HelpRec.Description :=
                COPYSTR((STRSUBSTNO(Text012, SumLineRec."Adjustment Factor Hours") + SumLineRec.Description),
                1, MAXSTRLEN(HelpRec.Description));
              HelpRec.Quantity := SumLineRec.Hours - (SumLineRec.Hours / SumLineRec."Adjustment Factor Hours");
              HelpRec.Rate := SumLineRec.Amount - (SumLineRec.Amount / SumLineRec."Adjustment Factor Hours");
              IF HelpRec.Quantity <> 0 THEN
                HelpRec.Rate := HelpRec.Rate/ HelpRec.Quantity;
            END;

            IF SumLineRec."Adjustment Factor Hours" = 1 THEN EXIT;

            IF SumLineRec.Hours <> 0 THEN BEGIN
              IF (SumLineRec.Type = SumLineRec.Type::"Surcharge Hours") OR
                 (SumLineRec.Type = SumLineRec.Type::"Additional Costs") THEN
              BEGIN
                AdjustFactor := AdjustFactor - 1;
                HelpRec.Quantity := SumLineRec.Hours;
                HelpRec.Rate := SumLineRec.Amount / SumLineRec.Hours;
              END;
            END;

            HelpRec.Quantity := ROUND(HelpRec.Quantity, 0.01);
            HelpRec.Rate := ROUND(HelpRec.Rate, 0.01);
          END;
        DimValRec."Cost Type"::Material:
          BEGIN
            HelpRec."Cost Object Material" := DimValRec.Code;
            HelpRec."Material Price" := ROUND(SumLineRec.Amount, 0.01);
          END;
        DimValRec."Cost Type"::Subcontracting:
          BEGIN
            HelpRec."Cost Object Subcontracting" := DimValRec.Code;
            HelpRec."Subcontracting Price" := ROUND(SumLineRec.Amount, 0.01);
          END;
        DimValRec."Cost Type"::Plant:
          BEGIN
            HelpRec."Cost Object Plant" := DimValRec.Code;
            HelpRec."Plant Price" := ROUND(SumLineRec.Amount, 0.01);
          END;
        DimValRec."Cost Type"::Sundry:
          BEGIN
            HelpRec."Cost Object Sundry" := DimValRec.Code;
            HelpRec."Sundry Cost" := ROUND(SumLineRec.Amount, 0.01);
          END;
      END;

      HelpRec."Record Type" := TransferDestination;
      HelpRec."Summary Line" := TRUE;
      HelpRec."Contract Amount" := SumLineRec."Contract Amount";
      HelpRec.Code := GetCode(HelpRec.FIELDNO(Code), HelpRec."Estimate No.", HelpRec."Sub-Estimate No.", '', '', 0, '');
      HelpRec."Overhead Surcharge" := SumLineRec."Overhead Surcharge"; //M20030

      HelpRec.INSERT;

      IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Labor) AND (AdjustFactor <> 0) THEN BEGIN
        HelpRec."Line No." := HelpLino + 10000;
        HelpLino := HelpRec."Line No.";
        HelpRec.Quantity := -1 * AdjustFactor;
        HelpRec.Rate := 0;
        HelpRec.Description := Text011;
        HelpRec."Cost Object Labor" := EstSetup."Absence Value Labor";
        HelpRec.INSERT;
      END;

      IF TransferDestination = TransferDestination::Project THEN
        CheckLastProject;
    END;

    PROCEDURE FillProjBudgetRec@7(CostType@1210190003 : Integer);
    VAR
      PurchActionSave@1100525000 : Code[10];
      lProjBudgetRec@1100525001 : Record 11012001;
      JobsSetup@1100525002 : Record 315;
      EstimateLine@1100525003 : Record 11072072;
      ProjectPlanningActivity@1210190000 : Record 11012431;
    BEGIN
      ProjBudgetRec.INIT;
      ProjBudgetRec."Project No." := ProjTo;
      ProjBudgetRec.Adjustment :=  AdjTo;
      ProjBudgetRec."Extension Contract" := ExtTo;
      ProjBudgetRec.Option := OptTo;
      ProjBudgetRec."Line No." := BudgetLino + 10000;
      // Call 19544 sn
      //Check if line exists (possible with large budget, goal is to insert lines before summary
      //But sometimes there are too much lines so the summary lines must be stepped over.
      IF lProjBudgetRec.GET(ProjTo, AdjTo, ExtTo, OptTo, ProjBudgetRec."Line No.") THEN BEGIN
        REPEAT
          ProjBudgetRec."Line No." := BudgetLino + 10000;
          BudgetLino := ProjBudgetRec."Line No.";
        UNTIL NOT lProjBudgetRec.GET(ProjTo, AdjTo, ExtTo, OptTo, ProjBudgetRec."Line No.")
      END;
      //BudgetLino := ProjBudgetRec."Line No.";
      // Call 19544 en
      ProjBudgetRec.Element := HelpRec."Project Element";
      IF ProjBudgetRec.Option = '' THEN
        ProjBudgetRec.VALIDATE(Element);
      SplitDesc(HelpRec.Description, MAXSTRLEN(ProjBudgetRec.Description));
      ProjBudgetRec.Description := desc1;
      ProjBudgetRec."Description 2" := desc2;
      ProjBudgetRec."Unit of Measure" :=  HelpRec."Unit of Measure";
      ProjBudgetRec.Quantity := HelpRec.Quantity;
      ProjBudgetRec."Time Quantity" := HelpRec."Time Quantity";
      ProjBudgetRec."Unit of Time" := HelpRec."Unit of Time";
      ProjBudgetRec.VALIDATE("External Text", HelpRec."External Text");
      ProjBudgetRec."Estimate No." := HelpRec."Estimate No.";
      IF TransferSubEstimate THEN
        ProjBudgetRec."Sub-Estimate No." := HelpRec."Sub-Estimate No.";
      IF SaveRecipeStructure AND (HelpRec.Recipe <> '') THEN BEGIN  //db, 23-09-14: C016015
        ProjBudgetRec."Recipe Group" := HelpRec."Recipe Group";
        ProjBudgetRec.Recipe := HelpRec.Recipe;
        IF HelpRec."Recipe Line No." = 0 THEN BEGIN
          RecipeHeaderLine := ProjBudgetRec."Line No.";
          ProjBudgetRec."Source Type" := ProjBudgetRec."Source Type"::"Recipe Header";
        END ELSE BEGIN
          ProjBudgetRec."Attached to Recipe Line" := RecipeHeaderLine;
          ProjBudgetRec."Source Type" := ProjBudgetRec."Source Type"::"Recipe Line";
        END;
      END;
      //db.sn, 21-02-11: M25087
      ProjBudgetRec."BOM Item No." := HelpRec."BOM Item No.";
      ProjBudgetRec."Level BOM" := HelpRec."Level BOM";
      ProjBudgetRec."Original Quantity" := HelpRec."Original Quantity";
      IF HelpRec."BOM Item No." <> '' THEN BEGIN
        IF HelpRec."Level BOM" = 0 THEN
          BomLine := ProjBudgetRec."Line No."
        ELSE
          ProjBudgetRec."Part of Line" := BomLine;
      END;
      //db.en, 21-02-11: M25087

      IF HelpRec."Project Planning Activity Code" <> '' THEN BEGIN
        ProjectPlanningActivity."Project No." := ProjTo;
        ProjectPlanningActivity.VALIDATE(Code, HelpRec."Project Planning Activity Code");
        IF NOT ProjectPlanningActivity.INSERT(TRUE) THEN;

        ProjBudgetRec."Project Planning Activity No." := ProjectPlanningActivity."No.";
      END;

      CASE CostType OF
        1:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Labor;
            IF HelpRec."Cost Object Labor" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Labor"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            ProjBudgetRec.Norm := HelpRec.Norm;
            ProjBudgetRec.Rate := HelpRec.Rate;
            ProjBudgetRec."Wage Component" := HelpRec."Wage Component";  //DP00236
          END;
        2:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Material;
            IF HelpRec."Cost Object Material" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Material"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ProjBudgetRec.Price := HelpRec."Material Price";
            ProjBudgetRec.Manufacturer := HelpRec.Manufacturer;
            ProjBudgetRec."Item No." := HelpRec."Item No.";
            ProjBudgetRec."Basic Item" := HelpRec."Basic Item";
            ProjBudgetRec."Trade Item" := HelpRec."Trade Item";
            ProjBudgetRec."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
            ProjBudgetRec."Scheme Code" := HelpRec."Scheme Code";
            ProjBudgetRec.Comments := HelpRec.Comments;
            ProjBudgetRec.Supply := HelpRec.Supply;
            ProjBudgetRec."Comments for Logistics" := HelpRec."Remarks for Logistics";
            ProjBudgetRec."Material Sheet" := HelpRec."Material Sheet";
            IF TransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action Mat.";
          END;
        3:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Subcontracting;
            IF HelpRec."Cost Object Subcontracting" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Subcontracting"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ProjBudgetRec.Price := HelpRec."Subcontracting Price";
            IF TransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action Subc.";
          END;
        4:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Plant;
            IF HelpRec."Cost Object Plant" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Plant"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ProjBudgetRec.Price := HelpRec."Plant Price";
            IF TransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action Plant";
            ProjBudgetRec."Plant Type" := HelpRec."Plant Type"; //mg, 03-03-11: M24448
            IF HelpRec."Norm (Plant)"<> 0 THEN   //DP01047
              ProjBudgetRec.VALIDATE(Norm, HelpRec."Norm (Plant)");
          END;
        5:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Sundry;
            IF HelpRec."Cost Object Sundry" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Sundry Cost"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Sundry";
            ProjBudgetRec.Price := HelpRec."Sundry Cost";
          END;
      END;

      IF ProjBudgetRec."Cost Type" = ProjBudgetRec."Cost Type"::Subcontracting THEN  //db, 10-08-10: M21818
        ProjBudgetRec.Vendor := HelpRec.Subcontractor
      ELSE
        ProjBudgetRec.Vendor := HelpRec.Vendor;

      ProjBudgetRec."Cost Component" :=
        GetCostComponent(HelpRec."Cost Component", ProjBudgetRec."Cost Object", ProjBudgetRec."Project No.", '', FALSE);

      IF HelpRec."Discount %" <> 0 THEN BEGIN
        ProjBudgetRec."Discount %" := HelpRec."Discount %";
        ProjBudgetRec."Gross Price" := HelpRec."Gross Price";
      END;

      ProjBudgetRec.CalcTotals;

      IF HandleEntityNo THEN
        ProjBudgetRec."Entity No." := HelpRec."Entity No."; //DP00481

      IF ProjBudgetRec.Option = '' THEN BEGIN
        PurchActionSave := ProjBudgetRec."Purchase Action";

        //mg.sn, 04-01-11: M24467
        JobsSetup.GET;
        IF JobsSetup."Cost Component Mandatory" AND (ProjBudgetRec."Cost Component" = '') AND (ProjBudgetRec.Amount <> 0) THEN
          IF EstimateLine.GET(HelpRec."Estimate No.", HelpRec."Sub-Estimate No.", HelpRec."Part Group", HelpRec.Part,
            HelpRec."Estimate Line No.") THEN
            IF EstimateLine.Recipe <> '' THEN
              EstimateLine.FIELDERROR("Cost Component", STRSUBSTNO(Text015, EstimateLine.Recipe, HelpRec.Description))
            ELSE
              EstimateLine.TESTFIELD("Cost Component");
        //mg.en, 04-01-11: M24467
        ProjBudgetRec.INSERT(TRUE);

        //DP00883.sn
        IF NOT EstRec.GET(ProjBudgetRec."Estimate No.") THEN EstRec.INIT;  //db, 15-02-16: procedure also used for transfer sales lines to assembly project
        ProjBudgetRec."Currency Code" := EstRec."Currency Code";
        //-currency should be assigned before execute function CalcTotals, but will be reset by OnInsert-trigger
        //-update project data is optional and executed after insert of budget lines: so exchange rate might not be present
        //-recalculate fcy-fields afterwards by function UpdateBudgetRate
        //DP00883.en

        ProjBudgetRec."Purchase Action" := PurchActionSave;
        IF ProjBudgetRec."Purchase Action" <> '' THEN BEGIN
          CheckPurchaseAction();
          ProjBudgetRec.UpdatePurchActionStatusInLine();
        END;
        ProjBudgetRec."Price Agreement" := HelpRec."Price Agreement";
        //ProjBudgetRec.Vendor := HelpRec.Vendor;  //db, 10-08-10: M21818
        IF (HelpRec."Purchase Route Reference" <> '') THEN BEGIN
          ProjBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
          RouteRefMgtCU.UpdateQuoteLinesFromBudget(ProjBudgetRec);
        END;
        IF HelpRec."Overhead Surcharge" THEN BEGIN
          ProjBudgetRec."Surcharge Amnt from Summary" := ProjBudgetRec.Amount;  //M20030
          ProjBudgetRec."Overhead Surcharge from Summ." := TRUE;
        END;
        ProjBudgetRec.MODIFY;
      END;
    END;

    PROCEDURE CheckProjBudgetPresent@5(CostType@11012000 : Integer) : Boolean;
    BEGIN
      IF OptTo <> '' THEN
        EXIT;

      IF HelpRec."BOM Item No." <> '' THEN EXIT(FALSE);  //db, 21-02-11: M25087
      IF SaveRecipeStructure AND (HelpRec.Recipe <> '') THEN EXIT(FALSE);  //db, 23-09-14: C016015

      ProjBudgetRec.SETRANGE(Norm);
      ProjBudgetRec.SETRANGE(Rate);
      ProjBudgetRec.SETRANGE(Price);
      ProjBudgetRec.SETRANGE("Item No.");
      ProjBudgetRec.SETRANGE("Basic Item");
      ProjBudgetRec.SETRANGE("Trade Item");
      ProjBudgetRec.SETRANGE("Vendor (Trade Item)");
      ProjBudgetRec.SETRANGE(Manufacturer);
      ProjBudgetRec.SETRANGE("Scheme Code");
      ProjBudgetRec.SETRANGE(Comments);
      ProjBudgetRec.SETRANGE(Supply);
      ProjBudgetRec.SETRANGE("Comments for Logistics");
      ProjBudgetRec.SETRANGE("Material Sheet");
      ProjBudgetRec.SETRANGE("Purchase Action");

      CASE CostType OF
        1:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Labor);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Labor");
            ProjBudgetRec.SETRANGE(Norm, HelpRec.Norm);
            ProjBudgetRec.SETRANGE(Rate, HelpRec.Rate);
            ProjBudgetRec.SETRANGE("Wage Component", HelpRec."Wage Component");  //DP00236
          END;
        2:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Material);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Material");
            ProjBudgetRec.SETRANGE(Price, HelpRec."Material Price");
            ProjBudgetRec.SETRANGE("Item No.", HelpRec."Item No.");
            ProjBudgetRec.SETRANGE("Basic Item", HelpRec."Basic Item");
            ProjBudgetRec.SETRANGE("Trade Item", HelpRec."Trade Item");
            ProjBudgetRec.SETRANGE("Vendor (Trade Item)", HelpRec."Vendor (Trade Item)");
            ProjBudgetRec.SETRANGE(Manufacturer, HelpRec.Manufacturer);
            ProjBudgetRec.SETRANGE("Scheme Code", HelpRec."Scheme Code");
            ProjBudgetRec.SETRANGE(Comments, HelpRec.Comments);
            ProjBudgetRec.SETRANGE(Supply, HelpRec.Supply);
            ProjBudgetRec.SETRANGE("Comments for Logistics", HelpRec."Remarks for Logistics");
            ProjBudgetRec.SETRANGE("Material Sheet", HelpRec."Material Sheet");
            IF TransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action Mat.");
            IF HandleEntityNo THEN
              ProjBudgetRec.SETRANGE("Entity No.", HelpRec."Entity No.");   //DP00481

          END;
        3:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Subcontracting);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Subcontracting");
            ProjBudgetRec.SETRANGE(Price, HelpRec."Subcontracting Price");
            IF TransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action Subc.");
            IF HandleEntityNo THEN
              ProjBudgetRec.SETRANGE("Entity No.", HelpRec."Entity No.");   //DP00481

          END;
        4:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Plant);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Plant");
            ProjBudgetRec.SETRANGE(Price, HelpRec."Plant Price");
            IF TransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action Plant");
          END;
        5:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Sundry);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Sundry");
            ProjBudgetRec.SETRANGE(Price, HelpRec."Sundry Cost");
          END;
      END;

      ProjBudgetRec.SETRANGE("Cost Component",
        GetCostComponent(HelpRec."Cost Component", HelpRec."Cost Object", HelpRec."Project No.", '', FALSE));

      SplitDesc(HelpRec.Description, MAXSTRLEN(ProjBudgetRec.Description));
      ProjBudgetRec.SETRANGE(Description, desc1);
      ProjBudgetRec.SETRANGE("Description 2", desc2);
      ProjBudgetRec.SETRANGE("Unit of Measure", HelpRec."Unit of Measure");
      ProjBudgetRec.SETRANGE("Unit of Time", HelpRec."Unit of Time");
      ProjBudgetRec.SETRANGE(Element, HelpRec."Project Element");
      ProjBudgetRec.SETRANGE("Project Planning Activity No.", HelpRec."Project Planning Activity No.");
      ProjBudgetRec.SETRANGE("External Text", HelpRec."External Text");
      ProjBudgetRec.SETRANGE("Purchase Route Reference", HelpRec."Purchase Route Reference");
      ProjBudgetRec.SETRANGE("Price Agreement", HelpRec."Price Agreement");
      ProjBudgetRec.SETRANGE(Vendor, HelpRec.Vendor);
      ProjBudgetRec.SETRANGE("Discount %", HelpRec."Discount %");
      ProjBudgetRec.SETRANGE(Advised, FALSE);
      ProjBudgetRec.SETRANGE("Estimate No.", HelpRec."Estimate No.");
      IF TransferSubEstimate THEN
        ProjBudgetRec.SETRANGE("Sub-Estimate No.", HelpRec."Sub-Estimate No.");
      ProjBudgetRec.SETRANGE("Overhead Surcharge from Summ.", HelpRec."Overhead Surcharge");  //M20030

      IF ProjBudgetRec.FINDSET(TRUE, FALSE) THEN //Later on table is modified
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateProjBudget@8();
    BEGIN
      ProjBudgetRec.Quantity := ProjBudgetRec.Quantity + HelpRec.Quantity;
      ProjBudgetRec.CalcTotals;
      IF ProjBudgetRec."Overhead Surcharge from Summ." THEN
        ProjBudgetRec."Surcharge Amnt from Summary" := ProjBudgetRec.Amount;  //M20030
      ProjBudgetRec.MODIFY(TRUE);
    END;

    PROCEDURE UpdateProjRec@1210190001();
    VAR
      ProjCustRec@1100485000 : Record 11012005;
    BEGIN
      EstRec.GET(EstFrom);
      ProjRec.GET(ProjTo);

      //DP00883.sn
      ProjRec."Currency Code" := EstRec."Currency Code";
      ProjRec."Reference Date (Currency)" := EstRec."Reference Date (Rate)";
      //DP00883.en

      IF ProjRec.Description = '' THEN ProjRec.Description := EstRec.Description;
      IF ProjRec."Description 2" = '' THEN ProjRec."Description 2" := EstRec."Description 2";  //db, 20-01-10
      IF ProjRec.Address = '' THEN ProjRec.Address := EstRec.Address;
      IF ProjRec."Post Code" = '' THEN ProjRec."Post Code" := EstRec."Post Code";
      IF ProjRec.City = '' THEN ProjRec.City := EstRec.City;
      IF ProjRec."Territory Code" = '' THEN ProjRec."Territory Code" := EstRec."Territory Code";
      IF ProjRec.Discipline = '' THEN ProjRec.Discipline := EstRec.Discipline;  // Melding 18158
      IF ProjRec.Type = '' THEN ProjRec.Type := EstRec.Type;
      IF ProjRec."Bill-to Customer No." = '' THEN ProjRec."Bill-to Customer No." := EstRec."Customer No.";
      //db.sn, 01-10-10: M21819
      IF (ProjRec."Starting Date" = 0D) OR (EstRec."Starting Date" <> 0D) THEN BEGIN
        ProjRec."Starting Date" := EstRec."Starting Date";
        ProjRec.UpdateProjectStartElement;
      END;
      IF (ProjRec."Ending Date" = 0D) OR (EstRec."Ending Date" <> 0D) THEN BEGIN
        ProjRec."Ending Date" := EstRec."Ending Date";
        ProjRec.UpdateProjectStartElement;
      END;
      //db.en, 01-10-10: M21819
      IF ProjRec.Estimator = '' THEN ProjRec.Estimator := EstRec.Estimator;
      IF ProjRec."Purchaser Code" = '' THEN ProjRec."Purchaser Code" := EstRec."Purchaser Code";
      IF ProjRec."Reference Date (Item)" = 0D THEN ProjRec."Reference Date (Item)" := EstRec."Reference Date (Item)";
      IF ProjRec."Purch Discount Term Group 1" = '' THEN
        ProjRec.VALIDATE("Purch Discount Term Group 1", EstRec."Purch Discount Term Group 1");  //db, 08-08-13: C008930
      IF ProjRec."Purch Discount Term Group 2" = '' THEN
        ProjRec.VALIDATE("Purch Discount Term Group 2" , EstRec."Purch Discount Term Group 2");  //db, 08-08-13: C008930
      ProjRec.MODIFY(TRUE);

      IF ProjRec."Bill-to Customer No." <> '' THEN BEGIN
        IF NOT ProjCustRec.GET(ProjRec."No.", ProjRec."Bill-to Customer No.") THEN BEGIN
          ProjCustRec.INIT;
          ProjCustRec."Project No." := ProjRec."No.";
          ProjCustRec.VALIDATE(Principal, ProjRec."Bill-to Customer No.");
          ProjCustRec.INSERT(TRUE);
        END;
      END;

      //DP00883.sn
      IF EstRec."Currency Code" <> '' THEN BEGIN
        UpdateExchangeRate(EstRec."No.", ProjRec."No.");
        ProjRec.UpdateBudgetRate;
      END;
      //DP00883.en

      GenerateProjRespPerson(EstRec."No.", ProjRec."No.");  //db, 30-08-13: C007282
    END;

    LOCAL PROCEDURE UpdateExchangeRate@1100525026(EstimateNo@1100525002 : Code[20];ProjectNo@1100525003 : Code[20]);
    VAR
      ProjectExchangeRate@1100525000 : Record 11020628;
      EstimateExchangeRate@1100525001 : Record 11229770;
    BEGIN
      //DP00883
      EstimateExchangeRate.SETRANGE("Estimate No.", EstimateNo);
      IF EstimateExchangeRate.FINDSET THEN BEGIN
        REPEAT
          IF NOT ProjectExchangeRate.GET(ProjectNo, EstimateExchangeRate."Currency Code", EstimateExchangeRate."Starting Date") THEN BEGIN
            ProjectExchangeRate.INIT;
            ProjectExchangeRate.TRANSFERFIELDS( EstimateExchangeRate);
            ProjectExchangeRate."Project No." := ProjectNo;
            ProjectExchangeRate.INSERT;
          END ELSE BEGIN
            ProjectExchangeRate.TRANSFERFIELDS( EstimateExchangeRate);
            ProjectExchangeRate."Project No." := ProjectNo;
            ProjectExchangeRate.MODIFY;
          END;
        UNTIL EstimateExchangeRate.NEXT = 0;
      END;
    END;

    PROCEDURE AssignOptionBudget@3();
    VAR
      LastLino@11012000 : Integer;
      OptionBudgetRec@1210190005 : Record 11012503;
    BEGIN
      OptionBudgetRec.SETRANGE("Project No.", ProjBudgetRec."Project No.");
      OptionBudgetRec.SETFILTER("Plot No.",'%1', PlotTo);
      OptionBudgetRec.SETRANGE("House Model", HouseModelTo);
      OptionBudgetRec.SETRANGE("Main Group", MainGroupTo);
      OptionBudgetRec.SETRANGE(Group, GroupTo);
      OptionBudgetRec.SETRANGE("Sub Group", SubGroupTo);
      OptionBudgetRec.SETRANGE(Option, ProjBudgetRec.Option);
      IF NOT OptionBudgetRec.FINDLAST THEN
        LastLino := 10000
      ELSE
        LastLino := OptionBudgetRec."Line No." + 10000;

      OptionBudgetRec.INIT;
      OptionBudgetRec."Project No." := ProjBudgetRec."Project No.";
      OptionBudgetRec."Plot No." := PlotTo;
      OptionBudgetRec."House Model" := HouseModelTo;
      OptionBudgetRec."Main Group" := MainGroupTo;
      OptionBudgetRec.Group := GroupTo;
      OptionBudgetRec."Sub Group" := SubGroupTo;
      OptionBudgetRec.Option := ProjBudgetRec.Option;
      OptionBudgetRec.Element := ProjBudgetRec.Element;
      OptionBudgetRec.Chapter := ProjBudgetRec.Chapter;
      OptionBudgetRec.Paragraph := ProjBudgetRec.Paragraph;
      OptionBudgetRec."Cost Object" := ProjBudgetRec."Cost Object";
      OptionBudgetRec."Cost Component" := ProjBudgetRec."Cost Component";
      OptionBudgetRec.Description := ProjBudgetRec.Description;
      OptionBudgetRec."Description 2" := ProjBudgetRec."Description 2";
      OptionBudgetRec.Quantity := ProjBudgetRec.Quantity;
      OptionBudgetRec."Unit of Measure" := ProjBudgetRec."Unit of Measure";
      OptionBudgetRec.Norm := ProjBudgetRec.Norm;
      OptionBudgetRec.Rate := ProjBudgetRec.Rate;
      OptionBudgetRec.Hours := ProjBudgetRec.Hours;
      OptionBudgetRec.Amount := ProjBudgetRec.Amount;
      OptionBudgetRec."Line No." := LastLino;
      OptionBudgetRec."Total Amount" := ProjBudgetRec."Total Amount";
      OptionBudgetRec."Total Hours" := ProjBudgetRec."Total Hours";
      OptionBudgetRec."Cost Type" := ProjBudgetRec."Cost Type";
      OptionBudgetRec.Price := ProjBudgetRec.Price;
      OptionBudgetRec."Gross Price" := ProjBudgetRec."Gross Price";
      OptionBudgetRec."Discount %" := ProjBudgetRec."Discount %";
      OptionBudgetRec."Time Quantity" := ProjBudgetRec."Time Quantity";
      OptionBudgetRec."Unit of Time" := ProjBudgetRec."Unit of Time";
      OptionBudgetRec."Item No." := ProjBudgetRec."Item No.";
      OptionBudgetRec."Basic Item" := ProjBudgetRec."Basic Item";
      OptionBudgetRec."Trade Item" := ProjBudgetRec."Trade Item";
      OptionBudgetRec."Vendor (Trade Item)" := ProjBudgetRec."Vendor (Trade Item)";
      OptionBudgetRec.Manufacturer := ProjBudgetRec.Manufacturer;
      OptionBudgetRec.INSERT;
      OptionBudgetRec.MODIFY(TRUE);
    END;

    PROCEDURE CostTypeValid@1210190005("Cost Type"@1210190000 : Integer) : Boolean;
    BEGIN
      IF "Cost Type" = 1 THEN
        EXIT((HelpRec.Norm <> 0) OR
             ((HelpRec.Norm = 0) AND
              (HelpRec."Cost Object Labor" <> '') AND
              (TransferZeroLines = TRUE)));

      IF "Cost Type" = 2 THEN
        EXIT((HelpRec."Material Price" <> 0) OR
             ((HelpRec."Material Price" = 0) AND
              (HelpRec."Cost Object Material" <> '') AND
              (TransferZeroLines = TRUE)));

      IF "Cost Type" = 3 THEN
        EXIT((HelpRec."Subcontracting Price" <> 0) OR
             ((HelpRec."Subcontracting Price" = 0) AND
              (HelpRec."Cost Object Subcontracting" <> '') AND
              (TransferZeroLines = TRUE)));

      IF "Cost Type" = 4 THEN
        EXIT((HelpRec."Plant Price" <> 0) OR
             ((HelpRec."Plant Price" = 0) AND
              (HelpRec."Cost Object Plant" <> '') AND
              (TransferZeroLines = TRUE)));

      IF "Cost Type" = 5 THEN
        EXIT((HelpRec."Sundry Cost" <> 0) OR
             ((HelpRec."Sundry Cost" = 0) AND
              (HelpRec."Cost Object Sundry" <> '') AND
              (TransferZeroLines = TRUE)));
    END;

    PROCEDURE SplitDesc@1210190004(lvDesc@1100485000 : Text[100];lvMaxLen@1100485001 : Integer);
    VAR
      sep@1210190000 : Integer;
    BEGIN
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
      END ELSE BEGIN
        IF STRLEN(lvDesc) > lvMaxLen THEN BEGIN
          desc1 := COPYSTR(lvDesc, 1, lvMaxLen);
          desc2 := COPYSTR(lvDesc, lvMaxLen+1, lvMaxLen);
        END ELSE BEGIN
          desc1 := lvDesc;
          desc2 := '';
        END;
      END;

      desc1 := COPYSTR(desc1, 1, lvMaxLen);
      desc2 := COPYSTR(desc2, 1, lvMaxLen);
    END;

    PROCEDURE ProcessRecipeChild@1210190006(lvRcpGrp@1210190001 : Code[20];lvRcp@1210190002 : Code[20];lvQuan@1100525000 : Decimal);
    VAR
      StdRcpLineRec@1210190000 : Record 11020582;
      SaveRcpLineRec@1210190003 : Record 11072075;
    BEGIN
      //db, 18-11-09: M17024
      SaveRcpLineRec.COPY(RcpLineRec);

      StdRcpLineRec.SETRANGE("Recipe Group", lvRcpGrp);
      StdRcpLineRec.SETRANGE(Recipe, lvRcp);
      IF StdRcpLineRec.FINDSET THEN BEGIN
        REPEAT
          RcpLineRec.TRANSFERFIELDS(StdRcpLineRec);  //DP00381
          RcpLineRec."Estimate No." := SaveRcpLineRec."Estimate No.";
          RcpLineRec.Quantity := lvQuan * RcpLineRec.Quantity;
          IF (RcpLineRec."Recipe (Child)" <> '') AND (RcpLineRec."Recipe Exploded" = FALSE) THEN  //db, 28-10-13: DP00381
            ProcessRecipeChild(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)", RcpLineRec.Quantity)
          ELSE
            FillHelpRecipeRec;
        UNTIL StdRcpLineRec.NEXT = 0;
      END;

      RcpLineRec.COPY(SaveRcpLineRec);
    END;

    PROCEDURE CheckLastProject@1100485000();
    BEGIN
      //db, 25-06-07 (melding 8600)
      IF LastProject = '' THEN
        LastProject := HelpRec."Project No.";
      IF LastProject <> HelpRec."Project No." THEN BEGIN
        IF SkipQuestionProject = FALSE THEN BEGIN
          IF NOT CONFIRM(Text013, FALSE) THEN
            ERROR('')
          ELSE
            SkipQuestionProject := TRUE;
        END;
      END;
    END;

    PROCEDURE CopyPartsToTenderElements@1100485002();
    VAR
      ProjCustRec@1100485000 : Record 11012005;
      EstPartRec@1100485001 : Record 11072073;
      TenderElementRec@1100485002 : Record 11012470;
      DummyAmount@1100485005 : Boolean;
    BEGIN
      EstRec.GET(EstFrom);
      ProjRec.GET(ProjTo);

      IF EstRec."Customer No." = '' THEN
        EXIT;

      IF ProjRec."Bill-to Customer No." <> EstRec."Customer No." THEN BEGIN
        IF NOT ProjCustRec.GET(ProjRec."No.",EstRec."Customer No.") THEN BEGIN
          ProjCustRec.INIT;
          ProjCustRec."Project No." := ProjRec."No.";
          ProjCustRec.VALIDATE(Principal, EstRec."Customer No.");
          ProjCustRec.INSERT(TRUE);
        END;
      END;

      EstPartRec.RESET;
      EstPartRec.SETRANGE("Estimate No.", EstFrom);
      IF SubEstFilter <> '' THEN
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);

      IF EstPartRec.FINDSET THEN BEGIN
        ProjCustRec.GET(ProjRec."No.",EstRec."Customer No.");
        IF ProjCustRec."Installm.Motivation Method" <> ProjCustRec."Installm.Motivation Method"::"Element Quantity" THEN  BEGIN
          ProjCustRec."Installm.Motivation Method" := ProjCustRec."Installm.Motivation Method"::"Element Quantity";
          ProjCustRec.MODIFY;
        END;

        //voorlopig Contract Amount vullen
        DummyAmount := FALSE;
        IF ProjCustRec."Contract Amount (LCY)" = 0 THEN BEGIN
          DummyAmount := TRUE;
          ProjCustRec."Contract Amount (LCY)" := 10000;
          ProjCustRec.MODIFY;
        END;

        REPEAT
           TenderElementRec.VALIDATE("Project No.", ProjRec."No.");
           TenderElementRec.VALIDATE(Principal, EstRec."Customer No.");
           TenderElementRec."Contract No."  := '';
           TenderElementRec.FillDefaultSettleExcess();  //C-026862.n
           TenderElementRec."Tender Paragraph OLD" := '';
           TenderElementRec.VALIDATE("No.", EstPartRec.Part);
           IF TenderElementRec.INSERT(TRUE) THEN;  //db,18-11-08: error bij zelfde onderdeel in verschillende deelcalculatie
           TenderElementRec.Description := EstPartRec.Description;
           TenderElementRec.VALIDATE(Quantity, EstPartRec.GetPartQuantity);
           TenderElementRec.VALIDATE("Unit of Measure", EstPartRec."Unit of Measure");
           IF TransferSalesPrice THEN
             TenderElementRec.VALIDATE("Unit Price (LCY)", EstPartRec."Offer Price");
           TenderElementRec.VALIDATE("Settlement Type", EstPartRec."Settlement Type");
           TenderElementRec.MODIFY;
        UNTIL EstPartRec.NEXT = 0;

        //voorlopig Contract Amount weer leeg maken
        IF DummyAmount THEN BEGIN
          ProjCustRec."Contract Amount (LCY)" := 0;
          ProjCustRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE CheckPurchaseAction@1100485005();
    VAR
      lvProjPurchActRec@1100485000 : Record 11012026;
      lvEstPurchActRec@1100485001 : Record 11012366;
      lvVendorsPurchActRec@1100485002 : Record 11012068;
      lvVendorsPurchActRec2@1100485003 : Record 11012068;
      lvPurchaseTextRec@1100485004 : Record 11012067;
      lvPurchaseTextRec2@1100485005 : Record 11012067;
      lvPurchActFeatureRec@1100485006 : Record 11012069;
      lvPurchActFeatureRec2@1100485007 : Record 11012069;
    BEGIN
      IF NOT lvProjPurchActRec.GET(ProjBudgetRec."Project No.", ProjBudgetRec."Purchase Action") THEN BEGIN
        IF NOT lvEstPurchActRec.GET(ProjBudgetRec."Estimate No.", ProjBudgetRec."Purchase Action") THEN BEGIN
          ProjBudgetRec."Purchase Action" := '';
          EXIT;
        END;

        lvProjPurchActRec.TRANSFERFIELDS(lvEstPurchActRec);
        lvProjPurchActRec."Project No." := ProjBudgetRec."Project No.";
        lvProjPurchActRec.Code := lvEstPurchActRec.Code;
        lvProjPurchActRec.INSERT;

        lvVendorsPurchActRec.SETRANGE(Source, lvVendorsPurchActRec.Source::Estimate);
        lvVendorsPurchActRec.SETRANGE("Estimate No.", ProjBudgetRec."Estimate No.");
        lvVendorsPurchActRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
        IF lvVendorsPurchActRec.FINDSET THEN BEGIN
          REPEAT
            lvVendorsPurchActRec2 := lvVendorsPurchActRec;
            lvVendorsPurchActRec2.Source := lvVendorsPurchActRec2.Source::Project;
            lvVendorsPurchActRec2."Estimate No." := '';
            lvVendorsPurchActRec2."Project No." := ProjBudgetRec."Project No.";
            lvVendorsPurchActRec2.INSERT;
          UNTIL lvVendorsPurchActRec.NEXT = 0;
        END;

        lvPurchaseTextRec.SETRANGE("Line Type", lvPurchaseTextRec."Line Type"::"Estimate Purchase Action");
        lvPurchaseTextRec.SETRANGE("No.", ProjBudgetRec."Estimate No.");
        lvPurchaseTextRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
        IF lvPurchaseTextRec.FINDSET THEN BEGIN
          REPEAT
            lvPurchaseTextRec2 := lvPurchaseTextRec;
            lvPurchaseTextRec2."Line Type" := lvPurchaseTextRec2."Line Type"::"Project Purchase Action";
            lvPurchaseTextRec2."No." := ProjBudgetRec."Project No.";
            lvPurchaseTextRec2.INSERT;
          UNTIL lvPurchaseTextRec.NEXT = 0;
        END;

        lvPurchActFeatureRec.SETRANGE(Source, lvPurchActFeatureRec.Source::Estimate);
        lvPurchActFeatureRec.SETRANGE("Estimate No.", ProjBudgetRec."Estimate No.");
        lvPurchActFeatureRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
        IF lvPurchActFeatureRec.FINDSET THEN BEGIN
          REPEAT
            lvPurchActFeatureRec2 := lvPurchActFeatureRec;
            lvPurchActFeatureRec2.Source := lvPurchActFeatureRec2.Source::Project;
            lvPurchActFeatureRec2."Estimate No." := '';
            lvPurchActFeatureRec2."Project No." := ProjBudgetRec."Project No.";
            lvPurchActFeatureRec2.INSERT;
          UNTIL lvPurchActFeatureRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetCostComponent@1100485004(lvCostComponent@1100485004 : Code[20];lvCostObject@1100485000 : Code[20];lvProject@1100485001 : Code[20];lvServOrder@1100525000 : Code[20];lvAdditionalCost@1100525002 : Boolean) : Code[20];
    VAR
      lvCostCompRec@1100525001 : Record 11012012;
      lvDimValRec@1100485002 : Record 349;
      lvDimMgt@1100485003 : Codeunit 408;
    BEGIN
      IF lvServOrder <> '' THEN BEGIN
        lvDimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, FALSE, lvProject);  //db, 02-02-10
        lvCostCompRec.CheckDefaultCostComponent(lvServOrder, lvCostComponent, '', lvDimValRec."Cost Type", lvAdditionalCost);
      END;

      IF lvCostComponent <> '' THEN
        EXIT(lvCostComponent);

      IF lvCostObject <> '' THEN BEGIN
        lvDimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, lvProject);
        IF NOT lvDimValRec.Blocked THEN
          EXIT(lvDimValRec."Cost Component");
      END;

      EXIT('');
    END;

    PROCEDURE GetCode@1100525000(lvField@1100525010 : Integer;lvEst@1100525000 : Code[20];lvSubEst@1100525001 : Code[20];lvPartGrp@1100525002 : Code[20];lvPart@1100525003 : Code[20];lvLine@1100525007 : Integer;lvCode@1100525008 : Code[20]) : Code[20];
    VAR
      EstLineRec@1100525009 : Record 11072072;
      EstPartRec@1100525004 : Record 11072073;
      SubEstRec@1100525005 : Record 11072074;
      EstRec@1100525006 : Record 11012151;
    BEGIN
      IF lvCode <> '' THEN
        EXIT(lvCode);

      IF lvLine <> 0 THEN BEGIN
        IF EstLineRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvLine) THEN BEGIN
          CASE lvField OF
            HelpRec.FIELDNO(Code): IF EstLineRec.Code <> '' THEN EXIT(EstLineRec.Code);
            HelpRec.FIELDNO("Object No."): IF EstLineRec."Object No." <> '' THEN EXIT(EstLineRec."Object No.");
            HelpRec.FIELDNO("Object Customer"): IF EstLineRec."Object Customer" <> '' THEN EXIT(EstLineRec."Object Customer");
          END;
        END;
      END;

      IF lvPart <> '' THEN BEGIN
        IF EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN BEGIN
          CASE lvField OF
            HelpRec.FIELDNO(Code): IF EstPartRec.Code <> '' THEN EXIT(EstPartRec.Code);
            HelpRec.FIELDNO("Object No."): IF EstPartRec."Object No." <> '' THEN EXIT(EstPartRec."Object No.");
            HelpRec.FIELDNO("Object Customer"): IF EstPartRec."Object Customer" <> '' THEN EXIT(EstPartRec."Object Customer");
          END;
        END;

        IF EstPartRec.Level = 3 THEN BEGIN
          lvPart := EstPartRec.Paragraph;
          IF EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN BEGIN
            CASE lvField OF
              HelpRec.FIELDNO(Code): IF EstPartRec.Code <> '' THEN EXIT(EstPartRec.Code);
              HelpRec.FIELDNO("Object No."): IF EstPartRec."Object No." <> '' THEN EXIT(EstPartRec."Object No.");
              HelpRec.FIELDNO("Object Customer"): IF EstPartRec."Object Customer" <> '' THEN EXIT(EstPartRec."Object Customer");
            END;
          END;
        END;
        IF EstPartRec.Level = 2 THEN BEGIN
          lvPart := EstPartRec.Chapter;
          IF EstPartRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart) THEN BEGIN
            CASE lvField OF
              HelpRec.FIELDNO(Code): IF EstPartRec.Code <> '' THEN EXIT(EstPartRec.Code);
              HelpRec.FIELDNO("Object No."): IF EstPartRec."Object No." <> '' THEN EXIT(EstPartRec."Object No.");
              HelpRec.FIELDNO("Object Customer"): IF EstPartRec."Object Customer" <> '' THEN EXIT(EstPartRec."Object Customer");
            END;
          END;
        END;
        IF EstPartRec.Level = 1 THEN BEGIN
          EstPartRec.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", Level, Chapter, Paragraph);
          EstPartRec.SETRANGE("Estimate No.", lvEst);
          EstPartRec.SETRANGE("Sub-Estimate No.", lvSubEst);
          EstPartRec.SETRANGE(Level, 0);
          IF EstPartRec.FINDFIRST THEN BEGIN
            CASE lvField OF
              HelpRec.FIELDNO(Code): IF EstPartRec.Code <> '' THEN EXIT(EstPartRec.Code);
              HelpRec.FIELDNO("Object No."): IF EstPartRec."Object No." <> '' THEN EXIT(EstPartRec."Object No.");
              HelpRec.FIELDNO("Object Customer"): IF EstPartRec."Object Customer" <> '' THEN EXIT(EstPartRec."Object Customer");
            END;
          END;
        END;
      END;

      IF SubEstRec.GET(lvEst, lvSubEst) THEN BEGIN
        CASE lvField OF
          HelpRec.FIELDNO(Code): IF SubEstRec.Code <> '' THEN EXIT(SubEstRec.Code);
        END;
      END;

      IF SubEstRec.Level = 1 THEN BEGIN
        lvSubEst := SubEstRec.Chapter;
        IF SubEstRec.GET(lvEst, lvSubEst) THEN BEGIN
          CASE lvField OF
            HelpRec.FIELDNO(Code): IF SubEstRec.Code <> '' THEN EXIT(SubEstRec.Code);
          END;
        END;
      END;

      IF EstRec.GET(lvEst) THEN BEGIN
        CASE lvField OF
          HelpRec.FIELDNO(Code): IF EstRec.Code <> '' THEN EXIT(EstRec.Code);
        END;
      END;

      EXIT('');
    END;

    PROCEDURE CreateServOrder@1100525002(VAR ServOrderRec@1100485000 : Record 11012823;lvSubEst@1100525002 : Code[20]);
    VAR
      ServLocRec@1100525001 : Record 11012801;
      ServContrRec@1100485003 : Record 11012812;
      ContrDepRec@1100525000 : Record 11012809;
      ServOrderExtension@1100528900 : Record 11071727;
    BEGIN
      WITH EstRec DO BEGIN
        ServOrderRec.INIT;
        ServOrderRec."No." := '';
        ServOrderRec."Source Type" := ServOrderRec."Source Type"::Direct;
        IF CheckServSeries(1) THEN BEGIN
          IF SeriesServOrder = '' THEN BEGIN
            COMMIT;  //ivm form.runmodal
            ServOrderRec.AssistEdit(ServOrderRec);
            IF ServOrderRec."No." = '' THEN EXIT;
          END;
        END;
        ServOrderRec.INSERT(TRUE);
        SeriesServOrder := ServOrderRec."No. Series";

        IF lvSubEst <> '' THEN BEGIN
          SubEstRec.GET("No.", lvSubEst);
          ServOrderRec.VALIDATE(Description, SubEstRec.Description);
        END ELSE BEGIN
          ServOrderRec.VALIDATE(Description, Description);
        END;
        ServOrderRec.VALIDATE("Customer No.", "Customer No.");
        IF ServLocRec.GET("Service Location No.") THEN
          ServOrderRec.VALIDATE("Service Location No.", "Service Location No.");
        IF NOT ServContrRec.GET("Service Contract No.") THEN
          ServContrRec.INIT;  //db, 29-08-13: C004582
        IF ServContrRec."Bill-to Customer No. (CP)" <> '' THEN  //dummy-contract without (bill-to) customer
          ServOrderRec.VALIDATE("Bill-to Customer No.", ServContrRec."Bill-to Customer No. (CP)");
        IF "Service Contract No." <> '' THEN
          ServOrderRec.VALIDATE("Service Contract No.", "Service Contract No.");
        ServOrderRec.DetermineObjectNo;  //db, 16-03-15: C019952
        ServOrderRec.Address := Address;
        ServOrderRec.City := City;
        ServOrderRec."Post Code" := "Post Code";
        ServOrderRec."Territory Code":= "Territory Code";
        IF "Starting Date" <> 0D THEN  //Testcall 4153 JD
          ServOrderRec."Starting Date" := "Starting Date";
        ServOrderRec."Ending Date" := "Ending Date";
        ServOrderRec."Estimate No." := "No.";
        ServOrderRec."Sub-Estimate No." := lvSubEst;
        ServOrderRec."Order No. Customer" := "Order No. Customer";
        ServOrderRec."Reference Date (Item)" := "Reference Date (Item)";
        //ServOrderRec."Purch Discount Term Group 1" := "Purch Discount Term Group 1";
        //ServOrderRec."Purch Discount Term Group 2" := "Purch Discount Term Group 2";
        ServOrderRec."Settlement Method" := ServOrderRec."Settlement Method"::"Fixed Price";
        ServOrderRec.Discipline := Discipline;  //db, 18-06-09: M15712
        IF "Global Dimension 1 Code" = '' THEN BEGIN //db, 29-08-13: C004582
          IF ServContrRec."Global Dimension 1 Code" <> '' THEN //mg, 10-11-14: C018784
            ServOrderRec.VALIDATE("Global Dimension 1 Code", ServContrRec."Global Dimension 1 Code")
        END ELSE
          ServOrderRec.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
        UpdateServOrderIndication;
        UpdateServOrderAmount;  //db, 15-01-13: 34378
        ServOrderRec.CheckDurationOnInitServOrder;  //db, 08-08-13: C007836
        ServOrderRec.MODIFY;

        TmpServOrderRec.INIT;
        TmpServOrderRec."No." := ServOrderRec."No.";
        TmpServOrderRec."Estimate No." := ServOrderRec."Estimate No.";
        TmpServOrderRec."Sub-Estimate No." := ServOrderRec."Sub-Estimate No.";
        IF TmpServOrderRec.INSERT THEN;  //db, 09-03-09: M14641

        IF CopyTryOut AND TryOutRec.READPERMISSION THEN
          TryOutRec.CopyRelation(1, 4, ServOrderRec."Estimate No.", ServOrderRec."No.");
      END;
    END;

    PROCEDURE CreateServAdvice@1100485016(VAR ServBudgetRec@1100485002 : Record 11012875);
    VAR
      ServAdviceRec@1100485001 : Record 11012055;
    BEGIN
      IF ServBudgetRec."Surcharge Line" THEN EXIT;  //db, 19-05-10: M19082

      ServAdviceRec.INIT;
      ServAdviceRec."Record Type" := ServAdviceRec."Record Type"::ServOrder;
      ServAdviceRec.VALIDATE("Service Order No.", ServBudgetRec."Service Order No.");
      ServAdviceRec.VALIDATE("Line No.", 0);  //** 0=signaal voor tabeltrigger om eerst vrije volgnummer te bepalen
      ServAdviceRec.INSERT(TRUE);

      ServAdviceRec."Service Contract No." := ServBudgetRec."Service Contract No.";
      ServAdviceRec."Cost Object" := ServBudgetRec."Cost Object";
      ServAdviceRec."Cost Component" := ServBudgetRec."Cost Component";
      CASE ServBudgetRec."Cost Type" OF
        ServBudgetRec."Cost Type"::Material:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Material;
            ServAdviceRec.Vendor := ServBudgetRec.Vendor;
            ServAdviceRec."Item No." := ServBudgetRec."Item No.";
            ServAdviceRec.Manufacturer := ServBudgetRec.Manufacturer;
            ServAdviceRec."Basic Item" := ServBudgetRec."Basic Item";
            ServAdviceRec."Vendor (Trade Item)" := ServBudgetRec."Vendor (Trade Item)";
            ServAdviceRec."Trade Item" := ServBudgetRec."Trade Item";
            IF ServAdviceRec.Vendor = '' THEN
               ServAdviceRec.Vendor := ServAdviceRec.PreferredVendor;
          END;
        ServBudgetRec."Cost Type"::Subcontracting:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Subcontracting;
            ServAdviceRec.Vendor := ServBudgetRec.Vendor;
          END;
        ServBudgetRec."Cost Type"::Plant:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Plant;
          END;
      END;
      ServAdviceRec.Description := ServBudgetRec.Description;
      ServAdviceRec."Description 2" := ServBudgetRec."Description 2";
      ServAdviceRec."Quantity (Budget)" := ServBudgetRec.Quantity;
      ServAdviceRec."Quantity (Advice)" := ServBudgetRec.Quantity;
      ServAdviceRec."Unit of Measure" := ServBudgetRec."Unit of Measure";
      ServAdviceRec.Price := ServBudgetRec.Price;
      //ServAdviceRec.Transaction := ServAdviceRec.Transaction::Purchase;
      ServAdviceRec.Transaction := JobSetup."Default Advice Order Trans.";
      IF ServBudgetRec."Cost Type" = ServBudgetRec."Cost Type"::Material THEN BEGIN  //db, 13-10-14: C017422
        IF JobSetup."Advice Order Transaction" = JobSetup."Advice Order Transaction"::Inventory THEN
          ServAdviceRec.Transaction := ServAdviceRec.Transaction::Inventory;
      END;
      ServAdviceRec.Deliver := ServAdviceRec.Deliver::"Service Location";
      //ServAdviceRec."Shipment Date" := ServBudgetRec."Index Date";
      //ServAdviceRec."Order Date" := ServBudgetRec."Index Date";
      ServAdviceRec.VALIDATE("Delivery Period", '');  // C001824.n
      IF ServOrderRec."Starting Date" <> 0D THEN BEGIN  //db, 23-02-10: M18184
        ServAdviceRec.VALIDATE("Receipt Date", ServOrderRec."Starting Date");
        IF ServAdviceRec."Delivery Period" <> '' THEN
          ServAdviceRec.VALIDATE("Delivery Period")
        ELSE
          ServAdviceRec."Order Date" := ServAdviceRec."Receipt Date";
      END;
      ServAdviceRec."Additional Cost (Service)" := ServBudgetRec."Additional Cost";
      ServAdviceRec.VALIDATE("External Text", ServBudgetRec."External Text");  //db, 09-12-13: 34383
      ServAdviceRec.CheckGtinAlternative;  //db, 16-12-10: M24096
      ServAdviceRec.CalculateTotal;  //db, 29-11-11: M31177
      ServAdviceRec.MODIFY;

      ServBudgetRec.Advised := TRUE;
      ServBudgetRec.MODIFY;
    END;

    PROCEDURE UpdateServBudgetFromEstimate@1100525006(CostType@1100525000 : Integer);
    VAR
      ServBudgetRec@1100525001 : Record 11012875;
      CostCompRec@1100525002 : Record 11012012;
      EstimateLine@1100525003 : Record 11072072;
    BEGIN
      ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
      ServBudgetRec.SETRANGE("Service Order No.", ServOrderRec."No.");
      IF ServBudgetRec.FINDLAST THEN
        BudgetLino := ServBudgetRec."Line No.";
      ServBudgetRec.RESET;

      ServBudgetRec.INIT;
      ServBudgetRec."Service Order No." := ServOrderRec."No.";
      ServBudgetRec."Line No." := BudgetLino + 10000;
      BudgetLino := ServBudgetRec."Line No.";
      ServBudgetRec.INSERT(TRUE);

      ServBudgetRec."Summary Line" := HelpRec."Summary Line";
      ServBudgetRec."Surcharge Line" :=  HelpRec."Surcharge Line";  //db, 19-05-10: M19082
      //db.sn, 03-01-11: M24779
      SplitDesc(HelpRec.Description, MAXSTRLEN(ServBudgetRec.Description));
      ServBudgetRec.Description := desc1;
      ServBudgetRec."Description 2" := desc2;
      //db.en, 03-01-11: M24779
      ServBudgetRec."Unit of Time" := HelpRec."Unit of Time";
      ServBudgetRec."Time Quantity" := HelpRec."Time Quantity";
      ServBudgetRec.Quantity := HelpRec.Quantity;
      ServBudgetRec."Unit of Measure" := HelpRec."Unit of Measure";
      ServBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
      ServBudgetRec."Price Agreement" := HelpRec."Price Agreement";
      ServBudgetRec.Discipline := HelpRec.Discipline;
      ServBudgetRec."Trade Speciality" := HelpRec."Trade Speciality";
      ServBudgetRec."Trade Expertise" := HelpRec."Trade Expertise";
      ServBudgetRec.Code := HelpRec.Code;
      ServBudgetRec."Object No." := HelpRec."Object No.";
      ServBudgetRec."Object Customer" := HelpRec."Object Customer";
      //db.en, 21-02-11: M25087
      ServBudgetRec."BOM Item No." := HelpRec."BOM Item No.";
      ServBudgetRec."Level BOM" := HelpRec."Level BOM";
      ServBudgetRec."Original Quantity" := HelpRec."Original Quantity";
      IF HelpRec."BOM Item No." <> '' THEN BEGIN
        IF HelpRec."Level BOM" = 0 THEN
          BomLine := ServBudgetRec."Line No."
        ELSE
          ServBudgetRec."Part of Line" := BomLine;
      END;
      //db.en, 21-02-11: M25087

      CASE CostType OF
        1:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Labor;
            IF HelpRec."Cost Object Labor" = '' THEN  //db, 22-11-10: M22582
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Labor"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            ServBudgetRec.Norm := HelpRec.Norm;
            ServBudgetRec.Rate := HelpRec.Rate;
            IF ValidateRateCode THEN  //db, 20-05-14: C011364
              ServBudgetRec.VALIDATE("Rate Code", HelpRec."Rate Code");
            ServBudgetRec."Wage Component" := HelpRec."Wage Component";  //DP00236
          END;
        2:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Material;
            IF HelpRec."Cost Object Material" = '' THEN  //db, 22-11-10: M22582
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Material"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ServBudgetRec.Price := HelpRec."Material Price";
            ServBudgetRec."Gross Price" := HelpRec."Gross Price";
            ServBudgetRec."Discount %" := HelpRec."Discount %";
            ServBudgetRec."Item No." := HelpRec."Item No.";
            ServBudgetRec.Manufacturer := HelpRec.Manufacturer;
            ServBudgetRec."Basic Item" := HelpRec."Basic Item";
            ServBudgetRec."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
            ServBudgetRec."Trade Item" := HelpRec."Trade Item";
            //db.sn, 20-12-10: M23516
            ServBudgetRec."Scheme Code" := HelpRec."Scheme Code";
            ServBudgetRec.Comments := HelpRec.Comments;
            ServBudgetRec.Supply := HelpRec.Supply;
            ServBudgetRec."Comments for Logistics" := HelpRec."Remarks for Logistics";
            ServBudgetRec."Material Sheet" := HelpRec."Material Sheet";
            //db.en, 20-12-10: M23516
          END;
        3:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Subcontracting;
            IF HelpRec."Cost Object Subcontracting" = '' THEN  //db, 22-11-10: M22582
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Subcontracting"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ServBudgetRec.Price := HelpRec."Subcontracting Price";
          END;
        4:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Plant;
            IF HelpRec."Cost Object Plant" = '' THEN  //db, 22-11-10: M22582
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Plant"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ServBudgetRec.Price := HelpRec."Plant Price";
          END;
        5:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Sundry;
            IF HelpRec."Cost Object Sundry" = '' THEN  //db, 22-11-10: M22582
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Sundry Cost"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Sundry";
            ServBudgetRec.Price := HelpRec."Sundry Cost";  //db, 20-03-14
          END;
      END;

      IF ServBudgetRec."Cost Type" = ServBudgetRec."Cost Type"::Subcontracting THEN  //db, 10-08-10: M21818
        ServBudgetRec.Vendor := HelpRec.Subcontractor
      ELSE
        ServBudgetRec.Vendor := HelpRec.Vendor;

      //db.sn, 23-11-10: M24097
      IF ServSetup."Add.Cost Based On Contr.Disc." = FALSE THEN BEGIN
        ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost";
      END ELSE BEGIN
        CASE ServBudgetRec."Cost Type" OF
          ServBudgetRec."Cost Type"::Labor: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Labor)";
          ServBudgetRec."Cost Type"::Material: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Material)";
          ServBudgetRec."Cost Type"::Subcontracting: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Subc)";
          ServBudgetRec."Cost Type"::Plant: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Plant)";
          ServBudgetRec."Cost Type"::Sundry: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Sundry)";
        END;
      END;
      //db.en, 23-11-10: M24097

      IF (HelpRec."Cost Component" <> '') THEN BEGIN //db, 02-08-10 (PT)
        ServBudgetRec."Cost Component" := HelpRec."Cost Component";
        //db.sn, 23-11-10: M24097
        //CostCompRec.GET(HelpRec."Cost Component");
        //ServBudgetRec."Additional Cost" := CostCompRec."Additional Cost (Service)";
        ServBudgetRec.CheckCostComponent(ServBudgetRec."Cost Component");
        //db.en, 23-11-10: M24097
      END ELSE BEGIN
        ServBudgetRec."Cost Component" :=
          GetCostComponent(HelpRec."Cost Component", ServBudgetRec."Cost Object", '', ServBudgetRec."Service Order No.",
            ServBudgetRec."Additional Cost");
      END;

      ServBudgetRec.VALIDATE("External Text", HelpRec."External Text");  //db, 09-12-13: 34383
      ServBudgetRec.CalcTotals;
      //mg.sn, 04-01-11: M24467
      IF (ServSetup."Cost Component Mandatory") AND (ServBudgetRec."Cost Component" = '') AND (ServBudgetRec.Amount <> 0) THEN
        IF EstimateLine.GET(HelpRec."Estimate No.", HelpRec."Sub-Estimate No.", HelpRec."Part Group", HelpRec.Part,
          HelpRec."Estimate Line No.") THEN
          IF EstimateLine.Recipe <> '' THEN
            EstimateLine.FIELDERROR("Cost Component", STRSUBSTNO(Text015, EstimateLine.Recipe, HelpRec.Description))
          ELSE
            EstimateLine.TESTFIELD("Cost Component");
      //mg.en, 04-01-11: M24467

      ServBudgetRec.MODIFY(TRUE); //12-07-09 TRUE Added (15022)
      ServBudgetRec.UpdateServHoursGanttChart(0); //db, 27-12-10: M24502

      IF ServBudgetRec."Cost Type" <> ServBudgetRec."Cost Type"::Labor THEN
        CreateServAdvice(ServBudgetRec);
    END;

    PROCEDURE UpdateServBudgetFromSummary@1100485001(lvServOrder@1100485002 : Code[20]);
    VAR
      ServBudgetRec@1100485001 : Record 11012875;
      CostCompRec@1100525001 : Record 11012012;
      lvBudgetLino@1100525000 : Integer;
    BEGIN
      //db.so, 15-01-13: 34378
      //HelpRec.SETRANGE("Summary Line", TRUE);
      //HelpRec.SETRANGE("Contract Amount", TRUE);
      //IF HelpRec.FINDSET THEN BEGIN
      //  REPEAT
      //    ServOrderRec.GET(lvServOrder);
      //    IF ServOrderRec."Settlement Method" = ServOrderRec."Settlement Method"::"Fixed Price" THEN
      //      ServOrderRec."Order Amount (LCY)" := HelpRec."Sundry Cost"
      //    ELSE
      //      ServOrderRec."Order Amount (LCY)" := 0;
      //    ServOrderRec.MODIFY;
      //  UNTIL HelpRec.NEXT = 0;
      //  HelpRec.DELETEALL;
      //END;
      //db.eo, 15-01-13: 34378

      ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
      ServBudgetRec.SETRANGE("Service Order No.", lvServOrder);
      IF ServBudgetRec.FINDLAST THEN
        lvBudgetLino := ServBudgetRec."Line No."
      ELSE
        lvBudgetLino := 0;

      HelpRec.SETRANGE("Summary Line", TRUE);
      HelpRec.SETRANGE("Contract Amount", FALSE);
      IF HelpRec.FINDSET THEN BEGIN
        REPEAT
          ServBudgetRec.INIT;
          ServBudgetRec."Service Order No." := lvServOrder;
          ServBudgetRec."Line No." := lvBudgetLino + 10000;
          lvBudgetLino := ServBudgetRec."Line No.";
          ServBudgetRec.INSERT(TRUE);

          ServBudgetRec."Summary Line" := HelpRec."Summary Line";
          SplitDesc(HelpRec.Description, MAXSTRLEN(ServBudgetRec.Description));
          ServBudgetRec.Description := desc1;
          ServBudgetRec."Description 2" := desc2;
          ServBudgetRec."Unit of Measure" :=  HelpRec."Unit of Measure";
          ServBudgetRec.Quantity := HelpRec.Quantity;
          ServBudgetRec."Time Quantity" := HelpRec."Time Quantity";
          ServBudgetRec."Unit of Time" := HelpRec."Unit of Time";

          IF HelpRec."Cost Object Labor" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Labor;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            ServBudgetRec.Norm := HelpRec.Norm;
            ServBudgetRec.Rate := HelpRec.Rate;
            ServBudgetRec."Wage Component" := HelpRec."Wage Component";  //DP00236
          END;

          IF HelpRec."Cost Object Material" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Material;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ServBudgetRec.Price := HelpRec."Material Price";
          END;

          IF HelpRec."Cost Object Subcontracting" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Subcontracting;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ServBudgetRec.Price := HelpRec."Subcontracting Price";
          END;

          IF HelpRec."Cost Object Plant" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Plant;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ServBudgetRec.Price := HelpRec."Plant Price";
          END;

          IF HelpRec."Cost Object Sundry" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Sundry;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Sundry";
            ServBudgetRec.Price := HelpRec."Sundry Cost";
          END;

          IF HelpRec."Discount %" <> 0 THEN BEGIN
            ServBudgetRec."Discount %" := HelpRec."Discount %";
            ServBudgetRec."Gross Price" := HelpRec."Gross Price";
          END;

          ServBudgetRec."Wage Component" := HelpRec."Wage Component";
          IF HelpRec."Cost Component" <> '' THEN BEGIN   //db, 02-08-10 (PT)
            CostCompRec.GET(HelpRec."Cost Component");
            ServBudgetRec."Cost Component" := HelpRec."Cost Component";
            ServBudgetRec."Additional Cost" := CostCompRec."Additional Cost (Service)";
          END ELSE BEGIN
            ServBudgetRec."Cost Component" :=
              GetCostComponent(HelpRec."Cost Component", ServBudgetRec."Cost Object", '', ServBudgetRec."Service Order No.",
                ServBudgetRec."Additional Cost");
          END;

          ServBudgetRec."Price Agreement" := HelpRec."Price Agreement";
          IF ServBudgetRec."Cost Type" = ServBudgetRec."Cost Type"::Subcontracting THEN  //db, 10-08-10: M21818
            ServBudgetRec.Vendor := HelpRec.Subcontractor
          ELSE
            ServBudgetRec.Vendor := HelpRec.Vendor;
          IF (HelpRec."Purchase Route Reference" <> '') THEN BEGIN
            ServBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
            //RouteRefMgtCU.UpdateQuoteLinesFromBudget(ServBudgetRec);
          END;
          ServBudgetRec.CalcTotals;
          ServBudgetRec.MODIFY(TRUE); //12-07-09 TRUE Added (15022)
          ServBudgetRec.UpdateServHoursGanttChart(0); //db, 27-12-10: M24502
        UNTIL HelpRec.NEXT = 0;
        HelpRec.DELETEALL;
      END;
    END;

    PROCEDURE FillTmpServOrder@1100525001();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      IF HelpRec."Service Order No." = '' THEN EXIT;

      IF NOT TmpServOrderRec.GET(HelpRec."Service Order No.") THEN BEGIN
        TmpServOrderRec.INIT;
        TmpServOrderRec."No." := HelpRec."Service Order No.";
        ServiceOrder.GET(HelpRec."Service Order No.");
        TmpServOrderRec."Estimate No." := HelpRec."Estimate No.";
        IF TransferStructure = TRUE THEN
          TmpServOrderRec."Sub-Estimate No." := HelpRec."Sub-Estimate No."
        ELSE
          TmpServOrderRec."Sub-Estimate No." := HelpRec.Code;
        TmpServOrderRec.INSERT;
      END;
    END;

    PROCEDURE RemoveServOrderLines@1100525003();
    VAR
      ServBudgetRec@1100525000 : Record 11012875;
      ServAdviceRec@1100525002 : Record 11012055;
      SubEstRec@1100525003 : Record 11072074;
      TmpSubEstRec@1100525004 : TEMPORARY Record 11072074;
      lvText000@1100525005 : TextConst 'ENU=Selection of Estimate Data not complete for Service Order %1';
    BEGIN
      WITH TmpServOrderRec DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            //db.sn, 13-11-09: M16953
            IF SubEstFilter <> '' THEN BEGIN
              TmpSubEstRec.DELETEALL;
              SubEstRec.SETRANGE("Estimate No.", EstRec."No.");
              SubEstRec.SETRANGE("Service Order No.", "No.");
              IF SubEstRec.FINDSET THEN BEGIN
                REPEAT
                  TmpSubEstRec.COPY(SubEstRec);
                  TmpSubEstRec.INSERT;
                UNTIL SubEstRec.NEXT = 0;
              END;
              TmpSubEstRec.SETRANGE("Estimate No.", EstRec."No.");
              TmpSubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
              TmpSubEstRec.DELETEALL;
              TmpSubEstRec.RESET;
              IF TmpSubEstRec.FINDFIRST THEN
                ERROR(lvText000, "No.");
            END;
            //db.en, 13-11-09: M16953

            ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
            ServBudgetRec.SETRANGE("Service Order No.", "No.");
            ServBudgetRec.DELETEALL(TRUE);

            ServAdviceRec.SETRANGE("Record Type", ServAdviceRec."Record Type"::ServOrder);
            ServAdviceRec.SETRANGE("Service Order No.", "No.");
            ServAdviceRec.DELETEALL(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateServOrderSummary@1100525008();
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceSurchargeManagement@1100528600 : Codeunit 11012834;
      FirstServOrder@1100525004 : Code[20];
      LastServOrder@1100525003 : Code[20];
      InfoTxt@1100525002 : Text[50];
    BEGIN
      WITH TmpServOrderRec DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            IF FirstServOrder = '' THEN
              FirstServOrder := "No.";
            LastServOrder := "No.";

            ServiceOrder.GET("No.");  //db, 02-03-15: C020552
            ServiceSurchargeManagement.UpdateSOSurchargeBudgetLines(ServiceOrder);
            ServiceOrder.UpdateSOHours;  //db, 02-03-15: C020552
          UNTIL NEXT = 0;
          RemoveSummary("Estimate No.", ServSheet);

          IF FirstServOrder <> LastServOrder THEN
            InfoTxt := FirstServOrder + '..' + LastServOrder
          ELSE
            InfoTxt := FirstServOrder;
          IF InfoTxt <> '' THEN
            MESSAGE(Text014, TABLECAPTION, InfoTxt);
        END;
      END;
    END;

    PROCEDURE ConvertRateType@1100525004(lvEst@1100525000 : Code[20];lvRateCode@1100525001 : Code[20];VAR ioNorm@1100525002 : Decimal;VAR ioRateAmnt@1100525003 : Decimal);
    BEGIN
      IF NOT EstRateRec.GET(lvEst, lvRateCode) THEN
        EstRateRec.INIT;  //Rate Code not filled for additional cost (type labor) in summary
      IF EstRateRec."Rate Type" = EstRateRec."Rate Type"::Minuts THEN BEGIN
        ioNorm := ioNorm / 60;
        ioRateAmnt := ioRateAmnt * 60;
        IF EstRateRec."Team Size" <> 0 THEN BEGIN
          ioNorm := ioNorm * EstRateRec."Team Size";
          ioRateAmnt := ioRateAmnt / EstRateRec."Team Size";
        END;
      END;
    END;

    PROCEDURE CheckServSeries@1100525007(lvAct@1210190002 : Integer) : Boolean;
    VAR
      SerieRel@1210190000 : Record 310;
      ServSetup@1210190004 : Record 11012800;
      ServiceSourceTypeSetup@1100528600 : Record 11071726;
    BEGIN
      ServSetup.GET;
      CASE lvAct OF
        0:
          BEGIN
            ServSetup.TESTFIELD("Service Location Nos.");
            SerieRel.SETRANGE(Code, ServSetup."Service Location Nos.");
          END;
        1:
          BEGIN
            ServiceSourceTypeSetup.GET(ServiceSourceTypeSetup."Source Type"::Direct);
            ServiceSourceTypeSetup.TESTFIELD("No. Series");
            SerieRel.SETRANGE(Code, ServiceSourceTypeSetup."No. Series");
          END;
      END;

      EXIT(SerieRel.FINDFIRST);
    END;

    PROCEDURE UpdateSummary@1100525011(lvEst@1100525001 : Code[20];lvSheet@1100525000 : Code[20];lvSumLineFilter@1100525003 : Text[250]);
    VAR
      SumRec@1100525004 : Record 11012172;
      SumLineRec@1100525002 : Record 11012171;
    BEGIN
      IF SumRec.GET(lvEst, lvSheet) THEN BEGIN
        SumRec."Modified by" := USERID;
        SumRec."Last Date Modified" := TODAY;
        SumRec."Last Time Modified" := TIME;
        SumRec.Fixed := FALSE;
        SumRec.MODIFY;

        SumLineRec.SETRANGE("Estimate No.", SumRec."Estimate No.");
        SumLineRec.SETRANGE(Summary, SumRec.Summary);
        SumLineRec.SETRANGE(Type, SumLineRec.Type::"Cost Type");
        IF SumLineRec.FINDSET THEN BEGIN
          REPEAT
            IF TransferStructure = TRUE THEN BEGIN
              SumLineRec."Code Filter" := '';
              SumLineRec.VALIDATE("Sub-Estimate Filter", lvSumLineFilter);
            END ELSE BEGIN
              SumLineRec."Sub-Estimate Filter" := '';
              IF lvSumLineFilter = '' THEN
                SumLineRec.VALIDATE("Code Filter", '''''')
              ELSE
                SumLineRec.VALIDATE("Code Filter", lvSumLineFilter);
            END;
            SumLineRec.MODIFY;
          UNTIL SumLineRec.NEXT = 0;
          SumLineRec.UpdateLogbook; //call 25809;
        END;

        SumLineRec.UpdateSummarySheet(SumRec."Estimate No.", SumRec.Summary, FALSE); //call 25809
      END;
    END;

    PROCEDURE RemoveSummary@1100525012(lvEst@1100525001 : Code[20];lvSheet@1100525000 : Code[20]);
    VAR
      SumRec@1100525002 : Record 11012172;
      SumLineRec@1100525003 : Record 11012171;
      SumRelRec@1100525004 : Record 11012173;
    BEGIN
      IF SumRec.GET(lvEst, lvSheet) THEN BEGIN
        SumRec.DELETE;

        SumLineRec.SETRANGE("Estimate No.",lvEst);
        SumLineRec.SETRANGE(Summary,lvSheet);
        SumLineRec.DELETEALL;

        SumRelRec.SETRANGE("Estimate No.",lvEst);
        SumRelRec.SETRANGE(Summary,lvSheet);
        SumRelRec.DELETEALL;
      END;
    END;

    PROCEDURE CheckRelationSubEstServOrder@1100525014();
    VAR
      SubEstRec@1100525000 : Record 11072074;
      EstLineRec@1100525002 : Record 11072072;
      lvServOrder@1100525003 : Code[20];
    BEGIN
      SubEstRec.SETRANGE("Estimate No.", EstFrom);
      SubEstRec.SETRANGE("Transfer to Service", SubEstRec."Transfer to Service"::ServOrder);
      IF SubEstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          SubEstRec."Service Order No." := '';
          EstLineRec.SETRANGE("Estimate No.", SubEstRec."Estimate No.");
          EstLineRec.SETRANGE("Sub-Estimate No.", SubEstRec."Sub-Estimate No.");
          EstLineRec.SETFILTER("Service Order No.", '<>%1', '');
          IF EstLineRec.FINDFIRST THEN BEGIN
            lvServOrder := EstLineRec."Service Order No.";
            EstLineRec.SETFILTER("Service Order No.", '<>%1&<>%2', lvServOrder, '');   //db, 26-11-10: M23952
            IF NOT EstLineRec.FINDFIRST THEN
              SubEstRec."Service Order No." := lvServOrder;
          END;
          SubEstRec.MODIFY;
        UNTIL SubEstRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckBudgetSummary@1100525017();
    VAR
      lvBudgetSumRec@1100525003 : Record 11012064;
    BEGIN
      //db, 13-08-09: M15776
      IF ProjTo = '' THEN
        lvBudgetSumRec.SETFILTER("Project No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Project No.", ProjTo);
      IF ExtTo = '' THEN
        lvBudgetSumRec.SETFILTER("Contract No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Contract No.", ExtTo);
      IF PlotTo = '' THEN
        lvBudgetSumRec.SETFILTER("Plot No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Plot No.", PlotTo);
      IF HouseModelTo = '' THEN
        lvBudgetSumRec.SETFILTER("House Model", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("House Model", HouseModelTo);
      IF MainGroupTo = '' THEN
        lvBudgetSumRec.SETFILTER("Main Group", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Main Group", MainGroupTo);
      IF GroupTo = '' THEN
        lvBudgetSumRec.SETFILTER(Group, '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE(Group, GroupTo);
      IF SubGroupTo = '' THEN
        lvBudgetSumRec.SETFILTER("Sub Group", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Sub Group", SubGroupTo);
      IF OptTo = '' THEN
        lvBudgetSumRec.SETFILTER(Option, '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE(Option, OptTo);
      IF lvBudgetSumRec.FINDFIRST THEN BEGIN
        IF OptTo <> '' THEN BEGIN                    //Summary Adjustment
          lvBudgetSumRec.ReCalcOptionSummaryLines;
          lvBudgetSumRec.UpdateOptBudgetLines;
        END;
        //mg.sn, 08-03-11: M25528
        IF OptTo = '' THEN BEGIN                    //Summary Adjustment
          lvBudgetSumRec.ReCalcSummaryLines(AdjTo);  //Summary Adjustment
          lvBudgetSumRec.UpdateBudgetLines(TRUE,AdjTo);  //Summary Adjustment
        END;
        //mg.en, 08-03-11: M25528
      END;
    END;

    PROCEDURE FillWithAdmiCodeCostobjects@1100525018(AdmiCode@1100525000 : Code[10]);
    VAR
      lvAdmiCodeRec@1100525001 : Record 11012390;
    BEGIN
      IF AdmiCode = '' THEN
        EXIT;
      IF (HelpRec."Cost Object Labor" <> '') AND (HelpRec."Cost Object Material" <> '') AND
         (HelpRec."Cost Object Subcontracting" <> '') AND (HelpRec."Cost Object Plant" <> '')
      THEN
        EXIT;
      IF NOT lvAdmiCodeRec.GET(AdmiCode) THEN
        EXIT;

      IF HelpRec."Cost Object Labor" = '' THEN
        HelpRec."Cost Object Labor" := lvAdmiCodeRec."Cost Object Labor";
      IF HelpRec."Cost Object Material" = '' THEN
        HelpRec."Cost Object Material" := lvAdmiCodeRec."Cost Object Material";
      IF HelpRec."Cost Object Subcontracting" = '' THEN
        HelpRec."Cost Object Subcontracting" := lvAdmiCodeRec."Cost Object Subcontracting";
      IF HelpRec."Cost Object Plant" = '' THEN
        HelpRec."Cost Object Plant" := lvAdmiCodeRec."Cost Object Plant";
    END;

    PROCEDURE CopyCommentLines@1100529800(CostType@1100529805 : Integer);
    VAR
      CommentLineFrom@1100529803 : Record 11020595;
      CommentLineTo@1100529804 : Record 11020634;
      RecRef@1100529800 : RecordRef;
      LineNo@1100529802 : Integer;
    BEGIN
      // **4PS MVOS
      IF NOT TransferCommentLines THEN
        EXIT;

      IF CommentLinesTransfered THEN
        EXIT;

      IF (HelpRec."Material Price" <> 0) OR
         ((HelpRec."Material Price" = 0) AND
         (HelpRec."Cost Object Material" <> '') AND
         (TransferZeroLines = TRUE))
      THEN BEGIN
        IF CostType <> 2 THEN
          EXIT;
      END;

      CommentLineFrom.RESET;
      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::Estimate);
      CommentLineFrom.SETRANGE("Estimate No.", HelpRec."Estimate No.");
      CommentLineFrom.SETRANGE("Sub-Estimate No.", HelpRec."Sub-Estimate No.");
      CommentLineFrom.SETRANGE("Part Group", HelpRec."Part Group");
      CommentLineFrom.SETRANGE(Part, HelpRec.Part);
      CommentLineFrom.SETRANGE("Estimate Line No.", HelpRec."Estimate Line No.");
      IF CommentLineFrom.FINDSET THEN BEGIN
        RecRef.GETTABLE(ProjBudgetRec);

        CommentLineTo.RESET;
        CommentLineTo.SETRANGE("Table Name", CommentLineTo."Table Name"::Budget);
        CommentLineTo.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
        IF CommentLineTo.FINDLAST THEN
          LineNo := CommentLineTo."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          CommentLineTo.INIT;
          CommentLineTo."Table Name" := CommentLineTo."Table Name"::Budget;
          CommentLineTo."Record ID" := RecRef.RECORDID();
          CommentLineTo."Line No." := LineNo;
          CommentLineTo.Date := CommentLineFrom.Date;
          CommentLineTo.Code := CommentLineFrom.Code;
          CommentLineTo.Comment := CommentLineFrom.Comment;
          CommentLineTo."Comment Code" := CommentLineFrom."Comment Code";
          CommentLineTo."Created by" := CommentLineFrom."Created by";
          CommentLineTo."Time Created" := CommentLineFrom."Time Created";
          CommentLineTo."Line Break" := CommentLineFrom."Line Break";
          CommentLineTo.INSERT(FALSE);

          LineNo += 10000;
        UNTIL CommentLineFrom.NEXT = 0;
      END;

      CommentLinesTransfered := TRUE;
    END;

    PROCEDURE CopyPrPLTemplateToProjectPl@1210190008();
    VAR
      CopyFromProjPlannTemplCU@1210190000 : Codeunit 11012190;
      lProjectPlanningTemplate@1210190001 : Record 11012435;
    BEGIN
      lProjectPlanningTemplate.GET(CopyPrPlTemplate);
      CopyFromProjPlannTemplCU.CopyTemplate(ProjRec, lProjectPlanningTemplate);
    END;

    PROCEDURE TestSOBudgetLinesExist@1100525022() : Boolean;
    VAR
      ServiceOrderBudgetLine@1100525001 : Record 11012875;
      FoundServiceOrderNo@1100525002 : Code[20];
      BudgetLinesExist@1100525000 : Boolean;
    BEGIN
      IF TmpServOrderRec.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
          ServiceOrderBudgetLine.SETRANGE("Service Order No.", TmpServOrderRec."No.");
          BudgetLinesExist := NOT ServiceOrderBudgetLine.ISEMPTY;
          FoundServiceOrderNo := TmpServOrderRec."No.";
        UNTIL BudgetLinesExist OR (TmpServOrderRec.NEXT = 0);

      IF BudgetLinesExist THEN
        IF NOT CONFIRM(Text016, FALSE, FoundServiceOrderNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE UpdateServOrderAmount@1100409001();
    BEGIN
      IF ServOrderRec."Settlement Method" = ServOrderRec."Settlement Method"::"Fixed Price" THEN BEGIN
        IF OrderAmount <> 0 THEN
          ServOrderRec.VALIDATE("Order Amount (LCY)", OrderAmount);
        IF InstScheme <> '' THEN
          ServOrderRec.VALIDATE("Installment Scheme", InstScheme);
      END;
    END;

    PROCEDURE UpdateServOrderIndication@1100409002();
    BEGIN
      IF OrderKind <> '' THEN
        ServOrderRec.VALIDATE("Order Kind", OrderKind);  //db, 28-12-10: M21934
      IF OrderType <> '' THEN
        ServOrderRec.VALIDATE("Order Type", OrderType);  //db, 28-12-10: M21934
    END;

    PROCEDURE UpdateServOrderDurationTime@1100525005();
    BEGIN
      //db, 24-03-14: C014229
      //db, 02-03-15: C020552 function expired, use UpdateSOHours after creating Budget Lines;
      //ServOrderRec.CALCFIELDS("Budget Hours");
      //IF ServOrderRec."Expected Hours" < ServOrderRec."Budget Hours" THEN
      //  ServOrderRec."Expected Hours" :=  ServOrderRec."Budget Hours";
      //IF ServOrderRec."Duration Time" < ServOrderRec."Expected Hours" THEN
      //  ServOrderRec.VALIDATE("Duration Time", ServOrderRec."Expected Hours");
    END;

    PROCEDURE GenerateProjRespPerson@1100528900(EstNo@1100525000 : Code[20];ProjectNo@1100525001 : Code[20]);
    VAR
      ProjRespPersonRec@1100525003 : Record 11012040;
      EstRespPersonRec@1100525002 : Record 11012159;
      LastLine@1100525004 : Integer;
    BEGIN
      //db, 30-08-13: C007282
      ProjRespPersonRec.SETRANGE("Project No.", ProjectNo);
      IF ProjRespPersonRec.FINDLAST THEN
        LastLine :=  ProjRespPersonRec."Line No.";

      EstRespPersonRec.SETRANGE("Estimate No.", EstNo);
      IF EstRespPersonRec.FINDSET THEN BEGIN
        REPEAT
          ProjRespPersonRec.SETRANGE("Project No.", ProjectNo);
          ProjRespPersonRec.SETRANGE(Responsibility, EstRespPersonRec.Responsibility);
          ProjRespPersonRec.DELETEALL(TRUE);

          ProjRespPersonRec.INIT;
          ProjRespPersonRec."Project No." := ProjectNo;
          ProjRespPersonRec."Line No." := LastLine + 10000;
          LastLine := ProjRespPersonRec."Line No.";
          ProjRespPersonRec.Responsibility := EstRespPersonRec.Responsibility;
          ProjRespPersonRec."Employee No." := EstRespPersonRec."Employee No.";
          ProjRespPersonRec.INSERT(TRUE);
        UNTIL EstRespPersonRec.NEXT = 0;
      END;
    END;

    PROCEDURE CreateAssemblyYardNumberObjectBasedOnSalesLine@1100525027(SalesLine@1100525000 : Record 37);
    BEGIN
      //DP00481
      AssemblyYardNumberObject.INIT;
      AssemblyYardNumberObject."Project No." := SalesLine."Job No.";
      AssemblyYardNumberObject."Entity Type" := AssemblyYardNumberObject."Entity Type"::Position;
      AssemblyYardNumberObject."Entity No." := SalesLine."Document No." + '-' + FORMAT(SalesLine."Line No.");
      AssemblyYardNumberObject.Description := SalesLine.Description;
      AssemblyYardNumberObject."Sales Order No." := SalesLine."Document No.";
      AssemblyYardNumberObject.INSERT;
    END;

    LOCAL PROCEDURE CreateAssemblyYardNumberObjectBasedOnEstimateLine@1100528402(EstimateLine@1100525000 : Record 11072072);
    BEGIN
      //DP00595
      AssemblyYardNumberObject.INIT;
      AssemblyYardNumberObject."Project No." := EstimateLine."Assembly Project No.";
      AssemblyYardNumberObject."Entity Type" := AssemblyYardNumberObject."Entity Type"::Position;
      AssemblyYardNumberObject."Entity No." := EstimateLine."Purchase Route Reference";
      AssemblyYardNumberObject."Purchase Route Reference" := EstimateLine."Purchase Route Reference";
      AssemblyYardNumberObject.Description := EstimateLine.Description;
      AssemblyYardNumberObject."Estimate No." := EstimateLine."Estimate No.";
      AssemblyYardNumberObject.INSERT;
    END;

    LOCAL PROCEDURE GetLastPurchaseRouteReference@1100528403(VAR LastPurchaseRouteReference@1100528400 : Code[20]);
    VAR
      PurchRouteRefManagement@1100528401 : Codeunit 11012045;
    BEGIN
      //DP00595
      IF LastPurchaseRouteReference = '' THEN
        LastPurchaseRouteReference := PurchRouteRefManagement.GetLastRefNo;
      LastPurchaseRouteReference := INCSTR(LastPurchaseRouteReference);
    END;

    LOCAL PROCEDURE WriteLastPurchaseRouteReference@1100528401(LastPurchaseRouteReference@1100528400 : Code[20]);
    VAR
      PurchRouteRefManagement@1100528401 : Codeunit 11012045;
    BEGIN
      //DP00595
      IF LastPurchaseRouteReference <> '' THEN
        PurchRouteRefManagement.WriteLastRefNo(LastPurchaseRouteReference);
    END;

    LOCAL PROCEDURE CreateObjectModification@1100528602(VAR CreatedObjectModification@1100528600 : Record 11071700);
    BEGIN
      CreatedObjectModification.VALIDATE("Customer No.", EstRec."Customer No.");
      CreatedObjectModification.VALIDATE(Description, EstRec.Description);
      CreatedObjectModification.VALIDATE(Discipline, EstRec.Discipline);
      CreatedObjectModification.VALIDATE("Order Kind", OrderKind);
      CreatedObjectModification.INSERT(TRUE);

      IF NOT TmpObjectModification.GET(CreatedObjectModification."No.") THEN BEGIN
        TmpObjectModification."No." := CreatedObjectModification."No.";
        TmpObjectModification.INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateModificationFromEstimate@1100528600(CostType@1100528600 : Integer);
    VAR
      MaintenanceSchemeVersion@1100528601 : Record 11071743;
      MaintSchemeVersionLine@1100528602 : Record 11071744;
      LineNo@1100528603 : Integer;
    BEGIN
      IF NOT MaintenanceSchemeVersion.GET(MaintenanceSchemeVersion."Line Type"::Modification, ObjectModification."No.", '', TODAY) THEN BEGIN
        MaintenanceSchemeVersion."Line Type" := MaintenanceSchemeVersion."Line Type"::Modification;
        MaintenanceSchemeVersion.Code := ObjectModification."No.";
        MaintenanceSchemeVersion."Belongs to Scheme" := '';
        MaintenanceSchemeVersion."Index Date" := TODAY;
        MaintenanceSchemeVersion.INSERT(TRUE);
      END;

      MaintSchemeVersionLine.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", MaintenanceSchemeVersion.Code);
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", '');
      MaintSchemeVersionLine.SETRANGE("Index Date", MaintenanceSchemeVersion."Index Date");
      IF MaintSchemeVersionLine.FINDLAST THEN
        LineNo := MaintSchemeVersionLine."Line No.";
      LineNo += 10000;

      MaintSchemeVersionLine."Line Type" := MaintenanceSchemeVersion."Line Type";
      MaintSchemeVersionLine."Type Code" := MaintenanceSchemeVersion.Code;
      MaintSchemeVersionLine."Index Date" := MaintenanceSchemeVersion."Index Date";
      MaintSchemeVersionLine."Line No." := LineNo;
      MaintSchemeVersionLine.INSERT(TRUE);

      MaintSchemeVersionLine."Item No." := HelpRec."Item No.";
      MaintSchemeVersionLine.Manufacturer := HelpRec.Manufacturer;
      MaintSchemeVersionLine."Basic Item" := HelpRec."Basic Item";
      MaintSchemeVersionLine."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
      MaintSchemeVersionLine."Trade Item" := HelpRec."Trade Item";
      MaintSchemeVersionLine."Gross Price" := HelpRec."Gross Price";
      MaintSchemeVersionLine."Unit of Measure" := HelpRec."Unit of Measure";

      MaintSchemeVersionLine.Description := COPYSTR(HelpRec.Description, 1, MAXSTRLEN(MaintSchemeVersionLine.Description));
      MaintSchemeVersionLine.Quantity := HelpRec.Quantity;
      MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object";
      MaintSchemeVersionLine."Cost Component" := HelpRec."Cost Component";
      MaintSchemeVersionLine."Price Agreement" := HelpRec."Price Agreement";

      CASE CostType OF
        1:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Labor;
            IF HelpRec."Cost Object Labor" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Labor"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            MaintSchemeVersionLine.Norm := HelpRec.Norm;
            MaintSchemeVersionLine.Rate := HelpRec.Rate;
            IF ValidateRateCode THEN
              MaintSchemeVersionLine.VALIDATE("Rate Code", HelpRec."Rate Code");
          END;
        2:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Material;
            IF HelpRec."Cost Object Material" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Material"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Material";
            MaintSchemeVersionLine."Cost Price" := HelpRec."Material Price";
            MaintSchemeVersionLine."Gross Price" := HelpRec."Gross Price";
            MaintSchemeVersionLine."Purchase Discount %" := HelpRec."Discount %";
            MaintSchemeVersionLine."Item No." := HelpRec."Item No.";
            MaintSchemeVersionLine.Manufacturer := HelpRec.Manufacturer;
            MaintSchemeVersionLine."Basic Item" := HelpRec."Basic Item";
            MaintSchemeVersionLine."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
            MaintSchemeVersionLine."Trade Item" := HelpRec."Trade Item";
          END;
        3:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Subcontracting;
            IF HelpRec."Cost Object Subcontracting" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Subcontracting"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Subcontracting";
            MaintSchemeVersionLine."Cost Price" := HelpRec."Subcontracting Price";
          END;
        4:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Plant;
            IF HelpRec."Cost Object Plant" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Plant"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Plant";
            MaintSchemeVersionLine."Cost Price" := HelpRec."Plant Price";
          END;
        5:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Sundry;
            IF HelpRec."Cost Object Sundry" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Sundry Cost"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Sundry";
            MaintSchemeVersionLine."Cost Price" := HelpRec."Sundry Cost";
          END;
      END;
      MaintSchemeVersionLine.CalcTotals;
      MaintSchemeVersionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TestObjectModificationLinesExists@1100528601() : Boolean;
    VAR
      MaintSchemeVersionLine@1100528602 : Record 11071744;
      ObjectModificationLinesExist@1100528600 : Boolean;
      FoundObjectModificationNo@1100528601 : Code[10];
    BEGIN
      IF TmpObjectModification.FINDSET THEN
        REPEAT
          MaintSchemeVersionLine.SETRANGE("Line Type", MaintSchemeVersionLine."Line Type"::Modification);
          MaintSchemeVersionLine.SETRANGE("Type Code", TmpObjectModification."No.");
          MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", '');
          MaintSchemeVersionLine.SETRANGE("Index Date", TODAY);
          ObjectModificationLinesExist := NOT MaintSchemeVersionLine.ISEMPTY;
          FoundObjectModificationNo := TmpObjectModification."No.";
        UNTIL ObjectModificationLinesExist OR (TmpObjectModification.NEXT = 0);

      IF ObjectModificationLinesExist THEN
        IF NOT CONFIRM(Text017, FALSE, FoundObjectModificationNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillTmpObjectModification@1100528603();
    BEGIN
      IF HelpRec."Object Modification No." = '' THEN EXIT;

      IF NOT TmpObjectModification.GET(HelpRec."Object Modification No.") THEN BEGIN
        TmpObjectModification.INIT;
        TmpObjectModification."No." := HelpRec."Object Modification No.";
        TmpObjectModification.INSERT;
      END;
    END;

    LOCAL PROCEDURE CheckRelationSubEstObjectModification@1100528604();
    VAR
      SubEstimateNEW@1100525000 : Record 11072074;
      EstimateLineNEW@1100525002 : Record 11072072;
      ObjectModificationNo@1100528600 : Code[10];
    BEGIN
      SubEstimateNEW.SETRANGE("Estimate No.", EstFrom);
      SubEstimateNEW.SETRANGE("Transfer to Service", SubEstimateNEW."Transfer to Service"::Modification);
      IF SubEstimateNEW.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          SubEstimateNEW."Object Modification No." := '';
          EstimateLineNEW.SETRANGE("Estimate No.", SubEstimateNEW."Estimate No.");
          EstimateLineNEW.SETRANGE("Sub-Estimate No.", SubEstimateNEW."Sub-Estimate No.");
          EstimateLineNEW.SETFILTER("Object Modification No.", '<>%1', '');
          IF EstimateLineNEW.FINDFIRST THEN BEGIN
            ObjectModificationNo := EstimateLineNEW."Object Modification No.";
            EstimateLineNEW.SETFILTER("Object Modification No.", '<>%1&<>%2', ObjectModificationNo, '');
            IF NOT EstimateLineNEW.FINDFIRST THEN
              SubEstimateNEW."Object Modification No." := ObjectModificationNo;
          END;
          SubEstimateNEW.MODIFY;
        UNTIL SubEstimateNEW.NEXT = 0;
      END;
    END;

    BEGIN
    {
      db, 28-12-10: split common, project and service options
    }
    END.
  }
}

