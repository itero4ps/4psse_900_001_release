OBJECT Codeunit 11012230 Estimate Buffer Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Gap@1100485015 : Integer;
      MarkNo@1100485014 : Integer;
      CurrLino@1100485013 : Integer;
      PrevLino@1100485012 : Integer;
      gvEst@1100485011 : Code[20];
      gvSubEst@1100485010 : Code[20];
      gvPartGrp@1100485009 : Code[20];
      gvPart@1100485008 : Code[20];
      gvEstLine@1100485007 : Integer;
      gvRcpGrp@1100485006 : Code[20];
      gvRcp@1100485005 : Code[20];
      gvRcpLine@1100485004 : Integer;
      SkipMark@1100485003 : Boolean;
      Text001@1100485016 : TextConst 'ENU=%1 Lines copied';
      SelectDest@1100485000 : Boolean;
      gvDest@1100485001 : Integer;
      Text002@1100525000 : TextConst 'ENU=First select line(s).';
      gvSalesDocType@1100525001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal';
      gvSalesDocno@1100525002 : Code[20];
      gvSalesline@1100525003 : Integer;

    PROCEDURE CopyToBuffer@1210190005(lvAction@1100485002 : Integer;VAR EstLineRec@1100485000 : Record 11072072;VAR EstRcpLineRec@1100485003 : Record 11072075;VAR PartLineRec@1100485005 : Record 11072076;VAR BaseRcpLineRec@1100528900 : Record 11020582;VAR SalesRcpLineRec@1100525001 : Record 11229789);
    VAR
      lvEstLineRec@1100485001 : Record 11072072;
      lvEstRcpLineRec@1100485004 : Record 11072075;
      lvPartLineRec@1100485007 : Record 11072076;
      lvBaseRcpLineRec@1100528901 : Record 11020582;
      lvSalesRcpLineRec@1100525000 : Record 11229789;
      BufferRec@1100485006 : Record 11012195;
    BEGIN
      IF lvAction = 0 THEN BEGIN
        lvEstLineRec.COPY(EstLineRec);
        WITH lvEstLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Estimate No." := "Estimate No.";
              BufferRec."Sub-Estimate No." := "Sub-Estimate No.";
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Line No.";
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        EstLineRec.CLEARMARKS;
      END;

      IF lvAction = 1 THEN BEGIN
        lvEstRcpLineRec.COPY(EstRcpLineRec);
        WITH lvEstRcpLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Estimate No." := "Estimate No.";
              BufferRec."Sub-Estimate No." := "Sub-Estimate No.";
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Estimate Line";
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              BufferRec."Recipe Line" := "Line No.";
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        EstRcpLineRec.CLEARMARKS;
      END;

      IF lvAction = 2 THEN BEGIN
        lvPartLineRec.COPY(PartLineRec);
        WITH lvPartLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec."Part Group" := "Part Group";
              BufferRec.Part := Part;
              BufferRec."Estimate Line" := "Line No.";
              BufferRec.Description := Description;
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        PartLineRec.CLEARMARKS;
      END;

      IF lvAction = 3 THEN BEGIN
        lvBaseRcpLineRec.COPY(BaseRcpLineRec);
        WITH lvBaseRcpLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              BufferRec."Recipe Line" := "Line No.";
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        BaseRcpLineRec.CLEARMARKS;
      END;

      IF lvAction = 4 THEN BEGIN   //DP00481
        lvSalesRcpLineRec.COPY(SalesRcpLineRec);
        WITH lvSalesRcpLineRec DO BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
          END ELSE BEGIN
            REPEAT
              BufferRec.INIT;
              BufferRec."User ID" := USERID;
              //BufferRec."Estimate No." := "Estimate No.";
              //BufferRec."Sub-Estimate No." := "Sub-Estimate No.";
              //BufferRec."Part Group" := "Part Group";
              //BufferRec.Part := Part;
              //BufferRec."Estimate Line" := "Estimate Line";
              BufferRec."Sales Document Type" := "Sales Document Type";
              BufferRec."Sales Document No." := "Sales Document No.";
              BufferRec."Sales Line No." := "Sales Line No.";
              BufferRec.Description := Description;
              BufferRec."Recipe Group" := "Recipe Group";
              BufferRec.Recipe := Recipe;
              BufferRec."Recipe Line" := "Line No.";
              IF BufferRec.INSERT THEN BEGIN
                BufferRec.Description := Description;
                BufferRec.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        SalesRcpLineRec.CLEARMARKS;
      END;
    END;

    PROCEDURE CopyFromBuffer@1210190006(lvAction@1100485001 : Integer;EstLineRec@1100485000 : Record 11072072;EstRcpLineRec@1100485002 : Record 11072075;PartLineRec@1100485003 : Record 11072076;BaseRcpLineRec@1100528900 : Record 11020582;SalesRcpLineRec@1100525000 : Record 11229789);
    VAR
      BufferRec@1100485004 : Record 11012195;
    BEGIN
      IF lvAction = 0 THEN
        WITH EstLineRec DO
          SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.", 0, '', 0, '', '', 0, TRUE, FALSE);

      IF lvAction = 1 THEN
        WITH EstRcpLineRec DO
          SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line", 0, '', 0,
          "Recipe Group", Recipe, "Line No.", TRUE, FALSE);

      IF lvAction = 2 THEN
        WITH PartLineRec DO
          SetSelection('', '', "Part Group", Part, "Line No.", 0, '', 0, '', '', 0, TRUE, FALSE);

      IF lvAction = 3 THEN
        WITH BaseRcpLineRec DO
          SetSelection('', '', '', '', 0, 0, '', 0, "Recipe Group", Recipe, "Line No.", TRUE, FALSE);

      IF lvAction = 4 THEN  //DP00481
        WITH SalesRcpLineRec DO
          SetSelection('', '', '', '', 0, "Sales Document Type", "Sales Document No.", "Sales Line No.",
            "Recipe Group", Recipe, "Line No.", TRUE, FALSE);

      CopyLines(BufferRec);
    END;

    PROCEDURE ShowBuffer@1210190007(lvAction@1100485002 : Integer;EstLineRec@1100485000 : Record 11072072;EstRcpLineRec@1100485001 : Record 11072075;PartLineRec@1100485005 : Record 11072076;BaseRcpLineRec@1100528900 : Record 11020582;SalesRcpLineRec@1100525001 : Record 11229789);
    VAR
      BufferRec@1100485004 : Record 11012195;
      BufferFrm@1100525000 : Page 11012250;
    BEGIN
      BufferRec.FILTERGROUP(2);
      BufferRec.SETRANGE("User ID", USERID);
      BufferRec.FILTERGROUP(0);

      IF lvAction = 0 THEN
        WITH EstLineRec DO
          BufferFrm.SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.", '', '', 0, FALSE, TRUE);

      IF lvAction = 1 THEN
        WITH EstRcpLineRec DO
          BufferFrm.SetSelection("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
          "Recipe Group", Recipe, "Line No.", FALSE, TRUE);

      IF lvAction = 2 THEN
        WITH PartLineRec DO
          BufferFrm.SetSelection('', '', "Part Group", Part, "Line No.", '', '', 0, FALSE,TRUE);

      IF lvAction = 3 THEN
        WITH BaseRcpLineRec DO
          BufferFrm.SetSelection('', '', '', '', 0, "Recipe Group", Recipe, "Line No.", FALSE,TRUE);

      IF lvAction = 4 THEN  //DP00481
        WITH SalesRcpLineRec DO
          BufferFrm.SetSelectionNEW('', '', '', '', 0,"Sales Document Type", "Sales Document No.", "Sales Line No.",
          "Recipe Group", Recipe, "Line No.", FALSE,TRUE);

      BufferFrm.SETTABLEVIEW(BufferRec);
      BufferFrm.RUNMODAL;
      CLEAR(BufferFrm);
    END;

    PROCEDURE SetSelection@1210190004(lvEst@1210190000 : Code[20];lvSubEst@1210190001 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190003 : Code[20];lvEstLine@1210190004 : Integer;lvSalesDocType@1100525002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal';lvSalesDocno@1100525001 : Code[20];lvSalesline@1100525000 : Integer;lvRcpGrp@1100485000 : Code[20];lvRcp@1100485001 : Code[20];lvRcpLine@1100485002 : Integer;lvSkipMark@1100485003 : Boolean;lvSelectDest@1100485004 : Boolean);
    BEGIN
      gvEst := lvEst;
      gvSubEst := lvSubEst;
      gvPartGrp := lvPartGrp;
      gvPart := lvPart;
      gvEstLine := lvEstLine;
      gvSalesDocType := lvSalesDocType;
      gvSalesDocno := lvSalesDocno;
      gvSalesline := lvSalesline;
      gvRcpGrp := lvRcpGrp;
      gvRcp := lvRcp;
      gvRcpLine := lvRcpLine;
      SkipMark := lvSkipMark;
      SelectDest := lvSelectDest;

      IF gvSalesDocno = '' THEN BEGIN
        IF gvEst = '' THEN BEGIN
          IF gvRcp = '' THEN
            gvDest := 20
          ELSE
            gvDest := 10;
        END ELSE BEGIN
          IF gvRcp = '' THEN
            gvDest := 0
          ELSE
            gvDest := 1;
        END;
      END ELSE BEGIN
        gvDest := 100;
      END;
    END;

    PROCEDURE CopyLines@1210190000(VAR BufferRec@1100485004 : Record 11012195);
    VAR
      EstRec@1210190002 : Record 11012151;
      EstPartRec@1210190000 : Record 11072073;
      StdPartRec@1100485006 : Record 11012169;
      OrigEstLineRec@1210190001 : Record 11072072;
      DestEstLineRec@1210190003 : Record 11072072;
      RcpRec@1100485001 : Record 11020581;
      OrigRcpLineRec@1100485002 : Record 11072075;
      DestRcpLineRec@1100485003 : Record 11072075;
      OrigPartLineRec@1100485007 : Record 11072076;
      DestPartLineRec@1100485008 : Record 11072076;
      lvBufferRec@1100485005 : Record 11012195;
      OrigBaseRcpLineRec@1100528901 : Record 11020582;
      DestBaseRcpLineRec@1100528900 : Record 11020582;
      SalesRcpRec@1100525000 : Record 11229788;
      OrigSalesRcpLineRec@1100525002 : Record 11229789;
      DestSalesRcpLineRec@1100525001 : Record 11229789;
      EstSetup@1100409000 : Record 11012150;
    BEGIN
      EstSetup.GET;  //db, 03-02-15: C020959
      lvBufferRec.COPY(BufferRec);
      WITH BufferRec DO BEGIN
        IF SkipMark = TRUE THEN BEGIN
          SETRANGE("User ID", USERID);
          SETRANGE(Store, FALSE);
          IF NOT FINDSET THEN
            EXIT;
        END ELSE BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
            EXIT;
          END;
        END;

        MarkNo := COUNT;
        CurrLino := 0;
        PrevLino := 0;
        Gap := 0;
        CLEAR(RcpRec);
        CLEAR(SalesRcpRec);
        CLEAR(StdPartRec);
        CLEAR(EstPartRec);

        CASE gvDest OF
          0,  //estimate line
          1:  //estimate recipe line
            BEGIN
              EstPartRec."Estimate No." := gvEst;
              EstPartRec."Sub-Estimate No." := gvSubEst;
              EstPartRec."Part Group" := gvPartGrp;
              EstPartRec.Part := gvPart;
              IF SelectDest THEN BEGIN
                EstPartRec.SETRANGE("Estimate No.", gvEst);
                IF PAGE.RUNMODAL(0, EstPartRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                IF gvDest = 0 THEN
                  CurrLino := gvEstLine;
                IF gvDest = 1 THEN BEGIN
                  CurrLino := gvRcpLine;
                  RcpRec."Recipe Group" := gvRcpGrp;
                  RcpRec."No." := gvRcp;
                END;
              END;
              IF gvDest = 0 THEN
                DetermineLino(
                  EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.",
                  EstPartRec."Part Group", EstPartRec.Part, CurrLino,
                  0, '', 0,
                  '', '', 0);
              IF gvDest = 1 THEN
                DetermineLino(
                  gvEst, gvSubEst,
                  gvPartGrp, gvPart, gvEstLine,
                  0, '', 0,
                  RcpRec."Recipe Group", RcpRec."No.", CurrLino);
              EstRec.GET(EstPartRec."Estimate No.");
              EstRec.TESTFIELD(Fixed, FALSE);
            END;
          10:  //standard recipe line
            BEGIN
              RcpRec."Recipe Group" := gvRcpGrp;
              RcpRec."No." := gvRcp;
              IF SelectDest THEN BEGIN
                RcpRec.SETRANGE("Recipe Group", gvRcpGrp);
                IF PAGE.RUNMODAL(0, RcpRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                CurrLino := gvRcpLine;
              END;
              DetermineLino(
                gvEst, gvSubEst,
                gvPartGrp, gvPart, gvEstLine,
                0, '', 0,
                RcpRec."Recipe Group", RcpRec."No.", CurrLino);
              RcpRec.GET(RcpRec."Recipe Group", RcpRec."No.");
              RcpRec.TESTFIELD(Fixed, FALSE);
            END;
          20:  //standart part line
            BEGIN
              StdPartRec."Part Group" := gvPartGrp;
              StdPartRec.Code := gvPart;
              IF SelectDest THEN BEGIN
                StdPartRec.SETRANGE("Part Group", gvPartGrp);
                IF PAGE.RUNMODAL(0, StdPartRec) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                CurrLino := gvEstLine;
              END;
              DetermineLino('', '', StdPartRec."Part Group", StdPartRec.Code, 0,
               0, '', 0,
               '', '', 0);
            END;
          100:  //sales recipe line   //DP00481
            BEGIN
              SalesRcpRec."Sales Document Type" := gvSalesDocType;
              SalesRcpRec."Sales Document No." := gvSalesDocno;
              SalesRcpRec."Sales Line No." := gvSalesline;
              SalesRcpRec."Recipe Group" := gvRcpGrp;
              SalesRcpRec."No." := gvRcp;
              IF SelectDest THEN BEGIN
                //RcpRec.SETRANGE("Recipe Group", gvRcpGrp);
                //IF PAGE.RUNMODAL(0, RcpRec) <> ACTION::LookupOK THEN EXIT;
                ERROR('Select Destination for Sales Recipe not implemented');
              END ELSE BEGIN
                CurrLino := gvRcpLine;
              END;
              DetermineLino(
                gvEst, gvSubEst,
                gvPartGrp, gvPart, gvEstLine,
                SalesRcpRec."Sales Document Type",SalesRcpRec."Sales Document No.",SalesRcpRec."Sales Line No.",
                SalesRcpRec."Recipe Group", SalesRcpRec."No.", CurrLino);
              SalesRcpRec.GET(
                SalesRcpRec."Sales Document Type",
                SalesRcpRec."Sales Document No.",
                SalesRcpRec."Sales Line No.",
                SalesRcpRec."Recipe Group",
                SalesRcpRec."No.");
              SalesRcpRec.TESTFIELD(Fixed, FALSE);
            END;

        END;

        REPEAT
          IF (gvEst = '') AND (gvRcp = '') THEN BEGIN
            //voorlopig alleen uitwisselen tussen standaard onderdelen onderling
            IF ("Estimate No." = '') AND (Recipe = '') THEN BEGIN
              IF OrigPartLineRec.GET("Part Group", Part, "Estimate Line") THEN BEGIN
                DestPartLineRec := OrigPartLineRec;
                DestPartLineRec."Part Group" := StdPartRec."Part Group";
                DestPartLineRec.Part := StdPartRec.Code;
                DestPartLineRec."Line No." := CurrLino + Gap;
                CurrLino := DestPartLineRec."Line No.";
                DestPartLineRec.INSERT(TRUE);
              END;
            END ELSE BEGIN
              IF gvDest = 20 THEN ERROR('Alleen uitwisseling tussen standaard onderdelen toegestaan');  //db, 04-09-07
            END;
          END;
          IF gvEst <> '' THEN BEGIN
            IF (gvRcp = '') OR (SelectDest = TRUE) THEN BEGIN
              //tijdelijk: selecteren bestemming werkt alleen voor onderdeel, niet voor recept(=calc.regel)
              //bestemming: calculatieregel
              IF "Recipe Line" = 0 THEN BEGIN
                //oorsprong: calculatieregel
                IF OrigEstLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line") THEN
                BEGIN
                  DestEstLineRec := OrigEstLineRec;
                  DestEstLineRec."Estimate No." := EstPartRec."Estimate No.";
                  DestEstLineRec."Sub-Estimate No." := EstPartRec."Sub-Estimate No.";
                  DestEstLineRec."Part Group" := EstPartRec."Part Group";
                  DestEstLineRec.Part := EstPartRec.Part;
                  DestEstLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestEstLineRec."Line No.";
                  DestEstLineRec.INSERT(TRUE);
                  //db.sn, 31-07-14: C016435
                  IF OrigEstLineRec."Surcharge % Labor" <> 0 THEN
                    DestEstLineRec."Surcharge % Labor" := OrigEstLineRec."Surcharge % Labor";
                  IF OrigEstLineRec."Surcharge % Price" <> 0 THEN
                    DestEstLineRec."Surcharge % Price" :=  OrigEstLineRec."Surcharge % Price";
                  //db.en, 31-07-14: C016435
                  DestEstLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                  DestEstLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                  IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, FALSE);
                  IF DestEstLineRec."Currency Code" = '' THEN
                    DestEstLineRec.VALIDATE("Gross Price")
                  ELSE BEGIN
                    DestEstLineRec.SetSkipValidateFCY(TRUE);
                    DestEstLineRec.VALIDATE("Gross Price (FCY)");
                  END;
                  GetSalesDiscountEstLine(DestEstLineRec);  //db, 23-05-13: C006745
                  IF EstSetup."Init Sales From Cost" THEN
                    DestEstLineRec.InitSalesFromCost;  //db, 03-02-15: C020959
                  DestEstLineRec.CalculateTotals;  //DP00381
                  DestEstLineRec.MODIFY;
                  CopyDetails(
                    OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                    OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.", '', '', 0,
                    DestEstLineRec."Estimate No.", DestEstLineRec."Sub-Estimate No.",
                    DestEstLineRec."Part Group", DestEstLineRec.Part, DestEstLineRec."Line No.", '', '', 0,
                    (Recipe<>''));  //DP00381
                END;
              END ELSE BEGIN
                //oorsprong: receptregel
                IF OrigRcpLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line",
                  "Recipe Group", Recipe, "Recipe Line") THEN
                BEGIN
                  DestEstLineRec."Estimate No." := EstPartRec."Estimate No.";
                  DestEstLineRec."Sub-Estimate No." := EstPartRec."Sub-Estimate No.";
                  DestEstLineRec."Part Group" := EstPartRec."Part Group";
                  DestEstLineRec.Part := EstPartRec.Part;
                  DestEstLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestEstLineRec."Line No.";
                  AssignRecipeToEstimateLine(DestEstLineRec, OrigRcpLineRec);
                  DestEstLineRec.INSERT(TRUE);
                  //db.sn, 31-07-14: C016435
                  IF OrigRcpLineRec."Surcharge % Labor" <> 0 THEN
                    DestEstLineRec."Surcharge % Labor" := OrigRcpLineRec."Surcharge % Labor";
                  IF OrigRcpLineRec."Surcharge % Price" <> 0 THEN
                    DestEstLineRec."Surcharge % Price" :=  OrigRcpLineRec."Surcharge % Price";
                  //db.en, 31-07-14: C016435
                  DestEstLineRec."Price Agreement" := OrigRcpLineRec."Price Agreement";
                  DestEstLineRec."Norm Agreement" := OrigRcpLineRec."Norm Agreement";
                  IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, FALSE);
                  IF DestEstLineRec."Currency Code" = '' THEN
                    DestEstLineRec.VALIDATE("Gross Price")
                  ELSE BEGIN
                    DestEstLineRec.SetSkipValidateFCY(TRUE);
                    DestEstLineRec.VALIDATE("Gross Price (FCY)");
                  END;
                  GetSalesDiscountEstLine(DestEstLineRec);  //db, 23-05-13: C006745
                  IF EstSetup."Init Sales From Cost" THEN
                    DestEstLineRec.InitSalesFromCost;  //db, 03-02-15: C020959
                  DestEstLineRec.CalculateTotals;  //DP00381
                  DestEstLineRec.MODIFY;
                  CopyDetails(
                    OrigRcpLineRec."Estimate No.", OrigRcpLineRec."Sub-Estimate No.",
                    OrigRcpLineRec."Part Group", OrigRcpLineRec.Part, OrigRcpLineRec."Estimate Line",
                    OrigRcpLineRec."Recipe Group", OrigRcpLineRec.Recipe, OrigRcpLineRec."Line No.",
                    DestEstLineRec."Estimate No.", DestEstLineRec."Sub-Estimate No.",
                    DestEstLineRec."Part Group", DestEstLineRec.Part, DestEstLineRec."Line No.", '', '', 0,
                    FALSE);  //DP00381
                END;
              END;
            END ELSE BEGIN
              //bestemming: receptregel (calculatie)
              //tijdelijk: werkt alleen zonder selectie bestemming
              IF "Recipe Line" = 0 THEN BEGIN
                //oorsprong: calculatieregel
                IF OrigEstLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line") THEN
                BEGIN
                  DestRcpLineRec.INIT;
                  DestRcpLineRec."Estimate No." := gvEst;
                  DestRcpLineRec."Sub-Estimate No." := gvSubEst;
                  DestRcpLineRec."Part Group" := gvPartGrp;
                  DestRcpLineRec.Part := gvPart;
                  DestRcpLineRec."Estimate Line" := gvEstLine;
                  DestRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                  DestRcpLineRec.Recipe := RcpRec."No.";
                  DestRcpLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestRcpLineRec."Line No.";
                  AssignEstimateToRecipeLine(DestRcpLineRec, OrigEstLineRec);
                  DestRcpLineRec.INSERT(TRUE);
                  //db.sn, 31-07-14: C016435
                  IF OrigEstLineRec."Surcharge % Labor" <> 0 THEN
                    DestRcpLineRec."Surcharge % Labor" := OrigEstLineRec."Surcharge % Labor";
                  IF OrigEstLineRec."Surcharge % Price" <> 0 THEN
                    DestRcpLineRec."Surcharge % Price" :=  OrigEstLineRec."Surcharge % Price";
                  //db.en, 31-07-14: C016435
                  DestRcpLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                  DestRcpLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                  IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, TRUE);
                  IF DestEstLineRec."Currency Code" = '' THEN
                    DestRcpLineRec.VALIDATE("Gross Price")
                  ELSE BEGIN
                    DestEstLineRec.SetSkipValidateFCY(TRUE);
                    DestEstLineRec.VALIDATE("Gross Price (FCY)");
                  END;
                  GetSalesDiscountRcpLine(DestRcpLineRec);  //db, 23-05-13: C006745
                  IF EstSetup."Init Sales From Cost" THEN
                    DestRcpLineRec.InitSalesFromCost;  //db, 03-02-15: C020959
                  DestRcpLineRec.CalculateTotals;  //DP00381
                  DestRcpLineRec.MODIFY;
                  CopyDetails(
                    OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                    OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.",
                    '', '', 0,
                    DestRcpLineRec."Estimate No.", DestRcpLineRec."Sub-Estimate No.",
                    DestRcpLineRec."Part Group", DestRcpLineRec.Part, DestRcpLineRec."Estimate Line",
                    DestRcpLineRec."Recipe Group", DestRcpLineRec.Recipe, DestRcpLineRec."Line No.",
                    FALSE);  //DP00381
                END;
              END ELSE BEGIN
                //oorsprong: receptregel
                IF OrigRcpLineRec.GET(
                  "Estimate No.", "Sub-Estimate No.",
                  "Part Group", Part, "Estimate Line",
                  "Recipe Group", Recipe, "Recipe Line") THEN
                BEGIN
                  DestRcpLineRec := OrigRcpLineRec;
                  DestRcpLineRec."Estimate No." := gvEst;
                  DestRcpLineRec."Sub-Estimate No." := gvSubEst;
                  DestRcpLineRec."Part Group" := gvPartGrp;
                  DestRcpLineRec.Part := gvPart;
                  DestRcpLineRec."Estimate Line" := gvEstLine;
                  DestRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                  DestRcpLineRec.Recipe := RcpRec."No.";
                  DestRcpLineRec."Line No." := CurrLino + Gap;
                  CurrLino := DestRcpLineRec."Line No.";
                  DestRcpLineRec.INSERT(TRUE);
                  //db.sn, 31-07-14: C016435
                  IF OrigRcpLineRec."Surcharge % Labor" <> 0 THEN
                    DestRcpLineRec."Surcharge % Labor" := OrigRcpLineRec."Surcharge % Labor";
                  IF OrigRcpLineRec."Surcharge % Price" <> 0 THEN
                    DestRcpLineRec."Surcharge % Price" :=  OrigRcpLineRec."Surcharge % Price";
                  //db.en, 31-07-14: C016435
                  DestRcpLineRec."Price Agreement" := OrigRcpLineRec."Price Agreement";
                  DestRcpLineRec."Norm Agreement" := OrigRcpLineRec."Norm Agreement";
                  IF EstSetup."Copy Norm Group from Target" THEN  //db, 10-02-15: C009772
                    CheckDefaultNormGroup(DestEstLineRec, DestRcpLineRec, TRUE);
                  IF DestEstLineRec."Currency Code" = '' THEN
                    DestRcpLineRec.VALIDATE("Gross Price")
                  ELSE BEGIN
                    DestEstLineRec.SetSkipValidateFCY(TRUE);
                    DestEstLineRec.VALIDATE("Gross Price (FCY)");
                  END;
                  GetSalesDiscountRcpLine(DestRcpLineRec);  //db, 23-05-13: C006745
                  IF EstSetup."Init Sales From Cost" THEN
                    DestRcpLineRec.InitSalesFromCost;  //db, 03-02-15: C020959
                  DestRcpLineRec.CalculateTotals;  //DP00381
                  DestRcpLineRec.MODIFY;
                  CopyDetails(
                    OrigRcpLineRec."Estimate No.", OrigRcpLineRec."Sub-Estimate No.",
                    OrigRcpLineRec."Part Group", OrigRcpLineRec.Part, OrigRcpLineRec."Estimate Line",
                    OrigRcpLineRec."Recipe Group", OrigRcpLineRec.Recipe, OrigRcpLineRec."Line No.",
                    DestRcpLineRec."Estimate No.", DestRcpLineRec."Sub-Estimate No.",
                    DestRcpLineRec."Part Group", DestRcpLineRec.Part, DestRcpLineRec."Estimate Line",
                    DestRcpLineRec."Recipe Group", DestRcpLineRec.Recipe, DestRcpLineRec."Line No.",
                    FALSE);  //DP00381
                END;
              END;
            END;
          END ELSE BEGIN
            //bestemming: receptregel (standaard)
            IF "Recipe Line" = 0 THEN BEGIN
              //oorsprong: calculatieregel
              IF OrigEstLineRec.GET(
                "Estimate No.", "Sub-Estimate No.",
                "Part Group", Part, "Estimate Line") THEN
              BEGIN
                DestBaseRcpLineRec.INIT;
                AssignEstimateToRecipeLine(DestRcpLineRec, OrigEstLineRec);
                DestBaseRcpLineRec.TRANSFERFIELDS(DestRcpLineRec);
                DestBaseRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                DestBaseRcpLineRec.Recipe := RcpRec."No.";
                DestBaseRcpLineRec."Line No." := CurrLino + Gap;
                CurrLino := DestBaseRcpLineRec."Line No.";
                DestBaseRcpLineRec.INSERT(TRUE);
                DestBaseRcpLineRec."Price Agreement" := OrigEstLineRec."Price Agreement";
                DestBaseRcpLineRec."Norm Agreement" := OrigEstLineRec."Norm Agreement";
                DestBaseRcpLineRec.CalculateTotals;  //DP00381
                DestBaseRcpLineRec.MODIFY;
                CopyDetails(
                  OrigEstLineRec."Estimate No.", OrigEstLineRec."Sub-Estimate No.",
                  OrigEstLineRec."Part Group", OrigEstLineRec.Part, OrigEstLineRec."Line No.",
                  '', '', 0,
                  '', '',
                  '', '', 0,
                  DestBaseRcpLineRec."Recipe Group", DestBaseRcpLineRec.Recipe, DestBaseRcpLineRec."Line No.",
                  FALSE);  //DP00381
              END;
            END ELSE BEGIN
              //oorsprong: receptregel
              IF OrigBaseRcpLineRec.GET("Recipe Group", Recipe, "Recipe Line") THEN
              BEGIN
                DestBaseRcpLineRec := OrigBaseRcpLineRec;
                DestBaseRcpLineRec."Recipe Group" := RcpRec."Recipe Group";
                DestBaseRcpLineRec.Recipe := RcpRec."No.";
                DestBaseRcpLineRec."Line No." := CurrLino + Gap;
                CurrLino := DestBaseRcpLineRec."Line No.";
                DestBaseRcpLineRec.INSERT(TRUE);
                DestBaseRcpLineRec."Price Agreement" := OrigRcpLineRec."Price Agreement";
                DestBaseRcpLineRec."Norm Agreement" := OrigRcpLineRec."Norm Agreement";
                DestBaseRcpLineRec.CalculateTotals;  //DP00381
                DestBaseRcpLineRec.MODIFY;
                CopyDetails(
                  '', '',
                  '', '', 0,
                  OrigBaseRcpLineRec."Recipe Group", OrigBaseRcpLineRec.Recipe, OrigBaseRcpLineRec."Line No.",
                  '', '',
                  '', '', 0,
                  DestBaseRcpLineRec."Recipe Group", DestBaseRcpLineRec.Recipe, DestBaseRcpLineRec."Line No.",
                  FALSE);  //DP00381
              END;
            END;
          END;
        UNTIL NEXT = 0;

        IF SkipMark = TRUE THEN BEGIN
          DELETEALL;
        END ELSE BEGIN
          MARKEDONLY(FALSE);
          MESSAGE(Text001, MarkNo);
        END;
      END;
      BufferRec.CLEARMARKS;
    END;

    PROCEDURE DetermineLino@1100485003(lvEst@1100485008 : Code[20];lvSubEst@1100485007 : Code[20];lvPartGrp@1100485006 : Code[20];lvPart@1100485005 : Code[20];lvEstLine@1100485004 : Integer;lvSalesDocType@1100525002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Invoice Proposal';lvSalesDocno@1100525001 : Code[20];lvSalesline@1100525000 : Integer;lvRcpGrp@1100485003 : Code[20];lvRcp@1100485002 : Code[20];lvRcpLine@1100485001 : Integer);
    VAR
      lvEstLineRec@1100485000 : Record 11072072;
      lvEstRcpLineRec@1100485009 : Record 11072075;
      lvPartLineRec@1100485010 : Record 11072076;
      lvBaseRcpLineRec@1100528900 : Record 11020582;
      lvSalesRcpLineRec@1100525003 : Record 11229789;
    BEGIN
      IF (lvEst = '') AND (lvRcp = '') THEN BEGIN
        WITH lvPartLineRec DO BEGIN
          LOCKTABLE;
          SETRANGE("Part Group", lvPartGrp);
          SETRANGE(Part, lvPart);
          IF GET(lvPartGrp, lvPart, CurrLino) THEN BEGIN
            SETFILTER("Line No.", '<%1', CurrLino);
            IF FINDLAST THEN PrevLino := "Line No.";
            SETRANGE("Line No.");
            CheckGap;
          END;
          IF Gap = 0 THEN BEGIN
            Gap := 10000;
            IF FINDLAST THEN
              CurrLino := "Line No.";
          END;
        END;
        EXIT;
      END;

      IF lvRcp = '' THEN BEGIN
        WITH lvEstLineRec DO BEGIN
          LOCKTABLE;
          SETRANGE("Estimate No.", lvEst);
          SETRANGE("Sub-Estimate No.", lvSubEst);
          SETRANGE("Part Group", lvPartGrp);
          SETRANGE(Part, lvPart);
          IF GET(lvEst, lvSubEst, lvPartGrp, lvPart, CurrLino) THEN BEGIN
            SETFILTER("Line No.", '<%1', CurrLino);
            IF FINDLAST THEN PrevLino := "Line No.";
            SETRANGE("Line No.");
            CheckGap;
          END;
          IF Gap = 0 THEN BEGIN
            Gap := 10000;
            IF FINDLAST THEN
              CurrLino := "Line No.";
          END;
        END;
      END ELSE BEGIN
        IF lvEst = '' THEN BEGIN
          IF lvSalesDocno ='' THEN BEGIN

            WITH lvBaseRcpLineRec DO BEGIN
              LOCKTABLE;
              SETRANGE("Recipe Group", lvRcpGrp);
              SETRANGE(Recipe, lvRcp);
              IF GET(lvRcpGrp, lvRcp, CurrLino) THEN BEGIN
                SETFILTER("Line No.", '<%1', CurrLino);
                IF FINDLAST THEN PrevLino := "Line No.";
                SETRANGE("Line No.");
                CheckGap;
              END;
              IF Gap = 0 THEN BEGIN
                Gap := 10000;
                IF FINDLAST THEN
                  CurrLino := "Line No.";
              END;
            END;

          END ELSE BEGIN

            WITH lvSalesRcpLineRec DO BEGIN     //DP00481
              LOCKTABLE;
              SETRANGE("Sales Document Type", lvSalesDocType);
              SETRANGE("Sales Document No.", lvSalesDocno);
              SETRANGE("Sales Line No.", lvSalesline);
              SETRANGE("Recipe Group", lvRcpGrp);
              SETRANGE(Recipe, lvRcp);
              IF GET(lvSalesDocType,lvSalesDocno,lvSalesline, lvRcpGrp, lvRcp, CurrLino) THEN BEGIN
                SETFILTER("Line No.", '<%1', CurrLino);
                IF FINDLAST THEN PrevLino := "Line No.";
                SETRANGE("Line No.");
                CheckGap;
              END;
              IF Gap = 0 THEN BEGIN
                Gap := 10000;
                IF FINDLAST THEN
                  CurrLino := "Line No.";
              END;
            END;

          END;
        END ELSE BEGIN
          WITH lvEstRcpLineRec DO BEGIN
            LOCKTABLE;
            SETRANGE("Estimate No.", lvEst);
            SETRANGE("Sub-Estimate No.", lvSubEst);
            SETRANGE("Part Group", lvPartGrp);
            SETRANGE(Part, lvPart);
            SETRANGE("Estimate Line", lvEstLine);
            SETRANGE("Recipe Group", lvRcpGrp);
            SETRANGE(Recipe, lvRcp);
            IF GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, lvRcpGrp, lvRcp, CurrLino) THEN BEGIN
              SETFILTER("Line No.", '<%1', CurrLino);
              IF FINDLAST THEN PrevLino := "Line No.";
              SETRANGE("Line No.");
              CheckGap;
            END;
            IF Gap = 0 THEN BEGIN
              Gap := 10000;
              IF FINDLAST THEN
                CurrLino := "Line No.";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CheckGap@1100485002();
    BEGIN
      Gap := ROUND((CurrLino - PrevLino) / (MarkNo + 1), 1);
      IF (Gap * MarkNo) >= (CurrLino - PrevLino) THEN Gap := 0;
      CurrLino := PrevLino;
    END;

    PROCEDURE AssignEstimateToRecipeLine@1100485004(VAR RcpLineRec@1100485000 : Record 11072075;EstLineRec@1100485001 : Record 11072072);
    BEGIN
      WITH RcpLineRec DO BEGIN
        "Cost Type (Price)" := EstLineRec."Cost Type (Price)";  //db, 31-03-14
        Description := EstLineRec.Description;
        Quantity := EstLineRec.Quantity;
        "Quantity (Sales)" := EstLineRec."Quantity (Sales)";
        "Unit of Measure" := EstLineRec."Unit of Measure";
        "Norm Group" := EstLineRec."Norm Group";
        "Norm Group (Sales)" := EstLineRec."Norm Group (Sales)";
        "Sub Operation Code" := EstLineRec."Sub Operation Code";
        Norm := EstLineRec.Norm;
        "Norm (Sales)" := EstLineRec."Norm (Sales)";
        "Rate Code" := EstLineRec."Rate Code";
        "Cost Rate" := EstLineRec."Cost Rate";
        "Sales Rate" := EstLineRec."Sales Rate";
        "Wage Component" := EstLineRec."Wage Component";  //DP00236
        "Nett Cost Price" := EstLineRec."Nett Cost Price";
        "Project No." := EstLineRec."Project No.";
        Element := EstLineRec.Element;
        "Project Planning Activity Code" := EstLineRec."Project Planning Activity Code";
        "Cost Object Labor" := EstLineRec."Cost Object Labor";
        "Cost Object Price" := EstLineRec."Cost Object Price";
        "Cost Component" := EstLineRec."Cost Component";
        "Item No." := EstLineRec."Item No.";
        "Basic Item" := EstLineRec."Basic Item";
        "Trade Item" := EstLineRec."Trade Item";
        "Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
        Manufacturer := EstLineRec.Manufacturer;
        "Gross Price" := EstLineRec."Gross Price";
        "Purchase Discount %" := EstLineRec."Purchase Discount %";
        "Nett Sales Price" := EstLineRec."Nett Sales Price";
        "Sales Discount %" := EstLineRec."Sales Discount %";
        "Price Reference Date" := EstLineRec."Price Reference Date";
        "Rate Type" := EstLineRec."Rate Type";
        "Team Size" := EstLineRec."Team Size";
        "Time Quantity" := EstLineRec."Time Quantity";
        "Unit of Time" := EstLineRec."Unit of Time";
        "Surcharge %" := EstLineRec."Surcharge %";
        "Surcharge Type" := EstLineRec."Surcharge Type";
        "Line Status" := EstLineRec."Line Status";
        Length := EstLineRec.Length;
        Width := EstLineRec.Width;
        Height := EstLineRec.Height;
        "Adjustment Factor Hours" := EstLineRec."Adjustment Factor Hours";
        "Adjustment Factor Price" := EstLineRec."Adjustment Factor Price";
        "Adj. Factor Hours (Sales)" := EstLineRec."Adj. Factor Hours (Sales)";  //DP00555
        "Cum. Adj. Factor Hours" := EstLineRec."Cum. Adj. Factor Hours";
        "Cum. Adj. Factor Price" := EstLineRec."Cum. Adj. Factor Price";
        "Cum. Adj. Factor Hours (Sales)" := EstLineRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
        "External Text" := EstLineRec."External Text";
        "External Text Block" := EstLineRec."External Text Block";
        "Internal Text" := EstLineRec."Internal Text";
        "Internal Text Block" := EstLineRec."Internal Text Block";
        "Ask for Quote" := EstLineRec."Ask for Quote";
        "Purchase Route Reference" := EstLineRec."Purchase Route Reference";
        "Document No." := EstLineRec."Document No.";
        Code := EstLineRec.Code;
        "Price Agreement" := EstLineRec."Price Agreement";
        "Norm Agreement" := EstLineRec."Norm Agreement";
        Vendor := EstLineRec.Vendor;
        Subcontractor := EstLineRec.Subcontractor;
        //db.sn, 21-01-10
        "Buy Back Price" := EstLineRec."Buy Back Price";
        "Buy Back %" := EstLineRec."Buy Back %";
        "Purchase Discount %" := EstLineRec."Purchase Discount %";
        "Sales Discount %" := EstLineRec."Sales Discount %";
        Weight := EstLineRec.Weight;
        Discipline := EstLineRec.Discipline;
        "Trade Speciality" := EstLineRec."Trade Speciality";
        "Trade Expertise" := EstLineRec."Trade Expertise";
        "Removal Contribution" := EstLineRec."Removal Contribution";
        "Scheme Code" := EstLineRec."Scheme Code";
        Comments := EstLineRec.Comments;
        Supply := EstLineRec.Supply;
        "Comments for Logistics" := EstLineRec."Comments for Logistics";
        "Material Sheet" := EstLineRec."Material Sheet";
        "Plant Type" := EstLineRec."Plant Type";
        "Plant Price Type" := EstLineRec."Plant Price Type";
        "Start Rental Period" := EstLineRec."Start Rental Period";
        "End Rental Period" := EstLineRec."End Rental Period";
        "Rental Period Formula" := EstLineRec."Rental Period Formula";
        "Rental Time Units" := EstLineRec."Rental Time Units";
        Admicode := EstLineRec.Admicode;
        "Purchase Action Mat." := EstLineRec."Purchase Action Mat.";
        "Purchase Phase Mat." := EstLineRec."Purchase Phase Mat.";
        "Purchase Action Subc." := EstLineRec."Purchase Action Subc.";
        "Purchase Phase Subc." := EstLineRec."Purchase Phase Subc.";
        "Purchase Action Plant" := EstLineRec."Purchase Action Plant";
        "Purchase Phase Plant" := EstLineRec."Purchase Phase Plant";
        "Object Type" := EstLineRec."Object Type";
        "Object Brand" := EstLineRec."Object Brand";
        //db.en, 21-01-10
        "Surcharge % Labor" := EstLineRec."Surcharge % Labor";  //db, 31-07-14: C016435
        "Surcharge % Price" := EstLineRec."Surcharge % Price";  //db, 31-07-14: C016435
        "Quantity Sheet Feature" := EstLineRec."Quantity Sheet Feature";  //DP00686
      END;
    END;

    PROCEDURE AssignRecipeToEstimateLine@1100485001(VAR EstLineRec@1100485000 : Record 11072072;RcpLineRec@1100485001 : Record 11072075);
    BEGIN
      WITH EstLineRec DO BEGIN
        "Cost Type (Price)" := RcpLineRec."Cost Type (Price)";  //db, 31-03-14
        Description := RcpLineRec.Description;
        Quantity := RcpLineRec.Quantity;
        "Quantity (Sales)" := RcpLineRec."Quantity (Sales)";
        "Unit of Measure" := RcpLineRec."Unit of Measure";
        "Norm Group" := RcpLineRec."Norm Group";
        "Norm Group (Sales)" := RcpLineRec."Norm Group (Sales)";
        "Sub Operation Code" := RcpLineRec."Sub Operation Code";
        Norm := RcpLineRec.Norm;
        "Norm (Sales)" := RcpLineRec."Norm (Sales)";
        "Rate Code" := RcpLineRec."Rate Code";
        "Cost Rate" := RcpLineRec."Cost Rate";
        "Sales Rate" := RcpLineRec."Sales Rate";
        "Wage Component" := RcpLineRec."Wage Component";  //DP00236
        "Nett Cost Price" := RcpLineRec."Nett Cost Price";
        "Project No." := RcpLineRec."Project No.";
        Element := RcpLineRec.Element;
        "Project Planning Activity Code" := RcpLineRec."Project Planning Activity Code";
        "Cost Object Labor" := RcpLineRec."Cost Object Labor";
        "Cost Object Price" := RcpLineRec."Cost Object Price";
        "Cost Component" := RcpLineRec."Cost Component";
        "Item No." := RcpLineRec."Item No.";
        "Basic Item" := RcpLineRec."Basic Item";
        "Trade Item" := RcpLineRec."Trade Item";
        "Vendor (Trade Item)" := RcpLineRec."Vendor (Trade Item)";
        Manufacturer := RcpLineRec.Manufacturer;
        "Gross Price" := RcpLineRec."Gross Price";
        "Purchase Discount %" := RcpLineRec."Purchase Discount %";
        "Nett Sales Price" := RcpLineRec."Nett Sales Price";
        "Sales Discount %" := RcpLineRec."Sales Discount %";
        "Price Reference Date" := RcpLineRec."Price Reference Date";
        "Rate Type" := RcpLineRec."Rate Type";
        "Team Size" := RcpLineRec."Team Size";
        "Time Quantity" := RcpLineRec."Time Quantity";
        "Unit of Time" := RcpLineRec."Unit of Time";
        "Surcharge %" := RcpLineRec."Surcharge %";
        "Surcharge Type" := RcpLineRec."Surcharge Type";
        "Line Status" := RcpLineRec."Line Status";
        Length := RcpLineRec.Length;
        Width := RcpLineRec.Width;
        Height := RcpLineRec.Height;
        "Adjustment Factor Hours" := RcpLineRec."Adjustment Factor Hours";
        "Adjustment Factor Price" := RcpLineRec."Adjustment Factor Price";
        "Adj. Factor Hours (Sales)" := RcpLineRec."Adj. Factor Hours (Sales)";  //DP00555
        "Cum. Adj. Factor Hours" := RcpLineRec."Cum. Adj. Factor Hours";
        "Cum. Adj. Factor Price" := RcpLineRec."Cum. Adj. Factor Price";
        "Cum. Adj. Factor Hours (Sales)" := RcpLineRec."Cum. Adj. Factor Hours (Sales)";  //DP00555
        "External Text" := RcpLineRec."External Text";
        "External Text Block" := RcpLineRec."External Text Block";
        "Internal Text" := RcpLineRec."Internal Text";
        "Internal Text Block" := RcpLineRec."Internal Text Block";
        "Ask for Quote" := RcpLineRec."Ask for Quote";
        "Purchase Route Reference" := RcpLineRec."Purchase Route Reference";
        "Document No." := RcpLineRec."Document No.";
        Code := RcpLineRec.Code;
        "Price Agreement" := RcpLineRec."Price Agreement";
        "Norm Agreement" := RcpLineRec."Norm Agreement";
        Vendor := RcpLineRec.Vendor;
        Subcontractor := RcpLineRec.Subcontractor;
        //db.sn, 21-01-10
        "Buy Back Price" := RcpLineRec."Buy Back Price";
        "Buy Back %" := RcpLineRec."Buy Back %";
        "Purchase Discount %" := RcpLineRec."Purchase Discount %";
        "Sales Discount %" := RcpLineRec."Sales Discount %";
        Weight := RcpLineRec.Weight;
        Discipline := RcpLineRec.Discipline;
        "Trade Speciality" := RcpLineRec."Trade Speciality";
        "Trade Expertise" := RcpLineRec."Trade Expertise";
        "Removal Contribution" := RcpLineRec."Removal Contribution";
        "Scheme Code" := RcpLineRec."Scheme Code";
        Comments := RcpLineRec.Comments;
        Supply := RcpLineRec.Supply;
        "Comments for Logistics" := RcpLineRec."Comments for Logistics";
        "Material Sheet" := RcpLineRec."Material Sheet";
        "Plant Type" := RcpLineRec."Plant Type";
        "Plant Price Type" := RcpLineRec."Plant Price Type";
        "Start Rental Period" := RcpLineRec."Start Rental Period";
        "End Rental Period" := RcpLineRec."End Rental Period";
        "Rental Period Formula" := RcpLineRec."Rental Period Formula";
        "Rental Time Units" := RcpLineRec."Rental Time Units";
        Admicode := RcpLineRec.Admicode;
        "Purchase Action Mat." := RcpLineRec."Purchase Action Mat.";
        "Purchase Phase Mat." := RcpLineRec."Purchase Phase Mat.";
        "Purchase Action Subc." := RcpLineRec."Purchase Action Subc.";
        "Purchase Phase Subc." := RcpLineRec."Purchase Phase Subc.";
        "Purchase Action Plant" := RcpLineRec."Purchase Action Plant";
        "Purchase Phase Plant" := RcpLineRec."Purchase Phase Plant";
        "Object Type" := RcpLineRec."Object Type";
        "Object Brand" := RcpLineRec."Object Brand";
        //db.en, 21-01-10
        "Surcharge % Labor" := RcpLineRec."Surcharge % Labor";  //db, 31-07-14: C016435
        "Surcharge % Price" := RcpLineRec."Surcharge % Price";  //db, 31-07-14: C016435
        "Quantity Sheet Feature" := RcpLineRec."Quantity Sheet Feature";  //DP00686
      END;
    END;

    PROCEDURE GetSalesDiscountEstLine@1100525001(VAR EstLineRec@1100525007 : Record 11072072);
    VAR
      ValidateCu@1100525008 : Codeunit 11012033;
      lvEstRec@1100525000 : Record 11012151;
      lvRefDate@1100525006 : Date;
      lvDiscRef1@1100525005 : Code[20];
      lvDiscRef2@1100525004 : Code[20];
      lvRefPrio@1100525003 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      //db, 23-05-13: C006745
      WITH EstLineRec DO BEGIN
        lvEstRec.GET("Estimate No.");
        IF (lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales) OR (lvEstRec.Converted=TRUE) THEN BEGIN  //db, 12-09-14: C016673
          GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
          lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
          ValidateCu.GetSalesDiscount(
            lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
            "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          VALIDATE("Nett Sales Price");
          UpdateSalesPriceFromCostPrice;  //db, 04-12-14: C019587
          CalculateTotals;  //db, 28-05-13
        END;
      END;
    END;

    PROCEDURE GetSalesDiscountRcpLine@1100525000(VAR RcpLineRec@1100525007 : Record 11072075);
    VAR
      ValidateCu@1100525008 : Codeunit 11012033;
      lvEstRec@1100525000 : Record 11012151;
      lvRefDate@1100525006 : Date;
      lvDiscRef1@1100525005 : Code[20];
      lvDiscRef2@1100525004 : Code[20];
      lvRefPrio@1100525003 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      //db, 23-05-13: C006745
      WITH RcpLineRec DO BEGIN
        lvEstRec.GET("Estimate No.");
        IF (lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales) OR (lvEstRec.Converted=TRUE) THEN BEGIN  //db, 12-09-14: C016673
          GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
          lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
          ValidateCu.GetSalesDiscount(
            lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
            "Nett Sales Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          UpdateSalesPriceFromCostPrice;  //db, 04-12-14: C019587
          CalculateTotals;  //db, 28-05-13
        END;
      END;
    END;

    PROCEDURE CopyDetails@1100528901(EstFrom@1210190013 : Code[20];SubEstFrom@1210190011 : Code[20];PartGrpFrom@1210190009 : Code[20];EstPartFrom@1210190007 : Code[20];EstLineFrom@1210190005 : Integer;RecipeGrpFrom@1210190003 : Code[20];RecipeFrom@1210190001 : Code[20];RecipeLineFrom@1100485000 : Integer;EstTo@1210190012 : Code[20];SubEstTo@1210190010 : Code[20];PartGrpTo@1210190008 : Code[20];EstPartTo@1210190006 : Code[20];EstLineTo@1210190004 : Integer;RecipeGrpTo@1210190002 : Code[20];RecipeTo@1210190000 : Code[20];RecipeLineTo@1100485001 : Integer;CopyRecipeLine@1100528900 : Boolean);
    VAR
      EstRec@1100528925 : Record 11012151;
      EstRec2@1100528924 : Record 11012151;
      SubEstRec@1100528923 : Record 11072074;
      EstPartRec@1100528922 : Record 11072073;
      EstLineRec@1100528921 : Record 11072072;
      RgrpRec@1100528920 : Record 11020580;
      RecipeRec@1100528919 : Record 11020581;
      RcpRec2@1100528918 : Record 11020581;
      BaseRecipeLineRec@1100528901 : Record 11020582;
      BaseRcpLineRec2@1100528926 : Record 11020582;
      RecipeLineRec@1100528917 : Record 11072075;
      RcpLineRec2@1100528916 : Record 11072075;
      TextRec@1100528915 : Record 11020595;
      TextRec2@1100528914 : Record 11020595;
      EstCodeRec@1100528913 : Record 11229772;
      EstCodeRec2@1100528912 : Record 11229772;
      ChrgRec@1100528911 : Record 11229771;
      ChrgRec2@1100528910 : Record 11229771;
      QuanSheetRec@1100528909 : Record 11012186;
      QuanSheetRec2@1100528908 : Record 11012186;
      QuanModelRec@1100528907 : Record 11012197;
      QuanModelRec2@1100528906 : Record 11012197;
      EstSetup@1100525000 : Record 11012150;
    BEGIN
      //DP00381
      EstSetup.GET;  //db, 12-05-15: C009772
      IF CopyRecipeLine = TRUE THEN BEGIN
        IF (EstFrom = '') AND (EstTo = '') THEN BEGIN
          IF RecipeGrpFrom <> '' THEN
            BaseRecipeLineRec.SETRANGE("Recipe Group",RecipeGrpFrom);
          IF RecipeFrom <> '' THEN
            BaseRecipeLineRec.SETRANGE(Recipe,RecipeFrom);
          IF RecipeLineFrom <> 0 THEN
            BaseRecipeLineRec.SETRANGE("Line No.",RecipeLineFrom);
          IF BaseRecipeLineRec.FINDSET THEN BEGIN
            REPEAT
              BaseRcpLineRec2.COPY(BaseRecipeLineRec);
              IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
                BaseRcpLineRec2."Recipe Group" := RecipeGrpTo;
                IF RecipeTo <> '' THEN
                  BaseRcpLineRec2.Recipe := RecipeTo;
              END;
              BaseRcpLineRec2.INSERT(TRUE);
              BaseRcpLineRec2."Norm Agreement" := BaseRecipeLineRec."Norm Agreement";
              BaseRcpLineRec2."Price Agreement" := BaseRecipeLineRec."Price Agreement";
              BaseRcpLineRec2.MODIFY(TRUE);
            UNTIL BaseRecipeLineRec.NEXT = 0;
          END;
        END ELSE BEGIN
          IF (EstFrom <> '') AND (EstTo <> '') THEN BEGIN
            RecipeLineRec.SETRANGE("Estimate No.",EstFrom);
            RecipeLineRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
            RecipeLineRec.SETRANGE("Part Group",PartGrpFrom);
            RecipeLineRec.SETRANGE(Part,EstPartFrom);
            RecipeLineRec.SETRANGE("Estimate Line",EstLineFrom);
            IF RecipeGrpFrom <> '' THEN
              RecipeLineRec.SETRANGE("Recipe Group",RecipeGrpFrom);
            IF RecipeFrom <> '' THEN
              RecipeLineRec.SETRANGE(Recipe,RecipeFrom);
            IF RecipeLineFrom <> 0 THEN
              RecipeLineRec.SETRANGE("Line No.",RecipeLineFrom);
            IF RecipeLineRec.FINDSET THEN BEGIN
              REPEAT
                RcpLineRec2.COPY(RecipeLineRec);
                RcpLineRec2."Estimate No." := EstTo;
                RcpLineRec2."Sub-Estimate No." := SubEstTo;
                RcpLineRec2."Part Group" := PartGrpTo;
                RcpLineRec2.Part := EstPartTo;
                RcpLineRec2."Estimate Line" := EstLineTo;
                IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
                  RcpLineRec2."Recipe Group" := RecipeGrpTo;
                  IF RecipeTo <> '' THEN
                    RcpLineRec2.Recipe := RecipeTo;
                END;
                RcpLineRec2.INSERT(TRUE);
                RcpLineRec2."Norm Agreement" := RecipeLineRec."Norm Agreement";
                RcpLineRec2."Price Agreement" := RecipeLineRec."Price Agreement";
                //db.sn, 12-05-15: C009772
                IF EstSetup."Copy Norm Group from Target" THEN
                  CheckDefaultNormGroup(EstLineRec, RcpLineRec2, TRUE);
                //db.en, 12-05-15: C009772
                IF NOT EstRec.GET(EstTo) THEN EstRec.INIT;
                IF NOT EstRec2.GET(EstFrom) THEN EstRec2.INIT;
                IF EstRec."Estimate Type" <> EstRec2."Estimate Type" THEN BEGIN
                  IF RecipeLineRec."Trade Item" <> '' THEN BEGIN
                    RcpLineRec2."Trade Item" := '';
                    RcpLineRec2.VALIDATE("Trade Item", RecipeLineRec."Trade Item");
                  END ELSE BEGIN
                    IF RecipeLineRec."Basic Item" <> '' THEN BEGIN
                      RcpLineRec2."Basic Item" := '';
                      RcpLineRec2.VALIDATE("Basic Item", RecipeLineRec."Basic Item");
                    END ELSE BEGIN
                      IF RecipeLineRec."Item No." <> '' THEN BEGIN
                        RcpLineRec2."Item No." := '';
                        RcpLineRec2.VALIDATE("Item No.", RecipeLineRec."Item No.");
                      END;
                    END;
                  END;
                END;
                RcpLineRec2.MODIFY(TRUE);
              UNTIL RecipeLineRec.NEXT = 0;
              RcpLineRec2.UpdateEstLines;
            END;
          END ELSE BEGIN
            IF (EstFrom <> '') AND (EstTo = '') THEN BEGIN  //db, 19-02-15: copy estimate recipe to base recipe
              RecipeLineRec.SETRANGE("Estimate No.",EstFrom);
              RecipeLineRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
              RecipeLineRec.SETRANGE("Part Group",PartGrpFrom);
              RecipeLineRec.SETRANGE(Part,EstPartFrom);
              RecipeLineRec.SETRANGE("Estimate Line",EstLineFrom);
              IF RecipeGrpFrom <> '' THEN
                RecipeLineRec.SETRANGE("Recipe Group",RecipeGrpFrom);
              IF RecipeFrom <> '' THEN
                RecipeLineRec.SETRANGE(Recipe,RecipeFrom);
              IF RecipeLineFrom <> 0 THEN
                RecipeLineRec.SETRANGE("Line No.",RecipeLineFrom);
              IF RecipeLineRec.FINDSET THEN BEGIN
                REPEAT
                  BaseRcpLineRec2.TRANSFERFIELDS(RecipeLineRec);
                  IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
                    BaseRcpLineRec2."Recipe Group" := RecipeGrpTo;
                    IF RecipeTo <> '' THEN
                      BaseRcpLineRec2.Recipe := RecipeTo;
                  END;
                  BaseRcpLineRec2.INSERT(TRUE);
                UNTIL RecipeLineRec.NEXT = 0;
              END;
            END;
          END;
        END;
      END;

      IF CopyRecipeLine = TRUE THEN BEGIN
        ChrgRec.SETRANGE("Estimate No.",EstFrom);
        ChrgRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
        ChrgRec.SETRANGE("Part Group",PartGrpFrom);
        ChrgRec.SETRANGE(Part,EstPartFrom);
        ChrgRec.SETRANGE("Recipe Line",EstLineFrom);
        IF RecipeGrpFrom <> '' THEN
          ChrgRec.SETRANGE("Recipe Group",RecipeGrpFrom);
        IF RecipeFrom <> '' THEN
          ChrgRec.SETRANGE(Recipe,RecipeFrom);
        IF RecipeLineFrom <> 0 THEN
          ChrgRec.SETRANGE("Recipe Line",RecipeLineFrom);
        IF ChrgRec.FINDSET THEN BEGIN
          REPEAT
            ChrgRec2.COPY(ChrgRec);
            ChrgRec2."Estimate No." := EstTo;
            ChrgRec2."Sub-Estimate No." := SubEstTo;
            ChrgRec2."Part Group" := PartGrpTo;
            ChrgRec2.Part := EstPartTo;
            ChrgRec2."Recipe Line" := EstLineTo;
            IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
              ChrgRec2."Recipe Group" := RecipeGrpTo;
              IF RecipeTo <> '' THEN
                ChrgRec2.Recipe := RecipeTo;
              IF RecipeLineTo <> 0 THEN
                ChrgRec2."Recipe Line" := RecipeLineTo;
            END;
            ChrgRec2.INSERT(TRUE);  //db, 03-01-14: C010706
          UNTIL ChrgRec.NEXT = 0;
        END;
      END;

      QuanSheetRec.SETRANGE("Estimate No.",EstFrom);
      QuanSheetRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      QuanSheetRec.SETRANGE("Part Group",PartGrpFrom);
      QuanSheetRec.SETRANGE(Part,EstPartFrom);
      QuanSheetRec.SETRANGE("Estimate Line",EstLineFrom);
      IF RecipeGrpFrom <> '' THEN
        QuanSheetRec.SETRANGE("Recipe Group",RecipeGrpFrom);
      IF RecipeFrom <> '' THEN
        QuanSheetRec.SETRANGE(Recipe,RecipeFrom);
      IF RecipeLineFrom <> 0 THEN
        QuanSheetRec.SETRANGE("Recipe Line",RecipeLineFrom);
      IF QuanSheetRec.FINDSET THEN BEGIN
        REPEAT
          QuanSheetRec2.COPY(QuanSheetRec);
          QuanSheetRec2."Estimate No." := EstTo;
          QuanSheetRec2."Sub-Estimate No." := SubEstTo;
          QuanSheetRec2."Part Group" := PartGrpTo;
          QuanSheetRec2.Part := EstPartTo;
          QuanSheetRec2."Estimate Line" := EstLineTo;
          IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
            QuanSheetRec2."Recipe Group" := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              QuanSheetRec2.Recipe := RecipeTo;
            IF RecipeLineTo <> 0 THEN
              QuanSheetRec2."Recipe Line" := RecipeLineTo;
          END;
          QuanSheetRec2.INSERT;
        UNTIL QuanSheetRec.NEXT = 0;
      END;

      QuanModelRec.SETRANGE("Estimate No.",EstFrom);
      QuanModelRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      QuanModelRec.SETRANGE("Part Group",PartGrpFrom);
      QuanModelRec.SETRANGE(Part,EstPartFrom);
      QuanModelRec.SETRANGE("Estimate Line",EstLineFrom);
      IF QuanModelRec.FINDSET THEN BEGIN
        REPEAT
          QuanModelRec2.COPY(QuanModelRec);
          QuanModelRec2."Estimate No." := EstTo;
          QuanModelRec2."Sub-Estimate No." := SubEstTo;
          QuanModelRec2."Part Group" := PartGrpTo;
          QuanModelRec2.Part := EstPartTo;
          QuanModelRec2."Estimate Line" := EstLineTo;
          QuanModelRec2.INSERT;
        UNTIL QuanModelRec.NEXT = 0;
      END;

      TextRec.SETRANGE("Estimate No.",EstFrom);
      TextRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      TextRec.SETRANGE("Part Group",PartGrpFrom);
      TextRec.SETRANGE(Part,EstPartFrom);
      TextRec.SETRANGE("Estimate Line No.",EstLineFrom);
      IF EstFrom <> '' THEN BEGIN
        //text only available for recipe header (or estimate line with recipecode)
        TextRec.SETRANGE(Group, '');
        TextRec.SETRANGE("No.", '');
        IF RecipeLineFrom <> 0 THEN
          TextRec.SETFILTER("Line No.", '<%1', 0);  //disable copy from buffer for recipe line;
      END ELSE BEGIN
        IF RecipeGrpFrom <> '' THEN
          TextRec.SETRANGE(Group,RecipeGrpFrom);
        IF RecipeFrom <> '' THEN
          TextRec.SETRANGE("No.",RecipeFrom);
      END;
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          TextRec2."Estimate No." := EstTo;
          TextRec2."Sub-Estimate No." := SubEstTo;
          TextRec2."Part Group" := PartGrpTo;
          TextRec2.Part := EstPartTo;
          TextRec2."Estimate Line No." := EstLineTo;
          IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
            TextRec2.Group := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              TextRec2."No." := RecipeTo;
            //IF RecipeLineTo <> 0 THEN
            //  TextRec2."Recipe Line" := RecipeLineTo;
          END;
          //IF TextRec2.INSERT THEN;  //db, 06-12-11 (error with copy text from estimate line, while copy recipe lines from buffer)
        UNTIL TextRec.NEXT = 0;
      END;

      EstCodeRec.SETRANGE("Estimate No.",EstFrom);
      EstCodeRec.SETRANGE("Sub-Estimate No.",SubEstFrom);
      EstCodeRec.SETRANGE("Part Group",PartGrpFrom);
      EstCodeRec.SETRANGE(Part,EstPartFrom);
      EstCodeRec.SETRANGE("Estimate Line",EstLineFrom);
      IF RecipeGrpFrom <> '' THEN
        EstCodeRec.SETRANGE("Recipe Group",RecipeGrpFrom);
      IF RecipeFrom <> '' THEN
        EstCodeRec.SETRANGE(Recipe,RecipeFrom);
      IF RecipeLineFrom <> 0 THEN
        EstCodeRec.SETRANGE("Recipe Line",RecipeLineFrom);
      IF EstCodeRec.FINDSET THEN BEGIN
        REPEAT
          EstCodeRec2.COPY(EstCodeRec);
          EstCodeRec2."Estimate No." := EstTo;
          EstCodeRec2."Sub-Estimate No." := SubEstTo;
          EstCodeRec2."Part Group" := PartGrpTo;
          EstCodeRec2.Part := EstPartTo;
          EstCodeRec2."Estimate Line" := EstLineTo;
          IF (RecipeGrpFrom + RecipeFrom) <> (RecipeGrpTo + RecipeTo) THEN BEGIN
            EstCodeRec2."Recipe Group" := RecipeGrpTo;
            IF RecipeTo <> '' THEN
              EstCodeRec2.Recipe := RecipeTo;
            IF RecipeLineTo <> 0 THEN
              EstCodeRec2."Recipe Line" := RecipeLineTo;
          END;
          EstCodeRec2.INSERT;
        UNTIL EstCodeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckDefaultNormGroup@1100525002(VAR DestEstLineRec@1100525011 : Record 11072072;VAR DestRcpLineRec@1100525010 : Record 11072075;RcpBln@1100525005 : Boolean);
    VAR
      EstRecTo@1100525001 : Record 11012151;
      SubEstRecTo@1100525000 : Record 11072074;
      EstPartRecTo@1100525002 : Record 11072073;
      EstTo@1100525006 : Code[20];
      SubEstTo@1100525007 : Code[20];
      PartGrpTo@1100525008 : Code[20];
      PartTo@1100525009 : Code[20];
      NormGroup@1100525003 : Code[20];
      NormGroupSales@1100525004 : Code[20];
    BEGIN
      //db, 10-02-15: C009772
      IF RcpBln THEN BEGIN
        EstTo := DestRcpLineRec."Estimate No.";
        SubEstTo := DestRcpLineRec."Sub-Estimate No.";
        PartGrpTo := DestRcpLineRec."Part Group";
        PartTo := DestRcpLineRec.Part;
      END ELSE BEGIN
        EstTo := DestEstLineRec."Estimate No.";
        SubEstTo := DestEstLineRec."Sub-Estimate No.";
        PartGrpTo := DestEstLineRec."Part Group";
        PartTo := DestEstLineRec.Part;
      END;

      EstRecTo.GET(EstTo);
      SubEstRecTo.GET(EstTo,SubEstTo);
      EstPartRecTo.GET(EstTo,SubEstTo,PartGrpTo,PartTo);

      IF EstPartRecTo."Norm Group" <> '' THEN
        NormGroup := EstPartRecTo."Norm Group"
      ELSE
        IF SubEstRecTo."Norm Group" <> '' THEN
          NormGroup := SubEstRecTo."Norm Group"
        ELSE
          NormGroup := EstRecTo."Norm Group";

      IF EstPartRecTo."Norm Group (Sales)" <> '' THEN
        NormGroupSales := EstPartRecTo."Norm Group (Sales)"
      ELSE
        IF SubEstRecTo."Norm Group (Sales)" <> '' THEN
          NormGroupSales := SubEstRecTo."Norm Group (Sales)"
        ELSE
          NormGroupSales := EstRecTo."Norm Group (Sales)";

      IF RcpBln THEN BEGIN
        IF NormGroup <> '' THEN
          DestRcpLineRec.VALIDATE("Norm Group", NormGroup);
        IF NormGroupSales <> '' THEN
          DestRcpLineRec.VALIDATE("Norm Group (Sales)", NormGroupSales);
      END ELSE BEGIN
        IF NormGroup <> '' THEN
          DestEstLineRec.VALIDATE("Norm Group", NormGroup);
        IF NormGroupSales <> '' THEN
          DestEstLineRec.VALIDATE("Norm Group (Sales)", NormGroupSales);
      END;
    END;

    BEGIN
    {
      db, 24-11-14: maintenance interval/relation removed
    }
    END.
  }
}

