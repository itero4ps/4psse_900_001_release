OBJECT Codeunit 11012244 Control Snapshot Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            Job@1210190000 : Record 11072003;
          BEGIN
            // jhoek.160611.begin: melding C-027725
            // BuildSnapshot(TODAY);
            Job.SETCURRENTKEY("Project Status");
            Job.SETFILTER("Project Status", '<%1', Job."Project Status"::Finished);

            BuildSnapshot(Job, TODAY);
            // jhoek.160611.end
          END;

  }
  CODE
  {
    VAR
      ProjSetup@1100525000 : Record 315;
      InventSetup@1100525006 : Record 313;
      CostContMgt@1100525004 : Codeunit 11012006;
      Text001@1100525007 : TextConst 'ENU=Project  @1@@@@@@@@@@@@@';
      Window@1100525008 : Dialog;
      DummyDec@1100525005 : Decimal;

    PROCEDURE BuildSnapshot@1100525000(VAR Project@1210190000 : Record 11072003;SnapshotDate@1100525000 : Date);
    VAR
      Job@1100525003 : Record 11072003;
      CostControlProjectElement@1100525006 : Record 11012048;
      DetermineProductionDate@1100525005 : Codeunit 11012014;
      DeterminePrognosisDate@1100525004 : Codeunit 11012029;
      Counter@1100525002 : Integer;
      NoOfRecords@1100525001 : Integer;
    BEGIN
      ProjSetup.GET;
      InventSetup.GET;

      IF GUIALLOWED THEN
        Window.OPEN(Text001);

      WITH Project DO BEGIN
        SETRANGE("Excl. from Project Control",FALSE);
        IF FINDSET THEN BEGIN
          NoOfRecords := COUNT;
          SETRANGE("Period Filter", SnapshotDate);
          SETFILTER("Cumulation Filter", '..%1', SnapshotDate);
          REPEAT
            Counter := Counter + 1;
            IF GUIALLOWED THEN
              Window.UPDATE(1,ROUND(Counter/NoOfRecords*100,1) * 100);

            IF NOT "Cost Control Up to Date" THEN
              BuildCostControl;
            //C028872.sn  Not all levels that needed for the snapshot are created in BuildCostControl
            Job := Project;
            CODEUNIT.RUN(CODEUNIT::CreateControlLinesElemCostObj, Job); //Must be done first, cost control level proj/element is update here
            Job.SETRANGE("Multipurpose Filter");
            CODEUNIT.RUN(CODEUNIT::CreateControlLinesProjCostType, Job);
            CostControlProjectElement.SETRANGE("Project No.", "No.");
            IF CostControlProjectElement.FINDSET THEN BEGIN
              REPEAT
                Job.SETRANGE("Multipurpose Filter", CostControlProjectElement.Element);
                CODEUNIT.RUN(CODEUNIT::CreateControlLinesProjCostType, Job);
              UNTIL CostControlProjectElement.NEXT = 0;
            END;
            //C028872.en

            DetermineProductionDate.DetermineBothDates(Project);
            DeterminePrognosisDate.DetermineBothDates(Project);

            BuildProjSnapshot(SnapshotDate, Project);
            BuildProjCostTypeSnapshot(SnapshotDate, Project);
            BuildProjCostObjectSnapshot(SnapshotDate, Project);
            BuildProjElemSnapshot(SnapshotDate, Project);
            BuildProjElemCTSnapshot(SnapshotDate, Project);
            BuildProjElemCOSnapshot(SnapshotDate, Project);
            BuildProjExtSnapshot(SnapshotDate, Project);
            BuildProjExtCTSnapshot(SnapshotDate, Project);
            BuildProjExtCOSnapshot(SnapshotDate, Project);
            BuildProjCostCompSnapshot(SnapshotDate, Project);
          UNTIL NEXT = 0;
        END;
      END;
      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE BuildProjSnapshot@1100525010(SnapshotDate@1100525001 : Date;VAR Project@1100525000 : Record 11072003);
    VAR
      ControlProjectSnapshot@1100525003 : Record 11020609;
      ProjFilter@1100525002 : Text[250];
    BEGIN
      WITH Project DO BEGIN
        IF ControlProjectSnapshot.GET(SnapshotDate, "No.") THEN
          ControlProjectSnapshot.DELETE(TRUE);

        ControlProjectSnapshot.INIT;
        ControlProjectSnapshot."Snapshot Date" := SnapshotDate;
        ControlProjectSnapshot."Project No." := "No.";
        ControlProjectSnapshot."Global Dimension 1 Code" := "Global Dimension 1 Code";

        FillProjectFilter(ProjFilter);
        SETFILTER("Project Filter", ProjFilter);

        CALCFIELDS(
          Revenues,
          "Extension Quoted Amount", "Options Contract Amount",
          "Actual Preclosure Result",
          "Provision Loss Result");

        CostContMgt.CalcFieldsProject(Project);

        CostContMgt.AllowedAndPurchProject(
          Project,
          ControlProjectSnapshot.Allowed, ControlProjectSnapshot."Allowed Hours",
          DummyDec, DummyDec, TRUE,
          DummyDec, ControlProjectSnapshot."Estimated Purchase Result",
          DummyDec,
          ControlProjectSnapshot."Actual Purchase Result",
          ControlProjectSnapshot."Total Purchase Result",TRUE);

        ControlProjectSnapshot."Project Contract Amount" := "Project Contract Amount";
        ControlProjectSnapshot."Extension Quoted Amount" := "Extension Quoted Amount";
        ControlProjectSnapshot."Extension Contract Amount" := "Extension Contract Amount";
        ControlProjectSnapshot."Options Contract Amount" := "Options Contract Amount";
        ControlProjectSnapshot."Contr. Amt. incl. Ext.and Opt." :=
          "Project Contract Amount" + "Extension Contract Amount" + "Options Contract Amount";
        ControlProjectSnapshot.Budget := Budget;
        ControlProjectSnapshot."Budget Hours" := "Budget Hours (Entire Project)";
        ControlProjectSnapshot."Budget Result" := CostContMgt.BudgetResultProject(Project, FALSE);
        ControlProjectSnapshot."Budget Result %" := CostContMgt.BudgetResultPercProject(Project, FALSE);
        ControlProjectSnapshot."Purchase Budget" := "Purchase Budget";
        ControlProjectSnapshot.Purchase := Purchase;
        ControlProjectSnapshot."Open (Purchase)" := "Open (Purchase)";
        ControlProjectSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
        ControlProjectSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
        ControlProjectSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
        ControlProjectSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
        ControlProjectSnapshot."Risc Coverage (Prognosis)" := "Risc Coverage (Prognosis)";
        ControlProjectSnapshot."Risc Coverage" := "Risc Coverage";
        ControlProjectSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
        ControlProjectSnapshot."Open (Inventory)" := "Open (Inventory)";
        ControlProjectSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
        ControlProjectSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
        ControlProjectSnapshot."Open Hours" := "Open Hours";
        ControlProjectSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
        ControlProjectSnapshot."Preregistered WIP" := "Preregistered WIP";
        ControlProjectSnapshot."Actual Costs" := "Actual Costs";
        ControlProjectSnapshot."Actual Hours" := "Actual Hours";
        ControlProjectSnapshot."Total Cost" := CostContMgt.TotCostProject(Project, FALSE);
        ControlProjectSnapshot."Total Hours" := CostContMgt.TotHoursProject(Project, FALSE);
        IF EVALUATE(ControlProjectSnapshot."Progress Date", GETFILTER("Progress Filter")) THEN;
        ControlProjectSnapshot.Available := Budget - CostContMgt.TotCostProject(Project, FALSE);
        ControlProjectSnapshot."Allowed %" := CostContMgt.AllowedPercProject(Project, FALSE);
        ControlProjectSnapshot."Purchase Result" := CostContMgt.PurchResultProject(Project,FALSE);
        ControlProjectSnapshot.Result := CostContMgt.ResultProject(Project, FALSE);
        ControlProjectSnapshot."Result %" := CostContMgt.ResultPercProject(Project, FALSE);
        ControlProjectSnapshot."Hours Result" := CostContMgt.ResultHoursProject(Project, FALSE);
        ControlProjectSnapshot."Calculated End Result" := CostContMgt.CalculatedEndResultProject(Project, FALSE);
        ControlProjectSnapshot."Calc. End Res. Versus Budget" := CostContMgt.CalcEndResVersusBudgetProject(Project, FALSE);
        IF EVALUATE(ControlProjectSnapshot."Prognosis Date", GETFILTER("Prognosis Filter")) THEN;
        ControlProjectSnapshot.Prognosis := Prognosis;
        ControlProjectSnapshot."Hours Prognosis" := "Hours Prognosis";
        ControlProjectSnapshot."Prognosis Total Hours" := CostContMgt.PrognTotHoursProject(Project, FALSE);
        ControlProjectSnapshot."Prognosis End Result" := CostContMgt.PrognEndResultProject(Project, FALSE);
        ControlProjectSnapshot."Prognosis End Result Hours" := CostContMgt.PrognEndResultHoursProject(Project, FALSE);
        ControlProjectSnapshot."Progn End Result vs Budget %" := CostContMgt.PrognEndResVersusBudgetProject(Project,FALSE);
        ControlProjectSnapshot."Prognosis Result" := CostContMgt.PrognResultProject(Project, FALSE);
        ControlProjectSnapshot.Revenues := Revenues;
        ControlProjectSnapshot."Gross WIP Position" := "Actual Costs" - Revenues;
        ControlProjectSnapshot."Closed Costs" := "Closed Costs";
        ControlProjectSnapshot."Closed Revenues" := "Closed Revenues";
        ControlProjectSnapshot."WIP Position" := ("Actual Costs" + "Closed Costs") - ( Revenues - "Closed Revenues");
        ControlProjectSnapshot."Progn. End Res. vs Contr. Pr." := CostContMgt.PrognEndResVrsContrAmtProject(Project, FALSE);
        ControlProjectSnapshot."Progn. End Res. vs Contr. Pr.%" := CostContMgt.PrognEndResVrsContrAmtProjPerc(Project, FALSE);
        IF InventSetup.JobInventoryByLocationShelf("No.") OR InventSetup.JobInventoryByStockRelease("No.") THEN
          ControlProjectSnapshot."Project Inventory" := CostContMgt.InventoryProject(Project, FALSE);
        ControlProjectSnapshot."Actual Preclosure Result" := "Actual Preclosure Result";
        ControlProjectSnapshot."Provision Loss Result" := "Provision Loss Result";

        CostContMgt.PrognTotFinResultProject(
          Project,
          FALSE,
          ControlProjectSnapshot."Prognosis Total Cost",
          ControlProjectSnapshot."Prognosis Revenue",
          ControlProjectSnapshot."Prognosis Total Revenue",
          ControlProjectSnapshot."Prognosis Financial Result",
          ControlProjectSnapshot."Expected Finishing Date",
          ControlProjectSnapshot."Prognosis Level");

        ControlProjectSnapshot.INSERT;
      END;
    END;

    LOCAL PROCEDURE BuildProjCostTypeSnapshot@1100525001(SnapshotDate@1100525002 : Date;VAR Project@1100525003 : Record 11072003);
    VAR
      ControlProjectCostType@1100525001 : Record 11012046;
      ControlProjCostTypeSnapshot@1100525000 : Record 11020610;
    BEGIN
      WITH ControlProjectCostType DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");
        Project.COPYFILTER("Prognosis Filter", "Prognosis Filter");

        IF FINDSET THEN
          REPEAT
            ControlProjCostTypeSnapshot.INIT;
            ControlProjCostTypeSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjCostTypeSnapshot."Project No." := Project."No.";
            ControlProjCostTypeSnapshot."Cost Type" := "Cost Type";

            CostContMgt.CalcFieldsCostType(ControlProjectCostType);

            CostContMgt.AllowedAndPurchCostType(
              ControlProjectCostType,
              ControlProjCostTypeSnapshot.Allowed, ControlProjCostTypeSnapshot."Allowed Hours",
              DummyDec, DummyDec,
              DummyDec, ControlProjCostTypeSnapshot."Estimated Purchase Result",
              DummyDec, ControlProjCostTypeSnapshot."Actual Purchase Result",
              ControlProjCostTypeSnapshot."Total Purchase Result",TRUE);

            ControlProjCostTypeSnapshot.Budget := Budget;
            ControlProjCostTypeSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjCostTypeSnapshot.Purchase := Purchase;
            ControlProjCostTypeSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjCostTypeSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjCostTypeSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjCostTypeSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjCostTypeSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjCostTypeSnapshot."Risc Coverage (Prognosis)" := "Risc Coverage (Prognosis)";
            ControlProjCostTypeSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjCostTypeSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjCostTypeSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjCostTypeSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjCostTypeSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjCostTypeSnapshot."Open Hours" := "Open Hours";
            ControlProjCostTypeSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjCostTypeSnapshot."Actual Costs" := "Actual Costs";
            ControlProjCostTypeSnapshot."Total Cost" := CostContMgt.TotCostCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot."Total Hours" := CostContMgt.TotHoursCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot.Available := Budget - CostContMgt.TotCostCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot."Allowed %" := CostContMgt.AllowedPercCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot."Purchase Result" := CostContMgt.PurchResultCostType(ControlProjectCostType,FALSE);
            ControlProjCostTypeSnapshot.Result := CostContMgt.ResultCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot."Hours Result" := CostContMgt.ResultHoursCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot.Prognosis := Prognosis;
            IF "Cost Type" = "Cost Type"::Labor THEN
              ControlProjCostTypeSnapshot."Hours Prognosis" := "Hours Prognosis";
            ControlProjCostTypeSnapshot."Prognosis Total Cost" := CostContMgt.PrognTotCostCostType(ControlProjectCostType,FALSE);
            ControlProjCostTypeSnapshot."Prognosis Total Hours" := CostContMgt.PrognTotHoursCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot."Prognosis End Result" := CostContMgt.PrognEndResultCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot."Prognosis End Result Hours" :=
              CostContMgt.PrognEndResultHoursCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot."Prognosis Result" := CostContMgt.PrognResultCostType(ControlProjectCostType, FALSE);
            ControlProjCostTypeSnapshot.Revenues := Revenues;
            ControlProjCostTypeSnapshot."WIP Position" := ("Actual Costs" - Revenues); //differs from project level
            ControlProjCostTypeSnapshot.Result := CostContMgt.ResultCostType(ControlProjectCostType,FALSE);

            ControlProjCostTypeSnapshot.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuildProjCostObjectSnapshot@1100525002(SnapshotDate@1100525002 : Date;VAR Project@1100525003 : Record 11072003);
    VAR
      ControlProjectCostObject@1100525001 : Record 11012047;
      ControlProjCostObjSnapshot@1100525000 : Record 11020611;
    BEGIN
      WITH ControlProjectCostObject DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");
        Project.COPYFILTER("Prognosis Filter", "Prognosis Filter");

        IF FINDSET THEN
          REPEAT
            ControlProjCostObjSnapshot.INIT;
            ControlProjCostObjSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjCostObjSnapshot."Project No." := Project."No.";
            ControlProjCostObjSnapshot."Cost Type" := "Cost Type";
            ControlProjCostObjSnapshot."Cost Object" := "Cost Object";
            ControlProjCostObjSnapshot."Cost Component" := "Cost Component";

            CostContMgt.CalcFieldsCostObj(ControlProjectCostObject);

            CostContMgt.AllowedAndPurchCostObj(
              ControlProjectCostObject,
              ControlProjCostObjSnapshot.Allowed, ControlProjCostObjSnapshot."Allowed Hours",
              DummyDec, DummyDec,
              DummyDec, ControlProjCostObjSnapshot."Estimated Purchase Result",
              DummyDec,
              ControlProjCostObjSnapshot."Actual Purchase Result",
              ControlProjCostObjSnapshot."Total Purchase Result",TRUE);

            ControlProjCostObjSnapshot."Original Budget Amount" := "Original Budget Amount";
            ControlProjCostObjSnapshot."Original Budget Hours" := "Original Budget Hours";
            ControlProjCostObjSnapshot.Adjustments := Adjustments;
            ControlProjCostObjSnapshot."Adjustments Hours" := "Adjustments Hours";
            ControlProjCostObjSnapshot.Extension := Extension;
            ControlProjCostObjSnapshot."Extension Hours" := "Extension Hours";
            ControlProjCostObjSnapshot.Options := Options;
            ControlProjCostObjSnapshot."Option Hours" := "Option Hours";
            ControlProjCostObjSnapshot.Budget := Budget;
            ControlProjCostObjSnapshot."Budget Hours (Total)" := "Budget Hours";
            ControlProjCostObjSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjCostObjSnapshot.Purchase := Purchase;
            ControlProjCostObjSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjCostObjSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjCostObjSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjCostObjSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjCostObjSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjCostObjSnapshot."Risc Coverage (Prognosis)" := "Risc Coverage (Prognosis)";
            ControlProjCostObjSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjCostObjSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjCostObjSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjCostObjSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjCostObjSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjCostObjSnapshot."Open Hours" := "Open Hours";
            ControlProjCostObjSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjCostObjSnapshot."Actual Costs" := "Actual Costs";
            ControlProjCostObjSnapshot."Actual Hours" := "Actual Hours";
            ControlProjCostObjSnapshot."Total Cost" := CostContMgt.TotCostCostObj(ControlProjectCostObject, FALSE);
            ControlProjCostObjSnapshot.Available := Budget - CostContMgt.TotCostCostObj(ControlProjectCostObject, FALSE);
            ControlProjCostObjSnapshot."Allowed %" := CostContMgt.AllowedPercCostObj(ControlProjectCostObject, FALSE);
            ControlProjCostObjSnapshot."Purchase Result" := CostContMgt.PurchResultCostObj(ControlProjectCostObject,FALSE);
            ControlProjCostObjSnapshot.Result := CostContMgt.ResultCostObj(ControlProjectCostObject, FALSE);
            ControlProjCostObjSnapshot.Prognosis := Prognosis;
            IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
              ControlProjCostObjSnapshot."Total Hours" := CostContMgt.TotHoursCostObj(ControlProjectCostObject, FALSE);
              ControlProjCostObjSnapshot."Hours Prognosis" := "Hours Prognosis";
              ControlProjCostObjSnapshot."Hours Result" := CostContMgt.ResultHoursCostObj(ControlProjectCostObject, FALSE);
              ControlProjCostObjSnapshot."Prognosis Total Hours" := CostContMgt.PrognTotHoursCostObj(ControlProjectCostObject, FALSE);
              ControlProjCostObjSnapshot."Prognosis End Result Hours" :=
                CostContMgt.PrognEndResultHoursCostObj(ControlProjectCostObject, FALSE);
            END;
            ControlProjCostObjSnapshot."Prognosis Total Cost" := CostContMgt.PrognTotCostCostObj(ControlProjectCostObject,FALSE);
            ControlProjCostObjSnapshot."Prognosis End Result" := CostContMgt.PrognEndResultCostObj(ControlProjectCostObject, FALSE);
            ControlProjCostObjSnapshot."Prognosis Result" := CostContMgt.PrognResultCostObj(ControlProjectCostObject, FALSE);
            ControlProjCostObjSnapshot.Result := CostContMgt.ResultCostObj(ControlProjectCostObject,FALSE);

            ControlProjCostObjSnapshot.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuildProjElemSnapshot@1100525003(SnapshotDate@1100525000 : Date;VAR Project@1100525004 : Record 11072003);
    VAR
      ControlProjectElem@1100525002 : Record 11012048;
      ControlProjElemSnapshot@1100525001 : Record 11020612;
      CreateControlLinesElemCostObj@1100525003 : Codeunit 11012032;
    BEGIN
      CreateControlLinesElemCostObj.SetHideWindow;
      CreateControlLinesElemCostObj.CreateCostControlProjElem(Project);

      WITH ControlProjectElem DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");
        Project.COPYFILTER("Prognosis Filter", "Prognosis Filter");

        IF FINDSET THEN
          REPEAT
            ControlProjElemSnapshot.INIT;
            ControlProjElemSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjElemSnapshot."Project No." := "Project No.";
            ControlProjElemSnapshot.Element := Element;

            SETFILTER("Element Filter",Element);
            CostContMgt.CalcFieldsElem(ControlProjectElem);
            CALCFIELDS(Revenues);

            CostContMgt.AllowedAndPurchElem(
              ControlProjectElem,
              ControlProjElemSnapshot.Allowed, ControlProjElemSnapshot."Allowed Hours",
              DummyDec, DummyDec, TRUE);

            ControlProjElemSnapshot.Budget := Budget;
            ControlProjElemSnapshot."Budget Hours" := "Budget Hours";
            ControlProjElemSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjElemSnapshot.Purchase := Purchase;
            ControlProjElemSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjElemSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjElemSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjElemSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjElemSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjElemSnapshot."Risc Coverage (Prognosis)" := "Risc Coverage (Prognosis)";
            ControlProjElemSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjElemSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjElemSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjElemSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjElemSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjElemSnapshot."Open Hours" := "Open Hours";
            ControlProjElemSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjElemSnapshot."Actual Costs" := "Actual Costs";
            ControlProjElemSnapshot."Actual Hours" := "Actual Hours";
            ControlProjElemSnapshot."Total Cost" := CostContMgt.TotCostElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot."Total Hours" := CostContMgt.TotHoursElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot.Available := Budget - CostContMgt.TotCostElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot."Allowed %" := CostContMgt.AllowedPercElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot."Purchase Result" := CostContMgt.PurchResultElem(ControlProjectElem,FALSE);
            ControlProjElemSnapshot.Result := CostContMgt.ResultElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot."Hours Result" := CostContMgt.ResultHoursElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot.Prognosis := Prognosis;
            ControlProjElemSnapshot."Hours Prognosis" := "Hours Prognosis";
            ControlProjElemSnapshot."Prognosis Total Hours" := CostContMgt.PrognTotHoursElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot."Prognosis End Result" := CostContMgt.PrognEndResultElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot."Prognosis End Result Hours" := CostContMgt.PrognEndResultHoursElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot."Prognosis Result" := CostContMgt.PrognResultElem(ControlProjectElem, FALSE);
            ControlProjElemSnapshot.Revenues := Revenues;
            ControlProjElemSnapshot."WIP Position" := "Actual Costs" - Revenues;
            ControlProjElemSnapshot."Prognosis Total Cost" := CostContMgt.PrognTotCostElem(ControlProjectElem, FALSE);

            ControlProjElemSnapshot.INSERT;

          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuildProjElemCTSnapshot@1100525004(SnapshotDate@1100525000 : Date;VAR Project@1100525003 : Record 11072003);
    VAR
      ControlProjectElemCostType@1100525002 : Record 11012049;
      ControlProjElemCTSnapshot@1100525001 : Record 11020613;
    BEGIN
      WITH ControlProjectElemCostType DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");
        Project.COPYFILTER("Prognosis Filter", "Prognosis Filter");

        IF FINDSET THEN
          REPEAT
            ControlProjElemCTSnapshot.INIT;
            ControlProjElemCTSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjElemCTSnapshot."Project No." := "Project No.";
            ControlProjElemCTSnapshot.Element := Element;
            ControlProjElemCTSnapshot."Cost Type" := "Cost Type";

            CostContMgt.CalcFieldsElemCostType(ControlProjectElemCostType);

            CostContMgt.AllowedAndPurchElemCostType(
              ControlProjectElemCostType,
              ControlProjElemCTSnapshot.Allowed, DummyDec,
              DummyDec, DummyDec, TRUE);

            ControlProjElemCTSnapshot.Budget := Budget;
            ControlProjElemCTSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjElemCTSnapshot.Purchase := Purchase;
            ControlProjElemCTSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjElemCTSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjElemCTSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjElemCTSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjElemCTSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjElemCTSnapshot."Risc Coverage (Prognosis)" := "Risc Coverage (Prognosis)";
            ControlProjElemCTSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjElemCTSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjElemCTSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjElemCTSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjElemCTSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjElemCTSnapshot."Open Hours" := "Open Hours";
            ControlProjElemCTSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjElemCTSnapshot."Actual Costs" := "Actual Costs";
            ControlProjElemCTSnapshot."Total Cost" := CostContMgt.TotCostElemCostType(ControlProjectElemCostType, FALSE);
            ControlProjElemCTSnapshot."Total Hours" := CostContMgt.TotHoursElemCostType(ControlProjectElemCostType, FALSE);
            ControlProjElemCTSnapshot.Available := Budget - CostContMgt.TotCostElemCostType(ControlProjectElemCostType, FALSE);
            ControlProjElemCTSnapshot."Purchase Result" := CostContMgt.PurchResultElemCostType(ControlProjectElemCostType,FALSE);
            ControlProjElemCTSnapshot.Result := CostContMgt.ResultElemCostType(ControlProjectElemCostType, FALSE);
            ControlProjElemCTSnapshot."Hours Result" := CostContMgt.ResultHoursElemCostType(ControlProjectElemCostType, FALSE);
            ControlProjElemCTSnapshot.Prognosis := Prognosis;
            IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
              ControlProjElemCTSnapshot."Hours Prognosis" := "Hours Prognosis";
              ControlProjElemCTSnapshot."Prognosis Total Hours" :=
                CostContMgt.PrognTotHoursElemCostType(ControlProjectElemCostType, FALSE);
            END;
            ControlProjElemCTSnapshot."Prognosis End Result" :=
              CostContMgt.PrognEndResultElemCostType(ControlProjectElemCostType, FALSE);
            ControlProjElemCTSnapshot."Prognosis End Result Hours" :=
              CostContMgt.PrognEndResultHoursElemCostTyp(ControlProjectElemCostType, FALSE);
            ControlProjElemCTSnapshot."Prognosis Result" := CostContMgt.PrognResultElemCostType(ControlProjectElemCostType, FALSE);
            ControlProjElemCTSnapshot."Prognosis Total Cost" := CostContMgt.PrognTotCostElemCostType(ControlProjectElemCostType, FALSE);

            ControlProjElemCTSnapshot.INSERT;

          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuildProjElemCOSnapshot@1100525005(SnapshotDate@1100525000 : Date;VAR Project@1100525003 : Record 11072003);
    VAR
      ControlProjectElemCostObject@1100525002 : Record 11012050;
      ControlProjElemCOSnapshot@1100525001 : Record 11020614;
    BEGIN
      WITH ControlProjectElemCostObject DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");
        Project.COPYFILTER("Prognosis Filter", "Prognosis Filter");

        IF FINDSET THEN
          REPEAT
            ControlProjElemCOSnapshot.INIT;
            ControlProjElemCOSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjElemCOSnapshot."Project No." := "Project No.";
            ControlProjElemCOSnapshot.Element := Element;
            ControlProjElemCOSnapshot."Cost Type" := "Cost Type";
            ControlProjElemCOSnapshot."Cost Object" := "Cost Object";

            CostContMgt.CalcFieldsElemCostObj(ControlProjectElemCostObject);

            CostContMgt.AllowedAndPurchElemCostObj(
              ControlProjectElemCostObject,
              ControlProjElemCOSnapshot.Allowed, ControlProjElemCOSnapshot."Allowed Hours",
              DummyDec, DummyDec,
              DummyDec, DummyDec, DummyDec, DummyDec, DummyDec, TRUE);

            ControlProjElemCOSnapshot.Budget := Budget;
            ControlProjElemCOSnapshot."Budget Hours" := "Budget Hours";
            ControlProjElemCOSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjElemCOSnapshot.Purchase := Purchase;
            ControlProjElemCOSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjElemCOSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjElemCOSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjElemCOSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjElemCOSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjElemCOSnapshot."Risc Coverage (Prognosis)" := "Risc Coverage (Prognosis)";
            ControlProjElemCOSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjElemCOSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjElemCOSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjElemCOSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjElemCOSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjElemCOSnapshot."Open Hours" := "Open Hours";
            ControlProjElemCOSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjElemCOSnapshot."Actual Costs" := "Actual Costs";
            ControlProjElemCOSnapshot."Actual Hours" := "Actual Hours";
            ControlProjElemCOSnapshot."Total Cost" := CostContMgt.TotCostElemCostObj(ControlProjectElemCostObject, FALSE);
            ControlProjElemCOSnapshot."Total Hours" := CostContMgt.TotHoursElemCostObj(ControlProjectElemCostObject, FALSE);
            ControlProjElemCOSnapshot.Available := Budget - CostContMgt.TotCostElemCostObj(ControlProjectElemCostObject, FALSE);
            ControlProjElemCOSnapshot."Purchase Result" := CostContMgt.PurchResultElemCostObj(ControlProjectElemCostObject,FALSE);
            ControlProjElemCOSnapshot.Result := CostContMgt.ResultElemCostObj(ControlProjectElemCostObject, FALSE);
            ControlProjElemCOSnapshot."Hours Result" := CostContMgt.ResultHoursElemCostObj(ControlProjectElemCostObject, FALSE);
            ControlProjElemCOSnapshot.Prognosis := Prognosis;
            IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
              ControlProjElemCOSnapshot."Hours Prognosis" := "Hours Prognosis";
              ControlProjElemCOSnapshot."Prognosis Total Hours" :=
                CostContMgt.PrognTotHoursElemCostObj(ControlProjectElemCostObject, FALSE);
            END;
            ControlProjElemCOSnapshot."Prognosis End Result" :=
              CostContMgt.PrognEndResultElemCostObj(ControlProjectElemCostObject, FALSE);
            ControlProjElemCOSnapshot."Prognosis End Result Hours" :=
              CostContMgt.PrognEndResultHoursElemCostObj(ControlProjectElemCostObject, FALSE);
            ControlProjElemCOSnapshot."Prognosis Result" := CostContMgt.PrognResultElemCostObj(ControlProjectElemCostObject, FALSE);
            ControlProjElemCOSnapshot."Prognosis Total Cost" :=
              CostContMgt.PrognTotCostElemCostObj(ControlProjectElemCostObject, FALSE);

            ControlProjElemCOSnapshot.INSERT;

          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuildProjExtSnapshot@1100525006(SnapshotDate@1100525000 : Date;VAR Project@1100525004 : Record 11072003);
    VAR
      ExtensionContract@1100525002 : Record 11012004;
      ControlProjExtSnapshot@1100525001 : Record 11020615;
      CreateControlLinesExtCostObj@1100525003 : Codeunit 11012056;
    BEGIN
      CreateControlLinesExtCostObj.SetHideWindow;
      CreateControlLinesExtCostObj.RUN(Project);

      WITH ExtensionContract DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");

        IF FINDSET THEN
          REPEAT
            ControlProjExtSnapshot.INIT;
            ControlProjExtSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjExtSnapshot."Project No." := "Project No.";
            ControlProjExtSnapshot."Extension Contract" := "Contract No.";

            CostContMgt.CalcFieldsExt(ExtensionContract);

            CostContMgt.AllowedAndPurchExt(
              ExtensionContract,
              ControlProjExtSnapshot.Allowed, ControlProjExtSnapshot."Allowed Hours",
              DummyDec, DummyDec, TRUE);

            ControlProjExtSnapshot."Contract Amount" := "Contract Amount (LCY)";
            ControlProjExtSnapshot.Budget := Budget;
            ControlProjExtSnapshot."Budget Hours" := "Budget Hours";
            ControlProjExtSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjExtSnapshot.Purchase := Purchase;
            ControlProjExtSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjExtSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjExtSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjExtSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjExtSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjExtSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjExtSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjExtSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjExtSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjExtSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjExtSnapshot."Open Hours" := "Open Hours";
            ControlProjExtSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjExtSnapshot."Actual Costs" := "Actual Costs";
            ControlProjExtSnapshot."Actual Hours" := "Actual Hours";
            ControlProjExtSnapshot."Total Cost" := CostContMgt.TotCostExt(ExtensionContract, FALSE);
            ControlProjExtSnapshot."Total Hours" := CostContMgt.TotHoursExt(ExtensionContract, FALSE);
            ControlProjExtSnapshot.Available := Budget - CostContMgt.TotCostExt(ExtensionContract, FALSE);
            ControlProjExtSnapshot."Purchase Result" := CostContMgt.PurchResultExt(ExtensionContract,FALSE);
            ControlProjExtSnapshot.Result := CostContMgt.ResultExt(ExtensionContract, FALSE);
            ControlProjExtSnapshot.Revenues := Revenues;
            ControlProjExtSnapshot."WIP Position" := ("Actual Costs" - Revenues); //differs from project level
            ControlProjExtSnapshot.Result := CostContMgt.ResultExt(ExtensionContract,FALSE);

            ControlProjExtSnapshot.INSERT;

          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuildProjExtCTSnapshot@1100525007(SnapshotDate@1100525000 : Date;VAR Project@1100525003 : Record 11072003);
    VAR
      ControlProjExtCostType@1100525002 : Record 11020222;
      ControlProjExtCTSnapshot@1100525001 : Record 11020616;
    BEGIN
      WITH ControlProjExtCostType DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");

        IF FINDSET THEN
          REPEAT
            ControlProjExtCTSnapshot.INIT;
            ControlProjExtCTSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjExtCTSnapshot."Project No." := "Project No.";
            ControlProjExtCTSnapshot."Extension Contract" := "Extension Contract";
            ControlProjExtCTSnapshot."Cost Type" := "Cost Type";

            CostContMgt.CalcFieldsExtCostType(ControlProjExtCostType);

            CostContMgt.AllowedAndPurchExtCostType(
              ControlProjExtCostType,
              ControlProjExtCTSnapshot.Allowed, DummyDec,
              DummyDec, DummyDec, TRUE);

            ControlProjExtCTSnapshot.Budget := Budget;
            ControlProjExtCTSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjExtCTSnapshot.Purchase := Purchase;
            ControlProjExtCTSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjExtCTSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjExtCTSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjExtCTSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjExtCTSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjExtCTSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjExtCTSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjExtCTSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjExtCTSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjExtCTSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjExtCTSnapshot."Open Hours" := "Open Hours";
            ControlProjExtCTSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjExtCTSnapshot."Actual Costs" := "Actual Costs";
            ControlProjExtCTSnapshot."Total Cost" := CostContMgt.TotCostExtCostType(ControlProjExtCostType, FALSE);
            ControlProjExtCTSnapshot."Total Hours" := CostContMgt.TotHoursExtCostType(ControlProjExtCostType, FALSE);
            ControlProjExtCTSnapshot.Available := Budget - CostContMgt.TotCostExtCostType(ControlProjExtCostType, FALSE);
            ControlProjExtCTSnapshot."Purchase Result" := CostContMgt.PurchResultExtCostType(ControlProjExtCostType,FALSE);
            ControlProjExtCTSnapshot.Result := CostContMgt.ResultExtCostType(ControlProjExtCostType, FALSE);

            ControlProjExtCTSnapshot.INSERT;

          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuildProjExtCOSnapshot@1100525008(SnapshotDate@1100525000 : Date;VAR Project@1100525003 : Record 11072003);
    VAR
      ControlProjExtCostObject@1100525002 : Record 11020223;
      ControlProjExtCOSnapshot@1100525001 : Record 11020617;
    BEGIN
      WITH ControlProjExtCostObject DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");

        IF FINDSET THEN
          REPEAT
            ControlProjExtCOSnapshot.INIT;
            ControlProjExtCOSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjExtCOSnapshot."Project No." := "Project No.";
            ControlProjExtCOSnapshot."Extension Contract" := "Extension Contract";
            ControlProjExtCOSnapshot."Cost Type" := "Cost Type";
            ControlProjExtCOSnapshot."Cost Object" := "Cost Object";

            CostContMgt.CalcFieldsExtCostObj(ControlProjExtCostObject);

            CostContMgt.AllowedAndPurchExtCostObj(
              ControlProjExtCostObject,
              ControlProjExtCOSnapshot.Allowed, ControlProjExtCOSnapshot."Allowed Hours",
              DummyDec, DummyDec, TRUE);

            ControlProjExtCOSnapshot.Budget := Budget;
            ControlProjExtCOSnapshot."Budget Hours" := "Budget Hours";
            ControlProjExtCOSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjExtCOSnapshot.Purchase := Purchase;
            ControlProjExtCOSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjExtCOSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjExtCOSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjExtCOSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjExtCOSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjExtCOSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjExtCOSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjExtCOSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjExtCOSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjExtCOSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjExtCOSnapshot."Open Hours" := "Open Hours";
            ControlProjExtCOSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjExtCOSnapshot."Actual Costs" := "Actual Costs";
            ControlProjExtCOSnapshot."Actual Hours" := "Actual Hours";
            ControlProjExtCOSnapshot."Total Cost" := CostContMgt.TotCostExtCostObj(ControlProjExtCostObject, FALSE);
            ControlProjExtCOSnapshot."Total Hours" := CostContMgt.TotHoursExtCostObj(ControlProjExtCostObject, FALSE);
            ControlProjExtCOSnapshot.Available := Budget - CostContMgt.TotCostExtCostObj(ControlProjExtCostObject, FALSE);
            ControlProjExtCOSnapshot."Purchase Result" := CostContMgt.PurchResultExtCostObj(ControlProjExtCostObject,FALSE);
            ControlProjExtCOSnapshot.Result := CostContMgt.ResultExtCostObj(ControlProjExtCostObject, FALSE);

            ControlProjExtCOSnapshot.INSERT;

          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuildProjCostCompSnapshot@1100525009(SnapshotDate@1100525000 : Date;VAR Project@1100525004 : Record 11072003);
    VAR
      ControlProjectCostComponent@1100525002 : Record 11020297;
      ControlProjCostCompSnapshot@1100525001 : Record 11020618;
      CreateControlLinesProjCostObj@1100525003 : Codeunit 11012011;
    BEGIN
      CreateControlLinesProjCostObj.ControlCostComponent(Project);

      WITH ControlProjectCostComponent DO BEGIN
        SETRANGE("Project No.", Project."No.");

        Project.COPYFILTER("Cumulation Filter", "Cumulation Filter");
        Project.COPYFILTER("Period Filter", "Period Filter");
        Project.COPYFILTER("Progress Filter", "Progress Filter");

        IF FINDSET THEN
          REPEAT

            ControlProjCostCompSnapshot.INIT;
            ControlProjCostCompSnapshot."Snapshot Date" := SnapshotDate;
            ControlProjCostCompSnapshot."Project No." := "Project No.";
            ControlProjCostCompSnapshot."Cost Component" := "Cost Component";

            CostContMgt.CalcFieldsCostComp(ControlProjectCostComponent);

            ControlProjCostCompSnapshot.Budget := Budget;
            ControlProjCostCompSnapshot."Budget Hours" := "Budget Hours";
            ControlProjCostCompSnapshot."Purchase Budget" := "Purchase Budget";
            ControlProjCostCompSnapshot.Purchase := Purchase;
            ControlProjCostCompSnapshot."Open (Purchase)" := "Open (Purchase)";
            ControlProjCostCompSnapshot."Received/Not Invoiced" := "Received/Not Invoiced";
            ControlProjCostCompSnapshot."Received/Not Inv. Hours" := "Received/Not Inv. Hours";
            ControlProjCostCompSnapshot."Open Ovh. Surch. Firm (Purch.)" := "Open Ovh. Surch. Firm (Purch.)";
            ControlProjCostCompSnapshot."Open Ovh. Surch. Soft (Purch.)" := "Open Ovh. Surch. Soft (Purch.)";
            ControlProjCostCompSnapshot."Risc Coverage" := "Risc Coverage";
            ControlProjCostCompSnapshot."Risc Coverage Withdraw" := "Risc Coverage Withdraw";
            ControlProjCostCompSnapshot."Open (Inventory)" := "Open (Inventory)";
            ControlProjCostCompSnapshot."Open Ovh. Surch. (Inventory)" := "Open Ovh. Surch. (Inventory)" ;
            ControlProjCostCompSnapshot."Open Amount (Hours)" := "Open Amount (Hours)";
            ControlProjCostCompSnapshot."Open Ovh. Surch. (Hours)" := "Open Ovh. Surch. (Hours)";
            ControlProjCostCompSnapshot."Actual Costs" := "Actual Costs";
            ControlProjCostCompSnapshot."Actual Hours" := "Actual Hours";
            ControlProjCostCompSnapshot."Total Cost" := CostContMgt.TotCostCostComp(ControlProjectCostComponent, FALSE);
            ControlProjCostCompSnapshot."Total Hours" := CostContMgt.TotHoursCostComp(ControlProjectCostComponent, FALSE);
            ControlProjCostCompSnapshot.Available := Budget - CostContMgt.TotCostCostComp(ControlProjectCostComponent, FALSE);

            ControlProjCostCompSnapshot.INSERT;

          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

