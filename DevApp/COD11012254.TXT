OBJECT Codeunit 11012254 Shipping Order Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text002@1100525001 : TextConst 'ENU=%1*%2*%2cm';

    PROCEDURE CalcPackagingWeight@1100528800(VAR ShippingOrderHeader@1100525000 : Record 11020623);
    VAR
      ShippingOrderLine@1100528801 : Record 11071885;
      PackagingType@1100525003 : Record 11020622;
      TmpShippingOrderLine@1100528800 : TEMPORARY Record 11071885;
      PackagingWeight@1100525002 : Decimal;
      LineNo@1100528802 : Integer;
    BEGIN
      WITH ShippingOrderHeader DO BEGIN
        LineNo := 0;

        ShippingOrderLine.SETRANGE("Document No.", "No.");
        IF ShippingOrderLine.FINDSET THEN BEGIN
          REPEAT
            TmpShippingOrderLine.SETRANGE("Document No.", ShippingOrderLine."Document No.");
            TmpShippingOrderLine.SETRANGE("Parcel No.", ShippingOrderLine."Parcel No.");
            TmpShippingOrderLine.SETRANGE("Packaging Type", ShippingOrderLine."Packaging Type");
            IF NOT TmpShippingOrderLine.FINDFIRST THEN BEGIN
              TmpShippingOrderLine."Document No." := ShippingOrderLine."Document No.";
              LineNo := LineNo + 10;
              TmpShippingOrderLine."Line No." := LineNo;
              TmpShippingOrderLine."Parcel No." := ShippingOrderLine."Parcel No.";
              TmpShippingOrderLine."Packaging Type" := ShippingOrderLine."Packaging Type";
              TmpShippingOrderLine.INSERT;
            END;
          UNTIL ShippingOrderLine.NEXT = 0;
        END;

        TmpShippingOrderLine.RESET;
        IF TmpShippingOrderLine.FINDSET THEN BEGIN
          REPEAT
            IF PackagingType.GET(TmpShippingOrderLine."Packaging Type") THEN
              PackagingWeight += PackagingType.Weight;
          UNTIL TmpShippingOrderLine.NEXT = 0;
        END;

        "Packaging Weight" := PackagingWeight;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CalcWeightTotals@1100529800(VAR ShippingOrderHeader@1100529800 : Record 11020623);
    VAR
      ShippingOrderLine@1100529803 : Record 11071885;
    BEGIN
      WITH ShippingOrderHeader DO BEGIN
        "Nett Weight" := 0;
        "Gross Weight" := 0;
        "Shipment Rate" := 0;

        ShippingOrderLine.SETRANGE("Document No.", "No.");
        IF ShippingOrderLine.FINDSET THEN BEGIN
          REPEAT
            ShippingOrderHeader."Nett Weight" += ShippingOrderLine."Nett Weight Contents";
            ShippingOrderHeader."Gross Weight" += ShippingOrderLine."Gross Weight Contents";
            ShippingOrderHeader."Shipment Rate" += ShippingOrderLine."Line Amount";
          UNTIL ShippingOrderLine.NEXT = 0;

          MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE CalcWeight@1100525009(VAR ShippingOrderLine@1100525002 : Record 11071885);
    VAR
      InventorySetup@1100525010 : Record 313;
      ShippingOrderHeader@1100528800 : Record 11020623;
    BEGIN
      ShippingOrderHeader.GET(ShippingOrderLine."Document No.");

      WITH ShippingOrderLine DO BEGIN
        CASE ShippingOrderHeader."Source Type" OF

          ShippingOrderHeader."Source Type"::"Sales Order":
            BEGIN
              GetWeightItem(ShippingOrderLine);
            END;

          ShippingOrderHeader."Source Type"::"Purchase Return Order",
          ShippingOrderHeader."Source Type"::Project,
          ShippingOrderHeader."Source Type"::"Service Order":
            BEGIN
              InventorySetup.GET();
              IF InventorySetup."Price Info Trade Item Leading" THEN BEGIN
                IF GetWeightTradeItem(ShippingOrderLine) THEN
                  EXIT;
                IF GetWeightBasicItem(ShippingOrderLine) THEN;
                  EXIT;
                GetWeightItem(ShippingOrderLine);
              END ELSE BEGIN
                IF GetWeightItem(ShippingOrderLine) THEN
                  EXIT;
                IF GetWeightTradeItem(ShippingOrderLine) THEN
                  EXIT;
                GetWeightBasicItem(ShippingOrderLine);
              END;
            END;

        END;
      END;
    END;

    PROCEDURE EditCommentLines@1100529802(DocumentNo@1100529802 : Code[20];LineNo@1100529804 : Integer);
    VAR
      CommentLine@1100529800 : Record 11071887;
    BEGIN
      CommentLine.FILTERGROUP(2);
      CommentLine.SETRANGE("Document No.", DocumentNo);
      CommentLine.SETRANGE("Shipping Order Line No.", LineNo);
      CommentLine.FILTERGROUP(0);
      PAGE.RUNMODAL(0, CommentLine);
    END;

    PROCEDURE GetWeightTradeItem@1100525015(VAR ShippingOrderLine@1100525003 : Record 11071885) : Boolean;
    VAR
      TradeItem@1100525002 : Record 11012317;
    BEGIN
      WITH ShippingOrderLine DO BEGIN
        IF TradeItem.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
          "Nett Weight Contents" := (TradeItem."Gross Weight" * "Qty. to Ship");
          "Gross Weight Contents" := (TradeItem."Gross Weight" * "Qty. to Ship");
        END;
        IF ("Nett Weight Contents" <> 0) OR ("Gross Weight Contents" <> 0) THEN
          EXIT(TRUE);
      END;
    END;

    PROCEDURE GetWeightBasicItem@1100525016(VAR ShippingOrderLine@1100525003 : Record 11071885) : Boolean;
    VAR
      BasicItem@1100525004 : Record 11012316;
    BEGIN
      WITH ShippingOrderLine DO BEGIN
        IF BasicItem.GET(Manufacturer, "Basic Item") THEN BEGIN
          "Nett Weight Contents" := (BasicItem."Nett Weight" * "Qty. to Ship");
          "Gross Weight Contents" := (BasicItem."Nett Weight" * "Qty. to Ship");
        END;
        IF ("Nett Weight Contents" <> 0) OR ("Gross Weight Contents" <> 0) THEN
          EXIT(TRUE);
      END;
    END;

    PROCEDURE GetWeightItem@1100525017(VAR ShippingOrderLine@1100525003 : Record 11071885) : Boolean;
    VAR
      Item@1100525002 : Record 27;
    BEGIN
      WITH ShippingOrderLine DO BEGIN
        IF Item.GET("Item No.") THEN BEGIN
          "Nett Weight Contents" := (Item."Net Weight" * "Qty. to Ship");
          "Gross Weight Contents" := (Item."Gross Weight" * "Qty. to Ship");
        END;
        IF ("Nett Weight Contents" <> 0) OR ("Gross Weight Contents" <> 0) THEN
          EXIT(TRUE);
      END;
    END;

    PROCEDURE GetPackagingDimensions@1100525000(PostedShippingOrderLine@1100525000 : Record 11071886) : Text[30];
    BEGIN
      EXIT(STRSUBSTNO(Text002,
        FORMAT(ROUND(PostedShippingOrderLine.Length * 100, 1), 0, '<integer,3>'),
        FORMAT(ROUND(PostedShippingOrderLine.Width * 100, 1), 0, '<integer,3>'),
        FORMAT(ROUND(PostedShippingOrderLine.Height * 100, 1), 0, '<integer,3>')));
    END;

    PROCEDURE GetQtyToShipSameSource@1100525021(IShippingOrderLine@1100525000 : Record 11071885;QtyToShip@1100529800 : Decimal) : Decimal;
    VAR
      ShippingOrderLine@1100525001 : Record 11071885;
    BEGIN
      ShippingOrderLine.RESET;
      ShippingOrderLine.SETRANGE("Document No.", IShippingOrderLine."Document No.");
      ShippingOrderLine.SETRANGE("Source Line No.", IShippingOrderLine."Source Line No.");
      IF ShippingOrderLine.FINDSET THEN BEGIN
        REPEAT
          IF NOT SkipRecord(IShippingOrderLine, ShippingOrderLine) THEN
            QtyToShip -= ShippingOrderLine."Qty. to Ship";
        UNTIL ShippingOrderLine.NEXT = 0;
      END;

      IF QtyToShip < 0 THEN
        QtyToShip := 0;

      EXIT(QtyToShip);
    END;

    LOCAL PROCEDURE SkipRecord@1100529803(IShippingOrderLine@1100529800 : Record 11071885;IShippingOrderLine2@1100529801 : Record 11071885) : Boolean;
    BEGIN
      IF (IShippingOrderLine2."Document No." = IShippingOrderLine."Document No.") AND
         (IShippingOrderLine2."Parcel No." = IShippingOrderLine."Parcel No.") AND
         (IShippingOrderLine2."Line No." = IShippingOrderLine."Line No.")
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE AvailableQtyToShipSameSource@1100529804(IShippingOrderLine@1100529800 : Record 11071885) : Decimal;
    VAR
      ShippingOrderLine@1100529801 : Record 11071885;
      QtyToShip@1100529802 : Decimal;
    BEGIN
      QtyToShip := 0;

      ShippingOrderLine.RESET;
      ShippingOrderLine.SETRANGE("Document No.", IShippingOrderLine."Document No.");
      ShippingOrderLine.SETRANGE("Source Line No.", IShippingOrderLine."Source Line No.");
      IF ShippingOrderLine.FINDSET THEN BEGIN
        REPEAT
          IF (IShippingOrderLine."Document No." = ShippingOrderLine."Document No.") AND
             (IShippingOrderLine."Line No." = ShippingOrderLine."Line No.")
          THEN
            QtyToShip += IShippingOrderLine."Qty. to Ship"
          ELSE
            QtyToShip += ShippingOrderLine."Qty. to Ship";
        UNTIL ShippingOrderLine.NEXT = 0;
      END;

      EXIT(QtyToShip);
    END;

    PROCEDURE UpdateProjInventDeliveryLine@1100409000(ShippingOrderLine@1100409002 : Record 11071885;Action@1100409000 : 'Insert,Modify,Delete');
    VAR
      ShippingOrderHeader@1100409001 : Record 11020623;
      ShippingOrderLine2@1100409007 : Record 11071885;
      TmpShippingOrderLine@1100409003 : TEMPORARY Record 11071885;
      ProjectInventoryEntry@1100409005 : Record 11012670;
      ProjectInventoryDelivery@1100409006 : Record 11012671;
      DummyTempProjInventoryDelivery@1100409008 : TEMPORARY Record 11012671;
      LineNo@1100409004 : Integer;
    BEGIN
      //DP00121
      IF NOT ShippingOrderHeader.GET(ShippingOrderLine."Document No.") THEN
        EXIT;

      IF ShippingOrderHeader."Source Type" <> ShippingOrderHeader."Source Type"::Project THEN
        EXIT;

      // Cumulate Lines
      ShippingOrderLine2.SETRANGE("Document No.", ShippingOrderLine."Document No.");
      ShippingOrderLine2.SETRANGE("Source Line No.", ShippingOrderLine."Source Line No.");
      IF ShippingOrderLine2.FINDSET THEN
        REPEAT
          CumulateLines(TmpShippingOrderLine, ShippingOrderLine2, ShippingOrderLine2."Qty. to Ship", LineNo);
        UNTIL ShippingOrderLine2.NEXT = 0;

      //Handle Quantity not yet written to DB
      CASE Action OF
        Action::Insert:
          CumulateLines(
            TmpShippingOrderLine, ShippingOrderLine, ShippingOrderLine."Qty. to Ship", LineNo);
        Action::Modify:
          BEGIN
            ShippingOrderLine2 := ShippingOrderLine;
            ShippingOrderLine2.RESET;
            ShippingOrderLine2.FIND('=');
            CumulateLines(
              TmpShippingOrderLine, ShippingOrderLine,
              ShippingOrderLine."Qty. to Ship" - ShippingOrderLine2."Qty. to Ship", LineNo );
          END;
        Action::Delete:
          BEGIN
            ShippingOrderLine2 := ShippingOrderLine;
            ShippingOrderLine2.RESET;
            ShippingOrderLine2.FIND('=');
            CumulateLines(
              TmpShippingOrderLine, ShippingOrderLine,
              - ShippingOrderLine2."Qty. to Ship", LineNo);
          END;
      END;

      // Process Cumulated Lines
      TmpShippingOrderLine.RESET;
      IF TmpShippingOrderLine.FINDSET THEN
        REPEAT
          ProjectInventoryEntry.GET(TmpShippingOrderLine."Source Line No.");

          ProjectInventoryDelivery.AddLine(
            ProjectInventoryEntry,DummyTempProjInventoryDelivery,
            ProjectInventoryDelivery, 0);

          ProjectInventoryDelivery.VALIDATE(Quantity, TmpShippingOrderLine."Qty. to Ship");
          ProjectInventoryDelivery.MODIFY(TRUE);
        UNTIL TmpShippingOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CumulateLines@1100409007(VAR TmpShippingOrderLine@1100409000 : TEMPORARY Record 11071885;ShippingOrderLine@1100409001 : Record 11071885;QuantityToShip@1100409002 : Decimal;VAR LineNo@1100409003 : Integer);
    BEGIN
      //DP00121
      TmpShippingOrderLine.SETRANGE("Document No.", ShippingOrderLine."Document No.");
      TmpShippingOrderLine.SETRANGE("Source Line No.", ShippingOrderLine."Source Line No.");
      IF NOT TmpShippingOrderLine.FINDFIRST THEN BEGIN
        TmpShippingOrderLine."Document No." := ShippingOrderLine."Document No.";
        TmpShippingOrderLine."Source Line No." := ShippingOrderLine."Source Line No.";
        LineNo := LineNo + 1;
        TmpShippingOrderLine."Line No." := LineNo;
        TmpShippingOrderLine."Qty. to Ship" := QuantityToShip;
        TmpShippingOrderLine.INSERT;
      END ELSE BEGIN
        TmpShippingOrderLine."Qty. to Ship" += QuantityToShip;
        TmpShippingOrderLine.MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

