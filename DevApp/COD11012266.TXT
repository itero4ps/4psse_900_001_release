OBJECT Codeunit 11012266 Web Service Management 4PS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FileMgt@1100525003 : Codeunit 419;
      SOAPNamespaces@1100528300 : ARRAY [10,2] OF Text[100];
      Request@1100525000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      Response@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      SOAPMethod@1100525005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      ReadyState@1100525002 : 'Uninitialized,Loading,Loaded,Interactive,Completed';
      NodeType@1100525004 : ',Element,Attribute,Text';
      Text000@1100525006 : TextConst 'ENU=An error occurred during calling the web service:\\%1\\Error Code: %2\\Error String: %3';
      Text001@1100526200 : TextConst 'ENU=Expected Xpath could not be found.\\%1';
      Text002@1100528401 : TextConst 'ENU=Tag %1 could not be found.';
      Text003@1100528402 : TextConst 'ENU=Web Service Communication Failed.';
      Text004@1210190000 : TextConst 'ENU=Failed to send request (error %1: %2). \\Please contact your Navision Administrator.';
      Text005@1100528301 : TextConst 'ENU=Fatal Error in the Base64 decoding (Error Code: %1).';
      Text006@1100528302 : TextConst 'ENU=Fatal Error in the Base64 encoding (Error Code: %1).';
      Text007@1100528303 : TextConst 'ENU=Username and Password can''t be encrypted.';

    PROCEDURE SetGlobalVars@1100528306();
    BEGIN
      SOAPNamespaces[1,1] := 'soap';
      SOAPNamespaces[1,2] := 'http://schemas.xmlsoap.org/soap/envelope/';
    END;

    PROCEDURE PrepareSOAPRequest@1100525005(Namespace@1100528400 : Text[250];MethodName@1100525008 : Text[80]);
    VAR
      Envelope@1100528300 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      Body@1100525007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      SetGlobalVars;
      PrepareRequest;

      SetRequestSelectionNamespaces(SOAPNamespaces);
      AppendElement(Request, SOAPNamespaces[1,2], SOAPNamespaces[1,1]+':Envelope', '', Envelope);
      AppendElement(Envelope, SOAPNamespaces[1,2], SOAPNamespaces[1,1]+':Body', '', Body);
      AppendElement(Body, Namespace, MethodName, '', SOAPMethod);
    END;

    PROCEDURE PrepareXMLRPCRequest@1210190001(Namespace@1210190002 : Text[250];RootTag@1210190003 : Text[30]);
    VAR
      Dummy@1210190001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      SetGlobalVars;
      PrepareRequest;
      AppendElement(Request, Namespace, RootTag, '', Dummy); //TU specific??
    END;

    LOCAL PROCEDURE PrepareRequest@1210190013();
    BEGIN
      IF NOT ISCLEAR(Request) THEN
        CLEAR(Request);

      CREATE(Request, FALSE, TRUE);
      AppendProcessingInstruction(Request, 'xml', 'version="1.0" encoding="utf-8"');
    END;

    PROCEDURE AppendSOAPParameter@1100525029(Namespace@1100528400 : Text[250];Name@1100525000 : Text[80];Value@1100525001 : Text[1024]);
    VAR
      Parameter@1100525002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      AppendElement(SOAPMethod, Namespace, Name, Value, Parameter);
    END;

    PROCEDURE AppendParameter@1100528403(ParentXPath@1100528401 : Text[250];Namespace@1100528400 : Text[250];Name@1100525000 : Text[80];Value@1100525001 : Text[1024]);
    VAR
      SubParameter@1100525002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      ParentNode@1100528402 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      ParentNode := Request.documentElement.selectSingleNode(ParentXPath);
      IF NOT ISCLEAR(ParentNode) THEN
        AppendElement(ParentNode, Namespace, Name, Value, SubParameter)
      ELSE
        ERROR(Text002, ParentXPath);
    END;

    PROCEDURE CopyRequestToRequest@1100528305(FromXpath@1210190000 : Text[250];ToXpath@1210190001 : Text[250]);
    VAR
      FromNode@1210190002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ToNode@1210190003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      FromNode := Request.documentElement.selectSingleNode(FromXpath);
      ToNode := Request.documentElement.selectSingleNode(ToXpath);
      CopyNodeToNode(FromNode, ToNode, FromXpath, ToXpath);
    END;

    PROCEDURE CopyResponseToResponse@1100528310(FromXpath@1210190000 : Text[250];ToXpath@1210190001 : Text[250]);
    VAR
      FromNode@1210190002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ToNode@1210190003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      FromNode := Response.documentElement.selectSingleNode(FromXpath);
      ToNode := Request.documentElement.selectSingleNode(ToXpath);
      CopyNodeToNode(FromNode, ToNode, FromXpath, ToXpath);
    END;

    PROCEDURE CopyResponseToRequest@1210190009(FromXpath@1210190000 : Text[250];ToXpath@1210190001 : Text[250]);
    VAR
      FromNode@1210190002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ToNode@1210190003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      FromNode := Response.documentElement.selectSingleNode(FromXpath);
      ToNode := Request.documentElement.selectSingleNode(ToXpath);
      CopyNodeToNode(FromNode, ToNode, FromXpath, ToXpath);
    END;

    LOCAL PROCEDURE CopyNodeToNode@1100528307(FromNode@1100528301 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";ToNode@1100528300 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";FromXpath@1210190000 : Text[250];ToXpath@1210190001 : Text[250]);
    BEGIN
      IF ISCLEAR(FromNode) THEN BEGIN
        ERROR(Text001, FromXpath);
      END;

      IF ISCLEAR(ToNode) THEN BEGIN
        ERROR(Text001, ToXpath);
      END;

      ToNode.appendChild(FromNode);
    END;

    PROCEDURE SendSOAPRequest@1100525006(MethodName@1100528400 : Text[80];ServiceURL@1100525001 : Text[1024];ThrowError@1100525002 : Boolean);
    BEGIN
      SendSOAPRequest2(MethodName, ServiceURL, 0, '', '', ThrowError);
    END;

    PROCEDURE SendSOAPRequest2@1100528309(MethodName@1100528400 : Text[80];ServiceURL@1100525001 : Text[1024];AuthenticatMethod@1100528300 : 'None,Basic,NTLM';Username@1100528302 : Text[100];Password@1100528303 : Text[50];ThrowError@1100525002 : Boolean);
    VAR
      XMLHTTP@1100525000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A0A-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.XMLHTTP60";
      EncodedUnamePword@1100528304 : Text[250];
    BEGIN
      //Length of Username is 100 because domain name can be included in Username.
      CREATE(XMLHTTP, FALSE, TRUE);
      XMLHTTP.open('POST', ServiceURL, FALSE);

      CASE AuthenticatMethod OF
        AuthenticatMethod::Basic: BEGIN
          EncodedUnamePword := GetBase64UnamePword(Username, Password);
          XMLHTTP.setRequestHeader('Authorization', 'Basic ' + EncodedUnamePword);
          XMLHTTP.setRequestHeader('Proxy-Authorization', EncodedUnamePword);
        END;
        AuthenticatMethod::NTLM: BEGIN
          XMLHTTP.open('POST', ServiceURL, FALSE, Username, Password);
        END;
      END;

      XMLHTTP.setRequestHeader('Content-Type', 'text/xml; charset=utf-8');
      IF (MethodName <> '') THEN
        XMLHTTP.setRequestHeader('SOAPAction', MethodName);

      XMLHTTP.send(Request);

      WHILE (XMLHTTP.readyState <> ReadyState::Completed) DO
        SLEEP(500);

      IF ((XMLHTTP.status >= 400) AND (XMLHTTP.status < 500)) THEN
        ERROR(Text004, XMLHTTP.status, XMLHTTP.statusText);

      Response := XMLHTTP.responseXML;

      SetResponseSelectionNamespaces(SOAPNamespaces);

      IF ThrowError THEN BEGIN
        IF NOT Response.hasChildNodes THEN
          ERROR(Text003);
        IF SOAPFaultOccurred THEN
          ThrowSOAPFault;
      END;
    END;

    PROCEDURE SendXMLRPCRequest@1210190002(MethodName@1100528400 : Text[80];ServiceURL@1100525001 : Text[1024];ThrowError@1100525002 : Boolean);
    VAR
      XMLHTTP@1100525000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A0A-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.XMLHTTP60";
    BEGIN
      CREATE(XMLHTTP, FALSE, TRUE);
      XMLHTTP.open('POST', ServiceURL, FALSE);
      //AppendSOAPSubParameter('.', '', 'methodName', MethodName); //TU specific??
      XMLHTTP.send(Request);

      WHILE (XMLHTTP.readyState <> ReadyState::Completed) DO
        SLEEP(500);

      IF ((XMLHTTP.status >= 400) AND (XMLHTTP.status < 500)) THEN
        ERROR(Text004, XMLHTTP.status);

      Response := XMLHTTP.responseXML;

      IF ThrowError THEN BEGIN
        IF NOT Response.hasChildNodes THEN
          ERROR(Text003);
        IF XMLRPCFaultOccurred THEN
          ThrowXMLRPCFault;
      END;
    END;

    PROCEDURE DecodeBase64ResponseNode@1100528311(Xpath@1100528308 : Text[250];RootNamespace@1210190000 : Text[250];NoOfSpaces@1210190001 : Integer);
    VAR
      NodeToBeDecoded@1100528303 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      DecodedResponse@1100528305 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      DecodedNode@1100528304 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      FileName@1100528302 : Text[250];
      DecodeResult@1100528307 : Integer;
    BEGIN
      //Only used in ZETSOLUTION (Page: GS1 Invoice IDs)  kz  (see T006414)
      //NameDataTypeSubtypeLength
      //Base64Automation'CG Request Client'.Base64


      NodeToBeDecoded := Response.documentElement.selectSingleNode(Xpath);
      IF ISCLEAR(NodeToBeDecoded) THEN
        ERROR(Text001, Xpath);

      FileName := GetTempFileNamePath('Base64Decode-', 'xml');

      { FIXME kzwerver haha
      IF (ISCLEAR(Base64)) THEN
        CREATE(Base64, FALSE, TRUE);
      DecodeResult := Base64.Decode(FileName, NodeToBeDecoded);
      }
      IF (DecodeResult <> 0) THEN
        ERROR(Text005, DecodeResult);

      IF (ISCLEAR(DecodedResponse)) THEN
        CREATE(DecodedResponse, FALSE, TRUE);
      DecodedResponse.load(FileName);

      DecodedNode := DecodedResponse.firstChild;
      IF (DecodedNode.nodeName = 'xml') AND (NOT DecodedNode.hasChildNodes) THEN BEGIN
        DecodedResponse.removeChild(DecodedNode); //remove the '<?xml ...' node
        DecodedNode := DecodedResponse.firstChild;
      END;

      IF (RootNamespace <> '') THEN BEGIN
        DecodedResponse.save(FileName + '-In');
        CLEAR(DecodedResponse);

        AddNamespaceToFile(FileName + '-In', FileName, RootNamespace, NoOfSpaces);

        CREATE(DecodedResponse, FALSE, TRUE);
        DecodedResponse.load(FileName);
        DecodedNode := DecodedResponse.firstChild;
      END;

      DeleteFile(FileName);
      NodeToBeDecoded.text := '';
      NodeToBeDecoded.appendChild(DecodedNode);
    END;

    PROCEDURE GetRequestValueText@1210190000(Xpath@1100525000 : Text[250];ValueMustExist@1100525002 : Boolean) : Text[1024];
    VAR
      Node@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      TextNode@1100528400 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF87-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMText";
    BEGIN
      Node := Request.documentElement.selectSingleNode(Xpath);

      IF ISCLEAR(Node) THEN BEGIN
        IF ValueMustExist THEN
          ERROR(Text001, Xpath);
        EXIT('');
      END;

      IF Node.nodeTypeString = 'text' THEN
        TextNode := Node
      ELSE
        TextNode := Node.selectSingleNode('./text()[1]'); //Select first child node of type text.

      IF NOT ISCLEAR(TextNode) THEN
        EXIT(TextNode.substringData(0, 1024));
    END;

    PROCEDURE SetRequestValueText@1210190008(Xpath@1100525000 : Text[250];Value@1100525002 : Text[1024]);
    VAR
      Node@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      TextNode@1100528400 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF87-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMText";
    BEGIN
      Node := Request.documentElement.selectSingleNode(Xpath);

      IF ISCLEAR(Node) THEN BEGIN
        ERROR(Text001, Xpath);
      END;

      IF Node.nodeTypeString = 'text' THEN
        TextNode := Node
      ELSE
        TextNode := Node.selectSingleNode('./text()[1]'); //Select first child node of type text.

      TextNode.nodeValue := Value;
    END;

    PROCEDURE RequestNodeIsPresent@1100528408(Xpath@1100525000 : Text[250]) : Boolean;
    VAR
      Node@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      IF (ISCLEAR(Request)) OR (NOT Request.hasChildNodes) THEN
        EXIT(FALSE);

      Node := Request.documentElement.selectSingleNode(Xpath);

      IF ISCLEAR(Node) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE ResponseNodeIsPresent@1100528302(Xpath@1100525000 : Text[250]) : Boolean;
    VAR
      Node@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      IF (ISCLEAR(Response)) OR (NOT Response.hasChildNodes) THEN
        EXIT(FALSE);

      Node := Response.documentElement.selectSingleNode(Xpath);

      IF ISCLEAR(Node) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE GetResponseValueText@1100525007(Xpath@1100525000 : Text[250];ValueMustExist@1100525002 : Boolean) : Text[1024];
    VAR
      Node@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      TextNode@1100528400 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF87-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMText";
    BEGIN
      Node := Response.documentElement.selectSingleNode(Xpath);

      IF ISCLEAR(Node) THEN BEGIN
        IF ValueMustExist THEN
          ERROR(Text001, Xpath);
        EXIT('');
      END;

      IF Node.nodeTypeString = 'text' THEN
        TextNode := Node
      ELSE
        TextNode := Node.selectSingleNode('./text()[1]'); //Select first child node of type text.

      IF NOT ISCLEAR(TextNode) THEN
        EXIT(TextNode.substringData(0, 1024));
    END;

    PROCEDURE GetResponseValueInt@1100525002(Xpath@1100525000 : Text[250];ValueMustExist@1100525001 : Boolean) Result : Integer;
    BEGIN
      EVALUATE(Result, GetResponseValueText(Xpath, ValueMustExist));
    END;

    PROCEDURE GetResponseValueDec@1100526202(Xpath@1100526201 : Text[250];ValueMustExist@1100526200 : Boolean) Result : Decimal;
    VAR
      TextString@1100528300 : Text[30];
      DecimalSeparator@1100528301 : Text[1];
    BEGIN
      DecimalSeparator := DELCHR(FORMAT(0.1), '=', '01');
      TextString := GetResponseValueText(Xpath, ValueMustExist);
      TextString := CONVERTSTR(TextString, '.', DecimalSeparator);
      EVALUATE(Result, TextString);
    END;

    PROCEDURE GetResponseValueDate@1100528300(Xpath@1100525000 : Text[250];ValueMustExist@1100525002 : Boolean) : Date;
    VAR
      StringDate@1100528300 : Text[30];
      Day@1100528301 : Integer;
      Month@1100528302 : Integer;
      Year@1100528303 : Integer;
    BEGIN
      //              0        1         2
      //              12345678901234567890123456789
      //XML DateTime: 2011-10-18T00:00:00.000+02:00
      StringDate := GetResponseValueText(Xpath, ValueMustExist);
      IF (StringDate = '') OR (STRLEN(StringDate) < 10) THEN
        EXIT(0D);

      EVALUATE(Day, COPYSTR(StringDate, 9,2));
      EVALUATE(Month, COPYSTR(StringDate, 6,2));
      EVALUATE(Year, COPYSTR(StringDate, 1,4));

      IF (Day = 1) AND (Month = 1) AND (Year = 1) THEN
        EXIT(0D)
      ELSE
        EXIT(DMY2DATE(Day, Month, Year));
    END;

    PROCEDURE GetResponseValueCount@1100525008(Xpath@1100525000 : Text[250]) : Integer;
    BEGIN
      EXIT(Response.documentElement.selectNodes(Xpath).length);
    END;

    PROCEDURE GetResponseAttributeValueText@1100528303(Xpath@1100525000 : Text[250];NodeMustExist@1100525002 : Boolean;AttributeName@1100528301 : Text[30]) : Text[1024];
    VAR
      Node@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      Element@1100528300 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      Node := Response.documentElement.selectSingleNode(Xpath);

      IF ISCLEAR(Node) THEN BEGIN
        IF NodeMustExist THEN
          ERROR(Text001, Xpath);
        EXIT('');
      END;

      Element := Node;
      EXIT(COPYSTR(FORMAT(Element.getAttribute(AttributeName)), 1, 1024));
    END;

    PROCEDURE GetResponseAttributeValueInt@1100528304(Xpath@1100525000 : Text[250];NodeMustExist@1100525002 : Boolean;AttributeName@1100528301 : Text[30]) Result : Integer;
    BEGIN
      EVALUATE(Result, GetResponseAttributeValueText(Xpath, NodeMustExist, AttributeName));
    END;

    PROCEDURE GetResponseAttributeValueDec@1100528313(Xpath@1100525000 : Text[250];NodeMustExist@1100525002 : Boolean;AttributeName@1100528301 : Text[30]) Result : Decimal;
    VAR
      TextString@1100528300 : Text[30];
      DecimalSeparator@1100528302 : Text[1];
    BEGIN
      DecimalSeparator := DELCHR(FORMAT(0.1), '=', '01');
      TextString := GetResponseAttributeValueText(Xpath, NodeMustExist, AttributeName);
      TextString := CONVERTSTR(TextString, '.', DecimalSeparator);
      EVALUATE(Result, TextString);
    END;

    PROCEDURE GetResponseAttributeValueDate@1100528308(Xpath@1100525000 : Text[250];ValueMustExist@1100525002 : Boolean;AttributeName@1100528304 : Text[30]) : Date;
    VAR
      StringDate@1100528300 : Text[30];
      Day@1100528301 : Integer;
      Month@1100528302 : Integer;
      Year@1100528303 : Integer;
    BEGIN
      //              0        1         2
      //              12345678901234567890123456789
      //XML DateTime: 2011-10-18T00:00:00.000+02:00
      StringDate := GetResponseAttributeValueText(Xpath, ValueMustExist, AttributeName);
      IF (StringDate = '') OR (STRLEN(StringDate) < 10) THEN
        EXIT(0D);

      EVALUATE(Day, COPYSTR(StringDate, 9,2));
      EVALUATE(Month, COPYSTR(StringDate, 6,2));
      EVALUATE(Year, COPYSTR(StringDate, 1,4));
      EXIT(DMY2DATE(Day, Month, Year));
    END;

    LOCAL PROCEDURE AppendProcessingInstruction@1100525018(ParentNode@1100525000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";Target@1100525001 : Text[80];Value@1100525002 : Text[250]);
    VAR
      ProcessingInstruction@1100525003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF89-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMProcessingInstruction";
    BEGIN
      ProcessingInstruction := Request.createProcessingInstruction(Target, Value);
      ParentNode.appendChild(ProcessingInstruction);
    END;

    LOCAL PROCEDURE AppendElement@1100525035(ParentNode@1100525002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";Namespace@1100525005 : Text[80];Name@1100525001 : Text[80];Content@1100525000 : Text[1024];VAR Element@1100525003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement");
    VAR
      TextNode@1100525004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF87-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMText";
    BEGIN
      Element := Request.createNode(NodeType::Element, Name, Namespace);
      ParentNode.appendChild(Element);

      IF Content <> '' THEN BEGIN
        TextNode := Request.createTextNode(Content);
        Element.appendChild(TextNode);
      END;
    END;

    LOCAL PROCEDURE SOAPFaultOccurred@1100528401() : Boolean;
    VAR
      Node@1100528400 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      Node := Response.documentElement.selectSingleNode('.//soap:Body/soap:Fault');
      IF NOT ISCLEAR(Node) THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE XMLRPCFaultOccurred@1100528404() : Boolean;
    VAR
      Node@1100528400 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      Node := Response.documentElement.selectSingleNode('.//Fault');
      IF NOT ISCLEAR(Node) THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE ThrowSOAPFault@1100528405();
    VAR
      Node@1100528400 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ErrorText@1100528401 : Text[1024];
      ErrorText2@1100525001 : Text[1024];
      ErrorText3@1100525000 : Text[1024];
    BEGIN
      Node := Response.documentElement.selectSingleNode('.//soap:Body/soap:Fault/faultstring');
      IF NOT ISCLEAR(Node) THEN
        ErrorText := Node.text;

      Node := Response.documentElement.selectSingleNode('.//soap:Body/soap:Fault/*/*[local-name()="errorcode"]');
      IF NOT ISCLEAR(Node) THEN
        ErrorText2 := Node.text;

      Node := Response.documentElement.selectSingleNode('.//soap:Body/soap:Fault/*/*[local-name()="errorstring"]');
      IF NOT ISCLEAR(Node) THEN
        ErrorText3 := Node.text;

      ERROR(Text000, ErrorText, ErrorText2, ErrorText3);
    END;

    LOCAL PROCEDURE ThrowXMLRPCFault@1100528402();
    VAR
      Node@1100528400 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ErrorText@1100528401 : Text[1024];
      ErrorText2@1100525001 : Text[1024];
      ErrorText3@1100525000 : Text[1024];
    BEGIN
      Node := Response.documentElement.selectSingleNode('.//Fault/faultstring');
      IF NOT ISCLEAR(Node) THEN
        ErrorText := Node.text;

      Node := Response.documentElement.selectSingleNode('.//Fault/errorcode');
      IF NOT ISCLEAR(Node) THEN
        ErrorText2 := Node.text;

      Node := Response.documentElement.selectSingleNode('.//Fault/errorstring');
      IF NOT ISCLEAR(Node) THEN
        ErrorText3 := Node.text;

      ERROR(Text000, ErrorText, ErrorText2, ErrorText3);
    END;

    PROCEDURE GetSOAPFault@1100528407() : Text[1024];
    VAR
      Node@1100528400 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ErrorText@1100528401 : Text[1024];
    BEGIN
      IF NOT Response.hasChildNodes THEN
        ERROR(Text003);
      IF SOAPFaultOccurred THEN BEGIN
        Node := Response.documentElement.selectSingleNode('.//soap:Body/soap:Fault/faultstring');
        IF NOT ISCLEAR(Node) THEN
          ErrorText := Node.text;
      END;
      EXIT(ErrorText);
    END;

    PROCEDURE SetRequestSelectionNamespaces@1100528400(Namespaces@1100528400 : ARRAY [10,2] OF Text[250]);
    VAR
      I@1100528401 : Integer;
      PropertyValue@1100528403 : Text[1024];
    BEGIN
      FOR I := 1 TO 10 DO
        IF Namespaces[I, 1] <> '' THEN
          PropertyValue := PropertyValue + 'xmlns:' + Namespaces[I,1] + '="' + Namespaces[I,2] + '" ';
      Request.setProperty('SelectionNamespaces', PropertyValue);
    END;

    PROCEDURE SetResponseSelectionNamespaces@1100528406(Namespaces@1100528400 : ARRAY [10,2] OF Text[250]);
    VAR
      I@1100528401 : Integer;
      PropertyValue@1100528403 : Text[1024];
    BEGIN
      FOR I := 1 TO 10 DO
        IF Namespaces[I, 1] <> '' THEN
          PropertyValue := PropertyValue + 'xmlns:' + Namespaces[I,1] + '="' + Namespaces[I,2] + '" ';
      Response.setProperty('SelectionNamespaces', PropertyValue);
    END;

    PROCEDURE WriteRequestToFile@1210190004(FileName@1210190001 : Text[300]);
    BEGIN
      IF (NOT ISCLEAR(Request)) THEN
        Request.save(FileName);
    END;

    PROCEDURE WriteResponseToFile@1210190003(FileName@1210190001 : Text[300]);
    BEGIN
      IF (NOT ISCLEAR(Response)) THEN
        Response.save(FileName);
    END;

    PROCEDURE WriteResponseToFile2@1100528317(FileName@1210190001 : Text[300];Xpath@1100528300 : Text[250]);
    VAR
      Node@1100528301 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      DomDoc@1100528302 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
    BEGIN
      Node := Response.documentElement.selectSingleNode(Xpath);

      IF (NOT ISCLEAR(Node)) THEN BEGIN
        CREATE(DomDoc, FALSE, TRUE);
        DomDoc.appendChild(Node);
        DomDoc.save(FileName);
      END;
    END;

    PROCEDURE GetResponseFromFile@1100528301(FileName@1100528300 : Text[250]);
    BEGIN
      IF (ISCLEAR(Response)) THEN
        CREATE(Response, FALSE, TRUE);
      Response.load(FileName);
    END;

    LOCAL PROCEDURE GetBase64UnamePword@1100528312(UserName@1100528300 : Text[100];Password@1100528301 : Text[50]) : Text[250];
    BEGIN
      EXIT(GetBase64String(UserName + ':' + Password));
    END;

    PROCEDURE DeleteFile@1100528315(FileName@1100528300 : Text[250]);
    BEGIN
      IF (FileMgt.ClientFileExists(FileName)) THEN
        FileMgt.DeleteClientFile4PS(FileName, TRUE);
    END;

    LOCAL PROCEDURE GetBase64String@1100528314(StringToEncode@1100528300 : Text[250]) : Text[250];
    VAR
      Convert@1100525002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Encoding@1100525001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      EXIT(Convert.ToBase64String(Encoding.UTF8.GetBytes(StringToEncode)));
    END;

    LOCAL PROCEDURE GetTempFileNamePath@1100528316(FileNamePrefix@1100528300 : Text[30];FileExtension@1100528301 : Text[5]) : Text[250];
    VAR
      TempPath@1100525000 : Text[1024];
    BEGIN
      TempPath := FileMgt.ClientTempFolderName;

      EXIT(TempPath + FileNamePrefix +
        FORMAT(CURRENTDATETIME, 0, '<year4><Month,2><Day,2>-<hours24,2><minutes,2><seconds,2>') +
        '.' + FileExtension);
    END;

    LOCAL PROCEDURE AddNamespaceToFile@1210190005(FileNameIn@1210190000 : Text[250];FileNameOut@1210190008 : Text[250];RootNamespace@1210190007 : Text[250];NoOfSpaces@1210190010 : Integer);
    VAR
      TempBlobIn@1100525000 : Record 99008535;
      TempBlobOut@1100525001 : Record 99008535;
      StreamIn@1210190005 : InStream;
      StreamOut@1210190004 : OutStream;
      TextRead@1210190001 : Text[1024];
      SomeTextIsRead@1210190006 : Boolean;
      SpaceNo@1210190009 : Integer;
    BEGIN
      IF (NoOfSpaces = 0) THEN
        NoOfSpaces := 1;
      DeleteFile(FileNameOut);

      FileMgt.BLOBImport4PS(TempBlobIn, FileNameIn, FALSE);
      TempBlobIn.Blob.CREATEINSTREAM(StreamIn);
      TempBlobOut.Blob.CREATEOUTSTREAM(StreamOut);

      StreamIn.READTEXT(TextRead, 1);
      WHILE (NOT StreamIn.EOS) AND (NoOfSpaces <> SpaceNo) DO BEGIN
        StreamOut.WRITETEXT(TextRead);
        SomeTextIsRead := TRUE;
        StreamIn.READTEXT(TextRead, 1);
        IF (TextRead = ' ') THEN
          SpaceNo += 1;
      END;

      IF (SomeTextIsRead) THEN BEGIN
        TextRead += 'xmlns="' + RootNamespace + '" ';
        StreamOut.WRITETEXT(TextRead);

        WHILE NOT (StreamIn.EOS) DO BEGIN
          StreamIn.READTEXT(TextRead);
          StreamOut.WRITETEXT(TextRead);
        END;
      END;

      FileMgt.BLOBExport4PS(TempBlobOut, FileNameOut, FALSE, TRUE);

      DeleteFile(FileNameIn);
    END;

    EVENT Response@1100525001::ondataavailable@198();
    BEGIN
    END;

    EVENT Response@1100525001::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}

