OBJECT Codeunit 11012268 Installation Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetRelease@1100525003() : Text[50];
    VAR
      ApplicationManagement@1100525000 : Codeunit 1;
    BEGIN
      EXIT(COPYSTR(ApplicationManagement.ApplicationVersion,17,50));
    END;

    PROCEDURE GetCompleteRelease@1100525005() : Text[100];
    VAR
      ApplicationManagement@1100525000 : Codeunit 1;
    BEGIN
      EXIT(ApplicationManagement.ApplicationVersion);
    END;

    PROCEDURE ReleaseIsAlphaRelease@1100525004() : Boolean;
    VAR
      HotfixInt@1100525001 : Integer;
      ApplicationManagement@1100525000 : Codeunit 1;
    BEGIN
      EXIT((EVALUATE(HotfixInt,COPYSTR(ApplicationManagement.ApplicationVersion,26,2))) AND (HotfixInt > 96));
    END;

    PROCEDURE HasValue@10(FldRef@1000 : FieldRef) : Boolean;
    VAR
      Field@1102601000 : Record 2000000041;
      HasValue@1001 : Boolean;
      Int@1002 : Integer;
      Dec@1003 : Decimal;
      D@1007 : Date;
      T@1008 : Time;
      GID@1210190000 : GUID;
      EmptyGID@1210190001 : GUID;
    BEGIN
      // Copied from localfunction in CU423..

      EVALUATE(Field.Type,FORMAT(FldRef.TYPE));

      CASE Field.Type OF
        Field.Type::Boolean:
          HasValue := FldRef.VALUE;
        Field.Type::Option:
          BEGIN
            Int := FldRef.VALUE;
            HasValue := Int <> 0;
          END;
        Field.Type::Integer,Field.Type::BigInteger:
          BEGIN
            Int := FldRef.VALUE;
            HasValue := Int <> 0;
          END;
        Field.Type::Decimal:
          BEGIN
            Dec := FldRef.VALUE;
            HasValue := Dec <> 0;
          END;
        Field.Type::Date:
          BEGIN
            D := FldRef.VALUE;
            HasValue := D <> 0D;
          END;
        Field.Type::Time:
          BEGIN
            T := FldRef.VALUE;
            HasValue := T <> 0T;
          END;
        Field.Type::GUID:
          BEGIN
            GID := FldRef.VALUE;
            HasValue := GID <> EmptyGID;
          END;
      //  Field.Type::BLOB,Field.Type::RecordID,Field.Type::Binary,Field.Type::TableFilter:
      //    ERROR(STRSUBSTNO('Do not use this function for field type %1',Field.Type));
         Field.Type::BLOB: HasValue := FORMAT(FldRef.VALUE) = '*';
        ELSE
          HasValue := FORMAT(FldRef.VALUE) <> '';
      END;

      EXIT(HasValue);
    END;

    PROCEDURE NoLicensePermissionForTableData@1100525000(TableID@1100525001 : Integer) : Boolean;
    VAR
      LicensePermission@1100525000 : Record 2000000043;
    BEGIN
      IF LicensePermission.GET(LicensePermission."Object Type"::TableData,TableID) THEN
        EXIT(LicensePermission."Read Permission" = LicensePermission."Read Permission"::" ");
    END;

    PROCEDURE LicensePermissionForTableData@1100525001(TableID@1100525001 : Integer) : Boolean;
    BEGIN
      EXIT(NOT NoLicensePermissionForTableData(TableID));
    END;

    PROCEDURE GetNoOfDatabaseRecords@15(TableID@1100529200 : Integer;CompanyName@1100529201 : Text[30]) : Integer;
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF TableID = 0 THEN
        EXIT(0);

      RecRef.OPEN(TableID,FALSE,CompanyName);
      EXIT(RecRef.COUNT);
    END;

    PROCEDURE StoreNotLicensedTableInGenericTempTable@1100529200(CompanyName@1100529201 : Text[30];TableID@1100529202 : Integer);
    VAR
      GenericTempTable@1100529200 : Record 11020579;
    BEGIN
      GenericTempTable."Key Code1" := USERID;
      GenericTempTable."Key Code2" := 'NotLicensedTable';
      GenericTempTable."Key Code3" := CompanyName;
      GenericTempTable."Key Code4" := FORMAT(TableID);
      GenericTempTable.Text1 := CompanyName;
      GenericTempTable.Int1 := TableID;
      GenericTempTable.INSERT;
    END;

    PROCEDURE DeleteStoredNotLicensedTableInGenericTempTable@1100529214();
    VAR
      GenericTempTable@1100529200 : Record 11020579;
    BEGIN
      GenericTempTable.SETRANGE("Key Code1",USERID);
      GenericTempTable.SETRANGE("Key Code2",'NotLicensedTable');
      GenericTempTable.DELETEALL;
    END;

    PROCEDURE GetDataUpgradeLanguage@1100529201(DatabaseLevel@1100529203 : Boolean) : Integer;
    VAR
      CompanyInformation@1100529200 : Record 79;
      DatabaseSetup@1100529204 : Record 11229358;
    BEGIN
      IF DatabaseLevel THEN BEGIN
        IF DatabaseSetup.GET AND (DatabaseSetup."Language Code Data Upgrade" <> 0) THEN
          EXIT(DatabaseSetup."Language Code Data Upgrade")
      END ELSE BEGIN
        IF CompanyInformation.GET AND (CompanyInformation."Language Code Data Upgrade" <> 0) THEN
          EXIT(CompanyInformation."Language Code Data Upgrade")
      END;

      EXIT(GetDefaultWindowsLanguage);
    END;

    PROCEDURE GetDefaultWindowsLanguage@1100529202() : Integer;
    VAR
      WinLanguage@1100529201 : Record 2000000045;
      ApplicationManagement@1100529202 : Codeunit 1;
    BEGIN
      // Copied From CU40
      WinLanguage.SETRANGE("Localization Exist",TRUE);
      WinLanguage.SETRANGE("Globally Enabled",TRUE);
      WinLanguage."Language ID" := GLOBALLANGUAGE;
      IF NOT WinLanguage.FIND THEN BEGIN
        WinLanguage."Language ID" := WINDOWSLANGUAGE;
        IF NOT WinLanguage.FIND THEN
          WinLanguage."Language ID" := ApplicationManagement.ApplicationLanguage;
      END;
      EXIT(WinLanguage."Language ID");
    END;

    PROCEDURE InitDataUpgradeLog@1100529250(TableIDForLicenseCheck@1100529201 : Integer;VAR TypeOfLog@1100529200 : 'Execute,No License Permission,New Company';VAR StartDateTime@1100529203 : DateTime;NewCompany@1100529204 : Boolean);
    VAR
      InstallationManagement@1100529202 : Codeunit 11012268;
    BEGIN
      TypeOfLog := TypeOfLog::Execute;

      IF NewCompany THEN
        TypeOfLog := TypeOfLog::"New Company"
      ELSE
        IF NoLicensePermissionForTableData(TableIDForLicenseCheck) THEN
          TypeOfLog := TypeOfLog::"No License Permission";

      StartDateTime := CURRENTDATETIME;
    END;

    BEGIN
    END.
  }
}

