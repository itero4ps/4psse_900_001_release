OBJECT Codeunit 11012306 2ba Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012315=rim,
                TableData 11012317=rim;
    OnRun=VAR
            TotalNoOfRec@1100528600 : Integer;
            NoOfItemsToReplace@1100528601 : Integer;
          BEGIN
            UpdateTradeItemInfoFrom2ba(TotalNoOfRec, NoOfItemsToReplace);
          END;

  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'ENU=The 2ba Link is not (correct) enabled.';
      Client2baObject@1100528300 : DotNet "'_4PS.2BA.Unifeed, Version=1.51.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'._4PS._2BA.Unifeed._4PSUnifeed" RUNONCLIENT;
      Text001@1100528301 : TextConst 'ENU=Vendor %1 is not used for %2s.';
      Text002@1100528302 : TextConst 'ENU=Can not process Item basket (Table %1 is not implemented).';
      Client2baItem@1100528303 : DotNet "'_4PS.2BA.Unifeed, Version=1.51.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'._4PS._2BA.Unifeed._4PSUnifeedItem" RUNONCLIENT;
      Text003@1100528304 : TextConst 'ENU=@1@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text004@1100528305 : TextConst 'ENU=Records Read         #2#####\';
      Text005@1100528310 : TextConst 'ENU=Records Processed #3#####\\';
      Server2baObject@1100528801 : DotNet "'_4PS.2BA.Unifeed, Version=1.51.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'._4PS._2BA.Unifeed._4PSUnifeed";
      Server2baItem@1100528800 : DotNet "'_4PS.2BA.Unifeed, Version=1.51.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'._4PS._2BA.Unifeed._4PSUnifeedItem";
      Window@1100528308 : Dialog;
      Text006@1100529102 : TextConst 'ENU=The Webselect Link is not (correct) enabled.';
      ClientVendorObject@1100528601 : DotNet "'_4PS.ItemWebshops, Version=1.32.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'._4PS.ItemWebshops._4PSWebshop" RUNONCLIENT;
      ClientVendorItem@1100528600 : DotNet "'_4PS.ItemWebshops, Version=1.32.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'._4PS.ItemWebshops._4PSWebshopItem" RUNONCLIENT;
      Text007@1100528602 : TextConst 'ENU=There is no license for the 2BA Unifeed Interface';
      ServerVendorObject@1100528803 : DotNet "'_4PS.ItemWebshops, Version=1.32.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'._4PS.ItemWebshops._4PSWebshop" RUNONCLIENT;
      ServerVendorItem@1100528802 : DotNet "'_4PS.ItemWebshops, Version=1.32.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'._4PS.ItemWebshops._4PSWebshopItem" RUNONCLIENT;

    LOCAL PROCEDURE Initialize@1100528300();
    VAR
      Debug@1100528800 : Integer;
    BEGIN
      //Debug := 1; //1=TRUE
      Test2BALicence;

      Clear2baObject;
      Clear2baItem;

      _4PSUnifeedFor2baObject;
      SetDebugOptionFor2baObject(Debug);
      _4PSUnifeedItemFor2baItem;

      IF Is2BAEnabled(TRUE) THEN
        SetUnifeedAuthenticationFor2baObject;
    END;

    PROCEDURE InitializeForVendor@1100529100(VendorNo@1100529101 : Code[20];ShipToLocation@1100529102 : Code[20];ShortCutDimension1Code@1100529103 : Code[20];ProjectCode@1100529104 : Code[20];ETIMVendorNo@1100529105 : Code[20]);
    VAR
      Debug@1100529100 : Integer;
      UserNameForVendor@1100529106 : Text[30];
      ICMCustomer@1100529107 : Text[30];
      PasswordForVendor@1100529108 : Text[30];
    BEGIN
      ClearVendorObject;
      ClearVendorItem;

      _4PSWebshopForVendorObject;
      SetDebugOptionForVendorObject(Debug);

      ICMCustomer := GetICMCustData(
        VendorNo, ETIMVendorNo, ShipToLocation, ShortCutDimension1Code,
        ProjectCode, UserNameForVendor, PasswordForVendor);

      IF (ICMCustomer <> '') AND (UserNameForVendor <> '') AND (PasswordForVendor <> '') THEN BEGIN
        SetAuthenticationTUForVendorObject(UserNameForVendor, ICMCustomer, PasswordForVendor);
      END ELSE
        ERROR(Text006);
    END;

    PROCEDURE Is2BAEnabled@1100525002(ShowError@1100528300 : Boolean) : Boolean;
    VAR
      "2BASetup"@1100525000 : Record 11012742;
    BEGIN
      IF "2BASetup".GET AND
         ("2BASetup"."User Name" <> '') AND
         ("2BASetup".Password <> '')
      THEN
        EXIT(TRUE);

      IF ShowError THEN
        ERROR(Text000);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetUserName@1100528306() : Text[30];
    VAR
      "2BASetup"@1100529100 : Record 11012742;
    BEGIN
      "2BASetup".GET;
      EXIT("2BASetup"."User Name");
    END;

    LOCAL PROCEDURE GetUserNameVendor@1100529101(ETIMVendorNo@1100529101 : Code[20]) : Text[30];
    VAR
      ETIMVendor@1100529100 : Record 11012313;
    BEGIN
      IF ETIMVendor.GET(ETIMVendorNo) THEN
        EXIT(ETIMVendor."User Name");
    END;

    LOCAL PROCEDURE GetPassword@1100528305() : Text[30];
    VAR
      "2BASetup"@1100525000 : Record 11012742;
    BEGIN
      "2BASetup".GET;
      EXIT("2BASetup".Password);
    END;

    PROCEDURE GetPasswordVendor@1100529102(ETIMVendorNo@1100529101 : Code[20]) : Text[30];
    VAR
      ETIMVendor@1100529100 : Record 11012313;
    BEGIN
      IF ETIMVendor.GET(ETIMVendorNo) THEN
        EXIT(ETIMVendor.Password);
    END;

    LOCAL PROCEDURE GetMainVendorCode@1100528303(AlternativeVendorCode@1100528300 : Code[20]) : Code[20];
    VAR
      ETIMVendorCentralMgt@1100528302 : Record 11012304;
      ETIMVendorLocalMgt@1100528303 : Record 11012313;
      VendorCode@1100409000 : Code[20];
    BEGIN
      VendorCode := AlternativeVendorCode;
      ETIMVendorCentralMgt.SETCURRENTKEY("Alternative Vendor Code");
      ETIMVendorCentralMgt.SETRANGE("Alternative Vendor Code", AlternativeVendorCode);
      IF ETIMVendorCentralMgt.FINDFIRST THEN
        VendorCode := ETIMVendorCentralMgt.Code;
      ETIMVendorCentralMgt.RESET;

      IF ETIMVendorLocalMgt.GET(AlternativeVendorCode) THEN BEGIN
        IF ETIMVendorLocalMgt."Display Trade Items"  THEN
          EXIT(VendorCode);
        EXIT('');
      END;

      ETIMVendorCentralMgt.GET(AlternativeVendorCode);
      IF NOT ETIMVendorCentralMgt."Display Trade Items" THEN
        EXIT('');
      EXIT(VendorCode);
    END;

    LOCAL PROCEDURE GetAndCheckAlternatVendorCode@1100528302(MainVendorCode@1100528300 : Code[20]) : Code[20];
    VAR
      ETIMVendorCentralMgt@1100528302 : Record 11012304;
      ETIMVendorLocalMgt@1100528303 : Record 11012313;
    BEGIN
      IF ETIMVendorCentralMgt.GET(MainVendorCode) THEN
        IF ETIMVendorCentralMgt."Alternative Vendor Code" <> '' THEN
          MainVendorCode := ETIMVendorCentralMgt."Alternative Vendor Code";
      ETIMVendorCentralMgt.RESET;

      IF ETIMVendorLocalMgt.GET(MainVendorCode) THEN BEGIN
        IF ETIMVendorLocalMgt."Display Trade Items" AND (ETIMVendorLocalMgt."Vendor (Purchase)" <> '') THEN
          EXIT(MainVendorCode);
        EXIT('');
      END;

      ETIMVendorCentralMgt.GET(MainVendorCode);
      IF NOT ETIMVendorCentralMgt."Display Trade Items" OR (ETIMVendorCentralMgt."Vendor (Purchase)" = '') THEN
        EXIT('');
      EXIT(MainVendorCode);
    END;

    PROCEDURE ShowTradeItemInformationVia2ba@1100528601(IVendorNo@1100528600 : Code[15];ITradeItemNo@1100528601 : Code[20]);
    VAR
      TradeItem@1100528602 : Record 11012317;
    BEGIN
      TradeItem.GET(IVendorNo, ITradeItemNo);
      TradeItem.TESTFIELD("Maintained by 2ba");
      TradeItem.TESTFIELD("Trade Item Guid (2ba)");

      Initialize;

      ShowTradeItemInfoFrom2baObject(TradeItem."Trade Item Guid (2ba)");
    END;

    PROCEDURE RunModalDialogForOneItem@1100528301(VAR VendorTradeItem@1100528300 : Code[20];VAR TradeItem@1100528301 : Code[20]);
    VAR
      TradeItemRec@1100528303 : Record 11012317;
      TmpTradeItemRec@1100528600 : TEMPORARY Record 11012317;
      VendorCode@1100528302 : Code[20];
    BEGIN
      Initialize;

      IF VendorTradeItem <> '' THEN BEGIN
        VendorCode := GetMainVendorCode(VendorTradeItem);
        IF (VendorCode = '') THEN
          ERROR(Text001, VendorTradeItem, TradeItemRec.TABLECAPTION);

        SetSearchVendorFor2baObject(VendorCode);
      END;
      IF TradeItem <> '' THEN BEGIN
          IF (TradeItemRec.GET(VendorTradeItem, TradeItem)) THEN
            SetSearchDescriptionFor2baObject(TradeItemRec."GTIN Code (Product)");
      END;

      IF TradeItemRec."Product ID Guid (2ba)" <> '' THEN
        SetSearchProductGuidFor2baObject(TradeItemRec."Product ID Guid (2ba)");

      ShowDialogForOneItemFrom2baObject; //2ba wrapper runmodal

      SetOneItemFrom2baObject;

      IF GetTradeItemNoFor2baItem <> '' THEN BEGIN
        VendorCode := GetVendorGLNFor2baItem;
        IF VendorCode <> '' THEN BEGIN
          VendorTradeItem := GetAndCheckAlternatVendorCode(VendorCode);
          IF VendorTradeItem = '' THEN
            ERROR(Text001, VendorCode, TradeItemRec.TABLECAPTION);
        END;

          TradeItem :=  GetTradeItemNoFor2baItem;

        ProcessTradeItem(TmpTradeItemRec, VendorTradeItem, TradeItem);
      END;
    END;

    PROCEDURE RunModalDialogForMultipleItems@1100528309(IVendorTradeItem@1100528300 : Code[20];ITradeItemNo@1100528301 : Code[20];IRecRef@1100528309 : RecordRef);
    VAR
      TradeItem@1100528303 : Record 11012317;
      TmpTradeItem@1100528306 : TEMPORARY Record 11012317;
      AdviceOrderLine@1100528310 : Record 11012055;
      EstimateLineOLD@1100528308 : Record 11012154;
      EstimateLineNEW@1100525000 : Record 11072072;
      PurchaseLine@1100528311 : Record 39;
      BudgetLine@1100528600 : Record 11012001;
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
      VendorCode@1100528302 : Code[20];
      ItemCount@1100528304 : Integer;
      Counter@1100528305 : Integer;
      MultipleCopyMgt@1100528307 : Codeunit 11012068;
      EtimVendorHasUserName@1100529100 : Boolean;
      EtimVendorNo@1100529105 : Code[20];
      ShipToLocation@1100529101 : Code[20];
      ShortCutDimension1Code@1100529102 : Code[20];
      ProjectCode@1100529103 : Code[20];
      VendorNo@1100529104 : Code[20];
      PurchaseHeader@1100529106 : Record 38;
      ProjectCostPlusEntry@1100525004 : Record 11012019;
      ServOrderCostPlusEntry@1100525003 : Record 11012825;
      ServOrderRec@1100525002 : Record 11012823;
      EstimateRec@1100525001 : Record 11012151;
    BEGIN
      GetInitialParams(IRecRef, EtimVendorHasUserName, EtimVendorNo, VendorNo, ShipToLocation, ProjectCode, ShortCutDimension1Code);

      IF NOT CheckLinksAreEnabled(EtimVendorHasUserName) THEN
        EXIT;

      IF EtimVendorHasUserName THEN BEGIN
        //Because now we only support 1 vendor (the TU), if the user name is filled, it is the TU
        //TU  begin
        InitializeForVendor(VendorNo, ShipToLocation,ShortCutDimension1Code,ProjectCode,EtimVendorNo);
        ShowWebshopForVendorObject();

        ItemCount := GetNumberOfItemsFromVendorObject;
        IF (ItemCount <= 0) THEN
          EXIT;

        FOR Counter := 0 TO ItemCount - 1 DO BEGIN
          SetVendorItemFromVendorObject(Counter);
          IF (GetTradeItemNoForVendorItem <> '') THEN BEGIN
            ITradeItemNo := GetTradeItemNoForVendorItem;
            IF NOT TmpTradeItem.GET(IVendorTradeItem, ITradeItemNo) THEN
              ProcessTradeItemForWebselect(TmpTradeItem, IVendorTradeItem, ITradeItemNo, GetItemQuantityFromVendorObject(Counter)); //C025959
          END;
        END;

        //TU end
      END ELSE BEGIN
        Initialize();
        //2ba begin
        IF IVendorTradeItem <> '' THEN BEGIN
          VendorCode := GetMainVendorCode(IVendorTradeItem);
          IF VendorCode = '' THEN
            ERROR(Text001, IVendorTradeItem, TradeItem.TABLECAPTION);
          SetSearchVendorFor2baObject(VendorCode);
        END;

        IF ITradeItemNo <> '' THEN BEGIN
          IF TradeItem.GET(IVendorTradeItem, ITradeItemNo) THEN
            SetSearchDescriptionFor2baObject(TradeItem."GTIN Code (Product)");
        END;

        IF ITradeItemNo = '' THEN
          ShowDialogForMultipleItemsFrom2baObject()
        ELSE
          ShowTradeItemInfoFrom2baObject(TradeItem."Trade Item Guid (2ba)");

        ItemCount := GetNumberOfItemsFrom2baObject;
        IF ItemCount <= 0 THEN
          EXIT;

        FOR Counter := 0 TO ItemCount - 1 DO BEGIN
          Set2baItemFrom2baObject(Counter);
          IF GetTradeItemNoFor2baItem <> '' THEN BEGIN
            ITradeItemNo := GetTradeItemNoFor2baItem;
            VendorCode := GetVendorGLNFor2baItem;
            IF VendorCode <> '' THEN BEGIN
              IVendorTradeItem := GetAndCheckAlternatVendorCode(VendorCode);
              IF IVendorTradeItem = '' THEN
                MESSAGE(Text001, VendorCode, TradeItem.TABLECAPTION)
              ELSE
                ProcessTradeItem(TmpTradeItem, IVendorTradeItem, ITradeItemNo);
            END;
          END;
        END;
        //2ba end
      END;

      HandleChoosenTradeItems(TmpTradeItem, IRecRef);
    END;

    LOCAL PROCEDURE ProcessTradeItem@1100526204(VAR TmpTradeItemRec@1100528302 : TEMPORARY Record 11012317;VendorTradeItem@1100526201 : Code[20];TradeItem@1100528300 : Code[20]);
    VAR
      TradeItemRec@1100528303 : Record 11012317;
      ItemSetup@1100528600 : Record 11012300;
      CostObject@1100409000 : Code[20];
      ItemDescription@1100528301 : Text[250];
      DatetimeMgt@1100409001 : Codeunit 11020218;
    BEGIN
      ItemSetup.GET;
      IF NOT TradeItemRec.GET(VendorTradeItem, TradeItem) THEN BEGIN
        TradeItemRec.INIT;
        TradeItemRec.Vendor := VendorTradeItem;
        TradeItemRec."Item Code" := TradeItem;
        TradeItemRec.INSERT;
      END;

      TradeItemRec."GTIN Code (Item)" := GetGTINFor2baItem;
      TradeItemRec.Manufacturer := GetManufacturerFor2baItem;
      TradeItemRec."Product Code" := GetProductCodeFor2baItem;
      ItemDescription := COPYSTR(GetItemDescriptionFor2baItem, 1, MAXSTRLEN(ItemDescription));
      TradeItemRec."Item Description" := COPYSTR(ItemDescription, 1, MAXSTRLEN(TradeItemRec."Item Description"));
      IF (STRLEN(ItemDescription) > MAXSTRLEN(TradeItemRec."Item Description")) THEN
        TradeItemRec."Item Description 2" :=
          COPYSTR(ItemDescription, MAXSTRLEN(TradeItemRec."Item Description") + 1, MAXSTRLEN(TradeItemRec."Item Description 2"));
      CASE ItemSetup."Adjust Item Description" OF
        ItemSetup."Adjust Item Description"::ToUpper:
          BEGIN
            TradeItemRec."Item Description" := UPPERCASE(TradeItemRec."Item Description");
            TradeItemRec."Item Description 2" := UPPERCASE(TradeItemRec."Item Description 2");
          END;
        ItemSetup."Adjust Item Description"::ToLower:
          BEGIN
            TradeItemRec."Item Description" := LOWERCASE(TradeItemRec."Item Description");
            TradeItemRec."Item Description 2" := LOWERCASE(TradeItemRec."Item Description 2");
          END;
      END;
      IF TradeItemRec."Search Argument" = '' THEN
        TradeItemRec."Search Argument" := COPYSTR(TradeItemRec."Item Description", 1, MAXSTRLEN(TradeItemRec."Search Argument"));
      TradeItemRec."Application Unit Quantity" := GetApplicationUnitQuantityFor2baItem;
      TradeItemRec."Application ID" := GetApplicationIDFor2baItem;
      TradeItemRec."Packaging Code" := GetPackagingCodeFor2baItem;
      TradeItemRec."Order ID" := GetOrderIDFor2baItem;
      TradeItemRec."Minimum Order Quantity" := GetMinimumOrderQuantityFor2baItem;
      TradeItemRec."Lot Size Quantity" := GetLotSizeQuantityFor2baItem;
      IF EVALUATE(TradeItemRec."Delivery Period", GetDeliveryPeriodFor2baItem) THEN;
      TradeItemRec."Delivery Time ID" := GetDeliveryTimeIDFor2baItem;
      TradeItemRec."Discount Group Code" := GetDiscountGroupCodeFor2baItem;
      TradeItemRec."Factor Price-Purchase Unit" := GetFactorPricePurchaseUnitFor2baItem;

      TradeItemRec."Starting Date Price" := CalculateDate(GetStartingDatePriceFor2baItem, TODAY);
      TradeItemRec."Gross Price" := GetGrossPriceFor2baItem;
      TradeItemRec."Quantity Per Price" := GetQuantityPerPriceFor2baItem;
      TradeItemRec."Price ID" := GetPriceIDFor2baItem;

      IF (TradeItemRec."Cost Object" = '') OR (NOT TradeItemRec."Cost Object changed Manually") THEN BEGIN
        CostObject := TradeItemRec.GetDefaultCostObject(FALSE);
        IF CostObject <> '' THEN
          TradeItemRec."Cost Object" := CostObject;
      END;
      CostObject := TradeItemRec.GetDefaultCostObject(TRUE);
      IF CostObject <> '' THEN
        TradeItemRec."Cost Object (Removal)" := CostObject;

      TradeItemRec.Expired := FALSE;   //Also for Price historie
      TradeItemRec.GetUnitData();
      TradeItemRec.GetRefDateHistPrice();
      IF TradeItemRec."Starting Date Price" > TradeItemRec."Price Reference Date" THEN
        TradeItemRec."Price Reference Date" := TradeItemRec."Starting Date Price";
      TradeItemRec."Maintained by 2ba" := TRUE;
      TradeItemRec."Trade Item Guid (2ba)" := GetTradeItemGuidFor2baItem;
      TradeItemRec."Product ID Guid (2ba)" := GetProductIDGuidFor2baItem;
      TradeItemRec."Status Code" := GetStatusCodeFor2baItem;

      TradeItemRec.MODIFY;

      UpdatePriceHistory(TradeItemRec);

      TmpTradeItemRec.COPY(TradeItemRec);
      TmpTradeItemRec."Import Date-Time" := DatetimeMgt.Datetime(TODAY, TIME);
      TmpTradeItemRec.INSERT;
      TmpTradeItemRec.MARK(TRUE);
    END;

    LOCAL PROCEDURE ProcessTradeItemForWebselect@1100529103(VAR TmpTradeItemRec@1100529102 : TEMPORARY Record 11012317;VendorTradeItem@1100529101 : Code[20];TradeItem@1100529100 : Code[20];Quantity@1100525000 : Decimal);
    VAR
      TradeItemRec@1100529109 : Record 11012317;
      ItemSetup@1100528600 : Record 11012300;
      CostObject@1100529108 : Code[20];
      ItemDescription@1100529104 : Text[250];
      DatetimeMgt@1100409000 : Codeunit 11020218;
    BEGIN
      ItemSetup.GET;
      IF NOT TradeItemRec.GET(VendorTradeItem, TradeItem) THEN BEGIN
        TradeItemRec.INIT;
        TradeItemRec.Vendor := VendorTradeItem;
        TradeItemRec."Item Code" := TradeItem;
        TradeItemRec.INSERT;
      END;

      TradeItemRec."GTIN Code (Item)" := GetGtinForVendorItem();
      ItemDescription := COPYSTR(GetItemDescriptionForVendorItem, 1, MAXSTRLEN(ItemDescription));
      TradeItemRec."Item Description" := COPYSTR(ItemDescription, 1, MAXSTRLEN(TradeItemRec."Item Description"));
      IF STRLEN(ItemDescription) > MAXSTRLEN(TradeItemRec."Item Description") THEN
        TradeItemRec."Item Description 2" :=
          COPYSTR(ItemDescription, MAXSTRLEN(TradeItemRec."Item Description") + 1, MAXSTRLEN(TradeItemRec."Item Description 2"));
      CASE ItemSetup."Adjust Item Description" OF
        ItemSetup."Adjust Item Description"::ToUpper:
          BEGIN
            TradeItemRec."Item Description" := UPPERCASE(TradeItemRec."Item Description");
            TradeItemRec."Item Description 2" := UPPERCASE(TradeItemRec."Item Description 2");
          END;
        ItemSetup."Adjust Item Description"::ToLower:
          BEGIN
            TradeItemRec."Item Description" := LOWERCASE(TradeItemRec."Item Description");
            TradeItemRec."Item Description 2" := LOWERCASE(TradeItemRec."Item Description 2");
          END;
      END;
      IF TradeItemRec."Search Argument" = '' THEN
        TradeItemRec."Search Argument" := COPYSTR(TradeItemRec."Item Description", 1, MAXSTRLEN(TradeItemRec."Search Argument"));

      TradeItemRec."Application Unit Quantity" := GetApplicationUnitQuantityForVendorItem;
      TradeItemRec."Application ID" := GetApplicationIDForVendorItem;
      TradeItemRec."Packaging Code" := GetPackagingCodeForVendorItem;
      TradeItemRec."Order ID" := GetOrderIDForVendorItem;
      TradeItemRec."Minimum Order Quantity" := GetMinimumOrderQuantityForVendorItem;
      TradeItemRec."Lot Size Quantity" := GetLotSizeQuantityForVendorItem;
      TradeItemRec."Discount Group Code" := GetDiscountGroupCodeForVendorItem;
      TradeItemRec."Factor Price-Purchase Unit" := GetQtyPerUnitOfMeasureForVendorItem;

      IF TradeItemRec."Starting Date Price" = 0D THEN
        TradeItemRec."Starting Date Price" := TODAY;
      TradeItemRec."Gross Price" := GetGrossPriceForVendorItem;
      TradeItemRec."Quantity Per Price" := GetQuantityPerPriceForVendorItem;
      TradeItemRec."Price ID" := GetPriceIDForVendorItem;


      IF (TradeItemRec."Cost Object" = '') OR (NOT TradeItemRec."Cost Object changed Manually") THEN BEGIN
        CostObject := TradeItemRec.GetDefaultCostObject(FALSE);
        IF CostObject <> '' THEN
          TradeItemRec."Cost Object" := CostObject;
      END;
      CostObject := TradeItemRec.GetDefaultCostObject(TRUE);
      IF CostObject <> '' THEN
        TradeItemRec."Cost Object (Removal)" := CostObject;

      TradeItemRec.Expired := FALSE;   //Also for Price historie
      TradeItemRec.GetUnitData();
      TradeItemRec.GetRefDateHistPrice();
      IF TradeItemRec."Starting Date Price" > TradeItemRec."Price Reference Date" THEN
        TradeItemRec."Price Reference Date" := TradeItemRec."Starting Date Price";

      TradeItemRec.MODIFY;

      UpdatePriceHistory(TradeItemRec);

      TmpTradeItemRec.COPY(TradeItemRec);
      TmpTradeItemRec."Import Date-Time" := DatetimeMgt.Datetime(TODAY, TIME); //#C018143.n
      TmpTradeItemRec."Quantity Per Price" := Quantity; //C025959
      TmpTradeItemRec.INSERT;
      TmpTradeItemRec.MARK(TRUE);
    END;

    PROCEDURE UpdatePriceHistory@1100485011(ITradeItem@1100409000 : Record 11012317);
    VAR
      PriceHistoryTradeItem@1100409001 : Record 11012315;
    BEGIN
      PriceHistoryTradeItem.SETRANGE(Vendor, ITradeItem.Vendor);
      PriceHistoryTradeItem.SETRANGE("Item Code", ITradeItem."Item Code");
      PriceHistoryTradeItem.SETRANGE("Starting Date", 0D, ITradeItem."Starting Date Price");
      IF PriceHistoryTradeItem.FINDLAST THEN BEGIN
        IF (PriceHistoryTradeItem."Quantity Per Price" = ITradeItem."Quantity Per Price") AND
           (PriceHistoryTradeItem."Price ID" = ITradeItem."Price ID") AND
           (PriceHistoryTradeItem.Expired = ITradeItem.Expired) AND
           (PriceHistoryTradeItem."Gross Price" = ITradeItem."Gross Price")
        THEN
          EXIT;
      END;
      IF NOT PriceHistoryTradeItem.GET(ITradeItem.Vendor, ITradeItem."Item Code", ITradeItem."Starting Date Price") THEN BEGIN
        PriceHistoryTradeItem.INIT;
        PriceHistoryTradeItem.Vendor := ITradeItem.Vendor;
        PriceHistoryTradeItem."Item Code" := ITradeItem."Item Code";
        PriceHistoryTradeItem."Starting Date" := ITradeItem."Starting Date Price";
        PriceHistoryTradeItem.INSERT;
      END;

      PriceHistoryTradeItem."Gross Price" := ITradeItem."Gross Price";
      PriceHistoryTradeItem."Quantity Per Price" := ITradeItem."Quantity Per Price";
      PriceHistoryTradeItem."Price ID" := ITradeItem."Price ID";
      PriceHistoryTradeItem.Expired := ITradeItem.Expired;
      PriceHistoryTradeItem.MODIFY;
    END;

    PROCEDURE UpdateTradeItemInfoFrom2ba@1100525000(VAR OTotalNoOfRec@1100528600 : Integer;VAR ONoOfItemsToReplace@1100528604 : Integer) : Integer;
    VAR
      TradeItem@1100525001 : Record 11012317;
      ETIMVendorCentralMgt@1100525003 : Record 11012304;
      Counter@1100528302 : Integer;
      TotalNoOfRec@1100528601 : Integer;
      TotalTradeItemCount@1100528300 : Integer;
      NoOfUpdatedItems@1100528602 : Integer;
      NoOfItemsToReplace@1100528603 : Integer;
    BEGIN
      TradeItem.SETRANGE("Maintained by 2ba", TRUE);
      TradeItem.SETFILTER("Trade Item Guid (2ba)", '<>%1', ''); //mg, 03-06-2015: C023785
      IF NOT TradeItem.FINDSET THEN
        EXIT;

      Initialize;
      OTotalNoOfRec := TradeItem.COUNT;

      IF GUIALLOWED THEN
        Window.OPEN(Text004 + Text005 + Text003);

      REPEAT
        Counter += 1;
        IF GUIALLOWED THEN BEGIN
          Window.UPDATE(1, ROUND(Counter / OTotalNoOfRec * 10000, 1));
          Window.UPDATE(2, Counter);
        END;

        AddItemToPricelistFrom2baObject(TradeItem."Trade Item Guid (2ba)");
        IF Counter MOD 100 = 0 THEN BEGIN
          FetchPricelistFrom2baObject;
          ProcessActualPrices2ba(TotalTradeItemCount, NoOfUpdatedItems, ONoOfItemsToReplace);
        END;
      UNTIL TradeItem.NEXT = 0;

      IF Counter MOD 100 <> 0 THEN BEGIN
        FetchPricelistFrom2baObject;
        ProcessActualPrices2ba(TotalTradeItemCount, NoOfUpdatedItems, ONoOfItemsToReplace);
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;

      EXIT(NoOfUpdatedItems);
    END;

    LOCAL PROCEDURE ProcessActualPrices2ba@1100525003(VAR TotalTradeItemCount@1100528600 : Integer;VAR ONoOfUpdatesItems@1100528301 : Integer;VAR ONoOfItemsToReplace@1100528604 : Integer);
    VAR
      PriceHistoryTradeItem@1100525001 : Record 11012315;
      ETIMVendorCentralMgt@1100525003 : Record 11012304;
      ItemtoReplace@1100528601 : Record 11012322;
      TradeItem@1100528602 : Record 11012317;
      Counter@1100525002 : Integer;
      TradeItemCount@1100528300 : Integer;
      VendorCode@1100528603 : Code[20];
    BEGIN
      TradeItemCount := GetNumberOfItemsFrom2baObject;
      IF TradeItemCount <= 0 THEN
        EXIT;

      FOR Counter := 0 TO TradeItemCount - 1 DO BEGIN
        IF GUIALLOWED THEN
          Window.UPDATE(3, TotalTradeItemCount + Counter + 1);

        Set2baItemFrom2baObject(Counter);
        IF GetGrossPriceFor2baItem <> 0 THEN BEGIN
          PriceHistoryTradeItem.SETRANGE(Vendor, ETIMVendorCentralMgt.GetVendorFromGLN(GetVendorGLNFor2baItem));
          PriceHistoryTradeItem.SETRANGE("Item Code", GetTradeItemNoFor2baItem);
          IF NOT PriceHistoryTradeItem.FINDLAST OR
             (PriceHistoryTradeItem."Gross Price" <> GetGrossPriceFor2baItem) OR
             (PriceHistoryTradeItem."Quantity Per Price" <> GetQuantityPerPriceFor2baItem) OR
             (PriceHistoryTradeItem."Price ID" <> GetPriceIDFor2baItem)
          THEN BEGIN
            PriceHistoryTradeItem.INIT;
            PriceHistoryTradeItem.Vendor := ETIMVendorCentralMgt.GetVendorFromGLN(GetVendorGLNFor2baItem);
            PriceHistoryTradeItem."Item Code" := GetTradeItemNoFor2baItem;
            PriceHistoryTradeItem."Starting Date" := CalculateDate(GetStartingDatePriceFor2baItem, TODAY);
            PriceHistoryTradeItem.INSERT;
          END;
          IF (PriceHistoryTradeItem."Gross Price" <> GetGrossPriceFor2baItem) OR
             (PriceHistoryTradeItem."Quantity Per Price" <> GetQuantityPerPriceFor2baItem) OR
             (PriceHistoryTradeItem."Price ID" <> GetPriceIDFor2baItem)
          THEN BEGIN
            PriceHistoryTradeItem."Gross Price" := GetGrossPriceFor2baItem;
            PriceHistoryTradeItem."Nett Price" := PriceHistoryTradeItem."Gross Price";
            PriceHistoryTradeItem."Quantity Per Price" := GetQuantityPerPriceFor2baItem;
            PriceHistoryTradeItem."Price ID" := GetPriceIDFor2baItem;
            PriceHistoryTradeItem.MODIFY;
            ONoOfUpdatesItems += 1;
          END;
        END;

        VendorCode := GetAndCheckAlternatVendorCode(GetVendorGLNFor2baItem);
        IF TradeItem.GET(VendorCode, GetTradeItemNoFor2baItem) THEN BEGIN
          IF (GetSubstitutionByGTINFor2baItem <> '') AND (GetSubstitutionByProductcodeFor2baItem <> '') THEN BEGIN
            ItemtoReplace.INIT;
            ItemtoReplace.VALIDATE("Vendor (Old)", VendorCode);
            ItemtoReplace.VALIDATE("Trade Item (Old)", GetTradeItemNoFor2baItem);
            ItemtoReplace.VALIDATE("Cost Object (Old)", TradeItem."Cost Object");
            ItemtoReplace.VALIDATE("Description (Old)", TradeItem."Item Description");
            ItemtoReplace.VALIDATE("Manufacturer (New)", GetManufacturerFor2baItem);
            ItemtoReplace.VALIDATE("Basic Item (New)", GetSubstitutionByProductcodeFor2baItem);
            ItemtoReplace.VALIDATE("Description (New)", GetItemDescriptionFor2baItem);
            IF ItemtoReplace.INSERT(TRUE) THEN
              ONoOfItemsToReplace += 1;
          END;
        END;
      END;
      TotalTradeItemCount += TradeItemCount;
    END;

    LOCAL PROCEDURE CalculateDate@1100525005(DateText@1100525000 : Text[30];DefaultDate@1100525004 : Date) : Date;
    VAR
      YearNo@1100525001 : Integer;
      MonthNo@1100525002 : Integer;
      DayNo@1100525003 : Integer;
    BEGIN
      IF (DateText <> '') AND
         (EVALUATE(YearNo, COPYSTR(DateText, 1, 4))) AND
         (EVALUATE(MonthNo, COPYSTR(DateText, 5, 2))) AND
         (EVALUATE(DayNo, COPYSTR(DateText, 7, 2)))
      THEN
        EXIT(DMY2DATE(DayNo, MonthNo, YearNo));

      EXIT(DefaultDate);
    END;

    PROCEDURE GetICMCustData@1210190000(VendorNo@1100409000 : Code[20];ETIMVendorNo@1100528400 : Code[20];ShipToLocation@1100409001 : Code[20];ShortcutDimension1Code@1100529102 : Code[20];ProjectCode@1100529103 : Code[20];VAR UserName@1100528401 : Text[30];VAR Password@1100528402 : Text[30]) @1210190001 : Code[20];
    VAR
      lvICMCustomerRec@1100485000 : Record 11012129;
      lvICMDeliverRec@1100485001 : Record 11012130;
      ICMCustCodeFoundOnProjectLevel@1100528700 : Boolean;
      CustCode@1100529100 : Code[20];
      Vendor@1100529101 : Record 23;
      ICMCustCodeFoundOnDimensiLevel@1100529104 : Boolean;
    BEGIN
      lvICMCustomerRec.RESET;
      lvICMCustomerRec.SETRANGE(Vendor, VendorNo);
      lvICMCustomerRec.SETFILTER(Project, '%1', '');
      lvICMCustomerRec.SETFILTER("Global Dimension 1 Code", '%1', '');
      lvICMCustomerRec.SETFILTER("ICM Customer No.", '<>%1', '');
      IF lvICMCustomerRec.FIND('-') THEN
        CustCode := lvICMCustomerRec."ICM Customer No.";

      ICMCustCodeFoundOnProjectLevel := FALSE;
      IF ProjectCode <> '' THEN BEGIN
        lvICMCustomerRec.SETRANGE(Project, ProjectCode);  //db, 10-12-09
        IF (lvICMDeliverRec.Deliver = lvICMDeliverRec.Deliver::"Project Location") AND
           (ShipToLocation <> '') THEN BEGIN
          lvICMCustomerRec.SETRANGE("Project Location", ShipToLocation);
          IF lvICMCustomerRec.FIND('-') THEN BEGIN
            CustCode := lvICMCustomerRec."ICM Customer No.";
            ICMCustCodeFoundOnProjectLevel := TRUE;
          END ELSE BEGIN
            lvICMCustomerRec.SETFILTER("Project Location", '%1', '');
            IF lvICMCustomerRec.FIND('-') THEN BEGIN
              CustCode := lvICMCustomerRec."ICM Customer No.";
              ICMCustCodeFoundOnProjectLevel := TRUE;
            END;
          END;
        END ELSE BEGIN
          lvICMCustomerRec.SETFILTER("Project Location", '%1', '');
          IF lvICMCustomerRec.FIND('-') THEN BEGIN
            CustCode := lvICMCustomerRec."ICM Customer No.";
            ICMCustCodeFoundOnProjectLevel := TRUE;
          END;
        END;
      END;

      ICMCustCodeFoundOnDimensiLevel := FALSE;
      IF (NOT ICMCustCodeFoundOnProjectLevel) AND (ShortcutDimension1Code <> '') THEN BEGIN
        lvICMCustomerRec.RESET;
        lvICMCustomerRec.SETRANGE(Vendor, VendorNo);
        lvICMCustomerRec.SETFILTER(Project, '%1', '');
        lvICMCustomerRec.SETFILTER("Global Dimension 1 Code", ShortcutDimension1Code);
        lvICMCustomerRec.SETFILTER("ICM Customer No.", '<>%1', '');
        IF lvICMCustomerRec.FINDFIRST THEN BEGIN
          CustCode := lvICMCustomerRec."ICM Customer No.";
          ICMCustCodeFoundOnDimensiLevel := TRUE;
        END;
      END;

      IF (NOT ICMCustCodeFoundOnProjectLevel) AND (NOT ICMCustCodeFoundOnDimensiLevel) THEN BEGIN
        IF Vendor.GET(VendorNo) THEN
          CustCode := Vendor."ICM Customer No.";
        UserName := GetUserNameVendor(ETIMVendorNo);
        Password := GetPasswordVendor(ETIMVendorNo);
      END ELSE BEGIN
        UserName := lvICMCustomerRec."User Name";
        Password := lvICMCustomerRec.Password;
      END;

      CustCode := PADSTR(CustCode,10,' ');
      EXIT(CustCode);
    END;

    PROCEDURE CheckLinksAreEnabled@1100525004(TULinkIsEnabled@1100525000 : Boolean) : Boolean;
    BEGIN
      EXIT(Is2BAEnabled(FALSE) OR TULinkIsEnabled);
    END;

    PROCEDURE GetNavisionVendorForEtimVendor@1100525006(ETIMVendorNo@1100525001 : Code[20]) : Code[20];
    VAR
      ETIMVendor@1100525000 : Record 11012313;
    BEGIN
      //db, 11-03-14
      IF ETIMVendor.GET(ETIMVendorNo) THEN
        EXIT(ETIMVendor."Vendor (Purchase)");
    END;

    PROCEDURE ShowProductInformation@1100528600(IProductGuid@1100528600 : Text);
    BEGIN
      Initialize;
      ShowProductInformationFor2baObject(IProductGuid);
    END;

    LOCAL PROCEDURE GetInitialParams@1100528602(IRecRef@1100528600 : RecordRef;VAR OEtimVendorHasUserName@1100528601 : Boolean;VAR OEtimVendorNo@1100528602 : Code[20];VAR OVendorNo@1100528603 : Code[20];VAR OShipToLocation@1100528604 : Code[20];VAR OProjectCode@1100528606 : Code[20];VAR OShortCutDimension1Code@1100528607 : Code[20]);
    VAR
      AdviceOrderLine@1100528605 : Record 11012055;
      ProjectCostPlusEntry@1100528608 : Record 11012019;
      ServiceOrderCostPlusEntry@1100528609 : Record 11012825;
      ServiceOrder@1100528610 : Record 11012823;
      EstimateLineOLD@1100528611 : Record 11012154;
      Estimate@1100528612 : Record 11012151;
      EstimateLineNEW@1100528613 : Record 11072072;
      PurchaseLine@1100528614 : Record 39;
      PurchaseHeader@1100528615 : Record 38;
      BudgetLine@1100528616 : Record 11012001;
      ServiceOrderBudgetLine@1100528617 : Record 11012875;
      EstRcpLine@1100525001 : Record 11072075;
      BaseRcpLine@1100525000 : Record 11020582;
      MaintSchemeVersionLine@1100528618 : Record 11071744;
      ServSurvObjectAddAct@1100528619 : Record 11071814;
      ServiceSurvey@1100528620 : Record 11071803;
    BEGIN
      CASE IRecRef.NUMBER OF
        DATABASE::"Advice Order Line":
          BEGIN
            IRecRef.SETTABLE(AdviceOrderLine);
            OEtimVendorHasUserName := GetUserNameVendor(AdviceOrderLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := AdviceOrderLine."Vendor (Trade Item)";
            OVendorNo := AdviceOrderLine.Vendor;
            OShipToLocation := AdviceOrderLine."Ship To Location";
            OProjectCode := AdviceOrderLine."Project No.";
            OShortCutDimension1Code := AdviceOrderLine."Global Dimension 1 Code";
          END;
        DATABASE::"Project Cost Plus Entry":
          BEGIN
            IRecRef.SETTABLE(ProjectCostPlusEntry);
            OEtimVendorHasUserName := GetUserNameVendor(ProjectCostPlusEntry."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ProjectCostPlusEntry."Vendor (Trade Item)";
            OVendorNo := ProjectCostPlusEntry.Vendor;
            OProjectCode := ProjectCostPlusEntry."Project No.";
            OShortCutDimension1Code := ProjectCostPlusEntry."Global Dimension 1 Code";
          END;
        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderCostPlusEntry);
            OEtimVendorHasUserName := GetUserNameVendor(ServiceOrderCostPlusEntry."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ServiceOrderCostPlusEntry."Vendor (Trade Item)";
            OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo);
            ServiceOrder.GET(ServiceOrderCostPlusEntry. "Service Order No.");
            OShortCutDimension1Code := ServiceOrder."Global Dimension 1 Code";
          END;
        DATABASE::"Estimate Line OLD":
          BEGIN
            IRecRef.SETTABLE(EstimateLineOLD);
            OEtimVendorHasUserName := GetUserNameVendor(EstimateLineOLD."Vendor (Trade Item)") <> '';
            OEtimVendorNo := EstimateLineOLD."Vendor (Trade Item)";
            IF EstimateLineOLD.Vendor = '' THEN
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)  //db, 11-03-14
            ELSE
              OVendorNo := EstimateLineOLD.Vendor;
            Estimate.GET(EstimateLineOLD. "Estimate No.");
            OShortCutDimension1Code := Estimate."Global Dimension 1 Code";  //db, 12-05-14
          END;
        DATABASE::"Estimate Line NEW":
          BEGIN
            IRecRef.SETTABLE(EstimateLineNEW);
            OEtimVendorHasUserName := GetUserNameVendor(EstimateLineNEW."Vendor (Trade Item)") <> '';
            OEtimVendorNo := EstimateLineNEW."Vendor (Trade Item)";
            IF EstimateLineNEW.Vendor = '' THEN
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)  //db, 11-03-14
            ELSE
              OVendorNo := EstimateLineNEW.Vendor;
            Estimate.GET(EstimateLineNEW. "Estimate No.");
            OShortCutDimension1Code := Estimate."Global Dimension 1 Code";  //db, 12-05-14
          END;
        DATABASE::"Estimate Recipe Line":  //db, 12-05-15: C022731
          BEGIN
            IRecRef.SETTABLE(EstRcpLine);
            OEtimVendorHasUserName := GetUserNameVendor(EstRcpLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := EstRcpLine."Vendor (Trade Item)";
            IF EstRcpLine.Vendor = '' THEN
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := EstRcpLine.Vendor;
            Estimate.GET(EstRcpLine. "Estimate No.");
            OShortCutDimension1Code := Estimate."Global Dimension 1 Code";
          END;
        DATABASE::"Base Recipe Line":  //db, 12-05-15: C022731
          BEGIN
            IRecRef.SETTABLE(BaseRcpLine);
            OEtimVendorHasUserName := GetUserNameVendor(BaseRcpLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := BaseRcpLine."Vendor (Trade Item)";
            IF BaseRcpLine.Vendor = '' THEN
              OVendorNo := GetNavisionVendorForEtimVendor(OEtimVendorNo)
            ELSE
              OVendorNo := BaseRcpLine.Vendor;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            IRecRef.SETTABLE(PurchaseLine);
            OEtimVendorHasUserName := GetUserNameVendor(PurchaseLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := PurchaseLine."Vendor (Trade Item)";
            PurchaseHeader.GET(PurchaseLine."Document Type", PurchaseLine."Document No.");
            OShipToLocation := PurchaseHeader."Ship To Location";
            OVendorNo := PurchaseLine."Buy-from Vendor No.";
            OProjectCode := PurchaseLine."Job No.";
            OShortCutDimension1Code := PurchaseLine."Shortcut Dimension 1 Code";
          END;
        DATABASE::"Budget Line":
          BEGIN
            IRecRef.SETTABLE(BudgetLine);
            OEtimVendorHasUserName := GetUserNameVendor(BudgetLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := BudgetLine."Vendor (Trade Item)";
            OVendorNo := BudgetLine.Vendor;
            OProjectCode := BudgetLine."Project No.";
            OShortCutDimension1Code := BudgetLine."Department Code";
          END;
        DATABASE::"Service Order Budget Line":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderBudgetLine);
            OEtimVendorHasUserName := GetUserNameVendor(ServiceOrderBudgetLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ServiceOrderBudgetLine."Vendor (Trade Item)";
            OVendorNo := ServiceOrderBudgetLine.Vendor;
            ServiceOrder.GET(ServiceOrderBudgetLine."Service Order No.");
            OShortCutDimension1Code := ServiceOrder."Global Dimension 1 Code";
          END;
        DATABASE::"Maint. Scheme Version Line":
          BEGIN
            IRecRef.SETTABLE(MaintSchemeVersionLine);
            OEtimVendorHasUserName := GetUserNameVendor(MaintSchemeVersionLine."Vendor (Trade Item)") <> '';
            OEtimVendorNo := MaintSchemeVersionLine."Vendor (Trade Item)";
            OVendorNo := MaintSchemeVersionLine.Vendor;
          END;
        DATABASE::"Serv. Surv. Object Add. Act.":
          BEGIN
            IRecRef.SETTABLE(ServSurvObjectAddAct);
            OEtimVendorHasUserName := GetUserNameVendor(ServSurvObjectAddAct."Vendor (Trade Item)") <> '';
            OEtimVendorNo := ServSurvObjectAddAct."Vendor (Trade Item)";
            OVendorNo := ServSurvObjectAddAct.Vendor;
            ServiceSurvey.GET(ServSurvObjectAddAct."Survey No.");
            OShortCutDimension1Code := ServiceSurvey."Global Dimension 1 Code";
          END;
        ELSE
          ERROR(Text002, IRecRef.NAME);
      END;
    END;

    LOCAL PROCEDURE HandleChoosenTradeItems@1100528605(VAR ITmpTradeItem@1100528600 : TEMPORARY Record 11012317;IRecRef@1100528602 : RecordRef);
    VAR
      TmpTradeItem@1100528601 : TEMPORARY Record 11012317;
      AdviceOrderLine@1100528603 : Record 11012055;
      ProjectCostPlusEntry@1100528605 : Record 11012019;
      ServiceOrderCostPlusEntry@1100528606 : Record 11012825;
      EstimateLineOLD@1100528607 : Record 11012154;
      EstimateLineNEW@1100528608 : Record 11072072;
      PurchaseLine@1100528609 : Record 39;
      BudgetLine@1100528610 : Record 11012001;
      ServiceOrderBudgetLine@1100528611 : Record 11012875;
      MultipleCopyManagement@1100528604 : Codeunit 11012068;
      EstRcpLine@1100525001 : Record 11072075;
      BaseRcpLine@1100525000 : Record 11020582;
      MaintSchemeVersionLine@1100528612 : Record 11071744;
      ServSurvObjectAddAct@1100528613 : Record 11071814;
    BEGIN
      TmpTradeItem.COPY(ITmpTradeItem, TRUE);

      TmpTradeItem.SETCURRENTKEY("Import Date-Time");
      IF TmpTradeItem.ISEMPTY THEN
        EXIT;
      CASE IRecRef.NUMBER OF
        DATABASE::"Advice Order Line":
          BEGIN
            IRecRef.SETTABLE(AdviceOrderLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              AdviceOrderLine."Project No.", AdviceOrderLine.Element, AdviceOrderLine."Extension Contract",
              AdviceOrderLine."Service Order No.", AdviceOrderLine."Record Type", '', '',
              AdviceOrderLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Project Cost Plus Entry":
          BEGIN
            IRecRef.SETTABLE(ProjectCostPlusEntry);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ProjectCostPlusEntry."Project No.", ProjectCostPlusEntry.Principal,
              ProjectCostPlusEntry."Commission No.", ProjectCostPlusEntry."Settl.Sheet No.",
              0, '', '', ProjectCostPlusEntry."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Service Order Cost Plus Entry":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderCostPlusEntry);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ServiceOrderCostPlusEntry."Service Order No.", '', '', '',
              0, '', '', ServiceOrderCostPlusEntry."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Estimate Line OLD":
          BEGIN
            IRecRef.SETTABLE(EstimateLineOLD);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              EstimateLineOLD."Estimate No.", EstimateLineOLD."Sub-Estimate No.", EstimateLineOLD.Part, '', 0, '',
              EstimateLineOLD."Part Group", EstimateLineOLD."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Estimate Line NEW":
          BEGIN
            IRecRef.SETTABLE(EstimateLineNEW);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              EstimateLineNEW."Estimate No.", EstimateLineNEW."Sub-Estimate No.", EstimateLineNEW.Part, '', 0, '',
              EstimateLineNEW."Part Group", EstimateLineNEW."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Estimate Recipe Line":  //db, 12-05-15: C022731
          BEGIN
            IRecRef.SETTABLE(EstRcpLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              EstRcpLine."Estimate No.", EstRcpLine."Sub-Estimate No.", EstRcpLine.Part, EstRcpLine.Recipe,
              EstRcpLine."Estimate Line", EstRcpLine."Recipe Group",
              EstRcpLine."Part Group", EstRcpLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Base Recipe Line":  //db, 12-05-15: C022731
          BEGIN
            IRecRef.SETTABLE(BaseRcpLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              '', '', '', BaseRcpLine.Recipe, 0, BaseRcpLine."Recipe Group",
              '', BaseRcpLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            IRecRef.SETTABLE(PurchaseLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              PurchaseLine."Document No.", PurchaseLine.Element, '', PurchaseLine."Job No.",
              PurchaseLine."Document Type", PurchaseLine."Service Order No.", '',
              PurchaseLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Budget Line":
          BEGIN
            IRecRef.SETTABLE(BudgetLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              BudgetLine."Project No.", BudgetLine."Extension Contract", BudgetLine.Adjustment, BudgetLine.Element,
              0, BudgetLine.Option, '', BudgetLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Service Order Budget Line":
          BEGIN
            IRecRef.SETTABLE(ServiceOrderBudgetLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ServiceOrderBudgetLine."Service Order No.", ServiceOrderBudgetLine."Object No.", ServiceOrderBudgetLine."Maintenance Scheme", '',
              0, '', '', ServiceOrderBudgetLine."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Maint. Scheme Version Line":
          BEGIN
            IRecRef.SETTABLE(MaintSchemeVersionLine);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
            //Line Type,Type Code,Belongs to Scheme,Index Date,Line No.
              MaintSchemeVersionLine."Type Code", MaintSchemeVersionLine."Belongs to Scheme", '', '',
              MaintSchemeVersionLine."Line Type", '', '', MaintSchemeVersionLine."Line No.", '', '', MaintSchemeVersionLine."Index Date");
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        DATABASE::"Serv. Surv. Object Add. Act.":
          BEGIN
            IRecRef.SETTABLE(ServSurvObjectAddAct);
            MultipleCopyManagement.SetSelectionItem(IRecRef.NUMBER,
              ServSurvObjectAddAct."Survey No.", ServSurvObjectAddAct."Location Code", ServSurvObjectAddAct."Maintenance Scheme Code", '',
              ServSurvObjectAddAct."Seq. No.", '', '', ServSurvObjectAddAct."Line No.", '', '', 0D);
            MultipleCopyManagement.CopyTradeItems(TmpTradeItem);
          END;
        ELSE
          ERROR(Text002, IRecRef.NAME);
      END;
    END;

    PROCEDURE Test2BALicence@1100528603();
    VAR
      LicensePermission@1100528600 : Record 2000000043;
    BEGIN
      IF NOT LicensePermission.GET(LicensePermission."Object Type"::Codeunit, CODEUNIT::"2ba Unifeed License") OR
         (LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::" ")
      THEN
        ERROR(Text007);
    END;

    LOCAL PROCEDURE "-----2baObject------DotNet"@1100528819();
    BEGIN
    END;

    LOCAL PROCEDURE Clear2baObject@1100528800();
    BEGIN
      IF GUIALLOWED THEN
        IF NOT ISNULL(Client2baObject) THEN CLEAR(Client2baObject)
      ELSE
        IF NOT ISNULL(Server2baObject) THEN CLEAR(Server2baObject);
    END;

    LOCAL PROCEDURE _4PSUnifeedFor2baObject@1100528805();
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject := Client2baObject._4PSUnifeed
      ELSE
        Server2baObject := Server2baObject._4PSUnifeed;
    END;

    LOCAL PROCEDURE SetUnifeedAuthenticationFor2baObject@1100528824();
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.SetUnifeedAuthentication(GetUserName, GetPassword)
      ELSE
        Server2baObject.SetUnifeedAuthentication(GetUserName, GetPassword);
    END;

    LOCAL PROCEDURE SetDebugOptionFor2baObject@1100528815(Debug@1100528800 : Integer);
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.SetDebugOption(Debug)
      ELSE
        Server2baObject.SetDebugOption(Debug);
    END;

    LOCAL PROCEDURE GetNumberOfItemsFrom2baObject@1100528826() : Integer;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baObject.GetNumberOfItems())
      ELSE
        EXIT(Server2baObject.GetNumberOfItems());
    END;

    LOCAL PROCEDURE SetSearchVendorFor2baObject@1100528807(VendorCode@1100528800 : Code[20]);
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.SetSearchVendor(VendorCode)
      ELSE
        Server2baObject.SetSearchVendor(VendorCode);
    END;

    LOCAL PROCEDURE SetSearchDescriptionFor2baObject@1100528808(GTINCodeProduct@1100528800 : Code[20]);
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.SetSearchDescription(GTINCodeProduct)
      ELSE
        Server2baObject.SetSearchDescription(GTINCodeProduct);
    END;

    LOCAL PROCEDURE SetSearchProductGuidFor2baObject@1100528809(ProductIDGuid2ba@1100528800 : Text[36]);
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.SetSearchProductGuid(ProductIDGuid2ba)
      ELSE
        Server2baObject.SetSearchProductGuid(ProductIDGuid2ba);
    END;

    LOCAL PROCEDURE SetOneItemFrom2baObject@1100528811();
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject := Client2baObject.GetOneItem
      ELSE
        Server2baObject := Server2baObject.GetOneItem;
    END;

    LOCAL PROCEDURE Set2baItemFrom2baObject@1100528827(Counter@1100528800 : Integer);
    BEGIN
      IF GUIALLOWED THEN
        Client2baItem := Client2baObject.GetItem(Counter)
      ELSE
        Server2baItem := Server2baObject.GetItem(Counter);
    END;

    LOCAL PROCEDURE ShowDialogForOneItemFrom2baObject@1100528810();
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.ShowDialogForOneItem
      ELSE
        EXIT;
    END;

    LOCAL PROCEDURE ShowDialogForMultipleItemsFrom2baObject@1100528825();
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.ShowDialogForMulitpleItems()
      ELSE
        EXIT;
    END;

    LOCAL PROCEDURE ShowProductInformationFor2baObject@1100528877(IProductGuid@1100528800 : Text);
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.ShowProductInformation(IProductGuid)
      ELSE
        EXIT;
    END;

    LOCAL PROCEDURE ShowTradeItemInfoFrom2baObject@1100528806(TradeItemGuid2ba@1100528800 : Text[36]);
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.ShowTradeItemInformation(TradeItemGuid2ba)
      ELSE
        Server2baObject.ShowTradeItemInformation(TradeItemGuid2ba);
    END;

    LOCAL PROCEDURE AddItemToPricelistFrom2baObject@1100528872(TradeItemGuid2ba@1100528800 : Text[36]);
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.AddItemToPricelist(TradeItemGuid2ba)
      ELSE
        Server2baObject.AddItemToPricelist(TradeItemGuid2ba);
    END;

    LOCAL PROCEDURE FetchPricelistFrom2baObject@1100528874();
    BEGIN
      IF GUIALLOWED THEN
        Client2baObject.FetchPricelist
      ELSE
        Server2baObject.FetchPricelist;
    END;

    LOCAL PROCEDURE "-----2baItem-----DotNet"@1100528820();
    BEGIN
    END;

    LOCAL PROCEDURE Clear2baItem@1100528801();
    BEGIN
      IF GUIALLOWED THEN
        IF NOT ISNULL(Client2baItem) THEN CLEAR(Client2baItem)
      ELSE
        IF NOT ISNULL(Server2baItem) THEN CLEAR(Server2baItem);
    END;

    LOCAL PROCEDURE _4PSUnifeedItemFor2baItem@1100528817();
    BEGIN
      IF GUIALLOWED THEN
        Client2baItem := Client2baItem._4PSUnifeedItem
      ELSE
        Server2baItem := Server2baItem._4PSUnifeedItem;
    END;

    LOCAL PROCEDURE GetTradeItemNoFor2baItem@1100528812() : Code[20];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetTradeItemNo)
      ELSE
        EXIT(Server2baItem.GetTradeItemNo);
    END;

    LOCAL PROCEDURE GetVendorGLNFor2baItem@1100528813() : Code[20];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetVendorGLN)
      ELSE
        EXIT(Server2baItem.GetVendorGLN);
    END;

    LOCAL PROCEDURE GetGTINFor2baItem@1100528828() : Code[20];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetGtin())
      ELSE
        EXIT(Server2baItem.GetGtin());
    END;

    LOCAL PROCEDURE GetManufacturerFor2baItem@1100528829() : Code[15];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetManufacturer())
      ELSE
        EXIT(Server2baItem.GetManufacturer());
    END;

    LOCAL PROCEDURE GetProductCodeFor2baItem@1100528830() : Code[20];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetProductCode())
      ELSE
        EXIT(Server2baItem.GetProductCode());
    END;

    LOCAL PROCEDURE GetItemDescriptionFor2baItem@1100528832() : Text;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetItemDescription())
      ELSE
        EXIT(Server2baItem.GetItemDescription());
    END;

    LOCAL PROCEDURE GetApplicationUnitQuantityFor2baItem@1100528833() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetApplicationUnitQuantity())
      ELSE
        EXIT(Server2baItem.GetApplicationUnitQuantity());
    END;

    LOCAL PROCEDURE GetApplicationIDFor2baItem@1100528836() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetApplicationID())
      ELSE
        EXIT(Server2baItem.GetApplicationID());
    END;

    LOCAL PROCEDURE GetPackagingCodeFor2baItem@1100528838() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetPackagingCode())
      ELSE
        EXIT(Server2baItem.GetPackagingCode());
    END;

    LOCAL PROCEDURE GetOrderIDFor2baItem@1100528839() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetOrderID())
      ELSE
        EXIT(Server2baItem.GetOrderID())
    END;

    LOCAL PROCEDURE GetMinimumOrderQuantityFor2baItem@1100528840() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetMinimumOrderQuantity())
      ELSE
        EXIT(Server2baItem.GetMinimumOrderQuantity());
    END;

    LOCAL PROCEDURE GetLotSizeQuantityFor2baItem@1100528841() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetLotSizeQuantity())
      ELSE
        EXIT(Server2baItem.GetLotSizeQuantity());
    END;

    LOCAL PROCEDURE GetDeliveryPeriodFor2baItem@1100528842() : Text;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetDeliveryPeriod())
      ELSE
        EXIT(Server2baItem.GetDeliveryPeriod());
    END;

    LOCAL PROCEDURE GetDeliveryTimeIDFor2baItem@1100528843() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetDeliveryTimeID())
      ELSE
        EXIT(Server2baItem.GetDeliveryTimeID());
    END;

    LOCAL PROCEDURE GetDiscountGroupCodeFor2baItem@1100528844() : Code[35];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetDiscountGroupCode())
      ELSE
        EXIT(Server2baItem.GetDiscountGroupCode());
    END;

    LOCAL PROCEDURE GetFactorPricePurchaseUnitFor2baItem@1100528845() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetFactorPricePurchaseUnit())
      ELSE
        EXIT(Server2baItem.GetFactorPricePurchaseUnit());
    END;

    LOCAL PROCEDURE GetStartingDatePriceFor2baItem@1100528846() : Text[30];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetStartingDatePrice)
      ELSE
        EXIT(Server2baItem.GetStartingDatePrice);
    END;

    LOCAL PROCEDURE GetGrossPriceFor2baItem@1100528847() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetGrossPrice())
      ELSE
        EXIT(Server2baItem.GetGrossPrice());
    END;

    LOCAL PROCEDURE GetQuantityPerPriceFor2baItem@1100528848() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetQuantityPerPrice())
      ELSE
        EXIT(Server2baItem.GetQuantityPerPrice());
    END;

    LOCAL PROCEDURE GetPriceIDFor2baItem@1100528850() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetPriceID())
      ELSE
        EXIT(Server2baItem.GetPriceID());
    END;

    LOCAL PROCEDURE GetTradeItemGuidFor2baItem@1100528852() : Text[36];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetTradeItemGuid())
      ELSE
        EXIT(Server2baItem.GetTradeItemGuid());
    END;

    LOCAL PROCEDURE GetProductIDGuidFor2baItem@1100528853() : Text[36];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetProductIdGuid())
      ELSE
        EXIT(Server2baItem.GetProductIdGuid());
    END;

    LOCAL PROCEDURE GetStatusCodeFor2baItem@1100528854() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetStatusCode())
      ELSE
        EXIT(Server2baItem.GetStatusCode());
    END;

    LOCAL PROCEDURE GetSubstitutionByGTINFor2baItem@1100528875() : Code[20];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetSubstitutionByGTIN)
      ELSE
        EXIT(Server2baItem.GetSubstitutionByGTIN);
    END;

    LOCAL PROCEDURE GetSubstitutionByProductcodeFor2baItem@1100528876() : Code[20];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(Client2baItem.GetSubstitutionByProductcode)
      ELSE
        EXIT(Server2baItem.GetSubstitutionByProductcode);
    END;

    LOCAL PROCEDURE "-----VendorObject-----DotNet"@1100528821();
    BEGIN
    END;

    LOCAL PROCEDURE SetDebugOptionForVendorObject@1100528851(Debug@1100528800 : Integer);
    BEGIN
      IF GUIALLOWED THEN
        ClientVendorObject.SetDebugOption(Debug)
      ELSE
        ServerVendorObject.SetDebugOption(Debug);
    END;

    LOCAL PROCEDURE ClearVendorObject@1100528831();
    BEGIN
      IF GUIALLOWED THEN
        IF NOT ISNULL(ClientVendorObject) THEN CLEAR(ClientVendorObject)
      ELSE
        IF NOT ISNULL(ServerVendorObject) THEN CLEAR(ServerVendorObject);
    END;

    LOCAL PROCEDURE _4PSWebshopForVendorObject@1100528837();
    BEGIN
      IF GUIALLOWED THEN
        ClientVendorObject := ClientVendorObject._4PSWebshop
      ELSE
        ServerVendorObject := ServerVendorObject._4PSWebshop;
    END;

    LOCAL PROCEDURE SetAuthenticationTUForVendorObject@1100528867(UserNameForVendor@1100528800 : Text[30];ICMCustomer@1100528801 : Text[30];PasswordForVendor@1100528802 : Text[30]);
    BEGIN
      IF GUIALLOWED THEN
        ClientVendorObject.SetAuthenticationTU(UserNameForVendor, ICMCustomer, PasswordForVendor)
      ELSE
        ServerVendorObject.SetAuthenticationTU(UserNameForVendor, ICMCustomer, PasswordForVendor);
    END;

    LOCAL PROCEDURE GetNumberOfItemsFromVendorObject@1100528804() : Integer;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorObject.GetNumberOfItems)
      ELSE
          EXIT(ServerVendorObject.GetNumberOfItems);
    END;

    LOCAL PROCEDURE GetItemQuantityFromVendorObject@1100528823(Counter@1100528800 : Integer) : Integer;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorObject.GetItemQuantity(Counter))
      ELSE
        EXIT(ServerVendorObject.GetItemQuantity(Counter));
    END;

    LOCAL PROCEDURE SetVendorItemFromVendorObject@1100528814(Counter@1100528800 : Integer);
    BEGIN
      IF GUIALLOWED THEN
        ClientVendorItem := ClientVendorObject.GetItem(Counter)
      ELSE
        ServerVendorItem := ServerVendorObject.GetItem(Counter);
    END;

    LOCAL PROCEDURE ShowWebshopForVendorObject@1100528816();
    BEGIN
      IF GUIALLOWED THEN
        ClientVendorObject.ShowWebshop()
      ELSE
        ServerVendorObject.ShowWebshop();
    END;

    LOCAL PROCEDURE "-----VendorItem-----DotNet"@1100528822();
    BEGIN
    END;

    LOCAL PROCEDURE ClearVendorItem@1100528834();
    BEGIN
      IF GUIALLOWED THEN
        IF NOT ISNULL(ClientVendorItem) THEN CLEAR(ClientVendorItem)
      ELSE
        IF NOT ISNULL(ServerVendorItem) THEN CLEAR(ServerVendorItem);
    END;

    LOCAL PROCEDURE GetTradeItemNoForVendorItem@1100528818() : Code[20];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetTradeItemNo)
      ELSE
        EXIT(ServerVendorItem.GetTradeItemNo);
    END;

    LOCAL PROCEDURE GetGtinForVendorItem@1100528855() : Code[20];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetGtin())
      ELSE
        EXIT(ServerVendorItem.GetGtin());
    END;

    LOCAL PROCEDURE GetItemDescriptionForVendorItem@1100528857() : Text;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetItemDescription())
      ELSE
        EXIT(ServerVendorItem.GetItemDescription());
    END;

    LOCAL PROCEDURE GetApplicationUnitQuantityForVendorItem@1100528858() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetApplicationUnitQuantity())
      ELSE
        EXIT(ServerVendorItem.GetApplicationUnitQuantity());
    END;

    LOCAL PROCEDURE GetApplicationIDForVendorItem@1100528859() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetApplicationID())
      ELSE
        EXIT(ServerVendorItem.GetApplicationID());
    END;

    LOCAL PROCEDURE GetPackagingCodeForVendorItem@1100528860() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetPackagingCode())
      ELSE
        EXIT(ServerVendorItem.GetPackagingCode());
    END;

    LOCAL PROCEDURE GetOrderIDForVendorItem@1100528861() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetOrderID())
      ELSE
        EXIT(ServerVendorItem.GetOrderID());
    END;

    LOCAL PROCEDURE GetMinimumOrderQuantityForVendorItem@1100528862() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetMinimumOrderQuantity())
      ELSE
        EXIT(ServerVendorItem.GetMinimumOrderQuantity());
    END;

    LOCAL PROCEDURE GetLotSizeQuantityForVendorItem@1100528863() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetLotSizeQuantity())
      ELSE
        EXIT(ServerVendorItem.GetLotSizeQuantity());
    END;

    LOCAL PROCEDURE GetDiscountGroupCodeForVendorItem@1100528864() : Code[35];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetDiscountGroupCode())
      ELSE
        EXIT(ServerVendorItem.GetDiscountGroupCode());
    END;

    LOCAL PROCEDURE GetQtyPerUnitOfMeasureForVendorItem@1100528865() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetQtyPerUnitOfMeasure())
      ELSE
        EXIT(ServerVendorItem.GetQtyPerUnitOfMeasure());
    END;

    LOCAL PROCEDURE GetPriceIDForVendorItem@1100528868() : Code[10];
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetPriceID())
      ELSE
        EXIT(ServerVendorItem.GetPriceID());
    END;

    LOCAL PROCEDURE GetGrossPriceForVendorItem@1100528869() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetGrossPrice())
      ELSE
        EXIT(ServerVendorItem.GetGrossPrice());
    END;

    LOCAL PROCEDURE GetQuantityPerPriceForVendorItem@1100528870() : Decimal;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(ClientVendorItem.GetQuantityPerPrice())
      ELSE
        EXIT(ServerVendorItem.GetQuantityPerPrice());
    END;

    BEGIN
    END.
  }
}

