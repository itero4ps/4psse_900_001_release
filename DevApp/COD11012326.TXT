OBJECT Codeunit 11012326 Imp. Plant Order (Plant Mgt.)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            PlantOrders@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
            XMLDOMManagement4PS@1100525002 : Codeunit 11020220;
            i@1100525001 : Integer;
          BEGIN
            IF GUIALLOWED THEN
              Window.OPEN(Text000);

            UtilityFunctions.CreateInFolder;

            IF FileExists(FileName) THEN BEGIN
              DOMDocument := DOMDocument.XmlDocument;

              IF GUIALLOWED THEN
                XMLDOMManagement4PS.LoadXMLFromClientFile(
                  DOMDocument, FileName, TRUE)
              ELSE BEGIN
                DOMDocument.Load(FileName);
                XMLDOMManagement4PS.RemoveNamespaces(DOMDocument, DOMDocument);
              END;

              IF DOMDocument.DocumentElement.Name <> 'plantorders' THEN
                ERROR(Text001 + Text002);

              IF FORMAT(DOMDocument.DocumentElement.GetAttribute('version')) <> '1.0' THEN
                ERROR(Text001 + Text003);

              PlantOrders := DOMDocument.DocumentElement.SelectNodes('plantorder');

              IF PlantOrders.Count = 0 THEN
                ERROR(Text001 + Text004);

              FOR i := 0 TO PlantOrders.Count - 1 DO
                ImportPlantOrder(PlantOrders.Item(i));
            END;

            IF GUIALLOWED THEN
              Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'ENU=Importing Plant Orders...';
      UtilityFunctions@1100525011 : Codeunit 11012318;
      FileMgt@1100525500 : Codeunit 419;
      DOMDocument@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Window@1100525001 : Dialog;
      Text001@1100525003 : TextConst 'ENU="Unable to process plant orders file; "';
      Text002@1100525004 : TextConst 'ENU=root node name is not "plantorders".';
      Text003@1100525005 : TextConst 'ENU=version is not "1.0".';
      Text004@1100525006 : TextConst 'ENU=file does not contain any plant orders.';
      Text005@1100525007 : TextConst 'ENU=element "%1" should not have a value in the import file.';
      Text006@1100525008 : TextConst 'ENU=plant order type "%1" is unknown.';
      Text007@1100525009 : TextConst 'ENU=plant order status "%1" is unknown.';
      Text008@1100525010 : TextConst 'ENU=plant order ''Transport cost for'' "%1" is unknown.';

    PROCEDURE FileName@1100525001() : Text[260];
    VAR
      PlantMgtFileExchangeSetup@1100525000 : Record 11125655;
    BEGIN
      PlantMgtFileExchangeSetup.GET;
      PlantMgtFileExchangeSetup.TESTFIELD("Import Path");

      EXIT(STRSUBSTNO('%1\%2', DELCHR(PlantMgtFileExchangeSetup."Import Path", '>', '\'), 'plantorders.xml'));
    END;

    PROCEDURE ImportPlantOrder@1100525012(PlantOrderElement@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      PlantOrder@1100525001 : Record 11012556;
      CommentLines@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      PlantOrderLines@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100525004 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.UPDATE;

      IF GetElementText(PlantOrderElement, 'no') <> '' THEN
        ERROR(Text001 + Text005, 'no');

      PlantOrder.INSERT(TRUE);

      PlantOrder.Type := GetPlantOrderType(GetElementText(PlantOrderElement, 'type'));
      EVALUATE(PlantOrder."Transfer Date", GetElementText(PlantOrderElement, 'transferdate'), 9);
      EVALUATE(PlantOrder."Rental Startdate (To Location)", GetElementText(PlantOrderElement, 'rentalstartdate'), 9);
      EVALUATE(PlantOrder."Rental Enddate (From Location)", GetElementText(PlantOrderElement, 'rentalenddate'), 9);
      EVALUATE(PlantOrder."From Location", GetElementText(PlantOrderElement, 'fromlocation'));
      EVALUATE(PlantOrder."To Location", GetElementText(PlantOrderElement, 'tolocation'));
      PlantOrder.Status := GetPlantOrderStatus(GetElementText(PlantOrderElement, 'status'));
      EVALUATE(PlantOrder."Created by", GetElementText(PlantOrderElement, 'createdby'));
      EVALUATE(PlantOrder."Plant Request No.", GetElementText(PlantOrderElement, 'plantrequestno'));
      PlantOrder."Transport Cost for (Advice)" := GetPlantOrderTransportCost(GetElementText(PlantOrderElement, 'shippingcharges'));

      CommentLines := PlantOrderElement.SelectNodes('comment/commentline');
      PlantOrderLines := PlantOrderElement.SelectNodes('plantorderlines/plantorderline');

      FOR i := 0 TO CommentLines.Count - 1 DO
        ImportCommentLine(PlantOrder, (i + 1) * 10000, CommentLines.Item(i));

      FOR i := 0 TO PlantOrderLines.Count - 1 DO
        ImportPlantOrderLine(PlantOrder."No.", (i + 1) * 10000, PlantOrderLines.Item(i));

      PlantOrder.VALIDATE(Type);
      PlantOrder.MODIFY(TRUE);
    END;

    PROCEDURE ImportPlantOrderLine@1100525018(PlantOrderNo@1100525000 : Code[20];LineNo@1100525001 : Integer;PlantOrderLineElement@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      PlantOrderLine@1100525003 : Record 11012557;
    BEGIN
      PlantOrderLine."Plant Order No." := PlantOrderNo;
      PlantOrderLine."Line No." := LineNo;

      PlantOrderLine.Type := GetPlantOrderLineType(GetElementText(PlantOrderLineElement, 'type'));
      EVALUATE(PlantOrderLine.Description, GetElementText(PlantOrderLineElement, 'description'));
      EVALUATE(PlantOrderLine."Comment CP Order", GetElementText(PlantOrderLineElement, 'comment'));
      EVALUATE(PlantOrderLine."Plant Type", GetElementText(PlantOrderLineElement, 'planttype'));
      EVALUATE(PlantOrderLine."Expected return on", GetElementText(PlantOrderLineElement, 'expectedreturn'));
      EVALUATE(PlantOrderLine.Quantity, GetElementText(PlantOrderLineElement, 'quantity'));
      EVALUATE(PlantOrderLine."Rental Startdate (To Location)", GetElementText(PlantOrderLineElement, 'rentalstartdate'), 9);
      EVALUATE(PlantOrderLine."Rental Enddate (From Location)", GetElementText(PlantOrderLineElement, 'rentalenddate'), 9);
      EVALUATE(PlantOrderLine."Plant Request No.", GetElementText(PlantOrderLineElement, 'plantrequestno'));
      EVALUATE(PlantOrderLine."Plant Request Line No.", GetElementText(PlantOrderLineElement, 'plantrequestlineno'));

      PlantOrderLine.VALIDATE(Type);
      PlantOrderLine.VALIDATE("Plant Type");
      PlantOrderLine.VALIDATE("Transfer Date");
      PlantOrderLine.VALIDATE("Expected return on");
      PlantOrderLine.VALIDATE("From Location");
      PlantOrderLine.VALIDATE("To Location");
      PlantOrderLine.VALIDATE(Quantity);
      PlantOrderLine.VALIDATE("Rental Startdate (To Location)");
      PlantOrderLine.VALIDATE("Rental Enddate (From Location)");
      PlantOrderLine.INSERT(TRUE);
    END;

    PROCEDURE ImportCommentLine@1100525019(PlantOrder@1100525000 : Record 11012556;LineNo@1100525001 : Integer;CommentLineElement@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      PlantCommentLine@1100525003 : Record 11072666;
    BEGIN
      //DP00183.sc
      PlantCommentLine.INIT;
      //C005461.sc
      PlantCommentLine."Table No." := DATABASE::"Plant Order";
      PlantCommentLine."No." := PlantOrder."No.";
      PlantCommentLine."No. 2" := '';
      PlantCommentLine."Entry No." := 0;
      //C005461.ec
      PlantCommentLine."Line No." := LineNo;
      EVALUATE(PlantCommentLine.Comment, GetElementText(CommentLineElement, '.'));
      EVALUATE(PlantCommentLine.Date, FORMAT(CommentLineElement.GetAttribute('date')), 9);
      EVALUATE(PlantCommentLine."Created by", FORMAT(CommentLineElement.GetAttribute('createdby')));
      PlantCommentLine.INSERT;
      //DP00183.sc
    END;

    PROCEDURE GetElementText@1100525000(RefElement@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";Path@1100525001 : Text[80]) : Text[1024];
    VAR
      Element@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      Element := RefElement.SelectSingleNode(Path);
      IF NOT ISNULL(Element) THEN
        EXIT(Element.InnerText);
    END;

    PROCEDURE GetPlantOrderType@1100525011(Value@1100525000 : Text[30]) : Integer;
    VAR
      PlantOrder@1100525001 : Record 11012556;
    BEGIN
      // Make evaluation of options values independent of application language
      CASE Value OF
        'arrival': EXIT(PlantOrder.Type::Arrival);
        'removal': EXIT(PlantOrder.Type::Removal);
        'other transfers': EXIT(PlantOrder.Type::"Other Transfers");
        'negative inventory correction': EXIT(PlantOrder.Type::"Negative Inventory Correction");
      ELSE
        ERROR(Text001 + Text006, Value);
      END;
    END;

    PROCEDURE GetPlantOrderStatus@1100525002(Value@1100525000 : Text[30]) : Integer;
    VAR
      PlantOrder@1100525001 : Record 11012556;
    BEGIN
      // Make evaluation of options values independent of application language
      CASE Value OF
        'open': EXIT(PlantOrder.Status::Open);
        'printed': EXIT(PlantOrder.Status::Printed);
        'released': EXIT(PlantOrder.Status::Released);
        'posted': EXIT(PlantOrder.Status::Posted);
      ELSE
        ERROR(Text001 + Text007, Value);
      END;
    END;

    PROCEDURE GetPlantOrderTransportCost@1100525003(Value@1100525000 : Text[30]) : Integer;
    VAR
      PlantOrder@1100525001 : Record 11012556;
    BEGIN
      // Make evaluation of options values independent of application language
      CASE Value OF
        '': EXIT(PlantOrder."Transport Cost for (Advice)"::" ");
        'internal': EXIT(PlantOrder."Transport Cost for (Advice)"::Internal);
        'project': EXIT(PlantOrder."Transport Cost for (Advice)"::Project);
        'location': EXIT(PlantOrder."Transport Cost for (Advice)"::Location);
        'from location': EXIT(PlantOrder."Transport Cost for (Advice)"::"From Location");
        'to location': EXIT(PlantOrder."Transport Cost for (Advice)"::"To Location");
      ELSE
        ERROR(Text001 + Text008, Value);
      END;
    END;

    PROCEDURE GetPlantOrderLineType@1100525036(Value@1100525000 : Text[30]) : Integer;
    BEGIN
      // Make evaluation of options values independent of application language
    END;

    PROCEDURE FileExists@1100525007(FileName@1100525000 : Text) : Boolean;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(FileMgt.ClientFileExists(FileName))
      ELSE
        EXIT(EXISTS(FileName));
    END;

    BEGIN
    END.
  }
}

