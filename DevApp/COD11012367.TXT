OBJECT Codeunit 11012367 Encryption Management 4PS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetHashes@1100528200(FileName@1100528200 : Text;VAR MD5Hash@1100528205 : Text;VAR SHA1Hash@1100528204 : Text;VAR SHA256Hash@1100528203 : Text);
    VAR
      FileManagement@1100528201 : Codeunit 419;
      ServerTempFileName@1100528202 : Text;
    BEGIN
      ServerTempFileName := FileManagement.UploadFileSilent(FileName);
      MD5Hash := GetMD5(ServerTempFileName);
      SHA1Hash := GetSHA1(ServerTempFileName);
      SHA256Hash := GetSHA256(ServerTempFileName);
      ERASE(ServerTempFileName);
    END;

    LOCAL PROCEDURE GetSHA1@1100528201(FileName@1100528201 : Text) : Text;
    VAR
      SHA1CryptoServiceProvider@1100528200 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.SHA1CryptoServiceProvider";
    BEGIN
      SHA1CryptoServiceProvider := SHA1CryptoServiceProvider.SHA1CryptoServiceProvider();
      EXIT(GetHashString(FileName,SHA1CryptoServiceProvider));
    END;

    LOCAL PROCEDURE GetSHA256@1100528207(FileName@1100528200 : Text) : Text;
    VAR
      SHA256Managed@1100528203 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.SHA256Managed";
    BEGIN
      SHA256Managed := SHA256Managed.SHA256Managed();
      EXIT(GetHashString(FileName,SHA256Managed));
    END;

    LOCAL PROCEDURE GetMD5@1100528202(FileName@1100528200 : Text) : Text;
    VAR
      MD5CryptoServiceProvider@1100528201 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.MD5CryptoServiceProvider";
    BEGIN
      MD5CryptoServiceProvider := MD5CryptoServiceProvider.MD5CryptoServiceProvider();
      EXIT(GetHashString(FileName,MD5CryptoServiceProvider));
    END;

    LOCAL PROCEDURE GetHashString@1100528205(Filename@1100528200 : Text;HashAlgorithm@1100528201 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.HashAlgorithm") : Text;
    VAR
      FileStream@1100528202 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream";
      BitConverter@1100528203 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.BitConverter";
      HashString@1100528204 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ReturnHash@1100528205 : Text;
    BEGIN
      IF NOT GetFileStream(Filename,FileStream) THEN
        EXIT('');

      HashString := BitConverter.ToString(HashAlgorithm.ComputeHash(FileStream));
      ReturnHash := HashString.Replace('-','');
      FileStream.Close();
      EXIT(ReturnHash);
    END;

    LOCAL PROCEDURE GetFileStream@1100528206(Filename@1100528200 : Text;VAR ReturnFileStream@1100528201 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream") : Boolean;
    VAR
      FileMode@1100528202 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileMode";
    BEGIN
      ReturnFileStream := ReturnFileStream.FileStream(Filename,FileMode.Open);

      IF NOT ISNULL(ReturnFileStream) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

