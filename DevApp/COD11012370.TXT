OBJECT Codeunit 11012370 Sales Report Text Cond. Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11071891;
    OnRun=BEGIN
            CASE UPPERCASE("Function Name") OF
              'CONTRACTAMOUNTHASVALUE':
                ContractAmountHasValue(Rec);
              'EXTENSIONCONTRACTAMOUNTHASVALUE':
                ExtensionContractAmountHasValue(Rec);
              'TOTALCONTRACTAMOUNTHASVALUE':
                TotalContractAmountHasValue(Rec);
              'BLOCKEDAMOUNTSUBCONTRACTINGHASVALUE':
                BlockedAmountSubcontractingHasValue(Rec);
              'VATCLAUSEDESCRIPTIONSHAVEVALUE':
                VATClauseDescriptionsHaveValue(Rec);

              'ALLVALUESAREFILLED':
                AllValuesAreFilled(Rec);
              'VALUESAREFILLED':
                ValuesAreFilled(Rec);

              'INVOICECONTAINSNOPROJECTS':
                InvoiceContainsNoProjects(Rec);
              'INVOICECONTAINSONEPROJECT':
                InvoiceContainsOneProject(Rec);
              'INVOICECONTAINSSEVERALPROJECTS':
                InvoiceContainsSeveralProjects(Rec);

              'INVOICECONTAINSNOEXTENSIONCONTRACTS':
                InvoiceContainsNoExtensionContracts(Rec);
              'INVOICECONTAINSONEEXTENSIONCONTRACT':
                InvoiceContainsOneExtensionContract(Rec);
              'INVOICECONTAINSSEVERALEXTENSIONCONTRACTS':
                InvoiceContainsSeveralExtensionContracts(Rec);

              'INVOICECONTAINSNOPLOTS':
                InvoiceContainsNoPlots(Rec);
              'INVOICECONTAINSONEPLOT':
                InvoiceContainsOnePlot(Rec);
              'INVOICECONTAINSSEVERALPLOTS':
                InvoiceContainsSeveralPlots(Rec);

              'INVOICECONTAINSNOOPTIONS':
                InvoiceContainsNoOptions(Rec);
              'INVOICECONTAINSONEOPTION':
                InvoiceContainsOneOption(Rec);
              'INVOICECONTAINSSEVERALOPTIONS':
                InvoiceContainsSeveralOptions(Rec);

              'INVOICECONTAINSNOSERVICECONTRACTS':
                InvoiceContainsNoServiceContracts(Rec);
              'INVOICECONTAINSONESERVICECONTRACT':
                InvoiceContainsOneServiceContract(Rec);
              'INVOICECONTAINSSEVERALSERVICECONTRACTS':
                InvoiceContainsSeveralServiceContracts(Rec);

              'INVOICECONTAINSNOSERVICEORDERS':
                InvoiceContainsNoServiceOrders(Rec);
              'INVOICECONTAINSONESERVICEORDER':
                InvoiceContainsOneServiceOrder(Rec);
              'INVOICECONTAINSSEVERALSERVICEORDERS':
                InvoiceContainsSeveralServiceOrders(Rec);

              'INVOICECONTAINSNOPLANTLOCATIONS':
                InvoiceContainsNoPlantLocations(Rec);
              'INVOICECONTAINSONEPLANTLOCATION':
                InvoiceContainsOnePlantLocation(Rec);
              'INVOICECONTAINSSEVERALPLANTLOCATIONS':
                InvoiceContainsSeveralPlantLocations(Rec);

              'FIRSTLINEOFINVOICE':
                FirstLineOfInvoice(Rec);
              'LASTLINEOFINVOICE':
                LastLineOfInvoice(Rec);

              'FIRSTLINEOFPROJECT':
                FirstLineOfProject(Rec);
              'LASTLINEOFPROJECT':
                LastLineOfProject(Rec);

              'FIRSTLINEOFSERVICECONTRACT':
                FirstLineOfServiceContract(Rec);
              'LASTLINEOFSERVICECONTRACT':
                LastLineOfServiceContract(Rec);

              'FIRSTLINEOFPLANTLOCATION':
                FirstLineOfPlantLocation(Rec);
              'LASTLINEOFPLANTLOCATION':
                LastLineOfPlantLocation(Rec);

              'FIRSTLINEOFEXTENSIONCONTRACT':
                FirstLineOfExtensionContract(Rec);
              'LASTLINEOFEXTENSIONCONTRACT':
                LastLineOfExtensionContract(Rec);

              'FIRSTLINEOFPLOT':
                FirstLineOfPlot(Rec);
              'LASTLINEOFPLOT':
                LastLineOfPlot(Rec);

              'FIRSTLINEOFCOMMISSION':
                FirstLineOfCommission(Rec);
              'LASTLINEOFCOMMISSION':
                LastLineOfCommission(Rec);

              'FIRSTLINEOFSERVICEORDER':
                FirstLineOfServiceOrder(Rec);
              'LASTLINEOFSERVICEORDER':
                LastLineOfServiceOrder(Rec);

              'FIRSTLINEOFRENTALUNIT':
                FirstLineOfRentalUnit(Rec);
              'LASTLINEOFRENTALUNIT':
                LastLineOfRentalUnit(Rec);

              'FIRSTLINEOFOPTION':
                FirstLineOfOption(Rec);
              'LASTLINEOFOPTION':
                LastLineOfOption(Rec);

              'FIRSTLINEOFSETTLEMENTSHEET':
                FirstLineOfSettlementSheet(Rec);
              'LASTLINEOFSETTLEMENTSHEET':
                LastLineOfSettlementSheet(Rec);

              'FIRSTLINEOFOBJECT':
                FirstLineOfObject(Rec);
              'LASTLINEOFOBJECT':
                LastLineOfObject(Rec);

              'ISNAV2009INVOICE':
                IsNAV2009Invoice(Rec);
              'ISNOTNAV2009INVOICE':
                IsNotNAV2009Invoice(Rec);

              'SERVICEORDERTYPEIS':
                ServiceOrderTypeIs(Rec);
              'SERVICEORDERTYPEISNOT':
                ServiceOrderTypeIsNot(Rec);

              'SERVICECONTRACTTYPEIS':
                ServiceContractTypeIs(Rec);
              'SERVICECONTRACTTYPEISNOT':
                ServiceContractTypeIsNot(Rec);

              'PROJECTCONTAINSNOPROJECTINSTALLMENTS':
                ProjectContainsNoProjectInstallments(Rec);
              'PROJECTCONTAINSONEPROJECTINSTALLMENT':
                ProjectContainsOneProjectInstallment(Rec);
              'PROJECTCONTAINSSEVERALPROJECTINSTALLMENTS':
                ProjectContainsSeveralProjectInstallments(Rec);
            END;
          END;

  }
  CODE
  {
    VAR
      Text000@1100528400 : TextConst 'ENU=%1 can only be used for %2 %3, %4 or %5. Please change the %6';

    LOCAL PROCEDURE ContractAmountHasValue@1100525001(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetContractAmount(FALSE) > 0;
    END;

    LOCAL PROCEDURE ExtensionContractAmountHasValue@1100528200(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetExtensionContractAmount(TRUE) > 0;
    END;

    LOCAL PROCEDURE TotalContractAmountHasValue@1100528201(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := (GenericSalesHeader.GetContractAmount(FALSE) + GenericSalesHeader.GetExtensionContractAmount(TRUE))> 0;
    END;

    LOCAL PROCEDURE BlockedAmountSubcontractingHasValue@1100525005(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetBlockedAmountSubcontracting > 0;
    END;

    LOCAL PROCEDURE VATClauseDescriptionsHaveValue@1100409000(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
      StringFunctions@1100528403 : Codeunit 11012273;
      Parameters@1100528402 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      GetAllDescriptions@1100528401 : Boolean;
      Index@1100528400 : Integer;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextCondition."Function Parameters",
        SalesReportTextCondition.GetParameterSeparator,
        Parameters);
      IF ISNULL(Parameters) THEN
        GetAllDescriptions := TRUE
      ELSE
        IF Parameters.Count = 0 THEN
          GetAllDescriptions := TRUE
        ELSE
          IF EVALUATE(Index, Parameters.Item(0)) THEN;

      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result :=
        GenericSalesHeader.GetVATClauseDescriptions(GetAllDescriptions, Index) <> '';
    END;

    LOCAL PROCEDURE AllValuesAreFilled@1100528405(VAR SalesReportTextCondition@1100528400 : Record 11071891);
    VAR
      MandatoryValueNos@1100528403 : ARRAY [10] OF Integer;
      I@1100528404 : Integer;
    BEGIN
      FOR I := 1 TO 10 DO
        MandatoryValueNos[I] := I;

      MandatoryValuesAreFilled(SalesReportTextCondition, MandatoryValueNos);
    END;

    LOCAL PROCEDURE ValuesAreFilled@1100528410(VAR SalesReportTextCondition@1100528400 : Record 11071891);
    VAR
      StringFunctions@1100528402 : Codeunit 11012273;
      Parameters@1100528401 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      MandatoryValueNos@1100528403 : ARRAY [10] OF Integer;
      I@1100528404 : Integer;
      ValueNo@1100528405 : Integer;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextCondition."Function Parameters",
        SalesReportTextCondition.GetParameterSeparator,
        Parameters);
      IF ISNULL(Parameters) THEN
        EXIT;

      FOR I := 1 TO Parameters.Count DO
        IF EVALUATE(ValueNo, Parameters.Item(I - 1)) THEN
          IF I <= 10 THEN
            MandatoryValueNos[I] := ValueNo;

      MandatoryValuesAreFilled(SalesReportTextCondition, MandatoryValueNos);
    END;

    LOCAL PROCEDURE MandatoryValuesAreFilled@1100528412(VAR SalesReportTextCondition@1100528400 : Record 11071891;MandatoryValueNos@1100528403 : ARRAY [10] OF Integer);
    VAR
      StdSalesReportTextLine@1100528402 : Record 11071890;
      SalesReportTextManagement@1100528401 : Codeunit 11012369;
    BEGIN
      SalesReportTextCondition.Result := FALSE;

      IF StdSalesReportTextLine.GET(
        SalesReportTextCondition."Document Type",
        SalesReportTextCondition."Text Line Type",
        SalesReportTextCondition."Language Code",
        SalesReportTextCondition."Text Line No.")
      THEN
        IF SalesReportTextManagement.MandatoryValuesAreFilled(
          StdSalesReportTextLine, SalesReportTextCondition."Record ID",
          SalesReportTextCondition."Sequence No.", MandatoryValueNos)
        THEN
          SalesReportTextCondition.Result := TRUE;
    END;

    LOCAL PROCEDURE InvoiceContainsNoProjects@1100528402(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjects(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneProject@1100528403(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjects(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralProjects@1100528404(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjects(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfProjects@1100528409(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempJob@1100528401 : TEMPORARY Record 11072003;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Job No.", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempJob."No." := TempGenericSalesLine."Job No.";
          IF TempJob.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempJob.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoExtensionContracts@1100528407(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfExtensionContracts(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneExtensionContract@1100528406(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfExtensionContracts(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralExtensionContracts@1100528408(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfExtensionContracts(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfExtensionContracts@1100528414(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempExtensionContract@1100528401 : TEMPORARY Record 11012004;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Job No.", '<>''''');
      TempGenericSalesLine.SETFILTER("Extension Contract", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempExtensionContract."Project No." := TempGenericSalesLine."Job No.";
          TempExtensionContract."Contract No." := TempGenericSalesLine."Extension Contract";
          IF TempExtensionContract.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempExtensionContract.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoPlots@1100528439(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlots(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOnePlot@1100528438(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlots(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralPlots@1100528437(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlots(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfPlots@1100528411(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempPlot@1100528401 : TEMPORARY Record 11012500;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Plot No.", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempPlot."Project No." := TempGenericSalesLine."Job No.";
          TempPlot."Plot No." := TempGenericSalesLine."Plot No.";
          IF TempPlot.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempPlot.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoOptions@1100528442(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfOptions(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneOption@1100528441(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfOptions(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralOptions@1100528440(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfOptions(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfOptions@1100528413(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempOption@1100528401 : TEMPORARY Record 11012502;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER(Option, '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempOption."Project No." := TempGenericSalesLine."Job No.";
          TempOption."Plot No." := TempGenericSalesLine."Plot No.";
          TempOption."House Model" := TempGenericSalesLine."House Model";
          TempOption."Main Group" := TempGenericSalesLine."Main Group";
          TempOption.Group := TempGenericSalesLine.Group;
          TempOption."Sub Group" := TempGenericSalesLine."Sub Group";
          TempOption.Option := TempGenericSalesLine.Option;
          IF TempOption.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempOption.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoServiceContracts@1100528425(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceContracts(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneServiceContract@1100528424(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceContracts(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralServiceContracts@1100528423(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceContracts(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfServiceContracts@1100528422(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempServiceContract@1100528401 : TEMPORARY Record 11012812;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Service Contract No.", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempServiceContract."No." := TempGenericSalesLine."Service Contract No.";
          IF TempServiceContract.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempServiceContract.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoServiceOrders@1100528429(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceOrders(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneServiceOrder@1100528428(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceOrders(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralServiceOrders@1100528427(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceOrders(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfServiceOrders@1100528426(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempServiceOrder@1100528401 : TEMPORARY Record 11012823;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Service Order No.", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempServiceOrder."No." := TempGenericSalesLine."Service Order No.";
          IF TempServiceOrder.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempServiceOrder.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoPlantLocations@1100528433(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlantLocations(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOnePlantLocation@1100528432(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlantLocations(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralPlantLocations@1100528431(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlantLocations(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfPlantLocations@1100528430(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempPlantLocation@1100528401 : TEMPORARY Record 11012554;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Plant Location", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempPlantLocation.Code := TempGenericSalesLine."Plant Location";
          IF TempPlantLocation.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempPlantLocation.COUNT);
    END;

    LOCAL PROCEDURE FirstLineOfInvoice@1100528401(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, 0);
    END;

    LOCAL PROCEDURE LastLineOfInvoice@1100528400(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, 0);
    END;

    LOCAL PROCEDURE FirstLineOfProject@1100525002(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::Job);
    END;

    LOCAL PROCEDURE LastLineOfProject@1100525012(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::Job);
    END;

    LOCAL PROCEDURE FirstLineOfServiceContract@1100525020(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Service-Contract");
    END;

    LOCAL PROCEDURE LastLineOfServiceContract@1100525019(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Service-Contract");
    END;

    LOCAL PROCEDURE FirstLineOfPlantLocation@1100525022(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Plant Location");
    END;

    LOCAL PROCEDURE LastLineOfPlantLocation@1100525021(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Plant Location");
    END;

    LOCAL PROCEDURE FirstLineOfExtensionContract@1100525013(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Extension Contract");
    END;

    LOCAL PROCEDURE LastLineOfExtensionContract@1100525014(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Extension Contract");
    END;

    LOCAL PROCEDURE FirstLineOfPlot@1100525016(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::Plot);
    END;

    LOCAL PROCEDURE LastLineOfPlot@1100525015(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::Plot);
    END;

    LOCAL PROCEDURE FirstLineOfCommission@1100525024(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::Commission);
    END;

    LOCAL PROCEDURE LastLineOfCommission@1100525023(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::Commission);
    END;

    LOCAL PROCEDURE FirstLineOfServiceOrder@1100525009(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Service Order");
    END;

    LOCAL PROCEDURE LastLineOfServiceOrder@1100525008(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Service Order");
    END;

    LOCAL PROCEDURE FirstLineOfRentalUnit@1100525007(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Rental Unit");
    END;

    LOCAL PROCEDURE LastLineOfRentalUnit@1100525003(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Rental Unit");
    END;

    LOCAL PROCEDURE FirstLineOfOption@1100525018(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::Option);
    END;

    LOCAL PROCEDURE LastLineOfOption@1100525017(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::Option);
    END;

    LOCAL PROCEDURE FirstLineOfSettlementSheet@1100525029(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Settlement Sheet");
    END;

    LOCAL PROCEDURE LastLineOfSettlementSheet@1100525028(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Settlement Sheet");
    END;

    LOCAL PROCEDURE FirstLineOfObject@1100525031(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Service-Object");
    END;

    LOCAL PROCEDURE LastLineOfObject@1100525030(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Service-Object");
    END;

    LOCAL PROCEDURE FirstLineOfSource@1100525000(VAR SalesReportTextCondition@1100525000 : Record 11071891;TableNo@1100525007 : Integer);
    VAR
      Type@1100528401 : 'First,Last';
    BEGIN
      FirstOrLastLineOfSource(SalesReportTextCondition, TableNo, Type::First);
    END;

    LOCAL PROCEDURE LastLineOfSource@1100525051(VAR SalesReportTextCondition@1100525000 : Record 11071891;TableNo@1100525007 : Integer);
    VAR
      Type@1100528401 : 'First,Last';
    BEGIN
      FirstOrLastLineOfSource(SalesReportTextCondition, TableNo, Type::Last);
    END;

    LOCAL PROCEDURE FirstOrLastLineOfSource@1100528459(VAR SalesReportTextCondition@1100525000 : Record 11071891;TableNo@1100525007 : Integer;Type@1100528401 : 'First,Last');
    VAR
      CurrGenericSalesLine@1100525008 : Record 11071889;
      LineRecRef@1100528402 : RecordRef;
      LineNoFieldRef@1100528400 : FieldRef;
    BEGIN
      CheckIfFunctionIsUsedForLines(SalesReportTextCondition);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      InitLineRecRefForCurrentSalesDocument(CurrGenericSalesLine, LineRecRef);
      SetSourceFilterOnLineRecRef(CurrGenericSalesLine, TableNo, LineRecRef);
      LineNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Line No."));
      IF Type = Type::First THEN
        LineNoFieldRef.SETFILTER('<%1', CurrGenericSalesLine."Line No.")
      ELSE
        LineNoFieldRef.SETFILTER('>%1', CurrGenericSalesLine."Line No.");
      SalesReportTextCondition.Result := LineRecRef.ISEMPTY;
    END;

    LOCAL PROCEDURE CheckIfFunctionIsUsedForLines@1100528444(SalesReportTextCondition@1100528400 : Record 11071891);
    BEGIN
      IF (SalesReportTextCondition."Text Line Type" = SalesReportTextCondition."Text Line Type"::Header) OR
         (SalesReportTextCondition."Text Line Type" = SalesReportTextCondition."Text Line Type"::Footer)
      THEN
        SalesReportTextCondition.FIELDERROR(
          "Function Name",
          STRSUBSTNO(
            Text000,
            SalesReportTextCondition."Function Name",
            SalesReportTextCondition.FIELDCAPTION("Text Line Type"),
            SalesReportTextCondition."Text Line Type"::"Before Detail",
            SalesReportTextCondition."Text Line Type"::Detail,
            SalesReportTextCondition."Text Line Type"::"After Detail",
            SalesReportTextCondition.FIELDCAPTION("Function Name")));
    END;

    LOCAL PROCEDURE InitLineRecRefForCurrentSalesDocument@1100528443(CurrGenericSalesLine@1100528400 : Record 11071889;VAR LineRecRef@1100528401 : RecordRef);
    VAR
      SalesLine@1100528402 : Record 37;
      SalesInvoiceLine@1100528403 : Record 113;
      SalesCrMemoLine@1100528404 : Record 115;
      DocumentNoFieldRef@1100528405 : FieldRef;
    BEGIN
      CASE CurrGenericSalesLine."Document Type" OF
        CurrGenericSalesLine."Document Type"::"Pro Forma Invoice",
        CurrGenericSalesLine."Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
            LineRecRef.GETTABLE(SalesLine);
          END;
        CurrGenericSalesLine."Document Type"::"Posted Invoice":
          LineRecRef.GETTABLE(SalesInvoiceLine);
        CurrGenericSalesLine."Document Type"::"Posted Credit Memo":
          LineRecRef.GETTABLE(SalesCrMemoLine);
      END;
      DocumentNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Document No."));
      DocumentNoFieldRef.SETRANGE(CurrGenericSalesLine."Document No.");
    END;

    LOCAL PROCEDURE SetSourceFilterOnLineRecRef@1100525010(CurrGenericSalesLine@1100525000 : Record 11071889;TableNo@1100525001 : Integer;VAR LineRecRef@1100525002 : RecordRef);
    VAR
      JobNoFieldRef@1100528400 : FieldRef;
      ServiceContractNoFieldRef@1100528401 : FieldRef;
      PlantLocationFieldRef@1100528402 : FieldRef;
      ExtensionContractFieldRef@1100528403 : FieldRef;
      PlotNoFieldRef@1100528404 : FieldRef;
      CommissionNoFieldRef@1100528405 : FieldRef;
      ServiceOrderNoFieldRef@1100528406 : FieldRef;
      RentalUnitFieldRef@1100528407 : FieldRef;
      HouseModelFieldRef@1100528408 : FieldRef;
      MainGroupFieldRef@1100528409 : FieldRef;
      GroupFieldRef@1100528410 : FieldRef;
      SubGroupFieldRef@1100528411 : FieldRef;
      OptionFieldRef@1100528412 : FieldRef;
      SettlSheetNoFieldRef@1100528413 : FieldRef;
      ObjectNoFieldRef@1100528414 : FieldRef;
    BEGIN
      JobNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Job No."));
      ServiceContractNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Service Contract No."));
      PlantLocationFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Plant Location"));
      ExtensionContractFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Extension Contract"));
      PlotNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Plot No."));
      CommissionNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Commission No."));
      ServiceOrderNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Service Order No."));
      RentalUnitFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Rental Unit"));
      PlotNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Plot No."));
      HouseModelFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("House Model"));
      MainGroupFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Main Group"));
      GroupFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO(Group));
      SubGroupFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Sub Group"));
      OptionFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO(Option));
      SettlSheetNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Settl.Sheet No."));
      ObjectNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Object No."));

      CASE TableNo OF
        DATABASE::Job:
          JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
        DATABASE::"Service-Contract":
          ServiceContractNoFieldRef.SETRANGE(CurrGenericSalesLine."Service Contract No.");
        DATABASE::"Plant Location":
          PlantLocationFieldRef.SETRANGE(CurrGenericSalesLine."Plant Location");
        DATABASE::"Extension Contract":
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            ExtensionContractFieldRef.SETRANGE(CurrGenericSalesLine."Extension Contract");
          END;
        DATABASE::Plot:
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            PlotNoFieldRef.SETRANGE(CurrGenericSalesLine."Plot No.");
          END;
        DATABASE::Commission:
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            CommissionNoFieldRef.SETRANGE(CurrGenericSalesLine."Commission No.");
          END;
        DATABASE::"Service Order":
          ServiceOrderNoFieldRef.SETRANGE(CurrGenericSalesLine."Service Order No.");
        DATABASE::"Rental Unit":
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            RentalUnitFieldRef.SETRANGE(CurrGenericSalesLine."Rental Unit");
          END;
        DATABASE::Option:
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            PlotNoFieldRef.SETRANGE(CurrGenericSalesLine."Plot No.");
            HouseModelFieldRef.SETRANGE(CurrGenericSalesLine."House Model");
            MainGroupFieldRef.SETRANGE(CurrGenericSalesLine."Main Group");
            GroupFieldRef.SETRANGE(CurrGenericSalesLine.Group);
            SubGroupFieldRef.SETRANGE(CurrGenericSalesLine."Sub Group");
            OptionFieldRef.SETRANGE(CurrGenericSalesLine.Option);
          END;
        DATABASE::"Settlement Sheet":
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            CommissionNoFieldRef.SETRANGE(CurrGenericSalesLine."Commission No.");
            SettlSheetNoFieldRef.SETRANGE(CurrGenericSalesLine."Settl.Sheet No.");
          END;
        DATABASE::"Service-Object":
          ObjectNoFieldRef.SETRANGE(CurrGenericSalesLine."Object No.");
      END;
    END;

    LOCAL PROCEDURE IsNAV2009Invoice@1100528416(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100528400 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader."NAV 2009 Invoice";
    END;

    LOCAL PROCEDURE IsNotNAV2009Invoice@1100528415(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100528400 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := NOT GenericSalesHeader."NAV 2009 Invoice";
    END;

    LOCAL PROCEDURE ServiceOrderTypeIs@1100525035(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      ServiceOrder@1100525002 : Record 11012823;
      CurrGenericSalesLine@1100525001 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      IF ServiceOrder.GET(CurrGenericSalesLine."Service Order No.") THEN;

      SalesReportTextCondition.Result := ValueIsPresentInParameters(
        SalesReportTextCondition, ServiceOrder."Order Type");
    END;

    LOCAL PROCEDURE ServiceOrderTypeIsNot@1100525036(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      ServiceOrder@1100525002 : Record 11012823;
      CurrGenericSalesLine@1100525001 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      IF ServiceOrder.GET(CurrGenericSalesLine."Service Order No.") THEN;

      SalesReportTextCondition.Result := NOT ValueIsPresentInParameters(
        SalesReportTextCondition, ServiceOrder."Order Type");
    END;

    LOCAL PROCEDURE ServiceContractTypeIs@1100525025(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      ServiceContract@1100525002 : Record 11012812;
      CurrGenericSalesLine@1100525001 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      IF ServiceContract.GET(CurrGenericSalesLine."Service Contract No.") THEN;

      SalesReportTextCondition.Result := ValueIsPresentInParameters(
        SalesReportTextCondition, ServiceContract."Contract Type");
    END;

    LOCAL PROCEDURE ServiceContractTypeIsNot@1100525006(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      ServiceContract@1100525002 : Record 11012812;
      CurrGenericSalesLine@1100525001 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      IF ServiceContract.GET(CurrGenericSalesLine."Service Contract No.") THEN;

      SalesReportTextCondition.Result := NOT ValueIsPresentInParameters(
        SalesReportTextCondition, ServiceContract."Contract Type");
    END;

    LOCAL PROCEDURE ValueIsPresentInParameters@1100529200(SalesReportTextCondition@1100525001 : Record 11071891;Value@1100525000 : Text) : Boolean;
    VAR
      StringFunctions@1100525004 : Codeunit 11012273;
      Parameters@1100525003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      I@1100525002 : Integer;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextCondition."Function Parameters",
        SalesReportTextCondition.GetParameterSeparator,
        Parameters);
      IF ISNULL(Parameters) THEN
        EXIT;

      FOR I := 1 TO Parameters.Count DO
        IF UPPERCASE(Value) = UPPERCASE(Parameters.Item(I - 1)) THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE ProjectContainsNoProjectInstallments@1100529208(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjectInstallments(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE ProjectContainsOneProjectInstallment@1100529207(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjectInstallments(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE ProjectContainsSeveralProjectInstallments@1100529206(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjectInstallments(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfProjectInstallments@1100529202(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      ProjectInstallment@1100529200 : Record 11012018;
      TempProjectInstallment@1100528401 : TEMPORARY Record 11012018;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Job No.", '<>''''');
      IF TempGenericSalesLine.FINDFIRST THEN BEGIN
        ProjectInstallment.SETRANGE("Project No.",TempGenericSalesLine."Job No.");
        IF ProjectInstallment.FINDSET THEN
          REPEAT
            TempProjectInstallment."Project No." := TempGenericSalesLine."Job No.";
            TempProjectInstallment.Principal := TempGenericSalesLine."Sell-to Customer No.";
            TempProjectInstallment."Plot No." := TempGenericSalesLine."Plot No.";
            TempProjectInstallment."Installment No." := ProjectInstallment."Installment No.";
            IF TempProjectInstallment.INSERT THEN;
          UNTIL ProjectInstallment.NEXT = 0;
      END;
      EXIT(TempProjectInstallment.COUNT);
    END;

    LOCAL PROCEDURE FillTempGenericTables@1100525032(SalesReportTextCondition@1100525000 : Record 11071891;VAR GenericSalesHeader@1100525007 : Record 11071888;VAR GenericSalesLine@1100525008 : Record 11071889);
    VAR
      SalesReportTextManagement@1100525009 : Codeunit 11012369;
    BEGIN
      SalesReportTextManagement.FillTempGenericTables(
        SalesReportTextCondition."Record ID", GenericSalesHeader, GenericSalesLine);
    END;

    LOCAL PROCEDURE GetCurrGenericSalesHeader@1100525004(SalesReportTextCondition@1100525000 : Record 11071891;VAR GenericSalesHeader@1100525007 : Record 11071888);
    VAR
      SalesReportTextManagement@1100525008 : Codeunit 11012369;
    BEGIN
      SalesReportTextManagement.GetCurrGenericSalesHeader(SalesReportTextCondition."Record ID", GenericSalesHeader);
    END;

    LOCAL PROCEDURE GetCurrGenericSalesLine@1100525026(SalesReportTextCondition@1100525000 : Record 11071891;VAR GenericSalesLine@1100525007 : Record 11071889);
    VAR
      SalesReportTextManagement@1100525008 : Codeunit 11012369;
    BEGIN
      SalesReportTextManagement.GetCurrGenericSalesLine(SalesReportTextCondition."Record ID", GenericSalesLine);
    END;

    BEGIN
    END.
  }
}

