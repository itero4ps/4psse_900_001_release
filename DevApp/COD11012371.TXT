OBJECT Codeunit 11012371 Sales Report Text Value Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11071911;
    OnRun=VAR
            SalesInvoiceLine@1100525001 : Record 113;
            Item@1100525003 : Record 27;
            RecRef@1100525000 : RecordRef;
            RelatedRecRef@1100525002 : RecordRef;
          BEGIN
            CASE UPPERCASE("Function Name") OF
              'GETCONTRACTAMOUNT':
                GetContractAmount(Rec);
              'GETEXTENSIONCONTRACTAMOUNT':
                GetExtensionContractAmount(Rec);
              'GETINVOICED':
                GetInvoiced(Rec);
              'GETTOBEINVOICED':
                GetToBeInvoiced(Rec);
              'GETLABORAMOUNTSUBCONTRACTING':
                GetLaborAmountSubcontracting(Rec);
              'GETBLOCKEDAMOUNTSUBCONTRACTING':
                GetBlockedAmountSubcontracting(Rec);
              'GETRESTAMOUNTSUBCONTRACTING':
                GetRestAmountSubcontracting(Rec);
              'GETRESTAMOUNTSUBCONTRACTINGINCLCREDITRESTRICTION':
                GetRestAmountSubcontractingInclCreditRestriction(Rec);
              'GETWITHHOLDAMOUNT':
                GetWithholdAmount(Rec);
              'GETLASTINSTALLMENTAMOUNT':
                GetLastInstallmentAmount(Rec);
              'GETCURRENCYCODE':
                GetCurrencyCode(Rec);
              'GETPUBLICNOTARYBANKACCOUNTNO':
                GetPublicNotaryBankAccountNo(Rec);
              'GETTRANSLATEDPAYMENTTERMSDESCRIPTION':
                GetTranslatedPaymentTermsDescription(Rec);
              'GETTRANSLATEDSHIPMENTMETHODDESCRIPTION':
                GetTranslatedShipmentMethodDescription(Rec);
              'GETVATCLAUSEDESCRIPTIONS':
                GetVATClauseDescriptions(Rec);
              'FINDREPLACECRLFWITHBR':
                FindReplaceCrlfWithBr(Rec);
              'FINDREPLACE':
                FindReplace(Rec);
            //>>140203
              'GETINSTALLMENTAMOUNT':
                GetInstallmentAmount(Rec);
              'GETINSTALLMENTAMOUNTTOT':
                GetInstallmentAmountTot(Rec);
              'GETINSTALLMENTAMOUNTINVOICED':
                GetInstallmentAmountInvoiced(Rec);
              'GETINVOICEDCURR':
                GetInvoicedCurr(Rec);
              'GETINSTALLMENTAMOUNTNOTPOST':
                GetInstallmentAmountNotpost(Rec);
              'GETINSTALLMENTAMOUNTINVNOTPOST':
                GetInstallmentAmountInvNotPost(Rec);
              'GETSORTINGTYPE':
                GetSortingType(Rec);
              'GETROTAMOUNT':
                GetROTAmount(Rec);
              'GETROTAMOUNTTOPAY':
                GetROTAmountToPay(Rec);
              'GETOCR':
                GetOCR(Rec);
              'GETROTTXT':
                GetROTtxt(Rec);
              'GETTYPEAMOUNT':
                GetTypeAmount(Rec);
              'GETPHONENO':
                GetPhoneNo(Rec);
              'FORMATDUEDATE':
                GetFormatDueDate(Rec);
              'GETEXTENSIONAMOUNT':
                GetExtensionAmount(Rec);
              'FORMATSHIPPINGDATE':
                GetFormatShippingdate(Rec);

            //<<

            //>> 151215 ITERO.AC RFC-065 Bugfix
              'GETROTPERCENTAGE':
                GetROTPercentage(Rec);
            //<<


            END;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE GetContractAmount@1100525027(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      StringFunctions@1100528201 : Codeunit 11012273;
      Parameters@1100528200 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      Extensions@1100528202 : Boolean;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextValue."Function Parameters",
        SalesReportTextValue.GetParameterSeparator,
        Parameters);
      IF Parameters.Count = 1 THEN
        IF EVALUATE(Extensions, Parameters.Item(0)) THEN;
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetContractAmount(Extensions));
    END;

    LOCAL PROCEDURE GetExtensionContractAmount@1100528202(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      StringFunctions@1100528201 : Codeunit 11012273;
      Parameters@1100528200 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      Extensions@1100528202 : Boolean;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextValue."Function Parameters",
        SalesReportTextValue.GetParameterSeparator,
        Parameters);
      IF Parameters.Count = 1 THEN
        IF EVALUATE(Extensions, Parameters.Item(0)) THEN;
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetExtensionContractAmount(Extensions));
    END;

    LOCAL PROCEDURE GetInvoiced@1100525000(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525004 : Record 11071888;
      StringFunctions@1100528202 : Codeunit 11012273;
      Parameters@1100528201 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      Extensions@1100528200 : Boolean;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextValue."Function Parameters",
        SalesReportTextValue.GetParameterSeparator,
        Parameters);
      IF Parameters.Count = 1 THEN
        IF EVALUATE(Extensions, Parameters.Item(0)) THEN;
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInvoiced(Extensions));
    END;

    LOCAL PROCEDURE GetToBeInvoiced@1100525001(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      StringFunctions@1100528202 : Codeunit 11012273;
      Parameters@1100528201 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      Extensions@1100528200 : Boolean;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextValue."Function Parameters",
        SalesReportTextValue.GetParameterSeparator,
        Parameters);
      IF Parameters.Count = 1 THEN
        IF EVALUATE(Extensions, Parameters.Item(0)) THEN;
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetToBeInvoiced(Extensions));
    END;

    LOCAL PROCEDURE GetLaborAmountSubcontracting@1100525003(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetLaborAmountSubcontracting);
    END;

    LOCAL PROCEDURE GetBlockedAmountSubcontracting@1100525010(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetBlockedAmountSubcontracting);
    END;

    LOCAL PROCEDURE GetRestAmountSubcontracting@1100525016(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetRestAmountSubcontracting);
    END;

    LOCAL PROCEDURE GetRestAmountSubcontractingInclCreditRestriction@1100528402(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetRestAmountSubcontractingInclCreditRestriction);
    END;

    LOCAL PROCEDURE GetWithholdAmount@1100525005(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetWithholdAmount);
    END;

    LOCAL PROCEDURE GetLastInstallmentAmount@1100525008(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetLastInstallmentAmount);
    END;

    LOCAL PROCEDURE GetCurrencyCode@1100525019(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      GeneralLedgerSetup@1100525002 : Record 98;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetCurrencyCode);
    END;

    LOCAL PROCEDURE GetPublicNotaryBankAccountNo@1100525007(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      Customer@1100525002 : Record 18;
      CustomerBankAccount@1100525003 : Record 287;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetPublicNotaryBankAccountNo);
    END;

    LOCAL PROCEDURE GetTranslatedPaymentTermsDescription@1100525002(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      Customer@1100525002 : Record 18;
      CustomerBankAccount@1100525003 : Record 287;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := GenericSalesHeader.GetTranslatedPaymentTermsDescription;
    END;

    LOCAL PROCEDURE GetTranslatedShipmentMethodDescription@1100525004(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      Customer@1100525002 : Record 18;
      CustomerBankAccount@1100525003 : Record 287;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := GenericSalesHeader.GetTranslatedShipmentMethodDescription;
    END;

    LOCAL PROCEDURE GetVATClauseDescriptions@1100409000(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100409003 : Record 11071888;
      StringFunctions@1100528401 : Codeunit 11012273;
      Parameters@1100528400 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      GetAllDescriptions@1100528402 : Boolean;
      Index@1100528403 : Integer;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextValue."Function Parameters",
        SalesReportTextValue.GetParameterSeparator,
        Parameters);
      IF ISNULL(Parameters) THEN
        GetAllDescriptions := TRUE
      ELSE
        IF Parameters.Count = 0 THEN
          GetAllDescriptions := TRUE
        ELSE
          IF EVALUATE(Index, Parameters.Item(0)) THEN;

      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := COPYSTR(
        GenericSalesHeader.GetVATClauseDescriptions(GetAllDescriptions, Index),
        1, MAXSTRLEN(SalesReportTextValue.Result));
    END;

    LOCAL PROCEDURE FindReplaceCrlfWithBr@1100528401(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      StringFunctions@1100528400 : Codeunit 11012273;
      FromString@1100528402 : Text;
      ToString@1100528403 : Text;
      ResultString@1100528401 : Text;
      CommaPos@1100528404 : Integer;
    BEGIN
      ResultString := StringFunctions.ReplaceString(SalesReportTextValue.Result, CrLf, Br);
      SalesReportTextValue.Result := COPYSTR(ResultString, 1, MAXSTRLEN(SalesReportTextValue.Result));
    END;

    LOCAL PROCEDURE FindReplace@1100528400(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      StringFunctions@1100528400 : Codeunit 11012273;
      Parameters@1100528405 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      FromStrings@1100528409 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      ToStrings@1100528408 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      ResultString@1100528401 : Text;
      NoOfReplacements@1100528406 : Integer;
      I@1100528404 : Integer;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextValue."Function Parameters",
        SalesReportTextValue.GetParameterSeparator,
        Parameters);
      IF ISNULL(Parameters) THEN
        EXIT;
      IF Parameters.Count MOD 2 <> 0 THEN
        EXIT;

      NoOfReplacements := Parameters.Count DIV 2;
      FromStrings := FromStrings.ArrayList;
      ToStrings := ToStrings.ArrayList;
      FOR I := 0 TO NoOfReplacements - 1 DO BEGIN
        FromStrings.Add(GetParameterValue(Parameters, I));
        ToStrings.Add(GetParameterValue(Parameters, I + NoOfReplacements));
      END;

      ResultString := StringFunctions.ReplaceStrings(SalesReportTextValue.Result, FromStrings, ToStrings);
      SalesReportTextValue.Result := COPYSTR(ResultString, 1, MAXSTRLEN(SalesReportTextValue.Result));
    END;

    LOCAL PROCEDURE GetCurrGenericSalesHeader@1100525026(SalesReportTextValue@1100525000 : Record 11071911;VAR GenericSalesHeader@1100525007 : Record 11071888);
    VAR
      SalesReportTextManagement@1100525008 : Codeunit 11012369;
    BEGIN
      SalesReportTextManagement.GetCurrGenericSalesHeader(SalesReportTextValue."Record ID", GenericSalesHeader);
    END;

    LOCAL PROCEDURE GetParameterValue@1100528406(Parameters@1100528401 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";I@1100528400 : Integer) ParameterValue : Text;
    BEGIN
      ParameterValue := Parameters.Item(I);
      IF UPPERCASE(ParameterValue) = '<CRLF>' THEN
        ParameterValue := CrLf;
    END;

    LOCAL PROCEDURE CrLf@1100528407() CrLf : Text;
    BEGIN
      CrLf[1] := 13;
      CrLf[2] := 10;
    END;

    PROCEDURE Br@1100528424() Br : Text;
    BEGIN
      Br := '<BR>';
    END;

    PROCEDURE "***ITERO***"@1100285505();
    BEGIN
    END;

    LOCAL PROCEDURE GetInstallmentAmount@1100285500(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInstallmentAmount);
    END;

    LOCAL PROCEDURE GetInstallmentAmountTot@1100285501(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN

      //>> 140402 ITERO.SB Changed calc. of installment amount
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      IF GenericSalesHeader.GetLastInstallmentAmount<>0 THEN
        SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInstallmentAmountTot+GenericSalesHeader.GetInvoiced(TRUE))//+GenericSalesHeader.Amount)
      ELSE
        SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInstallmentAmountTot+GenericSalesHeader.GetInvoiced(TRUE)+GenericSalesHeader.Amount)
      //<<
    END;

    LOCAL PROCEDURE GetInstallmentAmountInvoiced@1100285502(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInstallmentAmountTot);
    END;

    LOCAL PROCEDURE GetInvoicedCurr@1100285503(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525004 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInvoiced(TRUE) + GenericSalesHeader.Amount);
    END;

    LOCAL PROCEDURE GetInstallmentAmountNotpost@1100285504(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      //>>140630 ITERO.SB IME-184
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      IF GenericSalesHeader.GetLastInstallmentAmount<>0 THEN
        SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInstallmentAmountTot+GenericSalesHeader.GetInvoiced(TRUE))//+GenericSalesHeader.Amount+GenericSalesHeader.GetInstallmentAmount);
      ELSE
        SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInstallmentAmountTot+GenericSalesHeader.GetInvoiced(TRUE)+GenericSalesHeader.Amount+GenericSalesHeader.GetInstallmentAmount);
      //<<
    END;

    LOCAL PROCEDURE GetInstallmentAmountInvNotPost@1100285509(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetInstallmentAmountTot+GenericSalesHeader.GetInstallmentAmount);
    END;

    PROCEDURE GetSortingType@1100285507(VAR SalesReportTextValue@1100285500 : Record 11071911);
    VAR
      GenericSalesLine@1100285501 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextValue,GenericSalesLine);
      SalesReportTextValue.Result := FORMAT(GenericSalesLine.GetSortingType);
    END;

    LOCAL PROCEDURE GetCurrGenericSalesLine@1100285508(SalesReportTextValue@1100525000 : Record 11071911;VAR GenericSalesLine@1100525007 : Record 11071889);
    VAR
      SalesReportTextManagement@1100525008 : Codeunit 11012369;
    BEGIN
      SalesReportTextManagement.GetCurrGenericSalesLine(SalesReportTextValue."Record ID", GenericSalesLine);
    END;

    LOCAL PROCEDURE GetROTAmount@1100285506(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetROT(1));
    END;

    LOCAL PROCEDURE GetROTAmountToPay@1100285510(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.AmountIncludingVAT-GenericSalesHeader.GetROT(1));
    END;

    LOCAL PROCEDURE GetOCR@1100285511(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetOCR);
    END;

    LOCAL PROCEDURE GetROTtxt@1100285512(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := GenericSalesHeader.GetROTtxt;
    END;

    PROCEDURE GetTypeAmount@1100285513(VAR SalesReportTextValue@1100285500 : Record 11071911);
    VAR
      GenericSalesLine@1100285501 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextValue,GenericSalesLine);
      SalesReportTextValue.Result := FORMAT(GenericSalesLine.GetTypeAmount);
    END;

    LOCAL PROCEDURE GetPhoneNo@1100285514(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := GenericSalesHeader.GetPhoneNo;
    END;

    LOCAL PROCEDURE GetFormatDueDate@1100285300(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader."Due Date",0,9);
    END;

    PROCEDURE GetExtensionAmount@1100409001(VAR SalesReportTextValue@1100285500 : Record 11071911);
    VAR
      GenericSalesLine@1100285501 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextValue,GenericSalesLine);
      SalesReportTextValue.Result := FORMAT(GenericSalesLine.GetExtensionAmount);
    END;

    LOCAL PROCEDURE GetFormatShippingdate@1100285100(VAR SalesReportTextValue@1100525000 : Record 11071911);
    VAR
      GenericSalesHeader@1100525001 : Record 11071888;
      LastInstallmentAmount@1100525002 : Decimal;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader."Shipment Date",0,9);
    END;

    LOCAL PROCEDURE GetROTPercentage@1100285000(VAR SalesReportTextValue@1100285000 : Record 11071911);
    VAR
      GenericSalesHeader@1100285001 : Record 11071888;
    BEGIN
      // 151215 ITERO.AC RFC-065
      GetCurrGenericSalesHeader(SalesReportTextValue, GenericSalesHeader);
      SalesReportTextValue.Result := FORMAT(GenericSalesHeader.GetROTPct(1));
    END;

    BEGIN
    {
      140203 ITERO.SB added new functions
      140303, ITERO.DL, translations
      140402 ITERO.SB Changed calc. of installment amount
      140630 ITERO.SB IME-184
      151215 ITERO.AC RFC-065 Added funtion name GETROTPERCENTAGE and new function GetROTPercentage()
    }
    END.
  }
}

