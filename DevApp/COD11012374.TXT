OBJECT Codeunit 11012374 DotNet Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetTypeMissing@1100528703(VAR Missing@1100528700 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object" RUNONCLIENT);
    VAR
      TypeInfo@1100528704 : Text;
      Type@1100528701 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type" RUNONCLIENT;
      FieldInfo@1100528703 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.FieldInfo" RUNONCLIENT;
    BEGIN
      TypeInfo := 'System.Type, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089';
      Type := Type.GetType(TypeInfo, TRUE, TRUE);
      FieldInfo := Type.GetField('Missing');
      Missing := FieldInfo.GetValue(Type);
    END;

    PROCEDURE GetApplicationLanguageID@1100528704(Application@1100528701 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel._Application" RUNONCLIENT) LanguageID : Integer;
    VAR
      MsoAppLanguageID@1100525005 : DotNet "'office, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Core.MsoAppLanguageID" RUNONCLIENT;
      CultureID@1100525006 : Integer;
    BEGIN
      // Application can be Excel, Word, Outlook, etc.
      MsoAppLanguageID := 0;
      MsoAppLanguageID := MsoAppLanguageID.Parse(MsoAppLanguageID.GetType(), 'msoLanguageIDUI');
      LanguageID := Application.LanguageSettings.LanguageID(MsoAppLanguageID);
    END;

    PROCEDURE Date2DotNetLocalDateTime@1100525002(Date2@1100525000 : Date;VAR LocalDateTime@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime");
    VAR
      DT@1100528700 : DateTime;
    BEGIN
      DT := CREATEDATETIME(Date2, 0T);
      DateTime2DotNetLocalDateTime(DT, LocalDateTime);
    END;

    PROCEDURE DateTime2DotNetLocalDateTime@1100528700(DT@1100525000 : DateTime;VAR LocalDateTime@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime");
    VAR
      UTCDateTime@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      TimeZoneInfo@1100525007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
      AdjustmentRule@1100525006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo+AdjustmentRule";
      TimeSpan@1100525005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeSpan";
      AdjustmentRules@1100525004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      i@1100525003 : Integer;
    BEGIN
      UTCDateTime := DT; // DateTime is automatically converted to UTC DateTime
      TimeZoneInfo := TimeZoneInfo.Local;
      LocalDateTime := UTCDateTime.Add(TimeZoneInfo.BaseUtcOffset);

      IF TimeZoneInfo.SupportsDaylightSavingTime AND TimeZoneInfo.IsDaylightSavingTime(UTCDateTime) THEN BEGIN
        AdjustmentRules := TimeZoneInfo.GetAdjustmentRules();
        FOR i := 0 TO AdjustmentRules.Length -1 DO BEGIN
          AdjustmentRule := AdjustmentRules.GetValue(i);
          IF (LocalDateTime.CompareTo(AdjustmentRule.DateStart) >= 0) AND
             (LocalDateTime.CompareTo(AdjustmentRule.DateEnd) <= 0) THEN
            LocalDateTime := LocalDateTime.Add(AdjustmentRule.DaylightDelta);
        END;
      END;
    END;

    PROCEDURE MsoTriState_msoCTrue@1100528705() : Integer;
    BEGIN
      // MsoTriState Enumeration
      EXIT(1);
    END;

    PROCEDURE ProcessWindowStyle_Minimized@1100528701() : Integer;
    BEGIN
      // ProcessWindowStyle Enumeration
      EXIT(2);
    END;

    BEGIN
    END.
  }
}

