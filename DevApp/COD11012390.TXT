OBJECT Codeunit 11012390 Parse CUF XML-Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Proj@1210190001 : Record 11072003;
      XMLDOMMgt@1100485001 : Codeunit 11020220;
      Text001@1100525010 : TextConst 'ENU=Cost type %1 does not match Cost Object %2';
      XMLFormat@1100525011 : Codeunit 11020221;
      AdjustmentCde@1100525007 : Code[10];
      ExtensionCde@1100525006 : Code[10];
      HouseModelCde@1100525005 : Code[20];
      MainGroupCde@1100525004 : Code[20];
      GroupCde@1100525003 : Code[20];
      SubGroupCde@1100525002 : Code[20];
      OptionCde@1100525001 : Code[20];
      ProjectCde@1100525000 : Code[20];
      PlotCde@1100525008 : Code[20];
      NewBudgetLineNo@1100525009 : Integer;
      Text013@1210190000 : TextConst 'ENU=Cost Object %1 is blocked';
      Text999@1100525012 : TextConst 'ENU=%1 %2 not present';
      SortCodeType@1100525013 : Code[50];
      CostObject@1100525014 : ARRAY [99] OF Code[20];
      TestStr@1100525015 : Text;
      FoundNode@1100525016 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";

    PROCEDURE ProcessFile@1100485001(IFileName@1100485002 : Text[1024]);
    VAR
      XMLDoc@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromClientFile(XMLDoc, IFileName, TRUE);
      ParseMessage(XMLDoc);
    END;

    PROCEDURE ParseMessage@1100485000(XMLDocIn@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      RootNode@1100485007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525000 : Integer;
    BEGIN
      RootNode := XMLDocIn.DocumentElement;

      //C026829.sn
      IF (XMLDOMMgt.FindNode(RootNode, 'SORTEERCODES', FoundNode)) THEN
        SortCodeType := XMLDOMMgt.GetAttributeValue(FoundNode,'SORTERING');
      IF (SortCodeType = '') THEN
        SortCodeType := 'BEWAKINGSCODE';
      //C026829.en

      //check if used sort codes (= coding systems) exists
      XMLDOMMgt.FindNodes(RootNode,'SORTEERCODES',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          CheckCodingSystem(LineNode);
        END;

      //process budget lines
      XMLDOMMgt.FindNodes(RootNode,'BEGROTING/BEGROTINGSREGEL',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          ProcessBEGROTINGSREGEL(LineNode);
        END;

      //process bundles
      XMLDOMMgt.FindNodes(RootNode,'BEGROTING/BUNDELING',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          ProcessBUNDELING(LineNode);
        END;
    END;

    PROCEDURE ProcessBUNDELING@1100525000(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      AttribValue@1100525000 : Text[1024];
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode2@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525004 : Integer;
    BEGIN
      AttribValue := XMLDOMMgt.GetAttributeValue(LineNode,'CODE');

      XMLDOMMgt.FindNodes(LineNode,'BEGROTINGSREGEL',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessBEGROTINGSREGEL(LineNode2);
        END;
      END;

      XMLDOMMgt.FindNodes(LineNode,'BUNDELING',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessBUNDELING(LineNode2);
        END;
      END;
    END;

    PROCEDURE ProcessBEGROTINGSREGEL@1100525001(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      BudgetLine@1100525002 : Record 11012001;
      Norm@1100525003 : Decimal;
      Rate@1100525004 : Decimal;
      MaterialPrice@1100525005 : Decimal;
      PlantPrice@1100525006 : Decimal;
      SubcontractingPrice@1100525007 : Decimal;
      SundryPrice@1100525001 : Decimal;
    BEGIN
      InitBudgetLine(BudgetLine,LineNode);

      //db.sn, 14-09-15: C025479
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'UUR_NORM'),Norm);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'UUR_TARIEF'),Rate);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'MATERIAALPRIJS'),MaterialPrice);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'MATERIEELPRIJS'),PlantPrice);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'ONDERAANNEMINGSPRIJS'),SubcontractingPrice);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'OVERIGE_KOSTEN'),SundryPrice);
      GetCostObjectPerCostType(LineNode);  //db, 30-10-15: C025479
      //db.en, 14-09-15: C025479

      //create labor budget line
      IF Norm <> 0 THEN BEGIN
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Labor;
        BudgetLine."Cost Object" := CostObject[1];  //db, 30-10-15: C025479
        FillCostObject(LineNode,BudgetLine);
        CreateBudgetLine(BudgetLine,Norm,Rate,0);
      END;

      //create material budget line
      IF MaterialPrice <> 0 THEN BEGIN
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Material;
        BudgetLine."Cost Object" := CostObject[2];  //db, 30-10-15: C025479
        FillCostObject(LineNode,BudgetLine);
        CreateBudgetLine(BudgetLine,0,0,MaterialPrice);
      END;

      //create plant budget line
      IF PlantPrice <> 0 THEN BEGIN
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Plant;
        BudgetLine."Cost Object" := CostObject[4];  //db, 30-10-15: C025479
        FillCostObject(LineNode,BudgetLine);
        CreateBudgetLine(BudgetLine,0,0,PlantPrice);
      END;

      //create subcontracting budget line
      IF SubcontractingPrice <> 0 THEN BEGIN
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Subcontracting;
        BudgetLine."Cost Object" := CostObject[3];  //db, 30-10-15: C025479
        FillCostObject(LineNode,BudgetLine);
        CreateBudgetLine(BudgetLine,0,0,SubcontractingPrice);
      END;

      //create sundry budget line
      IF SundryPrice <> 0 THEN BEGIN
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Sundry;
        BudgetLine."Cost Object" := CostObject[5];  //db, 30-10-15: C025479
        FillCostObject(LineNode,BudgetLine);
        CreateBudgetLine(BudgetLine,0,0,SundryPrice);
      END;

      //create empty budget line
      IF (Norm = 0) AND (MaterialPrice = 0) AND (SubcontractingPrice = 0) AND (PlantPrice = 0) AND (SundryPrice = 0) THEN
        CreateBudgetLine(BudgetLine,0,0,0);
    END;

    PROCEDURE CheckCodingSystem@1100525003(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CodingSystem@1100525002 : Record 11012088;
      CodingSystemCode@1100525001 : Code[10];
      CodingSystemDesc@1100525003 : Text[50];
    BEGIN
      CodingSystemCode := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'SORTERING'),1,10);
      CodingSystemDesc := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'FUNCTIE'),1,50);
      IF NOT CodingSystem.GET(CodingSystemCode) THEN
        StoreMessage(CodingSystemDesc,STRSUBSTNO(Text999,CodingSystem.FIELDCAPTION("Coding System"),CodingSystemCode));
    END;

    PROCEDURE InitBudgetLine@1100525002(VAR BudgetLine@1100525000 : Record 11012001;LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      OptionRec@1100525001 : Record 11012502;
      ProjectElement@1100525003 : Record 11012010;
      UnitRec@1100525004 : Record 204;
    BEGIN
      WITH BudgetLine DO BEGIN
        INIT;
        "Line No." := NewBudgetLineNo;
        "Project No." := ProjectCde;
        FillMainProject;
        "Extension Contract" := ExtensionCde;
        Adjustment := AdjustmentCde;
        Option := OptionCde;
        "Time Quantity" := 1;
        CLEAR("Option Line Type");
        "Department Code" := Proj."Global Dimension 1 Code";  //*31927

        GetVersionDate;
        UpdateExtContractStatus;

        IF Option <> '' THEN BEGIN
          "Extension Contract Status" := "Extension Contract Status"::Expired;
          OptionRec.SETRANGE("Project No.","Project No.");
          OptionRec.SETRANGE("Plot No.","Plot No.");
          OptionRec.SETRANGE("House Model",HouseModelCde);
          OptionRec.SETRANGE("Main Group",MainGroupCde);
          OptionRec.SETRANGE(Group,GroupCde);
          OptionRec.SETRANGE("Sub Group",SubGroupCde);
          OptionRec.SETRANGE(Option,Option);
          IF OptionRec.FINDFIRST THEN
            "Version Date" := OptionRec."Version Date";
        END;

        Element := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'CODE'),1,MAXSTRLEN(Element));
        IF NOT ProjectElement.GET(ProjectCde,Element) THEN
          Element := '';
        Description := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'OMSCHRIJVING'),1,MAXSTRLEN(Description));
        "Unit of Measure" := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode,'HOEVEELHEID_EENHEID'),1,MAXSTRLEN("Unit of Measure"));
        IF "Unit of Measure" <> '' THEN
          IF NOT UnitRec.GET("Unit of Measure") THEN
            StoreMessage(Description,STRSUBSTNO(Text999,FIELDCAPTION("Unit of Measure"),"Unit of Measure"));
        GetDefaultPurchAction;
        "Cost Type" := "Cost Type"::Sundry;
        XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode,'HOEVEELHEID'),Quantity);

      END;
    END;

    PROCEDURE FillCostObject@1100525008(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR BudgetLine@1100525000 : Record 11012001);
    VAR
      CodingSystem@1100525002 : Record 11012088;
      CodingSystemText@1100525003 : Text[1024];
      CodingSystemCode@1100525010 : Code[250];
      LineNodeList@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      Found@1100525004 : Boolean;
      DimensionValue@1100525007 : Record 349;
      DimMgt@1100525006 : Codeunit 408;
      SameType@1100525008 : Boolean;
      I@1100525009 : Integer;
    BEGIN
      IF BudgetLine."Cost Object" = '' THEN BEGIN  //db, 30-10-15: C025479
        XMLDOMMgt.FindNodes(LineNode,'SORTEERCODE',LineNodeList);
        IF NOT ISNULL(LineNodeList) THEN BEGIN
          WHILE (I < LineNodeList.Count) AND (NOT Found) DO BEGIN
            FoundNode := LineNodeList.Item(I);
            CodingSystemText := XMLDOMMgt.GetAttributeValue(FoundNode,'SORTERING');
            CodingSystemCode := CodingSystemText;
            IF CodingSystem.GET(COPYSTR(CodingSystemCode,1,MAXSTRLEN(CodingSystem."Coding System"))) THEN
              IF (CodingSystem."Cost Type" = BudgetLine."Cost Type" + 1) OR
                 //((CodingSystemCode = 'BEWAKINGSCODE') AND //call C-028508 //C026829.o
                 ((CodingSystemCode = SortCodeType) AND //C026829.n
                  (CodingSystem."Cost Type" = CodingSystem."Cost Type"::" ")) THEN //call C-028508
              BEGIN
                BudgetLine."Cost Object" := COPYSTR(XMLDOMMgt.GetAttributeValue(FoundNode,'WAARDE'),1,MAXSTRLEN(BudgetLine."Cost Object"));
                Found := TRUE;
              END;
            I := I + 1;
          END;
        END;
      END;  //db, 30-10-15: C025479

      DimMgt.GetDimValueRec(2,BudgetLine."Cost Object",DimensionValue,FALSE,'');
      CASE BudgetLine."Cost Type" OF
        BudgetLine."Cost Type"::Labor: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Labor;
        BudgetLine."Cost Type"::Material: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Material;
        BudgetLine."Cost Type"::Subcontracting: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Subcontracting;
        BudgetLine."Cost Type"::Plant: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Plant;
        BudgetLine."Cost Type"::Sundry: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Sundry;
      END;
      IF (DimensionValue.Code <> '') AND (NOT SameType) THEN
        StoreMessage(BudgetLine.Description,STRSUBSTNO(Text001,DimensionValue."Cost Type",DimensionValue.Code));
      IF (DimensionValue.Code <> '') AND DimensionValue.Blocked THEN  //C-026977
        StoreMessage(BudgetLine.Description, STRSUBSTNO(Text013,BudgetLine."Cost Object"));
      IF DimensionValue.Code = '' THEN
        StoreMessage(BudgetLine.Description,STRSUBSTNO(Text999,BudgetLine.FIELDCAPTION("Cost Object"),BudgetLine."Cost Object"));
    END;

    PROCEDURE GetCostObjectPerCostType@1100525004(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CodingSystem@1100525002 : Record 11012088;
      CodingSystemText@1100525003 : Text[1024];
      CodingSystemCode@1100525010 : Code[250];
      LineNodeList@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      DimensionValue@1100525007 : Record 349;
      DimMgt@1100525006 : Codeunit 408;
      I@1100525009 : Integer;
      BudgetLine@1100525000 : Record 11012001;
    BEGIN
      //db, 30-10-15: C025479
      CLEAR(CostObject);
      XMLDOMMgt.FindNodes(LineNode,'SORTEERCODE',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        WHILE (I < LineNodeList.Count) DO BEGIN
          FoundNode := LineNodeList.Item(I);
          CodingSystemText := XMLDOMMgt.GetAttributeValue(FoundNode,'SORTERING');
          CodingSystemCode := CodingSystemText;
          IF CodingSystem.GET(COPYSTR(CodingSystemCode,1,MAXSTRLEN(CodingSystem."Coding System"))) THEN
            IF (CodingSystem."Cost Type" <> 0) THEN //C026829.n
              CostObject[CodingSystem."Cost Type"] := COPYSTR(XMLDOMMgt.GetAttributeValue(FoundNode,'WAARDE'),1,MAXSTRLEN(BudgetLine."Cost Object"));
          I := I + 1;
        END;
      END;
    END;

    PROCEDURE CreateBudgetLine@1100525007(VAR BudgetLine@1100525000 : Record 11012001;INorm@1100525001 : Decimal;IRate@1100525002 : Decimal;IPrice@1100525003 : Decimal);
    BEGIN
      WITH BudgetLine DO BEGIN
        "Line No." := NewBudgetLineNo;
        Norm := INorm;
        Rate := IRate;
        Price := IPrice;
        Amount := 0;
        "Cost Component" := DefaultCostComponent("Cost Object","Project No.");
        FillDefaultFscType();  //DP00129
        CalcTotals;
        IF OptionCde = '' THEN BEGIN
          INSERT;
          UpdateCostControlStatus(0);  // 0=Action::Insert  //33988.n
          NewBudgetLineNo += 10000;
        END ELSE;
          AssignOptionBudget(BudgetLine);
      END;
    END;

    PROCEDURE DefaultCostComponent@1100525006(lvCostObject@1100485000 : Code[20];lvProject@1100485001 : Code[20]) lvCostComponent : Code[20];
    VAR
      lvDimValRec@1100485002 : Record 349;
      DimMgt@1100525000 : Codeunit 408;
    BEGIN
      lvCostComponent := '';
      IF lvCostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, FALSE, lvProject);
        IF NOT lvDimValRec.Blocked THEN
          lvCostComponent := lvDimValRec."Cost Component";
      END;
    END;

    PROCEDURE StoreMessage@5(lvDesc@11012000 : Text[50];lvMess@11012001 : Text[80]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Line No." := lvError;
        "Project No." := Proj."No.";
        "Error message" := lvMess;
        Description := lvDesc;
        INSERT;
      END;
    END;

    PROCEDURE AssignOptionBudget@3(BudgetLine@1100525000 : Record 11012001);
    VAR
      OptionBudget@1100525001 : Record 11012503;
      EntryNo@11012000 : Integer;
    BEGIN
      WITH OptionBudget DO BEGIN
        SETRANGE("Project No.",ProjectCde);
        IF PlotCde <> '' THEN
          SETRANGE("Plot No.",PlotCde)
        ELSE
          SETFILTER("Plot No.",'%1','');
        SETRANGE("House Model",HouseModelCde);
        SETRANGE("Main Group",MainGroupCde);
        SETRANGE(Group,GroupCde);
        SETRANGE("Sub Group",SubGroupCde);
        SETRANGE(Option,OptionCde);
        IF NOT FINDLAST THEN
          EntryNo := 10000
        ELSE
          EntryNo := "Line No." + 10000;

        INIT;
        "Project No." := BudgetLine."Project No.";
        "Plot No." := PlotCde;
        "House Model" := HouseModelCde;
        "Main Group" := MainGroupCde;
        Group := GroupCde;
        "Sub Group" := SubGroupCde;
        Option := BudgetLine.Option;
        Element := BudgetLine.Element;
        "Cost Object" := BudgetLine."Cost Object";
        "Cost Component" := BudgetLine."Cost Component";
        Description := BudgetLine.Description;
        Quantity := BudgetLine.Quantity;
        "Unit of Measure" := BudgetLine."Unit of Measure";
        Norm := BudgetLine.Norm;
        "Rate Code" := BudgetLine."Rate Code";
        Rate := BudgetLine.Rate;
        Hours := BudgetLine.Hours;
        Amount := BudgetLine.Amount;
        "Line No." := EntryNo;
        "Total Amount" := BudgetLine."Total Amount";
        "Total Hours" := BudgetLine."Total Hours";
        "Cost Type" := BudgetLine."Cost Type";
        Price := BudgetLine.Price;
        "Time Quantity" := BudgetLine."Time Quantity";
        "Unit of Time" := BudgetLine."Unit of Time";
        Chapter := BudgetLine.Chapter;
        Paragraph := BudgetLine.Paragraph;

        CheckInsertSummarySheet(FALSE);  //* Must be done before INSERT, because of test 'only when first'.
        INSERT;
      END;
    END;

    PROCEDURE InitCodeunit@1(Project1Cde@11012000 : Code[20];Adjustment1Cde@11012001 : Code[10];Extension1Cde@11012002 : Code[10];HouseModel1Cde@1210190003 : Code[20];MainGroup1Cde@1210190002 : Code[20];Group1Cde@1210190001 : Code[20];SubGroup1Cde@1210190000 : Code[20];Option1Cde@11012003 : Code[20];Plot1Cde@1100485000 : Code[20]);
    VAR
      BudgetLine@1100525000 : Record 11012001;
    BEGIN
      ProjectCde := Project1Cde;
      AdjustmentCde := Adjustment1Cde;
      ExtensionCde := Extension1Cde;
      HouseModelCde := HouseModel1Cde;
      MainGroupCde := MainGroup1Cde;
      GroupCde := Group1Cde;
      SubGroupCde := SubGroup1Cde;
      OptionCde := Option1Cde;
      PlotCde := Plot1Cde;

      IF ProjectCde <> '' THEN  //*31927.n
        Proj.GET(ProjectCde);   //*31927.n

      BudgetLine.SETRANGE("Project No.",ProjectCde);
      BudgetLine.SETRANGE("Extension Contract",ExtensionCde);
      BudgetLine.SETRANGE(Adjustment,AdjustmentCde);
      BudgetLine.SETRANGE(Option,OptionCde);
      IF BudgetLine.FINDLAST THEN
        NewBudgetLineNo := BudgetLine."Line No." + 10000;
    END;

    BEGIN
    END.
  }
}

