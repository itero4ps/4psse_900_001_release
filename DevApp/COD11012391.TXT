OBJECT Codeunit 11012391 Parse TRAD XML-Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDOMMgt@1100485001 : Codeunit 11020220;
      XMLFormat@1100525011 : Codeunit 11020221;
      DimMgt@1210190011 : Codeunit 408;
      ElementFormat@1210190039 : Codeunit 11012022;
      AdjustmentCde@1100525007 : Code[10];
      ExtensionCde@1100525006 : Code[10];
      HouseModelCde@1100525005 : Code[20];
      MainGroupCde@1100525004 : Code[20];
      GroupCde@1100525003 : Code[20];
      SubGroupCde@1100525002 : Code[20];
      OptionCde@1100525001 : Code[20];
      ProjectCde@1100525000 : Code[20];
      PlotCde@1100525008 : Code[20];
      NewBudgetLineNo@1100525009 : Integer;
      ProjSetup@1210190000 : Record 315;
      Proj@1210190010 : Record 11072003;
      ElemRec@1210190016 : Record 11012010;
      DimValRec@1210190007 : Record 349;
      AdmiRec@1210190009 : Record 11012390;
      BudgetLine@1210190017 : Record 11012001;
      TmpProjRateRec@1210190019 : TEMPORARY Record 11020231;
      AdmiGenCde@1210190005 : Code[10];
      AdmiLaborCde@1210190004 : Code[10];
      AdmiMatCde@1210190003 : Code[10];
      AdmiPlntCde@1210190002 : Code[10];
      AdmiSubCde@1210190001 : Code[10];
      MeansCde@1210190006 : Code[20];
      TenderCde@1210190008 : Code[20];
      gElementOptout@1210190013 : Boolean;
      CmtWithQuantities@1210190025 : Boolean;
      LongDescription@1210190038 : Boolean;
      RecordType@1210190014 : Code[3];
      ElementELT@1210190015 : Code[20];
      SttCde@1210190028 : Code[5];
      MidID@1210190020 : Text[30];
      MaxDescription@1210190037 : Text[1024];
      ProjElemDesc@1210190041 : Text[1024];
      ExternalLineNo@1210190022 : Integer;
      Text001@1210190027 : TextConst 'ENU=Line not coded for cost type %1';
      Text004@1210190026 : TextConst 'ENU=Cost Object %1 not present for Cost Type %2';
      Text011@1210190023 : TextConst 'ENU=Cost type %1 does not match Cost Object %2';
      Text012@1210190021 : TextConst 'ENU=No ELement present (Element is mandatory)';
      Text013@1210190012 : TextConst 'ENU=Cost Object %1 is blocked';
      Text100@1210190018 : TextConst 'ENU=External Line No. %1';
      LastProcessedExternLineNo@1210190029 : Integer;
      Counter@1210190036 : Integer;
      LastProcessedElementExtLine@1210190024 : Code[20];
      SurchPercQuan@1210190034 : Decimal;
      SurchPercLabor@1210190033 : Decimal;
      SurchPercMaterial@1210190032 : Decimal;
      SurchPercPlant@1210190031 : Decimal;
      SurchPercSubc@1210190030 : Decimal;
      Text105@1210190052 : TextConst 'ENU=Total Labor';
      Text106@1210190051 : TextConst 'ENU=Total Labor %1 does not match imported amount for labor %2';
      Text107@1210190050 : TextConst 'ENU=Total Material';
      Text108@1210190049 : TextConst 'ENU=Total material %1 does not match imported amount for material %2';
      Text109@1210190048 : TextConst 'ENU=Total Subcontracting';
      Text110@1210190047 : TextConst 'ENU=Total Subcontracting %1 does not match imported amount for subcontracting %2';
      Text111@1210190046 : TextConst 'ENU=Total Hours';
      Text112@1210190045 : TextConst 'ENU=Total Hours %1 does not match imported amount for hours %2';
      Text113@1210190044 : TextConst 'ENU=Total Budget';
      Text114@1210190043 : TextConst 'ENU=Total Amount %1 does not match imported amount  %2';
      Text115@1210190042 : TextConst 'ENU=Total Plant';
      Text116@1210190040 : TextConst 'ENU=Total Plant %1 does not match imported amount for plant %2';
      Text999@1210190053 : TextConst 'ENU=%1 %2 not present';
      SettlementQuantityCde@1100528203 : Code[20];
      FromSettlementQuantity@1100528202 : Boolean;
      SettlementQuantityRec@1100528201 : Record 11072243;
      SettlementQuantityBudgetRec@1100528200 : Record 11072244;

    PROCEDURE ProcessFile@1100485001(IFileName@1100485002 : Text[1024]);
    VAR
      XMLDoc@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromClientFile(XMLDoc, IFileName, TRUE);
      ParseMessage(XMLDoc);
    END;

    PROCEDURE ParseMessage@1100485000(XMLDocIn@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      SumSheet@1100529200 : Record 11012064;
      RootNode@1100485007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525000 : Integer;
    BEGIN
      ProjSetup.GET;
      RootNode := XMLDocIn.DocumentElement;

      // Create hour codes
      XMLDOMMgt.FindNodes(RootNode,'ulb',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          CreateRateTable(LineNode);
        END;

      // Process stu lines
      XMLDOMMgt.FindNodes(RootNode,'stu',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          ProcessSTULine(LineNode);
        END;

      // Check eindtotalen
      XMLDOMMgt.FindNodes(RootNode,'bgr',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          CheckTotals(LineNode);
        END;

      SumSheet."Project No." := ProjectCde;
      SumSheet."Contract No." := ExtensionCde;
      SumSheet."Plot No." := PlotCde;
      SumSheet."House Model" := HouseModelCde;
      SumSheet."Main Group" := MainGroupCde;
      SumSheet.Group := GroupCde;
      SumSheet."Sub Group" := SubGroupCde;
      SumSheet.Option := OptionCde;
      SumSheet."Settlement Quantity Code" := SettlementQuantityCde;
      IF OptionCde <> '' THEN BEGIN
        SumSheet.ReCalcOptionSummaryLines();
        SumSheet.UpdateOptBudgetLines();
      END ELSE BEGIN
        IF SettlementQuantityCde <> '' THEN BEGIN
          SumSheet.ReCalcSettlQuanSummaryLines();
          SumSheet.UpdateSettlQuanBudgLines();
        END ELSE BEGIN
          SumSheet.ReCalcSummaryLines(AdjustmentCde);  //Summary Adjustmen
          SumSheet.UpdateBudgetLines(TRUE,AdjustmentCde);  //Summary Adjustment
        END;
      END;

      CheckUpdateOption();
      CheckUpdateSettlQuantity();
    END;

    PROCEDURE ProcessSTULine@1210190008(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ELTElement@1210190001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      KTPElement@1210190003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      CMTElement@1210190004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      LineID@1210190002 : Code[20];
    BEGIN
      RecordType := XMLDOMMgt.FindNodeText(LineNode,'tpe');
      LineID := XMLDOMMgt.FindNodeText(LineNode, 'rglid');
      XMLFormat.EvaluateInteger(XMLDOMMgt.FindNodeText(LineNode,'rglnr'),ExternalLineNo);

      CASE RecordType OF
        'ELT':
          BEGIN
            XMLDOMMgt.FindNode(LineNode.ParentNode, STRSUBSTNO('elt[eltid="%1"]', LineID), ELTElement);
            SttCde := XMLDOMMgt.FindNodeText(ELTElement,'stt');
            //IF CheckSttCode() THEN // Geen check op STT-code, test CTB 1 juli 2011
              ProcessELTLine(ELTElement);
          END;
        'KTP':
          BEGIN
            XMLDOMMgt.FindNode(LineNode.ParentNode, STRSUBSTNO('ktp[ktpid="%1"]', LineID), KTPElement);
            ProcessKTPLine(KTPElement);
          END;
        'CMT':
          BEGIN
            XMLDOMMgt.FindNode(LineNode.ParentNode, STRSUBSTNO('cmt[cmtid="%1"]', LineID), CMTElement);
            SttCde := XMLDOMMgt.FindNodeText(CMTElement,'stt');
            IF CheckSttCode() THEN
              ProcessCMTLine(CMTElement);
          END
      END;
    END;

    PROCEDURE ProcessELTLine@1210190000(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      //SttCde := XMLDOMMgt.GetNodeValue(LineNode,'stt');
      //IF NOT CheckSttCode() THEN
      //  EXIT;

      WITH BudgetLine DO BEGIN
        InitBudgetLine(LineNode);
        LongDescription := FALSE;
        "Cost Type" := "Cost Type"::Sundry;
        MaxDescription := XMLDOMMgt.FindNodeText(LineNode,'oms');
        "Unit of Measure" := XMLDOMMgt.FindNodeText(LineNode,'enh');
        Description := COPYSTR(MaxDescription,1,MAXSTRLEN(BudgetLine.Description));
        IF Description <> '' THEN BEGIN
          CheckUnitOfMeasure(BudgetLine); //kkleermaker.n, 130905, C006131
          CreateBudgetLine(0,0,0);
        END;

        IF STRLEN(MaxDescription) > 50 THEN
          CreateLongDescriptionLines;

        LastProcessedExternLineNo := ExternalLineNo;
        LastProcessedElementExtLine := Element;
      END;
    END;

    PROCEDURE ProcessCMTLine@1210190007(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      lLevel@1210190000 : Integer;
    BEGIN
      InitBudgetLine(LineNode);
      BudgetLine."Cost Type" := BudgetLine."Cost Type"::Sundry;
      IF CmtWithQuantities THEN BEGIN
        MidID := XMLDOMMgt.FindNodeText(LineNode,'midid');
        MaxDescription := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/oms');
        BudgetLine."Unit of Measure" := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enh');
      END ELSE
        MaxDescription := XMLDOMMgt.FindNodeText(LineNode,'txt');

      BudgetLine.Description := COPYSTR(MaxDescription,1,MAXSTRLEN(BudgetLine.Description));
      CheckUnitOfMeasure(BudgetLine); //kkleermaker.n, 130905, C006131

      IF (SttCde = '') AND (ExternalLineNo = LastProcessedExternLineNo) THEN BEGIN
        BudgetLine.Element := LastProcessedElementExtLine;
        ElementFormat.FormatElemExtended(2,BudgetLine.Element,BudgetLine.Chapter,BudgetLine.Paragraph,lLevel);
      END;

      CreateBudgetLine(0,0,0);
      LastProcessedExternLineNo := ExternalLineNo;
      LastProcessedElementExtLine := BudgetLine.Element;

      IF STRLEN(MaxDescription) > 50 THEN
        CreateLongDescriptionLines;
    END;

    PROCEDURE ProcessKTPLine@1100525001(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      BudgetRate@1210190001 : Record 11012000;
      Norm@1100525003 : Decimal;
      Rate@1100525004 : Decimal;
      MaterialPrice@1100525005 : Decimal;
      PlantPrice@1100525006 : Decimal;
      SubcontractingPrice@1100525007 : Decimal;
      RateCode@1210190000 : Code[10];
    BEGIN
      SttCde := XMLDOMMgt.FindNodeText(LineNode,'stt');
      IF NOT CheckSttCode() THEN
        EXIT;

      IF RecordType = 'CMT' THEN BEGIN  // RecordType is changed because of STT
        ProcessCMTLine(LineNode);
        EXIT;
      END;

      MidID := XMLDOMMgt.FindNodeText(LineNode,'midid');

      InitBudgetLine(LineNode);

      LongDescription := FALSE;

      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/uurnrm'),Norm);
      MaxDescription := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/oms');
      IF STRLEN(MaxDescription) > 50 THEN
        LongDescription := TRUE;

      BudgetLine.Description := COPYSTR(MaxDescription,1,MAXSTRLEN(BudgetLine.Description));
      CheckUnitOfMeasure(BudgetLine); //kkleermaker.n, 130905, C006131

      //create labor budget line
      RateCode := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/ulncde');
      IF TmpProjRateRec.GET(ProjectCde,RateCode,0D) THEN //kkleermaker, 130116, T001288
        Rate := TmpProjRateRec.Rate
      ELSE
        Rate := 0;

      IF Norm <> 0 THEN BEGIN
        IF RateCode <> '' THEN BEGIN
          BudgetRate.SETRANGE(Code, RateCode);
          BudgetRate.SETRANGE("Starting Date", 0D, TODAY);
          BudgetRate.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
          IF BudgetRate.ISEMPTY THEN
            StoreMessage(BudgetLine.Description, STRSUBSTNO(Text999, BudgetLine.FIELDCAPTION("Rate Code"), RateCode));
        END;

        Rate := SurchPercLabor * Rate;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Labor;
        BudgetLine."Cost Object" := FillCostObject(BudgetLine."Cost Type");
        BudgetLine.GetDefaultPurchAction;  //**31683.n
        BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object");  //**31683.n
        BudgetLine.FillDefaultFscType();  //DP00129
        IF RateCode <> '' THEN
          BudgetLine."Rate Code" := RateCode;
        CreateBudgetLine(Norm,Rate,0);
        RateCode := '';
        BudgetLine."Rate Code" := '';
      END;

      //create material budget line
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enhprsmta'),MaterialPrice);
      IF MaterialPrice <> 0 THEN BEGIN
        MaterialPrice := SurchPercMaterial * MaterialPrice;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Material;
        BudgetLine."Cost Object" := FillCostObject(BudgetLine."Cost Type");
        BudgetLine.GetDefaultPurchAction;  //**31683.n
        BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object");  //**31683.n
        BudgetLine.FillDefaultFscType();  //DP00129
        CreateBudgetLine(0,0,MaterialPrice);
      END;

      //create plant budget line
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enhprsmte'),PlantPrice);
      IF PlantPrice <> 0 THEN BEGIN
        PlantPrice := SurchPercPlant * PlantPrice;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Plant;
        BudgetLine."Cost Object" := FillCostObject(BudgetLine."Cost Type");
        BudgetLine.GetDefaultPurchAction;  //**31683.n
        BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object");  //**31683.n
        BudgetLine.FillDefaultFscType();  //DP00129
        CreateBudgetLine(0,0,PlantPrice);
      END;

      //create subcontracting budget line
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enhprsoda'),SubcontractingPrice);
      IF SubcontractingPrice <> 0 THEN BEGIN
        SubcontractingPrice := SurchPercSubc *SubcontractingPrice;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Subcontracting;
        BudgetLine."Cost Object" := FillCostObject(BudgetLine."Cost Type");
        BudgetLine.GetDefaultPurchAction;  //**31683.n
        BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object");  //**31683.n
        BudgetLine.FillDefaultFscType();  //DP00129
        CreateBudgetLine(0,0,SubcontractingPrice);
      END;

      //create empty budget line
      IF (Norm = 0) AND (MaterialPrice = 0) AND (SubcontractingPrice = 0) AND (PlantPrice = 0) THEN
        CreateBudgetLine(0,0,0);

      LastProcessedExternLineNo := ExternalLineNo;
      LastProcessedElementExtLine := BudgetLine.Element;

      IF LongDescription THEN
        CreateLongDescriptionLines;
    END;

    PROCEDURE InitBudgetLine@1100525002(LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      OptionRec@1100525001 : Record 11012502;
      ProjectElement@1100525003 : Record 11012010;
      QuantityHVH@1210190000 : Decimal;
      QuantityMPT@1210190001 : Decimal;
    BEGIN
      WITH BudgetLine DO BEGIN
        INIT;
        "Line No." := NewBudgetLineNo;
        "Project No." := ProjectCde;
        FillMainProject;
        "Extension Contract" := ExtensionCde;
        Adjustment := AdjustmentCde;
        Option := OptionCde;
        "Settlement Quantity Code" := SettlementQuantityCde;
        "Time Quantity" := 0;
        CLEAR("Option Line Type");
        "Department Code" := Proj."Global Dimension 1 Code";  //*31927

        GetVersionDate;
        UpdateExtContractStatus;

        IF Option <> '' THEN BEGIN
          "Extension Contract Status" := "Extension Contract Status"::Expired;
          OptionRec.SETRANGE("Project No.","Project No.");
          OptionRec.SETRANGE("Plot No.","Plot No.");
          OptionRec.SETRANGE("House Model",HouseModelCde);
          OptionRec.SETRANGE("Main Group",MainGroupCde);
          OptionRec.SETRANGE(Group,GroupCde);
          OptionRec.SETRANGE("Sub Group",SubGroupCde);
          OptionRec.SETRANGE(Option,Option);
          IF OptionRec.FINDFIRST THEN
            "Version Date" := OptionRec."Version Date";
        END;

        IF "Settlement Quantity Code" <> '' THEN BEGIN
          "Extension Contract Status" := "Extension Contract Status"::Expired;
          SettlementQuantityRec.SETRANGE("Project No.","Project No.");
          SettlementQuantityRec.SETRANGE(Code, "Settlement Quantity Code");
          IF SettlementQuantityRec.FINDFIRST THEN
            "Version Date" := SettlementQuantityRec."Version Date";
        END;

        AdmiGenCde := XMLDOMMgt.FindNodeText(LineNode,'altcde');
        MeansCde   := XMLDOMMgt.FindNodeText(LineNode,'cclcde');
        TenderCde  := XMLDOMMgt.FindNodeText(LineNode,'bstcde');

        IF (RecordType = 'ELT') THEN
          ProjElemDesc := XMLDOMMgt.FindNodeText(LineNode,'oms');
        IF (RecordType = 'KTP') OR ((RecordType = 'CMT') AND CmtWithQuantities) THEN
          ProjElemDesc := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/oms');

        CASE ProjSetup."Fill Element with (TRAD)" OF
          ProjSetup."Fill Element with (TRAD)"::"Alternative Code":FillElement(AdmiGenCde);
          ProjSetup."Fill Element with (TRAD)"::"Middel Code":FillElement(MeansCde);
          ProjSetup."Fill Element with (TRAD)"::"Tender Code":FillElement(TenderCde);
        END;

        IF NOT ProjectElement.GET(ProjectCde,Element) THEN
          Element := '';

        IF (RecordType = 'KTP') OR ((RecordType = 'CMT') AND CmtWithQuantities) THEN BEGIN
          "Unit of Measure" := XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/enh');
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/facarb'),SurchPercLabor);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/facmta'),SurchPercMaterial);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/facmte'),SurchPercPlant);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'../mid[midid="' + MidID + '"]/facoda'),SurchPercSubc);

          //GetDefaultPurchAction;  //**31683.o
          //"Cost Component" := DefaultCostComponent("Cost Object","Project No.");  //**31683.o
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'fachvh'),SurchPercQuan);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'hvh'),QuantityHVH);
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'mpt'),QuantityMPT);
          Quantity := SurchPercQuan * QuantityHVH * QuantityMPT;
          XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'tij'),"Time Quantity");

          AdmiLaborCde := XMLDOMMgt.FindNodeText(LineNode,'bwcarb');
          AdmiMatCde   := XMLDOMMgt.FindNodeText(LineNode,'bwcmta');
          AdmiPlntCde  := XMLDOMMgt.FindNodeText(LineNode,'bwcmte');
          AdmiSubCde   := XMLDOMMgt.FindNodeText(LineNode,'bwcoda');
        END;
      END;
    END;

    PROCEDURE FillCostObject@1210190020(VAR CostTypeOpt@1210190000 : Option) lCostObject@1210190001 : Code[20];
    VAR
      lAdmicde@1210190002 : Code[20];
    BEGIN
      CASE ProjSetup."Fill Cost Object with (TRAD)" OF
        ProjSetup."Fill Cost Object with (TRAD)"::"Alternative Code":
          BEGIN
            lAdmicde := AdmiGenCde;
            CheckAdmiSubstituteCostObject(lAdmicde, CostTypeOpt);
            EXIT(GetCostObject(lAdmicde,CostTypeOpt));
          END;
        ProjSetup."Fill Cost Object with (TRAD)"::"Admi Code":
          BEGIN
            CASE CostTypeOpt OF
              DimValRec."Cost Type"::Labor:
                lAdmicde := AdmiLaborCde;
              DimValRec."Cost Type"::Material:
                lAdmicde := AdmiMatCde;
              DimValRec."Cost Type"::Plant:
                lAdmicde := AdmiPlntCde;
              DimValRec."Cost Type"::Subcontracting:
                lAdmicde := AdmiSubCde;
            END;
            CheckAdmiSubstituteCostObject(lAdmicde, CostTypeOpt);
            EXIT(GetCostObject(lAdmicde,CostTypeOpt));
          END;
        ProjSetup."Fill Cost Object with (TRAD)"::"Middel Code":
           EXIT(GetCostObject(MeansCde,CostTypeOpt));
        ProjSetup."Fill Cost Object with (TRAD)"::"Tender Code":
           EXIT(GetCostObject(TenderCde,CostTypeOpt));
      END;
    END;

    PROCEDURE GetCostObject@1210190001(ladmicde@1210190000 : Code[20];lCostTypeOpt@1210190001 : Option) Result@1210190002 : Code[20];
    BEGIN
      IF ladmicde = '' THEN BEGIN
        StoreMessage(BudgetLine.Description, STRSUBSTNO(Text001,BudgetLine."Cost Type"));
        EXIT('');
      END ELSE BEGIN
        DimMgt.GetDimValueRec(2, ladmicde, DimValRec, FALSE,'');
        IF DimValRec.Code <> '' THEN BEGIN
          IF DimValRec."Cost Type" = lCostTypeOpt THEN BEGIN
            IF DimValRec.Blocked THEN BEGIN  //C-026977
              StoreMessage(BudgetLine.Description, STRSUBSTNO(Text013,ladmicde));
              EXIT('');
            END;
            EXIT(ladmicde)
          END ELSE BEGIN
            StoreMessage(BudgetLine.Description, STRSUBSTNO(Text011,BudgetLine."Cost Type",ladmicde));
            EXIT('');
          END;
        END ELSE BEGIN
          StoreMessage(BudgetLine.Description, STRSUBSTNO(Text004,ladmicde,BudgetLine."Cost Type"));
          EXIT('');
        END;
      END;
    END;

    PROCEDURE CreateRateTable@1210190004(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      TmpProjRateRec.INIT;
      TmpProjRateRec."Project No." := ProjectCde;
      TmpProjRateRec."Rate Code" := XMLDOMMgt.FindNodeText(LineNode,'ulncde');
      TmpProjRateRec."Starting Date" := 0D;
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'bdr'),TmpProjRateRec.Rate);
      TmpProjRateRec.INSERT;
    END;

    PROCEDURE CreateBudgetLine@1100525007(INorm@1100525001 : Decimal;IRate@1100525002 : Decimal;IPrice@1100525003 : Decimal);
    BEGIN
      WITH BudgetLine DO BEGIN
        "Line No." := NewBudgetLineNo;
        "Line No. External Estimate" := ExternalLineNo;
        Norm := INorm;
        Rate := IRate;
        Price := IPrice;
        Amount := 0;
        IF Norm <> 0 THEN
          "Production Rate" := 1 / Norm
        ELSE
          "Production Rate" := 0;

        CalcTotals;
        IF (OptionCde = '') AND (SettlementQuantityCde = '') THEN BEGIN
          INSERT;
          UpdateCostControlStatus(0);  // 0=Action::Insert  //33988.n
          NewBudgetLineNo += 10000;
        END ELSE
          AssignOptionBudget;
      END;
    END;

    PROCEDURE CreateLongDescriptionLines@1210190005();
    BEGIN
      FOR Counter := 1 TO 20 DO BEGIN
        BudgetLine.Description := COPYSTR(MaxDescription,Counter*50 + 1,MAXSTRLEN(BudgetLine.Description));
        IF BudgetLine.Description <> '' THEN BEGIN
          BudgetLine.Quantity := 0;
          BudgetLine."Unit of Measure" := '';
          BudgetLine."Time Quantity" := 0;
          BudgetLine."Unit of Time" := '';
          CreateBudgetLine(0,0,0);
        END;
      END;
    END;

    PROCEDURE DefaultCostComponent@1100525006(lvCostObject@1100485000 : Code[20]) lvCostComponent : Code[20];
    VAR
      lvDimValRec@1100485002 : Record 349;
      DimMgt@1100525000 : Codeunit 408;
    BEGIN
      lvCostComponent := '';
      IF lvCostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, FALSE, '');
        IF NOT lvDimValRec.Blocked THEN
          lvCostComponent := lvDimValRec."Cost Component";
      END;
    END;

    PROCEDURE StoreMessage@5(lvDesc@11012000 : Text[50];lvMess@11012001 : Text[200]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Line No." := lvError;
        "Project No." := Proj."No.";
        "Error message" := lvMess;
        IF ExternalLineNo <> 0 THEN
          "Error message" := "Error message" + ' (' + STRSUBSTNO(Text100,ExternalLineNo) + ')';
        Description := lvDesc;
        INSERT;
      END;
    END;

    PROCEDURE AssignOptionBudget@3();
    VAR
      OptionBudget@1100525001 : Record 11012503;
      EntryNo@11012000 : Integer;
    BEGIN
      IF SettlementQuantityCde <> '' THEN BEGIN
        AssignSettlQuantityBudget;
        EXIT;
      END;

      WITH OptionBudget DO BEGIN
        SETRANGE("Project No.",ProjectCde);
        IF PlotCde <> '' THEN
          SETRANGE("Plot No.",PlotCde)
        ELSE
          SETFILTER("Plot No.",'%1','');
        SETRANGE("House Model",HouseModelCde);
        SETRANGE("Main Group",MainGroupCde);
        SETRANGE(Group,GroupCde);
        SETRANGE("Sub Group",SubGroupCde);
        SETRANGE(Option,OptionCde);
        IF NOT FINDLAST THEN
          EntryNo := 10000
        ELSE
          EntryNo := "Line No." + 10000;

        INIT;
        "Project No." := BudgetLine."Project No.";
        "Plot No." := PlotCde;
        "House Model" := HouseModelCde;
        "Main Group" := MainGroupCde;
        Group := GroupCde;
        "Sub Group" := SubGroupCde;
        Option := BudgetLine.Option;
        Element := BudgetLine.Element;
        "Cost Object" := BudgetLine."Cost Object";
        "Cost Component" := BudgetLine."Cost Component";
        Description := BudgetLine.Description;
        Quantity := BudgetLine.Quantity;
        "Unit of Measure" := BudgetLine."Unit of Measure";
        Norm := BudgetLine.Norm;
        "Rate Code" := BudgetLine."Rate Code";
        Rate := BudgetLine.Rate;
        Hours := BudgetLine.Hours;
        Amount := BudgetLine.Amount;
        "Line No." := EntryNo;
        "Total Amount" := BudgetLine."Total Amount";
        "Total Hours" := BudgetLine."Total Hours";
        "Cost Type" := BudgetLine."Cost Type";
        Price := BudgetLine.Price;
        "Time Quantity" := BudgetLine."Time Quantity";
        "Unit of Time" := BudgetLine."Unit of Time";
        Chapter := BudgetLine.Chapter;
        Paragraph := BudgetLine.Paragraph;

        CheckInsertSummarySheet(FALSE);  //* Must be done before INSERT, because of test 'only when first'.
        INSERT;
      END;
    END;

    PROCEDURE InitCodeunit@1(Project1Cde@11012000 : Code[20];Adjustment1Cde@11012001 : Code[10];Extension1Cde@11012002 : Code[10];HouseModel1Cde@1210190003 : Code[20];MainGroup1Cde@1210190002 : Code[20];Group1Cde@1210190001 : Code[20];SubGroup1Cde@1210190000 : Code[20];Option1Cde@11012003 : Code[20];Plot1Cde@1100485000 : Code[20];ElementOptout@1210190004 : Boolean);
    BEGIN
      ProjectCde := Project1Cde;
      AdjustmentCde := Adjustment1Cde;
      ExtensionCde := Extension1Cde;
      HouseModelCde := HouseModel1Cde;
      MainGroupCde := MainGroup1Cde;
      GroupCde := Group1Cde;
      SubGroupCde := SubGroup1Cde;
      OptionCde := Option1Cde;
      PlotCde := Plot1Cde;
      gElementOptout := ElementOptout;

      IF ProjectCde <> '' THEN  //*31927.n
        Proj.GET(ProjectCde);   //*31927.n

      BudgetLine.SETRANGE("Project No.",ProjectCde);
      BudgetLine.SETRANGE("Extension Contract",ExtensionCde);
      BudgetLine.SETRANGE(Adjustment,AdjustmentCde);
      BudgetLine.SETRANGE(Option,OptionCde);
      BudgetLine.SETRANGE("Settlement Quantity Code", SettlementQuantityCde);
      IF BudgetLine.FINDLAST THEN
        NewBudgetLineNo := BudgetLine."Line No." + 10000
      ELSE
        NewBudgetLineNo := 10000;
    END;

    PROCEDURE CheckAdmiSubstituteCostObject@1100485002(VAR VarAdmicde@1100485000 : Code[20];VAR CostTypeOpt@1100485001 : Option);
    BEGIN
      IF AdmiRec.GET(VarAdmicde) THEN BEGIN
        IF AdmiRec."Admi Related Cost Type" AND (VarAdmicde <> '') THEN BEGIN
          //* Gerelateerde kostensoort niet voor lege admincode (vinkje kan daar niet aan gezet worden)
          //* Als gerelateerde kostensoort aan staat dan is altijd maar 1 van de 5 kostendragers gevuld (bij 1 ksrt).
          IF AdmiRec."Cost Object Labor" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Labor;
            VarAdmicde := AdmiRec."Cost Object Labor";
          END;
          IF AdmiRec."Cost Object Material" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Material;
            VarAdmicde := AdmiRec."Cost Object Material";
          END;
          IF AdmiRec."Cost Object Plant" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Plant;
            VarAdmicde := AdmiRec."Cost Object Plant";
          END;
          IF AdmiRec."Cost Object Subcontracting" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Subcontracting;
            VarAdmicde := AdmiRec."Cost Object Subcontracting";
          END;
          IF AdmiRec."Cost Object Sundry" <> '' THEN BEGIN
            CostTypeOpt := DimValRec."Cost Type"::Sundry;
            VarAdmicde := AdmiRec."Cost Object Sundry";
          END;
          EXIT;
        END;

        CASE CostTypeOpt OF
          DimValRec."Cost Type"::Labor:
            IF AdmiRec."Cost Object Labor" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Labor";
          DimValRec."Cost Type"::Material:
            IF AdmiRec."Cost Object Material" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Material";
          DimValRec."Cost Type"::Plant:
            IF AdmiRec."Cost Object Plant" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Plant";
          DimValRec."Cost Type"::Subcontracting:
            IF AdmiRec."Cost Object Subcontracting" <> '' THEN
              VarAdmicde := AdmiRec."Cost Object Subcontracting";
        END;
      END;
    END;

    PROCEDURE FillElement@1210190003(lElement@1210190000 : Code[20]) : Decimal;
    VAR
      pos1@1210190001 : Integer;
      lChapterCde@1210190005 : Code[20];
      lParGraphCde@1210190006 : Code[20];
      lLevel@1210190007 : Integer;
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      IF gElementOptout THEN
        lElement := '';

      IF (lElement = '') AND (RecordType = 'KTP') AND (ElementELT <> '') THEN
        lElement := ElementELT;

      IF lElement <> '' THEN BEGIN
        pos1 := STRPOS(lElement, '.');
        IF (pos1 = 2) OR ((pos1 = 0) AND (STRLEN(lElement) = 1)) THEN
          lElement := '0' + lElement;
        ElementFormat.FormatElemExtended(2,lElement,lChapterCde,lParGraphCde,lLevel);  //db, 10-01-05
        CASE lLevel OF
          1:BEGIN
              IF NOT ElemRec.GET(ProjectCde,lChapterCde) THEN
                InsertElement(lChapterCde);
            END;
          2:BEGIN
              IF NOT ElemRec.GET(ProjectCde,lChapterCde) THEN
                InsertElement(lChapterCde);
              IF NOT ElemRec.GET(ProjectCde,lParGraphCde) THEN
                InsertElement(lParGraphCde);
            END;
          3:BEGIN
              IF NOT ElemRec.GET(ProjectCde,lChapterCde) THEN
                InsertElement(lChapterCde);
              IF NOT ElemRec.GET(ProjectCde,lParGraphCde) THEN
                InsertElement(lParGraphCde);
              IF NOT ElemRec.GET(ProjectCde,lElement) THEN
                InsertElement(lElement);
             END;
        END;
        IF RecordType = 'ELT' THEN
          ElementELT := lElement;
        BudgetLine.Element := lElement;
        BudgetLine.Chapter := lChapterCde;
        BudgetLine.Paragraph := lParGraphCde;
      END ELSE BEGIN
        IF ProjectCde <> '' THEN BEGIN                                                  //**4PS01.sn
          lvProjRec.GET(ProjectCde);
          IF lvProjRec."Posting Element Mandatory" AND (RecordType <> 'ELT') THEN       //**4PS01.en
            StoreMessage(BudgetLine.Description,Text012);
        END;
      END;
    END;

    PROCEDURE InsertElement@1210190012(lElementCde@1210190000 : Code[20]);
    BEGIN
      IF ProjectCde <> '' THEN BEGIN
        ElemRec.VALIDATE("Project No.", ProjectCde);
        ElemRec.VALIDATE(Element,lElementCde);
        ElemRec.Description := COPYSTR(ProjElemDesc, 1, MAXSTRLEN(ElemRec.Description));
        ElemRec.Quantity  := 1;
        ElemRec.INSERT;
      END;
    END;

    PROCEDURE CheckSttCode@1210190002() : Boolean;
    BEGIN
      SttCde := DELCHR(SttCde, '<>', ' ');
      CmtWithQuantities := FALSE;

      CASE RecordType OF
        'ELT':
          IF (SttCde IN ['0','3','16']) THEN
            EXIT(TRUE);
        'KTP':
          BEGIN
            IF (SttCde IN ['0','1','8','9','10','16','17','24','25','32', '33', '40', '41', '48', '49', '56', '57']) THEN
              EXIT(TRUE);
            IF (SttCde IN ['4','6', '68', '132']) THEN BEGIN
              RecordType := 'CMT';
              CmtWithQuantities := TRUE;
              EXIT(TRUE);
            END;
          END;
        'CMT':
          BEGIN
            IF (SttCde IN ['0','1','2','16','17','18']) THEN
              EXIT(TRUE);
            IF (SttCde = '') AND (ExternalLineNo = LastProcessedExternLineNo) THEN
              EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckTotals@1210190010(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      TotalHoursXML@1210190006 : Decimal;
      TotalLaborXML@1210190000 : Decimal;
      TotalMaterialXML@1210190001 : Decimal;
      TotalSubcontrXML@1210190002 : Decimal;
      TotalPlantXML@1210190003 : Decimal;
      TotalAmountXML@1210190004 : Decimal;
      ProjBudgetRec@1210190005 : Record 11012001;
      OptBudgetRec@1210190007 : Record 11012503;
    BEGIN
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'totuur'),TotalHoursXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntoarb'),TotalLaborXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntomta'),TotalMaterialXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntooda'),TotalSubcontrXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntomte'),TotalPlantXML);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'ntotot'),TotalAmountXML);

      ExternalLineNo := 0; // Because of StoreMessage
      IF (OptionCde = '') AND (SettlementQuantityCde = '') THEN BEGIN
        ProjBudgetRec.SETRANGE("Project No.",ProjectCde);
        ProjBudgetRec.SETRANGE("Adjustment Filter",AdjustmentCde);
        ProjBudgetRec.SETRANGE("Extension Filter",ExtensionCde);
        ProjBudgetRec.SETRANGE("Option Filter",OptionCde);
        IF ProjBudgetRec.FINDFIRST THEN BEGIN
          ProjBudgetRec.CALCFIELDS("Total Labor","Total material","Total Subcontracting","Total Plant",
            "Total Hours","Total Amount");

          IF ROUND(ABS(ProjBudgetRec."Total Labor" - TotalLaborXML), 1) > 0 THEN
            StoreMessage(Text105,STRSUBSTNO(Text106,TotalLaborXML,ProjBudgetRec."Total Labor"));
          IF ROUND(ABS(ProjBudgetRec."Total material" - TotalMaterialXML), 1) > 0 THEN
            StoreMessage(Text107,STRSUBSTNO(Text108,TotalMaterialXML,ProjBudgetRec."Total material"));
          IF ROUND(ABS(ProjBudgetRec."Total Subcontracting" - TotalSubcontrXML), 1) > 0 THEN
            StoreMessage(Text109,STRSUBSTNO(Text110,TotalSubcontrXML,ProjBudgetRec."Total Subcontracting"));
          IF ROUND(ABS(ProjBudgetRec."Total Plant" - TotalPlantXML), 1) > 0 THEN
            StoreMessage(Text115,STRSUBSTNO(Text116,TotalPlantXML,ProjBudgetRec."Total Plant"));
          IF ROUND(ABS(ProjBudgetRec."Total Hours" - TotalHoursXML), 1) > 0 THEN
            StoreMessage(Text111,STRSUBSTNO(Text112,TotalHoursXML,ProjBudgetRec."Total Hours"));
          IF ROUND(ABS(ProjBudgetRec."Total Amount" - TotalAmountXML), 1) > 0 THEN
            StoreMessage(Text113,STRSUBSTNO(Text114,TotalAmountXML,ProjBudgetRec."Total Amount"));
        END;
      END; // ELSE BEGIN

      IF OptionCde <> '' THEN BEGIN
        OptBudgetRec.SETRANGE("Project No.",ProjectCde);
        IF PlotCde <> '' THEN
          OptBudgetRec.SETRANGE("Plot No.",PlotCde)
        ELSE
          OptBudgetRec.SETFILTER("Plot No.",'%1','');
        OptBudgetRec.SETRANGE("House Model",HouseModelCde);
        OptBudgetRec.SETRANGE("Main Group",MainGroupCde);
        OptBudgetRec.SETRANGE(Group,GroupCde);
        OptBudgetRec.SETRANGE("Sub Group",SubGroupCde);
        OptBudgetRec.SETRANGE(Option,OptionCde);
        IF OptBudgetRec.FINDSET(FALSE, FALSE) THEN BEGIN
          OptBudgetRec.CALCFIELDS("Total Labor","Total Material","Total Subcontracting","Total Plant",
            "Total Hours","Total Amount");

          IF ROUND(ABS(OptBudgetRec."Total Labor" - TotalLaborXML), 1) > 0 THEN
            StoreMessage(Text105,STRSUBSTNO(Text106,TotalLaborXML,OptBudgetRec."Total Labor"));
          IF ROUND(ABS(OptBudgetRec."Total Material" - TotalMaterialXML), 1) > 0 THEN
            StoreMessage(Text107,STRSUBSTNO(Text108,TotalMaterialXML,OptBudgetRec."Total Material"));
          IF ROUND(ABS(OptBudgetRec."Total Subcontracting" - TotalSubcontrXML), 1) > 0 THEN
            StoreMessage(Text109,STRSUBSTNO(Text110,TotalSubcontrXML,OptBudgetRec."Total Subcontracting"));
          IF ROUND(ABS(OptBudgetRec."Total Plant" - TotalPlantXML), 1) > 0 THEN
            StoreMessage(Text115,STRSUBSTNO(Text116,TotalPlantXML,OptBudgetRec."Total Plant"));
          IF ROUND(ABS(OptBudgetRec."Total Hours" - TotalHoursXML), 1) > 0 THEN
            StoreMessage(Text111,STRSUBSTNO(Text112,TotalHoursXML,OptBudgetRec."Total Hours"));
          IF ROUND(ABS(OptBudgetRec."Total Amount" - TotalAmountXML), 1) > 0 THEN
            StoreMessage(Text113,STRSUBSTNO(Text114,TotalAmountXML,OptBudgetRec."Total Amount"));
        END;
      END;

      IF SettlementQuantityCde <> '' THEN BEGIN
        SettlementQuantityBudgetRec.SETRANGE("Project No.",ProjectCde);
        SettlementQuantityBudgetRec.SETRANGE("Settlement Quantity Code",SettlementQuantityCde);
        IF SettlementQuantityBudgetRec.FINDSET(FALSE, FALSE) THEN BEGIN
          SettlementQuantityBudgetRec.CALCFIELDS("Total Labor","Total Material","Total Subcontracting","Total Plant",
            "Total Hours","Total Amount");

          IF ROUND(ABS(SettlementQuantityBudgetRec."Total Labor" - TotalLaborXML), 1) > 0 THEN
            StoreMessage(Text105,STRSUBSTNO(Text106,TotalLaborXML,SettlementQuantityBudgetRec."Total Labor"));
          IF ROUND(ABS(SettlementQuantityBudgetRec."Total Material" - TotalMaterialXML), 1) > 0 THEN
            StoreMessage(Text107,STRSUBSTNO(Text108,TotalMaterialXML,SettlementQuantityBudgetRec."Total Material"));
          IF ROUND(ABS(SettlementQuantityBudgetRec."Total Subcontracting" - TotalSubcontrXML), 1) > 0 THEN
            StoreMessage(Text109,STRSUBSTNO(Text110,TotalSubcontrXML,SettlementQuantityBudgetRec."Total Subcontracting"));
          IF ROUND(ABS(SettlementQuantityBudgetRec."Total Plant" - TotalPlantXML), 1) > 0 THEN
            StoreMessage(Text115,STRSUBSTNO(Text116,TotalPlantXML,SettlementQuantityBudgetRec."Total Plant"));
          IF ROUND(ABS(SettlementQuantityBudgetRec."Total Hours" - TotalHoursXML), 1) > 0 THEN
            StoreMessage(Text111,STRSUBSTNO(Text112,TotalHoursXML,SettlementQuantityBudgetRec."Total Hours"));
          IF ROUND(ABS(SettlementQuantityBudgetRec."Total Amount" - TotalAmountXML), 1) > 0 THEN
            StoreMessage(Text113,STRSUBSTNO(Text114,TotalAmountXML,SettlementQuantityBudgetRec."Total Amount"));
        END;
      END;
    END;

    LOCAL PROCEDURE CheckUnitOfMeasure@1100528400(BudgetLine@1100528403 : Record 11012001);
    VAR
      UnitOfMeasure@1100528400 : Record 204;
    BEGIN
      IF BudgetLine."Unit of Measure" <> '' THEN
        IF NOT UnitOfMeasure.GET(BudgetLine."Unit of Measure") THEN
          StoreMessage(
            BudgetLine.Description,
            STRSUBSTNO(Text999, BudgetLine.FIELDCAPTION("Unit of Measure"), BudgetLine."Unit of Measure"));
    END;

    PROCEDURE SetDefaultsSettlQuantity@1100528203(ISettlementQuantityCde@11012000 : Code[20]);
    BEGIN
      FromSettlementQuantity := TRUE;
      SettlementQuantityCde := ISettlementQuantityCde;
    END;

    PROCEDURE AssignSettlQuantityBudget@1100528205();
    VAR
      LastLino@11012000 : Integer;
    BEGIN

      SettlementQuantityBudgetRec.SETRANGE("Project No.",ProjectCde);
      SettlementQuantityBudgetRec.SETRANGE("Settlement Quantity Code", SettlementQuantityCde);
      IF NOT SettlementQuantityBudgetRec.FINDLAST THEN
        LastLino := 10000
      ELSE
        LastLino := SettlementQuantityBudgetRec."Line No." + 10000;

      SettlementQuantityBudgetRec.INIT;
      SettlementQuantityBudgetRec."Project No." := BudgetLine."Project No.";
      SettlementQuantityBudgetRec."Settlement Quantity Code":= BudgetLine."Settlement Quantity Code";
      SettlementQuantityBudgetRec."Line No." := LastLino;
      SettlementQuantityBudgetRec.Element := BudgetLine.Element;
      SettlementQuantityBudgetRec."Cost Type" := BudgetLine."Cost Type";
      SettlementQuantityBudgetRec."Cost Object" := BudgetLine."Cost Object";
      SettlementQuantityBudgetRec.Description := BudgetLine.Description;
      SettlementQuantityBudgetRec."Cost Component" := BudgetLine."Cost Component";
      SettlementQuantityBudgetRec.Quantity := BudgetLine.Quantity;
      SettlementQuantityBudgetRec."Unit of Measure" := BudgetLine."Unit of Measure";
      SettlementQuantityBudgetRec.Norm := BudgetLine.Norm;
      SettlementQuantityBudgetRec."Rate Code" := BudgetLine."Rate Code";
      SettlementQuantityBudgetRec.Rate := BudgetLine.Rate;
      SettlementQuantityBudgetRec.Hours := BudgetLine.Hours;
      SettlementQuantityBudgetRec.Amount := BudgetLine.Amount;
      SettlementQuantityBudgetRec."Total Amount" := BudgetLine."Total Amount";
      SettlementQuantityBudgetRec."Total Hours" := BudgetLine."Total Hours";
      SettlementQuantityBudgetRec.Price := BudgetLine.Price;
      SettlementQuantityBudgetRec."Time Quantity" := BudgetLine."Time Quantity";
      SettlementQuantityBudgetRec."Unit of Time" := BudgetLine."Unit of Time";
      SettlementQuantityBudgetRec.Chapter := BudgetLine.Chapter;
      SettlementQuantityBudgetRec.Paragraph := BudgetLine.Paragraph;

      SettlementQuantityBudgetRec.CheckInsertSummarySheet(FALSE);  //* Must be done before INSERT, because of test 'only when first'.
      SettlementQuantityBudgetRec.INSERT;
    END;

    PROCEDURE CheckUpdateOption@1100528201();
    VAR
      lvDummyOptionSurchRec@1100485001 : Record 11012512;
      lvBuyerMgtCU@1100485000 : Codeunit 11012500;
    BEGIN
      IF OptionCde = '' THEN
        EXIT;

      lvBuyerMgtCU.BmCalcSurchargesUpdateOption(
        ProjectCde, PlotCde, HouseModelCde, MainGroupCde, GroupCde, SubGroupCde, OptionCde, FALSE, lvDummyOptionSurchRec);
    END;

    PROCEDURE CheckUpdateSettlQuantity@1100528200();
    VAR
      lvDummySettlementQuantitySurcharge@1100485001 : Record 11072247;
      lvSettlementQuantityManagement@1100485000 : Codeunit 11071690;
    BEGIN
      IF SettlementQuantityCde = '' THEN
        EXIT;

      lvSettlementQuantityManagement.MMRCalcSurchargesUpdateSettlQuan(
        ProjectCde, SettlementQuantityCde, '',FALSE,lvDummySettlementQuantitySurcharge)  //TODO HOUSEMODEL
    END;

    BEGIN
    END.
  }
}

