OBJECT Codeunit 11012392 Parse KPD-GWW XML-Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GWWSetup@1100409021 : Record 11012260;
      ProjRec@1210190001 : Record 11072003;
      ProjCustRec@1100409017 : Record 11012005;
      ProjElemRec@1100409005 : Record 11012010;
      UnitRec@1100409014 : Record 204;
      SpecialUnitRec@1100409015 : Record 11012392;
      XMLDOMMgt@1100485001 : Codeunit 11020220;
      XMLFormat@1100525011 : Codeunit 11020221;
      AdjustmentCde@1100525007 : Code[10];
      ExtensionCde@1100525006 : Code[10];
      HouseModelCde@1100525005 : Code[20];
      MainGroupCde@1100525004 : Code[20];
      GroupCde@1100525003 : Code[20];
      SubGroupCde@1100525002 : Code[20];
      OptionCde@1100525001 : Code[20];
      ProjectCde@1100525000 : Code[20];
      PlotCde@1100525008 : Code[20];
      NewBudgetLineNo@1100525009 : Integer;
      Text013@1210190000 : TextConst 'ENU=Cost Object %1 is blocked';
      Text999@1100525012 : TextConst 'ENU=%1 %2 not present';
      iDescription@1100409000 : Text[1024];
      iText@1100409006 : Text[1024];
      iQuantity@1100409001 : Decimal;
      iUnit@1100409002 : Text[30];
      iTenderPrice@1100409020 : Decimal;
      iBudgetAmount@1100409022 : Decimal;
      iSettlementType@1100409018 : Text[30];
      iVatType@1100409019 : Text[30];
      iTenderElement@1100409003 : Text[30];
      iTenderPart@1100409004 : Text[30];
      iProductType@1100409013 : Text[30];
      iCostTypeCode@1100409007 : Text[30];
      iCostTypeDesc@1100409008 : Text[30];
      CostTypeLabor@1100409009 : Text[1024];
      CostTypeMaterial@1100409010 : Text[1024];
      CostTypeSubcontracting@1100409011 : Text[1024];
      CostTypePlant@1100409012 : Text[1024];
      DisableQuantity@1100409016 : Boolean;
      FillElementWith@1100525014 : 'Sort Code,Tender Code';
      FillCostObjectWith@1100525013 : 'Code,Sort Code';
      DeriveCostTypeFrom@1100525015 : 'CostTypeKPD,CostObjectNav';
      DimValRec@1100525016 : Record 349;
      DimMgt@1100525017 : Codeunit 408;
      DisableTimeQuantity@1100525010 : Boolean;

    PROCEDURE ProcessFile@1100485001(IFileName@1100485002 : Text[1024]);
    VAR
      XMLDoc@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromClientFile(XMLDoc, IFileName, TRUE);
      ParseMessage(XMLDoc)
    END;

    PROCEDURE ParseMessage@1100485000(XMLDocIn@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      RootNode@1100485007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525000 : Integer;
    BEGIN
      RootNode := XMLDocIn.DocumentElement;

      XMLDOMMgt.FindNodes(RootNode,'Kostensoorten',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          iCostTypeCode := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Code'),1,MAXSTRLEN(iCostTypeCode));
          iCostTypeDesc := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Kosten.Type'),1,MAXSTRLEN(iCostTypeDesc));;
          CASE iCostTypeDesc OF
            'Arbeid':
              IF CostTypeLabor = '' THEN
                CostTypeLabor := iCostTypeCode
              ELSE
                CostTypeLabor := CostTypeLabor + '|' + iCostTypeCode;
            'Materiaal':
              IF CostTypeMaterial = '' THEN
                CostTypeMaterial := iCostTypeCode
              ELSE
                CostTypeMaterial := CostTypeMaterial + '|' + iCostTypeCode;
            'Onderaanneming':
              IF CostTypeSubcontracting = '' THEN
                CostTypeSubcontracting := iCostTypeCode
              ELSE
                CostTypeSubcontracting := CostTypeSubcontracting + '|' + iCostTypeCode;
            'Materieel':
              IF CostTypePlant = '' THEN
                CostTypePlant := iCostTypeCode
              ELSE
                CostTypePlant := CostTypePlant + '|' + iCostTypeCode;
          END;
        END;

      XMLDOMMgt.FindNodes(RootNode,'Bestekposten',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          ProcessBestekpost(LineNode);
        END;
    END;

    PROCEDURE ProcessBestekpost@1100525000(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode2@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BudgetLine@1100409000 : Record 11012001;
      I@1100525000 : Integer;
    BEGIN
      iTenderElement := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Code'),1,MAXSTRLEN(iTenderElement));
      iTenderPart := '';
      iDescription := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Romptekst'),1,MAXSTRLEN(iDescription));
      iText := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Omschrijving'),1,MAXSTRLEN(iText));
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Hoeveelheid'),iQuantity);
      iUnit := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Eenheid'),1,MAXSTRLEN(iUnit));
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Inschrijfprijs'),iTenderPrice);
      iSettlementType := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Aard'),1,MAXSTRLEN(iSettlementType));
      iVatType := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Btw.Soort'),1,MAXSTRLEN(iVatType));
      XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Kosten'),iBudgetAmount);

      InsertTenderElement;
      IF (iText <> iDescription) AND (iText <> '') THEN
        InsertTenderText;

      IF (iUnit = 'EUR') AND (iBudgetAmount <> 0) THEN BEGIN
        DisableQuantity := FALSE;
        InitBudgetLine(BudgetLine,LineNode);
        BudgetLine.Description := iDescription;
        //BudgetLine.Quantity := iQuantity;    //commercial price
        BudgetLine.Quantity := iBudgetAmount;  //cost price
        BudgetLine."Unit of Measure" := iUnit;
        BudgetLine.Price := 1;
        BudgetLine."Cost Type" := BudgetLine."Cost Type"::Sundry;
        BudgetLine."Tender Paragraph" := iTenderElement;
        CreateBudgetLine(BudgetLine);
        DisableQuantity := TRUE;
      END ELSE BEGIN
        DisableQuantity := FALSE;
      END;

      XMLDOMMgt.FindNodes(LineNode,'Bestekposten',LineNodeList);  //geneste structuur bestekposten
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessBestekpost(LineNode2);
        END;

      XMLDOMMgt.FindNodes(LineNode,'Deelposten',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessDeelpost(LineNode2);
        END;
    END;

    PROCEDURE ProcessDeelpost@1100409006(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode2@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525000 : Integer;
    BEGIN
      iTenderPart := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Code'),1,MAXSTRLEN(iTenderPart));
      iDescription := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Omschrijving'),1,MAXSTRLEN(iDescription));
      InsertTenderPart;

      XMLDOMMgt.FindNodes(LineNode,'Deelposten',LineNodeList);  //geneste structuur deelposten
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessDeelpost(LineNode2);
        END;

      XMLDOMMgt.FindNodes(LineNode,'Tarieven',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessLine(LineNode2);
        END;
    END;

    PROCEDURE ProcessLine@1100525001(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      BudgetLine@1100525002 : Record 11012001;
      Norm@1100525003 : Decimal;
      Rate@1100525004 : Decimal;
      Price@1100525005 : Decimal;
      CostObject@1100525001 : Code[20];
      LineNodeList@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode2@1100525006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525008 : Integer;
    BEGIN
      //db.sn, 18-04-13
      IF FillCostObjectWith = FillCostObjectWith::Code THEN
        CostObject := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Code'),1,MAXSTRLEN(BudgetLine."Cost Object"));
      IF FillCostObjectWith = FillCostObjectWith::"Sort Code" THEN
        CostObject := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Sorteercode'),1,MAXSTRLEN(BudgetLine."Cost Object"));
      //db.en, 18-04-13

      IF CostObject <> '' THEN BEGIN  //db, 18-04-13
        InitBudgetLine(BudgetLine,LineNode);
        WITH BudgetLine DO BEGIN
          Description := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Omschrijving'),1,MAXSTRLEN(Description));
          "Unit of Measure" := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Eenheid'),1,MAXSTRLEN("Unit of Measure"));
          CheckUnitOfMeasure(BudgetLine);

          "Cost Object" := CostObject;  //db, 18-04-13
          CheckCostObject(BudgetLine);

          iCostTypeCode := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Code'),1,2);
          IF CodeInFilter(iCostTypeCode, CostTypeLabor) THEN
            "Cost Type" := "Cost Type"::Labor
          ELSE
            IF CodeInFilter(iCostTypeCode, CostTypeMaterial) THEN
              "Cost Type" := "Cost Type"::Material
            ELSE
              IF CodeInFilter(iCostTypeCode, CostTypeSubcontracting) THEN
                "Cost Type" := "Cost Type"::Subcontracting
              ELSE
                IF CodeInFilter(iCostTypeCode, CostTypePlant) THEN
                  "Cost Type" := "Cost Type"::Plant
                ELSE
                  "Cost Type" := "Cost Type"::Sundry;

          IF DeriveCostTypeFrom = DeriveCostTypeFrom::CostObjectNav THEN BEGIN //db, 26-04-13: T002742
            IF DimValRec.Code = '' THEN
              "Cost Type" := "Cost Type"::Sundry  //unknown Cost Object
            ELSE
              "Cost Type":= DimValRec."Cost Type";
          END;

          IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
            XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Hoeveelheid'),Hours);
            iProductType := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Productie.Type'),1,MAXSTRLEN(iProductType));
            IF iProductType = 'Productie' THEN BEGIN
              XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Productie.Inclusief'),"Production Rate");
              IF "Production Rate" <> 0 THEN
                Norm := 1 / "Production Rate"
              ELSE
                Norm := 1;
            END ELSE BEGIN
              XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Productie.Inclusief'),Norm);
              IF Norm <> 0 THEN
                "Production Rate" := 1 / Norm
              ELSE
                "Production Rate" := 0;
            END;
            IF SpecialUnitRec.GET("Unit of Measure") THEN BEGIN  //C-025698: So Quantity is equal to Hours
              "Production Rate" := 1;
              Norm := 1;
            END;
            Norm := ROUND(Norm, 0.00001);
            Quantity := ROUND(Hours * "Production Rate", 0.00001);
            XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Kostprijs.Inclusief'),Rate);
          END ELSE BEGIN
            XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Hoeveelheid'),Quantity);
            XMLFormat.EvaluateDecimal(XMLDOMMgt.FindNodeText(LineNode,'Kostprijs.Inclusief'),Price);
          END;

          IF DisableQuantity THEN BEGIN
            "Time Quantity" := 0;
            Quantity := 0;
          END;
          IF DisableTimeQuantity THEN  //C028776
            "Time Quantity" := 0;

          "Tender Paragraph" := iTenderElement;
          "Tender Paragraph Part" := iTenderPart;

          //db: Sortereercode wordt gebruikt voor element (zie dataport 11012392)
          IF FillElementWith = FillElementWith::"Sort Code" THEN  //db, 18-04-13
            Element := COPYSTR(XMLDOMMgt.FindNodeText(LineNode,'Sorteercode'),1,MAXSTRLEN(Element));
          IF FillElementWith = FillElementWith::"Tender Code" THEN  //db, 18-04-13
            Element := iTenderElement;

          IF Element <> '' THEN BEGIN
            FillElement(Element);
            Chapter := ProjElemRec.Chapter;
            Paragraph := ProjElemRec.Paragraph;
          END;
          GetDefaultPurchAction;
        END;
        CreateBudgetLine(BudgetLine);
      END;

      //db.sn, 18-04-13
      XMLDOMMgt.FindNodes(LineNode,'Tarieven',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          DisableTimeQuantity := TRUE;  //C028776
          ProcessLine(LineNode2);
          DisableTimeQuantity := FALSE;  //C028776
        END;
      END;
      //db.en, 18-04-13
    END;

    PROCEDURE InitCodeunit@1(Project1Cde@11012000 : Code[20];Adjustment1Cde@11012001 : Code[10];Extension1Cde@11012002 : Code[10];HouseModel1Cde@1210190003 : Code[20];MainGroup1Cde@1210190002 : Code[20];Group1Cde@1210190001 : Code[20];SubGroup1Cde@1210190000 : Code[20];Option1Cde@11012003 : Code[20];Plot1Cde@1100485000 : Code[20];iFillElementWith@1100525002 : Option;iFillCostObjectWith@1100525001 : Option;iDeriveCostTypeFrom@1100525003 : 'CostTypeKPD,CostObjectNav');
    VAR
      BudgetLine@1100525000 : Record 11012001;
    BEGIN
      ProjectCde := Project1Cde;
      AdjustmentCde := Adjustment1Cde;
      ExtensionCde := Extension1Cde;
      HouseModelCde := HouseModel1Cde;
      MainGroupCde := MainGroup1Cde;
      GroupCde := Group1Cde;
      SubGroupCde := SubGroup1Cde;
      OptionCde := Option1Cde;
      PlotCde := Plot1Cde;

      //db.en, 18-04-13
      FillElementWith := iFillElementWith;
      FillCostObjectWith := iFillCostObjectWith;
      DeriveCostTypeFrom := iDeriveCostTypeFrom;
      //db.sn, 18-04-13

      IF ProjectCde <> '' THEN
        ProjRec.GET(ProjectCde);

      BudgetLine.SETRANGE("Project No.",ProjectCde);
      BudgetLine.SETRANGE("Extension Contract",ExtensionCde);
      BudgetLine.SETRANGE(Adjustment,AdjustmentCde);
      BudgetLine.SETRANGE(Option,OptionCde);
      IF BudgetLine.FINDLAST THEN
        NewBudgetLineNo := BudgetLine."Line No." + 10000;
    END;

    PROCEDURE InitBudgetLine@1100525002(VAR BudgetLine@1100525000 : Record 11012001;LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      OptionRec@1100525001 : Record 11012502;
    BEGIN
      WITH BudgetLine DO BEGIN
        INIT;
        "Line No." := NewBudgetLineNo;
        "Project No." := ProjectCde;
        FillMainProject;
        "Extension Contract" := ExtensionCde;
        Adjustment := AdjustmentCde;
        Option := OptionCde;
        "Time Quantity" := 1;
        CLEAR("Option Line Type");
        "Department Code" := ProjRec."Global Dimension 1 Code";

        GetVersionDate;
        UpdateExtContractStatus;

        IF Option <> '' THEN BEGIN
          "Extension Contract Status" := "Extension Contract Status"::Expired;
          OptionRec.SETRANGE("Project No.","Project No.");
          OptionRec.SETRANGE("Plot No.","Plot No.");
          OptionRec.SETRANGE("House Model",HouseModelCde);
          OptionRec.SETRANGE("Main Group",MainGroupCde);
          OptionRec.SETRANGE(Group,GroupCde);
          OptionRec.SETRANGE("Sub Group",SubGroupCde);
          OptionRec.SETRANGE(Option,Option);
          IF OptionRec.FINDFIRST THEN
            "Version Date" := OptionRec."Version Date";
        END;
      END;
    END;

    PROCEDURE CreateBudgetLine@1100525007(VAR BudgetLine@1100525000 : Record 11012001);
    BEGIN
      WITH BudgetLine DO BEGIN
        "Line No." := NewBudgetLineNo;
        Amount := 0;
        "Cost Component" := DefaultCostComponent("Cost Object","Project No.");
        FillDefaultFscType();
        CalcTotals;
        IF OptionCde = '' THEN BEGIN
          INSERT;
          UpdateCostControlStatus(0);  // 0=Action::Insert
          NewBudgetLineNo += 10000;
        END ELSE;
          AssignOptionBudget(BudgetLine);
      END;
    END;

    PROCEDURE DefaultCostComponent@1100525006(lvCostObject@1100485000 : Code[20];lvProject@1100485001 : Code[20]) lvCostComponent : Code[20];
    BEGIN
      lvCostComponent := '';
      IF lvCostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, FALSE, lvProject);
        IF NOT DimValRec.Blocked THEN
          lvCostComponent := DimValRec."Cost Component";
      END;
    END;

    PROCEDURE CheckCostObject@1210190007(BudgetLine@1100409000 : Record 11012001) Exist : Boolean;
    BEGIN
      WITH BudgetLine DO BEGIN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
        IF DimValRec.Code = '' THEN BEGIN
          StoreMessage(Description,STRSUBSTNO(Text999,FIELDCAPTION("Cost Object"),"Cost Object"));
          EXIT(FALSE);
        END;
        IF DimValRec.Blocked THEN
          StoreMessage(Description, STRSUBSTNO(Text013,"Cost Object"));  // Not 'EXIT(FALSE)' if blocked!
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckUnitOfMeasure@1100409001(BudgetLine@1100409000 : Record 11012001);
    BEGIN
      WITH BudgetLine DO BEGIN
        IF "Unit of Measure" = '' THEN
          EXIT;
        IF NOT UnitRec.GET("Unit of Measure") THEN
          StoreMessage(Description, STRSUBSTNO(Text999, FIELDCAPTION("Unit of Measure"), "Unit of Measure"));
      END;
    END;

    PROCEDURE StoreMessage@5(lvDesc@11012000 : Text[50];lvMess@11012001 : Text[80]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Line No." := lvError;
        "Project No." := ProjRec."No.";
        "Error message" := lvMess;
        Description := lvDesc;
        INSERT;
      END;
    END;

    PROCEDURE AssignOptionBudget@3(BudgetLine@1100525000 : Record 11012001);
    VAR
      OptionBudget@1100525001 : Record 11012503;
      EntryNo@11012000 : Integer;
    BEGIN
      WITH OptionBudget DO BEGIN
        SETRANGE("Project No.",ProjectCde);
        IF PlotCde <> '' THEN
          SETRANGE("Plot No.",PlotCde)
        ELSE
          SETFILTER("Plot No.",'%1','');
        SETRANGE("House Model",HouseModelCde);
        SETRANGE("Main Group",MainGroupCde);
        SETRANGE(Group,GroupCde);
        SETRANGE("Sub Group",SubGroupCde);
        SETRANGE(Option,OptionCde);
        IF NOT FINDLAST THEN
          EntryNo := 10000
        ELSE
          EntryNo := "Line No." + 10000;

        INIT;
        "Project No." := BudgetLine."Project No.";
        "Plot No." := PlotCde;
        "House Model" := HouseModelCde;
        "Main Group" := MainGroupCde;
        Group := GroupCde;
        "Sub Group" := SubGroupCde;
        Option := BudgetLine.Option;
        Element := BudgetLine.Element;
        "Cost Object" := BudgetLine."Cost Object";
        "Cost Component" := BudgetLine."Cost Component";
        Description := BudgetLine.Description;
        Quantity := BudgetLine.Quantity;
        "Unit of Measure" := BudgetLine."Unit of Measure";
        Norm := BudgetLine.Norm;
        "Rate Code" := BudgetLine."Rate Code";
        Rate := BudgetLine.Rate;
        Hours := BudgetLine.Hours;
        Amount := BudgetLine.Amount;
        "Line No." := EntryNo;
        "Total Amount" := BudgetLine."Total Amount";
        "Total Hours" := BudgetLine."Total Hours";
        "Cost Type" := BudgetLine."Cost Type";
        Price := BudgetLine.Price;
        "Time Quantity" := BudgetLine."Time Quantity";
        "Unit of Time" := BudgetLine."Unit of Time";
        Chapter := BudgetLine.Chapter;
        Paragraph := BudgetLine.Paragraph;

        CheckInsertSummarySheet(FALSE);  //* Must be done before INSERT, because of test 'only when first'.
        INSERT;
      END;
    END;

    PROCEDURE FillElement@1000000000(iElement@1210190000 : Code[20]) : Decimal;
    VAR
      pos1@1210190001 : Integer;
      ElementFormat@1210190003 : Codeunit 11012022;
      ChapterCde@1210190005 : Code[20];
      ParagraphCde@1210190006 : Code[20];
      LevelInt@1210190007 : Integer;
    BEGIN
      //db: zie dataport 11012392
      IF iElement <> '' THEN BEGIN
        pos1 := STRPOS(iElement, '.');
        IF (pos1 = 2) OR ((pos1 = 0) AND (STRLEN(iElement) = 1)) THEN
          iElement := '0' + iElement;
        ElementFormat.FormatElemExtended(2,iElement,ChapterCde,ParagraphCde,LevelInt);
        CASE LevelInt OF
          1:BEGIN
              IF NOT ProjElemRec.GET(ProjectCde,ChapterCde) THEN
                InsertElement(ChapterCde);
            END;
          2:BEGIN
              IF NOT ProjElemRec.GET(ProjectCde,ChapterCde) THEN
                InsertElement(ChapterCde);
              IF NOT ProjElemRec.GET(ProjectCde,ParagraphCde) THEN
                InsertElement(ParagraphCde);
            END;
          3:BEGIN
              IF NOT ProjElemRec.GET(ProjectCde,ChapterCde) THEN
                InsertElement(ChapterCde);
              IF NOT ProjElemRec.GET(ProjectCde,ParagraphCde) THEN
                InsertElement(ParagraphCde);
              IF NOT ProjElemRec.GET(ProjectCde,iElement) THEN
                InsertElement(iElement);
             END;
        END;
      END;
    END;

    PROCEDURE InsertElement@1210190012(iElement@1210190000 : Code[20]);
    BEGIN
      IF ProjectCde <> '' THEN BEGIN
        ProjElemRec.INIT;
        ProjElemRec.VALIDATE("Project No.", ProjectCde);
        ProjElemRec.VALIDATE(Element, iElement);
        ProjElemRec.INSERT(TRUE);
      END;
    END;

    PROCEDURE InsertTenderElement@1000000016();
    VAR
      ProjTenderElemRec@1100525000 : Record 11012263;
    BEGIN
      //db: zie dataport 11012392 (recordsoort 302)
      WITH ProjTenderElemRec DO BEGIN
        INIT;
        "Project No." := ProjectCde;
        VALIDATE("Tender Paragraph", iTenderElement);
        VALIDATE(Level);
        VALIDATE(Description, COPYSTR(iDescription,1,MAXSTRLEN(Description)));
        Quantity := iQuantity;
        "Unit of Measure Code" := iUnit;
        IF INSERT THEN;
      END;

      InsertTenderParagraph(ProjTenderElemRec);
    END;

    PROCEDURE InsertTenderPart@1100409000();
    VAR
      ProjTenderPartRec@1100525000 : Record 11012264;
    BEGIN
      //db: zie dataport 11012392 (recordsoort 303)
      WITH ProjTenderPartRec DO BEGIN
        INIT;
        "Project No." := ProjectCde;
        "Tender Paragraph" := iTenderElement;
        "Tender Paragraph Part" := iTenderPart;
        VALIDATE(Description, COPYSTR(iDescription,1,MAXSTRLEN(Description)));
        IF INSERT THEN;
      END;
    END;

    PROCEDURE InsertTenderText@1100525004();
    VAR
      ProjTenderElemTextRec@1100525000 : Record 11012269;
      LastLino@1100525001 : Integer;
    BEGIN
      //db: zie dataport 11012392 (recordsoort 321)
      WITH ProjTenderElemTextRec DO BEGIN
        SETRANGE("Project No.", ProjectCde);
        SETRANGE("Tender Paragraph", iTenderElement);
        IF FINDLAST THEN
          LastLino := "Text Line No.";

        REPEAT
          INIT;
          "Project No." := ProjectCde;
          "Tender Paragraph" := iTenderElement;
          "Text Line No." := LastLino + 10000;
          Text := COPYSTR(iText,1,MAXSTRLEN(Text));
          IF INSERT THEN;
          LastLino := "Text Line No.";
          IF STRLEN(iText) > MAXSTRLEN(Text) THEN
            iText := COPYSTR(iText, MAXSTRLEN(Text)+1, MAXSTRLEN(iText)-MAXSTRLEN(Text))
          ELSE
            iText := '';
        UNTIL (iText = '');
      END;
    END;

    PROCEDURE InsertTenderParagraph@1100409003(ProjTenderElemRec@1100409000 : Record 11012263);
    VAR
      TenderElementRec@1100409001 : Record 11012470;
      ElemVatSpecRec@1100409003 : Record 11012476;
      DummyAmount@1100409002 : Boolean;
    BEGIN
      //db, zie codeunit 11125670
      IF ProjTenderElemRec."Tender Paragraph"= '919990' THEN EXIT;  //avoid error on validate (table 11012470)
      IF STRLEN(ProjTenderElemRec."Tender Paragraph") = 6 THEN  //skip record if not Type::"Commitment (Main Line)"
        IF COPYSTR(ProjTenderElemRec."Tender Paragraph", STRLEN(ProjTenderElemRec."Tender Paragraph")) <> '0' THEN EXIT;

      ProjRec.GET(ProjectCde);
      IF NOT ProjCustRec.GET(ProjRec."No.", ProjRec."Bill-to Customer No.") THEN EXIT;

      IF ProjCustRec."Installm.Motivation Method" <> ProjCustRec."Installm.Motivation Method"::"Element Quantity" THEN  BEGIN
        ProjCustRec."Installm.Motivation Method" := ProjCustRec."Installm.Motivation Method"::"Element Quantity";
        ProjCustRec.MODIFY;
      END;

      //voorlopig Contract Amount vullen
      DummyAmount := FALSE;
      IF ProjCustRec."Contract Amount (LCY)" = 0 THEN BEGIN
        DummyAmount := TRUE;
        ProjCustRec."Contract Amount (LCY)" := 10000;
        ProjCustRec.MODIFY;
      END;

      TenderElementRec.INIT;
      TenderElementRec.VALIDATE("Project No.", ProjRec."No.");
      TenderElementRec.VALIDATE(Principal, ProjRec."Bill-to Customer No.");
      TenderElementRec."Contract No."  := '';
      TenderElementRec."Tender Paragraph OLD" := '';
      TenderElementRec.VALIDATE("No.", ProjTenderElemRec."Tender Paragraph");
      IF TenderElementRec.INSERT(TRUE) THEN;

      TenderElementRec.FillDefaultSettleExcess();
      TenderElementRec.Description := ProjTenderElemRec.Description;
      TenderElementRec."Unit of Measure" := ProjTenderElemRec."Unit of Measure Code";
      TenderElementRec."Unit Price (LCY)" := iTenderPrice;
      TenderElementRec.VALIDATE(Quantity, ProjTenderElemRec.Quantity);
      CASE iSettlementType OF
        'V':
          TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::Settling);
        'N':
          TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::"Non Settling");
        'M':
          TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::Reduction);
        'O':
          TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::Open);
        'A':
          TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::Approved);
        ELSE
          TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::" ");
      END;
      TenderElementRec.MODIFY;

      GWWSetup.GET;

      IF STRLEN(ProjTenderElemRec."Tender Paragraph") = 6 THEN BEGIN  //skip record if not Type::"Commitment (Main Line)"
        ElemVatSpecRec.RESET;
        ElemVatSpecRec.SETFILTER("Project No.", TenderElementRec."Project No.");
        ElemVatSpecRec.SETFILTER(Principal, TenderElementRec.Principal);
        ElemVatSpecRec.SETFILTER("Contract No.", TenderElementRec."Contract No.");
        ElemVatSpecRec.SETFILTER("Tender Paragraph", TenderElementRec."No.");
        ElemVatSpecRec.DELETEALL;

        ElemVatSpecRec.INIT;
        ElemVatSpecRec."Project No." := TenderElementRec."Project No.";
        ElemVatSpecRec.Principal := TenderElementRec.Principal;
        ElemVatSpecRec."Contract No."  := TenderElementRec."Contract No.";
        ElemVatSpecRec."Tender Paragraph" := TenderElementRec."No.";
        CASE iVatType OF
          'Hoog':
             ElemVatSpecRec."VAT Prod. Posting Group" := GWWSetup."VAT Prod. Posting Group (H)";
          'Laag':
             ElemVatSpecRec."VAT Prod. Posting Group" := GWWSetup."VAT Prod. Posting Group (L)";
          'Geen':
             ElemVatSpecRec."VAT Prod. Posting Group" := GWWSetup."VAT Prod. Posting Group (Z)";
        END;
        ElemVatSpecRec.Amount := TenderElementRec."Total Amount (LCY)";
        ElemVatSpecRec.INSERT;
      END;

      //voorlopig Contract Amount weer leeg maken
      IF DummyAmount THEN BEGIN
        ProjCustRec."Contract Amount (LCY)" := 0;
        ProjCustRec.MODIFY;
      END;
    END;

    PROCEDURE CodeInFilter@1100485002(lvCode@1100485000 : Code[20];lvFilter@1100485001 : Text[1000]) : Boolean;
    VAR
      TmpRec@1100485002 : TEMPORARY Record 352;
    BEGIN
      //db: zie gelijknamige functie in ServSetup
      IF lvFilter='*' THEN
        EXIT(TRUE);
      TmpRec.RESET;
      TmpRec.DELETEALL;
      TmpRec."Dimension Value Code" := lvCode;
      TmpRec.INSERT;
      TmpRec.SETFILTER("Dimension Value Code", lvFilter);
      EXIT(TmpRec.FIND('-'));
    END;

    BEGIN
    END.
  }
}

