OBJECT Codeunit 11012393 Parse CUF XML-Document (Wecap)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Proj@1210190001 : Record 11072003;
      XMLDOMMgt@1100485001 : Codeunit 11020220;
      Text001@1100525010 : TextConst 'ENU=Cost type %1 does not match Cost Object %2';
      XMLFormat@1100525011 : Codeunit 11020221;
      ThreeTierAutomationMgt@1100525013 : Codeunit 419;
      AdjustmentCde@1100525007 : Code[10];
      ExtensionCde@1100525006 : Code[10];
      HouseModelCde@1100525005 : Code[20];
      MainGroupCde@1100525004 : Code[20];
      GroupCde@1100525003 : Code[20];
      SubGroupCde@1100525002 : Code[20];
      OptionCde@1100525001 : Code[20];
      ProjectCde@1100525000 : Code[20];
      PlotCde@1100525008 : Code[20];
      TenderParagraph@1100409004 : Text[10];
      TenderParagraphPart@1100525014 : Text[10];
      TenderParagraphDesc@1100525015 : Text[50];
      TenderParagraphPartDesc@1100525016 : Text[50];
      TenderParagraphPartDesc2@1100525017 : Text[30];
      NewBudgetLineNo@1100525009 : Integer;
      Text002@1100409002 : TextConst 'ENU=%1 %2 is %3';
      Text003@1100409003 : TextConst 'ENU=%1 can not be determined';
      Text004@1100409005 : TextConst 'ENU=%1 %2 not present. %3 not created.';
      Text013@1210190000 : TextConst 'ENU=Cost Object %1 is blocked';
      Text999@1100525012 : TextConst 'ENU=%1 %2 not present';
      FillElementWith@1100409000 : Integer;
      CreateTenderEntries@1100409001 : Boolean;
      BundelAmount@1100525018 : Decimal;
      BundelUnitOfMeasure@1100525019 : Text[10];
      BundelAmountTotal@1100525020 : Decimal;
      BudgetAmount@1100525021 : Decimal;
      BudgetAmountTotal@1100525022 : Decimal;
      BudgetUnitOfMeasure@1100525023 : Text[30];
      FirstBudgetLineNo@1100525024 : Integer;
      LevelCount@1100525025 : Integer;
      lvTenderParagraph@1100525026 : ARRAY [100] OF Text[10];

    PROCEDURE ProcessFile@1100485001(IFileName@1100485002 : Text[1024]);
    VAR
      XMLDoc@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromClientFile(XMLDoc, IFileName, TRUE);
      ParseMessage(XMLDoc);
    END;

    LOCAL PROCEDURE ParseMessage@1100485000(XMLDocIn@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      RootNode@1100525006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LineNodeList@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525000 : Integer;
      BudgetLine@1100525002 : Record 11012001;
    BEGIN
      RootNode := XMLDocIn.DocumentElement;

      // Check if used sort codes (= coding systems) exists
      XMLDOMMgt.FindNodes(RootNode,'SORTEERCODES',LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          CheckCodingSystem(LineNode);
          ProcessSORTEERCODES(LineNode);
        END;
      END;

      // Process bundles
      XMLDOMMgt.FindNodes(RootNode,'BEGROTING/BUNDELING', LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);
          LevelCount := 0;
          GetTenderEntryFromBundle(LineNode);
          CreateProjTenderEntries(BudgetLine, LineNode);
          ProcessBUNDELING(LineNode);
        END;
      END;

      // Process staartgegevens
      //XMLDOMMgt.FindNodes(RootNode, 'STAARTGEGEVENS', LineNodeList);
      //IF NOT ISNULL(LineNodeList) THEN BEGIN
      //  FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
      //    LineNode := LineNodeList.Item(I);
      //    ProcessSTAARTGEGEVENS(LineNode);
      //  END;
      //END;

      //sort budgetlines: Project No., Tender Paragraph, Tender Paragraph Part, Cost Object
      CopyToTempAndBack;
    END;

    LOCAL PROCEDURE ProcessBUNDELING@1100525000(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      LineNodeList@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode2@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525002 : Integer;
      BudgetLine@1100525003 : Record 11012001;
    BEGIN
      XMLDOMMgt.FindNodes(LineNode, 'BUNDELING', LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          LevelCount += 1;
          GetTenderEntryFromBundle(LineNode2);
          CreateProjTenderEntries(BudgetLine, LineNode2);
          lvTenderParagraph[LevelCount] := TenderParagraph;
          ProcessBUNDELING(LineNode2);
        END;
      END;

      XMLDOMMgt.FindNodes(LineNode, 'BEGROTINGSREGEL', LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);

          IF LevelCount > 0 THEN
          ProcessBEGROTINGSREGEL(LineNode2, lvTenderParagraph[LevelCount]);
        END;
      END;

      LevelCount -= 1;
    END;

    LOCAL PROCEDURE ProcessBEGROTINGSREGEL@1100525001(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ParentBundelingCode@1100525001 : Text[10]);
    VAR
      BudgetLine@1100525002 : Record 11012001;
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Norm@1100525004 : Decimal;
      Rate@1100525005 : Decimal;
      Price@1100525006 : Decimal;
      MaterialPrice@1100525007 : Decimal;
      PlantPrice@1100525008 : Decimal;
      SubcontractingPrice@1100525009 : Decimal;
      SundryPrice@1100525010 : Decimal;
      CostType@1100525011 : Integer;
      ProjectTenderParagraph@1100525012 : Record 11012263;
    BEGIN
      InitBudgetLine(BudgetLine, LineNode);
      GetTenderEntryFromBegroting(LineNode);
      CreateProjTenderEntries2(BudgetLine, LineNode);

      ProjectTenderParagraph.GET(ProjectCde, ParentBundelingCode);
      IF ProjectTenderParagraph.Level = ProjectTenderParagraph.Level::"Tender Paragraph" THEN
         CreateProjTenderParts(BudgetLine, LineNode);

      FillElement(BudgetLine, LineNode);

      ProcessMAMOREGEL(BudgetLine, LineNode, ParentBundelingCode);
    END;

    LOCAL PROCEDURE ProcessMAMOREGEL@1100409002(VAR BudgetLine@1100409001 : Record 11012001;LineNode@1100409002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ParentBundelingCode@1100525002 : Text[10]);
    VAR
      BudgetLine2@1100409003 : Record 11012001;
      LineNodeList@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      I@1100525001 : Integer;
      ProjectTenderParagraph@1100525003 : Record 11012263;
    BEGIN
      XMLDOMMgt.FindNodes(LineNode, 'MAMO_REGEL', LineNodeList);

      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode := LineNodeList.Item(I);


          BudgetLine2 := BudgetLine;
          InitBudgetLine(BudgetLine, LineNode);

          // Get Tender Pargraph and Elemnt from BEGROTINGSREGEL stored in BudgetLine2
          BudgetLine."Tender Paragraph" := BudgetLine2."Tender Paragraph";
          BudgetLine."Description Tender Paragraph" := BudgetLine2."Description Tender Paragraph";
          BudgetLine.Element := BudgetLine2.Element;

          ProjectTenderParagraph.GET(ProjectCde, ParentBundelingCode);
          IF ProjectTenderParagraph.Level = ProjectTenderParagraph.Level::"Tender Paragraph" THEN
            BudgetLine."Tender Paragraph Part" := TenderParagraphPart;

          FillCostType(LineNode, BudgetLine);
          FillCostObject(LineNode, BudgetLine);
          CreateBudgetLine(BudgetLine, LineNode, 'MAMOREGEL');
        END;
      END;
    END;

    LOCAL PROCEDURE ProcessSORTEERCODES@1100409001(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      LineNodeList@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode2@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525002 : Integer;
    BEGIN
      XMLDOMMgt.FindNodes(LineNode, 'SORTEERCODE_REGEL', LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          ProcessElements(LineNode2);
        END;
      END;
    END;

    LOCAL PROCEDURE ProcessSTAARTGEGEVENS@1100409003(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      BudgetLine@1100409003 : Record 11012001;
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LineNode2@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100525001 : Integer;
    BEGIN
      XMLDOMMgt.FindNodes(LineNode, 'VRIJE_GROOTHEID', LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode2 := LineNodeList.Item(I);
          InitBudgetLine(BudgetLine, LineNode2);
          CreateBudgetLine(BudgetLine, LineNode2, 'STAARTGEGEVENS');
        END;
      END;
    END;

    LOCAL PROCEDURE CheckCodingSystem@1100525003(LineNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CodingSystem@1100525002 : Record 11012088;
      CodingSystemCode@1100525001 : Code[10];
      CodingSystemDesc@1100525003 : Text[50];
    BEGIN
      CodingSystemCode := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'SORTERING'), 1, 10);
      CodingSystemDesc := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'FUNCTIE'), 1, 50);
      IF NOT CodingSystem.GET(CodingSystemCode) THEN
        StoreMessage(CodingSystemDesc, STRSUBSTNO(Text999, CodingSystem.FIELDCAPTION("Coding System"), CodingSystemCode));
    END;

    LOCAL PROCEDURE FillCostType@1100409005(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR BudgetLine@1100409000 : Record 11012001);
    VAR
      DimensionValue@1100409002 : Record 349;
      DimMgt@1100409003 : Codeunit 408;
    BEGIN
      WITH BudgetLine DO BEGIN
        DimMgt.GetDimValueRec(2, XMLDOMMgt.GetAttributeValue(LineNode, 'CODE'), DimensionValue, FALSE, '');

        IF DimensionValue.Code <> '' THEN
          "Cost Type" := DimensionValue."Cost Type"
        ELSE
          StoreMessage(FIELDCAPTION("Cost Type"), STRSUBSTNO(Text003, FIELDCAPTION("Cost Type")));
      END;
    END;

    LOCAL PROCEDURE FillCostObject@1100525008(LineNode@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR BudgetLine@1100525000 : Record 11012001);
    VAR
      DimensionValue@1100525007 : Record 349;
      DimMgt@1100525006 : Codeunit 408;
      SameType@1100525008 : Boolean;
      LineNodeList@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      BudgetLine."Cost Object" := XMLDOMMgt.GetAttributeValue(LineNode, 'CODE');

      DimMgt.GetDimValueRec(2, BudgetLine."Cost Object", DimensionValue, FALSE, '');

      CASE BudgetLine."Cost Type" OF
        BudgetLine."Cost Type"::Labor: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Labor;
        BudgetLine."Cost Type"::Material: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Material;
        BudgetLine."Cost Type"::Subcontracting: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Subcontracting;
        BudgetLine."Cost Type"::Plant: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Plant;
        BudgetLine."Cost Type"::Sundry: SameType := DimensionValue."Cost Type" = DimensionValue."Cost Type"::Sundry;   //db, 11-06-13
      END; // END CASE

      IF (DimensionValue.Code <> '') AND (NOT SameType) THEN
        StoreMessage(BudgetLine.FIELDCAPTION("Cost Object"), STRSUBSTNO(Text001, DimensionValue."Cost Type", DimensionValue.Code));
      IF (DimensionValue.Code <> '') AND DimensionValue.Blocked THEN  //C-026977
        StoreMessage(BudgetLine.FIELDCAPTION("Cost Object"), STRSUBSTNO(Text013, BudgetLine."Cost Object"));
      IF DimensionValue.Code = '' THEN BEGIN
        StoreMessage(BudgetLine.FIELDCAPTION("Cost Object"),
          STRSUBSTNO(Text999, BudgetLine.FIELDCAPTION("Cost Object"), BudgetLine."Cost Object"));
        BudgetLine."Cost Object" := '';
      END;
    END;

    LOCAL PROCEDURE FillElement@1100409007(VAR BudgetLine@1100409000 : Record 11012001;LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ProjectElement@1100409004 : Record 11012010;
      ElementFormat@1100409005 : Codeunit 11012022;
      LineNodeList@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      Element@1100409003 : Code[20];
      I@1100525002 : Integer;
      LineNode3@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMMgt.FindNodes(LineNode, 'SORTEERCODE', LineNodeList);
      IF NOT ISNULL(LineNodeList) THEN BEGIN
        FOR I := 0 TO (LineNodeList.Count - 1) DO BEGIN
          LineNode3 := LineNodeList.Item(I);
          Element := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode3, 'WAARDE'), 1, MAXSTRLEN(BudgetLine.Element));
          ElementFormat.FormatElem(Element, 2, '');

          IF Element <> '' THEN BEGIN
            IF ProjectElement.GET(ProjectCde, Element) THEN
              BudgetLine.Element := Element;
          END ELSE BEGIN
            IF Proj."Posting Element Mandatory" THEN
              StoreMessage(BudgetLine.FIELDCAPTION(Element), STRSUBSTNO(Text002, Proj.FIELDCAPTION("Posting Element Mandatory"),
                Proj.TABLECAPTION, Proj."Posting Element Mandatory"));
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE InitBudgetLine@1100525002(VAR BudgetLine@1100525000 : Record 11012001;LineNode@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      OptionRec@1100525001 : Record 11012502;
      ProjectElement@1100525002 : Record 11012010;
      UnitRec@1100525003 : Record 204;
    BEGIN
      WITH BudgetLine DO BEGIN
        INIT;
        "Line No." := NewBudgetLineNo;
        "Project No." := ProjectCde;

        FillMainProject();

        "Extension Contract" := ExtensionCde;
        Adjustment := AdjustmentCde;
        Option := OptionCde;
        "Time Quantity" := 1;
        CLEAR("Option Line Type");
        "Department Code" := Proj."Global Dimension 1 Code";  //*31927

        GetVersionDate();
        UpdateExtContractStatus();

        IF Option <> '' THEN BEGIN
          "Extension Contract Status" := "Extension Contract Status"::Expired;
          OptionRec.SETRANGE("Project No.", "Project No.");
          OptionRec.SETRANGE("Plot No.", "Plot No.");
          OptionRec.SETRANGE("House Model", HouseModelCde);
          OptionRec.SETRANGE("Main Group", MainGroupCde);
          OptionRec.SETRANGE(Group, GroupCde);
          OptionRec.SETRANGE("Sub Group", SubGroupCde);
          OptionRec.SETRANGE(Option, Option);
          IF OptionRec.FINDFIRST THEN
            "Version Date" := OptionRec."Version Date";
        END;

        GetDefaultPurchAction();
      END;
    END;

    LOCAL PROCEDURE CreateBudgetLine@1100525007(VAR BudgetLine@1100525000 : Record 11012001;LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ProcessType@1100409003 : Text[30]);
    VAR
      UoM@1100409001 : Record 204;
      UnitOfMeasure@1100409002 : Code[10];
    BEGIN
      WITH BudgetLine DO BEGIN
        "Line No." := NewBudgetLineNo;

        CASE ProcessType OF
          'MAMOREGEL':
            BEGIN
              CASE "Cost Type" OF
                "Cost Type"::Labor:
                  BEGIN
                    XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'AANTAL'), Quantity);
                    //XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'UUR_NORM'), Norm);
                    XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID'), Norm);
                    XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID'), Hours);
                    XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'PRIJS'), Rate);
                  END;

                "Cost Type"::Material,
                "Cost Type"::Subcontracting,
                "Cost Type"::Plant,
                "Cost Type"::Sundry:
                  BEGIN
                    XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID'), Quantity);
                    XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'PRIJS'), Price);
                  END;
              END; // END CASE

              Description := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'OMSCHRIJVING'), 1, MAXSTRLEN(Description));

              UnitOfMeasure := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID_EENHEID'), 1, MAXSTRLEN("Unit of Measure"));
              IF NOT UoM.GET(UnitOfMeasure) THEN
                StoreMessage(FIELDCAPTION("Unit of Measure"), STRSUBSTNO(Text999, FIELDCAPTION("Unit of Measure"), UnitOfMeasure));

              "Unit of Measure" := UnitOfMeasure;
              Amount := 0;
              "Cost Component" := DefaultCostComponent("Cost Object","Project No.");

              FillDefaultFscType();  //DP00129
              CalcTotals();
            END;

          'STAARTGEGEVENS':
            BEGIN
              BudgetLine.Quantity := 1;
              BudgetLine."Unit of Measure" := 'ST';
              BudgetLine."Production Rate" := 0;
              BudgetLine.Description :=
                COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'OMSCHRIJVING'), 1, MAXSTRLEN(BudgetLine.Description));
              BudgetLine."Cost Type" := BudgetLine."Cost Type"::Sundry;
              BudgetLine."Cost Component" := DefaultCostComponent(BudgetLine."Cost Object", BudgetLine."Project No.");

              BudgetLine.FillDefaultFscType();  //DP00129
              BudgetLine.CalcTotals();

              XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'BEDRAG'), BudgetLine.Amount);
            END;
        END; // END CASE

        IF OptionCde = '' THEN BEGIN
          BudgetLine.INSERT(FALSE);
          BudgetLine.UpdateCostControlStatus(0);  // 0=Action::Insert  //33988.n
          NewBudgetLineNo += 10000;
        END ELSE;
          AssignOptionBudget(BudgetLine);
      END;
    END;

    PROCEDURE DefaultCostComponent@1100525006(lvCostObject@1100485000 : Code[20];lvProject@1100485001 : Code[20]) lvCostComponent : Code[20];
    VAR
      lvDimValRec@1100485002 : Record 349;
      DimMgt@1100525000 : Codeunit 408;
    BEGIN
      lvCostComponent := '';
      IF lvCostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, FALSE, lvProject);
        IF NOT lvDimValRec.Blocked THEN
          lvCostComponent := lvDimValRec."Cost Component";
      END;
    END;

    PROCEDURE StoreMessage@5(Descr@11012000 : Text[50];ErrorMsg@11012001 : Text[80]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      LineNo@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          LineNo := "Line No." + 1
        ELSE
          LineNo := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Line No." := LineNo;
        "Project No." := Proj."No.";
        "Error message" := ErrorMsg;
        Description := Descr;
        INSERT(FALSE);
      END;
    END;

    LOCAL PROCEDURE AssignOptionBudget@3(BudgetLine@1100525000 : Record 11012001);
    VAR
      OptionBudget@1100525001 : Record 11012503;
      EntryNo@11012000 : Integer;
    BEGIN
      WITH OptionBudget DO BEGIN
        SETRANGE("Project No.",ProjectCde);
        IF PlotCde <> '' THEN
          SETRANGE("Plot No.",PlotCde)
        ELSE
          SETFILTER("Plot No.",'%1','');
        SETRANGE("House Model",HouseModelCde);
        SETRANGE("Main Group",MainGroupCde);
        SETRANGE(Group,GroupCde);
        SETRANGE("Sub Group",SubGroupCde);
        SETRANGE(Option,OptionCde);
        IF NOT FINDLAST THEN
          EntryNo := 10000
        ELSE
          EntryNo := "Line No." + 10000;

        INIT;
        "Project No." := BudgetLine."Project No.";
        "Plot No." := PlotCde;
        "House Model" := HouseModelCde;
        "Main Group" := MainGroupCde;
        Group := GroupCde;
        "Sub Group" := SubGroupCde;
        Option := BudgetLine.Option;
        Element := BudgetLine.Element;
        "Cost Object" := BudgetLine."Cost Object";
        "Cost Component" := BudgetLine."Cost Component";
        Description := BudgetLine.Description;
        Quantity := BudgetLine.Quantity;
        "Unit of Measure" := BudgetLine."Unit of Measure";
        Norm := BudgetLine.Norm;
        "Rate Code" := BudgetLine."Rate Code";
        Rate := BudgetLine.Rate;
        Hours := BudgetLine.Hours;
        Amount := BudgetLine.Amount;
        "Line No." := EntryNo;
        "Total Amount" := BudgetLine."Total Amount";
        "Total Hours" := BudgetLine."Total Hours";
        "Cost Type" := BudgetLine."Cost Type";
        Price := BudgetLine.Price;
        "Time Quantity" := BudgetLine."Time Quantity";
        "Unit of Time" := BudgetLine."Unit of Time";
        Chapter := BudgetLine.Chapter;
        Paragraph := BudgetLine.Paragraph;

        CheckInsertSummarySheet(FALSE);  //* Must be done before INSERT, because of test 'only when first'.
        INSERT(FALSE);
      END;
    END;

    LOCAL PROCEDURE ProcessElements@1100525009(LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ProjectElement@1100409003 : Record 11012010;
      ElementFormat@1100409002 : Codeunit 11012022;
      Element@1100409000 : Code[20];
      ElementDesc@1100409001 : Text[50];
      BaseElement@1100525000 : Record 11012060;
    BEGIN
      Element := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'CODE'), 1, 20);
      ElementDesc := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'OMSCHRIJVING'), 1, 50);

      ElementFormat.FormatElem(Element, 2, '');

      CASE FillElementWith OF
        0:
          BEGIN
            IF NOT ProjectElement.GET(ProjectCde, Element) THEN
              StoreMessage(ElementDesc, STRSUBSTNO(Text999, ProjectElement.TABLECAPTION, Element));
          END;
        1:
          BEGIN
            IF NOT ProjectElement.GET(ProjectCde, Element) THEN BEGIN
              ProjectElement.INIT;
              ProjectElement."Project No." := ProjectCde;
              ProjectElement.VALIDATE(Element, Element);
              ProjectElement.VALIDATE(Description, ElementDesc);
              ProjectElement.INSERT(TRUE);
            END;
          END;
      END; // END CASE
    END;

    PROCEDURE GetTenderEntryFromBundle@1100409000(LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      AmountLoon@1100525001 : Decimal;
      AmountMateriaal@1100525002 : Decimal;
      AmountMaterieel@1100525003 : Decimal;
      AmountAanneming@1100525004 : Decimal;
      AmountOverige@1100525005 : Decimal;
    BEGIN
      IF NOT CreateTenderEntries THEN
        EXIT;

      TenderParagraph := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'CODE'), 1, 10);
      TenderParagraphDesc := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'OMSCHRIJVING'), 1, 50);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'TERUGDEEL_HOEVEELHEID'), BundelAmount);
      BundelUnitOfMeasure := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'EENHEID'), 1, 10);

      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'LOONKOSTEN'), AmountLoon);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'MATERIAALKOSTEN'), AmountMateriaal);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'MATERIEELKOSTEN'), AmountMaterieel);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'ONDERAANNEMING'), AmountAanneming);
      XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'OVERIGE_KOSTEN'), AmountOverige);

      BundelAmountTotal := AmountLoon + AmountMateriaal + AmountMaterieel + AmountAanneming + AmountOverige ;
    END;

    PROCEDURE GetTenderEntryFromBegroting@1100525010(LineNode@1100525006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      AmountLoon@1100525000 : Decimal;
      AmountMateriaal@1100525001 : Decimal;
      AmountMaterieel@1100525002 : Decimal;
      AmountAanneming@1100525003 : Decimal;
      AmountOverige@1100525004 : Decimal;
      AmountFactor@1100525005 : Text[30];
    BEGIN
      IF NOT CreateTenderEntries THEN
              EXIT;

            TenderParagraphPartDesc := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'OMSCHRIJVING'), 1, 50);
            TenderParagraphPart := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'CODE'), 1, 10);
            XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID'), BudgetAmount);
            BudgetUnitOfMeasure := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID_EENHEID'), 1, 10);
            AmountFactor := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID_FACTOR'), 1, 10);

            XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'MATERIAALPRIJS'), AmountMateriaal);
            XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'MATERIEELPRIJS'), AmountMaterieel);
            XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'ONDERAANNEMINGSPRIJS'), AmountAanneming);
            XMLFormat.EvaluateDecimal(XMLDOMMgt.GetAttributeValue(LineNode, 'OVERIGE_KOSTEN'), AmountOverige);

            BudgetAmountTotal := AmountLoon + AmountMateriaal + AmountMaterieel + AmountAanneming + AmountOverige ;
            TenderParagraphPartDesc2 := FORMAT(BudgetAmount) + ' ' + BudgetUnitOfMeasure + ' ' + 'Factor' + ' ' + AmountFactor;
    END;

    PROCEDURE CreateProjTenderEntries@1100409008(VAR BudgetLine@1100409001 : Record 11012001;LineNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      TenderParagraphByPrincipal@1100409004 : Record 11012470;
      ProjectTenderParagraph@1100409003 : Record 11012263;
      UoM@1100409006 : Record 204;
      UnitOfMeasure@1100409005 : Code[10];
      TenderParagraph2@1100409002 : Text[10];
    BEGIN
      WITH TenderParagraphByPrincipal DO BEGIN
        IF NOT CreateTenderEntries THEN
          EXIT;

        IF NOT ProjectTenderParagraph.GET(ProjectCde, TenderParagraph) THEN BEGIN
          ProjectTenderParagraph.INIT;
          ProjectTenderParagraph."Project No." := Proj."No.";
          ProjectTenderParagraph.VALIDATE("Tender Paragraph", TenderParagraph);
          ProjectTenderParagraph.INSERT(TRUE);

          ProjectTenderParagraph.VALIDATE(Description, TenderParagraphDesc);
          ProjectTenderParagraph."Unit of Measure Code" := BundelUnitOfMeasure;

            IF (BundelAmount = 1) AND (BundelUnitOfMeasure = 'EUR') THEN
              ProjectTenderParagraph.Quantity := BundelAmountTotal
            ELSE
              ProjectTenderParagraph.Quantity := BundelAmount;

          ProjectTenderParagraph.MODIFY(TRUE);
        END;

        BudgetLine."Tender Paragraph" := ProjectTenderParagraph."Tender Paragraph";
        BudgetLine."Description Tender Paragraph" := ProjectTenderParagraph.Description;
      END;
    END;

    PROCEDURE CreateProjTenderEntries2@1100525004(VAR BudgetLine@1100525000 : Record 11012001;LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      TenderParagraphByPrincipal@1100525002 : Record 11012470;
      ProjectTenderParagraph@1100525003 : Record 11012263;
      ProjectTenderParagraphPart@1100525004 : Record 11012264;
      UoM@1100525005 : Record 204;
      UnitOfMeasure@1100525006 : Code[10];
      TenderParagraph2@1100525007 : Text[10];
    BEGIN
      WITH TenderParagraphByPrincipal DO BEGIN
        IF NOT CreateTenderEntries THEN
          EXIT;

        // check Unit of Measure before creating Tender Paragrahp
        UnitOfMeasure := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID_EENHEID'), 1, MAXSTRLEN("Unit of Measure"));
        IF NOT UoM.GET(UnitOfMeasure) THEN BEGIN
          StoreMessage(TenderParagraphByPrincipal.TABLECAPTION,
            STRSUBSTNO(Text004, FIELDCAPTION("Unit of Measure"), UnitOfMeasure, TenderParagraphByPrincipal.TABLECAPTION));
          EXIT;
        END;

        TenderParagraph2 := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'CODE'), 1, MAXSTRLEN("Tender Paragraph OLD"));
        IF COPYSTR(TenderParagraph2, STRLEN(TenderParagraph2), 1) <> '0' THEN
          TenderParagraph2 := TenderParagraph;
          Description := COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'OMSCHRIJVING'), 1, MAXSTRLEN(Description));
          VALIDATE("Unit of Measure",
              COPYSTR(XMLDOMMgt.GetAttributeValue(LineNode, 'HOEVEELHEID_EENHEID'), 1, MAXSTRLEN("Unit of Measure")));


          IF NOT ProjectTenderParagraph.GET(ProjectCde, TenderParagraph2) THEN BEGIN
            ProjectTenderParagraph.INIT;
            ProjectTenderParagraph."Project No." := Proj."No.";
            ProjectTenderParagraph.VALIDATE("Tender Paragraph", TenderParagraph2);
            ProjectTenderParagraph.INSERT(TRUE);

            ProjectTenderParagraph.VALIDATE(Description, Description);
            ProjectTenderParagraph."Unit of Measure Code" := "Unit of Measure";

              IF (BudgetAmount = 1) AND (BudgetUnitOfMeasure = 'EUR') THEN
                ProjectTenderParagraph.Quantity := BudgetAmountTotal
              ELSE
                ProjectTenderParagraph.Quantity := BudgetAmount;

            ProjectTenderParagraph.MODIFY(TRUE);
          END;

          BudgetLine."Tender Paragraph" := ProjectTenderParagraph."Tender Paragraph";
          BudgetLine."Description Tender Paragraph" := ProjectTenderParagraph.Description;
      END;
    END;

    PROCEDURE CreateProjTenderParts@1100525005(VAR BudgetLine@1100525000 : Record 11012001;LineNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ProjectTenderParagraphPart@1100525002 : Record 11012264;
      ProjectTenderParagraph@1100525003 : Record 11012263;
    BEGIN
      IF NOT CreateTenderEntries THEN
        EXIT;

      IF NOT ProjectTenderParagraphPart.GET(ProjectCde, TenderParagraph, TenderParagraphPart) THEN BEGIN
        ProjectTenderParagraphPart.INIT;
        ProjectTenderParagraphPart."Project No." := Proj."No.";
        ProjectTenderParagraphPart.VALIDATE("Tender Paragraph Part", TenderParagraphPart);
        ProjectTenderParagraphPart.VALIDATE("Tender Paragraph", TenderParagraph);
        ProjectTenderParagraphPart.INSERT(TRUE);

        ProjectTenderParagraphPart.VALIDATE(Description, TenderParagraphPartDesc);
        ProjectTenderParagraphPart.VALIDATE("Description 2", TenderParagraphPartDesc2);

        ProjectTenderParagraphPart.MODIFY(TRUE);
      END;
    END;

    PROCEDURE InitCodeunit@1(Project1Cde@11012000 : Code[20];Adjustment1Cde@11012001 : Code[10];Extension1Cde@11012002 : Code[10];HouseModel1Cde@1210190003 : Code[20];MainGroup1Cde@1210190002 : Code[20];Group1Cde@1210190001 : Code[20];SubGroup1Cde@1210190000 : Code[20];Option1Cde@11012003 : Code[20];Plot1Cde@1100485000 : Code[20];iFillElementWith@1100409001 : Integer;iCreateTenderEntries@1100409000 : Boolean);
    VAR
      BudgetLine@1100525000 : Record 11012001;
    BEGIN
      ProjectCde := Project1Cde;
      AdjustmentCde := Adjustment1Cde;
      ExtensionCde := Extension1Cde;
      HouseModelCde := HouseModel1Cde;
      MainGroupCde := MainGroup1Cde;
      GroupCde := Group1Cde;
      SubGroupCde := SubGroup1Cde;
      OptionCde := Option1Cde;
      PlotCde := Plot1Cde;
      FillElementWith := iFillElementWith;
      CreateTenderEntries := iCreateTenderEntries;

      IF ProjectCde <> '' THEN  //*31927.n
        Proj.GET(ProjectCde);   //*31927.n

      BudgetLine.SETRANGE("Project No.",ProjectCde);
      BudgetLine.SETRANGE("Extension Contract",ExtensionCde);
      BudgetLine.SETRANGE(Adjustment,AdjustmentCde);
      BudgetLine.SETRANGE(Option,OptionCde);
      IF BudgetLine.FINDLAST THEN
        NewBudgetLineNo := BudgetLine."Line No." + 10000;
      FirstBudgetLineNo := NewBudgetLineNo;
    END;

    PROCEDURE CopyToTempAndBack@1100525011();
    VAR
      TempBudgetLine@1100525000 : TEMPORARY Record 11012001;
      BudgetLine@1100525001 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Project No.",ProjectCde);
            BudgetLine.SETRANGE("Extension Contract",ExtensionCde);
            BudgetLine.SETRANGE(Adjustment,AdjustmentCde);
            BudgetLine.SETRANGE(Option,OptionCde);
            BudgetLine.SETRANGE("Line No.",FirstBudgetLineNo,NewBudgetLineNo);

            IF NOT BudgetLine.FINDSET(TRUE, TRUE) THEN
              EXIT;

            REPEAT
              TempBudgetLine.COPY(BudgetLine);
              TempBudgetLine.INSERT;
            UNTIL BudgetLine.NEXT = 0;

            BudgetLine.DELETEALL;

            TempBudgetLine.SETCURRENTKEY("Project No.","Tender Paragraph","Tender Paragraph Part","Cost Object");

            IF NOT TempBudgetLine.FINDSET THEN
              EXIT;

            REPEAT
              BudgetLine.COPY(TempBudgetLine);
              BudgetLine."Line No." := FirstBudgetLineNo;
              BudgetLine.INSERT;

              FirstBudgetLineNo += 10000;
            UNTIL TempBudgetLine.NEXT = 0;
    END;

    BEGIN
    {
      4PS MVOS 20130708 dp00404 : Copy of codeunit 11012390
                                  XML import (Wecap)

      4PS MvE 20131002 C009203
    }
    END.
  }
}

