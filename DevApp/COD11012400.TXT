OBJECT Codeunit 11012400 Word Automation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012023 : TextConst 'ENU=LEFT';
      Text001@11012024 : TextConst 'ENU=CENTER';
      Text002@11012025 : TextConst 'ENU=CENTRE';
      Text003@11012026 : TextConst 'ENU=RIGHT';
      Text004@11012027 : TextConst 'ENU=DECIMAL';
      Text005@11012028 : TextConst 'ENU=LINE';
      Text006@11012029 : TextConst 'ENU=SPACE';
      Text007@11012030 : TextConst 'ENU=NONE';
      Text008@11012031 : TextConst 'ENU=DOT';
      Text009@11012032 : TextConst 'ENU=DASH';
      Text010@11012033 : TextConst 'ENU=MINUS';
      Text011@11012034 : TextConst 'ENU=SOLID';
      Text012@11012035 : TextConst 'ENU=AUTO';
      Text013@11012036 : TextConst 'ENU=BLACK';
      Text014@11012037 : TextConst 'ENU=BLUE';
      Text015@11012038 : TextConst 'ENU=TURQUOIS';
      Text016@11012039 : TextConst 'ENU=LIGHTGREEN';
      Text017@11012040 : TextConst 'ENU=CLEARGREEN';
      Text018@11012041 : TextConst 'ENU=LILA';
      Text019@11012042 : TextConst 'ENU=RED';
      Text020@11012043 : TextConst 'ENU=YELLOW';
      Text021@11012044 : TextConst 'ENU=WHITE';
      Text022@11012045 : TextConst 'ENU=DARKBLUE';
      Text023@11012046 : TextConst 'ENU=GREENBLUE';
      Text024@11012047 : TextConst 'ENU=GREEN';
      Text025@11012048 : TextConst 'ENU=VIOLET';
      Text026@11012049 : TextConst 'ENU=DARKRED';
      Text027@11012050 : TextConst 'ENU=DARKYELLOW';
      Text028@11012051 : TextConst 'ENU=GREY50';
      Text029@11012052 : TextConst 'ENU=GREY25';
      Text030@11012053 : TextConst 'ENU=FILL';
      Text031@11012054 : TextConst 'ENU=BRIGHT GREEN';
      Text032@11012055 : TextConst 'ENU=LIGHTGREEN';
      Text033@11012056 : TextConst 'ENU=PURPLE';
      Text034@11012057 : TextConst 'ENU=RED';
      Text035@11012058 : TextConst 'ENU=RED';
      Text036@11012059 : TextConst 'ENU=YELLOW';
      Text037@11012060 : TextConst 'ENU=YELLOW';
      Text038@11012061 : TextConst 'ENU=WHITE';
      Text039@11012062 : TextConst 'ENU=WHITE';
      Text040@11012063 : TextConst 'ENU=DARKBLUE';
      Text041@11012064 : TextConst 'ENU=DARKBLUE';
      Text042@11012065 : TextConst 'ENU=GREENBLUE';
      Text043@11012066 : TextConst 'ENU=GREENBLUE';
      Text044@11012067 : TextConst 'ENU=GREEN';
      Text045@11012068 : TextConst 'ENU=GREEN';
      Text046@11012069 : TextConst 'ENU=VIOLET';
      Text047@11012070 : TextConst 'ENU=DARKRED';
      Text048@11012071 : TextConst 'ENU=DARKRED';
      Text049@11012072 : TextConst 'ENU=DARKYELLOW';
      Text050@11012073 : TextConst 'ENU=DARKYELLOW';
      Text051@11012074 : TextConst 'ENU=GREY50';
      Text052@11012075 : TextConst 'ENU=GREY50';
      Text053@11012076 : TextConst 'ENU=GREY25';
      Text054@11012077 : TextConst 'ENU=GREY25';
      Text055@11012078 : TextConst 'ENU=CENTRED';
      Text056@11012079 : TextConst 'ENU=FILL';
      RelationSetup@1100485000 : Record 5079;
      WordBookmark@11012001 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020968-0000-0000-C000-000000000046}:Unknown Automation Server.Bookmark";
      WordDoc@11012002 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020906-0000-0000-C000-000000000046}:Unknown Automation Server.Document";
      WordApp@11012003 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209FF-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Hyperlinks@11012005 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{0002099C-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlinks";
      WordTable@11012007 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020951-0000-0000-C000-000000000046}:Unknown Automation Server.Table";
      WordRow@11012008 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020950-0000-0000-C000-000000000046}:Unknown Automation Server.Row";
      wdRange@1100485003 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{0002095E-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      wdFind@1100485002 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209B0-0000-0000-C000-000000000046}:Unknown Automation Server.Find";
      FileMgt@1100525000 : Codeunit 419;
      Flag0@11012011 : Integer;
      Flag1@11012012 : Integer;
      ReplaceAll@1100485006 : Integer;
      Element@1100485005 : Integer;
      NoColumns@1100485004 : Integer;
      Filename@11012013 : Text[250];
      EmptyStr@11012014 : Text[1];
      Password@11012015 : Text[30];
      BeenHere@11012017 : Boolean;
      Text058@1210190000 : TextConst 'ENU=Document ''%1'' does not exist';
      TableNoAlreadyInit@1100525001 : Integer;

    PROCEDURE Initialise@6();
    BEGIN
      Flag0 := 0;
      Flag1 := 1;
      BeenHere := FALSE;
      TableNoAlreadyInit := 0; //C024324.n
      EmptyStr := '';
      IF ISCLEAR(WordApp) THEN
        CREATE(WordApp, TRUE, TRUE);
    END;

    PROCEDURE InitWithReturn@1100525000() IsClearBool : Boolean;
    BEGIN
      Flag0 := 0;
      Flag1 := 1;
      BeenHere := FALSE;
      TableNoAlreadyInit := 0; //C024324.n
      EmptyStr := '';
      IF ISCLEAR(WordApp) THEN BEGIN
        CREATE(WordApp, FALSE, TRUE);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SaveAs@16(Filename@11012000 : Text[250]);
    BEGIN
      //IF STRPOS(Filename, '.') > 0 THEN
      //  Filename := Filename + DocExtension;
      WordDoc.SaveAs(Filename);
    END;

    PROCEDURE SaveAsWithExtension@1100485008(Filename@11012000 : Text[250];lvExtension@1100485000 : Text[10]);
    VAR
      lFileName@1100530001 : Text[250];
      lFolderName@1100530002 : Text[250];
    BEGIN
      // 4PS
      FileMgt.SplitFileAbsPathName(Filename, lFolderName, lFileName);
      IF STRPOS(lFileName, '.') > 0 THEN
        Filename := Filename + lvExtension;
      WordDoc.SaveAs(Filename);
      //**4PS
    END;

    PROCEDURE SaveAsFormat@1100528701(FileName@1100528700 : Text[250];wdFormat@1100528701 : Integer);
    BEGIN
      //**4PS
      WordDoc.SaveAs(FileName, wdFormat);
    END;

    PROCEDURE Save@17();
    BEGIN
      WordDoc.Save();
    END;

    PROCEDURE Open@32(iBlnTemplate@11012000 : Boolean;strFilename@11012001 : Text[250];lvReadOnly@1210190001 : Boolean);
    VAR
      OperatingSystemMgt@1100409000 : Codeunit 11012364;
      dummyVar@1210190000 : Boolean;
      lvExtension@1100485000 : Text[30];
    BEGIN
      IF NOT FileMgt.ClientFileExists(strFilename) THEN BEGIN
        IF STRLEN(strFilename) = 0 THEN BEGIN                              // Check whether strFileName >= 4, otherwise COPYSTR crashes
          MESSAGE(Text058, strFilename);
          EXIT;
        END;
        IF NOT ExistingFileName(strFilename, TRUE, FALSE, lvExtension) THEN BEGIN
          MESSAGE(Text058, strFilename);
          EXIT;
        END ELSE BEGIN
          strFilename := strFilename + lvExtension;
        END;
      END;

      dummyVar := FALSE;

      IF NOT iBlnTemplate THEN BEGIN
        IF strFilename <> '' THEN BEGIN
          //LIP link, files with .drf extension.
          RelationSetup.GET;
          IF (STRLEN(strFilename) > 4) AND ( RelationSetup."LIP Hummingbird exe" <> '') AND
             (RelationSetup."Extension Hummingbird Appl." <> '') THEN BEGIN
            IF UPPERCASE(COPYSTR(strFilename, STRLEN(strFilename)-3,4)) =
               '.' + UPPERCASE(RelationSetup."Extension Hummingbird Appl.") THEN
            BEGIN
              OperatingSystemMgt.ClientShell(
                STRSUBSTNO('"%1"', RelationSetup."LIP Hummingbird exe"),
                STRSUBSTNO('"%1"', strFilename),
                FALSE);
            END;
          END;
          WordDoc := WordApp.Documents.OpenOld(strFilename,dummyVar,lvReadOnly)  //**4PS01.n
        END ELSE
          WordDoc := WordApp.Documents.AddOld();
      END ELSE BEGIN
        WordDoc := WordApp.Documents.AddOld(strFilename);
      END;

      WordApp.ActiveWindow.ActivePane.View.Type(3); //print view
      //WordApp.ActiveWindow.View.ShowPicturePlaceHolders := FALSE; //figures standard displayed
      //WordApp.ActiveWindow.SetFocus();
      //WordApp.ShowMe();
    END;

    PROCEDURE UpdateFields@1210190006();
    BEGIN
      WordApp.ActiveDocument.Fields.Update;
    END;

    PROCEDURE Close@23();
    BEGIN
      //WordApp.ActiveDocument.Fields.Unlink;  //AH: This will remove all fields in the document !!
      WordDoc.Close();
    END;

    PROCEDURE Close2@1100485000(SaveChanges@1100485000 : Boolean);
    BEGIN
      WordDoc.Close(SaveChanges)
    END;

    PROCEDURE Terminate@25();
    BEGIN
      IF WordApp.Documents.Count = 0 THEN BEGIN     //**4PS.n call 22345
      WordApp.Quit();
      END;
      CLEAR(WordApp);
    END;

    PROCEDURE Print@28();
    VAR
      lBlnBackground@11012000 : Boolean;
    BEGIN
      lBlnBackground := FALSE;
      WordDoc.PrintOutOld(lBlnBackground);
    END;

    PROCEDURE PrintToSelectedPrinter@1100485001(lPrinter@1100485000 : Text[250]);
    VAR
      lBlnBackground@11012000 : Boolean;
      lOldPrinter@1100485001 : Text[250];
      Positie_1@1100525000 : Integer;
      Positie_2@1100525001 : Integer;
      lText@1100525004 : Text[250];
      Name_1@1100525005 : Text[250];
      Name_2@1100525006 : Text[250];
    BEGIN
      //Citrix has sometimes this kind of printers "PR04010608 on hglfs01 (from SR01517) in session 17"
      //For technical reason this must become: \\hglfs01\pr04010608
      //So \\%"3rd word"\%"1st word"
      Positie_1 := STRPOS(lPrinter, ' on ');
      Positie_2 := STRPOS(lPrinter, 'from ');
      IF (Positie_1 > 0) AND  (Positie_2 > 0) THEN BEGIN
        lText := lPrinter;
        Positie_1 := STRPOS(lText, ' ');
        IF Positie_1 > 1 THEN
          Name_1 := COPYSTR(lText, 1, Positie_1 - 1);
        lText := COPYSTR(lText, Positie_1 +1);  // delete printername
        Positie_1 := STRPOS(lText, ' ');
        lText := COPYSTR(lText, Positie_1 +1);  // delete ' on '
        Positie_1 := STRPOS(lText, ' ');
        IF Positie_1 > 1 THEN
          Name_2 := COPYSTR(lText, 1, Positie_1 - 1);
        IF (Name_1 <> '') AND (Name_2 <> '') THEN BEGIN
          lPrinter := '\\' + Name_2 + '\' + Name_1;
        END
      END;
      lOldPrinter := WordApp.ActivePrinter;
      lBlnBackground := FALSE;
      WordApp.ActivePrinter(lPrinter);
      WordDoc.PrintOutOld(lBlnBackground);
      WordApp.ActivePrinter(lOldPrinter);
    END;

    PROCEDURE PrintWithPrinterSelection@1210190000();
    VAR
      lvVariant@1210190000 : Variant;
    BEGIN
      lvVariant := WordApp.Dialogs.Item(88).Show;  //* Dialog 'Printer selection'

      WaitForPrinter;
    END;

    PROCEDURE WaitForPrinter@1100485009();
    BEGIN
      // Wait for print job to finish
      IF WordApp.BackgroundPrintingStatus <> 0 THEN
       REPEAT
        SLEEP(100);
       UNTIL WordApp.BackgroundPrintingStatus = 0;
    END;

    PROCEDURE InitTableFields@29(TableNoInt@1210190000 : Integer;DeleteRows@1199198000 : Boolean);
    VAR
      NoRows@1199197400 : Integer;
      i@1199197401 : Integer;
    BEGIN
      //C024324.sn
      IF TableNoInt = TableNoAlreadyInit THEN
        EXIT;
      TableNoAlreadyInit := TableNoInt;
      //C024324.en
      WordTable := WordDoc.Tables.Item(TableNoInt);
      NoColumns := WordTable.Columns.Count;
      //NoRows := WordTable.Rows.Count; //C024324.o

      // Delete rows
      IF DeleteRows THEN BEGIN
        NoRows := WordTable.Rows.Count; //C024324.n
        FOR i := 1 TO NoRows - 1 DO BEGIN
          WordTable.Rows.Item(2).Delete;
        END;
      END;
    END;

    PROCEDURE FillTableElementOld@30(FieldData@11012000 : Text[250]);
    BEGIN
      IF Element <= NoColumns THEN
        WordRow.Cells.Item(Element).Range.Text := FieldData;
      Element += 1;
    END;

    PROCEDURE FillTableElement@1210190005(FieldData@11012000 : Text[250];iElement@1210190000 : Integer);
    BEGIN
      //C024324.sn
      IF FieldData = '' THEN
        EXIT;
      //C024324.en
      IF (iElement <= NoColumns) AND (iElement >= 1)THEN
        WordRow.Cells.Item(iElement).Range.Text := FieldData;
    END;

    PROCEDURE TableNewRow@31();
    BEGIN
      WordRow   := WordTable.Rows.Add;
      Element   := 1;
    END;

    PROCEDURE TableDelete@1199198000();
    BEGIN
      WordTable.Delete;
    END;

    PROCEDURE ReplaceField@18(Fieldname@11012000 : Text[250];FieldData@11012001 : Text[250]);
    BEGIN
      {
      expression.Execute(FindText, MatchCase, MatchWholeWord, MatchWildcards,
                         MatchSoundsLike, MatchAllWordForms, Forward, Wrap,
                         Format, ReplaceWith, Replace)
      }

      IF NOT BeenHere THEN BEGIN
        wdRange := WordDoc.Content(); // Range is ENTIRE document
        wdFind  := wdRange.Find();    // Search in entire range (once, so guarded with BOOLEAN)
        BeenHere := TRUE;
      END;
      Fieldname := '@' + Fieldname + '@';

      ReplaceAll := 2;
      wdFind.ExecuteOld(Fieldname, Flag0, Flag1, Flag0, Flag0, Flag0, Flag0, Flag0, Flag0, FieldData, ReplaceAll);
    END;

    PROCEDURE SetPassword@24(strPassword@11012000 : Text[250]);
    BEGIN
      WordDoc.Password := strPassword;
    END;

    PROCEDURE CentimetersToPoints@21(Centimeters@11012001 : Decimal) Points@11012000 : Decimal;
    BEGIN
      EXIT(Centimeters * 28.35);
    END;

    PROCEDURE GoToEndOfFile@1210190003();
    VAR
      lvArg@1210190000 : Integer;
    BEGIN
      lvArg := 6;
      WordApp.Selection.EndKey(lvArg);
    END;

    PROCEDURE AddTabstop@12(Points@11012000 : Decimal;Alignment@11012001 : Code[10];FillCharacter@11012002 : Code[10]);
    VAR
      flagx@11012003 : Integer;
      flagy@11012004 : Integer;
    BEGIN
      flagx := 3;
      CASE Alignment OF
        Text000, Text001:
          flagx := 0;
        Text002, Text003, Text004:
          flagx := 1;
        Text005, Text006:
          flagx := 2;
        Text007, Text008:
          flagx := 3;
        Text009, Text010:
          flagx := 4;
      END;
      CASE FillCharacter OF
        Text011, Text012, Text013, Text014:
          flagy := 0;
        Text015, Text016, Text017:
          flagy := 1;
        Text018, Text019, Text020, Text021:
          flagy := 2;
        Text022:
          flagy := 3;
      END;
      WordApp.Selection.ParagraphFormat.TabStops.Add(Points, flagx, flagy);
    END;

    PROCEDURE AddPageBreak@1210190002();
    BEGIN
      WordApp.Selection.InsertBreak;
    END;

    PROCEDURE AddFile@1210190004(IFile@1210190000 : Text[250]);
    BEGIN
      WordApp.Selection.InsertFile(IFile);
    END;

    PROCEDURE AddHyperlink@26(strLink@11012000 : Text[250]);
    BEGIN
      WordDoc.Hyperlinks._Add(WordApp.Selection.Range, strLink);
    END;

    PROCEDURE WriteTab@20();
    VAR
      strTab@11012000 : Text[1];
    BEGIN
      strTab[1] := 9;
      Write(strTab);
    END;

    PROCEDURE FillBookmark@19(NameBookmark@11012000 : Text[250];DataBookmark@11012001 : Text[250];PrintBold@11012002 : Boolean;PrintUnderline@11012003 : Boolean;PrintItalic@11012004 : Boolean;KeepBookMarks@1199198000 : Boolean);
    BEGIN
      IF WordDoc.Bookmarks.Exists(NameBookmark) THEN BEGIN
        // KeepBookMarks, bookmarks in document will be saved
        IF KeepBookMarks THEN BEGIN
          WordBookmark := WordDoc.Bookmarks.Item(NameBookmark);
          WordBookmark.Select();
          SetBold(PrintBold);
          SetUnderline(PrintUnderline);
          SetItalic(PrintItalic);
          wdRange := WordBookmark.Range;
          wdRange.Text := DataBookmark; // Bookmark is deleted.
          wdRange.Select();

          //Restore bookmark.
          //WordDoc.Bookmarks.Add(NameBookmark, wdRange);
          WordApp.Selection.Bookmarks.Add(NameBookmark);
        END ELSE BEGIN
          WordBookmark := WordDoc.Bookmarks.Item(NameBookmark);
          WordBookmark.Select();
          SetBold(PrintBold);
          SetUnderline(PrintUnderline);
          SetItalic(PrintItalic);
          WordBookmark.Range.Text := DataBookmark; // After this action bookmark disappeared
        END;
      END;
    END;

    PROCEDURE FillBookmarkPicture@1210190001(NameBookmark@11012000 : Text[250];DataBookmark@11012001 : Text[250]);
    BEGIN
      IF (DataBookmark = '') THEN
        EXIT;
      IF WordDoc.Bookmarks.Exists(NameBookmark) THEN BEGIN
        IF FileMgt.ClientFileExists(DataBookmark) THEN BEGIN
          WordBookmark := WordDoc.Bookmarks.Item(NameBookmark);
          WordBookmark.Select();
          WordApp.Selection.InlineShapes.AddPicture(DataBookmark);
        END;
      END;
    END;

    PROCEDURE NewLines@3(NoOfLines@11012000 : Integer);
    VAR
      i@11012001 : Integer;
    BEGIN
      FOR i := 1 TO NoOfLines DO
        WordApp.Selection.TypeParagraph();
    END;

    PROCEDURE Write@4(strText@11012000 : Text[250]);
    BEGIN
      WordApp.Selection.TypeText := strText;
    END;

    PROCEDURE WriteLn@1(strText@11012000 : Text[250]);
    BEGIN
      Write(strText);
      NewLines(1);
    END;

    PROCEDURE Display@5();
    BEGIN
      WordApp.Visible := TRUE;
      WordApp.Activate; // jhoek.261010
    END;

    PROCEDURE SetBold@2(OnOff@11012000 : Boolean);
    BEGIN
      IF OnOff THEN
        WordApp.Selection.Font.Bold := 1
      ELSE
        WordApp.Selection.Font.Bold := 0;
    END;

    PROCEDURE SetColour@8(colour@11012000 : Code[20]);
    BEGIN
      CASE colour OF
        Text023:
          WordApp.Selection.Font.ColorIndex := 0;
        Text024, Text025:
          WordApp.Selection.Font.ColorIndex := 1;
        Text026, Text027:
          WordApp.Selection.Font.ColorIndex := 2;
        Text028, Text029:
          WordApp.Selection.Font.ColorIndex := 3;
        Text030, Text031, Text032:
          WordApp.Selection.Font.ColorIndex := 4;
        Text033:
          WordApp.Selection.Font.ColorIndex := 5;
        Text034, Text035:
          WordApp.Selection.Font.ColorIndex := 6;
        Text036, Text037:
          WordApp.Selection.Font.ColorIndex := 7;
        Text038, Text039:
          WordApp.Selection.Font.ColorIndex := 8;
        Text040, Text041:
          WordApp.Selection.Font.ColorIndex := 9;
        Text042, Text043:
          WordApp.Selection.Font.ColorIndex := 10;
        Text044, Text045:
          WordApp.Selection.Font.ColorIndex := 11;
        Text046:
          WordApp.Selection.Font.ColorIndex := 12;
        Text047, Text048:
          WordApp.Selection.Font.ColorIndex := 13;
        Text049, Text050:
          WordApp.Selection.Font.ColorIndex := 14;
        Text051, Text052:
          WordApp.Selection.Font.ColorIndex := 15;
        Text053, Text054:
          WordApp.Selection.Font.ColorIndex := 16;
      END;
    END;

    PROCEDURE SetAlignment@10(Direction@11012000 : Code[20]);
    BEGIN
      CASE Direction OF
        Text001, Text000:
          WordApp.Selection.ParagraphFormat.Alignment := 0;
        Text002, Text055:
          WordApp.Selection.ParagraphFormat.Alignment := 1;
        Text005, Text006:
          WordApp.Selection.ParagraphFormat.Alignment := 2;
        Text056:
          WordApp.Selection.ParagraphFormat.Alignment := 3;
      END;
    END;

    PROCEDURE SetFont@9(Name@11012000 : Text[250]);
    BEGIN
      WordApp.Selection.Font.Name := Name;
    END;

    PROCEDURE SetFontGlobal@22(Name@11012000 : Text[250]);
    BEGIN
      wdRange := WordDoc.Content();
      wdRange.Font.Name := Name;
    END;

    PROCEDURE SetFontSize@7(Size@11012000 : Integer);
    BEGIN
      WordApp.Selection.Font.Size := Size;
    END;

    PROCEDURE SetUnderline@11(OnOff@11012000 : Boolean);
    BEGIN
      IF OnOff THEN
        WordApp.Selection.Font.Underline := 1
      ELSE
        WordApp.Selection.Font.Underline := 0;
    END;

    PROCEDURE SetItalic@13(OnOff@11012000 : Boolean);
    BEGIN
      IF OnOff THEN
        WordApp.Selection.Font.Italic := 1
      ELSE
        WordApp.Selection.Font.Italic := 0;
    END;

    PROCEDURE Indent@14();
    BEGIN
      WordApp.Selection.Paragraphs.Indent();
    END;

    PROCEDURE Outdent@15();
    BEGIN
      WordApp.Selection.Paragraphs.Outdent();
    END;

    PROCEDURE DotExtension@1100485002() DotExt : Text[5];
    VAR
      VersionText@1100485000 : Text[30];
      Version@1100485001 : Integer;
    BEGIN
      VersionText := WordVersion;
      IF STRPOS(VersionText,'.') <> 0 THEN
        VersionText := COPYSTR(VersionText,1,STRPOS(VersionText,'.')-1);
      EVALUATE(Version,VersionText);

      IF Version < 12 THEN
        DotExt := '.dot'
      ELSE
        DotExt := '.dotx';
    END;

    PROCEDURE DocExtension@1100485003() DocExt : Text[5];
    VAR
      VersionText@1100485001 : Text[30];
      Version@1100485000 : Integer;
    BEGIN
      VersionText := WordVersion;
      IF STRPOS(VersionText,'.') <> 0 THEN
        VersionText := COPYSTR(VersionText,1,STRPOS(VersionText,'.')-1);
      EVALUATE(Version,VersionText);

      IF Version < 12 THEN
        DocExt := '.doc'
      ELSE
        DocExt := '.docx';
    END;

    PROCEDURE WordVersion@1100485004() : Text[30];
    VAR
      lWordApp@1100485000 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209FF-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
    BEGIN
      IF ISCLEAR(lWordApp) THEN
        CREATE(lWordApp, FALSE, TRUE);

      EXIT(COPYSTR(lWordApp.Version,1,30));

      CLEAR(lWordApp);
    END;

    PROCEDURE ApplicableExtension@1100485005(lvExtension@1100485000 : Text[30];lvDoc@1100485001 : Boolean;lvDot@1100485002 : Boolean) : Boolean;
    BEGIN
      lvExtension := UPPERCASE(lvExtension);
      IF lvDot THEN BEGIN
        IF (lvExtension = '.DOT') OR
           (lvExtension = '.DOTX') THEN
          EXIT(TRUE)
        ELSE
          IF NOT lvDoc THEN
            EXIT(FALSE);
      END;

      IF (lvExtension = '.DOC') OR
         (lvExtension = '.DOCX') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ExistingFileName@1100485006(lvFileName@1100485000 : Text[1000];lvDoc@1100485001 : Boolean;lvDot@1100485002 : Boolean;VAR lvExtension@1100485004 : Text[5]) : Boolean;
    BEGIN
      lvExtension := '';

      //**4PS
      //IF lvDot THEN BEGIN
      //  IF EXISTS(lvFileName + '.dot') OR EXISTS(lvFileName + '.dotx') THEN BEGIN
      //    IF EXISTS(lvFileName + '.dot') THEN
      //      lvExtension := '.dot';
      //    IF EXISTS(lvFileName + '.dotx') THEN
      //      lvExtension := '.dotx';
      //    EXIT(TRUE)
      //  END ELSE
      //    IF NOT lvDoc THEN
      //      EXIT(FALSE);
      //END;

      //IF EXISTS(lvFileName + '.doc') OR EXISTS(lvFileName + '.dotx') THEN BEGIN
      //  IF EXISTS(lvFileName + '.doc') THEN
      //    lvExtension := '.doc';
      //  IF EXISTS(lvFileName + '.dotx') THEN
      //    lvExtension := '.dotx';
      //  EXIT(TRUE)
      //END ELSE
      //  EXIT(FALSE);

      IF lvDot THEN BEGIN
        IF FileMgt.ClientFileExists(lvFileName) THEN BEGIN
          IF STRPOS(lvFileName, '.dotx') > 0 THEN BEGIN
            lvExtension := '.dotx';
            EXIT(TRUE);
          END;
          IF STRPOS(lvFileName, '.dot') > 0 THEN BEGIN
            lvExtension := '.dot';
            EXIT(TRUE);
          END;
        END;

        EXIT(FALSE);
      END;

      IF FileMgt.ClientFileExists(lvFileName + '.doc') THEN BEGIN
        lvExtension := '.doc';
        EXIT(TRUE);
      END;
      IF FileMgt.ClientFileExists(lvFileName + '.docx') THEN BEGIN
        lvExtension := '.docx';
        EXIT(TRUE);
      END;

      EXIT(FALSE);
      //**4PS
    END;

    PROCEDURE DocfromDot@1100485007(lvDotStr@1100485000 : Text[30]) lvDocStr : Text[30];
    BEGIN
      IF UPPERCASE(lvDotStr) = '.DOTX' THEN
        lvDocStr := '.docx'
      ELSE
        lvDocStr := '.doc'
    END;

    PROCEDURE wdFormatHTML@1100528700() : Integer;
    BEGIN
      //**4PS
      EXIT(8);
    END;

    BEGIN
    END.
  }
}

