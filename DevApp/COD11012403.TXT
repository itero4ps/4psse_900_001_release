OBJECT Codeunit 11012403 External Document Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text11012000@1210190000 : TextConst 'ENU=File "%1" does not exist.';
      CRMSetup@1210190001 : Record 5079;
      Text11012001@1210190002 : TextConst 'ENU=The file %1 already exists.';
      Text11012002@1210190003 : TextConst 'ENU=%1 ''%2'' does not exist';
      FileMgt@1100525003 : Codeunit 419;
      Text11012003@1100525000 : TextConst 'ENU=Find the attachements of ''%1'' as attachements of this e-mail.';
      Text11012004@1100525001 : TextConst 'ENU=Folder "%1" cannot be found.';
      Text11012005@1100525002 : TextConst 'ENU=The transmittal has failed.';
      gvFromRegisterDocs@1100525006 : Boolean;
      Text11012007@1100525005 : TextConst 'ENU=The file %1 was already registered.';
      Text11012008@1100525004 : TextConst 'ENU=The file %1 already exists. And is not replaced.';

    PROCEDURE FileDrillDown@1100528700(DocumentProperties@1100528701 : Record 11012746);
    VAR
      FileMgt@1100528702 : Codeunit 419;
    BEGIN
      FileMgt.OpenFileDialog('', TotalFileName(DocumentProperties."Document Type", DocumentProperties.File, DocumentProperties."Internal Company"), '');
    END;

    PROCEDURE BrowseForFile@1210190001(VAR lFilename@1210190003 : Text[250];lDocType@1210190001 : Code[20]);
    VAR
      lTxtDocument@1210190004 : Text[250];
      DefaultSourceDirExtDoc@1100525000 : Text[1024];
      ShortFileName@1100525001 : Text;
    BEGIN
      //lFileName: output param: the filepath of file on its final destination
      CRMSetup.GET;
      DefaultSourceDirExtDoc := CRMSetup."Default Source Dir.Ext.Doc";
      FileMgt.SelectFile('', DefaultSourceDirExtDoc, ShortFileName, lTxtDocument);
      CLEAR(CRMSetup."Search Directory");  //db, 02-08-05
      IF lTxtDocument = '' THEN
        EXIT;
      IF COPYSTR(lTxtDocument, STRLEN(lTxtDocument)) = '\' THEN
        EXIT; // lTxtDocument ends with '\', this means that no file has been selected.

      RegisterFile(lTxtDocument, lDocType);

      lFilename := lTxtDocument;
    END;

    PROCEDURE RegisterFileCopyOnly@1100528100(VAR Filename@1100528101 : Text[250];DocType@1100528100 : Code[20]);
    VAR
      UnusedReturnTargetDirectory@1100525000 : Text;
    BEGIN
      DoRegisterFile(Filename,DocType,TRUE,UnusedReturnTargetDirectory);
    END;

    PROCEDURE RegisterFile@1199197400(VAR Filename@1210190003 : Text[250];DocType@1210190001 : Code[20]);
    VAR
      UnusedReturnTargetDirectory@1100525000 : Text;
    BEGIN
      DoRegisterFile(Filename,DocType,GetCopyOrMove(''),UnusedReturnTargetDirectory);
    END;

    PROCEDURE RegisterFileGiveMessage@1100525012(VAR Filename@1210190003 : Text[250];DocType@1210190001 : Code[20]);
    VAR
      UnusedReturnTargetDirectory@1100525000 : Text;
    BEGIN
      gvFromRegisterDocs := TRUE;
      DoRegisterFile(Filename,DocType,GetCopyOrMove(''),UnusedReturnTargetDirectory);
    END;

    PROCEDURE RegisterFileAndReturnTargetDir@1100525017(VAR Filename@1100525001 : Text[250];DocType@1100525000 : Code[20];GiveMessage@1100525003 : Boolean;VAR ReturnTargetDirectory@1100525002 : Text);
    BEGIN
      //15-12-2015
      gvFromRegisterDocs := GiveMessage;
      DoRegisterFile(Filename,DocType,GetCopyOrMove(''),ReturnTargetDirectory);
    END;

    LOCAL PROCEDURE DoRegisterFile@1100528101(VAR lFilename@1210190003 : Text[250];lDocType@1210190001 : Code[20];CopyBln@1100528100 : Boolean;VAR ReturnTargetDirectory@1100525001 : Text);
    VAR
      lDocTypeRec@1210190006 : Record 11012405;
      SourceDirectory@1210190000 : Text[250];
      TargetDirectory@1210190005 : Text[250];
      SelectedFileName@1210190002 : Text[250];
      TargetFileName@1199197400 : Text[250];
      lvTargetFieldCaption@1100525000 : Text[100];
    BEGIN
      //lFileName: input param: the filepath of the file to register
      //           output param: the filename of file on its final destination
      ReturnTargetDirectory := '';
      IF lFilename = '' THEN
        EXIT;

      FileMgt.SplitFileAbsPathName(lFilename,SourceDirectory,SelectedFileName);

      CRMSetup.GET;
      SourceDirectory := LOWERCASE(SourceDirectory);
      TargetDirectory := LOWERCASE(CRMSetup."Default Ext. Doc. Directory");
      lvTargetFieldCaption := CRMSetup.FIELDCAPTION("Default Ext. Doc. Directory");

      IF lDocType <> '' THEN BEGIN
        IF lDocTypeRec.GET(lDocType) THEN BEGIN
          IF lDocTypeRec."Storage Directory Attachment" <> '' THEN BEGIN
            TargetDirectory := LOWERCASE(lDocTypeRec."Storage Directory Attachment");
            lvTargetFieldCaption := lDocTypeRec.FIELDCAPTION("Storage Directory Attachment");
          END;
        END;
      END;

      IF TargetDirectory = '' THEN
        CRMSetup.TESTFIELD("Default Ext. Doc. Directory");

      IF NOT FileMgt.ClientDirectoryExists(TargetDirectory) THEN
        ERROR(Text11012002, lvTargetFieldCaption, TargetDirectory);

      CopyBln := GetCopyOrMove(SourceDirectory);

      TargetFileName := SelectedFileName;
      MoveCopyUniqueFile(TargetDirectory, TargetFileName, SourceDirectory, SelectedFileName, CopyBln);
      lFilename := TargetFileName;
      ReturnTargetDirectory := TargetDirectory;
    END;

    PROCEDURE GetUniqueFileName@1100525011(VAR FileName@1100525000 : Text[250]);
    VAR
      TempFileName@1100525002 : Text[250];
      StringFunctions@1100528700 : Codeunit 11012273;
      P@1100528701 : Integer;
    BEGIN
      CRMSetup.GET;
      IF CRMSetup."Modify Filename to be Unique" THEN BEGIN
        P := StringFunctions.RSTRPOS(FileName, '.');
        IF (P > 0) AND (STRLEN(FileName) - P <= 5) THEN BEGIN
          TempFileName := FileName;
          FileName := COPYSTR(FileName, 1, P - 1);
          FileName := FileName + STRSUBSTNO('__%1_%2',
                                FORMAT(TODAY, 0, '<Closing><Day,2>-<Month,2>-<Year4>'),
                                FORMAT(TIME, 0, '<Hours24>-<Minutes,2>-<Seconds,2>'));
          FileName := FileName + COPYSTR(TempFileName, P);
        END ELSE BEGIN
          FileName := FileName + STRSUBSTNO('__%1_%2',
                                FORMAT(TODAY, 0, '<Closing><Day,2>-<Month,2>-<Year4>'),
                                FORMAT(TIME, 0, '<Hours24>-<Minutes,2>-<Seconds,2>'));
        END;
      END;
    END;

    PROCEDURE MoveCopyUniqueFile@1100525013(TargetDirectory@1210190001 : Text[250];VAR TargetFilename@1199197400 : Text[250];SourceDirectory@1210190002 : Text[250];SourceFilename@1210190003 : Text[250];CopyBln@1210190004 : Boolean) : Boolean;
    BEGIN
      GetUniqueFileName(TargetFilename);
      EXIT(MoveCopyFile(TargetDirectory, TargetFilename, SourceDirectory, SourceFilename, CopyBln));
    END;

    PROCEDURE MoveCopyFile@1210190019(TargetDirectory@1210190001 : Text[250];TargetFilename@1199197400 : Text[250];SourceDirectory@1210190002 : Text[250];SourceFilename@1210190003 : Text[250];CopyBln@1210190004 : Boolean) : Boolean;
    VAR
      UseFSO@1100525000 : Boolean;
      UNCTargetDirectory@1100409001 : Text[1024];
      UNCSourceDirectory@1100409000 : Text[1024];
      SourceIsTarget@1100525002 : Boolean;
    BEGIN
      IF (TargetDirectory = SourceDirectory) AND (TargetFilename = SourceFilename) THEN
        EXIT(TRUE);

      IF FileMgt.ClientFileExists(TargetDirectory + TargetFilename) THEN BEGIN
        IF (TargetFilename = SourceFilename) THEN BEGIN
          UNCTargetDirectory := GetUNCpath(TargetDirectory);
          UNCSourceDirectory := GetUNCpath(SourceDirectory);
          IF UPPERCASE(UNCTargetDirectory) = UPPERCASE(UNCSourceDirectory) THEN
            IF gvFromRegisterDocs THEN
              SourceIsTarget := TRUE
            ELSE
              EXIT(TRUE);

          IF SourceIsTarget THEN BEGIN
            MESSAGE(STRSUBSTNO(Text11012007, TargetDirectory + TargetFilename));
            EXIT(FALSE);
          END ELSE BEGIN
            //ERROR(STRSUBSTNO(Text11012001, TargetDirectory + TargetFilename));
            MESSAGE(STRSUBSTNO(Text11012008, TargetDirectory + TargetFilename)); //** CALL C017943.n
            EXIT(FALSE);                                                         //** CALL C017943.n
          END;
        END;
      END;

      IF CopyBln THEN
        EXIT(FileMgt.CopyClientFile4PS(
          SourceDirectory + SourceFilename,
          TargetDirectory + TargetFilename,
          TRUE))
      ELSE
        EXIT(FileMgt.RenameClientFile(
          SourceDirectory + SourceFilename,
          TargetDirectory + TargetFilename,
          TRUE));
    END;

    PROCEDURE OpenExternalDocument@1210190000(lDocType@1210190002 : Code[10];lFile@1210190001 : Text[250];Company@1100528700 : Text[30]);
    BEGIN
      IF lFile <> '' THEN
        TestAndOpenFile(TotalFileName(lDocType, lFile, Company));
    END;

    PROCEDURE PrintExternalDocument@1100525001(iDocType@1100525006 : Code[10];iFileName@1100525007 : Text[250];Company@1100528700 : Text[30]) : Boolean;
    BEGIN
      IF iFileName <> '' THEN BEGIN
        IF PrintFile(FolderName(iDocType, Company), iFileName) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE)
      END;
    END;

    PROCEDURE PrintFile@1100525002(iPath@1100525006 : Text[250];iFileName@1100525007 : Text[250]) : Boolean;
    VAR
      lvShell@1100525005 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{13709620-C279-11CE-A49E-444553540000}:'Microsoft Shell Controls And Automation'.Shell";
      lvShellItemEnum@1100525004 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{744129E0-CBE5-11CE-8350-444553540000}:'Microsoft Shell Controls And Automation'.FolderItems";
      lvShellFolder@1100525003 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{BBCBDE60-C3FF-11CE-8350-444553540000}:'Microsoft Shell Controls And Automation'.Folder";
      lvShellFolderItem@1100525002 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{2FE352EA-FD1F-11D2-B1F4-00C04F8EEB3E}:'Microsoft Shell Controls And Automation'.ShellFolderItem";
      lvShellVerbEnum@1100525008 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{1F8352C0-50B0-11CF-960C-0080C7F4EE85}:'Microsoft Shell Controls And Automation'.FolderItemVerbs";
      lvShellFolderVerb@1100525010 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{08EC3E00-50B0-11CF-960C-0080C7F4EE85}:'Microsoft Shell Controls And Automation'.FolderItemVerb";
      i@1100525001 : Integer;
      lvFileFound@1100525000 : Boolean;
      lvVerbFound@1100525009 : Boolean;
      lvVerb@1100525011 : Text[250];
      lvText001@1100525012 : TextConst 'ENU=Print';
      lvText002@1100525013 : TextConst 'ENU=Print';
      lvPath@1100525014 : Text[250];
      lvFile@1100525015 : Text[250];
      lvFilePath@1100525016 : Text[500];
    BEGIN
      //In: iPath the path to the file name not ending with a \
      //    iFile the filename (including extentsion
      //Ret: TRUE is the print method is called on the file
      //     FALSE if the print method doesn't exist
      //Error: If the file doesn't exist

      IF NOT FileMgt.ClientFileExists(iPath + '\' + iFileName) THEN
        ERROR(Text11012000,iPath + iFileName);

      CREATE(lvShell, FALSE, TRUE);

      //The print function can be invoked on a FolderItem (like with right-mouse-click in the explorer)
      //It is not possible to create a FolderItem from a file name.
      // We have to: - create a Folder object from the foldername
      //             - get the FolderItem collection
      //             - loop until we have the right file

      lvShellFolder := lvShell.NameSpace(iPath);
      lvShellItemEnum := lvShellFolder.Items();
      i := 0;
      REPEAT
        //MESSAGE( '%1',lvShellItemEnum.Count);
        lvShellFolderItem := lvShellItemEnum.Item(i);
        lvFilePath :=  lvShellFolderItem.Path ;
        FileMgt.SplitFileAbsPathName(lvFilePath,lvPath,lvFile);
        lvFileFound := (iFileName = lvFile);
        i += 1;
      UNTIL (i = lvShellItemEnum.Count()) OR lvFileFound;

      IF lvFileFound THEN BEGIN
        //check whether the "print" method is specified for this file (in the registry)
        lvShellVerbEnum := lvShellFolderItem.Verbs();
        i := 0;
        REPEAT
          lvShellFolderVerb := lvShellVerbEnum.Item(i);
          lvVerb := lvShellFolderVerb.Name;
          lvVerb := DELCHR(lvVerb, '=', '&');  //remove &
          lvVerbFound := ((lvVerb = lvText001) OR (lvVerb = lvText002));
      //this is not just in two languages!! the name of the command is
          i += 1;                                                        //dependent on the language of the application.
                                                                         //On my Dutch systems some applications have Print,
                                                                         //others have Afdrukken
        UNTIL (i = lvShellVerbEnum.Count()) OR lvVerbFound;

        IF lvVerbFound THEN BEGIN
          lvShellFolderItem.InvokeVerb('Print');                         //this is the language independent command
          SLEEP(500);
        END;
      END;
      SLEEP(500);

      CLEAR(lvShell);
      CLEAR(lvShellFolder);
      CLEAR(lvShellFolderItem);
      CLEAR(lvShellItemEnum);

      EXIT(lvFileFound AND lvVerbFound);
    END;

    PROCEDURE TotalFileName@1100485000(lDocType@1100485002 : Code[10];lFile@1100485001 : Text[250];Company@1100528700 : Text[30]) : Text[250];
    BEGIN
      EXIT(FolderName(lDocType, Company) + lFile);
    END;

    PROCEDURE FolderName@1100525000(lDocType@1100485002 : Code[10];Company@1100528700 : Text[30]) : Text[250];
    VAR
      DocumentType@1100485000 : Record 11012405;
      MarketingSetup@1100528701 : Record 5079;
    BEGIN
      IF Company <> '' THEN BEGIN
        DocumentType.CHANGECOMPANY(Company);
        MarketingSetup.CHANGECOMPANY(Company);
      END;

      IF lDocType <> '' THEN
        IF DocumentType.GET(lDocType) THEN
          IF DocumentType."Storage Directory Attachment" <> '' THEN
            EXIT(DocumentType."Storage Directory Attachment");

      MarketingSetup.GET;
      MarketingSetup.TESTFIELD("Default Ext. Doc. Directory");
      EXIT(MarketingSetup."Default Ext. Doc. Directory");
    END;

    PROCEDURE TestAndOpenFile@1210190002(lFileName@1210190000 : Text[250]);
    VAR
      objShell@1100525000 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{13709620-C279-11CE-A49E-444553540000}:'Microsoft Shell Controls And Automation'.Shell";
    BEGIN
      IF NOT FileMgt.ClientFileExists(lFileName) THEN
        ERROR(Text11012000, lFileName);

      //HYPERLINK(lFileName);   // AH: Dit kan niet gebruikt worden i.c.m. UNC paden.

      IF ISCLEAR(objShell) THEN
        CREATE(objShell, FALSE, TRUE);
      objShell.Open(lFileName);
      CLEAR(objShell);
    END;

    PROCEDURE SendExtDocToFolder@1100525003(iDocPropertiesRec@1100525000 : Record 11012746;iInclRelations@1100525001 : Boolean;iTargetDirectory@1100525002 : Text[250];Company@1100528700 : Text[30]);
    VAR
      lvDocRelRec@1100525003 : Record 11012407;
      lvRelatedDocPropertiesRec@1100525004 : Record 11012746;
    BEGIN
      // Changed input and variable form document to document properties
      CheckFolderExists(iTargetDirectory);
      CopyDocumentAttach(iDocPropertiesRec, iTargetDirectory, Company);
      IF iInclRelations THEN BEGIN
        lvDocRelRec.SETRANGE("No.", iDocPropertiesRec."No.");
        lvDocRelRec.SETRANGE("Document Type", lvDocRelRec."Document Type"::Document);
        IF lvDocRelRec.FINDFIRST THEN BEGIN
          REPEAT
            lvRelatedDocPropertiesRec.GET(lvDocRelRec."Related Document No.");
            CopyDocumentAttach(lvRelatedDocPropertiesRec, iTargetDirectory, Company);
          UNTIL lvDocRelRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyDocumentAttach@1100525005(iDocPropertiesRec@1100525001 : Record 11012746;iTargetDirectory@1100525000 : Text[250];Company@1100528700 : Text[30]);
    VAR
      lvSourceFolder@1100525004 : Text[250];
      lvSourceFile@1100525005 : Text[250];
      lvWordAutomationCU@1100525007 : Codeunit 11012400;
      lvExtension@1100525008 : Text[30];
    BEGIN
      // Changed input and variable form document to document properties
      IF iDocPropertiesRec.File <> '' THEN BEGIN
        IF iDocPropertiesRec."External Document" THEN BEGIN
          //When engineering documents are created from a document package and the changes must be highlighted then the
          //resulting file is attached to the document (so file is not empty)
          MoveCopyFile(iTargetDirectory, iDocPropertiesRec.File,
            FolderName(iDocPropertiesRec."Document Type", Company), iDocPropertiesRec.File, TRUE);
        END ELSE BEGIN
          IF lvWordAutomationCU.ExistingFileName(iDocPropertiesRec.File, TRUE, FALSE, lvExtension) THEN BEGIN
            FileMgt.SplitFileAbsPathName(iDocPropertiesRec.File + lvExtension,lvSourceFolder,lvSourceFile);
            MoveCopyFile(iTargetDirectory, lvSourceFile, lvSourceFolder, lvSourceFile, TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE SendExtDocToEmail@1100525004(iDocPropertiesRec@1100525002 : Record 11012746;iInclRelations@1100525001 : Boolean;iEmail@1100525000 : Text[260];iZip@1100525006 : Boolean;Company@1100528700 : Text[30]);
    VAR
      OperatingSystemMgt@1100525004 : Codeunit 11012364;
      lvMail@1100525008 : Codeunit 397;
      lvTempDirFile@1100525007 : Text[260];
      Body@1100525003 : Text[1024];
      CRLF@1100525009 : Text[2];
    BEGIN
      CRLF := ' ';
      CRLF[1] := 13;
      CRLF[2] := 10;

      iDocPropertiesRec.TESTFIELD(Description);
      Body := iDocPropertiesRec."Salutation (Formal)" + CRLF + CRLF;
      Body := Body + STRSUBSTNO(Text11012003, iDocPropertiesRec.Description);

      IF iZip THEN BEGIN
        lvTempDirFile :=
          OperatingSystemMgt.ClientEnviron('TEMP') + '\' + iDocPropertiesRec.Description + '.zip';
        SendExtDocToZIP(iDocPropertiesRec, iInclRelations, lvTempDirFile, Company);
      END ELSE BEGIN
        //Because of using Mail codeunit we cannot have multiple attachments, so only sent the main document, not the related ones
        lvTempDirFile := iDocPropertiesRec.FullFileName;
      END;

      IF NOT lvMail.NewMessage(iEmail, '','',iDocPropertiesRec.Description,Body,lvTempDirFile,TRUE) THEN
        ERROR(Text11012005);
    END;

    PROCEDURE SendExtDocToZIP@1100525007(iDocPropertiesRec@1100525002 : Record 11012746;iInclRelations@1100525001 : Boolean;iZIPFile@1100525000 : Text[260];Company@1100528700 : Text[30]);
    VAR
      lvDocRelRec@1100525005 : Record 11012407;
      lvRelatedDocPropertiesRec@1100525004 : Record 11012746;
      lvAutomationCU@1100525003 : Codeunit 11020216;
    BEGIN
      // Changed input and variable form document to document properties
      lvAutomationCU.CreateZipFile(iZIPFile);
      ZIPDocumentAttach(iDocPropertiesRec, lvAutomationCU, Company);
      IF iInclRelations THEN BEGIN
        lvDocRelRec.SETRANGE("No.", iDocPropertiesRec."No.");
        lvDocRelRec.SETRANGE("Document Type", lvDocRelRec."Document Type"::Document);
        IF lvDocRelRec.FINDFIRST THEN BEGIN
          REPEAT
            lvRelatedDocPropertiesRec.GET(lvDocRelRec."Related Document No.");
            ZIPDocumentAttach(lvRelatedDocPropertiesRec, lvAutomationCU, Company);
          UNTIL lvDocRelRec.NEXT = 0;
        END;
      END;
      lvAutomationCU.BuildAndCloseZipFile;
    END;

    LOCAL PROCEDURE ZIPDocumentAttach@1100525008(iDocPropertiesRec@1100525001 : Record 11012746;VAR iAutomationCu@1100525002 : Codeunit 11020216;Company@1100528700 : Text[30]);
    VAR
      lvWordAutomationCU@1100525008 : Codeunit 11012400;
      lvExtension@1100525003 : Text[30];
    BEGIN
      IF iDocPropertiesRec.File <> '' THEN BEGIN
        IF iDocPropertiesRec."External Document" THEN BEGIN
          //When engineering documents are created from a document package and the changes must be highlighted then the
          //resulting file is attached to the document (so file is not empty)
          iAutomationCu.AddFileToZip(FolderName(iDocPropertiesRec."Document Type", Company) + iDocPropertiesRec.File);
        END ELSE BEGIN
          IF lvWordAutomationCU.ExistingFileName(iDocPropertiesRec.File, TRUE, FALSE, lvExtension) THEN BEGIN
            iAutomationCu.AddFileToZip(iDocPropertiesRec.File + lvExtension);
          END;
        END;
      END;
    END;

    PROCEDURE SendExtDocToPrinter@1100525010(iDocPropertiesRec@1100525002 : Record 11012746;iInclRelations@1100525001 : Boolean);
    VAR
      lvDocRelRec@1100525005 : Record 11012407;
      lvRelatedDocRec@1100525004 : Record 11012746;
    BEGIN
      iDocPropertiesRec.PrintDocument();
      IF iInclRelations THEN BEGIN
        lvDocRelRec.SETRANGE("No.", iDocPropertiesRec."No.");
        lvDocRelRec.SETRANGE("Document Type", lvDocRelRec."Document Type"::Document);
        IF lvDocRelRec.FINDFIRST THEN BEGIN
          REPEAT
            lvRelatedDocRec.GET(lvDocRelRec."Related Document No.");
            lvRelatedDocRec.PrintDocument();
          UNTIL lvDocRelRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckFolderExists@1100525009(iFolder@1100525000 : Text[1024]);
    BEGIN
      IF NOT FileMgt.ClientDirectoryExists(iFolder) THEN
        ERROR(STRSUBSTNO(Text11012004, iFolder));
    END;

    PROCEDURE GetUNCpath@1100525006(SrcPath@1100525000 : Text[260]) UNCPath : Text[1024];
    VAR
      fso@1100525002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      oDrive@1100525003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B1-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Drive";
      v@1100525004 : Variant;
      DriveType@1100525005 : Integer;
    BEGIN
      //** CALL C017943 This function copied from mibuso :http://www.mibuso.com/forum/viewtopic.php?t=58058
      //PROCEDURE GetUNCPath(SrcPath : Text[260]) UNCPath : Text[1024];
      //    VAR
      //     fso : Automation 'Windows Script Host Object Model'.FileSystemObject";
      //      oDrive : Automation 'Windows Script Host Object Model'.Drive";
      //      v : Variant;
      //      DriveType : Integer;
      IF SrcPath = '' THEN
        EXIT(SrcPath);

      IF ISCLEAR(fso) THEN
        CREATE(fso,FALSE,TRUE);

      UNCPath := fso.GetAbsolutePathName(SrcPath);
      oDrive := fso.GetDrive(fso.GetDriveName(UNCPath));
      v := oDrive.DriveType;
      IF v.ISINTEGER THEN
        DriveType := oDrive.DriveType
      ELSE
        DriveType := 0;

      IF (DriveType = 3) AND (UNCPath[2] = ':') THEN // network path w/ drive letter
        UNCPath := oDrive.ShareName + COPYSTR(UNCPath,3);

      //** CALL C017943 toevoeging laatste \
      IF COPYSTR(UNCPath, STRLEN(UNCPath)) <> '\' THEN BEGIN
        UNCPath := UNCPath + '\';
      END;
      //
    END;

    LOCAL PROCEDURE GetCopyOrMove@1100525016(SourceDirectory@1100525000 : Text) CopyBln : Boolean;
    BEGIN
      CRMSetup.GET;

      CASE CRMSetup."Remove SourceFile" OF
        CRMSetup."Remove SourceFile"::Never:
          CopyBln := TRUE;
        CRMSetup."Remove SourceFile"::Allways:
          CopyBln := FALSE;
        ELSE
          CopyBln := LOWERCASE(SourceDirectory)<>LOWERCASE(CRMSetup."Default Source Dir.Ext.Doc");
      END;
    END;

    BEGIN
    {
      4PS, MVos, 20-05-2010:
       - Changed functions:
          - SendExtDocToFolder
          - CopyDocumentAttach
          - SendExtDocToEmail
          - SendExtDocToZIP
          - MailDocumentAttach
          - ZIPDocumentAttach
          - SendExtDocToZIP
    }
    END.
  }
}

