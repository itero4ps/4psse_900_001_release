OBJECT Codeunit 11012405 Document Management Webservice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            errorMsg@1100528103 : Text[250];
            contents@1100528100 : BigText;
          BEGIN
            contents.ADDTEXT('RGl0IGlzIGVlbiB0ZWtzdCB2YW4gSmFjY28u');
            SaveBase64EncodedDocument('DO140150', contents, errorMsg);
          END;

  }
  CODE
  {
    VAR
      Text001@1100528101 : TextConst 'ENU=File %1 allready exists.';
      Text002@1100528100 : TextConst 'ENU=File %1 does not exist.';
      Text003@1100528102 : TextConst 'ENU=Document %1 does not exist.';

    PROCEDURE AreDocumentsPresent@1100528101(tableNo@1100528100 : Integer;entityKeys@1100528101 : ARRAY [250] OF Code[20];VAR documentsArePresent@1100528102 : ARRAY [250] OF Boolean);
    VAR
      FilterFor@1100409000 : 'SPT,MOB,FSW';
      i@1100528103 : Integer;
    BEGIN
      FilterFor := FilterFor::SPT;
      i := 1;
      REPEAT
        IF entityKeys[i] <> '' THEN
          documentsArePresent[i] := AreDocumentsPresentForOne(tableNo, entityKeys[i], FilterFor)
        ELSE
          documentsArePresent[i] := FALSE;
        i += 1;
      UNTIL i = 250;
    END;

    LOCAL PROCEDURE AreDocumentsPresentForOne@1100528104(tableNo@1100528102 : Integer;entityKey@1100528101 : Code[20];FilterFor@1100409001 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable') : Boolean;
    VAR
      DocumentProperties@1100528103 : Record 11012746;
      EntityKeyArr@1100528100 : ARRAY [5] OF Code[20];
    BEGIN
      EntityKeyArr[1] := entityKey;
      GetDocuments(tableNo, EntityKeyArr, DocumentProperties, FilterFor);
      EXIT(NOT DocumentProperties.ISEMPTY());
    END;

    PROCEDURE DoGetDocumentNos@1100409001(tableNo@1100528100 : Integer;entityKey@1100528101 : Code[20];VAR documentNos@1100528102 : ARRAY [250] OF Code[20];FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable');
    VAR
      DocumentProperties@1100528104 : Record 11012746;
      i@1100528103 : Integer;
      EntityKeyArr@1100528105 : ARRAY [5] OF Code[20];
    BEGIN
      EntityKeyArr[1] := entityKey;
      GetDocuments(tableNo, EntityKeyArr, DocumentProperties, FilterFor);
      i := 1;
      IF DocumentProperties.FINDSET THEN BEGIN
        REPEAT
          documentNos[i] := DocumentProperties."No.";
          i += 1;
        UNTIL (DocumentProperties.NEXT = 0) OR (i = 250);
      END;
    END;

    PROCEDURE DoGetDocumentNos2@1100528107(tableNo@1100528100 : Integer;entityKey@1100528105 : ARRAY [5] OF Code[20];VAR documentNos@1100528102 : ARRAY [250] OF Code[20];FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable');
    VAR
      DocumentProperties@1100528104 : Record 11012746;
      i@1100528103 : Integer;
    BEGIN
      GetDocuments(tableNo, entityKey, DocumentProperties, FilterFor);
      i := 1;
      IF DocumentProperties.FINDSET THEN BEGIN
        REPEAT
          documentNos[i] := DocumentProperties."No.";
          i += 1;
        UNTIL (DocumentProperties.NEXT = 0) OR (i = 250);
      END;
    END;

    PROCEDURE GetDocumentNos@1100528102(tableNo@1100528100 : Integer;entityKey@1100528101 : Code[20];VAR documentNos@1100528102 : ARRAY [250] OF Code[20]);
    VAR
      FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable';
    BEGIN
      //Warning!!! Only use for SPT
      FilterFor := FilterFor::SPT;
      DoGetDocumentNos(tableNo, entityKey, documentNos, FilterFor);
    END;

    LOCAL PROCEDURE GetDocuments@1100528103(TableNo@1100528100 : Integer;EntityKey@1100528101 : ARRAY [5] OF Code[20];VAR DocumentProperties@1100528102 : Record 11012746;FilterFor@1100409000 : 'SPT,MOB,FSW,,,,,,,,,NotApplicable');
    VAR
      RecRef@1100528103 : RecordRef;
      PrimKeyRef@1100525001 : KeyRef;
      PrimFieldRef@1100525002 : FieldRef;
      DocumentLinkManagement@1100528108 : Codeunit 11012401;
      i@1100528104 : Integer;
    BEGIN
      CASE FilterFor OF
        FilterFor::SPT:
          BEGIN
            DocumentProperties.SETRANGE("Publish on Service Portal", TRUE);
          END;
        FilterFor::MOB:
          BEGIN
            DocumentProperties.SETRANGE("Available for Field Service", TRUE);
          END;
        FilterFor::FSW:
          BEGIN
            DocumentProperties.SETRANGE("Available for Field Service", TRUE);
          END;
      END;
      RecRef.OPEN(TableNo);
      i := 1;
      PrimKeyRef := RecRef.KEYINDEX(1);
      REPEAT
        PrimFieldRef := PrimKeyRef.FIELDINDEX(i);
        PrimFieldRef.VALUE := EntityKey[i];
        i += 1;
      UNTIL i > PrimKeyRef.FIELDCOUNT;
      IF NOT RecRef.FIND('=') THEN
        RecRef.INIT;
      DocumentLinkManagement.GetDocuments(DocumentProperties, RecRef);
      DocumentProperties.MARKEDONLY(TRUE);
    END;

    PROCEDURE LinkDocument@1100531000(TableNo@1100528100 : Integer;EntityKey@1100528101 : Code[20];documentNo@1100528102 : Code[20]);
    VAR
      EntityKeyArr@1100528300 : ARRAY [5] OF Code[20];
    BEGIN
      EntityKeyArr[1] := EntityKey;
      LinkDocument2(1, TableNo, EntityKeyArr, documentNo);
    END;

    PROCEDURE LinkDocument2@1100528300(Action@1100528315 : ',Insert,,Delete';TableNo@1100528100 : Integer;EntityKey@1100528101 : ARRAY [5] OF Code[20];DocumentNo@1100528102 : Code[20]);
    VAR
      RecRef@1100528304 : RecordRef;
      DocumentLinkManagement@1100528303 : Codeunit 11012401;
      DocLinkRID@1100528306 : ARRAY [5] OF RecordID;
      DocumentProperties@1100531002 : Record 11012746;
    BEGIN
      DocumentLinkManagement.GetLinkDocRecRef(TableNo, EntityKey, RecRef);

      DocumentProperties.GET(DocumentNo);
      CASE Action OF
        Action::Insert: BEGIN
          DocLinkRID[1] := RecRef.RECORDID;
          DocumentLinkManagement.CreateDocumentLink(DocumentProperties, DocLinkRID);
        END;
        Action::Delete: BEGIN
          DocumentLinkManagement.DeleteDocumentLinksFromObject(RecRef);
        END;
      END;
    END;

    PROCEDURE GetDocumentFullFileName@1100528100(DocumentNo@1100528100 : Code[20]) : Text[260];
    VAR
      DocumentProperties@1100528101 : Record 11012746;
    BEGIN
      DocumentProperties.GET(DocumentNo);
      EXIT(DocumentProperties.FullFileName());
    END;

    PROCEDURE SaveBase64EncodedDocument@1100528106(documentNo@1100528102 : Code[20];contentsBase64Encoded@1100528101 : BigText;VAR errorMessage@1100528100 : Text) : Boolean;
    VAR
      DocumentProperties@1100528103 : Record 11012746;
    BEGIN
      IF NOT DocumentProperties.GET(documentNo) THEN BEGIN
        errorMessage := STRSUBSTNO(Text003, documentNo);
        EXIT(FALSE);
      END;
      EXIT(SaveBase64TextAsFile(DocumentProperties.FullFileName(), contentsBase64Encoded, errorMessage));
    END;

    PROCEDURE GetDocumentBase64Encoded@1100528105(documentNo@1100528102 : Code[20];VAR base64EncodedContents@1100528101 : BigText;VAR errorMessage@1100528100 : Text) : Boolean;
    VAR
      DocumentProperties@1100528103 : Record 11012746;
    BEGIN
      IF NOT DocumentProperties.GET(documentNo) THEN BEGIN
        errorMessage := STRSUBSTNO(Text003, documentNo);
        EXIT(FALSE);
      END;
      EXIT(GetFileAsBase64Text(DocumentProperties.FullFileName(), base64EncodedContents, errorMessage));
    END;

    PROCEDURE GetDocumentSizeInBytes@1100525003(documentNo@1100528102 : Code[20];VAR errorMessage@1100528100 : Text) : Integer;
    VAR
      DocumentProperties@1100528103 : Record 11012746;
    BEGIN
      IF NOT DocumentProperties.GET(documentNo) THEN BEGIN
        errorMessage := STRSUBSTNO(Text003, documentNo);
        EXIT(0);
      END;
      EXIT(GetFileSize(DocumentProperties.FullFileName(), errorMessage));
    END;

    PROCEDURE SaveBase64TextAsFile@1100525001(fullFileName@1100525002 : Text;contentsBase64Encoded@1100525003 : BigText;VAR errorMessage@1100525004 : Text) : Boolean;
    VAR
      File@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Convert@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      IF File.Exists(fullFileName) THEN BEGIN
        errorMessage := STRSUBSTNO(Text001, fullFileName);
        EXIT(FALSE);
      END;
      File.WriteAllBytes(fullFileName, Convert.FromBase64String(contentsBase64Encoded));
      EXIT(TRUE);
    END;

    PROCEDURE GetFileAsBase64Text@1100525000(fullFileName@1100525000 : Text;VAR base64EncodedContents@1100525001 : BigText;VAR errorMessage@1100525005 : Text) : Boolean;
    VAR
      File@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Convert@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      contents@1100525004 : Integer;
    BEGIN
      IF NOT File.Exists(fullFileName) THEN BEGIN
        errorMessage := STRSUBSTNO(Text002, fullFileName);
        EXIT(FALSE);
      END;
      base64EncodedContents.ADDTEXT(Convert.ToBase64String(File.ReadAllBytes(fullFileName)));
      EXIT(TRUE);
    END;

    PROCEDURE GetFileAsBase64@1100528600(fullFileName@1100525000 : Text;VAR base64EncodedContents@1100525001 : Text;VAR errorMessage@1100525005 : Text) : Boolean;
    VAR
      File@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Convert@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      contents@1100525004 : Integer;
    BEGIN
      IF NOT File.Exists(fullFileName) THEN BEGIN
        errorMessage := STRSUBSTNO(Text002, fullFileName);
        EXIT(FALSE);
      END;
      base64EncodedContents := Convert.ToBase64String(File.ReadAllBytes(fullFileName));
      EXIT(TRUE);
    END;

    PROCEDURE GetFileSize@1100525004(fullFileName@1100525000 : Text;VAR errorMessage@1100525005 : Text) : Integer;
    VAR
      File@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      FileInfo@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo";
    BEGIN
      IF NOT File.Exists(fullFileName) THEN BEGIN
        errorMessage := STRSUBSTNO(Text002, fullFileName);
        EXIT(0);
      END;
      FileInfo := FileInfo.FileInfo(fullFileName);
      EXIT(FileInfo.Length);
    END;

    PROCEDURE ExternDocumentFileRegistration@1100409000(documentNo@1100409000 : Code[20];sourcePathAndFile@1100409001 : Text[250]) : Text[250];
    VAR
      DocProperties@1100409002 : Record 11012746;
      ExternalDocumentManagement@1100409003 : Codeunit 11012403;
      FileName@1100409004 : Text[250];
    BEGIN
      //DP00688 (C017839)  Note: User of nst where webservice is running must have permissions for source- and target directory.
      DocProperties.GET(documentNo);
      DocProperties.TESTFIELD("No.");
      DocProperties.TESTFIELD("External Document", TRUE);
      IF sourcePathAndFile = '' THEN BEGIN
        DocProperties.File := '';
        DocProperties.TESTFIELD(File);
      END;

      FileName := sourcePathAndFile;   // Input: Source Path + FileName
      ExternalDocumentManagement.RegisterFile(FileName, DocProperties."Document Type");
      DocProperties.File := FileName;  // Output: Target FileName
      DocProperties.MODIFY(TRUE);
      EXIT(FileName);
    END;

    PROCEDURE GetNewDocumentNo@1100525002() NewDocumentNo : Code[20];
    VAR
      MarketingSetup@1100525000 : Record 5079;
      NoSeriesManagement@1100525001 : Codeunit 396;
    BEGIN
      MarketingSetup.GET;
      MarketingSetup.TESTFIELD("External Document Nos.");
      NewDocumentNo := NoSeriesManagement.GetNextNo(MarketingSetup."External Document Nos.", TODAY, TRUE);
      EXIT(NewDocumentNo);
    END;

    BEGIN
    END.
  }
}

