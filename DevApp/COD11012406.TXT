OBJECT Codeunit 11012406 Document Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000003 : TextConst 'ENU=This dataitem is maximum indented.';
      Text002@1000000001 : TextConst 'ENU=DEFAULT';
      CRMSetup@1100485018 : Record 5079;
      gRecDocGroup@1100485020 : Record 11012400;
      gRecProspect@1199198000 : Record 5050;
      gCduWord@1100485023 : Codeunit 11012400;
      FileMgt@1100525003 : Codeunit 419;
      OperatingSystemMgt@1100409000 : Codeunit 11012364;
      Window@1000000008 : Dialog;
      Text004@1000000009 : TextConst 'ENU=#1############################';
      Text005@1000000010 : TextConst 'ENU=The field is a %1 field. Values can be : %2.';
      Text006@1000000017 : TextConst 'ENU=Yes, No';
      Text007@1000000019 : TextConst 'ENU=Table: %1.';
      Text008@1100525002 : TextConst 'ENU=Copy Word document?';
      Text010@1100525000 : TextConst 'ENU=Document %1 copied to Document %2';
      Text013@1000000022 : TextConst 'ENU=Template';
      Text014@1000000023 : TextConst 'ENU=DataItem';
      Text019@1000000029 : TextConst 'ENU=FlowField';
      Text020@1000000030 : TextConst 'ENU=Option';
      gBlnInit@1210190001 : Boolean;
      Text021@1210190009 : TextConst 'ENU=BLOB';
      FieldIsPicture@1210190010 : Boolean;
      Text022@1210190017 : TextConst 'ENU=Decimal';
      Text023@1210190005 : TextConst 'ENU=Date';
      Text024@1210190007 : TextConst 'ENU=Integer';
      Text026@1210190019 : TextConst 'ENU=Boolean';
      Text025@1210190018 : TextConst 'ENU=Time';
      Text027@1100485006 : TextConst 'ENU=Text';
      Text028@1210190000 : TextConst 'ENU=DateTime';
      Text100@1210190016 : TextConst 'ENU=R';
      Text101@1210190015 : TextConst 'ENU=v';
      Text104@1210190012 : TextConst 'ENU=The template %1 does not exist.';
      gPlantType@1100485004 : Code[20];
      gPlantBookDocNo@1100485005 : Code[20];
      gPlantRateRefDate@1100485003 : Date;
      gPlantBookTmpDirectory@1100485002 : Text[200];
      gPlantBookTextFile@1100485001 : Text[250];
      PathTmpFiles@1100485000 : Text[200];
      Text105@1100485010 : TextConst 'ENU=No permission for document template %1';
      gTarget@1100485012 : Text[250];
      gSitepath@1100485013 : Text[250];
      gLibrarypath@1100485014 : Text[50];
      FileName@1100485015 : Text[50];
      SourceDirectory@1100485016 : Text[250];
      Text106@1100485017 : TextConst 'ENU=It is not possible to hand document over to SharePoint.';
      gCR@1100485009 : Char;
      gLF@1100485008 : Char;
      Text108@1199198002 : TextConst 'ENU=Can not update Word Document when document is "%1"!';
      Text109@1199198003 : TextConst 'ENU=The Word Document does not exist!';
      Text110@1100525004 : TextConst 'ENU=Folder %1 cannot be created.';
      Text112@1100525005 : TextConst 'ENU=Document ID not found in D3';
      Text120@1100525007 : TextConst 'ENU=It is not possible to hand document over to D3.';

    PROCEDURE OpenDataItemLinkForm@1000000002(DataItem@1000000002 : Record 11012140);
    VAR
      DataItemLink@1000000000 : Record 11012141;
    BEGIN
      DataItemLink.RESET;

      DataItemLink.INIT;
      DataItemLink.SETRANGE("Document Group",DataItem."Document Group");
      DataItemLink.SETRANGE(Document,DataItem.Document);
      DataItemLink.SETRANGE("Data Item Line No.",DataItem."Line No.");
      DataItemLink.SETRANGE("From Table No.",DataItem."Table No.");
      DataItemLink.SETRANGE("To Table No.",DataItem."Parent Table No.");

      DataItemLink."Document Group" := DataItem."Document Group";
      DataItemLink.Document := DataItem.Document;
      DataItemLink."Data Item Line No." := DataItem."Line No.";
      DataItemLink."From Table No." := DataItem."Table No.";

      PAGE.RUNMODAL(0,DataItemLink);
    END;

    PROCEDURE OpenDataItemFilterForm@1000000009(DataItem@1210190000 : Record 11012140);
    VAR
      DataItemFilter@1000000000 : Record 11012143;
    BEGIN
      DataItemFilter.RESET;
      DataItemFilter.SETRANGE("Document Group",DataItem."Document Group");
      DataItemFilter.SETRANGE(Document,DataItem.Document);
      DataItemFilter.SETRANGE("Data Item Line No.",DataItem."Line No.");
      DataItemFilter.SETRANGE("Table No.",DataItem."Table No.");

      DataItemFilter."Document Group" := DataItem."Document Group";
      DataItemFilter.Document := DataItem.Document;
      DataItemFilter."Data Item Line No." := DataItem."Line No.";
      DataItemFilter."Table No." := DataItem."Table No.";
      DataItemFilter.CALCFIELDS("Table Caption");

      PAGE.RUNMODAL(0,DataItemFilter);
    END;

    PROCEDURE TestFilter@1000000006(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer;VAR Text@1000000005 : Text[1024]);
    VAR
      Field@1000000004 : Record 2000000041;
      TableRef@1000000002 : RecordRef;
      FieldRef@1000000003 : FieldRef;
      Boolean@1000000006 : Boolean;
    BEGIN
      Field.GET(TableNo,FieldNo);

      CASE Field.Type OF
        Field.Type::Boolean :
          IF NOT EVALUATE(Boolean,Text) THEN
            ERROR(Text005,'Boolean',Text006);
        Field.Type::Option :
          BEGIN
            TableRef.OPEN(TableNo);
            FieldRef := TableRef.FIELD(FieldNo);
            FieldRef.SETFILTER(Text);
            TableRef.CLOSE;
          END;
      END;
    END;

    PROCEDURE OpenDocFieldsForm@1000000004(DataItem@1210190000 : Record 11012140);
    VAR
      DataItemFields@1000000001 : Record 11012142;
    BEGIN
      DataItemFields.RESET;
      DataItemFields.SETRANGE("Document Group",DataItem."Document Group");
      DataItemFields.SETRANGE(Document,DataItem.Document);
      DataItemFields.SETRANGE("Data Item Line No.",DataItem."Line No.");
      DataItemFields.SETRANGE("Table No.",DataItem."Table No.");

      DataItemFields."Document Group" := DataItem."Document Group";
      DataItemFields.Document := DataItem.Document;
      DataItemFields."Data Item Line No." := DataItem."Line No.";
      DataItemFields."Table No." := DataItem."Table No.";

      PAGE.RUNMODAL(0,DataItemFields);
    END;

    PROCEDURE FillKeyTable@1210190001(DataItem@1210190000 : Record 11012140);
    VAR
      lKeyTable@1210190001 : Record 11012144;
      lDataItemRef@1210190002 : RecordRef;
      lKeyRef@1210190005 : KeyRef;
      lFieldRef@1210190009 : FieldRef;
      lCount@1210190003 : Integer;
      lLoopCount@1210190004 : Integer;
      lLoopCount2@1210190007 : Integer;
      lFieldCount@1210190006 : Integer;
      lInsertRec@1210190008 : Boolean;
    BEGIN
      //this an ugly solution but it works:
      //each time the table is needed it is updated with captions in the correct language
      lDataItemRef.OPEN(DataItem."Table No.");

      lCount := lDataItemRef.KEYCOUNT;
      FOR lLoopCount := 1 TO lCount DO
        BEGIN
          lKeyRef := lDataItemRef.KEYINDEX(lLoopCount);
          lKeyTable.INIT;
          IF lKeyTable.GET(DataItem."Table No.",lLoopCount) THEN
            lInsertRec := FALSE
          ELSE
            lInsertRec := TRUE;

          lKeyTable."Index Fields" := '';

          lFieldCount := lKeyRef.FIELDCOUNT;
          FOR lLoopCount2 := 1 TO lFieldCount DO
            BEGIN
              lFieldRef := lKeyRef.FIELDINDEX(lLoopCount2);
              IF lLoopCount2 = 1 THEN BEGIN
                lKeyTable."Index Fields" := lFieldRef.NAME;
                lKeyTable."Index Caption" := lFieldRef.CAPTION;
              END ELSE BEGIN
                lKeyTable."Index Fields" := lKeyTable."Index Fields" + ',' + lFieldRef.NAME;
                lKeyTable."Index Caption" := lKeyTable."Index Caption"  + ',' + lFieldRef.CAPTION;
              END;
            END;

          IF lInsertRec THEN BEGIN
            lKeyTable."Table No." := DataItem."Table No.";
            lKeyTable."Index No." := lLoopCount;
            lKeyTable.INSERT
          END ELSE
            lKeyTable.MODIFY;

        END;

      lDataItemRef.CLOSE;
    END;

    PROCEDURE IncreaseIndentDataItem@1000000000(DataItem@1000000000 : Record 11012140);
    VAR
      DataItem2@1000000001 : Record 11012140;
      lDataItemLink@1210190001 : Record 11012141;
    BEGIN
      //Zoek naar dataitem op zelfde nivo, met een lager regelnummer.
      DataItem2 := DataItem;
      DataItem2.SETRANGE("Document Group",DataItem."Document Group");
      DataItem2.SETRANGE(Document,        DataItem.Document);
      DataItem2.SETFILTER(Indent, '..%1', DataItem.Indent);
      IF NOT DataItem2.FIND('<') THEN
        ERROR(Text001)
      ELSE BEGIN
        IF DataItem2.Indent <> DataItem.Indent THEN
          ERROR(Text001);
      END;

      //Pas de Parent Line aan
      DataItem."Parent Line No." := DataItem2."Line No.";
      DataItem."Parent Table No." := DataItem2."Table No.";
      DataItem.MODIFY;

      //De dataitem-links opschonen.
      lDataItemLink.SETRANGE("Document Group",DataItem."Document Group");
      lDataItemLink.SETRANGE(Document,DataItem.Document);
      lDataItemLink.SETRANGE("Data Item Line No.",DataItem."Line No.");
      lDataItemLink.DELETEALL;

      //Schuif dataitem 1 positie op
      DataItemsIndentChange(DataItem,1);
    END;

    PROCEDURE DecreaseIndentDataItem@1000000001(DataItem@1000000000 : Record 11012140);
    VAR
      DataItem2@1000000001 : Record 11012140;
      lDataItemLink@1210190001 : Record 11012141;
      lPositions@1210190000 : Integer;
    BEGIN
      //Dataitem indent mag minimaal 0 worden.
      IF DataItem.Indent < 1 THEN
        EXIT;

      //Zoek naar een dataitem waarop 'aangesloten'  kan worden.
      DataItem2 := DataItem;
      DataItem2.SETRANGE("Document Group",DataItem."Document Group");
      DataItem2.SETRANGE(Document,DataItem.Document);
      DataItem2.SETRANGE(Indent,DataItem.Indent - 2);
      IF DataItem2.FIND('<') THEN BEGIN
        lPositions := -1;
        DataItem."Parent Line No." := DataItem2."Line No.";
        DataItem."Parent Table No." := DataItem2."Table No.";
      END ELSE BEGIN
        lPositions := -1 * DataItem.Indent;
        DataItem."Parent Line No." := 0;
        DataItem."Parent Table No." := 0;
      END;
      DataItem.MODIFY;

      //DataItem Links opschonen.
      lDataItemLink.SETRANGE("Document Group",DataItem."Document Group");
      lDataItemLink.SETRANGE(Document,DataItem.Document);
      lDataItemLink.SETRANGE("Data Item Line No.",DataItem."Line No.");
      lDataItemLink.DELETEALL;

      //Schuif dataitem lPositions op
      DataItemsIndentChange(DataItem,lPositions);

      //Controle op achterliggende linkings
      DataItemsIndentCheck(DataItem);
    END;

    PROCEDURE DataItemsIndentChange@1210190002(VAR ioDataItem@1210190000 : Record 11012140;MovePos@1210190001 : Integer);
    VAR
      DataItem2@1210190002 : Record 11012140;
    BEGIN
      //Schuif dataitem MovePos posities op
      ioDataItem.Indent := ioDataItem.Indent + MovePos;
      ioDataItem.MODIFY;

      //Achterliggende gerelateerde DataItems opschuiven.
      DataItem2.SETRANGE("Document Group",ioDataItem."Document Group");
      DataItem2.SETRANGE(Document,ioDataItem.Document);
      DataItem2.SETRANGE("Parent Line No.",ioDataItem."Line No.");
      IF DataItem2.FINDSET THEN BEGIN
        REPEAT
          DataItemsIndentChange(DataItem2,MovePos);
        UNTIL DataItem2.NEXT = 0;
      END;
    END;

    PROCEDURE DataItemsIndentCheck@1210190000(iDataItem@1210190000 : Record 11012140);
    VAR
      DataItem2@1210190002 : Record 11012140;
      DataItem3@1210190003 : Record 11012140;
      lDataItemLink@1210190001 : Record 11012141;
    BEGIN
      //Achterliggende DataItems checken
      DataItem2.SETRANGE("Document Group",iDataItem."Document Group");
      DataItem2.SETRANGE(Document,iDataItem.Document);
      DataItem2.SETFILTER("Line No.", '%1..', iDataItem."Line No.");
      IF DataItem2.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          //Zoek het dataitem waarop 'aangesloten' moet worden.
          DataItem3 := DataItem2;
          DataItem3.SETRANGE("Document Group",DataItem2."Document Group");
          DataItem3.SETRANGE(Document, DataItem2.Document);
          DataItem3.SETRANGE(Indent, DataItem2.Indent - 1);
          IF DataItem3.FIND('<') THEN BEGIN
            IF DataItem2."Parent Line No."  <> DataItem3."Line No." THEN BEGIN
              DataItem2."Parent Line No."  := DataItem3."Line No.";
              DataItem2."Parent Table No." := DataItem3."Table No.";
              DataItem2.MODIFY;
              //DataItem Links opschonen.
              lDataItemLink.SETRANGE("Document Group",    DataItem2."Document Group");
              lDataItemLink.SETRANGE(Document,            DataItem2.Document);
              lDataItemLink.SETRANGE("Data Item Line No.",DataItem2."Line No.");
              lDataItemLink.DELETEALL;
            END;
          END ELSE BEGIN
            IF DataItem2."Parent Line No." <> 0 THEN BEGIN
              DataItem2."Parent Line No." := 0;
              DataItem2."Parent Table No." := 0;
              DataItem2.MODIFY;
              //DataItem Links opschonen.
              lDataItemLink.SETRANGE("Document Group",    DataItem2."Document Group");
              lDataItemLink.SETRANGE(Document,            DataItem2.Document);
              lDataItemLink.SETRANGE("Data Item Line No.",DataItem2."Line No.");
              lDataItemLink.DELETEALL;
            END;
          END;
        UNTIL DataItem2.NEXT = 0;
      END;
    END;

    PROCEDURE GetFieldNo@1000000007(TableNo@1000000001 : Integer;String@1000000002 : Text[30]) : Integer;
    VAR
      Field@1000000000 : Record 2000000041;
      Integer@1000000003 : Integer;
    BEGIN
      IF EVALUATE(Integer,String) THEN
        EXIT(Integer);

      Field.SETRANGE(TableNo,TableNo);
      Field.SETFILTER(FieldName,STRSUBSTNO('@%1*',String));
      IF Field.FINDFIRST THEN
        EXIT(Field."No.");
    END;

    PROCEDURE GenerateDocFromTemplate@1199198003(iRecDocTemplate@1100485000 : Record 11012401;iDocLinkRID@1199198000 : ARRAY [5] OF RecordID;DepartmentCode@1100528700 : Code[20];iContactNo@1199198001 : Code[20];iPerson@1199198002 : Code[20];iAction@1199198003 : Code[20];iUpdateDocument@1199198005 : Boolean);
    VAR
      DocumentLinkMgt@1199198004 : Codeunit 11012401;
    BEGIN
      GenerateDoc(iRecDocTemplate,
                  iDocLinkRID,
                  DepartmentCode,
                  DocumentLinkMgt.GetSourceLinkRID(iDocLinkRID[1]),
                  iContactNo,
                  iPerson,
                  iAction,
                  iUpdateDocument,
                  FALSE);  // From Document Properties
      //            FALSE);
    END;

    PROCEDURE GenerateDocFromTemplate2@1100528709(DocumentTemplate@1100485000 : Record 11012401;DocLinkRID@1199198000 : ARRAY [5] OF RecordID;DepartmentCode@1100528700 : Code[20];ContactNo@1199198001 : Code[20];Person@1199198002 : Code[20];Action@1199198003 : Code[20];UpdateDocument@1199198005 : Boolean;CopyAndUpdateDocument@1100528701 : Boolean;lvEdit@1100525000 : Boolean);
    VAR
      DocumentLinkMgt@1199198004 : Codeunit 11012401;
    BEGIN
      GenerateDoc2(DocumentTemplate,
                   DocLinkRID,
                   DepartmentCode,
                   DocumentLinkMgt.GetSourceLinkRID(DocLinkRID[1]),
                   ContactNo,
                   Person,
                   Action,
                   UpdateDocument,
                   CopyAndUpdateDocument,
                   FALSE,  // From Document Properties
                   TRUE, // Terminate Word
                   lvEdit);
    END;

    PROCEDURE GenerateDocFromDocProperties@1199198000(iRecDocTemplate@1199198004 : Record 11012401;iDocumentNo@1199198003 : Code[20];iContactNo@1199198002 : Code[20];iPerson@1199198001 : Code[20];iUpdateDocument@1100525000 : Boolean;lvEdit@1100525001 : Boolean);
    VAR
      DocLinkRID@1199198005 : ARRAY [5] OF RecordID;
    BEGIN
      GenerateDoc2(iRecDocTemplate,
                   DocLinkRID,
                   '',
                   iDocumentNo,
                   iContactNo,
                   iPerson,
                   '',
                   iUpdateDocument,
                   FALSE, // Copy And Update Document
                   TRUE,  // From Document Properties
                   TRUE, // Terminate Word
                   lvEdit);
    END;

    PROCEDURE GenerateDoc@2(lRecDocTemplate@1210190001 : Record 11012401;DocLinkRID@1199198003 : ARRAY [5] OF RecordID;DepartmentCode@1100528700 : Code[20];iDocumentNo@1199198006 : Code[20];iContactNo@1199198000 : Code[20];iPersonNo@1199198004 : Code[20];iAction@1199198005 : Code[20];iUpdateDocument@1199198007 : Boolean;iFromDocProperties@1100525000 : Boolean);
    BEGIN
      GenerateDoc2(lRecDocTemplate,
                   DocLinkRID,
                   DepartmentCode,
                   iDocumentNo,
                   iContactNo,
                   iPersonNo,
                   iAction,
                   iUpdateDocument,
                   FALSE, // Copy And Update Document
                   iFromDocProperties,
                   FALSE, // Terminate Word
                   FALSE);
    END;

    PROCEDURE GenerateDoc2@1100528700(lRecDocTemplate@1100528707 : Record 11012401;DocLinkRID@1100528706 : ARRAY [5] OF RecordID;DepartmentCode@1100528714 : Code[20];iDocumentNo@1100528705 : Code[20];iContactNo@1100528704 : Code[20];iPersonNo@1100528703 : Code[20];iAction@1100528702 : Code[20];iUpdateDocument@1100528701 : Boolean;CopyAndUpdateDocument@1100528715 : Boolean;iFromDocProperties@1100528700 : Boolean;TerminateWord@1100528713 : Boolean;lvEdit@1100525000 : Boolean);
    VAR
      DocumentProperties@1100528712 : Record 11012746;
      DocumentProperties2@1100528717 : Record 11012746;
      Job@1100528305 : Record 11072003;
      DocumentLinkManagement@1100528718 : Codeunit 11012401;
      DocumentPortalProject@1100525001 : Codeunit 11012948;
      WordManagementCU@1100528304 : Codeunit 11072023;
      SharePointIntegration@1100525002 : Codeunit 11020210;
      ProjectSiteMgt@1100525003 : Codeunit 11012282;
      lTxtPath@1100525004 : Text[132];
      lTxtFile@1100528710 : Text[250];
      lTxtPrefix@1100528709 : Text[1];
      lvExtension@1100528708 : Text[10];
      NewVersion@1100528716 : Integer;
      IsPPTDoc@1100528300 : Boolean;
      IsCTBDoc@1100528307 : Boolean;
      WebLink@1100528302 : Text;
      FullFilePath@1100528306 : Text;
    BEGIN
      //PPT-UpdateBookmarks.sn
      IsPPTDoc := FALSE;
      IsCTBDoc := FALSE;
      WebLink := '';
      //PPT-UpdateBookmarks.en

      IF CopyAndUpdateDocument THEN
        iUpdateDocument := TRUE; // UpdateDocument should always be TRUE when CopyAndUpdateDocument is TRUE

      IF gRecDocGroup.Code <> lRecDocTemplate."Document Group" THEN
        gRecDocGroup.GET(lRecDocTemplate."Document Group");

      gRecDocGroup.TESTFIELD(Code);
      gRecDocGroup.TESTFIELD("Document Directory");

      // Check if user has permission to create or update a word document.
      CheckUserPermission(lRecDocTemplate."Document Group", lRecDocTemplate."Template Code");    //**4PS01.n

      CRMSetup.GET;

      IF NOT gBlnInit THEN
        BEGIN
          gCduWord.Initialise();
          gBlnInit := TRUE;
        END;

      gCR := 13;
      gLF := 10;

      IF NOT gRecProspect.GET(iContactNo) THEN
        gRecProspect.INIT;

      lTxtPrefix := Text100;
      lTxtPath := gRecDocGroup."Document Directory" + lTxtPrefix + iContactNo;

      IF NOT FileMgt.ClientDirectoryExists(lTxtPath) THEN BEGIN
        gRecProspect.VALIDATE("Document Group", gRecDocGroup.Code);
        FileMgt.CreateClientFolder(lTxtPath, TRUE);
      END;

      IF iUpdateDocument THEN BEGIN
        IF NOT iFromDocProperties THEN BEGIN
          //if we update a document from e.g. the purchase order there is no file yet. find the last generated file
          //and check is not Final Printed
          IF GetLastDocument(DocumentProperties, lRecDocTemplate, DocLinkRID[1], iAction) THEN BEGIN
            IF (DocumentProperties."Final Printed") AND (NOT CopyAndUpdateDocument) THEN
              ERROR(Text108, DocumentProperties.FIELDCAPTION("Final Printed"));
          END ELSE
            ERROR(Text109);
        END ELSE BEGIN
          //if we update a document from the Word Document Card the file is already copied, and must be updated
          DocumentProperties.GET(iDocumentNo);
        END;

        //PPT-UpdateBookmark.sn
        SetPPTDocCTBDoc(DocumentProperties, IsPPTDoc, IsCTBDoc);
        IF (IsPPTDoc) THEN
          DoPPTDoc(TRUE, DocumentProperties, WebLink, lTxtPrefix, iContactNo);
        IF (IsCTBDoc) THEN
          DoCTBDoc(NOT CopyAndUpdateDocument, DocumentProperties, WebLink, lTxtPrefix, iContactNo);
        //PPT-UpdateBookmark.en
        gCduWord.Open(TRUE, DocumentProperties.File, FALSE)
      END ELSE BEGIN
        IF NOT FileMgt.ClientFileExists(
          gRecDocGroup."Template Directory" + lRecDocTemplate."Word Template")
        THEN
          ERROR(Text104, gRecDocGroup."Template Directory" + lRecDocTemplate."Word Template")
        ELSE
          gCduWord.Open(TRUE, gRecDocGroup."Template Directory" + lRecDocTemplate."Word Template", FALSE);
      END;

      lTxtFile := GetFileName(gRecDocGroup, lRecDocTemplate, gRecProspect, iDocumentNo);
      IF lTxtFile = '' THEN
        EXIT;

      IF iAction <> '' THEN
        lTxtFile := lTxtFile + '_' + FORMAT(iAction);

      // If not updating a document create the document
      IF NOT iUpdateDocument THEN BEGIN
        CASE lRecDocTemplate.Type OF
          lRecDocTemplate.Type::Miscellaneous:
            DocumentHistoryDiv(lTxtFile, lRecDocTemplate, DocumentProperties, iDocumentNo);
          lRecDocTemplate.Type::Plant:
            BEGIN
              IF (gPlantBookTextFile <> '') THEN BEGIN
                lTxtFile := gPlantBookTextFile;
                DocumentProperties.GET(gPlantBookDocNo);
              END ELSE BEGIN
                DocumentHistory(lTxtFile, lRecDocTemplate, DocumentProperties, DocLinkRID, iContactNo, iPersonNo, iAction, iDocumentNo);
                gPlantBookTextFile := lTxtFile;
                gPlantBookDocNo := DocumentProperties."No."
              END;
              DocumentProperties.MODIFY;
            END;
          ELSE
            DocumentHistory(lTxtFile, lRecDocTemplate, DocumentProperties, DocLinkRID, iContactNo, iPersonNo, iAction, iDocumentNo);
        END;
        IF DepartmentCode <> '' THEN BEGIN
          DocumentProperties."Department Code" := DepartmentCode;
          DocumentProperties.MODIFY;
        END;
      END ELSE BEGIN
        IF CopyAndUpdateDocument AND (NOT IsPPTDoc) THEN BEGIN
          IF GetLastDocument(DocumentProperties, lRecDocTemplate, DocLinkRID[1], iAction) THEN
            NewVersion := DocumentProperties.Version + 1
          ELSE
            NewVersion := 1;
          CopyDocumentCard(DocumentProperties, DocumentProperties2);
          IF DocumentProperties2.Description = '' THEN
            DocumentProperties2.Description := lRecDocTemplate.Description;
          DocumentProperties2.Version := NewVersion;
          DocumentProperties2.MODIFY;
          DocumentLinkManagement.CopyDocumentLink(DocumentProperties."No.", DocumentProperties2."No.", FALSE);
          CopyDocumentRelation(DocumentProperties."No.", DocumentProperties2."No.");
          DocumentProperties.COPY(DocumentProperties2);
        END;

        IF (IsPPTDoc = IsCTBDoc) OR (IsPPTDoc <> IsCTBDoc AND CopyAndUpdateDocument) THEN //PPT-UpdateBookmarks.n
          UpdateDocument(lTxtFile, lRecDocTemplate, DocumentProperties, iDocumentNo);
      END;

      ProcessDoc(lRecDocTemplate, DocumentProperties);

      IF iUpdateDocument THEN BEGIN
        gCduWord.ExistingFileName(lTxtFile, TRUE, FALSE, lvExtension);
      END ELSE BEGIN
        gCduWord.ExistingFileName(gRecDocGroup."Template Directory" + lRecDocTemplate."Word Template", FALSE, TRUE, lvExtension);
        IF lvExtension ='.dotx' THEN
          lvExtension :='.docx'
        ELSE
          lvExtension :='.doc';
        //bovenstaande extensie wordt alleen toegepast als er '.'-tjes in de filenaam staan, anders gaat het automatisch goed.
      END;

      IF (DocumentProperties.File <> '') THEN BEGIN
        gCduWord.SaveAsWithExtension(lTxtFile, lvExtension);
        gCduWord.Close();
      END;

      IF TerminateWord THEN
        gCduWord.Terminate;

      CheckSharepointUse(DocumentProperties);

      IF CRMSetup."Documentation System" = CRMSetup."Documentation System"::D3 THEN BEGIN
        IF lvEdit THEN BEGIN
          IF DocumentProperties.File <> '' THEN BEGIN
            IF gCduWord.ExistingFileName(DocumentProperties.File, FALSE, FALSE, lvExtension) THEN
              WordManagementCU.OpenD3Word(DocumentProperties.File + lvExtension, 'proefballon');
          END;
        END;
        ExecD3Upload(CopyAndUpdateDocument, DocumentProperties, DocumentProperties2);
      END;

      //PPT-UpdateBookmarks.sn
      IF (IsPPTDoc) AND (WebLink <> '') THEN BEGIN
        FullFilePath :=  DocumentProperties.File + '.' + DocumentProperties."File Extension";
        DocumentPortalProject.PutUpdatedInternalDocument(DocumentLinkManagement.GetProjectNo(DocumentProperties."No."),
          DocumentProperties, WebLink, gRecDocGroup."Document Directory" + lTxtPrefix + iContactNo);
        DocumentProperties.MODIFY;
        FileMgt.DeleteClientFile(FullFilePath);
      END;
      IF (IsCTBDoc) AND (WebLink <> '') THEN BEGIN
        FullFilePath :=  DocumentProperties.File + '.' + DocumentProperties."File Extension";
        ProjectSiteMgt.PutUpdatedInternalDocument(DocumentProperties, WebLink, gRecDocGroup."Document Directory" + lTxtPrefix + iContactNo);
        DocumentProperties.MODIFY;
        FileMgt.DeleteClientFile(FullFilePath);
      END;
      //PPT-UpdateBookmarks.en

      LogProjectSiteDocumentLinks(DocumentProperties."No."); //kzwerver, #DP00177

      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;
      IF (DocumentLinkManagement.GetProjectNo(DocumentProperties."No.") = '') THEN
        EXIT;
      IF (NOT Job.GET(DocumentLinkManagement.GetProjectNo(DocumentProperties."No."))) THEN
        EXIT;
      IF (Job.IsJobInProjectPortal) THEN
        DocumentPortalProject.AddInternalDocument(DocumentProperties."No.");
    END;

    PROCEDURE ProcessDoc@15(lRecDocTemplate@1210190002 : Record 11012401;DocumentProperties@1199198000 : Record 11012746);
    VAR
      lDocDataItem@1210190001 : Record 11012140;
      foo@1210190000 : RecordRef;
    BEGIN
      lDocDataItem.SETRANGE("Document Group", DocumentProperties."Document Group");
      lDocDataItem.SETRANGE(Document, DocumentProperties."Document Template");

      Window.OPEN(Text004);

      LoopDocDataItems(DocumentProperties."Document Group",
                       DocumentProperties."Document Template",
                       DocumentProperties."No.",
                       0,
                       foo,
                       Text013,
                       0);

      Window.CLOSE;
    END;

    LOCAL PROCEDURE LoopDocDataItems@1210190003(iDocGroup@1000000000 : Code[10];iDocument@1210190000 : Code[20];iDocumentNo@1210190013 : Code[20];ParentLineNo@1000000004 : Integer;ParentDataItemRef@1000000007 : RecordRef;CurrNode@1000000010 : Text[50];CurrTable@1210190001 : Integer);
    VAR
      DataItem@1000000001 : Record 11012140;
      DataItemLink@1000000006 : Record 11012141;
      DataItemKey@1210190012 : Record 11012144;
      DocumentLink@1199198000 : Record 11012747;
      DataItemRef@1000000002 : RecordRef;
      DataItemFieldRef@1000000005 : FieldRef;
      ParentDataItemFieldRef@1000000008 : FieldRef;
      lKeyText@1210190011 : Text[512];
      RID@1199198001 : RecordID;
    BEGIN
      //** Argument 1: Document Group
      //** Argument 2: Document Template
      //** Argument 3: Parent Line No. --> Recursie binnen de parent line.
      //** Argument 4: Parent Data Item Ref
      //** Argument 5: Node (Text: Text013 of Text014)
      //** Argument 6: Table No. --> Tabel binnen Word docu

      DataItem.SETRANGE("Document Group", iDocGroup);
      DataItem.SETRANGE(Document, iDocument);
      DataItem.SETRANGE("Parent Line No.",ParentLineNo);
      DataItem.SETAUTOCALCFIELDS("Table Name"); //C024324.n

      //IF NOT DataItem.FINDFIRST THEN //C024324.o
      IF NOT DataItem.FINDSET THEN //C024324.n
        EXIT;

      //Loopt voor ieder dataitem met zelfde parent-line/nivo
      //Voor onderliggende nivo's wordt functie recursief aangeroepen
      REPEAT

        //Window verversen
      //DataItem.CALCFIELDS("Table Name");  //C024324.o
        Window.UPDATE(1,STRSUBSTNO(Text007,DataItem."Table Name"));

        //De dataitem-tabel wordt geopend
        DataItemRef.OPEN(DataItem."Table No.");

        //Set Dataitem Key.
        lKeyText := '';
        IF DataItem.Key > 0  THEN BEGIN
          FillKeyTable(DataItem); //update keytable with captions in the correct language
          DataItemKey.SETRANGE("Table No.", DataItem."Table No.");
          DataItemKey.SETRANGE("Index No.", DataItem.Key);
          IF DataItemKey.FINDFIRST THEN BEGIN
            IF DataItemKey."Index Caption" <> '' THEN
              lKeyText := 'SORTING(' + DataItemKey."Index Caption" + ')';
          END;
        END;
        IF DataItem."Sort Order" = DataItem."Sort Order"::Down THEN
          lKeyText := lKeyText  + ' ORDER(Descending)';
        IF lKeyText <> '' THEN
          DataItemRef.SETVIEW(lKeyText);


        //Filters voor 'Document' zetten, alleen op hoogste niveau
        IF (DataItem."Table No." = 11012746) AND                      // Table Document Properties
           (DataItem.Indent = 0) THEN
        BEGIN
          DataItemFieldRef := DataItemRef.FIELD(2);                   //Field: Document Group
          DataItemFieldRef.SETRANGE(iDocGroup);
          DataItemFieldRef := DataItemRef.FIELD(3);                   //Field: Document
          DataItemFieldRef.SETRANGE(iDocument);
          DataItemFieldRef := DataItemRef.FIELD(1);                   //Field: No.
          DataItemFieldRef.SETRANGE(iDocumentNo);
        END;

        //Set Dataitem Link.
        IF DataItem.Indent <> 0 THEN BEGIN
          //Set Filters op basis van de ingegeven link
          DataItemLink.SETRANGE("Document Group", iDocGroup);
          DataItemLink.SETRANGE(Document, iDocument);
          DataItemLink.SETRANGE("Data Item Line No.",DataItem."Line No.");
          //onderstaande 2 filters moeten foutief ingegeven records uitfilteren
          DataItemLink.SETFILTER("Field No.", '>%1', 0);
          DataItemLink.SETFILTER("Reference Field No.", '>%1', 0);
          IF DataItemLink.FINDSET THEN BEGIN
            REPEAT
              ParentDataItemFieldRef := ParentDataItemRef.FIELD(DataItemLink."Reference Field No.");
              DataItemFieldRef := DataItemRef.FIELD(DataItemLink."Field No.");
              DataItemFieldRef.SETRANGE(ParentDataItemFieldRef.VALUE);
            UNTIL DataItemLink.NEXT = 0;

            SetDataItemFilters(iDocGroup, iDocument, DataItem, DataItemRef, DataItemFieldRef);
            LoopDataItemRef(iDocGroup, iDocument, iDocumentNo, CurrTable, DataItemRef, DataItem);
          END ELSE BEGIN
            // No Dataitem link found, check Document Links
            IF DataItem."Parent Table No." = 11012747 THEN BEGIN
              DocumentLink.SETRANGE("Document No.", FORMAT(ParentDataItemRef.FIELD(10)));
              DocumentLink.SETRANGE("Table No.", DataItem."Table No.");
              DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
              IF DocumentLink.FINDSET THEN BEGIN
                REPEAT
                  IF FORMAT(DocumentLink."Record ID") <> '' THEN BEGIN
                    RID := DocumentLink."Record ID";
                    DataItemRef := RID.GETRECORD();
                    DataItemRef.SETRECFILTER;

                    SetDataItemFilters(iDocGroup, iDocument, DataItem, DataItemRef, DataItemFieldRef);
                    LoopDataItemRef(iDocGroup, iDocument, iDocumentNo, CurrTable, DataItemRef, DataItem);
                  END;
                UNTIL DocumentLink.NEXT = 0;
              END;
            END;
          END;
        END ELSE BEGIN
          SetDataItemFilters(iDocGroup, iDocument, DataItem, DataItemRef, DataItemFieldRef);
          LoopDataItemRef(iDocGroup, iDocument, iDocumentNo, CurrTable, DataItemRef,  DataItem);
        END;

        DataItemRef.CLOSE;
      UNTIL DataItem.NEXT = 0;
    END;

    PROCEDURE ProcessDocumentField@3(VAR iRecDocField@11012000 : Record 11012142;lTxtContent@1210190001 : Text[1024];iColumnNo@1210190002 : Integer);
    BEGIN
      WITH iRecDocField DO BEGIN
        IF NOT FieldIsPicture THEN BEGIN
          IF iColumnNo <> 0 THEN
            gCduWord.FillTableElement(lTxtContent,iColumnNo)
          ELSE BEGIN
            IF Bookmark THEN BEGIN
              IF "Element Name" <> '' THEN
                gCduWord.FillBookmark("Element Name",lTxtContent,Bold,Underline,Italic,TRUE);
            END ELSE BEGIN
              IF "Element Name" <> '' THEN
                gCduWord.ReplaceField("Element Name",lTxtContent);
            END;
          END;
        END ELSE BEGIN
          IF Bookmark AND ("Element Name" <> '') THEN BEGIN
            IF Type = Type::Header THEN
              gCduWord.FillBookmarkPicture("Element Name",lTxtContent);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetFileName@1210190014(lRecDocGroup@1210190001 : Record 11012400;lRecDocTemplate@1210190002 : Record 11012401;lRecContact@1210190000 : Record 5050;iDocumentNo@1199198002 : Code[20]) lFileName : Text[250];
    VAR
      lvDirectory@1210190003 : Text[250];
    BEGIN
      //Gets the directory + filename for new documents
      lvDirectory := GetDirectory(lRecDocGroup, lRecDocTemplate, lRecContact);
      IF lvDirectory = '' THEN
        EXIT('');
      EXIT(lvDirectory + FORMAT(lRecDocTemplate."Prefix File Name") + iDocumentNo);
    END;

    PROCEDURE GetDirectory@1210190004(lRecDocGroup@1210190001 : Record 11012400;lRecDocTemplate@1210190002 : Record 11012401;lRecContact@1199198002 : Record 5050) : Text[250];
    BEGIN
      //Gets the directory for new documents
      CASE lRecDocTemplate."Secured Document" OF
        lRecDocTemplate."Secured Document"::Always:
          BEGIN
            lRecDocTemplate.TESTFIELD("Secured Document Directory");
            CreateSecureDirectory(lRecDocTemplate."Secured Document Directory", lRecDocTemplate);
            EXIT(lRecDocTemplate."Secured Document Directory" + Text100 + lRecContact."No." + '\');
          END;
        ELSE
          EXIT(gRecDocGroup."Document Directory" + Text100 + lRecContact."No." + '\');
      END;
    END;

    PROCEDURE CreateSecureDirectory@1210190017(lSecureDirectoryTxt@1210190001 : Text[250];lRecDocTemplate@1210190004 : Record 11012401);
    VAR
      lTxtPrefix@1210190000 : Text[1];
      lTxtPath@1210190002 : Text[250];
    BEGIN
      lTxtPrefix := Text100;
      lTxtPath := lSecureDirectoryTxt + lTxtPrefix + gRecProspect."No.";
      IF NOT FileMgt.ClientDirectoryExists(lTxtPath) THEN
        IF NOT FileMgt.CreateClientFolder(lTxtPath, FALSE) THEN
          ERROR(Text110, CONVERTSTR(lTxtPath, '\', '/'));
    END;

    PROCEDURE DocumentHistory@6(VAR vTxtFile@11012000 : Text[250];iRecDocTemplate@1210190000 : Record 11012401;VAR vDocumentProperties@1199198009 : Record 11012746;iDocLinkRID@1199198000 : ARRAY [5] OF RecordID;iContactNo@1199198002 : Code[20];iPersonNo@1199198003 : Code[20];iAction@1199198004 : Code[20];iDocumentNo@1100525000 : Code[20]);
    VAR
      UserSetup@1199198008 : Record 91;
      DocumentLinkMgt@1199198005 : Codeunit 11012401;
      NewVersion@1199198007 : Integer;
    BEGIN
      // Find last document. If exist, update version
      WITH vDocumentProperties DO BEGIN
        IF GetLastDocument(vDocumentProperties, iRecDocTemplate, iDocLinkRID[1], iAction) THEN
          NewVersion := vDocumentProperties.Version + 1
        ELSE
          NewVersion := 1;

        vTxtFile := vTxtFile + Text101 + FORMAT(NewVersion);

        INIT;
        "No." := '';
        "No. Series" := iRecDocTemplate."No. Series";
        "Document Group" := iRecDocTemplate."Document Group";
        "Document Template" := iRecDocTemplate."Template Code";
        "Document No." := iDocumentNo;
        "Doc. Action" := iAction;
        Description := iRecDocTemplate.Description;
        "Publish on Service Portal" := iRecDocTemplate."Publish on Service Portal";
        "Publish on Subcont.Portal" := iRecDocTemplate."Publish on Subcont.Portal";
        "Available for Field Service" := iRecDocTemplate."Available in Field Service";
        "D3 Document Type" := iRecDocTemplate."D3 Document Type";
        "Document Type" := iRecDocTemplate."Document Type";
        "Project Portal Subsite" := iRecDocTemplate."Project Portal Subsite";
        "Private Company Document" := iRecDocTemplate."Private Company Document";

        VALIDATE("Contact No.", gRecProspect."No.");
        IF iPersonNo <> '' THEN
          VALIDATE("Contact Person No.", iPersonNo);

        IF iRecDocTemplate.Subject <> '' THEN
          VALIDATE(Subject, iRecDocTemplate.Subject);

        Version := NewVersion;
        "Creation Date" := TODAY;
        "Creation Time" := TIME;
        "User ID" := USERID;
        IF UserSetup.GET(USERID) THEN
          IF UserSetup."Employee No." <> '' THEN
            VALIDATE(Sender, UserSetup."Employee No.");

        VALIDATE(File, vTxtFile);

        IF iRecDocTemplate."Secured Document" = iRecDocTemplate."Secured Document"::Always THEN
          Secure := TRUE;

        "Internal Company" := COMPANYNAME;

        INSERT(TRUE);

        // Create document links
        DocumentLinkMgt.CreateDocumentLink(vDocumentProperties, iDocLinkRID);

        // Create default document links
        VALIDATE("Document Template", iRecDocTemplate."Template Code");

        FillReference();
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE DocumentHistoryDiv@36(VAR vTxtFile@11012000 : Text[250];iRecDocTemplate@1210190001 : Record 11012401;VAR vDocumentProperties@1199198001 : Record 11012746;iDocumentNo@1199198000 : Code[20]);
    BEGIN
      WITH vDocumentProperties DO BEGIN
        IF GET(iDocumentNo) THEN BEGIN
          IF ("Web link" = '') THEN BEGIN
            vTxtFile := vTxtFile + Text101 + FORMAT(Version);
            "Creation Date" := TODAY;
            "Creation Time" := TIME;
            "User ID" := USERID;
            VALIDATE(File, vTxtFile);
            IF NOT "Publish on Service Portal" THEN
              "Publish on Service Portal" := iRecDocTemplate."Publish on Service Portal";
            IF NOT "Publish on Subcont.Portal" THEN
              "Publish on Subcont.Portal" := iRecDocTemplate."Publish on Subcont.Portal";
            IF NOT "Available for Field Service" THEN
              "Available for Field Service" := iRecDocTemplate."Available in Field Service";
            IF "D3 Document Type" = '' THEN
              "D3 Document Type" := iRecDocTemplate."D3 Document Type";
            IF "Document Type" = '' THEN
              "Document Type" := iRecDocTemplate."Document Type";
            IF "Project Portal Subsite" = '' THEN
              "Project Portal Subsite" := iRecDocTemplate."Project Portal Subsite";
            IF NOT "Private Company Document" THEN
              "Private Company Document" := iRecDocTemplate."Private Company Document";

            IF "Document No." = '' THEN
              "Document No." := iDocumentNo;
            //MODIFY;
            MODIFY(TRUE); //kzwerver, #DP00177
          END;
        END;
      END;
    END;

    PROCEDURE UpdateDocument@1199198001(VAR vTxtFile@1199198003 : Text[250];iRecDocTemplate@1199198002 : Record 11012401;VAR vDocumentProperties@1199198001 : Record 11012746;iDocumentNo@1199198000 : Code[20]);
    BEGIN
      WITH vDocumentProperties DO BEGIN
        VALIDATE("Document Template");
        vTxtFile := vTxtFile + Text101 + FORMAT(Version);
        VALIDATE(File, vTxtFile);
        IF "Document No." = '' THEN
          "Document No." := iDocumentNo;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CopyWordDocument@1210190018(lOldDocument@1210190000 : Record 11012746;VAR lNewDocument@1210190001 : Record 11012746);
    VAR
      lDirectoryTxt@1210190002 : Text[250];
      lFileTxt@1210190003 : Text[250];
      lRecDocTemplate@1210190004 : Record 11012401;
      lvExtension@1100485000 : Text[30];
    BEGIN
      lRecDocTemplate.GET(lNewDocument."Document Group",lNewDocument."Document Template");
      FileMgt.SplitFileAbsPathName(lOldDocument.File,lDirectoryTxt,lFileTxt);
      lNewDocument.VALIDATE(File, lDirectoryTxt + lRecDocTemplate."Prefix File Name" + lNewDocument."No." + Text101 + FORMAT(0));
      lNewDocument.Version := 0;
      lNewDocument.MODIFY;
      IF gCduWord.ExistingFileName(lOldDocument.File, TRUE, FALSE, lvExtension) THEN
        FileMgt.CopyClientFile4PS(
          lOldDocument.File + lvExtension,
          lNewDocument.File + lvExtension,
          TRUE);
    END;

    PROCEDURE CopyDocumentFile@1100525000(OldDocumentProperties@1210190000 : Record 11012746;VAR NewDocumentProperties@1210190001 : Record 11012746);
    VAR
      Directory@1210190002 : Text[250];
      OldFileName@1210190003 : Text[250];
      NewFileName@1210190006 : Text[250];
      DocumentTemplate@1210190004 : Record 11012401;
      Extension@1100485000 : Text[30];
      WordAutomation@1100528700 : Codeunit 11012400;
      ExternalDocumentManagement@1210190005 : Codeunit 11012403;
    BEGIN
      // new function for document properties
      DocumentTemplate.GET(NewDocumentProperties."Document Group", NewDocumentProperties."Document Template");

      FileMgt.SplitFileAbsPathName(OldDocumentProperties.File, Directory, OldFileName);

      //**4PS 23172
      NewDocumentProperties.VALIDATE(File,
        Directory + DocumentTemplate."Prefix File Name" + NewDocumentProperties."No." + Text101 + FORMAT(NewDocumentProperties.Version))
      ;
      //**4PS 23172
      NewDocumentProperties.MODIFY;

      FileMgt.SplitFileAbsPathName(NewDocumentProperties.File, Directory, NewFileName);

      IF WordAutomation.ExistingFileName(OldDocumentProperties.File, TRUE, FALSE, Extension) THEN
        ExternalDocumentManagement.MoveCopyFile(Directory, NewFileName + Extension, Directory, OldFileName + Extension, TRUE);
    END;

    PROCEDURE InitPlantBook@1210190021(IFirstPlantType@1210190003 : Boolean;IPlantType@1210190000 : Code[20];IPlantRateRefDate@1210190001 : Date;IPlantBookTmpDirectory@1210190002 : Text[200];IPlantBookDocNo@1100485000 : Code[20]);
    BEGIN
      gPlantType := IPlantType;
      gPlantRateRefDate := IPlantRateRefDate;
      gPlantBookTmpDirectory := IPlantBookTmpDirectory;
      gPlantBookDocNo := IPlantBookDocNo;

      IF IFirstPlantType THEN
        gPlantBookTextFile := ''  //* Must be empty for the first Plant Type of a Plant Book
      ELSE
        //gPlantBookTextFile := gPlantBookTmpDirectory + 'Tmp' + USERID + '-PlantBook';  //C023736.o  USERID can contain /' or '.'  (4PS/Username) then error occurs
        gPlantBookTextFile := gPlantBookTmpDirectory + 'Tmp' + '-PlantBook';  //C023736.n
    END;

    PROCEDURE GetPlantBookFile@1210190027(VAR OPlantBookTextFile@1210190002 : Text[250];VAR OPlantBookDocNo@1100485000 : Code[20];ITerminate@1210190000 : Boolean);
    BEGIN
      OPlantBookTextFile := gPlantBookTextFile;
      OPlantBookDocNo := gPlantBookDocNo;

      //*26706.sn
      IF ITerminate THEN
        gCduWord.Terminate();
      //*26706.en
    END;

    PROCEDURE MergePlantBookFiles@1210190029(IPlantBookFile1@1210190000 : Text[250];IPlantBookFile2@1210190001 : Text[250]);
    VAR
      lvExtension@1210190002 : Text[10];
    BEGIN
      gCduWord.Open(FALSE, IPlantBookFile1, FALSE);
      gCduWord.GoToEndOfFile();
      gCduWord.AddPageBreak();
      //gCduWord.AddFile(IPlantBookFile2);  //*26706.o
      //*26706.sn
      IF NOT FileMgt.ClientFileExists(IPlantBookFile2) THEN
        gCduWord.ExistingFileName(IPlantBookFile2, TRUE, FALSE, lvExtension);
      gCduWord.AddFile(IPlantBookFile2 + lvExtension);
      //*26706.en
      gCduWord.Save();
      gCduWord.Close();
      gCduWord.Terminate();  //*26706.n
    END;

    PROCEDURE CheckUserPermission@1100485001(lDocGroup@1100485000 : Code[10];lTemplate@1100485002 : Code[20]);
    VAR
      lPermissionRec@1100485001 : Record 11012404;
    BEGIN
      //**4PS01.sn
      lPermissionRec.SETRANGE("Document Group",lDocGroup);
      lPermissionRec.SETRANGE("Template Code",lTemplate);
      //IF NOT lPermissionRec.FINDFIRST THEN BEGIN //C024324.o
      IF lPermissionRec.ISEMPTY THEN //C024324.n
        //no permissions defined for any user, this means all have permissions
        EXIT;

      //there are permissions defined, check whether they are defined for the current user
      lPermissionRec.SETRANGE("User ID",USERID);
      //IF NOT lPermissionRec.FINDFIRST THEN //C024324.o
      IF lPermissionRec.ISEMPTY THEN //C024324.n
        ERROR(Text105, lTemplate);
      //**4PS01.en
    END;

    PROCEDURE FillPlantRateUnit@1100485004(ITableNo@1100485000 : Integer;IRentalType@1100485001 : Option;IPlantType@1100485002 : Code[20]) : Code[10];
    VAR
      lvRateRec@1100485003 : Record 11012567;
      lvLocRateRec@1100485004 : Record 11012583;
      lvRateComp@1100485005 : Record 11012585;
    BEGIN
      CASE ITableNo OF
        11012567:
          BEGIN
            lvRateRec."Rental Type" := IRentalType;
            lvRateRec."Plant Type" := IPlantType;
            lvRateRec.CalcfieldRateUnit();
            EXIT(lvRateRec."Rate Unit of Measure");
          END;
        11012583:
          BEGIN
            lvLocRateRec."Rental Type" := IRentalType;
            lvLocRateRec."Plant Type" := IPlantType;
            lvLocRateRec.CalcfieldRateUnit();
            EXIT(lvLocRateRec."Rate Unit of Measure");
          END;
        11012585:
          BEGIN
            lvRateComp."Rental Type" := IRentalType;
            lvRateComp."Plant Type" := IPlantType;
            lvRateComp.CalcfieldRateUnit();
            EXIT(lvRateComp."Rate Unit of Measure");
          END;
      END;
      EXIT('');
    END;

    PROCEDURE CheckSharepointUse@1100485003(DocumentProperties@1199198001 : Record 11012746);
    VAR
      LvJobRec@1100485000 : Record 11072003;
      LvDocumentTemplate@1100485002 : Record 11012401;
      LvSharepointLibraries@1100485003 : Record 11012209;
      DocumentLinkMgt@1199198000 : Codeunit 11012401;
      Extension@1100409000 : Text[10];
      ExtensionLength@1100409001 : Integer;
    BEGIN
      gCduWord.ExistingFileName(DocumentProperties.File, TRUE, FALSE, Extension);
      ExtensionLength := STRLEN(Extension);

      IF LvJobRec.GET(DocumentLinkMgt.GetProjectNo(DocumentProperties."No.")) THEN
        IF LvJobRec."Save Int. Doc In SharePoint" THEN
          IF LvJobRec."SharePoint Site Generated" THEN BEGIN
            gSitepath := LvJobRec."SharePoint Site URL";
            gSitepath := DELSTR(gSitepath,1,7);
            gSitepath := CONVERTSTR(gSitepath,'/','\');
            gSitepath := STRSUBSTNO('%1' + gSitepath,'\\');
            IF LvDocumentTemplate.GET(DocumentProperties."Document Group", DocumentProperties."Document Template") THEN
              IF LvSharepointLibraries.GET(LvDocumentTemplate."Library Code") THEN
                gLibrarypath := LvSharepointLibraries.Name
              ELSE
                EXIT;
            FileName := STRSUBSTNO('%1' + '%2v' + '%3' + Extension,
                                   DocumentProperties."Document Template",
                                   DocumentProperties."No.",
                                   DocumentProperties.Version);
            gTarget := STRSUBSTNO('%1' + '\' + '%2' + '\',gSitepath,gLibrarypath);
      //    SourceDirectory := DELSTR(gRecWordDocument.File,(STRLEN(gRecWordDocument.File)-STRLEN(FileName)),STRLEN(FileName)) + '\';
            SourceDirectory := DocumentProperties.File;
            IF FileMgt.CopyClientFile4PS(
              DocumentProperties.File + Extension,
              gTarget + FileName,
              FALSE)
            THEN BEGIN
              FileMgt.DeleteClientFile4PS(DocumentProperties.File + Extension, FALSE);
              DocumentProperties.VALIDATE(File,
                DELSTR((gTarget + FileName), (STRLEN(gTarget + FileName))-(ExtensionLength-1), ExtensionLength));
              DocumentProperties.MODIFY;
            END ELSE
              MESSAGE(Text106);
          END;
    END;

    PROCEDURE SetDataItemFilters@1199198002(iDocGroup@1199198001 : Code[20];iDocumentTemplate@1199198002 : Code[20];iDataItem@1199198003 : Record 11012140;VAR vDataItemRef@1199198005 : RecordRef;VAR vDataItemFieldRef@1199198004 : FieldRef);
    VAR
      DataItemFilter@1199198000 : Record 11012143;
      DataItem@1199198007 : Record 11012140;
      DeleteRows@1199198008 : Boolean;
    BEGIN
      // Set Dataitem Filter.
      // Set Filters op basis van ingegeven filters
      DataItemFilter.SETRANGE("Document Group", iDocGroup);
      DataItemFilter.SETRANGE(Document, iDocumentTemplate);
      DataItemFilter.SETRANGE("Data Item Line No.", iDataItem."Line No.");
      // Onderstaande filter moet foutief ingegeven records uitfilteren
      DataItemFilter.SETFILTER("Field No.", '>%1', 0);
      IF DataItemFilter.FINDSET THEN BEGIN
        REPEAT
          vDataItemFieldRef := vDataItemRef.FIELD(DataItemFilter."Field No.");
          vDataItemFieldRef.SETFILTER(DataItemFilter.Filter);
        UNTIL DataItemFilter.NEXT = 0;
      END;

      // Word tabel initialiseren
      IF iDataItem."Word Document Table No." <> 0 THEN BEGIN
        DataItem.SETRANGE("Document Group", iDataItem."Document Group");
        DataItem.SETRANGE(Document, iDataItem.Document);
        DataItem.SETFILTER("Line No.", '<%1', iDataItem."Line No.");
        DataItem.SETRANGE("Word Document Table No.", iDataItem."Word Document Table No.");
        DeleteRows := DataItem.COUNT = 0;

        gCduWord.InitTableFields(iDataItem."Word Document Table No.", DeleteRows);
      END;
    END;

    PROCEDURE LoopDataItemRef@1199198004(iDocGroup@1199198004 : Code[20];iDocumentTemplate@1199198005 : Code[20];iDocumentNo@1199198029 : Code[20];iCurrTable@1199198003 : Integer;VAR vDataItemRef@1199198000 : RecordRef;iDataItem@1199198002 : Record 11012140);
    VAR
      DataItemFields@1199198001 : Record 11012142;
      FieldRec@1199198006 : Record 2000000041;
      PlantType@1199198020 : Record 11012551;
      DataItemFieldRef@1199198008 : FieldRef;
      lvVariant@1199198011 : Variant;
      OutPutValue@1199198007 : Text[1024];
      OutPutValue2@1199198027 : Text[1024];
      lFormatStr@1199198013 : Text[512];
      lFormatNo@1199198012 : Integer;
      IntValue@1199198010 : Integer;
      HulpString@1199198015 : Text[1024];
      HulpString2@1199198018 : Text[1024];
      HulpString3@1199198017 : Text[1024];
      HulpString4@1199198016 : Text[1024];
      HulpStrLen@1199198014 : Integer;
      i@1199198019 : Integer;
      lOK@1199198021 : Boolean;
      lDecVar@1199198022 : Decimal;
      lIntVar@1199198023 : Integer;
      lDateVar@1199198024 : Date;
      lTimeVar@1199198025 : Time;
      DateTimeVar@1210190000 : DateTime;
      lBoolVar@1199198026 : Boolean;
      ReplaceCharPlace@1199198028 : Integer;
    BEGIN
      // Met ingestelde filters beginnen te lezen
      // Use FINDFIRST, FINDSET only allowed for ascending, FINDFIRST can also be desending
      //IF vDataItemRef.FINDFIRST THEN BEGIN //C024324.o
      IF vDataItemRef.FINDSET THEN BEGIN //C024324.n
        REPEAT
          //Van het gevonden record de velden selectie zetten
          DataItemFields.RESET;
          DataItemFields.SETRANGE("Document Group", iDocGroup);
          DataItemFields.SETRANGE(Document, iDocumentTemplate);
          DataItemFields.SETRANGE("Data Item Line No.", iDataItem."Line No.");
          DataItemFields.SETFILTER("Field No.", '>%1', 0);
          //De velden lezen
          IF DataItemFields.FINDSET THEN BEGIN
            //Wordtabel nieuwe regel toevoegen
            IF (iDataItem."Word Document Table No." <> 0) THEN
              gCduWord.TableNewRow;

            REPEAT
              FieldIsPicture := FALSE;
              IF iDataItem."Word Document Table No." = 0 THEN
                DataItemFields."Word Doc Table Column No." := 0;

              IF NOT FieldRec.GET(iDataItem."Table No.",DataItemFields."Field No.") THEN BEGIN
                OutPutValue := Text002;
              END ELSE BEGIN
                //Veld in FieldRef zetten
                DataItemFieldRef := vDataItemRef.FIELD(DataItemFields."Field No.");

                //FlowField
                IF FORMAT(DataItemFieldRef.CLASS) = Text019 THEN
                  DataItemFieldRef.CALCFIELD;

                //* Bepalen 'Rate Unit of Measure' is een uitzondering, is voor elk 'Rental Type' anders (overruled CALCFIELD)
                IF ((DataItemFields."Table No." = 11012567) AND (DataItemFields."Field No." = 42)) OR
                   ((DataItemFields."Table No." = 11012583) AND (DataItemFields."Field No." = 42)) OR
                   ((DataItemFields."Table No." = 11012585) AND (DataItemFields."Field No." = 121))
                THEN BEGIN
                  //* Opm: Voor al deze 3 tabellen is "Rental Type" veldnr. '5', en "Plant Type" veldnr. '10'.
                  DataItemFieldRef := vDataItemRef.FIELD(5);
                  IntValue := DataItemFieldRef.VALUE;
                  DataItemFieldRef := vDataItemRef.FIELD(DataItemFields."Field No.");  //* Terug zetten op huidige veld
                  lvVariant := FillPlantRateUnit(DataItemFields."Table No.", IntValue, FORMAT(vDataItemRef.FIELD(10)));
                  DataItemFieldRef.VALUE(lvVariant);
                END;
                IF (DataItemFields."Table No." = 11012551) AND (DataItemFields."Field No." = 55) AND
                    (FORMAT(DataItemFieldRef.VALUE) = '')
                THEN
                  DataItemFieldRef := vDataItemRef.FIELD(50);  //* Als leeg dan vullen met "Unit of Measure"

                //Ophalen van de veldwaarde
                OutPutValue := '';

                IF DataItemFields."Format Str." <> '' THEN
                  DataItemFields."Format No." := 0
                ELSE
                  DataItemFields."Format Str." := STRSUBSTNO('<Standard Format,%1>', DataItemFields."Format No.");

                lFormatStr := DataItemFields."Format Str.";
                lFormatNo  := DataItemFields."Format No.";

                CASE FORMAT(DataItemFieldRef.TYPE) OF
                  Text020:  // Option
                    BEGIN
                      IF EVALUATE(IntValue,FORMAT(DataItemFieldRef.VALUE)) THEN BEGIN
                        HulpString  := FORMAT(DataItemFieldRef.OPTIONCAPTION);
                        HulpStrLen  := STRLEN(HulpString);
                        IF HulpStrLen > 250 THEN BEGIN
                          HulpString2 := COPYSTR(HulpString,1,250);
                          HulpString3 := COPYSTR(HulpString,251);
                          HulpStrLen  := STRPOS(HulpString3,',');
                          IF HulpStrLen > 0 THEN BEGIN
                             HulpString2 := HulpString2 + COPYSTR(HulpString3,1,HulpStrLen);
                             HulpString3 := COPYSTR(HulpString3,(HulpStrLen+1));

                             HulpString4 := HulpString2;
                             i := 0;
                             REPEAT
                               i += 1;
                               HulpString4 := COPYSTR(HulpString4, (STRPOS(HulpString4, ',') + 1));
                             UNTIL STRPOS(HulpString4,',') = 0 ;
                             IF i >= IntValue THEN
                               OutPutValue := SELECTSTR(IntValue + 1, HulpString2)
                             ELSE
                               OutPutValue := SELECTSTR(IntValue + 1 - i, HulpString3);

                          END ELSE BEGIN;
                            OutPutValue := SELECTSTR(IntValue + 1,HulpString);
                          END;
                        END ELSE BEGIN
                          OutPutValue := SELECTSTR(IntValue + 1,FORMAT(DataItemFieldRef.OPTIONCAPTION));
                        END;
                      END;
                    END;
                  Text021:  // BLOB
                    BEGIN
                      OutPutValue := '';
                      PathTmpFiles := OperatingSystemMgt.ClientEnviron('TEMP');
                      FileMgt.AddBackSlashToDirectoryName(PathTmpFiles);
                      CASE iDataItem."Table No." OF
                        11012551: //* Plant Type
                          BEGIN
                            DataItemFieldRef := vDataItemRef.FIELD(10);  //* Plant Type - Code
                            IF PlantType.GET(FORMAT(DataItemFieldRef.VALUE)) THEN BEGIN
                              OutPutValue := ExportPlantTypePicture(
                                PlantType,
                                PathTmpFiles + 'Tmp' + USERID + '-Picture.bmp');
                              IF OutPutValue <> '' THEN
                                FieldIsPicture := TRUE;
                            END;
                          END;
                      END;
                    END;
                  Text022:  // Decimal
                    BEGIN
                      lOK := EVALUATE(lDecVar, FORMAT(DataItemFieldRef.VALUE));
                      IF lDecVar <> 0 THEN
                        OutPutValue := FORMAT(lDecVar, 0, lFormatStr)
                      ELSE
                        OutPutValue := '';
                    END;
                  Text024:  // Integer
                    BEGIN
                      lOK := EVALUATE(lIntVar, FORMAT(DataItemFieldRef.VALUE));
                      IF lIntVar <> 0 THEN
                        OutPutValue := FORMAT(lIntVar, 0, lFormatStr)
                      ELSE
                        OutPutValue := '';
                    END;
                  Text023:  // Date
                    BEGIN
                      lOK := EVALUATE(lDateVar, FORMAT(DataItemFieldRef.VALUE));
                      OutPutValue := FORMAT(lDateVar, 0, lFormatStr);
                    END;
                  Text025:  // Time
                    BEGIN
                      lOK := EVALUATE(lTimeVar, FORMAT(DataItemFieldRef.VALUE));
                      OutPutValue := FORMAT(lTimeVar,0,lFormatStr);
                    END;
                  Text028:  // DateTime
                    BEGIN
                      lOK := EVALUATE(DateTimeVar, FORMAT(DataItemFieldRef.VALUE));
                      OutPutValue := FORMAT(DateTimeVar,0,lFormatStr);
                    END;
                  Text026:  // Boolean
                    BEGIN
                      lOK := EVALUATE(lBoolVar, FORMAT(DataItemFieldRef.VALUE));
                      OutPutValue := FORMAT(lBoolVar, 0, lFormatStr);
                    END;
                  Text027:  // Text
                    BEGIN
                      OutPutValue := FORMAT(DataItemFieldRef.VALUE);
                      IF STRPOS(OutPutValue, '\') > 0 THEN BEGIN
                        OutPutValue2 := '';
                        REPEAT
                          ReplaceCharPlace := STRPOS(OutPutValue, '\');
                          IF COPYSTR(OutPutValue, ReplaceCharPlace + 1, 1) = '\' THEN BEGIN
                            // dubbele backslash, eentje weghalen
                            OutPutValue2 := OutPutValue2 + COPYSTR(OutPutValue, 1, ReplaceCharPlace);
                            OutPutValue  :=                COPYSTR(OutPutValue, ReplaceCharPlace + 2);
                          END ELSE BEGIN
                            OutPutValue2 := OutPutValue2 + COPYSTR(OutPutValue, 1, ReplaceCharPlace - 1) + FORMAT(gCR) + FORMAT(gLF);
                            OutPutValue  :=                COPYSTR(OutPutValue, ReplaceCharPlace + 1);
                          END;
                        UNTIL STRPOS(OutPutValue, '\') = 0;
                        OutPutValue := OutPutValue2 + OutPutValue;
                      END;
                    END;
                  ELSE     // Overige
                    BEGIN
                      OutPutValue := FORMAT(DataItemFieldRef.VALUE);
                    END;
                END;
              END;

              ProcessDocumentField(DataItemFields,
                                   OutPutValue,
                                   DataItemFields."Word Doc Table Column No.");

            UNTIL DataItemFields.NEXT = 0;
          END;
          //zoeken naar onderliggende dataitems
          LoopDocDataItems(iDocGroup,
                           iDocumentTemplate,
                           iDocumentNo,
                           iDataItem."Line No.",
                           vDataItemRef,
                           Text014,
                           iDataItem."Word Document Table No.");
        UNTIL (vDataItemRef.NEXT = 0) OR (iDataItem."Word Document Table No." = 0);

      END ELSE BEGIN
        //Bladwijzers opschonen
        IF iDataItem."Word Document Table No." = 0 THEN BEGIN
          FieldIsPicture := FALSE;
          //Van het gevonden record de velden selectie zetten
          DataItemFields.RESET;
          DataItemFields.SETRANGE("Document Group", iDocGroup);
          DataItemFields.SETRANGE(Document, iDocumentTemplate);
          DataItemFields.SETRANGE("Data Item Line No.", iDataItem."Line No.");
          DataItemFields.SETFILTER("Field No.", '>%1', 0);
          //De velden lezen
          IF DataItemFields.FINDSET THEN BEGIN
            REPEAT
              OutPutValue := '';
              ProcessDocumentField(DataItemFields,
                                   OutPutValue,
                                   0);
            UNTIL DataItemFields.NEXT = 0;
          END;
          LoopDocDataItems(iDocGroup,
                           iDocumentTemplate,
                           iDocumentNo,
                           iDataItem."Line No.",
                           vDataItemRef,
                           Text014,
                           iDataItem."Word Document Table No.");
        END;
      END;
    END;

    PROCEDURE GetLastDocument@1199198008(VAR vDocumentProperties@1199198002 : Record 11012746;iRecDocTemplate@1199198003 : Record 11012401;iDocLinkRID@1199198000 : RecordID;iAction@1199198005 : Code[20]) : Boolean;
    VAR
      DocumentLink@1199198001 : Record 11012747;
      RecRef@1199198004 : RecordRef;
    BEGIN
      RecRef := iDocLinkRID.GETRECORD();
      DocumentLink.SETCURRENTKEY("Record ID"); //mg, 05-07-11: M27801
      DocumentLink.SETRANGE("Table No.", RecRef.NUMBER);
      DocumentLink.SETFILTER("Record ID",  STRSUBSTNO('''%1''',RecRef.RECORDID));
      DocumentLink.SETRANGE(Source, TRUE);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF DocumentLink.FINDSET THEN BEGIN
        REPEAT
          IF vDocumentProperties.GET(DocumentLink."Document No.") THEN
            vDocumentProperties.MARK(TRUE);
        UNTIL DocumentLink.NEXT = 0;
      END;

      vDocumentProperties.MARKEDONLY(TRUE);

      vDocumentProperties.SETCURRENTKEY("Document Group", "Document Template", "Contact No.", "Doc. Action", Version);
      vDocumentProperties.SETRANGE("Document Group", iRecDocTemplate."Document Group");
      vDocumentProperties.SETRANGE("Document Template", iRecDocTemplate."Template Code");
      vDocumentProperties.SETRANGE("Contact No.", gRecProspect."No.");
      IF (iAction <> '') THEN BEGIN
        vDocumentProperties.SETRANGE("Doc. Action", iAction);
      END ELSE BEGIN
        vDocumentProperties.SETRANGE("Doc. Action");
      END;

      IF vDocumentProperties.FINDLAST THEN BEGIN
        vDocumentProperties.CLEARMARKS();
        EXIT(TRUE);
      END;

      vDocumentProperties.CLEARMARKS();
      EXIT(FALSE);
    END;

    PROCEDURE CopyDocument@1100525001(VAR vDocumentProperties@1100525000 : Record 11012746;lAskCopyFile@1100485000 : Boolean;lNewVersion@1100485001 : Boolean);
    VAR
      DocumentProperties@1100485012 : Record 11012746;
      DocumentLinkMgt@1199198000 : Codeunit 11012401;
      lvExtension@1100485004 : Text[30];
      lCopyFile@1100485003 : Boolean;
      lOK@1100485005 : Boolean;
      lDate@1100485007 : Date;
      lTime@1100485006 : Time;
    BEGIN
      //**4PS 23172

      WITH vDocumentProperties DO BEGIN
        lCopyFile := FALSE;
        IF (File <> '') AND lAskCopyFile THEN BEGIN
          IF gCduWord.ExistingFileName(File, TRUE, FALSE, lvExtension) THEN
            lCopyFile := CONFIRM(Text008);
        END ELSE BEGIN
          lCopyFile := TRUE
        END;

        CopyDocumentCard(vDocumentProperties, DocumentProperties);
        DocumentProperties."Internal Company" := "Internal Company";

        IF lNewVersion THEN
          DocumentProperties.Version := GetLastVersion + 1;
        DocumentProperties.MODIFY;

        // Copy Document Links
        DocumentLinkMgt.CopyDocumentLink("No.", DocumentProperties."No.", FALSE);

        CopyDocumentRelation("No.", DocumentProperties."No.");

        IF lCopyFile THEN
          CopyDocumentFile(vDocumentProperties, DocumentProperties);

        MESSAGE(STRSUBSTNO(Text010, "No.", DocumentProperties."No."));

        GET(DocumentProperties."No.");
        IF MARKEDONLY THEN
          MARK := TRUE;

      END;
    END;

    PROCEDURE CopyDocumentCard@1100528703(DocumentProperties@1100528700 : Record 11012746;VAR DocumentProperties2@1100528701 : Record 11012746);
    BEGIN
      DocumentProperties2.COPY(DocumentProperties);
      DocumentProperties2."No." := '';
      DocumentProperties2."Final Printed" := FALSE;
      DocumentProperties2."Final Printed Date" := 0D;
      DocumentProperties2.VALIDATE(File, '');
      DocumentProperties2."Web link" := '';
      DocumentProperties2.INSERT(TRUE);
    END;

    PROCEDURE CopyDocumentRelation@1100528701(FromNo@1100528704 : Code[20];ToNo@1100528705 : Code[20]);
    VAR
      DocumentRelation@1100528703 : Record 11012407;
      DocumentRelation2@1100528702 : Record 11012407;
      TenderParagraph@1100528701 : Record 11012072;
      TenderParagraph2@1100528700 : Record 11012072;
    BEGIN
      DocumentRelation.SETRANGE("Document Type", DocumentRelation."Document Type"::Document);
      DocumentRelation.SETRANGE("No.", FromNo);
      IF DocumentRelation.FINDSET THEN
        REPEAT
          DocumentRelation2.COPY(DocumentRelation);
          DocumentRelation2."No." := ToNo;
          DocumentRelation2.INSERT;

          TenderParagraph.SETRANGE(Type, TenderParagraph.Type::Document);
          TenderParagraph.SETRANGE("No.", DocumentRelation."No.");
          TenderParagraph.SETRANGE("Document No.", DocumentRelation."Related Document No.");
          IF TenderParagraph.FINDSET THEN
            REPEAT
              TenderParagraph2.COPY(TenderParagraph);
              TenderParagraph2."No." := DocumentRelation2."No.";
              TenderParagraph2."Document No." := DocumentRelation2."Related Document No.";
              TenderParagraph2.INSERT;
            UNTIL TenderParagraph.NEXT = 0;
        UNTIL DocumentRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE ExportPlantTypePicture@1100525017(PlantType@1100525009 : Record 11012551;ClientTempFileName@1100525010 : Text[1024]) : Text[1024];
    VAR
      TempBlob@1100525500 : Record 99008535;
      FileMgt@1100525003 : Codeunit 419;
    BEGIN
      PlantType.CALCFIELDS(Picture);
      IF NOT PlantType.Picture.HASVALUE THEN
        EXIT('');

      TempBlob.Blob := PlantType.Picture;
      EXIT(FileMgt.BLOBExport4PS(TempBlob, ClientTempFileName, FALSE, FALSE));
    END;

    PROCEDURE LogProjectSiteDocumentLinks@1100409000(DocumentNo@1100409000 : Code[20]);
    VAR
      DocumentLink@1100409001 : Record 11012747;
      ProjectSiteMgt@1100409002 : Codeunit 11012282;
    BEGIN
      //kzwerver, #DP00177
      DocumentLink.SETRANGE("Document No.", DocumentNo);
      //IF (NOT DocumentLink.FINDFIRST) THEN //C024324.o
      IF NOT DocumentLink.FINDSET THEN //C024324.n
        EXIT;

      REPEAT
        ProjectSiteMgt.LogDocumentLink(2, DocumentLink);
      UNTIL (DocumentLink.NEXT = 0);
    END;

    PROCEDURE ExecD3Upload@1100409001(CopyAndUpdateDocument@1100409001 : Boolean;DocumentProperties@1199198001 : Record 11012746;DocumentProperties2@1100409002 : Record 11012746);
    VAR
      D3DocumentManagement@1100409000 : Codeunit 11012409;
      lvOK@1100409003 : Boolean;
      D3DocId@1100409004 : Text[50];
    BEGIN
      lvOK := D3DocumentManagement.NewDocument(DocumentProperties, D3DocId);

      IF lvOK THEN BEGIN
        FileMgt.DeleteClientFile(DocumentProperties.File + '.doc');
        DocumentProperties."D3 Document ID" := D3DocId;
        DocumentProperties.File := '';
        DocumentProperties.MODIFY;
      END ELSE BEGIN
        MESSAGE(Text120);
      END;
    END;

    PROCEDURE CheckD3Use@1100525002(DocumentProperties@1199198001 : Record 11012746) : Boolean;
    VAR
      D3Setup@1100485000 : Record 11071826;
    BEGIN
      IF DocumentProperties."D3 Document Type" = '' THEN
        EXIT(FALSE);

      IF D3Setup.GET THEN
        IF (D3Setup."IP Address" <> '') THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE D3DocumentURL@1100409004(DocumentProperties@1199198001 : Record 11012746) lvURL : Text[500];
    VAR
      D3Setup@1100485000 : Record 11071826;
      D3DocumentMgt@1199198000 : Codeunit 11012409;
      D3DocID@1100409000 : Text[50];
    BEGIN
      IF DocumentProperties."D3 Document Type" = '' THEN
        EXIT;
      IF DocumentProperties."D3 Document ID" = '' THEN
        EXIT;

      D3DocID := DocumentProperties."D3 Document ID";

      IF D3Setup.GET THEN BEGIN
        IF (D3Setup."IP Address" <> '') THEN BEGIN
          IF NOT D3DocumentMgt.ExecSearchURLfromDocID(D3DocID, lvURL) THEN BEGIN
            lvURL := '';
            MESSAGE(Text112);
          END;
        END;
      END;
    END;

    PROCEDURE OpenD3Document@1100409002(DocumentProperties@1199198001 : Record 11012746);
    VAR
      D3Setup@1100485000 : Record 11071826;
      D3DocumentMgt@1199198000 : Codeunit 11012414;
      D3DocID@1100409000 : Text[50];
      wSHShell@1100409002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      _commandLine@1100409003 : Text[500];
      _runModally@1100409004 : Boolean;
      dummyInt@1100409005 : Integer;
      lvURL@1100409006 : Text[500];
      WordAutomation@1100525000 : Codeunit 11012400;
    BEGIN
      IF (DocumentProperties."D3 Document Type" = '') OR
         (DocumentProperties."D3 Document ID" = '') THEN
        EXIT;

      D3DocID := DocumentProperties."D3 Document ID";

      IF D3Setup.GET THEN BEGIN
        IF (D3Setup."IP Address" <> '') THEN BEGIN
          IF D3DocumentMgt.ExecSearchURLfromDocID(D3DocID, lvURL) THEN BEGIN
            IF DocumentProperties."External Document" THEN BEGIN
              _commandLine := 'iexplore.exe' + ' ' + lvURL;
              _runModally := FALSE;
              dummyInt := 1;
              CREATE(wSHShell,FALSE,TRUE);
              wSHShell.Run(_commandLine,dummyInt,_runModally);
              CLEAR(wSHShell);
            END ELSE BEGIN
              CLEAR(WordAutomation);
              WordAutomation.Initialise;
              WordAutomation.Open(FALSE, lvURL, TRUE);
              WordAutomation.Display;
            END;
          END ELSE BEGIN
            MESSAGE(Text112);
          END;
        END;
      END;
    END;

    PROCEDURE OpenD3Card@1100409015(D3DocID@1100409001 : Text[50]);
    VAR
      txtFile@1100409000 : File;
      D3Setup@1100409006 : Record 11071826;
      wSHShell@1100409005 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      _commandLine@1100409004 : Text[80];
      _runModally@1100409003 : Boolean;
      dummyInt@1100409002 : Integer;
      TempPath@1100409007 : Text[250];
    BEGIN
      IF D3Setup.GET THEN BEGIN
        IF (D3Setup."IP Address" <> '') THEN BEGIN

          CREATE(wSHShell,FALSE,TRUE);

          TempPath := wSHShell.ExpandEnvironmentStrings('%temp%');

          txtFile.TEXTMODE(TRUE);
          txtFile.CREATE(TempPath + '\zoek.d3l');
          txtFile.WRITE('idlist');
          txtFile.WRITE(D3DocID);
          txtFile.CLOSE;

          _commandLine := TempPath + '\zoek.d3l';
          _runModally := FALSE;
          dummyInt := 1;
          wSHShell.Run(_commandLine,dummyInt,_runModally);
          CLEAR(wSHShell);
        END;
      END;
    END;

    PROCEDURE GenerateExtDocCard@1100409003(iDocType@1100528707 : Code[10];DocLinkRID@1100528706 : ARRAY [5] OF RecordID;DepartmentCode@1100528714 : Code[20];iContactNo@1100528704 : Code[20];iPersonNo@1100528703 : Code[20];iDocGroup@1100409000 : Code[20];iDocumentNo@1100409002 : Code[20]) : Code[20];
    VAR
      DocumentProperties@1100528712 : Record 11012746;
      DocumentType@1100409001 : Record 11012405;
      UserSetup@1100409003 : Record 91;
      DocumentLinkManagement@1100528718 : Codeunit 11012401;
      lTxtFile@1100528710 : Text[250];
      lTxtPrefix@1100528709 : Text[1];
      lTxtPath@1100525000 : Text[132];
      NewVersion@1100528716 : Integer;
    BEGIN
      gRecDocGroup.GET(iDocGroup);
      gRecDocGroup.TESTFIELD(Code);
      gRecDocGroup.TESTFIELD("Document Directory");

      DocumentType.GET(iDocType);

      CRMSetup.GET;

      IF NOT gRecProspect.GET(iContactNo) THEN
        gRecProspect.INIT;

      lTxtPrefix := Text100;
      lTxtPath := gRecDocGroup."Document Directory" + lTxtPrefix + iContactNo;

      IF NOT FileMgt.ClientDirectoryExists(lTxtPath) THEN BEGIN
        gRecProspect.VALIDATE("Document Group", gRecDocGroup.Code);
        FileMgt.CreateClientFolder(lTxtPath, TRUE);
      END;

      //lTxtFile := FORMAT(DocumentType."Prefix File Name") + iDocumentNo; !!!!!! TODO  D3

      WITH DocumentProperties DO BEGIN

        INIT;
        "No." := '';
      //  "No. Series" := DocumentType."No. Series"; !!!!!! TODO  D3
        "Document Group" := iDocGroup;
        "Document No." := iDocumentNo;
        Description := lTxtFile;
      //  "D3 Document Type" := DocumentType."D3 Document Type";    !!!!!! TODO  D3
        "External Document" := TRUE;
        VALIDATE("Contact No.", gRecProspect."No.");
        IF iPersonNo <> '' THEN
          VALIDATE("Contact Person No.", iPersonNo);

        Version := NewVersion;
        "Creation Date" := TODAY;
        "Creation Time" := TIME;
        "User ID" := USERID;
        IF UserSetup.GET(USERID) THEN
          IF UserSetup."Employee No." <> '' THEN
            VALIDATE(Sender, UserSetup."Employee No.");

        "Internal Company" := COMPANYNAME;
        INSERT(TRUE);

        "Document Type" := DocumentType.Type;   //Aanpassing 24-01 ivm doc links naar D3
        MODIFY;
        // Create document links
        DocumentLinkManagement.CreateDocumentLink(DocumentProperties, DocLinkRID);
        // Create default document links
        VALIDATE("Document Type", DocumentType.Type);

        IF DepartmentCode <> '' THEN
          DocumentProperties."Department Code" := DepartmentCode;

        MODIFY(TRUE);

        EXIT(DocumentProperties."No.");

      END;
      EXIT('');
    END;

    LOCAL PROCEDURE SetPPTDocCTBDoc@1100525003(DocumentProperties@1100525002 : Record 11012746;VAR IsPPTDoc@1100525001 : Boolean;VAR IsCTBDoc@1100525000 : Boolean);
    VAR
      SharePointSetup4PS@1100525004 : Record 11012730;
      ProjectSiteSetup@1100525003 : Record 11071871;
    BEGIN
      //PPT.UpdateBookmarks.n
      IF (NOT ProjectSiteSetup.GET) THEN
        ProjectSiteSetup.INIT;
      IsCTBDoc := (ProjectSiteSetup."Website URL" <> '') AND
                  (DocumentProperties.File = '') AND (DocumentProperties."Web link" <> '');
      IF (NOT SharePointSetup4PS.ISEMPTY) THEN BEGIN
        SharePointSetup4PS.GET;
        IF (SharePointSetup4PS."Use Project Portal") THEN BEGIN
          IsPPTDoc := (SharePointSetup4PS."Use Project Portal") AND
                      (DocumentProperties.File = '') AND (DocumentProperties."Web link" <> '');
          IsCTBDoc := FALSE;
        END;
      END;
    END;

    LOCAL PROCEDURE DoPPTDoc@1100525004(CheckOut@1100525004 : Boolean;VAR DocumentProperties@1100525003 : Record 11012746;VAR WebLink@1100525002 : Text;lTxtPrefix@1100525001 : Text[1];iContactNo@1100525000 : Code[20]);
    VAR
      DocumentPortalProject@1100525006 : Codeunit 11012948;
      DocumentLinkManagement@1100525005 : Codeunit 11012401;
    BEGIN
      //PPT.UpdateBookmarks.n
      WebLink := DocumentPortalProject.GetInternalDocumentToUpdate(DocumentLinkManagement.GetProjectNo(DocumentProperties."No."),
        DocumentProperties, gRecDocGroup."Document Directory" + lTxtPrefix + iContactNo, CheckOut);
      IF (CheckOut) AND (WebLink = '') THEN
        ERROR(Text109);
      IF (CheckOut) THEN
        DocumentProperties.MODIFY;
    END;

    LOCAL PROCEDURE DoCTBDoc@1100525005(CheckOut@1100525004 : Boolean;VAR DocumentProperties@1100525003 : Record 11012746;VAR WebLink@1100525002 : Text;lTxtPrefix@1100525005 : Text[1];iContactNo@1100525001 : Code[20]);
    VAR
      ProjectSiteMgt@1100525000 : Codeunit 11012282;
    BEGIN
      //PPT.UpdateBookmarks.n
      WebLink := ProjectSiteMgt.GetInternalDocumentToUpdate(DocumentProperties, gRecDocGroup."Document Directory" + lTxtPrefix + iContactNo,
        CheckOut);
      IF (CheckOut) AND (WebLink = '') THEN
        ERROR(Text109);
      IF (CheckOut) THEN
        DocumentProperties.MODIFY;
    END;

    BEGIN
    {
      4PS01 JD Call 6007 03-11-2006 Permissions checking build in. Now only when Creating documents the permissions are checked (not when
      updating the document). If for a template no permissions are defined, everyone has permission. If permissions are defined for a
      template, then these are taken into account.

      4PS, MVos, 20-05-2010:
       - new function CopyDocument. (Replaced function CopyWordDocument)
       - DocLinkRID : first array is always the source record
                      other arrays are the doc link record
       - ContactRID : first array is contact
                      secoond array is person
       - New functions SetDataItemFilters and LoopDataItemRef

      4PS MVOS 20101005 23172 : - Renamed function CopyDocument to CopyDocumentFile and changed version in filename
                                - Add function CopyDocument (from Word Document form)
                                - Changed parameter in function in function CreateDoc
    }
    END.
  }
}

