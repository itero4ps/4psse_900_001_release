OBJECT Codeunit 11012553 Post Plant Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11012556;
    OnRun=BEGIN
            gTransportOrderRun := FALSE;
            OrderRec.COPY(Rec);
            Code;
            Rec := OrderRec;
          END;

  }
  CODE
  {
    VAR
      Text000@1100485018 : TextConst 'ENU=There is no %1 present. Do you want to post the %2 anyway ?';
      Text001@11012008 : TextConst 'ENU=Quantity must be 1 for Plant No. %1 %2.';
      Text002@11012009 : TextConst 'ENU=Quantity could not be 0 for Plant %1';
      Text003@11012010 : TextConst 'ENU=There is unsufficient stock available for Plant No. ''%1 %2''.';
      Text004@11012011 : TextConst 'ENU=There is unsufficient stock available for Plant No. ''%1 %2'' per %3.';
      PlantSetup@11012000 : Record 11012550;
      GLSetupRec@1100485006 : Record 98;
      InventSetup@1100525005 : Record 313;
      OrderRec@11012001 : Record 11012556;
      OrderLineRec@11012002 : Record 11012557;
      InventoryRec@11012003 : Record 11012555;
      CostRec@11012004 : Record 11012558;
      InspecTypeRec@1100485015 : Record 11012562;
      PlantInspecTypeRec@1100485016 : Record 11012563;
      InspectionRec@1210190003 : Record 11012564;
      FromLocRec@1100485008 : Record 11012554;
      ToLocRec@1100485009 : Record 11012554;
      PlantRateCodeRec@1100525001 : Record 11020502;
      ItemRec@1100485014 : Record 27;
      ItemJnlLineRec@1100485002 : Record 83;
      TempPurchHeader@1100485019 : TEMPORARY Record 38;
      InventoryMngmnt@11012005 : Codeunit 11012566;
      ItemJnlPostLineCU@1100485007 : Codeunit 22;
      BlockingOrigLocChecked@11012006 : Boolean;
      Text005@1210190000 : TextConst 'ENU=%1 must equal the Sum of %2, %3 and %4 in %5 %6';
      Text006@1210190001 : TextConst 'ENU=No %1 present for Plant %2 %3. Continue ?';
      Text007@1210190002 : TextConst 'ENU=Cancelled';
      Text008@1210190004 : TextConst 'ENU=Aut. Approved for Shipment';
      Text009@1100529000 : TextConst 'ENU=No %1 created for Plant %2 %3. Continue ?';
      Text010@1100485000 : TextConst 'ENU=There is unsufficient stock available for Plant No. ''%1 %2'', Rate Code ''%4'' per %3.';
      Text011@1100485001 : TextConst 'ENU=There is unsufficient stock available for Plant No. ''%1 %2''.';
      Text012@1100485003 : TextConst 'ENU="Item Line(s) not allowed on Plant Orders of Type ''%1''. "';
      gTransportOrderRun@1100485010 : Boolean;
      Text013@1100485011 : TextConst 'ENU=Status Depot (%1) of the ''From Location'' in the Line must be equal to status Depot (%2) of the ''From  location'' in the Order Header, in Order Line ''%3-%4''.';
      Text014@1100485012 : TextConst 'ENU=is ''%1'': Negative inventory correction on a locatie not allowed for sales/buy back plant';
      Text015@1100485013 : TextConst 'ENU=is ''%1'': Negative inventory correction for sales/buy back plant only allowed from a depot';
      Text016@1100485021 : TextConst 'ENU=is filled (%1), but there is not creaed a Purchase Order';
      Text017@1100525000 : TextConst 'ENU="Last removal-plantorder of transportorder ''%1'' is posted. Transportorder can not set to ''Sended'', because transportorder data is not filled/wrong. "';
      Text018@1100525002 : TextConst 'ENU=On %1 of %2 plantorder lines only ''%3'' is filled, but ''%4'' is zero.';
      Text019@1100525003 : TextConst 'ENU=Post plantorder %1 not allowed.';
      Text020@1100525004 : TextConst 'ENU=Do you want to post plantorder %1 anyway?';
      gChargePurchRun@1100409000 : Boolean;
      Text021@1100529001 : TextConst 'ENU=From %1 of %2 plant order lines with damage no damage costs created. Are you sure, continue?';
      Text022@1100409001 : TextConst 'ENU=Posting not allowed. %1 ''%2'' is blocked, %3 ''%4'' (%5).';

    PROCEDURE RunPostPlantOrderFromTransport@1100485001(VAR Rec@1100485000 : Record 11012556);
    BEGIN
      gTransportOrderRun := TRUE;
      OrderRec.COPY(Rec);
      Code;
      Rec := OrderRec;
    END;

    PROCEDURE Code@1();
    VAR
      OldOrderRec@1000000000 : Record 11012556;
      SalesRentalLogisticsMgt@1100485001 : Codeunit 11012143;
      MailStatusPOModified@1100529001 : Codeunit 11012588;
      lvCounter1@1100525000 : Integer;
      lvCounter2@1100525001 : Integer;
      lvText@1100525002 : Text[1024];
      OtherDepotToDepot@1100529000 : Boolean;
    BEGIN
      PlantSetup.GET;
      GLSetupRec.GET;
      InventSetup.GET;  //C006443.n

      WITH OrderRec DO BEGIN

        LOCKTABLE;

        TESTFIELD(Posted,FALSE);
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD("Transfer Date");
        IF (PlantSetup."Def. Transfer PO" = PlantSetup."Def. Transfer PO"::Yes) THEN BEGIN  //* See call 22454 (Dura Vermeer)
          IF NOT gChargePurchRun THEN BEGIN  //C005327.n (C001519) No check on Def. transfer date for these PO's
            TESTFIELD("Def. Transfer");
            TESTFIELD("Transfer Date", "Def. Transfer");
          END;
        END;
        IF PlantSetup."Extended Picking Procedure" OR PlantSetup."Transport Orders" THEN
          TESTFIELD(Status, Status::Released);
        IF ("Transport Cost for (Advice)" = "Transport Cost for (Advice)"::Project) AND (PlantSetup."Transport Orders") THEN
          TESTFIELD("Project No. (TP-Cost)");
        IF PlantSetup."Transport Status (Ext. Plan.)" AND
           (NOT ("Transport Status (Ext.)" IN
            ["Transport Status (Ext.)"::Open, "Transport Status (Ext.)"::Canceled, "Transport Status (Ext.)"::Finished]))
        THEN
          FIELDERROR("Transport Status (Ext.)");

        FromLocRec.GET("From Location");
        ToLocRec.GET("To Location");
        IF (Type <> Type::"Negative Inventory Correction") THEN
          CheckBlock("To Location",TRUE);
        CheckPOBlockedForPosting(OrderRec);  //C006416.n
        CheckElementMandatory(OrderRec);

        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        //OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Plant);
        OrderLineRec.SETFILTER(Type, '%1|%2', OrderLineRec.Type::Plant, OrderLineRec.Type::Item);
        //ItemLineRec.RESET;
        //ItemLineRec.SETRANGE("Plant Order No.", "No.");
        //ItemLineRec.SETRANGE(Type, ItemLineRec.Type::Item);
        //IF NOT OrderLineRec.FINDFIRST AND NOT ItemLineRec.FINDFIRST THEN BEGIN
        IF NOT OrderLineRec.FINDFIRST THEN BEGIN
          IF (NOT gTransportOrderRun) AND          //* Not needed in transport-run, is already done during 'Release Plant Order'
             (NOT gChargePurchRun) AND GUIALLOWED  //* C001519.n  This plant order has only cost lines
          THEN BEGIN
            IF NOT CONFIRM(STRSUBSTNO(Text000,OrderLineRec.TABLECAPTION, OrderRec.TABLECAPTION), FALSE) THEN
              ERROR('');
          END;
        END ELSE BEGIN
          IF (Type = Type::Removal) AND (PlantSetup."Removal with Qty. to Receive") AND (Status < Status::Released) THEN BEGIN
            OrderLineRec.SETRANGE(Quantity, 0);
            OrderLineRec.SETFILTER("Qty. to Receive", '>%1', 0);
            lvCounter1 := OrderLineRec.COUNT;
            OrderLineRec.SETRANGE(Quantity);           //* Reset filters
            OrderLineRec.SETRANGE("Qty. to Receive");  //*
            IF lvCounter1 > 0 THEN BEGIN
              lvCounter2 := OrderLineRec.COUNT;
              lvText := STRSUBSTNO(Text018, lvCounter1, lvCounter2,
                OrderLineRec.FIELDCAPTION("Qty. to Receive"), OrderLineRec.FIELDCAPTION(Quantity));
              IF lvCounter2 = lvCounter1 THEN
                ERROR(lvText + '\' + STRSUBSTNO(Text019, "No."));
              IF GUIALLOWED THEN BEGIN
                IF NOT CONFIRM(lvText + '\' + STRSUBSTNO(Text020, "No."), FALSE) THEN
                  ERROR('');
              END;
            END;
          END;
          CheckAdvancedRemoval;
          IF NOT PlantSetup."Extended Picking Procedure" THEN  //DP00241.n (C004697)
            CheckDamageCostPresent(OrderRec);   //Only check if not already done on release PO
        END;

        CostRec.RESET;
        CostRec.SETRANGE("Plant Order No.","No.");
        CostRec.SETFILTER(Type,'<>%1',CostRec.Type::Text);
        IF CostRec.FINDSET THEN BEGIN
          CheckOrigLocBlocked;
          REPEAT
            CheckLineCost;
          UNTIL CostRec.NEXT = 0;
        END;

        CreateAndPostPurchOrders(OrderLineRec);

        //ItemLineRec.RESET;
        //ItemLineRec.SETRANGE("Plant Order No.","No.");
        //ItemLineRec.SETRANGE(Type, ItemLineRec.Type::Item);
        //IF ItemLineRec.FINDSET THEN BEGIN
        //  IF Type = Type::"Other Transfers" THEN
        //    OtherDepotToDepot := OrderRec.IsOtherTransferDepotToDepot();  //*DP00183.n
        //  IF (NOT (Type IN [Type::Arrival, Type::Removal])) AND (NOT OtherDepotToDepot) THEN //*DP00183.c
        //    ERROR(Text012, Type);
        //  CheckOrigLocBlocked;
        //  PlantSetup.TESTFIELD("Source Code Item Delivery");
        //  REPEAT
        //    PostOrderItemLine();
        //    ItemLineRec."Qty. for Inventory" := 0;
        //    ItemLineRec.Posted := TRUE;
        //    IF Type <> Type::Removal THEN
        //      ItemLineRec."Plant Location (Posted)" := "To Location"
        //    ELSE
        //      ItemLineRec."Plant Location (Posted)" := "From Location";
        //    IF OtherDepotToDepot THEN //*DP00183.n
        //      ItemLineRec."Plant Location (Posted)" := '';  // Was filled with Plantlocation (<>Depot)
        //    ItemLineRec.MODIFY;
        //    //IF WebSite.FIND('-') THEN
        //    //  SynchMgt.ModifyPlantOrderItemLine(ItemLineRec,ItemLineRec);
        //  UNTIL ItemLineRec.NEXT = 0;
        //END;
        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Item);
        IF OrderLineRec.FINDFIRST THEN BEGIN
          IF Type = Type::"Other Transfers" THEN
            OtherDepotToDepot := OrderRec.IsOtherTransferDepotToDepot();  //*DP00183.n
          IF (NOT (Type IN [Type::Arrival, Type::Removal])) AND (NOT OtherDepotToDepot) THEN //*DP00183.c
            ERROR(Text012, Type);
          CheckOrigLocBlocked;
          PlantSetup.TESTFIELD("Source Code Item Delivery");
        END;

        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        IF OrderLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
          //DP00485.sn C006159
          IF PlantSetup."No Rent End Date L-L (proj.)" AND
             (Type = Type::"Other Transfers") AND (NOT "Rental Shift") AND
             (FromLocRec."Project No." <> '') AND (ToLocRec."Project No." <> '') AND
             (FromLocRec."Company Name" = ToLocRec."Company Name") AND (NOT FromLocRec.Depot)
          THEN BEGIN
            "Rental Shift" := TRUE;
            "Rental Startdate (To Location)" := "Transfer Date";
            "Rental Enddate (From Location)" := "Transfer Date" - 1;
            MODIFY;
          END;
          //C006159.2
          IF PlantSetup."No Rent End Date Cust.-Cust." AND
             (Type = Type::"Other Transfers") AND (NOT "Rental Shift") AND
             (FromLocRec."Customer No." <> '') AND (ToLocRec."Customer No." <> '') AND
             (FromLocRec."Company Name" = ToLocRec."Company Name") AND (FromLocRec."Company Name" = '') AND (NOT FromLocRec.Depot)
          THEN BEGIN
            "Rental Shift" := TRUE;
            "Rental Startdate (To Location)" := "Transfer Date";
            "Rental Enddate (From Location)" := "Transfer Date" - 1;
            MODIFY;
          END;
          //DP00485.en
          InventoryRec.LOCKTABLE;
          InventoryMngmnt.InitializeNegStockProcess();
          REPEAT
            IF OrderLineRec.Type = OrderLineRec.Type::Plant THEN
              ProcessOrderLine;
            OrderLineRec."Plant Location (Posted Item)" := '';
            IF OrderLineRec.Type = OrderLineRec.Type::Item THEN BEGIN
              PostOrderItemLine();
              IF Type <> Type::Removal THEN
                OrderLineRec."Plant Location (Posted Item)" := "To Location"
              ELSE
                OrderLineRec."Plant Location (Posted Item)" := "From Location";
              IF OtherDepotToDepot THEN //*DP00183.n
                OrderLineRec."Plant Location (Posted Item)" := '';  // Was filled with Plantlocation (<>Depot)
            END;
            OrderLineRec."Qty. for Item Reservation" := 0;
            OrderLineRec.Posted := TRUE;
            OrderLineRec.MODIFY;
          UNTIL OrderLineRec.NEXT = 0;
          InventoryMngmnt.ProcessNegStockProcess();
        END;

        IF OrderRec."Sales Rental Order No." <> '' THEN
          SalesRentalLogisticsMgt.AdjustQuantRentalSide(OrderRec);

        OldOrderRec := OrderRec;

        Posted := TRUE;
        "Posting Date" := TODAY;
        Status := Status::Posted;
        "Posted by" := USERID;  //DP00241.n (16484)
        IF "Def. Transfer" <> "Transfer Date" THEN  //* See call 22454 (Dura Vermeer)
          "Def. Transfer" := "Transfer Date";

        MODIFY;

        CheckSetTransportOrderToSended();
        //IF WebSite.FIND('-') THEN
        //  SynchMgt.ModifyPlantOrder(OrderRec,OldOrderRec);

        IF (NOT (("Rental Free Order No." <> '') AND ("Rental Free Order Type" <> "Rental Free Order Type"::" "))) THEN BEGIN
          COMMIT;
          //DP00241.sn (31002)
          IF (NOT gChargePurchRun) AND ("Rental Free Order No." = '') THEN BEGIN
            CLEARLASTERROR;
            IF NOT MailStatusPOModified.RUN(OrderRec) THEN
              ERROR(GETLASTERRORTEXT);
          END;
          //DP00241.en (31002)
        END;
      END;
    END;

    PROCEDURE ProcessOrderLine@3();
    VAR
      lvLineFromLocRec@1100485001 : Record 11012554;
      lvToLocation@1100485000 : Code[20];
      QtyZeroOnRemovalWithQtyReceive@1100525000 : Boolean;
    BEGIN
      WITH OrderLineRec DO BEGIN
        QtyZeroOnRemovalWithQtyReceive :=
          (OrderRec.Type = OrderRec.Type::Removal) AND
          (PlantSetup."Removal with Qty. to Receive") AND
          (Quantity = 0) AND ("Qty. to Receive" > 0);

        TESTFIELD("From Location");
        TESTFIELD("Plant Type");
        IF NOT QtyZeroOnRemovalWithQtyReceive THEN
          TESTFIELD("No.");
        TESTFIELD("Transfer Date");
        TESTFIELD("Transfer Date", OrderRec."Transfer Date");
        TESTFIELD("Set Code", '');
        TESTFIELD(Description);  //*33268
        IF NOT ((OrderRec.Type = OrderRec.Type::Removal) AND ("To Location" <> '')) THEN
          lvToLocation := OrderRec."To Location"
        ELSE BEGIN
          IF (OrderRec.Type <> OrderRec.Type::"Negative Inventory Correction") THEN
            CheckLocBlocked("To Location",TRUE);
          lvToLocation := "To Location";
        END;
        OrderLineRec.CheckPlantTypeBlocked();  //DP00485.n (C009313)
        IF OrderLineRec.Quantity < 0 THEN
          OrderLineRec.FIELDERROR(Quantity);  //DP00690 (only allowed for item)
        CALCFIELDS(Bulk);
        IF NOT QtyZeroOnRemovalWithQtyReceive THEN BEGIN
          IF NOT Bulk AND (Quantity <> 1) THEN
            ERROR(Text001,"Plant Type","No.");
          IF Bulk AND (Quantity = 0) THEN
            ERROR(Text002,"Plant Type");
        END;

        IF "Rental Type" = "Rental Type"::" " THEN
          FIELDERROR("Rental Type")
        ELSE
          OrderLineRec.CheckRentalType();

        IF (OrderRec.Type = OrderRec.Type::Removal) THEN BEGIN
          lvLineFromLocRec.GET("From Location");
          lvLineFromLocRec.TESTFIELD(Depot, FALSE);
        END;

        IF ("Rental Type" <> "Rental Type"::Rental) AND ("From Location" <> OrderRec."From Location") THEN BEGIN
          lvLineFromLocRec.GET("From Location");
          IF lvLineFromLocRec.Depot <> FromLocRec.Depot THEN
            ERROR(Text013, lvLineFromLocRec.Depot, FromLocRec.Depot, "Plant Order No.", "Line No.");
        END;

        IF (OrderRec.Type = OrderRec.Type::"Negative Inventory Correction") AND
           ("Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back","Rental Type"::"Buy Back and Sales"])
        THEN BEGIN
          IF NOT ToLocRec.Depot THEN
            FIELDERROR("Rental Type", STRSUBSTNO(Text014, "Rental Type"))
          ELSE BEGIN
            lvLineFromLocRec.GET("From Location");
            IF NOT lvLineFromLocRec.Depot THEN
              FIELDERROR("Rental Type", STRSUBSTNO(Text015, "Rental Type"))
          END;
        END;

        IF "Rental Type" IN ["Rental Type"::"Buy Back","Rental Type"::"Buy Back and Sales"] THEN
          CheckOrigLocBlocked;

        IF (OrderRec.Type <> OrderRec.Type::"Negative Inventory Correction") AND (ToLocRec."Employee No." <> '') THEN BEGIN
          TESTFIELD("To Employee No.", ToLocRec."Employee No.");
          TESTFIELD("To Employee Company", ToLocRec."Company Name");
        END;

        SETFILTER("Date Filter",'..%1',"Transfer Date");
        IF "Rental Type" IN ["Rental Type"::Rental,"Rental Type"::Sales] THEN BEGIN
          //OLD IF NOT Bulk OR NOT PlantSetup."Negative Bulk Stock" THEN BEGIN
          IF NOT CheckNegativeStockAllowed(lvToLocation) THEN BEGIN
            IF PlantSetup."Rate Codes" OR ("From Rate Code" <> '') THEN BEGIN
              CALCFIELDS("Stock Rate Code on From Loc.");
              IF Quantity > "Stock Rate Code on From Loc." THEN
                ERROR(Text011, "Plant Type", "No.", "From Rate Code");
            END ELSE BEGIN
              CALCFIELDS("Stock Plant No. on From Loc.");
              IF Quantity > "Stock Plant No. on From Loc." THEN
                ERROR(Text003, "Plant Type", "No.");
            END;
          END;
        END;
        IF (OrderRec.Type <> OrderRec.Type::"Negative Inventory Correction") THEN BEGIN
          IF NOT ExitSoldSBBOnLoc() THEN BEGIN  //DP00241.n (26972)
            IF (NOT PlantSetup."Rate Codes") THEN
              TESTFIELD("To Rate Code", '');
            IF (PlantSetup."Rate Codes") THEN BEGIN
              //IF "Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back and Sales"] THEN  //C001216.o
              IF ("Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back and Sales"]) AND
                 (NOT OrderRec.IsOtherTransferDepotToDepot)
              THEN  //C001216.n
                TESTFIELD("To Rate Code", '')
              ELSE BEGIN
                TESTFIELD("To Rate Code");
                PlantRateCodeRec.CheckPlantRateCode(lvToLocation, "To Rate Code", TRUE, '');
              END;
            END;
          END;  //DP00241.n (26972)
        END;
        IF QtyZeroOnRemovalWithQtyReceive THEN
          EXIT;
        IF OrderRec."Advanced Removal" AND ("Rental Type" = "Rental Type"::Rental) AND
          (("Quantity Inventory" <> 0) OR ("Quantity Damaged" <> 0) OR ("Quantity Exit" <> 0))
        THEN BEGIN
          IF OrderLineRec."Quantity Inventory" <> 0 THEN
            ManageInventory(lvToLocation, "Quantity Inventory");
          IF OrderLineRec."Quantity Damaged" <> 0 THEN BEGIN
            OrderRec.TESTFIELD("To Location Repair");
            ManageInventory(OrderRec."To Location Repair", "Quantity Damaged");
          END;
          IF OrderLineRec."Quantity Exit" <> 0 THEN BEGIN
            OrderRec.TESTFIELD("To Location Exit");
            ManageInventory(OrderRec."To Location Exit", "Quantity Exit");
          END;
        END ELSE
          ManageInventory(lvToLocation, Quantity);

        IF ("Plant Type" <> '' ) AND ("No." > '0') AND (OrderRec.Type = OrderRec.Type::Arrival) THEN BEGIN
          InspectionRec.RESET;
          InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspect before");
          InspectionRec.SETRANGE("Plant Type","Plant Type");
          InspectionRec.SETRANGE("Plant No.","No.");
          InspectionRec.SETRANGE("Inspection Result",InspectionRec."Inspection Result"::" ");

          PlantInspecTypeRec.RESET;
          PlantInspecTypeRec.SETRANGE("Plant Type", "Plant Type");
          IF PlantInspecTypeRec.FINDSET THEN BEGIN
            REPEAT
              IF InspecTypeRec.GET(PlantInspecTypeRec."Inspection Type") THEN BEGIN
                //IF InspecTypeRec."Aut. Approval for Shipment" AND (FORMAT(InspecTypeRec."Time Limit Warning") <> '') THEN BEGIN  //DP00614.o
                IF InspecTypeRec."Aut. Approval for Shipment" AND (FORMAT(InspecTypeRec."Time Limit Warning") <> '') AND
                   (InspecTypeRec."Inspection Based on" <> InspecTypeRec."Inspection Based on"::Quantity)
                THEN BEGIN  //DP00614.n
                  InspectionRec.SETRANGE("Inspection Type",InspecTypeRec.Code);
                  InspectionRec.SETFILTER("Date Filter",'%1..',CALCDATE(InspecTypeRec."Time Limit Warning","Transfer Date"));
                  InspectionRec.SETRANGE("Plant to Inspect",TRUE);
                  IF InspectionRec.FINDFIRST THEN BEGIN
                    InspectionRec."Inspected on" := "Transfer Date";
                    InspectionRec."Inspection Result" := InspectionRec."Inspection Result"::Approved;
                    InspectionRec.Comment := Text008;
                    InspectionRec.MODIFY(FALSE);  //* False!
                    InspectionRec.CreateNewInspections;
                  END;
                END;
              END;
            UNTIL PlantInspecTypeRec.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CheckNegativeStockAllowed@1100485002(ToLocation@1210190000 : Code[20]) : Boolean;
    VAR
      lvFromLocRec@1100485000 : Record 11012554;
    BEGIN
      WITH OrderLineRec DO BEGIN
        IF (NOT Bulk) OR ("No." <> '0') THEN  //* Bij uniek materieel en bij bulk materieel met volgnr.(extern mat.)
          EXIT(FALSE);                        //* geen neg. voorraad toegestaan. Alleen voor bulk met volgnr. '0'.
      //* 31-05-2006 Geen neg. voorraad toestaan bij (extern) bulk mat. met volgnr. nu ook van belang voor VJP en
      //* ophalen inhuurposten (bij inkoopfact.). Dat nu op basis van materieelvoorraad-tabel waar alleen records
      //* met aantal groter dan nul worden gelezen. Anders worden er daar teveel geteld.

        //*26721.sn
        IF (OrderRec.Type = OrderRec.Type::"Negative Inventory Correction") OR
           ((OrderRec.Type = OrderRec.Type::"Other Transfers") AND ("From Location" = ToLocation))
        THEN
          EXIT(FALSE);
        //*26721.en

        //*24451.o
        //IF NOT PlantSetup."Negative Bulk Stock" THEN BEGIN
        //  IF NOT PlantSetup."Negative Bulk Stock Depot" THEN
        //    EXIT(FALSE);
        //  lvFromLocRec.GET("From Location");
        //  IF NOT lvFromLocRec.Depot THEN
        //    EXIT(FALSE);
        //END;
        //EXIT(TRUE);

        //*24451.n
        IF PlantSetup."Negative Bulk Stock Location" OR PlantSetup."Negative Bulk Stock Depot" THEN BEGIN
          lvFromLocRec.GET("From Location");
          IF lvFromLocRec.Depot THEN
            EXIT(PlantSetup."Negative Bulk Stock Depot")
          ELSE
            EXIT(PlantSetup."Negative Bulk Stock Location");
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE ManageInventory@1210190000(ToLocation@1210190000 : Code[20];Quant@1210190001 : Decimal);
    VAR
      OrderType@1210190002 : 'Receipt,Plant Order,Exit Order';
    BEGIN
      WITH OrderLineRec DO BEGIN
        IF NOT ExitSoldSBBOnLoc() THEN BEGIN  //DP00241.n (26972)
          IF NOT InventoryMngmnt.PostInventory(
            OrderType::"Plant Order","Plant Order No.","Line No.","From Location",
            ToLocation,"Plant Type","No.","Transfer Date",Quant,
            (OrderRec.Type= OrderRec.Type::"Negative Inventory Correction"),"Rental Type",
            "From Rate Code","To Rate Code","To Employee No.","To Employee Company", "Original Arrival Order No.")
          THEN BEGIN
            IF (NOT PlantSetup."Rate Codes") AND ("From Rate Code" = '') THEN
              ERROR(Text004,"Plant Type","No.","Transfer Date")
            ELSE
              ERROR(Text010,"Plant Type","No.","Transfer Date","From Rate Code");
          END;
        //DP00241.sn (26972)
        END ELSE BEGIN
          OrderLineRec."Buy Back Rate" := 0;
          IF NOT InventoryMngmnt.PostExitSoldSBBOnLocation(
            OrderType::"Plant Order","Plant Order No.","Line No.","From Location",
            "Plant Type","No.","Transfer Date",Quant, "Rental Type", "From Rate Code")
          THEN BEGIN
            IF (NOT PlantSetup."Rate Codes") AND ("From Rate Code" = '') THEN
              ERROR(Text004,"Plant Type","No.","Transfer Date")
            ELSE
              ERROR(Text010,"Plant Type","No.","Transfer Date","From Rate Code");
          END;
        END;
        //DP00241.en (26972)
      END;
    END;

    PROCEDURE CheckLineCost@4();
    BEGIN
      WITH CostRec DO BEGIN
        TESTFIELD("No.");
        CALCFIELDS(Bulk);
        IF Type = Type::Damage THEN BEGIN
          TESTFIELD("Plant Type");
          IF NOT Bulk THEN
            TESTFIELD("Plant No.");
        END;
        TESTFIELD(Quantity);
        IF ("Vendor No." <> '') AND ("Purchase Order No." = '') THEN
          FIELDERROR("Vendor No.", STRSUBSTNO(Text016, "Vendor No."));
        TESTFIELD(Description);  //*33268
      END;
    END;

    PROCEDURE CheckOrigLocBlocked@2();
    BEGIN
      IF BlockingOrigLocChecked THEN
        EXIT;

      OrderRec.CheckBlock(OrderRec."From Location",TRUE);
      BlockingOrigLocChecked := TRUE;
    END;

    PROCEDURE CheckAdvancedRemovalOnReleasPO@1100485005(IPlantOrderRec@1100485000 : Record 11012556);
    BEGIN
      OrderRec := IPlantOrderRec;

      PlantSetup.GET;
      CheckAdvancedRemoval;
    END;

    PROCEDURE CheckAdvancedRemoval@1210190001();
    VAR
      lExitOrder@1210190001 : Record 11012559;
    BEGIN
      IF NOT OrderRec."Advanced Removal" THEN
        EXIT;

      WITH OrderLineRec DO BEGIN
        RESET;
        SETRANGE("Plant Order No.", OrderRec."No.");
        SETRANGE(Type,Type::Plant);
        SETRANGE("Rental Type", "Rental Type"::Rental);
        IF FINDSET THEN
          REPEAT
            IF PlantSetup."Split Mandatory For Adv. Rem." OR
               (("Quantity Inventory" <> 0) OR ("Quantity Damaged" <> 0) OR ("Quantity Exit" <> 0))
            THEN BEGIN

              IF Quantity <> ("Quantity Inventory" + "Quantity Damaged" + "Quantity Exit") THEN
                ERROR(
                  Text005, FIELDCAPTION(Quantity), FIELDCAPTION("Quantity Inventory"),
                  FIELDCAPTION("Quantity Damaged"), FIELDCAPTION("Quantity Exit"), FIELDCAPTION("Line No."), "Line No.");

              IF PlantSetup."Check Posting Advanced Removal" AND (NOT gTransportOrderRun) THEN BEGIN
                //* Not needed in transport-run, is already done during 'Release Plant Order'

                IF "Quantity Damaged" <> 0 THEN BEGIN
                  CostRec.SETRANGE("Plant Order No.", OrderRec."No.");
                  CostRec.SETRANGE("Plant Type", "Plant Type");
                  IF ("No." <> '') AND ("No." <> '0') THEN
                    CostRec.SETRANGE("Plant No.", "No.")
                  ELSE
                    CostRec.SETRANGE("Plant No.", '');
                  CostRec.SETRANGE(Type, CostRec.Type::Damage);
                  IF (NOT CostRec.FINDFIRST) AND GUIALLOWED THEN
                    IF NOT CONFIRM(Text006, FALSE, CostRec.TABLECAPTION, "Plant Type", "No.") THEN
                      ERROR(Text007);
                END;

                //DP00183.so
                //IF "Quantity Exit" <> 0 THEN BEGIN
                //  //IF NOT lExitOrder.GET(OrderRec."No.") THEN BEGIN  //*C-026307.o
                //  IF NOT lExitOrder.GET(OrderRec."Exit Order No.") OR (OrderRec."Exit Order No." = '') THEN BEGIN  //*C-026307.n
                //    IF NOT CONFIRM(Text006, FALSE, lExitOrder.TABLECAPTION, "Plant Type", "No.") THEN
                //      ERROR(Text007);
                //  END ELSE BEGIN
                //    //lExitOrderLine.SETRANGE("Exit-order No.", OrderRec."No.");  //*C-026307.o
                //    lExitOrderLine.SETRANGE("Exit-order No.", OrderRec."Exit Order No.");  //*C-026307.n
                //    lExitOrderLine.SETRANGE("Plant Type", "Plant Type");
                //    lExitOrderLine.SETRANGE("No.", "No.");
                //    lExitOrderLine.SETRANGE(Type, lExitOrderLine.Type::Plant);
                //    IF NOT lExitOrderLine.FINDFIRST THEN
                //      IF NOT CONFIRM(Text006, FALSE, lExitOrderLine.TABLECAPTION, "Plant Type", "No.") THEN
                //        ERROR(Text007);
                //  END;
                //END;
                //DP00183.eo
                //DP00183.sn
                IF ("Quantity Exit" <> 0) AND ("Exit Order No." = '') AND GUIALLOWED THEN BEGIN
                  IF NOT CONFIRM(Text009, FALSE, lExitOrder.TABLECAPTION, "Plant Type", "No.") THEN
                    ERROR(Text007);
                END;
                //DP00183.en
              END;
            END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CheckDamageCostPresent@1100529000(PlantOrder@1100529000 : Record 11012556);
    VAR
      PlantOrderLine@1100529001 : Record 11012557;
      PlantOrderCostLine@1100529002 : Record 11012558;
      CounterPOLine@1100529003 : Integer;
      CounterNotPresent@1100529004 : Integer;
    BEGIN
      //DP00241 (C004697)
      IF (PlantOrder.Type <> PlantOrder.Type::Removal) OR (NOT PlantOrder."Advanced Removal") THEN
        EXIT;

      PlantOrderLine.SETRANGE("Plant Order No.", PlantOrder."No.");
      PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
      PlantOrderLine.SETFILTER("Quantity Damaged", '<>%1', 0);
      IF PlantOrderLine.FINDSET THEN BEGIN
        PlantOrderCostLine.SETRANGE("Plant Order No.", PlantOrder."No.");
        REPEAT
          PlantOrderCostLine.SETRANGE("Plant Order Line No.", PlantOrderLine."Line No.");
          PlantOrderCostLine.SETRANGE(Type, PlantOrderCostLine.Type::Damage);
          IF PlantOrderCostLine.ISEMPTY THEN
            CounterNotPresent := CounterNotPresent + 1;
          CounterPOLine := CounterPOLine + 1;
        UNTIL PlantOrderLine.NEXT = 0;
        IF (CounterNotPresent > 0) AND GUIALLOWED THEN BEGIN
          IF NOT CONFIRM(Text021, FALSE , CounterNotPresent, CounterPOLine) THEN
            ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE PostOrderItemLine@1100485004();
    VAR
      DimMgt@1100409000 : Codeunit 408;
      lvPlantOrderItemBuyBack@1100485001 : Boolean;
      lvDebitCreditFactor@1100485000 : Integer;
    BEGIN
      WITH OrderLineRec DO BEGIN
        TESTFIELD("Item No.");
        TESTFIELD(Quantity);
        TESTFIELD(Description);  //*33268
        //*DP00183.sn
        //TESTFIELD("Location Code");  //* Mandatory for OtherTransfer(D-D), but also for Arrival+Removal(?)  //C006443.o
        IF OrderRec.Type = OrderRec.Type::"Other Transfers" THEN BEGIN //Is always Depot->Depot (checked before calling function)
          TESTFIELD("Location Code");  //C006443.n  Always mandatory for OtherTransfer(D-D)
          TESTFIELD("New Location Code");
          IF "New Location Code" = "Location Code" THEN
            FIELDERROR("New Location Code");
          IF Quantity < 0 THEN
            FIELDERROR(Quantity);
        END ELSE BEGIN
          IF InventSetup."Location Mandatory" THEN  //C006443.n
            TESTFIELD("Location Code");             //C006443.n  For Arrival+Removal, mandatory depending on setup
        END;
        //*DP00183.en
        ItemRec.GET("Item No.");

        IF (OrderRec.Type = OrderRec.Type::Removal) AND ItemRec."Sales/Buy-Back Item (Plant)" THEN
          lvPlantOrderItemBuyBack := TRUE;

        IF OrderLineRec.ExitSoldSBBOnLoc() THEN  //DP00485 call 26972
          EXIT;

        ItemJnlLineRec.INIT;
        ItemJnlLineRec."Source Code" := PlantSetup."Source Code Item Delivery";
        ItemJnlLineRec."Line No." := "Line No.";
        ItemJnlLineRec."Document No." := "Plant Order No.";
        ItemJnlLineRec."Document Date" := TODAY;
        ItemJnlLineRec."Posting Date" := OrderRec."Transfer Date";
        IF OrderRec.Type <> OrderRec.Type::"Other Transfers" THEN BEGIN  //*DP00183.n
          IF OrderRec.Type <> OrderRec.Type::Removal THEN BEGIN
            lvDebitCreditFactor := 1;
            ItemJnlLineRec."Gen. Bus. Posting Group" := ToLocRec."Gen. Bus. Posting Group";
            ItemJnlLineRec."Source No." := ToLocRec."Customer No.";
            IF ToLocRec."Customer No." <> '' THEN
              ItemJnlLineRec."Source Type" := ItemJnlLineRec."Source Type"::Customer;
          END ELSE BEGIN
            lvDebitCreditFactor := -1;
            ItemJnlLineRec."Gen. Bus. Posting Group" := FromLocRec."Gen. Bus. Posting Group";
            ItemJnlLineRec."Source No." := FromLocRec."Customer No.";
            IF FromLocRec."Customer No." <> '' THEN
              ItemJnlLineRec."Source Type" := ItemJnlLineRec."Source Type"::Customer;
          END;
          ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Sale;
          IF lvPlantOrderItemBuyBack THEN BEGIN
            ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Purchase;
            lvDebitCreditFactor := 1;  //* Soort 'Inkoop', dus niet -1
          END;
        //*DP00183.sn
        END ELSE BEGIN
          lvDebitCreditFactor := 1;
          ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Transfer;
          ItemJnlLineRec."New Location Code" := "New Location Code";
        END;
        //*DP00183.en
        ItemJnlLineRec."Location Code" := "Location Code";
        ItemJnlLineRec.VALIDATE("Item No.", "Item No.");
        ItemJnlLineRec."Variant Code" := "Variant Code";
        ItemJnlLineRec.VALIDATE("Unit of Measure Code","Unit of Measure");
        ItemJnlLineRec.VALIDATE(Quantity, (Quantity * lvDebitCreditFactor));
        ItemJnlLineRec.VALIDATE("Unit Amount", "Sales Rate");
        ItemJnlLineRec.Description := Description;
        ItemJnlLineRec."Country/Region Code" := ToLocRec."Country/Region Code"; //hs
        ItemJnlLineRec."Country/Region of Origin/Dest." := FromLocRec."Country/Region Code";
        IF ItemJnlLineRec."Shortcut Dimension 1 Code" <> ItemRec."Global Dimension 1 Code" THEN BEGIN
          ItemJnlLineRec."Shortcut Dimension 1 Code" := ItemRec."Global Dimension 1 Code";
          DimMgt.ValidateShortcutDimValues(1,ItemJnlLineRec."Shortcut Dimension 1 Code",ItemJnlLineRec."Dimension Set ID");  //DP000387 n
        END;
        IF ItemJnlLineRec."Shortcut Dimension 2 Code" <> ItemRec."Global Dimension 2 Code" THEN BEGIN
          ItemJnlLineRec."Shortcut Dimension 2 Code" := ItemRec."Global Dimension 2 Code";
          DimMgt.ValidateShortcutDimValues(2,ItemJnlLineRec."Shortcut Dimension 2 Code",ItemJnlLineRec."Dimension Set ID");  //DP000387 n
        END;

        //* 21-10-2008  Melding 13088: Ook de rest van de artikeldimensies opvoeren
        // DIMENSION SET FIXED: Already done on Validate Item
        //lvDefaultDimRec.SETRANGE("Table ID", DATABASE::Item);
        //lvDefaultDimRec.SETRANGE("No.", "Item No.");
        //lvDefaultDimRec.SETFILTER("Dimension Value Code", '<>%1', '');
        //lvDefaultDimRec.SETFILTER("Value Posting", '<>%1', lvDefaultDimRec."Value Posting"::"No Code");
        //IF lvDefaultDimRec.FINDSET(FALSE,FALSE) THEN BEGIN
        //  REPEAT
        //    IF (lvDefaultDimRec."Dimension Code" <> GLSetupRec."Global Dimension 1 Code") AND
        //       (lvDefaultDimRec."Dimension Code" <> GLSetupRec."Global Dimension 2 Code")
        //    THEN
        //      InsertTmpJnlLineDim(lvDefaultDimRec."Dimension Code", lvDefaultDimRec."Dimension Value Code");
        //  UNTIL lvDefaultDimRec.NEXT = 0;
        //END;
        ItemJnlPostLineCU.SetPlantOrderBuyBackItem(lvPlantOrderItemBuyBack);
        ItemJnlPostLineCU.RunWithCheck(ItemJnlLineRec);
        ItemJnlPostLineCU.SetPlantOrderBuyBackItem(FALSE);
      END;
    END;

    PROCEDURE CreateAndPostPurchOrders@1100485003(VAR PlantOrderItemLine@1100485000 : Record 11012557);
    VAR
      PurchHeader@1100485001 : Record 38;
      PurchLine@1100485002 : Record 39;
      SKU@1100485005 : Record 5700;
      NewLineNo@1100485003 : Integer;
    BEGIN
      IF NOT (OrderRec.Type IN [OrderRec.Type::Arrival, OrderRec.Type::Removal]) THEN
        EXIT;

      TempPurchHeader.DELETEALL;

      PlantOrderItemLine.RESET;
      PlantOrderItemLine.SETRANGE("Plant Order No.", OrderRec."No.");
      PlantOrderItemLine.SETRANGE(Type, PlantOrderItemLine.Type::Item);
      IF PlantOrderItemLine.FINDSET THEN
        REPEAT
          IF SKU.GET(PlantOrderItemLine."Location Code", PlantOrderItemLine."Item No.", '') THEN
            IF SKU.Consignment THEN BEGIN
              TempPurchHeader.SETRANGE("Buy-from Vendor No.", SKU."Vendor No.");
              IF NOT TempPurchHeader.FINDFIRST THEN BEGIN
                PurchHeader."Document Type" := PurchHeader."Document Type"::Order;
                PurchHeader.INSERT(TRUE);
                PurchHeader.VALIDATE("Buy-from Vendor No.", SKU."Vendor No.");
                PurchHeader.VALIDATE("Location Code", PlantOrderItemLine."Location Code");
                PurchHeader.VALIDATE("Order Date", OrderRec."Transfer Date");
                PurchHeader.VALIDATE("Posting Date", OrderRec."Transfer Date");
                PurchHeader."Amounts only" := TRUE;
                PurchHeader.MODIFY;

                TempPurchHeader := PurchHeader;
                TempPurchHeader.INSERT;
              END;

              NewLineNo := 10000;
              PurchLine.SETRANGE("Document Type", TempPurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.", TempPurchHeader."No.");
              IF PurchLine.FINDLAST THEN
                NewLineNo += PurchLine."Line No.";

              PurchLine.INIT;
              PurchLine."Document Type" := TempPurchHeader."Document Type";
              PurchLine."Document No." := TempPurchHeader."No.";
              PurchLine."Line No." := NewLineNo;
              PurchLine.Type := PurchLine.Type::Item;

              PurchLine."Order Date" := OrderRec."Transfer Date";
              PurchLine.VALIDATE("No.", PlantOrderItemLine."Item No.");
              PurchLine.VALIDATE("Location Code", PlantOrderItemLine."Location Code");
              //Direct Unit Cost will be filled by validating item no. and Location Code
              PurchLine.VALIDATE("Direct Unit Cost", PurchLine."Direct Unit Cost" * PlantOrderItemLine.Quantity);
              PurchLine."Amnt. to Receive" := PurchLine."Outst. Amount exc. VAT";
              PurchLine.INSERT(TRUE);
            END;
        UNTIL PlantOrderItemLine.NEXT = 0;

      TempPurchHeader.RESET;
      IF TempPurchHeader.FINDSET THEN
        REPEAT
          TempPurchHeader.Receive := TRUE;
          TempPurchHeader.Invoice := FALSE;
          PurchHeader := TempPurchHeader;
          CODEUNIT.RUN(CODEUNIT::"Purch.-Post", PurchHeader);
        UNTIL TempPurchHeader.NEXT = 0;
    END;

    PROCEDURE CheckSetTransportOrderToSended@1100525000();
    VAR
      lvTransPlantOrderRec@1100525000 : Record 11020509;
      lvTransPlantOrderRec2@1100525003 : Record 11020509;
      lvTransOrderRec@1100525001 : Record 11020505;
      lvTransOrderCU@1100525002 : Codeunit 11020501;
      lvTOStatusFrom@1100525004 : Option;
    BEGIN
      //* When the last removal-plantorder of a transportorder is posted then the transportorder
      //* will be set to 'Sended'. This depending on a plantsetup.
      //* Note: A plantorder can be present on more than one transportorder.

      IF (OrderRec.Type <> OrderRec.Type::Removal) OR gTransportOrderRun OR (NOT PlantSetup."Transport Orders") THEN
        EXIT;

      CASE PlantSetup."TO Sended On Post Last Remo.PO" OF
        PlantSetup."TO Sended On Post Last Remo.PO"::Open:     lvTOStatusFrom := lvTransOrderRec.Status::Open;
        PlantSetup."TO Sended On Post Last Remo.PO"::Printed:  lvTOStatusFrom := lvTransOrderRec.Status::Printed;
        PlantSetup."TO Sended On Post Last Remo.PO"::Released: lvTOStatusFrom := lvTransOrderRec.Status::Released;
        ELSE
          EXIT;
      END;

      lvTransPlantOrderRec.SETCURRENTKEY("Plant Order No.", "Transport Order No.");
      lvTransPlantOrderRec.SETRANGE("Plant Order No.", OrderRec."No.");
      IF lvTransPlantOrderRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF lvTransOrderRec.GET(lvTransPlantOrderRec."Transport Order No.") THEN BEGIN
            IF (lvTransOrderRec.Status >= lvTOStatusFrom) AND
               (lvTransOrderRec.Status < lvTransOrderRec.Status::"PO Posted")
            THEN BEGIN
              lvTransPlantOrderRec2.SETRANGE("Transport Order No.", lvTransPlantOrderRec."Transport Order No.");
              lvTransPlantOrderRec2.SETFILTER("Status (PO)", '<>%1', lvTransPlantOrderRec."Status (PO)"::Posted);
              IF NOT lvTransPlantOrderRec2.FINDFIRST THEN BEGIN  //* If all PO's of the TO are posted
                IF NOT lvTransOrderCU.CheckTransOrderCommon(lvTransOrderRec, FALSE) THEN BEGIN
                  IF GUIALLOWED THEN
                    MESSAGE(Text017, lvTransOrderRec."No.");
                END ELSE BEGIN
                  lvTransOrderRec.Status:= lvTransOrderRec.Status::"PO Posted";
                  lvTransOrderRec.MODIFY;
                END;
              END;
            END;
          END;
        UNTIL lvTransPlantOrderRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckElementMandatory@1100525001(PlantOrder@1100525000 : Record 11012556);
    VAR
      PlantLoc@1100525001 : Record 11012554;
      Proj@1100525002 : Record 11072003;
      POLine@1100525003 : Record 11012557;
      CostLine@1100525004 : Record 11012558;
      POLine2@1100525005 : Record 11012557;
    BEGIN
      //* Function is also used in Release Plant Order (C11020503). See also OnValidate/OnLookup of field Element in the 3 tables.
      IF PlantOrder.Type = PlantOrder.Type::"Negative Inventory Correction" THEN
        EXIT;

      PlantSetup.GET;
      IF NOT PlantSetup."Plant - Element Mandatory" THEN
        EXIT;

      IF PlantOrder.Type <> PlantOrder.Type::Removal THEN
        PlantLoc.Code := PlantOrder."To Location"
      ELSE
        PlantLoc.Code := PlantOrder."From Location";
      IF PlantLoc.Code = '' THEN
        EXIT;
      IF NOT PlantLoc.GET(PlantLoc.Code) THEN
        EXIT;
      IF PlantLoc."Project No." = '' THEN
        EXIT;
      IF PlantLoc."Company Name" <> '' THEN
        Proj.CHANGECOMPANY(PlantLoc."Company Name");
      IF NOT Proj.GET(PlantLoc."Project No.") THEN
        EXIT;
      IF NOT Proj."Posting Element Mandatory" THEN
        EXIT;

      POLine.SETRANGE("Plant Order No.", PlantOrder."No.");
      POLine.SETRANGE(Type, POLine.Type::Plant);
      POLine.SETRANGE(Element, '');
      IF (PlantOrder.Type = PlantOrder.Type::Removal) THEN
        POLine.SETRANGE("Rental Type", POLine."Rental Type"::"Buy Back");
      IF POLine.FINDFIRST THEN
        POLine.TESTFIELD(Element);

      CostLine.SETRANGE("Plant Order No.", PlantOrder."No.");
      CostLine.SETFILTER(Type, '<>%1', CostLine.Type::Text);
      CostLine.SETRANGE(Element, '');
      IF CostLine.FINDFIRST THEN
        CostLine.TESTFIELD(Element);

      IF PlantOrder.Type = PlantOrder.Type::"Other Transfers" THEN  //* Items only allowed on Arrival/Removal PO's
        EXIT;
      POLine2.SETRANGE("Plant Order No.", PlantOrder."No.");
      POLine2.SETRANGE(Type, POLine2.Type::Item);
      POLine2.SETRANGE(Element, '');
      IF POLine2.FINDFIRST THEN
        POLine2.TESTFIELD(Element);
    END;

    PROCEDURE SetChargePurchRun@1100409002();
    BEGIN
      //C001519
      gChargePurchRun := TRUE;
    END;

    PROCEDURE CheckPOBlockedForPosting@1100409000(PlantOrder@1100409000 : Record 11012556);
    VAR
      PlantBlockCode@1100409001 : Record 11229879;
    BEGIN
      //C006416
      IF PlantOrder."Block Code" <> '' THEN BEGIN
        IF PlantBlockCode.GET(PlantOrder."Block Code") THEN BEGIN
          IF PlantBlockCode."Block Plant Order" IN
            [PlantBlockCode."Block Plant Order"::Post, PlantBlockCode."Block Plant Order"::Both]
          THEN
            ERROR(Text022, PlantOrder.TABLECAPTION, PlantOrder."No.",
              PlantOrder.FIELDCAPTION("Block Code"), PlantOrder."Block Code", PlantBlockCode.Description);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

