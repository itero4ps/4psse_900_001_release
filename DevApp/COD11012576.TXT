OBJECT Codeunit 11012576 Planning and Future Deficit
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlantSetupRec@1210190000 : Record 11012550;
      GlbLocationRec@1100485002 : Record 11012554;
      TmpLocationRec@1100485001 : TEMPORARY Record 11012554;
      TmpPlanRec@1100485003 : TEMPORARY Record 11012543;
      GlbLocPresent@1100485000 : Boolean;
      gBuildTmpPlan@1100485005 : Boolean;
      DayTotalQuantity@1210190001 : ARRAY [366] OF Decimal;
      Text001@1210190002 : TextConst 'ENU=There can be a deficit of Plant Type %1 from %2';
      DaysInPeriod@1210190003 : Integer;
      MinDateInPast@1210190004 : Date;
      NewExpectedEndDate@1100485006 : Date;
      gPlLastInventoryPlantType@1210190005 : Code[20];
      gPlLastInventoryQuantity@1210190006 : Decimal;
      gPlLastDepotFilter@1100525000 : Text[250];
      gCompany@1100485004 : Text[30];

    PROCEDURE PlanningAvailable@1210190003(lvIDepotFilter@1210190007 : Text[250];lvICountNotPosted@1210190001 : Boolean;lvICountPlantNeed@1210190002 : Boolean;lvICountExpectedReturn@1210190003 : Boolean;lvIPlantType@1210190004 : Code[20];lvIPeriodStartDate@1210190005 : Date;lvIPeriodEndDate@1210190006 : Date;lvIUseTmpLoc@1100485000 : Boolean) : Decimal;
    VAR
      lvStockQuantity@1210190000 : Decimal;
    BEGIN
      DaysInPeriod := lvIPeriodEndDate - lvIPeriodStartDate + 1;
      MinDateInPast := CALCDATE('<-1M>', TODAY);  //db, 15-03-11
      IF (DaysInPeriod < 1) OR (DaysInPeriod > 366) OR (lvIPeriodEndDate < MinDateInPast) THEN
        EXIT(0);


      CLEAR(DayTotalQuantity);
      lvStockQuantity := GetCurrentInventoryQuantity(lvIDepotFilter, lvIPlantType);

      IF lvICountNotPosted THEN
        FillDayTotalsNotPostPlantOrder(lvIPlantType, lvIPeriodStartDate, lvIPeriodEndDate, '', 0, lvIUseTmpLoc);
      IF lvICountPlantNeed THEN
        FillDayTotalsPlantNeed(lvIPlantType, lvIPeriodStartDate, lvIPeriodEndDate, lvIUseTmpLoc);
      IF lvICountExpectedReturn THEN
        FillDayTotalsExpectedReturn(lvIPlantType, lvIPeriodStartDate, lvIPeriodEndDate, lvIUseTmpLoc);

      EXIT((lvStockQuantity + GetLowestDayTotal(lvIPeriodStartDate, lvIPeriodEndDate)));
    END;

    PROCEDURE PlanningPlantNeed@1100485002(lvIDepotFilter@1210190007 : Text[250];lvIPlantType@1210190004 : Code[20];lvIPeriodStartDate@1210190005 : Date;lvIPeriodEndDate@1210190006 : Date;lvIUseTmpLoc@1100485000 : Boolean) : Decimal;
    BEGIN
      DaysInPeriod := lvIPeriodEndDate - lvIPeriodStartDate + 1;
      MinDateInPast := CALCDATE('<-1M>', TODAY);   //db, 15-03-11
      IF (DaysInPeriod < 1) OR (DaysInPeriod > 366) OR (lvIPeriodEndDate < MinDateInPast) THEN
        EXIT(0);

      CLEAR(DayTotalQuantity);

      FillDayTotalsPlantNeed(lvIPlantType, lvIPeriodStartDate, lvIPeriodEndDate, lvIUseTmpLoc);

      //* Search lowest in 'DayTotalQuantity'. In here with negative quantity, so get highest (exit: -1*lowest)
      EXIT((-GetLowestDayTotal(lvIPeriodStartDate, lvIPeriodEndDate)));
    END;

    PROCEDURE PlanningNotPostedPO@1100485005(lvIDepotFilter@1210190007 : Text[250];lvIPlantType@1210190004 : Code[20];lvIPeriodStartDate@1210190005 : Date;lvIPeriodEndDate@1210190006 : Date;lvIUseTmpLoc@1100485000 : Boolean) : Decimal;
    BEGIN
      DaysInPeriod := lvIPeriodEndDate - lvIPeriodStartDate + 1;
      MinDateInPast := CALCDATE('<-1M>', TODAY);  //db, 15-03-11
      IF (DaysInPeriod < 1) OR (DaysInPeriod > 366) OR (lvIPeriodEndDate < MinDateInPast) THEN
        EXIT(0);

      CLEAR(DayTotalQuantity);

      FillDayTotalsNotPostPlantOrder(lvIPlantType, lvIPeriodStartDate, lvIPeriodEndDate, '', 0, lvIUseTmpLoc);

      //* Search lowest in 'DayTotalQuantity'. In here with negative quantity, so get highest (exit: -1*lowest)
      EXIT((-GetLowestDayTotal(lvIPeriodStartDate, lvIPeriodEndDate)));
    END;

    PROCEDURE PlantTypeAvailableOnPOLine@1100525000(PlantOrderLine@1210190007 : Record 11012557) : Decimal;
    VAR
      PlantOrder@1100525000 : Record 11012556;
      PlantOrderLine2@1100409000 : Record 11012557;
      StockQuantity@1210190000 : Decimal;
      QuantityReleasedAfterDate@1100409001 : Decimal;
    BEGIN
      IF NOT PlantOrder.GET(PlantOrderLine."Plant Order No.") THEN
        EXIT(0);
      IF (PlantOrder.Type <> PlantOrder.Type::Arrival) OR (PlantOrder."From Location" = '') OR
         (PlantOrder."Transfer Date" = 0D) OR (PlantOrder.Posted) OR (PlantOrderLine."Plant Type" = '')
      THEN
        EXIT(0);

      CLEAR(DayTotalQuantity);
      StockQuantity :=
        GetCurrentInventoryQuantity(PlantOrder."From Location", PlantOrderLine."Plant Type"); //From loc is depot on Arrival order

      FillDayTotalsNotPostPlantOrder(
        PlantOrderLine."Plant Type", PlantOrder."Transfer Date", PlantOrder."Transfer Date",
        PlantOrderLine."Plant Order No.", 0, FALSE);
      //For the time being only not posted orders, so not FillDayTotalsExpectedReturn and FillDayTotalsPlantNeed

      //C016497.sn  // Also count released (not posted) on arrival PO's after the transfer date
      PlantOrderLine2.SETCURRENTKEY(Posted, "Plant Type");
      PlantOrderLine2.SETRANGE(Posted, FALSE);
      PlantOrderLine2.SETRANGE("Plant Type", PlantOrderLine."Plant Type");
      PlantOrderLine2.SETRANGE("Plant Order Type", PlantOrderLine2."Plant Order Type"::Arrival);
      PlantOrderLine2.SETRANGE("Plant Order Status", PlantOrderLine2."Plant Order Status"::Released);
      PlantOrderLine2.SETFILTER("Transfer Date", '>%1', PlantOrder."Transfer Date");
      PlantOrderLine2.SETFILTER(Quantity, '>%1', 0);
      PlantOrderLine2.SETFILTER("Plant Order No.", '<>%1', PlantOrderLine."Plant Order No.");
      IF PlantOrderLine2.FINDSET THEN BEGIN
        REPEAT
          QuantityReleasedAfterDate := QuantityReleasedAfterDate + PlantOrderLine2.Quantity;
        UNTIL PlantOrderLine2.NEXT = 0;
      END;
      //C016497.en

      EXIT((StockQuantity + GetLowestDayTotal(PlantOrder."Transfer Date", PlantOrder."Transfer Date") - QuantityReleasedAfterDate));
    END;

    PROCEDURE PlantTypeAvailableOnRequestLine@1100525001(PlantRequestLine@1210190007 : Record 11020521) : Decimal;
    VAR
      PlantRequest@1100525000 : Record 11020520;
      PlantOrderLine2@1100409000 : Record 11012557;
      StockQuantity@1210190000 : Decimal;
      QuantityReleasedAfterDate@1100409001 : Decimal;
    BEGIN
      //C021864 Copied from PlantTypeAvailableOnPOLine
      IF NOT PlantRequest.GET(PlantRequestLine."Plant Request No.") THEN
        EXIT(0);
      IF (PlantRequest.Type <> PlantRequest.Type::Arrival) OR (PlantRequest."From Location" = '') OR
         (PlantRequest."Transfer Date" = 0D) OR (PlantRequest.Posted) OR (PlantRequestLine."Plant Type" = '')
      THEN
        EXIT(0);

      CLEAR(DayTotalQuantity);
      StockQuantity :=
        GetCurrentInventoryQuantity(PlantRequest."From Location", PlantRequestLine."Plant Type"); //From loc is depot on Arrival order

      FillDayTotalsNotPostPlantOrder(
        PlantRequestLine."Plant Type", PlantRequest."Transfer Date", PlantRequest."Transfer Date", '', 0, FALSE);

      PlantOrderLine2.SETCURRENTKEY(Posted, "Plant Type");
      PlantOrderLine2.SETRANGE(Posted, FALSE);
      PlantOrderLine2.SETRANGE("Plant Type", PlantRequestLine."Plant Type");
      PlantOrderLine2.SETRANGE("Plant Order Type", PlantOrderLine2."Plant Order Type"::Arrival);
      PlantOrderLine2.SETRANGE("Plant Order Status", PlantOrderLine2."Plant Order Status"::Released);
      PlantOrderLine2.SETFILTER("Transfer Date", '>%1', PlantRequest."Transfer Date");
      PlantOrderLine2.SETFILTER(Quantity, '>%1', 0);
      IF PlantOrderLine2.FINDSET THEN BEGIN
        REPEAT
          QuantityReleasedAfterDate := QuantityReleasedAfterDate + PlantOrderLine2.Quantity;
        UNTIL PlantOrderLine2.NEXT = 0;
      END;

      EXIT((StockQuantity + GetLowestDayTotal(PlantRequest."Transfer Date", PlantRequest."Transfer Date") - QuantityReleasedAfterDate));
    END;

    PROCEDURE BeforeDrilldownPlanning@1100485000(lvIDepotFilter@1210190007 : Text[250];lvICountNotPosted@1210190001 : Boolean;lvICountPlantNeed@1210190002 : Boolean;lvICountExpectedReturn@1210190003 : Boolean;lvIPlantType@1210190004 : Code[20];lvIPeriodStartDate@1210190005 : Date;lvIPeriodEndDate@1210190006 : Date;VAR OTmpPlanRec@1100485000 : TEMPORARY Record 11012543);
    BEGIN
      //* Opbouwen tmp-tabel (T11012543) tbv drilldown in de materieelplanning schermen.

      OTmpPlanRec.RESET;
      OTmpPlanRec.DELETEALL;
      TmpPlanRec.RESET;
      TmpPlanRec.DELETEALL;

      TmpPlanRec."Line No." := 0;
      gBuildTmpPlan := TRUE;
      PlanningAvailable(lvIDepotFilter,
        lvICountNotPosted, lvICountPlantNeed, lvICountExpectedReturn,
        lvIPlantType, lvIPeriodStartDate, lvIPeriodEndDate, FALSE);
      gBuildTmpPlan := FALSE;

      TmpPlanRec.RESET;
      IF TmpPlanRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          OTmpPlanRec := TmpPlanRec;
          OTmpPlanRec.INSERT;
        UNTIL TmpPlanRec.NEXT = 0;
        TmpPlanRec.DELETEALL;
      END;
    END;

    PROCEDURE BeforeDrilldownPlannedReserved@1100485006(lvIDepotFilter@1210190007 : Text[250];lvICountNotPosted@1210190001 : Boolean;lvICountPlantNeed@1210190002 : Boolean;lvIPlantType@1210190004 : Code[20];lvIPeriodStartDate@1210190005 : Date;lvIPeriodEndDate@1210190006 : Date;VAR OTmpPlanRec@1100485000 : TEMPORARY Record 11012543);
    BEGIN
      //* Opbouwen tmp-tabel (T11012543) tbv drilldown in de materieelplanning schermen.

      OTmpPlanRec.RESET;
      OTmpPlanRec.DELETEALL;
      TmpPlanRec.RESET;
      TmpPlanRec.DELETEALL;

      TmpPlanRec."Line No." := 0;
      gBuildTmpPlan := TRUE;
      IF lvICountPlantNeed THEN
        PlanningPlantNeed(lvIDepotFilter, lvIPlantType, lvIPeriodStartDate, lvIPeriodEndDate, FALSE);
      IF lvICountNotPosted THEN
        PlanningNotPostedPO(lvIDepotFilter, lvIPlantType, lvIPeriodStartDate, lvIPeriodEndDate, FALSE);
      gBuildTmpPlan := FALSE;

      TmpPlanRec.RESET;
      IF TmpPlanRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          OTmpPlanRec := TmpPlanRec;
          OTmpPlanRec.Quantity := -TmpPlanRec.Quantity;  //* With neg. quantity in tmp table, so -1*Quan
          OTmpPlanRec.INSERT;
        UNTIL TmpPlanRec.NEXT = 0;
        TmpPlanRec.DELETEALL;
      END;
    END;

    PROCEDURE FutureDeficitWarning@1210190000(lvIOrder@1210190007 : Code[20];lvIOrderLine@1210190011 : Integer;lvIPlantType@1210190000 : Code[20];lvIExpectedEndDate@1210190008 : Date;lvIRequiredQuantity@1210190003 : Decimal);
    VAR
      lvPlantOrderRec@1210190006 : Record 11012556;
      lvLocationRec@1210190009 : Record 11012554;
      lvStockQuantity@1210190002 : Decimal;
      lvPeriodStartDate@1210190004 : Date;
      lvPeriodEndDate@1210190005 : Date;
      lvMaxEndDate@1210190010 : Date;
      lvDepotFilter@1210190001 : Text[250];
    BEGIN
      IF (lvIOrder = '') OR (lvIPlantType = '') OR (lvIRequiredQuantity <= 0) THEN
        EXIT;

      IF (gCompany <> '') THEN BEGIN
        lvPlantOrderRec.CHANGECOMPANY(gCompany);
        lvLocationRec.CHANGECOMPANY(gCompany);
        PlantSetupRec.SetPlantCompany(gCompany);
      END;

      PlantSetupRec.GET;
      IF (NOT PlantSetupRec."Future Deficit Warning") OR (FORMAT(PlantSetupRec."Time Limit Future Deficit") = '') THEN
        EXIT;

      IF NOT lvPlantOrderRec.GET(lvIOrder) THEN
        EXIT;

      lvDepotFilter := '';
      IF lvPlantOrderRec.Type = lvPlantOrderRec.Type::Arrival THEN BEGIN
        lvDepotFilter := lvPlantOrderRec."From Location";
      END;
      IF lvPlantOrderRec.Type = lvPlantOrderRec.Type::"Other Transfers" THEN BEGIN
        IF (NOT lvLocationRec.GET(lvPlantOrderRec."To Location")) OR (NOT lvLocationRec.Depot) THEN
          EXIT;
        IF lvLocationRec.GET(lvPlantOrderRec."From Location") AND (lvLocationRec.Depot) THEN
          lvDepotFilter := lvPlantOrderRec."From Location"
        ELSE
          lvDepotFilter := PlantSetupRec.GetRentalDepot;
      END;
      IF lvDepotFilter = '' THEN
        EXIT;

      lvPeriodStartDate := lvPlantOrderRec."Transfer Date";
      IF lvIExpectedEndDate = 0D THEN BEGIN
        IF lvLocationRec.GET(lvPlantOrderRec."To Location") THEN
          lvPeriodEndDate := lvLocationRec."Ending Date";
      END ELSE
        lvPeriodEndDate := lvIExpectedEndDate;
      IF lvPeriodEndDate < lvPeriodStartDate THEN
        lvPeriodEndDate := lvPeriodStartDate;
      lvMaxEndDate := CALCDATE(PlantSetupRec."Time Limit Future Deficit", lvPeriodStartDate);
      IF lvPeriodEndDate > lvMaxEndDate THEN
        lvPeriodEndDate := lvMaxEndDate;
      IF ((lvPeriodEndDate - lvPeriodStartDate + 1) > 366) THEN
        lvPeriodEndDate := lvPeriodStartDate + 365;

      CLEAR(DayTotalQuantity);
      GlbLocationRec.Code := '';
      lvStockQuantity := GetCurrentInventoryQuantity(lvDepotFilter,lvIPlantType);
      FillDayTotalsExpectedReturn(lvIPlantType, lvPeriodStartDate, lvPeriodEndDate, FALSE);
      FillDayTotalsNotPostPlantOrder(lvIPlantType, lvPeriodStartDate, lvPeriodEndDate, lvIOrder, lvIOrderLine, FALSE);
      FillDayTotalsPlantNeed(lvIPlantType, lvPeriodStartDate, lvPeriodEndDate, FALSE);
      CheckFutureDeficit(lvIRequiredQuantity, lvStockQuantity, lvIPlantType, lvPeriodStartDate, lvPeriodEndDate)
    END;

    PROCEDURE GetCurrentInventoryQuantity@1210190001(lvIDepotFilter@1210190000 : Text[250];lvIPlantType@1210190001 : Code[20]) : Decimal;
    VAR
      lvInventoryRec@1210190002 : Record 11012555;
    BEGIN
      //IF lvIPlantType = gPlLastInventoryPlantType THEN  //18766
      IF (lvIPlantType = gPlLastInventoryPlantType) AND (gPlLastDepotFilter = lvIDepotFilter) THEN
        EXIT(gPlLastInventoryQuantity);

      IF (gCompany <> '') THEN
        lvInventoryRec.CHANGECOMPANY(gCompany);

      lvInventoryRec.SETCURRENTKEY(Removed,Location,"Plant Type","Plant No.","Rate Code",Sold);
      lvInventoryRec.SETRANGE(Removed,FALSE);
      lvInventoryRec.SETFILTER(Location, lvIDepotFilter);
      lvInventoryRec.SETRANGE("Plant Type", lvIPlantType);
      lvInventoryRec.SETRANGE(Sold, FALSE);
      //lvInventoryRec.SETFILTER(Quantity, '>0');  //19265
      lvInventoryRec.CALCSUMS(Quantity);

      IF gBuildTmpPlan THEN
        InsertTmpPlanning(lvIPlantType, TmpPlanRec.Type::Inventory, '', 0D, 0D, lvInventoryRec.Quantity, '');

      gPlLastInventoryPlantType := lvIPlantType;
      gPlLastDepotFilter := lvIDepotFilter;
      gPlLastInventoryQuantity := lvInventoryRec.Quantity;
      EXIT(gPlLastInventoryQuantity);
    END;

    LOCAL PROCEDURE FillDayTotalsExpectedReturn@1210190002(lvIPlantType@1210190002 : Code[20];lvIPeriodStartDate@1210190006 : Date;lvIPeriodEndDate@1210190005 : Date;lvIUseTmpLoc@1100485000 : Boolean);
    VAR
      lvInventoryRec@1210190000 : Record 11012555;
      lvExpectedReturnDate@1210190004 : Date;
    BEGIN
      IF (gCompany <> '') THEN
        lvInventoryRec.CHANGECOMPANY(gCompany);

      lvInventoryRec.SETCURRENTKEY(Removed,"Plant Type",Depot,Sold);
      lvInventoryRec.SETRANGE(Removed,FALSE);
      lvInventoryRec.SETRANGE("Plant Type", lvIPlantType);
      lvInventoryRec.SETRANGE(Depot, FALSE);
      lvInventoryRec.SETRANGE(Sold, FALSE);
      lvInventoryRec.SETFILTER(Quantity, '>%1', 0);
      IF lvInventoryRec.FINDSET THEN BEGIN
        REPEAT
          IF GetGlbLocationData(lvInventoryRec.Location, lvIUseTmpLoc) AND (NOT GlbLocationRec.Depot) THEN BEGIN
            lvExpectedReturnDate := lvInventoryRec."Expected return on";
            IF lvExpectedReturnDate = 0D THEN
              lvExpectedReturnDate := GlbLocationRec."Ending Date";
            IF lvExpectedReturnDate < TODAY THEN
              lvExpectedReturnDate := TODAY;
            IF lvExpectedReturnDate < lvInventoryRec."Present from" THEN
              lvExpectedReturnDate := lvInventoryRec."Present from";
            FillDayTotals(
              lvInventoryRec.Quantity,
              lvIPeriodStartDate,
              lvIPeriodEndDate,
              (lvExpectedReturnDate + 1),
              99991231D,
              99991231D);
            IF gBuildTmpPlan THEN BEGIN
              IF (lvExpectedReturnDate < lvIPeriodEndDate) THEN
                InsertTmpPlanning(lvIPlantType, TmpPlanRec.Type::ExpectedReturn, lvInventoryRec.Location,
                  lvInventoryRec."Present from", lvExpectedReturnDate, lvInventoryRec.Quantity, '');
            END;
          END;
        UNTIL lvInventoryRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillDayTotalsNotPostPlantOrder@1210190004(lvIPlantType@1210190006 : Code[20];lvIPeriodStartDate@1210190005 : Date;lvIPeriodEndDate@1210190004 : Date;lvIOrder@1210190008 : Code[20];lvIOrderLine@1210190007 : Integer;lvIUseTmpLoc@1100485000 : Boolean);
    VAR
      lvPlantOrderLineRec@1210190001 : Record 11012557;
      lvQuantity@1100485001 : Decimal;
      lvExpectedReturnDate@1100485002 : Date;
    BEGIN
      IF (gCompany <> '') THEN
        lvPlantOrderLineRec.CHANGECOMPANY(gCompany);

      lvPlantOrderLineRec.SETCURRENTKEY(Posted, "Plant Type");
      lvPlantOrderLineRec.SETRANGE(Posted, FALSE);
      lvPlantOrderLineRec.SETRANGE("Plant Type", lvIPlantType);
      lvPlantOrderLineRec.SETFILTER("Transfer Date", '..%1', lvIPeriodEndDate);
      lvPlantOrderLineRec.SETFILTER(Quantity, '>=%1', 0);
      lvPlantOrderLineRec.SETFILTER("Arrival Location", '<>%1', '');
      IF (lvIOrder <> '') AND (lvIOrderLine = 0) THEN
        lvPlantOrderLineRec.SETFILTER("Plant Order No.", '<>%1', lvIOrder);
      IF lvPlantOrderLineRec.FINDSET THEN BEGIN
        REPEAT
          IF lvPlantOrderLineRec."Asked Quantity" <= lvPlantOrderLineRec.Quantity THEN
            lvQuantity := lvPlantOrderLineRec.Quantity
          ELSE
            lvQuantity := lvPlantOrderLineRec."Asked Quantity";
          IF lvQuantity > 0 THEN BEGIN
            lvPlantOrderLineRec.CALCFIELDS("Arrival Location");
            IF GetGlbLocationData(lvPlantOrderLineRec."Arrival Location", lvIUseTmpLoc) AND (NOT GlbLocationRec.Depot) THEN BEGIN
              IF (lvPlantOrderLineRec."Transfer Date" <> 0D) AND
                 (NOT ((lvPlantOrderLineRec."Plant Order No." = lvIOrder) AND (lvPlantOrderLineRec."Line No." = lvIOrderLine)))
              THEN BEGIN
                lvExpectedReturnDate := lvPlantOrderLineRec."Expected return on";
                FillDayTotals(-lvQuantity,
                              lvIPeriodStartDate,
                              lvIPeriodEndDate,
                              lvPlantOrderLineRec."Transfer Date",
                              lvExpectedReturnDate,
                              GlbLocationRec."Ending Date");
                IF gBuildTmpPlan THEN BEGIN
                  IF (lvPlantOrderLineRec."Transfer Date" <= lvIPeriodEndDate) AND (NewExpectedEndDate >= lvIPeriodStartDate) THEN
                    InsertTmpPlanning(lvIPlantType, TmpPlanRec.Type::NotPosted, lvPlantOrderLineRec."Arrival Location",
                      lvPlantOrderLineRec."Transfer Date", NewExpectedEndDate, -lvQuantity,
                      lvPlantOrderLineRec."Plant Order No.");  //*19268 (extra argument PO)
                END;
              END;
            END;
          END;
        UNTIL lvPlantOrderLineRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillDayTotalsPlantNeed@1210190005(lvIPlantType@1210190006 : Code[20];lvIPeriodStartDate@1210190005 : Date;lvIPeriodEndDate@1210190004 : Date;lvIUseTmpLoc@1100485000 : Boolean);
    VAR
      lvPlantNeedRec@1210190001 : Record 11012579;
      lvQuantity@1210190000 : Decimal;
      lvExpectedReturnDate@1100485001 : Date;
    BEGIN
      IF (gCompany <> '') THEN
        lvPlantNeedRec.CHANGECOMPANY(gCompany);

      lvPlantNeedRec.SETCURRENTKEY(Finished, "Plant Type", "Starting Date");
      lvPlantNeedRec.SETRANGE(Finished, FALSE);
      lvPlantNeedRec.SETRANGE("Plant Type", lvIPlantType);
      lvPlantNeedRec.SETFILTER("Starting Date", '..%1', lvIPeriodEndDate);
      IF lvPlantNeedRec.FIND('-') THEN BEGIN
        REPEAT
          IF GetGlbLocationData(lvPlantNeedRec.Location, lvIUseTmpLoc) AND (NOT GlbLocationRec.Depot) THEN BEGIN
            IF lvPlantNeedRec."Delete Remainder" THEN
              lvQuantity := lvPlantNeedRec."Quantity To Copy"
            ELSE BEGIN
              lvPlantNeedRec.CALCFIELDS("Copied Quantity");
              lvQuantity := lvPlantNeedRec.Quantity - lvPlantNeedRec."Copied Quantity";
            END;
            IF (lvQuantity > 0) AND (lvPlantNeedRec."Starting Date" <> 0D) THEN BEGIN
              lvExpectedReturnDate := lvPlantNeedRec."Ending Date";
              FillDayTotals(-lvQuantity,
                            lvIPeriodStartDate,
                            lvIPeriodEndDate,
                            lvPlantNeedRec."Starting Date",
                            lvExpectedReturnDate,
                            GlbLocationRec."Ending Date");
              IF gBuildTmpPlan THEN BEGIN
                IF (lvPlantNeedRec."Starting Date" <= lvIPeriodEndDate) AND (NewExpectedEndDate >= lvIPeriodStartDate) THEN BEGIN
                  InsertTmpPlanning(lvIPlantType, TmpPlanRec.Type::PlantNeed, lvPlantNeedRec.Location,
                    lvPlantNeedRec."Starting Date", NewExpectedEndDate, -lvQuantity, '');
                  IF (lvPlantNeedRec."Document No." <> '') AND
                     (lvPlantNeedRec."Document Type" = lvPlantNeedRec."Document Type"::SalesQuote) THEN BEGIN
                    TmpPlanRec."Rental Contract Type" := lvPlantNeedRec."Document Type" - 1;
                    TmpPlanRec."Rental Contract Quote No." := lvPlantNeedRec."Document No.";
                    TmpPlanRec.MODIFY;
                  END;
                END;
              END;
            END;
          END;
        UNTIL lvPlantNeedRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillDayTotals@1210190006(lvIQuantity@1210190003 : Decimal;lvIPeriodStartDate@1210190004 : Date;lvIPeriodEndDate@1210190005 : Date;lvIStartDateLine@1210190002 : Date;lvIExpectedEndDateLine@1210190001 : Date;lvIExpectedEndDateLocation@1210190000 : Date);
    VAR
      lvExpectedEndDate@1210190011 : Date;
      lvStartDate@1210190010 : Date;
      lvEndDate@1210190009 : Date;
      lvStartDayNo@1210190008 : Integer;
      lvEndDayNo@1210190007 : Integer;
      lvDayno@1210190006 : Integer;
    BEGIN
      lvExpectedEndDate := lvIExpectedEndDateLine;
      IF lvExpectedEndDate = 0D THEN
        lvExpectedEndDate := lvIExpectedEndDateLocation;
      IF lvExpectedEndDate < lvIStartDateLine THEN
        lvExpectedEndDate := lvIStartDateLine;
      IF (lvIExpectedEndDateLine = 0D) AND (lvIExpectedEndDateLocation = 0D) THEN
        lvExpectedEndDate := lvIPeriodEndDate;
      NewExpectedEndDate := lvExpectedEndDate;  //* Tbv van TmpPlanRec

      lvStartDate := lvIStartDateLine;
      IF lvStartDate < lvIPeriodStartDate THEN
        lvStartDate := lvIPeriodStartDate;

      lvEndDate := lvExpectedEndDate;
      IF lvEndDate > lvIPeriodEndDate THEN
        lvEndDate := lvIPeriodEndDate;

      IF lvEndDate >= lvStartDate THEN BEGIN
        lvStartDayNo := 1;
        IF lvStartDate > lvIPeriodStartDate THEN
          lvStartDayNo := lvStartDate - lvIPeriodStartDate  + 1;
        lvEndDayNo :=  lvIPeriodEndDate - lvIPeriodStartDate + 1;
        IF lvEndDate < lvIPeriodEndDate THEN
          lvEndDayNo := lvEndDate - lvIPeriodStartDate + 1;
        FOR lvDayno := lvStartDayNo TO lvEndDayNo DO
          DayTotalQuantity[lvDayno] := DayTotalQuantity[lvDayno] + lvIQuantity;
      END;
    END;

    LOCAL PROCEDURE GetGlbLocationData@1100485004(ILocation@1100485000 : Code[20];IUseTmpLoc@1100485001 : Boolean) : Boolean;
    BEGIN
      IF ILocation = GlbLocationRec.Code THEN
        EXIT(GlbLocPresent);

      GlbLocPresent := TRUE;
      IF NOT IUseTmpLoc THEN BEGIN
        IF GlbLocationRec.GET(ILocation) THEN
          EXIT(TRUE);
      END ELSE BEGIN
        IF TmpLocationRec.GET(ILocation) THEN BEGIN
          GlbLocationRec := TmpLocationRec;
          EXIT(TRUE);
        END ELSE BEGIN
          IF GlbLocationRec.GET(ILocation) THEN BEGIN
            TmpLocationRec := GlbLocationRec;
            TmpLocationRec.INSERT;
            EXIT(TRUE);
          END;
        END;
      END;

      GlbLocPresent := FALSE;
      GlbLocationRec.INIT;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetLowestDayTotal@1210190007(lvIPeriodStartDate@1210190001 : Date;lvIPeriodEndDate@1210190000 : Date) : Decimal;
    VAR
      lvQuantity@1210190005 : Decimal;
      lvStartDayNo@1210190004 : Integer;
      lvDayNo@1210190002 : Integer;
    BEGIN
      lvQuantity := 0;
      IF (lvIPeriodEndDate >= MinDateInPast) THEN BEGIN
        lvStartDayNo := 1;
        IF (lvIPeriodStartDate < MinDateInPast) THEN
          lvStartDayNo := MinDateInPast - lvIPeriodStartDate + 1;
        lvQuantity := DayTotalQuantity[lvStartDayNo];
        FOR lvDayNo := lvStartDayNo TO DaysInPeriod DO BEGIN
          IF DayTotalQuantity[lvDayNo] < lvQuantity THEN
            lvQuantity := DayTotalQuantity[lvDayNo];
        END;
      END;
      EXIT(lvQuantity);
    END;

    LOCAL PROCEDURE CheckFutureDeficit@1210190020(lvIRequiredQuantity@1210190000 : Decimal;lvIStockQuantity@1210190006 : Decimal;lvIPlantType@1210190005 : Code[20];lvIPeriodStartDate@1210190002 : Date;lvIPeriodEndDate@1210190001 : Date);
    VAR
      lvFirstDeficitDate@1210190003 : Date;
      lvDayNo@1210190004 : Integer;
    BEGIN
      lvFirstDeficitDate := lvIPeriodStartDate;
      FOR lvDayNo := 1 TO (lvIPeriodEndDate - lvIPeriodStartDate + 1) DO BEGIN
        IF (lvIStockQuantity + DayTotalQuantity[lvDayNo]) < lvIRequiredQuantity THEN BEGIN
            MESSAGE(Text001, lvIPlantType, lvFirstDeficitDate);
            EXIT;
        END;
        lvFirstDeficitDate := lvFirstDeficitDate + 1;
      END;
    END;

    LOCAL PROCEDURE InsertTmpPlanning@1100485007(IPlantType@1100485000 : Code[20];IType@1100485001 : Option;ILocation@1100485005 : Code[20];IStartDate@1100485002 : Date;IEndDate@1100485003 : Date;IQuantity@1100485004 : Decimal;IPlantOrderNo@1210190000 : Code[20]);
    BEGIN
      TmpPlanRec.INIT;
      TmpPlanRec."Plant Type" := IPlantType;
      TmpPlanRec."Line No." := TmpPlanRec."Line No." + 1;
      TmpPlanRec.Type := IType;
      TmpPlanRec.Location := ILocation;
      TmpPlanRec."Starting Date" := IStartDate;
      TmpPlanRec."Ending Date" := IEndDate;
      TmpPlanRec.Quantity := IQuantity;
      TmpPlanRec."Plant Order No." := IPlantOrderNo;  //*19268
      TmpPlanRec.INSERT;
    END;

    PROCEDURE SetCompany@1100485001(ICompany@1100485000 : Text[30]);
    BEGIN
      IF (ICompany = '') OR (ICompany = COMPANYNAME) THEN
        gCompany := ''
      ELSE BEGIN
        gCompany := ICompany;
        PlantSetupRec.CHANGECOMPANY(gCompany);
        GlbLocationRec.CHANGECOMPANY(gCompany);
      END;
    END;

    BEGIN
    END.
  }
}

