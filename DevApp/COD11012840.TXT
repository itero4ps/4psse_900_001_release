OBJECT Codeunit 11012840 Service Object Info Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528300 : TextConst 'ENU=Multiple Buildings';
      Text001@1100528600 : TextConst 'ENU=Object %1 is not attached to Location Structure %2';

    PROCEDURE GetDSCalls@1100528609(IObjectNo@1100528601 : Code[20];VAR OServiceCall@1100528600 : Record 11012822);
    BEGIN
      OServiceCall.RESET;
      OServiceCall.SETCURRENTKEY("Object No.");
      OServiceCall.SETFILTER("Object No.", '%1&<>%2', IObjectNo, '');
    END;

    PROCEDURE GetDSOpenCalls@1100528608(IObjectNo@1100528600 : Code[20];VAR OServiceCall@1100528601 : Record 11012822);
    BEGIN
      GetDSCalls(IObjectNo, OServiceCall);
      OServiceCall.SETFILTER(Status, '<%1', OServiceCall.Status::Finished);
    END;

    PROCEDURE GetDSHistoryCalls@1100528612(IObjectNo@1100528601 : Code[20];VAR OServiceCall@1100528600 : Record 11012822);
    BEGIN
      GetDSCalls(IObjectNo, OServiceCall);
      OServiceCall.SETRANGE(Status, OServiceCall.Status::Finished);
    END;

    PROCEDURE GetNoOfCalls@1100526202(IObjectNo@1100526200 : Code[20]) : Integer;
    VAR
      ServiceCall@1100526201 : Record 11012822;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSCalls(IObjectNo, ServiceCall);
      EXIT(ServiceCall.COUNT);
    END;

    PROCEDURE GetNoOfOpenCalls@1100528605(IObjectNo@1100528601 : Code[20]) : Integer;
    VAR
      ServiceCall@1100528600 : Record 11012822;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSOpenCalls(IObjectNo, ServiceCall);
      EXIT(ServiceCall.COUNT);
    END;

    PROCEDURE GetNoOfHistoryCalls@1100528610(IObjectNo@1100528601 : Code[20]) : Integer;
    VAR
      ServiceCall@1100528600 : Record 11012822;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSHistoryCalls(IObjectNo, ServiceCall);
      EXIT(ServiceCall.COUNT);
    END;

    PROCEDURE ShowCalls@1100526203(IObjectNo@1100526200 : Code[20]);
    VAR
      ServiceCall@1100526201 : Record 11012822;
    BEGIN
      GetDSCalls(IObjectNo, ServiceCall);
      PAGE.RUN(PAGE::"Service Call List", ServiceCall);
    END;

    PROCEDURE ShowOpenCalls@1100528606(IObjectNo@1100528600 : Code[20]);
    VAR
      ServiceCall@1100528601 : Record 11012822;
    BEGIN
      GetDSOpenCalls(IObjectNo, ServiceCall);
      PAGE.RUN(PAGE::"Service Call List", ServiceCall);
    END;

    PROCEDURE ShowHistoryCalls@1100528611(IObjectNo@1100528601 : Code[20]);
    VAR
      ServiceCall@1100528600 : Record 11012822;
    BEGIN
      GetDSHistoryCalls(IObjectNo, ServiceCall);
      PAGE.RUN(PAGE::"Service Call List", ServiceCall);
    END;

    PROCEDURE GetNoOfMaintProposalLines@1100526204(IObjectNo@1100526200 : Code[20]) : Integer;
    VAR
      MaintProposalLineConsObj@1100526201 : Record 11071696;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      WITH MaintProposalLineConsObj DO BEGIN
        SETCURRENTKEY("Object No.");
        SETRANGE("Object No.", IObjectNo);
        SETRANGE("Service Order No.", '');
        EXIT(COUNT);
      END;
    END;

    PROCEDURE ShowMaintProposalLines@1100526205(IObjectNo@1100526201 : Code[20]);
    VAR
      MaintProposalLineConsObj@1100526200 : Record 11071696;
    BEGIN
      WITH MaintProposalLineConsObj DO BEGIN
        SETCURRENTKEY("Object No.");
        SETRANGE("Object No.", IObjectNo);
        SETRANGE("Service Order No.", '');
      END;
      PAGE.RUN(PAGE::"Maintenance Proposal Line List", MaintProposalLineConsObj);
    END;

    PROCEDURE GetNoOfDocuments@1100526206(IServiceObject@1100526202 : Record 11071691) : Integer;
    VAR
      RecRef@1100526200 : RecordRef;
      DocumentLinkManagementCU@1100526201 : Codeunit 11012401;
    BEGIN
      RecRef.GETTABLE(IServiceObject);
      EXIT(DocumentLinkManagementCU.GetInfo(RecRef));
    END;

    PROCEDURE ShowDocuments@1100526207(IServiceObject@1100526201 : Record 11071691);
    VAR
      DocumentLinkManagementCU@1100526200 : Codeunit 11012401;
      RecRef@1100526202 : RecordRef;
    BEGIN
      RecRef.GETTABLE(IServiceObject);
      DocumentLinkManagementCU.OpenDocumentPropertiesLookup(RecRef, '');
    END;

    PROCEDURE GetNoOfMaterialInventoryLines@1100526213(IType@1100528600 : 'Object,Standard Object';ICode@1100526200 : Code[20]) NoOfLines : Integer;
    VAR
      ObjectMaterialInventory@1100526201 : Record 11071712;
      ServiceObject@1100528601 : Record 11071691;
      StandardObject@1100528602 : Record 11020334;
    BEGIN
      IF ICode = '' THEN EXIT(0);  //C026680
      CASE IType OF
        IType::Object:
          BEGIN
            IF NOT ServiceObject.GET(ICode) THEN
              EXIT;
            ObjectMaterialInventory.SETRANGE(Type, IType::Object);
            ObjectMaterialInventory.SETRANGE(Code, ICode);
            NoOfLines := ObjectMaterialInventory.COUNT;
            ObjectMaterialInventory.SETRANGE(Type, IType::"Standard Object");
            ObjectMaterialInventory.SETRANGE(Code, ServiceObject."Standard Object No.");
            NoOfLines += ObjectMaterialInventory.COUNT;
          END;
        IType::"Standard Object":
          BEGIN
            IF NOT StandardObject.GET(ICode) THEN
              EXIT;
            ObjectMaterialInventory.SETRANGE(Type, IType);
            ObjectMaterialInventory.SETRANGE(Code, ICode);
            NoOfLines := ObjectMaterialInventory.COUNT;
          END;
      END;
      EXIT(NoOfLines);
    END;

    PROCEDURE ShowMaterialInventoryLines@1100526210(IType@1100528600 : 'Object,Standard Object';ICode@1100526201 : Code[20]);
    VAR
      ObjectMaterialInventory@1100526200 : Record 11071712;
      ServiceObject@1100528601 : Record 11071691;
      ObjectMaterialInvPage@1100525000 : Page 11126106;
    BEGIN
      CASE IType OF
        IType::Object:
          BEGIN
            ServiceObject.SETRANGE("No.", ICode);
            ObjectMaterialInvPage.SetSelection(ICode);
            ObjectMaterialInvPage.RUNMODAL;
          END;
        IType::"Standard Object":
          BEGIN
            ObjectMaterialInventory.SETRANGE(Type, IType);
            ObjectMaterialInventory.SETRANGE(Code, ICode);
            PAGE.RUNMODAL(PAGE::"(Std.) Object Material Invent.", ObjectMaterialInventory);
          END;
      END;
    END;

    PROCEDURE CollectMaterialInventoryLines@1100528602(IServiceObjectNo@1100528600 : Code[20];VAR OObjectMaterialInventory@1100528602 : Record 11071712);
    VAR
      ObjectMaterialInventory@1100528601 : Record 11071712;
      TmpObjectMaterialInventory@1100528603 : TEMPORARY Record 11071712;
      ServiceObject@1100528604 : Record 11071691;
    BEGIN
      TmpObjectMaterialInventory.COPY(OObjectMaterialInventory, TRUE);

      OObjectMaterialInventory.RESET;
      OObjectMaterialInventory.DELETEALL;

      ObjectMaterialInventory.SETRANGE(Type, ObjectMaterialInventory.Type::Object);
      ObjectMaterialInventory.SETRANGE(Code, IServiceObjectNo);
      IF ObjectMaterialInventory.FINDSET THEN
        REPEAT
          OObjectMaterialInventory := ObjectMaterialInventory;
          OObjectMaterialInventory.INSERT;
        UNTIL ObjectMaterialInventory.NEXT = 0;

      ServiceObject.GET(IServiceObjectNo);
      ObjectMaterialInventory.SETRANGE(Type, ObjectMaterialInventory.Type::"Standard Object");
      ObjectMaterialInventory.SETRANGE(Code, ServiceObject."Standard Object No.");
      IF ObjectMaterialInventory.FINDSET THEN
        REPEAT
          OObjectMaterialInventory := ObjectMaterialInventory;
          OObjectMaterialInventory.INSERT;
        UNTIL ObjectMaterialInventory.NEXT = 0;
    END;

    PROCEDURE GetNoOfInspectionLists@1100528601(IObjectNo@1100528600 : Code[20]) retValue : Decimal;
    VAR
      ServiceOrderObject@1100528601 : Record 11071724;
      ServiceOrderInspectionLine@1100528602 : Record 11071753;
    BEGIN
      ServiceOrderObject.SETCURRENTKEY("Object No.");
      ServiceOrderObject.SETRANGE("Object No.", IObjectNo);
      IF NOT ServiceOrderObject.FINDSET THEN EXIT;
      REPEAT
        ServiceOrderInspectionLine.SETRANGE("Service Order No.", ServiceOrderObject."Service Order No.");
        ServiceOrderInspectionLine.SETRANGE("Service Object No.", ServiceOrderObject."Object No.");
        IF NOT ServiceOrderInspectionLine.ISEMPTY THEN
          retValue += 1;
      UNTIL ServiceOrderObject.NEXT = 0;
    END;

    PROCEDURE ShowInspectionLists@1100528600(IObjectNo@1100528600 : Code[20]);
    VAR
      ServiceOrderObject@1100528602 : Record 11071724;
      ServiceOrderInspectionLine@1100528603 : Record 11071753;
      ServOrderObjectInspListFRM@1100528601 : Page 11125262;
    BEGIN
      ServiceOrderObject.SETCURRENTKEY("Object No.");
      ServiceOrderObject.SETRANGE("Object No.", IObjectNo);
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          ServiceOrderInspectionLine.SETRANGE("Service Order No.", ServiceOrderObject."Service Order No.");
          ServiceOrderInspectionLine.SETRANGE("Service Object No.", ServiceOrderObject."Object No.");
          IF NOT ServiceOrderInspectionLine.ISEMPTY THEN
            ServiceOrderObject.MARK(TRUE);
        UNTIL ServiceOrderObject.NEXT = 0;
      ServiceOrderObject.MARKEDONLY(TRUE);
      ServOrderObjectInspListFRM.SETTABLEVIEW(ServiceOrderObject);
      ServOrderObjectInspListFRM.RUN;
    END;

    PROCEDURE GetNoOfActiveWarrantyDiscTerms@1100528603(IObjectNo@1100528601 : Code[20];IReferenceDate@1100528603 : Date;IType@1100409000 : 'Customer,Vendor') : Integer;
    VAR
      ServiceObject@1100528602 : Record 11071691;
      ServWarrDiscountTerm@1100528600 : Record 11071811;
      WarrantyStartdate@1100409001 : Date;
    BEGIN
      IF NOT ServiceObject.GET(IObjectNo) THEN
        EXIT;

      CASE IType OF
        IType::Customer:
          BEGIN
            IF ServiceObject."Warranty Start Date Customer" = 0D THEN
              EXIT;
            WarrantyStartdate := ServiceObject."Warranty Start Date Customer";
            ServWarrDiscountTerm.SETRANGE("Warranty Code", ServiceObject."Warranty Code Customer");
          END;
        IType::Vendor:
          BEGIN
            IF ServiceObject."Warranty Start Date Vendor" = 0D THEN
              EXIT;
            WarrantyStartdate := ServiceObject."Warranty Start Date Vendor";
            ServWarrDiscountTerm.SETRANGE("Warranty Code", ServiceObject."Warranty Code Vendor");
          END;
      END;

      IF NOT ServWarrDiscountTerm.FINDSET THEN
        EXIT;


      REPEAT
        IF
          (IReferenceDate >= WarrantyStartdate) AND
          (IReferenceDate <= CALCDATE(ServWarrDiscountTerm.Period, WarrantyStartdate))
        THEN
          ServWarrDiscountTerm.MARK(TRUE);
      UNTIL ServWarrDiscountTerm.NEXT = 0;
      ServWarrDiscountTerm.MARKEDONLY(TRUE);
      EXIT(ServWarrDiscountTerm.COUNT);
    END;

    PROCEDURE ShowActiveWarrantyDiscTerms@1100528607(IObjectNo@1100528601 : Code[20];IReferenceDate@1100528603 : Date;ICostTypeFilter@1100528605 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IType@1100409000 : 'Customer,Vendor') : Integer;
    VAR
      ServiceObject@1100528602 : Record 11071691;
      ServWarrDiscountTerm@1100528600 : Record 11071811;
      ServWarrDiscountTermsFRM@1100528604 : Page 11126119;
      WarrantyStartdate@1100409001 : Date;
    BEGIN
      IF NOT ServiceObject.GET(IObjectNo) THEN
        EXIT;
      CASE IType OF
        IType::Customer:
          BEGIN
            ServWarrDiscountTerm.SETRANGE("Warranty Code", ServiceObject."Warranty Code Customer");
            WarrantyStartdate := ServiceObject."Warranty Start Date Customer";
          END;
        IType::Vendor:
          BEGIN
            ServWarrDiscountTerm.SETRANGE("Warranty Code", ServiceObject."Warranty Code Vendor");
            WarrantyStartdate := ServiceObject."Warranty Start Date Vendor";
          END;
      END;

      IF ICostTypeFilter <> ICostTypeFilter::" " THEN
        ServWarrDiscountTerm.SETFILTER("Cost Type", '%1|%2', ICostTypeFilter::" ", ICostTypeFilter);

      IF ServWarrDiscountTerm.FINDSET AND (WarrantyStartdate <> 0D) THEN BEGIN
        REPEAT
          IF
            (IReferenceDate >= WarrantyStartdate) AND
            (IReferenceDate <= CALCDATE(ServWarrDiscountTerm.Period, WarrantyStartdate))
          THEN
            ServWarrDiscountTerm.MARK(TRUE);
        UNTIL ServWarrDiscountTerm.NEXT = 0;
      END;
      ServWarrDiscountTerm.MARKEDONLY(TRUE);

      ServWarrDiscountTermsFRM.SetSelection(IObjectNo);
      ServWarrDiscountTermsFRM.SETTABLEVIEW(ServWarrDiscountTerm);
      ServWarrDiscountTermsFRM.RUN;
    END;

    PROCEDURE GetBuildingInfo@1100528300(IServiceObjectNo@1100528300 : Code[20];VAR OBuildingCode@1100528301 : Code[20];VAR OBuildingDescription@1100528302 : Text[50]);
    VAR
      BuildingObjectRelation@1100528303 : Record 11071820;
      NoOfBuildingRelations@1100528304 : Integer;
    BEGIN
      BuildingObjectRelation.SETCURRENTKEY("Object No.");
      BuildingObjectRelation.SETRANGE("Object No.", IServiceObjectNo);
      NoOfBuildingRelations := BuildingObjectRelation.COUNT;
      IF NoOfBuildingRelations = 0 THEN BEGIN
        OBuildingCode := '';
        OBuildingDescription := '';
      END ELSE BEGIN
        IF NoOfBuildingRelations = 1 THEN BEGIN
          BuildingObjectRelation.FINDFIRST;
          BuildingObjectRelation.CALCFIELDS("Building Description");

          OBuildingCode := BuildingObjectRelation."Building Code";
          OBuildingDescription := BuildingObjectRelation."Building Description";
        END ELSE BEGIN
          OBuildingCode := STRSUBSTNO('[%1]', NoOfBuildingRelations);
          OBuildingDescription := Text000;
        END;
      END;
    END;

    PROCEDURE GetDSOpenSOsBySourceType@1100409001(IObjectNo@1100409000 : Code[20];ISourceType@1100409004 : Option;VAR OServiceOrder@1100409002 : Record 11012823);
    VAR
      ServiceOrderObject@1100409003 : Record 11071724;
      ServiceSetup@1100409005 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServiceOrderObject.SETCURRENTKEY("Object No.");
      ServiceOrderObject.SETRANGE("Object No.", IObjectNo);
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          IF OServiceOrder.GET(ServiceOrderObject."Service Order No.") THEN
            IF OServiceOrder.Status < OServiceOrder.Status::"Technical Finished" THEN
              IF OServiceOrder."Starting Date" <= TODAY + ServiceSetup."Service Order Window" THEN
                IF (ISourceType = -1) OR (OServiceOrder."Source Type" = ISourceType) THEN
                  OServiceOrder.MARK(TRUE);
        UNTIL ServiceOrderObject.NEXT = 0;
      OServiceOrder.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetDSOpenSOs@1100409008(IObjectNo@1100409002 : Code[20];VAR OServiceOrder@1100409000 : Record 11012823);
    BEGIN
      GetDSOpenSOsBySourceType(IObjectNo, -1, OServiceOrder);
    END;

    PROCEDURE GetDSSOsBySourceType@1100525002(IObjectNo@1100409000 : Code[20];ISourceType@1100409004 : Option;VAR OServiceOrder@1100409002 : Record 11012823);
    VAR
      ServiceOrderObject@1100409003 : Record 11071724;
    BEGIN
      ServiceOrderObject.SETCURRENTKEY("Object No.");
      ServiceOrderObject.SETRANGE("Object No.", IObjectNo);
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          IF OServiceOrder.GET(ServiceOrderObject."Service Order No.") THEN
            IF (ISourceType = -1) OR (OServiceOrder."Source Type" = ISourceType) THEN
              OServiceOrder.MARK(TRUE);
        UNTIL ServiceOrderObject.NEXT = 0;
      OServiceOrder.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetDSServiceOrders@1100525001(IObjectNo@1100409002 : Code[20];VAR OServiceOrder@1100409000 : Record 11012823);
    BEGIN
      GetDSSOsBySourceType(IObjectNo, -1, OServiceOrder);
    END;

    PROCEDURE GetNoOfOpenSOsBySourceType@1100409000(IObjectNo@1100409000 : Code[20];ISourceType@1100409003 : Option) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSOpenSOsBySourceType(IObjectNo, ISourceType, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE GetNoOfOpenSOs@1100409006(IObjectNo@1100409000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409001 : Record 11012823;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSOpenSOs(IObjectNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE GetNoOfSOsBySourceType@1100525007(IObjectNo@1100409000 : Code[20];ISourceType@1100409003 : Option) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSSOsBySourceType(IObjectNo, ISourceType, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE GetNoOfSOs@1100525006(IObjectNo@1100409000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409001 : Record 11012823;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSServiceOrders(IObjectNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowOpenSOsBySourceType@1100409002(IObjectNo@1100409001 : Code[20];ISourceType@1100409003 : Option);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDSOpenSOsBySourceType(IObjectNo, ISourceType, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE ShowOpenSOs@1100409007(IObjectNo@1100409001 : Code[20]);
    VAR
      ServiceOrder@1100409000 : Record 11012823;
    BEGIN
      GetDSOpenSOs(IObjectNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE ShowSOsBySourceType@1100525010(IObjectNo@1100409001 : Code[20];ISourceType@1100409003 : Option);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDSSOsBySourceType(IObjectNo, ISourceType, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE ShowServiceOrders@1100525009(IObjectNo@1100409001 : Code[20]);
    VAR
      ServiceOrder@1100409000 : Record 11012823;
    BEGIN
      GetDSServiceOrders(IObjectNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetDSHistorySOsBySourceType@1100409005(IObjectNo@1100409000 : Code[20];ISourceType@1100528600 : Option;IHistoryLimit@1100528601 : Boolean;VAR OServiceOrder@1100409002 : Record 11012823);
    VAR
      ServiceOrderObject@1100409003 : Record 11071724;
      ServiceSetup@1100409001 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServiceOrderObject.SETCURRENTKEY("Object No.");
      ServiceOrderObject.SETRANGE("Object No.", IObjectNo);
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          IF OServiceOrder.GET(ServiceOrderObject."Service Order No.") THEN
            IF (ISourceType = -1) OR (OServiceOrder."Source Type" = ISourceType) THEN
              IF OServiceOrder.Status >= OServiceOrder.Status::"Technical Finished" THEN
                IF NOT IHistoryLimit OR (OServiceOrder."Starting Date" >= TODAY - ServiceSetup."Service Order Window Before") THEN
                  OServiceOrder.MARK(TRUE);
        UNTIL ServiceOrderObject.NEXT = 0;
      OServiceOrder.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetNoOfHistorySOs@1100409004(IObjectNo@1100409000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSHistorySOsBySourceType(IObjectNo, -1, TRUE, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowHistorySOs@1100409003(IObjectNo@1100409001 : Code[20]);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDSHistorySOsBySourceType(IObjectNo, -1, TRUE, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetStdSpecValues@1100525000(IObjectNo@1100525000 : Code[20];VAR OSerialNo@1100525001 : Text[80];VAR OYearOfManufacture@1100525002 : Text[80]);
    VAR
      ServiceSetup@1100525003 : Record 11012800;
      ObjectSpecificationLine@1100525004 : Record 11071781;
      Decoded@1100525005 : Boolean;
    BEGIN
      OSerialNo := '';
      OYearOfManufacture := '';

      ServiceSetup.GET;
      ObjectSpecificationLine.SETRANGE("Specification Type", ObjectSpecificationLine."Specification Type"::Object);
      ObjectSpecificationLine.SETRANGE(Code, IObjectNo);
      IF ServiceSetup."Spec. Code Serial No." <> '' THEN BEGIN
        ObjectSpecificationLine.SETRANGE("Specification Code", ServiceSetup."Spec. Code Serial No.");
        IF ObjectSpecificationLine.FINDFIRST THEN
          OSerialNo := ObjectSpecificationLine.GetValue(Decoded);
      END;
      IF ServiceSetup."Spec. Code Year of Manufact." <> '' THEN BEGIN
        ObjectSpecificationLine.SETRANGE("Specification Code", ServiceSetup."Spec. Code Year of Manufact.");
        IF ObjectSpecificationLine.FINDFIRST THEN
          OYearOfManufacture := ObjectSpecificationLine.GetValue(Decoded);
      END;
    END;

    PROCEDURE GetLatestMaintenanceDate@1100528604(IObjectNo@1100528600 : Code[20];IServiceContractNo@1100528603 : Code[20];VAR OServiceOrderNo@1100528602 : Code[20]) : Date;
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      OServiceOrderNo := '';
      GetDSHistorySOsBySourceType(IObjectNo, ServiceOrder."Source Type"::Contract, FALSE, ServiceOrder);
      ServiceOrder.SETCURRENTKEY("Starting Date", "Starting Time");
      IF IServiceContractNo <> '' THEN
        ServiceOrder.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ServiceOrder.FINDLAST THEN BEGIN
        OServiceOrderNo := ServiceOrder."No.";
        EXIT(ServiceOrder."Starting Date");
      END;
    END;

    PROCEDURE GetNextMaintenanceDate@1100528614(IObjectNo@1100528600 : Code[20];IServiceContractNo@1100528601 : Code[20];VAR OServiceOrderNo@1100528602 : Code[20]) NextMaintenanceDate : Date;
    VAR
      ServiceContractArrangement@1100528603 : Record 11071705;
      MaintenanceManagement@1100528605 : Codeunit 11012829;
    BEGIN
      OServiceOrderNo := '';
      IF IServiceContractNo = '' THEN
        IServiceContractNo := MaintenanceManagement.GetActualContractForObject(IObjectNo, TODAY);
      IF IServiceContractNo <> '' THEN BEGIN
        ServiceContractArrangement.SETRANGE("Service Contract No.", IServiceContractNo);
        ServiceContractArrangement.SETRANGE("Object No.", IObjectNo);
        ServiceContractArrangement.SETRANGE(Finished, FALSE);
        IF ServiceContractArrangement.FINDSET THEN
          REPEAT
            IF NOT ServiceContractArrangement.IsMaintPropLineExpired THEN BEGIN
              ServiceContractArrangement.CALCFIELDS("Service Order No.");
              IF ServiceContractArrangement."Service Order No." = '' THEN BEGIN
                ServiceContractArrangement.CALCFIELDS("Planned Maintenance Date");
                IF ServiceContractArrangement."Planned Maintenance Date" <> 0D THEN BEGIN
                  IF (ServiceContractArrangement."Planned Maintenance Date" < NextMaintenanceDate) OR
                     (NextMaintenanceDate = 0D)
                  THEN
                    NextMaintenanceDate := ServiceContractArrangement."Planned Maintenance Date";
                END ELSE
                  IF (ServiceContractArrangement."Theoretical Maintenance Date" <> 0D) AND
                     ((ServiceContractArrangement."Theoretical Maintenance Date" < NextMaintenanceDate) OR
                      (NextMaintenanceDate = 0D))
                  THEN
                    NextMaintenanceDate := ServiceContractArrangement."Theoretical Maintenance Date";
              END ELSE BEGIN
                ServiceContractArrangement.CALCFIELDS("Service Order Starting Date");
                IF (ServiceContractArrangement."Service Order Starting Date" <> 0D) AND
                   ((ServiceContractArrangement."Service Order Starting Date" < NextMaintenanceDate) OR
                    (NextMaintenanceDate = 0D))
                THEN BEGIN
                  NextMaintenanceDate := ServiceContractArrangement."Service Order Starting Date";
                  OServiceOrderNo := ServiceContractArrangement."Service Order No.";
                END;
              END
            END;
          UNTIL ServiceContractArrangement.NEXT = 0;
      END;
    END;

    PROCEDURE GetDSHistoryContracts@1100528613(IObjectNo@1100528600 : Code[20];VAR OServiceContract@1100528601 : Record 11012812);
    VAR
      ContractObject@1100528602 : Record 11071702;
    BEGIN
      OServiceContract.RESET;
      ContractObject.SETCURRENTKEY("Service Object No.");
      ContractObject.SETRANGE("Service Object No.", IObjectNo);
      ContractObject.SETFILTER("Ending Date", '<%1&<>%2', WORKDATE, 0D);
      IF ContractObject.FINDSET THEN
        REPEAT
          OServiceContract."No." := ContractObject."Service Contract No.";
          OServiceContract.MARK(TRUE);
        UNTIL ContractObject.NEXT = 0;
      OServiceContract.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetNoOfHistoryContracts@1100528615(IObjectNo@1100528600 : Code[20]) : Integer;
    VAR
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      IF IObjectNo = '' THEN EXIT(0);  //C026680
      GetDSHistoryContracts(IObjectNo, ServiceContract);
      EXIT(ServiceContract.COUNT);
    END;

    PROCEDURE ShowHistoryContracts@1100528616(IObjectNo@1100528600 : Code[20]);
    VAR
      ServiceContract@1100528601 : Record 11012812;
    BEGIN
      GetDSHistoryContracts(IObjectNo, ServiceContract);
      PAGE.RUNMODAL(0, ServiceContract);
    END;

    PROCEDURE GetNameBilltoNameOfContract@1100525003(IServiceContractNo@1100525000 : Code[20];VAR OName@1100525001 : Text[50];VAR OBilltoName@1100525002 : Text[50];VAR OBilltoName2@1100525004 : Text[50]);
    VAR
      ServiceContract@1100525003 : Record 11012812;
    BEGIN
      OName := '';
      OBilltoName := '';
      OBilltoName2 := '';
      IF NOT ServiceContract.GET(IServiceContractNo) THEN
        EXIT;
      ServiceContract.CALCFIELDS(Name, "Bill-to Name (Cost Plus)", "Bill-to Name 2 (Cost Plus)");
      OName := ServiceContract.Name;
      OBilltoName := ServiceContract."Bill-to Name (Cost Plus)";
      OBilltoName2 := ServiceContract."Bill-to Name 2 (Cost Plus)";
    END;

    PROCEDURE ShowLocationStructureByObject@1100528617(IServiceObjectNo@1100528600 : Code[20]);
    VAR
      ServiceObject@1100528602 : Record 11071691;
      TmpServiceLocStructureLine@1100528604 : TEMPORARY Record 11071720;
      ServiceLocationNo@1100528601 : Code[20];
    BEGIN
      ServiceObject.GET(IServiceObjectNo);
      ServiceLocationNo := ServiceObject.GetPrefServiceLocationNo(TRUE);
      IF GetLocationStructureDS(ServiceLocationNo, TmpServiceLocStructureLine) THEN BEGIN
        TmpServiceLocStructureLine.SETRANGE("Service Object No.", IServiceObjectNo);
        IF NOT TmpServiceLocStructureLine.FINDFIRST THEN
          ERROR(Text001, IServiceObjectNo, TmpServiceLocStructureLine."Structure No.");
        TmpServiceLocStructureLine.SETRANGE("Service Object No.");
        PAGE.RUN(PAGE::"Service Loc.Structure Lines", TmpServiceLocStructureLine);
      END;
    END;

    PROCEDURE GetLocationStructureDS@1100528619(IServiceLocationNo@1100528604 : Code[20];VAR OTmpServiceLocStructureLine@1100528600 : TEMPORARY Record 11071720) : Boolean;
    VAR
      TmpServiceLocStructureLine@1100528601 : TEMPORARY Record 11071720;
      ServiceLocationStructure@1100528603 : Record 11071719;
      ServiceLocStructureLine@1100528602 : Record 11071720;
    BEGIN
      TmpServiceLocStructureLine.COPY(OTmpServiceLocStructureLine, TRUE);
      OTmpServiceLocStructureLine.RESET;
      OTmpServiceLocStructureLine.DELETEALL;

      IF ServiceLocationStructure.GetStructureByMenu(IServiceLocationNo, ServiceLocationStructure) THEN BEGIN
        ServiceLocStructureLine.SETRANGE("Service Location No.", ServiceLocationStructure."Service Location No.");
        ServiceLocStructureLine.SETRANGE("Structure No.", ServiceLocationStructure."No.");
        IF ServiceLocStructureLine.FINDSET THEN BEGIN
          REPEAT
            TmpServiceLocStructureLine := ServiceLocStructureLine;
            IF TmpServiceLocStructureLine."Object Line" THEN BEGIN
              TmpServiceLocStructureLine.CALCFIELDS("Object Description");
              TmpServiceLocStructureLine.Description := TmpServiceLocStructureLine."Object Description";
            END;
            TmpServiceLocStructureLine.INSERT;
          UNTIL ServiceLocStructureLine.NEXT = 0;
          TmpServiceLocStructureLine.FINDFIRST;
        END;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ShowLocationStructure@1100528618(IServiceLocationNo@1100528600 : Code[20]);
    VAR
      TmpServiceLocStructureLine@1100528601 : TEMPORARY Record 11071720;
    BEGIN
      IF GetLocationStructureDS(IServiceLocationNo, TmpServiceLocStructureLine) THEN
        PAGE.RUN(PAGE::"Service Loc.Structure Lines", TmpServiceLocStructureLine);
    END;

    PROCEDURE GetStandardObjectDSByItemNo@1100528627(IItemNo@1100528600 : Code[20];VAR OStandardObject@1100528601 : Record 11020334);
    BEGIN
      OStandardObject.SETCURRENTKEY("Item No.");
      OStandardObject.SETRANGE("Item No.", IItemNo);
    END;

    PROCEDURE GetNoOfStandardObjectsByItemNo@1100528626(IItemNo@1100528600 : Code[20]) : Integer;
    VAR
      StandardObject@1100528601 : Record 11020334;
    BEGIN
      IF IItemNo = '' THEN EXIT(0);  //C026680
      GetStandardObjectDSByItemNo(IItemNo, StandardObject);
      EXIT(StandardObject.COUNT);
    END;

    PROCEDURE LookupStandardObjectsByItemNo@1100528625(IItemNo@1100528600 : Code[20]);
    VAR
      StandardObject@1100528601 : Record 11020334;
    BEGIN
      GetStandardObjectDSByItemNo(IItemNo, StandardObject);
      PAGE.RUNMODAL(0, StandardObject);
    END;

    PROCEDURE GetServiceObjectDSByItemNo@1100528624(IItemNo@1100528600 : Code[20];VAR OServiceObject@1100528601 : Record 11071691);
    BEGIN
      OServiceObject.SETCURRENTKEY("Item No.");
      OServiceObject.SETRANGE("Item No.", IItemNo);
    END;

    PROCEDURE GetNoOfServiceObjectsByItemNo@1100528623(IItemNo@1100528600 : Code[20]) : Integer;
    VAR
      ServiceObject@1100528601 : Record 11071691;
    BEGIN
      IF IItemNo = '' THEN EXIT(0);  //C026680
      GetServiceObjectDSByItemNo(IItemNo, ServiceObject);
      EXIT(ServiceObject.COUNT);
    END;

    PROCEDURE LookupServiceObjectsByItemNo@1100528622(IItemNo@1100528600 : Code[20]);
    VAR
      ServiceObject@1100528601 : Record 11071691;
    BEGIN
      GetServiceObjectDSByItemNo(IItemNo, ServiceObject);
      PAGE.RUNMODAL(0, ServiceObject);
    END;

    PROCEDURE GetTradeItemInfoByItemNo@1100528621(IItemNo@1100528600 : Code[20];VAR OVendorNo@1100528602 : Code[15];VAR OTradeItemCode@1100528603 : Code[20]);
    VAR
      ItemRelation@1100528601 : Record 11012319;
    BEGIN
      OVendorNo := '';
      OTradeItemCode := '';
      IF NOT ItemRelation.GET(IItemNo) THEN
        EXIT;
      OTradeItemCode := ItemRelation."Trade Item";
      OVendorNo := ItemRelation.Vendor;
    END;

    PROCEDURE GetTotalQuantityOfServiceObjectsByItemNo@1100528620(IItemNo@1100528600 : Code[20]) TotalQuantity : Integer;
    VAR
      ServiceObject@1100528601 : Record 11071691;
    BEGIN
      GetServiceObjectDSByItemNo(IItemNo, ServiceObject);
      IF ServiceObject.FINDSET THEN
        REPEAT
          TotalQuantity += ServiceObject.Quantity;
        UNTIL ServiceObject.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

