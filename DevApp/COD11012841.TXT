OBJECT Codeunit 11012841 Service Order Info Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TxtIsNotPlantServiceOrder@1100528800 : TextConst 'ENU=Service Order %1 is not a Plant Service Order.';
      TxtIsPlantServiceOrder@1100528801 : TextConst 'ENU=Service Order %1 is a Plant Service Order';

    PROCEDURE GetNoOfOpenPurchaseLines@1210190000(IServiceOrderNo@1210190001 : Code[20]) : Integer;
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IServiceOrderNo = '' THEN EXIT(0);  //C026680
      PurchaseLine.SETCURRENTKEY("Document Type","Service Order No.");
      PurchaseLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowOpenPurchaseLines@1210190006(IServiceOrderNo@1210190001 : Code[20]);
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IServiceOrderNo = '' THEN EXIT;
      PurchaseLine.SETCURRENTKEY("Document Type","Service Order No.");
      PurchaseLine.FILTERGROUP(4);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PurchaseLine.FILTERGROUP(0);
      PurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE GetNoOfOpenItemJournalLines@1210190001(IServiceOrderNo@1210190000 : Code[20]) : Integer;
    VAR
      ItemJournalLine@1210190001 : Record 83;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      ItemJournalLine.SETCURRENTKEY("Service Order No.");
      ItemJournalLine.SETRANGE("Service Order No.", IServiceOrderNo);
      EXIT(ItemJournalLine.COUNT);
    END;

    PROCEDURE ShowOpenItemJournalLines@1210190002(IServiceOrderNo@1210190000 : Code[20]);
    VAR
      ItemJournalLine@1210190001 : Record 83;
    BEGIN
      ItemJournalLine.SETCURRENTKEY("Service Order No.");
      ItemJournalLine.SETRANGE("Service Order No.", IServiceOrderNo);
      PAGE.RUNMODAL(0, ItemJournalLine);
    END;

    PROCEDURE GetNoOfServiceTextLines@1100525000(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements') : Integer;
    VAR
      ServiceText@1100525002 : Record 11012882;
    BEGIN
      //C026176.sn
      IF INo = '' THEN
        EXIT(0);
      //C026176.en

      FilterServiceTextLines(INo, ITextType, ServiceText);
      EXIT(ServiceText.COUNT);
    END;

    PROCEDURE GetNoOfServiceTextLinesAsText@1100528619(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements') : Text;
    VAR
      ServiceText@1100525002 : Record 11012882;
      NoOfRecords@1100528600 : Integer;
    BEGIN
      //C026176.sn
      IF INo = '' THEN
        EXIT('');
      //C026176.en

      FilterServiceTextLines(INo, ITextType, ServiceText);
      NoOfRecords := ServiceText.COUNT;
      IF NoOfRecords <> 0 THEN
        EXIT(STRSUBSTNO('[%1]', NoOfRecords));
    END;

    PROCEDURE ShowServiceTextLines@1100525001(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements');
    VAR
      ServiceText@1100525002 : Record 11012882;
      ServiceText2Page@1100409000 : Page 11125206;
    BEGIN
      FilterServiceTextLines(INo, ITextType, ServiceText);
      ServiceText2Page.SETTABLEVIEW(ServiceText);
      ServiceText2Page.EDITABLE(
        NOT (ITextType IN [ITextType::"Report Procedure", ITextType::"Contract Terms", ITextType::"Invoice Agreements"]));
      ServiceText2Page.RUNMODAL;
    END;

    PROCEDURE EditServiceTextLines@1100528614(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements');
    VAR
      ServiceText@1100525002 : Record 11012882;
      ServiceText2Page@1100409000 : Page 11125206;
    BEGIN
      FilterServiceTextLines(INo, ITextType, ServiceText);
      ServiceText2Page.SETTABLEVIEW(ServiceText);
      //ServiceText2Page.EDITABLE(
      //  NOT (ITextType IN [ITextType::"Report Procedure", ITextType::"Contract Terms", ITextType::"Invoice Agreements"]));
      ServiceText2Page.RUNMODAL;
    END;

    PROCEDURE FilterServiceTextLines@1100525002(INo@1100525001 : Code[20];ITextType@1100525000 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';VAR OServiceText@1100525002 : Record 11012882);
    BEGIN
      OServiceText.RESET;
      OServiceText.FILTERGROUP(4);
      OServiceText.SETRANGE("No.", INo);
      CASE ITextType OF
        ITextType::Problem:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 90);
          END;
        ITextType::Internal:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 91);
          END;
        ITextType::Resolve:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 92);
          END;
        ITextType::Cause:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 94);
          END;
        ITextType::Invoice:
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Order");
            OServiceText.SETRANGE("Table Field", 93);
          END;
        ITextType::"Report Procedure":
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Location");
            OServiceText.SETRANGE("Table Field", 0);
          END;
        ITextType::"Contract Terms":
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Contract");
            OServiceText.SETRANGE("Table Field", 0);
          END;
        ITextType::"Invoice Agreements":
          BEGIN
            OServiceText.SETRANGE("Table Name", OServiceText."Table Name"::"Service Contract");
            OServiceText.SETRANGE("Table Field", 630);
          END;
      END;
      OServiceText.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfGeneralTextLines@1100525007(ICode@1100525001 : Code[20];ITextType@1100525000 : 'Job,Customer') : Integer;
    VAR
      GeneralText@1100525002 : Record 11020260;
    BEGIN
      FilterGeneralTextLines(ICode, ITextType, GeneralText);
      EXIT(GeneralText.COUNT);
    END;

    PROCEDURE ShowGeneralTextLines@1100525008(ICode@1100525001 : Code[20];ITextType@1100525000 : 'Job,Customer');
    VAR
      GeneralText@1100525002 : Record 11020260;
      GeneralTextFRM@1100525003 : Page 11126493;
    BEGIN
      FilterGeneralTextLines(ICode, ITextType, GeneralText);
      GeneralTextFRM.SETTABLEVIEW(GeneralText);
      GeneralTextFRM.EDITABLE(NOT (ITextType IN [ITextType::Customer]));
      GeneralTextFRM.RUNMODAL;
    END;

    PROCEDURE FilterGeneralTextLines@1100525009(ICode@1100525001 : Code[20];ITextType@1100525000 : 'Job,Customer';VAR OGeneralText@1100525002 : Record 11020260);
    BEGIN
      OGeneralText.RESET;
      OGeneralText.FILTERGROUP(4);
      OGeneralText.SETRANGE(Code, ICode);
      CASE ITextType OF
        ITextType::Job:
          BEGIN
            OGeneralText.SETRANGE(Table, OGeneralText.Table::Job);
            OGeneralText.SETRANGE("Table Line No.", 0);
          END;
        ITextType::Customer:
          BEGIN
            OGeneralText.SETRANGE(Table, OGeneralText.Table::Customer);
            OGeneralText.SETRANGE("Table Line No.", 0);
          END;
      END;
      OGeneralText.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfCommentLines@1100525023(IServiceOrderNo@1100525000 : Code[20]) : Integer;
    VAR
      CommentLine@1100525001 : Record 97;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      FilterCommentLines(IServiceOrderNo, CommentLine);
      EXIT(CommentLine.COUNT);
    END;

    PROCEDURE ShowCommentLines@1100525024(IServiceOrderNo@1100525000 : Code[20]);
    VAR
      CommentLine@1100525001 : Record 97;
    BEGIN
      FilterCommentLines(IServiceOrderNo, CommentLine);
      PAGE.RUNMODAL(PAGE::"Comment Sheet", CommentLine);
    END;

    PROCEDURE FilterCommentLines@1100525025(IServiceOrderNo@1100525000 : Code[20];VAR OCommentLine@1100525001 : Record 97);
    BEGIN
      OCommentLine.RESET;
      OCommentLine.FILTERGROUP(4);
      OCommentLine.SETRANGE("Table Name", OCommentLine."Table Name"::"Service Order");
      OCommentLine.SETRANGE("No.", IServiceOrderNo);
      OCommentLine.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfTerms@1100525013(ICustomerNo@1100525000 : Code[20];IServiceContractNo@1100525001 : Code[20]) : Integer;
    BEGIN
      //C026176.sn
      IF (ICustomerNo = '') AND (IServiceContractNo = '') THEN
        EXIT(0);
      //C026176.en

      IF IServiceContractNo <> '' THEN
        EXIT(GetNoOfServiceTextLines(IServiceContractNo, 6))
      ELSE
        EXIT(GetNoOfGeneralTextLines(ICustomerNo, 1));
    END;

    PROCEDURE GetNoOfTermsAsText@1100528622(ICustomerNo@1100525000 : Code[20];IServiceContractNo@1100525001 : Code[20]) : Text;
    VAR
      NoOfRecords@1100528600 : Integer;
    BEGIN
      IF IServiceContractNo <> '' THEN
        NoOfRecords := GetNoOfServiceTextLines(IServiceContractNo, 6)
      ELSE
        NoOfRecords := GetNoOfGeneralTextLines(ICustomerNo, 1);
      IF NoOfRecords <> 0 THEN
        EXIT(STRSUBSTNO('[%1]', NoOfRecords));
    END;

    PROCEDURE ShowTerms@1100525014(ICustomerNo@1100525001 : Code[20];IServiceContractNo@1100525000 : Code[20]);
    BEGIN
      IF IServiceContractNo <> '' THEN
        ShowServiceTextLines(IServiceContractNo, 6)
      ELSE
        ShowGeneralTextLines(ICustomerNo, 1);
    END;

    PROCEDURE GetNoOfDebriefTextLines@1100525003(IServiceOrderNo@1100525000 : Code[20]) : Integer;
    VAR
      DebriefText@1100525001 : Record 11012886;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      FilterDebriefTextLines(IServiceOrderNo, DebriefText);
      EXIT(DebriefText.COUNT);
    END;

    PROCEDURE ShowDebriefTextLines@1100525004(IServiceOrderNo@1100525000 : Code[20]);
    VAR
      DebriefText@1100525001 : Record 11012886;
    BEGIN
      FilterDebriefTextLines(IServiceOrderNo, DebriefText);
      PAGE.RUNMODAL(PAGE::"Debrief Text", DebriefText);
    END;

    LOCAL PROCEDURE FilterDebriefTextLines@1100525005(IServiceOrderNo@1100525000 : Code[20];VAR ODebriefText@1100525001 : Record 11012886);
    BEGIN
      ODebriefText.RESET;
      ODebriefText.FILTERGROUP(4);  //C014804
      ODebriefText.SETRANGE(Type, ODebriefText.Type::ServiceOrder);
      ODebriefText.SETRANGE("No.", IServiceOrderNo);
      ODebriefText.FILTERGROUP(0);
    END;

    PROCEDURE GetLimitedDebriefText@1100525027(IServiceOrderNo@1100528600 : Code[20];ILimitNoOfChars@1100528602 : Integer) : Text;
    VAR
      DebriefText@1100525000 : Record 11012886;
      FullText@1100528604 : Text;
    BEGIN
      FilterDebriefTextLines(IServiceOrderNo, DebriefText);
      DebriefText.SETFILTER(Comment, '<>%1', '');
      IF DebriefText.FINDSET THEN
        REPEAT
          IF FullText <> '' THEN
            FullText := FullText + ' ';
          FullText := FullText + DebriefText.Comment;
        UNTIL DebriefText.NEXT = 0;
      EXIT(COPYSTR(FullText, 1, ILimitNoOfChars));
    END;

    PROCEDURE ShowServOrderCostPlusEntries@1100528610(IServiceOrderNo@1100528601 : Code[20]);
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.FILTERGROUP(4);
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceOrderCostPlusEntry.FILTERGROUP(0);
      PAGE.RUNMODAL(0, ServiceOrderCostPlusEntry);
    END;

    PROCEDURE GetBaseOrderCostRevenue@1100528600(IBaseServiceOrderNo@1100528600 : Code[20];VAR OBudgetAmount@1100528602 : Decimal;VAR OBudgetHours@1100528617 : Decimal;VAR OActualCost@1100528603 : Decimal;VAR OActualHours@1100528619 : Decimal;VAR OOpenPurchase@1100528604 : Decimal;VAR OReceivedNotInvoicedPurchase@1100528605 : Decimal;VAR OOpenAmountHours@1100528606 : Decimal;VAR OOpenHours@1100528618 : Decimal;VAR OReceivedNotInvoicedHours@1100528607 : Decimal;VAR OOpenInventory@1100528608 : Decimal;VAR ORevenue@1100528609 : Decimal;VAR OInvoicePrice@1100528610 : Decimal;VAR OInvoiceInProcess@1100528611 : Decimal;VAR OInvoicedPrice@1100528612 : Decimal;VAR OOpenOvhSurchSoftPurchase@1100528613 : Decimal;VAR OOpenOvhSurchFirmPurchase@1100528616 : Decimal;VAR OOpenOvhSurchHours@1100528614 : Decimal;VAR OOpenOvhSurchInventory@1100528615 : Decimal;VAR OInvoiceCost@1100409000 : Decimal);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      OBudgetAmount := 0;
      OBudgetHours := 0;
      OActualCost := 0;
      OActualHours := 0;
      OOpenPurchase := 0;
      OReceivedNotInvoicedPurchase := 0;
      OOpenAmountHours := 0;
      OOpenHours := 0;
      OReceivedNotInvoicedHours := 0;
      OOpenInventory := 0;
      ORevenue := 0;
      OInvoicePrice := 0;
      OInvoiceInProcess := 0;
      OInvoicedPrice := 0;
      OOpenOvhSurchSoftPurchase := 0;
      OOpenOvhSurchFirmPurchase := 0;
      OOpenOvhSurchHours := 0;
      OOpenOvhSurchInventory := 0;
      OInvoiceCost := 0;

      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrder.CALCFIELDS(
            "Budget Amount", "Budget Hours", "Actual Costs", "Actual Hours", "Open (Purchase)", "Received/Not Invoiced", "Open Amount (Hours)", "Open Hours",
            "Received/Not Inv. Hours", "Open (Inventory)", Revenues, "Invoice Price", "Invoice in Process",
            "Invoiced Price", "Open Ovh. Surch. Soft (Purch.)", "Open Ovh. Surch. Firm (Purch.)",
            "Open Ovh. Surch. (Hours)", "Open Ovh. Surch. (Inventory)", "Invoice Cost");

          OBudgetAmount += ServiceOrder."Budget Amount";
          OBudgetHours += ServiceOrder."Budget Hours";
          OActualCost += ServiceOrder."Actual Costs";
          OActualHours += ServiceOrder."Actual Hours";
          OOpenPurchase += ServiceOrder."Open (Purchase)";
          OReceivedNotInvoicedPurchase += ServiceOrder."Received/Not Invoiced";
          OOpenAmountHours += ServiceOrder."Open Amount (Hours)";
          OOpenHours += ServiceOrder."Open Hours";
          OReceivedNotInvoicedHours += ServiceOrder."Received/Not Inv. Hours";
          OOpenInventory += ServiceOrder."Open (Inventory)";
          ORevenue += ServiceOrder.Revenues;
          OInvoicePrice += ServiceOrder."Invoice Price";
          OInvoiceInProcess += ServiceOrder."Invoice in Process";
          OInvoicedPrice += ServiceOrder."Invoiced Price";
          OOpenOvhSurchSoftPurchase += ServiceOrder."Open Ovh. Surch. Soft (Purch.)";
          OOpenOvhSurchFirmPurchase += ServiceOrder."Open Ovh. Surch. Firm (Purch.)";
          OOpenOvhSurchHours += ServiceOrder."Open Ovh. Surch. (Hours)";
          OOpenOvhSurchInventory += ServiceOrder."Open Ovh. Surch. (Inventory)";
          OInvoiceCost += ServiceOrder."Invoice Cost";
        UNTIL ServiceOrder.NEXT = 0;
    END;

    PROCEDURE ShowBaseOrderCPEToInvoice@1100528601(IBaseServiceOrderNo@1100528601 : Code[20]);
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceOrderCostPlusEntry.FILTERGROUP(4);
      ServiceOrderCostPlusEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
      ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
      ServiceOrderCostPlusEntry.FILTERGROUP(0);
      PAGE.RUN(0, ServiceOrderCostPlusEntry);
    END;

    PROCEDURE ShowBaseOrderInvoiceInProcess@1100528602(IBaseServiceOrderNo@1100528601 : Code[20]);
    VAR
      SalesLine@1100528600 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type", "Service Invoice", "Service Order No.", "Base Service Order No.");
      SalesLine.FILTERGROUP(4);
      SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Service Invoice", TRUE);
      SalesLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      SalesLine.FILTERGROUP(0);
      PAGE.RUN(0, SalesLine);
    END;

    PROCEDURE ShowBaseOrderBudgetLines@1100528603(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
          ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF ServiceOrderBudgetLine.FINDSET THEN
            REPEAT
              ServiceOrderBudgetLine.MARK(TRUE);
            UNTIL ServiceOrderBudgetLine.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      ServiceOrderBudgetLine.SETRANGE("Service Order No.");
      ServiceOrderBudgetLine.MARKEDONLY(TRUE);
      PAGE.RUN(0, ServiceOrderBudgetLine);
    END;

    PROCEDURE ShowBaseOrderBudgetHourLines@1100528626(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
          ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Labor);
          IF ServiceOrderBudgetLine.FINDSET THEN
            REPEAT
              ServiceOrderBudgetLine.MARK(TRUE);
            UNTIL ServiceOrderBudgetLine.NEXT = 0;
        UNTIL ServiceOrder.NEXT = 0;
      ServiceOrderBudgetLine.SETRANGE("Service Order No.");
      ServiceOrderBudgetLine.MARKEDONLY(TRUE);
      PAGE.RUN(0, ServiceOrderBudgetLine);
    END;

    PROCEDURE ShowBaseOrderOpenPurchase@1100528604(IBaseServiceOrderNo@1100528600 : Code[20];IUseCopyFunctionality@1100525002 : Boolean);
    VAR
      ServiceOrder@1100525000 : Record 11012823;
      OpenPurchListBaseOrderFRM@1100525001 : Page 11020479;
    BEGIN
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      OpenPurchListBaseOrderFRM.LOOKUPMODE(TRUE);
      IF IUseCopyFunctionality THEN
        OpenPurchListBaseOrderFRM.SetSelection(DATABASE::"Service Order Cost Plus Entry", IBaseServiceOrderNo);
      OpenPurchListBaseOrderFRM.SETTABLEVIEW(ServiceOrder);
      OpenPurchListBaseOrderFRM.RUNMODAL;
    END;

    PROCEDURE ShowBaseOrderOpenAmountHours@1100528605(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      HourAccountingLine@1100528601 : Record 11012039;
      HourAccountingLinesFRM@1100525000 : Page 11012277;
    BEGIN
      HourAccountingLine.SETCURRENTKEY("Base Service Order No.");
      HourAccountingLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      HourAccountingLinesFRM.SetSelection(DATABASE::"Service Order Cost Plus Entry", IBaseServiceOrderNo, '', '', '', TRUE);
      HourAccountingLinesFRM.SETTABLEVIEW(HourAccountingLine);
      HourAccountingLinesFRM.RUNMODAL();
    END;

    PROCEDURE ShowBaseOrderOpenInventory@1100528606(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ItemJournalLine@1100528601 : Record 83;
      ItemJournalLinesFRM@1100525000 : Page 519;
    BEGIN
      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ItemJournalLinesFRM.SetSelection(DATABASE::"Service Order Cost Plus Entry", IBaseServiceOrderNo, '', '', '', FALSE);
      ItemJournalLinesFRM.SETTABLEVIEW(ItemJournalLine);
      ItemJournalLinesFRM.RUNMODAL();
    END;

    PROCEDURE ShowBaseOrderActual@1100528607(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderActualHours@1100528625(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Labor);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderInvoiceCost@1100409003(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      ServiceLedgerEntry.SETRANGE(Chargeable, TRUE);
      ServiceLedgerEntry.SETRANGE("Cost Plus Entry Created", FALSE);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderRevenue@1100528608(IBaseServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Revenue Present", TRUE);
      PAGE.RUN(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowBaseOrderCostPlusEntries@1100528609(IBaseServiceOrderNo@1100528601 : Code[20]);
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.FILTERGROUP(4);
      ServiceOrderCostPlusEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceOrderCostPlusEntry.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      ServiceOrderCostPlusEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Service Order Cost Plus SF3", ServiceOrderCostPlusEntry);
    END;

    PROCEDURE GetNoOfOpenPurchLinesBaseOrder@1100409001(IBaseServiceOrderNo@1210190001 : Code[20]) : Integer;
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IBaseServiceOrderNo = '' THEN EXIT(0);   //C026680
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowOpenPurchaseLinesBaseOrder@1100409006(IBaseServiceOrderNo@1210190001 : Code[20]);
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IBaseServiceOrderNo = '' THEN EXIT;
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.FILTERGROUP(4);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PurchaseLine.FILTERGROUP(0);
      PurchaseLine.SETFILTER("Outstanding Quantity", '<>%1', 0);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE GetNoOfRNIPurchLinesBaseOrder@1100409015(IBaseServiceOrderNo@1210190001 : Code[20]) : Integer;
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IBaseServiceOrderNo = '' THEN EXIT(0);  //C026680
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETFILTER("Qty. Rcd. Not Invoiced", '<>%1', 0);
      EXIT(PurchaseLine.COUNT);
    END;

    PROCEDURE ShowRNIPurchaseLinesBaseOrder@1100409013(IBaseServiceOrderNo@1210190001 : Code[20]);
    VAR
      PurchaseLine@1210190000 : Record 39;
    BEGIN
      IF IBaseServiceOrderNo = '' THEN EXIT;
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.FILTERGROUP(4);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PurchaseLine.FILTERGROUP(0);

      PurchaseLine.SETFILTER("Qty. Rcd. Not Invoiced", '<>%1', 0);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE GetNoOfOpenItemJnlLnsBaseOrder@1100409000(IBaseServiceOrderNo@1210190000 : Code[20]) : Integer;
    VAR
      ItemJournalLine@1210190001 : Record 83;
    BEGIN
      //C026176.sn
      IF IBaseServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      EXIT(ItemJournalLine.COUNT);
    END;

    PROCEDURE ShowOpenItemJnlLinesBaseOrder@1100409008(IBaseServiceOrderNo@1210190000 : Code[20]);
    VAR
      ItemJournalLine@1210190001 : Record 83;
    BEGIN
      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      PAGE.RUNMODAL(0, ItemJournalLine);
    END;

    PROCEDURE GetDSHistorySOs@1100409010(IServiceLocationNo@1100409001 : Code[20];VAR OServiceOrder@1100409000 : Record 11012823);
    VAR
      ServiceLocationInfoMgt@1100409003 : Codeunit 11012856;
    BEGIN
      ServiceLocationInfoMgt.GetDataSetHistorySOs(IServiceLocationNo, OServiceOrder)
    END;

    PROCEDURE GetNoOfHistorySOs@1100409009(IServiceLocationNo@1100409001 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceLocationNo = '' THEN
        EXIT(0);
      //C026176.en

      GetDSHistorySOs(IServiceLocationNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowHistorySOs@1100409007(IServiceLocationNo@1100409001 : Code[20]);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDSHistorySOs(IServiceLocationNo, ServiceOrder);
      PAGE.RUN(0, ServiceOrder);
    END;

    PROCEDURE GetDSOpenMaintSOs@1100409005(IServiceLocationNo@1100409002 : Code[20];VAR OServiceOrder@1100409000 : Record 11012823);
    VAR
      ServiceLocationInfoMgt@1100409004 : Codeunit 11012856;
    BEGIN
      ServiceLocationInfoMgt.GetDSOpenSOsBySourceType(IServiceLocationNo, OServiceOrder."Source Type"::Contract, OServiceOrder)
    END;

    PROCEDURE GetNoOfOpenMaintSOs@1100409004(IServiceLocationNo@1100409001 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceLocationNo = '' THEN
        EXIT(0);
      //C026176.en

      GetDSOpenMaintSOs(IServiceLocationNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowOpenMaintSOs@1100409002(IServiceLocationNo@1100409001 : Code[20]);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDSOpenMaintSOs(IServiceLocationNo, ServiceOrder);
      PAGE.RUN(0, ServiceOrder);
    END;

    PROCEDURE GetPlantCompanyDataset@1100409012(IServiceOrderNo@1100409000 : Code[20];VAR OPlantManagementCompany@1100409002 : Record 11020586);
    VAR
      PlantLocation@1100409001 : Record 11012554;
      ServiceSetup@1100409004 : Record 11012800;
      CompanyData@1100409005 : Record 11020674;
      PlantLocationCode@1100409003 : Code[20];
    BEGIN
      IF OPlantManagementCompany.FINDSET THEN BEGIN
        ServiceSetup.GET;
        IF CompanyData.GET(COMPANYNAME) THEN;
        REPEAT
          PlantLocation.CHANGECOMPANY(OPlantManagementCompany."Plant Company");
          CASE ServiceSetup."Build Plant Location Code from" OF
            ServiceSetup."Build Plant Location Code from"::ServNo:
              PlantLocationCode := IServiceOrderNo;
            ServiceSetup."Build Plant Location Code from"::CompNoServNo:
              PlantLocationCode := CompanyData."Company No." + IServiceOrderNo;
            ELSE
              PlantLocationCode := '';
          END;
          IF (PlantLocationCode <> '') AND PlantLocation.GET(PlantLocationCode) THEN
            OPlantManagementCompany.MARK(TRUE);
        UNTIL OPlantManagementCompany.NEXT = 0;
      END;

      OPlantManagementCompany.MARKEDONLY(TRUE);
    END;

    PROCEDURE ShowPlantCompanies@1100409014(IServiceOrderNo@1100409000 : Code[20]);
    VAR
      TmpLinkedPlantLocation@1100409002 : TEMPORARY Record 11012657;
    BEGIN
      //GetPlantCompanyDataset(IServiceOrderNo, PlantManagementCompany);
      //PAGE.RUNMODAL(0, PlantManagementCompany);

      TmpLinkedPlantLocation.FILTERGROUP(4);
      TmpLinkedPlantLocation.SETRANGE("Link Type", TmpLinkedPlantLocation."Link Type"::"Service Order");
      TmpLinkedPlantLocation."Link Type" := TmpLinkedPlantLocation."Link Type"::"Service Order";
      TmpLinkedPlantLocation.FILTERGROUP(0);
      TmpLinkedPlantLocation."Service Order No." := IServiceOrderNo;
      PAGE.RUNMODAL(PAGE::"Linked Plant Location List", TmpLinkedPlantLocation);
    END;

    PROCEDURE GetNoOfPlantLocations@1100409011(IServiceOrderNo@1100409002 : Code[20]) : Integer;
    VAR
      PlantManagementCompany@1100409000 : Record 11020586;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      GetPlantCompanyDataset(IServiceOrderNo, PlantManagementCompany);
      EXIT(PlantManagementCompany.COUNT);
    END;

    PROCEDURE GetFirstLineServiceText@1100409017(IServiceOrderNo@1100409002 : Code[20];IFieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements') : Text[80];
    VAR
      ServiceText@1100409000 : Record 11012882;
    BEGIN
      FilterServiceTextLines(IServiceOrderNo, IFieldType, ServiceText);
      ServiceText.SETFILTER(Comment, '<>%1', '');
      IF ServiceText.FINDFIRST THEN
        EXIT(ServiceText.Comment);
    END;

    PROCEDURE GetFirstLineProblemText@1100409016(IServiceOrderNo@1100409000 : Code[20]) : Text[80];
    VAR
      FieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetFirstLineServiceText(IServiceOrderNo, FieldType::Problem));
    END;

    PROCEDURE GetFirstLineInternalText@1100409018(IServiceOrderNo@1100409000 : Code[20]) : Text[80];
    VAR
      FieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetFirstLineServiceText(IServiceOrderNo, FieldType::Internal));
    END;

    PROCEDURE GetFirstLineSolutionText@1100525029(IServiceOrderNo@1100409000 : Code[20]) : Text[80];
    VAR
      FieldType@1100409001 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetFirstLineServiceText(IServiceOrderNo, FieldType::Resolve));  //C026664
    END;

    PROCEDURE GetLimitedServiceText@1100528615(IServiceOrderNo@1100528600 : Code[20];IFieldType@1100528601 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';ILimitNoOfChars@1100528602 : Integer) : Text;
    VAR
      ServiceText@1100528603 : Record 11012882;
      FullText@1100528604 : Text;
    BEGIN
      FilterServiceTextLines(IServiceOrderNo, IFieldType, ServiceText);
      ServiceText.SETFILTER(Comment, '<>%1', '');
      IF ServiceText.FINDSET THEN
        REPEAT
          IF FullText <> '' THEN
            FullText := FullText + ' ';
          FullText := FullText + ServiceText.Comment;
        UNTIL ServiceText.NEXT = 0;
      EXIT(COPYSTR(FullText, 1, ILimitNoOfChars));
    END;

    PROCEDURE GetLimitedInternalText@1100528620(IServiceOrderNo@1100528601 : Code[20];ILimitNoOfChars@1100528602 : Integer) : Text;
    VAR
      FieldType@1100528600 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetLimitedServiceText(IServiceOrderNo, FieldType::Internal, ILimitNoOfChars));
    END;

    PROCEDURE GetLimitedCauseText@1100525026(IServiceOrderNo@1100528602 : Code[20];ILimitNoOfChars@1100528601 : Integer) : Text;
    VAR
      FieldType@1100528600 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetLimitedServiceText(IServiceOrderNo, FieldType::Cause, ILimitNoOfChars));
    END;

    PROCEDURE GetLimitedSolutionText@1100528621(IServiceOrderNo@1100528602 : Code[20];ILimitNoOfChars@1100528601 : Integer) : Text;
    VAR
      FieldType@1100528600 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetLimitedServiceText(IServiceOrderNo, FieldType::Resolve, ILimitNoOfChars));
    END;

    PROCEDURE GetLimitedInvoiceText@1100525028(IServiceOrderNo@1100528602 : Code[20];ILimitNoOfChars@1100528601 : Integer) : Text;
    VAR
      FieldType@1100528600 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
    BEGIN
      EXIT(GetLimitedServiceText(IServiceOrderNo, FieldType::Invoice, ILimitNoOfChars));
    END;

    PROCEDURE CollectSOInvoicesBy@1100525006(ICustomerNo@1100525000 : Code[20]) : Text[50];
    VAR
      Customer@1100525001 : Record 18;
    BEGIN
      IF ICustomerNo = '' THEN
        EXIT;
      IF NOT Customer.GET(ICustomerNo) THEN
        EXIT;
      EXIT(FORMAT(Customer."Collect SO Invoices By"));
    END;

    LOCAL PROCEDURE GetSOObjectDS@1100528613(IServiceOrderNo@1100528601 : Code[20];VAR OServiceOrderObject@1100528600 : Record 11071724);
    BEGIN
      OServiceOrderObject.RESET;
      OServiceOrderObject.SETRANGE("Service Order No.", IServiceOrderNo);
    END;

    PROCEDURE GetSOObjectNo@1100528611(IServiceOrderNo@1100528600 : Code[20]) : Code[20];
    VAR
      ServiceOrderObject@1100528601 : Record 11071724;
      NoOfObjects@1100528602 : Integer;
    BEGIN
      GetSOObjectDS(IServiceOrderNo, ServiceOrderObject);
      NoOfObjects := ServiceOrderObject.COUNT;
      CASE NoOfObjects OF
        0: EXIT;
        1: BEGIN
             ServiceOrderObject.FINDFIRST;
             EXIT(ServiceOrderObject."Object No.");
           END;
      ELSE
        EXIT(STRSUBSTNO('[%1]', NoOfObjects));
      END;
    END;

    PROCEDURE GetSOObjectDescription@1100528616(IServiceOrderNo@1100528600 : Code[20]) : Text[50];
    VAR
      ServiceOrderObject@1100528602 : Record 11071724;
    BEGIN
      GetSOObjectDS(IServiceOrderNo, ServiceOrderObject);
      IF ServiceOrderObject.COUNT = 1 THEN BEGIN
        ServiceOrderObject.FINDFIRST;
        ServiceOrderObject.CALCFIELDS("Object Description");
        EXIT(ServiceOrderObject."Object Description");
      END;
    END;

    PROCEDURE ShowSOObjects@1100528612(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrderObject@1100528601 : Record 11071724;
    BEGIN
      GetSOObjectDS(IServiceOrderNo, ServiceOrderObject);
      PAGE.RUNMODAL(0, ServiceOrderObject);
    END;

    PROCEDURE GetSOSameContractDS@1100525010(IServiceContractNo@1100525000 : Code[20];VAR OServiceOrder@1100525001 : Record 11012823);
    BEGIN
      OServiceOrder.RESET;
      OServiceOrder.SETCURRENTKEY("Service Contract No.");
      OServiceOrder.SETRANGE("Service Contract No.", IServiceContractNo);
    END;

    PROCEDURE GetNoOfSOSameContract@1100525015(IServiceContractNo@1100525001 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceContractNo = '' THEN
        EXIT(0);
      //C026176.en

      GetSOSameContractDS(IServiceContractNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowSOSameContract@1100525018(IServiceContractNo@1100525000 : Code[20]);
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      GetSOSameContractDS(IServiceContractNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetSOSameLocationDS@1100525011(IServiceLocationNo@1100525000 : Code[20];VAR OServiceOrder@1100525001 : Record 11012823);
    BEGIN
      OServiceOrder.RESET;
      OServiceOrder.SETCURRENTKEY("Service Location No.");
      OServiceOrder.SETRANGE("Service Location No.", IServiceLocationNo);
    END;

    PROCEDURE GetNoOfSOSameLocation@1100525016(IServiceLocationNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceLocationNo = '' THEN
        EXIT(0);
      //C026176.en

      GetSOSameLocationDS(IServiceLocationNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowSOSameLocation@1100525019(IServiceLocationNo@1100525000 : Code[20]);
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      GetSOSameLocationDS(IServiceLocationNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetSOSameCallDS@1100525012(IServiceCallNo@1100525000 : Code[20];VAR OServiceOrder@1100525001 : Record 11012823);
    BEGIN
      OServiceOrder.RESET;
      OServiceOrder.SETCURRENTKEY("Call No.");
      OServiceOrder.SETRANGE("Call No.", IServiceCallNo);
    END;

    PROCEDURE GetNoOfSOSameCall@1100525017(IServiceCallNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      //C026176.sn
      IF IServiceCallNo = '' THEN
        EXIT(0);
      //C026176.en

      GetSOSameCallDS(IServiceCallNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT)
    END;

    PROCEDURE ShowSOSameCall@1100525020(IServiceCallNo@1100525000 : Code[20]);
    VAR
      ServiceOrder@1100525001 : Record 11012823;
    BEGIN
      GetSOSameCallDS(IServiceCallNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetNoOfWorkOrders@1100525021(ServiceOrderNo@1100525000 : Code[20]) : Integer;
    VAR
      WorkOrder@1100525001 : Record 11229279;
    BEGIN
      //DP00465
      IF ServiceOrderNo = '' THEN
        EXIT(0);
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", ServiceOrderNo);
      EXIT(WorkOrder.COUNT);
    END;

    PROCEDURE ShowSOWorkOrders@1100525022(ServiceOrderNo@1100525000 : Code[20]);
    VAR
      WorkOrder@1100528600 : Record 11229279;
      WorkOrders@1100525001 : Page 11229284;
    BEGIN
      //DP00465
      IF ServiceOrderNo = '' THEN
        EXIT;
      WorkOrders.SetSelections(WorkOrder."Source Type"::ServiceOrder, ServiceOrderNo);
      WorkOrders.RUNMODAL;
    END;

    PROCEDURE GetSOStandardObjectDS@1100528618(IServiceOrderNo@1100528600 : Code[20];VAR OStandardObject@1100528603 : Record 11020334);
    VAR
      ServiceOrderObject@1100528602 : Record 11071724;
    BEGIN
      OStandardObject.RESET;
      ServiceOrderObject.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderObject.FINDSET THEN
        REPEAT
          IF ServiceOrderObject."Standard Object No." <> '' THEN BEGIN
            OStandardObject."No." := ServiceOrderObject."Standard Object No.";
            OStandardObject.MARK(TRUE);
          END;
        UNTIL ServiceOrderObject.NEXT = 0;
      OStandardObject.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetSOStandardObjectNo@1100528617(IServiceOrderNo@1100528600 : Code[20];VAR OStandardObjectDescription@1100528601 : Text[50]) : Code[20];
    VAR
      StandardObject@1100528602 : Record 11020334;
    BEGIN
      OStandardObjectDescription := '';
      GetSOStandardObjectDS(IServiceOrderNo, StandardObject);
      CASE StandardObject.COUNT OF
        0: EXIT;
        1:
          BEGIN
            StandardObject.FIND('=');
            OStandardObjectDescription := StandardObject.Description;
            EXIT(StandardObject."No.");
          END;
      ELSE
        EXIT(STRSUBSTNO('[%1]', StandardObject.COUNT));
      END;
    END;

    PROCEDURE ShowSOStandardObjects@1100528624(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      StandardObject@1100528601 : Record 11020334;
    BEGIN
      GetSOStandardObjectDS(IServiceOrderNo, StandardObject);
      PAGE.RUNMODAL(0, StandardObject);
    END;

    PROCEDURE TestPlantServiceOrder@1100528800(ServiceOrderNo@1100528801 : Code[20];IsPlantServiceOrder@1100528800 : Boolean);
    VAR
      ServiceOrder@1100528802 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(ServiceOrderNo) THEN
        IF ServiceOrder.IsPlantServiceOrder <> IsPlantServiceOrder THEN
          IF IsPlantServiceOrder THEN
            ERROR(TxtIsNotPlantServiceOrder, ServiceOrderNo)
          ELSE
            ERROR(TxtIsPlantServiceOrder, ServiceOrderNo);
    END;

    PROCEDURE ShowContractDiscountTerms@1100528623(IServiceOrderNo@1100528600 : Code[20];IObjectNo@1100528601 : Code[20]);
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      ServiceContract@1100528605 : Record 11012812;
      ContractObject@1100528604 : Record 11071702;
      ServicePackage@1100528606 : Record 11012806;
      ServiceContractDiscountTerm@1100528608 : Record 11012828;
      ServicePackageCode@1100528603 : Code[10];
      ServicePackageFilter@1100528607 : Text;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      ServiceOrder.TESTFIELD("Service Contract No.");
      IF IObjectNo = '' THEN
        ServicePackageCode := ServiceOrder."Service Package";
      IF ContractObject.GET(ServiceOrder."Service Contract No.", IObjectNo) THEN
        ServicePackageCode := ContractObject."Service Package";
      ServicePackage.GET(ServicePackageCode);
      IF (ServicePackage."Service Package Contract" <> '') OR
         (ServicePackage."Service Package Call" <> '') OR
         (ServicePackage."Service Package Direct" <> '')
      THEN BEGIN
        ServicePackageFilter := ServicePackage."Service Package Contract";
        IF ServicePackage."Service Package Call" <> '' THEN BEGIN
          IF ServicePackageFilter <> '' THEN
            ServicePackageFilter += '|';
          ServicePackageFilter += ServicePackage."Service Package Call";
        END;
        IF ServicePackage."Service Package Direct" <> '' THEN BEGIN
          IF ServicePackageFilter <> '' THEN
            ServicePackageFilter += '|';
          ServicePackageFilter += ServicePackage."Service Package Direct";
        END;
      END ELSE
        ServicePackageFilter := ServicePackageCode;

      ServiceContractDiscountTerm.SETRANGE("Service Contract No.", ServiceOrder."Service Contract No.");
      ServiceContractDiscountTerm.SETFILTER("Service Package", ServicePackageFilter);
      ServiceContractDiscountTerm.SETRANGE("Source Type", ServiceOrder."Source Type");
      PAGE.RUNMODAL(0, ServiceContractDiscountTerm);
    END;

    PROCEDURE NoOfResourcesByServiceOrder@1100528627(IServiceOrderNo@1100528600 : Code[20]) NoOfResources : Integer;
    VAR
      WorkOrder@1100528601 : Record 11229279;
      TmpResourceWOP@1100528602 : TEMPORARY Record 11229278;
    BEGIN
      //C026176.sn
      IF IServiceOrderNo = '' THEN
        EXIT(0);
      //C026176.en

      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", IServiceOrderNo);
      WorkOrder.SETFILTER(WorkOrder."Resource No.", '<>%1','');
      IF WorkOrder.FINDSET THEN BEGIN
        REPEAT
          TmpResourceWOP."No." := WorkOrder."Resource No.";
          IF TmpResourceWOP.INSERT THEN;
        UNTIL WorkOrder.NEXT = 0;
        NoOfResources := TmpResourceWOP.COUNT;
      END;
    END;

    PROCEDURE GetLeadingResourceByServiceOrder@1100528628(IServiceOrderNo@1100528600 : Code[20];VAR OLeadingResourceNo@1100528601 : Code[20];VAR OLeadingResourceName@1100528602 : Text[50]);
    VAR
      WorkOrder@1100528603 : Record 11229279;
    BEGIN
      OLeadingResourceNo := '';
      OLeadingResourceName := '';
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
      WorkOrder.SETRANGE("Source No.", IServiceOrderNo);
      WorkOrder.SETRANGE("Leading Resource", FALSE);
      IF WorkOrder.ISEMPTY THEN
        WorkOrder.SETRANGE("Leading Resource");
      IF WorkOrder.FINDSET THEN
        IF WorkOrder.NEXT = 0 THEN BEGIN
          WorkOrder.CALCFIELDS("Resource Name");
          OLeadingResourceNo := WorkOrder."Resource No.";
          OLeadingResourceName := WorkOrder."Resource Name";
        END;
    END;

    PROCEDURE GetNoOfAdviceOrderLines@1100525031(IServiceOrderNo@1210190000 : Code[20];CheckFinished@1100525000 : Boolean) : Integer;
    VAR
      AdviceOrderLine@1210190001 : Record 11012055;
    BEGIN
      //DP01015
      IF IServiceOrderNo = '' THEN
        EXIT(0);

      AdviceOrderLine.SETCURRENTKEY("Service Order No.");
      AdviceOrderLine.SETRANGE("Service Order No.", IServiceOrderNo);
      AdviceOrderLine.SETRANGE(Processed, CheckFinished);
      EXIT(AdviceOrderLine.COUNT);
    END;

    PROCEDURE ShowAdviceOrderLines@1100525030(IServiceOrderNo@1210190000 : Code[20];CheckFinished@1100525000 : Boolean);
    VAR
      AdviceOrderLine@1210190001 : Record 11012055;
      AdviceOrderPage@1100525001 : Page 11012122;
    BEGIN
      //DP01015
      AdviceOrderLine.SETCURRENTKEY("Service Order No.");
      AdviceOrderLine.SETRANGE("Service Order No.", IServiceOrderNo);
      AdviceOrderLine.SETRANGE(Processed, CheckFinished);
      AdviceOrderPage.EDITABLE(CheckFinished=FALSE);
      AdviceOrderPage.SetBypassFiltering(CheckFinished);
      AdviceOrderPage.SETTABLEVIEW(AdviceOrderLine);
      AdviceOrderPage.RUNMODAL;
    END;

    PROCEDURE GetTotalsOfServiceOrders@1100528629(VAR IServiceOrder@1100528600 : Record 11012823;VAR OActualCosts@1100528601 : Decimal;VAR OActualHours@1100528602 : Decimal;VAR OOpenAmountHours@1100528603 : Decimal;VAR OOpenHours@1100528605 : Decimal;VAR OOpenPurchase@1100528606 : Decimal;VAR OReceivedNotInvoiced@1100528607 : Decimal;VAR OOpenInventory@1100528608 : Decimal;VAR OOpenOvhSurchFirmPurch@1100528609 : Decimal;VAR OOpenOvhSurchHours@1100528610 : Decimal;VAR OOpenOvhSurchInventory@1100528611 : Decimal);
    VAR
      ServiceOrder@1100528604 : Record 11012823;
    BEGIN
      OActualCosts := 0;
      OActualHours := 0;
      OOpenAmountHours := 0;
      OOpenHours := 0;
      OOpenPurchase := 0;
      OReceivedNotInvoiced := 0;
      OOpenInventory := 0;
      OOpenOvhSurchFirmPurch := 0;

      ServiceOrder.COPY(IServiceOrder);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrder.CALCFIELDS(
            "Actual Costs", "Actual Hours", "Open Amount (Hours)", "Open Hours", "Open (Purchase)",
            "Received/Not Invoiced", "Open (Inventory)", "Open Ovh. Surch. Firm (Purch.)");
          OActualCosts += ServiceOrder."Actual Costs";
          OActualHours += ServiceOrder."Actual Hours";
          OOpenAmountHours += ServiceOrder."Open Amount (Hours)";
          OOpenHours += ServiceOrder."Open Hours";
          OOpenPurchase += ServiceOrder."Open (Purchase)";
          OReceivedNotInvoiced += ServiceOrder."Received/Not Invoiced";
          OOpenInventory += ServiceOrder."Open (Inventory)";
          OOpenOvhSurchFirmPurch += ServiceOrder."Open Ovh. Surch. Firm (Purch.)";
          OOpenOvhSurchHours += ServiceOrder."Open Ovh. Surch. (Hours)";
          OOpenOvhSurchInventory += ServiceOrder."Open Ovh. Surch. (Inventory)";
        UNTIL ServiceOrder.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

