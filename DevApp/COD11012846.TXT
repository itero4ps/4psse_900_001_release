OBJECT Codeunit 11012846 Service Unit Price Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=This option is only allowed when %1 is %2.';
      Text002@1100528300 : TextConst 'ENU=%1 created.';
      Text003@1100528603 : TextConst 'ENU=This option is only allowed when %1 is not equal to %2.';
      Text004@1100528604 : TextConst 'ENU=There are already %1s present, change %2 is not allowed.';
      Text005@1100525000 : TextConst 'ENU=%1 created.';

    PROCEDURE ShowInternalBudgetLineList@1100528600(IServiceUnitPrice@1100528600 : Record 11071769);
    VAR
      SUPInternalBudgetLine@1100528601 : Record 11071770;
    BEGIN
      SUPInternalBudgetLine.FILTERGROUP(9);
      //SUPInternalBudgetLine.SETRANGE("Price Book Type", IServiceUnitPrice."Price Book Type");
      SUPInternalBudgetLine.SETRANGE("Price Book Code", IServiceUnitPrice."Price Book Code");
      SUPInternalBudgetLine.SETRANGE("Index Date", IServiceUnitPrice."Index Date");
      SUPInternalBudgetLine.SETRANGE("Unit Price Code", IServiceUnitPrice.Code);
      SUPInternalBudgetLine.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"SUP Internal Budget Lines", SUPInternalBudgetLine);
    END;

    PROCEDURE ShowCustomerBudgetLineList@1100528601(IServiceUnitPrice@1100528600 : Record 11071769);
    VAR
      SUPCustomerBudgetLine@1100528601 : Record 11071771;
      ServicePriceBook@1100528602 : Record 11071768;
    BEGIN
      ServicePriceBook.Type := ServicePriceBook.Type::Customer; //used to show in the message
      IF IServiceUnitPrice."Price Book Type" <> IServiceUnitPrice."Price Book Type"::Customer THEN
        ERROR(Text000, IServiceUnitPrice.FIELDCAPTION("Price Book Type"), ServicePriceBook.Type);

      SUPCustomerBudgetLine.FILTERGROUP(9);
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IServiceUnitPrice."Price Book Code");
      SUPCustomerBudgetLine.SETRANGE("Index Date", IServiceUnitPrice."Index Date");
      SUPCustomerBudgetLine.SETRANGE("Unit Price Code", IServiceUnitPrice.Code);
      SUPCustomerBudgetLine.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"SUP Customer Budget Lines", SUPCustomerBudgetLine);
    END;

    PROCEDURE ShowSUPRecordingLines@1100528602(IServiceOrder@1100528600 : Record 11012823);
    VAR
      SUPRecordingLine@1100528601 : Record 11071772;
      ServiceOrderExtension@1100528602 : Record 11071727;
    BEGIN
      IF IServiceOrder."Price Book Type" = IServiceOrder."Price Book Type"::None THEN
        ERROR(Text003, IServiceOrder.FIELDCAPTION("Price Book Type"), IServiceOrder."Price Book Type");

      ServiceOrderExtension.GetServOrderExtension(IServiceOrder."No.");

      SUPRecordingLine.FILTERGROUP(9);
      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      SUPRecordingLine.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"SUP Recording Lines", SUPRecordingLine);
    END;

    PROCEDURE ShowSUPProductionList@1100528606(ServiceOrderNo@1100528600 : Code[20]);
    VAR
      SUPProduction@1100528601 : Record 11071773;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.GET(ServiceOrderNo);

      IF (ServiceOrder."Price Book Type" = ServiceOrder."Price Book Type"::None) THEN
        ERROR(Text003, ServiceOrder.FIELDCAPTION("Price Book Type"), ServiceOrder."Price Book Type");

      SUPProduction.SETRANGE("Service Order No.", ServiceOrderNo);
      PAGE.RUNMODAL(PAGE::"SUP Production List", SUPProduction);
    END;

    PROCEDURE ProcessStatusPreRecording@1100528607(IServiceOrder@1100528602 : Record 11012823);
    VAR
      SUPRecordingLine@1100528600 : Record 11071772;
      ServiceOrderExtension@1100528601 : Record 11071727;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(IServiceOrder."No.");

      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      SUPRecordingLine.SETRANGE("Price Book Type", IServiceOrder."Price Book Type");
      SUPRecordingLine.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
      SUPRecordingLine.SETRANGE("Index Date", ServiceOrderExtension."Price Book Index Date");
      IF NOT SUPRecordingLine.FINDSET(TRUE) THEN
        EXIT;

      REPEAT
        SUPRecordingLine."Recording Quantity" := 0;
        SUPRecordingLine."Recording Amount" := 0;
        SUPRecordingLine."Production Recording Quantity" := 0;
        SUPRecordingLine."Production Recording Amount" := 0;
        SUPRecordingLine.MODIFY;
      UNTIL SUPRecordingLine.NEXT = 0;

      DeleteUnitPriceBudgetLines(IServiceOrder);
    END;

    PROCEDURE ProcessStatusRecording@1100528608(ServiceOrder@1100528602 : Record 11012823);
    VAR
      SUPRecordingLine@1100528600 : Record 11071772;
      ServiceOrderExtension@1100528601 : Record 11071727;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");

      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      //UnitPriceServiceOrder.SETRANGE("Price Book Type", ServiceOrder."Price Book Type");
      //UnitPriceServiceOrder.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
      //UnitPriceServiceOrder.SETRANGE("Index Date", ServiceOrderExtension."Unit Price Index Date");
      IF NOT SUPRecordingLine.FINDSET(TRUE) THEN
        EXIT;

      REPEAT
        SUPRecordingLine."Recording Quantity" := SUPRecordingLine."Pre-Recording Quantity";
        SUPRecordingLine."Recording Amount" := SUPRecordingLine."Pre-Recording Amount";
        SUPRecordingLine."Production Recording Quantity" := 0;
        SUPRecordingLine."Production Recording Amount" := 0;
        SUPRecordingLine.MODIFY;
      UNTIL SUPRecordingLine.NEXT = 0;

      DeleteUnitPriceBudgetLines(ServiceOrder);
    END;

    PROCEDURE ProcessStatusRealization@1100528609(IServiceOrder@1100528603 : Record 11012823);
    VAR
      ServiceOrderBudgetLine@1100528600 : Record 11012875;
      ServiceOrderExtension@1100528601 : Record 11071727;
      SUPInternalBudgetLine@1100528602 : Record 11071770;
      SUPRecordingLine@1210190000 : Record 11071772;
      LastLineNo@1100528604 : Integer;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(IServiceOrder."No.");

      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      //SUPRecordingLine.SETRANGE("Price Book Type", IServiceOrder."Price Book Type");
      //SUPRecordingLine.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
      //SUPRecordingLine.SETRANGE("Index Date", ServiceOrderExtension."Unit Price Index Date");
      IF NOT SUPRecordingLine.FINDSET THEN
        EXIT;

      ServiceOrderBudgetLine.LOCKTABLE;
      ServiceOrderBudgetLine.SETCURRENTKEY("Budget Type", "Service Order No.", "Line No.");
      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      IF (ServiceOrderBudgetLine.FINDLAST) THEN
        LastLineNo := ServiceOrderBudgetLine."Line No.";

      REPEAT //SUPRecordingLine
        SUPInternalBudgetLine.SETRANGE("Price Book Type", SUPRecordingLine."Price Book Type");
        SUPInternalBudgetLine.SETRANGE("Price Book Code", SUPRecordingLine."Price Book Code");
        SUPInternalBudgetLine.SETRANGE("Index Date", SUPRecordingLine."Index Date");
        SUPInternalBudgetLine.SETRANGE("Unit Price Code", SUPRecordingLine."Unit Price Code");
        IF SUPInternalBudgetLine.FINDSET THEN BEGIN
          REPEAT //SUPInternalBudgetLine
            ServiceOrderBudgetLine.INIT;
            LastLineNo += 10000;

            ServiceOrderBudgetLine."Budget Type" := ServiceOrderBudgetLine."Budget Type"::Order;
            ServiceOrderBudgetLine."Service Order No." := IServiceOrder."No.";
            ServiceOrderBudgetLine."Service Contract No." := IServiceOrder."Service Contract No.";
            ServiceOrderBudgetLine."Object No." := '';
            ServiceOrderBudgetLine."Maintenance Scheme" := '';
            ServiceOrderBudgetLine."Line No." := LastLineNo;
            ServiceOrderBudgetLine.INSERT(TRUE);

      //      ServiceOrderBudgetLine."Unit Price Code OLD" := ServiceOrderExtension."Price Book Code";
      //      ServiceOrderBudgetLine."Unit Price Index Date OLD" := SUPInternalBudgetLine."Index Date";
      //      ServiceOrderBudgetLine."Unit Price Line Code OLD" := SUPInternalBudgetLine."Unit Price Code";
            ServiceOrderBudgetLine."Unit Price Budget Line No." := SUPInternalBudgetLine."Line No.";
            ServiceOrderBudgetLine."Recording Line No." := SUPRecordingLine."Line No.";

            ServiceOrderBudgetLine.VALIDATE("Cost Type", SUPInternalBudgetLine."Cost Type");
            ServiceOrderBudgetLine.VALIDATE("Cost Object", SUPInternalBudgetLine."Cost Object");
            ServiceOrderBudgetLine.VALIDATE("Cost Component");
            IF SUPInternalBudgetLine."Cost Component" <> '' THEN
              ServiceOrderBudgetLine."Cost Component" := SUPInternalBudgetLine."Cost Component";

            IF SUPInternalBudgetLine."Cost Type" = SUPInternalBudgetLine."Cost Type"::Material THEN BEGIN
              ServiceOrderBudgetLine.VALIDATE("Item No.", SUPInternalBudgetLine."Item No.");
              ServiceOrderBudgetLine.VALIDATE(Manufacturer, SUPInternalBudgetLine.Manufacturer);
              ServiceOrderBudgetLine.VALIDATE("Basic Item", SUPInternalBudgetLine."Basic Item");
              ServiceOrderBudgetLine.VALIDATE("Vendor (Trade Item)", SUPInternalBudgetLine."Vendor (Trade Item)");
              ServiceOrderBudgetLine.VALIDATE("Trade Item", SUPInternalBudgetLine."Trade Item");
              ServiceOrderBudgetLine.VALIDATE(Price, SUPInternalBudgetLine."Cost Price");
            END ELSE
              IF SUPInternalBudgetLine."Cost Type" = SUPInternalBudgetLine."Cost Type"::Labor THEN BEGIN
                ServiceOrderBudgetLine.VALIDATE("Rate Code", SUPInternalBudgetLine."Rate Code");
                ServiceOrderBudgetLine.VALIDATE(Rate, SUPInternalBudgetLine.Rate);
                ServiceOrderBudgetLine.Norm := SUPInternalBudgetLine.Norm;
                ServiceOrderBudgetLine.Hours := SUPInternalBudgetLine.Hours;
              END ELSE
                ServiceOrderBudgetLine.VALIDATE(Price, SUPInternalBudgetLine."Cost Price");

            ServiceOrderBudgetLine.Quantity := SUPInternalBudgetLine.Quantity;
            IF SUPRecordingLine."Quantity Recording" <> 0 THEN
              ServiceOrderBudgetLine.Quantity := SUPInternalBudgetLine.Quantity * SUPRecordingLine."Quantity Recording";

            ServiceOrderBudgetLine.Description := SUPInternalBudgetLine.Description;
            ServiceOrderBudgetLine."Unit of Measure" := SUPInternalBudgetLine."Unit of Measure";
            ServiceOrderBudgetLine.VALIDATE("Discount %", SUPInternalBudgetLine."Purchase Discount %");
            ServiceOrderBudgetLine.VALIDATE("Gross Price", SUPInternalBudgetLine."Gross Price");

            ServiceOrderBudgetLine.MODIFY(TRUE);
          UNTIL SUPInternalBudgetLine.NEXT = 0;
        END;
      UNTIL SUPRecordingLine.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteUnitPriceBudgetLines@1100528610(ServiceOrder@1100528602 : Record 11012823);
    VAR
      ServiceOrderBudgetLine@1100528600 : Record 11012875;
      ServiceOrderExtension@1100528601 : Record 11071727;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      ServiceOrderBudgetLine.SETFILTER("Recording Line No.", '<>%1', 0);
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Code OLD", '<>%1', '');
      ServiceOrderBudgetLine.DELETEALL;
    END;

    PROCEDURE GenerateCostPlusEntries@1100530000(VAR ISUPProduction@1100528600 : Record 11071773);
    VAR
      SUPProductionLine@1100528602 : Record 11071774;
      ServiceOrderCostPlusEntry@1100528603 : Record 11012825;
      GenericTempTableBreakdown@1100525001 : TEMPORARY Record 11020579;
      GenericTempTableVATLine@1100525000 : TEMPORARY Record 11020579;
      QuantityToProcess@1100528604 : Decimal;
      CostPlusEntriesCreated@1100525002 : Boolean;
    BEGIN
      ISUPProduction.TESTFIELD(Status, ISUPProduction.Status::Approved);

      SUPProductionLine.SETRANGE("Service Order No.", ISUPProduction."Service Order No.");
      SUPProductionLine.SETRANGE("Production Date", ISUPProduction."Production Date");
      SUPProductionLine.SETRANGE("Cost Plus Entries Created", FALSE);
      SUPProductionLine.SETFILTER(Production, '<>0');
      IF SUPProductionLine.FINDSET THEN
        REPEAT
          GenericTempTableBreakdown.RESET;
          GenericTempTableBreakdown.DELETEALL;
          GenericTempTableVATLine.RESET;
          GenericTempTableVATLine.DELETEALL;

          FillTempTableBudgetBreakdown(GenericTempTableBreakdown, ISUPProduction, SUPProductionLine);

          IF SUPProductionLine."Extension Production" <= 0 THEN BEGIN
            FillTempTableVATLine(GenericTempTableBreakdown, GenericTempTableVATLine,
              SUPProductionLine, SUPProductionLine.Production, FALSE);
          END ELSE BEGIN
            QuantityToProcess := SUPProductionLine.Production - SUPProductionLine."Extension Production";
            IF QuantityToProcess > 0 THEN BEGIN
              FillTempTableVATLine(GenericTempTableBreakdown, GenericTempTableVATLine,
                SUPProductionLine, QuantityToProcess, FALSE);
            END;
            FillTempTableVATLine(GenericTempTableBreakdown, GenericTempTableVATLine,
              SUPProductionLine, SUPProductionLine."Extension Production", TRUE);
          END;

          GenericTempTableVATLine.RESET;
          GenericTempTableVATLine.SETRANGE("Key Code1", 'VATLine');
          IF GenericTempTableVATLine.FINDSET THEN BEGIN
            REPEAT
              InsertCostPlusEntry(SUPProductionLine, GenericTempTableVATLine);
              CostPlusEntriesCreated := TRUE;
            UNTIL GenericTempTableVATLine.NEXT = 0;
          END;
        UNTIL SUPProductionLine.NEXT = 0;

      IF GUIALLOWED THEN
        IF CostPlusEntriesCreated THEN
          MESSAGE(Text002, ServiceOrderCostPlusEntry.TABLECAPTION)
        ELSE
          MESSAGE(Text005, ServiceOrderCostPlusEntry.TABLECAPTION);
    END;

    LOCAL PROCEDURE InsertCostPlusEntry@1100528603(VAR IOSUPProductionLine@1100528603 : Record 11071774;VAR GenericTempTable@1100525000 : Record 11020579);
    VAR
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
      LastLineNo@1100528602 : Integer;
    BEGIN
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", IOSUPProductionLine."Service Order No.");
      IF (ServiceOrderCostPlusEntry.FINDLAST) THEN
        LastLineNo := ServiceOrderCostPlusEntry."Line No.";
      LastLineNo += 10000;

      IOSUPProductionLine.CALCFIELDS(Description, "Unit of Measure",
        "Unit Price", "Recording Quantity", "Previous Prod Value Cumulative",
        "Previous Production Date", "Previous Production Date",
        "Total Production Value", "Bill-to Customer No.");

      ServiceOrderCostPlusEntry.INIT;
      ServiceOrderCostPlusEntry.VALIDATE("Service Order No.", IOSUPProductionLine."Service Order No.");
      ServiceOrderCostPlusEntry."Line No." := LastLineNo;
      ServiceOrderCostPlusEntry.INSERT(TRUE);

      IF IOSUPProductionLine."Bill-to Customer No." <> '' THEN BEGIN
        ServiceOrderCostPlusEntry."Bill-to Customer No." := IOSUPProductionLine."Bill-to Customer No.";
        ServiceOrderCostPlusEntry."Collective List No." :=
          GetCollectiveList(ServiceOrderCostPlusEntry."Customer No.", IOSUPProductionLine."Bill-to Customer No.");
      END;
      ServiceOrderCostPlusEntry.Description := IOSUPProductionLine.Description;
      ServiceOrderCostPlusEntry."Posting Date" := IOSUPProductionLine."Production Date";
      ServiceOrderCostPlusEntry.Quantity := GenericTempTable.Dec2; //QuantityToBook;
      ServiceOrderCostPlusEntry."Unit of Measure" := IOSUPProductionLine."Unit of Measure";
      ServiceOrderCostPlusEntry."Cost Price (LCY)" := ServiceOrderCostPlusEntry.Quantity *
        ServiceOrderCostPlusEntry."Basic Price (LCY)";
      ServiceOrderCostPlusEntry."VAT Prod. Posting Group" := GenericTempTable."Key Code3";

      ServiceOrderCostPlusEntry."Unit Price Extention" := GenericTempTable.Bool1; //IsExtensionLine;
      //ServiceOrderCostPlusEntry."Price Book Code OLD" := IOSUPProductionLine."Price Book Code";
      //ServiceOrderCostPlusEntry."Unit Price Index Date OLD" := IOSUPProductionLine."Index Date";
      //ServiceOrderCostPlusEntry."Production Recording Date OLD" := IOSUPProductionLine."Production Date";
      //ServiceOrderCostPlusEntry."Unit Price Room OLD" := IOSUPProductionLine.Room;
      //ServiceOrderCostPlusEntry."Unit Price Line Code OLD" := IOSUPProductionLine."Unit Price Code";
      ServiceOrderCostPlusEntry.VALIDATE("Production Seq. No.", IOSUPProductionLine."Production Seq. No.");
      ServiceOrderCostPlusEntry.VALIDATE("Production Line No.", IOSUPProductionLine."Line No.");
      ServiceOrderCostPlusEntry.VALIDATE("Basic Price (LCY)", GenericTempTable.Dec1);
      ServiceOrderCostPlusEntry.MODIFY;

      IOSUPProductionLine."Cost Plus Entries Created":= TRUE;
      IOSUPProductionLine."Creation Date Cost Plus Entry" := TODAY;
      IOSUPProductionLine."Cost Plus Line No." := ServiceOrderCostPlusEntry."Line No.";
      IOSUPProductionLine.MODIFY;
    END;

    PROCEDURE ValidateSOUnitPriceChange@1100528613(ServiceOrderNo@1100528600 : Code[20];FieldName@1100528604 : Text[100]);
    VAR
      UnitPriceServiceOrder@1100528603 : Record 11071772;
      UnitPriceProdRecordingLine@1100528601 : Record 11071774;
      ServiceOrderBudgetLine@1100528602 : Record 11012875;
    BEGIN
      UnitPriceServiceOrder.SETRANGE("Service Order No.", ServiceOrderNo);
      UnitPriceServiceOrder.SETFILTER("Price Book Code", '<>%1', '');
      UnitPriceServiceOrder.SETFILTER("Index Date", '<>%1', 0D);
      IF (UnitPriceServiceOrder.FINDFIRST) THEN
        ERROR(Text004, UnitPriceServiceOrder.TABLECAPTION, FieldName);

      UnitPriceProdRecordingLine.SETRANGE("Service Order No.", ServiceOrderNo);
      UnitPriceProdRecordingLine.SETFILTER("Price Book Code", '<>%1', '');
      IF (UnitPriceProdRecordingLine.FINDFIRST) THEN
        ERROR(Text004, UnitPriceProdRecordingLine.TABLECAPTION, FieldName);

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderBudgetLine.SETFILTER("Recording Line No.", '<>%1', 0);
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Code OLD", '<>%1', '');
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Index Date OLD", '<>%1', 0D);
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Line Code OLD", '<>%1', '');
      IF NOT ServiceOrderBudgetLine.ISEMPTY THEN
        ERROR(Text004, ServiceOrderBudgetLine.TABLECAPTION, FieldName);

      DeleteServiceOrderUnitPrice(ServiceOrderNo);
    END;

    LOCAL PROCEDURE DeleteServiceOrderUnitPrice@1100528604(ServiceOrderNo@1100528600 : Code[20]);
    VAR
      SUPRecordingLine@1100528604 : Record 11071772;
      SUPProduction@1100528603 : Record 11071773;
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrderNo);
      //SUPRecordingLine.SETFILTER("Price Book Code", '<>%1', '');
      //SUPRecordingLine.SETFILTER("Index Date", '<>%1', 0D);
      SUPRecordingLine.DELETEALL(TRUE);

      SUPProduction.SETRANGE("Service Order No.", ServiceOrderNo);
      SUPProduction.DELETEALL(TRUE);

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderBudgetLine.SETFILTER("Recording Line No.", '<>%1', 0);
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Code OLD", '<>%1', '');
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Index Date OLD", '<>%1', 0D);
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Line Code OLD", '<>%1', '');
      ServiceOrderBudgetLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE GetCollectiveList@1100528605(CustomerNo@1100528601 : Code[20];BillToCustomerNo@1100528602 : Code[20]) : Code[20];
    VAR
      ServiceCollectiveList@1100528600 : Record 11071730;
    BEGIN
      ServiceCollectiveList.SETCURRENTKEY("Bill-to Customer No.");
      ServiceCollectiveList.SETRANGE("Customer No.", CustomerNo);
      ServiceCollectiveList.SETRANGE("Bill-to Customer No.", BillToCustomerNo);
      IF ServiceCollectiveList.FINDFIRST THEN
        EXIT(ServiceCollectiveList."No.");
      EXIT('');
    END;

    PROCEDURE CopyUnitPrice@1210190000(FromType@1210190007 : ',Internal,Customer';FromCode@1210190006 : Code[20];FromIndexDate@1210190005 : Date;FromDescription@1210190004 : Text[50];ToType@1210190003 : ',Internal,Customer';ToCode@1210190002 : Code[20];ToIndexDate@1210190001 : Date;ToDescription@1210190000 : Text[50];UseExistingHeader@1100528600 : Boolean);
    VAR
      ServiceUnitPrice@1100528300 : Record 11071768;
      ToServiceUnitPrice@1100528307 : Record 11071768;
    BEGIN
      IF NOT UseExistingHeader THEN
        IF ServiceUnitPrice.GET(FromCode, FromIndexDate) THEN BEGIN
          ToServiceUnitPrice.COPY(ServiceUnitPrice);
          ToServiceUnitPrice.Type := ToType;
          ToServiceUnitPrice.Code := ToCode;
          ToServiceUnitPrice."Index Date" := ToIndexDate;
          ToServiceUnitPrice.Description := ToDescription;
          ToServiceUnitPrice."File Location" := '';
          ToServiceUnitPrice.INSERT;
        END;

      CopyUnitPriceLine(FromType, FromCode, FromIndexDate, ToType, ToCode, ToIndexDate);
      CopyUnitPriceBudgetInternal(FromType, FromCode, FromIndexDate, ToType, ToCode, ToIndexDate);
      IF ToType = ToType::Customer THEN
        CopyUnitPriceBudgetCustomer(FromCode, FromIndexDate, ToCode, ToIndexDate);
      CopyUnitPriceSet(FromCode, FromIndexDate, ToCode, ToIndexDate);
    END;

    LOCAL PROCEDURE CopyUnitPriceLine@1100528301(FromType@1210190007 : ',Internal,Customer';FromCode@1210190006 : Code[20];FromIndexDate@1210190005 : Date;ToType@1210190003 : ',Internal,Customer';ToCode@1210190002 : Code[20];ToIndexDate@1210190001 : Date);
    VAR
      ServiceUnitPrice@1100528301 : Record 11071769;
      ToServiceUnitPrice@1100528306 : Record 11071769;
    BEGIN
      ServiceUnitPrice.SETRANGE("Price Book Type", FromType);
      ServiceUnitPrice.SETRANGE("Price Book Code", FromCode);
      ServiceUnitPrice.SETRANGE("Index Date", FromIndexDate);
      IF ServiceUnitPrice.FINDSET THEN BEGIN
        REPEAT
          ToServiceUnitPrice.COPY(ServiceUnitPrice);
          ToServiceUnitPrice."Price Book Type" := ToType;
          ToServiceUnitPrice."Price Book Code" := ToCode;
          ToServiceUnitPrice."Index Date" := ToIndexDate;
          ToServiceUnitPrice.INSERT(TRUE);
        UNTIL ServiceUnitPrice.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyUnitPriceBudgetInternal@1100528302(FromType@1210190007 : ',Internal,Customer';FromCode@1210190006 : Code[20];FromIndexDate@1210190005 : Date;ToType@1210190003 : ',Internal,Customer';ToCode@1210190002 : Code[20];ToIndexDate@1210190001 : Date);
    VAR
      UnitPriceBudgetInternal@1100528302 : Record 11071770;
      ToUnitPriceBudgetInternal@1100528305 : Record 11071770;
    BEGIN
      UnitPriceBudgetInternal.SETRANGE("Price Book Type", FromType);
      UnitPriceBudgetInternal.SETRANGE("Price Book Code", FromCode);
      UnitPriceBudgetInternal.SETRANGE("Index Date", FromIndexDate);
      IF UnitPriceBudgetInternal.FINDSET THEN BEGIN
        REPEAT
          ToUnitPriceBudgetInternal.COPY(UnitPriceBudgetInternal);
          ToUnitPriceBudgetInternal."Price Book Type" := ToType;
          ToUnitPriceBudgetInternal."Price Book Code" := ToCode;
          ToUnitPriceBudgetInternal."Index Date" := ToIndexDate;
          ToUnitPriceBudgetInternal.INSERT(TRUE);
        UNTIL UnitPriceBudgetInternal.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyUnitPriceBudgetCustomer@1100528303(FromCode@1210190006 : Code[20];FromIndexDate@1210190005 : Date;ToCode@1210190002 : Code[20];ToIndexDate@1210190001 : Date);
    VAR
      UnitPriceBudgetCustomer@1100528303 : Record 11071771;
      ToUnitPriceBudgetCustomer@1100528304 : Record 11071771;
    BEGIN
      UnitPriceBudgetCustomer.SETRANGE("Price Book Code", FromCode);
      UnitPriceBudgetCustomer.SETRANGE("Index Date", FromIndexDate);
      IF UnitPriceBudgetCustomer.FINDSET THEN BEGIN
        REPEAT
          ToUnitPriceBudgetCustomer.COPY(UnitPriceBudgetCustomer);
          ToUnitPriceBudgetCustomer."Price Book Code" := ToCode;
          ToUnitPriceBudgetCustomer."Index Date" := ToIndexDate;
          ToUnitPriceBudgetCustomer.INSERT(TRUE);
        UNTIL UnitPriceBudgetCustomer.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyUnitPriceSet@1100528624(FromCode@1100528604 : Code[20];FromIndexDate@1100528603 : Date;ToCode@1100528601 : Code[20];ToIndexDate@1100528600 : Date);
    VAR
      ServiceUnitPriceSet@1100528606 : Record 11072284;
      ServiceUnitPriceSetLine@1100528607 : Record 11072285;
      ToServiceUnitPriceSet@1100528609 : Record 11072284;
      ToServiceUnitPriceSetLine@1100528608 : Record 11072285;
    BEGIN
      ServiceUnitPriceSet.SETRANGE("Price Book Code", FromCode);
      ServiceUnitPriceSet.SETRANGE("Price Book Index Date", FromIndexDate);
      IF ServiceUnitPriceSet.FINDSET THEN
        REPEAT
          ToServiceUnitPriceSet := ServiceUnitPriceSet;
          ToServiceUnitPriceSet."Price Book Code" := ToCode;
          ToServiceUnitPriceSet."Price Book Index Date" := ToIndexDate;
          ToServiceUnitPriceSet.INSERT(TRUE);
        UNTIL ServiceUnitPriceSet.NEXT = 0;

      ServiceUnitPriceSetLine.SETRANGE("Price Book Code", FromCode);
      ServiceUnitPriceSetLine.SETRANGE("Price Book Index Date", FromIndexDate);
      IF ServiceUnitPriceSetLine.FINDSET THEN
        REPEAT
          ToServiceUnitPriceSetLine := ServiceUnitPriceSetLine;
          ToServiceUnitPriceSetLine."Price Book Code" := ToCode;
          ToServiceUnitPriceSetLine."Price Book Index Date" := ToIndexDate;
          ToServiceUnitPriceSetLine.INSERT(TRUE);
        UNTIL ServiceUnitPriceSetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FillTempTableBudgetBreakdown@1100528304(VAR GenericTempTableBreakdown@1100528300 : Record 11020579;UnitPriceProdRecording@1100528301 : Record 11071773;UnitPriceProdRecordingLine@1100528303 : Record 11071774);
    VAR
      UnitPriceBudgetInternal@1100528302 : Record 11071770;
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      IF NOT ServiceOrder.GET(UnitPriceProdRecording."Service Order No.") THEN
        ServiceOrder.INIT;

      UnitPriceBudgetInternal.SETRANGE("Price Book Type", UnitPriceProdRecordingLine."Price Book Type");
      UnitPriceBudgetInternal.SETRANGE("Price Book Code", UnitPriceProdRecordingLine."Price Book Code");
      UnitPriceBudgetInternal.SETRANGE("Index Date", UnitPriceProdRecordingLine."Index Date");
      UnitPriceBudgetInternal.SETRANGE("Unit Price Code", UnitPriceProdRecordingLine."Unit Price Code");
      IF NOT UnitPriceBudgetInternal.FINDSET THEN BEGIN
        GenericTempTableBreakdown.INIT;
        GenericTempTableBreakdown."Key Code1" := 'Breakdown';
        GenericTempTableBreakdown."Key Code2" := UnitPriceProdRecordingLine."Price Book Code";
        GenericTempTableBreakdown."Key Code3" := FORMAT(UnitPriceProdRecordingLine."Index Date");
        GenericTempTableBreakdown."Key Code4" := UnitPriceProdRecordingLine."Unit Price Code";
        GenericTempTableBreakdown."Key Code5" := '10000';
        GenericTempTableBreakdown."Key Code6" := '';
        GenericTempTableBreakdown.Code1 := ServiceOrder."VAT Prod. Posting Group";
        GenericTempTableBreakdown.Dec1 := 100;
        GenericTempTableBreakdown.INSERT;
      END ELSE BEGIN
        REPEAT
          UnitPriceBudgetInternal.CALCFIELDS(Total);

          GenericTempTableBreakdown.INIT;
          GenericTempTableBreakdown."Key Code1" := 'Breakdown';
          GenericTempTableBreakdown."Key Code2" := UnitPriceBudgetInternal."Price Book Code";
          GenericTempTableBreakdown."Key Code3" := FORMAT(UnitPriceBudgetInternal."Index Date");
          GenericTempTableBreakdown."Key Code4" := UnitPriceBudgetInternal."Unit Price Code";
          GenericTempTableBreakdown."Key Code5" := FORMAT(UnitPriceBudgetInternal."Line No.");
          GenericTempTableBreakdown."Key Code6" := '';
          IF UnitPriceBudgetInternal."VAT Prod. Posting Group" <> '' THEN
            GenericTempTableBreakdown.Code1 := UnitPriceBudgetInternal."VAT Prod. Posting Group"
          ELSE
            GenericTempTableBreakdown.Code1 := ServiceOrder."VAT Prod. Posting Group";
          GenericTempTableBreakdown.Dec1 := (UnitPriceBudgetInternal.Amount / UnitPriceBudgetInternal.Total) * 100;
          GenericTempTableBreakdown.INSERT;
        UNTIL (UnitPriceBudgetInternal.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE FillTempTableVATLine@1100528309(VAR GenericTempTableBreakdown@1100528300 : Record 11020579;VAR GenericTempTableVATLine@1100528301 : Record 11020579;SUPProductionLine@1100528302 : Record 11071774;Quantity@1100528303 : Decimal;ExtensionYN@1100528304 : Boolean);
    VAR
      ServiceUnitPrice@1100528305 : Record 11071769;
    BEGIN
      GenericTempTableBreakdown.SETRANGE("Key Code1", 'Breakdown');
      IF (NOT GenericTempTableBreakdown.FINDSET) THEN
        EXIT;

      REPEAT
        ServiceUnitPrice.GET(
          SUPProductionLine."Price Book Code", SUPProductionLine."Index Date", SUPProductionLine."Unit Price Code");

        IF NOT GenericTempTableVATLine.GET('VATLine',
             FORMAT(ExtensionYN),
             GenericTempTableBreakdown.Code1, //VAT Prod. Posting Group
             '', '', '')
        THEN BEGIN
          GenericTempTableVATLine.INIT;
          GenericTempTableVATLine."Key Code1" := 'VATLine';
          GenericTempTableVATLine."Key Code2" := FORMAT(ExtensionYN);
          GenericTempTableVATLine."Key Code3" := GenericTempTableBreakdown.Code1; //VAT Prod. Posting Group
          GenericTempTableVATLine."Key Code4" := '';
          GenericTempTableVATLine."Key Code5" := '';
          GenericTempTableVATLine."Key Code6" := '';
          GenericTempTableVATLine.INSERT;
        END;
        GenericTempTableVATLine.Dec1 += ServiceUnitPrice."Unit Price" * GenericTempTableBreakdown.Dec1 / 100;
        GenericTempTableVATLine.Dec2 := Quantity;
        GenericTempTableVATLine.Bool1 := ExtensionYN;
        GenericTempTableVATLine.MODIFY;
      UNTIL (GenericTempTableBreakdown.NEXT = 0);
    END;

    PROCEDURE CopyUnitPriceRoomVersion@1100528611(IUnitPriceRoomVersion@1100528600 : Record 11071982;IIndexDate@1100528603 : Date;IIncludeVersionLines@1100528604 : Boolean;VAR OUnitPriceRoomVersion@1100528605 : Record 11071982);
    VAR
      UnitPriceRoomVersionLine@1100528606 : Record 11071983;
      ToUnitPriceRoomVersionLine@1100528601 : Record 11071983;
    BEGIN
      OUnitPriceRoomVersion := IUnitPriceRoomVersion;
      OUnitPriceRoomVersion."Index Date" := IIndexDate;
      OUnitPriceRoomVersion.INSERT(TRUE);

      IF IIncludeVersionLines THEN BEGIN
        UnitPriceRoomVersionLine.SETRANGE("Customer No.", IUnitPriceRoomVersion."Customer No.");
        UnitPriceRoomVersionLine.SETRANGE("Room Code", IUnitPriceRoomVersion."Room Code");
        UnitPriceRoomVersionLine.SETRANGE("Index Date", IUnitPriceRoomVersion."Index Date");
        IF UnitPriceRoomVersionLine.FINDSET THEN
          REPEAT
            ToUnitPriceRoomVersionLine := UnitPriceRoomVersionLine;
            ToUnitPriceRoomVersionLine."Index Date" := IIndexDate;
            ToUnitPriceRoomVersionLine.INSERT(TRUE);
          UNTIL UnitPriceRoomVersionLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetLatestPriceBookIndexDate@1210190031(Type@1210190003 : Option;Code@1210190001 : Code[20]) : Date;
    VAR
      ServicePriceBook@1210190000 : Record 11071768;
    BEGIN
      ServicePriceBook.SETRANGE(Type, Type);
      ServicePriceBook.SETRANGE(Code, Code);
      IF ServicePriceBook.FINDLAST THEN
        EXIT(ServicePriceBook."Index Date");
    END;

    PROCEDURE "----"@1100528612();
    BEGIN
    END;

    LOCAL PROCEDURE GetRoomVersionLinesDS@1100528614(IServiceUnitPriceLine@1100528600 : Record 11071769;VAR OSUPRoomVersionLine@1100528602 : Record 11071983);
    BEGIN
      OSUPRoomVersionLine.RESET;
      OSUPRoomVersionLine.SETRANGE("Customer No.", IServiceUnitPriceLine."Price Book Code");
      OSUPRoomVersionLine.SETRANGE("Index Date", IServiceUnitPriceLine."Index Date");
      OSUPRoomVersionLine.SETRANGE("Price Book Type", IServiceUnitPriceLine."Price Book Type");
      OSUPRoomVersionLine.SETRANGE("Price Book Code", IServiceUnitPriceLine."Price Book Code");
      OSUPRoomVersionLine.SETRANGE("Unit Price Code", IServiceUnitPriceLine.Code);
    END;

    PROCEDURE GetNoOfRoomsOfSUPLine@1100528617(IServiceUnitPriceLine@1100528600 : Record 11071769) : Integer;
    VAR
      SUPRoomVersionLine@1100528601 : Record 11071983;
    BEGIN
      GetRoomVersionLinesDS(IServiceUnitPriceLine, SUPRoomVersionLine);
      EXIT(SUPRoomVersionLine.COUNT);
    END;

    PROCEDURE GetNoOfRoomsTextOfSUPLine@1100528615(IServiceUnitPriceLine@1100528600 : Record 11071769) : Text;
    VAR
      SUPRoomVersionLine@1100528601 : Record 11071983;
      NoOfLines@1100528602 : Integer;
    BEGIN
      GetRoomVersionLinesDS(IServiceUnitPriceLine, SUPRoomVersionLine);
      NoOfLines := SUPRoomVersionLine.COUNT;
      CASE NoOfLines OF
        0:
          EXIT;
        1:
          BEGIN
            SUPRoomVersionLine.FINDFIRST;
            EXIT(SUPRoomVersionLine."Room Code");
          END;
      ELSE
          EXIT(STRSUBSTNO('[%1]', NoOfLines));
      END;
    END;

    PROCEDURE ShowRoomsOfSupLine@1100528618(IServiceUnitPriceLine@1100528600 : Record 11071769);
    VAR
      SUPRoomVersionLine@1100528601 : Record 11071983;
      SUPRoom@1100528602 : Record 11071950;
    BEGIN
      GetRoomVersionLinesDS(IServiceUnitPriceLine, SUPRoomVersionLine);
      IF SUPRoomVersionLine.FINDSET THEN
        REPEAT
          SUPRoom."Customer No." := SUPRoomVersionLine."Customer No.";
          SUPRoom.Code := SUPRoomVersionLine."Room Code";
          SUPRoom.MARK(TRUE);
        UNTIL SUPRoomVersionLine.NEXT = 0;
      SUPRoom.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, SUPRoom);
    END;

    PROCEDURE "-----"@1100528616();
    BEGIN
    END;

    PROCEDURE FillSUPVATCustomerRelation@1100528619(IPriceBookCode@1100528600 : Code[20];IPriceBookIndexDate@1100528601 : Date);
    VAR
      SUPCustomerBudgetLine@1100528602 : Record 11071771;
      SUPVATCustomerRelation@1100528603 : Record 11071992;
    BEGIN
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IPriceBookCode);
      SUPCustomerBudgetLine.SETRANGE("Index Date", IPriceBookIndexDate);
      IF SUPCustomerBudgetLine.FINDSET THEN
        REPEAT
          IF SUPCustomerBudgetLine."VAT Code Men Hours Customer" <> '' THEN
            IF NOT SUPVATCustomerRelation.GET(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."VAT Code Men Hours Customer") THEN
              AddSUPVATCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."VAT Code Men Hours Customer");
          IF SUPCustomerBudgetLine."VAT Code Material Customer" <> '' THEN
            IF NOT SUPVATCustomerRelation.GET(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."VAT Code Material Customer") THEN
             AddSUPVATCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."VAT Code Material Customer");
        UNTIL SUPCustomerBudgetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddSUPVATCustomerRelation@1100528621(IPriceBookCode@1100528602 : Code[20];IPriceBookIndexDate@1100528601 : Date;IVATCodeCustomer@1100528600 : Code[10]);
    VAR
      SUPVATCustomerRelation@1100528603 : Record 11071992;
    BEGIN
      SUPVATCustomerRelation."Price Book Code" := IPriceBookCode;
      SUPVATCustomerRelation."Index Date" := IPriceBookIndexDate;
      SUPVATCustomerRelation."VAT Code Customer" := IVATCodeCustomer;
      SUPVATCustomerRelation.INSERT;
    END;

    PROCEDURE FillSUPRateCustomerRelation@1100528620(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date);
    VAR
      SUPCustomerBudgetLine@1100528602 : Record 11071771;
      SUPRateCustomerRelation@1100528603 : Record 11071993;
    BEGIN
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IPriceBookCode);
      SUPCustomerBudgetLine.SETRANGE("Index Date", IPriceBookIndexDate);
      SUPCustomerBudgetLine.SETFILTER("Hour Rate", '<>%1', 0);
      IF SUPCustomerBudgetLine.FINDSET THEN
        REPEAT
          IF NOT SUPRateCustomerRelationExists(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."Hour Rate") THEN
            AddSUPRateCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."Hour Rate");
        UNTIL SUPCustomerBudgetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SUPRateCustomerRelationExists@1100528623(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date;IRate@1100528602 : Decimal) : Boolean;
    VAR
      SUPRateCustomerRelation@1100528603 : Record 11071993;
    BEGIN
      SUPRateCustomerRelation.SETRANGE("Price Book Code", IPriceBookCode);
      SUPRateCustomerRelation.SETRANGE("Index Date", IPriceBookIndexDate);
      SUPRateCustomerRelation.SETRANGE("Rate Customer", IRate);
      EXIT(NOT SUPRateCustomerRelation.ISEMPTY);
    END;

    LOCAL PROCEDURE AddSUPRateCustomerRelation@1100528622(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date;IRate@1100528602 : Decimal);
    VAR
      SUPRateCustomerRelation@1100528603 : Record 11071993;
    BEGIN
      SUPRateCustomerRelation.SETRANGE("Price Book Code", IPriceBookCode);
      SUPRateCustomerRelation.SETRANGE("Index Date", IPriceBookIndexDate);
      IF NOT SUPRateCustomerRelation.FINDLAST THEN
        SUPRateCustomerRelation.INIT;
      SUPRateCustomerRelation."Price Book Code" := IPriceBookCode;
      SUPRateCustomerRelation."Index Date" := IPriceBookIndexDate;
      SUPRateCustomerRelation."Entry No." += 10000;
      SUPRateCustomerRelation."Rate Customer" := IRate;
      SUPRateCustomerRelation.INSERT;
    END;

    PROCEDURE FillSUPUOMCustomerRelation@1100528627(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date);
    VAR
      SUPCustomerBudgetLine@1100528603 : Record 11071771;
      SUPUOMCustomerRelation@1100528602 : Record 11071994;
    BEGIN
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IPriceBookCode);
      SUPCustomerBudgetLine.SETRANGE("Index Date", IPriceBookIndexDate);
      SUPCustomerBudgetLine.SETFILTER("Unit of Measure", '<>%1', '');
      IF SUPCustomerBudgetLine.FINDSET THEN
        REPEAT
          IF NOT SUPUOMCustomerRelation.GET(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."Unit of Measure") THEN
            AddSUPUOMCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."Unit of Measure");
        UNTIL SUPCustomerBudgetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddSUPUOMCustomerRelation@1100528628(IPriceBookCode@1100528602 : Code[20];IPriceBookIndexDate@1100528601 : Date;IUOMCustomer@1100528603 : Code[10]);
    VAR
      SUPUOMCustomerRelation@1100528600 : Record 11071994;
    BEGIN
      SUPUOMCustomerRelation."Price Book Code" := IPriceBookCode;
      SUPUOMCustomerRelation."Index Date" := IPriceBookIndexDate;
      SUPUOMCustomerRelation."Unit of Measure Customer" := IUOMCustomer;
      SUPUOMCustomerRelation.INSERT;
    END;

    LOCAL PROCEDURE "------"@1100528824();
    BEGIN
    END;

    PROCEDURE CopyLocationTypeRelations@1100528625(IFromLocationType@1100528600 : Code[20];IFromCustomerNo@1100528601 : Code[20];IToCustomerNo@1100528602 : Code[20];ICopyRoom@1100528613 : Boolean;ICopyPart@1100528614 : Boolean;ICopyRoomParts@1100528605 : Boolean;ICopyPartProblemCodes@1100528606 : Boolean);
    VAR
      ServiceLocationTypeRoom@1100528603 : Record 11072281;
      ToServiceLocationTypeRoom@1100528604 : Record 11072281;
      SUPRoomPart@1100528607 : Record 11072282;
      ToSUPRoomPart@1100528608 : Record 11072282;
      SUPPartServiceAnalysis@1100528609 : Record 11072283;
      ToSUPPartServiceAnalysis@1100528610 : Record 11072283;
      SUPRoom@1100528611 : Record 11071950;
      SUPPart@1100528612 : Record 11071951;
    BEGIN
      ServiceLocationTypeRoom.SETRANGE("Service Location Type", IFromLocationType);
      ServiceLocationTypeRoom.SETRANGE("Customer No.", IFromCustomerNo);
      IF ServiceLocationTypeRoom.FINDSET THEN
        REPEAT
          IF ICopyRoom THEN
            IF NOT SUPRoom.GET(IToCustomerNo, ServiceLocationTypeRoom."Room (SUP)") THEN
              IF SUPRoom.GET(IFromCustomerNo, ServiceLocationTypeRoom."Room (SUP)") THEN BEGIN
                SUPRoom."Customer No." := IToCustomerNo;
                SUPRoom.INSERT(TRUE);
              END;
          IF SUPRoom.GET(IToCustomerNo, ServiceLocationTypeRoom."Room (SUP)") THEN BEGIN
            ToServiceLocationTypeRoom := ServiceLocationTypeRoom;
            ToServiceLocationTypeRoom."Customer No." := IToCustomerNo;
            IF ToServiceLocationTypeRoom.INSERT(TRUE) THEN;
          END;
        UNTIL ServiceLocationTypeRoom.NEXT = 0;

      IF ICopyRoomParts THEN BEGIN
        SUPRoomPart.SETRANGE("Customer No.", IFromCustomerNo);
        IF SUPRoomPart.FINDSET THEN
          REPEAT
            IF ICopyPart THEN
              IF NOT SUPPart.GET(IToCustomerNo, SUPRoomPart."Part (SUP)") THEN
                IF SUPPart.GET(IFromCustomerNo, SUPRoomPart."Part (SUP)") THEN BEGIN
                  SUPPart."Customer No." := IToCustomerNo;
                  SUPPart.INSERT(TRUE);
                END;

            IF SUPRoom.GET(IToCustomerNo, SUPRoomPart."Room (SUP)") AND
               SUPPart.GET(IToCustomerNo, SUPRoomPart."Part (SUP)")
            THEN BEGIN
              ToSUPRoomPart := SUPRoomPart;
              ToSUPRoomPart."Customer No." := IToCustomerNo;
              IF ToSUPRoomPart.INSERT(TRUE) THEN;
            END;
          UNTIL SUPRoomPart.NEXT = 0;
      END;

      IF ICopyPartProblemCodes THEN BEGIN
        SUPPartServiceAnalysis.SETRANGE("Customer No.", IFromCustomerNo);
        IF SUPPartServiceAnalysis.FINDSET THEN
          REPEAT
            IF SUPPart.GET(IToCustomerNo, SUPPartServiceAnalysis."Part (SUP)") THEN BEGIN
              ToSUPPartServiceAnalysis := SUPPartServiceAnalysis;
              ToSUPPartServiceAnalysis."Customer No." := IToCustomerNo;
              IF ToSUPPartServiceAnalysis.INSERT(TRUE) THEN;
            END;
          UNTIL SUPPartServiceAnalysis.NEXT = 0;
      END;
    END;

    PROCEDURE CustomerHasCustomizations@1100528632(ICustomerNo@1100528602 : Code[20]) : Boolean;
    VAR
      SUPRoom@1100528603 : Record 11071950;
    BEGIN
      SUPRoom.SETRANGE("Customer No.", ICustomerNo);
      EXIT(NOT SUPRoom.ISEMPTY);
    END;

    PROCEDURE ValidateRoom@1100528630(ICustomerNo@1100528601 : Code[20];IRoom@1100528600 : Code[20]);
    VAR
      SUPRoom@1100528602 : Record 11071950;
    BEGIN
      IF IRoom = '' THEN
       EXIT;
      IF NOT CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      SUPRoom.SETRANGE("Customer No.", ICustomerNo);
      SUPRoom.SETRANGE(Code, IRoom);
      SUPRoom.FINDFIRST;
    END;

    PROCEDURE LookupRoom@1100528626(ICustomerNo@1100528602 : Code[20];IServiceLocationType@1100528603 : Code[20];VAR ORoomCode@1100528600 : Code[20]) : Boolean;
    VAR
      SUPRoom@1100528601 : Record 11071950;
      ServiceLocationTypeRoom@1100528604 : Record 11072281;
    BEGIN
      IF NOT CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      SUPRoom.SETRANGE("Customer No.", ICustomerNo);
      IF IServiceLocationType <> '' THEN BEGIN
        ServiceLocationTypeRoom.SETRANGE("Service Location Type", IServiceLocationType);
        ServiceLocationTypeRoom.SETRANGE("Customer No.", ICustomerNo);
        IF ServiceLocationTypeRoom.FINDSET THEN BEGIN
          REPEAT
            SUPRoom."Customer No." := ServiceLocationTypeRoom."Customer No.";
            SUPRoom.Code := ServiceLocationTypeRoom."Room (SUP)";
            SUPRoom.MARK(TRUE);
          UNTIL ServiceLocationTypeRoom.NEXT = 0;
          SUPRoom.MARKEDONLY(TRUE);
        END;
      END;
      IF PAGE.RUNMODAL(0, SUPRoom) = ACTION::LookupOK THEN BEGIN
        ORoomCode := SUPRoom.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ValidatePart@1100528636(ICustomerNo@1100528600 : Code[20];IPartCode@1100528602 : Code[20]);
    VAR
      SUPPart@1100528603 : Record 11071951;
    BEGIN
      IF IPartCode = '' THEN
        EXIT;
      IF NOT CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      SUPPart.GET(ICustomerNo, IPartCode);
    END;

    PROCEDURE LookupPart@1100528638(ICustomerNo@1100528600 : Code[20];IRoomCode@1100528601 : Code[20];VAR OPartCode@1100528602 : Code[20]) : Boolean;
    VAR
      SUPPart@1100528603 : Record 11071951;
      SUPRoomPart@1100528604 : Record 11072282;
    BEGIN
      IF NOT CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      SUPPart.SETRANGE("Customer No.", ICustomerNo);
      IF IRoomCode <> '' THEN BEGIN
        SUPRoomPart.SETRANGE("Customer No.", ICustomerNo);
        SUPRoomPart.SETRANGE("Room (SUP)", IRoomCode);
        IF SUPRoomPart.FINDSET THEN BEGIN
          REPEAT
            SUPPart."Customer No." := SUPRoomPart."Customer No.";
            SUPPart.Code := SUPRoomPart."Part (SUP)";
            SUPPart.MARK(TRUE);
          UNTIL SUPRoomPart.NEXT = 0;
          SUPPart.MARKEDONLY(TRUE);
        END;
      END;
      IF PAGE.RUNMODAL(0, SUPPart) = ACTION::LookupOK THEN BEGIN
        OPartCode := SUPPart.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DetermineCustomerNo@1100528629(IPriceBookType@1100528600 : 'None,Internal,Customer';IPriceBookCode@1100528601 : Code[20]) : Code[20];
    BEGIN
      IF IPriceBookType = IPriceBookType::Customer THEN
        EXIT(IPriceBookCode);
    END;

    PROCEDURE GetServiceLocationTypeFromServiceOrder@1100528631(IServiceOrderNo@1100528600 : Code[20]) : Code[20];
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT(ServiceOrder."Service Location Type");
    END;

    PROCEDURE GetRoomDescription@1100525047(ICustomerNo@1100528602 : Code[20];IRoomCode@1100528603 : Code[20]) : Text[50];
    VAR
      SUPRoom@1100525000 : Record 11071950;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
    BEGIN
      IF NOT ServiceUnitPriceManagement.CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      IF SUPRoom.GET(ICustomerNo, IRoomCode) THEN
        EXIT(SUPRoom.Description);
    END;

    PROCEDURE GetPartDescription@1100525048(ICustomerNo@1100528602 : Code[20];IPartCode@1100528603 : Code[20]) : Text[50];
    VAR
      SUPPart@1100525000 : Record 11071951;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
      CustomerNo@1100528601 : Code[20];
    BEGIN
      IF NOT ServiceUnitPriceManagement.CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      IF SUPPart.GET(ICustomerNo, IPartCode) THEN
        EXIT(SUPPart.Description);
    END;

    BEGIN
    END.
  }
}

