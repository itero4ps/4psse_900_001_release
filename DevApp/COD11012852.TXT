OBJECT Codeunit 11012852 Service Survey Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100528600 : TextConst 'ENU=All Objects already created';
      Text002@1210190000 : TextConst 'ENU=First select records';
      Text003@1210190001 : TextConst 'ENU=Selected Objects already created';
      Text004@1100409000 : TextConst 'ENU=No Starting Date given';
      Text005@1100528601 : TextConst 'ENU=Divided %1';
      Text006@1100525000 : TextConst 'ENU=Object(s) added to %1 Service Contract %2';
      Text007@1100525001 : TextConst 'ENU=new';
      Text008@1100525002 : TextConst 'ENU=existing';

    PROCEDURE GetServiceRate@1100528600(IServSurvLocationObject@1100528601 : Record 11071813) : Decimal;
    VAR
      ServiceSurvey@1100528602 : Record 11071803;
      GetMaintenanceSalesAndCost@1100528600 : Codeunit 11012827;
    BEGIN
      IF NOT ServiceSurvey.GET(IServSurvLocationObject."Survey No.") THEN
        ServiceSurvey.INIT;
      IServSurvLocationObject.CALCFIELDS("Object Group");
      EXIT(GetMaintenanceSalesAndCost.GetRate(
        ServiceSurvey."Customer No.", GetReferenceDate(IServSurvLocationObject."Survey No."),
        IServSurvLocationObject."Object Group", IServSurvLocationObject."Customer Object Group",
        IServSurvLocationObject."Service Package"));
    END;

    PROCEDURE GetCostObjectDetail@1100528601(IServSurvLocObjDetail@1100528609 : Record 11071807;VAR OLabor@1100528602 : Decimal;VAR OHours@1100528603 : Decimal;VAR OMaterial@1100528604 : Decimal;VAR OSubcontracting@1100528605 : Decimal;VAR OPlant@1100528606 : Decimal;VAR OSundry@1100528607 : Decimal;VAR OTotalCost@1100528608 : Decimal);
    BEGIN
      GetCostObjectDetByCostObject(
        IServSurvLocObjDetail, '', '', TRUE, OLabor, OHours, OMaterial, OSubcontracting, OPlant, OSundry, OTotalCost);
    END;

    PROCEDURE GetCostObjectDetByCostObject@1100528609(IServSurvLocObjDetail@1100528607 : Record 11071807;ICostObjectFilter@1100528608 : Code[250];IRateCodeFilter@1100528614 : Code[250];IInclAdditionalActivities@1100528612 : Boolean;VAR OLabor@1100528606 : Decimal;VAR OHours@1100528605 : Decimal;VAR OMaterial@1100528604 : Decimal;VAR OSubcontracting@1100528603 : Decimal;VAR OPlant@1100528602 : Decimal;VAR OSundry@1100528601 : Decimal;VAR OTotalCost@1100528600 : Decimal);
    VAR
      ServSurvLocationObject@1100528611 : Record 11071813;
      ServiceSurvey@1100528613 : Record 11071803;
      TmpServSurvObjectAddAct@1100525000 : TEMPORARY Record 11071814;
      MaintenanceManagement@1100528610 : Codeunit 11012829;
      LineType@1100528609 : 'Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object';
    BEGIN
      IF NOT ServSurvLocationObject.GET(
        IServSurvLocObjDetail."Survey No.", IServSurvLocObjDetail."Location Code", IServSurvLocObjDetail."Seq. No.") THEN
        EXIT;

      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");

      GetTempSurveyWorkList(IServSurvLocObjDetail, IInclAdditionalActivities, TRUE, TmpServSurvObjectAddAct);
      CalcBudgetLines2(TmpServSurvObjectAddAct, IServSurvLocObjDetail, GetReferenceDate(IServSurvLocObjDetail."Survey No."),
        1, ICostObjectFilter, IRateCodeFilter, ServiceSurvey."Global Dimension 1 Code",
        OLabor, OHours, OMaterial, OSubcontracting, OPlant, OSundry, OTotalCost);
    END;

    PROCEDURE GetReferenceDate@1100528602(ISurveyNo@1100528600 : Code[20]) : Date;
    VAR
      ServiceSurvey@1100528601 : Record 11071803;
    BEGIN
      ServiceSurvey.GET(ISurveyNo);
      ServiceSurvey.TESTFIELD("Reference Date");
      EXIT(ServiceSurvey."Reference Date");
    END;

    PROCEDURE CreateContractFromObjects@1100528614(VAR IServSurvLocationObject@1100528619 : Record 11071813;IContractNo@1100528600 : Code[20];IServiceContractTemplateCode@1100409005 : Code[20];IServiceContractStatus@1100409003 : Option;IServicePackageCode@1100409004 : Code[20];IServiceContractStartingDate@1100409000 : Date);
    VAR
      ServiceSurvey@1100528602 : Record 11071803;
      ServSurvLocationObject@1100528606 : Record 11071813;
      ServiceContract@1100528601 : Record 11012812;
      ContractInstallment@1100528629 : Record 11071707;
      TryoutSuccessor@1100528616 : Record 11012761;
      ServiceLocation@1100528608 : Record 11012801;
      ServiceObject@1100528609 : Record 11071691;
      Customer@1100528603 : Record 18;
      ServiceContractTemplate@1100528604 : Record 11071754;
      ContractObject@1100528605 : Record 11071702;
      ContractObjectMaintenance@1100528611 : Record 11071692;
      ServSurvLocObjDetail@1100528610 : Record 11071807;
      ServSurvObjectAddAct@1100528612 : Record 11071814;
      MaintenanceSchemeVersion@1100528613 : Record 11071743;
      MaintSchemeVersionLine@1100528614 : Record 11071744;
      ContractAmountsbyDate@1100528615 : Record 11071708;
      ServiceSurveySurcharge@1100528607 : Record 11071808;
      ServiceSurchargeVersion@1100528618 : Record 11071783;
      ServiceSurchargeLine@1100528621 : Record 11071784;
      ServiceSurveyStructureLine@1100528623 : Record 11071806;
      ServiceLocStructureLine@1100528624 : Record 11071720;
      ServiceSetup@1100528626 : Record 11012800;
      SurvObjAddActProperty@1100525000 : Record 11071955;
      MaintSchemeLineProperty@1100525001 : Record 11071954;
      ServiceSurveyObjectSpec@1100528625 : Record 11071972;
      DummyObjectSpecificationLine@1100528628 : Record 11071781;
      SubcontractorService@1100528631 : Record 11071789;
      ObjectSpecificationMgt@1100528627 : Codeunit 11012848;
      MaintenanceManagement@1100528630 : Codeunit 11012829;
      NoOfObjects@1100528617 : Integer;
      ServiceLocationNo@1100528620 : Code[20];
      LineNo@1100528622 : Integer;
    BEGIN
      ServSurvLocationObject.COPY(IServSurvLocationObject);
      IF ServSurvLocationObject.ISEMPTY THEN
        ERROR(Text002);

      ServSurvLocationObject.SETFILTER(Quantity, '>%1', 0);
      ServSurvLocationObject.SETRANGE("Include in Contract", TRUE);
      ServSurvLocationObject.SETRANGE("Service Contract No.", '');
      IF ServSurvLocationObject.ISEMPTY THEN
        ERROR(Text003);

      ServiceSurvey.GET(IServSurvLocationObject."Survey No.");
      ServiceSurvey.TESTFIELD("Customer No.");
      IF (IContractNo = '') AND (IServiceContractStartingDate = 0D) THEN
        ERROR(Text004);
      Customer.GET(ServiceSurvey."Customer No.");

      IF IContractNo = '' THEN BEGIN
        ServiceContract.INIT;
        IF ServiceContractTemplate.GET(IServiceContractTemplateCode) THEN BEGIN
          ServiceContract."Contract Template Code" := ServiceContractTemplate.Code;
          ServiceContract.TRANSFERFIELDS(ServiceContractTemplate);
        END;
        ServiceContract.INSERT(TRUE);
        ServiceContract.VALIDATE(Description, ServiceSurvey.Description);
        ServiceContract.VALIDATE("Description 2", ServiceSurvey."Description 2");
        ServiceContract.VALIDATE("Customer No.", ServiceSurvey."Customer No.");
        ServiceContract.VALIDATE("Phone No.", Customer."Phone No.");
        ServiceContract.VALIDATE("Fax No.", Customer."Fax No.");
        ServiceContract.VALIDATE("E-Mail", Customer."E-Mail");
        ServiceContract.VALIDATE("Invoice Type", ServiceSurvey."Invoice Type");
        ServiceContract.VALIDATE("Starting Date", IServiceContractStartingDate);
        IF IServicePackageCode <> '' THEN
          ServiceContract.VALIDATE("Service Package", IServicePackageCode);
        ServiceContract.VALIDATE(Status, IServiceContractStatus);
        ServiceContract.VALIDATE("Service Type", ServiceSurvey."Service Type");
        ServiceContract.VALIDATE("Global Dimension 1 Code", ServiceSurvey."Global Dimension 1 Code");
        ServiceContract.MODIFY(TRUE);

        TryoutSuccessor.CopyRelation(5, 3, ServiceSurvey."No.", ServiceContract."No.");

        IF ServiceSurvey."Offered Amount" <> 0 THEN BEGIN
          ContractAmountsbyDate.INIT;
          ContractAmountsbyDate.VALIDATE(Type, ContractAmountsbyDate.Type::"Service Contract");
          ContractAmountsbyDate.VALIDATE("Service Contract No.", ServiceContract."No.");
          ContractAmountsbyDate.VALIDATE("Index Date", ServiceContract."Starting Date");
          ContractAmountsbyDate.VALIDATE("Amount (LCY)", ServiceSurvey."Offered Amount");
          ContractAmountsbyDate.INSERT(TRUE);
        END;

        IF (ServiceSurvey."Invoice Type" = ServiceSurvey."Invoice Type"::Installments) AND
           (FORMAT(ServiceSurvey."Installment Invoice Interval") <> '')
        THEN BEGIN
          ContractInstallment.INIT;
          ContractInstallment."Service Contract No." := ServiceContract."No.";
          ContractInstallment."Line No." := 10000;
          ContractInstallment."Invoice Interval" := ServiceSurvey."Installment Invoice Interval";
          ContractInstallment.Description := ServiceSurvey."Installment Description";
          ContractInstallment."Invoice From" := IServiceContractStartingDate;
          ContractInstallment.INSERT(TRUE);

          ContractAmountsbyDate.INIT;
          ContractAmountsbyDate.VALIDATE(Type, ContractAmountsbyDate.Type::Installment);
          ContractAmountsbyDate.VALIDATE("Service Contract No.", ServiceContract."No.");
          ContractAmountsbyDate."Installment Line No." := ContractInstallment."Line No.";
          ContractAmountsbyDate.VALIDATE("Index Date", ServiceContract."Starting Date");
          ContractAmountsbyDate.VALIDATE("Amount (LCY)",
            ROUND(ServiceSurvey."Offered Amount" / MaintenanceManagement.ConvPeriodToTimesPerYear(ServiceSurvey."Installment Invoice Interval")));
          ContractAmountsbyDate.INSERT(TRUE);
        END;

        //Remove the default surcharges
        ServiceSurchargeVersion.SETRANGE(Type, ServiceSurchargeVersion.Type::Contract);
        ServiceSurchargeVersion.SETRANGE(Code, ServiceContract."No.");
        ServiceSurchargeVersion.SETRANGE("Source Type", ServiceSurchargeVersion."Source Type"::Contract);
        ServiceSurchargeVersion.DELETEALL(TRUE);

        ServiceSurveySurcharge.SETRANGE("Survey No.", ServiceSurvey."No.");
        ServiceSurveySurcharge.SETRANGE("Surcharge Type", ServiceSurveySurcharge."Surcharge Type"::Cost);
        IF ServiceSurveySurcharge.FINDSET THEN BEGIN
          ServiceSurchargeVersion.INIT;
          ServiceSurchargeVersion.Type := ServiceSurchargeVersion.Type::Contract;
          ServiceSurchargeVersion.Code := ServiceContract."No.";
          ServiceSurchargeVersion."Source Type" := ServiceSurchargeVersion."Source Type"::Contract;
          ServiceSurchargeVersion."Index Date" := ServiceContract."Starting Date";
          ServiceSurchargeVersion.INSERT(TRUE);
          LineNo := 0;
          REPEAT
            ServiceSurveySurcharge.TESTFIELD("Cost Object");
            LineNo += 10000;
            ServiceSurchargeLine.Type := ServiceSurchargeVersion.Type;
            ServiceSurchargeLine.Code := ServiceSurchargeVersion.Code;
            ServiceSurchargeLine."Source Type" := ServiceSurchargeVersion."Source Type";
            ServiceSurchargeLine."Service Type" := ServiceSurchargeVersion."Service Type";
            ServiceSurchargeLine."Index Date" := ServiceSurchargeVersion."Index Date";
            ServiceSurchargeLine."Line No." := LineNo;
            ServiceSurchargeLine.VALIDATE("Cost Type Filter", ServiceSurveySurcharge."Cost Type Filter");
            ServiceSurchargeLine.VALIDATE("Cost Object", ServiceSurveySurcharge."Cost Object");
            ServiceSurchargeLine.VALIDATE(Description, ServiceSurveySurcharge.Description);
            ServiceSurchargeLine.VALIDATE("Surcharge %", ServiceSurveySurcharge."Surcharge Percentage");
            ServiceSurchargeLine.INSERT(TRUE);
          UNTIL ServiceSurveySurcharge.NEXT = 0;
        END;
      END ELSE
        ServiceContract.GET(IContractNo);

      IF ServSurvLocationObject.FINDSET(TRUE) THEN BEGIN
        REPEAT
          ServiceLocationNo := GetOrCreateServiceLocation(ServSurvLocationObject);
          ServiceLocation.GET(ServiceLocationNo);

          // Create Service Object
          FOR NoOfObjects := 1 TO ServSurvLocationObject.Quantity DO BEGIN
            ServiceObject.INIT;
            ServiceObject."No." := '';
            ServiceObject.INSERT(TRUE);
            ServiceObject.VALIDATE("Standard Object No.", ServSurvLocationObject."Standard Object No.");
            ServiceObject.VALIDATE(Description, ServSurvLocationObject.Description);
            ServiceObject.VALIDATE("Description 2", ServSurvLocationObject."Description 2");
            ServiceObject.VALIDATE("Service Location No.", ServiceLocation."No.");
            ServiceObject.VALIDATE(Quantity, ServSurvLocationObject."Quantity per Object");
            ServiceObject.VALIDATE("Object Customer", ServSurvLocationObject."Object Customer");
            ServiceObject.VALIDATE("In use since", ServSurvLocationObject."In use since");
            ServiceObject.VALIDATE("Warranty Code Customer", ServSurvLocationObject."Warranty Code");
            ServiceObject.VALIDATE("Warranty Start Date Customer", ServSurvLocationObject."Warranty Starting Date");
            ServiceObject.VALIDATE(Building, ServSurvLocationObject.Building);
            ServiceObject.VALIDATE(Floor, ServSurvLocationObject.Floor);
            ServiceObject.VALIDATE(Room, ServSurvLocationObject.Room);
            ServiceObject.VALIDATE("Customer Feature", ServSurvLocationObject."Customer Feature");
            ServiceObject.VALIDATE(Subcontracting, ServSurvLocationObject.Subcontracting);
            ServiceObject.MODIFY(TRUE);

            ServiceSurveyObjectSpec.SETRANGE("Survey No.", ServSurvLocationObject."Survey No.");
            ServiceSurveyObjectSpec.SETRANGE("Location Code", ServSurvLocationObject."Location Code");
            ServiceSurveyObjectSpec.SETRANGE("Seq. No.", ServSurvLocationObject."Seq. No.");
            ServiceSurveyObjectSpec.SETRANGE("Object Level", TRUE);
            IF ServiceSurveyObjectSpec.FINDSET THEN
              REPEAT
                IF ServiceSurveyObjectSpec.Type = ServiceSurveyObjectSpec.Type::Group THEN
                  ObjectSpecificationMgt.FindOrCreateObjectSpecGroup(
                    ServiceObject."No.", ServiceSurveyObjectSpec."Specification Code", DummyObjectSpecificationLine)
                ELSE
                  ObjectSpecificationMgt.SetObjectSpecValue(
                    ServiceObject."No.", ServiceSurveyObjectSpec."Specification Code", ServiceSurveyObjectSpec.Value);
              UNTIL ServiceSurveyObjectSpec.NEXT = 0;

            ServiceSetup.GET;
            IF ServSurvLocationObject."Serial No." <> '' THEN BEGIN
              ServiceSetup.TESTFIELD("Spec. Code Serial No.");
              ObjectSpecificationMgt.SetObjectSpecValue(
                ServiceObject."No.", ServiceSetup."Spec. Code Serial No.", ServSurvLocationObject."Serial No.");
            END;
            IF ServSurvLocationObject."Year of Manufacture" <> 0 THEN BEGIN
              ServiceSetup.TESTFIELD("Spec. Code Year of Manufact.");
              ObjectSpecificationMgt.SetObjectSpecValue(
                ServiceObject."No.", ServiceSetup."Spec. Code Year of Manufact.", FORMAT(ServSurvLocationObject."Year of Manufacture"));
            END;

            IF NoOfObjects = 1 THEN BEGIN
              ServiceSurveyStructureLine.SETRANGE("Survey No.", ServSurvLocationObject."Survey No.");
              ServiceSurveyStructureLine.SETRANGE("Location Code", ServSurvLocationObject."Location Code");
              ServiceSurveyStructureLine.SETRANGE("Object Line", TRUE);
              ServiceSurveyStructureLine.SETRANGE("Seq. No.", ServSurvLocationObject."Seq. No.");
              IF ServiceSurveyStructureLine.FINDSET THEN
                REPEAT
                  ServiceLocStructureLine."Service Location No." := ServiceLocationNo;
                  ServiceLocStructureLine."Structure No." := ServiceSurveyStructureLine."Structure No.";
                  ServiceLocStructureLine."No." := ServiceSurveyStructureLine.Code;
                  ServiceLocStructureLine."Service Object No." := ServiceObject."No.";
                  ServiceLocStructureLine.Description := ServiceSurveyStructureLine.Description;
                  ServiceLocStructureLine."Element Level 1" := ServiceSurveyStructureLine."Element Level 1";
                  ServiceLocStructureLine."Element Level 2" := ServiceSurveyStructureLine."Element Level 2";
                  ServiceLocStructureLine.Level := ServiceSurveyStructureLine.Level;
                  ServiceLocStructureLine."Object Line" := ServiceSurveyStructureLine."Object Line";
                  ServiceLocStructureLine.INSERT(TRUE);
                UNTIL ServiceSurveyStructureLine.NEXT = 0;
            END;

            // Create Contract Object
            ContractObject.INIT;
            ContractObject.SetDoNotCreateMaintenanceLines(TRUE);
            ContractObject.VALIDATE("Service Contract No.", ServiceContract."No.");
            ContractObject.VALIDATE("Service Object No.", ServiceObject."No.");
            ContractObject.INSERT(TRUE);
            ContractObject.CALCFIELDS("Customer No.");
            ContractObject.VALIDATE("Service Package", ServSurvLocationObject."Service Package");
            ContractObject.VALIDATE("Starting Date", ServiceContract."Starting Date");
            ContractObject.VALIDATE("Invoice From", ServiceContract."Starting Date");
            ContractObject.VALIDATE("Customer Object Group", ServSurvLocationObject."Customer Object Group");
            ContractObject.MODIFY(TRUE);

            IF ServSurvLocationObject."Sales Price" <> IServSurvLocationObject."Service Amount" THEN BEGIN
              ContractAmountsbyDate.INIT;
              ContractAmountsbyDate.VALIDATE(Type, ContractAmountsbyDate.Type::"Price Agreement");
              ContractAmountsbyDate.VALIDATE("Service Contract No.", ServiceContract."No.");
              ContractAmountsbyDate.VALIDATE("Service Object No.", ContractObject."Service Object No.");
              ContractAmountsbyDate.VALIDATE("Index Date", ContractObject."Starting Date");
              ContractAmountsbyDate.VALIDATE("Amount (LCY)", ServSurvLocationObject."Sales Price");
              ContractAmountsbyDate.INSERT(TRUE);
            END;

            // Create Contract Object Maintenance
            ServSurvLocObjDetail.SETRANGE("Survey No.", ServSurvLocationObject."Survey No.");
            ServSurvLocObjDetail.SETRANGE("Location Code", ServSurvLocationObject."Location Code");
            ServSurvLocObjDetail.SETRANGE("Seq. No.", ServSurvLocationObject."Seq. No.");
            IF ServSurvLocObjDetail.FINDSET THEN
              REPEAT
                ContractObjectMaintenance.INIT;
                ContractObjectMaintenance.VALIDATE("Service Contract No.", ContractObject."Service Contract No.");
                ContractObjectMaintenance.VALIDATE("Object No.", ContractObject."Service Object No.");
                ContractObjectMaintenance.VALIDATE("Maintenance Scheme", ServSurvLocObjDetail."Maintenance Scheme Code");
                ContractObjectMaintenance.VALIDATE("Starting Date Maintenance", ServiceContract."Starting Date");
                ContractObjectMaintenance.VALIDATE(Subcontracting, ServSurvLocObjDetail.Subcontracting);
                ContractObjectMaintenance.VALIDATE("Maintenance Interval", ServSurvLocObjDetail."Maintenance Interval");
                ContractObjectMaintenance.VALIDATE(Subcontracting, ServSurvLocObjDetail.Subcontracting);
                ContractObjectMaintenance.INSERT(TRUE);

                SurvObjAddActProperty.SETRANGE("Survey No.", ServSurvLocObjDetail."Survey No.");
                SurvObjAddActProperty.SETRANGE("Location Code", ServSurvLocObjDetail."Location Code");
                SurvObjAddActProperty.SETRANGE("Seq. No.", ServSurvLocObjDetail."Seq. No.");
                SurvObjAddActProperty.SETRANGE("Maintenance Scheme Code", ServSurvLocObjDetail."Maintenance Scheme Code");
                SurvObjAddActProperty.SETFILTER("Line Type (Base)", '<%1', SurvObjAddActProperty."Line Type (Base)"::"Survey Object");
                IF SurvObjAddActProperty.FINDSET THEN BEGIN
                  MaintenanceSchemeVersion.INIT;
                  MaintenanceSchemeVersion.VALIDATE("Line Type", MaintenanceSchemeVersion."Line Type"::Object);
                  MaintenanceSchemeVersion.VALIDATE(Code, ContractObject."Service Object No.");
                  MaintenanceSchemeVersion.VALIDATE("Belongs to Scheme", ContractObjectMaintenance."Maintenance Scheme");
                  MaintenanceSchemeVersion.VALIDATE("Index Date", ServiceContract."Starting Date");
                  MaintenanceSchemeVersion.INSERT(TRUE);
                  REPEAT
                    MaintSchemeLineProperty."Line Type" := MaintSchemeLineProperty."Line Type"::Object;
                    MaintSchemeLineProperty."Type Code" := ContractObject."Service Object No.";
                    MaintSchemeLineProperty."Belongs to Scheme" := ContractObjectMaintenance."Maintenance Scheme";
                    MaintSchemeLineProperty."Index Date" := MaintenanceSchemeVersion."Index Date";
                    MaintSchemeLineProperty."Line Type (Base)" := SurvObjAddActProperty."Line Type (Base)";
                    MaintSchemeLineProperty."Type Code (Base)" := SurvObjAddActProperty."Type Code (Base)";
                    MaintSchemeLineProperty."Line No. (Base)" := SurvObjAddActProperty."Line No. (Base)";
                    MaintSchemeLineProperty."Belongs to Scheme (Base)" := SurvObjAddActProperty."Belongs to Scheme (Base)";
                    MaintSchemeLineProperty.Cancelled := SurvObjAddActProperty.Cancelled;
                    MaintSchemeLineProperty."Adjustment Factor Norm" := SurvObjAddActProperty."Adjustment Factor Norm";
                    MaintSchemeLineProperty.INSERT(TRUE);
                  UNTIL SurvObjAddActProperty.NEXT = 0;
                END;

                // Create Additional Activities
                ServSurvObjectAddAct.SETRANGE("Survey No.", ServSurvLocObjDetail."Survey No.");
                ServSurvObjectAddAct.SETRANGE("Location Code", ServSurvLocObjDetail."Location Code");
                ServSurvObjectAddAct.SETRANGE("Seq. No.", ServSurvLocObjDetail."Seq. No.");
                ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", ServSurvLocObjDetail."Maintenance Scheme Code");
                IF ServSurvObjectAddAct.FINDSET THEN BEGIN
                  IF NOT MaintenanceSchemeVersion.GET(
                    MaintenanceSchemeVersion."Line Type"::Object, ContractObject."Service Object No.",
                    ContractObjectMaintenance."Maintenance Scheme", ServiceContract."Starting Date")
                  THEN BEGIN
                    MaintenanceSchemeVersion.INIT;
                    MaintenanceSchemeVersion.VALIDATE("Line Type", MaintenanceSchemeVersion."Line Type"::Object);
                    MaintenanceSchemeVersion.VALIDATE(Code, ContractObject."Service Object No.");
                    MaintenanceSchemeVersion.VALIDATE("Belongs to Scheme", ContractObjectMaintenance."Maintenance Scheme");
                    MaintenanceSchemeVersion.VALIDATE("Index Date", ServiceContract."Starting Date");
                    MaintenanceSchemeVersion.INSERT(TRUE);
                  END;
                  REPEAT
                    MaintSchemeVersionLine.INIT;
                    MaintSchemeVersionLine.VALIDATE("Line Type", MaintSchemeVersionLine."Line Type"::Object);
                    MaintSchemeVersionLine.VALIDATE("Type Code", MaintenanceSchemeVersion.Code);
                    MaintSchemeVersionLine.VALIDATE("Belongs to Scheme", MaintenanceSchemeVersion."Belongs to Scheme");
                    MaintSchemeVersionLine.VALIDATE("Index Date", MaintenanceSchemeVersion."Index Date");
                    MaintSchemeVersionLine."Line No." := ServSurvObjectAddAct."Line No.";
                    MaintSchemeVersionLine.VALIDATE("Cost Type", ServSurvObjectAddAct."Cost Type");
                    MaintSchemeVersionLine.VALIDATE("Cost Object", ServSurvObjectAddAct."Cost Object");
                    MaintSchemeVersionLine.VALIDATE("Cost Component", ServSurvObjectAddAct."Cost Component");
                    MaintSchemeVersionLine.VALIDATE(Description, ServSurvObjectAddAct.Description);
                    MaintSchemeVersionLine.VALIDATE(Quantity, ServSurvObjectAddAct.Quantity);
                    MaintSchemeVersionLine.VALIDATE("Unit of Measure", ServSurvObjectAddAct."Unit of Measure");
                    MaintSchemeVersionLine.VALIDATE("Frequency per Year", ServSurvObjectAddAct."Frequency per Year");
                    IF ServSurvObjectAddAct."Cost Type" = ServSurvObjectAddAct."Cost Type"::Labor THEN BEGIN
                      MaintSchemeVersionLine.VALIDATE(Norm, ServSurvObjectAddAct.Norm);
                      MaintSchemeVersionLine.VALIDATE("Rate Code", ServSurvObjectAddAct."Rate Code");
                      MaintSchemeVersionLine.VALIDATE(Rate, ServSurvObjectAddAct.Rate);
                    END ELSE BEGIN
                      MaintSchemeVersionLine.VALIDATE("Item No.", ServSurvObjectAddAct."Item No.");
                      MaintSchemeVersionLine.VALIDATE(Manufacturer, ServSurvObjectAddAct.Manufacturer);
                      MaintSchemeVersionLine.VALIDATE("Basic Item", ServSurvObjectAddAct."Basic Item");
                      MaintSchemeVersionLine.VALIDATE("Vendor (Trade Item)", ServSurvObjectAddAct."Vendor (Trade Item)");
                      MaintSchemeVersionLine.VALIDATE("Trade Item", ServSurvObjectAddAct."Trade Item");
                      MaintSchemeVersionLine.VALIDATE("Cost Price", ServSurvObjectAddAct."Cost Price");
                      MaintSchemeVersionLine.VALIDATE("Gross Price", ServSurvObjectAddAct."Gross Price");
                      MaintSchemeVersionLine.VALIDATE("Purchase Discount %", ServSurvObjectAddAct."Purchase Discount %");
                    END;
                    MaintSchemeVersionLine.VALIDATE("Maintenance Interval", ServSurvObjectAddAct."Maintenance Interval");
                    MaintSchemeVersionLine.VALIDATE(Vendor, ServSurvObjectAddAct.Vendor);
                    MaintSchemeVersionLine.VALIDATE("Line Status", ServSurvObjectAddAct."Line Status");
                    MaintSchemeVersionLine.VALIDATE("Text Block", ServSurvObjectAddAct."Text Block");
                    MaintSchemeVersionLine.INSERT(TRUE);

                    IF SurvObjAddActProperty.GET(
                      ServSurvObjectAddAct."Survey No.",
                      ServSurvObjectAddAct."Location Code",
                      ServSurvObjectAddAct."Seq. No.",
                      ServSurvObjectAddAct."Maintenance Scheme Code",
                      ServSurvObjectAddAct."Line Type"::"Survey Object",
                      '',
                      ServSurvObjectAddAct."Line No.",
                      '')
                    THEN BEGIN
                      MaintSchemeLineProperty."Line Type" := MaintSchemeLineProperty."Line Type"::Object;
                      MaintSchemeLineProperty."Type Code" := ContractObject."Service Object No.";
                      MaintSchemeLineProperty."Belongs to Scheme" := ContractObjectMaintenance."Maintenance Scheme";
                      MaintSchemeLineProperty."Index Date" := MaintenanceSchemeVersion."Index Date";
                      MaintSchemeLineProperty."Line Type (Base)" := MaintSchemeLineProperty."Line Type (Base)"::Object;
                      MaintSchemeLineProperty."Type Code (Base)" := ContractObject."Service Object No.";
                      MaintSchemeLineProperty."Line No. (Base)" := MaintSchemeVersionLine."Line No.";
                      MaintSchemeLineProperty."Belongs to Scheme (Base)" := ContractObjectMaintenance."Maintenance Scheme";
                      MaintSchemeLineProperty.Cancelled := SurvObjAddActProperty.Cancelled;
                      MaintSchemeLineProperty."Adjustment Factor Norm" := SurvObjAddActProperty."Adjustment Factor Norm";
                      MaintSchemeLineProperty.INSERT(TRUE);
                    END;
                  UNTIL ServSurvObjectAddAct.NEXT = 0;
                END;

                IF NOT SubcontractorService.GET(
                  ServiceContract."No.", '', '', ServiceObject."No.", ContractObjectMaintenance."Maintenance Scheme", '', '',
                  SubcontractorService."Apply To"::Maintenance)
                THEN BEGIN
                  SubcontractorService."Service Contract No." := ServiceContract."No.";
                  SubcontractorService."Object No." := ServiceObject."No.";
                  SubcontractorService."Maintenance Scheme Code" := ContractObjectMaintenance."Maintenance Scheme";
                  SubcontractorService.Subcontractor := ServSurvLocObjDetail."Subcontractor No.";
                  SubcontractorService."Apply To" := SubcontractorService."Apply To"::Maintenance;
                  SubcontractorService.INSERT(TRUE);
                END;
              UNTIL ServSurvLocObjDetail.NEXT = 0;
          END;
          ServSurvLocationObject."Service Contract No." := ServiceContract."No.";
          ServSurvLocationObject."Objects Created" := TRUE;
          ServSurvLocationObject.MODIFY;
        UNTIL ServSurvLocationObject.NEXT = 0;
      END;

      IF GUIALLOWED THEN
        IF IContractNo = '' THEN
          MESSAGE(Text006, Text007, ServiceContract."No.")
        ELSE
          MESSAGE(Text006, Text008, ServiceContract."No.");
    END;

    PROCEDURE GetOrCreateServiceLocation@1100528615(IServSurvLocationObject@1100528600 : Record 11071813) : Code[20];
    VAR
      ServiceSurvey@1100528608 : Record 11071803;
      ServiceSurveyLocation@1100528601 : Record 11071804;
      ServiceLocation@1100528602 : Record 11012801;
      TryoutSuccessor@1100528603 : Record 11012761;
      ServSurveyLocStructure@1100528604 : Record 11071805;
      ServiceSurveyStructureLine@1100528605 : Record 11071806;
      ServiceLocationStructure@1100528606 : Record 11071719;
      ServiceLocStructureLine@1100528607 : Record 11071720;
    BEGIN
      ServiceSurvey.GET(IServSurvLocationObject."Survey No.");
      ServiceSurveyLocation.GET(IServSurvLocationObject."Survey No.", IServSurvLocationObject."Location Code");
      IF ServiceSurveyLocation."Service Location No." = '' THEN BEGIN
         ServiceLocation.INIT;
         ServiceLocation."No." := '';
         ServiceLocation.INSERT(TRUE);
         ServiceLocation.VALIDATE("Customer No.", ServiceSurvey."Customer No.");
         ServiceLocation.VALIDATE(Description, ServiceSurveyLocation.Description);
         ServiceLocation.VALIDATE("Description 2", ServiceSurveyLocation."Description 2");
         ServiceLocation.VALIDATE(Address, ServiceSurveyLocation.Address);
         ServiceLocation.VALIDATE("Address 2", ServiceSurveyLocation."Address 2");
         ServiceLocation."Post Code" := ServiceSurveyLocation."Post Code";
         ServiceLocation.VALIDATE("Country/Region Code", ServiceSurveyLocation."Country/Region Code");
         ServiceLocation.City := ServiceSurveyLocation.City;
         ServiceLocation.EvaluatePostCodeGroup;
         ServiceLocation.VALIDATE("Phone No.", ServiceSurveyLocation."Phone No.");
         ServiceLocation.VALIDATE("Fax No.", ServiceSurveyLocation."Fax No.");
         ServiceLocation.VALIDATE("E-Mail", ServiceSurveyLocation."E-Mail");
         ServiceLocation.VALIDATE("Mobile Phone No.", ServiceSurveyLocation."Mobile Phone No.");
         ServiceLocation.VALIDATE("Customer Feature", ServiceSurveyLocation."Customer Feature");
         ServiceLocation.VALIDATE("Complex Code", ServiceSurveyLocation."Complex Code");
         ServiceLocation.VALIDATE("Global Dimension 1 Code", ServiceSurvey."Global Dimension 1 Code");
         ServiceLocation."Location Structure Format" := ServiceSurveyLocation."Location Structure Format";
         ServiceLocation.MODIFY(TRUE);

         ServSurveyLocStructure.SETRANGE("Survey No.", ServiceSurveyLocation."Survey No.");
         ServSurveyLocStructure.SETRANGE("Location Code", ServiceSurveyLocation."Location Code");
         IF ServSurveyLocStructure.FINDSET THEN
           REPEAT
            ServiceLocationStructure.INIT;
            ServiceLocationStructure."Service Location No." := ServiceLocation."No.";
            ServiceLocationStructure."No." := ServSurveyLocStructure."Structure No.";
            ServiceLocationStructure.Description := ServSurveyLocStructure.Description;
            ServiceLocationStructure."Available for 4PS Mobile" := ServSurveyLocStructure."Available for 4PS Mobile";
            ServiceLocationStructure.INSERT(TRUE);

            ServiceSurveyStructureLine.SETRANGE("Survey No.", ServSurveyLocStructure."Survey No.");
            ServiceSurveyStructureLine.SETRANGE("Location Code", ServSurveyLocStructure."Location Code");
            ServiceSurveyStructureLine.SETRANGE("Structure No.", ServSurveyLocStructure."Structure No.");
            ServiceSurveyStructureLine.SETRANGE("Object Line", FALSE);
            IF ServiceSurveyStructureLine.FINDSET THEN
              REPEAT
                ServiceLocStructureLine."Service Location No." := ServiceLocation."No.";
                ServiceLocStructureLine."Structure No." := ServiceSurveyStructureLine."Structure No.";
                ServiceLocStructureLine."No." := ServiceSurveyStructureLine.Code;
                ServiceLocStructureLine.Description := ServiceSurveyStructureLine."Code Description";
                ServiceLocStructureLine."Element Level 1" := ServiceSurveyStructureLine."Element Level 1";
                ServiceLocStructureLine."Element Level 2" := ServiceSurveyStructureLine."Element Level 2";
                ServiceLocStructureLine.Level := ServiceSurveyStructureLine.Level;
                ServiceLocStructureLine."Object Line" := ServiceSurveyStructureLine."Object Line";
                ServiceLocStructureLine.INSERT(TRUE);
              UNTIL ServiceSurveyStructureLine.NEXT = 0;
          UNTIL ServSurveyLocStructure.NEXT = 0;

         TryoutSuccessor.CopyRelation(5, 2, IServSurvLocationObject."Survey No.", ServiceLocation."No.");

         ServiceSurveyLocation."Service Location No." := ServiceLocation."No.";
         ServiceSurveyLocation."Service Location Created" := TRUE;
         ServiceSurveyLocation.MODIFY(TRUE);
       END;
       EXIT(ServiceSurveyLocation."Service Location No.");
    END;

    PROCEDURE CalcBudgetLines@1100528605(IServSurvLocObjDetail@1100528600 : Record 11071807;IIndexDate@1100525002 : Date;IQuantity@1100528601 : Decimal;ICostObject@1100528610 : Code[20];IDepartmentCode@1100525001 : Code[20];VAR OLabor@1100528602 : Decimal;VAR OHours@1100528603 : Decimal;VAR OMaterial@1100528604 : Decimal;VAR OSubcontracting@1100528605 : Decimal;VAR OPlant@1100528606 : Decimal;VAR OSundry@1100528607 : Decimal;VAR OTotalCost@1100528608 : Decimal);
    VAR
      ServSurvObjectAddAct@1100528609 : Record 11071814;
      ServiceSurvey@1100525004 : Record 11071803;
      BudgetHourRateManagement@1100528612 : Codeunit 11012358;
      BudgetRateFoundAt@1100528614 : Text[250];
      LaborAmount@1100525000 : Decimal;
      CancellationLevel@1100525003 : Option;
    BEGIN
      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");
      ServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocObjDetail."Survey No.");
      ServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocObjDetail."Location Code");
      ServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocObjDetail."Seq. No.");
      ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", IServSurvLocObjDetail."Maintenance Scheme Code");
      IF ICostObject <> '' THEN
        ServSurvObjectAddAct.SETRANGE("Cost Object", ICostObject);
      IF ServSurvObjectAddAct.FINDSET THEN
        REPEAT
          IF NOT ServSurvObjectAddAct.IsCancelled(
            IServSurvLocObjDetail."Survey No.", IServSurvLocObjDetail."Location Code",
            IServSurvLocObjDetail."Seq. No.", IServSurvLocObjDetail."Maintenance Scheme Code",
            ServiceSurvey."Reference Date", CancellationLevel)
          THEN BEGIN
            LaborAmount := 0;
            CASE ServSurvObjectAddAct."Cost Type" OF
              ServSurvObjectAddAct."Cost Type"::Labor:
                BEGIN
                  OHours += ServSurvObjectAddAct."Hours per Service" * IQuantity;
                  LaborAmount += ServSurvObjectAddAct."Hours per Service" * IQuantity *
                    BudgetHourRateManagement.GetBudgetRate(1, '', '', '', IDepartmentCode,
                      ServSurvObjectAddAct."Rate Code", IIndexDate, BudgetRateFoundAt);
                  OLabor += LaborAmount;
                  OTotalCost += LaborAmount;
                END;
              ServSurvObjectAddAct."Cost Type"::Material:
                BEGIN
                  OMaterial += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              ServSurvObjectAddAct."Cost Type"::Subcontracting:
                BEGIN
                  OSubcontracting += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              ServSurvObjectAddAct."Cost Type"::Plant:
                BEGIN
                  OPlant += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              ServSurvObjectAddAct."Cost Type"::Sundry:
                BEGIN
                  OSundry += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
            END;
          END;
        UNTIL ServSurvObjectAddAct.NEXT = 0;
    END;

    PROCEDURE CalcBudgetLines2@1100525003(VAR IServSurvObjectAddAct@1100525005 : TEMPORARY Record 11071814;IServSurvLocObjDetail@1100528600 : Record 11071807;IIndexDate@1100525002 : Date;IQuantity@1100528601 : Decimal;ICostObjectFilter@1100525004 : Code[250];IRateCodeFilter@1100528609 : Code[250];IDepartmentCode@1100525001 : Code[20];VAR OLabor@1100528602 : Decimal;VAR OHours@1100528603 : Decimal;VAR OMaterial@1100528604 : Decimal;VAR OSubcontracting@1100528605 : Decimal;VAR OPlant@1100528606 : Decimal;VAR OSundry@1100528607 : Decimal;VAR OTotalCost@1100528608 : Decimal);
    VAR
      ServiceSurvey@1100528613 : Record 11071803;
      BudgetHourRateManagement@1100528612 : Codeunit 11012358;
      BudgetRateFoundAt@1100528614 : Text[250];
      LaborAmount@1100525000 : Decimal;
      CancellationLevel@1100525003 : Option;
    BEGIN
      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");
      IF ICostObjectFilter <> '' THEN
        IServSurvObjectAddAct.SETFILTER("Cost Object", ICostObjectFilter);
      IF IRateCodeFilter <> '' THEN
        IServSurvObjectAddAct.SETFILTER(IServSurvObjectAddAct."Rate Code", IRateCodeFilter);
      IF IServSurvObjectAddAct.FINDSET THEN
        REPEAT
          IF NOT IServSurvObjectAddAct.IsCancelled(
            IServSurvLocObjDetail."Survey No.", IServSurvLocObjDetail."Location Code",
            IServSurvLocObjDetail."Seq. No.", IServSurvLocObjDetail."Maintenance Scheme Code",
            ServiceSurvey."Reference Date", CancellationLevel)
          THEN BEGIN
            LaborAmount := 0;
            CASE IServSurvObjectAddAct."Cost Type" OF
              IServSurvObjectAddAct."Cost Type"::Labor:
                BEGIN
                  OHours += IServSurvObjectAddAct."Hours per Service" * IQuantity;
                  LaborAmount += IServSurvObjectAddAct."Hours per Service" * IQuantity *
                    BudgetHourRateManagement.GetBudgetRate(1, '', '', '', IDepartmentCode,
                      IServSurvObjectAddAct."Rate Code", IIndexDate, BudgetRateFoundAt);
                  OLabor += LaborAmount;
                  OTotalCost += LaborAmount;
                END;
              IServSurvObjectAddAct."Cost Type"::Material:
                BEGIN
                  OMaterial += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              IServSurvObjectAddAct."Cost Type"::Subcontracting:
                BEGIN
                  OSubcontracting += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              IServSurvObjectAddAct."Cost Type"::Plant:
                BEGIN
                  OPlant += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              IServSurvObjectAddAct."Cost Type"::Sundry:
                BEGIN
                  OSundry += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
            END;
          END;
        UNTIL IServSurvObjectAddAct.NEXT = 0;
    END;

    PROCEDURE CopySurvey@1100528604(ISurvey@1100528600 : Record 11071803;IToSurveyNo@1100528601 : Code[20];IToSurveyDescription@1100528606 : Text[50]);
    VAR
      ServiceSurvey@1100528603 : Record 11071803;
      ServiceSurveyLocation@1100528602 : Record 11071804;
      FromServiceSurveySurcharge@1100528604 : Record 11071808;
      ToServiceSurveySurcharge@1100528605 : Record 11071808;
      FromCommentLine@1100528607 : Record 97;
      ToCommentLine@1100528608 : Record 97;
    BEGIN
      ServiceSurvey := ISurvey;
      ServiceSurvey."No." := IToSurveyNo;
      ServiceSurvey.Description := IToSurveyDescription;
      ServiceSurvey.INSERT;

      ServiceSurveyLocation.SETRANGE("Survey No.", ISurvey."No.");
      IF ServiceSurveyLocation.FINDSET THEN
        REPEAT
          CopySurveyLocation(ServiceSurveyLocation, IToSurveyNo, ServiceSurveyLocation."Location Code");
        UNTIL ServiceSurveyLocation.NEXT = 0;

      FromServiceSurveySurcharge.SETRANGE("Survey No.", ISurvey."No.");
      IF FromServiceSurveySurcharge.FINDSET THEN
        REPEAT
          ToServiceSurveySurcharge := FromServiceSurveySurcharge;
          ToServiceSurveySurcharge."Survey No." := IToSurveyNo;
          ToServiceSurveySurcharge.INSERT;
        UNTIL FromServiceSurveySurcharge.NEXT = 0;

      FromCommentLine.SETRANGE("Table Name", FromCommentLine."Table Name"::"Service Survey");
      FromCommentLine.SETRANGE("No.", ISurvey."No.");
      IF FromCommentLine.FINDSET THEN
        REPEAT
          ToCommentLine := FromCommentLine;
          ToCommentLine."No." := IToSurveyNo;
          ToCommentLine.INSERT;
        UNTIL FromCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySurveyLocation@1100528606(ISurveyLocation@1100528600 : Record 11071804;IToSurveyNo@1100528601 : Code[20];IToSurveyLocationCode@1100528602 : Code[10]);
    VAR
      ServiceSurveyLocation@1100528603 : Record 11071804;
      ServSurvLocationObject@1100528604 : Record 11071813;
      ServSurveyLocStructure@1100528605 : Record 11071805;
    BEGIN
      ServiceSurveyLocation := ISurveyLocation;
      ServiceSurveyLocation."Survey No." := IToSurveyNo;
      ServiceSurveyLocation."Location Code" := IToSurveyLocationCode;
      ServiceSurveyLocation."Service Location Created" := FALSE;
      ServiceSurveyLocation.INSERT;

      ServSurvLocationObject.SETRANGE("Survey No.", ISurveyLocation."Survey No.");
      ServSurvLocationObject.SETRANGE("Location Code", ISurveyLocation."Location Code");
      IF ServSurvLocationObject.FINDSET THEN
        REPEAT
          CopySurveyObject(ServSurvLocationObject, IToSurveyNo, IToSurveyLocationCode, ServSurvLocationObject."Seq. No.");
        UNTIL ServSurvLocationObject.NEXT = 0;

      ServSurveyLocStructure.SETRANGE("Survey No.", IToSurveyNo);
      ServSurveyLocStructure.SETRANGE("Location Code", IToSurveyLocationCode);
      IF ServSurveyLocStructure.FINDSET THEN
        REPEAT
          CopySurveyLocStructure(ServSurveyLocStructure, IToSurveyNo, IToSurveyLocationCode);
        UNTIL ServSurveyLocStructure.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySurveyObject@1100528607(IServSurvLocationObject@1100528600 : Record 11071813;IToSurveyNo@1100528602 : Code[20];IToSurveyLocationCode@1100528601 : Code[10];IToSurveyObjectSeqNo@1100528603 : Integer);
    VAR
      ServSurvLocationObject@1100528604 : Record 11071813;
      ServSurvLocObjDetail@1100528605 : Record 11071807;
    BEGIN
      ServSurvLocationObject := IServSurvLocationObject;
      ServSurvLocationObject."Survey No." := IToSurveyNo;
      ServSurvLocationObject."Location Code" := IToSurveyLocationCode;
      ServSurvLocationObject."Seq. No." := IToSurveyObjectSeqNo;
      ServSurvLocationObject."Objects Created" := FALSE;
      ServSurvLocationObject."Service Contract No." := '';
      ServSurvLocationObject.INSERT;

      ServSurvLocObjDetail.SETRANGE("Survey No.", IServSurvLocationObject."Survey No.");
      ServSurvLocObjDetail.SETRANGE("Location Code", IServSurvLocationObject."Location Code");
      ServSurvLocObjDetail.SETRANGE("Seq. No.", IServSurvLocationObject."Seq. No.");
      IF ServSurvLocObjDetail.FINDSET THEN
        REPEAT
          CopySurveyObjectDetail(ServSurvLocObjDetail, IToSurveyNo, IToSurveyLocationCode, IToSurveyObjectSeqNo)
        UNTIL ServSurvLocObjDetail.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySurveyObjectDetail@1100528608(IServSurvLocObjDetail@1100528600 : Record 11071807;IToSurveyNo@1100528604 : Code[20];IToSurveyLocationCode@1100528603 : Code[10];IToSurveyObjectSeqNo@1100528602 : Integer);
    VAR
      ServSurvLocObjDetail@1100528601 : Record 11071807;
      FromServSurvObjectAddAct@1100528605 : Record 11071814;
      ToServSurvObjectAddAct@1100528606 : Record 11071814;
    BEGIN
      ServSurvLocObjDetail := IServSurvLocObjDetail;
      ServSurvLocObjDetail."Survey No." := IToSurveyNo;
      ServSurvLocObjDetail."Location Code" := IToSurveyLocationCode;
      ServSurvLocObjDetail."Seq. No." := IToSurveyObjectSeqNo;
      ServSurvLocObjDetail.INSERT;

      FromServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocObjDetail."Survey No.");
      FromServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocObjDetail."Location Code");
      FromServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocObjDetail."Seq. No.");
      FromServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", IServSurvLocObjDetail."Maintenance Scheme Code");
      IF FromServSurvObjectAddAct.FINDSET THEN
        REPEAT
          ToServSurvObjectAddAct := FromServSurvObjectAddAct;
          ToServSurvObjectAddAct."Survey No." := IToSurveyNo;
          ToServSurvObjectAddAct."Location Code" := IToSurveyLocationCode;
          ToServSurvObjectAddAct."Seq. No." := IToSurveyObjectSeqNo;
          ToServSurvObjectAddAct.INSERT;
        UNTIL FromServSurvObjectAddAct.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySurveyLocStructure@1100528617(IServSurveyLocStructure@1100528602 : Record 11071805;IToSurveyNo@1100528601 : Code[20];IToSurveyLocationCode@1100528600 : Code[10]);
    VAR
      ServSurveyLocStructure@1100528603 : Record 11071805;
      FromServiceSurveyStructureLine@1100528604 : Record 11071806;
      ToServiceSurveyStructureLine@1100528605 : Record 11071806;
    BEGIN
      ServSurveyLocStructure := IServSurveyLocStructure;
      ServSurveyLocStructure."Survey No." := IToSurveyNo;
      ServSurveyLocStructure."Location Code" := IToSurveyLocationCode;
      ServSurveyLocStructure.INSERT;

      FromServiceSurveyStructureLine.SETRANGE("Survey No.", IServSurveyLocStructure."Survey No.");
      FromServiceSurveyStructureLine.SETRANGE("Location Code", IServSurveyLocStructure."Location Code");
      FromServiceSurveyStructureLine.SETRANGE("Structure No.", IServSurveyLocStructure."Structure No.");
      IF FromServiceSurveyStructureLine.FINDSET THEN
        REPEAT
          ToServiceSurveyStructureLine := FromServiceSurveyStructureLine;
          ToServiceSurveyStructureLine."Survey No." := IToSurveyNo;
          ToServiceSurveyStructureLine."Location Code" := IToSurveyLocationCode;
          ToServiceSurveyStructureLine.INSERT;
        UNTIL FromServiceSurveyStructureLine.NEXT = 0;
    END;

    PROCEDURE CreateSurveyLocFromRelation@1100409000(ISurveyNo@1100409000 : Code[20]);
    VAR
      ServiceSurveyLocation@1100409001 : Record 11071804;
      ServiceSurvey@1100409003 : Record 11071803;
      Contact@1100409002 : Record 5050;
      ContactNo@1100409004 : Code[20];
    BEGIN
      IF NOT ServiceSurvey.GET(ISurveyNo) THEN
        EXIT;
      IF ServiceSurvey."Contact No. (Person)" <> '' THEN
        ContactNo := ServiceSurvey."Contact No. (Person)"
      ELSE
        ContactNo := ServiceSurvey."Contact No. (Company)";
      IF ContactNo = '' THEN
        EXIT;
      IF NOT Contact.GET(ContactNo) THEN
        EXIT;
      ServiceSurveyLocation."Survey No." := ISurveyNo;
      ServiceSurveyLocation."Location Code" := ServiceSurveyLocation.GetNextLocationCode;
      ServiceSurveyLocation.Description := '';
      ServiceSurveyLocation.VALIDATE(Address, Contact.Address);
      ServiceSurveyLocation.VALIDATE("Address 2", Contact."Address 2");
      ServiceSurveyLocation.VALIDATE("Post Code", Contact."Post Code");
      ServiceSurveyLocation.VALIDATE("Country/Region Code", Contact."Country/Region Code");
      ServiceSurveyLocation.VALIDATE(City, Contact.City);
      ServiceSurveyLocation.VALIDATE("Phone No.", Contact."Phone No.");
      ServiceSurveyLocation.VALIDATE("Fax No.", Contact."Fax No.");
      ServiceSurveyLocation.VALIDATE("E-Mail", Contact."E-Mail");
      ServiceSurveyLocation.VALIDATE("Mobile Phone No.", Contact."Mobile Phone No.");
      ServiceSurveyLocation.INSERT(TRUE);
    END;

    PROCEDURE GetTempSurveyWorkList@1100525000(IServSurvLocObjDetail@1100525002 : Record 11071807;IInclAdditionalActivities@1100525010 : Boolean;INormInclAdjustmentFactor@1100528601 : Boolean;VAR OTmpServSurvObjectAddAct@1100525000 : TEMPORARY Record 11071814);
    VAR
      TmpMaintSchemeVersionLine@1100525001 : TEMPORARY Record 11071744;
      TmpServSurvObjectAddAct@1100525007 : TEMPORARY Record 11071814;
      ServSurvObjectAddAct@1100525009 : Record 11071814;
      ServiceSurvey@1100525003 : Record 11071803;
      MaintenanceManagement@1100525004 : Codeunit 11012829;
      BudgetRateManagement@1100525008 : Codeunit 11012358;
      LineCounter@1100528600 : Integer;
      LineType@1100525006 : 'Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object';
      BudgetRateFoundAt@1100525005 : Text[250];
      AdjustmentFactorNormLevel@1100528602 : Option;
    BEGIN
      TmpServSurvObjectAddAct.COPY(OTmpServSurvObjectAddAct, TRUE);
      IServSurvLocObjDetail.CALCFIELDS("Standard Object No.");
      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");
      MaintenanceManagement.GetTempWorklist(TmpMaintSchemeVersionLine, LineType::"Standard Object",
        IServSurvLocObjDetail."Standard Object No.", IServSurvLocObjDetail."Maintenance Scheme Code",
        '', ServiceSurvey."Reference Date", '',
        LineType::"Standard Object", IServSurvLocObjDetail."Standard Object No.", IServSurvLocObjDetail."Maintenance Scheme Code",
        ServiceSurvey."Reference Date", TRUE, FALSE);

      OTmpServSurvObjectAddAct.RESET;
      OTmpServSurvObjectAddAct.DELETEALL;

      LineCounter := 10000;
      IF TmpMaintSchemeVersionLine.FINDSET THEN
        REPEAT
          OTmpServSurvObjectAddAct."Survey No." := IServSurvLocObjDetail."Survey No.";
          OTmpServSurvObjectAddAct."Location Code" := IServSurvLocObjDetail."Location Code";
          OTmpServSurvObjectAddAct."Seq. No." := IServSurvLocObjDetail."Seq. No.";
          OTmpServSurvObjectAddAct."Maintenance Scheme Code" := IServSurvLocObjDetail."Maintenance Scheme Code";
          OTmpServSurvObjectAddAct."Line No." := LineCounter;
          OTmpServSurvObjectAddAct."Line Type" := TmpMaintSchemeVersionLine."Line Type";
          OTmpServSurvObjectAddAct."Type Code" := TmpMaintSchemeVersionLine."Type Code";
          OTmpServSurvObjectAddAct."Belongs to Scheme" := TmpMaintSchemeVersionLine."Belongs to Scheme";
          OTmpServSurvObjectAddAct."Original Line No." := TmpMaintSchemeVersionLine."Line No.";
          OTmpServSurvObjectAddAct."Original Index Date" := TmpMaintSchemeVersionLine."Index Date";
          OTmpServSurvObjectAddAct.Description := TmpMaintSchemeVersionLine.Description;
          OTmpServSurvObjectAddAct.Quantity := TmpMaintSchemeVersionLine.Quantity;
          OTmpServSurvObjectAddAct."Unit of Measure" := TmpMaintSchemeVersionLine."Unit of Measure";
          IF OTmpServSurvObjectAddAct."Cost Type" = OTmpServSurvObjectAddAct."Cost Type"::Labor THEN
            OTmpServSurvObjectAddAct.Norm :=
              TmpMaintSchemeVersionLine.Norm *
                OTmpServSurvObjectAddAct.GetAdjustmentFactorNorm(
                  IServSurvLocObjDetail."Survey No.",
                  IServSurvLocObjDetail."Location Code",
                  IServSurvLocObjDetail."Seq. No.",
                  IServSurvLocObjDetail."Maintenance Scheme Code",
                  TmpMaintSchemeVersionLine."Index Date",
                  AdjustmentFactorNormLevel);
          OTmpServSurvObjectAddAct."Rate Code" := TmpMaintSchemeVersionLine."Rate Code";
          IF (OTmpServSurvObjectAddAct."Rate Code" <> '') AND
             (TmpMaintSchemeVersionLine."Cost Type" = TmpMaintSchemeVersionLine."Cost Type"::Labor)
          THEN
            OTmpServSurvObjectAddAct.Rate :=
              BudgetRateManagement.GetBudgetRate(1, '', '', '', ServiceSurvey."Global Dimension 1 Code",
                OTmpServSurvObjectAddAct."Rate Code", ServiceSurvey."Reference Date", BudgetRateFoundAt);
          OTmpServSurvObjectAddAct."Cost Price" := TmpMaintSchemeVersionLine."Cost Price";
          OTmpServSurvObjectAddAct."Gross Price" := TmpMaintSchemeVersionLine."Gross Price";
          OTmpServSurvObjectAddAct."Purchase Discount %" := TmpMaintSchemeVersionLine."Purchase Discount %";
          IF TmpMaintSchemeVersionLine."Cost Type" <> TmpMaintSchemeVersionLine."Cost Type"::Labor THEN
            OTmpServSurvObjectAddAct."Cost Amount" := TmpMaintSchemeVersionLine."Cost Amount"
          ELSE
            OTmpServSurvObjectAddAct."Cost Amount" := OTmpServSurvObjectAddAct.Rate * OTmpServSurvObjectAddAct.Quantity;
          OTmpServSurvObjectAddAct.Hours := TmpMaintSchemeVersionLine.Hours;
          OTmpServSurvObjectAddAct."Cost Type" := TmpMaintSchemeVersionLine."Cost Type";
          OTmpServSurvObjectAddAct."Cost Object" := TmpMaintSchemeVersionLine."Cost Object";
          OTmpServSurvObjectAddAct."Cost Component" := TmpMaintSchemeVersionLine."Cost Component";
          OTmpServSurvObjectAddAct."Item No." := TmpMaintSchemeVersionLine."Item No.";
          OTmpServSurvObjectAddAct."Basic Item" := TmpMaintSchemeVersionLine."Basic Item";
          OTmpServSurvObjectAddAct.Manufacturer := TmpMaintSchemeVersionLine.Manufacturer;
          OTmpServSurvObjectAddAct."Trade Item" := TmpMaintSchemeVersionLine."Trade Item";
          OTmpServSurvObjectAddAct."Vendor (Trade Item)" := TmpMaintSchemeVersionLine."Vendor (Trade Item)";
          OTmpServSurvObjectAddAct.Vendor := TmpMaintSchemeVersionLine.Vendor;
          OTmpServSurvObjectAddAct."Line Status" := TmpMaintSchemeVersionLine."Line Status";
          OTmpServSurvObjectAddAct.CalcTotals;
          IF NOT INormInclAdjustmentFactor THEN
            OTmpServSurvObjectAddAct.Norm := TmpMaintSchemeVersionLine.Norm;
          OTmpServSurvObjectAddAct.INSERT;
          LineCounter += 10000;
        UNTIL TmpMaintSchemeVersionLine.NEXT = 0;

      IF IInclAdditionalActivities THEN BEGIN
        ServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocObjDetail."Survey No.");
        ServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocObjDetail."Location Code");
        ServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocObjDetail."Seq. No.");
        ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", IServSurvLocObjDetail."Maintenance Scheme Code");
        IF ServSurvObjectAddAct.FINDSET THEN
          REPEAT
            OTmpServSurvObjectAddAct := ServSurvObjectAddAct;
            OTmpServSurvObjectAddAct."Line Type" := OTmpServSurvObjectAddAct."Line Type"::"Survey Object";
            OTmpServSurvObjectAddAct."Type Code" := '';
            OTmpServSurvObjectAddAct."Line No." := LineCounter;
            OTmpServSurvObjectAddAct."Original Line No." := ServSurvObjectAddAct."Line No.";
            OTmpServSurvObjectAddAct.Norm *=
              OTmpServSurvObjectAddAct.GetAdjustmentFactorNorm(
                IServSurvLocObjDetail."Survey No.",
                IServSurvLocObjDetail."Location Code",
                IServSurvLocObjDetail."Seq. No.",
                IServSurvLocObjDetail."Maintenance Scheme Code",
                0D,
                AdjustmentFactorNormLevel);
            OTmpServSurvObjectAddAct.CalcTotals;
            IF NOT INormInclAdjustmentFactor THEN
              OTmpServSurvObjectAddAct.Norm := ServSurvObjectAddAct.Norm;
            OTmpServSurvObjectAddAct.INSERT;
            LineCounter += 10000;
          UNTIL ServSurvObjectAddAct.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateCorrectionFactorByOfferedAmount@1100528616(ISurveyNo@1100528600 : Code[20]);
    VAR
      ServiceSurvey@1100528603 : Record 11071803;
      ServSurvLocationObject@1100528601 : Record 11071813;
      FixedAmount@1100528602 : Decimal;
      AmountToDivide@1100528604 : Decimal;
      AddedCorrectionFactor@1100528605 : Decimal;
    BEGIN
      ServiceSurvey.GET(ISurveyNo);
      ServiceSurvey.TESTFIELD("Offered Amount");

      ServSurvLocationObject.SETRANGE("Survey No.", ISurveyNo);
      ServSurvLocationObject.SETRANGE("Include in Contract", TRUE);
      ServSurvLocationObject.SETRANGE("Objects Created", TRUE);
      ServSurvLocationObject.CALCSUMS("Sales Amount");
      FixedAmount := ServSurvLocationObject."Sales Amount";

      AmountToDivide := ServiceSurvey."Offered Amount" - FixedAmount;
      ServSurvLocationObject.SETRANGE("Objects Created", FALSE);
      ServSurvLocationObject.CALCSUMS("Sales Amount");

      IF ServSurvLocationObject."Sales Amount" <> 0 THEN
        AddedCorrectionFactor := AmountToDivide / ServSurvLocationObject."Sales Amount"
      ELSE
        AddedCorrectionFactor := 1;

      IF ServSurvLocationObject.FINDSET(TRUE) THEN BEGIN
        REPEAT
          ServSurvLocationObject.VALIDATE("Correction Factor", ServSurvLocationObject."Correction Factor" * AddedCorrectionFactor);
          ServSurvLocationObject.MODIFY(TRUE);
        UNTIL ServSurvLocationObject.NEXT = 0;
        MESSAGE(Text005, ServiceSurvey.FIELDCAPTION("Offered Amount"));
      END ELSE
        ERROR(Text001);
    END;

    PROCEDURE "---"@1100528610();
    BEGIN
    END;

    LOCAL PROCEDURE CopyTmpSpecificationLines@1100528612(ISurveyNo@1100528603 : Code[20];ILocationCode@1100528607 : Code[10];ISeqNo@1100528605 : Integer;ISpecificationType@1100528604 : 'Standard Object,Survey Object';VAR OTmpServiceSurveyObjectSpec@1100528600 : TEMPORARY Record 11071972);
    VAR
      ObjectSpecificationLine@1100528606 : Record 11071781;
      ServiceSurveyObjectSpec@1100528601 : Record 11071972;
      ServSurvLocationObject@1100528608 : Record 11071813;
      LineNo@1100528609 : Integer;
    BEGIN
      ServSurvLocationObject.GET(ISurveyNo, ILocationCode, ISeqNo);
      IF OTmpServiceSurveyObjectSpec.FINDLAST THEN
        LineNo := OTmpServiceSurveyObjectSpec."Line No.";
      CASE ISpecificationType OF
        ISpecificationType::"Standard Object":
          BEGIN
            ObjectSpecificationLine.SETRANGE("Specification Type", ObjectSpecificationLine."Specification Type"::"Standard Object");
            ObjectSpecificationLine.SETRANGE(Code, ServSurvLocationObject."Standard Object No.");
            ObjectSpecificationLine.SETRANGE("Object Level", FALSE);

            IF ObjectSpecificationLine.FINDSET THEN
              REPEAT
                ObjectSpecificationLine.CALCFIELDS("Visible for Field Service", "Editable by Field Service", "Publish on Service Portal");
                IF NOT TmpSpecificationLineExists(ObjectSpecificationLine, OTmpServiceSurveyObjectSpec) THEN BEGIN
                  OTmpServiceSurveyObjectSpec.INIT;
                  OTmpServiceSurveyObjectSpec."Survey No." := ISurveyNo;
                  OTmpServiceSurveyObjectSpec."Location Code" := ILocationCode;
                  OTmpServiceSurveyObjectSpec."Seq. No." := ISeqNo;
                  LineNo += 10000;
                  OTmpServiceSurveyObjectSpec."Line No." := LineNo;
                  OTmpServiceSurveyObjectSpec.Type := ObjectSpecificationLine.Type;
                  OTmpServiceSurveyObjectSpec."Specification Code" := ObjectSpecificationLine."Specification Code";
                  OTmpServiceSurveyObjectSpec.Description := ObjectSpecificationLine.Description;
                  OTmpServiceSurveyObjectSpec."Field Type" := ObjectSpecificationLine."Field Type";
                  OTmpServiceSurveyObjectSpec."Unit Of Measure" := ObjectSpecificationLine."Unit Of Measure";
                  OTmpServiceSurveyObjectSpec.Value := ObjectSpecificationLine.Value;
                  OTmpServiceSurveyObjectSpec."Editable by Field Service" := ObjectSpecificationLine."Editable by Field Service";
                  OTmpServiceSurveyObjectSpec."Publish on Service Portal" := ObjectSpecificationLine."Publish on Service Portal";
                  OTmpServiceSurveyObjectSpec.BORG := ObjectSpecificationLine.BORG;
                  IF OTmpServiceSurveyObjectSpec.Type = OTmpServiceSurveyObjectSpec.Type::Line THEN
                    OTmpServiceSurveyObjectSpec."Specification Group Code" := ObjectSpecificationLine.GetObjSpecificationGroupCode()
                  ELSE
                    OTmpServiceSurveyObjectSpec."Specification Group Code" := ObjectSpecificationLine."Specification Code";
                  OTmpServiceSurveyObjectSpec.INSERT;
                END;
              UNTIL ObjectSpecificationLine.NEXT = 0;
          END;
        ISpecificationType::"Survey Object":
          BEGIN
            ServiceSurveyObjectSpec.SETRANGE("Survey No.", ISurveyNo);
            ServiceSurveyObjectSpec.SETRANGE("Location Code", ILocationCode);
            ServiceSurveyObjectSpec.SETRANGE("Seq. No.", ISeqNo);
            IF ServiceSurveyObjectSpec.FINDSET THEN
              REPEAT
                IF NOT TmpSurveySpecificationLineExists(ServiceSurveyObjectSpec, OTmpServiceSurveyObjectSpec) THEN BEGIN
                  OTmpServiceSurveyObjectSpec := ServiceSurveyObjectSpec;
                  LineNo += 10000;
                  OTmpServiceSurveyObjectSpec."Line No." := LineNo;
                  IF OTmpServiceSurveyObjectSpec.Type = OTmpServiceSurveyObjectSpec.Type::Line THEN
                    OTmpServiceSurveyObjectSpec."Specification Group Code" := ServiceSurveyObjectSpec.GetObjSpecificationGroupCode()
                  ELSE
                    OTmpServiceSurveyObjectSpec."Specification Group Code" := ServiceSurveyObjectSpec."Specification Code";
                  OTmpServiceSurveyObjectSpec.INSERT;
                END;
              UNTIL ServiceSurveyObjectSpec.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE CollectTmpSpecLines@1100528611(ISurveyNo@1100528600 : Code[20];ILocationCode@1100528605 : Code[10];ISeqNo@1100528603 : Integer;VAR OTmpServiceSurveyObjectSpec@1100528604 : TEMPORARY Record 11071972);
    VAR
      TmpServiceSurveyObjectSpec@1100528602 : TEMPORARY Record 11071972;
      ServSurvLocationObject@1100528601 : Record 11071813;
    BEGIN
      TmpServiceSurveyObjectSpec.COPY(OTmpServiceSurveyObjectSpec, TRUE);
      OTmpServiceSurveyObjectSpec.RESET;
      OTmpServiceSurveyObjectSpec.DELETEALL;

      ServSurvLocationObject.GET(ISurveyNo, ILocationCode, ISeqNo);

      CopyTmpSpecificationLines(ISurveyNo, ILocationCode, ISeqNo, 0, OTmpServiceSurveyObjectSpec);
      CopyTmpSpecificationLines(ISurveyNo, ILocationCode, ISeqNo, 1, OTmpServiceSurveyObjectSpec);

      OTmpServiceSurveyObjectSpec.RESET;
      OTmpServiceSurveyObjectSpec.SETCURRENTKEY("Survey No.", "Location Code", "Seq. No.", "Specification Group Code");
    END;

    LOCAL PROCEDURE TmpSpecificationLineExists@1100528618(IObjectSpecificationLine@1100528600 : Record 11071781;VAR ITmpServiceSurveyObjectSpec@1100528601 : TEMPORARY Record 11071972) : Boolean;
    BEGIN
      ITmpServiceSurveyObjectSpec.RESET;
      ITmpServiceSurveyObjectSpec.SETRANGE(Type, IObjectSpecificationLine.Type);
      ITmpServiceSurveyObjectSpec.SETRANGE("Specification Code", IObjectSpecificationLine."Specification Code");
      EXIT(NOT ITmpServiceSurveyObjectSpec.ISEMPTY);
    END;

    LOCAL PROCEDURE TmpSurveySpecificationLineExists@1100528613(IServiceSurveyObjectSpec@1100528600 : Record 11071972;VAR ITmpServiceSurveyObjectSpec@1100528601 : TEMPORARY Record 11071972) : Boolean;
    BEGIN
      ITmpServiceSurveyObjectSpec.RESET;
      ITmpServiceSurveyObjectSpec.SETRANGE(Type, IServiceSurveyObjectSpec.Type);
      ITmpServiceSurveyObjectSpec.SETRANGE("Specification Code", IServiceSurveyObjectSpec."Specification Code");
      EXIT(NOT ITmpServiceSurveyObjectSpec.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

