OBJECT Codeunit 11012860 Lab Order Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11012823;
    OnRun=VAR
            ModifyRecord@1100525000 : Boolean;
          BEGIN
            IF "Lab. Results Retrieval Date" = 0DT THEN BEGIN
              GetLabOrderResults(Rec);
              ModifyRecord := TRUE;
            END;

            IF "Get Lab Certificate" THEN
              IF "Lab. Certif. Retrieval Date" = 0DT THEN BEGIN
                GetLabCertificate(Rec);
                ModifyRecord := TRUE;
              END;

            IF ModifyRecord THEN
              MODIFY(TRUE);

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      Text024@1100409009 : TextConst 'ENU=Do you want to create a lab order for %1 %2?';
      Text025@1100409008 : TextConst 'ENU=A value for "%1" could not be retrieved from the lab order results.';
      Text026@1100409007 : TextConst 'ENU=Getting lab order results for %1 %2...';
      Text027@1100409006 : TextConst 'ENU=Certificate %1 %2.pdf';
      Text029@1100409005 : TextConst 'ENU=Value "%1" for analysis "%2" (%3) of';
      Text030@1100409004 : TextConst 'ENU=sample %1 led to conclusion %2 (%3).';
      Text032@1100409003 : TextConst 'ENU=Customer: %1, Location: %2, Consultant: %3';
      Text033@1100409002 : TextConst 'ENU=%1, %2';
      Text034@1100409001 : TextConst 'ENU=Automatically generated %1';
      Text035@1100409000 : TextConst 'ENU=Analysis Report';

    PROCEDURE CreateLabOrder@1100525026(iServiceOrder@1100409000 : Record 11012823;AskConfirmation@1100525000 : Boolean);
    VAR
      ServiceOrder@1100525003 : Record 11012823;
      LabOrderSetup@1100525002 : Record 11071953;
      LabOrderWebservice@1100525001 : Codeunit 11012830;
    BEGIN
      ServiceOrder.COPY(iServiceOrder);

      LabOrderSetup.GET;
      LabOrderSetup.TESTFIELD("Lab Customer No.");

      ServiceOrder.TESTFIELD("Laboratory Order Creation Date", 0DT);
      ServiceOrder.TESTFIELD("Lab. Results Retrieval Date", 0DT);
      ServiceOrder.TESTFIELD("Lab. Certif. Retrieval Date", 0DT);
      ServiceOrder.TESTFIELD("Employee No.");

      {FIXME
      ServiceInspectionList.RESET;
      ServiceInspectionList.SETCURRENTKEY("Service Order No.", "Sample No.", "Feature Group");
      ServiceInspectionList.SETRANGE("Service Order No.", ServiceOrder."No.");
      ServiceInspectionList.SETFILTER(Feature, '<>%1', '');
      if (ServiceInspectionList.isempty) then
        exit;
      }

      IF AskConfirmation THEN
        IF NOT CONFIRM(Text024, TRUE, ServiceOrder.TABLECAPTION, ServiceOrder."No.") THEN
          EXIT;

      ServiceOrder.CALCFIELDS("Customer Name", "Service Location Description", "Employee Name");

      LabOrderWebservice.PrepareNewOrder(
        ServiceOrder."No.",
        LabOrderSetup."Lab Customer No.",
        ServiceOrder."Employee Name",
        ServiceOrder."No.",
        STRSUBSTNO(Text032, ServiceOrder."Customer Name", ServiceOrder."Service Location Description",
          ServiceOrder."Employee Name"),
        ServiceOrder."No.",
        ServiceOrder.Description,
        ServiceOrder."Starting Date",
        FORMAT(ServiceOrder.Priority));

      {FIXME
      ServiceInspectionList.RESET;
      ServiceInspectionList.SETCURRENTKEY("Service Order No.", "Sample No.", "Feature Group");
      ServiceInspectionList.SETRANGE("Service Order No.", ServiceOrder."No.");
      ServiceInspectionList.SETFILTER(Part, '<>%1', ''); // jhoek.290910
      ServiceInspectionList.FINDSET;

      REPEAT
        ServiceInspectionList.CALCFIELDS("Part Description", "Installation Room");

        LabOrderWebservice.AppendSample(
          ServiceInspectionList.Part,
          STRSUBSTNO(Text033, ServiceInspectionList."Part Description", ServiceInspectionList."Installation Room"),
          ServiceInspectionList."Sample Description", ServiceInspectionList.Feature);

        ServiceInspectionList.SETRANGE(Part, ServiceInspectionList.Part);

        REPEAT
          ServiceInspectionList.TESTFIELD("Feature Group");
          LabOrderWebservice.AppendAnalysis(ServiceInspectionList."Feature Group");
          ServiceInspectionList.SETRANGE("Feature Group", ServiceInspectionList."Feature Group");
          ServiceInspectionList.FINDLAST;
          ServiceInspectionList.SETRANGE("Feature Group");
        UNTIL ServiceInspectionList.NEXT = 0;

        ServiceInspectionList.SETRANGE(Part);
      UNTIL ServiceInspectionList.NEXT = 0;
          }
      IF LabOrderWebservice.SubmitNewOrder(FALSE) THEN
        ServiceOrder."Laboratory Order Creation Date" := CURRENTDATETIME;

      ServiceOrder.MODIFY(TRUE);
    END;

    PROCEDURE GetLabOrderResults@1100525027(VAR ServiceOrder@1100409000 : Record 11012823);
    VAR
      ServiceCall@1100525010 : Record 11012822;
      ServiceText@1100525011 : Record 11012882;
      LabOrderWebservice@1100525000 : Codeunit 11012830;
      Window@1100525007 : Dialog;
      LabOrderResultsDocument@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      LabOrderResults@1100525006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      LabOrderResult@1100525002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      NumLabOrderResults@1100525004 : Integer;
      i@1100525003 : Integer;
      NextLineNo@1100525012 : Integer;
    BEGIN
      Window.OPEN(STRSUBSTNO(Text026, ServiceOrder.TABLECAPTION, ServiceOrder."No."));

      ServiceOrder.TESTFIELD("Lab. Results Retrieval Date", 0DT);
      LabOrderWebservice.GetOrderResults(ServiceOrder."No.", LabOrderResultsDocument);
      LabOrderResults := LabOrderResultsDocument.documentElement.selectNodes('qorderresults');
      NumLabOrderResults := LabOrderResults.length;

      IF NumLabOrderResults = 0 THEN
        EXIT;

      // Delete previous results, if any
      {FIXME
      ServiceInspectionList.SETCURRENTKEY("Service Order No.");
      ServiceInspectionList.SETRANGE("Service Order No.", ServiceOrder."No.");
      ServiceInspectionList.SETRANGE(Installation, '');
      ServiceInspectionList.DELETEALL;
      ServiceInspectionList.RESET;

      FOR i := 0 TO NumLabOrderResults - 1 DO BEGIN
        LabOrderResult := LabOrderResults.item(i);

        ServiceInspectionList.INIT;
        ServiceInspectionList."Service Location No." := '';
        ServiceInspectionList.Installation := '';
        ServiceInspectionList."Part Group" := '';
        ServiceInspectionList.Part := '';
        ServiceInspectionList."Part Line" := 0;
        ServiceInspectionList."Recipe Group" := '';
        ServiceInspectionList.Recipe := '';
        ServiceInspectionList."Recipe Line" := 0;
        ServiceInspectionList."Maintenance Scheme" := '';
        ServiceInspectionList."Scheme Line" := 0;
        ServiceInspectionList."Feature Group" := TextValueFromLabOrderResult(LabOrderResult, 'ana_code');
        ServiceInspectionList.Feature := TextValueFromLabOrderResult(LabOrderResult, 'par_pk');
        ServiceInspectionList."Service Order No." := ServiceOrder."No.";
        ServiceInspectionList."Sample No." := TextValueFromLabOrderResult(LabOrderResult, 'sam_number');

        ServiceInspectionList."Sample Description" := TextValueFromLabOrderResult(LabOrderResult, 'sam_oms');
        ServiceInspectionList."Date Received" := DateValueFromLabOrderResult(LabOrderResult, 'sam_arrival');
        ServiceInspectionList."Date Analyzed" := DateValueFromLabOrderResult(LabOrderResult, 'sam_report');
        ServiceInspectionList."Feature Type" := ServiceInspectionList."Feature Type"::Text;
        ServiceInspectionList."Lab Order ID" := TextValueFromLabOrderResult(LabOrderResult, 'sdg_id');
        ServiceInspectionList.VALIDATE("Lab Order Conclusion Code",
          TextValueFromLabOrderResult(LabOrderResult, 'res_portal_conclusion'));
        ServiceInspectionList.Text :=
          TextValueFromLabOrderResult(LabOrderResult, 'res_sign') +
          TextValueFromLabOrderResult(LabOrderResult, 'res_result');
        ServiceInspectionList.INSERT;
        Window.UPDATE;
      END;
      }
      ServiceOrder."Lab. Results Retrieval Date" := CURRENTDATETIME;
      ServiceOrder.MODIFY(TRUE);

      // Create service call (if necessary)
      {FIXME
      ServiceInspectionList.SETCURRENTKEY("Service Order No.", "Create Service Call");
      ServiceInspectionList.SETRANGE("Service Order No.", ServiceOrder."No.");
      ServiceInspectionList.SETRANGE("Create Service Call", TRUE);

      IF ServiceInspectionList.FINDSET THEN BEGIN
        ServiceCall.INSERT(TRUE);
        ServiceCall.VALIDATE("Service Location No.", ServiceOrder."Service Location No.");
        ServiceCall.Description := STRSUBSTNO(Text034, ServiceCall.TABLECAPTION);
        ServiceCall.MODIFY(TRUE);

        NextLineNo := 10000;

        REPEAT
          ServiceInspectionList.CALCFIELDS("Feature Description", "Lab Order Conclusion Desc.");

          ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
          ServiceText."No." := ServiceCall."No.";
          ServiceText."Table Field" := ServiceCall.FIELDNO("Problem Text");
          ServiceText."Line No." := NextLineNo;
          ServiceText.Date := TODAY;
          ServiceText.Comment :=
            STRSUBSTNO(
              Text029,
              ServiceInspectionList.Text,
              ServiceInspectionList.Feature,
              ServiceInspectionList."Feature Description");
          ServiceText.INSERT(TRUE);

          NextLineNo := NextLineNo + 10000;

          ServiceText."Line No." := NextLineNo;
          ServiceText.Comment :=
            STRSUBSTNO(
              Text030,
              ServiceInspectionList."Sample No.",
              ServiceInspectionList."Lab Order Conclusion Code",
              ServiceInspectionList."Lab Order Conclusion Desc.");
          ServiceText.INSERT(TRUE);

          NextLineNo := NextLineNo + 10000;
        UNTIL ServiceInspectionList.NEXT = 0;

        ServiceOrder."Laboratory Service Call No." := ServiceCall."No.";
        ServiceOrder.MODIFY(TRUE);
      END;
       }
      Window.CLOSE;
    END;

    PROCEDURE GetLabCertificate@1100525028(VAR ServiceOrder@1100409000 : Record 11012823);
    VAR
      DocumentProperties@1100525003 : Record 11012746;
      ServiceLocation@1100525010 : Record 11012801;
      MarketingSetup@1100525001 : Record 5079;
      LabOrderWebservice@1100525000 : Codeunit 11012830;
      DocumentLinkMgt@1100525005 : Codeunit 11012401;
      CertificateFileName@1100525006 : Text[260];
      CertificateFullPath@1100525002 : Text[260];
      RecRef@1100525008 : RecordRef;
      DocLinkRID@1100525007 : ARRAY [5] OF RecordID;
    BEGIN
      ServiceOrder.TESTFIELD("Lab. Certif. Retrieval Date", 0DT);

      MarketingSetup.GET;
      MarketingSetup.TESTFIELD("Default Ext. Doc. Directory");

      CertificateFileName := STRSUBSTNO(Text027, ServiceOrder.TABLECAPTION, ServiceOrder."No.");
      CertificateFullPath := STRSUBSTNO('%1\%2', DELCHR(MarketingSetup."Default Ext. Doc. Directory", '>', '\'),
        CertificateFileName);

      LabOrderWebservice.GetCertificate(ServiceOrder."No.", CertificateFullPath);

      DocumentProperties.INSERT(TRUE);
      DocumentProperties.Description := Text035;
      DocumentProperties.VALIDATE("External Document", TRUE);
      DocumentProperties.VALIDATE(File, CertificateFileName);
      DocumentProperties.MODIFY(TRUE);

      RecRef.GETTABLE(ServiceOrder);
      DocLinkRID[1] := RecRef.RECORDID(); //link to service order

      IF ServiceLocation.GET(ServiceOrder."Service Location No.") THEN BEGIN
        RecRef.GETTABLE(ServiceLocation);
        DocLinkRID[2] := RecRef.RECORDID(); //link to service location
      END;

      DocumentLinkMgt.CreateDocumentLink(DocumentProperties, DocLinkRID);
      DocumentProperties.MODIFY(TRUE);

      ServiceOrder."Lab. Certif. Retrieval Date" := CURRENTDATETIME;
      ServiceOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TextValueFromLabOrderResult@1100525039(LabOrderResult@1100525000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";Name@1100525001 : Text[30]) : Text[1024];
    VAR
      Element@1100525002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
    BEGIN
      Element := LabOrderResult.selectSingleNode(Name);
      IF ISCLEAR(Element) THEN
        ERROR(Text025, Name);
      EXIT(Element.text);
    END;

    LOCAL PROCEDURE DateValueFromLabOrderResult@1100525029(LabOrderResult@1100525001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";Name@1100525000 : Text[30]) : Date;
    VAR
      DateAsText@1100525002 : Text[30];
      Year@1100525003 : Integer;
      Month@1100525004 : Integer;
      Day@1100525005 : Integer;
    BEGIN
      DateAsText := TextValueFromLabOrderResult(LabOrderResult, Name);

      EVALUATE(Year, COPYSTR(DateAsText, 1, 4));
      EVALUATE(Month, COPYSTR(DateAsText, 5, 2));
      EVALUATE(Day, COPYSTR(DateAsText, 7, 2));

      EXIT(DMY2DATE(Day, Month, Year));
    END;

    BEGIN
    {
      In this codeunit xml automation variables are still used, because it is difficult to test test this functionality
      after conversion to xml dotnet variables. The automation variables are used on the client and no events are used,
      so it should not be a problem to use automation here.
    }
    END.
  }
}

