OBJECT Codeunit 11012863 NEN2767 Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            TestNEN2767Licensed;
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=There is no License for Granule NEN2767';

    PROCEDURE GetConditionScore@1100528600(IInterest@1100528600 : 'Severe,Serious,Minor';IIntensity@1100528601 : ' ,Initial Stage,Advanced Stage,Final Stage';IScale@1100528602 : ' ,Incidental,Local,Regular,Significant,General') : Integer;
    VAR
      NEN2767ConditionScore@1100528603 : Record 11128778;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT;

      IF NOT NEN2767ConditionScore.GET(IInterest, IIntensity, IScale) THEN
        NEN2767ConditionScore.INIT;
      EXIT(NEN2767ConditionScore.Score);
    END;

    PROCEDURE GetConditionMeasureHeaderDS@1100528602(IServiceObjectNo@1100528602 : Code[20];VAR IOMeasurementDate@1100528600 : Date;VAR ONEN2767ConditionMeasHeader@1100528604 : Record 11128776) : Boolean;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT;

      ONEN2767ConditionMeasHeader.SETRANGE("Service Object No.", IServiceObjectNo);
      ONEN2767ConditionMeasHeader.SETFILTER("Measurement Date", '..%1', IOMeasurementDate);
      IF ONEN2767ConditionMeasHeader.FINDLAST THEN BEGIN
        ONEN2767ConditionMeasHeader.SETRANGE("Measurement Date");
        IOMeasurementDate := ONEN2767ConditionMeasHeader."Measurement Date";
        EXIT(TRUE);
      END ELSE BEGIN
        ONEN2767ConditionMeasHeader.SETRANGE("Measurement Date");
        IOMeasurementDate := 0D;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE GetObjectConditionScore@1100528603(IServiceObjectNo@1100528600 : Code[20];VAR IOMeasurementDate@1100528601 : Date) : Integer;
    VAR
      NEN2767ConditionMeasHeader@1100528603 : Record 11128776;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT(1);

      IF NOT GetConditionMeasureHeaderDS(IServiceObjectNo, IOMeasurementDate, NEN2767ConditionMeasHeader) THEN
        EXIT(NEN2767ConditionMeasHeader."Condition Score"::"1"); // Perfect condition

      NEN2767ConditionMeasHeader.CALCFIELDS("Condition Score");
      IF NEN2767ConditionMeasHeader."Condition Score" > 0 THEN
        EXIT(NEN2767ConditionMeasHeader."Condition Score")
      ELSE
        EXIT(NEN2767ConditionMeasHeader."Condition Score"::"1"); // Perfect condition
    END;

    PROCEDURE ShowObjectConditionScore@1100528601(IServiceObjectNo@1100528601 : Code[20];IMeasurementDate@1100528600 : Date);
    VAR
      NEN2767ConditionMeasHeader@1100528602 : Record 11128776;
    BEGIN
      TestNEN2767Licensed;
      GetConditionMeasureHeaderDS(IServiceObjectNo, IMeasurementDate, NEN2767ConditionMeasHeader);
      PAGE.RUNMODAL(PAGE::"NEN2767 Condition Meas. List", NEN2767ConditionMeasHeader)
    END;

    PROCEDURE ShowObjectConditionScoreList@1100528624(IServiceObjectNo@1100528601 : Code[20];IMeasurementDate@1100528600 : Date);
    VAR
      NEN2767ConditionMeasHeader@1100528602 : Record 11128776;
    BEGIN
      TestNEN2767Licensed;
      GetConditionMeasureHeaderDS(IServiceObjectNo, IMeasurementDate, NEN2767ConditionMeasHeader);
      PAGE.RUNMODAL(PAGE::"NEN2767 Condition Meas. List", NEN2767ConditionMeasHeader)
    END;

    PROCEDURE ShowObjectConditionScoreCard@1100528618(IServiceObjectNo@1100528601 : Code[20];IMeasurementDate@1100528600 : Date);
    VAR
      NEN2767ConditionMeasHeader@1100528602 : Record 11128776;
    BEGIN
      TestNEN2767Licensed;
      GetConditionMeasureHeaderDS(IServiceObjectNo, IMeasurementDate, NEN2767ConditionMeasHeader);
      PAGE.RUNMODAL(PAGE::"NEN2767 Condition Measurement", NEN2767ConditionMeasHeader)
    END;

    PROCEDURE GetScaleByPercentage@1100528605(IScalePercentage@1100528600 : Decimal) OScale : Integer;
    VAR
      NEN2767ConditionMeasLine@1100528601 : Record 11128777;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT;
      CASE IScalePercentage OF
        2..9:
          OScale := NEN2767ConditionMeasLine.Scale::"Local";
        10..29:
          OScale := NEN2767ConditionMeasLine.Scale::Regular;
        30..70:
          OScale := NEN2767ConditionMeasLine.Scale::Significant;
      ELSE
        IF IScalePercentage < 2 THEN
          OScale := NEN2767ConditionMeasLine.Scale::Incidental;
        IF IScalePercentage > 70 THEN
          OScale := NEN2767ConditionMeasLine.Scale::General;
      END;
    END;

    PROCEDURE GetScoreByCorrectionFactor@1100528604(ICorrectionFactor@1100528600 : Decimal) OSCale : Integer;
    VAR
      NEN2767ConditionMeasLine@1100528601 : Record 11128777;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT(1);
      IF (ICorrectionFactor <= 1.01) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"1";
      IF (ICorrectionFactor > 1.01) AND (ICorrectionFactor <= 1.04) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"2";
      IF (ICorrectionFactor > 1.04) AND (ICorrectionFactor <= 1.15) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"3";
      IF (ICorrectionFactor > 1.15) AND (ICorrectionFactor <= 1.4) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"4";
      IF (ICorrectionFactor > 1.4) AND (ICorrectionFactor <= 1.78) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"5";
      IF (ICorrectionFactor > 1.78) THEN
        OSCale := NEN2767ConditionMeasLine.Score::"6";
    END;

    PROCEDURE GetCorrectionFactorByScore@1100528611(IScore@1100528600 : ',1,2,3,4,5,6') : Decimal;
    BEGIN
      CASE IScore OF
        IScore::"1":
          EXIT(1);
        IScore::"2":
          EXIT(1.02);
        IScore::"3":
          EXIT(1.1);
        IScore::"4":
          EXIT(1.3);
        IScore::"5":
          EXIT(1.7);
        IScore::"6":
          EXIT(2);
      ELSE
        EXIT(1);
      END;
    END;

    PROCEDURE IsNEN2767Licensed@1100528606() : Boolean;
    VAR
      LicensePermission@1100528600 : Record 2000000043;
    BEGIN
      IF LicensePermission.GET(LicensePermission."Object Type"::Table, DATABASE::"NEN2767 Element") THEN
        EXIT(LicensePermission."Execute Permission" <> LicensePermission."Execute Permission"::" ");
    END;

    PROCEDURE TestNEN2767Licensed@1100528610();
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        ERROR(Text000);
    END;

    PROCEDURE GetReplacementValue@1100528608(IServiceObjectNo@1100528600 : Code[20];ISeekDate@1100528601 : Date) : Decimal;
    VAR
      ObjectReplacementValue@1100528602 : Record 11128779;
    BEGIN
      ObjectReplacementValue.SETRANGE("Service Object No.", IServiceObjectNo);
      ObjectReplacementValue.SETFILTER("Index Date", '..%1', ISeekDate);
      IF ObjectReplacementValue.FINDLAST THEN
        EXIT(ObjectReplacementValue."Replacement Value");
    END;

    PROCEDURE ShowReplacementValues@1100528607(IServiceObjectNo@1100528601 : Code[20]);
    VAR
      ObjectReplacementValue@1100528600 : Record 11128779;
    BEGIN
      TestNEN2767Licensed;
      ObjectReplacementValue.SETRANGE("Service Object No.", IServiceObjectNo);
      PAGE.RUNMODAL(0, ObjectReplacementValue);
    END;

    PROCEDURE GetLocationConditionDS@1100528609(IServiceLocationNo@1100528600 : Code[20];VAR ONEN2767LocationCondBuffer@1100528603 : TEMPORARY Record 11128780);
    VAR
      TmpNEN2767LocationCondBuffer@1100528601 : TEMPORARY Record 11128780;
      ServiceLocation@1100528604 : Record 11012801;
      ServiceObject@1100528602 : Record 11071691;
    BEGIN
      IF ServiceLocation.GET(IServiceLocationNo) THEN
        IF ServiceLocation."Building Code" <> '' THEN BEGIN
          GetBuildingConditionDS(ServiceLocation."Building Code", ONEN2767LocationCondBuffer);
          EXIT;
        END;

      TmpNEN2767LocationCondBuffer.COPY(ONEN2767LocationCondBuffer, TRUE); // check if temp

      ONEN2767LocationCondBuffer.RESET;
      ONEN2767LocationCondBuffer.DELETEALL;

      ServiceObject.SETCURRENTKEY("Service Location No.");
      ServiceObject.SETRANGE("Service Location No.", IServiceLocationNo);
      IF NOT ServiceObject.FINDSET THEN
        EXIT;
      REPEAT
        ONEN2767LocationCondBuffer.INIT;
        ONEN2767LocationCondBuffer.Code := ServiceObject."Service Location No.";
        ONEN2767LocationCondBuffer.VALIDATE("Service Object No.", ServiceObject."No.");
        ONEN2767LocationCondBuffer.INSERT;
      UNTIL ServiceObject.NEXT = 0;

      ONEN2767LocationCondBuffer.FINDFIRST;
    END;

    PROCEDURE GetBuildingConditionDS@1100528613(IBuildingCode@1100528600 : Code[20];VAR ONEN2767LocationCondBuffer@1100528603 : TEMPORARY Record 11128780);
    VAR
      TmpNEN2767LocationCondBuffer@1100528601 : TEMPORARY Record 11128780;
      BuildingObjectRelation@1100528602 : Record 11071820;
    BEGIN
      TmpNEN2767LocationCondBuffer.COPY(ONEN2767LocationCondBuffer, TRUE); // check if temp

      ONEN2767LocationCondBuffer.RESET;
      ONEN2767LocationCondBuffer.DELETEALL;

      BuildingObjectRelation.SETRANGE("Building Code", IBuildingCode);
      IF NOT BuildingObjectRelation.FINDSET THEN
        EXIT;
      REPEAT
        ONEN2767LocationCondBuffer.INIT;
        ONEN2767LocationCondBuffer.Code := IBuildingCode;
        ONEN2767LocationCondBuffer.VALIDATE("Service Object No.", BuildingObjectRelation."Object No.");
        ONEN2767LocationCondBuffer.INSERT;
      UNTIL BuildingObjectRelation.NEXT = 0;

      ONEN2767LocationCondBuffer.FINDFIRST;
    END;

    PROCEDURE GetLocStructConditionDS@1100528619(IServiceLocationNo@1100528601 : Code[20];IStructureCode@1100528602 : Integer;IElement@1100528603 : Code[20];VAR ONEN2767LocationCondBuffer@1100528600 : TEMPORARY Record 11128780);
    VAR
      TmpNEN2767LocationCondBuffer@1100528604 : TEMPORARY Record 11128780;
      ServiceLocStructureLine@1100528605 : Record 11071720;
    BEGIN
      TmpNEN2767LocationCondBuffer.COPY(ONEN2767LocationCondBuffer, TRUE); // check if temp

      ONEN2767LocationCondBuffer.RESET;
      ONEN2767LocationCondBuffer.DELETEALL;

      ServiceLocStructureLine.SETRANGE("Service Location No.", IServiceLocationNo);
      ServiceLocStructureLine.SETRANGE("Structure No.", IStructureCode);
      ServiceLocStructureLine.SETRANGE("No.", IElement);
      ServiceLocStructureLine.SETRANGE("Object Line", FALSE);
      IF NOT ServiceLocStructureLine.FINDFIRST THEN
        EXIT;
      ServiceLocStructureLine.SETRANGE("Object Line", TRUE);
      ServiceLocStructureLine.SETRANGE("No.");
      CASE ServiceLocStructureLine.Level OF
        0:;
        1:
          ServiceLocStructureLine.SETRANGE("Element Level 1", ServiceLocStructureLine."Element Level 1");
        2:
          ServiceLocStructureLine.SETRANGE("Element Level 2", ServiceLocStructureLine."Element Level 2");
        3:
          ServiceLocStructureLine.SETRANGE("No.", IElement);
      END;
      IF NOT ServiceLocStructureLine.FINDSET THEN
        EXIT;
      REPEAT
        ONEN2767LocationCondBuffer.INIT;
        ONEN2767LocationCondBuffer.Code := IServiceLocationNo;
        ONEN2767LocationCondBuffer.VALIDATE("Service Object No.", ServiceLocStructureLine."Service Object No.");
        IF ONEN2767LocationCondBuffer.INSERT THEN;
      UNTIL ServiceLocStructureLine.NEXT = 0;
      ONEN2767LocationCondBuffer.FINDFIRST;
    END;

    PROCEDURE GetLocTenderStructConditionDS@1100528616(IServiceLocationNo@1100528603 : Code[20];ICodingSystemCode@1100528602 : Code[10];ITenderCode@1100528601 : Code[20];IInitBuffer@1100528607 : Boolean;VAR ONEN2767LocationCondBuffer@1100528600 : TEMPORARY Record 11128780);
    VAR
      TmpNEN2767LocationCondBuffer@1100528605 : TEMPORARY Record 11128780;
      CodeperCodingSystem@1100528604 : Record 11012089;
      ServiceObject@1100528606 : Record 11071691;
    BEGIN
      TmpNEN2767LocationCondBuffer.COPY(ONEN2767LocationCondBuffer, TRUE); // check if temp

      IF IInitBuffer THEN BEGIN
        ONEN2767LocationCondBuffer.RESET;
        ONEN2767LocationCondBuffer.DELETEALL;
      END;

      CodeperCodingSystem.SETRANGE("Coding System", ICodingSystemCode);
      CodeperCodingSystem.SETRANGE(Code, ITenderCode);
      IF NOT CodeperCodingSystem.FINDFIRST THEN
        EXIT;
      CodeperCodingSystem.SETRANGE(Code);

      CASE CodeperCodingSystem.Level OF
        0:
          CodeperCodingSystem.SETRANGE(Level, 1);
        1:
          BEGIN
            CodeperCodingSystem.SETRANGE(Level, 2);
            CodeperCodingSystem.SETRANGE(Chapter, CodeperCodingSystem.Chapter);
          END;
        2:
          BEGIN
            CodeperCodingSystem.SETRANGE(Level, 3);
            CodeperCodingSystem.SETRANGE(Chapter, CodeperCodingSystem.Chapter);
            CodeperCodingSystem.SETRANGE(Paragraph, CodeperCodingSystem.Paragraph);
          END;
        3:
          CodeperCodingSystem.SETRANGE(Code, ITenderCode);
      END;
      IF NOT CodeperCodingSystem.FINDSET THEN
        EXIT;
      REPEAT
        IF CodeperCodingSystem.Level < 3 THEN
          GetLocTenderStructConditionDS(
            IServiceLocationNo, ICodingSystemCode, CodeperCodingSystem.Code, FALSE, ONEN2767LocationCondBuffer);
        ServiceObject.SETCURRENTKEY("Service Location No.");
        ServiceObject.SETRANGE("Service Location No.", IServiceLocationNo);
        ServiceObject.SETRANGE("Tender Code 1", CodeperCodingSystem.Code);
        IF ServiceObject.FINDSET THEN
          REPEAT
            ONEN2767LocationCondBuffer.INIT;
            ONEN2767LocationCondBuffer.Code := IServiceLocationNo;
            ONEN2767LocationCondBuffer.VALIDATE("Service Object No.", ServiceObject."No.");
            IF ONEN2767LocationCondBuffer.INSERT THEN;
          UNTIL ServiceObject.NEXT = 0;
      UNTIL CodeperCodingSystem.NEXT = 0;
      IF ONEN2767LocationCondBuffer.FINDFIRST THEN;
    END;

    LOCAL PROCEDURE GetAggrConditionScore@1100528617(IType@1100528600 : 'Service Location,Building,Location Structure,Tender Document';ICode@1100528601 : Code[20];IStructureCode@1100528602 : Integer;IElement@1100528603 : Code[20];ITenderSystem@1100528607 : Code[10];ITenderElement@1100528608 : Code[20]) : Integer;
    VAR
      NEN2767ConditionBuffer@1100528605 : TEMPORARY Record 11128780;
      ServiceLocation@1100528606 : Record 11012801;
      CorrectionFactor@1100528604 : Decimal;
    BEGIN
      IF NOT IsNEN2767Licensed THEN
        EXIT;

      CASE IType OF
        IType::"Service Location":
          IF ServiceLocation.GET(ICode) THEN
            IF ServiceLocation."Building Code" = '' THEN
              GetLocationConditionDS(ICode, NEN2767ConditionBuffer)
            ELSE
              GetBuildingConditionDS(ServiceLocation."Building Code", NEN2767ConditionBuffer);
        IType::Building:
          GetBuildingConditionDS(ICode, NEN2767ConditionBuffer);
        IType::"Location Structure":
          GetLocStructConditionDS(ICode, IStructureCode, IElement, NEN2767ConditionBuffer);
        IType::"Tender Document":
          GetLocTenderStructConditionDS(ICode, ITenderSystem, ITenderElement, TRUE, NEN2767ConditionBuffer);
      END;

      IF NEN2767ConditionBuffer.ISEMPTY THEN
        EXIT(1);

      NEN2767ConditionBuffer.CALCSUMS("Replacement Value", "Corrected Replacement Value");
      IF NEN2767ConditionBuffer."Replacement Value" = 0 THEN
        EXIT(1);

      CorrectionFactor := NEN2767ConditionBuffer."Corrected Replacement Value" / NEN2767ConditionBuffer."Replacement Value";
      EXIT(GetScoreByCorrectionFactor(CorrectionFactor));
    END;

    PROCEDURE GetLocationConditionScore@1100528612(IServiceLocationNo@1100528600 : Code[20]) : Integer;
    BEGIN
      EXIT(GetAggrConditionScore(0, IServiceLocationNo, 0, '', '', ''));
    END;

    PROCEDURE GetBuildingConditionScore@1100528614(IBuildingCode@1100528600 : Code[20]) : Integer;
    BEGIN
      EXIT(GetAggrConditionScore(1, IBuildingCode, 0, '', '', ''));
    END;

    PROCEDURE GetLocStructConditionScore@1100528615(IServiceLocationNo@1100528602 : Code[20];IStructureCode@1100528601 : Integer;IElement@1100528600 : Code[20]) : Integer;
    BEGIN
      EXIT(GetAggrConditionScore(2, IServiceLocationNo, IStructureCode, IElement, '', ''));
    END;

    PROCEDURE GetLocTenderStructCondScore@1100528627(IServiceLocationNo@1100528602 : Code[20];ITenderSystem@1100528601 : Code[10];ITenderElement@1100528600 : Code[20];VAR ITmpServiceLocStructureLine@1100528604 : TEMPORARY Record 11071720) : Integer;
    VAR
      TmpServiceLocStructureLine@1100528605 : TEMPORARY Record 11071720;
      TmpNEN2767ConditionBuffer@1100528603 : TEMPORARY Record 11128780;
      CorrectionFactor@1100528606 : Decimal;
    BEGIN
      TmpServiceLocStructureLine.COPY(ITmpServiceLocStructureLine, TRUE);
      TmpServiceLocStructureLine.RESET;
      IF NOT TmpServiceLocStructureLine.FINDSET THEN
        EXIT(1);

      TmpServiceLocStructureLine.SETRANGE("Service Location No.", IServiceLocationNo);
      TmpServiceLocStructureLine.SETRANGE("No.", ITenderElement);
      IF NOT TmpServiceLocStructureLine.FINDFIRST THEN
        EXIT(1);
      TmpServiceLocStructureLine.SETRANGE("No.");
      TmpServiceLocStructureLine.SETRANGE("Object Line", TRUE);
      CASE TmpServiceLocStructureLine.Level OF
        0:;
        1:
          TmpServiceLocStructureLine.SETRANGE("Element Level 1", TmpServiceLocStructureLine."Element Level 1");
        2:
          BEGIN
            TmpServiceLocStructureLine.SETRANGE("Element Level 1", TmpServiceLocStructureLine."Element Level 1");
            TmpServiceLocStructureLine.SETRANGE("Element Level 2", TmpServiceLocStructureLine."Element Level 2");
          END;
        3:
          TmpServiceLocStructureLine.SETRANGE("No.", TmpServiceLocStructureLine."No.");
      END;
      IF TmpServiceLocStructureLine.FINDSET THEN
        REPEAT
          TmpNEN2767ConditionBuffer.INIT;
          TmpNEN2767ConditionBuffer.Code := IServiceLocationNo;
          TmpNEN2767ConditionBuffer.VALIDATE("Service Object No.", TmpServiceLocStructureLine."Service Object No.");
          TmpNEN2767ConditionBuffer.INSERT;
        UNTIL TmpServiceLocStructureLine.NEXT = 0;

      IF TmpNEN2767ConditionBuffer.ISEMPTY THEN
        EXIT(1);

      TmpNEN2767ConditionBuffer.CALCSUMS("Replacement Value", "Corrected Replacement Value");
      IF TmpNEN2767ConditionBuffer."Replacement Value" = 0 THEN
        EXIT(1);

      CorrectionFactor := TmpNEN2767ConditionBuffer."Corrected Replacement Value" / TmpNEN2767ConditionBuffer."Replacement Value";
      EXIT(GetScoreByCorrectionFactor(CorrectionFactor));
    END;

    LOCAL PROCEDURE GetLTMaintTaskDS@1100528623(IServiceObjectNo@1100528600 : Code[20];VAR OLTMaintPlanTask@1100528601 : Record 11128781);
    BEGIN
      OLTMaintPlanTask.RESET;
      OLTMaintPlanTask.SETRANGE("Service Object No.", IServiceObjectNo);
    END;

    PROCEDURE ShowLTMaintTaskList@1100528622(IServiceObjectNo@1100528600 : Code[20]);
    VAR
      LTMaintPlanTask@1100528601 : Record 11128781;
    BEGIN
      GetLTMaintTaskDS(IServiceObjectNo, LTMaintPlanTask);
      IF LTMaintPlanTask.FINDLAST THEN;
      PAGE.RUNMODAL(0, LTMaintPlanTask);
    END;

    PROCEDURE ShowLTMaintTaskCard@1100528621(IServiceObjectNo@1100528600 : Code[20];ITaskNo@1100528602 : Code[10]);
    VAR
      LTMaintPlanTask@1100528601 : Record 11128781;
    BEGIN
      GetLTMaintTaskDS(IServiceObjectNo, LTMaintPlanTask);
      LTMaintPlanTask.SETRANGE("Task No.", ITaskNo);
      IF LTMaintPlanTask.FINDFIRST THEN;
      LTMaintPlanTask.SETRANGE("Task No.");
      PAGE.RUNMODAL(PAGE::"NEN2767/LTMP Setup", LTMaintPlanTask);
    END;

    PROCEDURE GetNoOfTasks@1100528620(IServiceObjectNo@1100528600 : Code[20]) : Integer;
    VAR
      LTMaintPlanTask@1100528601 : Record 11128781;
    BEGIN
      GetLTMaintTaskDS(IServiceObjectNo, LTMaintPlanTask);
      EXIT(LTMaintPlanTask.COUNT);
    END;

    PROCEDURE GetCondMeasRepairCost@1100528625(IServiceObjectNo@1100528600 : Code[20];IMeasurementDate@1100528601 : Date) : Decimal;
    VAR
      NEN2767ConditionMeasLine@1100528602 : Record 11128777;
    BEGIN
      NEN2767ConditionMeasLine.SETCURRENTKEY(Indication);
      NEN2767ConditionMeasLine.SETRANGE("Service Object No.", IServiceObjectNo);
      NEN2767ConditionMeasLine.SETRANGE("Measurement Date", IMeasurementDate);
      NEN2767ConditionMeasLine.SETRANGE(Indication, TRUE);
      NEN2767ConditionMeasLine.CALCSUMS("Repair Cost");
      EXIT(NEN2767ConditionMeasLine."Repair Cost");
    END;

    PROCEDURE CopyRepairCostfromCondMeasDS@1100528626(VAR LTMaintPlanTask@1100528600 : Record 11128781);
    BEGIN
      LTMaintPlanTask.SETRANGE(Type, LTMaintPlanTask.Type::"Condition Measurement");
      LTMaintPlanTask.SETFILTER("Condition Measurement Date", '<>%1', 0D);
      IF LTMaintPlanTask.FINDSET(TRUE) THEN
        REPEAT
          LTMaintPlanTask.VALIDATE("Condition Measurement Date");
          LTMaintPlanTask.MODIFY(TRUE);
        UNTIL LTMaintPlanTask.NEXT = 0;
    END;

    PROCEDURE NormalizeBuildingPartCode@1100528628(IBuildingPartCode@1100528600 : Text) : Code[10];
    VAR
      RegExpManagement@1100528601 : Codeunit 11012262;
    BEGIN
      WITH RegExpManagement DO
        IF RegExpFindMatches(IBuildingPartCode, '^([A-Z])([1-9])$') THEN
          EXIT(GetSubMatchFirstMatch(0) + '0' + GetSubMatchFirstMatch(1))
        ELSE
          EXIT(IBuildingPartCode);
    END;

    PROCEDURE NormalizeDefectCode@1100528635(IDefectCode@1100528601 : Code[10]) : Code[10];
    VAR
      RegExpManagement@1100528600 : Codeunit 11012262;
    BEGIN
      WITH RegExpManagement DO
        IF RegExpFindMatches(IDefectCode, '^([A-Z])([1-9])([A-Z]{2}\d{2})$') THEN
          EXIT(GetSubMatchFirstMatch(0) + '0' + GetSubMatchFirstMatch(1) + GetSubMatchFirstMatch(2))
        ELSE
          EXIT(IDefectCode);
    END;

    PROCEDURE GetInfoFromDefectCode@1100528640(IDefectCode@1100528600 : Code[10];VAR OBuildingPartCode@1100528601 : Code[10];VAR OInterest@1100528604 : Option;VAR ODefectType@1100528602 : Code[10]);
    VAR
      NEN2767Defect@1100528605 : Record 11128773;
      RegExpManagement@1100528603 : Codeunit 11012262;
    BEGIN
      WITH RegExpManagement DO BEGIN
        IDefectCode := NormalizeDefectCode(IDefectCode);
        IF RegExpFindMatches(IDefectCode, '^([A-Z]\d+)([A-Z])([A-Z])\d+$') THEN BEGIN
          OBuildingPartCode := GetSubMatchFirstMatch(0);
          CASE GetSubMatchFirstMatch(1) OF
            'E':
              OInterest := NEN2767Defect.Interest::Severe;
            'S':
              OInterest := NEN2767Defect.Interest::Serious;
            'M':
              OInterest := NEN2767Defect.Interest::Minor;
          END;
          ODefectType := GetSubMatchFirstMatch(2);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

