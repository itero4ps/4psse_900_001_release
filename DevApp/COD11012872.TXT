OBJECT Codeunit 11012872 Plant Maintenance Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528800 : TextConst 'ENU=There are %1 present on level %2, you first need to delete these.';

    PROCEDURE GetPlantNumberMaintenanceSchemes@1100528801(IPlantType@1100528800 : Code[20];IPlantNumber@1100528801 : Code[10];VAR OPlantTypeMaintScheme@1100528802 : Record 11072677) : Boolean;
    VAR
      PlantTypeMaintScheme@1100528803 : Record 11072677;
    BEGIN
      PlantTypeMaintScheme.SETRANGE("Plant Type", IPlantType);
      PlantTypeMaintScheme.SETRANGE("Plant Number", IPlantNumber);
      IF PlantTypeMaintScheme.FINDSET THEN BEGIN
        REPEAT
          OPlantTypeMaintScheme.GET(PlantTypeMaintScheme."Plant Type", PlantTypeMaintScheme."Plant Number", PlantTypeMaintScheme."Maintenance Scheme");
          OPlantTypeMaintScheme.MARK(TRUE)
        UNTIL PlantTypeMaintScheme.NEXT = 0;

        OPlantTypeMaintScheme.MARKEDONLY(TRUE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetApplicableActivities@1100528810(VAR OPlantMaintenanceSchemeVersionLine@1100528804 : TEMPORARY Record 11072675;ILevel@1100528803 : 'Maintenance Scheme,Plant Type,Plant Number';IPlantType@1100528805 : Code[20];ILevelCode@1100528802 : Code[20];IMaintenanceScheme@1100528801 : Code[20];IReferenceDate@1100528800 : Date;IncludeCancelled@1100528811 : Boolean);
    BEGIN
      GetPlantMaintenanceSchemeLines(OPlantMaintenanceSchemeVersionLine, IMaintenanceScheme, IReferenceDate);
      GetAdditionalPlantMaintenanceSchemeLines(OPlantMaintenanceSchemeVersionLine, ILevel, IPlantType, ILevelCode, IMaintenanceScheme, IReferenceDate);
      IF NOT IncludeCancelled THEN
        DeleteCancelledPlantMaintSchemeVersionLines(OPlantMaintenanceSchemeVersionLine, ILevel, IPlantType, ILevelCode, IMaintenanceScheme, IReferenceDate);
    END;

    PROCEDURE GetApplicableInspectionLines@1100528809(VAR OPlantInspectionLine@1100528804 : TEMPORARY Record 11072684;ILevel@1100528803 : 'Base Inspection List,Plant Type,Plant Number';IPlantType@1100528810 : Code[20];ILevelCode@1100528802 : Code[20];IMaintenanceScheme@1100528801 : Code[20];IReferenceDate@1100528800 : Date;IBaseInspectionList@1100528812 : Code[20];IncludeCancelled@1100528811 : Boolean);
    BEGIN
      GetBasePlantInspectionListLines(OPlantInspectionLine, IBaseInspectionList, IReferenceDate);
      GetAdditionalBaseInspectionListLines(OPlantInspectionLine, ILevel, IPlantType, ILevelCode, IMaintenanceScheme, IBaseInspectionList, IReferenceDate);
      IF NOT IncludeCancelled THEN
        DeleteCancelledPlantInspectionListLines(OPlantInspectionLine, ILevel, IPlantType, ILevelCode, IMaintenanceScheme, IBaseInspectionList, IReferenceDate);
    END;

    PROCEDURE GetPlantMaintenanceSchemeLines@1100528811(VAR OPlantMaintenanceSchemeVersionLine@1100528804 : TEMPORARY Record 11072675;IMaintenanceScheme@1100528801 : Code[20];IReferenceDate@1100528800 : Date);
    VAR
      PlantMaintenanceSchemeVersionLine@1100528802 : Record 11072675;
      ApplicableIndexDate@1100528803 : Date;
    BEGIN
      IF GetApplicableMaintenanceSchemeIndexDate('', IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, 0, '') THEN BEGIN
        PlantMaintenanceSchemeVersionLine.SETRANGE(Level, 0);
        PlantMaintenanceSchemeVersionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
        PlantMaintenanceSchemeVersionLine.SETRANGE("Index Date", ApplicableIndexDate);
        IF PlantMaintenanceSchemeVersionLine.FINDSET THEN
          REPEAT
            OPlantMaintenanceSchemeVersionLine.INIT;
            OPlantMaintenanceSchemeVersionLine.TRANSFERFIELDS(PlantMaintenanceSchemeVersionLine);
            OPlantMaintenanceSchemeVersionLine.INSERT;
          UNTIL PlantMaintenanceSchemeVersionLine.NEXT = 0;
      END
    END;

    PROCEDURE GetBaseInspectionListByPlantNumber@1100528816(IPlantType@1100528800 : Code[20];IPlantNumber@1100528801 : Code[10];IMaintenanceScheme@1100528802 : Code[20]) : Code[20];
    VAR
      PlantTypeMaintenanceScheme@1100528803 : Record 11072677;
      PlantMaintenanceScheme@1100528804 : Record 11072673;
    BEGIN
      IF PlantTypeMaintenanceScheme.GET(IPlantType, IPlantNumber, IMaintenanceScheme) THEN
        IF PlantTypeMaintenanceScheme."Base Plant Inspection List" <> '' THEN
          EXIT(PlantTypeMaintenanceScheme."Base Plant Inspection List");

      PlantTypeMaintenanceScheme.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
      PlantTypeMaintenanceScheme.SETRANGE("Plant Type", IPlantType);
      IF PlantTypeMaintenanceScheme.FINDFIRST THEN
        IF PlantTypeMaintenanceScheme."Base Plant Inspection List" <> '' THEN
          EXIT(PlantTypeMaintenanceScheme."Base Plant Inspection List");

      IF PlantMaintenanceScheme.GET(IMaintenanceScheme) THEN
        IF PlantMaintenanceScheme."Base Plant Inspection List" <> '' THEN
          EXIT(PlantMaintenanceScheme."Base Plant Inspection List");
    END;

    PROCEDURE GetBasePlantInspectionListLines@1100528812(VAR OPlantInspectionLine@1100528804 : TEMPORARY Record 11072684;IBaseInspectionList@1100528801 : Code[20];IReferenceDate@1100528800 : Date);
    VAR
      PlantInspectionLine@1100528802 : Record 11072684;
      ApplicableIndexDate@1100528803 : Date;
    BEGIN
      IF GetApplicableBaseInspectionListIndexDate('', IBaseInspectionList, IReferenceDate, ApplicableIndexDate, 0, IBaseInspectionList, '') THEN BEGIN
        PlantInspectionLine.SETRANGE(Level, 0);
        PlantInspectionLine.SETRANGE("Level Code", IBaseInspectionList);
        PlantInspectionLine.SETRANGE("Index Date", ApplicableIndexDate);
        IF PlantInspectionLine.FINDSET THEN
          REPEAT
            OPlantInspectionLine.INIT;
            OPlantInspectionLine.TRANSFERFIELDS(PlantInspectionLine);
            OPlantInspectionLine.INSERT;
          UNTIL PlantInspectionLine.NEXT = 0;
      END
    END;

    PROCEDURE GetApplicableMaintenanceSchemeIndexDate@1100528813(IPlantType@1100528806 : Code[20];IMaintenanceScheme@1100528800 : Code[20];IReferenceDate@1100528801 : Date;VAR IndexDate@1100528803 : Date;IndexDateLevel@1100528805 : 'Maintenance Scheme,Plant Type,Plant Number';ILevelCode@1100528807 : Code[20]) : Boolean;
    VAR
      PlantMaintenanceSchemeVersion@1100528802 : Record 11072674;
      Level@1100528804 : 'Maintenance Scheme,Plant Type,Plant Number';
    BEGIN
      PlantMaintenanceSchemeVersion.SETRANGE(Level, IndexDateLevel);
      PlantMaintenanceSchemeVersion.SETRANGE(Cancelled, FALSE);
      PlantMaintenanceSchemeVersion.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
      IF IndexDateLevel = 2 THEN
       PlantMaintenanceSchemeVersion.SETRANGE("Plant Type", IPlantType);
      IF IndexDateLevel = 1 THEN
        PlantMaintenanceSchemeVersion.SETRANGE("Level Code", ILevelCode);
      PlantMaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1|%2', IReferenceDate, 0D);
      IF PlantMaintenanceSchemeVersion.FINDLAST THEN BEGIN
        IndexDate := PlantMaintenanceSchemeVersion."Index Date";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetApplicableBaseInspectionListIndexDate@1100528814(IPlantType@1100528806 : Code[20];IBaseInspectionList@1100528800 : Code[20];IReferenceDate@1100528801 : Date;VAR IndexDate@1100528803 : Date;IndexDateLevel@1100528805 : 'Base Inspection List,Plant Type,Plant Number';ILevelCode@1100528807 : Code[20];IMaintenanceScheme@1100528808 : Code[20]) : Boolean;
    VAR
      PlantInspectionVersion@1100528802 : Record 11072682;
      Level@1100528804 : 'Base Inspection List,Plant Type,Plant Number';
    BEGIN
      PlantInspectionVersion.SETRANGE(Level, IndexDateLevel);
      PlantInspectionVersion.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
      PlantInspectionVersion.SETRANGE("Base Inspection List", IBaseInspectionList);
      IF IndexDateLevel = 2 THEN
       PlantInspectionVersion.SETRANGE("Plant Type", IPlantType);
      IF IndexDateLevel = 1 THEN
        PlantInspectionVersion.SETRANGE("Level Code", ILevelCode);
      PlantInspectionVersion.SETFILTER("Index Date", '<=%1|%2', IReferenceDate, 0D);
      IF PlantInspectionVersion.FINDLAST THEN BEGIN
        IndexDate := PlantInspectionVersion."Index Date";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetAdditionalPlantMaintenanceSchemeLines@1100528806(VAR OPlantMaintenanceSchemeVersionLine@1100528800 : Record 11072675;ILevel@1100528801 : 'Maintenance Scheme,Plant Type,Plant Number';IPlantType@1100528806 : Code[20];ILevelCode@1100528802 : Code[20];IMaintenanceScheme@1100528803 : Code[20];IReferenceDate@1100528804 : Date);
    VAR
      PlantMaintenanceSchemeVersionLine@1100528805 : Record 11072675;
      Level@1100528807 : 'Maintenance Scheme,Plant Type,Plant Number';
      ApplicableIndexDate@1100528809 : Date;
    BEGIN
      IF ILevel = ILevel::"Plant Number" THEN BEGIN
        IF GetApplicableMaintenanceSchemeIndexDate(IPlantType, IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, ILevel, ILevelCode) THEN BEGIN
          PlantMaintenanceSchemeVersionLine.SETRANGE(Level, ILevel);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Plant Type", IPlantType);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Level Code", ILevelCode);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Index Date", ApplicableIndexDate);
        IF PlantMaintenanceSchemeVersionLine.FINDSET THEN
          REPEAT
            OPlantMaintenanceSchemeVersionLine.INIT;
            OPlantMaintenanceSchemeVersionLine.TRANSFERFIELDS(PlantMaintenanceSchemeVersionLine);
            OPlantMaintenanceSchemeVersionLine.INSERT;
          UNTIL PlantMaintenanceSchemeVersionLine.NEXT = 0;
        END;

        ApplicableIndexDate := 0D;
        PlantMaintenanceSchemeVersionLine.RESET;

        IF GetApplicableMaintenanceSchemeIndexDate(IPlantType, IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, 1, IPlantType) THEN BEGIN
          PlantMaintenanceSchemeVersionLine.SETRANGE(Level, 1);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Level Code", IPlantType);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Index Date", ApplicableIndexDate);
          IF PlantMaintenanceSchemeVersionLine.FINDSET THEN
            REPEAT
              OPlantMaintenanceSchemeVersionLine.INIT;
              OPlantMaintenanceSchemeVersionLine.TRANSFERFIELDS(PlantMaintenanceSchemeVersionLine);
              OPlantMaintenanceSchemeVersionLine.INSERT;
            UNTIL PlantMaintenanceSchemeVersionLine.NEXT = 0;
        END;
      END;

      IF ILevel = ILevel::"Plant Type" THEN BEGIN
        IF GetApplicableMaintenanceSchemeIndexDate(IPlantType, IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, 1, ILevelCode) THEN BEGIN
          PlantMaintenanceSchemeVersionLine.SETRANGE(Level, 1);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Level Code", ILevelCode);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Index Date", ApplicableIndexDate);
          IF PlantMaintenanceSchemeVersionLine.FINDSET THEN
            REPEAT
              OPlantMaintenanceSchemeVersionLine.INIT;
              OPlantMaintenanceSchemeVersionLine.TRANSFERFIELDS(PlantMaintenanceSchemeVersionLine);
              OPlantMaintenanceSchemeVersionLine.INSERT;
            UNTIL PlantMaintenanceSchemeVersionLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetAdditionalBaseInspectionListLines@1100528815(VAR OPlantInspectionLine@1100528800 : Record 11072684;ILevel@1100528801 : 'Base Inspection List,Plant Type,Plant Number';IPlantType@1100528808 : Code[20];ILevelCode@1100528802 : Code[20];IMaintenanceScheme@1100528803 : Code[20];IBaseInspectionList@1100528806 : Code[20];IReferenceDate@1100528804 : Date);
    VAR
      PlantInspectionLine@1100528805 : Record 11072684;
      Level@1100528807 : 'Base Inpection List,Plant Type,Plant Number';
      ApplicableIndexDate@1100528809 : Date;
    BEGIN
      IF ILevel = ILevel::"Plant Number" THEN BEGIN
        IF GetApplicableBaseInspectionListIndexDate(IPlantType, IBaseInspectionList, IReferenceDate, ApplicableIndexDate, ILevel, ILevelCode, IMaintenanceScheme) THEN BEGIN
          PlantInspectionLine.SETRANGE(Level, ILevel);
          PlantInspectionLine.SETRANGE("Plant Type", IPlantType);
          PlantInspectionLine.SETRANGE("Level Code", ILevelCode);
          PlantInspectionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantInspectionLine.SETRANGE("Index Date", ApplicableIndexDate);
        IF PlantInspectionLine.FINDSET THEN
          REPEAT
            OPlantInspectionLine.INIT;
            OPlantInspectionLine.TRANSFERFIELDS(PlantInspectionLine);
            OPlantInspectionLine.INSERT;
          UNTIL PlantInspectionLine.NEXT = 0;
        END;

        ApplicableIndexDate := 0D;
        PlantInspectionLine.RESET;

        IF GetApplicableBaseInspectionListIndexDate(IPlantType, IBaseInspectionList, IReferenceDate, ApplicableIndexDate, 1, IPlantType, IMaintenanceScheme) THEN BEGIN
          PlantInspectionLine.SETRANGE(Level, 1);
          PlantInspectionLine.SETRANGE("Level Code", IPlantType);
          PlantInspectionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantInspectionLine.SETRANGE("Index Date", ApplicableIndexDate);
          IF PlantInspectionLine.FINDSET THEN
            REPEAT
              OPlantInspectionLine.INIT;
              OPlantInspectionLine.TRANSFERFIELDS(PlantInspectionLine);
              OPlantInspectionLine.INSERT;
            UNTIL PlantInspectionLine.NEXT = 0;
        END;
      END;

      IF ILevel = ILevel::"Plant Type" THEN BEGIN
        IF GetApplicableBaseInspectionListIndexDate(IPlantType, IBaseInspectionList, IReferenceDate, ApplicableIndexDate, 1, ILevelCode, IMaintenanceScheme) THEN BEGIN
          PlantInspectionLine.SETRANGE(Level, 1);
          PlantInspectionLine.SETRANGE("Level Code", ILevelCode);
          PlantInspectionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantInspectionLine.SETRANGE("Index Date", ApplicableIndexDate);
          IF PlantInspectionLine.FINDSET THEN
            REPEAT
              OPlantInspectionLine.INIT;
              OPlantInspectionLine.TRANSFERFIELDS(PlantInspectionLine);
              OPlantInspectionLine.INSERT;
            UNTIL PlantInspectionLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CopyBaseInspectionList@1100528624(IBaseInspectionListCode@1100528600 : Code[20];IIndexDate@1100528601 : Date;INewBaseInspectionListCode@1100528602 : Code[20];INewBaseInspectionListDescr@1100528611 : Text[50];INewIndexDate@1100528609 : Date);
    VAR
      BasePlantInspectionList@1100528603 : Record 11072680;
      ToBasePlantInspectionList@1100528604 : Record 11072680;
      plantInspectionVersion@1100528605 : Record 11072682;
      ToPlantInspectionVersion@1100528606 : Record 11072682;
      PlantInspectionLine@1100528607 : Record 11072684;
      ToPlantInspectionLine@1100528608 : Record 11072684;
    BEGIN
      BasePlantInspectionList.GET(IBaseInspectionListCode);
      IF NOT ToBasePlantInspectionList.GET(INewBaseInspectionListCode) THEN BEGIN
        ToBasePlantInspectionList := BasePlantInspectionList;
        ToBasePlantInspectionList.Code := INewBaseInspectionListCode;
        ToBasePlantInspectionList.Description := INewBaseInspectionListDescr;
        ToBasePlantInspectionList.INSERT(TRUE);
      END;

      plantInspectionVersion.SETRANGE(Level, plantInspectionVersion.Level::"Base Inspection List");
      plantInspectionVersion.SETRANGE("Level Code", IBaseInspectionListCode);
      plantInspectionVersion.SETFILTER("Index Date", '<=%1', IIndexDate);
      IF plantInspectionVersion.FINDLAST THEN BEGIN
        ToPlantInspectionVersion := plantInspectionVersion;
        ToPlantInspectionVersion."Level Code" := INewBaseInspectionListCode;
        ToPlantInspectionVersion."Index Date" := INewIndexDate;
        ToPlantInspectionVersion.INSERT(TRUE);

        PlantInspectionLine.SETRANGE(Level, plantInspectionVersion.Level);
        PlantInspectionLine.SETRANGE("Level Code", plantInspectionVersion."Level Code");
        PlantInspectionLine.SETRANGE("Index Date", plantInspectionVersion."Index Date");
        IF PlantInspectionLine.FINDSET THEN
          REPEAT
            ToPlantInspectionLine := PlantInspectionLine;
            ToPlantInspectionLine."Level Code" := ToPlantInspectionVersion."Level Code";
            ToPlantInspectionLine."Index Date" := ToPlantInspectionVersion."Index Date";
            ToPlantInspectionLine.INSERT(TRUE);
          UNTIL PlantInspectionLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyMaintenenanceScheme@1100528625(IMaintenanceSchemeCode@1100528600 : Code[20];IIndexDate@1100528601 : Date;INewMaintenanceSchemeCode@1100528602 : Code[20];INewIndexDate@1100528609 : Date);
    VAR
      PlantMaintenanceScheme@1100528603 : Record 11072673;
      ToPlantMaintenanceScheme@1100528604 : Record 11072673;
      PlantMaintenanceSchemeVersion@1100528605 : Record 11072674;
      ToPlantMaintenanceSchemeVersion@1100528606 : Record 11072674;
      PlantMaintSchemeVersionLine@1100528607 : Record 11072675;
      ToPlantMaintSchemeVersionLine@1100528608 : Record 11072675;
      CancelledPlantMaintSchemeLine@1100525000 : Record 11072676;
      ToCancelledPlantMaintSchemeLine@1100525001 : Record 11072676;
    BEGIN
      PlantMaintenanceScheme.GET(IMaintenanceSchemeCode);
      IF IMaintenanceSchemeCode <> INewMaintenanceSchemeCode THEN BEGIN
        ToPlantMaintenanceScheme := PlantMaintenanceScheme;
        ToPlantMaintenanceScheme.Code := INewMaintenanceSchemeCode;
        ToPlantMaintenanceScheme.INSERT(TRUE);
      END;

      PlantMaintenanceSchemeVersion.SETRANGE(Level, PlantMaintenanceSchemeVersion.Level::"Maintenance Scheme");
      PlantMaintenanceSchemeVersion.SETRANGE("Level Code", IMaintenanceSchemeCode);
      PlantMaintenanceSchemeVersion.SETRANGE("Maintenance Scheme", '');  //??is ook ma schema (of helemaal negeren
      PlantMaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', IIndexDate);
      IF PlantMaintenanceSchemeVersion.FINDLAST THEN BEGIN
        ToPlantMaintenanceSchemeVersion := PlantMaintenanceSchemeVersion;
        ToPlantMaintenanceSchemeVersion."Level Code" := INewMaintenanceSchemeCode;
        ToPlantMaintenanceSchemeVersion."Maintenance Scheme" := INewMaintenanceSchemeCode;
        ToPlantMaintenanceSchemeVersion."Index Date" := INewIndexDate;
        ToPlantMaintenanceSchemeVersion.INSERT(TRUE);

        PlantMaintSchemeVersionLine.SETRANGE(Level, PlantMaintenanceSchemeVersion.Level);
        PlantMaintSchemeVersionLine.SETRANGE("Level Code", PlantMaintenanceSchemeVersion."Level Code");
        PlantMaintSchemeVersionLine.SETRANGE("Maintenance Scheme", PlantMaintenanceSchemeVersion."Maintenance Scheme");
        PlantMaintSchemeVersionLine.SETRANGE("Index Date", PlantMaintenanceSchemeVersion."Index Date");
        IF PlantMaintSchemeVersionLine.FINDSET THEN
          REPEAT
            ToPlantMaintSchemeVersionLine := PlantMaintSchemeVersionLine;
            ToPlantMaintSchemeVersionLine."Level Code" := ToPlantMaintenanceSchemeVersion."Level Code";
            ToPlantMaintSchemeVersionLine."Maintenance Scheme" := ToPlantMaintenanceSchemeVersion."Maintenance Scheme";
            ToPlantMaintSchemeVersionLine.VALIDATE("Index Date", ToPlantMaintenanceSchemeVersion."Index Date");
            ToPlantMaintSchemeVersionLine.INSERT(TRUE);
          UNTIL PlantMaintSchemeVersionLine.NEXT = 0;
      END;

      CancelledPlantMaintSchemeLine.SETRANGE(Level, PlantMaintenanceSchemeVersion.Level);
      CancelledPlantMaintSchemeLine.SETRANGE("Level Code", PlantMaintenanceSchemeVersion."Level Code");
      CancelledPlantMaintSchemeLine.SETRANGE("Maintenance Scheme", PlantMaintenanceSchemeVersion."Maintenance Scheme");
      CancelledPlantMaintSchemeLine.SETRANGE("Index Date", PlantMaintenanceSchemeVersion."Index Date");
      IF CancelledPlantMaintSchemeLine.FINDSET THEN
        REPEAT
          ToCancelledPlantMaintSchemeLine := CancelledPlantMaintSchemeLine;
          ToCancelledPlantMaintSchemeLine."Level Code" := ToPlantMaintenanceSchemeVersion."Level Code";
          ToCancelledPlantMaintSchemeLine."Maintenance Scheme" := ToPlantMaintenanceSchemeVersion."Maintenance Scheme";
          ToCancelledPlantMaintSchemeLine.VALIDATE("Index Date", ToPlantMaintenanceSchemeVersion."Index Date");
          ToCancelledPlantMaintSchemeLine.INSERT(TRUE);
        UNTIL CancelledPlantMaintSchemeLine.NEXT = 0;
    END;

    PROCEDURE DeleteCancelledPlantMaintSchemeVersionLines@1100528800(VAR OPlantMaintenanceSchemeVersionLine@1100528800 : TEMPORARY Record 11072675;ILevel@1100528805 : 'Maintenance Scheme,Plant Type,Plant Number';IPlantType@1100528804 : Code[20];ILevelCode@1100528803 : Code[20];IMaintenanceScheme@1100528802 : Code[20];IReferenceDate@1100528801 : Date);
    VAR
      CancelledPlantMaintSchemeLine@1100528806 : Record 11072676;
      ApplicableIndexDate@1100528807 : Date;
      DummyCancellationLevel@1100528808 : Option;
    BEGIN
      IF OPlantMaintenanceSchemeVersionLine.FINDSET THEN
        REPEAT
          IF GetApplicableMaintenanceSchemeIndexDate(IPlantType, IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, ILevel, ILevelCode) THEN
            IF OPlantMaintenanceSchemeVersionLine.IsCancelled(
              ILevel,
              IPlantType,
              ILevelCode,
              IMaintenanceScheme,
              ApplicableIndexDate,
              DummyCancellationLevel) THEN
                OPlantMaintenanceSchemeVersionLine.DELETE;
        UNTIL OPlantMaintenanceSchemeVersionLine.NEXT = 0;
    END;

    PROCEDURE DeleteCancelledPlantInspectionListLines@1100528808(VAR OPlantInspectionLine@1100528800 : TEMPORARY Record 11072684;ILevel@1100528805 : 'Maintenance Scheme,Plant Type,Plant Number';IPlantType@1100528804 : Code[20];ILevelCode@1100528803 : Code[20];IMaintenanceScheme@1100528802 : Code[20];IBaseInspectionList@1100528807 : Code[20];IReferenceDate@1100528801 : Date);
    VAR
      CancelledPlantInspectionLine@1100528806 : Record 11072683;
      ApplicableIndexDate@1100528808 : Date;
      DummyCancellationLevel@1100528809 : Option;
    BEGIN
      IF OPlantInspectionLine.FINDSET THEN
        REPEAT
          IF GetApplicableBaseInspectionListIndexDate(IPlantType, IBaseInspectionList, IReferenceDate, ApplicableIndexDate, ILevel, ILevelCode, IMaintenanceScheme) THEN
            IF OPlantInspectionLine.IsCancelled(
              ILevel,
              IPlantType,
              ILevelCode,
              IMaintenanceScheme,
              IBaseInspectionList,
              ApplicableIndexDate,
              DummyCancellationLevel) THEN
                OPlantInspectionLine.DELETE;
        UNTIL OPlantInspectionLine.NEXT = 0;
    END;

    PROCEDURE GetNoOfServiceOrders@1100528802(IPlantType@1100528802 : Code[20];IPlantNumber@1100528803 : Code[10];IStatus@1100528800 : Integer) : Integer;
    VAR
      ServiceOrder@1100528801 : Record 11012823;
    BEGIN
      IF (IPlantType = '') OR (IPlantNumber = '') THEN
        EXIT;

      ServiceOrder.SETRANGE("Plant Type", IPlantType);
      ServiceOrder.SETRANGE("Plant Number", IPlantNumber);
      IF IStatus >= 0 THEN
        ServiceOrder.SETRANGE(Status, IStatus);

      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowNoOfServiceOrders@1100528803(IPlantType@1100528802 : Code[20];IPlantNumber@1100528801 : Code[10];IStatus@1100528800 : Integer);
    VAR
      ServiceOrder@1100528804 : Record 11012823;
      ServiceOrderListPage@1100528803 : Page 11012830;
    BEGIN
      IF (IPlantType = '') OR (IPlantNumber = '') THEN
        EXIT;

      ServiceOrder.SETRANGE("Plant Type", IPlantType);
      ServiceOrder.SETRANGE("Plant Number", IPlantNumber);
      IF IStatus >= 0 THEN
        ServiceOrder.SETRANGE(Status, IStatus);

      ServiceOrderListPage.SETTABLEVIEW(ServiceOrder);
      ServiceOrderListPage.RUNMODAL;
    END;

    PROCEDURE ShowPlantType@1100528804(IPlantType@1100528800 : Code[20]);
    VAR
      PlantType@1100528801 : Record 11012551;
      PlantTypePage@1100528802 : Page 11012551;
    BEGIN
      IF PlantType.GET(IPlantType) THEN BEGIN
      PlantTypePage.SETTABLEVIEW(PlantType);
      PlantTypePage.RUNMODAL;
      END;
    END;

    PROCEDURE ShowPlantNo@1100528805(IPlantType@1100528800 : Code[20];IPlantNumber@1100528801 : Code[10]);
    VAR
      PlantNumber@1100528802 : Record 11012552;
      PlantNumberPage@1100528803 : Page 11012554;
    BEGIN
      IF PlantNumber.GET(IPlantType, IPlantNumber) THEN BEGIN
      PlantNumberPage.SETTABLEVIEW(PlantNumber);
      PlantNumberPage.RUNMODAL;
      END;
    END;

    PROCEDURE ShowPlantLocation@1100528807(IPlantLocation@1100528800 : Code[20]);
    VAR
      PlantLocation@1100528801 : Record 11012554;
      PlantLocationPage@1100528802 : Page 11012557;
    BEGIN
      IF PlantLocation.GET(IPlantLocation) THEN BEGIN
      PlantLocationPage.SETTABLEVIEW(PlantLocation);
      PlantLocationPage.RUNMODAL;
      END;
    END;

    PROCEDURE CopyMaintHeaderAndLines@1100528602(IMaintenanceHeader@1100528600 : Record 11072674;INewIndexDate@1100528601 : Date;VAR OMaintenanceHeader@1100528605 : Record 11072674);
    VAR
      PlantMaintSchemeLine@1100528603 : Record 11072675;
      NewPlantMaintSchemeLine@1100528604 : Record 11072675;
      CancelledPlantMaintSchemeLine@1100525000 : Record 11072676;
      NewCancelledPlantMaintSchemeLine@1100525001 : Record 11072676;
    BEGIN
      OMaintenanceHeader := IMaintenanceHeader;
      OMaintenanceHeader.VALIDATE("Index Date", INewIndexDate);
      OMaintenanceHeader.INSERT(TRUE);

      PlantMaintSchemeLine.SETRANGE(Level, IMaintenanceHeader.Level);
      PlantMaintSchemeLine.SETRANGE("Level Code", IMaintenanceHeader."Level Code");
      PlantMaintSchemeLine.SETRANGE("Maintenance Scheme", IMaintenanceHeader."Maintenance Scheme");
      PlantMaintSchemeLine.SETRANGE("Index Date", IMaintenanceHeader."Index Date");
      IF PlantMaintSchemeLine.FINDSET(TRUE) THEN
        REPEAT
          NewPlantMaintSchemeLine := PlantMaintSchemeLine;
          NewPlantMaintSchemeLine.VALIDATE("Index Date", OMaintenanceHeader."Index Date");
          NewPlantMaintSchemeLine.INSERT(TRUE);
        UNTIL PlantMaintSchemeLine.NEXT = 0;

      CancelledPlantMaintSchemeLine.SETRANGE(Level, IMaintenanceHeader.Level);
      CancelledPlantMaintSchemeLine.SETRANGE("Level Code", IMaintenanceHeader."Level Code");
      CancelledPlantMaintSchemeLine.SETRANGE("Maintenance Scheme", IMaintenanceHeader."Maintenance Scheme");
      CancelledPlantMaintSchemeLine.SETRANGE("Index Date", IMaintenanceHeader."Index Date");
      IF CancelledPlantMaintSchemeLine.FINDSET THEN BEGIN
        REPEAT
          NewCancelledPlantMaintSchemeLine := CancelledPlantMaintSchemeLine;
          NewCancelledPlantMaintSchemeLine."Index Date" := OMaintenanceHeader."Index Date";
          NewCancelledPlantMaintSchemeLine.INSERT(TRUE);
        UNTIL CancelledPlantMaintSchemeLine.NEXT = 0;
      END;
    END;

    PROCEDURE IndexMaintLinesViaHeader@1100528622(IMaintenanceHeader@1100528600 : Record 11072674;IMaterialPerc@1100528601 : Decimal;ILaborPerc@1100528603 : Decimal;ISubcontrPerc@1100528605 : Decimal;IPlantPerc@1100528604 : Decimal;ISundryPerc@1100528606 : Decimal;IRoundAmounts@1100528607 : Decimal);
    VAR
      PlantMaintSchemeVersionLine@1100528602 : Record 11072675;
    BEGIN
      IF IRoundAmounts = 0 THEN
        IRoundAmounts := 0.01;
      PlantMaintSchemeVersionLine.SETRANGE(Level, IMaintenanceHeader.Level);
      PlantMaintSchemeVersionLine.SETRANGE("Level Code", IMaintenanceHeader."Level Code");
      PlantMaintSchemeVersionLine.SETRANGE("Maintenance Scheme", IMaintenanceHeader."Maintenance Scheme");
      PlantMaintSchemeVersionLine.SETRANGE("Index Date", IMaintenanceHeader."Index Date");
      IF PlantMaintSchemeVersionLine.FINDSET(TRUE) THEN
        REPEAT
          PlantMaintSchemeVersionLine.VALIDATE("Index Date");
          CASE PlantMaintSchemeVersionLine."Cost Type" OF
            PlantMaintSchemeVersionLine."Cost Type"::Labor:
              IF PlantMaintSchemeVersionLine."Rate Code" = '' THEN BEGIN
                PlantMaintSchemeVersionLine.Rate *= (100 + ILaborPerc) / 100;
                PlantMaintSchemeVersionLine.Rate := ROUND(PlantMaintSchemeVersionLine.Rate, IRoundAmounts);
                PlantMaintSchemeVersionLine.VALIDATE(Rate);
              END;
          ELSE
            CASE PlantMaintSchemeVersionLine."Cost Type" OF
              PlantMaintSchemeVersionLine."Cost Type"::Material:
                IF (PlantMaintSchemeVersionLine."Item No." + PlantMaintSchemeVersionLine."Basic Item" + PlantMaintSchemeVersionLine."Trade Item" = '')
                THEN
                  PlantMaintSchemeVersionLine."Gross Price" *= (100 + IMaterialPerc) / 100;
              PlantMaintSchemeVersionLine."Cost Type"::Subcontracting:
                PlantMaintSchemeVersionLine."Gross Price" *= (100 + ISubcontrPerc) / 100;
              PlantMaintSchemeVersionLine."Cost Type"::Plant:
                PlantMaintSchemeVersionLine."Gross Price" *= (100 + IPlantPerc) / 100;
              PlantMaintSchemeVersionLine."Cost Type"::Sundry:
                PlantMaintSchemeVersionLine."Gross Price" *= (100 + ISundryPerc) / 100;
            END;
            PlantMaintSchemeVersionLine."Gross Price" := ROUND(PlantMaintSchemeVersionLine."Gross Price", IRoundAmounts);
            PlantMaintSchemeVersionLine.VALIDATE("Gross Price");
          END;
          PlantMaintSchemeVersionLine.MODIFY(TRUE);
        UNTIL PlantMaintSchemeVersionLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

