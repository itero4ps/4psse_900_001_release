OBJECT Codeunit 11012873 Import IBIS-Trad Service
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1210190001 : TextConst 'ENU=File with Budget Lines does not exist: %1';
      Text001@1210190002 : TextConst 'ENU=File with Hours/Factor does not exist: %1';
      Text002@1210190003 : TextConst 'ENU=File with General Data does not exist: %1';
      GenLedgSetup@1210190033 : Record 98;
      BudgetLine@1210190020 : Record 11012875;
      InStreamStrm@1210190005 : InStream;
      BudgetType@1100485007 : Code[3];
      ServOrderNo@1100525000 : Code[20];
      IbisVersion@1100485004 : Text[10];
      Txt@1210190006 : Text[1024];
      RecordCode1Txt@1210190008 : Text[8];
      Text004@1210190011 : TextConst 'ENU=Budget Type is not of traditional Trad Estimate';
      AmntTxt@1210190013 : Text[80];
      NettoTotDec@1210190014 : Decimal;
      BrutoTotDec@1100485003 : Decimal;
      HoursDec@1210190015 : Decimal;
      LaborDec@1210190016 : Decimal;
      MaterialDec@1210190017 : Decimal;
      PlantDec@1210190018 : Decimal;
      SubcDec@1210190019 : Decimal;
      Text006@1210190022 : TextConst 'ENU=%1 %2 does not match imported amount %3';
      Text017@1210190034 : TextConst 'ENU=Currceny Budget differs from Local Currency';
      Text021@1100485005 : TextConst 'ENU=Version unknown, file can not be read.';
      Text022@1100485006 : TextConst 'ENU=Trad-Version %1  can not be imported';

    PROCEDURE ImportTradTxtBudget@1210190001(ServiceOrderNo@1210190004 : Code[20];lFolder@1100485002 : Text[250];b_FileName@1210190000 : Text[100]);
    VAR
      TempBlob@1100525001 : Record 99008535;
      FileMgt@1100525000 : Codeunit 419;
      ImportTradTxt620@1100525004 : XMLport 11012805;
      IStream@1100525002 : InStream;
    BEGIN
      ServOrderNo := ServiceOrderNo;
      TestFilesExist(lFolder,b_FileName);
      ImportGeneralData(lFolder,'g'+COPYSTR(b_FileName,2));
      IbisVersion := INSSTR(IbisVersion, '.', 2);
      CASE IbisVersion OF
        '6.20'..'6.99',          //* So now the whole version-6 series from 6.20
        '7.00'..'7.99':          //* Also version-7 series (HK: same as 6 series)
          BEGIN
            ImportTradTxt620.SetSelections(ServOrderNo, lFolder, 'f'+COPYSTR(b_FileName,2), IbisVersion, BudgetType);
            FileMgt.BLOBImport4PS(TempBlob, lFolder + b_FileName, FALSE);
            TempBlob.Blob.CREATEINSTREAM(IStream);
            ImportTradTxt620.SETSOURCE(IStream);
            ImportTradTxt620.IMPORT;
          END;
        ELSE
          ERROR(Text022, IbisVersion);
      END;

      BudgetLine.SETRANGE("Budget Type", BudgetLine."Budget Type"::Order);
      BudgetLine.SETRANGE("Service Order No.", ServOrderNo);
      IF BudgetLine.FINDFIRST THEN BEGIN
        BudgetLine.CALCFIELDS("Total Labor", "Total Material", "Total Subcontracting", "Total Plant", "Total Hours", "Total Amount");
        IF ROUND(ABS(BudgetLine."Total Labor" - LaborDec), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Labor"),
            STRSUBSTNO(Text006, BudgetLine.FIELDCAPTION("Total Labor"), LaborDec, BudgetLine."Total Labor"));
        IF ROUND(ABS(BudgetLine."Total Material" - MaterialDec), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Material"),
            STRSUBSTNO(Text006, BudgetLine.FIELDCAPTION("Total Material"), MaterialDec, BudgetLine."Total Material"));
        IF ROUND(ABS(BudgetLine."Total Subcontracting" - SubcDec), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Subcontracting"),
            STRSUBSTNO(Text006, BudgetLine.FIELDCAPTION("Total Subcontracting"), SubcDec, BudgetLine."Total Subcontracting"));
        IF ROUND(ABS(BudgetLine."Total Plant" - PlantDec), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Plant"),
            STRSUBSTNO(Text006, BudgetLine.FIELDCAPTION("Total Plant"), PlantDec, BudgetLine."Total Plant"));
        IF ROUND(ABS(BudgetLine."Total Hours" - HoursDec), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Hours"),
            STRSUBSTNO(Text006, BudgetLine.FIELDCAPTION("Total Hours"), HoursDec, BudgetLine."Total Hours"));
        IF ROUND(ABS(BudgetLine."Total Amount" - NettoTotDec), 1) > 0 THEN
          StoreMessage(BudgetLine.FIELDCAPTION("Total Amount"),
            STRSUBSTNO(Text006, BudgetLine.FIELDCAPTION("Total Amount"), NettoTotDec, BudgetLine."Total Amount"));
      END;
    END;

    PROCEDURE TestFilesExist@1210190002(lFolder@1100485003 : Text[250];b_FileName@1210190000 : Text[100]);
    VAR
      FileMgt@1100525000 : Codeunit 419;
      b_PathFileName@1100409000 : Text[250];
      f_PathFileName@1100485001 : Text[250];
      g_PathFileName@1100485002 : Text[250];
    BEGIN
      b_PathFileName := lFolder + b_FileName;
      f_PathFileName := lFolder + 'f' + COPYSTR(b_FileName,2);
      g_PathFileName := lFolder + 'g' + COPYSTR(b_FileName,2);
      IF NOT FileMgt.ClientFileExists(b_PathFileName) THEN BEGIN
        b_PathFileName := CONVERTSTR(b_PathFileName, '\', '/');
        ERROR(STRSUBSTNO(Text000, b_PathFileName));
      END;
      IF NOT FileMgt.ClientFileExists(f_PathFileName) THEN BEGIN
        f_PathFileName := CONVERTSTR(f_PathFileName, '\', '/');
        ERROR(STRSUBSTNO(Text001, f_PathFileName));
      END;
      IF NOT FileMgt.ClientFileExists(g_PathFileName) THEN BEGIN
        g_PathFileName := CONVERTSTR(g_PathFileName, '\', '/');
        ERROR(STRSUBSTNO(Text002, g_PathFileName));
      END;
    END;

    PROCEDURE ImportGeneralData@1210190000(lFolder@1100485001 : Text[250];g_FileName@1210190000 : Text[100]);
    VAR
      TempBlob@1100525001 : Record 99008535;
      FileMgt@1100525000 : Codeunit 419;
      lvEOS@1100485002 : Boolean;
    BEGIN
      GenLedgSetup.GET;
      GenLedgSetup.TESTFIELD("LCY Code");

      lvEOS := FALSE;
      IbisVersion := '';
      BudgetType := '';

      FileMgt.BLOBImport4PS(TempBlob, lFolder + g_FileName, FALSE);
      TempBlob.Blob.CREATEINSTREAM(InStreamStrm);

      WHILE (NOT InStreamStrm.EOS()) AND (NOT lvEOS) DO BEGIN
        InStreamStrm.READTEXT(Txt);
        lvEOS := TRUE;
        IbisVersion := COPYSTR(Txt,2,3);
        IF NOT (COPYSTR(Txt,5,3) IN ['EUR', '', GenLedgSetup."LCY Code"]) THEN  //* Valuta
          ERROR(Text017);
        BudgetType := COPYSTR(Txt,8,3);
        IF NOT (BudgetType IN ['TRA', 'TRU']) THEN
          ERROR(Text004, BudgetType);
        EVALUATE(HoursDec,ConvertAmnt(COPYSTR(Txt,11,17)));
        EVALUATE(LaborDec,ConvertAmnt(COPYSTR(Txt,48,17)));
        EVALUATE(MaterialDec,ConvertAmnt(COPYSTR(Txt,65,17)));
        EVALUATE(PlantDec,ConvertAmnt(COPYSTR(Txt,82,17)));
        EVALUATE(SubcDec,ConvertAmnt(COPYSTR(Txt,99,17)));
        EVALUATE(NettoTotDec,ConvertAmnt(COPYSTR(Txt,133,17)));
      END;

      IF IbisVersion = '' THEN
        ERROR(Text021);
    END;

    PROCEDURE ConvertAmnt@1210190013(IAmtTxt@1100485000 : Text[80]) @1210190000 : Text[80];
    BEGIN
      AmntTxt := IAmtTxt;
      IF AmntTxt <> '' THEN BEGIN
        AmntTxt := DELCHR(AmntTxt,'=',' ');
        AmntTxt := CONVERTSTR(AmntTxt,'.',',');
        EXIT(AmntTxt);
      END ELSE
        EXIT('0');
    END;

    PROCEDURE CopyTextString@1210190003() CopyTxt@1210190000 : Text[80];
    BEGIN
      CopyTxt := COPYSTR(Txt,46,80);
      CopyTxt := DELCHR(CopyTxt,'=',' ');
      EXIT(CopyTxt);
    END;

    PROCEDURE StoreMessage@5(Desc@11012000 : Text[50];Mess@11012001 : Text[250]);
    VAR
      Errors@1210190000 : Record 11012051;
      NextLineNo@11012002 : Integer;
    BEGIN
      WITH Errors DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Import Budget");
        IF FINDLAST THEN
          NextLineNo := "Line No." + 1
        ELSE
          NextLineNo := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Import Budget";
        "Service Order No." := ServOrderNo;
        "Line No." := NextLineNo;
        "Error message" := Mess;
        Description := Desc;
        INSERT;
      END;
    END;

    BEGIN
    {
      DP00693  Copied from Project (C11012018)  Only import TRAD-TXT and TRAD-XML in Service Order Budget Lines
    }
    END.
  }
}

