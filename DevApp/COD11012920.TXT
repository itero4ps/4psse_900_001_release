OBJECT Codeunit 11012920 MS Project Automation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProjSetupRec@11012000 : Record 315;
      text11012000@11012001 : TextConst 'ENU=Planning exists for this project, delete ?';
      BudgetRec@1210190003 : Record 11012001;
      ProjElemRec@1210190006 : Record 11012010;
      ProgrLineRec@1210190008 : Record 11012037;
      LayOffRec@1210190004 : Record 11012920;
      Help1Rec@1210190005 : TEMPORARY Record 11012921;
      Help2Rec@1210190001 : Record 11012921;
      appl@11012002 : Automation "{A7107640-94DF-1068-855E-00DD01075445} 4.3:{36D27C48-A1E8-11D3-BA55-00C04F72F325}:Unknown Automation Server.Application";
      MpProj@11012003 : Automation "{A7107640-94DF-1068-855E-00DD01075445} 4.3:{1019A320-508A-11CF-A49D-00AA00574C74}:Unknown Automation Server.Project";
      MpTask@11012006 : Automation "{A7107640-94DF-1068-855E-00DD01075445} 4.3:{000C0C3F-0000-0000-C000-000000000046}:Unknown Automation Server.Task";
      FileMgt@1100525500 : Codeunit 419;
      pjTaskRollup@11012013 : Integer;
      pjTaskName@11012015 : Integer;
      text11012001@11012016 : TextConst 'ENU=Planning not removed, file might be in use';
      text11012002@11012017 : TextConst 'ENU=There is no planning present for project %1. Create first.';
      pjTaskStart@11012019 : Integer;
      pjTaskDuration@11012020 : Integer;
      pjTaskFinish@11012021 : Integer;
      pjTaskText1@11012025 : Integer;
      pjTaskText2@11012030 : Integer;
      pjTaskText3@11012045 : Integer;
      pjTaskPercentComplete@11012026 : Integer;
      pjTaskID@11012028 : Integer;
      pjTaskWork@1210190009 : Integer;
      Text001@11012035 : TextConst 'ENU=Project         #1##########\\';
      Text002@11012033 : TextConst 'ENU=from               #2################# @3@@@@@@@@@@@@@';
      Window@11012036 : Dialog;
      Text004@11012037 : TextConst 'ENU=Collect Task Data';
      Text005@11012038 : TextConst 'ENU=Update MS Project Calendar';
      Text006@11012039 : TextConst 'ENU=Create Tasks in MS Project';
      Text007@11012040 : TextConst 'ENU=Indent Elements and Tasks in MS Project';
      NumRows@1210190017 : Integer;
      NumRecords@1210190016 : Integer;
      LineCount@1210190012 : Integer;
      Text008@11012042 : TextConst 'ENU=Starting MS Project';
      Text009@11012043 : TextConst 'ENU=Collect Task Data from MS Project';
      Text010@11012044 : TextConst 'ENU=Process collected Task Data from MS Project';
      LineNo@1210190000 : Integer;
      HelpInt@1210190010 : Integer;
      HelpElem@1210190014 : Code[10];
      HelpTxt@1210190015 : Text[30];
      step@1210190011 : Integer;
      i@1210190013 : Integer;
      strName@1210190024 : Text[50];
      strNo@1210190025 : Text[30];
      strYes@1210190026 : Text[30];
      strEndDate@1210190027 : Text[30];
      strStdDesc@1210190018 : Text[30];

    PROCEDURE CreatePlanning@11012001(ProjRec@11012000 : Record 11072003);
    BEGIN
      CLEAR(appl);
      ProjSetupRec.GET;
      SetInitialLanguageStrings;

      IF FileMgt.ClientFileExists(
        ProjSetupRec."Pathname MS Project files" + ProjRec."No." + '.mpp')
      THEN
        IF CONFIRM(text11012000,FALSE) THEN BEGIN
          IF NOT FileMgt.DeleteClientFile4PS(
            ProjSetupRec."Pathname MS Project files" + ProjRec."No." + '.mpp', FALSE)
          THEN
            ERROR(text11012001);
          //**4PS.sn, 3-4-2010: M16200
          Help2Rec.DELETEALL;
          Help1Rec.DELETEALL;
          //**4PS.en
        END ELSE
          EXIT;

      Window.OPEN(
         Text001 +
         Text002);
      Window.UPDATE(1,ProjRec."No.");
      Window.UPDATE(2,Text008);

      CREATE(appl, FALSE, TRUE);
      MpProj := appl.Projects.Add(FALSE);
      HelpInt := appl.Projects.Count;

      MpProj.Title := 'Project' + ' ' + ProjRec."No." + ' ' + ProjRec.Description;

      IF ProjRec."Starting Date" <> 0D THEN
        MpProj.ProjectStart := FORMAT(ProjRec."Starting Date");

      //appl.OptionsSchedule(TRUE,FALSE,TRUE,TRUE,0,0,5); Zet instelling van planning in uren ipv dagen

      CreateCalender(ProjRec);

      CreateScheduleLines(ProjRec);

      Window.UPDATE(2,Text006);
      LineCount := 1;
      Help1Rec.RESET;
      Help1Rec.SETRANGE("Project No.",ProjRec."No.");
      IF Help1Rec.FINDSET(FALSE, FALSE) THEN BEGIN
        NumRecords := Help1Rec.COUNT;
        REPEAT
          IF Help1Rec."Activity Line" THEN BEGIN
            AddTask(Help1Rec.Description);
            MpTask.Text1(Help1Rec.Element);
            MpTask.Rollup := TRUE;
          END ELSE BEGIN
            AddTask(GetCostObject(Help1Rec."Cost Object"));
            Help1Rec.CALCFIELDS("Budget Hours");
            MpTask.Work :=  Help1Rec."Budget Hours" * 60;
            IF ProjRec."Starting Date" <> 0D THEN
              MpTask.Start := ProjRec."Starting Date";
            MpTask.Text2(Help1Rec."Cost Object");
            MpTask.Text1(Help1Rec.Element);
          END;
          Window.UPDATE(3,ROUND(LineCount / NumRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL Help1Rec.NEXT = 0;
      END;
      Window.UPDATE(3,0);

      FillVariableValues;
      step := 0;

      Window.UPDATE(2,Text007);
      LineCount := 1;
      NumRecords := MpProj.Tasks.Count;

      FOR i := 1 TO MpProj.Tasks.Count DO BEGIN
        appl.SelectTaskField(step,strName);
        IF (appl.ActiveCell.Task.GetField(pjTaskRollup)) = strNo THEN
          appl.OutlineIndent(1);
        step := 1;
        Window.UPDATE(3,ROUND(LineCount / NumRecords * 10000,1));
        LineCount := LineCount + 1;
      END;
      Window.UPDATE(3,0);

      appl.FileSaveAs(ProjSetupRec."Pathname MS Project files" + ProjRec."No." + '.mpp');
      appl.FileClose;
      Window.CLOSE;
    END;

    PROCEDURE AddTask@11012000(lDescrTxt@11012000 : Text[50]);
    BEGIN
      MpTask := MpProj.Tasks.Add(lDescrTxt);
    END;

    PROCEDURE CreateScheduleLines@11012002(lProjRec@11012000 : Record 11072003);
    BEGIN
      Window.UPDATE(2,Text004);
      LineCount := 1;
      LineNo := 1;
      HelpElem := '';

      SetInitialLanguageStrings;

      Help1Rec.SETRANGE("Project No.",lProjRec."No.");
      Help1Rec.SETRANGE("Detail Line",TRUE);

      BudgetRec.SETRANGE("Project No.",lProjRec."No.");
      BudgetRec.SETRANGE("Cost Type",BudgetRec."Cost Type"::Labor);
      IF BudgetRec.FINDSET(FALSE, FALSE) THEN BEGIN
        NumRecords := BudgetRec.COUNT;
        REPEAT
          IF HelpElem <> BudgetRec.Element THEN BEGIN
            Help1Rec.INIT;
            Help1Rec."Project No." := lProjRec."No.";
            Help1Rec."Line No." := LineNo;
            LineNo := LineNo + 1;
            Help1Rec."Activity Line" := TRUE;
            Help1Rec."Detail Line" := TRUE;
            Help1Rec.Element := BudgetRec.Element;
            ProjElemRec.GET(lProjRec."No.",Help1Rec.Element);
            Help1Rec.Description := ProjElemRec.Description;
            Help1Rec.INSERT;
          END;

          Help1Rec.SETRANGE(Element,BudgetRec.Element);
          Help1Rec.SETRANGE("Cost Object",BudgetRec."Cost Object");
          IF NOT Help1Rec.FINDFIRST THEN BEGIN
            Help1Rec.INIT;
            Help1Rec."Project No." := lProjRec."No.";
            Help1Rec."Line No." := LineNo;
            LineNo := LineNo + 1;
            Help1Rec."Activity Line" := FALSE;
            Help1Rec."Detail Line" := TRUE;
            Help1Rec.Element := BudgetRec.Element;
            Help1Rec."Cost Object" := BudgetRec."Cost Object";
            Help1Rec.INSERT;
            HelpElem := BudgetRec.Element;
          END;
          Window.UPDATE(3,ROUND(LineCount / NumRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL BudgetRec.NEXT = 0;
      END;

      Help1Rec.SETRANGE(Element);
      Help1Rec.SETRANGE("Cost Object");
      Window.UPDATE(3,0);
    END;

    PROCEDURE UpdateSchedule@11012005(lProjRec@11012000 : Record 11072003;lProgrDate@11012001 : Date);
    BEGIN
      CLEAR(appl);
      CLEARALL;
      Help2Rec.DELETEALL;
      Help1Rec.DELETEALL;

      SetInitialLanguageStrings;

      OpenPlanning(lProjRec,FALSE);
      FillVariableValues;
      appl.SelectEnd;
      EVALUATE(NumRows,(appl.ActiveCell.Task.GetField(pjTaskID)));
      HelpTxt := (appl.ActiveCell.Task.GetField(pjTaskName));
      appl.SelectTaskField(1,strName,FALSE);
      step := 0;

      Window.UPDATE(2,Text009);
      LineCount := 1;
      NumRecords := NumRows;

      FOR i := 1 TO NumRows DO BEGIN
        Help2Rec.INIT;
        appl.SelectTaskField(step,strName);
        Help2Rec."Project No." := lProjRec."No.";

        Help2Rec."Detail Line" := FALSE;
        Help2Rec."Line No." := i;

        appl.SelectTaskField(0,strName);
        Help2Rec.Element := (appl.ActiveCell.Task.GetField(pjTaskText1));

        appl.SelectTaskField(0,strName);
        Help2Rec."Cost Object" := (appl.ActiveCell.Task.GetField(pjTaskText2));

        appl.SelectTaskField(0,strName);
        HelpTxt := (appl.ActiveCell.Task.GetField(pjTaskStart));
        EVALUATE(Help2Rec."Start Date", COPYSTR(appl.ActiveCell.Task.GetField(pjTaskStart), 5, 13));

        appl.SelectTaskField(0,strEndDate);
        EVALUATE(Help2Rec."End Date", COPYSTR(appl.ActiveCell.Task.GetField(pjTaskFinish), 5, 13));
        HelpTxt := (appl.ActiveCell.Task.GetField(pjTaskFinish));

        appl.SelectTaskField(0,strName);
        HelpTxt := (appl.ActiveCell.Task.GetField(pjTaskPercentComplete));
        HelpTxt := DELCHR(HelpTxt,'=','%');
        EVALUATE(Help2Rec.Progress,HelpTxt);

        appl.SelectTaskField(0,strName);
        IF (appl.ActiveCell.Task.GetField(pjTaskRollup)) = strYes THEN BEGIN
          appl.SelectTaskField(0,strName);
          Help2Rec.Description := (appl.ActiveCell.Task.GetField(pjTaskName));
          Help2Rec."Activity Line" := TRUE;
        END;

        appl.SelectTaskField(0,strName);
        Help2Rec.CALCFIELDS("Budget Hours");
        appl.SetTaskField('Work',FORMAT(Help2Rec."Budget Hours"),TRUE,TRUE,0,'');
        Help2Rec.INSERT;
        step := 1;
        Window.UPDATE(3,ROUND(LineCount / NumRecords * 10000,1));
        LineCount := LineCount + 1;
      END;
      Window.UPDATE(3,0);

      //CLEAR(app);
      UpdateBudget(lProjRec);
      UpdateProgress(lProgrDate);
      appl.FileClose;
      Window.CLOSE;
    END;

    PROCEDURE OpenPlanning@11012003(lProjRec@11012000 : Record 11072003;DisplayPlanning@11012001 : Boolean);
    BEGIN
      Window.OPEN(
         Text001 +
         Text002);
      Window.UPDATE(1,lProjRec."No.");
      Window.UPDATE(2,Text008);

      CLEAR(appl);
      CREATE(appl, FALSE, TRUE);
      ProjSetupRec.GET;
      SetInitialLanguageStrings;

      IF FileMgt.ClientFileExists(
        ProjSetupRec."Pathname MS Project files" + lProjRec."No." + '.mpp')
      THEN
        appl.FileOpen(ProjSetupRec."Pathname MS Project files" + lProjRec."No." + '.mpp')
      ELSE
        ERROR(text11012002,lProjRec."No.");

      IF DisplayPlanning THEN BEGIN
        appl.Visible(TRUE);
        Window.CLOSE;
      END;
    END;

    PROCEDURE CreateCalender@11012004(lProjRec@11012000 : Record 11072003);
    BEGIN
      Window.UPDATE(2,Text005);
      LayOffRec.SETRANGE("Project No.",lProjRec."No.");
      LayOffRec.SETRANGE(Delay,TRUE);
      LineCount := 1;
      IF LayOffRec.FINDSET(FALSE, FALSE) THEN BEGIN
        NumRecords := LayOffRec.COUNT;
        REPEAT
          appl.BaseCalendarEditDays(strStdDesc,
                                   FORMAT(LayOffRec.Date),
                                   FORMAT(LayOffRec.Date),
                                   1,
                                   FALSE);
          Window.UPDATE(3,ROUND(LineCount / NumRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL LayOffRec.NEXT = 0;
      END;
      Window.UPDATE(3,0);
    END;

    PROCEDURE FillVariableValues@11012006();
    BEGIN
      pjTaskName := 188743694;
      pjTaskRollup := 188743762;
      pjTaskStart := 188743715;
      pjTaskDuration := 188743709;
      pjTaskFinish := 188743716;
      pjTaskText1 := 188743731;
      pjTaskPercentComplete := 188743712;
      pjTaskID := 188743703;
      pjTaskText2 := 188743734;
      pjTaskText3 := 188743737;
      pjTaskWork := 188743846;
    END;

    PROCEDURE UpdateProgress@11012008(lProgrdate@11012000 : Date);
    BEGIN
      Window.UPDATE(2,Text010);
      LineCount := 1;
      Help2Rec.SETRANGE(Element);
      Help2Rec.SETRANGE("Activity Line");
      Help2Rec.SETRANGE("Cost Object");

      SetInitialLanguageStrings;

      IF Help2Rec.FINDSET(FALSE, FALSE) THEN BEGIN
        NumRecords := Help2Rec.COUNT;
        ProgrLineRec.RESET;
        ProgrLineRec.SETRANGE("Project No.",Help2Rec."Project No.");
        ProgrLineRec.SETRANGE("Progress Date",lProgrdate);
        REPEAT
          IF Help2Rec."Activity Line" THEN BEGIN
            IF ProjElemRec.GET(Help2Rec."Project No.",Help2Rec.Element) THEN BEGIN
              IF Help2Rec."Start Date" <> 0D THEN
                ProjElemRec."Starting Date" := Help2Rec."Start Date";
              IF Help2Rec."End Date" <> 0D THEN
                ProjElemRec."Ending Date" := Help2Rec."End Date";
              ProjElemRec.Description := COPYSTR(Help2Rec.Description, 1, MAXSTRLEN(ProjElemRec.Description));
              ProjElemRec.MODIFY;
            END;
          END ELSE BEGIN
            ProgrLineRec.SETRANGE(Element,Help2Rec.Element);
            ProgrLineRec.SETRANGE("Cost Object",Help2Rec."Cost Object");
            IF ProgrLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              ProgrLineRec.VALIDATE("Cumulative Progress %",Help2Rec.Progress);
              ProgrLineRec.MODIFY;
            END;
          END;
          Window.UPDATE(3,ROUND(LineCount / NumRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL Help2Rec.NEXT = 0;
      END;
      Window.UPDATE(3,0);
    END;

    PROCEDURE UpdateBudget@1210190000(lProjRec@1210190000 : Record 11072003);
    BEGIN
      SetInitialLanguageStrings;
      CreateScheduleLines(lProjRec);

      Help2Rec.SETCURRENTKEY("Project No.",Element,"Cost Object");
      Help2Rec.SETRANGE("Project No.",lProjRec."No.");

      Help1Rec.SETCURRENTKEY("Project No.",Element,"Cost Object");
      Help1Rec.SETRANGE("Project No.",lProjRec."No.");

      IF Help1Rec.FINDSET(FALSE, FALSE) THEN BEGIN
        appl.SelectEnd;

        REPEAT
          Help2Rec.SETRANGE(Element,Help1Rec.Element);
          Help2Rec.SETRANGE("Activity Line",Help1Rec."Activity Line");
          IF NOT Help2Rec.FINDSET(FALSE, FALSE) THEN BEGIN
            IF Help1Rec."Activity Line" THEN BEGIN
              appl.SelectTaskField(1,strName);
              ProjElemRec.GET(lProjRec."No.",Help1Rec.Element);
              appl.SetTaskField(strName,FORMAT(ProjElemRec.Description));
              appl.SelectTaskField(0,strName);
              appl.SetTaskField('Tekst1',FORMAT(Help1Rec.Element));
              appl.SelectTaskField(0,strName);
              appl.SetTaskField('Samenvouwen',FORMAT(strYes));
              appl.SelectTaskField(0,strName);
              appl.SetTaskField('Tekst3',FORMAT('Nieuw'));
              appl.SelectRow;
              appl.OutlineOutdent(1);
            END ELSE BEGIN
              appl.SelectTaskField(1,strName);
              appl.SetTaskField(strName,FORMAT(GetCostObject(Help1Rec."Cost Object")));
              appl.SelectTaskField(0,strName);
              appl.SetTaskField('Tekst2',FORMAT(Help1Rec."Cost Object"));
              appl.SelectTaskField(0,strName);
              appl.SetTaskField('Tekst1',FORMAT(Help1Rec.Element));
              IF lProjRec."Starting Date" <> 0D THEN BEGIN
                appl.SelectTaskField(0,strName);
                appl.SetTaskField('Begindatum',FORMAT(lProjRec."Starting Date"));
              END;
              appl.SelectTaskField(0,strName);
              Help1Rec.CALCFIELDS("Budget Hours");
              appl.SetTaskField('Werk',FORMAT(Help1Rec."Budget Hours"));
              appl.SelectRow;
              appl.OutlineIndent(1);
            END;
          END
        UNTIL Help1Rec.NEXT = 0;
      END;

      appl.FileSave;
    END;

    PROCEDURE GetCostObject@1210190001(lvCostObject@1210190001 : Code[20]) : Text[50];
    VAR
      CostObjectRec@1210190000 : Record 349;
    BEGIN
      CostObjectRec.SETRANGE("Global Dimension No.",2);
      CostObjectRec.SETRANGE(Code, lvCostObject);
      CostObjectRec.FINDFIRST;
      EXIT(CostObjectRec.Name);
    END;

    PROCEDURE SetInitialLanguageStrings@1210190002();
    BEGIN
      ProjSetupRec.GET;
      IF ProjSetupRec."MS Project Language" = ProjSetupRec."MS Project Language"::English THEN BEGIN
        strName    := 'Name';
        strNo      := 'No';
        strYes     := 'Yes';
        strEndDate := 'Finish';
        strStdDesc := 'Standard';
      END ELSE BEGIN
        strName    := 'Naam';
        strNo      := 'Nee';
        strYes     := 'Ja';
        strEndDate := 'Einddatum';
        strStdDesc := 'Standaard';
      END;
    END;

    BEGIN
    END.
  }
}

