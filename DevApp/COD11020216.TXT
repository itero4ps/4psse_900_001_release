OBJECT Codeunit 11020216 Shell Automation Functions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Shell32Aut@1100525000 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{13709620-C279-11CE-A49E-444553540000}:'Microsoft Shell Controls And Automation'.Shell";
      TmpFolderAut@1100525008 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{F0D2D8EF-3890-11D2-BF8B-00C04FB93661}:'Microsoft Shell Controls And Automation'.Folder2";
      ZIPFileNameTxt@1100525002 : Text[250];
      TempDirPathTXT@1100525007 : Text[250];

    PROCEDURE CreateZipFile@1100525002(parZIPFileNameTxt@1100525000 : Text[250]);
    VAR
      lvZIPFile@1100525003 : File;
      FileMgt@1100525005 : Codeunit 419;
      OperatingSystemMgt@1100409000 : Codeunit 11012364;
      ServerZIPFileName@1100525006 : Text[1024];
      lvValInt@1100525001 : Integer;
      lvCounterInt@1100525002 : Integer;
    BEGIN
      ZIPFileNameTxt := parZIPFileNameTxt;

      ServerZIPFileName := FileMgt.ServerTempFileName('zip');
      lvZIPFile.CREATE(ServerZIPFileName);

      lvZIPFile.TEXTMODE(FALSE);

      lvValInt := 101010256;
      lvZIPFile.WRITE(lvValInt);

      lvValInt := 0;
      FOR lvCounterInt := 1 TO 9 DO
        lvZIPFile.WRITE(lvValInt);
      lvZIPFile.CLOSE;

      FileMgt.DownloadToFile(
        ServerZIPFileName, ZIPFileNameTxt);
      ERASE(ServerZIPFileName);

      CREATE(Shell32Aut, FALSE, TRUE);

      //Create TempDir so this can be zipped completely
      TempDirPathTXT := OperatingSystemMgt.ClientEnviron('TEMP');
      TempDirPathTXT := TempDirPathTXT + '\' + '4PSTmpZip';

      IF NOT FileMgt.ClientDirectoryExists(TempDirPathTXT) THEN
        FileMgt.CreateClientFolder(TempDirPathTXT, TRUE)
      ELSE BEGIN
        FileMgt.DeleteClientFolder(TempDirPathTXT); //Delete previous contents
        FileMgt.CreateClientFolder(TempDirPathTXT, TRUE);
      END;
    END;

    PROCEDURE AddFileToZip@1100525003(parAddFileToZIPTxt@1100525000 : Text[250]);
    BEGIN
      IF ISCLEAR(Shell32Aut) THEN
        EXIT;

      TmpFolderAut := Shell32Aut.NameSpace(TempDirPathTXT);
      TmpFolderAut.CopyHere(parAddFileToZIPTxt, 256+1024);
    END;

    PROCEDURE BuildAndCloseZipFile@1100525004();
    VAR
      lvZipFolderAut@1100525000 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{F0D2D8EF-3890-11D2-BF8B-00C04FB93661}:'Microsoft Shell Controls And Automation'.Folder2";
      lvTmpItemsAut@1100525002 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{EAA7C309-BBEC-49D5-821D-64D966CB667F}:'Microsoft Shell Controls And Automation'.FolderItems3";
      lvStartTime@1100525001 : Time;
    BEGIN
      IF ISCLEAR(Shell32Aut) THEN
        EXIT;

      //If AddFileToZip has not been used, an empty ZIP File remains.
      IF NOT ISCLEAR(TmpFolderAut) THEN BEGIN
        lvZipFolderAut := Shell32Aut.NameSpace(ZIPFileNameTxt);
        lvTmpItemsAut := TmpFolderAut.Items;
        lvZipFolderAut.CopyHere(lvTmpItemsAut);
      END;
      CLEAR(Shell32Aut);
      IF ISCLEAR(lvZipFolderAut) THEN
        EXIT; //it is an empty zip file

      lvStartTime := TIME;
      REPEAT
        //wait until all files are copied or waited to long (in case user has pressed cancel on the ZIP-progress thingie)
        SLEEP(100);
      UNTIL (TmpFolderAut.Items.Count = lvZipFolderAut.Items.Count) OR (TIME - lvStartTime > 1000*15);
    END;

    BEGIN
    {
      WARNING 001:
      This only works on M$ XP and higher Windows systems!
      Update is available for older windows versions at: ...

      WARNING 002: WWB 23-dec-2008
      Because the CopyHere function is ASynchronic, a SLEEP() after BuildAndCloseZipFile may be required before further action.
      Couldn't figure out a better way to do this 'till now.

      HOW TO USE ZIP Functionality
        1: CreateZipFile(Full Path incl. Zipfile name)        e.g. CreateZip('C:\Example.ZIP');
        2: AddFileToZip(Full Path to file)                    e.g. AddFileToZip('C:\Example\Test.TXT');
           -- Repeat this function for each file. --
        3: BuildAndCloseZipFile()


      UPDATE 001 ZIP Functionality -> WWB 3-Dec-2008:
        Unfortunately, while zipping large files the user is presented with a statusbar which can be cancelled.
        Upon cancelling, counting the number of files in the ZIP won't work anymore, so Navision loops endlessly
        (Looping was necessary because Copy into a zip file is an ASynchronic Function).
        Solution:
          AddFileToZip doesn't immediately zip but copies the file to a temp folder
          BuildAndCloseZipFile starts the actual zipping process which can be cancelled but has no negative effect on Navision
    }
    END.
  }
}

