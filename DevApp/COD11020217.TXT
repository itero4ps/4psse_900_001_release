OBJECT Codeunit 11020217 Prognosis Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProjSetup@1100525026 : Record 315;
      BudgetDec@1100525000 : Decimal;
      BudgetSurchargeDec@1100525001 : Decimal;
      ActualDec@1100525002 : Decimal;
      AllowedDec@1100525003 : Decimal;
      ResultDec@1100525004 : Decimal;
      TotalCostDec@1100525005 : Decimal;
      AvailableDec@1100525006 : Decimal;
      RecNotInvDec@1100525007 : Decimal;
      OpenDec@1100525008 : Decimal;
      OpenAmountHoursDec@1100525009 : Decimal;
      PrognTotCostDec@1100525010 : Decimal;
      BudgHoursDec@1100525011 : Decimal;
      OpenHoursDec@1100525012 : Decimal;
      ActualHoursDec@1100525013 : Decimal;
      AllowedHoursDec@1100525014 : Decimal;
      ResHoursDec@1100525015 : Decimal;
      TotalHoursDec@1100525016 : Decimal;
      AvailHoursDec@1100525017 : Decimal;
      ProgHoursDec@1100525018 : Decimal;
      SurchOpenDec@1100525019 : Decimal;
      SurchOpenAmountHoursDec@1100525020 : Decimal;
      OpenAmountInvDec@1100525021 : Decimal;
      SurchOpenAmountInvDec@1100525022 : Decimal;
      TotCostExclRiscCovDec@1100525023 : Decimal;
      EstimPurchResultDec@1100525024 : Decimal;
      Text001@1100525025 : TextConst 'ENU=Project %1 -  Element %2 does not exist (from surcharges)';
      RiscCoverage@1100528802 : Decimal;
      RiscCoverageWithdraw@1100528801 : Decimal;
      PrognTotHoursDec@1100528800 : Decimal;
      OriginalBudgetAmt@1100529005 : Decimal;
      AdjustmentsBudget@1100529004 : Decimal;
      ExtensionBudget@1100529003 : Decimal;
      OptionsBudget@1100525027 : Decimal;
      PurchaseBudget@1100529002 : Decimal;
      PurchaseAmount@1100529001 : Decimal;
      ActualCostsPurchaseAction@1100529000 : Decimal;

    PROCEDURE RoughPrognTotCost@1100525001(ProjRec@1100525001 : Record 11072003;VAR PrognRec@1100525002 : Record 11012034);
    VAR
      SubProjRec@1100525000 : Record 11072003;
      ExtRec@1100525003 : Record 11012004;
      BudgetLine@1100525007 : Record 11012001;
      CostContMgt@1100525006 : Codeunit 11012006;
    BEGIN
      WITH PrognRec DO BEGIN
        "Rough Prognosis Total Cost" := 0;
        IF "Prognosis Level" = "Prognosis Level"::Detailed THEN
          EXIT;

        SubProjRec.SETCURRENTKEY("Main Project");
        SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
        IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SubProjRec.SETRANGE("No.", ProjRec."No.");
        SubProjRec.SETRANGE("Cumulation Filter", 0D, "Prognosis Date");
        IF SubProjRec.FINDSET THEN
          REPEAT
            SubProjRec.SETRANGE("Project Filter", SubProjRec."No.");
            IF SubProjRec."Settlement Method" = SubProjRec."Settlement Method"::"Fixed Price" THEN BEGIN
              //Fixed Price: budget
              SubProjRec.CALCFIELDS(Budget);
              "Rough Prognosis Total Cost" := "Rough Prognosis Total Cost" + SubProjRec.Budget;

              ExtRec.RESET;
              ExtRec.SETRANGE("Project No.", SubProjRec."No.");
              ExtRec.SETFILTER(Status, '<%1', ExtRec.Status::Order);
              ExtRec.SETRANGE("Include in Expectation", TRUE);
              IF ExtRec.FINDSET THEN
                REPEAT
                  //Add Expected Budget Extensions
                  BudgetLine.SETCURRENTKEY("Project No.", "Extension Contract");
                  BudgetLine.SETRANGE("Project No.", ExtRec."Project No.");
                  BudgetLine.SETRANGE("Extension Contract", ExtRec."Contract No.");
                  BudgetLine.SETFILTER("Extension Contract Status", '<%1', BudgetLine."Extension Contract Status"::Order);
                  BudgetLine.SETRANGE("Version Date", 0D, "Prognosis Date");
                  IF BudgetLine.FINDSET THEN
                    REPEAT
                      "Rough Prognosis Total Cost" := "Rough Prognosis Total Cost" + BudgetLine.Amount;
                    UNTIL BudgetLine.NEXT = 0;
                UNTIL ExtRec.NEXT = 0;
            END ELSE BEGIN
              //Cost Plus: total cost
              "Rough Prognosis Total Cost" := "Rough Prognosis Total Cost" + CostContMgt.TotCostProject(SubProjRec,TRUE);
            END;
          UNTIL SubProjRec.NEXT = 0;
      END;
    END;

    PROCEDURE PrognRevenues@1100525002(ProjRec@1100525001 : Record 11072003;VAR PrognRec@1100525002 : Record 11012034);
    VAR
      SubProjRec@1100525000 : Record 11072003;
      ExtRec@1100525003 : Record 11012004;
      UnitPriceProdRec@1100525009 : Record 11020425;
      UnitPriceProdLine@1100525005 : Record 11020426;
      JobLedgEntry@1100525004 : Record 11072005;
      SalesLine@1100525014 : Record 37;
      ProjCostPlusEntry@1100525008 : Record 11012019;
      UnitPriceExists@1100525006 : Boolean;
      HandleCostPlusUnitPriAsContr@1100525012 : Boolean;
      CountUnitPrice@1100525013 : Boolean;
      ProdUnitPriceContractAmount@1100525011 : Decimal;
      CostPlusAmountToInvoiceDec@1100525010 : Decimal;
    BEGIN
      WITH PrognRec DO BEGIN
        IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          ProjRec.SETFILTER("Project Filter", "Project No.");
        ProjRec.SETRANGE("Cumulation Filter", 0D, "Prognosis Date");

        //Revenues Expected
        ProjRec.CALCFIELDS(
          "Project Contract Amount", "Extension Contract Amount", "Options Contract Amount", "Extension Quoted Amount");
        "Contract Amount Project" := ProjRec."Project Contract Amount";
        "Contract Amount Extensions" := ProjRec."Extension Contract Amount";
        "Contract Amount Options" := ProjRec."Options Contract Amount";
        "Quotation Amount Extensions" := ProjRec."Extension Quoted Amount";

        //Revenues Invoiced
        "Contract Amount Invoiced" := 0;
        "Extension Amount Invoiced" := 0;
        "Option Amount Invoiced" := 0; //call C-028169
        "Cost Plus Invoiced" := 0;
        "Project Invoiced" := 0;
        JobLedgEntry.RESET;
        JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type");
        JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
        IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          JobLedgEntry.SETRANGE("Job No.", "Project No.");
        JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
        JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
        IF JobLedgEntry.FINDSET THEN
          REPEAT
           IF JobLedgEntry."Project Invoice" AND JobLedgEntry."Installment Invoice" THEN BEGIN
             IF JobLedgEntry."Extension Contract" = '' THEN
               IF IsOptionInstallment(JobLedgEntry) THEN //call C-028169
                 "Option Amount Invoiced" := "Option Amount Invoiced" - JobLedgEntry."Total Price (LCY)" //call C-028169
               ELSE //call C-028169
                 "Contract Amount Invoiced" := "Contract Amount Invoiced" - JobLedgEntry."Total Price (LCY)"
             ELSE
               "Extension Amount Invoiced" := "Extension Amount Invoiced" - JobLedgEntry."Total Price (LCY)";
           END ELSE
             "Cost Plus Invoiced" := "Cost Plus Invoiced" - JobLedgEntry."Total Price (LCY)";
           "Project Invoiced" := "Project Invoiced" - JobLedgEntry."Total Price (LCY)";
          UNTIL JobLedgEntry.NEXT = 0;

        SubProjRec.SETCURRENTKEY("Main Project");
        SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
        IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SubProjRec.SETRANGE("No.", "Project No.");
        IF SubProjRec.FINDSET THEN
          REPEAT
            //Unit Prices
            UnitPriceExists := FALSE;
            IF UnitPriceProdRec.READPERMISSION THEN BEGIN
              UnitPriceProdRec.RESET;
              UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
              UnitPriceExists := NOT UnitPriceProdRec.ISEMPTY;
            END;
            HandleCostPlusUnitPriAsContr :=
              UnitPriceExists AND
              (SubProjRec."Settlement Method" = SubProjRec."Settlement Method"::"Fixed Price");
            IF HandleCostPlusUnitPriAsContr THEN BEGIN
              ProdUnitPriceContractAmount := 0;
              JobLedgEntry.RESET;
              JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type");
              JobLedgEntry.SETRANGE("Main Project No.", SubProjRec."Main Project");
              JobLedgEntry.SETRANGE("Job No.", SubProjRec."No.");
              JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
              JobLedgEntry.SETRANGE("Project Invoice", TRUE);
              JobLedgEntry.SETRANGE("Installment Invoice", FALSE);
              JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
              IF JobLedgEntry.FINDSET THEN
                REPEAT
                  ProdUnitPriceContractAmount := ProdUnitPriceContractAmount - JobLedgEntry."Total Price (LCY)";
                UNTIL JobLedgEntry.NEXT = 0;
              "Cost Plus Invoiced" := "Cost Plus Invoiced" - ProdUnitPriceContractAmount;
              "Contract Amount Invoiced" := "Contract Amount Invoiced" + ProdUnitPriceContractAmount;
            END ELSE BEGIN
              IF UnitPriceExists THEN BEGIN
                UnitPriceProdRec.RESET;
                UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
                UnitPriceProdRec.SETRANGE(Status, UnitPriceProdRec.Status::Offered, UnitPriceProdRec.Status::Approved);
                UnitPriceProdRec.SETFILTER("Production Date", '..%1', "Prognosis Date");
                IF UnitPriceProdRec.FINDSET THEN
                  REPEAT
                    IF UnitPriceProdRec.Invoiced THEN BEGIN
                      SalesLine.SETCURRENTKEY("Document Type","Job No.");
                      SalesLine.SETRANGE(
                        "Document Type",SalesLine."Document Type"::Invoice,SalesLine."Document Type"::"Credit Memo");
                      SalesLine.SETRANGE("Job No.", SubProjRec."No.");
                      SalesLine.SETRANGE("Production Motivation Date", UnitPriceProdRec."Production Date");
                      SalesLine.SETRANGE("Production Motivation Code", UnitPriceProdRec.Code);
                      CountUnitPrice := NOT SalesLine.ISEMPTY;
                    END ELSE
                      CountUnitPrice := TRUE;
                    IF CountUnitPrice THEN BEGIN
                      UnitPriceProdLine.SETRANGE("Project No.", UnitPriceProdRec."Project No.");
                      UnitPriceProdLine.SETRANGE("Project Principal", UnitPriceProdRec."Project Principal");
                      UnitPriceProdLine.SETRANGE("Production Date", UnitPriceProdRec."Production Date");
                      UnitPriceProdLine.SETRANGE(Code, UnitPriceProdRec.Code);
                      IF UnitPriceProdLine.FINDSET THEN
                        REPEAT
                          CostPlusAmountToInvoiceDec := CostPlusAmountToInvoiceDec + UnitPriceProdLine."Production Value";
                        UNTIL UnitPriceProdLine.NEXT = 0;
                    END;
                  UNTIL UnitPriceProdRec.NEXT = 0;
              END ELSE
                CostPlusAmountToInvoiceDec := CostPlusAmountToInvoiceDec + CostPlustAmountToInvoice(SubProjRec);
            END;
          UNTIL SubProjRec.NEXT = 0;

        //Revenues To Invoice

        //Revenues To Invoice Cost Plus Manually added
        ProjCostPlusEntry.SETRANGE("Project No.", "Project No.");
        ProjCostPlusEntry.SETRANGE("Entry No. Project Ledger", 0);
        IF ProjCostPlusEntry.FINDSET THEN
          REPEAT
            IF ProjCostPlusEntry.Invoiced THEN BEGIN
              ProjCostPlusEntry.CALCFIELDS("Invoice in Process", "Credit Memo in Process");
              CostPlusAmountToInvoiceDec :=
                CostPlusAmountToInvoiceDec +
                ProjCostPlusEntry."Invoice in Process" +
                ProjCostPlusEntry."Credit Memo in Process";
            END ELSE
              CostPlusAmountToInvoiceDec :=
                CostPlusAmountToInvoiceDec + ProjCostPlusEntry."Sales Amount";
          UNTIL ProjCostPlusEntry.NEXT = 0;

        "Contract Amount to Invoice" := "Contract Amount Project" - "Contract Amount Invoiced";
        "Extension Amount to Invoice" := "Contract Amount Extensions" - "Extension Amount Invoiced"; //call C-028169
        "Option Amount to Invoice" := "Contract Amount Options" - "Option Amount Invoiced"; //call C-028169
        "Cost Plus to Invoice" := CostPlusAmountToInvoiceDec;

        //Revenue Prognosis
        IF "Prognosis Level" = "Prognosis Level"::Rough THEN BEGIN
          "Rough Prognosis Total Revenues" :=
            "Cost Plus Invoiced" + CostPlusAmountToInvoiceDec +
            ProjRec."Project Contract Amount" + ProjRec."Extension Contract Amount" + ProjRec."Options Contract Amount";

          ExtRec.RESET;
          ExtRec.SETCURRENTKEY("Main Project No.");
          ExtRec.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            ExtRec.SETRANGE("Project No.", "Project No.");
          ExtRec.SETRANGE(Status, ExtRec.Status::Applied, ExtRec.Status::Offered);
          ExtRec.SETRANGE("Treat like Order", FALSE);
          ExtRec.SETRANGE("Include in Expectation", TRUE);
          IF ExtRec.FINDSET THEN
            REPEAT
              IF ExtRec.Status = ExtRec.Status::Applied THEN
                "Rough Prognosis Total Revenues" := "Rough Prognosis Total Revenues" + ExtRec."Estimated Amount"
              ELSE
                "Rough Prognosis Total Revenues" := "Rough Prognosis Total Revenues" + ExtRec."Offered Amount";
            UNTIL ExtRec.NEXT = 0;
        END;

        "To Invoice incl offered ext." :=
          "Contract Amount to Invoice" + "Extension Amount to Invoice" +
          "Option Amount to Invoice" + "Quotation Amount Extensions"; //call C-028169
      END;
    END;

    PROCEDURE CostPlustAmountToInvoice@11020217(ProjRec@1100525001 : Record 11072003) : Decimal;
    VAR
      CalcCostPlus@1100525000 : Report 11020287;
    BEGIN
      //CalcCostPlus.SetProcessingOnly;  changed 11012137 to 11012759  which is processing only
      CalcCostPlus.SetRepeatForRestQuan;
      CalcCostPlus.USEREQUESTPAGE(FALSE);
      ProjRec.SETRANGE("No.", ProjRec."No.");
      CalcCostPlus.SETTABLEVIEW(ProjRec);
      CalcCostPlus.RUNMODAL;
      EXIT(CalcCostPlus.GetSalesAmountProj);
    END;

    PROCEDURE FillRoughPrognProjRecLine@1100525000(ProjRec@1100525001 : Record 11072003;VAR ProjRecordingLine@1100525002 : Record 11072021);
    VAR
      PrognRec@1100525000 : Record 11012034;
    BEGIN
      //#C027085.c
      ProjRecordingLine."Rough Prognosis Total Cost" := 0;
      ProjRecordingLine."Rough Prognosis Total Revenues" := 0;
      IF ProjRec."Prognosis Level" = ProjRec."Prognosis Level"::Rough THEN BEGIN
        PrognRec."Project No." := ProjRecordingLine."Project No.";
        PrognRec."Prognosis Date" := ProjRecordingLine."Recording Date";
        PrognRec."Prognosis Level" := ProjRec."Prognosis Level";
        PrognRevenues(ProjRec, PrognRec);
        RoughPrognTotCost(ProjRec, PrognRec);

        ProjRecordingLine.VALIDATE("Rough Prognosis Total Cost", PrognRec."Rough Prognosis Total Cost");
        ProjRecordingLine.VALIDATE("Rough Prognosis Total Revenues", PrognRec."Rough Prognosis Total Revenues");
      END;
      //#C027085.sn
      IF (ProjRec."Prognosis Level" = ProjRec."Prognosis Level"::Element) THEN BEGIN
        IF (PrognRec.GET(ProjRecordingLine."Project No.", ProjRecordingLine."Recording Date")) THEN BEGIN
          PrognRec.CALCFIELDS("Prognosis Total Cost Element");
          ProjRecordingLine.VALIDATE("Rough Prognosis Total Cost", PrognRec."Prognosis Total Cost Element");
        END;
        PrognRevenues(ProjRec, PrognRec);
        ProjRecordingLine.VALIDATE("Rough Prognosis Total Revenues", PrognRec."Rough Prognosis Total Revenues");
      END;
      //#C027085.en
    END;

    PROCEDURE IsOptionInstallment@1210190000(JobLedgerEntry@1210190000 : Record 11072005) : Boolean;
    VAR
      ProjectInstallment@1210190001 : Record 11012018;
    BEGIN
      //call C-028169
      WITH JobLedgerEntry DO BEGIN
        IF "Plot No." = '' THEN
          EXIT(FALSE);

        IF NOT ProjectInstallment.GET("Job No.", Principal, "Plot No.", "Installment No.") THEN
          EXIT(FALSE);

        EXIT(ProjectInstallment.Option <> '');
      END;
    END;

    PROCEDURE SetValuesToZero@4();
    BEGIN
      BudgetDec := 0;
      BudgetSurchargeDec := 0;
      ActualDec := 0;
      AllowedDec := 0;
      ResultDec := 0;
      TotalCostDec := 0;
      AvailableDec := 0;
      RecNotInvDec := 0;
      OpenDec := 0;
      OpenAmountHoursDec := 0;
      PrognTotCostDec :=0;

      BudgHoursDec := 0;
      OpenHoursDec := 0;
      ActualHoursDec := 0;
      AllowedHoursDec := 0;
      ResHoursDec  := 0;
      TotalHoursDec := 0;
      AvailHoursDec := 0;
      ProgHoursDec := 0;

      SurchOpenDec := 0;
      SurchOpenAmountHoursDec := 0;
      OpenAmountInvDec := 0;
      SurchOpenAmountInvDec := 0;

      TotCostExclRiscCovDec := 0;
      EstimPurchResultDec := 0;
      RiscCoverage := 0;  // 25531.n
      RiscCoverageWithdraw := 0;  // 25531.n
      PrognTotHoursDec := 0; // 15532.n

      OriginalBudgetAmt := 0;
      AdjustmentsBudget := 0;
      ExtensionBudget := 0;
      OptionsBudget := 0;
      PurchaseBudget := 0;
      PurchaseAmount := 0;
      ActualCostsPurchaseAction := 0;
    END;

    PROCEDURE CalculateValues@10(VAR lPrognLineRec@11012000 : Record 11012035;SaveValues@1210190000 : Boolean);
    VAR
      ProjRec@1100525001 : Record 11072003;
      ElemCstObjCntrlRec@1100525005 : Record 11012050;
      CstObjCntrlRec@1100525007 : Record 11012047;
      lvProgHeaderRec@1100525000 : Record 11012034;
      SearchProgrDate@1100525004 : Codeunit 11012014;
      CostContMgt@1100525006 : Codeunit 11012006;
      DummyDec@1100525003 : Decimal;
    BEGIN
      WITH lPrognLineRec DO BEGIN
        SetValuesToZero;

        IF NOT ProjRec.GET("Project No.") THEN
          EXIT;

        IF NOT SaveValues AND "Fix Prognosis Line" THEN BEGIN
          BudgetDec := "Budget Amount";
          BudgetSurchargeDec := lPrognLineRec."Budget Surcharge Amount";
          ActualDec := "Actual Costs";
          TotalCostDec := "Total Cost";
          TotCostExclRiscCovDec := "Total Cost (Excl. Risc Cov.)";
          AllowedDec := "Allowed Costs";
          ResultDec := "Allowed Costs" - "Total Cost";
          RecNotInvDec := "Received/Not Invoiced";
          OpenDec := "Open (Purchase)";
          RiscCoverage := "Total Risc Coverage Amount"; // 25531.n
          RiscCoverageWithdraw := "Total Release Risc Coverage";  // 25531.n
          SurchOpenDec := "Open Ovh. Surch. (Purchase)";
          SurchOpenAmountHoursDec := "Open Ovh. Surch. (Hours)";
          OpenAmountInvDec := "Open (Inventory)";
          SurchOpenAmountInvDec := "Open Ovh. Surch. (Inventory)";

          IF ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost" THEN
            AvailableDec := "Budget Amount" - AllowedDec - OpenDec
          ELSE
            AvailableDec := "Budget Amount" - TotalCostDec;

          PrognTotCostDec := "Amount incl. Surcharge" + "Total Cost";
          PrognTotHoursDec := "Total Hours" + Quantity; // 15532.n

          IF "Cost Type" <> "Cost Type"::Labor THEN BEGIN
            EstimPurchResultDec := "Estimated Purchase Result";
          END ELSE BEGIN
            OpenAmountHoursDec := "Open Amount (Hours)";
            BudgHoursDec := "Budget Hours";
            OpenHoursDec := "Open Hours";
            ActualHoursDec := "Actual Hours";
            AllowedHoursDec := "Allowed Hours";
            ResHoursDec := "Result Hours";
            TotalHoursDec := "Total Hours";
            EstimPurchResultDec := "Estimated Purchase Result";

            IF ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost" THEN
              AvailHoursDec := "Budget Hours" - AllowedHoursDec - OpenHoursDec
            ELSE
              AvailHoursDec := "Budget Hours" - TotalHoursDec;

            ProgHoursDec := AvailHoursDec - Quantity;
          END;
          OriginalBudgetAmt := "Original Budget Amount";
          AdjustmentsBudget := Adjustments;
          ExtensionBudget := Extension;
          OptionsBudget := Options;
          PurchaseBudget := "Purchase Budget";
          PurchaseAmount := "Purchase Amount";
          ActualCostsPurchaseAction := "Actual Costs (Purchase Action)";
        END ELSE BEGIN
          //Set Filters
          ProjRec.SETRANGE("Period Filter",0D,"Prognosis Date");
          SearchProgrDate.DetermineDate(ProjRec);

          IF ProjRec."Prognosis per Element" THEN BEGIN
            //Prognosis per Project-Element-Cost Object
            IF ElemCstObjCntrlRec.GET("Project No.",Element,"Cost Type","Cost Object") THEN BEGIN
              ElemCstObjCntrlRec.RESET;
              ProjRec.COPYFILTER("Progress Filter", ElemCstObjCntrlRec."Progress Filter");
              ElemCstObjCntrlRec.SETRANGE("Prognosis Filter", "Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Cumulation Filter",0D,"Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Main Project No.","Main Project No.");
              IF "Project No." <> "Main Project No." THEN
                ElemCstObjCntrlRec.SETRANGE("Project Filter","Project No.");
              ElemCstObjCntrlRec.CALCFIELDS(Budget, "Actual Costs", "Open Hours",
                                           "Open Amount (Hours)","Budget Surcharge Amount",
                                           "Original Budget Amount", Adjustments, Extension, Options, "Purchase Budget", Purchase,
                                           "Risc Coverage","Risc Coverage Withdraw"); // 25531.n
              BudgetDec := ElemCstObjCntrlRec.Budget;
              RiscCoverage := ElemCstObjCntrlRec."Risc Coverage";  // 25531.n
              RiscCoverageWithdraw := ElemCstObjCntrlRec."Risc Coverage Withdraw";  // 25531.n
              BudgetSurchargeDec := ElemCstObjCntrlRec."Budget Surcharge Amount";
              OpenAmountHoursDec := ElemCstObjCntrlRec."Open Amount (Hours)";
              ActualDec := ElemCstObjCntrlRec."Actual Costs";
              CostContMgt.AllowedAndPurchElemCostObj(ElemCstObjCntrlRec, AllowedDec,AllowedHoursDec,
                DummyDec,DummyDec,
                DummyDec, EstimPurchResultDec, DummyDec, DummyDec, DummyDec, TRUE);
              OpenDec := CostContMgt.OutstandingElemCostObj(ElemCstObjCntrlRec,TRUE);
              RecNotInvDec := CostContMgt.ReceivedNotInvoicedElemCostObj(ElemCstObjCntrlRec,TRUE);
              TotalCostDec := CostContMgt.TotCostElemCostObj(ElemCstObjCntrlRec,TRUE);  // Surcharges included
              ResultDec := CostContMgt.ResultElemCostObj(ElemCstObjCntrlRec,TRUE);
              OriginalBudgetAmt := ElemCstObjCntrlRec."Original Budget Amount";
              AdjustmentsBudget := ElemCstObjCntrlRec.Adjustments;
              ExtensionBudget := ElemCstObjCntrlRec.Extension;
              OptionsBudget := ElemCstObjCntrlRec.Options;
              PurchaseBudget := ElemCstObjCntrlRec."Purchase Budget";
              PurchaseAmount := ElemCstObjCntrlRec.Purchase;

              ElemCstObjCntrlRec.CALCFIELDS("Open Ovh. Surch. (Hours)", "Open (Inventory)",
                "Open Ovh. Surch. (Inventory)");
              SurchOpenDec := CostContMgt.OpenOvhPurchElemCostObj(ElemCstObjCntrlRec,TRUE);
              SurchOpenAmountHoursDec := ElemCstObjCntrlRec."Open Ovh. Surch. (Hours)";
              OpenAmountInvDec := ElemCstObjCntrlRec."Open (Inventory)";
              SurchOpenAmountInvDec := ElemCstObjCntrlRec."Open Ovh. Surch. (Inventory)";

              IF ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost" THEN
                AvailableDec := BudgetDec - AllowedDec - OpenDec
              ELSE
                AvailableDec := BudgetDec - TotalCostDec;

              PrognTotCostDec := "Amount incl. Surcharge" + TotalCostDec;
              "Prognosis End Result" := AvailableDec - "Amount incl. Surcharge";

              IF "Cost Type" <> "Cost Type"::Labor THEN BEGIN
                ElemCstObjCntrlRec.CALCFIELDS("Risc Coverage (Prognosis)");
                TotCostExclRiscCovDec := TotalCostDec - ElemCstObjCntrlRec."Risc Coverage (Prognosis)";
              END ELSE BEGIN
                PrognTotHoursDec := TotalHoursDec + Quantity; // 15532.n
                ElemCstObjCntrlRec.CALCFIELDS("Budget Hours", "Actual Hours");
                BudgHoursDec := ElemCstObjCntrlRec."Budget Hours";
                OpenHoursDec := ElemCstObjCntrlRec."Open Hours";
                ActualHoursDec := ElemCstObjCntrlRec."Actual Hours";
                ResHoursDec := CostContMgt.ResultHoursElemCostObj(ElemCstObjCntrlRec,TRUE);
                TotalHoursDec := CostContMgt.TotHoursElemCostObj(ElemCstObjCntrlRec,TRUE);
                IF ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost" THEN
                  AvailHoursDec := BudgHoursDec - AllowedHoursDec - OpenHoursDec
                ELSE
                  AvailHoursDec := BudgHoursDec - TotalHoursDec;
                ProgHoursDec := AvailHoursDec - Quantity;
              END;
              ElemCstObjCntrlRec.SETFILTER("Purchase Action Filter", '<>%1', '');
              ElemCstObjCntrlRec.CALCFIELDS( "Actual Costs");
              ActualCostsPurchaseAction := ElemCstObjCntrlRec."Actual Costs";
            END;
          END ELSE BEGIN
            //Prognosis per Project-Cost Object
            IF CstObjCntrlRec.GET("Project No.","Cost Type","Cost Object") THEN BEGIN
              CstObjCntrlRec.RESET;
              ProjRec.COPYFILTER("Progress Filter",CstObjCntrlRec."Progress Filter");
              CstObjCntrlRec.SETRANGE("Prognosis Filter", "Prognosis Date");
              CstObjCntrlRec.SETRANGE("Cumulation Filter",0D,"Prognosis Date");
              CstObjCntrlRec.SETRANGE("Main Project No.","Main Project No.");
              IF "Project No." <> "Main Project No." THEN
                CstObjCntrlRec.SETRANGE("Project Filter","Project No.");
              CstObjCntrlRec.CALCFIELDS(Budget, "Actual Costs", "Open Hours",
                                        "Open Amount (Hours)", "Budget Surcharge Amount",
                                        "Original Budget Amount", Adjustments, Extension, Options, "Purchase Budget", Purchase,
                                        "Risc Coverage","Risc Coverage Withdraw"); // 25531.n
              BudgetDec := CstObjCntrlRec.Budget;
              RiscCoverage := CstObjCntrlRec."Risc Coverage";  // 25531.n
              RiscCoverageWithdraw := CstObjCntrlRec."Risc Coverage Withdraw";  // 25531.n
              BudgetSurchargeDec := CstObjCntrlRec."Budget Surcharge Amount" ; //M20030
              OpenAmountHoursDec := CstObjCntrlRec."Open Amount (Hours)";
              ActualDec := CstObjCntrlRec."Actual Costs";
              CostContMgt.AllowedAndPurchCostObj(CstObjCntrlRec, AllowedDec,
                AllowedHoursDec,DummyDec,DummyDec,
                DummyDec, EstimPurchResultDec, DummyDec, DummyDec, DummyDec, TRUE);
              OpenDec := CostContMgt.OutstandingCostObj(CstObjCntrlRec,TRUE);
              RecNotInvDec := CostContMgt.ReceivedNotInvoicedCostObj(CstObjCntrlRec,TRUE);
              TotalCostDec := CostContMgt.TotCostCostObj(CstObjCntrlRec,TRUE); //surcharges included
              ResultDec := CostContMgt.ResultCostObj(CstObjCntrlRec,TRUE);
              OriginalBudgetAmt := CstObjCntrlRec."Original Budget Amount";
              AdjustmentsBudget := CstObjCntrlRec.Adjustments;
              ExtensionBudget := CstObjCntrlRec.Extension;
              OptionsBudget := CstObjCntrlRec.Options;
              PurchaseBudget := CstObjCntrlRec."Purchase Budget";
              PurchaseAmount := CstObjCntrlRec.Purchase;

              CstObjCntrlRec.CALCFIELDS("Open Ovh. Surch. (Hours)", "Open (Inventory)",
                "Open Ovh. Surch. (Inventory)");
              SurchOpenDec := CostContMgt.OpenOvhPurchCostObj(CstObjCntrlRec,TRUE);
              SurchOpenAmountHoursDec := CstObjCntrlRec."Open Ovh. Surch. (Hours)";
              OpenAmountInvDec := CstObjCntrlRec."Open (Inventory)";
              SurchOpenAmountInvDec := CstObjCntrlRec."Open Ovh. Surch. (Inventory)";

              IF ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost" THEN
                AvailableDec := BudgetDec - AllowedDec - OpenDec
              ELSE
                AvailableDec := BudgetDec - TotalCostDec;

              PrognTotCostDec := "Amount incl. Surcharge" + TotalCostDec;
              "Prognosis End Result" := AvailableDec - "Amount incl. Surcharge";

              IF "Cost Type" <> "Cost Type"::Labor THEN BEGIN
                CstObjCntrlRec.CALCFIELDS("Risc Coverage (Prognosis)");
                TotCostExclRiscCovDec := TotalCostDec - CstObjCntrlRec."Risc Coverage (Prognosis)";
              END ELSE BEGIN
                CstObjCntrlRec.CALCFIELDS("Budget Hours", "Actual Hours");
                BudgHoursDec := CstObjCntrlRec."Budget Hours";
                OpenHoursDec := CstObjCntrlRec."Open Hours";
                ActualHoursDec := CstObjCntrlRec."Actual Hours";
                ResHoursDec := CostContMgt.ResultHoursCostObj(CstObjCntrlRec,TRUE);
                TotalHoursDec := CostContMgt.TotHoursCostObj(CstObjCntrlRec,TRUE);
                PrognTotHoursDec := TotalHoursDec + Quantity; // 15532.n
                IF ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost" THEN
                  AvailHoursDec := BudgHoursDec - AllowedHoursDec - OpenHoursDec
                ELSE
                  AvailHoursDec := BudgHoursDec - TotalHoursDec;
                ProgHoursDec := AvailHoursDec - Quantity;
              END;
              CstObjCntrlRec.SETFILTER("Purchase Action Filter", '<>%1', '');
              CstObjCntrlRec.CALCFIELDS("Actual Costs");
              ActualCostsPurchaseAction := CstObjCntrlRec."Actual Costs";
            END;
          END;
        END;

        IF SaveValues THEN BEGIN
          IF NOT lvProgHeaderRec.GET("Project No.", "Prognosis Date") THEN lvProgHeaderRec.INIT;
          "Fix Prognosis Line" := lvProgHeaderRec."Fix Prognosis Line";

          "Budget Amount" := BudgetDec;
          "Total Risc Coverage Amount" := RiscCoverage; // 25531.n
          "Total Release Risc Coverage" := RiscCoverageWithdraw;  // 25531.n
          "Budget Surcharge Amount" := BudgetSurchargeDec;
          "Actual Costs" := ActualDec;
          "Open (Purchase)" := OpenDec;
          "Received/Not Invoiced" := RecNotInvDec;
          "Open Amount (Hours)" := OpenAmountHoursDec;
          "Total Cost" := TotalCostDec;
          "Total Cost (Excl. Risc Cov.)" := TotCostExclRiscCovDec;
          "Allowed Costs" := AllowedDec;

          "Open Ovh. Surch. (Purchase)" := SurchOpenDec;
          "Open Ovh. Surch. (Hours)" := SurchOpenAmountHoursDec;
          "Open (Inventory)" := OpenAmountInvDec;
          "Open Ovh. Surch. (Inventory)" := SurchOpenAmountInvDec;

          "Prognosis Total Cost" := PrognTotCostDec;

          "Budget Hours" := BudgHoursDec;
          "Open Hours" := OpenHoursDec;
          "Actual Hours" := ActualHoursDec;
          "Allowed Hours" := AllowedHoursDec;
          "Result Hours" := ResHoursDec;
          "Total Hours" := TotalHoursDec;
          "Prognosis Total Hours" := PrognTotHoursDec;  // 15532.n
          "Prognosis End Result Hours" := ProgHoursDec;
          "Estimated Purchase Result" :=  EstimPurchResultDec;
          "Original Budget Amount" := OriginalBudgetAmt;
          Adjustments := AdjustmentsBudget;
          Extension := ExtensionBudget;
          Options := OptionsBudget;
          "Purchase Budget" := PurchaseBudget;
          "Purchase Amount" := PurchaseAmount;
          "Actual Costs (Purchase Action)" := ActualCostsPurchaseAction;
        END;

        SetPreviousDateFilter; //C017374.n
        CALCFIELDS("Previous Prognosis","Prev Prognosis End Result");
      END;
    END;

    PROCEDURE CalculateValuesElements@1100528804(VAR PrognosisPerElement@11012000 : Record 11071893;SaveValues@1210190000 : Boolean);
    VAR
      ProjRec@1100525001 : Record 11072003;
      ElemCstObjCntrlRec@1100525005 : Record 11012048;
      lvProgHeaderRec@1100525000 : Record 11012034;
      SearchProgrDate@1100525004 : Codeunit 11012014;
      CostContMgt@1100525006 : Codeunit 11012006;
      DummyDec@1100525003 : Decimal;
    BEGIN
      WITH PrognosisPerElement DO BEGIN
        SetValuesToZero;

        IF NOT ProjRec.GET("Project No.") THEN
          EXIT;

        IF NOT SaveValues AND "Fix Prognosis Line" THEN BEGIN
          BudgetDec := "Budget Amount";
          BudgetSurchargeDec := "Budget Surcharge Amount";
          ActualDec := "Actual Costs";
          TotalCostDec := "Total Cost";
          TotCostExclRiscCovDec := "Total Cost (Excl. Risc Cov.)";
          AllowedDec := "Allowed Costs";
          ResultDec := "Allowed Costs" - "Total Cost";
          RecNotInvDec := "Received/Not Invoiced";
          OpenDec := "Open (Purchase)";
          RiscCoverage := "Total Risc Coverage Amount"; // 25531.n
          RiscCoverageWithdraw := "Total Release Risc Coverage";  // 25531.n
          SurchOpenDec := "Open Ovh. Surch. (Purchase)";
          OpenAmountInvDec := "Open (Inventory)";
          SurchOpenAmountInvDec := "Open Ovh. Surch. (Inventory)";

          IF ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost" THEN
            AvailableDec := "Budget Amount" - AllowedDec - OpenDec
          ELSE
            AvailableDec := "Budget Amount" - TotalCostDec;

          PrognTotCostDec := "Amount incl. Surcharge" + "Total Cost";
          EstimPurchResultDec := "Estimated Purchase Result";
        END ELSE BEGIN
          //Set Filters
          ProjRec.SETRANGE("Period Filter",0D,"Prognosis Date");
          SearchProgrDate.DetermineDate(ProjRec);

          IF ProjRec."Prognosis Level" =  ProjRec."Prognosis Level"::Element THEN BEGIN
            //Prognosis per Project-Element
            IF ElemCstObjCntrlRec.GET("Project No.",Element) THEN BEGIN
              ElemCstObjCntrlRec.RESET;
              ProjRec.COPYFILTER("Progress Filter", ElemCstObjCntrlRec."Progress Filter");
              ElemCstObjCntrlRec.SETRANGE("Prognosis Filter", "Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Cumulation Filter",0D,"Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Main Project No.","Main Project No.");
              ElemCstObjCntrlRec.SETRANGE("Element Filter",Element);
              IF "Project No." <> "Main Project No." THEN
                ElemCstObjCntrlRec.SETRANGE("Project Filter","Project No.");
              ElemCstObjCntrlRec.CALCFIELDS(Budget, "Actual Costs",
                                           "Risc Coverage","Risc Coverage Withdraw"); // 25531.n
              BudgetDec := ElemCstObjCntrlRec.Budget;
              RiscCoverage := ElemCstObjCntrlRec."Risc Coverage";  // 25531.n
              RiscCoverageWithdraw := ElemCstObjCntrlRec."Risc Coverage Withdraw";  // 25531.n
              ActualDec := ElemCstObjCntrlRec."Actual Costs";
              CostContMgt.AllowedAndPurchElem(ElemCstObjCntrlRec, AllowedDec,
                DummyDec, DummyDec, DummyDec, TRUE);
              OpenDec := CostContMgt.OutstandingElem(ElemCstObjCntrlRec,TRUE);
              RecNotInvDec := CostContMgt.ReceivedNotInvoicedElem(ElemCstObjCntrlRec,TRUE);
              TotalCostDec := CostContMgt.TotCostElem(ElemCstObjCntrlRec,TRUE);  // Surcharges included
              ResultDec := CostContMgt.ResultElem(ElemCstObjCntrlRec,TRUE);

              ElemCstObjCntrlRec.CALCFIELDS("Open (Inventory)", "Open Ovh. Surch. (Inventory)");
              SurchOpenDec := CostContMgt.OpenOvhPurchElem(ElemCstObjCntrlRec,TRUE);
              OpenAmountInvDec := ElemCstObjCntrlRec."Open (Inventory)";
              SurchOpenAmountInvDec := ElemCstObjCntrlRec."Open Ovh. Surch. (Inventory)";

              IF ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost" THEN
                AvailableDec := BudgetDec - AllowedDec - OpenDec
              ELSE
                AvailableDec := BudgetDec - TotalCostDec;

              PrognTotCostDec := "Amount incl. Surcharge" + TotalCostDec;
              "Prognosis End Result" := AvailableDec - "Amount incl. Surcharge";

              ElemCstObjCntrlRec.CALCFIELDS("Risc Coverage (Prognosis)");
              TotCostExclRiscCovDec := TotalCostDec - ElemCstObjCntrlRec."Risc Coverage (Prognosis)";
            END;
          END;
        END;

        IF SaveValues THEN BEGIN
          IF NOT lvProgHeaderRec.GET("Project No.", "Prognosis Date") THEN lvProgHeaderRec.INIT;
          "Fix Prognosis Line" := lvProgHeaderRec."Fix Prognosis Line";

          "Budget Amount" := BudgetDec;
          "Total Risc Coverage Amount" := RiscCoverage; // 25531.n
          "Total Release Risc Coverage" := RiscCoverageWithdraw;  // 25531.n
          "Budget Surcharge Amount" := BudgetSurchargeDec;
          "Actual Costs" := ActualDec;
          "Open (Purchase)" := OpenDec;
          "Received/Not Invoiced" := RecNotInvDec;
          "Total Cost" := TotalCostDec;
          "Total Cost (Excl. Risc Cov.)" := TotCostExclRiscCovDec;
          "Allowed Costs" := AllowedDec;

          "Open Ovh. Surch. (Purchase)" := SurchOpenDec;
          "Open (Inventory)" := OpenAmountInvDec;
          "Open Ovh. Surch. (Inventory)" := SurchOpenAmountInvDec;

          "Prognosis Total Cost" := PrognTotCostDec;
          "Estimated Purchase Result" :=  EstimPurchResultDec;
        END;

        SetPreviousDateFilter; //C017374.n
        CALCFIELDS("Previous Prognosis","Prev Prognosis End Result");
      END;
    END;

    PROCEDURE CopyPrevPrognosis@1210190002(IPrognosisHeader@1100525004 : Record 11012034;ICopyEndResult@1210190000 : Boolean;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      lPrevPrognosisLineRec@11012001 : Record 11012035;
      OrigPrognosisLine@1100525001 : Record 11012035;
      lPrevPrognosisHeader@1100525002 : Record 11012034;
      lPrognDate@1100485001 : Date;
      lPrevDate@1100485002 : Date;
    BEGIN
      ProjSetup.GET;

      lPrevPrognosisHeader.RESET;
      lPrevPrognosisHeader.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      lPrevPrognosisHeader.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      IF lPrevPrognosisHeader.FINDFIRST THEN  BEGIN
        lPrevPrognosisHeader.SETFILTER("Prognosis Date", '<%1', IPrognosisHeader."Prognosis Date");
         IF lPrevPrognosisHeader.FINDLAST THEN  BEGIN
           lPrevDate := lPrevPrognosisHeader."Prognosis Date";
         END ELSE BEGIN
           EXIT; // There is no previous prognose
         END;
      END;

      WITH lPrognLineRec DO BEGIN
        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF (ICostTypes = ICostTypes::Both) OR
               ((ICostTypes = ICostTypes::Cost) AND ("Cost Type" <> "Cost Type"::Revenue)) OR
               ((ICostTypes = ICostTypes::Revenue) AND ("Cost Type" = "Cost Type"::Revenue))
            THEN BEGIN
              SetPreviousDateFilter; //C017374.n
              CALCFIELDS("Previous Date");
              IF "Previous Date" = lPrevDate THEN BEGIN
                // only if the same line in the exact previous prognosis is present
                OrigPrognosisLine := lPrognLineRec;
                lPrevPrognosisLineRec := lPrognLineRec;
                lPrevPrognosisLineRec."Prognosis Date" := "Previous Date";
                IF lPrevPrognosisLineRec.FIND('=') THEN BEGIN
                  TRANSFERFIELDS(lPrevPrognosisLineRec,FALSE);
                  "Fix Prognosis Line" := IPrognosisHeader."Fix Prognosis Line";
                  VALIDATE("Prognosis Date");

                  IF "Cost Type" <> "Cost Type"::Revenue THEN
                    CalculateValues(lPrognLineRec,TRUE)
                  ELSE
                    Invoiced := OrigPrognosisLine.Invoiced;

                  IF ICopyEndResult THEN BEGIN
                    CASE "Cost Type" OF
                      "Cost Type"::Revenue:
                        VALIDATE("Amount Revenue",
                          lPrevPrognosisLineRec."Amount Revenue" + lPrevPrognosisLineRec.Invoiced - Invoiced);
                      ELSE BEGIN
                        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                          //call 33354
                          //VALIDATE(Quantity,
                          //  lPrevPrognosisLineRec.Quantity + "Prognosis End Result Hours" -
                          //  lPrevPrognosisLineRec."Prognosis End Result Hours");
                          //IF (Quantity < 0) AND
                          //   (ProjSetUp."Fill Prognosis End Result" =
                          //    ProjSetUp."Fill Prognosis End Result"::"Prognosis may not be Negative" )
                          //THEN
                          //   VALIDATE(Quantity, 0);   //M25821
                          VALIDATE(Quantity,
                            lPrevPrognosisLineRec.Quantity +
                            ("Budget Hours" - lPrevPrognosisLineRec."Budget Hours") -
                            ("Total Hours" - lPrevPrognosisLineRec."Total Hours"));
                          ValidateQuantityOfCopy(lPrognLineRec);
                          //call 33354
                        END;
                        VALIDATE("Prognosis End Result", lPrevPrognosisLineRec."Prognosis End Result");
        //Call 32349.so
                        //M26570 sn
        //              IF (lPrevPrognosisLineRec."Ovh. Surcharge" <> 0) THEN BEGIN
        //                IF (lPrevPrognosisLineRec.Amount <> 0) THEN
        //                  "Ovh. Surcharge" := ROUND(("Amount incl. Surcharge" *
        //                    (lPrevPrognosisLineRec."Ovh. Surcharge"/lPrevPrognosisLineRec.Amount)), 0.01)
        //                ELSE
        //                  "Ovh. Surcharge" := "Amount incl. Surcharge";
        //                Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
        //              END;
                        //M26570 en
        //Call 32349.eo
        //Call 32349.sn
                        IF (lPrevPrognosisLineRec."Ovh. Surcharge" <> 0) AND
                           (lPrevPrognosisLineRec."Amount incl. Surcharge" <> 0)
                        THEN BEGIN
                          "Ovh. Surcharge" := ROUND(("Amount incl. Surcharge" *
                             (lPrevPrognosisLineRec."Ovh. Surcharge"/lPrevPrognosisLineRec."Amount incl. Surcharge")), 0.01);
                          Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                        END ELSE BEGIN
                          IF "Budget Surcharge Amount" > 0 THEN BEGIN
                            "Ovh. Surcharge" := "Budget Surcharge Amount";
                            Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                          END;
                        END;
        //Call 32349.en
                        VALIDATE("Amount incl. Surcharge"); //Amount incl Surcharge = Amount + Surcharge (Amount is inputfld)
                        //call 33354
                        //IF (Amount < 0) AND
                        //   (ProjSetUp."Fill Prognosis End Result" =
                        //    ProjSetUp."Fill Prognosis End Result"::"Prognosis may not be Negative" )
                        //THEN BEGIN
                        //  "Ovh. Surcharge" := 0;  //M26570 n
                        //  VALIDATE(Amount, 0);
                        //END;
                        ValidateAmountOfCopy(lPrognLineRec);
                        //call 33354
                      END;
                    END;
                  END;
                  MODIFY(TRUE);
                  UpdateDetailLinesFromPrevious(lPrognLineRec, lPrevPrognosisLineRec);  //DP00042
                END;
              END ELSE BEGIN //Call 27681
                IF ICopyEndResult THEN BEGIN
                  CASE "Cost Type" OF
                    "Cost Type"::Revenue:;
                    ELSE BEGIN
                      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                        VALIDATE(Quantity, "Budget Hours" - "Total Hours");
                        ValidateQuantityOfCopy(lPrognLineRec); //call 33354
                      END;
                      VALIDATE("Prognosis End Result", 0);
                      ValidateAmountOfCopy(lPrognLineRec); //call 33354
                      MODIFY(TRUE);
                    END;
                  END;
                END;
              END;
            END;  //**Call 19910 n
          UNTIL NEXT = 0;
          //copy manually added revenues
          IF lPrevDate <> 0D THEN BEGIN
            IF (ICostTypes = ICostTypes::Both) OR (ICostTypes = ICostTypes::Revenue) THEN BEGIN
              lPrognDate := "Prognosis Date";
              lPrevPrognosisLineRec.SETRANGE("Project No.", IPrognosisHeader."Project No.");
              lPrevPrognosisLineRec.SETRANGE("Prognosis Date", lPrevDate);
              lPrevPrognosisLineRec.SETRANGE("Cost Type", lPrevPrognosisLineRec."Cost Type"::Revenue);
              IF lPrevPrognosisLineRec.FINDSET THEN
                REPEAT
                  lPrognLineRec := lPrevPrognosisLineRec;
                  "Prognosis Date" := lPrognDate;
                  IF NOT FIND('=') THEN BEGIN
                    VALIDATE("Prognosis Date");
                    INSERT;
                    //DP00042.sn
                    IF Amount <> 0 THEN
                      InsertDetailLine(lPrognLineRec);
                    //DP00042.en
                  END;
                UNTIL lPrevPrognosisLineRec.NEXT =0;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CopyPrevPrognosisElements@1100528802(IPrognosisHeader@1100525004 : Record 11012034;ICopyEndResult@1210190000 : Boolean;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      lPrognLineRec@11012000 : Record 11071893;
      lPrevPrognosisLineRec@11012001 : Record 11071893;
      OrigPrognosisLine@1100525001 : Record 11071893;
      lPrevPrognosisHeader@1100525002 : Record 11012034;
      lPrognDate@1100485001 : Date;
      lPrevDate@1100485002 : Date;
    BEGIN
      ProjSetup.GET;

      lPrevPrognosisHeader.RESET;
      lPrevPrognosisHeader.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      lPrevPrognosisHeader.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      IF lPrevPrognosisHeader.FINDFIRST THEN  BEGIN
        lPrevPrognosisHeader.SETFILTER("Prognosis Date", '<%1', IPrognosisHeader."Prognosis Date");
        IF lPrevPrognosisHeader.FINDLAST THEN  BEGIN
          lPrevDate := lPrevPrognosisHeader."Prognosis Date";
        END ELSE BEGIN
          EXIT; // There is no previous prognose
        END;
      END;

      WITH lPrognLineRec DO BEGIN
        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        FILTERGROUP(0);
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            SetPreviousDateFilter; //C017374.n
            CALCFIELDS("Previous Date");
            IF "Previous Date" = lPrevDate THEN BEGIN
              IF "Previous Date" <> 0D THEN BEGIN
                OrigPrognosisLine := lPrognLineRec;
                lPrevPrognosisLineRec := lPrognLineRec;
                lPrevPrognosisLineRec."Prognosis Date" := "Previous Date";
                IF lPrevPrognosisLineRec.FIND('=') THEN BEGIN
                  TRANSFERFIELDS(lPrevPrognosisLineRec,FALSE);
                  "Fix Prognosis Line" := IPrognosisHeader."Fix Prognosis Line";
                  VALIDATE("Prognosis Date");

                  CalculateValuesElements(lPrognLineRec,TRUE);
                  IF ICopyEndResult THEN BEGIN
                    VALIDATE("Prognosis End Result", lPrevPrognosisLineRec."Prognosis End Result");
                    VALIDATE("Amount incl. Surcharge"); //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
                    IF (Amount < 0) AND
                       (ProjSetup."Fill Prognosis End Result" =
                        ProjSetup."Fill Prognosis End Result"::"Prognosis may not be Negative" )
                    THEN
                      VALIDATE(Amount, 0);
                  END;
                  MODIFY(TRUE);
                END;
              END;
            END;
          UNTIL NEXT = 0;
          //copy manually added revenues
          IF lPrevDate <> 0D THEN BEGIN
            IF (ICostTypes = ICostTypes::Both) OR (ICostTypes = ICostTypes::Revenue) THEN BEGIN
              lPrognDate := "Prognosis Date";
              lPrevPrognosisLineRec.SETRANGE("Project No.", "Project No.");
              lPrevPrognosisLineRec.SETRANGE("Prognosis Date", lPrevDate);
              IF lPrevPrognosisLineRec.FINDSET THEN
                REPEAT
                  lPrognLineRec := lPrevPrognosisLineRec;
                  "Prognosis Date" := lPrognDate;
                  IF NOT FIND('=') THEN BEGIN
                    VALIDATE("Prognosis Date");
                    INSERT;
                  END;
                UNTIL lPrevPrognosisLineRec.NEXT =0;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE FillPrognosisWithAvailable@1(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      PrognosisLineSpec@1100525006 : Record 11020687;
      DimValRec@1100525004 : Record 349;
      JobRec@1100528601 : Record 11072003;
      DimMgt@1100525003 : Codeunit 408;
      BudgetRateManagement@1100528600 : Codeunit 11012358;
      lvRate@1100525001 : Decimal;
      BudgetRateFoundAt@1100528602 : Text[250];
    BEGIN
      //* 25-05-2010 Because available is inclusive surcharges Amount := Amount incl. Surcharge and Ovh. Surcharge := 0;
      ProjSetup.GET;

      WITH lPrognLineRec DO BEGIN
        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);

        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CalculateValues(lPrognLineRec,FALSE);
            IF "Amount incl. Surcharge" <> AvailableDec THEN BEGIN
              DimMgt.GetDimValueRec(2, "Cost Object",DimValRec,FALSE,'');
              IF (ProjSetup."Fill Prognosis with Available" = ProjSetup."Fill Prognosis with Available"::Always) OR
                 (("Prognosis End Result" >= 0) AND (ProjSetup."Fill Prognosis with Available" =
                   ProjSetup."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive")) OR
                 (("Prognosis End Result" >= 0) AND NOT DimValRec."Record Progress" AND
                   (ProjSetup."Fill Prognosis with Available" =
                   ProjSetup."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive and Progress is not recorded"))
              THEN BEGIN
                Quantity := AvailHoursDec;
                IF Quantity = 0 THEN
                  Quantity := 1;
                "Amount incl. Surcharge" := AvailableDec; //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
              END ELSE BEGIN
                Quantity := 0;
                "Amount incl. Surcharge" := 0;
              END;

              Amount := "Amount incl. Surcharge"; // Do not validate!
              "Ovh. Surcharge" := 0; // Do not validate!

              IF (BudgetSurchargeDec <> 0) AND (BudgetDec <> 0 ) THEN BEGIN
                "Ovh. Surcharge" := ROUND((BudgetSurchargeDec * (AvailableDec/BudgetDec)), 0.01); //M20030
                Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";                            //M20030
              END;

              //M20040 sn
              IF ("Amount incl. Surcharge" <> 0) AND ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                IF "Rate Code" = '' THEN
                  "Rate Code" := DimValRec."Rate Code";
                IF "Rate Code" <> '' THEN BEGIN
                  IF NOT JobRec.GET("Project No.") THEN
                    JobRec.INIT;
                  lvRate := BudgetRateManagement.GetBudgetRate(
                    0, "Project No.", '', '', JobRec."Global Dimension 1 Code", "Rate Code", "Prognosis Date", BudgetRateFoundAt);
                  IF lvRate <> Rate THEN
                    "Rate Code" := '';
                END;
              END;
              //M20040 en

              VALIDATE("Amount incl. Surcharge");
              MODIFY(TRUE);

              //DP00042.sn
              IF ProjSetup."Prognosis Specifications" THEN BEGIN  //C004846.n
                PrognosisLineSpec.SETRANGE("Project No.", "Project No.");
                PrognosisLineSpec.SETRANGE("Prognosis Date", "Prognosis Date");
                IF Element = '' THEN  //db, 15-11-11
                  PrognosisLineSpec.SETFILTER(Element, '%1', '')
                ELSE
                  PrognosisLineSpec.SETRANGE(Element, Element);
                PrognosisLineSpec.SETRANGE("Cost Type", "Cost Type");
                PrognosisLineSpec.SETRANGE("Cost Object", "Cost Object");
                PrognosisLineSpec.CALCSUMS(Quantity, Amount);

                Amount := Amount - PrognosisLineSpec.Amount;
                Quantity := Quantity - PrognosisLineSpec.Quantity;

                IF (Amount <> 0) OR (Quantity <> 0) THEN
                  InsertDetailLine(lPrognLineRec);
              END;
              //DP00042.en
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillPrognosisWithAvailableElem@1100528803(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      lPrognLineRec@11012000 : Record 11071893;
      DimValRec@1100525004 : Record 349;
    BEGIN
      //* 25-05-2010 Because available is inclusive surcharges Amount := Amount incl. Surcharge and Ovh. Surcharge := 0;
      ProjSetup.GET;

      WITH lPrognLineRec DO BEGIN

        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        FILTERGROUP(0);

        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CalculateValuesElements(lPrognLineRec,FALSE);
            IF "Amount incl. Surcharge" <> AvailableDec THEN BEGIN
              IF (ProjSetup."Fill Prognosis with Available" = ProjSetup."Fill Prognosis with Available"::Always) OR
                 (("Prognosis End Result" >= 0) AND (ProjSetup."Fill Prognosis with Available" =
                   ProjSetup."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive")) OR
                 (("Prognosis End Result" >= 0) AND NOT DimValRec."Record Progress" AND
                   (ProjSetup."Fill Prognosis with Available" =
                   ProjSetup."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive and Progress is not recorded"))
              THEN BEGIN
                Quantity := AvailHoursDec;
                IF Quantity = 0 THEN
                  Quantity := 1;
                "Amount incl. Surcharge" := AvailableDec; //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
              END ELSE BEGIN
                Quantity := 0;
                "Amount incl. Surcharge" := 0;
              END;

              Amount := "Amount incl. Surcharge"; // Do not validate!
              "Ovh. Surcharge" := 0; // Do not validate!

              IF (BudgetSurchargeDec <> 0) AND (BudgetDec <> 0 ) THEN BEGIN
                "Ovh. Surcharge" := ROUND((BudgetSurchargeDec * (AvailableDec/BudgetDec)), 0.01); //M20030
                Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";                            //M20030
              END;

              VALIDATE("Amount incl. Surcharge");
              MODIFY(TRUE);
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillPrognosisWithXtraPolCost@1210190500(IPrognosisHeader@1100525000 : Record 11012034);
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      OldAmount@1100525001 : Decimal;
    BEGIN
      //* 18-12-2007: Formules aangepast nav document JR (melding 8870)
      //* 25-05-2010 Because xtrapolation is inclusive surcharges Amount := Amount incl. Surcharge and Ovh. Surcharge := 0;
      WITH lPrognLineRec DO BEGIN
        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);

        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            OldAmount := Amount;  //DP00042
            CalculateValues(lPrognLineRec,FALSE);
            Quantity := 0;
            "Amount incl. Surcharge" := 0; //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
            IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
              IF (AllowedHoursDec <> 0) THEN BEGIN
                Quantity := ActualHoursDec * ((BudgHoursDec / AllowedHoursDec) - 1);
                IF (ActualHoursDec <> 0) THEN
                  "Amount incl. Surcharge" := Quantity * (TotalCostDec / ActualHoursDec);
              END;
            END ELSE BEGIN
              IF (AllowedDec <> 0) THEN BEGIN
                Quantity := 1;
                "Amount incl. Surcharge" := TotalCostDec * ((BudgetDec / AllowedDec) - 1);
              END;
            END;
            Amount := "Amount incl. Surcharge"; // Do not validate!
            "Ovh. Surcharge" := 0; // Do not validate!
            VALIDATE("Amount incl. Surcharge");
            MODIFY(TRUE);

            //DP00042.sn
            Amount := Amount - OldAmount;
            IF Amount <> 0 THEN
              InsertDetailLine(lPrognLineRec);
            //DP00042.en
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillPrognRevenues@1100525003(IPrognosisHeader@1100525020 : Record 11012034);
    VAR
      ProjInstallmRec@1100525000 : Record 11012018;
      PrognLine@1100525001 : Record 11012035;
      PrognLine2@1100525014 : Record 11012035;
      ProjRec@1100525002 : Record 11072003;
      ProjPrincRec@1100525007 : Record 11012005;
      ExtensionRec@1100525004 : Record 11012004;
      UnitPriceProdRec@1100525010 : Record 11020425;
      UnitPriceProdLine@1100525011 : Record 11020426;
      SubProjRec@1100525015 : Record 11072003;
      JobLedgEntry@1100525018 : Record 11072005;
      SalesLine@1100525023 : Record 37;
      ProjCostPlusEntry@1100525022 : Record 11012019;
      PrognMgt@1100525019 : Codeunit 11020217;
      TotInstalmAmount@1100525008 : Decimal;
      RemainingContractAmount@1100525009 : Decimal;
      CostPlusAmountToInvoice@1100525006 : Decimal;
      ProdUnitPriceAmount@1100525012 : Decimal;
      ProdUnitPriceContractAmount@1100525017 : Decimal;
      PrognosisAmount@1100525013 : Decimal;
      InstallmentIsValid@1100525003 : Boolean;
      UnitPriceExists@1100525005 : Boolean;
      HandleCostPlusUnitPriAsContr@1100525016 : Boolean;
      CountUnitPrice@1100525021 : Boolean;
    BEGIN
      ProjRec.GET(IPrognosisHeader."Project No.");
      ProjRec.SETRANGE("No.", IPrognosisHeader."Project No.");

      //Reset Amount Revenues
      PrognLine.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      PrognLine.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      PrognLine.SETRANGE("Cost Type", PrognLine."Cost Type"::Revenue);
      PrognLine.MODIFYALL("Amount Revenue",0,TRUE);
      COMMIT; //Necessary cause error report might popup in calccostplus report.

      SubProjRec.SETCURRENTKEY("Main Project");
      SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
      IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
        SubProjRec.SETRANGE("No.", IPrognosisHeader."Project No.");
      IF SubProjRec.FINDSET THEN
        REPEAT

          //Add Installment Prognosis Lines
          ProjInstallmRec.RESET;
          ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
          ProjInstallmRec.SETFILTER("Cost Object", '<>%1', '');
          IF ProjInstallmRec.FINDSET THEN
            REPEAT
              ProjInstallmRec.CALCFIELDS("Invoiced Price (LCY)");  //C019870.c (LCY)
              InstallmentIsValid := TRUE;
              IF ProjInstallmRec."Extension Contract" <> '' THEN
                InstallmentIsValid :=
                  (ExtensionRec.GET(ProjInstallmRec."Project No.", ProjInstallmRec."Extension Contract")) AND
                  (ExtensionRec.Status <> ExtensionRec.Status::Expired);
              PrognosisAmount := ProjInstallmRec."Installment Amount (LCY)" - ProjInstallmRec."Invoiced Price (LCY)";  //C019870.c (LCY)
              IF InstallmentIsValid AND (PrognosisAmount <> 0) THEN BEGIN
                IF ProjRec."Prognosis per Element" THEN
                  PrognLine.Element := ProjInstallmRec.Element
                ELSE
                  PrognLine.Element := '';

                PrognLine.GET(
                  IPrognosisHeader."Project No.",IPrognosisHeader."Prognosis Date",
                  PrognLine."Cost Type"::Revenue, PrognLine.Element, ProjInstallmRec."Cost Object");

                PrognLine."Amount Revenue" := PrognLine."Amount Revenue" + PrognosisAmount;
                PrognLine.MODIFY;
              END;
              TotInstalmAmount := TotInstalmAmount + ProjInstallmRec."Installment Amount (LCY)";  //C019870.c (LCY)
            UNTIL ProjInstallmRec.NEXT = 0;

          //Cost Plus / Production Unit Prices
          UnitPriceExists := FALSE;
          IF UnitPriceProdRec.READPERMISSION THEN BEGIN
            UnitPriceProdRec.RESET;
            UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
            UnitPriceExists := NOT UnitPriceProdRec.ISEMPTY;
          END;
          HandleCostPlusUnitPriAsContr :=
            UnitPriceExists AND
            (SubProjRec."Settlement Method" = SubProjRec."Settlement Method"::"Fixed Price");

          IF HandleCostPlusUnitPriAsContr THEN BEGIN
            JobLedgEntry.RESET;
            JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type");
            JobLedgEntry.SETRANGE("Main Project No.", SubProjRec."Main Project");
            JobLedgEntry.SETRANGE("Job No.", SubProjRec."No.");
            JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
            JobLedgEntry.SETRANGE("Project Invoice", TRUE);
            JobLedgEntry.SETRANGE("Installment Invoice", FALSE);
            JobLedgEntry.SETRANGE("Posting Date", 0D, IPrognosisHeader."Prognosis Date");
            IF JobLedgEntry.FINDSET THEN
              REPEAT
                ProdUnitPriceContractAmount := ProdUnitPriceContractAmount - JobLedgEntry."Total Price (LCY)";
              UNTIL JobLedgEntry.NEXT = 0;
          END ELSE BEGIN
            IF UnitPriceExists THEN BEGIN
              UnitPriceProdRec.RESET;
              UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
              UnitPriceProdRec.SETRANGE(Status, UnitPriceProdRec.Status::Offered, UnitPriceProdRec.Status::Approved);
              UnitPriceProdRec.SETFILTER("Production Date", '..%1', IPrognosisHeader."Prognosis Date");
              IF UnitPriceProdRec.FINDSET THEN
                REPEAT
                  IF UnitPriceProdRec.Invoiced THEN BEGIN
                    SalesLine.SETCURRENTKEY("Document Type","Job No.");
                    SalesLine.SETRANGE(
                      "Document Type",SalesLine."Document Type"::Invoice,SalesLine."Document Type"::"Credit Memo");
                    SalesLine.SETRANGE("Job No.", SubProjRec."No.");
                    SalesLine.SETRANGE("Production Motivation Date", UnitPriceProdRec."Production Date");
                    SalesLine.SETRANGE("Production Motivation Code", UnitPriceProdRec.Code);
                    CountUnitPrice := NOT SalesLine.ISEMPTY;
                  END ELSE
                    CountUnitPrice := TRUE;
                  IF CountUnitPrice THEN BEGIN
                    UnitPriceProdLine.SETRANGE("Project No.", UnitPriceProdRec."Project No.");
                    UnitPriceProdLine.SETRANGE("Production Date", UnitPriceProdRec."Production Date");
                    UnitPriceProdLine.SETRANGE(Code, UnitPriceProdRec.Code);
                    IF UnitPriceProdLine.FINDSET THEN
                      REPEAT
                        ProdUnitPriceAmount := ProdUnitPriceAmount + UnitPriceProdLine."Production Value";
                      UNTIL UnitPriceProdLine.NEXT = 0;
                  END;
                UNTIL UnitPriceProdRec.NEXT = 0;
            END ELSE
              CostPlusAmountToInvoice := CostPlusAmountToInvoice + PrognMgt.CostPlustAmountToInvoice(SubProjRec);

            //Cost Plus Manually added
            ProjCostPlusEntry.SETRANGE("Project No.", IPrognosisHeader."Project No.");
            ProjCostPlusEntry.SETRANGE("Entry No. Project Ledger", 0);
            IF ProjCostPlusEntry.FINDSET THEN
              REPEAT
                IF ProjCostPlusEntry.Invoiced THEN BEGIN
                  ProjCostPlusEntry.CALCFIELDS("Invoice in Process", "Credit Memo in Process");
                  CostPlusAmountToInvoice :=
                    CostPlusAmountToInvoice +
                    ProjCostPlusEntry."Invoice in Process" +
                    ProjCostPlusEntry."Credit Memo in Process";
                END ELSE
                  CostPlusAmountToInvoice :=
                    CostPlusAmountToInvoice + ProjCostPlusEntry."Sales Amount";
              UNTIL ProjCostPlusEntry.NEXT = 0;

          END;
        UNTIL SubProjRec.NEXT = 0;

      //Calculate Difference Contract Amount and Project Installments
      RemainingContractAmount :=
        (IPrognosisHeader."Contract Amount Project" + IPrognosisHeader."Contract Amount Extensions" +
         IPrognosisHeader."Contract Amount Options") -
        TotInstalmAmount - ProdUnitPriceContractAmount;

      //Add Prognosis Line
      PrognosisAmount := CostPlusAmountToInvoice + RemainingContractAmount + ProdUnitPriceAmount;
      IF PrognosisAmount <> 0 THEN BEGIN
        IF ProjRec."Prognosis per Element" THEN
          PrognLine.Element := ProjInstallmRec.Element
        ELSE
          PrognLine.Element := '';
        IF ProjPrincRec.GET(IPrognosisHeader."Project No.", ProjRec."Bill-to Customer No.") THEN
          PrognLine."Cost Object" := ProjPrincRec."Cost Object"
        ELSE
          PrognLine."Cost Object" := '';
        IF PrognLine.GET(
          IPrognosisHeader."Project No.",IPrognosisHeader."Prognosis Date",
          PrognLine."Cost Type"::Revenue, PrognLine.Element, PrognLine."Cost Object") THEN
        BEGIN
          PrognLine."Amount Revenue" := PrognLine."Amount Revenue" + PrognosisAmount;
          PrognLine.MODIFY;
        END ELSE BEGIN
          PrognLine2.INIT;
          PrognLine2."Project No." := IPrognosisHeader."Project No.";
          PrognLine2.VALIDATE("Prognosis Date", IPrognosisHeader."Prognosis Date");
          PrognLine2."Cost Type" := PrognLine."Cost Type"::Revenue;
          PrognLine2.Element := PrognLine.Element;
          PrognLine2."Cost Object" := PrognLine."Cost Object";
          PrognLine2."Amount Revenue" := PrognosisAmount;
          PrognLine2.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE RemoveSurcharges@1100525004(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      lPrognLineRec@1100525000 : Record 11012035;
      lvPrognosisRec@1100525001 : Record 11012034;
    BEGIN
      WITH lPrognLineRec DO BEGIN

        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);

        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            "Ovh. Surcharge" := 0;
            VALIDATE("Amount incl. Surcharge", Amount); //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;

      lvPrognosisRec.INIT;
      lvPrognosisRec.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      lvPrognosisRec.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      IF lvPrognosisRec.FINDFIRST THEN BEGIN
        IF lvPrognosisRec."Ovh. Surcharges Calculated" THEN BEGIN
          lvPrognosisRec."Ovh. Surcharges Calculated" := FALSE;
          lvPrognosisRec."Altered After Calculation" := FALSE;
          lvPrognosisRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE CalculateSurcharges@1100525007(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      lPrognLineRec@1100525000 : Record 11012035;
      lvPrognosisRec@1100525001 : Record 11012034;
    BEGIN
      ProjSetup.GET;

      WITH lPrognLineRec DO BEGIN

        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);

        IF NOT ProjSetup."Prognosis Ovh Surcharge Labor" THEN
          SETFILTER("Cost Type", '<>%1', "Cost Type"::Labor);  //M23265

        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            CalcSurcharge(lPrognLineRec);
          UNTIL NEXT = 0;
        END;
      END;

      lvPrognosisRec.INIT;
      lvPrognosisRec.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      lvPrognosisRec.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      IF lvPrognosisRec.FINDFIRST THEN BEGIN
        lvPrognosisRec."Ovh. Surcharges Calculated" := TRUE;
        lvPrognosisRec."Altered After Calculation" := FALSE;
        lvPrognosisRec.MODIFY;
      END;
    END;

    PROCEDURE CalcSurcharge@1210190009(lPrognLineRec@1100525000 : Record 11012035);
    VAR
      ProjRec@1100525009 : Record 11072003;
      ProjectTypeRec@1100485001 : Record 11012009;
      SurchargeRec@1100525003 : Record 11020208;
      SurchDimValRec@1100525004 : Record 349;
      lPrognLineRec2@1100525005 : Record 11012035;
      lPrognLineRec3@1100525007 : Record 11012035;
      lProjectElementRec@1100525008 : Record 11012010;
      DimValRec@1100525011 : Record 349;
      DimMgt@1100525010 : Codeunit 408;
      lvType@1100525001 : Code[20];
      lvOrigin@1100525002 : 'Project,Service';
      lvTotSurchAmount@1100525006 : Decimal;
    BEGIN
      WITH lPrognLineRec DO BEGIN
        ProjRec.GET("Project No.");
        lvType := ProjRec."Project Type";
        ProjectTypeRec.GET(ProjRec."Project Type");

        DimMgt.GetDimValueRec(2, "Cost Object",DimValRec,FALSE,'');

        IF SurchargeRec.GetSurcharges(lvOrigin::Project, lvType, "Project No.",
                                      (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue),
                                      DimValRec."Cost Type", DimValRec.Code, '',
                                      ProjRec."Global Dimension 1 Code", '',      //M21761
                                      "Cost Component", "Prognosis Date",
                                      SurchargeRec) THEN
        BEGIN
          REPEAT
            SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
            lPrognLineRec2 := lPrognLineRec;
            lPrognLineRec2."Ovh. Surcharge" := 0;

            InitSurcharge(lPrognLineRec2, DimValRec, SurchDimValRec,
                          SurchargeRec, '', lvType, lvTotSurchAmount, '');

            //Er is nu een regel gevuld met een kostendrager en een toeslag.
            //De overeenkomstige regel moet worden opgezocht in de tabel en het
            //opslag bedrag moet worden ingeteld.
            lPrognLineRec3.INIT;
            lPrognLineRec3.RESET;
            IF lPrognLineRec3.GET(lPrognLineRec2."Project No.",
                                  lPrognLineRec2."Prognosis Date",
                                  lPrognLineRec2."Cost Type",
                                  lPrognLineRec2.Element,
                                  lPrognLineRec2."Cost Object") THEN
            BEGIN
              lPrognLineRec3."Ovh. Surcharge" := lPrognLineRec3."Ovh. Surcharge" + lPrognLineRec2."Ovh. Surcharge";
              lPrognLineRec3.VALIDATE(Amount);
              lPrognLineRec3.VALIDATE("Prognosis Date", lPrognLineRec3."Prognosis Date");
              lPrognLineRec3.MODIFY;
            END ELSE BEGIN
              IF lPrognLineRec2.Element <> '' THEN BEGIN
                IF NOT lProjectElementRec.GET(lPrognLineRec2."Project No.", lPrognLineRec2.Element) THEN
                  ERROR(STRSUBSTNO(Text001, lPrognLineRec2."Project No.", lPrognLineRec2.Element));
              END;
              lPrognLineRec3."Project No." := lPrognLineRec2."Project No.";
              lPrognLineRec3.VALIDATE("Prognosis Date", lPrognLineRec2."Prognosis Date");
              lPrognLineRec3."Cost Type" := lPrognLineRec2."Cost Type";
              lPrognLineRec3.Element := lPrognLineRec2.Element;
              lPrognLineRec3."Cost Object" := lPrognLineRec2."Cost Object";
              lPrognLineRec3."Ovh. Surcharge" := lPrognLineRec2."Ovh. Surcharge";
              lPrognLineRec3.VALIDATE(Amount);
              lPrognLineRec3.INSERT(TRUE);   //db, 21-12-12: apply insert-trigger
            END;
          UNTIL SurchargeRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InitSurcharge@1100525008(VAR lProgLineRec@1210190002 : Record 11012035;OrigDimRec@1210190001 : Record 349;SurchDimRec@1210190009 : Record 349;SurchargeRec@1210190004 : Record 11020208;Dim1@1210190005 : Code[20];ProjType@1210190006 : Code[20];VAR vTotSurchAmount@1100485002 : Decimal;VendorPostingGroup@1100525000 : Code[20]);
    BEGIN
      WITH lProgLineRec DO BEGIN

        IF SurchargeRec.Percentage <> 0 THEN
          IF SurchargeRec."Surcharge over Surcharge" THEN
            "Ovh. Surcharge" := ROUND((Amount + vTotSurchAmount) * SurchargeRec.Percentage/100)
          ELSE
            "Ovh. Surcharge" := ROUND(Amount * SurchargeRec.Percentage/100)
        ELSE
          "Ovh. Surcharge" := ROUND(SurchargeRec.Amount * Quantity);

        "Unit of Measure" := SurchDimRec."Unit of Measure";
        "Cost Object" := SurchDimRec.Code;
        "Cost Type" := SurchDimRec."Cost Type";

        IF SurchargeRec."Element Surcharge" <> '' THEN     //** CALL 19699 10-06-2010
          lProgLineRec.Element := SurchargeRec."Element Surcharge";

        vTotSurchAmount := vTotSurchAmount + "Ovh. Surcharge";

      END;
    END;

    PROCEDURE CreatePrognosis@1100528800(VAR Prognosis@1210190001 : Record 11012034;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      PrevPrognosisRec@1100525001 : Record 11012034;
      SubProjRec@1100525002 : Record 11072003;
      ProjRec@1100528801 : Record 11072003;
      CostControlRec@1100528806 : Record 11012050;
      ProgLineRec@1100528805 : Record 11012035;
      DimValRec@1100528804 : Record 349;
      ProjPrincRec@1100528810 : Record 11012005;
      ProjInstallmRec@1100528809 : Record 11012018;
      CostControlProjElemRec@1100528808 : Record 11012048;
      JobLedgEntry@1100528807 : Record 11072005;
      PrognMgt@1100525007 : Codeunit 11020217;
      CreateCostObjContrElem@1100528802 : Codeunit 11012032;
      DimMgt@1100528803 : Codeunit 408;
      BudgetRateManagement@1100528600 : Codeunit 11012358;
      ElementCode@1210190000 : Code[20];
      lvRate@1100525004 : Decimal;
      BudgetRateFound@1100528601 : Text[250];
    BEGIN
      WITH Prognosis DO BEGIN
        ProjSetup.GET;
        ProjRec.GET("Project No.");

        //Build Cost Control
        ProjRec.BuildCostControl; //call 29432
        CreateCostObjContrElem.RUN(ProjRec);
        //DP00042.so
        //IF NOT ProjRec."Prognosis per Element" THEN
        //  CreateCostObjContr.RUN(ProjRec);  //db, 15-11-11: already checked by BuildCostControl
        //DP00042.eo
        COMMIT; //Necessary cause error report might popup in calccostplus report.

      //IF "Prognosis Level" = "Prognosis Level"::Rough THEN BEGIN // dp00029.n // C002939.o
        //Prognosis Header
        IF ICostTypes = ICostTypes::Both THEN
          IF "Expected Finishing Date" = 0D THEN BEGIN
            PrevPrognosisRec := Prognosis;
            PrevPrognosisRec.SETRANGE("Project No.", "Project No.");
            IF PrevPrognosisRec.NEXT(-1) <> 0 THEN
              "Expected Finishing Date" := PrevPrognosisRec."Expected Finishing Date";
          END;
        IF ICostTypes <> ICostTypes::Cost THEN
          PrognMgt.PrognRevenues(ProjRec, Prognosis);
        IF ICostTypes <> ICostTypes::Revenue THEN
          PrognMgt.RoughPrognTotCost(ProjRec, Prognosis);
        MODIFY;
      //END; // dp00029.n // C002939.o

      IF "Prognosis Level" = "Prognosis Level"::Detailed THEN BEGIN // dp00029.n
        //Prognosis Cost Lines
        IF ICostTypes <> ICostTypes::Revenue THEN BEGIN
          CostControlRec.SETRANGE("Project No.","Project No.");
          IF CostControlRec.FINDSET(FALSE, FALSE) THEN
            REPEAT
              IF ProjRec."Prognosis per Element" THEN
                ElementCode := CostControlRec.Element
              ELSE
                ElementCode := '';
              IF NOT ProgLineRec.GET(
                CostControlRec."Project No.", "Prognosis Date", CostControlRec."Cost Type",
                ElementCode, CostControlRec."Cost Object") THEN
              BEGIN
                ProgLineRec.INIT;
                ProgLineRec."Project No." := "Project No.";
                ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
                ProgLineRec.VALIDATE(Element, ElementCode);
                ProgLineRec."Cost Type" := CostControlRec."Cost Type";
                ProgLineRec."Cost Object" := CostControlRec."Cost Object";
                DimMgt.GetDimValueRec(2, CostControlRec."Cost Object",DimValRec,FALSE,'');
                ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                ProgLineRec."Rate Code" := DimValRec."Rate Code"; //19153 No validation
                ProgLineRec.INSERT(TRUE);
              END;

              ProgLineRec."Fix Prognosis Line" := "Fix Prognosis Line";  //db, 13-01-11
              CalculateValues(ProgLineRec,TRUE);
              ProgLineRec."Cost Component" := CostControlRec."Cost Component";

              //M20040 sn
              IF ProgLineRec."Cost Type" = ProgLineRec."Cost Type"::Labor THEN BEGIN
                //Tarief uit Tariefcode
                lvRate := BudgetRateManagement.GetBudgetRate(
                  0, ProgLineRec."Project No.", '', '', ProjRec."Global Dimension 1 Code", ProgLineRec."Rate Code",
                  ProgLineRec."Prognosis Date", BudgetRateFound);
                ProgLineRec.Rate := lvRate;
                //Tarief respectievelijk uit actuele (totale) kosten of uit de begroting
                IF (ProgLineRec."Total Hours" <> 0) AND (ProgLineRec."Total Cost" <> 0) THEN BEGIN
                   lvRate := ROUND(ProgLineRec."Total Cost"/ ProgLineRec."Total Hours", 0.01);
                END ELSE BEGIN
                   IF (ProgLineRec."Budget Amount" <> 0) AND (ProgLineRec."Budget Hours" <> 0) THEN
                     lvRate := ROUND(ProgLineRec."Budget Amount"/ ProgLineRec."Budget Hours", 0.01);
                END;
                IF ProgLineRec.Rate <> lvRate THEN BEGIN
                  ProgLineRec.Rate := lvRate;
                  ProgLineRec."Rate Code" := '';
                END;
              END;
              //M20040 en

              ProgLineRec.MODIFY(TRUE);
            UNTIL CostControlRec.NEXT = 0;
        END;

        //Prognosis Revenue Lines
        IF ICostTypes <> ICostTypes::Cost THEN BEGIN
          ProjPrincRec.RESET;
          ProjPrincRec.SETCURRENTKEY("Main Project No.");
          ProjPrincRec.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            ProjPrincRec.SETRANGE("Project No.", "Project No.");
          ProjPrincRec.SETFILTER("Cost Object", '<>%1', '');
          IF ProjPrincRec.FINDSET THEN
            REPEAT
              ProgLineRec.INIT;
              ProgLineRec."Project No." := "Project No.";
              ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
              ProgLineRec."Cost Type" := ProgLineRec."Cost Type"::Revenue;
              ProgLineRec."Cost Object" := ProjPrincRec."Cost Object";
              DimMgt.GetDimValueRec(2, ProjPrincRec."Cost Object",DimValRec,FALSE,'');
              ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
              ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
              IF NOT ProjRec."Prognosis per Element" THEN BEGIN
                IF ProgLineRec.INSERT(TRUE) THEN;
              END ELSE BEGIN
                CostControlProjElemRec.SETRANGE("Project No.", "Project No.");
                IF CostControlProjElemRec.FINDSET THEN
                  REPEAT
                    ProgLineRec.VALIDATE(Element, CostControlProjElemRec.Element);
                 UNTIL CostControlProjElemRec.NEXT = 0;
              END;
            UNTIL ProjPrincRec.NEXT = 0;

          SubProjRec.SETCURRENTKEY("Main Project");
          SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            SubProjRec.SETRANGE("No.", "Project No.");
          IF SubProjRec.FINDSET THEN
            REPEAT
              ProjInstallmRec.RESET;
              ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
              ProjInstallmRec.SETFILTER("Cost Object", '<>%1', '');
              IF ProjInstallmRec.FINDSET THEN
                REPEAT
                  ProgLineRec.INIT;
                  ProgLineRec."Project No." := "Project No.";
                  ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
                  IF ProjRec."Prognosis per Element" THEN
                    ProgLineRec.VALIDATE(Element, ProjInstallmRec.Element)
                  ELSE
                    ProgLineRec.Element := '';
                  ProgLineRec."Cost Type" := ProgLineRec."Cost Type"::Revenue;
                  ProgLineRec."Cost Object" := ProjInstallmRec."Cost Object";
                  DimMgt.GetDimValueRec(2, ProjInstallmRec."Cost Object",DimValRec,FALSE,'');
                  ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                  ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                  IF ProgLineRec.INSERT(TRUE) THEN;
                UNTIL ProjInstallmRec.NEXT = 0;
            UNTIL SubProjRec.NEXT = 0;

          //*C000527.sn
          JobLedgEntry.RESET;
          JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Cost Type","Global Dimension 2 Code","Entry Type","Posting Date");
          JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            JobLedgEntry.SETRANGE("Job No.", "Project No.");
          JobLedgEntry.SETRANGE("Cost Type", JobLedgEntry."Cost Type"::Revenues);
          JobLedgEntry.SETFILTER("Global Dimension 2 Code", '<>%1', '');
          JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
          JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
          IF JobLedgEntry.FINDSET THEN BEGIN
            REPEAT
              IF ProjRec."Prognosis per Element" THEN
                ElementCode := JobLedgEntry.Element
              ELSE
                ElementCode := '';
              IF ProgLineRec.GET(
                "Project No.", "Prognosis Date", ProgLineRec."Cost Type"::Revenue,
                ElementCode, JobLedgEntry."Global Dimension 2 Code")
              THEN BEGIN
                IF NOT ProjRec."Prognosis per Element" THEN BEGIN
                  JobLedgEntry.SETRANGE("Global Dimension 2 Code", JobLedgEntry."Global Dimension 2 Code");
                  JobLedgEntry.FINDLAST;
                  JobLedgEntry.SETFILTER("Global Dimension 2 Code", '<>%1', '');  // Restore filter
                END;
              END ELSE BEGIN
                ProgLineRec.INIT;
                ProgLineRec."Project No." := "Project No.";
                ProgLineRec.VALIDATE("Prognosis Date", "Prognosis Date");
                IF ProjRec."Prognosis per Element" THEN
                  ProgLineRec.VALIDATE(Element, ElementCode)
                ELSE
                  ProgLineRec.Element := '';
                ProgLineRec."Cost Type" := ProgLineRec."Cost Type"::Revenue;
                ProgLineRec."Cost Object" := JobLedgEntry."Global Dimension 2 Code";
                DimMgt.GetDimValueRec(2, ProgLineRec."Cost Object",DimValRec,FALSE,'');
                ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                ProgLineRec.INSERT(TRUE);
              END;
            UNTIL JobLedgEntry.NEXT = 0;
          END;
          //*C000527.en

          //Revenues Invoiced
          ProgLineRec.RESET;
          ProgLineRec.SETRANGE("Project No.", "Project No.");
          ProgLineRec.SETRANGE("Prognosis Date", "Prognosis Date");
          ProgLineRec.SETRANGE("Cost Type", ProgLineRec."Cost Type"::Revenue);
          IF ProgLineRec.FINDSET(TRUE, FALSE) THEN
            REPEAT
              JobLedgEntry.RESET;
              JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type",Element);
              JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
              IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                JobLedgEntry.SETRANGE("Job No.", "Project No.");
              JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
              IF ProjRec."Prognosis per Element" THEN
                JobLedgEntry.SETRANGE(Element, ProgLineRec.Element);
              JobLedgEntry.SETRANGE("Global Dimension 2 Code", ProgLineRec."Cost Object");
              JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
              JobLedgEntry.CALCSUMS("Total Price (LCY)");
              ProgLineRec.Invoiced := -JobLedgEntry."Total Price (LCY)";
              ProgLineRec.MODIFY;
            UNTIL ProgLineRec.NEXT = 0;
        END;

        END; // dp00029.n
      END;

      CheckPrognosisSpecification(Prognosis."Project No.", Prognosis."Prognosis Date");  //DP00042
    END;

    PROCEDURE CreatePrognosisElements@1100528801(VAR Prognosis@1210190001 : Record 11012034;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      PrevPrognosisRec@1100525001 : Record 11012034;
      SubProjRec@1100525002 : Record 11072003;
      ProjRec@1100528801 : Record 11072003;
      CostControlRec@1100528806 : Record 11012048;
      ProgLineRec@1100528805 : Record 11071893;
      DimValRec@1100528804 : Record 349;
      ProjPrincRec@1100528810 : Record 11012005;
      ProjInstallmRec@1100528809 : Record 11012018;
      CostControlProjElemRec@1100528808 : Record 11012048;
      JobLedgEntry@1100528807 : Record 11072005;
      CreateCostObjContrElem@1100528802 : Codeunit 11012032;
      DimMgt@1100528803 : Codeunit 408;
      ElementCode@1210190000 : Code[20];
    BEGIN
      WITH Prognosis DO BEGIN
        ProjSetup.GET;
        ProjRec.GET("Project No.");

        //Build Cost Control
        ProjRec.BuildCostControl; //call 29432
        CreateCostObjContrElem.RUN(ProjRec);
        COMMIT; //Necessary cause error report might popup in calccostplus report.

        IF ICostTypes = ICostTypes::Both THEN
          IF "Expected Finishing Date" = 0D THEN BEGIN
            PrevPrognosisRec := Prognosis;
            PrevPrognosisRec.SETRANGE("Project No.", "Project No.");
            IF PrevPrognosisRec.NEXT(-1) <> 0 THEN
              "Expected Finishing Date" := PrevPrognosisRec."Expected Finishing Date";
          END;

        MODIFY;

        //Prognosis Cost Lines
        IF ICostTypes <> ICostTypes::Revenue THEN BEGIN
          CostControlRec.SETRANGE("Project No.","Project No.");
          IF CostControlRec.FINDSET(FALSE, FALSE) THEN
            REPEAT
                ElementCode := CostControlRec.Element;
              IF NOT ProgLineRec.GET(
                CostControlRec."Project No.", "Prognosis Date", ElementCode) THEN
              BEGIN
                ProgLineRec.INIT;
                ProgLineRec."Project No." := "Project No.";
                ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
                ProgLineRec.VALIDATE(Element, ElementCode);
                ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                ProgLineRec.INSERT(TRUE);
              END;

              ProgLineRec."Fix Prognosis Line" := "Fix Prognosis Line";  //db, 13-01-11
              CalculateValuesElements(ProgLineRec,TRUE);

              ProgLineRec.MODIFY(TRUE);
            UNTIL CostControlRec.NEXT = 0;
        END;

        //Prognosis Revenue Lines
        IF ICostTypes <> ICostTypes::Cost THEN BEGIN
          ProjPrincRec.RESET;
          ProjPrincRec.SETCURRENTKEY("Main Project No.");
          ProjPrincRec.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            ProjPrincRec.SETRANGE("Project No.", "Project No.");
          ProjPrincRec.SETFILTER("Cost Object", '<>%1', '');
          IF ProjPrincRec.FINDSET THEN
            REPEAT
              ProgLineRec.INIT;
              ProgLineRec."Project No." := "Project No.";
              ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
              DimMgt.GetDimValueRec(2, ProjPrincRec."Cost Object",DimValRec,FALSE,'');
              ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
              CostControlProjElemRec.SETRANGE("Project No.", "Project No.");
              IF CostControlProjElemRec.FINDSET THEN
                REPEAT
                  ProgLineRec.VALIDATE(Element, CostControlProjElemRec.Element);
               UNTIL CostControlProjElemRec.NEXT = 0;
            UNTIL ProjPrincRec.NEXT = 0;

          SubProjRec.SETCURRENTKEY("Main Project");
          SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            SubProjRec.SETRANGE("No.", "Project No.");
          IF SubProjRec.FINDSET THEN
            REPEAT
              ProjInstallmRec.RESET;
              ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
              ProjInstallmRec.SETFILTER("Cost Object", '<>%1', '');
              IF ProjInstallmRec.FINDSET THEN
                REPEAT
                  ProgLineRec.INIT;
                  ProgLineRec."Project No." := "Project No.";
                  ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
                  ProgLineRec.VALIDATE(Element, ProjInstallmRec.Element);
                  DimMgt.GetDimValueRec(2, ProjInstallmRec."Cost Object",DimValRec,FALSE,'');
                  ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                  IF ProgLineRec.INSERT(TRUE) THEN;
                UNTIL ProjInstallmRec.NEXT = 0;
            UNTIL SubProjRec.NEXT = 0;

          //*C000527.sn
          JobLedgEntry.RESET;
          JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Cost Type","Global Dimension 2 Code","Entry Type","Posting Date");
          JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            JobLedgEntry.SETRANGE("Job No.", "Project No.");
          JobLedgEntry.SETRANGE("Cost Type", JobLedgEntry."Cost Type"::Revenues);
          JobLedgEntry.SETFILTER("Global Dimension 2 Code", '<>%1', '');
          JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
          JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
          IF JobLedgEntry.FINDSET THEN BEGIN
            REPEAT
              ElementCode := JobLedgEntry.Element;
              IF NOT ProgLineRec.GET("Project No.", "Prognosis Date", ElementCode) THEN
              BEGIN
                ProgLineRec.INIT;
                ProgLineRec."Project No." := "Project No.";
                ProgLineRec.VALIDATE("Prognosis Date", "Prognosis Date");
                ProgLineRec.VALIDATE(Element, ElementCode);
                ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                ProgLineRec.INSERT(TRUE);
              END;
            UNTIL JobLedgEntry.NEXT = 0;
          END;
          //*C000527.en

          //Revenues Invoiced
          ProgLineRec.RESET;
          ProgLineRec.SETRANGE("Project No.", "Project No.");
          ProgLineRec.SETRANGE("Prognosis Date", "Prognosis Date");
          IF ProgLineRec.FINDSET(TRUE, FALSE) THEN
            REPEAT
              JobLedgEntry.RESET;
              JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type",Element);
              JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
              IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                JobLedgEntry.SETRANGE("Job No.", "Project No.");
              JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
              JobLedgEntry.SETRANGE(Element, ProgLineRec.Element);
              JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
              JobLedgEntry.CALCSUMS("Total Price (LCY)");
              ProgLineRec.Invoiced := -JobLedgEntry."Total Price (LCY)";
              ProgLineRec.MODIFY;
            UNTIL ProgLineRec.NEXT = 0;
        END;

      END;
    END;

    LOCAL PROCEDURE CheckPrognosisSpecification@11136550(iProject@11136551 : Code[20];iPrognosisDate@11136554 : Date);
    VAR
      Job@11136553 : Record 11072003;
      BudgetLine@11136550 : Record 11012001;
      PrognosisLine@11136552 : Record 11012035;
      PrognosisLineSpec@11136556 : Record 11020687;
    BEGIN
      //DP00042
      IF NOT ProjSetup."Prognosis Specifications" THEN  //C004846.n
        EXIT;
      Job.GET(iProject);

      PrognosisLine.SETRANGE("Project No.", iProject);
      PrognosisLine.SETRANGE("Prognosis Date", iPrognosisDate);
      IF PrognosisLine.FINDSET THEN BEGIN
        REPEAT
          BudgetLine.SETCURRENTKEY("Project No.", Element, "Cost Type", "Cost Object");
          BudgetLine.SETRANGE("Project No.", PrognosisLine."Project No.");
          IF Job."Prognosis per Element" THEN
            BudgetLine.SETRANGE(Element, PrognosisLine.Element);
          BudgetLine.SETRANGE("Cost Type", PrognosisLine."Cost Type");
          BudgetLine.SETRANGE("Cost Object", PrognosisLine."Cost Object");
          BudgetLine.SETFILTER("Extension Contract Status", '%1|%2|%3',
            BudgetLine."Extension Contract Status"::"Not Applicable",
            BudgetLine."Extension Contract Status"::Order,
            BudgetLine."Extension Contract Status"::"Invoicing Allowed");  //db, 08-11-12: C003651
          IF BudgetLine.FINDSET THEN BEGIN
            REPEAT
              IF ISNULLGUID(BudgetLine."Reference No.") THEN BEGIN
                BudgetLine."Reference No." := CREATEGUID;
                BudgetLine.MODIFY;
              END;

              //PrognosisLineSpec.SETCURRENTKEY("Reference No.", "Project No.", "Prognosis Date");
              // Do not use key on field with DataType (performance)
              PrognosisLineSpec.SETRANGE("Reference No.", BudgetLine."Reference No.");
              PrognosisLineSpec.SETRANGE("Project No.", iProject);
              PrognosisLineSpec.SETRANGE("Prognosis Date", iPrognosisDate);
              IF PrognosisLineSpec.ISEMPTY THEN BEGIN
                CreatePrognosisSpecification(
                  iProject,
                  iPrognosisDate,
                  PrognosisLine.Element,
                  PrognosisLine."Cost Type",
                  PrognosisLine."Cost Object",
                  BudgetLine."Reference No.",
                  BudgetLine.Description,
                  BudgetLine."Extension Contract",
                  BudgetLine."Cost Component",
                  BudgetLine.Amount);   //db, 31-01-12: M32801
              END;
            UNTIL BudgetLine.NEXT = 0;
          END;
        UNTIL PrognosisLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreatePrognosisSpecification@11136551(iProject@11136555 : Code[20];iPrognosisDate@11136554 : Date;iElement@11136553 : Code[20];iCostType@11136552 : Integer;iCostObject@11136551 : Code[20];iReference@11136556 : GUID;iDescription@11136558 : Text[50];iExtensionContract@11136559 : Code[10];iCostComponent@11136560 : Code[20];iBudgetAmount@1210190000 : Decimal);
    VAR
      PrognosisLineSpec@11136550 : Record 11020687;
    BEGIN
      //DP00042
      IF NOT ProjSetup."Prognosis Specifications" THEN  //C004846.n
        EXIT;
      PrognosisLineSpec.VALIDATE("Project No.", iProject);
      PrognosisLineSpec.VALIDATE("Prognosis Date", iPrognosisDate);
      PrognosisLineSpec.VALIDATE("Cost Type", iCostType);
      PrognosisLineSpec.VALIDATE(Element, iElement);
      PrognosisLineSpec.VALIDATE("Cost Object", iCostObject);
      PrognosisLineSpec.VALIDATE("Reference No.", iReference);
      PrognosisLineSpec.VALIDATE(Description, iDescription);
      PrognosisLineSpec.VALIDATE("Extension Contract", iExtensionContract);
      PrognosisLineSpec.VALIDATE("Cost Component", iCostComponent);
      PrognosisLineSpec.INSERT(TRUE);
      //db, 31-01-12: M32801
      PrognosisLineSpec."Budget Amount" := iBudgetAmount;
      PrognosisLineSpec.MODIFY;
    END;

    LOCAL PROCEDURE UpdateDetailLinesFromPrevious@11136554(PrognosisLine@11136550 : Record 11012035;PreviousPrognosisLine@11136551 : Record 11012035);
    VAR
      PrognosisLineSpec@11136552 : Record 11020687;
      PrognosisLineSpec2@11136554 : Record 11020687;
      PreviousPrognosisLineSpec@11136553 : Record 11020687;
      RemainingAmount@11136555 : Decimal;
      RemainingQuantity@11136556 : Decimal;
      NullGUID@1210190000 : GUID;
    BEGIN
      //DP00042
      IF NOT ProjSetup."Prognosis Specifications" THEN  //C004846.n
        EXIT;
      //PreviousPrognosisLineSpec.SETCURRENTKEY("Reference No.");  // Do not use key on field with DataType (performance)
      PreviousPrognosisLineSpec.SETRANGE("Project No.", PreviousPrognosisLine."Project No.");
      PreviousPrognosisLineSpec.SETRANGE("Prognosis Date", PreviousPrognosisLine."Prognosis Date");

      //PrognosisLineSpec.SETCURRENTKEY("Reference No.");  // Do not use key on field with DataType (performance)
      PrognosisLineSpec.SETRANGE("Project No.", PrognosisLine."Project No.");
      PrognosisLineSpec.SETRANGE("Prognosis Date", PrognosisLine."Prognosis Date");
      IF PrognosisLine.Element = '' THEN  //db, 15-11-11
        PrognosisLineSpec.SETFILTER(Element, '%1', '')
      ELSE
        PrognosisLineSpec.SETRANGE(Element, PrognosisLine.Element);
      PrognosisLineSpec.SETRANGE("Cost Type", PrognosisLine."Cost Type");
      PrognosisLineSpec.SETRANGE("Cost Object", PrognosisLine."Cost Object");
      PrognosisLineSpec.SETFILTER("Reference No.", '<>%1', NullGUID);
      IF PrognosisLineSpec.FINDSET THEN BEGIN
        REPEAT
          PreviousPrognosisLineSpec.SETRANGE("Reference No.", PrognosisLineSpec."Reference No.");
          IF PreviousPrognosisLineSpec.FINDFIRST THEN BEGIN
            PrognosisLineSpec2 := PrognosisLineSpec;
            PrognosisLineSpec2.Amount := PreviousPrognosisLineSpec.Amount;
            PrognosisLineSpec2.Quantity := PreviousPrognosisLineSpec.Quantity;
            PrognosisLineSpec2.UpdatePrice;
            PrognosisLineSpec2.MODIFY;
          END;
        UNTIL PrognosisLineSpec.NEXT = 0;
      END;

      // Find totals for all detail lines
      PrognosisLineSpec.SETRANGE("Reference No.");
      PrognosisLineSpec.CALCSUMS(Amount, Quantity);

      // Compare detail line totals against prognosis line values
      RemainingAmount := ROUND(PrognosisLine.Amount - PrognosisLineSpec.Amount); //C018540
      RemainingQuantity := ROUND(PrognosisLine.Quantity - PrognosisLineSpec.Quantity,0.00001); //C018540

      // If necessary, create detail line for remaining amount
      IF (RemainingAmount <> 0) OR (RemainingQuantity <> 0) THEN BEGIN
        PrognosisLine.Amount := RemainingAmount;
        PrognosisLine.Quantity := RemainingQuantity;
        InsertDetailLine(PrognosisLine);
      END;
    END;

    LOCAL PROCEDURE InsertDetailLine@1100525005(PrognosisLine@11136551 : Record 11012035);
    VAR
      PrognosisLineSpec@11136550 : Record 11020687;
    BEGIN
      //DP00042
      IF NOT ProjSetup."Prognosis Specifications" THEN  //C004846.n
        EXIT;
      PrognosisLine.CALCFIELDS("Cost Object Description");

      PrognosisLineSpec."Project No." := PrognosisLine."Project No.";
      PrognosisLineSpec.VALIDATE("Prognosis Date", PrognosisLine."Prognosis Date");
      PrognosisLineSpec.Element := PrognosisLine.Element;
      PrognosisLineSpec."Cost Type" := PrognosisLine."Cost Type";
      PrognosisLineSpec."Cost Object" := PrognosisLine."Cost Object";
      PrognosisLineSpec."Line No." := PrognosisLineSpec.FindNextLineNo;
      PrognosisLineSpec.Description := PrognosisLine."Cost Object Description";
      PrognosisLineSpec.Amount := PrognosisLine.Amount;
      PrognosisLineSpec.Quantity := PrognosisLine.Quantity;

      IF (PrognosisLineSpec.Amount <> 0) AND (PrognosisLineSpec.Quantity = 0) THEN
        PrognosisLineSpec.Quantity := 1;

      PrognosisLineSpec."Unit of Measure" := PrognosisLine."Unit of Measure";
      PrognosisLineSpec."Reference No." := CREATEGUID;
      PrognosisLineSpec.UpdatePrice;

      PrognosisLineSpec.INSERT(FALSE);
    END;

    LOCAL PROCEDURE ValidateQuantityOfCopy@1210190003(VAR PrognosisLine@1210190000 : Record 11012035);
    BEGIN
      ProjSetup.GET;
      WITH PrognosisLine DO BEGIN
        IF (Quantity < 0) AND
           (ProjSetup."Fill Prognosis End Result" =
            ProjSetup."Fill Prognosis End Result"::"Prognosis may not be Negative" )
        THEN
          VALIDATE(Quantity, 0);
      END;
    END;

    LOCAL PROCEDURE ValidateAmountOfCopy@1210190004(VAR PrognosisLine@1210190000 : Record 11012035);
    BEGIN
      ProjSetup.GET;
      WITH PrognosisLine DO BEGIN
        IF (Amount < 0) AND
           (ProjSetup."Fill Prognosis End Result" =
             ProjSetup."Fill Prognosis End Result"::"Prognosis may not be Negative" )
        THEN BEGIN
          "Ovh. Surcharge" := 0;
          VALIDATE(Amount, 0);
        END;
      END;
    END;

    PROCEDURE CalculateRiscCoverage@1100525006(Prognosis@1100525000 : Record 11012034);
    VAR
      PrognosisLine@1100525001 : Record 11012035;
    BEGIN
      //C012556
      WITH PrognosisLine DO BEGIN
        SETRANGE("Project No.",Prognosis."Project No.");
        SETRANGE("Prognosis Date",Prognosis."Prognosis Date");
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            VALIDATE("Risc Coverage", "Total Risc Coverage Amount" - "Total Release Risc Coverage");
            MODIFY(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

