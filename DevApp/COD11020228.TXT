OBJECT Codeunit 11020228 PDF File Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100528705 : TextConst 'ENU="Unable to initialize bioPDF. "';
      Text003@1100528704 : TextConst 'ENU=Please make sure it is installed on this computer.';

    LOCAL PROCEDURE WaitForFile@1100528722(FilePath@1100528700 : Text[1024];TimeOut@1100528701 : Integer) : Boolean;
    VAR
      FileManagement@1100528400 : Codeunit 419;
      Counter@1100528702 : Integer;
    BEGIN
      WHILE (NOT FileManagement.ClientFileExists(FilePath)) AND (Counter < TimeOut) DO BEGIN
        SLEEP(1000);
        Counter := Counter + 1000;
      END;

      EXIT(Counter < TimeOut);
    END;

    LOCAL PROCEDURE GetAuthorName@1210190002() : Text[50];
    VAR
      CompanyInfo@1210190000 : Record 79;
    BEGIN
      CompanyInfo.GET;
      EXIT(CompanyInfo.Name);
    END;

    LOCAL PROCEDURE GetPDFPrinterName@1210190001() : Text[30];
    BEGIN
      EXIT('PDF Writer - bioPDF');
    END;

    PROCEDURE MergePDFEmailAttachmentsOnServer@1100528500(VAR TempEmailAttachment@1100528500 : TEMPORARY Record 11229294);
    VAR
      PdfOutputDocument@1100528504 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Pdf.PdfDocument";
      PdfInputDocument@1100528503 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Pdf.PdfDocument";
      PdfReader@1100528502 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Pdf.IO.PdfReader";
      PdfDocumentOpenMode@1100528501 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Pdf.IO.PdfDocumentOpenMode";
      FileManagement@1100528507 : Codeunit 419;
      TempServerFileName@1100528506 : Text[250];
      I@1100528505 : Integer;
    BEGIN
      PdfOutputDocument :=PdfOutputDocument.PdfDocument;
      TempServerFileName := FileManagement.ServerTempFileName('pdf');
      TempEmailAttachment.SETFILTER("Attachment Server File Path", '@*.pdf');
      IF TempEmailAttachment.FINDSET THEN BEGIN
        REPEAT
          PdfInputDocument := PdfReader.Open(
            TempEmailAttachment."Attachment Server File Path", PdfDocumentOpenMode.Import);
          FOR I := 1 TO PdfInputDocument.PageCount DO BEGIN
            PdfOutputDocument.AddPage(PdfInputDocument.Pages.Item(I-1));
          END;
          IF TempEmailAttachment."Delete Server File" THEN
            IF EXISTS(TempEmailAttachment."Attachment Server File Path") THEN
              ERASE(TempEmailAttachment."Attachment Server File Path");
          IF TempEmailAttachment."Delete Client File" THEN
            IF FileManagement.ClientFileExists(TempEmailAttachment."Attachment Client File Path") THEN
              FileManagement.DeleteClientFile(TempEmailAttachment."Attachment Server File Path");
        UNTIL TempEmailAttachment.NEXT = 0;
        PdfOutputDocument.Save(TempServerFileName);
        TempEmailAttachment.FINDFIRST;
        TempEmailAttachment.DELETEALL;
        TempEmailAttachment."Attachment Server File Path" := TempServerFileName;
        TempEmailAttachment.INSERT;
      END;
      TempEmailAttachment.SETRANGE("Attachment Server File Path");
    END;

    PROCEDURE ConvertClientFileToPDF@1100528502(FullFileName@1100528500 : Text[250];VAR FullPDFFileName@1100528505 : Text[250]) : Boolean;
    VAR
      PDFUtil@1100528504 : DotNet "'bioPDF.PdfWriter, Version=4.0.0.0, Culture=neutral, PublicKeyToken=041d71cacb6e853c'.bioPDF.PdfWriter.PdfUtil" RUNONCLIENT;
      FileManagement@1100528501 : Codeunit 419;
      FullStatusFileName@1100528502 : Text[250];
      TimeOut@1100528503 : Integer;
    BEGIN
      IF NOT FileCanBeConvertedToPDF(FullFileName) THEN
        EXIT(FALSE);

      FullPDFFileName := FileManagement.ClientTempFileName('pdf');
      FullStatusFileName := FileManagement.ChangeExtension(FullPDFFileName, 'ini');
      InitializeBioPDFForConvertingFile(FullPDFFileName, FullStatusFileName);
      PDFUtil := PDFUtil.PdfUtil;
      IF ISNULL(PDFUtil) THEN
        ERROR(Text001 + Text003);
      TimeOut := 30;
      PDFUtil.PrintFile(FullFileName, GetPDFPrinterName);
      PDFUtil.WaitForFile(FullStatusFileName, TimeOut * 1000);
      FileManagement.DeleteClientFile(FullStatusFileName);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InitializeBioPDFForConvertingFile@1100528504(FullPDFFileName@1100528502 : Text[250];FullStatusFileName@1100528503 : Text[250]);
    VAR
      FileManagement@1100528501 : Codeunit 419;
      PDFSettings@1100528500 : DotNet "'bioPDF.PdfWriter, Version=4.0.0.0, Culture=neutral, PublicKeyToken=041d71cacb6e853c'.bioPDF.PdfWriter.PdfSettings" RUNONCLIENT;
      BioPDFSettingsFilePath@1100528400 : Text;
    BEGIN
      PDFSettings := PDFSettings.PdfSettings();
      IF ISNULL(PDFSettings) THEN
        ERROR(Text001 + Text003);
      PDFSettings.PrinterName := GetPDFPrinterName;
      BioPDFSettingsFilePath := PDFSettings.GetSettingsFilePath(TRUE);
      IF FileManagement.ClientFileExists(BioPDFSettingsFilePath) THEN
        FileManagement.DeleteClientFile(BioPDFSettingsFilePath);
      PDFSettings.Init;
      PDFSettings.PrinterName := GetPDFPrinterName;
      PDFSettings.SetValue('Output', FullPDFFileName);
      PDFSettings.SetValue('StatusFile', FullStatusFileName);
      PDFSettings.SetValue('ConfirmOverwrite', 'no');
      PDFSettings.SetValue('ShowSettings', 'never');
      PDFSettings.SetValue('ShowPDF', 'no');
      PDFSettings.SetValue('ShowProgress', 'yes');
      PDFSettings.SetValue('ShowProgressFinished', 'yes');
      PDFSettings.SetValue('SupressErrors', 'no');
      PDFSettings.SetValue('Author', GetAuthorName);
      PDFSettings.SetValue('Title', '');
      PDFSettings.WriteSettings(TRUE);
    END;

    PROCEDURE AddBackground@1100528501(ServerTempFileName@1100528500 : Text;EMailSetupUsage@1100528400 : Integer;ShortcutDimension1Code@1100528401 : Code[20]);
    VAR
      EMailSetup@1100528402 : Record 11229911;
      PdfDocument@1100528511 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Pdf.PdfDocument";
      PdfReader@1100528510 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Pdf.IO.PdfReader";
      PdfPage@1100528509 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Pdf.PdfPage";
      XImageBackground@1100528508 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Drawing.XImage";
      XGraphics@1100528507 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Drawing.XGraphics";
      XGraphicsOptions@1100528506 : DotNet "'PdfSharp, Version=1.32.2608.0, Culture=neutral, PublicKeyToken=f94615aa0424f9eb'.PdfSharp.Drawing.XGraphicsPdfPageOptions";
      FileManagement@1100528505 : Codeunit 419;
      PageCounter@1100528501 : Integer;
      ServerBackgroundFileName@1100528504 : Text;
    BEGIN
      IF NOT EMailSetup.GetApplicableEMailSetup(EMailSetupUsage, ShortcutDimension1Code) THEN
        EXIT;
      IF EMailSetup."PDF Background File Name" = '' THEN
        EXIT;
      IF NOT EXISTS(ServerTempFileName) THEN
        EXIT;

      ServerBackgroundFileName := FileManagement.UploadFileSilent(EMailSetup."PDF Background File Name");

      PdfDocument := PdfReader.Open(ServerTempFileName);
      XImageBackground := XImageBackground.FromFile(ServerBackgroundFileName);
      FOR PageCounter := 0 TO PdfDocument.Pages.Count - 1 DO BEGIN
        XImageBackground := XImageBackground.FromFile(ServerBackgroundFileName);
        PdfPage := PdfDocument.Pages.Item(PageCounter);
        XGraphics := XGraphics.FromPdfPage(PdfPage, XGraphicsOptions.Prepend);  //Prepend = Background
        XGraphics.DrawImage(XImageBackground,0,0);
      END;

      PdfDocument.Save(ServerTempFileName);
      ERASE(ServerBackgroundFileName);
    END;

    PROCEDURE FileCanBeConvertedToPDF@1100528400(FileName@1100525000 : Text) : Boolean;
    VAR
      FileManagement@1100525002 : Codeunit 419;
      Extension@1100525001 : Text;
    BEGIN
      Extension := LOWERCASE(FileManagement.GetExtension(FileName));
      IF Extension IN [
        'pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt', 'gif', 'jpeg', 'jpg', 'bmp', 'png']
      THEN
        EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

