OBJECT Codeunit 11020502 Post Pl. Transport Order (Y/N)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11020505;
    OnRun=BEGIN
            TransOrderRec.COPY(Rec);
            Code;
            Rec := TransOrderRec;
          END;

  }
  CODE
  {
    VAR
      Text000@11012002 : TextConst 'ENU=Do you want to post the Transport Costs?';
      TransOrderRec@11012000 : Record 11020505;
      TransRideRec@1100485004 : Record 11020517;
      PostTransOrder@11012001 : Codeunit 11020501;
      Text001@1100485003 : TextConst 'ENU=NOTE: There are NO cost lines present.';
      Text002@1100485002 : TextConst 'ENU=NOTE:\Only cost line(s) with quantity NOT filled present.\All cost line(s) will be deleted, then there are NO cost lines anymore.';
      Text003@1100485001 : TextConst 'ENU=NOTE: Cost line(s) with quantity NOT filled present, zero line(s) will be deleted.';
      Text004@1100485000 : TextConst 'ENU=Do you want to post the Transport Order?';
      Text005@1100485005 : TextConst 'ENU=Do you want to post the %1?';
      Text006@1100485006 : TextConst 'ENU=ATTENTION:';
      Text007@1100485007 : TextConst 'ENU=Transport Orders without cost lines present.';
      Text008@1100485008 : TextConst 'ENU=Transport Order Cost line(s) present with quantity NOT filled, zero line(s) will be deleted.';

    LOCAL PROCEDURE Code@2();
    BEGIN
      WITH TransOrderRec DO BEGIN
        CALCFIELDS("Invoice with Transport Order");
        IF ("Invoice with Transport Order" <> '') THEN BEGIN
          IF NOT CONFIRM(Text000,FALSE) THEN
            EXIT;
        END ELSE BEGIN
          CASE GetQuanTypeOnCostLines() OF
            0:
              IF NOT CONFIRM(Text000,FALSE) THEN
                EXIT;
            1:
              IF NOT CONFIRM(Text001 + '\ \' + Text004,FALSE) THEN
                EXIT;
            2:
              BEGIN
                IF NOT CONFIRM(Text002 + '\ \' + Text004,FALSE) THEN
                  EXIT;
                DeleteZeroQuantityCostLines(TRUE);
              END;
            3:
              BEGIN
                IF NOT CONFIRM(Text003 + '\ \' + Text000,FALSE) THEN
                  EXIT;
                DeleteZeroQuantityCostLines(FALSE);
              END;
          END;
        END;

        PostTransOrder.RUN(TransOrderRec);
      END;
    END;

    PROCEDURE RunPostTransportRideYN@1100485000(VAR Rec@1100485000 : Record 11020517);
    VAR
      lvTransRideLineRec@1100485001 : Record 11020518;
      lvQuanType1@1100485002 : Boolean;
      lvQuanType2@1100485003 : Boolean;
      lvQuanType3@1100485004 : Boolean;
      lvConfirmTxt@1100485005 : Text[1024];
    BEGIN
      TransRideRec.COPY(Rec);

      WITH TransRideRec DO BEGIN
        TESTFIELD(Status, Status::Released);

        lvTransRideLineRec.RESET;
        lvTransRideLineRec.SETRANGE("Ride No.", "No.");
        lvTransRideLineRec.SETRANGE("Posted (TO)", FALSE);
        IF lvTransRideLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            TransOrderRec.GET(lvTransRideLineRec."Transport Order No.");
            TransOrderRec.CALCFIELDS("Invoice with Transport Order");
            IF (TransOrderRec."Invoice with Transport Order" = '') THEN BEGIN
              CASE GetQuanTypeOnCostLines() OF
                1:
                  lvQuanType1 := TRUE;
                2:
                  BEGIN
                    lvQuanType2 := TRUE;
                    DeleteZeroQuantityCostLines(TRUE);
                  END;
                3:
                  BEGIN
                    lvQuanType3 := TRUE;
                    DeleteZeroQuantityCostLines(FALSE);
                  END;
              END;
            END;
          UNTIL (lvTransRideLineRec.NEXT = 0) OR (lvQuanType1 AND lvQuanType2 AND lvQuanType3);
        END;
        IF (lvQuanType1 OR lvQuanType2 OR lvQuanType3) THEN BEGIN
          lvConfirmTxt := Text006 + '\';
          IF lvQuanType1 OR lvQuanType2 THEN
            lvConfirmTxt := lvConfirmTxt + Text007 + '\';
          IF lvQuanType2 OR lvQuanType3 THEN
            lvConfirmTxt := lvConfirmTxt + Text008 + '\';
          lvConfirmTxt := lvConfirmTxt + '\';
        END;
        lvConfirmTxt := lvConfirmTxt + STRSUBSTNO(Text005, TABLECAPTION);
        IF NOT CONFIRM(lvConfirmTxt,FALSE) THEN
          ERROR('');  //* Niet 'EXIT' want 'DeleteZeroLines terugdraaien.

        PostTransOrder.RunPostTransportRide(TransRideRec);

      END;

      Rec := TransRideRec;
    END;

    PROCEDURE GetQuanTypeOnCostLines@1100485006() : Integer;
    VAR
      lvTransCostLineRec@1100485000 : Record 11020506;
    BEGIN
      //* ReturnType: 0=Alleen kostenregels met aantal; 1=Geen kostenregels; 2=Alleen nulregels; 3=Beide soorten kostenregels

      lvTransCostLineRec.SETRANGE("Transport Order No.", TransOrderRec."No.");
      lvTransCostLineRec.SETFILTER(Type, '<>%1', lvTransCostLineRec.Type::Text);
      lvTransCostLineRec.SETRANGE(Quantity, 0);
      IF NOT lvTransCostLineRec.FIND('-') THEN BEGIN
        lvTransCostLineRec.SETFILTER(Quantity, '<>%1', 0);
        IF lvTransCostLineRec.FIND('-') THEN
          EXIT(0)
        ELSE
          EXIT(1);
      END ELSE BEGIN
        lvTransCostLineRec.SETFILTER(Quantity, '<>%1', 0);
        IF NOT lvTransCostLineRec.FIND('-') THEN
          EXIT(2)
        ELSE
          EXIT(3);
      END;

      EXIT(0);
    END;

    PROCEDURE DeleteZeroQuantityCostLines@1100485005(IInclText@1100485001 : Boolean);
    VAR
      lvTransCostLineRec@1100485000 : Record 11020506;
    BEGIN
      lvTransCostLineRec.SETRANGE("Transport Order No.", TransOrderRec."No.");
      IF NOT IInclText THEN
        lvTransCostLineRec.SETFILTER(Type, '<>%1', lvTransCostLineRec.Type::Text);
      lvTransCostLineRec.SETRANGE(Quantity, 0);
      lvTransCostLineRec.DELETEALL;
    END;

    BEGIN
    END.
  }
}

