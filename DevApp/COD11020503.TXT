OBJECT Codeunit 11020503 Extended Plant Order Functions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012556=im,
                TableData 11012557=im,
                TableData 11012558=im;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012007 : TextConst 'ENU=There is no %1 present. Do you want to release the %2 anyway ?';
      Text001@11012008 : TextConst 'ENU=Quantity must be 1 for Plant No. %1 %2.';
      Text002@11012009 : TextConst 'ENU=Quantity could not be 0 for Plant %1';
      Text003@11012010 : TextConst 'ENU=There is unsufficient stock available for Plant No. ''%1 %2''. \%3';
      PlantSetupRec@11012000 : Record 11012550;
      InventSetup@1100525003 : Record 313;
      OrderRec@11012001 : Record 11012556;
      OrderLineRec@11012002 : Record 11012557;
      BackorderRec@1100485005 : Record 11012556;
      BackorderLineRec@1100485002 : Record 11012557;
      CostRec@11012004 : Record 11012558;
      FromLocRec@1100485008 : Record 11012554;
      ToLocRec@1100485009 : Record 11012554;
      PurchOrderRec@1100485014 : Record 38;
      PurchOrderLineRec@1100485015 : Record 39;
      TmpNewPurchOrderRec@1100485017 : TEMPORARY Record 38;
      BlockingOrigLocChecked@11012006 : Boolean;
      Text011@1100485001 : TextConst 'ENU=There is unsufficient stock available for Plant No. ''%1 %2'', Rate Code ''%3''. \%4';
      Text012@1100485003 : TextConst 'ENU="Item Line(s) not allowed on Plant Orders of Type ''%1''. "';
      MakeBackorder@1100485007 : Boolean;
      gChargePurchRun@1100409001 : Boolean;
      NextBackLineNo@1100485010 : Integer;
      BackorderNo@1100485011 : Code[20];
      Text013@1100485020 : TextConst 'ENU=Status Depot (%1) of the ''From Location'' in the Line must be equal to status Depot (%2) of the ''From  location'' in the Order Header, in Order Line ''%3-%4''.';
      Text014@1100485022 : TextConst 'ENU=is ''%1'': Negative inventory correction on a locatie not allowed for sales/buy back plant';
      Text015@1100485021 : TextConst 'ENU=is ''%1'': Negative inventory correction for sales/buy back plant only allowed from a depot';
      Text018@1100525002 : TextConst 'ENU=On %1 of %2 plantorder lines only ''%3'' is filled, but ''%4'' is zero.';
      Text019@1100525001 : TextConst 'ENU=Release plantorder %1 not allowed.';
      Text020@1100525000 : TextConst 'ENU=Do you want to release plantorder %1 anyway?';
      Text022@1100409002 : TextConst 'ENU=Release not allowed. %1 ''%2'' is blocked, %3 ''%4'' (%5).';
      Text030@1100485012 : TextConst 'ENU=No orderlines present with %1 filled.';
      Text031@1100485013 : TextConst 'ENU=No backorder quantity, %1 (%2) is not greater than %3 (%4). In order line %5.';
      Text032@1100485016 : TextConst 'ENU=(%1) must be a whole number for unique plant';
      Text033@1100485018 : TextConst 'ENU=For at least 1 Order Line the Quantity must be filled.';
      Text034@1100485019 : TextConst 'ENU=Release Plant Order not allowed. Only allowed for %1 ''%2'' and/or ''%3''.';
      Text035@1210190000 : TextConst 'ENU="Note: %1 ''%2-%3'' present on %4 ''%5'', %6 ''%7'', %8 ''%9''. "';
      Text036@1100409000 : TextConst 'ENU=Inclusive costlines of vendor(s)?';
      Text037@1100529000 : TextConst 'ENU=First select %1(s).';
      Text038@1100529002 : TextConst 'ENU=All %1s are selected, party transfer not allowed.';
      Text039@1100529003 : TextConst 'ENU=Do you want to transfer the %1 partly?';
      Text040@1100409003 : TextConst 'ENU=No,Yes,Only Cost';

    PROCEDURE RunReleasePlantOrder@1100485002(VAR Rec@1100485000 : Record 11012556) : Code[20];
    VAR
      lvCounter1@1100525002 : Integer;
      lvCounter2@1100525001 : Integer;
      lvText@1100525000 : Text[1024];
    BEGIN
      BackorderNo := '';
      PlantSetupRec.GET;

      OrderRec.COPY(Rec);

      OrderLineRec.RESET;
      OrderLineRec.SETRANGE("Plant Order No.", OrderRec."No.");
      //OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Plant);
      OrderLineRec.SETFILTER(Type, '%1|%2', OrderLineRec.Type::Plant, OrderLineRec.Type::Item);
      IF OrderLineRec.ISEMPTY THEN BEGIN
        IF (NOT gChargePurchRun) THEN BEGIN  //* C001519.n  This plant order has only cost lines
          IF NOT CONFIRM(STRSUBSTNO(Text000,OrderLineRec.TABLECAPTION, OrderRec.TABLECAPTION), FALSE) THEN
            ERROR('');
        END;
      END ELSE BEGIN
        IF (OrderRec.Type = OrderRec.Type::Removal) AND (PlantSetupRec."Removal with Qty. to Receive") THEN BEGIN
          OrderLineRec.SETRANGE(Quantity, 0);
          OrderLineRec.SETFILTER("Qty. to Receive", '>%1', 0);
          lvCounter1 := OrderLineRec.COUNT;
          OrderLineRec.SETRANGE(Quantity);           //* Reset filters
          OrderLineRec.SETRANGE("Qty. to Receive");  //*
          IF lvCounter1 > 0 THEN BEGIN
            lvCounter2 := OrderLineRec.COUNT;
            lvText := STRSUBSTNO(Text018, lvCounter1, lvCounter2,
              OrderLineRec.FIELDCAPTION("Qty. to Receive"), OrderLineRec.FIELDCAPTION(Quantity));
            IF lvCounter2 = lvCounter1 THEN
              ERROR(lvText + '\' + STRSUBSTNO(Text019, OrderRec."No."));
            IF NOT CONFIRM(lvText + '\' + STRSUBSTNO(Text020, OrderRec."No."), FALSE) THEN
              ERROR('');
          END;
        END;
      END;

      ReleasePlantOrder();
      Rec := OrderRec;

      IF BackorderNo <> '' THEN
        EXIT(BackorderNo);
      EXIT('');
    END;

    PROCEDURE RunPartlyMoveToNewOrder@1100529000(Rec@1100529000 : Record 11012556;VAR SelectedPOLine@1100529001 : Record 11012557) : Code[20];
    VAR
      CostLine@1100409000 : Record 11012558;
      OptionNo@1100409001 : Integer;
    BEGIN
      //*DP00183
      OrderRec.COPY(Rec);
      //OrderRec.TESTFIELD(Type, OrderRec.Type::Removal); //C027375.o Now also Arrival, PageAction is only enabled for arrival and removal orders

      //C017835.so
      //IF NOT CONFIRM(Text039, FALSE, OrderRec.TABLECAPTION) THEN
      //  EXIT('');
      //EXIT(PartlyMoveRemovOrderToNewOrder(SelectedPOLine));
      //C017835.eo
      //C017835.sn
      CostLine.SETRANGE("Plant Order No.", OrderRec."No.");
      IF CostLine.ISEMPTY THEN BEGIN
        IF CONFIRM(Text039, FALSE, OrderRec.TABLECAPTION) THEN
          OptionNo := 2;  // Yes
      END ELSE
        OptionNo := STRMENU(Text040, 2, STRSUBSTNO(Text039, OrderRec.TABLECAPTION));
      CASE OptionNo OF
       2:
         EXIT(PartlyMoveRemovOrderToNewOrder(SelectedPOLine, FALSE));
       3:
         EXIT(PartlyMoveRemovOrderToNewOrder(SelectedPOLine, TRUE));
      END;
      EXIT('');
      //C017835.en
    END;

    PROCEDURE RunResetReleasedPlantOrder@1100485001(VAR Rec@1100485000 : Record 11012556);
    BEGIN
      OrderRec.COPY(Rec);

      WITH OrderRec DO BEGIN
        TESTFIELD(Posted,FALSE);
        TESTFIELD(Status, Status::Released);

        IF ("Order Pick List Printed" = 0) AND ("Dispatch Note Printed" = 0) THEN
          Status := Status::Open
        ELSE
          Status := Status::Printed;

        MODIFY;
      END;

      Rec := OrderRec;
    END;

    PROCEDURE RunCreatePurchaseOrders@1100485000(VAR Rec@1100485000 : Record 11012556);
    BEGIN
      OrderRec.COPY(Rec);
      TmpNewPurchOrderRec.RESET;
      TmpNewPurchOrderRec.DELETEALL;
      CreatePurchOrder();
      Rec := OrderRec;
    END;

    PROCEDURE RunGetCreatedPurchaseOrders@1100485013(VAR OPurchOrderRec@1100485000 : Record 38);
    BEGIN
      //* Notes:
      //* - Always first execute 'RunCreatePurchaseOrders' before calling this function!
      //* - 'OPurchOrderRec' must be declared as 'Temporary' in the calling process!

      OPurchOrderRec.RESET;
      OPurchOrderRec.DELETEALL;

      TmpNewPurchOrderRec.RESET;
      TmpNewPurchOrderRec.SETRANGE("Document Type", TmpNewPurchOrderRec."Document Type"::Order);
      IF NOT TmpNewPurchOrderRec.FIND('-') THEN
        EXIT;

      REPEAT
        OPurchOrderRec."Document Type" := TmpNewPurchOrderRec."Document Type";
        OPurchOrderRec."No." := TmpNewPurchOrderRec."No.";
        OPurchOrderRec.INSERT;
      UNTIL TmpNewPurchOrderRec.NEXT = 0;
    END;

    PROCEDURE RunUpdateQtyOnReceipt@1100485012(IPurchOrderNo@1100485003 : Code[20];IPurchOrderLineNo@1100485004 : Integer;IPlantOrderNo@1100485006 : Code[20];IPlantOrderLineNo@1100485005 : Integer;IPlantType@1100485007 : Code[20];IPlantNo@1100485008 : Code[10]) : Boolean;
    VAR
      lvPlantNoRec@1100485000 : Record 11012552;
      lvPlantOrderRec@1100485001 : Record 11012556;
      lvPlantOrderLineRec@1100485002 : Record 11012557;
      lvPlantOrderLineRec2@1100485009 : Record 11012557;
      lvModified@1100485010 : Boolean;
      lvNextLineNo@1100485011 : Integer;
    BEGIN
      PlantSetupRec.GET;
      IF NOT PlantSetupRec."Extended Picking Procedure" THEN
        EXIT(FALSE);
      IF NOT lvPlantNoRec.GET(IPlantType, IPlantNo) THEN
        EXIT(FALSE);
      IF NOT lvPlantOrderRec.GET(IPlantOrderNo) THEN
        EXIT(FALSE);
      IF lvPlantOrderRec.Posted OR (lvPlantOrderRec.Status >= lvPlantOrderRec.Status::Released) THEN
        EXIT(FALSE);
      IF (lvPlantOrderRec.Type <> lvPlantOrderRec.Type::Arrival) THEN
        EXIT(FALSE);

      lvPlantNoRec.CALCFIELDS(Bulk);

      WITH lvPlantOrderLineRec DO BEGIN
        SETRANGE("Plant Order No.", IPlantOrderNo);
        SETRANGE(Type, Type::Plant);
        SETRANGE("Plant Type", IPlantType);
        SETFILTER("No.", '%1|%2', '', '0');
        IF lvPlantNoRec.Bulk AND (lvPlantNoRec."Stock No." = '0') THEN
          SETRANGE("Line No.", IPlantOrderLineNo);
        SETRANGE("Purchase Order", IPurchOrderNo);
        SETRANGE("Purchase Order Line No.", IPurchOrderLineNo);
        IF FINDLAST THEN BEGIN
          IF (lvPlantNoRec.Bulk AND (lvPlantNoRec."Stock No." = '0')) THEN BEGIN
            "No." := lvPlantNoRec."Stock No.";
            Quantity := Quantity + lvPlantNoRec.Quantity;
            lvModified := TRUE;
          END;
          IF (lvPlantNoRec."Stock No." > '0') THEN BEGIN
            IF lvPlantNoRec.Quantity >= "Asked Quantity" THEN BEGIN
              "No." := lvPlantNoRec."Stock No.";
              Description := lvPlantNoRec.Description;  //C006757
              Quantity := lvPlantNoRec.Quantity;
              lvModified := TRUE;
            END ELSE BEGIN
              IF NOT lvPlantOrderLineRec2.GET(IPlantOrderNo, (lvPlantOrderLineRec."Line No." + 1)) THEN
                lvNextLineNo := lvPlantOrderLineRec."Line No." + 1
              ELSE BEGIN
                lvPlantOrderLineRec2.RESET;
                lvPlantOrderLineRec2.SETRANGE("Plant Order No.", IPlantOrderNo);
                lvPlantOrderLineRec2.FIND('+');
                lvNextLineNo := lvPlantOrderLineRec2."Line No." + 10000;
              END;
              lvPlantOrderLineRec2.INIT;
              lvPlantOrderLineRec2."Plant Order No." := lvPlantOrderLineRec."Plant Order No.";
              lvPlantOrderLineRec2."Line No." := lvNextLineNo;
              lvPlantOrderLineRec2.INSERT;
              //* Gesplits in INSERT en MODIFY(TRUE) ivm Commerce Portal, zie ook functie 'InsertBackorder'
              lvPlantOrderLineRec2.TRANSFERFIELDS(lvPlantOrderLineRec, FALSE);
              lvPlantOrderLineRec2."Line No." := lvNextLineNo;
              lvPlantOrderLineRec2.Quantity := 0;
              lvPlantOrderLineRec2."Asked Quantity" := "Asked Quantity" - lvPlantNoRec.Quantity;
              lvPlantOrderLineRec2.MODIFY(TRUE);

              "No." := lvPlantNoRec."Stock No.";
              Description := lvPlantNoRec.Description;  //C006757
              Quantity := lvPlantNoRec.Quantity;
              "Asked Quantity" := lvPlantNoRec.Quantity;
              lvModified := TRUE;
            END;
          END;
          IF lvModified THEN BEGIN
            IF PlantSetupRec."Rate Codes" AND ("Direct Delivery" OR ("From Rate Code" = '')) THEN
              "From Rate Code" := PlantSetupRec."Default Rate Code";
            MODIFY(TRUE);
          END;
        END;
      END;

      EXIT(lvModified);
    END;

    PROCEDURE RunUpdateItemQtyOnReceipt@1100485024(IPurchOrderNo@1100485003 : Code[20];IPurchOrderLineNo@1100485004 : Integer;IPlantOrderNo@1100485006 : Code[20];IPlantOrderLineNo@1100485005 : Integer;IItemNo@1100485007 : Code[20];IQtyToReceiveBase@1100485008 : Decimal) : Boolean;
    VAR
      lvItemRec@1100485000 : Record 27;
      lvPlantOrderRec@1100485001 : Record 11012556;
      lvPlantOrderLineRec@1100485002 : Record 11012557;
      lvModified@1100485010 : Boolean;
    BEGIN
      PlantSetupRec.GET;
      IF NOT PlantSetupRec."Extended Picking Procedure" THEN
        EXIT(FALSE);
      IF NOT lvItemRec.GET(IItemNo) THEN
        EXIT(FALSE);
      IF NOT lvPlantOrderRec.GET(IPlantOrderNo) THEN
        EXIT(FALSE);
      IF lvPlantOrderRec.Posted OR (lvPlantOrderRec.Status >= lvPlantOrderRec.Status::Released) THEN
        EXIT(FALSE);
      IF (lvPlantOrderRec.Type <> lvPlantOrderRec.Type::Arrival) THEN
        EXIT(FALSE);

      WITH lvPlantOrderLineRec DO BEGIN
        SETRANGE("Plant Order No.", IPlantOrderNo);
        SETRANGE(Type, Type::Item);
        SETRANGE("Item No.", IItemNo);
        SETRANGE("Line No.", IPlantOrderLineNo);
        SETRANGE("Purchase Order", IPurchOrderNo);
        SETRANGE("Purchase Order Line No.", IPurchOrderLineNo);
        IF FINDLAST THEN BEGIN
          IF ("Qty. per Unit of Measure" = 0) OR ("Qty. per Unit of Measure" = 1) THEN
            Quantity := Quantity + IQtyToReceiveBase
          ELSE
            Quantity := Quantity + (IQtyToReceiveBase / "Qty. per Unit of Measure");
          lvModified := TRUE;
          MODIFY(TRUE);
        END;
      END;

      EXIT(lvModified);
    END;

    PROCEDURE RunUndoPOPlantQtyOnReceipt@1100525001(IPurchOrderNo@1100525003 : Code[20];IPurchOrderLineNo@1100525002 : Integer;IPlantOrderNo@1100485003 : Code[20];IPlantOrderLineNo@1100485004 : Integer;IPlantType@1100485007 : Code[20];IPlantStockNo@1100485008 : Code[10];IQuantity@1100525001 : Decimal);
    VAR
      lvPlantOrderRec@1100485001 : Record 11012556;
      lvPlantOrderLineRec@1100485002 : Record 11012557;
    BEGIN
      IF (IPurchOrderNo = '') OR (IPlantOrderNo = '') OR (IPlantOrderLineNo = 0) OR (IPlantType = '') OR (IQuantity <= 0) THEN
        EXIT;
      PlantSetupRec.GET;
      IF NOT PlantSetupRec."Extended Picking Procedure" THEN
        EXIT;
      IF NOT lvPlantOrderRec.GET(IPlantOrderNo) THEN
        EXIT;
      IF lvPlantOrderRec.Posted OR (lvPlantOrderRec.Status >= lvPlantOrderRec.Status::Released) THEN
        EXIT;
      IF (lvPlantOrderRec.Type <> lvPlantOrderRec.Type::Arrival) THEN
        EXIT;

      WITH lvPlantOrderLineRec DO BEGIN
        SETRANGE("Plant Order No.", IPlantOrderNo);
        SETRANGE(Type, Type::Plant);
        SETRANGE("Plant Type", IPlantType);
        SETRANGE("No.", IPlantStockNo);
        IF IPlantStockNo = '0' THEN
          SETRANGE("Line No.", IPlantOrderLineNo);
        SETRANGE("Purchase Order", IPurchOrderNo);
        SETRANGE("Purchase Order Line No.", IPurchOrderLineNo);
        SETFILTER(Quantity, '>%1', 0);
        IF FINDFIRST THEN BEGIN
          IF "No." <> '0' THEN
            "No." := '';
          Quantity := Quantity - IQuantity;
          IF Quantity < 0 THEN
            Quantity := 0;
          MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE RunUndoPOItemQtyOnReceipt@1100525000(IPurchOrderNo@1100485003 : Code[20];IPurchOrderLineNo@1100485004 : Integer;IPlantOrderNo@1100485006 : Code[20];IPlantOrderLineNo@1100485005 : Integer;IItemNo@1100485007 : Code[20];IQuantityBase@1100485008 : Decimal);
    VAR
      lvPlantOrderRec@1100485001 : Record 11012556;
      lvPlantOrderLineRec@1100485002 : Record 11012557;
    BEGIN
      IF (IPurchOrderNo = '') OR (IPlantOrderNo = '') OR (IPlantOrderLineNo = 0) OR (IItemNo = '') OR (IQuantityBase <= 0) THEN
        EXIT;
      PlantSetupRec.GET;
      IF NOT PlantSetupRec."Extended Picking Procedure" THEN
        EXIT;
      IF NOT lvPlantOrderRec.GET(IPlantOrderNo) THEN
        EXIT;
      IF lvPlantOrderRec.Posted OR (lvPlantOrderRec.Status >= lvPlantOrderRec.Status::Released) THEN
        EXIT;
      IF (lvPlantOrderRec.Type <> lvPlantOrderRec.Type::Arrival) THEN
        EXIT;

      WITH lvPlantOrderLineRec DO BEGIN
        SETRANGE("Plant Order No.", IPlantOrderNo);
        SETRANGE(Type, Type::Item);
        SETRANGE("Item No.", IItemNo);
        SETRANGE("Line No.", IPlantOrderLineNo);
        SETRANGE("Purchase Order", IPurchOrderNo);
        SETRANGE("Purchase Order Line No.", IPurchOrderLineNo);
        SETFILTER(Quantity, '>%1', 0);
        IF FINDFIRST THEN BEGIN
          IF ("Qty. per Unit of Measure" = 0) OR ("Qty. per Unit of Measure" = 1) THEN
            Quantity := Quantity - IQuantityBase
          ELSE
            Quantity := Quantity + (IQuantityBase / "Qty. per Unit of Measure");
          IF Quantity < 0 THEN
            Quantity := 0;
          MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE ReleasePlantOrder@1();
    VAR
      PlantOrder2@1210190001 : Record 11012556;
      PlantOrderLine2@1210190000 : Record 11012557;
      PostPlantOrderCU@1100525000 : Codeunit 11012553;
      OtherDepotToDepot@1100529000 : Boolean;
    BEGIN
      //* Uitgangspunt is dat er bij het vrijgeven al zoveel mogelijk wordt getest, zodat hierna de materieelorder ook
      //* meestal zonder problemen geboekt kan worden (situatie tussen vrijgeven en boeken kan natuurlijk altijd weer
      //* gewijzigd zijn).
      //* Ook van belang voor 'Confirms' in 'Post Plant Order' (CU 11012553), deze zijn dan al geweest en hoeven dus dan niet
      //* meer tijdens het boeken van de materieelorders tijdens de transport run we nemen dan aan dat het wel akkoord is).

      PlantSetupRec.GET;
      InventSetup.GET;  //C006443.n
      IF (NOT PlantSetupRec."Extended Picking Procedure") AND (NOT PlantSetupRec."Transport Orders") THEN
        ERROR(Text034, PlantSetupRec.TABLECAPTION,
              PlantSetupRec.FIELDCAPTION("Extended Picking Procedure"), PlantSetupRec.FIELDCAPTION("Transport Orders"));

      WITH OrderRec DO BEGIN
        CheckOnReleasePlantOrderCommon();  //*DP00183.n (Common checks are moved to function)
        //DP00688.sn
        IF PlantSetupRec."Order Picking Procedure" AND (Type = Type::Arrival) AND
          ("Order Picking Status" > "Order Picking Status"::Open) AND
          ("Order Picking Status" < "Order Picking Status"::Ready)
        THEN
          TESTFIELD("Order Picking Status", "Order Picking Status"::Ready);
        //DP00688.en

        FromLocRec.GET("From Location");
        ToLocRec.GET("To Location");
        IF Type <> Type::"Negative Inventory Correction" THEN
          CheckBlock("To Location",TRUE);
        CheckPOBlockedForRelease(OrderRec);  //C006416.n
        CheckRentalContractReleased();
        PostPlantOrderCU.CheckElementMandatory(OrderRec);

        MakeBackorder := FALSE;
        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        //OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Plant);
        OrderLineRec.SETFILTER(Type, '%1|%2', OrderLineRec.Type::Plant, OrderLineRec.Type::Item);
        IF OrderLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
          IF OrderRec."Advanced Removal" THEN
            CheckAdvancedRemoval;
          IF (Type = Type::Arrival) AND PlantSetupRec."Extended Picking Procedure" THEN BEGIN
            REPEAT
              IF (OrderLineRec.Quantity < OrderLineRec."Asked Quantity") AND (OrderLineRec.Quantity >= 0) THEN
                MakeBackorder := TRUE;
              //*C-017787.sn
              IF (NOT (OrderLineRec."No." IN ['', '0'])) AND (OrderLineRec.Type = OrderLineRec.Type::Plant) THEN BEGIN  // PlantNo filled
                OrderLineRec.CALCFIELDS(Bulk);
                IF NOT OrderLineRec.Bulk THEN BEGIN
                  PlantOrderLine2.RESET;
                  PlantOrderLine2.SETCURRENTKEY(Posted, "Plant Type");
                  PlantOrderLine2.SETRANGE(Posted, FALSE);
                  PlantOrderLine2.SETRANGE("Plant Type", OrderLineRec."Plant Type");
                  PlantOrderLine2.SETRANGE("No.", OrderLineRec."No.");
                  PlantOrderLine2.SETFILTER("Plant Order No.", '<>%1', OrderLineRec."Plant Order No.");
                  IF PlantOrderLine2.FINDSET THEN BEGIN
                    REPEAT
                      IF PlantOrder2.GET(PlantOrderLine2."Plant Order No.") THEN BEGIN
                        IF (PlantOrder2.Type = PlantOrder2.Type::Arrival) AND (PlantOrder2."Sales Rental Order No." = '') THEN BEGIN
                          MESSAGE(Text035,
                            CostRec.FIELDCAPTION("Plant No."), OrderLineRec."Plant Type", OrderLineRec."No.",
                            PlantOrderLine2.FIELDCAPTION("Plant Order No."), PlantOrderLine2."Plant Order No.",
                            PlantOrderLine2.FIELDCAPTION("Transfer Date"), PlantOrderLine2."Transfer Date",
                            PlantOrderLine2.FIELDCAPTION("Expected return on"), PlantOrderLine2."Expected return on");
                        END;
                      END;
                    UNTIL PlantOrderLine2.NEXT = 0;
                  END;
                END;
              END;
              //*C-017787.en
            UNTIL ((OrderLineRec.NEXT = 0) OR MakeBackorder);
          END;
          IF (Type = Type::Removal) AND "Advanced Removal" THEN
            PostPlantOrderCU.CheckDamageCostPresent(OrderRec);  //DP00241.n (C004697)
        END;
        IF MakeBackorder THEN BEGIN
          OrderLineRec.SETFILTER(Quantity, '<>%1', 0);
          IF (NOT OrderLineRec.FINDFIRST) THEN
            ERROR(Text033);  //* Anders gaat alles naar een nieuwe (materieel)backorder en wordt huidige order leeg.
        END;
        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Item);
        IF OrderLineRec.FINDFIRST THEN BEGIN
          IF Type = Type::"Other Transfers" THEN
            OtherDepotToDepot := OrderRec.IsOtherTransferDepotToDepot();  //*DP00183.n
          IF (NOT (Type IN [Type::Arrival, Type::Removal])) AND (NOT OtherDepotToDepot) THEN //*DP00183.c
            ERROR(Text012, Type);
          CheckOrigLocBlocked;
        END;

        CostRec.RESET;
        CostRec.SETRANGE("Plant Order No.","No.");
        CostRec.SETFILTER(Type,'<>%1',CostRec.Type::Text);
        IF CostRec.FINDSET THEN BEGIN
          CheckOrigLocBlocked;
          REPEAT
            CheckLineCost;
          UNTIL CostRec.NEXT = 0;
        END;

        IF MakeBackorder THEN
          InsertBackorder();

        OrderLineRec.RESET;
        OrderLineRec.SETRANGE("Plant Order No.","No.");
        IF OrderLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF OrderLineRec.Type <> OrderLineRec.Type::Item THEN
              ProcessOrderLine
            ELSE
              ProcessOrderItemLine(OtherDepotToDepot);  //*DP00183.c
          UNTIL OrderLineRec.NEXT = 0
        END;

        "Order Picking Status" := "Order Picking Status"::Ready;
        Status := Status::Released;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CheckOnReleasePlantOrderCommon@1100529002();
    BEGIN
      WITH OrderRec DO BEGIN
        IF Status >= Status::Released THEN
          FIELDERROR(Status);
        TESTFIELD(Posted,FALSE);
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        TESTFIELD("Transfer Date");
        IF (PlantSetupRec."Def. Transfer PO" = PlantSetupRec."Def. Transfer PO"::Yes) THEN BEGIN //* See call 22454 (Dura Vermeer)
          TESTFIELD("Def. Transfer");
          TESTFIELD("Transfer Date", "Def. Transfer");
        END;

        IF ("Transport Cost for (Advice)" = "Transport Cost for (Advice)"::Project) AND (PlantSetupRec."Transport Orders") THEN
          TESTFIELD("Project No. (TP-Cost)");
      END;
    END;

    PROCEDURE CheckPOBlockedForRelease@1100409000(PlantOrder@1100409000 : Record 11012556);
    VAR
      PlantBlockCode@1100409001 : Record 11229879;
    BEGIN
      //C006416
      IF PlantOrder."Block Code" <> '' THEN BEGIN
        IF PlantBlockCode.GET(PlantOrder."Block Code") THEN BEGIN
          IF PlantBlockCode."Block Plant Order" IN
            [PlantBlockCode."Block Plant Order"::Release, PlantBlockCode."Block Plant Order"::Both]
          THEN
            ERROR(Text022, PlantOrder.TABLECAPTION, PlantOrder."No.",
              PlantOrder.FIELDCAPTION("Block Code"), PlantOrder."Block Code", PlantBlockCode.Description);
        END;
      END;
    END;

    PROCEDURE ProcessOrderLine@3();
    VAR
      lvLineFromLocRec@1100485001 : Record 11012554;
      lvToLocation@1100485000 : Code[20];
      QtyZeroOnRemovalWithQtyReceive@1100525000 : Boolean;
    BEGIN
      WITH OrderLineRec DO BEGIN
        IF Type = Type::Text THEN
          EXIT;
        IF MakeBackorder AND (Quantity < "Asked Quantity") THEN BEGIN
           InsertBackorderLine();
           IF Quantity = 0 THEN BEGIN
             DELETE(TRUE);
             EXIT;
           END ELSE BEGIN
             "Asked Quantity" := Quantity;
             MODIFY(TRUE);
           END;
        END;

        QtyZeroOnRemovalWithQtyReceive :=
          (OrderRec.Type = OrderRec.Type::Removal) AND
          (PlantSetupRec."Removal with Qty. to Receive") AND
          (Quantity = 0) AND ("Qty. to Receive" > 0);

        TESTFIELD("From Location");
        TESTFIELD("Plant Type");
        IF NOT QtyZeroOnRemovalWithQtyReceive THEN
          TESTFIELD("No.");
        TESTFIELD("Transfer Date");
        TESTFIELD("Set Code", '');
        TESTFIELD(Description);  //*33268
        IF NOT ((OrderRec.Type = OrderRec.Type::Removal) AND ("To Location" <> '')) THEN
          lvToLocation := OrderRec."To Location"
        ELSE BEGIN
          CheckLocBlocked("To Location",TRUE);
          lvToLocation := "To Location";
        END;
        OrderLineRec.CheckPlantTypeBlocked();  //DP00485.n (C009313)
        IF OrderLineRec.Quantity < 0 THEN
          OrderLineRec.FIELDERROR(Quantity);  //DP00690 (only allowed for item)
        CALCFIELDS(Bulk);
        IF NOT QtyZeroOnRemovalWithQtyReceive THEN BEGIN
          IF NOT Bulk AND (Quantity <> 1) THEN
            ERROR(Text001,"Plant Type","No.");
          IF Bulk AND (Quantity = 0) THEN
            ERROR(Text002,"Plant Type");
        END;
        IF "Rental Type" = "Rental Type"::" " THEN
          FIELDERROR("Rental Type")
        ELSE
          OrderLineRec.CheckRentalType();

        IF ("Rental Type" <> "Rental Type"::Rental) AND ("From Location" <> OrderRec."From Location") THEN BEGIN
          lvLineFromLocRec.GET("From Location");
          IF lvLineFromLocRec.Depot <> FromLocRec.Depot THEN
            ERROR(Text013, lvLineFromLocRec.Depot, FromLocRec.Depot, "Plant Order No.", "Line No.");
        END;

        IF (OrderRec.Type = OrderRec.Type::"Negative Inventory Correction") AND
           ("Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back","Rental Type"::"Buy Back and Sales"])
        THEN BEGIN
          IF NOT ToLocRec.Depot THEN
            FIELDERROR("Rental Type", STRSUBSTNO(Text014, "Rental Type"))
          ELSE BEGIN
            lvLineFromLocRec.GET("From Location");
            IF NOT lvLineFromLocRec.Depot THEN
              FIELDERROR("Rental Type", STRSUBSTNO(Text015, "Rental Type"))
          END;
        END;

        IF "Rental Type" IN ["Rental Type"::"Buy Back","Rental Type"::"Buy Back and Sales"] THEN
          CheckOrigLocBlocked;

        SETFILTER("Date Filter",'..%1',"Transfer Date");
        IF "Rental Type" IN ["Rental Type"::Rental,"Rental Type"::Sales] THEN BEGIN
          //OLD IF NOT Bulk OR NOT PlantSetupRec."Negative Bulk Stock" THEN BEGIN
          IF NOT CheckNegativeStockAllowed(lvToLocation) THEN BEGIN
            IF PlantSetupRec."Rate Codes" OR ("From Rate Code" <> '') THEN BEGIN
              CALCFIELDS("Stock Rate Code on From Loc.");
              IF Quantity > "Stock Rate Code on From Loc." THEN
                ERROR(Text011, "Plant Type", "No.", "From Rate Code", ExtraInfoPresentLoc());  //*32520/31576.n (extra argument)
            END ELSE BEGIN
              CALCFIELDS("Stock Plant No. on From Loc.");
              IF Quantity > "Stock Plant No. on From Loc." THEN
                ERROR(Text003, "Plant Type", "No.", ExtraInfoPresentLoc());  //*32520/31576.n (extra argument)
            END;
          END;
        END;
        IF (NOT PlantSetupRec."Rate Codes") AND (OrderRec.Type <> OrderRec.Type::"Negative Inventory Correction") THEN
          TESTFIELD("To Rate Code", '');
        //*28163.n Only check 'To Rate Code" if not neg. inventory correction, as in Post Plant Order
        IF (OrderRec.Type <> OrderRec.Type::"Negative Inventory Correction") THEN BEGIN  //*28163.n
          IF (PlantSetupRec."Rate Codes") THEN BEGIN
            //IF "Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back and Sales"] THEN  //C001216.o
            IF ("Rental Type" IN ["Rental Type"::Sales,"Rental Type"::"Buy Back and Sales"]) AND
               (NOT OrderRec.IsOtherTransferDepotToDepot)
            THEN  //C001216.n
              TESTFIELD("To Rate Code", '')
            ELSE
              TESTFIELD("To Rate Code");
          END;
        END;  //*28163.n
      END;
    END;

    PROCEDURE CheckNegativeStockAllowed@1100485015(ToLocation@1210190000 : Code[20]) : Boolean;
    VAR
      lvFromLocRec@1100485000 : Record 11012554;
    BEGIN
      WITH OrderLineRec DO BEGIN
        IF (NOT Bulk) OR ("No." <> '0') THEN  //* Bij uniek materieel en bij bulk materieel met volgnr.(extern mat.)
          EXIT(FALSE);                        //* geen neg. voorraad toegestaan. Alleen voor bulk met volgnr. '0'.
      //* 31-05-2006 Zoals in codeunit 'Post Plant Order', dus ook test op "No.". Zie ook opmerking in CU 11012553.

        //*26721.sn
        IF (OrderRec.Type = OrderRec.Type::"Negative Inventory Correction") OR
           ((OrderRec.Type = OrderRec.Type::"Other Transfers") AND ("From Location" = ToLocation))
        THEN
          EXIT(FALSE);
        //*26721.en

        //*24451.n
        //IF NOT PlantSetupRec."Negative Bulk Stock" THEN BEGIN
        //  IF NOT PlantSetupRec."Negative Bulk Stock Depot" THEN
        //    EXIT(FALSE);
        //  lvFromLocRec.GET("From Location");
        //  IF NOT lvFromLocRec.Depot THEN
        //    EXIT(FALSE);
        //END;
        //EXIT(TRUE);

        //*24451.n
        IF PlantSetupRec."Negative Bulk Stock Location" OR PlantSetupRec."Negative Bulk Stock Depot" THEN BEGIN
          lvFromLocRec.GET("From Location");
          IF lvFromLocRec.Depot THEN
            EXIT(PlantSetupRec."Negative Bulk Stock Depot")
          ELSE
            EXIT(PlantSetupRec."Negative Bulk Stock Location");
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE CheckLineCost@4();
    BEGIN
      WITH CostRec DO BEGIN
        TESTFIELD("No.");
        CALCFIELDS(Bulk);
        IF Type = Type::Damage THEN BEGIN
          TESTFIELD("Plant Type");
          IF NOT Bulk THEN
            TESTFIELD("Plant No.");
        END ELSE BEGIN
          //IF ("Plant Type" <> '') AND (NOT Bulk) AND ("Purchase Order No." = '') THEN  //*33352.c
          //  TESTFIELD("Plant No.");
        END;
        IF Type <> Type::Text THEN
          TESTFIELD(Quantity);
        TESTFIELD(Description);  //*33268
      END;
    END;

    PROCEDURE CheckOrigLocBlocked@2();
    BEGIN
      IF BlockingOrigLocChecked THEN
        EXIT;

      OrderRec.CheckBlock(OrderRec."From Location",TRUE);
      BlockingOrigLocChecked := TRUE;
    END;

    PROCEDURE CheckAdvancedRemoval@1210190001();
    VAR
      lvPostPlantOrderCU@1100485000 : Codeunit 11012553;
    BEGIN
      lvPostPlantOrderCU.CheckAdvancedRemovalOnReleasPO(OrderRec);
    END;

    PROCEDURE ProcessOrderItemLine@1100485004(OtherDepotToDepot@1100529000 : Boolean);
    BEGIN
      WITH OrderLineRec DO BEGIN
        IF Type = Type::Text THEN
          EXIT;

        IF MakeBackorder AND (Quantity < "Asked Quantity") AND (Quantity >= 0) THEN BEGIN
           InsertBackorderLine();
           IF Quantity = 0 THEN BEGIN
             DELETE(TRUE);
             EXIT;
           END ELSE BEGIN
             "Asked Quantity" := Quantity;
             MODIFY(TRUE);
           END;
        END;

        TESTFIELD("Item No.");
        TESTFIELD(Quantity);
        TESTFIELD(Description);  //*33268
        //*DP00183.sn
        //TESTFIELD("Location Code");  //* Mandatory for OtherTransfer(D-D), but also for Arrival+Removal(?)  //C006443.o
        IF OtherDepotToDepot THEN BEGIN
          TESTFIELD("Location Code");  //C006443.n  Always mandatory for OtherTransfer(D-D)
          TESTFIELD("New Location Code");
          IF "New Location Code" = "Location Code" THEN
            FIELDERROR("New Location Code");
          IF Quantity < 0 THEN
            FIELDERROR(Quantity);
        END ELSE BEGIN
          IF InventSetup."Location Mandatory" THEN  //C006443.n
            TESTFIELD("Location Code");             //C006443.n  For Arrival+Removal, mandatory depending on setup
        END;
        //*DP00183.en
      END;
    END;

    PROCEDURE CreatePurchOrder@1100485005();
    VAR
      lvOrderRec2@1100485003 : Record 11012556;
      lvOrderLineRec2@1100485001 : Record 11012557;
      lvTmpRec@1100485002 : TEMPORARY Record 11012557;
      TmpRelOldNewPOLine@1100409005 : TEMPORARY Record 11012558;
      POCostLine@1100409000 : Record 11012558;
      POCostLine2@1100409002 : Record 11012558;
      POCostLine3@1100409003 : Record 11012558;
      POCostLineMgt@1100409001 : Codeunit 11012581;
      lvNotForFirst@1100485000 : Boolean;
      TextAllowed@1100409004 : Boolean;
      SkipLine@1100409006 : Boolean;
      InclCostLines@1100409007 : Boolean;
      SelectedNoSeries@1100409008 : Code[20];
    BEGIN
      PlantSetupRec.GET;
      PlantSetupRec.TESTFIELD("Extended Picking Procedure", TRUE);

      WITH OrderRec DO BEGIN
        IF Status >= Status::Released THEN
          FIELDERROR(Status);
        TESTFIELD(Posted,FALSE);
        TESTFIELD("Purchase Order No.", '');
        TESTFIELD(Type,Type::Arrival);
        TESTFIELD("From Location");
        TESTFIELD("To Location");

        FromLocRec.GET("From Location");
        ToLocRec.GET("To Location");
        CheckBlock("To Location",TRUE);

        CALCFIELDS("To Location Description");
      END;

      WITH OrderLineRec DO BEGIN
        RESET;
        SETRANGE("Plant Order No.",OrderRec."No.");
        SETFILTER(Type, '%1|%2', Type::Plant, Type::Item);
        SETFILTER("Purch. Order Type", '%1|%2', "Purch. Order Type"::Purchase, "Purch. Order Type"::Rent);
        IF NOT FINDFIRST THEN
          ERROR(Text030, FIELDCAPTION("Purch. Order Type"));

        //* Only do not create a Backorder if all lines for the same Vendor and have the same 'Direct Delivery'
        //* and the Quantity (loaded) is zero. (om te voorkomen dat er een lege MO achter blijft)
        MakeBackorder := FALSE;
        RESET;
        SETRANGE("Plant Order No.",OrderRec."No.");
        SETFILTER(Type, '%1|%2', Type::Plant, Type::Item);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            IF ("Purch. Order Type" = "Purch. Order Type"::" ") THEN
              MakeBackorder := TRUE
            ELSE BEGIN
              TESTFIELD("Vendor No.");
              IF (Quantity < 0) THEN  //* Als besteltype gevuld dan mag aantal nooit negatief zijn.
                FIELDERROR(Quantity);
              IF (Quantity <> 0) THEN
                MakeBackorder := TRUE;
              IF NOT lvTmpRec.GET("Vendor No.", BoolToInteger("Direct Delivery")) THEN BEGIN
                lvTmpRec.INIT;
                lvTmpRec."Plant Order No." := "Vendor No.";
                lvTmpRec."Line No." := BoolToInteger("Direct Delivery");
                lvTmpRec."Plant Type" := '';         //* Used for (Plant) Back Order No.
                lvTmpRec.Quantity := 10000;          //* Used for NextLineNo of (Plant) Back Order Line
                lvTmpRec."Purchase Order" := '';     //* Used for Purchase Order No.
                lvTmpRec."Purchase Order Line No." := 0; //* Used for LastLineNo of Purchase Order Line
                lvTmpRec.INSERT;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
      IF NOT MakeBackorder THEN BEGIN
        IF lvTmpRec.COUNT > 1 THEN
          MakeBackorder := TRUE;
        lvNotForFirst := TRUE;  //* First remains on current order
      END;

      //*33352.sn
      lvTmpRec.RESET;
      IF lvTmpRec.FINDSET THEN BEGIN
        SkipLine := FALSE;
        POCostLine.RESET;
        REPEAT
          POCostLine.SETRANGE("Plant Order No.", OrderRec."No.");
          POCostLine.SETRANGE("Vendor No.", lvTmpRec."Plant Order No.");  //* lvTmpRec."Plant Order No." contains VendorNo
          POCostLine.SETRANGE("Purchase Order No.", '');
          IF NOT POCostLine.ISEMPTY THEN BEGIN
            SkipLine := TRUE;
            IF CONFIRM(Text036, FALSE) THEN
              InclCostLines := TRUE;
          END;
        UNTIL (lvTmpRec.NEXT = 0) OR SkipLine;
      END;
      //*33352.en

      PurchOrderRec.CheckAskForNoSeries(PurchOrderRec."Document Type"::Order,SelectedNoSeries); //C021547.n

      WITH OrderLineRec DO BEGIN
        RESET;
        SETRANGE("Plant Order No.",OrderRec."No.");
        //SETRANGE(Type, Type::Plant);
        SETFILTER(Type, '%1|%2', Type::Plant, Type::Item);
        SETFILTER("Purch. Order Type", '%1|%2', "Purch. Order Type"::Purchase, "Purch. Order Type"::Rent);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            CASE Type OF
              Type::Plant:
                BEGIN
                  TESTFIELD("Plant Type");
                  TESTFIELD("Set Code", '');
                  CALCFIELDS(Bulk);
                  IF NOT Bulk THEN BEGIN
                    IF "Asked Quantity" <> ROUND("Asked Quantity",1) THEN
                      FIELDERROR("Asked Quantity", STRSUBSTNO(Text032, "Asked Quantity"));
                    IF Quantity <> ROUND(Quantity,1) THEN
                      FIELDERROR(Quantity, STRSUBSTNO(Text032, Quantity));
                  END;
                END;
              Type::Item:
                BEGIN
                  TESTFIELD("Item No.");
                END;
            END;
            TESTFIELD("Vendor No.");
            TESTFIELD("Purchase Order", '');
            TESTFIELD("Asked Quantity");
            OrderLineRec.CheckPurchOrderTypeAllowed();
            IF ("Asked Quantity" <= Quantity) THEN
              ERROR(Text031, FIELDCAPTION("Asked Quantity"), "Asked Quantity", FIELDCAPTION(Quantity), Quantity, "Line No.");

            lvOrderLineRec2 := OrderLineRec;
            lvTmpRec.GET("Vendor No.", BoolToInteger("Direct Delivery"));
            IF MakeBackorder THEN BEGIN
              IF lvTmpRec."Plant Type" = '' THEN BEGIN
                IF lvNotForFirst THEN BEGIN
                  lvNotForFirst := FALSE;
                  lvTmpRec."Plant Type" := "Plant Order No.";
                END ELSE BEGIN
                  InsertBackorder();
                  lvTmpRec."Plant Type" := BackorderNo;
                END;
              END;
              IF lvTmpRec."Plant Type" <> "Plant Order No." THEN BEGIN
                NextBackLineNo := lvTmpRec.Quantity;
                IF Type = Type::Plant THEN BEGIN
                  //*33352.sn
                  TmpRelOldNewPOLine."Plant Order No." := OrderLineRec."Plant Order No.";
                  TmpRelOldNewPOLine."Line No." := OrderLineRec."Line No.";
                  TmpRelOldNewPOLine."Plant Order Line No." := NextBackLineNo;
                  TmpRelOldNewPOLine."Purchase Order No." := lvTmpRec."Plant Type";  //Back Order No (New PO)
                  TmpRelOldNewPOLine."Purchase Order Line No." := BoolToInteger("Direct Delivery");
                  TmpRelOldNewPOLine."Vendor No." := OrderLineRec."Vendor No.";
                  TmpRelOldNewPOLine.INSERT;
                  //*33352.en
                END;
                InsertBackorderLineOnPurch(lvTmpRec."Plant Type", OrderLineRec);
                lvTmpRec.Quantity := NextBackLineNo;
                lvOrderLineRec2 := BackorderLineRec;
                IF Quantity = 0 THEN
                  DELETE(TRUE)
                ELSE BEGIN
                  "Asked Quantity" := Quantity;
                  "Purch. Order Type" := "Purch. Order Type"::" ";
                  "Vendor No." := '';
                  "Direct Delivery" := FALSE;
                  MODIFY(TRUE);
                END;
              END;
            END;
            IF lvTmpRec."Purchase Order" = '' THEN BEGIN
      //      InsertPurchOrder(lvOrderLineRec2."Vendor No.",lvOrderLineRec2."Direct Delivery"); //C021547.o
              InsertPurchOrder(lvOrderLineRec2."Vendor No.",
                lvOrderLineRec2."Order Address Code",                 //C017429.n
                lvOrderLineRec2."Direct Delivery",SelectedNoSeries);  //C021547.n
              lvTmpRec."Purchase Order" := PurchOrderRec."No.";
              IF lvOrderRec2.GET(lvOrderLineRec2."Plant Order No.") THEN BEGIN
                lvOrderRec2."Purchase Order No." := PurchOrderRec."No.";
                lvOrderRec2.MODIFY;
              END;
            END;
            IF Type = Type::Plant THEN
              InsertPurchOrderLine(lvTmpRec."Purchase Order", lvTmpRec."Purchase Order Line No.", lvOrderLineRec2)
            ELSE
              InsertPurchOrderItemLine(lvTmpRec."Purchase Order", lvTmpRec."Purchase Order Line No.", lvOrderLineRec2);
            lvTmpRec."Purchase Order Line No." := PurchOrderLineRec."Line No.";
            lvTmpRec.MODIFY;
            IF lvOrderLineRec2.FIND THEN BEGIN
              IF lvOrderLineRec2."No." > '0' THEN
                lvOrderLineRec2."No." := '';
              lvOrderLineRec2."Purchase Order" := PurchOrderLineRec."Document No.";
              lvOrderLineRec2."Purchase Order Line No." := PurchOrderLineRec."Line No.";
              lvOrderLineRec2.MODIFY(TRUE);
            END;
          UNTIL NEXT = 0;
        END;
      END;

      //*33352.sn
      //* Purchase Line for Cost Lines only for vendor(s) were a purchase order is create for plant (or items).
      IF NOT InclCostLines THEN
        EXIT;
      lvTmpRec.RESET;
      lvTmpRec.SETFILTER("Purchase Order", '<>%1', '');
      IF lvTmpRec.FINDSET THEN BEGIN
        POCostLine.RESET;
        REPEAT
          POCostLine.SETRANGE("Plant Order No.", OrderRec."No.");
          POCostLine.SETRANGE("Vendor No.", lvTmpRec."Plant Order No.");  //* lvTmpRec."Plant Order No." contains VendorNo
          POCostLine.SETRANGE("Purchase Order No.", '');
          IF POCostLine.FINDSET(TRUE,TRUE) THEN BEGIN
            POCostLine3.RESET;
            POCostLine3.COPYFILTERS(POCostLine);
            POCostLine3.SETFILTER(Type, '<>%1', POCostLine.Type::Text);
            TextAllowed := NOT POCostLine3.ISEMPTY;
            REPEAT
              SkipLine := FALSE;
              IF (NOT SkipLine) AND (POCostLine.Type = POCostLine.Type::Text) AND (NOT TextAllowed) THEN
                SkipLine := TRUE;
              IF (NOT SkipLine) AND (POCostLine."Plant Order Line No." <> 0) AND
                 (lvTmpRec."Plant Type" <> OrderRec."No.") AND (lvTmpRec."Plant Type" <> '')
              THEN BEGIN
                IF NOT TmpRelOldNewPOLine.GET(POCostLine."Plant Order No.", POCostLine."Plant Order Line No.") THEN
                  SkipLine := TRUE
                ELSE BEGIN
                  IF (TmpRelOldNewPOLine."Vendor No." = POCostLine."Vendor No.") AND
                     (TmpRelOldNewPOLine."Purchase Order Line No." <>  lvTmpRec."Line No.")  //* Check "Direct Delivery" same
                  THEN
                    SkipLine := TRUE;
                END;
              END;
              IF NOT SkipLine THEN BEGIN
                POCostLine2 := POCostLine;
                IF (lvTmpRec."Plant Type" <> OrderRec."No.") AND  (lvTmpRec."Plant Type" <> '') THEN BEGIN
                  //* lvTmpRec."Plant Type" is used for Back Order No. (Plant Order)
                  POCostLine3.RESET;
                  POCostLine3.SETRANGE("Plant Order No.", lvTmpRec."Plant Type");
                  IF NOT POCostLine3.FINDLAST THEN
                    POCostLine3."Line No." := 0;
                  POCostLine2."Plant Order No." := lvTmpRec."Plant Type";
                  POCostLine2."Line No." := POCostLine3."Line No." + 10000;
                  IF POCostLine2."Plant Order Line No." <> 0 THEN
                    POCostLine2."Plant Order Line No." := TmpRelOldNewPOLine."Plant Order Line No.";
                  POCostLine2.INSERT(TRUE);
                  POCostLine.DELETE(TRUE);
                END;
                POCostLine2."Purchase Order No." := lvTmpRec."Purchase Order";
                POCostLine2."Purchase Order Line No." := lvTmpRec."Purchase Order Line No." + 10000;
                POCostLineMgt.RunCreatPurLineOnPlantPurOrder(POCostLine2);
                POCostLine2.MODIFY;
                lvTmpRec."Purchase Order Line No." := POCostLine2."Purchase Order Line No.";
                lvTmpRec.MODIFY;
              END;
            UNTIL POCostLine.NEXT = 0;
          END;
        UNTIL lvTmpRec.NEXT = 0;
      END;
      //*33352.en
    END;

    PROCEDURE BoolToInteger@1100485010(IBool@1100485000 : Boolean) : Integer;
    BEGIN
      IF IBool THEN
        EXIT(1);

      EXIT(0);
    END;

    PROCEDURE InsertPurchOrder@1100485007(IVendorNo@1100485000 : Code[20];OrderAddressCode@1100525000 : Code[10];IDirectDelivery@1100485006 : Boolean;SelectedNoSeries@1100409000 : Code[20]);
    VAR
      lvOrderContRec@1100485004 : Record 11012536;
      lvMaxLen@1100485001 : Integer;
      lvLenCont@1100485002 : Integer;
      lvLenPhone@1100485003 : Integer;
      lvPhoneNo@1100485005 : Text[100];
    BEGIN
      WITH PurchOrderRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "No." := '';
        //C021547.sn
        "No. Series" := SelectedNoSeries;
        GetNoForSelectedNoSeries(PurchOrderRec);
        //C021547.en
        INSERT(TRUE);
        TESTFIELD("No.");
        VALIDATE("Buy-from Vendor No.", IVendorNo);
        IF OrderAddressCode <> '' THEN  //Only if filled, can default be filled in validate of Buy-from Vendor
          VALIDATE("Order Address Code", OrderAddressCode);  //C017429.n
        IF IDirectDelivery THEN BEGIN
          //Deliver := Deliver::" ";
          //"Ship To Location" := '';
          Deliver := Deliver::"Plant Location";
          "Ship To Location" := OrderRec."To Location";
          "Ship-to Name" := ToLocRec.Description;
          "Ship-to Name 2" := ToLocRec."Description 2";
          "Ship-to Address" := OrderRec."To Location Address";
          "Ship-to Address 2" := OrderRec."To Location Address 2";
          "Ship-to Post Code" := OrderRec."To Location Post Code";
          "Ship-to City" := OrderRec."To Location City";
          IF (OrderRec."To Location Contact" <> '') THEN BEGIN
            "Ship-to Contact" := OrderRec."To Location Contact";
            lvPhoneNo := OrderRec."To Location Contact Phone No";
          END ELSE BEGIN
            lvOrderContRec.SETRANGE(Type, lvOrderContRec.Type::"PO To");
            lvOrderContRec.SETRANGE("Order No.", OrderRec."No.");
            IF lvOrderContRec.FIND('-') THEN BEGIN
              lvOrderContRec.CALCFIELDS(Name,"Phone No.","Mobile Phone No.","Phone No. Work");
              "Ship-to Contact" := lvOrderContRec.Name;
              lvPhoneNo := lvOrderContRec."Mobile Phone No.";
              IF lvPhoneNo = '' THEN
                lvPhoneNo := lvOrderContRec."Phone No.";
              IF lvPhoneNo = '' THEN
                lvPhoneNo := lvOrderContRec."Phone No. Work";
            END;
          END;
          //* Ook telefoonnr. van contactpersoon, maar hiervoor geen veld in inkooporder
          //* daarom telnr., ook maar in veld contactpersoon zetten.
          lvMaxLen := MAXSTRLEN("Ship-to Contact");
          lvLenCont := STRLEN("Ship-to Contact");
          lvLenPhone := STRLEN(lvPhoneNo);
          IF (lvLenCont + lvLenPhone) >= lvMaxLen THEN
            "Ship-to Contact" := COPYSTR("Ship-to Contact", 1, (lvMaxLen-lvLenPhone)) + lvPhoneNo
          ELSE
            "Ship-to Contact" := "Ship-to Contact" + ' ' + lvPhoneNo;
        END ELSE BEGIN
          //* C-013115
          IF FromLocRec.Depot THEN BEGIN
            FromLocRec.CheckBlock("Document Type", TRUE, FALSE);
            Deliver := Deliver::"Plant Location";
            "Ship To Location" := OrderRec."From Location";
          END;
          "Ship-to Name" := FromLocRec.Description;
          "Ship-to Name 2" := FromLocRec."Description 2";
          "Ship-to Address" := OrderRec."From Location Address";
          "Ship-to Address 2" := OrderRec."From Location Address 2";
          "Ship-to Post Code" := OrderRec."From Location Post Code";
          "Ship-to City" := OrderRec."From Location City";
          IF (OrderRec."From Location Contact" <> '') THEN BEGIN
            "Ship-to Contact" := OrderRec."From Location Contact";
            lvPhoneNo := OrderRec."From Location Contact Phone No";
          END ELSE BEGIN
            lvOrderContRec.SETRANGE(Type, lvOrderContRec.Type::"PO From");
            lvOrderContRec.SETRANGE("Order No.", OrderRec."No.");
            IF lvOrderContRec.FIND('-') THEN BEGIN
              lvOrderContRec.CALCFIELDS(Name,"Phone No.","Mobile Phone No.","Phone No. Work");
              "Ship-to Contact" := lvOrderContRec.Name;
              lvPhoneNo := lvOrderContRec."Mobile Phone No.";
              IF lvPhoneNo = '' THEN
                lvPhoneNo := lvOrderContRec."Phone No.";
              IF lvPhoneNo = '' THEN
                lvPhoneNo := lvOrderContRec."Phone No. Work";
            END;
          END;
          //* Ook telefoonnr. van contactpersoon, maar hiervoor geen veld in inkooporder
          //* daarom telnr., ook maar in veld contactpersoon zetten.
          lvMaxLen := MAXSTRLEN("Ship-to Contact");
          lvLenCont := STRLEN("Ship-to Contact");
          lvLenPhone := STRLEN(lvPhoneNo);
          IF (lvLenCont + lvLenPhone) >= lvMaxLen THEN
            "Ship-to Contact" := COPYSTR("Ship-to Contact", 1, (lvMaxLen-lvLenPhone)) + lvPhoneNo
          ELSE
            "Ship-to Contact" := "Ship-to Contact" + ' ' + lvPhoneNo;
        END;
        PurchOrderRec.VALIDATE("Requested Receipt Date", OrderRec."Transfer Date");
        PurchOrderRec.VALIDATE("Expected Receipt Date", OrderRec."Transfer Date");
        "Amounts only" := FALSE;
        MODIFY(TRUE);

        TmpNewPurchOrderRec."Document Type" := "Document Type";
        TmpNewPurchOrderRec."No." := "No.";
        TmpNewPurchOrderRec.INSERT;
      END;
    END;

    PROCEDURE InsertPurchOrderLine@1100485008(IPurchOrderNo@1100485001 : Code[20];ILastLineNo@1100485002 : Integer;IPlantOrderLineRec@1100485000 : Record 11012557);
    VAR
      PlantVendRec@1100525000 : Record 11012596;
      OrderQuan@1100525001 : Decimal;
    BEGIN
      WITH PurchOrderLineRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "Document No." := IPurchOrderNo;
        "Line No." := ILastLineNo + 10000;
        InitRecord();
        VALIDATE("Plant Type", IPlantOrderLineRec."Plant Type");
        "Plant Order No." := IPlantOrderLineRec."Plant Order No.";        //* "Plant Order No." and "Direct Delivery Plant" must
        "Plant Order Line No." := IPlantOrderLineRec."Line No.";          //* be filled before "Cost Component Plant" is
        "Direct Delivery Plant" := IPlantOrderLineRec."Direct Delivery";  //* validated.
        IF (IPlantOrderLineRec."Purch. Order Type" <> IPlantOrderLineRec."Purch. Order Type"::Rent) THEN BEGIN
          PlantSetupRec.TESTFIELD("Cost Component Acquisition");
          VALIDATE("Cost Component Plant",  PlantSetupRec."Cost Component Acquisition");
          PlantVendRec.Type := PlantVendRec.Type::Purchase;
        END ELSE BEGIN
          PlantSetupRec.TESTFIELD("Cost Component Rent");
          VALIDATE("Cost Component Plant",  PlantSetupRec."Cost Component Rent");
          "Expected Enddate Rent" := IPlantOrderLineRec."Expected return on";
          PlantVendRec.Type := PlantVendRec.Type::Rent;
        END;
        DeterminePlantVendorType(TRUE); //C015024
        OrderQuan := IPlantOrderLineRec."Asked Quantity" - IPlantOrderLineRec.Quantity;
        IF PlantVendRec.GET("Plant Type", IPlantOrderLineRec."Vendor No.", PlantVendRec.Type) THEN BEGIN
          IF PlantVendRec."Reorder Quantity" > 0 THEN BEGIN
            IF (OrderQuan MOD PlantVendRec."Reorder Quantity") <> 0 THEN
              OrderQuan := ROUND(((OrderQuan DIV PlantVendRec."Reorder Quantity") + 1) * PlantVendRec."Reorder Quantity", 0.00001);
          END;
        END;
        VALIDATE(Quantity, OrderQuan);
        "Plant Order No." := IPlantOrderLineRec."Plant Order No.";
        "Plant Order Line No." := IPlantOrderLineRec."Line No.";
        "Direct Delivery Plant" := IPlantOrderLineRec."Direct Delivery";
        IF IPlantOrderLineRec.Description <> '' THEN
          Description := IPlantOrderLineRec.Description;
        INSERT(TRUE);
      END;
    END;

    PROCEDURE InsertPurchOrderItemLine@1100485028(IPurchOrderNo@1100485001 : Code[20];ILastLineNo@1100485002 : Integer;IPlantOrderLineRec@1100485000 : Record 11012557);
    BEGIN
      WITH PurchOrderLineRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "Document No." := IPurchOrderNo;
        InitRecord();
        "Line No." := ILastLineNo + 10000;
        VALIDATE("Item No.", IPlantOrderLineRec."Item No.");
        VALIDATE("Unit of Measure Code", IPlantOrderLineRec."Unit of Measure");
        VALIDATE(Quantity, (IPlantOrderLineRec."Asked Quantity" - IPlantOrderLineRec.Quantity));
        "Plant Order No." := IPlantOrderLineRec."Plant Order No.";
        "Plant Order Line No." := IPlantOrderLineRec."Line No.";
        "Direct Delivery Plant" := IPlantOrderLineRec."Direct Delivery";
        IF IPlantOrderLineRec.Description <> '' THEN
          Description := IPlantOrderLineRec.Description;
        INSERT(TRUE);
      END;
    END;

    PROCEDURE DetermineBackorderNo@1100529004(PlantOrderNo@1100529000 : Code[20]) : Code[20];
    VAR
      Pos@1100529001 : Integer;
    BEGIN
      //*DP00183
      BackorderRec.RESET;
      Pos := STRPOS(PlantOrderNo, GetBackorderSign());
      IF Pos = 0 THEN
        BackorderRec.SETFILTER("No.", '%1', (PlantOrderNo + GetBackorderSign() + '*'))
      ELSE
        BackorderRec.SETFILTER("No.", '%1', (COPYSTR(PlantOrderNo, 1, Pos) + '*'));

      IF BackorderRec.FINDLAST THEN
        EXIT(INCSTR(BackorderRec."No."))
      ELSE
        EXIT(PlantOrderNo + GetBackorderSign() + '01');
    END;

    PROCEDURE GetBackorderSign@1100485009() : Text[1];
    VAR
      PlantOrder@1100525000 : Record 11012556;
    BEGIN
      //EXIT('-');
      EXIT(PlantOrder.BackorderSign());
    END;

    PROCEDURE InsertBackorder@1100485006();
    VAR
      lvOrderContRec@1100485005 : Record 11012536;
      lvOrderContRec2@1100485004 : Record 11012536;
      lvSalesOrderPORelRec@1100485006 : Record 11012787;
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      BackorderNo := DetermineBackorderNo(OrderRec."No.");  //*DP00183 (via function)

      BackorderRec.INIT;
      BackorderRec."No." := BackorderNo;
      BackorderRec.INSERT;
      //* Gesplits in INSERT en MODIFY(TRUE) ivm Commerce Portal, alleen INSERT(TRUE) niet mogelijk want dan worden een
      //* aantal velden aangepast op de insert-trigger.
      BackorderRec.TRANSFERFIELDS(OrderRec, FALSE);
      BackorderRec."Order Pick List Printed" := 0;
      BackorderRec."Dispatch Note Printed" := 0;
      BackorderRec.Status := BackorderRec.Status::Open;
      BackorderRec."Created by" := USERID;
      BackorderRec."Exit Order No." := '';
      BackorderRec."Order Picking Status" := BackorderRec."Order Picking Status"::Open;
      BackorderRec."Orderpicking User" := '';
      BackorderRec."OP Storage Finished" := FALSE;
      BackorderRec."OP Warehouse Finished" := FALSE;
      BackorderRec."Shipping Agent" := '';
      BackorderRec."Def. Transfer" := 0D;
      BackorderRec.MODIFY(TRUE);
      NextBackLineNo := 10000;

      OrderRec.MoveDocumentLinks(OrderRec, BackorderRec, TRUE); //DP00183
      //OrderRec.MoveCommentLines(OrderRec, BackorderRec, TRUE);  //DP00183.c  //C005461.o
      PlantCommentLine.CopyComments(
        DATABASE::"Plant Order", OrderRec."No.", '', 0,
        DATABASE::"Plant Order", BackorderRec."No.", '', 0);  //C005461.n

      lvOrderContRec.SETRANGE(Type, lvOrderContRec.Type::"PO From", lvOrderContRec.Type::"PO To");
      lvOrderContRec.SETRANGE("Order No.", OrderRec."No.");
      IF lvOrderContRec.FIND('-') THEN BEGIN
        REPEAT
          lvOrderContRec2 := lvOrderContRec;
          lvOrderContRec2."Order No." := BackorderNo;
          lvOrderContRec2.INSERT;
        UNTIL lvOrderContRec.NEXT = 0;
      END;

      lvSalesOrderPORelRec.SETCURRENTKEY(Level, "Plant Document No.");
      lvSalesOrderPORelRec.SETRANGE(Level, lvSalesOrderPORelRec.Level::PlantOrder);
      lvSalesOrderPORelRec.SETRANGE("Plant Document No.", OrderRec."No.");
      IF lvSalesOrderPORelRec.FINDFIRST THEN BEGIN  //* Is altijd maar 1 record per PO
        lvSalesOrderPORelRec."Plant Document No." := BackorderNo;
        lvSalesOrderPORelRec.INSERT;
      END;
    END;

    PROCEDURE InsertBackorderLine@1100485003();
    VAR
      lvPurchOrderLineRec@1100485000 : Record 39;
      PlantCommentLine@1100529000 : Record 11072666;
      lvFillPurchOrder@1100485001 : Boolean;
    BEGIN
      BackorderLineRec := OrderLineRec;
      BackorderLineRec."Plant Order No." := BackorderNo;
      BackorderLineRec."Line No." := NextBackLineNo;
      IF (BackorderLineRec."No." > '0') AND (OrderLineRec.Quantity <> 0) THEN
        BackorderLineRec."No." := '';
      BackorderLineRec.SetNoInventoryWarning(TRUE);
      BackorderLineRec.Quantity := 0;
      BackorderLineRec.VALIDATE("Asked Quantity", OrderLineRec."Asked Quantity" - OrderLineRec.Quantity);
      BackorderLineRec."Purchase Order" := '';
      BackorderLineRec."Purchase Order Line No." := 0;
      IF (OrderLineRec."Purchase Order" <> '') AND (OrderLineRec."Purchase Order Line No." <> 0) THEN BEGIN
        IF lvPurchOrderLineRec.GET(
          lvPurchOrderLineRec."Document Type"::Order, OrderLineRec."Purchase Order", OrderLineRec."Purchase Order Line No.")
        THEN BEGIN
          lvPurchOrderLineRec."Plant Order No." := BackorderLineRec."Plant Order No.";
          lvPurchOrderLineRec."Plant Order Line No." := BackorderLineRec."Line No.";
          lvPurchOrderLineRec."Modified by" := USERID; //DP00469
          lvPurchOrderLineRec."Last Date Modified" := TODAY;//DP00469
          lvPurchOrderLineRec.MODIFY;
          lvFillPurchOrder := TRUE;  //* Kan niet hier al want wordt bij insert trigger weer leeg gemaakt
        END;
      END;
      BackorderLineRec."Order Picking Status" := 0;
      BackorderLineRec.INSERT(TRUE);
      IF lvFillPurchOrder THEN BEGIN
        BackorderLineRec."Purchase Order" := OrderLineRec."Purchase Order";
        BackorderLineRec."Purchase Order Line No." := OrderLineRec."Purchase Order Line No.";
        BackorderLineRec.MODIFY;
      END;

      NextBackLineNo := NextBackLineNo + 10000;

      CopyTextLinesToBackorder(OrderLineRec, BackorderNo);
      OrderLineRec.MoveDocumentLinks(OrderLineRec, BackorderLineRec, TRUE); //DP00183
      //OrderLineRec.MoveCommentLines(OrderLineRec, BackorderLineRec, TRUE);  //DP00183  //C005461.o
      PlantCommentLine.CopyComments(
        DATABASE::"Plant Order Line", OrderLineRec."Plant Order No.", '', OrderLineRec."Line No.",
        DATABASE::"Plant Order Line", BackorderLineRec."Plant Order No.", '', BackorderLineRec."Line No.");  //C005461.n
    END;

    PROCEDURE InsertBackorderLineOnPurch@1100485011(IBackOrderNo@1100485002 : Code[20];IPlantOrderLineRec@1100485000 : Record 11012557);
    VAR
      PlantCommentLine@1100529000 : Record 11072666;
    BEGIN
      BackorderLineRec := IPlantOrderLineRec;
      BackorderLineRec."Plant Order No." := IBackOrderNo;
      BackorderLineRec."Line No." := NextBackLineNo;
      BackorderLineRec.SetNoInventoryWarning(TRUE);
      BackorderLineRec.Quantity := 0;
      BackorderLineRec.VALIDATE("Asked Quantity", IPlantOrderLineRec."Asked Quantity" - IPlantOrderLineRec.Quantity);
      BackorderLineRec."Purchase Order" := '';
      BackorderLineRec."Purchase Order Line No." := 0;
      BackorderLineRec."Order Picking Status" :=0;
      BackorderLineRec.INSERT(TRUE);

      NextBackLineNo := NextBackLineNo + 10000;

      CopyTextLinesToBackorder(IPlantOrderLineRec, IBackOrderNo);
      OrderLineRec.MoveDocumentLinks(OrderLineRec, BackorderLineRec, TRUE); //DP00183
      //OrderLineRec.MoveCommentLines(OrderLineRec, BackorderLineRec, TRUE);  //DP00183  //C005461.o
      PlantCommentLine.CopyComments(
        DATABASE::"Plant Order Line", OrderLineRec."Plant Order No.", '', OrderLineRec."Line No.",
        DATABASE::"Plant Order Line", BackorderLineRec."Plant Order No.", '', BackorderLineRec."Line No.");  //C005461.n
    END;

    LOCAL PROCEDURE PartlyMoveRemovOrderToNewOrder@1100529001(VAR SelectedPOLine@1100529000 : Record 11012557;OnlyCostLines@1100409000 : Boolean) NewOrderNo : Code[20];
    VAR
      SelectedOrderLine@1100529001 : Record 11012557;
      SelectedCostLine@1100529006 : Record 11012558;
      CostLine2@1100529003 : Record 11012558;
      PlantOrderCostList@1100529007 : Page 11125927;
      SkipCostLines@1100529009 : Boolean;
      NextOrderLineNo@1100529008 : Integer;
      NextCostLineNo@1100529004 : Integer;
    BEGIN
      //*DP00183
      WITH OrderRec DO BEGIN
        //TESTFIELD(Type, Type::Removal);  //C027375.o
        IF NOT (Type IN [Type::Arrival, Type::Removal]) THEN  //C027375.n
          FIELDERROR(Type);
        IF Status >= Status::Released THEN
          FIELDERROR(Status);
        TESTFIELD(Posted,FALSE);
        TESTFIELD("Sales Rental Order No.", '');
        IF Type = Type::Arrival THEN  //C027375.n
          TESTFIELD("Purchase Order No.", '');

        IF NOT OnlyCostLines THEN BEGIN  //C017835.n
          SelectedOrderLine.COPY(SelectedPOLine);

          SelectedOrderLine.FILTERGROUP(6);
          SelectedOrderLine.SETRANGE("Plant Order No.", "No.");
          SelectedOrderLine.SETFILTER(Type, '%1|%2', SelectedOrderLine.Type::Plant, SelectedOrderLine.Type::Item);
          IF SelectedOrderLine.ISEMPTY THEN
            ERROR(Text037, OrderLineRec.TABLECAPTION);

          OrderLineRec.RESET;
          OrderLineRec.SETRANGE("Plant Order No.","No.");
          OrderLineRec.SETFILTER(Type, '%1|%2', OrderLineRec.Type::Plant, OrderLineRec.Type::Item);
          IF SelectedPOLine.COUNT >= OrderLineRec.COUNT THEN
            ERROR(Text038, OrderLineRec.TABLECAPTION);
          SelectedOrderLine.SETRANGE(Type);  //* Reset filter on Type
        END;  //C017835.n

        CostLine2.RESET;
        CostLine2.FILTERGROUP(2);
        CostLine2.SETRANGE("Plant Order No.", "No.");
        IF NOT OnlyCostLines THEN  //C017835.n
          CostLine2.SETRANGE("Plant Order Line No.", 0);  //* Only not related to a PO-Line
        CostLine2.FILTERGROUP(0);
        IF NOT CostLine2.ISEMPTY THEN BEGIN
          PlantOrderCostList.SETTABLEVIEW(CostLine2);
          PlantOrderCostList.EDITABLE(FALSE);
          PlantOrderCostList.LOOKUPMODE(TRUE);
          IF PlantOrderCostList.RUNMODAL=ACTION::LookupOK THEN  //Only if OK, because default 1 line is already selected in page
            PlantOrderCostList.GetSelectedPOCostLineFilters(SelectedCostLine)
          ELSE
            SkipCostLines := TRUE;
        END;
        SelectedCostLine.FILTERGROUP(6);
        SelectedCostLine.SETRANGE("Plant Order No.", "No.");
        IF NOT OnlyCostLines THEN  //C017835.n
          SelectedCostLine.SETRANGE("Plant Order Line No.", 0);  //* Only not related to a PO-Line (related only/always if PO-Line)

        //NewOrderNo := InsertNewRemovalOrderHead(OrderRec);  //C017835.o
        NextOrderLineNo := 10000;
        NextCostLineNo := 10000;

        IF NOT OnlyCostLines THEN BEGIN  //C017835.n
          NewOrderNo := InsertNewRemovalOrderHead(OrderRec);  //C017835.n
          SelectedOrderLine.FINDSET(TRUE, FALSE);
          REPEAT
            InsertNewRemovalOrderLine(SelectedOrderLine, NewOrderNo, NextOrderLineNo, NextCostLineNo);
            NextOrderLineNo := NextOrderLineNo + 10000;
            SelectedOrderLine.DELETE(TRUE);
          UNTIL SelectedOrderLine.NEXT = 0;
        END;  //C017835.n
        IF NOT SkipCostLines THEN BEGIN
          IF SelectedCostLine.FINDSET(TRUE, FALSE) THEN BEGIN
            IF OnlyCostLines AND (NewOrderNo = '') THEN          //C017835.n
              NewOrderNo := InsertNewRemovalOrderHead(OrderRec); //C017835.n
            REPEAT
              CostLine2."Plant Order No." := NewOrderNo;
              CostLine2."Line No." := NextCostLineNo;
              CostLine2.TRANSFERFIELDS(SelectedCostLine, FALSE);
              CostLine2.INSERT;
              NextCostLineNo := NextCostLineNo + 10000;
              SelectedCostLine.DELETE;
            UNTIL SelectedCostLine.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE InsertNewRemovalOrderHead@1100529003(PlantOrder@1100529000 : Record 11012556) : Code[20];
    VAR
      NewOrderHead@1100529001 : Record 11012556;
      OrderContact@1100485005 : Record 11012536;
      OrderContact2@1100485004 : Record 11012536;
      PlantCommentLine@1100529002 : Record 11072666;
    BEGIN
      //*DP00183
      NewOrderHead."No." := DetermineBackorderNo(PlantOrder."No.");
      NewOrderHead.TESTFIELD("No.");
      NewOrderHead.TRANSFERFIELDS(PlantOrder, FALSE);
      NewOrderHead.Status := NewOrderHead.Status::Open;
      NewOrderHead."Order Pick List Printed" := 0;
      NewOrderHead."Dispatch Note Printed" := 0;
      NewOrderHead."Created on" := CURRENTDATETIME;
      NewOrderHead."Created by" := USERID;
      NewOrderHead."Transport Status (Ext.)" := NewOrderHead."Transport Status (Ext.)"::Open;
      NewOrderHead.INSERT(FALSE);

      OrderContact.SETRANGE(Type, OrderContact.Type::"PO From", OrderContact.Type::"PO To");
      OrderContact.SETRANGE("Order No.", PlantOrder."No.");
      IF OrderContact.FIND('-') THEN BEGIN
        REPEAT
          OrderContact2 := OrderContact;
          OrderContact2."Order No." := NewOrderHead."No.";
          OrderContact2.INSERT;
        UNTIL OrderContact.NEXT = 0;
      END;

      PlantOrder.MoveDocumentLinks(PlantOrder, NewOrderHead, TRUE);
      //PlantOrder.MoveCommentLines(PlantOrder, NewOrderHead, TRUE);  //C005461.o
      PlantCommentLine.CopyComments(
        DATABASE::"Plant Order", PlantOrder."No.", '', 0,
        DATABASE::"Plant Order", NewOrderHead."No.", '', 0);  //C005461.n

      EXIT(NewOrderHead."No.");
    END;

    LOCAL PROCEDURE InsertNewRemovalOrderLine@1100529012(PlantOrderLine@1100529000 : Record 11012557;NewOrderNo@1100529002 : Code[20];NextLineNo@1100529003 : Integer;VAR NextCostLineNo@1100529005 : Integer);
    VAR
      NewOrderLine@1100529001 : Record 11012557;
      RelatedCostLine@1100529004 : Record 11012558;
      CostLine2@1100529006 : Record 11012558;
      PlantCommentLine@1100529007 : Record 11072666;
    BEGIN
      //*DP00183
      NewOrderLine."Plant Order No." := NewOrderNo;
      NewOrderLine.TRANSFERFIELDS(PlantOrderLine, FALSE);
      NewOrderLine."Line No." := NextLineNo;
      NewOrderLine.INSERT(FALSE);  // False, do not create cost lines

      RelatedCostLine.SETRANGE("Plant Order No.", PlantOrderLine."Plant Order No.");
      RelatedCostLine.SETRANGE("Plant Order Line No.", PlantOrderLine."Line No.");
      IF RelatedCostLine.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
           CostLine2."Plant Order No." := NewOrderNo;
           CostLine2."Line No." := NextCostLineNo;
           CostLine2.TRANSFERFIELDS(RelatedCostLine, FALSE);
           CostLine2."Plant Order Line No." := NewOrderLine."Line No.";
           CostLine2.INSERT;
           RelatedCostLine.DELETE;
           NextCostLineNo := NextCostLineNo + 10000;
        UNTIL RelatedCostLine.NEXT = 0;
      END;

      PlantOrderLine.MoveDocumentLinks(PlantOrderLine, NewOrderLine, FALSE);
      //PlantOrderLine.MoveCommentLines(PlantOrderLine, NewOrderLine, FALSE);  //C005461.o
      PlantCommentLine.MoveComments(
        DATABASE::"Plant Order Line", PlantOrderLine."Plant Order No.", '', PlantOrderLine."Line No.",
        DATABASE::"Plant Order Line", NewOrderLine."Plant Order No.", '', NewOrderLine."Line No.");  //C005461.n
    END;

    PROCEDURE CopyTextLinesToBackorder@1100485014(IPlantOrderLineRec@1100485000 : Record 11012557;IBackorderNo@1100485002 : Code[20]);
    VAR
      lvPlantOrderLineRec@1100485004 : Record 11012557;
      lvBackorderLineRec@1100485005 : Record 11012557;
    BEGIN
      WITH lvPlantOrderLineRec DO BEGIN
        SETRANGE("Plant Order No.", IPlantOrderLineRec."Plant Order No.");
        SETFILTER("Line No.", '>%1', IPlantOrderLineRec."Line No.");
        IF NOT FIND('-') THEN
          EXIT;

        REPEAT
          //IF Type = Type::Plant THEN
          IF Type <> Type::Text THEN
            EXIT;

          lvBackorderLineRec := lvPlantOrderLineRec;
          lvBackorderLineRec."Plant Order No." := IBackorderNo;
          lvBackorderLineRec."Line No." := NextBackLineNo;
          lvBackorderLineRec.INSERT(TRUE);

          NextBackLineNo := NextBackLineNo + 10000;

          IF IPlantOrderLineRec.Quantity = 0 THEN  //* Orderregel gaat in geheel over naar backorder
            DELETE(TRUE);                          //* dus tekstregel op oorspronkelijk MO verwijderen.

        UNTIL (NEXT = 0);
      END;
    END;

    PROCEDURE PlantOrderIsBackorder@1100485016(IPlantOrderNo@1100485002 : Code[20]) : Boolean;
    VAR
      PlantOrder@1100485001 : Record 11012556;
    BEGIN
      {
      //.so  This codeunit is in the granule Plant Extented, for permission function moved to Plant Orde table
      IF STRLEN(IPlantOrderNo) < 3 THEN
        EXIT(FALSE);

      lvBackorderSign := GetBackorderSign();
      lvPos := STRPOS(IPlantOrderNo, lvBackorderSign);
      IF (lvPos > 0) AND (lvPos < STRLEN(IPlantOrderNo)) THEN
        EXIT(TRUE);

      EXIT(FALSE);
      } //.eo

      EXIT(PlantOrder.PlantOrderIsBackorder(IPlantOrderNo)); //.n
    END;

    PROCEDURE CheckRentalContractReleased@1100485026();
    VAR
      lvSalesOrderRec@1100485000 : Record 36;
      lvSalesRelOrderRec@1100525001 : Record 11012787;
      lvSalesRemovalRec@1100525002 : Record 11012789;
      lvText002@1100525000 : TextConst 'ENU=Release Plant Order ''%1'' not allowed, related Sales Rental Order ''%2'' is not released in Sales Company ''%3''.';
      lvText003@1100525003 : TextConst 'ENU=Release Plant Order ''%1'' not allowed, removal lines of related Sales Rental Order ''%2'' not released in Sales Company ''%3''.';
      lvText004@1100525004 : TextConst 'ENU=Release Plant Order ''%1'' not allowed, removal lines of related Sales Rental Order ''%2'' (Sales Company ''%3'') not yet recreated in Logistic Company.';
    BEGIN
      IF (OrderRec."Sales Rental Order No." = '') THEN
        EXIT;

      //* Sales Logistics Separated
      lvSalesRelOrderRec.SETCURRENTKEY(Level,"Plant Document No.");
      lvSalesRelOrderRec.SETRANGE(Level, lvSalesRelOrderRec.Level::PlantOrder);
      lvSalesRelOrderRec.SETRANGE("Plant Document No.", OrderRec."No.");
      IF lvSalesRelOrderRec.FINDFIRST THEN BEGIN
        lvSalesOrderRec.CHANGECOMPANY(lvSalesRelOrderRec."Sales Company Name");
        IF lvSalesOrderRec.GET(lvSalesOrderRec."Document Type"::Order, lvSalesRelOrderRec."Sales Order No.") THEN BEGIN
          IF lvSalesOrderRec."Sales Document Type" = lvSalesOrderRec."Sales Document Type"::"Sales Logistics Separated" THEN BEGIN
            IF lvSalesOrderRec.Status <> lvSalesOrderRec.Status::Released THEN
              ERROR(lvText002, OrderRec."No.", lvSalesRelOrderRec."Sales Order No.", lvSalesRelOrderRec."Sales Company Name");
            IF OrderRec.Type = OrderRec.Type::Removal THEN BEGIN
              lvSalesRemovalRec.CHANGECOMPANY(lvSalesRelOrderRec."Sales Company Name");
              lvSalesRemovalRec.SETRANGE("Document No.", lvSalesRelOrderRec."Sales Order No.");
              lvSalesRemovalRec.SETRANGE(Type, lvSalesRemovalRec.Type::Removal);
              lvSalesRemovalRec.SETRANGE("Removal Order Type",lvSalesRemovalRec."Removal Order Type"::"Plant Order");
              lvSalesRemovalRec.SETRANGE("Removal Order No.", OrderRec."No.");
              lvSalesRemovalRec.SETRANGE(Status, lvSalesRemovalRec.Status::Open, lvSalesRemovalRec.Status::Released);
              //* All lines of the PO must be processed (released in sales and create PO in logistics).
              //* If the removal lines are reopend and then modified and released again then PO is filled in the removal lines,
              //* but first a new PO must be created in logistics (then old-PO will be deleted)
              IF lvSalesRemovalRec.FINDFIRST THEN BEGIN
                IF lvSalesRemovalRec.Status = lvSalesRemovalRec.Status::Open THEN
                  ERROR(lvText003, OrderRec."No.", lvSalesRelOrderRec."Sales Order No.", lvSalesRelOrderRec."Sales Company Name")
                ELSE
                  ERROR(lvText004, OrderRec."No.", lvSalesRelOrderRec."Sales Order No.", lvSalesRelOrderRec."Sales Company Name");
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE SetChargePurchRun@1100409002();
    BEGIN
      //C001519
      gChargePurchRun := TRUE;
    END;

    BEGIN
    {
      - Release Plant Order (with backorder for shortage)
        Base is copied from Codeunit 11012553 'Post Plant Order'
      - Reset Released Plant Order
      - Create Purchase Order, from a Plant Order of the type 'Arrival' (Pick List)
        For each Vendor a backorder is created
      - Post Plant Request (create Plant Order)
    }
    END.
  }
}

