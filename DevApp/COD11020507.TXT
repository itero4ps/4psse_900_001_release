OBJECT Codeunit 11020507 OLD IMOS XML DOM Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=No temporary filename could be found';
      FileMgt@1100525500 : Codeunit 419;
      GlobalNameSpace@1000000000 : Text[30];

    PROCEDURE SetNameSpace@1000000003(NameSpaceIn@1000000000 : Text[30]);
    BEGIN
      GlobalNameSpace := NameSpaceIn;
    END;

    PROCEDURE AddElement2@1000000002(VAR DOMNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text[250];Value@1003 : Text[250];VAR CreatedDOMNode@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") Status@1000 : Integer;
    VAR
      TempElement@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      AddElement(DOMNode,Name,Value,GlobalNameSpace,CreatedDOMNode)
    END;

    PROCEDURE AddElement@1(VAR DOMNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text[250];Value@1003 : Text[250];NameSpace@1004 : Text[250];VAR CreatedDOMNode@1005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") Status@1000 : Integer;
    VAR
      TempElement@1006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      TempElement := DOMNode.OwnerDocument.CreateNode('element', Name, NameSpace);

      IF ISNULL(TempElement) THEN BEGIN
        Status := 50;
        EXIT(Status)
      END;

      IF Value <> '' THEN
        TempElement.InnerText := Value;

      DOMNode.AppendChild(TempElement);
      CreatedDOMNode := TempElement;
      CLEAR(TempElement);
      Status := 0;
    END;

    PROCEDURE AddAttribute@2(VAR DOMNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text[250];Value@1003 : Text[250]) Status@1000 : Integer;
    VAR
      TempAttribute@1004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      TempAttribute := DOMNode.OwnerDocument.CreateAttribute(Name);
      IF ISNULL(TempAttribute) THEN BEGIN
        Status := 60;
        EXIT(Status)
      END;

      IF Value <> '' THEN
        TempAttribute.Value := Value;

      DOMNode.Attributes.SetNamedItem(TempAttribute);
      CLEAR(TempAttribute);
    END;

    PROCEDURE GetAttributeValue@33(CurrNode@1004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttributeName@1003 : Text[1024]) AttribValue@1001 : Text[1024];
    VAR
      oTempNode@1002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeAttributes@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
    BEGIN
      NodeAttributes := CurrNode.Attributes;
      oTempNode := NodeAttributes.GetNamedItem(AttributeName);
      IF NOT ISNULL(oTempNode) THEN
        AttribValue := oTempNode.Value;
    END;

    PROCEDURE GetNodeValue@1000000004(RootNode@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1000000001 : Text[250]) NodeValue : Text[1024];
    VAR
      ReturnedNode@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF FindNode(RootNode,NodePath,ReturnedNode) THEN
        EXIT(ReturnedNode.InnerText);
    END;

    PROCEDURE FindNode@3(RootNode@1020 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1000 : Text[250];VAR ReturnedNode@2030 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    BEGIN
      ReturnedNode := RootNode.SelectSingleNode(NodePath);
      IF ISNULL(ReturnedNode) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE FindNodes@4(RootNode@3021 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1000 : Text[250];VAR ReturnedNodeList@4022 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Boolean;
    BEGIN
      ReturnedNodeList := RootNode.SelectNodes(NodePath);
      IF ISNULL(ReturnedNodeList) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE FormatBoolean@1000000000(Value@1000 : Boolean) : Text[1];
    BEGIN
      EXIT(FORMAT(Value,0,2));
    END;

    PROCEDURE FormatInteger@11(Value@1000 : Integer) : Text[30];
    BEGIN
      EXIT(FORMAT(Value));
    END;

    PROCEDURE FormatDecimal@12(Value@1000 : Decimal) : Text[50];
    BEGIN
      EXIT(FORMAT(Value, 0, '<Precision,2:><Sign><Integer><Decimals><Comma,.>'));
    END;

    PROCEDURE FormatDate@13(Value@1000 : Date) : Text[10];
    BEGIN
      EXIT(FORMAT(Value,0,'<Year4>-<Month,2>-<Day,2>'));
    END;

    PROCEDURE FormatTime@1000000001(Value@1000 : Time) : Text[10];
    BEGIN
      EXIT(FORMAT(Value,0,'<Hours24,2><Minutes,2><Seconds,2>'));
    END;

    PROCEDURE FormatXMLDate@1000000006(Text@1000000000 : Text[30]) Date : Date;
    VAR
      Year@1000000001 : Integer;
      Month@1000000002 : Integer;
      Day@1000000003 : Integer;
    BEGIN
      //This function converts a XML Data Type "Date"
      //Text : Represents a calendar date.
      //       The pattern for date is CCYY-MM-DD with optional time zone indicator as allowed for dateTime.
      EVALUATE(Year,DELSTR(Text,5));
      Text := DELSTR(Text,1,5);
      EVALUATE(Month,DELSTR(Text,3));
      Text := DELSTR(Text,1,3);
      EVALUATE(Day,DELSTR(Text,3));
      EXIT(DMY2DATE(Day,Month,Year));
    END;

    PROCEDURE FormatXMLDateTime@1000000007(Text@1000000000 : Text[30]) : DateTime;
    VAR
      Year@1000000001 : Integer;
      Month@1000000002 : Integer;
      Day@1000000003 : Integer;
      TmpTime@1000000007 : Time;
      TmpDate@1000000008 : Date;
    BEGIN
      //This function converts a XML Data Type "Date"
      //Text : Represents a specific instance of time.
      //       The pattern for dateTime is CCYY-MM-DDThh:mm:ss, where
      //       -CC represents the century,Y the year, MM the month, and DD the day,
      //       -The T is the date/time separator and hh, mm, and ss represent hour, minute, and second respectively.

      EVALUATE(Year,DELSTR(Text,5));
      Text := DELSTR(Text,1,5);
      EVALUATE(Month,DELSTR(Text,3));
      Text := DELSTR(Text,1,3);
      EVALUATE(Day,DELSTR(Text,3));
      TmpDate := DMY2DATE(Day,Month,Year);
      Text := DELSTR(Text,1,3); //hh:mm:ss
      EVALUATE(TmpTime,Text);
      EXIT(CREATEDATETIME(TmpDate,TmpTime))
    END;

    PROCEDURE FormatXMLInteger@1000000005(Text@1000000000 : Text[30]) Integer : Integer;
    BEGIN
      //This function converts a XML Data Type "Integer"
      //Text  :Represents a sequence of decimal digits with an optional leading sign (+ or -). This data type is derived from decimal.
      IF Text <> '' THEN
        EVALUATE(Integer,Text);
    END;

    PROCEDURE FormatXMLDecimal@1000000008(Text@1000000000 : Text[30]) TmpDecimal : Decimal;
    BEGIN
      //This function converts a XML Data Type "Integer"
      //Text  :Represents arbitrary precision numbers.
      IF Text <> '' THEN
        EVALUATE(TmpDecimal,Text);
    END;

    PROCEDURE ValidateXMLDocument@10(xmldom@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";xmlschema@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";targetNamespace@1000000004 : Text[1024];VAR ParseError@1000000002 : Text[1024]) : Boolean;
    VAR
      Schema@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMDocument@1000000006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDomParseError@1000000001 : Text;
      SchemaCache@1000000003 : Text;
    BEGIN
      //TODO KK CREATE(SchemaCache, FALSE, TRUE);
      Schema := Schema.XmlDocument;
      //TODO KK xmlschema.Save(Schema);

      //TODO KK SchemaCache.add(targetNamespace,Schema);

      XMLDOMDocument := XMLDOMDocument.XmlDocument;
      //TODO KK XMLDOMDocument.async := FALSE;
      //TODO KK XMLDOMDocument.schemas := SchemaCache;
      //TODO KKXMLDOMDocument.Load(xmldom);
      //TODO KK IF (XMLDOMDocument.parseError.errorCode <> 0) THEN
      //TODO KK  BEGIN
      //TODO KK    XMLDomParseError := XMLDOMDocument.parseError;
      //TODO KK    ParseError := XMLDomParseError.reason;
      //TODO KK    EXIT(FALSE)
      //TODO KK  END ELSE
      //TODO KK    EXIT(TRUE)
    END;

    PROCEDURE ValidateAgreementXMLDocument@1100485000(PartnerAgreement@1000000000 : Record 11020547;XMLDOMDocument@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ParseError@1000000003 : Text[1024]) : Boolean;
    VAR
      xmlschema@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDOMManagement4PS@1100525000 : Codeunit 11020220;
    BEGIN
      IF PartnerAgreement."Apply XML Schema" THEN
        BEGIN
          IF FileExists(PartnerAgreement."XML Schema File Name") THEN
            BEGIN
              xmlschema := xmlschema.XmlDocument;
              IF GUIALLOWED THEN
                XMLDOMManagement4PS.LoadXMLFromClientFile(
                  xmlschema, PartnerAgreement."XML Schema File Name", FALSE)
              ELSE
                xmlschema.Load(PartnerAgreement."XML Schema File Name");
              EXIT(ValidateXMLDocument(XMLDOMDocument,xmlschema,PartnerAgreement."XML Schema Target Namespace",ParseError));
            END;
        END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckSchemeAutomation@1100485001() : Boolean;
    VAR
      SchemaCache@1100485000 : Text;
    BEGIN
      //* to check if MSXML4.0 has been installed
      //TODO KK EXIT(CREATE(SchemaCache, FALSE, TRUE));
    END;

    PROCEDURE FileExists@1100525007(FileName@1100525000 : Text) : Boolean;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(FileMgt.ClientFileExists(FileName))
      ELSE
        EXIT(EXISTS(FileName));
    END;

    BEGIN
    {
      !! Use cu11020220/11020221 in stead of this one !!
      This Codeunit is obsolete, therefore the TODO's have not been solved.
    }
    END.
  }
}

