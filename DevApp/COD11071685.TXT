OBJECT Codeunit 11071685 Dispatch Interface
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            ErrorMessage@1100528600 : Text;
          BEGIN
            IF GUIALLOWED THEN BEGIN
              TestDispatchWoonActive;
              TestCurrentyNotFetching;
              IF NOT NeedNewFetching THEN
                ERROR(Text012);
            END;

            IF IsDispatchWoonActive AND NOT IsCurrentlyFetching AND NeedNewFetching THEN BEGIN
              SetCurrentlyFetching(TRUE);
              IF FetchNewOrders(ErrorMessage) THEN
                IF FetchLogbookEntries(ErrorMessage) THEN
                  UpdateLastDateTimeFetched;
              SetCurrentlyFetching(FALSE);
            END;

            IF ErrorMessage <> '' THEN
              ERROR(ErrorMessage);

            IF GUIALLOWED THEN
              MESSAGE(Text013, NoOfCallsCreated, NoOfLogbookEntriesCreated);
          END;

  }
  CODE
  {
    VAR
      ConsumedWebService@1100528610 : Record 11229797;
      ConsumedWebServiceLine@1100528609 : Record 11229798;
      ServiceSetup@1100528611 : Record 11012800;
      DispatchSetup@1100528614 : Record 11072270;
      DispatchUserSetup@1100528619 : Record 11072271;
      ConsumedWebServiceMgt@1100528615 : Codeunit 11229310;
      XMLDOMMgt4PS@1100528613 : Codeunit 11020220;
      XMLFormat4PS@1100528612 : Codeunit 11020221;
      RequestXML@1100528607 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestNamespaceManager@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      ResponseXML@1100528605 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ResponseNamespaceManager@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      RootNode@1100528603 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundNode@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeList@1100528600 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      Text000@1100528608 : TextConst 'ENU=Dispatch Woon is not active';
      Text001@1100528616 : TextConst 'ENU=Damage Date: %1';
      Text002@1100528617 : TextConst 'ENU=Document %2 is not related to a Service Order';
      SessionNo@1100528618 : Text;
      Text003@1100528620 : TextConst 'ENU=Order not in kind';
      Text004@1100528621 : TextConst 'ENU=No Address Found';
      Text005@1100528622 : TextConst 'ENU=No Visiting Address Found';
      Text006@1100528623 : TextConst 'ENU=Customer for Dispatch Relation %1 - %2 not found';
      Text007@1100528624 : TextConst 'ENU=Network Company: %1';
      Text008@1100528625 : TextConst 'ENU=Activity: %1';
      Text009@1100528626 : TextConst 'ENU=Network Type: %1';
      Text010@1100528627 : TextConst 'ENU=Explanation:';
      Text011@1100528628 : TextConst 'ENU=No Logbook Lines found';
      LogBookEntryLineType@1100528629 : 'Message,Reaction';
      Text012@1100528630 : TextConst 'ENU=Can not rerun Fetching Orders that quickly, please try again later';
      Text013@1100528631 : TextConst 'ENU=%1 Orders and %2 Logbook Entries fetched';
      NoOfCallsCreated@1100528632 : Integer;
      NoOfLogbookEntriesCreated@1100528633 : Integer;
      Text014@1100525001 : TextConst 'ENU=Document %1 is not an image';
      Text015@1100525000 : TextConst 'ENU=Document %1 is an image not a document';
      Text016@1100528634 : TextConst 'ENU=Damage Cause: %1';
      Text017@1100528635 : TextConst 'ENU=Description: %1';
      Text018@1100528636 : TextConst 'ENU=Error returned by Dispatch: %1';

    LOCAL PROCEDURE "----- General -----"@1100528640();
    BEGIN
    END;

    LOCAL PROCEDURE GetDispatchFileAndOrderNo@1100528641(IOrderNoCustomer@1100528600 : Text[20];VAR OFileNo@1100528601 : Integer;VAR OOrderNo@1100528602 : Integer) : Boolean;
    VAR
      FileNoText@1100528603 : Text;
      OrderNoText@1100528604 : Text;
      SlashPos@1100528605 : Integer;
    BEGIN
      OFileNo := 0;
      OOrderNo := 0;
      SlashPos := STRPOS(IOrderNoCustomer, '/');
      IF SlashPos = 0 THEN
        EXIT;
      FileNoText := COPYSTR(IOrderNoCustomer, 1, SlashPos -1);
      OrderNoText := COPYSTR(IOrderNoCustomer, SlashPos +1, STRLEN(IOrderNoCustomer));
      EVALUATE(OFileNo, FileNoText);
      EVALUATE(OOrderNo, OrderNoText);
      EXIT(TRUE);
    END;

    PROCEDURE GetDispatchFileAndOrderNoFromServiceOrder@1100528623(IServiceOrder@1100528600 : Record 11012823;VAR OFileNo@1100528601 : Integer;VAR OOrderNo@1100528602 : Integer) : Boolean;
    BEGIN
      IServiceOrder.TESTFIELD("Order No. Customer");
      EXIT(GetDispatchFileAndOrderNo(IServiceOrder."Order No. Customer", OFileNo, OOrderNo));
    END;

    LOCAL PROCEDURE GetDispatchFileAndOrderNoFromServiceCall@1100528642(IServiceCall@1100528600 : Record 11012822;VAR OFileNo@1100528601 : Integer;VAR OOrderNo@1100528602 : Integer) : Boolean;
    BEGIN
      IServiceCall.TESTFIELD("Order No. Customer");
      EXIT(GetDispatchFileAndOrderNo(IServiceCall."Order No. Customer", OFileNo, OOrderNo));
    END;

    LOCAL PROCEDURE BuildRequestMessage@1100528671(IRequestMessage@1100528601 : Text);
    VAR
      RequestMessage@1100528600 : Text;
    BEGIN
      XMLDOMMgt4PS.FindNodeNs(RequestXML, './/'+ConsumedWebServiceLine."Prefix Method Namespace"+':'+
        ConsumedWebServiceLine."Method Name", RootNode, RequestNamespaceManager);
      XMLDOMMgt4PS.AddElement(RootNode, 'strXmlIn', IRequestMessage, '', NewNode);
    END;

    LOCAL PROCEDURE IsCurrentlyFetching@1100528630() : Boolean;
    BEGIN
      DispatchSetup.GET;
      EXIT(DispatchSetup."Fetching Proces Running");
    END;

    LOCAL PROCEDURE TestCurrentyNotFetching@1100528657();
    BEGIN
      DispatchSetup.GET;
      DispatchSetup.TESTFIELD("Fetching Proces Running", FALSE);
    END;

    LOCAL PROCEDURE SetCurrentlyFetching@1100528652(INowFetching@1100528600 : Boolean);
    BEGIN
      DispatchSetup.GET;
      DispatchSetup.VALIDATE("Fetching Proces Running", INowFetching);
      DispatchSetup.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE NeedNewFetching@1100528616() : Boolean;
    BEGIN
      DispatchSetup.GET;
      IF DispatchSetup."Last Date/Time Fetched" = 0DT THEN
        EXIT(TRUE);
      IF (CURRENTDATETIME - DispatchSetup."Last Date/Time Fetched" >= 15 * 60 * 1000) THEN //Restriction of Dispatch
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateLastDateTimeFetched@1100528604();
    BEGIN
      DispatchSetup.GET;
      DispatchSetup."Last Date/Time Fetched" := CURRENTDATETIME;
      DispatchSetup.MODIFY;
    END;

    LOCAL PROCEDURE "----- Fetching New Orders -----"@1100528609();
    BEGIN
    END;

    LOCAL PROCEDURE FetchNewOrders@1100528600(VAR OErrorMessage@1100528604 : Text) : Boolean;
    VAR
      FileNode@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      MessageReferenceNo@1100528600 : Integer;
      FileNo@1100528603 : Integer;
    BEGIN
      IF NOT IsDispatchWoonActive THEN
        EXIT;

      WHILE FetchFileNode(FileNode, MessageReferenceNo, OErrorMessage) DO BEGIN
        FileNo := GetFileNo(FileNode);
        AddDispatchFile(FileNo);
        ProcessFileNode(FileNode, FileNo);
        COMMIT;
        IF MessageReferenceNo <> 0 THEN
          SLEEP(5000); //Restriction of Dispatch
      END;
      EXIT(OErrorMessage = '');
    END;

    LOCAL PROCEDURE FetchFileNode@1100528601(VAR OFileNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR IOMessageReferenceNo@1100528601 : Integer;VAR OErrorMessage@1100528600 : Text) : Boolean;
    BEGIN
      TestDispatchWoonActive;
      SetGlobalVars('DISPATCH', 'postXML');

      ConsumedWebServiceMgt.CreateRequest(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);

      BuildRequestMessage(CreateRequestOrderMessage(IOMessageReferenceNo));
      IF ConsumedWebServiceMgt.SendCWS(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML, ResponseNamespaceManager, SetMessageId)
      THEN
        EXIT(GetFileNode(ResponseXML, ResponseNamespaceManager, OFileNode, IOMessageReferenceNo, OErrorMessage));
    END;

    PROCEDURE IsDispatchWoonActive@1100528607() : Boolean;
    VAR
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      EXIT(ServiceSetup."Dispatch Woon Active");
    END;

    PROCEDURE TestDispatchWoonActive@1100528606();
    BEGIN
      IF NOT IsDispatchWoonActive THEN
        ERROR(Text000);
    END;

    LOCAL PROCEDURE SetGlobalVars@1100528302(IConsumedWebServiceCode@1100528300 : Code[20];IMethodName@1100528301 : Text[30]);
    BEGIN
      IF NOT ISNULL(RequestXML) THEN
        CLEAR(RequestXML);
      IF NOT ISNULL(RequestNamespaceManager) THEN
        CLEAR(RequestNamespaceManager);
      IF NOT ISNULL(ResponseXML) THEN
        CLEAR(ResponseXML);
      IF NOT ISNULL(ResponseNamespaceManager) THEN
        CLEAR(ResponseNamespaceManager);

      ServiceSetup.GET;
      DispatchSetup.GET;
      DispatchUserSetup.GET(USERID);

      ConsumedWebService.GET(IConsumedWebServiceCode);
      ConsumedWebServiceLine.SETRANGE("Web Service Code", IConsumedWebServiceCode);
      ConsumedWebServiceLine.SETRANGE("Method Name", IMethodName);
      ConsumedWebServiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateRequestOrderMessage@1100528608(IConfirmReference@1100528601 : Integer) : Text;
    VAR
      EmbeddedXML@1100528600 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      HeaderNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DetailNode@1100528603 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      MessageNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      {
      <DispatchRequest>
        <Header>
          <System>99034</System>
          <Action>DispatchWoonOpvragenBericht37</Action>
          <Username>inlogcode</Username>
          <Password>wachtwoord</Password>
        </Header>
        <Detail>
          <Bericht>
            <Berichtsoort>SB0001</Berichtsoort>
            <ReferentieBevestiging>90123456</ReferentieBevestiging>
          </Bericht>
        </Detail>
      </DispatchRequest>
      }

      EmbeddedXML := EmbeddedXML.XmlDocument;
      RootNode := EmbeddedXML.CreateNode('element', 'DispatchRequest', '');
      EmbeddedXML.AppendChild(RootNode);

      XMLDOMMgt4PS.AddElement(RootNode, 'Header', '', '', HeaderNode);
      XMLDOMMgt4PS.AddElement(RootNode, 'Detail', '', '', DetailNode);
      XMLDOMMgt4PS.AddElement(DetailNode, 'Bericht', '', '', MessageNode);

      XMLDOMMgt4PS.AddElement(HeaderNode, 'System', XMLFormat4PS.FormatInteger(DispatchSetup."System ID"), '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Action', 'DispatchWoonOpvragenBericht37', '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Username', ConsumedWebService.Login, '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Password', ConsumedWebService.Password, '', NewNode);

      XMLDOMMgt4PS.AddElement(MessageNode, 'Berichtsoort', 'SB0002', '', NewNode);
      IF IConfirmReference <> 0 THEN
        XMLDOMMgt4PS.AddElement(MessageNode, 'ReferentieBevestiging', XMLFormat4PS.FormatInteger(IConfirmReference), '', NewNode);

      EXIT(EmbeddedXML.InnerXml);
    END;

    LOCAL PROCEDURE GetFileNode@1100528610(IResponseXML@1100528601 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";IResponseNamespaceManager@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR OFileNode@1100528609 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR OMessageReferenceNo@1100528607 : Integer;VAR OErrorMessage@1100528610 : Text) : Boolean;
    VAR
      ResultXML@1100528602 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DispatchResponseNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DispatchResponseMessageNode@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DataNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReturnCode@1100528603 : Integer;
      DispatchOrderXML@1100528608 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      OMessageReferenceNo := 0;
      OErrorMessage := '';
      ConsumedWebServiceMgt.CheckResponseSoapFault(IResponseXML, IResponseNamespaceManager);
      IF XMLDOMMgt4PS.FindNodeNs(IResponseXML, './/' + 'Result', DispatchResponseNode, IResponseNamespaceManager) THEN BEGIN
        ResultXML := ResultXML.XmlDocument;
        ResultXML.LoadXml(XMLDOMMgt4PS.DecodeHtmlString(DispatchResponseNode.InnerXml));

        XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Returncode'), ReturnCode);
        IF ReturnCode <> 0 THEN BEGIN
          IF XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Melding/Type') = 'E' THEN
            OErrorMessage := STRSUBSTNO(Text018, XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Melding/Omschrijving'));
        END ELSE
          IF XMLDOMMgt4PS.FindNode(ResultXML, './/' + 'Detail/Bericht', DispatchResponseMessageNode) THEN BEGIN
            XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(DispatchResponseMessageNode, './/' + 'Referentie'), OMessageReferenceNo);
            XMLDOMMgt4PS.FindNode(DispatchResponseMessageNode, './/' + 'Data', DataNode);
            DispatchOrderXML := DispatchOrderXML.XmlDocument;
            DispatchOrderXML.LoadXml(XMLDOMMgt4PS.DecodeHtmlString(DataNode.InnerXml));
            XMLDOMMgt4PS.FindNode(DispatchOrderXML, './/' + 'Dossier', OFileNode);
            EXIT(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE GetFileNo@1100528635(IFileNode@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") FileNumber : Integer;
    BEGIN
      XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(IFileNode, './/' + 'Dossiernummer'), FileNumber);
    END;

    LOCAL PROCEDURE ProcessFileNode@1100528605(VAR IFileNode@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";IFileNo@1100528610 : Integer) : Boolean;
    VAR
      ServiceLocation@1100528614 : Record 11012801;
      ServiceCall@1100528602 : Record 11012822;
      OrderNode@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF GetServiceLocationByOrderAddress(IFileNode, IFileNo, ServiceLocation) THEN BEGIN
        XMLDOMMgt4PS.FindNode(IFileNode, './/' + 'Opdracht', OrderNode);
        IF XMLDOMMgt4PS.FindNodeText(IFileNode, './/' + 'Werkzaamheid/Code') <> 'MT1008' THEN
          AddDispatchFileMessage(IFileNo, Text003);
        EXIT(CreateServiceCall(IFileNode, IFileNo, ServiceLocation, ServiceCall));
      END;
    END;

    LOCAL PROCEDURE GetServiceLocationByOrderAddress@1100528624(IRootNode@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";IFileNo@1100528611 : Integer;VAR OServiceLocation@1100528601 : Record 11012801) : Boolean;
    VAR
      ObjectImpWorkSheetMgt@1100528609 : Codeunit 11012839;
      AddressNode@1100528608 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      VisitingAddressNode@1100528607 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Address@1100528606 : Text[50];
      HouseNo@1100528605 : Code[10];
      HouseNoExt@1100528604 : Code[10];
      PostCode@1100528603 : Code[10];
      City@1100528602 : Text[50];
      Name@1100528610 : Text[50];
    BEGIN
      IF NOT GetAdressNode(IRootNode, AddressNode) THEN
        AddDispatchFileMessage(IFileNo, Text004);
      IF NOT XMLDOMMgt4PS.FindNode(AddressNode, './/' + 'Bezoekadres', VisitingAddressNode) THEN
        AddDispatchFileMessage(IFileNo, Text005);

      Address := XMLDOMMgt4PS.FindNodeText(VisitingAddressNode, './/' + 'Straat');
      HouseNo := XMLDOMMgt4PS.FindNodeText(VisitingAddressNode, './/' + 'Huisnummer');
      HouseNoExt := XMLDOMMgt4PS.FindNodeText(VisitingAddressNode, './/' + 'Toevoeging');
      PostCode := XMLDOMMgt4PS.FindNodeText(VisitingAddressNode, './/' + 'Postcode');
      ObjectImpWorkSheetMgt.NormalizePostCode(PostCode, '', PostCode);
      City := XMLDOMMgt4PS.FindNodeText(VisitingAddressNode, './/' + 'Plaats');
      Name := XMLDOMMgt4PS.FindNodeText(AddressNode, './/' + 'Naam');

      IF NOT FindServiceLocation(PostCode, HouseNo, HouseNoExt, OServiceLocation) THEN BEGIN
        OServiceLocation.Name := Name;
        OServiceLocation.Address := Address;
        OServiceLocation.City := City;
        OServiceLocation."Post Code" := PostCode;
        OServiceLocation."House No." := HouseNo;
        OServiceLocation."House No. Ext." := HouseNoExt;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindServiceLocation@1100528615(IPostCode@1100528602 : Code[10];IHouseNo@1100528600 : Code[10];IHouseNoExt@1100528601 : Code[10];VAR OServiceLocation@1100528604 : Record 11012801) : Boolean;
    BEGIN
      OServiceLocation.RESET;
      OServiceLocation.SETCURRENTKEY("Post Code");
      OServiceLocation.SETRANGE("Post Code", IPostCode);
      OServiceLocation.SETRANGE("House No.", IHouseNo);
      OServiceLocation.SETRANGE("House No. Ext.", IHouseNoExt);
      IF NOT OServiceLocation.FINDFIRST THEN
        CLEAR(OServiceLocation);
      EXIT(OServiceLocation."No." <> '');
    END;

    LOCAL PROCEDURE CreateServiceCall@1100528621(VAR IFullOrderXML@1100528607 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";IFileNo@1100528613 : Integer;IServiceLocation@1100528600 : Record 11012801;VAR OServiceCall@1100528606 : Record 11012822) : Boolean;
    VAR
      DispatchSetup@1100528601 : Record 11072270;
      ServiceText@1100528612 : Record 11012882;
      DispatchPrincipal@1100528614 : Record 11072274;
      OrderNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CallNode@1100528608 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DamageNode@1100528610 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PrincipalNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PhoneNode@1100528617 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AddressNode@1100528618 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      OrderNumber@1100528603 : Integer;
      OrderDateTime@1100528605 : DateTime;
      Priority@1100528609 : Boolean;
      LastPossibleEndingDate@1100528611 : Date;
      RelationNo@1100528615 : Integer;
      Explanation@1100528616 : Text;
    BEGIN
      XMLDOMMgt4PS.FindNode(IFullOrderXML, './/' + 'Opdracht', OrderNode);
      XMLDOMMgt4PS.FindNode(IFullOrderXML, './/' + 'Melding', CallNode);
      XMLDOMMgt4PS.FindNode(IFullOrderXML, './/' + 'Schade', DamageNode);
      XMLDOMMgt4PS.FindNode(IFullOrderXML, './/' + 'OpdrachtgeverUitvoerend', PrincipalNode);
      XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(OrderNode, './/' + 'Nummer'), OrderNumber);
      XMLFormat4PS.EvaluateDateTime(XMLDOMMgt4PS.FindNodeText(OrderNode, './/' + 'OpdrachtDatumTijd'), OrderDateTime);
      XMLFormat4PS.EvaluateDate(XMLDOMMgt4PS.FindNodeText(OrderNode, './/' + 'UitersteAfmelddatum'), LastPossibleEndingDate);
      Priority := XMLDOMMgt4PS.FindNodeText(CallNode, './/' + 'Spoed') = 'J';

      XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(PrincipalNode, './/' + 'Relatienummer'), RelationNo);
      IF NOT DispatchPrincipal.GET(RelationNo) THEN
        AddDispatchFileMessage(IFileNo, STRSUBSTNO(Text006, RelationNo, XMLDOMMgt4PS.FindNodeText(PrincipalNode, './/' + 'Naam')));

      DispatchSetup.GET;

      OServiceCall.INIT;
      OServiceCall.Origin := OServiceCall.Origin::Dispatch;
      OServiceCall.INSERT(TRUE);

      OServiceCall.VALIDATE("Call Kind", DispatchSetup."Call Kind");
      OServiceCall.VALIDATE("Call Type", DispatchSetup."Call Type");
      OServiceCall.VALIDATE("Order Kind", DispatchSetup."Order Kind");
      IF Priority THEN
        OServiceCall.VALIDATE(Priority, DispatchSetup."Priority Dispatch Prio Yes")
      ELSE
        OServiceCall.VALIDATE(Priority, DispatchSetup."Priority Dispatch Prio No");
      IF DispatchPrincipal."Customer No." <> '' THEN
        OServiceCall.VALIDATE("Customer No.", DispatchPrincipal."Customer No.");
      IF IServiceLocation."No." <> '' THEN
        OServiceCall.VALIDATE("Service Location No.", IServiceLocation."No.")
      ELSE BEGIN
        OServiceCall.VALIDATE(Name, IServiceLocation.Name);
        OServiceCall.VALIDATE(Address, STRSUBSTNO('%1 %2 %3', IServiceLocation.Address, IServiceLocation."House No.", IServiceLocation."House No. Ext."));
        OServiceCall.VALIDATE(City, IServiceLocation.City);
        OServiceCall.VALIDATE("Post Code", IServiceLocation."Post Code");
        OServiceCall.VALIDATE("House No.", IServiceLocation."House No.");
        OServiceCall.VALIDATE("House No. Ext.", IServiceLocation."House No. Ext.");
      END;

      OServiceCall."Order No. Customer" := STRSUBSTNO('%1/%2', IFileNo, OrderNumber);
      OServiceCall.VALIDATE("Receiving Date", DT2DATE(OrderDateTime));
      OServiceCall.VALIDATE("Receiving Time", DT2TIME(OrderDateTime));
      OServiceCall.VALIDATE("Your Reference", XMLDOMMgt4PS.FindNodeText(DamageNode, './/' + 'Schadenummer'));
      OServiceCall.VALIDATE("Last Possible Ending Date", LastPossibleEndingDate);
      OServiceCall.VALIDATE(Description, COPYSTR(XMLDOMMgt4PS.FindNodeText(DamageNode, './/' + 'Schadeoorzaak/Omschrijving'), 1, MAXSTRLEN(OServiceCall.Description)));

      IF GetAdressNode(IFullOrderXML, AddressNode) THEN BEGIN
        OServiceCall.VALIDATE("Phone No.", COPYSTR(GetPhoneNoByType(AddressNode, 0), 1, MAXSTRLEN(OServiceCall."Phone No.")));
        OServiceCall.VALIDATE("Phone No. 2", COPYSTR(GetPhoneNoByType(AddressNode, 1), 1, MAXSTRLEN(OServiceCall."Phone No. 2")));
        OServiceCall.VALIDATE("Mobile Phone No.", COPYSTR(GetPhoneNoByType(AddressNode, 2), 1, MAXSTRLEN(OServiceCall."Mobile Phone No.")));
        OServiceCall.VALIDATE("E-Mail", COPYSTR(XMLDOMMgt4PS.FindNodeText(AddressNode, './/' + 'E-mailadres'), 1, MAXSTRLEN(OServiceCall."E-Mail")));
      END;
      OServiceCall.MODIFY(TRUE);

      AddServiceText(OServiceCall."No.", 0, STRSUBSTNO(Text016, XMLDOMMgt4PS.FindNodeText(DamageNode, './/' + 'Schadeoorzaak/Omschrijving')));
      AddServiceText(OServiceCall."No.", 0, STRSUBSTNO(Text017, XMLDOMMgt4PS.FindNodeText(DamageNode, './/' + 'SchadeoorzaakOmschrijving')));

      AddServiceText(OServiceCall."No.", 1, STRSUBSTNO(Text001, XMLDOMMgt4PS.FindNodeText(DamageNode, './/' + 'Schadedatum')));
      AddServiceText(OServiceCall."No.", 1, STRSUBSTNO(Text007, XMLDOMMgt4PS.FindNodeText(OrderNode, './/' + 'Netwerkbedrijf/Naam')));
      AddServiceText(OServiceCall."No.", 1, STRSUBSTNO(Text008, XMLDOMMgt4PS.FindNodeText(CallNode, './/' + 'Werkzaamheid/Omschrijving')));
      AddServiceText(OServiceCall."No.", 1, STRSUBSTNO(Text009, XMLDOMMgt4PS.FindNodeText(OrderNode, './/' + 'Netwerksoort/Omschrijving')));
      Explanation := XMLDOMMgt4PS.FindNodeText(OrderNode, './/' + 'ToelichtingInschakelen');
      IF Explanation <> '' THEN BEGIN
        AddServiceText(OServiceCall."No.", 1, Text010);
        AddServiceText(OServiceCall."No.", 1, Explanation);
      END;

      NoOfCallsCreated += 1;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddServiceText@1100528622(IServiceCallNo@1100528600 : Code[20];IServiceTextType@1100528607 : 'Problem Text,Internal Text';IServiceText@1100528601 : Text);
    VAR
      ServiceText@1100528602 : Record 11012882;
      TextEditor@1100528604 : Codeunit 11012001;
      ServiceTextArray@1100528605 : ARRAY [10] OF Text[80];
      LineNo@1100528603 : Integer;
      LineIndex@1100528606 : Integer;
      TableField@1100528608 : Integer;
    BEGIN
      IF IServiceText = '' THEN
        EXIT;
      ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Call");
      ServiceText.SETRANGE("No.", IServiceCallNo);
      CASE IServiceTextType OF
        IServiceTextType::"Problem Text":
          TableField := 60;
        IServiceTextType::"Internal Text":
          TableField := 70;
      END;
      ServiceText.SETRANGE("Table Field", TableField);
      IF ServiceText.FINDLAST THEN
        LineNo := ServiceText."Line No.";

      TextEditor.BreakDescription(IServiceText, 80, TRUE, ServiceTextArray);

      LineIndex := 1;
      WHILE ServiceTextArray[LineIndex] <> '' DO BEGIN
        ServiceText.INIT;
        ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
        ServiceText."No." := IServiceCallNo;
        ServiceText."Table Field" := TableField;
        LineNo += 10000;
        ServiceText."Line No." := LineNo;
        ServiceText.VALIDATE(Comment, ServiceTextArray[LineIndex]);
        ServiceText.INSERT(TRUE);
        LineIndex += 1;
      END;
    END;

    LOCAL PROCEDURE GetAdressNode@1100528654(IRootNode@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR OAddressNode@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    BEGIN
      IF XMLDOMMgt4PS.FindNode(IRootNode, './/' + 'Adres[Soort[Code = "SA0002"]]', OAddressNode) THEN
        EXIT(TRUE);
      IF XMLDOMMgt4PS.FindNode(IRootNode, './/' + 'Adres[Soort[Code = "SA0001"]]', OAddressNode) THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPhoneNoByType@1100528660(IAddressNode@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";IPhoneType@1100528600 : 'Phone No.,Phone No. Work,Mobile Phone No.') : Text;
    VAR
      PhoneNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      CASE IPhoneType OF
        IPhoneType::"Phone No.":
          EXIT(XMLDOMMgt4PS.FindNodeText(IAddressNode, './/' + 'Telefoonnummers/Telefoonnummer[Soort[Code = "CC0001"]]/Nummer'));
        IPhoneType::"Phone No. Work":
          EXIT(XMLDOMMgt4PS.FindNodeText(IAddressNode, './/' + 'Telefoonnummers/Telefoonnummer[Soort[Code = "CC0017"]]/Nummer'));
        IPhoneType::"Mobile Phone No.":
          EXIT(XMLDOMMgt4PS.FindNodeText(IAddressNode, './/' + 'Telefoonnummers/Telefoonnummer[Soort[Code = "CC0003"]]/Nummer'));
      END;
    END;

    LOCAL PROCEDURE "----- File Message -----"@1100528631();
    BEGIN
    END;

    LOCAL PROCEDURE AddDispatchFile@1100528629(IFileNo@1100528600 : Integer);
    VAR
      DispatchFile@1100528601 : Record 11072272;
    BEGIN
      IF NOT DispatchFile.GET(IFileNo) THEN BEGIN
        DispatchFile.VALIDATE("No.", IFileNo);
        DispatchFile.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE AddDispatchFileMessage@1100528628(IFileNo@1100528600 : Integer;IErrorMessage@1100528601 : Text);
    VAR
      DispatchFileMessage@1100528602 : Record 11072273;
      LineNo@1100528603 : Integer;
    BEGIN
      DispatchFileMessage.SETRANGE("File No.", IFileNo);
      IF DispatchFileMessage.FINDLAST THEN
        LineNo := DispatchFileMessage."Line No.";
      LineNo += 1;
      DispatchFileMessage."File No." := IFileNo;
      DispatchFileMessage."Line No." := LineNo;
      DispatchFileMessage."Error Message" := COPYSTR(IErrorMessage, 1, MAXSTRLEN(DispatchFileMessage."Error Message"));
      DispatchFileMessage.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ShowDispatchFileCard@1100528634(IFileNo@1100528600 : Integer);
    VAR
      DispatchFile@1100528601 : Record 11072272;
      OrderNo@1100528603 : Integer;
    BEGIN
      DispatchFile.GET(IFileNo);
      PAGE.RUNMODAL(PAGE::"Dispatch File", DispatchFile);
    END;

    PROCEDURE ShowDispatchFileCardByServiceOrder@1100528638(IServiceOrder@1100528600 : Record 11012823);
    VAR
      DispatchFile@1100528601 : Record 11072272;
      FileNo@1100528602 : Integer;
      OrderNo@1100528603 : Integer;
    BEGIN
      TestDispatchWoonActive;
      GetDispatchFileAndOrderNoFromServiceOrder(IServiceOrder, FileNo, OrderNo);
      DispatchFile.GET(FileNo);
      PAGE.RUNMODAL(PAGE::"Dispatch File", DispatchFile);
    END;

    PROCEDURE ShowDispatchFileCardByServiceCall@1100528639(IServiceCall@1100528600 : Record 11012822);
    VAR
      DispatchFile@1100528601 : Record 11072272;
      FileNo@1100528602 : Integer;
      OrderNo@1100528603 : Integer;
    BEGIN
      TestDispatchWoonActive;
      GetDispatchFileAndOrderNoFromServiceCall(IServiceCall, FileNo, OrderNo);
      DispatchFile.GET(FileNo);
      PAGE.RUNMODAL(PAGE::"Dispatch File", DispatchFile);
    END;

    LOCAL PROCEDURE "----- Adding Photos -----"@1100528611();
    BEGIN
    END;

    PROCEDURE AddPhotoToFile@1100528612(VAR IODocumentProperties@1100528600 : Record 11012746;VAR OErrorMessage@1100528605 : Text) : Boolean;
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      CommentLine@1100528601 : Record 97;
      DocumentProperties@1100528608 : Record 11012746;
      ServiceOrderNo@1100528606 : Code[20];
      DispatchFileNo@1100528603 : Integer;
      DispatchOrderNo@1100528604 : Integer;
      RecRef@1100528607 : RecordRef;
      Processed@1100528609 : Boolean;
    BEGIN
      TestDispatchWoonActive;
      IODocumentProperties.TESTFIELD("External Document");
      IODocumentProperties.TESTFIELD("Sent to Dispatch on", 0DT);
      IODocumentProperties.TESTFIELD("Send to Dispatch", TRUE);
      IF NOT IODocumentProperties.IsDocumentPicture THEN
        ERROR(Text014, IODocumentProperties."Document No.");

      ServiceOrderNo := GetServiceOrderNoFromDocumentProperty(IODocumentProperties);
      IF NOT ServiceOrder.GET(ServiceOrderNo) THEN
        EXIT;
      GetDispatchFileAndOrderNoFromServiceOrder(ServiceOrder, DispatchFileNo, DispatchOrderNo);

      SetGlobalVars('DISPATCH', 'postXML');

      ConsumedWebServiceMgt.CreateRequest(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);

      BuildRequestMessage(CreateRequestAddPhotoMessage(IODocumentProperties, DispatchFileNo, DispatchOrderNo));
      IF ConsumedWebServiceMgt.SendCWS(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML, ResponseNamespaceManager, SetMessageId)
      THEN BEGIN
        Processed := ProcessAddPhotoResponse(ResponseXML, ResponseNamespaceManager, IODocumentProperties, OErrorMessage);
        RecRef.GETTABLE(IODocumentProperties);
        IF RecRef.ISTEMPORARY THEN BEGIN
          IF DocumentProperties.GET(IODocumentProperties."No.") THEN BEGIN
            DocumentProperties."Sent to Dispatch on" := IODocumentProperties."Sent to Dispatch on";
            DocumentProperties.MODIFY(TRUE);
          END;
        END;
        EXIT(Processed);
      END;
    END;

    LOCAL PROCEDURE CreateRequestAddPhotoMessage@1100528618(IDocumentProperties@1100528610 : Record 11012746;IFileNo@1100528607 : Integer;IOrderNo@1100528608 : Integer) : Text;
    VAR
      EmbeddedXML@1100528600 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      HeaderNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DetailNode@1100528603 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FileNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      OrderNode@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PhotoNode@1100528609 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FileContentsBase64@1100528611 : Text;
      ErrorMessage@1100528612 : Text;
      DocumentComment@1100528613 : Text;
    BEGIN
      {
      <DispatchRequest>
        <Header>
          <System>99034</System>
          <Action>DispatchWoonToevoegenFoto40</Action>
          <Username>inlogcode</Username>
          <Password>wachtwoord</Password>
        </Header>
        <Detail>
          <Dossier>
            <Dossiernummer>30212345</Dossiernummer>
            <Opdracht>
              <Nummer>2</Nummer>
              <Foto>
                <Bestandsnaam>6811AN.jpg</Bestandsnaam>
                <Object>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</Object>
                <Opmerking>Scheur en vochtplekken zichtbaar in muur</Opmerking>
                <OpnemenInExpertiserapportage>J</OpnemenInExpertiserapportage>
              </Foto>
            </Opdracht>
          </Dossier>
        </Detail>
      </DispatchRequest>
      }

      EmbeddedXML := EmbeddedXML.XmlDocument;
      RootNode := EmbeddedXML.CreateNode('element', 'DispatchRequest', '');
      EmbeddedXML.AppendChild(RootNode);

      XMLDOMMgt4PS.AddElement(RootNode, 'Header', '', '', HeaderNode);
      XMLDOMMgt4PS.AddElement(RootNode, 'Detail', '', '', DetailNode);

      XMLDOMMgt4PS.AddElement(HeaderNode, 'System', XMLFormat4PS.FormatInteger(DispatchSetup."System ID"), '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Action', 'DispatchWoonToevoegenFoto40', '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Username', ConsumedWebService.Login, '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Password', ConsumedWebService.Password, '', NewNode);

      XMLDOMMgt4PS.AddElement(DetailNode, 'Dossier', '', '', FileNode);
      XMLDOMMgt4PS.AddElement(FileNode, 'Dossiernummer', XMLFormat4PS.FormatInteger(IFileNo), '', NewNode);

      XMLDOMMgt4PS.AddElement(FileNode, 'Opdracht', '', '', OrderNode);
      XMLDOMMgt4PS.AddElement(OrderNode, 'Nummer', XMLFormat4PS.FormatInteger(IOrderNo), '', NewNode);

      XMLDOMMgt4PS.AddElement(OrderNode, 'Foto', '', '', PhotoNode);
      XMLDOMMgt4PS.AddElement(PhotoNode, 'Bestandsnaam', IDocumentProperties.File, '', NewNode);

      FileContentsBase64 := GetFileContents(IDocumentProperties.FullFileName, ErrorMessage);
      IF ErrorMessage <> '' THEN
        ERROR(ErrorMessage);
      XMLDOMMgt4PS.AddElement(PhotoNode, 'Object', FileContentsBase64, '', NewNode);
      DocumentComment := GetDocumentPropertyComments(IDocumentProperties."No.", 4000);
      IF DocumentComment <> '' THEN
        XMLDOMMgt4PS.AddElement(PhotoNode, 'Opmerking', DocumentComment, '', NewNode);
      XMLDOMMgt4PS.AddElement(PhotoNode, 'OpnemenInExpertiserapportage', 'J', '', NewNode);

      EXIT(EmbeddedXML.InnerXml);
    END;

    LOCAL PROCEDURE ProcessAddPhotoResponse@1100528633(IResponseXML@1100528609 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";IResponseNamespaceManager@1100528608 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR IODocumentProperties@1100528600 : Record 11012746;VAR OErrorMessage@1100528610 : Text) : Boolean;
    VAR
      ResultXML@1100528606 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DispatchResponseNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DispatchResponseFileNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ErrorMessageNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PhotoAdded@1100528607 : Boolean;
      ReturnCode@1100528601 : Integer;
    BEGIN
      ConsumedWebServiceMgt.CheckResponseSoapFault(IResponseXML, IResponseNamespaceManager);
      IF XMLDOMMgt4PS.FindNodeNs(IResponseXML, './/' + 'Result', DispatchResponseNode, IResponseNamespaceManager) THEN BEGIN
        ResultXML := ResultXML.XmlDocument;
        ResultXML.LoadXml(XMLDOMMgt4PS.DecodeHtmlString(DispatchResponseNode.InnerXml));

        XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Returncode'), ReturnCode);
          IF XMLDOMMgt4PS.FindNode(ResultXML, './/' + 'Detail/Dossier', DispatchResponseFileNode) THEN BEGIN
            PhotoAdded := XMLDOMMgt4PS.FindNodeText(DispatchResponseFileNode, './/' + 'Opdracht/Foto/Toegevoegd') = 'J';
            IF PhotoAdded THEN BEGIN
              IODocumentProperties."Sent to Dispatch on" := CURRENTDATETIME;
              IODocumentProperties.MODIFY(TRUE);
              EXIT(TRUE);
            END ELSE BEGIN
              OErrorMessage := XMLDOMMgt4PS.FindNodeText(DispatchResponseFileNode, './/' + 'Opdracht/Foto/Foutmelding/Omschrijving');
              EXIT(FALSE);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE GetDocumentPropertyComments@1100528625(IDocumentPropertyNo@1100528600 : Code[20];IMaxLength@1100528602 : Integer) Comment : Text;
    VAR
      CommentLine@1100528601 : Record 97;
    BEGIN
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Document Properties");
      CommentLine.SETRANGE("No.", IDocumentPropertyNo);
      IF NOT CommentLine.FINDSET THEN
        EXIT;
      REPEAT
        IF Comment <> '' THEN
          Comment += ' ';
        Comment += CommentLine.Comment;
      UNTIL CommentLine.NEXT = 0;
      Comment := COPYSTR(Comment, 1, IMaxLength);
    END;

    LOCAL PROCEDURE GetServiceOrderNoFromDocumentProperty@1100528602(IDocumentProperties@1100528600 : Record 11012746) : Code[20];
    VAR
      DocumentLink@1100528602 : Record 11012747;
      ServiceOrder@1100528601 : Record 11012823;
      RecRef@1100528603 : RecordRef;
    BEGIN
      DocumentLink.SETRANGE("Document No.", IDocumentProperties."No.");
      DocumentLink.SETRANGE("Table No.", DATABASE::"Service Order");
      IF NOT DocumentLink.FINDFIRST THEN
        ERROR(Text002, IDocumentProperties."No.")
      ELSE BEGIN
        RecRef.GET(DocumentLink."Record ID");
        RecRef.SETTABLE(ServiceOrder);
        EXIT(ServiceOrder."No.");
      END;
    END;

    LOCAL PROCEDURE GetFileContents@1100528603(IFullFileName@1100528600 : Text;VAR OErrorMessage@1100528601 : Text) : Text;
    VAR
      DocumentManagementWebservice@1100528602 : Codeunit 11012405;
      FileManagement@1100528605 : Codeunit 419;
      ServerFileName@1100528604 : Text;
      FileContentsBase64@1100528603 : Text;
    BEGIN
      ServerFileName := FileManagement.UploadFileSilent(IFullFileName);
      DocumentManagementWebservice.GetFileAsBase64(ServerFileName, FileContentsBase64, OErrorMessage);
      FileManagement.DeleteServerFile(ServerFileName);
      EXIT(FileContentsBase64);
    END;

    LOCAL PROCEDURE "----- Adding Attachment -----"@1100525003();
    BEGIN
    END;

    PROCEDURE AddAttachmentToFile@1100525002(VAR IODocumentProperties@1100528600 : Record 11012746;VAR OErrorMessage@1100528605 : Text) : Boolean;
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      CommentLine@1100528601 : Record 97;
      DocumentProperties@1100528608 : Record 11012746;
      ServiceOrderNo@1100528606 : Code[20];
      DispatchFileNo@1100528603 : Integer;
      DispatchOrderNo@1100528604 : Integer;
      RecRef@1100528607 : RecordRef;
      Processed@1100528609 : Boolean;
    BEGIN
      TestDispatchWoonActive;
      IODocumentProperties.TESTFIELD("External Document");
      IODocumentProperties.TESTFIELD("Sent to Dispatch on", 0DT);
      IODocumentProperties.TESTFIELD("Send to Dispatch", TRUE);
      IODocumentProperties.TESTFIELD("Dispatch Attachment Type");
      IF IODocumentProperties.IsDocumentPicture THEN
        ERROR(Text015, IODocumentProperties."Document No.");

      ServiceOrderNo := GetServiceOrderNoFromDocumentProperty(IODocumentProperties);
      IF NOT ServiceOrder.GET(ServiceOrderNo) THEN
        EXIT;
      GetDispatchFileAndOrderNoFromServiceOrder(ServiceOrder, DispatchFileNo, DispatchOrderNo);

      SetGlobalVars('DISPATCH', 'postXML');

      ConsumedWebServiceMgt.CreateRequest(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);

      BuildRequestMessage(CreateRequestAddAttachmentMessage(IODocumentProperties, DispatchFileNo, DispatchOrderNo));
      IF ConsumedWebServiceMgt.SendCWS(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML, ResponseNamespaceManager, SetMessageId)
      THEN BEGIN
        Processed := ProcessAddAttachmentResponse(ResponseXML, ResponseNamespaceManager, IODocumentProperties, OErrorMessage);
        RecRef.GETTABLE(IODocumentProperties);
        IF RecRef.ISTEMPORARY THEN BEGIN
          IF DocumentProperties.GET(IODocumentProperties."No.") THEN BEGIN
            DocumentProperties."Sent to Dispatch on" := IODocumentProperties."Sent to Dispatch on";
            DocumentProperties.MODIFY(TRUE);
          END;
        END;
        EXIT(Processed);
      END;
    END;

    LOCAL PROCEDURE CreateRequestAddAttachmentMessage@1100525001(IDocumentProperties@1100528610 : Record 11012746;IFileNo@1100528607 : Integer;IOrderNo@1100528608 : Integer) : Text;
    VAR
      EmbeddedXML@1100528600 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      HeaderNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DetailNode@1100528603 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FileNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      OrderNode@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AttachmentNode@1100528609 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FileContentsBase64@1100528611 : Text;
      ErrorMessage@1100528612 : Text;
    BEGIN
      {
      <DispatchRequest>
        <Header>
          <System>99034</System>
          <Action>DispatchWoonToevoegenBijlage40</Action>
          <Username>inlogcode</Username>
          <Password>wachtwoord</Password>
        </Header>
        <Detail>
          <Dossier>
            <Dossiernummer>30212345</Dossiernummer>
            <Opdracht>
              <Nummer>2</Nummer>
              <Bijlage>
                <Type>DB0030</Type>
                <Bestandsnaam>Expertiserapport.docx</Bestandsnaam>
                <Object>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</Object>
              </Bijlage>
            </Opdracht>
          </Dossier>
        </Detail>
      </DispatchRequest>
      }

      EmbeddedXML := EmbeddedXML.XmlDocument;
      RootNode := EmbeddedXML.CreateNode('element', 'DispatchRequest', '');
      EmbeddedXML.AppendChild(RootNode);

      XMLDOMMgt4PS.AddElement(RootNode, 'Header', '', '', HeaderNode);
      XMLDOMMgt4PS.AddElement(RootNode, 'Detail', '', '', DetailNode);

      XMLDOMMgt4PS.AddElement(HeaderNode, 'System', XMLFormat4PS.FormatInteger(DispatchSetup."System ID"), '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Action', 'DispatchWoonToevoegenBijlage40', '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Username', ConsumedWebService.Login, '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Password', ConsumedWebService.Password, '', NewNode);

      XMLDOMMgt4PS.AddElement(DetailNode, 'Dossier', '', '', FileNode);
      XMLDOMMgt4PS.AddElement(FileNode, 'Dossiernummer', XMLFormat4PS.FormatInteger(IFileNo), '', NewNode);

      XMLDOMMgt4PS.AddElement(FileNode, 'Opdracht', '', '', OrderNode);
      XMLDOMMgt4PS.AddElement(OrderNode, 'Nummer', XMLFormat4PS.FormatInteger(IOrderNo), '', NewNode);

      XMLDOMMgt4PS.AddElement(OrderNode, 'Bijlage', '', '', AttachmentNode);
      XMLDOMMgt4PS.AddElement(AttachmentNode, 'Type', IDocumentProperties."Dispatch Attachment Type", '', NewNode);
      XMLDOMMgt4PS.AddElement(AttachmentNode, 'Bestandsnaam', IDocumentProperties.File, '', NewNode);

      FileContentsBase64 := GetFileContents(IDocumentProperties.FullFileName, ErrorMessage);
      IF ErrorMessage <> '' THEN
        ERROR(ErrorMessage);
      XMLDOMMgt4PS.AddElement(AttachmentNode, 'Object', FileContentsBase64, '', NewNode);

      EXIT(EmbeddedXML.InnerXml);
    END;

    LOCAL PROCEDURE ProcessAddAttachmentResponse@1100525000(IResponseXML@1100528609 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";IResponseNamespaceManager@1100528608 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR IODocumentProperties@1100528600 : Record 11012746;VAR OErrorMessage@1100528610 : Text) : Boolean;
    VAR
      ResultXML@1100528606 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DispatchResponseNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DispatchResponseFileNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ErrorMessageNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocumentAdded@1100528607 : Boolean;
      ReturnCode@1100528601 : Integer;
    BEGIN
      ConsumedWebServiceMgt.CheckResponseSoapFault(IResponseXML, IResponseNamespaceManager);
      IF XMLDOMMgt4PS.FindNodeNs(IResponseXML, './/' + 'Result', DispatchResponseNode, IResponseNamespaceManager) THEN BEGIN
        ResultXML := ResultXML.XmlDocument;
        ResultXML.LoadXml(XMLDOMMgt4PS.DecodeHtmlString(DispatchResponseNode.InnerXml));

        XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Returncode'), ReturnCode);
          IF XMLDOMMgt4PS.FindNode(ResultXML, './/' + 'Detail/Dossier', DispatchResponseFileNode) THEN BEGIN
            DocumentAdded := XMLDOMMgt4PS.FindNodeText(DispatchResponseFileNode, './/' + 'Opdracht/Bijlage/Toegevoegd') = 'J';
            IF DocumentAdded THEN BEGIN
              IODocumentProperties."Sent to Dispatch on" := CURRENTDATETIME;
              IODocumentProperties.MODIFY(TRUE);
              EXIT(TRUE);
            END ELSE BEGIN
              OErrorMessage := XMLDOMMgt4PS.FindNodeText(DispatchResponseFileNode, './/' + 'Opdracht/Bijlage/Foutmelding/Omschrijving');
              EXIT(FALSE);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE "----- Get Session Number -----"@1100528613();
    BEGIN
    END;

    PROCEDURE GetLoginSessionNumber@1100528614(VAR OErrorMessage@1100528600 : Text) : Boolean;
    BEGIN
      TestDispatchWoonActive;

      SetGlobalVars('DISPATCH', 'postXML');

      ConsumedWebServiceMgt.CreateRequest(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);

      BuildRequestMessage(CreateRequestDispatchLogin);
      IF ConsumedWebServiceMgt.SendCWS(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML, ResponseNamespaceManager, SetMessageId)
      THEN
        EXIT(ProcessDispatchLoginResponse(ResponseXML, ResponseNamespaceManager, OErrorMessage));
    END;

    LOCAL PROCEDURE CreateRequestDispatchLogin@1100528620() : Text;
    VAR
      EmbeddedXML@1100528600 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      HeaderNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DetailNode@1100528603 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      UserNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ErrorMessage@1100528612 : Text;
    BEGIN
      {
      <DispatchRequest>
        <Header>
          <System>99999</System>
          <Action>DispatchWoonInloggen</Action>
          <Username>String</Username>
          <Password>String</Password>
        </Header>
        <Detail>
          <Gebruiker>
            <Username>String</Username>
            <Password>String</Password>
          </Gebruiker>
        </Detail>
      </DispatchRequest>
      }

      EmbeddedXML := EmbeddedXML.XmlDocument;
      RootNode := EmbeddedXML.CreateNode('element', 'DispatchRequest', '');
      EmbeddedXML.AppendChild(RootNode);

      XMLDOMMgt4PS.AddElement(RootNode, 'Header', '', '', HeaderNode);
      XMLDOMMgt4PS.AddElement(RootNode, 'Detail', '', '', DetailNode);

      XMLDOMMgt4PS.AddElement(HeaderNode, 'System', XMLFormat4PS.FormatInteger(DispatchSetup."System ID"), '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Action', 'DispatchWoonInloggen', '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Username', ConsumedWebService.Login, '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Password', ConsumedWebService.Password, '', NewNode);

      XMLDOMMgt4PS.AddElement(DetailNode, 'Gebruiker', '', '', UserNode);
      XMLDOMMgt4PS.AddElement(UserNode, 'Username', DispatchUserSetup."Dispatch User Name", '', NewNode);
      XMLDOMMgt4PS.AddElement(UserNode, 'Password', DispatchUserSetup."Dispatch Password", '', NewNode);
      EXIT(EmbeddedXML.InnerXml);
    END;

    LOCAL PROCEDURE ProcessDispatchLoginResponse@1100528617(IResponseXML@1100528609 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";IResponseNamespaceManager@1100528608 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR OErrorMessage@1100528610 : Text) : Boolean;
    VAR
      ResultXML@1100528606 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DispatchResponseNode@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReturnCode@1100525001 : Integer;
    BEGIN
      ConsumedWebServiceMgt.CheckResponseSoapFault(IResponseXML, IResponseNamespaceManager);
      IF XMLDOMMgt4PS.FindNodeNs(IResponseXML, './/' + 'Result', DispatchResponseNode, IResponseNamespaceManager) THEN BEGIN
        ResultXML := ResultXML.XmlDocument;
        ResultXML.LoadXml(XMLDOMMgt4PS.DecodeHtmlString(DispatchResponseNode.InnerXml));

        XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Returncode'), ReturnCode);
        IF ReturnCode <> 0 THEN
          OErrorMessage := XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Melding/Omschrijving')
        ELSE BEGIN
          SessionNo := XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Detail/Sessie');
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE "----- URL functions -----"@1100528632();
    BEGIN
    END;

    LOCAL PROCEDURE CreateSessionUrl@1100528627() Url : Text;
    VAR
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      IF ServiceSetup."Dispatch Demo Mode" THEN
        Url := 'https://demo-woon.dispatch.nl/woon/asp/inloggen.asp'
      ELSE
        Url := 'https://woon.dispatch.nl/woon/asp/inloggen.asp';

      Url := STRSUBSTNO('%1?Sessie=%2', Url, SessionNo);
    END;

    PROCEDURE GetDispatchFileUrl@1100525004(IFileNo@1100525000 : Integer) : Text;
    VAR
      ErrorMessage@1100525002 : Text;
      Url@1100525001 : Text;
    BEGIN
      IF NOT GetLoginSessionNumber(ErrorMessage) THEN
        ERROR(ErrorMessage);
      Url := STRSUBSTNO('%1&Dossiernummer=%2', CreateSessionUrl, IFileNo);
      EXIT(Url);
    END;

    LOCAL PROCEDURE ShowDispatchFile@1100528619(IFileNo@1100528600 : Integer);
    BEGIN
      HYPERLINK(GetDispatchFileUrl(IFileNo));
    END;

    PROCEDURE ShowDispatchFileByServiceOrder@1100528645(IServiceOrder@1100528601 : Record 11012823);
    VAR
      FileNo@1100528600 : Integer;
      OrderNo@1100528602 : Integer;
    BEGIN
      TestDispatchWoonActive;
      GetDispatchFileAndOrderNoFromServiceOrder(IServiceOrder, FileNo, OrderNo);
      ShowDispatchFile(FileNo);
    END;

    PROCEDURE ShowDispatchFileByServiceCall@1100528637(IServiceCall@1100528601 : Record 11012822);
    VAR
      FileNo@1100528600 : Integer;
      OrderNo@1100528602 : Integer;
    BEGIN
      TestDispatchWoonActive;
      GetDispatchFileAndOrderNoFromServiceCall(IServiceCall, FileNo, OrderNo);
      ShowDispatchFile(FileNo);
    END;

    LOCAL PROCEDURE GetDispatchOrderUrl@1100525005(IFileNo@1100525001 : Integer;IOrderNo@1100525000 : Integer) : Text;
    VAR
      ErrorMessage@1100525003 : Text;
      Url@1100525002 : Text;
    BEGIN
      IF NOT GetLoginSessionNumber(ErrorMessage) THEN
        ERROR(ErrorMessage);
      Url := STRSUBSTNO('%1&Dossiernummer=%2&Opdrachtnummer=%3&Weergave=O', CreateSessionUrl, IFileNo, IOrderNo);
      EXIT(Url);
    END;

    LOCAL PROCEDURE ShowDispatchOrder@1100528636(IFileNo@1100528600 : Integer;IOrderNo@1100528601 : Integer);
    BEGIN
      HYPERLINK(GetDispatchOrderUrl(IFileNo, IOrderNo));
    END;

    PROCEDURE ShowDispatchOrderByServiceOrder@1100528644(IServiceOrder@1100528600 : Record 11012823);
    VAR
      FileNo@1100528601 : Integer;
      OrderNo@1100528602 : Integer;
    BEGIN
      TestDispatchWoonActive;
      GetDispatchFileAndOrderNoFromServiceOrder(IServiceOrder, FileNo, OrderNo);
      ShowDispatchOrder(FileNo, OrderNo);
    END;

    PROCEDURE ShowDispatchOrderByServiceCall@1100528643(IServiceCall@1100528600 : Record 11012822);
    VAR
      FileNo@1100528601 : Integer;
      OrderNo@1100528602 : Integer;
    BEGIN
      TestDispatchWoonActive;
      GetDispatchFileAndOrderNoFromServiceCall(IServiceCall, FileNo, OrderNo);
      ShowDispatchOrder(FileNo, OrderNo);
    END;

    PROCEDURE UpdateDispatchFile@1100528626(IFileNo@1100528600 : Integer);
    VAR
      ErrorMessage@1100528601 : Text;
      Url@1100528602 : Text;
    BEGIN
      IF NOT GetLoginSessionNumber(ErrorMessage) THEN
        ERROR(ErrorMessage);

      Url := STRSUBSTNO('%1&Dossiernummer=%2&Weergave=V', CreateSessionUrl, IFileNo);
      HYPERLINK(Url);
    END;

    LOCAL PROCEDURE "----- Logbook -----"@1100528646();
    BEGIN
    END;

    LOCAL PROCEDURE FetchLogbookEntries@1100528647(VAR OErrorMessage@1100528602 : Text) : Boolean;
    VAR
      FileNodes@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      FileIndex@1100528603 : Integer;
    BEGIN
      IF NOT IsDispatchWoonActive THEN
        EXIT;

      IF FetchLogbookFileNodes(FileNodes, OErrorMessage) THEN BEGIN
        FOR FileIndex := 0 TO FileNodes.Count -1 DO
          ProcessLogbookFileNode(FileNodes.ItemOf(FileIndex));
        COMMIT;
        ConfirmLogbookEntries(OErrorMessage);
        IF FileNodes.Count > 0 THEN
          SLEEP(5000); //Restriction of Dispatch
      END;
      EXIT(OErrorMessage = '');
    END;

    LOCAL PROCEDURE FetchLogbookFileNodes@1100528648(VAR OFileNodes@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";VAR OErrorMessage@1100528600 : Text) : Boolean;
    BEGIN
      TestDispatchWoonActive;
      SetGlobalVars('DISPATCH', 'postXML');

      ConsumedWebServiceMgt.CreateRequest(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);

      BuildRequestMessage(CreateRequestLogbookMessage);
      IF ConsumedWebServiceMgt.SendCWS(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML, ResponseNamespaceManager, SetMessageId)
      THEN
        EXIT(GetFileNodes(ResponseXML, ResponseNamespaceManager, OFileNodes, OErrorMessage));
    END;

    LOCAL PROCEDURE ProcessLogbookFileNode@1100528649(IFileNode@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      LogbookNodeList@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LogbookNode@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SignalNode@1100528614 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ErrorMessage@1100528605 : Text;
      LogbookIndex@1100528602 : Integer;
      FileNo@1100528603 : Integer;
      SeqNo@1100528606 : Integer;
      Role@1100528607 : Text[50];
      ReactionRole@1100528616 : Text[50];
      IntroducedBy@1100528608 : Text[50];
      IntroducedOnDate@1100528609 : Date;
      IntroducedOnTime@1100528610 : Time;
      IntroducedOn@1100528611 : DateTime;
      ReactionBy@1100528615 : Text[50];
      ReactionDate@1100528618 : Date;
      ReactionTime@1100528619 : Time;
      ReactionOn@1100528613 : DateTime;
      Description@1100528612 : Text;
    BEGIN
      XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(IFileNode, './/' + 'Dossiernummer'), FileNo);
      AddDispatchFile(FileNo);
      IF XMLDOMMgt4PS.FindNodes(IFileNode, './/' + 'Logboekregel', LogbookNodeList) THEN BEGIN
        FOR LogbookIndex := 0 TO LogbookNodeList.Count -1 DO BEGIN
          LogbookNode := LogbookNodeList.ItemOf(LogbookIndex);
          XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(LogbookNode, './/' + 'Volgnummer'), SeqNo);
          Role := XMLDOMMgt4PS.FindNodeText(LogbookNode, './/' + 'Rol');
          IntroducedBy := XMLDOMMgt4PS.FindNodeText(LogbookNode, './/' + 'OpgevoerdDoor');
          XMLFormat4PS.EvaluateDate(XMLDOMMgt4PS.FindNodeText(LogbookNode, './/' + 'Opvoerdatum'), IntroducedOnDate);
          XMLFormat4PS.EvaluateTime(XMLDOMMgt4PS.FindNodeText(LogbookNode, './/' + 'Opvoertijd'), IntroducedOnTime);
          Description := XMLDOMMgt4PS.FindNodeText(LogbookNode, './/' + 'Omschrijving');
          IF IntroducedOnDate <> 0D THEN
            IntroducedOn := CREATEDATETIME(IntroducedOnDate, IntroducedOnTime);
          IF AddLogBookEntry(FileNo, SeqNo, Role, IntroducedBy, IntroducedOn) THEN
            AddLogBookEntryLines(FileNo, SeqNo, Description, LogBookEntryLineType::Message);
          IF XMLDOMMgt4PS.FindNode(LogbookNode, './/' + 'Signaal', SignalNode) THEN BEGIN
            ReactionRole := XMLDOMMgt4PS.FindNodeText(SignalNode, './/' + 'Rol');
            ReactionBy := XMLDOMMgt4PS.FindNodeText(SignalNode, './/' + 'ReactieDoor');
            XMLFormat4PS.EvaluateDate(XMLDOMMgt4PS.FindNodeText(SignalNode, './/' + 'Reactiedatum'), ReactionDate);
            XMLFormat4PS.EvaluateTime(XMLDOMMgt4PS.FindNodeText(SignalNode, './/' + 'Reactietijd'), ReactionTime);
            IF ReactionDate <> 0D THEN
              ReactionOn := CREATEDATETIME(ReactionDate, ReactionTime);
            Description := XMLDOMMgt4PS.FindNodeText(SignalNode, './/' + 'Omschrijving');
            IF AddReactionToLogBookEntry(FileNo, SeqNo, ReactionRole, ReactionBy, ReactionOn) THEN
              AddLogBookEntryLines(FileNo, SeqNo, Description, LogBookEntryLineType::Reaction);
          END;
        END;
      END ELSE
        AddDispatchFileMessage(FileNo, Text011);
    END;

    LOCAL PROCEDURE CreateRequestLogbookMessage@1100528653() : Text;
    VAR
      EmbeddedXML@1100528600 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      HeaderNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DetailNode@1100528603 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      {
      <DispatchRequest>
        <Header>
          <System>99034</System>
          <Action>DispatchWoonOpvragenSignalen37</Action>
          <Username>inlogcode</Username>
          <Password>wachtwoord</Password>
        </Header>
        <Detail/>
      </DispatchRequest>
      }

      EmbeddedXML := EmbeddedXML.XmlDocument;
      RootNode := EmbeddedXML.CreateNode('element', 'DispatchRequest', '');
      EmbeddedXML.AppendChild(RootNode);

      XMLDOMMgt4PS.AddElement(RootNode, 'Header', '', '', HeaderNode);
      XMLDOMMgt4PS.AddElement(RootNode, 'Detail', '', '', DetailNode);

      XMLDOMMgt4PS.AddElement(HeaderNode, 'System', XMLFormat4PS.FormatInteger(DispatchSetup."System ID"), '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Action', 'DispatchWoonOpvragenSignalen37', '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Username', ConsumedWebService.Login, '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Password', ConsumedWebService.Password, '', NewNode);

      EXIT(EmbeddedXML.InnerXml);
    END;

    LOCAL PROCEDURE GetFileNodes@1100528650(IResponseXML@1100528601 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";IResponseNamespaceManager@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR OFileNodes@1100528609 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";VAR OErrorMessage@1100528610 : Text) : Boolean;
    VAR
      ResultXML@1100528602 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DispatchResponseNode@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DispatchResponseMessageNode@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DataNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReturnCode@1100528603 : Integer;
    BEGIN
      OErrorMessage := '';
      ConsumedWebServiceMgt.CheckResponseSoapFault(IResponseXML, IResponseNamespaceManager);
      IF XMLDOMMgt4PS.FindNodeNs(IResponseXML, './/' + 'Result', DispatchResponseNode, IResponseNamespaceManager) THEN BEGIN
        ResultXML := ResultXML.XmlDocument;
        ResultXML.LoadXml(XMLDOMMgt4PS.DecodeHtmlString(DispatchResponseNode.InnerXml));

        XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Returncode'), ReturnCode);
        IF ReturnCode <> 0 THEN BEGIN
          IF XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Melding/Type') = 'E' THEN
            OErrorMessage := STRSUBSTNO(Text018, XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Melding/Omschrijving'));
        END ELSE BEGIN
          XMLDOMMgt4PS.FindNodes(ResultXML, './/' + 'Detail/Dossier', OFileNodes);
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE AddLogBookEntry@1100528658(IFileNo@1100528600 : Integer;ISeqNo@1100528601 : Integer;IRole@1100528602 : Text[50];IIntroducedBy@1100528603 : Text[50];IIntroducedOn@1100528604 : DateTime) : Boolean;
    VAR
      DispatchLogbook@1100528605 : Record 11072275;
    BEGIN
      IF NOT DispatchLogbook.GET(IFileNo, ISeqNo) THEN BEGIN
        DispatchLogbook."File No." := IFileNo;
        DispatchLogbook."Seq. No." := ISeqNo;
        DispatchLogbook.Role := IRole;
        DispatchLogbook."Introduced By" := IIntroducedBy;
        DispatchLogbook."Introduced On" := IIntroducedOn;
        DispatchLogbook.INSERT(TRUE);
        NoOfLogbookEntriesCreated += 1;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE AddReactionToLogBookEntry@1100528651(IFileNo@1100528604 : Integer;ISeqNo@1100528603 : Integer;IReactionRole@1100528605 : Text[50];IReactionBy@1100528601 : Text[50];IReactionOn@1100528600 : DateTime) : Boolean;
    VAR
      DispatchLogbook@1100528602 : Record 11072275;
    BEGIN
      IF DispatchLogbook.GET(IFileNo, ISeqNo) THEN BEGIN
        DispatchLogbook."Reaction Role" := IReactionRole;
        DispatchLogbook."Reaction By" := IReactionBy;
        DispatchLogbook."Reaction On" := IReactionOn;
        DispatchLogbook.MODIFY(TRUE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE AddLogBookEntryLines@1100528664(IFileNo@1100528601 : Integer;ISeqNo@1100528600 : Integer;IDescription@1100528602 : Text;ILogBookEntryLineType@1100528608 : Option);
    VAR
      DispatchLogbookLine@1100528603 : Record 11072276;
      TextEditor@1100528607 : Codeunit 11012001;
      LineNo@1100528604 : Integer;
      DescriptionArray@1100528605 : ARRAY [10] OF Text[80];
      LineIndex@1100528606 : Integer;
    BEGIN
      IF IDescription = '' THEN
        EXIT;
      DispatchLogbookLine.SETRANGE("File No.", IFileNo);
      DispatchLogbookLine.SETRANGE("Seq. No.", ISeqNo);
      DispatchLogbookLine.SETRANGE(Type, ILogBookEntryLineType);
      IF DispatchLogbookLine.FINDLAST THEN
        LineNo := DispatchLogbookLine."Line No.";

      TextEditor.BreakDescription(IDescription, 80, TRUE, DescriptionArray);

      LineIndex := 1;
      WHILE DescriptionArray[LineIndex] <> '' DO BEGIN
        DispatchLogbookLine.INIT;
        DispatchLogbookLine."File No." := IFileNo;
        DispatchLogbookLine."Seq. No." := ISeqNo;
        DispatchLogbookLine.Type := ILogBookEntryLineType;
        LineNo += 10000;
        DispatchLogbookLine."Line No." := LineNo;
        DispatchLogbookLine.Comment := DescriptionArray[LineIndex];
        DispatchLogbookLine.INSERT(TRUE);
        LineIndex += 1;
      END;
    END;

    LOCAL PROCEDURE ConfirmLogbookEntries@1100528659(VAR OErrorMessage@1100528600 : Text) : Boolean;
    BEGIN
      TestDispatchWoonActive;
      SetGlobalVars('DISPATCH', 'postXML');

      ConsumedWebServiceMgt.CreateRequest(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);

      BuildRequestMessage(CreateConfirmLogbookMessage);
      IF ConsumedWebServiceMgt.SendCWS(
        ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML, ResponseNamespaceManager, SetMessageId)
      THEN
        EXIT(IsConfirmReponseOK(ResponseXML, ResponseNamespaceManager, OErrorMessage));
    END;

    LOCAL PROCEDURE CreateConfirmLogbookMessage@1100528661() : Text;
    VAR
      EmbeddedXML@1100528600 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      HeaderNode@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DetailNode@1100528603 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewNode@1100528606 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      {
      <DispatchRequest>
        <Header>
          <System>99034</System>
          <Action>DispatchWoonBevestigenSignalen37</Action>
          <Username>inlogcode</Username>
          <Password>wachtwoord</Password>
        </Header>
        <Detail/>
      </DispatchRequest>
      }

      EmbeddedXML := EmbeddedXML.XmlDocument;
      RootNode := EmbeddedXML.CreateNode('element', 'DispatchRequest', '');
      EmbeddedXML.AppendChild(RootNode);

      XMLDOMMgt4PS.AddElement(RootNode, 'Header', '', '', HeaderNode);
      XMLDOMMgt4PS.AddElement(RootNode, 'Detail', '', '', DetailNode);

      XMLDOMMgt4PS.AddElement(HeaderNode, 'System', XMLFormat4PS.FormatInteger(DispatchSetup."System ID"), '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Action', 'DispatchWoonBevestigenSignalen37', '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Username', ConsumedWebService.Login, '', NewNode);
      XMLDOMMgt4PS.AddElement(HeaderNode, 'Password', ConsumedWebService.Password, '', NewNode);

      EXIT(EmbeddedXML.InnerXml);
    END;

    LOCAL PROCEDURE IsConfirmReponseOK@1100528662(IResponseXML@1100528601 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";IResponseNamespaceManager@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR OErrorMessage@1100528602 : Text) : Boolean;
    VAR
      ResultXML@1100528608 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DispatchResponseNode@1100528607 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReturnCode@1100528604 : Integer;
    BEGIN
      OErrorMessage := '';
      ConsumedWebServiceMgt.CheckResponseSoapFault(IResponseXML, IResponseNamespaceManager);
      IF XMLDOMMgt4PS.FindNodeNs(IResponseXML, './/' + 'Result', DispatchResponseNode, IResponseNamespaceManager) THEN BEGIN
        ResultXML := ResultXML.XmlDocument;
        ResultXML.LoadXml(XMLDOMMgt4PS.DecodeHtmlString(DispatchResponseNode.InnerXml));

        XMLFormat4PS.EvaluateInteger(XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Returncode'), ReturnCode);
        IF ReturnCode <> 0 THEN BEGIN
          OErrorMessage := XMLDOMMgt4PS.FindNodeText(ResultXML, './/' + 'Header/Melding/Omschrijving');
          EXIT(FALSE);
        END ELSE
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetMessageId@1100525007() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1-%2', ConsumedWebService.Code, ConsumedWebServiceLine."Method Name"));
    END;

    EVENT ResponseXML@1100528605::NodeInserting@93(sender@1100528601 : Variant;e@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100528605::NodeInserted@94(sender@1100528601 : Variant;e@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100528605::NodeRemoving@95(sender@1100528601 : Variant;e@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100528605::NodeRemoved@96(sender@1100528601 : Variant;e@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100528605::NodeChanging@97(sender@1100528601 : Variant;e@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100528605::NodeChanged@98(sender@1100528601 : Variant;e@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

