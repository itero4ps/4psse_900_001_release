OBJECT Codeunit 11125347 4PS Data Upgrade
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Subtype=Upgrade;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100529200 : TextConst 'ENU=General';
      StartDateTime@1100529201 : DateTime;
      InstallationManagement@1100529203 : Codeunit 11012268;

    [UpgradePerCompany]
    PROCEDURE UpgradeDataPerCompanyTables@1100529233();
    VAR
      JobsSetup@1100529203 : Record 315;
      FirstCompanyConversionStatus@1100529202 : Integer;
      LastCompanyConversionStatus@1100529200 : Integer;
      CompanyInitialize@1100529201 : Codeunit 2;
    BEGIN
      GLOBALLANGUAGE(InstallationManagement.GetDataUpgradeLanguage(FALSE));

      FirstCompanyConversionStatus := 4100;
      LastCompanyConversionStatus := 4101;

      IF NOT JobsSetup.GET THEN
        EXIT;

      IF JobsSetup."Conversion Status" = 0 THEN BEGIN
        JobsSetup."Conversion Status" := LastCompanyConversionStatus;
        JobsSetup.MODIFY;
        InsertNewCompanyUpgradeLogs(FirstCompanyConversionStatus,LastCompanyConversionStatus);
        COMMIT;
        EXIT;
      END;

      // 4PSNL 9.00-001
      UpdateServiceContractBillToCustomer(4100);
      UpdateVendorBlockForQuote(4101);

      JobsSetup."Conversion Status" := LastCompanyConversionStatus;
      JobsSetup.MODIFY;

      CompanyInitialize.RUN;
      COMMIT;
      CLEAR(CompanyInitialize);
    END;

    [UpgradePerDatabase]
    PROCEDURE UpgradeDataPerCompanyNoTables@1100529244();
    VAR
      DatabaseSetup@1100529202 : Record 11229358;
      FirstDatabaseConversionStatus@1100529201 : Integer;
      LastDatabaseConversionStatus@1100529200 : Integer;
    BEGIN
      GLOBALLANGUAGE(InstallationManagement.GetDataUpgradeLanguage(TRUE));

      FirstDatabaseConversionStatus := 4100;
      LastDatabaseConversionStatus := 4101;

      IF NOT DatabaseSetup.GET THEN BEGIN
        DatabaseSetup.INIT;
        DatabaseSetup."Language Code Data Upgrade" := InstallationManagement.GetDataUpgradeLanguage(TRUE);
        DatabaseSetup.INSERT;
      END;

      IF DatabaseSetup."Conversion Status" = 0 THEN BEGIN
        DatabaseSetup."Conversion Status" := LastDatabaseConversionStatus;
        InsertNewDatabaseUpgradeLogs(FirstDatabaseConversionStatus,LastDatabaseConversionStatus);
        DatabaseSetup.MODIFY;
        COMMIT;
        EXIT;
      END;

      // 4PSNL 9.00-001
      UpdateCompanyPlanSetup(4100);
      UpdateIntercompanyRelationsICAccount(4101);

      DatabaseSetup."Conversion Status" := LastDatabaseConversionStatus;
      DatabaseSetup.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateServiceContractBillToCustomer@1100529219(ConversionStatus@1100529200 : Integer);
    VAR
      CompanyDataUpgradeLog@1100529201 : Record 11229360;
      ServiceContract@1100525000 : Record 11012812;
      TypeOfLog@1100529202 : 'Execute,No License Permission,New Company';
    BEGIN
      IF NOT CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN BEGIN
        InstallationManagement.InitDataUpgradeLog(DATABASE::"Service-Contract",TypeOfLog,StartDateTime,FALSE);
        IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
          WITH ServiceContract DO BEGIN
            SETFILTER("Bill-to Customer No. (Contr.)", '<>%1', '');
            IF ISEMPTY THEN BEGIN
              SETRANGE("Bill-to Customer No. (Contr.)");
              IF FINDSET THEN BEGIN
                REPEAT
                  "Bill-to Customer No. (Contr.)" := "Bill-to Customer No. (CP)";
                  "Alt. Bill-to Address (Contr.)" := "Alt. Bill-to Address (CP)";
                  "Use Bill-to as Sell-to (Contr)" := "Use Bill-to as Sell-to (CP)";
                  MODIFY;
                UNTIL NEXT = 0;
              END;
            END;
          END;
        END;
        CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE UpdateVendorBlockForQuote@1100528800(ConversionStatus@1100529200 : Integer);
    VAR
      CompanyDataUpgradeLog@1100529201 : Record 11229360;
      TypeOfLog@1100529202 : 'Execute,No License Permission,New Company';
      Vendor@1100528800 : Record 23;
    BEGIN
      IF NOT CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN BEGIN
        InstallationManagement.InitDataUpgradeLog(DATABASE::Vendor,TypeOfLog,StartDateTime,FALSE);
        IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
          WITH Vendor DO BEGIN
            SETRANGE(Blocked, Blocked::All);
            IF FINDSET THEN
              REPEAT
                "Block Purchase Quote" := TRUE;
                MODIFY;
              UNTIL NEXT = 0;
          END;
        END;
        CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE UpdateCompanyPlanSetup@1100529245(ConversionStatus@1100529200 : Integer);
    VAR
      DatabaseDataUpgradeLog@1100529201 : Record 11229359;
      CompanyPlanGroup@1100525000 : Record 11229300;
      CentralGWPSetupOBS@1100525001 : Record 11229283;
      TypeOfLog@1100529202 : 'Execute,No License Permission,New Company';
    BEGIN
      IF NOT DatabaseDataUpgradeLog.LogExists(ConversionStatus) THEN BEGIN
        InstallationManagement.InitDataUpgradeLog(DATABASE::"Company Plan Group",TypeOfLog,StartDateTime,FALSE);
        IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
          WITH CentralGWPSetupOBS DO BEGIN
            IF FINDFIRST THEN BEGIN
              CompanyPlanGroup.Code := '001';
              CompanyPlanGroup.Description := Text001;
              CompanyPlanGroup."Window (Days)" := "Window (Days)";
              CompanyPlanGroup."Start Window (Days b. WorkDat)" := "Start Window (Days b. WorkDat)";
              CompanyPlanGroup."Show in Planning until Status" := "Show in Planning until Status";
              CompanyPlanGroup."Update Planning Automatically" := "Update Planning Automatically";
              CompanyPlanGroup."Update Planning Interval (Sec)" := "Update Planning Interval (Sec)";
              CompanyPlanGroup."Automatic Scheduling" := "Automatic Scheduling";
              CompanyPlanGroup."Setup Company" := "Setup Company";
              CompanyPlanGroup."Server Address" := "Server Address";
              CompanyPlanGroup."OData Service Port" := "OData Service Port";
              CompanyPlanGroup."SOAP Service Port" := "SOAP Service Port";
              CompanyPlanGroup."Instance Name" := "Instance Name";
              CompanyPlanGroup.INSERT;
            END;
          END;
        END;
        DatabaseDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE UpdateIntercompanyRelationsICAccount@1100525000(ConversionStatus@1100529200 : Integer);
    VAR
      DatabaseDataUpgradeLog@1100529201 : Record 11229359;
      IntercompanyRelation@1100525000 : Record 11012057;
      TypeOfLog@1100529202 : 'Execute,No License Permission,New Company';
    BEGIN
      IF NOT DatabaseDataUpgradeLog.LogExists(ConversionStatus) THEN BEGIN
        InstallationManagement.InitDataUpgradeLog(DATABASE::"Intercompany Relation",TypeOfLog,StartDateTime,FALSE);
        IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
          WITH IntercompanyRelation DO BEGIN
            SETRANGE("Receiving Company IC Account", '');
            IF FINDSET THEN BEGIN
              REPEAT
                "Receiving Company IC Account" := "Supplying Company IC Account";
                MODIFY;
              UNTIL NEXT = 0;
            END;
          END;
        END;
        DatabaseDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE InsertNewCompanyUpgradeLogs@1100529203(FirstNewCompanyLogEntry@1100529202 : Integer;LastNewCompanyLogEntry@1100529203 : Integer);
    VAR
      CompanyDataUpgradeLog@1100529200 : Record 11229360;
      i@1100529201 : Integer;
      TypeOfLog@1100529204 : 'Execute,No License Permission,New Company';
    BEGIN
      FOR i := FirstNewCompanyLogEntry TO LastNewCompanyLogEntry DO
        IF NOT CompanyDataUpgradeLog.LogExists(i) THEN BEGIN
          InstallationManagement.InitDataUpgradeLog(0,TypeOfLog,StartDateTime,TRUE);
          CompanyDataUpgradeLog.InsertLog(i,StartDateTime,TypeOfLog);
        END;
    END;

    LOCAL PROCEDURE InsertNewDatabaseUpgradeLogs@1100529200(FirstNewDatabaseLogEntry@1100529202 : Integer;LastNewDatabaseLogEntry@1100529203 : Integer);
    VAR
      DatabaseDataUpgradeLog@1100529200 : Record 11229359;
      i@1100529201 : Integer;
      TypeOfLog@1100529204 : 'Execute,No License Permission,New Company';
    BEGIN
      FOR i := FirstNewDatabaseLogEntry TO LastNewDatabaseLogEntry DO
        IF NOT DatabaseDataUpgradeLog.LogExists(i) THEN BEGIN
          InstallationManagement.InitDataUpgradeLog(0,TypeOfLog,StartDateTime,TRUE);
          DatabaseDataUpgradeLog.InsertLog(i,StartDateTime,TypeOfLog);
        END;
    END;

    LOCAL PROCEDURE UpdateDataPerCompanyTableDummy@1100525009(ConversionStatus@1100529200 : Integer);
    VAR
      CompanyDataUpgradeLog@1100529201 : Record 11229360;
      TypeOfLog@1100529202 : 'Execute,No License Permission,New Company';
    BEGIN
      IF NOT CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN BEGIN
        //Activate line below and fill TableIDForLicenseCheck
        //InstallationManagement.InitDataUpgradeLog(TableIDForLicenseCheck,TypeOfLog,StartDateTime,FALSE);
        IF TypeOfLog = TypeOfLog::Execute THEN BEGIN

        END;
        CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE UpdateDataPerCompanyNoTableDummy@1100525002(ConversionStatus@1100529200 : Integer);
    VAR
      DatabaseDataUpgradeLog@1100529201 : Record 11229359;
      TypeOfLog@1100529202 : 'Execute,No License Permission,New Company';
    BEGIN
      IF NOT DatabaseDataUpgradeLog.LogExists(ConversionStatus) THEN BEGIN
        //Activate line below and fill TableIDForLicenseCheck
        //InstallationManagement.InitDataUpgradeLog(TableIDForLicenseCheck,TypeOfLog,StartDateTime,FALSE);
        IF TypeOfLog = TypeOfLog::Execute THEN BEGIN

        END;
        DatabaseDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
        COMMIT;
      END;
    END;

    BEGIN
    END.
  }
}

