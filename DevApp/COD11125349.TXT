OBJECT Codeunit 11125349 Approval Management 4PS Constr
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UnsupportedRecordTypeErr@1100528200 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.';
      DocumentCaptureSetup@1100528202 : Record 6085573;
      DCSetupRead@1100528201 : Boolean;
      Text001@1100528206 : TextConst 'ENU=No open approval entries found.';
      Text013@1100528205 : TextConst '@@@="%1=document type, %2=document no., e.g. Order 321 must be approved...";ENU=%1 %2 must be approved and released before you can perform this action.';
      Text024@1100528204 : TextConst 'ENU=%1 %2 was put on hold.';
      Text11012003@1100528203 : TextConst 'ENU=Specific On Hold Code in the Approval Setup is not set.';
      Text002@1100528207 : TextConst 'ENU=Already Invoiced. Consent can not be undone.';
      Text304@1100528209 : TextConst 'ENU=%1 %2 is already approved.\Start new approval flow?';
      Text012@1100528210 : TextConst 'ENU=Do you wish to force the approval of %1 %2?';
      Text011@1100528211 : TextConst 'ENU=Approval forced by %1';
      Text11012005@1100528212 : TextConst 'ENU=Post %1 %2 not possible because %3 %4.';
      WebSearchMgt@1100528213 : Codeunit 6085748;
      Text007@1100528215 : TextConst 'ENU=%1 %2 was rejected';
      Text008@1100528214 : TextConst 'ENU=%1 %2 was sent back';
      Text027@1100528216 : TextConst 'ENU=%1 approved by %2 on behalf of %3.';
      Text026@1100528217 : TextConst 'ENU=Your approval limit does not allow you to approve this %1.';
      Text037@1100528218 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4';
      Text014@1100528219 : TextConst 'ENU=Amount Excl. VAT does not match\';
      Text016@1100528220 : TextConst 'ENU=" - Imported: %1\"';
      Text015@1100528222 : TextConst 'ENU=Amount Incl. VAT does not match\';
      Text017@1100528221 : TextConst 'ENU=" - Assigned: %1\"';
      Text018@1100528223 : TextConst 'ENU=\Do you want to approve the document anyway?';
      Text302@1100528224 : TextConst;
      Text301@1100528225 : TextConst 'ENU=Approval flow already in process.';

    PROCEDURE OpenApprovalEntryPurchDoc@1100528200(Variant@1000 : Variant) : Boolean;
    VAR
      RecRef@1100528201 : RecordRef;
      ApprovalEntry@1011 : Record 454;
      PurchInvHeader@1100528200 : Record 122;
      PurchCrMHeader@1100528202 : Record 124;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            WITH ApprovalEntry DO BEGIN
              RESET;
              SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
              SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
              SETRANGE("Document No.",PurchInvHeader."No.");
              SETFILTER(Status, '%1|%2',Status::Created,Status::Open);
              IF FINDSET THEN
                EXIT(TRUE);
            END;
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMHeader);
             WITH ApprovalEntry DO BEGIN
              RESET;
              SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
              SETRANGE("Document Type",ApprovalEntry."Document Type"::"Credit Memo");
              SETRANGE("Document No.",PurchCrMHeader."No.");
              SETFILTER(Status, '%1|%2',Status::Created,Status::Open);
              IF FINDSET THEN
                EXIT(TRUE);
            END;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FilterApprovalEntryOpen@1100528203(lDocType@1100528200 : Integer;lDocNo@1100528201 : Code[20];VAR ApprovalEntry@1000000001 : Record 454;OnlyCurrUser@161024012 : Boolean);
    VAR
      DCApprovalManagement@1100525000 : Codeunit 6085722;
      UserFilter@161024013 : Text[1024];
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      IF lDocType = 2 THEN BEGIN
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        ApprovalEntry.SETRANGE("Document Type", 2);
      END;
      IF lDocType = 3 THEN BEGIN
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        ApprovalEntry.SETRANGE("Document Type", 3);
      END;

      ApprovalEntry.SETRANGE("Document No.",lDocNo);

      IF OnlyCurrUser THEN BEGIN
        UserFilter := DCApprovalManagement.GetApprovalSharingToUserFilter(USERID);
        IF UserFilter = '' THEN
          ApprovalEntry.SETRANGE("Approver ID",USERID)
        ELSE
          ApprovalEntry.SETFILTER("Approver ID",USERID + '|' + UserFilter);
      END;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF NOT ApprovalEntry.FINDFIRST THEN
        ERROR(Text001);
    END;

    PROCEDURE FilterApprovalEntryCreatedAndOpen@1100528220(lDocType@1100528200 : Integer;lDocNo@1100528201 : Code[20];VAR ApprovalEntry@1000000001 : Record 454;OnlyCurrUser@161024012 : Boolean);
    VAR
      DCApprovalManagement@1100525000 : Codeunit 6085722;
      UserFilter@161024013 : Text[1024];
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      IF lDocType = 2 THEN BEGIN
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        ApprovalEntry.SETRANGE("Document Type", 2);
      END;
      IF lDocType = 3 THEN BEGIN
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        ApprovalEntry.SETRANGE("Document Type", 3);
      END;

      ApprovalEntry.SETRANGE("Document No.",lDocNo);

      IF OnlyCurrUser THEN BEGIN
        UserFilter := DCApprovalManagement.GetApprovalSharingToUserFilter(USERID);
        IF UserFilter = '' THEN
          ApprovalEntry.SETRANGE("Approver ID",USERID)
        ELSE
          ApprovalEntry.SETFILTER("Approver ID",USERID + '|' + UserFilter);
      END;

      ApprovalEntry.SETFILTER(Status, '%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);

      IF NOT ApprovalEntry.FINDFIRST THEN
        ERROR(Text001);
    END;

    PROCEDURE SwitchOnHold@1100528205(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20];AskComment@1100528205 : Boolean;GiveMessage@1100528204 : Boolean);
    VAR
      WorkFlowSetup4PSConstruct@1100525000 : Record 11229316;
      ApprovalEntry@161024017 : Record 454;
      ApprovalCmtMgnt@161024013 : Codeunit 6085600;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528203 : Record 124;
    BEGIN
      WorkFlowSetup4PSConstruct.GET;
      IF WorkFlowSetup4PSConstruct."Specific On Hold Code" = '' THEN
        ERROR(Text11012003);

      IF lDocType = 2 THEN BEGIN
        PurchInvHeader.GET(lDocNo);
        IF (PurchInvHeader."On Hold" = '') OR (PurchInvHeader."On Hold" = WorkFlowSetup4PSConstruct."Specific On Hold Code") THEN
          PutOnHold(lDocType, lDocNo,FALSE,FALSE,TRUE)
        ELSE
          PutOnSpecificHold(lDocType, lDocNo,WorkFlowSetup4PSConstruct."Specific On Hold Code",TRUE,TRUE);
      END;
      IF lDocType = 3 THEN BEGIN
        PurchCrMemoHdr.GET(lDocNo);
        IF (PurchCrMemoHdr."On Hold" = '') OR (PurchCrMemoHdr."On Hold" = WorkFlowSetup4PSConstruct."Specific On Hold Code") THEN
          PutOnHold(lDocType, lDocNo,TRUE,TRUE,TRUE)
        ELSE
          PutOnSpecificHold(lDocType, lDocNo,WorkFlowSetup4PSConstruct."Specific On Hold Code",TRUE,TRUE);
      END;
    END;

    PROCEDURE PutOnHold@1100528204(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20];AskComment@1100528205 : Boolean;GiveMessage@1100528206 : Boolean;OnlyCurrUser@1100528207 : Boolean);
    VAR
      ApprovalEntry@161024017 : Record 454;
      ApprovalCmtMgnt@161024013 : Codeunit 6085600;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528203 : Record 124;
      OnHoldCodeRec@1100528204 : Record 11012031;
    BEGIN
      //**4PS
      FilterApprovalEntryCreatedAndOpen(lDocType, lDocNo,ApprovalEntry,OnlyCurrUser);
      IF AskComment THEN
        ApprovalCmtMgnt.RequestComment4PS(lDocType, lDocNo);

      IF lDocType = 2 THEN
        OnHoldCodeRec.SETRANGE("Default Value Purchase Invoice", TRUE)
      ELSE
        OnHoldCodeRec.SETRANGE("Default Value Credit Memo", TRUE);

      IF NOT OnHoldCodeRec.FIND('-') THEN BEGIN
        OnHoldCodeRec.Code := COPYSTR(USERID,1,MAXSTRLEN(OnHoldCodeRec.Code));
      END;

      IF lDocType = 2 THEN BEGIN
        PurchInvHeader.GET(lDocNo);
        PurchInvHeader."On Hold" := OnHoldCodeRec.Code;
        PurchInvHeader.MODIFY(TRUE);
        PurchInvHeader.UpdateOnHoldOfPurchaseInvoice(lDocNo,OnHoldCodeRec.Code,FALSE);
        IF GiveMessage THEN
          MESSAGE(Text024,ApprovalEntry."Document Type",PurchInvHeader."No.");
      END;
      IF lDocType = 3 THEN BEGIN
        PurchCrMemoHdr.GET(lDocNo);
        PurchCrMemoHdr."On Hold" := OnHoldCodeRec.Code;
        PurchCrMemoHdr.MODIFY(TRUE);
        PurchCrMemoHdr.UpdateOnHoldOfPurchCreditMemo(lDocNo,OnHoldCodeRec.Code,FALSE);
        IF GiveMessage THEN
          MESSAGE(Text024,ApprovalEntry."Document Type",PurchCrMemoHdr."No.");
      END;
    END;

    PROCEDURE PutOnSpecificHold@1100528223(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20];lOnHoldCode@1100528207 : Code[3];AskComment@1100528205 : Boolean;GiveMessage@1100528206 : Boolean);
    VAR
      ApprovalEntry@161024017 : Record 454;
      ApprovalCmtMgnt@161024013 : Codeunit 6085600;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528203 : Record 124;
      OnHoldCodeRec@1100528204 : Record 11012031;
    BEGIN
      IF lOnHoldCode = '' THEN
        EXIT;

      FilterApprovalEntryOpen(lDocType, lDocNo,ApprovalEntry,TRUE);
      IF AskComment THEN
        ApprovalCmtMgnt.RequestComment4PS(lDocType, lDocNo);

      OnHoldCodeRec.GET(lOnHoldCode);

      IF lDocType = 2 THEN BEGIN
        PurchInvHeader.GET(lDocNo);
        PurchInvHeader."On Hold" := OnHoldCodeRec.Code;
        PurchInvHeader.MODIFY(TRUE);
        PurchInvHeader.UpdateOnHoldOfPurchaseInvoice(lDocNo,OnHoldCodeRec.Code,FALSE);
        IF GiveMessage THEN
          MESSAGE(Text024,ApprovalEntry."Document Type",PurchInvHeader."No.", lOnHoldCode);
      END;
      IF lDocType = 3 THEN BEGIN
        PurchCrMemoHdr.GET(lDocNo);
        PurchCrMemoHdr."On Hold" := OnHoldCodeRec.Code;
        PurchCrMemoHdr.MODIFY(TRUE);
        PurchCrMemoHdr.UpdateOnHoldOfPurchCreditMemo(lDocNo,OnHoldCodeRec.Code,FALSE);
        IF GiveMessage THEN
          MESSAGE(Text024,ApprovalEntry."Document Type",PurchCrMemoHdr."No.", lOnHoldCode);
      END;
    END;

    PROCEDURE CalcPurchDocAmount@24(PurchHeader@1002 : Record 38;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1000 : Decimal);
    VAR
      TempPurchLine@1009 : TEMPORARY Record 39;
      TotalPurchLine@1008 : Record 39;
      TotalPurchLineLCY@1007 : Record 39;
      PurchDocMgnt@1003 : Codeunit 6085709;
      PurchPost@1006 : Codeunit 90;
      DCApprovalsBridge@1100528200 : Codeunit 6085790;
      TempAmount@1005 : Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      IF IsDocumentCaptureActive THEN BEGIN //**4PS.n
        DCApprovalsBridge.CalcPurchDocAmount(PurchHeader,ApprovalAmount,ApprovalAmountLCY);
        EXIT;
      END;

      PurchHeader.CalcInvDiscForHeader;
      PurchPost.GetPurchLines(PurchHeader,TempPurchLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(
        PurchHeader,TempPurchLine,0,TotalPurchLine,TotalPurchLineLCY,
        TempAmount,VAtText);
      ApprovalAmount := TotalPurchLine.Amount;
      ApprovalAmountLCY := TotalPurchLineLCY.Amount;
    END;

    PROCEDURE IsDocumentCaptureActive@1100409000() : Boolean;
    BEGIN
      IF NOT DCSetupRead THEN BEGIN
        IF NOT DocumentCaptureSetup.READPERMISSION THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
          DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    PROCEDURE CheckPostedApprovalEntries@1100528211(DocNo@1100528201 : Code[20];TableID@1100528200 : Integer) : Boolean;
    VAR
      PostedApprvlEntry@1000 : Record 456;
    BEGIN
      //**4PS
      PostedApprvlEntry.SETRANGE("Table ID",TableID);
      PostedApprvlEntry.SETRANGE("Document No.",DocNo);
      IF PostedApprvlEntry.FINDFIRST THEN
        EXIT(TRUE);

      EXIT(FALSE)
    END;

    PROCEDURE PrePostApprovalCheckPurch@39(VAR PurchaseHeader@1001 : Record 38) : Boolean;
    VAR
      WorkFlowSetup4PSConstruct@1100525000 : Record 11229316;
      PurchaseHeaderDCInfo@1100525001 : Record 6085767;
      ApprovalEntry@1100525002 : Record 454;
    BEGIN
      IF NOT CheckApprPurchaseDocument(PurchaseHeader) THEN
        EXIT(TRUE);

      IF IsDocumentCaptureActive THEN BEGIN
        WorkFlowSetup4PSConstruct.GET;
        IF WorkFlowSetup4PSConstruct."Appr. P. Hdr. And P. I. Hdr." THEN BEGIN   //** Procedure: 'adviesaanvraag' is active
          IF PurchaseHeaderDCInfo.GetApprovalFlowCode(PurchaseHeader) = '' THEN BEGIN
            //This part may lead to errors, startof. //if problems when this check is done before the approval entry is set to approved. in that case remove this check.
            ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
            ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
            ApprovalEntry.SETRANGE("Document Type",PurchaseHeader."Document Type");
            ApprovalEntry.SETRANGE("Document No.",PurchaseHeader."No.");
            ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
            IF ApprovalEntry.ISEMPTY THEN
            //This part may lead to errors, endof
              EXIT(TRUE);
          END;
        END;
      END;

      IF NOT (PurchaseHeader.Status IN [PurchaseHeader.Status::Released,PurchaseHeader.Status::"Pending Prepayment"]) THEN
        ERROR(Text013,PurchaseHeader."Document Type",PurchaseHeader."No.");
      EXIT(TRUE);
    END;

    PROCEDURE CheckApprPurchaseDocument@29(VAR PurchaseHeader@1000 : Record 38) : Boolean;
    BEGIN
      EXIT(TRUE);
      //Mayby this should be like this:IF ApprovalsMgmt.CheckPurchaseApprovalsWorkflowEnabled(PurchHeader) THEN EXIT (TRUE)
    END;

    PROCEDURE FindPurchaseConsenters@1100528201(RecRef@1100528200 : RecordRef;ApprovalEntryArgument@1100528202 : Record 454) ConsentUsed : Boolean;
    VAR
      PurchaseHeader@1100528201 : Record 38;
      ConsentManagement@1100528203 : Codeunit 11012132;
      ApprovalAmount@1100528205 : Decimal;
      ApprovalAmountLCY@1100528204 : Decimal;
      PurchInvHeader@1100528206 : Record 122;
      PurchCrMemoHdr@1100528207 : Record 124;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            CASE PurchaseHeader."Document Type" OF
              PurchaseHeader."Document Type"::Invoice :
                ConsentUsed := ConsentManagement.ApplyConsentPurchaseHeadertoApprovals(PurchaseHeader, 1, TRUE, ApprovalEntryArgument);
              PurchaseHeader."Document Type"::"Credit Memo" :
                ConsentUsed := ConsentManagement.ApplyConsentPurchaseHeadertoApprovals(PurchaseHeader, 3, TRUE, ApprovalEntryArgument);
            END;
          END;
        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            ConsentUsed := ConsentManagement.ApplyConsentPurchInvHeadertoApprovals(PurchInvHeader,2,TRUE, ApprovalEntryArgument);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMemoHdr);
            ConsentUsed := ConsentManagement.ApplyConsentPurchCrMemHeadertoApprovals(PurchCrMemoHdr,4,TRUE, ApprovalEntryArgument);
          END;
      END;
    END;

    PROCEDURE DCKeepOnHold@1100525008() : Boolean;
    VAR
      WorkFlowSetup4PSConstruct@1100528200 : Record 11229316;
    BEGIN
      //**4PS
      //Procedure 'adviesaanvraag'/ Advice Request.
      //Aproval procedure sequentially on table 38 (occasionally user defined) and on table 122 (always)
      //Done by manually setting approval flow code on 38.
      IF NOT IsDocumentCaptureActive THEN
        EXIT(FALSE);

      IF WorkFlowSetup4PSConstruct.GET THEN BEGIN
        IF WorkFlowSetup4PSConstruct."Purch. Hdr. Inv. Keep On Hold" AND WorkFlowSetup4PSConstruct."Appr. P. Hdr. And P. I. Hdr." THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CreateApprovalRequests@6(Variant@1000 : Variant) Handled : Boolean;
    VAR
      RecRef@1100528201 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header": SendPurchInvHdrApprovalRequest(RecRef);
        DATABASE::"Purch. Cr. Memo Hdr.": SendPurchCrMemoApprovalRequest(RecRef);
        DATABASE::"Purchase Header": ;
      ELSE
        ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    PROCEDURE SendPurchInvHdrApprovalRequest@1100528202(RecRef@1100528203 : RecordRef);
    VAR
      PurchInvHeader@1100528200 : Record 122;
      PurchCMRec@1100528201 : Record 124;
      ApprovalAmount@1100528204 : Decimal;
      ApprovalAmountLCY@1100528202 : Decimal;
      PurchSetupRec@1100528209 : Record 312;
      PurchHeadRec@1100528210 : Record 38;
      MessageID@1100528211 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval';
      VendorLedgerEntry@1100528212 : Record 25;
      ApprovalsBridge4PSConstruct@1100528205 : Codeunit 11125348;
      ApprovalManagement4PSConstr@1100528215 : Codeunit 11125349;
      ApprovalEntryArgument@1100528206 : Record 454;
      PurchInvHeaderDCInfo@1100528207 : Record 6085769;
      Handled@1100528208 : Boolean;
      ConsentUsed@1100528213 : Boolean;
      DCApprovalsBridge@1100528216 : Codeunit 6085790;
      ApprovalEntry@1100528218 : Record 454;
      PostedApprovalEntry@1100528214 : Record 456;
      AdvancedAppvlManagement4PS@1100528217 : Codeunit 11125352;
    BEGIN
      RecRef.SETTABLE(PurchInvHeader);
      PurchSetupRec.GET;
      PurchInvHeader.CALCFIELDS(Amount, "Amount (LCY)");
      ApprovalAmount := PurchInvHeader.Amount;
      ApprovalAmountLCY := PurchInvHeader."Amount (LCY)";

      ApprovalEntry.SETRANGE("Table ID", DATABASE::"Purch. Inv. Header");
      ApprovalEntry.SETRANGE("Document Type", ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.", PurchInvHeader."No.");
      ApprovalEntry.SETFILTER(Status, '%1|%2', ApprovalEntry.Status::Open, ApprovalEntry.Status::Created);
      IF NOT ApprovalEntry.ISEMPTY THEN
        ERROR(Text301);

      VendorLedgerEntry.SETCURRENTKEY("Document No.");
      VendorLedgerEntry.SETRANGE("Document No.", PurchInvHeader."No.");
      VendorLedgerEntry.SETRANGE("Document Type", VendorLedgerEntry."Document Type"::Invoice);
      IF VendorLedgerEntry.FINDFIRST THEN BEGIN
        VendorLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
        IF VendorLedgerEntry.Amount <> VendorLedgerEntry."Remaining Amount" THEN
          ERROR(Text002);
      END;

      ApprovalsBridge4PSConstruct.InitializeApprovalEntry4PS(RecRef,ApprovalEntryArgument);

      PostedApprovalEntry.SETCURRENTKEY("Table ID","Document No.","Sequence No.");
      PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      PostedApprovalEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      PostedApprovalEntry.SETFILTER(Status, '%1', PostedApprovalEntry.Status::Approved);
      IF NOT PostedApprovalEntry.ISEMPTY THEN
        IF NOT CONFIRM(Text304, FALSE, ApprovalEntryArgument."Document Type", PurchInvHeader."No.") THEN
          ERROR('');

      IF DCApprovalsBridge.GetApprovalType = ApprovalEntryArgument."Approval Type"::"Consent Rules" THEN BEGIN
        FindPurchaseConsenters(RecRef,ApprovalEntryArgument);
        Handled := TRUE;
      END ELSE BEGIN
        IF PurchInvHeaderDCInfo.GetApprovalFlowCode(PurchInvHeader) <> '' THEN BEGIN
          FindPurchaseApprovers4PS(PurchInvHeader,PurchInvHeaderDCInfo.GetApprovalFlowCode(PurchInvHeader),ApprovalEntryArgument);
          Handled := TRUE;
        END;
      END;

      IF DCApprovalsBridge.GetApprovalType = ApprovalEntryArgument."Approval Type"::"Advanced Approver" THEN BEGIN
        AdvancedAppvlManagement4PS.SubmitForApproval4PS(RecRef);
        Handled := TRUE;
      END;

      IF Handled THEN
        ApprovalsBridge4PSConstruct.InformUserOnStatusChange(RecRef);

      IF NOT Handled THEN
        Handled := DCApprovalsBridge.CreateApprovalRequestsStandard(RecRef);
    END;

    PROCEDURE SendPurchCrMemoApprovalRequest@1100528206(RecRef@1100528205 : RecordRef);
    VAR
      PurchCrMemoHdr@1100528201 : Record 124;
      ApprovalEntryArgument@1100528213 : Record 454;
      ApprovalAmount@1100528204 : Decimal;
      ApprovalAmountLCY@1100528202 : Decimal;
      PurchSetupRec@1100528209 : Record 312;
      PurchHeadRec@1100528210 : Record 38;
      MessageID@1100528211 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval';
      VendorLedgerEntry@1100528212 : Record 25;
      ApprovalsBridge4PSConstruct@1100528200 : Codeunit 11125348;
      ApprovalEntry@1100528216 : Record 454;
      PostedApprovalEntry@1100528203 : Record 456;
      PurchCrMemoHdrDCInfo@1100528206 : Record 6085770;
      Handled@1100528207 : Boolean;
      ApprovalManagement4PSConstr@1100528208 : Codeunit 11125349;
      DCApprovalsBridge@1100528214 : Codeunit 6085790;
      AdvancedAppvlManagement4PS@1100528215 : Codeunit 11125352;
    BEGIN
      RecRef.SETTABLE(PurchCrMemoHdr);
      PurchSetupRec.GET;
      ApprovalAmount := PurchCrMemoHdr.Amount;
      ApprovalAmountLCY := PurchCrMemoHdr."Amount (LCY)";

      ApprovalEntry.SETRANGE("Table ID", DATABASE::"Purch. Cr. Memo Hdr.");
      ApprovalEntry.SETRANGE("Document Type", ApprovalEntry."Document Type"::"Credit Memo");
      ApprovalEntry.SETRANGE("Document No.", PurchCrMemoHdr."No.");
      ApprovalEntry.SETFILTER(Status, '%1|%2', ApprovalEntry.Status::Open, ApprovalEntry.Status::Created);
      IF NOT ApprovalEntry.ISEMPTY THEN
        ERROR(Text301);

      VendorLedgerEntry.SETCURRENTKEY("Document No.");
      VendorLedgerEntry.SETRANGE("Document No.", PurchCrMemoHdr."No.");
      VendorLedgerEntry.SETRANGE("Document Type", VendorLedgerEntry."Document Type"::"Credit Memo");
      IF VendorLedgerEntry.FINDFIRST THEN BEGIN
        VendorLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
        IF VendorLedgerEntry.Amount <> VendorLedgerEntry."Remaining Amount" THEN
          ERROR(Text002);
      END;

      ApprovalsBridge4PSConstruct.InitializeApprovalEntry4PS(RecRef,ApprovalEntryArgument);

      PostedApprovalEntry.SETCURRENTKEY("Table ID","Document No.","Sequence No.");
      PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      PostedApprovalEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      PostedApprovalEntry.SETFILTER(Status, '%1', PostedApprovalEntry.Status::Approved);
      IF NOT PostedApprovalEntry.ISEMPTY THEN
        IF NOT CONFIRM(Text304, FALSE, ApprovalEntryArgument."Document Type", PurchCrMemoHdr."No.") THEN
          ERROR('');

      IF DCApprovalsBridge.GetApprovalType = ApprovalEntryArgument."Approval Type"::"Consent Rules" THEN BEGIN
        FindPurchaseConsenters(RecRef,ApprovalEntryArgument);
        Handled := TRUE;
      END ELSE BEGIN
        IF PurchCrMemoHdrDCInfo.GetApprovalFlowCode(PurchCrMemoHdr) <> '' THEN BEGIN
          FindPurchaseApprovers4PS(PurchCrMemoHdr,PurchCrMemoHdrDCInfo.GetApprovalFlowCode(PurchCrMemoHdr),ApprovalEntryArgument);
          Handled := TRUE;
        END;
      END;

      IF DCApprovalsBridge.GetApprovalType = ApprovalEntryArgument."Approval Type"::"Advanced Approver" THEN BEGIN
        AdvancedAppvlManagement4PS.SubmitForApproval4PS(RecRef);
        Handled := TRUE;
      END;

      IF Handled THEN
        ApprovalsBridge4PSConstruct.InformUserOnStatusChange(RecRef);  //Must be adressed to 122/124

      IF NOT Handled THEN
        Handled := DCApprovalsBridge.CreateApprovalRequestsStandard(RecRef);
    END;

    PROCEDURE FindPurchaseApprovers4PS@161024032(Variant@161024012 : Variant;ApprovalFlowCode@1100528201 : Code[10];ApprovalEntryArgument@1000 : Record 454);
    VAR
      AppvlFlowLine@161024014 : Record 6085726;
      PurchHeaderDCInfo@1160040000 : Record 6085767;
      UserSetup@1004 : Record 91;
      DCApprovalsBridge@1003 : Codeunit 6085790;
      SequenceNo@1002 : Integer;
      DCApprovalManagement@1100528200 : Codeunit 6085722;
    BEGIN
      SequenceNo := DCApprovalsBridge.GetLastSequenceNo(ApprovalEntryArgument);
      AppvlFlowLine.SETRANGE("Approval Flow Code",ApprovalFlowCode);
      IF AppvlFlowLine.FINDSET THEN
        REPEAT
          SequenceNo += 1;
          UserSetup.GET(AppvlFlowLine."Approver ID");
          DCApprovalManagement.MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID");
        UNTIL AppvlFlowLine.NEXT = 0;
    END;

    PROCEDURE ForceApproval@161024026(Variant@1000 : Variant);
    VAR
      RecRef@1100528200 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header": ForceApprovalPostedPurchaseInvoice(RecRef);
        DATABASE::"Purch. Cr. Memo Hdr.": ForceApprovalPostedPurchaseCreditMemo(RecRef);
        DATABASE::"Purchase Header": ;
      ELSE
        ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;

      {
      IsApprovalAdminUser(TRUE);

      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

      IF NOT CONFIRM(Text012,TRUE,PurchHeader."Document Type",PurchHeader."No.") THEN
        ERROR('');
      ApprovalCmtMgnt.RequestComment(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No."); //**4PS.n

      CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);

      UserSetup.GET(GetCurrUserID);

      DCApprovalsBridge.InitializeApprovalEntry(PurchRecRef,ApprovalEntry);
      MakeApprovalEntry(ApprovalEntry,0,GetCurrUserID);

      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.FINDLAST;
      ApprovalEntry.Status := ApprovalEntry.Status::Approved;
      ApprovalEntry.MODIFY;

      CreateAppvlCmtLine(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",STRSUBSTNO(Text011,GetCurrUserID));

      //**4PS.sn Call C022022
      IF NOT ApprovePurchHeader4PS(PurchHeader)THEN BEGIN
        PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");  //refresh current record
        IF PurchHeader.Status = PurchHeader.Status::Released THEN
          ReleasePurchaseDoc.PerformManualReopen(PurchHeader);
        ApprovalEntry.Status := ApprovalEntry.Status::Open;
        ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        ApprovalEntry."Last Modified By User ID" := USERID;
        ApprovalEntry.MODIFY;
      END;
      //**4PS.en
      }
    END;

    PROCEDURE ForceApprovalPostedPurchaseInvoice@1100528217(VAR RecRef@161024012 : RecordRef);
    VAR
      UserSetup@161024016 : Record 91;
      ApprovalCmtLine@161024013 : Record 455;
      ApprovalEntryArgument@161024021 : Record 454;
      ApprovalEntry@1100528203 : Record 454;
      ApprovalAmount@161024018 : Decimal;
      ApprovalAmountLCY@161024019 : Decimal;
      ApprovalCmtMgnt@1100528200 : Codeunit 6085600;
      PurchInvHeader@1100528201 : Record 122;
      ApprovalsBridge4PSConstruct@1100528202 : Codeunit 11125348;
    BEGIN
      RecRef.SETTABLE(PurchInvHeader);
      IsApprovalAdminUser(TRUE);

      ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::Invoice;
      IF NOT CONFIRM(Text012,TRUE,ApprovalEntryArgument."Document Type",PurchInvHeader."No.") THEN
       ERROR('');

      ApprovalCmtMgnt.RequestComment4PS(2, PurchInvHeader."No."); //Make this a Workflow Step?

      ApprovalsBridge4PSConstruct.InitializeApprovalEntry4PS(RecRef,ApprovalEntryArgument);
      MakeApprovalEntry(ApprovalEntryArgument,0,GetCurrUserID);

      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      ApprovalEntry.SETRANGE("Document Type",2);
      ApprovalEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      ApprovalEntry.FINDLAST;
      ApprovalEntry.Status := ApprovalEntry.Status::Approved;
      ApprovalEntry.MODIFY;

      ApprovalCmtLine."Table ID" := DATABASE::"Purch. Inv. Header";
      ApprovalCmtLine."Document Type" := 2;
      ApprovalCmtLine."Document No." := PurchInvHeader."No.";
      ApprovalCmtLine."User ID" := USERID;
      ApprovalCmtLine."Date and Time" := CURRENTDATETIME;
      ApprovalCmtLine.Comment := STRSUBSTNO(Text011,USERID);
      ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
      ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
      ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");

      ApprovalCmtLine.INSERT(TRUE);

      ApprovePurchInvHeader4PS(PurchInvHeader);
    END;

    PROCEDURE ForceApprovalPostedPurchaseCreditMemo@1100528218(VAR RecRef@161024012 : RecordRef);
    VAR
      UserSetup@161024016 : Record 91;
      ApprovalCmtLine@161024013 : Record 455;
      ApprovalEntryArgument@161024021 : Record 454;
      ApprovalEntry@1100528203 : Record 454;
      ApprovalAmount@161024018 : Decimal;
      ApprovalAmountLCY@161024019 : Decimal;
      ApprovalCmtMgnt@1100528200 : Codeunit 6085600;
      PurchCrMemoHdr@1100528201 : Record 124;
      ApprovalsBridge4PSConstruct@1100528202 : Codeunit 11125348;
    BEGIN
      RecRef.SETTABLE(PurchCrMemoHdr);
      IsApprovalAdminUser(TRUE);

      ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::"Credit Memo";
      IF NOT CONFIRM(Text012,TRUE,ApprovalEntryArgument."Document Type",PurchCrMemoHdr."No.") THEN
       ERROR('');

      ApprovalCmtMgnt.RequestComment4PS(3, PurchCrMemoHdr."No.");

      ApprovalsBridge4PSConstruct.InitializeApprovalEntry4PS(RecRef,ApprovalEntryArgument);
      MakeApprovalEntry(ApprovalEntryArgument,0,GetCurrUserID);

      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
      ApprovalEntry.SETRANGE("Document Type",3);
      ApprovalEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      ApprovalEntry.FINDLAST;
      ApprovalEntry.Status := ApprovalEntry.Status::Approved;
      ApprovalEntry.MODIFY;

      ApprovalCmtLine."Table ID" := DATABASE::"Purch. Cr. Memo Hdr.";
      ApprovalCmtLine."Document Type" := 3;
      ApprovalCmtLine."Document No." := PurchCrMemoHdr."No.";
      ApprovalCmtLine."User ID" := USERID;
      ApprovalCmtLine."Date and Time" := CURRENTDATETIME;
      ApprovalCmtLine.Comment := STRSUBSTNO(Text011,USERID);
      ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
      ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
      ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");
      ApprovalCmtLine.INSERT(TRUE);

      ApprovePurchCrMemo4PS(PurchCrMemoHdr);
    END;

    PROCEDURE RejectPurchInvHeader4PS@1100528208(VAR PurchInvHeader@1100528201 : Record 122);
    VAR
      ApprovalEntry@1000000002 : Record 454;
      ApprovalEntry2@1100528207 : Record 454;
      ApprovalCmtMgnt@161024016 : Codeunit 6085600;
      ApprovalsBridge4PSConstruct@1100528202 : Codeunit 11125348;
      ApprovalComment@1000000004 : Page 660;
      Answer@161024012 : 'Dialog Cancelled,Send Back,Reject';
      DummyApprovalEntry@1100528200 : Record 454;
      UserSetup@1100525000 : Record 91;
      DCApprovalManagement@1100528203 : Codeunit 6085722;
      WorkFlowSetup4PSConstruct@1100528204 : Record 11229316;
      DCApprovalsBridge@1100528205 : Codeunit 6085790;
      ApprovalManagement4PSConstr@1100528206 : Codeunit 11125349;
      SelectionforDelegate@1100528208 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
    BEGIN
      ApprovalsBridge4PSConstruct.FilterApprovalEntry4PS(2,PurchInvHeader."No.",ApprovalEntry,TRUE);

      Answer := DCApprovalManagement.SendBackOrRejectApprovalReq(ApprovalEntry);
      IF Answer = Answer::"Dialog Cancelled" THEN
        ERROR('');

      WorkFlowSetup4PSConstruct.GET;

      IF (Answer = Answer::Reject) AND (WorkFlowSetup4PSConstruct."Reject and Delegate") THEN BEGIN
        UserSetup.GET(USERID);
        IF UserSetup.GET(UserSetup.Substitute) THEN;

        IF PAGE.RUNMODAL(PAGE::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
          ERROR('');
      END;

      IF Answer = Answer::"Send Back" THEN
        DCApprovalsBridge.SendBackApprovalRequest(ApprovalEntry)
      ELSE
        IF WorkFlowSetup4PSConstruct."Reject and Delegate" THEN BEGIN
          DCApprovalManagement.DelegateApprovalRequest2(ApprovalEntry,SelectionforDelegate::DelegateWithoutApproval, UserSetup."User ID");
        END ELSE
          DCApprovalsBridge.RejectApprovalRequest(ApprovalEntry);

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,USERID);

      DummyApprovalEntry."Document Type" := DummyApprovalEntry."Document Type"::Invoice;
      IF ApprovalEntry.ISEMPTY THEN BEGIN
        IF Answer = Answer::"Send Back" THEN
          MESSAGE(Text008, DummyApprovalEntry."Document Type",PurchInvHeader."No.")
        ELSE
          MESSAGE(Text007, DummyApprovalEntry."Document Type",PurchInvHeader."No.");
      END;
    END;

    PROCEDURE RejectPurchCrMemoHdr4PS@1100528207(VAR PurchCrMemoHdr@1100528200 : Record 124);
    VAR
      ApprovalEntry@1000000002 : Record 454;
      ApprovalCmtMgnt@161024016 : Codeunit 6085600;
      ApprovalComment@1000000004 : Page 660;
      Answer@161024012 : 'Dialog Cancelled,Send Back,Reject';
      DummyApprovalEntry@1100528201 : Record 454;
      UserSetup@1100525000 : Record 91;
      ApprovalsBridge4PSConstruct@1100528202 : Codeunit 11125348;
      DCApprovalManagement@1100528203 : Codeunit 6085722;
      WorkFlowSetup4PSConstruct@1100528204 : Record 11229316;
      DCApprovalsBridge@1100528205 : Codeunit 6085790;
      ApprovalManagement4PSConstr@1100528206 : Codeunit 11125349;
      SelectionforDelegate@1100528207 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
    BEGIN
      ApprovalsBridge4PSConstruct.FilterApprovalEntry4PS(3, PurchCrMemoHdr."No.",ApprovalEntry,TRUE);

      Answer := DCApprovalManagement.SendBackOrRejectApprovalReq(ApprovalEntry);

      IF Answer = Answer::"Dialog Cancelled" THEN
        ERROR('');

      WorkFlowSetup4PSConstruct.GET;

      IF (Answer = Answer::Reject) AND (WorkFlowSetup4PSConstruct."Reject and Delegate") THEN BEGIN

        UserSetup.GET(USERID);
        IF UserSetup.GET(UserSetup.Substitute) THEN;

        IF PAGE.RUNMODAL(PAGE::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
          ERROR('');

      END;

      IF Answer = Answer::"Send Back" THEN
        DCApprovalsBridge.SendBackApprovalRequest(ApprovalEntry)
      ELSE
        IF WorkFlowSetup4PSConstruct."Reject and Delegate" THEN BEGIN
          DCApprovalManagement.DelegateApprovalRequest2(ApprovalEntry,SelectionforDelegate::DelegateWithoutApproval, UserSetup."User ID");
        END ELSE
          DCApprovalsBridge.RejectApprovalRequest(ApprovalEntry);

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,USERID);

      DummyApprovalEntry."Document Type" := DummyApprovalEntry."Document Type"::"Credit Memo";
      IF ApprovalEntry.ISEMPTY THEN BEGIN
        IF Answer = Answer::"Send Back" THEN
          MESSAGE(Text008,DummyApprovalEntry."Document Type",PurchCrMemoHdr."No.")
        ELSE
          MESSAGE(Text007,DummyApprovalEntry."Document Type",PurchCrMemoHdr."No.");
      END;
    END;

    PROCEDURE IsApprovalAdminUser@161024028(ShowError@161024014 : Boolean) : Boolean;
    VAR
      DCSetup@161024019 : Record 6085573;
      AccessControl@161024013 : Record 2000000053;
      AppAdminPermCheck@161024018 : Record 6085734;
      User@6085574 : Record 2000000120;
    BEGIN
      IF AppAdminPermCheck.WRITEPERMISSION THEN
        EXIT(TRUE);

      DCSetup.GET;
      DCSetup.TESTFIELD("Approval Administrator Role ID");

      User.SETCURRENTKEY("User Name");
      User.SETRANGE("User Name",GetCurrUserID);

      IF NOT User.FINDFIRST THEN
        EXIT(FALSE);

      IF AccessControl.GET(User."User Security ID",DCSetup."Approval Administrator Role ID") THEN
        EXIT(TRUE);

      IF AccessControl.GET(User."User Security ID",DCSetup."Approval Administrator Role ID",COMPANYNAME) THEN
        EXIT(TRUE);

      IF ShowError THEN
        ERROR(Text013,DCSetup."Approval Administrator Role ID");
    END;

    PROCEDURE GetCurrUserID@11() : Code[50];
    VAR
      DCApprovalsBridge@1000 : Codeunit 6085790;
    BEGIN
      IF DCApprovalsBridge.GetCurrentUser <> '' THEN
        EXIT(DCApprovalsBridge.GetCurrentUser)
      ELSE
        EXIT(USERID);
    END;

    PROCEDURE MakeApprovalEntry@23(ApprovalEntryArgument@1007 : Record 454;SequenceNo@1001 : Integer;ApproverId@1003 : Code[50]);
    VAR
      ApprovalEntry@1002 : Record 454;
      DCApprovalsBridge@1000 : Codeunit 6085790;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        IF SequenceNo = 0 THEN
          SequenceNo := DCApprovalsBridge.GetLastSequenceNo(ApprovalEntryArgument) + 1;

        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := GetCurrUserID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := GetCurrUserID;
        "Due Date" := DCApprovalsBridge.GetApprovalDueDate;

        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";

        ApprovalEntry."Approval Type" := DCApprovalsBridge.GetApprovalType();
        ApprovalEntry."Limit Type" := DCApprovalsBridge.GetLimitType();
        "Approval Code" := ApprovalEntryArgument."Approval Code";

        "Original Approver ID" := "Approver ID";

        IF NOT (ApprovalEntry."Table ID" IN [DATABASE::"Purchase Header",
          DATABASE::"Purch. Inv. Header", DATABASE::"Purch. Cr. Memo Hdr."])
        THEN
          EXIT;

        DCApprovalsBridge.FinishApprovalEntry(ApprovalEntry,ApprovalEntryArgument);
        UpdateApprovalEntry(ApprovalEntry);
        DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry);
      END;
    END;

    PROCEDURE UpdateApprovalEntry@3(VAR ApprovalEntry@1000 : Record 454);
    VAR
      PurchHeader@1010 : Record 38;
      ApprovalsBridge@1007 : Codeunit 6085790;
      AmountExclVAT@1006 : Decimal;
      AmountInclVAT@1005 : Decimal;
      LineAmountExclVAT@1004 : Decimal;
      LineAmountInclVAT@1003 : Decimal;
      AmountExclVATLCY@1002 : Decimal;
      AmountInclVATLCY@1001 : Decimal;
      PurchDocMgt@1100528200 : Codeunit 6085709;
    BEGIN
      ApprovalEntry."Original Approver ID" := ApprovalEntry."Approver ID";

      //FIXME? FOR 122 and 124 tables
      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN
        EXIT;

      WITH ApprovalEntry DO BEGIN
        PurchHeader.GET("Document Type","Document No.");

        PurchDocMgt.GetPurchStatusAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,LineAmountExclVAT,LineAmountInclVAT);

        IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN // Needed in 9.0.
          IF (("Approver ID" = GetCurrUserID) OR ("Sender ID" = "Approver ID")) AND (NOT (("Table ID" = DATABASE::"Purchase Header") AND
              ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])))
          THEN
            Status := Status::Approved
          ELSE
            Status := Status::Created;

        IF AmountExclVAT = 0 THEN BEGIN
          AmountExclVAT := LineAmountExclVAT;
          AmountInclVAT := LineAmountInclVAT;
        END;

        IF PurchHeader."Currency Factor" = 0 THEN
          PurchHeader."Currency Factor" := 1;

        AmountExclVATLCY := ROUND(AmountExclVAT / PurchHeader."Currency Factor");
        AmountInclVATLCY := ROUND(AmountInclVAT / PurchHeader."Currency Factor");

        Amount := AmountExclVAT;
        "Amount Incl. VAT" := AmountInclVAT;
        "Amount (LCY)" := AmountExclVATLCY;
        "Amount Incl. VAT (LCY)" := AmountInclVATLCY;
      END;
    END;

    PROCEDURE OnAfterApproveApprovalRequest@161024018(VAR ApprovalEntry@1002 : Record 454);
    VAR
      PurchHeaderArchive@161024016 : Record 11072057;
      ArchiveMgt@161024014 : Codeunit 5063;
      AdvAppvlMgt@1004 : Codeunit 6085746;
      PurchInvHeader@1100528201 : Record 122;
      PurchCrMemoHdr@1100528200 : Record 124;
    BEGIN
      IF NOT (ApprovalEntry."Table ID" IN [DATABASE::"Purch. Inv. Header", DATABASE::"Purch. Cr. Memo Hdr."]) THEN
        EXIT;

      CASE ApprovalEntry."Table ID" OF
      DATABASE::"Purch. Inv. Header":
        BEGIN
          IF NOT PurchInvHeader.GET(ApprovalEntry."Document No.") THEN
            EXIT;
        END;
       DATABASE::"Purch. Cr. Memo Hdr.":
        BEGIN
          IF NOT PurchCrMemoHdr.GET(ApprovalEntry."Document No.") THEN
            EXIT;
        END;
      END;

      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver" THEN
        AdvAppvlMgt.ApproveApprovalRequest4PS(ApprovalEntry,GetCurrUserID);

      IF ApprovalEntry."Approver ID" <> GetCurrUserID THEN BEGIN
        CreateAppvlCmtLine(ApprovalEntry."Table ID",ApprovalEntry."Document Type",ApprovalEntry."Document No.",
          STRSUBSTNO(Text027,ApprovalEntry."Document Type",RemoveDomainName(GetCurrUserID),RemoveDomainName(ApprovalEntry."Approver ID")));

        ApprovalEntry."Approver ID" := GetCurrUserID;
        ApprovalEntry.MODIFY;
      END;

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,GetCurrUserID);
    END;

    PROCEDURE CreateAppvlCmtLine@6085573(TableID@1160040000 : Integer;DocType@1160040001 : Integer;DocNo@1160040002 : Code[20];Comment@6085575 : Text[80]);
    VAR
      ApprovalCmtLine@6085576 : Record 455;
    BEGIN
      ApprovalCmtLine."Table ID" := TableID;
      ApprovalCmtLine."Document Type" := DocType;
      ApprovalCmtLine."Document No." := DocNo;
      ApprovalCmtLine.Comment := Comment;

      ApprovalCmtLine.SETRANGE("Table ID",TableID);
      ApprovalCmtLine.SETRANGE("Document Type",DocType);
      ApprovalCmtLine.SETRANGE("Document No.",DocNo);

      ApprovalCmtLine.INSERT(TRUE);
    END;

    PROCEDURE ApprovePurchInvHeader4PS@1100528209(VAR PurchInvHeader@1100528200 : Record 122);
    VAR
      VendLedgEntry@1100528201 : Record 25;
      PostInvoiceApproval@1100409000 : Codeunit 11012027;
      ApprovalEntry@1100528203 : Record 454;
      InvoiceApprovalLine@1100409001 : Record 11012032;
    BEGIN
      //**4PS
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      VendLedgEntry.SETRANGE("Document Type", VendLedgEntry."Document Type"::Invoice);
      VendLedgEntry.SETRANGE("Vendor No.",PurchInvHeader."Pay-to Vendor No.");
      IF VendLedgEntry.FIND('-') THEN BEGIN
        VendLedgEntry.VALIDATE("On Hold", '');
        VendLedgEntry.MODIFY;
      END;

      PurchInvHeader.FIND('=');

      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",PurchInvHeader."No.");

      MoveApprvalEntryToPosted(ApprovalEntry,DATABASE::"Purch. Inv. Header",PurchInvHeader."No.");
      DeleteApprovalEntry(DATABASE::"Purch. Inv. Header",ApprovalEntry."Document Type"::Invoice,PurchInvHeader."No.");

      IF NOT PurchInvHeader."Invoice Approved" THEN BEGIN
        PurchInvHeader.AddToDMSWorkFlow();
        IF NOT PurchInvHeader.PostingAllowedInDMSStatus THEN
          MESSAGE(Text11012005, PurchInvHeader.TABLECAPTION, PurchInvHeader."No.",
                  PurchInvHeader.FIELDCAPTION("DMS Status"),PurchInvHeader."DMS Status")
        ELSE BEGIN
          InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchInvHeader."Journal Template");
          InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Purchase Invoice");
          InvoiceApprovalLine.SETRANGE("Document No.", PurchInvHeader."No.");
          IF InvoiceApprovalLine.FINDFIRST THEN
            PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
        END;
      END;

      //**4PS CALL C018917 sn
      ApprovalEntry.RESET;
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      IF ApprovalEntry.ISEMPTY THEN
        WebSearchMgt.UpdateWebSearchFromInvoice2(PurchInvHeader);
      //**4PS CALL C018916 en
    END;

    PROCEDURE ApprovePurchCrMemo4PS@1100528210(PurchCrMemoHdr@1100528200 : Record 124);
    VAR
      VendLedgEntry@1100528201 : Record 25;
      PostInvoiceApproval@1100409001 : Codeunit 11012027;
      ApprovalEntry@1100528203 : Record 454;
      InvoiceApprovalLine@1100409000 : Record 11012032;
    BEGIN
      //**4PS
      PurchCrMemoHdr.FIND('=');
      PurchCrMemoHdr.VALIDATE("On Hold", '');
      PurchCrMemoHdr.MODIFY(TRUE);

      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      VendLedgEntry.SETRANGE("Document Type", VendLedgEntry."Document Type"::"Credit Memo");
      VendLedgEntry.SETRANGE("Vendor No.",PurchCrMemoHdr."Pay-to Vendor No.");
      IF VendLedgEntry.FIND('-') THEN BEGIN
        VendLedgEntry."On Hold" := PurchCrMemoHdr."On Hold";
        VendLedgEntry.MODIFY;
      END;

      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::"Credit Memo");
      ApprovalEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");

      MoveApprvalEntryToPosted(ApprovalEntry,DATABASE::"Purch. Cr. Memo Hdr.",PurchCrMemoHdr."No.");
      DeleteApprovalEntry(DATABASE::"Purch. Cr. Memo Hdr.",ApprovalEntry."Document Type"::"Credit Memo",PurchCrMemoHdr."No.");

      IF NOT PurchCrMemoHdr."Credit Memo Approved" THEN BEGIN
        PurchCrMemoHdr.AddToDMSWorkFlow();
        IF NOT PurchCrMemoHdr.PostingAllowedInDMSStatus THEN
          MESSAGE(Text11012005, PurchCrMemoHdr.TABLECAPTION, PurchCrMemoHdr."No.",
                  PurchCrMemoHdr.FIELDCAPTION("DMS Status"),PurchCrMemoHdr."DMS Status")
        ELSE BEGIN
          InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchCrMemoHdr."Journal Template");
          InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Credit Memo");
          InvoiceApprovalLine.SETRANGE("Document No.", PurchCrMemoHdr."No.");
          IF InvoiceApprovalLine.FINDFIRST THEN
            PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
        END;
      END;

      //**4PS CALL C018917 sn
      ApprovalEntry.RESET;
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::"Credit Memo");
      ApprovalEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      IF ApprovalEntry.ISEMPTY THEN
        WebSearchMgt.UpdateWebSearchFromCrMemo2(PurchCrMemoHdr);
      //**4PS CALL C018916 en
    END;

    PROCEDURE MoveApprvalEntryToPosted@14(VAR ApprovalEntry@1001 : Record 454;ToTableId@1002 : Integer;ToNo@1003 : Code[20]);
    VAR
      PostedApprvlEntry@1000 : Record 456;
      ApprovalCommentLine@1004 : Record 455;
      PostedApprovalCommentLine@1005 : Record 457;
      LastSeqNo@1100528200 : Integer;
    BEGIN
      //IS THIS Function really required
      WITH ApprovalEntry DO BEGIN
        IF FIND('-') THEN
          //**4PS.sn
        BEGIN
          PostedApprvlEntry.SETRANGE("Table ID",ToTableId);
          PostedApprvlEntry.SETRANGE("Document No.","Document No.");
          IF PostedApprvlEntry.FINDLAST THEN
            LastSeqNo := PostedApprvlEntry."Sequence No."
          ELSE
            LastSeqNo := 0;
          //
          REPEAT
            PostedApprvlEntry.INIT;
            PostedApprvlEntry.TRANSFERFIELDS(ApprovalEntry);
            PostedApprvlEntry."Table ID" := ToTableId;
            PostedApprvlEntry."Document No." := ToNo;
            //**4PS.sn
            PostedApprvlEntry."Sequence No." := LastSeqNo + 1;
            LastSeqNo := PostedApprvlEntry."Sequence No.";
            //**4PS.sn
            IF PostedApprvlEntry.INSERT THEN;
          UNTIL NEXT = 0;
        END; //**4PS.n
        ApprovalCommentLine.SETRANGE("Table ID","Table ID");
        ApprovalCommentLine.SETRANGE("Document Type","Document Type");
        ApprovalCommentLine.SETRANGE("Document No.","Document No.");
        IF ApprovalCommentLine.FIND('-') THEN
          REPEAT
            PostedApprovalCommentLine.INIT;
            PostedApprovalCommentLine.TRANSFERFIELDS(ApprovalCommentLine);
            PostedApprovalCommentLine."Entry No." := 0;
            PostedApprovalCommentLine."Table ID" := ToTableId;
            PostedApprovalCommentLine."Document No." := ToNo;
            PostedApprovalCommentLine.INSERT(TRUE);
          UNTIL ApprovalCommentLine.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteApprovalEntry@9(TableId@1000 : Integer;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      ApprovalEntry@1003 : Record 454;
    BEGIN
      //IS THIS Function really required
      ApprovalEntry.SETRANGE("Table ID",TableId);
      ApprovalEntry.SETRANGE("Document Type",DocumentType);
      ApprovalEntry.SETRANGE("Document No.",DocumentNo);
      DeleteApprovalCommentLine(TableId,DocumentType,DocumentNo);
      IF ApprovalEntry.FINDFIRST THEN
        ApprovalEntry.DELETEALL;
    END;

    PROCEDURE DeleteApprovalCommentLine@15(TableId@1002 : Integer;DocumentType@1001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1000 : Code[20]);
    VAR
      ApprovalCommentLine@1003 : Record 455;
    BEGIN
      //IS THIS Function really required
      ApprovalCommentLine.SETRANGE("Table ID",TableId);
      ApprovalCommentLine.SETRANGE("Document Type",DocumentType);
      ApprovalCommentLine.SETRANGE("Document No.",DocumentNo);
      IF ApprovalCommentLine.FINDFIRST THEN
        ApprovalCommentLine.DELETEALL;
    END;

    PROCEDURE RemoveDomainName@1160040003(UserName@1160040000 : Code[250]) : Text[250];
    BEGIN
      IF STRPOS(UserName,'\') = 0 THEN
        EXIT(UserName);

      EXIT(COPYSTR(UserName,LastIndexOf(UserName,'\',TRUE)+1));
    END;

    PROCEDURE HasUserDocumentPermission@161024022(ApprovalEntry@161024012 : Record 454) IsValidApprover : Boolean;
    VAR
      ApprovalEntry2@161024014 : Record 454;
      ApprovalSharing@161024016 : Record 6085749;
      UserSetup@161024017 : Record 91;
    BEGIN
      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver" THEN
        EXIT(TRUE);

      IF ApprovalEntry."Approver ID" = GetCurrUserID THEN
        EXIT(TRUE);

      ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry."Sequence No.");
      IF NOT ApprovalEntry2.ISEMPTY THEN
        EXIT(TRUE);

      FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID);
      ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
      IF ApprovalSharing.FINDSET THEN
        REPEAT
          IF ApprovalSharing."Use Owners Limts & Permissions" THEN
            UserSetup.GET(ApprovalSharing."Owner User ID")
          ELSE
            UserSetup.GET(ApprovalSharing."Shared to User ID");

          IF UserSetup."Unlimited Purchase Approval" THEN
            IsValidApprover := TRUE
          ELSE IF UserSetup."Purchase Amount Approval Limit" >= ApprovalEntry."Amount (LCY)" THEN
            IsValidApprover := TRUE
        UNTIL (ApprovalSharing.NEXT = 0) OR IsValidApprover;
    END;

    PROCEDURE LastIndexOf@1160040005(Text@161024012 : Text[1024];CharToFind@161024013 : Text[1];IgnoreCase@161024014 : Boolean) : Integer;
    VAR
      StartIndex@161024015 : Integer;
    BEGIN
      IF IgnoreCase THEN BEGIN
        Text := UPPERCASE(Text);
        CharToFind := UPPERCASE(CharToFind);
      END;

      StartIndex := STRLEN(Text);
      WHILE StartIndex > 0 DO BEGIN
        IF COPYSTR(Text,StartIndex,1) = CharToFind THEN
          EXIT(StartIndex)
        ELSE
          StartIndex -= 1;
      END;
    END;

    PROCEDURE FilterApprovalSharingToUser@161024012(VAR ApprovalSharing@161024012 : Record 6085749;_UserId@161024013 : Code[50]) : Boolean;
    BEGIN
      ApprovalSharing.RESET;
      ApprovalSharing.SETCURRENTKEY("Shared to User ID");
      ApprovalSharing.SETRANGE("Shared to User ID",_UserId);
      ApprovalSharing.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharing.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharing.FINDFIRST);
    END;

    PROCEDURE ApprovePurchHeaderDC@1000000011(VAR PurchHeader@1000000000 : Record 38) : Boolean;
    VAR
      DCSetup@1000000006 : Record 6085573;
      SalesHeader@1000000008 : Record 36;
      PurchDocMgnt@1000000001 : Codeunit 6085709;
      ApprovalManagement4PSConstr@1100528201 : Codeunit 11125349;
      AmountExclVAT@1000000005 : Decimal;
      AmountInclVAT@1000000004 : Decimal;
      LineAmountExclVAT@1000000003 : Decimal;
      LineAmountInclVAT@1000000002 : Decimal;
      AutomaticApprovalstartUp@1100409000 : Boolean;
      PurchaseHeaderDCInfo@1100525000 : Record 6085767;
      WorkFlowSetup4PSConstruct@1100528200 : Record 11229316;
    BEGIN
      //**4PS  DC

      PurchHeader.FIND('=');
      WorkFlowSetup4PSConstruct.GET;//CALL C020358

      IF PurchHeader."Ext. Document ID" <> '' THEN BEGIN
        IF PurchDocMgnt.DocumentExists(PurchHeader) THEN BEGIN
          AutomaticApprovalstartUp := PurchDocMgnt.TemplateStep2Approve(PurchHeader); //CALL C020358
          //**4PS Call C020358 sn
          IF NOT (
               (WorkFlowSetup4PSConstruct."Appr. P. Hdr. And P. I. Hdr.") AND (PurchaseHeaderDCInfo.GetApprovalFlowCode(PurchHeader) <> '')
                 )
          THEN BEGIN
          // NOT (Purchase Order Send for Advice to another Approver. Thus the amounts may be incorrect.)
          //**4PS Call C020358 en
            PurchDocMgnt.GetPurchStatusAmounts(PurchHeader, AmountExclVAT, AmountInclVAT, LineAmountExclVAT, LineAmountInclVAT);
            IF NOT PurchHeader."Manually VAT Posting" THEN BEGIN
              IF (AmountInclVAT <> LineAmountInclVAT) OR (AmountExclVAT <> LineAmountExclVAT) THEN
                ERROR(Text302);
            END ELSE
              IF (AmountInclVAT <> LineAmountInclVAT) THEN // Deviation amount excl. VAT is allowed.
                ERROR(Text302);
          END;//**4PS Call C020358
        END;
      END;

      IF AutomaticApprovalstartUp THEN BEGIN //CALL C020358
        IF NOT WorkFlowSetup4PSConstruct."Purch. Hdr. Inv. Keep On Hold" THEN //CALL C020358
          PurchHeader.VALIDATE("On Hold", '');
        PurchHeader.MODIFY(TRUE);
      //CALL C020358 sn
      END ELSE BEGIN
        IF NOT WorkFlowSetup4PSConstruct."Purch. Hdr. Inv. Keep On Hold" THEN
          PurchHeader.VALIDATE("On Hold", '');
        PurchaseHeaderDCInfo.UpdateApprovalFlowCodeDirect(PurchHeader, '');
        //PurchHeader."Approval Flow Code" := '';
        //PurchHeader.MODIFY(TRUE);
      END;
      //CALL C020358 en

      DCSetup.GET;
      IF DCSetup."Purch: Automatic Post" THEN BEGIN
      //**4PS Call C022022 sn
        IF NOT ApprovalManagement4PSConstr.PrePostApprovalCheckPurch(PurchHeader) THEN
          EXIT(FALSE);
        COMMIT;
        IF NOT CODEUNIT.RUN(CODEUNIT::"Purch.-Post", PurchHeader) THEN BEGIN
          MESSAGE('%1', GETLASTERRORTEXT);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
      //**4PS Call C022022 en
    END;

    PROCEDURE FinishApprovals@1100528212(Variant@1000 : Variant);
    VAR
      RecRef@1100528200 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header": FinishApprovalEntryPurchInv(Variant);
        DATABASE::"Purch. Cr. Memo Hdr.": FinishApprovalEntryPurchCrM(Variant);
        DATABASE::"Purchase Header": ;
      ELSE
        ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    PROCEDURE FinishApprovalEntryPurchInv@1100528216(VAR PurchInvHeader@1000 : Record 122);
    VAR
      DocReleased@1010 : Boolean;
      ApprovalEntry@1011 : Record 454;
      MessageID@1100528201 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval';
      IsOpenStatusSet@1100528200 : Boolean;
      lKeepOnhold@1100528202 : Boolean;
      ApprovalManagement4PSConstr@1100528203 : Codeunit 11125349;
    BEGIN
      //**4PS
      DocReleased := FALSE;
      IsOpenStatusSet := FALSE;
      lKeepOnhold := TRUE;

      WITH ApprovalEntry DO BEGIN
        INIT;
        SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
        SETRANGE("Document No.",PurchInvHeader."No.");
        SETRANGE(Status,Status::Created,Status::Open);
        //FIXME only one open approval entry
        //SETRANGE(Status,Status::Created);
        IF FINDSET(TRUE,FALSE) THEN
        //  REPEAT
        //    IF NOT IsOpenStatusSet THEN BEGIN
        //      IsOpenStatusSet := TRUE;
        //      Status := Status::Open;
        //      MODIFY;
        //      IF ApprovalSetup.Approvals THEN
        //        ApprovalsMgtNotification.SendPurchaseApprovalsMail4PS(2,PurchInvHeader."No.",ApprovalEntry);
        //    END;
        //  UNTIL NEXT = 0
          DocReleased := FALSE;

        IF (NOT IsOpenStatusSet) AND (NOT lKeepOnhold) THEN BEGIN
          SETRANGE(Status);
          IF FINDLAST THEN
            //DocReleased := OnApproveApprovalRequest(ApprovalEntry)
          //ELSE
            //DocReleased := TRUE
            ;
        END;
        PurchInvHeader.FIND('=');


        IF DocReleased THEN BEGIN
          MessageID := MessageID::AutomaticRelease;
        END ELSE BEGIN
          IF PurchInvHeader."On Hold" = '' THEN
            ApprovalManagement4PSConstr.PutOnHold(2, PurchInvHeader."No.",FALSE,FALSE,FALSE);
          MessageID := MessageID::RequiresApproval;
          //CALL C018917  sn
          //ApprovalManagement4PSConstr.ResetWebDocSearch4PS(2,PurchInvHeader."No.")
          //CALL C018917  en
        END;
      END;
    END;

    PROCEDURE FinishApprovalEntryPurchCrM@1100528215(VAR PurchCrMemoHdr@1100528201 : Record 124);
    VAR
      DocReleased@1010 : Boolean;
      ApprovalEntry@1011 : Record 454;
      MessageID@1100528202 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval';
      IsOpenStatusSet@1100528200 : Boolean;
      ApprovalManagement4PSConstr@1100528203 : Codeunit 11125349;
    BEGIN
      //**4PS
      DocReleased := FALSE;
      IsOpenStatusSet := FALSE;
      WITH ApprovalEntry DO BEGIN
        INIT;
        SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        SETRANGE("Document Type",ApprovalEntry."Document Type"::"Credit Memo");
        SETRANGE("Document No.",PurchCrMemoHdr."No.");
        SETRANGE(Status,Status::Created,Status::Open);
        IF FINDSET(TRUE,FALSE) THEN
          //REPEAT
          //
          //   IF NOT IsOpenStatusSet THEN BEGIN
          //    Status := Status::Open;
          //    MODIFY;
          //    IsOpenStatusSet := TRUE;
          //    IF ApprovalSetup.Approvals THEN
          //      ApprovalsMgtNotification.SendPurchaseApprovalsMail4PS(3,PurchCrMemoHdr."No.",ApprovalEntry);
          //  END;
          //UNTIL NEXT = 0;
          DocReleased := FALSE;

      //  IF (NOT IsOpenStatusSet) AND (NOT lKeepOnHold) THEN BEGIN
      //    SETRANGE(Status);
      //    IF FINDLAST THEN
      //      DocReleased := ApproveApprovalRequest(ApprovalEntry)
      //    ELSE
      //      DocReleased := TRUE;

          PurchCrMemoHdr.FIND('=');
      //  END;

        IF DocReleased THEN BEGIN
          MessageID := MessageID::AutomaticRelease;
        END ELSE BEGIN
          IF PurchCrMemoHdr."On Hold" = '' THEN
            ApprovalManagement4PSConstr.PutOnHold(3, PurchCrMemoHdr."No.",FALSE, FALSE, FALSE);
          MessageID := MessageID::RequiresApproval;
          //CALL C018917  sn
          //DCApprovalMgnt.ResetWebDocSearch4PS(3,PurchCrMemoHdr."No.")
          //CALL C018917  en
        END;

      END;
    END;

    BEGIN
    END.
  }
}

