OBJECT Codeunit 11125400 Trade Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CreatePurchOrderFromSalesLines@1000000000(VAR SalesLine@1000000000 : Record 37);
    VAR
      ReqLine@1000000001 : Record 246;
      PurchOrderHeader@1000000002 : Record 38;
      ReqWkshTemplate@1000000003 : Record 244;
      ReqWkshBatchName@1000000004 : Record 245;
      Item2@1000000005 : Record 27;
      Purchasing@1000000006 : Record 5721;
      ReqWkshMakeOrders@1000000007 : Codeunit 333;
      VendorNo@1000000008 : Code[20];
      RequestedReceiptDate@1000000009 : Date;
      Text001@1000000012 : TextConst 'ENU=Supplier can not be inserted when %1 is allowed in %2';
      Text002@1000000010 : TextConst 'ENU=Specify %1.';
      Text003@1000000011 : TextConst 'ENU=Insert %1.';
    BEGIN
      SalesLine.SETRANGE(Type, SalesLine.Type::Item);
      SalesLine.SETFILTER("Purchasing Code", '<>%1', '');
      SalesLine.SETFILTER("Purchase Order No.", '=%1', '');
      SalesLine.SETFILTER("Special Order Purchase No.", '=%1', '');

      IF SalesLine.FIND('-') THEN
        REPEAT
          IF (Purchasing.GET(SalesLine."Purchasing Code")) AND
             (Purchasing."Drop Shipment" OR Purchasing."Special Order")
          THEN
            SalesLine.MARK(TRUE);
        UNTIL SalesLine.NEXT = 0;

      SalesLine.MARKEDONLY(TRUE);

      IF SalesLine.FINDFIRST THEN BEGIN
        IF SalesLine.COUNT = 1 THEN BEGIN
          Item2.GET(SalesLine."No.");
      {??
          IF SalesLine."Vendor No." <> '' THEN
            VendorNo := SalesLine."Vendor No."
          ELSE
            VendorNo := Item2."Vendor No.";
      }
          RequestedReceiptDate := SalesLine."Shipment Date";
        END ELSE BEGIN
          VendorNo := '';
          RequestedReceiptDate := 0D;
        END;

      //  SelectPurchOptions.SetOptions(VendorNo, RequestedReceiptDate);
      //  IF SelectPurchOptions.RUNMODAL <> ACTION::OK THEN
      //    EXIT;
      //  SelectPurchOptions.GetOptions(VendorNo, RequestedReceiptDate);

        IF VendorNo = '' THEN
          ERROR(Text002, Item2.FIELDCAPTION("Vendor No."));

        IF RequestedReceiptDate = 0D THEN
          ERROR(Text003, PurchOrderHeader.FIELDCAPTION("Requested Receipt Date"));

        ReqWkshTemplate.SETRANGE(Type, ReqWkshTemplate.Type::"Req.");
        ReqWkshTemplate.FIND('-');
        ReqWkshBatchName.SETRANGE("Worksheet Template Name", ReqWkshTemplate.Name);
        ReqWkshBatchName.FIND('-');

        ReqLine."Worksheet Template Name" := ReqWkshTemplate.Name;
        ReqLine."Journal Batch Name" := ReqWkshBatchName.Name;

        REPEAT
          InsertReqWkshLineFromSalesLine(SalesLine, ReqLine, VendorNo, RequestedReceiptDate);
        UNTIL SalesLine.NEXT = 0;

      END ELSE BEGIN
        MESSAGE(Text001);
        EXIT;
      END;

      PurchOrderHeader."Order Date" := WORKDATE;
      PurchOrderHeader."Posting Date" := WORKDATE;
      PurchOrderHeader."Expected Receipt Date" := RequestedReceiptDate;

      ReqLine.RESET;
      ReqLine.SETRANGE("Sales Order No.", SalesLine."Document No.");

      ReqWkshMakeOrders.SetPlanningResiliency;
      ReqWkshMakeOrders.Set(PurchOrderHeader, 0D, FALSE);
      //ReqWkshMakeOrders.InitializeParameters;

      IF ReqLine.FIND('-') THEN
        REPEAT
          ReqWkshMakeOrders.RUN(ReqLine);
        UNTIL ReqLine.NEXT = 0;

      ReqLine.RESET;
      ReqLine.SETRANGE("Sales Order No.", SalesLine."Document No.");
      ReqLine.DELETEALL;
    END;

    PROCEDURE InsertReqWkshLineFromSalesLine@1000000001(SalesLine@1000000000 : Record 37;VAR ReqLine@1000000001 : Record 246;VendorNo@1000000002 : Code[20];RequestedReceiptDate@1000000003 : Date);
    VAR
      SalesHeader@1000000004 : Record 36;
      LeadTimeMgt@1000000005 : Codeunit 5404;
    BEGIN
      ReqLine.RESET;
      ReqLine.SETCURRENTKEY(Type,"No.");
      ReqLine.SETRANGE(Type, SalesLine.Type);
      ReqLine.SETRANGE("No.", SalesLine."No.");
      ReqLine.SETRANGE("Sales Order No.", SalesLine."Document No.");
      ReqLine.SETRANGE("Sales Order Line No.", SalesLine."Line No.");
      IF ReqLine.FINDFIRST THEN
        EXIT;

      ReqLine.RESET;
      IF ReqLine.FINDLAST THEN;

      WITH ReqLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE(Type, SalesLine.Type);
        VALIDATE("No.", SalesLine."No.");
        "Variant Code" := SalesLine."Variant Code";
        VALIDATE("Location Code", SalesLine."Location Code");
        "Bin Code" := SalesLine."Bin Code";
        VALIDATE("Replenishment System", "Replenishment System"::Purchase);
        IF NOT SalesLine."Special Order" THEN
          VALIDATE("Unit of Measure Code", SalesLine."Unit of Measure Code");
        VALIDATE(
          Quantity,
          SalesLine."Outstanding Quantity" *
          SalesLine."Qty. per Unit of Measure" /
          "Qty. per Unit of Measure");
        "Sales Order No." := SalesLine."Document No.";
        "Sales Order Line No." := SalesLine."Line No.";
        "Sell-to Customer No." := SalesLine."Sell-to Customer No.";
        SalesHeader.GET(1, SalesLine."Document No.");
        "Ship-to Code" := SalesHeader."Ship-to Code";
        "Item Category Code" := SalesLine."Item Category Code";
        Nonstock := SalesLine.Nonstock;
        "Action Message" := ReqLine."Action Message"::New;
        "Product Group Code" := SalesLine."Product Group Code";
        "Purchasing Code" := SalesLine."Purchasing Code";
        "Due Date" := RequestedReceiptDate;
        IF VendorNo <> '' THEN
          VALIDATE("Vendor No.", VendorNo);
        "Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(
            "No.","Location Code","Variant Code","Due Date","Vendor No.","Ref. Order Type");
        CalcStartingDate('');
        UpdateDatetime;
        INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

