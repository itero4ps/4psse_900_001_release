OBJECT Codeunit 11125667 Copy Constr. Spec. to Estimate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CopyConstrSpecToEstimate@1100525000(EstimateNo@1100525000 : Code[20];ConstrSpecNo@1100525001 : Code[20]);
    VAR
      ConstrSpecElemLineRAW@1100525002 : Record 11125670;
      EstimateRAW@1100525009 : Record 11012151;
      EstimateElementRAW@1100525003 : Record 11125679;
      EstimateElementRAW2@1100525005 : Record 11125679;
      EstimateRAWRecipeSel@1100525007 : Record 11125674;
      EstimateLineRAW@1100525008 : Record 11125680;
      DefiCodes@1100525006 : ARRAY [6] OF Code[1];
      NextLineNo@1100525004 : Integer;
    BEGIN
      ConstrSpecElemLineRAW.SETRANGE("Specification No.", ConstrSpecNo);

      EstimateRAW.GET(EstimateNo);
      EstimateRAW.TESTFIELD(Finished, FALSE);
      EstimateRAW."Construction Spec. No." := ConstrSpecNo;
      EstimateRAW.MODIFY;

      IF ConstrSpecElemLineRAW.FINDSET THEN
        REPEAT
          NextLineNo := NextLineNo + 10000;

          IF ConstrSpecElemLineRAW."External Unit of Measure Code" <> '' THEN
            ConstrSpecElemLineRAW.TESTFIELD("Internal Unit of Measure Code");

          EstimateElementRAW.INIT;
          EstimateElementRAW.VALIDATE("Estimate No.", EstimateNo); // jhoek.090210: was assignment
          EstimateElementRAW."Element No." := ConstrSpecElemLineRAW."Element No.";
          EstimateElementRAW."Line No." := NextLineNo;
          EstimateElementRAW.Type := ConstrSpecElemLineRAW.Type;
          EstimateElementRAW.Source := EstimateElementRAW.Source::"Construction Specification";
          EstimateElementRAW."Defi Code Position 1" := ConstrSpecElemLineRAW."Defi Code Position 1";
          EstimateElementRAW."Defi Code Position 2" := ConstrSpecElemLineRAW."Defi Code Position 2";
          EstimateElementRAW."Defi Code Position 3" := ConstrSpecElemLineRAW."Defi Code Position 3";
          EstimateElementRAW."Defi Code Position 4" := ConstrSpecElemLineRAW."Defi Code Position 4";
          EstimateElementRAW."Defi Code Position 5" := ConstrSpecElemLineRAW."Defi Code Position 5";
          EstimateElementRAW."Defi Code Position 6" := ConstrSpecElemLineRAW."Defi Code Position 6";
          EstimateElementRAW."Construction Spec. Line No." := ConstrSpecElemLineRAW."Line No.";
          EstimateElementRAW.VALIDATE(Activity, ConstrSpecElemLineRAW.Activity);
          EstimateElementRAW.Commitment := ConstrSpecElemLineRAW.Commitment;
          EstimateElementRAW.Text := ConstrSpecElemLineRAW.Text;
          EstimateElementRAW.Title := ConstrSpecElemLineRAW.Title;
          EstimateElementRAW.Indentation := ConstrSpecElemLineRAW.Indentation;
          EstimateElementRAW.Quantity := ConstrSpecElemLineRAW.Quantity;
          EstimateElementRAW."External Unit of Measure Code" := ConstrSpecElemLineRAW."External Unit of Measure Code";
          EstimateElementRAW."Internal Unit of Measure Code" := ConstrSpecElemLineRAW."Internal Unit of Measure Code";

          // General costs are always EUR-entries
          IF COPYSTR(EstimateElementRAW."Element No.", 1, 2) = '91' THEN BEGIN
            EstimateElementRAW."Internal Unit of Measure Code" := 'EUR';
            EstimateElementRAW."External Unit of Measure Code" := 'EUR';
            EstimateElementRAW."Calculated Unit Price" := 1;
          END;

          EstimateElementRAW."Quantity Type" := ConstrSpecElemLineRAW."Quantity Type";
          EstimateElementRAW.INSERT;

          // Line '00' should contain the quantity; copy it from line '01'
          // IF EstimateElementRAW.Quantity <> 0 THEN // **4ps.o
            IF EstimateElementRAW."Construction Spec. Line No." = '01' THEN BEGIN
              EstimateElementRAW2.SETRANGE("Estimate No.", EstimateElementRAW."Estimate No.");
              EstimateElementRAW2.SETRANGE("Element No.", EstimateElementRAW."Element No.");
              EstimateElementRAW2.SETRANGE("Defi Code Position 1", EstimateElementRAW."Defi Code Position 1");
              EstimateElementRAW2.SETRANGE("Defi Code Position 2", EstimateElementRAW."Defi Code Position 2");
              EstimateElementRAW2.SETRANGE("Defi Code Position 3", EstimateElementRAW."Defi Code Position 3");
              EstimateElementRAW2.SETRANGE("Defi Code Position 4", EstimateElementRAW."Defi Code Position 4");
              EstimateElementRAW2.SETRANGE("Defi Code Position 5", EstimateElementRAW."Defi Code Position 5");
              EstimateElementRAW2.SETRANGE("Defi Code Position 6", EstimateElementRAW."Defi Code Position 6");
              EstimateElementRAW2.SETRANGE("Construction Spec. Line No.", '00');
              IF EstimateElementRAW2.FINDFIRST THEN BEGIN
                EstimateElementRAW2.Quantity := EstimateElementRAW.Quantity;
                EstimateElementRAW2."External Unit of Measure Code" := EstimateElementRAW."External Unit of Measure Code";
                EstimateElementRAW2."Internal Unit of Measure Code" := EstimateElementRAW."Internal Unit of Measure Code";
                // EstimateElementRAW2."Quantity Type" := EstimateElementRAW."Quantity Type";
                EstimateElementRAW2.MODIFY;
              END;
            END;

          IF IsStelpost(EstimateElementRAW."Element No.") THEN BEGIN
            IF EstimateElementRAW.Type = EstimateElementRAW.Type::"Commitment (Main Line)" THEN BEGIN
              IF EstimateElementRAW."Construction Spec. Line No." = '01' THEN BEGIN
                EstimateLineRAW.INIT;
                EstimateLineRAW."Estimate No." := EstimateNo;
                EstimateLineRAW."Element No." := EstimateElementRAW."Element No.";
                EstimateLineRAW."Line No." := 10000;
                EstimateLineRAW.INSERT(TRUE);
                EstimateLineRAW.Source := EstimateLineRAW.Source::Summary; // jh080110
                EstimateLineRAW."VAT Prod. Posting Group" := EstimateRAW."VAT Prod. Posting Group (H)";
                //EstimateLineRAW."Summary Line" := TRUE;  //db, 21-09-10
                EstimateLineRAW."Ignore Part Quantity" := TRUE;
                // jhoek.081010.begin
                // EstimateLineRAW.Quantity := EstimateElementRAW.Quantity;
                EstimateLineRAW.VALIDATE(Quantity, EstimateElementRAW.Quantity);
                // jhoek.081010.end
                EstimateLineRAW."Sundry Price" := 1;
                EstimateLineRAW.Description := EstimateElementRAW.Text;
                EstimateLineRAW.CalculateTotals;
                EstimateLineRAW.MODIFY;
              END;
            END;
          END;
        UNTIL ConstrSpecElemLineRAW.NEXT = 0;

      EstimateElementRAW.RESET;
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETFILTER("Element No.", '<%1', '9'); // jhoek180110

      IF EstimateElementRAW.FINDSET(TRUE, FALSE) THEN
        REPEAT
          // Find recipe selection
          IF EstimateElementRAW."Construction Spec. Line No." = '00' THEN BEGIN
            IF STRLEN(EstimateElementRAW."Element No.") = 6 THEN BEGIN
              EstimateElementRAW.CombineDefiCodes(DefiCodes);
              EstimateElementRAW.VALIDATE(
                "Recipe No.",
                EstimateRAWRecipeSel.FindRecipeNo(
                  EstimateElementRAW.Activity,
                  DefiCodes[1],
                  DefiCodes[2],
                  DefiCodes[3],
                  DefiCodes[4],
                  DefiCodes[5],
                  DefiCodes[6]));
              CopyActivityLines(EstimateElementRAW, DefiCodes);  //db, 18-03-16
              EstimateElementRAW.MODIFY;
            END;
          END;
        UNTIL EstimateElementRAW.NEXT = 0;
    END;

    PROCEDURE IsStelpost@1100525002(ElementNo@1100525000 : Text[6]) : Boolean;
    BEGIN
      IF STRLEN(ElementNo) <> 6 THEN
        EXIT(FALSE);
      IF COPYSTR(ElementNo, 1, 2) <> '95' THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CopyActivityLines@1100525001(EstimateElementRAW@1100525001 : Record 11125679;DefiCodes@1100525005 : ARRAY [6] OF Code[1]);
    VAR
      EstimateRAW@1100525004 : Record 11012151;
      ConstrSpecActLineRAW@1100525000 : Record 11125683;
      EstimateLineRAW@1100525002 : Record 11125680;
      CommentLineRAW@1100525006 : Record 11125684;
      LastLine@1100525003 : Integer;
    BEGIN
      //db, 18-03-16
      EstimateRAW.GET(EstimateElementRAW."Estimate No.");
      IF EstimateRAW."Copy Part Lines"= FALSE THEN EXIT;

      ConstrSpecActLineRAW.SETRANGE("Part Group", EstimateRAW."Part Group");
      ConstrSpecActLineRAW.SETRANGE(Activity, EstimateElementRAW.Activity);
      IF ConstrSpecActLineRAW.FINDSET THEN BEGIN
        EstimateLineRAW.SETRANGE("Estimate No.", EstimateElementRAW."Estimate No.");
        EstimateLineRAW.SETRANGE("Element No.", EstimateElementRAW."Element No.");
        IF EstimateLineRAW.FINDLAST THEN
          LastLine := EstimateLineRAW."Line No.";
        REPEAT
          IF MatchDefiCode(ConstrSpecActLineRAW, DefiCodes) THEN BEGIN
            EstimateLineRAW."Estimate No." := EstimateElementRAW."Estimate No.";
            EstimateLineRAW."Element No." := EstimateElementRAW."Element No.";
            EstimateLineRAW."Line No." := LastLine + 10000;
            LastLine := EstimateLineRAW."Line No.";
            EstimateLineRAW.INSERT(TRUE);
            //
            EstimateLineRAW.Source := EstimateLineRAW.Source::User;  //do not use option Recipe;
            EstimateLineRAW."Recipe Group" := ConstrSpecActLineRAW."Recipe Group";
            EstimateLineRAW."Recipe No." := ConstrSpecActLineRAW.Recipe;
            IF ConstrSpecActLineRAW.Recipe <> '' THEN
              EstimateLineRAW."Recipe Type" := EstimateLineRAW."Recipe Type"::"Recipe Header"
            ELSE
              CLEAR(EstimateLineRAW."Recipe Type");
            EstimateLineRAW."Plant Type" := ConstrSpecActLineRAW."Plant Type";
            EstimateLineRAW."Item No." := ConstrSpecActLineRAW."Item No.";
            EstimateLineRAW.Manufacturer := ConstrSpecActLineRAW.Manufacturer;
            EstimateLineRAW."Basic Item" := ConstrSpecActLineRAW."Basic Item";
            EstimateLineRAW."Vendor (Trade Item)" := ConstrSpecActLineRAW."Vendor (Trade Item)";
            EstimateLineRAW."Trade Item" := ConstrSpecActLineRAW."Trade Item";
            EstimateLineRAW.Description := ConstrSpecActLineRAW.Description;
            EstimateLineRAW."Time Quantity" := ConstrSpecActLineRAW."Time Quantity";
            EstimateLineRAW."Unit of Time" := ConstrSpecActLineRAW."Unit of Time";
            EstimateLineRAW.VALIDATE(Quantity, ConstrSpecActLineRAW.Quantity);
            EstimateLineRAW."Unit of Measure" := ConstrSpecActLineRAW."Unit of Measure";
            EstimateLineRAW."Cost Object Labor" := ConstrSpecActLineRAW."Cost Object Labor";
            IF ConstrSpecActLineRAW."Cost Type (Price)" = ConstrSpecActLineRAW."Cost Type (Price)"::Material THEN
              EstimateLineRAW."Cost Object Material" := ConstrSpecActLineRAW."Cost Object Price";
            IF ConstrSpecActLineRAW."Cost Type (Price)" = ConstrSpecActLineRAW."Cost Type (Price)"::Subcontracting THEN
              EstimateLineRAW."Cost Object Subcontracting" := ConstrSpecActLineRAW."Cost Object Price";
            IF ConstrSpecActLineRAW."Cost Type (Price)" = ConstrSpecActLineRAW."Cost Type (Price)"::Plant THEN
              EstimateLineRAW."Cost Object Plant" := ConstrSpecActLineRAW."Cost Object Price";
            EstimateLineRAW."Sub Operation Code" := ConstrSpecActLineRAW."Sub Operation Code";
            EstimateLineRAW.Norm := ConstrSpecActLineRAW.Norm;
            EstimateLineRAW."Production Rate" := ConstrSpecActLineRAW."Production Rate";
            EstimateLineRAW."Rate Code" := ConstrSpecActLineRAW."Rate Code";
            EstimateLineRAW."Gross Price" := ConstrSpecActLineRAW."Gross Price";
            EstimateLineRAW."Purchase Discount %" := ConstrSpecActLineRAW."Purchase Discount %";
            EstimateLineRAW."Material Price" := ConstrSpecActLineRAW."Nett Cost Price";
            EstimateLineRAW."Sales Discount %" := ConstrSpecActLineRAW."Sales Discount %";
            //EstimateLineRAW."Nett Sales Price" := ConstrSpecActLineRAW."Nett Sales Price";
            EstimateLineRAW.VALIDATE("Part Quantity", EstimateElementRAW.Quantity);
            EstimateLineRAW.CalculateTotals;
            EstimateLineRAW.MODIFY;
            //
            IF ConstrSpecActLineRAW.Recipe <> '' THEN BEGIN
              CommentLineRAW.CopyCommentRecipeToEstLine(EstimateLineRAW."Recipe Group", EstimateLineRAW."Recipe No.", 0, EstimateLineRAW);  //DP01086
              EstimateLineRAW.AddLineFromStandardRecipe(
                EstimateLineRAW."Estimate No.", EstimateLineRAW."Element No.",
                EstimateLineRAW."Recipe Group", EstimateLineRAW."Recipe No.",
                EstimateLineRAW."Line No.",
                EstimateLineRAW."Recipe Type"::"Recipe Line",
                EstimateLineRAW."Part Quantity",
                EstimateLineRAW.Source);
              IF EstimateLineRAW.FINDLAST THEN
                LastLine := EstimateLineRAW."Line No.";
            END;
          END;
        UNTIL ConstrSpecActLineRAW.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE MatchDefiCode@1100525003(ConstrSpecActLineRAW@1100525001 : Record 11125683;DefiCodes@1100525003 : ARRAY [6] OF Code[1]) : Boolean;
    VAR
      EstimateElementRAW2@1100525002 : Record 11125679;
    BEGIN
      //db, 18-03-16
      IF ConstrSpecActLineRAW."Defi Code Position 1" <> '' THEN
        IF NOT CodeInFilter(DefiCodes[1], ConstrSpecActLineRAW."Defi Code Position 1") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 2" <> '' THEN
        IF NOT CodeInFilter(DefiCodes[2], ConstrSpecActLineRAW."Defi Code Position 2") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 3" <> '' THEN
        IF NOT CodeInFilter(DefiCodes[3], ConstrSpecActLineRAW."Defi Code Position 3") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 4" <> '' THEN
        IF NOT CodeInFilter(DefiCodes[4], ConstrSpecActLineRAW."Defi Code Position 4") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 5" <> '' THEN
        IF NOT CodeInFilter(DefiCodes[5], ConstrSpecActLineRAW."Defi Code Position 5") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 6" <> '' THEN
        IF NOT CodeInFilter(DefiCodes[6], ConstrSpecActLineRAW."Defi Code Position 6") THEN
           EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CodeInFilter@1100485002(lvCode@1100485000 : Code[20];lvFilter@1100485001 : Text[1000]) : Boolean;
    VAR
      TmpRec@1100485002 : TEMPORARY Record 352;
    BEGIN
      //db, 18-03-16
      IF lvFilter='*' THEN
        EXIT(TRUE);
      TmpRec.RESET;
      TmpRec.DELETEALL;
      TmpRec."Dimension Value Code" := lvCode;
      TmpRec.INSERT;
      TmpRec.SETFILTER("Dimension Value Code", lvFilter);
      EXIT(TmpRec.FIND('-'));
    END;

    BEGIN
    END.
  }
}

