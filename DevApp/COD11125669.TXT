OBJECT Codeunit 11125669 Recalculate Estimate (RAW)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EstimateElementRAWBuffer@1100525000 : ARRAY [2] OF TEMPORARY Record 11125679;
      Text010@1100525001 : TextConst 'ENU=Buffering...';
      Text011@1100525002 : TextConst 'ENU=Updating commitments...';
      Text012@1100525003 : TextConst 'ENU=Writing results...';
      Text013@1100525004 : TextConst 'ENU=Writing subtotal...';
      Text014@1100525005 : TextConst 'ENU=Writing additional costs...';
      Text015@1100525006 : TextConst 'ENU=Writing one-time costs...';
      Text016@1100525007 : TextConst 'ENU=Writing summary total...';

    PROCEDURE RecalculateEstimateRAW@1100525000(EstimateNo@1100525000 : Code[20]);
    BEGIN
      BufferCommitmtsAndDescriptions(EstimateNo);
      UpdateCommitments(EstimateNo);
      UpdateLockedCommitments(EstimateNo);
      // UpdateOtherLevels(EstimateNo); jhoek.050810
      WriteResults(EstimateNo);
    END;

    LOCAL PROCEDURE BufferCommitmtsAndDescriptions@1100525002(EstimateNo@1100525000 : Code[20]);
    VAR
      EstimateElementRAW@1100525001 : Record 11125679;
      EstimateLineRAW@1100529300 : Record 11125680;
      Window@1100525002 : Dialog;
    BEGIN
      Window.OPEN(Text010);

      EstimateElementRAW.SETCURRENTKEY("Estimate No.", Type, "Construction Spec. Line No.");
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETFILTER(Type, '%1|%2',
        EstimateElementRAW.Type::"Commitment Description (Main Line)", EstimateElementRAW.Type::"Commitment (Main Line)");
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');

      IF EstimateElementRAW.FINDSET THEN BEGIN
        REPEAT
          Window.UPDATE;
          EstimateElementRAW.CALCFIELDS(
            "Estimate Line Amount",
            EstimateElementRAW."Surcharge Amount Labor (Calc.)",
            EstimateElementRAW."Surchrg. Amt. Material (Calc.)",
            EstimateElementRAW."Surchrg. Amt. Subcntr. (Calc.)",
            EstimateElementRAW."Surcharge Amount Plant (Calc.)",
            //DP00433 sn.
            EstimateElementRAW."Calculated Amount Labor",
            EstimateElementRAW."Calculated Amount Material",
            EstimateElementRAW."Calculated Amount Subcontr.",
            EstimateElementRAW."Calculated Amount Plant");
            //DP00433 en.
          BufferCommitmentOrDescription(
            EstimateElementRAW."Estimate No.",
            EstimateElementRAW."Element No.",
            EstimateElementRAW."Estimate Line Amount",
            // EstimateElementRAW."Estimate Line Amount" + EstimateElementRAW."Total Surcharge Amount",
            EstimateElementRAW."Estimate Line Amount" +
              EstimateElementRAW."Surcharge Amount Labor (Calc.)" +
              EstimateElementRAW."Surchrg. Amt. Material (Calc.)" +
              EstimateElementRAW."Surchrg. Amt. Subcntr. (Calc.)" +
              EstimateElementRAW."Surcharge Amount Plant (Calc.)",
            EstimateElementRAW."Surcharge Amount Labor (Calc.)",
            EstimateElementRAW."Surchrg. Amt. Material (Calc.)",
            EstimateElementRAW."Surchrg. Amt. Subcntr. (Calc.)",
            EstimateElementRAW."Surcharge Amount Plant (Calc.)",
            //DP00433 sn.
            EstimateElementRAW.SafeDivision(EstimateElementRAW."Surcharge Amount Labor (Calc.)",EstimateElementRAW."Calculated Amount Labor") * 100,
            EstimateElementRAW.SafeDivision(EstimateElementRAW."Surchrg. Amt. Material (Calc.)",EstimateElementRAW."Calculated Amount Material") * 100,
            EstimateElementRAW.SafeDivision(EstimateElementRAW."Surchrg. Amt. Subcntr. (Calc.)",EstimateElementRAW."Calculated Amount Subcontr.") * 100,
            EstimateElementRAW.SafeDivision(EstimateElementRAW."Surcharge Amount Plant (Calc.)",EstimateElementRAW."Calculated Amount Plant") * 100);
            //DP00433 en.
        UNTIL EstimateElementRAW.NEXT = 0;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE BufferCommitmentOrDescription@1100525015(EstimateNo@1100525000 : Code[20];ElementNo@1100525001 : Code[6];CalculatedAmount@1100525003 : Decimal;ActualAmount@1100525002 : Decimal;SurchargeAmountLabor@1100525004 : Decimal;SurchargeAmountMaterial@1100525005 : Decimal;SurchargeAmountSubcontracting@1100525006 : Decimal;SurchargeAmountPlant@1100525007 : Decimal;"Surcharge%Labor"@1100529303 : Decimal;"Surcharge%Material"@1100529302 : Decimal;"Surcharge%Subcontracting"@1100529301 : Decimal;"Surcharge%Plant"@1100529300 : Decimal);
    BEGIN
      BufferElement(EstimateNo, ElementNo, CalculatedAmount, ActualAmount, SurchargeAmountLabor,
        SurchargeAmountMaterial, SurchargeAmountSubcontracting, SurchargeAmountPlant,
        "Surcharge%Labor", "Surcharge%Material", "Surcharge%Subcontracting", "Surcharge%Plant");//DP00433
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); // virtual level
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      BufferElement(EstimateNo, COPYSTR(ElementNo, 1, 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    END;

    LOCAL PROCEDURE BufferElement@1100525022(EstimateNo@1100525002 : Code[20];ElementNo@1100525001 : Code[6];CalculatedAmount@1100525000 : Decimal;ActualAmount@1100525003 : Decimal;SurchargeAmountLabor@1100525007 : Decimal;SurchargeAmountMaterial@1100525006 : Decimal;SurchargeAmountSubcontracting@1100525005 : Decimal;SurchargeAmountPlant@1100525004 : Decimal;"Surcharge%Labor"@1100529300 : Decimal;"Surcharge%Material"@1100529301 : Decimal;"Surcharge%Subcontracting"@1100529302 : Decimal;"Surcharge%Plant"@1100529303 : Decimal);
    BEGIN
      CASE EstimateElementRAWBuffer[1].GET(EstimateNo, ElementNo, 0) OF
        FALSE:
          BEGIN
            EstimateElementRAWBuffer[1].INIT;
            EstimateElementRAWBuffer[1]."Estimate No." := EstimateNo;
            EstimateElementRAWBuffer[1]."Element No." := ElementNo;
            EstimateElementRAWBuffer[1]."Calculated Amount" := CalculatedAmount;
            EstimateElementRAWBuffer[1]."Actual Amount" := ActualAmount; // was: CalculatedAmount
            EstimateElementRAWBuffer[1]."Surcharge Amount Labor" := SurchargeAmountLabor;
            EstimateElementRAWBuffer[1]."Surcharge Amount Material" := SurchargeAmountMaterial;
            EstimateElementRAWBuffer[1]."Surcharge Amount Subcontr." := SurchargeAmountSubcontracting;
            EstimateElementRAWBuffer[1]."Surcharge Amount Plant" := SurchargeAmountPlant;
            //DP00433 sn.
            EstimateElementRAWBuffer[1]."Surcharge % Labor" := "Surcharge%Labor";
            EstimateElementRAWBuffer[1]."Surcharge % Material" := "Surcharge%Material";
            EstimateElementRAWBuffer[1]."Surcharge % Subcontracting" := "Surcharge%Subcontracting";
            EstimateElementRAWBuffer[1]."Surcharge % Plant" := "Surcharge%Plant";
            //Dp00433 en.
            EstimateElementRAWBuffer[1].Indentation := STRLEN(ElementNo);
            EstimateElementRAWBuffer[1].INSERT;
          END;
        TRUE:
          BEGIN
            EstimateElementRAWBuffer[1]."Calculated Amount" += CalculatedAmount;
            EstimateElementRAWBuffer[1]."Actual Amount" += ActualAmount; // was: CalculatedAmount
            EstimateElementRAWBuffer[1].MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateCommitments@1100525003(EstimateNo@1100525000 : Code[20]);
    VAR
      EstimateElementRAW@1100525001 : Record 11125679;
      Window@1100525002 : Dialog;
    BEGIN
      Window.OPEN(Text011);

      EstimateElementRAW.SETCURRENTKEY("Estimate No.", Type, "Construction Spec. Line No.");
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETRANGE(Type, EstimateElementRAW.Type::"Commitment (Main Line)");
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');

      IF EstimateElementRAW.FINDSET THEN BEGIN
        REPEAT
          Window.UPDATE;
          UpdateCommitment(
            EstimateElementRAW."Estimate No.",
            EstimateElementRAW."Element No.");
        UNTIL EstimateElementRAW.NEXT = 0;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateCommitment@1100525007(EstimateNo@1100525002 : Code[20];ElementNo@1100525001 : Code[6]);
    VAR
      FromElementNo@1100525000 : Code[6];
      ToElementNo@1100525003 : Code[6];
      CalculatedAmount@1100525004 : Decimal;
      ActualAmount@1100525005 : Decimal;
    BEGIN
      FromElementNo := COPYSTR(ElementNo, 1, 5) + '1';
      //ToElementNo := COPYSTR(ElementNo, 1, 5) + '9';  //C026972.o
      ToElementNo := EstimateElementRAWBuffer[1].GetMaxSubElementNo(EstimateNo, ElementNo);  //C026972.n

      EstimateElementRAWBuffer[1].RESET;
      EstimateElementRAWBuffer[1].SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAWBuffer[1].SETRANGE("Element No.", FromElementNo, ToElementNo);
      EstimateElementRAWBuffer[1].CALCSUMS("Calculated Amount", "Actual Amount");

      CalculatedAmount := EstimateElementRAWBuffer[1]."Calculated Amount"; // was: Actual Amount
      ActualAmount := EstimateElementRAWBuffer[1]."Actual Amount"; // new

      EstimateElementRAWBuffer[1].GET(EstimateNo, ElementNo, 0);
      EstimateElementRAWBuffer[1]."Calculated Amount" += CalculatedAmount;
      EstimateElementRAWBuffer[1]."Actual Amount" += ActualAmount; // was: CalculatedAmount
      EstimateElementRAWBuffer[1].MODIFY;
    END;

    LOCAL PROCEDURE UpdateLockedCommitments@1100525006(EstimateNo@1100525000 : Code[20]);
    VAR
      EstimateElementRAW@1100525001 : Record 11125679;
    BEGIN
      EstimateElementRAW.SETCURRENTKEY("Estimate No.", Type, "Construction Spec. Line No.");
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETRANGE(Type, EstimateElementRAW.Type::"Commitment (Main Line)");
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');
      EstimateElementRAW.SETRANGE("Lock Actual Amount for Updates", TRUE);

      IF EstimateElementRAW.FINDSET THEN BEGIN
        REPEAT
          UpdateLockedCommitment(
            EstimateElementRAW."Estimate No.",
            EstimateElementRAW."Element No.",
            EstimateElementRAW."Actual Amount");
        UNTIL EstimateElementRAW.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateLockedCommitment@1100525001(EstimateNo@1100525000 : Code[20];ElementNo@1100525001 : Code[6];ActualAmount@1100525002 : Decimal);
    BEGIN
      EstimateElementRAWBuffer[1].GET(EstimateNo, ElementNo, 0);
      EstimateElementRAWBuffer[1]."Actual Amount" := ActualAmount;
      EstimateElementRAWBuffer[1]."Lock Actual Amount for Updates" := TRUE;
      EstimateElementRAWBuffer[1].MODIFY;
    END;

    LOCAL PROCEDURE UpdateOtherLevels@1100525004(EstimateNo@1100525000 : Code[20]);
    BEGIN
      UpdateOtherLevel(EstimateNo, '?????');
      UpdateOtherLevel(EstimateNo, '????');
      UpdateOtherLevel(EstimateNo, '???');
      UpdateOtherLevel(EstimateNo, '??');
      UpdateOtherLevel(EstimateNo, '?');
    END;

    LOCAL PROCEDURE UpdateOtherLevel@1100525014(EstimateNo@1100525000 : Code[20];ElementNoFilter@1100525001 : Code[6]);
    VAR
      FromElementNo@1100525002 : Code[6];
      ToElementNo@1100525003 : Code[6];
    BEGIN
      EstimateElementRAWBuffer[1].RESET;
      EstimateElementRAWBuffer[1].SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAWBuffer[1].SETFILTER("Element No.", ElementNoFilter);

      IF EstimateElementRAWBuffer[1].FINDSET(TRUE, FALSE) THEN
        REPEAT
          CASE STRLEN(EstimateElementRAWBuffer[1]."Element No.") OF
            5:
              BEGIN
                EstimateElementRAWBuffer[2].RESET;
                EstimateElementRAWBuffer[2].SETCURRENTKEY("Estimate No.", "Element No.", Indentation);
                EstimateElementRAWBuffer[2].SETRANGE("Estimate No.", EstimateNo);
                EstimateElementRAWBuffer[2].SETFILTER("Element No.", EstimateElementRAWBuffer[1]."Element No." + '0');
                EstimateElementRAWBuffer[2].SETRANGE(Indentation, 6);
                EstimateElementRAWBuffer[2].CALCSUMS("Calculated Amount", "Actual Amount");

                EstimateElementRAWBuffer[1]."Calculated Amount" := EstimateElementRAWBuffer[2]."Calculated Amount";
                EstimateElementRAWBuffer[1]."Actual Amount" := EstimateElementRAWBuffer[2]."Actual Amount";
                EstimateElementRAWBuffer[1].MODIFY;
              END;
            4, 3, 2, 1:
              BEGIN
                FromElementNo := EstimateElementRAWBuffer[1]."Element No." + '0';
                ToElementNo := EstimateElementRAWBuffer[1]."Element No." + '9';

                EstimateElementRAWBuffer[2].RESET;
                EstimateElementRAWBuffer[2].SETCURRENTKEY("Estimate No.", "Element No.", Indentation);
                EstimateElementRAWBuffer[2].SETRANGE("Estimate No.", EstimateNo);
                EstimateElementRAWBuffer[2].SETRANGE("Element No.", FromElementNo, ToElementNo);
                EstimateElementRAWBuffer[2].SETRANGE(Indentation, STRLEN(EstimateElementRAWBuffer[1]."Element No.") + 1);
                EstimateElementRAWBuffer[2].CALCSUMS("Calculated Amount", "Actual Amount");

                EstimateElementRAWBuffer[1]."Calculated Amount" := EstimateElementRAWBuffer[2]."Calculated Amount";
                EstimateElementRAWBuffer[1]."Actual Amount" := EstimateElementRAWBuffer[2]."Actual Amount";
                EstimateElementRAWBuffer[1].MODIFY;
              END;
          END;
        UNTIL EstimateElementRAWBuffer[1].NEXT = 0;
    END;

    LOCAL PROCEDURE WriteResults@1100525005(EstimateNo@1100525000 : Code[20]);
    VAR
      EstimateRAW@1100525002 : Record 11012151;
      EstimateRAWSetup@1100525010 : Record 11125673;
      EstimateElementRAW@1100525001 : Record 11125679;
      Window@1100525011 : Dialog;
      CalculatedOneTimeCostsTotal@1100525005 : Decimal;
      ActualOneTimeCostsTotal@1100525008 : Decimal;
      SubTotalActual@1100525003 : Decimal;
      SubTotalCalculated@1100525009 : Decimal;
      CalculatedSummaryTotal@1100525004 : Decimal;
      ActualSummaryTotal@1100525007 : Decimal;
      Contributions@1100525006 : Decimal;
    BEGIN
      Window.OPEN(Text012);

      EstimateElementRAW.SETCURRENTKEY("Estimate No.", "Construction Spec. Line No.");
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');

      EstimateRAWSetup.GET;
      IF EstimateRAWSetup."Debug Mode" THEN
        PAGE.RUNMODAL(PAGE::"Estimate Element (RAW) Buffer", EstimateElementRAWBuffer[1]);

      EstimateElementRAW.SetSkipUpdateLogBook(TRUE); //call 23956
      IF EstimateElementRAW.FINDSET(TRUE, FALSE) THEN
        REPEAT
          Window.UPDATE;

          IF EstimateElementRAWBuffer[1].GET(EstimateNo, EstimateElementRAW."Element No.", 0) THEN BEGIN
            EstimateElementRAW.VALIDATE("Calculated Amount", EstimateElementRAWBuffer[1]."Calculated Amount");
            // new.begin
            EstimateElementRAW."Surcharge Amount Labor" := EstimateElementRAWBuffer[1]."Surcharge Amount Labor";
            EstimateElementRAW."Surcharge Amount Material" := EstimateElementRAWBuffer[1]."Surcharge Amount Material";
            EstimateElementRAW."Surcharge Amount Subcontr." := EstimateElementRAWBuffer[1]."Surcharge Amount Subcontr.";
            EstimateElementRAW."Surcharge Amount Plant" := EstimateElementRAWBuffer[1]."Surcharge Amount Plant";
            EstimateElementRAW."Total Surcharge Amount" :=
              EstimateElementRAWBuffer[1]."Actual Amount" - EstimateElementRAWBuffer[1]."Calculated Amount";
            //DP00433 sn.
            EstimateElementRAW."Surcharge % Labor" := EstimateElementRAWBuffer[1]."Surcharge % Labor";
            EstimateElementRAW."Surcharge % Material" := EstimateElementRAWBuffer[1]."Surcharge % Material";
            EstimateElementRAW."Surcharge % Subcontracting" := EstimateElementRAWBuffer[1]."Surcharge % Subcontracting";
            EstimateElementRAW."Surcharge % Plant" := EstimateElementRAWBuffer[1]."Surcharge % Plant";
            //DP00433 en.
            // new.end
            CASE EstimateElementRAW."Lock Actual Amount for Updates" OF
              FALSE:
                BEGIN
                  // jhoek.test.begin
                  // EstimateElementRAWBuffer[1]."Actual Amount" := EstimateElementRAW.Quantity *
                  //   ROUND(SafeDivision(EstimateElementRAWBuffer[1]."Actual Amount", EstimateElementRAW.Quantity));
                  // jhoek.050810.begin
                  IF EstimateElementRAW.IsEuroElement THEN
                    EstimateElementRAW."Actual Quantity" := EstimateElementRAWBuffer[1]."Actual Amount";
                  // jhoek.050810.end
                  IF EstimateElementRAW."Actual Quantity" <> 0 THEN // jhoek.090710
                    EstimateElementRAWBuffer[1]."Actual Amount" := EstimateElementRAW."Actual Quantity" *
                      ROUND(SafeDivision(EstimateElementRAWBuffer[1]."Actual Amount", EstimateElementRAW."Actual Quantity"));
                  // jhoek.test.end
                  EstimateElementRAW.VALIDATE("Actual Amount", EstimateElementRAWBuffer[1]."Actual Amount");

                  CASE STRLEN(EstimateElementRAW."Element No.") = 6 OF // jhoek.050810
                    TRUE:
                      EstimateElementRAW.VALIDATE(
                        "Total Surcharge Amount",
                        EstimateElementRAWBuffer[1]."Actual Amount" - EstimateElementRAWBuffer[1]."Calculated Amount");
                    FALSE:
                      EstimateElementRAW."Total Surcharge Amount" :=
                        EstimateElementRAWBuffer[1]."Actual Amount" - EstimateElementRAWBuffer[1]."Calculated Amount";
                  END;

                  CheckEUR(EstimateElementRAW);
                END;
              TRUE:
                BEGIN
                  EstimateElementRAW.VALIDATE(
                    "Total Surcharge Amount",
                    EstimateElementRAWBuffer[1]."Actual Amount" - EstimateElementRAWBuffer[1]."Calculated Amount");
                  CheckEUR(EstimateElementRAW);
                END;
            END;
            EstimateElementRAW.MODIFY;
          END;
        UNTIL EstimateElementRAW.NEXT = 0;

      Window.CLOSE;

      WriteSubTotal(EstimateNo, SubTotalActual, SubTotalCalculated);
      CreateAdditionalCost(EstimateNo);

      // Determine total one-time costs
      Window.OPEN(Text015);

      EstimateElementRAW.RESET;
      EstimateElementRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETRANGE(Type, EstimateElementRAW.Type::"Commitment (Main Line)");
      EstimateElementRAW.SETRANGE("Element No.", '910010', '919980');
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00'); //mg, 20-12-11: M31780
      EstimateElementRAW.CALCSUMS("Calculated Amount", "Actual Amount");
      CalculatedOneTimeCostsTotal := EstimateElementRAW."Calculated Amount";
      ActualOneTimeCostsTotal := EstimateElementRAW."Actual Amount";

      // Write total one-time costs
      EstimateElementRAW.RESET;
      EstimateElementRAW.SETCURRENTKEY("Estimate No.", "Element No.");
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETRANGE("Element No.", '919990');
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00'); //mg, 20-12-11: M31780
      IF EstimateElementRAW.FINDFIRST THEN BEGIN
        // jhoek.080710.begin
        EstimateElementRAW.Quantity := CalculatedOneTimeCostsTotal;
        EstimateElementRAW."Actual Quantity" := ActualOneTimeCostsTotal;
        EstimateElementRAW."Calculated Amount" := CalculatedOneTimeCostsTotal;
        EstimateElementRAW."Actual Amount" := ActualOneTimeCostsTotal;
        //  EstimateElementRAW.VALIDATE(Quantity, ActualOneTimeCostsTotal);
        //  EstimateElementRAW.VALIDATE("Calculated Amount", CalculatedOneTimeCostsTotal);
        //  EstimateElementRAW.VALIDATE("Actual Amount", ActualOneTimeCostsTotal);
        // jhoek.080710.end;
        EstimateElementRAW.MODIFY;
      END;

      Window.CLOSE;

      // Determine total summary amount
      Window.OPEN(Text016);

      EstimateElementRAW.RESET;
      EstimateElementRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETRANGE(Type, EstimateElementRAW.Type::"Commitment (Main Line)");
      //EstimateElementRAW.SETFILTER("Element No.", '>9&<>919990&<>960010&<>960020');
      EstimateElementRAW.SETFILTER("Element No.", '>9&<>919990&<>960010&<>960020&<>960030');  //db, 08-10-12: C002641
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00'); //mg, 20-12-11: M31780
      EstimateElementRAW.CALCSUMS("Actual Amount", "Calculated Amount");
      CalculatedSummaryTotal := EstimateElementRAW."Calculated Amount";
      ActualSummaryTotal := EstimateElementRAW."Actual Amount";

      // Determine and write contributions
      Contributions := Check96(EstimateNo, SubTotalActual + ActualSummaryTotal);

      // Determine again total summary amount
      EstimateElementRAW.RESET;
      EstimateElementRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETRANGE(Type, EstimateElementRAW.Type::"Commitment (Main Line)");
      EstimateElementRAW.SETFILTER("Element No.", '>9&<>919990');
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00'); //mg, 20-12-11: M31780
      EstimateElementRAW.CALCSUMS("Actual Amount", "Calculated Amount");
      CalculatedSummaryTotal := EstimateElementRAW."Calculated Amount";
      ActualSummaryTotal := EstimateElementRAW."Actual Amount";

      Window.CLOSE;

      // jhoek.240810.begin
      // Write total summary amount
      // EstimateElementRAW.RESET;
      // EstimateElementRAW.SETCURRENTKEY("Estimate No.","Element No.","Construction Spec. Line No.");
      // EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      // EstimateElementRAW.SETRANGE("Element No.", '9');
      // EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');
      // IF EstimateElementRAW.FINDFIRST THEN BEGIN
      //   EstimateElementRAW."Calculated Amount" := CalculatedSummaryTotal;
      //   EstimateElementRAW."Actual Amount" := ActualSummaryTotal;
      //   EstimateElementRAW.MODIFY();
      // END;
      // jhoek.240810.end

      // Write estimate total
      EstimateRAW.GET(EstimateNo);
      EstimateRAW."Contract Amount (Calculated)" := SubTotalCalculated + CalculatedSummaryTotal;
      EstimateRAW."Contract Amount (Actual)" := SubTotalActual + ActualSummaryTotal;
      EstimateRAW.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WriteSubTotal@1100525011(EstimateNo@1100525002 : Code[20];VAR SubTotalActual@1100525003 : Decimal;VAR SubTotalCalculated@1100525004 : Decimal);
    VAR
      EstimateRAW@1100525000 : Record 11012151;
      EstimateElementRAW@1100525001 : Record 11125679;
      Window@1100525005 : Dialog;
    BEGIN
      Window.OPEN(Text013);

      EstimateElementRAW.RESET;
      EstimateElementRAW.SETCURRENTKEY("Estimate No.", Type);
      EstimateElementRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateElementRAW.SETRANGE(Type, EstimateElementRAW.Type::"Commitment (Main Line)");
      EstimateElementRAW.SETFILTER("Element No.", '<9');
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00'); // jhoek.100310
      EstimateElementRAW.CALCSUMS("Actual Amount", "Calculated Amount");

      EstimateRAW.GET(EstimateNo);

      //mg.so, 19-01-12: M32364
      // jhoek.081010.begin: actual amount contains first time not yet surcharges
      //IF EstimateElementRAW."Calculated Amount" = EstimateElementRAW."Actual Amount" THEN BEGIN
      //  EstimateRAW.CALCFIELDS("Total Surcharge Amount");
      //  EstimateElementRAW."Actual Amount" := EstimateElementRAW."Actual Amount" + EstimateRAW."Total Surcharge Amount";
      //END;
      // jhoek081010.end
      //mg.eo, 19-01-12: M32364

      EstimateRAW."Subtotal (Actual)" := EstimateElementRAW."Actual Amount";
      EstimateRAW."Subtotal (Calculated)" := EstimateElementRAW."Calculated Amount";
      EstimateRAW.MODIFY(TRUE);

      SubTotalActual := EstimateRAW."Subtotal (Actual)";
      SubTotalCalculated := EstimateRAW."Subtotal (Calculated)";

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CreateAdditionalCost@1100525010(EstimateNo@1100525000 : Code[20]);
    VAR
      RAWSetup@1100525001 : Record 11125673;
      EstRec@1100525006 : Record 11012151;
      EstElemRec@1100525007 : Record 11125679;
      EstLineRec@1100525002 : Record 11125680;
      Window@1100525008 : Dialog;
      LastLine@1100525003 : Integer;
      DimMgt@1100525004 : Codeunit 408;
      DimValRec@1100525005 : Record 349;
    BEGIN
      Window.OPEN(Text014);

      EstRec.GET(EstimateNo);

      RAWSetup.GET;
      RAWSetup.TESTFIELD("Element No.(Surcharge)");
      RAWSetup.TESTFIELD("Element No.(Profit/Risc)");

      EstLineRec.SETRANGE("Estimate No.", EstRec."No.");
      EstLineRec.SETFILTER("Element No.", '%1|%2', RAWSetup."Element No.(Surcharge)", RAWSetup."Element No.(Profit/Risc)");
      EstLineRec.SETRANGE("Summary Line", TRUE);
      EstLineRec.DELETEALL;
      EstLineRec.SETRANGE("Summary Line");

      IF EstRec."Percentage (Surcharge)" <> 0 THEN BEGIN
        RAWSetup.TESTFIELD("Cost Object (Surcharge)");
        DimMgt.GetDimValueRec(2, RAWSetup."Cost Object (Surcharge)", DimValRec, TRUE,'');

        EstLineRec.SETRANGE("Element No.", RAWSetup."Element No.(Surcharge)");
        IF EstLineRec.FINDLAST THEN
          LastLine := EstLineRec."Line No."
        ELSE
          LastLine := 0;

        EstLineRec.INIT;
        EstLineRec."Estimate No." := EstRec."No.";
        EstLineRec."Element No." := RAWSetup."Element No.(Surcharge)";
        EstLineRec."Line No." := LastLine + 10000;
        EstLineRec.INSERT;
        EstLineRec.Source := EstLineRec.Source::Summary; // jhoek.090210
        EstLineRec."Summary Line" := TRUE;
        EstLineRec."Part Quantity" := 1;
        EstLineRec.VALIDATE(Quantity, 1);
        EstLineRec."Sundry Price" := EstRec.CalculateAdditionalCost(1, EstRec."Subtotal (Actual)");
        EstLineRec."Cost Object Sundry" := DimValRec.Code;
        EstLineRec.Description := DimValRec.Name;
        EstLineRec."Unit of Measure" := DimValRec."Unit of Measure";
        EstLineRec."Cost Component" := DimValRec."Cost Component";
        EstLineRec.VALIDATE("VAT Prod. Posting Group", EstRec."VAT Prod. Posting Group (H)");
        EstLineRec.CalculateTotals;
        EstLineRec.MODIFY;
      END;

      EstElemRec.SETCURRENTKEY("Estimate No.", Type);
      EstElemRec.SETRANGE("Estimate No.", EstRec."No.");
      EstElemRec.SETRANGE(Type, EstElemRec.Type::"Commitment (Main Line)");
      EstElemRec.SETFILTER("Element No.", RAWSetup."Element No.(Surcharge)");
      IF EstElemRec.FINDSET(TRUE, FALSE) THEN BEGIN
        EstElemRec.CALCFIELDS("Estimate Line Amount");
        EstElemRec."Calculated Amount" := EstElemRec."Estimate Line Amount";
        EstElemRec."Actual Amount" := EstElemRec."Estimate Line Amount";
        CheckEUR(EstElemRec);
        EstElemRec.MODIFY;
      END;

      IF EstRec."Percentage (Profit/Risk)" <> 0 THEN BEGIN
        RAWSetup.TESTFIELD("Cost Object (Profit/Risc)");
        DimMgt.GetDimValueRec(2, RAWSetup."Cost Object (Profit/Risc)", DimValRec, TRUE,'');

        EstLineRec.SETRANGE("Element No.", RAWSetup."Element No.(Profit/Risc)");
        IF EstLineRec.FINDLAST THEN
          LastLine := EstLineRec."Line No."
        ELSE
          LastLine := 0;

        EstLineRec.INIT;
        EstLineRec."Estimate No." := EstRec."No.";
        EstLineRec."Element No." := RAWSetup."Element No.(Profit/Risc)";
        EstLineRec."Line No." := LastLine + 10000;
        EstLineRec.INSERT;
        EstLineRec.Source := EstLineRec.Source::Summary; // jhoek.090210
        EstLineRec."Summary Line" := TRUE;
        EstLineRec."Part Quantity" := 1;
        EstLineRec.VALIDATE(Quantity, 1);
        EstLineRec."Sundry Price" := EstRec.CalculateAdditionalCost(2, EstRec."Subtotal (Actual)");
        EstLineRec."Cost Object Sundry" := DimValRec.Code;
        EstLineRec.Description := DimValRec.Name;
        EstLineRec."Unit of Measure" := DimValRec."Unit of Measure";
        EstLineRec."Cost Component" := DimValRec."Cost Component";
        EstLineRec.VALIDATE("VAT Prod. Posting Group", EstRec."VAT Prod. Posting Group (H)");
        EstLineRec.CalculateTotals;
        EstLineRec.MODIFY;
      END;

      EstElemRec.SETCURRENTKEY("Estimate No.", Type);
      EstElemRec.SETRANGE("Estimate No.", EstRec."No.");
      EstElemRec.SETRANGE(Type, EstElemRec.Type::"Commitment (Main Line)");
      EstElemRec.SETFILTER("Element No.", RAWSetup."Element No.(Profit/Risc)");
      IF EstElemRec.FINDSET(TRUE, FALSE) THEN BEGIN
        EstElemRec.CALCFIELDS("Estimate Line Amount");
        EstElemRec."Calculated Amount" := EstElemRec."Estimate Line Amount";
        EstElemRec."Actual Amount" := EstElemRec."Estimate Line Amount";
        CheckEUR(EstElemRec);
        EstElemRec.MODIFY;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE Check96@1100525008(EstimateNo@1100525001 : Code[20];BaseAmount@1100525011 : Decimal) : Decimal;
    VAR
      EstRec@1100525002 : Record 11012151;
      EstElemRec1@1100525000 : Record 11125679;
      EstElemRec2@1100525012 : Record 11125679;
      EstElemRec3@1100409000 : Record 11125679;
      EstLineRec@1100525003 : Record 11125680;
      LastLine@1100525004 : Integer;
      Perc1@1100525005 : Decimal;
      Perc2@1100525006 : Decimal;
      Perc3@1100409001 : Decimal;
      ChrgAmnt@1100525007 : Decimal;
      ChrgMax@1100525008 : Decimal;
      TotalCalculatedAmount@1100525009 : Decimal;
      TotalActualAmount@1100525010 : Decimal;
    BEGIN
      EstRec.GET(EstimateNo);
      ChrgMax := 55000;

      EstElemRec1.SETCURRENTKEY("Estimate No.", Type);
      EstElemRec1.SETRANGE("Estimate No.", EstimateNo);
      EstElemRec1.SETRANGE(Type, EstElemRec1.Type::"Commitment (Main Line)");
      EstElemRec1.SETFILTER("Element No.", '960010');
      IF EstElemRec1.FINDFIRST THEN
        Perc1 := 0.15;

      EstElemRec2.SETCURRENTKEY("Estimate No.", Type);
      EstElemRec2.SETRANGE("Estimate No.", EstimateNo);
      EstElemRec2.SETRANGE(Type, EstElemRec2.Type::"Commitment (Main Line)");
      EstElemRec2.SETFILTER("Element No.", '960020');
      IF EstElemRec2.FINDFIRST THEN
        Perc2 := 0.15;

      //db.sn, 08-10-12: C002641
      EstElemRec3.SETCURRENTKEY("Estimate No.", Type);
      EstElemRec3.SETRANGE("Estimate No.", EstimateNo);
      EstElemRec3.SETRANGE(Type, EstElemRec3.Type::"Commitment (Main Line)");
      EstElemRec3.SETFILTER("Element No.", '960030');
      IF EstElemRec3.FINDFIRST THEN
        Perc3 := 0.15;
      //db.en, 08-10-12: C002641

      IF Perc1 <> 0 THEN BEGIN
        EstLineRec.SETRANGE("Estimate No.", EstimateNo);
        EstLineRec.SETRANGE("Element No.", EstElemRec1."Element No.");
        EstLineRec.SETRANGE("Summary Line", TRUE);
        EstLineRec.DELETEALL;
        EstLineRec.SETRANGE("Summary Line");
        IF EstLineRec.FINDLAST THEN
          LastLine := EstLineRec."Line No."
        ELSE
          LastLine := 0;

        EstLineRec.INIT;
        EstLineRec."Estimate No." := EstRec."No.";
        EstLineRec."Element No." := EstElemRec1."Element No.";
        EstLineRec."Line No." := LastLine + 10000;
        EstLineRec.INSERT;
        EstLineRec."Summary Line" := TRUE;
        EstLineRec."Part Quantity" := 1;
        EstLineRec.VALIDATE(Quantity, 1);
        //ChrgAmnt := ROUND(BaseAmount * (Perc1/(100-Perc1-Perc2)), 0.01);
        ChrgAmnt := ROUND(BaseAmount * (Perc1/(100-Perc1-Perc2-Perc3)), 0.01);  //db, 08-10-12: C002641
        IF ChrgAmnt <= ChrgMax THEN BEGIN
          EstLineRec."Sundry Price" := ChrgAmnt;
          ChrgMax := ChrgMax - ChrgAmnt;
        END ELSE BEGIN
          EstLineRec."Sundry Price" := ChrgMax;
          ChrgMax := 0;
        END;
        EstLineRec.Description := EstElemRec1.Text;
        EstLineRec.VALIDATE("VAT Prod. Posting Group", EstRec."VAT Prod. Posting Group (H)");
        EstLineRec.CalculateTotals;
        EstLineRec.MODIFY;

        EstElemRec1.CALCFIELDS("Estimate Line Amount");
        EstElemRec1."Actual Amount" := EstElemRec1."Estimate Line Amount";
        EstElemRec1."Calculated Amount" := EstElemRec1."Actual Amount";
        EstElemRec1."Actual Quantity" := EstElemRec1."Actual Amount";

        TotalCalculatedAmount := TotalCalculatedAmount + EstElemRec1."Calculated Amount";
        TotalActualAmount := TotalActualAmount + EstElemRec1."Actual Amount";

        CheckEUR(EstElemRec1);
        EstElemRec1.MODIFY;
      END;

      IF Perc2 <> 0 THEN BEGIN
        EstLineRec.SETRANGE("Estimate No.", EstimateNo);
        EstLineRec.SETRANGE("Element No.", EstElemRec2."Element No.");
        EstLineRec.SETRANGE("Summary Line", TRUE);
        EstLineRec.DELETEALL;
        EstLineRec.SETRANGE("Summary Line");
        IF EstLineRec.FINDLAST THEN
          LastLine := EstLineRec."Line No."
        ELSE
          LastLine := 0;

        EstLineRec.INIT;
        EstLineRec."Estimate No." := EstRec."No.";
        EstLineRec."Element No." := EstElemRec2."Element No.";
        EstLineRec."Line No." := LastLine + 10000;
        EstLineRec.INSERT;
        EstLineRec."Summary Line" := TRUE;
        EstLineRec."Part Quantity" := 1;
        EstLineRec.VALIDATE(Quantity, 1);
        //ChrgAmnt := ROUND(BaseAmount * (Perc2/(100-Perc1-Perc2)), 0.01);
        ChrgAmnt := ROUND(BaseAmount * (Perc2/(100-Perc1-Perc2-Perc3)), 0.01);  //db, 08-10-12: C002641
        IF ChrgAmnt <= ChrgMax THEN BEGIN
          EstLineRec."Sundry Price" := ChrgAmnt;
          ChrgMax := ChrgMax - ChrgAmnt;
        END ELSE BEGIN
          EstLineRec."Sundry Price" := ChrgMax;
          ChrgMax := 0;
        END;
        EstLineRec.Description := EstElemRec2.Text;
        EstLineRec.VALIDATE("VAT Prod. Posting Group", EstRec."VAT Prod. Posting Group (Z)");
        EstLineRec.CalculateTotals;
        EstLineRec.MODIFY;

        EstElemRec2.CALCFIELDS("Estimate Line Amount");
        EstElemRec2."Actual Amount" := EstElemRec2."Estimate Line Amount";
        EstElemRec2."Calculated Amount" := EstElemRec2."Actual Amount";
        EstElemRec2."Actual Quantity" := EstElemRec2."Actual Amount";

        TotalCalculatedAmount := TotalCalculatedAmount + EstElemRec2."Calculated Amount";
        TotalActualAmount := TotalActualAmount + EstElemRec2."Actual Amount";

        CheckEUR(EstElemRec2);
        EstElemRec2.MODIFY;
      END;

      //db.sn, 08-10-12: C002641
      IF Perc3 <> 0 THEN BEGIN
        EstLineRec.SETRANGE("Estimate No.", EstimateNo);
        EstLineRec.SETRANGE("Element No.", EstElemRec3."Element No.");
        EstLineRec.SETRANGE("Summary Line", TRUE);
        EstLineRec.DELETEALL;
        EstLineRec.SETRANGE("Summary Line");
        IF EstLineRec.FINDLAST THEN
          LastLine := EstLineRec."Line No."
        ELSE
          LastLine := 0;

        EstLineRec.INIT;
        EstLineRec."Estimate No." := EstRec."No.";
        EstLineRec."Element No." := EstElemRec3."Element No.";
        EstLineRec."Line No." := LastLine + 10000;
        EstLineRec.INSERT;
        EstLineRec."Summary Line" := TRUE;
        EstLineRec."Part Quantity" := 1;
        EstLineRec.VALIDATE(Quantity, 1);
        ChrgAmnt := ROUND(BaseAmount * (Perc3/(100-Perc1-Perc2-Perc3)), 0.01);
        IF ChrgAmnt <= ChrgMax THEN BEGIN
          EstLineRec."Sundry Price" := ChrgAmnt;
          ChrgMax := ChrgMax - ChrgAmnt;
        END ELSE BEGIN
          EstLineRec."Sundry Price" := ChrgMax;
          ChrgMax := 0;
        END;
        EstLineRec.Description := EstElemRec3.Text;
        EstLineRec.VALIDATE("VAT Prod. Posting Group", EstRec."VAT Prod. Posting Group (Z)");
        EstLineRec.CalculateTotals;
        EstLineRec.MODIFY;

        EstElemRec3.CALCFIELDS("Estimate Line Amount");
        EstElemRec3."Actual Amount" := EstElemRec3."Estimate Line Amount";
        EstElemRec3."Calculated Amount" := EstElemRec3."Actual Amount";
        EstElemRec3."Actual Quantity" := EstElemRec3."Actual Amount";

        TotalCalculatedAmount := TotalCalculatedAmount + EstElemRec3."Calculated Amount";
        TotalActualAmount := TotalActualAmount + EstElemRec3."Actual Amount";

        CheckEUR(EstElemRec3);
        EstElemRec3.MODIFY;
      END;
      //db.en, 08-10-12: C002641
    END;

    LOCAL PROCEDURE CheckEUR@1100525009(VAR EstElemRec@1100525000 : Record 11125679);
    BEGIN
      IF EstElemRec."External Unit of Measure Code" = 'EUR' THEN BEGIN
        EstElemRec."Actual Amount" := ROUND(EstElemRec."Actual Amount", 0.01);
        EstElemRec."Calculated Unit Price" := 1;
        EstElemRec."Actual Unit Price" := 1;
        EstElemRec.Quantity := EstElemRec."Calculated Amount"; // jhoek.090710 was: "Actual Amount"
        EstElemRec."Actual Quantity" := EstElemRec."Actual Amount"; // jhoek.201010
      END;
    END;

    LOCAL PROCEDURE SafeDivision@1100525019(Numerator@1100525000 : Decimal;Denominator@1100525001 : Decimal) : Decimal;
    BEGIN
      IF Denominator = 0 THEN
        EXIT(0);
      EXIT(Numerator / Denominator);
    END;

    BEGIN
    END.
  }
}

