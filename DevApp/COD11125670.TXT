OBJECT Codeunit 11125670 Transfer Estimate (RAW)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11072003=m;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012015 : TextConst 'ENU=Copy from          #1##########\\';
      Text001@11012016 : TextConst 'ENU=Copy to              #2##########\\';
      Text002@11012017 : TextConst 'ENU=Busy with         #3################# @4@@@@@@@@@@@@@';
      Text003@11012018 : TextConst 'ENU=Budget is Fixed, transfer Estimate only allowed to Adjustment or Extension';
      Text004@11012019 : TextConst 'ENU=Collect';
      Text005@11012020 : TextConst 'ENU=Summary %1: select Element for Project on level Estimate, Sub-Estimate or Summary Sheet';
      Text006@11012021 : TextConst 'ENU=Transfer';
      Text007@11012022 : TextConst 'ENU=No data within selection';
      Text008@11012023 : TextConst 'ENU=There is a budget for this project %1, do you want to add estimate ?';
      Text009@11012024 : TextConst 'ENU=Create Start Element in table %1';
      Text010@11012025 : TextConst 'ENU=Sub-Estimate %1, Part %2: select Element for Project on level Estimate, Sub-Estimate or Estimate Part.';
      HelpRec@11012000 : TEMPORARY Record 11012174;
      EstSetup@1210190005 : Record 11012150;
      JobSetup@1100525010 : Record 315;
      EstRec@1100525005 : Record 11012151;
      EstRateRec@1210190000 : Record 11012160;
      EstLineRec@11012001 : Record 11125680;
      ServOrderRec@1100525004 : Record 11012823;
      TmpServOrderRec@1100525006 : TEMPORARY Record 11012823;
      TryOutRec@1100525011 : Record 11012761;
      ProjRec@1210190004 : Record 11072003;
      PlotRec@1100485005 : Record 11012500;
      ProjBudgetRec@11012006 : Record 11012001;
      ProjElemRec@11012007 : Record 11012010;
      ElemRec@11012008 : Record 11012060;
      Elem2Rec@11012014 : Record 11012060;
      FormatMgt@1210190012 : Codeunit 11012022;
      RouteRefMgtCU@1210190008 : Codeunit 11012045;
      Status@11012011 : Dialog;
      NoOfRecords@11012012 : Integer;
      LineCount@11012013 : Integer;
      HelpLino@1100525013 : Integer;
      BudgetLino@1100525015 : Integer;
      ProjectElement@11012009 : Code[20];
      JobNo@1210190001 : Code[20];
      Text011@1210190002 : TextConst 'ENU=Adjustment Hours Additional Costs Summary Sheet';
      Text012@1210190003 : TextConst 'ENU="Correction Factor %1: "';
      gPlotTo@1100485004 : Code[20];
      gHouseModelTo@1210190018 : Code[20];
      gMainGroupTo@1210190017 : Code[20];
      gGroupTo@1210190016 : Code[20];
      gSubGroupTo@1210190015 : Code[20];
      desc1@1210190014 : Text[100];
      desc2@1210190013 : Text[100];
      Text013@1100485001 : TextConst 'ENU=Do you want to transfer this estimate to more then 1 project ?';
      LastProject@1100485002 : Code[20];
      ServSheet@1100525014 : Code[20];
      SeriesServOrder@1100525009 : Code[10];
      SkipQuestionProject@1100485003 : Boolean;
      gvTransferZeroLines@1100525003 : Boolean;
      gvTransferStructure@1100525002 : Boolean;
      gvTransferSalesPrice@1100485006 : Boolean;
      gvTransferSubEstimate@1100485007 : Boolean;
      gvTransferPurchAction@1100485008 : Boolean;
      gvTransferPartToTenderElement@1100525000 : Boolean;
      gvTransferDestination@1100525001 : 'Project,ServLoc,ServOrder';
      gvSettlementMethod@1100525008 : 'FixedPrice,CostPlus';
      gvCopyTryOut@1100525007 : Boolean;
      Text014@1100525012 : TextConst 'ENU=%1 (%2) updated';
      gvCopyFeatures@1100525016 : ' ,TechSpec,CheckList,Both';

    PROCEDURE SetTransferOptions@1100485003(lvTransferZeroLines@1100525002 : Boolean;lvTransferStructure@1100525001 : Boolean;lvTransferPartToTenderElement@1100525000 : Boolean;lvTransferSalesPrice@1100485000 : Boolean;lvTransferSubEstimate@1100485001 : Boolean;lvTransferPurchAction@1100485002 : Boolean;lvTransferDestination@1100525003 : 'Project,ServLoc,ServOrder';lvSettlementMethod@1100525005 : 'FixedPrice,CostPlus';lvCopyTryOut@1100525004 : Boolean;lvCopyFeatures@1100525006 : ' ,TechSpec,CheckList,Both');
    BEGIN
      gvTransferZeroLines := lvTransferZeroLines;
      gvTransferStructure := lvTransferStructure;
      gvTransferPartToTenderElement := lvTransferPartToTenderElement;
      gvTransferSalesPrice := lvTransferSalesPrice;
      gvTransferSubEstimate := lvTransferSubEstimate;
      gvTransferPurchAction := lvTransferPurchAction;
      gvTransferDestination := lvTransferDestination;
      gvSettlementMethod := lvSettlementMethod;
      gvCopyTryOut := lvCopyTryOut;
      gvCopyFeatures := lvCopyFeatures;
    END;

    PROCEDURE Start@1(EstFrom@11012000 : Code[20];SubEstFilter@11012001 : Code[250];EstPartFilter@1100525001 : Code[250];SheetFilter@11012002 : Code[250];StatusFilter@1100525000 : Code[250];ProjTo@11012003 : Code[20];ExtTo@11012004 : Code[20];AdjTo@11012005 : Code[20];PlotTo@1100485000 : Code[20];HouseModelTo@1210190012 : Code[20];MainGroupTo@1210190011 : Code[20];GroupTo@1210190010 : Code[20];SubGroupTo@1210190009 : Code[20];OptTo@1210190005 : Code[20];SelectSheet@1210190000 : Boolean;UpdateProject@1210190001 : Boolean);
    VAR
      lvCopyFromCostEst@1100485002 : Code[20];
    BEGIN
      gPlotTo := PlotTo;
      gHouseModelTo := HouseModelTo;
      gMainGroupTo := MainGroupTo;
      gGroupTo := GroupTo;
      gSubGroupTo := SubGroupTo;

      Status.OPEN(
         Text000 +
         Text001 +
         Text002);
      Status.UPDATE(1, EstFrom);
      Status.UPDATE(2, ProjTo);

      IF gvTransferDestination = gvTransferDestination::Project THEN BEGIN
        IF ProjRec.GET(ProjTo) THEN
          IF ProjRec."Budget Fixed" AND ((ExtTo = '') AND (AdjTo = '')) THEN
            ERROR(Text003);
      END;

      EstSetup.GET;
      JobSetup.GET;

      EstRec.GET(EstFrom);
      IF (EstRec."Copied from Cost Estimate" <> '') THEN
        lvCopyFromCostEst := EstRec."Copied from Cost Estimate"
      ELSE
        lvCopyFromCostEst := EstFrom;

      Collect(EstFrom, lvCopyFromCostEst, SubEstFilter, EstPartFilter, StatusFilter, SheetFilter, SelectSheet);
      Transfer(EstFrom, ProjTo, ExtTo, AdjTo, PlotTo, OptTo);

      IF gvTransferDestination = gvTransferDestination::Project THEN BEGIN
        IF UpdateProject THEN
          UpdateProjRec(EstFrom, ProjTo);
        IF gvTransferPartToTenderElement THEN
          CopyPartsToTenderElements(EstFrom, ProjTo, SubEstFilter);
        IF gvCopyTryOut AND TryOutRec.READPERMISSION THEN
          TryOutRec.CopyRelation(1, 0, EstRec."No.", EstRec."Project No.");
        CheckBudgetSummary(ProjTo, ExtTo, OptTo);
      END;

      Status.CLOSE;
    END;

    PROCEDURE Collect@2(EstFrom@11012000 : Code[20];CopyFromCostEst@1100485000 : Code[20];SubEstFilter@11012001 : Code[250];EstPartFilter@1100525001 : Code[250];StatusFilter@1100525000 : Code[250];SheetFilter@11012002 : Code[250];SelectSheet@1210190000 : Boolean);
    BEGIN
      Status.UPDATE(3, Text004);
      HelpLino := 0;

      CollectFromEstLine(EstFrom, CopyFromCostEst, SubEstFilter, EstPartFilter, StatusFilter);
      CollectFromRcpLine(EstFrom, CopyFromCostEst, SubEstFilter, EstPartFilter, StatusFilter);
      IF SelectSheet = TRUE THEN BEGIN
        IF gvTransferDestination = gvTransferDestination::ServOrder THEN
          CopySummary(EstFrom, SheetFilter);
        IF gvTransferDestination = gvTransferDestination::Project THEN
          CollectFromSumLine(EstFrom, CopyFromCostEst, SheetFilter);
      END;
    END;

    PROCEDURE CollectFromEstLine@1100525010(EstFrom@1100525009 : Code[20];CopyFromCostEst@1100525008 : Code[20];SubEstFilter@1100525007 : Code[250];EstPartFilter@1100525000 : Code[250];StatusFilter@1100525001 : Code[250]);
    BEGIN
      EstLineRec.SETRANGE("Estimate No.", CopyFromCostEst);
      IF EstPartFilter <> '' THEN
        EstLineRec.SETFILTER("Element No.", EstPartFilter);
      IF StatusFilter <> '' THEN
        EstLineRec.SETFILTER("Line Status", StatusFilter);
      IF EstLineRec.FINDSET THEN BEGIN
        LineCount := 0;
        NoOfRecords := EstLineRec.COUNT;
        REPEAT
          IF gvTransferDestination = gvTransferDestination::Project THEN BEGIN
            IF (EstLineRec."Project No." <> '') THEN
              JobNo := EstLineRec."Project No."
            ELSE
              JobNo := DetermineProject(
                EstLineRec."Estimate No.",'','','','');
            IF (EstLineRec.Element <> '') THEN
              ProjectElement := EstLineRec.Element
            ELSE
              ProjectElement := DetermineElement(
                EstLineRec."Estimate No.",'','','','');
          END;
          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          FillHelpEstimateRec(EstFrom);
        UNTIL EstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CollectFromRcpLine@1100525013(EstFrom@1100525009 : Code[20];CopyFromCostEst@1100525008 : Code[20];SubEstFilter@1100525007 : Code[250];EstPartFilter@1100525000 : Code[250];StatusFilter@1100525001 : Code[250]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CollectFromSumLine@1100525016(EstFrom@1100525002 : Code[20];CopyFromCostEst@1100525001 : Code[20];SheetFilter@1100525000 : Code[250]);
    VAR
      SumLineRec@1100525003 : Record 11012171;
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE Transfer@4(EstFrom@11012000 : Code[20];ProjTo@11012001 : Code[20];ExtTo@11012002 : Code[20];AdjTo@11012003 : Code[20];PlotTo@1100485001 : Code[20];OptTo@1210190002 : Code[20]);
    VAR
      StoreProj@1210190000 : Code[20];
      SwitchProj@1210190001 : Boolean;
      LineTransfered@1210190005 : Boolean;
      lvCostType@1100485000 : Integer;
      PrevCode@1100525000 : Code[20];
    BEGIN
      Status.UPDATE(3, Text006);
      BudgetLino := 0;
      StoreProj := ProjTo;
      SwitchProj := TRUE;
      PrevCode := '~';

      IF gvTransferDestination = gvTransferDestination::ServOrder THEN BEGIN
        RemoveServOrderLines;
        IF gvTransferStructure = TRUE THEN
          HelpRec.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.")
        ELSE
          HelpRec.SETCURRENTKEY("Estimate No.", Code);
        HelpRec.SETRANGE("Summary Line", FALSE);
      END;
      HelpRec.SETRANGE("Estimate No.", EstFrom);
      IF NOT HelpRec.FINDSET THEN BEGIN
        MESSAGE(Text007);
      END ELSE BEGIN
        LineCount := 0;
        NoOfRecords := HelpRec.COUNT;
        REPEAT
          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));

          IF gvTransferDestination = gvTransferDestination::Project THEN BEGIN
            IF HelpRec."Project No." = '' THEN
              HelpRec."Project No." := StoreProj;
            IF ProjTo <> HelpRec."Project No." THEN BEGIN
              ProjTo := HelpRec."Project No.";
              SwitchProj := TRUE;
            END;
            IF ProjRec.GET(ProjTo) THEN BEGIN
              ProjRec."Estimate No." := EstFrom;
              ProjRec.MODIFY(TRUE);
            END;

            ProjBudgetRec.RESET;
            ProjBudgetRec.SETRANGE("Project No.", ProjTo);
            ProjBudgetRec.SETRANGE("Extension Contract", '');
            ProjBudgetRec.SETRANGE(Adjustment, '');
            ProjBudgetRec.SETRANGE(Option, '');
            IF ExtTo <> '' THEN
              ProjBudgetRec.SETRANGE("Extension Contract", ExtTo);
            IF AdjTo <> '' THEN
              ProjBudgetRec.SETRANGE(Adjustment, AdjTo);
            IF OptTo <> '' THEN
              ProjBudgetRec.SETRANGE(Option, OptTo);
            ProjBudgetRec.SETRANGE("Budget Summary Line", FALSE);
            IF ProjBudgetRec.FINDLAST THEN BEGIN
              IF SwitchProj = TRUE THEN
                IF NOT CONFIRM(Text008, FALSE, ProjTo) THEN
                  ERROR('');
              BudgetLino := ProjBudgetRec."Line No.";
            END;

            SwitchProj := FALSE;
            IF ProjTo <> '' THEN
              CheckProjectElement(ProjTo);
            IF PlotTo <> '' THEN
              PlotRec.GET(ProjTo, PlotTo);
          END;

          IF gvTransferDestination = gvTransferDestination::ServOrder THEN BEGIN
            IF ((gvTransferStructure = FALSE) AND (HelpRec.Code <> PrevCode)) OR
               ((gvTransferStructure = TRUE) AND (HelpRec."Sub-Estimate No." <> PrevCode)) THEN BEGIN
              IF HelpRec."Service Order No." = '' THEN BEGIN
                IF gvTransferStructure = TRUE THEN
                  CreateServOrder(ServOrderRec, HelpRec."Sub-Estimate No.")
                ELSE
                  CreateServOrder(ServOrderRec, '');
                BudgetLino := 0;
              END ELSE BEGIN
                IF HelpRec."Service Order No." <> ServOrderRec."No." THEN
                  ServOrderRec.GET(HelpRec."Service Order No.");
              END;
            END;
            IF HelpRec."Service Order No." = '' THEN BEGIN
              HelpRec."Service Order No." := ServOrderRec."No.";
              IF EstLineRec.GET(HelpRec."Estimate No.", HelpRec."Sub-Estimate No.",
                HelpRec."Part Group", HelpRec.Part, HelpRec."Estimate Line No.") THEN BEGIN
                EstLineRec."Service Order No." := HelpRec."Service Order No.";
                EstLineRec.MODIFY;
              END;
            END;
            IF gvTransferStructure = TRUE THEN
              PrevCode := HelpRec."Sub-Estimate No."
            ELSE
              PrevCode := HelpRec.Code;
          END;

          IF (HelpRec.Quantity <> 0) THEN BEGIN
            LineTransfered := FALSE;
            FOR lvCostType := 1 TO 5 DO BEGIN
              IF CostTypeValid(lvCostType) THEN BEGIN
                LineTransfered := TRUE;
                IF gvTransferDestination = gvTransferDestination::Project THEN BEGIN
                  IF CheckProjBudgetPresent(lvCostType, OptTo) THEN
                    UpdateProjBudget
                  ELSE
                    FillProjBudgetRec(ProjTo, ExtTo, AdjTo, OptTo, lvCostType);
                  IF ProjBudgetRec.Option <> '' THEN
                    AssignOptionBudget;
                END;
                IF gvTransferDestination = gvTransferDestination::ServOrder THEN
                  UpdateServBudgetFromEstimate(lvCostType);
              END;
            END;
            IF LineTransfered = FALSE THEN BEGIN
              lvCostType := 5;
              IF HelpRec."Item No." + HelpRec."Basic Item" + HelpRec."Trade Item" <> '' THEN
                lvCostType := 2
              ELSE
                IF HelpRec."Cost Object Labor" <> '' THEN
                  lvCostType := 1
                ELSE
                  IF HelpRec."Cost Object Material" <> '' THEN
                    lvCostType := 2
                  ELSE
                    IF HelpRec."Cost Object Subcontracting" <> '' THEN
                      lvCostType := 3
                    ELSE
                      IF HelpRec."Cost Object Plant" <> '' THEN
                        lvCostType := 4;
              IF gvTransferDestination = gvTransferDestination::Project THEN BEGIN
                IF CheckProjBudgetPresent(lvCostType, OptTo) THEN
                  UpdateProjBudget
                ELSE
                  FillProjBudgetRec(ProjTo, ExtTo, AdjTo, OptTo, lvCostType);
                IF ProjBudgetRec.Option <> '' THEN
                  AssignOptionBudget;
              END;
              IF gvTransferDestination = gvTransferDestination::ServOrder THEN
                UpdateServBudgetFromEstimate(lvCostType);
            END;
          END;
        UNTIL HelpRec.NEXT = 0;
      END;

      IF gvTransferDestination = gvTransferDestination::ServOrder THEN BEGIN
        CheckRelationSubEstServOrder(EstFrom);
        UpdateServOrderSummary;
      END;
    END;

    PROCEDURE DetermineProject@13(lvEst@1210190000 : Code[20];lvSubEst@1210190001 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190003 : Code[20];lvSum@1210190004 : Code[20]) : Code[20];
    VAR
      EstRec@11012002 : Record 11012151;
      SumRec@1210190006 : Record 11012172;
    BEGIN
      IF NOT EstRec.GET(lvEst) THEN
        EstRec.INIT;
      IF EstRec."Project No." <> '' THEN
        EXIT(EstRec."Project No.");

      EXIT('');
    END;

    PROCEDURE DetermineElement@1210190000(lvEst@1210190004 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190001 : Code[20];lvSum@1210190000 : Code[20]) : Code[20];
    VAR
      EstRec@11012002 : Record 11012151;
      SumRec@1210190005 : Record 11012172;
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      IF NOT EstRec.GET(lvEst) THEN
        EstRec.INIT;
      IF EstRec.Element <> '' THEN
        EXIT(EstRec.Element);

      IF lvProjRec.GET(JobNo) THEN
        IF lvProjRec."Posting Element Mandatory" THEN
          IF lvSum <> '' THEN
            ERROR(Text005, lvSum)
          ELSE
            ERROR(Text010, lvSubEst, lvPart);

      EXIT('');
    END;

    PROCEDURE CheckProjectElement@1210190002(ProjTo@1210190000 : Code[20]);
    BEGIN
      ProjElemRec.SETRANGE("Project No.", ProjTo);
      ProjElemRec.SETFILTER(Level, '%1', 0);
      IF NOT ProjElemRec.FINDSET(TRUE, FALSE) THEN BEGIN
        ElemRec.SETFILTER(Level, '%1', 0);
        IF NOT ElemRec.FINDFIRST THEN BEGIN
          ERROR(Text009, ElemRec.TABLECAPTION);
        END ELSE BEGIN
          ProjElemRec.INIT;
          ProjElemRec."Project No." := ProjTo;
          ProjElemRec.VALIDATE(Element, ElemRec.Code);
          ProjElemRec.INSERT(TRUE);

          ProjRec.GET(ProjTo);
          ProjElemRec."Starting Date" := ProjRec."Starting Date";
          ProjElemRec."Ending Date" := ProjRec."Ending Date";
          ProjElemRec.Description := ElemRec.Description;
          ProjElemRec."Unit of Measure" := ElemRec."Unit of Measure";
          ProjElemRec.Quantity := 1;
          ProjElemRec.MODIFY(TRUE);
        END;
      END;

      ProjElemRec.RESET;
      ElemRec.RESET;

      IF NOT ProjElemRec.GET(ProjTo, HelpRec."Project Element") THEN BEGIN
        IF ElemRec.GET(HelpRec."Project Element") THEN BEGIN
          IF NOT ProjElemRec.GET(ProjTo, ElemRec.Chapter) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Chapter) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := ProjTo;
              ProjElemRec.VALIDATE(Element, ElemRec.Chapter);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
          IF NOT ProjElemRec.GET(ProjTo, ElemRec.Paragraph) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Paragraph) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := ProjTo;
              ProjElemRec.VALIDATE(Element, ElemRec.Paragraph);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
          IF NOT ProjElemRec.GET(ProjTo, ElemRec.Code) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Code) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := ProjTo;
              ProjElemRec.VALIDATE(Element, ElemRec.Code);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CopyStructure@1210190003(lvEst@1210190003 : Code[20];lvSubEst@1210190002 : Code[20];lvPartGrp@1210190001 : Code[20];lvPart@1210190000 : Code[20]);
    VAR
      lvChapter@1210190004 : Code[20];
      lvParagraph@1210190005 : Code[20];
      lvLevel@1210190006 : Integer;
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE FillHelpEstimateRec@12(EstFrom@1100485001 : Code[20]);
    VAR
      lvAdmiCodeRec@1100485000 : Record 11012390;
    BEGIN
      HelpRec.INIT;
      HelpRec."Estimate No." := EstFrom;
      HelpRec.Part := EstLineRec."Element No.";  //ISS
      HelpRec."Estimate Line No." := EstLineRec."Line No.";
      HelpRec."Line No." := HelpLino + 10000;
      HelpLino := HelpRec."Line No.";
      HelpRec."Project No." := JobNo;
      HelpRec."Project Element" := ProjectElement;
      HelpRec.Description := EstLineRec.Description;
      HelpRec."Time Quantity" := EstLineRec."Time Quantity";
      HelpRec."Unit of Time" := EstLineRec."Unit of Time";
      //IF EstLineRec."Ignore Part Quantity" THEN  //db, 18-02-10: T4468
      //  HelpRec.Quantity := EstLineRec.Quantity
      //ELSE
      //  HelpRec.Quantity := EstLineRec.Quantity * EstLineRec."Part Quantity";
      HelpRec.Quantity := EstLineRec."Cumulative Quantity";  //db, 06-03-15: C016484 (PartQuantity not adjusted for RAW)
      HelpRec."Unit of Measure" := EstLineRec."Unit of Measure";
      IF EstLineRec."Cum. Adj. Factor Hours" <> 0 THEN
        HelpRec.Norm := EstLineRec.Norm * EstLineRec."Cum. Adj. Factor Hours"
      ELSE
        HelpRec.Norm := EstLineRec.Norm;

      HelpRec."Norm (Plant)" := EstLineRec."Norm (Plant)";

      HelpRec."Rate Code" := EstLineRec."Rate Code";
      HelpRec.Rate := EstLineRec.Rate;
      IF EstLineRec."Cum. Adj. Factor Material" <> 0 THEN
        HelpRec."Material Price" := EstLineRec."Material Price" * EstLineRec."Cum. Adj. Factor Material"
      ELSE
        HelpRec."Material Price" := EstLineRec."Material Price";
      IF EstLineRec."Cum. Adj. Factor Subcontr." <> 0 THEN
        HelpRec."Subcontracting Price" := EstLineRec."Subcontracting Price" * EstLineRec."Cum. Adj. Factor Subcontr."
      ELSE
        HelpRec."Subcontracting Price" := EstLineRec."Subcontracting Price";
      IF EstLineRec."Cum. Adj. Factor Plant" <> 0 THEN
        HelpRec."Plant Price" := EstLineRec."Plant Price" * EstLineRec."Cum. Adj. Factor Plant"
      ELSE
        HelpRec."Plant Price" := EstLineRec."Plant Price";
      HelpRec."Gross Price" := EstLineRec."Gross Price";
      HelpRec."Discount %" := EstLineRec."Discount %";
      HelpRec."Sundry Cost" := EstLineRec."Sundry Price";  //ISS

      IF EstLineRec.Admicode <> '' THEN BEGIN
        IF lvAdmiCodeRec.GET(EstLineRec.Admicode) THEN BEGIN
          IF (lvAdmiCodeRec."Cost Object Material" <> '') AND (EstLineRec."Cost Object Material"  = '' ) THEN
            EstLineRec."Cost Object Material" := lvAdmiCodeRec."Cost Object Material";

          IF (lvAdmiCodeRec."Cost Object Subcontracting" <> '') AND (EstLineRec."Cost Object Subcontracting" = '') THEN
            EstLineRec."Cost Object Subcontracting" := lvAdmiCodeRec."Cost Object Subcontracting";

          IF (lvAdmiCodeRec."Cost Object Plant" <> '') AND (EstLineRec."Cost Object Plant" = '') THEN
            EstLineRec."Cost Object Plant" := lvAdmiCodeRec."Cost Object Plant";

        END;
      END;

      HelpRec."Cost Object Labor" := EstLineRec."Cost Object Labor";
      HelpRec."Cost Object Material" := EstLineRec."Cost Object Material";
      HelpRec."Cost Object Subcontracting" := EstLineRec."Cost Object Subcontracting";
      HelpRec."Cost Object Plant" := EstLineRec."Cost Object Plant";
      HelpRec."Cost Object Sundry" := EstLineRec."Cost Object Sundry";  //ISS
      HelpRec."Cost Component" := EstLineRec."Cost Component";
      HelpRec."Item No." := EstLineRec."Item No.";
      HelpRec."Basic Item" := EstLineRec."Basic Item";
      HelpRec."Trade Item" := EstLineRec."Trade Item";
      HelpRec."Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
      HelpRec.Manufacturer := EstLineRec.Manufacturer;
      HelpRec."External Text" := EstLineRec."External Text";
      HelpRec."Purchase Route Reference" := EstLineRec."Purchase Route Reference";
      HelpRec."Price Agreement" := EstLineRec."Price Agreement";
      HelpRec.Vendor := EstLineRec.Vendor;
      HelpRec.Subcontractor := EstLineRec.Subcontractor;
      HelpRec.Discipline := EstLineRec.Discipline;
      HelpRec."Trade Speciality" := EstLineRec."Trade Speciality";
      HelpRec."Trade Expertise" := EstLineRec."Trade Expertise";
      HelpRec."Scheme Code" := EstLineRec."Scheme Code";
      HelpRec.Comments := EstLineRec. Comments;
      HelpRec.Supply := EstLineRec.Supply;
      HelpRec."Remarks for Logistics" := EstLineRec."Comments for Logistics";
      HelpRec."Material Sheet" := EstLineRec."Material Sheet";
      IF gvTransferPurchAction THEN BEGIN
        HelpRec."Purchase Action Mat." := EstLineRec."Purchase Action Mat.";
        HelpRec."Purchase Action Subc." := EstLineRec."Purchase Action Subc." ;
        HelpRec."Purchase Action Plant" := EstLineRec."Purchase Action Plant";
      END;

      HelpRec."Record Type" := gvTransferDestination;
      HelpRec."Summary Line" := EstLineRec."Summary Line";  //ISS
      IF ServOrderRec.GET(EstLineRec."Service Order No.") THEN
        HelpRec."Service Order No." := EstLineRec."Service Order No.";

      HelpRec."Project Planning Activity Code" := EstLineRec."Project Planning Activity Code";
      HelpRec."Project Planning Activity No." := HelpRec."Project No." + EstLineRec."Project Planning Activity Code";
      HelpRec.INSERT;

      IF gvTransferDestination = gvTransferDestination::Project THEN
        CheckLastProject;

      IF gvTransferDestination = gvTransferDestination::ServOrder THEN
        FillTmpServOrder;
    END;

    PROCEDURE FillHelpRecipeRec@6(EstFrom@1100485001 : Code[20]);
    VAR
      lvAdmiCodeRec@1100485000 : Record 11012390;
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE FillHelpSummaryRec@9(SumLineRec@1100485000 : Record 11012171;EstFrom@1100485001 : Code[20]);
    VAR
      DimValRec@11012000 : Record 349;
      DimMgt@11012001 : Codeunit 408;
      AdjustFactor@1210190000 : Integer;
    BEGIN
      EstSetup.GET;  //db, 13-12-07: also called for transfer estimate to serviceorder
      AdjustFactor := 0;

      HelpRec.INIT;
      //HelpRec."Estimate No." := SumLineRec."Estimate No.";
      HelpRec."Estimate No." := EstFrom;
      HelpRec."Line No." := HelpLino + 10000;
      HelpLino := HelpRec."Line No.";
      HelpRec."Project No." := JobNo;
      HelpRec."Project Element" := ProjectElement;
      HelpRec.Description := SumLineRec.Description;
      HelpRec."Cost Component" := SumLineRec."Cost Component";
      HelpRec."Wage Component" := SumLineRec."Wage Component";
      HelpRec.Quantity := 1;
      HelpRec."Time Quantity" := 1;

      IF SumLineRec."Cost Object" = '' THEN BEGIN  //db, 14-05-08: M11119
        EstSetup.TESTFIELD("Absence Value Sundry Cost");
        SumLineRec."Cost Object" := EstSetup."Absence Value Sundry Cost";
      END;
      DimMgt.GetDimValueRec(2, SumLineRec."Cost Object", DimValRec, TRUE, JobNo);

      CASE DimValRec."Cost Type" OF
        DimValRec."Cost Type"::Labor:
          BEGIN
            AdjustFactor := AdjustFactor + 1;
            HelpRec."Cost Object Labor" := DimValRec.Code;
            HelpRec.Norm := 1;
            HelpRec.Rate := SumLineRec.Amount;

            IF SumLineRec."Adjustment Factor Hours" <> 0 THEN BEGIN
              AdjustFactor := AdjustFactor - 1;
              HelpRec.Description :=
                COPYSTR((STRSUBSTNO(Text012, SumLineRec."Adjustment Factor Hours") + SumLineRec.Description),
                1, MAXSTRLEN(HelpRec.Description));
              HelpRec.Quantity := SumLineRec.Hours - (SumLineRec.Hours / SumLineRec."Adjustment Factor Hours");
              HelpRec.Rate := SumLineRec.Amount - (SumLineRec.Amount / SumLineRec."Adjustment Factor Hours");
              IF HelpRec.Quantity <> 0 THEN
                HelpRec.Rate := HelpRec.Rate/ HelpRec.Quantity;
            END;

            IF SumLineRec."Adjustment Factor Hours" = 1 THEN EXIT;

            IF SumLineRec.Hours <> 0 THEN BEGIN
              IF (SumLineRec.Type = SumLineRec.Type::"Surcharge Hours") OR
                 (SumLineRec.Type = SumLineRec.Type::"Additional Costs") THEN
              BEGIN
                AdjustFactor := AdjustFactor - 1;
                HelpRec.Quantity := SumLineRec.Hours;
                HelpRec.Rate := SumLineRec.Amount / SumLineRec.Hours;
              END;
            END;

            HelpRec.Quantity := ROUND(HelpRec.Quantity, 0.01);
            HelpRec.Rate := ROUND(HelpRec.Rate, 0.01);
          END;
        DimValRec."Cost Type"::Material:
          BEGIN
            HelpRec."Cost Object Material" := DimValRec.Code;
            HelpRec."Material Price" := ROUND(SumLineRec.Amount, 0.01);
          END;
        DimValRec."Cost Type"::Subcontracting:
          BEGIN
            HelpRec."Cost Object Subcontracting" := DimValRec.Code;
            HelpRec."Subcontracting Price" := ROUND(SumLineRec.Amount, 0.01);
          END;
        DimValRec."Cost Type"::Plant:
          BEGIN
            HelpRec."Cost Object Plant" := DimValRec.Code;
            HelpRec."Plant Price" := ROUND(SumLineRec.Amount, 0.01);
          END;
        DimValRec."Cost Type"::Sundry:
          BEGIN
            HelpRec."Cost Object Sundry" := DimValRec.Code;
            HelpRec."Sundry Cost" := ROUND(SumLineRec.Amount, 0.01);
          END;
      END;

      HelpRec."Record Type" := gvTransferDestination;
      HelpRec."Summary Line" := TRUE;
      HelpRec."Contract Amount" := SumLineRec."Contract Amount";
      HelpRec.Code := GetCode(HelpRec.FIELDNO(Code), HelpRec."Estimate No.", HelpRec."Sub-Estimate No.", '', '', 0, '');

      HelpRec.INSERT;

      IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Labor) AND (AdjustFactor <> 0) THEN BEGIN
        HelpRec."Line No." := HelpLino + 10000;
        HelpLino := HelpRec."Line No.";
        HelpRec.Quantity := -1 * AdjustFactor;
        HelpRec.Rate := 0;
        HelpRec.Description := Text011;
        HelpRec."Cost Object Labor" := EstSetup."Absence Value Labor";
        HelpRec.INSERT;
      END;

      IF gvTransferDestination = gvTransferDestination::Project THEN
        CheckLastProject;
    END;

    PROCEDURE FillProjBudgetRec@7(ProjTo@11012000 : Code[20];ExtTo@11012001 : Code[20];AdjTo@11012002 : Code[20];OptTo@1210190000 : Code[20];CostType@1210190003 : Integer);
    VAR
      ProjectPlanningActivity@1100525000 : Record 11012431;
    BEGIN
      ProjBudgetRec.INIT;
      ProjBudgetRec."Project No." := ProjTo;
      ProjBudgetRec.Adjustment :=  AdjTo;
      ProjBudgetRec."Extension Contract" := ExtTo;
      ProjBudgetRec.Option := OptTo;
      ProjBudgetRec."Line No." := BudgetLino + 10000;
      BudgetLino := ProjBudgetRec."Line No.";
      ProjBudgetRec.Element := HelpRec."Project Element";
      IF ProjBudgetRec.Option = '' THEN
        ProjBudgetRec.VALIDATE(Element);
      SplitDesc(HelpRec.Description, MAXSTRLEN(ProjBudgetRec.Description));
      ProjBudgetRec.Description := desc1;
      ProjBudgetRec."Description 2" := desc2;
      ProjBudgetRec."Unit of Measure" :=  HelpRec."Unit of Measure";
      ProjBudgetRec.Quantity := HelpRec.Quantity;
      ProjBudgetRec."Time Quantity" := HelpRec."Time Quantity";
      ProjBudgetRec."Unit of Time" := HelpRec."Unit of Time";
      ProjBudgetRec.VALIDATE("External Text", HelpRec."External Text");
      ProjBudgetRec."Estimate No." := HelpRec."Estimate No.";
      IF gvTransferSubEstimate THEN
        ProjBudgetRec."Sub-Estimate No." := HelpRec."Sub-Estimate No.";
      ProjBudgetRec."Tender Paragraph" := HelpRec.Part;  //ISS

      // jhoek.130910.begin
      IF HelpRec."Project Planning Activity Code" <> '' THEN BEGIN
        ProjectPlanningActivity."Project No." := ProjTo;
        ProjectPlanningActivity.VALIDATE(Code, HelpRec."Project Planning Activity Code");
        IF NOT ProjectPlanningActivity.INSERT(TRUE) THEN;

        ProjBudgetRec."Project Planning Activity No." := ProjectPlanningActivity."No.";
      END;
      // jhoek.130910.end

      CASE CostType OF
        1:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Labor;
            IF HelpRec."Cost Object Labor" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Labor"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            // jhoek.080211.begin
            // ProjBudgetRec.Norm := HelpRec.Norm;
            ProjBudgetRec.VALIDATE(Norm, HelpRec.Norm);
            // jhoek.080211.end
            ProjBudgetRec.Rate := HelpRec.Rate;
          END;
        2:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Material;
            IF HelpRec."Cost Object Material" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Material"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ProjBudgetRec.Price := HelpRec."Material Price";
            ProjBudgetRec.Manufacturer := HelpRec.Manufacturer;
            ProjBudgetRec."Item No." := HelpRec."Item No.";
            ProjBudgetRec."Basic Item" := HelpRec."Basic Item";
            ProjBudgetRec."Trade Item" := HelpRec."Trade Item";
            ProjBudgetRec."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
            ProjBudgetRec."Scheme Code" := HelpRec."Scheme Code";
            ProjBudgetRec.Comments := HelpRec.Comments;
            ProjBudgetRec.Supply := HelpRec.Supply;
            ProjBudgetRec."Comments for Logistics" := HelpRec."Remarks for Logistics";
            ProjBudgetRec."Material Sheet" := HelpRec."Material Sheet";
            IF gvTransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action Mat.";
          END;
        3:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Subcontracting;
            IF HelpRec."Cost Object Subcontracting" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Subcontracting"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ProjBudgetRec.Price := HelpRec."Subcontracting Price";
            IF gvTransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action Subc.";
          END;
        4:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Plant;
            IF HelpRec."Cost Object Plant" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Plant"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ProjBudgetRec.Price := HelpRec."Plant Price";
            IF gvTransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action Plant";
            // jhoek.080211.begin
            // ProjBudgetRec.Norm := HelpRec."Norm (Plant)"; // jhoek
            ProjBudgetRec.VALIDATE(Norm, HelpRec."Norm (Plant)");
            // jhoek.080211.end
          END;
        5:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Sundry;
            IF HelpRec."Cost Object Sundry" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Sundry Cost"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Sundry";
            ProjBudgetRec.Price := HelpRec."Sundry Cost";
          END;
      END;

      ProjBudgetRec."Cost Component" :=
        GetCostComponent(HelpRec."Cost Component", ProjBudgetRec."Cost Object", ProjBudgetRec."Project No.", '', FALSE);

      IF HelpRec."Discount %" <> 0 THEN BEGIN
        ProjBudgetRec."Discount %" := HelpRec."Discount %";
        ProjBudgetRec."Gross Price" := HelpRec."Gross Price";
      END;
      ProjBudgetRec.CalcTotals;
      IF ProjBudgetRec.Option = '' THEN BEGIN
        IF ProjBudgetRec."Purchase Action" <> '' THEN
          CheckPurchaseAction;
        ProjBudgetRec.INSERT(TRUE);
        ProjBudgetRec."Price Agreement" := HelpRec."Price Agreement";
        ProjBudgetRec.Vendor := HelpRec.Vendor;
        IF (HelpRec."Purchase Route Reference" <> '') THEN BEGIN
          ProjBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
          RouteRefMgtCU.UpdateQuoteLinesFromBudget(ProjBudgetRec);
        END;
        ProjBudgetRec.MODIFY;
      END;
    END;

    PROCEDURE CheckProjBudgetPresent@5(CostType@11012000 : Integer;OptTo@1210190000 : Code[20]) : Boolean;
    BEGIN
      EXIT(FALSE);  //ISS

      IF OptTo <> '' THEN
        EXIT;

      ProjBudgetRec.SETRANGE(Norm);
      ProjBudgetRec.SETRANGE(Rate);
      ProjBudgetRec.SETRANGE(Price);
      ProjBudgetRec.SETRANGE("Item No.");
      ProjBudgetRec.SETRANGE("Basic Item");
      ProjBudgetRec.SETRANGE("Trade Item");
      ProjBudgetRec.SETRANGE("Vendor (Trade Item)");
      ProjBudgetRec.SETRANGE(Manufacturer);
      ProjBudgetRec.SETRANGE("Scheme Code");
      ProjBudgetRec.SETRANGE(Comments);
      ProjBudgetRec.SETRANGE(Supply);
      ProjBudgetRec.SETRANGE("Comments for Logistics");
      ProjBudgetRec.SETRANGE("Material Sheet");
      ProjBudgetRec.SETRANGE("Purchase Action");

      CASE CostType OF
        1:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Labor);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Labor");
            ProjBudgetRec.SETRANGE(Norm, HelpRec.Norm);
            ProjBudgetRec.SETRANGE(Rate, HelpRec.Rate);
          END;
        2:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Material);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Material");
            ProjBudgetRec.SETRANGE(Price, HelpRec."Material Price");
            ProjBudgetRec.SETRANGE("Item No.", HelpRec."Item No.");
            ProjBudgetRec.SETRANGE("Basic Item", HelpRec."Basic Item");
            ProjBudgetRec.SETRANGE("Trade Item", HelpRec."Trade Item");
            ProjBudgetRec.SETRANGE("Vendor (Trade Item)", HelpRec."Vendor (Trade Item)");
            ProjBudgetRec.SETRANGE(Manufacturer, HelpRec.Manufacturer);
            ProjBudgetRec.SETRANGE("Scheme Code", HelpRec."Scheme Code");
            ProjBudgetRec.SETRANGE(Comments, HelpRec.Comments);
            ProjBudgetRec.SETRANGE(Supply, HelpRec.Supply);
            ProjBudgetRec.SETRANGE("Comments for Logistics", HelpRec."Remarks for Logistics");
            ProjBudgetRec.SETRANGE("Material Sheet", HelpRec."Material Sheet");
            IF gvTransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action Mat.");
          END;
        3:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Subcontracting);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Subcontracting");
            ProjBudgetRec.SETRANGE(Price, HelpRec."Subcontracting Price");
            IF gvTransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action Subc.");
          END;
        4:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Plant);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Plant");
            ProjBudgetRec.SETRANGE(Price, HelpRec."Plant Price");
            IF gvTransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action Plant");
          END;
        5:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Sundry);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Sundry");
            ProjBudgetRec.SETRANGE(Price, HelpRec."Sundry Cost");
          END;
      END;

      ProjBudgetRec.SETRANGE("Cost Component",
        GetCostComponent(HelpRec."Cost Component", HelpRec."Cost Object", HelpRec."Project No.", '', FALSE));

      SplitDesc(HelpRec.Description, MAXSTRLEN(ProjBudgetRec.Description));
      ProjBudgetRec.SETRANGE(Description, desc1);
      ProjBudgetRec.SETRANGE("Description 2", desc2);
      ProjBudgetRec.SETRANGE("Unit of Measure", HelpRec."Unit of Measure");
      ProjBudgetRec.SETRANGE("Unit of Time", HelpRec."Unit of Time");
      ProjBudgetRec.SETRANGE(Element, HelpRec."Project Element");
      ProjBudgetRec.SETRANGE("Project Planning Activity No.", HelpRec."Project Planning Activity No.");
      ProjBudgetRec.SETRANGE("External Text", HelpRec."External Text");
      ProjBudgetRec.SETRANGE("Purchase Route Reference", HelpRec."Purchase Route Reference");
      ProjBudgetRec.SETRANGE("Price Agreement", HelpRec."Price Agreement");
      ProjBudgetRec.SETRANGE(Vendor, HelpRec.Vendor);
      ProjBudgetRec.SETRANGE("Discount %", HelpRec."Discount %");
      ProjBudgetRec.SETRANGE(Advised, FALSE);
      ProjBudgetRec.SETRANGE("Estimate No.", HelpRec."Estimate No.");
      ProjBudgetRec.SETRANGE("Project Planning Activity No.", HelpRec."Project Planning Activity No."); // jhoek.130910
      IF gvTransferSubEstimate THEN
        ProjBudgetRec.SETRANGE("Sub-Estimate No.", HelpRec."Sub-Estimate No.");

      IF ProjBudgetRec.FINDSET(TRUE, FALSE) THEN //Later on table is modified
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateProjBudget@8();
    BEGIN
      ProjBudgetRec.Quantity := ProjBudgetRec.Quantity + HelpRec.Quantity;
      ProjBudgetRec.CalcTotals;
      ProjBudgetRec.MODIFY(TRUE);
    END;

    PROCEDURE UpdateProjRec@1210190001(EstFrom@1210190002 : Code[20];ProjTo@1210190001 : Code[20]);
    VAR
      ProjCustRec@1100485000 : Record 11012005;
    BEGIN
      EstRec.GET(EstFrom);
      ProjRec.GET(ProjTo);

      IF ProjRec.Description = '' THEN ProjRec.Description := EstRec.Description;
      IF ProjRec.Address = '' THEN ProjRec.Address := EstRec.Address;
      IF ProjRec."Post Code" = '' THEN ProjRec."Post Code" := EstRec."Post Code";
      IF ProjRec.City = '' THEN ProjRec.City := EstRec.City;
      IF ProjRec."Territory Code" = '' THEN ProjRec."Territory Code" := EstRec."Territory Code";
      IF ProjRec.Discipline = '' THEN ProjRec.Discipline := EstRec.Discipline;  // 31703.n
      IF ProjRec.Type = '' THEN ProjRec.Type := EstRec.Type;
      IF ProjRec."Bill-to Customer No." = '' THEN ProjRec."Bill-to Customer No." := EstRec."Customer No.";
      IF ProjRec."Starting Date" = 0D THEN ProjRec."Starting Date" := EstRec."Starting Date";
      IF ProjRec."Ending Date" = 0D THEN ProjRec."Ending Date" := EstRec."Ending Date";
      IF ProjRec.Estimator = '' THEN ProjRec.Estimator := EstRec.Estimator;
      IF ProjRec."Purchaser Code" = '' THEN ProjRec."Purchaser Code" := EstRec."Purchaser Code";
      IF ProjRec."Reference Date (Item)" = 0D THEN ProjRec."Reference Date (Item)" := EstRec."Reference Date (Item)";
      IF ProjRec."Purch Discount Term Group 1" = '' THEN ProjRec."Purch Discount Term Group 1" := EstRec."Purch Discount Term Group 1";
      IF ProjRec."Purch Discount Term Group 2" = '' THEN ProjRec."Purch Discount Term Group 2" := EstRec."Purch Discount Term Group 2";
      ProjRec.MODIFY(TRUE);

      IF ProjRec."Bill-to Customer No." <> '' THEN BEGIN
        IF NOT ProjCustRec.GET(ProjRec."No.", ProjRec."Bill-to Customer No.") THEN BEGIN
          ProjCustRec.INIT;
          ProjCustRec."Project No." := ProjRec."No.";
          ProjCustRec.VALIDATE(Principal, ProjRec."Bill-to Customer No.");
          ProjCustRec.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE AssignOptionBudget@3();
    VAR
      LastLino@11012000 : Integer;
      OptionBudgetRec@1210190005 : Record 11012503;
    BEGIN
      OptionBudgetRec.SETRANGE("Project No.", ProjBudgetRec."Project No.");
      OptionBudgetRec.SETFILTER("Plot No.",'%1', gPlotTo);
      OptionBudgetRec.SETRANGE("House Model", gHouseModelTo);
      OptionBudgetRec.SETRANGE("Main Group", gMainGroupTo);
      OptionBudgetRec.SETRANGE(Group, gGroupTo);
      OptionBudgetRec.SETRANGE("Sub Group", gSubGroupTo);
      OptionBudgetRec.SETRANGE(Option, ProjBudgetRec.Option);
      IF NOT OptionBudgetRec.FINDLAST THEN
        LastLino := 10000
      ELSE
        LastLino := OptionBudgetRec."Line No." + 10000;

      OptionBudgetRec.INIT;
      OptionBudgetRec."Project No." := ProjBudgetRec."Project No.";
      OptionBudgetRec."Plot No." := gPlotTo;
      OptionBudgetRec."House Model" := gHouseModelTo;
      OptionBudgetRec."Main Group" := gMainGroupTo;
      OptionBudgetRec.Group := gGroupTo;
      OptionBudgetRec."Sub Group" := gSubGroupTo;
      OptionBudgetRec.Option := ProjBudgetRec.Option;
      OptionBudgetRec.Element := ProjBudgetRec.Element;
      OptionBudgetRec.Chapter := ProjBudgetRec.Chapter;
      OptionBudgetRec.Paragraph := ProjBudgetRec.Paragraph;
      OptionBudgetRec."Cost Object" := ProjBudgetRec."Cost Object";
      OptionBudgetRec."Cost Component" := ProjBudgetRec."Cost Component";
      OptionBudgetRec.Description := ProjBudgetRec.Description;
      OptionBudgetRec."Description 2" := ProjBudgetRec."Description 2";
      OptionBudgetRec.Quantity := ProjBudgetRec.Quantity;
      OptionBudgetRec."Unit of Measure" := ProjBudgetRec."Unit of Measure";
      OptionBudgetRec.Norm := ProjBudgetRec.Norm;
      OptionBudgetRec.Rate := ProjBudgetRec.Rate;
      OptionBudgetRec.Hours := ProjBudgetRec.Hours;
      OptionBudgetRec.Amount := ProjBudgetRec.Amount;
      OptionBudgetRec."Line No." := LastLino;
      OptionBudgetRec."Total Amount" := ProjBudgetRec."Total Amount";
      OptionBudgetRec."Total Hours" := ProjBudgetRec."Total Hours";
      OptionBudgetRec."Cost Type" := ProjBudgetRec."Cost Type";
      OptionBudgetRec.Price := ProjBudgetRec.Price;
      OptionBudgetRec."Gross Price" := ProjBudgetRec."Gross Price";
      OptionBudgetRec."Discount %" := ProjBudgetRec."Discount %";
      OptionBudgetRec."Time Quantity" := ProjBudgetRec."Time Quantity";
      OptionBudgetRec."Unit of Time" := ProjBudgetRec."Unit of Time";
      OptionBudgetRec."Item No." := ProjBudgetRec."Item No.";
      OptionBudgetRec."Basic Item" := ProjBudgetRec."Basic Item";
      OptionBudgetRec."Trade Item" := ProjBudgetRec."Trade Item";
      OptionBudgetRec."Vendor (Trade Item)" := ProjBudgetRec."Vendor (Trade Item)";
      OptionBudgetRec.Manufacturer := ProjBudgetRec.Manufacturer;
      OptionBudgetRec.INSERT;
      OptionBudgetRec.MODIFY(TRUE);
    END;

    PROCEDURE CostTypeValid@1210190005("Cost Type"@1210190000 : Integer) : Boolean;
    BEGIN
      IF "Cost Type" = 1 THEN
        EXIT((HelpRec.Norm <> 0) OR
             ((HelpRec.Norm = 0) AND
              (HelpRec."Cost Object Labor" <> '') AND
              (gvTransferZeroLines = TRUE)));

      IF "Cost Type" = 2 THEN
        EXIT((HelpRec."Material Price" <> 0) OR
             ((HelpRec."Material Price" = 0) AND
              (HelpRec."Cost Object Material" <> '') AND
              (gvTransferZeroLines = TRUE)));

      IF "Cost Type" = 3 THEN
        EXIT((HelpRec."Subcontracting Price" <> 0) OR
             ((HelpRec."Subcontracting Price" = 0) AND
              (HelpRec."Cost Object Subcontracting" <> '') AND
              (gvTransferZeroLines = TRUE)));

      IF "Cost Type" = 4 THEN
        EXIT((HelpRec."Plant Price" <> 0) OR
             ((HelpRec."Plant Price" = 0) AND
              (HelpRec."Cost Object Plant" <> '') AND
              (gvTransferZeroLines = TRUE)));

      IF "Cost Type" = 5 THEN
        EXIT((HelpRec."Sundry Cost" <> 0) OR
             ((HelpRec."Sundry Cost" = 0) AND
              (HelpRec."Cost Object Sundry" <> '') AND
              (gvTransferZeroLines = TRUE)));
    END;

    PROCEDURE SplitDesc@1210190004(lvDesc@1100485000 : Text[100];lvMaxLen@1100485001 : Integer);
    VAR
      sep@1210190000 : Integer;
    BEGIN
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
      END ELSE BEGIN
        IF STRLEN(lvDesc) > lvMaxLen THEN BEGIN
          desc1 := COPYSTR(lvDesc, 1, lvMaxLen);
          desc2 := COPYSTR(lvDesc, lvMaxLen+1, lvMaxLen);
        END ELSE BEGIN
          desc1 := lvDesc;
          desc2 := '';
        END;
      END;

      desc1 := COPYSTR(desc1, 1, lvMaxLen);
      desc2 := COPYSTR(desc2, 1, lvMaxLen);
    END;

    PROCEDURE ProcessRecipeChild@1210190006(lvRcpGrp@1210190001 : Code[20];lvRcp@1210190002 : Code[20];EstFrom@1100485000 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CheckLastProject@1100485000();
    BEGIN
      IF LastProject = '' THEN
        LastProject := HelpRec."Project No.";
      IF LastProject <> HelpRec."Project No." THEN BEGIN
        IF SkipQuestionProject = FALSE THEN BEGIN
          IF NOT CONFIRM(Text013, FALSE) THEN
            ERROR('')
          ELSE
            SkipQuestionProject := TRUE;
        END;
      END;
    END;

    PROCEDURE CopyPartsToTenderElements@1100485002(EstFrom@1210190002 : Code[20];ProjTo@1210190001 : Code[20];SubEstFilter@1100485003 : Code[250]);
    VAR
      ProjCustRec@1100485000 : Record 11012005;
      TenderElementRec@1100485002 : Record 11012470;
      DummyAmount@1100485005 : Boolean;
      EstElemRec@1100525001 : Record 11125679;
      EstElemRec2@1100525005 : Record 11125679;
      EstVatSpecRec@1100525009 : Record 11125678;
      EstVatSpecRec2@1100525006 : Record 11125678;
      ElemVatSpecRec@1100525004 : Record 11012476;
      ElemVatSpecRec2@1100525007 : Record 11012476;
      TmpVatSpecRec@1100525012 : TEMPORARY Record 11012476;
      ProjTenderElemRec@1100525008 : Record 11012263;
      ProjectTenderElementText@1100525003 : Record 11012269;
      UnitRec@1100525000 : Record 204;
    BEGIN
      EstRec.GET(EstFrom);
      ProjRec.GET(ProjTo);

      //ISS.sn
      EstElemRec.RESET;
      EstElemRec.SETRANGE("Estimate No.", EstFrom);
      EstElemRec.SETRANGE(Title, TRUE);
      IF EstElemRec.FINDFIRST THEN BEGIN
        REPEAT
          IF NOT ProjTenderElemRec.GET(ProjRec."No.", EstElemRec."Element No.") THEN BEGIN
            ProjTenderElemRec.INIT;
            ProjTenderElemRec."Project No." := ProjRec."No.";
            ProjTenderElemRec.VALIDATE("Tender Paragraph", EstElemRec."Element No.");
            ProjTenderElemRec.INSERT(TRUE);
            ProjTenderElemRec.Description := COPYSTR(EstElemRec.Text, 1, MAXSTRLEN(ProjTenderElemRec.Description));
            ProjTenderElemRec."Unit of Measure Code" := '';
            ProjTenderElemRec.Quantity := 1;
            ProjTenderElemRec.MODIFY(TRUE);
          END;
        UNTIL EstElemRec.NEXT = 0;
      END;


      EstElemRec.RESET;
      EstElemRec.SETRANGE("Estimate No.", EstFrom);
      EstElemRec.SETRANGE(Title, FALSE);
      IF EstElemRec.FINDFIRST THEN BEGIN
        REPEAT
          IF NOT ProjectTenderElementText.GET(ProjRec."No.", EstElemRec."Element No.", EstElemRec."Line No.") THEN BEGIN
            ProjectTenderElementText."Project No." := ProjRec."No.";
            ProjectTenderElementText."Tender Paragraph" := EstElemRec."Element No.";
            ProjectTenderElementText."Text Line No." := EstElemRec."Line No.";
            ProjectTenderElementText.Text := EstElemRec.Text;
            ProjectTenderElementText.INSERT;
          END;
        UNTIL EstElemRec.NEXT = 0;
      END;
      //ISS.en

      IF EstRec."Customer No." = '' THEN
        EXIT;

      IF ProjRec."Bill-to Customer No." <> EstRec."Customer No." THEN BEGIN
        IF NOT ProjCustRec.GET(ProjRec."No.",EstRec."Customer No.") THEN BEGIN
          ProjCustRec.INIT;
          ProjCustRec."Project No." := ProjRec."No.";
          ProjCustRec.VALIDATE(Principal, EstRec."Customer No.");
          ProjCustRec.INSERT(TRUE);
        END;
      END;

      //ISS.sn
      EstElemRec.RESET;
      EstElemRec.SETRANGE("Estimate No.", EstFrom);
      EstElemRec.SETFILTER("Element No.", '<>%1', '919990');  // jhoek.140910
      EstElemRec.SETRANGE(Title, TRUE);
      EstElemRec.SETFILTER(Type, '..%1', EstElemRec.Type::"Commitment (Main Line)");
      //ISS.en

      IF EstElemRec.FINDSET THEN BEGIN
        ProjCustRec.GET(ProjRec."No.",EstRec."Customer No.");
        IF ProjCustRec."Installm.Motivation Method" <> ProjCustRec."Installm.Motivation Method"::"Element Quantity" THEN  BEGIN
          ProjCustRec."Installm.Motivation Method" := ProjCustRec."Installm.Motivation Method"::"Element Quantity";
          ProjCustRec.MODIFY;
        END;

        //Fill provisionally Contract Amount
        DummyAmount := FALSE;
        IF ProjCustRec."Contract Amount (LCY)" = 0 THEN BEGIN
          DummyAmount := TRUE;
          ProjCustRec."Contract Amount (LCY)" := 10000;
          ProjCustRec.MODIFY;
        END;

        REPEAT
           TenderElementRec.INIT;
           TenderElementRec.VALIDATE("Project No.", ProjRec."No.");
           TenderElementRec.VALIDATE(Principal, EstRec."Customer No.");
           TenderElementRec."Contract No."  := '';
           TenderElementRec.FillDefaultSettleExcess();  //C-026862.n
           TenderElementRec."Tender Paragraph OLD" := '';
           TenderElementRec.VALIDATE("No.", EstElemRec."Element No.");
           IF TenderElementRec.INSERT(TRUE) THEN;
           //ISS.sn
           TenderElementRec.Description := EstElemRec.Text;
           IF EstElemRec.Type = EstElemRec.Type::"Commitment (Main Line)" THEN BEGIN
             IF UnitRec.GET(EstElemRec."Internal Unit of Measure Code") THEN
               TenderElementRec."Unit of Measure" := EstElemRec."Internal Unit of Measure Code"
             ELSE
               IF UnitRec.GET(EstElemRec."External Unit of Measure Code") THEN
                 TenderElementRec."Unit of Measure" := EstElemRec."External Unit of Measure Code";
             TenderElementRec."Unit Price (LCY)" := EstElemRec."Actual Unit Price";
             TenderElementRec.VALIDATE(Quantity, EstElemRec."Actual Quantity"); //mg.c, 21-03-12: M34193
             CASE EstElemRec."Quantity Type" OF
               EstElemRec."Quantity Type"::V:
                 TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::Settling);
               EstElemRec."Quantity Type"::N:
                 TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::"Non Settling");
               EstElemRec."Quantity Type"::M:
                 TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::Reduction);
               EstElemRec."Quantity Type"::O:
                 TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::Open);
               EstElemRec."Quantity Type"::A:
                 TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::Approved);
               ELSE
                 TenderElementRec.VALIDATE("Settlement Type", TenderElementRec."Settlement Type"::" ");
             END;
           END;
           //ISS.en
           TenderElementRec.MODIFY;

           //db.sn, 04-11-13: C009736
           IF ProjTenderElemRec.GET(ProjRec."No.", EstElemRec."Element No.") THEN BEGIN
             ProjTenderElemRec.Quantity := TenderElementRec.Quantity;
             ProjTenderElemRec."Unit of Measure Code" := TenderElementRec."Unit of Measure";
             ProjTenderElemRec.MODIFY;
           END;
           //db.en, 04-11-13: C009736

           //ISS.sn
           IF EstElemRec.Type = EstElemRec.Type::"Commitment (Main Line)" THEN BEGIN
             ElemVatSpecRec.RESET;
             ElemVatSpecRec.SETFILTER("Project No.", TenderElementRec."Project No.");
             ElemVatSpecRec.SETFILTER(Principal, TenderElementRec.Principal);
             ElemVatSpecRec.SETFILTER("Contract No.", TenderElementRec."Contract No.");
             ElemVatSpecRec.SETFILTER("Tender Paragraph", TenderElementRec."No.");
             ElemVatSpecRec.DELETEALL;

             TmpVatSpecRec.DELETEALL;

             EstVatSpecRec.SETRANGE("Estimate No.", EstElemRec."Estimate No.");
             EstVatSpecRec.SETRANGE("Element No.", EstElemRec."Element No.");
             IF EstVatSpecRec.FINDSET THEN BEGIN
               REPEAT
                 EstVatSpecRec.CALCFIELDS("VAT Base Amount");
                 ElemVatSpecRec.INIT;
                 ElemVatSpecRec."Project No." := TenderElementRec."Project No.";
                 ElemVatSpecRec.Principal := TenderElementRec.Principal;
                 ElemVatSpecRec."Contract No."  := TenderElementRec."Contract No.";
                 ElemVatSpecRec."Tender Paragraph" := TenderElementRec."No.";
                 ElemVatSpecRec."VAT Prod. Posting Group" := EstVatSpecRec."VAT Prod. Posting Group";
                 ElemVatSpecRec.Amount := EstVatSpecRec."VAT Base Amount";  //db, 15-11-10: M23353
                 ElemVatSpecRec.INSERT;
                 TmpVatSpecRec := ElemVatSpecRec;
                 TmpVatSpecRec.Amount := EstVatSpecRec."VAT Base Amount";
                 TmpVatSpecRec.INSERT;
               UNTIL EstVatSpecRec.NEXT = 0;
             END;

             EstElemRec2.COPY(EstElemRec);
             EstElemRec2.SETRANGE("Element No.",
               COPYSTR(EstElemRec."Element No.", 1, 5) + '1',
               COPYSTR(EstElemRec."Element No.", 1, 5) + '9');
             EstElemRec2.SETRANGE(Type, EstElemRec2.Type::"Commitment Description (Main Line)");
             IF EstElemRec2.FINDSET THEN BEGIN
               REPEAT
                 EstVatSpecRec2.SETRANGE("Estimate No.", EstElemRec2."Estimate No.");
                 EstVatSpecRec2.SETRANGE("Element No.", EstElemRec2."Element No.");
                 IF EstVatSpecRec2.FINDSET THEN BEGIN
                   REPEAT
                     EstVatSpecRec2.CALCFIELDS("VAT Base Amount");
                     IF NOT ElemVatSpecRec2.GET(TenderElementRec."Project No.", TenderElementRec.Principal,
                       TenderElementRec."Contract No.", TenderElementRec."No.",
                       EstVatSpecRec2."VAT Prod. Posting Group") THEN
                     BEGIN
                       ElemVatSpecRec2.INIT;
                       ElemVatSpecRec2."Project No." := TenderElementRec."Project No.";
                       ElemVatSpecRec2.Principal := TenderElementRec.Principal;
                       ElemVatSpecRec2."Contract No."  := TenderElementRec."Contract No.";
                       ElemVatSpecRec2."Tender Paragraph" := TenderElementRec."No.";
                       ElemVatSpecRec2."VAT Prod. Posting Group" := EstVatSpecRec2."VAT Prod. Posting Group";
                       ElemVatSpecRec2.INSERT;
                       TmpVatSpecRec := ElemVatSpecRec2;
                       TmpVatSpecRec.INSERT;
                     END;
                     IF TmpVatSpecRec.GET(TenderElementRec."Project No.", TenderElementRec.Principal,
                        TenderElementRec."Contract No.", TenderElementRec."No.",
                        EstVatSpecRec2."VAT Prod. Posting Group") THEN
                     BEGIN
                       TmpVatSpecRec.Amount := TmpVatSpecRec.Amount + EstVatSpecRec2."VAT Base Amount";
                       TmpVatSpecRec.MODIFY;
                     END;
                     ElemVatSpecRec2.Amount := TmpVatSpecRec.Amount;  //db, 15-11-10: M23353
                     ElemVatSpecRec2.MODIFY;
                   UNTIL EstVatSpecRec2.NEXT = 0;
                 END;
               UNTIL EstElemRec2.NEXT = 0;
             END;
             //call T000311
             ElemVatSpecRec.RESET;
             ElemVatSpecRec.SETRANGE("Project No.", TenderElementRec."Project No.");
             ElemVatSpecRec.SETRANGE(Principal, TenderElementRec.Principal);
             ElemVatSpecRec.SETRANGE("Contract No.", TenderElementRec."Contract No.");
             ElemVatSpecRec.SETRANGE("Tender Paragraph", TenderElementRec."No.");
             IF ElemVatSpecRec.COUNT = 1 THEN BEGIN
               ElemVatSpecRec.FINDFIRST;
               ElemVatSpecRec.CALCFIELDS("Total Amount");
               IF ElemVatSpecRec.Amount <> ElemVatSpecRec."Total Amount" THEN BEGIN
                 ElemVatSpecRec.Amount := ElemVatSpecRec."Total Amount";
                 ElemVatSpecRec.MODIFY;
               END;
             END;
           END;
           //ISS.en
        UNTIL EstElemRec.NEXT = 0;

        //Clear provisionally Contract Amount again
        IF DummyAmount THEN BEGIN
          ProjCustRec."Contract Amount (LCY)" := 0;
          ProjCustRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE CheckPurchaseAction@1100485005();
    VAR
      lvProjPurchActRec@1100485000 : Record 11012026;
      lvEstPurchActRec@1100485001 : Record 11012366;
      lvVendorsPurchActRec@1100485002 : Record 11012068;
      lvVendorsPurchActRec2@1100485003 : Record 11012068;
      lvPurchaseTextRec@1100485004 : Record 11012067;
      lvPurchaseTextRec2@1100485005 : Record 11012067;
      lvPurchActFeatureRec@1100485006 : Record 11012069;
      lvPurchActFeatureRec2@1100485007 : Record 11012069;
    BEGIN
      IF NOT lvProjPurchActRec.GET(ProjBudgetRec."Project No.", ProjBudgetRec."Purchase Action") THEN BEGIN
        IF lvEstPurchActRec.GET(ProjBudgetRec."Estimate No.", ProjBudgetRec."Purchase Action") THEN BEGIN
          lvProjPurchActRec.TRANSFERFIELDS(lvEstPurchActRec);
          lvProjPurchActRec."Project No." := ProjBudgetRec."Project No.";
          lvProjPurchActRec.Code := lvEstPurchActRec.Code;
          lvProjPurchActRec.INSERT;

          lvVendorsPurchActRec.SETRANGE(Source, lvVendorsPurchActRec.Source::Estimate);
          lvVendorsPurchActRec.SETRANGE("Estimate No.", ProjBudgetRec."Estimate No.");
          lvVendorsPurchActRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
          IF lvVendorsPurchActRec.FINDSET THEN BEGIN
            REPEAT
              lvVendorsPurchActRec2 := lvVendorsPurchActRec;
              lvVendorsPurchActRec2.Source := lvVendorsPurchActRec2.Source::Project;
              lvVendorsPurchActRec2."Estimate No." := '';
              lvVendorsPurchActRec2."Project No." := ProjBudgetRec."Project No.";
              lvVendorsPurchActRec2.INSERT;
            UNTIL lvVendorsPurchActRec.NEXT = 0;
          END;

          lvPurchaseTextRec.SETRANGE("Line Type", lvPurchaseTextRec."Line Type"::"Estimate Purchase Action");
          lvPurchaseTextRec.SETRANGE("No.", ProjBudgetRec."Estimate No.");
          lvPurchaseTextRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
          IF lvPurchaseTextRec.FINDSET THEN BEGIN
            REPEAT
              lvPurchaseTextRec2 := lvPurchaseTextRec;
              lvPurchaseTextRec2."Line Type" := lvPurchaseTextRec2."Line Type"::"Project Purchase Action";
              lvPurchaseTextRec2."No." := ProjBudgetRec."Project No.";
              lvPurchaseTextRec2.INSERT;
            UNTIL lvPurchaseTextRec.NEXT = 0;
          END;

          lvPurchActFeatureRec.SETRANGE(Source, lvPurchActFeatureRec.Source::Estimate);
          lvPurchActFeatureRec.SETRANGE("Estimate No.", ProjBudgetRec."Estimate No.");
          lvPurchActFeatureRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
          IF lvPurchActFeatureRec.FINDSET THEN BEGIN
            REPEAT
              lvPurchActFeatureRec2 := lvPurchActFeatureRec;
              lvPurchActFeatureRec2.Source := lvPurchActFeatureRec2.Source::Project;
              lvPurchActFeatureRec2."Estimate No." := '';
              lvPurchActFeatureRec2."Project No." := ProjBudgetRec."Project No.";
              lvPurchActFeatureRec2.INSERT;
            UNTIL lvPurchActFeatureRec.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE GetCostComponent@1100485004(lvCostComponent@1100485004 : Code[20];lvCostObject@1100485000 : Code[20];lvProject@1100485001 : Code[20];lvServOrder@1100525000 : Code[20];lvAdditionalCost@1100525002 : Boolean) : Code[20];
    VAR
      lvCostCompRec@1100525001 : Record 11012012;
      lvDimValRec@1100485002 : Record 349;
      lvDimMgt@1100485003 : Codeunit 408;
    BEGIN
      IF lvServOrder <> '' THEN BEGIN
        lvDimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, FALSE, lvProject);  //db, 02-02-10
        lvCostCompRec.CheckDefaultCostComponent(lvServOrder, lvCostComponent, '', lvDimValRec."Cost Type", lvAdditionalCost);
      END;

      IF lvCostComponent <> '' THEN
        EXIT(lvCostComponent);

      IF lvCostObject <> '' THEN BEGIN
        lvDimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, lvProject);
        IF NOT lvDimValRec.Blocked THEN
          EXIT(lvDimValRec."Cost Component");
      END;

      EXIT('');
    END;

    PROCEDURE GetCode@1100525000(lvField@1100525010 : Integer;lvEst@1100525000 : Code[20];lvSubEst@1100525001 : Code[20];lvPartGrp@1100525002 : Code[20];lvPart@1100525003 : Code[20];lvLine@1100525007 : Integer;lvCode@1100525008 : Code[20]) : Code[20];
    VAR
      EstLineRec@1100525009 : Record 11125680;
      EstRec@1100525006 : Record 11012151;
    BEGIN
      //not implemented for RAW
      EXIT('');
    END;

    PROCEDURE CreateServOrder@1100525002(VAR ServOrderRec@1100485000 : Record 11012823;lvSubEst@1100525002 : Code[20]);
    VAR
      ServContrRec@1100485003 : Record 11012812;
      ContrDepRec@1100525000 : Record 11012809;
    BEGIN
      WITH EstRec DO BEGIN
        ServOrderRec.INIT;
        ServOrderRec."No." := '';
        ServOrderRec."Source Type" := ServOrderRec."Source Type"::Estimate;
        IF CheckServSeries(1) THEN BEGIN
          IF SeriesServOrder = '' THEN BEGIN
            COMMIT;  //because of PAGE.RUNMODAL
            ServOrderRec.AssistEdit(ServOrderRec);
            IF ServOrderRec."No." = '' THEN EXIT;
          END;
        END;
        ServOrderRec.INSERT(TRUE);
        SeriesServOrder := ServOrderRec."No. Series";

        ServOrderRec.VALIDATE(Description, Description);
        ServOrderRec.VALIDATE("Customer No.", "Customer No.");
        //IF ServLocRec.GET("Service Location No.") THEN   //ISS
        //  ServOrderRec.VALIDATE("Service Location No.", "Service Location No.");
        IF ServContrRec.GET("Service Contract No.") THEN
          IF ServContrRec."Bill-to Customer No. (CP)" <> '' THEN  //dummy-contract without (bill-to) customer
            ServOrderRec.VALIDATE("Bill-to Customer No.", ServContrRec."Bill-to Customer No. (CP)");
        ServOrderRec.VALIDATE("Service Contract No.", "Service Contract No.");
        ServOrderRec.Address := Address;
        ServOrderRec.City := City;
        ServOrderRec."Post Code" := "Post Code";
        ServOrderRec."Territory Code":= "Territory Code";
        ServOrderRec."Starting Date" := "Starting Date";
        ServOrderRec."Ending Date" := "Ending Date";
        //ServOrderRec."Problem Text" := Text;  //ISS
        ServOrderRec."Estimate No." := "No.";
        ServOrderRec."Sub-Estimate No." := lvSubEst;
        ServOrderRec."Order No. Customer" := "Order No. Customer";
      //  ServOrderRec."Reference Date (Item)" := "Reference Date (Item)";
      //  ServOrderRec."Purch Discount Term Group 1" := "Purch Discount Term Group 1";
      //  ServOrderRec."Purch Discount Term Group 2" := "Purch Discount Term Group 2";
        IF gvSettlementMethod = gvSettlementMethod:: FixedPrice THEN
          ServOrderRec."Settlement Method" := ServOrderRec."Settlement Method"::"Fixed Price"
        ELSE
          ServOrderRec."Settlement Method" := ServOrderRec."Settlement Method"::"Cost Plus";
        ServOrderRec.Discipline := Discipline;  //db, 18-06-09: M15712
        IF ContrDepRec.GET("Service Contract No.", "Global Dimension 1 Code") THEN
          ServOrderRec.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
        ServOrderRec.MODIFY;

        TmpServOrderRec.INIT;
        TmpServOrderRec."No." := ServOrderRec."No.";
        TmpServOrderRec."Estimate No." := ServOrderRec."Estimate No.";
        TmpServOrderRec."Sub-Estimate No." := ServOrderRec."Sub-Estimate No.";
        IF TmpServOrderRec.INSERT THEN;  //db, 09-03-09: M14641

        IF gvCopyTryOut AND TryOutRec.READPERMISSION THEN
          TryOutRec.CopyRelation(1, 4, ServOrderRec."Estimate No.", ServOrderRec."No.");
      END;
    END;

    PROCEDURE CreateServAdvice@1100485016(VAR ServBudgetRec@1100485002 : Record 11012875);
    VAR
      ServAdviceRec@1100485001 : Record 11012055;
    BEGIN
      ServAdviceRec.INIT;
      ServAdviceRec."Record Type" := ServAdviceRec."Record Type"::ServOrder;
      ServAdviceRec.VALIDATE("Service Order No.", ServBudgetRec."Service Order No.");
      ServAdviceRec.VALIDATE("Line No.", 0);  //** 0=signal for table trigger to determine first free number
      ServAdviceRec.INSERT(TRUE);

      ServAdviceRec."Service Contract No." := ServBudgetRec."Service Contract No.";
      ServAdviceRec."Cost Object" := ServBudgetRec."Cost Object";
      ServAdviceRec."Cost Component" := ServBudgetRec."Cost Component";
      CASE ServBudgetRec."Cost Type" OF
        ServBudgetRec."Cost Type"::Material:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Material;
            ServAdviceRec.Vendor := ServBudgetRec.Vendor;
            ServAdviceRec."Item No." := ServBudgetRec."Item No.";
            ServAdviceRec.Manufacturer := ServBudgetRec.Manufacturer;
            ServAdviceRec."Basic Item" := ServBudgetRec."Basic Item";
            ServAdviceRec."Vendor (Trade Item)" := ServBudgetRec."Vendor (Trade Item)";
            ServAdviceRec."Trade Item" := ServBudgetRec."Trade Item";
            IF ServAdviceRec.Vendor = '' THEN
               ServAdviceRec.Vendor := ServAdviceRec.PreferredVendor;
          END;
        ServBudgetRec."Cost Type"::Subcontracting:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Subcontracting;
            ServAdviceRec.Vendor := ServBudgetRec.Vendor;
          END;
        ServBudgetRec."Cost Type"::Plant:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Plant;
          END;
      END;
      ServAdviceRec.Description := ServBudgetRec.Description;
      ServAdviceRec."Description 2" := ServBudgetRec."Description 2";
      ServAdviceRec."Quantity (Budget)" := ServBudgetRec.Quantity;
      ServAdviceRec."Quantity (Advice)" := ServBudgetRec.Quantity;
      ServAdviceRec."Unit of Measure" := ServBudgetRec."Unit of Measure";
      ServAdviceRec.Price := ServBudgetRec.Price;
      //ServAdviceRec.Transaction := ServAdviceRec.Transaction::Purchase;
      ServAdviceRec.Transaction := JobSetup."Default Advice Order Trans.";
      ServAdviceRec.Deliver := ServAdviceRec.Deliver::"Service Location";
      //ServAdviceRec."Shipment Date" := ServBudgetRec."Index Date";
      //ServAdviceRec."Order Date" := ServBudgetRec."Index Date";
      ServAdviceRec."Additional Cost (Service)" := ServBudgetRec."Additional Cost";
      ServAdviceRec.VALIDATE("External Text", ServBudgetRec."External Text");  //db, 09-12-13: 34383
      ServAdviceRec.CalculateTotal;
      ServAdviceRec.MODIFY;

      ServBudgetRec.Advised := TRUE;
      ServBudgetRec.MODIFY;
    END;

    PROCEDURE UpdateServBudgetFromEstimate@1100525006(CostType@1100525000 : Integer);
    VAR
      ServBudgetRec@1100525001 : Record 11012875;
    BEGIN
      ServBudgetRec.INIT;
      ServBudgetRec."Service Order No." := ServOrderRec."No.";
      ServBudgetRec."Line No." := BudgetLino + 10000;
      BudgetLino := ServBudgetRec."Line No.";
      ServBudgetRec.INSERT(TRUE);

      ServBudgetRec."Summary Line" := HelpRec."Summary Line";
      ServBudgetRec.Description := COPYSTR(HelpRec.Description, 1, 50);
      ServBudgetRec."Description 2" := COPYSTR(HelpRec.Description, 51, 50);
      ServBudgetRec."Unit of Time" := HelpRec."Unit of Time";
      ServBudgetRec."Time Quantity" := HelpRec."Time Quantity";
      ServBudgetRec.Quantity := HelpRec.Quantity;
      ServBudgetRec."Unit of Measure" := HelpRec."Unit of Measure";
      ServBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
      ServBudgetRec."Price Agreement" := HelpRec."Price Agreement";
      ServBudgetRec.Vendor := HelpRec.Vendor;
      ServBudgetRec.Discipline := HelpRec.Discipline;
      ServBudgetRec."Trade Speciality" := HelpRec."Trade Speciality";
      ServBudgetRec."Trade Expertise" := HelpRec."Trade Expertise";
      ServBudgetRec.Code := HelpRec.Code;
      ServBudgetRec."Object No." := HelpRec."Object No.";
      ServBudgetRec."Object Customer" := HelpRec."Object Customer";

      CASE CostType OF
        1:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Labor;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            ServBudgetRec.Norm := HelpRec.Norm;
            ServBudgetRec.Rate := HelpRec.Rate;
          END;
        2:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Material;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ServBudgetRec.Price := HelpRec."Material Price";
            ServBudgetRec."Gross Price" := HelpRec."Gross Price";
            ServBudgetRec."Discount %" := HelpRec."Discount %";
            ServBudgetRec."Item No." := HelpRec."Item No.";
            ServBudgetRec.Manufacturer := HelpRec.Manufacturer;
            ServBudgetRec."Basic Item" := HelpRec."Basic Item";
            ServBudgetRec."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
            ServBudgetRec."Trade Item" := HelpRec."Trade Item";
          END;
        3:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Subcontracting;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ServBudgetRec.Price := HelpRec."Subcontracting Price";
            ServBudgetRec.Vendor := HelpRec.Subcontractor;
          END;
        4:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Plant;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ServBudgetRec.Price := HelpRec."Plant Price";
          END;
        5:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Sundry;
            IF HelpRec."Cost Object Labor" <> '' THEN BEGIN
              ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Labor;
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            END;
            IF HelpRec."Cost Object Material" <> '' THEN BEGIN
              ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Material;
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            END;
            IF HelpRec."Cost Object Subcontracting" <> '' THEN BEGIN
              ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Subcontracting;
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
              ServBudgetRec.Vendor := HelpRec.Subcontractor;
            END;
            IF HelpRec."Cost Object Plant" <> '' THEN BEGIN
              ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Plant;
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            END;
          END;
      END;

      ServBudgetRec."Cost Component" :=
        GetCostComponent(HelpRec."Cost Component", ServBudgetRec."Cost Object", '', ServBudgetRec."Service Order No.",
          ServBudgetRec."Additional Cost");
      ServBudgetRec.VALIDATE("External Text", HelpRec."External Text");  //db, 09-12-13: 34383
      ServBudgetRec.CalcTotals;
      ServBudgetRec.MODIFY(TRUE); //12-07-09 TRUE Added (15022)

      IF ServBudgetRec."Cost Type" <> ServBudgetRec."Cost Type"::Labor THEN  //db, 08-04-14
        CreateServAdvice(ServBudgetRec);
    END;

    PROCEDURE UpdateServBudgetFromSummary@1100485001(lvServOrder@1100485002 : Code[20]);
    VAR
      ServBudgetRec@1100485001 : Record 11012875;
      lvBudgetLino@1100525000 : Integer;
    BEGIN
      HelpRec.SETRANGE("Summary Line", TRUE);
      HelpRec.SETRANGE("Contract Amount", TRUE);
      IF HelpRec.FINDSET THEN BEGIN
        REPEAT
          ServOrderRec.GET(lvServOrder);
          IF ServOrderRec."Settlement Method" = ServOrderRec."Settlement Method"::"Fixed Price" THEN
            ServOrderRec."Order Amount (LCY)" := HelpRec."Sundry Cost"
          ELSE
            ServOrderRec."Order Amount (LCY)" := 0;
          ServOrderRec.MODIFY;
        UNTIL HelpRec.NEXT = 0;
        HelpRec.DELETEALL;
      END;

      ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
      ServBudgetRec.SETRANGE("Service Order No.", lvServOrder);
      IF ServBudgetRec.FINDLAST THEN
        lvBudgetLino := ServBudgetRec."Line No."
      ELSE
        lvBudgetLino := 0;

      HelpRec.SETRANGE("Summary Line", TRUE);
      HelpRec.SETRANGE("Contract Amount", FALSE);
      IF HelpRec.FINDSET THEN BEGIN
        REPEAT
          ServBudgetRec.INIT;
          ServBudgetRec."Service Order No." := lvServOrder;
          ServBudgetRec."Line No." := lvBudgetLino + 10000;
          lvBudgetLino := ServBudgetRec."Line No.";
          ServBudgetRec.INSERT(TRUE);

          ServBudgetRec."Summary Line" := HelpRec."Summary Line";
          SplitDesc(HelpRec.Description, MAXSTRLEN(ServBudgetRec.Description));
          ServBudgetRec.Description := desc1;
          ServBudgetRec."Description 2" := desc2;
          ServBudgetRec."Unit of Measure" :=  HelpRec."Unit of Measure";
          ServBudgetRec.Quantity := HelpRec.Quantity;
          ServBudgetRec."Time Quantity" := HelpRec."Time Quantity";
          ServBudgetRec."Unit of Time" := HelpRec."Unit of Time";

          IF HelpRec."Cost Object Labor" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Labor;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            ServBudgetRec.Norm := HelpRec.Norm;
            ServBudgetRec.Rate := HelpRec.Rate;
          END;

          IF HelpRec."Cost Object Material" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Material;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ServBudgetRec.Price := HelpRec."Material Price";
          END;

          IF HelpRec."Cost Object Subcontracting" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Subcontracting;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ServBudgetRec.Price := HelpRec."Subcontracting Price";
          END;

          IF HelpRec."Cost Object Plant" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Plant;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ServBudgetRec.Price := HelpRec."Plant Price";
          END;

          IF HelpRec."Cost Object Sundry" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Sundry;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Sundry";
            ServBudgetRec.Price := HelpRec."Sundry Cost";
          END;

          IF HelpRec."Discount %" <> 0 THEN BEGIN
            ServBudgetRec."Discount %" := HelpRec."Discount %";
            ServBudgetRec."Gross Price" := HelpRec."Gross Price";
          END;

          ServBudgetRec."Wage Component" := HelpRec."Wage Component";
          ServBudgetRec."Cost Component" :=
            GetCostComponent(HelpRec."Cost Component", ServBudgetRec."Cost Object", '', ServBudgetRec."Service Order No.",
              ServBudgetRec."Additional Cost");

          ServBudgetRec."Price Agreement" := HelpRec."Price Agreement";
          IF ServBudgetRec."Cost Type" = ServBudgetRec."Cost Type"::Subcontracting THEN
            ServBudgetRec.Vendor := HelpRec.Subcontractor
          ELSE
            ServBudgetRec.Vendor := HelpRec.Vendor;
          IF (HelpRec."Purchase Route Reference" <> '') THEN BEGIN
            ServBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
            //RouteRefMgtCU.UpdateQuoteLinesFromBudget(ServBudgetRec);
          END;
          ServBudgetRec.CalcTotals;
          ServBudgetRec.MODIFY(TRUE); //12-07-09 TRUE Added (15022)
        UNTIL HelpRec.NEXT = 0;
        HelpRec.DELETEALL;
      END;
    END;

    PROCEDURE FillTmpServOrder@1100525001();
    BEGIN
      IF HelpRec."Service Order No." = '' THEN EXIT;

      IF NOT TmpServOrderRec.GET(HelpRec."Service Order No.") THEN BEGIN
        TmpServOrderRec.INIT;
        TmpServOrderRec."No." := HelpRec."Service Order No.";
        TmpServOrderRec."Estimate No." := HelpRec."Estimate No.";
        IF gvTransferStructure = TRUE THEN
          TmpServOrderRec."Sub-Estimate No." := HelpRec."Sub-Estimate No."
        ELSE
          TmpServOrderRec."Sub-Estimate No." := HelpRec.Code;
        TmpServOrderRec.INSERT;
      END;
    END;

    PROCEDURE RemoveServOrderLines@1100525003();
    VAR
      ServBudgetRec@1100525000 : Record 11012875;
      ServAdviceRec@1100525002 : Record 11012055;
    BEGIN
      WITH TmpServOrderRec DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
            ServBudgetRec.SETRANGE("Service Order No.", "No.");
            ServBudgetRec.DELETEALL(TRUE);

            ServAdviceRec.SETRANGE("Record Type", ServAdviceRec."Record Type"::ServOrder);
            ServAdviceRec.SETRANGE("Service Order No.", "No.");
            ServAdviceRec.DELETEALL(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateServOrderSummary@1100525008();
    VAR
      FirstServOrder@1100525004 : Code[20];
      LastServOrder@1100525003 : Code[20];
      InfoTxt@1100525002 : Text[50];
    BEGIN
      WITH TmpServOrderRec DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            IF FirstServOrder = '' THEN
              FirstServOrder := "No.";
            LastServOrder := "No.";

            UpdateSummary("Estimate No.", ServSheet, "Sub-Estimate No.");
            CollectFromSumLine("Estimate No.", "Estimate No.", ServSheet);
            UpdateServBudgetFromSummary("No.");
          UNTIL NEXT = 0;
          RemoveSummary("Estimate No.", ServSheet);

          IF FirstServOrder <> LastServOrder THEN
            InfoTxt := FirstServOrder + '..' + LastServOrder
          ELSE
            InfoTxt := FirstServOrder;
          IF InfoTxt <> '' THEN
            MESSAGE(Text014, TABLECAPTION, InfoTxt);
        END;
      END;
    END;

    PROCEDURE ConvertRateType@1100525004(lvEst@1100525000 : Code[20];lvRateCode@1100525001 : Code[20];VAR ioNorm@1100525002 : Decimal;VAR ioRateAmnt@1100525003 : Decimal);
    BEGIN
      IF NOT EstRateRec.GET(lvEst, lvRateCode) THEN
        EstRateRec.INIT;  //Rate Code not filled for additional cost (type labor) in summary
      IF EstRateRec."Rate Type" = EstRateRec."Rate Type"::Minuts THEN BEGIN
        ioNorm := ioNorm / 60;
        ioRateAmnt := ioRateAmnt * 60;
        IF EstRateRec."Team Size" <> 0 THEN BEGIN
          ioNorm := ioNorm * EstRateRec."Team Size";
          ioRateAmnt := ioRateAmnt / EstRateRec."Team Size";
        END;
      END;
    END;

    PROCEDURE CheckServSeries@1100525007(lvAct@1210190002 : Integer) : Boolean;
    VAR
      SerieRel@1210190000 : Record 310;
      ServSetup@1210190004 : Record 11012800;
    BEGIN
      ServSetup.GET;
      CASE lvAct OF
        0:
          BEGIN
            ServSetup.TESTFIELD("Service Location Nos.");
            SerieRel.SETRANGE(Code, ServSetup."Service Location Nos.");
          END;
        1:
          BEGIN
            ServSetup.TESTFIELD("Service Order 4 Nos.");
            SerieRel.SETRANGE(Code, ServSetup."Service Order 4 Nos.");
          END;
      END;

      EXIT(SerieRel.FINDFIRST);
    END;

    PROCEDURE CopySummary@1100525009(EstFrom@1100525000 : Code[20];SheetFrom@1100525001 : Code[20]);
    VAR
      SumRec@1100525005 : Record 11012172;
      CopyCu@1100485001 : Codeunit 11012151;
      EstTo@1100525002 : Code[20];
      SheetTo@1100525003 : Code[20];
      SheetToTxt@1100525004 : Text[50];
      lvText000@1100525006 : TextConst 'ENU=Transfer Estimate to Budget';
    BEGIN
      SumRec.GET(EstFrom, SheetFrom);
      EstTo := EstFrom;
      SheetTo := 'CU11012152';
      SheetToTxt := lvText000;
      IF NOT SumRec.GET(EstTo, SheetTo) THEN
        CopyCu.CopySummarySheet(EstFrom,'',SheetFrom,EstTo,SheetTo,SheetToTxt,0);

      ServSheet := SheetTo;
    END;

    PROCEDURE UpdateSummary@1100525011(EstFrom@1100525001 : Code[20];SheetFrom@1100525000 : Code[20];SumLineFilter@1100525003 : Text[250]);
    VAR
      SumRec@1100525004 : Record 11012172;
      SumLineRec@1100525002 : Record 11012171;
    BEGIN
      IF SumRec.GET(EstFrom, SheetFrom) THEN BEGIN
        SumRec."Modified by" := USERID;
        SumRec."Last Date Modified" := TODAY;
        SumRec."Last Time Modified" := TIME;
        SumRec.Fixed := FALSE;
        SumRec.MODIFY;

        SumLineRec.SETRANGE("Estimate No.", SumRec."Estimate No.");
        SumLineRec.SETRANGE(Summary, SumRec.Summary);
        SumLineRec.SETRANGE(Type, SumLineRec.Type::"Cost Type");
        IF SumLineRec.FINDSET THEN BEGIN
          REPEAT
            IF gvTransferStructure = TRUE THEN BEGIN
              SumLineRec."Code Filter" := '';
              SumLineRec.VALIDATE("Sub-Estimate Filter", SumLineFilter);
            END ELSE BEGIN
              SumLineRec."Sub-Estimate Filter" := '';
              IF SumLineFilter = '' THEN
                SumLineRec.VALIDATE("Code Filter", '''''')
              ELSE
                SumLineRec.VALIDATE("Code Filter", SumLineFilter);
            END;
            SumLineRec.MODIFY;
          UNTIL SumLineRec.NEXT = 0;
          SumLineRec.UpdateLogbook; //call 25809
        END;

        SumLineRec.UpdateSummarySheet(SumRec."Estimate No.", SumRec.Summary, FALSE); //call 25809
      END;
    END;

    PROCEDURE RemoveSummary@1100525012(EstFrom@1100525001 : Code[20];SheetFrom@1100525000 : Code[20]);
    VAR
      SumRec@1100525002 : Record 11012172;
    BEGIN
      IF SumRec.GET(EstFrom, SheetFrom) THEN  //db, 22-01-09
        SumRec.DELETE(TRUE);
    END;

    PROCEDURE CheckRelationSubEstServOrder@1100525014(EstFrom@1100525001 : Code[20]);
    VAR
      EstLineRec@1100525002 : Record 11125680;
      lvServOrder@1100525003 : Code[20];
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CheckBudgetSummary@1100525017(ProjTo@1100525002 : Code[20];ExtTo@1100525001 : Code[20];OptTo@1100525000 : Code[20]);
    VAR
      lvBudgetSumRec@1100525003 : Record 11012064;
    BEGIN
      //db, 13-08-09: M15776
      IF ProjTo = '' THEN
        lvBudgetSumRec.SETFILTER("Project No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Project No.", ProjTo);
      IF ExtTo = '' THEN
        lvBudgetSumRec.SETFILTER("Contract No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Contract No.", ExtTo);
      IF gPlotTo = '' THEN
        lvBudgetSumRec.SETFILTER("Plot No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Plot No.", gPlotTo);
      IF gHouseModelTo = '' THEN
        lvBudgetSumRec.SETFILTER("House Model", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("House Model", gHouseModelTo);
      IF gMainGroupTo = '' THEN
        lvBudgetSumRec.SETFILTER("Main Group", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Main Group", gMainGroupTo);
      IF gGroupTo = '' THEN
        lvBudgetSumRec.SETFILTER(Group, '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE(Group, gGroupTo);
      IF gSubGroupTo = '' THEN
        lvBudgetSumRec.SETFILTER("Sub Group", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Sub Group", gSubGroupTo);
      IF OptTo = '' THEN
        lvBudgetSumRec.SETFILTER(Option, '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE(Option, OptTo);
      IF lvBudgetSumRec.FINDFIRST THEN BEGIN
        lvBudgetSumRec.ReCalcOptionSummaryLines;
        lvBudgetSumRec.UpdateOptBudgetLines;
      END;
    END;

    BEGIN
    END.
  }
}

