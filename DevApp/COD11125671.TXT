OBJECT Codeunit 11125671 Update Estimate (RAW)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text010@1210190003 : TextConst 'ENU=Estimatepart  #1################# @2@@@@@@@@@@@@@';
      Text011@1210190002 : TextConst 'ENU=Busy with       #1################# @2@@@@@@@@@@@@@';
      Text012@1210190001 : TextConst 'ENU=Estimate Lines';
      Text013@1210190000 : TextConst 'ENU=Recipe Lines';
      EstSetup@1210190005 : Record 11012150;
      EstRec@1210190004 : Record 11012151;
      EstLineRec@1210190012 : Record 11125680;
      QuanSheetRec@1210190030 : Record 11012186;
      QuanModelRec@1210190037 : Record 11012197;
      NormRec@1210190014 : Record 11012163;
      RateRec@1210190018 : Record 11012162;
      DateRateRec@1100485005 : Record 11012188;
      DateRateRec2@1100485006 : Record 11012188;
      EstRateRec@1210190013 : Record 11012160;
      BudgetRateRec@1210190017 : Record 11012000;
      PurchLineRec@1210190019 : Record 39;
      PlantTypeRec@1100485004 : Record 11012551;
      Status@1210190010 : Dialog;
      maxrec@1210190009 : Integer;
      currec@1210190008 : Integer;
      TmpEstRec@1100485003 : TEMPORARY Record 11012151;
      TmpEstLineRec@1210190021 : TEMPORARY Record 11125680;
      Text014@1210190022 : TextConst 'ENU=Surcharge Lines';
      Text015@1210190034 : TextConst 'ENU=Quantity Sheet';
      Text016@1210190035 : TextConst 'ENU=Codes';
      TmpQuanSheetRec@1210190032 : TEMPORARY Record 11012186;
      TmpQuanModelRec@1210190038 : TEMPORARY Record 11012197;
      Text022@1210190028 : TextConst 'ENU=Condition: Estimate copied. Reshuffle Estimate Lines ?';
      Text023@1210190029 : TextConst 'ENU=Initialize Adjustment Factor,Calculate Cumulative Adjustment Factor';
      TmpRelationRec@1210190025 : TEMPORARY Record 11072075;
      DimMgt@1100485001 : Codeunit 408;
      DimValRec@1100485000 : Record 349;

    PROCEDURE DeleteZeroLines@1(VAR lvEstLineRec@1100485003 : Record 11125680;DeleteEmptyPart@1100485002 : Boolean;EmptyRecipe@1100485004 : 'ZeroHeader,ZeroLines';UseLock@1210190001 : Boolean);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);

      CheckLock(UseLock);
      Status.OPEN(Text010);

      EstLineRec.SETRANGE(Quantity, 0);
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          Status.UPDATE(1,EstLineRec."Element No.");  //ISS
          currec := currec + 1;
          IF (EstLineRec.Norm <> 0) OR (EstLineRec."Material Price" <> 0) OR
             (EstLineRec."Subcontracting Price" <> 0) OR (EstLineRec."Plant Price" <> 0) THEN BEGIN
            CheckEstFixed(EstLineRec."Estimate No.");
            EstLineRec.DELETE(TRUE);
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          END;
        UNTIL EstLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReshuffleLines@1210190008(CurrEst@1210190000 : Code[20];UseLock@1210190006 : Boolean);
    VAR
      NewEst@1210190004 : Code[20];
      NewEstLine@1210190001 : Integer;
      PrevElem@1210190003 : Text[100];
    BEGIN
      IF NOT CONFIRM(Text022, FALSE) THEN EXIT;

      CheckLock(UseLock);
      Status.OPEN(Text010);

      NewEst := 'CU11012155_RESHUFFLE';
      PrevElem := '~';  //ISS

      EstLineRec.RESET;
      EstLineRec.SETRANGE("Estimate No.", CurrEst);
      IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          IF PrevElem <> EstLineRec."Estimate No."  + EstLineRec."Element No." THEN BEGIN  //ISS
            PrevElem := EstLineRec."Estimate No." + EstLineRec."Element No.";  //ISS
            NewEstLine := 0;
          END;
          NewEstLine := NewEstLine + 10000;
          currec := currec + 1;
          Status.UPDATE(1,EstLineRec."Element No.");  //ISS
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));

          TmpEstLineRec := EstLineRec;
          TmpEstLineRec."Estimate No." := NewEst;
          TmpEstLineRec."Line No." := NewEstLine;
          TmpEstLineRec.INSERT;

          //ChrgBln := (EstLineRec."Surcharge Type" <> EstLineRec."Surcharge Type"::" ");
          //CheckCharge(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
          //  EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
          //  0, ChrgBln, NewEst, NewEstLine, EstLineRec.Description);  //ISS

          //CheckQuanSheet(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
          //  EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
          //  0, NewEst, NewEstLine);  //ISS

          //CheckQuanModel(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
          //  EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
          //  0, NewEst, NewEstLine);  //ISS

          //CheckCode(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
          //  EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
          //  0, NewEst, NewEstLine);  //ISS

          //CheckSpec(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
          //  EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.", '', '',
          //  0, NewEst, NewEstLine);  //ISS
        UNTIL EstLineRec.NEXT = 0;
        EstLineRec.DELETEALL(TRUE);
      END;

      Status.UPDATE(1,Text012);
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstLineRec.COUNT;
        REPEAT
          EstLineRec.COPY(TmpEstLineRec);
          EstLineRec."Estimate No." := CurrEst;
          EstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      Status.UPDATE(1,Text015);
      IF TmpQuanSheetRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanSheetRec.COUNT;
        REPEAT
          QuanSheetRec.COPY(TmpQuanSheetRec);
          QuanSheetRec."Estimate No." := CurrEst;
          QuanSheetRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanSheetRec.NEXT = 0;
      END;

      Status.UPDATE(1,QuanModelRec.TABLECAPTION);
      IF TmpQuanModelRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpQuanModelRec.COUNT;
        REPEAT
          QuanModelRec.COPY(TmpQuanModelRec);
          QuanModelRec."Estimate No." := CurrEst;
          QuanModelRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpQuanModelRec.NEXT = 0;
      END;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ResetAdjustmentFactor@1210190006(CurrEst@1210190000 : Code[20];CurrSubEst@1210190006 : Code[20];CurrPartGrp@1210190008 : Code[20];CurrPart@1210190007 : Code[20];CurrLino@1210190009 : Integer;UseLock@1210190001 : Boolean;UpdateLevel@1210190002 : Integer;IAdjType@1210190011 : Integer);
    BEGIN
      MESSAGE('Functie niet uitgewerkt voor RAW-calculatie');  //ISS
    END;

    PROCEDURE ReplaceRecipe@1210190011(CurrEst@1210190009 : Code[20];CurrSubEst@1210190008 : Code[20];GrpCode@1210190007 : Code[20];RcpCode@1210190005 : Code[20];ActEstRcp@1100485001 : ' ,Update,Replace');
    BEGIN
      MESSAGE('Functie niet uitgewerkt voor RAW-calculatie');  //ISS
    END;

    PROCEDURE ReplaceRateCode@1210190000(VAR lvEstLineRec@1100485000 : Record 11125680;OldRateCode@1210190008 : Code[20];NewRateCode@1210190007 : Code[20];UseLock@1210190000 : Boolean);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldRateCode <> '' THEN
        EstLineRec.SETFILTER("Rate Code", OldRateCode)
      ELSE
        EstLineRec.SETFILTER("Rate Code", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec.VALIDATE("Rate Code", NewRateCode);
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Rate Code");
      UpdateFromTmp;

      IF EstLineRec.GETFILTER("Estimate No.") <> '' THEN
        EstRec.SETFILTER("No.", EstLineRec.GETFILTER("Estimate No."));
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF (EstRec."Rate Code" = OldRateCode) OR (OldRateCode = '') THEN BEGIN
            EstRec."Rate Code" := NewRateCode;
            EstRec.MODIFY;
          END;
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceRateGroup@1210190004(CurrEst@1210190006 : Code[20];OldGroupCode@1210190007 : Code[20];NewGroupCode@1210190001 : Code[20];UseLock@1210190000 : Boolean);
    VAR
      lvEstLineRec@1100485000 : Record 11125680;
    BEGIN
      CheckLock(UseLock);

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      EstSetup.GET;
      IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group" THEN BEGIN
        RateRec.SETRANGE("Rate Group", NewGroupCode);
        IF RateRec.FINDSET THEN BEGIN
          REPEAT
            IF EstRateRec.GET(CurrEst, RateRec."Rate Code") THEN BEGIN
              EstRateRec.Description := RateRec.Description;
              EstRateRec."Cost Rate" := RateRec."Cost Rate";
              EstRateRec."Rate Type" := RateRec."Rate Type";
              EstRateRec."Team Size" := RateRec."Team Size";
              EstRateRec.MODIFY;
            END ELSE BEGIN
              EstRateRec."Estimate No." := CurrEst;
              EstRateRec."Rate Code" := RateRec."Rate Code";
              EstRateRec.Description := RateRec.Description;
              EstRateRec."Cost Rate" := RateRec."Cost Rate";
              EstRateRec."Rate Type" := RateRec."Rate Type";
              EstRateRec."Team Size" := RateRec."Team Size";
              EstRateRec.INSERT;
            END;
          UNTIL RateRec.NEXT = 0;
        END;
        //db.sn, 06-03-08
        DateRateRec.RESET;
        DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Estimate);
        DateRateRec.SETRANGE("Estimate No.", CurrEst);
        DateRateRec.DELETEALL;

        DateRateRec.RESET;
        DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Standard);
        DateRateRec.SETRANGE("Rate Group", NewGroupCode);
        IF DateRateRec.FIND('-') THEN BEGIN
          REPEAT
            DateRateRec2.COPY(DateRateRec);
            DateRateRec2."Record Type" := DateRateRec."Record Type"::Estimate;
            DateRateRec2."Estimate No." := CurrEst;
            DateRateRec2."Rate Group" := '';
            IF DateRateRec2.INSERT THEN;
          UNTIL DateRateRec.NEXT = 0;
        END;
        //db.en, 06-03-08
      END ELSE BEGIN
        BudgetRateRec.SETRANGE("Starting Date",0D,TODAY);
        BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
        IF BudgetRateRec.FINDSET THEN BEGIN
          REPEAT
            IF EstRateRec.GET(CurrEst, BudgetRateRec.Code) THEN BEGIN
              EstRateRec.Description := BudgetRateRec.Description;
              EstRateRec."Cost Rate" := BudgetRateRec.Rate;
              EstRateRec."Rate Type" := EstRateRec."Rate Type"::Hours;
              EstRateRec.MODIFY;
            END ELSE BEGIN
              EstRateRec."Estimate No." := CurrEst;
              EstRateRec."Rate Code" := BudgetRateRec.Code;
              EstRateRec.Description := BudgetRateRec.Description;
              EstRateRec."Cost Rate" := BudgetRateRec.Rate;
              EstRateRec."Rate Type" := RateRec."Rate Type"::Hours;
              EstRateRec.INSERT;
            END;
          UNTIL BudgetRateRec.NEXT = 0;
        END;
      END;

      IF CurrEst <> '' THEN
        EstRateRec.SETFILTER("Estimate No.", CurrEst);
      IF EstRateRec.FINDSET THEN BEGIN
        REPEAT
          IF CurrEst <> '' THEN
            lvEstLineRec.SETFILTER("Estimate No.", CurrEst);
          ReplaceRateCode(lvEstLineRec, EstRateRec."Rate Code", EstRateRec."Rate Code", UseLock);
        UNTIL EstRateRec.NEXT = 0;
      END;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          EstRec."Rate Group" := NewGroupCode;
          EstRec.MODIFY;
        UNTIL EstRec.NEXT = 0;
      END;
    END;

    PROCEDURE ReplaceNormGroup@1210190001(VAR lvEstLineRec@1100485000 : Record 11125680;OldGroupCode@1210190007 : Code[20];NewGroupCode@1210190005 : Code[20];UseLock@1210190000 : Boolean);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF OldGroupCode <> '' THEN
        EstLineRec.SETFILTER("Norm Group", OldGroupCode)
      ELSE
        EstLineRec.SETFILTER("Norm Group", '<>%1', '');
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          EstLineRec."Norm Group" := NewGroupCode;
          IF NormRec.GET(EstLineRec."Sub Operation Code", EstLineRec."Norm Group") THEN BEGIN
            EstLineRec.Norm := NormRec.Norm;
            EstLineRec.ConvertNorm(FALSE,FALSE);  //db, 19-08-04: incl. check on rate type and team size
          END;
          EstLineRec.CalculateTotals;
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      WITH EstLineRec DO BEGIN
        IF GETFILTER("Estimate No.") <> '' THEN
          EstRec.SETFILTER("No.", GETFILTER("Estimate No."));
        IF OldGroupCode <> '' THEN
          EstRec.SETFILTER("Norm Group", OldGroupCode)
        ELSE
          EstRec.SETFILTER("Norm Group", '<>%1', '');
        EstRec.MODIFYALL("Norm Group", NewGroupCode);
      END;

      TmpEstLineRec.SETRANGE("Norm Group");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE ReplaceItem@4(VAR ConvRec@1100525006 : Record 11012322;VAR lvEstLineRec@1100525000 : Record 11125680;ActEst@1100525011 : Boolean;ActRcp@1100525012 : Boolean;SetRcpFilter@1100525013 : Boolean;ActPrice@1100525008 : Boolean;UseLock@1100525009 : Boolean);
    VAR
      DimValRec@1100525005 : Record 349;
      DimMgt@1100525004 : Codeunit 408;
      ItemTypeOpt@1100525007 : 'Item,Basic Item,Trade Item';
      Status@1100525003 : Dialog;
      maxrec@1100525002 : Integer;
      currec@1100525001 : Integer;
      EstRec@1100525014 : Record 11012151;
      StdEstRec@1100525016 : Record 11012151;
    BEGIN
      //db, 07-10-08: M11811
      //- form 11012350: Replace Items
      //- report 11012166: Replace Estimate Data

      EstLineRec.COPY(lvEstLineRec);
      //IF SetRcpFilter THEN
      //  CheckEstFilters(EstLineRec, RcpLineRec)
      //ELSE
      //  RcpLineRec.COPY(lvRcpLineRec);   //ISS

      CheckLock(UseLock);

      Status.OPEN(Text011);

      ConvRec.MARKEDONLY(TRUE);
      IF NOT ConvRec.FINDFIRST THEN BEGIN
        ConvRec.MARKEDONLY(FALSE);
        ConvRec.SETRANGE(Select, TRUE);
      END;
      IF ConvRec.FINDSET THEN BEGIN
        REPEAT
          ConvRec.VALIDATE(Select);

          IF ActEst = TRUE THEN BEGIN
            Status.UPDATE(1,Text012);
            //EstLineRec.SETRANGE(Recipe, '');  //ISS
            IF ConvRec."Trade Item (Old)" <> '' THEN BEGIN
              EstLineRec.SETRANGE("Trade Item", ConvRec."Trade Item (Old)");
              EstLineRec.SETRANGE("Vendor (Trade Item)", ConvRec."Vendor (Old)");
            END ELSE BEGIN
              IF ConvRec."Basic Item (Old)" <> '' THEN BEGIN
                EstLineRec.SETRANGE("Basic Item", ConvRec."Basic Item (Old)");
                EstLineRec.SETRANGE(Manufacturer, ConvRec."Manufacturer (Old)");
              END ELSE BEGIN
                IF ConvRec."Item No. (Old)" <> '' THEN BEGIN
                  EstLineRec.SETRANGE("Item No.", ConvRec."Item No. (Old)");
                END ELSE BEGIN
                  IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                    EstLineRec.SETFILTER("Trade Item", '%1', '');
                    EstLineRec.SETFILTER("Vendor (Trade Item)", '%1', '');
                    EstLineRec.SETFILTER("Basic Item", '%1', '');
                    EstLineRec.SETFILTER(Manufacturer, '%1', '');
                    EstLineRec.SETFILTER("Item No.", '%1', '');
                    DimMgt.GetDimValueRec(2, ConvRec."Cost Object (Old)", DimValRec, TRUE, '');
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                      EstLineRec.SETRANGE("Cost Object Labor", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
                      EstLineRec.SETRANGE("Cost Object Material", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
                      EstLineRec.SETRANGE("Cost Object Subcontracting", ConvRec."Cost Object (Old)");
                    IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
                      EstLineRec.SETRANGE("Cost Object Plant", ConvRec."Cost Object (Old)");
                  END;
                END;
              END;
            END;
            IF EstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
              currec := 0;
              maxrec := EstLineRec.COUNT;
              REPEAT
                CheckEstFixed(EstLineRec."Estimate No.");
                IF ConvRec."Cost Object (Old)" <> '' THEN BEGIN
                  DimMgt.GetDimValueRec(2, ConvRec."Cost Object (New)", DimValRec, TRUE, '');
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN
                    EstLineRec."Cost Object Labor" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
                    EstLineRec."Cost Object Material" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
                    EstLineRec."Cost Object Subcontracting" := ConvRec."Cost Object (New)";
                  IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
                    EstLineRec."Cost Object Plant" := ConvRec."Cost Object (New)";
                END ELSE BEGIN
                  EstLineRec."Item No." := ConvRec."Item No. (New)";
                  EstLineRec."Basic Item" := ConvRec."Basic Item (New)";
                  EstLineRec."Trade Item" := ConvRec."Trade Item (New)";
                  EstLineRec.Manufacturer := ConvRec."Manufacturer (New)";
                  EstLineRec."Vendor (Trade Item)" := ConvRec."Vendor (New)";
                END;
                //ISS: EstRec->EstRec(RAW); not changed because cu11012033 remains standard provisionally (local variable !)
                IF ActPrice = TRUE THEN BEGIN
                  IF ConvRec."Trade Item (New)" <> '' THEN
                    EstLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE)
                  ELSE
                    IF ConvRec."Basic Item (New)" <> '' THEN
                      EstLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE)
                    ELSE
                      IF ConvRec."Item No. (New)" <> '' THEN
                        EstLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, TRUE)
                      ELSE
                        IF ConvRec."Cost Object (New)" <> '' THEN
                          EstLineRec.CheckCostObject(ConvRec."Cost Object (New)",FALSE);
                END;
                EstLineRec.CalculateTotals;
                EstLineRec.MODIFY;
                currec := currec + 1;
                Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
              UNTIL EstLineRec.NEXT = 0;
            END;
          END;
        UNTIL ConvRec.NEXT = 0;
      END;

      Status.CLOSE;
    END;

    PROCEDURE UpdateQuotePrice@1100485007(VAR lvEstLineRec@1100485000 : Record 11125680;QuoteFilter@1100485002 : Text[250];UseLock@1100485005 : Boolean);
    VAR
      PurchLineRec@1100485001 : Record 39;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1, PurchLineRec.TABLECAPTION);

      PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
      IF QuoteFilter <> '' THEN
        PurchLineRec.SETFILTER("Document No.", QuoteFilter);
      IF EstLineRec.GETFILTER("Estimate No.") <> '' THEN
        PurchLineRec.SETFILTER("Estimate No.", EstLineRec.GETFILTER("Estimate No."))
      ELSE
        PurchLineRec.SETFILTER("Estimate No.", '<>%1', '');  //db, 04-09-07
      PurchLineRec.SETFILTER("Purchase Route Reference", '<>%1', '');
      PurchLineRec.SETRANGE("Quote Selected", TRUE);
      IF PurchLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := PurchLineRec.COUNT;
        REPEAT
          EstLineRec.SETFILTER("Purchase Route Reference", PurchLineRec."Purchase Route Reference");
          IF EstLineRec.FINDSET THEN BEGIN
            REPEAT
              CheckEstFixed(EstLineRec."Estimate No.");

              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Material THEN BEGIN
                EstLineRec."Price Agreement" := TRUE;
                EstLineRec."Material Price" := PurchLineRec."Direct Unit Cost";
                EstLineRec."Gross Price" := PurchLineRec."Direct Unit Cost";
                EstLineRec."Discount %" := 0;
                EstLineRec.Vendor := PurchLineRec."Buy-from Vendor No.";
              END;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Subcontracting THEN BEGIN
                EstLineRec."Subcontracting Price" := PurchLineRec."Direct Unit Cost";
                EstLineRec.Subcontractor := PurchLineRec."Buy-from Vendor No.";
              END;
              IF PurchLineRec."Cost Type" = PurchLineRec."Cost Type"::Plant THEN
                EstLineRec."Plant Price" := PurchLineRec."Direct Unit Cost";
              EstLineRec.CalculateDiscount;
              EstLineRec.CalculateTotals;
              TmpEstLineRec.COPY(EstLineRec);
              TmpEstLineRec.INSERT;
            UNTIL EstLineRec.NEXT = 0;
          END;

          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL PurchLineRec.NEXT = 0;
      END;

      TmpEstLineRec.SETRANGE("Purchase Route Reference");

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateActualPrice@1210190002(VAR lvEstLineRec@1100485001 : Record 11125680;ActNorm@1210190013 : Boolean;ActPrice@1210190012 : Boolean;ActPlantPrice@1100485002 : Boolean;ActCostObject@1210190011 : Boolean;ActDesc@1210190010 : Boolean;ActSubOper@1210190021 : Boolean;PriceMethod@1210190017 : 'Actualise GP+DP+NP,Actualise GP + Fix DP + Calculate NP,Fix GP + Actualise DP + Calculate NP,Fix GP + Calculate DP + Actualise NP,Calculate GP + Fix DP + Actualise NP';UseLock@1210190003 : Boolean);
    VAR
      ItemTypeOpt@1210190009 : 'Item,Basic Item,Trade Item';
      OldCostObjectItem@1210190015 : Code[20];
      OldCostObjectLabor@1210190002 : Code[20];
      OldCostComponent@1100485000 : Code[20];
      OldDesc@1210190014 : Text[100];
      OldGrossPrice@1210190018 : Decimal;
      OldDiscPerc@1210190019 : Decimal;
      UnitOld@1210190006 : Code[20];
      UnitNew@1210190005 : Code[20];
      SubOperNew@1210190022 : Code[20];
      OldEstLineRec@1210190008 : Record 11125680;
      NewEstLineRec@1210190007 : Record 11125680;
      EstRec@1100525000 : Record 11012151;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");

          OldCostObjectLabor := EstLineRec."Cost Object Labor";
          OldCostObjectItem := EstLineRec."Cost Object Material";
          OldDesc := EstLineRec.Description;
          OldCostComponent := EstLineRec."Cost Component";
          OldGrossPrice := EstLineRec."Gross Price";
          OldDiscPerc := EstLineRec."Discount %";
          IF ActNorm = TRUE THEN BEGIN
            IF ActSubOper = TRUE THEN
              SubOperNew := CheckSubOperation(EstLineRec.Manufacturer, EstLineRec."Vendor (Trade Item)",
                EstLineRec."Item No.", EstLineRec."Basic Item", EstLineRec."Trade Item");
            IF SubOperNew <> '' THEN
              EstLineRec.VALIDATE("Sub Operation Code", SubOperNew)
            ELSE
              EstLineRec.VALIDATE("Sub Operation Code");
            //includes function DetermineNorm (check costobject+description)
          END;
          //ISS: EstRec->EstRec(RAW); not changed because cu11012033 remains standard provisionally (local variable !)
          IF ActPrice = TRUE THEN BEGIN
            OldEstLineRec := EstLineRec;  //db.n: 01-07-04
            IF EstLineRec."Trade Item" <> '' THEN
              EstLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, FALSE)
            ELSE
              IF EstLineRec."Basic Item" <> '' THEN
                EstLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, FALSE)
              ELSE
                IF EstLineRec."Item No." <> '' THEN
                  EstLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, FALSE);

            //db.sn: 01-07-04
            NewEstLineRec := EstLineRec;
            IF NewEstLineRec."Unit of Measure" <> OldEstLineRec."Unit of Measure" THEN BEGIN
              UnitOld := OldEstLineRec."Unit of Measure";
              UnitNew := NewEstLineRec."Unit of Measure";
              NewEstLineRec."Unit of Measure" := UnitOld;
              OldEstLineRec."Unit of Measure" := UnitNew;
              EstLineRec.CheckItemUnitConversion(NewEstLineRec, OldEstLineRec);
              EstLineRec."Unit of Measure" := UnitOld;
              EstLineRec."Material Price":= NewEstLineRec."Material Price";
              EstLineRec."Gross Price":= NewEstLineRec."Gross Price";
            END;
            //db.en: 01-07-04
            IF PriceMethod = PriceMethod::"Actualise GP + Fix DP + Calculate NP" THEN BEGIN
              EstLineRec."Discount %" := OldDiscPerc;
              EstLineRec.CalculateNettPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Actualise DP + Calculate NP" THEN BEGIN
              EstLineRec."Gross Price" := OldGrossPrice;
              EstLineRec.CalculateNettPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Calculate DP + Actualise NP" THEN BEGIN
              EstLineRec."Gross Price" := OldGrossPrice;
              EstLineRec.CalculateDiscount;
            END;
            IF PriceMethod = PriceMethod::"Calculate GP + Fix DP + Actualise NP" THEN BEGIN
              EstLineRec."Discount %" := OldDiscPerc;
              EstLineRec.CalculateGrossPrice;
            END;
          END;
          IF ActPlantPrice = TRUE THEN
            EstLineRec.DeterminePlantPrice;

          IF (ActDesc) AND (EstLineRec."Plant Type" <> '') AND
             (PlantTypeRec.READPERMISSION ) THEN
          BEGIN
            PlantTypeRec.GET(EstLineRec."Plant Type");
            EstLineRec.Description := PlantTypeRec.Description;
          END;

          IF ActCostObject = FALSE THEN BEGIN
            EstLineRec."Cost Object Labor" := OldCostObjectLabor;
            EstLineRec."Cost Object Material" := OldCostObjectItem;
            EstLineRec."Cost Component" := OldCostComponent;
          END;
          IF ActDesc = FALSE THEN
            EstLineRec.Description := OldDesc;
          EstLineRec.CalculateTotals;
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdatePriceWithPercentage@1210190003(VAR lvEstLineRec@1100485000 : Record 11125680;PercNorm@1210190011 : Decimal;PercItem@1210190010 : Decimal;PercSubc@1210190009 : Decimal;PercEqmt@1210190008 : Decimal;UseLock@1210190002 : Boolean);
    BEGIN
      EstLineRec.COPY(lvEstLineRec);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          CheckEstFixed(EstLineRec."Estimate No.");
          IF PercNorm <> 0 THEN
            EstLineRec.Norm := ROUND(EstLineRec.Norm * (100+PercNorm)/100, 0.00001);
          IF PercItem <> 0 THEN BEGIN
            EstLineRec."Material Price" := ROUND(EstLineRec."Material Price" * (100+PercItem)/100, 0.00001);
            IF EstLineRec."Gross Price" <> 0 THEN
              EstLineRec."Discount %" :=
              ROUND(100 * (EstLineRec."Gross Price" - EstLineRec."Material Price")/
                          (EstLineRec."Gross Price"), 0.00001);
          END;
          IF PercSubc <> 0 THEN
            EstLineRec."Subcontracting Price" := ROUND(EstLineRec."Subcontracting Price" * (100+PercSubc)/100, 0.00001);
          IF PercEqmt <> 0 THEN
            EstLineRec."Plant Price" := ROUND(EstLineRec."Plant Price" * (100+PercEqmt)/100, 0.00001);
          EstLineRec.CalculateTotals;
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateCode@1210190016(CurrEst@1210190001 : Code[20];CurrSubEst@1210190000 : Code[20];CurrPart@1210190003 : Code[20];CurrCode@1210190002 : Code[20];UseLock@1210190004 : Boolean);
    BEGIN
      MESSAGE('Functie niet uitgewerkt voor RAW-calculatie');  //ISS
    END;

    PROCEDURE UpdateTotals@1100485000(CurrEst@1210190001 : Code[20];CurrSubEst@1210190000 : Code[20];CurrPart@1210190003 : Code[20];UseLock@1210190004 : Boolean);
    BEGIN
      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.TESTFIELD(Fixed, FALSE);
        UNTIL EstRec.NEXT = 0;
      END;

      CheckLock(UseLock);
      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      EstLineRec.SETRANGE("Estimate No.", CurrEst);
      //IF CurrSubEst <> '' THEN
      //  EstLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);  //ISS
      IF CurrPart <> '' THEN
        EstLineRec.SETFILTER("Element No.", CurrPart);  //ISS
      //EstLineRec.SETFILTER(Recipe, '%1', '');  //ISS
      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          IF EstLineRec."Rate Code" <> '' THEN BEGIN
            EstRateRec.GET(EstLineRec."Estimate No.", EstLineRec."Rate Code");
            EstLineRec.Rate := EstRateRec."Cost Rate";
            EstLineRec."Rate Type" := EstRateRec."Rate Type";
            EstLineRec."Team Size" := EstRateRec."Team Size";
          END;

          //includes update Part Quantity and functions UpdateRecipeTotals, CalculateTotals:
          EstLineRec.VALIDATE(Quantity);
          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      UpdateFromTmp;

      IF CurrEst <> '' THEN
        EstRec.SETFILTER("No.", CurrEst);
      IF EstRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(EstRec."No.");
        UNTIL EstRec.NEXT = 0;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE UpdateDiscountWithPercentage@1100485004(VAR lvEstLineRec@1100485001 : Record 11125680;PercDiscount@1210190011 : Decimal;DiscMethod@1100485000 : 'Replace,Add,Increase';UseLock@1100485002 : Boolean);
    VAR
      lvPerc@1100525000 : Decimal;
    BEGIN
      EstLineRec.COPY(lvEstLineRec);

      CheckLock(UseLock);

      Status.OPEN(Text011);
      Status.UPDATE(1,Text012);

      IF EstLineRec.FINDSET THEN BEGIN
        currec := 0;
        maxrec := EstLineRec.COUNT;
        REPEAT
          IF EstLineRec."Gross Price" <> 0 THEN BEGIN
            CheckEstFixed(EstLineRec."Estimate No.");
            CASE DiscMethod OF
              DiscMethod::Replace:
                lvPerc := PercDiscount;
              DiscMethod::Add:
                lvPerc := EstLineRec."Discount %" + PercDiscount;
              DiscMethod::Increase:
                lvPerc := EstLineRec."Discount %" * (100+PercDiscount)/100;
            END;
            IF lvPerc < 0 THEN lvPerc := 0;
            IF lvPerc > 100 THEN lvPerc := 100;
            EstLineRec.VALIDATE("Discount %", lvPerc);
          END;

          TmpEstLineRec.COPY(EstLineRec);
          TmpEstLineRec.INSERT;
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL EstLineRec.NEXT = 0;
      END;

      UpdateFromTmp;
      COMMIT;
      Status.CLOSE;
    END;

    PROCEDURE DetermineRemovalContribution@1100485002(lvAction@1100485014 : Integer;CurrEst@1100485011 : Code[20];CurrSubEst@1100485008 : Code[20];CurrPartGrp@1100485007 : Code[20];CurrPart@1100485006 : Code[20];CurrRcpGrp@1100485013 : Code[20];CurrRcp@1100485012 : Code[20]);
    VAR
      lvEstLineRec@1100485003 : Record 11125680;
      lvEstLineRec2@1100485002 : Record 11125680;
      lvItemRec@1100485001 : Record 27;
      lvTradeItemRec@1100485000 : Record 11012317;
      lvCostObject@1100485004 : Code[20];
      lvRemovalContribution@1100485005 : Decimal;
    BEGIN
      IF (lvAction = 0) OR (lvAction = 1) THEN BEGIN
        lvEstLineRec.SETRANGE("Estimate No.", CurrEst);
        //IF CurrSubEst <> '' THEN
        //  lvEstLineRec.SETFILTER("Sub-Estimate No.", CurrSubEst);  //ISS
        //IF CurrPartGrp <> '' THEN
        //  lvEstLineRec.SETFILTER("Part Group", CurrPartGrp);  //ISS
        IF CurrPart <> '' THEN
          lvEstLineRec.SETFILTER("Element No.", CurrPart);   //ISS
        //lvEstLineRec.SETFILTER(Recipe, '%1', '');  //ISS
        lvEstLineRec.SETRANGE("Removal Contribution", TRUE);
        lvEstLineRec.DELETEALL(TRUE);

        lvEstLineRec.SETRANGE("Removal Contribution");
        IF lvEstLineRec.FINDSET THEN BEGIN
          REPEAT
            lvCostObject := '';
            lvRemovalContribution := 0;

            IF lvEstLineRec."Item No." <> '' THEN BEGIN
              lvItemRec.GET(lvEstLineRec."Item No.");
              lvCostObject := lvItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvItemRec."Removal Contribution";
              IF lvRemovalContribution <> 0 THEN
                lvItemRec.TESTFIELD("Cost Object (Removal)");
            END;

           IF lvEstLineRec."Trade Item" <> '' THEN BEGIN
              lvTradeItemRec.GET(lvEstLineRec."Vendor (Trade Item)", lvEstLineRec."Trade Item");
              lvCostObject := lvTradeItemRec."Cost Object (Removal)";
              lvRemovalContribution := lvTradeItemRec."Removal Contribution";
             IF lvRemovalContribution <> 0 THEN
                lvTradeItemRec.TESTFIELD("Cost Object (Removal)");
            END;

            IF lvRemovalContribution <> 0 THEN BEGIN
              lvEstLineRec2.INIT;
              lvEstLineRec2."Estimate No." := lvEstLineRec."Estimate No.";
              //lvEstLineRec2.VALIDATE("Sub-Estimate No.", lvEstLineRec."Sub-Estimate No.");  //ISS
              //lvEstLineRec2."Part Group" := lvEstLineRec."Part Group";  //ISS
              lvEstLineRec2.VALIDATE("Element No.", lvEstLineRec."Element No.");  //ISS
              lvEstLineRec2."Line No." := lvEstLineRec."Line No.";
              REPEAT
                lvEstLineRec2."Line No." := lvEstLineRec2."Line No." + 1;
              UNTIL lvEstLineRec2.INSERT;

              DimMgt.GetDimValueRec(2, lvCostObject, DimValRec, TRUE, '');
              CASE DimValRec."Cost Type" OF
                DimValRec."Cost Type"::Material:
                  BEGIN
                    lvEstLineRec2."Cost Object Material" := lvCostObject;
                    lvEstLineRec2.VALIDATE("Material Price", lvRemovalContribution);
                  END;
                DimValRec."Cost Type"::Subcontracting:
                  BEGIN
                    lvEstLineRec2."Cost Object Subcontracting" := lvCostObject;
                    lvEstLineRec2.VALIDATE("Subcontracting Price", lvRemovalContribution);
                  END;
                DimValRec."Cost Type"::Plant:
                  BEGIN
                    lvEstLineRec2."Cost Object Plant" := lvCostObject;
                    lvEstLineRec2.VALIDATE("Plant Price", lvRemovalContribution);
                  END;
                ELSE
                  ERROR('kostensoort verwijderingbijdrage niet toegestaan');
              END;
              lvEstLineRec2.Description := DimValRec.Name;
              lvEstLineRec2."Unit of Measure" := DimValRec."Unit of Measure";
              lvEstLineRec2.VALIDATE(Quantity, lvEstLineRec.Quantity);  //test convert factor unit of measure
              lvEstLineRec2."Removal Contribution" := TRUE;
              //lvEstLineRec2."Additional Cost (Service)" := lvEstLineRec."Additional Cost (Service)";
              lvEstLineRec2.MODIFY(TRUE);
            END;
          UNTIL lvEstLineRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckLock@1210190009(UseLock@1210190000 : Boolean);
    BEGIN
      IF UseLock = TRUE THEN BEGIN
        EstRec.LOCKTABLE;
        EstLineRec.LOCKTABLE;
      END;

      TmpEstLineRec.RESET;
      TmpEstLineRec.DELETEALL;

      TmpRelationRec.RESET;
      TmpRelationRec.DELETEALL;
    END;

    PROCEDURE CheckCharge@1210190014(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;ChrgBln@1210190011 : Boolean;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer;Desc@1210190000 : Text[100]);
    VAR
      SkipLine@1210190001 : Boolean;
    BEGIN
      EXIT;  //not implemented for RAW
    END;

    PROCEDURE CheckQuanSheet@1210190013(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanSheetRec.RESET;
      QuanSheetRec.SETRANGE("Estimate No.", lvEst);
      QuanSheetRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanSheetRec.SETRANGE("Part Group", lvPartGrp);
      QuanSheetRec.SETRANGE(Part, lvPart);
      IF lvRcp = '' THEN BEGIN
        QuanSheetRec.SETRANGE("Estimate Line", lvEstLine);
        QuanSheetRec.SETRANGE("Recipe Line", 0);
        QuanSheetRec.SETFILTER("Recipe Group", '%1', '');
        QuanSheetRec.SETFILTER(Recipe, '%1', '');
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Estimate Line", lvEstLine);
        QuanSheetRec.SETRANGE("Recipe Group", lvRcpGrp);
        QuanSheetRec.SETRANGE(Recipe, lvRcp);
        QuanSheetRec.SETRANGE("Recipe Line", lvRcpLine);
      END;
      IF QuanSheetRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanSheetRec := QuanSheetRec;
          TmpQuanSheetRec."Estimate No." := NewEst;
          IF lvRcp = '' THEN BEGIN
            TmpQuanSheetRec."Estimate Line" := NewLine;
          END ELSE BEGIN
            TmpQuanSheetRec."Recipe Line" := NewLine;
            TmpRelationRec.GET(lvEst, lvSubEst, lvPartGrp, lvPart, lvEstLine, '', '', 0);
            TmpQuanSheetRec."Estimate Line" := TmpRelationRec.Quantity;
          END;
          TmpQuanSheetRec.INSERT;
        UNTIL QuanSheetRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckQuanModel@1210190022(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      QuanModelRec.RESET;
      QuanModelRec.SETRANGE("Estimate No.", lvEst);
      QuanModelRec.SETRANGE("Sub-Estimate No.", lvSubEst);
      QuanModelRec.SETRANGE("Part Group", lvPartGrp);
      QuanModelRec.SETRANGE(Part, lvPart);
      QuanModelRec.SETRANGE("Estimate Line", lvEstLine);
      IF QuanModelRec.FINDSET THEN BEGIN
        REPEAT
          TmpQuanModelRec := QuanModelRec;
          TmpQuanModelRec."Estimate No." := NewEst;
          TmpQuanModelRec."Estimate Line" := NewLine;
          TmpQuanModelRec.INSERT;
        UNTIL QuanModelRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCode@1210190015(lvEst@1210190002 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190004 : Code[20];lvPart@1210190005 : Code[20];lvEstLine@1210190006 : Integer;lvRcpGrp@1210190007 : Code[20];lvRcp@1210190008 : Code[20];lvRcpLine@1210190009 : Integer;NewEst@1210190012 : Code[20];NewLine@1210190013 : Integer);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CheckSubOperation@1210190017(lvManufacturer@1210190004 : Code[20];lvVendor@1210190005 : Code[20];lvItem@1210190000 : Code[20];lvBasicItem@1210190001 : Code[20];lvTradeItem@1210190002 : Code[20]) : Code[20];
    VAR
      TradeItemRec@1210190008 : Record 11012317;
      BasicItemRec@1210190007 : Record 11012316;
      ItemRec@1210190006 : Record 27;
    BEGIN
      IF lvTradeItem <> '' THEN BEGIN
        IF NOT TradeItemRec.GET(lvVendor, lvTradeItem) THEN TradeItemRec.INIT;
        IF TradeItemRec."Sub Operation Code" <> '' THEN
          EXIT(TradeItemRec."Sub Operation Code");
      END;

      IF lvBasicItem <> '' THEN BEGIN
        IF NOT BasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BasicItemRec.INIT;
        IF BasicItemRec."Sub Operation Code" <> '' THEN
          EXIT(BasicItemRec."Sub Operation Code");
      END;

      IF lvItem <> '' THEN BEGIN
        IF NOT ItemRec.GET(lvItem) THEN ItemRec.INIT;
        IF ItemRec."Sub Operation Code" <> '' THEN
          EXIT(ItemRec."Sub Operation Code");
      END;

      EXIT('');
    END;

    PROCEDURE CheckBackSlash@1210190019(lvDesc@1210190004 : Text[100]);
    VAR
      sep@1210190000 : Integer;
      desc1@1210190001 : Text[100];
      desc2@1210190002 : Text[100];
      lvText000@1210190003 : TextConst 'ENU=Part %1 of Description exceeds 50 characters: \%2';
    BEGIN
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
        IF STRLEN(desc1) > 50 THEN ERROR(lvText000, '1', desc1);
        IF STRLEN(desc2) > 50 THEN ERROR(lvText000, '2', desc2);
      END;
    END;

    LOCAL PROCEDURE UpdateFromTmp@1210190005();
    BEGIN
      Status.UPDATE(1,Text012);
      IF TmpEstLineRec.FIND('-') THEN BEGIN
        currec := 0;
        maxrec := TmpEstLineRec.COUNT;
        REPEAT
          EstLineRec.COPY(TmpEstLineRec);
          EstLineRec.MODIFY;
          IF EstLineRec."Removal Contribution" = TRUE THEN
            DetermineRemovalContribution(1, EstLineRec."Estimate No.", '', '', EstLineRec."Element No.", '', '');  //ISS
          currec := currec + 1;
          Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
        UNTIL TmpEstLineRec.NEXT = 0;
      END;

      IF TmpEstRec.FIND('-') THEN BEGIN
        REPEAT
          EstRec.UpdateLogbook(TmpEstRec."No.");
          TmpEstRec.DELETE;
        UNTIL TmpEstRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckEstFixed@1100485005(CurrEst@1100485000 : Code[20]);
    BEGIN
      //db, 10-08-07
      IF CurrEst <> EstRec."No." THEN BEGIN
        EstRec.GET(CurrEst);
        EstRec.TESTFIELD(Fixed, FALSE);
        TmpEstRec := EstRec;
        TmpEstRec.INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

