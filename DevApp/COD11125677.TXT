OBJECT Codeunit 11125677 Import ZSX
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDOMManagement@1100528700 : Codeunit 11020220;

    PROCEDURE ImportZSX@1100528700(ProjectNo@1100528700 : Code[20];Principal@1100528703 : Code[20];ExtensionContractNo@1100528706 : Code[20];FileName@1100528701 : Text[250]);
    VAR
      FileMgt@1100528707 : Codeunit 419;
      DOMDocument@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLRootNode@1100528702 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ProjectPrincipal@1100528708 : Record 11012005;
      RAWCalculations@1100528705 : Codeunit 11012164;
    BEGIN
      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT;

      DOMDocument := DOMDocument.XmlDocument;
      XMLDOMManagement.LoadXMLFromClientFile(DOMDocument, FileName, TRUE);

      XMLRootNode := DOMDocument.DocumentElement;

      IF XMLRootNode.Name <> 'raw.inschrijvingsstaat' THEN
        EXIT;

      ImportElement(ProjectNo, Principal, ExtensionContractNo, XMLRootNode);
      ImportFooter(ProjectNo, Principal, ExtensionContractNo, XMLRootNode);

      ProjectPrincipal.GET(ProjectNo, Principal);
      RAWCalculations.CalculateAKPerc(ProjectNo, Principal, ProjectPrincipal."Surcharge %");
      ProjectPrincipal.MODIFY;
    END;

    LOCAL PROCEDURE ImportElement@1100528701(ProjectNo@1100528709 : Code[20];Principal@1100528708 : Code[20];ExtensionContractNo@1100528707 : Code[20];XMLRootNode@1100528701 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      TenderParagraphByPrincipal@1100528700 : Record 11012470;
      XMLNodeList@1100528705 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode2@1100528703 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100528706 : Integer;
      String@1100528702 : Text[1024];
    BEGIN
      IF NOT XMLDOMManagement.FindNode(XMLRootNode, 'ins.stt.voorsubtot', XMLNode) THEN
        EXIT;

      IF XMLDOMManagement.FindNodes(XMLNode, 'dl22.bpost.tussenhoofd | ins.stt.bpost.6cijfer.0', XMLNodeList) THEN BEGIN
        FOR I := 0 TO XMLNodeList.Count - 1 DO BEGIN
          XMLNode := XMLNodeList.Item(I);

          String := XMLDOMManagement.FindNodeText(XMLNode, 'dl22.bpost.tussenhoofdnr | dl22.bpost.nr6.0');

          TenderParagraphByPrincipal.INIT;
          TenderParagraphByPrincipal."Project No." := ProjectNo;
          TenderParagraphByPrincipal.Principal := Principal;
          TenderParagraphByPrincipal."Contract No." := ExtensionContractNo;
          TenderParagraphByPrincipal.FillDefaultSettleExcess;
          TenderParagraphByPrincipal.VALIDATE("No.", String);
          TenderParagraphByPrincipal.INSERT(TRUE);

          String := XMLDOMManagement.FindNodeText(XMLNode, 'romptekst');
          TenderParagraphByPrincipal.Description := String;

          String := XMLDOMManagement.FindNodeText(XMLNode, 'dl22.eenheid.res.verpl');
          TenderParagraphByPrincipal."Unit of Measure" := String;

          IF XMLDOMManagement.FindNode(XMLNode, 'ins.stt.hoev.res.verpl', XMLNode2) THEN BEGIN
            TenderParagraphByPrincipal.Quantity := Code2Decimal(XMLNode2.InnerText);
            String := XMLDOMManagement.GetAttributeValue(XMLNode2, 'kenmerk');
            CASE String OF
              ' ':
                CLEAR(TenderParagraphByPrincipal."Settlement Type");
              'V':
                TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::Settling;
              'N':
                TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::"Non Settling";
              'M':
                TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::Reduction;
              'O':
                TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::Open;
              'A':
                TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::Approved;
            END;
          END;

          String := XMLDOMManagement.FindNodeText(XMLNode, 'ins.stt.totaal.bedrag');
          TenderParagraphByPrincipal.VALIDATE("Total Amount (LCY)", Code2Decimal(String));

          TenderParagraphByPrincipal.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE ImportFooter@1100528702(ProjectNo@1100528707 : Code[20];Principal@1100528706 : Code[20];ExtensionContractNo@1100528705 : Code[20];XMLRootNode@1100528704 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      TenderParagraphByPrincipal@1100528709 : Record 11012470;
      XMLNodeList@1100528708 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1100528703 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode2@1100528702 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1100528701 : Integer;
      String@1100528700 : Text[1024];
    BEGIN
      IF NOT XMLDOMManagement.FindNode(XMLRootNode, 'ins.stt.staart', XMLNode) THEN
        EXIT;

      IF XMLDOMManagement.FindNodes(XMLNode,
        'dl22.staart.1cijfer | dl22.staart.2cijfer.ek | ' +
        'ins.stt.staart.6cijfer.0.ek | ins.stt.staart.6cijfer.0 | ' +
        'dl22.staart.2cijfer.stelpost | ins.stt.staart.6cijfer.0.stelpost | ' +
        'dl22.staart.2cijfer.bijdrage | ins.stt.staart.6cijfer.0.bijdrage',
        XMLNodeList) THEN BEGIN
        FOR I := 0 TO XMLNodeList.Count - 1 DO BEGIN
          XMLNode := XMLNodeList.Item(I);

          String := XMLDOMManagement.FindNodeText(XMLNode,
            'dl22.staart.nr1 | dl22.staart.nr2.ek | ' +
            'dl22.staart.nr6.0.ek | dl22.staart.nr6 | ' +
            'dl22.staart.nr2.stelpost | dl22.staart.nr6.0.stelpost | ' +
            'dl22.staart.nr2.bijdrage | dl22.staart.nr6.0.bijdrage');

          IF String <> '919990' THEN BEGIN // Totaal eenmalige kosten
            TenderParagraphByPrincipal.INIT;
            TenderParagraphByPrincipal."Project No." := ProjectNo;
            TenderParagraphByPrincipal.Principal := Principal;
            TenderParagraphByPrincipal."Contract No." := ExtensionContractNo;
            TenderParagraphByPrincipal.FillDefaultSettleExcess;
            TenderParagraphByPrincipal.VALIDATE("No.", String);
            TenderParagraphByPrincipal.INSERT(TRUE);

            String := XMLDOMManagement.FindNodeText(XMLNode, 'romptekst');
            TenderParagraphByPrincipal.Description := String;

            String := XMLDOMManagement.FindNodeText(XMLNode, 'dl22.staart.eenheid');

            TenderParagraphByPrincipal."Unit of Measure" := String;

            IF XMLDOMManagement.FindNode(XMLNode, 'ins.stt.hoev.res.verpl', XMLNode2) THEN BEGIN
              TenderParagraphByPrincipal.Quantity := Code2Decimal(XMLNode2.InnerText);
              String := XMLDOMManagement.GetAttributeValue(XMLNode2, 'kenmerk');
              CASE String OF
                ' ':
                  CLEAR(TenderParagraphByPrincipal."Settlement Type");
                'V':
                  TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::Settling;
                'N':
                  TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::"Non Settling";
                'M':
                  TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::Reduction;
                'O':
                  TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::Open;
                'A':
                  TenderParagraphByPrincipal."Settlement Type" := TenderParagraphByPrincipal."Settlement Type"::Approved;
              END;
            END;

            String := XMLDOMManagement.FindNodeText(XMLNode, 'ins.stt.totaal.bedrag');
            TenderParagraphByPrincipal.VALIDATE("Total Amount (LCY)", Code2Decimal(String));

            TenderParagraphByPrincipal.MODIFY;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE Code2Decimal@1100528315(Code@1100528300 : Code[10]) Result : Decimal;
    BEGIN
      Code := CONVERTSTR(Code, '.', ',');
      IF EVALUATE(Result, Code) THEN;
    END;

    BEGIN
    END.
  }
}

