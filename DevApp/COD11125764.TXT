OBJECT Codeunit 11125764 Glazing Svc. Call - Create SO
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    TableNo=11125777;
    Permissions=TableData 11012823=rim;
    OnRun=VAR
            Dialog@1210190000 : Dialog;
            AppointmentNo@1210190001 : Integer;
            Modified@1210190002 : Boolean;
          BEGIN
            TESTFIELD(Status, Status::Released);
            TESTFIELD(Date);

            //mg.sn, 25-07-11: M23885
            Modified := FALSE;
            Dialog.OPEN(Text003);
            FOR AppointmentNo := 1 TO 6 DO BEGIN
              Dialog.UPDATE(1, ROUND(AppointmentNo / 6 * 10000, 1));
              Modified := Modified OR CreateServiceOrder(Rec, AppointmentNo);
            END;
            Dialog.CLOSE;
            //mg.en, 25-07-11: M23885
            IF Modified THEN
              MESSAGE(Text100)
            ELSE
              MESSAGE(Text101);
          END;

  }
  CODE
  {
    VAR
      Text000@1100525000 : TextConst 'ENU=Nothing to create/update.\\Only marked records without a %1 can be transferred.';
      Text100@1210190003 : TextConst 'ENU=Service Orders were created/updated.';
      Text101@1210190004 : TextConst 'ENU=No Service Orders were created/updated';
      Text001@1100525002 : TextConst 'ENU=%1 x %2';
      Text002@1100525003 : TextConst 'ENU=At least one cost object code must be filled in each of the activity lines for line %1 of %2 %3.';
      GlazingServiceCallLine2@1100525004 : Record 11125778;
      GlazingServiceCallNo@1210190001 : Code[20];
      GlazingServiceCallLineNo@1210190000 : Integer;
      Text003@1210190002 : TextConst 'ENU=Progress @1@@@@@@@@@@@@@@@';

    PROCEDURE CreateServiceOrder@1210190002(VAR IGlazingServiceCall@1210190001 : Record 11125777;AppointmentNo@1210190000 : Integer) : Boolean;
    VAR
      Item@1210190023 : Record 27;
      ServiceText@1210190022 : Record 11012882;
      ServiceOrder@1210190021 : Record 11012823;
      AdviceOrderLine@1210190020 : Record 11012055;
      ServiceOrderBudgetLine@1210190019 : Record 11012875;
      ServiceOrderCostPlusEntry@1210190027 : Record 11012825;
      GlazingServiceCall@1210190018 : Record 11125777;
      GlazingServiceCallLine@1210190017 : Record 11125778;
      GlazingServiceCallActivity@1210190016 : Record 11125781;
      GlazingSvcCallActivityBuffer@1210190015 : TEMPORARY Record 11125781;
      GlazingServiceCallAssembly@1210190014 : Record 11125779;
      GlazingSvcCallAssemblyBuffer@1210190013 : TEMPORARY Record 11125779;
      GlazingSvcCallItemLine@1210190012 : Record 11125778;
      GlazingServiceCommentLine@1210190011 : Record 11125782;
      CommentLine@1210190010 : Record 97;
      TempGlazingServCallLine@1210190009 : TEMPORARY Record 11125778;
      lvGlazingServCallLine2@1210190008 : Record 11125778;
      GlazingCallMgtSetup@1210190034 : Record 11125762;
      AssemblyCode@1210190007 : Code[50];
      ServiceOrderBudgetLineNo@1210190006 : Integer;
      AdviceOrderLineNo@1210190005 : Integer;
      CostPlusEntryLineNo@1210190004 : Integer;
      lvTotalSalesAmount@1210190003 : Decimal;
      lvTotalCostAmount@1210190002 : Decimal;
      lvTotalSalesPrice@1210190030 : Decimal;
      lvTotalCostPrice@1210190031 : Decimal;
      BaseServiceOrderNo@1210190024 : Code[20];
      lvDescription@1210190025 : Text[50];
      lvDescription2@1210190026 : Text[50];
      CostPlusType@1210190028 : ' ,Removal,Mounting,Item,Assembly';
      lvQuantity@1210190029 : Decimal;
      lvItemNo@1210190032 : Code[20];
      lvCostObject@1210190033 : Code[20];
      ServOrderExtension@1100528900 : Record 11071727;
      StandardServiceText@1100529100 : Record 11020338;
    BEGIN
      IF IGlazingServiceCall.GetAppointmentDate(AppointmentNo) = 0D THEN EXIT; //mg, 25-07-11: M23885

      // Any glazing service call lines with blank service order no.?
      //GlazingServiceCallLine.COPY(GlazingServiceCallLine2); //mg.o, 25-07-11: M23885
      GlazingServiceCallLine.SETCURRENTKEY("Glazing Service Call No.", "Service Order No.");
      GlazingServiceCallLine.SETRANGE("Glazing Service Call No.", IGlazingServiceCall."No.");
      GlazingServiceCallLine.SETRANGE("Service Order No.", '');
      GlazingServiceCallLine.SETRANGE("Appointment No.", AppointmentNo);
      //GlazingServiceCallLine.MARKEDONLY(TRUE); //mg.o, 25-07-11: M23885

      // Any service call item lines?
      GlazingSvcCallItemLine.COPY(GlazingServiceCallLine);
      GlazingSvcCallItemLine.SETFILTER("Item No.", '<>%1', '');

      // Any relevant glazing service call activity lines?
      IF GlazingServiceCallLine.FINDSET THEN
        REPEAT
          GlazingServiceCallActivity.SETRANGE("Glazing Service Call No.", GlazingServiceCallLine."Glazing Service Call No.");
          GlazingServiceCallActivity.SETRANGE("Glazing Service Call Line No.", GlazingServiceCallLine."Line No.");
          IF GlazingServiceCallActivity.FINDSET THEN
            REPEAT
              GlazingSvcCallActivityBuffer := GlazingServiceCallActivity;
              GlazingSvcCallActivityBuffer.INSERT;
            UNTIL GlazingServiceCallActivity.NEXT = 0;
        UNTIL GlazingServiceCallLine.NEXT = 0;

      // Any relevant glazing service call assembly lines?
      IF GlazingServiceCallLine.FINDSET THEN
        REPEAT
          GlazingServiceCallAssembly.SETRANGE("Glazing Service Call No.", GlazingServiceCallLine."Glazing Service Call No.");
          GlazingServiceCallAssembly.SETRANGE("Glazing Service Call Line No.", GlazingServiceCallLine."Line No.");
          GlazingServiceCallAssembly.SETFILTER(Quantity, '<>%1', 0); //mg, 05-12-11: M31335
          IF GlazingServiceCallAssembly.FINDSET THEN
            REPEAT
              GlazingSvcCallAssemblyBuffer := GlazingServiceCallAssembly;
              GlazingSvcCallAssemblyBuffer.INSERT;
            UNTIL GlazingServiceCallAssembly.NEXT = 0;
        UNTIL GlazingServiceCallLine.NEXT = 0;

      //IF (GlazingSvcCallActivityBuffer.ISEMPTY) AND (GlazingSvcCallAssemblyBuffer.ISEMPTY) AND (GlazingSvcCallItemLine.ISEMPTY) THEN
      //  if GetAppointmentServiceOrderNo(AppointmentNo) = '' then
      //    EXIT;
      //  else BEGIN
      //    Status := CalculateStatus("No.");
      //    MODIFY(TRUE);
      //  END;

      IF IGlazingServiceCall.GetAppointmentServiceOrderNo(AppointmentNo) = '' THEN BEGIN
        IGlazingServiceCall.CALCFIELDS("Planned Hours (Calculated)");

        ServiceOrder."Source Type" := ServiceOrder."Source Type"::Call;
        ServiceOrder.INSERT(TRUE);

        ServiceOrder."Glazing Service Call No." := IGlazingServiceCall."No.";
        ServiceOrder.VALIDATE("Service Location No.", IGlazingServiceCall."Service Location No.");
        ServiceOrder.VALIDATE("Service Contract No.", IGlazingServiceCall."Service Contract No.");
      //ServiceOrder."Invoice Text" := ''; //DP00106
        ServiceOrder.VALIDATE("Customer No.", IGlazingServiceCall."Customer No.");
        ServiceOrder.Description := IGlazingServiceCall.Description;
        ServiceOrder.Name := IGlazingServiceCall.Name;
        ServiceOrder.Address := IGlazingServiceCall.Address;
        ServiceOrder."Address 2" := IGlazingServiceCall."Address 2";
        ServiceOrder.City := IGlazingServiceCall.City;
        ServiceOrder."Post Code" := IGlazingServiceCall."Post Code";
        ServiceOrder."Phone No." := IGlazingServiceCall."Calling Phone No.";
        ServiceOrder."Contact Name" := IGlazingServiceCall."Calling Contact";
        ServiceOrder.County := IGlazingServiceCall.County;
        ServiceOrder."Territory Code" := IGlazingServiceCall."Territory Code";
        ServiceOrder."Country/Region Code" := IGlazingServiceCall."Country/Region Code";
        ServiceOrder.VALIDATE("Bill-to Customer No.", IGlazingServiceCall."Customer No.");
        ServiceOrder.VALIDATE(Priority, IGlazingServiceCall."Priority Code");
        // jhoek.190511.begin
        ServiceText.CopyServiceTexts(
          ServiceText."Table Name"::"Glazing Service Call",
          IGlazingServiceCall."No.",
          2010,  //IGlazingServiceCall.FIELDNO("Internal Text Code"),
          ServiceText."Table Name"::"Service Order",
          ServiceOrder."No.",
          91);  //DP00106 ServiceOrder.FIELDNO("Internal Text"));
        // jhoek.190511.end
        ServiceOrder."Order No. Customer" := IGlazingServiceCall."Order No. Customer";
        ServiceOrder."E-Mail" := IGlazingServiceCall."E-Mail";
        ServiceOrder."Your Reference" := IGlazingServiceCall."Your Reference";
        ServiceOrder."Contact Person No." := IGlazingServiceCall."Service Contact Person No.";
        IF IGlazingServiceCall."Contract Amount" <> 0 THEN
          ServiceOrder."Settlement Method" := ServiceOrder."Settlement Method"::"Fixed Price"
        ELSE
          ServiceOrder."Settlement Method" := ServiceOrder."Settlement Method"::"Cost Plus";
        ServiceOrder."Schedule Method" := IGlazingServiceCall."Schedule Method"; //mg, 13-12-11: M30557
        //mg.sn, 25-07-11: M23885
        IF AppointmentNo > 1 THEN BEGIN
          BaseServiceOrderNo := IGlazingServiceCall.GetAppointmentServiceOrderNo(1);
          MakeServiceOrderBaseOrder(BaseServiceOrderNo);
          ServiceOrder."Base Service Order No." := BaseServiceOrderNo;
          ServiceOrder."Previous Service Order No." := IGlazingServiceCall.GetAppointmentServiceOrderNo(AppointmentNo -1);
          ServiceOrder."Collect Invoices By" := ServiceOrder."Collect Invoices By"::BaseOrder;
        END;
        //mg.en, 25-07-11: M23885
        IF IGlazingServiceCall."Order Manager" <> '' THEN
          ServiceOrder."Order Manager" := IGlazingServiceCall."Order Manager";  //db, 18-12-12: C001511
        ServiceOrder.MODIFY(TRUE);

        IGlazingServiceCall.FIND('=');
        IGlazingServiceCall.SetAppointmentServiceOrderNo(AppointmentNo, ServiceOrder."No."); //mg.c, 25-07-11: M23885

        // jhoek.031210.begin
        GlazingServiceCommentLine.SETRANGE("Table Name", GlazingServiceCommentLine."Table Name"::"Glazing Service Call");
        GlazingServiceCommentLine.SETRANGE("No.", IGlazingServiceCall."No.");

        IF GlazingServiceCommentLine.FINDSET THEN
          REPEAT
            CommentLine."Table Name" := CommentLine."Table Name"::"Service Order";
            CommentLine."No." := ServiceOrder."No.";
            CommentLine."Line No." := GlazingServiceCommentLine."Line No.";
            CommentLine.Date := GlazingServiceCommentLine.Date;
            CommentLine.Code := GlazingServiceCommentLine.Code;
            CommentLine.Comment := GlazingServiceCommentLine.Comment;
            CommentLine.INSERT;
          UNTIL GlazingServiceCommentLine.NEXT = 0;
        // jhoek.031210.end
      END ELSE
        ServiceOrder.GET(IGlazingServiceCall.GetAppointmentServiceOrderNo(AppointmentNo)); //mg.c, 25-07-11: M23885

      IF GlazingSvcCallActivityBuffer.FINDSET THEN
        REPEAT
          IF (GlazingSvcCallActivityBuffer."Cost Object Code Labor" = '') AND
             (GlazingSvcCallActivityBuffer."Cost Object Code Material" = '') AND
             (GlazingSvcCallActivityBuffer."Cost Object Code Subcontr." = '') AND
             (GlazingSvcCallActivityBuffer."Cost Object Code Plant" = '')
          THEN
            ERROR(
              Text002,
              GlazingSvcCallActivityBuffer."Glazing Service Call Line No.",
              GlazingServiceCall.TABLECAPTION,
              GlazingSvcCallActivityBuffer."Glazing Service Call No.");

          IF GlazingSvcCallActivityBuffer."Cost Object Code Labor" <> '' THEN BEGIN
            GlazingSvcCallActivityBuffer.CALCFIELDS("Cost Object Name Labor");
            // jhoek.050511.begin
            GlazingServiceCallNo := GlazingSvcCallActivityBuffer."Glazing Service Call No.";
            GlazingServiceCallLineNo := GlazingSvcCallActivityBuffer."Glazing Service Call Line No.";
            // jhoek.050511.end
            InsertServiceOrderBudgetLine(
              ServiceOrder."No.",
              IGlazingServiceCall."Service Contract No.",
      //        DATE2DMY(Date, 3), //mg.o, 25-07-11: M23885
              ServiceOrderBudgetLineNo,
              GlazingSvcCallActivityBuffer.Description,
              '',
              // jhoek.040810.begin
              // GlazingSvcCallActivityBuffer.Quantity,
              GlazingSvcCallActivityBuffer.Quantity * GlazingSvcCallActivityBuffer.CallLineQtyForBudget,
              // jhoek.040810.end
              GlazingSvcCallActivityBuffer."Unit of Measure Code",
              '',
              GlazingSvcCallActivityBuffer."Cost Object Code Labor",
              ServiceOrderBudgetLine."Cost Type"::Labor,
              0,
              GlazingSvcCallActivityBuffer.Norm,
              GlazingSvcCallActivityBuffer."Rate Code",
              GlazingSvcCallActivityBuffer.Rate,
              GlazingSvcCallActivityBuffer.Hours,
              GlazingSvcCallActivityBuffer."Labor Amount",
              IGlazingServiceCall."Service Location No.",
              FALSE);
          END;

          IF GlazingSvcCallActivityBuffer."Cost Object Code Material" <> '' THEN BEGIN
            GlazingSvcCallActivityBuffer.CALCFIELDS("Cost Object Name Material");
            // jhoek.050511.begin
            GlazingServiceCallNo := GlazingSvcCallActivityBuffer."Glazing Service Call No.";
            GlazingServiceCallLineNo := GlazingSvcCallActivityBuffer."Glazing Service Call Line No.";
            // jhoek.050511.end

            InsertServiceOrderBudgetLine(
              ServiceOrder."No.",
              IGlazingServiceCall."Service Contract No.",
      //        DATE2DMY(Date, 3), //mg.o, 25-07-11: M23885
              ServiceOrderBudgetLineNo,
              GlazingSvcCallActivityBuffer.Description,
              '',
              // jhoek.040810.begin
              // GlazingSvcCallActivityBuffer.Quantity,
              GlazingSvcCallActivityBuffer.Quantity * GlazingSvcCallActivityBuffer.CallLineQtyForBudget,
              // jhoek.040810.end
              GlazingSvcCallActivityBuffer."Unit of Measure Code",
              GlazingSvcCallActivityBuffer."Item No.",
              GlazingSvcCallActivityBuffer."Cost Object Code Material",
              ServiceOrderBudgetLine."Cost Type"::Material,
              GlazingSvcCallActivityBuffer."Material Price",
              0,
              '',
              0,
            0,
              GlazingSvcCallActivityBuffer."Material Amount",
              IGlazingServiceCall."Service Location No.",
              FALSE);
          END;

          IF GlazingSvcCallActivityBuffer."Cost Object Code Subcontr." <> '' THEN BEGIN
            GlazingSvcCallActivityBuffer.CALCFIELDS("Cost Object Name Subcontr.");
            // jhoek.050511.begin
            GlazingServiceCallNo := GlazingSvcCallActivityBuffer."Glazing Service Call No.";
            GlazingServiceCallLineNo := GlazingSvcCallActivityBuffer."Glazing Service Call Line No.";
            // jhoek.050511.end
            InsertServiceOrderBudgetLine(
              ServiceOrder."No.",
              IGlazingServiceCall."Service Contract No.",
      //        DATE2DMY(Date, 3), //mg.o, 25-07-11: M23885
              ServiceOrderBudgetLineNo,
              GlazingSvcCallActivityBuffer.Description,
              '',
              // jhoek.040810.begin
              // GlazingSvcCallActivityBuffer.Quantity,
              GlazingSvcCallActivityBuffer.Quantity * GlazingSvcCallActivityBuffer.CallLineQtyForBudget,
              // jhoek.040810.end
              GlazingSvcCallActivityBuffer."Unit of Measure Code",
              '',
              GlazingSvcCallActivityBuffer."Cost Object Code Subcontr.",
              ServiceOrderBudgetLine."Cost Type"::Subcontracting,
              GlazingSvcCallActivityBuffer."Subcontracting Price",
              0,
              '',
              0,
            0,
              GlazingSvcCallActivityBuffer."Subcontracting Amount",
              IGlazingServiceCall."Service Location No.",
              FALSE);
          END;

          IF GlazingSvcCallActivityBuffer."Cost Object Code Plant" <> '' THEN BEGIN
            GlazingSvcCallActivityBuffer.CALCFIELDS("Cost Object Name Plant");
            // jhoek.050511.begin
            GlazingServiceCallNo := GlazingSvcCallActivityBuffer."Glazing Service Call No.";
            GlazingServiceCallLineNo := GlazingSvcCallActivityBuffer."Glazing Service Call Line No.";
            // jhoek.050511.end
            InsertServiceOrderBudgetLine(
              ServiceOrder."No.",
              IGlazingServiceCall."Service Contract No.",
      //        DATE2DMY(Date, 3), //mg.o, 25-07-11: M23885
              ServiceOrderBudgetLineNo,
              GlazingSvcCallActivityBuffer.Description,
              '',
              // jhoek.040810.begin
              // GlazingSvcCallActivityBuffer.Quantity,
              GlazingSvcCallActivityBuffer.Quantity * GlazingSvcCallActivityBuffer.CallLineQtyForBudget,
              // jhoek.040810.end
              GlazingSvcCallActivityBuffer."Unit of Measure Code",
              '',
              GlazingSvcCallActivityBuffer."Cost Object Code Plant",
              ServiceOrderBudgetLine."Cost Type"::Plant,
              GlazingSvcCallActivityBuffer."Plant Price",
              0,
              '',
              0,
            0,
              GlazingSvcCallActivityBuffer."Plant Amount",
              IGlazingServiceCall."Service Location No.",
              FALSE);
          END;
        UNTIL GlazingSvcCallActivityBuffer.NEXT = 0;

      // jhoek.300810.begin
      // ***
      IF GlazingSvcCallAssemblyBuffer.FINDSET THEN
        REPEAT
          // jhoek.050511.begin
          GlazingServiceCallNo := GlazingSvcCallAssemblyBuffer."Glazing Service Call No.";
          GlazingServiceCallLineNo := GlazingSvcCallAssemblyBuffer."Glazing Service Call Line No.";
          // jhoek.050511.end

          InsertServiceOrderBudgetLine(
            ServiceOrder."No.",
            IGlazingServiceCall."Service Contract No.",
      //      DATE2DMY(Date, 3), //mg.o, 25-07-11: M23885
            ServiceOrderBudgetLineNo,
            GlazingSvcCallAssemblyBuffer.Description,
            GlazingSvcCallAssemblyBuffer."Description 2",
            GlazingSvcCallAssemblyBuffer."Quantity (Glazing Call Line)" * GlazingSvcCallAssemblyBuffer.Quantity, // Quantity
            '', // UoM
            GlazingSvcCallAssemblyBuffer."Item No.", // Item No.
            GlazingSvcCallAssemblyBuffer."Global Dimension 2 Code", // Cost Object
            ServiceOrderBudgetLine."Cost Type"::Material, // Cost Type
            // jhoek.150910.begin
            // GlazingSvcCallAssemblyBuffer."Standard Cost", // Price
            GlazingSvcCallAssemblyBuffer."Standard Cost Amount" / GlazingSvcCallAssemblyBuffer.Quantity, // Price
            // jhoek.150910.end
            0, // Norm
            '', // Rate Code
            0, // Rate
            0, // Hours
            GlazingSvcCallAssemblyBuffer."Total Cost Amount", // Amount
            IGlazingServiceCall."Service Location No.", // Service Location
            TRUE); // Advised
        UNTIL GlazingSvcCallAssemblyBuffer.NEXT = 0;
      // jhoek.300810.end

      // Item and assembly lines from call lines
      IF GlazingServiceCallLine.FINDSET THEN
        REPEAT
          GlazingServiceCallLine.TESTFIELD(Quantity);
          // jhoek.050511.begin
          GlazingServiceCallNo := GlazingServiceCallLine."Glazing Service Call No.";
          GlazingServiceCallLineNo := GlazingServiceCallLine."Line No.";
          // jhoek.050511.end

          IF GlazingServiceCallLine."Item No." <> '' THEN BEGIN
            Item.GET(GlazingServiceCallLine."Item No.");
            InsertAdviceOrderLine(
              ServiceOrder."No.",
              AdviceOrderLineNo,
              GlazingServiceCallLine."Item No.",
              GlazingServiceCallLine.Quantity,
              '', // ???
              GlazingServiceCallLine."Item Description",
              GlazingServiceCallLine."Item Description 2",
              GlazingServiceCallLine."Item Standard Cost",
              Item."Global Dimension 2 Code", // jhoek.200710
              AdviceOrderLine."Cost Type"::Material,
              GlazingServiceCallLine."Item Sales Price",
              IGlazingServiceCall."Service Contract No.",
              Item."Vendor No.");

            // jhoek.080910.begin
            InsertServiceOrderBudgetLine(
              ServiceOrder."No.",
              IGlazingServiceCall."Service Contract No.",
      //        DATE2DMY(Date, 3), //mg.o, 25-07-11: M23885
              ServiceOrderBudgetLineNo,
              GlazingServiceCallLine."Item Description",
              GlazingServiceCallLine."Item Description 2",
              GlazingServiceCallLine.Quantity,
              Item."Base Unit of Measure",
              GlazingServiceCallLine."Item No.",
              Item."Global Dimension 2 Code",
              ServiceOrderBudgetLine."Cost Type"::Material,
              GlazingServiceCallLine."Item Standard Cost",
              0,
              '',
              0,
            0,
              GlazingServiceCallLine."Item Standard Cost Amount",
              '',
              TRUE);
            // jhoek.080910.end
          END;

          AssemblyCode := GlazingServiceCallLine.GlazingAssemblyCode(0);
          IF AssemblyCode <> '' THEN BEGIN
            GlazingServiceCallLine.CALCFIELDS("Standard Cost Assembly");

            GlazingServiceCallAssembly.SETRANGE("Glazing Service Call No.", GlazingServiceCallLine."Glazing Service Call No.");
            GlazingServiceCallAssembly.SETRANGE("Glazing Service Call Line No.", GlazingServiceCallLine."Line No.");
            IF NOT GlazingServiceCallAssembly.FINDFIRST THEN
              GlazingServiceCallAssembly.INIT;

            IF NOT Item.GET(GlazingServiceCallAssembly."Item No.") THEN
              Item.INIT;

            InsertAdviceOrderLine(
              ServiceOrder."No.",
              AdviceOrderLineNo,
              '',
              GlazingServiceCallLine.Quantity,
              '', // ???
              AssemblyCode,
              GlazingServiceCallLine.GetVentDescription2,
              GlazingServiceCallLine."Standard Cost Assembly",
              GlazingServiceCallAssembly."Global Dimension 2 Code",
              AdviceOrderLine."Cost Type"::Material,
              GlazingServiceCallLine."Sales Price Assembly",
              IGlazingServiceCall."Service Contract No.",
              Item."Vendor No.");
          END;

          // jhoek.131010.begin
          IF IGlazingServiceCall."Contract Amount" = 0 THEN BEGIN
          // IF NOT "Fixed Price Contract" THEN BEGIN
          // jhoek.131010.end
          //RFC 547 sn
            GlazingCallMgtSetup.GET;
            lvGlazingServCallLine2.SETRANGE("Glazing Service Call No.", GlazingServiceCallLine."Glazing Service Call No.");
            lvGlazingServCallLine2.SETRANGE("Line No.", GlazingServiceCallLine."Line No.");
            FOR CostPlusType := CostPlusType::Removal TO CostPlusType::Assembly DO BEGIN
              SplitGlazServCallLineToVAT(TempGlazingServCallLine,lvGlazingServCallLine2, CostPlusType);
              IF TempGlazingServCallLine.FINDSET THEN BEGIN
                REPEAT
                //RFC 547 sn
                  lvTotalSalesAmount := GlazingServiceCallLine.TotalSalesAmtByVATPrdGrp(
                                        TempGlazingServCallLine."Active VAT Prod. Posting Group", CostPlusType);
                  lvTotalCostAmount := GlazingServiceCallLine.TotalCostByVATPrdGrp(
                                        TempGlazingServCallLine."Active VAT Prod. Posting Group", CostPlusType);

                  lvItemNo := '';
                  //mg.sc, 09-12-11: M31422
                  lvQuantity := GlazingServiceCallLine.Quantity;
                  IF lvQuantity <> 0 THEN BEGIN
                    lvTotalSalesPrice := lvTotalSalesAmount / lvQuantity;
                    lvTotalCostPrice := lvTotalCostAmount / lvQuantity;
                  END ELSE BEGIN
                    lvTotalSalesPrice := 0;
                    lvTotalCostPrice := 0;
                  END;

                  CASE CostPlusType OF
                    CostPlusType::Removal:
                      BEGIN
                        GlazingCallMgtSetup.TESTFIELD(GlazingCallMgtSetup."Cost Object Removal");
                        lvCostObject := GlazingCallMgtSetup."Cost Object Removal";
                        lvDescription := GetGlazingActivityDescription(GlazingServiceCallLine."Glazing Activity Removal");
                        lvDescription2 := '';
                      END;
                    CostPlusType::Mounting:
                      BEGIN
                        GlazingCallMgtSetup.TESTFIELD(GlazingCallMgtSetup."Cost Object Mounting");
                        lvCostObject := GlazingCallMgtSetup."Cost Object Mounting";
                        lvDescription := GetGlazingActivityDescription(GlazingServiceCallLine."Glazing Activity Mounting");
                        lvDescription2 := '';
                      END;
                    CostPlusType::Item:
                      BEGIN
                        IF NOT Item.GET(TempGlazingServCallLine."Item No.") THEN
                          Item.INIT
                        ELSE
                          Item.TESTFIELD("Global Dimension 2 Code");
                        lvCostObject := Item."Global Dimension 2 Code";
                        lvDescription := GlazingServiceCallLine."Item Description";
                        lvDescription2 := GlazingServiceCallLine."Item Description 2";
                        lvItemNo := TempGlazingServCallLine."Item No.";
                      END;
                    CostPlusType::Assembly:
                      BEGIN
                        GlazingCallMgtSetup.TESTFIELD(GlazingCallMgtSetup."Cost Object Assembly");
                        lvCostObject := GlazingCallMgtSetup."Cost Object Assembly";
                        lvDescription := GlazingServiceCallLine.GlazingAssemblyCode(0);
                        lvDescription2 := GlazingServiceCallLine.GetVentDescription2;
                      END;
                  END;
                  //mg.ec, 09-12-11: M31422

                  IF lvTotalSalesAmount <> 0 THEN
                    InsertSvcOrderCostPlusEntry(
                      ServiceOrder."No.",
                      CostPlusEntryLineNo,
                      lvDescription,
                      lvDescription2,
                      lvQuantity,
                      lvTotalSalesPrice,
                      lvTotalCostPrice,
                      lvTotalSalesPrice,
                      lvItemNo,
                      IGlazingServiceCall."Service Contract No.",
                      TempGlazingServCallLine."Active VAT Prod. Posting Group",
                      lvCostObject);
                UNTIL TempGlazingServCallLine.NEXT = 0;
              END;
            END;
          END;
        UNTIL GlazingServiceCallLine.NEXT = 0;

      // Mark service call lines as processed
      GlazingServiceCallLine.MODIFYALL("Service Order No.", ServiceOrder."No.");

      IGlazingServiceCall.Status := CalculateStatus(IGlazingServiceCall."No.");
      IGlazingServiceCall.MODIFY(TRUE);

      // Mark glazing call activity lines as processed
      GlazingSvcCallActivityBuffer.RESET;
      IF GlazingSvcCallActivityBuffer.FINDSET THEN
        REPEAT
          IF GlazingServiceCallActivity.GET(
            GlazingSvcCallActivityBuffer."Glazing Service Call No.",
            GlazingSvcCallActivityBuffer."Glazing Service Call Line No.",
            GlazingSvcCallActivityBuffer.Type,
            GlazingSvcCallActivityBuffer."Line No.")
          THEN BEGIN
            GlazingServiceCallActivity."Service Order No." := ServiceOrder."No.";
            GlazingServiceCallActivity.MODIFY(TRUE);
          END;
        UNTIL GlazingSvcCallActivityBuffer.NEXT = 0;

      ServiceOrder.GET(ServiceOrder."No."); // jhoek.261010

      // IF "Fixed Price Contract" THEN BEGIN jhoek.051010
      IF AppointmentNo = 1 THEN BEGIN
        IF IGlazingServiceCall."Contract Amount" = 0 THEN
          ServiceOrder.VALIDATE("Order Amount (LCY)", IGlazingServiceCall.TotalSalesAmount)
        ELSE
          ServiceOrder.VALIDATE("Order Amount (LCY)", IGlazingServiceCall."Contract Amount");
      END;
      // END; jhoek.051010

      // jhoek.231110.begin
      ServiceOrder.VALIDATE("Order Kind",  IGlazingServiceCall."Order Kind Code");
      ServiceOrder.VALIDATE("Order Type", IGlazingServiceCall."Order Type Code");
      // jhoek.231110.end
      //ServiceOrder."Plan during Clock Time" := FALSE; // jhoek.070910 //call 31009
      //ServiceOrder."Duration Time" := 0;
      //mg.sc, 25-07-11: M23885
      ServiceOrder."Ending Date" := IGlazingServiceCall.GetAppointmentDate(AppointmentNo);
      ServiceOrder."Starting Time" := IGlazingServiceCall.GetAppointmentStartingTime(AppointmentNo);
      ServiceOrder."Ending Time" := IGlazingServiceCall.GetAppointmentEndingTime(AppointmentNo);
      ServiceOrder.VALIDATE("Starting Date", IGlazingServiceCall.GetAppointmentDate(AppointmentNo));
      //ServiceOrder."Expected Hours" := "Planned Hours (Calculated)"; // jhoek.091210
      ServiceOrder."Expected Hours" := IGlazingServiceCall.GetTotalHoursByAppointmentNo(AppointmentNo);
      //mg.ec, 25-07-11: M23885
      ServiceOrder."Duration Time" := ServiceOrder."Expected Hours"; //mg, 06-01-2014: C012007
      ServiceOrder.MODIFY(TRUE);

      ServiceOrder.UpdateWorkOrder(FALSE);  //C028667
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InsertServiceOrderBudgetLine@1100525002(ServiceOrderNo@1100525001 : Code[20];ServiceContractNo@1100525003 : Code[20];VAR LineNo@1100525002 : Integer;Description@1100525005 : Text[50];Description2@1100525019 : Text[50];Quantity@1100525006 : Decimal;UnitOfMeasureCode@1100525007 : Code[10];ItemNo@1100525018 : Code[20];CostObject@1100525008 : Code[20];CostType@1100525017 : Integer;Price@1100525016 : Decimal;Norm@1100525009 : Decimal;RateCode@1100525010 : Code[10];Rate@1100525011 : Decimal;Hours@1100525012 : Decimal;Amount@1100525013 : Decimal;ServiceLocationNo@1100525014 : Code[20];Advised@1100525020 : Boolean);
    VAR
      ServiceOrderBudgetLine@1100525000 : Record 11012875;
      ServiceOrderBudgetLine2@1100525015 : Record 11012875;
    BEGIN
      IF LineNo = 0 THEN BEGIN
        ServiceOrderBudgetLine2.SETRANGE("Budget Type", ServiceOrderBudgetLine2."Budget Type"::Order);
        ServiceOrderBudgetLine2.SETRANGE("Service Order No.", ServiceOrderNo);
        ServiceOrderBudgetLine2.SETRANGE("Service Contract No.", ServiceContractNo);
        IF ServiceOrderBudgetLine2.FINDLAST THEN
          LineNo := ServiceOrderBudgetLine2."Line No.";
      END;

      LineNo := LineNo + 10000;

      ServiceOrderBudgetLine."Budget Type" := ServiceOrderBudgetLine."Budget Type"::Order;
      ServiceOrderBudgetLine."Service Order No." := ServiceOrderNo;
      ServiceOrderBudgetLine."Service Contract No." := ServiceContractNo;
      ServiceOrderBudgetLine."Line No." := LineNo;
      ServiceOrderBudgetLine.Description := Description;
      ServiceOrderBudgetLine."Description 2" := Description2;
      ServiceOrderBudgetLine."Cost Type" := CostType;
      ServiceOrderBudgetLine.VALIDATE("Item No.", ItemNo);
      ServiceOrderBudgetLine.Quantity := Quantity;
      ServiceOrderBudgetLine."Unit of Measure" := UnitOfMeasureCode;
      ServiceOrderBudgetLine."Time Quantity" := 1;
      ServiceOrderBudgetLine."Unit of Time" := '';
      ServiceOrderBudgetLine."Cost Object" := CostObject;
      ServiceOrderBudgetLine.Norm := Norm;
      ServiceOrderBudgetLine."Rate Code" := RateCode;
      ServiceOrderBudgetLine.Rate := Rate;
      ServiceOrderBudgetLine.Price := Price;
      ServiceOrderBudgetLine.Hours := Hours;
      ServiceOrderBudgetLine.Amount := Amount;
      ServiceOrderBudgetLine."Service Location No." := ServiceLocationNo;
      ServiceOrderBudgetLine."Source Type" := ServiceOrderBudgetLine."Source Type"::Call;
      // jhoek.050511.begin
      ServiceOrderBudgetLine."Glazing Service Call No." := GlazingServiceCallNo;
      ServiceOrderBudgetLine."Glazing Service Call Line No." := GlazingServiceCallLineNo;
      // jhoek.050511.end
      ServiceOrderBudgetLine.CalcTotals;
      ServiceOrderBudgetLine.INSERT(TRUE);

      // Note: ServiceOrderBudgetLine_OnInsert sets Advised to false
      ServiceOrderBudgetLine.Advised := Advised;
      ServiceOrderBudgetLine.MODIFY;
    END;

    LOCAL PROCEDURE InsertAdviceOrderLine@1100525007(ServiceOrderNo@1100525002 : Code[20];VAR LineNo@1100525001 : Integer;ItemNo@1100525003 : Code[20];Quantity@1100525004 : Decimal;UnitOfMeasureCode@1100525005 : Code[10];Description@1100525006 : Text[50];Description2@1100525012 : Text[50];Price@1100525007 : Decimal;CostObjectCode@1100525008 : Code[20];CostType@1100525009 : Integer;SalesPrice@1100525010 : Decimal;ServiceContractNo@1100525011 : Code[20];VendorNo@1100525014 : Code[20]);
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
      AdviceOrderLine2@1100525013 : Record 11012055;
    BEGIN
      IF LineNo = 0 THEN BEGIN
        AdviceOrderLine2.SETRANGE("Record Type", AdviceOrderLine2."Record Type"::ServOrder);
        AdviceOrderLine2.SETRANGE("Project No.", '');
        AdviceOrderLine2.SETRANGE("Service Order No.", ServiceOrderNo);
        IF AdviceOrderLine2.FINDLAST THEN
          LineNo := AdviceOrderLine2."Line No.";
      END;

      LineNo := LineNo + 10000;

      AdviceOrderLine."Record Type" := AdviceOrderLine."Record Type"::ServOrder;
      AdviceOrderLine."Service Order No." := ServiceOrderNo;
      AdviceOrderLine."Line No." := LineNo;
      AdviceOrderLine."Item No." := ItemNo;
      AdviceOrderLine."Quantity (Advice)" := Quantity;
      AdviceOrderLine."Unit of Measure" := UnitOfMeasureCode;
      AdviceOrderLine.Description := Description;
      AdviceOrderLine."Description 2" := Description2;
      AdviceOrderLine.VALIDATE(Price, Price); //mg.c, 24-10-11: M29142
      AdviceOrderLine."Cost Object" := CostObjectCode;
      AdviceOrderLine."Cost Type" := CostType;
      AdviceOrderLine."Sales Price" := SalesPrice;
      AdviceOrderLine."Service Contract No." := ServiceContractNo;
      AdviceOrderLine.VALIDATE("Receipt Date", TODAY);
      AdviceOrderLine.VALIDATE("Order Date", TODAY);
      AdviceOrderLine.VALIDATE(Vendor, VendorNo);
      AdviceOrderLine.VALIDATE(Amount);
      // jhoek.050511.begin
      AdviceOrderLine."Glazing Service Call No." := GlazingServiceCallNo;
      AdviceOrderLine."Glazing Service Call Line No." := GlazingServiceCallLineNo;
      // jhoek.050511.end
      AdviceOrderLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertSvcOrderCostPlusEntry@1100525000(ServiceOrderNo@1100525001 : Code[20];VAR LineNo@1100525003 : Integer;Description@1100525006 : Text[50];Description2@1100525007 : Text[50];Quantity@1100525008 : Decimal;BasicPrice@1100525010 : Decimal;CostPrice@1100525011 : Decimal;SalesPrice@1100525002 : Decimal;ItemNo@1100525012 : Code[20];ServiceContractNo@1100525013 : Code[20];VATProdPostingGrp@1100525004 : Code[10];CostObject@1210190001 : Code[20]);
    VAR
      ServiceOrderCostPlusEntry@1100525000 : Record 11012825;
      ServiceOrderCostPlusEntry2@1100525005 : Record 11012825;
    BEGIN
      IF LineNo = 0 THEN BEGIN
        ServiceOrderCostPlusEntry2.SETRANGE("Service Order No.", ServiceOrderNo);
        IF ServiceOrderCostPlusEntry2.FINDLAST THEN
          LineNo := ServiceOrderCostPlusEntry2."Line No.";
      END;

      LineNo := LineNo + 10000;

      ServiceOrderCostPlusEntry.VALIDATE("Service Order No.", ServiceOrderNo);
      ServiceOrderCostPlusEntry."Line No." := LineNo;
      ServiceOrderCostPlusEntry.VALIDATE("Item No.", ItemNo);
      ServiceOrderCostPlusEntry.VALIDATE("Cost Object", CostObject);
      ServiceOrderCostPlusEntry.Description := Description;
      ServiceOrderCostPlusEntry."Description 2" := Description2;
      ServiceOrderCostPlusEntry.VALIDATE(Quantity, Quantity);
      ServiceOrderCostPlusEntry.VALIDATE("Basic Price (LCY)", BasicPrice);
      ServiceOrderCostPlusEntry.VALIDATE("Cost Price (LCY)", CostPrice);
      ServiceOrderCostPlusEntry.VALIDATE("Sales Price (LCY)", SalesPrice);
      ServiceOrderCostPlusEntry."Service Contract No." := ServiceContractNo;
      // jhoek.050511.begin
      ServiceOrderCostPlusEntry."Glazing Service Call No." := GlazingServiceCallNo;
      ServiceOrderCostPlusEntry."Glazing Service Call Line No." := GlazingServiceCallLineNo;
      // jhoek.050511.end
      ServiceOrderCostPlusEntry.INSERT(TRUE);

      // RFC 547 sn
      ServiceOrderCostPlusEntry.VALIDATE("VAT Prod. Posting Group", VATProdPostingGrp);
      //mg.sn, 20-09-11: M29245
      ServiceOrderCostPlusEntry.VALIDATE("Surcharge %", ServiceOrderCostPlusEntry.GetSurcharge);
      ServiceOrderCostPlusEntry.GetDiscountPerc;
      //mg.en, 20-09-11: M29245
      ServiceOrderCostPlusEntry.MODIFY;
      // RFC 547 sn
    END;

    LOCAL PROCEDURE CalculateStatus@1100525006(GlazingServiceCallNo@1100525000 : Code[20]) : Integer;
    VAR
      GlazingServiceCall@1100525002 : Record 11125777;
      GlazingServiceCallLine@1100525001 : Record 11125778;
    BEGIN
      GlazingServiceCallLine.SETCURRENTKEY("Glazing Service Call No.", "Service Order No.");
      GlazingServiceCallLine.SETRANGE("Glazing Service Call No.", GlazingServiceCallNo);
      GlazingServiceCallLine.SETRANGE("Service Order No.", '');

      CASE GlazingServiceCallLine.ISEMPTY OF
        TRUE: EXIT(GlazingServiceCall.Status::"In Progress");
        FALSE: EXIT(GlazingServiceCall.Status::Released);
      END;
    END;

    PROCEDURE SetGlazingServiceCallLine@1100525001(VAR GlazingServiceCallLine3@1100525000 : Record 11125778);
    BEGIN
      GlazingServiceCallLine2.COPY(GlazingServiceCallLine3);
    END;

    PROCEDURE SplitGlazServCallLineToVAT@1100525003(VAR TempGlazingServCallLine@1100525000 : TEMPORARY Record 11125778;VAR IGlazingServCallLine@1100525001 : Record 11125778;ICostPlusType@1210190000 : ' ,Removal,Mounting,Item,Assembly');
    VAR
      lvGlazingServCallLine@1100525002 : Record 11125778;
      TempVatProdPostingGroup@1100525003 : TEMPORARY Record 324;
      GlazingServiceCallActivity@1100525005 : Record 11125781;
      GlazingServiceCallAssembly@1100525004 : Record 11125779;
      GlazingServiceCall@1100525007 : Record 11125777;
      VATPostingSetup@1100525008 : Record 325;
      LineNo@1100525006 : Integer;
    BEGIN
      // RFC 547
      lvGlazingServCallLine.COPYFILTERS(IGlazingServCallLine);
      TempGlazingServCallLine.RESET;
      TempGlazingServCallLine.DELETEALL;

      LineNo := 10000;
      IF lvGlazingServCallLine.FINDSET THEN BEGIN
        GlazingServiceCall.GET(lvGlazingServCallLine."Glazing Service Call No.");
        REPEAT
          TempVatProdPostingGroup.DELETEALL;
          IF ICostPlusType IN [ICostPlusType::" ", ICostPlusType::Item] THEN BEGIN
            TempVatProdPostingGroup.Code := lvGlazingServCallLine."VAT Prod. Posting Group Item";
            TempVatProdPostingGroup.INSERT;
          END;

          IF ICostPlusType IN [ICostPlusType::" ", ICostPlusType::Removal, ICostPlusType::Mounting] THEN BEGIN
            GlazingServiceCallActivity.SETRANGE("Glazing Service Call No.", lvGlazingServCallLine."Glazing Service Call No.");
            GlazingServiceCallActivity.SETRANGE("Glazing Service Call Line No.", lvGlazingServCallLine."Line No.");
            IF ICostPlusType <> ICostPlusType::" " THEN
              GlazingServiceCallActivity.SETRANGE(Type, ICostPlusType);
            IF GlazingServiceCallActivity.FINDSET THEN BEGIN
              REPEAT
                TempVatProdPostingGroup.Code := GlazingServiceCallActivity."Labor VAT Prod. Post. Grp";
                IF TempVatProdPostingGroup.INSERT THEN;
                TempVatProdPostingGroup.Code := GlazingServiceCallActivity."Material VAT Prod. Post. Grp";
                IF TempVatProdPostingGroup.INSERT THEN;
                TempVatProdPostingGroup.Code := GlazingServiceCallActivity."Subcontr. VAT Prod. Post. Grp";
                IF TempVatProdPostingGroup.INSERT THEN;
                TempVatProdPostingGroup.Code := GlazingServiceCallActivity."Plant VAT Prod. Post. Grp";
                IF TempVatProdPostingGroup.INSERT THEN;
              UNTIL GlazingServiceCallActivity.NEXT = 0;
            END;
          END;

          IF ICostPlusType IN [ICostPlusType::" ", ICostPlusType::Assembly] THEN BEGIN
            GlazingServiceCallAssembly.SETRANGE("Glazing Service Call No.", lvGlazingServCallLine."Glazing Service Call No.");
            GlazingServiceCallAssembly.SETRANGE("Glazing Service Call Line No.", lvGlazingServCallLine."Line No.");
            IF GlazingServiceCallAssembly.FINDSET THEN BEGIN
              REPEAT
                TempVatProdPostingGroup.Code := GlazingServiceCallAssembly."VAT Prod. Posting Group";
                IF TempVatProdPostingGroup.INSERT THEN;
              UNTIL GlazingServiceCallAssembly.NEXT = 0;
            END;
          END;

          IF TempVatProdPostingGroup.FINDSET THEN BEGIN
            REPEAT
              IF NOT VATPostingSetup.GET(GlazingServiceCall."VAT Bus. Posting Group", TempVatProdPostingGroup.Code) THEN
                VATPostingSetup.INIT;

              TempGlazingServCallLine.TRANSFERFIELDS(lvGlazingServCallLine);

              TempGlazingServCallLine."Line No." := LineNo;
              LineNo += 10000;

              IF TempGlazingServCallLine."VAT Prod. Posting Group Item" <> TempVatProdPostingGroup.Code THEN BEGIN
                TempGlazingServCallLine."Item Sales Amount" := 0;
                TempGlazingServCallLine."Item Sales VAT Amount" := 0;
                TempGlazingServCallLine."Item Sales Amount incl. VAT" := 0;
                TempGlazingServCallLine."Item Sales Price" := 0;
                TempGlazingServCallLine."Item No." := '';
              END;

              TempGlazingServCallLine."Active VAT Prod. Posting Group" := TempVatProdPostingGroup.Code;
              TempGlazingServCallLine."Original Line No." :=  lvGlazingServCallLine."Line No.";
              TempGlazingServCallLine."VAT % Item" := VATPostingSetup."VAT %";
              TempGlazingServCallLine.INSERT;

            UNTIL TempVatProdPostingGroup.NEXT =0 ;
          END;
        UNTIL lvGlazingServCallLine.NEXT = 0;
      END;
    END;

    PROCEDURE MakeServiceOrderBaseOrder@1210190003(ServiceOrderNo@1210190000 : Code[20]);
    VAR
      ServiceOrder@1210190001 : Record 11012823;
    BEGIN
      //mg, 25-07-11: M23885
      IF ServiceOrder.GET(ServiceOrderNo) THEN
        IF NOT ServiceOrder."Base Service Order" THEN BEGIN
          ServiceOrder.VALIDATE("Base Service Order", TRUE);
          ServiceOrder."Collect Invoices By" := ServiceOrder."Collect Invoices By"::BaseOrder;
          ServiceOrder.MODIFY(TRUE);
        END;
    END;

    PROCEDURE GetGlazingActivityDescription@1210190000(IGlazingActivityCode@1210190001 : Code[10]) : Text[50];
    VAR
      GlazingActivity@1210190000 : Record 11125768;
    BEGIN
      IF GlazingActivity.GET(IGlazingActivityCode) THEN
        EXIT(GlazingActivity.Description);
    END;

    BEGIN
    END.
  }
}

