OBJECT Codeunit 11126046 Hour Portal WS (HPT)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            TestArr@1100409000 : ARRAY [100] OF Code[20];
          BEGIN
            //ReleaseAllSiteMgtHourLines(2015, 7, 'Stream Systems Ltd.', '4075');
            //ReopenAllSiteMgtHourLines(2014, 46, 'Stream Systems Ltd.', '107246');
            //MESSAGE('CopyHoursEmployee: %1', CopyHoursEmployee(2015, 8, '4075', 2015, 22, false));
            //CopyHoursEmployee(2015, 8, '4075', 2015, 26, false);
            //TestArr[1] := '1000';
            //TestArr[2] := '1130';
            //CopyHoursEmployees(2015, 3, '1000', 2015, 3, TestArr, true);
            //CopyHoursEmployee(2015, 8, '4075', 2015, 8, false);
          END;

  }
  CODE
  {
    VAR
      OK@1100528000 : TextConst 'ENU=ok';
      Text000@1100528001 : TextConst 'ENU=Error: Hour Header not found.';
      Text001@1100528002 : TextConst 'ENU=Error: Hour Line not found.';
      Text002@1100528003 : TextConst 'ENU=FromWeek is not valid.';
      Text003@1100528004 : TextConst 'ENU=FromYear is not valid.';
      Text004@1100528005 : TextConst 'ENU=ToWeek is not valid.';
      Text005@1100528006 : TextConst 'ENU=ToYear is not valid.';
      Text006@1100528007 : TextConst 'ENU=ToEmployees is not valid.';
      Text007@1100525000 : TextConst 'ENU=Company is not valid';

    PROCEDURE ReleaseAllSiteMgtHourLines@1100528300(Year@1100528300 : Integer;Week@1100528302 : Integer;SupplyingCompany@1100528303 : Text[30];EmployeeNo@1100528304 : Code[20]) : Text;
    BEGIN
      EXIT(ChangeStatusAllSiteMgtHourLines(1, Year, Week, SupplyingCompany, EmployeeNo));
    END;

    PROCEDURE ReleaseOneSiteMgtHourLine@1100528301(Year@1100528303 : Integer;Week@1100528302 : Integer;SupplyingCompany@1100528301 : Text[30];EmployeeNo@1100528300 : Code[20];LineNo@1100528304 : Integer) : Text;
    BEGIN
      EXIT(ChangeStatusOneSiteMgtHourLine(1, Year, Week, SupplyingCompany, EmployeeNo, LineNo));
    END;

    PROCEDURE ReopenAllSiteMgtHourLines@1100528303(Year@1100528300 : Integer;Week@1100528302 : Integer;SupplyingCompany@1100528303 : Text[30];EmployeeNo@1100528304 : Code[20]) : Text;
    VAR
      SiteMngmntHoursHeader@1100528301 : Record 11012360;
    BEGIN
      EXIT(ChangeStatusAllSiteMgtHourLines(2, Year, Week, SupplyingCompany, EmployeeNo));
    END;

    PROCEDURE ReopenOneSiteMgtHourLine@1100528302(Year@1100528303 : Integer;Week@1100528302 : Integer;SupplyingCompany@1100528301 : Text[30];EmployeeNo@1100528300 : Code[20];LineNo@1100528304 : Integer) : Text;
    VAR
      SiteMngmntHoursLine@1100528305 : Record 11012361;
    BEGIN
      EXIT(ChangeStatusOneSiteMgtHourLine(2, Year, Week, SupplyingCompany, EmployeeNo, LineNo));
    END;

    LOCAL PROCEDURE ChangeStatusAllSiteMgtHourLines@1100528304(Status@1100528305 : Option;Year@1100528300 : Integer;Week@1100528302 : Integer;SupplyingCompany@1100528303 : Text[30];EmployeeNo@1100528304 : Code[20]) : Text;
    VAR
      SiteMngmntHoursHeader@1100528301 : Record 11012360;
      SiteMngmntHoursLine@1100409000 : Record 11012361;
    BEGIN
      IF (NOT SiteMngmntHoursHeader.GET(Year, Week, SupplyingCompany, EmployeeNo)) THEN
        EXIT(Text000);

      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", SupplyingCompany);
      SiteMngmntHoursLine.SETRANGE("Employee No.", EmployeeNo);

      CASE Status OF
        1: SiteMngmntHoursLine.SETFILTER(Status, '%1|%2', SiteMngmntHoursLine.Status::Open, SiteMngmntHoursLine.Status::Rejected);
        2: SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Released);
      END;

      IF (SiteMngmntHoursLine.FINDSET) THEN BEGIN
        REPEAT
          ReleaseOneSiteMgtHourLine(SiteMngmntHoursLine.Year, SiteMngmntHoursLine.Week, SiteMngmntHoursLine."Supplying Company",
            SiteMngmntHoursLine."Employee No.", SiteMngmntHoursLine."Line No.");
        UNTIL (SiteMngmntHoursLine.NEXT = 0);
      END;

      EXIT(OK);
    END;

    LOCAL PROCEDURE ChangeStatusOneSiteMgtHourLine@1100528305(Status@1100528306 : Option;Year@1100528303 : Integer;Week@1100528302 : Integer;SupplyingCompany@1100528301 : Text[30];EmployeeNo@1100528300 : Code[20];LineNo@1100528304 : Integer) : Text;
    VAR
      SiteMngmntHoursLine@1100528305 : Record 11012361;
    BEGIN
      IF (NOT SiteMngmntHoursLine.GET(Year, Week, SupplyingCompany, EmployeeNo, LineNo)) THEN
        EXIT(Text001);

      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", SupplyingCompany);
      SiteMngmntHoursLine.SETRANGE("Employee No.", EmployeeNo);
      SiteMngmntHoursLine.SETRANGE("Line No.", LineNo);

      CASE Status OF
        1: SiteMngmntHoursLine.Release;
        2: SiteMngmntHoursLine.Reopen;
      END;

      EXIT(OK);
    END;

    PROCEDURE CopyHoursEmployees@1100528307(FromYear@1100528301 : Integer;FromWeek@1100528302 : Integer;FromEmployee@1100528300 : Code[20];ToYear@1100528303 : Integer;ToWeek@1100528304 : Integer;ToEmployees@1100528305 : ARRAY [100] OF Code[20];AutoReleaseLines@1100409000 : Boolean) : Text;
    VAR
      Employee@1100528306 : Record 5200;
      Counter@1100528307 : Integer;
    BEGIN
      IF (FromWeek < 1) OR (FromWeek > 53) THEN
        ERROR(Text002);
      IF (FromYear < 2000) OR (FromYear > 2099) THEN
        ERROR(Text003);
      IF (ToWeek < 1) OR (ToWeek > 53) THEN
        ERROR(Text004);
      IF (ToYear < 2000) OR (ToYear > 2099) THEN
        ERROR(Text005);
      Employee.GET(FromEmployee);
      FOR Counter := 1 TO ARRAYLEN(ToEmployees) DO BEGIN
        IF (ToEmployees[Counter] <> '') THEN BEGIN
          Employee.GET(ToEmployees[Counter]);
        END;
      END;
      IF (Counter < 1) OR (Counter > 100) THEN
        ERROR(Text006);

      //process
      FOR Counter := 1 TO ARRAYLEN(ToEmployees) DO BEGIN
        IF (ToEmployees[Counter] <> '') THEN BEGIN
          CopySiteMgtHoursHeader(FromYear, FromWeek, COMPANYNAME, FromEmployee, ToYear, ToWeek, ToEmployees[Counter]);
          CopySiteMgtHoursLines(FromYear, FromWeek, COMPANYNAME, FromEmployee, ToYear, ToWeek, ToEmployees[Counter]);
          IF (AutoReleaseLines) THEN
            ReleaseAllSiteMgtHourLines(ToYear, ToWeek, COMPANYNAME, ToEmployees[Counter]);
        END;
      END;

      EXIT(OK);
    END;

    PROCEDURE CopyHoursEmployee@1100528306(FromYear@1100528304 : Integer;FromWeek@1100528303 : Integer;FromEmployee@1100528302 : Code[20];ToYear@1100528301 : Integer;ToWeek@1100528300 : Integer;AutoReleaseLines@1100409000 : Boolean) : Text;
    VAR
      ToEmployees@1100528305 : ARRAY [100] OF Code[20];
    BEGIN
      ToEmployees[1] := FromEmployee;
      EXIT(CopyHoursEmployees(FromYear, FromWeek, FromEmployee, ToYear, ToWeek, ToEmployees, AutoReleaseLines));
    END;

    LOCAL PROCEDURE CopySiteMgtHoursHeader@1100409000(FromYear@1100409005 : Integer;FromWeek@1100409004 : Integer;FromCompanyName@1100409006 : Text;FromEmployee@1100409003 : Code[20];ToYear@1100409002 : Integer;ToWeek@1100409001 : Integer;ToEmployee@1100409000 : Code[20]);
    VAR
      SiteMgtHoursHeaderFrom@1100409009 : Record 11012360;
      SiteMgtHoursHeaderTo@1100409007 : Record 11012360;
    BEGIN
      IF (NOT SiteMgtHoursHeaderFrom.GET(FromYear, FromWeek, FromCompanyName, FromEmployee)) THEN
        ERROR(Text000);

      SiteMgtHoursHeaderTo.COPY(SiteMgtHoursHeaderFrom);
      SiteMgtHoursHeaderTo.Year := ToYear;
      SiteMgtHoursHeaderTo.Week := ToWeek;
      SiteMgtHoursHeaderTo."Employee No." := ToEmployee;
      SiteMgtHoursHeaderTo.Status := SiteMgtHoursHeaderTo.Status::Open;
      IF (SiteMgtHoursHeaderTo.INSERT(TRUE)) THEN;
    END;

    LOCAL PROCEDURE CopySiteMgtHoursLines@1100409001(FromYear@1100409006 : Integer;FromWeek@1100409005 : Integer;FromCompanyName@1100409004 : Text;FromEmployee@1100409003 : Code[20];ToYear@1100409002 : Integer;ToWeek@1100409001 : Integer;ToEmployee@1100409000 : Code[20]);
    VAR
      SiteMgtHoursHeader@1100409007 : Record 11012360;
      SiteMgtHoursLineFrom@1100409008 : Record 11012361;
      SiteMgtHoursLineTo@1100409009 : Record 11012361;
      TempSiteMgtHoursLine@1100409010 : TEMPORARY Record 11012361;
    BEGIN
      SiteMgtHoursLineFrom.SETRANGE(Year, FromYear);
      SiteMgtHoursLineFrom.SETRANGE(Week, FromWeek);
      SiteMgtHoursLineFrom.SETRANGE("Supplying Company", FromCompanyName);
      SiteMgtHoursLineFrom.SETRANGE("Employee No.", FromEmployee);
      IF (NOT SiteMgtHoursLineFrom.FINDSET) THEN
        EXIT;

      SiteMgtHoursHeader.GET(FromYear, FromWeek, FromCompanyName, FromEmployee);
      REPEAT
        SiteMgtHoursLineTo.COPY(SiteMgtHoursLineFrom);
        SiteMgtHoursLineTo.Year := ToYear;
        SiteMgtHoursLineTo.Week := ToWeek;
        SiteMgtHoursLineTo."Employee No." := ToEmployee;
        SiteMgtHoursLineTo."Line No." := SiteMgtHoursLineTo.GetLastLineNo + 10000;
        SiteMgtHoursLineTo.Status := SiteMgtHoursLineTo.Status::Open;
        SiteMgtHoursLineTo."Reject Text" := '';
        SiteMgtHoursLineTo.INSERT(TRUE);

        TempSiteMgtHoursLine.COPY(SiteMgtHoursLineTo);
        TempSiteMgtHoursLine.INSERT;
      UNTIL (SiteMgtHoursLineFrom.NEXT = 0);

      TempSiteMgtHoursLine.RESET;
      ResetGUIDCopiedSiteMgtHoursLines(TempSiteMgtHoursLine);
    END;

    LOCAL PROCEDURE ResetGUIDCopiedSiteMgtHoursLines@1100409002(VAR TempSiteMgtHoursLine@1100409001 : TEMPORARY Record 11012361);
    VAR
      SiteMgtHoursLine@1100409009 : Record 11012361;
      NewGuid@1100409000 : GUID;
    BEGIN
      TempSiteMgtHoursLine.SETFILTER("Hour Portal Link Guid", '<>%1', '');
      IF (NOT TempSiteMgtHoursLine.FINDSET) THEN
        EXIT;

      REPEAT
        NewGuid := CREATEGUID;
        SiteMgtHoursLine.SETRANGE(Year, TempSiteMgtHoursLine.Year);
        SiteMgtHoursLine.SETRANGE(Week, TempSiteMgtHoursLine.Week);
        SiteMgtHoursLine.SETRANGE("Supplying Company", TempSiteMgtHoursLine."Supplying Company");
        SiteMgtHoursLine.SETRANGE("Employee No.", TempSiteMgtHoursLine."Employee No.");
        SiteMgtHoursLine.SETRANGE("Hour Portal Link Guid", TempSiteMgtHoursLine."Hour Portal Link Guid");
        SiteMgtHoursLine.MODIFYALL("Hour Portal Link Guid", NewGuid);
      UNTIL (TempSiteMgtHoursLine.NEXT = 0);
    END;

    PROCEDURE UserIsConcenter@1100525000(UserId@1100525004 : Text) : Boolean;
    VAR
      Job@1100525000 : Record 11072003;
      SiteMngmntHoursSetup@1100525001 : Record 11012355;
      HoursConsentSetup@1100525002 : Record 11020436;
      UserSetup@1100525003 : Record 91;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF (NOT SiteMngmntHoursSetup."Consent Hours") THEN
        EXIT(FALSE);

      HoursConsentSetup.SETRANGE(Consenter, UserId);
      IF (HoursConsentSetup.FINDFIRST) THEN
        EXIT(TRUE);

      HoursConsentSetup.SETRANGE(Consenter);
      HoursConsentSetup.SETRANGE("Consenter Denied Lines", UserId);
      IF (HoursConsentSetup.FINDFIRST) THEN
        EXIT(TRUE);

      HoursConsentSetup.SETRANGE("Consenter Denied Lines");
      HoursConsentSetup.SETFILTER(Consenter, '<>%1', '');
      IF (NOT HoursConsentSetup.FINDFIRST) THEN BEGIN
        IF (NOT UserSetup.GET(UserId)) THEN
          UserSetup.INIT;
        Job.SETRANGE("Project Manager", UserSetup."Employee No.");
        IF (Job.FINDFIRST) THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FillNonWorkDays@1100525001(Year@1100525000 : Integer;Week@1100525001 : Integer;EmployeeNo@1100525002 : Code[20]) : Text;
    VAR
      SiteMngmntHoursHeader@1100525003 : Record 11012360;
    BEGIN
      SiteMngmntHoursHeader.GET(Year, Week, COMPANYNAME, EmployeeNo);
      SiteMngmntHoursHeader.AddNonWorkingDays(TRUE);
      EXIT('ok');
    END;

    PROCEDURE AddNonWorkingDays@1100525004(Year@1100528300 : Integer;Week@1100528302 : Integer;SupplyingCompany@1100528303 : Text[30];EmployeeNo@1100528304 : Code[20]) : Boolean;
    VAR
      SiteMngmntHoursHeader@1100525000 : Record 11012360;
    BEGIN
      IF SupplyingCompany <> COMPANYNAME THEN
        ERROR(Text007);

      IF NOT SiteMngmntHoursHeader.GET(Year, Week, SupplyingCompany, EmployeeNo) THEN BEGIN
        SiteMngmntHoursHeader.INIT;
        SiteMngmntHoursHeader.VALIDATE(Year,Year);
        SiteMngmntHoursHeader.VALIDATE(Week,Week);
        SiteMngmntHoursHeader.VALIDATE("Supplying Company",SupplyingCompany);
        SiteMngmntHoursHeader.VALIDATE("Employee No.", EmployeeNo);
        SiteMngmntHoursHeader.INSERT(TRUE);
      END;

      SiteMngmntHoursHeader.AddNonWorkingDays(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE ConsentConsentLines@1100525002(Consent_Consenter@1100525000 : Text;Reject@1100525013 : Boolean;Consent_Company@1100525008 : ARRAY [25] OF Text;Consent_Year@1100525005 : ARRAY [25] OF Integer;Consent_Week@1100525010 : ARRAY [25] OF Integer;Consent_Employee@1100525009 : ARRAY [25] OF Text;Consent_LineNo@1100525007 : ARRAY [25] OF Integer;Consent_RejectTxt@1100525011 : Text;VAR ActionOK@1100525003 : ARRAY [25] OF Boolean;VAR ActionMessage@1100525004 : ARRAY [25] OF Text);
    VAR
      SiteMngmntHoursLine@1100525012 : Record 11012361;
      ArrayLine@1100525001 : Integer;
      Result@1100525002 : Text;
      GoReject@1100525006 : Boolean;
      GoConsent@1100525014 : Boolean;
    BEGIN
      GoConsent := NOT Reject;
      GoReject := Reject;
      FOR ArrayLine := 1 TO 25 DO
        BEGIN
          IF (Consent_Year[ArrayLine] <> 0) AND (Consent_Week[ArrayLine] <> 0) THEN BEGIN
            IF SiteMngmntHoursLine.GET(Consent_Year[ArrayLine], Consent_Week[ArrayLine], Consent_Company[ArrayLine], Consent_Employee[ArrayLine], Consent_LineNo[ArrayLine]) THEN BEGIN
              ProcessHourLine(SiteMngmntHoursLine, GoConsent, GoReject, Consent_RejectTxt);
              ActionOK[ArrayLine] := TRUE;
            END ELSE BEGIN
              ActionOK[ArrayLine] := FALSE;
              ActionMessage[ArrayLine]:= STRSUBSTNO('Hour Line Not Found: %1, %2, %3 , %4, %5', Consent_Year[ArrayLine], Consent_Week[ArrayLine], Consent_Company[ArrayLine], Consent_Employee[ArrayLine], Consent_LineNo[ArrayLine]);
            END;
          END;
        END;
    END;

    PROCEDURE ProcessHourLine@1100528315(VAR SiteMngmntHoursLine@1100525000 : Record 11012361;IConsent@1100525001 : Boolean;IReject@1100525002 : Boolean;IRejecttxt@1100525003 : Text[250]);
    BEGIN
      UpdateConsentLines(SiteMngmntHoursLine, IConsent, IReject);
      IF (SiteMngmntHoursLine."Hour Portal Link Guid" <> '') THEN
        ProcessHourPortalLinkedLines(SiteMngmntHoursLine, IConsent, IReject, IRejecttxt);

      SiteMngmntHoursLine.GET(SiteMngmntHoursLine.Year, SiteMngmntHoursLine.Week, SiteMngmntHoursLine."Supplying Company",
        SiteMngmntHoursLine."Employee No.", SiteMngmntHoursLine."Line No.");
      IF (IReject) AND (SiteMngmntHoursLine.Status = SiteMngmntHoursLine.Status::Rejected) THEN BEGIN
        SiteMngmntHoursLine."Reject Text" := IRejecttxt;
        SiteMngmntHoursLine.MODIFY(TRUE);
      END;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateConsentLines@1100528314(SiteMngmntHoursLine@1100528302 : Record 11012361;InputConsent@1100528300 : Boolean;InputReject@1100528303 : Boolean);
    VAR
      HoursConsentLine@1100528301 : Record 11020437;
    BEGIN
      HoursConsentLine.SETRANGE(Year, SiteMngmntHoursLine.Year);
      HoursConsentLine.SETRANGE(Week, SiteMngmntHoursLine.Week);
      HoursConsentLine.SETRANGE(Employee, SiteMngmntHoursLine."Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
      CASE SiteMngmntHoursLine.Type OF
        SiteMngmntHoursLine.Type::Project:
          HoursConsentLine.SETRANGE(Type, HoursConsentLine.Type::Project);
        SiteMngmntHoursLine.Type::Service:
          HoursConsentLine.SETRANGE(Type, HoursConsentLine.Type::Service);
        SiteMngmntHoursLine.Type::Indirect:
          HoursConsentLine.SETRANGE(Type, HoursConsentLine.Type::Indirect);
        SiteMngmntHoursLine.Type::Plant:
          HoursConsentLine.SETRANGE(Type, HoursConsentLine.Type::Plant);
        //SiteMngmntHoursLine.Type::UnmannedPlant:
        ELSE
          HoursConsentLine.SETRANGE(Type, 99); //don't find anything
      END;
      HoursConsentLine.SETRANGE("No.", SiteMngmntHoursLine."Object No.");
      HoursConsentLine.SETRANGE("Line No.", SiteMngmntHoursLine."Line No.");
      HoursConsentLine.SETRANGE(Denied, FALSE);
      HoursConsentLine.SETRANGE(Consent, FALSE);
      HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Site Mngmnt. Hours");
      HoursConsentLine.SETRANGE("Supplying Company", SiteMngmntHoursLine."Supplying Company");
      HoursConsentLine.SETRANGE(Rejected, FALSE);
      IF (HoursConsentLine.FINDSET(TRUE, TRUE)) THEN BEGIN
        REPEAT
          IF (InputConsent) THEN BEGIN
            HoursConsentLine."Input Reject" := FALSE;
            HoursConsentLine."Input Deny" := FALSE;
            HoursConsentLine."Input Consent" := TRUE;
            HoursConsentLine."Consent By" := HoursConsentLine.Consenter;
            HoursConsentLine.MODIFY(TRUE);
            HoursConsentLine.ProcessNormalLines;
          END;
          IF (InputReject) THEN BEGIN
            HoursConsentLine."Input Consent" := FALSE;
            HoursConsentLine."Input Deny" := FALSE;
            HoursConsentLine."Input Reject" := TRUE;
            HoursConsentLine."Rejected By" := HoursConsentLine.Consenter;
            HoursConsentLine.MODIFY(TRUE);
            HoursConsentLine.ProcessNormalLines;
          END;
        UNTIL (HoursConsentLine.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE ProcessHourPortalLinkedLines@1100528313(SiteMngmntHoursLine@1100528301 : Record 11012361;InputConsent@1100528303 : Boolean;InputReject@1100528302 : Boolean;InputRejectText@1100528305 : Text[250]);
    VAR
      SiteMngmntHoursLine2@1100528300 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine2.SETRANGE(Year, SiteMngmntHoursLine.Year);
      SiteMngmntHoursLine2.SETRANGE(Week, SiteMngmntHoursLine.Week);
      SiteMngmntHoursLine2.SETRANGE("Supplying Company", SiteMngmntHoursLine."Supplying Company");
      SiteMngmntHoursLine2.SETRANGE("Employee No.", SiteMngmntHoursLine."Employee No.");
      SiteMngmntHoursLine2.SETFILTER("Line No.", '<>%1', SiteMngmntHoursLine."Line No.");
      SiteMngmntHoursLine2.SETRANGE("Hour Portal Link Guid", SiteMngmntHoursLine."Hour Portal Link Guid");
      IF (NOT SiteMngmntHoursLine2.FINDSET) THEN
        EXIT;

      REPEAT
        UpdateConsentLines(SiteMngmntHoursLine2, InputConsent, InputReject);

        SiteMngmntHoursLine2.GET(SiteMngmntHoursLine2.Year, SiteMngmntHoursLine2.Week, SiteMngmntHoursLine2."Supplying Company",
          SiteMngmntHoursLine2."Employee No.", SiteMngmntHoursLine2."Line No.");
        IF (InputReject) AND (SiteMngmntHoursLine2.Status = SiteMngmntHoursLine2.Status::Rejected) THEN BEGIN
          SiteMngmntHoursLine2."Reject Text" := InputRejectText;
          SiteMngmntHoursLine2.MODIFY(TRUE);
        END;
      UNTIL (SiteMngmntHoursLine2.NEXT = 0);
    END;

    PROCEDURE GetCompanyLogo@1100525003(HourPortalCompanyData@1100525001 : Record 11125874;VAR CompanyLogo@1100525005 : BigText);
    VAR
      InStr@1100525002 : InStream;
      DotNetSystemConvert@1100525009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      DotNetSystemArray@1100525008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      DotNetSystemMemoryStream@1100525006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      HourPortalCompanyData.CALCFIELDS("Company Logo");
      IF NOT HourPortalCompanyData."Company Logo".HASVALUE THEN
        EXIT;

      HourPortalCompanyData."Company Logo".CREATEINSTREAM(InStr);
      DotNetSystemMemoryStream := DotNetSystemMemoryStream.MemoryStream();  //Constructor

      COPYSTREAM(DotNetSystemMemoryStream,InStr);

      DotNetSystemArray := DotNetSystemMemoryStream.GetBuffer();  //(maybe ToArray  should be used)

      CompanyLogo.ADDTEXT(DotNetSystemConvert.ToBase64String(DotNetSystemArray));

      DotNetSystemMemoryStream.Dispose;
    END;

    BEGIN
    END.
  }
}

