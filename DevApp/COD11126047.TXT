OBJECT Codeunit 11126047 Load 4PS HPT License
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012357=rid,
                TableData 11012449=rim;
    OnRun=VAR
            NoOfUsers@1100525000 : Integer;
          BEGIN
            CheckHashLicenseCreator();
            NoOfUsers := LoadHPTLicense();
            AlignUsersWithLicense();
            MESSAGE(Text006, NoOfUsers);
          END;

  }
  CODE
  {
    VAR
      Text003@1100525003 : TextConst 'ENU=The version of the 4PS Hour Portal License Validator is not correct. Contact 4PS Support.';
      Text005@1100525004 : TextConst 'ENU=Select a license file for 4PS Hour Portal';
      Text006@1100525006 : TextConst 'ENU=The license file for 4PS Hour Portal is succesfully loaded. Number of users: %1.';
      Text008@1100525000 : TextConst 'ENU="The license file for 4PS Hour Portal allows %1 users. "';

    LOCAL PROCEDURE LoadHPTLicense@1100525000() : Integer;
    VAR
      ConstructCustomLicense@1100525001 : Record 11012449;
      FileMgt@1100525006 : Codeunit 419;
      NoOfUsers@1100525002 : Integer;
      LicenseValidator@1100525003 : DotNet "'_4PS.LicenseValidator, Version=1.0.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'._4PS.LicenseValidator.Validator" RUNONCLIENT;
      FileName@1100525000 : Text[500];
      FilterText@1100525007 : Text;
    BEGIN
      LicenseValidator := LicenseValidator.Validator('_4PS.HPT.Web');

      FilterText := FileMgt.GetToFilterText('', '.lic');
      FileName := FileMgt.OpenFileDialog(Text005, '', FilterText);
      IF FileName = '' THEN
        EXIT;
      LicenseValidator.LoadLicense(FileName);

      NoOfUsers := LicenseValidator.GetConcurrentUsers();
      IF ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS HPT") THEN BEGIN
        ConstructCustomLicense."Number of Licenses" := NoOfUsers;
        ConstructCustomLicense.Hash := GetHashOfUsers(NoOfUsers);
        ConstructCustomLicense.MODIFY(TRUE);
      END ELSE BEGIN
        ConstructCustomLicense."Licence Type" := ConstructCustomLicense."Licence Type"::"4PS HPT";
        ConstructCustomLicense."Number of Licenses" := NoOfUsers;
        ConstructCustomLicense.Hash := GetHashOfUsers(NoOfUsers);
        ConstructCustomLicense.INSERT(TRUE);
      END;
      EXIT(NoOfUsers);
    END;

    LOCAL PROCEDURE CheckHashLicenseCreator@1100525002();
    VAR
      TempBlob@1100525002 : Record 99008535;
      LicenseValidator@1100525015 : DotNet "'_4PS.LicenseValidator, Version=1.0.0.0, Culture=neutral, PublicKeyToken=284c6828aa038142'._4PS.LicenseValidator.Validator" RUNONCLIENT;
      IStream@1100525007 : InStream;
      EncryptionMgt@1100525000 : Codeunit 824;
      FileMgt@1100525014 : Codeunit 419;
      Base64String@1100525016 : Text;
      LicenseValidatorFileName@1100525005 : Text[250];
      PartOfBase64String@1100525006 : Text[1024];
      Hash@1100525003 : ARRAY [50] OF Text[100];
      HashReference@1100525009 : ARRAY [50] OF Text[100];
      I@1100525013 : Integer;
      StartPos@1100525017 : Integer;
    BEGIN
      LicenseValidator := LicenseValidator.Validator('_4PS.HPT.Web');
      LicenseValidatorFileName := LicenseValidator.GetType.Assembly.Location;

      FileMgt.BLOBImport4PS(TempBlob, LicenseValidatorFileName, FALSE);
      TempBlob.Blob.CREATEINSTREAM(IStream);
      Base64EncodeStream(IStream, Base64String);

      HashReference[1] := '97112d45d102b462e16a8064eb21b75e';
      HashReference[2] := '54a9f9d2dea717cf4d97cd6d1c2111d3';
      HashReference[3] := 'bcf0e78fbee177a3eedea3f93ef02d19';
      HashReference[4] := '4c4e0aaf7b040edb1ed86db397625e36';
      HashReference[5] := '3e11549d5d694650ccf8f8aecbfa6d6e';
      HashReference[6] := '9c3b4429dfe2458057d1d72382ec1f35';
      HashReference[7] := '9757f1dc7e4d839b0b27a34cf074a9ca';
      HashReference[8] := 'cccc42066c75b6d5793ce0f71a50734c';
      HashReference[9] := '246e4013c9af125849279545f15e05ec';
      HashReference[10] := '544836b05275046a9c68d7e0003d2263';
      HashReference[11] := '8ded427b270b4a22ea096d07a9b53ec5';
      HashReference[12] := '6781cd3a75cd474a2c9f4e95fe40af33';
      HashReference[13] := '2b1bd65c763a9e5f570e6518a526ccd9';
      HashReference[14] := 'd08bc335ae9e7e65a8c8a96eeefaf705';
      HashReference[15] := '817965d31021b47e2b555dcd6f97f506';
      HashReference[16] := 'd457b0ed538c5d113d0f35a7e8d07f28';
      HashReference[17] := 'cf0d0a2b51633cc9720dedd2eecba6d0';
      HashReference[18] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[19] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[20] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[21] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[22] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[23] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[24] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[25] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[26] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[27] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[28] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[29] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[30] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[31] := 'd47b127bc2de2d687ddc82dac354c415';
      HashReference[32] := 'd47b127bc2de2d687ddc82dac354c415';

      I := 1;
      StartPos := 1;
      WHILE StartPos < STRLEN(Base64String) DO BEGIN
        PartOfBase64String := COPYSTR(Base64String, StartPos, MAXSTRLEN(PartOfBase64String));
        IF PartOfBase64String <> '' THEN BEGIN
          Hash[I] := EncryptionMgt.CalculateStringMD5(PartOfBase64String);
          IF Hash[I] <> HashReference[I] THEN
            ERROR(Text003);
        END;

        I := I + 1;
        StartPos := StartPos + MAXSTRLEN(PartOfBase64String);
      END;
    END;

    LOCAL PROCEDURE Base64EncodeStream@1100525003(VAR IStream@1100525000 : InStream;VAR Base64String@1100525001 : Text);
    VAR
      MemoryStream@1100525008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Bytes@1100525007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@1100525006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      MemoryStream := MemoryStream.MemoryStream;
      COPYSTREAM(MemoryStream, IStream);
      Bytes := MemoryStream.GetBuffer;
      Base64String := Convert.ToBase64String(Bytes);
    END;

    LOCAL PROCEDURE GetHashOfUsers@1100525001(NumberOfUsers@1100525000 : Integer) : Text[32];
    VAR
      EncryptionMgt@1100525001 : Codeunit 824;
      UsersString@1100525002 : Text[100];
    BEGIN
      UsersString := STRSUBSTNO('Dit is de sleutel!%1', NumberOfUsers);
      EXIT(EncryptionMgt.CalculateStringMD5(UsersString));
    END;

    PROCEDURE IsLicenseValid@1210190135() : Boolean;
    VAR
      CustomLicense@1210190000 : Record 11012449;
      Hash@1210190001 : Text[32];
    BEGIN
      CustomLicense.GET(CustomLicense."Licence Type"::"4PS HPT");
      Hash := GetHashOfUsers(CustomLicense."Number of Licenses");
      IF Hash <> CustomLicense.Hash THEN BEGIN
        EXIT(FALSE);
      END ELSE BEGIN
        EXIT(TRUE);
      END;
    END;

    PROCEDURE AlignUsersWithLicense@1100525004();
    VAR
      HourPortalUser@1100525000 : Record 11020453;
      ConstructCustomLicense@1100525004 : Record 11012449;
      HourPortalUserCount@1100525003 : Integer;
      MaxActive@1100525006 : Integer;
    BEGIN
      HourPortalUserCount := HourPortalUser.COUNT;
      ConstructCustomLicense.GET(ConstructCustomLicense."Licence Type"::"4PS HPT");
      MaxActive := ConstructCustomLicense."Number of Licenses";
      IF HourPortalUserCount > MaxActive THEN BEGIN
        MESSAGE(Text008, MaxActive);
        HourPortalUser.FINDFIRST;
        REPEAT
          HourPortalUser.DELETE(TRUE);
        UNTIL (NOT HourPortalUser.FINDFIRST) OR (HourPortalUser.COUNT = MaxActive);
      END;
    END;

    BEGIN
    END.
  }
}

