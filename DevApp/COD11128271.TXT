OBJECT Codeunit 11128271 Agda Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            // Only exports dimensions:
            ExportAgda(TRUE, FALSE, FALSE, '', '', '', FALSE);
          END;

  }
  CODE
  {
    VAR
      AgdaSetup@1100409009 : Record 11128277;
      OnlyNotExported@1100285002 : Boolean;
      JobSetup@1100285001 : Record 315;
      Job@1100409000 : Record 11072003;
      Service@1000000000 : Record 11012823;
      DimVal@1100409001 : Record 349;
      PHLine@1100409007 : Record 11012085;
      HoursAccountingLine@1100285012 : Record 11012039;
      FileMgmt@1100409003 : Codeunit 419;
      Filename@1100409004 : Text[250];
      TAB@1100409005 : Char;
      LF@1100285008 : Char;
      CR@1100285009 : Char;
      Status@1100409006 : Text[30];
      Value@1100409008 : Text[30];
      Text001@1100409010 : TextConst 'ENU=Done';
      Employee@1100285000 : Record 5200;
      DocumentFilter@1100285003 : Text[50];
      EmployerFilter@1100285004 : Text[50];
      gDateFilter@1100285500 : Text[50];
      OutStr@1100285005 : OutStream;
      TempBlob@1100285006 : Record 99008535;
      txtNotAGDA@1100285007 : TextConst 'ENU=Salary Program  must be AGDA in Job setup > Salary Program';
      gAnsiTxt@1100285010 : Text[250];
      gAsciiTxt@1100285011 : Text[250];
      ExportedHour@1100285013 : Record 11012041;
      TotLine@1100285014 : Text[30];
      AmountLCY@1100285015 : Text[30];
      WageComponent@1100285016 : Record 11012014;
      txtNothing@1100285017 : TextConst 'ENU=No hours/abscence exported.';
      NoTimeExported@1100285018 : Boolean;
      NoAbscenceExported@1100285501 : Boolean;
      TextNoDate@1100285502 : TextConst 'ENU=No filter is set for the date';
      SEUtils@1100285503 : Codeunit 11128000;

    PROCEDURE ExportAgda@1100285011(Dimensions@1100285000 : Boolean;Time@1100285001 : Boolean;Absence@1100285002 : Boolean;DocFilter@1100285003 : Text[50];EmpFilter@1100285004 : Text[50];DateFilter@1100285500 : Text[50];NotExportedLines@1100285005 : Boolean);
    BEGIN
      // This function is called from report 11128024 Export AGDA
      // and from this it calles the three different File-export functions for Dimensions, Time and Absence
      // Setup-records are initiated from this function, hence do not calll the three other functions from somewhere else.

      JobSetup.GET();
      // Makes sure its is AGDA as Salary Program
      IF (JobSetup."Salary Application" <> JobSetup."Salary Application"::AGDA) THEN ERROR(txtNotAGDA);

      // Copies the possible filters from local to Global variables used in the functions below.
      OnlyNotExported := NotExportedLines;
      EmployerFilter  := EmpFilter;
      DocumentFilter  := DocFilter;
      //>>140129 ENH010
      gDateFilter     := DateFilter;
      //<<140129 ENH010
      NoTimeExported := FALSE;               //140214
      NoAbscenceExported := FALSE;           //140214


      IF (Dimensions) THEN ExportAGDADimension;
      IF (Time)       THEN ExportTime;
      IF (Absence)    THEN ExportAbsence;

      //>>140214
      IF (NoTimeExported) AND (NoAbscenceExported) AND (GUIALLOWED()) THEN BEGIN
      //<<140214
         MESSAGE(txtNothing);
         COMMIT;
         REPORT.RUN(11128024);
         EXIT;
      END;


      IF (NoTimeExported = FALSE) OR (NoAbscenceExported = FALSE) THEN          //140214
           FillLogBook;

      // END-message if not autmatically run.
      IF GUIALLOWED() THEN
        MESSAGE(Text001);
    END;

    PROCEDURE ExportAGDADimension@1100285000();
    VAR
      lInStream@1100285500 : InStream;
      lTempFileAbsPathName@1100285501 : Text;
      ServerFileHelper@1100285502 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      lOutStream@1100285505 : OutStream;
      lOutputFile@1100285503 : File;
      ProjectName@1100285504 : Text[250];
      Servicename@1000000000 : Text[250];
    BEGIN
      // Exports agda dimensions to a file
      JobSetup.GET; //ENH032

      TAB := 9;

      CR := 13;
      LF := 10;

      //>>ENH032
      Filename := //JobSetup."Pathname Files to Salary" + 'AGDA-Dimensioner.txt';
        JobSetup."Pathname Dimfiles (AGDA)" + 'AGDA-Dimensioner-' + JobSetup."Delivering Company (SCAB)" + '.txt';
      //<<ENH032

      TempBlob.Blob.CREATEOUTSTREAM(OutStr);

      // Projekt
      Job.RESET();
      IF Job.FINDSET() THEN REPEAT
        // I honestly think this is supposed be DimValue, but who am I to..
        Status := '™ppen';
        IF Job."Project Status" IN [Job."Project Status"::"Administrative Finished"
          ,Job."Project Status"::Finished
          ,Job."Project Status"::Archive
          ,Job."Project Status"::Archived
          ]
        THEN
          Status := 'St„ngd';
        ProjectName := SEUtils.CleanTextFromNonPrintable(Job.Description);        //ITERO.WG 150427
        OutStr.WRITETEXT(
          Ascii2Ansi(
            JobSetup."Delivering Company (SCAB)"+FORMAT(TAB) +  //ENH032
            //>>ITERO.WG 150427
            'PROJEKT' +FORMAT(TAB) +Job."No." +FORMAT(TAB) +ProjectName +FORMAT(TAB) +Status) + FORMAT(CR) + FORMAT(LF));
            //'PROJEKT' +FORMAT(TAB) +Job."No." +FORMAT(TAB) +Job.Description +FORMAT(TAB) +Status) + FORMAT(CR) + FORMAT(LF));
            //<<ITERO.WG 150427
      UNTIL Job.NEXT = 0;

      //>>SC004131
      //Service
      Service.RESET();
      IF Service.FINDSET() THEN REPEAT
          Status := '™ppen';
          IF Service.Status  >= Service.Status::"Administrative Finished" THEN
            Status := 'St„ngd';
          Servicename := SEUtils.CleanTextFromNonPrintable(Service.Description);
        OutStr.WRITETEXT(
          Ascii2Ansi(
            JobSetup."Delivering Company (SCAB)"+FORMAT(TAB) +  //ENH032
            'SERVICE' +FORMAT(TAB) +Service."No." +FORMAT(TAB) +Servicename +FORMAT(TAB) +Status) + FORMAT(CR) + FORMAT(LF));
      UNTIL Service.NEXT = 0;
      //<<SC004131

      //Kostnadsst„lle
      DimVal.RESET();
      DimVal.SETRANGE("Dimension Code",'KOSTNADSSTŽLLE'); // :-)
      IF DimVal.FINDSET() THEN REPEAT
        Status := '™ppen';
        IF DimVal.Blocked THEN
          Status := 'St„ngd';
        OutStr.WRITETEXT(
          Ascii2Ansi(
            JobSetup."Delivering Company (SCAB)"+FORMAT(TAB) +  //ENH032
            FORMAT(DimVal."Dimension Code")) +FORMAT(TAB) +DimVal.Code +FORMAT(TAB) +Ascii2Ansi(DimVal.Name) +FORMAT(TAB) +Ascii2Ansi(Status) + FORMAT(CR) + FORMAT(LF));
      UNTIL DimVal.NEXT() = 0;
      //>>ENH032
      //FileMgmt.BLOBExport4PS(TempBlob, Filename, FALSE, FALSE);
      IF GUIALLOWED THEN
        FileMgmt.BLOBExport4PS(TempBlob, Filename, FALSE, FALSE)
      ELSE BEGIN
      //NAS
        IF NOT TempBlob.Blob.HASVALUE THEN
          EXIT;
        TempBlob.Blob.CREATEINSTREAM(lInStream);
        //DOWNLOADFROMSTREAM(NVInStream, '', FileMgmt.Magicpath, '', TempFileAbsPathName);

      lTempFileAbsPathName := FileMgmt.ServerTempFileName('');
      lOutputFile.WRITEMODE(TRUE);
      lOutputFile.CREATE(lTempFileAbsPathName);
      lOutputFile.CREATEOUTSTREAM(lOutStream);
      TempBlob.Blob.CREATEINSTREAM(lInStream);
      COPYSTREAM(lOutStream,lInStream);
      lOutputFile.CLOSE;

        IF ServerFileHelper.Exists(Filename) THEN
          ServerFileHelper.Delete(Filename);
        ServerFileHelper.Copy(lTempFileAbsPathName, Filename, TRUE);
        IF ServerFileHelper.Exists(lTempFileAbsPathName) THEN
          ServerFileHelper.Delete(lTempFileAbsPathName);
      END;
      //<<ENH032

      CLEAR(TempBlob.Blob);
    END;

    PROCEDURE ExportTime@1100285001();
    VAR
      lvTeamCode@1100285500 : Code[30];
      lvWageCompSalaryApplication@1100285501 : Record 11128109;
      lvExportNo@1000000000 : Code[20];
    BEGIN
      // Exports AGDA time reports to a file

      TempBlob.Blob.CREATEOUTSTREAM(OutStr);

      Filename := JobSetup."Pathname Files to Salary" + 'AGDA-Tid-' + DELCHR(FORMAT(TODAY), '=', '-') + '_' + DELCHR(FORMAT(TIME), '=', ':') + '.txt';

      PHLine.RESET();
      IF (EmployerFilter <> '') THEN
         PHLine.SETFILTER(Employer, EmployerFilter);
      IF (DocumentFilter <> '') THEN
         PHLine.SETFILTER("Document No.", DocumentFilter);
      //>>140129 ENH010
      IF (gDateFilter <> '') THEN
      //>>141103 ENH050
      //   PHLine.SETFILTER("Posting Date", gDateFilter);
         PHLine.SETFILTER("Actual date of line", gDateFilter);
      //<<141103 ENH050
      //<<140129 ENH010
      IF (OnlyNotExported) THEN                           //140214
         PHLine.SETRANGE(Exported,FALSE);                 //140214
      PHLine.SETRANGE("Leave Type",'');
      IF PHLine.FINDSET(TRUE) THEN REPEAT

        Value := PHLine."Department Code";
        Employee.GET(PHLine."Employee No.");

        WageComponent.GET(PHLine."Wage Component");
        CASE WageComponent."Component Type" OF
           WageComponent."Component Type"::Hours: BEGIN
              TotLine := FORMAT(PHLine."Total Line");
              AmountLCY := '';
           END;
           WageComponent."Component Type"::Days: BEGIN
              TotLine := FORMAT(PHLine.Quantity);
              AmountLCY := '';
           END;
           WageComponent."Component Type"::Expenses: BEGIN
              TotLine := FORMAT(PHLine.Quantity);
              //>>ITERO.PR 160105
              IF JobSetup."No Kilometer Amount To AGDA" THEN BEGIN
                IF WageComponent."Kilometer Expense" THEN BEGIN
                  AmountLCY := '';
                END ELSE BEGIN
                  AmountLCY := FORMAT(PHLine."Amount (LCY)", 0, 9);
                END;
              END ELSE BEGIN
              //<<ITERO.PR 160105
                AmountLCY := FORMAT(PHLine."Amount (LCY)", 0, 9);
              END;
           END;

           WageComponent."Component Type"::"Expense hours": BEGIN
              TotLine := FORMAT(PHLine."Total Line");
              AmountLCY := FORMAT(PHLine."Amount (LCY)", 0, 9);
           END;
        END;
        // 140312 ENH022 <<
        lvTeamCode := PHLine."Team Code";
        IF (PHLine.Type = PHLine.Type::Indirect) THEN
           lvTeamCode := '';
        IF (Employee.UTA) THEN
           lvTeamCode := '';
        // 140312 ENH022 >>

      //>>SC004131
        CASE PHLine.Type OF
          PHLine.Type::Project:  lvExportNo := PHLine."Project No.";
          PHLine.Type::Service:  lvExportNo := PHLine."Service Order No.";
          PHLine.Type::Indirect: lvExportNo := '';
        END;
      //<<SC004131

        IF Value = '' THEN
          Value := PHLine."Department Code Employee";
        OutStr.WRITETEXT(Ascii2Ansi(JobSetup."Delivering Company (SCAB)")
          +';' +Ascii2Ansi(Employee."Salary No.")
          +';' +Ascii2Ansi(PHLine."Wage Component")
      //    +';' +Ascii2Ansi(PHLine."Project No.")
          +';' +Ascii2Ansi(lvExportNo)
          +';' +Ascii2Ansi(Value)
          +';' +TotLine
      //>>141103 ENH050
      //    +';' +FORMAT(PHLine."Posting Date", 0, 9)
          +';' +FORMAT(PHLine."Actual date of line", 0, 9)
      //<<141103 ENH050
          +';' +AmountLCY
          +';' +Ascii2Ansi(lvTeamCode) // 140312 Replaced PHLine."Team Code" with lvTeamCode.
          +FORMAT(CR) + FORMAT(LF)
         );
         // 140312 ENH022 <<
         IF (lvWageCompSalaryApplication.GET(PHLine."Wage Component")) THEN BEGIN
            IF (lvWageCompSalaryApplication."Generate Additional Line" = lvWageCompSalaryApplication."Generate Additional Line"::Always)
               OR
               ((lvWageCompSalaryApplication."Generate Additional Line" = lvWageCompSalaryApplication."Generate Additional Line"::"Non-UTA") AND (Employee.UTA = FALSE))
            THEN BEGIN
              OutStr.WRITETEXT(Ascii2Ansi(JobSetup."Receiving Company (SCAB)")
                +';' +Ascii2Ansi(Employee."Salary No.")
                +';' +Ascii2Ansi(lvWageCompSalaryApplication."Wage Component Additional Line")
                +';' +Ascii2Ansi(PHLine."Project No." + PHLine."Service Order No.")
                +';' +Ascii2Ansi(Value)
                +';' +TotLine
      //>>141103 ENH050
      //    +';' +FORMAT(PHLine."Posting Date", 0, 9)
          +';' +FORMAT(PHLine."Actual date of line", 0, 9)
      //<<141103 ENH050
                +';' +AmountLCY
                +';' +Ascii2Ansi(lvTeamCode)
                +FORMAT(CR) + FORMAT(LF)
               );
            END;
         END;
         // 140312 ENH022 >>

         PHLine.Exported := TRUE;
         PHLine."Exported on" := CURRENTDATETIME;
         PHLine.MODIFY();
      UNTIL PHLine.NEXT() = 0 ELSE BEGIN
         NoTimeExported := TRUE;
      END;

      IF NOT (NoTimeExported) THEN BEGIN
         FileMgmt.BLOBExport4PS(TempBlob, Filename, FALSE, FALSE);
      END;

      CLEAR(TempBlob.Blob);

      COMMIT; //IME421
    END;

    PROCEDURE ExportAbsence@1100285002();
    VAR
      lvTeamCode@1100285500 : Code[20];
    BEGIN
      // Exports AGDA abscence to a file
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);

      Filename := JobSetup."Pathname Files to Salary" + 'AGDA-TidFranvaro-' + DELCHR(FORMAT(TODAY), '=', '-') + '_' + DELCHR(FORMAT(TIME), '=', ':') + '.txt';

      PHLine.RESET();
      IF (EmployerFilter <> '') THEN
         PHLine.SETFILTER(Employer, EmployerFilter);
      IF (DocumentFilter <> '') THEN
         PHLine.SETFILTER("Document No.", DocumentFilter);
      //>>140131 ENH010
      IF (gDateFilter <> '') THEN
      //>>141103 ENH050
      //   PHLine.SETFILTER("Posting Date", gDateFilter);
         PHLine.SETFILTER("Actual date of line", gDateFilter);
      //<<141103 ENH050
      //<<140131 ENH010
      IF (OnlyNotExported) THEN
         PHLine.SETRANGE(Exported,FALSE);

      PHLine.SETFILTER("Leave Type",'<>''''');
      IF PHLine.FINDSET(TRUE) THEN REPEAT
        Employee.GET(PHLine."Employee No.");
        IF Value = '' THEN
          Value := PHLine."Department Code Employee";

        // 140317 ENH022 <<
        lvTeamCode := PHLine."Team Code";
        IF (PHLine.Type = PHLine.Type::Indirect) THEN
           lvTeamCode := '';
        IF (Employee.UTA) THEN
           lvTeamCode := '';
        // 140317 ENH022 >>


        OutStr.WRITETEXT(Ascii2Ansi(JobSetup."Delivering Company (SCAB)"
          +';' +Employee."Salary No."
          +';' +PHLine."Wage Component"
          +';' +PHLine."Project No."
          +';' +Value
          +';' +FORMAT(PHLine."Total Line")
      //>>141103 ENH050
      //    +';' +FORMAT(PHLine."Posting Date", 0, 9)
          +';' +FORMAT(PHLine."Actual date of line", 0, 9)
      //<<141103 ENH050
          +';' +lvTeamCode // 140317
          + FORMAT(CR) + FORMAT(LF)
        ));
      //  Nothing := FALSE;                          //140214
         PHLine.Exported := TRUE;
         PHLine."Exported on" := CURRENTDATETIME;
         PHLine.MODIFY();
      UNTIL PHLine.NEXT() = 0 ELSE
         NoAbscenceExported := TRUE;                //140214


      IF NOT (NoAbscenceExported) THEN BEGIN        //140214
         FileMgmt.BLOBExport4PS(TempBlob, Filename, FALSE, FALSE);
      END;

      CLEAR(TempBlob.Blob);

      COMMIT; //IME421
    END;

    PROCEDURE FillLogBook@33();
    VAR
      LineNoInt@1100285000 : Integer;
    BEGIN
      ExportedHour.RESET;
      IF ExportedHour.FIND('+') THEN
        LineNoInt := ExportedHour."Line No." + 1
      ELSE
        LineNoInt := 1;

      ExportedHour.INIT;
      ExportedHour."Line No." := LineNoInt;
      ExportedHour."Document No." :=  PHLine."Document No.";
      ExportedHour."User ID" := USERID;
      ExportedHour.Date := TODAY;
      ExportedHour.Time := TIME;
      ExportedHour.INSERT;
    END;

    PROCEDURE Ansi2Ascii@1000000016(pText@1000 : Text[1024]) : Text[1024];
    BEGIN
      SetAnsiAscii;
      EXIT(CONVERTSTR(pText,gAnsiTxt,gAsciiTxt));
    END;

    PROCEDURE Ascii2Ansi@1000000017(pText@1000 : Text[1024]) : Text[1024];
    BEGIN
      SetAnsiAscii;
      EXIT(CONVERTSTR(pText,gAsciiTxt,gAnsiTxt));
    END;

    LOCAL PROCEDURE SetAnsiAscii@1100570006();
    BEGIN
      IF gAnsiTxt > '' THEN
        EXIT;

      gAsciiTxt[1] := 8364;
      gAsciiTxt[2] := 8218;
      gAsciiTxt[3] := 402;
      gAsciiTxt[4] := 8222;
      gAsciiTxt[5] := 8230;
      gAsciiTxt[6] := 8224;
      gAsciiTxt[7] := 8225;
      gAsciiTxt[8] := 710;
      gAsciiTxt[9] := 8240;
      gAsciiTxt[10] := 352;
      gAsciiTxt[11] := 8249;
      gAsciiTxt[12] := 338;
      gAsciiTxt[13] := 381;
      gAsciiTxt[14] := 8216;
      gAsciiTxt[15] := 8217;
      gAsciiTxt[16] := 8220;
      gAsciiTxt[17] := 8221;
      gAsciiTxt[18] := 8226;
      gAsciiTxt[19] := 8211;
      gAsciiTxt[20] := 8212;
      gAsciiTxt[21] := 732;
      gAsciiTxt[22] := 8482;
      gAsciiTxt[23] := 353;
      gAsciiTxt[24] := 8250;
      gAsciiTxt[25] := 339;
      gAsciiTxt[26] := 382;
      gAsciiTxt[27] := 376;
      gAsciiTxt[28] := 161;
      gAsciiTxt[29] := 162;
      gAsciiTxt[30] := 163;
      gAsciiTxt[31] := 164;
      gAsciiTxt[32] := 165;
      gAsciiTxt[33] := 166;
      gAsciiTxt[34] := 167;
      gAsciiTxt[35] := 168;
      gAsciiTxt[36] := 169;
      gAsciiTxt[37] := 170;
      gAsciiTxt[38] := 171;
      gAsciiTxt[39] := 172;
      gAsciiTxt[40] := 173;
      gAsciiTxt[41] := 174;
      gAsciiTxt[42] := 175;
      gAsciiTxt[43] := 176;
      gAsciiTxt[44] := 177;
      gAsciiTxt[45] := 178;
      gAsciiTxt[46] := 179;
      gAsciiTxt[47] := 180;
      gAsciiTxt[48] := 181;
      gAsciiTxt[49] := 182;
      gAsciiTxt[50] := 183;
      gAsciiTxt[51] := 184;
      gAsciiTxt[52] := 185;
      gAsciiTxt[53] := 186;
      gAsciiTxt[54] := 187;
      gAsciiTxt[55] := 188;
      gAsciiTxt[56] := 189;
      gAsciiTxt[57] := 190;
      gAsciiTxt[58] := 191;
      gAsciiTxt[59] := 192;
      gAsciiTxt[60] := 193;
      gAsciiTxt[61] := 194;
      gAsciiTxt[62] := 195;
      gAsciiTxt[63] := 196;
      gAsciiTxt[64] := 197;
      gAsciiTxt[65] := 198;
      gAsciiTxt[66] := 199;
      gAsciiTxt[67] := 200;
      gAsciiTxt[68] := 201;
      gAsciiTxt[69] := 202;
      gAsciiTxt[70] := 203;
      gAsciiTxt[71] := 204;
      gAsciiTxt[72] := 205;
      gAsciiTxt[73] := 206;
      gAsciiTxt[74] := 207;
      gAsciiTxt[75] := 208;
      gAsciiTxt[76] := 209;
      gAsciiTxt[77] := 210;
      gAsciiTxt[78] := 211;
      gAsciiTxt[79] := 212;
      gAsciiTxt[80] := 213;
      gAsciiTxt[81] := 214;
      gAsciiTxt[82] := 215;
      gAsciiTxt[83] := 216;
      gAsciiTxt[84] := 217;
      gAsciiTxt[85] := 218;
      gAsciiTxt[86] := 219;
      gAsciiTxt[87] := 220;
      gAsciiTxt[88] := 221;
      gAsciiTxt[89] := 222;
      gAsciiTxt[90] := 223;
      gAsciiTxt[91] := 224;
      gAsciiTxt[92] := 225;
      gAsciiTxt[93] := 226;
      gAsciiTxt[94] := 227;
      gAsciiTxt[95] := 228;
      gAsciiTxt[96] := 229;
      gAsciiTxt[97] := 230;
      gAsciiTxt[98] := 231;
      gAsciiTxt[99] := 232;
      gAsciiTxt[100] := 233;
      gAsciiTxt[101] := 234;
      gAsciiTxt[102] := 235;
      gAsciiTxt[103] := 236;
      gAsciiTxt[104] := 237;
      gAsciiTxt[105] := 238;
      gAsciiTxt[106] := 239;
      gAsciiTxt[107] := 240;
      gAsciiTxt[108] := 242;
      gAsciiTxt[109] := 243;
      gAsciiTxt[110] := 244;
      gAsciiTxt[111] := 245;
      gAsciiTxt[112] := 246;
      gAsciiTxt[113] := 247;
      gAsciiTxt[114] := 248;
      gAsciiTxt[115] := 249;
      gAsciiTxt[116] := 250;
      gAsciiTxt[117] := 251;
      gAsciiTxt[118] := 252;
      gAsciiTxt[119] := 253;
      gAsciiTxt[120] := 254;
      gAsciiTxt[121] := 255;

      gAnsiTxt[1] := 199;
      gAnsiTxt[2] := 233;
      gAnsiTxt[3] := 226;
      gAnsiTxt[4] := 228;
      gAnsiTxt[5] := 224;
      gAnsiTxt[6] := 229;
      gAnsiTxt[7] := 231;
      gAnsiTxt[8] := 234;
      gAnsiTxt[9] := 235;
      gAnsiTxt[10] := 232;
      gAnsiTxt[11] := 239;
      gAnsiTxt[12] := 238;
      gAnsiTxt[13] := 196;
      gAnsiTxt[14] := 230;
      gAnsiTxt[15] := 198;
      gAnsiTxt[16] := 244;
      gAnsiTxt[17] := 246;
      gAnsiTxt[18] := 242;
      gAnsiTxt[19] := 251;
      gAnsiTxt[20] := 249;
      gAnsiTxt[21] := 255;
      gAnsiTxt[22] := 214;
      gAnsiTxt[23] := 220;
      gAnsiTxt[24] := 248;
      gAnsiTxt[25] := 163;
      gAnsiTxt[26] := 215;
      gAnsiTxt[27] := 402;
      gAnsiTxt[28] := 237;
      gAnsiTxt[29] := 243;
      gAnsiTxt[30] := 250;
      gAnsiTxt[31] := 241;
      gAnsiTxt[32] := 209;
      gAnsiTxt[33] := 170;
      gAnsiTxt[34] := 186;
      gAnsiTxt[35] := 191;
      gAnsiTxt[36] := 174;
      gAnsiTxt[37] := 172;
      gAnsiTxt[38] := 189;
      gAnsiTxt[39] := 188;
      gAnsiTxt[40] := 161;
      gAnsiTxt[41] := 171;
      gAnsiTxt[42] := 187;
      gAnsiTxt[43] := 8364;
      gAnsiTxt[44] := 129;
      gAnsiTxt[45] := 8218;
      gAnsiTxt[46] := 8222;
      gAnsiTxt[47] := 8230;
      gAnsiTxt[48] := 193;
      gAnsiTxt[49] := 194;
      gAnsiTxt[50] := 192;
      gAnsiTxt[51] := 169;
      gAnsiTxt[52] := 8224;
      gAnsiTxt[53] := 8225;
      gAnsiTxt[54] := 710;
      gAnsiTxt[55] := 8240;
      gAnsiTxt[56] := 162;
      gAnsiTxt[57] := 165;
      gAnsiTxt[58] := 352;
      gAnsiTxt[59] := 8249;
      gAnsiTxt[60] := 338;
      gAnsiTxt[61] := 141;
      gAnsiTxt[62] := 381;
      gAnsiTxt[63] := 143;
      gAnsiTxt[64] := 144;
      gAnsiTxt[65] := 227;
      gAnsiTxt[66] := 195;
      gAnsiTxt[67] := 8216;
      gAnsiTxt[68] := 8217;
      gAnsiTxt[69] := 8220;
      gAnsiTxt[70] := 8221;
      gAnsiTxt[71] := 8226;
      gAnsiTxt[72] := 8211;
      gAnsiTxt[73] := 8212;
      gAnsiTxt[74] := 164;
      gAnsiTxt[75] := 240;
      gAnsiTxt[76] := 208;
      gAnsiTxt[77] := 202;
      gAnsiTxt[78] := 203;
      gAnsiTxt[79] := 200;
      gAnsiTxt[80] := 732;
      gAnsiTxt[81] := 205;
      gAnsiTxt[82] := 206;
      gAnsiTxt[83] := 207;
      gAnsiTxt[84] := 8482;
      gAnsiTxt[85] := 353;
      gAnsiTxt[86] := 8250;
      gAnsiTxt[87] := 339;
      gAnsiTxt[88] := 166;
      gAnsiTxt[89] := 204;
      gAnsiTxt[90] := 157;
      gAnsiTxt[91] := 211;
      gAnsiTxt[92] := 223;
      gAnsiTxt[93] := 212;
      gAnsiTxt[94] := 210;
      gAnsiTxt[95] := 245;
      gAnsiTxt[96] := 213;
      gAnsiTxt[97] := 181;
      gAnsiTxt[98] := 254;
      gAnsiTxt[99] := 222;
      gAnsiTxt[100] := 218;
      gAnsiTxt[101] := 219;
      gAnsiTxt[102] := 217;
      gAnsiTxt[103] := 253;
      gAnsiTxt[104] := 221;
      gAnsiTxt[105] := 175;
      gAnsiTxt[106] := 180;
      gAnsiTxt[107] := 173;
      gAnsiTxt[108] := 382;
      gAnsiTxt[109] := 190;
      gAnsiTxt[110] := 182;
      gAnsiTxt[111] := 167;
      gAnsiTxt[112] := 247;
      gAnsiTxt[113] := 184;
      gAnsiTxt[114] := 176;
      gAnsiTxt[115] := 168;
      gAnsiTxt[116] := 183;
      gAnsiTxt[117] := 185;
      gAnsiTxt[118] := 179;
      gAnsiTxt[119] := 178;
      gAnsiTxt[120] := 376;
      gAnsiTxt[121] := 160;
    END;

    BEGIN
    {

      130923 ** MH ** Hotfix: Fixed wrong †„” when exporting. + Emplyee No.
      131015 ** MH ** Major Hotfix: Seperated all functions - added call from report - added filter possiblity. Modified export variables
      131107 ** MH ** Hotfix
      140129 ITERO.DJ ENH010 added Datefilter to ExportAgda/ExportTime
      140131 ITERO.DJ ENH010 same datefilter on abscence
      140214 ITERO.MH Exported Hours Only in Time
      140312 ITERO.MH ENH022 Team Code not exported
      140317 ITERO.MH ENHO22 Team Code not exporterd (indirect hours)
      140408 ITERO.DL ENH032 added JobSetup."Delivering Company (SCAB)"+FORMAT(TAB)  to ExportAGDADimension
      141103 ITERO.WG ENH050 changed Posting Date to Actual Date Of Line
      150427 ITERO.WG CleanTextFromNonPrintable(Job.Description)
      151015 ITERO.WG SC004131 Added export of Service orders
      151015 ITERO.WG IME421 added commit after export.
      160105 ITERO.PR Added code if Jobs Setup."Kilometer Amount To AGDA"
    }
    END.
  }
}

