OBJECT Codeunit 11128515 Remittance Tools
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO8.00 (15000002),4PSSE.NO;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      text018@1080000 : TextConst 'ENU=Error in message to vendor. %1.\';
      text019@1080001 : TextConst '@@@=Parameter 2 - Document Type, 3 - Document No., 4 - string length;ENU=Formating of the text to %2 %3 is more then %4 chars long.\';
      text020@1080002 : TextConst 'ENU=Message line starts with following: "%5..."\\';
      text021@1080003 : TextConst 'ENU=Recipient ref. must be changed for vendor.';
      text022@1080004 : TextConst 'ENU=Recipient ref. must be changed for remittance account %6';
      text023@1080005 : TextConst 'ENU=Batch rejected, but no errors in this record.';
      text024@1080006 : TextConst 'ENU=Erroneus enterprise no./customer no.';
      text025@1080007 : TextConst 'ENU=Cannot Change/Cancel';
      text026@1080008 : TextConst 'ENU=Total amount of invoices/credit notes can not be less then 0';
      text027@1080009 : TextConst 'ENU=Serial number does not exist or is invalid';
      text028@1080010 : TextConst 'ENU=Transaction type can not be changed in PAYFOR21';
      text029@1080011 : TextConst 'ENU=Incorrect use of KID/ invalid KID';
      text030@1080012 : TextConst 'ENU=Invalid credit account number';
      text031@1080013 : TextConst 'ENU=Invalid debet account number';
      text032@1080014 : TextConst 'ENU=Payment date invalid';
      text033@1080015 : TextConst 'ENU=Ref. no. does not exist, or is invalid';
      text034@1080016 : TextConst 'ENU=Password expired (password too old)';
      text035@1080017 : TextConst 'ENU=Operator locked';
      text036@1080018 : TextConst 'ENU=Invalid password';
      text037@1080019 : TextConst 'ENU=Operator not authorised';
      text038@1080020 : TextConst 'ENU=Invalid Operator ID';
      text039@1080021 : TextConst 'ENU=Invalid version number in BETFOR00';
      text040@1080022 : TextConst 'ENU=Error(s) in name/address fields';
      text041@1080023 : TextConst 'ENU=Incorrect currency code';
      text042@1080024 : TextConst 'ENU=Error in agreed exchange rate/forward rate';
      text043@1080025 : TextConst 'ENU=Invalid authority report code';
      text044@1080026 : TextConst 'ENU=Incorrect payee country/region code';
      text045@1080027 : TextConst 'ENU=Error in sequence control field';
      text046@1080028 : TextConst 'ENU=Incorrectly constructed batch';
      text047@1080029 : TextConst 'ENU=Invalid transaction code';
      text048@1080030 : TextConst 'ENU=Seal invalid';
      text049@1080031 : TextConst 'ENU=Count error for number of transactions within a batch (BETFOR99)';
      text050@1080032 : TextConst 'ENU=Sequence error in AH-sequence (application header)';
      text051@1080033 : TextConst 'ENU=Unknown AH-PROCEDURE-ID';
      text052@1080034 : TextConst 'ENU=Invalid AH-TRANSACTION DATE';
      text053@1080035 : TextConst 'ENU=Invalid division';
      text054@1080036 : TextConst 'ENU=Error unknown';
      text055@1080037 : TextConst '@@@=Parameter 1 - code, 2 - error message;ENU=Error code %1: %2.';
      text060@1080042 : TextConst 'ENU=Missing debit/credit code';
      text061@1080043 : TextConst 'ENU=Mixing of structured and unstructured message information not allowed';
      text062@1080044 : TextConst 'ENU=Use of KID is mandatory for this beneficiary';
      text063@1080045 : TextConst 'ENU=Invalid cheque code';
      text064@1080046 : TextConst 'ENU=Invalid charges codes';
      text065@1080047 : TextConst 'ENU=Invalid notification indicator';
      text066@1080048 : TextConst 'ENU=Invalid priority code';
      text067@1080049 : TextConst 'ENU=Invalid amount field';
      text068@1080050 : TextConst 'ENU=Missing mandatory authority report free text for authority report code';
      text069@1080051 : TextConst 'ENU=Error in SWIFT code field';
      text070@1080052 : TextConst 'ENU="Missing new seal key "';
      text071@1080053 : TextConst 'ENU=Incorrectly constructed payment order';
      text072@1080054 : TextConst 'ENU=BETFOR not followed by sufficient number of records';
      text073@1080055 : TextConst 'ENU=Errors in BETFOR99';
      text074@1080056 : TextConst 'ENU=Errors in BETFOR00';
      RemittanceVersionMsg@1080038 : TextConst 'ENU=Remittance version %1\¸ Microsoft Business Solutions.';
      BankAccountMsg@1080039 : TextConst 'ENU=Bank account no.: %1\Postgiro account no.: %2';
      NotValidAccountMsg@1080059 : TextConst 'ENU="This is not a valid accountno. "';
      StartingDigitWrongMsg@1080058 : TextConst 'ENU=Starting digit %1 is wrong.';
      CountrolDigitWrong10Msg@1080057 : TextConst 'ENU=Control-digit is wrong (modulus 10).';
      CountrolDigitWrong11Msg@1080041 : TextConst 'ENU=Control-digit is wrong (modulus 11).';
      WrongNumberSizeMsg@1080040 : TextConst 'ENU=Control-number should have 7 or 11 digits.';
      NotElevenDigitsMsg@1080060 : TextConst 'ENU=Account no. should have 11 digits.';
      WrongKIDNo10Msg@1080063 : TextConst 'ENU=This is not a valid KID no. (modulus10).';
      WrongKIDNo11Msg@1080062 : TextConst 'ENU=This is not a valid KID no (modulus 11).';
      WrongKIDNo10and11Msg@1080061 : TextConst 'ENU=This is not a valid KID no (modulus 10 and 11).';
      TooLongMessageErr@1080064 : TextConst 'ENU=The message is too long. It can not be longer then %1 char.';
      NonDigitCharErr@1080065 : TextConst 'ENU=Only the char. "0123456789,.-" and space can be used for account no.';
      WrongAccountTypeErr@1080067 : TextConst '@@@=Parameter 1 - Line No, 2 - Line Type, 3 - Vendor No, 4 - vendor entry no;ENU=Error: Wrong account type %1 in line %2.\Vendor no. %3, entry serial no. %4';
      WrongEntryErr@1080066 : TextConst '@@@=Parameter 1 - number of entries, 2 - line no, 3 - Vendor No, 4 - Vendor Entry No;ENU=Error: %1 entry(s) in line %2.\Vendor no. %3, entry serial no. %4';

    PROCEDURE AboutRemittance@22();
    VAR
      Version@1080000 : Text[30];
    BEGIN
      Version := '4.00.00';
      MESSAGE(RemittanceVersionMsg,Version);
    END;

    PROCEDURE CheckAccountNo@1(AccountNo@1080000 : Text[30];BankType@1080001 : Integer) : Text[250];
    VAR
      BankgiroText@1080002 : Text[250];
      PostgiroText@1080003 : Text[250];
    BEGIN
      // RETUR: = ''=Not error <>''=return text creates error.
      CASE BankType OF
        0:
          BEGIN // Check bankgiro and postgiro
            BankgiroText := CheckBankGiro(AccountNo);
            PostgiroText := CheckPostGiro(AccountNo);
            // If at least one of them is correct:
            IF (BankgiroText <> '') AND (PostgiroText <> '') THEN
              EXIT(STRSUBSTNO(BankAccountMsg,BankgiroText,PostgiroText));
          END;
        1: ; // Foreign. No account check.
      END;
      EXIT(''); // no error.
    END;

    PROCEDURE CheckPostGiro@2(AccountNo@1080000 : Text[30]) : Text[250];
    VAR
      TempStr@1080001 : Text[30];
      ErrText@1080002 : Text[250];
    BEGIN
      // Check postgiro no. . Both 7 and 11 digits. [p60]
      ErrText := '';
      AccountNo := FormatAccountNo(AccountNo); // Delete blanks from account no.

      // Check the length:
      CASE STRLEN(AccountNo) OF
        7:
          BEGIN
            // Check 2 first digits [10.6 p60]
            // Valid 2 first digits: [13..18].
            TempStr := COPYSTR(AccountNo,1,2);
            IF (TempStr < '13') OR (TempStr > '18') THEN
              ErrText := STRSUBSTNO(NotValidAccountMsg + StartingDigitWrongMsg,TempStr);

            // Modulus 10 control:
            IF NOT Modulus10(AccountNo) THEN
              ErrText := NotValidAccountMsg + CountrolDigitWrong10Msg;
          END;
        11:
          BEGIN
            // Check first 4 digits. [10.5 p60]
            // Valid 4 first digits:
            // [0801..0809] og [0813..0814] og [0823..0850]
            TempStr := COPYSTR(AccountNo,1,4);
            IF (TempStr < '0801') OR
               ((TempStr > '0809') AND (TempStr < '0813')) OR
               ((TempStr > '0814') AND (TempStr < '0823')) OR
               (TempStr > '0850')
            THEN
              ErrText := STRSUBSTNO(NotValidAccountMsg + StartingDigitWrongMsg,TempStr);

            // Modulus 11 control of 11-digits account nos. [p59]:
            IF NOT Modulus11(AccountNo) THEN
              ErrText := NotValidAccountMsg + CountrolDigitWrong11Msg;
          END;
        ELSE
          ErrText := WrongNumberSizeMsg;
      END;

      // Return message:
      EXIT(ErrText);
    END;

    PROCEDURE CheckBankGiro@3(AccountNo@1080000 : Text[30]) : Text[250];
    VAR
      ErrText@1080001 : Text[250];
    BEGIN
      IF STRLEN(AccountNo) <> 11 THEN
        EXIT(NotValidAccountMsg);
      AccountNo := FormatAccountNo(AccountNo); // Delete blanks in account no.:

      IF STRLEN(AccountNo) <> 11 THEN
        ErrText := NotElevenDigitsMsg;
      IF NOT Modulus11(AccountNo) THEN
        ErrText := NotValidAccountMsg + CountrolDigitWrong11Msg;
      EXIT(ErrText);
    END;

    PROCEDURE CheckKID@17(KidCode@1080000 : Code[26]) : Text[250];
    VAR
      Kid@1080001 : Code[25];
      Method@1080002 : Char;
      MethodStr@1080003 : Text[1];
      ErrText@1080004 : Text[250];
      TempKid@1080005 : Code[60];
    BEGIN
      // Modulus 10 and 11 control of KID [10.1 and 10.2 p57].
      // PARAMETERS:  KIDCode=KID, including control-type char. at the end (<, > eller -), if any.
      // If the control-sign is not specified, both modulus 10 and 11 are checked. If any of those is ok, the KID is ok.
      Method := KidCode[STRLEN(KidCode)];
      MethodStr := ' ';
      MethodStr[1] := Method;

      TempKid := '00000000000000000000000000' + KidCode;
      // Format KID to 25 charachets with prepositive zero;
      IF STRPOS('<>-',MethodStr) <> 0 THEN
        Kid := COPYSTR(TempKid,STRLEN(TempKid) - 25,25) // 25 last chars. without last control char..
      ELSE
        Kid := COPYSTR(TempKid,STRLEN(TempKid) - 24); // 25 last chars

      CASE Method OF
        '<': // Modulus 10 control:
          IF NOT Modulus10KID(Kid) THEN
            ErrText := WrongKIDNo10Msg;
        '>': // CDV-11 control:
          IF NOT Modulus11KID(Kid) THEN
            ErrText := WrongKIDNo11Msg;
        '-':
          ErrText := ''; // No control
        ELSE // No control char. Check both modulus 10 and 11:
          IF (NOT Modulus10KID(Kid)) AND (NOT Modulus11KID(Kid)) THEN
            ErrText := WrongKIDNo10and11Msg;
      END;

      EXIT(ErrText);
    END;

    PROCEDURE CheckMessage@28(AgreementCode@1080000 : Code[10];MessageText@1080001 : Text[250]);
    VAR
      RemAgreement@1080002 : Record 11128503;
    BEGIN
      // Check the message length. Error if it's too long.
      RemAgreement.GET(AgreementCode);
      IF STRLEN(MessageText) > MaxMessageLength(RemAgreement) THEN
        ERROR(TooLongMessageErr,MaxMessageLength(RemAgreement));
    END;

    PROCEDURE Modulus10KID@19(Kid@1080000 : Code[26]) : Boolean;
    VAR
      t@1080001 : ARRAY [12] OF Integer;
      i@1080002 : Integer;
      TempStr@1080003 : Text[30];
      ControlDigit@1080004 : Text[30];
    BEGIN
      // Rest = 0 er OK. [10.1 p57]

      ControlDigit := Kid; // Control digit. Later changed at char 2, 4, 6..24

      // Calculate control digit for char. 2, 4, 6, 8, 10..24:
      FOR i := 1 TO 12 DO
        EVALUATE(t[i],COPYSTR(Kid,i * 2,1));

      // Multipl. with weight.:
      FOR i := 1 TO 12 DO BEGIN
        t[i] := t[i] * 2; // Multiplicate with weighting.
        // Check if larger then 10.
        // If larger then 10, calcualte sum of the digits:
        IF t[i] > 10 THEN BEGIN
          TempStr := FORMAT(t[i]);
          t[i] := 99 - STRCHECKSUM(TempStr,'11',99);
        END;
        TempStr := FORMAT(t[i]);
        ControlDigit[i*2] := TempStr[1];
      END;

      // Sum of the digits dividable with 10 is OK:
      EXIT(STRCHECKSUM(ControlDigit,'1111111111111111111111111',10) = 0);
    END;

    PROCEDURE Modulus11KID@20(Kid@1080000 : Code[26]) : Boolean;
    BEGIN
      // REST = 0 is OK.
      EXIT(STRCHECKSUM(Kid,'7654327654327654327654321',11) = 0);
    END;

    PROCEDURE FormatAccountNo@7(AccountNo@1080001 : Code[30]) Returnvar : Code[30];
    VAR
      i@1080002 : Integer;
    BEGIN
      // Format account no. Delete the blanks.
      Returnvar := '';
      // Deletes everything but 0..9:
      FOR i := 1 TO STRLEN(AccountNo) DO BEGIN
        // Controls valid char.:
        IF STRPOS('0123456789 -.,',COPYSTR(AccountNo,i,1)) = 0 THEN
          ERROR(NonDigitCharErr);
        // Create correct account no. with numerical chars. only:
        IF STRPOS('0123456789',COPYSTR(AccountNo,i,1)) > 0 THEN
          Returnvar := Returnvar + COPYSTR(AccountNo,i,1);
      END;
      EXIT(Returnvar);
    END;

    PROCEDURE FormatNum@9(FormatAmount@1080000 : Decimal;Length@1080001 : Integer;Decimals@1080002 : Boolean) : Text[50];
    VAR
      AmountStr@1080003 : Text[50];
      DecimalStr@1080004 : Text[50];
      IntegerStr@1080005 : Text[50];
      TempDecimal@1080006 : Decimal;
    BEGIN
      // Format numerical field.
      // Decimals=True: Decimals are two last digits. =False: No decimals.
      // Note: Sign is NOT set.
      // RETURN: Text with number char., length, right-aligned amount and leading zeros.
      // Exmpl: belp = 34,6 , length = 11, decimals = True. Returns='00000003460'.

      IF Decimals THEN BEGIN
        TempDecimal := (FormatAmount - ROUND(FormatAmount,1,'<')) * 100; // Exmpl: 34,6 -> 60 Exmpl2: 34.56789 -> 56.789
        TempDecimal := ROUND(TempDecimal,1,'<'); // Exmpl: 60 -> 60   Exmpl2: 56.789 -> 56
        DecimalStr := FORMAT(TempDecimal,2,'<integer>');
      END ELSE
        DecimalStr := '';
      IntegerStr := FORMAT(FormatAmount,Length - STRLEN(DecimalStr),'<integer>');
      AmountStr := CONVERTSTR(IntegerStr + DecimalStr,' ','0');  // Replace ' ' with '0'.
      EXIT(AmountStr);
    END;

    PROCEDURE FormatNumStr@10(AmountText@1080000 : Text[30];Length@1080001 : Integer) : Text[50];
    VAR
      AmountNum@1080002 : Decimal;
      FormattedAmount@1080003 : Text[50];
      i@1080004 : Integer;
    BEGIN
      // Same as in FormatNum, only with text as a parameter.
      // ALL chars, except numbers, are deleted before converting to amount.

      // EVALUATE(amount,amountStr) is not in use, since amountStr is not allways a correct number.
      // Extract digits:
      FormattedAmount := '0';  // Is min. a '0'.
      FOR i := 1 TO STRLEN(AmountText) DO BEGIN
        IF STRPOS('0123456789',COPYSTR(AmountText,i,1)) > 0 THEN
          FormattedAmount := FormattedAmount + COPYSTR(AmountText,i,1);
      END;
      EVALUATE(AmountNum,FormattedAmount);
      FormattedAmount := FormatNum(AmountNum,Length,FALSE);  // False = no decimals.
      EXIT(FormattedAmount);
    END;

    PROCEDURE Modulus11@4(AccountNo@1080000 : Text[30]) : Boolean;
    BEGIN
      // Rest = 0 is OK. [10.3 p58]
      EXIT(STRCHECKSUM(AccountNo,'5432765432',11) = 0);
    END;

    PROCEDURE Modulus10@5(AccountNo@1080000 : Text[30]) : Boolean;
    VAR
      t@1080001 : ARRAY [11] OF Integer;
      TempStr@1080002 : Text[30];
      i@1080003 : Integer;
      ControlDigit@1080004 : Text[30];
    BEGIN
      // Rest = 0 is OK. [10.1 p57]
      // Create account no. with 11 chars:
      IF STRLEN(AccountNo) = 7 THEN
        AccountNo := STRSUBSTNO('0000%1',AccountNo);
      ControlDigit := AccountNo; // Control digit. Later changed at char. 2, 4, 6..10

      // Calculate ControlDigit at chars. 2, 4, 6, 8 and 10:
      EVALUATE(t[1],COPYSTR(AccountNo,2,1));
      EVALUATE(t[2],COPYSTR(AccountNo,4,1));
      EVALUATE(t[3],COPYSTR(AccountNo,6,1));
      EVALUATE(t[4],COPYSTR(AccountNo,8,1));
      EVALUATE(t[5],COPYSTR(AccountNo,10,1));
      // multipl. with weighting:
      FOR i := 1 TO 5 DO BEGIN
        t[i] := t[i] * 2; // Multiplicate with weighting.
        // Check if larger then 10.
        // If larger then 10 calculate sum of the digits:
        IF t[i] > 10 THEN BEGIN
          TempStr := FORMAT(t[i]);
          t[i] := 99 - STRCHECKSUM(TempStr,'11',99); // sum of the digits
        END;
        TempStr := FORMAT(t[i]);
        ControlDigit[i * 2] := TempStr[1];
      END;

      // sum of the digits is dividable with 10, OK:
      EXIT(STRCHECKSUM(ControlDigit,'11111111111',10) = 0);
    END;

    PROCEDURE NextSeqNo@6(VAR RemAgreement@1080000 : Record 11128503;NoType@1080001 : 'Daily,Global') : Code[6];
    VAR
      Returnvar@1080002 : Code[10];
      NextNo@1080003 : Integer;
    BEGIN
      // Find next sequence number for RemAccount, depending on parameter.
      // Daily : no. is returned with the length of 6 chars. Global: the length is 4. Leading zeros.
      RemAgreement.LOCKTABLE;
      CASE NoType OF
        NoType::Daily:
          BEGIN
            IF RemAgreement."Latest Export" <> TODAY THEN // Not exported today. Start at 000001.
              NextNo := 1
            ELSE
              NextNo := RemAgreement."Latest Daily Sequence No." + 1;
            IF NextNo > 999999 THEN
              NextNo := 1;
            RemAgreement."Latest Daily Sequence No." := NextNo;
            RemAgreement."Latest Export" := TODAY;
            // Length 6 char:
            Returnvar := STRSUBSTNO('00000%1',NextNo);
            Returnvar := COPYSTR(Returnvar,STRLEN(Returnvar) - 5);
          END;
        NoType::Global:
          BEGIN
            NextNo := RemAgreement."Latest Sequence No." + 1;
            IF NextNo > 9999 THEN // Start from the beginning with 0000. OBS: The first one should be 0001.
              NextNo := 0;
            RemAgreement."Latest Sequence No." := NextNo;
            // Length 4 char:
            Returnvar := STRSUBSTNO('00000%1',NextNo);
            Returnvar := COPYSTR(Returnvar,STRLEN(Returnvar) - 3); // Last 4 chars.
          END;
      END;
      RemAgreement.MODIFY(TRUE);
      EXIT(Returnvar);
    END;

    PROCEDURE CreateJournalData@8(VAR GenJournalLine@1080000 : Record 81;VendEntry@1080001 : Record 25);
    VAR
      Vendor@1080002 : Record 23;
      RemAccount@1080003 : Record 11128506;
      SymbrioSetup@1100285500 : Record 11127975;
      PurchInvHeader@1100285501 : Record 122;
    BEGIN
      // Insert remittance data in journal line
      GenJournalLine.TESTFIELD("Account Type",GenJournalLine."Account Type"::Vendor);
      Vendor.GET(GenJournalLine."Account No.");
      RemAccount.GET(Vendor."Remittance Account Code");

      // Insert remittance info:
      GenJournalLine.VALIDATE("Remittance Account Code",Vendor."Remittance Account Code");
      GenJournalLine.VALIDATE("Payment Due Date",VendEntry."Due Date");
      GenJournalLine.VALIDATE("Remittance Type",RemAccount.Type);
      GenJournalLine.VALIDATE("Payment Type Code Domestic",Vendor."Payment Type Code Domestic");
      GenJournalLine."Our Account No." := Vendor."Our Account No.";
      GenJournalLine.VALIDATE("BOLS Text Code",Vendor."BOLS Text Code");
      IF NOT RemAccount."No KID" THEN //150630
        GenJournalLine.VALIDATE(KID,VendEntry.KID);
      GenJournalLine.VALIDATE("Payment Type Code Abroad",Vendor."Payment Type Code Abroad");
      GenJournalLine.VALIDATE("Specification (Norges Bank)",Vendor."Specification (Norges Bank)");
      GenJournalLine.VALIDATE("Futures Contract No.",RemAccount."Futures Contract No.");
      GenJournalLine.VALIDATE("Futures Contract Exch. Rate",RemAccount."Futures Contract Exch. Rate");

      GenJournalLine."Structured Payment" := NOT ((GenJournalLine.KID = '') AND (GenJournalLine."External Document No." = ''));

      //>>RFC034
      IF SymbrioSetup.GET AND (GenJournalLine."Applies-to Doc. Type" = GenJournalLine."Applies-to Doc. Type"::Invoice) AND (PurchInvHeader.GET(GenJournalLine."Applies-to Doc. No.")) THEN BEGIN
        GenJournalLine."Structured Payment" := NOT ((GenJournalLine.KID = '') AND (GenJournalLine."External Document No." = '') AND (PurchInvHeader."Payment Reference NO" = '') );
      END;
      //<<RFC034

      CASE RemAccount.Type OF
        RemAccount.Type::Domestic:
          IF NOT GenJournalLine."Structured Payment" THEN BEGIN
            // Insert formatted text on unstructured payments
            GenJournalLine.VALIDATE("Recipient Ref. 1",FormatRecipientRef(RemAccount,GenJournalLine,1));
            GenJournalLine.VALIDATE("Recipient Ref. 2",FormatRecipientRef(RemAccount,GenJournalLine,2));
            GenJournalLine.VALIDATE("Recipient Ref. 3",FormatRecipientRef(RemAccount,GenJournalLine,3));
          END;
        RemAccount.Type::Foreign:
          GenJournalLine.VALIDATE("Recipient Ref. Abroad",FormatRecipientRef(RemAccount,GenJournalLine,0));
      END;
    END;

    PROCEDURE MarkEntry@15(JournalLine@1080000 : Record 81;Mark@1080001 : Text[3];PaymOrderID@1080002 : Integer);
    VAR
      VendEntry@1080003 : Record 25;
    BEGIN
      // Marks the entries for journal line.
      // 1. vendEntryRec."On Hold" is marked, and therefor exempted from later payment suggestions.
      // Mark '' is used to delete marks.
      // 2. vendEntryRec."Remittance ID" is a reference for remittance.
      // If 0 is specified in PaymOrderID, the ID is not changed.

      // No entries to balance. No entries are marked then.
      IF JournalLine."Applies-to Doc. No." = '' THEN
        EXIT;

      SearchEntry(JournalLine,VendEntry);

      // Mark entries:
      IF PaymOrderID <> 0 THEN  // If id=0, the id is not changed in the entry:
        VendEntry.MODIFYALL("Remittance ID",PaymOrderID);

      //>>150612
      //VendEntry.MODIFYALL("On Hold",Mark);
      IF VendEntry.FINDSET(TRUE) THEN
      REPEAT
        VendEntry."On Hold" := Mark;  //Don't validate...
        VendEntry.MODIFY(FALSE);
      UNTIL VendEntry.NEXT=0;
      //<<150612
    END;

    PROCEDURE SearchEntry@26(JournalLine@1080000 : Record 81;VAR VendEntry@1080001 : Record 25);
    BEGIN
      // Find entry(s) for journal line:
      VendEntry.INIT;
      VendEntry.SETCURRENTKEY("Document No.");
      VendEntry.SETRANGE("Document Type",JournalLine."Applies-to Doc. Type");
      VendEntry.SETRANGE("Document No.",JournalLine."Applies-to Doc. No.");
      VendEntry.SETRANGE("Vendor No.",JournalLine."Account No.");
      VendEntry.FINDLAST;

      // Check if the entry is unique
      IF VendEntry.COUNT <> 1 THEN
        ERROR(
          WrongEntryErr,VendEntry.COUNT,JournalLine."Line No.",VendEntry."Vendor No.",VendEntry."Entry No.");
      IF JournalLine."Account Type" <> JournalLine."Account Type"::Vendor THEN
        ERROR(
          WrongAccountTypeErr,JournalLine."Line No.",JournalLine."Account Type",VendEntry."Vendor No.",
          VendEntry."Entry No.");
    END;

    PROCEDURE FormatRecipientRef@27(RemAccount@1080000 : Record 11128506;GenJnlLine@1080001 : Record 81;RefNo@1080002 : Integer) : Text[80];
    VAR
      RemAgreement@1080003 : Record 11128503;
      Vendor@1080004 : Record 23;
      VendEntry@1080005 : Record 25;
      Message@1080006 : Text[250];
      Ref1@1080008 : Text[80];
      Ref2@1080009 : Text[80];
      Ref3@1080010 : Text[80];
      RefU@1080011 : Text[80];
    BEGIN
      // Format the message and check the length
      RemAgreement.GET(RemAccount."Remittance Agreement Code");
      Vendor.GET(GenJnlLine."Account No.");
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN
        SearchEntry(GenJnlLine,VendEntry)
      ELSE
        VendEntry.INIT;
      // Decide if the recipient ref. comes from vendor or rem. account, and if the text is for invoice or credit memo
      IF Vendor."Own Vendor Recipient Ref." THEN BEGIN
        IF GenJnlLine.Amount >= 0 THEN BEGIN
          Ref1 := Vendor."Recipient ref. 1 - inv.";
          Ref2 := Vendor."Recipient ref. 2 - inv.";
          Ref3 := Vendor."Recipient ref. 3 - inv.";
        END ELSE BEGIN
          Ref1 := Vendor."Recipient ref. 1 - cred.";
          Ref2 := Vendor."Recipient ref. 2 - cred.";
          Ref3 := Vendor."Recipient ref. 3 - cred.";
        END;
        RefU := Vendor."Recipient Ref. Abroad";
      END ELSE BEGIN
        IF GenJnlLine.Amount >= 0 THEN BEGIN
          Ref1 := RemAccount."Recipient ref. 1 - Invoice";
          Ref2 := RemAccount."Recipient ref. 2 - Invoice";
          Ref3 := RemAccount."Recipient ref. 3 - Invoice";
        END ELSE BEGIN
          Ref1 := RemAccount."Recipient ref. 1 - Cr. Memo";
          Ref2 := RemAccount."Recipient ref. 2 - Cr. Memo";
          Ref3 := RemAccount."Recipient ref. 3 - Cr. Memo";
        END;
        RefU := RemAccount."Recipient Ref. Abroad";
      END;
      // Decides which message is used
      CASE RemAccount.Type OF
        RemAccount.Type::Domestic:
          CASE RefNo OF
            1:
              Message := Ref1;
            2:
              Message := Ref2;
            3:
              Message := Ref3;
          END;
        RemAccount.Type::Foreign:
          Message := RefU;
      END;

      // Format the text. Following formating is done:
      // %1: document type
      // %2: VendEntry."External Document No."
      // %3: VendEntry."Our accountno."
      // %4: VendEntry."Document No."
      // %5: VendEntry.Description
      // %6: VendEntry.Amount
      // %7: VendEntry.Restamount
      // %8: VendEntry."Amount (NOK)"
      // %9: VendEntry."Currency code"
      // %10: VendEntry."Payment term"
      // %11: VendEntry.KID
      Message :=
        STRSUBSTNO(Message,VendEntry."Document Type",VendEntry."External Document No.",Vendor."Our Account No.",
          VendEntry."Document No.",VendEntry.Description,ABS(VendEntry.Amount),ABS(VendEntry."Remaining Amount"),
          ABS(VendEntry."Amount (LCY)"),VendEntry."Currency Code",VendEntry."Due Date",VendEntry.KID);

      IF STRLEN(Message) > MaxMessageLength(RemAgreement) THEN
        IF Vendor."Own Vendor Recipient Ref." THEN
          ERROR(
            text018 + text019 + text020 + text021,
            VendEntry."Vendor No.",VendEntry."Document Type",VendEntry."Document No.",
            MaxMessageLength(RemAgreement),COPYSTR(Message,1,40))
        ELSE
          ERROR(
            text018 + text019 + text020 + text022,
            VendEntry."Vendor No.",VendEntry."Document Type",VendEntry."Document No.",
            MaxMessageLength(RemAgreement),COPYSTR(Message,1,40),
            RemAccount.Code);

      EXIT(Message);
    END;

    PROCEDURE MaxMessageLength@30(RemAccount@1080000 : Record 11128503) : Integer;
    BEGIN
      // Check text length
      IF RemAccount."Payment System" = RemAccount."Payment System"::BBS THEN
        EXIT(80);

      EXIT(40);
    END;

    PROCEDURE NewFilename@16(FileName@1080000 : Text[250]) : Text[250];
    VAR
      FileMgt@1080004 : Codeunit 419;
      File1@1080001 : Text[250];
      File2@1080002 : Text[250];
    BEGIN
      // rename the file in a following way: Exmpl of a fileName=Text002:
      // 1. Evt. file 'c:\payment.d~~' is deleted.
      // 2. Evt. file 'c:\payment.da~' is renamed to 'c:\betaling.d~~'.
      // 3. File 'c:\payment.dat' is renamed to 'c:\payment.da~'.
      // This is used to save old versions of payment files and return data. If the user
      // forgets to import a file for ex., the file will get an ~ ending after the next import.
      // RETURN: New filename of the current file.

      // If one of the two last chras. is  ~ , the new filename is NOT created.
      // This because the name already exists, as an older file
      // for ex. if the user imports an old file

      IF FileMgt.ClientFileExists(FileName) THEN BEGIN
        IF (COPYSTR(FileName,STRLEN(FileName) - 1,1) = '~') OR
           (COPYSTR(FileName,STRLEN(FileName) - 2,1) = '~')
        THEN
          EXIT;

        File1 := COPYSTR(FileName,1,STRLEN(FileName) - 1) + '~';
        File2 := COPYSTR(FileName,1,STRLEN(FileName) - 2) + '~~';
        IF FileMgt.ClientFileExists(File2) THEN
          FileMgt.DeleteClientFile(File2);
        IF FileMgt.ClientFileExists(File1) THEN
          FileMgt.MoveFile(File1,File2);
        FileMgt.MoveFile(FileName,File1);
      END;

      EXIT(File1);
    END;

    PROCEDURE SettleWaitingJournal@14(GenJnlLine@1080000 : Record 81);
    VAR
      WaitingJnlLine@1080001 : Record 11128507;
    BEGIN
      // Mark the status as settled in waiting journal belonging to the journal line
      IF GenJnlLine."Waiting Journal Reference" = 0 THEN
        EXIT;
      WaitingJnlLine.GET(GenJnlLine."Waiting Journal Reference");
      WaitingJnlLine.VALIDATE("Remittance Status",WaitingJnlLine."Remittance Status"::Settled);
      WaitingJnlLine.MODIFY(TRUE);
      // Update entry. 'REM' OnHold-mark is removed:
      MarkEntry(GenJnlLine,'',0);
    END;

    PROCEDURE SettlePaymOrdWithoutReturnFile@31(PaymOrder@1080000 : Record 11128504;GenJnlLine@1080001 : Record 81);
    VAR
      WaitingJournal@1080002 : Record 11128507;
      RemAccount@1080003 : Record 11128506;
      NrSerieControl@1080004 : Codeunit 396;
      NextLineNo@1080005 : Integer;
      NextDocumentNo@1080006 : Code[20];
    BEGIN
      // Settle a payment order without import of a return file
      // Payments are created in a journal specified in GenJnlLine
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      IF GenJnlLine.FINDLAST THEN
        NextLineNo := GenJnlLine."Line No."
      ELSE
        NextLineNo := 10000;
      RemAccount.GET(GenJnlLine."Remittance Account Code");

      WaitingJournal.SETRANGE("Payment Order ID - Sent",PaymOrder.ID);
      IF WaitingJournal.FINDSET THEN
        REPEAT
          // Init document no.
          CLEAR(NrSerieControl);
          NextDocumentNo := '';
          NextDocumentNo := NrSerieControl.GetNextNo(RemAccount."Document No. Series",WORKDATE,TRUE);

          GenJnlLine.VALIDATE("Line No.",NextLineNo);
          NextLineNo := NextLineNo + 10000;
          GenJnlLine.VALIDATE("Document No.",NextDocumentNo);
          GenJnlLine.VALIDATE("Bal. Account Type",RemAccount."Account Type");

          GenJnlLine.VALIDATE("Bal. Account No.",RemAccount."Account No.");
          SettlePaymentWithoutReturnFile(WaitingJournal,GenJnlLine);
        UNTIL WaitingJournal.NEXT = 0;
    END;

    PROCEDURE SettlePaymentWithoutReturnFile@32(WaitingJournal@1080000 : Record 11128507;GenJnlLine@1080001 : Record 81);
    VAR
      StoreGenJnlLine@1080002 : Record 81;
    BEGIN
      // Settle a payment without import of a return file
      // GenJnlline is initialized with following fields:
      // Line no., Document no., Bal. Account type, Bal. account no. Remaining fields are initialized here..
      StoreGenJnlLine := GenJnlLine;
      GenJnlLine.TRANSFERFIELDS(WaitingJournal);
      GenJnlLine.VALIDATE("Line No.",StoreGenJnlLine."Line No.");
      GenJnlLine.VALIDATE("Document No.",StoreGenJnlLine."Document No.");
      GenJnlLine.VALIDATE("Bal. Account Type",StoreGenJnlLine."Bal. Account Type");
      GenJnlLine.VALIDATE("Bal. Account No.",StoreGenJnlLine."Bal. Account No.");
      GenJnlLine.INSERT(TRUE);
    END;

    PROCEDURE InsertWarning@21(VAR GenJnlLine@1080000 : Record 81;Text@1080001 : Text[100]);
    BEGIN
      GenJnlLine.VALIDATE("Remittance Warning",TRUE);
      GenJnlLine.VALIDATE("Remittance Warning Text",Text);
    END;

    PROCEDURE PrintPaymentOverview@23(RemPaymOrderID@1080000 : Integer);
    VAR
      RemPaymOrder@1080001 : Record 11128504;
      WaitingJournalLine@1080002 : Record 11128507;
    BEGIN
      WaitingJournalLine.SETFILTER(
        "Remittance Status",'%1|%2',
        WaitingJournalLine."Remittance Status"::Sent,WaitingJournalLine."Remittance Status"::Approved);
      IF RemPaymOrder.GET(RemPaymOrderID) THEN
        WaitingJournalLine.SETRANGE("Payment Order ID - Sent",RemPaymOrder.ID);
      // TODO: Revert code after report upgrading.
      // PaymentOverview.SETTABLEVIEW(WaitingJournalLine);
      // PaymentOverview.RUN;
    END;

    PROCEDURE ReturnError@24(ReturnCode@1080000 : Text[2]) : Text[250];
    VAR
      ErrorText@1080001 : Text[250];
    BEGIN
      // If error text returns '', then it's not an error
      CASE ReturnCode OF
        '00':
          ErrorText := text023;
        '01':
          ErrorText := '';
        '02':
          ErrorText := '';
        '10':
          ErrorText := text024;
        '11':
          ErrorText := text025;
        '12':
          ErrorText := text026;
        '13':
          ErrorText := text027;
        '14':
          ErrorText := text028;
        '15':
          ErrorText := text060;
        '16':
          ErrorText := text061;
        '17':
          ErrorText := text029;
        '18':
          ErrorText := text062;
        '19':
          ErrorText := text030;
        '20':
          ErrorText := text031;
        '21':
          ErrorText := text032;
        '22':
          ErrorText := text033;
        '25':
          ErrorText := text034;
        '26':
          ErrorText := text035;
        '27':
          ErrorText := text036;
        '28':
          ErrorText := text037;
        '29':
          ErrorText := text038;
        '30':
          ErrorText := text039;
        '34':
          ErrorText := text040;
        '35':
          ErrorText := text041;
        '36':
          ErrorText := text042;
        '37':
          ErrorText := text063;
        '38':
          ErrorText := text064;
        '39':
          ErrorText := text065;
        '40':
          ErrorText := text066;
        '41':
          ErrorText := text043;
        '42':
          ErrorText := text067;
        '43':
          ErrorText := text068;
        '44':
          ErrorText := text044;
        '45':
          ErrorText := text069;
        '80':
          ErrorText := text045;
        '81':
          ErrorText := text046;
        '82':
          ErrorText := text047;
        '83':
          ErrorText := text048;
        '84':
          ErrorText := text070;
        '85':
          ErrorText := text071;
        '86':
          ErrorText := text072;
        '87':
          ErrorText := text073;
        '88':
          ErrorText := text074;
        '89':
          ErrorText := text049;
        '90':
          ErrorText := text050;
        '91':
          ErrorText := text051;
        '92':
          ErrorText := text052;
        '95':
          ErrorText := text053;
        ELSE
          ErrorText := text054;
      END;
      IF ErrorText <> '' THEN
        ErrorText := STRSUBSTNO(text055,ReturnCode,ErrorText);
      EXIT(ErrorText);
    END;

    PROCEDURE NextBBSPaymOrderNo@25(RemAgreement@1080000 : Record 11128503) : Integer;
    BEGIN
      // Find and update next payment order no. for BBS payments.
      RemAgreement.LOCKTABLE;
      RemAgreement."Latest BBS Payment Order No." := RemAgreement."Latest BBS Payment Order No." + 1;
      IF RemAgreement."Latest BBS Payment Order No." > 9999999 THEN
        RemAgreement."Latest BBS Payment Order No." := 1;
      RemAgreement.MODIFY(TRUE);
      EXIT(RemAgreement."Latest BBS Payment Order No.");
    END;

    PROCEDURE VendorInitRecipientRef@29(VAR Vendor@1080000 : Record 23;RemAccount@1080001 : Record 11128506);
    BEGIN
      CASE RemAccount.Type OF
        RemAccount.Type::Domestic:
          BEGIN
            // Not specified. insert def.
            Vendor.VALIDATE("Recipient ref. 1 - inv.",RemAccount."Recipient ref. 1 - Invoice");
            Vendor.VALIDATE("Recipient ref. 2 - inv.",RemAccount."Recipient ref. 2 - Invoice");
            Vendor.VALIDATE("Recipient ref. 3 - inv.",RemAccount."Recipient ref. 3 - Invoice");
            Vendor.VALIDATE("Recipient ref. 1 - cred.",RemAccount."Recipient ref. 1 - Cr. Memo");
            Vendor.VALIDATE("Recipient ref. 2 - cred.",RemAccount."Recipient ref. 2 - Cr. Memo");
            Vendor.VALIDATE("Recipient ref. 3 - cred.",RemAccount."Recipient ref. 3 - Cr. Memo");
          END;
        RemAccount.Type::Foreign:
          Vendor.VALIDATE("Recipient Ref. Abroad",RemAccount."Recipient Ref. Abroad");
      END;
    END;

    BEGIN
    {
      cod15000002
      151216 ITERO.DL RFC034 extend "Structured Payment" in CreateJournalData()
    }
    END.
  }
}

