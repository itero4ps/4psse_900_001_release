OBJECT Codeunit 11128771 Create Condition Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExcelAutomation@1100528601 : Codeunit 11012402;
      NEN2767Management@1100528609 : Codeunit 11012863;
      Text001@1100528600 : TextConst 'ENU="Condition "';
      WordEnumeration@1100528603 : Codeunit 11012377;
      WordAutomation@1100528614 : Codeunit 11229284;
      noOfRows@1100528602 : Integer;
      noOfTasks@1100528608 : Integer;
      noOfObjects@1100528611 : Integer;
      Text002@1100528604 : TextConst 'ENU=Defect';
      Text003@1100528605 : TextConst 'ENU=Interest';
      Text004@1100528606 : TextConst 'ENU=Intensity';
      Text005@1100528607 : TextConst 'ENU=Scale';
      Text006@1100528610 : TextConst 'ENU=Task';
      Text007@1100528612 : TextConst 'ENU=Year';
      Text008@1100528613 : TextConst 'ENU=Total';
      CentimetersToPointsFactor@1100528634 : Decimal;
      ProgressDialog@1100528632 : Dialog;
      Text009@1100528633 : TextConst 'ENU=Initialize: @1@@@@@@@@\Condition: @2@@@@@@@@\Object: @3@@@@@@@@';
      Text010@1100528635 : TextConst 'ENU=Done';
      Text011@1100528615 : TextConst 'ENU=Year of Manufacture:';
      Text012@1100528616 : TextConst 'ENU=Desired Condition:';
      Text013@1100528617 : TextConst 'ENU=Condition Measurement Date:';
      Text014@1100528618 : TextConst 'ENU=Building';
      Text015@1100528619 : TextConst 'ENU=Floor';
      Text016@1100528620 : TextConst 'ENU=Room';
      Text017@1100528621 : TextConst 'ENU=Grand Total';

    PROCEDURE CreateExcel@1100528602(ServiceLocation@1100528601 : Record 11012801);
    VAR
      NEN2767ConditionMeasHeaderRec@1100528605 : Record 11128776;
      NEN2767ConditionMeasLineRec@1100528604 : Record 11128777;
      ServiceObject@1100525000 : Record 11071691;
      MeasurementDate@1100528603 : Date;
      i@1100528602 : Integer;
    BEGIN
      ExcelAutomation.InitExcel;
      ExcelAutomation.InitWorkbook(DetermineSheetName(ServiceLocation.Description));
      noOfRows := 0;
      CreateHeader(ServiceLocation."No." +' '+ServiceLocation.Description,
        ServiceLocation.Address +', '+ServiceLocation."Post Code" +', '+ServiceLocation.City);

      FOR i := 6 DOWNTO 1 DO BEGIN
        GetObjectsByScore(ServiceObject, i, ServiceLocation."No.");
        IF ServiceObject.FINDFIRST THEN BEGIN
          MeasurementDate :=TODAY;
          CreateConditionHeader(i);
          NEN2767Management.GetConditionMeasureHeaderDS(ServiceObject."No.",MeasurementDate,NEN2767ConditionMeasHeaderRec);
          NEN2767ConditionMeasLineRec.SETFILTER("Service Object No.",ServiceObject."No.");
          NEN2767ConditionMeasLineRec.SETRANGE("Measurement Date",MeasurementDate);
          REPEAT
            CreateObjectBlock(ServiceObject);
          UNTIL ServiceObject.NEXT = 0;
        END;
      END;

      AlignColumns;
      ExcelAutomation.GiveUserControl;
    END;

    PROCEDURE CreateHeader@1100528605(ServiceLocation@1100528600 : Text[100];ServiceAddress@1100528601 : Text[100]);
    VAR
      ThreeTierAutomationMgt@1100525004 : Codeunit 419;
      CompanyInformation@1100525002 : Record 79;
      TempBlob@1100525003 : TEMPORARY Record 99008535;
      path@1100525001 : Text[250];
      charLF@1100525000 : Char;
    BEGIN
      CompanyInformation.CALCFIELDS(Picture);
      IF CompanyInformation.Picture.HASVALUE THEN BEGIN
        TempBlob.Blob := CompanyInformation.Picture;
        path := ThreeTierAutomationMgt.ClientTempFolderName +'CompanyLogo.bmp';
        ThreeTierAutomationMgt.BLOBExport4PS(TempBlob, path, FALSE, FALSE);
      END;

      charLF := 10; //next line in the same cell
      ExcelAutomation.SetMargins(-1, -1, 3, -1, -1, -1, FALSE, FALSE);
      ExcelAutomation.SetHeader(ServiceLocation + FORMAT(charLF) + ServiceAddress, '', '' ,path);
      ExcelAutomation.SetColumnWidthInRange('F:F', 11);
    END;

    PROCEDURE CreateConditionHeader@1100528608(conditionNo@1100528600 : Integer);
    VAR
      conditionDescription@1100528601 : Text[30];
      newHeaderRow@1100528602 : Integer;
    BEGIN
      newHeaderRow := noOfRows +1;

      ExcelAutomation.MergeCellsInRange('A'+ FORMAT(newHeaderRow) + ':F'+ FORMAT(newHeaderRow));
      ExcelAutomation.SetBordersInRange('A'+ FORMAT(newHeaderRow) + ':F'+ FORMAT(newHeaderRow),13,1,2);

      CASE conditionNo OF
        1 : ExcelAutomation.SetSettingBackgroundColour('GREEN');
        2 : ExcelAutomation.SetSettingBackgroundColour('Yellow');
        3 : ExcelAutomation.SetSettingBackgroundColour('LIGHTORANGE');
        4 : ExcelAutomation.SetSettingBackgroundColour('ORANGE');
        5 : ExcelAutomation.SetSettingBackgroundColour('DONKERORANJE');
        6 : ExcelAutomation.SetSettingBackgroundColour('RED');
      END;

      conditionDescription := Text001 + FORMAT(conditionNo);
      ExcelAutomation.SetSettingBold(TRUE);
      ExcelAutomation.WriteCell(1,newHeaderRow,conditionDescription);
      ExcelAutomation.SetSettingBold(FALSE);
      ExcelAutomation.SetSettingForegroundColour('BLACK');ExcelAutomation.SetSettingBackgroundColour('WHITE');

      noOfRows += 1;
    END;

    PROCEDURE CreateObjectBlock@1100528613(ServiceObject@1100525000 : Record 11071691);
    VAR
      NEN2767ConditionMeasHeaderRec@1100528607 : Record 11128776;
      NEN2767ConditionMeasLineRec@1100528606 : Record 11128777;
      LTMaintPlanTask@1100528601 : Record 11128781;
      MeasurementDate@1100528602 : Date;
      noOfFaults@1100528609 : Integer;
      noOfTasks@1100528608 : Integer;
      firstObjectRow@1100528603 : Integer;
    BEGIN
      MeasurementDate :=TODAY;
      NEN2767Management.GetConditionMeasureHeaderDS(ServiceObject."No.",MeasurementDate,NEN2767ConditionMeasHeaderRec);
      NEN2767ConditionMeasLineRec.SETFILTER("Service Object No.",ServiceObject."No.");
      NEN2767ConditionMeasLineRec.SETRANGE("Measurement Date",MeasurementDate);

      LTMaintPlanTask.SETFILTER("Service Object No.",ServiceObject."No.");
      LTMaintPlanTask.SETRANGE(Type, LTMaintPlanTask.Type::"Condition Measurement");

      firstObjectRow := noOfRows +1;
      noOfFaults := NEN2767ConditionMeasLineRec.COUNT -1;
      noOfTasks :=LTMaintPlanTask.COUNT -1;

      IF noOfFaults >= 0 THEN BEGIN
        MergeObjectCells(firstObjectRow,noOfFaults,noOfTasks);
        SetObjectBorders(firstObjectRow,noOfFaults,noOfTasks);
        FillObjectsWithData(NEN2767ConditionMeasLineRec,LTMaintPlanTask,ServiceObject, firstObjectRow,noOfFaults,noOfTasks);
        noOfObjects += 1;
      END;
    END;

    PROCEDURE SetObjectBorders@1100528601(firstObjectRow@1100528600 : Integer;noOfFaults@1100528603 : Integer;noOfTasks@1100528604 : Integer);
    VAR
      i@1100528601 : Integer;
      j@1100528602 : Integer;
    BEGIN
      ExcelAutomation.SetBordersInRange('A'+ FORMAT(firstObjectRow+1) + ':E' + FORMAT(firstObjectRow + 3),13,1,2); //Unit -> Condition
      ExcelAutomation.SetBordersInRange('A'+ FORMAT(firstObjectRow) + ':F' + FORMAT(firstObjectRow),13,1,2); //Objectblock


      FOR i := 0 TO noOfFaults DO BEGIN
        ExcelAutomation.SetBordersInRange('A'+ FORMAT(firstObjectRow + 4 + i) + ':A' + FORMAT(firstObjectRow + 4),13,1,2); //Lack
        ExcelAutomation.SetBordersInRange('B'+ FORMAT(firstObjectRow + 4 + i) + ':B' + FORMAT(firstObjectRow + 4),13,1,2); //Seriousness
        ExcelAutomation.SetBordersInRange('C'+ FORMAT(firstObjectRow + 4 + i) + ':C' + FORMAT(firstObjectRow + 4),13,1,2); //Intensity
        ExcelAutomation.SetBordersInRange('D'+ FORMAT(firstObjectRow + 4 + i) + ':D' + FORMAT(firstObjectRow + 4),13,1,2); //Size
        ExcelAutomation.SetBordersInRange('E'+ FORMAT(firstObjectRow + 4 + i) + ':E' + FORMAT(firstObjectRow + 4),13,1,2); //Condition
      END;

      IF noOfTasks >= 0 THEN BEGIN
        ExcelAutomation.SetBordersInRange('A'+ FORMAT(firstObjectRow + 5 + noOfFaults) + ':E'+
          FORMAT(firstObjectRow + 6 + noOfFaults),13,1,2); //white line
        FOR j := 0 TO noOfTasks DO BEGIN
          ExcelAutomation.SetBordersInRange('A'+ FORMAT(firstObjectRow + 7 + noOfFaults + j) + ':C' +
            FORMAT(firstObjectRow + 7 + noOfFaults + j),13,1,2); //Task
          ExcelAutomation.SetBordersInRange('D'+ FORMAT(firstObjectRow + 7 + noOfFaults + j) + ':D' +
            FORMAT(firstObjectRow + 7 + noOfFaults + j),13,1,2); //Year
          ExcelAutomation.SetBordersInRange('E'+ FORMAT(firstObjectRow + 7 + noOfFaults + j) + ':E' +
            FORMAT(firstObjectRow + 7 + noOfFaults + j),13,1,2); //Total
        END;
        ExcelAutomation.SetBordersInRange('F'+ FORMAT(firstObjectRow + 1) + ':F' +
          FORMAT(firstObjectRow + 7 + noOfFaults + noOfTasks),13,1,2); //Object image
        ExcelAutomation.SetBordersInRange('A'+ FORMAT(firstObjectRow + 8 + noOfFaults + j) + ':F' +
          FORMAT(firstObjectRow + 8 + noOfFaults + noOfTasks),13,1,2); //Empty line below object

      END ELSE BEGIN
          ExcelAutomation.SetBordersInRange('F'+ FORMAT(firstObjectRow + 1) + ':F' +
            FORMAT(firstObjectRow + 4 + noOfFaults),13,1,2); //Object image
          ExcelAutomation.SetBordersInRange('A'+ FORMAT(firstObjectRow + 5) + ':F' +
            FORMAT(firstObjectRow + 5 + noOfFaults),13,1,2); //Empty line below object

      END;


      ExcelAutomation.SetBordersInRange('A'+ FORMAT(firstObjectRow) + ':F' + FORMAT(firstObjectRow),9,1,3); //Object bold line
    END;

    PROCEDURE MergeObjectCells@1100528604(firstObjectRow@1100528600 : Integer;noOfFaults@1100528604 : Integer;noOfTasks@1100528603 : Integer);
    VAR
      j@1100528602 : Integer;
    BEGIN
      ExcelAutomation.MergeCellsInRange('A'+ FORMAT(firstObjectRow) + ':F'+FORMAT(firstObjectRow)); //Object
      ExcelAutomation.MergeCellsInRange('A'+ FORMAT(firstObjectRow + 1) + ':E'+FORMAT(firstObjectRow + 1)); //unit
      ExcelAutomation.MergeCellsInRange('A'+ FORMAT(firstObjectRow + 2) + ':E'+FORMAT(firstObjectRow + 2)); //White line

      IF noOfTasks >= 0 THEN BEGIN
        //ExcelAutomation.MergeCellsInRange('A'+ FORMAT(firstObjectRow + 5 + noOfFaults) + ':E'+
        //  FORMAT(firstObjectRow + 5 + noOfFaults)); //white line
        ExcelAutomation.MergeCellsInRange('A'+ FORMAT(firstObjectRow + 5 + noOfFaults) + ':C'+
          FORMAT(firstObjectRow + 6 + noOfFaults)); //Title Tasks
        ExcelAutomation.MergeCellsInRange('D'+ FORMAT(firstObjectRow + 5 + noOfFaults) + ':D'+
          FORMAT(firstObjectRow + 6 + noOfFaults)); //Year Tasks
        ExcelAutomation.MergeCellsInRange('E'+ FORMAT(firstObjectRow + 5 + noOfFaults) + ':E'+
          FORMAT(firstObjectRow + 6 + noOfFaults)); //Total Tasks



        FOR j := 0 TO noOfTasks DO BEGIN
          ExcelAutomation.MergeCellsInRange('A'+ FORMAT(firstObjectRow + 7 + noOfFaults + j)
            + ':C'+FORMAT(firstObjectRow + 7 + noOfFaults + j));  //Description tasks
        END;
        ExcelAutomation.MergeCellsInRange('F'+ FORMAT(firstObjectRow + 1) + ':F'+FORMAT(firstObjectRow + 7 + noOfFaults + noOfTasks));
        //Object image
      END ELSE;
        ExcelAutomation.MergeCellsInRange('F'+ FORMAT(firstObjectRow + 1) + ':F'+FORMAT(firstObjectRow + 5 + noOfFaults + noOfTasks));
        //Object image
    END;

    PROCEDURE FillObjectsWithData@1100528610(VAR NEN2767ConditionMeasLineRec@1100528604 : Record 11128777;VAR LTMaintPlanTask@1100528603 : Record 11128781;ServiceObject@1100525000 : Record 11071691;firstObjectRow@1100528600 : Integer;noOfFaults@1100528602 : Integer;noOfTasks@1100528601 : Integer);
    VAR
      NEN2767Defect@1100528607 : Record 11128773;
      i@1100528606 : Integer;
      j@1100528605 : Integer;
    BEGIN
      ExcelAutomation.SetSettingBold(TRUE);
      ExcelAutomation.WriteCell(1,firstObjectRow, ServiceObject."No." +' '+ ServiceObject.Description);
      ExcelAutomation.SetSettingBold(FALSE);
      ExcelAutomation.WriteCell(1,firstObjectRow + 1, ServiceObject.Room);
      ExcelAutomation.SetSettingBold(TRUE);
      ExcelAutomation.WriteCell(1,firstObjectRow + 3, Text002);
      ExcelAutomation.WriteCell(2,firstObjectRow + 3, Text003);
      ExcelAutomation.WriteCell(3,firstObjectRow + 3, Text004);
      ExcelAutomation.WriteCell(4,firstObjectRow + 3, Text005);
      ExcelAutomation.WriteCell(5,firstObjectRow + 3, Text001);
      ExcelAutomation.SetSettingBold(FALSE);
      IF ServiceObject.Picture.HASVALUE THEN
        SetBlobImage(ServiceObject);

      IF NEN2767ConditionMeasLineRec.FINDFIRST THEN BEGIN
        i := 0;
        REPEAT
          IF NEN2767Defect.GET(NEN2767ConditionMeasLineRec."Defect Code") THEN
            ExcelAutomation.WriteCell(1,firstObjectRow + 4 + i, NEN2767Defect.Description);
          ExcelAutomation.WriteCell(2,firstObjectRow + 4 + i, FORMAT(NEN2767ConditionMeasLineRec.Interest));
          ExcelAutomation.WriteCell(3,firstObjectRow + 4 + i, FORMAT(NEN2767ConditionMeasLineRec.Intensity));
          ExcelAutomation.WriteCell(4,firstObjectRow + 4 + i, FORMAT(NEN2767ConditionMeasLineRec.Scale));
          ExcelAutomation.WriteCell(5,firstObjectRow + 4 + i, FORMAT(NEN2767ConditionMeasLineRec.Score));
          i +=1;
        UNTIL NEN2767ConditionMeasLineRec.NEXT = 0;
      END;

      IF LTMaintPlanTask.FINDFIRST THEN BEGIN
        ExcelAutomation.SetSettingBold(TRUE);
        ExcelAutomation.WriteCell(1,firstObjectRow + 5 + noOfFaults, Text006);
        ExcelAutomation.WriteCell(4,firstObjectRow + 5 + noOfFaults, Text007);
        ExcelAutomation.WriteCell(5,firstObjectRow + 5 + noOfFaults, Text008);
        ExcelAutomation.SetSettingBold(FALSE);
        j :=0;

        REPEAT
        ExcelAutomation.WriteCell(
          1,firstObjectRow + 7 + noOfFaults + j, LTMaintPlanTask."Task No." + ' ' + LTMaintPlanTask.Description);
        ExcelAutomation.WriteCell(4,firstObjectRow + 7 + noOfFaults + j, FORMAT(LTMaintPlanTask."Expected Execution Year"));
        ExcelAutomation.WriteCell(5,firstObjectRow + 7 + noOfFaults + j, FORMAT(LTMaintPlanTask.Amount));
        j += 1;
        UNTIL LTMaintPlanTask.NEXT = 0;
        noOfRows += 9 + noOfFaults + noOfTasks
      END ELSE
        noOfRows += 7 + noOfFaults + noOfTasks;
    END;

    PROCEDURE GetObjectsByScore@1100528606(VAR ServiceObject@1100525001 : Record 11071691;ConditionScore@1100528600 : ',1,2,3,4,5,6';ServiceLocationNo@1100528603 : Code[20]);
    VAR
      lvConditionScore@1100528601 : ',1,2,3,4,5,6';
      ConditionMeasurementDate@1100528602 : Date;
      ServiceLocStructureLine@1100525000 : Record 11071720;
    BEGIN
      ServiceLocStructureLine.SETFILTER("Service Location No.", ServiceLocationNo);
      ServiceLocStructureLine.SETFILTER(ServiceLocStructureLine."Service Object No.", '<>%1','');
      CLEAR(ServiceObject);
      IF ServiceLocStructureLine.FINDFIRST THEN BEGIN
        REPEAT
           IF ServiceObject.GET(ServiceLocStructureLine."Service Object No.") THEN BEGIN
              ConditionMeasurementDate := TODAY;
              lvConditionScore := NEN2767Management.GetObjectConditionScore(ServiceObject."No.", ConditionMeasurementDate);
              IF lvConditionScore = ConditionScore THEN
                ServiceObject.MARK(TRUE);
           END;
        UNTIL ServiceLocStructureLine.NEXT = 0;
      END;
      ServiceObject.MARKEDONLY(TRUE);
    END;

    PROCEDURE SetBlobImage@1100528603(ServiceObject@1100525003 : Record 11071691);
    VAR
      ThreeTierAutomationMgt@1100525002 : Codeunit 419;
      TempBlob@1100525001 : TEMPORARY Record 99008535;
      path@1100525000 : Text[250];
      imageYpos@1100528600 : Decimal;
      imageXpos@1100528601 : Decimal;
    BEGIN
      ServiceObject.CALCFIELDS(Picture);
      IF ServiceObject.Picture.HASVALUE THEN BEGIN
        TempBlob.Blob := ServiceObject.Picture;
        path := ThreeTierAutomationMgt.ClientTempFolderName + 'ObjectPicture.bmp';
        ThreeTierAutomationMgt.BLOBExport4PS(TempBlob, path, FALSE, FALSE);
      END;

      imageYpos := (15*noOfRows) + (0.75 * noOfObjects) + 16;
      imageXpos := 48*5;

      ExcelAutomation.AddPicture(ROUND(imageXpos,1),ROUND(imageYpos,1),61.2,60,path);
      //15.75 for a row with a bold lower edge
      //15 for a normal row
    END;

    PROCEDURE AlignColumns@1100528611();
    VAR
      TotaleBreedte@1100528600 : Decimal;
    BEGIN
      ExcelAutomation.AutoFit(2,5);
      TotaleBreedte := ExcelAutomation.GetColumnWidthInRange(2,6);
      ExcelAutomation.SetColumnWidthInRange('A', 81 - ROUND(TotaleBreedte,1,'<'));
    END;

    PROCEDURE DetermineSheetName@1100525004(DescriptionServiceLocation@1100525000 : Text[50]) : Text[30];
    BEGIN
      EXIT(COPYSTR(DELCHR(DescriptionServiceLocation,'=',':|\|/|?|*|[|]'),1,30));
    END;

    LOCAL PROCEDURE "-----"@1100528600();
    BEGIN
    END;

    PROCEDURE CreateWord@1100528607(IServiceLocation@1100528623 : Record 11012801);
    VAR
      ServiceObject@1100528624 : Record 11071691;
      NEN2767LTMPSetup@1100528600 : Record 11128772;
      Condition@1100528613 : Integer;
      CurrentNoOfServiceObject@1100528631 : Integer;
      NoOfServiceObjects@1100528630 : Integer;
      TaskGrandTotal@1100528601 : Decimal;
    BEGIN
      ProgressDialog.OPEN(Text009);
      WordAutomation.CreateWordApplication;
      NEN2767LTMPSetup.GET;
      IF NEN2767LTMPSetup."Condition Word Template" = '' THEN
        WordAutomation.WordAddDocument
      ELSE BEGIN
        WordAutomation.WordOpenDocument(NEN2767LTMPSetup."Condition Word Template");
        IF NEN2767LTMPSetup."Condition Template Bookmark" <> '' THEN
          IF NOT WordAutomation.WordSelectionToBookmark(NEN2767LTMPSetup."Condition Template Bookmark") THEN
            WordAutomation.WordEndOfStory;
      END;
      ProgressDialog.UPDATE(1, 9999);

      FOR Condition := 6 DOWNTO 1 DO BEGIN
        ProgressDialog.UPDATE(2, ROUND((7 - Condition) / 6 * 9999, 1));
        GetObjectsByScore(ServiceObject, Condition, IServiceLocation."No.");
        IF ServiceObject.FINDFIRST THEN BEGIN
          CurrentNoOfServiceObject := 0;
          NoOfServiceObjects := ServiceObject.COUNT;
          REPEAT
            CurrentNoOfServiceObject += 1;
            ProgressDialog.UPDATE(3, ROUND(CurrentNoOfServiceObject / NoOfServiceObjects * 9999, 1));
            CreateWordObjectBlock(ServiceObject, Condition, TaskGrandTotal);
          UNTIL ServiceObject.NEXT = 0;
        END;
      END;

      IF NEN2767LTMPSetup."Cond. Templ. Task Total Bookm." <> '' THEN
        IF WordAutomation.WordSelectionToBookmark(NEN2767LTMPSetup."Cond. Templ. Task Total Bookm.") THEN
          WordAutomation.WordSelectionSetText(FORMAT(TaskGrandTotal, 0, '<Precision,2:3><Standard Format,0>'));

      WordAutomation.WordShowDocument;

      ProgressDialog.CLOSE;
    END;

    LOCAL PROCEDURE CreateWordObjectBlock@1100528612(IServiceObject@1100528600 : Record 11071691;ICondition@1100528607 : Integer;VAR OTaskGrandTotal@1100528602 : Decimal);
    VAR
      NEN2767ConditionMeasHeader@1100528608 : Record 11128776;
      NEN2767ConditionMeasLine@1100528609 : Record 11128777;
      LTMaintPlanTask@1100528611 : Record 11128781;
      MeasureDate@1100528610 : Date;
    BEGIN
      MeasureDate := TODAY;
      NEN2767Management.GetConditionMeasureHeaderDS(IServiceObject."No.", MeasureDate, NEN2767ConditionMeasHeader);
      NEN2767ConditionMeasLine.SETFILTER("Service Object No.", IServiceObject."No.");
      NEN2767ConditionMeasLine.SETRANGE("Measurement Date", MeasureDate);

      LTMaintPlanTask.SETFILTER("Service Object No.", IServiceObject."No.");
      LTMaintPlanTask.SETRANGE(Type, LTMaintPlanTask.Type::"Condition Measurement");

      IF NOT NEN2767ConditionMeasLine.ISEMPTY THEN
        FillWordObjectBlock(IServiceObject, ICondition, NEN2767ConditionMeasLine, LTMaintPlanTask, OTaskGrandTotal);
    END;

    LOCAL PROCEDURE FillWordObjectBlock@1100528645(IServiceObject@1100528601 : Record 11071691;ICondition@1100528605 : Integer;VAR INEN2767ConditionMeasLine@1100528603 : Record 11128777;VAR ILTMaintPlanTask@1100528602 : Record 11128781;VAR OTaskGrandTotal@1100528614 : Decimal);
    VAR
      TmpDocumentFilter@1100528606 : TEMPORARY Record 11012073;
      TmpDocumentProperties@1100528612 : TEMPORARY Record 11012746;
      ObjectSpecificationMgt@1100528600 : Codeunit 11012848;
      DocumentFilters@1100528604 : Codeunit 11012432;
      RecRef@1100528610 : RecordRef;
      RowsToCreate@1100528608 : Integer;
      RowNo@1100528607 : Integer;
      ColumnNo@1100528613 : Integer;
      ImagePath@1100528609 : Text;
      TotalTaskAmount@1100528611 : Decimal;
    BEGIN
      RowsToCreate := 10 + (INEN2767ConditionMeasLine.COUNT + GetNoOfPhotoLines(INEN2767ConditionMeasLine)) + (ILTMaintPlanTask.COUNT +1);
      WordAutomation.WordAddTable(
        RowsToCreate, 6, WordEnumeration.WdBuiltinStyle_wdStyleNormalTable, WordEnumeration.WdAutoFitBehavior_wdFitFixed);

      WordAutomation.WordTableSetColumnWidth(1, WordAutomation.CentimetersToPoints(3));
      WordAutomation.WordTableSetColumnWidth(2, WordAutomation.CentimetersToPoints(1.7));
      WordAutomation.WordTableSetColumnWidth(3, WordAutomation.CentimetersToPoints(2.5));
      WordAutomation.WordTableSetColumnWidth(4, WordAutomation.CentimetersToPoints(2.0));
      WordAutomation.WordTableSetColumnWidth(5, WordAutomation.CentimetersToPoints(2.5));
      WordAutomation.WordTableSetColumnWidth(6, WordAutomation.CentimetersToPoints(2.5));

      WordAutomation.WordTableGetSelectionByPosition(1, 1, RowsToCreate -1, 5);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderVertical, WordEnumeration.WdLineStyle_wdLineStyleNone);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderHorizontal, WordEnumeration.WdLineStyle_wdLineStyleNone);

      WordAutomation.WordTableMergeCellsOfRow(1);

      WordAutomation.WordTableSetCellBold(1, 1, TRUE);
      WordAutomation.WordTableSetCellBackgroundColor(1, 1, ConditionGetColor(ICondition));
      WordAutomation.WordTableSetCellText(1, 1, STRSUBSTNO('%1 %2', Text001, ICondition));

      WordAutomation.WordTableMergeCellsByPosition(2, 1, 0, 4);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderBottom, WordEnumeration.WdLineStyle_wdLineStyleNone);

      WordAutomation.WordTableSetCellBold(2, 1, TRUE);
      WordAutomation.WordTableSetCellText(2, 1, STRSUBSTNO('%1 %2', IServiceObject."No.", IServiceObject.Description));
      IServiceObject.CALCFIELDS(Picture);
      IF IServiceObject.Picture.HASVALUE THEN BEGIN
        ImagePath := BlobImageToTemporaryPath(IServiceObject);
        WordAutomation.WordTableAddPictureToCell(2, 2, ImagePath, FALSE, TRUE,
          10, 10, WordAutomation.CentimetersToPoints(2.5), -1);
      END;

      WordAutomation.WordTableMergeCellsByPosition(4, 1, 0, 1);
      WordAutomation.WordTableSetCellText(4, 1, Text011);
      WordAutomation.WordTableSetCellText(4, 2, ObjectSpecificationMgt.GetYearOfManufactureValue(IServiceObject."No."));

      WordAutomation.WordTableMergeCellsByPosition(5, 1, 0, 1);
      WordAutomation.WordTableSetCellText(5, 1, Text012);
      WordAutomation.WordTableSetCellText(5, 2, FORMAT(IServiceObject."Desired Condition Score"));

      WordAutomation.WordTableMergeCellsByPosition(6, 1, 0, 1);
      WordAutomation.WordTableSetCellText(6, 1, Text013);
      IF INEN2767ConditionMeasLine.FINDSET THEN
        WordAutomation.WordTableSetCellText(6, 2, FORMAT(INEN2767ConditionMeasLine."Measurement Date"));

      WordAutomation.WordTableGetSelectionByPosition(4, 1, 2, 0);
      WordAutomation.WordSelectionSetBold(TRUE);
      WordAutomation.WordTableGetSelectionByPosition(4, 3, 2, 0);
      WordAutomation.WordSelectionSetBold(TRUE);

      WordAutomation.WordTableSetCellText(4, 3, Text014);
      WordAutomation.WordTableSetCellText(4, 4, IServiceObject.Building);

      WordAutomation.WordTableSetCellText(5, 3, Text015);
      WordAutomation.WordTableSetCellText(5, 4, IServiceObject.Floor);

      WordAutomation.WordTableSetCellText(6, 3, Text016);
      WordAutomation.WordTableSetCellText(6, 4, IServiceObject.Room);

      RowNo := 8;
      WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 1);
      WordAutomation.WordTableGetSelectionByPosition(RowNo, 1, 0, 5);
      WordAutomation.WordSelectionSetBold(TRUE);
      WordAutomation.WordTableSetCellText(RowNo, 1, Text002);
      WordAutomation.WordTableSetCellText(RowNo, 2, Text003);
      WordAutomation.WordTableSetCellText(RowNo, 3, Text004);
      WordAutomation.WordTableSetCellText(RowNo, 4, Text005);
      WordAutomation.WordTableSetCellText(RowNo, 5, Text001);

      IF INEN2767ConditionMeasLine.FINDSET THEN BEGIN
        REPEAT
          RowNo += 1;
          INEN2767ConditionMeasLine.CALCFIELDS("Defect Description");
          WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 1);
          WordAutomation.WordTableSetCellText(RowNo, 1, INEN2767ConditionMeasLine."Defect Description");
          WordAutomation.WordTableSetCellText(RowNo, 2, FORMAT(INEN2767ConditionMeasLine.Interest));
          WordAutomation.WordTableSetCellText(RowNo, 3, FORMAT(INEN2767ConditionMeasLine.Intensity));
          WordAutomation.WordTableSetCellText(RowNo, 4, FORMAT(INEN2767ConditionMeasLine.Scale));
          WordAutomation.WordTableSetCellText(RowNo, 5, FORMAT(INEN2767ConditionMeasLine.Score));

          RecRef.GETTABLE(INEN2767ConditionMeasLine);
          DocumentFilters.CreateTemporaryFilter(RecRef, TmpDocumentFilter);
          DocumentFilters.ApplyDocumentFilter(TmpDocumentFilter, TmpDocumentProperties);
          TmpDocumentProperties.SetFilterOnlyPictures;
          IF TmpDocumentProperties.FINDSET THEN BEGIN
            RowNo += 1;
            ColumnNo := 1;
            WordAutomation.WordTableSetRowHeight(RowNo, WordAutomation.CentimetersToPoints(2.5));
            REPEAT
              ImagePath := TmpDocumentProperties.FullFileName;
              IF ColumnNo <= 6 THEN
                WordAutomation.WordTableAddPictureToCell(RowNo, ColumnNo, ImagePath, FALSE, TRUE,
                  0, 0, WordAutomation.CentimetersToPoints(2.5), -1);
              ColumnNo += 1;
            UNTIL TmpDocumentProperties.NEXT = 0;
          END;
        UNTIL INEN2767ConditionMeasLine.NEXT = 0;
      END;

      RowNo += 2;
      WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 2);
      WordAutomation.WordTableGetSelectionOfCell(RowNo, 1);
      WordAutomation.WordSelectionExtendHorizontaly(2);
      WordAutomation.WordSelectionSetBold(TRUE);

      WordAutomation.WordTableSetCellText(RowNo, 1, Text006);
      WordAutomation.WordTableSetCellText(RowNo, 2, Text007);
      WordAutomation.WordTableSetCellText(RowNo, 3, Text008);
      WordAutomation.WordSelectionAlignment(WordEnumeration.WdParagraphAlignment_wdAlignParagraphRight);

      IF ILTMaintPlanTask.FINDSET THEN BEGIN
        REPEAT
          RowNo += 1;
          WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 2);
          WordAutomation.WordTableSetCellText(RowNo, 1, STRSUBSTNO('%1 %2', ILTMaintPlanTask."Task No.", ILTMaintPlanTask.Description));
          WordAutomation.WordTableSetCellText(RowNo, 2, FORMAT(ILTMaintPlanTask."Expected Execution Year"));
          WordAutomation.WordTableSetCellText(RowNo, 3, FORMAT(ILTMaintPlanTask.Amount, 0, '<Precision,2:3><Standard Format,0>'));
          WordAutomation.WordSelectionAlignment(WordEnumeration.WdParagraphAlignment_wdAlignParagraphRight);
          TotalTaskAmount += ILTMaintPlanTask.Amount;
          RowNo += 1;
        UNTIL ILTMaintPlanTask.NEXT = 0;

        WordAutomation.WordTableMergeCellsByPosition(RowNo, 1, 0, 2);
        WordAutomation.WordTableSetCellText(RowNo, 1, Text008);
        WordAutomation.WordSelectionSetBold(TRUE);
        WordAutomation.WordTableSetCellText(RowNo, 3, FORMAT(TotalTaskAmount, 0, '<Precision,2:3><Standard Format,0>'));
        WordAutomation.WordSelectionSetBold(TRUE);
        WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderTop, WordEnumeration.WdLineStyle_wdLineStyleSingle);
        WordAutomation.WordSelectionAlignment(WordEnumeration.WdParagraphAlignment_wdAlignParagraphRight);
        RowNo += 1;

        OTaskGrandTotal += TotalTaskAmount;
      END;

      WordAutomation.WordTableSetPreferredWidth(WordAutomation.CentimetersToPoints(16));

      WordAutomation.WordTableGetSelectionFullTable;
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderTop, WordEnumeration.WdLineStyle_wdLineStyleSingle);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderBottom, WordEnumeration.WdLineStyle_wdLineStyleSingle);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderLeft, WordEnumeration.WdLineStyle_wdLineStyleSingle);
      WordAutomation.WordSelectionSetBorder(WordEnumeration.WdBorderType_wdBorderRight, WordEnumeration.WdLineStyle_wdLineStyleSingle);

      WordAutomation.WordPositionCursorAfterTable;
      WordAutomation.WordSelectionAddParagraph;
    END;

    LOCAL PROCEDURE BlobImageToTemporaryPath@1100528656(IServiceObject@1100528600 : Record 11071691) ImagePath : Text;
    VAR
      ThreeTierAutomationMgt@1100528603 : Codeunit 419;
      TempBlob@1100528602 : TEMPORARY Record 99008535;
    BEGIN
      IServiceObject.CALCFIELDS(Picture);
      IF IServiceObject.Picture.HASVALUE THEN BEGIN
        TempBlob.Blob := IServiceObject.Picture;
        ImagePath := ThreeTierAutomationMgt.ClientTempFolderName + 'ObjectPicture.bmp';
        ThreeTierAutomationMgt.BLOBExport4PS(TempBlob, ImagePath, FALSE, FALSE);
      END;
    END;

    LOCAL PROCEDURE ConditionGetColor@1100528616(IConditionNo@1100528600 : Integer) : Integer;
    VAR
      WordEnumeration@1100528601 : Codeunit 11012377;
    BEGIN
      CASE IConditionNo OF
        1 : EXIT(WordEnumeration.WdColor_wdColorGreen);
        2 : EXIT(WordEnumeration.WdColor_wdColorYellow);
        3 : EXIT(9167871);
        4 : EXIT(WordEnumeration.WdColor_wdColorLightOrange);
        5 : EXIT(WordEnumeration.WdColor_wdColorOrange);
        6 : EXIT(WordEnumeration.WdColor_wdColorRed);
      END;
    END;

    LOCAL PROCEDURE GetNoOfPhotoLines@1100528609(VAR INEN2767ConditionMeasLine@1100528600 : Record 11128777) NoOfPhotoLines : Integer;
    VAR
      NEN2767ConditionMeasLine@1100528601 : Record 11128777;
      TmpDocumentFilter@1100528604 : TEMPORARY Record 11012073;
      TmpDocumentProperties@1100528605 : TEMPORARY Record 11012746;
      DocumentFilters@1100528603 : Codeunit 11012432;
      RecRef@1100528602 : RecordRef;
    BEGIN
      NEN2767ConditionMeasLine.COPY(INEN2767ConditionMeasLine);
      IF NEN2767ConditionMeasLine.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(NEN2767ConditionMeasLine);
          DocumentFilters.CreateTemporaryFilter(RecRef, TmpDocumentFilter);
          DocumentFilters.ApplyDocumentFilter(TmpDocumentFilter, TmpDocumentProperties);
          TmpDocumentProperties.SetFilterOnlyPictures;
          NoOfPhotoLines := TmpDocumentProperties.COUNT;
        UNTIL NEN2767ConditionMeasLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

