OBJECT Codeunit 11229277 Resource Mgt Work Order Plan.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100525000 : TextConst 'ENU=%1 ''%2'' is already linked to %3 ''%4''';
      Text002@1100528600 : TextConst 'ENU=The selected Service Orders contain te many Disciplines, reduce the selection';

    PROCEDURE UpdateResourceEmployee@1100525003(UpdateMode@1100525002 : ',Modify,Delete,Rename';xEmpl@1100525003 : Record 5200;Empl@1100525000 : Record 5200);
    VAR
      Resource@1100525001 : Record 11229278;
      NewSchedule@1100525005 : Option;
    BEGIN
      WITH Resource DO BEGIN
        SETCURRENTKEY(Type, Company, "Source No.");
        SETRANGE(Type, Resource.Type::Employee);
        SETRANGE(Company, COMPANYNAME);

        CASE UpdateMode OF
          UpdateMode::Modify:
            BEGIN
              SETRANGE("Source No.", Empl."No.");
              IF FINDFIRST THEN BEGIN
                IF Empl.Status = Empl.Status::Active THEN BEGIN
                  Name := COPYSTR(Empl."Full Name", 1, MAXSTRLEN(Name));
                  "Search Name" := COPYSTR(Empl."Search Name", 1, MAXSTRLEN("Search Name"));
                  UpdateResourceDisciplines("No.", Empl.Discipline);
                  Discipline := Empl.Discipline;
                  "Territory Code" := Empl."Territory Code";
                  MODIFY;
                END ELSE BEGIN
                  DELETE(TRUE);
                END;
              END;
            END;
          UpdateMode::Delete:
            BEGIN
              SETRANGE("Source No.", Empl."No.");
              IF FINDFIRST THEN
                DELETE(TRUE);
            END;
          UpdateMode::Rename:
            BEGIN
              SETRANGE("Source No.", xEmpl."No.");
              IF FINDFIRST THEN BEGIN
                "Source No." := Empl."No.";
                MODIFY;
              END;
              //On rename Employee No. the Planner in the Resources must also be update (not autom. done because there is no table relation)
              RESET;
              SETRANGE("Planner Company", COMPANYNAME);
              SETRANGE(Planner, xEmpl."No.");
              MODIFYALL(Planner, Empl."No.");
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateResourceDisciplines@1100528605(IResourceNo@1100528603 : Code[20];IDiscipline@1100528600 : Code[10]);
    VAR
      ResourceDiscipline@1100528602 : Record 11229286;
    BEGIN
      IF IDiscipline <> '' THEN
        IF NOT ResourceDiscipline.GET(IResourceNo, IDiscipline) THEN BEGIN
          ResourceDiscipline."Resource No." := IResourceNo;
          ResourceDiscipline.Discipline := IDiscipline;
          ResourceDiscipline.INSERT(TRUE);
        END;
    END;

    PROCEDURE UpdateResourceVendor@1100528600(IUpdateMode@1100525002 : ',Modify,Delete,Rename';IxVendor@1100525003 : Record 23;IVendor@1100525000 : Record 23);
    VAR
      Resource@1100525001 : Record 11229278;
      NewSchedule@1100525005 : Option;
    BEGIN
      IF NOT IVendor.Subcontractor THEN
        EXIT;
      WITH Resource DO BEGIN
        SETCURRENTKEY(Type, Company, "Source No.");
        SETRANGE(Type, Resource.Type::Subcontractor);
        SETRANGE(Company, COMPANYNAME);

        CASE IUpdateMode OF
          IUpdateMode::Modify:
            BEGIN
              SETRANGE("Source No.", IVendor."No.");
              IF FINDFIRST THEN BEGIN
                Name := COPYSTR(IVendor.Name, 1, MAXSTRLEN(Name));
                "Search Name" := COPYSTR(IVendor."Search Name", 1, MAXSTRLEN("Search Name"));
                Discipline := '';
                "Territory Code" := IVendor."Territory Code";
                MODIFY;
              END;
            END;
          IUpdateMode::Delete:
            BEGIN
              SETRANGE("Source No.", IVendor."No.");
              IF FINDFIRST THEN
                DELETE(TRUE);
            END;
          IUpdateMode::Rename:
            BEGIN
              SETRANGE("Source No.", IxVendor."No.");
              IF FINDFIRST THEN BEGIN
                "Source No." := IVendor."No.";
                MODIFY;
              END;
            END;
        END;
      END;
    END;

    PROCEDURE "---"@1100525000();
    BEGIN
    END;

    PROCEDURE SetVisibleByConsignment@1100525001(IType@1100528600 : 'GWP,Navision,Both');
    VAR
      Company@1100525006 : Record 2000000006;
      VisibleResourceWOP@1100525000 : Record 11229285;
      ConsignmentRoster@1100525001 : Record 11012865;
      ResourceWOP@1100525002 : Record 11229278;
      Employee@1100525007 : Record 5200;
      StartDateTime@1100525003 : DateTime;
      EndDateTime@1100525004 : DateTime;
      ResourcesFound@1100525005 : Boolean;
    BEGIN
      VisibleResourceWOP.SETRANGE("User ID", USERID);
      VisibleResourceWOP.DELETEALL(TRUE);

      IF Company.FINDSET THEN
        REPEAT
          Employee.CHANGECOMPANY(Company.Name);
          ConsignmentRoster.CHANGECOMPANY(Company.Name);
          IF Employee.READPERMISSION AND ConsignmentRoster.READPERMISSION THEN BEGIN
            ConsignmentRoster.RESET;
            ConsignmentRoster.SETCURRENTKEY("Employee No.");
            ConsignmentRoster.SETFILTER("Start Date", '>=%1&<=%2', 0D, TODAY);
            ConsignmentRoster.SETFILTER("End Date", '>=%1', TODAY);
            ConsignmentRoster.SETAUTOCALCFIELDS("End Date", "End Time");
            IF ConsignmentRoster.FINDSET THEN
              REPEAT
                StartDateTime := CREATEDATETIME(ConsignmentRoster."Start Date", ConsignmentRoster."Start Time");
                IF ConsignmentRoster."End Time" > 0T THEN
                  EndDateTime := CREATEDATETIME(ConsignmentRoster."End Date", ConsignmentRoster."End Time")
                ELSE
                  EndDateTime := CREATEDATETIME(ConsignmentRoster."End Date", 235959.999T);
                IF (StartDateTime <= CURRENTDATETIME) AND (EndDateTime >= CURRENTDATETIME) THEN
                  IF Employee.GET(ConsignmentRoster."Employee No.") THEN BEGIN
                    ResourceWOP.SETCURRENTKEY(Type, Company, "Source No.");
                    ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Employee);
                    ResourceWOP.SETRANGE(Company, Company.Name);
                    ResourceWOP.SETRANGE("Source No.", Employee."No.");
                    IF ResourceWOP.FINDFIRST THEN BEGIN
                      ResourceWOP.SetVisible(0, IType IN [IType::GWP, IType::Both]);
                      ResourceWOP.SetVisible(1, IType IN [IType::Navision, IType::Both]);
                      ResourcesFound := TRUE;
                    END;
                  END;
              UNTIL ConsignmentRoster.NEXT = 0;
              IF NOT ResourcesFound THEN BEGIN
                ConsignmentRoster.SETRANGE("Start Date", TODAY);
                ConsignmentRoster.SETFILTER("Start Time", '>%1', TIME);
                IF ConsignmentRoster.FINDSET THEN
                  REPEAT
                    IF Employee.GET(ConsignmentRoster."Employee No.") THEN
                      ResourceWOP.SETCURRENTKEY(Type, Company, "Source No.");
                      ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Employee);
                      ResourceWOP.SETRANGE(Company, Company.Name);
                      ResourceWOP.SETRANGE("Source No.", Employee."No.");
                      IF ResourceWOP.FINDFIRST THEN BEGIN
                        ResourceWOP.SetVisible(0, IType IN [IType::GWP, IType::Both]);
                        ResourceWOP.SetVisible(1, IType IN [IType::Navision, IType::Both]);
                      END;
                  UNTIL ConsignmentRoster.NEXT = 0;
              END;
          END;
        UNTIL Company.NEXT = 0;
    END;

    PROCEDURE SetVisibleByAbsence@1100525005(IType@1100528600 : 'GWP,Navision,Both');
    VAR
      Company@1100525006 : Record 2000000006;
      VisibleResourceWOP@1100525000 : Record 11229285;
      EmployeeAbsence@1100525001 : Record 5207;
      ResourceWOP@1100525002 : Record 11229278;
      Employee@1100525007 : Record 5200;
      StartDateTime@1100525003 : DateTime;
      EndDateTime@1100525004 : DateTime;
    BEGIN
      VisibleResourceWOP.SETRANGE("User ID", USERID);
      VisibleResourceWOP.DELETEALL(TRUE);

      GetPlannableResourcesDS(ResourceWOP);
      SetVisibleByDS(IType, ResourceWOP);

      IF Company.FINDSET THEN
        REPEAT
          IF Employee.CHANGECOMPANY(Company.Name) AND EmployeeAbsence.CHANGECOMPANY(Company.Name) THEN BEGIN
            IF Employee.READPERMISSION AND EmployeeAbsence.READPERMISSION THEN BEGIN
              EmployeeAbsence.RESET;
              EmployeeAbsence.SETCURRENTKEY("From Date");
              EmployeeAbsence.SETFILTER("From Date", '>=%1&<=%2', 0D, TODAY);
              EmployeeAbsence.SETFILTER("To Date", '>=%1', TODAY);
              EmployeeAbsence.SETRANGE(Plannable, FALSE);
              IF EmployeeAbsence.FINDSET THEN
                REPEAT
                  StartDateTime := CREATEDATETIME(EmployeeAbsence."From Date", EmployeeAbsence."From Time");
                  IF EmployeeAbsence."Until Time" > 0T THEN
                    EndDateTime := CREATEDATETIME(EmployeeAbsence."To Date", EmployeeAbsence."Until Time")
                  ELSE
                    EndDateTime := CREATEDATETIME(EmployeeAbsence."To Date", 235959.999T);
                  IF (StartDateTime <= CURRENTDATETIME) AND (EndDateTime >= CURRENTDATETIME) THEN
                    IF Employee.GET(EmployeeAbsence."Employee No.") THEN
                      Employee.MARK(TRUE);
                UNTIL EmployeeAbsence.NEXT = 0;
            END;
          END;
          Employee.MARKEDONLY(TRUE);
          IF Employee.FINDSET THEN
            REPEAT
              IF ResourceWOP.GET(Employee.GetResourceNo) THEN
                ResourceWOP.SetVisible(IType, FALSE);
            UNTIL Employee.NEXT = 0;
        UNTIL Company.NEXT = 0;
    END;

    PROCEDURE SetVisibleByDS@1100525004(IType@1100528600 : 'GWP,Navision,Both';VAR IResourceWOP@1100525000 : Record 11229278);
    BEGIN
      IF IResourceWOP.FINDSET THEN
        REPEAT
          IResourceWOP.SetVisible(IType, TRUE);
        UNTIL IResourceWOP.NEXT = 0;
    END;

    PROCEDURE SetVisibleByRights@1100409000(IType@1100409000 : 'GWP,Navision,Both');
    BEGIN
    END;

    PROCEDURE GetPlannableResourcesDS@1100525002(VAR IOResourceWOP@1100525004 : Record 11229278);
    VAR
      Employee@1100525000 : Record 5200;
      Vendor@1100525001 : Record 23;
      ResourceWOP@1100525002 : Record 11229278;
      Company@1100525003 : Record 2000000006;
    BEGIN
      ResourceWOP.COPY(IOResourceWOP);

      IF Company.FINDSET THEN
        REPEAT
          ResourceWOP.SetCompanyPlanGroupFilters;
          ResourceWOP.SETRANGE(Type, ResourceWOP.Type::" ");
          ResourceWOP.SETRANGE(Company, Company.Name);
          IF ResourceWOP.FINDSET THEN
            REPEAT
              ResourceWOP.MARK(TRUE);
            UNTIL ResourceWOP.NEXT = 0;

          IF Employee.CHANGECOMPANY(Company.Name) THEN
            IF Employee.READPERMISSION THEN BEGIN
              ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Employee);
              ResourceWOP.SETRANGE(Company, Company.Name);
              IF ResourceWOP.FINDSET THEN
                REPEAT
                  ResourceWOP.MARK(TRUE);
                UNTIL ResourceWOP.NEXT = 0;
            END;

          IF Vendor.CHANGECOMPANY(Company.Name) THEN
            IF Vendor.READPERMISSION THEN BEGIN
              ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Subcontractor);
              ResourceWOP.SETRANGE(Company, Company.Name);
              IF ResourceWOP.FINDSET THEN
                REPEAT
                  ResourceWOP.MARK(TRUE);
                UNTIL ResourceWOP.NEXT = 0;
            END;
        UNTIL Company.NEXT = 0;
      ResourceWOP.MARKEDONLY(TRUE);
      ResourceWOP.SETRANGE(Type);
      ResourceWOP.SETRANGE(Company);

      IOResourceWOP.COPY(ResourceWOP);
    END;

    PROCEDURE GetResourceDSByServiceOrderDS@1100528613(VAR IServiceOrder@1100528600 : Record 11012823;VAR OResourceWOP@1100528601 : Record 11229278;IPlanDateFrom@1100528608 : Date;IPlanDateUntil@1100528609 : Date;IPlanSeqNo@1100528610 : Integer;IDisciplineFilter@1100528606 : Text;ITradeSpecialityFilter@1100528611 : Text;ITerritoryFilter@1100528607 : Text);
    VAR
      ResourcePlanData@1100528603 : Record 11229287;
      TempResourceWOP@1100528604 : TEMPORARY Record 11229278;
      ResourceWOP@1100528605 : Record 11229278;
      ServiceOrderPlanManagement@1100528602 : Codeunit 11012868;
    BEGIN
      IF ResourceWOP.UseVisibleResources THEN BEGIN
        ResourceWOP.SETFILTER("User ID Filter", USERID);
        ResourceWOP.SETRANGE("Visible in Navision", TRUE);
      END;
      ResourceWOP.SetCompanyPlanGroupFilters;
      ResourceWOP.SETFILTER(Schedule, '%1|%2', ResourceWOP.Schedule::ServiceOrder, ResourceWOP.Schedule::Both);
      ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Employee);
      IF ResourceWOP.FINDSET THEN
        REPEAT
          TempResourceWOP."No." := ResourceWOP."No.";
          TempResourceWOP.INSERT;
          ResourceWOP.CALCFIELDS("Plan Data Exist");
          IF NOT ResourceWOP."Plan Data Exist" THEN
            TempResourceWOP.MARK(TRUE);
        UNTIL ResourceWOP.NEXT = 0;

      IF (IDisciplineFilter <> '') OR (ITerritoryFilter <> '') THEN BEGIN
        ResourcePlanData.SETCURRENTKEY("Plan Seq. No.", Discipline, "Territory Code");
        ResourcePlanData.SETFILTER("Plan Seq. No.", '<=%1', IPlanSeqNo);
        IF IDisciplineFilter <> '' THEN
          ResourcePlanData.SETFILTER(Discipline, IDisciplineFilter);
        IF ITradeSpecialityFilter <> '' THEN
          ResourcePlanData.SETFILTER("Trade Speciality", '%1|%2', '', ITradeSpecialityFilter);
        IF ITerritoryFilter <> '' THEN
          ResourcePlanData.SETFILTER("Territory Code", ITerritoryFilter);
        IF ResourcePlanData.FINDSET THEN
          REPEAT
            TempResourceWOP."No." := ResourcePlanData."Resource No.";
            TempResourceWOP.MARK(TRUE);
          UNTIL ResourcePlanData.NEXT = 0;
        TempResourceWOP.MARKEDONLY(TRUE);
      END;

      OResourceWOP.RESET;
      IF TempResourceWOP.FINDSET THEN
        REPEAT
          IF ServiceOrderPlanManagement.ResourceCanDoOneServiceOrder(
            TempResourceWOP."No.", IServiceOrder, IPlanDateFrom, IPlanDateUntil, IPlanSeqNo)
          THEN BEGIN
            OResourceWOP."No." := TempResourceWOP."No.";
            OResourceWOP.MARK(TRUE);
          END;
        UNTIL TempResourceWOP.NEXT = 0;
      OResourceWOP.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetResourceDisciplineFilter@1100528601(IResourceNo@1100528601 : Code[20]) : Text;
    VAR
      ResourceDiscipline@1100528600 : Record 11229286;
      TmpDisciplineFilter@1100528602 : Text;
    BEGIN
      ResourceDiscipline.SETRANGE("Resource No.", IResourceNo);
      IF ResourceDiscipline.FINDSET THEN
        REPEAT
          IF TmpDisciplineFilter <> '' THEN
            TmpDisciplineFilter += '|';
          TmpDisciplineFilter += ResourceDiscipline.Discipline;
        UNTIL ResourceDiscipline.NEXT = 0;
      EXIT(TmpDisciplineFilter);
    END;

    PROCEDURE GetResourceTradeSpecialityFilter@1100528602(IResourceNo@1100528600 : Code[20];ISeekDate@1100528601 : Date;IPlanSeqNo@1100528602 : Integer) : Text;
    VAR
      ResourcePlanData@1100528604 : Record 11229287;
      Month@1100528603 : Integer;
      TmpTradeSpecialityFilter@1100528605 : Text;
    BEGIN
      ResourcePlanData.SETRANGE("Resource No.", IResourceNo);
      ResourcePlanData.SETFILTER("Plan Seq. No.", '<=%1', IPlanSeqNo);
      Month := DATE2DMY(ISeekDate, 2);
      CASE Month OF
        1: ResourcePlanData.SETRANGE(January, TRUE);
        2: ResourcePlanData.SETRANGE(February, TRUE);
        3: ResourcePlanData.SETRANGE(March, TRUE);
        4: ResourcePlanData.SETRANGE(April, TRUE);
        5: ResourcePlanData.SETRANGE(May, TRUE);
        6: ResourcePlanData.SETRANGE(June, TRUE);
        7: ResourcePlanData.SETRANGE(July, TRUE);
        8: ResourcePlanData.SETRANGE(August, TRUE);
        9: ResourcePlanData.SETRANGE(September, TRUE);
        10: ResourcePlanData.SETRANGE(October, TRUE);
        11: ResourcePlanData.SETRANGE(November, TRUE);
        12: ResourcePlanData.SETRANGE(December, TRUE);
      END;
      ResourcePlanData.SETFILTER("Trade Speciality", '<>%1', '');
      IF ResourcePlanData.FINDSET THEN
        REPEAT
          IF TmpTradeSpecialityFilter <> '' THEN
            TmpTradeSpecialityFilter += '|';
          TmpTradeSpecialityFilter += ResourcePlanData."Trade Speciality";
        UNTIL ResourcePlanData.NEXT = 0;
      EXIT(TmpTradeSpecialityFilter);
    END;

    LOCAL PROCEDURE "----"@1100528606();
    BEGIN
    END;

    PROCEDURE IsResourceWithinCompanyPlanGroup@1100528603(IResourceNo@1100528600 : Code[20]) : Boolean;
    VAR
      ResourceWOP@1100528601 : Record 11229278;
    BEGIN
      IF NOT ResourceWOP.GET(IResourceNo) THEN
        EXIT(FALSE);
      EXIT(ResourceWOP.IsResourceWithinCompanyPlanGroup);
    END;

    PROCEDURE TestResourceWithinCompanyPlanGroup@1100528604(IResourceNo@1100528600 : Code[20]);
    VAR
      ResourceWOP@1100528601 : Record 11229278;
    BEGIN
      IF IResourceNo = '' THEN
        EXIT;
      IF NOT ResourceWOP.GET(IResourceNo) THEN
        EXIT;
      ResourceWOP.TestResourceWithinCompanyPlanGroup;
    END;

    BEGIN
    END.
  }
}

