OBJECT Codeunit 12013589 Exflow-Check Head
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350001,4PS;
  }
  PROPERTIES
  {
    TableNo=12013587;
    Permissions=TableData 36=m,
                TableData 37=m,
                TableData 39=imd,
                TableData 49=imd,
                TableData 93=imd,
                TableData 94=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 223=imd,
                TableData 357=imd,
                TableData 359=imd,
                TableData 6507=ri,
                TableData 6508=rid,
                TableData 6650=imd,
                TableData 6651=imd;
    OnRun=VAR
            PurchHeader2@1011 : Record 38;
            PurchLine@1100285002 : Record 39;
            ExFPurchDocLine@1100285000 : Record 12013588;
            Vend@1100285001 : Record 23;
            PurchSetup@1100285003 : Record 312;
          BEGIN
            ExfPurchDocHead.COPY(Rec);

            WITH ExfPurchDocHead DO BEGIN
              IF "Block Document" = "Block Document"::Creation THEN
                ERROR(EXF133);

              CheckDuplicateDocNo(Rec);

              TESTFIELD("Document Type");
              TESTFIELD("Buy-from Vendor No.");
              TESTFIELD("Pay-to Vendor No.");
              TESTFIELD("Posting Date");
              TESTFIELD("Document Date");
              TESTFIELD("Vendor Posting Group");

              PurchSetup.GET;
              GetCurrency;
              ExFlowSetup.GET(COMPANYNAME,0);
              ExFlowSetup.TESTFIELD("Path to Used Invoices");

              Vend.GET("Buy-from Vendor No.");
              Vend.CheckBlockedVendOnDocs(Vend,FALSE);
              IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
                Vend.GET("Pay-to Vendor No.");
                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
              END;

              CALCFIELDS("Amount Including VAT");
              IF "Amount Including VAT" < 0 THEN
                ERROR(EXF136);

              IF "Order No." <> '' THEN BEGIN
                IF "Document Type" = "Document Type"::Invoice THEN
                  IF NOT PurchHeader2.GET(PurchHeader2."Document Type"::Order, "Order No.") THEN
                    ERROR(STRSUBSTNO(EXF138, EXF139, "Order No."));
                IF "Document Type" = "Document Type"::"Credit Memo" THEN
                  IF NOT PurchHeader2.GET(PurchHeader2."Document Type"::"Return Order", "Order No.") THEN
                    ERROR(STRSUBSTNO(EXF138, EXF140, "Order No."));

                IF (ExFlowSetup."Order Applies-to" <> ExFlowSetup."Order Applies-to"::"Order not used") AND
                   (ExFlowSetup."Order Applies-to" <> ExFlowSetup."Order Applies-to"::"Purch Order Lines") THEN BEGIN
                  IF PurchHeader2."Buy-from Vendor No." <> "Buy-from Vendor No." THEN
                    ERROR(STRSUBSTNO(EXF143,FIELDCAPTION("Buy-from Vendor No.")));

                  IF PurchHeader2."Pay-to Vendor No." <> "Pay-to Vendor No." THEN
                    ERROR(STRSUBSTNO(EXF143,FIELDCAPTION("Pay-to Vendor No.")));

                  IF PurchHeader2."Currency Code" <> "Currency Code" THEN
                    ERROR(STRSUBSTNO(EXF143,FIELDCAPTION("Currency Code")));
                END;
              END
              ELSE
                IF ("Contract No." = 0) AND ("Order No. (Import)" <> '') THEN BEGIN
                  IF "Document Type" = "Document Type"::Invoice THEN
                    IF NOT PurchHeader2.GET(PurchHeader2."Document Type"::Order, "Order No. (Import)") THEN
                      ERROR(STRSUBSTNO(EXF138, EXF139, "Order No. (Import)"));
                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                    IF NOT PurchHeader2.GET(PurchHeader2."Document Type"::"Return Order", "Order No. (Import)") THEN
                      ERROR(STRSUBSTNO(EXF138, EXF140, "Order No. (Import)"));
                END;

              IF ExFlowSetup."Check Accounting Periods" THEN BEGIN
                IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
                  FIELDERROR("Posting Date",Text045);
              END;

              CheckImageExists(Rec);

              IF PurchSetup."Ext. Doc. No. Mandatory" THEN BEGIN
                IF "Vendor Document No." = '' THEN
                  ERROR(EXF131);
              END;

              IF "Document Type" = "Document Type"::Invoice THEN
                IF STRLEN("Vendor Document No.") > MAXSTRLEN(PurchHeader2."Vendor Invoice No.") THEN
                  ERROR(STRSUBSTNO(EXF137,STRLEN("Vendor Document No."),MAXSTRLEN(PurchHeader2."Vendor Invoice No.")));
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                IF STRLEN("Vendor Document No.") > MAXSTRLEN(PurchHeader2."Vendor Cr. Memo No.") THEN
                  ERROR(STRSUBSTNO(EXF137,STRLEN("Vendor Document No."),MAXSTRLEN(PurchHeader2."Vendor Cr. Memo No.")));

              IF ExFlowSetup."Match Vendor Currency Code" THEN BEGIN
                IF Vend."No." <> "Pay-to Vendor No." THEN
                  Vend.GET("Pay-to Vendor No.");
                IF Vend."Currency Code" <> "Currency Code" THEN
                  ERROR(STRSUBSTNO(EXF130,Vend."Currency Code","Currency Code","Inbound Document No."));
              END;

              IF ExFlowSetup."Check Dimensions" THEN
                ExDimMgt.ImpHeadCCDocDimToTempDocDim(ExfPurchDocHead);

              CheckFactoring(Rec);

              IF ExFlowSetup."Check Reference" THEN
                CheckRef;

              IF (ExFlowSetup."Order Applies-to" <> ExFlowSetup."Order Applies-to"::"Order not used") AND
                 ("Order No." <> '') THEN BEGIN
                ExFPurchDocLine.RESET;
                ExFPurchDocLine.SETRANGE("Inbound Document No.", "Inbound Document No.");
                ExFPurchDocLine.SETFILTER(Quantity, '<>%1', 0);
                ExFPurchDocLine.SETRANGE("Exflow-Created Entry", 0);
                IF NOT ExFPurchDocLine.FINDFIRST THEN BEGIN
                  PurchLine.RESET;
                  CASE ExfPurchDocHead."Document Type" OF
                    ExfPurchDocHead."Document Type"::Invoice:
                      PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::Order);
                    ExfPurchDocHead."Document Type"::"Credit Memo":
                      PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::"Return Order");
                  END;

                  PurchLine.SETRANGE("Document No.",ExfPurchDocHead."Order No.");
                  PurchLine.SETFILTER("Qty. Rcd. Not Invoiced", '<>%1', 0);
                  IF NOT PurchLine.FINDFIRST THEN
                    ERROR(STRSUBSTNO(EXF142,ExfPurchDocHead."Order No."));
                END;
              END;

              IF ExFlowSetup."Check If Lines Exists" THEN BEGIN
                ExFPurchDocLine.RESET;
                ExFPurchDocLine.SETRANGE("Inbound Document No.", "Inbound Document No.");
                ExFPurchDocLine.SETFILTER(Quantity, '<>%1', 0);
                IF NOT ExFPurchDocLine.FINDFIRST THEN
                  ERROR(EXF135);
              END;

              IF ExFlowSetup."Order Applies-to" <> ExFlowSetup."Order Applies-to"::"Order not used" THEN BEGIN
                ExFPurchDocLine.RESET;
                ExFPurchDocLine.SETRANGE("Inbound Document No.", "Inbound Document No.");
                ExFPurchDocLine.SETFILTER("Order No.", '<>%1', '');
                ExFPurchDocLine.SETRANGE("Order Line No.", 0);
                IF ExFPurchDocLine.FINDFIRST THEN
                  ERROR(EXF141);
              END;

              IF ExFlowSetup."Test Amounts" > 0 THEN
                CheckAmounts;
            END;
          END;

  }
  CODE
  {
    VAR
      Text021@1017 : TextConst 'ENU=VAT Amount';
      Text022@1018 : TextConst 'ENU=%1% VAT';
      ExFlowSetup@1100285001 : Record 12013601;
      ExfPurchDocHead@1040 : Record 12013587;
      ExfPurchDocLine@1041 : Record 12013588;
      TotalExfPurchDocLine@1043 : Record 12013588;
      TotalExfPurchDocLineLCY@1044 : Record 12013588;
      TempExfPurchDocLine@1046 : TEMPORARY Record 12013588;
      ExfPurchDocLineACY@1047 : Record 12013588;
      VendPostingGr@1064 : Record 93;
      Currency@1073 : Record 4;
      TempVATAmountLine@1083 : TEMPORARY Record 290;
      TempVATAmountLineRemainder@1084 : TEMPORARY Record 290;
      GenJnlCheckLine@1100285000 : Codeunit 11;
      ExDimMgt@1100285002 : Codeunit 12013605;
      Usedate@1104 : Date;
      RoundingLineNo@1112 : Integer;
      LastLineRetrieved@1119 : Boolean;
      RoundingLineInserted@1120 : Boolean;
      Text045@1155 : TextConst 'ENU=is not within your range of allowed posting dates.';
      EXF117@1100285020 : TextConst 'ENU=%1 (%2) is not equal to total VAT of lines (%3)';
      EXF118@1100285019 : TextConst 'ENU=%1 (%2) is not equal to total of on lines (%3)';
      EXF119@1100285021 : TextConst 'ENU=PDF File can not be found in current import path';
      EXF120@1100285022 : TextConst 'ENU=Reference is missing';
      EXF122@1100285027 : TextConst 'ENU=Duplicate Posted Invoice!';
      EXF123@1100285006 : TextConst 'ENU=Duplicate Posted Credit Memo!';
      EXF124@1100285025 : TextConst 'ENU=Duplicate Invoice (the duplicate is under open Invoices)!';
      EXF125@1100285024 : TextConst 'ENU=Duplicate Credit Memo (the duplicate is under open Credit Memos)!';
      EXF126@1100285029 : TextConst 'ENU=Duplicate Import Header in Journal Batch %1 - occurence %2!';
      EXF128@1100285030 : TextConst 'ENU=This invoice is flagged as Factoring and is thus not allowed to be created!';
      EXF130@1100285032 : TextConst 'ENU=The Vendor''s currency code %1 must match the currency code %2 on the import document no %3!';
      EXF131@1100285033 : TextConst 'ENU=Vendor Document No. must not be blank!';
      EXF133@1100285034 : TextConst 'ENU=This document is marked as blocked for creation!';
      EXF134@1100285035 : TextConst 'ENU=Reference is not tied to a First Approver code or Template Rule Code!';
      EXF135@1100285036 : TextConst 'ENU=Invoice is missing Invoice Lines.';
      EXF136@1100285037 : TextConst 'ENU=Total amount cannot be negative!';
      EXF137@1100285038 : TextConst 'ENU=Vendor Document No. contains %1 characters but %2 is the maximum allowed!';
      EXF138@1100285003 : TextConst 'ENU=Document %1 %2 does not exist!';
      EXF139@1100285004 : TextConst 'ENU=Order';
      EXF140@1100285005 : TextConst 'ENU=Return Order';
      EXF141@1100285007 : TextConst 'ENU=Lines exists without an order line match.';
      EXF142@1100285008 : TextConst 'ENU=Order No %1 has no received lines.';
      EXF143@1100285009 : TextConst 'ENU=Order and Invoice differs in field %1 - this prevents invoice from being matched against order!';

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      WITH ExfPurchDocHead DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    LOCAL PROCEDURE DivideAmount@8(QtyType@1000 : 'General,Invoicing,Shipping';ExfPurchDocLineQty@1001 : Decimal);
    BEGIN
      IF RoundingLineInserted AND (RoundingLineNo = ExfPurchDocLine."Line No.") THEN
        EXIT;

      WITH ExfPurchDocLine DO
        IF ExfPurchDocLineQty = 0 THEN BEGIN
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        END ELSE BEGIN
          TempVATAmountLine.GET(
            "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax",
            "Line Amount" >= 0);
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
            "VAT %" := TempVATAmountLine."VAT %";
          TempVATAmountLineRemainder := TempVATAmountLine;
          IF NOT TempVATAmountLineRemainder.FIND THEN BEGIN
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          END;
          "Line Amount" := ROUND(ExfPurchDocLineQty * "Direct Unit Cost",Currency."Amount Rounding Precision");
          IF ExfPurchDocLineQty <> Quantity THEN
            "Line Discount Amount" :=
              ROUND("Line Amount" * "Line Discount %" / 100,Currency."Amount Rounding Precision");
          "Line Amount" := "Line Amount" - "Line Discount Amount";

          IF "Allow Invoice Disc." AND (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) THEN
            IF QtyType = QtyType::Invoicing THEN
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            ELSE BEGIN
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            END;

          IF ExfPurchDocHead."Prices Including VAT" THEN BEGIN
            IF (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) OR
               ("Line Amount" = 0)
            THEN BEGIN
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT" := 0;
            END ELSE BEGIN
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" +
                TempVATAmountLine."Amount Including VAT" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
            END;
            "Amount Including VAT" :=
              ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision");
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - ExfPurchDocHead."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT" :=
              TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          END ELSE BEGIN
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
              "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              Amount := 0;
              "VAT Base Amount" := 0;
            END ELSE BEGIN
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - ExfPurchDocHead."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              IF TempVATAmountLine."VAT Base" = 0 THEN
                TempVATAmountLineRemainder."VAT Amount" := 0
              ELSE
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              "Amount Including VAT" :=
                Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            END;
          END;

          TempVATAmountLineRemainder.MODIFY;
        END;
    END;

    LOCAL PROCEDURE RoundAmount@9(ExfPurchDocLineQty@1000 : Decimal;ExfPurchDocLineQtyBase@1100285001 : Decimal);
    VAR
      CurrExchRate@1100285000 : Record 330;
      NoVAT@1001 : Boolean;
    BEGIN
      WITH ExfPurchDocLine DO BEGIN
        IncrAmount(TotalExfPurchDocLine);
        Increment(TotalExfPurchDocLine."Net Weight",ROUND(ExfPurchDocLineQty * "Net Weight",0.00001));
        Increment(TotalExfPurchDocLine."Gross Weight",ROUND(ExfPurchDocLineQty * "Gross Weight",0.00001));
        Increment(TotalExfPurchDocLine."Unit Volume",ROUND(ExfPurchDocLineQty * "Unit Volume",0.00001));
        Increment(TotalExfPurchDocLine.Quantity,ExfPurchDocLineQty);
        Increment(TotalExfPurchDocLine."Quantity (Base)",ExfPurchDocLineQtyBase);
        IF "Units per Parcel" > 0 THEN
          Increment(
            TotalExfPurchDocLine."Units per Parcel",
            ROUND(ExfPurchDocLineQty / "Units per Parcel",1,'>'));

        TempExfPurchDocLine := ExfPurchDocLine;
        ExfPurchDocLineACY := ExfPurchDocLine;
        IF ExfPurchDocHead."Currency Code" <> '' THEN BEGIN
          IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
             (ExfPurchDocHead."Posting Date" = 0D)
          THEN
            Usedate := WORKDATE
          ELSE
            Usedate := ExfPurchDocHead."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."Amount Including VAT",ExfPurchDocHead."Currency Factor",FALSE)) - // 4PS
                  TotalExfPurchDocLineLCY."Amount Including VAT";
          IF NoVAT THEN
            Amount := "Amount Including VAT"
          ELSE
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
                  Usedate,ExfPurchDocHead."Currency Code",
                  TotalExfPurchDocLine.Amount,ExfPurchDocHead."Currency Factor",FALSE)) - // 4PS
                    TotalExfPurchDocLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."Line Amount",ExfPurchDocHead."Currency Factor",FALSE)) - // 4PS
                  TotalExfPurchDocLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."Line Discount Amount",ExfPurchDocHead."Currency Factor",FALSE)) - // 4PS
                  TotalExfPurchDocLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."Inv. Discount Amount",ExfPurchDocHead."Currency Factor",FALSE)) - // 4PS
                  TotalExfPurchDocLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,ExfPurchDocHead."Job No.", // 4PS
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."VAT Difference",ExfPurchDocHead."Currency Factor",FALSE)) - // 4PS
                  TotalExfPurchDocLineLCY."VAT Difference";
        END;

        IncrAmount(TotalExfPurchDocLineLCY);
        Increment(TotalExfPurchDocLineLCY."Unit Cost (LCY)",ROUND(ExfPurchDocLineQty * "Unit Cost (LCY)"));
      END;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(UseTempData@1000 : Boolean);
    VAR
      InvoiceRoundingAmount@1001 : Decimal;
      NextLineNo@1002 : Integer;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalExfPurchDocLine."Amount Including VAT" -
          ROUND(
            TotalExfPurchDocLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF InvoiceRoundingAmount <> 0 THEN BEGIN
        VendPostingGr.GET(ExfPurchDocHead."Vendor Posting Group");
        VendPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH ExfPurchDocLine DO BEGIN
          INIT;
          NextLineNo := "Line No." + 10000;
          "System-Created Entry" := TRUE;
          IF UseTempData THEN BEGIN
            "Line No." := 0;
            Type := Type::"G/L Account";
          END ELSE BEGIN
            "Line No." := NextLineNo;
            VALIDATE(Type,Type::"G/L Account");
          END;
          VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
          VALIDATE(Quantity,1);
          IF ExfPurchDocHead."Prices Including VAT" THEN
            VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
          ELSE
            VALIDATE(
              "Direct Unit Cost",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - ExfPurchDocHead."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := NextLineNo;

          // IF NOT UseTempData THEN BEGIN
          //   DocDim2.SETRANGE("Table ID",DATABASE::"Exflow Purchase Document Line");
          //   DocDim2.SETRANGE("Document Type",ExfPurchDocHead."Document Type");
          //   DocDim2.SETRANGE("Document No.", FORMAT("Inbound Document No."));
          //   DocDim2.SETRANGE("Line No.","Line No.");
          //   IF DocDim2.FINDSET THEN
          //     REPEAT
          //       TempDocDim := DocDim2;
          //       TempDocDim.INSERT;
          //     UNTIL DocDim2.NEXT = 0;
          // END;

          LastLineRetrieved := FALSE;
          RoundingLineInserted := TRUE;
          RoundingLineNo := "Line No.";
        END;
      END;
    END;

    LOCAL PROCEDURE IncrAmount@13(VAR _TotalExfPurchDocLine@1000 : Record 12013588);
    BEGIN
      WITH ExfPurchDocLine DO BEGIN
        IF ExfPurchDocHead."Prices Including VAT" OR
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        THEN
          Increment(_TotalExfPurchDocLine."Line Amount","Line Amount");
        Increment(_TotalExfPurchDocLine.Amount,Amount);
        Increment(_TotalExfPurchDocLine."VAT Base Amount","VAT Base Amount");
        Increment(_TotalExfPurchDocLine."VAT Difference","VAT Difference");
        Increment(_TotalExfPurchDocLine."Amount Including VAT","Amount Including VAT");
        Increment(_TotalExfPurchDocLine."Line Discount Amount","Line Discount Amount");
        Increment(_TotalExfPurchDocLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(_TotalExfPurchDocLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(_TotalExfPurchDocLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(_TotalExfPurchDocLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(_TotalExfPurchDocLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(_TotalExfPurchDocLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
      END;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    PROCEDURE GetExfPurchDocLines@16(VAR _NewExfPurchDocHead@1000 : Record 12013587;VAR _ExfPurchDocLine@1001 : Record 12013588;_QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldExfPurchDocLine@1003 : Record 12013588;
    BEGIN
      ExfPurchDocHead := _NewExfPurchDocHead;
      SumExfPurchDocLines2(_ExfPurchDocLine,OldExfPurchDocLine,_QtyType,TRUE);
    END;

    PROCEDURE SumExfPurchDocLinesTemp@24(VAR NewExfPurchDocHead@1000 : Record 12013587;VAR OldExfPurchDocLine@1001 : Record 12013588;QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalExfPurchDocLine@1003 : Record 12013588;VAR NewTotalExfPurchDocLineLCY@1004 : Record 12013588;VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30]);
    BEGIN
      WITH ExfPurchDocHead DO BEGIN
        ExfPurchDocHead := NewExfPurchDocHead;
        SumExfPurchDocLines2(ExfPurchDocLine,OldExfPurchDocLine,QtyType,FALSE);
        VATAmount := TotalExfPurchDocLine."Amount Including VAT" - TotalExfPurchDocLine.Amount;
        IF TotalExfPurchDocLine."VAT %" = 0 THEN
          VATAmountText := Text021
        ELSE
          VATAmountText := STRSUBSTNO(Text022,TotalExfPurchDocLine."VAT %");
        NewTotalExfPurchDocLine := TotalExfPurchDocLine;
        NewTotalExfPurchDocLineLCY := TotalExfPurchDocLineLCY;
      END;
    END;

    LOCAL PROCEDURE SumExfPurchDocLines2@11(VAR NewExfPurchDocLine@1000 : Record 12013588;VAR OldExfPurchDocLine@1001 : Record 12013588;QtyType@1002 : 'General,Invoicing,Shipping';InsertExfPurchDocLine@1003 : Boolean);
    VAR
      PurchSetup@1100285000 : Record 312;
      ExfPurchDocLineQty@1004 : Decimal;
      ExfPurchDocLineQtyBase@1100285001 : Decimal;
    BEGIN
      TempVATAmountLineRemainder.DELETEALL;
      OldExfPurchDocLine.CalcVATAmountLines(QtyType,ExfPurchDocHead,OldExfPurchDocLine,TempVATAmountLine);
      WITH ExfPurchDocHead DO BEGIN
        PurchSetup.GET;
        GetCurrency;
        OldExfPurchDocLine.SETRANGE("Document Type","Document Type");
        OldExfPurchDocLine.SETRANGE("Inbound Document No.", "Inbound Document No.");
        RoundingLineInserted := FALSE;
        IF OldExfPurchDocLine.FINDSET THEN
          REPEAT
            IF NOT RoundingLineInserted THEN
              ExfPurchDocLine := OldExfPurchDocLine;
            CASE QtyType OF
              QtyType::General:
                BEGIN
                  ExfPurchDocLineQty := ExfPurchDocLine.Quantity;
                  ExfPurchDocLineQtyBase := 0;
                  IF ExfPurchDocLine.Type = ExfPurchDocLine.Type::Item THEN
                    ExfPurchDocLineQtyBase := ExfPurchDocLine.Quantity;
                END;

              QtyType::Invoicing:
                BEGIN
                  ExfPurchDocLineQty := ExfPurchDocLine."Qty. to Invoice";
                  ExfPurchDocLineQtyBase := 0;
                  IF ExfPurchDocLine.Type = ExfPurchDocLine.Type::Item THEN
                    ExfPurchDocLineQtyBase := ExfPurchDocLine."Qty. to Invoice";
                END;
              QtyType::Shipping:
                BEGIN
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                    ExfPurchDocLineQty := ExfPurchDocLine."Return Qty. to Ship";
                    ExfPurchDocLineQtyBase := 0;
                    IF ExfPurchDocLine.Type = ExfPurchDocLine.Type::Item THEN
                      ExfPurchDocLineQtyBase := ExfPurchDocLine."Return Qty. to Ship";
                  END
                  ELSE BEGIN
                    ExfPurchDocLineQty := ExfPurchDocLine."Qty. to Receive";
                    ExfPurchDocLineQtyBase := 0;
                    IF ExfPurchDocLine.Type = ExfPurchDocLine.Type::Item THEN
                      ExfPurchDocLineQtyBase := ExfPurchDocLine."Qty. to Receive";
                  END;
                END;
            END;
            DivideAmount(QtyType,ExfPurchDocLineQty);
            ExfPurchDocLine.Quantity := ExfPurchDocLineQty;
            ExfPurchDocLine."Quantity (Base)" := ExfPurchDocLineQtyBase;
            IF ExfPurchDocLineQty <> 0 THEN BEGIN
              IF (ExfPurchDocLine.Amount <> 0) AND NOT RoundingLineInserted THEN
                IF TotalExfPurchDocLine.Amount = 0 THEN
                  TotalExfPurchDocLine."VAT %" := ExfPurchDocLine."VAT %"
                ELSE
                  IF TotalExfPurchDocLine."VAT %" <> ExfPurchDocLine."VAT %" THEN
                    TotalExfPurchDocLine."VAT %" := 0;
              RoundAmount(ExfPurchDocLineQty,ExfPurchDocLineQtyBase);
              ExfPurchDocLine := TempExfPurchDocLine;
            END;
            IF InsertExfPurchDocLine THEN BEGIN
              NewExfPurchDocLine := ExfPurchDocLine;
              NewExfPurchDocLine.INSERT;
            END;
            IF RoundingLineInserted THEN
              LastLineRetrieved := TRUE
            ELSE BEGIN
              LastLineRetrieved := OldExfPurchDocLine.NEXT = 0;
              IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
                InvoiceRounding(TRUE);
            END;
          UNTIL LastLineRetrieved;
      END;
    END;

    PROCEDURE CheckAmounts@1100285022();
    VAR
      ExflowDocLineDummy@1100285001 : Record 12013588;
      ExfPurchDocLine@1100285002 : Record 12013588;
      MaxVATDiff@1100285010 : Decimal;
      MaxNetDiff@1100285020 : Decimal;
      MaxGrossDiff@1100285000 : Decimal;
      TotalPrePaymentAmount@1100285003 : Decimal;
      TotalPrePaymentAmountIncl@1100285004 : Decimal;
    BEGIN
      WITH ExfPurchDocHead DO BEGIN
        // Recalc. Test VAT Amount to Document Currency
        MaxVATDiff := ExFlowSetup."Max. Variation on VAT Amount";

        // Recalc. Test Net Amount to Document Currency
        MaxNetDiff := ExFlowSetup."Max. Variation on Net Amount";

        MaxGrossDiff := ExFlowSetup."Max. Variation on Net Amount";

        RecalcAmounts(ExfPurchDocHead,ExflowDocLineDummy);
        CALCFIELDS(Amount,"Amount Including VAT");

        //348801
        TotalPrePaymentAmount := 0;
        TotalPrePaymentAmountIncl := 0;
        ExfPurchDocLine.RESET;
        ExfPurchDocLine.SETRANGE("Inbound Document No.", "Inbound Document No.");
        ExfPurchDocLine.CALCSUMS("Prepmt. Amt. Inv.","Prepmt. Amt. Incl. VAT");
        TotalPrePaymentAmount := ExfPurchDocLine."Prepmt. Amt. Inv.";
        TotalPrePaymentAmountIncl := ExfPurchDocLine."Prepmt. Amt. Incl. VAT";

        "Document Amount" := "Document Amount" + TotalPrePaymentAmount;
        "Document Amount VAT" := "Document Amount VAT" + (TotalPrePaymentAmountIncl - TotalPrePaymentAmount);
        "Document Amount Including VAT" := "Document Amount Including VAT" + TotalPrePaymentAmountIncl;
        //348801

        CASE ExFlowSetup."Test Amounts" OF
          ExFlowSetup."Test Amounts"::Gross:
            BEGIN
              IF (ABS("Amount Including VAT" - "Document Amount Including VAT") > MaxGrossDiff) THEN
                ERROR(EXF118,FIELDCAPTION("Document Amount Including VAT"),"Document Amount Including VAT","Amount Including VAT");
            END;
          ExFlowSetup."Test Amounts"::"Net+VAT":
            BEGIN
              IF (ABS(Amount - "Document Amount") > MaxNetDiff) THEN
                ERROR(EXF118,FIELDCAPTION("Document Amount"),"Document Amount",Amount);

              IF (ABS("Document Amount VAT" - ("Amount Including VAT" - Amount)) > MaxVATDiff) THEN
                ERROR(EXF117,FIELDCAPTION("Document Amount VAT"),"Document Amount VAT","Amount Including VAT" - Amount);
            END;
        END;
      END;
    END;

    PROCEDURE RecalcAmounts@1010000(VAR _ExfPurchDocHeader@1010000 : Record 12013587;_ExfPurchDocLine@1010001 : Record 12013588);
    VAR
      TempVATAmountLine0@1010004 : TEMPORARY Record 290;
      TempVATAmountLine1@1010005 : TEMPORARY Record 290;
    BEGIN
      _ExfPurchDocLine.SETRANGE("Inbound Document No.", _ExfPurchDocHeader."Inbound Document No.");
      _ExfPurchDocLine.SETFILTER(Type,'>0');
      _ExfPurchDocLine.SETFILTER(Quantity,'<>0');
      IF NOT _ExfPurchDocLine.FINDFIRST THEN
        EXIT;

      _ExfPurchDocLine.SetExfPurchDocHeader(_ExfPurchDocHeader);
      _ExfPurchDocLine.CalcVATAmountLines(0,_ExfPurchDocHeader,_ExfPurchDocLine,TempVATAmountLine0);
      _ExfPurchDocLine.CalcVATAmountLines(1,_ExfPurchDocHeader,_ExfPurchDocLine,TempVATAmountLine1);
      _ExfPurchDocLine.UpdateVATOnLines(0,_ExfPurchDocHeader,_ExfPurchDocLine,TempVATAmountLine0);
      _ExfPurchDocLine.UpdateVATOnLines(1,_ExfPurchDocHeader,_ExfPurchDocLine,TempVATAmountLine1);
    END;

    PROCEDURE CheckRef@1100285003();
    VAR
      Ref@1100285000 : Record 12013632;
    BEGIN
      WITH ExfPurchDocHead DO
        IF Ref.GET(Reference) THEN BEGIN
          IF (Ref."First Approver" = '') AND (Ref."Template Rule" = '') THEN BEGIN
            ERROR(EXF134);
          END;
        END ELSE
          ERROR(EXF120);
    END;

    PROCEDURE CheckDuplicateDocNo@3(EXPurchDocHeader@1100285001 : Record 12013587);
    VAR
      EXPurchDocHeader2@1100285003 : Record 12013587;
      PurchHeader@1100285000 : Record 38;
      OldVendLedgEntry@1100285005 : Record 25;
      Vendor@1100285004 : Record 23;
      ExFlowSEMgt@1100285008 : Codeunit 12013598;
      VendorDocNo@1100285002 : Code[40];
      TempNo@1100285006 : Integer;
      DupFound@1100285007 : Boolean;
    BEGIN
      WITH EXPurchDocHeader DO BEGIN
        VendorDocNo := "Vendor Document No.";

        IF ("Pay-to Vendor No." = '') OR (VendorDocNo = '') THEN
          EXIT;

        Vendor.GET("Pay-to Vendor No.");
        IF ExFlowSEMgt.CheckNoDuplicateControl(Vendor) THEN
          EXIT;

        EXPurchDocHeader2.RESET;
        EXPurchDocHeader2.SETCURRENTKEY("Vendor Document No.");
        EXPurchDocHeader2.SETRANGE("Document Type", "Document Type");
        EXPurchDocHeader2.SETRANGE("Pay-to Vendor No.", "Pay-to Vendor No.");
        EXPurchDocHeader2.SETRANGE("Vendor Document No.", VendorDocNo);
        IF EXPurchDocHeader2.COUNT <> 1 THEN BEGIN
          TempNo := 0;
          EXPurchDocHeader2.FINDSET;
          DupFound := FALSE;
          REPEAT
            TempNo := TempNo + 1;
            IF EXPurchDocHeader2."Inbound Document No." = "Inbound Document No." THEN
              DupFound := TRUE
            ELSE
              IF EXPurchDocHeader2.NEXT = 0 THEN
                DupFound := TRUE;
          UNTIL DupFound;

          EXPurchDocHeader2.SETFILTER("Inbound Document No.", '<>%1', "Inbound Document No.");
          EXPurchDocHeader2.FINDFIRST;

          ERROR(STRSUBSTNO(EXF126,EXPurchDocHeader2."Journal Batch Name",TempNo));
        END;

        IF "Document Type" = "Document Type"::Invoice THEN BEGIN
          OldVendLedgEntry.RESET;
          OldVendLedgEntry.SETCURRENTKEY("External Document No.");
          OldVendLedgEntry.SETRANGE("External Document No.", VendorDocNo);
          OldVendLedgEntry.SETRANGE("Document Type", OldVendLedgEntry."Document Type"::Invoice);
          OldVendLedgEntry.SETRANGE("Vendor No.", "Pay-to Vendor No.");
          IF NOT OldVendLedgEntry.ISEMPTY THEN
            ERROR(EXF122);

          PurchHeader.RESET;
          PurchHeader.SETCURRENTKEY("Vendor Invoice No.");
          PurchHeader.SETRANGE("Document Type", PurchHeader."Document Type"::Invoice);
          PurchHeader.SETRANGE("Pay-to Vendor No.", "Pay-to Vendor No.");
          PurchHeader.SETRANGE("Vendor Invoice No.", VendorDocNo);
          IF PurchHeader.FINDFIRST THEN
            ERROR(EXF124);
        END
        ELSE BEGIN
          OldVendLedgEntry.RESET;
          OldVendLedgEntry.SETCURRENTKEY("External Document No.");
          OldVendLedgEntry.SETRANGE("External Document No.", VendorDocNo);
          OldVendLedgEntry.SETRANGE("Document Type", OldVendLedgEntry."Document Type"::"Credit Memo");
          OldVendLedgEntry.SETRANGE("Vendor No.", "Pay-to Vendor No.");
          IF NOT OldVendLedgEntry.ISEMPTY THEN
            ERROR(EXF123);

          PurchHeader.RESET;
          PurchHeader.SETCURRENTKEY("Vendor Cr. Memo No.");
          PurchHeader.SETRANGE("Document Type", PurchHeader."Document Type"::"Credit Memo");
          PurchHeader.SETRANGE("Pay-to Vendor No.", "Pay-to Vendor No.");
          PurchHeader.SETRANGE("Vendor Cr. Memo No.", VendorDocNo);
          IF PurchHeader.FINDFIRST THEN
            ERROR(EXF125);
        END;
      END;
    END;

    PROCEDURE CheckFactoring@1100285004(EXPurchDocHeader@1100285000 : Record 12013587);
    BEGIN
      IF EXPurchDocHeader.Factoring THEN
        ERROR(EXF128);
    END;

    PROCEDURE CheckImageExists@1100285005(EXPurchDocHeader@1100285000 : Record 12013587);
    BEGIN
      IF EXPurchDocHeader."Image Buffer ID" = 0 THEN
        ERROR(EXF119);
    END;

    BEGIN
    END.
  }
}

