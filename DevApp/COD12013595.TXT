OBJECT Codeunit 12013595 Exflow-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350000;
  }
  PROPERTIES
  {
    TableNo=12013588;
    Permissions=TableData 36=m,
                TableData 37=m,
                TableData 39=imd,
                TableData 49=imd,
                TableData 93=imd,
                TableData 94=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 223=imd,
                TableData 357=imd,
                TableData 359=imd,
                TableData 6507=ri,
                TableData 6508=rid,
                TableData 6650=imd,
                TableData 6651=imd;
    OnRun=VAR
            ExflowWorkFlowMgt@1100285003 : Codeunit 12013593;
            ExFlowSEFunctions@1100285000 : Codeunit 12013598;
            AppSetup@1100285001 : Record 12013601;
          BEGIN
            IF "Receipt No. Mandatory" THEN
              CheckOrderMatch(Rec);

            IF Type = Type::" " THEN
              EXIT;

            TESTFIELD("Document Type");
            TESTFIELD("Buy-from Vendor No.");

            IF "Test Unit Costs" THEN
              IF NOT ExflowWorkFlowMgt.PurchPriceOK(Rec) THEN
                IF "Exflow-Created Entry" = "Exflow-Created Entry"::DiffLine THEN
                  ERROR(EXF119)
                ELSE
                  ERROR(EXF002);

            CheckAlways(Rec);

            AppSetup.GET(COMPANYNAME,0);
            IF AppSetup."Check if no Approvers" THEN
              CheckProposalExist(Rec);

            IF AppSetup."Check Posting Setup" THEN
              CheckPostingSetup(Rec);

            IF AppSetup."Automatic Reg. of Inwards" = AppSetup."Automatic Reg. of Inwards"::"Values from Lines" THEN
              ExFlowSEFunctions.TestInwSetup(Rec);

            //348874
            IF "Check Order Line (OCR)" AND AppSetup."Require Accept UOM Mismatch" THEN
              IF "Potential UOM Mismatch" AND (NOT "Accept Potential UOM Mismatch") THEN
                ERROR(EXF123);
            //348874
          END;

  }
  CODE
  {
    VAR
      EXF001@1100285002 : TextConst 'ENU=Line with Order No %1 cannot be matched against a receipt line.';
      EXF002@1100285001 : TextConst 'ENU=Line difference between the invoice and the order unit cost!';
      EXF003@1100285000 : TextConst 'ENU=Outstanding Quantity must not be greater than 0';
      EXF100@1100285003 : TextConst 'ENU=Approvers Missing';
      EXF104@1100285015 : TextConst 'ENU=Product posting group %1 does not exist!';
      EXF105@1100285014 : TextConst 'ENU=VAT Product posting group %1 does not exist!';
      EXF106@1100285013 : TextConst 'ENU=G/L Account %1 does not exist!';
      EXF107@1100285012 : TextConst 'ENU=Account No. %1 is blocked';
      EXF108@1100285011 : TextConst 'ENU=Item %1 does not exist!';
      EXF109@1100285010 : TextConst 'ENU="Item No. %1 is blocked. "';
      EXF110@1100285009 : TextConst 'ENU=Fixed asset %1 does not exist!';
      EXF111@1100285008 : TextConst 'ENU=Fixed Asset %1 is blocked.';
      EXF113@1100285006 : TextConst 'ENU=Line type must be %1.';
      EXF114@1100285005 : TextConst 'ENU=No. must be %1.';
      EXF115@1100285004 : TextConst 'ENU=Quantity must be less than or equal to %1.';
      EXF116@1100285016 : TextConst 'ENU=Unsupported Document Type: %1';
      EXF117@1100285017 : TextConst 'ENU=Line cannot be matched against the Order No. %1.';
      EXF118@1100285018 : TextConst 'ENU=Line requires an Order No.!';
      EXF119@1100285019 : TextConst 'ENU=The difference lines exceeds the maximum tolerance!';
      EXF120@1100285020 : TextConst 'ENU=Line cannot be matched against an Order Line.';
      EXF121@1100285021 : TextConst 'ENU=Document %1, Line %2, contains Gen. Bus. Posting Group (%3) and Gen. Prod. Posting Group (%4). \There is however no setup in General Posting Setup for this combination.';
      EXF122@1100285007 : TextConst 'ENU=Document %1, Line %2, contains VAT Bus. Posting Group (%3) and VAT Prod. Posting Group (%4). \There is however no setup in VAT Posting Setup for this combination.';
      EXF123@1100285022 : TextConst 'ENU=Accept of Potential unit of measure must be set to Yes.';
      EXF124@1100285023 : TextConst 'ENU=Quantity must be less than or equal to %1, Line %2';

    PROCEDURE CheckOrderMatch@1100285007(ExPurchDocLine@1100285001 : Record 12013588);
    BEGIN
      WITH ExPurchDocLine DO BEGIN
        IF ("Order No." = '') AND ("Order No. (Import)" = '') THEN
          ERROR(EXF118);

        IF "Order No." = '' THEN
          ERROR(EXF117,"Order No. (Import)");

        IF ("Order No." <> '') AND ("Order Line No." = 0) THEN
          ERROR(EXF120);

        CASE "Document Type" OF
          "Document Type"::Invoice :
            BEGIN
              IF ("Order No." <> '') AND ("Receipt No." = '') THEN
                ERROR(EXF001, "Order No.");
            END;
          "Document Type"::"Credit Memo" :
            BEGIN
              IF ("Order No." <> '') AND ("Return Shipment No." = '') THEN
                ERROR(EXF001, "Order No.");
            END;
          ELSE
            ERROR(EXF116);
        END;

        IF "Outstanding Quantity (Order)" > 0 THEN
          ERROR(EXF003);
      END;
    END;

    PROCEDURE CheckProposalExist@1100285002(ExfPurchDocLine@1100285002 : Record 12013588);
    VAR
      Proposals@1100285001 : Record 12013615;
      AppSetup@1100285000 : Record 12013601;
      ExflowWorkflowMgt@1100285003 : Codeunit 12013593;
      CheckProposal@1100285004 : Boolean;
    BEGIN
      AppSetup.GET(COMPANYNAME,0);

      IF NOT ExfPurchDocLine.Approval THEN
        EXIT;

      IF NOT ExflowWorkflowMgt.CheckAutoApprovalAmt(ExfPurchDocLine) THEN BEGIN
        CheckProposal := TRUE;
        IF AppSetup."Dont check Apps for PO-matched" THEN
          CheckProposal := NOT ExflowWorkflowMgt.CheckAutoApprovalOrder(ExfPurchDocLine);

        IF CheckProposal THEN BEGIN
          Proposals.RESET;
          Proposals.SETCURRENTKEY(Changed);
          Proposals.SETRANGE("Entry No.",ExfPurchDocLine."Inbound Document No.");
          Proposals.SETRANGE("Line No.",ExfPurchDocLine."Line No.");
          IF Proposals.ISEMPTY THEN
            ERROR(EXF100);
        END;
      END;
    END;

    PROCEDURE CheckAlways@1100285006(ExfPurchDocLine@1100285001 : Record 12013588);
    VAR
      Vend@1100285004 : Record 23;
      GenProductPostingGroup@1100285005 : Record 251;
      VATProductPostingGroup@1100285006 : Record 324;
      Account@1100285009 : Record 15;
      Item@1100285008 : Record 27;
      Fixed@1100285007 : Record 5600;
      PurchRcptLine@1100285013 : Record 121;
      LineAdvOptions@1100285014 : Record 12013596;
      ReturnShptLine@1100285000 : Record 6651;
      AppSetup@1100285002 : Record 12013601;
    BEGIN
      AppSetup.GET(COMPANYNAME,0);
      Vend.GET(ExfPurchDocLine."Pay-to Vendor No.");

      // Check "Gen. Prod. Posting Group" and "VAT Prod. Posting Group"
      IF NOT GenProductPostingGroup.GET(ExfPurchDocLine."Gen. Prod. Posting Group") THEN
        ERROR(EXF104,
              ExfPurchDocLine."Gen. Prod. Posting Group",
              ExfPurchDocLine."Inbound Document No.",
              ExfPurchDocLine."Line No.");

      IF ExfPurchDocLine."VAT Prod. Posting Group" <> '' THEN
        IF NOT VATProductPostingGroup.GET(ExfPurchDocLine."VAT Prod. Posting Group") THEN
          ERROR(EXF105,
                ExfPurchDocLine."VAT Prod. Posting Group",
                ExfPurchDocLine."Inbound Document No.",
                ExfPurchDocLine."Line No.");

      // Check No.
      IF ExfPurchDocLine."No." <> '' THEN
        BEGIN
          CASE ExfPurchDocLine.Type OF
            ExfPurchDocLine.Type::"G/L Account" :
              BEGIN
                IF NOT Account.GET(ExfPurchDocLine."No.") THEN
                  ERROR(EXF106,ExfPurchDocLine."No.",ExfPurchDocLine."Inbound Document No.",ExfPurchDocLine."Line No.")
                ELSE
                  IF Account.Blocked THEN
                    ERROR(EXF107,ExfPurchDocLine."No.",ExfPurchDocLine."Inbound Document No.",ExfPurchDocLine."Line No.");
              END;

            ExfPurchDocLine.Type::Item :
              BEGIN
                IF NOT Item.GET(ExfPurchDocLine."No.") THEN
                  ERROR(EXF108,ExfPurchDocLine."No.",ExfPurchDocLine."Inbound Document No.",ExfPurchDocLine."Line No.")
                ELSE
                  IF Item.Blocked THEN
                    ERROR(EXF109,ExfPurchDocLine."No.",ExfPurchDocLine."Inbound Document No.",ExfPurchDocLine."Line No.");
              END;

            ExfPurchDocLine.Type::"Fixed Asset" :
              BEGIN
                IF NOT Fixed.GET(ExfPurchDocLine."No.") THEN
                  ERROR(EXF110,ExfPurchDocLine."No.",ExfPurchDocLine."Inbound Document No.",ExfPurchDocLine."Line No.")
                ELSE
                 IF Fixed.Blocked THEN
                   ERROR(EXF111,ExfPurchDocLine."No.",ExfPurchDocLine."Inbound Document No.",ExfPurchDocLine."Line No.");
              END;
          END;

          LineAdvOptions.RESET;
          LineAdvOptions.SETRANGE(Type, ExfPurchDocLine.Type);
          LineAdvOptions.SETFILTER("No.", '%1|%2', '', ExfPurchDocLine."No.");
          LineAdvOptions.SETFILTER("Minimum Amount", '%1|<=%2', 0, ExfPurchDocLine.Amount);
          LineAdvOptions.SETRANGE("Purchase Order Mandatory", TRUE);
          IF LineAdvOptions.FINDLAST THEN
            IF (ExfPurchDocLine."Order No." = '') AND (ExfPurchDocLine."Contract No." = 0) THEN
              ERROR(EXF118);
        END;

      // Receipt
      IF ExfPurchDocLine."Receipt No." <> '' THEN
        BEGIN
          PurchRcptLine.GET(ExfPurchDocLine."Receipt No.",ExfPurchDocLine."Receipt Line No.");
          IF ExfPurchDocLine.Type <> PurchRcptLine.Type THEN
            ERROR(EXF113,
                  PurchRcptLine.Type,
                  ExfPurchDocLine."Inbound Document No.",
                  ExfPurchDocLine."Line No.");
          IF ExfPurchDocLine."No." <> PurchRcptLine."No." THEN
            ERROR(EXF114,
                  PurchRcptLine."No.",
                  ExfPurchDocLine."Inbound Document No.",
                  ExfPurchDocLine."Line No.");
          IF ExfPurchDocLine.Quantity > PurchRcptLine."Qty. Rcd. Not Invoiced" THEN
            ERROR(EXF115,
                  PurchRcptLine."Qty. Rcd. Not Invoiced",
                  ExfPurchDocLine."Inbound Document No.",
                  ExfPurchDocLine."Line No.");
        END;

      // Return Shipment
      IF ExfPurchDocLine."Return Shipment No." <> '' THEN
        BEGIN
          ReturnShptLine.GET(ExfPurchDocLine."Return Shipment No.",ExfPurchDocLine."Return Shipment Line No.");
          IF ExfPurchDocLine.Type <> ReturnShptLine.Type THEN
            ERROR(EXF113,
                  ReturnShptLine.Type,
                  ExfPurchDocLine."Inbound Document No.",
                  ExfPurchDocLine."Line No.");
          IF ExfPurchDocLine."No." <> ReturnShptLine."No." THEN
            ERROR(EXF114,
                  ReturnShptLine."No.",
                  ExfPurchDocLine."Inbound Document No.",
                  ExfPurchDocLine."Line No.");
          IF ExfPurchDocLine.Quantity > ReturnShptLine."Return Qty. Shipped Not Invd." THEN
            ERROR(EXF115,
                  ReturnShptLine."Return Qty. Shipped Not Invd.",
                  ExfPurchDocLine."Inbound Document No.",
                  ExfPurchDocLine."Line No.");
        END;

      IF (AppSetup."Disable Over Invoicing") AND (ExfPurchDocLine."Order Line No." <> 0) THEN
        CheckOverInvoicing(ExfPurchDocLine);
    END;

    PROCEDURE CheckPostingSetup@1100285000(ExfPurchDocLine@1100285001 : Record 12013588);
    VAR
      GenPostingSetup@1100285002 : Record 252;
      VATPostingSetup@1100285000 : Record 325;
      Vend@1100285003 : Record 23;
    BEGIN
      IF ExfPurchDocLine.Type = 0 THEN
        EXIT;

      WITH ExfPurchDocLine DO BEGIN
        Vend.GET("Pay-to Vendor No.");

        TESTFIELD("Gen. Prod. Posting Group");
        IF NOT GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group") THEN
          ERROR(EXF121,
                "Inbound Document No.",
                "Line No.",
                Vend."Gen. Bus. Posting Group",
                "Gen. Prod. Posting Group");

        TESTFIELD("VAT Prod. Posting Group");
        IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
          ERROR(EXF122,
                "Inbound Document No.",
                "Line No.",
                Vend."VAT Bus. Posting Group",
                "VAT Prod. Posting Group");
      END;
    END;

    PROCEDURE CheckOverInvoicing@1100285001(ExfPurchDocLine@1100285000 : Record 12013588);
    VAR
      PurchOrderLine@1100285001 : Record 39;
    BEGIN
      PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,ExfPurchDocLine."Order No.",ExfPurchDocLine."Order Line No.");
      IF ExfPurchDocLine.Quantity > PurchOrderLine."Qty. Rcd. Not Invoiced" THEN
        ERROR(EXF124,
              PurchOrderLine."Qty. Rcd. Not Invoiced",
              ExfPurchDocLine."Line No.");
    END;

    BEGIN
    END.
  }
}

