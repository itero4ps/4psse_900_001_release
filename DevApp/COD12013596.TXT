OBJECT Codeunit 12013596 ExFlow User Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350000;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF CONFIRM(EXF008,FALSE) THEN
              ReplaceBatch(TRUE,TRUE);
          END;

  }
  CODE
  {
    VAR
      EXF001@1100285000 : TextConst 'ENU=User %1 has documents associated wtih it and cannot be deleted!';
      EXF002@1100285001 : TextConst 'ENU=Approval group %1 does has template rules associated wtih it and cannot be deleted! \Do you want to see the associated template rules?';
      EXF004@1100285006 : TextConst 'ENU=Do you want unblock user %1?';
      EXF005@1100285005 : TextConst 'ENU=Approved because user was blocked.';
      EXF006@1100285003 : TextConst 'ENU=Added because of history replacement.';
      EXF007@1100285004 : TextConst 'ENU=Updating approval records   #1###########';
      EXF008@1100285007 : TextConst 'ENU=Do you want to start the replace batch job (replacing both History and Template/Coding Rules)?';
      EXF009@1100285008 : TextConst 'ENU=User %1 have been assigned to template rules and must be blocked before it can be deleted!';
      RunInBatchMode@1100285009 : Boolean;
      EXF010@1100285010 : TextConst 'ENU=No user groups for user %1 have been found.';

    PROCEDURE DeleteUser@1100285000(VAR ExUserCompany@1100285001 : Record 12013641);
    VAR
      ExUserGroupLine@1100285000 : Record 12013607;
      TemplateRuleLine@1100285006 : Record 12013603;
      ExUserGroup@1100285004 : Record 12013606;
      TempDeletedUserGroup@1100285003 : TEMPORARY Record 12013606;
      ExUserComp2@1100285008 : Record 12013641;
      ExUser@1100285007 : Record 12013640;
      TempUserGroup@1100285005 : TEMPORARY Record 12013606;
    BEGIN
      FindUserGroups(TempUserGroup, ExUserCompany."Company Name", ExUserCompany."User ID");
      IF TempUserGroup.FIND('-') THEN
        REPEAT
          IF ExDocExist(TempUserGroup) THEN
            ERROR(STRSUBSTNO(EXF001,TempUserGroup.Code));

          IF TemplateLineExist(TempUserGroup) THEN BEGIN
            //344789
            IF NOT ExUserCompany.Blocked THEN
              ERROR(STRSUBSTNO(EXF009,ExUserCompany."User ID"));
            //344789
          END;
        UNTIL TempUserGroup.NEXT = 0;

      IF TempUserGroup.FIND('-') THEN BEGIN
        REPEAT
          TemplateRuleLine.SETRANGE("Company Name", TempUserGroup."Company Name");
          TemplateRuleLine.SETRANGE("Approver Group", TempUserGroup.Code);
          TemplateRuleLine.DELETEALL;

          IF NOT TempDeletedUserGroup.GET(TempUserGroup."Company Name",TempUserGroup.Code) THEN BEGIN
            TempDeletedUserGroup."Company Name" := TempUserGroup."Company Name";
            TempDeletedUserGroup.Code := TempUserGroup.Code;
            TempDeletedUserGroup.INSERT;
          END;

          ExUserGroupLine.RESET;
          ExUserGroupLine.SETRANGE("Company Name", TempUserGroup."Company Name");
          ExUserGroupLine.SETRANGE(Code, TempUserGroup.Code);
          ExUserGroupLine.SETRANGE("User ID", ExUserCompany."User ID");
          ExUserGroupLine.DELETEALL;
        UNTIL TempUserGroup.NEXT = 0;
      END;

      TempDeletedUserGroup.RESET;
      IF TempDeletedUserGroup.FIND('-') THEN
        REPEAT
          ExUserGroupLine.RESET;
          ExUserGroupLine.SETRANGE("Company Name", TempDeletedUserGroup."Company Name");
          ExUserGroupLine.SETRANGE(Code, TempDeletedUserGroup.Code);
          IF NOT ExUserGroupLine.FIND('-') THEN BEGIN
            ExUserGroup.GET(TempDeletedUserGroup."Company Name", TempDeletedUserGroup.Code);
            IF NOT ExUserGroup."Auto Approve" THEN
              ExUserGroup.DELETE;
          END;
        UNTIL TempDeletedUserGroup.NEXT = 0;

      ExUserComp2.RESET;
      ExUserComp2.SETFILTER("Company Name", '<>%1', ExUserCompany."Company Name");
      ExUserComp2.SETRANGE("User ID", ExUserCompany."User ID");
      IF NOT ExUserComp2.FIND('-') THEN BEGIN
        ExUser.GET(ExUserCompany."User ID");
        ExUser.DELETE;
      END;
    END;

    PROCEDURE ExDocExist@1100285003(ExUserGroup@1100285001 : Record 12013606) : Boolean;
    VAR
      ExDocLineApp@1100285000 : Record 12013610;
    BEGIN
      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY("Company Name",Approver,"Days to Due Date");
      ExDocLineApp.SETRANGE("Company Name", ExUserGroup."Company Name");
      ExDocLineApp.SETRANGE(Approver, ExUserGroup.Code);
      EXIT(ExDocLineApp.FIND('-'));
    END;

    PROCEDURE TemplateLineExist@1100285001(ExUserGroup@1100285000 : Record 12013606) : Boolean;
    VAR
      TemplateRuleLine@1100285001 : Record 12013603;
    BEGIN
      TemplateRuleLine.RESET;
      TemplateRuleLine.SETCURRENTKEY("Approver Group");
      TemplateRuleLine.SETRANGE("Company Name", ExUserGroup."Company Name");
      TemplateRuleLine.SETRANGE("Approver Group", ExUserGroup.Code);
      EXIT(TemplateRuleLine.FIND('-'));
    END;

    PROCEDURE DisplayTemplates@1100285013(ExUserGroup@1100285003 : Record 12013606);
    VAR
      TemplateRuleLine@1100285002 : Record 12013603;
      TemplateRule@1100285001 : Record 12013645;
      TempTemplateRule@1100285000 : TEMPORARY Record 12013645;
    BEGIN
      IF CONFIRM(EXF002,TRUE) THEN BEGIN
        TemplateRuleLine.RESET;
        TemplateRuleLine.SETCURRENTKEY("Approver Group");
        TemplateRuleLine.SETRANGE("Company Name", ExUserGroup."Company Name");
        TemplateRuleLine.SETRANGE("Approver Group", ExUserGroup.Code);
        IF TemplateRuleLine.FIND('-') THEN BEGIN
          REPEAT
            IF NOT TempTemplateRule.GET(TemplateRuleLine."Company Name",TemplateRuleLine.Code) THEN BEGIN
              TemplateRule.GET(TemplateRuleLine."Company Name",TemplateRuleLine.Code);

              TempTemplateRule.INIT;
              TempTemplateRule.TRANSFERFIELDS(TemplateRule);
              TempTemplateRule.INSERT;
            END;
          UNTIL TemplateRuleLine.NEXT = 0;

          PAGE.RUN(PAGE::"Template Rule List",TempTemplateRule);
        END;
      END;
    END;

    PROCEDURE BlockUser@1100285004(ExUserComp@1100285002 : Record 12013641);
    VAR
      UserComp@1100285001 : Record 12013641;
      BlockUser@1100285000 : Page 12013627;
      NewUser@1100285003 : Code[50];
      ReplaceHistory@1100285004 : Boolean;
      ReplaceTempCodeRules@1100285007 : Boolean;
    BEGIN
      WITH ExUserComp DO BEGIN
        IF Blocked THEN
          BEGIN
            IF CONFIRM(STRSUBSTNO(EXF004,ExUserComp."User ID"),TRUE) THEN
              BEGIN
                Blocked := FALSE;
                MODIFY;

                UnblockUser(COMPANYNAME, "User ID");
              END;
          END
        ELSE
          BEGIN
            //344789
            //344789

            CLEAR(BlockUser);
            UserComp.RESET;
            UserComp.SETRANGE("Company Name", COMPANYNAME);
            UserComp.SETRANGE("User ID", "User ID");

            BlockUser.LOOKUPMODE(TRUE);
            BlockUser.SETTABLEVIEW(UserComp);
            IF BlockUser.RUNMODAL = ACTION::LookupOK THEN BEGIN
              NewUser := BlockUser.GetNewUser;
              ReplaceHistory := BlockUser.GetReplaceHistory;
              ReplaceTempCodeRules := BlockUser.GetReplaceTempCodeRules;
              ReplaceBlockedUser(COMPANYNAME,"User ID", NewUser, ReplaceHistory, ReplaceTempCodeRules);
            END;
          END;
      END;
    END;

    PROCEDURE UnblockUser@1100285007(CompName@1100285002 : Text[50];UserID@1100285000 : Code[50]);
    VAR
      TempUserGroup@1100285001 : TEMPORARY Record 12013606;
      UserGroup@1100285003 : Record 12013606;
    BEGIN
      //344718
      FindUserGroups(TempUserGroup, CompName, UserID);

      IF TempUserGroup.FIND('-') THEN
        REPEAT
          UserGroup.GET(TempUserGroup."Company Name", TempUserGroup.Code);
          UserGroup.Blocked := FALSE;
          UserGroup."Exclude from web list" := FALSE;
          UserGroup.MODIFY;
        UNTIL TempUserGroup.NEXT = 0;
    END;

    PROCEDURE ReplaceBlockedUser@1100285002(CompName@1100285010 : Text[50];OldUser@1100285004 : Code[50];NewUser@1100285003 : Code[50];ReplaceHistory@1100285011 : Boolean;ReplaceTempCodeRules@1100285017 : Boolean);
    VAR
      UserComp@1100285002 : Record 12013641;
      UserGroup@1100285001 : Record 12013606;
      OldUserGroup@1100285005 : Record 12013606;
      ExDocApp@1100285000 : Record 12013610;
      NewExDocApp@1100285006 : Record 12013610;
      ExDocument@1100285008 : Record 12013608;
      ExDocument2@1100285009 : Record 12013608;
      TempUserGroup@1100285012 : TEMPORARY Record 12013606;
      TempDocLine@1100285014 : TEMPORARY Record 12013609;
      NewApproverOrder@1100285007 : Integer;
      Window@1100285013 : Dialog;
    BEGIN
      UserComp.GET(CompName, OldUser);
      UserComp.Blocked := TRUE;
      UserComp."Replaced with User" := NewUser;
      UserComp.MODIFY;

      //344718
      FindUserGroups(TempUserGroup, CompName, OldUser);

      IF GUIALLOWED THEN
        Window.OPEN(EXF007);

      IF TempUserGroup.FIND('-') THEN BEGIN
        REPEAT
      //344718
          UserGroup.GET(CompName, NewUser);

          OldUserGroup.GET(TempUserGroup."Company Name", TempUserGroup.Code);
          OldUserGroup.Blocked := TRUE;
          OldUserGroup."Exclude from web list" := TRUE;
          OldUserGroup.MODIFY;

          //344789
          IF ReplaceTempCodeRules THEN BEGIN
            ReplaceTemplateRules(CompName,OldUser,NewUser);
            ReplaceRequisitionRules(CompName,OldUser,NewUser);
            ReplaceCodingRules(CompName,OldUser,NewUser);
          END;
          //344789

          ExDocApp.RESET;
          ExDocApp.SETCURRENTKEY("Company Name",Approver,"Days to Due Date");
          ExDocApp.SETRANGE("Company Name", CompName);
          ExDocApp.SETRANGE(Approver, OldUserGroup.Code);
          IF NOT ReplaceHistory THEN
            //342549
            ExDocApp.SETFILTER(Flowstatus, '<>%1&<>%2', ExDocApp.Flowstatus::Approved,ExDocApp.Flowstatus::Rejected);
            //342549
          IF ExDocApp.FINDSET(TRUE,FALSE) THEN BEGIN
            REPEAT
              IF GUIALLOWED THEN
                Window.UPDATE(1,ExDocApp.ID);

              NewExDocApp.RESET;
              NewExDocApp.SETCURRENTKEY("Company Name","Document Type","Document No.","Line No.","Approver Order");
              NewExDocApp.SETRANGE("Company Name", ExDocApp."Company Name");
              NewExDocApp.SETRANGE("Document Type", ExDocApp."Document Type");
              NewExDocApp.SETRANGE("Document No.", ExDocApp."Document No.");
              NewExDocApp.SETRANGE("Line No.", ExDocApp."Line No.");
              NewExDocApp.SETFILTER("Approver Order", '>%1', ExDocApp."Approver Order");
              IF NewExDocApp.FIND('-') THEN
                NewApproverOrder := ExDocApp."Approver Order" + ROUND((NewExDocApp."Approver Order" - ExDocApp."Approver Order") / 2,1)
              ELSE
                NewApproverOrder := ExDocApp."Approver Order" + 10000;

              NewExDocApp.INIT;
              NewExDocApp.TRANSFERFIELDS(ExDocApp);
              NewExDocApp."Approver Order" := NewApproverOrder;
              NewExDocApp.Approver := UserGroup.Code;
              NewExDocApp.Comment := '';
              NewExDocApp."Approval Date" := CREATEDATETIME(0D,0T);
              NewExDocApp."Approved By" := '';
              NewExDocApp.Flowstatus := NewExDocApp.Flowstatus::"Not processed";
              NewExDocApp.ID := 0;

              IF (ExDocApp.Flowstatus IN [ExDocApp.Flowstatus::Approved, ExDocApp.Flowstatus::Rejected]) THEN BEGIN
                NewExDocApp.Comment := EXF006;
                NewExDocApp."Approval Date" := ExDocApp."Approval Date";
                NewExDocApp."Approved By" := ExDocApp."Approved By";
                NewExDocApp.Flowstatus := ExDocApp.Flowstatus;
                NewExDocApp.INSERT;
              END
              ELSE
                NewExDocApp.INSERT;

              IF NOT (ExDocApp.Flowstatus IN [ExDocApp.Flowstatus::Approved, ExDocApp.Flowstatus::Rejected]) THEN BEGIN
                ExDocApp."Approval Date" := CREATEDATETIME(TODAY,TIME);
                ExDocApp."Approved By" := ExDocApp.Approver;
                ExDocApp.Comment := EXF005;
                ExDocApp.Flowstatus := ExDocApp.Flowstatus::Approved;
                ExDocApp.MODIFY;
              END;

              IF NOT TempDocLine.GET(ExDocApp."Document Line ID") THEN BEGIN
                IF NOT (ExDocApp."Document Type" IN [ExDocApp."Document Type"::"Posted Invoice",
                                                     ExDocApp."Document Type"::"Posted Credit Memo"]) THEN BEGIN
                  TempDocLine.ID := ExDocApp."Document Line ID";
                  TempDocLine.INSERT;
                END;
              END;
            UNTIL ExDocApp.NEXT = 0;

            IF TempDocLine.FIND('-') THEN
              REPEAT
                ExDocApp.RESET;
                ExDocApp.SETRANGE("Document Line ID", TempDocLine.ID);
                ExDocApp.SETRANGE(Flowstatus, ExDocApp.Flowstatus::Rejected);
                IF NOT ExDocApp.FINDFIRST THEN BEGIN
                  ExDocApp.SETFILTER(Flowstatus, '<=%1', ExDocApp.Flowstatus::Current);
                  IF ExDocApp.FINDFIRST THEN BEGIN
                    ExDocApp.ApprovalStatus(ExDocApp,'Update');
                    ExDocApp.MODIFY;
                  END;
                END;
              UNTIL TempDocLine.NEXT = 0;
          END;

          //342533
          // Add new receiving person
          ExDocument.RESET;
          ExDocument.SETCURRENTKEY(Initiator);
          ExDocument.SETRANGE("Company Name", CompName);
          ExDocument.SETFILTER("Document Type", '%1|%2|%3', ExDocument."Document Type"::Quote,
                                                            ExDocument."Document Type"::Order,
                                                            ExDocument."Document Type"::Requisition);
          ExDocument.SETRANGE(Initiator, OldUser);
          IF ExDocument.FINDSET(TRUE) THEN
            REPEAT
              ExDocument2.GET(ExDocument.ID);
              ExDocument2.Initiator := NewUser;
              ExDocument2.MODIFY;
            UNTIL ExDocument.NEXT = 0;

          ExDocument.RESET;
          ExDocument.SETCURRENTKEY("Assigned Receipt Group");
          ExDocument.SETRANGE("Company Name", CompName);
          ExDocument.SETFILTER("Document Type", '%1|%2|%3', ExDocument."Document Type"::Quote,
                                                            ExDocument."Document Type"::Order,
                                                            ExDocument."Document Type"::Requisition);
          ExDocument.SETRANGE("Assigned Receipt Group", OldUser);
          IF ExDocument.FINDSET(TRUE) THEN
            REPEAT
              ExDocument2.GET(ExDocument.ID);
              ExDocument2."Assigned Receipt Group" := NewUser;
              ExDocument2.MODIFY;
            UNTIL ExDocument.NEXT = 0;
          //342533
        UNTIL TempUserGroup.NEXT = 0;
      END
      ELSE
        IF NOT RunInBatchMode THEN
          ERROR(STRSUBSTNO(EXF010,OldUser));
    END;

    PROCEDURE ReplaceBatch@1100285005(ReplaceHistory@1100285001 : Boolean;ReplaceTempCodeRules@1100285003 : Boolean);
    VAR
      ExUserComp@1100285000 : Record 12013641;
    BEGIN
      //342615
      RunInBatchMode := TRUE;
      ExUserComp.RESET;
      ExUserComp.SETFILTER("Replace with User", '<>%1', '');
      ExUserComp.FINDSET;
      REPEAT
        ReplaceBlockedUser(ExUserComp."Company Name",ExUserComp."User ID",ExUserComp."Replace with User",ReplaceHistory,
                           ReplaceTempCodeRules);
      UNTIL ExUserComp.NEXT = 0;
    END;

    PROCEDURE FindUserGroups@1100285006(VAR TempUserGroup@1100285000 : TEMPORARY Record 12013606;CompName@1100285003 : Text[50];OldUser@1100285001 : Code[50]);
    VAR
      UserGroupLine@1100285002 : Record 12013607;
      UserGroupLine2@1100285004 : Record 12013607;
    BEGIN
      TempUserGroup.RESET;
      TempUserGroup.DELETEALL;

      UserGroupLine.RESET;
      UserGroupLine.SETRANGE("Company Name", CompName);
      UserGroupLine.SETRANGE(Code, OldUser);
      IF UserGroupLine.FINDSET THEN
        REPEAT
          TempUserGroup.RESET;
          TempUserGroup.SETRANGE("Company Name", UserGroupLine."Company Name");
          TempUserGroup.SETRANGE(Code, UserGroupLine.Code);
          IF NOT TempUserGroup.FIND('-') THEN BEGIN
            UserGroupLine2.RESET;
            UserGroupLine2.SETRANGE("Company Name", UserGroupLine."Company Name");
            UserGroupLine2.SETRANGE(Code, UserGroupLine.Code);
            UserGroupLine2.SETFILTER("User ID", '<>%1', OldUser);
            UserGroupLine2.SETFILTER("Ending Date", '>=%1', TODAY);
            IF NOT UserGroupLine2.FINDFIRST THEN BEGIN
              TempUserGroup."Company Name" := UserGroupLine."Company Name";
              TempUserGroup.Code := UserGroupLine.Code;
              TempUserGroup.INSERT;
            END;
          END;
        UNTIL UserGroupLine.NEXT = 0;
    END;

    PROCEDURE ReplaceTemplateRules@1100285010(CompName@1100285005 : Text[50];OldUser@1100285001 : Code[50];NewUser@1100285000 : Code[50]);
    VAR
      TemplateRule@1100285003 : Record 12013645;
      TemplateRule2@1100285006 : Record 12013645;
      TemplateRuleLine@1100285002 : Record 12013603;
      TemplateRuleLine2@1100285004 : Record 12013603;
      TempTemplateRuleLine@1100285008 : TEMPORARY Record 12013603;
    BEGIN
      IF OldUser = NewUser THEN
        EXIT;

      TemplateRuleLine.RESET;
      TemplateRuleLine.SETCURRENTKEY("Approver Group");
      TemplateRuleLine.SETRANGE("Company Name", CompName);
      TemplateRuleLine.SETRANGE("Approver Group", OldUser);
      IF TemplateRuleLine.FINDSET(TRUE) THEN
        REPEAT
          TemplateRuleLine2.GET(TemplateRuleLine."Company Name",TemplateRuleLine.Code,TemplateRuleLine."Line No.");
          TemplateRuleLine2.VALIDATE("Approver Group", NewUser);
          TemplateRuleLine2.MODIFY;
        UNTIL TemplateRuleLine.NEXT = 0;

      TemplateRule.RESET;
      TemplateRule.SETRANGE("Company Name", CompName);
      TemplateRule.SETRANGE("First Approver Filter", OldUser);
      IF TemplateRule.FINDSET(TRUE) THEN
        REPEAT
          TemplateRule2.GET(TemplateRule."Company Name",TemplateRule.Code);
          TemplateRule2."First Approver Filter" := NewUser;
          TemplateRule2.MODIFY;
        UNTIL TemplateRule.NEXT = 0;

      TemplateRule.RESET;
      TemplateRule.SETRANGE("Company Name", CompName);
      TemplateRule.SETFILTER("First Approver Filter", '%1', '*' + OldUser + '*');
      IF TemplateRule.FINDSET(TRUE) THEN
        REPEAT
          TempTemplateRuleLine.RESET;
          TempTemplateRuleLine.DELETEALL;

          ParseIntoTempTable(TemplateRule."Company Name",TemplateRule.Code,TemplateRule."First Approver Filter",TempTemplateRuleLine);

          TempTemplateRuleLine.SETRANGE("Approver Group", OldUser);
          IF TempTemplateRuleLine.FINDFIRST THEN BEGIN
            TempTemplateRuleLine.MODIFYALL("Approver Group", NewUser);
            TemplateRule2.GET(TemplateRule."Company Name",TemplateRule.Code);

            ParseFromTempTable(TempTemplateRuleLine,TemplateRule2."First Approver Filter");
            TemplateRule2.MODIFY;
          END;
        UNTIL TemplateRule.NEXT = 0;
    END;

    PROCEDURE ReplaceCodingRules@1100285008(CompName@1100285003 : Text[50];OldUser@1100285002 : Code[50];NewUser@1100285001 : Code[50]);
    VAR
      CodingRuleAppGroup@1100285000 : Record 12013664;
      CodingRuleAppGroup2@1100285004 : Record 12013664;
    BEGIN
      IF OldUser = NewUser THEN
        EXIT;

      CodingRuleAppGroup.RESET;
      CodingRuleAppGroup.SETRANGE("Company Name", CompName);
      CodingRuleAppGroup.SETRANGE("User Group Code", OldUser);
      IF CodingRuleAppGroup.FINDSET(TRUE,TRUE) THEN BEGIN
        REPEAT
          CodingRuleAppGroup2.INIT;
          CodingRuleAppGroup2.TRANSFERFIELDS(CodingRuleAppGroup);
          CodingRuleAppGroup2."User Group Code" := NewUser;
          CodingRuleAppGroup2.INSERT;
        UNTIL CodingRuleAppGroup.NEXT = 0;
        CodingRuleAppGroup.DELETEALL;
      END;
    END;

    PROCEDURE ReplaceRequisitionRules@1100285011(CompName@1100285005 : Text[50];OldUser@1100285001 : Code[50];NewUser@1100285000 : Code[50]);
    VAR
      ReqRule@1100285002 : Record 12013621;
      ReqRule2@1100285004 : Record 12013621;
      TempTemplateRuleLine@1100285003 : TEMPORARY Record 12013603;
    BEGIN
      IF OldUser = NewUser THEN
        EXIT;

      ReqRule.RESET;
      ReqRule.SETRANGE("Company Name", CompName);
      ReqRule.SETRANGE("Created by Filter", OldUser);
      IF ReqRule.FINDSET(TRUE) THEN
        REPEAT
          ReqRule2.GET(ReqRule."Company Name",ReqRule.Code);
          ReqRule2."Created by Filter" := NewUser;
          ReqRule2.MODIFY;
        UNTIL ReqRule.NEXT = 0;

      ReqRule.RESET;
      ReqRule.SETRANGE("Company Name", CompName);
      ReqRule.SETFILTER("Created by Filter", '%1', '*' + OldUser + '*');
      IF ReqRule.FINDSET(TRUE) THEN
        REPEAT
          TempTemplateRuleLine.RESET;
          TempTemplateRuleLine.DELETEALL;

          ParseIntoTempTable(ReqRule."Company Name",ReqRule.Code,ReqRule."Created by Filter",TempTemplateRuleLine);

          TempTemplateRuleLine.SETRANGE("Approver Group", OldUser);
          IF TempTemplateRuleLine.FINDFIRST THEN BEGIN
            TempTemplateRuleLine.MODIFYALL("Approver Group", NewUser);
            ReqRule2.GET(ReqRule."Company Name",ReqRule.Code);

            ParseFromTempTable(TempTemplateRuleLine,ReqRule2."Created by Filter");
            ReqRule2.MODIFY;
          END;
        UNTIL ReqRule.NEXT = 0;
    END;

    PROCEDURE ParseIntoTempTable@1100285012(CompName@1100285004 : Text[50];Code@1100285006 : Code[20];FilterValue@1100285008 : Text[1024];VAR TempTemplateRuleLine@1100285001 : TEMPORARY Record 12013603);
    VAR
      TempPos@1100285002 : Integer;
      TempCode@1100285003 : Code[20];
      InStr@1100285000 : Text[1024];
      NoMoreString@1100285005 : Boolean;
      TempLineNo@1100285007 : Integer;
    BEGIN
      InStr := FilterValue;
      IF InStr = '' THEN
        EXIT;

      NoMoreString := FALSE;

      REPEAT
        TempPos := STRPOS(InStr,'|');
        IF TempPos <> 0 THEN BEGIN
          TempCode := COPYSTR(InStr,1,TempPos - 1);

          TempTemplateRuleLine."Company Name" := CompName;
          TempTemplateRuleLine.Code := Code;
          TempTemplateRuleLine."Line No." := TempLineNo;
          TempLineNo := TempLineNo + 10000;
          TempTemplateRuleLine."Approver Group" := TempCode;
          TempTemplateRuleLine.INSERT;

          InStr := DELSTR(InStr,1,TempPos);
        END
        ELSE BEGIN
          IF InStr <> '' THEN BEGIN
            TempCode := InStr;

            TempTemplateRuleLine."Company Name" := CompName;
            TempTemplateRuleLine.Code := Code;
            TempTemplateRuleLine."Line No." := TempLineNo;
            TempLineNo := TempLineNo + 10000;
            TempTemplateRuleLine."Approver Group" := TempCode;
            TempTemplateRuleLine.INSERT;
          END;

          NoMoreString := TRUE;
        END;
      UNTIL NoMoreString;
    END;

    PROCEDURE ParseFromTempTable@1100285009(VAR TempTemplateRuleLine@1100285004 : TEMPORARY Record 12013603;VAR OutStr@1100285001 : Code[1024]);
    BEGIN
      OutStr := '';
      TempTemplateRuleLine.RESET;
      IF TempTemplateRuleLine.FIND('-') THEN BEGIN
        REPEAT
          OutStr := OutStr + TempTemplateRuleLine."Approver Group" + '|';
        UNTIL TempTemplateRuleLine.NEXT = 0;

        OutStr := COPYSTR(OutStr,1,STRLEN(OutStr)-1);
      END;
    END;

    BEGIN
    END.
  }
}

