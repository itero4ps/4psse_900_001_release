OBJECT Codeunit 12013596 ExFlow User Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF400006;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EXF001@1100285000 : TextConst 'ENU=User %1 has documents associated wtih it and cannot be deleted!';
      EXF002@1100285001 : TextConst 'ENU=Approval group %1 does has template rules associated wtih it and cannot be deleted! \Do you want to see the associated template rules?';
      EXF004@1100285006 : TextConst 'ENU=Do you want unblock user %1?';
      EXF005@1100285005 : TextConst 'ENU=Approved because user was blocked.';
      EXF006@1100285003 : TextConst 'ENU=Added because of history replacement.';
      EXF007@1100285004 : TextConst 'ENU=Updating approval records   #1###########';
      EXF008@1100285002 : TextConst 'ENU=Updating posted approval records   #1###########';
      EXF009@1100285008 : TextConst 'ENU=User %1 have been assigned to template rules and must be blocked before it can be deleted!';
      RunInBatchMode@1100285009 : Boolean;
      EXF010@1100285010 : TextConst 'ENU=No user groups for user %1 have been found.';
      EXF011@1100285007 : TextConst 'ENU=Warning! There are no user group lines, is that correct?';
      EXF012@1100285011 : TextConst 'ENU=Starting and Ending date must either BOTH be empty or filled in!';
      EXF013@1100285012 : TextConst 'ENU=Starting Date cannot be after Ending Date!';

    PROCEDURE DeleteUser@1100285000(VAR ExUserCompany@1100285001 : Record 12013641);
    VAR
      ExUserGroupLine@1100285000 : Record 12013607;
      TemplateRuleLine@1100285006 : Record 12013603;
      ExUserGroup@1100285004 : Record 12013606;
      TempDeletedUserGroup@1100285003 : TEMPORARY Record 12013606;
      ExUserComp2@1100285008 : Record 12013641;
      ExUser@1100285007 : Record 12013640;
      TempUserGroup@1100285005 : TEMPORARY Record 12013606;
      Company@1100285002 : Record 2000000006;
      ExUserFound@1100285009 : Boolean;
    BEGIN
      FindUserGroups(TempUserGroup, ExUserCompany."User ID");
      IF TempUserGroup.FIND('-') THEN
        REPEAT
          IF ExDocExist(TempUserGroup) THEN
            ERROR(STRSUBSTNO(EXF001,TempUserGroup.Code));

          IF TemplateLineExist(TempUserGroup) THEN BEGIN
            IF NOT ExUserCompany.Blocked THEN
              ERROR(STRSUBSTNO(EXF009,ExUserCompany."User ID"));
          END;
        UNTIL TempUserGroup.NEXT = 0;

      IF TempUserGroup.FIND('-') THEN BEGIN
        REPEAT
          TemplateRuleLine.SETRANGE("Approver Group", TempUserGroup.Code);
          TemplateRuleLine.DELETEALL;

          IF NOT TempDeletedUserGroup.GET(TempUserGroup.Code) THEN BEGIN
            TempDeletedUserGroup.Code := TempUserGroup.Code;
            TempDeletedUserGroup.INSERT;
          END;

          ExUserGroupLine.RESET;
          ExUserGroupLine.SETRANGE(Code, TempUserGroup.Code);
          ExUserGroupLine.SETRANGE("User ID", ExUserCompany."User ID");
          ExUserGroupLine.DELETEALL;
        UNTIL TempUserGroup.NEXT = 0;
      END;

      TempDeletedUserGroup.RESET;
      IF TempDeletedUserGroup.FIND('-') THEN
        REPEAT
          ExUserGroupLine.RESET;
          ExUserGroupLine.SETRANGE(Code, TempDeletedUserGroup.Code);
          IF NOT ExUserGroupLine.FIND('-') THEN BEGIN
            ExUserGroup.GET(TempDeletedUserGroup.Code);
            IF NOT ExUserGroup."Auto Approve" THEN
              ExUserGroup.DELETE;
          END;
        UNTIL TempDeletedUserGroup.NEXT = 0;

      ExUserFound := FALSE;
      Company.RESET;
      Company.FINDSET;
      REPEAT
        ExUserComp2.RESET;
        ExUserComp2.CHANGECOMPANY(Company.Name);
        ExUserComp2.SETRANGE("User ID", ExUserCompany."User ID");
        IF ExUserComp2.FIND('-') THEN
          ExUserFound := TRUE;
      UNTIL (Company.NEXT = 0) OR ExUserFound;

      IF NOT ExUserFound THEN BEGIN
        ExUser.GET(ExUserCompany."User ID");
        ExUser.DELETE;
      END;
    END;

    PROCEDURE ExDocExist@1100285003(ExUserGroup@1100285001 : Record 12013606) : Boolean;
    VAR
      ExDocLineApp@1100285000 : Record 12013610;
    BEGIN
      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,"Days to Due Date");
      ExDocLineApp.SETRANGE(Approver, ExUserGroup.Code);
      EXIT(ExDocLineApp.FIND('-'));
    END;

    PROCEDURE TemplateLineExist@1100285001(ExUserGroup@1100285000 : Record 12013606) : Boolean;
    VAR
      TemplateRuleLine@1100285001 : Record 12013603;
    BEGIN
      TemplateRuleLine.RESET;
      TemplateRuleLine.SETCURRENTKEY("Approver Group");
      TemplateRuleLine.SETRANGE("Approver Group", ExUserGroup.Code);
      EXIT(TemplateRuleLine.FIND('-'));
    END;

    PROCEDURE DisplayTemplates@1100285013(ExUserGroup@1100285003 : Record 12013606);
    VAR
      TemplateRuleLine@1100285002 : Record 12013603;
      TemplateRule@1100285001 : Record 12013645;
      TempTemplateRule@1100285000 : TEMPORARY Record 12013645;
    BEGIN
      IF CONFIRM(EXF002,TRUE) THEN BEGIN
        TemplateRuleLine.RESET;
        TemplateRuleLine.SETCURRENTKEY("Approver Group");
        TemplateRuleLine.SETRANGE("Approver Group", ExUserGroup.Code);
        IF TemplateRuleLine.FIND('-') THEN BEGIN
          REPEAT
            IF NOT TempTemplateRule.GET(TemplateRuleLine.Code) THEN BEGIN
              TemplateRule.GET(TemplateRuleLine.Code);

              TempTemplateRule.INIT;
              TempTemplateRule.TRANSFERFIELDS(TemplateRule);
              TempTemplateRule.INSERT;
            END;
          UNTIL TemplateRuleLine.NEXT = 0;

          PAGE.RUN(PAGE::"Template Rule List",TempTemplateRule);
        END;
      END;
    END;

    PROCEDURE BlockUser@1100285004(ExUserComp@1100285002 : Record 12013641);
    VAR
      UserComp@1100285001 : Record 12013641;
      BlockUser@1100285000 : Page 12013627;
      NewUser@1100285003 : Code[50];
      ReplaceHistory@1100285004 : Boolean;
      ReplaceTempCodeRules@1100285007 : Boolean;
    BEGIN
      WITH ExUserComp DO BEGIN
        IF Blocked THEN
          BEGIN
            IF CONFIRM(STRSUBSTNO(EXF004,ExUserComp."User ID"),TRUE) THEN
              BEGIN
                Blocked := FALSE;
                MODIFY;

                UnblockUser("User ID");
              END;
          END
        ELSE
          BEGIN
            CLEAR(BlockUser);
            UserComp.RESET;
            UserComp.SETRANGE("User ID", "User ID");

            BlockUser.LOOKUPMODE(TRUE);
            BlockUser.SETTABLEVIEW(UserComp);
            IF BlockUser.RUNMODAL = ACTION::LookupOK THEN BEGIN
              NewUser := BlockUser.GetNewUser;
              ReplaceHistory := BlockUser.GetReplaceHistory;
              ReplaceTempCodeRules := BlockUser.GetReplaceTempCodeRules;
              ReplaceBlockedUser("User ID", NewUser, ReplaceHistory, ReplaceTempCodeRules);
            END;
          END;
      END;
    END;

    PROCEDURE UnblockUser@1100285007(UserID@1100285000 : Code[50]);
    VAR
      TempUserGroup@1100285001 : TEMPORARY Record 12013606;
      UserGroup@1100285003 : Record 12013606;
    BEGIN
      FindUserGroups(TempUserGroup, UserID);

      IF TempUserGroup.FIND('-') THEN
        REPEAT
          UserGroup.GET(TempUserGroup.Code);
          UserGroup.Blocked := FALSE;
          UserGroup."Exclude from web list" := FALSE;
          UserGroup.MODIFY;
        UNTIL TempUserGroup.NEXT = 0;
    END;

    PROCEDURE ReplaceBlockedUser@1100285002(OldUser@1100285004 : Code[50];NewUser@1100285003 : Code[50];ReplaceHistory@1100285011 : Boolean;ReplaceTempCodeRules@1100285017 : Boolean);
    VAR
      UserComp@1100285002 : Record 12013641;
      UserGroup@1100285001 : Record 12013606;
      OldUserGroup@1100285005 : Record 12013606;
      ExDocument@1100285008 : Record 12013608;
      ExDocument2@1100285009 : Record 12013608;
      TempUserGroup@1100285012 : TEMPORARY Record 12013606;
    BEGIN
      UserComp.GET(OldUser);
      UserComp.Blocked := TRUE;
      UserComp."Replaced with User" := NewUser;
      UserComp.MODIFY;

      FindUserGroups(TempUserGroup, OldUser);

      IF TempUserGroup.FIND('-') THEN BEGIN
        REPEAT
          UserGroup.GET(NewUser);

          OldUserGroup.GET(TempUserGroup.Code);
          OldUserGroup.Blocked := TRUE;
          OldUserGroup."Exclude from web list" := TRUE;
          OldUserGroup.MODIFY;

          IF ReplaceTempCodeRules THEN BEGIN
            ReplaceTemplateRules(OldUser,NewUser);
            ReplaceRequisitionRules(OldUser,NewUser);
            ReplaceCodingRules(OldUser,NewUser);
          END;

          ReplaceExDoc(ReplaceHistory,OldUserGroup,UserGroup);
          ReplacePostedExDoc(ReplaceHistory,OldUserGroup,UserGroup);

          // Add new receiving person
          ExDocument.RESET;
          ExDocument.SETCURRENTKEY(Initiator);
          ExDocument.SETFILTER("Document Type", '%1|%2|%3', ExDocument."Document Type"::Quote,
                                                            ExDocument."Document Type"::Order,
                                                            ExDocument."Document Type"::Requisition);
          ExDocument.SETRANGE(Initiator, OldUser);
          IF ExDocument.FINDSET(TRUE) THEN
            REPEAT
              ExDocument2.GET(ExDocument.ID);
              ExDocument2.Initiator := NewUser;
              ExDocument2.MODIFY;
            UNTIL ExDocument.NEXT = 0;

          ExDocument.RESET;
          ExDocument.SETCURRENTKEY("Assigned Receipt Group");
          ExDocument.SETFILTER("Document Type", '%1|%2|%3', ExDocument."Document Type"::Quote,
                                                            ExDocument."Document Type"::Order,
                                                            ExDocument."Document Type"::Requisition);
          ExDocument.SETRANGE("Assigned Receipt Group", OldUser);
          IF ExDocument.FINDSET(TRUE) THEN
            REPEAT
              ExDocument2.GET(ExDocument.ID);
              ExDocument2."Assigned Receipt Group" := NewUser;
              ExDocument2.MODIFY;
            UNTIL ExDocument.NEXT = 0;
        UNTIL TempUserGroup.NEXT = 0;
      END
      ELSE
        IF NOT RunInBatchMode THEN
          ERROR(STRSUBSTNO(EXF010,OldUser));
    END;

    PROCEDURE FindUserGroups@1100285006(VAR TempUserGroup@1100285000 : TEMPORARY Record 12013606;OldUser@1100285001 : Code[50]);
    VAR
      UserGroupLine@1100285002 : Record 12013607;
      UserGroupLine2@1100285004 : Record 12013607;
    BEGIN
      TempUserGroup.RESET;
      TempUserGroup.DELETEALL;

      UserGroupLine.RESET;
      UserGroupLine.SETRANGE(Code, OldUser);
      IF UserGroupLine.FINDSET THEN
        REPEAT
          TempUserGroup.RESET;
          TempUserGroup.SETRANGE(Code, UserGroupLine.Code);
          IF NOT TempUserGroup.FIND('-') THEN BEGIN
            UserGroupLine2.RESET;
            UserGroupLine2.SETRANGE(Code, UserGroupLine.Code);
            UserGroupLine2.SETFILTER("User ID", '<>%1', OldUser);
            UserGroupLine2.SETFILTER("Ending Date", '>=%1', TODAY);
            IF NOT UserGroupLine2.FINDFIRST THEN BEGIN
              TempUserGroup.Code := UserGroupLine.Code;
              TempUserGroup.INSERT;
            END;
          END;
        UNTIL UserGroupLine.NEXT = 0;
    END;

    PROCEDURE ReplaceTemplateRules@1100285010(OldUser@1100285001 : Code[50];NewUser@1100285000 : Code[50]);
    VAR
      TemplateRule@1100285003 : Record 12013645;
      TemplateRule2@1100285006 : Record 12013645;
      TemplateRuleLine@1100285002 : Record 12013603;
      TemplateRuleLine2@1100285004 : Record 12013603;
      TempTemplateRuleLine@1100285008 : TEMPORARY Record 12013603;
    BEGIN
      IF OldUser = NewUser THEN
        EXIT;

      TemplateRuleLine.RESET;
      TemplateRuleLine.SETCURRENTKEY("Approver Group");
      TemplateRuleLine.SETRANGE("Approver Group", OldUser);
      IF TemplateRuleLine.FINDSET(TRUE) THEN
        REPEAT
          TemplateRuleLine2.GET(TemplateRuleLine.Code,TemplateRuleLine."Line No.");
          TemplateRuleLine2.VALIDATE("Approver Group", NewUser);
          TemplateRuleLine2.MODIFY;
        UNTIL TemplateRuleLine.NEXT = 0;

      TemplateRule.RESET;
      TemplateRule.SETRANGE("First Approver Filter", OldUser);
      IF TemplateRule.FINDSET(TRUE) THEN
        REPEAT
          TemplateRule2.GET(TemplateRule.Code);
          TemplateRule2."First Approver Filter" := NewUser;
          TemplateRule2.MODIFY;
        UNTIL TemplateRule.NEXT = 0;

      TemplateRule.RESET;
      TemplateRule.SETFILTER("First Approver Filter", '%1', '*' + OldUser + '*');
      IF TemplateRule.FINDSET(TRUE) THEN
        REPEAT
          TempTemplateRuleLine.RESET;
          TempTemplateRuleLine.DELETEALL;

          ParseIntoTempTable(TemplateRule.Code,TemplateRule."First Approver Filter",TempTemplateRuleLine);

          TempTemplateRuleLine.SETRANGE("Approver Group", OldUser);
          IF TempTemplateRuleLine.FINDFIRST THEN BEGIN
            TempTemplateRuleLine.MODIFYALL("Approver Group", NewUser);
            TemplateRule2.GET(TemplateRule.Code);

            ParseFromTempTable(TempTemplateRuleLine,TemplateRule2."First Approver Filter");
            TemplateRule2.MODIFY;
          END;
        UNTIL TemplateRule.NEXT = 0;
    END;

    PROCEDURE ReplaceCodingRules@1100285008(OldUser@1100285002 : Code[50];NewUser@1100285001 : Code[50]);
    VAR
      CodingRuleAppGroup@1100285000 : Record 12013664;
      CodingRuleAppGroup2@1100285004 : Record 12013664;
    BEGIN
      IF OldUser = NewUser THEN
        EXIT;

      CodingRuleAppGroup.RESET;
      CodingRuleAppGroup.SETRANGE("User Group Code", OldUser);
      IF CodingRuleAppGroup.FINDSET(TRUE,TRUE) THEN BEGIN
        REPEAT
          CodingRuleAppGroup2.INIT;
          CodingRuleAppGroup2.TRANSFERFIELDS(CodingRuleAppGroup);
          CodingRuleAppGroup2."User Group Code" := NewUser;
          CodingRuleAppGroup2.INSERT;
        UNTIL CodingRuleAppGroup.NEXT = 0;
        CodingRuleAppGroup.DELETEALL;
      END;
    END;

    PROCEDURE ReplaceRequisitionRules@1100285011(OldUser@1100285001 : Code[50];NewUser@1100285000 : Code[50]);
    VAR
      ReqRule@1100285002 : Record 12013621;
      ReqRule2@1100285004 : Record 12013621;
      TempTemplateRuleLine@1100285003 : TEMPORARY Record 12013603;
    BEGIN
      IF OldUser = NewUser THEN
        EXIT;

      ReqRule.RESET;
      ReqRule.SETRANGE("Created by Filter", OldUser);
      IF ReqRule.FINDSET(TRUE) THEN
        REPEAT
          ReqRule2.GET(ReqRule.Code);
          ReqRule2."Created by Filter" := NewUser;
          ReqRule2.MODIFY;
        UNTIL ReqRule.NEXT = 0;

      ReqRule.RESET;
      ReqRule.SETFILTER("Created by Filter", '%1', '*' + OldUser + '*');
      IF ReqRule.FINDSET(TRUE) THEN
        REPEAT
          TempTemplateRuleLine.RESET;
          TempTemplateRuleLine.DELETEALL;

          ParseIntoTempTable(ReqRule.Code,ReqRule."Created by Filter",TempTemplateRuleLine);

          TempTemplateRuleLine.SETRANGE("Approver Group", OldUser);
          IF TempTemplateRuleLine.FINDFIRST THEN BEGIN
            TempTemplateRuleLine.MODIFYALL("Approver Group", NewUser);
            ReqRule2.GET(ReqRule.Code);

            ParseFromTempTable(TempTemplateRuleLine,ReqRule2."Created by Filter");
            ReqRule2.MODIFY;
          END;
        UNTIL ReqRule.NEXT = 0;
    END;

    LOCAL PROCEDURE ReplaceExDoc@1100285014(ReplaceHistory@1100285001 : Boolean;VAR OldUserGroup@1100285000 : Record 12013606;VAR UserGroup@1100285007 : Record 12013606);
    VAR
      ExDocApp@1100285003 : Record 12013610;
      NewExDocApp@1100285002 : Record 12013610;
      TempDocLine@1100285006 : TEMPORARY Record 12013609;
      NewApproverOrder@1100285005 : Integer;
      Window@1100285004 : Dialog;
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(EXF007);

      ExDocApp.RESET;
      ExDocApp.SETCURRENTKEY(Approver,"Days to Due Date");
      ExDocApp.SETRANGE(Approver, OldUserGroup.Code);
      IF NOT ReplaceHistory THEN
        ExDocApp.SETFILTER(Flowstatus, '<>%1&<>%2', ExDocApp.Flowstatus::Approved,ExDocApp.Flowstatus::Rejected);

      IF ExDocApp.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF GUIALLOWED THEN
            Window.UPDATE(1,ExDocApp.ID);

          NewExDocApp.RESET;
          NewExDocApp.SETCURRENTKEY("Document Type","Document No.","Line No.","Approver Order");
          NewExDocApp.SETRANGE("Document Type", ExDocApp."Document Type");
          NewExDocApp.SETRANGE("Document No.", ExDocApp."Document No.");
          NewExDocApp.SETRANGE("Line No.", ExDocApp."Line No.");
          NewExDocApp.SETFILTER("Approver Order", '>%1', ExDocApp."Approver Order");
          IF NewExDocApp.FIND('-') THEN
            NewApproverOrder := ExDocApp."Approver Order" + ROUND((NewExDocApp."Approver Order" - ExDocApp."Approver Order") / 2,1)
          ELSE
            NewApproverOrder := ExDocApp."Approver Order" + 10000;

          NewExDocApp.INIT;
          NewExDocApp.TRANSFERFIELDS(ExDocApp);
          NewExDocApp."Approver Order" := NewApproverOrder;
          NewExDocApp.Approver := UserGroup.Code;
          NewExDocApp.Comment := '';
          NewExDocApp."Approval Date" := CREATEDATETIME(0D,0T);
          NewExDocApp."Approved By" := '';
          NewExDocApp.Flowstatus := NewExDocApp.Flowstatus::"Not processed";
          NewExDocApp.ID := 0;

          IF (ExDocApp.Flowstatus IN [ExDocApp.Flowstatus::Approved, ExDocApp.Flowstatus::Rejected]) THEN BEGIN
            NewExDocApp.Comment := EXF006;
            NewExDocApp."Approval Date" := ExDocApp."Approval Date";
            NewExDocApp."Approved By" := ExDocApp."Approved By";
            NewExDocApp.Flowstatus := ExDocApp.Flowstatus;
            NewExDocApp.INSERT;
          END
          ELSE
            NewExDocApp.INSERT;

          IF NOT (ExDocApp.Flowstatus IN [ExDocApp.Flowstatus::Approved, ExDocApp.Flowstatus::Rejected]) THEN BEGIN
            ExDocApp."Approval Date" := CREATEDATETIME(TODAY,TIME);
            ExDocApp."Approved By" := ExDocApp.Approver;
            ExDocApp.Comment := EXF005;
            ExDocApp.Flowstatus := ExDocApp.Flowstatus::Approved;
            ExDocApp.MODIFY;
          END;

          IF NOT TempDocLine.GET(ExDocApp."Document Line ID") THEN BEGIN
            IF NOT (ExDocApp."Document Type" IN [ExDocApp."Document Type"::"6",
                                                 ExDocApp."Document Type"::"7"]) THEN BEGIN
              TempDocLine.ID := ExDocApp."Document Line ID";
              TempDocLine.INSERT;
            END;
          END;
        UNTIL ExDocApp.NEXT = 0;

        IF TempDocLine.FIND('-') THEN
          REPEAT
            ExDocApp.RESET;
            ExDocApp.SETRANGE("Document Line ID", TempDocLine.ID);
            ExDocApp.SETRANGE(Flowstatus, ExDocApp.Flowstatus::Rejected);
            IF NOT ExDocApp.FINDFIRST THEN BEGIN
              ExDocApp.SETFILTER(Flowstatus, '<=%1', ExDocApp.Flowstatus::Current);
              IF ExDocApp.FINDFIRST THEN BEGIN
                ExDocApp.ApprovalStatus(ExDocApp,'Update');
                ExDocApp.MODIFY;
              END;
            END;
          UNTIL TempDocLine.NEXT = 0;
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE ReplacePostedExDoc@1100285018(ReplaceHistory@1100285001 : Boolean;VAR OldUserGroup@1100285000 : Record 12013606;VAR UserGroup@1100285007 : Record 12013606);
    VAR
      PostedExDocApp@1100285003 : Record 12013628;
      PostedNewExDocApp@1100285002 : Record 12013628;
      NewApproverOrder@1100285005 : Integer;
      TempID@1100285006 : BigInteger;
      Window@1100285004 : Dialog;
    BEGIN
      IF NOT ReplaceHistory THEN
        EXIT;

      IF GUIALLOWED THEN
        Window.OPEN(EXF008);

      PostedExDocApp.RESET;
      PostedExDocApp.SETCURRENTKEY(Approver,"Days to Due Date");
      PostedExDocApp.SETRANGE(Approver, OldUserGroup.Code);
      IF PostedExDocApp.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF GUIALLOWED THEN
            Window.UPDATE(1,PostedExDocApp.ID);

          PostedNewExDocApp.RESET;
          PostedNewExDocApp.SETCURRENTKEY("Document Line ID","Approver Order");
          PostedNewExDocApp.SETRANGE("Document Line ID", PostedExDocApp."Document Line ID");
          PostedNewExDocApp.SETFILTER("Approver Order", '>%1', PostedExDocApp."Approver Order");
          IF PostedNewExDocApp.FIND('-') THEN
            NewApproverOrder := PostedExDocApp."Approver Order" + ROUND((PostedNewExDocApp."Approver Order" - PostedExDocApp."Approver Order") / 2,1)
          ELSE
            NewApproverOrder := PostedExDocApp."Approver Order" + 10000;

          PostedNewExDocApp.INIT;
          PostedNewExDocApp.TRANSFERFIELDS(PostedExDocApp);
          PostedNewExDocApp.ID := 0;

          PostedNewExDocApp."Approver Order" := NewApproverOrder;
          PostedNewExDocApp.Approver := UserGroup.Code;
          PostedNewExDocApp.Comment := EXF006;
          PostedNewExDocApp."Approval Date" := PostedExDocApp."Approval Date";
          PostedNewExDocApp."Approved By" := PostedExDocApp."Approved By";
          PostedNewExDocApp.Flowstatus := PostedExDocApp.Flowstatus;
          PostedNewExDocApp.INSERT;

          IF PostedExDocApp."Approval Date" = 0DT THEN BEGIN
            PostedExDocApp."Approval Date" := CREATEDATETIME(TODAY,TIME);
            PostedExDocApp."Approved By" := PostedExDocApp.Approver;
            PostedExDocApp.Comment := EXF005;
            PostedExDocApp.Flowstatus := PostedExDocApp.Flowstatus::Approved;
            PostedExDocApp.MODIFY;
          END;
        UNTIL PostedExDocApp.NEXT = 0;
      END;
    END;

    PROCEDURE ParseIntoTempTable@1100285012(Code@1100285006 : Code[20];FilterValue@1100285008 : Text[1024];VAR TempTemplateRuleLine@1100285001 : TEMPORARY Record 12013603);
    VAR
      TempPos@1100285002 : Integer;
      TempCode@1100285003 : Code[20];
      InStr@1100285000 : Text[1024];
      NoMoreString@1100285005 : Boolean;
      TempLineNo@1100285007 : Integer;
    BEGIN
      InStr := FilterValue;
      IF InStr = '' THEN
        EXIT;

      NoMoreString := FALSE;

      REPEAT
        TempPos := STRPOS(InStr,'|');
        IF TempPos <> 0 THEN BEGIN
          TempCode := COPYSTR(InStr,1,TempPos - 1);

          TempTemplateRuleLine.Code := Code;
          TempTemplateRuleLine."Line No." := TempLineNo;
          TempLineNo := TempLineNo + 10000;
          TempTemplateRuleLine."Approver Group" := TempCode;
          TempTemplateRuleLine.INSERT;

          InStr := DELSTR(InStr,1,TempPos);
        END
        ELSE BEGIN
          IF InStr <> '' THEN BEGIN
            TempCode := InStr;

            TempTemplateRuleLine.Code := Code;
            TempTemplateRuleLine."Line No." := TempLineNo;
            TempLineNo := TempLineNo + 10000;
            TempTemplateRuleLine."Approver Group" := TempCode;
            TempTemplateRuleLine.INSERT;
          END;

          NoMoreString := TRUE;
        END;
      UNTIL NoMoreString;
    END;

    PROCEDURE ParseFromTempTable@1100285009(VAR TempTemplateRuleLine@1100285004 : TEMPORARY Record 12013603;VAR OutStr@1100285001 : Code[1024]);
    BEGIN
      OutStr := '';
      TempTemplateRuleLine.RESET;
      IF TempTemplateRuleLine.FIND('-') THEN BEGIN
        REPEAT
          OutStr := OutStr + TempTemplateRuleLine."Approver Group" + '|';
        UNTIL TempTemplateRuleLine.NEXT = 0;

        OutStr := COPYSTR(OutStr,1,STRLEN(OutStr)-1);
      END;
    END;

    PROCEDURE CheckUserGroupUponPageExit@1100285015(UserGroup@1100285000 : Record 12013606;VAR MessageType@1100285003 : Integer;VAR TextMessage@1100285002 : Text[250]);
    VAR
      UserGroupLine@1100285001 : Record 12013607;
    BEGIN
      UserGroupLine.RESET;
      UserGroupLine.SETRANGE(Code, UserGroup.Code);
      IF NOT UserGroupLine.FINDSET THEN BEGIN
        IF NOT UserGroup."Auto Approve" AND (UserGroup."Replacement type" = 0) THEN BEGIN
          MessageType := 1;
          TextMessage := EXF011;
        END;
      END
      ELSE
        REPEAT
          IF (UserGroupLine."Starting Date" <> 0D) AND (UserGroupLine."Ending Date" = 0D) THEN BEGIN
            MessageType := 2;
            TextMessage := EXF012;
          END
          ELSE
            IF (UserGroupLine."Starting Date" = 0D) AND (UserGroupLine."Ending Date" <> 0D) THEN BEGIN
              MessageType := 2;
              TextMessage := EXF012;
            END
            ELSE
              IF (UserGroupLine."Starting Date" <> 0D) AND (UserGroupLine."Ending Date" <> 0D) THEN
                IF UserGroupLine."Starting Date" > UserGroupLine."Ending Date" THEN BEGIN
                  MessageType := 2;
                  TextMessage := EXF013;
                END;
        UNTIL UserGroupLine.NEXT = 0;
    END;

    PROCEDURE UserCleanUp@1100285005();
    VAR
      Company@1100285000 : Record 2000000006;
      ExUserComp@1100285001 : Record 12013641;
      ExUser@1100285002 : Record 12013640;
      ExUser2@1100285004 : Record 12013640;
      UserFound@1100285003 : Boolean;
    BEGIN
      Company.FINDSET;
      REPEAT
        ExUserComp.CHANGECOMPANY(Company.Name);
        IF ExUserComp.FINDSET THEN
          REPEAT
            IF NOT ExUser.GET(ExUserComp."User ID") THEN BEGIN
              ExUser."User ID" := ExUserComp."User ID";
              ExUser."User Name" := ExUserComp."User Name";
              ExUser.INSERT;
            END
            ELSE BEGIN
              ExUser."User Name" := ExUserComp."User Name";
              ExUser.MODIFY;
            END;
          UNTIL ExUserComp.NEXT = 0;
      UNTIL Company.NEXT = 0;

      ExUser.RESET;
      IF ExUser.FINDSET THEN
        REPEAT
          UserFound := FALSE;
          Company.FINDSET;
          REPEAT
            ExUserComp.CHANGECOMPANY(Company.Name);
            ExUserComp.SETRANGE("User ID", ExUser."User ID");
            IF ExUserComp.FINDFIRST THEN
              UserFound := TRUE;
          UNTIL (Company.NEXT = 0) OR UserFound;

          IF NOT UserFound THEN BEGIN
            ExUser2.GET(ExUser."User ID");
            ExUser2.DELETE;
          END;
        UNTIL ExUser.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

