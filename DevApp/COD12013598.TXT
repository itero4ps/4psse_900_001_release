OBJECT Codeunit 12013598 ExFlow Version Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF410000,2016W1,4PS;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text002@1100285001 : TextConst 'ENU=%1 %2 %3 does not exist.';
      Text003@1100285000 : TextConst 'ENU=%1 does not exist.';

    PROCEDURE InwardNav@1000000001(VAR PurchHead@1000000000 : Record 38);
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
    BEGIN
    END;

    PROCEDURE InwardNavBasedOnLines@1100285002(VAR PurchHead@1000000000 : Record 38);
    BEGIN
    END;

    PROCEDURE InwardNavBasedOnHeader@1100285004(VAR PurchHead@1000000000 : Record 38;ExFlowSetup@1100285011 : Record 12013601);
    BEGIN
    END;

    PROCEDURE TestInwSetup@1100285001(ExFPurchLine@1100285000 : Record 12013588);
    BEGIN
    END;

    PROCEDURE PurchHeaderUpdateInw@1100285006(VAR PurchHeader@1100285000 : Record 38);
    BEGIN
    END;

    PROCEDURE PurchHeaderDeleteInw@1100285007(VAR PurchHeader@1100285000 : Record 38);
    BEGIN
    END;

    PROCEDURE PerCodeLookup@1100285000(VAR ExCodingRuleLine@1100285002 : Record 12013663;VAR Text@1100285003 : Text[1024]) : Boolean;
    VAR
      PerCodeList@1100285001 : Page 1701;
      PeriodicTemplate@1100285000 : Record 1700;
    BEGIN
      WITH ExCodingRuleLine DO BEGIN
        CLEAR(PerCodeList);
        PerCodeList.LOOKUPMODE(TRUE);
        PeriodicTemplate.RESET;
        PerCodeList.SETTABLEVIEW(PeriodicTemplate);
        IF PerCodeList.RUNMODAL = ACTION::LookupOK THEN
          BEGIN
            PerCodeList.GETRECORD(PeriodicTemplate);
            Text := Text + PeriodicTemplate."Deferral Code";
            "Text Range" := "Text Range" + PeriodicTemplate."Deferral Code";

            EXIT(TRUE);
          END
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE AddAddAccGroup@1100285003(VAR ExPurchaseDocLine@1100285000 : Record 12013588;GLAcc@1100285001 : Record 15);
    BEGIN
    END;

    PROCEDURE GetNoPeriods@1100285005(TemplateCode@1100285000 : Code[20]) : Integer;
    VAR
      PeriodicTemplate@1100285001 : Record 1700;
    BEGIN
      IF PeriodicTemplate.GET(TemplateCode) THEN
        EXIT(PeriodicTemplate."No. of Periods")
      ELSE
        EXIT(0);
    END;

    PROCEDURE UpdateAccGroup@1100285008(VAR NewPurchLine@1100285000 : Record 39;OldPurchLine@1100285001 : Record 39);
    BEGIN
    END;

    PROCEDURE UpdateSWEBASE@1100285009(VAR PurchHeader@1100285000 : Record 38);
    BEGIN
      // Code required for SWEBASE integration

      // PurchHeader."Gross Invoice Amount" := PurchHeader."Gross Invoice Amount ExFlow";
      // PurchHeader.MODIFY;
    END;

    PROCEDURE UpdateSWEBASEOrExF@1100285010(VAR PurchHeader@1100285003 : Record 38);
    VAR
      PurchHeader2@1100285000 : Record 38;
    BEGIN
      // Code required for SWEBASE integration

      // PurchHeader2.GET(PurchHeader."Document Type",PurchHeader."No.");
      // IF PurchHeader2."Gross Invoice Amount ExFlow" <> PurchHeader."Gross Invoice Amount ExFlow" THEN
      //   UpdateSWEBASE(PurchHeader)
      // ELSE
      //   IF PurchHeader2."Gross Invoice Amount" <> PurchHeader."Gross Invoice Amount" THEN
      //     UpdateExFlowGross(PurchHeader);
    END;

    PROCEDURE UpdateExFlowGross@1100285014(VAR PurchHeader@1100285000 : Record 38);
    BEGIN
      // Code required for SWEBASE integration

      // PurchHeader."Gross Invoice Amount ExFlow" := PurchHeader."Gross Invoice Amount";
      // PurchHeader.MODIFY;
    END;

    PROCEDURE UpdateCustomizedFields@1100285012(VAR PurchHeader@1100285000 : Record 38;PurchImportHeader@1100285001 : Record 12013587);
    BEGIN
    END;

    PROCEDURE CheckNoDuplicateControl@1100285011(Vendor@1100285000 : Record 23) : Boolean;
    BEGIN
      IF Vendor."Do not check Duplicate Invoice" THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetInwardImageName@1100285040(DocType@1100285002 : Integer;DocNo@1100285000 : Code[20]) : Text[250];
    BEGIN
    END;

    PROCEDURE GetPerCodeDesc@1100285041(ExColumn@1100285001 : Record 12013661;ColValue@1100285002 : Text;CompName@1100285003 : Text[50]) : Text;
    VAR
      PerTempl@1100285000 : Record 1700;
    BEGIN
      WITH PerTempl DO BEGIN
        CHANGECOMPANY(CompName);
        IF GET(ColValue) THEN
          EXIT(Description)
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE GetPerCodes@1100285042(VAR TempData@1100285000 : TEMPORARY Record 12013609;VAR TempID@1100285003 : BigInteger;CompName@1100285002 : Text[50]);
    VAR
      PeriodicTemplate@1100285001 : Record 1700;
    BEGIN
      WITH PeriodicTemplate DO BEGIN
        RESET;
        CHANGECOMPANY(CompName);
        SETFILTER("Deferral Code",'<>%1', '');
        IF FINDSET THEN
          REPEAT
            TempData.ID := TempID;
            TempData."No." := "Deferral Code";
            TempData.Description := Description;
            TempData.INSERT;
            TempID := TempID + 1;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE ApprovalStatusReport_CheckPerCode@1100285013(VAR PrintTempPurchLine@1100285000 : TEMPORARY Record 39;VAR PostingDate@1100285001 : Date;VAR PostRemPeriodBal@1100285002 : Boolean) : Boolean;
    BEGIN
      IF PrintTempPurchLine."Deferral Code" <> '' THEN BEGIN
        IF (PrintTempPurchLine."Returns Deferral Start Date" > PostingDate) AND NOT PostRemPeriodBal THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE)
    END;

    PROCEDURE ExFlowCodeunit_UpdatePeriodicDocLine@1100285015(VAR DocLine@1100285000 : Record 12013609;VAR PurchLine@1100285001 : Record 39);
    BEGIN
      DocLine."Periodic Template Code" := PurchLine."Deferral Code";
      DocLine."Periodic Starting Date" := PurchLine."Returns Deferral Start Date";
    END;

    PROCEDURE ExFlowCodeunit_UpdatePerDocLineDim@1100285016(VAR InCode@1100285002 : Code[50];VAR PurchLine@1100285000 : Record 39;VAR DocLineDim@1100285001 : Record 12013611) : Boolean;
    VAR
      ExFWorkFlowMgt@1100285003 : Codeunit 12013593;
    BEGIN
      IF InCode = 'PERCODE' THEN
        IF PurchLine."Deferral Code" <> '' THEN
          DocLineDim."Dimension Value" := PurchLine."Deferral Code"
        ELSE
          EXIT(TRUE);

      IF InCode = 'PERDATE' THEN
        IF PurchLine."Returns Deferral Start Date" <> 0D THEN
          DocLineDim."Dimension Value" := ExFWorkFlowMgt.TransformDateToText(PurchLine."Returns Deferral Start Date")
        ELSE
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ExFlowCodeunit_CreateJnlLinePer@1100285017(VAR PurchaseLine@1100285000 : Record 39;VAR RemPeriodicBalance@1100285003 : Decimal;VAR OriginalAmtLCY@1100285002 : Decimal;VAR NoOfPeriods@1100285001 : Integer;VAR TempAmountLCY@1100285004 : Decimal;VAR PostingDate@1100285005 : Date;VAR GLSetup@1100285006 : Record 98;VAR PostRemPeriodBal@1100285007 : Boolean);
    BEGIN
      IF PurchaseLine."Deferral Code" <> '' THEN BEGIN
        NoOfPeriods := GetNoPeriods(PurchaseLine."Deferral Code");
        OriginalAmtLCY := TempAmountLCY;
        IF (PurchaseLine."Returns Deferral Start Date" <= PostingDate) AND (NoOfPeriods <> 0) THEN
          TempAmountLCY := ROUND(TempAmountLCY / NoOfPeriods, GLSetup."Amount Rounding Precision")
        ELSE
          TempAmountLCY := 0;

        IF PostRemPeriodBal THEN
          RemPeriodicBalance := OriginalAmtLCY - TempAmountLCY;
      END;
    END;

    PROCEDURE UpdatePurchLineCodeunit_UpdatePerPurch@1100285018(VAR ChangeJournalLine@1100285000 : Record 12013618;VAR PurchLine@1100285001 : Record 39);
    BEGIN
      IF ChangeJournalLine."New Periodic Template Code" <> '' THEN
        BEGIN
          PurchLine.VALIDATE("Deferral Code", ChangeJournalLine."New Periodic Template Code");
          PurchLine.VALIDATE("Returns Deferral Start Date", ChangeJournalLine."New Periodic Starting Date");
        END;
    END;

    PROCEDURE UpdatePurchLineCodeunit_UpdatePerPurchFromDoc@1100285019(VAR ChangeJournalLine@1100285000 : Record 12013618;VAR PurchLine@1100285002 : Record 39;VAR DocLineDim@1100285003 : Record 12013611;VAR DocLine@1100285004 : Record 12013609);
    VAR
      ExWorkFlowMgt@1100285005 : Codeunit 12013593;
      PurchLineCopy@1000 : Record 39;
    BEGIN
      IF ChangeJournalLine."New Periodic Template Code" <> PurchLine."Deferral Code" THEN
        BEGIN
          PurchLine.VALIDATE("Deferral Code", ChangeJournalLine."New Periodic Template Code");
          DocLine."Periodic Template Code" := ChangeJournalLine."New Periodic Template Code";

          IF DocLineDim.RetrieveRecord(DocLineDim, PurchLine."Document Type", PurchLine."Document No.",
                            PurchLine."Line No.",'PERCODE') THEN
            BEGIN
              IF ChangeJournalLine."New Periodic Template Code" = '' THEN
                DocLineDim.DELETE
              ELSE
                BEGIN
                  DocLineDim."Dimension Value" := ChangeJournalLine."New Periodic Template Code";
                  DocLineDim.MODIFY;
                END;
            END;
        END;

      IF ChangeJournalLine."New Periodic Starting Date" <> PurchLine."Returns Deferral Start Date" THEN
        BEGIN
          PurchLine.VALIDATE("Returns Deferral Start Date", ChangeJournalLine."New Periodic Starting Date");
          DocLine."Periodic Starting Date" := ChangeJournalLine."New Periodic Starting Date";

          IF DocLineDim.RetrieveRecord(DocLineDim, PurchLine."Document Type", PurchLine."Document No.",
                            PurchLine."Line No.",'PERDATE') THEN
            BEGIN
              IF ChangeJournalLine."New Periodic Starting Date" = 0D THEN
                DocLineDim.DELETE
              ELSE
                BEGIN
                  DocLineDim."Dimension Value" := ExWorkFlowMgt.TransformDateToText(ChangeJournalLine."New Periodic Starting Date");
                  DocLineDim.MODIFY;
                END;
            END;
        END;

      //>> 4PS
      IF ChangeJournalLine."New Element" <> PurchLineCopy.Element THEN
        BEGIN
          PurchLine.VALIDATE(Element,ChangeJournalLine."New Element");

      //>> UPG2016_ABE Start
      //    IF DocLineDim.RetrieveRecord(DocLineDim,COMPANYNAME, PurchLine."Document Type", PurchLine."Document No.",
          IF DocLineDim.RetrieveRecord(DocLineDim, PurchLine."Document Type", PurchLine."Document No.",
      //<< UPG2016_ABE End
                            PurchLine."Line No.",'ELEMENT_4PS') THEN
            BEGIN
              IF ChangeJournalLine."New Element" = '' THEN
                DocLineDim.DELETE
              ELSE
                BEGIN
                  DocLineDim."Dimension Value" := ChangeJournalLine."New Element";
                  DocLineDim.MODIFY;
                END;
            END;
        END;
      IF ChangeJournalLine."New Extension Contract" <> PurchLineCopy."Extension Contract" THEN
        BEGIN
          PurchLine.VALIDATE("Extension Contract",ChangeJournalLine."New Extension Contract");

      //>> UPG2016_ABE Start
      //    IF DocLineDim.RetrieveRecord(DocLineDim,COMPANYNAME, PurchLine."Document Type", PurchLine."Document No.",
          IF DocLineDim.RetrieveRecord(DocLineDim, PurchLine."Document Type", PurchLine."Document No.",
      //<< UPG2016_ABE End
                            PurchLine."Line No.",'EXTCONTR_4PS') THEN
            BEGIN
              IF ChangeJournalLine."New Extension Contract" = '' THEN
                DocLineDim.DELETE
              ELSE
                BEGIN
                  DocLineDim."Dimension Value" := ChangeJournalLine."New Extension Contract";
                  DocLineDim.MODIFY;
                END;
            END;
        END;
      IF ChangeJournalLine."New Plot No." <> PurchLineCopy."Plot No." THEN
        BEGIN
          PurchLine.VALIDATE("Plot No.",ChangeJournalLine."New Plot No.");

      //>> UPG2016_ABE Start
      //    IF DocLineDim.RetrieveRecord(DocLineDim,COMPANYNAME, PurchLine."Document Type", PurchLine."Document No.",
          IF DocLineDim.RetrieveRecord(DocLineDim, PurchLine."Document Type", PurchLine."Document No.",
      //<< UPG2016_ABE End
                            PurchLine."Line No.",'PLOT_4PS') THEN
            BEGIN
              IF ChangeJournalLine."New Plot No." = '' THEN
                DocLineDim.DELETE
              ELSE
                BEGIN
                  DocLineDim."Dimension Value" := ChangeJournalLine."New Plot No.";
                  DocLineDim.MODIFY;
                END;
            END;
        END;
      IF ChangeJournalLine."New Cost Component" <> PurchLineCopy."Cost Component" THEN
        BEGIN
          PurchLine.VALIDATE("Cost Component",ChangeJournalLine."New Cost Component");

      //>> UPG2016_ABE Start
      //    IF DocLineDim.RetrieveRecord(DocLineDim,COMPANYNAME, PurchLine."Document Type", PurchLine."Document No.",
          IF DocLineDim.RetrieveRecord(DocLineDim, PurchLine."Document Type", PurchLine."Document No.",
      //<< UPG2016_ABE End
                            PurchLine."Line No.",'COSTCOMP_4PS') THEN
            BEGIN
              IF ChangeJournalLine."New Cost Component" = '' THEN
                DocLineDim.DELETE
              ELSE
                BEGIN
                  DocLineDim."Dimension Value" := ChangeJournalLine."New Cost Component";
                  DocLineDim.MODIFY;
                END;
            END;
        END;
      //<< 4PS
    END;

    PROCEDURE UpdatePurchLineCodeunit_UpdatePerChangeJnl@1100285020(VAR ChangeJournalLine2@1100285000 : Record 12013618;VAR PurchLine@1100285001 : Record 39);
    BEGIN
      ChangeJournalLine2."Periodic Template Code" := PurchLine."Deferral Code";
      ChangeJournalLine2."Periodic Starting Date" := PurchLine."Returns Deferral Start Date";
    END;

    PROCEDURE UpdatePurchLineCodeunit_UpdateNewPerChangeJnl@1100285025(VAR ChangeJournalLine2@1100285000 : Record 12013618;VAR PurchLine@1100285001 : Record 39);
    BEGIN
      ChangeJournalLine2."New Periodic Template Code" := PurchLine."Deferral Code";
      ChangeJournalLine2."New Periodic Starting Date" := PurchLine."Returns Deferral Start Date";

      //>> 4PS
      ChangeJournalLine2."New Element" := PurchLine.Element;
      ChangeJournalLine2."New Extension Contract" := PurchLine."Extension Contract";
      ChangeJournalLine2."New Plot No." := PurchLine."Plot No.";
      ChangeJournalLine2."New Cost Component" := PurchLine."Cost Component";
      //<< 4PS
    END;

    PROCEDURE QuoteFromRecCodeunit_UpdatePerPurch@1100285021(DimCode@1100285003 : Code[50];VAR PurchLine@1100285000 : Record 39;VAR DocLineDim@1100285001 : Record 12013611);
    VAR
      ExQuoteFromReq@1100285002 : Codeunit 12013614;
    BEGIN
      CASE DimCode OF
        'PERCODE':
          PurchLine."Deferral Code" := DocLineDim."Dimension Value";

        'PERDATE':
          PurchLine."Returns Deferral Start Date" := ExQuoteFromReq.DateField(DocLineDim."Dimension Value");
      END;
    END;

    PROCEDURE QuoteFromRecCodeunit_UpdatePerDocLine@1100285022(VAR DocLine@1100285000 : Record 12013609;VAR PurchLine@1100285001 : Record 39);
    BEGIN
      DocLine."Periodic Template Code" := PurchLine."Deferral Code";
      DocLine."Periodic Starting Date" := PurchLine."Returns Deferral Start Date";
    END;

    PROCEDURE SplitApprovedLinePage_UpdatePerPurch@1100285023(VAR PurchLine@1100285000 : Record 39;VAR OldPurchLine@1100285001 : Record 39);
    BEGIN
      PurchLine."Deferral Code" := OldPurchLine."Deferral Code";
      PurchLine."Returns Deferral Start Date" := OldPurchLine."Returns Deferral Start Date";
    END;

    PROCEDURE ValidatePurchDocCodeunit_InsertProp@1100285024(VAR ExPurchCodeLine@1100285000 : Record 12013683;VAR ExfPurchDocLine@1100285001 : Record 12013588;VAR precExfPurchDocHead@1100285002 : Record 12013587);
    BEGIN
      IF ExPurchCodeLine."Deferral Code" <> '' THEN BEGIN
        ExfPurchDocLine.VALIDATE("Deferral Code", ExPurchCodeLine."Deferral Code");
      END;
    END;

    PROCEDURE ExFlowToInvoiceCodeunit_ValidatePer@1100285026(VAR PurchLine@1100285000 : Record 39;VAR ExFPurchDocLine@1100285002 : Record 12013588);
    VAR
      DeferralHeader@1100285003 : Record 1701;
      DeferralLine@1100285004 : Record 1702;
      NewDeferralHeader@1100285006 : Record 1701;
      NewDeferralLine@1100285005 : Record 1702;
      DeferralUtilities@1100285001 : Codeunit 1720;
    BEGIN
      IF PurchLine."Deferral Code" = '' THEN
        EXIT;

      DeferralHeader.RESET;
      DeferralHeader.SETRANGE("Document Type", ExFPurchDocLine."Document Type");
      DeferralHeader.SETRANGE("Document No.", FORMAT(ExFPurchDocLine."Inbound Document No."));
      DeferralHeader.SETRANGE("Line No.", ExFPurchDocLine."Line No.");
      IF DeferralHeader.FINDFIRST THEN BEGIN
        NewDeferralHeader.INIT;
        NewDeferralHeader.TRANSFERFIELDS(DeferralHeader);
        NewDeferralHeader."Document Type" := PurchLine."Document Type";
        NewDeferralHeader."Document No." := PurchLine."Document No.";
        NewDeferralHeader."Line No." := PurchLine."Line No.";
        NewDeferralHeader.INSERT;

        DeferralLine.RESET;
        DeferralLine.SETRANGE("Document Type", ExFPurchDocLine."Document Type");
        DeferralLine.SETRANGE("Document No.", FORMAT(ExFPurchDocLine."Inbound Document No."));
        DeferralLine.SETRANGE("Line No.", ExFPurchDocLine."Line No.");
        IF DeferralLine.FINDSET THEN
          REPEAT
            NewDeferralLine.INIT;
            NewDeferralLine.TRANSFERFIELDS(DeferralLine);
            NewDeferralLine."Document Type" := PurchLine."Document Type";
            NewDeferralLine."Document No." := PurchLine."Document No.";
            NewDeferralLine."Line No." := PurchLine."Line No.";
            NewDeferralLine.INSERT;
          UNTIL DeferralLine.NEXT = 0;
      END;

      DeferralUtilities.DeferralCodeOnDelete(
        DeferralUtilities.GetPurchDeferralDocType,'','',
        ExFPurchDocLine."Document Type",FORMAT(ExFPurchDocLine."Inbound Document No."),ExFPurchDocLine."Line No.");
    END;

    BEGIN
    {
      UPG2016 2016-11-14 1CF_ABE Upgrade to NAV2016
                              Code changed
                                      PurchLineCopy
    }
    END.
  }
}

