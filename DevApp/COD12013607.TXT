OBJECT Codeunit 12013607 Purch.-Quote to Order ExFlow
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350000;
  }
  PROPERTIES
  {
    TableNo=38;
    OnRun=VAR
            AppSetup@1100285022 : Record 12013601;
            OldPurchCommentLine@1001 : Record 43;
            Vend@1002 : Record 23;
            DocHead@1100285000 : Record 12013608;
            DocLine@1100285002 : Record 12013609;
            DocLineApp@1100285004 : Record 12013610;
            DocLineDim@1100285006 : Record 12013611;
            Column@1100285003 : Record 12013661;
            ExDoc2@1100285001 : Record 12013612;
            GLSetup@1100285005 : Record 98;
            PurchLine@1100285009 : Record 39;
            TempVATAmountLine0@1100285013 : TEMPORARY Record 290;
            TempVATAmountLine1@1100285011 : TEMPORARY Record 290;
            PurchSetup@1100285016 : Record 312;
            ItemChargeAssgntPurch@1100285019 : Record 5805;
            PurchCommentLine@1100285020 : Record 43;
            PurchQuoteLine@1100285023 : Record 39;
            PurchOrderLine@1100285021 : Record 39;
            ReservePurchLine@1100285018 : Codeunit 99000834;
            PrepmtMgt@1100285017 : Codeunit 441;
            WhsePurchRelease@1100285014 : Codeunit 5772;
            ArchiveManagement@1100285015 : Codeunit 5063;
            ExFlow@1100285024 : Codeunit 12013601;
            ExDimMgt@1100285025 : Codeunit 12013605;
            ColumnID@1100285008 : Integer;
            TempImageName@1100285012 : Text[250];
            CreateLine@1100285010 : Boolean;
            DoNotInsert@1100285007 : Boolean;
          BEGIN
            TESTFIELD("Document Type","Document Type"::Quote);
            Vend.GET("Buy-from Vendor No.");
            Vend.CheckBlockedVendOnDocs(Vend,FALSE);

            AppSetup.GET(COMPANYNAME,0);
            GLSetup.GET;

            PurchOrderHeader := Rec;
            PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
            PurchOrderHeader."No. Printed" := 0;
            PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
            IF AppSetup."Use Quote No for the PO" THEN
              PurchOrderHeader."No." := "No."
            ELSE BEGIN
              PurchOrderHeader."No." := '';
              PurchOrderHeader."Quote No." :=  "No.";
            END;

            PurchOrderLine.LOCKTABLE;
            PurchOrderHeader.INSERT(TRUE);

            ExDimMgt.CopyDimFromImpHeader(DATABASE::"Purchase Header","Document Type","No.",
                                          DATABASE::"Purchase Header",PurchOrderHeader."Document Type",PurchOrderHeader."No.");

            PurchOrderHeader."Order Date" := TODAY;

            IF "Posting Date" <> 0D THEN
              PurchOrderHeader."Posting Date" := "Posting Date";

            PurchOrderHeader."Document Date" := "Document Date";
            PurchOrderHeader."Expected Receipt Date" := "Expected Receipt Date";
            PurchOrderHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
            PurchOrderHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";

            PurchOrderHeader."Location Code" := "Location Code";
            PurchOrderHeader."Inbound Whse. Handling Time" := "Inbound Whse. Handling Time";
            PurchOrderHeader."Ship-to Name" := "Ship-to Name";
            PurchOrderHeader."Ship-to Name 2" := "Ship-to Name 2";
            PurchOrderHeader."Ship-to Address" := "Ship-to Address";
            PurchOrderHeader."Ship-to Address 2" := "Ship-to Address 2";
            PurchOrderHeader."Ship-to City" := "Ship-to City";
            PurchOrderHeader."Ship-to Post Code" := "Ship-to Post Code";
            PurchOrderHeader."Ship-to County" := "Ship-to County";
            PurchOrderHeader."Ship-to Country/Region Code" := "Ship-to Country/Region Code";
            PurchOrderHeader."Ship-to Contact" := "Ship-to Contact";

            PurchOrderHeader."Prepayment %" := Vend."Prepayment %";
            IF PurchOrderHeader."Posting Date" = 0D THEN
              PurchOrderHeader."Posting Date" := WORKDATE;

            PurchOrderHeader."Due Date" := TODAY;
            PurchOrderHeader.MODIFY;

            DocHead.RetrieveRecord(DocHead,COMPANYNAME,"Document Type","No.");
            DocHead."Document Type" := DocHead."Document Type"::Order;
            DocHead."Document No." := PurchOrderHeader."No.";
            DocHead.Status := DocHead.Status::Approved;
            DocHead."Due Date" := TODAY;
            DocHead."Change Jnl Processed PO" := TRUE;
            DocHead."Requisition Status" := AppSetup."Set Status to (Order)";
            DocHead.MODIFY;

            IF MoveAttachedFile(Rec, DocHead) THEN
              PurchOrderHeader.MODIFY(FALSE);

            PurchQuoteLine.RESET;
            PurchQuoteLine.SETRANGE("Document Type","Document Type");
            PurchQuoteLine.SETRANGE("Document No.","No.");
            IF PurchQuoteLine.FINDSET THEN
              REPEAT
                CreateLine := TRUE;
                IF AppSetup."Delete Zero Lines" THEN
                  IF (PurchQuoteLine.Type > 0) AND (PurchQuoteLine."No." <> '') AND
                     (PurchQuoteLine."Line Amount" = 0) THEN
                    CreateLine := FALSE;

                IF NOT CreateLine THEN BEGIN
                  IF DocLine.RetrieveRecord(DocLine,COMPANYNAME,PurchQuoteLine."Document Type",
                                            PurchQuoteLine."Document No.",PurchQuoteLine."Line No.") THEN BEGIN
                    DocLineApp.RESET;
                    DocLineApp.SETCURRENTKEY("Document Line ID");
                    DocLineApp.SETRANGE("Document Line ID", DocLine.ID);
                    DocLineApp.DELETEALL;

                    DocLineDim.RESET;
                    DocLineDim.SETCURRENTKEY("Document Line ID");
                    DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
                    DocLineDim.DELETEALL;

                    DocLine.DELETE;
                  END;
                END
                ELSE BEGIN
                  PurchOrderLine.INIT;
                  PurchOrderLine := PurchQuoteLine;
                  PurchOrderLine.SuspendStatusCheck(TRUE);
                  PurchOrderLine."Document Type" := PurchOrderHeader."Document Type";
                  PurchOrderLine."Document No." := PurchOrderHeader."No.";
                  ReservePurchLine.TransferPurchLineToPurchLine(
                    PurchQuoteLine,PurchOrderLine,PurchQuoteLine."Reserved Qty. (Base)");

                  IF Vend."Prepayment %" <> 0 THEN
                    PurchOrderLine."Prepayment %" := Vend."Prepayment %";
                  PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
                  PurchOrderLine.VALIDATE("Prepayment %");

                  PurchOrderLine."Order Date" := PurchOrderHeader."Order Date";
                  PurchOrderLine.INSERT;

                  IF PurchQuoteLine.Approve THEN BEGIN
                    IF DocLine.RetrieveRecord(DocLine,COMPANYNAME,PurchQuoteLine."Document Type",
                                              PurchQuoteLine."Document No.",PurchQuoteLine."Line No.")
                    THEN BEGIN
                      DocLineApp.RESET;
                      DocLineApp.SETCURRENTKEY("Document Line ID");
                      DocLineApp.SETRANGE("Document Line ID", DocLine.ID);
                      IF DocLineApp.FINDSET(TRUE) THEN
                        REPEAT
                          DocLineApp."Company Name" := COMPANYNAME;
                          DocLineApp."Document Type" := PurchOrderLine."Document Type";
                          DocLineApp."Document No." := PurchOrderLine."Document No.";
                          DocLineApp."Line No." := PurchOrderLine."Line No.";
                          DocLineApp.MODIFY;
                        UNTIL DocLineApp.NEXT = 0;

                      DocLineDim.RESET;
                      DocLineDim.SETCURRENTKEY("Document Line ID");
                      DocLineDim.SETRANGE("Document Line ID", DocLine.ID);
                      IF DocLineDim.FINDSET(TRUE) THEN
                        REPEAT
                          ColumnID := ExFlow.GetColumnID(DocLineDim."Dimension Code");
                          IF ColumnID <> 0 THEN
                            IF Column.GET(COMPANYNAME,ColumnID) THEN
                              BEGIN
                                IF Column.Dimension THEN
                                  ExDimMgt.InsertDocDimFromDocLineDim(DocLineDim,PurchQuoteLine,DoNotInsert,GLSetup);

                                DocLineDim."Company Name" := COMPANYNAME;
                                DocLineDim."Document Type" := PurchOrderLine."Document Type";
                                DocLineDim."Document No." := PurchOrderLine."Document No.";
                                DocLineDim."Line No." := PurchOrderLine."Line No.";
                                DocLineDim.MODIFY;
                              END;
                        UNTIL DocLineDim.NEXT = 0;

                      DocLine."Company Name" := COMPANYNAME;
                      DocLine."Document Type" := PurchOrderLine."Document Type";
                      DocLine."Document No." := PurchOrderLine."Document No.";
                      DocLine."Line No." := PurchOrderLine."Line No.";
                      DocLine.MODIFY(FALSE);
                    END
                    ELSE
                      ERROR(EXF03);
                  END;

                  ExDimMgt.CopyDimFromImpLine(DATABASE::"Purchase Line","Document Type","No.",PurchQuoteLine."Line No.",
                                              DATABASE::"Purchase Line",PurchOrderHeader."Document Type",PurchOrderHeader."No.",
                                              PurchOrderLine."Line No.");

                  PurchOrderLine."Shortcut Dimension 1 Code" := PurchQuoteLine."Shortcut Dimension 1 Code";
                  PurchOrderLine."Shortcut Dimension 2 Code" := PurchQuoteLine."Shortcut Dimension 2 Code";

                  PurchOrderLine."PO Approved Amount" := PurchOrderLine."Line Amount";
                  PurchOrderLine.MODIFY;
                END;
              UNTIL PurchQuoteLine.NEXT = 0;

            PurchSetup.GET;
            IF PurchSetup."Archive Quotes and Orders" THEN
              ArchiveManagement.ArchPurchDocumentNoConfirm(Rec);

            IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date" :: "No Date" THEN BEGIN
              PurchOrderHeader."Posting Date" := 0D;
            END;

            PurchOrderHeader.Status := PurchOrderHeader.Status::Released;

            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type", PurchOrderHeader."Document Type");
            PurchLine.SETRANGE("Document No.", PurchOrderHeader."No.");
            PurchLine.SETFILTER(Type,'>0');
            PurchLine.SETFILTER(Quantity,'<>0');
            IF PurchLine.FIND('-') THEN BEGIN
              PurchLine.SetPurchHeader(PurchOrderHeader);
              PurchLine.CalcVATAmountLines(0,PurchOrderHeader,PurchLine,TempVATAmountLine0);
              PurchLine.CalcVATAmountLines(1,PurchOrderHeader,PurchLine,TempVATAmountLine1);
              PurchLine.UpdateVATOnLines(0,PurchOrderHeader,PurchLine,TempVATAmountLine0);
              PurchLine.UpdateVATOnLines(1,PurchOrderHeader,PurchLine,TempVATAmountLine1);

              PurchLine.SETRANGE("Drop Shipment",FALSE);
              IF PurchLine.FIND('-') THEN
                IF PurchOrderHeader."Document Type" IN [PurchOrderHeader."Document Type"::Order,
                                                        PurchOrderHeader."Document Type"::"Return Order"] THEN
                  WhsePurchRelease.Release(PurchOrderHeader);
            END;

            PurchOrderHeader.MODIFY;

            PurchCommentLine.RESET;
            PurchCommentLine.SETRANGE("Document Type","Document Type");
            PurchCommentLine.SETRANGE("No.","No.");
            IF NOT PurchCommentLine.ISEMPTY THEN BEGIN
              PurchCommentLine.LOCKTABLE;
              IF PurchCommentLine.FIND('-') THEN
                REPEAT
                  OldPurchCommentLine := PurchCommentLine;
                  PurchCommentLine.DELETE;
                  PurchCommentLine."Document Type" := PurchOrderHeader."Document Type";
                  PurchCommentLine."No." := PurchOrderHeader."No.";
                  PurchCommentLine.INSERT;
                  PurchCommentLine := OldPurchCommentLine;
                UNTIL PurchCommentLine.NEXT = 0;
            END;

            ItemChargeAssgntPurch.RESET;
            ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
            WHILE ItemChargeAssgntPurch.FIND('-') DO BEGIN
              ItemChargeAssgntPurch.DELETE;
              ItemChargeAssgntPurch."Document Type" := PurchOrderHeader."Document Type";
              ItemChargeAssgntPurch."Document No." := PurchOrderHeader."No.";
              IF NOT (ItemChargeAssgntPurch."Applies-to Doc. Type" IN
                [ItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt,
                 ItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment"])
              THEN BEGIN
                ItemChargeAssgntPurch."Applies-to Doc. Type" := PurchOrderHeader."Document Type";
                ItemChargeAssgntPurch."Applies-to Doc. No." := PurchOrderHeader."No.";
              END;
              ItemChargeAssgntPurch.INSERT;
            END;

            TempImageName := '';
            IF AppSetup."Write to Pdf-printer" THEN
              TempImageName := ExFlow.DayMap(WORKDATE) + 'Order-' + PurchOrderHeader."No." + '.pdf'
            ELSE
              TempImageName := ExFlow.DayMap(WORKDATE) + 'Order-' + PurchOrderHeader."No." + '.htm';

            PurchOrderHeader.MODIFY(FALSE);

            DocHead."Image Name" := TempImageName;
            DocHead."Requisition Status" := AppSetup."Set Status to (Order)";
            DocHead.MODIFY(FALSE);

            ExDoc2.RESET;
            ExDoc2.SETCURRENTKEY("Document No.");
            ExDoc2.SETRANGE("Company Name", COMPANYNAME);
            ExDoc2.SETRANGE("Document Type", "Document Type");
            ExDoc2.SETRANGE("Document No.", "No.");
            IF ExDoc2.FIND('-') THEN BEGIN
              ExDoc2."Company Name" := DocHead."Company Name";
              ExDoc2."Document Type" := DocHead."Document Type";
              ExDoc2."Document No." := DocHead."Document No.";
              ExDoc2."Image Name" := DocHead."Image Name";
              ExDoc2.MODIFY;
            END
            ELSE BEGIN
              ExDoc2.INIT;
              ExDoc2."Entry No." := 0;
              ExDoc2."Company Name" := DocHead."Company Name";
              ExDoc2."Document Type" := DocHead."Document Type";
              ExDoc2."Document No." := DocHead."Document No.";
              ExDoc2."Image Name" := DocHead."Image Name";
              ExDoc2.INSERT;
            END;

            PurchOrderHeader.RESET;
            PurchOrderHeader.SETRANGE("Document Type",PurchOrderHeader."Document Type");
            PurchOrderHeader.SETRANGE("No.",PurchOrderHeader."No.");

            DELETELINKS;
            DELETE;
            PurchQuoteLine.DELETEALL;

            "No." := PurchOrderHeader."No.";

            PrintPODoc(TempImageName,PurchOrderHeader,FALSE); // Contains commit
          END;

  }
  CODE
  {
    VAR
      EXF02@1100285005 : TextConst 'ENU=Could not create html image!';
      EXF03@1100285006 : TextConst 'ENU=Ex Document Line Missing, Check that approvers exists for all approval lines.';
      EXF04@1100285007 : TextConst 'ENU=Can not write to PDF-printer';
      PurchOrderHeader@1100285000 : Record 38;

    PROCEDURE GetPurchOrderHeader@1(VAR PurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader := PurchOrderHeader;
    END;

    PROCEDURE MoveAttachedFile@1100285012(VAR PurchQuote@1100285003 : Record 38;DocHeadOrder@1100285004 : Record 12013608) : Boolean;
    VAR
      AttachedFiles@1100285018 : Record 12013643;
      AttachedFiles2@1100285017 : Record 12013643;
      AppSetup@1100285001 : Record 12013601;
      ExFlowFileMgt@1100285000 : Codeunit 12013602;
      ExFlow@1100285002 : Codeunit 12013601;
      OldFileName@1100285016 : Text[1024];
      NewFileName@1100285015 : Text[1024];
      FromFolder@1100285014 : Text[1024];
      ToFolder@1100285013 : Text[1024];
      TempFileName@1100285012 : Text[1024];
      TempStrPos@1100285011 : Integer;
      LastStrPos@1100285006 : Integer;
    BEGIN
      AppSetup.GET(COMPANYNAME, 0);

      AttachedFiles.RESET;
      AttachedFiles.SETCURRENTKEY("Document No.");
      AttachedFiles.SETRANGE("Company Name", COMPANYNAME);
      AttachedFiles.SETRANGE("Document Type", PurchQuote."Document Type");
      AttachedFiles.SETRANGE("Document No.", PurchQuote."No.");
      IF AttachedFiles.FINDSET(TRUE) THEN BEGIN
        REPEAT
          TempStrPos := 0;
          TempFileName := AttachedFiles."Attached File";
          FromFolder := '';
          REPEAT
            TempStrPos := STRPOS(TempFileName, '\');

            FromFolder := FromFolder + COPYSTR(TempFileName,1,TempStrPos);

            IF TempStrPos <> 0 THEN BEGIN
              TempFileName := COPYSTR(TempFileName,TempStrPos+1);

              LastStrPos := TempStrPos;
            END
            ELSE
              OldFileName := TempFileName;
          UNTIL TempStrPos = 0;

          NewFileName := OldFileName;
          IF COPYSTR(AppSetup."Path to connected Att. Files",STRLEN(AppSetup."Path to connected Att. Files")) = '\' THEN
            FromFolder := AppSetup."Path to connected Att. Files" + FromFolder
          ELSE
            FromFolder := AppSetup."Path to connected Att. Files" + '\' + FromFolder;

          ToFolder := AppSetup."Path to connected Att. Files" + FORMAT(DocHeadOrder.ID);

          IF ExFlowFileMgt.FileExist(FromFolder,OldFileName) THEN BEGIN
            AttachedFiles2.GET(AttachedFiles."Company Name",AttachedFiles."Entry No.");
            AttachedFiles2."Document Type" := DocHeadOrder."Document Type";
            AttachedFiles2."Document No." := DocHeadOrder."Document No.";
            AttachedFiles2.Attached := TRUE;
            AttachedFiles2."Document ID" := DocHeadOrder.ID;
            AttachedFiles2."Attached File" := FORMAT(DocHeadOrder.ID) + '\' + NewFileName;
            AttachedFiles2.MODIFY;

            ExFlow.CopyAttachedFile(OldFileName, NewFileName, FromFolder, ToFolder, AppSetup."Path to connected Att. Files");
          END;
        UNTIL AttachedFiles.NEXT = 0;
      END;
    END;

    PROCEDURE PrintPODoc@1100285000(TempImageName@1100285001 : Text[1024];VAR PurchaseHeader@1100285003 : Record 38;ReplaceImageName@1100285006 : Boolean);
    VAR
      AppSetup@1100285010 : Record 12013601;
      _PurchHeader@1100285007 : Record 38;
      QuoteImage@1100285000 : Report 405;
      DocHead2@1100285004 : Record 12013608;
      ExDoc2@1100285002 : Record 12013612;
      ExFlowPDF@1100285009 : Codeunit 12013613;
      _FileMgt@1100285008 : Codeunit 12013602;
      _ExFlowFileMgtNAV2009@1100285005 : Codeunit 12013619;
      ExFlow@1100285011 : Codeunit 12013601;
    BEGIN
      AppSetup.GET(COMPANYNAME,0);

      IF ReplaceImageName THEN BEGIN
        IF AppSetup."Write to Pdf-printer" THEN
          TempImageName := ExFlow.DayMap(WORKDATE) + 'Order-' + PurchaseHeader."No." + '.pdf'
        ELSE
          TempImageName := ExFlow.DayMap(WORKDATE) + 'Order-' + PurchaseHeader."No." + '.htm';

        IF DocHead2.RetrieveRecord(DocHead2,COMPANYNAME, PurchaseHeader."Document Type", PurchaseHeader."No.") THEN BEGIN
          DocHead2."Image Name" := TempImageName;
          DocHead2.MODIFY(FALSE);

          ExDoc2.RESET;
          ExDoc2.SETCURRENTKEY("Document No.");
          ExDoc2.SETRANGE("Company Name", DocHead2."Company Name");
          ExDoc2.SETRANGE("Document Type", DocHead2."Document Type");
          ExDoc2.SETRANGE("Document No.", DocHead2."Document No.");
          IF ExDoc2.FIND('-') THEN BEGIN
            ExDoc2."Image Name" := DocHead2."Image Name";
            ExDoc2.MODIFY;
          END
          ELSE BEGIN
            ExDoc2.INIT;
            ExDoc2."Entry No." := 0;
            ExDoc2."Company Name" := DocHead2."Company Name";
            ExDoc2."Document Type" := DocHead2."Document Type";
            ExDoc2."Document No." := DocHead2."Document No.";
            ExDoc2."Image Name" := DocHead2."Image Name";
            ExDoc2.INSERT;
          END;
        END;
      END;

      COMMIT;
      IF AppSetup."Write to Pdf-printer" THEN BEGIN
        IF (AppSetup."Pdf-printer" = AppSetup."Pdf-printer"::"Standard NAV (RTC only)") OR
           (_ExFlowFileMgtNAV2009.IsRunFromServiceTier AND (NOT GUIALLOWED)) THEN BEGIN // Web service
          _PurchHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
          _PurchHeader.SETRECFILTER;
          _FileMgt.SaveReportAsPDF(AppSetup."Order Report",
                                   AppSetup."Path to Used Invoices" + TempImageName,
                                   _PurchHeader,AppSetup."Path to Used Invoices")
        END
        ELSE
          IF NOT ExFlowPDF.PrintAsPdf(AppSetup."Order Report",
                                      AppSetup."Path to Used Invoices",
                                      TempImageName,
                                      PurchaseHeader, FALSE) THEN
            ERROR(EXF04);
      END ELSE BEGIN
        QuoteImage.SETTABLEVIEW(PurchaseHeader);
        QuoteImage.USEREQUESTPAGE(FALSE);
        IF NOT QuoteImage.SAVEASHTML(AppSetup."Path to Used Invoices" + TempImageName) THEN
          ERROR(EXF02);
      END;
    END;

    BEGIN
    END.
  }
}

