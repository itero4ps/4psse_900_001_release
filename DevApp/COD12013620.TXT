OBJECT Codeunit 12013620 ExFlow RecordLink Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350000;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CopyEXLinks@1100285000(ExPurchDocHeader@1100285000 : Record 12013587);
    VAR
      ExFlowSetup@1100285002 : Record 12013601;
    BEGIN
      ExFlowSetup.GET(COMPANYNAME);
      IF ExFlowSetup."Copy RecLink Vendor" THEN
        CopyVendorLinks(ExPurchDocHeader);

      IF ExFlowSetup."Copy RecLink PurchaseOrder" THEN
        CopyPOLinks(ExPurchDocHeader);

      IF ExFlowSetup."Copy RecLink SalesOrder (Drop)" THEN
        CopySOLinks(ExPurchDocHeader);

      IF ExFlowSetup."Copy RecLink Contract" THEN
        CopyContractLinks(ExPurchDocHeader);
    END;

    PROCEDURE CopyVendorLinks@1100285001(ExPurchDocHeader@1100285002 : Record 12013587);
    VAR
      Vendor@1100285005 : Record 23;
      RecRef@1100285004 : RecordRef;
    BEGIN
      IF NOT Vendor.GET(ExPurchDocHeader."Buy-from Vendor No.") THEN
        EXIT;

      RecRef.GETTABLE(Vendor);
      InsertExImpAttachment(ExPurchDocHeader,RecRef);
    END;

    PROCEDURE CopyPOLinks@1100285002(ExPurchDocHeader@1100285002 : Record 12013587);
    VAR
      RecRef@1100285000 : RecordRef;
      PurchaseHeader@1100285001 : Record 38;
      ExDocPurchLine@1100285003 : Record 12013588;
      TempPurchHeader@1100285004 : TEMPORARY Record 38;
      TempDocumentType@1100285005 : Integer;
    BEGIN
      ExDocPurchLine.RESET;
      ExDocPurchLine.SETCURRENTKEY("Order No.");
      ExDocPurchLine.SETRANGE("Inbound Document No.", ExPurchDocHeader."Inbound Document No.");
      ExDocPurchLine.SETFILTER("Order No.", '<>%1', '');
      IF ExDocPurchLine.FINDSET THEN
        REPEAT
          CASE ExPurchDocHeader."ExFlow Document Type" OF
            ExPurchDocHeader."ExFlow Document Type"::Invoice:
              TempDocumentType := TempPurchHeader."Document Type"::Order;
            ExPurchDocHeader."ExFlow Document Type"::"Credit Memo":
              TempDocumentType := TempPurchHeader."Document Type"::"Return Order";
          END;

          TempPurchHeader.SETRANGE("Document Type", TempDocumentType);
          TempPurchHeader.SETRANGE("No.", ExDocPurchLine."Order No.");
          IF NOT TempPurchHeader.FIND('-') THEN BEGIN
            TempPurchHeader."Document Type" := TempDocumentType;
            TempPurchHeader."No." := ExDocPurchLine."Order No.";
            TempPurchHeader.INSERT;
          END;
        UNTIL ExDocPurchLine.NEXT = 0
      ELSE
        EXIT;

      TempPurchHeader.RESET;
      IF NOT TempPurchHeader.FIND('-') THEN
        EXIT;

      REPEAT
        PurchaseHeader.SETRANGE("Document Type", TempPurchHeader."Document Type");
        PurchaseHeader.SETRANGE("No.", TempPurchHeader."No.");
        IF PurchaseHeader.FINDFIRST THEN BEGIN
          RecRef.GETTABLE(PurchaseHeader);
          InsertExImpAttachment(ExPurchDocHeader,RecRef);

          InsertExImpAttachmentFromExF(ExPurchDocHeader,PurchaseHeader);
        END;
      UNTIL TempPurchHeader.NEXT = 0;
    END;

    PROCEDURE CopySOLinks@1100285003(ExPurchDocHeader@1100285002 : Record 12013587);
    VAR
      RecRef@1100285000 : RecordRef;
      PurchaseLine@1100285003 : Record 39;
      TempSalesHeader@1100285004 : TEMPORARY Record 36;
      SalesHeader@1100285005 : Record 36;
      ExDocPurchLine@1100285007 : Record 12013588;
      TempPurchHeader@1100285006 : TEMPORARY Record 38;
    BEGIN
      IF ExPurchDocHeader."Document Type" <> ExPurchDocHeader."Document Type"::Invoice THEN
        EXIT;

      ExDocPurchLine.RESET;
      ExDocPurchLine.SETCURRENTKEY("Order No.");
      ExDocPurchLine.SETRANGE("Inbound Document No.", ExPurchDocHeader."Inbound Document No.");
      ExDocPurchLine.SETFILTER("Order No.", '<>%1', '');
      IF ExDocPurchLine.FINDSET THEN
        REPEAT
          TempPurchHeader.SETRANGE("No.", ExDocPurchLine."Order No.");
          IF NOT TempPurchHeader.FIND('-') THEN BEGIN
            TempPurchHeader."Document Type" := TempPurchHeader."Document Type"::Order;
            TempPurchHeader."No." := ExDocPurchLine."Order No.";
            TempPurchHeader.INSERT;
          END;
        UNTIL ExDocPurchLine.NEXT = 0
      ELSE
        EXIT;

      TempPurchHeader.RESET;
      IF NOT TempPurchHeader.FIND('-') THEN
        EXIT;

      REPEAT
        PurchaseLine.SETRANGE("Document Type", TempPurchHeader."Document Type");
        PurchaseLine.SETRANGE("Document No.", TempPurchHeader."No.");
        IF PurchaseLine.FINDSET THEN
          REPEAT
            IF PurchaseLine."Sales Order No." <> '' THEN
              IF SalesHeader.GET(SalesHeader."Document Type"::Order,PurchaseLine."Sales Order No.") THEN BEGIN
                TempSalesHeader.SETRANGE("Document Type", SalesHeader."Document Type");
                TempSalesHeader.SETRANGE("No.", SalesHeader."No.");
                IF NOT TempSalesHeader.FIND('-') THEN BEGIN
                  TempSalesHeader."Document Type" := SalesHeader."Document Type";
                  TempSalesHeader."No." := SalesHeader."No.";
                  TempSalesHeader.INSERT;
                END;
              END;
          UNTIL PurchaseLine.NEXT = 0;
      UNTIL TempPurchHeader.NEXT = 0;

      TempSalesHeader.RESET;
      IF TempSalesHeader.FIND('-') THEN
        REPEAT
          RecRef.GETTABLE(TempSalesHeader);
          InsertExImpAttachment(ExPurchDocHeader,RecRef);
        UNTIL TempSalesHeader.NEXT = 0;
    END;

    PROCEDURE CopyContractLinks@1100285005(ExPurchDocHeader@1100285002 : Record 12013587);
    VAR
      ExPurchDocLine@1100285000 : Record 12013588;
      ExFlowContract@1100285001 : Record 12013633;
      RecRef@1100285004 : RecordRef;
    BEGIN
      ExPurchDocLine.RESET;
      ExPurchDocLine.SETCURRENTKEY("Contract No.");
      ExPurchDocLine.SETRANGE("Inbound Document No.", ExPurchDocHeader."Inbound Document No.");
      ExPurchDocLine.SETFILTER("Contract No.", '<>%1', 0);
      IF ExPurchDocLine.FINDSET THEN
        REPEAT
          IF ExFlowContract.GET(ExPurchDocLine."Contract No.") THEN BEGIN
            RecRef.GETTABLE(ExFlowContract);
            InsertExImpAttachment(ExPurchDocHeader,RecRef);
          END;
        UNTIL ExPurchDocLine.NEXT = 0;
    END;

    PROCEDURE InsertExImpAttachment@1100285008(ExPurchDocHeader@1100285000 : Record 12013587;VAR RecRef@1100285001 : RecordRef);
    VAR
      RecordLink@1100285002 : Record 2000000068;
      ExImpAttachment@1100285003 : Record 12013592;
      ExFlowFileMgt@1100285005 : Codeunit 12013602;
      TempLineNo@1100285004 : Integer;
      TempPath@1100285006 : Text[1024];
      TempFileName@1100285007 : Text[1024];
    BEGIN
      RecordLink.SETFILTER("Record ID", FORMAT(RecRef.RECORDID));
      RecordLink.SETRANGE(Type, 0 ); // RecordLink.Type::Link);
      RecordLink.SETFILTER(URL1, '<>%1', '');
      IF RecordLink.FINDSET THEN BEGIN
        REPEAT
          RecordLink.URL1 := DELCHR(RecordLink.URL1,'<','file://');

          //342404
          TempPath := ExFlowFileMgt.Path(RecordLink.URL1);
          TempFileName := ExFlowFileMgt.GetFileName(RecordLink.URL1);
          //342517
          IF (TempPath = '') OR (TempFileName = '') THEN
            EXIT;
          //342517
          IF NOT ExFlowFileMgt.FileExist(TempPath,TempFileName) THEN
            EXIT;
          //342404

          ExImpAttachment.RESET;
          ExImpAttachment.SETRANGE("Inbound Document No.", ExPurchDocHeader."Inbound Document No.");
          ExImpAttachment.SETRANGE("Attached File", RecordLink.URL1);
          IF NOT ExImpAttachment.FINDFIRST THEN BEGIN
            ExImpAttachment.RESET;
            ExImpAttachment.LOCKTABLE;
            ExImpAttachment.SETRANGE("Inbound Document No.", ExPurchDocHeader."Inbound Document No.");
            IF ExImpAttachment.FINDLAST THEN
              TempLineNo := ExImpAttachment."Line No." + 10000
            ELSE
              TempLineNo := 10000;

            ExImpAttachment.INIT;
            ExImpAttachment."Inbound Document No." := ExPurchDocHeader."Inbound Document No.";
            ExImpAttachment."Line No." := TempLineNo;
            ExImpAttachment."Attached File" := RecordLink.URL1;
            ExImpAttachment."Delete Attachment" := FALSE;
            ExImpAttachment.INSERT;
          END;
        UNTIL RecordLink.NEXT = 0;
      END;
    END;

    PROCEDURE InsertExImpAttachmentFromExF@1100285004(ExPurchDocHeader@1100285000 : Record 12013587;PurchaseHeader@1100285001 : Record 38);
    VAR
      ExDoc2@1100285002 : Record 12013612;
      ExImpAttachment@1100285003 : Record 12013592;
      ExFlowSetup@1100285008 : Record 12013601;
      ExFlowFileMgt@1100285005 : Codeunit 12013602;
      TempLineNo@1100285004 : Integer;
      TempPath@1100285006 : Text[1024];
      TempFileName@1100285007 : Text[1024];
    BEGIN
      ExDoc2.RESET;
      IF ExDoc2.SETCURRENTKEY("Document No.") THEN;
      ExDoc2.SETRANGE("Company Name", COMPANYNAME);
      ExDoc2.SETRANGE("Document Type", PurchaseHeader."Document Type");
      ExDoc2.SETRANGE("Document No.", PurchaseHeader."No.");
      IF ExDoc2.FINDSET THEN BEGIN
        ExFlowSetup.GET(COMPANYNAME,0);
        REPEAT
          TempPath := ExFlowSetup."Path to Used Invoices" + ExFlowFileMgt.Path(ExDoc2."Image Name");
          TempFileName := ExFlowFileMgt.GetFileName(ExDoc2."Image Name");
          IF (TempPath = '') OR (TempFileName = '') THEN
            EXIT;

          IF NOT ExFlowFileMgt.FileExist(TempPath,TempFileName) THEN
            EXIT;

          ExImpAttachment.RESET;
          ExImpAttachment.SETRANGE("Inbound Document No.", ExPurchDocHeader."Inbound Document No.");
          ExImpAttachment.SETRANGE("Attached File", TempPath + TempFileName);
          IF NOT ExImpAttachment.FINDFIRST THEN BEGIN
            ExImpAttachment.RESET;
            ExImpAttachment.LOCKTABLE;
            ExImpAttachment.SETRANGE("Inbound Document No.", ExPurchDocHeader."Inbound Document No.");
            IF ExImpAttachment.FINDLAST THEN
              TempLineNo := ExImpAttachment."Line No." + 10000
            ELSE
              TempLineNo := 10000;

            ExImpAttachment.INIT;
            ExImpAttachment."Inbound Document No." := ExPurchDocHeader."Inbound Document No.";
            ExImpAttachment."Line No." := TempLineNo;
            ExImpAttachment."Attached File" := TempPath + TempFileName;
            ExImpAttachment."Delete Attachment" := FALSE;
            ExImpAttachment.INSERT;
          END;
        UNTIL ExDoc2.NEXT = 0;
      END;
    END;

    BEGIN
    {
      This can only be executed for NAV 5 and higher
    }
    END.
  }
}

