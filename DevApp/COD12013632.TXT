OBJECT Codeunit 12013632 Exflow to Invoice Pre Create
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF350000;
  }
  PROPERTIES
  {
    OnRun=VAR
            ExPurchImportHeader@1100285000 : Record 12013587;
          BEGIN
            // Starting from menu
            IF GUIALLOWED THEN
              ERROR(Text010);

            ExPurchImportHeader.RESET;
            IF ExPurchImportHeader.FINDSET THEN BEGIN
              REPEAT
                VerifyDocument(ExPurchImportHeader);
              UNTIL ExPurchImportHeader.NEXT = 0;

              COMMIT;
              PostVerifyFunctions;
            END;
          END;

  }
  CODE
  {
    VAR
      Text001@1100285001 : TextConst 'ENU=See line for specific action message.';
      Text002@1100285002 : TextConst 'ENU=Verifying document #1#############\';
      Text003@1100285003 : TextConst 'ENU=Processing         #2#############\';
      Text004@1100285000 : TextConst 'ENU=Verifying line     #3#############';
      Text005@1100285004 : TextConst 'ENU=Header Validation';
      Text006@1100285005 : TextConst 'ENU=Approval update';
      Text007@1100285006 : TextConst 'ENU=Header check';
      Text008@1100285007 : TextConst 'ENU=Create invoice test';
      Text009@1100285008 : TextConst 'ENU=Lines';
      Text010@1100285009 : TextConst 'ENU=This cannot be started from object designer!';

    PROCEDURE VerifyDocument@1100285002(VAR ExFPurchDocHeader@1100285017 : Record 12013587);
    VAR
      lrecExfPurchLine@1100285005 : Record 12013588;
      lrecExfPurchLine2@1100285004 : Record 12013588;
      ExFlowSetup@1100285018 : Record 12013601;
      ExfWorkflowMgt@1100285009 : Codeunit 12013593;
      ExflowValidateOCR@1100285008 : Codeunit 12013594;
      ExflowCheckLine@1100285003 : Codeunit 12013595;
      ExflowCheckHead@1100285011 : Codeunit 12013589;
      ExflowToInvoice@1100285010 : Codeunit 12013592;
      HeadError@1100285007 : Boolean;
      LineError@1100285006 : Boolean;
      LastError@1100285016 : Text[1024];
      Window@1100285014 : Dialog;
      DisplayWindow@1100285000 : Boolean;
    BEGIN
      WITH ExFPurchDocHeader DO BEGIN
        CLEARLASTERROR;
        CLEAR(ExflowCheckHead);
        CLEAR(ExflowValidateOCR);
        HeadError := FALSE;
        LineError := FALSE;

        ExFlowSetup.GET(COMPANYNAME,0);

        // Use displaywindow only for customers with documents containing LOTS of rows (>1000)
        DisplayWindow := FALSE;
        IF DisplayWindow THEN
          IF GUIALLOWED THEN BEGIN
            Window.OPEN(Text002+Text003+Text004);
            Window.UPDATE(1,"Inbound Document No.");
            Window.UPDATE(2,Text005);
          END;

        IF NOT ExflowValidateOCR.RUN(ExFPurchDocHeader) THEN BEGIN
          GET("Inbound Document No.");
          "Validation Error" := TRUE;
          "Error Message" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN("Error Message"));
          HeadError := TRUE;
          MODIFY;
        END;
        COMMIT;

        IF NOT HeadError THEN BEGIN
          GET("Inbound Document No.");

          IF DisplayWindow THEN
            IF GUIALLOWED THEN
              Window.UPDATE(2,Text007);

          IF NOT ExflowCheckHead.RUN(ExFPurchDocHeader) THEN BEGIN
            HeadError := TRUE;
            "Validation Error" := TRUE;
            "Error Message" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN("Error Message"));
            MODIFY;
            COMMIT;
          END
          ELSE BEGIN
            "Validation Error" := FALSE;
            "Error Message" := '';
            MODIFY;
            COMMIT;

            IF ExFlowSetup."Advanced Verify mode" THEN BEGIN
              IF DisplayWindow THEN
                IF GUIALLOWED THEN
                  Window.UPDATE(2,Text006);

              ExfWorkflowMgt.PrePostUpdateApprovers(ExFPurchDocHeader);
              COMMIT;

              IF DisplayWindow THEN
                IF GUIALLOWED THEN
                  Window.UPDATE(2,Text008);

              CLEAR(ExflowToInvoice);
              ExflowToInvoice.SetRealCreate(FALSE);
              IF NOT ExflowToInvoice.RUN(ExFPurchDocHeader) THEN BEGIN
                // ExFlowToInvoice always give an error but -1 when successful
                LastError := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(LastError));
                IF LastError <> '-1' THEN BEGIN
                  HeadError := TRUE;
                  "Validation Error" := TRUE;
                  "Error Message" := COPYSTR(LastError,1,MAXSTRLEN("Error Message"));
                  MODIFY;
                END
                ELSE BEGIN
                  HeadError := FALSE;
                  "Validation Error" := FALSE;
                  "Error Message" := '';
                  MODIFY;
                END;
              END;
            END;
          END;

          IF NOT ExFlowSetup."Advanced Verify mode" THEN BEGIN
            IF DisplayWindow THEN
              IF GUIALLOWED THEN
                Window.UPDATE(2,Text006);

            IF NOT HeadError THEN
              ExfWorkflowMgt.PrePostUpdateApprovers(ExFPurchDocHeader);
          END;

          COMMIT;

          IF DisplayWindow THEN
            IF GUIALLOWED THEN
              Window.UPDATE(2,Text009);

          LineError := FALSE;
          lrecExfPurchLine.RESET;
          lrecExfPurchLine.SETRANGE("Inbound Document No.","Inbound Document No.");
          IF lrecExfPurchLine.FINDSET THEN
            REPEAT
              IF DisplayWindow THEN
                IF GUIALLOWED THEN
                  Window.UPDATE(3,lrecExfPurchLine."Line No.");

              lrecExfPurchLine2 := lrecExfPurchLine;

              ExfWorkflowMgt.UpdateMatchedOrderInfo(lrecExfPurchLine2);
              lrecExfPurchLine2.MODIFY;
              COMMIT;

              IF NOT ExflowCheckLine.RUN(lrecExfPurchLine2) THEN BEGIN
                LineError := TRUE;
                lrecExfPurchLine2."Validation Error" := TRUE;
                lrecExfPurchLine2."Error Message" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(lrecExfPurchLine2."Error Message"));
                lrecExfPurchLine2.MODIFY;
              END
              ELSE BEGIN
                IF (lrecExfPurchLine2."Error Message" <> '') OR
                   lrecExfPurchLine2."Validation Error" THEN BEGIN
                  lrecExfPurchLine2."Validation Error" := FALSE;
                  lrecExfPurchLine2."Error Message" := '';
                  lrecExfPurchLine2.MODIFY;
                END;
              END;
            UNTIL lrecExfPurchLine.NEXT = 0;

          IF LineError AND NOT "Validation Error" THEN BEGIN
            "Validation Error" := TRUE;
            "Error Message" := Text001;
            MODIFY;
          END;
        END;

        COMMIT;

        IF DisplayWindow THEN
          IF GUIALLOWED THEN
            Window.CLOSE;
      END;
    END;

    PROCEDURE PostVerifyFunctions@1100285043();
    VAR
      ExFlowEmailHeader@1100285000 : Record 12013619;
      ExFlowEmailMgt@1100285001 : Codeunit 12013627;
    BEGIN
      ExFlowEmailHeader.RESET;
      ExFlowEmailHeader.SETCURRENTKEY("Send Order");
      ExFlowEmailHeader.SETRANGE("Send at import", TRUE);
      IF ExFlowEmailHeader.FINDSET(TRUE) THEN
        REPEAT
          ExFlowEmailMgt.SetHideMessage;
          ExFlowEmailMgt.RunJob(ExFlowEmailHeader);
        UNTIL ExFlowEmailHeader.NEXT = 0;

      COMMIT;
    END;

    BEGIN
    END.
  }
}

