OBJECT Codeunit 12013635 Web Service Search Routine
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF410000;
  }
  PROPERTIES
  {
    OnRun=VAR
            _xmlDoc@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
            _bigText@1100285001 : BigText;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      DecFormat@1100285003 : TextConst 'ENU=<Sign><Integer><Decimals><Comma,.>';
      Error001@1100285000 : TextConst 'ENU=Company name cannot be blank!';
      Error002@1100285001 : TextConst 'ENU=Column %1 is not setup!';
      GWebCompID@1100285002 : Record 12013630;

    PROCEDURE GetCount@1100285022(InboxName@1100285000 : Text[50];CompName@1100285001 : Text[50];InUserID@1100285002 : Code[50]) : Integer;
    VAR
      tempEXDoc@1100285003 : TEMPORARY Record 12013608;
    BEGIN
      CASE LOWERCASE(InboxName) OF
        'inbox': EXIT(SearchInbox(CompName,InUserID,tempEXDoc));
        'due': EXIT(SearchDue(CompName,InUserID,tempEXDoc));
        'future': EXIT(SearchFuture(CompName,InUserID,tempEXDoc));
        'recent': EXIT(SearchRecent(CompName,InUserID,tempEXDoc));
        'on hold','onhold','on_hold': EXIT(SearchHold(CompName,InUserID,tempEXDoc));
        'approved': EXIT(SearchApproved(CompName,InUserID,tempEXDoc));
        'sent': EXIT(SearchSent(CompName,InUserID,tempEXDoc));
        'pending': EXIT(SearchPending(CompName,InUserID,tempEXDoc));
        'rejected': EXIT(SearchRejected(CompName,InUserID,tempEXDoc));
        'complete': EXIT(SearchComplete(CompName,InUserID,tempEXDoc));
      ELSE
        ERROR('Unknown inbox type (%1)',InboxName); // not for end-user
      END;
    END;

    PROCEDURE SearchUserDocuments@1100285001(VAR _bigTextOut@1100285000 : BigText;_bigTextIn@1100285031 : BigText);
    VAR
      _i@1100285001 : Integer;
      _d@1100285030 : Integer;
      _docNo@1100285003 : Code[20];
      _vendorNo@1100285015 : Code[20];
      _approver@1100285019 : Code[50];
      _approvedBy@1100285005 : Code[50];
      _docType@1100285002 : Text[30];
      _vendorName@1100285007 : Text[50];
      _docStatus@1100285013 : Text[30];
      _flowStatus@1100285016 : Text[30];
      _approverStatus@1100285006 : Text[30];
      _maxAmount@1100285012 : Text[30];
      _minAmount@1100285011 : Text[30];
      _dueDate_From@1100285009 : Text[30];
      _dueDate_To@1100285010 : Text[30];
      _postingDate_From@1100285018 : Text[30];
      _postingDate_To@1100285017 : Text[30];
      CompName@1100285004 : Text[30];
      _initiator@1100285020 : Text[50];
      _vendorDocNo@1100285022 : Text[30];
      _createDate_From@1100285024 : Text[30];
      _createDate_To@1100285023 : Text[30];
      _approverComment@1100285014 : Text[100];
      _lineDescription@1100285021 : Text[50];
      _docAdminComment@1100285008 : Text[50];
      _approvalDate_From@1100285025 : Text[30];
      _arrDimCode@1100285026 : ARRAY [10] OF Code[20];
      _arrDimVal@1100285027 : ARRAY [10] OF Code[1024];
      _dyn@1100285028 : Text[30];
      _orderBy@1100285029 : Text[30];
      _TextParameterArray@1100285033 : ARRAY [12] OF Text[1024];
      date@1100285034 : Date;
      SearchIsByDim@1100285032 : Boolean;
      TempExDoc@1100285035 : TEMPORARY Record 12013608;
      ExDoc@1100285037 : Record 12013608;
      ExDocLine@1100285038 : Record 12013609;
      ExDocLineDim@1100285040 : Record 12013611;
      ExDocLineDim2@1100285060 : Record 12013611;
      ExDocLineApp@1100285043 : Record 12013610;
      PostedExDoc@1100285054 : Record 12013626;
      PostedExDocLine@1100285056 : Record 12013627;
      PostedExDocLineDim@1100285057 : Record 12013629;
      xmlDoc@1100285051 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlNodeList@1100285049 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNode@1100285046 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLMgt@1100285052 : Codeunit 6224;
      int@1100285053 : Integer;
    BEGIN
      // serve web search window
      xmlDoc := xmlDoc.XmlDocument;
      xmlDoc.LoadXml(_bigTextIn);
      xmlNode := xmlDoc.SelectSingleNode('Params'); // case sensitive
      xmlNodeList := xmlNode.ChildNodes;
      FOR _i := 0 TO xmlNodeList.Count -1 DO BEGIN
        xmlNode := xmlNodeList.Item(_i);
        CASE LOWERCASE(xmlNode.Name) OF
          'docno': _docNo := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_docNo));
          'doctype': _docType := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_docType));
          'vendor': _vendorNo := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_vendorNo));
          'vendorname': _vendorName := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_vendorName));
          'docstatus': _docStatus := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_docStatus));
          'flowstatus': _flowStatus := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_flowStatus));
          'approverstatus': _approverStatus := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_approverStatus));
          'maxamount': _maxAmount := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_maxAmount));
          'minamount': _minAmount := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_minAmount));
          'duedate_from': _dueDate_From := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_dueDate_From));
          'duedate_to': _dueDate_To := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_dueDate_To));
          'postingdate_from': _postingDate_From := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_postingDate_From));
          'postingdate_to': _postingDate_To := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_postingDate_To));
          'approver': _approver := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_approver));
          'approvedby': _approvedBy := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_approvedBy));
          'compname': CompName := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(CompName));
          'initiator': _initiator := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_initiator));
          'vendordocno': _vendorDocNo := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_vendorDocNo));
          'createdate_from': _createDate_From := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_createDate_From));
          'createdate_to': _createDate_To := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_createDate_To));
          'approvercomment': _approverComment := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_approverComment));
          'linedescription': _lineDescription := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_lineDescription));
          'docadmincomment': _docAdminComment := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_docAdminComment));
          'approvaldate_from': _approvalDate_From := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_approvalDate_From));
          'dyn': _dyn := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_dyn));
          'orderby': _orderBy := COPYSTR(xmlNode.InnerText,1,MAXSTRLEN(_orderBy));
          'dims': // dimensions, arr of 10
            FOR _d := 1 TO ARRAYLEN(_arrDimCode) DO BEGIN
              _arrDimCode[_d] := XMLMgt.FindNodeText(xmlNode,FORMAT(_d,0,'ColC<Integer>'));  // Col ID
              _arrDimVal[_d] := XMLMgt.FindNodeText(xmlNode,FORMAT(_d,0,'ColV<Integer>'));   // Value
            END;
        END;
      END;

      IF TestMode(GWebCompID) THEN
        xmlDoc.Save('c:\Temp\SearchIn.xml');

      TempExDoc.RESET;
      TempExDoc.DELETEALL;

      SearchIsByDim := FALSE;

      IF (_docStatus = '1') AND  (_approverStatus = '1') AND (_approver <> '') AND (_orderBy = 'DueDate ASC') AND (_dueDate_To = '')  THEN
        SearchInbox(CompName,_approver,TempExDoc)
      ELSE IF  (_docStatus = '1') AND  (_approverStatus = '1') AND (_approver <> '') AND (_orderBy = 'DueDate ASC') AND (_dueDate_To <> '') THEN
         SearchDue(CompName,_approver,TempExDoc)
      ELSE IF  (_docStatus = '1') AND  (_approverStatus = '0') AND (_approver <> '') AND (_orderBy = 'DueDate ASC') THEN
        SearchFuture(CompName,_approver,TempExDoc)
      ELSE IF  (_approver <> '') AND (_approvedBy <> '') AND (_approvalDate_From <> '') AND (_orderBy = 'DueDate ASC') THEN
        SearchRecent(CompName,_approver,TempExDoc)
      ELSE IF (_docStatus = '1') AND  (_approverStatus = '4') AND (_approver <> '') AND (_orderBy = 'DueDate ASC') THEN
        SearchHold(CompName,_approver,TempExDoc)
      ELSE IF (_docStatus = '-2') AND  (_docType = '1') AND (_initiator <> '') AND (_orderBy = '[Due Date] desc') AND (_dyn = '[Requisition Status]=0') THEN
        SearchApproved(CompName,_initiator,TempExDoc)
      ELSE IF (_docStatus = '-2') AND  (_docType = '1') AND (_initiator <> '') AND (_orderBy = '[Due Date] desc') AND (_dyn = '[Requisition Status]=1') THEN
        SearchSent(CompName,_initiator,TempExDoc)
      ELSE IF (_docStatus = '1') AND  (_docType = '0') AND (_initiator <> '') AND (_flowStatus = '3')AND (_orderBy = '[Due Date] desc') AND (_approvalDate_From <> '') THEN
        SearchRejected(CompName,_initiator,TempExDoc)
      ELSE IF (_docStatus IN ['1','100']) AND  (_docType = '0') AND (_initiator <> '') AND (_orderBy = '[Due Date] desc') THEN
        SearchPending(CompName,_initiator,TempExDoc)
      ELSE IF (_docStatus = '5') AND  (_docType = '1') AND (_initiator <> '') AND (_orderBy = '[Due Date] desc') THEN
        SearchComplete(CompName,_initiator,TempExDoc)
      ELSE BEGIN
        SearchIsByDim := TRUE;

        _TextParameterArray[1] := _docType;;
        _TextParameterArray[2] := _vendorName;
        _TextParameterArray[3] := _docStatus;
        _TextParameterArray[4] := _flowStatus;
        _TextParameterArray[5] := _approverStatus;
        _TextParameterArray[6] := _maxAmount;
        _TextParameterArray[7] := _minAmount;
        _TextParameterArray[8] := _dueDate_From;
        _TextParameterArray[9] := _dueDate_To;
        _TextParameterArray[10] := _postingDate_From;
        _TextParameterArray[11] := _postingDate_To;
        _TextParameterArray[12] := _initiator;

        SearchByDim(CompName,_docNo,_vendorNo,_approver,_approvedBy,_vendorDocNo,_createDate_From,_createDate_To,_approverComment,
                    _lineDescription,_docAdminComment,_approvalDate_From,_dyn,_orderBy,
                    _arrDimCode,_arrDimVal,TempExDoc,_TextParameterArray);
      END;

      int := 0;
      CreateXMLDoc('SearchResult',xmlDoc,xmlNode);

      TempExDoc.RESET;
      IF SearchIsByDim THEN BEGIN
        TempExDoc.SETCURRENTKEY(ID);
        TempExDoc.ASCENDING(FALSE);
      END
      ELSE
        TempExDoc.SETCURRENTKEY("Due Date");

      IF TempExDoc.FINDSET THEN
        REPEAT
          XMLMgt.AddElement(xmlNode,'SearchResult','','',xmlNode);
          XmlCreateDocHeader(TempExDoc,xmlNode);
          xmlNode := xmlNode.ParentNode;
          int += 1;
        UNTIL TempExDoc.NEXT = 0;

      IF TestMode(GWebCompID) THEN
        xmlDoc.Save('c:\Temp\SearchOut.xml');

      CLEAR(_bigTextOut);
      _bigTextOut.ADDTEXT(xmlDoc.OuterXml);
    END;

    PROCEDURE GetUserCurrentDocuments@1100285015(CompName@1100285001 : Text[30];InUserID@1100285000 : Code[50];VAR TempEXDoc@1100285015 : TEMPORARY Record 12013608);
    VAR
      ExDoc@1100285010 : Record 12013608;
      EXDocLineApp@1100285009 : Record 12013610;
      WebCompID@1100285002 : Record 12013630;
      TempUser@1100285003 : Text;
    BEGIN
      // serve emails sent to user

      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          GetUserCurrentDocuments(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT;
      END;

      // put all docs represented on lines in memory
      EXDocLineApp.RESET;
      EXDocLineApp.SETCURRENTKEY(Approver);
      EXDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT;

      EXDocLineApp.SETRANGE(Flowstatus,EXDocLineApp.Flowstatus::Current);
      EXDocLineApp.SETFILTER(Approver, TempUser);
      IF EXDocLineApp.FINDSET THEN REPEAT
        ExDoc.GET(EXDocLineApp."Document ID");
        IF ExDoc.Status = ExDoc.Status::Active THEN
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
      UNTIL EXDocLineApp.NEXT = 0;
    END;

    LOCAL PROCEDURE SearchInbox@1100285028(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchInbox(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Current);
      ExDocLineApp.SETFILTER(Approver,TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF ExDoc.Status = ExDoc.Status::Active THEN
            IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
        UNTIL ExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchDue@1100285029(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchDue(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Current);
      ExDocLineApp.SETFILTER(Approver,TempUser);
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF ExDoc.Status = ExDoc.Status::Active THEN
            IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
              IF ExDoc."Due Date" <= TODAY THEN BEGIN
                TempEXDoc.INIT;
                TempEXDoc.TRANSFERFIELDS(ExDoc);
                TempEXDoc.ID := ExDoc."Web ID";
                TempEXDoc."Temp Company Name" := CompName;
                TempEXDoc.INSERT;
             END;
            END;
        UNTIL ExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchFuture@1100285032(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchFuture(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"Not processed");
      ExDocLineApp.SETFILTER(Approver,TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF ExDoc.Status = ExDoc.Status::Active THEN
            IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
        UNTIL ExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchRecent@1100285030(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      PostedExDoc@1100285008 : Record 12013626;
      PostedExDocLineApp@1100285007 : Record 12013628;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
      TempApprovalDate@1100285009 : DateTime;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchRecent(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved,ExDocLineApp.Flowstatus::Rejected);
      ExDocLineApp.SETFILTER(Approver,TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      TempApprovalDate := CREATEDATETIME(TODAY-30,0T);
      ExDocLineApp.SETFILTER("Approval Date", '>=%1', TempApprovalDate);
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
        UNTIL ExDocLineApp.NEXT = 0;

      ExDocLineApp.RESET;
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      ExDocLineApp.SETCURRENTKEY("Approved By");
      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved,ExDocLineApp.Flowstatus::Rejected);
      ExDocLineApp.SETFILTER("Approved By",TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      ExDocLineApp.SETFILTER("Approval Date", '>=%1', TempApprovalDate);
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
        UNTIL ExDocLineApp.NEXT = 0;

      // Posted docs
      PostedExDocLineApp.RESET;
      PostedExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      PostedExDocLineApp.CHANGECOMPANY(CompName);
      PostedExDoc.CHANGECOMPANY(CompName);

      PostedExDocLineApp.SETRANGE(Flowstatus,PostedExDocLineApp.Flowstatus::Approved,PostedExDocLineApp.Flowstatus::Rejected);
      PostedExDocLineApp.SETFILTER(Approver,TempUser);
      PostedExDocLineApp.SETFILTER("Approval Date", '>=%1', TempApprovalDate);
      IF PostedExDocLineApp.FINDSET THEN
        REPEAT
          PostedExDoc.GET(PostedExDocLineApp."Document ID");
          IF NOT TempEXDoc.GET(PostedExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(PostedExDoc);
            TempEXDoc.ID := PostedExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
        UNTIL PostedExDocLineApp.NEXT = 0;

      PostedExDocLineApp.RESET;
      PostedExDocLineApp.CHANGECOMPANY(CompName);
      PostedExDoc.CHANGECOMPANY(CompName);

      PostedExDocLineApp.SETCURRENTKEY("Approved By");
      PostedExDocLineApp.SETRANGE(Flowstatus,PostedExDocLineApp.Flowstatus::Approved,PostedExDocLineApp.Flowstatus::Rejected);
      PostedExDocLineApp.SETFILTER("Approved By",TempUser);
      PostedExDocLineApp.SETFILTER("Approval Date", '>=%1', TempApprovalDate);
      IF PostedExDocLineApp.FINDSET THEN
        REPEAT
          PostedExDoc.GET(PostedExDocLineApp."Document ID");
          IF NOT TempEXDoc.GET(PostedExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(PostedExDoc);
            TempEXDoc.ID := PostedExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
        UNTIL PostedExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchHold@1100285031(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      ExDocLineApp@1100285003 : Record 12013610;
      WebCompID@1100285005 : Record 12013630;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchHold(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDocLineApp.RESET;
      ExDocLineApp.SETCURRENTKEY(Approver,Flowstatus);
      ExDocLineApp.CHANGECOMPANY(CompName);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"On hold");
      ExDocLineApp.SETFILTER(Approver, TempUser);
      ExDocLineApp.SETRANGE("Document Type",ExDocLineApp."Document Type"::Quote,ExDocLineApp."Document Type"::"Return Order");
      IF ExDocLineApp.FINDSET THEN
        REPEAT
          ExDoc.GET(ExDocLineApp."Document ID");
          IF ExDoc.Status = ExDoc.Status::Active THEN
            IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
        UNTIL ExDocLineApp.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchApproved@1100285034(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      WebCompID@1100285000 : Record 12013630;
      TempUser@1100285005 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchApproved(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY(Initiator);
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Order);
      ExDoc.SETRANGE(Status,ExDoc.Status::Approved);
      ExDoc.SETRANGE("Requisition Status",ExDoc."Requisition Status"::Unsubmitted);
      ExDoc.SETFILTER(Initiator,TempUser);
      IF ExDoc.FINDSET THEN
        REPEAT
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
        UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchRejected@1100285035(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285000 : Record 12013608;
      WebCompID@1100285004 : Record 12013630;
      TempUser@1100285005 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchRejected(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY("Created By");
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Quote,ExDoc."Document Type"::Order);
      ExDoc.SETFILTER("Created By",TempUser);
      IF ExDoc.FINDSET THEN REPEAT
        IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
          ExDoc.CALCFIELDS(Rejected);
          IF ExDoc.Rejected THEN BEGIN
            TempEXDoc.INIT;
            TempEXDoc.TRANSFERFIELDS(ExDoc);
            TempEXDoc.ID := ExDoc."Web ID";
            TempEXDoc."Temp Company Name" := CompName;
            TempEXDoc.INSERT;
          END;
        END;
      UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchSent@1100285042(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285000 : Record 12013608;
      WebCompID@1100285004 : Record 12013630;
      TempUser@1100285005 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchSent(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY("Assigned Receipt Group");
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Order);
      ExDoc.SETRANGE(Status,ExDoc.Status::Approved);
      ExDoc.SETRANGE("Requisition Status",ExDoc."Requisition Status"::"Submitted to Vendor");
      ExDoc.SETFILTER("Assigned Receipt Group",TempUser);
      IF ExDoc.FINDSET THEN REPEAT
        IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
          TempEXDoc.INIT;
          TempEXDoc.TRANSFERFIELDS(ExDoc);
          TempEXDoc.ID := ExDoc."Web ID";
          TempEXDoc."Temp Company Name" := CompName;
          TempEXDoc.INSERT;
        END;
      UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchPending@1100285043(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285004 : Record 12013608;
      WebCompID@1100285005 : Record 12013630;
      Skip@1100285000 : Boolean;
      TempUser@1100285006 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchPending(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY("Created By");
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Quote,ExDoc."Document Type"::Order);
      ExDoc.SETRANGE(Status,ExDoc.Status::Inactive,ExDoc.Status::Approved);
      ExDoc.SETRANGE("Change Jnl Processed PO",FALSE);
      ExDoc.SETFILTER("Created By",TempUser);
      IF ExDoc.FINDSET THEN
        REPEAT
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            // Always show for Creator, skip if Creator = Purch/Receipt grp
            Skip := FALSE;
            IF (ExDoc.Status = ExDoc.Status::Approved) AND ExDoc."Change Jnl Processed PO" THEN BEGIN
              IF ExDoc."Requisition Status" = ExDoc."Requisition Status"::Unsubmitted THEN
                IF ExDoc."Created By" = ExDoc.Initiator THEN
                  Skip := TRUE;

              IF ExDoc."Requisition Status" = ExDoc."Requisition Status"::"Submitted to Vendor" THEN
                IF ExDoc."Created By" = ExDoc."Assigned Receipt Group" THEN
                  Skip := TRUE;
            END;
            IF NOT Skip THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
          END;
        UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchComplete@1100285046(CompName@1100285002 : Text[50];InUserID@1100285001 : Code[50];VAR TempEXDoc@1100285003 : TEMPORARY Record 12013608) : Integer;
    VAR
      ExDoc@1100285000 : Record 12013608;
      WebCompID@1100285004 : Record 12013630;
      TempUser@1100285005 : Text;
    BEGIN
      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchComplete(WebCompID."Company Name",InUserID,TempEXDoc);
        UNTIL WebCompID.NEXT = 0;

        EXIT(TempEXDoc.COUNT);
      END;

      ExDoc.RESET;
      ExDoc.SETCURRENTKEY(Status,"Document Type");
      ExDoc.CHANGECOMPANY(CompName);

      TempUser := GetUserGroupFilter(CompName,InUserID);
      IF TempUser = '' THEN
        EXIT(TempEXDoc.COUNT);

      ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Quote,ExDoc."Document Type"::Order);
      ExDoc.SETFILTER(Status,'%1|%2',ExDoc.Status::Received,ExDoc.Status::Invoiced);
      IF ExDoc.FINDSET THEN
        REPEAT
          IF NOT TempEXDoc.GET(ExDoc."Web ID") THEN BEGIN
            IF (STRPOS(TempUser, ExDoc."Created By") + STRPOS(TempUser, ExDoc.Initiator) + STRPOS(TempUser, ExDoc."Assigned Receipt Group")) > 0 THEN BEGIN
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            END;
          END;
      UNTIL ExDoc.NEXT = 0;

      EXIT(TempEXDoc.COUNT);
    END;

    LOCAL PROCEDURE SearchByDim@1100285003(CompName@1100285052 : Text[30];_docNo@1100285059 : Code[20];_vendorNo@1100285057 : Code[20];_approver@1100285046 : Code[50];_approvedBy@1100285045 : Code[50];_vendorDocNo@1100285043 : Text[30];_createDate_From@1100285042 : Text[30];_createDate_To@1100285041 : Text[30];_approverComment@1100285040 : Text[100];_lineDescription@1100285039 : Text[50];_docAdminComment@1100285038 : Text[50];_approvalDate_From@1100285037 : Text[30];_dyn@1100285028 : Text[30];_orderBy@1100285001 : Text[30];_arrDimCode@1100285036 : ARRAY [10] OF Code[20];_arrDimVal@1100285035 : ARRAY [10] OF Code[1024];VAR TempEXDoc@1100285000 : TEMPORARY Record 12013608;_TextParameterArray@1100285011 : ARRAY [12] OF Text[1024]);
    VAR
      WebCompID@1100285003 : Record 12013630;
      TempExDocLineDim@1100285027 : ARRAY [100] OF TEMPORARY Record 12013611;
      ExDoc@1100285026 : Record 12013608;
      ExDoc2@1100285007 : Record 12013608;
      ExDocLine@1100285025 : Record 12013609;
      ExDocLineDim@1100285024 : Record 12013611;
      ExDocLineDim2@1100285023 : Record 12013611;
      ExColumn@1100285022 : Record 12013661;
      ExDocLineApp@1100285021 : Record 12013610;
      PostedExDoc@1100285020 : Record 12013626;
      PostedExDoc2@1100285008 : Record 12013626;
      PostedExDocLine@1100285019 : Record 12013627;
      PostedExDocLineApp@1100285018 : Record 12013628;
      PostedExDocLineDim@1100285017 : Record 12013629;
      PostedExDocLineDim2@1100285016 : Record 12013629;
      xmlNodeList@1100285013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNode@1100285010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CreateQuotefromReq@1100285006 : Codeunit 12013614;
      _i@1100285064 : BigInteger;
      _d@1100285063 : Integer;
      int@1100285005 : Integer;
      DimRecNo@1100285004 : Integer;
      TempID@1100285009 : BigInteger;
      date@1100285033 : Date;
      TempUserFilter@1100285030 : Text;
      _docType@1100285051 : Text[30];
      _vendorName@1100285050 : Text[50];
      _docStatus@1100285049 : Text[30];
      _flowStatus@1100285048 : Text[30];
      _approverStatus@1100285047 : Text[30];
      _maxAmount@1100285044 : Text[30];
      _minAmount@1100285034 : Text[30];
      _dueDate_From@1100285032 : Text[30];
      _dueDate_To@1100285031 : Text[30];
      _postingDate_From@1100285015 : Text[30];
      _postingDate_To@1100285014 : Text[30];
      _initiator@1100285002 : Text[50];
      RefNoSearch@1100285029 : Boolean;
      DimFilterExist@1100285060 : Boolean;
      SearchByCreatedDate@1100285012 : Boolean;
      SearchByPostingDate@1100285053 : Boolean;
    BEGIN
      _docType := _TextParameterArray[1];
      _vendorName := _TextParameterArray[2];
      _docStatus := _TextParameterArray[3];
      _flowStatus := _TextParameterArray[4];
      _approverStatus := _TextParameterArray[5];
      _maxAmount := _TextParameterArray[6];
      _minAmount := _TextParameterArray[7];
      _dueDate_From := _TextParameterArray[8];
      _dueDate_To := _TextParameterArray[9];
      _postingDate_From := _TextParameterArray[10];
      _postingDate_To := _TextParameterArray[11];
      _initiator := _TextParameterArray[12];

      IF CompName = '' THEN BEGIN
        WebCompID.SETRANGE("Web enabled", TRUE);
        WebCompID.FINDSET;
        REPEAT
          SearchByDim(WebCompID."Company Name",_docNo,_vendorNo,_approver,_approvedBy,_vendorDocNo,_createDate_From,_createDate_To,_approverComment,
                      _lineDescription,_docAdminComment,_approvalDate_From,_dyn,_orderBy,
                      _arrDimCode,_arrDimVal,TempEXDoc,_TextParameterArray);
        UNTIL WebCompID.NEXT = 0;

        EXIT;
      END;

      GetWebComp(WebCompID,CompName);

      ExDoc.RESET;
      ExDoc.CHANGECOMPANY(CompName);
      ExDoc2.RESET;
      ExDoc2.CHANGECOMPANY(CompName);
      PostedExDoc.RESET;
      PostedExDoc.CHANGECOMPANY(CompName);
      PostedExDoc2.RESET;
      PostedExDoc2.CHANGECOMPANY(CompName);

      // Set proper key
      IF (_docNo <> '') AND (NOT RefNoSearch) THEN
        ExDoc.SETCURRENTKEY("Document No.")
      ELSE IF _initiator <> '' THEN
        ExDoc.SETCURRENTKEY(Initiator)
      ELSE IF _vendorDocNo <> '' THEN BEGIN
        ExDoc.SETCURRENTKEY("Vendor Document No.");
        PostedExDoc.SETCURRENTKEY("Vendor Document No.");
      END
      ELSE
        IF _vendorName <> '' THEN BEGIN
          ExDoc.SETCURRENTKEY("Vendor Name");
          PostedExDoc.SETCURRENTKEY("Vendor Name");
        END
        ELSE
          IF (CompName <> '') OR (_docType <> '') THEN
            ExDoc.SETCURRENTKEY("Document Type","Document No.");

      // Set Filters
      CASE _docStatus OF
        '0','Inactive':
          BEGIN
            ExDoc.SETRANGE(Status,ExDoc.Status::Inactive);
            PostedExDoc.SETRANGE(Status,-1);
          END;
        '1','Active':
          BEGIN
            ExDoc.SETRANGE(Status,ExDoc.Status::Active);
            PostedExDoc.SETRANGE(Status,-1);
          END;
        '2','Approved':
          BEGIN
            ExDoc.SETFILTER(Status,'%1|%2|%3',ExDoc.Status::"Ready for posting",ExDoc.Status::Approved,ExDoc.Status::Invoiced);
            PostedExDoc.SETRANGE(Status,PostedExDoc.Status::Invoiced);
          END;
        '3','Completed': ; // Covered by Searchbox
      END;

      CASE _docType OF
        '0','Requisition':
          BEGIN
            ExDoc.SETFILTER("Document Type",'%1|%2',ExDoc."Document Type"::Quote,ExDoc."Document Type"::Order);
            PostedExDoc.SETRANGE("Document Type",-1);
          END;

        '1','Order':
          BEGIN
            ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Order);
            PostedExDoc.SETRANGE("Document Type",-1);
          END;

        '2','Invoice':
          BEGIN
            ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::Invoice);
            PostedExDoc.SETRANGE("Document Type",PostedExDoc."Document Type"::"Posted Invoice");
          END;

        '3','Credit':
          BEGIN
            ExDoc.SETRANGE("Document Type",ExDoc."Document Type"::"Credit Memo");
            PostedExDoc.SETRANGE("Document Type", PostedExDoc."Document Type"::"Posted Credit Memo");
          END;

        '-43': SearchByCreatedDate := TRUE;

        '-50': SearchByPostingDate := TRUE;

        '-101':  RefNoSearch := TRUE;  //Referencenumber search...
      END;

      IF RefNoSearch THEN BEGIN
        ExDoc.SETRANGE("Text Field 1",_docNo);
        PostedExDoc.SETRANGE("Text Field 1",_docNo);
      END
      ELSE
        IF _docNo <> '' THEN BEGIN
          ExDoc.SETRANGE("Document No.",_docNo);
          PostedExDoc.SETRANGE("Document No.",_docNo);
        END;

      // Initiator Created by is populated on create
      IF _initiator <> '' THEN BEGIN
        TempUserFilter := GetUserGroupFilter(CompName,_initiator);
        IF TempUserFilter = '' THEN
          EXIT;

        ExDoc.SETRANGE("Created By", TempUserFilter);
        PostedExDoc.SETRANGE("Created By", TempUserFilter);
      END;

      // Search based on initiator
      IF RefNoSearch THEN BEGIN
        IF _approver <> '' THEN BEGIN
          TempUserFilter := GetUserGroupFilter(CompName,_approver);
          IF TempUserFilter = '' THEN
            EXIT;

          ExDoc.SETRANGE("Created By",TempUserFilter);
          PostedExDoc.SETRANGE("Created By",TempUserFilter);
        END;
      END;

      IF _vendorNo <> '' THEN BEGIN
        ExDoc.SETFILTER("Vendor No.",_vendorNo);
        PostedExDoc.SETFILTER("Vendor No.",_vendorNo);
      END;

      IF _vendorName <> '' THEN BEGIN
        ExDoc.SETFILTER("Vendor Name",'%1',_vendorName);
        PostedExDoc.SETFILTER("Vendor Name",'%1',_vendorName);
      END;

      IF _vendorDocNo <> '' THEN BEGIN
        ExDoc.SETFILTER("Vendor Document No.",_vendorDocNo);
        PostedExDoc.SETFILTER("Vendor Document No.",_vendorDocNo);
      END;

      IF _approverComment <> '' THEN BEGIN
        ExDoc.SETFILTER("Admin Comment",_approverComment);
        PostedExDoc.SETFILTER("Admin Comment",_approverComment);
      END;

      IF  _minAmount + _maxAmount <> '' THEN BEGIN
        ExDoc.SETFILTER("Gross Amount",_minAmount +'..' +_maxAmount);
        PostedExDoc.SETFILTER("Gross Amount",_minAmount +'..' +_maxAmount);
      END;

      IF (_dueDate_From + _dueDate_To) <> '' THEN BEGIN
        _dueDate_From := FORMAT(CreateQuotefromReq.DateField(_dueDate_From));
        _dueDate_To := FORMAT(CreateQuotefromReq.DateField(_dueDate_To));
        ExDoc.SETFILTER("Due Date", _dueDate_From + '..' + _dueDate_To);
        PostedExDoc.SETFILTER("Due Date", _dueDate_From + '..' + _dueDate_To);
      END;

      IF (_postingDate_From +_postingDate_To) <> '' THEN BEGIN
        _postingDate_From := FORMAT(CreateQuotefromReq.DateField(_postingDate_From));
        _postingDate_To := FORMAT(CreateQuotefromReq.DateField(_postingDate_To));
        IF SearchByCreatedDate THEN BEGIN
          ExDoc.SETFILTER("Create Date", _postingDate_From + '..' + _postingDate_To);
          PostedExDoc.SETFILTER("Create Date", _postingDate_From + '..' + _postingDate_To);
        END ELSE IF SearchByPostingDate THEN BEGIN
          ExDoc.SETFILTER("Posting Date", _postingDate_From + '..' + _postingDate_To);
          PostedExDoc.SETFILTER("Posting Date", _postingDate_From + '..' + _postingDate_To);
        END ELSE BEGIN
          // Using document date for search
          ExDoc.SETFILTER("Document Date", _postingDate_From + '..' + _postingDate_To);
          PostedExDoc.SETFILTER("Document Date", _postingDate_From + '..' + _postingDate_To);
        END;
      END;

      // Set Ex Doc Line Filters
      ExDocLine.RESET;
      PostedExDocLineDim.RESET;
      ExDocLineDim2.RESET;
      PostedExDocLineDim2.RESET;

      ExDocLine.CHANGECOMPANY(CompName);
      PostedExDocLine.CHANGECOMPANY(CompName);
      ExDocLineDim.CHANGECOMPANY(CompName);
      PostedExDocLineDim.CHANGECOMPANY(CompName);
      ExDocLineDim2.CHANGECOMPANY(CompName);

      ExDocLineDim.SETCURRENTKEY("Column ID","Dimension Value");
      PostedExDocLineDim.SETCURRENTKEY("Column ID","Dimension Value");
      ExDocLineDim2.SETCURRENTKEY("Document Line ID");
      PostedExDocLineDim2.SETCURRENTKEY("Document Line ID");

      DimRecNo := 1;
      CLEAR(TempExDocLineDim);
      FOR _d := 1 TO ARRAYLEN(_arrDimCode) DO
        IF EVALUATE(_i,_arrDimCode[_d]) THEN BEGIN
          // searching using dimensions is always searching in one specific company - non company columns are not possible
          ExColumn.RESET;
          ExColumn.CHANGECOMPANY(CompName);
          _i := _i - WebCompID."Web Company ID";
          IF ExColumn.GET(_i) THEN BEGIN
            DimFilterExist := TRUE;
            IF DimRecNo > 1 THEN BEGIN
              TempExDocLineDim[DimRecNo-1].SETRANGE("Column ID", ExColumn.ID);
              TempExDocLineDim[DimRecNo-1].SETFILTER("Dimension Value",_arrDimVal[_d]);
              IF TempExDocLineDim[DimRecNo-1].FINDSET THEN
                REPEAT
                  // Unposted docs
                  IF TempExDocLineDim[DimRecNo-1]."Document Type" < 6 THEN BEGIN
                    ExDocLineDim2.SETRANGE("Document Line ID", TempExDocLineDim[DimRecNo-1]."Document Line ID");
                    IF ExDocLineDim2.FINDSET THEN
                      REPEAT
                        IF NOT TempExDocLineDim[DimRecNo].GET(ExDocLineDim2.ID) THEN BEGIN
                          TempExDocLineDim[DimRecNo].INIT;
                          TempExDocLineDim[DimRecNo].TRANSFERFIELDS(ExDocLineDim2);
                          TempExDocLineDim[DimRecNo].INSERT;
                        END;
                      UNTIL ExDocLineDim2.NEXT = 0;
                  END
                  ELSE BEGIN
                    // Posted docs
                    PostedExDocLineDim2.SETRANGE("Document Line ID", TempExDocLineDim[DimRecNo-1]."Document Line ID");
                    IF PostedExDocLineDim2.FINDSET THEN
                      REPEAT
                        IF NOT TempExDocLineDim[DimRecNo].GET(PostedExDocLineDim2.ID) THEN BEGIN
                          TempExDocLineDim[DimRecNo].INIT;
                          TempExDocLineDim[DimRecNo].TRANSFERFIELDS(PostedExDocLineDim2);
                          TempExDocLineDim[DimRecNo].INSERT;
                        END;
                      UNTIL PostedExDocLineDim2.NEXT = 0;
                  END;
                UNTIL TempExDocLineDim[DimRecNo-1].NEXT = 0;

              DimRecNo := DimRecNo + 1;
            END
            ELSE BEGIN
              ExDocLineDim.SETRANGE("Column ID", ExColumn.ID);
              ExDocLineDim.SETFILTER("Dimension Value",_arrDimVal[_d]);
              IF ExDocLineDim.FINDSET THEN
                REPEAT
                  ExDocLineDim2.SETRANGE("Document Line ID", ExDocLineDim."Document Line ID");
                  IF ExDocLineDim2.FINDSET THEN
                    REPEAT
                      IF NOT TempExDocLineDim[1].GET(ExDocLineDim2.ID) THEN BEGIN
                        TempExDocLineDim[1].INIT;
                        TempExDocLineDim[1].TRANSFERFIELDS(ExDocLineDim2);
                        TempExDocLineDim[1].INSERT;
                      END;
                    UNTIL ExDocLineDim2.NEXT = 0;
                UNTIL ExDocLineDim.NEXT = 0;

              PostedExDocLineDim.SETRANGE("Column ID", ExColumn.ID);
              PostedExDocLineDim.SETFILTER("Dimension Value",_arrDimVal[_d]);
              IF PostedExDocLineDim.FINDSET THEN
                REPEAT
                  PostedExDocLineDim2.SETRANGE("Document Line ID", PostedExDocLineDim."Document Line ID");
                  IF PostedExDocLineDim2.FINDSET THEN
                    REPEAT
                      IF NOT TempExDocLineDim[1].GET(PostedExDocLineDim2.ID) THEN BEGIN
                        TempExDocLineDim[1].INIT;
                        TempExDocLineDim[1].TRANSFERFIELDS(PostedExDocLineDim2);
                        TempExDocLineDim[1].INSERT;
                      END;
                    UNTIL PostedExDocLineDim2.NEXT = 0;
                UNTIL PostedExDocLineDim.NEXT = 0;

              DimRecNo := 2;
            END;
          END;
        END;

      IF DimRecNo <> 1 THEN
        DimRecNo := DimRecNo - 1;
      TempExDocLineDim[DimRecNo].RESET;

      // Set Approver Filters
      ExDocLineApp.RESET;
      PostedExDocLineApp.RESET;
      ExDocLineApp.CHANGECOMPANY(CompName);
      PostedExDocLineApp.CHANGECOMPANY(CompName);

      // If initator based search, ignore approver filter
      IF NOT RefNoSearch THEN
        IF (_approver <> '') AND (_initiator = '') THEN BEGIN
          TempUserFilter := GetUserGroupFilter(CompName,_approver);
          IF TempUserFilter = '' THEN
            EXIT;

          ExDocLineApp.SETFILTER(Approver,TempUserFilter);
          PostedExDocLineApp.SETFILTER(Approver,TempUserFilter);
        END;

      //wildcard search?
      IF _docAdminComment <> '' THEN BEGIN
        ExDocLineApp.SETFILTER(Comment,_docAdminComment);
        PostedExDocLineApp.SETFILTER(Comment,_docAdminComment);
      END;

      CASE _approverStatus OF
        '0': ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"Not processed");
        '1': ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Current);
        '2':
          BEGIN
            ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved);
            PostedExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Approved);
          END;
        '3': ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::Rejected);
        '4': ExDocLineApp.SETRANGE(Flowstatus,ExDocLineApp.Flowstatus::"On hold");
      END;

      // Get Data
      // Approver filter
      IF ExDocLineApp.GETFILTERS <> '' THEN BEGIN
        // Approver
        IF ExDocLineApp.FINDSET THEN
          REPEAT // only headers from lineapprovers are relevant
            ExDoc2.GET(ExDocLineApp."Document ID");
            IF NOT TempEXDoc.GET(ExDoc2."Web ID") THEN BEGIN
              IF DimFilterExist THEN BEGIN
                TempExDocLineDim[DimRecNo].SETRANGE("Document ID",ExDocLineApp."Document ID");
                IF NOT TempExDocLineDim[DimRecNo].ISEMPTY THEN BEGIN // above filters, if any, plus this document - else ignore
                  ExDoc.SETRANGE(ID,ExDocLineApp."Document ID");
                  IF ExDoc.FINDFIRST THEN BEGIN
                    TempEXDoc.INIT;
                    TempEXDoc.TRANSFERFIELDS(ExDoc);
                    TempEXDoc.ID := ExDoc2."Web ID";
                    TempEXDoc."Temp Company Name" := CompName;
                    TempEXDoc.INSERT;
                  END;
                END;
              END
              ELSE BEGIN
                ExDoc.SETRANGE(ID,ExDocLineApp."Document ID");
                IF ExDoc.FINDFIRST THEN BEGIN
                  TempEXDoc.INIT;
                  TempEXDoc.TRANSFERFIELDS(ExDoc);
                  TempEXDoc.ID := ExDoc2."Web ID";
                  TempEXDoc."Temp Company Name" := CompName;
                  TempEXDoc.INSERT;
                END;
              END;
            END;
          UNTIL ExDocLineApp.NEXT = 0;

        IF PostedExDocLineApp.FINDSET THEN
          REPEAT // only headers from lineapprovers are relevant
            PostedExDoc2.GET(PostedExDocLineApp."Document ID");
            IF NOT TempEXDoc.GET(PostedExDoc2."Web ID") THEN BEGIN
              IF DimFilterExist THEN BEGIN
                TempExDocLineDim[DimRecNo].SETRANGE("Document ID",PostedExDocLineApp."Document ID");
                IF NOT TempExDocLineDim[DimRecNo].ISEMPTY THEN BEGIN // above filters, if any, plus this document - else ignore
                  PostedExDoc.SETRANGE(ID,PostedExDocLineApp."Document ID");
                  IF PostedExDoc.FINDFIRST THEN BEGIN
                    TempEXDoc.INIT;
                    TempEXDoc.TRANSFERFIELDS(PostedExDoc);
                    TempEXDoc.ID := PostedExDoc2."Web ID";
                    TempEXDoc."Temp Company Name" := CompName;
                    TempEXDoc.INSERT;
                  END;
                END;
              END
              ELSE BEGIN
                PostedExDoc.SETRANGE(ID,PostedExDocLineApp."Document ID");
                IF PostedExDoc.FINDFIRST THEN BEGIN
                  TempEXDoc.INIT;
                  TempEXDoc.TRANSFERFIELDS(PostedExDoc);
                  TempEXDoc.ID := PostedExDoc2."Web ID";
                  TempEXDoc."Temp Company Name" := CompName;
                  TempEXDoc.INSERT;
                END;
              END;
            END;
          UNTIL PostedExDocLineApp.NEXT = 0;

        // Approved by
        ExDocLineApp.COPYFILTER(Approver, ExDocLineApp."Approved By");
        ExDocLineApp.SETRANGE(Approver);
        PostedExDocLineApp.COPYFILTER(Approver, PostedExDocLineApp."Approved By");
        PostedExDocLineApp.SETRANGE(Approver);

        IF ExDocLineApp.FINDSET THEN
          REPEAT // only headers from lineapprovers are relevant
            ExDoc2.GET(ExDocLineApp."Document ID");
            IF NOT TempEXDoc.GET(ExDoc2."Web ID") THEN BEGIN
              IF DimFilterExist THEN BEGIN
                TempExDocLineDim[DimRecNo].SETRANGE("Document ID",ExDocLineApp."Document ID");
                IF NOT TempExDocLineDim[DimRecNo].ISEMPTY THEN BEGIN // above filters, if any, plus this document - else ignore
                  ExDoc.SETRANGE(ID,ExDocLineApp."Document ID");
                  IF ExDoc.FINDFIRST THEN BEGIN
                    TempEXDoc.INIT;
                    TempEXDoc.TRANSFERFIELDS(ExDoc);
                    TempEXDoc.ID := ExDoc2."Web ID";
                    TempEXDoc."Temp Company Name" := CompName;
                    TempEXDoc.INSERT;
                  END;
                END;
              END
              ELSE BEGIN
                ExDoc.SETRANGE(ID,ExDocLineApp."Document ID");
                IF ExDoc.FINDFIRST THEN BEGIN
                  TempEXDoc.INIT;
                  TempEXDoc.TRANSFERFIELDS(ExDoc);
                  TempEXDoc.ID := ExDoc2."Web ID";
                  TempEXDoc."Temp Company Name" := CompName;
                  TempEXDoc.INSERT;
                END;
              END;
            END;
          UNTIL ExDocLineApp.NEXT = 0;

        IF PostedExDocLineApp.FINDSET THEN
          REPEAT // only headers from lineapprovers are relevant
            PostedExDoc2.GET(PostedExDocLineApp."Document ID");
            IF NOT TempEXDoc.GET(PostedExDoc2."Web ID") THEN BEGIN
              IF DimFilterExist THEN BEGIN
                TempExDocLineDim[DimRecNo].SETRANGE("Document ID",PostedExDocLineApp."Document ID");
                IF NOT TempExDocLineDim[DimRecNo].ISEMPTY THEN BEGIN // above filters, if any, plus this document - else ignore
                  PostedExDoc.SETRANGE(ID,PostedExDocLineApp."Document ID");
                  IF PostedExDoc.FINDFIRST THEN BEGIN
                    TempEXDoc.INIT;
                    TempEXDoc.TRANSFERFIELDS(PostedExDoc);
                    TempEXDoc.ID := PostedExDoc2."Web ID";
                    TempEXDoc."Temp Company Name" := CompName;
                    TempEXDoc.INSERT;
                  END;
                END;
              END
              ELSE BEGIN
                PostedExDoc.SETRANGE(ID,PostedExDocLineApp."Document ID");
                IF PostedExDoc.FINDFIRST THEN BEGIN
                  TempEXDoc.INIT;
                  TempEXDoc.TRANSFERFIELDS(PostedExDoc);
                  TempEXDoc.ID := PostedExDoc2."Web ID";
                  TempEXDoc."Temp Company Name" := CompName;
                  TempEXDoc.INSERT;
                END;
              END;
            END;
          UNTIL PostedExDocLineApp.NEXT = 0;
      END
      ELSE BEGIN
        // only header/line filters if any
        IF DimFilterExist THEN BEGIN
          IF TempExDocLineDim[DimRecNo].FINDSET THEN BEGIN
            REPEAT
              IF TempExDocLineDim[DimRecNo]."Document Type" <= 5 THEN BEGIN
                ExDoc2.GET(TempExDocLineDim[DimRecNo]."Document ID");
                TempID := ExDoc2."Web ID";
              END
              ELSE BEGIN
                PostedExDoc.GET(TempExDocLineDim[DimRecNo]."Document ID");
                TempID := PostedExDoc."Web ID";
              END;

              IF NOT TempEXDoc.GET(TempID) THEN BEGIN
                ExDoc.SETRANGE(ID,TempExDocLineDim[DimRecNo]."Document ID");
                IF ExDoc.FINDFIRST THEN BEGIN
                  TempEXDoc.INIT;
                  TempEXDoc.TRANSFERFIELDS(ExDoc);
                  TempEXDoc.ID := TempID;
                  TempEXDoc."Temp Company Name" := CompName;
                  TempEXDoc.INSERT;
                END
                ELSE BEGIN
                  PostedExDoc.SETRANGE(ID,TempExDocLineDim[DimRecNo]."Document ID");
                  IF PostedExDoc.FINDFIRST THEN BEGIN
                    TempEXDoc.INIT;
                    TempEXDoc.TRANSFERFIELDS(PostedExDoc);
                    TempEXDoc.ID := TempID;
                    TempEXDoc."Temp Company Name" := CompName;
                    TempEXDoc.INSERT;
                  END;
                END;
              END;
            UNTIL TempExDocLineDim[DimRecNo].NEXT = 0;
          END;
        END
        ELSE BEGIN
          // only header filters
          IF ExDoc.FINDSET THEN
            REPEAT
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(ExDoc);
              TempEXDoc.ID := ExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            UNTIL ExDoc.NEXT = 0;

          IF PostedExDoc.FINDSET THEN
            REPEAT
              TempEXDoc.INIT;
              TempEXDoc.TRANSFERFIELDS(PostedExDoc);
              TempEXDoc.ID := PostedExDoc."Web ID";
              TempEXDoc."Temp Company Name" := CompName;
              TempEXDoc.INSERT;
            UNTIL PostedExDoc.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetUserGroupFilter@1100285000(CompName@1100285003 : Text[30];InUserID@1100285000 : Code[50]) : Text[1024];
    VAR
      _exUserGroup@1100285001 : Record 12013606;
      _exUserGroupLine@1100285002 : Record 12013607;
      _retString@1100285004 : Text[250];
    BEGIN
      _exUserGroupLine.RESET;
      _exUserGroupLine.CHANGECOMPANY(CompName);

      _exUserGroupLine.SETCURRENTKEY("User ID",Code);
      _exUserGroupLine.SETRANGE("User ID",InUserID);
      _exUserGroupLine.SETFILTER("Starting Date",'..%1',WORKDATE);
      _exUserGroupLine.SETFILTER("Ending Date",'''''|%1..',WORKDATE);
      IF _exUserGroupLine.FINDSET THEN BEGIN
        _retString := _exUserGroupLine.Code;
        IF _exUserGroupLine.NEXT = 1 THEN
          REPEAT
            _retString := _retString +'|' +_exUserGroupLine.Code;
          UNTIL _exUserGroupLine.NEXT = 0;
      END;

      EXIT(_retString);
    END;

    PROCEDURE GetColumnValues@1100285021(_bigTextIn@1100285000 : BigText;VAR _bigTextOut@1100285001 : BigText);
    VAR
      TempExColumn@1100285006 : TEMPORARY Record 12013661;
      GLAcc@1100285040 : Record 15;
      FA@1100285039 : Record 5600;
      Item@1100285038 : Record 27;
      ItemCharge@1100285037 : Record 5800;
      Job@1100285036 : Record 11072003;
      JobTask@1100285035 : Record 11072600;
      DimVal@1100285034 : Record 349;
      ServiceHeader@1100285033 : Record 5900;
      ServInvLine@1100285032 : Record 5993;
      Location@1100285031 : Record 14;
      UoM@1100285029 : Record 204;
      Cust@1100285028 : Record 18;
      EXInvCode@1100285026 : Record 12013597;
      ExColumn@1100285012 : Record 12013661;
      TempData@1100285041 : TEMPORARY Record 12013609;
      WebCompID@1100285045 : Record 12013630;
      Exflow@1100285022 : Codeunit 12013601;
      ExFlowSEMgt@1100285011 : Codeunit 12013598;
      _i@1100285002 : Integer;
      _j@1100285005 : Integer;
      _k@1100285008 : Integer;
      TempID@1100285044 : BigInteger;
      _colID@1100285003 : BigInteger;
      _colID2@1100285007 : BigInteger;
      _action@1100285004 : Text[250];
      _range@1100285009 : Text[1024];
      _subset@1100285010 : Text[1024];
      xmlDoc@1100285020 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlNodeList@1100285018 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNodeList2@1100285017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNodeList3@1100285016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNode@1100285015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode2@1100285014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode3@1100285013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Writer@1100285043 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextWriter";
      strWriter@1100285042 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringWriter";
    BEGIN
      xmlDoc := xmlDoc.XmlDocument;
      xmlDoc.LoadXml(_bigTextIn);

      xmlNode := xmlDoc.SelectSingleNode('GetColumnValues'); // case sensitive
      xmlNodeList := xmlNode.ChildNodes;
      _colID := -1;

      GetWebComp(WebCompID,COMPANYNAME);

      FOR _i := 0 TO xmlNodeList.Count -1 DO BEGIN
        xmlNode := xmlNodeList.Item(_i);
        CASE LOWERCASE(xmlNode.Name) OF
          'columnid': EVALUATE(_colID,xmlNode.InnerText);
          'action': _action := xmlNode.InnerText;
          'columnvalues':
            BEGIN
              xmlNodeList2 := xmlNode.ChildNodes;
              FOR _j := 0 TO xmlNodeList2.Count -1 DO BEGIN
                xmlNode2 := xmlNodeList2.Item(_j);
                xmlNodeList3 := xmlNode2.ChildNodes;
                FOR _k := 0 TO xmlNodeList3.Count -1 DO BEGIN
                  xmlNode3 := xmlNodeList3.Item(_k);
                  CASE LOWERCASE(xmlNode3.Name) OF
                    'columnid':
                      IF EVALUATE(_colID2,xmlNode3.InnerText) THEN
                        IF NOT TempExColumn.GET(_colID2-WebCompID."Web Company ID") THEN BEGIN
                          // save related info in memory for ev. later use (get actual record first when/if needed)
                          TempExColumn.ID := _colID2 - WebCompID."Web Company ID";
                          TempExColumn.INSERT;
                        END;
                    'value':
                      BEGIN
                        TempExColumn.Code := xmlNode3.InnerText;
                        TempExColumn.MODIFY;
                      END;
                  END;
                END;
              END;
            END;
          'range': _range := xmlNode.InnerText;
          'subset': _subset := xmlNode.InnerText;
        END;
      END;

      _colID := _colID - WebCompID."Web Company ID";

      TempData.RESET;
      TempData.DELETEALL;

      ExColumn.RESET;
      ExColumn.SETRANGE(ID,_colID);
      IF ExColumn.FINDFIRST THEN BEGIN
        CASE UPPERCASE(ExColumn.Source) OF
          // from [xf_GetColumnValues] SP
          'XF_AUTOFILL':;
          'G_LACCOUNT','GLB_G_LACCOUNT':
            WITH GLAcc DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              SETRANGE(Blocked,FALSE);
              SETRANGE("Account Type",GLAcc."Account Type"::Posting);
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                TempData.Description := Name;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          'FIXEDASSET','GLB_FIXEDASSET':
            WITH FA DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              SETRANGE(Blocked,FALSE);
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          'ITEM','GLB_ITEM':
            WITH Item DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              SETRANGE(Blocked,FALSE);
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          'CHARGE','GLB_CHARGE':
            WITH ItemCharge DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          'JOB','GLB_JOB':
            WITH Job DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              SETRANGE(Blocked,Blocked::" ");
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          'JOBTASK','GLB_JOBTASK':
            WITH JobTask DO BEGIN
              _colID2 := Exflow.GetColumnID('JOB');
              TempExColumn.RESET;
              TempExColumn.SETRANGE(ID,_colID2);

              RESET;
              IF TempExColumn.FINDFIRST THEN
                SETRANGE("Job No.",TempExColumn.Code);
              SETFILTER("Job Task No.",'<>%1','');
              SETRANGE("Job Task Type","Job Task Type"::Posting);
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "Job Task No.";
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          'PERCODE','GLB_PERCODE':
            BEGIN
              ExFlowSEMgt.GetPerCodes(TempData,TempID,COMPANYNAME);
            END;
          '1095_EXPENCETYPE':
            BEGIN
              // uses table "SPI Imp_ Expence Type"
            END;
          '1014_SERVICEORDERNO':
            WITH ServiceHeader DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          '1014_SERVICEDESCRIPTION':
            WITH ServInvLine DO BEGIN
              RESET;
              SETFILTER(Description,'<>%1','');
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := COPYSTR(Description,1,20);
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          '1014_LOCATION':
            WITH Location DO BEGIN
              RESET;
              SETFILTER(Code,'<>%1','');
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := Code;
                TempData.Description := Name;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          '1014_RCPT':;
          '1128_SUB-ITEM':;
          '1128_PROJECT':;
          'UOM':
            WITH UoM DO BEGIN
              RESET;
              SETFILTER(Code,'<>%1','');
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := Code;
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          'CUSTOMER','GLB_CUSTOMER':
            WITH Cust DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                TempData.Description := Name;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          'INV_CODE':
            WITH EXInvCode DO BEGIN
              RESET;
              SETFILTER("Invoicing Code",'<>%1','');
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "Invoicing Code";
                TempData.Description := Description;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          '1128_ITEM','1128_GLB_ITEM':
            WITH Item DO BEGIN
              RESET;
              SETFILTER("No.",'<>%1','');
              SETRANGE(Blocked,FALSE);
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := "No.";
                IF "Description 2" = '' THEN
                  TempData.Description := Description
                ELSE
                  TempData.Description := COPYSTR(Description +' - ' +"Description 2",1,50);
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
        ELSE
          IF COPYSTR(ExColumn.Source,1,3) = 'DIM' THEN BEGIN
            WITH DimVal DO BEGIN
              RESET;
              SETFILTER(Code,'<>%1','');
              SETRANGE("Dimension Value Type",DimVal."Dimension Value Type"::Standard);
              SETRANGE(Blocked,FALSE);
              SETRANGE("Dimension Code",ExColumn.Code);
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := Code;
                TempData.Description := Name;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          END;
          IF COPYSTR(ExColumn.Source,1,7) = 'GLB_DIM' THEN BEGIN
            WITH DimVal DO BEGIN
              RESET;
              SETFILTER(Code,'<>%1','');
              SETRANGE(Blocked,FALSE);
              SETRANGE("Dimension Code",ExColumn.Code);
              IF FINDSET THEN REPEAT
                TempData.ID := TempID;
                TempData."No." := Code;
                TempData.Description := Name;
                TempData.INSERT;
                TempID := TempID + 1;
              UNTIL NEXT = 0;
            END;
          END;
        END;
      END
      ELSE BEGIN
        ERROR(STRSUBSTNO(Error002,_colID));
      END;

      TempData.RESET;
      IF _range <> '' THEN
        TempData.SETFILTER("No.",_range);
      IF _subset <> '' THEN
        TempData.SETFILTER("No.",_subset);

      _colID := _colID + WebCompID."Web Company ID";

      strWriter := strWriter.StringWriter;
      Writer := Writer.XmlTextWriter(strWriter);
      Writer.WriteStartElement('Values');
      IF TempData.FINDSET THEN BEGIN
        REPEAT
          Writer.WriteStartElement('Value');
          WITH TempData DO BEGIN
            Writer.WriteElementString('ColumnID',FORMAT(_colID,0,9));
            Writer.WriteElementString('Value',"No.");
            Writer.WriteElementString('Description',Description);
          END;
          Writer.WriteEndElement;
        UNTIL TempData.NEXT = 0;
      END ELSE BEGIN
        Writer.WriteStartElement('Value');
        Writer.WriteElementString('ColumnID',FORMAT(_colID,0,9));
        Writer.WriteElementString('Value','');
        Writer.WriteElementString('Description','');
        Writer.WriteEndElement;
      END;
      Writer.WriteEndElement;

      CLEAR(_bigTextOut);
      _bigTextOut.ADDTEXT(strWriter.ToString);

      IF TestMode(WebCompID) THEN BEGIN
        xmlDoc := xmlDoc.XmlDocument();
        xmlDoc.LoadXml(strWriter.ToString);
        xmlDoc.Save('c:\Temp\ColumnValues.xml');
      END;
    END;

    LOCAL PROCEDURE XMLFORMAT@1100285002(_text@1100285000 : Text[250]) : Text[250];
    BEGIN
      EXIT(FORMAT(DELCHR(_text,'=',' .,%&/'),0,9));
    END;

    LOCAL PROCEDURE XmlCreateDocHeader@1100285012(VAR TempExDoc@1100285000 : TEMPORARY Record 12013608;VAR xmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLMgt@1100285001 : Codeunit 6224;
    BEGIN
      // used for singe node results such as searchDocument, get Inbox etc.
      WITH TempExDoc DO BEGIN
        XMLMgt.AddNode(xmlNode,'ID', FORMAT(ID,0,9));
        XMLMgt.AddNode(xmlNode,'CompName',"Temp Company Name");
        XMLMgt.AddNode(xmlNode,'DocType',FORMAT("Document Type",0,9));
        XMLMgt.AddNode(xmlNode,'DocNo',"Document No.");
        IF "Vendor No." <> '' THEN
          XMLMgt.AddNode(xmlNode,'VendorNo',"Vendor No.");
        XMLMgt.AddNode(xmlNode,'AdminComment',"Admin Comment");
        IF "Create Date" <> 0D THEN
          XMLMgt.AddNode(xmlNode,'CreateDate',FORMAT("Create Date",0,9));
        IF "Due Date" <> 0D THEN
          XMLMgt.AddNode(xmlNode,'DueDate',FORMAT("Due Date",0,9));
        IF "Posting Date" <> 0D THEN
          XMLMgt.AddNode(xmlNode,'PostingDate',FORMAT("Posting Date",0,9));
        IF "Document Date" <> 0D THEN
          XMLMgt.AddNode(xmlNode,'DocDate',FORMAT("Document Date",0,9));
        XMLMgt.AddNode(xmlNode,'Status',FORMAT(Status,0,9));
        XMLMgt.AddNode(xmlNode,'ImageName',"Image Name");
        XMLMgt.AddNode(xmlNode,'PostingNo',"Predefind Posting No.");
        XMLMgt.AddNode(xmlNode,'CurrencyCode',"Currency Code");
        XMLMgt.AddNode(xmlNode,'VendorName',"Vendor Name");
        CASE "Document Type" OF
          "Document Type"::"Credit Memo",
          "Document Type"::"Return Order",
          7: // posted credit memo
            XMLMgt.AddNode(xmlNode,'Amount', '-'+ FORMAT(ABS("Gross Amount"),0,DecFormat));
        ELSE
          XMLMgt.AddNode(xmlNode,'Amount', FORMAT(ABS("Gross Amount"),0,DecFormat));
        END;
      END;
    END;

    PROCEDURE CheckXMLDate@1100285099(_dateText@1100285000 : Text[50]) Text : Text[50];
    BEGIN
      IF(STRPOS(_dateText,'T') > 0) THEN
        _dateText := COPYSTR(_dateText,1,STRPOS(_dateText,'T') -1)
      ELSE
        IF(STRPOS(_dateText,'Z') > 0) THEN
          _dateText := COPYSTR(_dateText,1,STRPOS(_dateText,'Z') -1);
      EXIT(_dateText);
    END;

    LOCAL PROCEDURE CreateXMLDoc@1100285020(DSName@1100285000 : Text[50];VAR xmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR xmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLMgt@1100285001 : Codeunit 6224;
    BEGIN
      xmlDoc := xmlDoc.XmlDocument();
      xmlNode := xmlDoc.CreateElement(DSName);
      XMLMgt.AddAttribute(xmlNode,'xmlns', 'http://tempuri.org/'+DSName+'.xsd');
      xmlNode := xmlDoc.AppendChild(xmlNode);
    END;

    PROCEDURE GetWebComp@1100285004(VAR WebCompID@1100285001 : Record 12013630;CompName@1100285000 : Text[30]);
    BEGIN
      IF CompName = '' THEN
        ERROR(Error001);

      IF NOT WebCompID.GET(CompName) THEN BEGIN
        WebCompID.INIT;
        WebCompID."Company Name" := CompName;
        WebCompID.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TestMode@1100285005(_WebCompID@1100285001 : Record 12013630) : Boolean;
    VAR
      WebServReqMgt@1100285000 : Codeunit 12013629;
    BEGIN
      EXIT(WebServReqMgt.TestMode(_WebCompID));
    END;

    BEGIN
    END.
  }
}

