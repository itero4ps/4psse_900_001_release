OBJECT Codeunit 12013639 ExFlow Company Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF400007;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100285009 : TextConst 'ENU=Sort Order for field %1 cannot be zero and it cannot have the same value as any other column!';
      Text002@1100285008 : TextConst 'ENU=Do you want to apply the setup?';
      Text003@1100285007 : TextConst 'ENU=Setup applied.';
      Text004@1100285006 : TextConst 'ENU=Operation aborted.';
      Text005@1100285005 : TextConst 'ENU=Do you want to update the web used vendor names?';
      Text006@1100285004 : TextConst 'ENU=Update completed.';
      CodingRuleName0@1100285003 : TextConst 'ENU=Default Validation';
      CodingRuleName1@1100285002 : TextConst 'ENU=Default Filter';
      CodingRuleName2@1100285001 : TextConst 'ENU=Default Subset';
      CodingRuleName3@1100285000 : TextConst 'ENU=Default Deny';

    PROCEDURE CreateDefaultValues@1100285000(VAR TempExFlowInitComp@1100285000 : TEMPORARY Record 12013605);
    BEGIN
      IF GUIALLOWED THEN
        IF NOT CONFIRM(Text002,FALSE) THEN
          ERROR(Text004);

      CreateExColumns(TempExFlowInitComp);
      CreateLineTypes(TempExFlowInitComp);

      IF TempExFlowInitComp."Create Default Coding Rules" THEN
        CreateCodingRules;
      IF TempExFlowInitComp."Create Default ExFlow Setup" THEN
        CreateExFlowSetup(TempExFlowInitComp);
      IF TempExFlowInitComp."Create Default Security Roles" THEN
        CreateStandardSecurityRole;
      CreateExUserLevelPerm;
      CreateEmailJobs;

      IF GUIALLOWED THEN
        MESSAGE(Text003);
    END;

    PROCEDURE CreateExColumns@1100285001(VAR TempExFlowInitComp@1100285005 : TEMPORARY Record 12013605);
    VAR
      ExColumn@1100285000 : Record 12013661;
      Object@1100285002 : Record 2000000001;
      GLSetup@1100285003 : Record 98;
      NextID@1100285001 : Integer;
      DividerChar@1100285004 : Char;
    BEGIN
      WITH TempExFlowInitComp DO BEGIN
        DividerChar := 8212;

        ExColumn.RESET;
        IF ExColumn.FINDFIRST THEN
          EXIT;

        ExColumn.DELETEALL;

        ExColumn.RESET;
        IF ExColumn.FINDLAST THEN
          NextID := ExColumn.ID + 1
        ELSE
          NextID := 1;

        IF "Line Type G/L Account" THEN
          CreateColumn(NextID,'G_LACCOUNT','G_LACCOUNT','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','LineType=1','',
                       FALSE,TRUE,'',0);
        IF "Line Type Item" THEN
          CreateColumn(NextID,'ITEM','ITEM','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','LineType=2','',
                       FALSE,TRUE,'',0);
        IF "Line Type Fixed Asset" THEN
          CreateColumn(NextID,'FIXEDASSET','FIXEDASSET','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','LineType=4','',
                       FALSE,TRUE,'',0);
        IF "Line Type Item Charge" THEN
          CreateColumn(NextID,'CHARGE','CHARGE','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','LineType=5','',
                       FALSE,TRUE,'',0);
        IF "Use Jobs" THEN
          CreateColumn(NextID,'JOB','JOB','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                       FALSE,TRUE,'',"Sort Order Jobs");

        IF "Use Periodic Code (SE)" THEN BEGIN
          Object.RESET;
          Object.SETRANGE(Type, Object.Type::Table);
          Object.SETRANGE(ID, 11205);
          IF Object.FINDFIRST THEN BEGIN
            CreateColumn(NextID,'PERCODE','PERCODE','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,'',"Sort Order Periodic");
            CreateColumn(NextID,'PERDATE','PERDATE','{0:d}','','System.DateTime',FALSE,
                         FALSE,'',"Sort Order Periodic" + 1);
          END;
        END;

        GLSetup.GET;

        TestSortOrderValues(TempExFlowInitComp);

        IF "Use Shortcut Dimension 1" THEN
          IF GLSetup."Shortcut Dimension 1 Code" <> '' THEN
            CreateColumn(NextID,GLSetup."Shortcut Dimension 1 Code",'DIM1','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 1 Code","Sort Order 1");
        IF "Use Shortcut Dimension 2" THEN
          IF GLSetup."Shortcut Dimension 2 Code" <> '' THEN
            CreateColumn(NextID,GLSetup."Shortcut Dimension 2 Code",'DIM2','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 2 Code","Sort Order 2");
        IF "Use Shortcut Dimension 3" THEN
          IF GLSetup."Shortcut Dimension 3 Code" <> '' THEN
            CreateColumn(NextID,GLSetup."Shortcut Dimension 3 Code",'DIM3','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 3 Code","Sort Order 3");
        IF "Use Shortcut Dimension 4" THEN
          IF GLSetup."Shortcut Dimension 4 Code" <> '' THEN
            CreateColumn(NextID,GLSetup."Shortcut Dimension 4 Code",'DIM4','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 4 Code","Sort Order 4");
        IF "Use Shortcut Dimension 5" THEN
          IF GLSetup."Shortcut Dimension 5 Code" <> '' THEN
            CreateColumn(NextID,GLSetup."Shortcut Dimension 5 Code",'DIM5','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 5 Code","Sort Order 5");
        IF "Use Shortcut Dimension 6" THEN
          IF GLSetup."Shortcut Dimension 6 Code" <> '' THEN
            CreateColumn(NextID,GLSetup."Shortcut Dimension 6 Code",'DIM6','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 6 Code","Sort Order 6");
        IF "Use Shortcut Dimension 7" THEN
          IF GLSetup."Shortcut Dimension 7 Code" <> '' THEN
            CreateColumn(NextID,GLSetup."Shortcut Dimension 7 Code",'DIM7','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 7 Code","Sort Order 7");
        IF "Use Shortcut Dimension 8" THEN
          IF GLSetup."Shortcut Dimension 8 Code" <> '' THEN
            CreateColumn(NextID,GLSetup."Shortcut Dimension 8 Code",'DIM8','{0}'+SYSTEM.FORMAT(DividerChar)+'{1}','','',
                         FALSE,TRUE,GLSetup."Shortcut Dimension 8 Code","Sort Order 8");
      END;
    END;

    LOCAL PROCEDURE TestSortOrderValues@1100285007(VAR TempExFlowInitComp@1100285001 : TEMPORARY Record 12013605);
    VAR
      TempInteger@1100285000 : TEMPORARY Record 2000000026;
    BEGIN
      WITH TempExFlowInitComp DO BEGIN
        IF "Use Shortcut Dimension 1" THEN BEGIN
          TempInteger.Number := "Sort Order 1";
          IF (TempInteger.Number = 0) OR (NOT TempInteger.INSERT) THEN
            ERROR(Text001);
        END;
        IF "Use Shortcut Dimension 2" THEN BEGIN
          TempInteger.Number := "Sort Order 2";
          IF (TempInteger.Number = 0) OR (NOT TempInteger.INSERT) THEN
            ERROR(Text001);
        END;
        IF "Use Shortcut Dimension 3" THEN BEGIN
          TempInteger.Number := "Sort Order 3";
          IF (TempInteger.Number = 0) OR (NOT TempInteger.INSERT) THEN
            ERROR(Text001);
        END;
        IF "Use Shortcut Dimension 4" THEN BEGIN
          TempInteger.Number := "Sort Order 4";
          IF (TempInteger.Number = 0) OR (NOT TempInteger.INSERT) THEN
            ERROR(Text001);
        END;
        IF "Use Shortcut Dimension 5" THEN BEGIN
          TempInteger.Number := "Sort Order 5";
          IF (TempInteger.Number = 0) OR (NOT TempInteger.INSERT) THEN
            ERROR(Text001);
        END;
        IF "Use Shortcut Dimension 6" THEN BEGIN
          TempInteger.Number := "Sort Order 6";
          IF (TempInteger.Number = 0) OR (NOT TempInteger.INSERT) THEN
            ERROR(Text001);
        END;
        IF "Use Shortcut Dimension 7" THEN BEGIN
          TempInteger.Number := "Sort Order 7";
          IF (TempInteger.Number = 0) OR (NOT TempInteger.INSERT) THEN
            ERROR(Text001);
        END;
        IF "Use Shortcut Dimension 8" THEN BEGIN
          TempInteger.Number := "Sort Order 8";
          IF (TempInteger.Number = 0) OR (NOT TempInteger.INSERT) THEN
            ERROR(Text001);
        END;
      END;
    END;

    PROCEDURE CreateLineTypes@1100285002(VAR TempExFlowInitComp@1100285001 : TEMPORARY Record 12013605);
    VAR
      ExLineType@1100285000 : Record 12013642;
    BEGIN
      WITH TempExFlowInitComp DO BEGIN
        ExLineType.RESET;
        IF ExLineType.FINDFIRST THEN
          EXIT;

        ExLineType.DELETEALL;

        ExLineType.INIT;
        ExLineType.Code := 1;
        ExLineType."Line Type" := 'G_LACCOUNT';
        IF "Line Type G/L Account" THEN
          ExLineType."Document Display Expr" := 'TRUE'
        ELSE
          ExLineType."Document Display Expr" := 'FALSE';
        ExLineType."Line Display Expr" := 'Linetype>0';
        ExLineType.Value := 1;
        ExLineType.INSERT;

        ExLineType.INIT;
        ExLineType.Code := 2;
        ExLineType."Line Type" := 'ITEM';
        IF "Line Type Item" THEN
          ExLineType."Document Display Expr" := 'TRUE'
        ELSE
          ExLineType."Document Display Expr" := 'FALSE';
        ExLineType.Value := 2;
        ExLineType.INSERT;

        ExLineType.INIT;
        ExLineType.Code := 3;
        ExLineType."Line Type" := 'FIXEDASSET';
        IF "Line Type Fixed Asset" THEN
          ExLineType."Document Display Expr" := 'TRUE'
        ELSE
          ExLineType."Document Display Expr" := 'FALSE';
        ExLineType.Value := 4;
        ExLineType.INSERT;

        ExLineType.INIT;
        ExLineType.Code := 4;
        ExLineType."Line Type" := 'CHARGE';
        IF "Line Type Item Charge" THEN
          ExLineType."Document Display Expr" := 'TRUE'
        ELSE
          ExLineType."Document Display Expr" := 'FALSE';
        ExLineType.Value := 5;
        ExLineType.INSERT;
      END;
    END;

    PROCEDURE CreateCodingRules@1100285003();
    VAR
      ExCodingRule@1100285001 : Record 12013660;
      ExCodingRuleLine@1100285000 : Record 12013663;
      NextID@1100285002 : Integer;
    BEGIN
      ExCodingRule.RESET;
      IF ExCodingRule.FINDFIRST THEN
        EXIT;

      ExCodingRule.DELETEALL;

      ExCodingRuleLine.RESET;
      ExCodingRuleLine.DELETEALL;

      ExCodingRule.RESET;
      IF ExCodingRule.FINDLAST THEN
        NextID := ExCodingRule.ID + 1
      ELSE
        NextID := 1;

      CreateCodingRule(CodingRuleName0,0,NextID);
      CreateCodingRule(CodingRuleName1,1,NextID);
      CreateCodingRule(CodingRuleName2,2,NextID);
      CreateCodingRule(CodingRuleName3,3,NextID);
    END;

    LOCAL PROCEDURE CreateColumn@1100285004(VAR NextID@1100285000 : Integer;Code@1100285002 : Text[50];Source@1100285003 : Text[50];Format@1100285004 : Text[250];LineDispExpr@1100285008 : Text[250];DataType@1100285009 : Text[30];IsFreeText@1100285010 : Boolean;UseAutoComp@1100285005 : Boolean;DimCode@1100285011 : Code[20];SortOrder@1100285006 : Integer);
    VAR
      ExColumn@1100285007 : Record 12013661;
    BEGIN
      ExColumn.INIT;
      ExColumn.ID := NextID;
      NextID := NextID + 1;

      ExColumn.Code := Code;
      ExColumn.Source := Source;
      ExColumn.Format := Format;
      ExColumn."Line Display Expr" := LineDispExpr;
      ExColumn."Use Auto Completion" := UseAutoComp;
      ExColumn."Sort Order" := SortOrder;
      ExColumn."Data Type" := DataType;
      ExColumn."Is Free Text" := IsFreeText;
      ExColumn."Dimension Code" := DimCode;
      ExColumn.INSERT;
    END;

    LOCAL PROCEDURE CreateCodingRule@1100285005(Name@1100285002 : Text[30];Type@1100285001 : 'IsValidation,IsFilter,IsSubset,IsDeny';VAR NextID@1100285006 : Integer);
    VAR
      ExCodingRule@1100285003 : Record 12013660;
      ExCodingRuleLine@1100285004 : Record 12013663;
      ExFlow@1100285005 : Codeunit 12013601;
    BEGIN
      ExCodingRule.INIT;
      ExCodingRule.ID := NextID;
      NextID := NextID + 1;
      ExCodingRule.Name := Name;
      CASE Type OF
        Type::IsValidation: ExCodingRule."Is Validation" := TRUE;
        Type::IsFilter: ExCodingRule."Is Filter" := TRUE;
        Type::IsSubset: ExCodingRule."Is Subset" := TRUE;
        Type::IsDeny: ExCodingRule.IsDeny := TRUE;
      END;
      ExCodingRule.Active := TRUE;
      ExCodingRule.INSERT;

      ExFlow.RuleLines(ExCodingRule);

      ExCodingRuleLine.RESET;
      ExCodingRuleLine.SETRANGE(ID, ExCodingRule.ID);
      IF ExCodingRuleLine.FINDSET THEN
        REPEAT
          IF Type = Type::IsDeny THEN BEGIN
            IF ExCodingRuleLine."Column Code" IN ['G_LACCOUNT','ITEM','CHARGE','FIXEDASSET'] THEN
              ExCodingRuleLine.VALIDATE(Empty, TRUE);
          END
          ELSE BEGIN
            ExCodingRuleLine.VALIDATE(All, TRUE);
            IF Type <> Type::IsSubset THEN
              ExCodingRuleLine.VALIDATE(Empty, TRUE);
          END;

          ExCodingRuleLine.MODIFY;
        UNTIL ExCodingRuleLine.NEXT = 0;
    END;

    PROCEDURE CreateExFlowSetup@1100285011(VAR TempExFlowInitComp@1100285001 : TEMPORARY Record 12013605);
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
    BEGIN
      WITH TempExFlowInitComp DO BEGIN
        IF ExFlowSetup.GET THEN
          ExFlowSetup.DELETE;

        ExFlowSetup.INIT;
        ExFlowSetup."Path to New Invoices" := "Path to New Invoices";
        ExFlowSetup."Path to Used Invoices" := "Path to Used Invoices";
        ExFlowSetup."Path to New OCR-files" := "Path to New OCR-files";
        ExFlowSetup."Path to Attached Files" := "Path to Attached Files";
        ExFlowSetup."Path to connected Att. Files" := "Path to connected Att. Files";
        ExFlowSetup."Propose Line" := TRUE;
        ExFlowSetup."Blank Currency if equal to LCY" := TRUE;
        ExFlowSetup."Block Amt change Approved Line" := TRUE;
        ExFlowSetup."No. Of Days (Due Date Calc)" := 10;
        ExFlowSetup."Check Gross Amount" := TRUE;
        ExFlowSetup."Max. Diff. Gross Amount" := 1;
        ExFlowSetup."Max. Variation on Net Amount" := 1;
        ExFlowSetup."Check Final Approval" := TRUE;
        ExFlowSetup."Max. Variation on VAT Amount" := 0;
        ExFlowSetup."Check Posting Setup" := TRUE;
        ExFlowSetup."Check Dimensions" := TRUE;
        ExFlowSetup."Check Accounting Periods" := TRUE;
        ExFlowSetup."Check if no Approvers" := TRUE;
        ExFlowSetup."Check Unit Cost" := TRUE;
        ExFlowSetup."Test Amounts" := 2;
        ExFlowSetup."Max Misc. Charges (LCY)" := 100;
        ExFlowSetup."Not Posting Predefined Account" := TRUE;
        ExFlowSetup."Order Applies-to" := 1;
        ExFlowSetup."In LCY" := 10;
        ExFlowSetup."In Discount" := 10;
        ExFlowSetup."Activate Not Over" := TRUE;
        ExFlowSetup."Do Not Search Blocked Vendors" := TRUE;
        ExFlowSetup."Default Import Type" := 2;
        ExFlowSetup."Activate VendorID sync." := TRUE;
        ExFlowSetup."Force Imported Order No. Match" := TRUE;
        ExFlowSetup."Receipt No. Mand. Item" := TRUE;
        ExFlowSetup."Check If Lines Exists" := TRUE;
        ExFlowSetup."Due Date Warning when Older" := 90;
        ExFlowSetup.INSERT;

        CreateVendorIDFields;
      END;
    END;

    PROCEDURE CreateVendorIDFields@1100285012();
    VAR
      Field@1100285001 : Record 2000000041;
      RSSortOrder@1100285000 : Integer;
    BEGIN
      CreateVendorIDField(DATABASE::Vendor,1,RSSortOrder); // No.
      CreateVendorIDField(DATABASE::Vendor,86,RSSortOrder); // VAT Registration No.

      IF Field.GET(DATABASE::Vendor,11200) THEN
        CreateVendorIDField(DATABASE::Vendor,11200,RSSortOrder); // SE version Plus Giro

      IF Field.GET(DATABASE::Vendor,11207) THEN
        CreateVendorIDField(DATABASE::Vendor,11207,RSSortOrder); // SE version Bank Giro No

      IF Field.GET(DATABASE::Vendor,11209) THEN
        CreateVendorIDField(DATABASE::Vendor,11209,RSSortOrder); // SE version Bank account no

      IF Field.GET(DATABASE::Vendor,11620) THEN
        CreateVendorIDField(DATABASE::Vendor,11620,RSSortOrder); // AUNZ ABN

      IF Field.GET(DATABASE::Vendor,15000002) THEN
        CreateVendorIDField(DATABASE::Vendor,15000002,RSSortOrder); // NO Version Recipient Bank Account No

      IF Field.GET(DATABASE::"Vendor Bank Account",12047958) THEN
        CreateVendorIDField(DATABASE::"Vendor Bank Account",12047958,RSSortOrder); // SE version Plus Giro

      IF Field.GET(DATABASE::"Vendor Bank Account",12047964) THEN
        CreateVendorIDField(DATABASE::"Vendor Bank Account",12047964,RSSortOrder); // SE version Bank Giro

      IF Field.GET(DATABASE::"Vendor Bank Account",12047967) THEN
        CreateVendorIDField(DATABASE::"Vendor Bank Account",12047967,RSSortOrder); // SE version Account
    END;

    PROCEDURE CreateVendorIDField@1100285015(TableNo@1100285003 : Integer;FieldNo@1100285002 : Integer;VAR RSSortOrder@1100285001 : Integer);
    VAR
      VendorIDField@1100285000 : Record 12013668;
    BEGIN
      VendorIDField.INIT;
      VendorIDField."Table No." := TableNo;
      VendorIDField."Field No." := FieldNo;
      VendorIDField."RS Export order" := RSSortOrder;
      VendorIDField.INSERT;
      RSSortOrder := RSSortOrder + 1;
    END;

    LOCAL PROCEDURE CreateEmailJobs@5();
    VAR
      ExFlowEmail@1000 : Record 12013619;
    BEGIN
      IF NOT ExFlowEmail.GET(ExFlowEmail.Type::"Inbox Reminder") THEN BEGIN
        ExFlowEmail.INIT;
        ExFlowEmail.Type := ExFlowEmail.Type::"Inbox Reminder";
        ExFlowEmail.INSERT;
      END;
    END;

    PROCEDURE CreateStandardSecurityRole@1100285013();
    VAR
      UserRole@1100285000 : Record 2000000004;
      Object@1100285001 : Record 2000000001;
    BEGIN
      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-SUPER';
      UserRole.Name := 'Full access';
      IF UserRole.INSERT THEN;

      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-POWER';
      UserRole.Name := 'Some Setup (templ/user)';
      IF UserRole.INSERT THEN;

      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-USER';
      UserRole.Name := 'Import/Create/Change Documents';
      IF UserRole.INSERT THEN;

      UserRole.INIT;
      UserRole."Role ID" := 'EXFLOW-WEB';
      UserRole.Name := 'Web service access';
      IF UserRole.INSERT THEN;

      Object.RESET;
      Object.SETRANGE(Type, Object.Type::TableData);
      Object.SETFILTER(ID, '%1..%2|%3..%4', 12013587, 12013686, 12057070, 12057169);
      IF Object.FINDSET THEN
        REPEAT
          CreatePermissionEntry('EXFLOW-SUPER',Object.ID,1,1,1);
          CreatePermissionEntry('EXFLOW-POWER',Object.ID,1,1,1);
          CreatePermissionEntry('EXFLOW-USER',Object.ID,1,1,1);
        UNTIL Object.NEXT = 0;

      CreatePermissionEntry('EXFLOW-USER',12013597,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013598,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013600,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013601,0,0,0);
      CreatePermissionEntry('EXFLOW-USER',12013602,0,0,0);
      CreatePermissionEntry('EXFLOW-USER',12013613,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013616,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013619,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013620,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013621,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013633,0,0,0);
      CreatePermissionEntry('EXFLOW-USER',12013634,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013644,0,0,0);
      CreatePermissionEntry('EXFLOW-USER',12013653,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013654,0,0,0);
      CreatePermissionEntry('EXFLOW-USER',12013669,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013672,2,2,2);
      CreatePermissionEntry('EXFLOW-USER',12013684,2,2,2);

      CreatePermissionEntry('EXFLOW-POWER',12013597,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013600,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013613,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013616,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013619,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013620,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013621,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013634,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013672,2,2,2);
      CreatePermissionEntry('EXFLOW-POWER',12013684,2,2,2);

      // Web service access
      // Read access
      CreatePermissionEntry('EXFLOW-WEB',2000000006,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',98,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',79,0,0,0);
      IF Object.GET(Object.Type::TableData,11205) THEN
        CreatePermissionEntry('EXFLOW-WEB',11205,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',402,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',403,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',404,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5079,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',25,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',23,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',380,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',38,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',39,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',15,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5600,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',27,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5800,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',167,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',1001,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',204,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',18,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',349,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5900,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',5901,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',14,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',4,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',12013619,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',12013603,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',12013645,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',350,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',352,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',409,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',1002,0,0,0);
      // 2016
      CreatePermissionEntry('EXFLOW-WEB',1700,0,0,0);

      // Full access
      CreatePermissionEntry('EXFLOW-WEB',405,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',481,0,0,0);
      CreatePermissionEntry('EXFLOW-WEB',480,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013640,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013641,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013630,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013606,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013607,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013644,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013642,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013661,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013660,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013663,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013608,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013609,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013610,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013611,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013626,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013627,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013628,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013629,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013601,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013613,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12057071,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013616,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013600,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013597,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013643,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013631,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',12013634,1,1,1);
      CreatePermissionEntry('EXFLOW-WEB',99008535,1,1,1); // temp blob

      AddDefaultObjectTypes('EXFLOW-WEB');
    END;

    PROCEDURE CreatePermissionEntry@1100285014(_RoleID@1100285005 : Code[20];_ID@1100285004 : Integer;_Insert@1100285003 : Integer;_Modify@1100285002 : Integer;_Delete@1100285001 : Integer);
    VAR
      Permission@1100285000 : Record 2000000005;
      Object@1100285006 : Record 2000000001;
    BEGIN
      IF NOT Object.GET(Object.Type::Table,'',_ID) THEN
        EXIT;

      IF Permission.GET(_RoleID,Permission."Object Type"::"Table Data",_ID) THEN BEGIN
        Permission."Read Permission" := 1; // Yes
        Permission."Insert Permission" := _Insert;
        Permission."Modify Permission" := _Modify;
        Permission."Delete Permission" := _Delete;
        Permission.MODIFY;
      END
      ELSE BEGIN
        Permission.INIT;
        Permission."Role ID" := _RoleID;
        Permission."Object Type" := Permission."Object Type"::"Table Data";
        Permission."Object ID" := _ID;
        Permission."Read Permission" := 1; // Yes
        Permission."Insert Permission" := _Insert;
        Permission."Modify Permission" := _Modify;
        Permission."Delete Permission" := _Delete;
        Permission.INSERT;
      END;
    END;

    LOCAL PROCEDURE AddDefaultObjectTypes@1(_RoleID@1000 : Code[20]);
    VAR
      Permission@1001 : Record 2000000005;
    BEGIN
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::Table;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::Query;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::Codeunit;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::Report;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
      Permission.INIT;
      Permission."Role ID" := _RoleID;
      Permission."Object Type" := Permission."Object Type"::XMLport;
      Permission."Object ID" := 0;
      Permission."Execute Permission" := 1;
      IF Permission.INSERT THEN;
    END;

    PROCEDURE CreateExUserLevelPerm@1100285020();
    BEGIN
      InsertExUserLevelPerm(0,'UP_Allow_View_All');
      InsertExUserLevelPerm(0,'UP_Allow_Edit');
      InsertExUserLevelPerm(0,'UP_Allow_Split');
      InsertExUserLevelPerm(0,'UP_Allow_Approve');
      InsertExUserLevelPerm(0,'UP_Allow_Set_Replacer');
      InsertExUserLevelPerm(1,'UP_Allow_Edit');
      InsertExUserLevelPerm(1,'UP_Allow_Split');
      InsertExUserLevelPerm(1,'UP_Allow_Approve');
      InsertExUserLevelPerm(1,'UP_Allow_Set_Replacer');
      InsertExUserLevelPerm(2,'UP_Allow_Approve');
      InsertExUserLevelPerm(2,'UP_Allow_Set_Replacer');
      InsertExUserLevelPerm(0,'UP_Allow_Edit_Approvers');
      InsertExUserLevelPerm(1,'UP_Allow_Edit_Approvers');
      InsertExUserLevelPerm(0,'UP_Allow_Add_Multiple_Approvers');
      InsertExUserLevelPerm(0,'UP_Allow_Add_Approver');
      InsertExUserLevelPerm(1,'UP_Allow_Add_Approver');
      InsertExUserLevelPerm(0,'UP_Allow_FileAttach');
      InsertExUserLevelPerm(1,'UP_Allow_FileAttach');
      InsertExUserLevelPerm(0,'UP_Allow_Hold');
      InsertExUserLevelPerm(1,'UP_Allow_Hold');
      InsertExUserLevelPerm(0,'UP_Create_PurchaseRequest');
      InsertExUserLevelPerm(1,'UP_Create_PurchaseRequest');
      InsertExUserLevelPerm(2,'UP_Create_PurchaseRequest');
      InsertExUserLevelPerm(0,'UP_Allow_Change_Password');
      InsertExUserLevelPerm(1,'UP_Allow_Change_Password');
      InsertExUserLevelPerm(2,'UP_Allow_Change_Password');
      InsertExUserLevelPerm(0,'UP_Allow_Change_Location');
      InsertExUserLevelPerm(1,'UP_Allow_Change_Location');
      InsertExUserLevelPerm(2,'UP_Allow_Change_Location');
    END;

    LOCAL PROCEDURE InsertExUserLevelPerm@1100285019(Level@1100285000 : Integer;Perm@1100285001 : Text);
    VAR
      ExUserLevelPerm@1100285002 : Record 12013644;
    BEGIN
      ExUserLevelPerm.INIT;
      ExUserLevelPerm."User Level" := Level;
      ExUserLevelPerm.Permission := Perm;
      IF ExUserLevelPerm.INSERT THEN;
    END;

    PROCEDURE UpdateWebVendorNames@1100285018(HideDialog@1100285005 : Boolean);
    VAR
      ExDoc@1100285001 : Record 12013608;
      PostedExDoc@1100285002 : Record 12013626;
      Company@1100285003 : Record 2000000006;
      WebVendorNames@1100285000 : Record 12013631;
      TempWebVendorNames@1100285004 : TEMPORARY Record 12013631;
    BEGIN
      IF (NOT HideDialog) AND GUIALLOWED THEN
        IF NOT CONFIRM(Text005,FALSE) THEN
          EXIT;

      Company.RESET;
      IF NOT Company.FINDSET THEN
        EXIT;

      REPEAT
        ExDoc.RESET;
        PostedExDoc.RESET;
        ExDoc.CHANGECOMPANY(Company.Name);
        PostedExDoc.CHANGECOMPANY(Company.Name);

        IF ExDoc.FINDSET THEN
          REPEAT
            IF NOT TempWebVendorNames.GET(ExDoc."Vendor No.",Company.Name) THEN BEGIN
              TempWebVendorNames.INIT;
              TempWebVendorNames."Vendor No." := ExDoc."Vendor No.";
              TempWebVendorNames."Vendor Name" := ExDoc."Vendor Name";
              TempWebVendorNames."Company Name" := Company.Name;
              TempWebVendorNames.INSERT;
            END;
          UNTIL ExDoc.NEXT = 0;

        IF PostedExDoc.FINDSET THEN
          REPEAT
            IF NOT TempWebVendorNames.GET(PostedExDoc."Vendor No.",Company.Name) THEN BEGIN
              TempWebVendorNames.INIT;
              TempWebVendorNames."Vendor No." := PostedExDoc."Vendor No.";
              TempWebVendorNames."Vendor Name" := PostedExDoc."Vendor Name";
              TempWebVendorNames."Company Name" := Company.Name;
              TempWebVendorNames.INSERT;
            END;
          UNTIL PostedExDoc.NEXT = 0;
      UNTIL Company.NEXT = 0;

      TempWebVendorNames.RESET;
      IF TempWebVendorNames.FINDSET THEN
        REPEAT
          IF NOT WebVendorNames.GET(TempWebVendorNames."Vendor No.",TempWebVendorNames."Company Name") THEN BEGIN
            WebVendorNames.INIT;
            WebVendorNames.TRANSFERFIELDS(TempWebVendorNames);
            WebVendorNames.INSERT;
          END;
        UNTIL TempWebVendorNames.NEXT = 0;

      IF GUIALLOWED THEN
        MESSAGE(Text006);
    END;

    PROCEDURE GetLineTypeValues@1100285006(VAR TempExFlowInitSetup@1100285000 : TEMPORARY Record 12013605) : Boolean;
    VAR
      ExLineType@1100285001 : Record 12013642;
    BEGIN
      ExLineType.RESET;
      IF NOT ExLineType.FINDSET THEN
        EXIT(FALSE);

      REPEAT
        IF ExLineType."Line Type" = 'G_LACCOUNT' THEN
          TempExFlowInitSetup."Line Type G/L Account" := ExLineType."Document Display Expr" = 'TRUE';
        IF ExLineType."Line Type" = 'ITEM' THEN
          TempExFlowInitSetup."Line Type Item" := ExLineType."Document Display Expr" = 'TRUE';
        IF ExLineType."Line Type" = 'FIXEDASSET' THEN
          TempExFlowInitSetup."Line Type Fixed Asset" := ExLineType."Document Display Expr" = 'TRUE';
        IF ExLineType."Line Type" = 'CHARGE' THEN
          TempExFlowInitSetup."Line Type Item Charge" := ExLineType."Document Display Expr" = 'TRUE';
      UNTIL ExLineType.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE GetColumnValues@1100285009(VAR TempExFlowInitSetup@1100285001 : TEMPORARY Record 12013605) : Boolean;
    VAR
      ExColumn@1100285000 : Record 12013661;
    BEGIN
      WITH TempExFlowInitSetup DO BEGIN
        "Use Shortcut Dimension 1" := FALSE;
        "Sort Order 1" := 0;
        "Use Shortcut Dimension 2" := FALSE;
        "Sort Order 2" := 0;
        "Use Shortcut Dimension 3" := FALSE;
        "Sort Order 3" := 0;
        "Use Shortcut Dimension 4" := FALSE;
        "Sort Order 4" := 0;
        "Use Shortcut Dimension 5" := FALSE;
        "Sort Order 5" := 0;
        "Use Shortcut Dimension 6" := FALSE;
        "Sort Order 6" := 0;
        "Use Shortcut Dimension 7" := FALSE;
        "Sort Order 7" := 0;
        "Use Shortcut Dimension 8" := FALSE;
        "Sort Order 8" := 0;

        ExColumn.RESET;
        IF ExColumn.FINDSET THEN BEGIN
          REPEAT
            IF ExColumn.Source = 'DIM1' THEN BEGIN
              "Use Shortcut Dimension 1" := TRUE;
              "Sort Order 1" := ExColumn."Sort Order";
            END;
            IF ExColumn.Source = 'DIM2' THEN BEGIN
              "Use Shortcut Dimension 2" := TRUE;
              "Sort Order 2" := ExColumn."Sort Order";
            END;
            IF ExColumn.Source = 'DIM3' THEN BEGIN
              "Use Shortcut Dimension 3" := TRUE;
              "Sort Order 3" := ExColumn."Sort Order";
            END;
            IF ExColumn.Source = 'DIM4' THEN BEGIN
              "Use Shortcut Dimension 4" := TRUE;
              "Sort Order 4" := ExColumn."Sort Order";
            END;
            IF ExColumn.Source = 'DIM5' THEN BEGIN
              "Use Shortcut Dimension 5" := TRUE;
              "Sort Order 5" := ExColumn."Sort Order";
            END;
            IF ExColumn.Source = 'DIM6' THEN BEGIN
              "Use Shortcut Dimension 6" := TRUE;
              "Sort Order 6" := ExColumn."Sort Order";
            END;
            IF ExColumn.Source = 'DIM7' THEN BEGIN
              "Use Shortcut Dimension 7" := TRUE;
              "Sort Order 7" := ExColumn."Sort Order";
            END;
            IF ExColumn.Source = 'DIM8' THEN BEGIN
              "Use Shortcut Dimension 8" := TRUE;
              "Sort Order 8" := ExColumn."Sort Order";
            END;
          UNTIL ExColumn.NEXT = 0;

          EXIT(TRUE);
        END
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE GetCodingRuleValues@1100285010(VAR TempExFlowInitSetup@1100285002 : TEMPORARY Record 12013605) : Boolean;
    VAR
      ExCodingRule@1100285000 : Record 12013660;
    BEGIN
      WITH TempExFlowInitSetup DO BEGIN
        ExCodingRule.RESET;
        IF ExCodingRule.FINDFIRST THEN BEGIN
          "Create Default Coding Rules" := FALSE;
          EXIT(TRUE);
        END
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE GetExFlowSetup@1100285016(VAR TempExFlowInitSetup@1100285000 : TEMPORARY Record 12013605) : Boolean;
    VAR
      ExFlowSetup@1100285001 : Record 12013601;
    BEGIN
      WITH TempExFlowInitSetup DO BEGIN
        IF ExFlowSetup.GET THEN BEGIN
          "Path to New Invoices" := ExFlowSetup."Path to New Invoices";
          "Path to Used Invoices" := ExFlowSetup."Path to Used Invoices";
          "Path to New OCR-files" := ExFlowSetup."Path to New OCR-files";
          "Path to Attached Files" := ExFlowSetup."Path to Attached Files";
          "Path to connected Att. Files" := ExFlowSetup."Path to connected Att. Files";
          IF ("Path to New Invoices" <> '') OR
             ("Path to Used Invoices" <> '') OR
             ("Path to New OCR-files" <> '') OR
             ("Path to Attached Files" <> '') OR
             ("Path to connected Att. Files" <> '') THEN
                "Create Default ExFlow Setup" := FALSE
              ELSE
                "Create Default ExFlow Setup" := TRUE;
        END;

        IF "Create Default ExFlow Setup" THEN
          EXIT(FALSE)
        ELSE
          EXIT(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

