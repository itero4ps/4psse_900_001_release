OBJECT Codeunit 15000300 Repeating Order to Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO9.00;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=BEGIN
            TESTFIELD("Document Type","Document Type"::"Blanket Order");

            IF "Order Date" > ProcessingDate THEN
              ERROR(Text15000300,"No.","Order Date",ProcessingDate);
            RecurringGroup.GET("Recurring Group Code");
            RecurringGroup.TESTFIELD("Date formula");
            IF (RecurringGroup."Starting date" > ProcessingDate) OR
               ((RecurringGroup."Closing date" < ProcessingDate) AND (RecurringGroup."Closing date" <> 0D))
            THEN
              ERROR(Text15000301,"No.",ProcessingDate,RecurringGroup.Code,RecurringGroup."Starting date",RecurringGroup."Closing date");
            TESTFIELD("Deactivate recurrence",FALSE);
            TESTFIELD("Order Date");

            SalesSetup.GET;

            BlanketOrderSalesLine.SETRANGE("Document Type","Document Type");
            BlanketOrderSalesLine.SETRANGE("Document No.","No.");
            BlanketOrderSalesLine.SETRANGE(Type,BlanketOrderSalesLine.Type::Item);
            BlanketOrderSalesLine.SETFILTER("No.",'<>%1','');
            IF BlanketOrderSalesLine.FIND('-') THEN
              REPEAT
                IF BlanketOrderSalesLine."Qty. to Ship" > 0 THEN BEGIN
                  SalesLine := BlanketOrderSalesLine;
                  SalesLine."Line No." := 0;
                  ResetQuantityFields(SalesLine);
                  SalesLine.Quantity := BlanketOrderSalesLine."Qty. to Ship";
                  SalesLine."Quantity (Base)" := ROUND(SalesLine.Quantity * SalesLine."Qty. per Unit of Measure",0.00001);
                  SalesLine."Qty. to Ship" := SalesLine.Quantity;
                  SalesLine."Qty. to Ship (Base)" := SalesLine."Quantity (Base)";
                  SalesLine.InitOutstanding;
                  IF SalesLine.Reserve <> SalesLine.Reserve::Always THEN
                    IF NOT HideValidationDialog THEN
                      ItemCheckAvail.SalesLineCheck(SalesLine,TRUE);
                END;
              UNTIL BlanketOrderSalesLine.NEXT = 0;

              // To create only the latest orders, order date should be the latest possible
            IF CreateLatest OR RecurringGroup."Create only the latest" THEN BEGIN
              NextOrderDate := "Order Date";
              REPEAT
                VALIDATE("Order Date",NextOrderDate);
                NextOrderDate := CALCDATE(RecurringGroup."Date formula","Order Date");
                // Stop if the date is overwritten or not moved (Date formula is for inst. 0D):
              UNTIL (NextOrderDate > ProcessingDate) OR (NextOrderDate = "Order Date");
            END ELSE
              NextOrderDate := CALCDATE(RecurringGroup."Date formula","Order Date");

            SalesOrderHeader := Rec;
            SalesOrderHeader."Document Type" := SalesOrderHeader."Document Type"::Order;
            IF NOT HideValidationDialog THEN
              CustCheckCreditLimit.SalesHeaderCheck(SalesOrderHeader);

            SalesOrderHeader."No. Printed" := 0;
            SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
            SalesOrderHeader."No." := '';

            SalesOrderLine.LOCKTABLE;
            SalesOrderHeader.INSERT(TRUE);

            SalesOrderHeader."Dimension Set ID" := "Dimension Set ID";
            SalesOrderHeader."Order Date" := "Order Date";
            // Manage the dates as descrpied in the setup
            // IF "Posting Date" <> 0D THEN
            //   SalesOrderHeader."Posting Date" := "Posting Date";
            SalesOrderHeader."Posting Date" := "Order Date";
            CASE RecurringGroup."Update Document Date" OF
              RecurringGroup."Update Document Date"::"Posting Date":
                SalesOrderHeader.VALIDATE("Document Date",CALCDATE(RecurringGroup."Document Date Formula",SalesOrderHeader."Posting Date"));
              RecurringGroup."Update Document Date"::"Processing Date":
                SalesOrderHeader.VALIDATE("Document Date",CALCDATE(RecurringGroup."Document Date Formula",ProcessingDate));
            END;
            SalesOrderHeader.VALIDATE("Shipment Date",CALCDATE(RecurringGroup."Delivery Date Formula",SalesOrderHeader."Posting Date"));
            // SalesOrderHeader."Document Date" := "Document Date";
            // SalesOrderHeader."Shipment Date" := "Shipment Date";
            SalesOrderHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
            SalesOrderHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
            SalesOrderHeader.MODIFY;

            BlanketOrderSalesLine.RESET;
            BlanketOrderSalesLine.SETRANGE("Document Type","Document Type");
            BlanketOrderSalesLine.SETRANGE("Document No.","No.");

            LinesCreated := FALSE;
            IF BlanketOrderSalesLine.FIND('-') THEN
              REPEAT
                SalesLine.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                SalesLine.SETRANGE("Blanket Order No.",BlanketOrderSalesLine."Document No.");
                SalesLine.SETRANGE("Blanket Order Line No.",BlanketOrderSalesLine."Line No.");
                QuantityOnOrders := 0;
                IF SalesLine.FIND('-') AND (RecurringGroup."Update Number" = RecurringGroup."Update Number"::Reduce) THEN
                  REPEAT
                    IF SalesLine."Document Type" IN
                      [SalesLine."Document Type"::"Return Order",
                       SalesLine."Document Type"::"Credit Memo"]
                    THEN
                      QuantityOnOrders := QuantityOnOrders - SalesLine."Outstanding Qty. (Base)"
                    ELSE
                      QuantityOnOrders := QuantityOnOrders + SalesLine."Outstanding Qty. (Base)";
                  UNTIL SalesLine.NEXT = 0;
                IF (ABS(BlanketOrderSalesLine."Qty. to Ship (Base)") + ABS(QuantityOnOrders) >
                    ABS(BlanketOrderSalesLine."Quantity (Base)")) OR
                   (BlanketOrderSalesLine."Quantity (Base)" * BlanketOrderSalesLine."Outstanding Qty. (Base)" < 0)
                THEN
                  ERROR(
                    Text000 + '%6\' + '%7 - %8 = %9',
                    BlanketOrderSalesLine.FIELDCAPTION("Qty. to Ship (Base)"),
                    BlanketOrderSalesLine.Type,BlanketOrderSalesLine."No.",
                    BlanketOrderSalesLine.FIELDCAPTION("Line No."),BlanketOrderSalesLine."Line No.",
                    STRSUBSTNO(
                      Text001,
                      BlanketOrderSalesLine.FIELDCAPTION("Outstanding Qty. (Base)"),
                      BlanketOrderSalesLine.FIELDCAPTION("Qty. to Ship (Base)")),
                    BlanketOrderSalesLine."Outstanding Qty. (Base)",QuantityOnOrders,
                    BlanketOrderSalesLine."Outstanding Qty. (Base)" - QuantityOnOrders);
                SalesOrderLine := BlanketOrderSalesLine;
                ResetQuantityFields(SalesOrderLine);
                SalesOrderLine."Document Type" := SalesOrderHeader."Document Type";
                SalesOrderLine."Document No." := SalesOrderHeader."No.";
                IF (SalesOrderLine."No." <> '') AND (SalesOrderLine.Type <> 0) THEN BEGIN
                  SalesOrderLine.Amount := 0;
                  SalesOrderLine."Amount Including VAT" := 0;
                  SalesOrderLine.VALIDATE(Quantity,BlanketOrderSalesLine."Qty. to Ship");
                  SalesOrderLine.VALIDATE("Shipment Date",BlanketOrderSalesLine."Shipment Date");
                  SalesOrderLine.VALIDATE("Unit Price",BlanketOrderSalesLine."Unit Price");
                  SalesOrderLine."Allow Invoice Disc." := BlanketOrderSalesLine."Allow Invoice Disc.";
                  SalesOrderLine."Allow Line Disc." := BlanketOrderSalesLine."Allow Line Disc.";
                  SalesOrderLine.VALIDATE("Line Discount %",BlanketOrderSalesLine."Line Discount %");
                  ReserveSalesLine.TransferSaleLineToSalesLine(
                    BlanketOrderSalesLine,SalesOrderLine,BlanketOrderSalesLine."Outstanding Qty. (Base)");
                END;
                SalesOrderLine."Shortcut Dimension 1 Code" := BlanketOrderSalesLine."Shortcut Dimension 1 Code";
                SalesOrderLine."Shortcut Dimension 2 Code" := BlanketOrderSalesLine."Shortcut Dimension 2 Code";
                CASE RecurringGroup."Update Price" OF
                  RecurringGroup."Update Price"::Fixed:
                    ; // Price remained unchanged. No action is taken.
                  RecurringGroup."Update Price"::Recalculate:
                    IF SalesOrderLine.Type IN [SalesOrderLine.Type::Item,SalesOrderLine.Type::Resource] THEN BEGIN
                      StoreNumber := SalesOrderLine.Quantity;
                      UpdateUnitPrice;
                      SalesOrderLine.VALIDATE(Quantity,StoreNumber);
                    END;
                  RecurringGroup."Update Price"::Reset:
                    SalesOrderLine.VALIDATE("Unit Price",0);
                END;
                SalesOrderLine."Dimension Set ID" := BlanketOrderSalesLine."Dimension Set ID";
                SalesOrderLine.INSERT;

                IF BlanketOrderSalesLine."Qty. to Ship" <> 0 THEN BEGIN
                  LinesCreated := TRUE;
                  // Deleted: BlanketOrderSalesLine.VALIDATE("Qty. to Ship",0);
                  CASE RecurringGroup."Update Number" OF
                    RecurringGroup."Update Number"::Constant:
                      ; // "Deliver (number)" is unchanged - no action is taken.
                    RecurringGroup."Update Number"::Reduce:
                      BlanketOrderSalesLine.VALIDATE("Qty. to Ship",0); // This is the usual procedure
                  END;
                  BlanketOrderSalesLine.MODIFY;
                END;
              UNTIL BlanketOrderSalesLine.NEXT = 0;

            IF NOT LinesCreated THEN
              ERROR(Text002);

            IF SalesSetup."Copy Comments Blanket to Order" THEN BEGIN
              SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::"Blanket Order");
              SalesCommentLine.SETRANGE("No.","No.");
              IF SalesCommentLine.FIND('-') THEN
                REPEAT
                  SalesCommentLine2 := SalesCommentLine;
                  SalesCommentLine2."Document Type" := SalesOrderHeader."Document Type";
                  SalesCommentLine2."No." := SalesOrderHeader."No.";
                  SalesCommentLine2.INSERT;
                UNTIL SalesCommentLine.NEXT = 0;
            END;

            VALIDATE("Order Date",NextOrderDate);
            MODIFY;
            CreatePost(Rec,SalesOrderHeader);

            COMMIT;
            CLEAR(CustCheckCreditLimit);
            CLEAR(ItemCheckAvail);
          END;

  }
  CODE
  {
    VAR
      Text000@1080000 : TextConst '@@@=Parameter 1 - qty to ship (base) field caption, 2 - Line Type, 3 - Line No, 4 - Line No caption, 5 - Line no;ENU=%1 of %2 %3 in %4 %5 cannot be more than %9.\';
      Text001@1080001 : TextConst 'ENU="%1 - Unposted %1 = Possible %2"';
      Text002@1080002 : TextConst 'ENU=There are no lines to create.';
      BlanketOrderSalesLine@1080003 : Record 37;
      SalesLine@1080004 : Record 37;
      SalesOrderHeader@1080005 : Record 36;
      SalesOrderLine@1080006 : Record 37;
      SalesCommentLine@1080007 : Record 44;
      SalesCommentLine2@1080008 : Record 44;
      SalesSetup@1080009 : Record 311;
      RecurringGroup@1080010 : Record 15000300;
      CustCheckCreditLimit@1080011 : Codeunit 312;
      ItemCheckAvail@1080012 : Codeunit 311;
      ReserveSalesLine@1080013 : Codeunit 99000832;
      LinesCreated@1080015 : Boolean;
      HideValidationDialog@1080016 : Boolean;
      QuantityOnOrders@1080017 : Decimal;
      ProcessingDate@1080018 : Date;
      StoreNumber@1080019 : Decimal;
      CreateLatest@1080020 : Boolean;
      NextOrderDate@1080021 : Date;
      PostDate@1080022 : Date;
      PostTime@1080023 : Time;
      Text15000300@1080024 : TextConst 'ENU=Recurring order %1 could not be created.\Order date %2 is after the processing date %3.';
      Text15000301@1080025 : TextConst '@@@=Parameter 1 - Sales header No., 2 - posting date, 3 - code, 4 - starting date, 5 - closing date;ENU=Recurring order %1 could not be created.\Processing date is %2 and the recurring group %3 is only active in the period %4..%5.';

    PROCEDURE ResetQuantityFields@1(VAR TempSalesLine@1080000 : Record 37);
    BEGIN
      TempSalesLine."Qty. Shipped Not Invoiced" := 0;
      TempSalesLine."Quantity Shipped" := 0;
      TempSalesLine."Quantity Invoiced" := 0;
      TempSalesLine."Qty. Shipped Not Invd. (Base)" := 0;
      TempSalesLine."Qty. Shipped (Base)" := 0;
      TempSalesLine."Qty. Invoiced (Base)" := 0;
    END;

    PROCEDURE GetSalesOrderHeader@2(VAR SalesHeader@1080000 : Record 36);
    BEGIN
      SalesHeader := SalesOrderHeader;
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1080000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE Initialize@3(NewProcessingDate@1080000 : Date;NewCreateLatest@1080001 : Boolean);
    BEGIN
      ProcessingDate := NewProcessingDate;
      CreateLatest := NewCreateLatest;
      PostDate := TODAY;
      PostTime := TIME;
    END;

    LOCAL PROCEDURE UpdateUnitPrice@6();
    VAR
      SalesHeader@1080000 : Record 36;
      PriceCalcMgt@1080002 : Codeunit 7000;
      CalledByFieldNo@1080001 : Integer;
    BEGIN
      // Init to be able to use the code from table 37 (see Note).
      SalesHeader := SalesOrderHeader;
      CalledByFieldNo := 6; // = field SalesOrderLine."No."

      // Note >>: This is a copy of code from function "UpdateUnitprice" on table 37.
      SalesOrderLine.TESTFIELD("Qty. per Unit of Measure");

      CASE SalesOrderLine.Type OF
        SalesOrderLine.Type::Item,SalesOrderLine.Type::Resource:
          BEGIN
            PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,SalesOrderLine);
            PriceCalcMgt.FindSalesLinePrice(SalesHeader,SalesOrderLine,CalledByFieldNo);
          END;
        SalesOrderLine.Type::"Charge (Item)":
          SalesOrderLine.UpdateItemChargeAssgnt;
      END;
      SalesOrderLine.VALIDATE("Unit Price");
      // Note <<
    END;

    LOCAL PROCEDURE CreatePost@4(BlanketOrder@1080000 : Record 36;SalesOrder@1080001 : Record 36);
    VAR
      RecurringPost@1080002 : Record 15000301;
    BEGIN
      RecurringPost.VALIDATE("Blanket Order No.",BlanketOrder."No.");
      RecurringPost.VALIDATE(Date,PostDate);
      RecurringPost.VALIDATE(Time,PostTime);
      RecurringPost.VALIDATE("Document Type",SalesOrder."Document Type");
      RecurringPost.VALIDATE("Document No.",SalesOrder."No.");
      RecurringPost.VALIDATE("User ID",USERID);
      RecurringPost.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

