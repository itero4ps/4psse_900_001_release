OBJECT Codeunit 333 Req. Wksh.-Make Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    TableNo=246;
    Permissions=TableData 37=m;
    OnRun=BEGIN
            IF PlanningResiliency THEN
              LOCKTABLE;
            CarryOutReqLineAction(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Worksheet Name                     #1##########\\';
      Text001@1001 : TextConst 'ENU=Checking worksheet lines           #2######\';
      Text002@1002 : TextConst 'ENU=Creating purchase orders           #3######\';
      Text003@1003 : TextConst 'ENU=Creating purchase lines            #4######\';
      Text004@1004 : TextConst 'ENU=Updating worksheet lines           #5######';
      Text005@1005 : TextConst 'ENU=Deleting worksheet lines           #5######';
      Text006@1006 : TextConst 'ENU=%1 on sales order %2 is already associated with purchase order %3.';
      Text007@1007 : TextConst 'ENU=<Month Text>';
      Text008@1008 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5';
      Text009@1009 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5';
      ReservEntry@1050 : Record 337;
      PurchSetup@1010 : Record 312;
      ReqTemplate@1011 : Record 244;
      ReqWkshName@1012 : Record 245;
      PurchOrderHeader@1016 : Record 38;
      PurchOrderLine@1018 : Record 39;
      PurchaseLineExtension@1210190003 : Record 11020644;
      SalesOrderHeader@1019 : Record 36;
      SalesOrderLine@1020 : Record 37;
      TransHeader@1028 : Record 5740;
      AccountingPeriod@1022 : Record 50;
      TempFailedReqLine@1054 : TEMPORARY Record 246;
      PurchasingCode@1046 : Record 5721;
      VendorRec@1210190002 : Record 23;
      DimValRec@11012002 : Record 349;
      InvtSetup@11012003 : Record 313;
      JobsSetup@1100525004 : Record 315;
      TempPurchHeaderRec@1000000003 : TEMPORARY Record 38;
      ErrorRec@1000000005 : Record 11012051;
      ReqWkshMakeOrders@1053 : Codeunit 333;
      TransferExtendedText@1027 : Codeunit 378;
      ReserveReqLine@1025 : Codeunit 99000833;
      DimMgt@1026 : Codeunit 408;
      CalendarMgmt@1100525002 : Codeunit 7600;
      Window@1029 : Dialog;
      OrderDateReq@1030 : Date;
      PostingDateReq@1031 : Date;
      ReceiveDateReq@1032 : Date;
      EndOrderDate@1035 : Date;
      PlanningResiliency@1055 : Boolean;
      PrintPurchOrders@1034 : Boolean;
      ProcBasedOnElectronicOrderType@1210190007 : Boolean;
      ReferenceReq@1033 : Text[35];
      MonthText@1044 : Text[30];
      OrderCounter@1036 : Integer;
      LineCount@1037 : Integer;
      OrderLineCounter@1038 : Integer;
      StartLineNo@1039 : Integer;
      NextLineNo@1040 : Integer;
      Day@1041 : Integer;
      Week@1042 : Integer;
      Month@1043 : Integer;
      CounterFailed@1052 : Integer;
      PrevPurchCode@1047 : Code[10];
      PrevShipToCode@1017 : Code[10];
      "0DF"@1048 : DateFormula;
      Text010@1049 : TextConst 'ENU=must match %1 on Sales Order %2, Line %3';
      PrevChangedDocOrderType@1013 : Option;
      PrevChangedDocOrderNo@1014 : Code[20];
      PurchSelForm@11012032 : Code[10];
      SelectionMethod@1210190000 : 'Vendor,Project,Ship-to Location';
      PrevSort@1210190001 : Code[250];
      PrevSalesOrderNo@1210190011 : Code[20];
      FirstOrder@1210190004 : Code[20];
      LastOrder@1210190005 : Code[20];
      gAskForNoSerie@1210190009 : Boolean;
      gNoSeries@1210190010 : Code[10];
      ExistingBlanketOrder@1100525000 : Boolean;
      SkipBatchFilter@1100525001 : Boolean;
      Text011@1100525003 : TextConst 'ENU=Project %1 is using currency exchange reates by project.  Generate Purchase Order by Project.';
      SkipSortPurchase@1210190006 : Boolean;
      TransferCommentLines@1100529800 : Boolean;
      LinkItemDocsToOrder@1100525005 : Boolean;
      TrCancelCounter@1100409000 : Integer;
      OrdCancelCounter@1100409001 : Integer;
      TrChangeCounter@1100409002 : Integer;
      OrdChangeCounter@1100409003 : Integer;
      TrNewCounter@1100409004 : Integer;
      OrdNewCounter@1100409005 : Integer;

    PROCEDURE CarryOutBatchAction@18(VAR ReqLine2@1000 : Record 246);
    VAR
      ReqLine@1001 : Record 246;
    BEGIN
      ReqLine.COPY(ReqLine2);
      ReqLine.SETRANGE("Accept Action Message",TRUE);
      Code(ReqLine);
      ReqLine2 := ReqLine;
    END;

    PROCEDURE Set@1(NewPurchOrderHeader@1000 : Record 38;NewEndingOrderDate@1001 : Date;NewPrintPurchOrder@1002 : Boolean);
    BEGIN
      PurchOrderHeader := NewPurchOrderHeader;
      EndOrderDate := NewEndingOrderDate;
      PrintPurchOrders := NewPrintPurchOrder;
      OrderDateReq := PurchOrderHeader."Order Date";
      PostingDateReq := PurchOrderHeader."Posting Date";
      ReceiveDateReq := PurchOrderHeader."Expected Receipt Date";
      ReferenceReq := PurchOrderHeader."Your Reference";
    END;

    PROCEDURE SetBasedOnElectronicOrderType@1210190004(YesNo@1210190000 : Boolean);
    BEGIN
      //**4PS
      ProcBasedOnElectronicOrderType := YesNo;
    END;

    LOCAL PROCEDURE Code@8(VAR ReqLine@1001 : Record 246);
    VAR
      ReqLine2@1002 : Record 246;
      ReqLine3@1003 : Record 246;
    BEGIN
      WITH ReqLine DO BEGIN
        PurchSelForm := PurchOrderHeader."Purchaser Code";  //**4PS.n
        CLEAR(PurchOrderHeader);

        SETRANGE("Worksheet Template Name","Worksheet Template Name");
        IF NOT SkipBatchFilter THEN //**4PS.n
          SETRANGE("Journal Batch Name","Journal Batch Name");
        IF NOT PlanningResiliency THEN
          LOCKTABLE;

        IF "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" THEN
          ReqTemplate.GET("Worksheet Template Name");

        IF ReqTemplate.Recurring THEN BEGIN
          SETRANGE("Order Date",0D,EndOrderDate);
          SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
        END;

        IF NOT FIND('=><') THEN BEGIN
          "Line No." := 0;
          COMMIT;
          EXIT;
        END;

        IF ReqTemplate.Recurring THEN
          Window.OPEN(
            Text000 +
            Text001 +
            Text002 +
            Text003 +
            Text004)
        ELSE
          Window.OPEN(
            Text000 +
            Text001 +
            Text002 +
            Text003 +
            Text005);

        Window.UPDATE(1,"Journal Batch Name");

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          CheckRecurringLine(ReqLine);
          CheckReqWkshLine(ReqLine);
          IF NEXT = 0 THEN
            FIND('-');
        UNTIL "Line No." = StartLineNo;

        // Create lines
        LineCount := 0;
        OrderCounter := 0;
        //**4PS.sn
        TrCancelCounter := 0;
        TrChangeCounter := 0;
        TrNewCounter := 0;
        OrdCancelCounter := 0;
        OrdChangeCounter := 0;
        OrdNewCounter := 0;
        //**4PS.en
        OrderLineCounter := 0;
        CLEAR(PurchOrderHeader);
        SetPurchOrderHeader;
        SETCURRENTKEY(
          "Worksheet Template Name","Journal Batch Name","Vendor No.",
          "Sell-to Customer No.","Ship-to Code","Order Address Code","Currency Code",
          "Ref. Order Type","Ref. Order Status","Ref. Order No.",
          "Location Code","Transfer-from Code");

        //**4PS.sn
        SortReqLine(ReqLine);
        SETCURRENTKEY(
          "Sort Purchase","Sell-to Customer No.","Ship-to Code","Order Address Code",
          "Currency Code","Item Composition","Due Date");
        //**4PS.en
        IF FIND('-') THEN
          REPEAT
            IF PlanningResiliency THEN BEGIN
              IF NOT TryCarryOutReqLineAction(ReqLine) THEN BEGIN
                SetFailedReqLine(ReqLine);
                CounterFailed := CounterFailed + 1;
              END;
            END ELSE
              CarryOutReqLineAction(ReqLine);
          UNTIL NEXT = 0;

        IF PrintPurchOrders THEN
          PrintTransOrder(TransHeader);

        IF PurchOrderHeader."Buy-from Vendor No." <> '' THEN
          FinalizeOrderHeader(PurchOrderHeader,ReqLine);

        IF PrevChangedDocOrderNo <> '' THEN
          PrintChangedDocument(PrevChangedDocOrderType,PrevChangedDocOrderNo);

        // Copy number of created orders and current journal batch name to requisition worksheet
        INIT;
        "Line No." := OrderCounter;

        IF OrderCounter <> 0 THEN
          IF NOT ReqTemplate.Recurring THEN BEGIN
            // Not a recurring journal
            ReqLine2.COPY(ReqLine);
            ReqLine2.SETFILTER("Vendor No.",'<>%1','');
            IF ReqLine2.FINDFIRST THEN; // Remember the last line
            //**4PS Remove processed lines
            IF FIND('-') THEN
              REPEAT
                TempFailedReqLine := ReqLine;
                IF NOT TempFailedReqLine.FIND THEN
                  DELETE(TRUE);
              UNTIL NEXT = 0;
            //**4PS Try Create new Batch if all lines are processed.
            ReqLine3.SETRANGE("Worksheet Template Name","Worksheet Template Name");
            ReqLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            IF NOT ReqLine3.FINDLAST THEN
              IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
                ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");
                ReqWkshName.DELETE;
                ReqWkshName.Name := INCSTR("Journal Batch Name");
                IF ReqWkshName.INSERT THEN;
                "Journal Batch Name" := ReqWkshName.Name;
              END;
          END;

        //**4PS.sn
        Description := FirstOrder;
        IF FirstOrder <> LastOrder THEN
          Description := FirstOrder + '..' + LastOrder;
        //**4PS.en
      END;
    END;

    LOCAL PROCEDURE CheckReqWkshLine@2(VAR ReqLine2@1000 : Record 246);
    VAR
      SalesLine@1004 : Record 37;
      Purchasing@1005 : Record 5721;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      WITH ReqLine2 DO BEGIN
        IF ("No." <> '') OR ("Vendor No." <> '') OR (Quantity <> 0) THEN BEGIN
          TESTFIELD("No.");
          IF "Action Message" <> "Action Message"::Cancel THEN
            TESTFIELD(Quantity);
          IF ("Action Message" = "Action Message"::" ") OR
             ("Action Message" = "Action Message"::New)
          THEN
            IF "Replenishment System" = "Replenishment System"::Purchase THEN BEGIN
              IF "Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
                TESTFIELD("Supply From");
              TESTFIELD("Vendor No.")
            END ELSE
              IF "Replenishment System" = "Replenishment System"::Transfer THEN BEGIN
                TESTFIELD("Location Code");
                IF "Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
                  TESTFIELD("Supply From");
                TESTFIELD("Transfer-from Code");
              END;
        END;

        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ERROR(
            Text008,
            TABLECAPTION,"Worksheet Template Name","Journal Batch Name","Line No.",
            DimMgt.GetDimCombErr);

        TableID[1] := DimMgt.TypeToTableID3(Type);
        No[1] := "No.";
        IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN
          IF "Line No." <> 0 THEN
            ERROR(
              Text009,
              TABLECAPTION,"Worksheet Template Name","Journal Batch Name","Line No.",
              DimMgt.GetDimValuePostingErr)
          ELSE
            ERROR(DimMgt.GetDimValuePostingErr);

        IF SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.") AND
           (SalesLine."Unit of Measure Code" <> "Unit of Measure Code")
        THEN
          IF SalesLine."Drop Shipment" OR
             (PurchasingCode.GET("Purchasing Code") AND PurchasingCode."Drop Shipment")
          THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(
                Text010,
                SalesLine.FIELDCAPTION("Unit of Measure Code"),
                SalesLine."Document No.",
                SalesLine."Line No."));

        IF Purchasing.GET("Purchasing Code") THEN
          IF Purchasing."Drop Shipment" OR Purchasing."Special Order" THEN BEGIN
            SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
            IF (Purchasing."Drop Shipment" <> SalesLine."Drop Shipment") OR
               (Purchasing."Special Order" <> SalesLine."Special Order")
            THEN
              FIELDERROR(
                "Purchasing Code",
                STRSUBSTNO(
                  Text010,
                  SalesLine.FIELDCAPTION("Purchasing Code"),
                  SalesLine."Document No.",
                  SalesLine."Line No."));
          END;
      END;
    END;

    LOCAL PROCEDURE CarryOutReqLineAction@14(VAR ReqLine@1001 : Record 246);
    VAR
      CarryOutAction@1000 : Codeunit 99000813;
    BEGIN
      WITH ReqLine DO
        CASE "Replenishment System" OF
          "Replenishment System"::Transfer:
            CASE "Action Message" OF
              "Action Message"::Cancel:
                BEGIN
                  CarryOutAction.DeleteOrderLines(ReqLine);
                  OrderCounter := OrderCounter + 1;
                  TrCancelCounter := TrCancelCounter + 1; //**4PS
                END;
              "Action Message"::"Change Qty.","Action Message"::Reschedule,"Action Message"::"Resched. & Chg. Qty.":
                BEGIN
                  IF (PrevChangedDocOrderNo <> '') AND
                     (("Ref. Order Type" <> PrevChangedDocOrderType) OR ("Ref. Order No." <> PrevChangedDocOrderNo))
                  THEN
                    PrintChangedDocument(PrevChangedDocOrderType,PrevChangedDocOrderNo);
                  CarryOutAction.SetPrintOrder(FALSE);
                  CarryOutAction.TransOrderChgAndReshedule(ReqLine);
                  PrevChangedDocOrderType := "Ref. Order Type";
                  PrevChangedDocOrderNo := "Ref. Order No.";
                  OrderCounter := OrderCounter + 1;
                  TrChangeCounter := TrChangeCounter + 1; //**4PS
                END;
              "Action Message"::New,"Action Message"::" ":
                BEGIN
                  CarryOutAction.SetPrintOrder(PrintPurchOrders);
                  CarryOutAction.InsertTransLine(ReqLine,TransHeader);
                  OrderCounter := OrderCounter + 1;
                  TrNewCounter := TrNewCounter + 1;       //**4PS
                END;
            END;
          "Replenishment System"::Purchase,"Replenishment System"::"Prod. Order":
            CASE "Action Message" OF
              "Action Message"::Cancel:
                BEGIN
                  CarryOutAction.DeleteOrderLines(ReqLine);
                  OrderCounter := OrderCounter + 1;
                  OrdCancelCounter := OrdCancelCounter + 1;  //**4PS
                END;
              "Action Message"::"Change Qty.","Action Message"::Reschedule, "Action Message"::"Resched. & Chg. Qty.":
                BEGIN
                  IF (PrevChangedDocOrderNo <> '') AND
                     (("Ref. Order Type" <> PrevChangedDocOrderType) OR ("Ref. Order No." <> PrevChangedDocOrderNo))
                  THEN
                    PrintChangedDocument(PrevChangedDocOrderType,PrevChangedDocOrderNo);
                  CarryOutAction.SetPrintOrder(FALSE);
                  CarryOutAction.PurchOrderChgAndReshedule(ReqLine);
                  PrevChangedDocOrderType := "Ref. Order Type";
                  PrevChangedDocOrderNo := "Ref. Order No.";
                  OrderCounter := OrderCounter + 1;
                  OrdChangeCounter := OrdChangeCounter + 1; //**4PS
                END;
              "Action Message"::New,"Action Message"::" ":
                BEGIN
                  IF ((PurchOrderHeader."Buy-from Vendor No." <> '') AND
                      ((PurchOrderHeader."Buy-from Vendor No." <> "Vendor No.") OR
                       (PurchOrderHeader."Currency Code" <> "Currency Code"))) OR
                     (PurchOrderHeader."Sell-to Customer No." <> "Sell-to Customer No.") OR
                     (PurchOrderHeader."Ship-to Code" <> "Ship-to Code") OR
                     (PurchOrderHeader."Order Address Code" <> "Order Address Code")
                  THEN BEGIN
                    FinalizeOrderHeader(PurchOrderHeader,ReqLine);
                    PurchOrderLine.RESET;
                    PurchOrderLine.SETRANGE("Document Type",PurchOrderHeader."Document Type");
                    PurchOrderLine.SETRANGE("Document No.",PurchOrderHeader."No.");
                    PurchOrderLine.SETFILTER("Special Order Sales Line No.",'<> 0');
                    IF PurchOrderLine.FIND('-') THEN
                      REPEAT
                        SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,PurchOrderLine."Special Order Sales No.",
                          PurchOrderLine."Special Order Sales Line No.");
                      UNTIL PurchOrderLine.NEXT = 0;
                  END;
                  MakeRecurringTexts(ReqLine);
                  InsertPurchOrderLines(ReqLine,PurchOrderHeader); //**4PS.n
                  //InsertPurchOrderLine(ReqLine,PurchOrderHeader); //**4PS.o
                  OrdNewCounter := OrdNewCounter + 1; //**4PS
                END;
            END;
        END;
    END;

    LOCAL PROCEDURE TryCarryOutReqLineAction@12(VAR ReqLine@1001 : Record 246) : Boolean;
    VAR
      NewPurchaseOrdersTxt@1100528400 : Text[50];
    BEGIN
      WITH ReqLine DO BEGIN
        ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintPurchOrders);
        //**4PS.sn
        ReqWkshMakeOrders.SetBasedOnElectronicOrderType(ProcBasedOnElectronicOrderType);
        ReqWkshMakeOrders.SetMethod(SelectionMethod);
        ReqWkshMakeOrders.SetPurchSelForm(PurchSelForm);
        //**4PS.en
        ReqWkshMakeOrders.SetTryParam(
          ReqTemplate,
          LineCount,
          NextLineNo,
          PrevPurchCode,
          PrevShipToCode,
          OrderCounter,
          OrderLineCounter,
          TempFailedReqLine);
        //**4PS.sn
        ReqWkshMakeOrders.SetNumbers(
          TrCancelCounter, OrdCancelCounter, TrChangeCounter, OrdChangeCounter,
          TrNewCounter, OrdNewCounter, FirstOrder, LastOrder);
        //**4PS.en
        COMMIT; //**4PS.n: need because SortReqLine has modified ReqLine.
        IF ReqWkshMakeOrders.RUN(ReqLine) THEN BEGIN
          ReqWkshMakeOrders.GetTryParam(
            PurchOrderHeader,
            LineCount,
            NextLineNo,
            PrevPurchCode,
            PrevShipToCode,
            OrderCounter,
            OrderLineCounter);
          //**4PS.sn
          ReqWkshMakeOrders.GetNumbers(
            TrCancelCounter, OrdCancelCounter, TrChangeCounter, OrdChangeCounter,
            TrNewCounter, OrdNewCounter, FirstOrder, LastOrder, NewPurchaseOrdersTxt);
          ReqWkshMakeOrders.GetTempPurchHeaderRec(TempPurchHeaderRec);
          //**4PS.en

          Window.UPDATE(3,OrderCounter);
          Window.UPDATE(4,LineCount);
          Window.UPDATE(5,OrderLineCounter);
          EXIT(TRUE);
        END;
        EXIT(FALSE)
      END;
    END;

    PROCEDURE InsertPurchOrderLines@1100525002(VAR ReqLine2@1100525001 : Record 246;VAR PurchOrderHeader@1100525000 : Record 38);
    VAR
      BlanketOrder@1100525005 : Record 38;
      BlanketOrderLine@1100525004 : Record 39;
      RemainingQuantity@1100525003 : Decimal;
      ProcessQuantity@1100525002 : Decimal;
      DeliverableQuan@1100525006 : Decimal;
    BEGIN
      //**4PS
      WITH ReqLine2 DO BEGIN
        //preconditions
        IF ("No." = '') OR ("Vendor No." = '') OR (Quantity = 0) OR (NOT "Use Blanket Order") OR (Type <> Type::Item) OR
          CheckCreateBlanketOrder(ReqLine2) //if order date > demand date then create blanket order line
        THEN
          InsertPurchOrderLine(ReqLine2,PurchOrderHeader,BlanketOrderLine)
        ELSE BEGIN
          //create purchase order line on base of blanket order line (if exists)
          RemainingQuantity := Quantity;
          BlanketOrder.SETRANGE("Document Type",BlanketOrderLine."Document Type"::"Blanket Order");
          BlanketOrder.SETRANGE("Buy-from Vendor No.","Vendor No.");
          BlanketOrder.SETFILTER(Status,'<>%1',BlanketOrder.Status::Closed);
          IF BlanketOrder.FINDSET THEN
            REPEAT
              IF RemainingQuantity > 0 THEN BEGIN
                BlanketOrderLine.SETRANGE("Document Type",BlanketOrder."Document Type");
                BlanketOrderLine.SETRANGE("Document No.",BlanketOrder."No.");
                //mg.sc, 20-06-11: M27193
                IF "No." <> '' THEN BEGIN
                  InvtSetup.GET;
                  IF InvtSetup."Default Item" <> "No." THEN
                    BlanketOrderLine.SETRANGE("Item No.","No.");
                END;
                //mg.ec, 20-06-11: M27193
                IF "Trade Item" <> '' THEN
                  BlanketOrderLine.SETRANGE("Trade Item","Trade Item");
                IF BlanketOrder."Consumption per Location" THEN
                  BlanketOrderLine.SETRANGE("Location Code","Location Code");
                //BlanketOrderLine.SETFILTER("Qty. to Receive",'<>%1',0);  //db, 25-05-10: M19111
                IF "Contract Type" = "Contract Type"::"Project Blanket Order" THEN
                  BlanketOrderLine.SETRANGE("Job No.","Project No.");
                IF "Contract Type" = "Contract Type"::"Service Blanket Order" THEN
                  BlanketOrderLine.SETRANGE("Service Contract No.",ReqLine2.GetServiceContract);
                IF BlanketOrderLine.FINDSET THEN
                  REPEAT
                    DeliverableQuan := BlanketOrderLine.GetQuanToBeDelivered;  //db, 25-05-10: M19111
                    IF RemainingQuantity > 0 THEN BEGIN
                      IF RemainingQuantity >= DeliverableQuan THEN
                        ProcessQuantity := DeliverableQuan  //db, 25-05-10: M19111
                      ELSE
                        ProcessQuantity := RemainingQuantity;

                      VALIDATE(Quantity,ProcessQuantity);
                      InsertPurchOrderLine(ReqLine2,PurchOrderHeader,BlanketOrderLine);
                      RemainingQuantity -= ProcessQuantity;
                    END;
                  UNTIL BlanketOrderLine.NEXT = 0;
              END;
            UNTIL BlanketOrder.NEXT = 0;

          //create order for remaing amount
          IF RemainingQuantity > 0 THEN BEGIN
            CLEAR(BlanketOrderLine);
            VALIDATE(Quantity,RemainingQuantity);
            InsertPurchOrderLine(ReqLine2,PurchOrderHeader,BlanketOrderLine);
          END;

        END;
      END;
    END;

    LOCAL PROCEDURE InsertPurchOrderLine@3(VAR ReqLine2@1000 : Record 246;VAR PurchOrderHeader@1001 : Record 38;BlanketOrderLine@1100525001 : Record 39);
    VAR
      PurchOrderLine2@1003 : Record 39;
      AddOnIntegrMgt@1002 : Codeunit 5403;
      DimensionSetIDArr@1004 : ARRAY [10] OF Integer;
      DropShptSplOrderDiffAddress@1006 : Boolean;
      lvTradeItemRec@1100528000 : Record 11012317;
      lvItemRec@1100485000 : Record 27;
      lvPurchQuoteLine@1210190007 : Record 39;
      RouteRefMgtCU@1210190009 : Codeunit 11012045;
      lvItemLevel@1100485001 : Integer;
      NewOrderType@1100525002 : Boolean;
      InvSetup@1100525000 : Record 313;
      CalChange@1100525003 : Record 11072016;
      CompInfoRec@1100528802 : Record 79;
      NonWorkDate@1100528801 : Boolean;
      dummyDesc@1100528800 : Text[30];
      AddTempPurchHeader@1100525004 : Boolean;
      ModifyTempPurchHeader@1100525005 : Boolean;
    BEGIN
      WITH ReqLine2 DO BEGIN
        IF ("No." = '') OR ("Vendor No." = '') OR (Quantity = 0) THEN
          EXIT;
        DropShptSplOrderDiffAddress := CheckAddressDetails(PurchOrderHeader,"Sales Order No.");

        //**4PS.sn
        //check need to create blanket order
        IF CheckCreateBlanketOrder(ReqLine2) THEN
          NewOrderType := PurchOrderHeader."Document Type" <> PurchOrderHeader."Document Type"::"Blanket Order"
        ELSE
          NewOrderType := PurchOrderHeader."Document Type" <> PurchOrderHeader."Document Type"::Order;
        //**4PS.en

        IF (PurchOrderHeader."Buy-from Vendor No." <> "Vendor No.") OR
           (PurchOrderHeader."Sell-to Customer No." <> "Sell-to Customer No.") OR
           (PrevShipToCode <> "Ship-to Code") OR
           (PurchOrderHeader."Order Address Code" <> "Order Address Code") OR
           (PurchOrderHeader."Currency Code" <> "Currency Code") OR
           (PrevPurchCode <> "Purchasing Code") OR
           //**4PS.sn
           (PrevSort <> "Sort Purchase") OR
           (PrevSalesOrderNo <> "Sales Order No.") OR //call 28060
           NewOrderType OR
           //**4PS.en
           DropShptSplOrderDiffAddress
        THEN BEGIN
          PurchOrderHeader.SetSkipStrategicPurchaseCheck(BlanketOrderLine."Document No." <> ''); //**4PS.n
          //InsertHeader(ReqLine2); //**4PS.o
          ExistingBlanketOrder := InsertHeader(ReqLine2); //**4PS.n
          LineCount := 0;
          NextLineNo := 0;
          //**4PS.sn
          AddTempPurchHeader := TRUE; //C025218
          PrevSort := "Sort Purchase";
          PrevSalesOrderNo := "Sales Order No."; //call 28060
          //**4PS.en
          PrevPurchCode := "Purchasing Code";
          PrevShipToCode := "Ship-to Code";
        END;

        //**4PS.sn RFC MULTI CURRENCY
        IF "Project No." <> TempPurchHeaderRec."Job No." THEN BEGIN
          IF CheckProjectCurrency("Project No.", PurchOrderHeader."Currency Code") THEN
            ERROR(Text011, "Project No.");
          IF PurchOrderHeader."Job No." <> '' THEN
            ERROR(Text011, "Project No.");
        END;
        //**4PS.en

        LineCount := LineCount + 1;
        IF NOT PlanningResiliency THEN
          Window.UPDATE(4,LineCount);

        TESTFIELD("Currency Code",PurchOrderHeader."Currency Code");

        //**4PS.sn
        PurchOrderLine.RESET;
        PurchOrderLine.SETRANGE(PurchOrderLine."Document Type",PurchOrderHeader."Document Type");
        PurchOrderLine.SETRANGE(PurchOrderLine."Document No.",PurchOrderHeader."No.");
        //**4PS.en

        PurchOrderLine.INIT;
        PurchOrderLine.BlockDynamicTracking(TRUE);
        PurchOrderLine.SetCreateFromReqLine; //**4PS.n
        PurchOrderLine.SuspendUpdateAmounts(TRUE); //**4PS.n
        //PurchOrderLine."Document Type" := PurchOrderLine."Document Type"::Order; //**4PS.o
        PurchOrderLine."Document Type" := PurchOrderHeader."Document Type"; //**4PS.n
        PurchOrderLine."Buy-from Vendor No." := "Vendor No.";
        PurchOrderLine."Document No." := PurchOrderHeader."No.";
        //**4PS.sn
        IF ExistingBlanketOrder THEN
          NextLineNo := DetLineNo(ReqLine2)
        ELSE
          //**4PS.en
          NextLineNo := NextLineNo + 10000;
        PurchOrderLine."Line No." := NextLineNo;

        //**4PS.sn
        PurchOrderLine."Input by" := USERID; //DP00469
        PurchOrderLine."Input Date" := TODAY; //DP00469
        //**4PS.en
        PurchOrderLine.INSERT;  //**4PS.n

        //**4PS02.sn
        PurchOrderLine."Contract Type" := "Contract Type";
        PurchOrderLine."Blanket Order No." := BlanketOrderLine."Document No.";
        PurchOrderLine."Blanket Order Line No." := BlanketOrderLine."Line No.";
        //**4PS02.en
        PurchOrderLine.VALIDATE(Type,Type);
        //**4PS.sn
        IF "Project No." + "Service Order No." <> '' THEN
          PurchOrderLine."System-Created Entry" := TRUE;  //db, 03-07-14: C002114, SpecialOrder TradeItem
        //**4PS.en
        PurchOrderLine.VALIDATE("No.","No.");
        PurchOrderLine.VALIDATE("Location Code","Location Code");
        PurchOrderLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
        PurchOrderLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        PurchOrderLine."Prod. Order No." := "Prod. Order No.";
        PurchOrderLine."Prod. Order Line No." := "Prod. Order Line No.";
        //**4PS.sn
        PurchOrderLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        PurchOrderLine."Trade Item" := "Trade Item";
        //**4PS.en

        //**4PS.sn, 05-04-11: M24388
        IF (Quantity > 0) AND ("Direct Unit Cost" < 0) THEN BEGIN
          Quantity := -Quantity;
          "Direct Unit Cost" := -"Direct Unit Cost";
        END;
        //**4PS.en, 05-04-11: M24388

        PurchOrderLine.VALIDATE(Quantity,Quantity);
        //RFC MULTI CURRENCY sn
        IF (PurchOrderHeader."Job No." <> '') AND (PurchOrderHeader."Currency Factor" <> "Currency Factor") THEN BEGIN
          "Direct Unit Cost" :=  "Direct Unit Cost" / "Currency Factor"; // so back to local currency
          "Direct Unit Cost" :=  "Direct Unit Cost" * PurchOrderHeader."Currency Factor"; //back to foreign currency new rate
        END;
        //RFC MULTI CURRENCY en

        IF PurchOrderHeader."Prices Including VAT" THEN
          PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100))
        ELSE
          PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost");

        PurchOrderLine.VALIDATE("Line Discount %","Line Discount %");
        PurchOrderLine."Vendor Item No." := "Vendor Item No.";

        PurchOrderLine.Description := Description;
        PurchOrderLine."Description 2" := "Description 2";
        PurchOrderLine."Sales Order No." := "Sales Order No.";
        PurchOrderLine."Sales Order Line No." := "Sales Order Line No.";
        PurchOrderLine."Prod. Order No." := "Prod. Order No.";
        PurchOrderLine."Bin Code" := "Bin Code";
        PurchOrderLine."Item Category Code" := "Item Category Code";
        PurchOrderLine.Nonstock := Nonstock;
        //PurchOrderLine.VALIDATE("Planning Flexibility","Planning Flexibility"); //HBK,M18052,moved down
        PurchOrderLine.VALIDATE("Purchasing Code","Purchasing Code");
        PurchOrderLine."Product Group Code" := "Product Group Code";
        //**4PS.sn
        PurchOrderLine."Scheme Code" := "Scheme Code";
        PurchOrderLine."Plot No." := "Plot No.";
        PurchOrderLine."Comments for Logistics" := "Comments for Logistics";
        PurchOrderLine."Sales Price" := "Sales Price";
        //**4PS.en
        IF "Due Date" <> 0D THEN BEGIN
          PurchOrderLine.VALIDATE("Expected Receipt Date","Due Date");
          PurchOrderLine."Requested Receipt Date" := PurchOrderLine."Planned Receipt Date";
          // dp00310.sn
          PurchSetup.GET;
          CompInfoRec.GET;
          IF PurchSetup."Allow Nonworking Receipt Date" THEN BEGIN
            NonWorkDate := CalendarMgmt.CheckDateStatus(CompInfoRec."Base Calendar Code", "Due Date", dummyDesc);
            IF NonWorkDate = TRUE THEN BEGIN
              PurchOrderLine."Requested Receipt Date" := "Due Date";
              PurchOrderLine."Expected Receipt Date" := "Due Date";
              PurchOrderLine."Planned Receipt Date" := "Due Date";
            END;
          END;
          // dp00310.en
        END;
        MODIFY;

        AddOnIntegrMgt.TransferFromReqLineToPurchLine(PurchOrderLine,ReqLine2);

        PurchOrderLine."Drop Shipment" := "Sales Order Line No." <> 0;

        IF PurchasingCode.GET("Purchasing Code") THEN
          IF PurchasingCode."Special Order" THEN BEGIN
            PurchOrderLine."Special Order Sales No." := "Sales Order No.";
            PurchOrderLine."Special Order Sales Line No." := "Sales Order Line No.";
            PurchOrderLine."Special Order" := TRUE;
            PurchOrderLine."Drop Shipment" := FALSE;
            PurchOrderLine."Sales Order No." := '';
            PurchOrderLine."Sales Order Line No." := 0;
            PurchOrderLine."Special Order" := TRUE;
            PurchOrderLine.UpdateUnitCost;
          END;

        //**4PS.sn
        IF (NOT PurchOrderLine."Drop Shipment") AND
           (NOT PurchOrderLine."Special Order") AND
           ((Deliver = Deliver::"Project Location") OR (Deliver = Deliver::"Service Location"))
        THEN
          PurchOrderLine.VALIDATE("Location Code", '');

        IF "Prod. Order Line No." = 0 THEN BEGIN
          IF "Project No." + "Service Order No." <> '' THEN
            TESTFIELD("Shortcut Dimension 2 Code");
          IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
            DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE,'');
            PurchOrderLine."Cost Type" := DimValRec."Cost Type" + 1;  //required for job/serv.order to determine GL-account
          END;
          IF "Project No." <> '' THEN BEGIN
            PurchOrderLine.VALIDATE("Job No.", "Project No.");
            PurchOrderLine.VALIDATE(Element, Element);
            PurchOrderLine."Extension Contract" := "Extension Contract";
            PurchOrderLine."Tender Paragraph" := "Tender Paragraph";
            PurchOrderLine."Tender Paragraph Part" := "Tender Paragraph Part";
          END;
          IF "Service Order No." <> '' THEN BEGIN
            PurchOrderLine.VALIDATE("Service Order No.", "Service Order No.");
          END;

          IF (Type = Type::Item) OR ("Basic Item" + "Trade Item" <> '') THEN BEGIN
            lvItemLevel := 0;
            IF NOT InvtSetup.GET THEN InvtSetup.INIT;
            IF lvItemLevel = 0 THEN BEGIN
              IF "Trade Item" <> '' THEN BEGIN
                lvItemLevel := 1;
                //db.sn, 16-04-15: C020734
                IF "Qty. per Unit of Measure" <> 1 THEN BEGIN
                  IF lvTradeItemRec.GET("Vendor (Trade Item)","Trade Item") THEN BEGIN
                    Quantity := Quantity * "Qty. per Unit of Measure";
                    VALIDATE("Unit of Measure Code", lvTradeItemRec."Application Unit");
                    PurchOrderLine.Quantity := Quantity;
                    PurchOrderLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
                    PurchOrderLine."Unit of Measure Code" := "Unit of Measure Code";
                  END;
                END;
                //db.en, 16-04-15: C020734
                PurchOrderLine.Manufacturer := Manufacturer;
                PurchOrderLine."Basic Item" := "Basic Item";
                PurchOrderLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
                PurchOrderLine."Trade Item" := '';
                PurchOrderLine.VALIDATE("Trade Item", "Trade Item");
                //db.sn, 10-05-11: M26264
                IF InvtSetup."Default Item" <> "No." THEN BEGIN
                  IF lvItemRec.GET("No.") THEN BEGIN
                    PurchOrderLine."No." := "No.";
                    PurchOrderLine."Item No." := "No.";
                  END;
                END;
                //db.en, 10-05-11: M26264
              END;
            END;
            IF lvItemLevel = 0 THEN BEGIN
              IF "Basic Item" <> '' THEN BEGIN
                lvItemLevel := 2;
                PurchOrderLine.Manufacturer := Manufacturer;
                PurchOrderLine."Basic Item" := '';
                PurchOrderLine.VALIDATE("Basic Item", "Basic Item");
              END;
            END;
            IF lvItemLevel = 0 THEN BEGIN
              IF InvtSetup."Default Item" <> "No." THEN
                lvItemLevel := 3;
              IF lvItemLevel = 3 THEN BEGIN
                IF "Qty. per Unit of Measure" <> 1 THEN BEGIN
                  IF lvItemRec.GET("No.") THEN BEGIN
                    Quantity := Quantity * "Qty. per Unit of Measure";
                    VALIDATE("Unit of Measure Code", lvItemRec."Base Unit of Measure");
                    PurchOrderLine.Quantity := Quantity;
                    PurchOrderLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
                    PurchOrderLine."Unit of Measure Code" := "Unit of Measure Code";
                  END;
                END;
                PurchOrderLine."Item No." := '';
                PurchOrderLine.VALIDATE("Item No." , "No.");
                PurchOrderLine.VALIDATE(Quantity); //C015667
              END;
            END;
            IF lvItemLevel = 0 THEN BEGIN
              //Cost Object
              PurchOrderLine."Item No." := '';
             "Price Agreement" := TRUE;
            END;

            PurchOrderLine."Price Agreement" := "Price Agreement";
            PurchOrderLine."Purchase Route Reference" := "Purchase Route Reference";
            IF RouteRefMgtCU.CheckReferenceHasSelectedQuote("Purchase Route Reference", lvPurchQuoteLine) THEN BEGIN
              PurchOrderLine."Price Agreement" := TRUE;
              "Direct Unit Cost" := lvPurchQuoteLine."Direct Unit Cost";
            END;
          END ELSE BEGIN
            //db.sn, 17-04-13: C006376
            IF "Trade Item" = '' THEN
              "Price Agreement" := TRUE;
            PurchOrderLine."Price Agreement" := "Price Agreement";
            //db.en, 17-04-13: C006376
            IF "Discount % (Item)" <> 0 THEN
              PurchOrderLine."Price Agreement" := TRUE;
          END;

          //db, 22-02-05: due to validate of item, project several settings can be reset: dim2 evaluates account (and price)
          PurchOrderLine."Additional Cost (Service)" := "Additional Cost (Service)";
          PurchOrderLine.VALIDATE("Shortcut Dimension 1 Code", "Shortcut Dimension 1 Code");
          PurchOrderLine.VALIDATE("Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
          IF PurchOrderLine."Price Agreement" = TRUE THEN BEGIN
            //db, 22-02-05: evaluate price agreement (from quote or manual) reset by validate item-data
            "Direct Unit Cost" :=  "Direct Unit Cost" *  PurchOrderLine."Qty. per Unit of Measure";
            IF PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100))
            ELSE
              PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost");
            IF "Unit Cost (LCY)" <> 0 THEN
              PurchOrderLine."Unit Cost (LCY)" := "Unit Cost (LCY)" * "Qty. per Unit of Measure";
            IF "Unit Price (LCY)" <> 0 THEN
              PurchOrderLine."Unit Price (LCY)" := "Unit Price (LCY)" * "Qty. per Unit of Measure";
            PurchOrderLine."Discount % (Item)" := "Discount % (Item)";
          END;

          InvSetup.GET;
          IF (PurchOrderLine."Blanket Order No." <> '') //AND (PurchOrderLine."Item No." <> '') AND
      //      ((PurchOrderLine."Trade Item" = '') OR (NOT InvSetup."Info Trade Item Leading")) //mg.o, 20-06-11: M27193
          THEN BEGIN
            PurchOrderLine.VALIDATE("Direct Unit Cost",BlanketOrderLine."Direct Unit Cost");
            IF BlanketOrderLine."Unit Cost (LCY)" <> 0 THEN
              PurchOrderLine.VALIDATE("Unit Cost (LCY)",BlanketOrderLine."Unit Cost (LCY)");
            IF BlanketOrderLine."Unit Price (LCY)" <> 0 THEN
              PurchOrderLine.VALIDATE("Unit Price (LCY)",BlanketOrderLine."Unit Price (LCY)");
          END;

          PurchOrderLine."Cost Component" := "Cost Component";
          PurchOrderLine.Description := Description;
          PurchOrderLine."Description 2" := "Description 2";
          PurchOrderLine."Variant Code" := "Variant Code";
          PurchOrderLine."Posting Date" := PurchOrderHeader."Posting Date";
          IF "Order Date" <> 0D THEN BEGIN
            IF (("Project No." <> '') OR ("Service Order No." <> '')) AND
               (PurchOrderHeader."Document Type" <> PurchOrderHeader."Document Type"::"Blanket Order") THEN
            BEGIN
              PurchOrderLine."Order Date" := PurchOrderHeader."Order Date";
            END ELSE BEGIN
              PurchOrderLine."Order Date" := "Order Date";
            END;
          END;
          IF "Due Date" <> 0D THEN BEGIN
            PurchOrderLine.VALIDATE("Expected Receipt Date", "Due Date");
            PurchOrderLine."Requested Receipt Date" := "Due Date";
          END;
          IF "Requested Receipt Date" <> 0D THEN
            PurchOrderLine."Requested Receipt Date" := "Requested Receipt Date";
          GetDeliveryPeriod(PurchOrderLine."Order Date", PurchOrderLine."Expected Receipt Date",
                            PurchOrderLine."Lead Time Calculation");

          IF PurchOrderLine."Expected Receipt Date" <> 0D THEN
            PurchOrderLine.VALIDATE("Planned Receipt Date",
              CalendarMgmt.CalcDateBOC2(PurchOrderLine.InternalLeadTimeDays(PurchOrderLine."Expected Receipt Date"),
                                        PurchOrderLine."Expected Receipt Date",
                                        CalChange."Source Type"::Location,PurchOrderLine."Location Code",'',
                                        CalChange."Source Type"::Vendor,PurchOrderLine."Buy-from Vendor No.",'',TRUE))
          ELSE
            PurchOrderLine.VALIDATE("Planned Receipt Date", PurchOrderLine."Expected Receipt Date");

          // dp00310.sn
          IF "Due Date" <> 0D THEN BEGIN
            PurchSetup.GET;
            CompInfoRec.GET;
            IF PurchSetup."Allow Nonworking Receipt Date" THEN BEGIN
              NonWorkDate := CalendarMgmt.CheckDateStatus(CompInfoRec."Base Calendar Code", "Due Date", dummyDesc);
              IF NonWorkDate = TRUE THEN BEGIN
                PurchOrderLine."Requested Receipt Date" := "Due Date";
                PurchOrderLine."Expected Receipt Date" := "Due Date";
                PurchOrderLine."Planned Receipt Date" := "Due Date";
              END;
            END;
          END;
          // dp00310.en

          PurchOrderLine."Bin Code" := "Bin Code";  //db, 02-11-10 (disturbed by validate of project/no.)
          PurchOrderLine."Purchase Action" := "Purchase Action";
          PurchOrderLine."Purchase Phase" := "Purchase Phase";
          PurchOrderLine.VALIDATE(Text, Text);
          IF (Type = Type::"G/L Account") AND ("Project No." + "Service Order No." = '') THEN BEGIN
            PurchOrderLine.Type := Type::"G/L Account";
            PurchOrderLine."No." := "No.";
          END;
        END;
        PurchOrderLine.SuspendUpdateAmounts(FALSE);
        PurchOrderLine.UpdateAmounts;
        PurchOrderLine.VALIDATE("Planning Flexibility","Planning Flexibility");
        PurchOrderLine."Entity Type" := "Entity Type";
        PurchaseLineExtension."Yard No." := "Yard No.";
        PurchaseLineExtension."System No." := "System No.";
        PurchaseLineExtension."Entity No." := "Entity No.";
        PurchaseLineExtension."Cable Transit Pos." := "Gland Position";
        PurchaseLineExtension.UpdatePurchLineExtension(
          PurchOrderLine."Document Type", PurchOrderLine."Document No.", PurchOrderLine."Line No.");
        PurchOrderLine.VALIDATE("Item Category Code", "Item Category Code");
        PurchOrderLine."FSC Type Code" := "FSC Type Code";
        //**4PS.en

        ReserveReqLine.TransferReqLineToPurchLine(ReqLine2,PurchOrderLine,"Quantity (Base)",FALSE);
        DimensionSetIDArr[1] := PurchOrderLine."Dimension Set ID";
        DimensionSetIDArr[2] := "Dimension Set ID";
        PurchOrderLine."Dimension Set ID" :=
          DimMgt.GetCombinedDimensionSetID(
            DimensionSetIDArr,PurchOrderLine."Shortcut Dimension 1 Code",PurchOrderLine."Shortcut Dimension 2 Code");
        //**4PS.sn
        PurchOrderLine."Modified by" := USERID; //DP00469
        PurchOrderLine."Last Date Modified" := TODAY;//DP00469
        //**4PS.en
        //PurchOrderLine.INSERT; //**4PS.o
        PurchOrderLine.MODIFY;  //**4PS.n

        IF Reserve THEN
          ReserveBindingOrderToPurch(PurchOrderLine,ReqLine2);

        //**4PS.sn
        PurchOrderLine.CreatePurchOrderControl(FALSE);
        //**4PS.en

        IF PurchOrderLine."Drop Shipment" OR PurchOrderLine."Special Order" THEN BEGIN
          SalesOrderLine.LOCKTABLE;
          SalesOrderHeader.LOCKTABLE;
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,"Sales Order No.");
          IF NOT PurchOrderLine."Special Order" THEN
            TESTFIELD("Ship-to Code",SalesOrderHeader."Ship-to Code");
          SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
          IF "Trade Item" = '' THEN  //**4PS.n (db, 03-07-14: C002114, SpecialOrder TradeItem)
            SalesOrderLine.TESTFIELD(Type,SalesOrderLine.Type::Item);
          IF SalesOrderLine."Purch. Order Line No." <> 0 THEN
            ERROR(Text006,SalesOrderLine."No.",SalesOrderLine."Document No.",SalesOrderLine."Purchase Order No.");
          IF SalesOrderLine."Special Order Purchase No." <> '' THEN
            ERROR(Text006,SalesOrderLine."No.",SalesOrderLine."Document No.",SalesOrderLine."Special Order Purchase No.");
          IF NOT PurchOrderLine."Special Order" THEN
            TESTFIELD("Sell-to Customer No.",SalesOrderLine."Sell-to Customer No.");
          TESTFIELD(Type,SalesOrderLine.Type);
          TESTFIELD(
            Quantity,
            ROUND(
              SalesOrderLine."Outstanding Quantity" *
              SalesOrderLine."Qty. per Unit of Measure" /
              "Qty. per Unit of Measure",
              0.00001));
          TESTFIELD("No.",SalesOrderLine."No.");
          TESTFIELD("Location Code",SalesOrderLine."Location Code");
          TESTFIELD("Variant Code",SalesOrderLine."Variant Code");
          TESTFIELD("Bin Code",SalesOrderLine."Bin Code");
          TESTFIELD("Prod. Order No.",'');
          TESTFIELD("Qty. per Unit of Measure","Qty. per Unit of Measure");
          SalesOrderLine.VALIDATE("Unit Cost (LCY)");

          IF SalesOrderLine."Special Order" THEN BEGIN
            SalesOrderLine."Special Order Purchase No." := PurchOrderLine."Document No.";
            SalesOrderLine."Special Order Purch. Line No." := PurchOrderLine."Line No.";
          END ELSE BEGIN
            SalesOrderLine."Purchase Order No." := PurchOrderLine."Document No.";
            SalesOrderLine."Purch. Order Line No." := PurchOrderLine."Line No.";
          END;
          SalesOrderLine.MODIFY;
        END;

        IF TransferExtendedText.PurchCheckIfAnyExtText(PurchOrderLine,FALSE) THEN BEGIN
          TransferExtendedText.InsertPurchExtText(PurchOrderLine);
          PurchOrderLine2.SETRANGE("Document Type",PurchOrderHeader."Document Type");
          PurchOrderLine2.SETRANGE("Document No.",PurchOrderHeader."No.");
          IF PurchOrderLine2.FINDLAST THEN
            NextLineNo := PurchOrderLine2."Line No.";
        END;

        //**4PS.sn C025218
        IF AddTempPurchHeader THEN BEGIN
          TempPurchHeaderRec.COPY(PurchOrderHeader);
          TempPurchHeaderRec."Expected Receipt Date" := "Due Date";
          TempPurchHeaderRec."Requested Receipt Date":= "Requested Receipt Date";
          TempPurchHeaderRec."Service Order No." := "Service Order No.";
          TempPurchHeaderRec."Job No." := "Project No.";
          TempPurchHeaderRec.INSERT;
        END ELSE BEGIN
          IF "Project No." <> TempPurchHeaderRec."Job No." THEN BEGIN
            TempPurchHeaderRec."Job No." := '';
            ModifyTempPurchHeader := TRUE;
          END;
          IF "Service Order No." <> TempPurchHeaderRec."Service Order No." THEN BEGIN
            TempPurchHeaderRec."Service Order No." := '';
            ModifyTempPurchHeader := TRUE;
          END;
          IF "Due Date" < TempPurchHeaderRec."Expected Receipt Date" THEN BEGIN
            TempPurchHeaderRec."Expected Receipt Date" := "Due Date";
            ModifyTempPurchHeader := TRUE;
          END;
          IF ("Requested Receipt Date" <> 0D) AND
             ("Requested Receipt Date" < TempPurchHeaderRec."Requested Receipt Date") THEN BEGIN
            TempPurchHeaderRec."Requested Receipt Date" := "Requested Receipt Date";
            ModifyTempPurchHeader := TRUE;
          END;
          IF ModifyTempPurchHeader THEN
            TempPurchHeaderRec.MODIFY;
        END;
        //**4PS.en
      END;
    END;

    LOCAL PROCEDURE InsertHeader@4(VAR ReqLine2@1000 : Record 246) ExistingBlanketOrder : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
      Vendor@1003 : Record 23;
      SpecialOrder@1001 : Boolean;
      PurchaserRec@1100485000 : Record 13;
      Job@1210190001 : Record 11072003;
      BlanketOrder@1100525000 : Boolean;
      DropShipment@1100409000 : Boolean;
    BEGIN
      WITH ReqLine2 DO BEGIN
        OrderCounter := OrderCounter + 1;
        IF NOT PlanningResiliency THEN
          Window.UPDATE(3,OrderCounter);

        //**4PS.sn
        BlanketOrder := CheckCreateBlanketOrder(ReqLine2);
        ExistingBlanketOrder := BlanketOrder AND "Use Blanket Order" AND
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::"Blanket Order","Ref. Order No.");
        IF NOT ExistingBlanketOrder THEN BEGIN
        //**4PS.en
          PurchSetup.GET;
          PurchSetup.TESTFIELD("Order Nos.");
          CLEAR(PurchOrderHeader);
          PurchOrderHeader.INIT;

          //**4PS.sn
          //check need to create blanket order
          IF BlanketOrder THEN
            PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::"Blanket Order"
          ELSE
          //**4PS.en
            PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
          PurchOrderHeader."No." := '';
          PurchOrderHeader."Posting Date" := PostingDateReq;

          //**4PS.sn
          IF gAskForNoSerie THEN BEGIN
            PurchOrderHeader."No. Series" := gNoSeries;
            PurchOrderHeader.GetNoForSelectedNoSeries(PurchOrderHeader);
          END;
          //**4PS.en

          PurchOrderHeader.INSERT(TRUE);
          CheckAddressDetails(PurchOrderHeader,"Sales Order No.");
          PurchOrderHeader."Your Reference" := ReferenceReq;
          PurchOrderHeader."Order Date" := OrderDateReq;
          //PurchOrderHeader."Expected Receipt Date" := ReceiveDateReq; //**4PS.o
          //**4PS.sn
          PurchOrderHeader."Purchaser Code" := ''; //db, 08-05-15: 26032
          //-skip default purchaser by user initialized by InitRecord on init-trigger of PurchOrderHeader
          //-if Dim1 filled for purchaser, validate vendor creates dimension due to standard Navision rules
          //**4PS.en
          PurchOrderHeader.VALIDATE("Buy-from Vendor No.","Vendor No.");
          //IF "Order Address Code" <> '' THEN //**4PS.o call 24252
            PurchOrderHeader.VALIDATE("Order Address Code","Order Address Code");

          IF "Sell-to Customer No." <> '' THEN
            PurchOrderHeader.VALIDATE("Sell-to Customer No.","Sell-to Customer No.");

          PurchOrderHeader.VALIDATE("Currency Code","Currency Code");

          //**4PS.sn
          IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
            IF PurchasingCode."Special Order" THEN
              SpecialOrder := TRUE;
            IF PurchasingCode."Drop Shipment" THEN
              DropShipment := TRUE;  //db, 14-09-12: C002118
          END;
          //**4PS.en
          IF NOT SpecialOrder THEN BEGIN
            IF "Ship-to Code" <> '' THEN
              PurchOrderHeader.VALIDATE("Ship-to Code","Ship-to Code")
            ELSE
              PurchOrderHeader.VALIDATE("Location Code","Location Code");
          END ELSE BEGIN
            PurchOrderHeader.VALIDATE("Location Code","Location Code");
            PurchOrderHeader.SetShipToForSpecOrder;
            IF Vendor.GET(PurchOrderHeader."Buy-from Vendor No.") THEN
              PurchOrderHeader.VALIDATE("Shipment Method Code",Vendor."Shipment Method Code");
          END;
          IF NOT SpecialOrder THEN
            IF SalesHeader.GET(SalesHeader."Document Type"::Order,"Sales Order No.") THEN BEGIN
              PurchOrderHeader."Ship-to Name" := SalesHeader."Ship-to Name";
              PurchOrderHeader."Ship-to Name 2" := SalesHeader."Ship-to Name 2";
              PurchOrderHeader."Ship-to Address" := SalesHeader."Ship-to Address";
              PurchOrderHeader."Ship-to Address 2" := SalesHeader."Ship-to Address 2";
              PurchOrderHeader."Ship-to Post Code" := SalesHeader."Ship-to Post Code";
              PurchOrderHeader."Ship-to City" := SalesHeader."Ship-to City";
              PurchOrderHeader."Ship-to Contact" := SalesHeader."Ship-to Contact";
            END;
          IF SpecialOrder THEN
            IF Vendor.GET(PurchOrderHeader."Buy-from Vendor No.") THEN
              PurchOrderHeader."Shipment Method Code" := Vendor."Shipment Method Code";

          //**4PS.sn
          PurchOrderHeader.VALIDATE("Received on Project", "Project No.");
          PurchOrderHeader.VALIDATE("Service Order No.", "Service Order No.");
          PurchOrderHeader.VALIDATE(Deliver, Deliver);
          PurchOrderHeader.VALIDATE("Ship To Location", "Ship To Location");
          //db.sn, 08-05-15: 26032
          IF PurchaserRec.GET(PurchSelForm) THEN
            PurchOrderHeader.VALIDATE("Purchaser Code", PurchSelForm); //check create dim1 and fill reference (icm)
          //db.en, 08-05-15: 26032
          IF FirstOrder = '' THEN
            FirstOrder := PurchOrderHeader."No.";
          LastOrder := PurchOrderHeader."No.";
          IF "Shortcut Dimension 1 Code" <> '' THEN
            PurchOrderHeader.VALIDATE("Shortcut Dimension 1 Code", "Shortcut Dimension 1 Code");
          PurchOrderHeader."Amounts only" := FALSE;
          IF CheckProjectCurrency("Project No.", PurchOrderHeader."Currency Code") THEN BEGIN
            PurchOrderHeader.VALIDATE("Job No.", "Project No.");
            IF Job.GET("Project No.") THEN
              PurchOrderHeader.Expediter := Job.Expediter;
          END;
          IF ("Sales Order No." <> '') AND DropShipment THEN BEGIN  //db, 14-09-12: C002118
            SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order, "Sales Order No.");
            PurchOrderHeader.GetAddressFromSalesOrder(SalesOrderHeader);  //call 28060
          END;
          //**4PS.en
          PurchOrderHeader.MODIFY;
        END; //**4PS.n
        //COMMIT;  //**4PS.o (Call 11043, 11107, 11438)
        LOCKTABLE;
        PurchOrderHeader.MARK(TRUE);
      END;
    END;

    LOCAL PROCEDURE FinalizeOrderHeader@5(PurchOrderHeader@1000 : Record 38;VAR ReqLine@1002 : Record 246);
    VAR
      ReqLine2@1003 : Record 246;
      lvPurchOrderHeaderRec2@1210190000 : Record 38;
      lvPurchOrderLineRec2@1100525000 : Record 39;
      PurchLine2@1100525001 : Record 39;
      Job@1210190001 : Record 11072003;
      CarryOutAction@1001 : Codeunit 99000813;
      DocumentPrint@1100528402 : Codeunit 229;
      ChangeStatus@1100528401 : 'None,Released,Closed';
      DirectPostOrder@1100528400 : 'According to Vendor,Not';
    BEGIN
      IF ReqTemplate.Recurring THEN BEGIN
        // Recurring journal
        ReqLine2.COPY(ReqLine);
        ReqLine2.SETRANGE("Vendor No.",PurchOrderHeader."Buy-from Vendor No.");
        ReqLine2.SETRANGE("Sell-to Customer No.",PurchOrderHeader."Sell-to Customer No.");
        ReqLine2.SETRANGE("Ship-to Code",PurchOrderHeader."Ship-to Code");
        ReqLine2.SETRANGE("Order Address Code",PurchOrderHeader."Order Address Code");
        ReqLine2.SETRANGE("Currency Code",PurchOrderHeader."Currency Code");
        ReqLine2.FIND('-');
        REPEAT
          OrderLineCounter := OrderLineCounter + 1;
          IF NOT PlanningResiliency THEN
            Window.UPDATE(5,OrderLineCounter);
          IF ReqLine2."Order Date" <> 0D THEN BEGIN
            ReqLine2.VALIDATE(
              "Order Date",
              CALCDATE(ReqLine2."Recurring Frequency",ReqLine2."Order Date"));
            ReqLine2.VALIDATE("Currency Code",PurchOrderHeader."Currency Code");
          END;
          IF (ReqLine2."Recurring Method" = ReqLine2."Recurring Method"::Variable) AND
             (ReqLine2."No." <> '')
          THEN BEGIN
            ReqLine2.Quantity := 0;
            ReqLine2."Line Discount %" := 0;
          END;
          ReqLine2.MODIFY;
        UNTIL ReqLine2.NEXT = 0;
      END ELSE BEGIN
        // Not a recurring journal
        OrderLineCounter := OrderLineCounter + LineCount;
        IF NOT PlanningResiliency THEN
          Window.UPDATE(5,OrderLineCounter);
        ReqLine2.COPY(ReqLine);
        ReqLine2.SETRANGE("Vendor No.",PurchOrderHeader."Buy-from Vendor No.");
        ReqLine2.SETRANGE("Sell-to Customer No.",PurchOrderHeader."Sell-to Customer No.");
        ReqLine2.SETRANGE("Ship-to Code",PurchOrderHeader."Ship-to Code");
        ReqLine2.SETRANGE("Order Address Code",PurchOrderHeader."Order Address Code");
        ReqLine2.SETRANGE("Currency Code",PurchOrderHeader."Currency Code");
        IF ReqLine2.FIND('-') THEN BEGIN
          ReqLine2.BlockDynamicTracking(TRUE);
          ReservEntry.SETCURRENTKEY(
            "Source ID","Source Ref. No.","Source Type","Source Subtype",
            "Source Batch Name","Source Prod. Order Line");
          REPEAT
            TempFailedReqLine := ReqLine2;
            IF NOT TempFailedReqLine.FIND THEN BEGIN
              ReserveReqLine.FilterReservFor(ReservEntry,ReqLine2);
              ReservEntry.DELETEALL(TRUE);
              ReqLine2.DELETE(TRUE);
            END;
          UNTIL ReqLine2.NEXT = 0;
        END;
      END;
      //**4PS.sn
      IF TempPurchHeaderRec.FIND('-') THEN BEGIN
        REPEAT
          PurchOrderHeader.GET(TempPurchHeaderRec."Document Type",TempPurchHeaderRec."No.");
          PurchOrderHeader."Expected Receipt Date" := TempPurchHeaderRec."Expected Receipt Date";
          IF TempPurchHeaderRec."Requested Receipt Date" <> 0D THEN
            PurchOrderHeader."Requested Receipt Date" := TempPurchHeaderRec."Requested Receipt Date"
          ELSE
            PurchOrderHeader."Requested Receipt Date" := TempPurchHeaderRec."Expected Receipt Date";
          PurchOrderHeader.SetHideValidationDialog(TRUE);  //avoid message on validate Location by Job
      //  PurchOrderHeader."Job No." := TempPurchHeaderRec."Job No.";
          IF PurchOrderHeader."Job No." = '' THEN   // RFC MULTI CURRENCY only this line
            IF TempPurchHeaderRec."Job No." <> '' THEN BEGIN//mg, 17-05-11, M27041
              PurchOrderHeader.VALIDATE("Job No.", TempPurchHeaderRec."Job No.");
              IF Job.GET(TempPurchHeaderRec."Job No.") THEN
                PurchOrderHeader.Expediter := Job.Expediter;
            END;
          PurchOrderHeader."Service Order No." := TempPurchHeaderRec."Service Order No.";
          //call 31254.sn
          IF (PurchOrderHeader."Service Order No." = '') AND
             (PurchOrderHeader.Deliver = PurchOrderHeader.Deliver::"Service Location") THEN
            PurchOrderHeader.VALIDATE(PurchOrderHeader.Deliver, 0);
          //call 31254.en
          PurchOrderHeader.SetHideValidationDialog(FALSE);
          PurchOrderHeader.MODIFY;
          IF PurchOrderHeader."Document Type" = PurchOrderHeader."Document Type"::Order THEN
            PurchOrderHeader.CalcInvDiscForHeader;
          PurchOrderHeader.DetermineRemovalContribution;
          //UpdateAdviceByRouteReference(PurchOrderHeader);  //DP00137
          IF LinkItemDocsToOrder AND (PurchOrderHeader."Document Type" = PurchOrderHeader."Document Type"::Order) THEN
            PurchLine2.LinkItemDocumentsToPurchHead(PurchOrderHeader, PurchLine2, TRUE);

          lvPurchOrderLineRec2.SETRANGE("Document Type",PurchOrderHeader."Document Type");
          lvPurchOrderLineRec2.SETRANGE("Document No.",PurchOrderHeader."No.");
          IF lvPurchOrderLineRec2.ISEMPTY THEN BEGIN
            TempPurchHeaderRec.DELETE;
            PurchOrderHeader.DELETE(TRUE);
          END;
        UNTIL TempPurchHeaderRec.NEXT = 0;
      END;
      //**4PS.en

      COMMIT;

      //**4PS.so
      //CarryOutAction.SetPrintOrder(PrintPurchOrders);
      //CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
      //**4PS.eo

      //**4PS.sn
      IF TempPurchHeaderRec.FIND('-') THEN BEGIN
        REPEAT
          PurchOrderHeader.GET(TempPurchHeaderRec."Document Type",TempPurchHeaderRec."No."); //**4PS.n
          IF PurchOrderHeader."Buy-from Vendor No." <> '' THEN BEGIN
            VendorRec.GET(PurchOrderHeader."Buy-from Vendor No.");
            IF PrintPurchOrders THEN BEGIN //kkleermaker, 110706, M24084
              CarryOutAction.SetPrintOrder(PrintPurchOrders);
              CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
            END;
            IF (ProcBasedOnElectronicOrderType) THEN BEGIN
              IF (NOT PrintPurchOrders) AND
                 (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::Standard)
              THEN BEGIN
                CarryOutAction.SetPrintOrder(TRUE);
                CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
              END;
              IF (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"ICM/ICF") AND
                 (VendorRec."ICM Login Code" <> '')
              THEN BEGIN
                lvPurchOrderHeaderRec2.RESET;
                lvPurchOrderHeaderRec2 := PurchOrderHeader;
                lvPurchOrderHeaderRec2.SETRECFILTER;
                REPORT.RUNMODAL(REPORT::"Create ICM Files",FALSE,FALSE,lvPurchOrderHeaderRec2);
              END;
              IF VendorRec.PurchaseOrdersAreSentByEMail AND
                 (PurchOrderHeader.GetEMailOrder <> '')
              THEN BEGIN
                lvPurchOrderHeaderRec2.RESET;
                lvPurchOrderHeaderRec2 := PurchOrderHeader;
                lvPurchOrderHeaderRec2.SETRECFILTER;
                DocumentPrint.EmailPurchHeader(
                  lvPurchOrderHeaderRec2, FALSE, ChangeStatus::None,
                  DirectPostOrder::"According to Vendor", FALSE, TRUE);
              END;
              IF ((VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"GS1 (SOAP)") OR
                  (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"GS1 (XML-RPC)")) AND
                 (VendorRec."GLN Code" <> '') AND
                 (VendorRec."URL GS1 Purchase Order" <> '')
              THEN BEGIN
                lvPurchOrderHeaderRec2.RESET;
                lvPurchOrderHeaderRec2 := PurchOrderHeader;
                lvPurchOrderHeaderRec2.SETRECFILTER;
                REPORT.RUNMODAL(REPORT::"Send Purchase Order GS1", FALSE, FALSE, lvPurchOrderHeaderRec2);
              END;
            END;
          END;
        UNTIL TempPurchHeaderRec.NEXT = 0;
        COMMIT;
        ErrorRec.SETRANGE("User ID", USERID);
        ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"ICM Export");
        IF ErrorRec.FIND('-') THEN
          PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
      END;
      TempPurchHeaderRec.DELETEALL;
      //**4PS.en
    END;

    LOCAL PROCEDURE CheckRecurringLine@10(VAR ReqLine2@1000 : Record 246);
    BEGIN
      WITH ReqLine2 DO BEGIN
        IF "No." <> '' THEN
          IF ReqTemplate.Recurring THEN BEGIN
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            IF "Recurring Method" = "Recurring Method"::Variable THEN
              TESTFIELD(Quantity);
          END ELSE BEGIN
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency","0DF");
          END;
      END;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@6(VAR ReqLine2@1000 : Record 246);
    BEGIN
      WITH ReqLine2 DO BEGIN
        IF ("No." <> '') AND ("Recurring Method" <> 0) AND ("Order Date" <> 0D) THEN BEGIN
          Day := DATE2DMY("Order Date",1);
          Week := DATE2DWY("Order Date",2);
          Month := DATE2DMY("Order Date",2);
          MonthText := FORMAT("Order Date",0,Text007);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Order Date");
          IF NOT AccountingPeriod.FINDLAST THEN
            AccountingPeriod.Name := '';
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
        END;
      END;
    END;

    LOCAL PROCEDURE ReserveBindingOrderToPurch@7(VAR PurchLine@1005 : Record 39;VAR ReqLine@1000 : Record 246);
    VAR
      ProdOrderComp@1004 : Record 5407;
      SalesLine@1007 : Record 37;
      ServLine@1009 : Record 5902;
      JobPlanningLine@1010 : Record 11020401;
      AsmLine@1013 : Record 901;
      ReservEntry@1003 : Record 337;
      TrackingSpecification@1016 : Record 336;
      ReserveProdOrderComp@1002 : Codeunit 99000838;
      ReserveSalesLine@1008 : Codeunit 99000832;
      ServLineReserve@1011 : Codeunit 99000842;
      JobPlanningLineReserve@1012 : Codeunit 1032;
      AsmLineReserve@1014 : Codeunit 926;
      ReservMgt@1006 : Codeunit 99000845;
      ReservQty@1015 : Decimal;
      ReservQtyBase@1001 : Decimal;
    BEGIN
      CLEAR(ReservMgt);

      PurchLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      IF (PurchLine."Quantity (Base)" - PurchLine."Reserved Qty. (Base)") > ReqLine."Demand Quantity (Base)" THEN BEGIN
        ReservQty := ReqLine."Demand Quantity";
        ReservQtyBase := ReqLine."Demand Quantity (Base)";
      END ELSE BEGIN
        ReservQty := PurchLine.Quantity - PurchLine."Reserved Quantity";
        ReservQtyBase := PurchLine."Quantity (Base)" - PurchLine."Reserved Qty. (Base)";
      END;
      ReservMgt.SetPurchLine(PurchLine);

      CASE ReqLine."Demand Type" OF
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.GET(
              ReqLine."Demand Subtype",
              ReqLine."Demand Order No.",
              ReqLine."Demand Line No.",
              ReqLine."Demand Ref. No.");
            ReservEntry."Source Type" := DATABASE::"Prod. Order Component";
            ReserveProdOrderComp.SetBinding(ReservEntry.Binding::"Order-to-Order");
            ReservMgt.CreateTrackingSpecification(TrackingSpecification,
              DATABASE::"Purchase Line",
              PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
              PurchLine."Variant Code",PurchLine."Location Code",'','',
              PurchLine."Qty. per Unit of Measure");
            ReserveProdOrderComp.CreateReservationSetFrom(TrackingSpecification);
            ReserveProdOrderComp.CreateReservation(
              ProdOrderComp,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase,'','');
            ProdOrderComp.MODIFY;
          END;
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.GET(ReqLine."Demand Subtype",ReqLine."Demand Order No.",ReqLine."Demand Line No.");
            ReservEntry."Source Type" := DATABASE::"Sales Line";
            ReserveSalesLine.SetBinding(ReservEntry.Binding::"Order-to-Order");
            ReservMgt.CreateTrackingSpecification(TrackingSpecification,
              DATABASE::"Purchase Line",
              PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
              PurchLine."Variant Code",PurchLine."Location Code",'','',
              PurchLine."Qty. per Unit of Measure");
            ReserveSalesLine.CreateReservationSetFrom(TrackingSpecification);
            ReserveSalesLine.CreateReservation(
              SalesLine,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase,'','');
            IF SalesLine.Reserve = SalesLine.Reserve::Never THEN
              SalesLine.Reserve := SalesLine.Reserve::Optional;
            SalesLine.MODIFY;
          END;
        DATABASE::"Service Line":
          BEGIN
            ServLine.GET(ReqLine."Demand Subtype",ReqLine."Demand Order No.",ReqLine."Demand Line No.");
            ReservEntry."Source Type" := DATABASE::"Service Line";
            ServLineReserve.SetBinding(ReservEntry.Binding::"Order-to-Order");
            ReservMgt.CreateTrackingSpecification(TrackingSpecification,
              DATABASE::"Purchase Line",
              PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
              PurchLine."Variant Code",PurchLine."Location Code",'','',
              PurchLine."Qty. per Unit of Measure");
            ServLineReserve.CreateReservationSetFrom(TrackingSpecification);
            ServLineReserve.CreateReservation(
              ServLine,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase,'','');
            IF ServLine.Reserve = ServLine.Reserve::Never THEN
              ServLine.Reserve := ServLine.Reserve::Optional;
            ServLine.MODIFY;
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            JobPlanningLine.SETRANGE("Job Contract Entry No.",ReqLine."Demand Line No.");
            JobPlanningLine.FINDFIRST;
            ReservEntry."Source Type" := DATABASE::"Job Planning Line";
            JobPlanningLineReserve.SetBinding(ReservEntry.Binding::"Order-to-Order");
            ReservMgt.CreateTrackingSpecification(TrackingSpecification,
              DATABASE::"Purchase Line",
              PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
              PurchLine."Variant Code",PurchLine."Location Code",'','',
              PurchLine."Qty. per Unit of Measure");
            JobPlanningLineReserve.CreateReservationSetFrom(TrackingSpecification);
            JobPlanningLineReserve.CreateReservation(
              JobPlanningLine,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase,'','');
            IF JobPlanningLine.Reserve = JobPlanningLine.Reserve::Never THEN
              JobPlanningLine.Reserve := JobPlanningLine.Reserve::Optional;
            JobPlanningLine.MODIFY;
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AsmLine.GET(ReqLine."Demand Subtype",ReqLine."Demand Order No.",ReqLine."Demand Line No.");
            ReservEntry."Source Type" := DATABASE::"Assembly Line";
            AsmLineReserve.SetBinding(ReservEntry.Binding::"Order-to-Order");
            ReservMgt.CreateTrackingSpecification(TrackingSpecification,
              DATABASE::"Purchase Line",
              PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
              PurchLine."Variant Code",PurchLine."Location Code",'','',
              PurchLine."Qty. per Unit of Measure");
            AsmLineReserve.CreateReservationSetFrom(TrackingSpecification);
            AsmLineReserve.CreateReservation(
              AsmLine,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase,'','');
            IF AsmLine.Reserve = AsmLine.Reserve::Never THEN
              AsmLine.Reserve := AsmLine.Reserve::Optional;
            AsmLine.MODIFY;
          END;
      END;

      //**4PS.sn
      PurchLine."Modified by" := USERID; //DP00469
      PurchLine."Last Date Modified" := TODAY;//DP00469
      //**4PS.en
      PurchLine.MODIFY;
    END;

    PROCEDURE SetTryParam@11(TryReqTemplate@1006 : Record 244;TryLineCount@1005 : Integer;TryNextLineNo@1004 : Integer;TryPrevPurchCode@1003 : Code[10];TryPrevShipToCode@1000 : Code[10];TryOrderCounter@1007 : Integer;TryOrderLineCounter@1008 : Integer;VAR TryFailedReqLine@1001 : Record 246);
    BEGIN
      SetPlanningResiliency;
      ReqTemplate := TryReqTemplate;
      LineCount := TryLineCount;
      NextLineNo := TryNextLineNo;
      PrevPurchCode := TryPrevPurchCode;
      PrevShipToCode := TryPrevShipToCode;
      OrderCounter := TryOrderCounter;
      OrderLineCounter := TryOrderLineCounter;
      IF TryFailedReqLine.FIND('-') THEN
        REPEAT
          TempFailedReqLine := TryFailedReqLine;
          IF TempFailedReqLine.INSERT THEN;
        UNTIL TryFailedReqLine.NEXT = 0;
    END;

    PROCEDURE GetTryParam@9(VAR TryPurchOrderHeader@1001 : Record 38;VAR TryLineCount@1005 : Integer;VAR TryNextLineNo@1004 : Integer;VAR TryPrevPurchCode@1003 : Code[10];VAR TryPrevShipToCode@1000 : Code[10];VAR TryOrderCounter@1007 : Integer;VAR TryOrderLineCounter@1008 : Integer);
    BEGIN
      TryPurchOrderHeader.COPY(PurchOrderHeader);
      TryLineCount := LineCount;
      TryNextLineNo := NextLineNo;
      TryPrevPurchCode := PrevPurchCode;
      TryPrevShipToCode := PrevShipToCode;
      TryOrderCounter := OrderCounter;
      TryOrderLineCounter := OrderLineCounter;
    END;

    PROCEDURE SetFailedReqLine@13(VAR TryFailedReqLine@1000 : Record 246);
    BEGIN
      TempFailedReqLine := TryFailedReqLine;
      TempFailedReqLine.INSERT;
    END;

    PROCEDURE SetPlanningResiliency@17();
    BEGIN
      PlanningResiliency := TRUE;
    END;

    PROCEDURE GetFailedCounter@19() : Integer;
    BEGIN
      EXIT(CounterFailed);
    END;

    LOCAL PROCEDURE PrintTransOrder@15(TransferHeader@1001 : Record 5740);
    VAR
      CarryOutAction@1000 : Codeunit 99000813;
    BEGIN
      IF TransferHeader."No." <> '' THEN BEGIN
        CarryOutAction.SetPrintOrder(PrintPurchOrders);
        CarryOutAction.PrintTransferOrder(TransferHeader);
      END;
    END;

    LOCAL PROCEDURE PrintChangedDocument@25(OrderType@1000 : Option;VAR OrderNo@1001 : Code[20]);
    VAR
      DummyReqLine@1003 : Record 246;
      TransferHeader@1004 : Record 5740;
      PurchaseHeader@1005 : Record 38;
      CarryOutAction@1002 : Codeunit 99000813;
    BEGIN
      CarryOutAction.SetPrintOrder(PrintPurchOrders);
      CASE OrderType OF
        DummyReqLine."Ref. Order Type"::Transfer:
          BEGIN
            TransferHeader.GET(OrderNo);
            PrintTransOrder(TransferHeader);
          END;
        DummyReqLine."Ref. Order Type"::Purchase:
          BEGIN
            PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,OrderNo);
            PrintPurchOrder(PurchaseHeader);
          END;
      END;
      OrderNo := '';
    END;

    LOCAL PROCEDURE PrintPurchOrder@22(PurchHeader@1001 : Record 38);
    VAR
      CarryOutAction@1000 : Codeunit 99000813;
    BEGIN
      IF PurchHeader."No." <> '' THEN BEGIN
        CarryOutAction.SetPrintOrder(PrintPurchOrders);
        CarryOutAction.PrintPurchaseOrder(PurchHeader);
      END;
    END;

    LOCAL PROCEDURE SetPurchOrderHeader@16();
    BEGIN
      PurchOrderHeader."Order Date" := OrderDateReq;
      PurchOrderHeader."Posting Date" := PostingDateReq;
      PurchOrderHeader."Expected Receipt Date" := ReceiveDateReq;
      PurchOrderHeader."Your Reference" := ReferenceReq;
    END;

    LOCAL PROCEDURE CheckAddressDetails@100(VAR PurchaseHeader@1001 : Record 38;SalesOrderNo@1002 : Code[20]) Result : Boolean;
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      IF SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo) THEN BEGIN
        IF PurchaseHeader.DropShptOrderExists(SalesHeader) THEN
          Result :=
            NOT PurchaseHeader.CheckDropShptAddressDetails(SalesHeader);
        IF PurchaseHeader.SpecialOrderExists(SalesHeader) THEN
          Result :=
            NOT PurchaseHeader.CheckSpecOrderAddressDetails(SalesHeader);
      END;
    END;

    PROCEDURE SortReqLine@1210190000(VAR ReqLine@1100525000 : Record 246);
    VAR
      InventorySetup@1100525002 : Record 313;
      Item@1100525003 : Record 27;
      CheckItem@1100525001 : Boolean;
    BEGIN
      //**4PS
      IF ReqLine.FINDSET(TRUE, FALSE) THEN BEGIN
        PurchSetup.GET;
        JobsSetup.GET;
        REPEAT
           //db.sn, 16-04-13: C006989
           IF (ReqLine.Type= ReqLine.Type::Item) THEN BEGIN
             CheckItem := TRUE;
             IF ReqLine."Trade Item" <> '' THEN BEGIN
               InventorySetup.GET;
               IF InventorySetup."Default Item" = ReqLine."No." THEN
                 CheckItem := FALSE;
             END;
             IF CheckItem THEN BEGIN
               Item.GET(ReqLine."No.");
               ReqLine.CheckIfItemIsBlocked(Item);
             END;
           END;
           //db.en, 16-04-13: C006989
           IF ReqLine."Use Blanket Order" AND NOT SkipSortPurchase THEN BEGIN //mg.c, 21-06-11: M27713
             IF CheckCreateBlanketOrder(ReqLine) THEN //hbk, 02-06-2010: M19546
               ReqLine."Sort Purchase" := '1'
             ELSE
               ReqLine."Sort Purchase" := '2';
           END ELSE
             ReqLine."Sort Purchase" := '0';  //db, 13-04-10: M18290
           ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~V~' + ReqLine."Vendor No.";
           IF PurchSetup."Create Order by Cost Type" = TRUE THEN BEGIN
             ReqLine.CALCFIELDS("Cost Type");
             ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~C~' + STRSUBSTNO('%1', ReqLine."Cost Type");
           END;
           IF SelectionMethod = SelectionMethod::Project THEN
             ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~P~' + ReqLine."Project No.";
           IF SelectionMethod = SelectionMethod::"Ship-to Location" THEN BEGIN
             IF ReqLine.Deliver = ReqLine.Deliver::" " THEN BEGIN
               IF ReqLine."Project No." <> '' THEN
                 ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~P~' + ReqLine."Project No.";
               IF ReqLine."Service Order No." <> '' THEN
                 ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~S~' + ReqLine."Service Order No.";
             END;
             IF ReqLine.Deliver = ReqLine.Deliver::"Project Location" THEN
               ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~P~' + ReqLine."Project No." + '~' + ReqLine."Ship To Location";
             IF ReqLine.Deliver = ReqLine.Deliver::"Service Location" THEN BEGIN
               ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~S~' + ReqLine."Service Order No.";
               IF ReqLine."Ship To Location" <> '' THEN
                 ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~' + ReqLine."Ship To Location";
             END;
             IF ReqLine.Deliver = ReqLine.Deliver::Location THEN
               ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~L~' + ReqLine."Ship To Location";
           END;
           IF JobsSetup."Compress Adv Order by Element" THEN
             ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~M~' + ReqLine.Element;
           IF JobsSetup."Compress Adv Order by Variant" THEN
             ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~R~' + ReqLine."Variant Code";
           //IF JobsSetup."Compress Adv Order by Version" THEN
           //  ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~N~' + ReqLine.Version;  //DP00137
           //IF JobsSetup."Compress Adv Order by Color" THEN
           //  ReqLine."Sort Purchase" := ReqLine."Sort Purchase" + '~O~' + ReqLine.Color;    //DP00137
           ReqLine.MODIFY;
        UNTIL ReqLine.NEXT = 0;
      END;
    END;

    PROCEDURE SetAskForNoSerie@1210190001(INoSeries@1210190000 : Code[10]);
    BEGIN
      //**4PS
      gAskForNoSerie := TRUE;
      gNoSeries := INoSeries;
    END;

    PROCEDURE SetMethod@1100485000(lvSelectionMethod@1100485000 : 'Vendor,Project,Ship-to Location');
    BEGIN
      //**4PS
      SelectionMethod := lvSelectionMethod;
    END;

    PROCEDURE CheckCreateBlanketOrder@1100525001(ReqLine2@1100525000 : Record 246) : Boolean;
    VAR
      Item@1100525003 : Record 27;
      OrderDate@1100525002 : Date;
      DemandDate@1100525001 : Date;
      lvItem@1100525006 : Text[30];
      lvPeriod@1100525004 : Text[30];
      ValidateCu@1100525005 : Codeunit 11012033;
    BEGIN
      //**4PS
      //demand date is ending date demand period (= workdate + demand time calculation)
      //order date is due date - lead time calculation

      //db, 12-04-10: M18290 (check demand/lead time calculation changed)
      WITH ReqLine2 DO BEGIN
        IF ("Project No." <> '') OR ("Service Order No." <> '') THEN
          EXIT(FALSE);

        IF "Use Blanket Order" AND Item.GET("No.") THEN BEGIN
          Item.TESTFIELD("Demand Time Calculation");
          IF Type = Type::Item THEN
            lvItem := "No.";
          lvPeriod := ValidateCu.GetDeliveryTimeItem(lvItem, Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item",
            0, '', "Vendor No.");
          IF lvPeriod = '' THEN
            Item.TESTFIELD("Lead Time Calculation");
          OrderDate := CALCDATE(STRSUBSTNO('-%1',lvPeriod),"Due Date");
          DemandDate := CALCDATE(Item."Demand Time Calculation",WORKDATE);
          EXIT(OrderDate > DemandDate);
        END;
      END;
    END;

    PROCEDURE GetDeliveryPeriod@1100525000(StartDate@1100525000 : Date;EndDate@1100525001 : Date;VAR LeadTime@1100525002 : DateFormula);
    VAR
      CompInfoRec@1100525003 : Record 79;
      BaseCalRec@1100525006 : Record 11072014;
      DateRec@1100525005 : Record 2000000007;
      NumDays@1100525010 : Integer;
      dummyDesc@1100525009 : Text[30];
      NonWorkDate@1100525004 : Boolean;
      CalendarMgt@1100525007 : Codeunit 7600;
    BEGIN
      //**4PS
      CLEAR(LeadTime);
      IF (StartDate = 0D) OR (EndDate = 0D) THEN EXIT;

      CompInfoRec.GET;
      DateRec.SETRANGE("Period Type", DateRec."Period Type"::Date);
      DateRec.SETRANGE("Period Start", StartDate, EndDate-1);
      IF DateRec.FIND('-') THEN BEGIN
        REPEAT
          IF BaseCalRec.READPERMISSION THEN
            NonWorkDate := CalendarMgt.CheckDateStatus(CompInfoRec."Base Calendar Code", DateRec."Period Start", dummyDesc);
          IF NonWorkDate = FALSE THEN
            NumDays := NumDays + 1;
        UNTIL DateRec.NEXT = 0;
      END;

      IF NumDays > 0 THEN
        EVALUATE(LeadTime, STRSUBSTNO('<%1D>', NumDays));  //db, 15-03-11
    END;

    PROCEDURE DetLineNo@1100525003(ReqLine2@1100525001 : Record 246) LineNo : Integer;
    VAR
      PurchaseLine@1100525000 : Record 39;
      PrevLineNo@1100525002 : Integer;
      NextLineNo@1100525003 : Integer;
    BEGIN
      //**4PS
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type",PurchOrderHeader."Document Type");
        SETRANGE("Document No.",PurchOrderHeader."No.");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;

        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ReqLine2."No.");
        SETFILTER("Expected Receipt Date",'<=%1',ReqLine2."Due Date");
        IF FINDLAST THEN BEGIN
          PrevLineNo := "Line No.";
          SETRANGE("Expected Receipt Date");
        END ELSE BEGIN
          SETRANGE("Expected Receipt Date");
          IF FINDFIRST THEN
            NextLineNo := "Line No.";
        END;
        SETRANGE(Type);
        SETRANGE("No.");
        IF PrevLineNo = 0 THEN BEGIN
          SETFILTER("Line No.",'<%1',NextLineNo);
          IF FINDLAST THEN
            PrevLineNo := "Line No.";
        END ELSE BEGIN
          SETFILTER("Line No.",'>%1',PrevLineNo);
          IF FINDFIRST THEN
            NextLineNo := "Line No."
        END;

        IF NextLineNo <> 0 THEN
          LineNo := PrevLineNo + ((NextLineNo - PrevLineNo) DIV 2);
      END;
    END;

    PROCEDURE SetReqWrkshtPerTemplate@1100525004();
    BEGIN
      //**4PS
      SkipBatchFilter := TRUE;
    END;

    PROCEDURE CheckProjectCurrency@1100525005(JobNo@1100525000 : Code[20];CurrencyCode@1100525003 : Code[20]) : Boolean;
    VAR
      lJobRec@1100525001 : Record 11072003;
      lJobCurrencyRec@1100525002 : Record 11020628;
    BEGIN
      //**4PS  RFC MULTI CURRENCY
      IF lJobRec.GET(JobNo) THEN BEGIN
        lJobCurrencyRec.SETRANGE("Project No.", JobNo);
        lJobCurrencyRec.SETRANGE("Currency Code", CurrencyCode);
        IF lJobCurrencyRec.FINDFIRST THEN
          EXIT(TRUE);
        IF lJobRec."Single/Main/Sub Project" = lJobRec."Single/Main/Sub Project"::"Sub Project" THEN BEGIN
          lJobCurrencyRec.SETRANGE("Project No.", lJobRec."Main Project");
          lJobCurrencyRec.SETRANGE("Currency Code", CurrencyCode);
          IF lJobCurrencyRec.FINDFIRST THEN
            EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE SetSkipSortPurchase@1210190003();
    BEGIN
      //**4PS
      SkipSortPurchase := TRUE;
    END;

    PROCEDURE SetTransferCommentLines@1100529801(iTransferCommentLines@1100529800 : Boolean);
    BEGIN
      //**4PS
      TransferCommentLines := iTransferCommentLines;
    END;

    PROCEDURE SetNumbers@1100528401(VAR TrCancelCounter2@1100409005 : Integer;VAR OrdCancelCounter2@1100409004 : Integer;VAR TrChangeCounter2@1100409003 : Integer;VAR OrdChangeCounter2@1100409002 : Integer;VAR TrNewCounter2@1100409001 : Integer;VAR OrdNewCounter2@1100409000 : Integer;VAR FirstOrder2@1100528400 : Code[20];VAR LastOrder2@1100528401 : Code[20]);
    BEGIN
      //**4PS
      TrCancelCounter := TrCancelCounter2;
      OrdCancelCounter := OrdCancelCounter2;
      TrChangeCounter := TrChangeCounter2;
      OrdChangeCounter := OrdChangeCounter2;
      TrNewCounter := TrNewCounter2;
      OrdNewCounter := OrdNewCounter2;
      FirstOrder := FirstOrder2;
      LastOrder := LastOrder2;
    END;

    PROCEDURE GetNumbers@1100409007(VAR TrCancelCounter2@1100409005 : Integer;VAR OrdCancelCounter2@1100409004 : Integer;VAR TrChangeCounter2@1100409003 : Integer;VAR OrdChangeCounter2@1100409002 : Integer;VAR TrNewCounter2@1100409001 : Integer;VAR OrdNewCounter2@1100409000 : Integer;VAR FirstOrder2@1100528400 : Code[20];VAR LastOrder2@1100528401 : Code[20];VAR NewPurchaseOrdersTxt@1100409006 : Text[50]);
    BEGIN
      //**4PS
      TrCancelCounter2 := TrCancelCounter;
      OrdCancelCounter2 := OrdCancelCounter;
      TrChangeCounter2 := TrChangeCounter;
      OrdChangeCounter2 := OrdChangeCounter;
      TrNewCounter2 := TrNewCounter;
      OrdNewCounter2 := OrdNewCounter;
      FirstOrder2 := FirstOrder;
      LastOrder2 := LastOrder;
      NewPurchaseOrdersTxt := FirstOrder;
      IF FirstOrder <> LastOrder THEN
        NewPurchaseOrdersTxt := FirstOrder + '..' + LastOrder;
    END;

    PROCEDURE SetLinkItemDocsToOrder@1100525006();
    BEGIN
      //**4PS
      LinkItemDocsToOrder := TRUE;
    END;

    PROCEDURE SetPurchSelForm@1100528400(PurchSelForm2@1100528400 : Code[10]);
    BEGIN
      //**4PS
      PurchSelForm := PurchSelForm2;
    END;

    PROCEDURE GetTempPurchHeaderRec@1100528402(VAR TempPurchHeaderRec2@1100528400 : TEMPORARY Record 38);
    BEGIN
      //**4PS
      IF TempPurchHeaderRec.FINDSET THEN
        REPEAT
          IF TempPurchHeaderRec2.GET(
            TempPurchHeaderRec."Document Type", TempPurchHeaderRec."No.")
          THEN
            TempPurchHeaderRec2.DELETE;
          TempPurchHeaderRec2 := TempPurchHeaderRec;
          TempPurchHeaderRec2.INSERT;
        UNTIL TempPurchHeaderRec.NEXT = 0;
    END;

    BEGIN
    {
      4PS02 HBK 13-07-09 Several changes applied to use "Blanket Order"
      4PS03 HBK 15-04-10 InsertHeader changed: use existing Blanket Order
      4PS04 HBK 22-04-10 Changed sorting in ReqLine (added Item No.'s before duedate)
      4PS05 HBK 02-06-10 Changed function SortReqLine: process Blanket Orders together

      DP00137: this codeunit is used only for old procedure (ReqLine) and not for new procedure (AdviceOrder, codeunit 11012041)
    }
    END.
  }
}

