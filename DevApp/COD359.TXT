OBJECT Codeunit 359 PeriodFormManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW18.00,4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=<Week>.<Year4>';
      Text001@1001 : TextConst 'ENU=<Month Text,3> <Year4>';
      Text002@1002 : TextConst 'ENU=<Quarter>/<Year4>';
      Text003@1003 : TextConst 'ENU=<Year4>';
      AccountingPeriod@1004 : Record 50;
      Text010@1100525000 : TextConst 'ENU=D';
      Text011@1100525001 : TextConst 'ENU=W';
      Text012@1100525002 : TextConst 'ENU=M';
      Text013@1100525003 : TextConst 'ENU=Y';

    PROCEDURE FindDate@2(SearchString@1000 : Text[3];VAR Calendar@1001 : Record 2000000007;PeriodType@1002 : 'Day,Week,Month,Quarter,Year,Accounting Period') : Boolean;
    VAR
      Found@1003 : Boolean;
      lPeriodNumber@1100485001 : Integer;
    BEGIN
      Calendar.SETRANGE("Period Type",PeriodType);
      Calendar."Period Type" := PeriodType;
      //**4PS.sn
      IF ReadNumberFromString(SearchString, lPeriodNumber, PeriodType) THEN
      BEGIN
        CASE PeriodType OF
          PeriodType::Week: Calendar."Period Start"  := DWY2DATE(1,lPeriodNumber);
          PeriodType::Month:   Calendar."Period Start"  := DMY2DATE(1,lPeriodNumber) ;
          PeriodType::Year:  Calendar."Period Start"  := DMY2DATE(1,12,lPeriodNumber) ;
        END;
        SearchString := '';
      END ELSE IF NOT SearchStringWellFormed(SearchString) THEN
        SearchString := '';
      //**4PS.en

      IF Calendar."Period Start" = 0D THEN
        Calendar."Period Start" := WORKDATE;
      IF SearchString IN ['','=><'] THEN
        SearchString := '=<>';
      IF PeriodType = PeriodType::"Accounting Period" THEN BEGIN
        SetAccountingPeriodFilter(Calendar);
        Found := AccountingPeriod.FIND(SearchString);
        IF Found THEN
          CopyAccountingPeriod(Calendar);
      END ELSE BEGIN
        Found := Calendar.FIND(SearchString);
        IF Found THEN
          Calendar."Period End" := NORMALDATE(Calendar."Period End");
      END;
      EXIT(Found);
    END;

    PROCEDURE NextDate@3(NextStep@1000 : Integer;VAR Calendar@1001 : Record 2000000007;PeriodType@1002 : 'Day,Week,Month,Quarter,Year,Accounting Period') : Integer;
    BEGIN
      Calendar.SETRANGE("Period Type",PeriodType);
      Calendar."Period Type" := PeriodType;
      IF PeriodType = PeriodType::"Accounting Period" THEN BEGIN
        SetAccountingPeriodFilter(Calendar);
        NextStep := AccountingPeriod.NEXT(NextStep);
        IF NextStep <> 0 THEN
          CopyAccountingPeriod(Calendar);
      END ELSE BEGIN
        NextStep := Calendar.NEXT(NextStep);
        IF NextStep <> 0 THEN
          Calendar."Period End" := NORMALDATE(Calendar."Period End");
      END;
      EXIT(NextStep);
    END;

    PROCEDURE CreatePeriodFormat@4(PeriodType@1000 : 'Day,Week,Month,Quarter,Year,Accounting Period';Date@1001 : Date) : Text[10];
    BEGIN
      CASE PeriodType OF
        PeriodType::Day:
          EXIT(FORMAT(Date));
        PeriodType::Week:
          BEGIN
            IF DATE2DWY(Date,2) = 1 THEN
              Date := Date + 7 - DATE2DWY(Date,1);
            EXIT(FORMAT(Date,0,Text000));
          END;
        PeriodType::Month:
          EXIT(FORMAT(Date,0,Text001));
        PeriodType::Quarter:
          EXIT(FORMAT(Date,0,Text002));
        PeriodType::Year:
          EXIT(FORMAT(Date,0,Text003));
        PeriodType::"Accounting Period":
          EXIT(FORMAT(Date));
      END;
    END;

    LOCAL PROCEDURE SetAccountingPeriodFilter@5(VAR Calendar@1000 : Record 2000000007);
    BEGIN
      AccountingPeriod.SETFILTER("Starting Date",Calendar.GETFILTER("Period Start"));
      AccountingPeriod.SETFILTER(Name,Calendar.GETFILTER("Period Name"));
      AccountingPeriod."Starting Date" := Calendar."Period Start";
    END;

    LOCAL PROCEDURE CopyAccountingPeriod@6(VAR Calendar@1000 : Record 2000000007);
    BEGIN
      Calendar.INIT;
      Calendar."Period Start" := AccountingPeriod."Starting Date";
      Calendar."Period Name" := AccountingPeriod.Name;
      IF AccountingPeriod.NEXT = 0 THEN
        Calendar."Period End" := 99991231D
      ELSE
        Calendar."Period End" := AccountingPeriod."Starting Date" - 1;
    END;

    PROCEDURE GetFullPeriodDateFilter@12(PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';DateFilter@1000 : Text) : Text;
    VAR
      AccountingPeriod@1002 : Record 50;
      Period@1001 : Record 2000000007;
      StartDate@1004 : Date;
      EndDate@1005 : Date;
    BEGIN
      IF DateFilter = '' THEN
        EXIT(DateFilter);

      Period.SETFILTER("Period Start",DateFilter);
      StartDate := Period.GETRANGEMIN("Period Start");
      EndDate := Period.GETRANGEMAX("Period Start");
      CASE PeriodType OF
        PeriodType::Week,
        PeriodType::Month,
        PeriodType::Quarter,
        PeriodType::Year:
          BEGIN
            Period.SETRANGE("Period Type",PeriodType);
            Period.SETFILTER("Period Start",'<=%1',StartDate);
            Period.FINDLAST;
            StartDate := Period."Period Start";
            Period.SETRANGE("Period Start");
            Period.SETFILTER("Period End",'>%1',EndDate);
            Period.FINDFIRST;
            EndDate := NORMALDATE(Period."Period End");
          END;
        PeriodType::"Accounting Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',StartDate);
            AccountingPeriod.FINDLAST;
            StartDate := AccountingPeriod."Starting Date";
            AccountingPeriod.SETFILTER("Starting Date",'>%1',EndDate);
            AccountingPeriod.FINDFIRST;
            EndDate := AccountingPeriod."Starting Date" - 1;
          END;
      END;
      Period.SETRANGE("Period Start",StartDate,EndDate);
      EXIT(Period.GETFILTER("Period Start"));
    END;

    LOCAL PROCEDURE ReadNumberFromString@1100485000(iStr@1100485000 : Text[3];VAR oNumber@1100485001 : Integer;PeriodType@1100485006 : 'Day,Week,Month,Quarter,Year,Accounting Period') : Boolean;
    VAR
      Pos1@1100485002 : Integer;
      Pos2@1100485003 : Integer;
      i@1100485004 : Integer;
      lFound@1100485005 : Boolean;
    BEGIN
      //**4PS
      oNumber := 0;
      Pos1 := 2;
      Pos2 := 2;

      CASE PeriodType OF
        PeriodType::Day: IF NOT (UPPERCASE(COPYSTR(iStr,1,1)) = Text010) THEN EXIT(FALSE);
        PeriodType::Week: IF NOT (UPPERCASE(COPYSTR(iStr,1,1)) = Text011) THEN EXIT(FALSE);
        PeriodType::Month: IF NOT (UPPERCASE(COPYSTR(iStr,1,1)) = Text012) THEN EXIT(FALSE);
        PeriodType::Year : IF NOT (UPPERCASE(COPYSTR(iStr,1,1)) = Text013) THEN EXIT(FALSE)
      ELSE
        EXIT(FALSE);
      END;
      lFound := FALSE;
      WHILE (Pos1 < 4) AND NOT lFound DO
      BEGIN
        IF (STRPOS('0123456789',COPYSTR(iStr,Pos1,1)) <> 0) THEN
          Pos1 := Pos1 + 1
        ELSE BEGIN
          IF Pos1 = Pos2 THEN
          BEGIN
            Pos1 := Pos1 + 1;
            Pos2 := Pos2 + 1;
          END
          ELSE
            lFound := TRUE;
        END;
      END;

      IF Pos1 = Pos2 THEN
        EXIT(FALSE);

      FOR i := Pos2 TO Pos1 - 1 DO
        oNumber := oNumber * 10 + STRPOS('0123456789',COPYSTR(iStr,i,1)) - 1;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SearchStringWellFormed@1100485002(iSearchStr@1100485000 : Text[3]) : Boolean;
    VAR
      i@1100485002 : Integer;
    BEGIN
      WHILE (i < STRLEN(iSearchStr)) DO
      BEGIN
        i := i + 1;
        IF STRPOS('+-<>=',COPYSTR(iSearchStr,i,1)) = 0 THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

