OBJECT Codeunit 392 Reminder-Make
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.43402,NAVSE9.FI9.DK9.NO9,4PS9.00,4PSSE.DK;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            Code;
          END;

  }
  CODE
  {
    VAR
      Currency@1000 : TEMPORARY Record 4;
      Cust@1001 : Record 18;
      CustLedgEntry@1002 : Record 21;
      CustLedgEntry2@1017 : Record 21;
      ReminderTerms@1003 : Record 292;
      ReminderHeaderReq@1005 : Record 295;
      ReminderHeader@1006 : Record 295;
      ReminderLine@1007 : Record 296;
      ReminderEntry@1008 : Record 300;
      Text0000@1023 : TextConst 'ENU=Open Entries Not Due';
      CustLedgEntryOnHoldTEMP@1011 : TEMPORARY Record 21;
      CustLedgEntryLineFeeFilters@1014 : Record 21;
      AmountsNotDueLineInserted@1004 : Boolean;
      OverdueEntriesOnly@1009 : Boolean;
      HeaderExists@1010 : Boolean;
      IncludeEntriesOnHold@1102601000 : Boolean;
      Text0001@1102601002 : TextConst 'ENU=Open Entries On Hold';
      AltInvAdrsRec@1210190001 : Record 222;
      TmpAltInvAdrsRec@1210190000 : TEMPORARY Record 222;
      Language@1100525001 : Record 8;
      ReminderPerAltAddress@1210190002 : Boolean;
      EntriesOption@1100485000 : 'New,Overdue,All';
      GlobLanguageID@1100525002 : Integer;
      LanguageID@1100525000 : Integer;
      AssignedUserID@1100528800 : Code[50];

    PROCEDURE Code@7() RetVal : Boolean;
    BEGIN
      WITH ReminderHeader DO
        IF "No." <> '' THEN BEGIN
          HeaderExists := TRUE;
          TESTFIELD("Customer No.");
          Cust.GET("Customer No.");
          TESTFIELD("Document Date");
          TESTFIELD("Reminder Terms Code");
          ReminderHeaderReq := ReminderHeader;
          ReminderLine.SETRANGE("Reminder No.","No.");
          ReminderLine.DELETEALL;
        END;
      Cust.TESTFIELD("Reminder Terms Code");
      IF ReminderHeader."Reminder Terms Code" <> '' THEN
        ReminderTerms.GET(ReminderHeader."Reminder Terms Code")
      ELSE
        ReminderTerms.GET(Cust."Reminder Terms Code");
      IF HeaderExists THEN
        //MakeReminder(ReminderHeader."Currency Code") //**4PS.o
        MakeReminder(ReminderHeader."Currency Code", ReminderHeader."Alternative Bill-to Address") //**4PS.n
      ELSE BEGIN
        Currency.DELETEALL;
        TmpAltInvAdrsRec.DELETEALL; //**4PS.n
        CustLedgEntry2.COPYFILTERS(CustLedgEntry);
        CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE(Positive,TRUE);
        IF CustLedgEntry.FIND('-') THEN
          REPEAT
            // IF CustLedgEntry."On Hold" = '' THEN BEGIN                                                 //**4PS.o
            IF (CustLedgEntry."On Hold" = '') AND (CustLedgEntry."Blocked for Reminder" = '') THEN BEGIN  //**4PS.n DP00794
                 Currency.Code := CustLedgEntry."Currency Code";
              IF Currency.INSERT THEN;
              //**4PS.sn
              TmpAltInvAdrsRec.Code := '';
              IF ReminderPerAltAddress THEN
                IF AltInvAdrsRec.GET(CustLedgEntry."Customer No.", CustLedgEntry."Alternative Bill-to Address") THEN
                  TmpAltInvAdrsRec.Code := CustLedgEntry."Alternative Bill-to Address";
              IF TmpAltInvAdrsRec.INSERT THEN;
              //**4PS.en
            END;
          UNTIL CustLedgEntry.NEXT = 0;
        CustLedgEntry.COPYFILTERS(CustLedgEntry2);
        RetVal := TRUE;
        IF Currency.FIND('-') THEN
          REPEAT
            //IF NOT MakeReminder(Currency.Code) THEN  //**4PS.o
            //  RetVal := FALSE;                       //**4PS.o
            //**4PS.sn
            IF TmpAltInvAdrsRec.FIND('-') THEN
              REPEAT
                IF NOT MakeReminder(Currency.Code, TmpAltInvAdrsRec.Code) THEN
                  RetVal := FALSE;
              UNTIL TmpAltInvAdrsRec.NEXT = 0;
              //**4PS.en
          UNTIL Currency.NEXT = 0;
      END;
    END;

    PROCEDURE Set@1(Cust2@1000 : Record 18;VAR CustLedgEntry2@1001 : Record 21;ReminderHeaderReq2@1002 : Record 295;IncludeEntriesOnHold2@1102601000 : Boolean;VAR CustLedgEntryLinefeeOn@1004 : Record 21;EntriesOption2@1100485000 : 'New,Overdue,All';ReminderPerAltAddress2@1210190000 : Boolean;AssignedUserID2@1100528800 : Code[50]);
    BEGIN
      Cust := Cust2;
      CustLedgEntry.COPY(CustLedgEntry2);
      ReminderHeaderReq := ReminderHeaderReq2;
      //OverdueEntriesOnly := OverdueEntriesOnly2;  //**4PS.o
      ReminderPerAltAddress := ReminderPerAltAddress2; //**4PS.n
      EntriesOption := EntriesOption2;  //**4PS.n
      AssignedUserID := AssignedUserID2; //**4PS.n
      IncludeEntriesOnHold := IncludeEntriesOnHold2;
      CustLedgEntryLineFeeFilters.COPYFILTERS(CustLedgEntryLinefeeOn);
    END;

    PROCEDURE SuggestLines@2(ReminderHeader2@1000 : Record 295;VAR CustLedgEntry2@1001 : Record 21;IncludeEntriesOnHold2@1102601000 : Boolean;VAR CustLedgEntryLinefeeOn@1004 : Record 21;EntriesOption2@1100485000 : 'New,Overdue,All';ReminderPerAltAddress2@1210190000 : Boolean);
    BEGIN
      ReminderHeader := ReminderHeader2;
      CustLedgEntry.COPY(CustLedgEntry2);
      //OverdueEntriesOnly := OverdueEntriesOnly2;  //**4PS.o
      ReminderPerAltAddress := ReminderPerAltAddress2; //**4PS.n
      EntriesOption := EntriesOption2;  //**4PS.n
      IncludeEntriesOnHold := IncludeEntriesOnHold2;
      CustLedgEntryLineFeeFilters.COPYFILTERS(CustLedgEntryLinefeeOn);
    END;

    LOCAL PROCEDURE MakeReminder@3(CurrencyCode@1000 : Code[10];AltAdrsCode@1210190000 : Code[20]) : Boolean;
    VAR
      ReminderLevel@1004 : Record 293;
      MakeDoc@1011 : Boolean;
      StartLineInserted@1005 : Boolean;
      NextLineNo@1010 : Integer;
      LineLevel@1009 : Integer;
      MaxLineLevel@1008 : Integer;
      MaxReminderLevel@1002 : Integer;
      CustAmount@1007 : Decimal;
      ReminderDueDate@1003 : Date;
      OpenEntriesNotDueTranslated@1012 : Text[100];
      OpenEntriesOnHoldTranslated@1013 : Text[100];
    BEGIN
      WITH Cust DO BEGIN
        FilterCustLedgEntryReminderLevel(CustLedgEntry,ReminderLevel,CurrencyCode);
        //**4PS.sn
        CustLedgEntry.SETRANGE("Blocked for Reminder", '');   //4PSSE.I014
        IF ReminderPerAltAddress THEN
          CustLedgEntry.SETRANGE("Alternative Bill-to Address", AltAdrsCode);
        GlobLanguageID := GLOBALLANGUAGE;
        IF "Language Code" = '' THEN
          LanguageID := GlobLanguageID
        ELSE
          LanguageID := Language.GetLanguageID("Language Code");
        //**4PS.en
        IF NOT ReminderLevel.FINDLAST THEN
          EXIT(FALSE);
        CustLedgEntryOnHoldTEMP.DELETEALL;
        // Find and MARK Reminder Candidates
        REPEAT
          FilterCustLedgEntries(ReminderLevel);
          IF CustLedgEntry.FIND('-') THEN
            REPEAT
              //IF CustLedgEntry."On Hold" = '' THEN BEGIN   //**4PS.o
              IF (CustLedgEntry."On Hold" = '') AND (CustLedgEntry."Blocked for Reminder" = '') THEN BEGIN    //**4PS.n DP00794
                SetReminderLine(LineLevel,ReminderLevel."No.",ReminderDueDate);
                IF (CALCDATE(ReminderLevel."Grace Period",ReminderDueDate) < ReminderHeaderReq."Document Date") AND
                   ((LineLevel <= ReminderTerms."Max. No. of Reminders") OR (ReminderTerms."Max. No. of Reminders" = 0))
                THEN BEGIN
                  CustLedgEntry.MARK(TRUE);
                  ReminderLevel.MARK(TRUE);
                  IF (ReminderLevel."No." > MaxReminderLevel) AND
                     (CustLedgEntry."Document Type" <> CustLedgEntry."Document Type"::"Credit Memo")
                  THEN
                    MaxReminderLevel := ReminderLevel."No.";
                  IF MaxLineLevel < LineLevel THEN
                    MaxLineLevel := LineLevel;
                  CustLedgEntry.CALCFIELDS("Remaining Amount");
                  CustAmount := CustAmount + CustLedgEntry."Remaining Amount";
                  IF CustLedgEntry.Positive AND
                     (CALCDATE(ReminderLevel."Grace Period",ReminderDueDate) < ReminderHeaderReq."Document Date")
                  THEN
                    MakeDoc := TRUE;
                END ELSE
                  IF (CALCDATE(ReminderLevel."Grace Period",ReminderDueDate) >= ReminderHeaderReq."Document Date") AND
                     //(NOT OverdueEntriesOnly) //**4PS.o
                     (EntriesOption <> EntriesOption::New) //**4PS.n
                  THEN BEGIN
                    CustLedgEntry.MARK(TRUE);
                    ReminderLevel.MARK(TRUE);
                  END;
              END ELSE // The customer ledger entry is on hold
                IF IncludeEntriesOnHold THEN BEGIN
                  CustLedgEntryOnHoldTEMP := CustLedgEntry;
                  CustLedgEntryOnHoldTEMP.INSERT;
                END;
            UNTIL CustLedgEntry.NEXT = 0;
        UNTIL ReminderLevel.NEXT(-1) = 0;
        ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTerms.Code);
        ReminderLevel.SETRANGE("No.",1,MaxLineLevel);
        IF NOT ReminderLevel.FIND('+') THEN
          ReminderLevel.INIT;
        IF MakeDoc AND (CustAmount > 0) AND (CustAmountLCY(CurrencyCode,CustAmount) >= ReminderTerms."Minimum Amount (LCY)") THEN BEGIN
          IF Blocked = Blocked::All THEN
            EXIT(FALSE);
          ReminderLine.LOCKTABLE;
          ReminderHeader.LOCKTABLE;
          IF NOT HeaderExists THEN BEGIN
            ReminderHeader.SETCURRENTKEY("Customer No.","Currency Code");
            ReminderHeader.SETRANGE("Customer No.","No.");
            ReminderHeader.SETRANGE("Currency Code",CurrencyCode);
            ReminderHeader.SETRANGE("Alternative Bill-to Address", AltAdrsCode); //**4PS.n
            ReminderHeader.DPA_SetFilters('Codeunit 392'); //**4PS.n C001277
            IF ReminderHeader.FINDFIRST THEN
              EXIT(FALSE);
            ReminderHeader.INIT;
            ReminderHeader."No." := '';
            ReminderHeader."Posting Date" := ReminderHeaderReq."Posting Date";
            ReminderHeader.INSERT(TRUE);
            ReminderHeader.VALIDATE("Customer No.","No.");
            ReminderHeader.VALIDATE("Alternative Bill-to Address", AltAdrsCode); //**4PS.n
            ReminderHeader.VALIDATE("Currency Code",CurrencyCode);
            ReminderHeader."Document Date" := ReminderHeaderReq."Document Date";
            ReminderHeader."Use Header Level" := ReminderHeaderReq."Use Header Level";
            ReminderHeader."Electronic Invoicing" := "Electronic Invoicing";  //4PSSE.DK
            ReminderHeader."Assigned User ID" := AssignedUserID; //**4PS.n
          END;
          ReminderHeader."Reminder Level" := ReminderLevel."No.";
          ReminderHeader.MODIFY;
          NextLineNo := 0;
          ReminderLevel.MARKEDONLY(TRUE);
          CustLedgEntry.MARKEDONLY(TRUE);
          ReminderLevel.FIND('+');
          REPEAT
            StartLineInserted := FALSE;
            FilterCustLedgEntries(ReminderLevel);
            AmountsNotDueLineInserted := FALSE;
            IF CustLedgEntry.FIND('-') THEN BEGIN
              REPEAT
                SetReminderLine(LineLevel,ReminderLevel."No.",ReminderDueDate);
                IF ReminderDueDate < ReminderHeaderReq."Document Date" THEN BEGIN
                  IF (NextLineNo > 0) AND NOT StartLineInserted THEN BEGIN
                    ReminderLine.INIT;
                    NextLineNo := GetHighestLineNo(ReminderHeader."No.") + 10000;
                    ReminderLine."Reminder No." := ReminderHeader."No.";
                    ReminderLine."Line No." := NextLineNo;
                    ReminderLine."Line Type" := ReminderLine."Line Type"::"Reminder Line";
                    ReminderLine.INSERT;
                  END;
                  NextLineNo := GetHighestLineNo(ReminderHeader."No.") + 10000;
                  ReminderLine.INIT;
                  ReminderLine."Reminder No." := ReminderHeader."No.";
                  ReminderLine."Account Code DK" := ReminderHeader."Account Code DK";  //NAVDK
                  ReminderLine."Account Code NO" := ReminderHeader."Account Code NO";  //NAVNO
                  ReminderLine."Line No." := NextLineNo;
                  ReminderLine.Type := ReminderLine.Type::"Customer Ledger Entry";
                  ReminderLine.VALIDATE("Entry No.",CustLedgEntry."Entry No.");
                  SetReminderLevel(ReminderHeader,LineLevel);
                  ReminderLine."Reminder Level" := ReminderLevel."No."; //**4PSmg, 03-08-11: C-019461
                  ReminderLine.INSERT;
                  StartLineInserted := TRUE;
                  AddLineFeeForCustLedgEntry(CustLedgEntry,ReminderLevel,NextLineNo);
                END;
              UNTIL CustLedgEntry.NEXT = 0;
            END
          UNTIL ReminderLevel.NEXT(-1) = 0;
          ReminderHeader."Reminder Level" := MaxReminderLevel;
          ReminderHeader.VALIDATE("Reminder Level");
          ReminderHeader.InsertLines;
          ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
          ReminderLine.FINDLAST;
          NextLineNo := ReminderLine."Line No.";
          GetOpenEntriesNotDueOnHoldTranslated("Language Code",OpenEntriesNotDueTranslated,OpenEntriesOnHoldTranslated);
          //IF NOT OverdueEntriesOnly THEN BEGIN //**4PS.o
          IF (EntriesOption = EntriesOption::All) THEN BEGIN //**4PS.n
            CustLedgEntry.SETRANGE("Last Issued Reminder Level");
            IF CustLedgEntry.FIND('-') THEN
              REPEAT
                SetReminderLine(LineLevel,ReminderHeader."Reminder Level",ReminderDueDate);
                IF CALCDATE(ReminderLevel."Grace Period",ReminderDueDate) >= ReminderHeaderReq."Document Date" THEN BEGIN
                  IF NOT AmountsNotDueLineInserted THEN BEGIN
                    ReminderLine.INIT;
                    NextLineNo := GetHighestLineNo(ReminderHeader."No.") + 10000;
                    ReminderLine."Reminder No." := ReminderHeader."No.";
                    ReminderLine."Line No." := NextLineNo;
                    ReminderLine."Account Code DK" := ReminderHeader."Account Code DK"; //NAVDK
                    ReminderLine."Line Type" := ReminderLine."Line Type"::"Not Due";
                    ReminderLine.INSERT;
                    NextLineNo := NextLineNo + 10000;
                    ReminderLine.INIT;
                    ReminderLine."Reminder No." := ReminderHeader."No.";
                    ReminderLine."Line No." := NextLineNo;
                    ReminderLine.Description := OpenEntriesNotDueTranslated;
                    ReminderLine.Type := ReminderLine.Type::"Customer Ledger Entry";
                    ReminderLine.VALIDATE("Entry No.",CustLedgEntry."Entry No.");
                    ReminderLine."No. of Reminders" := 0;
                    ReminderLine."Line Type" := ReminderLine."Line Type"::"Not Due";
                    ReminderLine.INSERT;
                    AmountsNotDueLineInserted := TRUE;
                  END;
                  NextLineNo := NextLineNo + 10000;
                  ReminderLine.INIT;
                  ReminderLine."Reminder No." := ReminderHeader."No.";
                  ReminderLine."Account Code DK" := ReminderHeader."Account Code DK";  //NAVDK
                  ReminderLine."Line No." := NextLineNo;
                  ReminderLine.Description := Text0000;  //NAVDK
                  ReminderLine.Type := ReminderLine.Type::"Customer Ledger Entry";
                  ReminderLine.VALIDATE("Entry No.",CustLedgEntry."Entry No.");
                  ReminderLine."No. of Reminders" := 0;
                  ReminderLine."Line Type" := ReminderLine."Line Type"::"Not Due";
                  ReminderLine.INSERT;
                  AmountsNotDueLineInserted := TRUE;  //NAVDK
                END;
              UNTIL CustLedgEntry.NEXT = 0;
          END;
          IF IncludeEntriesOnHold THEN
            IF CustLedgEntryOnHoldTEMP.FIND('-') THEN BEGIN
              ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
              ReminderLine.FINDLAST;
              NextLineNo := ReminderLine."Line No.";
              ReminderLine.INIT;
              NextLineNo := NextLineNo + 10000;
              ReminderLine."Reminder No." := ReminderHeader."No.";
              ReminderLine."Line No." := NextLineNo;
              ReminderLine."Line Type" := ReminderLine."Line Type"::"On Hold";
              ReminderLine.INSERT;
              NextLineNo := NextLineNo + 10000;
              ReminderLine.INIT;
              ReminderLine."Reminder No." := ReminderHeader."No.";
              ReminderLine."Line No." := NextLineNo;
              ReminderLine.Description := OpenEntriesOnHoldTranslated;
              ReminderLine."Line Type" := ReminderLine."Line Type"::"On Hold";
              ReminderLine.INSERT;
              REPEAT
                NextLineNo := NextLineNo + 10000;
                ReminderLine.INIT;
                ReminderLine."Reminder No." := ReminderHeader."No.";
                ReminderLine."Line No." := NextLineNo;
                ReminderLine.Type := ReminderLine.Type::"Customer Ledger Entry";
                ReminderLine.VALIDATE("Entry No.",CustLedgEntryOnHoldTEMP."Entry No.");
                ReminderLine."No. of Reminders" := 0;
                ReminderLine."Line Type" := ReminderLine."Line Type"::"On Hold";
                ReminderLine.INSERT;
              UNTIL CustLedgEntryOnHoldTEMP.NEXT = 0;
            END;
          ReminderHeader.MODIFY;
        END;
      END;

      RemoveLinesOfNegativeReminder(ReminderHeader);

      ReminderLevel.RESET;
      CustLedgEntry.RESET;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CustAmountLCY@4(CurrencyCode@1001 : Code[10];Amount@1002 : Decimal) : Decimal;
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      IF CurrencyCode <> '' THEN
        EXIT(
          CurrExchRate.ExchangeAmtFCYToLCY(
            0, '',  //**4PS.n
            ReminderHeaderReq."Posting Date",CurrencyCode,Amount,
      //    CurrExchRate.ExchangeRate(ReminderHeaderReq."Posting Date",CurrencyCode))); //**4PS.o
            CurrExchRate.ExchangeRate(0, '',ReminderHeaderReq."Posting Date",CurrencyCode,TRUE),TRUE)); //**4PS.n
      EXIT(Amount);
    END;

    LOCAL PROCEDURE FilterCustLedgEntries@6(VAR ReminderLevel2@1001 : Record 293);
    VAR
      ReminderLevel3@1000 : Record 293;
      LastLevel@1002 : Boolean;
    BEGIN
      ReminderLevel3 := ReminderLevel2;
      ReminderLevel3.COPYFILTERS(ReminderLevel2);
      IF ReminderLevel3.NEXT = 0 THEN
        LastLevel := TRUE
      ELSE
        LastLevel := FALSE;
      IF ReminderTerms."Max. No. of Reminders" > 0 THEN
        IF ReminderLevel2."No." <= ReminderTerms."Max. No. of Reminders" THEN
          IF LastLevel THEN
            CustLedgEntry.SETRANGE("Last Issued Reminder Level",ReminderLevel2."No." - 1,ReminderTerms."Max. No. of Reminders" - 1)
          ELSE
            CustLedgEntry.SETRANGE("Last Issued Reminder Level",ReminderLevel2."No." - 1)
        ELSE
          CustLedgEntry.SETRANGE("Last Issued Reminder Level",-1)
      ELSE
        IF LastLevel THEN
          CustLedgEntry.SETFILTER("Last Issued Reminder Level",'%1..',ReminderLevel2."No." - 1)
        ELSE
          CustLedgEntry.SETRANGE("Last Issued Reminder Level",ReminderLevel2."No." - 1);
    END;

    LOCAL PROCEDURE FilterCustLedgEntryReminderLevel@10(VAR CustLedgEntry@1000 : Record 21;VAR ReminderLevel@1001 : Record 293;CurrencyCode@1002 : Code[10]);
    BEGIN
      WITH Cust DO BEGIN
        CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date","Currency Code");
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE("Customer No.","No.");
        CustLedgEntry.SETRANGE("Due Date");
        CustLedgEntry.SETRANGE("Last Issued Reminder Level");
        CustLedgEntry.SETRANGE("Currency Code",CurrencyCode);
        //**4PS.sn
        CustLedgEntry.SETRANGE("On Hold",''); //Filter applied, for entries with 'On Hold' never make a reminder
        CustLedgEntry.SETRANGE("Blocked for Reminder", '');; //**4PS.n DP00794
        //**4PS.en
        ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTerms.Code);
      END;
    END;

    LOCAL PROCEDURE SetReminderLine@5(VAR LineLevel2@1000 : Integer;Level@1003 : Integer;VAR ReminderDueDate2@1001 : Date);
    BEGIN
      IF Level > 1 THEN BEGIN
        ReminderEntry.SETCURRENTKEY("Customer Entry No.",Type);
        ReminderEntry.SETRANGE("Customer Entry No.",CustLedgEntry."Entry No.");
        ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
        ReminderEntry.SETRANGE("Reminder Level", CustLedgEntry."Last Issued Reminder Level");
        ReminderEntry.FINDLAST;
        ReminderDueDate2 := ReminderEntry."Due Date";
        LineLevel2 := ReminderEntry."Reminder Level" +1
      END ELSE BEGIN
        ReminderDueDate2 := CustLedgEntry."Due Date";
        LineLevel2 := 1;
      END;
    END;

    LOCAL PROCEDURE GetHighestLineNo@1080000(ReminderNo@1080000 : Code[20]) LineNo : Integer;
    VAR
      ReminderLineExtra@1080001 : Record 296;
    BEGIN
      ReminderLineExtra.RESET;
      ReminderLineExtra.SETRANGE("Reminder No.",ReminderNo);
      IF ReminderLineExtra.FIND('+') THEN
        LineNo := ReminderLineExtra."Line No."
      ELSE
        LineNo := 0;
    END;

    PROCEDURE AddLineFeeForCustLedgEntry@1013(VAR CustLedgEntry@1006 : Record 21;VAR ReminderLevel@1000 : Record 293;NextLineNo@1007 : Integer);
    VAR
      TempCustLedgEntry@1001 : TEMPORARY Record 21;
      IssuedReminderLine@1002 : Record 298;
      CustPostingGr@1003 : Record 92;
      LineFeeAmount@1005 : Decimal;
    BEGIN
      TempCustLedgEntry := CustLedgEntry;
      TempCustLedgEntry.INSERT;
      TempCustLedgEntry.RESET;
      TempCustLedgEntry.COPYFILTERS(CustLedgEntryLineFeeFilters);
      IF NOT TempCustLedgEntry.FINDFIRST THEN
        EXIT;

      CustLedgEntry.CALCFIELDS("Remaining Amount");
      LineFeeAmount := ReminderLevel.GetAdditionalFee(CustLedgEntry."Remaining Amount",
          ReminderHeader."Currency Code",TRUE,ReminderHeader."Posting Date");
      IF LineFeeAmount = 0 THEN
        EXIT;

      IssuedReminderLine.SETRANGE(Type,IssuedReminderLine.Type::"Line Fee");
      IssuedReminderLine.SETRANGE("Applies-To Document Type",CustLedgEntry."Document Type");
      IssuedReminderLine.SETRANGE("Applies-To Document No.",CustLedgEntry."Document No.");
      IssuedReminderLine.SETRANGE("No. of Reminders",ReminderLevel."No.");
      IF IssuedReminderLine.FINDFIRST THEN
        EXIT;

      CustPostingGr.GET(ReminderHeader."Customer Posting Group");
      CustPostingGr.TESTFIELD("Add. Fee per Line Account");

      NextLineNo := NextLineNo + 100;
      ReminderLine.INIT;
      ReminderLine.VALIDATE("Reminder No.",ReminderHeader."No.");
      ReminderLine.VALIDATE("Line No.",NextLineNo);
      ReminderLine.VALIDATE(Type,ReminderLine.Type::"Line Fee");
      ReminderLine.VALIDATE("No.",CustPostingGr."Add. Fee per Line Account");
      ReminderLine.VALIDATE("No. of Reminders",ReminderLevel."No.");
      ReminderLine.VALIDATE("Applies-to Document Type",CustLedgEntry."Document Type");
      ReminderLine.VALIDATE("Applies-to Document No.",CustLedgEntry."Document No.");
      ReminderLine.VALIDATE("Due Date",CALCDATE(ReminderLevel."Due Date Calculation",ReminderHeader."Document Date"));
      ReminderLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE SetReminderLevel@9(ReminderHeader@1000 : Record 295;LineLevel@1001 : Integer);
    BEGIN
      IF ReminderHeader."Use Header Level" THEN
        ReminderLine."No. of Reminders" := ReminderHeader."Reminder Level"
      ELSE
        ReminderLine."No. of Reminders" := LineLevel;
    END;

    LOCAL PROCEDURE RemoveLinesOfNegativeReminder@8(VAR ReminderHeader@1000 : Record 295);
    VAR
      ReminderTotal@1002 : Decimal;
    BEGIN
      ReminderHeader.CALCFIELDS(
        "Remaining Amount","Interest Amount","Additional Fee","VAT Amount");

      ReminderTotal := ReminderHeader."Remaining Amount" + ReminderHeader."Interest Amount" +
        ReminderHeader."Additional Fee" + ReminderHeader."VAT Amount";

      IF ReminderTotal < 0 THEN
        ReminderHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE GetOpenEntriesNotDueOnHoldTranslated@11(CustomerLanguageCode@1004 : Code[10];VAR OpenEntriesNotDueTranslated@1001 : Text[100];VAR OpenEntriesOnHoldTranslated@1000 : Text[100]);
    VAR
      Language@1003 : Record 8;
      CurrentLanguageCode@1002 : Integer;
    BEGIN
      IF CustomerLanguageCode <> '' THEN BEGIN
        CurrentLanguageCode := GLOBALLANGUAGE;
        GLOBALLANGUAGE(Language.GetLanguageID(CustomerLanguageCode));
        OpenEntriesNotDueTranslated := Text0000;
        OpenEntriesOnHoldTranslated := Text0001;
        GLOBALLANGUAGE(CurrentLanguageCode);
      END ELSE BEGIN
        OpenEntriesNotDueTranslated := Text0000;
        OpenEntriesOnHoldTranslated := Text0001;
      END;
    END;

    BEGIN
    {
      Version List=NAVW19.00.00.45834,NAVSE9.00.00.45834;
      Version List=NAVW19.00.00.45834,NAVFI9.00.00.45834;
    }
    END.
  }
}

