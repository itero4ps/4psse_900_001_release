OBJECT Codeunit 400 SMTP Mail
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.43402,4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 409=r;
    OnRun=BEGIN
            Send; //**4PS.n
          END;

  }
  CODE
  {
    VAR
      SMTPMailSetup@1003 : Record 409;
      Mail@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage";
      Text002@1002 : TextConst 'ENU=Attachment %1 does not exist or can not be accessed from the program.';
      Text003@1005 : TextConst 'ENU=The SMTP mail system returned the following error: "%1".';
      SendResult@1004 : Text;
      FileMgt@1100525002 : Codeunit 419;
      Text11012001@1100525001 : TextConst 'ENU=Please specify a sender address.';
      FileNameArrayList@1100525004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      AttachmentsUploaded@1100525003 : Boolean;

    PROCEDURE CreateMessage@1(SenderName@1008 : Text;SenderAddress@1000 : Text;Recipients@1001 : Text;Subject@1004 : Text;Body@1005 : Text;HtmlFormatted@1006 : Boolean);
    VAR
      Mail2@1100528400 : Codeunit 397;
    BEGIN
      IF Recipients <> '' THEN
        CheckValidEmailAddresses(Recipients);
      IF SenderAddress = '' THEN  //**4PS01.n
        ERROR(Text11012001);            //**4PS01.n
      CheckValidEmailAddresses(SenderAddress);
      SMTPMailSetup.GET;
      SMTPMailSetup.TESTFIELD("SMTP Server");
      IF NOT ISNULL(Mail) THEN BEGIN
        Mail.Dispose;
        CLEAR(Mail);
      END;
      SendResult := '';
      Mail := Mail.SmtpMessage;
      Mail.FromName := SenderName;
      Mail.FromAddress := SenderAddress;
      Mail."To" := Recipients;
      Mail.Subject := Subject;
      //Mail.Body := Body; //**4PS.o
      //**4PS.sn
      IF HtmlFormatted THEN
        Mail.Body := Mail2.FormatTextForHtml(Body)
      ELSE
        Mail.Body := Body;
      //**4PS.en
      Mail.HtmlFormatted := HtmlFormatted;
    END;

    PROCEDURE TrySend@10() : Boolean;
    BEGIN
      SendResult := '';
      WITH SMTPMailSetup DO
        SendResult :=
          Mail.Send(
            "SMTP Server",
            "SMTP Server Port",
            Authentication <> Authentication::Anonymous,
            "User ID",
            Password,
            "Secure Connection");
      Mail.Dispose;
      CLEAR(Mail);

      //**4PS.sn
      IF AttachmentsUploaded THEN
        DeleteUploadedAttachments;
      //**4PS.en

      EXIT(SendResult = '');
    END;

    PROCEDURE Send@3();
    BEGIN
      IF NOT TrySend THEN
        ERROR(Text003,SendResult);
    END;

    PROCEDURE AddRecipients@4(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddRecipients(Recipients);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AddCC@5(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddCC(Recipients);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AddBCC@6(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddBCC(Recipients);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AppendBody@7(BodyPart@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      Result := Mail.AppendBody(BodyPart);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AddAttachment@2(Attachment@1000 : Text;FileName@1002 : Text);
    VAR
      FileManagement@1003 : Codeunit 419;
      Result@1001 : Text;
    BEGIN
      IF Attachment = '' THEN
        EXIT;
      IF NOT EXISTS(Attachment) THEN
        ERROR(Text002,Attachment);

      FileName := FileManagement.StripNotsupportChrInFileName(FileName);
      FileName := DELCHR(FileName,'=',';'); // Used for splitting multiple file names in Mail .NET component

      Result := Mail.AddAttachmentWithName(Attachment,FileName);

      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AddAttachmentStream@15(AttachmentStream@1000 : InStream;AttachmentName@1001 : Text);
    VAR
      FileManagement@1002 : Codeunit 419;
    BEGIN
      AttachmentName := FileManagement.StripNotsupportChrInFileName(AttachmentName);

      Mail.AddAttachment(AttachmentStream,AttachmentName);
    END;

    PROCEDURE CheckValidEmailAddresses@8(Recipients@1000 : Text);
    VAR
      MailManagement@1002 : Codeunit 9520;
    BEGIN
      MailManagement.CheckValidEmailAddresses(Recipients);
    END;

    PROCEDURE GetLastSendMailErrorText@9() : Text;
    BEGIN
      EXIT(SendResult);
    END;

    PROCEDURE GetSMTPMessage@35(VAR SMTPMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage");
    BEGIN
      SMTPMessage := Mail;
    END;

    PROCEDURE IsEnabled@11() : Boolean;
    BEGIN
      IF SMTPMailSetup.FIND THEN
        EXIT(NOT (SMTPMailSetup."SMTP Server" = ''));

      EXIT(FALSE);
    END;

    PROCEDURE ApplyOffice365Smtp@12(VAR SMTPMailSetupConfig@1000 : Record 409);
    BEGIN
      // This might be changed by the Microsoft Office 365 team.
      // Current source: http://technet.microsoft.com/library/dn554323.aspx
      SMTPMailSetupConfig."SMTP Server" := 'smtp.office365.com';
      SMTPMailSetupConfig."SMTP Server Port" := 587;
      SMTPMailSetupConfig.Authentication := SMTPMailSetupConfig.Authentication::Basic;
      SMTPMailSetupConfig."Secure Connection" := TRUE;
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    PROCEDURE HandleSMTPRegisterServiceConnection@14(VAR ServiceConnection@1000 : Record 1400);
    VAR
      SMTPMailSetup@1001 : Record 409;
      RecRef@1002 : RecordRef;
    BEGIN
      IF NOT SMTPMailSetup.GET THEN BEGIN
        IF NOT SMTPMailSetup.WRITEPERMISSION THEN
          EXIT;
        SMTPMailSetup.INIT;
        SMTPMailSetup.INSERT;
      END;

      RecRef.GETTABLE(SMTPMailSetup);

      ServiceConnection.Status := ServiceConnection.Status::Enabled;
      IF SMTPMailSetup."SMTP Server" = '' THEN
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      WITH SMTPMailSetup DO
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLECAPTION,'',PAGE::"SMTP Mail Setup");
    END;

    PROCEDURE GetBody@13() : Text;
    BEGIN
      EXIT(Mail.Body);
    END;

    PROCEDURE AddAttachmentFromClient@1100525500(Attachment@1000 : Text;FileName@1100528400 : Text);
    VAR
      FileMgt@1100525500 : Codeunit 419;
      ClientDirectory@1100525502 : Text[260];
      ShortFileName@1100525503 : Text[260];
      ServerFileName@1100525504 : Text[260];
      ServerTempFileName@1100525000 : Text[260];
    BEGIN
      //**4PS
      IF NOT FileMgt.ClientAvailable THEN BEGIN
        AddAttachment(Attachment, FileName);
        EXIT;
      END;

      IF Attachment = '' THEN
        EXIT;
      IF NOT FileMgt.ClientFileExists(Attachment) THEN
        ERROR(Text002, Attachment);

      FileMgt.SplitFileAbsPathName(Attachment, ClientDirectory, ShortFileName);
      ShortFileName := DELCHR(ShortFileName, '=', ',');
      ServerFileName := FileMgt.ServerTempFolderName + ShortFileName;
      ServerTempFileName := FileMgt.UploadFileSilent(Attachment);
      IF FILE.EXISTS(ServerFileName) THEN
        FILE.ERASE(ServerFileName);
      FILE.RENAME(ServerTempFileName, ServerFileName);
      AddAttachment(ServerFileName, FileName);

      IF NOT AttachmentsUploaded THEN BEGIN
        AttachmentsUploaded := TRUE;
        CLEAR(FileNameArrayList);
        FileNameArrayList := FileNameArrayList.ArrayList;
      END;
      FileNameArrayList.Add(ServerFileName);
    END;

    LOCAL PROCEDURE DeleteUploadedAttachments@1100525001();
    VAR
      FileNameArray@1100525000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      I@1100525001 : Integer;
    BEGIN
      FileNameArray := FileNameArrayList.ToArray;
      FOR I := 1 TO FileNameArray.Length DO BEGIN
        FILE.ERASE(FileNameArray.GetValue(I-1));
        AttachmentsUploaded := FALSE;
      END;
    END;

    BEGIN
    {
      This Codeunit is (together with T409 and F409) copied from Navision 5. This adds the possibility to send mail through SMTP.
      To actually use this CU, it is necessary that objects Microsoft.Navision.Mail.dll and ...tlb are installed and registered.
      Please check the manual for the correct installation

      Changes in the CU:
      25-nov-2008 WWB - In CheckValidEMailAddress only Capital letter 'A's where validated, changed it in A..Z
      28-nov-2008 WWB - Function SMTPAvailable, returns a value which indicates if SMTP object is available.
      29-apr-2009 JD 4PS01 Give clear message if sender address is empty
    }
    END.
  }
}

