OBJECT Codeunit 6085576 Capture Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.4.04,4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WordFunc@1000000002 : Codeunit 6085574;
      Text004@1000000004 : TextConst 'ENU=Automatically Created';
      Text005@1000000005 : TextConst 'ENU=The value of the field does not match the current Field Rule.\\Do you wish to update the Field Rule to be ''%1'' (%2)?';
      Text006@1000000006 : TextConst 'ENU=The value of the field does not match the current Field Rule.\\Do you wish to update the Field Rule to be ''%1''?';
      Text007@161024012 : TextConst 'ENU=Lookup in this field is not possible.';
      Text008@161024013 : TextConst 'ENU=T';
      Text009@161024014 : TextConst 'ENU=The value of the field does not match the current setup. You can change the setup to:\\%1: %2\\This will recognize the date as ''%3'' (local format).\\Do you want to make this change?';
      Text010@161024016 : TextConst 'ENU=The value of the field does not match the current setup. You can change the setup to:\\%1: %2 (%3)\\This will recognize the date as ''%4'' (local format).\\Do you want to make this change?';
      Text011@161024015 : TextConst 'ENU=The value of the field does not match the current setup. You can change the setup to:\\%1: %2\%3: %4 (%5)\\This will recognize the date as ''%6'' (local format).\\Do you want to make this change?';
      Text013@161024018 : TextConst 'ENU=The value of the field does not match the current Field Rule.\\Do you want to have the current rule overwritten so it matches the new value?';

    PROCEDURE CaptureFromPos@1000000000(Page@1000000000 : Record 6085591;VAR Field@1000000016 : Record 6085580;LineNo@1000000013 : Integer;IsValue@1000000009 : Boolean;VAR Top@1000000008 : Integer;VAR Left@1000000007 : Integer;VAR Bottom@1000000006 : Integer;VAR Right@1000000005 : Integer;VAR Value@1000000010 : Record 6085593) : Text[1024];
    VAR
      Words@1000000003 : TEMPORARY Record 6085592;
      MiddleWord@161024014 : Record 6085592;
      DoModify@1000000014 : Boolean;
      Text@1000000001 : Text[1024];
      IsNew@1000000002 : Boolean;
      Middle@161024012 : Integer;
      LowOffset@161024013 : Integer;
      NewTop@161024018 : Integer;
      NewLeft@161024017 : Integer;
      NewBottom@161024016 : Integer;
      NewRight@161024015 : Integer;
    BEGIN
      WordFunc.GetWordsInRegion(Page,Top,Left,Bottom,Right,Words);
      Words.SETRANGE(Type,Field."Field Type");

      IF (Words.COUNT > 1) AND ((NOT Field.Multiline) OR (NOT IsValue)) THEN BEGIN
        Middle := ROUND((Bottom - Top) / 2,1) + Top;
        LowOffset := -1;
        Words.FINDSET;
        REPEAT
          IF NOT (Words.Word IN ['ùï`']) THEN
            IF (Words.Word <> '.') AND (Words.Word <> ',') AND (Words.Word <> '''') AND (Words.Word <> '-') THEN
              IF (LowOffset = -1) OR (ABS((ROUND((Words.Bottom - Words.Top) / 2,1) + Words.Top) - Middle) < LowOffset) THEN BEGIN
                LowOffset := ABS((ROUND((Words.Bottom - Words.Top) / 2,1) + Words.Top) - Middle);
                MiddleWord := Words;
              END;
        UNTIL Words.NEXT = 0;

        Words.FINDSET;
        REPEAT
          IF NOT WordFunc.IsWordsOnSameLine(Words,MiddleWord) THEN
            Words.DELETE;
        UNTIL Words.NEXT = 0;
        Words.SETCURRENTKEY("Document No.","Page No.",Left);
      END;
      WordFunc.GetRectFromWords(Words,NewTop,NewLeft,NewBottom,NewRight);
      IF IsValue AND (NOT Field."Auto Update Field Width") THEN BEGIN
        Left := IIFInt(NewLeft < Left,NewLeft,Left);
        Right := IIFInt(NewRight > Right,NewRight,Right);
      END ELSE BEGIN
        Left := NewLeft;
        Right := NewRight;
      END;

      IF IsValue AND (NOT Field."Auto Update Field Height") THEN BEGIN
        Top := IIFInt(NewTop < Top,NewTop,Top);
        Bottom := IIFInt(NewBottom > Bottom,NewBottom,Bottom);
      END ELSE BEGIN
        Top := NewTop;
        Bottom := NewBottom;
      END;

      IF NOT Value.GET(Page."Document No.",IsValue,Field.Code,LineNo) THEN BEGIN
        Value.INIT;
        Value."Document No." := Page."Document No.";
        Value."Is Value" := IsValue;
        Value.Type := Field.Type;
        Value.Code := Field.Code;
        Value."Line No." := LineNo;
        IsNew := TRUE;
      END;

      Value."Template No." := Field."Template No.";
      Value."Page No." := Page."Page No.";

      Value.Top := Top;
      Value.Left := Left;
      Value.Bottom := Bottom;
      Value.Right := Right;

      IF IsValue THEN BEGIN
        Text := ApplyTranslationToWord(Field,WordFunc.CombineWords(Words));
        IF IsNew THEN
          Value.INSERT
        ELSE
          Value.MODIFY;

        UpdateFieldValue(Page."Document No.",Page."Page No.",LineNo,Field,Text,FALSE);

        EXIT(Text);
      END ELSE BEGIN
        IF IsNew THEN
          Value.INSERT
        ELSE
          Value.MODIFY;

        EXIT(WordFunc.CombineWords(Words));
      END;
    END;

    PROCEDURE UpdateFieldValue@1000000017(DocumentNo@1000000003 : Code[20];PageNo@161024014 : Integer;LineNo@1000000004 : Integer;VAR Field@1000000001 : Record 6085580;Word@1000000000 : Text[1024];Manual@1000000005 : Boolean);
    VAR
      Comment@161024012 : Record 6085594;
      Value@1000000002 : Record 6085593;
      FieldRule@1000000007 : Record 6085583;
      RecIDMgt@1160040000 : Codeunit 6085604;
      ValidatedDate@161024013 : Date;
      IsNew@1000000006 : Boolean;
      Parsed@1160040001 : Boolean;
    BEGIN
      IF (NOT Value.GET(DocumentNo,TRUE,Field.Code,LineNo)) THEN BEGIN
        Value.INIT;
        Value."Document No." := DocumentNo;
        Value."Page No." := PageNo;
        Value."Is Value" := TRUE;
        Value."Template No." := Field."Template No.";
        Value.Type := Field.Type;
        Value.Code := Field.Code;
        Value."Line No." := LineNo;
        IsNew := TRUE;
      END;

      IF Manual AND (Word = '') THEN BEGIN
        Value.Top := 0;
        Value.Left := 0;
        Value.Bottom := 0;
        Value.Right := 0;
      END;

      IF Manual THEN
        ValidateField(DocumentNo,Field,LineNo,Word);

      Value."Value (Text)" := COPYSTR(Word,1,MAXSTRLEN(Value."Value (Text)"));
      IF NOT Manual THEN BEGIN
        IF ParseField(Field,Word,FALSE) THEN BEGIN
          CASE Field."Data Type" OF
            Field."Data Type"::Text:
              BEGIN
                Value."Is Valid" := ParseText(Field,Word,Value."Value (Text)",MAXSTRLEN(Value."Value (Text)"));
                IF Value."Is Valid" THEN
                  Value."Is Valid" := IsValidText(Field,Value."Value (Text)");
              END;

            Field."Data Type"::Number:
              BEGIN
                Value."Is Valid" := ParseNumber(Field,Word,Value."Value (Decimal)");

                IF Value."Is Valid" THEN
                  Value."Is Valid" := IsValidNumber(Field,Value."Value (Decimal)");
              END;

            Field."Data Type"::Date:
              BEGIN
                Value."Is Valid" := ParseDate(Field,Word,Value."Value (Date)");
                IF Value."Is Valid" THEN
                  Value."Is Valid" := IsValidDate(Field,Value."Value (Date)");
              END;

            Field."Data Type"::Lookup:
              BEGIN
                Value."Is Valid" := ParseLookup(Value,Field);
                IF Value."Is Valid" THEN
                  Value."Is Valid" := IsValidLookup(Field,
                    RecIDMgt.GetKeyValue(Value."Value (Record ID Tree ID)",Field."Source Field No."));
              END;

            Field."Data Type"::Boolean:
              BEGIN
                Value."Is Valid" := ParseBoolean(Word,Value."Value (Boolean)");

                IF Value."Is Valid" THEN
                  Value."Is Valid" := IsValidBoolean(Field,Value."Value (Boolean)");
              END;

          END;
        END;

      END ELSE BEGIN
        Comment.SETCURRENTKEY("Document No.");
        Comment.SETRANGE("Document No.",DocumentNo);
        Comment.SETRANGE("Field Type",Field.Type);
        Comment.SETRANGE("Field Code",Field.Code);
        Comment.SETRANGE("Line No.",LineNo);
        Comment.DELETEALL(TRUE);

        CASE Field."Data Type" OF
          Field."Data Type"::Text:
            BEGIN
              Value."Is Valid" := ParseText(Field,Word,Value."Value (Text)",MAXSTRLEN(Value."Value (Text)"));

              IF Value."Is Valid" THEN
                Value."Is Valid" := IsValidText(Field,Value."Value (Text)");

              FilterRule(Field,FieldRule);
              IF ((NOT Value."Is Valid") OR (FieldRule.ISEMPTY)) AND (Word <> '') THEN BEGIN
                IF Field."Enable Rule Generation" THEN BEGIN
                  IF CONFIRM(Text013,FALSE) THEN BEGIN
                    IF NOT FieldRule.FINDFIRST THEN
                      InitRule(Field,FieldRule);
                    FieldRule.Rule := BuildTextRegExPattern(Word);
                    FieldRule.Description := Text004;
                    IF NOT FieldRule.INSERT(TRUE) THEN
                      FieldRule.MODIFY(TRUE);
                  END;
                END;

                Value."Is Valid" := IsValidText(Field,Value."Value (Text)");
              END;
            END;

          Field."Data Type"::Number:
            BEGIN
              IF Word = '' THEN
                Value."Value (Decimal)" := 0
              ELSE BEGIN
                IF (STRPOS(Word,GetDecSep) = 0) AND (STRPOS(Word,GetThousandSep) <> 1) THEN
                  Parsed := EVALUATE(Value."Value (Decimal)",Replace(Word,GetThousandSep,GetDecSep,FALSE));

                IF NOT Parsed THEN
                  Parsed := EVALUATE(Value."Value (Decimal)",Word);
                IF NOT Parsed THEN
                  Value."Value (Decimal)" := CalcExpression(Word);
              END;
              Value."Value (Decimal)" := RoundFromDecPlaces(Value."Value (Decimal)",Field."Decimal Places");
              Value."Is Valid" := IsValidNumber(Field,Value."Value (Decimal)");
            END;

          Field."Data Type"::Date:
            BEGIN
              IF Word = '' THEN
                Value."Value (Date)" := 0D
              ELSE BEGIN
                IF UPPERCASE(Word) = Text008 THEN
                  ValidatedDate := TODAY;
                IF EVALUATE(ValidatedDate,Word) THEN
                  IF ValidatedDate < 17540101D THEN
                    ValidatedDate := 0D;
                Value."Value (Date)" := ValidatedDate;
              END;
              Value."Is Valid" := IsValidDate(Field,Value."Value (Date)");
              IF (NOT Value."Is Valid") AND (Word <> '') THEN BEGIN
                IF EVALUATE(ValidatedDate,DELCHR(Word,'=','-')) THEN
                  IF ValidatedDate < 17540101D THEN
                    ValidatedDate := 0D;
                Value."Value (Date)" := ValidatedDate;
                Value."Is Valid" := IsValidDate(Field,Value."Value (Date)");
              END;
            END;
          Field."Data Type"::Lookup:
            BEGIN
              Value."Is Valid" := ParseLookup(Value,Field);
              IF Value."Is Valid" THEN
                Value."Is Valid" := IsValidLookup(Field,
                  RecIDMgt.GetKeyValue(Value."Value (Record ID Tree ID)",Field."Source Field No."));
            END;

          Field."Data Type"::Boolean:
            Value."Is Valid" := ParseBoolean(Word,Value."Value (Boolean)");

        END;
      END;

      IF (Field."Codeunit ID: Lookup" <> 0) THEN
        Value."Value (Lookup)" := COPYSTR(Value."Value (Text)",1,MAXSTRLEN(Value."Value (Lookup)"));

      IF Value."Is Valid" AND (Field."Codeunit ID: Is OK" <> 0) AND (Value."Value (Text)" <> '') THEN
        CODEUNIT.RUN(Field."Codeunit ID: Is OK",Value);

      IF IsNew THEN
        Value.INSERT(TRUE)
      ELSE
        Value.MODIFY(TRUE);

      IF (Field.Formula = '') THEN
        UpdateFormulaFields(DocumentNo,Field.Type,PageNo,LineNo);
    END;

    PROCEDURE UpdateFieldCaption@1000000004(VAR Field@1000000001 : Record 6085580;PageNo@1002 : Integer;Top@1000 : Integer;Left@1001 : Integer;Word@1000000000 : Text[1024]);
    VAR
      Caption@1000000002 : Record 6085581;
    BEGIN
      IF Word = '' THEN
        EXIT;

      IF NOT Field."Auto Update Caption" THEN
        EXIT;

      Caption.SETRANGE("Template No.",Field."Template No.");
      Caption.SETRANGE(Type,Field.Type);
      Caption.SETRANGE(Code,Field.Code);
      Caption.DELETEALL(TRUE);

      Caption."Template No." := Field."Template No.";
      Caption.Type := Field.Type;
      Caption.Code := Field.Code;
      Caption."Entry No." := 1;
      Caption.Caption := Word;
      Caption."Page No." := PageNo;
      Caption.Top := Top;
      Caption.Left := Left;
      Caption.INSERT(TRUE);
    END;

    PROCEDURE UpdateCaptionOffset@1000000011(VAR Field@1000000000 : Record 6085580;DocumentNo@1000000001 : Code[20]);
    VAR
      Value@1000000002 : Record 6085593;
      Caption@1000000003 : Record 6085593;
      Page@1160040000 : Record 6085591;
    BEGIN
      IF NOT Value.GET(DocumentNo,TRUE,Field.Code) THEN
        EXIT;

      IF NOT Caption.GET(DocumentNo,FALSE,Field.Code) THEN
        EXIT;

      IF (Value.Top = 0) OR (Caption.Top = 0) OR (Value.Left = 0) OR (Caption.Left = 0) THEN
        EXIT;

      Page.GET(DocumentNo,Value."Page No.");
      Field."Caption Offset X" := Value.Left - Caption.Left;
      Field."Caption Offset Y" := Value.Top - Caption.Top;
      Field."Offset DPI" := Page."TIFF Image Resolution";
      Field.MODIFY(TRUE);
    END;

    PROCEDURE UpdateFormulaFields@161024014(DocumentNo@161024012 : Code[20];FieldType@161024015 : Integer;PageNo@161024018 : Integer;LineNo@161024017 : Integer);
    VAR
      Document@161024013 : Record 6085590;
      Field@161024014 : Record 6085580;
      Formula@161024016 : Text[1024];
      DecValue@1160040000 : Decimal;
    BEGIN
      Document.GET(DocumentNo);
      Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETFILTER(Formula,'<>%1','');
      IF Field.FINDSET THEN
        REPEAT
          Formula := CalcFieldFormula(Document,Field.Formula,Field."Data Type" = Field."Data Type"::Number,0);
          IF Field."Data Type" = Field."Data Type"::Number THEN BEGIN
            Formula := FORMAT(CalcExpression(Formula));
            IF Field."Decimal Places" <> '' THEN BEGIN
              EVALUATE(DecValue,Formula);

              Formula := FORMAT(DecValue,0,STRSUBSTNO('<Precision,%1><Standard Format,0>',Field."Decimal Places"));
              IF STRPOS(Formula,GetDecSep) = 0 THEN
                Formula := Formula + GetDecSep + '00';

              UpdateFieldValue(Document."No.",PageNo,0,Field,Formula,TRUE);
            END ELSE
              UpdateFieldValue(Document."No.",PageNo,0,Field,Formula,TRUE);
          END ELSE BEGIN
            Formula := ApplyTranslationToWord(Field,Formula);
            UpdateFieldValue(Document."No.",PageNo,0,Field,Formula,TRUE);
          END;
        UNTIL Field.NEXT = 0;

      IF LineNo = 0 THEN
        EXIT;

      Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Line);
      Field.SETFILTER(Formula,'<>%1','');
      IF Field.FINDSET THEN
        REPEAT
          Formula := CalcFieldFormula(Document,Field.Formula,Field."Data Type" = Field."Data Type"::Number,LineNo);
          IF Field."Data Type" = Field."Data Type"::Number THEN BEGIN
            Formula := FORMAT(CalcExpression(Formula));
            IF STRPOS(Formula,GetDecSep) = 0 THEN
              Formula := Formula + GetDecSep + '00';
          END;

          Formula := ApplyTranslationToWord(Field,Formula);

          UpdateFieldValue(Document."No.",PageNo,LineNo,Field,Formula,TRUE);
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE CalcFieldFormula@161024016(Document@161024016 : Record 6085590;Formula@161024012 : Text[1024];IsNumber@161024013 : Boolean;LineNo@161024018 : Integer) : Text[1024];
    VAR
      Field@161024014 : Record 6085580;
      TempField@1160040000 : TEMPORARY Record 6085580;
      TemplField@161024015 : Record 6085580;
      Amount@161024017 : Decimal;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");

      IF LineNo = 0 THEN
        Field.SETRANGE(Type,Field.Type::Header)
      ELSE
        Field.SETRANGE(Type,Field.Type::Line);

      IF IsNumber THEN
        Field.SETRANGE("Data Type",Field."Data Type"::Number);

      IF Field.FINDSET THEN
        REPEAT
          TempField := Field;
          TempField."Sort Order" := STRLEN(Field.Code);
          TempField.INSERT;
        UNTIL Field.NEXT = 0;

      TempField.SETCURRENTKEY("Template No.",Type,"Sort Order");
      TempField.ASCENDING(FALSE);
      IF TempField.FINDFIRST THEN
        REPEAT
          IF TempField."Data Type" = TempField."Data Type"::Number THEN BEGIN
            Amount := GetDecimal(Document,TempField.Type,TempField.Code,LineNo);

            // *********************************************************************************************************************
            // FIND POTENTIAL AMOUNTS (FROM OTHER TEMPLATE FIELDS) TO BE SUBTRACTED
            // *********************************************************************************************************************
            TemplField.SETRANGE("Template No.",Document."Template No.");
            TemplField.SETRANGE(Type,TempField.Type);
            TemplField.SETRANGE("Subtract from Amount Field",TempField.Code);
            IF TemplField.FINDSET THEN
              REPEAT
                Amount := Amount - GetDecimal(Document,TemplField.Type,TemplField.Code,LineNo);
              UNTIL TemplField.NEXT = 0;

            Formula := Replace(Formula,TempField.Code,FORMAT(Amount),FALSE);
          END ELSE
            Formula := Replace(Formula,TempField.Code,GetValueAsText(Document."No.",LineNo,TempField),FALSE);

        UNTIL TempField.NEXT = 0;

      EXIT(Formula);
    END;

    PROCEDURE GetFieldValue@1000000021(Document@1000000001 : Record 6085590;Field@1000000002 : Record 6085580;LineNo@1000000003 : Integer;VAR Value@1000000000 : Record 6085593) : Boolean;
    BEGIN
      Value.SETRANGE("Document No.",Document."No.");
      Value.SETRANGE(Type,Field.Type);
      Value.SETRANGE(Code,Field.Code);
      Value.SETRANGE("Is Value",TRUE);
      IF LineNo <> 0 THEN
        Value.SETRANGE("Line No.",LineNo);
      EXIT(Value.FINDFIRST);
    END;

    PROCEDURE GetFieldValue2@1000000023(Document@1000000007 : Record 6085590;Type@1000000006 : Integer;Code@1000000000 : Code[20];LineNo@1000000005 : Integer;VAR Value@1000000004 : Record 6085593) : Boolean;
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      Field.GET(Document."Template No.",Type,Code);
      EXIT(GetFieldValue(Document,Field,LineNo,Value));
    END;

    PROCEDURE ApplyTranslationToWord@1000000001(VAR Field@1000000001 : Record 6085580;Word@1000000000 : Text[1024]) : Text[1024];
    VAR
      FieldTransl@1000000002 : Record 6085582;
      Currency@161024013 : Record 4;
      TextToFind@161024012 : Text[250];
    BEGIN
      FieldTransl.SETRANGE("Template No.",Field."Template No.");
      FieldTransl.SETRANGE(Type,Field.Type);
      FieldTransl.SETRANGE(Code,Field.Code);
      IF FieldTransl.FINDSET(FALSE,FALSE) THEN
        REPEAT
          IF FieldTransl."Translate From" = '' THEN
            FieldTransl."Translate From" := ' ';

          IF FieldTransl."Translate From" <> '*' THEN BEGIN
            CASE STRPOS(FieldTransl."Translate From",'*') OF
              1:
                BEGIN
                  TextToFind := COPYSTR(FieldTransl."Translate From",2);
                  IF STRPOS(Word,TextToFind) > 0 THEN
                    Word := FieldTransl."Translate To" + COPYSTR(Word,STRPOS(Word,TextToFind) + STRLEN(TextToFind));
                END;
              STRLEN(FieldTransl."Translate From"):
                BEGIN
                  TextToFind := COPYSTR(FieldTransl."Translate From",1,STRLEN(FieldTransl."Translate From") - 1);
                  IF STRPOS(Word,TextToFind) > 0 THEN
                    Word := COPYSTR(Word,1,STRPOS(Word,TextToFind) - 1) + FieldTransl."Translate To";
                END;
            END;
          END;

          Word := Replace(Word,FieldTransl."Translate From",FieldTransl."Translate To",FieldTransl."Case-sensitive");
        UNTIL FieldTransl.NEXT = 0;

      IF (Field."Data Type" = Field."Data Type"::Number) AND (TextContainsLetters(Word)) THEN BEGIN
        IF Currency.READPERMISSION THEN
          IF Currency.FINDSET THEN
            REPEAT
              Word := Replace(Word,Currency.Code,'',FALSE);
            UNTIL Currency.NEXT = 0;
      END;

      IF Field."Delete Blanks" THEN
        Word := DELCHR(Word,'=',' ');

      EXIT(DELCHR(Word,'<>',' '));
    END;

    PROCEDURE FindTemplateFromSearchWords@1000000022(VAR Document@1000000001 : Record 6085590;VAR Template@1000000003 : Record 6085579;PageNo@1160040000 : Integer;SearchMasters@161024017 : Boolean) : Boolean;
    VAR
      DocumentPage@1160040001 : Record 6085591;
      DocumentWord@1000000002 : Record 6085592;
      TemplSearchText@161024013 : Record 6085588;
      DocCat@161024018 : Record 6085575;
      BigString@1000000000 : Codeunit 6085587;
      TemplateNo@161024012 : Code[20];
      Pos@1000000004 : Integer;
      FirstPos@1000000005 : Integer;
      Found@161024014 : Boolean;
      NoOfSearchTextFound@161024015 : Integer;
      i@161024016 : Integer;
    BEGIN
      DocumentPage.SETRANGE("Document No.",Document."No.");
      IF PageNo > 0 THEN
        DocumentPage.SETRANGE("Page No.",PageNo);

      IF DocumentPage.FINDSET THEN BEGIN
        DocumentWord.SETRANGE("Document No.",Document."No.");

        REPEAT
          DocumentWord.SETRANGE("Page No.",DocumentPage."Page No.");
          IF DocumentWord.FINDSET(FALSE,FALSE) THEN
            REPEAT
              BigString.Append(UPPERCASE(DELCHR(DocumentWord.Word,'=',' ,.-;:/\*+-')));
            UNTIL DocumentWord.NEXT = 0;
        UNTIL DocumentPage.NEXT = 0;
      END;

      DocCat.GET(Document."Document Category Code");
      Template.SETCURRENTKEY("Category Code","Source Sub Type");
      Template.SETRANGE("Category Code",Document."Document Category Code");
      IF SearchMasters THEN
        Template.SETRANGE("Source Sub Type",Template."Source Sub Type"::Master)
      ELSE
        Template.SETRANGE("Source Sub Type",Template."Source Sub Type"::" ");

      Template.SETFILTER("Search Text",'<>%1','');
      IF Template.FINDSET(FALSE,FALSE) THEN
        REPEAT
          Template.MARK(TRUE);
          Pos := BigString.IndexOf(UPPERCASE(DELCHR(Template."Search Text",'=',' ,.-;:/\*+-')));
          IF Pos <> -1 THEN BEGIN
            i := 0;
            Found := TRUE;

            TemplSearchText.SETRANGE("Template No.",Template."No.");
            IF TemplSearchText.FINDSET THEN BEGIN
              REPEAT
                IF BigString.IndexOf(UPPERCASE(DELCHR(TemplSearchText."Search Text",'=',' ,.-;:/\*+-'))) <> -1 THEN
                  i := i + 1
                ELSE
                  Found := FALSE;
              UNTIL (TemplSearchText.NEXT = 0) OR (NOT Found);
              IF Found THEN
                i := i + 1;
            END ELSE
              Found := NoOfSearchTextFound = 0;

            IF Found THEN BEGIN
              IF (i > 0) OR (NoOfSearchTextFound > 0) THEN BEGIN
                IF (i > NoOfSearchTextFound) OR (NoOfSearchTextFound = 0) THEN BEGIN
                  TemplateNo := Template."No.";
                  NoOfSearchTextFound := i;
                END;
              END ELSE IF ((Pos < FirstPos) OR (TemplateNo = '')) THEN BEGIN
                FirstPos := Pos;
                TemplateNo := Template."No.";
              END;
            END;
          END;
        UNTIL Template.NEXT = 0;

      TemplSearchText.SETRANGE("Template No.");
      IF TemplSearchText.FINDSET THEN
        REPEAT
          Template.GET(TemplSearchText."Template No.");
          IF SearchMasters THEN BEGIN
            IF (Template."Source Sub Type" = Template."Source Sub Type"::Master) THEN
              Found := TRUE;
          END ELSE
            Found := Template."Source Sub Type" = Template."Source Sub Type"::" ";

          IF (NOT Template.MARK) AND (Document."Document Category Code" = Template."Category Code") THEN BEGIN
            i := 0;
            TemplSearchText.SETRANGE("Template No.",TemplSearchText."Template No.");
            REPEAT
              IF BigString.IndexOf(UPPERCASE(DELCHR(TemplSearchText."Search Text",'=',' ,.-;:/\*+-'))) <> -1 THEN
                i := i + 1
              ELSE
                Found := FALSE;
            UNTIL (TemplSearchText.NEXT = 0) OR (NOT Found);

            IF Found THEN BEGIN
              IF (i > 0) OR (NoOfSearchTextFound > 0) THEN BEGIN
                IF (i > NoOfSearchTextFound) OR (NoOfSearchTextFound = 0) THEN BEGIN
                  TemplateNo := Template."No.";
                  NoOfSearchTextFound := i;
                END;
              END;
            END;
          END;

          TemplSearchText.SETRANGE("Template No.");
        UNTIL TemplSearchText.NEXT = 0;

      IF TemplateNo <> '' THEN
        Template.GET(TemplateNo);

      EXIT(TemplateNo <> '');
    END;

    PROCEDURE ParseField@1000000002(VAR Field@1000000001 : Record 6085580;Word@1000000000 : Text[1024];ValidateValue@1000000006 : Boolean) IsValid : Boolean;
    VAR
      OutText@1000000002 : Text[1024];
      OutCode@1000000003 : Code[1024];
      OutDecimal@1000000004 : Decimal;
      OutDate@1000000005 : Date;
      OutBoolean@1160040000 : Boolean;
    BEGIN
      CASE Field."Data Type" OF
        Field."Data Type"::Text:
          BEGIN
            IsValid := ParseText(Field,Word,OutText,MAXSTRLEN(OutText)) AND ((OutText <> '') OR (NOT Field.Required));
            IF ValidateValue AND IsValid THEN
              IsValid := IsValidText(Field,OutText);
          END;

        Field."Data Type"::Number:
          BEGIN
            IsValid := ParseNumber(Field,Word,OutDecimal);
            IF ValidateValue AND IsValid THEN
              IsValid := IsValidNumber(Field,OutDecimal);
          END;

        Field."Data Type"::Date:
          BEGIN
            IsValid := ParseDate(Field,Word,OutDate) AND ((OutDate <> 0D) OR (NOT Field.Required));
            IF ValidateValue AND IsValid THEN
              IsValid := IsValidDate(Field,OutDate);
          END;

        Field."Data Type"::Lookup:
          BEGIN
            IsValid := ParseCode(Field,Word,OutCode,MAXSTRLEN(OutCode));
            IF ValidateValue AND IsValid AND (OutCode <> '') THEN
              IsValid := IsValidLookup(Field,Word);
          END;

        Field."Data Type"::Boolean:
          BEGIN
            IsValid := ParseBoolean(Word,OutBoolean) OR (NOT Field.Required);
            IF ValidateValue AND IsValid THEN
              IsValid := IsValidBoolean(Field,OutBoolean);
          END;

      END;
    END;

    PROCEDURE ParseNumber@1000000008(VAR Field@1000000009 : Record 6085580;Text@1000000005 : Text[1024];VAR NewNumber@1000000007 : Decimal) : Boolean;
    VAR
      LeftSide@1000000000 : Text[30];
      RightSide@1000000001 : Text[30];
      NegNumber@1000000002 : Boolean;
      PassedDecPoint@1000000003 : Boolean;
      I@1000000004 : Integer;
      TempInt@1000000006 : Integer;
      TempDec@1000000008 : Decimal;
    BEGIN
      Text := DELCHR(Text,'=','$° ');
      IF Text = '' THEN BEGIN
        NewNumber := 0;
        EXIT(FALSE);
      END;

      FOR I := 1 TO STRLEN(Text) DO BEGIN
        IF (Text[I] = '.') OR (Text[I] = ',') OR (Text[I] = '''') THEN BEGIN
          IF PassedDecPoint THEN BEGIN
            IF STRLEN(LeftSide + RightSide) > MAXSTRLEN(LeftSide) THEN
              EXIT;

            LeftSide := LeftSide + RightSide;
            RightSide := '';
          END;
          PassedDecPoint := TRUE;
        END ELSE IF (Text[I] = '-') THEN
          NegNumber := TRUE
        ELSE BEGIN
          IF EVALUATE(TempInt,FORMAT(Text[I])) THEN BEGIN
            IF (NOT PassedDecPoint) THEN
              LeftSide := COPYSTR(LeftSide + FORMAT(Text[I]),1,MAXSTRLEN(LeftSide))
            ELSE
              RightSide := COPYSTR(RightSide + FORMAT(Text[I]),1,MAXSTRLEN(RightSide));
          END ELSE
            EXIT(FALSE);
        END;
      END;

      IF ((LeftSide = '') AND (RightSide = '')) THEN
        EXIT(FALSE);

      IF EVALUATE(TempDec,LeftSide + GetDecSep + RightSide) THEN BEGIN
        IF NegNumber AND NOT Field."Make Absolute Number" THEN
          NewNumber := TempDec * -1
        ELSE
          NewNumber := TempDec;
        NewNumber := RoundFromDecPlaces(NewNumber,Field."Decimal Places");
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ParseDate@1000000005(VAR Field@1000000002 : Record 6085580;Text@1000000001 : Text[1024];VAR NewDate@1000000000 : Date) : Boolean;
    VAR
      FieldRule@1000000008 : Record 6085583;
      Language@1000000003 : Record 8;
      DateParser@1000000007 : Codeunit 6085586;
      Text2@161024012 : Text[1024];
      ValidatedDate@161024013 : Date;
      LCID@1000000004 : Integer;
      i@161024014 : Integer;
    BEGIN
      FOR i := 1990 TO 2049 DO BEGIN
        Text := Replace(Text,COPYSTR(FORMAT(i),1,3) + ' ' + COPYSTR(FORMAT(i),4),FORMAT(i),FALSE);
        Text := Replace(Text,COPYSTR(FORMAT(i),1,1) + ' ' + COPYSTR(FORMAT(i),2),FORMAT(i),FALSE);

        IF i IN [2013..2049] THEN
          Text := Replace(Text,COPYSTR(FORMAT(i),1,2) + ' ' + COPYSTR(FORMAT(i),3),FORMAT(i),FALSE);
      END;

      NewDate := 0D;
      IF Text = '' THEN
        EXIT(FALSE);

      IF Language.GET(Field."Language Code") THEN
        LCID := Language."Windows Language ID";

      IF LCID = 0 THEN
        LCID := GLOBALLANGUAGE;

      FilterRule(Field,FieldRule);
      IF FieldRule.FINDSET THEN BEGIN
        REPEAT
          IF FieldRule.Rule <> '' THEN BEGIN
            FieldRule.Rule := Replace(FieldRule.Rule,'D','d',TRUE);
            FieldRule.Rule := Replace(FieldRule.Rule,'m','M',TRUE);
            FieldRule.Rule := Replace(FieldRule.Rule,'Y','y',TRUE);
            Text2 := Text;
            IF (UPPERCASE(FieldRule.Rule) IN ['DMMYY','DMMYYYY','DDMMYY','DDMMYYYY']) THEN
              IF (STRLEN(Text2) = 5) OR (STRLEN(Text2) = 7) THEN
                Text2 := '0' + Text2;

            IF DateParser.ParseExact(Text2,LCID,FieldRule.Rule) THEN BEGIN
              IF DMY2DATE(DateParser.Day,DateParser.Month,DateParser.Year) >= 17540101D THEN BEGIN
                NewDate := DMY2DATE(DateParser.Day,DateParser.Month,DateParser.Year);
                IF Field."Enable Rule Generation" THEN BEGIN
                  FieldRule.SETFILTER("Entry No.",'<>%1',FieldRule."Entry No.");
                  FieldRule.DELETEALL(TRUE);
                END;
                CLEAR(DateParser);
                EXIT(TRUE);
              END;
            END;
          END;
        UNTIL FieldRule.NEXT = 0;

        CLEAR(DateParser);
      END;

      NewDate := ParseDate2(Field."Date Format",Text,LCID);
      IF NewDate <> 0D THEN
        EXIT(TRUE);
    END;

    PROCEDURE ParseText@1000000007(VAR Field@1000000002 : Record 6085580;Text@1000000001 : Text[1024];VAR NewText@1000000000 : Text[1024];MaxLen@1000000004 : Integer) : Boolean;
    BEGIN
      NewText := COPYSTR(Text,1,MaxLen);
      EXIT(TRUE);
    END;

    PROCEDURE ParseCode@1000000033(VAR Field@1000000002 : Record 6085580;Text@1000000001 : Code[1024];VAR NewText@1000000000 : Code[1024];MaxLen@1000000004 : Integer) : Boolean;
    BEGIN
      NewText := COPYSTR(Text,1,MaxLen);
      EXIT(TRUE);
    END;

    PROCEDURE ParseDate2@1161054001(DateFormat@161024015 : Integer;DateText@161024014 : Text[1024];LCID@161024013 : Integer) : Date;
    VAR
      Date@161024012 : Record 2000000007;
      TemplField@161024016 : Record 6085580;
      DateParser@1161054010 : Codeunit 6085586;
      Separators@161024018 : ARRAY [10] OF Text[30];
      ActiveSeparator@1161054005 : Text[1];
      TextArray@1161054006 : ARRAY [100] OF Text[1024];
      SeparatorsCount@161024017 : ARRAY [10] OF Integer;
      TotalSeparatorsCount@161024019 : Integer;
      NoOfSplitters@161024020 : Integer;
      Catch@1161054008 : ARRAY [3] OF ' ,Day,Month,Year';
      CurrCatch@1161054009 : Integer;
      Day@1161054001 : Integer;
      Month@1161054002 : Integer;
      Year@1161054003 : Integer;
      i@1161054007 : Integer;
      i2@1161054011 : Integer;
    BEGIN
      Separators[1] := '-';
      Separators[2] := '/';
      Separators[3] := '.';
      Separators[4] := ',';
      Separators[5] := '\';
      Separators[6] := ' ';

      FOR i := 1 TO 6 DO BEGIN
        SeparatorsCount[i] := NoOfOccourance(DateText,Separators[i]);
        IF (SeparatorsCount[i] >= 2) AND (ActiveSeparator = '') THEN
          ActiveSeparator := Separators[i];
        TotalSeparatorsCount := TotalSeparatorsCount + SeparatorsCount[i];
      END;

      IF ActiveSeparator <> '' THEN BEGIN
        FOR i := 1 TO 6 DO BEGIN
          IF Separators[i] <> ActiveSeparator THEN
            DateText := Replace(DateText,Separators[i],'',FALSE);
        END;
      END ELSE IF TotalSeparatorsCount = 2 THEN BEGIN
        FOR i := 1 TO 6 DO
          DateText := Replace(DateText,Separators[i],'-',FALSE);
        ActiveSeparator := '-';
      END;

      DateText := Replace(DateText,'  ','',FALSE);

      Split(DateText,ActiveSeparator,TextArray);
      IF TextArray[3] = '' THEN BEGIN
        ActiveSeparator := '';
        FOR i := 1 TO 6 DO
          DateText := Replace(DateText,Separators[i],'',FALSE);
        IF NOT EVALUATE(Day,DateText) THEN
          EXIT;

        Day := 0;
        IF NOT (STRLEN(DateText) IN [6,8]) THEN
          EXIT;
      END;

      CASE DateFormat OF
        TemplField."Date Format"::"Day / Month / Year":
          BEGIN
            Catch[1] := Catch::Day;
            Catch[2] := Catch::Month;
            Catch[3] := Catch::Year;

            IF ActiveSeparator = '' THEN BEGIN
              TextArray[1] := COPYSTR(DateText,1,2);
              TextArray[2] := COPYSTR(DateText,3,2);
              TextArray[3] := COPYSTR(DateText,5);
            END;
          END;

        TemplField."Date Format"::"Month / Day / Year":
          BEGIN
            Catch[1] := Catch::Month;
            Catch[2] := Catch::Day;
            Catch[3] := Catch::Year;

            IF ActiveSeparator = '' THEN BEGIN
              TextArray[1] := COPYSTR(DateText,1,2);
              TextArray[2] := COPYSTR(DateText,3,2);
              TextArray[3] := COPYSTR(DateText,5);
            END;
          END;

        TemplField."Date Format"::"Year / Day / Month":
          BEGIN
            Catch[1] := Catch::Year;
            Catch[2] := Catch::Day;
            Catch[3] := Catch::Month;

            IF ActiveSeparator = '' THEN BEGIN
              IF STRLEN(DateText) = 6 THEN BEGIN
                TextArray[1] := COPYSTR(DateText,1,2);
                TextArray[2] := COPYSTR(DateText,3,2);
                TextArray[3] := COPYSTR(DateText,5);
              END ELSE BEGIN
                TextArray[1] := COPYSTR(DateText,1,4);
                TextArray[2] := COPYSTR(DateText,5,2);
                TextArray[3] := COPYSTR(DateText,7);
              END;
            END;
          END;

        TemplField."Date Format"::"Year / Month / Day":
          BEGIN
            Catch[1] := Catch::Year;
            Catch[2] := Catch::Month;
            Catch[3] := Catch::Day;

            IF ActiveSeparator = '' THEN BEGIN
              IF STRLEN(DateText) = 6 THEN BEGIN
                TextArray[1] := COPYSTR(DateText,1,2);
                TextArray[2] := COPYSTR(DateText,3,2);
                TextArray[3] := COPYSTR(DateText,5);
              END ELSE BEGIN
                TextArray[1] := COPYSTR(DateText,1,4);
                TextArray[2] := COPYSTR(DateText,5,2);
                TextArray[3] := COPYSTR(DateText,7);
              END;
            END;
          END;

        TemplField."Date Format"::"Day / Year / Month":
          BEGIN
            Catch[1] := Catch::Day;
            Catch[2] := Catch::Year;
            Catch[3] := Catch::Month;

            IF ActiveSeparator = '' THEN BEGIN
              IF STRLEN(DateText) = 6 THEN BEGIN
                TextArray[1] := COPYSTR(DateText,1,2);
                TextArray[2] := COPYSTR(DateText,3,2);
                TextArray[3] := COPYSTR(DateText,5);
              END ELSE BEGIN
                TextArray[1] := COPYSTR(DateText,1,2);
                TextArray[2] := COPYSTR(DateText,3,4);
                TextArray[3] := COPYSTR(DateText,7);
              END;
            END;
          END;

        TemplField."Date Format"::"Month / Year / Day":
          BEGIN
            Catch[1] := Catch::Month;
            Catch[2] := Catch::Year;
            Catch[3] := Catch::Day;

            IF ActiveSeparator = '' THEN BEGIN
              IF STRLEN(DateText) = 6 THEN BEGIN
                TextArray[1] := COPYSTR(DateText,1,2);
                TextArray[2] := COPYSTR(DateText,3,2);
                TextArray[3] := COPYSTR(DateText,5);
              END ELSE BEGIN
                TextArray[1] := COPYSTR(DateText,1,2);
                TextArray[2] := COPYSTR(DateText,3,4);
                TextArray[3] := COPYSTR(DateText,7);
              END;
            END;
          END;
      END;

      i := 1;
      CurrCatch := 1;
      WHILE ((Day = 0) OR (Month = 0) OR (Year = 0)) AND (TextArray[i] <> '') AND (CurrCatch < 4) DO BEGIN
        CASE Catch[CurrCatch] OF
          Catch::Day:
            BEGIN
              IF EVALUATE(Day,TextArray[i]) THEN
                CurrCatch := CurrCatch + 1
              ELSE IF EVALUATE(Day,COPYSTR(TextArray[i],1,2)) THEN
                CurrCatch := CurrCatch + 1
              ELSE IF EVALUATE(Day,COPYSTR(TextArray[i],1,1)) THEN
                CurrCatch := CurrCatch + 1
            END;

          Catch::Month:
            BEGIN
              IF EVALUATE(Month,TextArray[i]) THEN
                CurrCatch := CurrCatch + 1
              ELSE BEGIN
                IF (DateParser.ParseExact('01-' + TextArray[i] + '-' + FORMAT(DATE2DMY(TODAY,3)),LCID,'dd-MMMM-yyyy')) THEN BEGIN
                  Month := DateParser.Month;
                  CurrCatch := CurrCatch + 1;
                END ELSE IF (DateParser.ParseExact('01-' + TextArray[i] + '-' +
                  FORMAT(DATE2DMY(TODAY,3)),LCID,'dd-MMM-yyyy'))
                THEN BEGIN
                  Month := DateParser.Month;
                  CurrCatch := CurrCatch + 1;
                END;
                CLEAR(DateParser);
              END;
            END;

          Catch::Year:
            BEGIN
              IF EVALUATE(Year,TextArray[i]) THEN BEGIN
                IF (STRLEN(FORMAT(Year)) = 1) OR (STRLEN(FORMAT(Year)) = 2) THEN
                  Year := Year + 2000;
                CurrCatch := CurrCatch + 1;
              END;
            END;
        END;

        i := i + 1;
      END;

      IF (Day IN [1..31]) AND (Month IN [1..12]) AND (Year IN [1754..9999]) THEN BEGIN
        Date.SETRANGE("Period Type",0);
        Date.SETRANGE("Period Start",DMY2DATE(1,Month,Year),CALCDATE('<CM>',DMY2DATE(1,Month,Year)));
        IF Date.FINDFIRST THEN
          IF Date.NEXT(Day - 1) = Day - 1 THEN
            EXIT(Date."Period Start");
      END;
    END;

    PROCEDURE ParseBoolean@1160040012(Text@1000000001 : Text[1024];VAR NewBoolean@1000000000 : Boolean) : Boolean;
    BEGIN
      IF NOT EVALUATE(NewBoolean,Text) THEN
        IF UPPERCASE(Text) IN['TRUE','YES'] THEN
          NewBoolean := TRUE
        ELSE
          NewBoolean := FALSE;

      EXIT(TRUE);
    END;

    PROCEDURE TryUpdateFieldRuleFromMaster@1000000030(VAR Field@1000000001 : Record 6085580;Word@1000000000 : Text[1024]) : Boolean;
    VAR
      Language@1000000002 : Record 8;
      FieldRule@1000000011 : Record 6085583;
      Template@1000000006 : Record 6085579;
      MasterTemplate@1000000005 : Record 6085579;
      MasterField@1000000004 : Record 6085580;
      Field2@161024014 : Record 6085580;
      MasterFieldRule@1000000007 : Record 6085583;
      RegEx@1000000009 : Codeunit 6085585;
      DateParser@1000000010 : Codeunit 6085586;
      NewDate@161024013 : Date;
      LCID@1000000003 : Integer;
      i@161024012 : Integer;
      ValidRuleFound@1000000008 : Boolean;
    BEGIN
      IF Word = '' THEN
        EXIT;

      IF NOT Field."Enable Rule Generation" THEN
        EXIT(FALSE);

      IF Language.GET(Field."Language Code") THEN
        LCID := Language."Windows Language ID";

      IF LCID = 0 THEN
        LCID := GLOBALLANGUAGE;

      Template.GET(Field."Template No.");
      MasterTemplate.SETCURRENTKEY("Category Code","Source Sub Type");
      MasterTemplate.SETRANGE("Category Code",Template."Category Code");
      MasterTemplate.SETRANGE("Source Sub Type",MasterTemplate."Source Sub Type"::Master);
      IF MasterTemplate.FINDSET THEN
        REPEAT
          IF MasterField.GET(MasterTemplate."No.",Field.Type,Field.Code) THEN BEGIN
            MasterFieldRule.SETRANGE("Template No.",MasterField."Template No.");
            MasterFieldRule.SETRANGE(Type,MasterField.Type);
            MasterFieldRule.SETRANGE(Code,MasterField.Code);
            IF MasterFieldRule.FINDSET THEN
              REPEAT
                ValidRuleFound := FALSE;

                IF Field."Codeunit ID: Capture Value" <> 0 THEN
                  ValidRuleFound := TestCaptureValue(Field,MasterFieldRule,Word)
                ELSE IF Field."Data Type" = Field."Data Type"::Text THEN
                  ValidRuleFound := (RegEx.MatchValue(Word,MasterFieldRule.Rule,TRUE) = Word)
                ELSE IF Field."Data Type" = Field."Data Type"::Date THEN
                  ValidRuleFound := DateParser.ParseExact(Word,LCID,MasterFieldRule.Rule);

                IF ValidRuleFound THEN BEGIN
                  IF CONFIRM(STRSUBSTNO(Text005,MasterFieldRule.Rule,MasterFieldRule.Description),TRUE) THEN BEGIN
                    FilterRule(Field,FieldRule);
                    FieldRule.DELETEALL(TRUE);
                    FieldRule := MasterFieldRule;
                    FieldRule."Template No." := Template."No.";
                    FieldRule.INSERT(TRUE);
                    EXIT(TRUE);
                  END;
                END;
              UNTIL MasterFieldRule.NEXT = 0;
          END;
        UNTIL MasterTemplate.NEXT = 0;

      CLEAR(DateParser);
      CLEAR(RegEx);

      IF Field."Data Type" = Field."Data Type"::Text THEN BEGIN
        IF CONFIRM(STRSUBSTNO(Text006,BuildTextRegExPattern(Word)),TRUE) THEN BEGIN
          FilterRule(Field,FieldRule);
          IF Word <> '' THEN BEGIN
            IF NOT FieldRule.FINDFIRST THEN
              InitRule(Field,FieldRule);
            FieldRule.Rule := BuildTextRegExPattern(Word);
            FieldRule.Description := Text004;
            IF NOT FieldRule.INSERT(TRUE) THEN
              FieldRule.MODIFY(TRUE);
            EXIT(TRUE);
          END;
        END;
      END;

      IF Field."Data Type" = Field."Data Type"::Date THEN BEGIN
        FOR i := 1 TO 6 DO BEGIN
          NewDate := ParseDate2(i,Word,LCID);
          IF NewDate <> 0D THEN BEGIN
            Field2."Date Format" := i;
            IF CONFIRM(Text009,TRUE,Field2.FIELDCAPTION("Date Format"),Field2."Date Format",NewDate) THEN BEGIN
              Field."Date Format" := i;
              Field.MODIFY;

              IF Field.Type = Field.Type::Header THEN BEGIN
                Field2.SETRANGE("Template No.",Template."No.");
                Field2.SETRANGE("Data Type",Field2."Data Type"::Date);
                Field2.SETFILTER("Sort Order",'>%1',Field."Sort Order");
                Field2.MODIFYALL("Date Format",Field."Date Format");
              END;
              EXIT(TRUE);
            END ELSE
              EXIT;
          END;
        END;

        Language.SETFILTER("Windows Language ID",'>%1',0);
        IF Language.FINDSET THEN
          REPEAT
            NewDate := ParseDate2(Field."Date Format",Word,Language."Windows Language ID");

            IF NewDate <> 0D THEN BEGIN
              IF CONFIRM(Text010,TRUE,Field2.FIELDCAPTION("Language Code"),Language.Code,Language.Name,NewDate) THEN BEGIN
                IF Field.Type = Field.Type::Header THEN BEGIN
                  Template.GET(Field."Template No.");
                  Template."Language Code" := Language.Code;
                  Template.MODIFY;

                  Field2.SETRANGE("Template No.",Template."No.");
                  IF Field2.FINDSET THEN
                    REPEAT
                      IF NOT ((Field2.Type = Field.Type) AND (Field2.Code = Field.Code)) THEN BEGIN
                        Field2."Language Code" := Language.Code;
                        Field2.MODIFY;
                      END;
                    UNTIL Field2.NEXT = 0;
                END;

                Field."Language Code" := Language.Code;
                Field.MODIFY;
                EXIT(TRUE);
              END ELSE
                EXIT;
            END;
          UNTIL Language.NEXT = 0;

        FOR i := 1 TO 6 DO BEGIN
          Language.SETFILTER("Windows Language ID",'>%1',0);
          IF Language.FINDSET THEN
            REPEAT
              NewDate := ParseDate2(i,Word,Language."Windows Language ID");

              IF NewDate <> 0D THEN BEGIN
                Field2."Date Format" := i;
                IF CONFIRM(Text011,TRUE,Field2.FIELDCAPTION("Date Format"),Field2."Date Format",
                  Field2.FIELDCAPTION("Language Code"),Language.Code,Language.Name,NewDate)
                THEN BEGIN
                  IF Field.Type = Field.Type::Header THEN BEGIN
                    Template.GET(Field."Template No.");
                    Template."Language Code" := Language.Code;
                    Template.MODIFY;

                    Field2.SETRANGE("Template No.",Template."No.");
                    IF Field2.FINDSET THEN
                      REPEAT
                        IF NOT ((Field2.Type = Field.Type) AND (Field2.Code = Field.Code)) THEN BEGIN
                          IF Field2."Sort Order" > Field."Sort Order" THEN
                            Field2."Date Format" := i;
                          Field2."Language Code" := Language.Code;
                          Field2.MODIFY;
                        END;
                      UNTIL Field2.NEXT = 0;
                  END;

                  Field."Date Format" := i;
                  Field."Language Code" := Language.Code;
                  Field.MODIFY;
                  EXIT(TRUE);
                END ELSE
                  EXIT;
              END;
            UNTIL Language.NEXT = 0;
        END;

      END;

      EXIT(FALSE);
    END;

    PROCEDURE IsValidNumber@1000000013(VAR Field@1000000002 : Record 6085580;Number@1000000000 : Decimal) : Boolean;
    VAR
      FieldRule@1000000003 : Record 6085583;
      Integer@1000000001 : Record 2000000026;
      NewRule@161024022 : Text[250];
      Char@161024015 : Text[1];
      TestNumber@161024019 : Integer;
      NoOfDecimalsInField@161024018 : Integer;
      NoOfDecimalsInNumber@161024017 : Integer;
      i@161024016 : Integer;
      ReadingNumber@161024014 : Boolean;
      ReadingDecimals@161024013 : Boolean;
      IsSeparator@161024012 : Boolean;
      Factor@161024020 : Integer;
    BEGIN
      IF Field."Codeunit ID: Capture Value" <> 0 THEN
        EXIT(TestCaptureValue(Field,FieldRule,FORMAT(Number)));

      IF (Number = 0) AND Field.Required THEN
        EXIT(FALSE);

      IF (Number < 1) AND (Field."Decimal Places" <> '') THEN
        IF EVALUATE(NoOfDecimalsInField,COPYSTR(Field."Decimal Places",STRPOS(Field."Decimal Places",':') + 1)) THEN;

      IF NoOfDecimalsInField <> 0 THEN BEGIN
        EVALUATE(Factor,'1' + PADSTR('',NoOfDecimalsInField,'0'));
        Number := Number * Factor;
      END;

      FilterRule(Field,FieldRule);

      IF FieldRule.FINDSET THEN
        REPEAT
          IF FieldRule.Rule <> '' THEN BEGIN
            IF ABS(Number) >= 1000000000 THEN
              EXIT(FALSE);

            IF Integer.FINDLAST THEN
              IF Number > Integer.Number THEN
                EXIT(FALSE);

            IF Integer.FINDFIRST THEN
              IF Number < Integer.Number THEN
                EXIT(FALSE);


            ReadingNumber := FALSE;
            ReadingDecimals := FALSE;
            NoOfDecimalsInNumber := 0;
            NewRule := '';

            FOR i := 1 TO STRLEN(FieldRule.Rule) + 1 DO BEGIN
              Char := COPYSTR(FieldRule.Rule,i,1);

              IF Char IN ['0','1','2','3','4','5','6','7','8','9'] THEN BEGIN
                IF ReadingDecimals THEN BEGIN
                  IF NoOfDecimalsInNumber <= NoOfDecimalsInField THEN
                    NewRule := NewRule + Char;
                  NoOfDecimalsInNumber := NoOfDecimalsInNumber + 1;
                END ELSE
                  NewRule := NewRule + Char;

                ReadingNumber := TRUE;
              END ELSE BEGIN
                IsSeparator := FALSE;
                IF Char = ',' THEN BEGIN
                  IsSeparator := TRUE;
                  ReadingDecimals := TRUE;
                END;

                IF (Char = '.') AND (i > 1) THEN BEGIN
                  IF (COPYSTR(FieldRule.Rule,i + 1,1) <> '.') AND (COPYSTR(FieldRule.Rule,i - 1,1) <> '.') THEN BEGIN
                    IsSeparator := TRUE;
                    ReadingDecimals := TRUE;
                  END;
                END;

                IF NOT IsSeparator THEN BEGIN
                  IF ReadingNumber THEN
                    IF NoOfDecimalsInNumber < NoOfDecimalsInField THEN
                      NewRule := NewRule + PADSTR('',NoOfDecimalsInField - NoOfDecimalsInNumber,'0');

                  ReadingNumber := FALSE;
                  ReadingDecimals := FALSE;
                  NoOfDecimalsInNumber := 0;

                  NewRule := NewRule + Char;
                END;
              END;
            END;

            Integer.SETFILTER(Number,NewRule);
            Integer.FILTERGROUP(2);
            Integer.SETRANGE(Number,ROUND(Number,1));
            IF Integer.ISEMPTY THEN
              EXIT(FALSE);
          END;
        UNTIL FieldRule.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE IsValidDate@1000000014(VAR Field@1000000001 : Record 6085580;Date@1000000000 : Date) : Boolean;
    VAR
      FieldRule@161024012 : Record 6085583;
    BEGIN
      IF Field."Codeunit ID: Capture Value" <> 0 THEN
        EXIT(TestCaptureValue(Field,FieldRule,FORMAT(Date)));

      IF (Date = 0D) THEN
        EXIT(NOT Field.Required);

      IF FORMAT(Field."Validation Dateformula From") <> '' THEN
        IF Date < CALCDATE(Field."Validation Dateformula From",TODAY) THEN
          EXIT(FALSE);

      IF FORMAT(Field."Validation Dateformula To") <> '' THEN
        IF Date > CALCDATE(Field."Validation Dateformula To",TODAY) THEN
          EXIT(FALSE);

      IF Date < 17540101D THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE IsValidText@1000000015(VAR Field@1000000001 : Record 6085580;Text@1000000000 : Text[1024]) : Boolean;
    VAR
      FieldRule@1000000004 : Record 6085583;
      TempWord@161024012 : TEMPORARY Record 6085592;
      RegEx@1000000003 : Codeunit 6085585;
      IsValid@1000000002 : Boolean;
    BEGIN
      Text := UPPERCASE(Text);

      IF Field."Codeunit ID: Capture Value" <> 0 THEN
        IF TestCaptureValue(Field,FieldRule,Text) THEN
          EXIT(TRUE);

      FilterRule(Field,FieldRule);
      IF NOT FieldRule.FINDFIRST THEN
        EXIT((Text <> '') OR (NOT Field.Required));

      IF Text = '' THEN
        EXIT(NOT Field.Required);

      TempWord.Word := Text;
      TempWord.INSERT;

      REPEAT
        FieldRule.Rule := UPPERCASE(FieldRule.Rule);
        IF (STRPOS(FieldRule.Rule,'<') <> 0) OR
          (STRPOS(FieldRule.Rule,'>') <> 0) OR
          (STRPOS(FieldRule.Rule,'|') <> 0) OR
          (STRPOS(FieldRule.Rule,'*') <> 0) OR
          (STRPOS(FieldRule.Rule,'&') <> 0)
        THEN BEGIN
          TempWord.SETFILTER(Word,FieldRule.Rule);
          IsValid := NOT TempWord.ISEMPTY;
        END ELSE BEGIN
          IF (RegEx.MatchValue(Text,FieldRule.Rule,TRUE) = Text) THEN BEGIN
            IF Field."Codeunit ID: Capture Value" <> 0 THEN
              IsValid := TestCaptureValue(Field,FieldRule,Text)
            ELSE
              IsValid := TRUE;

            IF IsValid AND Field."Enable Rule Generation" THEN BEGIN
              FieldRule.SETFILTER("Entry No.",'<>%1',FieldRule."Entry No.");
              FieldRule.DELETEALL(TRUE);
            END;
          END;
        END;
      UNTIL (FieldRule.NEXT = 0) OR (IsValid);

      EXIT(IsValid);
    END;

    PROCEDURE IsValidLookup@1000000031(Field@1000000001 : Record 6085580;Value@1160040000 : Text[250]) : Boolean;
    VAR
      RecIDMgt@1160040001 : Codeunit 6085604;
    BEGIN
      EXIT(IsValidText(Field,Value));
    END;

    PROCEDURE IsValidValue@1000000019(VAR Field@1000000001 : Record 6085580;DocumentNo@1000000000 : Code[20];LineNo@1000000004 : Integer) : Boolean;
    VAR
      Value@1000000002 : Record 6085593;
    BEGIN
      IF NOT Value.GET(DocumentNo,TRUE,Field.Code,LineNo) THEN
        EXIT(NOT Field.Required);

      EXIT(Value."Is Valid");
    END;

    PROCEDURE IsValidBoolean@1160040016(VAR Field@1000000001 : Record 6085580;Boolean@1000000000 : Boolean) : Boolean;
    VAR
      FieldRule@161024012 : Record 6085583;
    BEGIN
      EXIT(TRUE);
    END;

    PROCEDURE GetText@1000000026(VAR Document@1000000004 : Record 6085590;FieldType@1000000006 : Integer;FieldCode@1000000000 : Code[20];LineNo@1000000002 : Integer) : Text[1024];
    VAR
      Field@1000000001 : Record 6085580;
      Value@1000000005 : Record 6085593;
    BEGIN
      IF NOT Field.GET(Document."Template No.",FieldType,FieldCode) THEN
        EXIT;

      GetFieldValue(Document,Field,LineNo,Value);
      EXIT(Value."Value (Text)");
    END;

    PROCEDURE GetDate@1000000025(VAR Document@1000000004 : Record 6085590;FieldType@1000000006 : Integer;FieldCode@1000000000 : Code[20];LineNo@1000000002 : Integer) : Date;
    VAR
      Field@1000000001 : Record 6085580;
      Value@1000000005 : Record 6085593;
    BEGIN
      IF NOT Field.GET(Document."Template No.",FieldType,FieldCode) THEN
        EXIT;

      GetFieldValue(Document,Field,LineNo,Value);
      EXIT(Value."Value (Date)");
    END;

    PROCEDURE GetDecimal@1000000024(VAR Document@1000000004 : Record 6085590;FieldType@1000000006 : Integer;FieldCode@1000000000 : Code[20];LineNo@1000000002 : Integer) : Decimal;
    VAR
      Field@1000000001 : Record 6085580;
      Value@1000000005 : Record 6085593;
    BEGIN
      IF NOT Field.GET(Document."Template No.",FieldType,FieldCode) THEN
        EXIT;

      GetFieldValue(Document,Field,LineNo,Value);
      EXIT(Value."Value (Decimal)");
    END;

    PROCEDURE GetValueAsText@1000000018(DocumentNo@1000000003 : Code[20];LineNo@1000000001 : Integer;VAR Field@1000000000 : Record 6085580) : Text[1024];
    VAR
      Value@1000000002 : Record 6085593;
      RecIDMgt@1160040000 : Codeunit 6085604;
    BEGIN
      IF NOT Value.GET(DocumentNo,TRUE,Field.Code,LineNo) THEN
        EXIT;

      CASE Field."Data Type" OF
        Field."Data Type"::Text:
          EXIT(FORMAT(Value."Value (Text)"));

        Field."Data Type"::Number:
          CASE TRUE OF
            Field."Blank Zero" AND (Value."Value (Decimal)" = 0):
              EXIT('');

            Field."Decimal Places" <> '':
              EXIT(FORMAT(Value."Value (Decimal)",0,STRSUBSTNO('<Precision,%1><Standard Format,0>',Field."Decimal Places")));

            ELSE
              EXIT(FORMAT(Value."Value (Decimal)"));
          END;

        Field."Data Type"::Date:
          EXIT(FORMAT(Value."Value (Date)"));

        Field."Data Type"::Lookup:
          EXIT(RecIDMgt.GetKeyValue(Value."Value (Record ID Tree ID)",Field."Source Field No."));

        Field."Data Type"::Boolean:
          EXIT(FORMAT(Value."Value (Boolean)"));

      END;
    END;

    PROCEDURE OptionToInt@1160040002(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer;OptionAsText@1160040002 : Text[250]) : Integer;
    VAR
      RecRef@1160040003 : RecordRef;
      FieldRef@1160040004 : FieldRef;
      CapVal@1160040005 : ARRAY [100] OF Text[1024];
      i@1160040006 : Integer;
      OptionAsInt@1160040007 : Integer;
      ArraySize@1160040008 : Integer;
    BEGIN
      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);
      ArraySize := Split(FieldRef.OPTIONCAPTION,',',CapVal);
      i := 1;

      REPEAT
        IF UPPERCASE(CapVal[i]) = UPPERCASE(OptionAsText) THEN
          EXIT(i-1);
        i := i + 1;
      UNTIL i = 100;

      i := 1;
      REPEAT
        IF COPYSTR(UPPERCASE(CapVal[i]),1,STRLEN(OptionAsText)) = UPPERCASE(OptionAsText) THEN
          EXIT(i-1);
        i := i + 1;
      UNTIL i = 100;

      IF EVALUATE(OptionAsInt,OptionAsText) THEN
        IF OptionAsInt >= ArraySize THEN
          EXIT(-2);

      EXIT(-1);
    END;

    PROCEDURE LookupValue@1000000010(DocumentNo@161024012 : Code[20];VAR Field@1000000001 : Record 6085580;LineNo@161024013 : Integer;Text@1000000000 : Text[1024]) : Text[1024];
    VAR
      Document@161024015 : Record 6085590;
      Value@161024014 : Record 6085593;
      TempLookupRecID@1160040000 : TEMPORARY Record 6085760;
      RecIDMgt@161024016 : Codeunit 6085604;
    BEGIN
      IF Field."Codeunit ID: Lookup" <> 0 THEN BEGIN
        IF Document.GET(DocumentNo) THEN;
        IF NOT GetFieldValue(Document,Field,LineNo,Value) THEN BEGIN
          Value."Template No." := Field."Template No.";
          Value."Document No." := DocumentNo;
          Value.Type := Field.Type;
          Value.Code := Field.Code;
          Value."Line No." := LineNo;
        END;
        CODEUNIT.RUN(Field."Codeunit ID: Lookup",Value);
        EXIT(Value."Value (Text)");
      END;

      IF Field."Source Table No." <> 0 THEN BEGIN
        TempLookupRecID."Table No." := Field."Source Table No.";
        TempLookupRecID."Record ID Tree ID" :=
          RecIDMgt.GetRecIDTreeID2(Field."Source Table No.",Field."Source Field No.",Field."Source Table Filter GUID",Text);

        IF TempLookupRecID."Record ID Tree ID" = 0 THEN
          TempLookupRecID."Record ID Tree ID" := Field."Fixed Value (Rec. ID Tree ID)";
        TempLookupRecID."Table Filter GUID" := Field."Source Table Filter GUID";

        TempLookupRecID."Document No." := DocumentNo;
        TempLookupRecID."Line No." := LineNo;

        CODEUNIT.RUN(CODEUNIT::"Record ID Lookup",TempLookupRecID);

        IF TempLookupRecID."Lookup Mode" = TempLookupRecID."Lookup Mode"::OK THEN
          EXIT(RecIDMgt.GetKeyValue(TempLookupRecID."Record ID Tree ID",Field."Source Field No."));
        EXIT;
      END;

      IF Field."Data Type" <> Field."Data Type"::Lookup THEN
        EXIT(Text);

      Field.TESTFIELD("Source Table No.");
      Field.TESTFIELD("Source Field No.");
    END;

    PROCEDURE ValidateField@161024013(DocumentNo@161024012 : Code[20];VAR Field@1000000001 : Record 6085580;LineNo@161024013 : Integer;VAR Text@1000000000 : Text[1024]) : Text[1024];
    VAR
      Document@161024015 : Record 6085590;
      Value@161024014 : Record 6085593;
    BEGIN
      IF Field."Codeunit ID: Validate" = 0 THEN
        EXIT;

      Value."Template No." := Field."Template No.";
      Value."Document No." := DocumentNo;
      Value.Type := Field.Type;
      Value.Code := Field.Code;
      Value."Line No." := LineNo;
      Value."Value (Text)" := Text;
      CODEUNIT.RUN(Field."Codeunit ID: Validate",Value);

      Text := Value."Value (Text)";
    END;

    PROCEDURE BuildTextRegExPattern@1000000012(Value@1000000001 : Text[1024]) Pattern : Text[1024];
    VAR
      RegEx@1000000000 : Codeunit 6085585;
    BEGIN
      Pattern := RegEx.BuildPattern(Value);
    END;

    PROCEDURE GetDecSep@1000000009() : Text[1];
    BEGIN
      EXIT(COPYSTR(FORMAT(1.1),2,1));
    END;

    PROCEDURE GetThousandSep@1160040003() : Text[1];
    BEGIN
      EXIT(COPYSTR(FORMAT(1000.1,0),2,1));
    END;

    PROCEDURE Replace@1000000003(Text@1000000000 : Text[1024];ReplaceTxt@1000000001 : Text[1024];ReplaceWithTxt@1000000002 : Text[1024];CaseSensitive@1160040000 : Boolean) : Text[1024];
    VAR
      ReplaceTxtLen@1000000003 : Integer;
      ReplaceWithTxtLen@1000000004 : Integer;
      i@1000000005 : Integer;
    BEGIN
      ReplaceTxtLen := STRLEN(ReplaceTxt);
      ReplaceWithTxtLen := STRLEN(ReplaceWithTxt);

      IF CaseSensitive THEN
        i := STRPOS(Text,ReplaceTxt)
      ELSE
        i := STRPOS(UPPERCASE(Text),UPPERCASE(ReplaceTxt));
      IF i <> 0 THEN BEGIN
        Text := COPYSTR(Text,1,i-1) +
          ReplaceWithTxt +
          COPYSTR(Text,i+ReplaceTxtLen);

        Text := COPYSTR(Text,1,i-1+ReplaceWithTxtLen) +
          Replace(
            COPYSTR(Text,i+ReplaceWithTxtLen),
            ReplaceTxt,
            ReplaceWithTxt,CaseSensitive);
      END;
      EXIT(Text);
    END;

    PROCEDURE Split@1000000006(Text@1000000000 : Text[1024];Splitter@1000000001 : Text[1];VAR TextArray@1000000002 : ARRAY [100] OF Text[1024]) ArraySize : Integer;
    VAR
      i@1000000004 : Integer;
      Index@1000000003 : Integer;
    BEGIN
      i := STRPOS(Text,Splitter);

      WHILE (i <> 0) AND (Index < 100) DO BEGIN
        Index := Index + 1;
        IF (i < MAXSTRLEN(TextArray[Index])) THEN
          TextArray[Index] := COPYSTR(Text,1,i-1)
        ELSE
          TextArray[Index] := COPYSTR(Text,1,MAXSTRLEN(TextArray[Index]));
        Text := COPYSTR(Text,i+1);
        i := STRPOS(Text,Splitter);
      END;
      TextArray[Index + 1] := Text;
      ArraySize := Index + 1;
    END;

    PROCEDURE FilterRule@1000000016(VAR Field@1000000000 : Record 6085580;VAR FieldRule@1000000001 : Record 6085583);
    BEGIN
      FieldRule.SETRANGE("Template No.",Field."Template No.");
      FieldRule.SETRANGE(Type,Field.Type);
      FieldRule.SETRANGE(Code,Field.Code);
      FieldRule.SETFILTER(Rule,'<>%1','');
    END;

    PROCEDURE InitRule@1000000028(VAR Field@1000000001 : Record 6085580;VAR FieldRule@1000000000 : Record 6085583);
    BEGIN
      FieldRule.INIT;
      FieldRule."Template No." := Field."Template No.";
      FieldRule.Type := Field.Type;
      FieldRule.Code := Field.Code;
    END;

    PROCEDURE CalcExpression@161024012(Expression@161024012 : Text[80]) Result : Decimal;
    VAR
      Parantheses@161024013 : Integer;
      OperatorNo@161024015 : Integer;
      i@161024014 : Integer;
      LeftResult@161024016 : Decimal;
      RightResult@161024017 : Decimal;
      Operator@1160040000 : Char;
      Operators@1160040001 : Text[8];
      LeftOperand@1160040002 : Text[80];
      RightOperand@1160040003 : Text[80];
      IsExpression@1160040004 : Boolean;
      IsFilter@1160040005 : Boolean;
    BEGIN
      Result := 0;

      Expression := DELCHR(Expression,'<>',' ');

      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^%';
        OperatorNo := 1;

        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;

            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);

          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;

        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';

          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';

          Operator := Expression[i];
          LeftResult := CalcExpression(LeftOperand);

          IF (RightOperand = '') AND (Operator = '%') THEN
            RightResult := CalcExpression(LeftOperand)
          ELSE
            RightResult := CalcExpression(RightOperand);

          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '%':
              IF RightResult = 0 THEN
                Result := 0
              ELSE
                Result := 100 * LeftResult / RightResult;
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN
                Result := 0
              ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE BEGIN
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result := CalcExpression(COPYSTR(Expression,2,STRLEN(Expression) - 2))
          ELSE BEGIN
            IsFilter :=
               (STRPOS(Expression,'..') +
                STRPOS(Expression,'|') +
                STRPOS(Expression,'<') +
                STRPOS(Expression,'>') +
                STRPOS(Expression,'&') +
                STRPOS(Expression,'=') > 0);

            IF NOT IsFilter THEN
              IF NOT EVALUATE(Result,Expression) THEN
                EXIT(0);
          END;
        END;
      END;

      EXIT(Result);
    END;

    PROCEDURE TextContainsLetters@161024015(Text@161024012 : Text[1024]) : Boolean;
    VAR
      i@161024013 : Integer;
    BEGIN
      Text := UPPERCASE(Text);
      FOR i := 1 TO STRLEN(Text) DO
        IF (COPYSTR(Text,i,1) IN ['A'..'Z']) THEN
          EXIT(TRUE);
    END;

    PROCEDURE TestCaptureValue@161024017(Field@161024012 : Record 6085580;Rule@161024013 : Record 6085583;Value@161024014 : Text[1024]) : Boolean;
    VAR
      TempCaptureFieldVal@161024015 : Record 6085597;
    BEGIN
      TempCaptureFieldVal."Field Type" := Field.Type;
      TempCaptureFieldVal."Field Code" := Field.Code;
      TempCaptureFieldVal."File Rule Entry No." := Rule."Entry No.";
      TempCaptureFieldVal.Rule := Rule.Rule;
      TempCaptureFieldVal.Value := Value;
      CODEUNIT.RUN(Field."Codeunit ID: Capture Value",TempCaptureFieldVal);
      EXIT(TempCaptureFieldVal."Is Valid");
    END;

    PROCEDURE NoOfOccourance@1161054000(Text@1161054000 : Text[1024];CharToCount@1161054001 : Text[1]) NoOfOccour : Integer;
    VAR
      TextArray@1161054002 : ARRAY [100] OF Text[1024];
    BEGIN
      Split(Text,CharToCount,TextArray);
      WHILE TextArray[NoOfOccour + 1] <> '' DO
        NoOfOccour := NoOfOccour + 1;

      IF NoOfOccour > 0 THEN
        NoOfOccour := NoOfOccour - 1;
    END;

    PROCEDURE IIFInt@161024018(TestValue@1000000000 : Boolean;ValueIfTrue@1000000001 : Integer;ValueIfFalse@1000000002 : Integer) : Decimal;
    BEGIN
      IF TestValue THEN
        EXIT(ValueIfTrue)
      ELSE
        EXIT(ValueIfFalse);
    END;

    PROCEDURE ParseLookup@1160040000(VAR Value@1160040000 : Record 6085593;Field@1160040002 : Record 6085580) : Boolean;
    VAR
      LookupRecID@1160040003 : Record 6085760;
      RecIDMgt@1160040001 : Codeunit 6085604;
    BEGIN
      Value."Value (Record ID Tree ID)" := 0;

      LookupRecID."Table No." := Field."Source Table No.";
      LookupRecID."Record ID Tree ID" := RecIDMgt.GetRecIDTreeID2(Field."Source Table No.",Field."Source Field No.",
        Field."Source Table Filter GUID",Value."Value (Text)");
      IF LookupRecID."Record ID Tree ID" = 0 THEN
        LookupRecID."Record ID Tree ID" := Field."Fixed Value (Rec. ID Tree ID)";
      LookupRecID."Table Filter GUID" := Field."Source Table Filter GUID";
      LookupRecID."Document No." := Value."Document No.";
      LookupRecID."Line No." := Value."Line No.";

      Value."Value (Record ID Tree ID)" := RecIDMgt.SetKeyValueWithLookupRecID(Field."Source Table No.",Field."Source Field No.",
        LookupRecID,Value."Value (Text)");

      EXIT(TRUE);
    END;

    PROCEDURE RoundFromDecPlaces@1160040001(Number@1160040001 : Decimal;DecPlaces@1160040000 : Text[30]) : Decimal;
    BEGIN
      IF DecPlaces = '' THEN
        EXIT(Number);

      CASE COPYSTR(DecPlaces,STRLEN(DecPlaces),1) OF
        '0':
          EXIT(ROUND(Number,1));
        '1':
          EXIT(ROUND(Number,0.1));
        '2':
          EXIT(ROUND(Number,0.01));
        '3':
          EXIT(ROUND(Number,0.001));
        '4':
          EXIT(ROUND(Number,0.0001));
        '5':
          EXIT(ROUND(Number,0.00001));
        ELSE
          EXIT(Number);
      END;
    END;

    PROCEDURE TransferTableFields@1160040004(RecRef@1160040003 : RecordRef;Document@1160040002 : Record 6085590;DocumentLineNo@1160040006 : Integer;TransHeaderFields@1160040004 : Boolean) : Boolean;
    VAR
      DocCat@1160040001 : Record 6085575;
      Field@1160040005 : Record 6085580;
    BEGIN
      IF NOT DocCat.GET(Document."Document Category Code") THEN
        EXIT;

      Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
      Field.SETRANGE("Template No.",Document."Template No.");

      IF TransHeaderFields THEN BEGIN
        Field.SETFILTER("Destination Header Field No.",'>%1',0);
        IF Field.ISEMPTY THEN
          EXIT;

        DocCat.TESTFIELD("Destination Header Table No.",RecRef.NUMBER);
      END ELSE BEGIN
        Field.SETFILTER("Destination Line Field No.",'>%1',0);
        IF Field.ISEMPTY THEN
          EXIT;

        DocCat.TESTFIELD("Destination Line Table No.",RecRef.NUMBER);
      END;

      TransferDestFields(RecRef,Field,Document,DocumentLineNo,TransHeaderFields);
    END;

    PROCEDURE TransferDestFields@1160040007(VAR RecRef@1160040000 : RecordRef;VAR Field@1160040001 : Record 6085580;Document@1160040002 : Record 6085590;LineNo@1160040003 : Integer;TransHeaderFields@1160040006 : Boolean);
    VAR
      Value@1160040007 : Record 6085593;
      TableField@1160040011 : Record 2000000041;
      FieldRef@1160040005 : FieldRef;
      TextValue@1160040009 : Text[1024];
      UseLineNo@1160040013 : Integer;
      Found@1160040008 : Boolean;
      i@1160040010 : Integer;
    BEGIN
      IF Field.FINDSET THEN
        REPEAT
          IF Field.Type = Field.Type::Header THEN
            UseLineNo := 0
          ELSE
            UseLineNo := LineNo;

          Found := Value.GET(Document."No.",TRUE,Field.Code,UseLineNo);

          IF Found THEN BEGIN
            IF TransHeaderFields THEN
              FieldRef := RecRef.FIELD(Field."Destination Header Field No.")
            ELSE
              FieldRef := RecRef.FIELD(Field."Destination Line Field No.");

            TableField.GET(RecRef.NUMBER,FieldRef.NUMBER);

            CASE TableField.Type OF
              TableField.Type::Text,TableField.Type::Code:
                BEGIN
                  TextValue := GetValueAsText(Document."No.",UseLineNo,Field);
                  IF FORMAT(FieldRef.VALUE) <> TextValue THEN
                    FieldRef.VALIDATE(TextValue);
                END;

              TableField.Type::Date:
                IF FORMAT(FieldRef.VALUE) <> FORMAT(Value."Value (Date)") THEN
                  FieldRef.VALIDATE(Value."Value (Date)");

              TableField.Type::Decimal,TableField.Type::Integer:
                IF FORMAT(FieldRef.VALUE) <> FORMAT(Value."Value (Decimal)") THEN
                  FieldRef.VALIDATE(Value."Value (Decimal)");

              TableField.Type::Option:
                BEGIN
                  TextValue := GetValueAsText(Document."No.",UseLineNo,Field);
                  IF TextValue <> '' THEN BEGIN
                    i := OptionToInt(RecRef.NUMBER,FieldRef.NUMBER,TextValue);
                    IF i > -1 THEN
                      FieldRef.VALIDATE(i)
                    ELSE
                      IF EVALUATE(i,TextValue) THEN
                        FieldRef.VALIDATE(i);
                  END;
                END;

              TableField.Type::Boolean:
                IF FORMAT(FieldRef.VALUE) <> FORMAT(Value."Value (Boolean)") THEN
                  FieldRef.VALIDATE(Value."Value (Boolean)");

            END;
          END;
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE RenumberLines@1160040005(Document@1000000002 : Record 6085590);
    VAR
      Value@1000000000 : Record 6085593;
      Value2@1000000004 : Record 6085593;
      PrevValue@1000000003 : Record 6085593;
      i2@1000000001 : Integer;
    BEGIN
      Value.RESET;
      Value.SETCURRENTKEY("Document No.","Is Value",Type,"Page No.","Line No.",Code);
      Value.SETRANGE("Document No.",Document."No.");
      Value.SETRANGE("Is Value",TRUE);
      Value.SETRANGE(Type,Value.Type::Line);
      IF Value.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          IF Value."Line No." <> PrevValue."Line No." THEN
            i2 := i2 + 1;

          IF (Value."Line No." <> i2) THEN BEGIN
            Value2 := Value;
            Value2."Line No." := i2;
            Value2.INSERT;
            Value.DELETE;
          END;
          PrevValue := Value;
        UNTIL Value.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

