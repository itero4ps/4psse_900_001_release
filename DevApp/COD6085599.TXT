OBJECT Codeunit 6085599 Cryptography Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.4.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Cryptography@161024012 : DotNet "'Akeyto.DocumentCapture.Dynamics.Nav.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=005df25b46c40152'.Akeyto.DocumentCapture.Dynamics.Nav.Shared.Cryptography";
      Text001@6085573 : TextConst 'ENU=You must import a Security Certificate in the Document Capture Setup.';

    PROCEDURE HashValueSHA1@161024013(ValidationKey@161024012 : Text[1024];ValueToHash@161024013 : Text[1024]) : Text[1024];
    BEGIN
      CreateVars;

      EXIT(Cryptography.HashValueSHA1(ValidationKey,ValueToHash));
    END;

    PROCEDURE EncryptText@1160040000(TextToEncrypt@1160040000 : Text[1024]) EncryptedText : Text[1024];
    VAR
      Filename@1160040002 : Text[1024];
      Encrypted@1160040003 : Boolean;
    BEGIN
      CreateVars;

      Filename := ExportCert;

      Encrypted := Cryptography.EncryptString(TextToEncrypt,EncryptedText,Filename,'');

      IF FILE.ERASE(Filename) THEN;

      IF NOT Encrypted THEN
        ERROR(Cryptography.GetLastError);
    END;

    PROCEDURE DecryptText@1160040001(TextToDecrypt@1160040000 : Text[1024]) DecryptedText : Text[1024];
    VAR
      Filename@1160040002 : Text[1024];
      Decrypted@1160040003 : Boolean;
    BEGIN
      CreateVars;

      Filename := ExportCert;

      Decrypted := Cryptography.DecryptString(TextToDecrypt,DecryptedText,Filename,'');

      IF FILE.ERASE(Filename) THEN;

      IF NOT Decrypted THEN
        ERROR(Cryptography.GetLastError);
    END;

    PROCEDURE UseSecurityCert@1160040002() : Boolean;
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      DCSetup.GET;
      DCSetup.CALCFIELDS("Security Certificate");
      EXIT(DCSetup."Security Certificate".HASVALUE);
    END;

    LOCAL PROCEDURE ExportCert@1160040003() Filename : Text[1024];
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      Filename := TEMPORARYPATH + '\dc.cer';

      DCSetup.GET;
      DCSetup.CALCFIELDS("Security Certificate");
      IF NOT DCSetup."Security Certificate".HASVALUE THEN
        ERROR(Text001);

      DCSetup."Security Certificate".EXPORT(Filename);
    END;

    LOCAL PROCEDURE CreateVars@161024012();
    BEGIN
      IF ISNULL(Cryptography) THEN
        Cryptography := Cryptography.Cryptography;
    END;

    BEGIN
    {
      The function Cryptography.EncryptString contains a parameter called certName. This can either be the name of a certificate
      in the LocalSystem personal storage or it can be a full filename. If the file is a private key file you also need to specify
      the password.
    }
    END.
  }
}

