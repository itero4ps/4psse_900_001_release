OBJECT Codeunit 6085603 Document Capture Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW16.00.10.4.05,4PS9.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=VAR
            RecRef@1160040000 : RecordRef;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      TempLogRenameTable@1160040001 : TEMPORARY Record 6085589;
      GlobalDCTriggerMgt@1160040003 : Codeunit 6085659;
      CEMDBTriggers@1160040000 : Codeunit 6085783;
      SuspendTriggers@1160040002 : Boolean;

    PROCEDURE CompanyOpen@1160040004();
    BEGIN
    END;

    PROCEDURE GetTableTriggerSetup@1(TableID@1000 : Integer;VAR RunInsert@1001 : Boolean;VAR RunModify@1002 : Boolean;VAR RunDelete@1003 : Boolean;VAR RunRename@1004 : Boolean);
    BEGIN
      IF COMPANYNAME = '' THEN
        EXIT;

      IF IsLogActive(TableID,FALSE) THEN
        RunRename := TRUE;

      CASE TableID OF
        DATABASE::"Gen. Journal Line":
          RunDelete := TRUE;

        DATABASE::"Purchase Header":
          BEGIN
            RunModify := TRUE;
            RunDelete := TRUE;
          END;

        DATABASE::"Purchase Line":
          BEGIN
            RunModify := TRUE;
            RunDelete := TRUE;
          END;

        DATABASE::"User Setup":
          RunDelete := TRUE;

        DATABASE::"General Posting Setup":
          RunDelete := TRUE;

        DATABASE::"Vendor Posting Group":
          RunDelete := TRUE;
      END;

      CEMDBTriggers.GetTableTriggerSetup(TableID,RunInsert,RunModify,RunDelete,RunRename);
    END;

    PROCEDURE IsLogActive@161024012(TableNo@1160040002 : Integer;AddMissingTable@1160040006 : Boolean) IsActive : Boolean;
    VAR
      ChangeLogSetup@161024015 : Record 402;
      Field@1160040000 : Record 2000000041;
      RecRef@1160040001 : RecordRef;
      KeyRef@1160040003 : KeyRef;
      FieldRef@1160040004 : FieldRef;
      Count@1160040005 : Integer;
      DeleteRec@6085573 : Boolean;
    BEGIN
      IF TableNo = 0 THEN
        EXIT;

      IsActive := IsLogActive2(TableNo,AddMissingTable);
      IF (NOT IsActive) AND NOT(AddMissingTable) THEN
        EXIT(FALSE);

      RecRef.OPEN(TableNo);
      IF NOT RecRef.FINDFIRST THEN BEGIN
        RecRef.INSERT;
        DeleteRec := TRUE;
      END;

      KeyRef := RecRef.KEYINDEX(1);
      FOR Count := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(Count);
        Field.GET(TableNo,FieldRef.NUMBER);
        IF Field.RelationTableNo <> 0 THEN BEGIN
          IsActive := IsLogActive2(Field.RelationTableNo,AddMissingTable);
          IF (NOT IsActive) AND NOT(AddMissingTable) THEN BEGIN
            IF DeleteRec THEN
              RecRef.DELETE;
            EXIT(FALSE);
          END;
        END;
      END;

      IF DeleteRec THEN
        RecRef.DELETE;
    END;

    PROCEDURE Insert@1160040007(VAR RecRef@1160040001 : RecordRef) : Boolean;
    VAR
      RecRef2@1160040000 : RecordRef;
      DoApplyChanges@1160040003 : Boolean;
    BEGIN
      IF SuspendTriggers THEN
        EXIT(RunIntegrationTrigger(RecRef.NUMBER,0));

      RecRef2 := RecRef.DUPLICATE;

      CASE RecRef.NUMBER OF
      END;

      IF DoApplyChanges THEN
        ApplyFieldChanges(RecRef,RecRef2);

      CEMDBTriggers.Insert(RecRef);

      EXIT(RunIntegrationTrigger(RecRef.NUMBER,0));
    END;

    PROCEDURE Modify@1160040006(VAR RecRef@1160040001 : RecordRef) : Boolean;
    VAR
      PurchHeader@1160040003 : Record 38;
      PurchLine@1160040002 : Record 39;
      RecRef2@1160040000 : RecordRef;
      DoApplyChanges@1160040004 : Boolean;
    BEGIN
      IF SuspendTriggers THEN
        EXIT(RunIntegrationTrigger(RecRef.NUMBER,1));

      RecRef2 := RecRef.DUPLICATE;

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef2.SETTABLE(PurchHeader);
            IF GlobalDCTriggerMgt.ModifyPurchHeader(PurchHeader) THEN BEGIN
              RecRef2.GETTABLE(PurchHeader);
              DoApplyChanges := TRUE;
            END;
          END;

        DATABASE::"Purchase Line":
          BEGIN
            RecRef2.SETTABLE(PurchLine);
            IF GlobalDCTriggerMgt.ModifyPurchLine(PurchLine) THEN BEGIN
              RecRef2.GETTABLE(PurchLine);
              DoApplyChanges := TRUE;
            END;
          END;
      END;

      IF DoApplyChanges THEN
        ApplyFieldChanges(RecRef,RecRef2);

      CEMDBTriggers.Modify(RecRef);

      EXIT(RunIntegrationTrigger(RecRef.NUMBER,1));
    END;

    PROCEDURE Delete@1160040005(VAR RecRef@1160040001 : RecordRef) : Boolean;
    VAR
      UserSetup@1160040003 : Record 91;
      GenJnlLine@1160040008 : Record 81;
      PurchHeader@1160040005 : Record 38;
      PurchLine@1160040000 : Record 39;
      GenPostSetup@1160040006 : Record 252;
      VendPostGrp@1160040002 : Record 93;
      ApprovalEntry@1160040007 : Record 454;
      RecRef2@1160040004 : RecordRef;
    BEGIN
      IF SuspendTriggers THEN
        EXIT(RunIntegrationTrigger(RecRef.NUMBER,2));

      RecRef2 := RecRef.DUPLICATE;

      CASE RecRef.NUMBER OF
        DATABASE::"Gen. Journal Line":
          BEGIN
            RecRef2.SETTABLE(GenJnlLine);
            GlobalDCTriggerMgt.DeleteGenJnlLine(GenJnlLine);
          END;

        DATABASE::"Purchase Header":
          BEGIN
            RecRef2.SETTABLE(PurchHeader);
            GlobalDCTriggerMgt.DeletePurchHeader(PurchHeader);
          END;

        DATABASE::"Purchase Line":
          BEGIN
            RecRef2.SETTABLE(PurchLine);
            GlobalDCTriggerMgt.DeletePurchLine(PurchLine);
          END;

        DATABASE::"User Setup":
          BEGIN
            RecRef2.SETTABLE(UserSetup);
            GlobalDCTriggerMgt.DeleteUserSetup(UserSetup);
          END;

        DATABASE::"General Posting Setup":
          BEGIN
            RecRef2.SETTABLE(GenPostSetup);
            GlobalDCTriggerMgt.DeleteGenPostSetup(GenPostSetup);
          END;

        DATABASE::"Vendor Posting Group":
          BEGIN
            RecRef2.SETTABLE(VendPostGrp);
            GlobalDCTriggerMgt.DeleteVendPostGrp(VendPostGrp);
          END;
      END;

      CEMDBTriggers.Delete(RecRef);

      EXIT(RunIntegrationTrigger(RecRef.NUMBER,2));
    END;

    PROCEDURE Rename@1160040003(VAR RecRef@1160040003 : RecordRef;VAR xRecRef@1160040000 : RecordRef) : Boolean;
    VAR
      RecIDMgt@1160040002 : Codeunit 6085604;
    BEGIN
      RecIDMgt.RenameRecIDTree(xRecRef,RecRef);

      IF SuspendTriggers THEN
        EXIT(RunIntegrationTrigger(RecRef.NUMBER,3));

      CEMDBTriggers.Rename(RecRef,xRecRef);

      EXIT(RunIntegrationTrigger(RecRef.NUMBER,3));
    END;

    PROCEDURE IsLogActive2@1160040002(TableNo@1160040002 : Integer;AddMissingTable@1160040001 : Boolean) : Boolean;
    VAR
      AllObjWithCaption@1160040004 : Record 2000000058;
      LogRenameTable@1160040000 : Record 6085589;
    BEGIN
      IF (TableNo = 0) OR (TableNo > 99999999) OR (TableNo = 6085589) THEN
        EXIT;

      //AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,TableNo);
      IF AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,TableNo) THEN; //**4PS bugfix

      IF TempLogRenameTable.GET(TableNo) THEN
        EXIT(TempLogRenameTable.Activated)
      ELSE BEGIN
        TempLogRenameTable."Table No." := TableNo;
        TempLogRenameTable.Activated := LogRenameTable.GET(TableNo) OR AddMissingTable;
        TempLogRenameTable.INSERT;

        IF LogRenameTable.GET(TableNo) THEN
          EXIT(TRUE);

        IF (NOT AddMissingTable) THEN
          EXIT;
      END;

      LogRenameTable."Table No." := TableNo;
      LogRenameTable.INSERT;

      EXIT(TRUE);
    END;

    PROCEDURE SetSuspendTriggers@1160040008(NewSuspendTriggers@1160040000 : Boolean);
    BEGIN
      SuspendTriggers := NewSuspendTriggers;
    END;

    PROCEDURE ApplyFieldChanges@1160040015(VAR RecRef@1160040000 : RecordRef;VAR NewRecRef@1160040001 : RecordRef);
    VAR
      FieldRef@1160040002 : FieldRef;
      NewFieldRef@1160040003 : FieldRef;
      i@1160040004 : Integer;
    BEGIN
      FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FieldRef := RecRef.FIELDINDEX(i);
        NewFieldRef := NewRecRef.FIELDINDEX(i);
        IF FieldRef.VALUE <> NewFieldRef.VALUE THEN
          FieldRef.VALUE := NewFieldRef.VALUE;
      END;
    END;

    PROCEDURE HasLicenseAccessToTable@1160040001(TableID@1160040001 : Integer) : Boolean;
    VAR
      LicensePerm@1160040000 : Record 2000000043;
    BEGIN
      IF STRLEN(COMPANYNAME) >= 6 THEN
        IF COPYSTR(COMPANYNAME,1,6) = 'CRONUS' THEN
          EXIT(TRUE);

      WITH LicensePerm DO BEGIN
        IF NOT GET("Object Type"::Table,TableID) THEN
          EXIT(FALSE);

        EXIT(
          (("Read Permission" = "Read Permission"::Yes) OR
          (("Insert Permission" = "Insert Permission"::Yes) AND
          ("Delete Permission" = "Delete Permission") AND
          ("Execute Permission" = "Execute Permission"))));
      END;
    END;

    PROCEDURE RunIntegrationTrigger@1160040000(TableId@1160040006 : Integer;TriggerType@1160040000 : 'Insert,Modify,Delete,Rename') : Boolean;
    VAR
      IntegrationManagement@1160040001 : Codeunit 5150;
      RunInsert@1160040005 : Boolean;
      RunModify@1160040004 : Boolean;
      RunDelete@1160040003 : Boolean;
      RunRename@1160040002 : Boolean;
    BEGIN
      IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,RunInsert,RunModify,RunDelete,RunRename);

      CASE TriggerType OF
        TriggerType::Insert:
          EXIT(RunInsert);
        TriggerType::Modify:
          EXIT(RunModify);
        TriggerType::Delete:
          EXIT(RunDelete);
        TriggerType::Rename:
          EXIT(RunRename);
      END;
    END;

    BEGIN
    END.
  }
}

