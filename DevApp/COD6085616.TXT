OBJECT Codeunit 6085616 Export Doc. Cat. Config. - DC
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.4.04;
  }
  PROPERTIES
  {
    TableNo=6085575;
    OnRun=VAR
            DCSetup@1160040001 : Record 6085573;
            DocCat@1160040000 : Record 6085575;
            Window@1160040005 : Dialog;
            CODC@1160040002 : Codeunit 6085617;
            FilesExported@1160040003 : Boolean;
            CategoriesExported@1160040004 : Integer;
          BEGIN
            Window.OPEN(Text001);

            DCSetup.GET;
            DocCat.SETRANGE("Scanning Allowed",TRUE);
            IF DocCat.FINDSET THEN
              REPEAT
                IF DCSetup."Use Cloud OCR" THEN BEGIN
                  FilesExported := CODC.ExportConfiguration(DocCat);
                  DeleteConfigFiles(DocCat);
                END ELSE
                  FilesExported := Export(DocCat);

                IF FilesExported THEN
                  CategoriesExported += 1;
              UNTIL DocCat.NEXT = 0;

            IF CategoriesExported > 0 THEN
              MESSAGE(Text002,CategoriesExported)
            ELSE
              MESSAGE(Text003);

            Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      Text001@1160040002 : TextConst 'ENU=Exporting Configuration Files...';
      Text002@1160040001 : TextConst 'ENU=%1 configuration files were exported.';
      Text003@1160040000 : TextConst 'ENU=No configuration files were exported.';

    PROCEDURE Export@1000000000(DocCat@1160040000 : Record 6085575) : Boolean;
    VAR
      DCSetup@1000000005 : Record 6085573;
      Language@1000000002 : Record 6085576;
      DocSep@1000000012 : Record 6085577;
      ConnEndpoint@161024013 : Record 6085620;
      CryptMgt@1160040002 : Codeunit 6085599;
      XmlLib@1000000000 : Codeunit 6085573;
      XmlDoc@6085573 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      PDFNode@1000000009 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TiffNode@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      EmailNode@161024012 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Node@1000000008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LanguagesNode@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LanguageNode@1000000004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocSeparatorsNode@1000000011 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DocSeparatorNode@1000000010 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      DCSetup.GET;

      XmlLib.CreateXmlDOM(XmlDoc,'Config');

      IF DCSetup."Company Code" <> '' THEN
        XmlLib.CreateXmlNode(XmlDoc.DocumentElement,'Description',COMPANYNAME + ' - ' + DocCat.Description,Node)
      ELSE
        XmlLib.CreateXmlNode(XmlDoc.DocumentElement,'Description',DocCat.Description,Node);

      XmlLib.CreateXmlNode(XmlDoc.DocumentElement,'PDFExport','',PDFNode);
      CASE DocCat."Export PDF File" OF
        DocCat."Export PDF File"::No:
          XmlLib.CreateXmlNode(PDFNode,'Action','NoExport',Node);
        DocCat."Export PDF File"::"Yes - Keep Existing Or Create New":
          XmlLib.CreateXmlNode(PDFNode,'Action','KeepOrCreate',Node);
        DocCat."Export PDF File"::"Yes - Always Create New":
          XmlLib.CreateXmlNode(PDFNode,'Action','AlwaysCreate',Node);
      END;

      IF DocCat."PDF Format" = DocCat."PDF Format"::PDF THEN
        XmlLib.CreateXmlNode(PDFNode,'Format','PDF',Node)
      ELSE
        XmlLib.CreateXmlNode(PDFNode,'Format','PDFA',Node);

      XmlLib.CreateXmlNode(XmlDoc.DocumentElement,'TiffExport','',TiffNode);
      CASE DocCat."TIFF Image Color Mode" OF
        DocCat."TIFF Image Color Mode"::"Black & White":
          XmlLib.CreateXmlNode(TiffNode,'ColorMode','BlackWhite',Node);
        DocCat."TIFF Image Color Mode"::Gray:
          XmlLib.CreateXmlNode(TiffNode,'ColorMode','Gray',Node);
        DocCat."TIFF Image Color Mode"::Color:
          XmlLib.CreateXmlNode(TiffNode,'ColorMode','Color',Node);
      END;
      XmlLib.CreateXmlNode(TiffNode,'Resolution',FORMAT(DocCat."TIFF Image Resolution"),Node);

      XmlLib.CreateXmlNode(XmlDoc.DocumentElement,'Languages','',LanguagesNode);
      Language.SETRANGE("Document Category Code",DocCat.Code);
      IF Language.FINDSET THEN
        REPEAT
          XmlLib.CreateXmlNode(LanguagesNode,'Language',Language."Language Code",LanguageNode);
        UNTIL Language.NEXT = 0;

      XmlLib.CreateXmlNode(XmlDoc.DocumentElement,'DocumentSeparators','',DocSeparatorsNode);
      IF NOT DocCat."Distribution Group" THEN
        DocSep.SETRANGE("Document Category Code",DocCat.Code);
      IF DocSep.FINDSET THEN
        REPEAT
          XmlLib.CreateXmlNode(DocSeparatorsNode,'DocumentSeparator','',DocSeparatorNode);
          XmlLib.CreateXmlNode(DocSeparatorNode,'RegEx',DocSep.Pattern,Node);
          IF DocSep.Type = DocSep.Type::Text THEN
            XmlLib.CreateXmlNode(DocSeparatorNode,'Type','Text',Node)
          ELSE
            XmlLib.CreateXmlNode(DocSeparatorNode,'Type','Barcode',Node);
        UNTIL DocSep.NEXT = 0;

      IF ConnEndpoint.GET(DocCat."E-mail Connection Endpoint") THEN BEGIN

        IF ConnEndpoint.Protocol = ConnEndpoint.Protocol::IMAP THEN BEGIN
          ConnEndpoint.TESTFIELD("Protocol Port");
          ConnEndpoint.TESTFIELD("Server Address");
          ConnEndpoint.TESTFIELD(Username);
          ConnEndpoint.TESTFIELD(Password);
        END;

        XmlLib.CreateXmlNode(XmlDoc.DocumentElement,'Email','',EmailNode);
        XmlLib.CreateXmlNode(EmailNode,'Protocol',FORMAT(ConnEndpoint.Protocol),Node);
        XmlLib.CreateXmlNode(EmailNode,'ProtocolPort',FORMAT(ConnEndpoint."Protocol Port"),Node);
        XmlLib.CreateXmlNode(EmailNode,'ServerAddress',ConnEndpoint."Server Address",Node);
        XmlLib.CreateXmlNode(EmailNode,'Username',ConnEndpoint.Username,Node);
        IF CryptMgt.UseSecurityCert THEN BEGIN
          XmlLib.CreateXmlNode(EmailNode,'Password',CryptMgt.EncryptText(ConnEndpoint.Password),Node);
          XmlLib.CreateXmlNode(EmailNode,'PasswordEncrypted',XmlLib.Bool2Text(TRUE),Node);
        END ELSE
          XmlLib.CreateXmlNode(EmailNode,'Password',ConnEndpoint.Password,Node);
        XmlLib.CreateXmlNode(EmailNode,'DeleteAfterDownload',XmlLib.Bool2Text(ConnEndpoint."Delete After Download"),Node);
        XmlLib.CreateXmlNode(EmailNode,'Archive',XmlLib.Bool2Text(DocCat."Archive E-mails on Document"),Node);
      END;

      IF DocCat."Process Scanned Files" THEN
        XmlDoc.Save(GetConfigFilePath(DocCat,TRUE,TRUE));

      IF DocCat."Process PDF Files" THEN
        XmlDoc.Save(GetConfigFilePath(DocCat,TRUE,FALSE));

      {
      IF DCSetup."Export Remote OCR Config." THEN BEGIN
        DCSetup.TESTFIELD("Remote OCR Config. Path");
        Path := DCSetup."Remote OCR Config. Path";
        IF NOT FileSystem.DirectoryExists(Path) THEN
          FileSystem.CreateDirectory(Path);

        IF (DCSetup."Company Code" <> '') AND DCSetup."Company Code in Archive" THEN
          XmlDoc.Save(Path + '\' + DCSetup."Company Code" + ' - ' + DocCat.Code + '.xml')
        ELSE
          XmlDoc.Save(Path + '\' + DocCat.Code + '.xml');
      END;
      }

      CLEAR(XmlDoc);
      EXIT(TRUE);
    END;

    PROCEDURE DeleteConfigFiles@1160040001(DocCat@1160040000 : Record 6085575);
    VAR
      FileSysMgt@1160040002 : Codeunit 6085584;
      Path@1160040001 : Text[1024];
    BEGIN
      IF DocCat."Process Scanned Files" THEN
        DeleteConfigFile(DocCat,TRUE);

      IF DocCat."Process PDF Files" THEN
        DeleteConfigFile(DocCat,FALSE);
    END;

    PROCEDURE DeleteConfigFile@1160040007(DocCat@1160040000 : Record 6085575;ScannedFiles@1160040001 : Boolean);
    VAR
      FileSysMgt@1160040003 : Codeunit 6085584;
      Path@1160040002 : Text[1024];
    BEGIN
      IF ScannedFiles THEN
        Path := DocCat.GetCategoryPath(0)
      ELSE
        Path := DocCat.GetCategoryPath(1);

      IF Path <> '' THEN
        FileSysMgt.DeleteFile(Path + '\config.xml',TRUE);
    END;

    PROCEDURE GetConfigFilePath@1160040000(DocCat@1160040002 : Record 6085575;ToExport@1160040003 : Boolean;ScannedFiles@1160040000 : Boolean) : Text[1024];
    VAR
      FileSysMgt@1160040001 : Codeunit 6085584;
      Path@1160040004 : Text[1024];
    BEGIN
      IF ScannedFiles THEN
        Path := DocCat.GetCategoryPath(0)
      ELSE
        Path := DocCat.GetCategoryPath(1);

      IF NOT FileSysMgt.DirectoryExists(Path) THEN
        IF ToExport THEN
          FileSysMgt.CreateDirectory(Path)
        ELSE
          EXIT;

      EXIT(Path + '\config.xml');
    END;

    BEGIN
    END.
  }
}

