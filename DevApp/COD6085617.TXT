OBJECT Codeunit 6085617 Continia Online - DC
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.4.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      COMgt@1160040005 : Codeunit 6086500;
      XmlLib@1160040011 : Codeunit 6085573;
      HttpActions@1160040001 : 'PUT,DELETE,GET';
      Protocol@1160040004 : 'IMAP,ContiniaMail';
      Text001@1160040000 : TextConst 'ENU=The field %1 on %2 %3 is empty.';
      Text002@1160040003 : TextConst 'ENU=%1 %2 is not activated in the Cloud OCR.';
      Text003@1160040002 : TextConst 'ENU=Cloud OCR is not active.';
      Text004@1160040008 : TextConst 'ENU=A similar company is already activated in Continia Online. Choose one of the following options:';
      Text005@1160040007 : TextConst 'ENU=The company information has been updated.';
      Text006@1160040006 : TextConst 'ENU=No. of Documents: %1';
      Text007@1160040009 : TextConst 'ENU=Update and activate the existing company,Create and activate a new company,Cancel';
      Text008@1160040010 : TextConst 'ENU=%1 has been activated for %2. Remember to update configurations, such as Connection Endpoints for Document Categories, and export configuration files.';

    PROCEDURE IsCompanyActive@1160040035(ShowError@1160040001 : Boolean) : Boolean;
    VAR
      LicenseMgt@1160040002 : Codeunit 6086501;
    BEGIN
      EXIT(LicenseMgt.IsActive('CDC','Document Capture',ShowError));
    END;

    PROCEDURE IsCloudActive@1160040032(ShowError@1160040001 : Boolean) : Boolean;
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      DCSetup.GET;

      IF ShowError THEN
        DCSetup.TESTFIELD("Use Cloud OCR");

      EXIT(DCSetup."Use Cloud OCR");
    END;

    PROCEDURE CheckCategoryValid@1160040026(VAR DocCat@1160040000 : Record 6085575);
    VAR
      ConnEndpoint@1160040002 : Record 6085620;
      EmptyGUID@1160040001 : GUID;
    BEGIN
      IF DocCat."Document Category GUID" = EmptyGUID THEN BEGIN
        DocCat."Document Category GUID" := CREATEGUID;
        DocCat.MODIFY;
      END;

      DocCat.TESTFIELD("Scanning Allowed");
      DocCat.TESTFIELD("E-mail Connection Endpoint");
      ConnEndpoint.GET(DocCat."E-mail Connection Endpoint");
    END;

    PROCEDURE UpdateCompanyCount@1160040004();
    VAR
      DCSetup@1160040001 : Record 6085573;
      XmlDoc@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IsCloudActive(TRUE);

      GetClient(XmlDoc);

      CLEAR(XmlDoc);

      MESSAGE(Text005);
    END;

    PROCEDURE GetClient@1160040028(VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      CLEAR(XmlDoc);
      COMgt.ExecuteRequest(GetClientUrl,HttpActions::GET,TRUE,XmlDoc);
    END;

    PROCEDURE GetCompany@1160040015(VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      CLEAR(XmlDoc);
      COMgt.ExecuteRequest(GetCompanyUrl,HttpActions::GET,TRUE,XmlDoc);
    END;

    PROCEDURE GetCompanyCode@1160040003(ShowError@1160040001 : Boolean) : Code[10];
    VAR
      DCSetup@1160040000 : Record 6085573;
    BEGIN
      DCSetup.GET;

      IF ShowError THEN
        DCSetup.TESTFIELD("Company Code");

      EXIT(DCSetup."Company Code");
    END;

    PROCEDURE ActivateCompany@1160040023() : Boolean;
    VAR
      Document@1160040001 : Record 6085590;
      LicenseMgt@1160040000 : Codeunit 6086501;
      AboutDCMgt@1160040002 : Codeunit 6085589;
      IsAccept@1160040003 : Boolean;
      LicenseInfo@1160040004 : ARRAY [100] OF Text[250];
      i@1160040005 : Integer;
    BEGIN
      i := LicenseMgt.GetStandardLicenseInfo(LicenseInfo);
      LicenseInfo[i+1] := STRSUBSTNO(Text006,Document.COUNT);

      IF NOT LicenseMgt.ShowAgreement('CDC',AboutDCMgt.VersionDetails,LicenseInfo) THEN
        EXIT;

      IF NOT LicenseMgt.AcceptAgreement('CDC',AboutDCMgt.VersionDetails,LicenseInfo,FALSE) THEN
        CASE STRMENU(Text007,1) OF
          1:
            LicenseMgt.AcceptAgreement('CDC',AboutDCMgt.VersionDetails,LicenseInfo,TRUE);
          2:
            BEGIN
              COMgt.CreateNewCompanyGUID;
              IF NOT LicenseMgt.AcceptAgreement('CDC',AboutDCMgt.VersionDetails,LicenseInfo,FALSE) THEN
                EXIT;
            END;
          ELSE
            EXIT;
        END;

      MESSAGE(Text008,AboutDCMgt.VersionDetails,COMPANYNAME);
      EXIT(TRUE);
    END;

    PROCEDURE ExportConfiguration@1160040016(DocCat@1160040000 : Record 6085575) : Boolean;
    VAR
      DCSetup@1160040008 : Record 6085573;
      ConnEndpoint@1160040007 : Record 6085620;
      XmlDoc@1160040005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      CategoryNode@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      EmailNode@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IsCompanyActive(TRUE);

      IF DocCat."E-mail Connection Endpoint" = '' THEN
        EXIT;

      CheckCategoryValid(DocCat);

      DCSetup.GET;
      ConnEndpoint.GET(DocCat."E-mail Connection Endpoint");

      XmlDoc := XmlDoc.XmlDocument;
      CategoryNode := XmlDoc.CreateNode('element','Category','');
      XmlLib.SetXmlNodeAttr(CategoryNode,'CategoryCode',DocCat.Code);
      XmlLib.SetXmlNodeAttr(CategoryNode,'CategoryGUID',COMgt.GetGUIDAsText(DocCat."Document Category GUID"));
      XmlLib.SetXmlNodeAttr(CategoryNode,'CompanyGUID',COMgt.GetCompanyGUID);
      XmlLib.SetXmlNodeAttr(CategoryNode,'CompanyCode',GetCompanyCode(TRUE));
      XmlLib.SetXmlNodeAttr(CategoryNode,'ArchiveDocuments',COMgt.GetIntAsText(DocCat."Archive Documents in Cloud OCR"));

      CASE DocCat."TIFF Image Color Mode" OF
        DocCat."TIFF Image Color Mode"::"Black & White":
          XmlLib.SetXmlNodeAttr(CategoryNode,'TiffImageColorMode','BlackWhite');
        DocCat."TIFF Image Color Mode"::Gray:
          XmlLib.SetXmlNodeAttr(CategoryNode,'TiffImageColorMode','Gray');
        DocCat."TIFF Image Color Mode"::Color:
          XmlLib.SetXmlNodeAttr(CategoryNode,'TiffImageColorMode','Color');
      END;
      XmlLib.SetXmlNodeAttr(CategoryNode,'TiffImageResolution',COMgt.GetIntAsText(DocCat."TIFF Image Resolution"));

      XmlLib.SetXmlNodeAttr(CategoryNode,'ExportNewPDF',
        COMgt.GetBoolAsText(DocCat."Export PDF File" = DocCat."Export PDF File"::"Yes - Always Create New"));

      XmlLib.CreateXmlNode(CategoryNode,'Email','',EmailNode);
      XmlLib.SetXmlNodeAttr(EmailNode,'Type',GetProtocolAsText(ConnEndpoint.Protocol));
      IF ConnEndpoint.Protocol = ConnEndpoint.Protocol::"Continia Email" THEN
        XmlLib.SetXmlNodeAttr(EmailNode,'EmailAddress',GetOneCategoryEmail(ConnEndpoint))
      ELSE BEGIN
        ConnEndpoint.TESTFIELD("Server Address");
        ConnEndpoint.TESTFIELD("Protocol Port");
        ConnEndpoint.TESTFIELD(Username);
        ConnEndpoint.TESTFIELD(Password);

        XmlLib.SetXmlNodeAttr(EmailNode,'ServerAddress',ConnEndpoint."Server Address");
        XmlLib.SetXmlNodeAttr(EmailNode,'ServerPort',COMgt.GetIntAsText(ConnEndpoint."Protocol Port"));
        XmlLib.SetXmlNodeAttr(EmailNode,'UseSSL',COMgt.GetBoolAsText(DCSetup."SMTP Require SSL/TLS"));
        XmlLib.SetXmlNodeAttr(EmailNode,'Username',ConnEndpoint.Username);
        XmlLib.SetXmlNodeAttr(EmailNode,'Password',ConnEndpoint.Password);
        XmlLib.SetXmlNodeAttr(EmailNode,'SubFolder',ConnEndpoint.Subfolder);
      END;
      XmlDoc.AppendChild(CategoryNode);

      COMgt.ExecuteRequest(GetOneCategoryUrl(DocCat."Document Category GUID"),HttpActions::PUT,TRUE,XmlDoc);
      CLEAR(XmlDoc);

      EXIT(TRUE);
    END;

    PROCEDURE GetOneCategory@1160040013(DocCat@1160040000 : Record 6085575;ShowError@1160040002 : Boolean;VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    BEGIN
      CLEAR(XmlDoc);
      COMgt.ExecuteRequest(GetOneCategoryUrl(DocCat."Document Category GUID"),HttpActions::GET,ShowError,XmlDoc);

      EXIT(TRUE);
    END;

    PROCEDURE GetAllCategory@1160040039(ShowError@1160040002 : Boolean;VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    BEGIN
      CLEAR(XmlDoc);
      COMgt.ExecuteRequest(GetAllCategoryUrl,HttpActions::GET,ShowError,XmlDoc);

      EXIT(TRUE);
    END;

    PROCEDURE GetOneCategoryEmail@1160040001(ConnEndpoint@1160040004 : Record 6085620) : Text[100];
    VAR
      DCSetup@1160040007 : Record 6085573;
    BEGIN
      DCSetup.GET;

      IF NOT IsCloudActive(FALSE) THEN
        EXIT(Text003);

      EXIT(LOWERCASE(STRSUBSTNO('%1.%2.%3@%4',ConnEndpoint.Code,GetCompanyCode(TRUE),COMgt.GetClientID(TRUE),GetEmailDomain)));
    END;

    PROCEDURE GetOneCategoryCount@1160040020(VAR DocCat@1160040004 : Record 6085575);
    VAR
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT GetOneCategory(DocCat,FALSE,XmlDoc) THEN
        EXIT;

      DocCat."No. of files for OCR" := COMgt.GetAttribAsInt(XmlDoc.SelectNodes('Category'),'OCRFiles',0);
      DocCat."No. of files for Import" := COMgt.GetAttribAsInt(XmlDoc.SelectNodes('Category'),'ImportFiles',0);
      DocCat."No. of files with Error" := COMgt.GetAttribAsInt(XmlDoc.SelectNodes('Category'),'ErrorFiles',0);
      CLEAR(XmlDoc);
    END;

    PROCEDURE GetAllCategoryCount@1160040027(VAR TempDocCat@1160040005 : TEMPORARY Record 6085575);
    VAR
      XMLNodeList@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      i@1160040004 : Integer;
      DocCatCode@1160040002 : Text[10];
    BEGIN
      IF NOT GetAllCategory(FALSE,XmlDoc) THEN
        EXIT;

      XMLNodeList := XmlDoc.DocumentElement.SelectNodes('Category');
      FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
        COMgt.GetAttribAsText(XMLNodeList,'CategoryCode',i,DocCatCode);

        IF NOT TempDocCat.GET(DocCatCode) THEN BEGIN
          TempDocCat.Code := DocCatCode;
          TempDocCat.INSERT;
        END;

        TempDocCat."No. of files for OCR" := COMgt.GetAttribAsInt(XMLNodeList,'OCRFiles',i);
        TempDocCat."No. of files for Import" := COMgt.GetAttribAsInt(XMLNodeList,'ImportFiles',i);
        TempDocCat."No. of files with Error" := COMgt.GetAttribAsInt(XMLNodeList,'ErrorFiles',i);
        TempDocCat.MODIFY;
      END;

      CLEAR(XmlDoc);
    END;

    PROCEDURE DeleteDocument@1160040033(DocCatCode@1160040002 : Code[20];DocumentID@1160040000 : Text[1024];Status@1160040005 : 'OCR,Import,Error');
    VAR
      DocCat@1160040003 : Record 6085575;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DocumentNode@1160040004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IsCloudActive(TRUE);

      DocCat.GET(DocCatCode);

      XmlDoc := XmlDoc.XmlDocument;
      DocumentNode := XmlDoc.CreateNode('element','Document','');
      XmlLib.SetXmlNodeAttr(DocumentNode,'RequiredStatus',GetStatusAsText(Status));
      XmlDoc.AppendChild(DocumentNode);

      COMgt.ExecuteRequest(GetDocumentDeleteUrl(DocCat."Document Category GUID",DocumentID),HttpActions::PUT,TRUE,XmlDoc);
      CLEAR(XmlDoc);
    END;

    PROCEDURE DeleteCategory@1160040014(DocCat@1160040000 : Record 6085575);
    VAR
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT IsCloudActive(FALSE) THEN
        EXIT;

      COMgt.ExecuteRequest(GetOneCategoryUrl(DocCat."Document Category GUID"),HttpActions::DELETE,TRUE,XmlDoc);
      CLEAR(XmlDoc);
    END;

    PROCEDURE UpdateDocument@1160040008(DocCat@1160040000 : Record 6085575;DocID@1160040003 : Code[100]);
    VAR
      XmlDoc@1160040005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DocumentNode@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;

      DocumentNode := XmlDoc.CreateNode('element','Document','');
      XmlLib.SetXmlNodeAttr(DocumentNode,'Downloaded',COMgt.GetBoolAsText(TRUE));
      XmlDoc.AppendChild(DocumentNode);

      COMgt.ExecuteRequest(GetOneDocumentUrl(DocCat."Document Category GUID",DocID),HttpActions::PUT,TRUE,XmlDoc);

      CLEAR(XmlDoc);
    END;

    PROCEDURE IsOnlineDocument@1160040002(Document@1160040000 : Record 6085590) : Boolean;
    BEGIN
      EXIT(STRPOS(Document.Filename,'CO-') = 1);
    END;

    PROCEDURE GetNewDocuments@1160040018();
    VAR
      DocCat@1160040002 : Record 6085575;
      UpdateDCDocCounters@1160040000 : Codeunit 6085618;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      DocCat.SETRANGE("Scanning Allowed",TRUE);
      IF DocCat.FINDSET THEN
        REPEAT
          IF COMgt.ExecuteRequest(GetNewDocumentUrl(DocCat."Document Category GUID"),HttpActions::GET,FALSE,XmlDoc) THEN
            GetDocumentFiles(DocCat,XmlDoc);
        UNTIL DocCat.NEXT = 0;

      UpdateDCDocCounters.SetForceUpdate(TRUE);
    END;

    PROCEDURE GetStatusDocuments@1160040031(DocCat@1160040000 : Record 6085575;Status@1160040007 : 'OCR,Import,Error';VAR TempDoc@1160040004 : TEMPORARY Record 6085772);
    VAR
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNodeList@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      EntryNo@1160040005 : Integer;
      i@1160040003 : Integer;
      StatusText@1160040008 : Text[30];
    BEGIN
      COMgt.ExecuteRequest(
        GetStatusDocumentUrl(DocCat."Document Category GUID",GetStatusAsText(Status)),
        HttpActions::GET,TRUE,XmlDoc);

      XMLNodeList := XmlDoc.DocumentElement.SelectNodes('Document');
      FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
        EntryNo += 1;
        TempDoc.INIT;
        TempDoc."Entry No." := EntryNo;
        TempDoc."Document ID" := COMgt.GetAttribAsCode(XMLNodeList,'Id',i);
        COMgt.GetAttribAsText(XMLNodeList,'Name',i,TempDoc."File Name");
        COMgt.GetAttribAsText(XMLNodeList,'PDFDownloadLink',i,TempDoc."File Path");
        TempDoc."Date/Time" := COMgt.GetAttribAsDateTime(XMLNodeList,'DocumentDate',i);
        COMgt.GetAttribAsText(XMLNodeList,'Text',i,TempDoc.Description);
        TempDoc."Is Cloud OCR" := TRUE;
        TempDoc."Document Category Code" := DocCat.Code;
        TempDoc.Status := Status;
        TempDoc.INSERT;
      END;
    END;

    PROCEDURE GetAllDocuments@1160040019();
    VAR
      DocCat@1160040000 : Record 6085575;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      DocCat.SETRANGE("Scanning Allowed",TRUE);
      IF DocCat.FINDSET THEN
        REPEAT
          COMgt.ExecuteRequest(GetAllDocumentUrl(DocCat."Document Category GUID"),HttpActions::GET,TRUE,XmlDoc);
          GetDocumentFiles(DocCat,XmlDoc);
        UNTIL DocCat.NEXT = 0;
    END;

    PROCEDURE GetOneDocument@1160040021(Document@1160040000 : Record 6085590;VAR XmlDoc@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      DocCat@1160040001 : Record 6085575;
    BEGIN
      DocCat.GET(Document."Document Category Code");

      COMgt.ExecuteRequest(GetOneDocumentUrl(DocCat."Document Category GUID",GetDocumentID(Document)),
        HttpActions::GET,TRUE,XmlDoc);
    END;

    PROCEDURE GetDocumentID@1160040011(Document@1160040000 : Record 6085590) DocumentID : Code[100];
    BEGIN
      IF IsOnlineDocument(Document) THEN
        EXIT(DELCHR(Document.Filename,'<','CO-'))
      ELSE
        EXIT(Document.Filename);
    END;

    PROCEDURE GetDocumentFiles@1160040010(DocCat@1160040001 : Record 6085575;XmlDoc@1160040005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XMLNodeList@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      DCSetup@1160040007 : Record 6085573;
      FileSystem@1160040006 : Codeunit 6085584;
      DocID@1160040000 : Text[30];
      DocPath@1160040003 : Text[1024];
      Path@1160040008 : Text[1024];
      FileLink@1160040004 : Text[1024];
      EmailGuid@1160040009 : Text[50];
      i@1160040010 : Integer;
    BEGIN
      XMLNodeList := XmlDoc.DocumentElement.SelectNodes('Document');

      DCSetup.GET;
      Path := DCSetup."File Path for OCR-proc. files" + '\' + GetCompanyCode(FALSE) + ' - ' + DocCat.Code + '\';

      IF NOT FileSystem.DirectoryExists(Path) THEN
        FileSystem.CreateDirectory(Path);

      FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
        COMgt.GetAttribAsText(XMLNodeList,'Id',i,DocID);
        DocPath := Path + 'CO-' + DocID;

        COMgt.GetAttribAsText(XMLNodeList,'TIFFDownloadLink',i,FileLink);
        COMgt.DownloadFile(FileLink,DocPath + '.tiff',FALSE);

        COMgt.GetAttribAsText(XMLNodeList,'PDFDownloadLink',i,FileLink);
        COMgt.DownloadFile(FileLink,DocPath + '.pdf',FALSE);

        COMgt.GetAttribAsText(XMLNodeList,'XMLDownloadLink',i,FileLink);
        COMgt.DownloadFile(FileLink,DocPath + '.xml',FALSE);

        IF DocCat."Archive E-mails on Document" THEN BEGIN
          COMgt.GetAttribAsText(XMLNodeList,'EMLDownloadLink',i,FileLink);
          COMgt.DownloadFile(FileLink,DocPath + '.eml',FALSE);
        END;

        UpdateDocument(DocCat,DocID);
      END;
    END;

    PROCEDURE GetProtocolAsText@1160040025(Value@1160040000 : Integer) : Text[30];
    BEGIN
      CASE Value OF
        Protocol::IMAP:
          EXIT('IMAP');
        Protocol::ContiniaMail:
          EXIT('ContiniaMail');
      END;
    END;

    PROCEDURE GetEmailDomain@1160040000() : Text[30];
    BEGIN
      CASE TRUE OF
        COMgt.IsDev:
          EXIT('devcdc.continiaonline.com');
        COMgt.IsDemo:
          EXIT('devcdc.continiaonline.com')
        ELSE
          EXIT('cdc.continiaonline.com');
      END;
    END;

    PROCEDURE GetStatusAsText@1160040040(Status@1160040000 : 'OCR,Import,Error') : Text[30];
    BEGIN
      CASE Status OF
        Status::OCR:
          EXIT('OCRFiles');
        Status::Import:
          EXIT('ImportFiles');
        Status::Error:
          EXIT('ErrorFiles');
      END;
    END;

    PROCEDURE GetBaseUrl@1160040024() : Text[1024];
    BEGIN
      CASE TRUE OF
        COMgt.IsDev:
          EXIT('https://devcdc.continiaonline.com/api/v1/');
        COMgt.IsDemo:
          EXIT('https://democdc.continiaonline.com/api/v1/');
        ELSE
          EXIT('https://cdc.continiaonline.com/api/v1/');
      END;
    END;

    PROCEDURE GetClientUrl@1160040005() : Text[1024];
    BEGIN
      EXIT(GetBaseUrl + 'client');
    END;

    PROCEDURE GetUserUrl@1160040043() : Text[1024];
    VAR
      COSetup@1160040000 : Record 6086500;
    BEGIN
      COSetup.GET;

      IF NOT COSetup."Use Continia Online Web Portal" THEN
        EXIT(COSetup."Web Site Url" + '/Users/Import');

      EXIT(GetCOUserUrl);
    END;

    PROCEDURE GetCOUserUrl@1160040041() : Text[1024];
    BEGIN
      CASE TRUE OF
        COMgt.IsDev:
          EXIT('https://devauth.continiaonline.com/api/v1/users');
        COMgt.IsDemo:
          EXIT('https://demoauth.continiaonline.com/api/v1/users');
        ELSE
          EXIT('https://auth.continiaonline.com/api/v1/users');
      END;
    END;

    PROCEDURE GetCompanyUrl@1160040029() : Text[1024];
    VAR
      OnlineSetup@1160040000 : Record 6086500;
    BEGIN
      EXIT(GetBaseUrl + 'company/' + COMgt.GetCompanyGUID);
    END;

    PROCEDURE GetAllCategoryUrl@1160040030() : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/category/all');
    END;

    PROCEDURE GetOneCategoryUrl@1160040131(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetCompanyUrl + '/category/' + COMgt.GetGUIDAsText(GUID));
    END;

    PROCEDURE GetDocumentUrl@1160040022(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetOneCategoryUrl(GUID) + '/document/');
    END;

    PROCEDURE GetAllDocumentUrl@1160040006(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetDocumentUrl(GUID) + 'all');
    END;

    PROCEDURE GetNewDocumentUrl@1160040007(GUID@1160040000 : GUID) : Text[1024];
    BEGIN
      EXIT(GetDocumentUrl(GUID) + 'new');
    END;

    PROCEDURE GetStatusDocumentUrl@1160040127(GUID@1160040000 : GUID;StatusText@1160040001 : Text[30]) : Text[1024];
    BEGIN
      EXIT(GetOneCategoryUrl(GUID) + '/' + StatusText);
    END;

    PROCEDURE GetOneDocumentUrl@1160040009(GUID@1160040000 : GUID;DocumentID@1160040001 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(GetDocumentUrl(GUID) + DocumentID);
    END;

    PROCEDURE GetDocumentEmailUrl@1160040034(GUID@1160040000 : GUID;DocumentID@1160040001 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(GetOneDocumentUrl(GUID,DocumentID) + '/email/' + FORMAT(GLOBALLANGUAGE));
    END;

    PROCEDURE GetDocumentDeleteUrl@1160040130(GUID@1160040000 : GUID;DocumentID@1160040001 : Text[1024]) : Text[1024];
    BEGIN
      EXIT(GetOneDocumentUrl(GUID,DocumentID) + '/delete');
    END;

    BEGIN
    END.
  }
}

