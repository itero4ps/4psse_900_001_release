OBJECT Codeunit 6085705 Purch. Doc. - Validation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.4.04,4PS9.00;
  }
  PROPERTIES
  {
    TableNo=6085590;
    OnRun=VAR
            DocumentLine@1000000000 : TEMPORARY Record 6085596;
            Template@1000000010 : Record 6085579;
            Field@1000000004 : Record 6085580;
            TempField@1160040002 : Record 6085580;
            Comment@1000000008 : Record 6085594;
            Vendor@161024012 : Record 23;
            PurchHeader@161024014 : Record 38;
            VendLedgEntry@161024015 : Record 25;
            PaymentTerms@161024020 : Record 3;
            GLSetup@161024022 : Record 98;
            CaptureMgt@1000000009 : Codeunit 6085576;
            VendDocNo@161024016 : Code[20];
            DocCurr@161024023 : Code[20];
            DocDate@161024019 : Date;
            DocDueDate@161024017 : Date;
            CalcDueDate@161024018 : Date;
            AmountExclVAT@1000000002 : Decimal;
            VATAmount@1000000005 : Decimal;
            AmountInclVAT@1000000006 : Decimal;
            LineTotalHeaderAmount@161024013 : Decimal;
            TotalLineAmount@1000000003 : Decimal;
            IsValid@1000000001 : Boolean;
            DocValue@1100528200 : Record 6085593;
            OurOrderNo@1100528201 : Code[20];
            PurchHeader2@1100528202 : Record 38;
            CompanyInformation@1100528203 : Record 79;
            CompanyVATRegNo@1100528208 : Code[30];
            OurVATRegNo@1100528204 : Code[30];
            BankAccNo@1100528205 : Code[50];
            VendBankAccount@1100528206 : Record 288;
            BankAccFound@1100528207 : Boolean;
          BEGIN
            CODEUNIT.RUN(CODEUNIT::"Doc. - Field Validation",Rec);

            Template.GET(Rec."Template No.");

            IsValid := Rec.OK;

            Vendor.GET(GetSourceID);
            IF Vendor.Blocked = Vendor.Blocked::All THEN BEGIN
              Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,
                STRSUBSTNO(Text007,Vendor.FIELDCAPTION(Blocked),Vendor.Blocked,Vendor.TABLECAPTION,Vendor."No."));
              IsValid := FALSE;
            END;

            AmountExclVAT := PurchDocMgt.GetAllAmountsExclVAT(Rec);
            VATAmount := PurchDocMgt.GetVATAmount(Rec);
            LineTotalHeaderAmount := PurchDocMgt.GetLineTotalHeaderAmount(Rec);
            AmountInclVAT := PurchDocMgt.GetAmountInclVAT(Rec);

            // *********************************************************************************************************************************
            // CHECK EXTERNAL DOCUMENT NO.
            // *********************************************************************************************************************************
            VendDocNo := COPYSTR(PurchDocMgt.GetDocumentNo(Rec),1,20);
            IF VendDocNo <> '' THEN BEGIN
              VendLedgEntry.RESET;
              VendLedgEntry.SETCURRENTKEY("External Document No.");
              IF PurchDocMgt.GetIsInvoice(Rec) THEN
                VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
              ELSE
                VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
              VendLedgEntry.SETRANGE("External Document No.",VendDocNo);
              VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
              IF VendLedgEntry.FINDFIRST THEN BEGIN
                Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,
                  STRSUBSTNO(Text010,VendLedgEntry."Document Type",VendDocNo));
                IsValid := FALSE;
              END ELSE BEGIN
                PurchHeader.SETCURRENTKEY("Document Type","Buy-from Vendor No.","No.");
                IF PurchDocMgt.GetIsInvoice(Rec) THEN BEGIN
                  PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Invoice);
                  PurchHeader.SETRANGE("Vendor Invoice No.",VendDocNo);
                END ELSE BEGIN
                  PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Credit Memo");
                  PurchHeader.SETRANGE("Vendor Cr. Memo No.",VendDocNo);
                END;
                PurchHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
                IF PurchHeader.FINDFIRST THEN BEGIN
                  Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,
                    STRSUBSTNO(Text010,PurchHeader."Document Type",VendDocNo));
                  IsValid := FALSE;
                END;
              END;
            END;

            // *********************************************************************************************************************************
            // WARN IF DIFFERENT DATE FORMATS ARE USED ON FIELDS
            // *********************************************************************************************************************************
            Field.SETRANGE("Template No.","Template No.");
            Field.SETRANGE("Data Type",Field."Data Type"::Date);
            IF Field.FINDFIRST THEN BEGIN
              Field.SETFILTER("Date Format",'<>%1',Field."Date Format");
              IF NOT Field.ISEMPTY THEN
                Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Warning,Text016);
            END;
            Field.RESET;

            // *********************************************************************************************************************************
            // WARN IF DUE DATE = DOCUMENT DATE
            // *********************************************************************************************************************************
            //**4PS.sn
            IF Template."Use E-mail Date for Doc. Date" AND ("E-mail Date" <> 0DT) THEN
              DocDate := DT2DATE("E-mail Date")
            ELSE
            //**4PS.en
              DocDate := PurchDocMgt.GetDocumentDate(Rec);

            //**4PS.sn
            IF NOT PurchDocMgt.GetIsInvoice(Rec) THEN BEGIN
              DocValue.SETRANGE("Document No.", Rec."No.");
              DocValue.SETRANGE(Code, 'DUEDATE');
              IF DocValue.FINDFIRST THEN BEGIN
                DocValue."Value (Date)" := DocDate;
                DocValue.MODIFY;
              END;
            END;
            //**4PS.en

            DocDueDate := PurchDocMgt.GetDueDate(Rec);

            IF PurchDocMgt.GetIsInvoice(Rec) THEN //**4PS.n
              IF (DocDueDate = DocDate) AND (DocDate <> 0D) THEN
                Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Warning,
                  STRSUBSTNO(Text008,PurchDocMgt.GetDueDateDesc(Rec),PurchDocMgt.GetDocDateDesc(Rec)));

            IF NOT PurchDocMgt.GetIsInvoice(Rec) THEN
              IF DocDueDate > TODAY THEN
                Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Warning,
                  STRSUBSTNO(Text017,PurchDocMgt.GetDueDateDesc(Rec)));

            // *********************************************************************************************************************************
            // WARN IF DUE DATE <> CALCULATE DUE DATE (BASED ON THE DOCUMENT DATE AND VENDOR PAYMENT TERMS)
            // *********************************************************************************************************************************
            IF (DocDate <> 0D) AND (DocDueDate <> 0D) AND (NOT PurchDocMgt.GetIsInvoice(Rec)) THEN BEGIN
              //**4PS.sn
              OurOrderNo := COPYSTR(PurchDocMgt.GetOurDocumentNo(Rec), 1, MAXSTRLEN(OurOrderNo));
              IF OurOrderNo <> '' THEN BEGIN
                IF PurchHeader2.GET(PurchHeader2."Document Type"::Order, OurOrderNo) THEN BEGIN
                  IF PaymentTerms.GET(PurchHeader2."Payment Terms Code") AND (FORMAT(PaymentTerms."Due Date Calculation") <> '') THEN BEGIN
                    CalcDueDate := CALCDATE(PaymentTerms."Due Date Calculation", DocDate);
                    IF DocDueDate <> CalcDueDate THEN
                      Comment.Add(Rec, Field, 0, Comment.Area::Validation, Comment."Comment Type"::Warning,
                                  STRSUBSTNO(Text009, PurchHeader2."Payment Terms Code"));
                  END;
                END;
              END ELSE
             // IF PaymentTerms.GET(Vendor."Payment Terms Code") AND (FORMAT(PaymentTerms."Due Date Calculation") <> '') THEN BEGIN
                IF (PaymentTerms.GET(Vendor."Payment Terms Code") AND (FORMAT(PaymentTerms."Due Date Calculation") <> '')) AND NOT
                   (NOT PurchDocMgt.GetIsInvoice(Rec) AND (DocDate = DocDueDate)) THEN BEGIN
              //**4PS.en

                CalcDueDate := CALCDATE(PaymentTerms."Due Date Calculation",DocDate);
                IF DocDueDate <> CalcDueDate THEN
                  Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Warning,
                    STRSUBSTNO(Text009,Vendor."Payment Terms Code"));
              END;
            END;

            // *********************************************************************************************************************************
            // WARN IF CURRENCY CODE <> VENDOR CARD CURRENCY CODE
            // *********************************************************************************************************************************
            GLSetup.GET;
            DocCurr := PurchDocMgt.GetCurrencyCode(Rec);
            IF (NOT ((Vendor."Currency Code" IN ['',GLSetup."LCY Code"]) AND (DocCurr IN ['',GLSetup."LCY Code"])) AND
              (Vendor."Currency Code" <> PurchDocMgt.GetCurrencyCode(Rec)))
            THEN
              Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Warning,
                STRSUBSTNO(Text011,PurchDocMgt.GetCurrencyCode(Rec),Vendor."Currency Code"));

            // *********************************************************************************************************************************
            // CHECK VAT AMOUNT
            // *********************************************************************************************************************************
            IF Template."Purch. Validate VAT Calc." THEN
              IF ((AmountExclVAT + VATAmount) - AmountInclVAT) <> 0 THEN BEGIN
                Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,Text001);
                IsValid := FALSE;
            END;

            //**4PS.sn
            CompanyInformation.GET;
            CompanyVATRegNo := CompanyInformation."VAT Registration No.";
            CompanyVATRegNo := DELCHR(CompanyVATRegNo);
            OurVATRegNo := PurchDocMgt.GetOurVATNo(Rec);
            OurVATRegNo := DELCHR(OurVATRegNo);
            IF OurVATRegNo <> '' THEN BEGIN
              IF STRLEN(CompanyVATRegNo) <= STRLEN(OurVATRegNo) THEN BEGIN
                IF STRPOS(CompanyVATRegNo, OurVATRegNo) = 0 THEN
                  Comment.Add(Rec, Field, 0, Comment.Area::Validation, Comment."Comment Type"::Warning, Text11012001);
              END ELSE BEGIN
                IF STRPOS(OurVATRegNo, CompanyVATRegNo) = 0 THEN
                  Comment.Add(Rec, Field, 0, Comment.Area::Validation, Comment."Comment Type"::Warning, Text11012001);
              END;
            END;

            BankAccNo := PurchDocMgt.GetBankAccountNo(Rec);
            BankAccNo := DELCHR(BankAccNo, '=', ' .');
            VendBankAccount.SETRANGE("Vendor No.", Vendor."No.");
            VendBankAccount.SETRANGE("B-Account", FALSE);
            IF VendBankAccount.FINDSET THEN REPEAT
              IF VendBankAccount.IBAN <> '' THEN BEGIN
                IF STRLEN(BankAccNo) <= STRLEN(VendBankAccount.IBAN) THEN BEGIN
                  IF STRPOS(VendBankAccount.IBAN, BankAccNo) <> 0 THEN
                    BankAccFound := TRUE;
                END ELSE
                  IF STRPOS(BankAccNo, VendBankAccount.IBAN) <> 0 THEN
                    BankAccFound := TRUE;
              END ELSE BEGIN
                IF STRLEN(BankAccNo) <= STRLEN(VendBankAccount."Bank Account No.") THEN BEGIN
                  IF STRPOS(DELCHR(VendBankAccount."Bank Account No.", '=', 'P'), BankAccNo) <> 0 THEN
                    BankAccFound := TRUE;
                END ELSE
                  IF STRPOS(BankAccNo, DELCHR(VendBankAccount."Bank Account No.", '=', 'P')) <> 0 THEN
                    BankAccFound := TRUE;
              END;
            UNTIL (VendBankAccount.NEXT = 0) OR BankAccFound;

            IF NOT BankAccFound THEN BEGIN
              Comment.Add(Rec, Field, 0, Comment.Area::Validation, Comment."Comment Type"::Error, Text11012002);
              IsValid := FALSE;
            END;
            //**4PS.en


            // *********************************************************************************************************************************
            // BUILD LINES TABLE AND CHECK THE LINES
            // *********************************************************************************************************************************
            //Rec.BuildTempLinesTable(DocumentLine); //**4PS.o
            //**4PS.sn
            IF "Invoice Lines Input" THEN
              Rec.BuildTempLinesTable(DocumentLine)
            ELSE BEGIN
              Template."Recognize Lines" := Template."Recognize Lines"::No;
              // Template."Purch. Allow Register w/o Amt." := TRUE;  4PS conversion DC4.00 TODO??
            END;
            //**4PS.en
            IF DocumentLine.ISEMPTY AND (Template."Recognize Lines" = Template."Recognize Lines"::Yes) THEN BEGIN
              Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,Text005);
              IsValid := FALSE;
            END ELSE IF NOT DocumentLine.ISEMPTY THEN BEGIN
              DocumentLine.SETRANGE(OK,FALSE);
              IF NOT DocumentLine.ISEMPTY THEN BEGIN
                Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,Text002);
                IsValid := FALSE;
              END;

              IF Template."Validate Line Totals" THEN BEGIN
                // Sum all the lines and compare it to the headerfield, Amount Excl. VAT
                DocumentLine.SETRANGE(OK);
                IF DocumentLine.FINDSET(FALSE,FALSE) THEN
                  REPEAT
                    TotalLineAmount := TotalLineAmount + PurchDocMgt.GetLineAmount(Rec,DocumentLine."Line No.");
                  UNTIL DocumentLine.NEXT = 0;

                IF TotalLineAmount <> LineTotalHeaderAmount THEN BEGIN
                  Comment.Add(Rec,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,
                    STRSUBSTNO(Text003,TotalLineAmount,LineTotalHeaderAmount));
                  IsValid := FALSE;
                END;
              END;

              // *****************************************************************************************************************************
              // VALIDATE MATCH
              // *****************************************************************************************************************************
              IF Rec."Match Status" <> Rec."Match Status"::"Manually Matched" THEN BEGIN
                IF PurchDocMgt.GetIsInvoice(Rec) AND
                  (Template."Purch. Inv. Reg. Step 1" = Template."Purch. Inv. Reg. Step 1"::"Match Order & Create Invoice")
                THEN
                  IsValid := IsValid AND ValidateLineMatch(Rec,DocumentLine);
              END;
            END;

            IsValid := IsValid AND ValidateMatch(Rec,Template);
            IsValid := IsValid AND ValidateAmtAccounts(Rec,Template);

            IF IsValid <> OK THEN BEGIN
              Rec.OK := IsValid;
              MODIFY;
            END;
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Amounts do not match.';
      Text002@1000000001 : TextConst 'ENU=One or more lines have errors.';
      Text003@1000000002 : TextConst 'ENU=The sum of all lines does not reconcile to the total amount: %1 - %2';
      Text005@1000000004 : TextConst 'ENU=No lines recognized.';
      Text006@1000000005 : TextConst 'ENU=One or more lines are unmatched.';
      PurchDocMgt@1000000006 : Codeunit 6085709;
      Text007@161024012 : TextConst 'ENU=%1 can not be ''%2'' on %3 %4';
      Text008@161024013 : TextConst 'ENU="WARNING: %1 = %2"';
      Text009@161024015 : TextConst 'ENU=WARNING: Payment Terms(%1) not correct';
      Text010@161024014 : TextConst 'ENU=%1 %2 already exists.';
      Text011@161024016 : TextConst 'ENU="WARNING: Currency Code is different. Document = ''%1'', Vendor = ''%2''"';
      Text012@161024017 : TextConst 'ENU=The sum of all matched lines does not reconcile to the total amount.';
      Text013@161024018 : TextConst 'ENU=No lines have been matched and no amounts has been configured to be transfered.';
      Text014@161024019 : TextConst 'ENU=%1 must be specified on the template.';
      Text015@161024020 : TextConst 'ENU=No Account has been configured for %1.';
      Text016@161024021 : TextConst 'ENU=WARNING: Different date formats used on fields';
      Text017@161024022 : TextConst 'ENU=WARNING: %1 greater than today on credit note.';
      Text11012001@1100528201 : TextConst;
      Text11012002@1100528200 : TextConst;

    PROCEDURE ValidateLineMatch@1000000000(VAR Document@1000000004 : Record 6085590;VAR DocumentLine@1000000002 : TEMPORARY Record 6085596) : Boolean;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      CaptureMgnt@1000000001 : Codeunit 6085576;
      Field@1000000005 : Record 6085580;
      Comment@1000000009 : Record 6085594;
      Quantity@1000000003 : Decimal;
      UnitCost@1000000006 : Decimal;
      LineAmount@1000000007 : Decimal;
      MatchRequired@1000000008 : Boolean;
    BEGIN
      IF DocumentLine.FINDSET THEN
        REPEAT
          Quantity := PurchDocMgt.GetLineQuantity(Document,DocumentLine."Line No.");
          UnitCost := PurchDocMgt.GetLineUnitCost(Document,DocumentLine."Line No.");
          LineAmount := PurchDocMgt.GetLineAmount(Document,DocumentLine."Line No.");

          MatchRequired := (Quantity <> 0) OR (UnitCost <> 0) OR (LineAmount <> 0);

          IF MatchRequired THEN BEGIN
            PurchDocMatch.SETRANGE("Document No.",DocumentLine."Document No.");
            PurchDocMatch.SETRANGE("Document Line No.",DocumentLine."Line No.");
            IF PurchDocMatch.ISEMPTY THEN BEGIN
              Comment.Add(Document,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,Text006);
              EXIT(FALSE);
            END;
          END;
        UNTIL DocumentLine.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE ValidateMatch@161024019(VAR Document@1000000004 : Record 6085590;Template@161024014 : Record 6085579) : Boolean;
    VAR
      CaptureMgnt@1000000001 : Codeunit 6085576;
      Field@1000000005 : Record 6085580;
      Comment@1000000009 : Record 6085594;
      AmountToMatch@161024015 : Decimal;
      MatchedAmount@161024017 : Decimal;
      IsInvalid@161024012 : Boolean;
    BEGIN
      IF PurchDocMgt.IsDocMatched(Document) THEN BEGIN
        MatchedAmount := PurchDocMgt.GetMatchedAmount(Document);

        AmountToMatch := PurchDocMgt.GetAmountToMatch(Document);
        IF NOT PurchDocMgt.AmountsWithinTolerance(Template,AmountToMatch,MatchedAmount) THEN BEGIN
          IF Document."Match Status" <> Document."Match Status"::"Manually Matched" THEN BEGIN
            Comment.Add(Document,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,Text012);
            IsInvalid := TRUE;
          END ELSE
            Comment.Add(Document,Field,0,Comment.Area::Validation,Comment."Comment Type"::Warning,Text012);
        END ELSE IF AmountToMatch <> MatchedAmount THEN BEGIN
          IF Template."Variance Posting Account" = '' THEN BEGIN
            Comment.Add(Document,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,
              STRSUBSTNO(Text014,Template.FIELDCAPTION("Variance Posting Account")));
            IsInvalid := TRUE;
          END;
        END;
      END;

      EXIT(NOT IsInvalid);
    END;

    PROCEDURE ValidateAmtAccounts@161024021(VAR Document@1000000004 : Record 6085590;Template@161024014 : Record 6085579) : Boolean;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      DataTransl@161024019 : Record 6085584;
      Field@1000000005 : Record 6085580;
      TemplField@161024013 : Record 6085580;
      Comment@1000000009 : Record 6085594;
      Value@161024020 : Record 6085593;
      CaptureMgnt@161024021 : Codeunit 6085576;
      Amount@161024016 : Decimal;
      MatchedAmount@161024017 : Decimal;
      IsInvalid@161024012 : Boolean;
      AccountNo@161024018 : Code[20];
      LinesCaptured@161024015 : Boolean;
    BEGIN
      Value.SETCURRENTKEY("Document No.","Is Value",Type,"Line No.");
      Value.SETRANGE("Document No.",Document."No.");
      Value.SETRANGE("Is Value",TRUE);
      Value.SETRANGE(Type,Value.Type::Line);
      LinesCaptured := NOT Value.ISEMPTY;

      PurchDocMatch.SETRANGE("Document No.",Document."No.");

      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      IF (PurchDocMatch.ISEMPTY) AND (NOT LinesCaptured) THEN
        Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ")
      ELSE
        Field.SETRANGE("Transfer Amount to Document",Field."Transfer Amount to Document"::Always);
      Field.SETRANGE("Subtract from Amount Field",'');

      IF NOT Template."Allow Register without Amounts" THEN BEGIN
        IF (NOT Field.FINDFIRST) AND (PurchDocMatch.ISEMPTY) AND (NOT LinesCaptured) THEN BEGIN
          Comment.Add(Document,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,Text013);
          IsInvalid := TRUE;
        END;
      END;

      REPEAT
        Amount := CaptureMgnt.GetDecimal(Document,Field.Type,Field.Code,0);
        IF Amount <> 0 THEN BEGIN
          AccountNo := '';

          IF Field."G/L Account Field Code" <> '' THEN BEGIN
            IF (TemplField.GET(Field."Template No.",Field.Type,Field."G/L Account Field Code")) THEN
              AccountNo := CaptureMgnt.GetValueAsText(Document."No.",0,TemplField)
            ELSE
              IF (DataTransl.GET(Document."Template No.",Field.Type,Field.Code)) THEN
                AccountNo := DataTransl."Translate to No.";
          END ELSE
            IF (DataTransl.GET(Document."Template No.",Field.Type,Field.Code)) THEN
              AccountNo := DataTransl."Translate to No.";

          IF (AccountNo = '') AND (NOT Template."Allow Register without Amounts") THEN BEGIN
            Comment.Add(Document,Field,0,Comment.Area::Validation,Comment."Comment Type"::Error,
              STRSUBSTNO(Text015,Field."Field Name"));
            IsInvalid := TRUE;
          END;
        END;

      UNTIL Field.NEXT = 0;

      EXIT(NOT IsInvalid);
    END;

    BEGIN
    {
      This codeunit validates the full purchase document
    }
    END.
  }
}

