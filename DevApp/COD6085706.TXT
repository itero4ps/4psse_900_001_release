OBJECT Codeunit 6085706 Purch. Doc. - Register
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.4.05,4PS9.00;
  }
  PROPERTIES
  {
    TableNo=6085590;
    OnRun=VAR
            DocCat@1160040000 : Record 6085575;
            Template@1000000012 : Record 6085579;
            PurchHeader@1000000002 : Record 38;
            PurchLine@1000000003 : Record 39;
            Field@1000000004 : Record 6085580;
            Alias@1000000014 : Record 6085584;
            PurchInvHeader@1000000000 : Record 122;
            PurchCrMemoHeader@1000000001 : Record 124;
            PurchDocMatch@1000000005 : Record 6085700;
            PurchRcptHeader@161024015 : Record 120;
            ReturnShptHeader@161024014 : Record 6650;
            OrderNo@161024016 : Code[100];
            ActionToPerform@161024013 : 'CreateWithoutMatch,CreateWithMatch,UpdateOrderWithMatch';
            NextLineNo@1000000018 : Integer;
            IsInvoice@161024012 : Boolean;
            ToCompanyName@1100528200 : Text[80];
            DocMoveToCompany@1100528201 : Codeunit 6085758;
            DocumentCaptureSetup@1100528202 : Record 6085573;
          BEGIN
            Template.GET(Rec."Template No.");
            DocumentCaptureSetup.GET; //**4PS.n

            CODEUNIT.RUN(Template."Codeunit ID: Doc. Validation",Rec);
            COMMIT;

            //**4PS.sn
            ToCompanyName := Company;
            IF ToCompanyName = '' THEN
              ToCompanyName := COMPANYNAME;
            IF ToCompanyName = COMPANYNAME THEN
            //**4PS.en
              TESTFIELD(Rec.OK);

            DocCat.GET(Rec."Document Category Code");

            IF DocCat."Destination Header Table No." <> 0 THEN
              DocCat.TESTFIELD("Destination Header Table No.",DATABASE::"Purchase Header");

            IF DocCat."Destination Line Table No." <> 0 THEN
              DocCat.TESTFIELD("Destination Line Table No.",DATABASE::"Purchase Line");

            //**4PS.sn
            IF ToCompanyName <> COMPANYNAME THEN BEGIN
              DocMoveToCompany.RUN(Rec);
              EXIT;
            END;
            //**4PS.en

            IsInvoice := PurchDocMgt.GetIsInvoice(Rec);
            IF IsInvoice THEN
              Template.TESTFIELD("Purch. Inv. Reg. Step 1")
            ELSE
              Template.TESTFIELD("Purch. Cr.Memo Reg. Step 1");

            PurchDocMatch.SETRANGE("Document No.",Rec."No.");
            IF IsInvoice THEN BEGIN
              IF (Template."Purch. Inv. Reg. Step 1" = Template."Purch. Inv. Reg. Step 1"::"Match Order & Create Invoice") AND
                PurchDocMatch.ISEMPTY
              THEN
                IF NOT CONFIRM(Text015,FALSE,
                  Template.FIELDCAPTION(Template."Purch. Inv. Reg. Step 1"),Template."Purch. Inv. Reg. Step 1")
                THEN
                  ERROR('');

              CASE TRUE OF
                (Template."Purch. Inv. Reg. Step 1" = Template."Purch. Inv. Reg. Step 1"::"Create Invoice") AND PurchDocMatch.ISEMPTY:
                  ActionToPerform := ActionToPerform::CreateWithoutMatch;
                (Template."Purch. Inv. Reg. Step 1" = Template."Purch. Inv. Reg. Step 1"::"Match & Update Order"):
                  ActionToPerform := ActionToPerform::UpdateOrderWithMatch;
                ELSE
                  ActionToPerform := ActionToPerform::CreateWithMatch;
              END;
            END ELSE BEGIN
              IF (Template."Purch. Cr.Memo Reg. Step 1" =
                Template."Purch. Cr.Memo Reg. Step 1"::"Match Return Order & Create Credit Memo") AND PurchDocMatch.ISEMPTY
              THEN
                IF NOT CONFIRM(Text015,FALSE,Template.FIELDCAPTION(Template."Purch. Cr.Memo Reg. Step 1"),
                  FORMAT(Template."Purch. Inv. Reg. Step 1"::"Match Order & Create Invoice"))
                THEN
                  ERROR('');

              CASE TRUE OF
                (Template."Purch. Cr.Memo Reg. Step 1" = Template."Purch. Cr.Memo Reg. Step 1"::"Create Credit Memo") AND
                  PurchDocMatch.ISEMPTY:
                    ActionToPerform := ActionToPerform::CreateWithoutMatch;
                (Template."Purch. Cr.Memo Reg. Step 1" = Template."Purch. Cr.Memo Reg. Step 1"::"Match & Update Return Order"):
                  ActionToPerform := ActionToPerform::UpdateOrderWithMatch;
                ELSE
                  ActionToPerform := ActionToPerform::CreateWithMatch;
              END;
            END;

            IF ActionToPerform = ActionToPerform::UpdateOrderWithMatch THEN BEGIN
              IF PurchDocMatch.FINDSET THEN
                REPEAT
                  CASE PurchDocMatch."Purch. Doc. Type" OF
                    PurchDocMatch."Purch. Doc. Type"::Receipt:
                      BEGIN
                        PurchRcptHeader.GET(PurchDocMatch."Purch. Doc. No.");
                        IF OrderNo = '' THEN
                          OrderNo := PurchRcptHeader."Order No."
                        ELSE IF OrderNo <> PurchRcptHeader."Order No." THEN
                          ERROR(Text018,Template.FIELDCAPTION("Purch. Inv. Reg. Step 1"),Template."Purch. Inv. Reg. Step 1");
                      END;

                    PurchDocMatch."Purch. Doc. Type"::Order:
                      BEGIN
                        PurchHeader.GET(PurchHeader."Document Type"::Order,PurchDocMatch."Purch. Doc. No.");
                        IF OrderNo = '' THEN
                          OrderNo := PurchHeader."No."
                        ELSE IF OrderNo <> PurchHeader."No." THEN
                          ERROR(Text018,Template.FIELDCAPTION("Purch. Inv. Reg. Step 1"),Template."Purch. Inv. Reg. Step 1");
                      END;

                    PurchDocMatch."Purch. Doc. Type"::"Return Shipment":
                      BEGIN
                        ReturnShptHeader.GET(PurchDocMatch."Purch. Doc. No.");
                        IF OrderNo = '' THEN
                          OrderNo := ReturnShptHeader."Return Order No."
                        ELSE IF OrderNo <> ReturnShptHeader."Return Order No." THEN
                          ERROR(Text018,Template.FIELDCAPTION("Purch. Cr.Memo Reg. Step 1"),Template."Purch. Cr.Memo Reg. Step 1");
                      END;

                    PurchDocMatch."Purch. Doc. Type"::"Return Order":
                      BEGIN
                        PurchHeader.GET(PurchHeader."Document Type"::"Return Order",PurchDocMatch."Purch. Doc. No.");
                        IF OrderNo = '' THEN
                          OrderNo := PurchHeader."No."
                        ELSE IF OrderNo <> PurchHeader."No." THEN
                          ERROR(Text018,Template.FIELDCAPTION("Purch. Inv. Reg. Step 1"),Template."Purch. Inv. Reg. Step 1");
                      END;
                  END;
                UNTIL PurchDocMatch.NEXT = 0;

              IF OrderNo = '' THEN BEGIN
                OrderNo := PurchDocMgt.GetOurDocumentNo(Rec);
                IF OrderNo = '' THEN BEGIN
                  IF IsInvoice THEN BEGIN
                    IF NOT CONFIRM(Text023,FALSE) THEN
                      ERROR('');
                  END ELSE BEGIN
                    IF NOT CONFIRM(Text024,FALSE) THEN
                      ERROR('');
                  END;
                  ActionToPerform := ActionToPerform::CreateWithoutMatch;
                END ELSE BEGIN
                  IF IsInvoice THEN BEGIN
                    IF NOT CONFIRM(Text021,FALSE) THEN
                      ERROR('');
                  END ELSE BEGIN
                    IF NOT CONFIRM(Text022,FALSE) THEN
                      ERROR('');
                  END;
                END;
              END;
            END;

            // *********************************************************************************************************************************
            // IDENTIFY THE PURCHASER CODE FOR THIS DOCUMENT
            // *********************************************************************************************************************************
            IF NOT DocumentCaptureSetup."Skip Purchaser at Registering" THEN //**4PS
              IF ActionToPerform <> ActionToPerform::UpdateOrderWithMatch THEN BEGIN
                IF NOT SetupAlias(Alias,Template,GetSourceID,PurchDocMgt.GetOurContact(Rec)) THEN
                  ERROR('');
                COMMIT;
              END;

            //**4PS.sn
            IF (NOT "Invoice Lines Input") AND (ActionToPerform <> ActionToPerform::CreateWithoutMatch) THEN
              ERROR(Text11012001);
            //**4PS.en

            HasPostingError := FALSE;
            CASE ActionToPerform OF
              ActionToPerform::CreateWithoutMatch:
                CreateWithoutMatch(Rec,PurchHeader,IsInvoice,Alias);
              ActionToPerform::UpdateOrderWithMatch:
                UpdateOrderWithMatch(Rec,PurchHeader,OrderNo,IsInvoice);
              ActionToPerform::CreateWithMatch:
                CreateWithMatch(Rec,PurchHeader,IsInvoice,Alias);
            END;

            Rec.VALIDATE(Status,Rec.Status::Registered);
            Rec."Document On Hold Code" := ''; //**4PS.n
            Rec.MODIFY;

            COMMIT;

            IF "Show after Register" OR HasPostingError THEN BEGIN
              IF PurchHeader.FIND('=') THEN BEGIN
                CASE PurchHeader."Document Type" OF
                  PurchHeader."Document Type"::Order:
                    PAGE.RUNMODAL(PAGE::"Purchase Order",PurchHeader);
                  PurchHeader."Document Type"::Invoice:
                    PAGE.RUNMODAL(PAGE::"Purch. Invoice With Image",PurchHeader);
                  PurchHeader."Document Type"::"Return Order":
                    PAGE.RUNMODAL(PAGE::"Purchase Return Order",PurchHeader);
                  PurchHeader."Document Type"::"Credit Memo":
                    PAGE.RUNMODAL(PAGE::"Purch. Credit Memo With Image",PurchHeader);
                END;
              END ELSE BEGIN
                IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice] THEN BEGIN
                  IF PurchHeader."Last Posting No." <> '' THEN
                    PurchInvHeader.GET(PurchHeader."Last Posting No.")
                  ELSE
                    PurchInvHeader.GET(PurchHeader."No.");
                  PAGE.RUNMODAL(PAGE::"Posted Purchase Invoice",PurchInvHeader);
                END ELSE BEGIN
                  IF PurchHeader."Last Posting No." <> '' THEN
                    PurchCrMemoHeader.GET(PurchHeader."Last Posting No.")
                  ELSE
                    PurchCrMemoHeader.GET(PurchHeader."No.");
                  PAGE.RUNMODAL(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHeader);
                END;
              END;
            END;
          END;

  }
  CODE
  {
    VAR
      Text001@1000000004 : TextConst 'ENU=Select Purchaser from List,Translate ''%1'' to Purchaser Code,Use Purchaser from Vendor (%2),Always use purchaser from Vendor (%2)';
      Text002@1000000005 : TextConst 'ENU=Select Purchaser from List,Use Purchaser from Vendor (%1),Always use Purchaser from Vendor (%1),Setup default Purchaser Code';
      Text003@1160040000 : TextConst 'ENU=Order No. %1:';
      Text004@1000000009 : TextConst 'ENU="No line translation exists with %1 = ''%2''\\This must be created in order to register the document."';
      CaptureMgt@1000000008 : Codeunit 6085576;
      PurchDocMgt@1000000010 : Codeunit 6085709;
      Text005@161024017 : TextConst 'ENU=No Account has been configured for %1.';
      Text006@1000000011 : TextConst 'ENU=An error occurred and the document was not posted.\\The document has been marked as registrered, but you must manually correct the posting error and post the document again.';
      HasPostingError@1000000012 : Boolean;
      Text007@1160040001 : TextConst 'ENU=Return Order No. %1:';
      Text008@1000000014 : TextConst 'ENU=Select Purchaser from List,Change Purchaser on Vendor,Setup default Purchaser Code';
      Text009@1000000015 : TextConst 'ENU=There is a difference between the matched and invoiced amounts. Registration Step 2 has therefore not been carried out.\\Please check the document and perform Registration Step 2 manually.';
      Text010@161024015 : TextConst 'ENU=There is a difference between the matched and invoiced amounts.\\Please check the document manually.';
      Text011@161024013 : TextConst 'ENU=There is a difference between the recognized and amounts on the Invoice that was created. Registration Step 2 has therefore not been carried out.\\Please check the document and perform Registration Step 2 manually.';
      Text012@161024014 : TextConst 'ENU=There is a difference between the recognized and amounts on the Credit Memo that was created. Registration Step 2 has therefore not been carried out.\\Please check the document and perform Registration Step 2 manually.';
      Text013@1000 : TextConst 'ENU=There is a difference between the recognized and amounts on the Invoice that was created.\\Please check the document manually.';
      Text014@161024016 : TextConst 'ENU=There is a difference between the recognized and amounts on the Credit Memo that was created.\\Please check the document manually.';
      Text015@1000000016 : TextConst 'ENU=%1 has been set up to %2, but no lines was matched.\\Do you want to continue the registration?';
      Text017@161024019 : TextConst 'ENU=%1 has been set up to %2, but no lines were matched.\\Do you want to continue the registration?';
      Text018@161024020 : TextConst 'ENU="You can only match to one order when %1 = ''%2''."';
      Text019@161024021 : TextConst 'ENU=WARNING!\\%1 is already filled out on order %3, but no invoices have been posted with this %1 (%2).\\Do you want to continue registrering this invoice and thereby overwriting %1 on this order?';
      Text020@161024022 : TextConst 'ENU=WARNING!\\%1 is already filled out on return order %3, but no credit memoes have been posted with this %1 (%2).\\Do you want to continue registrering this credit memo and thereby overwriting %1 on this return order?';
      Text021@161024023 : TextConst 'ENU=WARNING!\\This invoice hasn''t been matched to an order. Therefore all costs will be added as new lines on the order instead of updating existing lines.\\Do you want to continue registrering this invoice?';
      Text022@161024025 : TextConst 'ENU=WARNING!\\This credit memo hasn''t been matched to an order. Therefore all costs will be added as new lines on the return order instead of updating existing lines.\\Do you want to continue registrering this credit memo?';
      Text023@161024026 : TextConst 'ENU=WARNING!\\This invoice hasn''t been matched to an order and no order number has been specified. Do you want to create an invoice instead of updating an existing order?';
      Text024@161024024 : TextConst 'ENU=WARNING!\\This credit memo hasn''t been matched to a return order and no return order number has been specified. Do you wan''t to create a credit memo instead of updating an existing return order?';
      Text025@161024027 : TextConst 'ENU=An error occurred while posting the variance line on %1 %2. Registration Step 2 has therefore not been carried out.';
      Text11012001@1100528200 : TextConst 'ENU=Invoice Lines Input should be active when an invoice is matched.';

    PROCEDURE SetupAlias@1000000004(VAR DataTransl@1000000003 : Record 6085584;VAR Template@1000000001 : Record 6085579;VendorNo@1000000007 : Code[20];ContactName@1000000000 : Text[200]) : Boolean;
    VAR
      Field@1000000005 : Record 6085580;
      Purchaser@1000000002 : Record 13;
      Vendor@1000000006 : Record 23;
      Selection@1000000004 : ' ,UseVendorPurchCode,AlwaysUseVendorPurchCode,ShowTranslation,SelectPurchaser';
    BEGIN
      WHILE TRUE DO BEGIN
        Vendor.GET(VendorNo);
        IF Template."Purch. Use Vend. Purch. Code" THEN BEGIN
          DataTransl.RESET;
          DataTransl.INIT;
          DataTransl."Translate to No." := Vendor."Purchaser Code";
          EXIT(TRUE);
        END;

        DataTransl.RESET;
        DataTransl.SETRANGE("Template No.",Template."No.");
        DataTransl.SETRANGE(Type,Field.Type::Header);
        DataTransl.SETRANGE("Field Code",'OURCONTACT');
        DataTransl.SETRANGE("Translate From",UPPERCASE(ContactName));
        DataTransl.SETRANGE("Translate to Type",DataTransl."Translate to Type"::"Salesperson/Purchaser");
        IF DataTransl.FINDFIRST AND (DataTransl."Translate to No." <> '') THEN
          EXIT(TRUE);

        IF ContactName <> '' THEN BEGIN
          Purchaser.SETFILTER(Name,COPYSTR('@' + ContactName,1,MAXSTRLEN(Purchaser.Name)));
          IF Purchaser.FINDFIRST THEN BEGIN
            DataTransl.RESET;
            DataTransl.INIT;
            DataTransl."Translate to No." := Purchaser.Code;
            EXIT(TRUE);
          END ELSE BEGIN
            Purchaser.SETRANGE(Name);
            Purchaser.SETRANGE(Code,COPYSTR(ContactName,1,MAXSTRLEN(Purchaser.Code)));
            IF Purchaser.FINDFIRST THEN BEGIN
              DataTransl.RESET;
              DataTransl.INIT;
              DataTransl."Translate to No." := Purchaser.Code;
              EXIT(TRUE);
            END;
          END;
        END;

        IF NOT Field.GET(Template."No.",Field.Type::Header,'OURCONTACT') THEN BEGIN
          DataTransl.INIT;
          DataTransl."Translate to No." := '';
          EXIT(TRUE);
        END;

        CASE TRUE OF
          (ContactName = '') AND (Vendor."Purchaser Code" <> ''):
            CASE STRMENU(STRSUBSTNO(Text002,Vendor."Purchaser Code"),1) OF
              1:
                Selection := Selection::SelectPurchaser;
              2:
                Selection := Selection::UseVendorPurchCode;
              3:
                Selection := Selection::AlwaysUseVendorPurchCode;
              4:
                Selection := Selection::ShowTranslation;
              ELSE
                Selection := Selection::" ";
            END;

          Vendor."Purchaser Code" <> '':
            CASE STRMENU(STRSUBSTNO(Text001,ContactName,Vendor."Purchaser Code"),1) OF
              1:
                Selection := Selection::SelectPurchaser;
              2:
                Selection := Selection::ShowTranslation;
              3:
                Selection := Selection::UseVendorPurchCode;
              4:
                Selection := Selection::AlwaysUseVendorPurchCode;
              ELSE
                Selection := Selection::" ";
            END;

          ELSE BEGIN
            CASE STRMENU(Text008) OF
              1:
                Selection := Selection::SelectPurchaser;
              2:
                BEGIN
                  PAGE.RUNMODAL(PAGE::"Vendor Card",Vendor);
                  COMMIT;
                  Vendor.GET(VendorNo);
                  IF Vendor."Purchaser Code" <> '' THEN
                    Selection := Selection::AlwaysUseVendorPurchCode
                  ELSE
                    Selection := 99;
                END;
              3:
                Selection := Selection::ShowTranslation;
              ELSE
                Selection := Selection::" ";
            END;
          END;
        END;

        CASE Selection OF
          Selection::" ":
            EXIT(FALSE);

          Selection::ShowTranslation:
            BEGIN
              DataTransl.SETRANGE("Translate From");
              DataTransl.INIT;
              DataTransl."Template No." := Template."No.";
              DataTransl.Type := Field.Type::Header;
              DataTransl."Field Code" := 'OURCONTACT';
              DataTransl."Translate From" := UPPERCASE(ContactName);
              DataTransl."Translate to Type" := DataTransl."Translate to Type"::"Salesperson/Purchaser";
              IF DataTransl.INSERT(TRUE) THEN;
              COMMIT;
              PAGE.RUNMODAL(0,DataTransl);
            END;

          Selection::UseVendorPurchCode:
            BEGIN
              DataTransl.RESET;
              DataTransl.INIT;
              DataTransl."Translate to No." := Vendor."Purchaser Code";
              EXIT(TRUE);
            END;

          Selection::AlwaysUseVendorPurchCode:
            BEGIN
              Template."Purch. Use Vend. Purch. Code" := TRUE;
              Template.MODIFY;
              COMMIT;
            END;

          Selection::SelectPurchaser:
            BEGIN
              Purchaser.RESET;
              IF PAGE.RUNMODAL(0,Purchaser) = ACTION::LookupOK THEN BEGIN
                DataTransl.RESET;
                DataTransl.INIT;
                DataTransl."Translate to No." := Purchaser.Code;
                EXIT(TRUE);
              END;
            END;
        END;
      END;

      CLEAR(DataTransl);
      EXIT(FALSE);
    END;

    PROCEDURE CreatePurchHeader@1000000001(VAR Document@1000000003 : Record 6085590;VAR PurchHeader@1000000002 : Record 38;IsInvoice@1000000001 : Boolean;Alias@1000000000 : Record 6085584);
    VAR
      GLSetup@1000000006 : Record 98;
      DCSetup@1000000007 : Record 6085573;
      Template@1000000004 : Record 6085579;
      Field@1000000005 : Record 6085580;
      PurchHeaderDCInfo@6085574 : Record 6085767;
      PurchDocMatch@6085576 : Record 6085700;
      RelPurchHeader@6085579 : Record 38;
      PurchRcptHeader@6085578 : Record 120;
      PurchRetShptHeader@6085577 : Record 6650;
      DimValueCode@161024012 : Code[20];
      ApprovalFlowCode@6085575 : Code[20];
      PurchHeader2@1100528201 : Record 38;
      OurOrderNo@1100528200 : Code[20];
      JobNo@1100528204 : Code[20];
      BankAccountNo@1100528205 : Code[30];
      VATProdPostingGroup@1100528203 : Code[10];
      DepartmentHeader@1100528202 : Code[20];
      OldDimID@6085573 : Integer;
      CurrencyCode@1160040012 : Code[20];
      ServiceOrder@1100525000 : Code[20];
    BEGIN
      // *********************************************************************************************************************************
      // CREATE PURCHASE HEADER
      // *********************************************************************************************************************************
      GLSetup.GET;
      DCSetup.GET;

      Template.GET(Document."Template No.");
      PurchHeader.SetHideValidationDialog(TRUE);
      PurchHeader.INIT;
      PurchHeader."No. Series" := CaptureMgt.GetText(Document,Field.Type::Header,'NOSERIES',0);
      IF IsInvoice THEN
        PurchHeader.VALIDATE("Document Type",PurchHeader."Document Type"::Invoice)
      ELSE
        PurchHeader.VALIDATE("Document Type",PurchHeader."Document Type"::"Credit Memo");
      PurchHeader.INSERT(TRUE);

      //**4PS.sn C023262
      OurOrderNo := PurchDocMgt.GetOurDocumentNo(Document);
      IF OurOrderNo <> '' THEN BEGIN
        IF PurchHeader2.GET(PurchHeader2."Document Type"::Order, OurOrderNo) THEN
          PurchHeader.VALIDATE("Related Purch. Order No.", OurOrderNo);
        PurchHeader.SetHideValidationDialog(TRUE);
      END;
      //**4PS.en C023262

      PurchHeader.VALIDATE("Buy-from Vendor No.",Document.GetSourceID);

      TransferDates(PurchHeader,Template,Document,IsInvoice);
      //**4PS.sn
      IF Template."Posting Date" = Template."Posting Date"::"Use Document Date (recognized on document)" THEN
        IF Template."Use E-mail Date for Doc. Date" AND (Document."E-mail Date" <> 0DT) THEN
          PurchHeader.VALIDATE("Posting Date", DT2DATE(Document."E-mail Date"));

      OurOrderNo := PurchDocMgt.GetOurDocumentNo(Document);
      IF OurOrderNo <> '' THEN BEGIN
        IF PurchHeader2.GET(PurchHeader2."Document Type"::Order, OurOrderNo) THEN
          PurchHeader.VALIDATE("Payment Terms Code", PurchHeader2."Payment Terms Code");
      END;

      IF Template."Use E-mail Date for Doc. Date" AND (Document."E-mail Date" <> 0DT) THEN
        PurchHeader.VALIDATE("Document Date", DT2DATE(Document."E-mail Date"));
      //**4PS.en

      IF IsInvoice THEN
        PurchHeader.VALIDATE("Vendor Invoice No.",PurchDocMgt.GetDocumentNo(Document))
      ELSE
        PurchHeader.VALIDATE("Vendor Cr. Memo No.",PurchDocMgt.GetDocumentNo(Document));

      IF Alias."Translate to No." <> '' THEN
        PurchHeader.VALIDATE("Purchaser Code",Alias."Translate to No.");

      CurrencyCode := PurchDocMgt.GetCurrencyCode(Document);

      IF (CurrencyCode = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        PurchHeader.VALIDATE("Currency Code",'')
      ELSE
        PurchHeader.VALIDATE("Currency Code",CurrencyCode);

      IF PurchDocMgt.GetResponsibillityCenter(Document) <> '' THEN
        PurchHeader.VALIDATE("Responsibility Center",PurchDocMgt.GetResponsibillityCenter(Document));

      PurchHeader.VALIDATE("Prices Including VAT",Template."Prices Including VAT");

      ApprovalFlowCode := CaptureMgt.GetText(Document,Field.Type::Header,'APPROVALFLOW',0);
      IF ApprovalFlowCode = '' THEN
        ApprovalFlowCode := Template."Approval Flow Code";

      PurchHeaderDCInfo.UpdateApprovalFlowCode(PurchHeader,ApprovalFlowCode);

      // IF HEADER DIMENSIONS HAVE BEEN CONFIGURED TO BE COPIED THE DIMENSIONS FROM
      // THE FIRST DOCUMENT MATCHED WILL BE COPIED. EXISTING DIMENSIONS WILL BE DELETED
      IF (Template."Copy Matched Header Dimensions") AND
        (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"])
      THEN BEGIN
        PurchDocMatch.SETRANGE("Document No.",Document."No.");
        IF PurchDocMatch.FINDFIRST THEN BEGIN

          CASE PurchDocMatch."Purch. Doc. Type" OF
            PurchDocMatch."Purch. Doc. Type"::Receipt:
              BEGIN
                PurchRcptHeader.GET(PurchDocMatch."Purch. Doc. No.");

                IF Alias."Translate to No." = '' THEN
                  PurchHeader.VALIDATE("Purchaser Code",PurchRcptHeader."Purchaser Code");

                PurchHeader."Dimension Set ID" := PurchRcptHeader."Dimension Set ID";
                PurchHeader."Shortcut Dimension 1 Code" := PurchRcptHeader."Shortcut Dimension 1 Code";
                PurchHeader."Shortcut Dimension 2 Code" := PurchRcptHeader."Shortcut Dimension 2 Code";
              END;

            PurchDocMatch."Purch. Doc. Type"::"Return Shipment":
              BEGIN
                PurchRetShptHeader.GET(PurchDocMatch."Purch. Doc. No.");

                IF Alias."Translate to No." = '' THEN
                  PurchHeader.VALIDATE("Purchaser Code",PurchRetShptHeader."Purchaser Code");

                PurchHeader."Dimension Set ID" := PurchRetShptHeader."Dimension Set ID";
                PurchHeader."Shortcut Dimension 1 Code" := PurchRetShptHeader."Shortcut Dimension 1 Code";
                PurchHeader."Shortcut Dimension 2 Code" := PurchRetShptHeader."Shortcut Dimension 2 Code";
              END;

            PurchDocMatch."Purch. Doc. Type"::Order,PurchDocMatch."Purch. Doc. Type"::"Return Order":
              BEGIN
                IF PurchDocMatch."Purch. Doc. Type" = PurchDocMatch."Purch. Doc. Type"::Order THEN
                  RelPurchHeader.GET(RelPurchHeader."Document Type"::Order,PurchDocMatch."Purch. Doc. No.")
                ELSE
                  RelPurchHeader.GET(RelPurchHeader."Document Type"::"Return Order",PurchDocMatch."Purch. Doc. No.");

                IF Alias."Translate to No." = '' THEN
                  PurchHeader.VALIDATE("Purchaser Code",RelPurchHeader."Purchaser Code");

                PurchHeader."Dimension Set ID" := RelPurchHeader."Dimension Set ID";
                PurchHeader."Shortcut Dimension 1 Code" := RelPurchHeader."Shortcut Dimension 1 Code";
                PurchHeader."Shortcut Dimension 2 Code" := RelPurchHeader."Shortcut Dimension 2 Code";
              END;
          END;
        END;
      END;
      TransferPurchHeader(PurchHeader,Document);

      //**4PS.sn
      IF Document."Invoice Lines Input" <> PurchHeader."Invoice Lines Input" THEN
        PurchHeader.VALIDATE("Invoice Lines Input", Document."Invoice Lines Input");

      JobNo := PurchDocMgt.GetJobNoHeader(Document);
      IF JobNo <> '' THEN
        PurchHeader.VALIDATE("Job No.", JobNo);

      // CALL C020511 sn
      IF JobNo = '' THEN BEGIN
        ServiceOrder := PurchDocMgt.GetServOrderHeader(Document);
        IF ServiceOrder <> '' THEN
          PurchHeader.VALIDATE("Service Order No.", ServiceOrder);
      END;
      // CALL C020511 en

      VATProdPostingGroup := PurchDocMgt.GetVATProdPostGroupHeader(Document);
      IF VATProdPostingGroup <> '' THEN
        PurchHeader.VALIDATE("VAT Prod. Posting Group", VATProdPostingGroup);


      PurchHeader."Amounts only" := Document."Amounts Only"; //CALL C019886

      PurchHeader.VALIDATE("Amount excl. VAT", PurchDocMgt.GetAmountExclVAT(Document));
      PurchHeader.VALIDATE("VAT Amount", PurchDocMgt.GetVATAmount(Document));
      PurchHeader.VALIDATE("Amount incl. VAT", PurchDocMgt.GetAmountInclVAT(Document));

      PurchHeader."Ext. Document ID" := Document."No.";

      //PurchHeader."Amounts only" := Document."Amounts Only";  //CALL C019886 old

      DepartmentHeader := PurchDocMgt.GetDepartmentHeader(Document);
      IF (DepartmentHeader <> '') AND (DepartmentHeader <> PurchHeader."Shortcut Dimension 1 Code") THEN
        PurchHeader.VALIDATE("Shortcut Dimension 1 Code", DepartmentHeader);

      PurchHeader."Related Purch. Order No." := PurchDocMgt.GetOurDocumentNo(Document);
      BankAccountNo := PurchDocMgt.GetBankAccountNo(Document);
      BankAccountNo := DELCHR(BankAccountNo, '=', ' .,');
      IF STRLEN(BankAccountNo) <= STRLEN(PurchHeader."Bank Account No.") THEN
      //PurchHeader."Bank Account No." := BankAccountNo;  //**4PS call C021873 old
        HandleBankAccountNo(PurchHeader, BankAccountNo);  //**4PS call C021873 new

      //**4PS.en

      PurchHeader.MODIFY(TRUE);

      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETRANGE("Data Type",Field."Data Type"::Lookup);
      Field.SETRANGE("Source Table No.",DATABASE::"Dimension Value");
      IF Field.FINDSET THEN BEGIN
        OldDimID := PurchHeader."Dimension Set ID";
        REPEAT
          DimValueCode := CaptureMgt.GetValueAsText(Document."No.",0,Field);
          IF DimValueCode <> '' THEN BEGIN
            CASE TRUE OF
              Field.Code = GLSetup."Global Dimension 1 Code":
                PurchHeader.VALIDATE("Shortcut Dimension 1 Code",DimValueCode);
              Field.Code = GLSetup."Global Dimension 2 Code":
                PurchHeader.VALIDATE("Shortcut Dimension 2 Code",DimValueCode);
              ELSE
                PurchHeader."Dimension Set ID" := UpdateDimension(PurchHeader."Dimension Set ID",Field.Code,DimValueCode);
            END;
          END;
        UNTIL Field.NEXT = 0;
        IF OldDimID <> PurchHeader."Dimension Set ID" THEN
          PurchHeader.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateWithoutMatch@1000000000(VAR Document@1000000012 : Record 6085590;VAR PurchHeader@1000000022 : Record 38;IsInvoice@1000000004 : Boolean;Alias@1000000019 : Record 6085584);
    VAR
      Template@1000000024 : Record 6085579;
      DocumentLine@1000000023 : TEMPORARY Record 6085596;
      PurchLine@1000000021 : Record 39;
      Field@1000000020 : Record 6085580;
      TemplField2@161024016 : Record 6085580;
      LineTrans@1000000018 : Record 6085584;
      Item@161024017 : Record 27;
      ItemVendor@161024019 : Record 99;
      ItemCrossRef@161024018 : Record 5717;
      OurContact@1000000016 : Text[250];
      PostingDesc@1000000015 : Text[250];
      LineDescription@1000000014 : Text[250];
      TextLineArray@161024012 : ARRAY [50] OF Text[1024];
      IsValid@1000000006 : Boolean;
      AccountRequired@1000000005 : Boolean;
      NextLineNo@1000000003 : Integer;
      No@1000000002 : Code[50];
      NoOfTextLines@161024013 : Integer;
      Quantity@1000000007 : Decimal;
      UnitCost@1000000001 : Decimal;
      LineAmount@1000000000 : Decimal;
      LineSum@1000000025 : Decimal;
      TotalAmountExclVAT@1000000011 : Decimal;
      TotalVATAmount@1000000009 : Decimal;
      Amount@161024015 : Decimal;
      SkipStep2@1000000008 : Boolean;
      GLSetup@1100528206 : Record 98;
      DataTranslDim@1100528205 : Record 6085586;
      CostObject@1100528204 : Code[20];
      DepartmentLine@1100528203 : Code[20];
      JobNo@1100528202 : Code[20];
      VATProdPostingGroup@1100528201 : Code[10];
      UnitOfMeasure@1100528200 : Code[10];
      i@161024014 : Integer;
      ServiceOrder@1100525000 : Code[20];
    BEGIN
      CreatePurchHeader(Document,PurchHeader,IsInvoice,Alias);

      Template.GET(Document."Template No.");

      PostingDesc := PurchDocMgt.GetPostingDescription(Document);

      // *********************************************************************************************************************************
      // BUILD TEMP. TABLE TO HOLD LINES. THIS IS DONE TO GET TOTAL NUMBER OF LINES
      // *********************************************************************************************************************************
      Document.BuildTempLinesTable(DocumentLine);

      // *********************************************************************************************************************************
      // FILTER THE LINE TRANSLATION TABLE FOR THIS TEMPLATE
      // *********************************************************************************************************************************
      LineTrans.SETRANGE("Template No.",Document."Template No.");
      LineTrans.SETFILTER("Translate to Type",'>%1',LineTrans."Translate to Type"::" ");

      // *********************************************************************************************************************************
      // IF LINES HAVE BEEN RECOGNIZED THEN START CREATING EQUIVALENT PURCHASE LINES
      // *********************************************************************************************************************************
      //IF DocumentLine.FINDSET THEN BEGIN //**4PS.o
      //**4PS.sn
      // Constructie maken voor laatst gevonden regelnrs.
      IF DocumentLine.FINDSET AND (PurchHeader."Invoice Lines Input") THEN BEGIN
      //**4PS.en
        REPEAT
          No := PurchDocMgt.GetLineAccountNo(Document,DocumentLine."Line No.");
          Quantity := PurchDocMgt.GetLineQuantity(Document,DocumentLine."Line No.");
          UnitCost := PurchDocMgt.GetLineUnitCost(Document,DocumentLine."Line No.");
          LineAmount := PurchDocMgt.GetLineAmount(Document,DocumentLine."Line No.");

          //**4PS.sn
          IF LineAmount = 0 THEN
            LineAmount := UnitCost;

          CostObject := PurchDocMgt.GetCostObject(Document, DocumentLine."Line No.");
          DepartmentLine := PurchDocMgt.GetDepartmentLine(Document, DocumentLine."Line No.");
          JobNo := PurchDocMgt.GetJobNoLine(Document, DocumentLine."Line No.");
          IF JobNo = '' THEN
            JobNo := PurchHeader."Job No.";

          // CALL C020511 sn
          IF JobNo = '' THEN BEGIN
            ServiceOrder := PurchDocMgt.GetServOrderLine(Document, DocumentLine."Line No.");
            IF ServiceOrder = '' THEN
              ServiceOrder := PurchHeader."Service Order No.";
          END;
          // CALL C020511 en

          //**4PS.en

          LineSum := LineSum + LineAmount;

          // If either Quantity, Unit Cost or Line Amount has a value, then an Account No. for this line is required
          // AccountRequired := (Quantity <> 0) OR (UnitCost <> 0) OR (LineAmount <> 0);
          //**4PS.sn
          AccountRequired := ((Quantity <> 0) OR (UnitCost <> 0) OR (LineAmount <> 0)) AND (CostObject = '');
          //**4PS.en

          NextLineNo := NextLineNo + 10000;
          PurchLine.INIT;
          PurchLine."Document Type" := PurchHeader."Document Type";
          PurchLine.VALIDATE("Document No.",PurchHeader."No.");
          PurchLine."Line No." := NextLineNo;
          PurchLine.INSERT(TRUE);

          //**4PS.sn
          IF (JobNo <> '') AND (PurchLine."Job No." <> JobNo) THEN
            PurchLine.VALIDATE("Job No.", JobNo);

          // CALL C020511 sn
          IF PurchLine."Job No." = '' THEN BEGIN
            IF (ServiceOrder <> '') AND (PurchLine."Service Order No." <> ServiceOrder) THEN
              PurchLine.VALIDATE("Service Order No.", ServiceOrder);
          END;
          // CALL C020511 en

          IF (DepartmentLine <> '') AND (DepartmentLine <> PurchLine."Shortcut Dimension 1 Code") THEN
            PurchLine.VALIDATE("Shortcut Dimension 1 Code", DepartmentLine);
          //**4PS.en

          IF AccountRequired THEN BEGIN
            // Filter the Line Translation table to find the appropriate account no.
            IF No <> '' THEN BEGIN
              LineTrans.SETRANGE(Type,LineTrans.Type::"Line Field");
              LineTrans.SETRANGE("Field Code",'NO');
              LineTrans.SETRANGE("Translate From",COPYSTR(No,1,MAXSTRLEN(LineTrans."Translate From")));
              IF NOT LineTrans.FINDFIRST THEN BEGIN
                LineTrans.INIT;
                // Look for the item by searcing the Vendor Item No. on the item card
                Item.SETCURRENTKEY("Vendor Item No.","Vendor No.");
                Item.SETRANGE("Vendor Item No.",COPYSTR(No,1,MAXSTRLEN(Item."Vendor Item No.")));
                Item.SETRANGE("Vendor No.",Document.GetSourceID);
                IF Item.FINDFIRST THEN BEGIN
                  LineTrans."Translate to Type" := LineTrans."Translate to Type"::Item;
                  LineTrans."Translate to No." := Item."No.";
                  LineTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
                END ELSE BEGIN
                  ItemCrossRef.SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.");
                  ItemCrossRef.SETRANGE("Cross-Reference No.",COPYSTR(No,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
                  ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Vendor);
                  ItemCrossRef.SETRANGE("Cross-Reference Type No.",Document.GetSourceID);
                  IF ItemCrossRef.FINDFIRST THEN BEGIN
                    LineTrans."Translate to Type" := LineTrans."Translate to Type"::Item;
                    LineTrans."Translate to No." := ItemCrossRef."Item No.";
                    LineTrans."Translate to UOM Code" := ItemCrossRef."Unit of Measure";
                    LineTrans."Translate to Variant Code" := ItemCrossRef."Variant Code";
                  END ELSE BEGIN
                    ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
                    ItemVendor.SETRANGE("Vendor No.",Document.GetSourceID);
                    ItemVendor.SETRANGE("Vendor Item No.",COPYSTR(No,1,MAXSTRLEN(ItemVendor."Vendor Item No.")));
                    IF ItemVendor.FINDFIRST THEN BEGIN
                      LineTrans."Translate to Type" := LineTrans."Translate to Type"::Item;
                      LineTrans."Translate to No." := ItemVendor."Item No.";
                      LineTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
                      LineTrans."Translate to Variant Code" := ItemVendor."Variant Code";
                    END ELSE BEGIN
                      IF Template."Use Vendor/Customer Item Nos." AND (Item.GET(No)) THEN BEGIN
                        LineTrans."Translate to Type" := LineTrans."Translate to Type"::Item;
                        LineTrans."Translate to No." := Item."No.";
                        LineTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
                      END ELSE
                    //ERROR(Text004,LineTrans.FIELDCAPTION("Translate From"),No); //**4PS.o
                    //**4PS.sn
                    BEGIN
                      LineTrans."Translate to Type" := LineTrans."Translate to Type"::"G/L Account";
                      //IF JobNo = '' THEN
                      IF (JobNo = '') AND (ServiceOrder = '') THEN // CALL C020511
                        LineTrans."Translate to No." := No;
                    END;
                    END;
                    //**4PS.en
                  END;
                END;
              END;
            END ELSE BEGIN
              LineTrans.SETRANGE(Type,LineTrans.Type::"Header Field");
              LineTrans.SETRANGE("Field Code",'AMOUNTEXCLVAT');
              LineTrans.SETRANGE("Translate From");
              IF NOT LineTrans.FINDFIRST THEN BEGIN
                TemplField2.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT');
                ERROR(Text005,TemplField2."Field Name");
              END;
            END;

            PurchLine.VALIDATE(Type,LineTrans."Translate to Type");
            IF LineTrans."Translate to No." <> '' THEN //**4PS.n
              PurchLine.VALIDATE("No.",LineTrans."Translate to No.");
            IF LineTrans."Transl. to VAT Prod. Post.Grp." <> '' THEN
              PurchLine.VALIDATE("VAT Prod. Posting Group",LineTrans."Transl. to VAT Prod. Post.Grp.");
            IF LineTrans."Translate to Variant Code" <> '' THEN
              PurchLine.VALIDATE("Variant Code",LineTrans."Translate to Variant Code");
            IF LineTrans."Translate to UOM Code" <> '' THEN //**4PS.n
              PurchLine.VALIDATE("Unit of Measure Code",LineTrans."Translate to UOM Code");
            //**4PS.sn
          //Call C021334 s Former actions have probably overwritten the Department on this line.
            IF (DepartmentLine <> '') AND (DepartmentLine <> PurchLine."Shortcut Dimension 1 Code") THEN
              PurchLine.VALIDATE("Shortcut Dimension 1 Code", DepartmentLine);
          //Call C021334 e
            GLSetup.GET;
            DataTranslDim.SETRANGE("Template No.", LineTrans."Template No.");
            DataTranslDim.SETRANGE("Field Type", LineTrans.Type);
            DataTranslDim.SETRANGE("Field Code", LineTrans."Field Code");
            DataTranslDim.SETRANGE("Translate From", LineTrans."Translate From");
            DataTranslDim.SETRANGE("Dimension Code", GLSetup."Shortcut Dimension 2 Code");
            IF DataTranslDim.FINDFIRST THEN
              PurchLine.VALIDATE("Shortcut Dimension 2 Code", DataTranslDim."Dimension Value Code");

            IF (PurchHeader."Shortcut Dimension 1 Code" <> '') AND (PurchLine."Shortcut Dimension 1 Code" = '') THEN
              PurchLine.VALIDATE("Shortcut Dimension 1 Code", PurchHeader."Shortcut Dimension 1 Code");
            //**4PS.en
          END ELSE
            //**4PS.sn
            IF CostObject <> '' THEN
               PurchLine.VALIDATE("Shortcut Dimension 2 Code", CostObject)
            ELSE
            //**4PS.en
              LineTrans."Translate to (Text)" := '';

          LineDescription := PurchDocMgt.GetLineDescription(Document,DocumentLine."Line No.");

          // Determine the description
          CASE TRUE OF
            LineTrans."Translate to (Text)" <> '':
              PurchLine.VALIDATE(Description,COPYSTR(LineTrans."Translate to (Text)",1,MAXSTRLEN(PurchLine.Description)));
            LineDescription <> '':
              PurchLine.VALIDATE(Description,COPYSTR(LineDescription,1,MAXSTRLEN(PurchLine.Description)));
            PostingDesc <> '':
              PurchLine.VALIDATE(Description,COPYSTR(PostingDesc,1,MAXSTRLEN(PurchLine.Description)));
          END;

          // Fill-out quantity, unit cost and line amount if present
          //IF Quantity <> PurchLine.Quantity THEN //**4PS.o
          //**4PS.sn
          IF (Quantity <> PurchLine.Quantity) AND NOT PurchHeader."Amounts only" THEN
          //**4PS.en
            PurchLine.VALIDATE(Quantity,Quantity);

          //**4PS.sn
          UnitOfMeasure := PurchDocMgt.GetUnitOfMeasure(Document, DocumentLine."Line No.");
          IF UnitOfMeasure <> '' THEN
            PurchLine.VALIDATE("Unit of Measure Code", UnitOfMeasure);
          //**4PS.en

          IF PurchLine."Direct Unit Cost" <> UnitCost THEN
            PurchLine.VALIDATE("Direct Unit Cost",UnitCost);

          // IF PurchLine."Line Amount" <> LineAmount THEN //**4PS.o 4PS Allways validates Line Amount
          IF PurchLine.Type <> PurchLine.Type::" " THEN //**4PS.n
            PurchLine.VALIDATE("Line Amount",LineAmount);

          TransferPurchLine(PurchLine,Document,DocumentLine."Line No.");

          //**4PS.sn
          VATProdPostingGroup := PurchDocMgt.GetVATProdPostGroupLine(Document, DocumentLine."Line No.");
          IF VATProdPostingGroup <> '' THEN
            PurchLine.VALIDATE("VAT Prod. Posting Group", VATProdPostingGroup);
          //**4PS.en

          PurchLine.MODIFY(TRUE);

          //IF AccountRequired THEN
          //**4PS.sn
          IF AccountRequired OR (CostObject <> '') OR (DepartmentLine <> '') THEN
          //**4PS.en
            TransferLineDim(Document,DocumentLine."Line No.",PurchLine,LineTrans);
        UNTIL DocumentLine.NEXT = 0;

        IF LineSum <> PurchDocMgt.GetLineTotalHeaderAmount(Document) THEN
          CreateAmountDifferenceLine(Document,PurchHeader,PurchDocMgt.GetLineTotalHeaderAmount(Document) - LineSum,PostingDesc);

        CreateHeaderAmounts(Document,PurchHeader,TRUE,PostingDesc);
      END ELSE BEGIN
        NoOfTextLines := CreateTextArray(PostingDesc,MAXSTRLEN(PurchLine.Description),TextLineArray);
        IF NoOfTextLines > 0 THEN
          PostingDesc := TextLineArray[1];

        //Call 024574 sn
        IF PostingDesc = '' THEN BEGIN
          IF (PurchHeader."Job No." <> '') OR (PurchHeader."Service Order No." <> '') THEN BEGIN
            IF PurchHeader."Shortcut Dimension 2 Code" <> '' THEN BEGIN
              PostingDesc := 'FromCostObject';
            END;
          END;
        END;
        //Call 024574 en

        CreateHeaderAmounts(Document,PurchHeader,FALSE,PostingDesc);

        FOR i := 2 TO NoOfTextLines DO
          CreateTextLine(PurchHeader,TextLineArray[i]);
      END;

      IF AmountsTransfered(PurchHeader) THEN BEGIN
        // Calculate total amounts on the newly created Invoice/Cr.Memo and check the amounts against the recognized amounts
        PurchDocMgt.GetTotalAmounts(PurchHeader,TotalAmountExclVAT,TotalVATAmount);
        IF NOT ((PurchDocMgt.AmountsWithinTolerance(Template,PurchDocMgt.GetAllAmountsExclVAT(Document),TotalAmountExclVAT)) AND
          PurchDocMgt.AmountsWithinTolerance(Template,PurchDocMgt.GetVATAmount(Document),TotalVATAmount))
        THEN BEGIN
          SkipStep2 := TRUE;
          IF IsInvoice THEN BEGIN
            IF Template."Purch. Inv. Reg. Step 2" <> Template."Purch. Inv. Reg. Step 2"::" " THEN
              MESSAGE(Text011)
            ELSE
              MESSAGE(Text013)
          END ELSE BEGIN
            IF Template."Purch. Cr.Memo Reg. Step 2" <> Template."Purch. Cr.Memo Reg. Step 2"::" " THEN
              MESSAGE(Text012)
            ELSE
              MESSAGE(Text014)
          END;
        END;
      END;

      Document."Amount Excl. VAT" := PurchDocMgt.GetAllAmountsExclVAT(Document);
      Document."Amount Incl. VAT" := PurchDocMgt.GetAmountInclVAT(Document);
      StoreDocReference(Document,PurchHeader);

      IF Template."Codeunit ID: After Step 1" <> 0 THEN
        CODEUNIT.RUN(Template."Codeunit ID: After Step 1",Document);

      IF NOT SkipStep2 THEN BEGIN
        PerformStep2(Template,PurchHeader);
        IF Template."Codeunit ID: After Step 2" <> 0 THEN
          CODEUNIT.RUN(Template."Codeunit ID: After Step 2",Document);
      END;
    END;

    PROCEDURE CreateWithMatch@1000000003(VAR Document@1000000012 : Record 6085590;VAR PurchHeader@1000000022 : Record 38;IsInvoice@1000000004 : Boolean;Alias@1000000007 : Record 6085584);
    VAR
      Template@1000000003 : Record 6085579;
      Field@1000000013 : Record 6085580;
      PurchDocMatch@1000000000 : Record 6085700;
      PurchLine@1000000002 : Record 39;
      PurchLine2@1160040001 : Record 39;
      PurchOrderLine@1160040002 : Record 39;
      PurchRcptLine@1000000009 : Record 121;
      PurchRcptLine2@161024017 : Record 121;
      ReturnShptLine@1000000008 : Record 6651;
      ReturnShptLine2@161024016 : Record 6651;
      DimMgt@1000000014 : Codeunit 408;
      PurchGetReceipt@161024014 : Codeunit 74;
      PurchGetReturnShpmt@161024015 : Codeunit 6648;
      PurchGetOrder@1160040003 : Codeunit 6085762;
      LineSum@1000000006 : Decimal;
      TotalAmountExclVAT@1000000018 : Decimal;
      TotalVATAmount@1000000016 : Decimal;
      NextLineNo@161024012 : Integer;
      AmountToMatch@161024013 : Decimal;
      SkipStep2@1000000015 : Boolean;
      PrevDocNo@1160040000 : Code[20];
      Currency2@1100525001 : Record 4;
      CurrExchRate@1100525000 : Record 330;
    BEGIN
      Template.GET(Document."Template No.");

      CreatePurchHeader(Document,PurchHeader,IsInvoice,Alias);

      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.FINDSET;
      REPEAT
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        IF PurchLine.FINDLAST THEN
          NextLineNo := PurchLine."Line No." + 10000
        ELSE
          NextLineNo := 10000;

        PurchLine."Document Type" := PurchHeader."Document Type";
        PurchLine."Document No." := PurchHeader."No.";

        CASE PurchDocMatch."Purch. Doc. Type" OF
          PurchDocMatch."Purch. Doc. Type"::Order:
            BEGIN
              IF PrevDocNo <> PurchDocMatch."Purch. Doc. No." THEN BEGIN
                NextLineNo := NextLineNo + 10000;
                PrevDocNo := PurchDocMatch."Purch. Doc. No.";
              END;

              PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,PurchDocMatch."Purch. Doc. No.",PurchDocMatch."Purch. Line No.");
              PurchGetOrder.InsertInvLineFromOrderLine(PurchOrderLine,PurchLine);

              PurchLine.GET(PurchLine."Document Type",PurchLine."Document No.",NextLineNo);

              PurchLine."Receipt No." := '';

              PurchLine.VALIDATE(Quantity,PurchDocMatch.Quantity);
              PurchLine.VALIDATE("Direct Unit Cost",PurchDocMatch."Direct Unit Cost");
              PurchLine.VALIDATE("Line Discount %",PurchDocMatch."Line Discount %");

              PurchLine."Receipt No." := 'ORDER';

              PurchLine.MODIFY(TRUE);
            END;

          PurchDocMatch."Purch. Doc. Type"::Receipt:
            BEGIN
              IF PurchLine."Receipt No." <> PurchDocMatch."Purch. Doc. No." THEN
                NextLineNo := NextLineNo + 10000;

              PurchRcptLine.GET(PurchDocMatch."Purch. Doc. No.",PurchDocMatch."Purch. Line No.");
              PurchRcptLine2 := PurchRcptLine;
              PurchRcptLine2.InsertInvLineFromRcptLine(PurchLine);

              PurchLine.GET(PurchLine."Document Type",PurchLine."Document No.",NextLineNo);

              PurchLine.VALIDATE(Quantity,PurchDocMatch.Quantity);
              PurchLine.VALIDATE("Direct Unit Cost",PurchDocMatch."Direct Unit Cost");

              //**4PS.sn CALL C017698
              PurchLine.VALIDATE("Line Discount %");
              IF PurchLine."Item No." + PurchLine."Basic Item" + PurchLine."Trade Item" = '' THEN
                IF PurchLine."Discount % (Item)" = 0 THEN BEGIN
                  Currency2.InitRoundingPrecision;
                  IF PurchHeader."Currency Code" <> '' THEN
                    PurchLine."Unit Price (LCY)" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                      1, PurchHeader."Job No.", PurchLine.GetDate, PurchLine."Currency Code",
                      PurchLine."Direct Unit Cost", PurchHeader."Currency Factor",FALSE),
                      Currency2."Amount Rounding Precision")
                  ELSE
                    PurchLine."Unit Price (LCY)" := PurchLine."Direct Unit Cost";
                END;

              IF PurchHeader."Amounts only" THEN
                InitAmntToReceiveLocal(PurchLine);
              //**4PS.en

              PurchLine.VALIDATE("Line Discount %",PurchDocMatch."Line Discount %");
              PurchLine.MODIFY(TRUE);
              IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN
                PurchGetReceipt.GetItemChargeAssgnt(PurchRcptLine,PurchDocMatch.Quantity);
          END;

          PurchDocMatch."Purch. Doc. Type"::"Return Shipment":
            BEGIN
              IF PurchLine."Return Shipment No." <> PurchDocMatch."Purch. Doc. No." THEN
                NextLineNo := NextLineNo + 10000;

              ReturnShptLine.GET(PurchDocMatch."Purch. Doc. No.",PurchDocMatch."Purch. Line No.");
              ReturnShptLine2 := ReturnShptLine;
              ReturnShptLine2.InsertInvLineFromRetShptLine(PurchLine);

              PurchLine.GET(PurchLine."Document Type",PurchLine."Document No.",NextLineNo);

              PurchLine.VALIDATE(Quantity,PurchDocMatch.Quantity);
              PurchLine.VALIDATE("Direct Unit Cost",PurchDocMatch."Direct Unit Cost");
              PurchLine.VALIDATE("Line Discount %",PurchDocMatch."Line Discount %");
              PurchLine.MODIFY(TRUE);

              IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN
                PurchGetReturnShpmt.GetItemChargeAssgnt(ReturnShptLine,PurchDocMatch.Quantity);
            END;
          END;

        LineSum := LineSum + PurchLine."Line Amount";
      UNTIL PurchDocMatch.NEXT = 0;

      AmountToMatch := PurchDocMgt.GetAmountToMatch(Document);
      IF AmountToMatch <> LineSum THEN BEGIN
        Template.TESTFIELD("Variance Posting Account");
        CreateMatchVarianceLine(PurchHeader,Document,AmountToMatch - LineSum,PurchHeader."Pay-to Name");
        LineSum := AmountToMatch;
      END;

      CreateHeaderAmounts(Document,PurchHeader,TRUE,'');

      IF AmountsTransfered(PurchHeader) THEN BEGIN
        IF NOT PurchDocMgt.AmountsWithinTolerance(Template,LineSum,PurchDocMgt.GetLineTotalHeaderAmount(Document)) THEN BEGIN
          CreateAmountDifferenceLine(Document,PurchHeader,PurchDocMgt.GetLineTotalHeaderAmount(Document) - LineSum,
            PurchDocMgt.GetPostingDescription(Document));
          SkipStep2 := TRUE;
          IF Template."Purch. Inv. Reg. Step 2" <> Template."Purch. Inv. Reg. Step 2"::" " THEN
            MESSAGE(Text009)
          ELSE
            MESSAGE(Text010);
        END;

        // Calculate total amounts on the newly created Invoice/Cr.Memo and check the amounts against the recognized amounts
        PurchDocMgt.GetTotalAmounts(PurchHeader,TotalAmountExclVAT,TotalVATAmount);
        IF NOT ((PurchDocMgt.AmountsWithinTolerance(Template,PurchDocMgt.GetAllAmountsExclVAT(Document),TotalAmountExclVAT)) AND
          PurchDocMgt.AmountsWithinTolerance(Template,PurchDocMgt.GetVATAmount(Document),TotalVATAmount))
        THEN BEGIN
          SkipStep2 := TRUE;
          IF IsInvoice THEN BEGIN
            IF Template."Purch. Inv. Reg. Step 2" <> Template."Purch. Inv. Reg. Step 2"::" " THEN
              MESSAGE(Text011)
            ELSE
              MESSAGE(Text013)
          END ELSE BEGIN
            IF Template."Purch. Inv. Reg. Step 2" <> Template."Purch. Inv. Reg. Step 2"::" " THEN
              MESSAGE(Text012)
            ELSE
              MESSAGE(Text014)
          END;
        END;
      END;

      Document."Amount Excl. VAT" := PurchDocMgt.GetAllAmountsExclVAT(Document);
      Document."Amount Incl. VAT" := PurchDocMgt.GetAmountInclVAT(Document);
      StoreDocReference(Document,PurchHeader);

      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.DELETEALL;

      IF Template."Codeunit ID: After Step 1" <> 0 THEN
        CODEUNIT.RUN(Template."Codeunit ID: After Step 1",Document);

      IF NOT SkipStep2 THEN BEGIN
        PerformStep2(Template,PurchHeader);
        IF Template."Codeunit ID: After Step 2" <> 0 THEN
          CODEUNIT.RUN(Template."Codeunit ID: After Step 2",Document);
      END;

      COMMIT;
    END;

    PROCEDURE UpdateOrderWithMatch@161024017(VAR Document@1000000012 : Record 6085590;VAR PurchHeader@1000000022 : Record 38;OrderNo@161024018 : Code[100];IsInvoice@1000000004 : Boolean);
    VAR
      Template@1000000003 : Record 6085579;
      Field@1000000013 : Record 6085580;
      PurchDocMatch@1000000000 : Record 6085700;
      PurchLine@1000000002 : Record 39;
      VendLedgEntry@161024016 : Record 25;
      TempPurchLine@161024014 : TEMPORARY Record 39;
      ReleasePurchDoc@161024017 : Codeunit 415;
      LineSum@1000000006 : Decimal;
      TotalAmountExclVAT@1000000018 : Decimal;
      TotalVATAmount@1000000016 : Decimal;
      NextLineNo@161024012 : Integer;
      AmountToMatch@161024013 : Decimal;
      SkipStep2@1000000015 : Boolean;
      ReleaseDoc@161024015 : Boolean;
    BEGIN
      Template.GET(Document."Template No.");

      IF IsInvoice THEN
        PurchHeader.GET(PurchHeader."Document Type"::Order,OrderNo)
      ELSE
        PurchHeader.GET(PurchHeader."Document Type"::"Return Order",OrderNo);

      IF PurchHeader.Status <> PurchHeader.Status::Open THEN BEGIN
        ReleasePurchDoc.Reopen(PurchHeader);
        ReleaseDoc := TRUE;
      END;

      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("External Document No.");
      VendLedgEntry.SETRANGE("Vendor No.",PurchHeader."Pay-to Vendor No.");

      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
        IF PurchHeader."Vendor Invoice No." <> '' THEN BEGIN
          VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
          VendLedgEntry.SETRANGE("External Document No.",PurchHeader."Vendor Invoice No.");
          IF VendLedgEntry.ISEMPTY THEN
            IF NOT CONFIRM(Text019,FALSE,PurchHeader.FIELDCAPTION("Vendor Invoice No."),PurchHeader."Vendor Invoice No.",OrderNo) THEN
              ERROR('');
        END;

        PurchHeader.VALIDATE("Vendor Invoice No.",
          COPYSTR(PurchDocMgt.GetDocumentNo(Document),1,MAXSTRLEN(PurchHeader."Vendor Invoice No.")));
      END ELSE BEGIN
        IF PurchHeader."Vendor Cr. Memo No." <> '' THEN BEGIN
          VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
          VendLedgEntry.SETRANGE("External Document No.",PurchHeader."Vendor Cr. Memo No.");
          IF VendLedgEntry.ISEMPTY THEN
            IF NOT CONFIRM(Text020,FALSE,PurchHeader.FIELDCAPTION("Vendor Cr. Memo No."),PurchHeader."Vendor Cr. Memo No.",OrderNo) THEN
              ERROR('');
        END;

        PurchHeader.VALIDATE("Vendor Cr. Memo No.",
          COPYSTR(PurchDocMgt.GetDocumentNo(Document),1,MAXSTRLEN(PurchHeader."Vendor Cr. Memo No.")));
      END;

      TransferDates(PurchHeader,Template,Document,IsInvoice);

      TransferPurchHeader(PurchHeader,Document);
      PurchHeader.MODIFY(TRUE);

      PurchDocMatch.SETRANGE("Document No.",Document."No.");

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          PurchDocMatch.SETRANGE("Purch. Line No.",PurchLine."Line No.");

          IF PurchDocMatch.FINDFIRST THEN BEGIN
            IF (PurchLine."Direct Unit Cost" <> PurchDocMatch."Direct Unit Cost") OR
              (PurchLine."Line Discount %" <> PurchDocMatch."Line Discount %") OR
              (PurchLine."Qty. to Invoice" <> PurchDocMatch.Quantity) OR
              (PurchLine."Qty. to Receive" <> 0) OR
              (PurchLine."Return Qty. to Ship" <> 0)
            THEN BEGIN
              IF PurchHeader.Status = PurchHeader.Status::Released THEN BEGIN
                ReleasePurchDoc.Reopen(PurchHeader);
                PurchLine.FIND('=');
                ReleaseDoc := TRUE;
              END;
              PurchLine.SetPurchHeader(PurchHeader);
              PurchLine.VALIDATE("Direct Unit Cost",PurchDocMatch."Direct Unit Cost");
              PurchLine.VALIDATE("Line Discount %",PurchDocMatch."Line Discount %");
              IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN BEGIN
                IF PurchDocMatch."Purch. Doc. Type" = PurchDocMatch."Purch. Doc. Type"::Order THEN
                  PurchLine.VALIDATE("Qty. to Receive",PurchDocMatch.Quantity)
                ELSE
                  PurchLine.VALIDATE("Qty. to Receive",0);
              END ELSE IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN BEGIN
                IF PurchDocMatch."Purch. Doc. Type" = PurchDocMatch."Purch. Doc. Type"::"Return Order" THEN
                  PurchLine.VALIDATE("Return Qty. to Ship",PurchDocMatch.Quantity)
                ELSE
                  PurchLine.VALIDATE("Return Qty. to Ship",0);
              END;

              PurchLine.VALIDATE("Qty. to Invoice",PurchDocMatch.Quantity);
            END;
          END ELSE BEGIN
            IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
              PurchLine.VALIDATE("Qty. to Receive",0);
            PurchLine.VALIDATE("Qty. to Invoice",0);
          END;

          TransferPurchLine(PurchLine,Document,0);
          PurchLine.MODIFY(TRUE);

          IF PurchLine."Qty. to Invoice" <> 0 THEN BEGIN
            LineSum := LineSum + (PurchLine."Line Amount" / PurchLine.Quantity * PurchLine."Qty. to Invoice");
          END;
        UNTIL PurchLine.NEXT = 0;

      AmountToMatch := PurchDocMgt.GetAmountToMatch(Document);
      IF AmountToMatch <> LineSum THEN BEGIN
        Template.TESTFIELD("Variance Posting Account");
        CreateMatchVarianceLine(PurchHeader,Document,AmountToMatch - LineSum,PurchHeader."Pay-to Name");
        LineSum := AmountToMatch;
      END;

      CreateHeaderAmounts(Document,PurchHeader,TRUE,'');

      IF AmountsTransfered(PurchHeader) THEN BEGIN
        // Calculate total amounts on the newly created Invoice/Cr.Memo and check the amounts against the recognized amounts
        PurchDocMgt.GetTotalAmounts(PurchHeader,TotalAmountExclVAT,TotalVATAmount);
        IF NOT ((PurchDocMgt.AmountsWithinTolerance(Template,PurchDocMgt.GetAllAmountsExclVAT(Document),TotalAmountExclVAT)) AND
          PurchDocMgt.AmountsWithinTolerance(Template,PurchDocMgt.GetVATAmount(Document),TotalVATAmount))
        THEN BEGIN
          SkipStep2 := TRUE;
          IF IsInvoice THEN BEGIN
            IF Template."Purch. Inv. Reg. Step 2" <> Template."Purch. Inv. Reg. Step 2"::" " THEN
              MESSAGE(Text011)
            ELSE
              MESSAGE(Text013)
          END ELSE BEGIN
            IF Template."Purch. Inv. Reg. Step 2" <> Template."Purch. Inv. Reg. Step 2"::" " THEN
              MESSAGE(Text012)
            ELSE
              MESSAGE(Text014)
          END;
        END;
      END;

      IF ReleaseDoc THEN
        CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);

      Document."Amount Excl. VAT" := PurchDocMgt.GetAllAmountsExclVAT(Document);
      Document."Amount Incl. VAT" := PurchDocMgt.GetAmountInclVAT(Document);
      StoreDocReference(Document,PurchHeader);

      PurchDocMatch.RESET;
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.DELETEALL;

      IF Template."Codeunit ID: After Step 1" <> 0 THEN
        CODEUNIT.RUN(Template."Codeunit ID: After Step 1",Document);

      IF NOT SkipStep2 THEN BEGIN
        CASE TRUE OF
          (PurchHeader."Document Type" = PurchHeader."Document Type"::Order) AND (Template."Auto Receive Order Variance"):
            BEGIN
              PurchLine.SETRANGE("No.",Template."Variance Posting Account");
              PurchLine.SETFILTER("Outstanding Quantity",'<>%1',0);
              IF PurchLine.FINDFIRST THEN BEGIN
                PurchLine.SETFILTER("No.",'<>%1',Template."Variance Posting Account");
                IF PurchLine.FINDSET THEN
                  REPEAT
                    IF PurchLine."Qty. to Receive" <> 0 THEN BEGIN
                      TempPurchLine := PurchLine;
                      TempPurchLine.INSERT;
                      PurchLine.VALIDATE("Qty. to Receive",0);
                      PurchLine.MODIFY(TRUE);
                    END;
                  UNTIL PurchLine.NEXT = 0;

                COMMIT;
                PurchHeader.Receive := TRUE;
                PurchHeader.Ship := FALSE;
                PurchHeader.Invoice := FALSE;
                IF NOT CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchHeader) THEN BEGIN
                  MESSAGE(Text025,LOWERCASE(FORMAT(PurchHeader."Document Type")),PurchHeader."No.");
                  SkipStep2 := TRUE;
                END;

                IF TempPurchLine.FINDSET THEN
                  REPEAT
                    PurchLine.GET(TempPurchLine."Document Type",TempPurchLine."Document No.",TempPurchLine."Line No.");
                    PurchLine.VALIDATE("Qty. to Receive",TempPurchLine."Qty. to Receive");
                    PurchLine.MODIFY(TRUE);
                  UNTIL TempPurchLine.NEXT = 0;
                COMMIT;

              END;
            END;

          (PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order") AND (Template."Auto Ship Return Order Var."):
            BEGIN
              PurchLine.SETRANGE("No.",Template."Variance Posting Account");
              PurchLine.SETFILTER("Outstanding Quantity",'<>%1',0);
              IF PurchLine.FINDFIRST THEN BEGIN
                PurchLine.SETFILTER("No.",'<>%1',Template."Variance Posting Account");
                IF PurchLine.FINDSET THEN
                  REPEAT
                    IF PurchLine."Return Qty. to Ship" <> 0 THEN BEGIN
                      TempPurchLine := PurchLine;
                      TempPurchLine.INSERT;
                      PurchLine.VALIDATE("Return Qty. to Ship",0);
                      PurchLine.MODIFY(TRUE);
                    END;
                  UNTIL PurchLine.NEXT = 0;

                COMMIT;
                PurchHeader.Receive := FALSE;
                PurchHeader.Ship := TRUE;
                PurchHeader.Invoice := FALSE;
                IF NOT CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchHeader) THEN BEGIN
                  MESSAGE(Text025,LOWERCASE(FORMAT(PurchHeader."Document Type")),PurchHeader."No.");
                  SkipStep2 := TRUE;
                END;

                IF TempPurchLine.FINDSET THEN
                  REPEAT
                    PurchLine.GET(TempPurchLine."Document Type",TempPurchLine."Document No.",TempPurchLine."Line No.");
                    PurchLine.VALIDATE("Return Qty. to Ship",TempPurchLine."Return Qty. to Ship");
                    PurchLine.MODIFY(TRUE);
                  UNTIL TempPurchLine.NEXT = 0;
                COMMIT;
              END;
            END;
        END;

        IF NOT SkipStep2 THEN BEGIN
          PerformStep2(Template,PurchHeader);
          IF Template."Codeunit ID: After Step 2" <> 0 THEN
            CODEUNIT.RUN(Template."Codeunit ID: After Step 2",Document);
        END;
      END;

      COMMIT;
    END;

    PROCEDURE CreateAmountDifferenceLine@161024020(VAR Document@1000000002 : Record 6085590;VAR PurchHeader@1000000001 : Record 38;Amount@161024014 : Decimal;Description@1000000005 : Text[250]);
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT');
      CreatePurchLine(Document,PurchHeader,Field,Amount,Description,FALSE);
    END;

    PROCEDURE CreateMatchVarianceLine@161024016(VAR PurchHeader@1000000001 : Record 38;Document@161024012 : Record 6085590;Amount@1000000003 : Decimal;Description@1000000005 : Text[250]);
    VAR
      Template@1160040000 : Record 6085579;
      PurchLine@1000000004 : Record 39;
      NextLineNo@1000000006 : Integer;
    BEGIN
      Template.GET(Document."Template No.");
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchLine.FINDLAST THEN
        NextLineNo := PurchLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      PurchLine.INIT;
      PurchLine."Document Type" := PurchHeader."Document Type";
      PurchLine.VALIDATE("Document No.",PurchHeader."No.");
      PurchLine."Line No." := NextLineNo;
      PurchLine.INSERT(TRUE);

      //**4PS.sn
      IF PurchHeader."Job No." <> '' THEN
        PurchLine.VALIDATE("Job No.", PurchHeader."Job No.");
      //**4PS.en

      PurchLine.VALIDATE(Type,PurchLine.Type::"G/L Account");
      PurchLine.VALIDATE("No.",Template."Variance Posting Account");
      PurchLine.VALIDATE(Description,COPYSTR(Description,1,MAXSTRLEN(PurchLine.Description)));
      IF NOT PurchHeader."Amounts only" THEN //**4PS.n
        PurchLine.VALIDATE(Quantity,1);
      PurchLine.VALIDATE("Direct Unit Cost",Amount);

      TransferPurchLine(PurchLine,Document,0);
      PurchLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateHeaderAmounts@161024015(VAR Document@1000000002 : Record 6085590;VAR PurchHeader@1000000001 : Record 38;LinesRecognised@1000000007 : Boolean;Description@1000000005 : Text[250]);
    VAR
      Template@161024015 : Record 6085579;
      DataTrans@1000000000 : Record 6085584;
      Field@161024012 : Record 6085580;
      TemplField@161024014 : Record 6085580;
      Amount@161024013 : Decimal;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      //IF LinesRecognised THEN //**4PS.o
      //**4PS.sn
      IF LinesRecognised OR (NOT PurchHeader."Invoice Lines Input")THEN
      //**4PS.en
        Field.SETRANGE("Transfer Amount to Document",Field."Transfer Amount to Document"::Always)
      ELSE
        Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ");

      TemplField.COPY(Field);

      Template.GET(Document."Template No.");

      IF Field.FINDSET THEN
        REPEAT
          Amount := CaptureMgt.GetDecimal(Document,Field.Type,Field.Code,0);

      // *****************************************************************************************************************************
          // FIND POTENTIAL AMOUNTS (FROM OTHER TEMPLATE FIELDS) TO BE SUBTRACTED
      // *****************************************************************************************************************************
          TemplField.SETRANGE("Subtract from Amount Field",Field.Code);
          IF TemplField.FINDSET THEN
            REPEAT
              Amount := Amount - CaptureMgt.GetDecimal(Document,TemplField.Type,TemplField.Code,0);
            UNTIL TemplField.NEXT = 0;

          IF Amount <> 0 THEN
            CreatePurchLine(Document,PurchHeader,Field,Amount,Description,Template."Allow Register without Amounts");
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE CreatePurchLine@1000000005(VAR Document@161024016 : Record 6085590;VAR PurchHeader@1000000001 : Record 38;Field@161024013 : Record 6085580;Amount@1000000003 : Decimal;Description@1000000005 : Text[250];CreateIfNoAccountNo@161024017 : Boolean);
    VAR
      PurchLine@1000000004 : Record 39;
      DataTransl@161024012 : Record 6085584;
      TemplField2@161024014 : Record 6085580;
      AccountNo@161024015 : Code[20];
      NextLineNo@1000000006 : Integer;
    BEGIN
      IF (TemplField2.GET(Field."Template No.",Field.Type,Field."G/L Account Field Code")) THEN BEGIN
        AccountNo := CaptureMgt.GetValueAsText(Document."No.",0,TemplField2);
        IF AccountNo = '' THEN BEGIN
          IF NOT CreateIfNoAccountNo THEN
            ERROR(Text005,Field."Field Name")
          ELSE IF Description = '' THEN
            EXIT;
        END ELSE BEGIN
          IF NOT ((DataTransl.GET(Document."Template No.",Field.Type,Field.Code)) AND
            (DataTransl."Translate to Type" = DataTransl."Translate to Type"::"G/L Account") AND
            (DataTransl."Translate to No." = AccountNo))
          THEN BEGIN
            DataTransl.INIT;
            DataTransl."Translate to Type" := DataTransl."Translate to Type"::"G/L Account";
            DataTransl."Translate to No." := AccountNo;
          END;
        END;
      END ELSE BEGIN
        IF NOT DataTransl.GET(Document."Template No.",Field.Type,Field.Code) THEN BEGIN
          IF NOT CreateIfNoAccountNo THEN
            ERROR(Text005,Field."Field Name")
          ELSE IF Description = '' THEN
            EXIT;
        END;
      END;

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchLine.FINDLAST THEN
        NextLineNo := PurchLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      // *********************************************************************************************************************************
      // CREATE THE PURCHASE LINE
      // *********************************************************************************************************************************
      PurchLine.INIT;
      PurchLine."Document Type" := PurchHeader."Document Type";
      PurchLine.VALIDATE("Document No.",PurchHeader."No.");
      PurchLine."Line No." := NextLineNo;
      PurchLine.INSERT(TRUE);

      //**4PS.sn Call 024574
      IF DataTransl."Translate to No." = '' THEN BEGIN
        IF (PurchHeader."Job No." <> '') OR (PurchHeader."Service Order No." <> '') THEN BEGIN
          IF PurchHeader."Shortcut Dimension 2 Code" <> '' THEN BEGIN
            PurchLine.InitRecord;
            IF Description = 'FromCostObject' THEN
              Description := PurchLine.Description;
          END;
        END;
      END;
      //**4PS.en

      IF DataTransl."Translate to No." <> '' THEN BEGIN
        PurchLine.VALIDATE(Type,DataTransl."Translate to Type");
        PurchLine.VALIDATE("No.",DataTransl."Translate to No.");
        IF DataTransl."Transl. to VAT Prod. Post.Grp." <> '' THEN
          PurchLine.VALIDATE("VAT Prod. Posting Group",DataTransl."Transl. to VAT Prod. Post.Grp.");

        PurchLine.VALIDATE("Unit of Measure Code",DataTransl."Translate to UOM Code");
      END;

      CASE TRUE OF
        DataTransl."Translate to (Text)" <> '':
          PurchLine.VALIDATE(Description,COPYSTR(DataTransl."Translate to (Text)",1,MAXSTRLEN(PurchLine.Description)));
        Description <> '':
          PurchLine.VALIDATE(Description,COPYSTR(Description,1,MAXSTRLEN(PurchLine.Description)));
      END;

      IF DataTransl."Translate to No." <> '' THEN BEGIN
        //**4PS.sn
        IF NOT PurchHeader."Amounts only" THEN
        //**4PS.en
          PurchLine.VALIDATE(Quantity,1);
        PurchLine.VALIDATE("Direct Unit Cost",Amount);
        //**4PS.sn
        PurchLine.VALIDATE("Amnt. to Receive", Amount);
        PurchLine.VALIDATE("Amnt. to Invoice", Amount);
      END ELSE BEGIN                                     //Call 024574 sn
        IF PurchLine.Type = PurchLine.Type::"G/L Account" THEN BEGIN
          IF (PurchLine."Job No." <> '') OR (PurchLine."Service Order No." <> '') THEN BEGIN
            IF PurchLine."Shortcut Dimension 2 Code" <> '' THEN BEGIN
              IF NOT PurchHeader."Amounts only" THEN
                PurchLine.VALIDATE(Quantity,1);
              PurchLine.VALIDATE("Direct Unit Cost",Amount);
              PurchLine.VALIDATE("Amnt. to Receive", Amount);
              PurchLine.VALIDATE("Amnt. to Invoice", Amount);
            END;
          END;
        END;                                              //Call 024574 en
        //**4PS.en
      END;

      TransferPurchLine(PurchLine,Document,0);
      PurchLine.MODIFY(TRUE);

      TransferLineDim(Document,0,PurchLine,DataTransl);
    END;

    PROCEDURE AmountsTransfered@161024023(PurchHeader@161024013 : Record 38) : Boolean;
    VAR
      PurchLine@161024012 : Record 39;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER("Line Amount",'<>%1',0);
      EXIT(PurchLine.FINDFIRST);
    END;

    PROCEDURE StoreDocReference@1000000008(VAR Document@1000000003 : Record 6085590;VAR PurchHeader@1000000001 : Record 38);
    BEGIN
      // *********************************************************************************************************************************
      // SAVE A REFERENCE TO THE DOCUMENT CREATE FOR LATER TRACKING ETC.
      // *********************************************************************************************************************************
      Document.Description := STRSUBSTNO('%1 %2',PurchHeader."Document Type",PurchHeader."No.");
      Document."Created Doc. Type" := DATABASE::"Purchase Header";
      Document."Created Doc. Subtype" := PurchHeader."Document Type";
      Document."Created Doc. ID" := PurchHeader."No.";
      Document.MODIFY;
    END;

    PROCEDURE PerformStep2@1000000011(VAR Template@1000000000 : Record 6085579;VAR PurchHeader@1000000001 : Record 38);
    VAR
      PurchLine@1160040000 : Record 39;
      DCApprovalsBridge@1000 : Codeunit 6085790;
    BEGIN
      PurchHeader.FIND('=');
      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice] THEN BEGIN
        CASE Template."Purch. Inv. Reg. Step 2" OF
          Template."Purch. Inv. Reg. Step 2"::"Submit for Approval":
            DCApprovalsBridge.SendPurchDocApprovalRequest(PurchHeader);

          Template."Purch. Inv. Reg. Step 2"::Release:
            CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);

          Template."Purch. Inv. Reg. Step 2"::Post:
            BEGIN
              COMMIT;
              PurchHeader.Receive := FALSE;
              PurchHeader.Ship := FALSE;
              PurchHeader.Invoice := TRUE;

              PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.",PurchHeader."No.");

              IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
                PurchLine.SETFILTER("Qty. to Receive",'>%1',0);
                PurchHeader.Receive := NOT PurchLine.ISEMPTY;
              END ELSE IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order" THEN BEGIN
                PurchLine.SETFILTER("Return Qty. to Ship",'>%1',0);
                PurchHeader.Ship := NOT PurchLine.ISEMPTY;
              END;

              IF NOT CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchHeader) THEN BEGIN
                HasPostingError := TRUE;
                MESSAGE(Text006);
              END;
            END;
        END;
      END ELSE BEGIN
        CASE Template."Purch. Cr.Memo Reg. Step 2" OF
          Template."Purch. Cr.Memo Reg. Step 2"::"Submit for Approval":
            DCApprovalsBridge.SendPurchDocApprovalRequest(PurchHeader);

          Template."Purch. Cr.Memo Reg. Step 2"::Release:
            CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);

          Template."Purch. Cr.Memo Reg. Step 2"::Post:
            BEGIN
              COMMIT;
              PurchHeader.Receive := FALSE;
              PurchHeader.Ship := FALSE;
              PurchHeader.Invoice := TRUE;
              IF NOT CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchHeader) THEN BEGIN
                HasPostingError := TRUE;
                MESSAGE(Text006);
              END;
            END;
        END;
      END;
    END;

    PROCEDURE CreateTextLine@1000000002(VAR PurchHeader@1000000000 : Record 38;Text@1000000002 : Text[1024]);
    VAR
      PurchLine@1000000003 : Record 39;
      LineNo@161024012 : Integer;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchLine.FINDLAST THEN
        LineNo := PurchLine."Line No." + 10000
      ELSE
        LineNo := 10000;

      PurchLine.INIT;
      PurchLine."Document Type" := PurchHeader."Document Type";
      PurchLine.VALIDATE("Document No.",PurchHeader."No.");
      PurchLine."Line No." := LineNo;
      PurchLine.INSERT(TRUE);
      PurchLine.VALIDATE(Description,COPYSTR(Text,1,MAXSTRLEN(PurchLine.Description)));
      PurchLine.MODIFY(TRUE);
    END;

    PROCEDURE TransferLineDim@161024014(VAR Document@1160040001 : Record 6085590;LineNo@1160040003 : Integer;VAR PurchLine@161024012 : Record 39;VAR LineTrans@161024013 : Record 6085584);
    VAR
      GLSetup@1000 : Record 98;
      DataTranslDim@161024014 : Record 6085586;
      Field@6085577 : Record 6085580;
      DimValueCode@6085578 : Code[20];
      OldDimID@6085573 : Integer;
    BEGIN
      GLSetup.GET;

      DataTranslDim.SETRANGE("Template No.",LineTrans."Template No.");
      DataTranslDim.SETRANGE("Field Type",LineTrans.Type);
      DataTranslDim.SETRANGE("Field Code",LineTrans."Field Code");
      DataTranslDim.SETRANGE("Translate From",LineTrans."Translate From");
      IF DataTranslDim.FINDSET THEN BEGIN
        OldDimID := PurchLine."Dimension Set ID";
        REPEAT
          CASE TRUE OF
            DataTranslDim."Dimension Code" = GLSetup."Global Dimension 1 Code":
              PurchLine.VALIDATE("Shortcut Dimension 1 Code",DataTranslDim."Dimension Value Code");
            DataTranslDim."Dimension Code" = GLSetup."Global Dimension 2 Code":
              PurchLine.VALIDATE("Shortcut Dimension 2 Code",DataTranslDim."Dimension Value Code");
            ELSE
              PurchLine."Dimension Set ID" := UpdateDimension(PurchLine."Dimension Set ID",DataTranslDim."Dimension Code",DataTranslDim."Dimension Value Code");
          END;
        UNTIL DataTranslDim.NEXT = 0;
        IF OldDimID <> PurchLine."Dimension Set ID" THEN
          PurchLine.MODIFY(TRUE);
      END;

      IF LineNo = 0 THEN
        EXIT;

      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Line);
      Field.SETRANGE("Data Type",Field."Data Type"::Lookup);
      Field.SETRANGE("Source Table No.",DATABASE::"Dimension Value");
      IF Field.FINDSET THEN BEGIN
        OldDimID := PurchLine."Dimension Set ID";
        REPEAT
          DimValueCode := CaptureMgt.GetValueAsText(Document."No.",LineNo,Field);
          CASE TRUE OF
            Field.Code = GLSetup."Global Dimension 1 Code":
              PurchLine.VALIDATE("Shortcut Dimension 1 Code",DimValueCode);
            Field.Code = GLSetup."Global Dimension 2 Code":
              PurchLine.VALIDATE("Shortcut Dimension 2 Code",DimValueCode);
            ELSE
              PurchLine."Dimension Set ID" := UpdateDimension(PurchLine."Dimension Set ID",Field.Code,DimValueCode);
          END;
        UNTIL Field.NEXT = 0;

        IF OldDimID <> PurchLine."Dimension Set ID" THEN
          PurchLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateTextArray@161024013(Text@161024012 : Text[1024];MaxLen@161024013 : Integer;VAR Arr@161024014 : ARRAY [50] OF Text[1024]) : Integer;
    VAR
      i@161024015 : Integer;
      Index@161024016 : Integer;
    BEGIN
      WHILE Text <> '' DO BEGIN
        i := i + 1;
        Text := DELCHR(Text,'<>',' ');
        IF STRLEN(Text) <= MaxLen THEN BEGIN
          Arr[i] := Text;
          EXIT(i);
        END;

        IF COPYSTR(Text,MaxLen+1,1) <> ' ' THEN
          Index := LastIndexOf(COPYSTR(Text,1,MaxLen),' ',TRUE)
        ELSE
          Index := MaxLen;

        IF Index = 0 THEN
          Index := MaxLen;

        Arr[i] := DELCHR(COPYSTR(Text,1,Index),'<>',' ');

        Text := COPYSTR(Text,STRLEN(Arr[i])+1);
      END;
      EXIT(i);
    END;

    PROCEDURE LastIndexOf@161024012(Text@161024012 : Text[1024];CharToFind@161024013 : Text[1];IgnoreCase@161024014 : Boolean) : Integer;
    VAR
      StartIndex@161024015 : Integer;
    BEGIN
      IF IgnoreCase THEN BEGIN
        Text := UPPERCASE(Text);
        CharToFind := UPPERCASE(CharToFind);
      END;

      StartIndex := STRLEN(Text);
      WHILE StartIndex > 0 DO BEGIN
        IF COPYSTR(Text,StartIndex,1) = CharToFind THEN
          EXIT(StartIndex)
        ELSE
          StartIndex -= 1;
      END;
    END;

    PROCEDURE UpdateDimension@6085573(DimSetID@6085574 : Integer;DimCode@6085575 : Code[20];DimValueCode@6085576 : Code[20]) : Integer;
    VAR
      DimSetEntry@6085573 : TEMPORARY Record 480;
      DimMgt@6085577 : Codeunit 408;
    BEGIN
      DimMgt.GetDimensionSet(DimSetEntry,DimSetID);

      IF DimSetEntry.GET(DimSetID,DimCode) THEN BEGIN
        IF DimSetEntry."Dimension Value Code" <> DimValueCode THEN BEGIN
          DimSetEntry.VALIDATE("Dimension Value Code",DimValueCode);
          DimSetEntry.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        DimSetEntry.INIT;
        DimSetEntry."Dimension Set ID" := DimSetID;
        DimSetEntry.VALIDATE("Dimension Code",DimCode);
        DimSetEntry.VALIDATE("Dimension Value Code",DimValueCode);
        DimSetEntry.INSERT(TRUE);
      END;

      EXIT(DimMgt.GetDimensionSetID(DimSetEntry));
    END;

    PROCEDURE TransferPurchHeader@1160040009(VAR PurchHeader@1160040000 : Record 38;Document@1160040004 : Record 6085590);
    VAR
      RecRef@1160040007 : RecordRef;
    BEGIN
      RecRef.GETTABLE(PurchHeader);
      CaptureMgt.TransferTableFields(RecRef,Document,0,TRUE);
      RecRef.SETTABLE(PurchHeader);
    END;

    PROCEDURE TransferPurchLine@1160040001(VAR PurchLine@1160040000 : Record 39;Document@1160040012 : Record 6085590;DocumentLineNo@1160040010 : Integer);
    VAR
      RecRef@1160040006 : RecordRef;
    BEGIN
      RecRef.GETTABLE(PurchLine);
      CaptureMgt.TransferTableFields(RecRef,Document,DocumentLineNo,FALSE);
      RecRef.SETTABLE(PurchLine);
    END;

    PROCEDURE TransferDates@1160040017(VAR PurchHeader@1160040000 : Record 38;Template@1160040006 : Record 6085579;Document@1160040001 : Record 6085590;IsInvoice@1160040005 : Boolean);
    VAR
      PostingDate@1160040002 : Date;
      DocumentDate@1160040003 : Date;
      DueDate@1160040004 : Date;
    BEGIN
      PostingDate := PurchDocMgt.GetPostingDate(Document);
      DocumentDate := PurchDocMgt.GetDocumentDate(Document);

      CASE TRUE OF
        PostingDate <> 0D:
          PurchHeader.VALIDATE("Posting Date",PostingDate);
        Template."Posting Date" = Template."Posting Date"::"Use Document Date (recognized on document)":
          PurchHeader.VALIDATE("Posting Date",DocumentDate);
        ELSE
          PurchHeader.VALIDATE("Posting Date",WORKDATE);
      END;

      PurchHeader.VALIDATE("Document Date",DocumentDate);

      IF IsInvoice THEN BEGIN
        DueDate := PurchDocMgt.GetPostingDate(Document);

        IF DueDate <> 0D THEN
          PurchHeader.VALIDATE("Due Date",DueDate);
      END ELSE
        PurchHeader.VALIDATE("Due Date",WORKDATE);
    END;

    PROCEDURE InitAmntToReceiveLocal@11012003(VAR varPurchLine@1100528201 : Record 39);
    VAR
      OnlyCheckForOpen@1100528200 : Boolean;
    BEGIN
      //**4PS copy from table 39, as if modified from field in page/form (OnlycheckforOpen is set to FALSE)
      OnlyCheckForOpen := FALSE;
      IF OnlyCheckForOpen THEN BEGIN
        IF (varPurchLine."Amnt. to Receive" * varPurchLine.Amount) >=
           (varPurchLine."Outst. Amount exc. VAT" * varPurchLine.Amount)
        THEN
          varPurchLine."Amnt. to Receive" := varPurchLine."Outst. Amount exc. VAT";
        OnlyCheckForOpen := FALSE;
      END ELSE BEGIN
        //IF (varPurchLine."Document Type" = varPurchLine."Document Type"::Order) AND NOT DirectReceipt THEN
        IF (varPurchLine."Document Type" = varPurchLine."Document Type"::Order) THEN  //Never TRUE in this CU
          varPurchLine."Amnt. to Receive" := 0
        ELSE
          varPurchLine."Amnt. to Receive" := varPurchLine."Outst. Amount exc. VAT";
      END;
      InitAmntToInvoiceLocal(varPurchLine);
    END;

    PROCEDURE InitAmntToInvoiceLocal@11012004(VAR varPurchLine@1100528200 : Record 39);
    BEGIN
      //**4PS copy from table 39, as if modified from field in page/form (OnlycheckforOpen is set to FALSE)
      //**4PS
      varPurchLine."Amnt. to Invoice" := MaxAmntToInvoiceLocal(varPurchLine);
    END;

    PROCEDURE MaxAmntToInvoiceLocal@11012002(VAR varPurchLine@1100528200 : Record 39) : Decimal;
    BEGIN
      //**4PS copy from table 39, as if modified from field in page/form (OnlycheckforOpen is set to FALSE)
      //**4PS
      EXIT(varPurchLine."Amnt. Received" + varPurchLine."Amnt. to Receive" - varPurchLine."Amnt. Invoiced");
    END;

    PROCEDURE HandleBankAccountNo@1100409000(VAR PurchaseHeader@1100409002 : Record 38;BankAccountNo@1100409000 : Text[30]);
    VAR
      VendorBankAccount@1100409001 : Record 288;
      LookForIBAN@1100529100 : Boolean;
    BEGIN
      //**4PS call C021873
      IF BankAccountNo = '' THEN
        EXIT;
      VendorBankAccount.SETCURRENTKEY("Bank Account No.");
      VendorBankAccount.SETRANGE("Bank Account No.", BankAccountNo);
      VendorBankAccount.SETRANGE("Vendor No.", PurchaseHeader."Pay-to Vendor No.");

      IF VendorBankAccount.ISEMPTY THEN BEGIN
        LookForIBAN := TRUE;
        VendorBankAccount.SETCURRENTKEY(IBAN);
        VendorBankAccount.SETRANGE(IBAN, BankAccountNo);
        VendorBankAccount.SETRANGE("Bank Account No.");
      END;

      IF VendorBankAccount.FINDFIRST THEN
    END;

    BEGIN
    END.
  }
}

