OBJECT Codeunit 6085709 Purch. Doc. - Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.4.04,4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CaptureMgt@1000000000 : Codeunit 6085576;
      Text002@1160040000 : TextConst 'ENU=%1 has already been translated to %2 %3\\Do you want to update the translation?';
      Text022@1000000023 : TextConst 'ENU=The document was not found.';
      Text024@161024020 : TextConst 'ENU=Completely Match';
      Text025@161024021 : TextConst 'ENU=Partial Match';
      Text026@161024022 : TextConst 'ENU=No Match';

    PROCEDURE GetIsInvoice@1000000000(VAR Document@1000000000 : Record 6085590) : Boolean;
    VAR
      Field@1000000001 : Record 6085580;
      FieldRule@1000000002 : Record 6085583;
    BEGIN
      //**4PS.so --> Nog evalueren
      //Field.GET(Document."Template No.",Field.Type::Header,'DOCTYPE');
      //CaptureMgt.FilterRule(Field,FieldRule);
      //FieldRule.FINDFIRST;
      //EXIT(UPPERCASE(FieldRule.Rule) <> UPPERCASE(CaptureMgt.GetText(Document,Field.Type::Header,'DOCTYPE',0)));
      //**4PS.eo
      //**4PS.sn evalueren waarde "F" ??  taalafhankelijk?
      EXIT(UPPERCASE(CaptureMgt.GetText(Document, Field.Type::Header, 'DOCTYPE', 0)) = 'F') // Call C017454
      //**4PS.en
    END;

    PROCEDURE GetDocumentNo@1000000001(VAR Document@1000000000 : Record 6085590) : Code[50];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'DOCNO',0),1,50));
    END;

    PROCEDURE GetPostingDate@1160040003(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'POSTINGDATE',0));
    END;

    PROCEDURE GetDocumentDate@1000000003(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'DOCDATE',0));
    END;

    PROCEDURE GetDueDate@1000000002(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'DUEDATE',0));
    END;

    PROCEDURE GetOurContact@1000000004(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'OURCONTACT',0));
    END;

    PROCEDURE GetOurDocumentNo@1000000005(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'OURDOCNO',0));
    END;

    PROCEDURE GetCurrencyCode@1000000006(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'CURRCODE',0),1,20));
    END;

    PROCEDURE GetAmountExclVAT@1000000007(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'AMOUNTEXCLVAT',0));
    END;

    PROCEDURE GetAllAmountsExclVAT@161024023(VAR Document@1000000000 : Record 6085590) TotalAmount : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ");
      Field.SETRANGE("Subtract from Amount Field",'');
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      IF Field.FINDSET THEN
        REPEAT
          TotalAmount := TotalAmount + CaptureMgt.GetDecimal(Document,Field.Type::Header,Field.Code,0);
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE GetAmountInclVAT@1000000008(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'AMOUNTINCLVAT',0));
    END;

    PROCEDURE GetVATAmount@1000000009(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'VATAMOUNT',0));
    END;

    PROCEDURE GetLineTotalHeaderAmount@1000000010(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Template@161024012 : Record 6085579;
    BEGIN
      Template.GET(Document."Template No.");
      Template."Line Total Header Formula" := CaptureMgt.CalcFieldFormula(Document,Template."Line Total Header Formula",TRUE,0);
      EXIT(CaptureMgt.CalcExpression(Template."Line Total Header Formula"));
    END;

    PROCEDURE GetAmountToMatch@161024031(VAR Document@161024012 : Record 6085590) Amount : Decimal;
    VAR
      Field@161024013 : Record 6085580;
      TemplField@161024014 : Record 6085580;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      Field.SETRANGE("Transfer Amount to Document",Field."Transfer Amount to Document"::"If lines are not recognised");
      Field.SETRANGE("Subtract from Amount Field",'');

      IF Field.FINDSET THEN
        REPEAT
          Amount := Amount + CaptureMgt.GetDecimal(Document,Field.Type,Field.Code,0);

      // *****************************************************************************************************************************
      // FIND POTENTIAL AMOUNTS (FROM OTHER TEMPLATE FIELDS) TO BE SUBTRACTED
      // *****************************************************************************************************************************
          TemplField.SETRANGE("Template No.",Field."Template No.");
          TemplField.SETRANGE(Type,Field.Type);
          TemplField.SETRANGE("Subtract from Amount Field",Field.Code);
          IF TemplField.FINDSET THEN
            REPEAT
              Amount := Amount - CaptureMgt.GetDecimal(Document,TemplField.Type,TemplField.Code,0);
            UNTIL TemplField.NEXT = 0;
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE GetPaymentId@1000000011(VAR Document@1000000000 : Record 6085590) : Text[50];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'PAYMENT-ID',0),1,50));
    END;

    PROCEDURE GetPostingDescription@1000000012(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'POSTINGDESC',0));
    END;

    PROCEDURE GetGLAccountNo@161024022(VAR Document@1000000000 : Record 6085590;Suffex@161024012 : Code[10]) : Text[250];
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'GLACCOUNTNO' + Suffex,0));
    END;

    PROCEDURE GetLineAccountNo@1000000013(VAR Document@1000000000 : Record 6085590;LineNo@1000000001 : Integer) : Code[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Line,'NO',LineNo));
    END;

    PROCEDURE GetLineDescription@1000000014(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Line,'DESC',LineNo));
    END;

    PROCEDURE GetLineQuantity@1000000015(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'QUANTITY',LineNo));
    END;

    PROCEDURE GetLineUnitCost@1000000016(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'UNITCOST',LineNo));
    END;

    PROCEDURE GetLineDiscAmount@1000000017(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'DISCAMOUNT',LineNo));
    END;

    PROCEDURE GetLineDiscPct@1000000018(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'DISCPCT',LineNo));
    END;

    PROCEDURE GetLineAmount@1000000019(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
      Qty@1100528203 : Decimal;
      UnitCost@1100528202 : Decimal;
      LineDiscPerc@1100528201 : Decimal;
      LineAmount2@1100528200 : Decimal;
    BEGIN
      //EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'LINEAMOUNT',LineNo));
      //**4PS.sn
      IF CaptureMgt.GetDecimal(Document,Field.Type::Line,'LINEAMOUNT',LineNo) <> 0 THEN
        EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'LINEAMOUNT',LineNo))
      ELSE BEGIN
        Qty := GetLineQuantity(Document, LineNo);
        UnitCost := GetLineUnitCost(Document, LineNo);
        LineDiscPerc := GetLineDiscPct(Document, LineNo);
        IF Qty = 0 THEN
          EXIT(UnitCost * (100 - LineDiscPerc) / 100)
        ELSE
          EXIT(Qty * UnitCost * (100 - LineDiscPerc) / 100);
      END;
      //**4PS.en
    END;

    PROCEDURE GetOurDocNoDesc@1000000025(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'OURDOCNO') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetAmountExclVATDesc@1000000027(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetDocDateDesc@1000000026(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'DOCDATE') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetDueDateDesc@1000000029(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'DUEDATE') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE AutoMatch@1000000023(VAR Document@1000000000 : Record 6085590);
    BEGIN
      AutoMatchWithOrderNo(Document,'');
    END;

    PROCEDURE AutoMatchWithOrderNo@161024048(VAR Document@1000000000 : Record 6085590;OrderNo@161024016 : Code[20]);
    VAR
      Field@161024014 : Record 6085580;
      Comment@1000000001 : Record 6085594;
      Template@161024015 : Record 6085579;
      MatchedAmount@161024013 : Decimal;
      Matched@161024012 : Boolean;
    BEGIN
      Document.DeleteComments(Comment.Area::Match);
      IF GetIsInvoice(Document) THEN BEGIN
        Matched := AutoMatchReceipt(Document,OrderNo);
        IF NOT Matched THEN
          Matched := AutoMatchOpenPurchDoc(Document,0,OrderNo);
      END ELSE BEGIN
        Matched := AutoMatchReturnShpt(Document,OrderNo);
        IF NOT Matched THEN
          Matched := AutoMatchOpenPurchDoc(Document,1,OrderNo);
      END;

      IF Matched THEN BEGIN
        Document."Match Status" := Document."Match Status"::"Automatically Matched";
        Document.MODIFY(TRUE);

        Template.GET(Document."Template No.");

        MatchedAmount := GetMatchedAmount(Document);

        IF AmountsWithinTolerance(Template,GetAmountToMatch(Document),MatchedAmount) THEN
          Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,Text024)
        ELSE
          Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,Text025)
      END ELSE
        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,Text026);
    END;

    PROCEDURE AutoMatchOpenPurchDoc@1160040002(VAR Document@1000000000 : Record 6085590;MatchTo@1160040001 : 'Order,ReturnOrder';OrderNo@161024014 : Code[20]) Matched : Boolean;
    VAR
      DCSetup@1000000004 : Record 6085573;
      GLSetup@1000000003 : Record 98;
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      xxPurchRcptLine@1000000002 : Record 121;
      xxPurchRcptLine2@161024013 : Record 121;
      PurchLine@1160040000 : Record 39;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchDocMatch@1000000016 : Record 6085700;
      Location@1160040003 : Record 14;
      AccountType@1000000011 : Integer;
      AccountNo@1000000010 : Code[20];
      VariantCode@1000000009 : Code[10];
      UnitOfMeasureCode@1000000008 : Code[10];
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      MatchedAmount@161024012 : Decimal;
      UnitCost@1160040002 : Decimal;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.DELETEALL(TRUE);

      GLSetup.GET;
      DCSetup.GET;

      Template.GET(Document."Template No.");

      IF OrderNo = '' THEN
        OrderNo := COPYSTR(GetOurDocumentNo(Document),1,MAXSTRLEN(PurchLine."Document No."));

      PurchLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.","Currency Code");
      IF MatchTo = MatchTo::Order THEN
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order)
      ELSE
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Return Order");
      PurchLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PurchLine.SETFILTER("Outstanding Quantity",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN BEGIN
        PurchLine.SETRANGE("Currency Code",'');
      END ELSE
        PurchLine.SETRANGE("Currency Code",COPYSTR(GetCurrencyCode(Document),1,MAXSTRLEN(PurchLine."Currency Code")));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.ISEMPTY THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WITHOUT LINES
      // *******************************************************************************************************************************
        PurchLine.SETRANGE("Document No.",OrderNo);
        IF PurchLine.FINDSET THEN
          REPEAT
            IF NOT Location.RequireReceive(PurchLine."Location Code") THEN BEGIN
              AvailMatchQty := PurchLine."Outstanding Quantity" - GetPurchLineMatchedQty(PurchLine);
              IF AvailMatchQty > 0 THEN BEGIN
                PurchDocMatch.INIT;
                PurchDocMatch."Document No." := Document."No.";
                PurchDocMatch."Document Line No." := 0;
                IF MatchTo = MatchTo::Order THEN
                  PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::Order
                ELSE
                  PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::"Return Order";
                PurchDocMatch."Purch. Doc. No." := PurchLine."Document No.";
                PurchDocMatch."Purch. Line No." := PurchLine."Line No.";
                PurchDocMatch.Quantity := AvailMatchQty;
                PurchDocMatch."Direct Unit Cost" := PurchLine."Direct Unit Cost";
                PurchDocMatch."Line Discount %" := PurchLine."Line Discount %";
                PurchDocMatch.INSERT;

                Matched := TRUE;
              END;
            END;
          UNTIL PurchLine.NEXT = 0;

        IF (AmountsWithinTolerance(Template,GetAmountToMatch(Document),GetMatchedAmount(Document))) AND Matched THEN
          EXIT(TRUE)
        ELSE BEGIN
          PurchDocMatch.SETRANGE("Document No.",Document."No.");
          PurchDocMatch.DELETEALL(TRUE);
        END;

        PurchLine.SETRANGE("Document No.");
        IF PurchLine.FINDSET THEN
          REPEAT
            IF NOT Location.RequireReceive(PurchLine."Location Code") THEN BEGIN
              AvailMatchQty := PurchLine."Outstanding Quantity" - GetPurchLineMatchedQty(PurchLine);
              IF AvailMatchQty > 0 THEN BEGIN
                PurchDocMatch.INIT;
                PurchDocMatch."Document No." := Document."No.";
                PurchDocMatch."Document Line No." := 0;
                IF MatchTo = MatchTo::Order THEN
                  PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::Order
                ELSE
                  PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::"Return Order";
                PurchDocMatch."Purch. Doc. No." := PurchLine."Document No.";
                PurchDocMatch."Purch. Line No." := PurchLine."Line No.";
                PurchDocMatch.Quantity := AvailMatchQty;
                PurchDocMatch."Direct Unit Cost" := PurchLine."Direct Unit Cost";
                PurchDocMatch."Line Discount %" := PurchLine."Line Discount %";
                PurchDocMatch.INSERT;

                Matched := TRUE;
              END;
            END;
          UNTIL PurchLine.NEXT = 0;

        IF (AmountsWithinTolerance(Template,GetAmountToMatch(Document),GetMatchedAmount(Document))) AND Matched THEN
          EXIT(TRUE)
        ELSE BEGIN
          PurchDocMatch.SETRANGE("Document No.",Document."No.");
          PurchDocMatch.DELETEALL(TRUE);
          EXIT(FALSE);
        END;
      END;

      IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
        CASE Template."Purch. Match Order No." OF
          Template."Purch. Match Order No."::No:
            PurchLine.SETRANGE("Document No.");
          Template."Purch. Match Order No."::"Yes - always":
            PurchLine.SETRANGE("Document No.",OrderNo);
          Template."Purch. Match Order No."::"Yes - if present":
            IF OrderNo <> '' THEN
              PurchLine.SETRANGE("Document No.",OrderNo);
        END;
      END;

      DocumentLine.FINDSET;
      REPEAT
        Stop := FALSE;
        PurchLine.SETRANGE(Type);
        PurchLine.SETRANGE("No.");
        PurchLine.SETRANGE("Variant Code");
        PurchLine.SETRANGE("Unit of Measure Code");
        PurchLine.SETRANGE("Direct Unit Cost");
        PurchLine.SETRANGE(Quantity);

        AccountNo := COPYSTR(GetLineAccountNo(Document,DocumentLine."Line No."),1,MAXSTRLEN(AccountNo));
        CASE Template."Purch. Match Item No." OF
          Template."Purch. Match Item No."::"Yes - always":
            BEGIN
              IF AccountNo = '' THEN
                Stop := TRUE
              ELSE
                IF GetLineMatchAccount(Template,Document,AccountNo,AccountType,AccountNo,VariantCode,
                  UnitOfMeasureCode,Description)
                THEN BEGIN
                  PurchLine.SETRANGE(Type,AccountType);
                  PurchLine.SETRANGE("No.",AccountNo);
                  IF VariantCode <> '' THEN
                    PurchLine.SETRANGE("Variant Code",VariantCode);
                  IF UnitOfMeasureCode <> '' THEN
                    PurchLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
                END ELSE
                  Stop := TRUE;
            END;

          Template."Purch. Match Item No."::"Yes - if present":
            BEGIN
              IF AccountNo <> '' THEN BEGIN
                IF GetLineMatchAccount(Template,Document,AccountNo,AccountType,AccountNo,VariantCode,
                  UnitOfMeasureCode,Description)
                THEN BEGIN
                  PurchLine.SETRANGE(Type,AccountType);
                  PurchLine.SETRANGE("No.",AccountNo);
                  IF VariantCode <> '' THEN
                    PurchLine.SETRANGE("Variant Code",VariantCode);
                  IF UnitOfMeasureCode <> '' THEN
                    PurchLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
                END ELSE
                  Stop := TRUE;
              END;
            END;
        END;

        CASE Template."Purch. Match Quantity" OF
          Template."Purch. Match Quantity"::"Yes - always":
            PurchLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          Template."Purch. Match Quantity"::"Yes - if present":
            IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
              PurchLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
        END;

        CASE Template."Purch. Match Unit Cost" OF
          Template."Purch. Match Unit Cost"::"Yes - always":
            PurchLine.SETRANGE("Direct Unit Cost",GetLineUnitCost(Document,DocumentLine."Line No."));
          Template."Purch. Match Unit Cost"::"Yes - if present":
            IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
              PurchLine.SETRANGE("Direct Unit Cost",GetLineUnitCost(Document,DocumentLine."Line No."));
        END;

        IF TemplField.Code <> '' THEN BEGIN
          OrderNo := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,MAXSTRLEN(OrderNo));

          CASE Template."Purch. Match Order No." OF
            Template."Purch. Match Order No."::"Yes - always":
              PurchLine.SETRANGE("Document No.",OrderNo);
            Template."Purch. Match Order No."::"Yes - if present":
              IF OrderNo <> '' THEN
                PurchLine.SETRANGE("Document No.",OrderNo);
          END;
        END;

        RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
        IF (NOT Stop) AND PurchLine.FINDSET THEN
          REPEAT
            IF NOT Location.RequireReceive(PurchLine."Location Code") THEN BEGIN
              AvailMatchQty := PurchLine."Outstanding Quantity" - GetPurchLineMatchedQty(PurchLine);
              IF AvailMatchQty <> 0 THEN BEGIN
                IF AvailMatchQty > RemMatchQty THEN
                  MatchQty := RemMatchQty
                ELSE
                  MatchQty := AvailMatchQty;

                UnitCost := 0;
                IF Template."Purch. Match Unit Cost" = Template."Purch. Match Unit Cost"::No THEN
                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");
                IF UnitCost = 0 THEN
                  UnitCost := PurchLine."Direct Unit Cost";

                PurchDocMatch."Document No." := DocumentLine."Document No.";
                PurchDocMatch."Document Line No." := DocumentLine."Line No.";
                IF MatchTo = MatchTo::Order THEN
                  PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::Order
                ELSE
                  PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::"Return Order";
                PurchDocMatch."Purch. Doc. No." := PurchLine."Document No.";
                PurchDocMatch."Purch. Line No." := PurchLine."Line No.";
                PurchDocMatch.Quantity := MatchQty;
                PurchDocMatch."Direct Unit Cost" := UnitCost;
                PurchDocMatch."Line Discount %" := PurchLine."Line Discount %";
                PurchDocMatch.INSERT;

                RemMatchQty := RemMatchQty - MatchQty;

                Matched := TRUE;
              END;
            END;
          UNTIL (PurchLine.NEXT = 0) OR (RemMatchQty <= 0);

      UNTIL DocumentLine.NEXT = 0;
    END;

    PROCEDURE AutoMatchReceipt@1000000024(VAR Document@1000000000 : Record 6085590;OrderNo@161024014 : Code[20]) Matched : Boolean;
    VAR
      DCSetup@1000000004 : Record 6085573;
      GLSetup@1000000003 : Record 98;
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      PurchRcptLine@1000000002 : Record 121;
      PurchRcptLine2@161024013 : Record 121;
      PurchLine@1160040000 : Record 39;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchDocMatch@1000000016 : Record 6085700;
      AccountType@1000000011 : Integer;
      AccountNo@1000000010 : Code[20];
      VariantCode@1000000009 : Code[10];
      UnitOfMeasureCode@1000000008 : Code[10];
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      TotalMatchAmount@161024012 : Decimal;
      UnitCost@1160040002 : Decimal;
      Include@1160040001 : Boolean;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.DELETEALL(TRUE);

      GLSetup.GET;
      DCSetup.GET;

      Template.GET(Document."Template No.");

      IF OrderNo = '' THEN
        OrderNo := COPYSTR(GetOurDocumentNo(Document),1,MAXSTRLEN(PurchRcptLine."Order No."));

      PurchRcptLine.SETCURRENTKEY("Pay-to Vendor No.");
      PurchRcptLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN BEGIN
        PurchRcptLine.SETRANGE("Currency Code",'');
      END ELSE
        PurchRcptLine.SETRANGE("Currency Code",COPYSTR(GetCurrencyCode(Document),1,MAXSTRLEN(PurchRcptLine."Currency Code")));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.ISEMPTY THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WITHOUT LINES
      // *******************************************************************************************************************************
        PurchRcptLine.SETRANGE("Order No.",OrderNo);

        // TRY FINDING ALL RECEIPT AND SEE IF THEY MATCHES THE FULL AMOUNT (WITHIN THE VARIANCE)
        IF PurchRcptLine.FINDSET THEN
          REPEAT
            AvailMatchQty := PurchRcptLine."Qty. Rcd. Not Invoiced" - GetRcptLineMatchedQty(PurchRcptLine);
            IF AvailMatchQty <> 0 THEN BEGIN
              IF (PurchLine."Document Type" <> PurchLine."Document Type"::Order) OR
                (PurchLine."No." <> PurchRcptLine."Order No.") OR
                (PurchLine."Line No." <> PurchRcptLine."Order Line No.")
              THEN
                PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");

              PurchDocMatch.INIT;
              PurchDocMatch."Document No." := Document."No.";
              PurchDocMatch."Document Line No." := 0;
              PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::Receipt;
              PurchDocMatch."Purch. Doc. No." := PurchRcptLine."Document No.";
              PurchDocMatch."Purch. Line No." := PurchRcptLine."Line No.";
              PurchDocMatch.Quantity := AvailMatchQty;
              PurchDocMatch."Direct Unit Cost" := PurchLine."Direct Unit Cost";
              PurchDocMatch."Line Discount %" := PurchLine."Line Discount %";
              PurchDocMatch.INSERT;

              Matched := TRUE;
            END;
          UNTIL PurchRcptLine.NEXT = 0;

        IF (AmountsWithinTolerance(Template,GetAmountToMatch(Document),GetMatchedAmount(Document))) AND Matched THEN
          EXIT(TRUE)
        ELSE BEGIN
          PurchDocMatch.SETRANGE("Document No.",Document."No.");
          PurchDocMatch.DELETEALL(TRUE);
        END;


        // TRY FINDING 1 RECEIPT THAT MATCHES THE FULL AMOUNT (WITHIN THE VARIANCE)
        PurchRcptLine2.COPY(PurchRcptLine);
        IF PurchRcptLine2.FINDSET THEN
          REPEAT
            PurchRcptLine.SETRANGE("Document No.",PurchRcptLine2."Document No.");
            IF PurchRcptLine.FINDSET THEN
              REPEAT
                AvailMatchQty := PurchRcptLine."Qty. Rcd. Not Invoiced" - GetRcptLineMatchedQty(PurchRcptLine);
                IF AvailMatchQty <> 0 THEN BEGIN
                  IF (PurchLine."Document Type" <> PurchLine."Document Type"::Order) OR
                    (PurchLine."No." <> PurchRcptLine."Order No.") OR
                    (PurchLine."Line No." <> PurchRcptLine."Order Line No.")
                  THEN
                    PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
                  PurchDocMatch.INIT;
                  PurchDocMatch."Document No." := Document."No.";
                  PurchDocMatch."Document Line No." := 0;
                  PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::Receipt;
                  PurchDocMatch."Purch. Doc. No." := PurchRcptLine."Document No.";
                  PurchDocMatch."Purch. Line No." := PurchRcptLine."Line No.";
                  PurchDocMatch.Quantity := AvailMatchQty;
                  PurchDocMatch."Direct Unit Cost" := PurchLine."Direct Unit Cost";
                  PurchDocMatch."Line Discount %" := PurchLine."Line Discount %";
                  PurchDocMatch.INSERT;

                  Matched := TRUE;
                END;
              UNTIL PurchRcptLine.NEXT = 0;

              IF (AmountsWithinTolerance(Template,GetAmountToMatch(Document),GetMatchedAmount(Document))) AND Matched THEN
                EXIT(TRUE)
              ELSE BEGIN
                PurchDocMatch.SETRANGE("Document No.",Document."No.");
                PurchDocMatch.DELETEALL(TRUE);
              END;
            PurchRcptLine2 := PurchRcptLine;
          UNTIL PurchRcptLine2.NEXT = 0;

        EXIT(FALSE);
      END;

      IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
        CASE Template."Purch. Match Order No." OF
          Template."Purch. Match Order No."::No:
            PurchRcptLine.SETRANGE("Order No.");
          Template."Purch. Match Order No."::"Yes - always":
            PurchRcptLine.SETRANGE("Order No.",OrderNo);
          Template."Purch. Match Order No."::"Yes - if present":
            IF OrderNo <> '' THEN
              PurchRcptLine.SETRANGE("Order No.",OrderNo);
        END;
      END;

      DocumentLine.FINDSET;
      REPEAT
        Stop := FALSE;
        PurchRcptLine.SETRANGE(Type);
        PurchRcptLine.SETRANGE("No.");
        PurchRcptLine.SETRANGE("Variant Code");
        PurchRcptLine.SETRANGE("Unit of Measure Code");
        PurchRcptLine.SETRANGE("Direct Unit Cost");
        PurchRcptLine.SETRANGE(Quantity);

        AccountNo := COPYSTR(GetLineAccountNo(Document,DocumentLine."Line No."),1,MAXSTRLEN(AccountNo));
        CASE Template."Purch. Match Item No." OF
          Template."Purch. Match Item No."::"Yes - always":
            BEGIN
              IF AccountNo = '' THEN
                Stop := TRUE
              ELSE
                IF GetLineMatchAccount(Template,Document,AccountNo,AccountType,AccountNo,VariantCode,
                  UnitOfMeasureCode,Description)
                THEN BEGIN
                  PurchRcptLine.SETRANGE(Type,AccountType);
                  PurchRcptLine.SETRANGE("No.",AccountNo);
                  IF VariantCode <> '' THEN
                    PurchRcptLine.SETRANGE("Variant Code",VariantCode);
                  IF UnitOfMeasureCode <> '' THEN
                    PurchRcptLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
                END ELSE
                  Stop := TRUE;
            END;

          Template."Purch. Match Item No."::"Yes - if present":
            BEGIN
              IF AccountNo <> '' THEN BEGIN
                IF GetLineMatchAccount(Template,Document,AccountNo,AccountType,AccountNo,VariantCode,
                  UnitOfMeasureCode,Description)
                THEN BEGIN
                  PurchRcptLine.SETRANGE(Type,AccountType);
                  PurchRcptLine.SETRANGE("No.",AccountNo);
                  IF VariantCode <> '' THEN
                    PurchRcptLine.SETRANGE("Variant Code",VariantCode);
                  IF UnitOfMeasureCode <> '' THEN
                    PurchRcptLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
                END ELSE
                  Stop := TRUE;
              END;
            END;
        END;

        CASE Template."Purch. Match Quantity" OF
          Template."Purch. Match Quantity"::"Yes - always":
            PurchRcptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          Template."Purch. Match Quantity"::"Yes - if present":
            IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
              PurchRcptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
        END;

        RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
        IF (NOT Stop) AND PurchRcptLine.FINDSET THEN
          REPEAT
            Include := TRUE;

            PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
            CASE Template."Purch. Match Unit Cost" OF
              Template."Purch. Match Unit Cost"::"Yes - always":
                Include := PurchLine."Direct Unit Cost" = GetLineUnitCost(Document,DocumentLine."Line No.");
              Template."Purch. Match Unit Cost"::"Yes - if present":
                IF GetLineUnitCost(Document,DocumentLine."Line No.") <> 0 THEN
                  Include := PurchLine."Direct Unit Cost" = GetLineUnitCost(Document,DocumentLine."Line No.");
            END;

            IF Include THEN BEGIN
              IF TemplField.Code <> '' THEN BEGIN
                OrderNo := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,
                  MAXSTRLEN(OrderNo));

                CASE Template."Purch. Match Order No." OF
                  Template."Purch. Match Order No."::"Yes - always":
                    Include := PurchRcptLine."Order No." = OrderNo;
                  Template."Purch. Match Order No."::"Yes - if present":
                    IF OrderNo <> '' THEN
                      Include := PurchRcptLine."Order No." = OrderNo;
                END;
              END;
            END;

            IF Include THEN BEGIN
              AvailMatchQty := PurchRcptLine."Qty. Rcd. Not Invoiced" - GetRcptLineMatchedQty(PurchRcptLine);
              IF AvailMatchQty <> 0 THEN BEGIN
                IF AvailMatchQty > RemMatchQty THEN
                  MatchQty := RemMatchQty
                ELSE
                  MatchQty := AvailMatchQty;

                UnitCost := 0;
                IF Template."Purch. Match Unit Cost" = Template."Purch. Match Unit Cost"::No THEN
                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");
                IF UnitCost = 0 THEN
                  UnitCost := PurchLine."Direct Unit Cost";

                PurchDocMatch."Document No." := DocumentLine."Document No.";
                PurchDocMatch."Document Line No." := DocumentLine."Line No.";
                PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::Receipt;
                PurchDocMatch."Purch. Doc. No." := PurchRcptLine."Document No.";
                PurchDocMatch."Purch. Line No." := PurchRcptLine."Line No.";
                PurchDocMatch.Quantity := MatchQty;
                PurchDocMatch."Direct Unit Cost" := UnitCost;
                PurchDocMatch."Line Discount %" := PurchLine."Line Discount %";
                PurchDocMatch.INSERT;

                RemMatchQty := RemMatchQty - MatchQty;

                Matched := TRUE;
              END;
            END;
          UNTIL (PurchRcptLine.NEXT = 0) OR (RemMatchQty <= 0);

      UNTIL DocumentLine.NEXT = 0;
    END;

    PROCEDURE AutoMatchReturnShpt@1000000038(VAR Document@1000000000 : Record 6085590;OrderNo@161024013 : Code[20]) Matched : Boolean;
    VAR
      DCSetup@1000000004 : Record 6085573;
      GLSetup@1000000003 : Record 98;
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      ReturnShptLine@1000000002 : Record 6651;
      ReturnShptLine2@161024012 : Record 6651;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchLine@1160040000 : Record 39;
      PurchDocMatch@1000000016 : Record 6085700;
      AccountType@1000000011 : Integer;
      AccountNo@1000000010 : Code[20];
      VariantCode@1000000009 : Code[10];
      UnitOfMeasureCode@1000000008 : Code[10];
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      UnitCost@1160040002 : Decimal;
      Include@1160040001 : Boolean;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.DELETEALL(TRUE);

      GLSetup.GET;
      DCSetup.GET;

      Template.GET(Document."Template No.");

      IF OrderNo = '' THEN
        OrderNo := COPYSTR(GetOurDocumentNo(Document),1,MAXSTRLEN(ReturnShptLine."Return Order No."));

      ReturnShptLine.SETCURRENTKEY("Pay-to Vendor No.");
      ReturnShptLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN BEGIN
        ReturnShptLine.SETRANGE("Currency Code",'');
      END ELSE
        ReturnShptLine.SETRANGE("Currency Code",COPYSTR(GetCurrencyCode(Document),1,MAXSTRLEN(ReturnShptLine."Currency Code")));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.ISEMPTY THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WITHOUT LINES
      // *******************************************************************************************************************************
        ReturnShptLine.SETRANGE("Return Order No.",OrderNo);

        // TRY FINDING ALL RETURN SHIPMENTS AND SEE IF THEY MATCHES THE FULL AMOUNT (WITHIN THE VARIANCE)
        IF ReturnShptLine.FINDSET THEN
          REPEAT
            AvailMatchQty := ReturnShptLine."Return Qty. Shipped Not Invd." - GetReturnShptLineMatchedQty(ReturnShptLine);
            IF AvailMatchQty <> 0 THEN BEGIN
              IF (PurchLine."Document Type" <> PurchLine."Document Type"::"Return Order") OR
                (PurchLine."No." <> ReturnShptLine."Return Order No.") OR
                (PurchLine."Line No." <> ReturnShptLine."Return Order Line No.")
              THEN
                PurchLine.GET(PurchLine."Document Type"::"Return Order",ReturnShptLine."Return Order No.",
                  ReturnShptLine."Return Order Line No.");

              PurchDocMatch.INIT;
              PurchDocMatch."Document No." := Document."No.";
              PurchDocMatch."Document Line No." := 0;
              PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::"Return Shipment";
              PurchDocMatch."Purch. Doc. No." := ReturnShptLine."Document No.";
              PurchDocMatch."Purch. Line No." := ReturnShptLine."Line No.";
              PurchDocMatch.Quantity := AvailMatchQty;
              PurchDocMatch."Direct Unit Cost" := PurchLine."Direct Unit Cost";
              PurchDocMatch."Line Discount %" := PurchLine."Line Discount %";
              PurchDocMatch.INSERT;

              Matched := TRUE;
            END;
          UNTIL ReturnShptLine.NEXT = 0;

          IF (AmountsWithinTolerance(Template,GetAmountToMatch(Document),GetMatchedAmount(Document))) AND Matched THEN
            EXIT(TRUE)
          ELSE BEGIN
            PurchDocMatch.SETRANGE("Document No.",Document."No.");
            PurchDocMatch.DELETEALL(TRUE);
          END;


        // TRY FINDING 1 RETURN SHIPMENTS THAT MATCHES THE FULL AMOUNT (WITHIN THE VARIANCE)
        ReturnShptLine2.COPY(ReturnShptLine);
        IF ReturnShptLine2.FINDSET THEN
          REPEAT
            ReturnShptLine.SETRANGE("Document No.",ReturnShptLine2."Document No.");
            IF ReturnShptLine.FINDSET THEN
              REPEAT
                AvailMatchQty := ReturnShptLine."Return Qty. Shipped Not Invd." - GetReturnShptLineMatchedQty(ReturnShptLine);
                IF AvailMatchQty <> 0 THEN BEGIN
                  IF (PurchLine."Document Type" <> PurchLine."Document Type"::"Return Order") OR
                    (PurchLine."No." <> ReturnShptLine."Return Order No.") OR
                    (PurchLine."Line No." <> ReturnShptLine."Return Order Line No.")
                  THEN
                    PurchLine.GET(PurchLine."Document Type"::"Return Order",
                      ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");

                  PurchDocMatch.INIT;
                  PurchDocMatch."Document No." := Document."No.";
                  PurchDocMatch."Document Line No." := 0;
                  PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::"Return Shipment";
                  PurchDocMatch."Purch. Doc. No." := ReturnShptLine."Document No.";
                  PurchDocMatch."Purch. Line No." := ReturnShptLine."Line No.";
                  PurchDocMatch.Quantity := AvailMatchQty;
                  PurchDocMatch."Direct Unit Cost" := PurchLine."Direct Unit Cost";
                  PurchDocMatch."Line Discount %" := PurchLine."Line Discount %";
                  PurchDocMatch.INSERT;

                  Matched := TRUE;
                END;
              UNTIL ReturnShptLine.NEXT = 0;

              IF (AmountsWithinTolerance(Template,GetAmountToMatch(Document),GetMatchedAmount(Document))) AND Matched THEN
                EXIT(TRUE)
              ELSE BEGIN
                PurchDocMatch.SETRANGE("Document No.",Document."No.");
                PurchDocMatch.DELETEALL(TRUE);
              END;
            ReturnShptLine2 := ReturnShptLine;
          UNTIL ReturnShptLine2.NEXT = 0;

        EXIT(FALSE);
      END;

      IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
        CASE Template."Purch. Match Order No." OF
          Template."Purch. Match Order No."::No:
            ReturnShptLine.SETRANGE("Return Order No.");
          Template."Purch. Match Order No."::"Yes - always":
            ReturnShptLine.SETRANGE("Return Order No.",OrderNo);
          Template."Purch. Match Order No."::"Yes - if present":
            IF OrderNo <> '' THEN
              ReturnShptLine.SETRANGE("Return Order No.",OrderNo);
        END;
      END;

      DocumentLine.FINDSET;
      REPEAT
        Stop := FALSE;
        ReturnShptLine.SETRANGE(Type);
        ReturnShptLine.SETRANGE("No.");
        ReturnShptLine.SETRANGE("Variant Code");
        ReturnShptLine.SETRANGE("Unit of Measure Code");
        ReturnShptLine.SETRANGE("Direct Unit Cost");
        ReturnShptLine.SETRANGE(Quantity);

        AccountNo := COPYSTR(GetLineAccountNo(Document,DocumentLine."Line No."),1,MAXSTRLEN(AccountNo));
        CASE Template."Purch. Match Item No." OF
          Template."Purch. Match Item No."::"Yes - always":
            BEGIN
              IF AccountNo = '' THEN
                Stop := TRUE
              ELSE
                IF GetLineMatchAccount(Template,Document,AccountNo,AccountType,AccountNo,VariantCode,
                  UnitOfMeasureCode,Description)
                THEN BEGIN
                  ReturnShptLine.SETRANGE(Type,AccountType);
                  ReturnShptLine.SETRANGE("No.",AccountNo);
                  IF VariantCode <> '' THEN
                    ReturnShptLine.SETRANGE("Variant Code",VariantCode);
                  IF UnitOfMeasureCode <> '' THEN
                    ReturnShptLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
                END ELSE
                  Stop := TRUE;
            END;
          Template."Purch. Match Item No."::"Yes - if present":
            BEGIN
              IF AccountNo <> '' THEN BEGIN
                IF GetLineMatchAccount(Template,Document,AccountNo,AccountType,AccountNo,VariantCode,
                  UnitOfMeasureCode,Description)
                THEN BEGIN
                  ReturnShptLine.SETRANGE(Type,AccountType);
                  ReturnShptLine.SETRANGE("No.",AccountNo);
                  IF VariantCode <> '' THEN
                    ReturnShptLine.SETRANGE("Variant Code",VariantCode);
                  IF UnitOfMeasureCode <> '' THEN
                    ReturnShptLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
                END ELSE
                  Stop := TRUE;
              END;
            END;
        END;

        CASE Template."Purch. Match Quantity" OF
          Template."Purch. Match Quantity"::"Yes - always":
            ReturnShptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          Template."Purch. Match Quantity"::"Yes - if present":
            IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
              ReturnShptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
        END;

        RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
        IF (NOT Stop) AND ReturnShptLine.FINDSET THEN
          REPEAT
            Include := TRUE;

            PurchLine.GET(PurchLine."Document Type"::"Return Order",ReturnShptLine."Return Order No.",
              ReturnShptLine."Return Order Line No.");
            CASE Template."Purch. Match Unit Cost" OF
              Template."Purch. Match Unit Cost"::"Yes - always":
                Include := PurchLine."Direct Unit Cost" = GetLineUnitCost(Document,DocumentLine."Line No.");
              Template."Purch. Match Unit Cost"::"Yes - if present":
                IF GetLineUnitCost(Document,DocumentLine."Line No.") <> 0 THEN
                  Include := PurchLine."Direct Unit Cost" = GetLineUnitCost(Document,DocumentLine."Line No.");
            END;

            IF Include THEN BEGIN
              IF TemplField.Code <> '' THEN BEGIN
                OrderNo := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,
                  MAXSTRLEN(OrderNo));

                CASE Template."Purch. Match Order No." OF
                  Template."Purch. Match Order No."::"Yes - always":
                    Include := ReturnShptLine."Return Order No." = OrderNo;
                  Template."Purch. Match Order No."::"Yes - if present":
                    IF OrderNo <> '' THEN
                      Include := ReturnShptLine."Return Order No." = OrderNo;
                END;
              END;
            END;

            IF Include THEN BEGIN
              AvailMatchQty := ReturnShptLine."Return Qty. Shipped Not Invd." - GetReturnShptLineMatchedQty(ReturnShptLine);
              IF AvailMatchQty <> 0 THEN BEGIN
                IF AvailMatchQty > RemMatchQty THEN
                  MatchQty := RemMatchQty
                ELSE
                  MatchQty := AvailMatchQty;

                UnitCost := 0;
                IF Template."Purch. Match Unit Cost" = Template."Purch. Match Unit Cost"::No THEN
                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");
                IF UnitCost = 0 THEN
                  UnitCost := PurchLine."Direct Unit Cost";

                PurchDocMatch."Document No." := DocumentLine."Document No.";
                PurchDocMatch."Document Line No." := DocumentLine."Line No.";
                PurchDocMatch."Purch. Doc. Type" := PurchDocMatch."Purch. Doc. Type"::"Return Shipment";
                PurchDocMatch."Purch. Doc. No." := ReturnShptLine."Document No.";
                PurchDocMatch."Purch. Line No." := ReturnShptLine."Line No.";
                PurchDocMatch.Quantity := MatchQty;
                PurchDocMatch."Direct Unit Cost" := UnitCost;
                PurchDocMatch."Line Discount %" := ReturnShptLine."Line Discount %";
                PurchDocMatch.INSERT;

                RemMatchQty := RemMatchQty - MatchQty;

                Matched := TRUE;
              END;
            END;
          UNTIL (ReturnShptLine.NEXT = 0) OR (RemMatchQty <= 0);

      UNTIL DocumentLine.NEXT = 0;
    END;

    PROCEDURE GetLineMatchAccount@1000000022(VAR Template@1160040000 : Record 6085579;VAR Document@1000000002 : Record 6085590;TranslateFrom@1000000010 : Code[150];VAR AccountType@1000000000 : Integer;VAR AccountNo@1000000001 : Code[20];VAR Variant@1000000007 : Code[10];VAR UnitOfMeasure@1000000006 : Code[10];VAR Description@1000000008 : Text[50]) : Boolean;
    VAR
      LineMatch@1000000003 : Record 6085584;
      Field@1000000004 : Record 6085580;
      ItemCrossRef@1000000009 : Record 5717;
      ItemVendor@161024013 : Record 99;
      Item@161024012 : Record 27;
    BEGIN
      LineMatch.SETRANGE("Template No.",Document."Template No.");
      LineMatch.SETRANGE(Type,Field.Type::Line);
      LineMatch.SETRANGE("Field Code",'NO');
      LineMatch.SETRANGE("Translate From",TranslateFrom);
      IF LineMatch.FINDFIRST THEN BEGIN
        AccountType := LineMatch."Translate to Type";
        AccountNo := LineMatch."Translate to No.";
        Variant := LineMatch."Translate to Variant Code";
        UnitOfMeasure := LineMatch."Translate to UOM Code";
        Description := LineMatch."Translate to (Text)";
        EXIT(TRUE);
      END;

      IF TranslateFrom = '' THEN
        EXIT;

      ItemCrossRef.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Vendor);
      ItemCrossRef.SETRANGE("Cross-Reference Type No.",Document.GetSourceID);
      ItemCrossRef.SETRANGE("Cross-Reference No.",TranslateFrom);
      IF ItemCrossRef.FINDFIRST THEN BEGIN
        AccountType := LineMatch."Translate to Type"::Item;
        AccountNo := ItemCrossRef."Item No.";
        Variant := ItemCrossRef."Variant Code";
        UnitOfMeasure := ItemCrossRef."Unit of Measure";
        EXIT(TRUE);
      END;

      ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
      ItemVendor.SETRANGE("Vendor No.",Document.GetSourceID);
      ItemVendor.SETRANGE("Vendor Item No.",TranslateFrom);
      IF ItemVendor.FINDFIRST THEN BEGIN
        IF Item.GET(ItemVendor."Item No.") THEN BEGIN
          AccountType := LineMatch."Translate to Type"::Item;
          AccountNo := ItemVendor."Item No.";
          UnitOfMeasure := Item."Purch. Unit of Measure";
          EXIT(TRUE);
        END;
      END;

      Item.SETCURRENTKEY("Vendor Item No.","Vendor No.");
      Item.SETRANGE("Vendor Item No.",TranslateFrom);
      Item.SETRANGE("Vendor No.",Document.GetSourceID);
      IF Item.FINDFIRST THEN BEGIN
        AccountType := LineMatch."Translate to Type"::Item;
        AccountNo := Item."No.";
        UnitOfMeasure := Item."Purch. Unit of Measure";
        EXIT(TRUE);
      END;

      IF Template."Use Vendor/Customer Item Nos." THEN BEGIN
        IF Item.GET(TranslateFrom) THEN BEGIN
          AccountType := LineMatch."Translate to Type"::Item;
          AccountNo := Item."No.";
          UnitOfMeasure := Item."Purch. Unit of Measure";
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetPurchLineMatchedQty@1160040008(VAR PurchLine@1000000002 : Record 39) : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
    BEGIN
      IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
        PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
      ELSE
        PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Shipment");
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchLine."Document No.");
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchLine."Line No.");
      PurchDocMatch.CALCSUMS(Quantity);
      EXIT(PurchDocMatch.Quantity);
    END;

    PROCEDURE GetRcptLineMatchedQty@1000000021(VAR PurchRcptLine@1000000002 : Record 121) : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
    BEGIN
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Receipt);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchRcptLine."Document No.");
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchRcptLine."Line No.");
      PurchDocMatch.CALCSUMS(Quantity);
      EXIT(PurchDocMatch.Quantity);
    END;

    PROCEDURE GetReturnShptLineMatchedQty@1000000036(VAR ReturnShptLine@1000000002 : Record 6651) : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
    BEGIN
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Shipment");
      PurchDocMatch.SETRANGE("Purch. Doc. No.",ReturnShptLine."Document No.");
      PurchDocMatch.SETRANGE("Purch. Line No.",ReturnShptLine."Line No.");
      PurchDocMatch.CALCSUMS(Quantity);
      EXIT(PurchDocMatch.Quantity);
    END;

    PROCEDURE GetDocLineMatchedQty@1000000020(VAR DocumentLine@1000000002 : Record 6085596) : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",DocumentLine."Document No.");
      PurchDocMatch.SETRANGE("Document Line No.",DocumentLine."Line No.");
      PurchDocMatch.CALCSUMS(Quantity);
      EXIT(PurchDocMatch.Quantity);
    END;

    PROCEDURE IsDocMatched@1160040004(VAR Document@1000000002 : Record 6085590) : Boolean;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      IF GetIsInvoice(Document) THEN
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::Receipt,PurchDocMatch."Purch. Doc. Type"::Order)
      ELSE
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::"Return Shipment",PurchDocMatch."Purch. Doc. Type"::"Return Order");
      EXIT(NOT PurchDocMatch.ISEMPTY);
    END;

    PROCEDURE GetMatchedAmount@1000000028(VAR Document@1000000002 : Record 6085590) Amount : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      Vendor@161024013 : Record 23;
      Currency@161024012 : Record 4;
      DiscAmount@161024014 : Decimal;
    BEGIN
      Vendor.GET(Document.GetSourceID);
      IF Vendor."Currency Code" <> '' THEN
        Currency.GET(Vendor."Currency Code");
      Currency.InitRoundingPrecision;

      PurchDocMatch.SETRANGE("Document No.",Document."No.");

      IF GetIsInvoice(Document) THEN
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::Receipt,PurchDocMatch."Purch. Doc. Type"::Order)
      ELSE
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::"Return Shipment",PurchDocMatch."Purch. Doc. Type"::"Return Order");

      IF PurchDocMatch.FINDSET THEN
        REPEAT
          //**4PS.sn
          IF PurchDocMatch.Quantity = 0 THEN BEGIN
            DiscAmount :=
              ROUND(
                ROUND(PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") *
                PurchDocMatch."Line Discount %" / 100,
                Currency."Amount Rounding Precision");

            Amount += ROUND(PurchDocMatch."Direct Unit Cost") - DiscAmount;
          END ELSE BEGIN
          //**4PS.en
            DiscAmount :=
              ROUND(
                ROUND(PurchDocMatch.Quantity * PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") *
                PurchDocMatch."Line Discount %" / 100,
                Currency."Amount Rounding Precision");

            Amount += ROUND(PurchDocMatch."Direct Unit Cost" * PurchDocMatch.Quantity) - DiscAmount;
          END; //**4PS.n
        UNTIL PurchDocMatch.NEXT = 0;
    END;

    PROCEDURE ShowDocFromPurchDoc@161024029(PurchHeader@1000000002 : Record 38);
    VAR
      Document@1000000000 : Record 6085590;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF NOT Document.FINDFIRST THEN
        ERROR(Text022);
      Document.OpenPDFFile;
    END;

    PROCEDURE ShowDocFromPostedInv@1000000030(PurchInvHeader@1000000002 : Record 122);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type"::Invoice);
      Document.SETRANGE("Created Doc. ID",PurchInvHeader."Pre-Assigned No.");
      IF NOT Document.FINDFIRST THEN
        ERROR(Text022);
      Document.OpenPDFFile;
    END;

    PROCEDURE ShowDocFromPostedCrMemo@1000000032(PurchCrMemoHeader@1000000002 : Record 124);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type"::"Credit Memo");
      Document.SETRANGE("Created Doc. ID",PurchCrMemoHeader."Pre-Assigned No.");
      IF NOT Document.FINDFIRST THEN
        ERROR(Text022);
      Document.OpenPDFFile;
    END;

    PROCEDURE ShowDocFromVendLedgEntry@1000000034(VendLedgEntry@1000000002 : Record 25);
    VAR
      Document@1000000000 : Record 6085590;
      PurchCrMemoHeader@1000000003 : Record 124;
      PurchInvHeader@1000000004 : Record 122;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");

      IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice THEN BEGIN
        PurchInvHeader.GET(VendLedgEntry."Document No.");
        Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type"::Invoice);
        Document.SETRANGE("Created Doc. ID",PurchInvHeader."Pre-Assigned No.");
      END ELSE IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
        PurchCrMemoHeader.GET(VendLedgEntry."Document No.");
        Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type"::"Credit Memo");
        Document.SETRANGE("Created Doc. ID",PurchCrMemoHeader."Pre-Assigned No.");
      END ELSE
        ERROR(Text022);

      IF NOT Document.FINDFIRST THEN
        ERROR(Text022);
      Document.OpenPDFFile;
    END;

    PROCEDURE ShowDocFromDocFromNoAndDate@161024032(DocNo@161024012 : Code[20];PostingDate@161024013 : Date;ShowError@161024020 : Boolean);
    VAR
      Document@161024019 : Record 6085590;
      PurchInvHeader@161024014 : Record 122;
      PurchCrMemoHeader@161024018 : Record 124;
      PurchHeader@161024017 : Record 38;
      DocSubType@161024015 : Integer;
      DocId@161024016 : Code[20];
    BEGIN
      IF PurchInvHeader.GET(DocNo) AND (PurchInvHeader."Posting Date" = PostingDate) THEN BEGIN
        DocSubType := PurchHeader."Document Type"::Invoice;
        DocId := PurchInvHeader."Pre-Assigned No.";
      END ELSE IF PurchCrMemoHeader.GET(DocNo) AND (PurchCrMemoHeader."Posting Date" = PostingDate) THEN BEGIN
        DocSubType := PurchHeader."Document Type"::"Credit Memo";
        DocId := PurchCrMemoHeader."Pre-Assigned No.";
      END;

      IF DocId = '' THEN BEGIN
        IF ShowError THEN
          ERROR(Text022)
        ELSE
          EXIT;
      END;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",DocSubType);
      Document.SETRANGE("Created Doc. ID",DocId);

      IF NOT Document.FINDFIRST THEN BEGIN
        IF ShowError THEN
          ERROR(Text022)
        ELSE
          EXIT;
      END;
      Document.OpenPDFFile;
    END;

    PROCEDURE GetTotalAmounts@1000000039(VAR PurchHeader@1000000000 : Record 38;VAR TotalAmountExclVAT@1000000001 : Decimal;VAR TotalVATAmount@1000000002 : Decimal);
    VAR
      PurchLine@1000000004 : Record 39;
      TempVATAmountLine@1000000005 : Record 290;
    BEGIN
      PurchLine.CalcVATAmountLines(1,PurchHeader,PurchLine,TempVATAmountLine);
      TotalAmountExclVAT := TempVATAmountLine."VAT Base";
      TotalVATAmount := TempVATAmountLine."VAT Amount";
    END;

    PROCEDURE GetNoOfPurchOrders@161024014(VAR Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      EXIT(PurchHeader.COUNT);
    END;

    PROCEDURE GetNoOfPurchReturnOrders@161024018(VAR Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      EXIT(PurchHeader.COUNT);
    END;

    PROCEDURE LookupNoOfPurchOrders@161024021(VAR Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PAGE.RUN(0,PurchHeader);
    END;

    PROCEDURE LookupNoOfPurchReturnOrders@161024020(VAR Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PAGE.RUN(0,PurchHeader);
    END;

    PROCEDURE GetComparableAmounts@161024016(VAR PurchHeader@161024012 : Record 38;VAR PurchAmountExclVAT@161024013 : Decimal;VAR PurchAmountInclVAT@161024015 : Decimal;VAR DocAmountExclVAT@161024016 : Decimal;VAR DocAmountInclVAT@161024014 : Decimal);
    VAR
      Document@161024019 : Record 6085590;
      VATAmount@161024018 : Decimal;
      ZeroRatedAmount@161024017 : Decimal;
    BEGIN
      GetTotalAmounts(PurchHeader,PurchAmountExclVAT,VATAmount);
      PurchAmountExclVAT := PurchAmountExclVAT + ZeroRatedAmount;
      PurchAmountInclVAT := PurchAmountExclVAT + VATAmount;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF Document.FINDFIRST THEN BEGIN
        DocAmountExclVAT := GetAllAmountsExclVAT(Document);
        DocAmountInclVAT := GetAmountInclVAT(Document);
      END ELSE BEGIN
        DocAmountExclVAT := 0;
        DocAmountInclVAT := 0;
      END;
    END;

    PROCEDURE GetDocumentHeaderAmounts@161024033(PurchHeader@161024014 : Record 38;VAR AmountExclVAT@161024013 : Decimal;VAR AmountInclVAT@161024012 : Decimal;VAR AmountExclVATLCY@161024017 : Decimal;VAR AmountInclVATLCY@161024015 : Decimal) : Boolean;
    VAR
      Document@161024016 : Record 6085590;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      AmountExclVAT := 0;
      AmountInclVAT := 0;
      AmountExclVATLCY := 0;
      AmountInclVATLCY := 0;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      Document.SETRANGE("File Type",Document."File Type"::OCR);
      //**4PS.sn
      IF PurchHeader."Ext. Document ID" <> '' THEN
        Document.SETRANGE("No.", PurchHeader."Ext. Document ID"); //**C017604 gekoppelde bonnen uitsluiten
      //**4PS.en
      IF NOT Document.FINDLAST THEN
        EXIT;

      AmountExclVAT := Document."Amount Excl. VAT";
      AmountInclVAT := Document."Amount Incl. VAT";
      IF PurchHeader."Currency Factor" = 0 THEN
        PurchHeader."Currency Factor" := 1;
      AmountExclVATLCY := ROUND(Document."Amount Excl. VAT" / PurchHeader."Currency Factor");
      AmountInclVATLCY := ROUND(Document."Amount Incl. VAT" / PurchHeader."Currency Factor");

      EXIT(TRUE);
    END;

    PROCEDURE GetPurchStatusAmounts@161024034(VAR PurchHeader@161024016 : Record 38;VAR AmountExclVAT@161024015 : Decimal;VAR AmountInclVAT@161024014 : Decimal;VAR LineAmountExclVAT@161024013 : Decimal;VAR LineAmountInclVAT@161024012 : Decimal);
    VAR
      TempPurchLine@161024023 : TEMPORARY Record 39;
      TotalPurchLine@161024022 : Record 39;
      TotalPurchLineLCY@161024021 : Record 39;
      PurchasePost@161024020 : Codeunit 90;
      TempAmount@161024018 : Decimal;
      VATText@161024017 : Text[30];
    BEGIN
      AmountExclVAT := 0;
      AmountInclVAT := 0;
      LineAmountExclVAT := 0;
      LineAmountInclVAT := 0;

      IF (PurchHeader."No." = '') OR (PurchHeader."Pay-to Vendor No." = '') THEN
        EXIT;
      PurchasePost.GetPurchLines(PurchHeader,TempPurchLine,0);
      CLEAR(PurchasePost);
      PurchasePost.SumPurchLinesTemp(PurchHeader,TempPurchLine,0,TotalPurchLine,TotalPurchLineLCY,TempAmount,VATText);
      LineAmountExclVAT := TotalPurchLine.Amount;
      LineAmountInclVAT := TotalPurchLine."Amount Including VAT";

      GetDocumentHeaderAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,TempAmount,TempAmount);
    END;

    PROCEDURE ChangeDocAmounts@161024035(PurchHeader@161024013 : Record 38);
    VAR
      Document@161024014 : Record 6085590;
      DCAppMgnt@1160040000 : Codeunit 6085722;
      DocAmount@161024012 : Page 6085721;
    BEGIN
      DCAppMgnt.IsApprovalAdminUser(TRUE);

      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      Document.FINDFIRST;

      PurchHeader.FILTERGROUP(2);
      PurchHeader.SETRECFILTER;
      PurchHeader.FILTERGROUP(0);
      DocAmount.SETRECORD(PurchHeader);
      DocAmount.SETTABLEVIEW(PurchHeader);
      DocAmount.LOOKUPMODE(TRUE);
      DocAmount.SetAmounts(Document."Amount Excl. VAT",Document."Amount Incl. VAT");
      IF DocAmount.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;

      DocAmount.GetAmounts(Document."Amount Excl. VAT",Document."Amount Incl. VAT");
      Document.MODIFY;
    END;

    PROCEDURE GetVendOutstaAllocAmt@161024039(VAR Vendor@161024013 : Record 23) : Decimal;
    VAR
      PurchAllocEntry@161024012 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Vendor No.",Open);
      PurchAllocEntry.SETRANGE("Vendor No.",Vendor."No.");
      PurchAllocEntry.SETRANGE(Open,TRUE);
      Vendor.COPYFILTER("Global Dimension 1 Filter",PurchAllocEntry."Shortcut Dimension 1 Code");
      Vendor.COPYFILTER("Global Dimension 2 Filter",PurchAllocEntry."Shortcut Dimension 2 Code");
      Vendor.COPYFILTER("Currency Filter",PurchAllocEntry."Currency Code");
      PurchAllocEntry.CALCSUMS("Amount Including VAT (LCY)");
      EXIT(PurchAllocEntry."Amount Including VAT (LCY)");
    END;

    PROCEDURE DrillDownVendOutstaAllocAmt@161024040(VAR Vendor@161024013 : Record 23);
    VAR
      PurchAllocEntry@161024012 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Vendor No.");
      PurchAllocEntry.SETRANGE("Vendor No.",Vendor."No.");
      PurchAllocEntry.SETRANGE(Open,TRUE);
      Vendor.COPYFILTER("Global Dimension 1 Filter",PurchAllocEntry."Shortcut Dimension 1 Code");
      Vendor.COPYFILTER("Global Dimension 2 Filter",PurchAllocEntry."Shortcut Dimension 2 Code");
      Vendor.COPYFILTER("Currency Filter",PurchAllocEntry."Currency Code");
      PAGE.RUN(0,PurchAllocEntry);
    END;

    PROCEDURE GetPurchAllocAmount@161024041(VAR PurchHeader@161024012 : Record 38;VAR AmountExclVAT@161024013 : Decimal;VAR AmountInclVAT@161024014 : Decimal);
    VAR
      PurchAllocEntry@161024015 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
      PurchAllocEntry.SETRANGE("Source Type",PurchHeader."Document Type");
      PurchAllocEntry.SETRANGE("Source No.",PurchHeader."No.");
      PurchAllocEntry.CALCSUMS(Amount,"Amount Including VAT");
      AmountExclVAT := PurchAllocEntry.Amount;
      AmountInclVAT := PurchAllocEntry."Amount Including VAT";
    END;

    PROCEDURE DrillDownPurchAllocAmount@161024042(VAR PurchHeader@161024012 : Record 38);
    VAR
      PurchAllocEntry@161024015 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
      PurchAllocEntry.SETRANGE("Source Type",PurchHeader."Document Type");
      PurchAllocEntry.SETRANGE("Source No.",PurchHeader."No.");
      PAGE.RUN(0,PurchAllocEntry);
    END;

    PROCEDURE PurchHeaderOnDelete@161024050(PurchHeader@161024012 : Record 38);
    VAR
      PurchAllocHeader@161024013 : Record 6085730;
      PurchDocMatch@1160040000 : Record 6085700;
      WebSearchMgnt@161024014 : Codeunit 6085748;
      DocCapMgt@1160040001 : Codeunit 6085603;
    BEGIN
      IF DocCapMgt.HasLicenseAccessToTable(DATABASE::"Purch. Allocation Header") THEN
        PurchAllocHeader.ReverseAll(PurchHeader);

      IF DocCapMgt.HasLicenseAccessToTable(DATABASE::"Purch. Doc. Match") THEN BEGIN
        IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"] THEN BEGIN
          IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
            PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
          ELSE
            PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Shipment");
          PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchHeader."No.");
          PurchDocMatch.DELETEALL;
        END;
      END;

      IF DocCapMgt.HasLicenseAccessToTable(DATABASE::"Continia User") THEN
        WebSearchMgnt.UpdateWebSearchFromPurchHeader(PurchHeader,TRUE);
    END;

    PROCEDURE PurchHeaderOnModify@161024055(PurchHeader@161024012 : Record 38;xPurchHeader@161024013 : Record 38;Force@161024014 : Boolean);
    VAR
      WebSearchMgnt@161024015 : Codeunit 6085748;
    BEGIN
      IF (PurchHeader."Posting Date" <> xPurchHeader."Posting Date") OR
        (PurchHeader."Document Date" <> xPurchHeader."Document Date") OR
        (PurchHeader."Vendor Invoice No." <> xPurchHeader."Vendor Invoice No.") OR
        (PurchHeader."Vendor Cr. Memo No." <> xPurchHeader."Vendor Cr. Memo No.") OR
        (PurchHeader."Purchaser Code" <> xPurchHeader."Purchaser Code") OR
        (Force)
      THEN
        WebSearchMgnt.UpdateWebSearchFromPurchHeader(PurchHeader,FALSE);
    END;

    PROCEDURE PurchLineOnDelete@1160040000(PurchLine@1160040000 : Record 39);
    VAR
      PurchDocMatch@1160040001 : Record 6085700;
      PurchLineRel@1160040002 : Record 6085702;
    BEGIN
      IF NOT (PurchLine."Document Type" IN
        [PurchLine."Document Type"::Order,
        PurchLine."Document Type"::Invoice,
        PurchLine."Document Type"::"Credit Memo",
        PurchLine."Document Type"::"Return Order"]) THEN
        EXIT;

      IF (PurchLine."Document Type" IN [PurchLine."Document Type"::Order,PurchLine."Document Type"::"Return Order"]) THEN BEGIN
        PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");
        IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
        ELSE
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Order");
        PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchLine."Document No.");
        PurchDocMatch.SETRANGE("Purch. Line No.",PurchLine."Line No.");
        PurchDocMatch.DELETEALL;
      END;

      PurchLineRel.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLineRel.SETRANGE("Document No.",PurchLine."Document No.");
      PurchLineRel.SETRANGE("Document Line No.",PurchLine."Line No.");
      PurchLineRel.DELETEALL;

      PurchLineRel.RESET;
      PurchLineRel.SETRANGE("Related Document Type",PurchLine."Document Type");
      PurchLineRel.SETRANGE("Related Document No.",PurchLine."Document No.");
      PurchLineRel.SETRANGE("Related Line No.",PurchLine."Line No.");
      PurchLineRel.DELETEALL;
    END;

    PROCEDURE PurchLineOnModify@1160040001(PurchLine@1160040000 : Record 39);
    VAR
      PurchDocMatch@1160040001 : Record 6085700;
      PurchDocLineRelMgt@1160040004 : Codeunit 6085761;
      Qty@1160040002 : Decimal;
      PrevQty@1160040003 : Decimal;
    BEGIN
      IF NOT (PurchLine."Document Type" IN [PurchLine."Document Type"::Order,PurchLine."Document Type"::"Return Order"]) THEN
        EXIT;

      PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");
      IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
        PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
      ELSE
        PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Order");
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchLine."Document No.");
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchLine."Line No.");
      IF PurchDocMatch.ISEMPTY THEN
        EXIT;

      PurchDocMatch.CALCSUMS(Quantity);

      IF PurchLine."Outstanding Quantity" >= PurchDocMatch.Quantity THEN
        EXIT;

      // Outstanding Quantity on the Purchase Line is less than the total matched quantity on open documents
      Qty := PurchDocMatch.Quantity;
      PurchDocMatch.ASCENDING(FALSE);
      IF PurchDocMatch.FINDFIRST THEN
        REPEAT
          PrevQty := PurchDocMatch.Quantity;

          IF PurchLine."Outstanding Quantity" <= Qty - PurchDocMatch.Quantity THEN
            PurchDocMatch.DELETE
          ELSE BEGIN
            PurchDocMatch.Quantity := PurchDocMatch.Quantity - (Qty - PurchLine."Outstanding Quantity");
            PurchDocMatch.MODIFY;
          END;

          Qty := Qty - PrevQty;
        UNTIL (PurchDocMatch.NEXT = 0) OR (PurchLine."Outstanding Quantity" >= Qty);
    END;

    PROCEDURE GetResponsibillityCenter@1160760000(VAR Document@161024012 : Record 6085590) : Code[20];
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'RESPCENTER',0));
    END;

    PROCEDURE AmountsWithinTolerance@161024012(Template@161024014 : Record 6085579;Amount1@161024012 : Decimal;Amount2@161024013 : Decimal) : Boolean;
    VAR
      CheckAmt@1160040000 : Decimal;
      DiffAmt@1160040001 : Decimal;
    BEGIN
      DiffAmt := ABS(Amount1 - Amount2);
      IF DiffAmt = 0 THEN
        EXIT(TRUE);

      IF (Amount1 = 0) OR (Amount2 = 0) OR (Template."Allowed Variance %" = 0) THEN
        EXIT(DiffAmt <= Template."Allowed Variance Amount");

      IF ABS(Amount1) < ABS(Amount2)  THEN
        CheckAmt := ABS(Amount1) * Template."Allowed Variance %" / 100
      ELSE
        CheckAmt := ABS(Amount2) * Template."Allowed Variance %" / 100;

      IF CheckAmt > Template."Allowed Variance Amount" THEN
        EXIT(DiffAmt <= CheckAmt)
      ELSE
        EXIT(DiffAmt <= Template."Allowed Variance Amount");
    END;

    PROCEDURE GetCostObject@1000000031(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Line, 'KOSTENDRAGER') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'KOSTENDRAGER', LineNo), 1, 20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'COSTOBJECT', LineNo),1,20));
    END;

    PROCEDURE GetTranslLineInfo@1160040006(TemplNo@1160040000 : Code[20];VendItemNo@1160040001 : Code[150];UseVendItemNos@1160040003 : Boolean;VAR LineTransl@1160040002 : Record 6085584) : Boolean;
    VAR
      ItemCrossRef@1160040004 : Record 5717;
      ItemVendor@1160040006 : Record 99;
      Item@1160040005 : Record 27;
      Template@1160040008 : Record 6085579;
      VendNo@1160040007 : Code[20];
    BEGIN
      LineTransl.SETRANGE("Template No.",TemplNo);
      LineTransl.SETRANGE(Type,LineTransl.Type::"Line Field");
      LineTransl.SETRANGE("Field Code",'NO');
      LineTransl.SETRANGE("Translate From",COPYSTR(VendItemNo,1,MAXSTRLEN(LineTransl."Translate From")));
      LineTransl.SETFILTER("Translate to No.",'<>%1','');
      IF LineTransl.FINDFIRST THEN
        EXIT(TRUE)
      ELSE BEGIN
        Template.GET(TemplNo);
        VendNo := Template.GetSourceID;

        LineTransl.INIT;

        // Look for the item by searcing the Vendor Item No. on the item card
        Item.SETCURRENTKEY("Vendor Item No.","Vendor No.");
        Item.SETRANGE("Vendor Item No.",COPYSTR(VendItemNo,1,MAXSTRLEN(Item."Vendor Item No.")));
        Item.SETRANGE("Vendor No.",VendNo);
        IF Item.FINDFIRST THEN BEGIN
          LineTransl."Translate to Type" := LineTransl."Translate to Type"::Item;
          LineTransl."Translate to No." := Item."No.";
          LineTransl."Translate to UOM Code" := Item."Purch. Unit of Measure";
        END ELSE BEGIN
          ItemCrossRef.SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.");
          ItemCrossRef.SETRANGE("Cross-Reference No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
          ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Vendor);
          ItemCrossRef.SETRANGE("Cross-Reference Type No.",VendNo);
          IF ItemCrossRef.FINDFIRST THEN BEGIN
            LineTransl."Translate to Type" := LineTransl."Translate to Type"::Item;
            LineTransl."Translate to No." := ItemCrossRef."Item No.";
            LineTransl."Translate to UOM Code" := ItemCrossRef."Unit of Measure";
            LineTransl."Translate to Variant Code" := ItemCrossRef."Variant Code";
          END ELSE BEGIN
            ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
            ItemVendor.SETRANGE("Vendor No.",VendNo);
            ItemVendor.SETRANGE("Vendor Item No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemVendor."Vendor Item No.")));
            IF ItemVendor.FINDFIRST THEN BEGIN
              LineTransl."Translate to Type" := LineTransl."Translate to Type"::Item;
              LineTransl."Translate to No." := ItemVendor."Item No.";
              LineTransl."Translate to UOM Code" := Item."Purch. Unit of Measure";
              LineTransl."Translate to Variant Code" := ItemVendor."Variant Code";
            END ELSE BEGIN
              IF UseVendItemNos AND Item.GET(COPYSTR(VendItemNo,1,MAXSTRLEN(Item."No."))) THEN BEGIN
                LineTransl."Translate to Type" := LineTransl."Translate to Type"::Item;
                LineTransl."Translate to No." := Item."No.";
                LineTransl."Translate to UOM Code" := Item."Purch. Unit of Measure";
              END ELSE
                EXIT(FALSE);
            END;
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetTranslLineInfo2@1160040007(Document@1160040000 : Record 6085590;LineNo@1160040001 : Integer;VAR LineTransl@1160040003 : Record 6085584) : Boolean;
    VAR
      Template@1160040002 : Record 6085579;
    BEGIN
      Template.GET(Document."Template No.");
      EXIT(GetTranslLineInfo(Document."Template No.",GetLineAccountNo(Document,LineNo),
        Template."Use Vendor/Customer Item Nos.",LineTransl));
    END;

    PROCEDURE UpdateLineNoTrans@1160040005(VAR Document@1160040000 : Record 6085590;LineNo@1160040002 : Integer;ToType@1160040001 : Integer;ToNo@1000 : Code[20]);
    VAR
      Template@1160040003 : Record 6085579;
      Item@1160040005 : Record 27;
      ItemCrossRef@1160040006 : Record 5717;
      ItemVendor@1160040007 : Record 99;
      LineTransl@1160040008 : Record 6085584;
      VendItemNo@1160040004 : Code[150];
    BEGIN
      Template.GET(Document."Template No.");
      Template.TESTFIELD("Translate Item Nos. to");

      VendItemNo := GetLineAccountNo(Document,LineNo);

      IF VendItemNo = '' THEN
        EXIT;

      ItemCrossRef.SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossRef.SETRANGE("Cross-Reference No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
      ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Vendor);
      ItemCrossRef.SETRANGE("Cross-Reference Type No.",Document.GetSourceID);

      ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
      ItemVendor.SETRANGE("Vendor No.",Document.GetSourceID);
      ItemVendor.SETRANGE("Vendor Item No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemVendor."Vendor Item No.")));

      LineTransl.SETRANGE("Template No.",Template."No.");
      LineTransl.SETRANGE(Type,LineTransl.Type::"Line Field");
      LineTransl.SETRANGE("Field Code",'NO');
      LineTransl.SETRANGE("Translate From",COPYSTR(VendItemNo,1,MAXSTRLEN(LineTransl."Translate From")));

      IF (ToType = LineTransl."Translate to Type"::" ") OR (ToNo = '') THEN BEGIN
        ItemCrossRef.DELETEALL(TRUE);
        ItemVendor.DELETEALL(TRUE);
        LineTransl.DELETEALL(TRUE);
        EXIT;
      END;

      CASE TRUE OF
        (ToType = LineTransl."Translate to Type"::Item) AND
        (Template."Translate Item Nos. to" = Template."Translate Item Nos. to"::"Item Cross Reference"):
          BEGIN
            IF ItemCrossRef.FINDSET(TRUE,TRUE) THEN BEGIN
              IF ItemCrossRef."Item No." <> ToNo THEN BEGIN
                IF NOT CONFIRM(Text002,FALSE,VendItemNo,ItemCrossRef.FIELDCAPTION("Item No."),ItemCrossRef."Item No.") THEN
                  ERROR('');

                ItemCrossRef.DELETE(TRUE);
                ItemCrossRef."Item No." := '';
                ItemCrossRef."Variant Code" := '';
                ItemCrossRef."Unit of Measure" := '';
                ItemCrossRef.VALIDATE("Item No.",ToNo);
                ItemCrossRef.VALIDATE("Unit of Measure",Item."Purch. Unit of Measure");
                ItemCrossRef.INSERT(TRUE);
              END;
            END ELSE BEGIN
              IF (ToNo <> '') AND (ToType <> LineTransl."Translate to Type"::" ") THEN BEGIN
                ItemCrossRef.INIT;
                ItemCrossRef.VALIDATE("Item No.",ToNo);
                ItemCrossRef.VALIDATE("Unit of Measure",Item."Purch. Unit of Measure");
                ItemCrossRef.VALIDATE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Vendor);
                ItemCrossRef.VALIDATE("Cross-Reference Type No.",Document.GetSourceID);
                ItemCrossRef.VALIDATE("Cross-Reference No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
                ItemCrossRef.INSERT(TRUE);
              END;
            END;

          END;

        (ToType = LineTransl."Translate to Type"::Item) AND
        (Template."Translate Item Nos. to" = Template."Translate Item Nos. to"::"Vendor Item"):
          BEGIN
            IF ItemVendor.FINDSET(TRUE,TRUE) THEN BEGIN
              IF ItemVendor."Item No." <> ToNo THEN BEGIN
                IF NOT CONFIRM(Text002,FALSE,VendItemNo,ItemVendor.FIELDCAPTION("Item No."),ItemVendor."Item No.") THEN
                  ERROR('');

                ItemVendor.DELETE(TRUE);
                ItemVendor."Item No." := '';
                ItemVendor."Variant Code" := '';
                ItemVendor.VALIDATE("Item No.",ToNo);
                ItemVendor.INSERT(TRUE);
              END;
            END ELSE BEGIN
              IF (ToNo <> '') AND (ToType <> LineTransl."Translate to Type"::" ") THEN BEGIN
                ItemVendor.RESET;
                ItemVendor.SETRANGE("Vendor No.",Document.GetSourceID);
                ItemVendor.SETRANGE("Item No.",ToNo);
                IF ItemVendor.FINDFIRST THEN BEGIN
                  IF NOT CONFIRM(Text002,FALSE,ToNo,ItemVendor.FIELDCAPTION("Vendor Item No."),ItemVendor."Vendor Item No.") THEN
                    ERROR('');

                  ItemVendor.DELETE(TRUE);
                END;

                ItemVendor.INIT;
                ItemVendor.VALIDATE("Item No.",ToNo);
                ItemVendor.VALIDATE("Vendor No.",Document.GetSourceID);
                ItemVendor.VALIDATE("Vendor Item No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemVendor."Vendor Item No.")));
                ItemVendor.INSERT(TRUE);
              END;
            END;

          END;

        (ToType <> LineTransl."Translate to Type"::Item) OR
        (Template."Translate Item Nos. to" = Template."Translate Item Nos. to"::"Document Capture Line Translation"):
          BEGIN
            IF LineTransl.FINDSET(TRUE,TRUE) THEN BEGIN
              IF NOT (LineTransl."Translate to No." IN ['',ToNo]) THEN BEGIN
                IF NOT CONFIRM(Text002,FALSE,VendItemNo,LineTransl."Translate to Type",LineTransl."Translate to No.") THEN
                  ERROR('');

                LineTransl.VALIDATE("Translate to Type",ToType);
                LineTransl.VALIDATE("Translate to No.",ToNo);
                IF ToType = LineTransl."Translate to Type"::Item THEN BEGIN
                  Item.GET(ToNo);
                  LineTransl.VALIDATE("Translate to UOM Code",Item."Purch. Unit of Measure");
                END;
                LineTransl.MODIFY(TRUE);
              END;
            END ELSE BEGIN
              LineTransl.INIT;
              LineTransl.VALIDATE("Template No.",Template."No.");
              LineTransl.VALIDATE(Type,LineTransl.Type::"Line Field");
              LineTransl.VALIDATE("Field Code",'NO');
              LineTransl.VALIDATE("Translate From",COPYSTR(VendItemNo,1,MAXSTRLEN(LineTransl."Translate From")));
              LineTransl.VALIDATE("Translate to Type",ToType);
              LineTransl.VALIDATE("Translate to No.",ToNo);
              IF ToType = LineTransl."Translate to Type"::Item THEN BEGIN
                Item.GET(ToNo);
                LineTransl.VALIDATE("Translate to UOM Code",Item."Purch. Unit of Measure");
              END;
              LineTransl.INSERT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE CheckOrderRelation@6085573(PurchLine@6085573 : Record 39) : Boolean;
    BEGIN
      IF (PurchLine."Document Type" = PurchLine."Document Type"::Invoice) AND (PurchLine."Receipt No." = 'ORDER') THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetDepartmentLine@1000000040(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Line, 'KOSTENPLAATS') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'KOSTENPLAATS', LineNo),1,20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'DEPARTMENT', LineNo),1,20));
    END;

    PROCEDURE GetJobNoHeader@1000000035(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'PROJECT', 0),1,20));
    END;

    PROCEDURE GetJobNoLine@1000000033(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'PROJECT', LineNo),1,20));
    END;

    PROCEDURE GetVATProdPostGroupHeader@1000000041(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'BTWCODE') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'BTWCODE', 0),1,20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'VATCODE', 0),1,20));
    END;

    PROCEDURE GetVATProdPostGroupLine@1000000042(VAR Document@1000000000 : Record 6085590;LineNo@1000000001 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Line, 'BTWCODE') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'BTWCODE', LineNo),1,20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'VATCODE', LineNo),1,20));
    END;

    PROCEDURE GetAmountBlockedAcc@1000000043(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header,    'BEDRAGGREK') THEN
        EXIT(CaptureMgt.GetDecimal(Document, Field.Type::Header, 'BEDRAGGREK', 0));

      EXIT(CaptureMgt.GetDecimal(Document, Field.Type::Header, 'BLOCKEDAMOUNT', 0));
    END;

    PROCEDURE GetOurVATNo@1000000045(VAR Document@1000000000 : Record 6085590) : Code[30];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'ONSBTWNR') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'ONSBTWNR', 0), 1, 30));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'OURVATNO', 0), 1, 30));
    END;

    PROCEDURE GetBankAccountNo@1000000047(VAR Document@1000000000 : Record 6085590) : Code[50];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'BANKREKNR') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'BANKREKNR', 0),1,50));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'BANKACCOUNTNO', 0),1,50));
    END;

    PROCEDURE GetCompany@1000000044(VAR Document@1000000000 : Record 6085590) : Text[80];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'BEDRIJF') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'BEDRIJF', 0),1,80));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'COMPANY', 0),1,80));
    END;

    PROCEDURE GetUnitOfMeasure@1000000046(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Line, 'EENHEID') THEN
        EXIT(CaptureMgt.GetText(Document, Field.Type::Line, 'EENHEID', LineNo));

      EXIT(CaptureMgt.GetText(Document, Field.Type::Line, 'UNITOM', LineNo));
    END;

    PROCEDURE GetDepartmentHeader@1000000048(VAR Document@1000000000 : Record 6085590) : Code[50];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'KOSTENPLAATS') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'KOSTENPLAATS', 0),1,50));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'DEPARTMENT', 0),1,50));
    END;

    PROCEDURE GetHeaderDescription@1000000049(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'OMSCHRIJVING') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'OMSCHRIJVING', 0),1,20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'DESCRIPTION', 0),1,20));
    END;

    PROCEDURE GetInvoiceNo@1000000052(VAR Document@1000000000 : Record 6085590) : Text[50];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'FACTUURNR') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'FACTUURNR', 0),1,50));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'INVOICENO', 0),1,50));
    END;

    PROCEDURE DocumentExists@1100528200(PurchHeader@1100528200 : Record 38) : Boolean;
    VAR
      Document@1100528201 : Record 6085590;
    BEGIN
      //**4PS
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      EXIT(Document.FINDFIRST);
    END;

    PROCEDURE GetServOrderHeader@1100525001(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS CALL C020511
      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'SERVICEORDER', 0),1,20));
    END;

    PROCEDURE GetServOrderLine@1100525000(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS CALL C020511
      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'SERVICEORDER', LineNo),1,20));
    END;

    PROCEDURE TemplateStep2Approve@1100409000(PurchHeader@1100528200 : Record 38) : Boolean;
    VAR
      Document@1100528201 : Record 6085590;
      Template@1100409000 : Record 6085579;
    BEGIN
      //**4PS CALL C020358
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF Document.FINDFIRST THEN
       IF Template.GET(Document."Template No.") THEN BEGIN
         IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
           EXIT(Template."Purch. Inv. Reg. Step 2" = Template."Purch. Inv. Reg. Step 2"::"Submit for Approval");
         IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo" THEN
           EXIT(Template."Purch. Cr.Memo Reg. Step 2" = Template."Purch. Cr.Memo Reg. Step 2"::"Submit for Approval");
       END;

      EXIT(FALSE);
    END;

    PROCEDURE GetDocumentNoHeaderAmounts@1100525002(ExtDocID@161024014 : Code[20];VAR AmountExclVAT@161024013 : Decimal;VAR AmountInclVAT@161024012 : Decimal) : Boolean;
    VAR
      Document@161024016 : Record 6085590;
    BEGIN
      //**4PS
      AmountExclVAT := 0;
      AmountInclVAT := 0;

      Document.SETRANGE("No.", ExtDocID);
      IF NOT Document.FINDFIRST THEN
        EXIT;

      AmountExclVAT := Document."Amount Excl. VAT";
      AmountInclVAT := Document."Amount Incl. VAT";

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

