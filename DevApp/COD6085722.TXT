OBJECT Codeunit 6085722 DC Approval Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.4.05,4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm,
                TableData 38=rm,
                TableData 122=rm,
                TableData 124=rm,
                TableData 454=rimd,
                TableData 455=ri,
                TableData 6085749=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ForceApprovalWorkflowDisabled@1006 : TextConst 'ENU=There is no supported workflow for force approval.';
      NoReqToDelegateErr@1010 : TextConst 'ENU=There is no approval request to delegate.';
      NoWorkflowEnabledErr@1011 : TextConst 'ENU=This record is not supported by related approval delegation workflow.';
      NoPrecedingApprovalEntry@1035 : TextConst 'ENU=No preceeding approval entry was found.';
      Text001@161024041 : TextConst 'ENU=No open approval entries was found.';
      Text005@161024037 : TextConst 'ENU=Forwarded from %1 to %2';
      Text007@161024035 : TextConst 'ENU=%1 %2 was rejected';
      Text008@161024016 : TextConst 'ENU=%1 %2 was sent back';
      Text009@161024033 : TextConst 'ENU=Send back to %1,Reject';
      Text011@161024027 : TextConst 'ENU=Approval forced by %1';
      Text012@161024026 : TextConst 'ENU=Do you wish to force the approval of %1 %2?';
      Text013@161024025 : TextConst 'ENU=You are not allowed to perform this action.\\In order to perform this action you must be member of the role ''%1''.';
      Text014@161024024 : TextConst 'ENU=Amount Excl. VAT does not match\';
      Text015@161024023 : TextConst 'ENU=Amount Incl. VAT does not match\';
      Text016@161024022 : TextConst 'ENU=" - Imported: %1\"';
      Text017@161024021 : TextConst 'ENU=" - Assigned: %1\"';
      Text018@161024020 : TextConst 'ENU=\Do you want to approve the document anyway?';
      Text019@161024019 : TextConst 'ENU=Approve && Forward,Forward without approval,Forward and send the document back to me after approval';
      Text020@161024018 : TextConst 'ENU=Approved and forwarded from %1 to %2';
      Text022@161024015 : TextConst 'ENU=The invoice was automatically approved.';
      Text023@161024014 : TextConst 'ENU=The credit memo was automatically approved.';
      Text024@161024013 : TextConst 'ENU=%1 %2 was put on hold.';
      Text025@161024012 : TextConst 'ENU=%1 %2 is no longer on hold.';
      Text026@161024028 : TextConst 'ENU=Your approval limit does not allow you to approve this %1.';
      Text027@161024029 : TextConst 'ENU=%1 approved by %2 on behalf of %3.';
      Text029@161024031 : TextConst 'ENU=Imported amount excl. VAT is not the same as the assigned amount excl. VAT.\\Do you want to set imported amount excl. VAT to %1 (assigned)?';
      Text030@6085573 : TextConst 'ENU=Updating ...\\@1@@@@@@@@@@@@@@@@@@@@';
      Text031@6085579 : TextConst 'ENU=must be Open or Created.';
      Text032@6085578 : TextConst 'ENU=Do you want to change %1 to %2?';
      Text033@6085577 : TextConst 'ENU=You can only add a new %1 after the open %1.';
      Text034@6085576 : TextConst 'ENU=Approver %1 was added';
      Text035@6085575 : TextConst 'ENU=Approver %1 changed to %2';
      Text036@6085574 : TextConst 'ENU=Approver %1 was deleted';
      Text037@6085580 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4';
      Text038@6085581 : TextConst 'ENU=You must specify %1 or %2.';
      Text039@1160040001 : TextConst 'ENU=Imported amount incl. VAT is not the same as the assigned amount incl. VAT.\\Do you want to submit the document for approval anyway?';
      AdvAppvlMgt@1002 : Codeunit 6085746;
      PurchDocMgt@1000 : Codeunit 6085709;
      WebSearchMgt@1001 : Codeunit 6085748;
      Text11012001@1100528201 : TextConst;
      Text11012002@1100528200 : TextConst;
      Text11012003@1100528202 : TextConst 'ENU=Specific On Hold Code in the Approval Setup is not set.';
      Text11012004@1100528203 : TextConst 'ENU=%1 %2 was put on hold.';
      Text11012005@1100409000 : TextConst 'ENU=Post %1 %2 not possible because %3 %4.';
      Text11012006@1100525001 : TextConst 'ENU=Rejected and forwarded from %1 to %2';
      SetOpenApprovalEntry@1100525000 : Boolean;
      Text11012007@1100525002 : TextConst 'ENU=The approval has been forwarded.';

    PROCEDURE CreatePurchApprovalRequest@7(PurchHeader@1000 : Record 38) : Boolean;
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(PurchHeader);
      EXIT(CreateApprovalRequests(RecRef));
    END;

    PROCEDURE CreateApprovalRequests@6(RecRef@1000 : RecordRef) Handled : Boolean;
    VAR
      PurchHeaderDCInfo@1005 : Record 6085767;
      PurchHeader@1006 : Record 38;
      ApprovalEntryArgument@1002 : Record 454;
      DCApprovalsBridge@1001 : Codeunit 6085790;
    BEGIN
      IF RecRef.NUMBER = DATABASE::"Purchase Header" THEN BEGIN
        RecRef.SETTABLE(PurchHeader);
        PurchDocSubmittingForApproval(PurchHeader);

        DCApprovalsBridge.InitializeApprovalEntry(RecRef,ApprovalEntryArgument);

        IF PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) <> '' THEN BEGIN
          FindPurchaseApprovers(PurchHeader,ApprovalEntryArgument);
          Handled := TRUE;
        END;

        IF DCApprovalsBridge.GetApprovalType = ApprovalEntryArgument."Approval Type"::"Advanced Approver" THEN BEGIN
          AdvAppvlMgt.SubmitForApproval(PurchHeader);
          Handled := TRUE;
        END;

        IF Handled THEN
          DCApprovalsBridge.InformUserOnStatusChange(RecRef);
      END;

      IF NOT Handled THEN
        Handled := DCApprovalsBridge.CreateApprovalRequestsStandard(RecRef);

      IF (RecRef.NUMBER = DATABASE::"Purchase Header") AND DCApprovalsBridge.IsWorkflowSupported THEN BEGIN
        RecRef.SETTABLE(PurchHeader);
        PurchDocSubmittedForApproval(PurchHeader);
      END;
    END;

    PROCEDURE OnAfterApproveApprovalRequest@161024018(VAR ApprovalEntry@1002 : Record 454);
    VAR
      PurchHeader@161024017 : Record 38;
      PurchHeaderArchive@161024016 : Record 11072057;
      Setup@161024015 : Record 6085573;
      ArchiveMgt@161024014 : Codeunit 5063;
      AdvAppvlMgt@1004 : Codeunit 6085746;
      PurchInvHeader@1100528201 : Record 122;
      PurchCrMemoHdr@1100528200 : Record 124;
    BEGIN
      OnBeforeApproveApprovalRequest(ApprovalEntry);
      //IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN //**4PS.o
      //**4PS.sn
      IF NOT (ApprovalEntry."Table ID" IN [DATABASE::"Purchase Header",
        DATABASE::"Purch. Inv. Header", DATABASE::"Purch. Cr. Memo Hdr."]) THEN
      //**4PS.en
        EXIT;

      //**4PS.sn
      CASE ApprovalEntry."Table ID" OF
      DATABASE::"Purchase Header":
        BEGIN
      //**4PS.en
          IF NOT PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
            EXIT;
      //**4PS.sn
        END;
      DATABASE::"Purch. Inv. Header":
        BEGIN
          IF NOT PurchInvHeader.GET(ApprovalEntry."Document No.") THEN
            EXIT;
          PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
        END;
       DATABASE::"Purch. Cr. Memo Hdr.":
        BEGIN
          IF NOT PurchCrMemoHdr.GET(ApprovalEntry."Document No.") THEN
            EXIT;
          PurchHeader."Document Type" := PurchHeader."Document Type"::"Credit Memo";
        END;
      END;
      //**4PS.en
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      Setup.GET;

      IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN BEGIN //**4PS.n
        IF Setup."Purch: Archive Doc. on Approv." THEN BEGIN
          ArchiveMgt.StorePurchDocument(PurchHeader,FALSE);

          IF NOT GUIALLOWED THEN BEGIN
            PurchHeaderArchive.SETRANGE("Document Type",PurchHeader."Document Type");
            PurchHeaderArchive.SETRANGE("No.",PurchHeader."No.");
            PurchHeaderArchive.FINDLAST;
            PurchHeaderArchive."Archived By" := GetCurrUserID;
            PurchHeaderArchive.MODIFY;
          END;
        END;
      END; //**4PS.n

      IF (ApprovalEntry."Table ID" = DATABASE::"Purchase Header") AND
        (ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver")
      THEN
        AdvAppvlMgt.ApproveApprovalRequest(ApprovalEntry,GetCurrUserID);

      //**4PS.sn
      IF ((ApprovalEntry."Table ID" = DATABASE::"Purch. Inv. Header") OR
          (ApprovalEntry."Table ID" = DATABASE::"Purch. Cr. Memo Hdr.")) AND
        (ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver")
      THEN
        AdvAppvlMgt.ApproveApprovalRequest4PS(ApprovalEntry,GetCurrUserID);
      //**4PS.en

      IF ApprovalEntry."Approver ID" <> GetCurrUserID THEN BEGIN
        CreateAppvlCmtLine(ApprovalEntry."Table ID",ApprovalEntry."Document Type",ApprovalEntry."Document No.",
          STRSUBSTNO(Text027,PurchHeader."Document Type",RemoveDomainName(GetCurrUserID),RemoveDomainName(ApprovalEntry."Approver ID")));

        ApprovalEntry."Approver ID" := GetCurrUserID;
        ApprovalEntry.MODIFY;
      END;

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,GetCurrUserID);
    END;

    PROCEDURE DelegateApprovalRequest@161024013(VAR ApprovalEntry@1001 : Record 454);
    VAR
      UserSetup@161024014 : Record 91;
      ApprovalSharing@161024012 : Record 6085749;
      DCApprovalsBridge@1002 : Codeunit 6085790;
      Selection@161024021 : 'Cancel,ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
    BEGIN
      IF NOT (UPPERCASE(GetCurrUserID) IN [ApprovalEntry."Sender ID",ApprovalEntry."Approver ID"]) THEN BEGIN
        IF NOT IsApprovalAdminUser(FALSE) THEN BEGIN
          FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID);
          ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
          IF ApprovalSharing.ISEMPTY THEN
            IsApprovalAdminUser(TRUE);
        END;
      END;

      UserSetup.GET(GetCurrUserID);

      //**4PS Call C022617 so
      //IF ApprovalEntry."Approver ID" <> UPPERCASE(GetCurrUserID) THEN
      //  Selection := Selection::DelegateWithoutApproval
      //ELSE
      //**4PS Call C022617 so
        Selection := STRMENU(Text019);

      IF Selection = Selection::Cancel THEN
        ERROR('');

      IF UserSetup.GET(UserSetup.Substitute) THEN;

      IF PAGE.RUNMODAL(PAGE::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
        ERROR('');

      DelegateApprovalRequest2(ApprovalEntry,Selection-1,UserSetup."User ID");
    END;

    PROCEDURE DelegateApprovalRequest2@5(VAR ApprovalEntry@1002 : Record 454;Selection@1000 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';NewUserID@1003 : Code[50]);
    VAR
      DCApprovalsBridge@1001 : Codeunit 6085790;
    BEGIN
      CASE Selection OF
        Selection::ApproveAndDelegate:
          BEGIN
            IF DCApprovalsBridge.IsWorkflowSupported THEN BEGIN
              ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
              ApprovalEntry.MODIFY(TRUE);
            END;
            DCApprovalsBridge.ApproveAndDelegate(ApprovalEntry,NewUserID);
          END;
        Selection::DelegateAndSendBack:
          DCApprovalsBridge.DelegateAndSendBack(ApprovalEntry,NewUserID);
        Selection::DelegateWithoutApproval:
          DCApprovalsBridge.DelegateWithoutApproval(ApprovalEntry,NewUserID);
      END;
    END;

    PROCEDURE ApproveAndDelegate@12(VAR ApprovalEntry@1001 : Record 454;NewUserID@1004 : Code[50]);
    VAR
      ApprovalEntry2@1003 : Record 454;
      ApprovalEntry3@1002 : Record 454;
      DCApprovalsBridge@1000 : Codeunit 6085790;
      ApprovalAction@1010 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
      FieldRef@1006 : FieldRef;
      Comment@1007 : Text[80];
      PrevUserID@1009 : Code[50];
      RecreateHierarchy@1008 : Boolean;
    BEGIN
      InitializeDelegationVariables(ApprovalEntry,ApprovalEntry2,NewUserID,PrevUserID,RecreateHierarchy);

      MoveApprovalEntriesForward(ApprovalEntry);

      IF RecreateHierarchy OR (ApprovalEntry."Table ID" = ExpenseTableID) THEN BEGIN
        ApprovalEntry2.SETRANGE("Sequence No.");
        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
        ApprovalEntry2.DELETEALL(TRUE);
      END;

      // Insert the new entry
      ApprovalEntry2 := ApprovalEntry;

      IF DCApprovalsBridge.IsWorkflowSupported THEN
        ApprovalEntry2.Status := ApprovalEntry2.Status::Created
      ELSE
        ApprovalEntry2.Status := ApprovalEntry2.Status::Open;

      ApprovalEntry2."Sequence No." := ApprovalEntry2."Sequence No." + 1;
      ApprovalEntry2."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry2."Approver ID" := NewUserID;
      ApprovalEntry2."Original Approver ID" := GetCurrUserID;
      DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry2);

      IF (ApprovalEntry."Approval Type" <> ApprovalEntry."Approval Type"::"Advanced Approver") AND (RecreateHierarchy) THEN
        DCApprovalsBridge.RecreateApprovalHierachy(ApprovalEntry,NewUserID);

      // Approve entry in version 80 and below
      IF NOT DCApprovalsBridge.IsWorkflowSupported THEN
        DCApprovalsBridge.ApproveApprovalRequest(ApprovalEntry);

      Comment := COPYSTR(STRSUBSTNO(Text020,PrevUserID,NewUserID),1,MAXSTRLEN(Comment));

      OnAfterDelegate(ApprovalEntry,ApprovalEntry2,ApprovalEntry3,NewUserID,RecreateHierarchy,Comment,ApprovalAction::ApproveAndDelegate);
    END;

    PROCEDURE DelegateWithoutApproval@13(VAR ApprovalEntry@1011 : Record 454;NewUserID@1010 : Code[50]);
    VAR
      ApprovalEntry2@1007 : Record 454;
      ApprovalEntry3@1006 : Record 454;
      DCApprovalsBridge@1000 : Codeunit 6085790;
      ApprovalAction@1009 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
      Comment@1004 : Text[80];
      PrevUserID@1003 : Code[50];
      RecreateHierarchy@1002 : Boolean;
    BEGIN
      InitializeDelegationVariables(ApprovalEntry,ApprovalEntry2,NewUserID,PrevUserID,RecreateHierarchy);

      ApprovalEntry3 := ApprovalEntry;
      ApprovalEntry3."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry3."Approver ID" := NewUserID;
      ApprovalEntry3.MODIFY;

      Comment := COPYSTR(STRSUBSTNO(Text005,PrevUserID,NewUserID),1,MAXSTRLEN(Comment));

      IF (ApprovalEntry."Approval Type" <> ApprovalEntry."Approval Type"::"Advanced Approver") AND (RecreateHierarchy) THEN
        DCApprovalsBridge.RecreateApprovalHierachy(ApprovalEntry,NewUserID);

      OnAfterDelegate(ApprovalEntry,ApprovalEntry2,ApprovalEntry3,NewUserID,RecreateHierarchy,Comment,ApprovalAction::DelegateWithoutApproval);
    END;

    PROCEDURE DelegateAndSendBack@14(VAR ApprovalEntry@1011 : Record 454;NewUserID@1010 : Code[50]);
    VAR
      ApprovalEntry2@1007 : Record 454;
      ApprovalEntry3@1006 : Record 454;
      DCApprovalsBridge@1001 : Codeunit 6085790;
      ApprovalAction@1009 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
      Comment@1004 : Text[80];
      PrevUserID@1003 : Code[50];
      RecreateHierarchy@1002 : Boolean;
    BEGIN
      InitializeDelegationVariables(ApprovalEntry,ApprovalEntry2,NewUserID,PrevUserID,RecreateHierarchy);

      ApprovalEntry2.ASCENDING(FALSE);
      IF ApprovalEntry2.FINDFIRST THEN
        REPEAT
          ApprovalEntry3 := ApprovalEntry2;
          IF ApprovalEntry2."Sequence No." = ApprovalEntry."Sequence No." THEN
            ApprovalEntry3.Status := ApprovalEntry3.Status::Created;
          ApprovalEntry3."Sequence No." := ApprovalEntry3."Sequence No." + 1;
          ApprovalEntry3."Last Modified By User ID" := GetCurrUserID;
          ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
          DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry3);
          ApprovalEntry2.DELETE;

          IF ApprovalEntry2.NEXT = 0 THEN
            ApprovalEntry2."Sequence No." := -1;
        UNTIL ApprovalEntry2."Sequence No." < ApprovalEntry."Sequence No.";

      ApprovalEntry2 := ApprovalEntry;
      ApprovalEntry2."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry2."Approver ID" := NewUserID;
      DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry2);

      Comment := STRSUBSTNO(Text005,PrevUserID,NewUserID);

      OnAfterDelegate(ApprovalEntry,ApprovalEntry2,ApprovalEntry3,NewUserID,RecreateHierarchy,Comment,ApprovalAction::DelegateAndSendBack);
    END;

    LOCAL PROCEDURE InitializeDelegationVariables@25(VAR ApprovalEntry@1001 : Record 454;VAR ApprovalEntry2@1006 : Record 454;VAR NewUserID@1009 : Code[50];VAR PrevUserID@1004 : Code[50];VAR RecreateHierarchy@1007 : Boolean);
    VAR
      DCSetup@1000 : Record 6085573;
      PurchHeaderDCInfo@1008 : Record 6085767;
      PurchHeader@1003 : Record 38;
      UserSetup@1005 : Record 91;
      DCApprovalsBridge@1002 : Codeunit 6085790;
    BEGIN
      DCSetup.GET;

      IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN
        PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");

      PrevUserID := ApprovalEntry."Approver ID";

      IF NewUserID = PrevUserID THEN
        ERROR('');

      UserSetup.GET(NewUserID);

      ApprovalEntry2 := ApprovalEntry;

      DCApprovalsBridge.OrderByTableIDDocTypeAndSeq(ApprovalEntry2,TRUE);
      ApprovalEntry2.SETRANGE("Table ID",ApprovalEntry2."Table ID");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry2."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry2."Document No.");

      IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN
        RecreateHierarchy := (DCSetup."Purch.: Recreate Appvl. Hiera.") AND (PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) = '');
    END;

    PROCEDURE AddApproverAfter@29(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntry2@1003 : Record 454;
      UserSetup@1001 : Record 91;
      DCApprovalsBridge@1002 : Codeunit 6085790;
    BEGIN
      IF NOT (ApprovalEntry.Status IN [ApprovalEntry.Status::Created,ApprovalEntry.Status::Open]) THEN
        ApprovalEntry.FIELDERROR(Status,Text031);

      IF PAGE.RUNMODAL(PAGE::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
        ERROR('');

      MoveApprovalEntriesForward(ApprovalEntry);

      ApprovalEntry2 := ApprovalEntry;

      ApprovalEntry2."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry2.Status := ApprovalEntry2.Status::Created;
      ApprovalEntry2."Sequence No." += 1;
      ApprovalEntry2."Approver ID" := UserSetup."User ID";

      DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry2);
    END;

    LOCAL PROCEDURE MoveApprovalEntriesForward@9(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntry2@1001 : Record 454;
      ApprovalEntry3@1002 : Record 454;
      DCApprovalsBridge@1003 : Codeunit 6085790;
    BEGIN
      // Move pending approval entries forward
      ApprovalEntry2 := ApprovalEntry;

      DCApprovalsBridge.OrderByTableIDDocTypeAndSeq(ApprovalEntry2,TRUE);
      ApprovalEntry2.SETRANGE("Table ID",ApprovalEntry2."Table ID");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry2."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry2."Document No.");

      ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry2."Sequence No.");
      ApprovalEntry2.SETFILTER(Status,'<>%1',ApprovalEntry2.Status::Canceled); // Needed in 90
      ApprovalEntry2.ASCENDING(FALSE);
      IF ApprovalEntry2.FINDFIRST THEN
        REPEAT
          ApprovalEntry3 := ApprovalEntry2;
          ApprovalEntry3."Sequence No." := ApprovalEntry3."Sequence No." + 1;
          ApprovalEntry3.Status := ApprovalEntry3.Status::Created;
          ApprovalEntry3."Last Modified By User ID" := GetCurrUserID;
          ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
          DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry3);
          ApprovalEntry2.DELETE;
        UNTIL ApprovalEntry2.NEXT = 0;
    END;

    LOCAL PROCEDURE OnAfterDelegate@26(VAR ApprovalEntry@1002 : Record 454;VAR ApprovalEntry2@1001 : Record 454;VAR ApprovalEntry3@1000 : Record 454;NewUserID@1009 : Code[50];RecreateHierarchy@1003 : Boolean;Comment@1004 : Text[80];ApprovalAction@1007 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack');
    VAR
      DCApprovalsBridge@1006 : Codeunit 6085790;
      NextSeqNo@1005 : Integer;
    BEGIN
      IF ((ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver") OR (RecreateHierarchy)) AND
         (ApprovalAction IN [ApprovalAction::ApproveAndDelegate,ApprovalAction::DelegateWithoutApproval])
      THEN BEGIN
        // This will remove duplicated approvers and make sure that approval entries have the correct sequence
        ApprovalEntry2.ASCENDING(TRUE);
        ApprovalEntry3.COPY(ApprovalEntry2);
        ApprovalEntry3.SETFILTER(Status,'%1|%2|%3',ApprovalEntry3.Status::Created,ApprovalEntry3.Status::Open,
          ApprovalEntry3.Status::Approved);

        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
        IF ApprovalEntry2.FINDSET THEN
          REPEAT
            ApprovalEntry3.SETFILTER("Sequence No.",'<>%1',ApprovalEntry2."Sequence No.");
            ApprovalEntry3.SETRANGE("Approver ID",ApprovalEntry2."Approver ID");
            IF NOT ApprovalEntry3.ISEMPTY THEN
              ApprovalEntry2.DELETE(TRUE);
          UNTIL ApprovalEntry2.NEXT = 0;

        IF DCApprovalsBridge.IsWorkflowSupported AND (ApprovalAction = ApprovalAction::ApproveAndDelegate) THEN BEGIN
          ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Approved);
          ApprovalEntry2.FINDFIRST;
          ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry2."Sequence No.");
        END ELSE BEGIN
          ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
          ApprovalEntry2.FINDFIRST;
        END;

        NextSeqNo := ApprovalEntry2."Sequence No." + 1;

        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
        IF ApprovalEntry2.FINDSET THEN
          REPEAT
            IF ApprovalEntry2."Sequence No." <> NextSeqNo THEN BEGIN
              ApprovalEntry3 := ApprovalEntry2;
              ApprovalEntry3."Sequence No." := NextSeqNo;
              DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry3);
              ApprovalEntry2.DELETE(TRUE);
            END;
            NextSeqNo := NextSeqNo + 1;
          UNTIL ApprovalEntry2.NEXT = 0;
      END;

      CreateAppvlCmtLine(ApprovalEntry."Table ID",ApprovalEntry."Document Type",ApprovalEntry."Document No.",Comment);

      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver" THEN
        AdvAppvlMgt.DelegateApprovalRequest(ApprovalEntry,NewUserID,ApprovalAction = ApprovalAction::ApproveAndDelegate);

      IF ApprovalEntry."Table ID" = DATABASE::"Purchase Header" THEN BEGIN
        WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
        WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,GetCurrUserID);
      END;
    END;

    PROCEDURE FilterApprovalSharingToUser@161024012(VAR ApprovalSharing@161024012 : Record 6085749;_UserId@161024013 : Code[50]) : Boolean;
    BEGIN
      ApprovalSharing.RESET;
      ApprovalSharing.SETCURRENTKEY("Shared to User ID");
      ApprovalSharing.SETRANGE("Shared to User ID",_UserId);
      ApprovalSharing.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharing.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharing.FINDFIRST);
    END;

    PROCEDURE FilterApprovalSharingFromUser@161024020(VAR ApprovalSharing@161024012 : Record 6085749;_UserId@161024013 : Code[50]) : Boolean;
    BEGIN
      ApprovalSharing.RESET;
      ApprovalSharing.SETCURRENTKEY("Owner User ID");
      ApprovalSharing.SETRANGE("Owner User ID",_UserId);
      ApprovalSharing.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharing.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharing.FINDFIRST);
    END;

    PROCEDURE Reject@1000000041(VAR PurchHeader@1004 : Record 38);
    VAR
      ApprovalEntry@1005 : Record 454;
      ApprovalCmtMgnt@161024016 : Codeunit 6085600;
      DCApprovalsBridge@1003 : Codeunit 6085790;
      ApprovalComment@1000000004 : Page 660;
      Answer@161024012 : 'Dialog Cancelled,Send Back,Reject';
    BEGIN
      DCApprovalsBridge.FindApprovalRequestForCurrUser(ApprovalEntry,PurchHeader);

      Answer := SendBackOrRejectApprovalReq(ApprovalEntry);

      IF Answer = Answer::"Dialog Cancelled" THEN
        ERROR('');

      IF Answer = Answer::"Send Back" THEN
        DCApprovalsBridge.SendBackApprovalRequest(ApprovalEntry)
      ELSE
        DCApprovalsBridge.RejectApprovalRequest(ApprovalEntry);

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,GetCurrUserID);

      IF ApprovalEntry.ISEMPTY THEN BEGIN
        IF Answer = Answer::"Send Back" THEN
          MESSAGE(Text008,ApprovalEntry."Document Type",ApprovalEntry."Document No.")
        ELSE
          MESSAGE(Text007,ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      END;
    END;

    PROCEDURE SendBackApprovalRequest@8(ApprovalEntry@1000 : Record 454);
    VAR
      PreceedingApprovalEntry@1003 : Record 454;
      PurchHeader@1005 : Record 38;
      DCApprovalsBridge@1001 : Codeunit 6085790;
      SendMail@1002 : Boolean;
    BEGIN
      ApprovalEntry.Status := ApprovalEntry.Status::Created;
      ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
      ApprovalEntry."Last Modified By User ID" := GetCurrUserID;
      ApprovalEntry.MODIFY;

      IF NOT DCApprovalsBridge.FindPreceedingApprovedApproval(ApprovalEntry,PreceedingApprovalEntry) THEN
        ERROR(NoPrecedingApprovalEntry);

      PreceedingApprovalEntry.Status := ApprovalEntry.Status::Open;
      PreceedingApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
      PreceedingApprovalEntry."Last Modified By User ID" := GetCurrUserID;
      PreceedingApprovalEntry.MODIFY;
    END;

    PROCEDURE SendBackOrRejectApprovalReq@161024025(ApprovalEntry@161024012 : Record 454) : Integer;
    VAR
      ApprovalEntry2@161024013 : Record 454;
      UserSetup@1001 : Record 91;
      Purchaser@1000 : Record 13;
      DCApprovalsBridge@1002 : Codeunit 6085790;
      Answer@161024015 : 'Dialog Cancelled,Send Back,Reject';
    BEGIN
      IF DCApprovalsBridge.FindPreceedingApprovedApproval(ApprovalEntry,ApprovalEntry2) THEN BEGIN
        UserSetup.GET(ApprovalEntry2."Approver ID");
        Purchaser.GET(UserSetup."Salespers./Purch. Code");
        Answer := STRMENU(STRSUBSTNO(Text009,Purchaser.Name))
      END ELSE
        Answer := Answer::Reject;

      EXIT(Answer);
    END;

    PROCEDURE FindPurchaseApprovers@161024032(PurchHeader@161024012 : Record 38;ApprovalEntryArgument@1000 : Record 454);
    VAR
      AppvlFlowLine@161024014 : Record 6085726;
      PurchHeaderDCInfo@1160040000 : Record 6085767;
      UserSetup@1004 : Record 91;
      DCApprovalsBridge@1003 : Codeunit 6085790;
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := DCApprovalsBridge.GetLastSequenceNo(ApprovalEntryArgument);
      PurchHeaderDCInfo.GET(PurchHeader."Document Type",PurchHeader."No.");
      PurchHeaderDCInfo.TESTFIELD("Approval Flow Code");
      AppvlFlowLine.SETRANGE("Approval Flow Code",PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader));
      IF AppvlFlowLine.FINDSET THEN
        REPEAT
          SequenceNo += 1;
          UserSetup.GET(AppvlFlowLine."Approver ID");
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID");
        UNTIL AppvlFlowLine.NEXT = 0;
    END;

    PROCEDURE ForceApproval@161024026(VAR PurchHeader@1000 : Record 38);
    VAR
      ApprovalCmtLine@6085578 : Record 455;
      ApprovalEntry@1003 : Record 454;
      UserSetup@1001 : Record 91;
      DCApprovalsBridge@1006 : Codeunit 6085790;
      PurchRecRef@1002 : RecordRef;
      ApprovalCmtMgnt@1100528200 : Codeunit 6085600;
      ReleasePurchaseDoc@1100525000 : Codeunit 415;
    BEGIN
      IsApprovalAdminUser(TRUE);

      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

      IF NOT CONFIRM(Text012,TRUE,PurchHeader."Document Type",PurchHeader."No.") THEN
        ERROR('');
      ApprovalCmtMgnt.RequestComment(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No."); //**4PS.n

      CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);

      UserSetup.GET(GetCurrUserID);

      PurchRecRef.GETTABLE(PurchHeader);
      DCApprovalsBridge.InitializeApprovalEntry(PurchRecRef,ApprovalEntry);
      MakeApprovalEntry(ApprovalEntry,0,GetCurrUserID);

      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.FINDLAST;
      ApprovalEntry.Status := ApprovalEntry.Status::Approved;
      ApprovalEntry.MODIFY;

      CreateAppvlCmtLine(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",STRSUBSTNO(Text011,GetCurrUserID));

      //**4PS.sn Call C022022
      IF NOT ApprovePurchHeader4PS(PurchHeader)THEN BEGIN
        PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");  //refresh current record
        IF PurchHeader.Status = PurchHeader.Status::Released THEN
          ReleasePurchaseDoc.PerformManualReopen(PurchHeader);
        ApprovalEntry.Status := ApprovalEntry.Status::Open;
        ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        ApprovalEntry."Last Modified By User ID" := USERID;
        ApprovalEntry.MODIFY;
      END;
      //**4PS.en
    END;

    PROCEDURE BuildApprovalEntriesForUser@161024016(VAR TempApprovalEntry@161024014 : TEMPORARY Record 454;TableID@1000 : Integer;IncludeNormalSharing@161024012 : Boolean;IncludeOutOfOfficeSharing@161024016 : Boolean);
    VAR
      ApprovalEntry@161024013 : Record 454;
      ApprovalSharing@161024015 : Record 6085749;
      NextSeqNo@161024017 : Integer;
      i@161024018 : Integer;
    BEGIN
      TempApprovalEntry.RESET;
      TempApprovalEntry.DELETEALL;

      ApprovalEntry.SETCURRENTKEY("Approver ID");
      ApprovalEntry.SETRANGE("Approver ID",GetCurrUserID);
      ApprovalEntry.SETRANGE("Table ID",TableID);

      IF ApprovalEntry.FINDSET THEN
        REPEAT
          TempApprovalEntry := ApprovalEntry;
          TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::Normal;
          TempApprovalEntry.INSERT;
        UNTIL ApprovalEntry.NEXT = 0;

      IF (NOT IncludeNormalSharing) AND (NOT IncludeOutOfOfficeSharing) THEN
        EXIT;

      IF NOT FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID) THEN
        EXIT;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);

      IF ApprovalSharing.FINDSET THEN
        REPEAT
          ApprovalEntry.SETRANGE("Approver ID",ApprovalSharing."Owner User ID");
          IF ApprovalEntry.FINDSET THEN BEGIN
            NextSeqNo := NextSeqNo + 1;
            i := 0;
            CLEAR(TempApprovalEntry);
            TempApprovalEntry."Table ID" := TableID;
            TempApprovalEntry."Document Type" := 6;
            TempApprovalEntry."Sequence No." := NextSeqNo;
            TempApprovalEntry."Approver ID" := ApprovalSharing."Owner User ID";
            IF ApprovalSharing."Sharing Type" = ApprovalSharing."Sharing Type"::Normal THEN
              TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Normal Sharing"
            ELSE
              TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Out of Office Sharing";
            TempApprovalEntry."Temp. Display Sorting" := i;
            TempApprovalEntry.Status := TempApprovalEntry.Status::Open;
            TempApprovalEntry.INSERT(TRUE);

            REPEAT
              i := i + 1;
              TempApprovalEntry := ApprovalEntry;
              IF ApprovalSharing."Sharing Type" = ApprovalSharing."Sharing Type"::Normal THEN
                TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Normal Sharing"
              ELSE
                TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Out of Office Sharing";
              TempApprovalEntry."Temp. Display Sorting" := i;
              TempApprovalEntry.INSERT;
            UNTIL ApprovalEntry.NEXT = 0;
          END;
        UNTIL ApprovalSharing.NEXT = 0;
    END;

    PROCEDURE DrillDownApprovalEntries@1000000033(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      ApprovalEntry.FILTERGROUP(4);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Purch. Approval Req. Entries",ApprovalEntry);
    END;

    PROCEDURE DrillDownApprovalComments@161024017(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalCmt@161024012 : Record 455;
    BEGIN
      ApprovalCmt.FILTERGROUP(4);
      ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalCmt.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalCmt.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalCmt.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Purch. Approval Comment List",ApprovalCmt);
    END;

    PROCEDURE FilterApprovalEntry@1000000042(VAR PurchHeader@1000000000 : Record 38;VAR ApprovalEntry@1000000001 : Record 454;OnlyCurrUser@161024012 : Boolean);
    VAR
      UserFilter@161024013 : Text[1024];
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      IF OnlyCurrUser THEN BEGIN
        UserFilter := GetApprovalSharingToUserFilter(GetCurrUserID);
        IF UserFilter = '' THEN
          ApprovalEntry.SETRANGE("Approver ID",GetCurrUserID)
        ELSE
          ApprovalEntry.SETFILTER("Approver ID",GetCurrUserID + '|' + UserFilter);
      END;
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF NOT ApprovalEntry.FINDFIRST THEN
        ERROR(Text001);
    END;

    PROCEDURE FilterPurchHeaderForApprover@161024030(DocType@6085573 : Integer;ApproverID@161024012 : Code[50];VAR PurchHeader@161024013 : Record 38);
    VAR
      ApprovalSharing@161024014 : Record 6085749;
      NextApproverId@161024015 : Code[50];
    BEGIN
      FilterApprovalSharingToUser(ApprovalSharing,ApproverID);
      IF DocType = -1 THEN
        PurchHeader.SETFILTER("Document Type",'%1|%2',PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo")
      ELSE
        PurchHeader.SETRANGE("Document Type",DocType);
      IF PurchHeader.FINDSET THEN
        REPEAT
          NextApproverId := GetNextApprover(PurchHeader);
          IF NextApproverId = ApproverID THEN
            PurchHeader.MARK(TRUE)
          ELSE BEGIN
            ApprovalSharing.SETRANGE("Owner User ID",NextApproverId);
            IF NOT ApprovalSharing.ISEMPTY THEN
              PurchHeader.MARK(TRUE);
          END;
        UNTIL PurchHeader.NEXT = 0;
      PurchHeader.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetNextApprover@161024027(PurchHeader@161024012 : Record 38) : Code[50];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(ApprovalEntry."Approver ID");
    END;

    PROCEDURE GetApproverDisplayName@1160040000(ApproverID@1160040000 : Code[50]) : Text[250];
    VAR
      ContiniaUser@1160040005 : Record 6086001;
      UserSetup@1160040004 : Record 91;
      SalesPurch@1160040003 : Record 13;
    BEGIN
      IF ContiniaUser.GET(ApproverID) THEN
        EXIT(ContiniaUser.Name)
      ELSE
        IF UserSetup.GET(ApproverID) THEN
          IF SalesPurch.GET(UserSetup."Salespers./Purch. Code") THEN
            EXIT(SalesPurch.Name);

      EXIT(ApproverID);
    END;

    PROCEDURE GetNextApproverName@6085574(PurchHeader@161024012 : Record 38) : Text[250];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(GetApproverDisplayName(ApprovalEntry."Approver ID"));
    END;

    PROCEDURE GetNextApproverSales@1160040001(SalesHeader@161024012 : Record 36) : Code[50];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
      ApprovalEntry.SETRANGE("Document Type",SalesHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",SalesHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(ApprovalEntry."Approver ID");
    END;

    PROCEDURE GetApprovalSharingToUserFilter@161024014(_UserId@161024013 : Code[50]) FilterString : Text[1024];
    VAR
      ApprovalSharing@161024012 : Record 6085749;
    BEGIN
      IF NOT FilterApprovalSharingToUser(ApprovalSharing,_UserId) THEN
        EXIT('XXXXXXXXX');

      IF ApprovalSharing.FINDSET THEN
        REPEAT
          IF FilterString = '' THEN
            FilterString := ApprovalSharing."Owner User ID"
          ELSE
            FilterString := FilterString + '|' + ApprovalSharing."Owner User ID"
        UNTIL ApprovalSharing.NEXT = 0;
    END;

    PROCEDURE GetNoOfApprovalComments@161024019(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalCmt@1000000001 : Record 455;
    BEGIN
      ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalCmt.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalCmt.SETRANGE("Document No.",PurchHeader."No.");
      EXIT(ApprovalCmt.COUNT);
    END;

    PROCEDURE GetNoOfApprovalEntries@1000000035(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      EXIT(ApprovalEntry.COUNT);
    END;

    PROCEDURE GetOutOfOffice@161024021(ApproverId@161024014 : Code[50];VAR ForwardToApproverId@161024015 : Code[50];VAR FromDate@161024013 : Date;VAR ToDate@161024012 : Date) : Boolean;
    VAR
      ApprovalSharing@161024016 : Record 6085749;
    BEGIN
      ApprovalSharing.SETRANGE("Owner User ID",ApproverId);
      ApprovalSharing.SETRANGE("Sharing Type",ApprovalSharing."Sharing Type"::"Out of Office");

      IF NOT ApprovalSharing.FINDFIRST THEN
        EXIT(FALSE);

      ForwardToApproverId := ApprovalSharing."Shared to User ID";
      FromDate := ApprovalSharing."Valid From";
      ToDate := ApprovalSharing."Valid To";
      EXIT(TRUE);
    END;

    PROCEDURE CreateAndInsertApprovalEntry@4(TableID@1003 : Integer;DocType@1000 : Integer;DocNo@1001 : Code[20];ApproverID@1007 : Code[50]) : Boolean;
    VAR
      ApprovalEntry@1006 : Record 454;
      PurchHeader@1002 : Record 38;
      DCApprovalsBridge@1005 : Codeunit 6085790;
      RecRef@1004 : RecordRef;
    BEGIN
      IF TableID = DATABASE::"Purchase Header" THEN BEGIN
        PurchHeader.GET(DocType,DocNo);
        RecRef.GETTABLE(PurchHeader);
        DCApprovalsBridge.InitializeApprovalEntry(RecRef,ApprovalEntry);
        MakeApprovalEntry(ApprovalEntry,0,ApproverID);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE MakeApprovalEntry@23(ApprovalEntryArgument@1007 : Record 454;SequenceNo@1001 : Integer;ApproverId@1003 : Code[50]);
    VAR
      ApprovalEntry@1002 : Record 454;
      DCApprovalsBridge@1000 : Codeunit 6085790;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        IF SequenceNo = 0 THEN
          SequenceNo := DCApprovalsBridge.GetLastSequenceNo(ApprovalEntryArgument) + 1;

        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := GetCurrUserID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := GetCurrUserID;
        "Due Date" := DCApprovalsBridge.GetApprovalDueDate;

        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";

        ApprovalEntry."Approval Type" := DCApprovalsBridge.GetApprovalType();
        ApprovalEntry."Limit Type" := DCApprovalsBridge.GetLimitType();
        "Approval Code" := ApprovalEntryArgument."Approval Code";

        "Original Approver ID" := "Approver ID";

        IF "Table ID" <> DATABASE::"Purchase Header" THEN
          EXIT;

        DCApprovalsBridge.FinishApprovalEntry(ApprovalEntry,ApprovalEntryArgument);
        UpdateApprovalEntry(ApprovalEntry);
        DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry);
      END;
    END;

    PROCEDURE UpdateApprovalEntry@3(VAR ApprovalEntry@1000 : Record 454);
    VAR
      PurchHeader@1010 : Record 38;
      ApprovalsBridge@1007 : Codeunit 6085790;
      AmountExclVAT@1006 : Decimal;
      AmountInclVAT@1005 : Decimal;
      LineAmountExclVAT@1004 : Decimal;
      LineAmountInclVAT@1003 : Decimal;
      AmountExclVATLCY@1002 : Decimal;
      AmountInclVATLCY@1001 : Decimal;
    BEGIN
      ApprovalEntry."Original Approver ID" := ApprovalEntry."Approver ID";

      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN
        EXIT;

      WITH ApprovalEntry DO BEGIN
        PurchHeader.GET("Document Type","Document No.");

        PurchDocMgt.GetPurchStatusAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,LineAmountExclVAT,LineAmountInclVAT);

        IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN // Needed in 9.0.
          IF (("Approver ID" = GetCurrUserID) OR ("Sender ID" = "Approver ID")) AND (NOT (("Table ID" = DATABASE::"Purchase Header") AND
              ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])))
          THEN
            Status := Status::Approved
          ELSE
            Status := Status::Created;

        IF AmountExclVAT = 0 THEN BEGIN
          AmountExclVAT := LineAmountExclVAT;
          AmountInclVAT := LineAmountInclVAT;
        END;

        IF PurchHeader."Currency Factor" = 0 THEN
          PurchHeader."Currency Factor" := 1;

        AmountExclVATLCY := ROUND(AmountExclVAT / PurchHeader."Currency Factor");
        AmountInclVATLCY := ROUND(AmountInclVAT / PurchHeader."Currency Factor");

        Amount := AmountExclVAT;
        "Amount Incl. VAT" := AmountInclVAT;
        "Amount (LCY)" := AmountExclVATLCY;
        "Amount Incl. VAT (LCY)" := AmountInclVATLCY;
      END;
    END;

    PROCEDURE ManuallyInsertAppvlEntry@161024033(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      PurchHeader@161024019 : Record 38;
      ApprovalEntry2@161024013 : Record 454;
      ApprovalEntry3@161024017 : Record 454;
      ApprovalCmtLine@161024025 : Record 455;
      UserSetup@161024022 : Record 91;
      DCApprovalsBridge@1000 : Codeunit 6085790;
      ApprovalAmount@161024023 : Decimal;
      ApprovalAmountLCY@161024024 : Decimal;
      NewSeqNo@161024016 : Integer;
    BEGIN
      IsApprovalAdminUser(TRUE);

      //**4PS.sn
      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN BEGIN
        ManuallyInsertAppvlEntry4PS(ApprovalEntry);
        EXIT;
      END;
      //**4PS.en
      PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETFILTER("Sequence No.",'<%1',ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
      IF ApprovalEntry2.ISEMPTY THEN BEGIN
        MESSAGE(Text033,LOWERCASE(ApprovalEntry.TABLECAPTION));
        EXIT;
      END;

      DCApprovalsBridge.CheckPurchApprovalEnabled();

      UserSetup.GET(ApprovalEntry."Approver ID");

      MakeApprovalEntry(ApprovalEntry,0,ApprovalEntry."Approver ID");

      ApprovalEntry2.SETRANGE(Status);
      ApprovalEntry2.SETRANGE("Sequence No.");
      ApprovalEntry2.FINDLAST;

      IF ApprovalEntry2."Sequence No." <> ApprovalEntry."Sequence No." THEN BEGIN
        ApprovalEntry3 := ApprovalEntry2;
        ApprovalEntry2."Sequence No." := ApprovalEntry."Sequence No.";
        DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry2);
        ApprovalEntry3.DELETE;
      END;

      ApprovalEntry := ApprovalEntry2;

      CreateAppvlCmtLine(
        DATABASE::"Purchase Header",ApprovalEntry."Document Type",ApprovalEntry."Document No.",
        COPYSTR(STRSUBSTNO(Text034,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment)));
    END;

    PROCEDURE ManuallyEditAppvlEntry@161024034(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalEntry2@161024013 : Record 454;
      ApprovalCmtLine@161024014 : Record 455;
    BEGIN
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD("Approver ID");

      ApprovalEntry2 := ApprovalEntry;
      IF NOT ApprovalEntry2.FIND THEN
        EXIT;

      IF ApprovalEntry2."Approver ID" <> '' THEN
        IF NOT CONFIRM(Text032,TRUE,ApprovalEntry.FIELDCAPTION("Approver ID"),ApprovalEntry."Approver ID") THEN
          ERROR('');

      IF NOT (ApprovalEntry.Status IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Created]) THEN
        ApprovalEntry.FIELDERROR(Status,Text031);

      ApprovalEntry2.LOCKTABLE;
      ApprovalEntry2.FIND;
      IF ApprovalEntry2."Approver ID" <> ApprovalEntry."Approver ID" THEN BEGIN
        CreateAppvlCmtLine(
          DATABASE::"Purchase Header",ApprovalEntry."Document Type",ApprovalEntry."Document No.",
          COPYSTR(STRSUBSTNO(Text035,ApprovalEntry2."Approver ID",ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment)));

      //  ApprovalEntry2."Approver ID" := ApprovalEntry."Approver ID"; //**4PS.o C022612
        ApprovalEntry2.VALIDATE("Approver ID", ApprovalEntry."Approver ID"); //**4PS.n C022612
        ApprovalEntry2.MODIFY;
      END;
    END;

    PROCEDURE ManuallyDeleleteAppvlEntry@161024035(ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalCmtLine@161024014 : Record 455;
    BEGIN
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD(Status,ApprovalEntry.Status::Created);

      ApprovalEntry.DELETE(TRUE);

      CreateAppvlCmtLine(
        DATABASE::"Purchase Header",ApprovalEntry."Document Type",ApprovalEntry."Document No.",
        COPYSTR(STRSUBSTNO(Text036,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment)));
    END;

    PROCEDURE PutOnHold@161024049(VAR PurchHeader@161024012 : Record 38);
    VAR
      ApprovalEntry@161024017 : Record 454;
      ApprovalCmtMgt@161024013 : Codeunit 6085600;
    BEGIN
      FilterApprovalEntry(PurchHeader,ApprovalEntry,TRUE);
      ApprovalCmtMgt.RequestComment(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");

      PurchHeader."On Hold" := COPYSTR(GetCurrUserID,1,MAXSTRLEN(PurchHeader."On Hold"));
      PurchHeader.MODIFY(TRUE);

      MESSAGE(Text024,PurchHeader."Document Type",PurchHeader."No.");
    END;

    PROCEDURE RemoveOnHold@161024051(VAR PurchHeader@161024012 : Record 38);
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      FilterApprovalEntry(PurchHeader,ApprovalEntry,TRUE);

      PurchHeader."On Hold" := '';
      PurchHeader.MODIFY(TRUE);

      MESSAGE(Text025,PurchHeader."Document Type",PurchHeader."No.");
    END;

    PROCEDURE SendApprovalEmails@161024015();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Purch. Approval E-Mail");
    END;

    PROCEDURE SetOutOfOffice@161024023(ApproverId@161024012 : Code[50];ForwardToApproverId@161024015 : Code[50];FromDate@161024013 : Date;ToDate@161024014 : Date);
    VAR
      ApprovalSharing@161024016 : Record 6085749;
    BEGIN
      ApprovalSharing.SETRANGE("Owner User ID",ApproverId);
      ApprovalSharing.SETRANGE("Sharing Type",ApprovalSharing."Sharing Type"::"Out of Office");
      ApprovalSharing.DELETEALL;

      IF ((FromDate = 0D) AND (ToDate = 0D)) OR (ForwardToApproverId = '') THEN
        EXIT;

      ApprovalSharing."Owner User ID" := ApproverId;
      ApprovalSharing."Sharing Type" := ApprovalSharing."Sharing Type"::"Out of Office";
      ApprovalSharing."Valid From" := FromDate;
      ApprovalSharing."Valid To" := ToDate;
      ApprovalSharing."Shared to User ID" := ForwardToApproverId;
      ApprovalSharing."Forward E-mails" := TRUE;
      ApprovalSharing."Use Owners Limts & Permissions" := TRUE;
      ApprovalSharing.INSERT(TRUE);
    END;

    PROCEDURE ShowPurchDocFromApprEntry@161024024(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      PurchHeader@161024013 : Record 38;
      PurchInvHeader@1100528204 : Record 122;
      PurchCrMemoHdr@1100528203 : Record 124;
      ApprovePurchaseInvoicesDC@1100528202 : Page 11126514;
      ApproveCreditMemosDC@1100528201 : Page 11126506;
      PostedPurchaseInvoices@1100528200 : Page 11126507;
      PostedPurchaseCrMemos@1100528205 : Page 11126508;
      ApprovalEntry2@1100525000 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
      //**4PS.sn

        ApprovalEntry2."Table ID"  := "Table ID";
        ApprovalEntry2."Document Type" := "Document Type";
        ApprovalEntry2."Document No." := "Document No.";
        ApprovalEntry2."Sequence No.":= "Sequence No.";

        CASE ApprovalEntry."Table ID" OF
          DATABASE::"Purch. Inv. Header":
            BEGIN
              FilterPurchInvHeaderForApprover(ApprovalEntry, ApprovalEntry."Approver ID",PurchInvHeader);
              IF NOT PurchInvHeader.GET("Document No.") THEN
                EXIT;
              IF PurchInvHeader."Invoice Approved" THEN BEGIN
                PurchInvHeader.SETRANGE("Invoice Approved", TRUE);
                PostedPurchaseInvoices.SETTABLEVIEW(PurchInvHeader);
                PostedPurchaseInvoices.SETRECORD(PurchInvHeader);
                PostedPurchaseInvoices.RUN;
              END ELSE BEGIN
                ApprovePurchaseInvoicesDC.SetJournalTemplate(PurchInvHeader."Journal Template");
                ApprovePurchaseInvoicesDC.SETTABLEVIEW(PurchInvHeader);
                ApprovePurchaseInvoicesDC.SETRECORD(PurchInvHeader);
                ApprovePurchaseInvoicesDC.RUN;
              END;
            END;
          DATABASE::"Purch. Cr. Memo Hdr.":
            BEGIN
              FilterPurchCrMemoHdrForApprover(ApprovalEntry, ApprovalEntry."Approver ID",PurchCrMemoHdr);
              IF NOT PurchCrMemoHdr.GET("Document No.") THEN
                EXIT;
              IF PurchCrMemoHdr."Credit Memo Approved" THEN BEGIN
                PurchCrMemoHdr.SETRANGE("Credit Memo Approved", TRUE);
                PostedPurchaseCrMemos.SETTABLEVIEW(PurchCrMemoHdr);
                PostedPurchaseCrMemos.SETRECORD(PurchCrMemoHdr);
                PostedPurchaseCrMemos.RUN;
              END ELSE BEGIN
                ApproveCreditMemosDC.SetJournalTemplate(PurchCrMemoHdr."Journal Template");
                ApproveCreditMemosDC.SETTABLEVIEW(PurchCrMemoHdr);
                ApproveCreditMemosDC.SETRECORD(PurchCrMemoHdr);
                ApproveCreditMemosDC.RUN;
              END;
            END;
          ELSE BEGIN
        //**4PS.en
            FilterPurchHeaderForApprover(ApprovalEntry."Document Type",ApprovalEntry."Approver ID",PurchHeader);
            IF NOT PurchHeader.GET("Document Type","Document No.") THEN
              EXIT;
            CASE "Document Type" OF
             "Document Type"::Quote:
               PAGE.RUN(PAGE::"Purchase Quote",PurchHeader);
              "Document Type"::Order:
                PAGE.RUN(PAGE::"Purchase Order",PurchHeader);
              "Document Type"::Invoice:
                ShowDocumentFromApprovalEntry(PurchHeader);
              "Document Type"::"Credit Memo":
                ShowDocumentFromApprovalEntry(PurchHeader);
              "Document Type"::"Blanket Order":
                PAGE.RUN(PAGE::"Blanket Purchase Order",PurchHeader);
              "Document Type"::"Return Order":
                PAGE.RUN(PAGE::"Purchase Return Order",PurchHeader);
            END;
          END; //**4PS.n
        END; //**4PS.n
        IF GET(ApprovalEntry2."Table ID",ApprovalEntry2."Document Type",ApprovalEntry2."Document No.",ApprovalEntry2."Sequence No.") THEN;
      END;
    END;

    PROCEDURE ShowDocumentFromApprovalEntry@1000000031(VAR PurchHeader@1000000001 : Record 38);
    VAR
      Setup@1000000000 : Record 6085573;
    BEGIN
      Setup.GET;

      IF (Setup."Purch: Use TIFF-Form for Appr.") THEN BEGIN
        CASE PurchHeader."Document Type" OF
          PurchHeader."Document Type"::Invoice:
            PAGE.RUNMODAL(PAGE::"Purch. Invoice With Image",PurchHeader);
          PurchHeader."Document Type"::"Credit Memo":
            PAGE.RUNMODAL(PAGE::"Purch. Credit Memo With Image",PurchHeader);
        END;
      END ELSE BEGIN
        CASE PurchHeader."Document Type" OF
          PurchHeader."Document Type"::Invoice:
            PAGE.RUNMODAL(PAGE::"Purchase Invoice",PurchHeader);
          PurchHeader."Document Type"::"Credit Memo":
            PAGE.RUNMODAL(PAGE::"Purchase Credit Memo",PurchHeader);
        END;
      END;
    END;

    PROCEDURE UpdateApprvlEntriesByApprover@161024031(VAR Entries@161024013 : TEMPORARY Record 6085738);
    VAR
      ApprovalEntry@161024012 : Record 454;
      Window@161024017 : Dialog;
      RecCount@161024018 : Integer;
      i@161024019 : Integer;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Approver ID",Status);
      //ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header"); //**4PS.o
      //**4PS.sn
      ApprovalEntry.SETFILTER("Table ID",'%1|%2|%3', DATABASE::"Purchase Header",
         DATABASE::"Purch. Inv. Header",DATABASE::"Purch. Cr. Memo Hdr.");
      //**4PS.en
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDSET THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          RecCount := ApprovalEntry.COUNT;
          Window.OPEN(Text030);
        END;

        REPEAT
          ApprovalEntry.SETRANGE("Approver ID",ApprovalEntry."Approver ID");

          Entries.INIT;
          Entries."Approver ID" := ApprovalEntry."Approver ID";
          Entries.Name := GetApproverDisplayName(ApprovalEntry."Approver ID");
          Entries.INSERT;

          IF GUIALLOWED THEN BEGIN
            i := i + ApprovalEntry.COUNT;
            Window.UPDATE(1,ROUND(i / RecCount * 10000,1,'>'));
          END;

          ApprovalEntry.FINDLAST;
          ApprovalEntry.SETRANGE("Approver ID");
        UNTIL ApprovalEntry.NEXT = 0;

        Entries.SETFILTER("Due Date Filter",'<%1',TODAY);
        IF Entries.FINDFIRST THEN;

        IF GUIALLOWED THEN
          Window.CLOSE;
      END;
    END;

    PROCEDURE CreateAppvlCmtLine@6085573(TableID@1160040000 : Integer;DocType@1160040001 : Integer;DocNo@1160040002 : Code[20];Comment@6085575 : Text[80]);
    VAR
      ApprovalCmtLine@6085576 : Record 455;
    BEGIN
      ApprovalCmtLine."Table ID" := TableID;
      ApprovalCmtLine."Document Type" := DocType;
      ApprovalCmtLine."Document No." := DocNo;
      ApprovalCmtLine.Comment := Comment;

      ApprovalCmtLine.SETRANGE("Table ID",TableID);
      ApprovalCmtLine.SETRANGE("Document Type",DocType);
      ApprovalCmtLine.SETRANGE("Document No.",DocNo);

      ApprovalCmtLine.INSERT(TRUE);
    END;

    PROCEDURE HasUserDocumentPermission@161024022(ApprovalEntry@161024012 : Record 454) IsValidApprover : Boolean;
    VAR
      ApprovalEntry2@161024014 : Record 454;
      ApprovalSharing@161024016 : Record 6085749;
      UserSetup@161024017 : Record 91;
    BEGIN
      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver" THEN
        EXIT(TRUE);

      IF ApprovalEntry."Approver ID" = GetCurrUserID THEN
        EXIT(TRUE);

      ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry."Sequence No.");
      IF NOT ApprovalEntry2.ISEMPTY THEN
        EXIT(TRUE);

      FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID);
      ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
      IF ApprovalSharing.FINDSET THEN
        REPEAT
          IF ApprovalSharing."Use Owners Limts & Permissions" THEN
            UserSetup.GET(ApprovalSharing."Owner User ID")
          ELSE
            UserSetup.GET(ApprovalSharing."Shared to User ID");

          IF UserSetup."Unlimited Purchase Approval" THEN
            IsValidApprover := TRUE
          ELSE IF UserSetup."Purchase Amount Approval Limit" >= ApprovalEntry."Amount (LCY)" THEN
            IsValidApprover := TRUE
        UNTIL (ApprovalSharing.NEXT = 0) OR IsValidApprover;
    END;

    PROCEDURE LastIndexOf@1160040005(Text@161024012 : Text[1024];CharToFind@161024013 : Text[1];IgnoreCase@161024014 : Boolean) : Integer;
    VAR
      StartIndex@161024015 : Integer;
    BEGIN
      IF IgnoreCase THEN BEGIN
        Text := UPPERCASE(Text);
        CharToFind := UPPERCASE(CharToFind);
      END;

      StartIndex := STRLEN(Text);
      WHILE StartIndex > 0 DO BEGIN
        IF COPYSTR(Text,StartIndex,1) = CharToFind THEN
          EXIT(StartIndex)
        ELSE
          StartIndex -= 1;
      END;
    END;

    PROCEDURE PurchDocSubmittingForApproval@161024029(VAR PurchHeader@1000 : Record 38);
    VAR
      GLSetup@6085573 : Record 98;
      Template@1001 : Record 6085579;
      Document@161024017 : Record 6085590;
      PurchHeaderDCInfo@1160040000 : Record 6085767;
      SkipAmtExclVATTest@1002 : Boolean;
      SkipAmtInclVATTest@1003 : Boolean;
      AmountExclVAT@161024012 : Decimal;
      AmountInclVAT@161024014 : Decimal;
      LineAmountExclVAT@161024015 : Decimal;
      LineAmountInclVAT@161024016 : Decimal;
      PurchaseHeaderDCInfo@1100525001 : Record 6085767;
    BEGIN
      // *********************************************************************************************************************************
      // This function is called when a purchase document is being submitted and BEFORE approval entries are created
      // *********************************************************************************************************************************
      IsApprovalAdminUser(TRUE);

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      IF (PurchHeader."Purchaser Code" = '') AND (PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) = '') THEN
        ERROR(Text038,PurchHeader.FIELDCAPTION("Purchaser Code"),PurchHeaderDCInfo.FIELDCAPTION("Approval Flow Code"));

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      Document.SETRANGE("File Type",Document."File Type"::OCR);
      IF NOT Document.FINDFIRST THEN
        EXIT;

      PurchDocMgt.GetPurchStatusAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,LineAmountExclVAT,LineAmountInclVAT);

      Template.GET(Document."Template No.");

      SkipAmtExclVATTest :=
        (Template."Purch. Amount Approval Valid." =
          Template."Purch. Amount Approval Valid."::"Only Amount Incl. VAT must match imported amounts") OR
        (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");

      SkipAmtInclVATTest :=
        (Template."Purch. Amount Approval Valid." =
          Template."Purch. Amount Approval Valid."::"Only Amount Excl. VAT must match imported amounts") OR
        (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");

      GLSetup.GET;
      //**4PS.sn
      //**4PS Call C020358 sn
      //FIXME
      //ApprovalSetup.GET;
      //IF (ApprovalSetup."Appr. P. Hdr. And P. I. Hdr.") AND (PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) <> '') THEN BEGIN
      //  EXIT;  //Purchase Order Send for Advice to another Approver. Thus the amounts may be incorrect.
      //END;
      //**4PS Call C020358 en
      IF PurchHeader."Ext. Document ID" <> '' THEN
        IF NOT PurchHeader."Manually VAT Posting" THEN BEGIN
          IF (AmountInclVAT <> LineAmountInclVAT) OR (AmountExclVAT <> LineAmountExclVAT) THEN
            ERROR(Text11012002);
        END ELSE
          IF (AmountInclVAT <> LineAmountInclVAT) THEN // Toegestaan om bedrag excl. BTW af te laten wijken.
            ERROR(Text11012002);
      //**4PS.en
      IF (LineAmountInclVAT <> 0 ) AND (ABS(AmountInclVAT - LineAmountInclVAT) <= GLSetup."Max. VAT Difference Allowed") AND
        (AmountExclVAT <> LineAmountExclVAT) AND (NOT SkipAmtExclVATTest) AND GUIALLOWED
      THEN BEGIN
        IF CONFIRM(Text029,TRUE,LineAmountExclVAT) THEN BEGIN
          Document."Amount Excl. VAT" := LineAmountExclVAT;
          Document.MODIFY;
        END;
      END;

      IF (LineAmountInclVAT <> 0 ) AND (ABS(AmountInclVAT - LineAmountInclVAT) > GLSetup."Max. VAT Difference Allowed") AND
        (NOT SkipAmtInclVATTest) AND GUIALLOWED
      THEN BEGIN
        IF NOT CONFIRM(Text039,TRUE,LineAmountExclVAT) THEN
          ERROR('');
      END;
    END;

    PROCEDURE PurchDocSubmittedForApproval@161024038(VAR PurchHeader@1000 : Record 38) AutomaticRelease : Boolean;
    VAR
      Setup@161024013 : Record 6085573;
      GLSetup@6085573 : Record 98;
      PurchLine@161024018 : Record 39;
      PurchLine2@161024029 : Record 39;
      PurchRcptHeader@161024027 : Record 120;
      PurchRcptLine@161024038 : Record 121;
      RetShptHeader@161024028 : Record 6650;
      RetShptLine@1161054000 : Record 6651;
      PurchAllocHeader@161024014 : Record 6085730;
      PurchAllocHeader2@161024016 : Record 6085730;
      PurchAllocLine@161024015 : Record 6085731;
      Document@161024026 : Record 6085590;
      Template@161024025 : Record 6085579;
      ApprovalEntry@161024035 : Record 454;
      DtldApprovalEntry@161024036 : Record 6085744;
      MessageText@161024034 : Text[1024];
      AmountExclVAT@161024022 : Decimal;
      AmountInclVAT@161024021 : Decimal;
      LineAmountExclVAT@161024020 : Decimal;
      LineAmountInclVAT@161024019 : Decimal;
      SourceAmount@161024030 : Decimal;
      NewAmount@161024031 : Decimal;
      HasAmount@161024023 : Boolean;
      SkipAmtExclVATTest@161024032 : Boolean;
      SkipAmtInclVATTest@161024033 : Boolean;
      PurchAllocPosted@161024017 : Boolean;
    BEGIN
      // *********************************************************************************************************************************
      // This function is called when a purchase document is being submitted and AFTER approval entries are created
      // *********************************************************************************************************************************

      Setup.GET;

      PurchDocMgt.GetPurchStatusAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,LineAmountExclVAT,LineAmountInclVAT);
      PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      // *********************************************************************************************************************************
      // AUTO APPROVE
      // *********************************************************************************************************************************
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF Document.FINDFIRST AND (Document."Template No." <> '') THEN BEGIN
        Template.GET(Document."Template No.");
        IF Template."Purch. Auto App. within Var." THEN BEGIN
          PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLine.SETRANGE("Document No.",PurchHeader."No.");
          IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
            PurchLine.SETFILTER("Receipt No.",'<>%1','')
          ELSE
            PurchLine.SETFILTER("Return Shipment No.",'<>%1','');

          IF PurchLine.FINDSET THEN BEGIN
            REPEAT
              IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN BEGIN
                PurchRcptHeader.GET(PurchLine."Receipt No.");
                PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
                PurchLine2.GET(PurchLine2."Document Type"::Order,PurchRcptHeader."Order No.",PurchLine."Receipt Line No.");
                IF PurchLine2.Quantity <> 0 THEN
                  SourceAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * PurchRcptLine.Quantity;
              END ELSE BEGIN
                RetShptHeader.GET(PurchLine."Return Shipment No.");
                RetShptLine.GET(PurchLine."Return Shipment No.",PurchLine."Return Shipment Line No.");
                PurchLine2.GET(PurchLine2."Document Type"::"Return Order",RetShptHeader."Return Order No.",
                  PurchLine."Return Shipment Line No.");
                IF PurchLine2.Quantity <> 0 THEN
                  SourceAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * RetShptLine.Quantity;
              END;

              NewAmount += PurchLine."Line Amount";
            UNTIL PurchLine.NEXT = 0;

            IF Template."Variance Posting Account" <> '' THEN BEGIN
              PurchLine.RESET;
              PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.",PurchHeader."No.");
              PurchLine.SETRANGE(Type,PurchLine.Type::"G/L Account");
              PurchLine.SETRANGE("No.",Template."Variance Posting Account");
              IF PurchLine.FINDSET THEN
                REPEAT
                  NewAmount += PurchLine."Line Amount";
                UNTIL PurchLine.NEXT = 0;
            END;

            IF PurchDocMgt.AmountsWithinTolerance(Template,SourceAmount,NewAmount) THEN BEGIN
              SkipAmtExclVATTest :=
                (Template."Purch. Amount Approval Valid." =
                  Template."Purch. Amount Approval Valid."::"Only Amount Incl. VAT must match imported amounts") OR
                (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");

              SkipAmtInclVATTest :=
                (Template."Purch. Amount Approval Valid." =
                  Template."Purch. Amount Approval Valid."::"Only Amount Excl. VAT must match imported amounts") OR
                (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");

              IF (NOT SkipAmtExclVATTest) AND (AmountExclVAT <> LineAmountExclVAT) THEN
                MessageText := Text014 + STRSUBSTNO(Text016,AmountExclVAT) + STRSUBSTNO(Text017,LineAmountExclVAT);

              GLSetup.GET;
              IF (NOT SkipAmtInclVATTest) AND ((ABS(AmountInclVAT - LineAmountInclVAT) > GLSetup."Max. VAT Difference Allowed")) THEN BEGIN
                IF MessageText <> '' THEN
                  MessageText := MessageText + '\';
                MessageText := MessageText + Text015 + STRSUBSTNO(Text016,AmountInclVAT) + STRSUBSTNO(Text017,LineAmountInclVAT);
              END;

              IF MessageText <> '' THEN
                ERROR(MessageText);

              CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
              AutomaticRelease := TRUE;

              ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
              ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
              ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
              ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
              ApprovalEntry.DELETEALL;

              DtldApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
              DtldApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
              DtldApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
              DtldApprovalEntry.DELETEALL;

              IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
                CreateAppvlCmtLine(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",Text022)
              ELSE
                CreateAppvlCmtLine(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",Text023);
            END;
          END;
        END;
      END;

      IF NOT Setup."Auto. Post Purch. Allocation" THEN
        EXIT;

      // *********************************************************************************************************************************
      // POST ALLOCATION IF CONFIGURED
      // *********************************************************************************************************************************
      PurchAllocHeader.SETCURRENTKEY("Document Type","Document No.");
      PurchAllocHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchAllocHeader.SETRANGE("Document No.",PurchHeader."No.");
      PurchAllocHeader.SETFILTER(Status,'>%1',PurchAllocHeader.Status::Open);
      IF NOT PurchAllocHeader.ISEMPTY THEN
        EXIT;

      PurchAllocHeader.SETRANGE(Status);
      IF PurchAllocHeader.FINDSET THEN
        REPEAT
          PurchAllocLine.SETRANGE("Document No.",PurchAllocHeader."No.");
          PurchAllocLine.SETFILTER(Amount,'>%1',0);
          IF NOT PurchAllocLine.ISEMPTY THEN BEGIN
            PurchAllocHeader2 := PurchAllocHeader;
            CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Post",PurchAllocHeader2);
            PurchAllocPosted := TRUE;
          END;
        UNTIL PurchAllocHeader.NEXT = 0;

      IF Setup."Purch. Alloc. Amounts to Use" = Setup."Purch. Alloc. Amounts to Use"::"Use Lines or Imported Amounts" THEN
        HasAmount := (AmountExclVAT <> 0) OR (LineAmountExclVAT <> 0)
      ELSE
        HasAmount := AmountExclVAT <> 0;

      IF (NOT PurchAllocPosted) AND HasAmount THEN BEGIN
        PurchAllocHeader.INIT;
        PurchAllocHeader."No." := '';
        PurchAllocHeader.INSERT(TRUE);

        PurchAllocHeader.VALIDATE("Document Type",PurchHeader."Document Type");
        PurchAllocHeader.VALIDATE("Document No.",PurchHeader."No.");
        PurchAllocHeader.MODIFY(TRUE);

        PurchAllocHeader.AutoCreateLines;

        CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Post",PurchAllocHeader);
      END;

      PurchAllocHeader.SETRANGE(Status,PurchAllocHeader.Status::Open);
      PurchAllocHeader.DELETEALL(TRUE);
    END;

    PROCEDURE RemoveDomainName@1160040003(UserName@1160040000 : Code[250]) : Text[250];
    BEGIN
      IF STRPOS(UserName,'\') = 0 THEN
        EXIT(UserName);

      EXIT(COPYSTR(UserName,LastIndexOf(UserName,'\',TRUE)+1));
    END;

    PROCEDURE GetCurrUserID@11() : Code[50];
    VAR
      DCApprovalsBridge@1000 : Codeunit 6085790;
    BEGIN
      EXIT(DCApprovalsBridge.GetCurrentUser);
    END;

    PROCEDURE SetCurrUserID@10(NewCurrentUserID@1000 : Code[50]);
    VAR
      DCApprovalsBridge@6085573 : Codeunit 6085790;
    BEGIN
      DCApprovalsBridge.SetCurrentUser(NewCurrentUserID);
    END;

    LOCAL PROCEDURE ExpenseTableID@15() : Integer;
    BEGIN
      EXIT(6086320);
    END;

    PROCEDURE OnBeforeApproveApprovalRequest@161024036(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalEntry2@161024020 : Record 454;
      PurchHeader@161024017 : Record 38;
      PurchLine@6085576 : Record 39;
      Setup@161024018 : Record 6085573;
      GLSetup@6085577 : Record 98;
      Document@161024021 : Record 6085590;
      Template@161024023 : Record 6085579;
      DimMgt@6085575 : Codeunit 408;
      MessageText@161024022 : Text[1024];
      AmountExclVAT@161024016 : Decimal;
      AmountInclVAT@161024015 : Decimal;
      LineAmountExclVAT@161024014 : Decimal;
      LineAmountInclVAT@161024013 : Decimal;
      HasMoreApprovers@161024019 : Boolean;
      SkipAmtExclVATTest@161024024 : Boolean;
      SkipAmtInclVATTest@161024025 : Boolean;
      TableIDArr@6085574 : ARRAY [10] OF Integer;
      NumberArr@6085573 : ARRAY [10] OF Code[20];
    BEGIN
      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN
        EXIT;

      IF NOT PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
        EXIT;

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      //**4PS.so
      //PurchHeader."On Hold" := '';
      //PurchHeader.MODIFY;
      //**4PS.eo

      PurchDocMgt.GetPurchStatusAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,LineAmountExclVAT,LineAmountInclVAT);

      Setup.GET;

      ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry.Status::Created);
      HasMoreApprovers := ApprovalEntry2.FINDFIRST;

      IF NOT HasUserDocumentPermission(ApprovalEntry) THEN
        ERROR(STRSUBSTNO(Text026,LOWERCASE(FORMAT(PurchHeader."Document Type"))));

      IF (NOT HasMoreApprovers) AND (Setup."Check Dimensions on Approval") THEN BEGIN
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER(Type,'>%1',PurchLine.Type::" ");
        PurchLine.SETFILTER("No.",'<>%1','');

        IF PurchLine.FINDSET THEN
          REPEAT
            TableIDArr[1] := DimMgt.TypeToTableID3(PurchLine.Type);
            NumberArr[1] := PurchLine."No.";
            TableIDArr[2] := DATABASE::Job;
            NumberArr[2] := PurchLine."Job No.";
            TableIDArr[3] := DATABASE::"Work Center";
            NumberArr[3] := PurchLine."Work Center No.";
            IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchLine."Dimension Set ID") THEN
              ERROR(
                Text037,
                PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimValuePostingErr);
          UNTIL PurchLine.NEXT = 0;
      END;

      IF HasMoreApprovers AND NOT Setup."Purch: Req. Full Amt. Approval" THEN
        EXIT;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF NOT Document.FINDFIRST THEN
        EXIT;

      IF Document."Template No." = '' THEN
        EXIT;

      Template.GET(Document."Template No.");

      SkipAmtExclVATTest :=
        (Template."Purch. Amount Approval Valid." =
          Template."Purch. Amount Approval Valid."::"Only Amount Incl. VAT must match imported amounts") OR
        (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");

      SkipAmtInclVATTest :=
        (Template."Purch. Amount Approval Valid." =
          Template."Purch. Amount Approval Valid."::"Only Amount Excl. VAT must match imported amounts") OR
        (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");

      IF (NOT SkipAmtExclVATTest) AND (AmountExclVAT <> LineAmountExclVAT) THEN
        MessageText := Text014 + STRSUBSTNO(Text016,AmountExclVAT) + STRSUBSTNO(Text017,LineAmountExclVAT);

      GLSetup.GET;
      IF (NOT SkipAmtInclVATTest) AND ((ABS(AmountInclVAT - LineAmountInclVAT) > GLSetup."Max. VAT Difference Allowed")) THEN BEGIN
        IF MessageText <> '' THEN
          MessageText := MessageText + '\';
        MessageText := MessageText + Text015 + STRSUBSTNO(Text016,AmountInclVAT) + STRSUBSTNO(Text017,LineAmountInclVAT);
      END;

      IF MessageText = '' THEN
        EXIT;

      IF GUIALLOWED THEN
        IF IsApprovalAdminUser(FALSE) THEN BEGIN
          MessageText := MessageText + Text018;
          IF NOT CONFIRM(MessageText,FALSE) THEN
            ERROR('');
          EXIT;
        END;

      IF Setup."Purch: Req. Full Amt. Approval" THEN
        ERROR(MessageText)
      ELSE BEGIN
        IF NOT HasMoreApprovers THEN
          ERROR(MessageText);
      END;
    END;

    PROCEDURE IsApprovalAdminUser@161024028(ShowError@161024014 : Boolean) : Boolean;
    VAR
      DCSetup@161024019 : Record 6085573;
      AccessControl@161024013 : Record 2000000053;
      AppAdminPermCheck@161024018 : Record 6085734;
      User@6085574 : Record 2000000120;
    BEGIN
      IF AppAdminPermCheck.WRITEPERMISSION THEN
        EXIT(TRUE);

      DCSetup.GET;
      DCSetup.TESTFIELD("Approval Administrator Role ID");

      User.SETCURRENTKEY("User Name");
      User.SETRANGE("User Name",GetCurrUserID);

      IF NOT User.FINDFIRST THEN
        EXIT(FALSE);

      IF AccessControl.GET(User."User Security ID",DCSetup."Approval Administrator Role ID") THEN
        EXIT(TRUE);

      IF AccessControl.GET(User."User Security ID",DCSetup."Approval Administrator Role ID",COMPANYNAME) THEN
        EXIT(TRUE);

      IF ShowError THEN
        ERROR(Text013,DCSetup."Approval Administrator Role ID");
    END;

    PROCEDURE GetApprovalHyperlink@6085576(_UserId@161024017 : Code[50]) : Text[1024];
    VAR
      COSetup@6085575 : Record 6086500;
      DCSetup@161024016 : Record 6085573;
      ContiniaUserSetup@161024018 : Record 6086002;
      ActiveSession@6085573 : Record 2000000110;
      ServerInstance@6085574 : Record 2000000112;
      ServiceInstanceFound@1100525000 : Boolean;
    BEGIN
      COSetup.GET;
      DCSetup.GET;

      IF ContiniaUserSetup.GET(_UserId) THEN
        EXIT(STRSUBSTNO('%1/%2/purchase/approval',COSetup."Web Site Url",LOWERCASE(DCSetup."Company Code")));

      ActiveSession.SETRANGE("Session ID",SESSIONID);
      ActiveSession.FINDFIRST;
      //ServerInstance.GET(ActiveSession."Server Instance ID"); //**4PS.o
      //**4PS.sn
      IF NOT ServerInstance.GET(ActiveSession."Server Instance ID") THEN BEGIN
        ServiceInstanceFound := FALSE;
        REPEAT
          IF ActiveSession.NEXT <> 0 THEN
            ServiceInstanceFound := ServerInstance.GET(ActiveSession."Server Instance ID")
          ELSE
            ServiceInstanceFound := TRUE;
        UNTIL ServiceInstanceFound;
      END;
      //**4PS.en

      EXIT(STRSUBSTNO(Text033,ServerInstance."Server Computer Name",ServerInstance."Server Port",
        ServerInstance."Server Instance Name",COMPANYNAME,6085710));
    END;

    PROCEDURE ApprovePurchHeader4PS@1000000011(VAR PurchHeader@1000000000 : Record 38) : Boolean;
    VAR
      DCSetup@1000000006 : Record 6085573;
      SalesHeader@1000000008 : Record 36;
      PurchDocMgnt@1000000001 : Codeunit 6085709;
      AmountExclVAT@1000000005 : Decimal;
      AmountInclVAT@1000000004 : Decimal;
      LineAmountExclVAT@1000000003 : Decimal;
      LineAmountInclVAT@1000000002 : Decimal;
      AutomaticApprovalstartUp@1100409000 : Boolean;
      PurchHeaderDCInfo@1100528200 : Record 6085767;
    BEGIN
      //**4PS
      PurchHeader.FIND('=');

      //FIXME
      //ApprovalSetup.GET;//CALL C020358

      IF PurchHeader."Ext. Document ID" <> '' THEN BEGIN
        IF PurchDocMgnt.DocumentExists(PurchHeader) THEN BEGIN
          AutomaticApprovalstartUp := PurchDocMgnt.TemplateStep2Approve(PurchHeader); //CALL C020358
          //**4PS Call C020358 sn
          //FIXME
          //IF NOT (
          //     (ApprovalSetup."Appr. P. Hdr. And P. I. Hdr.") AND (PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) <> '')
          //       )
          //THEN BEGIN
          // NOT Purchase Order Send for Advice to another Approver. Thus the amounts may be incorrect.
          //**4PS Call C020358 en
            PurchDocMgnt.GetPurchStatusAmounts(PurchHeader, AmountExclVAT, AmountInclVAT, LineAmountExclVAT, LineAmountInclVAT);
            IF NOT PurchHeader."Manually VAT Posting" THEN BEGIN
              IF (AmountInclVAT <> LineAmountInclVAT) OR (AmountExclVAT <> LineAmountExclVAT) THEN
                ERROR(Text11012002);
            END ELSE
              IF (AmountInclVAT <> LineAmountInclVAT) THEN // Toegestaan om bedrag excl. BTW af te laten wijken.
                ERROR(Text11012002);
          //FIXME END;//**4PS Call C020358
        END;
      END;

      IF AutomaticApprovalstartUp THEN BEGIN//CALL C020358
      //FIXME
      //  IF NOT ApprovalSetup."Purch. Hdr. Inv. Keep On Hold" THEN //CALL C020358
      //    PurchHeader.VALIDATE("On Hold", '');
        PurchHeader.MODIFY(TRUE);
      //CALL C020358 n
      END ELSE BEGIN
      //FIXME
      //  IF NOT ApprovalSetup."Purch. Hdr. Inv. Keep On Hold" THEN
      //    PurchHeader.VALIDATE("On Hold", '');
        PurchHeaderDCInfo.UpdateApprovalFlowCode(PurchHeader,'');
        PurchHeader.MODIFY(TRUE);
      END;
      //CALL C020358

      DCSetup.GET;
      IF DCSetup."Purch: Automatic Post" THEN BEGIN
      //  IF ApprovalMgt.PrePostApprovalCheck(SalesHeader, PurchHeader) THEN  //**4PS Call C022022 old
      //    CODEUNIT.RUN(CODEUNIT::"Purch.-Post", PurchHeader);                //**4PS Call C022022 old
      //**4PS Call C022022 sn
      //FIXME
      //  IF NOT ApprovalMgt.PrePostApprovalCheck(SalesHeader, PurchHeader) THEN
      //    EXIT(FALSE);
        COMMIT;
        IF NOT CODEUNIT.RUN(CODEUNIT::"Purch.-Post", PurchHeader) THEN BEGIN
          MESSAGE('%1', GETLASTERRORTEXT);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
      //**4PS Call C022022 en
    END;

    PROCEDURE ApprovePurchInvHeader4PS@1100528209(VAR PurchInvHeader@1100528200 : Record 122);
    VAR
      VendLedgEntry@1100528201 : Record 25;
      PostInvoiceApproval@1100409000 : Codeunit 11012027;
      ApprovalEntry@1100528203 : Record 454;
      InvoiceApprovalLine@1100409001 : Record 11012032;
    BEGIN
      //**4PS
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      VendLedgEntry.SETRANGE("Document Type", VendLedgEntry."Document Type"::Invoice);
      VendLedgEntry.SETRANGE("Vendor No.",PurchInvHeader."Pay-to Vendor No.");
      IF VendLedgEntry.FIND('-') THEN BEGIN
        VendLedgEntry.VALIDATE("On Hold", '');
        VendLedgEntry.MODIFY;
      END;

      PurchInvHeader.FIND('=');

      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      //FIXME
      //ApprovalMgt.MoveApprvalEntryToPosted(ApprovalEntry,DATABASE::"Purch. Inv. Header",PurchInvHeader."No.");
      //ApprovalMgt.DeleteApprovalEntry(DATABASE::"Purch. Inv. Header",ApprovalEntry."Document Type"::Invoice,PurchInvHeader."No.");

      IF NOT PurchInvHeader."Invoice Approved" THEN BEGIN
        PurchInvHeader.AddToDMSWorkFlow();
        IF NOT PurchInvHeader.PostingAllowedInDMSStatus THEN
          MESSAGE(Text11012005, PurchInvHeader.TABLECAPTION, PurchInvHeader."No.",
                  PurchInvHeader.FIELDCAPTION("DMS Status"),PurchInvHeader."DMS Status")
        ELSE BEGIN
          InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchInvHeader."Journal Template");
          InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Purchase Invoice");
          InvoiceApprovalLine.SETRANGE("Document No.", PurchInvHeader."No.");
          IF InvoiceApprovalLine.FINDFIRST THEN
            PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
        END;
      END;

      //**4PS CALL C018917 sn
      ApprovalEntry.RESET;
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      IF ApprovalEntry.ISEMPTY THEN
        WebSearchMgt.UpdateWebSearchFromInvoice2(PurchInvHeader);
      //**4PS CALL C018916 en
    END;

    PROCEDURE ApprovePurchCrMemo4PS@1100528210(PurchCrMemoHdr@1100528200 : Record 124);
    VAR
      VendLedgEntry@1100528201 : Record 25;
      PostInvoiceApproval@1100409001 : Codeunit 11012027;
      ApprovalEntry@1100528203 : Record 454;
      InvoiceApprovalLine@1100409000 : Record 11012032;
    BEGIN
      //**4PS
      PurchCrMemoHdr.FIND('=');
      PurchCrMemoHdr.VALIDATE("On Hold", '');
      PurchCrMemoHdr.MODIFY(TRUE);

      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      VendLedgEntry.SETRANGE("Document Type", VendLedgEntry."Document Type"::"Credit Memo");
      VendLedgEntry.SETRANGE("Vendor No.",PurchCrMemoHdr."Pay-to Vendor No.");
      IF VendLedgEntry.FIND('-') THEN BEGIN
        VendLedgEntry."On Hold" := PurchCrMemoHdr."On Hold";
        VendLedgEntry.MODIFY;
      END;

      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::"Credit Memo");
      ApprovalEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      //FIXME
      //ApprovalMgt.MoveApprvalEntryToPosted(ApprovalEntry,DATABASE::"Purch. Cr. Memo Hdr.",PurchCrMemoHdr."No.");
      //ApprovalMgt.DeleteApprovalEntry(DATABASE::"Purch. Cr. Memo Hdr.",ApprovalEntry."Document Type"::"Credit Memo",PurchCrMemoHdr."No.");

      IF NOT PurchCrMemoHdr."Credit Memo Approved" THEN BEGIN
        PurchCrMemoHdr.AddToDMSWorkFlow();
        IF NOT PurchCrMemoHdr.PostingAllowedInDMSStatus THEN
          MESSAGE(Text11012005, PurchCrMemoHdr.TABLECAPTION, PurchCrMemoHdr."No.",
                  PurchCrMemoHdr.FIELDCAPTION("DMS Status"),PurchCrMemoHdr."DMS Status")
        ELSE BEGIN
          InvoiceApprovalLine.SETRANGE("Journal Template Name", PurchCrMemoHdr."Journal Template");
          InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Credit Memo");
          InvoiceApprovalLine.SETRANGE("Document No.", PurchCrMemoHdr."No.");
          IF InvoiceApprovalLine.FINDFIRST THEN
            PostInvoiceApproval.Post(InvoiceApprovalLine,FALSE);
        END;
      END;

      //**4PS CALL C018917 sn
      ApprovalEntry.RESET;
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::"Credit Memo");
      ApprovalEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      IF ApprovalEntry.ISEMPTY THEN
        WebSearchMgt.UpdateWebSearchFromCrMemo2(PurchCrMemoHdr);
      //**4PS CALL C018916 en
    END;

    PROCEDURE RejectPurchInvHeader4PS@1100528200(VAR PurchInvHeader@1100528201 : Record 122);
    VAR
      ApprovalEntry@1000000002 : Record 454;
      ApprovalCmtMgnt@161024016 : Codeunit 6085600;
      ApprovalComment@1000000004 : Page 660;
      Answer@161024012 : 'Dialog Cancelled,Send Back,Reject';
      DummyApprovalEntry@1100528200 : Record 454;
      UserSetup@1100525000 : Record 91;
    BEGIN
      //**4PS
      //FIXME
      {
      FilterApprovalEntry4PS(2,PurchInvHeader."No.",ApprovalEntry,TRUE);

      Answer := SendBackOrRejectApprovalReq(ApprovalEntry);
      IF Answer = Answer::"Dialog Cancelled" THEN
        ERROR('');


      ApprovalSetup.GET;

      //CALL C020011 sn
      IF (Answer = Answer::Reject) AND (ApprovalSetup."Reject and Delegate") THEN BEGIN
        UserSetup.GET(USERID);
        IF UserSetup.GET(UserSetup.Substitute) THEN;

        IF PAGE.RUNMODAL(PAGE::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
          ERROR('');
      END;
      //CALL C020011 en

      IF ApprovalSetup."Request Rejection Comment" THEN
        ApprovalCmtMgnt.RequestComment4PS(ApprovalEntry."Document Type"::Invoice,PurchInvHeader."No.");

      IF Answer = Answer::"Send Back" THEN
        SendBackApprovalRequest(ApprovalEntry)
      ELSE
        IF NOT ApprovalSetup."Reject and Delegate" THEN                          //CALL C020011 n
          ApprovalMgt.RejectApprovalRequest(ApprovalEntry)
        ELSE                                                                     //CALL C020011 n
          RejectAndDelegateApprReq4PS(ApprovalEntry,UserSetup."User ID",USERID); //CALL C020011 n

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,USERID);

      DummyApprovalEntry."Document Type" := DummyApprovalEntry."Document Type"::Invoice;
      IF ApprovalEntry.ISEMPTY THEN BEGIN
        IF Answer = Answer::"Send Back" THEN
          MESSAGE(Text008, DummyApprovalEntry."Document Type",PurchInvHeader."No.")
        ELSE
          MESSAGE(Text007, DummyApprovalEntry."Document Type",PurchInvHeader."No.");
      END;
      }
    END;

    PROCEDURE RejectPurchCrMemoHdr4PS@1100528201(VAR PurchCrMemoHdr@1100528200 : Record 124);
    VAR
      ApprovalEntry@1000000002 : Record 454;
      ApprovalCmtMgnt@161024016 : Codeunit 6085600;
      ApprovalComment@1000000004 : Page 660;
      Answer@161024012 : 'Dialog Cancelled,Send Back,Reject';
      DummyApprovalEntry@1100528201 : Record 454;
      UserSetup@1100525000 : Record 91;
    BEGIN
      //**4PS
      //FIXME
      {
      FilterApprovalEntry4PS(3, PurchCrMemoHdr."No.",ApprovalEntry,TRUE);

      Answer := SendBackOrRejectApprovalReq(ApprovalEntry);

      IF Answer = Answer::"Dialog Cancelled" THEN
        ERROR('');

      ApprovalSetup.GET;

      //CALL C020011 sn
      IF (Answer = Answer::Reject) AND (ApprovalSetup."Reject and Delegate") THEN BEGIN

        UserSetup.GET(USERID);
        IF UserSetup.GET(UserSetup.Substitute) THEN;

        IF PAGE.RUNMODAL(PAGE::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
          ERROR('');

      END;
      //CALL C020011 en


      IF ApprovalSetup."Request Rejection Comment" THEN
        ApprovalCmtMgnt.RequestComment4PS(ApprovalEntry."Document Type"::"Credit Memo",PurchCrMemoHdr."No.");

      IF Answer = Answer::"Send Back" THEN
        SendBackApprovalRequest(ApprovalEntry)
      ELSE
        IF NOT ApprovalSetup."Reject and Delegate" THEN                          //CALL C020011 n
          ApprovalMgt.RejectApprovalRequest(ApprovalEntry)
        ELSE                                                                     //CALL C020011 n
          RejectAndDelegateApprReq4PS(ApprovalEntry,UserSetup."User ID",USERID); //CALL C020011 n

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,USERID);

      DummyApprovalEntry."Document Type" := DummyApprovalEntry."Document Type"::"Credit Memo";
      IF ApprovalEntry.ISEMPTY THEN BEGIN
        IF Answer = Answer::"Send Back" THEN
          MESSAGE(Text008,DummyApprovalEntry."Document Type",PurchCrMemoHdr."No.")
        ELSE
          MESSAGE(Text007,DummyApprovalEntry."Document Type",PurchCrMemoHdr."No.");
      END;
      }
    END;

    PROCEDURE RejectAndDelegateApprReq4PS@1100525000(VAR ApprovalEntry@161024015 : Record 454;NewUserId@161024018 : Code[50];CurrUserId@161024026 : Code[50]);
    VAR
      PurchHeader@161024012 : Record 38;
      DCSetup@161024017 : Record 6085573;
      ApprovalEntry2@161024024 : Record 454;
      ApprovalEntry3@161024025 : Record 454;
      AdvAppvlMgt@161024027 : Codeunit 6085746;
      Comment@161024022 : Text[80];
      PrevUserId@161024020 : Code[50];
      NextSeqNo@161024029 : Integer;
      RecreateHierarchy@161024030 : Boolean;
      PurchInvHeader@1100528200 : Record 122;
      PurchCrMemoHdr@1100528201 : Record 124;
      ApprovalCmtMgnt@1100528202 : Codeunit 6085600;
      ApprovalCmtLine@1100525000 : Record 455;
      PurchHeaderDCInfo@1100525001 : Record 6085767;
      PurchInvHeaderDCInfo@1100525003 : Record 6085769;
      PurchCrMemoHdrDCInfo@1100525002 : Record 6085770;
    BEGIN
      //**4PS CALL C020011
      //FIXME
      {
      DCSetup.GET;
      ApprovalSetup.GET;

      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purchase Header":
        BEGIN
          PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");
          IF ApprovalSetup."Request Delegation Comment" THEN
            ApprovalCmtMgnt.RequestComment(PurchHeader);
        END;
        DATABASE::"Purch. Inv. Header":
        BEGIN
          PurchInvHeader.GET(ApprovalEntry."Document No.");
          IF ApprovalSetup."Request Delegation Comment" THEN
            ApprovalCmtMgnt.RequestComment4PS(2, PurchInvHeader."No.");
        END;
        DATABASE::"Purch. Cr. Memo Hdr.":
        BEGIN
          PurchCrMemoHdr.GET(ApprovalEntry."Document No.");
          IF ApprovalSetup."Request Delegation Comment" THEN
            ApprovalCmtMgnt.RequestComment4PS(3,PurchCrMemoHdr."No.");
        END;
      END;

      PrevUserId := ApprovalEntry."Approver ID";

      IF NewUserId = PrevUserId THEN
        ERROR('');

      UserSetup.GET(NewUserId);

      ApprovalTempl.SETCURRENTKEY("Table ID","Document Type",Enabled);
      ApprovalTempl.SETRANGE("Table ID",ApprovalEntry."Table ID");
      ApprovalTempl.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalTempl.SETRANGE(Enabled,TRUE);
      ApprovalTempl.FINDFIRST;

      ApprovalEntry2 := ApprovalEntry;
      ApprovalEntry2.SETRANGE("Table ID",ApprovalEntry2."Table ID");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry2."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry2."Document No.");

      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purchase Header":
        BEGIN
          RecreateHierarchy := (DCSetup."Purch.: Recreate Appvl. Hiera.") AND  (PurchHeaderDCInfo.GetApprovalFlowCode(PurchHeader) = '');
        END;
        DATABASE::"Purch. Inv. Header":
        BEGIN
          RecreateHierarchy := (DCSetup."Purch.: Recreate Appvl. Hiera.") AND (PurchInvHeaderDCInfo.GetApprovalFlowCode(PurchInvHeader) = '');
        END;
        DATABASE::"Purch. Cr. Memo Hdr.":
        BEGIN
          RecreateHierarchy := (DCSetup."Purch.: Recreate Appvl. Hiera.") AND (PurchCrMemoHdrDCInfo.GetApprovalFlowCode(PurchCrMemoHdr) = '');
        END;
      END;


      // Move pending approval entries forward (2 steps)
      ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry2."Sequence No.");
      ApprovalEntry2.ASCENDING(FALSE);
      IF ApprovalEntry2.FINDFIRST THEN
        REPEAT
          ApprovalEntry3 := ApprovalEntry2;
          ApprovalEntry3."Sequence No." := ApprovalEntry3."Sequence No." + 20000;
          ApprovalEntry3."Last Modified By ID" := CurrUserId;
          ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
          ApprovalEntry3.INSERT;
          ApprovalEntry2.DELETE;
        UNTIL ApprovalEntry2.NEXT = 0;

      IF RecreateHierarchy THEN BEGIN
        ApprovalEntry2.SETRANGE("Sequence No.");
        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
        ApprovalEntry2.DELETEALL(TRUE);
      END;

      // Insert the new entry currentuserid
      ApprovalEntry2 := ApprovalEntry;
      ApprovalEntry2.Status := ApprovalEntry2.Status::Created;
      ApprovalEntry2."Sequence No." := ApprovalEntry2."Sequence No." + 20000;
      ApprovalEntry2."Last Modified By ID" := USERID;
      ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry2."Approver ID" := CurrUserId;
      ApprovalEntry2."Original Approver ID" := CurrUserId;
      ApprovalEntry2.INSERT;

      // Insert the next entry newuserid
      ApprovalEntry2 := ApprovalEntry;
      ApprovalEntry2.Status := ApprovalEntry.Status;
      ApprovalEntry2."Sequence No." := ApprovalEntry2."Sequence No." + 10000;
      ApprovalEntry2."Last Modified By ID" := USERID;
      ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
      ApprovalEntry2."Approver ID" := NewUserId;
      ApprovalEntry2."Original Approver ID" := NewUserId;
      ApprovalEntry2.INSERT;

      //Reject the existing entry currentuserid
      ApprovalEntry.Status := ApprovalEntry.Status::Rejected;
      ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
      ApprovalEntry."Last Modified By ID" := USERID;
      ApprovalEntry.MODIFY;


      IF (ApprovalTempl."Approval Type" <> ApprovalTempl."Approval Type"::"Advanced Approver") AND (RecreateHierarchy) THEN BEGIN
        CASE ApprovalEntry."Table ID" OF
          DATABASE::"Purchase Header":
          BEGIN
            // Call the standard function to find approvers
            PurchHeader."Purchaser Code" := UserSetup."Salespers./Purch. Code";
            ApprovalMgt.FindApproverPurchase(PurchHeader,ApprovalSetup,ApprovalTempl);
          END;
          DATABASE::"Purch. Inv. Header":
          BEGIN
            // Call the standard function to find approvers
            PurchInvHeader."Purchaser Code" := UserSetup."Salespers./Purch. Code";
            ApprovalMgt.FindApproverPurchInvHeaderIDYN(PurchInvHeader,ApprovalSetup,ApprovalTempl);
          END;
          DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            // Call the standard function to find approvers
            PurchCrMemoHdr."Purchaser Code" := UserSetup."Salespers./Purch. Code";
            ApprovalMgt.FindApproverPurchInvCrMemoIDYN(PurchCrMemoHdr,ApprovalSetup,ApprovalTempl);
          END;
        END;
        //

      END;

      ApprovalMgt.SetCurrUserId(CurrUserId);
      Comment := STRSUBSTNO(Text11012006,PrevUserId,NewUserId);

      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purchase Header":
        BEGIN
          ApprovalCmtLine."Table ID" := ApprovalEntry."Table ID";
          ApprovalCmtLine."Document Type" := PurchHeader."Document Type";
          ApprovalCmtLine."Document No." := PurchHeader."No.";
          ApprovalCmtLine."User ID" := CurrUserId;
          ApprovalCmtLine."Date and Time" := CURRENTDATETIME;
          ApprovalCmtLine.Comment := Comment;
          ApprovalCmtLine.INSERT(TRUE);
        END;
        DATABASE::"Purch. Inv. Header":
        BEGIN
          ApprovalCmtLine."Table ID" := ApprovalEntry."Table ID";
          ApprovalCmtLine."Document Type" := ApprovalCmtLine."Document Type"::Invoice;
          ApprovalCmtLine."Document No." := PurchInvHeader."No.";
          ApprovalCmtLine."User ID" := CurrUserId;
          ApprovalCmtLine."Date and Time" := CURRENTDATETIME;
          ApprovalCmtLine.Comment := Comment;
          ApprovalCmtLine.INSERT(TRUE);
        END;
        DATABASE::"Purch. Cr. Memo Hdr.":
        BEGIN
          ApprovalCmtLine."Table ID" := ApprovalEntry."Table ID";
          ApprovalCmtLine."Document Type" := ApprovalCmtLine."Document Type"::"Credit Memo";
          ApprovalCmtLine."Document No." := PurchCrMemoHdr."No.";
          ApprovalCmtLine."User ID" := CurrUserId;
          ApprovalCmtLine."Date and Time" := CURRENTDATETIME;
          ApprovalCmtLine.Comment := Comment;
          ApprovalCmtLine.INSERT(TRUE);
        END;
      END;
      //

      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,CurrUserId);

      CASE ApprovalEntry."Table ID" OF
      DATABASE::"Purchase Header":
        BEGIN
          IF ApprovalSetup.Delegations THEN
            AppMgntNotifi.SendPurchaseDelegationsMail(PurchHeader,ApprovalEntry2);
        END;
      DATABASE::"Purch. Inv. Header":
        BEGIN
          IF ApprovalSetup.Delegations THEN
            AppMgntNotifi.SendPurchaseDelegationsMail4PS(2,ApprovalEntry."Document No.",ApprovalEntry2);
        END;
       DATABASE::"Purch. Cr. Memo Hdr.":
        BEGIN
          IF ApprovalSetup.Delegations THEN
          AppMgntNotifi.SendPurchaseDelegationsMail4PS(3,ApprovalEntry."Document No.",ApprovalEntry2);
        END;
      END;
      //
      }
    END;

    PROCEDURE FilterApprovalEntry4PS@1100528203(lDocType@1100528200 : Integer;lDocNo@1100528201 : Code[20];VAR ApprovalEntry@1000000001 : Record 454;OnlyCurrUser@161024012 : Boolean);
    VAR
      UserFilter@161024013 : Text[1024];
    BEGIN
      //**4PS
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      IF lDocType = 2 THEN BEGIN
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        ApprovalEntry.SETRANGE("Document Type", 2);
      END;
      IF lDocType = 3 THEN BEGIN
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        ApprovalEntry.SETRANGE("Document Type", 3);
      END;

      ApprovalEntry.SETRANGE("Document No.",lDocNo);

      IF OnlyCurrUser THEN BEGIN
        UserFilter := GetApprovalSharingToUserFilter(USERID);
        IF UserFilter = '' THEN
          ApprovalEntry.SETRANGE("Approver ID",USERID)
        ELSE
          ApprovalEntry.SETFILTER("Approver ID",USERID + '|' + UserFilter);
      END;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF NOT ApprovalEntry.FINDFIRST THEN
        ERROR(Text001);
    END;

    PROCEDURE SwitchOnHold4PS@1100528205(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20];AskComment@1100528205 : Boolean;GiveMessage@1100528204 : Boolean);
    VAR
      ApprovalEntry@161024017 : Record 454;
      ApprovalCmtMgnt@161024013 : Codeunit 6085600;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528203 : Record 124;
    BEGIN
      //**4PS
      //FIXME
      {
      ApprovalSetup.GET;
      IF ApprovalSetup."Specific On Hold Code" = '' THEN
        ERROR(Text11012003);

      IF lDocType = 2 THEN BEGIN
        PurchInvHeader.GET(lDocNo);
        IF (PurchInvHeader."On Hold" = '') OR (PurchInvHeader."On Hold" = ApprovalSetup."Specific On Hold Code") THEN
          PutOnHold4PS(lDocType, lDocNo,FALSE,FALSE,TRUE)
        ELSE
          PutOnSpecificHold4PS(lDocType, lDocNo,ApprovalSetup."Specific On Hold Code",TRUE,TRUE);
      END;
      IF lDocType = 3 THEN BEGIN
        PurchCrMemoHdr.GET(lDocNo);
        IF (PurchCrMemoHdr."On Hold" = '') OR (PurchCrMemoHdr."On Hold" = ApprovalSetup."Specific On Hold Code") THEN
          PutOnHold4PS(lDocType, lDocNo,TRUE,TRUE,TRUE)
        ELSE
          PutOnSpecificHold4PS(lDocType, lDocNo,ApprovalSetup."Specific On Hold Code",TRUE,TRUE);
      END;
      }
    END;

    PROCEDURE PutOnHold4PS@1100528204(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20];AskComment@1100528205 : Boolean;GiveMessage@1100528206 : Boolean;OnlyCurrUser@1100528207 : Boolean);
    VAR
      ApprovalEntry@161024017 : Record 454;
      ApprovalCmtMgnt@161024013 : Codeunit 6085600;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528203 : Record 124;
      OnHoldCodeRec@1100528204 : Record 11012031;
    BEGIN
      //**4PS
      FilterApprovalEntry4PS(lDocType, lDocNo,ApprovalEntry,OnlyCurrUser);
      IF AskComment THEN
        ApprovalCmtMgnt.RequestComment4PS(lDocType, lDocNo);

      IF lDocType = 2 THEN
        OnHoldCodeRec.SETRANGE("Default Value Purchase Invoice", TRUE)
      ELSE
        OnHoldCodeRec.SETRANGE("Default Value Credit Memo", TRUE);

      IF NOT OnHoldCodeRec.FIND('-') THEN BEGIN
        OnHoldCodeRec.Code := COPYSTR(USERID,1,MAXSTRLEN(OnHoldCodeRec.Code));
      END;

      IF lDocType = 2 THEN BEGIN
        PurchInvHeader.GET(lDocNo);
        PurchInvHeader."On Hold" := OnHoldCodeRec.Code;
        PurchInvHeader.MODIFY(TRUE);
        PurchInvHeader.UpdateOnHoldOfPurchaseInvoice(lDocNo,OnHoldCodeRec.Code,FALSE);
        IF GiveMessage THEN
          MESSAGE(Text024,ApprovalEntry."Document Type",PurchInvHeader."No.");
      END;
      IF lDocType = 3 THEN BEGIN
        PurchCrMemoHdr.GET(lDocNo);
        PurchCrMemoHdr."On Hold" := OnHoldCodeRec.Code;
        PurchCrMemoHdr.MODIFY(TRUE);
        PurchCrMemoHdr.UpdateOnHoldOfPurchCreditMemo(lDocNo,OnHoldCodeRec.Code,FALSE);
        IF GiveMessage THEN
          MESSAGE(Text024,ApprovalEntry."Document Type",PurchCrMemoHdr."No.");
      END;
    END;

    PROCEDURE PutOnSpecificHold4PS@1100528223(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20];lOnHoldCode@1100528207 : Code[3];AskComment@1100528205 : Boolean;GiveMessage@1100528206 : Boolean);
    VAR
      ApprovalEntry@161024017 : Record 454;
      ApprovalCmtMgnt@161024013 : Codeunit 6085600;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528203 : Record 124;
      OnHoldCodeRec@1100528204 : Record 11012031;
    BEGIN
      //**4PS
      IF lOnHoldCode = '' THEN
        EXIT;

      FilterApprovalEntry4PS(lDocType, lDocNo,ApprovalEntry,TRUE);
      IF AskComment THEN
        ApprovalCmtMgnt.RequestComment4PS(lDocType, lDocNo);

      OnHoldCodeRec.GET(lOnHoldCode);

      IF lDocType = 2 THEN BEGIN
        PurchInvHeader.GET(lDocNo);
        PurchInvHeader."On Hold" := OnHoldCodeRec.Code;
        PurchInvHeader.MODIFY(TRUE);
        PurchInvHeader.UpdateOnHoldOfPurchaseInvoice(lDocNo,OnHoldCodeRec.Code,FALSE);
        IF GiveMessage THEN
          MESSAGE(Text11012004,ApprovalEntry."Document Type",PurchInvHeader."No.", lOnHoldCode);
      END;
      IF lDocType = 3 THEN BEGIN
        PurchCrMemoHdr.GET(lDocNo);
        PurchCrMemoHdr."On Hold" := OnHoldCodeRec.Code;
        PurchCrMemoHdr.MODIFY(TRUE);
        PurchCrMemoHdr.UpdateOnHoldOfPurchCreditMemo(lDocNo,OnHoldCodeRec.Code,FALSE);
        IF GiveMessage THEN
          MESSAGE(Text11012004,ApprovalEntry."Document Type",PurchCrMemoHdr."No.", lOnHoldCode);
      END;
    END;

    PROCEDURE ApprovePI4PS@1100528207(VAR PurchInvHeader@1000000000 : Record 122);
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      //**4PS
      //FIXME
      {
      FilterApprovalEntry4PS(2,PurchInvHeader."No.",ApprovalEntry,TRUE);
      ApprovalMgt.ApproveApprovalRequest(ApprovalEntry);
      }
    END;

    PROCEDURE ApproveCM4PS@1100528208(VAR PurchCrMemoHdr@1000000000 : Record 124);
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      //**4PS
      //FIXME
      {
      FilterApprovalEntry4PS(3,PurchCrMemoHdr."No.",ApprovalEntry,TRUE);
      ApprovalMgt.ApproveApprovalRequest(ApprovalEntry);
      }
    END;

    PROCEDURE DelegatePI4PS@1100528206(VAR PurchInvHeader@1100528201 : Record 122);
    VAR
      ApprovalEntry@1000000002 : Record 454;
      ApprovalCmtMgnt@1100528200 : Codeunit 6085600;
    BEGIN
      //**4PS
      FilterApprovalEntry4PS(2,PurchInvHeader."No.",ApprovalEntry,NOT IsApprovalAdminUser(FALSE));

      DelegateApprovalRequest(ApprovalEntry);
      MESSAGE(Text11012007);
    END;

    PROCEDURE DelegateCM4PS@1100528211(VAR PurchCrMemoHdr@1100528201 : Record 124);
    VAR
      ApprovalEntry@1000000002 : Record 454;
      ApprovalCmtMgnt@1100528200 : Codeunit 6085600;
    BEGIN
      //**4PS
      FilterApprovalEntry4PS(3,PurchCrMemoHdr."No.",ApprovalEntry,NOT IsApprovalAdminUser(FALSE));

      DelegateApprovalRequest(ApprovalEntry);
      MESSAGE(Text11012007);
    END;

    PROCEDURE DrillDownApprovalComments4PS@1100528212(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      ApprovalCmt@161024012 : Record 455;
      PurchInvHeader@1100528203 : Record 122;
      PurchCrMemoHdr@1100528202 : Record 124;
    BEGIN
      //**4PS
      IF lDocType = 2 THEN BEGIN
        ApprovalCmt.FILTERGROUP(4);
        ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
        ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        ApprovalCmt.SETRANGE("Document Type",2);
        ApprovalCmt.SETRANGE("Document No.",lDocNo);
        ApprovalCmt.FILTERGROUP(0);
      END;
      IF lDocType = 3 THEN BEGIN
        ApprovalCmt.FILTERGROUP(4);
        ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
        ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        ApprovalCmt.SETRANGE("Document Type",3);
        ApprovalCmt.SETRANGE("Document No.",lDocNo);
        ApprovalCmt.FILTERGROUP(0);
      END;
      PAGE.RUN(PAGE::"Purch. Approval Comment List",ApprovalCmt);
    END;

    PROCEDURE GetNextApprover4PS@1100528213(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Code[50];
    VAR
      ApprovalEntry@1100528204 : Record 454;
    BEGIN
      //**4PS
      IF lDocType = 2 THEN BEGIN
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        ApprovalEntry.SETRANGE("Document Type",2);
      END;
      IF lDocType = 3 THEN BEGIN
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        ApprovalEntry.SETRANGE("Document Type",3);
      END;

      ApprovalEntry.SETRANGE("Document No.",lDocNo);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(ApprovalEntry."Approver ID");
    END;

    PROCEDURE GetNoOfApprovalEntries4PS@1100528216(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      //**4PS
      CASE lDocType OF
        2:
        BEGIN
          ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
          ApprovalEntry.SETRANGE("Document Type",2);
          ApprovalEntry.SETRANGE("Document No.",lDocNo);
        END;
        3:
        BEGIN
          ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
          ApprovalEntry.SETRANGE("Document Type",3);
          ApprovalEntry.SETRANGE("Document No.",lDocNo);
        END
        ELSE
        BEGIN
          ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
          ApprovalEntry.SETRANGE("Document Type",lDocType);
          ApprovalEntry.SETRANGE("Document No.",lDocNo);
        END;
      END;

      EXIT(ApprovalEntry.COUNT);
    END;

    PROCEDURE DrillDownApprovalEntries4PS@1100528215(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      ApprovalEntry@1000000001 : Record 454;
      PurchaseHeader@1100528202 : Record 38;
    BEGIN
      //**4PS
      CASE lDocType OF
        2:
        BEGIN
          ApprovalEntry.FILTERGROUP(4);
          ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
          ApprovalEntry.SETRANGE("Document Type",2);
          ApprovalEntry.SETRANGE("Document No.",lDocNo);
          ApprovalEntry.FILTERGROUP(0);
          PAGE.RUN(PAGE::"Purch. Approval Req. Entries",ApprovalEntry);
        END;
        3:
        BEGIN
          ApprovalEntry.FILTERGROUP(4);
          ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
          ApprovalEntry.SETRANGE("Document Type",3);
          ApprovalEntry.SETRANGE("Document No.",lDocNo);
          ApprovalEntry.FILTERGROUP(0);
          PAGE.RUN(PAGE::"Purch. Approval Req. Entries",ApprovalEntry);
        END;
        ELSE
         IF PurchaseHeader.GET(lDocType, lDocNo) THEN
           DrillDownApprovalEntries(PurchaseHeader);
      END;
    END;

    PROCEDURE GetNoOfApprovalComments4PS@1100528214(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      ApprovalCmt@1000000001 : Record 455;
    BEGIN
      //**4PS
      ApprovalCmt.FILTERGROUP(4);
      IF lDocType = 2 THEN BEGIN
        ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
        ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        ApprovalCmt.SETRANGE("Document Type",2);
        ApprovalCmt.SETRANGE("Document No.",lDocNo);
      END;
      IF lDocType = 3 THEN BEGIN
        ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
        ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        ApprovalCmt.SETRANGE("Document Type",3);
        ApprovalCmt.SETRANGE("Document No.",lDocNo);
      END;
      EXIT(ApprovalCmt.COUNT);
    END;

    PROCEDURE ForceApprovalPI4PS@1100528217(VAR PurchInvHeader@161024012 : Record 122);
    VAR
      UserSetup@161024016 : Record 91;
      ApprovalCmtLine@161024013 : Record 455;
      ApprovalEntry@161024021 : Record 454;
      ApprovalAmount@161024018 : Decimal;
      ApprovalAmountLCY@161024019 : Decimal;
      ApprovalCmtMgnt@1100528200 : Codeunit 6085600;
    BEGIN
      //**4PS
      //FIXME
      {
      IsApprovalAdminUser(TRUE);

      ApprovalEntry."Document Type" := ApprovalEntry."Document Type"::Invoice;
      IF NOT CONFIRM(Text012,TRUE,ApprovalEntry."Document Type",PurchInvHeader."No.") THEN
       ERROR('');

      ApprovalCmtMgnt.RequestComment4PS(2, PurchInvHeader."No.");

      ApprovalSetup.GET;

      AppvlTemplate.SETCURRENTKEY("Table ID","Document Type",Enabled);
      AppvlTemplate.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      AppvlTemplate.SETRANGE("Document Type",2);
      AppvlTemplate.SETRANGE(Enabled,TRUE);
      AppvlTemplate.FINDFIRST;

      UserSetup.GET(USERID);

      PurchInvHeader.CALCFIELDS(Amount);
      ApprovalAmount  :=  PurchInvHeader.Amount;
      ApprovalAmountLCY :=PurchInvHeader.Amount;

      AppMgnt.MakeApprovalEntry(
        DATABASE::"Purch. Inv. Header",2,PurchInvHeader."No.",PurchInvHeader."Purchaser Code",
        ApprovalSetup,USERID,UserSetup,ApprovalAmount,ApprovalAmountLCY,
        PurchInvHeader."Currency Code",AppTemplate,0);

      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      ApprovalEntry.SETRANGE("Document Type",2);
      ApprovalEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      ApprovalEntry.FINDLAST;
      ApprovalEntry.Status := ApprovalEntry.Status::Approved;
      ApprovalEntry.MODIFY;

      ApprovalCmtLine."Table ID" := DATABASE::"Purch. Inv. Header";
      ApprovalCmtLine."Document Type" := 2;
      ApprovalCmtLine."Document No." := PurchInvHeader."No.";
      ApprovalCmtLine."User ID" := USERID;
      ApprovalCmtLine."Date and Time" := CURRENTDATETIME;
      ApprovalCmtLine.Comment := STRSUBSTNO(Text011,USERID);
      ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
      ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
      ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");

      ApprovalCmtLine.INSERT(TRUE);

      ApprovePurchInvHeader4PS(PurchInvHeader); //**4PS
      }
    END;

    PROCEDURE ForceApprovalCM4PS@1100528218(VAR PurchCrMemoHdr@161024012 : Record 124);
    VAR
      UserSetup@161024016 : Record 91;
      ApprovalCmtLine@161024013 : Record 455;
      ApprovalEntry@161024021 : Record 454;
      ApprovalAmount@161024018 : Decimal;
      ApprovalAmountLCY@161024019 : Decimal;
      ApprovalCmtMgnt@1100528200 : Codeunit 6085600;
    BEGIN
      //**4PS
      //FIXME
      {
      IsApprovalAdminUser(TRUE);

      ApprovalEntry."Document Type" := ApprovalEntry."Document Type"::"Credit Memo";
      IF NOT CONFIRM(Text012,TRUE,ApprovalEntry."Document Type",PurchCrMemoHdr."No.") THEN
       ERROR('');

      ApprovalCmtMgnt.RequestComment4PS(3, PurchCrMemoHdr."No.");

      ApprovalSetup.GET;

      AppvlTemplate.SETCURRENTKEY("Table ID","Document Type",Enabled);
      AppvlTemplate.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
      AppvlTemplate.SETRANGE("Document Type",3);
      AppvlTemplate.SETRANGE(Enabled,TRUE);
      AppvlTemplate.FINDFIRST;

      UserSetup.GET(USERID);

      PurchCrMemoHdr.CALCFIELDS(Amount);
      ApprovalAmount := PurchCrMemoHdr.Amount;
      ApprovalAmountLCY := PurchCrMemoHdr.Amount;

      AppMgnt.MakeApprovalEntry(
        DATABASE::"Purch. Cr. Memo Hdr.",3,PurchCrMemoHdr."No.",PurchCrMemoHdr."Purchaser Code",
        ApprovalSetup,USERID,UserSetup,ApprovalAmount,ApprovalAmountLCY,
        PurchCrMemoHdr."Currency Code",AppTemplate,0);

      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
      ApprovalEntry.SETRANGE("Document Type",3);
      ApprovalEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      ApprovalEntry.FINDLAST;
      ApprovalEntry.Status := ApprovalEntry.Status::Approved;
      ApprovalEntry.MODIFY;

      ApprovalCmtLine."Table ID" := DATABASE::"Purch. Cr. Memo Hdr.";
      ApprovalCmtLine."Document Type" := 3;
      ApprovalCmtLine."Document No." := PurchCrMemoHdr."No.";
      ApprovalCmtLine."User ID" := USERID;
      ApprovalCmtLine."Date and Time" := CURRENTDATETIME;
      ApprovalCmtLine.Comment := STRSUBSTNO(Text011,USERID);
      ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
      ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
      ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");

      ApprovalCmtLine.INSERT(TRUE);

      ApprovePurchCrMemo4PS(PurchCrMemoHdr);
      }
    END;

    PROCEDURE FindPurchaseApprovers4PS@1100528219(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20];ApprovalAmount@161024017 : Decimal;ApprovalAmountLCY@161024018 : Decimal);
    VAR
      AppvlFlowLine@161024014 : Record 6085726;
      UserSetup@161024019 : Record 91;
      PurchInvHeader@1100528203 : Record 122;
      PurchCrMemoHdr@1100528202 : Record 124;
      PurchaseHeader@1100528204 : Record 38;
      PurchInvHeaderDCInfo@1100528206 : Record 6085769;
      PurchCrMemoHdrDCInfo@1100528205 : Record 6085770;
    BEGIN
      //**4PS
      //FIXME
      {
      parameters RemoveDomainName:
      VarNameDataTypeSubtypeLength
      NoApprovalSetupRecordTable452
      NoAppTemplateRecordTable464

      IF lDocType = 2 THEN BEGIN
        PurchInvHeader.GET(lDocNo);
        IF PurchInvHeaderDCInfo.GetApprovalFlowCode(PurchInvHeader) = '' THEN EXIT;
        AppvlFlowLine.SETRANGE("Approval Flow Code",PurchInvHeaderDCInfo.GetApprovalFlowCode(PurchInvHeader));
        AppvlFlowLine.FINDFIRST;
        REPEAT
          UserSetup.GET(AppvlFlowLine."Approver ID");
          AppvlMgnt.SetNoOpenEntry(SetOpenApprovalEntry); //CALL C023060
          AppvlMgnt.MakeApprovalEntry(
            DATABASE::"Purch. Inv. Header",
            PurchaseHeader."Document Type"::Invoice,
            PurchInvHeader."No.",
            PurchInvHeader."Purchaser Code",
            ApprovalSetup,AppvlFlowLine."Approver ID",
            UserSetup,ApprovalAmount,ApprovalAmountLCY,
            PurchInvHeader."Currency Code",AppTemplate,0);
        UNTIL AppvlFlowLine.NEXT = 0;
      END;
      IF lDocType = 3 THEN BEGIN
        PurchCrMemoHdr.GET(lDocNo);
        IF PurchCrMemoHdrDCInfo.GetApprovalFlowCode(PurchCrMemoHdr)  = '' THEN EXIT;
        AppvlFlowLine.SETRANGE("Approval Flow Code",PurchCrMemoHdrDCInfo.GetApprovalFlowCode(PurchCrMemoHdr));
        AppvlFlowLine.FINDFIRST;
        REPEAT
          UserSetup.GET(AppvlFlowLine."Approver ID");
          AppvlMgnt.SetNoOpenEntry(SetOpenApprovalEntry); //CALL C023060
          AppvlMgnt.MakeApprovalEntry(
            DATABASE::"Purch. Cr. Memo Hdr.",
            PurchaseHeader."Document Type"::"Credit Memo",
            PurchCrMemoHdr."No.",
            PurchCrMemoHdr."Purchaser Code",
            ApprovalSetup,AppvlFlowLine."Approver ID",
            UserSetup,ApprovalAmount,ApprovalAmountLCY,
            PurchCrMemoHdr."Currency Code",AppTemplate,0);
        UNTIL AppvlFlowLine.NEXT = 0;
      END;
      }
    END;

    PROCEDURE ManuallyInsertAppvlEntry4PS@1100528222(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      PurchHeader@161024019 : Record 38;
      ApprovalEntry2@161024013 : Record 454;
      ApprovalEntry3@161024017 : Record 454;
      ApprovalCmtLine@161024025 : Record 455;
      UserSetup@161024022 : Record 91;
      ApprovalAmount@161024023 : Decimal;
      ApprovalAmountLCY@161024024 : Decimal;
      NewSeqNo@161024016 : Integer;
      NoOpenEntry@1100528200 : Boolean;
      PurchInvHeader@1100528201 : Record 122;
      PurchCrMemoHdr@1100528202 : Record 124;
    BEGIN
      //**4PS
      //FIXME
      {
      IsApprovalAdminUser(TRUE);

      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purch. Inv. Header":
          BEGIN
            PurchInvHeader.GET(ApprovalEntry."Document No.");
            ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
            ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
            ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
            ApprovalEntry2.SETFILTER("Sequence No.",'<%1',ApprovalEntry."Sequence No.");
            ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
            IF ApprovalEntry2.ISEMPTY THEN BEGIN
              MESSAGE(Text033,LOWERCASE(ApprovalEntry.TABLECAPTION));
              EXIT;
            END;

            ApprovalSetup.GET;

            AppvlTemplate.SETCURRENTKEY("Table ID","Document Type",Enabled);
            AppvlTemplate.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
            AppvlTemplate.SETRANGE("Document Type",PurchHeader."Document Type"::Invoice);
            AppvlTemplate.SETRANGE(Enabled,TRUE);
            AppvlTemplate.FINDFIRST;

            UserSetup.GET(ApprovalEntry."Approver ID");
            PurchInvHeader.CALCFIELDS(Amount);
            ApprovalAmount := PurchInvHeader.Amount;
            ApprovalAmountLCY := PurchInvHeader.Amount;
            ApprovalMgnt.SetNoOpenEntry(NoOpenEntry);
            ApprovalMgnt.MakeApprovalEntry(
               DATABASE::"Purch. Inv. Header",
                 PurchHeader."Document Type"::Invoice,
                 PurchInvHeader."No.",
                 PurchInvHeader."Purchaser Code",
                 ApprovalSetup,ApprovalEntry."Approver ID",
                 UserSetup,ApprovalAmount,ApprovalAmountLCY,
                 PurchInvHeader."Currency Code",AppvlTemplate,0);

            ApprovalEntry2.SETRANGE(Status);
            ApprovalEntry2.SETRANGE("Sequence No.");
            ApprovalEntry2.FINDLAST;

            IF ApprovalEntry2."Sequence No." <> ApprovalEntry."Sequence No." THEN BEGIN
              ApprovalEntry3 := ApprovalEntry2;
              ApprovalEntry2."Sequence No." := ApprovalEntry."Sequence No.";
              ApprovalEntry2.INSERT;
              ApprovalEntry3.DELETE;
            END;

            ApprovalEntry := ApprovalEntry2;

            ApprovalCmtLine."Table ID" := DATABASE::"Purch. Inv. Header";
            ApprovalCmtLine."Document Type" := ApprovalEntry."Document Type";
            ApprovalCmtLine."Document No." := ApprovalEntry."Document No.";
            ApprovalCmtLine.Comment := COPYSTR(STRSUBSTNO(Text034,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment));
            ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
            ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
            ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");

            ApprovalCmtLine.INSERT(TRUE);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            PurchCrMemoHdr.GET(ApprovalEntry."Document No.");
            ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
            ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
            ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
            ApprovalEntry2.SETFILTER("Sequence No.",'<%1',ApprovalEntry."Sequence No.");
            ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
            IF ApprovalEntry2.ISEMPTY THEN BEGIN
              MESSAGE(Text033,LOWERCASE(ApprovalEntry.TABLECAPTION));
              EXIT;
            END;

            ApprovalSetup.GET;

            AppvlTemplate.SETCURRENTKEY("Table ID","Document Type",Enabled);
            AppvlTemplate.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
            AppvlTemplate.SETRANGE("Document Type",PurchHeader."Document Type"::"Credit Memo");
            AppvlTemplate.SETRANGE(Enabled,TRUE);
            AppvlTemplate.FINDFIRST;

            UserSetup.GET(ApprovalEntry."Approver ID");
            PurchCrMemoHdr.CALCFIELDS(Amount);
            ApprovalAmount := PurchCrMemoHdr.Amount;
            ApprovalAmountLCY := PurchCrMemoHdr.Amount;

            ApprovalMgnt.SetNoOpenEntry(NoOpenEntry);
            ApprovalMgnt.MakeApprovalEntry(
               DATABASE::"Purch. Cr. Memo Hdr.",
                 PurchHeader."Document Type"::"Credit Memo",
                 PurchCrMemoHdr."No.",
                 PurchCrMemoHdr."Purchaser Code",
                 ApprovalSetup,ApprovalEntry."Approver ID",
                 UserSetup,ApprovalAmount,ApprovalAmountLCY,
                 PurchCrMemoHdr."Currency Code",AppvlTemplate,0);

            ApprovalEntry2.SETRANGE(Status);
            ApprovalEntry2.SETRANGE("Sequence No.");
            ApprovalEntry2.FINDLAST;

            IF ApprovalEntry2."Sequence No." <> ApprovalEntry."Sequence No." THEN BEGIN
              ApprovalEntry3 := ApprovalEntry2;
              ApprovalEntry2."Sequence No." := ApprovalEntry."Sequence No.";
              ApprovalEntry2.INSERT;
              ApprovalEntry3.DELETE;
            END;

            ApprovalEntry := ApprovalEntry2;

            ApprovalCmtLine."Table ID" := DATABASE::"Purch. Cr. Memo Hdr.";
            ApprovalCmtLine."Document Type" := ApprovalEntry."Document Type";
            ApprovalCmtLine."Document No." := ApprovalEntry."Document No.";
            ApprovalCmtLine.Comment := COPYSTR(STRSUBSTNO(Text034,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment));
            ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
            ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
            ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");

            ApprovalCmtLine.INSERT(TRUE);
          END;
      END;
      }
    END;

    PROCEDURE ManuallyEditAppvlEntry4PS@1100528221(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalEntry2@161024013 : Record 454;
      ApprovalCmtLine@161024014 : Record 455;
    BEGIN
      //**4PS
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD("Approver ID");

      ApprovalEntry2 := ApprovalEntry;
      IF NOT ApprovalEntry2.FIND THEN
        EXIT;

      IF ApprovalEntry2."Approver ID" <> '' THEN
        IF NOT CONFIRM(Text032,TRUE,ApprovalEntry.FIELDCAPTION("Approver ID"),ApprovalEntry."Approver ID") THEN
          ERROR('');

      IF NOT (ApprovalEntry.Status IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Created]) THEN
        ApprovalEntry.FIELDERROR(Status,Text031);

      ApprovalEntry2.LOCKTABLE;
      ApprovalEntry2.FIND;
      IF ApprovalEntry2."Approver ID" <> ApprovalEntry."Approver ID" THEN BEGIN
        ApprovalCmtLine."Table ID" := ApprovalEntry."Table ID";  //---
        ApprovalCmtLine."Document Type" := ApprovalEntry."Document Type";
        ApprovalCmtLine."Document No." := ApprovalEntry."Document No.";
        ApprovalCmtLine.Comment := COPYSTR(STRSUBSTNO(Text035,ApprovalEntry2."Approver ID",ApprovalEntry."Approver ID"),
          1,MAXSTRLEN(ApprovalCmtLine.Comment));

        ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
        ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
        ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");

        ApprovalCmtLine.INSERT(TRUE);

        //ApprovalEntry2."Approver ID" := ApprovalEntry."Approver ID";         //**4PS C022612 old
        ApprovalEntry2.VALIDATE("Approver ID", ApprovalEntry."Approver ID");   //**4PS C022612 new

        ApprovalEntry2.MODIFY;
      END;
    END;

    PROCEDURE ManuallyDeleleteAppvlEntry4PS@1100528220(ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalCmtLine@161024014 : Record 455;
    BEGIN
      //**4PS
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD(Status,ApprovalEntry.Status::Created);

      ApprovalEntry.DELETE(TRUE);

      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purch. Inv. Header":
          BEGIN
            ApprovalCmtLine."Table ID" := DATABASE::"Purch. Inv. Header";
            ApprovalCmtLine."Document Type" := ApprovalEntry."Document Type";
            ApprovalCmtLine."Document No." := ApprovalEntry."Document No.";
            ApprovalCmtLine.Comment := COPYSTR(STRSUBSTNO(Text036,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment));
            ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
            ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
            ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");

            ApprovalCmtLine.INSERT(TRUE);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            ApprovalCmtLine."Table ID" := DATABASE::"Purch. Cr. Memo Hdr.";
            ApprovalCmtLine."Document Type" := ApprovalEntry."Document Type";
            ApprovalCmtLine."Document No." := ApprovalEntry."Document No.";
            ApprovalCmtLine.Comment := COPYSTR(STRSUBSTNO(Text036,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment));
            ApprovalCmtLine.SETRANGE("Table ID", ApprovalCmtLine."Table ID");
            ApprovalCmtLine.SETRANGE("Document Type", ApprovalCmtLine."Document Type");
            ApprovalCmtLine.SETRANGE("Document No.", ApprovalCmtLine."Document No.");

            ApprovalCmtLine.INSERT(TRUE);
          END;
      END;
    END;

    PROCEDURE GetBuyFromVendorTest@1100528225(ApprovalEntry@1100528200 : Record 454;VendorFilter@1100409000 : Text[250]) : Boolean;
    VAR
      PurchHeader@1100528203 : Record 38;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528201 : Record 124;
    BEGIN
      //**4PS Assuming VENDORFILTER has value
      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.SETRANGE("Document Type", ApprovalEntry."Document Type");
            PurchHeader.SETRANGE("No.", ApprovalEntry."Document No.");
            PurchHeader.SETFILTER("Buy-from Vendor No.", VendorFilter);
            IF PurchHeader.FINDFIRST THEN
              EXIT(TRUE);
          END;
        DATABASE::"Purch. Inv. Header":
          BEGIN
            PurchInvHeader.SETRANGE("No.", ApprovalEntry."Document No.");
            PurchInvHeader.SETFILTER("Buy-from Vendor No.", VendorFilter);
            IF PurchInvHeader.FINDFIRST THEN
              EXIT(TRUE);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            PurchCrMemoHdr.SETRANGE("No.", ApprovalEntry."Document No.");
            PurchCrMemoHdr.SETFILTER("Buy-from Vendor No.", VendorFilter);
            IF PurchCrMemoHdr.FINDFIRST THEN
              EXIT(TRUE);
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetBuyFromVendorNameTest@1100525001(ApprovalEntry@1100528200 : Record 454;VendorNameFilter@1100409000 : Text[250]) : Boolean;
    VAR
      PurchHeader@1100528203 : Record 38;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528201 : Record 124;
    BEGIN
      //**4PS Assuming VENDORNAMEFILTER has value
      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeader.SETRANGE("Document Type", ApprovalEntry."Document Type");
            PurchHeader.SETRANGE("No.", ApprovalEntry."Document No.");
            //PurchHeader.SETFILTER("Buy-from Vendor No.", VendorFilter);
            PurchHeader.SETFILTER("Buy-from Vendor Name", VendorNameFilter);
            IF PurchHeader.FINDFIRST THEN
              EXIT(TRUE);
          END;
        DATABASE::"Purch. Inv. Header":
          BEGIN
            PurchInvHeader.SETRANGE("No.", ApprovalEntry."Document No.");
            PurchInvHeader.SETFILTER("Buy-from Vendor Name", VendorNameFilter);
            IF PurchInvHeader.FINDFIRST THEN
              EXIT(TRUE);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            PurchCrMemoHdr.SETRANGE("No.", ApprovalEntry."Document No.");
            PurchCrMemoHdr.SETFILTER("Buy-from Vendor Name", VendorNameFilter);
            IF PurchCrMemoHdr.FINDFIRST THEN
              EXIT(TRUE);
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetDocumentProjectTest@1100528202(ApprovalEntry@1100528200 : Record 454;JobFilter@1100528205 : Text[250]) : Boolean;
    VAR
      PurchHeader@1100528203 : Record 38;
      PurchInvHeader@1100528202 : Record 122;
      PurchCrMemoHdr@1100528201 : Record 124;
      PurchLine@1100528204 : Record 39;
      PurchInvLine@1100528206 : Record 123;
      PurchCrMemoLine@1100528207 : Record 125;
      InvoiceApprovalLine@1100528208 : Record 11012032;
    BEGIN
      //**4PS Assuming JOBFILTER has value
      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purchase Header":
        BEGIN
          PurchHeader.SETRANGE("Document Type", ApprovalEntry."Document Type");
          PurchHeader.SETRANGE("No.", ApprovalEntry."Document No.");
          PurchHeader.SETFILTER("Job No.", JobFilter);  //Call T005532 new
          IF PurchHeader.FINDFIRST THEN
            EXIT(TRUE);

          PurchLine.SETRANGE("Document Type", ApprovalEntry."Document Type");
          PurchLine.SETRANGE("Document No.", ApprovalEntry."Document No.");
          PurchLine.SETFILTER("Job No.", JobFilter);  //Call T005532 new
          IF PurchLine.FINDFIRST THEN //Call T005532 new
            EXIT(TRUE);
          EXIT (FALSE);
        END;

        DATABASE::"Purch. Inv. Header":
        BEGIN

          PurchInvHeader.SETRANGE("No.", ApprovalEntry."Document No.");
          PurchInvHeader.SETFILTER("Job No.", JobFilter);  //Call T005532 new
          IF PurchInvHeader.FINDFIRST THEN
            EXIT(TRUE);

          IF PurchInvHeader.GET(ApprovalEntry."Document No.") THEN;
          IF PurchInvHeader."Invoice Approved" THEN BEGIN
            PurchInvLine.SETRANGE("Document No.", ApprovalEntry."Document No.");
            PurchInvLine.SETFILTER("Job No.", JobFilter);  //Call T005532 new
            IF PurchInvLine.FINDFIRST THEN //Call T005532 new
              EXIT(TRUE);
          END ELSE BEGIN
            InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Purchase Invoice");
            InvoiceApprovalLine.SETRANGE("Document No.", ApprovalEntry."Document No.");
            InvoiceApprovalLine.SETFILTER("Project No.", JobFilter);  //Call T005532 new
            IF InvoiceApprovalLine.FINDFIRST THEN //Call T005532 new
              EXIT(TRUE);
           END;
          EXIT (FALSE);
        END;
        DATABASE::"Purch. Cr. Memo Hdr.":
        BEGIN
          PurchCrMemoHdr.SETRANGE("No.", ApprovalEntry."Document No.");
          PurchCrMemoHdr.SETFILTER("Job No.", JobFilter);  //Call T005532 new
          IF PurchCrMemoHdr.FINDFIRST THEN
            EXIT(TRUE);

          IF PurchCrMemoHdr.GET(ApprovalEntry."Document No.") THEN;
          IF PurchCrMemoHdr."Credit Memo Approved" THEN BEGIN
            PurchCrMemoLine.SETRANGE("Document No.", ApprovalEntry."Document No.");
            PurchCrMemoLine.SETFILTER("Job No.", JobFilter);  //Call T005532 new
            IF PurchCrMemoLine.FINDFIRST THEN //Call T005532 new
              EXIT(TRUE);
          END ELSE BEGIN
            InvoiceApprovalLine.SETRANGE("Document Type", InvoiceApprovalLine."Document Type"::"Credit Memo");
            InvoiceApprovalLine.SETRANGE("Document No.", ApprovalEntry."Document No.");
            InvoiceApprovalLine.SETFILTER("Project No.", JobFilter);  //Call T005532 new
            IF InvoiceApprovalLine.FINDFIRST THEN //Call T005532 new
              EXIT(TRUE);
           END;
          EXIT (FALSE);
        END;
      END;
      EXIT (FALSE);
    END;

    PROCEDURE GetLastApprover@1100528224(PurchHeader@161024012 : Record 38) : Code[50];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      //**4PS
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
      IF ApprovalEntry.FINDLAST THEN
        EXIT(ApprovalEntry."Approver ID");
    END;

    PROCEDURE GetLastApprover4PS@1100528227(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Code[50];
    VAR
      PostedApprovalEntry@1100528204 : Record 456;
    BEGIN
      //**4PS
      IF lDocType = 2 THEN BEGIN
        PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
      END;
      IF lDocType = 3 THEN BEGIN
        PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
      END;
      PostedApprovalEntry.SETCURRENTKEY("Table ID","Document No.","Last Date-Time Modified","Sequence No.");
      PostedApprovalEntry.SETRANGE("Document No.",lDocNo);
      PostedApprovalEntry.SETRANGE(Status,PostedApprovalEntry.Status::Approved);
      IF PostedApprovalEntry.FINDLAST THEN
        EXIT(PostedApprovalEntry."Approver ID");
    END;

    PROCEDURE GetNoOfPostApprovalEntries4PS@1100528229(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      PostedApprovalEntry@1000000001 : Record 456;
    BEGIN
      //**4PS
      CASE lDocType OF
        2:
          BEGIN
            PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
            PostedApprovalEntry.SETRANGE("Document No.",lDocNo);
          END;
        3:
          BEGIN
            PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
            PostedApprovalEntry.SETRANGE("Document No.",lDocNo);
          END;
        ELSE
          BEGIN
            PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
            PostedApprovalEntry.SETRANGE("Document No.",lDocNo);
          END;
      END;

      EXIT(PostedApprovalEntry.COUNT);
    END;

    PROCEDURE DrillDownPosApprovalEntries4PS@1100528228(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      PostedApprovalEntry@1000000001 : Record 456;
      PurchaseHeader@1100528202 : Record 38;
    BEGIN
      //**4PS
      CASE lDocType OF
        2:
        BEGIN
          PostedApprovalEntry.FILTERGROUP(4);
          PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
          PostedApprovalEntry.SETRANGE("Document No.",lDocNo);
          PostedApprovalEntry.FILTERGROUP(0);
          PAGE.RUN(PAGE::"Posted Approval Entries",PostedApprovalEntry);
        END;
        3:
        BEGIN
          PostedApprovalEntry.FILTERGROUP(4);
          PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
          PostedApprovalEntry.SETRANGE("Document No.",lDocNo);
          PostedApprovalEntry.FILTERGROUP(0);
          PAGE.RUN(PAGE::"Posted Approval Entries",PostedApprovalEntry);
        END;
        ELSE
         IF PurchaseHeader.GET(lDocType, lDocNo) THEN
           DrillDownApprovalEntries(PurchaseHeader);
      END;
    END;

    PROCEDURE GetNoOfPostApprovalComments4PS@1100528226(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      PostedApprovalCmt@1000000001 : Record 457;
    BEGIN
      //**4PS
      PostedApprovalCmt.FILTERGROUP(4);
      IF lDocType = 2 THEN BEGIN
        PostedApprovalCmt.SETCURRENTKEY("Table ID","Document No.");
        PostedApprovalCmt.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        PostedApprovalCmt.SETRANGE("Document No.",lDocNo);
      END;
      IF lDocType = 3 THEN BEGIN
        PostedApprovalCmt.SETCURRENTKEY("Table ID","Document No.");
        PostedApprovalCmt.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        PostedApprovalCmt.SETRANGE("Document No.",lDocNo);
      END;
      EXIT(PostedApprovalCmt.COUNT);
    END;

    PROCEDURE DrillDownPoApprovalComments4PS@1100528230(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      PostedApprovalCmt@161024012 : Record 457;
      PurchInvHeader@1100528203 : Record 122;
      PurchCrMemoHdr@1100528202 : Record 124;
    BEGIN
      //**4PS
      IF lDocType = 2 THEN BEGIN
        PostedApprovalCmt.FILTERGROUP(4);
        PostedApprovalCmt.SETCURRENTKEY("Table ID","Document No.");
        PostedApprovalCmt.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        PostedApprovalCmt.SETRANGE("Document No.",lDocNo);
        PostedApprovalCmt.FILTERGROUP(0);
      END;
      IF lDocType = 3 THEN BEGIN
        PostedApprovalCmt.FILTERGROUP(4);
        PostedApprovalCmt.SETCURRENTKEY("Table ID","Document No.");
        PostedApprovalCmt.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        PostedApprovalCmt.SETRANGE("Document No.",lDocNo);
        PostedApprovalCmt.FILTERGROUP(0);
      END;
      PAGE.RUN(PAGE::"Posted Approval Comments",PostedApprovalCmt);
    END;

    PROCEDURE ResetWebDocSearch4PS@1100528233(lDocType@1100528201 : Integer;lDocNo@1100528200 : Code[20]) : Integer;
    VAR
      PostedApprovalEntry@1100528204 : Record 456;
      PurchInvHeader@1100528203 : Record 122;
      PurchCrMemoHdr@1100528202 : Record 124;
    BEGIN
      //**4PS     //CALL C018917
      IF lDocType = 2 THEN BEGIN
        PostedApprovalEntry.SETCURRENTKEY("Table ID","Document No.");
        PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
        PostedApprovalEntry.SETRANGE("Document No.",lDocNo);
        IF NOT PostedApprovalEntry.ISEMPTY THEN
          WebSearchMgt.DeleteWebSearchFromInvoice(lDocNo);
      END;
      IF lDocType = 3 THEN BEGIN
        PostedApprovalEntry.SETCURRENTKEY("Table ID","Document No.");
        PostedApprovalEntry.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
        PostedApprovalEntry.SETRANGE("Document No.",lDocNo);
        IF NOT PostedApprovalEntry.ISEMPTY THEN
          WebSearchMgt.DeleteWebSearchFromCrMemo(lDocNo);
      END;
    END;

    PROCEDURE SetNoOpenEntry@1000000000(NoOpenEntry2@1000000000 : Boolean);
    BEGIN
      //**4PS CALL  C023060
      SetOpenApprovalEntry := NoOpenEntry2;
    END;

    PROCEDURE FilterPurchInvHeaderForApprover@1100525002(VAR ApprovalEntry@1100525000 : Record 454;ApproverID@161024012 : Code[50];VAR PurchInvHeader@161024013 : Record 122);
    BEGIN
      //**4PS CALL C027174
      ApprovalEntry.FILTERGROUP := 9;
      ApprovalEntry.SETRANGE("Table ID",ApprovalEntry."Table ID");
      IF ApprovalEntry.FINDSET THEN
        REPEAT
          IF PurchInvHeader.GET(ApprovalEntry."Document No.") THEN
            PurchInvHeader.MARK(TRUE)
        UNTIL ApprovalEntry.NEXT = 0;
      ApprovalEntry.SETRANGE("Table ID");
      ApprovalEntry.FILTERGROUP := 0;
      PurchInvHeader.MARKEDONLY(TRUE);
    END;

    PROCEDURE FilterPurchCrMemoHdrForApprover@1100525004(VAR ApprovalEntry@1100525000 : Record 454;ApproverID@161024012 : Code[50];VAR PurchCrMemoHdr@161024013 : Record 124);
    BEGIN
      //**4PS CALL C027174
      ApprovalEntry.FILTERGROUP := 9;
      ApprovalEntry.SETRANGE("Table ID",ApprovalEntry."Table ID");
      IF ApprovalEntry.FINDSET THEN
        REPEAT
          IF PurchCrMemoHdr.GET(ApprovalEntry."Document No.") THEN
            PurchCrMemoHdr.MARK(TRUE)
        UNTIL ApprovalEntry.NEXT = 0;
      ApprovalEntry.SETRANGE("Table ID");
      ApprovalEntry.FILTERGROUP := 0;
      PurchCrMemoHdr.MARKEDONLY(TRUE);
    END;

    BEGIN
    {
      //**4PS
      table renumbered
      5109 --> 11072057
    }
    END.
  }
}

