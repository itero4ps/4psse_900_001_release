OBJECT Codeunit 6085785 DC Workflow Event Handling
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW19.00.00.4.04,4PS9.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Static-Automatic;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WorkflowManagement@1010 : Codeunit 1501;
      ApprReqForceApprovedEventDescTxt@1001 : TextConst 'ENU=A purchase document is force approved. (Continia)';
      ApprApproveAndDelegateEventTxt@1002 : TextConst 'ENU=An approval request is approved and delegated. (Continia)';
      AdvApprovalProcedureComplete@1006 : TextConst 'ENU=An advanced approval workflow has completed. (Continia)';
      ApprDelegateWithoutApprovalEventTxt@1003 : TextConst 'ENU=An approval request is delegated. (Continia)';
      ApprDelegateAndSendBackTxt@1004 : TextConst 'ENU=An approval request is delegated with a request to be sent back. (Continia)';
      ApprSendBackApprovalRequestTxt@1005 : TextConst 'ENU=An approval request was sent back. (Continia)';
      EventAlreadyExistErr@1000 : TextConst 'ENU=An event with description %1 already exists. (Continia)';

    [EventSubscriber(Codeunit,1520,OnAddWorkflowEventsToLibrary,"",Skip)]
    PROCEDURE CreateEventsLibrary@13();
    BEGIN
      AddEventToLibrary(
        RunWorkflowOnPurchDocForceApproveApprovalRequestCode,DATABASE::"Purchase Header",ApprReqForceApprovedEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnApproveAndDelegateRequestCode,DATABASE::"Approval Entry",ApprApproveAndDelegateEventTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAdvancedAppCompleteRequestCode,DATABASE::"Approval Entry",AdvApprovalProcedureComplete,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnDelegateAndSendBackRequestCode,DATABASE::"Approval Entry",ApprDelegateAndSendBackTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnDelegateWithoutApprovalRequestCode,DATABASE::"Approval Entry",ApprDelegateWithoutApprovalEventTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnSendBackApprovalRequestCode,DATABASE::"Approval Entry",ApprSendBackApprovalRequestTxt,0,FALSE);
    END;

    LOCAL PROCEDURE AddEventPredecessors@67(EventFunctionName@1001 : Code[128]);
    VAR
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      CASE EventFunctionName OF
        RunWorkflowOnPurchDocForceApproveApprovalRequestCode: // No predecessors. It is a starting event.
          ;
        RunWorkflowOnApproveAndDelegateRequestCode:
          AddEventPredecessor(RunWorkflowOnApproveAndDelegateRequestCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
        RunWorkflowOnDelegateAndSendBackRequestCode:
          AddEventPredecessor(RunWorkflowOnDelegateAndSendBackRequestCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
        RunWorkflowOnDelegateWithoutApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnDelegateWithoutApprovalRequestCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
        RunWorkflowOnSendBackApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnApproveAndDelegateRequestCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
      END;
    END;

    PROCEDURE AddEventToLibrary@14(FunctionName@1001 : Code[128];TableID@1002 : Integer;Description@1003 : Text[250];RequestPageID@1004 : Integer;UsedForRecordChange@1005 : Boolean);
    VAR
      WorkflowEvent@1000 : Record 1520;
    BEGIN
      IF WorkflowEvent.GET(FunctionName) THEN
        EXIT;

      WorkflowEvent.SETRANGE(Description,Description);
      IF WorkflowEvent.FINDFIRST THEN
        ERROR(EventAlreadyExistErr,Description);

      WorkflowEvent.INIT;
      WorkflowEvent."Function Name" := FunctionName;
      WorkflowEvent."Table ID" := TableID;
      WorkflowEvent.Description := Description;
      WorkflowEvent."Request Page ID" := RequestPageID;
      WorkflowEvent."Used for Record Change" := UsedForRecordChange;
      WorkflowEvent.INSERT;

      AddEventPredecessors(WorkflowEvent."Function Name");
    END;

    PROCEDURE AddEventPredecessor@66(FunctionName@1001 : Code[128];PredecessorFunctionName@1002 : Code[128]);
    VAR
      WFEventResponseCombination@1000 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::"Event";
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    PROCEDURE RunWorkflowOnPurchDocForceApproveApprovalRequestCode@21() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnForceApproveApprovalRequest'));
    END;

    [EventSubscriber(Codeunit,6085790,OnSendPurchDocForForceApproval)]
    PROCEDURE RunWorkflowOnPurchDocForceApproveApprovalRequest@1(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnPurchDocForceApproveApprovalRequestCode,PurchaseHeader);
    END;

    PROCEDURE RunWorkflowOnSendBackApprovalRequestCode@8() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendBackApprovalRequest'));
    END;

    [EventSubscriber(Codeunit,6085790,OnSendBackApprovalRequested)]
    PROCEDURE RunWorkflowOnSendBackApprovalRequest@7(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendBackApprovalRequestCode,ApprovalEntry);
    END;

    PROCEDURE RunWorkflowOnAdvancedAppCompleteRequestCode@11() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAdvancedAppCompleteRequest'));
    END;

    [EventSubscriber(Codeunit,6085790,OnAdvancedApprovalWorkflowCompleted)]
    PROCEDURE RunWorkflowOnAdvancedAppCompleteRequest@9(ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAdvancedAppCompleteRequestCode,ApprovalEntry);
    END;

    PROCEDURE RunWorkflowOnApproveAndDelegateRequestCode@10() : Text;
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnApproveAndDelegateRequest'));
    END;

    [EventSubscriber(Codeunit,6085790,OnApproveAndDelegateRequested)]
    LOCAL PROCEDURE RunWorkflowOnApproveAndDelegateRequest@6(VAR ApprovalEntry@1000 : Record 454);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnApproveAndDelegateRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    PROCEDURE RunWorkflowOnDelegateWithoutApprovalRequestCode@5() : Text;
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnDelegateWithoutApprovalRequest'));
    END;

    [EventSubscriber(Codeunit,6085790,OnDelegateWithoutApprovalRequested)]
    LOCAL PROCEDURE RunWorkflowOnDelegateWithoutApprovalRequest@3(VAR ApprovalEntry@1000 : Record 454);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnDelegateWithoutApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    PROCEDURE RunWorkflowOnDelegateAndSendBackRequestCode@2() : Text;
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnDelegateAndSendBackRequest'));
    END;

    [EventSubscriber(Codeunit,6085790,OnDelegateAndSendBackRequested)]
    LOCAL PROCEDURE RunWorkflowOnDelegateAndSendBackRequest@4(VAR ApprovalEntry@1000 : Record 454);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnDelegateAndSendBackRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    BEGIN
    {
      **4PS.s
      Property 'OnMissingLicense' on all EventSubscriber functions changed from ERROR to SKIP.
      Because DynamicsNAV Client is halted with an error for Users with no DC-License, having this CU in de Object List.

      Definition "OnMissingLicense Property": Specifies what happens to the event subscriber function call when the license
      of the Microsoft Dynamics NAV user account that is running the current session does not include the codeunit
      that contains the subscriber function.
      **4PS.e
    }
    END.
  }
}

