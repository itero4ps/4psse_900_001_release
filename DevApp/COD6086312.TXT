OBJECT Codeunit 6086312 EM Approval Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.1.02.00;
  }
  PROPERTIES
  {
    TableNo=6086320;
    Permissions=TableData 454=rimd,
                TableData 455=ri,
                TableData 6085749=rimd,
                TableData 6086002=r,
                TableData 6086320=rm;
    OnRun=BEGIN
            Code(Rec);
          END;

  }
  CODE
  {
    VAR
      UserFilterType@1160040016 : 'CurrUserOnly,CurrUserAndSharing,NoUserFilter';
      ConfirmSendMultipleForApproval@1160040010 : TextConst 'ENU=This will send %1 Expenses for approval.\\Do you want to continue?';
      HasCommentErrors@1160040014 : TextConst 'ENU=There is one or more error on this Expense.\\Please correct these before the sending the Expense for approval.';
      HasCommentQuestion@1160040008 : TextConst 'ENU=There is one or more error on this Expense.\\Do you want to send it for approval anyway?';
      NothingToSend@1160040013 : TextConst 'ENU=There is nothing to send for approval.';
      RejForcedByTxt@1160040012 : TextConst 'ENU=Rejection forced by %1.';
      SameApproverAsUser@1160040000 : TextConst 'ENU=The Approver cannot be the same User.';
      SentForApproval@1160040011 : TextConst 'ENU=%1 Expenses were sent for approval.';
      NoRefundToRejectQuestion@1160040017 : TextConst 'ENU=This expense has been set to no refund.\\Do you want to force the rejection of it?';
      Text001@161024041 : TextConst 'ENU=No open Approval Entry was found.';
      Text002@161024040 : TextConst 'ENU=The Document was not found.';
      Text003@161024039 : TextConst 'ENU=The Approval has been forwarded.';
      Text005@161024037 : TextConst 'ENU=Forwarded from %1 to %2.';
      Text007@161024035 : TextConst 'ENU=Expense was rejected.';
      Text008@161024016 : TextConst 'ENU=Expense was sent back.';
      Text009@161024033 : TextConst 'ENU=Send back to %1,Reject';
      Text010@1160040006 : TextConst 'ENU=requires your approval.';
      Text011@161024027 : TextConst 'ENU=Approval forced by %1.';
      Text012@1160040004 : TextConst 'ENU=Microsoft Dynamics NAV Document Approval System';
      Text013@161024025 : TextConst 'ENU=You are not allowed to perform this action.\\In order to perform this action you must be member of the role ''%1''.';
      Text014@1160040003 : TextConst 'ENU=Microsoft Dynamics NAV: %1 Mail';
      Text015@1160040001 : TextConst 'ENU=Approval';
      Text016@1160040007 : TextConst 'ENU=Employee';
      Text019@161024019 : TextConst 'ENU=Approve && Forward,Forward without approval,Forward and send the Document back to me after Approval';
      Text020@161024018 : TextConst 'ENU=Approved and forwarded from %1 to %2';
      Text021@161024017 : TextConst 'ENU=%1 added as Approver.';
      Text024@161024013 : TextConst 'ENU=The expense was put on hold.';
      Text025@161024012 : TextConst 'ENU=The expense is no longer on hold.';
      Text026@161024028 : TextConst 'ENU=Your approval limit does not allow you to approve this Expense.';
      Text028@161024030 : TextConst 'ENU=Your approval limit does not allow you to forward this Expense.';
      Text029@161024031 : TextConst 'ENU=Your approval limit does not allow you to update this Expense.';
      Text031@161024044 : TextConst 'ENU=must be Open or Created.';
      Text032@161024045 : TextConst 'ENU=Do you want to change %1 to %2?';
      Text033@161024046 : TextConst 'ENU=You can only add a new %1 after the open %1.';
      Text034@161024047 : TextConst 'ENU=Approver %1 was added.';
      Text035@161024048 : TextConst 'ENU=Approver %1 changed to %2.';
      Text036@161024049 : TextConst 'ENU=Approver %1 was deleted.';
      Text037@1160040005 : TextConst 'ENU=You must import an Approval Template in Expense Management Setup.';
      Unsuported@1160040002 : TextConst 'ENU=%1 Unsupported';
      NoRefundRejForcedTxt@1160040018 : TextConst 'ENU=Rejection forced because this expense is not refundable.';
      ExpenseAutoRejectedTxt@1160040019 : TextConst 'ENU=The expense was automatically rejected.';
      DCApprovalMgmt@1160040021 : Codeunit 6085722;
      DCApprovalsBridge@1160040020 : Codeunit 6085790;
      EMApprovalsBridge@1160040009 : Codeunit 6086369;
      SupressCmt@1160040022 : Boolean;

    LOCAL PROCEDURE Code@1160040015(VAR Expense@1000 : Record 6086320);
    BEGIN
      GetApproverExpense(Expense);
      IF NOT EMApprovalsBridge.IsWorkflowSupported THEN
        FinishApprovalEntryExpense(Expense);
      CalculateExpenseStatus(Expense."Entry No.");
    END;

    LOCAL PROCEDURE GetApproverExpense@1160040012(Expense@1001 : Record 6086320);
    VAR
      UserSetup@1002 : Record 91;
    BEGIN
      UserSetup.GET(Expense."Employee No.");

      InsertApprovalEntries(Expense,UserSetup."Approver ID",Expense."Employee No.",Expense.Amount,Expense."Amount (LCY)",
        UserSetup."Salespers./Purch. Code");
    END;

    LOCAL PROCEDURE InsertApprovalEntries@1160040008(Expense@1160040005 : Record 6086320;ApproverID@1160040000 : Code[50];PreviousUserID@1160040002 : Code[50];ApprovalAmount@1160040008 : Decimal;ApprovalAmountLCY@1160040003 : Decimal;SalespersPurchCode@1160040006 : Code[10]);
    VAR
      ApproverUser@1160040001 : Record 91;
      ContiniaUserSetup@1160040009 : Record 6086002;
      ApprovalEntry@1160040010 : Record 454;
      ExpRecRef@1001 : RecordRef;
      ApproveUnlimited@1160040004 : Boolean;
    BEGIN
      IF ApproverID = '' THEN BEGIN
        ApproverUser.GET(PreviousUserID);
        ContiniaUserSetup.GET(PreviousUserID);
      END ELSE BEGIN
        ApproverUser.GET(ApproverID);
        ContiniaUserSetup.GET(ApproverID);
      END;

      IF EMApprovalsBridge.GetLimitType = ApprovalEntry."Limit Type"::"Approval Limits" THEN BEGIN
        IF NOT ContiniaUserSetup."Unlimited Expense Approval" THEN
          ApproverUser.TESTFIELD("Approver ID");

        IF (ApproverUser."User ID" = ApproverUser."Approver ID") AND (NOT ContiniaUserSetup."Unlimited Expense Approval") THEN
          ERROR(SameApproverAsUser);

        IF (Expense."Employee No." = ApproverUser."User ID") AND
           ((ApproverUser."Approver ID" = '') OR (ApproverUser."Approver ID" = ApproverUser."User ID")) AND
           (ContiniaUserSetup."Unlimited Expense Approval")
        THEN
          ApproveUnlimited := TRUE;
      END;

      ExpRecRef.GETTABLE(Expense);
      EMApprovalsBridge.InitializeApprovalEntry(ExpRecRef,ApprovalEntry);
      MakeApprovalEntry(ApprovalEntry,0,ContiniaUserSetup."Continia User ID",ApproveUnlimited,SalespersPurchCode);

      // STOP CONDITIONS
      CASE EMApprovalsBridge.GetLimitType OF
        ApprovalEntry."Limit Type"::"Approval Limits":
          IF ContiniaUserSetup."Unlimited Expense Approval" THEN
            EXIT
          ELSE
            IF ApprovalAmountLCY <= ContiniaUserSetup."Expense Amount Approval Limit" THEN
              EXIT;

        ApprovalEntry."Limit Type"::"No Limits":
          EXIT;

        ELSE BEGIN
          ApprovalEntry."Limit Type" := EMApprovalsBridge.GetLimitType;
          ERROR(Unsuported,ApprovalEntry."Limit Type");
        END;
      END;

      InsertApprovalEntries(Expense,ApproverUser."Approver ID",
        ApproverUser."User ID",ApprovalAmount,ApprovalAmountLCY,SalespersPurchCode);
    END;

    LOCAL PROCEDURE MakeApprovalEntry@10(ApprovalEntryArgument@1000 : Record 454;SequenceNo@1002 : Integer;ApproverId@1003 : Code[50];ApproveUnlimited@1160040001 : Boolean;SalespersPurchCode@1160040000 : Code[10]);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        IF SequenceNo = 0 THEN
          SequenceNo := EMApprovalsBridge.GetLastSequenceNo(ApprovalEntryArgument) + 1;

        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := GetCurrUserID;
        "Approval Code" := 'EXPENSE';
        "Sender ID" := GetCurrUserID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;

        IF ApproveUnlimited THEN
          Status := Status::Approved
        ELSE
          Status := Status::Created;

        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := GetCurrUserID;
        "Due Date" := EMApprovalsBridge.GetApprovalDueDate;
        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";
        "Approval Type" := EMApprovalsBridge.GetApprovalType;
        "Limit Type" := EMApprovalsBridge.GetLimitType;
        "Original Approver ID" := "Approver ID";
        "Salespers./Purch. Code" := SalespersPurchCode;
        EMApprovalsBridge.FinishApprovalEntry(ApprovalEntry,ApprovalEntryArgument);
        DCApprovalsBridge.InsertApprovalEntry(ApprovalEntry);
      END;
    END;

    PROCEDURE Approve@1000000040(VAR Expense@1160040002 : Record 6086320);
    VAR
      ApprovalEntry@1160040003 : Record 454;
      EMSetup@1160040000 : Record 6086300;
      SendToExpUser@1160040001 : Codeunit 6086324;
    BEGIN
      FilterApprovalEntry(Expense,ApprovalEntry,UserFilterType::CurrUserAndSharing);
      IF NOT HasUserDocumentPermission(ApprovalEntry) THEN
        ERROR(Text026);

      EMApprovalsBridge.ApproveApprovalRequest(ApprovalEntry);

      Expense.FIND('=');
      IF Expense.Status IN [Expense.Status::Approved,Expense.Status::Rejected] THEN BEGIN
        EMSetup.GET;
        IF EMSetup."Send Approval/Reject to App" = EMSetup."Send Approval/Reject to App"::Both THEN
          SendToExpUser.SendApprovalRejectNotification(Expense);
      END;
    END;

    PROCEDURE Reject@1000000041(VAR Expense@1160040004 : Record 6086320);
    VAR
      ApprovalEntry@1160040002 : Record 454;
      EMSetup@1160040000 : Record 6086300;
      ApprovalCmtMgnt@161024016 : Codeunit 6085600;
      SendToExpUser@1160040001 : Codeunit 6086324;
      Answer@161024012 : 'Dialog Cancelled,Send Back,Reject';
    BEGIN
      FilterApprovalEntry(Expense,ApprovalEntry,UserFilterType::CurrUserAndSharing);

      Answer := DCApprovalMgmt.SendBackOrRejectApprovalReq(ApprovalEntry);

      IF Answer = Answer::"Dialog Cancelled" THEN
        ERROR('');

      IF Answer = Answer::"Send Back" THEN
        SendBackApprovalRequest(ApprovalEntry)
      ELSE
        DCApprovalsBridge.RejectApprovalRequest(ApprovalEntry);

      //WebSearchMgnt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      //WebSearchMgnt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,USERID);

      IF GUIALLOWED THEN
        IF ApprovalEntry.ISEMPTY THEN
          IF Answer = Answer::"Send Back" THEN
            MESSAGE(Text008)
          ELSE
            MESSAGE(Text007);

      Expense.FIND('=');
      IF Expense.Status IN [Expense.Status::Approved,Expense.Status::Rejected] THEN BEGIN
        EMSetup.GET;
        IF EMSetup."Send Approval/Reject to App" IN [EMSetup."Send Approval/Reject to App"::Both,
           EMSetup."Send Approval/Reject to App"::"Only Rejected"]
        THEN
          SendToExpUser.SendApprovalRejectNotification(Expense);
      END;
    END;

    PROCEDURE Delegate@1000000043(VAR Expense@1160040001 : Record 6086320);
    VAR
      ApprovalEntry@1160040000 : Record 454;
    BEGIN
      IF NOT IsApprovalAdminUser(FALSE) THEN
        FilterApprovalEntry(Expense,ApprovalEntry,UserFilterType::CurrUserAndSharing)
      ELSE
        FilterApprovalEntry(Expense,ApprovalEntry,UserFilterType::NoUserFilter);

      IF NOT (HasUserDocumentPermission(ApprovalEntry) OR IsApprovalAdminUser(FALSE)) THEN
        ERROR(Text028);

      DelegateApprovalRequest(ApprovalEntry);

      IF GUIALLOWED THEN
        MESSAGE(Text003);
    END;

    PROCEDURE PutOnHold@161024049(VAR Expense@1160040001 : Record 6086320);
    VAR
      ApprovalEntry@1160040000 : Record 454;
      ApprovalCmtMgnt@161024013 : Codeunit 6085600;
    BEGIN
      FilterApprovalEntry(Expense,ApprovalEntry,UserFilterType::CurrUserAndSharing);
      IF NOT (HasUserDocumentPermission(ApprovalEntry) OR IsApprovalAdminUser(FALSE)) THEN
        ERROR(Text029);

      IF GUIALLOWED THEN
        ApprovalCmtMgnt.RequestComment(DATABASE::Expense,ApprovalEntry."Document Type"::Invoice,ApprovalEntry."Document No.");

      Expense."On Hold" := COPYSTR(GetCurrUserID,1,MAXSTRLEN(Expense."On Hold"));
      Expense.MODIFY(TRUE);

      IF GUIALLOWED THEN
        MESSAGE(Text024);
    END;

    PROCEDURE RemoveOnHold@161024051(VAR Expense@1160040001 : Record 6086320);
    VAR
      ApprovalEntry@1160040000 : Record 454;
    BEGIN
      FilterApprovalEntry(Expense,ApprovalEntry,UserFilterType::CurrUserAndSharing);
      IF NOT (HasUserDocumentPermission(ApprovalEntry) OR IsApprovalAdminUser(FALSE)) THEN
        ERROR(Text029);

      Expense."On Hold" := '';
      Expense.MODIFY(TRUE);

      IF GUIALLOWED THEN
        MESSAGE(Text025);
    END;

    PROCEDURE GetNextApprover@161024027(Expense@161024012 : Record 6086320) : Code[20];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",FORMAT(Expense."Entry No."));
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(ApprovalEntry."Approver ID");
    END;

    PROCEDURE SendBackOrRejectApprovalReq@161024025(ApprovalEntry@161024012 : Record 454) : Integer;
    VAR
      ApprovalEntry2@161024013 : Record 454;
      Answer@161024015 : 'Dialog Cancelled,Send Back,Reject';
    BEGIN
      EMApprovalsBridge.OrderByTableIDDocTypeAndSeq(ApprovalEntry2);
      ApprovalEntry2.SETRANGE("Table ID",ApprovalEntry."Table ID");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETRANGE("Sequence No.",0,ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry.Status::Approved);
      IF ApprovalEntry2.FINDFIRST THEN
        Answer := STRMENU(STRSUBSTNO(Text009,GetApproverDisplayName(ApprovalEntry2."Approver ID")))
      ELSE
        Answer := Answer::Reject;

      EXIT(Answer);
    END;

    PROCEDURE DelegateApprovalRequest@161024013(VAR ApprovalEntry@161024015 : Record 454);
    VAR
      UserSetup@161024014 : Record 91;
      ApprovalSharing@161024012 : Record 6085749;
      ContiniaUser@1160040000 : Record 6086001;
      Selection@161024021 : 'Cancel,ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
    BEGIN
      IF NOT (GetCurrUserID IN [ApprovalEntry."Sender ID",ApprovalEntry."Approver ID"]) THEN
        IF NOT IsApprovalAdminUser(FALSE) THEN BEGIN
          FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID);
          ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
          IF ApprovalSharing.ISEMPTY THEN
            IsApprovalAdminUser(TRUE);
        END;

      UserSetup.GET(GetCurrUserID);

      IF ApprovalEntry."Approver ID" <> GetCurrUserID THEN
        Selection := Selection::DelegateWithoutApproval
      ELSE
        Selection := STRMENU(Text019);

      IF Selection = Selection::Cancel THEN
        ERROR('');

      IF ContiniaUser.GET(UserSetup.Substitute) THEN;

      IF PAGE.RUNMODAL(PAGE::"Expense Delegate to User",ContiniaUser) <> ACTION::LookupOK THEN
        ERROR('');

      DCApprovalMgmt.DelegateApprovalRequest2(ApprovalEntry,Selection-1,ContiniaUser."User ID");
    END;

    PROCEDURE ForceApproval@161024026(VAR Expense@161024012 : Record 6086320;AddApprovalComment@1160040004 : Boolean);
    VAR
      ApprovalEntry@161024021 : Record 454;
      ApprovalCmtLine@161024013 : Record 455;
      EMSetup@1160040000 : Record 6086300;
      UserSetup@1160040003 : Record 91;
      Expense2@1160040002 : Record 6086320;
      ExpRecRef@1000 : RecordRef;
      SendToExpUser@1160040001 : Codeunit 6086324;
    BEGIN
      IsApprovalAdminUser(TRUE);
      UserSetup.GET(Expense."Employee No.");

      ExpRecRef.GETTABLE(Expense);
      EMApprovalsBridge.InitializeApprovalEntry(ExpRecRef,ApprovalEntry);
      MakeApprovalEntry(ApprovalEntry,0,GetCurrUserID,FALSE,UserSetup."Salespers./Purch. Code");

      ApprovalEntry.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",FORMAT(Expense."Entry No."));
      ApprovalEntry.FINDLAST;
      ApprovalEntry.Status := ApprovalEntry.Status::Approved;
      ApprovalEntry.MODIFY;

      ApproveExpense(Expense);

      IF NOT SupressCmt THEN
        CreateAppvlCmtLine(DATABASE::Expense,ApprovalEntry."Document Type",FORMAT(Expense."Entry No."),
          COPYSTR(STRSUBSTNO(Text011,GetCurrUserID),1,MAXSTRLEN(ApprovalCmtLine.Comment)));

      EMSetup.GET;
      IF EMSetup."Send Approval/Reject to App" = EMSetup."Send Approval/Reject to App"::Both THEN
        SendToExpUser.SendApprovalRejectNotification(Expense);
    END;

    PROCEDURE ForceRejection@1160040016(VAR Expense@161024012 : Record 6086320);
    VAR
      ApprovalEntry@161024021 : Record 454;
      ApprovalEntryArgument@1001 : Record 454;
      ApprovalCmtLine@161024013 : Record 455;
      EMSetup@1160040000 : Record 6086300;
      Expense2@1160040002 : Record 6086320;
      UserSetup@1160040004 : Record 91;
      ExpRecRef@1000 : RecordRef;
      SendToExpUser@1160040001 : Codeunit 6086324;
    BEGIN
      IsApprovalAdminUser(TRUE);
      UserSetup.GET(Expense."Employee No.");

      ApprovalEntry.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",FORMAT(Expense."Entry No."));
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      IF NOT ApprovalEntry.FINDFIRST THEN BEGIN
        ExpRecRef.GETTABLE(Expense);
        EMApprovalsBridge.InitializeApprovalEntry(ExpRecRef,ApprovalEntryArgument);
        MakeApprovalEntry(ApprovalEntryArgument,0,GetCurrUserID,FALSE,UserSetup."Salespers./Purch. Code");
      END;

      ApprovalEntry.FINDFIRST;

      ApprovalEntry.MODIFYALL(Status,ApprovalEntry.Status::Rejected);
      RejectExpense(Expense);

      IF NOT SupressCmt THEN
        CreateAppvlCmtLine(DATABASE::Expense,ApprovalEntry."Document Type",FORMAT(Expense."Entry No."),
          COPYSTR(STRSUBSTNO(RejForcedByTxt,GetCurrUserID),1,MAXSTRLEN(ApprovalCmtLine.Comment)));

      EMSetup.GET;
      IF EMSetup."Send Approval/Reject to App" IN [EMSetup."Send Approval/Reject to App"::Both,
         EMSetup."Send Approval/Reject to App"::"Only Rejected"]
      THEN
        SendToExpUser.SendApprovalRejectNotification(Expense);
    END;

    PROCEDURE IsApprovalAdminUser@161024028(ShowError@161024014 : Boolean) : Boolean;
    VAR
      AppAdminPermCheck@161024018 : Record 6085734;
      EMSetup@161024019 : Record 6086300;
      ExpenseNAVVersionDiff@1160040000 : Codeunit 6086319;
    BEGIN
      IF AppAdminPermCheck.WRITEPERMISSION THEN
        EXIT(TRUE);

      EMSetup.GET;
      EMSetup.TESTFIELD("Approval Administrator Role ID");

      IF ExpenseNAVVersionDiff.HasPermission(EMSetup."Approval Administrator Role ID") THEN
        EXIT(TRUE);

      IF ShowError THEN
        ERROR(Text013,EMSetup."Approval Administrator Role ID");
    END;

    PROCEDURE SendApprovalEmails@161024015();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Expense Approval E-Mail");
    END;

    PROCEDURE FilterApprovalEntry@1000000042(VAR Expense@1000000000 : Record 6086320;VAR ApprovalEntry@1000000001 : Record 454;UserFilterTypeArgument@161024012 : Integer);
    VAR
      SharingFilter@1160040000 : Text[1024];
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",FORMAT(Expense."Entry No."));
      CASE UserFilterTypeArgument OF
        UserFilterType::CurrUserOnly:
          ApprovalEntry.SETRANGE("Approver ID",GetCurrUserID);

        UserFilterType::CurrUserAndSharing:
          BEGIN
            SharingFilter := GetApprovalSharingToUserFilter(GetCurrUserID);
            IF SharingFilter <> '' THEN
              ApprovalEntry.SETFILTER("Approver ID",GetCurrUserID + '|' + SharingFilter)
            ELSE
              ApprovalEntry.SETRANGE("Approver ID",GetCurrUserID);
          END;
      END;
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);

      IF NOT ApprovalEntry.FINDFIRST THEN
        ERROR(Text001);
    END;

    PROCEDURE DrillDownApprovalEntries@1000000033(VAR Expense@1000000000 : Record 6086320);
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      ApprovalEntry.FILTERGROUP(4);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",FORMAT(Expense."Entry No."));
      ApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Expense Approval Req. Entries",ApprovalEntry);
    END;

    PROCEDURE FilterApprovalSharingToUser@161024012(VAR ApprovalSharing@161024012 : Record 6085749;UserIDArgument@161024013 : Code[50]) : Boolean;
    BEGIN
      EXIT(DCApprovalMgmt.FilterApprovalSharingToUser(ApprovalSharing,UserIDArgument));
    END;

    PROCEDURE FilterApprovalSharingFromUser@161024020(VAR ApprovalSharing@161024012 : Record 6085749;UserIDArgument@161024013 : Code[50]) : Boolean;
    BEGIN
      EXIT(DCApprovalMgmt.FilterApprovalSharingFromUser(ApprovalSharing,UserIDArgument));
    END;

    PROCEDURE GetApprovalSharingToUserFilter@161024014(_UserId@161024013 : Code[50]) FilterString : Text[1024];
    VAR
      ApprovalSharing@161024012 : Record 6085749;
    BEGIN
      IF NOT FilterApprovalSharingToUser(ApprovalSharing,_UserId) THEN
        EXIT;

      IF ApprovalSharing.FINDFIRST THEN
        REPEAT
          IF FilterString = '' THEN
            FilterString := ApprovalSharing."Owner User ID"
          ELSE
            FilterString := FilterString + '|' + ApprovalSharing."Owner User ID";
        UNTIL ApprovalSharing.NEXT = 0;
    END;

    PROCEDURE HasUserDocumentPermission@161024022(ApprovalEntry@161024012 : Record 454) IsValidApprover : Boolean;
    VAR
      UserSetup@161024017 : Record 91;
      ApprovalEntry2@161024014 : Record 454;
      ApprovalSharing@161024016 : Record 6085749;
      ContiniaUserSetup@1160040000 : Record 6086002;
    BEGIN
      ApprovalEntry.TESTFIELD(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver" THEN
        EXIT(TRUE);

      IF ApprovalEntry."Approver ID" = GetCurrUserID THEN
        EXIT(TRUE);

      ApprovalEntry2.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry."Sequence No.");
      IF NOT ApprovalEntry2.ISEMPTY THEN
        EXIT(TRUE);

      FilterApprovalSharingToUser(ApprovalSharing,GetCurrUserID);
      ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
      IF ApprovalSharing.FINDFIRST THEN
        REPEAT
          IF ApprovalSharing."Use Owners Limts & Permissions" THEN
            UserSetup.GET(ApprovalSharing."Owner User ID")
          ELSE
            UserSetup.GET(ApprovalSharing."Shared to User ID");
          ContiniaUserSetup.GET(UserSetup."User ID");

          IF ContiniaUserSetup."Unlimited Expense Approval" THEN
            IsValidApprover := TRUE
          ELSE
            IF ContiniaUserSetup."Expense Amount Approval Limit" >= ApprovalEntry."Amount (LCY)" THEN
              IsValidApprover := TRUE;
        UNTIL (ApprovalSharing.NEXT = 0) OR IsValidApprover;
    END;

    PROCEDURE GetApproverDisplayName@1160040000(ApproverID@1160040000 : Code[50]) : Text[250];
    VAR
      ContiniaUserSetup@1160040001 : Record 6086002;
    BEGIN
      IF ContiniaUserSetup.GET(ApproverID) THEN
        EXIT(ContiniaUserSetup.GetName)
      ELSE
        EXIT(ApproverID);
    END;

    PROCEDURE SendBackApprovalRequest@1160040005(ApprovalEntry@1000 : Record 454);
    VAR
      Expense@1160040000 : Record 6086320;
    BEGIN
      DCApprovalMgmt.SendBackApprovalRequest(ApprovalEntry);
      EVALUATE(Expense."Entry No.",ApprovalEntry."Document No.");
      Expense.GET(Expense."Entry No.");

      IF EMApprovalsBridge.IsApprovalsMailEnabled THEN
        EMApprovalsBridge.SendApprovalsMail(Expense,ApprovalEntry);
    END;

    PROCEDURE BuildApprovalEntriesForUserExp@1160040007(VAR TempApprovalEntry@161024014 : TEMPORARY Record 454;IncludeNormalSharing@161024012 : Boolean;IncludeOutOfOfficeSharing@161024016 : Boolean);
    BEGIN
      DCApprovalMgmt.BuildApprovalEntriesForUser(TempApprovalEntry,DATABASE::Expense,IncludeNormalSharing,IncludeOutOfOfficeSharing);
    END;

    PROCEDURE CancelApprovalRequest@1160040014(VAR Expense@1000 : Record 6086320);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      IF NOT (Expense.Status IN [Expense.Status::Open,Expense.Status::"Pending Expense User"]) THEN BEGIN
        EMApprovalsBridge.OrderByTableIDDocTypeAndSeq(ApprovalEntry);
        ApprovalEntry.SETRANGE("Table ID",DATABASE::Expense);
        ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
        ApprovalEntry.SETRANGE("Document No.",FORMAT(Expense."Entry No."));
        ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
        IF ApprovalEntry.FINDSET THEN
          REPEAT
            ApprovalEntry.Status := ApprovalEntry.Status::Canceled;
            ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
            ApprovalEntry."Last Modified By User ID" := GetCurrUserID;
            ApprovalEntry.MODIFY;
          UNTIL ApprovalEntry.NEXT = 0;

        Expense.Status := Expense.Status::Open;
        Expense.MODIFY(TRUE);
      END;
    END;

    PROCEDURE FinishApprovalEntryExpense@1160040011(Expense@1000 : Record 6086320);
    VAR
      ApprovalEntry@1011 : Record 454;
      DocReleased@1160040000 : Boolean;
      IsOpenStatusSet@1160040001 : Boolean;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        INIT;
        EMApprovalsBridge.OrderByTableIDDocTypeAndSeq(ApprovalEntry);
        SETRANGE("Table ID",DATABASE::Expense);
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Document No.",FORMAT(Expense."Entry No."));
        SETRANGE(Status,Status::Created);
        IF FINDFIRST THEN BEGIN
          Status := Status::Open;
          MODIFY;
          IF EMApprovalsBridge.IsApprovalsMailEnabled THEN
            EMApprovalsBridge.SendApprovalsMail(Expense,ApprovalEntry);
        END;
      END;
    END;

    PROCEDURE CalculateExpenseStatus@1160040013(ExpEntryNo@1160040000 : Integer);
    VAR
      Expense@1160040002 : Record 6086320;
      ApprovalEntry@1160040001 : Record 454;
      EMSetup@1160040003 : Record 6086300;
      SendToExpUser@1160040004 : Codeunit 6086324;
    BEGIN
      Expense.GET(ExpEntryNo);
      EMSetup.GET;
      IF EMSetup."Send Approval/Reject to App" = EMSetup."Send Approval/Reject to App"::Both THEN
        SendToExpUser.SendApprovalRejectNotification(Expense);

      Expense.GET(ExpEntryNo);
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",FORMAT(ExpEntryNo));
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open,ApprovalEntry.Status::Canceled);
      IF NOT ApprovalEntry.ISEMPTY THEN
        Expense.VALIDATE(Status,Expense.Status::"Pending Approval")
      ELSE
        Expense.VALIDATE(Status,Expense.Status::Approved);
      Expense.MODIFY(TRUE);
    END;

    PROCEDURE ApproveExpense@1160040010(VAR Expense@1160040000 : Record 6086320);
    BEGIN
      Expense.VALIDATE(Status,Expense.Status::Approved);
      Expense.MODIFY;

      CODEUNIT.RUN(CODEUNIT::"Expense-Validate",Expense);
    END;

    PROCEDURE RejectExpense@1160040009(VAR Expense@1160040000 : Record 6086320);
    BEGIN
      Expense.VALIDATE(Status,Expense.Status::Rejected);
      Expense.MODIFY;

      CODEUNIT.RUN(CODEUNIT::"Expense-Validate",Expense);
    END;

    PROCEDURE CreateAppvlCmtLine@6085573(TableID@1160040000 : Integer;DocType@1160040001 : Integer;DocNo@1160040002 : Code[20];Comment@6085575 : Text[80]);
    BEGIN
      DCApprovalMgmt.CreateAppvlCmtLine(TableID,DocType,DocNo,Comment);
    END;

    PROCEDURE GetNextApproverName@1160040017(Expense@161024012 : Record 6086320) : Text[250];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::Expense);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",FORMAT(Expense."Entry No."));
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(GetApproverDisplayName(ApprovalEntry."Approver ID"));
    END;

    PROCEDURE HasInvalidComments@1160040002(Expense@1160040000 : Record 6086320) : Boolean;
    VAR
      ExpenseComment@1160040001 : Record 6086355;
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Expense-Validate",Expense);
      COMMIT;

      ExpenseComment.SETCURRENTKEY("Expense Entry No.",Importance);
      ExpenseComment.SETRANGE("Expense Entry No.",Expense."Entry No.");
      ExpenseComment.SETRANGE(Importance,ExpenseComment.Importance::Error);
      EXIT(NOT ExpenseComment.ISEMPTY);
    END;

    PROCEDURE ManuallyEditAppvlEntry@1160040003(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalEntry2@161024013 : Record 454;
      ApprovalCmtLine@161024014 : Record 455;
    BEGIN
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD("Approver ID");

      ApprovalEntry2 := ApprovalEntry;
      IF NOT ApprovalEntry2.FIND THEN
        EXIT;

      IF ApprovalEntry2."Approver ID" <> '' THEN
        IF NOT CONFIRM(Text032,TRUE,ApprovalEntry.FIELDCAPTION("Approver ID"),ApprovalEntry."Approver ID") THEN
          ERROR('');

      IF NOT (ApprovalEntry.Status IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Created]) THEN
        ApprovalEntry.FIELDERROR(Status,Text031);

      ApprovalEntry2.LOCKTABLE;
      ApprovalEntry2.FIND;
      IF ApprovalEntry2."Approver ID" <> ApprovalEntry."Approver ID" THEN BEGIN
        CreateAppvlCmtLine(ApprovalEntry."Table ID",ApprovalEntry."Document Type",ApprovalEntry."Document No.",
          COPYSTR(STRSUBSTNO(Text035,ApprovalEntry2."Approver ID",ApprovalEntry."Approver ID"),
          1,MAXSTRLEN(ApprovalCmtLine.Comment)));

        ApprovalEntry2."Approver ID" := ApprovalEntry."Approver ID";
        ApprovalEntry2.MODIFY;
      END;
    END;

    PROCEDURE ManuallyDeleleteAppvlEntry@161024035(ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalCmtLine@161024014 : Record 455;
    BEGIN
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD(Status,ApprovalEntry.Status::Created);

      ApprovalEntry.DELETE(TRUE);

      CreateAppvlCmtLine(DATABASE::Expense,ApprovalEntry."Document Type",ApprovalEntry."Document No.",
        COPYSTR(STRSUBSTNO(Text036,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment)));
    END;

    PROCEDURE Code2Int@1160040006(Code@1160040000 : Code[20]) int : Integer;
    BEGIN
      IF Code = '' THEN
        EXIT;

      EVALUATE(int,Code);
    END;

    PROCEDURE GetCurrUserID@1160040018() : Code[50];
    VAR
      DCApprovalsBridge@1160040000 : Codeunit 6085790;
    BEGIN
      EXIT(DCApprovalsBridge.GetCurrentUser);
    END;

    PROCEDURE SetCurrUserID@1160040019(NewCurrUserID@1160040000 : Code[50]);
    BEGIN
      DCApprovalsBridge.SetCurrentUser(NewCurrUserID)
    END;

    PROCEDURE SupressComment@1160040022();
    BEGIN
      SupressCmt := TRUE;
    END;

    BEGIN
    END.
  }
}

