OBJECT Codeunit 6086321 Expense-Validate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.1.02.00;
  }
  PROPERTIES
  {
    TableNo=6086320;
    Permissions=TableData 6086323=r,
                TableData 6086355=rimd;
    OnRun=BEGIN
            Code(Rec);
          END;

  }
  CODE
  {
    VAR
      AttachmentsMissing@1160040001 : TextConst 'ENU=Attachments missing.';
      FieldMissing@1160040003 : TextConst 'ENU=%1 must be specified.';
      InvalidMatch@1160040000 : TextConst 'ENU=Expense cannot be matched when %1 is set.';
      MissingAccount@1160040002 : TextConst 'ENU=%1 is missing. Posting Setup for %2 ''%3'' is most likely not configured correctly.';
      NotMatched@1160040004 : TextConst 'ENU=Expense must be matched when %1 is not set.';
      InboxError@1160040005 : TextConst 'ENU=This expense exists in the Expense Inbox and must be processed from there.';
      JobProductPostingGroup@1160040006 : TextConst 'ENU=You cannot specify %1 and %2 in the same time.';
      AccountMissmatch@1160040007 : TextConst 'ENU=The %1 %2 is different from the current setup output %3.';
      GLAccMissingDim@1160040008 : TextConst 'ENU=One or more mandatory dimensions has not been specified for Expense Account %1.';

    LOCAL PROCEDURE Code@1160040031(Expense@1160040001 : Record 6086320);
    VAR
      ExpComment@1160040000 : Record 6086355;
      ExpenseInbox@1160040003 : Record 6086323;
      GLAccount@1160040008 : Record 15;
      ExpCmtMgt@1160040002 : Codeunit 6086323;
      ExpenseCheck@1160040006 : Codeunit 6086333;
      NewCalculatedAccount@1160040004 : Code[10];
      FailingAccount@1160040005 : Code[20];
    BEGIN
      ExpComment.SETRANGE("Validation Comment",TRUE);
      ExpComment.SETRANGE("Expense Entry No.",Expense."Entry No.");
      ExpComment.DELETEALL;

      IF Expense."Employee No." = '' THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'NO EMPLOYEE',
          STRSUBSTNO(FieldMissing,Expense.FIELDCAPTION("Employee No.")),TRUE);

      IF Expense."Document Date" = 0D THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'NO DOCUMENT DATE',
          STRSUBSTNO(FieldMissing,Expense.FIELDCAPTION("Document Date")),TRUE);

      IF (Expense."Expense Type" = '') AND (Expense."Job No." <> '') THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'NO EXPENSE TYPE',
          STRSUBSTNO(FieldMissing,Expense.FIELDCAPTION("Expense Type")),TRUE);

      Expense.CALCFIELDS("No. of Attachments");
      IF Expense."No. of Attachments" = 0 THEN
        IF NOT Expense."No Refund" THEN
          IF NOT (Expense.Status IN [Expense.Status::Approved,Expense.Status::Rejected]) THEN
            ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'NO ATTACHMENT',AttachmentsMissing,TRUE)
          ELSE
            ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Information,'NO ATTACHMENT',AttachmentsMissing,TRUE);

      IF Expense."Matched to Bank Transaction" AND Expense."Cash/Private Card" THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'INVALID MATCH',
          STRSUBSTNO(InvalidMatch,Expense.FIELDCAPTION("Cash/Private Card")),TRUE);

      IF (NOT Expense."Matched to Bank Transaction") AND (NOT Expense."Cash/Private Card") THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'MATCH MISSING',
          STRSUBSTNO(NotMatched,Expense.FIELDCAPTION("Cash/Private Card")),TRUE);

      IF (Expense."Expense Type" <> '') AND (Expense."Expense Account" = '') THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'MISSING ACCOUNT',
          STRSUBSTNO(MissingAccount,Expense.FIELDCAPTION("Expense Account"),Expense.FIELDCAPTION("Expense Type"),
          Expense."Expense Type"),TRUE);

      IF (Expense."Expense Type" <> '') AND (Expense."Expense Account" <> '') AND Expense.PostingSetupChanged(NewCalculatedAccount) THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'ACCOUNT MISSMATCH',
          STRSUBSTNO(AccountMissmatch,Expense.FIELDCAPTION("Expense Account"),Expense."Expense Account",NewCalculatedAccount),TRUE);

      ExpenseInbox.SETCURRENTKEY("Expense GUID");
      ExpenseInbox.SETRANGE("Expense GUID",Expense."Expense GUID");
      ExpenseInbox.SETFILTER(Status,'%1|%2',ExpenseInbox.Status::Pending,ExpenseInbox.Status::Error);
      IF ExpenseInbox.FINDFIRST THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'INBOX ERROR',InboxError,TRUE);

      IF (Expense."Gen. Prod. Posting Group" <> '') AND (Expense."Job No." <> '') THEN
        ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'JOBPRODPOSTING',
          STRSUBSTNO(JobProductPostingGroup,Expense.FIELDCAPTION("Gen. Prod. Posting Group"),Expense.FIELDCAPTION("Job No.")),TRUE);

      IF Expense."Expense Account" <> '' THEN
        IF NOT Expense.CheckGLDefaultDim(FailingAccount) THEN
          ExpCmtMgt.AddComment(Expense."Entry No.",ExpComment.Importance::Error,'GLACCDEFDIM',
            STRSUBSTNO(GLAccMissingDim,FailingAccount),TRUE);
    END;

    BEGIN
    END.
  }
}

