OBJECT Codeunit 6086354 Continia Config. Mgt. - EM
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.1.03.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempExpSetup@1160040008 : TEMPORARY Record 6086300;
      TempCOSetup@1160040015 : TEMPORARY Record 6086500;
      TempExpType@1160040006 : TEMPORARY Record 6086307;
      TempBankCurrMap@1160040016 : TEMPORARY Record 6086310;
      TempCreditCardType@1160040009 : TEMPORARY Record 6086316;
      TempExpRemTerms@1160040011 : TEMPORARY Record 6086317;
      TempExpRemLevel@1160040010 : TEMPORARY Record 6086318;
      TempFieldType@1160040007 : TEMPORARY Record 6086345;
      TempConfFields@1000 : TEMPORARY Record 6086346;
      TempLookupVal@1160040003 : TEMPORARY Record 6086347;
      TempTableFilter@1160040004 : TEMPORARY Record 6086348;
      TempFieldTrans@1160040005 : TEMPORARY Record 6086352;
      TempExpPostingDescField@1160040000 : TEMPORARY Record 6086333;
      COConfigMgt@1160040001 : Codeunit 6086502;
      Window@1160040030 : Dialog;
      Filename@1160040017 : Text[250];
      DialogCount@1160040034 : Integer;
      TotalCount@1160040031 : Integer;
      Direction@1160040018 : 'Import,Export';
      Step@1160040032 : 'From File,From Temp,To Temp,To File';
      NewCompany@1160040020 : Boolean;
      CntTxt@1160040021 : TextConst 'ENU="No. of Records: "';
      EmptyErr@1160040019 : TextConst 'ENU=%1 Cannot be empty.';
      Text001@1160040014 : TextConst 'ENU=Importing Setup...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text002@1160040013 : TextConst 'ENU=Committing setup...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text003@1160040012 : TextConst 'ENU=Processing Setup...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text004@1160040002 : TextConst 'ENU=Exporting Setup...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';

    PROCEDURE ShowTree@1160040002(VAR TempConfigLine@1160040002 : TEMPORARY Record 6085612);
    BEGIN
      SetEMFields;

      IF Direction = Direction::Import THEN
        ImportFile(TempConfigLine)
      ELSE
        ExportTemp(TempConfigLine);
    END;

    PROCEDURE PerfomAction@1160040004(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612);
    BEGIN
      IF Direction = Direction::Import THEN
        ImportIncluded(TempConfigLine)
      ELSE
        ExportIncluded(TempConfigLine);
    END;

    PROCEDURE ImportFile@1160040000(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612);
    VAR
      RecRef@1160040001 : RecordRef;
      EntryNo@1160040003 : Integer;
    BEGIN
      OpenDialog(Step::"From File",13);

      COConfigMgt.LoadXML(Filename);

      RecRef.GETTABLE(TempExpSetup);
      ImportTemp(DATABASE::"Expense Management Setup",RecRef);
      RecRef.GETTABLE(TempExpType);
      ImportTemp(DATABASE::"Expense Type",RecRef);

      RecRef.GETTABLE(TempCOSetup);
      ImportTemp(DATABASE::"Continia Online Setup",RecRef);

      RecRef.GETTABLE(TempFieldType);
      ImportTemp(DATABASE::"Field Type",RecRef);
      RecRef.GETTABLE(TempTableFilter);
      ImportTemp(DATABASE::"Table Filter Field EM",RecRef);
      RecRef.GETTABLE(TempConfFields);
      ImportTemp(DATABASE::"Configured Field",RecRef);
      RecRef.GETTABLE(TempFieldTrans);
      ImportTemp(DATABASE::"Field Translation",RecRef);
      RecRef.GETTABLE(TempLookupVal);
      ImportTemp(DATABASE::"Lookup Value",RecRef);

      RecRef.GETTABLE(TempExpRemTerms);
      ImportTemp(DATABASE::"Expense Reminder Terms",RecRef);
      RecRef.GETTABLE(TempExpRemLevel);
      ImportTemp(DATABASE::"Expense Reminder Level",RecRef);

      RecRef.GETTABLE(TempCreditCardType);
      ImportTemp(DATABASE::"Credit Card Type",RecRef);
      RecRef.GETTABLE(TempBankCurrMap);
      ImportTemp(DATABASE::"Bank Currency Map",RecRef);

      RecRef.GETTABLE(TempExpPostingDescField);
      ImportTemp(DATABASE::"Exp. Posting Desc. Field",RecRef);

      EntryNo :=
        CreateTree(TempConfigLine,TempExpSetup,TempCOSetup,TempExpType,TempFieldType,TempConfFields,TempExpRemTerms,
         TempCreditCardType,TempBankCurrMap);

      COConfigMgt.ClearXML;

      CloseDialog;
    END;

    PROCEDURE ImportTemp@1160040020(TableNo@1160040004 : Integer;RecRef@1160040003 : RecordRef);
    VAR
      i@1160040001 : Integer;
      NoOfRecords@1160040002 : Integer;
    BEGIN
      UpdateDialog;

      RecRef.DELETEALL;

      NoOfRecords := COConfigMgt.GetCount(TableNo);
      FOR i := 0 TO NoOfRecords - 1 DO
        COConfigMgt.ImportRecord(TableNo,i,RecRef);
    END;

    PROCEDURE ExportTemp@1160040018(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612);
    VAR
      ExpSetup@1160040003 : Record 6086300;
      COSetup@1160040004 : Record 6086500;
      ExpType@1160040001 : Record 6086307;
      BankCurrMap@1160040008 : Record 6086310;
      CreditCardType@1160040006 : Record 6086316;
      ExpRemTerms@1160040005 : Record 6086317;
      FieldType@1160040002 : Record 6086345;
      ConfFields@1000 : Record 6086346;
    BEGIN
      OpenDialog(Step::"To Temp",1);
      CreateTree(TempConfigLine,ExpSetup,COSetup,ExpType,FieldType,ConfFields,ExpRemTerms,CreditCardType,BankCurrMap);
      CloseDialog;
    END;

    PROCEDURE CreateTree@1160040001(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612;VAR ExpSetup@1160040009 : Record 6086300;VAR COSetup@1160040005 : Record 6086500;VAR ExpType@1160040001 : Record 6086307;VAR FieldType@1160040008 : Record 6086345;VAR ConfFields@1000 : Record 6086346;VAR ExpRemTerms@1160040003 : Record 6086317;VAR CreditCardType@1160040002 : Record 6086316;VAR BankCurrMap@1160040006 : Record 6086310) LastEntryNo : Integer;
    VAR
      RecRef@1160040010 : RecordRef;
      HeaderEntryNo@1160040007 : Integer;
      Include@1160040004 : Boolean;
      RecID@1160040011 : RecordID;
    BEGIN
      CLEAR(RecID);
      LastEntryNo := 1;
      TempConfigLine.RESET;
      TempConfigLine.DELETEALL;

      IF ExpSetup.GET THEN BEGIN
        Include := (Direction = Direction::Export) OR ((Direction = Direction::Import) AND NewCompany);
        RecRef.GETTABLE(ExpSetup);
        InitConfigLine(LastEntryNo,ExpSetup.TABLECAPTION,CntTxt + FORMAT(ExpSetup.COUNT),Include,0,0,0,
          TempConfigLine.Status::"No Children",DATABASE::"Expense Management Setup",ExpSetup."Primary Key",RecRef.RECORDID,
          TempConfigLine,LastEntryNo);
      END;

      IF COSetup.GET THEN BEGIN
        RecRef.GETTABLE(COSetup);
        InitConfigLine(LastEntryNo,COSetup.TABLECAPTION,CntTxt + FORMAT(COSetup.COUNT),Include,0,0,0,
          TempConfigLine.Status::"No Children",DATABASE::"Continia Online Setup",COSetup."Primary Key",RecRef.RECORDID,
          TempConfigLine,LastEntryNo);
      END;

      IF ExpType.FINDSET THEN BEGIN
        InitConfigLine(LastEntryNo,ExpType.TABLECAPTION,CntTxt + FORMAT(ExpType.COUNT),TRUE,0,0,0,TempConfigLine.Status::"Has Children",
          0,'',RecID,TempConfigLine,LastEntryNo);
        HeaderEntryNo := LastEntryNo;
        REPEAT
          RecRef.GETTABLE(ExpType);
          InitConfigLine(LastEntryNo,ExpType.TABLECAPTION,ExpType.Code,TRUE,HeaderEntryNo,1,1,
            TempConfigLine.Status::"No Children",DATABASE::"Expense Type",ExpType.Code,RecRef.RECORDID,TempConfigLine,LastEntryNo);
        UNTIL ExpType.NEXT = 0;
      END;

      IF FieldType.FINDSET THEN BEGIN
        InitConfigLine(LastEntryNo,FieldType.TABLECAPTION,CntTxt + FORMAT(FieldType.COUNT),TRUE,0,0,0,
          TempConfigLine.Status::"Has Children",0,'',RecID,TempConfigLine,LastEntryNo);
        HeaderEntryNo := LastEntryNo;
        REPEAT
          RecRef.GETTABLE(FieldType);
          InitConfigLine(LastEntryNo,FieldType.TABLECAPTION,FieldType.Code,TRUE,HeaderEntryNo,1,1,
            TempConfigLine.Status::"No Children",DATABASE::"Field Type",FieldType.Code,RecRef.RECORDID,TempConfigLine,LastEntryNo);
        UNTIL FieldType.NEXT = 0;
      END;

      IF ExpRemTerms.FINDSET THEN BEGIN
        InitConfigLine(LastEntryNo,ExpRemTerms.TABLECAPTION,CntTxt + FORMAT(ExpRemTerms.COUNT),TRUE,0,0,0,
          TempConfigLine.Status::"Has Children",0,'',RecID,TempConfigLine,LastEntryNo);
        HeaderEntryNo := LastEntryNo;
        REPEAT
          RecRef.GETTABLE(ExpRemTerms);
          InitConfigLine(LastEntryNo,ExpRemTerms.TABLECAPTION,ExpRemTerms.Code,TRUE,HeaderEntryNo,1,1,
            TempConfigLine.Status::"No Children",DATABASE::"Expense Reminder Terms",
            ExpRemTerms.Code,RecRef.RECORDID,TempConfigLine,LastEntryNo);
        UNTIL ExpRemTerms.NEXT = 0;
      END;

      IF CreditCardType.FINDSET THEN BEGIN
        InitConfigLine(LastEntryNo,CreditCardType.TABLECAPTION,CntTxt + FORMAT(CreditCardType.COUNT),TRUE,0,0,0,
          TempConfigLine.Status::"Has Children",0,'',RecID,TempConfigLine,LastEntryNo);
        HeaderEntryNo := LastEntryNo;
        REPEAT
          RecRef.GETTABLE(CreditCardType);
          InitConfigLine(LastEntryNo,CreditCardType.TABLECAPTION,CreditCardType.Code,TRUE,HeaderEntryNo,1,1,
            TempConfigLine.Status::"No Children",DATABASE::"Credit Card Type",CreditCardType.Code,RecRef.RECORDID,
            TempConfigLine,LastEntryNo);
        UNTIL CreditCardType.NEXT = 0;
      END;

      IF BankCurrMap.FINDSET THEN BEGIN
        InitConfigLine(LastEntryNo,BankCurrMap.TABLECAPTION,CntTxt + FORMAT(BankCurrMap.COUNT),TRUE,0,0,0,
          TempConfigLine.Status::"Has Children",0,'',RecID,TempConfigLine,LastEntryNo);
        HeaderEntryNo := LastEntryNo;
        REPEAT
          RecRef.GETTABLE(BankCurrMap);
          InitConfigLine(LastEntryNo,BankCurrMap.TABLECAPTION,BankCurrMap."Currency Code (Bank)",TRUE,HeaderEntryNo,
            1,1,TempConfigLine.Status::"No Children",DATABASE::"Bank Currency Map",BankCurrMap."Bank Code",RecRef.RECORDID,
            TempConfigLine,LastEntryNo);
        UNTIL BankCurrMap.NEXT = 0;
      END;

      IF Direction = Direction::Import THEN
        ExcludeExistingRecords(TempConfigLine);
    END;

    LOCAL PROCEDURE InitConfigLine@1160040030(LastEntryNo@1160040002 : Integer;TblName@1160040003 : Text[50];RecordName@1160040004 : Text[50];Include@1160040005 : Boolean;SourceEntryNo@1160040006 : Integer;Indentation@1160040007 : Integer;Level@1160040008 : Integer;Status@1160040009 : 'Has Children,Expanded,No Children';TableNo@1160040010 : Integer;Code@1160040011 : Code[20];RecordID@1160040012 : RecordID;VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612;VAR CurrEntryNo@1160040001 : Integer);
    BEGIN
      CurrEntryNo := LastEntryNo + 1;

      TempConfigLine.INIT;
      TempConfigLine."Entry No." := CurrEntryNo;
      TempConfigLine."Table Name" := TblName;
      TempConfigLine."Record Name" := RecordName;
      TempConfigLine.Include := Include;
      TempConfigLine."Source Entry No." := SourceEntryNo;
      TempConfigLine.Indentation := Indentation;
      TempConfigLine.Level := Level;
      TempConfigLine.Status := Status;
      TempConfigLine."Table No" := TableNo;
      TempConfigLine.Code := Code;
      TempConfigLine."Record ID" := RecordID;
      TempConfigLine.INSERT;
    END;

    PROCEDURE ImportIncluded@1160040005(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612);
    VAR
      ExpRemTerm@1160040007 : Record 6086317;
      ExpRemLevel@1160040008 : Record 6086318;
      FieldType@1160040006 : Record 6086345;
      ConfiguredFields@1002 : Record 6086346;
      LookupValues@1160040003 : Record 6086347;
      TableFilter@1160040004 : Record 6086348;
      FieldTransl@1160040005 : Record 6086352;
      Object@1001 : Record 2000000001;
      CaptureRTCLib@1000 : Codeunit 6085660;
      EmailTmplImpExp@1160040002 : Codeunit 6086332;
      ToRecRef@1160040012 : RecordRef;
      ExpenseSetupHandled@1160040001 : Boolean;
    BEGIN
      TempConfigLine.RESET;
      TempConfigLine.SETRANGE(Include,TRUE);
      TempConfigLine.SETFILTER("Table No",'<>%1',0);
      IF TempConfigLine.FINDSET THEN BEGIN
        OpenDialog(Step::"From Temp",TempConfigLine.COUNT);

        REPEAT
          UpdateDialog;

          ImportIncludedTable(TempConfigLine,ToRecRef);

          // IMPORT ASSOCIATED SUB - TABLES:

          CASE TempConfigLine."Table No" OF

            DATABASE::"Expense Management Setup":
              BEGIN
                ImportSubTable(DATABASE::"Exp. Posting Desc. Field",0,'',0,'');
                ExpenseSetupHandled := TRUE;
              END;

            DATABASE::"Field Type":
              BEGIN
                ToRecRef.SETTABLE(FieldType);

                IF FieldType.ISEMPTY THEN
                  ERROR(EmptyErr,FieldType.TABLECAPTION);

                ImportSubTable(DATABASE::"Table Filter Field EM",TableFilter.FIELDNO("Table Filter GUID"),
                  FieldType."Source Table Filter GUID",0,'');
                ImportSubTable(DATABASE::"Field Translation",FieldTransl.FIELDNO("Field Type Code"),FieldType.Code,0,'');
                IF FieldType."Manual Lookup Values" THEN
                  ImportSubTable(DATABASE::"Lookup Value",LookupValues.FIELDNO("Field Type Code"),FieldType.Code,0,'');

              END;
            DATABASE::"Expense Reminder Terms":
              BEGIN
                ToRecRef.SETTABLE(ExpRemTerm);

                IF ExpRemTerm.ISEMPTY THEN
                  ERROR(EmptyErr,ExpRemTerm.TABLECAPTION);

                ImportSubTable(DATABASE::"Expense Reminder Level",ExpRemLevel.FIELDNO("Reminder Terms Code"),ExpRemTerm.Code,0,'');
              END;
          END;

          ToRecRef.CLOSE;

        UNTIL TempConfigLine.NEXT = 0;

        //CONFIGURED FIELDS
        IF ConfiguredFields.ISEMPTY THEN BEGIN
          CleanMissingCodes;
          ImportSubTable(DATABASE::"Configured Field",0,'',0,'');
        END;

        IF ExpenseSetupHandled THEN
          EmailTmplImpExp.GetExpEmailTemplates(Filename);

        CloseDialog;
      END;

      IF Object.GET(Object.Type::Table,'',2000000069) THEN
        CaptureRTCLib.CreateClientAddInEntries;
      CODEUNIT.RUN(CODEUNIT::"Create EM roles");
      CreateEMApprovalTemplate;

      TempConfigLine.RESET;
      TempConfigLine.SETRANGE(Include,FALSE);
      TempConfigLine.DELETEALL;
      TempConfigLine.RESET;
    END;

    PROCEDURE ImportSubTable@1160040013(TableNo@1160040000 : Integer;Field1@1160040005 : Integer;Filter1@1160040004 : Text[100];Field2@1160040003 : Integer;Filter2@1160040002 : Text[100]);
    VAR
      FromRecRef@1160040001 : RecordRef;
      ToRecRef@1160040006 : RecordRef;
    BEGIN
      CASE TableNo OF
        DATABASE::"Expense Management Setup":
          FromRecRef.GETTABLE(TempExpSetup);
        DATABASE::"Expense Type":
          FromRecRef.GETTABLE(TempExpType);

        DATABASE::"Field Type":
          FromRecRef.GETTABLE(TempFieldType);
        DATABASE::"Configured Field":
          FromRecRef.GETTABLE(TempConfFields);
        DATABASE::"Table Filter Field EM":
          FromRecRef.GETTABLE(TempTableFilter);
        DATABASE::"Field Translation":
          FromRecRef.GETTABLE(TempFieldTrans);
        DATABASE::"Lookup Value":
          FromRecRef.GETTABLE(TempLookupVal);

        DATABASE::"Expense Reminder Level":
          FromRecRef.GETTABLE(TempExpRemLevel);
        DATABASE::"Expense Reminder Terms":
          FromRecRef.GETTABLE(TempExpRemTerms);

        DATABASE::"Credit Card Type":
          FromRecRef.GETTABLE(TempCreditCardType);
        DATABASE::"Bank Currency Map":
          FromRecRef.GETTABLE(TempBankCurrMap);

        DATABASE::"Exp. Posting Desc. Field":
          FromRecRef.GETTABLE(TempExpPostingDescField);
      END;

      IF Field1 > 0 THEN
        FilterRecRef(FromRecRef,Field1,Filter1);

      IF Field2 > 0 THEN
        FilterRecRef(FromRecRef,Field2,Filter2);

      IF FromRecRef.FINDSET THEN BEGIN
        ToRecRef.OPEN(TableNo);

        REPEAT
          //DELETE THE ENTRY.THE USER HAS SELECTED THAT HE WANT TO OVERWRITE
          IF ToRecRef.GET(FromRecRef.RECORDID) THEN
            ToRecRef.DELETE(TRUE);

          ToRecRef.INIT;
          CopyRecRef(FromRecRef,ToRecRef);
          ToRecRef.INSERT(TRUE);
        UNTIL FromRecRef.NEXT = 0;
      END;
    END;

    PROCEDURE ImportIncludedTable@1160040003(TempConfigLine@1160040000 : TEMPORARY Record 6085612;VAR ToRecRef@1160040002 : RecordRef);
    VAR
      FromRecRef@1160040001 : RecordRef;
    BEGIN
      CASE TempConfigLine."Table No" OF
        DATABASE::"Expense Management Setup":
          FromRecRef.GETTABLE(TempExpSetup);
        DATABASE::"Expense Type":
          FromRecRef.GETTABLE(TempExpType);

        DATABASE::"Continia Online Setup":
          FromRecRef.GETTABLE(TempCOSetup);

        DATABASE::"Field Type":
          FromRecRef.GETTABLE(TempFieldType);
        DATABASE::"Field Type":
          FromRecRef.GETTABLE(TempConfFields);
        DATABASE::"Table Filter Field EM":
          FromRecRef.GETTABLE(TempTableFilter);
        DATABASE::"Field Translation":
          FromRecRef.GETTABLE(TempFieldTrans);
        DATABASE::"Lookup Value":
          FromRecRef.GETTABLE(TempLookupVal);

        DATABASE::"Expense Reminder Terms":
          FromRecRef.GETTABLE(TempExpRemTerms);
        DATABASE::"Expense Reminder Level":
          FromRecRef.GETTABLE(TempExpRemLevel);

        DATABASE::"Credit Card Type":
          FromRecRef.GETTABLE(TempCreditCardType);
        DATABASE::"Bank Currency Map":
          FromRecRef.GETTABLE(TempBankCurrMap);
      END;

      FromRecRef.GET(TempConfigLine."Record ID");

      //DELETE THE ENTRY.THE USER HAS SELECTED THAT HE WANT TO OVERWRITE
      CLEAR(ToRecRef);
      ToRecRef.OPEN(TempConfigLine."Table No");
      IF ToRecRef.GET(TempConfigLine."Record ID") THEN
        ToRecRef.DELETE(TRUE);
      ToRecRef.CLOSE;

      FromRecRef.GET(TempConfigLine."Record ID");
      ToRecRef.OPEN(TempConfigLine."Table No");
      CopyRecRef(FromRecRef,ToRecRef);
      ToRecRef.INSERT(TRUE);
    END;

    PROCEDURE ExportIncluded@1160040006(VAR TempConfigLine@1160040002 : TEMPORARY Record 6085612);
    VAR
      ExpRemTerm@1160040007 : Record 6086317;
      ExpRemLevel@1160040006 : Record 6086318;
      FieldType@1160040008 : Record 6086345;
      ConfiguredFields@1000 : Record 6086346;
      LookupValues@1160040001 : Record 6086347;
      TableFilter@1160040000 : Record 6086348;
      FieldTransl@1160040003 : Record 6086352;
      EmailTmplImpExp@1160040005 : Codeunit 6086332;
      RecRef@1160040011 : RecordRef;
      ExpenseSetupHandled@1160040004 : Boolean;
    BEGIN
      TempConfigLine.RESET;
      TempConfigLine.SETRANGE(Include,TRUE);
      TempConfigLine.SETFILTER("Table No",'<>%1',0);
      IF TempConfigLine.FINDSET THEN BEGIN
        OpenDialog(Step::"To File",TempConfigLine.COUNT);

        COConfigMgt.CreateXML;

        REPEAT
          UpdateDialog;

          RecRef.GET(TempConfigLine."Record ID");
          COConfigMgt.ExportRecord(RecRef.NUMBER,RecRef);

          CASE TempConfigLine."Table No" OF

            // EXPORT ASSOCIATED SUB - TABLES
            DATABASE::"Expense Management Setup":
              BEGIN
                ExportTable(DATABASE::"Exp. Posting Desc. Field",0,'',0,'');
                ExpenseSetupHandled := TRUE;
              END;

            DATABASE::"Field Type":
              BEGIN
                RecRef.SETTABLE(FieldType);
                IF FieldType.ISEMPTY THEN
                  ERROR(EmptyErr,FieldType.TABLECAPTION);
                ExportTable(DATABASE::"Table Filter Field EM",TableFilter.FIELDNO("Table Filter GUID"),
                  FieldType."Source Table Filter GUID",0,'');
                ExportTable(DATABASE::"Field Translation",FieldTransl.FIELDNO("Field Type Code"),FieldType.Code,0,'');
                IF FieldType."Manual Lookup Values" THEN
                  ExportTable(DATABASE::"Lookup Value",LookupValues.FIELDNO("Field Type Code"),FieldType.Code,0,'');
              END;

            DATABASE::"Expense Reminder Terms":
              BEGIN
                RecRef.SETTABLE(ExpRemTerm);
                IF ExpRemTerm.ISEMPTY THEN
                  ERROR(EmptyErr,ExpRemTerm.TABLECAPTION);

                ExportTable(DATABASE::"Expense Reminder Level",ExpRemLevel.FIELDNO("Reminder Terms Code"),ExpRemTerm.Code,0,'');
              END;

          END;
        UNTIL TempConfigLine.NEXT = 0;

        //CONFIGURED FIELDS
        IF NOT ConfiguredFields.ISEMPTY THEN
          ExportTable(DATABASE::"Configured Field",0,'',0,'');

        COConfigMgt.SaveXML(Filename);

        IF ExpenseSetupHandled THEN
          EmailTmplImpExp.AddExpEmailTemplates(Filename);

        CloseDialog;
      END;

      TempConfigLine.SETRANGE(Include,FALSE);
      TempConfigLine.DELETEALL;
      TempConfigLine.RESET;
    END;

    PROCEDURE ExportTable@1160040010(TableNo@1160040000 : Integer;Field1@1160040002 : Integer;Filter1@1160040003 : Text[100];Field2@1160040006 : Integer;Filter2@1160040005 : Text[100]);
    VAR
      RecRef@1160040001 : RecordRef;
    BEGIN
      RecRef.OPEN(TableNo);

      IF Field1 > 0 THEN
        FilterRecRef(RecRef,Field1,Filter1);

      IF Field2 > 0 THEN
        FilterRecRef(RecRef,Field2,Filter2);

      IF RecRef.FINDSET THEN
        REPEAT
          COConfigMgt.ExportRecord(RecRef.NUMBER,RecRef);
        UNTIL RecRef.NEXT = 0;
    END;

    PROCEDURE CopyRecRef@1160040008(VAR FromRecRef@1160040000 : RecordRef;VAR ToRecRef@1160040001 : RecordRef);
    VAR
      Field@1160040002 : Record 2000000041;
      FromFieldRef@1160040003 : FieldRef;
      ToFieldRef@1160040004 : FieldRef;
    BEGIN
      Field.RESET;
      Field.SETRANGE(TableNo,FromRecRef.NUMBER);
      Field.SETRANGE(Enabled,TRUE);
      Field.SETRANGE(Class,Field.Class::Normal);
      Field.SETFILTER(Type,'<>%1',Field.Type::BLOB);
      IF Field.FINDSET THEN
        REPEAT
          FromFieldRef := FromRecRef.FIELD(Field."No.");
          ToFieldRef := ToRecRef.FIELD(Field."No.");
          ToFieldRef.VALUE := FromFieldRef.VALUE;
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE FilterRecRef@1160040009(VAR RecRef@1160040000 : RecordRef;FldNo@1160040001 : Integer;FieldFilter@1160040002 : Text[100]);
    VAR
      FieldRef@1160040003 : FieldRef;
    BEGIN
      FieldRef := RecRef.FIELD(FldNo);
      FieldRef.SETFILTER(FieldFilter);
    END;

    PROCEDURE SetEMFields@1160040007();
    BEGIN
      COConfigMgt.AddExcludeField(DATABASE::"Field Type",TempFieldType.FIELDNO("Last Update Date/Time"));
      COConfigMgt.AddExcludeField(DATABASE::"Field Type",TempFieldType.FIELDNO("Last Upload Date/Time"));
      COConfigMgt.AddExcludeField(DATABASE::"Continia Online Setup",TempCOSetup.FIELDNO("Client ID"));
      COConfigMgt.AddExcludeField(DATABASE::"Continia Online Setup",TempCOSetup.FIELDNO("Client Password"));
      COConfigMgt.AddExcludeField(DATABASE::"Continia Online Setup",TempCOSetup.FIELDNO("Company GUID"));
    END;

    PROCEDURE SetParam@1160040011(NewDirection@1160040002 : 'Import,Export';NewFilename@1160040001 : Text[250];IsNewCompany@1160040000 : Boolean);
    BEGIN
      Direction := NewDirection;
      Filename := NewFilename;
      NewCompany := IsNewCompany;
    END;

    LOCAL PROCEDURE ExcludeExistingRecords@38(VAR TempConfigLine@1000 : TEMPORARY Record 6085612);
    VAR
      TempConfigLine2@1002 : TEMPORARY Record 6085612;
      RecRef@1001 : RecordRef;
      SubLevelCnt@1160040000 : Integer;
    BEGIN
      TempConfigLine.RESET;
      TempConfigLine.SETFILTER("Table No",'<>%1',0);
      IF TempConfigLine.FINDSET(TRUE,FALSE) THEN
        REPEAT
          RecRef.OPEN(TempConfigLine."Table No");
          IF RecRef.GET(TempConfigLine."Record ID") THEN BEGIN
            IF NOT ((TempConfigLine."Table No" = DATABASE::"Expense Management Setup") AND NewCompany) THEN BEGIN
              TempConfigLine.Include := FALSE;
              TempConfigLine.MODIFY;
            END;
          END;
          RecRef.CLOSE;
        UNTIL TempConfigLine.NEXT = 0;

      TempConfigLine.RESET;
      IF TempConfigLine.FINDSET THEN
        REPEAT
          TempConfigLine2 := TempConfigLine;
          TempConfigLine2.INSERT;
        UNTIL TempConfigLine.NEXT = 0;

      TempConfigLine.RESET;
      TempConfigLine.SETRANGE(Level,0);
      IF TempConfigLine.FINDSET(TRUE,FALSE) THEN
        REPEAT
          TempConfigLine2.RESET;
          TempConfigLine2.SETRANGE("Source Entry No.",TempConfigLine."Entry No.");
          SubLevelCnt := TempConfigLine2.COUNT;
          TempConfigLine2.SETRANGE(Include,TRUE);
          IF SubLevelCnt > 0 THEN
            IF TempConfigLine2.ISEMPTY THEN
              TempConfigLine.Include := FALSE
            ELSE
              TempConfigLine.Include := TRUE;
          TempConfigLine.MODIFY;
        UNTIL TempConfigLine.NEXT = 0;

      TempConfigLine2.RESET;
      TempConfigLine2.DELETEALL;
    END;

    LOCAL PROCEDURE CleanMissingCodes@15();
    VAR
      FieldType@1000 : Record 6086345;
    BEGIN
      TempConfFields.RESET;
      IF TempConfFields.FINDSET THEN
        REPEAT
          IF NOT FieldType.GET(TempConfFields."Field Code") THEN
            TempConfFields.DELETE;
        UNTIL TempConfFields.NEXT = 0;
    END;

    PROCEDURE CreateEMApprovalTemplate@1160040014();
    VAR
      EMApprovalsBridge@1000 : Codeunit 6086369;
    BEGIN
      EMApprovalsBridge.CreateEMApprovalTemplate;
    END;

    PROCEDURE OpenDialog@1160040016(NewStep@1160040000 : 'From File,From Temp,To Temp,To File';NewTotalCount@1160040001 : Integer);
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      TotalCount := NewTotalCount;
      DialogCount := 0;

      CASE NewStep OF
        Step::"From File":
          Window.OPEN(Text001);
        Step::"From Temp":
          Window.OPEN(Text002);
        Step::"To Temp":
          Window.OPEN(Text003);
        Step::"To File":
          Window.OPEN(Text004);
      END;
    END;

    PROCEDURE CloseDialog@1160040017();
    BEGIN
      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE UpdateDialog@1160040019();
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      DialogCount += 1;
      Window.UPDATE(1,ROUND(DialogCount / TotalCount * 10000,1,'>'));
    END;

    BEGIN
    END.
  }
}

