OBJECT Codeunit 6086371 EM Workflow Response Handling
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW19.00.00.1.02.00,4PS9.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Static-Automatic;
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 1511=imd,
                TableData 6086320=rm;
    SingleInstance=No;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CreateApprovalRequestsTxt@1005 : TextConst 'ENU=Create an approval request for the expense using approver type %1 and %2';
      ForceApproveExpenseTxt@1001 : TextConst 'ENU=Force approve the expense.';
      ForceRejectExpenseTxt@1008 : TextConst 'ENU=Force reject the expense.';
      OpenExpenseTxt@1004 : TextConst 'ENU=Reopen the expense.';
      ResponseAlreadyExistErr@1000 : TextConst 'ENU=A response with description %1 already exists.';
      SetStatusToApprovedTxt@1003 : TextConst 'ENU=Set the expense status to approved.';
      SetStatusToRejectedTxt@1160040002 : TextConst 'ENU=Set the expense status to rejected.';
      SetStatusToPendingApprovalTxt@1002 : TextConst 'ENU=Set expense status to pending approval.';
      EMWorkflowEventHandling@1007 : Codeunit 6086370;
      WorkflowEventHandling@1006 : Codeunit 1520;
      UnsupportedRecordTypeErr@1009 : TextConst 'ENU=Record type %1 is not supported by this workflow response.';

    [EventSubscriber(Codeunit,1520,OnAddWorkflowEventsToLibrary,"",Skip)]
    PROCEDURE OnCreateResponsesLibrary@25();
    BEGIN
      AddResponseToLibrary(CreateApprovalRequestEMCode,0,CreateApprovalRequestsTxt,'GROUP 0');
      AddResponseToLibrary(ForceApproveApprovalRequestEMCode,0,ForceApproveExpenseTxt,'GROUP 0');
      AddResponseToLibrary(ForceRejectApprovalRequestEMCode,0,ForceRejectExpenseTxt,'GROUP 0');
      AddResponseToLibrary(OpenExpenseCode,0,OpenExpenseTxt,'GROUP 0');
      AddResponseToLibrary(SetExpenseStatusToPendingApprovalCode,0,SetStatusToPendingApprovalTxt,'GROUP 0');
      AddResponseToLibrary(SetExpenseStatusToApprovedCode,0,SetStatusToApprovedTxt,'GROUP 0');
      AddResponseToLibrary(SetExpenseStatusToRejectedCode,0,SetStatusToRejectedTxt,'GROUP 0');
    END;

    LOCAL PROCEDURE AddResponsePredecessors@33(ResponseFunctionName@1002 : Code[128]);
    BEGIN
      CASE ResponseFunctionName OF
        CreateApprovalRequestEMCode:
          AddResponsePredecessor(CreateApprovalRequestEMCode,EMWorkflowEventHandling.RunWorkflowOnSendExpenseForApprovalCode);
        OpenExpenseCode:
          BEGIN
            AddResponsePredecessor(OpenExpenseCode,EMWorkflowEventHandling.RunWorkflowOnCancelExpenseApprovalRequestCode);
          END;
        ForceApproveApprovalRequestEMCode:
          AddResponsePredecessor(ForceApproveApprovalRequestEMCode,EMWorkflowEventHandling.RunWorkflowOnExpenseForceApproveApprovalRequestCode);
        ForceRejectApprovalRequestEMCode:
          AddResponsePredecessor(ForceRejectApprovalRequestEMCode,EMWorkflowEventHandling.RunWorkflowOnExpenseForceRejectApprovalRequestCode);
        SetExpenseStatusToPendingApprovalCode:
          AddResponsePredecessor(SetExpenseStatusToPendingApprovalCode,EMWorkflowEventHandling.RunWorkflowOnSendExpenseForApprovalCode);
        SetExpenseStatusToApprovedCode:
          AddResponsePredecessor(SetExpenseStatusToApprovedCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
        SetExpenseStatusToRejectedCode:
          AddResponsePredecessor(SetExpenseStatusToRejectedCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
      END;
    END;

    [EventSubscriber(Codeunit,1521,OnAddWorkflowResponsePredecessorsToLibrary,"",Skip)]
    LOCAL PROCEDURE OnAddResponsePredecessors@21(ResponseFunctionName@1000 : Code[128]);
    VAR
      DCWorkflowEventHandling@1002 : Codeunit 6085785;
      WorkflowResponseHandling@1001 : Codeunit 1521;
    BEGIN
      // In order to enable standard responses to succes EM events
      CASE ResponseFunctionName OF
        WorkflowResponseHandling.SendApprovalRequestForApprovalCode:
          AddResponsePredecessor(WorkflowResponseHandling.SendApprovalRequestForApprovalCode,EMWorkflowEventHandling.RunWorkflowOnSendExpenseForApprovalCode);
      END;
    END;

    [EventSubscriber(Codeunit,1521,OnExecuteWorkflowResponse,"",Skip)]
    PROCEDURE ExecuteResponse@2(VAR ResponseExecuted@1000 : Boolean;Variant@1001 : Variant;xVariant@1004 : Variant;ResponseWorkflowStepInstance@1005 : Record 1504);
    VAR
      WorkflowResponse@1002 : Record 1521;
      WorkflowChangeRecMgt@1007 : Codeunit 1531;
      Handled@1003 : Boolean;
    BEGIN
      Handled := TRUE;

      OnBeforeExecuteResponseStepInstance(ResponseWorkflowStepInstance);

      IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
        CASE WorkflowResponse."Function Name" OF
          CreateApprovalRequestEMCode:
            CreateApprovalRequestEM(Variant,ResponseWorkflowStepInstance);
          ForceApproveApprovalRequestEMCode:
            ForceApproveApprovalRequestEM(Variant,ResponseWorkflowStepInstance);
          ForceRejectApprovalRequestEMCode:
            ForceRejectApprovalRequestEM(Variant,ResponseWorkflowStepInstance);
          OpenExpenseCode:
            OpenExpense(Variant,ResponseWorkflowStepInstance);
          SetExpenseStatusToApprovedCode:
            SetExpenseStatusToApproved(Variant,ResponseWorkflowStepInstance);
          SetExpenseStatusToRejectedCode:
            SetExpenseStatusToRejected(Variant,ResponseWorkflowStepInstance);
          SetExpenseStatusToPendingApprovalCode:
            SetExpenseStatusToPendingApproval(Variant,ResponseWorkflowStepInstance);
          ELSE
            Handled := FALSE;
        END;

      IF Handled THEN
        ResponseExecuted := TRUE;
    END;

    PROCEDURE CreateApprovalRequestEMCode@9() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateApprovalRequestsEM'));
    END;

    LOCAL PROCEDURE CreateApprovalRequestEM@8(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1003 : Record 6086320;
      EMApprovalMgmt@1002 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      EMApprovalMgmt.RUN(Expense);
    END;

    PROCEDURE ForceApproveApprovalRequestEMCode@6() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ForceApproveApprovalRequestEM'));
    END;

    LOCAL PROCEDURE ForceApproveApprovalRequestEM@5(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      EMApprovalMgmt.ForceApproval(Expense,FALSE);
    END;

    PROCEDURE ForceRejectApprovalRequestEMCode@7() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ForceRejectApprovalRequestEM'));
    END;

    LOCAL PROCEDURE ForceRejectApprovalRequestEM@4(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      EMApprovalMgmt.ForceRejection(Expense);
    END;

    PROCEDURE SetExpenseStatusToApprovedCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetExpenseStatusToApproved'));
    END;

    LOCAL PROCEDURE SetExpenseStatusToApproved@51(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      Expense.Status := Expense.Status::Approved;
      Expense.MODIFY(TRUE);
    END;

    PROCEDURE SetExpenseStatusToPendingApprovalCode@1() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetExpenseStatusToPendingApproval'))
    END;

    LOCAL PROCEDURE SetExpenseStatusToPendingApproval@3(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      Expense.Status := Expense.Status::"Pending Approval";
      Expense.MODIFY(TRUE);
    END;

    PROCEDURE SetExpenseStatusToRejectedCode@1160040004() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetExpenseStatusToRejected'));
    END;

    LOCAL PROCEDURE SetExpenseStatusToRejected@1160040003(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      Expense.Status := Expense.Status::Rejected;
      Expense.MODIFY(TRUE);
    END;

    PROCEDURE OpenExpenseCode@38() : Code[128];
    BEGIN
      EXIT(UPPERCASE('OpenExpense'));
    END;

    LOCAL PROCEDURE OpenExpense@37(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      Expense.Status := Expense.Status::Open;
      Expense.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE "--"@22();
    BEGIN
    END;

    PROCEDURE AddResponseToLibrary@26(FunctionName@1002 : Code[128];TableID@1001 : Integer;Description@1000 : Text[250];ResponseOptionGroup@1004 : Code[20]);
    VAR
      WorkflowResponse@1003 : Record 1521;
    BEGIN
      IF WorkflowResponse.GET(FunctionName) THEN
        EXIT;

      WorkflowResponse.SETRANGE(Description,Description);
      IF WorkflowResponse.FINDFIRST THEN
        ERROR(ResponseAlreadyExistErr,Description);

      WorkflowResponse.INIT;
      WorkflowResponse."Function Name" := FunctionName;
      WorkflowResponse."Table ID" := TableID;
      WorkflowResponse.Description := Description;
      WorkflowResponse."Response Option Group" := ResponseOptionGroup;
      WorkflowResponse.INSERT;

      AddResponsePredecessors(WorkflowResponse."Function Name");
    END;

    PROCEDURE AddResponsePredecessor@61(FunctionName@1000 : Code[128];PredecessorFunctionName@1001 : Code[128]);
    VAR
      WFEventResponseCombination@1002 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::Response;
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    [Integration]
    PROCEDURE OnBeforeExecuteResponseStepInstance@19(VAR NewWorkflowStepInstance@1000 : Record 1504);
    BEGIN
    END;

    LOCAL PROCEDURE GetApprovalEntryFromVariant@23(VAR Variant@1000 : Variant;VAR ApprovalEntry@1001 : Record 454);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      ApprovalEntry.SETPOSITION(RecRef.GETPOSITION);
      ApprovalEntry.FIND;
    END;

    LOCAL PROCEDURE GetExpenseFromVariant@20(VAR Variant@1001 : Variant;VAR Expense@1000 : Record 6086320);
    VAR
      ApprovalEntry@1003 : Record 454;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            Expense.GET(ApprovalEntry."Record ID to Approve");
          END;
        DATABASE::Expense:
          BEGIN
            Expense.SETPOSITION(RecRef.GETPOSITION);
            Expense.FIND;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    BEGIN
    {
      **4PS.s
      Property 'OnMissingLicense' on all EventSubscriber functions changed from ERROR to SKIP.
      Because DynamicsNAV Client is halted with an error for Users with no DC-License, having this CU in de Object List.

      Definition "OnMissingLicense Property": Specifies what happens to the event subscriber function call when the license
      of the Microsoft Dynamics NAV user account that is running the current session does not include the codeunit
      that contains the subscriber function.
      **4PS.e
    }
    END.
  }
}

