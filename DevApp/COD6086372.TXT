OBJECT Codeunit 6086372 EM Workflow Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW19.00.00.1.02.00,4PS9.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Static-Automatic;
    OnRun=BEGIN
            DeleteExistingTemplates();
            InitWorkflow();
          END;

  }
  CODE
  {
    VAR
      ApprovalRequestCanceledMsg@1010 : TextConst 'ENU=The approval request for the record has been canceled.';
      DocReleasedTxt@1016 : TextConst 'ENU=The expense was released.';
      ExpMgmtCategoryDescTxt@1001 : TextConst 'ENU=Continia Expense Management';
      InvalidEventCondErr@1011 : TextConst 'ENU=No event conditions are specified.';
      PendingApprovalsCondnTxt@1013 : TextConst 'ENU="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Approval Entry"">%1</DataItem></DataItems></ReportParameters>"';
      ExpenseTypeCondnTxt@1012 : TextConst 'ENU="<?xml version=""1.0"" encoding=""utf-8"" standalone=""yes""?><ReportParameters><DataItems><DataItem name=""Expense"">%1</DataItem></DataItems></ReportParameters>"';
      ExpenseApprWorkflowDescTxt@1002 : TextConst 'ENU=Expense Approval Workflow';
      WorkflowEventHandling@1008 : Codeunit 1520;
      EMWorkflowEventHandling@1019 : Codeunit 6086370;
      EMWorkflowResponseHandling@1020 : Codeunit 6086371;
      DCWorkflowEventHandling@1014 : Codeunit 6085785;
      DCWorkflowResponseHandling@1015 : Codeunit 6085786;
      WorkflowResponseHandling@1009 : Codeunit 1521;
      BlankDateFormula@1007 : DateFormula;
      ExpenseForceApprWorkflowDescTxt@1017 : TextConst 'ENU=Expense Force Approval Workflow';
      ExpenseForceRejectWorkflowDescTxt@1022 : TextConst 'ENU=Expense Force Rejection Workflow';

    [EventSubscriber(Codeunit,1502,OnAddWorkflowCategoriesToLibrary,"",Skip)]
    PROCEDURE InitWorkflow@23();
    BEGIN
      InsertWorkflowCategories();
      InsertWorkflowTemplates();
    END;

    LOCAL PROCEDURE InsertEntryPointEventStep@51(Workflow@1000 : Record 1501;FunctionName@1001 : Code[128]) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::"Event",FunctionName);
      WorkflowStep.VALIDATE("Entry Point",TRUE);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    PROCEDURE InsertWorkflowCategories@126();
    BEGIN
      InsertWorkflowCategory('CONTINIAEM',ExpMgmtCategoryDescTxt);
    END;

    LOCAL PROCEDURE InsertWorkflowCategory@118(Code@1000 : Code[20];Description@1001 : Text[100]);
    VAR
      WorkflowCategory@1002 : Record 1508;
    BEGIN
      WorkflowCategory.INIT;
      WorkflowCategory.Code := Code;
      WorkflowCategory.Description := Description;
      IF WorkflowCategory.INSERT THEN;
    END;

    LOCAL PROCEDURE InsertWorkflowTemplates@24();
    BEGIN
      InsertTableRelations;
      InsertExpenseApprovalWorkflowTemplate();
      InsertExpenseForceApprovalWorkflowTemplate();
      InsertExpenseForceRejectWorkflowTemplate();
    END;

    LOCAL PROCEDURE InsertExpenseApprovalWorkflowTemplate@2();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,'EW',ExpenseApprWorkflowDescTxt,'CONTINIAEM') THEN
        EXIT;
      InsertExpenseApprovalWorkflowDetails(Workflow);
      MarkWorkflowAsTemplate(Workflow);
    END;

    LOCAL PROCEDURE InsertExpenseForceApprovalWorkflowTemplate@6();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,'EFAW',ExpenseForceApprWorkflowDescTxt,'CONTINIAEM') THEN
        EXIT;
      InsertExpenseForceApprovalWorkflowDetails(Workflow);
      MarkWorkflowAsTemplate(Workflow);
    END;

    LOCAL PROCEDURE InsertExpenseForceRejectWorkflowTemplate@1();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      IF NOT InsertWorkflowTemplate(Workflow,'EFRW',ExpenseForceRejectWorkflowDescTxt,'CONTINIAEM') THEN
        EXIT;
      InsertExpenseForceRejectWorkflowDetails(Workflow);
      MarkWorkflowAsTemplate(Workflow);
    END;

    LOCAL PROCEDURE InsertWorkflowTemplate@52(VAR Workflow@1003 : Record 1501;WorkflowCode@1001 : Code[17];WorkflowDescription@1002 : Text[100];CategoryCode@1000 : Code[20]) : Boolean;
    BEGIN
      Workflow.INIT;
      Workflow.Code := GetWorkflowTemplateCode(WorkflowCode);
      Workflow.Description := WorkflowDescription;
      Workflow.Category := CategoryCode;
      Workflow.Enabled := FALSE;
      EXIT(Workflow.INSERT);
    END;

    LOCAL PROCEDURE InsertExpenseApprovalWorkflowDetails@91(VAR Workflow@1001 : Record 1501);
    VAR
      Expense@1000 : Record 6086320;
      WorkflowStepArgument@1003 : Record 1523;
    BEGIN
      PopulateWorkflowStepArgument(WorkflowStepArgument,
        WorkflowStepArgument."Approver Type"::Approver,WorkflowStepArgument."Approver Limit Type"::"Approver Chain",
        0,'',BlankDateFormula,TRUE);

      InsertExpenseApprovalWorkflowSteps(Workflow,
        BuildExpenseTypeConditions(Expense.Status::Open),
        EMWorkflowEventHandling.RunWorkflowOnSendExpenseForApprovalCode,
        BuildExpenseTypeConditions(Expense.Status::"Pending Approval"),
        EMWorkflowEventHandling.RunWorkflowOnCancelExpenseApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnSendBackApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnApproveAndDelegateRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnDelegateWithoutApprovalRequestCode,
        DCWorkflowEventHandling.RunWorkflowOnDelegateAndSendBackRequestCode,
        WorkflowStepArgument,TRUE);
    END;

    LOCAL PROCEDURE InsertExpenseForceApprovalWorkflowDetails@8(VAR Workflow@1001 : Record 1501);
    VAR
      Expense@1000 : Record 6086320;
    BEGIN
      InsertExpenseForceApprovalWorkflowSteps(Workflow);
    END;

    LOCAL PROCEDURE InsertExpenseForceRejectWorkflowDetails@10(VAR Workflow@1001 : Record 1501);
    VAR
      Expense@1000 : Record 6086320;
    BEGIN
      InsertExpenseForceRejectWorkflowSteps(Workflow);
    END;

    PROCEDURE InsertExpenseApprovalWorkflowSteps@7(Workflow@1003 : Record 1501;DocSendForApprovalConditionString@1006 : Text;DocSendForApprovalEventCode@1001 : Code[128];DocCanceledConditionString@1009 : Text;DocCanceledEventCode@1004 : Code[128];DocSendBackEventCode@1007 : Code[128];DocDelegatedWithApprovalEventCode@1021 : Code[128];DocDelegatedWithoutApprovalEventCode@1024 : Code[128];DocDelegatedAndSendBackEventCode@1027 : Code[128];WorkflowStepArgument@1000 : Record 1523;ShowConfirmationMessage@1019 : Boolean);
    VAR
      SentForApprovalEventID@1010 : Integer;
      SetStatusToPendingApprovalResponseID@1002 : Integer;
      CreateApprovalRequestResponseID@1012 : Integer;
      SendApprovalRequestResponseID@1013 : Integer;
      "-- Pending Approvals : 0"@1045 : Integer;
      OnAllRequestsApprovedEventID@1014 : Integer;
      OnAfterApproveResponseID@1047 : Integer;
      "-- Pending Approvals > 0"@1046 : Integer;
      OnRequestApprovedEventID@1016 : Integer;
      OnAfterApproveResponseID2@1048 : Integer;
      SendApprovalRequestResponseID2@1017 : Integer;
      OnRequestRejectedEventID@1018 : Integer;
      RejectAllApprovalsResponseID@1020 : Integer;
      "-- Send Back"@1030 : Integer;
      OnSendBackEventID@1028 : Integer;
      SendBackResponseID@1029 : Integer;
      OpenApprovalCommentsResponseID@1031 : Integer;
      ReturnToInitialStateID1@1032 : Integer;
      "-- DelegateAndSendBack"@1033 : Integer;
      OnDelegateAndSendBackEventID@1034 : Integer;
      DelegateAndSendBackRepsponseID@1036 : Integer;
      ReturnToInitialStateID2@1037 : Integer;
      "-- Cancel Request"@1035 : Integer;
      OnRequestCanceledEventID@1022 : Integer;
      CancelAllApprovalsResponseID@1023 : Integer;
      "-- Approve And Delegate"@1038 : Integer;
      OnApproveAndDelegateEventID@1039 : Integer;
      ApproveAndDelegateResponseID@1040 : Integer;
      SendApprovalRequestResponseID4@1041 : Integer;
      ReturnToInitialStateID3@1042 : Integer;
      "-- Delegate Without Approval"@1043 : Integer;
      OnRequestDelegatedEventID@1025 : Integer;
      SentApprovalRequestResponseID3@1026 : Integer;
      ReturnToInitialStateID4@1044 : Integer;
      RestrictRecordUsageResponseID@1005 : Integer;
      AllowRecordUsageResponseID@1008 : Integer;
      OpenDocumentResponceID@1011 : Integer;
      ShowMessageResponseID@1015 : Integer;
    BEGIN
      SentForApprovalEventID := InsertEntryPointEventStep(Workflow,DocSendForApprovalEventCode);
      InsertEventArgument(SentForApprovalEventID,DocSendForApprovalConditionString);
        RestrictRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.RestrictRecordUsageCode,SentForApprovalEventID);
        SetStatusToPendingApprovalResponseID := InsertResponseStep(Workflow,EMWorkflowResponseHandling.SetExpenseStatusToPendingApprovalCode,RestrictRecordUsageResponseID);
        CreateApprovalRequestResponseID := InsertResponseStep(Workflow,EMWorkflowResponseHandling.CreateApprovalRequestEMCode,SetStatusToPendingApprovalResponseID);
        InsertApprovalArgument(CreateApprovalRequestResponseID,
          WorkflowStepArgument."Approver Type",WorkflowStepArgument."Approver Limit Type",
          WorkflowStepArgument."Workflow User Group Code",WorkflowStepArgument."Due Date Formula",ShowConfirmationMessage);
        SendApprovalRequestResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,CreateApprovalRequestResponseID);
        InsertNotificationArgument(SendApprovalRequestResponseID,'',0,'');

      OnAllRequestsApprovedEventID := InsertEventStep(Workflow,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode,SendApprovalRequestResponseID);
      InsertEventArgument(OnAllRequestsApprovedEventID,BuildNoPendingApprovalsConditions);
        AllowRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.AllowRecordUsageCode,OnAllRequestsApprovedEventID);
        InsertResponseStep(Workflow,EMWorkflowResponseHandling.SetExpenseStatusToApprovedCode,AllowRecordUsageResponseID);

      OnRequestApprovedEventID := InsertEventStep(Workflow,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode,SendApprovalRequestResponseID);
      InsertEventArgument(OnRequestApprovedEventID,BuildPendingApprovalsConditions);
        SendApprovalRequestResponseID2 := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,OnRequestApprovedEventID);
        SetNextStep(Workflow,SendApprovalRequestResponseID2,SendApprovalRequestResponseID);

      OnRequestRejectedEventID := InsertEventStep(Workflow,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode,SendApprovalRequestResponseID);
        RejectAllApprovalsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.RejectAllApprovalRequestsCode,OnRequestRejectedEventID);
        InsertNotificationArgument(RejectAllApprovalsResponseID,'',WorkflowStepArgument."Link Target Page",'');
        InsertResponseStep(Workflow,EMWorkflowResponseHandling.SetExpenseStatusToRejectedCode,RejectAllApprovalsResponseID);

      OnSendBackEventID := InsertEventStep(Workflow,DocSendBackEventCode,SendApprovalRequestResponseID);
        SendBackResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.SendBackApprovalRequestDCCode,OnSendBackEventID);
        OpenApprovalCommentsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.GetApprovalCommentCode,SendBackResponseID);
        ReturnToInitialStateID1 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,OpenApprovalCommentsResponseID);

      OnDelegateAndSendBackEventID := InsertEventStep(Workflow,DocDelegatedAndSendBackEventCode,SendApprovalRequestResponseID);
        DelegateAndSendBackRepsponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.DelegateAndSendBackRequestCode,OnDelegateAndSendBackEventID);
        ReturnToInitialStateID2 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,DelegateAndSendBackRepsponseID);

      OnRequestCanceledEventID := InsertEventStep(Workflow,DocCanceledEventCode,SendApprovalRequestResponseID);
        InsertEventArgument(OnRequestCanceledEventID,DocCanceledConditionString);
        CancelAllApprovalsResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.CancelAllApprovalRequestsCode,OnRequestCanceledEventID);
        InsertNotificationArgument(CancelAllApprovalsResponseID,'',WorkflowStepArgument."Link Target Page",'');
        AllowRecordUsageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.AllowRecordUsageCode,CancelAllApprovalsResponseID);
        OpenDocumentResponceID := InsertResponseStep(Workflow,EMWorkflowResponseHandling.OpenExpenseCode,AllowRecordUsageResponseID);
        // ShowMessageResponseID := InsertResponseStep(Workflow,WorkflowResponseHandling.ShowMessageCode,OpenDocumentResponceID);
        // InsertMessageArgument(ShowMessageResponseID,ApprovalRequestCanceledMsg);

      OnApproveAndDelegateEventID := InsertEventStep(Workflow,DocDelegatedWithApprovalEventCode,SendApprovalRequestResponseID);
        ApproveAndDelegateResponseID := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ApproveAndDelegateRequestCode,OnApproveAndDelegateEventID);
        SendApprovalRequestResponseID4 := InsertResponseStep(Workflow,WorkflowResponseHandling.SendApprovalRequestForApprovalCode,ApproveAndDelegateResponseID);
        ReturnToInitialStateID3 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,SendApprovalRequestResponseID4);

      OnRequestDelegatedEventID := InsertEventStep(Workflow,DCWorkflowEventHandling.RunWorkflowOnDelegateWithoutApprovalRequestCode,SendApprovalRequestResponseID);
        SentApprovalRequestResponseID3 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.DelegateWithoutApprovalRequestCode,OnRequestDelegatedEventID);
        ReturnToInitialStateID4 := InsertResponseStep(Workflow,DCWorkflowResponseHandling.ReturnToInitialStateCode,SentApprovalRequestResponseID3);
    END;

    PROCEDURE InsertExpenseForceApprovalWorkflowSteps@9(Workflow@1003 : Record 1501);
    VAR
      ForceApprovalEventID@1000 : Integer;
      ForceApprovalResponseID@1001 : InStream;
    BEGIN
      ForceApprovalEventID := InsertEntryPointEventStep(Workflow,EMWorkflowEventHandling.RunWorkflowOnExpenseForceApproveApprovalRequestCode);
      InsertResponseStep(Workflow,EMWorkflowResponseHandling.ForceApproveApprovalRequestEMCode,ForceApprovalEventID);
    END;

    PROCEDURE InsertExpenseForceRejectWorkflowSteps@11(Workflow@1003 : Record 1501);
    VAR
      ForceRejectEventID@1000 : Integer;
      ForceRejectResponseID@1001 : Integer;
    BEGIN
      ForceRejectEventID := InsertEntryPointEventStep(Workflow,EMWorkflowEventHandling.RunWorkflowOnExpenseForceRejectApprovalRequestCode);
      InsertResponseStep(Workflow,EMWorkflowResponseHandling.ForceRejectApprovalRequestEMCode,ForceRejectEventID);
    END;

    LOCAL PROCEDURE InsertApprovalArgument@44(WorkflowStepID@1000 : Integer;ApproverType@1009 : Option;ApproverLimitType@1010 : Option;WorkflowUserGroupCode@1002 : Code[20];DueDateFormula@1003 : DateFormula;ShowConfirmationMessage@1004 : Boolean);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument."Approver Type" := ApproverType;
      WorkflowStepArgument."Approver Limit Type" := ApproverLimitType;
      WorkflowStepArgument."Workflow User Group Code" := WorkflowUserGroupCode;
      WorkflowStepArgument."Due Date Formula" := DueDateFormula;
      WorkflowStepArgument."Show Confirmation Message" := ShowConfirmationMessage;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertEventStep@12(Workflow@1000 : Record 1501;FunctionName@1001 : Code[128];PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::"Event",FunctionName);
      WorkflowStep."Sequence No." := GetSequenceNumber(Workflow,PreviousStepID);
      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    LOCAL PROCEDURE InsertEventArgument@41(WorkflowStepID@1000 : Integer;EventConditions@1008 : Text);
    VAR
      WorkflowStep@1001 : Record 1502;
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      IF EventConditions = '' THEN
        ERROR(InvalidEventCondErr);

      WorkflowStepArgument.Type := WorkflowStepArgument.Type::"Event";
      WorkflowStepArgument.INSERT(TRUE);
      WorkflowStepArgument.SetEventFilters(EventConditions);

      WorkflowStep.SETRANGE(ID,WorkflowStepID);
      WorkflowStep.FINDFIRST;
      WorkflowStep.Argument := WorkflowStepArgument.ID;
      WorkflowStep.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertNotificationArgument@42(WorkflowStepID@1000 : Integer;NotifUserID@1004 : Code[50];LinkTargetPage@1007 : Integer;CustomLink@1003 : Text[250]);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument."Notification User ID" := NotifUserID;
      WorkflowStepArgument."Link Target Page" := LinkTargetPage;
      WorkflowStepArgument."Custom Link" := CustomLink;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertResponseStep@13(Workflow@1001 : Record 1501;FunctionName@1000 : Code[128];PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::Response,FunctionName);
      WorkflowStep."Sequence No." := GetSequenceNumber(Workflow,PreviousStepID);
      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    LOCAL PROCEDURE InsertStep@30(VAR WorkflowStep@1000 : Record 1502;WorkflowCode@1001 : Code[20];StepType@1003 : Option;FunctionName@1002 : Code[128]);
    BEGIN
      WITH WorkflowStep DO BEGIN
        VALIDATE("Workflow Code",WorkflowCode);
        VALIDATE(Type,StepType);
        VALIDATE("Function Name",FunctionName);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertStepArgument@19(VAR WorkflowStepArgument@1003 : Record 1523;WorkflowStepID@1000 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.SETRANGE(ID,WorkflowStepID);
      WorkflowStep.FINDFIRST;

      IF WorkflowStepArgument.GET(WorkflowStep.Argument) THEN
        EXIT;

      WorkflowStepArgument.Type := WorkflowStepArgument.Type::Response;
      WorkflowStepArgument.VALIDATE("Response Function Name",WorkflowStep."Function Name");
      WorkflowStepArgument.INSERT(TRUE);

      WorkflowStep.Argument := WorkflowStepArgument.ID;
      WorkflowStep.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertMessageArgument@14(WorkflowStepID@1000 : Integer;Message@1002 : Text[250]);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument.Message := Message;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetNextStep@34(Workflow@1003 : Record 1501;WorkflowStepID@1001 : Integer;NextStepID@1000 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.GET(Workflow.Code,WorkflowStepID);
      WorkflowStep.VALIDATE("Next Workflow Step ID",NextStepID);
      WorkflowStep.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PopulateWorkflowStepArgument@5(VAR WorkflowStepArgument@1005 : Record 1523;ApproverType@1004 : Option;ApproverLimitType@1003 : Option;ApprovalEntriesPage@1002 : Integer;WorkflowUserGroupCode@1001 : Code[20];DueDateFormula@1000 : DateFormula;ShowConfirmationMessage@1006 : Boolean);
    BEGIN
      WorkflowStepArgument.INIT;
      WorkflowStepArgument.Type := WorkflowStepArgument.Type::Response;
      WorkflowStepArgument."Approver Type" := ApproverType;
      WorkflowStepArgument."Approver Limit Type" := ApproverLimitType;
      WorkflowStepArgument."Workflow User Group Code" := WorkflowUserGroupCode;
      WorkflowStepArgument."Due Date Formula" := DueDateFormula;
      WorkflowStepArgument."Link Target Page" := ApprovalEntriesPage;
      WorkflowStepArgument."Show Confirmation Message" := ShowConfirmationMessage;
    END;

    PROCEDURE BuildExpenseTypeConditions@64(Status@1003 : Option) : Text;
    VAR
      Expense@1000 : Record 6086320;
    BEGIN
      Expense.SETRANGE(Status,Status);
      EXIT(STRSUBSTNO(ExpenseTypeCondnTxt,Encode(Expense.GETVIEW(FALSE))));
    END;

    LOCAL PROCEDURE BuildNoPendingApprovalsConditions@56() : Text;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Pending Approvals",0);
      EXIT(STRSUBSTNO(PendingApprovalsCondnTxt,Encode(ApprovalEntry.GETVIEW(FALSE))));
    END;

    LOCAL PROCEDURE BuildPendingApprovalsConditions@61() : Text;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETFILTER("Pending Approvals",'>%1',0);
      EXIT(STRSUBSTNO(PendingApprovalsCondnTxt,Encode(ApprovalEntry.GETVIEW(FALSE))));
    END;

    LOCAL PROCEDURE MarkWorkflowAsTemplate@74(VAR Workflow@1000 : Record 1501);
    BEGIN
      Workflow.VALIDATE(Template,TRUE);
      Workflow.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE Encode@93(Text@1001 : Text) : Text;
    VAR
      XMLDOMManagement@1000 : Codeunit 6224;
    BEGIN
      EXIT(XMLDOMManagement.XMLEscape(Text));
    END;

    LOCAL PROCEDURE GetSequenceNumber@22(Workflow@1001 : Record 1501;PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1000 : Record 1502;
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Workflow.Code);
      WorkflowStep.SETRANGE("Previous Workflow Step ID",PreviousStepID);
      IF WorkflowStep.FINDLAST THEN
        EXIT(WorkflowStep."Sequence No." + 1);
    END;

    PROCEDURE GetWorkflowTemplateCode@84(WorkflowCode@1000 : Code[17]) : Code[20];
    BEGIN
      EXIT('EM-' + WorkflowCode);
    END;

    LOCAL PROCEDURE DeleteExistingTemplates@4();
    VAR
      Workflow@1002 : Record 1501;
      WorkflowStep@1001 : Record 1502;
      WorkflowStepArgument@1000 : Record 1523;
    BEGIN
      Workflow.SETRANGE(Template,TRUE);
      Workflow.SETRANGE(Category,'CONTINIAEM');
      IF Workflow.FINDSET THEN REPEAT
        WorkflowStep.SETRANGE("Workflow Code",Workflow.Code);
        IF WorkflowStep.FINDSET THEN REPEAT
          WorkflowStepArgument.SETRANGE(ID,WorkflowStep.Argument);
          WorkflowStepArgument.DELETEALL;
        UNTIL WorkflowStep.NEXT = 0;
        WorkflowStep.DELETEALL;
      UNTIL Workflow.NEXT = 0;
      Workflow.DELETEALL;
    END;

    LOCAL PROCEDURE InsertTableRelations@3();
    VAR
      WorkFlowSetup@1000 : Codeunit 1502;
      ApprovalEntry@1001 : Record 454;
    BEGIN
      WorkFlowSetup.InsertTableRelation(DATABASE::Expense,0,
        DATABASE::"Approval Entry",ApprovalEntry.FIELDNO("Record ID to Approve"));
    END;

    BEGIN
    {
      **4PS.s
      Property 'OnMissingLicense' on all EventSubscriber functions changed from ERROR to SKIP.
      Because DynamicsNAV Client is halted with an error for Users with no DC-License, having this CU in de Object List.

      Definition "OnMissingLicense Property": Specifies what happens to the event subscriber function call when the license
      of the Microsoft Dynamics NAV user account that is running the current session does not include the codeunit
      that contains the subscriber function.
      **4PS.e
    }
    END.
  }
}

