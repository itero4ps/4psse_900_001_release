OBJECT Codeunit 6086500 Continia Online Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.4.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      HttpActions@1160040001 : 'PUT,DELETE,GET';
      Protocol@1160040004 : 'IMAP,ContiniaMail';
      Text001@1160040000 : TextConst 'ENU=The client credentials for Continia Online are invalid or missing.';
      Text002@1160040002 : TextConst 'ENU=Successfully connected to Continia Online.';
      BatchUploadContent@6085573 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.MultipartFormDataContent";
      BatchStreamContent@1000 : ARRAY [100] OF DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StreamContent";
      BatchFileHelper@1002 : ARRAY [100] OF DotNet "'mscorlib'.System.IO.File";
      BatchFileCount@1001 : Integer;
      UnableToUpdatePleaseSyncErr@6085574 : TextConst 'ENU=This expense have a newer version in Continia Online.\\Please synchronize first and redo your changes.';

    PROCEDURE TestConnection@1160040004();
    VAR
      XmlDoc@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IsActive(TRUE);
      GetAccessToken;
      MESSAGE(Text002);
    END;

    PROCEDURE IsActive@1160040035(ShowError@1160040001 : Boolean) : Boolean;
    VAR
      OnlineSetup@1160040000 : Record 6086500;
    BEGIN
      IF ShowError THEN BEGIN
        OnlineSetup.GET;
        OnlineSetup.TESTFIELD("Client ID");
        OnlineSetup.TESTFIELD("Client Password");
        EXIT(TRUE);
      END ELSE
        IF OnlineSetup.GET THEN
          IF (OnlineSetup."Client ID" <> '') AND (OnlineSetup."Client Password" <> '') THEN
            EXIT(TRUE);
    END;

    PROCEDURE ExecuteRequest@1160040008(Url@1160040005 : Text[1024];HttpAction@1160040002 : 'PUT,DELETE,GET';ShowError@1160040003 : Boolean;VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      WebClient@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebClient";
      ByteArray@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Encoding@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Convert@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      ResponseText@1001 : Text[1024];
      ErrorText@1006 : Text[1024];
    BEGIN
      IsActive(TRUE);

      WebClient := WebClient.WebClient;
      WebClient.Headers.Set('Accept','application/xml;charset=utf-8');
      WebClient.Headers.Set('Authorization','Bearer ' + GetAccessToken);

      IF HttpAction = HttpAction::DELETE THEN
        ResponseText := WebClient.UploadString(Url,'DELETE','')
      ELSE BEGIN
        Encoding := Encoding.UTF8;
        IF HttpAction = HttpAction::PUT THEN BEGIN
          IF ISNULL(XmlDoc) THEN
            XmlDoc := XmlDoc.XmlDocument;

          ByteArray := Encoding.GetBytes(XmlDoc.OuterXml);
          ByteArray := WebClient.UploadData(Url,'PUT',ByteArray);
        END ELSE IF HttpAction = HttpAction::GET THEN
          ByteArray := WebClient.DownloadData(Url);
      END;

      CLEAR(WebClient);

      XmlDoc := XmlDoc.XmlDocument;
      IF HttpAction = HttpAction::DELETE THEN
        XmlDoc.LoadXml(ResponseText)
      ELSE
        IF ByteArray.Length > 0 THEN
          XmlDoc.LoadXml(Encoding.GetString(ByteArray));

      IF GetAttribAsText(XmlDoc.SelectNodes('Error'),'Message',0,ErrorText) THEN
        IF (ErrorText = '1') OR NOT (ShowError) THEN
          EXIT(FALSE)
        ELSE
          ShowErrorMsg(ErrorText);

      EXIT(TRUE);
    END;

    PROCEDURE ExecuteRequestWithoutToken@1160040018(Url@1160040005 : Text[1024];HttpAction@1160040002 : 'PUT,DELETE,GET';ShowError@1160040003 : Boolean;VAR XmlDoc@1160040001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      WebClient@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebClient";
      ByteArray@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Encoding@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Convert@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      ResponseText@1001 : Text[1024];
      ErrorText@1006 : Text[1024];
    BEGIN
      IsActive(TRUE);

      WebClient := WebClient.WebClient;
      WebClient.Headers.Set('Accept','application/xml;charset=utf-8');
      WebClient.Headers.Set('Authorization','Bearer ' + GetAccessToken);

      IF HttpAction = HttpAction::DELETE THEN
        ResponseText := WebClient.UploadString(Url,'DELETE','')
      ELSE BEGIN
        Encoding := Encoding.UTF8;
        IF HttpAction = HttpAction::PUT THEN BEGIN
          IF ISNULL(XmlDoc) THEN
            XmlDoc := XmlDoc.XmlDocument;

          ByteArray := Encoding.GetBytes(XmlDoc.OuterXml);
          ByteArray := WebClient.UploadData(Url,'PUT',ByteArray);
        END ELSE IF HttpAction = HttpAction::GET THEN
          ByteArray := WebClient.DownloadData(Url);
      END;

      CLEAR(WebClient);

      XmlDoc := XmlDoc.XmlDocument;
      IF HttpAction = HttpAction::DELETE THEN
        XmlDoc.LoadXml(ResponseText)
      ELSE
        IF ByteArray.Length > 0 THEN
          XmlDoc.LoadXml(Encoding.GetString(ByteArray));

      IF GetAttribAsText(XmlDoc.SelectNodes('Error'),'Message',0,ErrorText) THEN
        IF (ErrorText = '1') OR NOT (ShowError) THEN
          EXIT(FALSE)
        ELSE
          ShowErrorMsg(ErrorText);

      EXIT(TRUE);
    END;

    PROCEDURE GetAccessToken@1160040024() AccessToken : Text[1024];
    VAR
      WebClient@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebClient";
      XmlDoc@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Response@1000 : Text[1024];
    BEGIN
      WebClient := WebClient.WebClient;
      WebClient.Headers.Set('Accept','application/xml;charset=utf-8');
      Response := WebClient.UploadString(GetAccessTokenUrl,'POST',GetClientCredentials);
      CLEAR(WebClient);

      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.LoadXml(Response);
      IF NOT GetAttribAsText(XmlDoc.SelectNodes('Token'),'AccessToken',0,AccessToken) THEN
        ERROR(Text001);
    END;

    PROCEDURE GetBaseUrl@1160040022() : Text[1024];
    BEGIN
      CASE TRUE OF
        IsDev:
          EXIT('https://devauth.continiaonline.com/api/v1/');
        IsDemo:
          EXIT('https://demoauth.continiaonline.com/api/v1/');
        ELSE
          EXIT('https://auth.continiaonline.com/api/v1/');
      END;
    END;

    PROCEDURE GetAccessTokenUrl@1160040019() : Text[1024];
    BEGIN
      EXIT(GetBaseUrl + 'oauth/token');
    END;

    PROCEDURE GetClientCredentials@1160040023() : Text[1024];
    VAR
      OnlineSetup@1160040000 : Record 6086500;
    BEGIN
      OnlineSetup.GET;
      EXIT('grant_type=password&username=' + OnlineSetup."Client ID" + '&password=' + OnlineSetup."Client Password");
    END;

    PROCEDURE GetCompanyGUID@1160040002() : Text[1024];
    VAR
      OnlineSetup@1160040000 : Record 6086500;
    BEGIN
      OnlineSetup.GET;
      EXIT(GetGUIDAsText(OnlineSetup."Company GUID"));
    END;

    PROCEDURE GetClientID@1160040013(ShowError@1160040001 : Boolean) : Code[20];
    VAR
      OnlineSetup@1160040000 : Record 6086500;
    BEGIN
      OnlineSetup.GET;

      IF ShowError THEN
        OnlineSetup.TESTFIELD("Client ID");

      EXIT(OnlineSetup."Client ID");
    END;

    PROCEDURE GetNavLicenseSN@1160040009() : Text[100];
    VAR
      LicenseInfo@1160040000 : Record 2000000040;
    BEGIN
      LicenseInfo.GET(4);
      EXIT(COPYSTR(LicenseInfo.Text,STRPOS(LicenseInfo.Text,':') + 2));
    END;

    PROCEDURE GetGUIDAsText@1160040001(Value@1160040000 : GUID) : Text[50];
    BEGIN
      EXIT(DELCHR(Value,'<>','{}'))
    END;

    PROCEDURE GetIntAsText@1160040005(Value@1160040000 : Integer) : Text[30];
    BEGIN
      EXIT(FORMAT(Value));
    END;

    PROCEDURE GetBoolAsText@1160040000(Value@1160040000 : Boolean) : Text[30];
    BEGIN
      IF Value THEN
        EXIT('1');

      EXIT('0');
    END;

    PROCEDURE GetTextAsBool@1160040007(Value@1160040000 : Code[10]) : Boolean;
    BEGIN
      IF UPPERCASE(Value) IN ['1','TRUE'] THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetTextAsGuid@1160040016(Value@1160040000 : Code[250]) NewGuid : GUID;
    BEGIN
      EVALUATE(NewGuid,'{' + Value + '}');
    END;

    PROCEDURE GetAttribAsBool@1160040003(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040003 : Text[30];Pos@1160040004 : Integer) : Boolean;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EXIT(GetTextAsBool(AttribText));
    END;

    PROCEDURE GetAttribAsInt@1160040027(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040000 : Text[30];Pos@1160040004 : Integer) Result : Integer;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EVALUATE(Result,AttribText);
    END;

    PROCEDURE GetAttribAsDecimal@1160040021(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040003 : Text[30];Pos@1160040004 : Integer) Result : Decimal;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EXIT(FormatDecimal(AttribText));
    END;

    PROCEDURE GetAttribAsText@1160040026(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040003 : Text[30];Pos@1160040004 : Integer;VAR Result@1160040006 : Text[1024]) : Boolean;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      XmlNode@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLAttrib@1160040005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      IF ISNULL(XMLNodeList) THEN
        EXIT;

      XmlNode := XMLNodeList.Item(Pos);
      IF ISNULL(XmlNode) THEN
        EXIT;

      XMLAttrib := XmlNode.Attributes.GetNamedItem(AttribName);
      IF ISNULL(XMLAttrib) THEN
        EXIT;

      Result := XMLAttrib.Value;
      EXIT(Result <> '');
    END;

    PROCEDURE GetAttribAsGuid@1160040015(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040003 : Text[30];Pos@1160040004 : Integer) : GUID;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EXIT(GetTextAsGuid(AttribText));
    END;

    PROCEDURE GetAttribAsCode@1160040014(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040003 : Text[30];Pos@1160040004 : Integer) Result : Code[250];
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EVALUATE(Result,AttribText);
    END;

    PROCEDURE GetAttribAsDateUTC@1160040017(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040003 : Text[30];Pos@1160040004 : Integer) Result : Date;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      DateParserMgt@1160040000 : Codeunit 6085586;
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF NOT GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EXIT;

      DateParserMgt.ParseUTC(AttribText);
      Result := DateParserMgt.GetDate;
    END;

    PROCEDURE GetAttribAsDateTime@4(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040003 : Text[30];Pos@1160040004 : Integer) Result : DateTime;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      DateParserMgt@1160040000 : Codeunit 6085586;
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF NOT GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EXIT;

      DateParserMgt.ParseUTC(AttribText);
      Result := DateParserMgt.GetDatetime;
    END;

    PROCEDURE GetAttribAsDateZulu@3(XMLNodeList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";AttribName@1160040003 : Text[30];Pos@1160040004 : Integer) Result : Date;
    VAR
      XmlLib@1160040002 : Codeunit 6085573;
      AttribText@1160040005 : Text[1024];
    BEGIN
      IF NOT GetAttribAsText(XMLNodeList,AttribName,Pos,AttribText) THEN
        EXIT;

      IF EVALUATE(Result,AttribText,9) THEN
        EXIT(Result)
    END;

    PROCEDURE DownloadFile@1160040011(FromUrl@1160040001 : Text[1024];ToPath@1160040005 : Text[1024];IncludeToken@6085573 : Boolean);
    VAR
      WebClient@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebClient";
    BEGIN
      IF FILE.EXISTS(ToPath) THEN
        FILE.ERASE(ToPath);

      WebClient := WebClient.WebClient;
      IF IncludeToken THEN BEGIN
        WebClient.Headers.Set('Accept','application/xml;charset=utf-8');
        WebClient.Headers.Set('Authorization','Bearer ' + GetAccessToken);
      END;
      WebClient.DownloadFile(FromUrl,ToPath);
      CLEAR(WebClient);
    END;

    PROCEDURE UploadFile@1(FromFile@1004 : Text[1024];ToUrl@1003 : Text[1024];IncludeToken@6085573 : Boolean);
    VAR
      WebClient@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebClient";
    BEGIN
      IF NOT FILE.EXISTS(FromFile) THEN
        EXIT;

      WebClient := WebClient.WebClient;
      IF IncludeToken THEN BEGIN
        WebClient.Headers.Set('Accept','application/xml;charset=utf-8');
        WebClient.Headers.Set('Authorization','Bearer ' + GetAccessToken);
      END;
      WebClient.UploadFile(ToUrl,FromFile);
      CLEAR(WebClient);
    END;

    PROCEDURE AddFileToBatchUpload@6085573(FullFilenameAndPath@6085578 : Text[1024];DisplayFilename@6085575 : Text[1024]);
    VAR
      FileSysMgt@6085576 : Codeunit 6085584;
      WebClient@6085574 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebClient";
    BEGIN
      IF ISNULL(BatchUploadContent) THEN
        BatchUploadContent := BatchUploadContent.MultipartFormDataContent;

      BatchFileCount := BatchFileCount + 1;
      BatchStreamContent[BatchFileCount] := BatchStreamContent[BatchFileCount].StreamContent(BatchFileHelper[BatchFileCount].OpenRead(FullFilenameAndPath));
      BatchStreamContent[BatchFileCount].Headers.Remove('Content-Type');
      BatchStreamContent[BatchFileCount].Headers.Add('Content-Type','application/octet-stream');

      BatchUploadContent.Add(BatchStreamContent[BatchFileCount],'file',DisplayFilename);
    END;

    PROCEDURE BatchUploadFiles@6085574(ToUrl@6085573 : Text[1024];IncludeToken@6085574 : Boolean);
    VAR
      HttpClient@6085575 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      HttpResponseMessage@6085576 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      i@6085577 : Integer;
    BEGIN
      HttpClient := HttpClient.HttpClient;
      IF IncludeToken THEN BEGIN
        HttpClient.DefaultRequestHeaders.Add('Accept','application/xml;charset=utf-8');
        HttpClient.DefaultRequestHeaders.Add('Authorization','Bearer ' + GetAccessToken);
      END;

      HttpResponseMessage := HttpClient.PutAsync(ToUrl,BatchUploadContent).Result;

      FOR i := 1 TO BatchFileCount DO
        BatchStreamContent[i].Dispose;
      BatchFileCount := 0;

      IF NOT ISNULL(HttpResponseMessage) THEN
        IF NOT HttpResponseMessage.IsSuccessStatusCode THEN
          ERROR(HttpResponseMessage.Content.ReadAsStringAsync.Result);
    END;

    PROCEDURE FormatDecimal@1000000008(DecAsText@1000000005 : Text[1024]) Result : Decimal;
    VAR
      LeftSide@1000000000 : Text[30];
      RightSide@1000000001 : Text[30];
      NegNumber@1000000002 : Boolean;
      PassedDecPoint@1000000003 : Boolean;
      i@1000000004 : Integer;
      TempInt@1000000006 : Integer;
      TempDec@1000000008 : Decimal;
    BEGIN
      IF DecAsText = '' THEN
        EXIT;

      EVALUATE(Result,CONVERTSTR(DecAsText,'.',GetDecimalSeparator));
    END;

    PROCEDURE GetDecimalSeparator@1000000009() : Text[1];
    BEGIN
      EXIT(COPYSTR(FORMAT(1.1),2,1));
    END;

    PROCEDURE CreateNewCompanyGUID@1160040006();
    VAR
      OnlineSetup@1160040000 : Record 6086500;
    BEGIN
      OnlineSetup.GET;
      OnlineSetup."Company GUID" := CREATEGUID;
      OnlineSetup.MODIFY;
    END;

    PROCEDURE GetUserWebServiceKey@1160040010(_UserID@1160040000 : Code[50]) : Text[80];
    VAR
      User@6085573 : Record 2000000120;
      UserProperty@1000 : Record 2000000121;
    BEGIN
      User.SETRANGE("User Name",_UserID);
      IF NOT User.FINDFIRST THEN
        EXIT;

      IF UserProperty.GET(User."User Security ID") THEN
        EXIT(UserProperty."WebServices Key");
    END;

    PROCEDURE GetUserFullName@2(_UserID@1000 : Code[50]) : Text[80];
    VAR
      UserSetup@6085574 : Record 91;
      Purchaser@6085573 : Record 13;
    BEGIN
      IF UserSetup.GET(_UserID) THEN
        IF Purchaser.GET(UserSetup."Salespers./Purch. Code") THEN
          IF Purchaser.Name <> '' THEN
            EXIT(Purchaser.Name);

      EXIT(_UserID);
    END;

    PROCEDURE IsDev@1160040025() : Boolean;
    VAR
      OnlineSetup@1160040000 : Record 6086500;
    BEGIN
      OnlineSetup.GET;
      EXIT(OnlineSetup."Continia Dev. Environment" OR (COPYSTR(OnlineSetup."Client ID",1,4) = 'DEV-'));
    END;

    PROCEDURE IsDemo@1160040029() : Boolean;
    VAR
      OnlineSetup@1160040000 : Record 6086500;
    BEGIN
      OnlineSetup.GET;
      EXIT(COPYSTR(OnlineSetup."Client ID",1,5) = 'DEMO-');
    END;

    PROCEDURE ShowErrorMsg@1160040032(ErrorMsg@1160040000 : Text[1024]);
    BEGIN
      CASE ErrorMsg OF
        'EXP-UNABLE-TO-DELETE':
          ErrorMsg := UnableToUpdatePleaseSyncErr;
        'EXP-UNABLE-TO-UPDATE':
          ErrorMsg := UnableToUpdatePleaseSyncErr;
      END;

      ERROR(ErrorMsg);
    END;

    BEGIN
    END.
  }
}

