OBJECT Codeunit 6086501 Continia Online License Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.4.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OnlineMgt@1160040002 : Codeunit 6086500;
      HttpActions@1160040001 : 'PUT,DELETE,GET';
      Text001@1160040003 : TextConst 'ENU=%1 has not been activated correctly. Please activate the company with the function Activate Company function on the Document Capture Setup card.';
      Text003@1160040000 : TextConst 'ENU=Company GUID: %1';
      Text004@1160040005 : TextConst 'ENU=Company Name: %1';
      Text005@1160040009 : TextConst 'ENU=Company Name (Setup): %1';
      Text006@1160040006 : TextConst 'ENU=VAT Registration No.: %1';
      Text007@1160040007 : TextConst 'ENU=NAV Version: %1';
      Text008@1160040008 : TextConst 'ENU=NAV License No.: %1';

    PROCEDURE IsActive@1160040000(ProductCode@1160040000 : Code[10];ProductName@1160040003 : Text[250];ShowError@1160040001 : Boolean) : Boolean;
    VAR
      ActiveProduct@1160040002 : Record 6086501;
      HasError@1160040004 : Boolean;
    BEGIN
      IF (NOT ActiveProduct.GET(ProductCode,COMPANYNAME)) OR (ActiveProduct."Hashed Company Name" = '') THEN
        IF (NOT ActiveProduct.GET(ProductCode,UPPERCASE(COMPANYNAME))) OR (ActiveProduct."Hashed Company Name" = '') THEN
          HasError := TRUE;

      IF (ActiveProduct."Expiration Date" <> 0D) AND (ActiveProduct."Expiration Date" < TODAY) THEN
        HasError := TRUE;

      IF (ActiveProduct."Hashed Company Name" <> HashValue(COMPANYNAME)) AND
        (ActiveProduct."Hashed Company Name" <> HashValue(UPPERCASE(COMPANYNAME)))
      THEN
        HasError := TRUE;

      IF NOT HasError THEN
        EXIT(TRUE);

      IF HasError THEN BEGIN
        IF ShowError THEN
          ERROR(Text001,ProductName)
        ELSE
          MESSAGE(Text001,ProductName);
      END;
    END;

    PROCEDURE GetStandardLicenseInfo@1160040001(VAR LicenseInfo@1160040000 : ARRAY [100] OF Text[250]) : Integer;
    VAR
      CompInfo@1160040001 : Record 79;
      AppMgt@1160040002 : Codeunit 1;
    BEGIN
      CompInfo.GET;

      LicenseInfo[1] := STRSUBSTNO(Text004,COMPANYNAME);
      LicenseInfo[2] := STRSUBSTNO(Text005,CompInfo.Name);
      LicenseInfo[3] := STRSUBSTNO(Text006,CompInfo."VAT Registration No.");
      LicenseInfo[4] := STRSUBSTNO(Text007,AppMgt.ApplicationVersion);
      LicenseInfo[5] := STRSUBSTNO(Text008,OnlineMgt.GetNavLicenseSN);
      LicenseInfo[6] := STRSUBSTNO(Text003,OnlineMgt.GetCompanyGUID);

      EXIT(6);
    END;

    PROCEDURE ShowAgreement@1160040004(ProductCode@1160040002 : Code[10];ProductVersion@1160040001 : Text[250];LicenseInfo@1160040003 : ARRAY [100] OF Text[250]) : Boolean;
    VAR
      ContiniaLicenseTerms@1160040000 : Page 6086501;
    BEGIN
      ContiniaLicenseTerms.InitCard(ProductVersion,LicenseInfo);
      IF ISSERVICETIER THEN BEGIN
        IF ContiniaLicenseTerms.RUNMODAL = ACTION::OK THEN
          EXIT(ContiniaLicenseTerms.GetIsAccepted);
      END ELSE
        EXIT(ContiniaLicenseTerms.RUNMODAL = ACTION::OK);
    END;

    PROCEDURE AcceptAgreement@1160040002(ProductCode@1160040011 : Code[10];ProductVersion@1160040009 : Text[250];LicenseInfo@1160040012 : ARRAY [100] OF Text[250];IsUpdate@1160040013 : Boolean) : Boolean;
    VAR
      CompInfo@1160040000 : Record 79;
      ActiveProduct@1160040007 : Record 6086501;
      AppMgt@1160040008 : Codeunit 1;
      XmlLib@1160040003 : Codeunit 6085573;
      XmlDoc@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      AgreementNode@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CompanyNode@1160040004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InfoNode@1160040005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LineNode@1160040006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1160040010 : Integer;
    BEGIN
      CompInfo.GET;
      XmlDoc := XmlDoc.XmlDocument;

      AgreementNode := XmlDoc.CreateNode('element','LicenseAgreement','');
      XmlLib.SetXmlNodeAttr(AgreementNode,'Update',OnlineMgt.GetBoolAsText(IsUpdate));

      XmlLib.CreateXmlNode(AgreementNode,'Company','',CompanyNode);
      XmlLib.SetXmlNodeAttr(CompanyNode,'CompanyGUID',OnlineMgt.GetCompanyGUID);
      XmlLib.SetXmlNodeAttr(CompanyNode,'CompanyName',COMPANYNAME);
      XmlLib.SetXmlNodeAttr(CompanyNode,'CompanyInfoName',CompInfo.Name);
      XmlLib.SetXmlNodeAttr(CompanyNode,'VATRegNo',CompInfo."VAT Registration No.");
      XmlLib.SetXmlNodeAttr(CompanyNode,'NavVersion',ProductVersion);
      XmlLib.SetXmlNodeAttr(CompanyNode,'NAVAppVersion',AppMgt.ApplicationVersion);
      XmlLib.SetXmlNodeAttr(CompanyNode,'NAVLicenseSN',OnlineMgt.GetNavLicenseSN);

      XmlLib.CreateXmlNode(AgreementNode,'LicenseInfo','',InfoNode);
      FOR i := 1 TO ARRAYLEN(LicenseInfo) DO BEGIN
        IF LicenseInfo[i] <> '' THEN BEGIN
          XmlLib.CreateXmlNode(InfoNode,'Line','',LineNode);
          XmlLib.SetXmlNodeAttr(LineNode,'Text',LicenseInfo[i]);
        END;
      END;

      XmlDoc.AppendChild(AgreementNode);
      IF NOT OnlineMgt.ExecuteRequest(GetAcceptUrl,HttpActions::PUT,TRUE,XmlDoc) THEN
        EXIT;

      CLEAR(XmlDoc);

      IF (NOT ActiveProduct.GET(ProductCode,COMPANYNAME)) AND
        (NOT ActiveProduct.GET(ProductCode,UPPERCASE(COMPANYNAME)))
      THEN BEGIN
        ActiveProduct."Product Code" := ProductCode;
        ActiveProduct."Company Name" := UPPERCASE(COMPANYNAME);
        ActiveProduct.INSERT
      END;

      ActiveProduct."Hashed Company Name" := HashValue(UPPERCASE(COMPANYNAME));
      ActiveProduct."Activation Date" := TODAY;
      ActiveProduct."Activated by User ID" := USERID;
      ActiveProduct.MODIFY;

      EXIT(TRUE);
    END;

    PROCEDURE UpdateLine@1160040012(LineText@1160040002 : Text[1024];ReplaceText@1160040003 : Text[100];ReplaceToText@1160040000 : Text[100]) : Text[1024];
    VAR
      ReplaceLen@1160040001 : Integer;
      ReplaceToLen@1160040004 : Integer;
      Count@1160040005 : Integer;
    BEGIN
      ReplaceLen := STRLEN(ReplaceText);
      ReplaceToLen := STRLEN(ReplaceToText);
      Count := STRPOS(LineText,ReplaceText);

      IF Count <> 0 THEN BEGIN
        LineText := COPYSTR(LineText,1,Count-1) +
          ReplaceToText +
          COPYSTR(LineText,Count+ReplaceLen);

        LineText := COPYSTR(LineText,1,Count-1+ReplaceToLen) +
          UpdateLine(
            COPYSTR(LineText,Count+ReplaceToLen),
            ReplaceText,
            ReplaceToText);
      END;

      EXIT(LineText);
    END;

    PROCEDURE GetLicenseUrl@1160040039() : Text[1024];
    BEGIN
      IF OnlineMgt.IsDev THEN
        EXIT('https://devlicense.continiaonline.com/api/v1/LicenseAgreement/')
      ELSE IF OnlineMgt.IsDemo THEN
        EXIT('https://demoauth.continiaonline.com/api/v1/LicenseAgreement/')
      ELSE
        EXIT('https://license.continiaonline.com/api/v1/LicenseAgreement/');
    END;

    PROCEDURE GetAcceptUrl@1160040040() : Text[1024];
    BEGIN
      EXIT(GetLicenseUrl + 'AcceptLicense');
    END;

    PROCEDURE HashValue@1160040005(ValueToHash@1160040001 : Text[30]) : Text[1024];
    VAR
      Cryptography@1160040000 : Codeunit 6085599;
    BEGIN
      EXIT(Cryptography.HashValueSHA1(
        '1C7754F1876B9EADA2BAD610E8B4DF18ECFD19F1EE8389D4BEC768A9EB883627' +
        '983661067DE60965A0C5CB6737AB3E187B5294E64CB1CF3781E8346118148C81',
        ValueToHash));
    END;

    BEGIN
    END.
  }
}

