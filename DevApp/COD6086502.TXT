OBJECT Codeunit 6086502 Continia Configuration Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.4.00.03,4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExcludeField@1160040003 : TEMPORARY Record 2000000041;
      ValidateField@1160040004 : TEMPORARY Record 2000000041;
      ReplaceField@1160040005 : Record 6085613;
      XmlLib@1160040000 : Codeunit 6085573;
      XmlDoc@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";

    PROCEDURE CreateXML@1160040006();
    BEGIN
      CLEAR(XmlDoc);
      XmlDoc := XmlDoc.XmlDocument;
      XmlNode := XmlDoc.CreateNode('element','Data','');
    END;

    PROCEDURE LoadXML@1160040002(Filename@1160040000 : Text[1024]);
    BEGIN
      CLEAR(XmlDoc);
      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.Load(Filename);
    END;

    PROCEDURE SaveXML@1160040012(Filename@1160040000 : Text[1024]);
    BEGIN
      IF STRPOS(Filename,'.xml') = 0 THEN
        Filename := Filename + '.xml';

      XmlDoc.AppendChild(XmlNode);
      XmlDoc.Save(Filename);
      CLEAR(XmlDoc);
    END;

    PROCEDURE ClearXML@1160040007();
    BEGIN
      CLEAR(XmlDoc);
    END;

    PROCEDURE GetCount@1160040005(TableNo@1160040000 : Integer) : Integer;
    VAR
      TableNode@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      TableNode := XmlDoc.SelectSingleNode('Data/Table[@TableNo="' + FORMAT(TableNo) + '"]');
      IF NOT ISNULL(TableNode) THEN
        EXIT(TableNode.ChildNodes.Count);
    END;

    PROCEDURE GetAttribValue@1160040010(TableNo@1160040003 : Integer;RecordNo@1160040002 : Integer;FieldNo@1160040004 : Integer) Value : Text[250];
    VAR
      XMLAttribList@1160040001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      RecNode@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      RecNode := XmlDoc.SelectSingleNode('Data/Table[@TableNo="' + FORMAT(TableNo) + '"]').SelectNodes('Record').Item(RecordNo);
      XMLAttribList := RecNode.Attributes;
      Value := XMLAttribList.GetNamedItem('Field' + FORMAT(FieldNo)).Value;
      IF Value = '0' THEN
        Value := '';
    END;

    PROCEDURE ImportRecord@1160040003(TableNo@1160040002 : Integer;RecordNo@1160040001 : Integer;VAR RecRef@1160040000 : RecordRef) : Boolean;
    VAR
      XMLAttribList@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      RecNode@1160040005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Field@1160040006 : Record 2000000041;
      FieldRef@1160040004 : FieldRef;
      FieldNo@1160040007 : Integer;
      i@1160040010 : Integer;
      FieldName@1160040009 : Text[30];
      FieldValue@1160040008 : Text[250];
      IsValidateField@1160040012 : Boolean;
    BEGIN
      RecRef.INIT;

      RecNode :=
        XmlDoc.SelectSingleNode('Data/Table[@TableNo="' + FORMAT(TableNo) + '"]').SelectNodes('Record').Item(RecordNo);

      XMLAttribList := RecNode.Attributes;
      FOR i := 0 TO XMLAttribList.Count - 1 DO BEGIN
        FieldName := XMLAttribList.Item(i).Name;
        EVALUATE(FieldNo,COPYSTR(FieldName,STRPOS(FieldName,'Field')+5));
        FieldValue := XMLAttribList.Item(i).Value;

        IF FieldValue <> '' THEN BEGIN
          FieldRef := RecRef.FIELD(FieldNo);

          IF UPPERCASE(FORMAT(FieldRef.CLASS)) <> 'FLOWFIELD' THEN BEGIN
            Field.GET(TableNo,FieldRef.NUMBER);

            IF NOT ExcludeField.GET(Field.TableNo,Field."No.") THEN BEGIN
              IsValidateField := ValidateField.GET(Field.TableNo,Field."No.");

              CASE Field.Type OF
                Field.Type::Boolean:
                  BEGIN
                    IF IsValidateField THEN
                      FieldRef.VALIDATE(XmlLib.Text2Bool(FieldValue))
                    ELSE
                      FieldRef.VALUE := XmlLib.Text2Bool(FieldValue)
                  END;
                Field.Type::Text,Field.Type::Code,Field.Type::GUID:
                  BEGIN
                    IF IsValidateField THEN
                      FieldRef.VALIDATE(FieldValue)
                    ELSE
                      FieldRef.VALUE := FieldValue;
                  END;
                Field.Type::Date:
                  BEGIN
                    IF IsValidateField THEN
                      FieldRef.VALIDATE(XmlLib.Text2Date(FieldValue))
                    ELSE
                      FieldRef.VALUE := XmlLib.Text2Date(FieldValue);
                  END;
                Field.Type::Decimal:
                  BEGIN
                    IF IsValidateField THEN
                      FieldRef.VALIDATE(XmlLib.Text2Dec(FieldValue))
                    ELSE
                      FieldRef.VALUE := XmlLib.Text2Dec(FieldValue);
                  END;
                Field.Type::Integer,Field.Type::Option:
                  BEGIN
                    IF (TableNo = 6085580) AND (FieldNo = 53) AND (FieldValue = '167') THEN  //**4PS.sn
                      FieldValue := '11072003';                                              //**4PS.en
                    IF IsValidateField THEN
                      FieldRef.VALIDATE(XmlLib.Text2Int(FieldValue))
                    ELSE
                      FieldRef.VALUE := XmlLib.Text2Int(FieldValue);
                  END;
              END;
            END;
          END;
        END;
      END;

      IF NOT RecRef.INSERT THEN
        RecRef.MODIFY;
    END;

    PROCEDURE ExportRecord@1160040004(TableNo@1160040001 : Integer;VAR RecRef@1160040000 : RecordRef);
    VAR
      TableNode@1160040002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RecNode@1160040003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      TableNode := XmlNode.SelectSingleNode('Table[@TableNo="' + FORMAT(TableNo) + '"]');

      IF ISNULL(TableNode) THEN BEGIN
        XmlLib.CreateXmlNode(XmlNode,'Table','',TableNode);
        XmlLib.SetXmlNodeAttr(TableNode,'TableNo',FORMAT(TableNo));
      END;

      XmlLib.CreateXmlNode(TableNode,'Record','',RecNode);
      AddRecToNode(TableNo,RecRef,RecNode);
    END;

    PROCEDURE AddRecToNode@1160040000(TableNo@1160040007 : Integer;RecRef@1160040008 : RecordRef;VAR Node@1160040000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      Field@1160040002 : Record 2000000041;
      FieldRef@1160040003 : FieldRef;
      TempBool@1160040004 : Boolean;
      TempDate@1160040005 : Date;
      TempDec@1160040006 : Decimal;
    BEGIN
      Field.SETRANGE(TableNo,TableNo);
      IF Field.FINDSET THEN
        REPEAT
          IF NOT ExcludeField.GET(Field.TableNo,Field."No.") THEN BEGIN
            FieldRef := RecRef.FIELD(Field."No.");
            IF NOT (UPPERCASE(FORMAT(FieldRef.CLASS)) = 'FLOWFIELD') THEN
              IF ReplaceField.GET(Field.TableNo,Field."No.") THEN BEGIN
                XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),ReplaceField.Value);
                ReplaceField.DELETE;
              END ELSE
                CASE Field.Type OF
                  Field.Type::Boolean:
                    BEGIN
                      IF UPPERCASE(FORMAT(FieldRef.VALUE,0,9)) = 'TRUE' THEN
                        TempBool := TRUE
                      ELSE IF UPPERCASE(FORMAT(FieldRef.VALUE,0,9)) = 'FALSE' THEN
                        TempBool := FALSE
                      ELSE
                        EVALUATE(TempBool,FORMAT(FieldRef.VALUE,0,9));

                      XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),XmlLib.Bool2Text(TempBool));
                    END;
                  Field.Type::Date:
                    BEGIN
                      EVALUATE(TempDate,FORMAT(FieldRef.VALUE,0,9));
                      XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),XmlLib.Date2Text(TempDate));
                    END;
                  Field.Type::Decimal:
                    BEGIN
                      EVALUATE(TempDec,FORMAT(FieldRef.VALUE,0,9));
                      XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),XmlLib.Dec2Text(TempDec));
                    END;
                  ELSE
                    XmlLib.SetXmlNodeAttr(Node,'Field' + FORMAT(Field."No."),FORMAT(FieldRef.VALUE,0,9));
                END;
          END;
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE AddExcludeField@1160040001(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer);
    BEGIN
      IF ExcludeField.GET(TableNo,FieldNo) THEN
        EXIT;

      ExcludeField.TableNo := TableNo;
      ExcludeField."No." := FieldNo;
      ExcludeField.INSERT;
    END;

    PROCEDURE AddValidateField@1160040008(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer);
    BEGIN
      IF ValidateField.GET(TableNo,FieldNo) THEN
        EXIT;

      ValidateField.TableNo := TableNo;
      ValidateField."No." := FieldNo;
      ValidateField.INSERT;
    END;

    PROCEDURE AddReplaceField@1160040009(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer;Value@1160040002 : Text[250]);
    BEGIN
      IF ReplaceField.GET(TableNo,FieldNo) THEN
        EXIT;

      ReplaceField."Table No." := TableNo;
      ReplaceField."Field No." := FieldNo;
      ReplaceField.Value := Value;
      ReplaceField.INSERT;
    END;

    EVENT XmlDoc@1160040001::ondataavailable@198();
    BEGIN
    END;

    EVENT XmlDoc@1160040001::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}

