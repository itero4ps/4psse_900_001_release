OBJECT Codeunit 7171 Sales Info-Pane Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesPriceCalcMgt@1002 : Codeunit 7000;
      Text000@1004 : TextConst 'ENU=The Ship-to Address has been changed.';
      AvailableToPromise@1005 : Codeunit 5790;
      CompanyLogistics@1100485000 : Text[50];

    LOCAL PROCEDURE CalcNoOfDocuments@1(VAR Cust@1000 : Record 18);
    BEGIN
      Cust.CALCFIELDS(
        "No. of Quotes","No. of Blanket Orders","No. of Orders","No. of Invoices",
        "No. of Return Orders","No. of Credit Memos","No. of Pstd. Shipments",
        "No. of Pstd. Invoices","No. of Pstd. Return Receipts","No. of Pstd. Credit Memos",
        "Sell-to No. Of Archived Doc.");
    END;

    LOCAL PROCEDURE CalcTotalNoOfDocuments@2(CustNo@1000 : Code[20]) : Integer;
    BEGIN
      GetCust(CustNo);
      WITH Cust DO BEGIN
        CalcNoOfDocuments(Cust);
        EXIT(
          "No. of Quotes" + "No. of Blanket Orders" + "No. of Orders" + "No. of Invoices" +
          "No. of Return Orders" + "No. of Credit Memos" + "No. of Pstd. Shipments" +
          "No. of Pstd. Invoices" + "No. of Pstd. Return Receipts" + "No. of Pstd. Credit Memos" +
          "Sell-to No. Of Archived Doc.");
      END;
    END;

    PROCEDURE CalcNoOfShipToAddr@5(CustNo@1000 : Code[20]) : Integer;
    BEGIN
      //**4PS, function changed to global
      GetCust(CustNo);
      Cust.CALCFIELDS("No. of Ship-to Addresses");
      EXIT(Cust."No. of Ship-to Addresses");
    END;

    PROCEDURE CalcNoOfContacts@3(SalesHeader@1002 : Record 36) : Integer;
    VAR
      Cont@1000 : Record 5050;
      ContBusRelation@1001 : Record 5054;
    BEGIN
      //**4PS, function changed to global
      Cont.SETCURRENTKEY("Company No.");
      WITH SalesHeader DO
        IF "Sell-to Customer No." <> '' THEN BEGIN
          IF Cont.GET("Sell-to Contact No.") THEN BEGIN
            Cont.SETRANGE("Company No.",Cont."Company No.");
            EXIT(Cont.COUNT);
          END;
          ContBusRelation.RESET;
          ContBusRelation.SETCURRENTKEY("Link to Table","No.");
          ContBusRelation.SETRANGE("Link to Table",ContBusRelation."Link to Table"::Customer);
          ContBusRelation.SETRANGE("No.","Sell-to Customer No.");
          IF ContBusRelation.FINDFIRST THEN BEGIN
            Cont.SETRANGE("Company No.",ContBusRelation."Contact No.");
            EXIT(Cont.COUNT);
          END;
          EXIT(0)
          ;
        END;
    END;

    PROCEDURE CalcAvailability@18(VAR SalesLine@1000 : Record 37) : Decimal;
    VAR
      GrossRequirement@1002 : Decimal;
      ScheduledReceipt@1003 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      LookaheadDateformula@1005 : DateFormula;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        AvailableToPromise.SetCompanyLogistics(CompanyLogistics); //**4PS.n
        EXIT(
          ConvertQty(
            AvailableToPromise.QtyAvailabletoPromise(
              Item,
              GrossRequirement,
              ScheduledReceipt,
              CalcAvailabilityDate(SalesLine),
              PeriodType,
              LookaheadDateformula),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    PROCEDURE CalcAvailabilityDate@27(SalesLine@1000 : Record 37) : Date;
    BEGIN
      IF SalesLine."Shipment Date" <> 0D THEN
        EXIT(SalesLine."Shipment Date");

      EXIT(WORKDATE);
    END;

    PROCEDURE CalcAvailableInventory@9(SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcAvailableInventory(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    PROCEDURE CalcScheduledReceipt@21(SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcScheduledReceipt(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    PROCEDURE CalcGrossRequirements@23(SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcGrossRequirement(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    PROCEDURE CalcReservedRequirements@25(SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcReservedReceipt(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    PROCEDURE CalcReservedDemand@26(SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        AvailableToPromise.SetCompanyLogistics(CompanyLogistics); //**4PS.n
        EXIT(
          ConvertQty(
            AvailableToPromise.CalcReservedRequirement(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    PROCEDURE CalcNoOfSubstitutions@20(SalesLine@1000 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        Item.CALCFIELDS("No. of Substitutes");
        EXIT(Item."No. of Substitutes");
      END;
    END;

    PROCEDURE CalcNoOfSalesPrices@19(SalesLine@1000 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        GetSalesHeader(SalesLine);
        EXIT(SalesPriceCalcMgt.NoOfSalesLinePrice(SalesHeader,SalesLine,TRUE));
      END;
    END;

    PROCEDURE CalcNoOfSalesLineDisc@22(SalesLine@1001 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        GetSalesHeader(SalesLine);
        EXIT(SalesPriceCalcMgt.NoOfSalesLineLineDisc(SalesHeader,SalesLine,TRUE));
      END;
    END;

    LOCAL PROCEDURE ConvertQty@28(Qty@1000 : Decimal;PerUoMQty@1001 : Decimal) : Decimal;
    BEGIN
      IF PerUoMQty = 0 THEN
        PerUoMQty := 1;
      EXIT(ROUND(Qty / PerUoMQty,0.00001));
    END;

    PROCEDURE DocExist@16(CurrentSalesHeader@1005 : Record 36;CustNo@1000 : Code[20]) : Boolean;
    VAR
      SalesInvHeader@1001 : Record 112;
      SalesShptHeader@1002 : Record 110;
      SalesCrMemoHeader@1003 : Record 114;
      ReturnReceipt@1006 : Record 6660;
      SalesHeader@1004 : Record 36;
    BEGIN
      //**4PS, function changed to global
      IF CustNo = '' THEN
        EXIT(FALSE);
      WITH SalesInvHeader DO BEGIN
        SETCURRENTKEY("Sell-to Customer No.");
        SETRANGE("Sell-to Customer No.",CustNo);
        IF NOT ISEMPTY THEN
          EXIT(TRUE);
      END;
      WITH SalesShptHeader DO BEGIN
        SETCURRENTKEY("Sell-to Customer No.");
        SETRANGE("Sell-to Customer No.",CustNo);
        IF NOT ISEMPTY THEN
          EXIT(TRUE);
      END;
      WITH SalesCrMemoHeader DO BEGIN
        SETCURRENTKEY("Sell-to Customer No.");
        SETRANGE("Sell-to Customer No.",CustNo);
        IF NOT ISEMPTY THEN
          EXIT(TRUE);
      END;
      WITH SalesHeader DO BEGIN
        SETCURRENTKEY("Sell-to Customer No.");
        SETRANGE("Sell-to Customer No.",CustNo);
        IF FINDFIRST THEN BEGIN
          IF ("Document Type" <> CurrentSalesHeader."Document Type") OR
             ("No." <> CurrentSalesHeader."No.")
          THEN
            EXIT(TRUE);
          IF FIND('>') THEN
            EXIT(TRUE);
        END;
      END;
      WITH ReturnReceipt DO BEGIN
        SETCURRENTKEY("Sell-to Customer No.");
        SETRANGE("Sell-to Customer No.",CustNo);
        IF NOT ISEMPTY THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CustCommentExists@8(CustNo@1000 : Code[20]) : Boolean;
    BEGIN
      GetCust(CustNo);
      Cust.CALCFIELDS(Comment);
      EXIT(Cust.Comment);
    END;

    LOCAL PROCEDURE ItemCommentExists@12(SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        Item.CALCFIELDS(Comment);
        EXIT(Item.Comment);
      END;
    END;

    PROCEDURE LookupShipToAddr@10(VAR SalesHeader@1000 : Record 36);
    VAR
      ShipToAddr@1001 : Record 222;
    BEGIN
      //**4PS, function changed to global
      WITH SalesHeader DO BEGIN
        ShipToAddr.SETRANGE("Customer No.","Sell-to Customer No.");
        IF PAGE.RUNMODAL(0,ShipToAddr) = ACTION::LookupOK THEN BEGIN
          VALIDATE("Ship-to Code",ShipToAddr.Code);
          MODIFY(TRUE);
          MESSAGE(Text000);
        END;
      END;
    END;

    PROCEDURE LookupContacts@11(VAR SalesHeader@1000 : Record 36);
    VAR
      Cont@1002 : Record 5050;
      ContBusRelation@1001 : Record 5054;
    BEGIN
      //**4PS, function changed to global
      WITH SalesHeader DO BEGIN
        IF "Sell-to Customer No." <> '' THEN BEGIN
          IF Cont.GET("Sell-to Contact No.") THEN
            Cont.SETRANGE("Company No.",Cont."Company No.")
          ELSE BEGIN
            ContBusRelation.RESET;
            ContBusRelation.SETCURRENTKEY("Link to Table","No.");
            ContBusRelation.SETRANGE("Link to Table",ContBusRelation."Link to Table"::Customer);
            ContBusRelation.SETRANGE("No.","Sell-to Customer No.");
            IF ContBusRelation.FINDFIRST THEN
              Cont.SETRANGE("Company No.",ContBusRelation."Contact No.")
            ELSE
              Cont.SETRANGE("No.",'');
          END;
          IF Cont.GET("Sell-to Contact No.") THEN ;
        END ELSE
          Cont.SETRANGE("No.",'');
        IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
          VALIDATE("Sell-to Contact No.",Cont."No.");
          MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE LookupAvailCredit@15(CustNo@1000 : Code[20]);
    BEGIN
      //**4PS changed to global
      Cust.RESET;
      Cust.SETRANGE("No.",CustNo);
      PAGE.RUNMODAL(PAGE::"Available Credit",Cust);
    END;

    PROCEDURE LookupItem@7(SalesLine@1000 : Record 37);
    BEGIN
      //SalesLine.TESTFIELD(Type,SalesLine.Type::Item);  //**4PS.n
      SalesLine.TESTFIELD("No.");
      GetItem(SalesLine);
      PAGE.RUNMODAL(PAGE::"Item Card",Item);
    END;

    LOCAL PROCEDURE LookupItemComment@14(SalesLine@1000 : Record 37);
    VAR
      CommentLine@1001 : Record 97;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Item);
        //CommentLine.SETRANGE("No.",SalesLine."No."); //**4PS.o
        CommentLine.SETRANGE("No.",SalesLine."Item No.");  //**4PS.n
        PAGE.RUNMODAL(PAGE::"Comment Sheet",CommentLine);
      END;
    END;

    LOCAL PROCEDURE GetCust@6(CustNo@1000 : Code[20]);
    BEGIN
      IF CustNo <> '' THEN BEGIN
        IF CustNo <> Cust."No." THEN
          IF NOT Cust.GET(CustNo) THEN
            CLEAR(Cust);
      END ELSE
        CLEAR(Cust);
    END;

    LOCAL PROCEDURE GetItem@24(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      WITH Item DO BEGIN
        //**4PS.so
        //IF (SalesLine.Type <> SalesLine.Type::Item) OR (SalesLine."No." = '') THEN
        //  EXIT(FALSE);
        //
        //IF SalesLine."No." <> "No." THEN
        //  GET(SalesLine."No.");
        //**4PS.eo

        //**4PS.sn
        CHANGECOMPANY(CompanyLogistics);
        IF SalesLine."Item No." = '' THEN
          EXIT(FALSE);
        IF SalesLine."Item No." <> "No." THEN
          GET(SalesLine."Item No.");
        //**4PS.en

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetSalesHeader@13(SalesLine@1000 : Record 37);
    BEGIN
      IF (SalesLine."Document Type" <> SalesHeader."Document Type") OR
         (SalesLine."Document No." <> SalesHeader."No.")
      THEN
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    END;

    LOCAL PROCEDURE CalcNoOfBillToDocuments@17(VAR Cust@1000 : Record 18);
    BEGIN
      Cust.CALCFIELDS(
        "Bill-To No. of Quotes","Bill-To No. of Blanket Orders","Bill-To No. of Orders","Bill-To No. of Invoices",
        "Bill-To No. of Return Orders","Bill-To No. of Credit Memos","Bill-To No. of Pstd. Shipments",
        "Bill-To No. of Pstd. Invoices","Bill-To No. of Pstd. Return R.","Bill-To No. of Pstd. Cr. Memos",
        "Bill-to No. Of Archived Doc.");
    END;

    LOCAL PROCEDURE SetItemFilter@4(VAR Item@1000 : Record 27;SalesLine@1001 : Record 37);
    BEGIN
      Item.CHANGECOMPANY(CompanyLogistics); //**4PS.n
      Item.RESET;
      Item.SETRANGE("Date Filter",0D,CalcAvailabilityDate(SalesLine));
      Item.SETRANGE("Variant Filter",SalesLine."Variant Code");
      //**4PS.sn
      IF CompanyLogistics <> '' THEN BEGIN
        GetSalesHeader(SalesLine);
        Item.SETRANGE("Location Filter",SalesHeader."Location Code Logistics");
      END ELSE
      //**4PS.en
        Item.SETRANGE("Location Filter",SalesLine."Location Code");
      Item.SETRANGE("Drop Shipment Filter",FALSE);
    END;

    PROCEDURE LookupContactsFromCustomer@1100485002(VAR CustomerCde@1000 : Code[20]);
    VAR
      Cont@1002 : Record 5050;
      ContBusRelation@1001 : Record 5054;
    BEGIN
      //**4PS
      IF CustomerCde <> '' THEN BEGIN
        ContBusRelation.RESET;
        ContBusRelation.SETCURRENTKEY("Link to Table","No.");
        ContBusRelation.SETRANGE("Link to Table",ContBusRelation."Link to Table"::Customer);
        ContBusRelation.SETRANGE("No.",CustomerCde);
        IF ContBusRelation.FIND('-') THEN BEGIN
          Cont.SETRANGE("Company No.",ContBusRelation."Contact No.");
          PAGE.RUNMODAL(PAGE::"Contact List",Cont);
        END;
      END;
    END;

    PROCEDURE CalcNoOfContactsFromCustomer@1100485001(CustomerCde@1002 : Code[20]) : Integer;
    VAR
      Cont@1000 : Record 5050;
      ContBusRelation@1001 : Record 5054;
    BEGIN
      //**4PS
      Cont.SETCURRENTKEY("Company No.");
      IF CustomerCde <> '' THEN BEGIN
        ContBusRelation.RESET;
        ContBusRelation.SETCURRENTKEY("Link to Table","No.");
        ContBusRelation.SETRANGE("Link to Table",ContBusRelation."Link to Table"::Customer);
        ContBusRelation.SETRANGE("No.",CustomerCde);
        IF ContBusRelation.FINDFIRST THEN BEGIN
          Cont.SETRANGE("Company No.",ContBusRelation."Contact No.");
          EXIT(Cont.COUNT);
        END;
      END;
    END;

    PROCEDURE CalcAvailabilityLogistics@1100485000(VAR SalesLine@1000 : Record 37;lCompanyLogistics@1100485000 : Text[50]) : Decimal;
    BEGIN
      //**4PS
      CompanyLogistics := lCompanyLogistics;
      EXIT(CalcAvailability(SalesLine));
    END;

    BEGIN
    {
      4PS01 JD 24-01-2008 Call 9968 Bij openen van scherm Verkoopfactuur wordt langdurig tabel relatie doorzocht
    }
    END.
  }
}

