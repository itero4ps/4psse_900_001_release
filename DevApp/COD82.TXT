OBJECT Codeunit 82 Sales-Post + Print
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.44974,4PS9.00;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=BEGIN
            SalesHeader.COPY(Rec);
            Code;
            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice';
      Text001@1001 : TextConst 'ENU=Do you want to post and print/mail the %1?';
      PostAndEmailMsg@1016 : TextConst 'ENU=Do you want to post and email the %1?';
      Text002@1002 : TextConst 'ENU=&Receive,&Invoice,Receive &and Invoice';
      SalesHeader@1003 : Record 36;
      SalesShptHeader@1004 : Record 110;
      SalesInvHeader@1005 : Record 112;
      SalesCrMemoHeader@1006 : Record 114;
      ReturnRcptHeader@1007 : Record 6660;
      ReportSelection@1008 : Record 77;
      Selection@1010 : Integer;
      SendReportAsEmail@1009 : Boolean;
      ServerSaveAsPdfFailedErr@1011 : TextConst 'ENU=The report is empty.';
      SalesSetup@1210190001 : Record 311;
      Text11012002@1100528800 : TextConst 'ENU="It is only possible to post released Invoices "';
      Text11012003@1100528801 : TextConst 'ENU=It is only possible to post released Orders';

    PROCEDURE PostAndEmail@10(VAR ParmSalesHeader@1000 : Record 36);
    BEGIN
      SendReportAsEmail := TRUE;
      SalesHeader.COPY(ParmSalesHeader);
      Code;
      ParmSalesHeader := SalesHeader;
    END;

    LOCAL PROCEDURE Code@2();
    VAR
      SalesSetup@1001 : Record 311;
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      SalesSetup.GET(); //**4PS.n

      WITH SalesHeader DO BEGIN
        CASE "Document Type" OF
          //**4PS.sn
          "Document Type"::"Invoice Proposal":
            BEGIN
              SalesHeader.SETRECFILTER;
              IF "Plant Invoice" THEN
                PrintReport(1559);
              IF "Service Invoice" THEN
                PrintReport(3017);
            END;
          //**4PS.en
          "Document Type"::Order:
            BEGIN
              // dp00114.sn
              IF SalesSetup."Release Sales Orders Required" THEN BEGIN
                IF SalesHeader.Status = SalesHeader.Status::Open THEN BEGIN
                  MESSAGE(Text11012003);
                  EXIT;
                END;
              END;
              // dp00114.en

              //Selection := STRMENU(Text000,3);
              //**4PS.sn
              IF SalesSetup."Invoice Sales Orders" <> SalesSetup."Invoice Sales Orders"::No THEN
                Selection := STRMENU(Text000,1)
              ELSE BEGIN
                IF NOT CONFIRM(Text001,FALSE,"Document Type") THEN
                  EXIT
                ELSE
                  Selection := 1;
              END;
              //**4PS.en

              IF Selection = 0 THEN
                EXIT;

              Ship := Selection IN [1,3];
              Invoice := Selection IN [2,3];
              UpdatePostingAndDocDate(WORKDATE); //**4PS.n

            END;
          "Document Type"::"Return Order":
            BEGIN
              //Selection := STRMENU(Text002,3);  //**4PS.o 27074
              //**4PS.sn 27074
              IF SalesSetup."Invoice Return Orders" <> SalesSetup."Invoice Return Orders"::No THEN
                Selection := STRMENU(Text002,1)
              ELSE BEGIN
                IF NOT CONFIRM(Text001, FALSE, "Document Type") THEN
                  EXIT
                ELSE
                  Selection := 1;
              END;
              //**4PS.en

              IF Selection = 0 THEN
                EXIT;
              Receive := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END
          ELSE
          BEGIN //**4PS.n
            IF NOT CONFIRM(ConfirmationMessage,FALSE,"Document Type") THEN
              EXIT;
          //**4PS.sn
            IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN BEGIN
              IF SalesSetup."Post only released Invoices" THEN BEGIN
                IF SalesHeader.Status = SalesHeader.Status::Open THEN BEGIN
                  MESSAGE(Text11012002);
                  EXIT;
                END;
              END;
              UpdatePostingAndDocDate(WORKDATE);
            END;
          END;
          //**4PS.en
        END;

        "Print Posted Documents" := TRUE;

        SalesSetup.GET;
        IF SalesSetup."Post & Print with Job Queue" AND NOT SendReportAsEmail THEN
          SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
        ELSE BEGIN
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
          COMMIT; //call C-029356
          GetReport(SalesHeader);
        END;
        COMMIT;
      END;
    END;

    PROCEDURE GetReport@3(VAR SalesHeader@1000 : Record 36);
    VAR
      CustomReportSelection@1001 : Record 9657;
      CustomReportID@1002 : Integer;
    BEGIN
      WITH SalesHeader DO
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              IF Ship THEN BEGIN
                SalesShptHeader."No." := "Last Shipping No.";
                SalesShptHeader.SETRECFILTER;
                PrintReport(ReportSelection.Usage::"S.Shipment");
              END;
              IF Invoice THEN BEGIN
                SalesInvHeader."No." := "Last Posting No.";
                SalesInvHeader.SETRECFILTER;

                CustomReportID := CustomReportSelection.PrintCustomReports(SalesInvHeader,SendReportAsEmail,FALSE);
                IF CustomReportID = 0 THEN
                  PrintReport(ReportSelection.Usage::"S.Invoice");
              END;
            END;
          "Document Type"::Invoice:
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesInvHeader."No." := "No."
              ELSE
                SalesInvHeader."No." := "Last Posting No.";
              SalesInvHeader.SETRECFILTER;

              CustomReportID := CustomReportSelection.PrintCustomReports(SalesInvHeader,SendReportAsEmail,FALSE);
              IF CustomReportID = 0 THEN
                PrintReport(ReportSelection.Usage::"S.Invoice");
            END;
          "Document Type"::"Return Order":
            BEGIN
              IF Receive THEN BEGIN
                ReturnRcptHeader."No." := "Last Return Receipt No.";
                ReturnRcptHeader.SETRECFILTER;
                PrintReport(ReportSelection.Usage::"S.Ret.Rcpt.");
              END;
              IF Invoice THEN BEGIN
                SalesCrMemoHeader."No." := "Last Posting No.";
                SalesCrMemoHeader.SETRECFILTER;

                CustomReportID := CustomReportSelection.PrintCustomReports(SalesCrMemoHeader,SendReportAsEmail,FALSE);
                IF CustomReportID = 0 THEN
                  PrintReport(ReportSelection.Usage::"S.Cr.Memo");
              END;
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesCrMemoHeader."No." := "No."
              ELSE
                SalesCrMemoHeader."No." := "Last Posting No.";
              SalesCrMemoHeader.SETRECFILTER;

              CustomReportID := CustomReportSelection.PrintCustomReports(SalesCrMemoHeader,SendReportAsEmail,FALSE);
              IF CustomReportID = 0 THEN
                PrintReport(ReportSelection.Usage::"S.Cr.Memo");
            END;
        END;
    END;

    LOCAL PROCEDURE PrintReport@1(ReportUsage@1000 : Integer);
    VAR
      TempReportSelection@1100525001 : TEMPORARY Record 77;
      DocPrint@1100485000 : Codeunit 229;
    BEGIN
      { //**4PS.so
      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportUsage);
      ReportSelection.FINDSET;
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        IF SendReportAsEmail THEN
          DoSendReportAsEmail(ReportUsage,ReportSelection."Report ID")
        ELSE
          CASE ReportUsage OF
            ReportSelection.Usage::"SM.Invoice":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesInvHeader);
            ReportSelection.Usage::"SM.Credit Memo":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesCrMemoHeader);
            ReportSelection.Usage::"S.Invoice":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesInvHeader);
            ReportSelection.Usage::"S.Cr.Memo":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesCrMemoHeader);
            ReportSelection.Usage::"S.Shipment":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesShptHeader);
            ReportSelection.Usage::"S.Ret.Rcpt.":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,ReturnRcptHeader);
          END;
      UNTIL ReportSelection.NEXT = 0;
      } //**4PS.so

      //**4PS.sn
      CASE ReportUsage OF
        TempReportSelection.Usage::"S.Invoice":
          IF SendSalesInvoice THEN
            EXIT;
        TempReportSelection.Usage::"S.Cr.Memo":
          IF SendSalesCrMemo THEN
            EXIT;
        TempReportSelection.Usage::"S.Shipment":
          IF SendSalesShipmentHeader THEN
            EXIT;
        TempReportSelection.Usage::"S.Ret.Rcpt.":
          IF SendReturnReceiptHeader THEN
            EXIT;
      END;

      //* Now 'TempReportSelection' and also argument 'TRUE' on 'REPORT.RUN'
      //DocPrint.GetReportSelection(ReportUsage,TempReportSelection,FALSE);
      DocPrint.GetReportSelection(ReportUsage,TempReportSelection,TRUE);  //call C-029356
      TempReportSelection.FINDSET;
      REPEAT
        CASE ReportUsage OF
          TempReportSelection.Usage::"S.Invoice":
            REPORT.RUN(TempReportSelection."Report ID",TRUE,FALSE,SalesInvHeader);
          TempReportSelection.Usage::"S.Cr.Memo":
            REPORT.RUN(TempReportSelection."Report ID",TRUE,FALSE,SalesCrMemoHeader);
          TempReportSelection.Usage::"S.Shipment":
            REPORT.RUN(TempReportSelection."Report ID",TRUE,FALSE,SalesShptHeader);
          TempReportSelection.Usage::"S.Ret.Rcpt.":
            REPORT.RUN(TempReportSelection."Report ID",TRUE,FALSE,ReturnRcptHeader);
          //**4PS.sn
          1559:
            REPORT.RUNMODAL(TempReportSelection."Report ID",TRUE,FALSE,SalesHeader);
          3017:
            REPORT.RUNMODAL(TempReportSelection."Report ID",TRUE,FALSE,SalesHeader);
          //**4PS.en
        END;
      UNTIL TempReportSelection.NEXT = 0;
      //**4PS.en
    END;

    LOCAL PROCEDURE SendSalesInvoice@1100528403() ReportSent : Boolean;
    VAR
      SalesInvoiceHeader2@1100528400 : Record 112;
    BEGIN
      //**4PS
      SalesInvHeader.FINDFIRST;
      IF SendReportAsEmail THEN BEGIN
        SalesInvoiceHeader2.COPY(SalesInvHeader);
        SalesInvoiceHeader2.SETRECFILTER;
        SalesInvoiceHeader2.EmailRecords(TRUE);
        ReportSent := TRUE;
      END;

      IF NOT ReportSent AND
         (SalesInvHeader."Electronic Invoicing" <> SalesInvHeader."Electronic Invoicing"::Print)
      THEN BEGIN
        SalesInvHeader.SendInvoiceElectronic(FALSE,FALSE);
        ReportSent := TRUE;
      END;

      IF NOT ReportSent AND
         SalesInvHeader.AttachmentsMustBePrinted
      THEN BEGIN
        SalesInvHeader.PrintInvoiceIncludingAttachments(FALSE);
        ReportSent := TRUE;
      END;
    END;

    LOCAL PROCEDURE SendSalesCrMemo@1100528408() ReportSent : Boolean;
    VAR
      SalesCrMemoHeader2@1100528400 : Record 114;
    BEGIN
      //**4PS
      SalesCrMemoHeader.FINDFIRST;
      IF SendReportAsEmail THEN BEGIN
        SalesCrMemoHeader2.COPY(SalesCrMemoHeader);
        SalesCrMemoHeader2.SETRECFILTER;
        SalesCrMemoHeader2.EmailRecords(TRUE);
        ReportSent := TRUE;
      END;

      IF NOT ReportSent AND
        (SalesCrMemoHeader."Electronic Invoicing" <> SalesCrMemoHeader."Electronic Invoicing"::Print)
      THEN BEGIN
        SalesCrMemoHeader.SendCreditMemoElectronic(FALSE,FALSE);
        ReportSent := TRUE;
      END;
    END;

    LOCAL PROCEDURE SendSalesShipmentHeader@1100528400() ReportSent : Boolean;
    VAR
      SalesShipmentHeader2@1100528400 : Record 110;
    BEGIN
      //**4PS
      SalesShptHeader.FINDFIRST;
      IF SendReportAsEmail THEN BEGIN
        SalesShipmentHeader2.COPY(SalesShptHeader);
        SalesShipmentHeader2.SETRECFILTER;
        SalesShipmentHeader2.SendRecordByEmail(FALSE);
        ReportSent := TRUE;
      END;
    END;

    LOCAL PROCEDURE SendReturnReceiptHeader@1100528401() ReportSent : Boolean;
    VAR
      ReturnReceiptHeader2@1100528400 : Record 6660;
    BEGIN
      //**4PS
      ReturnRcptHeader.FINDFIRST;
      IF SendReportAsEmail THEN BEGIN
        ReturnReceiptHeader2.COPY(ReturnRcptHeader);
        ReturnReceiptHeader2.SETRECFILTER;
        ReturnReceiptHeader2.SendRecordByEmail(FALSE);
        ReportSent := TRUE;
      END;
    END;

    LOCAL PROCEDURE DoSendReportAsEmail@6(ReportUsage@1000 : Integer;ReportId@1002 : Integer);
    VAR
      CustomReportSelection@1003 : Record 9657;
      DocumentMailing@1006 : Codeunit 260;
      ServerAttachmentFilePath@1001 : Text[250];
    BEGIN
      ServerAttachmentFilePath := SaveReportAsPdf(ReportUsage,ReportId);
      CustomReportSelection.INIT;
      CASE ReportUsage OF
        ReportSelection.Usage::"S.Shipment":
          DocumentMailing.EmailSalesShipmentFileFromOrderHeader(SalesHeader,ServerAttachmentFilePath);
        ReportSelection.Usage::"S.Invoice":
          DocumentMailing.EmailSalesInvoiceFileFromOrderHeader(SalesHeader,ServerAttachmentFilePath);
        ELSE
          DocumentMailing.EmailFileFromSalesHeader(SalesHeader,ServerAttachmentFilePath,CustomReportSelection);
      END;
    END;

    LOCAL PROCEDURE SaveReportAsPdf@9(ReportUsage@1000 : Integer;ReportId@1005 : Integer) : Text[250];
    VAR
      FileManagement@1003 : Codeunit 419;
      ServerAttachmentFilePath@1004 : Text;
    BEGIN
      ServerAttachmentFilePath := FileManagement.ServerTempFileName('pdf');

      CASE ReportUsage OF
        ReportSelection.Usage::"SM.Invoice":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesInvHeader);
        ReportSelection.Usage::"SM.Credit Memo":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesCrMemoHeader);
        ReportSelection.Usage::"S.Invoice":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesInvHeader);
        ReportSelection.Usage::"S.Cr.Memo":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesCrMemoHeader);
        ReportSelection.Usage::"S.Shipment":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesShptHeader);
        ReportSelection.Usage::"S.Ret.Rcpt.":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,ReturnRcptHeader);
      END;
      IF NOT EXISTS(ServerAttachmentFilePath) THEN
        ERROR(ServerSaveAsPdfFailedErr);

      EXIT(ServerAttachmentFilePath);
    END;

    LOCAL PROCEDURE ConfirmationMessage@4() : Text;
    BEGIN
      IF SendReportAsEmail THEN
        EXIT(PostAndEmailMsg);
      EXIT(Text001);
    END;

    BEGIN
    {
      dbeekman, 22-10-2008:
            - Report selection handled by cod229.GetReportSelection
    }
    END.
  }
}

