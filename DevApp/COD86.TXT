OBJECT Codeunit 86 Sales-Quote to Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,4PS9.00;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=VAR
            OldSalesCommentLine@1001 : Record 44;
            Cust@1008 : Record 18;
            ApprovalsMgmt@1002 : Codeunit 1535;
            SalesCalcDiscountByType@1003 : Codeunit 56;
            RecordLinkManagement@1000 : Codeunit 447;
            ShouldRedistributeInvoiceAmount@1004 : Boolean;
            lvOffAmtRec@1100485000 : Record 11012786;
            lvSalesRentalAppointmRec@1100485001 : Record 11012991;
            lvSalesRentalAppointmRec2@1100485002 : Record 11012991;
            lvSalesSetupRec@1100525000 : Record 311;
            lvArchiveManagementCU@1100525001 : Codeunit 5063;
            SalesRecipe@1100525002 : Record 11229788;
            SalesRecipeLine@1100525004 : Record 11229789;
            SalesHeaderExtension@1100525003 : Record 11071868;
          BEGIN
            TESTFIELD("Document Type","Document Type"::Quote);
            ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);

            OnCheckSalesPostRestrictions;

            Cust.GET("Sell-to Customer No.");
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
            CALCFIELDS("Amount Including VAT");
            SalesOrderHeader := Rec;
            IF GUIALLOWED AND NOT HideValidationDialog THEN
              CustCheckCreditLimit.SalesHeaderCheck(SalesOrderHeader);
            SalesOrderHeader."Document Type" := SalesOrderHeader."Document Type"::Order;

            //**4PS.sn
            LogisticsSeparated := CheckLogisticsSeparated();
            IF NOT LogisticsSeparated THEN
            //**4PS.en
              CheckAvailability(Rec);
            CheckInProgressOpportunities(Rec);

            SalesOrderHeader."No. Printed" := 0;
            SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
            SalesOrderHeader."No." := '';
            SalesOrderHeader."Quote No." := "No.";
            SalesOrderLine.LOCKTABLE;
            SalesOrderHeader.INSERT(TRUE);

            SalesOrderHeader."Elected Alternative No." := 0; //**4PS.n
            SalesOrderHeader."Order Date" := "Order Date";
            IF "Posting Date" <> 0D THEN
              SalesOrderHeader."Posting Date" := "Posting Date";
            SalesOrderHeader."Document Date" := "Document Date";
            SalesOrderHeader."Shipment Date" := "Shipment Date";
            SalesOrderHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
            SalesOrderHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
            SalesOrderHeader."Dimension Set ID" := "Dimension Set ID";

            SalesOrderHeader."Location Code" := "Location Code";
            SalesOrderHeader."Outbound Whse. Handling Time" := "Outbound Whse. Handling Time";
            SalesOrderHeader."Ship-to Name" := "Ship-to Name";
            SalesOrderHeader."Ship-to Name 2" := "Ship-to Name 2";
            SalesOrderHeader."Ship-to Address" := "Ship-to Address";
            SalesOrderHeader."Ship-to Address 2" := "Ship-to Address 2";
            SalesOrderHeader."Ship-to City" := "Ship-to City";
            SalesOrderHeader."Ship-to Post Code" := "Ship-to Post Code";
            SalesOrderHeader."Ship-to County" := "Ship-to County";
            SalesOrderHeader."Ship-to Country/Region Code" := "Ship-to Country/Region Code";
            SalesOrderHeader."Ship-to Contact" := "Ship-to Contact";

            SalesOrderHeader.Reserve := Reserve;
            SalesOrderHeader."Prepayment %" := Cust."Prepayment %";
            IF SalesOrderHeader."Posting Date" = 0D THEN
              SalesOrderHeader."Posting Date" := WORKDATE;

            //**4PS.sn
            SalesOrderHeader."Arrival Date" := "Arrival Date";
            SalesOrderHeader."Rental Starting Date" := "Rental Starting Date";
            IF SalesOrderHeader."Sales Document Type" = SalesOrderHeader."Sales Document Type"::RentalContract THEN
              SalesOrderHeader."Posting Description" := "Posting Description";
            //**4PS.en

            SalesOrderHeader.MODIFY;
            TransferQuoteToSalesOrderLines(SalesQuoteLine,Rec,SalesOrderLine,SalesOrderHeader,Cust);

            SalesSetup.GET;
            IF SalesSetup."Archive Quotes and Orders" THEN
              ArchiveManagement.ArchSalesDocumentNoConfirm(Rec);

            IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
              SalesOrderHeader."Posting Date" := 0D;
              SalesOrderHeader.MODIFY;
            END;

            SalesCommentLine.SETRANGE("Document Type","Document Type");
            SalesCommentLine.SETRANGE("No.","No.");
            IF NOT SalesCommentLine.ISEMPTY THEN BEGIN
              SalesCommentLine.LOCKTABLE;
              IF SalesCommentLine.FINDSET THEN
                REPEAT
                  OldSalesCommentLine := SalesCommentLine;
                  SalesCommentLine.DELETE;
                  SalesCommentLine."Document Type" := SalesOrderHeader."Document Type";
                  SalesCommentLine."No." := SalesOrderHeader."No.";
                  SalesCommentLine.INSERT;
                  SalesCommentLine := OldSalesCommentLine;
                UNTIL SalesCommentLine.NEXT = 0;
            END;
            RecordLinkManagement.CopyLinks(Rec,SalesOrderHeader);

            //**4PS.sn dp00116
              DocRelRec.SETRANGE("Document Type",DocRelRec."Document Type"::"Sales Quote");
              DocRelRec.SETRANGE("No.","No.");
              IF DocRelRec.FIND('-') THEN BEGIN
                REPEAT
                  DocRel1Rec.COPY(DocRelRec);
                  DocRel1Rec."Document Type" := DocRelRec."Document Type"::"Sales Order";
                  DocRel1Rec."No." := SalesOrderHeader."No.";
                  DocRel1Rec."Document No." := DocRelRec."Document No.";
                  DocRel1Rec.INSERT;
                UNTIL DocRelRec.NEXT = 0;
              END;
            //**4PS.en dp00116

            //**4PS DP00491.sn
            SalesRecipe.SETRANGE("Sales Document Type", SalesRecipe."Sales Document Type"::Quote);
            SalesRecipe.SETRANGE("Sales Document No.","No.");
            WHILE SalesRecipe.FINDFIRST DO BEGIN
              SalesRecipe.DELETE;
              SalesRecipe."Sales Document Type" := SalesRecipe."Sales Document Type"::Order;
              SalesRecipe."Sales Document No." := SalesOrderHeader."No.";
              SalesRecipe.INSERT;
            END;

            SalesRecipeLine.SETRANGE("Sales Document Type", SalesRecipeLine."Sales Document Type"::Quote);
            SalesRecipeLine.SETRANGE("Sales Document No.","No.");
            WHILE SalesRecipeLine.FINDFIRST DO BEGIN
              SalesRecipeLine.DELETE;
              SalesRecipeLine."Sales Document Type" := SalesRecipe."Sales Document Type"::Order;
              SalesRecipeLine."Sales Document No." := SalesOrderHeader."No.";
              SalesRecipeLine.INSERT;
            END;
            //**4PS DP00491.en

            //**4PS Call C027995.sn
            IF SalesHeaderExtension.GET("Document Type", "No.") THEN BEGIN
              SalesHeaderExtension.DELETE;
              SalesHeaderExtension."Document Type" := SalesOrderHeader."Document Type";
              SalesHeaderExtension."Document No." := SalesOrderHeader."No.";
              SalesHeaderExtension.INSERT;
            END;
            //**4PS Call C027995.en

            ItemChargeAssgntSales.RESET;
            ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.","No.");
            WHILE ItemChargeAssgntSales.FINDFIRST DO BEGIN
              ItemChargeAssgntSales.DELETE;
              ItemChargeAssgntSales."Document Type" := SalesOrderHeader."Document Type";
              ItemChargeAssgntSales."Document No." := SalesOrderHeader."No.";
              IF NOT (ItemChargeAssgntSales."Applies-to Doc. Type" IN
                      [ItemChargeAssgntSales."Applies-to Doc. Type"::Shipment,
                       ItemChargeAssgntSales."Applies-to Doc. Type"::"Return Receipt"])
              THEN BEGIN
                ItemChargeAssgntSales."Applies-to Doc. Type" := SalesOrderHeader."Document Type";
                ItemChargeAssgntSales."Applies-to Doc. No." := SalesOrderHeader."No.";
              END;
              ItemChargeAssgntSales.INSERT;
            END;

            MoveWonLostOpportunites(Rec,SalesOrderHeader);

            //**4PS.sn
            IF LogisticsSeparated OR
               (SalesOrderHeader."Sales Document Type" = SalesOrderHeader."Sales Document Type"::RentalContract)
            THEN BEGIN
              lvSalesRentalAppointmRec.SETRANGE("Document Type","Document Type");
              lvSalesRentalAppointmRec.SETRANGE("Document No.","No.");
              IF lvSalesRentalAppointmRec.FINDSET(TRUE,TRUE) THEN BEGIN
                REPEAT
                  lvSalesRentalAppointmRec2 := lvSalesRentalAppointmRec;
                  lvSalesRentalAppointmRec2."Document Type" := SalesOrderHeader."Document Type";
                  lvSalesRentalAppointmRec2."Document No." := SalesOrderHeader."No.";
                  lvSalesRentalAppointmRec2.INSERT;
                  lvSalesRentalAppointmRec.DELETE;
                UNTIL lvSalesRentalAppointmRec.NEXT = 0;
              END;
            END;

            IF (SalesOrderHeader."Sales Document Type" <> SalesOrderHeader."Sales Document Type"::RentalContract) THEN BEGIN
              //* At creating order, quote will be deleted. For that reason quote should be archived.
              //* Note 1: Do not call 'ArchiveSalesDocument' because it contains a question, for that reason call directly next function
              //*      2: Not for rental contract quote, because this has own setup (arch. takes place in CU11012946).
              lvSalesSetupRec.GET;
              IF lvSalesSetupRec."Archive Quote on Create Order" THEN
                lvArchiveManagementCU.StoreSalesDocument(Rec,FALSE);
            END;
            //**4PS.en

            DELETELINKS;
            DELETE;
            ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(DATABASE::"Sales Header","No.",SalesOrderHeader."No.",SalesOrderHeader.RECORDID);
            ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");

            //**4PS.sn
            //* Reset filters on these fields, because these quote lines must be deleted.
            SalesQuoteLine.SETRANGE(Optional);
            SalesQuoteLine.SETRANGE("Alternative No.");
            IF LogisticsSeparated THEN BEGIN
              IF lvOffAmtRec.GET(lvOffAmtRec."Document Type"::Quote, Rec."No.", Rec."Elected Alternative No.") THEN BEGIN
                lvOffAmtRec."Document Type" := "Document Type"::Order;
                lvOffAmtRec."Document No." := SalesOrderHeader."No.";
                lvOffAmtRec."Alternative No." := 0;
                lvOffAmtRec.INSERT;
              END;
              lvOffAmtRec.SETRANGE("Document Type", lvOffAmtRec."Document Type"::Quote);
              lvOffAmtRec.SETRANGE("Document No.", Rec."No.");
              lvOffAmtRec.DELETEALL;
            END;
            //**4PS.en
            SalesQuoteLine.DELETEALL;

            IF NOT ShouldRedistributeInvoiceAmount THEN
              SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesOrderHeader);
            //COMMIT;  //* No commit here!, this should be in calling process (already in CU 83)
            CLEAR(CustCheckCreditLimit);
            CLEAR(ItemCheckAvail);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@=An open Opportunity is linked to this Quote. The Opportunity has to be closed before the Quote can be converted to an Order. Do you want to close the Opportunity now and continue the conversion?;ENU=An open %1 is linked to this %2. The %1 has to be closed before the %2 can be converted to an %3. Do you want to close the %1 now and continue the conversion?';
      Text001@1001 : TextConst '@@@=An open Opportunity is still linked to this Quote. The conversion to an Order was aborted.;ENU=An open %1 is still linked to this %2. The conversion to an %3 was aborted.';
      SalesQuoteLine@1004 : Record 37;
      SalesLine@1005 : Record 37;
      SalesOrderHeader@1006 : Record 36;
      SalesOrderLine@1007 : Record 37;
      SalesCommentLine@1008 : Record 44;
      ItemChargeAssgntSales@1009 : Record 5809;
      Item@1100525000 : Record 27;
      SalesSetup@1100528802 : Record 311;
      DocRelRec@1100528805 : Record 11012407;
      DocRel1Rec@1100528804 : Record 11012407;
      CustCheckCreditLimit@1011 : Codeunit 312;
      ItemCheckAvail@1012 : Codeunit 311;
      ReserveSalesLine@1013 : Codeunit 99000832;
      PrepmtMgt@1016 : Codeunit 441;
      ArchiveManagement@1019 : Codeunit 5063;
      HideValidationDialog@1100528800 : Boolean;
      LogisticsSeparated@1100485000 : Boolean;

    PROCEDURE GetSalesOrderHeader@1(VAR SalesHeader2@1000 : Record 36);
    BEGIN
      SalesHeader2 := SalesOrderHeader;
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE CheckInProgressOpportunities@2(VAR SalesHeader@1000 : Record 36);
    VAR
      Opp@1001 : Record 5092;
      TempOpportunityEntry@1002 : TEMPORARY Record 5093;
    BEGIN
      Opp.RESET;
      Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
      Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
      Opp.SETRANGE("Sales Document No.",SalesHeader."No.");
      Opp.SETRANGE(Status,Opp.Status::"In Progress");
      IF Opp.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text000,TRUE,Opp.TABLECAPTION,Opp."Sales Document Type"::Quote,Opp."Sales Document Type"::Order) THEN
          ERROR('');
        TempOpportunityEntry.DELETEALL;
        TempOpportunityEntry.INIT;
        TempOpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");
        TempOpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
        TempOpportunityEntry."Contact No." := Opp."Contact No.";
        TempOpportunityEntry."Contact Company No." := Opp."Contact Company No.";
        TempOpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
        TempOpportunityEntry."Campaign No." := Opp."Campaign No.";
        TempOpportunityEntry."Action Taken" := TempOpportunityEntry."Action Taken"::Won;
        TempOpportunityEntry."Wizard Step" := 1;
        TempOpportunityEntry.INSERT;
        TempOpportunityEntry.SETRANGE("Action Taken",TempOpportunityEntry."Action Taken"::Won);
        PAGE.RUNMODAL(PAGE::"Close Opportunity",TempOpportunityEntry);
        Opp.RESET;
        Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
        Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
        Opp.SETRANGE("Sales Document No.",SalesHeader."No.");
        Opp.SETRANGE(Status,Opp.Status::"In Progress");
        IF Opp.FINDFIRST THEN
          ERROR(Text001,Opp.TABLECAPTION,Opp."Sales Document Type"::Quote,Opp."Sales Document Type"::Order);
        COMMIT;
        SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      END;
    END;

    LOCAL PROCEDURE MoveWonLostOpportunites@3(VAR SalesQuoteHeader@1000 : Record 36;VAR SalesOrderHeader@1001 : Record 36);
    VAR
      Opp@1002 : Record 5092;
      OpportunityEntry@1003 : Record 5093;
    BEGIN
      Opp.RESET;
      Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
      Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
      Opp.SETRANGE("Sales Document No.",SalesQuoteHeader."No.");
      IF Opp.FINDFIRST THEN
        IF Opp.Status = Opp.Status::Won THEN BEGIN
          Opp."Sales Document Type" := Opp."Sales Document Type"::Order;
          Opp."Sales Document No." := SalesOrderHeader."No.";
          Opp.MODIFY;
          OpportunityEntry.RESET;
          OpportunityEntry.SETCURRENTKEY(Active,"Opportunity No.");
          OpportunityEntry.SETRANGE(Active,TRUE);
          OpportunityEntry.SETRANGE("Opportunity No.",Opp."No.");
          IF OpportunityEntry.FINDFIRST THEN BEGIN
            OpportunityEntry."Calcd. Current Value (LCY)" := OpportunityEntry.GetSalesDocValue(SalesOrderHeader);
            OpportunityEntry.MODIFY;
          END;
        END ELSE
          IF Opp.Status = Opp.Status::Lost THEN BEGIN
            Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
            Opp."Sales Document No." := '';
            Opp.MODIFY;
          END;
    END;

    LOCAL PROCEDURE CheckAvailability@4(SalesQuoteHeader@1000 : Record 36);
    BEGIN
      SalesQuoteLine.SETRANGE("Document Type",SalesQuoteHeader."Document Type");
      SalesQuoteLine.SETRANGE("Document No.",SalesQuoteHeader."No.");
      //SalesQuoteLine.SETRANGE(Type,SalesQuoteLine.Type::Item);  //**4PS.o
      //SalesQuoteLine.SETFILTER("No.",'<>%1','');                //**4PS.o
      SalesQuoteLine.SETFILTER("Item No.",'<>%1','');  //**4PS.n
      IF SalesQuoteLine.FINDSET THEN
        REPEAT
          IF SalesQuoteLine."Outstanding Quantity" > 0 THEN BEGIN
            SalesLine := SalesQuoteLine;
            SalesLine.VALIDATE("Reserved Qty. (Base)",0);
            SalesLine."Outstanding Quantity" -= SalesLine."Qty. to Assemble to Order";
            SalesLine."Outstanding Qty. (Base)" -= SalesLine."Qty. to Asm. to Order (Base)";
            IF GUIALLOWED AND NOT HideValidationDialog THEN
            //**4PS.sn
            BEGIN
              Item.GET(SalesLine."Item No.");
              IF NOT Item."Logistics on Component Level" THEN
                IF DoAvailCheckAndSumSameItemLine(Item."Base Unit of Measure") THEN  //*25089.n
            //**4PS.en
                  IF ItemCheckAvail.SalesLineCheck(SalesLine) THEN
                    ItemCheckAvail.RaiseUpdateInterruptedError;
            END; //**4PS.n
          END;
        UNTIL SalesQuoteLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferQuoteToSalesOrderLines@5(VAR QuoteSalesLine@1000 : Record 37;VAR QuoteSalesHeader@1001 : Record 36;VAR OrderSalesLine@1004 : Record 37;VAR OrderSalesHeader@1005 : Record 36;Customer@1002 : Record 18);
    VAR
      ATOLink@1003 : Record 904;
    BEGIN
      QuoteSalesLine.RESET;
      QuoteSalesLine.SETRANGE("Document Type",QuoteSalesHeader."Document Type");
      QuoteSalesLine.SETRANGE("Document No.",QuoteSalesHeader."No.");
      //**4PS.sn
      IF LogisticsSeparated THEN BEGIN
        QuoteSalesLine.SETRANGE(Optional,FALSE);
        QuoteSalesLine.SETRANGE("Alternative No.", QuoteSalesHeader."Elected Alternative No.");
      END;
      IF OrderSalesHeader."Sales Document Type" = OrderSalesHeader."Sales Document Type"::RentalContract THEN
        QuoteSalesLine.SETRANGE(Optional,FALSE);
      //**4PS.en
      IF QuoteSalesLine.FINDSET THEN
        REPEAT
          OrderSalesLine := QuoteSalesLine;
          OrderSalesLine."Document Type" := OrderSalesHeader."Document Type";
          OrderSalesLine."Document No." := OrderSalesHeader."No.";
          OrderSalesLine."Shortcut Dimension 1 Code" := QuoteSalesLine."Shortcut Dimension 1 Code";
          OrderSalesLine."Shortcut Dimension 2 Code" := QuoteSalesLine."Shortcut Dimension 2 Code";
          OrderSalesLine."Dimension Set ID" := QuoteSalesLine."Dimension Set ID";
          //**4PS.sn
          OrderSalesLine."Alternative No." := 0;
          //**4PS.en
          IF Customer."Prepayment %" <> 0 THEN
            OrderSalesLine."Prepayment %" := Customer."Prepayment %";
          PrepmtMgt.SetSalesPrepaymentPct(OrderSalesLine,OrderSalesHeader."Posting Date");
          OrderSalesLine.VALIDATE("Prepayment %");
          OrderSalesLine.DefaultDeferralCode;

          OrderSalesLine.INSERT;
          IF ATOLink.AsmExistsForSalesLine(QuoteSalesLine) THEN
            ATOLink.MakeAsmOrderLinkedToSalesOrderLine(QuoteSalesLine,OrderSalesLine);
          //**4PS.sn
          IF NOT LogisticsSeparated THEN BEGIN
          //**4PS.en
            ReserveSalesLine.TransferSaleLineToSalesLine(
              QuoteSalesLine,OrderSalesLine,QuoteSalesLine."Outstanding Qty. (Base)");
            ReserveSalesLine.VerifyQuantity(OrderSalesLine,QuoteSalesLine);

            IF OrderSalesLine.Reserve = OrderSalesLine.Reserve::Always THEN
              OrderSalesLine.AutoReserve;
          END; //**4PS.n
        UNTIL QuoteSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckLogisticsSeparated@1100485000() : Boolean;
    BEGIN
      //**4PS
      IF SalesOrderHeader."Sales Document Type" =
         SalesOrderHeader."Sales Document Type"::"Sales Logistics Separated"
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE DoAvailCheckAndSumSameItemLine@1210190001(ItemBaseUnit@1210190001 : Code[10]) : Boolean;
    VAR
      SalesQuoteLine2@1210190000 : Record 37;
    BEGIN
      //**4PS (25089)
      //* Check if the available check must be done. Only not if the item / variant / location is already checked on a
      //* previous line. IF more lines with the same item / variant / location then sum quantities.
      //* So the available check is done once for the total of the item/var/loc on the quote.
      SalesQuoteLine2.SETRANGE("Document Type", SalesQuoteLine."Document Type");
      SalesQuoteLine2.SETRANGE("Document No.", SalesQuoteLine."Document No.");
      SalesQuoteLine2.SETRANGE("Item No.", SalesQuoteLine."Item No.");
      SalesQuoteLine2.SETRANGE("Variant Code", SalesQuoteLine."Variant Code");
      SalesQuoteLine2.SETRANGE("Location Code", SalesQuoteLine."Location Code");
      SalesQuoteLine2.SETFILTER("Outstanding Quantity", '>%1', 0);

      SalesQuoteLine2.SETFILTER("Line No.", '<%1', SalesQuoteLine."Line No.");
      IF NOT SalesQuoteLine2.ISEMPTY THEN
        EXIT(FALSE);  //* Available already checked on a previous line of item / variant / location

      SalesQuoteLine2.SETFILTER("Line No.", '>%1', SalesQuoteLine."Line No.");
      IF SalesQuoteLine2.FINDSET THEN BEGIN   //* Sum lines of same item / variant / location
        REPEAT
          SalesQuoteLine2.VALIDATE("Reserved Qty. (Base)",0);
          IF SalesQuoteLine2."Unit of Measure Code" <> SalesLine."Unit of Measure Code" THEN BEGIN
            //* If different units then convert quantities to Base Unit
            IF SalesQuoteLine2."Unit of Measure Code" <> ItemBaseUnit THEN BEGIN
              SalesQuoteLine2.Quantity := SalesQuoteLine2."Quantity (Base)";
              SalesQuoteLine2."Outstanding Quantity" := SalesQuoteLine2."Outstanding Qty. (Base)";
            END;
            IF SalesLine."Unit of Measure Code" <> ItemBaseUnit THEN BEGIN
              SalesLine."Unit of Measure Code" := ItemBaseUnit;
              SalesLine."Qty. per Unit of Measure" := 1;
              SalesLine.Quantity := SalesQuoteLine2."Quantity (Base)";
              SalesLine."Outstanding Quantity" := SalesQuoteLine2."Outstanding Qty. (Base)";
            END;
          END;
          SalesLine.Quantity += SalesQuoteLine2.Quantity;
          SalesLine."Outstanding Quantity" += SalesQuoteLine2."Outstanding Quantity";
          SalesLine."Quantity (Base)" += SalesQuoteLine2."Quantity (Base)";
          SalesLine."Outstanding Qty. (Base)" += SalesQuoteLine2."Outstanding Qty. (Base)";
          SalesLine.Planned := (SalesLine.Planned AND SalesQuoteLine2.Planned);
        UNTIL SalesQuoteLine2.NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

