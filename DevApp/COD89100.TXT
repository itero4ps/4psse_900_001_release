OBJECT Codeunit 89100 Sales Report Text Value INFRA
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=RISA;
  }
  PROPERTIES
  {
    TableNo=11071911;
    OnRun=BEGIN
            CASE UPPERCASE("Function Name") OF
              'GETAMOUNTEXCLVAT': LfncGetAmountExclVAT(Rec,FALSE);
              'GETCREDITAMOUNTEXCLVAT': LfncGetAmountExclVAT(Rec,TRUE);
              'GETVATCODE': LfncGetVATCode(Rec);
              'GETVATPERCENTAGE': LfncGetVATPercentage(Rec);
              'GETVATAMOUNT': LfncGetVATAmount(Rec,FALSE);
              'GETCREDITVATAMOUNT': LfncGetVATAmount(Rec,TRUE);
              'GETAMOUNTINCLVAT': LfncGetAmountInclVAT(Rec,FALSE);
              'GETCREDITAMOUNTINCLVAT': LfncGetAmountInclVAT(Rec,TRUE);
            END;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE LfncGetAmountExclVAT@1100525003(VAR PrecSalesReportTextValue@1100525000 : Record 11071911;PbooCredit@1000 : Boolean);
    VAR
      LrecGenericSalesHeader@1100525001 : Record 11071888;
    BEGIN
      LfncGetCurrGenericSalesHeader(PrecSalesReportTextValue, LrecGenericSalesHeader);
      IF PbooCredit THEN
        PrecSalesReportTextValue.Result := '-' + FORMAT(LrecGenericSalesHeader.Amount,0,'<integer thousand><decimal,3>')
      ELSE
        PrecSalesReportTextValue.Result := FORMAT(LrecGenericSalesHeader.Amount,0,'<integer thousand><decimal,3>');
    END;

    LOCAL PROCEDURE LfncGetVATCode@2(VAR PrecSalesReportTextValue@1000 : Record 11071911);
    VAR
      LrecGenericSalesHeader@1001 : Record 11071888;
    BEGIN
      LfncGetCurrGenericSalesHeader(PrecSalesReportTextValue, LrecGenericSalesHeader);
      PrecSalesReportTextValue.Result := LfncGetVATInfo(LrecGenericSalesHeader,1);
    END;

    LOCAL PROCEDURE LfncGetVATPercentage@3(VAR PrecSalesReportTextValue@1000 : Record 11071911);
    VAR
      LrecGenericSalesHeader@1001 : Record 11071888;
    BEGIN
      LfncGetCurrGenericSalesHeader(PrecSalesReportTextValue, LrecGenericSalesHeader);
      PrecSalesReportTextValue.Result := LfncGetVATInfo(LrecGenericSalesHeader,2);
    END;

    LOCAL PROCEDURE LfncGetVATAmount@4(VAR PrecSalesReportTextValue@1000 : Record 11071911;PbooCredit@1002 : Boolean);
    VAR
      LrecGenericSalesHeader@1001 : Record 11071888;
    BEGIN
      LfncGetCurrGenericSalesHeader(PrecSalesReportTextValue, LrecGenericSalesHeader);
      IF PbooCredit THEN
        PrecSalesReportTextValue.Result := '-' + FORMAT(LrecGenericSalesHeader.AmountVAT,0,'<integer thousand><decimal,3>')
      ELSE
        PrecSalesReportTextValue.Result := FORMAT(LrecGenericSalesHeader.AmountVAT,0,'<integer thousand><decimal,3>');
    END;

    LOCAL PROCEDURE LfncGetAmountInclVAT@5(VAR PrecSalesReportTextValue@1000 : Record 11071911;PbooCredit@1002 : Boolean);
    VAR
      LrecGenericSalesHeader@1001 : Record 11071888;
    BEGIN
      LfncGetCurrGenericSalesHeader(PrecSalesReportTextValue, LrecGenericSalesHeader);
      IF PbooCredit THEN
        PrecSalesReportTextValue.Result := '-' + FORMAT(LrecGenericSalesHeader.AmountIncludingVAT,0,'<integer thousand><decimal,3>')
      ELSE
        PrecSalesReportTextValue.Result := FORMAT(LrecGenericSalesHeader.AmountIncludingVAT,0,'<integer thousand><decimal,3>');
    END;

    LOCAL PROCEDURE LfncGetVATInfo@9(PrecGenericSalesHeader@1000 : Record 11071888;PintVATType@1001 : Integer) : Code[10];
    VAR
      LrecSalesLine@1004 : Record 37;
      LrecSalesInvLine@1003 : Record 113;
      LrecSalesCrMemoLine@1002 : Record 115;
      LcodResult@1005 : ARRAY [2] OF Code[10];
    BEGIN
      WITH PrecGenericSalesHeader DO BEGIN
        //Assuming only one VAT percentage is used per invoice
        CASE "Document Type" OF
          "Document Type"::"Pro Forma Invoice", "Document Type"::"Pro Forma Credit Memo":
            BEGIN
              LrecSalesLine.SETCURRENTKEY("Document Type", "Document No.");
              LrecSalesLine.SETRANGE("Document Type", "Document Type");
              LrecSalesLine.SETRANGE("Document No.", "No.");
              LrecSalesLine.SETFILTER("VAT Prod. Posting Group",'<>%1','');
              IF NOT LrecSalesLine.ISEMPTY THEN
                IF LrecSalesLine.FINDLAST THEN BEGIN
                  LcodResult[1] := LrecSalesLine."VAT Prod. Posting Group";
                  LcodResult[2] := FORMAT(LrecSalesLine."VAT %");
                END;
            END;
          "Document Type"::"Posted Invoice":
            BEGIN
              LrecSalesInvLine.SETCURRENTKEY("Document No.");
              LrecSalesInvLine.SETRANGE("Document No.", "No.");
              LrecSalesInvLine.SETFILTER("VAT Prod. Posting Group",'<>%1','');
              IF NOT LrecSalesInvLine.ISEMPTY THEN
                IF LrecSalesInvLine.FINDLAST THEN BEGIN
                  LcodResult[1] := LrecSalesInvLine."VAT Prod. Posting Group";
                  LcodResult[2] := FORMAT(LrecSalesInvLine."VAT %");
                END;
            END;
          "Document Type"::"Posted Credit Memo":
            BEGIN
              LrecSalesCrMemoLine.SETCURRENTKEY("Document No.");
              LrecSalesCrMemoLine.SETRANGE("Document No.", "No.");
              LrecSalesCrMemoLine.SETFILTER("VAT Prod. Posting Group",'<>%1','');
              IF NOT LrecSalesCrMemoLine.ISEMPTY THEN
                IF LrecSalesLine.FINDLAST THEN BEGIN
                  LcodResult[1] := LrecSalesCrMemoLine."VAT Prod. Posting Group";
                  LcodResult[2] := FORMAT(LrecSalesCrMemoLine."VAT %");
                END;
            END;
        END;
      END;

      EXIT(LcodResult[PintVATType]);
    END;

    LOCAL PROCEDURE LfncGetCurrGenericSalesHeader@1100525026(PrecSalesReportTextValue@1100525000 : Record 11071911;VAR PrecGenericSalesHeader@1100525007 : Record 11071888);
    VAR
      LcunSalesReportTextManagement@1100525008 : Codeunit 11012369;
    BEGIN
      LcunSalesReportTextManagement.GetCurrGenericSalesHeader(PrecSalesReportTextValue."Record ID", PrecGenericSalesHeader);
    END;

    BEGIN
    {
      Version   Developer Date       Description
      ----------------------------------------------------------------------------
      RISA      RJA       01-12-2014 Object created. Used in Std. Sales Report Text for invoices
    }
    END.
  }
}

