OBJECT Codeunit 90 Purch.-Post
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.45480,DCNL9.00.00.43402.4.04,4PS9.00;
  }
  PROPERTIES
  {
    TableNo=38;
    Permissions=TableData 17=r,
                TableData 25=m,
                TableData 36=m,
                TableData 37=m,
                TableData 38=m,
                TableData 39=imd,
                TableData 49=imd,
                TableData 93=imd,
                TableData 94=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 223=imd,
                TableData 5805=imd,
                TableData 6507=ri,
                TableData 6508=rid,
                TableData 6650=imd,
                TableData 6651=imd,
                TableData 2000000068=rimd;
    OnRun=VAR
            ItemEntryRelation@1007 : Record 6507;
            TempInvoicingSpecification@1013 : TEMPORARY Record 336;
            DummyTrackingSpecification@1014 : Record 336;
            SalesSetup@1019 : Record 311;
            SalesCommentLine@1018 : Record 44;
            SalesHeader@1041 : Record 36;
            CurrExchRate@1000 : Record 330;
            FA@1030 : Record 5600;
            FASetup@1029 : Record 5603;
            DeprBook@1028 : Record 5611;
            GLAccDoNotUseLocal@1032 : Record 15;
            VATPostingSetup@1033 : Record 325;
            TempCombinedPurchLine@1035 : TEMPORARY Record 39;
            TempVATAmountLine@1036 : TEMPORARY Record 290;
            TempVATAmountLineRemainder@1037 : TEMPORARY Record 290;
            PurchCommentLine@1038 : Record 43;
            PurchInvLine@1043 : Record 123;
            PurchCrMemoLine@1044 : Record 125;
            PurchRcptLine@1045 : Record 121;
            WhseRcptLine@1046 : Record 7317;
            WhseShptLine@1047 : Record 7321;
            PurchaseLineBackup@1006 : Record 39;
            UpdateAnalysisView@1002 : Codeunit 410;
            UpdateItemAnalysisView@1008 : Codeunit 7150;
            NoSeriesMgt@1040 : Codeunit 396;
            GenJnlCheckLine@1039 : Codeunit 11;
            GenJnlPostPreview@1001 : Codeunit 19;
            CostBaseAmount@1003 : Decimal;
            TrackingSpecificationExists@1010 : Boolean;
            EndLoop@1009 : Boolean;
            ModifyHeader@1025 : Boolean;
            TempInvoice@1024 : Boolean;
            TempRcpt@1023 : Boolean;
            TempReturn@1022 : Boolean;
            EverythingInvoiced@1026 : Boolean;
            GLEntryNo@1005 : Integer;
            BiggestLineNo@1021 : Integer;
            ICGenJnlLineNo@1004 : Integer;
            LineCount@1027 : Integer;
            WhseReference@1048 : Integer;
            PrevStatus@1020 : Option;
            RemQtyToInvoiceCurrLine@1011 : Decimal;
            RemQtyToInvoiceCurrLineBase@1012 : Decimal;
            PurchLine2@1210190002 : Record 39;
            SaveTempPurchLineRec@1100485000 : Record 39;
            lvReceiptLine@1100485014 : Record 121;
            lvPurchHeaderInv@1100485021 : Record 38;
            GetReceipts@1100485015 : Codeunit 74;
            lRecPlantSetup@1210190003 : Record 11012550;
            lvCreatePlantNo@1100485002 : Boolean;
            lvRcptCounter@1100485001 : Integer;
            lvI@1100485003 : Integer;
            lvLastRefNo@1210190000 : Code[20];
            lvPlantNo@1100485004 : Code[20];
            lvNextRcptLineNo@1100485006 : Integer;
            lBankAccountRec@1100485009 : Record 288;
            WKA@1100485008 : Boolean;
            lCheckItTxt@1100485007 : Text[3];
            SubcontracterContract@1100525004 : Record 11020635;
            ErrorCounter@1100525000 : Integer;
            ErrorTxt@1100525001 : ARRAY [99] OF Text[250];
            OnHoldCode@1100525003 : Code[3];
            SourceLink@1100525005 : RecordRef;
            TargetLink@1100525006 : RecordRef;
            DocumentLinkManagement@1100525007 : Codeunit 11012401;
            ReplaceDocLink@1210190001 : Boolean;
            lvTradeItemRec@1210190006 : Record 11012317;
            lvItemRec@1210190005 : Record 27;
            lvTariffNo@1210190004 : Code[20];
            ExpenseAllowanceSchemeEntry@1100528600 : Record 11020683;
            lvPurchRcptHeader@1100409001 : Record 120;
            lvPurchOrder@1100409000 : Record 38;
            PurchaseLine2@1100409002 : Record 39;
            Vendor@1100525002 : Record 23;
            VendPostingGr@1100525008 : Record 93;
            PurchasesPayablesSetup@1100529100 : Record 312;
          BEGIN
            OnBeforePostPurchaseDoc(Rec);

            ValidatePostingAndDocumentDate(Rec);

            //<DC>
            IF IsDocumentCaptureActive THEN BEGIN //**4PS
              PurchDocLineRelMgt.PostRelOrderLines(Rec);
              Rec.SetRelPurchHeader(RelPurchHeader);
            END;
            //</DC>
            "Receipts in Bundles" := ReceiptsInBundles;  //**4PS.n
            IF NOT SkipClearAll THEN  ////**4PS.n DP00416
              IF PreviewMode THEN BEGIN
                CLEARALL;
                PreviewMode := TRUE;
              END ELSE
                CLEARALL;

            SetReceiveMarkedOnly(Rec); //**4PS.n DP00556

            PurchHeader.COPY(Rec);
            WITH PurchHeader DO BEGIN
              CheckMandatoryHeaderFields(Rec);
              IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
                FIELDERROR("Posting Date",Text045);
              IF "Register Invoice" AND ("Last Posting No." <> '') THEN                //**4PS02.sn
                ERROR(Text11012010, "Last Posting No.", "No.");                        //**4PS02.en
              //**4PS.sn
              ReceiptForPlantOrders := '';
              TmpPlantLocChargePO.DELETEALL;  //C001519.n
              IF ("Wage Charge (to B Account)" <> 0) AND
                 (("Document Type" = "Document Type"::Invoice)) THEN
                TESTFIELD("Bank Account Code B Payments");
              IF Status = Status::Closed THEN
                FIELDERROR(Status);
              PurchHeadExtensionRec.GetPurchHeadExtension("Document Type", "No.");
              //**4PS.en

              CASE "Document Type" OF
                "Document Type"::Order:
                  Ship := FALSE;
                "Document Type"::Invoice:
                  BEGIN
                    Receive := TRUE;
                    Invoice := TRUE;
                    Ship := FALSE;
                  END;
                "Document Type"::"Return Order":
                  Receive := FALSE;
                "Document Type"::"Credit Memo":
                  BEGIN
                    Receive := FALSE;
                    Invoice := TRUE;
                    Ship := TRUE;
                  END;
              END;

              IF NOT (Receive OR Invoice OR Ship) THEN
                ERROR(
                  Text025,
                  FIELDCAPTION(Receive),FIELDCAPTION(Invoice),FIELDCAPTION(Ship));

              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;

              IF Invoice THEN
                CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,TRUE);

              CheckDim;

              CheckPostRestrictions(PurchHeader);

              CheckICDocumentDuplicatePosting(PurchHeader);

              IF Invoice THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                //**4PS.sn
                PutPromisedReceiveDateFilter(PurchLine);
                PutReceiveMarkedOnlyFilter(PurchLine); //**4PS.n DP00556
                IF "Amounts only" THEN
                  PurchLine.SETFILTER("Line Amount",'<>0')
                ELSE
                //**4PS.en
                  PurchLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
                //**4PS.sn
                  IF "Amounts only" THEN
                    PurchLine.SETFILTER("Amnt. to Invoice",'<>0')
                  ELSE
                //**4PS.en
                    PurchLine.SETFILTER("Qty. to Invoice",'<>0');
                Invoice := NOT PurchLine.ISEMPTY;
                IF Invoice AND (NOT Receive) AND
                   ("Document Type" = "Document Type"::Order)
                THEN BEGIN
                  Invoice := FALSE;
                  PurchLine.FINDSET;
                  REPEAT
                    //**4PS.sn
                    IF "Amounts only" THEN
                      Invoice := (PurchLine."Amnt. Received" - PurchLine."Amnt. Invoiced") <> 0
                    ELSE
                    //**4PS.en
                      Invoice := (PurchLine."Quantity Received" - PurchLine."Quantity Invoiced") <> 0;
                  UNTIL Invoice OR (PurchLine.NEXT = 0);
                END ELSE
                  IF Invoice AND (NOT Ship) AND
                     ("Document Type" = "Document Type"::"Return Order")
                  THEN BEGIN
                    Invoice := FALSE;
                    PurchLine.FINDSET;
                    REPEAT
                      Invoice := (PurchLine."Return Qty. Shipped" - PurchLine."Quantity Invoiced") <> 0;
                    UNTIL Invoice OR (PurchLine.NEXT = 0);
                  END;
              END;

              IF Invoice THEN BEGIN
                CopyAndCheckItemCharge(PurchHeader);
                CheckDeferralPosting(PurchHeader);
              END;

              IF Invoice AND NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
                TESTFIELD("Due Date");

              IF Receive THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");

                //**4PS.sn
                PutPromisedReceiveDateFilter(PurchLine);
                PutReceiveMarkedOnlyFilter(PurchLine); //**4PS.n DP00556
                IF "Agreed Amount" <> 0 THEN BEGIN
                  PurchLine."Document Type" := "Document Type";
                  PurchLine."Document No." := "No.";
                  PurchLine.CALCFIELDS("Balance Excl. VAT");
                  IF "Agreed Amount" <> PurchLine."Balance Excl. VAT" THEN
                    FIELDERROR("Agreed Amount",Text11012004);
                END;
                IF "Amounts only" THEN
                  PurchLine.SETFILTER("Line Amount",'<>0')
                ELSE
                //**4PS.en
                  PurchLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" = "Document Type"::Order THEN
                  //**4PS.sn
                  IF "Amounts only" THEN
                    PurchLine.SETFILTER("Amnt. to Receive",'<>0')
                  ELSE
                  //**4PS.en
                    PurchLine.SETFILTER("Qty. to Receive",'<>0');
                PurchLine.SETRANGE("Receipt No.",'');
                Receive := PurchLine.FINDFIRST;
                WhseReceive := TempWhseRcptHeader.FINDFIRST;
                WhseShip := TempWhseShptHeader.FINDFIRST;
                InvtPickPutaway := WhseReference <> 0;
                IF Receive THEN BEGIN
                  CheckTrackingSpecification(PurchLine);
                  CheckReasonCodeFGases(PurchLine);
                  CheckPostingReceiptAllowed(PurchLine); //**4PS.n DP00904
                END;
                IF Receive AND NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
                  CheckWarehouse(PurchLine);
              END;

              IF Ship THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PutPromisedReceiveDateFilter(PurchLine); //**4PS.n
                PutReceiveMarkedOnlyFilter(PurchLine); //**4PS.n DP00556
                PurchLine.SETFILTER(Quantity,'<>0');
                PurchLine.SETFILTER("Return Qty. to Ship",'<>0');
                PurchLine.SETRANGE("Return Shipment No.",'');
                Ship := PurchLine.FINDFIRST;
                WhseReceive := TempWhseRcptHeader.FINDFIRST;
                WhseShip := TempWhseShptHeader.FINDFIRST;
                InvtPickPutaway := WhseReference <> 0;
                IF Ship THEN BEGIN
                  CheckTrackingSpecification(PurchLine);
                  CheckReasonCodeFGases(PurchLine);
                END;
                IF Ship AND NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
                  CheckWarehouse(PurchLine);
              END;

              IF NOT (Receive OR Invoice OR Ship) THEN
                IF NOT OnlyAssgntPosting THEN
                  //ERROR(Text001);  //**4PS.o
                  //**4PS.sn
                  IF gNoErrorNothingToPost THEN
                    EXIT
                  ELSE
                    ERROR(Text001);
                  //**4PS.en

              IF Invoice THEN BEGIN
                //**4PS.sn
                //kk.sn, 22-11-2010
                OnHoldCode := DetermineOnHoldCode;
                IF OnHoldCode <> "On Hold" THEN BEGIN
                  VALIDATE("On Hold", OnHoldCode);
                  ModifyHeader := TRUE;
                END;
                //kk.en
                Vendor.GET("Buy-from Vendor No.");
                WKA := "Subcontracting Invoice" AND NOT Vendor."Security Fund";
                IF WKA THEN BEGIN
                  CALCFIELDS(Amount);
                  IF "Labor Amount" > Amount THEN
                    ERROR(Text11012002,FIELDCAPTION("Labor Amount"),FIELDCAPTION(Amount), "Document Type", "No.");

                END;

                IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                  PurchSetup.GET;

                END;
                //**4PS.sn retention
                DocumentRetentionAmount := 0; //call 27569
                RetentionType := RetentionType::"No Retention";
                IF ("Subcontract No." <> '') AND ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN BEGIN
                  RetentionType := RetentionType::Contract;
                  TESTFIELD("Prices Including VAT", FALSE);
                  SubcontracterContract.GET("Buy-from Vendor No.", "Subcontract No.");
                  TESTFIELD("Currency Code", SubcontracterContract."Currency Code");

                  Vendor.TESTFIELD("Vendor Posting Group");
                  VendPostingGr.GET(Vendor."Vendor Posting Group");

                  PurchLine.RESET;
                  PurchLine.SETRANGE("Document Type","Document Type");
                  PurchLine.SETRANGE("Document No.","No.");
                  IF PurchLine.FIND('-') THEN REPEAT
                    IF PurchLine.Type <> PurchLine.Type::" " THEN
                      IF PurchLine.ReleaseRetention THEN BEGIN
                        PurchLine.TESTFIELD("Applies-to Retention ID");
                        VendPostingGr.TESTFIELD("Retention Suspense Acc.");
                        PurchLine.TESTFIELD(Type, PurchLine.Type::"G/L Account");
                        PurchLine.TESTFIELD("No.", VendPostingGr."Retention Suspense Acc.");
                        PurchLine.TESTFIELD("Job No.");
                        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Full VAT" THEN
                          PurchLine.FIELDERROR("VAT Calculation Type");
                      END ELSE BEGIN
                        IF (PurchLine."VAT Calculation Type" <> PurchLine."VAT Calculation Type"::"Full VAT") THEN
                          PurchLine.TESTFIELD("Job No.", "Job No.");
                        IF (PurchLine."No." = VendPostingGr."Retention Suspense Acc.") AND
                           (VendPostingGr."Retention Suspense Acc." <> '')
                        THEN
                          PurchLine.FIELDERROR("No.",
                            STRSUBSTNO(Text11012018,PurchLine.FIELDCAPTION("No."),VendPostingGr."Retention Suspense Acc."));
                        DocumentRetentionAmount := DocumentRetentionAmount + PurchLine.RetentionAmount(0);
                      END;
                  UNTIL PurchLine.NEXT = 0;
                END;
                //**4PS.en

                // Call 28178.sn
                IF CheckIntrastat THEN BEGIN
                  IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
                    PurchLine.RESET;
                    PurchLine.SETRANGE("Document Type","Document Type");
                    PurchLine.SETRANGE("Document No.","No.");
                    PurchLine.SETRANGE("Cost Type", PurchLine."Cost Type"::Material);
                    PurchLine.SETFILTER(Type, '<>%1', PurchLine.Type::" ");
                    PurchLine.SETFILTER("Tariff No.", '=%1', '');
                    IF PurchLine.FIND('-') THEN
                      REPEAT
                        lvTariffNo := '';
                        IF PurchLine."Trade Item" <> '' THEN BEGIN
                          IF NOT lvTradeItemRec.GET(PurchLine."Vendor (Trade Item)", PurchLine."Trade Item") THEN
                            lvTradeItemRec.INIT;
                          lvTariffNo := lvTradeItemRec."CBS Code";
                        END;

                        IF (lvTariffNo = '') AND (PurchLine."Item No." <> '') THEN BEGIN
                          IF NOT lvItemRec.GET(PurchLine."Item No.") THEN
                            lvItemRec.INIT;
                          lvTariffNo := lvItemRec."Tariff No.";
                        END;

                        IF lvTariffNo = '' THEN
                          PurchLine.TESTFIELD("Tariff No.");
                      UNTIL PurchLine.NEXT = 0;
                END;
                // Call 28178.en

                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PutPromisedReceiveDateFilter(PurchLine); //**4PS.n
                PutReceiveMarkedOnlyFilter(PurchLine); //**4PS.n DP00556
                PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN
                  REPEAT
                    SalesOrderLine.GET(
                      SalesOrderLine."Document Type"::Order,
                      PurchLine."Sales Order No.",PurchLine."Sales Order Line No.");
                    IF Receive AND
                       Invoice AND
                       (PurchLine."Qty. to Invoice" <> 0) AND
                       (PurchLine."Qty. to Receive" <> 0)
                    THEN
                      ERROR(Text002);
                    IF ABS(PurchLine."Quantity Received" - PurchLine."Quantity Invoiced") <
                       ABS(PurchLine."Qty. to Invoice")
                    THEN BEGIN
                      PurchLine."Qty. to Invoice" := PurchLine."Quantity Received" - PurchLine."Quantity Invoiced";
                      PurchLine."Qty. to Invoice (Base)" := PurchLine."Qty. Received (Base)" - PurchLine."Qty. Invoiced (Base)";
                    END;
                    IF ABS(PurchLine.Quantity - (PurchLine."Qty. to Invoice" + PurchLine."Quantity Invoiced")) <
                       ABS(SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced")
                    THEN
                      ERROR(
                        Text003 +
                        Text004,
                        PurchLine."Sales Order No.");
                  UNTIL PurchLine.NEXT = 0;
              END;

              InitProgressWindow(PurchHeader);

              InventSetupRec.GET;  //**4PS.n
              GetGLSetup;
              PurchSetup.GET;
              GetCurrency;

              IF Invoice AND PurchSetup."Ext. Doc. No. Mandatory" THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                  TESTFIELD("Vendor Invoice No.")
                ELSE
                  TESTFIELD("Vendor Cr. Memo No.");

              IF Receive AND ("Receiving No." = '') THEN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice")
                THEN BEGIN
                  TESTFIELD("Receiving No. Series");
                  "Receiving No." := NoSeriesMgt.GetNextNo("Receiving No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;

                  //**4PS.sn
                  IF ("Induction Note No." <> '') THEN BEGIN
                    PurchRcptHeader.SETRANGE("Induction Note No.","Induction Note No.");
                    IF PurchRcptHeader.FIND('-') THEN
                      IF NOT CONFIRM(STRSUBSTNO(
                        Text11012003,
                        PurchHeader.FIELDCAPTION("Induction Note No."),
                        PurchHeader."Induction Note No.",
                        "No.",
                        PurchRcptHeader."No."),FALSE)
                      THEN
                        EXIT;
                  END;
                  //**4PS.en
                END;

              IF Ship AND ("Return Shipment No." = '') THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND PurchSetup."Return Shipment on Credit Memo")
                THEN BEGIN
                  TESTFIELD("Return Shipment No. Series");
                  "Return Shipment No." := NoSeriesMgt.GetNextNo("Return Shipment No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              //IF Invoice AND ("Posting No." = '') THEN BEGIN                          //**4PS02.o
              IF (Invoice OR "Register Invoice") AND ("Posting No." = '') THEN BEGIN    //**4PS02.n
                IF ("No. Series" <> '') OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN
                  TESTFIELD("Posting No. Series");
                IF ("No. Series" <> "Posting No. Series") OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN BEGIN
                  IF NOT PreviewMode THEN BEGIN
                    "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE);
                    ModifyHeader := TRUE;
                  END ELSE
                    "Posting No." := '***';
                END;
              END;

              //**4PS.sn
              IF "Receipts in Bundles" THEN
                ModifyHeader := TRUE;
              //**4PS.en

              IF NOT ItemChargeAssgntOnly THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PutPromisedReceiveDateFilter(PurchLine); //**4PS.n
                PutReceiveMarkedOnlyFilter(PurchLine); //**4PS.n DP00556
                PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN BEGIN
                  DropShipOrder := TRUE;
                  IF Receive THEN
                    REPEAT
                      IF SalesOrderHeader."No." <> PurchLine."Sales Order No." THEN BEGIN
                        SalesOrderHeader.GET(
                          SalesOrderHeader."Document Type"::Order,
                          PurchLine."Sales Order No.");
                        SalesOrderHeader.TESTFIELD("Bill-to Customer No.");
                        SalesOrderHeader.Ship := TRUE;
                        CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesOrderHeader);
                        IF SalesOrderHeader."Shipping No." = '' THEN BEGIN
                          SalesOrderHeader.TESTFIELD("Shipping No. Series");
                          SalesOrderHeader."Shipping No." :=
                            NoSeriesMgt.GetNextNo(SalesOrderHeader."Shipping No. Series","Posting Date",TRUE);
                          SalesOrderHeader.MODIFY;
                          ModifyHeader := TRUE;
                        END;
                      END;
                    UNTIL PurchLine.NEXT = 0;
                END;
              END;
              OnBeforePostCommitPurchaseDoc(Rec,GenJnlPostLine,PreviewMode,ModifyHeader);
              IF NOT PreviewMode AND ModifyHeader THEN BEGIN
                MODIFY;
                COMMIT;
              END;

              IF PurchSetup."Calc. Inv. Discount" AND
                 (Status <> Status::Open) AND
                 NOT ItemChargeAssgntOnly
              THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.FINDFIRST;
                TempInvoice := Invoice;
                TempRcpt := Receive;
                TempReturn := Ship;
                PurchCalcDisc.RUN(PurchLine);
                GET("Document Type","No.");
                Invoice := TempInvoice;
                Receive := TempRcpt;
                Ship := TempReturn;
                IF NOT PreviewMode THEN
                  COMMIT;
              END;

              IF (Status = Status::Open) OR (Status = Status::"Pending Prepayment") THEN BEGIN
                TempInvoice := Invoice;
                TempRcpt := Receive;
                TempReturn := Ship;
                PrevStatus := Status;
                CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
                TESTFIELD(Status,Status::Released);
                Status := PrevStatus;
                Invoice := TempInvoice;
                Receive := TempRcpt;
                Ship := TempReturn;
                IF PreviewMode AND ("Posting No." = '') THEN
                  "Posting No." := '***';
                IF NOT PreviewMode THEN BEGIN
                  MODIFY;
                  COMMIT;
                END;
                Status := Status::Released;
              END;

              IF Receive OR Ship THEN
                ArchiveUnpostedOrder(PurchHeader);

              CheckICPartnerBlocked(PurchHeader);
              SendICDocument(PurchHeader,ModifyHeader);
              UpdateHandledICInboxTransaction(PurchHeader);

              LockTables;

              SourceCodeSetup.GET;
              SrcCode := SourceCodeSetup.Purchases;

              // Insert receipt header
              //IF Receive THEN BEGIN //**4PS.o
              //**4PS.sn
              IF "Receipts in Bundles" THEN
                ReceiptHeaderExists := PurchRcptHeader.GET("Receiving No.");
              IF Receive AND NOT ReceiptHeaderExists THEN BEGIN
              //**4PS.en
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice")
                THEN BEGIN
                  IF DropShipOrder THEN BEGIN
                    PurchRcptHeader.LOCKTABLE;
                    PurchRcptLine.LOCKTABLE;
                    SalesShptHeader.LOCKTABLE;
                    SalesShptLine.LOCKTABLE;
                  END;
                  InsertReceiptHeader(PurchHeader,PurchRcptHeader);
                END;
                IF SalesHeader.GET("Document Type",PurchLine."Sales Order No.") THEN
                  ServItemMgt.CopyReservationEntry(SalesHeader);
              END;
              // Insert return shipment header
              IF Ship THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND PurchSetup."Return Shipment on Credit Memo")
                THEN
                  InsertReturnShipmentHeader(PurchHeader,ReturnShptHeader);

              // Insert invoice header or credit memo header
              IF Invoice THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                  InsertInvoiceHeader(PurchHeader,PurchInvHeader);
                  GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
                  GenJnlLineDocNo := PurchInvHeader."No.";
                  GenJnlLineExtDocNo := "Vendor Invoice No.";
                  //**4PS.sn
                  ReplaceDocLink := TRUE;
                  IF PurchSetup."Block Invoices Mandatory"  AND (NOT Vendor."Ignore Block Inv. Mandatory") THEN BEGIN
                    TESTFIELD("On Hold");
                    TESTFIELD("Approvement Initials");
                  END;

            //FIXME Approvals
            {
                  IF NOT ApprovalMgt.OpenApprovalEntryPurchInv(PurchInvHeader) THEN BEGIN
                    IF ("On Hold" <> '') AND ("Invoice Lines Input") THEN BEGIN
                      OnHoldRec.GET("On Hold");
                      IF NOT OnHoldRec."Remain On Hold" THEN BEGIN
                        IF NOT DCKeepOnHold THEN BEGIN
                          PurchInvHeader."On Hold" :=  '';
                          PurchInvHeader."Approvement Initials" := '';
                          PurchInvHeader.MODIFY;
                          "On Hold" := '';
                          "Approvement Initials" := '';
                          ModifyHeader := TRUE;
                        END;
                      END;
                    END;
                  END;
            }
                  //**4PS.en
                END ELSE BEGIN // Credit Memo
                  InsertCrMemoHeader(PurchHeader,PurchCrMemoHeader);
                  GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
                  GenJnlLineDocNo := PurchCrMemoHeader."No.";
                  GenJnlLineExtDocNo := "Vendor Cr. Memo No.";
                  //**4PS.sn
                  ReplaceDocLink := TRUE;
                  IF PurchSetup."Block Invoices Mandatory"  AND (NOT Vendor."Ignore Block Inv. Mandatory") THEN BEGIN
                    TESTFIELD("On Hold");
                    TESTFIELD("Approvement Initials");
                  END;

            //FIXME Approvals
            {
                  IF NOT ApprovalMgt.OpenApprovalEntryPurchCrm(PurchCrMemoHeader) THEN BEGIN
                    IF ("On Hold" <> '') AND ("Invoice Lines Input") THEN BEGIN
                      OnHoldRec.GET("On Hold");
                      IF NOT OnHoldRec."Remain On Hold" THEN BEGIN
                        IF NOT DCKeepOnHold THEN BEGIN
                          PurchCrMemoHeader."On Hold" :=  '';
                          PurchCrMemoHeader."Approvement Initials" := '';
                          PurchCrMemoHeader.MODIFY;
                          "On Hold" := '';
                          "Approvement Initials" := '';
                          ModifyHeader := TRUE;
                        END;
                      END;
                    END;
                  END;
            }
                  //**4PS.en
                END;

              //**4PS02.sn
              //Insert header for invoice to approve
              IF "Register Invoice" AND ("Document Type" = "Document Type"::Order) THEN BEGIN
                lvPurchHeaderInv.INIT;
                lvPurchHeaderInv.TRANSFERFIELDS(PurchHeader);
                lvPurchHeaderInv."Document Type" := lvPurchHeaderInv."Document Type"::Invoice;
                lvPurchHeaderInv."Receiving No." := '';
                lvPurchHeaderInv."Last Receiving No." := '';
                lvPurchHeaderInv."No." := "Posting No.";
                lvPurchHeaderInv."No. Series" := "No. Series";
                lvPurchHeaderInv."Related Purch. Order No." := "No.";
                lvPurchHeaderInv.Status := lvPurchHeaderInv.Status::Open;
                lvPurchHeaderInv."Invoice Lines Input" := TRUE;
                IF GUIALLOWED THEN
                  Window.UPDATE(1,STRSUBSTNO(Text010,"Document Type","No.",lvPurchHeaderInv."No."));
                lvPurchHeaderInv."No. Printed" := 0;

                lvPurchHeaderInv.INSERT;
                PurchHeadExtensionRec.CopyPurchHeadExtension("Document Type","No.",lvPurchHeaderInv."Document Type",lvPurchHeaderInv."No.");

                IF PurchSetup."Copy Comments Order to Invoice" THEN
                  CopyCommentLines(
                    PurchCommentLine."Document Type"::Order,PurchCommentLine."Document Type"::Invoice,
                    "No.",lvPurchHeaderInv."No.");
              END;
              //**4PS02.en

              //**4PS.sn
              IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN BEGIN
                IF NOT InvoiceMarginCheck() THEN
                  FIELDERROR("Amount incl. VAT",Text11012004);
                IF "Manually VAT Posting" THEN BEGIN
                  PurchLine."Document Type" := "Document Type";
                  PurchLine."Document No." := "No.";
                  PurchLine.CALCFIELDS("Balance Excl. VAT");
                  IF "Amount excl. VAT" <> PurchLine."Balance Excl. VAT" THEN
                    FIELDERROR("Amount excl. VAT", Text11012004);
                END;
              END;
              //**4PS.en

              UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);

              // Lines
              TempDeferralHeader.DELETEALL;
              TempDeferralLine.DELETEALL;
              InvPostingBuffer[1].DELETEALL;
              DropShptPostBuffer.DELETEALL;
              //**4PS.sn
              SurchargePostingBuffer[1].DELETEALL;
              RequisitionPostingBuffer[1].DELETEALL;
              ComplWIPPostingBuffer[1].DELETEALL;
              RetentionPostingBuffer[1].DELETEALL;
              //**4PS.en
              EverythingInvoiced := TRUE;

              //**4PS.sn, RFC 337
              IF ("Document Type" = "Document Type"::Invoice) AND("Related Purch. Order No." <> '') THEN
                FillRetentionPostingBufferWar(PurchHeader);
              //**4PS.en

              PurchLine.RESET;
              PurchLine.SETRANGE("Document Type","Document Type");
              PurchLine.SETRANGE("Document No.","No.");
              PutPromisedReceiveDateFilter(PurchLine); //**4PS.n
              PutReceiveMarkedOnlyFilter(PurchLine); //**4PS.n DP00556
              LineCount := 0;
              RoundingLineInserted := FALSE;
              MergePurchLines(PurchHeader,PurchLine,TempPrepmtPurchLine,TempCombinedPurchLine);
              AdjustFinalInvWith100PctPrepmt(TempCombinedPurchLine);

              TempVATAmountLineRemainder.DELETEALL;
              PurchLine.CalcVATAmountLines(1,PurchHeader,TempCombinedPurchLine,TempVATAmountLine);

              PurchaseLinesProcessed := FALSE;
              IF PurchLine.FINDSET THEN
                REPEAT
                  IF PurchLine.Type = PurchLine.Type::Item THEN
                    DummyTrackingSpecification.CheckItemTrackingQuantity(
                      DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",
                      PurchLine."Qty. to Receive (Base)",PurchLine."Qty. to Invoice (Base)",Receive,Invoice);
                  //**4PS.so
                  //IF PurchLine."Job No." <> '' THEN
                  //  PurchLine.TESTFIELD("Job Task No.");
                  //**4PS.eo
                  ItemJnlRollRndg := FALSE;
                  LineCount := LineCount + 1;
                  IF GUIALLOWED THEN
                    Window.UPDATE(2,LineCount);

                  //**4PS.sn
                  IF ("Document Type" = "Document Type"::Order) AND (PurchLine."Employee No." <> '') THEN BEGIN
                    //For (rental)orders use posting date of line instead of posting date in header
                    IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
                      PurchLine.FIELDERROR("Posting Date",Text045);
                  END ELSE
                    IF PurchLine."Posting Date" <> "Posting Date" THEN BEGIN
                      //Always copy posting date header
                      PurchLine."Posting Date" := "Posting Date";
                      IF NOT RoundingLineInserted THEN BEGIN
                        //**4PS.sn
                        PurchLine."Modified by" := USERID; //DP00469
                        PurchLine."Last Date Modified" := TODAY;//DP00469
                        //**4PS.en
                        //C021346.sn
                        //When using prepayment, PurchLine may not exist in database.
                        IF PurchaseLine2.GET(
                          PurchLine."Document Type", PurchLine."Document No.", PurchLine."Line No.")
                        THEN
                        //C021346.en
                          PurchLine.MODIFY;
                      END;
                    END;
                  IF PurchLine."Qty. to Receive" <> 0 THEN
                    PurchLine.CheckSigns;

                  lvCheckCompanyIC(PurchLine);
                  IF PurchLine."Job No." <> '' THEN BEGIN
                    ProjRec.GET(PurchLine."Job No.");
                    ProjRec.TESTFIELD("Project Type");
                    ProjTypeRec.GET(ProjRec."Project Type");
                    JobSetupRec.GET;
                    IF CheckStatusProjectAndService THEN
                      PurchLine.CheckProjectStatus(TRUE);
                    //IF JobSetupRec."Posting Element Mandatory" THEN     //**4PS03.o
                    IF ProjRec."Posting Element Mandatory" THEN           //**4PS03.n
                      PurchLine.TESTFIELD(Element);
                  END;
                  IF PurchLine."Service Order No." <> '' THEN
                    IF CheckStatusProjectAndService THEN
                      PurchLine.CheckServiceOrderStatus(TRUE);
                  IF (PurchLine."Plant Type" <> '') THEN BEGIN  //*33895.n
                    PurchLine.TESTFIELD("Cost Component Plant");
                    PurchLine.ValidatePlantNo(); //**4PS,SR, 05-12-13 Call C004021
                  END;
                  //**4PS.en

                  IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                    PurchLine.TESTFIELD(Amount);
                    PurchLine.TESTFIELD("Job No.",'');
                  END;

                  IF PurchLine.Type = PurchLine.Type::Item THEN
                    CostBaseAmount := PurchLine."Line Amount";
                  UpdateQtyPerUnitOfMeasure(PurchLine);
                  IF PurchLine.Type = PurchLine.Type::"Fixed Asset" THEN BEGIN
                    PurchLine.TESTFIELD("Job No.",'');

                    //**4PS.sn
                    PurchLine.TESTFIELD("Receiving Company",'');
                    //IF (PurchLine."No." = '') AND PurchLine.CheckPlantCreateFAOnReceipt() THEN BEGIN  //26690.o
                    //26690.sn
                    IF ((PurchLine."No." = '') AND PurchLine.CheckPlantCreateFAOnReceipt()) OR
                       ((PurchLine."No." <> '') AND PlantReceivedAndCreatedOnOrder(PurchLine))
                    THEN BEGIN
                    //26690.en
                      IF PurchLine."Depreciation Book Code" = '' THEN BEGIN
                        DeprBook.INIT;
                        DeprBook.Code := ''
                      END ELSE BEGIN
                        PurchLine.TESTFIELD("Depreciation Book Code");
                        PurchLine.TESTFIELD("FA Posting Type");
                        DeprBook.GET(PurchLine."Depreciation Book Code");
                      END;
                    END ELSE BEGIN
                    //**4PS.en
                      PurchLine.TESTFIELD("Depreciation Book Code");
                      PurchLine.TESTFIELD("FA Posting Type");
                      FA.GET(PurchLine."No.");
                      DeprBook.GET(PurchLine."Depreciation Book Code");
                      FA.TESTFIELD("Budgeted Asset",FALSE);
                      IF PurchLine."Budgeted FA No." <> '' THEN BEGIN
                        FA.GET(PurchLine."Budgeted FA No.");
                        FA.TESTFIELD("Budgeted Asset",TRUE);
                      END;
                    END;  //**4PS.n
                    IF PurchLine."FA Posting Type" = PurchLine."FA Posting Type"::Maintenance THEN BEGIN
                      PurchLine.TESTFIELD("Insurance No.",'');
                      PurchLine.TESTFIELD("Depr. until FA Posting Date",FALSE);
                      PurchLine.TESTFIELD("Depr. Acquisition Cost",FALSE);
                      DeprBook.TESTFIELD("G/L Integration - Maintenance",TRUE);
                    END;
                    IF PurchLine."FA Posting Type" = PurchLine."FA Posting Type"::"Acquisition Cost" THEN BEGIN
                      PurchLine.TESTFIELD("Maintenance Code",'');
                      IF DeprBook.Code <> '' THEN  //**4PS.n
                        DeprBook.TESTFIELD("G/L Integration - Acq. Cost",TRUE);
                    END;
                    IF PurchLine."Insurance No." <> '' THEN BEGIN
                      FASetup.GET;
                      FASetup.TESTFIELD("Insurance Depr. Book",PurchLine."Depreciation Book Code");
                    END;
                  END ELSE BEGIN
                    PurchLine.TESTFIELD("Depreciation Book Code",'');
                    PurchLine.TESTFIELD("FA Posting Type",0);
                    PurchLine.TESTFIELD("Maintenance Code",'');
                    PurchLine.TESTFIELD("Insurance No.",'');
                    PurchLine.TESTFIELD("Depr. until FA Posting Date",FALSE);
                    PurchLine.TESTFIELD("Depr. Acquisition Cost",FALSE);
                    PurchLine.TESTFIELD("Budgeted FA No.",'');
                    PurchLine.TESTFIELD("FA Posting Date",0D);
                    PurchLine.TESTFIELD("Salvage Value",0);
                    PurchLine.TESTFIELD("Duplicate in Depreciation Book",'');
                    PurchLine.TESTFIELD("Use Duplication List",FALSE);
                  END;

                  CASE "Document Type" OF
                    "Document Type"::Order:
                      PurchLine.TESTFIELD("Return Qty. to Ship",0);
                    "Document Type"::Invoice:
                      BEGIN
                        IF PurchLine."Receipt No." = '' THEN
                          PurchLine.TESTFIELD("Qty. to Receive",PurchLine.Quantity);
                        PurchLine.TESTFIELD("Return Qty. to Ship",0);
                        PurchLine.TESTFIELD("Qty. to Invoice",PurchLine.Quantity);
                      END;
                    "Document Type"::"Return Order":
                      PurchLine.TESTFIELD("Qty. to Receive",0);
                    "Document Type"::"Credit Memo":
                      BEGIN
                        IF PurchLine."Return Shipment No." = '' THEN
                          PurchLine.TESTFIELD("Return Qty. to Ship",PurchLine.Quantity);
                        //PurchLine.TESTFIELD("Qty. to Receive",0); //**4PS.o
                        PurchLine.TESTFIELD("Qty. to Invoice",PurchLine.Quantity);
                      END;
                  END;


                  IF NOT (Receive OR RoundingLineInserted) THEN BEGIN
                    PurchLine."Qty. to Receive" := 0;
                    PurchLine."Qty. to Receive (Base)" := 0;
                  END;

                  IF NOT (Ship OR RoundingLineInserted) THEN BEGIN
                    PurchLine."Return Qty. to Ship" := 0;
                    PurchLine."Return Qty. to Ship (Base)" := 0;
                  END;

                  //**4PS.so
                  //IF ("Document Type" = "Document Type"::Invoice) AND (PurchLine."Receipt No." <> '') THEN BEGIN
                  //**4PS.eo
                  //**4PS.sn
                  IF ("Document Type" = "Document Type"::Order) AND
                     ("Purchase Order Type" = "Purchase Order Type"::"Return Order") AND
                     (PurchLine.Type <> PurchLine.Type::" ")
                  THEN BEGIN
                    IF NOT "Amounts only" THEN BEGIN
                      IF PurchLine.Quantity >= 0 THEN BEGIN
                        IF NOT PurchLine.CheckReturnOrderAdminCostLine(PurchHeader, PurchLine) THEN
                          PurchLine.FIELDERROR(Quantity, Text11012008);
                      END;
                      IF (PurchLine.Quantity < 0) AND (NOT PurchLine."Vendor Charge") THEN
                        IF PurchasesPayablesSetup.GET THEN
                          IF NOT PurchasesPayablesSetup."Return Reason Not Mandatory" THEN
                            PurchLine.TESTFIELD("Return Reason Code");
                    END ELSE BEGIN
                      IF PurchLine."Line Amount" >= 0 THEN
                        PurchLine.FIELDERROR("Line Amount", Text11012008);
                      IF (NOT PurchLine."Vendor Charge") THEN
                        IF PurchasesPayablesSetup.GET THEN
                          IF NOT PurchasesPayablesSetup."Return Reason Not Mandatory" THEN
                            PurchLine.TESTFIELD("Return Reason Code");
                    END;
                  END;

                  PurchLine.CompletionControl(PurchLine, ErrorCounter, ErrorTxt);
                  IF ErrorCounter > 0 THEN
                    ERROR(Text11012013, PurchLine."Document No.", PurchLine."Line No.", ErrorTxt[1]);

                  IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                     (PurchLine."Receipt No." <> '')) THEN
                  BEGIN
                    PurchLine."Amnt. to Receive" := 0;
                  //**4PS.en
                    PurchLine."Quantity Received" := PurchLine.Quantity;
                    PurchLine."Qty. Received (Base)" := PurchLine."Quantity (Base)";
                    PurchLine."Qty. to Receive" := 0;
                    PurchLine."Qty. to Receive (Base)" := 0;
                  END;

                  IF ("Document Type" = "Document Type"::"Credit Memo") AND (PurchLine."Return Shipment No." <> '')
                  THEN BEGIN
                    PurchLine."Return Qty. Shipped" := PurchLine.Quantity;
                    PurchLine."Return Qty. Shipped (Base)" := PurchLine."Quantity (Base)";
                    PurchLine."Return Qty. to Ship" := 0;
                    PurchLine."Return Qty. to Ship (Base)" := 0;
                  END;

                  IF Invoice THEN BEGIN
                    //**4PS.sn
                    //No Test for credit memo's or Amounts only.
                    IF ("Document Type" <> "Document Type"::"Credit Memo") AND NOT "Amounts only" THEN
                    //**4PS.en
                      IF ABS(PurchLine."Qty. to Invoice") > ABS(PurchLine.MaxQtyToInvoice) THEN
                        PurchLine.InitQtyToInvoice;
                  END ELSE BEGIN
                    PurchLine."Qty. to Invoice" := 0;
                    PurchLine."Qty. to Invoice (Base)" := 0;
                    PurchLine."Amnt. to Invoice" := 0; //**4PS.n
                  END;

                  //**4PS.sn
                  IF "Amounts only" THEN BEGIN
            //      IF PurchLine."Amnt. to Invoice" + PurchLine."Amnt. Invoiced" <> PurchLine."Line Amount" THEN  //C027348.o
                    IF PurchLine."Amnt. to Invoice" + PurchLine."Amnt. Invoiced" <> PurchLine.Amount THEN  //C027348.n
                      EverythingInvoiced := FALSE;
                  END ELSE
                  //**4PS.en
                    IF PurchLine."Qty. to Invoice" + PurchLine."Quantity Invoiced" <> PurchLine.Quantity THEN
                      EverythingInvoiced := FALSE;

                  //IF PurchLine.Quantity <> 0 THEN BEGIN //**4PS.o
                  IF (PurchLine.Quantity <> 0) OR ("Amounts only" AND (PurchLine."Line Amount" <> 0) ) THEN BEGIN  //**4PS.n
                    //PurchLine.TESTFIELD("No.");  //**4PS.o
                    PurchLine.TESTFIELD(Type);
                    //PurchLine.TESTFIELD("Gen. Bus. Posting Group");  //**4PS.o
                    //PurchLine.TESTFIELD("Gen. Prod. Posting Group");  //**4PS.o
                    //**4PS.sn
                    //IF NOT PurchLine.CheckPlantCreateFAOnReceipt() THEN BEGIN  //26690.o
                    IF (NOT PurchLine.CheckPlantCreateFAOnReceipt()) AND (NOT PlantReceivedAndCreatedOnOrder(PurchLine)) THEN BEGIN //26690.n
                      PurchLine.TESTFIELD("No.");
                      PurchLine.TESTFIELD("Gen. Bus. Posting Group");
                      PurchLine.TESTFIELD("Gen. Prod. Posting Group");
                    END;
                    //**4PS.en
                    DivideAmount(1,PurchLine."Qty. to Invoice",TempVATAmountLine,TempVATAmountLineRemainder);
                  END ELSE
                    IF NOT "Amounts only" THEN //**4PS.n
                      PurchLine.TESTFIELD(Amount,0);

                  CheckItemReservDisruption;
                  RoundAmount(PurchLine."Qty. to Invoice");

                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                    ReverseAmount(PurchLine);
                    ReverseAmount(PurchLineACY);
                  END;

                  //**4PS.sn
                  IF (PurchLine."Job No." <> '') AND ( (PurchLine."Qty. to Receive" <> 0) OR (PurchLine."Amnt. to Receive" <> 0) ) THEN BEGIN
                    IF (PurchSetup."Preregister WIP Purch. Inv.") AND
                       (PurchSetup."Preregistration WIP Account" = PurchLine."No.") AND
                       (PurchLine.Type = PurchLine.Type::"G/L Account")
                    THEN
                      PurchLine.TESTFIELD("Shortcut Dimension 2 Code", '')
                    ELSE
                      PurchLine.TESTFIELD("Shortcut Dimension 2 Code");
                  END;
                  RemAmntToBeInvoiced := PurchLine."Amnt. to Invoice";
                  //**4PS.en

                  RemQtyToBeInvoiced := PurchLine."Qty. to Invoice";
                  RemQtyToBeInvoicedBase := PurchLine."Qty. to Invoice (Base)";

                  // Job Credit Memo Item Qty Check
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    IF (PurchLine."Job No." <> '') AND (PurchLine.Type = PurchLine.Type::Item) AND
                       (PurchLine."Qty. to Invoice" <> 0)
                    THEN
                      JobPostLine.CheckItemQuantityPurchCredit(Rec,PurchLine);

                  // Item Tracking:
                  IF NOT PurchLine."Prepayment Line" THEN BEGIN
                    IF Invoice THEN
                      IF PurchLine."Qty. to Invoice" = 0 THEN
                        TrackingSpecificationExists := FALSE
                      ELSE
                        TrackingSpecificationExists :=
                          ReservePurchLine.RetrieveInvoiceSpecification(PurchLine,TempInvoicingSpecification);
                    EndLoop := FALSE;

                    //IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN  //**4PS.o
                    IF "Document Type" IN ["Document Type"::"Return Order"] THEN BEGIN  //**4PS.n
                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Return Qty. to Ship") THEN BEGIN
                        ReturnShptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::"Return Order":
                            BEGIN
                              ReturnShptLine.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                              ReturnShptLine.SETRANGE("Return Order No.",PurchLine."Document No.");
                              ReturnShptLine.SETRANGE("Return Order Line No.",PurchLine."Line No.");
                            END;
                          "Document Type"::"Credit Memo":
                            BEGIN
                              ReturnShptLine.SETRANGE("Document No.",PurchLine."Return Shipment No.");
                              ReturnShptLine.SETRANGE("Line No.",PurchLine."Return Shipment Line No.");
                            END;
                        END;
                        ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
                        IF ReturnShptLine.FINDSET(TRUE,FALSE) THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              ItemEntryRelation.GET(TempInvoicingSpecification."Item Ledger Entry No.");
                              ReturnShptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := ReturnShptLine."Item Shpt. Entry No.";
                            ReturnShptLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");
                            ReturnShptLine.TESTFIELD(Type,PurchLine.Type);
                            ReturnShptLine.TESTFIELD("No.",PurchLine."No.");
                            ReturnShptLine.TESTFIELD("Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
                            ReturnShptLine.TESTFIELD("Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
                            ReturnShptLine.TESTFIELD("Job No.",PurchLine."Job No.");
                            ReturnShptLine.TESTFIELD("Unit of Measure Code",PurchLine."Unit of Measure Code");
                            ReturnShptLine.TESTFIELD("Variant Code",PurchLine."Variant Code");
                            ReturnShptLine.TESTFIELD("Prod. Order No.",PurchLine."Prod. Order No.");
                            IF PurchLine."Qty. to Invoice" * ReturnShptLine.Quantity > 0 THEN
                              PurchLine.FIELDERROR("Qty. to Invoice",Text028);
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                              QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
                            END ELSE BEGIN
                              QtyToBeInvoiced := RemQtyToBeInvoiced - PurchLine."Return Qty. to Ship";
                              QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - PurchLine."Return Qty. to Ship (Base)";
                            END;
                            IF ABS(QtyToBeInvoiced) >
                               ABS(ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced")
                            THEN BEGIN
                              QtyToBeInvoiced := ReturnShptLine."Quantity Invoiced" - ReturnShptLine.Quantity;
                              QtyToBeInvoicedBase := ReturnShptLine."Qty. Invoiced (Base)" - ReturnShptLine."Quantity (Base)";
                            END;

                            IF TrackingSpecificationExists THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToBeInvoiced,QtyToBeInvoiced,
                                RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            ReturnShptLine."Quantity Invoiced" :=
                              ReturnShptLine."Quantity Invoiced" - QtyToBeInvoiced;
                            ReturnShptLine."Qty. Invoiced (Base)" :=
                              ReturnShptLine."Qty. Invoiced (Base)" - QtyToBeInvoicedBase;
                            ReturnShptLine."Return Qty. Shipped Not Invd." :=
                              ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced";
                            ReturnShptLine.MODIFY;
                            IF PurchLine.Type = PurchLine.Type::Item THEN
                              PostItemJnlLine(
                                PurchLine,
                                0,0,
                                QtyToBeInvoiced,QtyToBeInvoicedBase,
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                (ReturnShptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Return Qty. to Ship"));
                          UNTIL EndLoop;
                        END ELSE
                          ERROR(
                            Text029,
                            PurchLine."Return Shipment Line No.",PurchLine."Return Shipment No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Return Qty. to Ship") THEN BEGIN
                        IF "Document Type" = "Document Type"::"Credit Memo" THEN
                          ERROR(
                            Text039,
                            ReturnShptLine."Document No.");
                        ERROR(Text040);
                      END;
                    END ELSE BEGIN
                      //IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive") THEN BEGIN //**4PS.o
                      //**4PS.sn
                      IF ("Amounts only" AND (ABS(RemAmntToBeInvoiced) > ABS(PurchLine."Amnt. to Receive"))) OR
                         (NOT "Amounts only" AND (ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive")))
                      THEN BEGIN
                      //**4PS.en
                        PurchRcptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::Order:
                            BEGIN
                              PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
                              PurchRcptLine.SETRANGE("Order No.",PurchLine."Document No.");
                              PurchRcptLine.SETRANGE("Order Line No.",PurchLine."Line No.");
                            END;
                          "Document Type"::"Credit Memo", //**4PS.n
                          "Document Type"::Invoice:
                            BEGIN
                              PurchRcptLine.SETRANGE("Document No.",PurchLine."Receipt No.");
                              PurchRcptLine.SETRANGE("Line No.",PurchLine."Receipt Line No.");
                            END;
                        END;

                        //**4PS.sn
                        IF "Amounts only" THEN
                          PurchRcptLine.SETFILTER("Amnt. Rcd. Not Invoiced",'<>0')
                        ELSE
                        //**4PS.en
                          PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');

                        //**4PS DP00558 sn
                        lvPurchOrder.INIT;
                        IF PurchLine."Receipt No." <> '' THEN
                          IF lvPurchRcptHeader.GET(PurchLine."Receipt No.") THEN
                            IF lvPurchRcptHeader."Order No." <> '' THEN
                              IF lvPurchOrder.GET(lvPurchOrder."Document Type"::Order,lvPurchRcptHeader."Order No.") THEN;

                        IF lvPurchOrder."Tolerate Exceeding Invoice Qu." THEN
                          PurchRcptLine.SETRANGE("Qty. Rcd. Not Invoiced");
                        //**4PS DP00558 en

                        IF PurchRcptLine.FINDSET(TRUE,FALSE) THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN
                              ItemEntryRelation.GET(TempInvoicingSpecification."Item Ledger Entry No.");
                              PurchRcptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := PurchRcptLine."Item Rcpt. Entry No.";
                            UpdateRemainingQtyToBeInvoiced(RemQtyToInvoiceCurrLine,RemQtyToInvoiceCurrLineBase,PurchRcptLine);
                            PurchRcptLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");
                            PurchRcptLine.TESTFIELD(Type,PurchLine.Type);
                            //PurchRcptLine.TESTFIELD("No.",PurchLine."No.");  //**4PS.o
                            //**4PS.sn
                            IF (PurchLine."Job No." <> '') AND
                               (PurchLine."Shortcut Dimension 2 Code" <> '') AND
                               (ProjRec."Project Status" > ProjRec."Project Status"::"Administrative Finished") AND
                               (PurchRcptLine."No." <> PurchLine."No.") THEN
                            BEGIN
                              CASE PurchLine."Cost Type" OF
                                PurchLine."Cost Type"::Labor:
                                  PurchLine.TESTFIELD("No.",ProjTypeRec."Provision Account Labor");
                                PurchLine."Cost Type"::Material:
                                  PurchLine.TESTFIELD("No.",ProjTypeRec."Provision Account Material");
                                PurchLine."Cost Type"::Subcontracting:
                                  PurchLine.TESTFIELD("No.",ProjTypeRec."Provision Account Subcontr.");
                                PurchLine."Cost Type"::Plant:
                                  PurchLine.TESTFIELD("No.",ProjTypeRec."Provision Account Plant");
                                PurchLine."Cost Type"::Sundry:
                                  PurchLine.TESTFIELD("No.",ProjTypeRec."Provision Account Sundry");
                              ELSE
                                PurchRcptLine.TESTFIELD("No.",PurchLine."No.");
                              END;
                            END ELSE BEGIN
                              PurchRcptLine.TESTFIELD("No.",PurchLine."No.");
                            END;
                            //**4PS.en

                            //**4PS.so  call 5858
                            //PurchRcptLine.TESTFIELD("Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
                            //PurchRcptLine.TESTFIELD("Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
                            //**4PS.eo
                            PurchRcptLine.TESTFIELD("Job No.",PurchLine."Job No.");
                            PurchRcptLine.TESTFIELD("Unit of Measure Code",PurchLine."Unit of Measure Code");
                            PurchRcptLine.TESTFIELD("Variant Code",PurchLine."Variant Code");
                            PurchRcptLine.TESTFIELD("Prod. Order No.",PurchLine."Prod. Order No.");

                            //**4PS.sn
                            IF "Amounts only" THEN BEGIN
                              IF "Document Type" = "Document Type"::Invoice THEN
                                IF PurchLine."Amnt. to Invoice" * PurchRcptLine."Received (line)" < 0 THEN
                                  PurchLine.FIELDERROR("Amnt. to Invoice",Text012);
                              AmntToBeInvoiced := RemAmntToBeInvoiced - PurchLine."Amnt. to Receive";
                              IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                IF PurchRcptLine."Received (line)" < 0 THEN BEGIN
                                  IF ABS(AmntToBeInvoiced) > ABS(PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)") THEN
                                    AmntToBeInvoiced := -(PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)");
                                END ELSE
                                  IF ABS(AmntToBeInvoiced) > ABS(PurchRcptLine."Invoiced (line)") THEN
                                    AmntToBeInvoiced := -PurchRcptLine."Invoiced (line)";
                              END;
                              RemAmntToBeInvoiced := RemAmntToBeInvoiced - AmntToBeInvoiced;
                              PurchRcptLine."Invoiced (line)" := PurchRcptLine."Invoiced (line)" + AmntToBeInvoiced;
                              PurchRcptLine."Amnt. Rcd. Not Invoiced" :=
                                PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)";
                            END ELSE BEGIN
                            //**4PS.en
                              UpdateQtyToBeInvoiced(
                                QtyToBeInvoiced,QtyToBeInvoicedBase,
                                TrackingSpecificationExists,PurchLine,PurchRcptLine,
                                TempInvoicingSpecification);

                              IF TrackingSpecificationExists THEN
                                ItemTrackingMgt.AdjustQuantityRounding(
                                  RemQtyToInvoiceCurrLine,QtyToBeInvoiced,
                                  RemQtyToInvoiceCurrLineBase,QtyToBeInvoicedBase);

                              RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                              RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            END;  //**4PS.n
                            UpdateInvoicedQtyOnPurchRcptLine(PurchRcptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);

                            //**4PS.sn
                            PurchReceiptHeader.CALCFIELDS(Received, Invoiced);
                            PurchReceiptHeader."Received Not Invoiced" := PurchRcptHeader.Received - PurchRcptHeader.Invoiced;
                            PurchReceiptHeader.MODIFY;
                            IF NOT "Amounts only" THEN
                            //**4PS.en
                              IF PurchLine.Type = PurchLine.Type::Item THEN
                                PostItemJnlLine(
                                  PurchLine,
                                  0,0,
                                  QtyToBeInvoiced,QtyToBeInvoicedBase,
                                  ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                //(PurchRcptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Qty. to Receive"));  //**4PS.o
                                //**4PS.sn
                                (PurchRcptLine.NEXT = 0) OR
                                ("Amounts only" AND (ABS(RemAmntToBeInvoiced) <= ABS(PurchLine."Amnt. to Receive"))) OR
                                (NOT "Amounts only" AND (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Qty. to Receive")))
                                //**4PS.en
                          UNTIL EndLoop;
                        END ELSE
                         IF "Document Type" <> "Document Type"::"Credit Memo" THEN //**4PS.n
                          ERROR(
                            Text030,
                            PurchLine."Receipt Line No.",PurchLine."Receipt No.");
                      END;
                      { //**4PS.so  Call: 5858  Quantity should be modifiable, indepedent of receive.
                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive") THEN BEGIN
                        IF "Document Type" = "Document Type"::Invoice THEN
                          ERROR(
                            Text031,
                            PurchRcptLine."Document No.");
                        ERROR(Text014);
                      END;
                      } //**4PS.eo
                    END;

                    IF TrackingSpecificationExists THEN
                      SaveInvoiceSpecification(TempInvoicingSpecification);
                  END;

                  CASE PurchLine.Type OF
                    PurchLine.Type::"G/L Account":
                     BEGIN  //**4PS.n
                      IF (PurchLine."No." <> '') AND NOT PurchLine."System-Created Entry" THEN BEGIN
                        lvCheckCompanyIC(PurchLine);  //**4PS.n
                        GLAcc.GET(PurchLine."No.");
                        GLAcc.TESTFIELD("Direct Posting");
                        //IF (PurchLine."Job No." <> '') AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN //**4PS.o
                        //**4PS.sn
                        IF (PurchLine."Job No." <> '') AND (PurchLine."Qty. to Invoice" <> 0) AND
                          (PurchLine."VAT Calculation Type" <> PurchLine."VAT Calculation Type"::"Full VAT") AND
            //            ((NOT PurchLine.ReleaseRetention) OR  //C020876.o
                          (PurchLine.ReleaseRetention AND (PurchLine."Line Discount Amount" + PurchLine."Inv. Discount Amount" <> 0))
                        THEN BEGIN
                        //**4PS.en
                          CreateJobPurchLine(JobPurchLine,PurchLine,"Prices Including VAT");
                          JobPostLine.InsertPurchLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,JobPurchLine,SrcCode);
                        END;
                        IF (PurchLine."IC Partner Code" <> '') AND Invoice THEN
                          InsertICGenJnlLine(TempPurchLine,ICGenJnlLineNo);
                      END;
                      CheckUpdateItemPrice(PurchLine);  //**4PS.n (call 4392)
                     END;  //**4PS.n
                    PurchLine.Type::Item:
                      BEGIN
                        IF RemQtyToBeInvoiced <> 0 THEN
                          ItemLedgShptEntryNo :=
                            PostItemJnlLine(
                              PurchLine,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              0,'',DummyTrackingSpecification);
                        //IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN //**4PS.o
                        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN //**4PS.n
                          IF ABS(PurchLine."Return Qty. to Ship") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                PurchLine,
                                PurchLine."Return Qty. to Ship" - RemQtyToBeInvoiced,
                                PurchLine."Return Qty. to Ship (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification);
                        END ELSE BEGIN
                          IF ABS(PurchLine."Qty. to Receive") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                PurchLine,
                                PurchLine."Qty. to Receive" - RemQtyToBeInvoiced,
                                PurchLine."Qty. to Receive (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification);
                          IF (PurchLine."Qty. to Receive" <> 0) AND
                             (PurchLine."Sales Order Line No." <> 0)
                          THEN BEGIN
                            DropShptPostBuffer."Order No." := PurchLine."Sales Order No.";
                            DropShptPostBuffer."Order Line No." := PurchLine."Sales Order Line No.";
                            DropShptPostBuffer.Quantity := PurchLine."Qty. to Receive";
                            DropShptPostBuffer."Quantity (Base)" := PurchLine."Qty. to Receive (Base)";
                            DropShptPostBuffer."Item Shpt. Entry No." :=
                              PostAssocItemJnlLine(DropShptPostBuffer.Quantity,DropShptPostBuffer."Quantity (Base)");
                            DropShptPostBuffer.INSERT;
                          END;
                        END;
                      END;
                    3:
                      ERROR(Text015);
                    PurchLine.Type::"Charge (Item)":
                      IF (Invoice AND (PurchLine."Qty. to Invoice" <> 0)) OR ItemChargeAssgntOnly THEN BEGIN
                        ItemJnlRollRndg := TRUE;
                        PurchaseLineBackup.COPY(PurchLine);
                        IF FindTempItemChargeAssgntPurch(PurchaseLineBackup."Line No.") THEN
                          REPEAT
                            IF ItemChargeAssgntOnly AND (GenJnlLineDocNo = '') THEN
                              GenJnlLineDocNo := TempItemChargeAssgntPurch."Applies-to Doc. No.";
                            CASE TempItemChargeAssgntPurch."Applies-to Doc. Type" OF
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt:
                                BEGIN
                                  PostItemChargePerRcpt(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt":
                                BEGIN
                                  PostItemChargePerTransfer(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment":
                                BEGIN
                                  PostItemChargePerRetShpt(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Sales Shipment":
                                BEGIN
                                  PostItemChargePerSalesShpt(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Receipt":
                                BEGIN
                                  PostItemChargePerRetRcpt(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::Order,
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::Invoice,
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Order",
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Credit Memo":
                                CheckItemCharge(TempItemChargeAssgntPurch);
                            END;
                          UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                      END;
                  END;

                  //**4PS.so
                  //IF (PurchLine.Type >= PurchLine.Type::"G/L Account") AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN
                  //**4PS.eo
                  //**4PS.sn
                  IF (PurchLine.Type >= PurchLine.Type::"G/L Account") AND
                     ("Amounts only" AND (PurchLine."Amnt. to Invoice" <> 0) OR
                      NOT "Amounts only" AND (PurchLine."Qty. to Invoice" <> 0)) THEN BEGIN
                    IF "Subcontract No." <> '' THEN
                      IF PurchLine.RetentionAmount(0) <> 0 THEN BEGIN
                        // Copy purchase to retention buffer
                        IF PurchLine.RetentionAmount(1) <> 0 THEN
                          FillRetentionPostingBuffer(PurchLine,PurchLineACY,1);
                        IF PurchLine.RetentionAmount(2) <> 0 THEN
                          FillRetentionPostingBuffer(PurchLine,PurchLineACY,2);
                      END;
                  //**4PS.en
                    AdjustPrepmtAmountLCY(PurchLine);
                    // Copy purchase to buffer
                    FillInvPostingBuffer(PurchLine,PurchLineACY);
                    InsertPrepmtAdjInvPostingBuf(PurchLine);
                  END;

                  //**4PS.sn
                  IF ("Document Type" = "Document Type"::Invoice) OR ("Document Type" = "Document Type"::"Credit Memo") THEN BEGIN
                    IF (PurchLine.Type = PurchLine.Type::"G/L Account") AND
                       (PurchLine."No." <> '') AND
                       ((PurchSetup."Purchase Registration Account" = PurchLine."No.") OR
                        (PurchSetup."Preregistration WIP Account" = PurchLine."No.")) AND
                       (("Amount excl. VAT" <> 0) OR ("Amount incl. VAT" <> 0))
                    THEN BEGIN
                      IF ("Document Type" = "Document Type"::Invoice) AND (PurchHeader."Invoice Approved") THEN BEGIN
                        CheckApprovalTemplate;
                        PurchHeader."Invoice Approved" := FALSE;
                        PurchHeader.MODIFY;

                        PurchInvHeader."Invoice Approved" := FALSE;
                        PurchInvHeader."Status (Approval)" := PurchInvHeader."Status (Approval)"::Open;
                        IF PurchInvHeader."On Hold" <> '' THEN BEGIN
                          OnHoldRec.GET(PurchInvHeader."On Hold");
                          PurchInvHeader."Remain On Hold" := OnHoldRec."Remain On Hold";
                        END;
                        PurchInvHeader.MODIFY;
                      END;
                      IF ("Document Type" = "Document Type"::"Credit Memo") AND PurchHeader."Credit Memo Approved" THEN BEGIN
                        CheckApprovalTemplate;
                        PurchHeader."Credit Memo Approved" := FALSE;
                        PurchHeader.MODIFY;

                        PurchCrMemoHeader."Credit Memo Approved" := FALSE;
                        PurchCrMemoHeader."Status (Approval)" := PurchCrMemoHeader."Status (Approval)"::Open;
                        IF PurchCrMemoHeader."On Hold" <> '' THEN BEGIN
                          OnHoldRec.GET(PurchCrMemoHeader."On Hold");
                          PurchCrMemoHeader."Remain On Hold" := OnHoldRec."Remain On Hold";
                        END;
                        PurchCrMemoHeader.MODIFY;
                      END;
                    END;
                  END;
                  //**4PS.en

                  //**4PS.sn jhoek.190411.begin:
                  IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN
                    IF PurchLine.Type = PurchLine.Type::"G/L Account" THEN
                      IF PurchLine."No." <> '' THEN
                        IF (PurchLine."No." IN [PurchSetup."Purchase Registration Account", PurchSetup."Preregistration WIP Account"]) THEN
                          IF "Amount excl. VAT" = 0 THEN
                            IF "Amount incl. VAT" = 0 THEN
                              CASE "Document Type" OF
                                "Document Type"::Invoice:
                                  BEGIN
                                    // PurchInvHeader."DMS Status" := PurchInvHeader."DMS Status"::Approved; jhoek.100511
                                    // Following text constant should not be ML-enabled; D3 filters on the literal value below
                                    // PurchInvHeader."DMS Status Text" := 'Afhandelen zonder DMS workflow'; jhoek.100511
                                    PurchInvHeader."Invoice Approved" := FALSE;
                                    PurchInvHeader."Status (Approval)" := PurchInvHeader."Status (Approval)"::Open;
                                    PurchInvHeader.MODIFY;
                                  END;
                                "Document Type"::"Credit Memo":
                                  BEGIN
                                    // PurchCrMemoHeader."DMS Status" := PurchCrMemoHeader."DMS Status"::Approved; jhoek100511
                                    // Following text constant should not be ML-enabled; D3 filters on the literal value below
                                    // PurchCrMemoHeader."DMS Status Text" := 'Afhandelen zonder DMS workflow'; jhoek100511
                                    PurchCrMemoHeader."Credit Memo Approved" := FALSE;
                                    PurchCrMemoHeader."Status (Approval)" := PurchCrMemoHeader."Status (Approval)"::Open;
                                    PurchCrMemoHeader.MODIFY;
                                  END;
                              END;
                  //**4PS.en jhoek.190411.end

                  //**4PS.sn
                  PostingJobServicePlant(PurchRcptLine);
                  PostSurchargeForExternalIndirectHours;
                  //**4PS.en

                  IF (PurchRcptHeader."No." <> '') AND (PurchLine."Receipt No." = '') AND
                     NOT RoundingLineInserted AND NOT TempPurchLine."Prepayment Line"
                     //**4PS.sn
                     AND (("Document Type" <> "Document Type"::Order) OR
                          ("Amounts only" AND (TempPurchLine."Amnt. to Receive" <> 0) OR
                           NOT "Amounts only" AND (TempPurchLine."Qty. to Receive" <> 0)))
                     //**4PS.en
                  THEN BEGIN
                   //**4PS.sn
                   SaveTempPurchLineRec := TempPurchLine;
                   lvLastRefNo := '';
                   lvCreatePlantNo := CheckGeneratePlantNoOnReceipt(TempPurchLine, lvRcptCounter);
                   FOR lvI := 1 TO lvRcptCounter DO BEGIN
                    IF lvI = 1 THEN
                      lvNextRcptLineNo := TempPurchLine."Line No."
                    ELSE BEGIN
                      TempPurchLine := SaveTempPurchLineRec;
                      lvNextRcptLineNo := lvNextRcptLineNo + 1;
                    END;
                    IF PurchRcptLine1.GET(PurchRcptHeader."No.", lvNextRcptLineNo) THEN
                      lvNextRcptLineNo := -1;
                    IF ("Receipts in Bundles") OR (lvNextRcptLineNo < 0) THEN BEGIN
                      PurchRcptLine1.SETRANGE("Document No.",PurchRcptHeader."No.");
                      IF PurchRcptLine1.FINDLAST THEN
                        lvNextRcptLineNo := PurchRcptLine1."Line No." + 10000;
                    END;
                    IF lvCreatePlantNo THEN BEGIN
                      lvPlantNo := GeneratePlantNoOnReceipt(TempPurchLine, PurchRcptHeader."No.", lvNextRcptLineNo);
                      TempPurchLine."Plant No." := lvPlantNo;
                      IF (lvRcptCounter > 1) THEN BEGIN
                        IF (TempPurchLine."Qty. per Unit of Measure" = 0) OR (TempPurchLine."Qty. per Unit of Measure" = 1) THEN
                          TempPurchLine.VALIDATE("Qty. to Receive", 1)
                        ELSE
                          TempPurchLine.VALIDATE("Qty. to Receive", (1 / TempPurchLine."Qty. per Unit of Measure"));
                        TempPurchLine."Qty. to Receive (Base)" := 1;  //* Don't use 'Validate'.
                        IF SaveTempPurchLineRec."Qty. to Invoice" = 0 THEN BEGIN
                          TempPurchLine."Qty. to Invoice" := 0;
                          TempPurchLine."Qty. to Invoice (Base)" := 0;
                        END;
                      END;
                    END ELSE BEGIN
                      CheckPostPlantNoOnReceipt(TempPurchLine, PurchRcptHeader."No.", lvNextRcptLineNo);
                      IF TempPurchLine.Type = TempPurchLine.Type::"Fixed Asset" THEN
                        TempPurchLine.TESTFIELD("No.");
                    END;
                    IF (TempPurchLine."Item No." <> '') AND (TempPurchLine."Plant Order No." <> '') THEN
                      ItemReceiptOnPlantOrder(TempPurchLine);
                    //**4PS.en
                    // Insert receipt line
                    PurchRcptLine.InitFromPurchLine(PurchRcptHeader,TempPurchLine);

                    //**4PS.sn
                    IF ("Document Type" = "Document Type"::Order) AND (PurchLine."Employee No." <> '') THEN
                      //For (rental)orders use posting date of line instead of posting date in header
                      PurchRcptLine."Posting Date" := PurchLine."Posting Date"
                    ELSE
                      PurchRcptLine."Posting Date" := "Posting Date";
                    PurchRcptLine."Line No." := lvNextRcptLineNo;
                    //**4PS.en

                    IF (PurchLine.Type = PurchLine.Type::Item) AND (TempPurchLine."Qty. to Receive" <> 0) THEN BEGIN
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.GetWhseRcptLine(
                          WhseRcptLine,WhseRcptHeader."No.",DATABASE::"Purchase Line",
                          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                        WhseRcptLine.TESTFIELD("Qty. to Receive",PurchRcptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseShip THEN BEGIN
                        WhseShptLine.GetWhseShptLine(
                          WhseShptLine,WhseShptHeader."No.",DATABASE::"Purchase Line",
                          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                        WhseShptLine.TESTFIELD("Qty. to Ship",-PurchRcptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;

                      PurchRcptLine."Item Rcpt. Entry No." :=
                        InsertRcptEntryRelation(PurchRcptLine); // ItemLedgShptEntryNo
                      PurchRcptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
                    END;
                    //**4PS.sn
                    IF "Amounts only" THEN BEGIN
                      PurchRcptLine."Received (line)" := TempPurchLine."Amnt. to Receive";
                      PurchRcptLine."Amnt. Rcd. Not Invoiced" := TempPurchLine."Amnt. to Receive";
                    END ELSE BEGIN
                      //PurchRcptLine."Received (line)" := PurchRcptLine.Quantity * PurchRcptLine."Unit Cost";  //*30285.o
                      //*30285.sn
                      PurchRcptLine."Received (line)" :=
                        ROUND(PurchRcptLine.Quantity * GetPurchLineUnitCostInclDisc(PurchLine), Currency."Amount Rounding Precision");
                      //*30285.en
                    END;

                    IF PurchRcptHeader."Currency Code" = '' THEN
                      PurchRcptLine."Amount (LCY)" := ROUND(PurchRcptLine."Received (line)")
                    ELSE
                      PurchRcptLine."Amount (LCY)" :=
                        ROUND(
                          CurrExchRate.ExchangeAmtFCYToLCY(
                            0, '', //**4PS.n
                            PurchRcptLine."Posting Date", PurchRcptHeader."Currency Code",
            //              PurchRcptLine."Received (line)", PurchRcptHeader."Currency Factor")); //**4PS.o
                            PurchRcptLine."Received (line)", PurchRcptHeader."Currency Factor",FALSE)); //**4PS.n

                    IF NOT Invoice THEN
                      PurchRcptLine."Invoiced (line)" := 0
                    ELSE BEGIN
                      IF "Amounts only" THEN BEGIN
                        IF ABS(TempPurchLine."Amnt. to Invoice") > ABS(TempPurchLine."Amnt. to Receive") THEN
                          PurchRcptLine."Invoiced (line)" := TempPurchLine."Amnt. to Receive"
                        ELSE
                          PurchRcptLine."Invoiced (line)" := TempPurchLine."Amnt. to Invoice";
                        PurchRcptLine."Amnt. Rcd. Not Invoiced" := PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)";
                      END ELSE BEGIN
                        //PurchRcptLine."Invoiced (line)" := PurchRcptLine."Quantity Invoiced" * PurchRcptLine."Unit Cost";  //*30285.o
                        //*30285.sn
                        PurchRcptLine."Invoiced (line)" :=
                          ROUND(PurchRcptLine."Quantity Invoiced" * GetPurchLineUnitCostInclDisc(PurchLine),
                            Currency."Amount Rounding Precision");
                        //*30285.en
                      END;
                    END;
                    PurchRcptLine."Close Pl.Ext.Rent Ord. on Rcpt" := GetCloseExtRentPlantOnReceipt(TempPurchLine);
                    //**4PS09.sn
                    IF (PurchRcptLine."Requested Receipt Date" <> 0D) THEN
                      PurchRcptLine."Requested Receipt Date differs" := PurchRcptLine."Posting Date" - PurchRcptLine."Requested Receipt Date";
                    IF (PurchRcptLine."Promised Receipt Date" <> 0D) THEN
                      PurchRcptLine."Promised Receipt Date differs" := PurchRcptLine."Posting Date" - PurchRcptLine."Promised Receipt Date";
                    //**4PS09.en
                    PurchaseLineExtension.GetPurchLineExtension(
                      TempPurchLine."Document Type",TempPurchLine."Document No.",TempPurchLine."Line No.");
                    PurchRcptLine."Yard No." := PurchaseLineExtension."Yard No.";
                    PurchRcptLine."System No." := PurchaseLineExtension."System No.";
                    PurchRcptLine."Entity Type" := TempPurchLine."Entity Type";
                    PurchRcptLine."Entity No." := PurchaseLineExtension."Entity No.";
                    PurchRcptLine."Cable Transit Pos." := PurchaseLineExtension."Cable Transit Pos.";
                    IF PlotNoReceipts <> '' THEN  //DP00416.n
                      PurchRcptLine."Plot No." := PlotNoReceipts;  //DP00416.n
                    //**4PS.en

                    //**4PS.sn
                    //Call C008850 sn
                    IF PurchRcptHeader."Currency Code" = '' THEN
                      PurchRcptLine."Invoiced (LCY) (line)" := PurchRcptLine."Invoiced (line)"
                    ELSE
                      PurchRcptLine."Invoiced (LCY) (line)" :=
                        ROUND(
                          CurrExchRate.ExchangeAmtFCYToLCY(
                            0, '',"Posting Date", PurchRcptHeader."Currency Code",
                            PurchRcptLine."Invoiced (line)", PurchRcptHeader."Currency Factor",FALSE));

                    IF "Amounts only" THEN BEGIN
                      PurchRcptLine."Amnt. Rcd. Not Invoiced (LCY)" :=
                        PurchRcptLine."Amount (LCY)" - PurchRcptLine."Invoiced (LCY) (line)";
                    END ELSE BEGIN
                     PurchRcptLine."Amnt. Rcd. Not Invoiced" :=
                        PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)";
                      PurchRcptLine."Amnt. Rcd. Not Invoiced (LCY)" :=
                        PurchRcptLine."Amount (LCY)" - PurchRcptLine."Invoiced (LCY) (line)";
                    END;
                    //Call C008850 en
                    //**4PS.en
                    PurchRcptLine.INSERT;
                    //<DC>
                    IF IsDocumentCaptureActive THEN BEGIN //**4PS
                      Rec.GetRelPurchHeader(RelPurchHeader);
                      PurchDocLineRelMgt.UpdateRelInvLines(RelPurchHeader,PurchHeader,PurchLine,PurchRcptLine);
                    END;
                    //</DC>
                    //**4PS.sn
                    TempPurchLine.CopyPurLineDetailsToRcptLine(PurchRcptLine);
                    CreatePurchOrderControl(PurchLine);

                    IF (PurchLine."Purchase Route Reference" = '') THEN BEGIN
                      IF (lvLastRefNo = '') THEN BEGIN
                        PurchLine2 := PurchLine;
                        PurchLine2.FIND;
                        lvLastRefNo := RouteRefMgtCU.GetLastRefNo();
                        lvLastRefNo := INCSTR(lvLastRefNo);
                        PurchLine2."Purchase Route Reference" := lvLastRefNo;
                        PurchLine2.MODIFY;
                        RouteRefMgtCU.WriteLastRefNo(lvLastRefNo);
                      END;
                      PurchLine."Purchase Route Reference" := lvLastRefNo;
                      SaveTempPurchLineRec."Purchase Route Reference" := lvLastRefNo;
                      PurchRcptLine."Purchase Route Reference" := lvLastRefNo;
                      PurchRcptLine.MODIFY;
                    END;

                    PostProjInventory(PurchRcptLine);
                    PostNSItemTracking(PurchRcptLine); //DP00121

                    IF ("Document Type" = "Document Type"::Order) AND
                       (Receive) AND
                       (PurchLine."Cost Type" = PurchLine."Cost Type"::Material) AND
                       (PurchLine."Job No." <> '') AND
                       (PurchLine."Inward Processing Relief") AND
                       (PurchRcptLine.Quantity > 0) THEN
                      InwardProcessing(PurchRcptLine);

                   END;
                   TempPurchLine := SaveTempPurchLineRec;
                   //**4PS.en
                  END;

                  IF (ReturnShptHeader."No." <> '') AND (PurchLine."Return Shipment No." = '') AND
                     NOT RoundingLineInserted
                  THEN BEGIN
                    // Insert return shipment line
                    ReturnShptLine.InitFromPurchLine(ReturnShptHeader,TempPurchLine);
                    IF (PurchLine.Type = PurchLine.Type::Item) AND (TempPurchLine."Return Qty. to Ship" <> 0) THEN BEGIN
                      IF WhseShip THEN BEGIN
                        WhseShptLine.GetWhseShptLine(
                          WhseShptLine,WhseShptHeader."No.",DATABASE::"Purchase Line",
                          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                        WhseShptLine.TESTFIELD("Qty. to Ship",ReturnShptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.GetWhseRcptLine(
                          WhseRcptLine,WhseRcptHeader."No.",DATABASE::"Purchase Line",
                          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                        WhseRcptLine.TESTFIELD("Qty. to Receive",-ReturnShptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;

                      ReturnShptLine."Item Shpt. Entry No." :=
                        InsertReturnEntryRelation(ReturnShptLine); // ItemLedgShptEntryNo;
                      ReturnShptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
                    END;
                    ReturnShptLine.INSERT;
                    CheckCertificateOfSupplyStatus(ReturnShptHeader,ReturnShptLine);
                    //<DC>
                    IF IsDocumentCaptureActive THEN BEGIN //**4PS
                      Rec.GetRelPurchHeader(RelPurchHeader);
                      PurchDocLineRelMgt.UpdateRelCrMemoLines(RelPurchHeader,PurchHeader,PurchLine,ReturnShptLine);
                    END;
                    //</DC>
                  END;

                  IF Invoice THEN
                    // Insert invoice line or credit memo line
                    IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                      PurchInvLine.InitFromPurchLine(PurchInvHeader,TempPurchLine);
                      //**4PS.sn
                      IF "Document Type" = "Document Type"::Order THEN BEGIN
                        PurchInvLine."Receipt No." := PurchRcptLine."Document No.";
                        PurchInvLine."Receipt Line No." := PurchRcptLine."Line No.";
                      END ELSE BEGIN
                        PurchInvLine."Receipt No." := TempPurchLine."Receipt No.";
                        PurchInvLine."Receipt Line No." := TempPurchLine."Receipt Line No.";
                      END;
                      IF (PurchInvHeader."Currency Code" = '') OR (PurchInvLine.Amount = 0) THEN
                        PurchInvLine."Amount (LCY)" := PurchInvLine.Amount
                      ELSE
                        PurchInvLine."Amount (LCY)" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtFCYToLCY(
                              0, '',
                              PurchInvHeader."Posting Date", PurchInvHeader."Currency Code",
                              PurchInvLine.Amount, PurchInvHeader."Currency Factor",FALSE));
                      IF "Document Type" = "Document Type"::Order THEN
                        PurchInvLine."Line VAT Amount" := PurchInvLine."Amount Including VAT" - PurchInvLine.Amount;
                      PurchaseLineExtension.GetPurchLineExtension(
                        TempPurchLine."Document Type",TempPurchLine."Document No.",TempPurchLine."Line No.");
                      PurchInvLine."Expense Allowance Scheme" := PurchaseLineExtension."Expense Allowance Scheme";
                      //**4PS.en
                      PurchInvLine.INSERT;
                      //**4PS.sn
                      IF NOT IsDocumentCaptureActive THEN //**4PS DC n
                        IF ConsentUserSetup.READPERMISSION THEN
                          ConsentManagCU.PostPurchaseLine(TempPurchLine,PurchInvLine."Document No.");
                      //**4PS.en
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchInvLine.RowID1,1,100));
                      InsertNSItemTrackingRelation(TempPurchLine,PurchRcptLine,PurchInvLine.RowID1); //**4PS.n DP00121
                      CreatePostedDeferralScheduleFromPurchDoc(TempPurchLine,PurchInvLine.GetDocumentType,
                        PurchInvHeader."No.",PurchInvLine."Line No.",PurchInvHeader."Posting Date");
                    END ELSE BEGIN // Credit Memo
                      PurchCrMemoLine.InitFromPurchLine(PurchCrMemoHeader,TempPurchLine);
                      //**4PS.sn
                      PurchCrMemoLine."Receipt No." := TempPurchLine."Receipt No.";
                      PurchCrMemoLine."Receipt Line No." := TempPurchLine."Receipt Line No.";
                      IF PurchCrMemoHeader."Currency Code" = '' THEN
                        PurchCrMemoLine."Amount (LCY)" := PurchCrMemoLine.Amount
                      ELSE
                        PurchCrMemoLine."Amount (LCY)" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtFCYToLCY(
                            0, '',
                            PurchCrMemoHeader."Posting Date", PurchCrMemoHeader."Currency Code",
                            PurchCrMemoLine.Amount, PurchCrMemoHeader."Currency Factor",FALSE));
                      PurchaseLineExtension.GetPurchLineExtension(
                        TempPurchLine."Document Type",TempPurchLine."Document No.",TempPurchLine."Line No.");
                      PurchCrMemoLine."Expense Allowance Scheme" := PurchaseLineExtension."Expense Allowance Scheme";
                      //**4PS.en
                      PurchCrMemoLine.INSERT;
                      //**4PS.sn
                      IF NOT IsDocumentCaptureActive THEN //**4PS DC n
                        IF ConsentUserSetup.READPERMISSION THEN
                          ConsentManagCU.PostPurchaseLine(TempPurchLine,PurchCrMemoLine."Document No.");
                      //**4PS.en
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchCrMemoLine.RowID1,1,100));
                      InsertNSItemTrackingRelation(TempPurchLine,PurchRcptLine,PurchCrMemoLine.RowID1); //**4PS.n DP00121
                      CreatePostedDeferralScheduleFromPurchDoc(TempPurchLine,PurchCrMemoLine.GetDocumentType,
                        PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
                    END;

                  IF NOT JobItem THEN
                    JobItem := (PurchLine.Type = PurchLine.Type::Item) AND (PurchLine."Job No." <> '');

                  IF RoundingLineInserted THEN
                    LastLineRetrieved := TRUE
                  ELSE BEGIN
                    BiggestLineNo := MAX(BiggestLineNo,PurchLine."Line No.");
                    LastLineRetrieved := GetNextPurchline(PurchLine);
                    IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
                      InvoiceRounding(FALSE,BiggestLineNo);
                  END;
                UNTIL LastLineRetrieved;

              //**4PS.sn DC
              IF IsDocumentCaptureActive THEN
                IF ConsentUserSetup.READPERMISSION THEN BEGIN
                  IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                    PurchInvHeader.MODIFY;
                    ConsentManagCU.PostPurchaseHeaderIDYNDC(PurchHeader, PurchInvHeader."No.");
                    PurchInvHeader.GET(PurchInvHeader."No.");
                  END;
                  IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                    PurchCrMemoHeader.MODIFY;
                    ConsentManagCU.PostPurchaseHeaderIDYNDC(PurchHeader,PurchCrMemoHeader."No.");
                    PurchCrMemoHeader.GET(PurchCrMemoHeader."No.");
                  END;
                END;
              //**4PS.en DC

              // <DC>
              IF IsDocumentCaptureActive THEN //**4PS.n
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                  WebSearchMgnt.UpdateWebSearchFromInvoice2(PurchInvHeader)
                ELSE
                  WebSearchMgnt.UpdateWebSearchFromCrMemo2(PurchCrMemoHeader);
              // </DC>

              //**4PS02.sn
              //* All order lines are processed, get receipt lines for registering invoice.
              //*T002800.so  Can not be done yet for lines with Item Tracking, Tracking Specs are not processed yet
              //IF "Register Invoice" AND
              //  ("Document Type" = "Document Type"::Order) THEN BEGIN
              //  GetReceipts.SetPurchHeader(lvPurchHeaderInv);
              //  lvReceiptLine.RESET;
              //  lvReceiptLine.SETFILTER("Order No.",PurchHeader."No.");
              //  GetReceipts.CreateInvLines(lvReceiptLine);
              //END;
              //*T002800.eo
              //**4PS02.en
              PostPlantOrderChargePurch();  //**4PS.n (C001519)

              IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                ReverseAmount(TotalPurchLine);
                ReverseAmount(TotalPurchLineLCY);
              END;

              // Post combine shipment of sales order
              PostCombineSalesOrderShipment(SalesSetup,PurchHeader,SalesCommentLine);

              IF Invoice THEN BEGIN

                PostRetentionPostingBuffer; //**4PS.n

                // Post purchase and VAT to G/L entries from buffer
                LineCount := 0;
                IF InvPostingBuffer[1].FIND('+') THEN
                  REPEAT
                    LineCount := LineCount + 1;
                    IF GUIALLOWED THEN
                      Window.UPDATE(3,LineCount);

                    IF PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::VAT THEN //**4PS.n
                    CASE InvPostingBuffer[1]."VAT Calculation Type" OF
                      InvPostingBuffer[1]."VAT Calculation Type"::"Reverse Charge VAT":
                        BEGIN
                          VATPostingSetup.GET(
                            InvPostingBuffer[1]."VAT Bus. Posting Group",InvPostingBuffer[1]."VAT Prod. Posting Group");
                          InvPostingBuffer[1]."VAT Amount" :=
                            ROUND(
                              InvPostingBuffer[1].Amount * (1 - "VAT Base Discount %" / 100) * VATPostingSetup."VAT %" / 100);
                          InvPostingBuffer[1]."VAT Amount (ACY)" :=
                            ROUND(
                              InvPostingBuffer[1]."Amount (ACY)" * (1 - "VAT Base Discount %" / 100) *
                              VATPostingSetup."VAT %" / 100,Currency."Amount Rounding Precision");
                        END;
                      InvPostingBuffer[1]."VAT Calculation Type"::"Sales Tax":
                        IF InvPostingBuffer[1]."Use Tax" THEN BEGIN
                          InvPostingBuffer[1]."VAT Amount" :=
                            ROUND(
                              SalesTaxCalculate.CalculateTax(
                                InvPostingBuffer[1]."Tax Area Code",InvPostingBuffer[1]."Tax Group Code",
                                InvPostingBuffer[1]."Tax Liable","Posting Date",
                                InvPostingBuffer[1].Amount,
                                InvPostingBuffer[1].Quantity,0));
                          IF GLSetup."Additional Reporting Currency" <> '' THEN
                            InvPostingBuffer[1]."VAT Amount (ACY)" :=
                              CurrExchRate.ExchangeAmtLCYToFCY(
                                0, '', //**4PS.n
                                "Posting Date",GLSetup."Additional Reporting Currency",
                              //InvPostingBuffer[1]."VAT Amount",0); //**4PS.o
                                InvPostingBuffer[1]."VAT Amount",0,FALSE); //**4PS.n
                        END;
                    END;

                    SetupGenJnlLine(PurchHeader);

                    GLEntryNo := RunGenJnlPostLine(GenJnlLine);

                    IF (InvPostingBuffer[1]."Job No." <> '') AND (InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"G/L Account") THEN
                      JobPostLine.SetGLEntryNoOnJobLedgerEntry(InvPostingBuffer[1],"Posting Date",GenJnlLineDocNo,GLEntryNo);

                    //**4PS.sn
                    IF InvPostingBuffer[1]."Expense Allowance Scheme" THEN BEGIN
                      ExpenseAllowanceSchemeEntry."G/L Entry No." := GLEntryNo;
                      IF ExpenseAllowanceSchemeEntry.INSERT THEN ;
                    END;
                    GenJnlLine."Applies-to Retention ID" := 0;
                    GenJnlLine."Retention Amount" := 0;
                    GenJnlLine."Source Curr. Retention Amount" := 0;
                    GenJnlLine."Retention Entry Type" := GenJnlLine."Retention Entry Type"::" ";
                    //**4PS.en
                  UNTIL InvPostingBuffer[1].NEXT(-1) = 0;

                InvPostingBuffer[1].DELETEALL;

                // Check External Document number
                IF PurchSetup."Ext. Doc. No. Mandatory" OR
                   (GenJnlLineExtDocNo <> '')
                THEN
                  CheckExternalDocumentNumber(VendLedgEntry,PurchHeader);

                // Post vendor entries

                //**4PS.sn Warranty Retention
                IF RetentionType = RetentionType::Warranty THEN BEGIN
                  TotalPurchLine."Amount Including VAT" := TotalPurchLine."Amount Including VAT" + DocumentRetentionAmount;
                  IF "Currency Code" = '' THEN
                    TotalPurchLineLCY."Amount Including VAT" := TotalPurchLineLCY."Amount Including VAT" + DocumentRetentionAmount
                  ELSE
                    TotalPurchLineLCY."Amount Including VAT" := TotalPurchLineLCY."Amount Including VAT" +
                      ROUND(
                        CurrExchRate.ExchangeAmtFCYToLCY(
                          0, '', PurchHeader."Posting Date",PurchHeader."Currency Code",
                          DocumentRetentionAmount,PurchHeader."Currency Factor",FALSE));
                END;
                //**4PS.en

                IF GUIALLOWED THEN
                  Window.UPDATE(4,1);
                PostVendorEntry(
                  PurchHeader,TotalPurchLine,TotalPurchLineLCY,
                  GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);

                //**4PS.sn
                GenJnlLine."Pmt. Discount Date 2" := "Pmt. Discount Date 2";
                GenJnlLine."Payment Discount % 2" := "Payment Discount % 2";
                GenJnlLine."Pmt. Discount Date 3" := "Pmt. Discount Date 3";
                GenJnlLine."Payment Discount % 3" := "Payment Discount % 3";
                //**4PS.en

                //**4PS.sn
                GenJnlLine."Subcontracting Invoice" := "Subcontracting Invoice";
                GenJnlLine."Payment Agreement" := "Payment Agreement";
                GenJnlLine."Expected Effective Date" := "Actual Effective Date";
                GenJnlLine."Expected Enddate" := "Actual End Date";
                GenJnlLine."Number of Hours" := "Number of Hours";
                GenJnlLine."Avg. Wage Rate" := "Avg. Wage Rate";
                GenJnlLine."Labor Amount" := "Labor Amount";
                GenJnlLine."Contribution Percentage Labor" := "Contribution Percentage Labor";
                GenJnlLine."Contribution Percentage Total" := "Contribution Percentage Total";
                GenJnlLine."Pay To Tax Authority" := "Pay To Tax Authority";
                GenJnlLine."Wage Charge (to B Account)" := "Wage Charge (to B Account)";
                GenJnlLine."Wage Charge (to Tax Authority)" := "Wage Charge (to Tax Authority)";
                GenJnlLine.Memo := PurchHeadExtensionRec.Memo;
                GenJnlLine."Transaction Mode B Payments" := PurchHeader."Transaction Mode B Payments";
                GenJnlLine."Bank Account Code B Payments" := PurchHeader."Bank Account Code B Payments";
                CASE "Document Type" OF
                  "Document Type"::Order: //call C-026335
                    GenJnlLine.Approved := TRUE; //call C-026335
                  "Document Type"::Invoice:
                    GenJnlLine.Approved := PurchHeader."Invoice Approved";
                  "Document Type"::"Credit Memo":
                    GenJnlLine.Approved := PurchHeader."Credit Memo Approved";
                END;
                GenJnlLine."Approvement Initials" := PurchHeader."Approvement Initials";
                GenJnlLine."Interest Date" := "Interest Date";
                GenJnlLine."Your Reference" := PurchHeader."Your Reference"; //20060706-JE
                GenJnlLine."Closed Project No." := PurchHeader."Job No."; //20090709-PS
                GenJnlLine."Subcontract No." := PurchHeader."Subcontract No."; //**4PS.n

                //**4PS.sn DC  Document Capture IDYN
                IF ("Document Type" = "Document Type"::Invoice) AND (PurchInvHeader."On Hold" <> '') THEN BEGIN
                  GenJnlLine."On Hold" := PurchInvHeader."On Hold";
                END;
                IF ("Document Type" = "Document Type"::"Credit Memo") AND (PurchCrMemoHeader."On Hold" <> '') THEN BEGIN
                  GenJnlLine."On Hold" := PurchCrMemoHeader."On Hold";
                 END;
                //**4PS.en DC
                //**4PS.en

                UpdatePurchaseHeader(VendLedgEntry);

                // Balancing account
                IF "Bal. Account No." <> '' THEN BEGIN
                 IF GUIALLOWED THEN
                   Window.UPDATE(5,1);
                 VendLedgEntry.FINDLAST;
                 IF VendLedgEntry.Open THEN BEGIN //**4PS.n
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine."Document Date" := "Document Date";
                  GenJnlLine.Description := "Posting Description";
                  GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                  GenJnlLine."Dimension Set ID" := "Dimension Set ID";
                  GenJnlLine."Reason Code" := "Reason Code";
                  GenJnlLine."Account Type" := GenJnlLine."Account Type"::Vendor;
                  GenJnlLine."Account No." := "Pay-to Vendor No.";
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
                  ELSE
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
                  GenJnlLine."Document No." := GenJnlLineDocNo;
                  GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                  IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
                    GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
                  GenJnlLine."Bal. Account No." := "Bal. Account No.";
                  GenJnlLine."Currency Code" := "Currency Code";
                  GenJnlLine.Amount := TotalPurchLine."Amount Including VAT" +
                    VendLedgEntry."Remaining Pmt. Disc. Possible";
                  GenJnlLine.Correction := Correction;
                  GenJnlLine."Source Currency Code" := "Currency Code";
                  GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
                  VendLedgEntry.CALCFIELDS(Amount);
                  IF VendLedgEntry.Amount = 0 THEN
                    GenJnlLine."Amount (LCY)" := TotalPurchLineLCY."Amount Including VAT"
                  ELSE
                    GenJnlLine."Amount (LCY)" :=
                      TotalPurchLineLCY."Amount Including VAT" +
                      ROUND(
                        VendLedgEntry."Remaining Pmt. Disc. Possible" /
                        VendLedgEntry."Adjusted Currency Factor");
                  IF "Currency Code" = '' THEN
                    GenJnlLine."Currency Factor" := 1
                  ELSE
                    GenJnlLine."Currency Factor" := "Currency Factor";
                  GenJnlLine."Applies-to Doc. Type" := GenJnlLineDocType;
                  GenJnlLine."Applies-to Doc. No." := GenJnlLineDocNo;
                  GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                  GenJnlLine."Source No." := "Pay-to Vendor No.";
                  GenJnlLine."Source Code" := SrcCode;
                  GenJnlLine."Posting No. Series" := "Posting No. Series";
                  GenJnlLine."IC Partner Code" := "Pay-to IC Partner Code";
                  GenJnlLine."Allow Zero-Amount Posting" := TRUE;
                  GenJnlLine."Salespers./Purch. Code" := "Purchaser Code";
                  GenJnlLine."Interest Date" := "Interest Date";  //**4PS.n
                  GenJnlPostLine.RunWithCheck(GenJnlLine);
                 END; //**4PS.n
                END;
              END;

              IF ICGenJnlLineNo > 0 THEN
                PostICGenJnl;

              //**4PS.sn
              IF SurchargePostingBuffer[1].FIND('-') THEN
                REPEAT
                  GenJnlLine1.INIT;
                  GenJnlLine1."Source Code" := SrcCode;
                  GenJnlLine1."Reason Code":= "Reason Code";
                  GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
                  GenJnlLine1."Account No." := SurchargePostingBuffer[1]."G/L Account";
                  GenJnlLine1."Posting Date" := "Posting Date";
                  GenJnlLine1."Document Type" := GenJnlLineDocType;
                  GenJnlLine1."Document No." := GenJnlLineDocNo;
                  GenJnlLine1."System-Created Entry" := TRUE;
                  GenJnlLine1."Document Date" := "Document Date";
                  GenJnlLine1.Description := SurchargePostingBuffer[1].Description;
                  GenJnlLine1."Description 2" := SurchargePostingBuffer[1]."Description 2";
                  GenJnlLine1.Amount := SurchargePostingBuffer[1].Amount;
                  GenJnlLine1.VALIDATE(Amount);
                  GenJnlLine1."Shortcut Dimension 1 Code" := SurchargePostingBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine1."Shortcut Dimension 2 Code" := SurchargePostingBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine1."Dimension Set ID" := SurchargePostingBuffer[1]."Dimension Set ID";
                  GenJnlLine1."Cost Component" := SurchargePostingBuffer[1]."Cost Component";
                  GenJnlLine1."Job No." := SurchargePostingBuffer[1]."Job No.";
                  GenJnlLine1.Element := SurchargePostingBuffer[1].Element;
                  GenJnlLine1."Extension Contract" := PurchLine."Extension Contract";
                  GenJnlLine1."Service Order No." := SurchargePostingBuffer[1]."Service Order No.";
                  GenJnlLine1."Service Contract No." := SurchargePostingBuffer[1]."Service Contract No.";
                  GenJnlLine1."Service Location No." := PurchLine."Service Location No.";
                  GenJnlLine1."Origin Type" := SurchargePostingBuffer[1]."Origin Type";
                  GenJnlLine1."Interest Date" := "Interest Date";
                  GenJnlLine1."Employee No." := SurchargePostingBuffer[1]."Employee No.";

                  //Call C006064 n  FIELD "Buy-Back Item (Plant Order)" USED FOR OTHER PURPOSE
                  GenJnlLine1."Skip WIP Check" := SurchargePostingBuffer[1]."Buy-Back Item (Plant Order)";

                  RunGenJnlPostLine(GenJnlLine1);
                UNTIL SurchargePostingBuffer[1].NEXT = 0;
              SurchargePostingBuffer[1].DELETEALL;

              IF RequisitionPostingBuffer[1].FIND('-') THEN
                REPEAT
                  GenJnlLine1.INIT;
                  GenJnlLine1."Source Code" := SrcCode;
                  GenJnlLine1."Reason Code":= "Reason Code";
                  GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
                  GenJnlLine1."Account No." := RequisitionPostingBuffer[1]."G/L Account";
                  GenJnlLine1."Posting Date" := "Posting Date";
                  GenJnlLine1."Document Type" := GenJnlLineDocType;
                  GenJnlLine1."Document No." := GenJnlLineDocNo;
                  GenJnlLine1."System-Created Entry" := TRUE;
                  GenJnlLine1."Document Date" := "Document Date";
                  GenJnlLine1.Description := RequisitionPostingBuffer[1].Description;
                  GenJnlLine1."Description 2" := RequisitionPostingBuffer[1]."Description 2";
                  GenJnlLine1."Bal. Account No." := RequisitionPostingBuffer[1]."Bal. Account No.";
                  GenJnlLine1.Amount := RequisitionPostingBuffer[1].Amount;
                  GenJnlLine1.VALIDATE(Amount);
                  GenJnlLine1."Shortcut Dimension 1 Code" := RequisitionPostingBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine1."Shortcut Dimension 2 Code" := RequisitionPostingBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine1."Dimension Set ID" := RequisitionPostingBuffer[1]."Dimension Set ID";
                  GenJnlLine1."Job No." := RequisitionPostingBuffer[1]."Job No.";
                  GenJnlLine1."Origin Type" := RequisitionPostingBuffer[1]."Origin Type";
                  RunGenJnlPostLine(GenJnlLine1);
                UNTIL RequisitionPostingBuffer[1].NEXT = 0;
              RequisitionPostingBuffer[1].DELETEALL;

              IF ComplWIPPostingBuffer[1].FIND('-') THEN
                REPEAT
                  GenJnlLine1.INIT;
                  GenJnlLine1."Source Code" := SrcCode;
                  GenJnlLine1."Reason Code":= "Reason Code";
                  GenJnlLine1."Cost Component":= ComplWIPPostingBuffer[1]."Cost Component";
                  GenJnlLine1."Account Type" := GenJnlLine1."Account Type"::"G/L Account";
                  GenJnlLine1."Account No." := ComplWIPPostingBuffer[1]."G/L Account";
                  GenJnlLine1."Posting Date" := "Posting Date";
                  GenJnlLine1."Document Type" := GenJnlLineDocType;
                  GenJnlLine1."Document No." := GenJnlLineDocNo;
                  GenJnlLine1."System-Created Entry" := TRUE;
                  GenJnlLine1."Document Date" := "Document Date";
                  GenJnlLine1.Description := ComplWIPPostingBuffer[1].Description;
                  GenJnlLine1."Description 2" := ComplWIPPostingBuffer[1]."Description 2";
                  GenJnlLine1.Amount := ComplWIPPostingBuffer[1].Amount;
                  GenJnlLine1.VALIDATE(Amount);
                  GenJnlLine1."Shortcut Dimension 1 Code" := ComplWIPPostingBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine1."Shortcut Dimension 2 Code" := ComplWIPPostingBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine1."Dimension Set ID" := ComplWIPPostingBuffer[1]."Dimension Set ID";
                  GenJnlLine1."Closed Project No." := ComplWIPPostingBuffer[1]."Job No.";
                  GenJnlLine1."Closed Service Order No." := ComplWIPPostingBuffer[1]."Service Order No.";
                  GenJnlLine1."Closed Service Contract No." := ComplWIPPostingBuffer[1]."Service Contract No.";
                  GenJnlLine1."Origin Type" := ComplWIPPostingBuffer[1]."Origin Type";
                  RunGenJnlPostLine(GenJnlLine1);
                UNTIL ComplWIPPostingBuffer[1].NEXT = 0;
              ComplWIPPostingBuffer[1].DELETEALL;
              //**4PS.en

              IF PreviewMode THEN BEGIN
                Window.CLOSE;
                GenJnlPostPreview.Finish;
                ERROR(GenJnlPostPreview.GetPreviewModeErrMessage);
              END;

              MakeInventoryAdjustment(JobItem);
              IF Receive THEN BEGIN
                "Last Receiving No." := "Receiving No.";
                "Receiving No." := '';
              END;
              //IF Invoice THEN BEGIN                             //**4PS02.o
              IF Invoice OR "Register Invoice" THEN BEGIN         //**4PS02.n
                "Last Posting No." := "Posting No.";
                "Posting No." := '';
              END;
              IF Ship THEN BEGIN
                "Last Return Shipment No." := "Return Shipment No.";
                "Return Shipment No." := '';
              END;

              { //**4PS.so
              IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
                 (NOT EverythingInvoiced)
              } //**4PS.eo
              IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) //**4PS.n
              THEN BEGIN
                MODIFY;
                InsertTrackingSpecification;

                IF PurchLine.FINDSET THEN
                  REPEAT
                    IF PurchLine.Quantity <> 0 THEN BEGIN
                      IF Receive THEN BEGIN
                        PurchLine."Quantity Received" := PurchLine."Quantity Received" + PurchLine."Qty. to Receive";
                        PurchLine."Qty. Received (Base)" := PurchLine."Qty. Received (Base)" + PurchLine."Qty. to Receive (Base)";
                        //**4PS.sn
                        //PurchLine."Amnt. Received" :=  //*30285.o
                          //PurchLine."Amnt. Received" + PurchLine."Qty. to Receive" * PurchLine."Direct Unit Cost"; //M25784 new //*30285.o
                          //PurchLine."Amnt. Received" + PurchLine."Qty. to Receive" * PurchLine."Unit Cost"; //M25784 old
                          //maybe include discount here?
                        //*30285.sn
                        PurchLine."Amnt. Received" :=
                          ROUND(PurchLine."Quantity Received" * GetPurchLineUnitCostInclDisc(PurchLine),
                          Currency."Amount Rounding Precision");
                        //*30285.en
                        //**4PS.en
                      END;
                      IF Ship THEN BEGIN
                        PurchLine."Return Qty. Shipped" := PurchLine."Return Qty. Shipped" + PurchLine."Return Qty. to Ship";
                        PurchLine."Return Qty. Shipped (Base)" :=
                          PurchLine."Return Qty. Shipped (Base)" + PurchLine."Return Qty. to Ship (Base)";
                      END;
                      IF Invoice THEN BEGIN
                        IF "Document Type" = "Document Type"::Order THEN BEGIN
                          IF ABS(PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice") >
                             ABS(PurchLine."Quantity Received")
                          THEN BEGIN
                            PurchLine.VALIDATE("Qty. to Invoice",
                              PurchLine."Quantity Received" - PurchLine."Quantity Invoiced");
                            PurchLine."Qty. to Invoice (Base)" :=
                              PurchLine."Qty. Received (Base)" - PurchLine."Qty. Invoiced (Base)";
                          END;
                        END ELSE
                          IF ABS(PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice") >
                             ABS(PurchLine."Return Qty. Shipped")
                          THEN BEGIN
                            PurchLine.VALIDATE("Qty. to Invoice",
                              PurchLine."Return Qty. Shipped" - PurchLine."Quantity Invoiced");
                            PurchLine."Qty. to Invoice (Base)" :=
                              PurchLine."Return Qty. Shipped (Base)" - PurchLine."Qty. Invoiced (Base)";
                          END;

                        PurchLine."Quantity Invoiced" := PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                        PurchLine."Qty. Invoiced (Base)" := PurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                        IF PurchLine."Qty. to Invoice" <> 0 THEN BEGIN
                          PurchLine."Prepmt Amt Deducted" :=
                            PurchLine."Prepmt Amt Deducted" + PurchLine."Prepmt Amt to Deduct";
                          PurchLine."Prepmt VAT Diff. Deducted" :=
                            PurchLine."Prepmt VAT Diff. Deducted" + PurchLine."Prepmt VAT Diff. to Deduct";
                          DecrementPrepmtAmtInvLCY(
                            PurchLine,PurchLine."Prepmt. Amount Inv. (LCY)",PurchLine."Prepmt. VAT Amount Inv. (LCY)");
                          PurchLine."Prepmt Amt to Deduct" :=
                            PurchLine."Prepmt. Amt. Inv." - PurchLine."Prepmt Amt Deducted";
                          PurchLine."Prepmt VAT Diff. to Deduct" := 0;
                          //**4PS.sn
                          //PurchLine."Amnt. Invoiced" := //*30285.o
                            //PurchLine."Amnt. Invoiced" + PurchLine."Qty. to Invoice" * PurchLine."Direct Unit Cost"; //M25784 new //*30285.o
                            //PurchLine."Amnt. Invoiced" + PurchLine."Qty. to Invoice" * PurchLine."Unit Cost";  //M25784 old
                            //maybe include discount here?
                          //*30285.sn
                          PurchLine."Amnt. Invoiced" :=
                            ROUND(PurchLine."Quantity Invoiced" * GetPurchLineUnitCostInclDisc(PurchLine),
                            Currency."Amount Rounding Precision")
                          //*30285.en
                          //**4PS.en
                        END;
                      END;

                      UpdateBlanketOrderLine(PurchLine,Receive,Ship,Invoice);
                      //**4PS.sn
                      //07-08-08.so
                      //PurchLine."Amnt. Received" := 0;
                      //PurchLine."Amnt. Invoiced" := 0;
                      //07-08-08.eo
                      PurchLine."Amnt. to Receive" := 0;
                      PurchLine."Amnt. to Invoice" := 0;
                      IF "Document Type" = "Document Type"::Order THEN BEGIN
                        PurchLine."Approve Receipt" := PurchLine."Approve Receipt"::" ";
                        PurchLine."Comment Receipt" := '';
                      END;
                      //**4PS.en

                      PurchLine.InitOutstanding;

                      //**4PS.so
                      //IF WhseHandlingRequired OR
                      //   (PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank)
                      //THEN BEGIN
                      //**4PS.eo
                      IF WhseHandlingRequired THEN BEGIN  //**4PS.n
                        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                          PurchLine."Return Qty. to Ship" := 0;
                          PurchLine."Return Qty. to Ship (Base)" := 0;
                        END ELSE BEGIN
                          PurchLine."Qty. to Receive" := 0;
                          PurchLine."Qty. to Receive (Base)" := 0;
                        END;
                        PurchLine.InitQtyToInvoice;
                      END ELSE BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN
                          PurchLine.InitQtyToShip
                        ELSE
                          PurchLine.InitQtyToReceive2;
                      END;
                      PurchLine.SetDefaultQuantity;
                      //**4PS.sn
                      PurchLine."Modified by" := USERID; //DP00469
                      PurchLine."Last Date Modified" := TODAY;//DP00469
                      //**4PS.en
                      PurchLine.MODIFY;

                    //**4PS.sn
                      CheckCloseHeader(PurchLine);  //**4PS01.n
                      UpdateReceiptBalance(PurchLine);
                    END ELSE
                      IF "Amounts only" THEN BEGIN
                        IF Receive THEN
                          PurchLine."Amnt. Received" := PurchLine."Amnt. Received" + PurchLine."Amnt. to Receive";
                        IF Invoice THEN BEGIN
                          IF "Document Type" = "Document Type"::Order THEN
                            IF ABS(PurchLine."Amnt. Invoiced" + PurchLine."Amnt. to Invoice") >
                               ABS(PurchLine."Amnt. Received")
                            THEN
                              PurchLine.VALIDATE("Amnt. to Invoice",
                                PurchLine."Amnt. Received" - PurchLine."Amnt. Invoiced");
                          PurchLine."Amnt. Invoiced" := PurchLine."Amnt. Invoiced" + PurchLine."Amnt. to Invoice";
                        END;
                        PurchLine.UpdateVATAmounts;
                        PurchLine.InitOutstandingAmount;
                        PurchLine.InitAmntToReceive;
                        //**4PS.sn
                        PurchLine."Modified by" := USERID; //DP00469
                        PurchLine."Last Date Modified" := TODAY;//DP00469
                        //**4PS.en
                        PurchLine.MODIFY;
                        CheckCloseHeader(PurchLine);  //**4PS01.n
                        UpdateReceiptBalance(PurchLine);
                    //**4PS.en
                    END;
                  UNTIL PurchLine.NEXT = 0;

                UpdateAssocOrder;
                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;
                WhsePurchRelease.Release(PurchHeader);
                UpdateItemChargeAssgnt;
              END ELSE BEGIN
                CASE "Document Type" OF
                  "Document Type"::"Credit Memo", //**4PS.n
                  "Document Type"::Invoice:
                    BEGIN
                      PurchLine.SETFILTER("Receipt No.",'<>%1','');
                      IF PurchLine.FINDSET THEN
                        REPEAT
                          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                            PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
                            TempPurchLine.GET(
                              TempPurchLine."Document Type"::Order,
                              PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
                            IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN
                              UpdatePurchOrderChargeAssgnt(PurchLine,TempPurchLine);
                            //**4PS.sn
                            IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                              TempPurchLine."Quantity Invoiced" :=
                                TempPurchLine."Quantity Invoiced" - PurchLine."Qty. to Invoice";
                              TempPurchLine."Qty. Invoiced (Base)" :=
                                TempPurchLine."Qty. Invoiced (Base)" - PurchLine."Qty. to Invoice (Base)";
                            END ELSE BEGIN
                            //**4PS.en
                              TempPurchLine."Quantity Invoiced" :=
                                TempPurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                              TempPurchLine."Qty. Invoiced (Base)" :=
                                TempPurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                            //**4PS.sn
                            END;
                            IF PurchRcptLine.Quantity * PurchRcptLine."Qty. Rcd. Not Invoiced" < 0 THEN
                            //**4PS.en
                            //IF ABS(TempPurchLine."Quantity Invoiced") > ABS(TempPurchLine."Quantity Received") THEN //**4PS.o
                              ERROR(
                                Text017,
                                TempPurchLine."Document No.");
                            IF TempPurchLine."Sales Order Line No." <> 0 THEN BEGIN // Drop Shipment
                              SalesOrderLine.GET(
                                SalesOrderLine."Document Type"::Order,
                                TempPurchLine."Sales Order No.",TempPurchLine."Sales Order Line No.");
                              IF ABS(TempPurchLine.Quantity - TempPurchLine."Quantity Invoiced") <
                                 ABS(SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced")
                              THEN
                                ERROR(
                                  Text018 +
                                  Text99000000,
                                  TempPurchLine."Sales Order No.");
                            END;
                            //**4PS.sn
                            IF "Document Type" = "Document Type"::"Credit Memo" THEN
                              TempPurchLine."Amnt. Invoiced" := TempPurchLine."Amnt. Invoiced" - PurchLine.Amount
                            ELSE
                              TempPurchLine."Amnt. Invoiced" := TempPurchLine."Amnt. Invoiced" + PurchLine.Amount;
                            TempPurchLine.UpdateVATAmounts;
                            IF NOT "Amounts only" THEN BEGIN
                            //**4PS.en
                              TempPurchLine.InitQtyToInvoice;
                              IF TempPurchLine."Prepayment %" <> 0 THEN BEGIN
                                TempPurchLine."Prepmt Amt Deducted" := TempPurchLine."Prepmt Amt Deducted" + PurchLine."Prepmt Amt to Deduct";
                                TempPurchLine."Prepmt VAT Diff. Deducted" :=
                                  TempPurchLine."Prepmt VAT Diff. Deducted" + PurchLine."Prepmt VAT Diff. to Deduct";
                                DecrementPrepmtAmtInvLCY(
                                  PurchLine,TempPurchLine."Prepmt. Amount Inv. (LCY)",TempPurchLine."Prepmt. VAT Amount Inv. (LCY)");
                                TempPurchLine."Prepmt Amt to Deduct" :=
                                  TempPurchLine."Prepmt. Amt. Inv." - TempPurchLine."Prepmt Amt Deducted";
                                TempPurchLine."Prepmt VAT Diff. to Deduct" := 0;
                              END;
                              TempPurchLine.InitOutstanding;
                            //**4PS.sn
                            END ELSE BEGIN
                              TempPurchLine.InitOutstandingAmount;
                              TempPurchLine.InitAmntToReceive;
                              TempPurchLine.InitAmntToInvoice;
                            END;
                            //**4PS.en
                            //**4PS.sn
                            TempPurchLine."Modified by" := USERID; //DP00469
                            TempPurchLine."Last Date Modified" := TODAY;//DP00469
                            //**4PS.en
                            TempPurchLine.MODIFY;
                            //**4PS.sn
                            CheckCloseHeader(TempPurchLine);
                            CreatePurchOrderControl(TempPurchLine);
                            UpdateReceiptBalance(PurchLine);
                            //**4PS.en
                          END;
                        UNTIL PurchLine.NEXT = 0;
                      InsertTrackingSpecification;

                      PurchLine.SETRANGE("Receipt No.");
                    END;

                  "Document Type"::"Credit Memo":
                    BEGIN
                      { //**4PS.so
                      PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                      IF PurchLine.FINDSET THEN
                        REPEAT
                          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                            ReturnShptLine.GET(PurchLine."Return Shipment No.",PurchLine."Return Shipment Line No.");
                            TempPurchLine.GET(
                              TempPurchLine."Document Type"::"Return Order",
                              ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");
                            IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN
                              UpdatePurchOrderChargeAssgnt(PurchLine,TempPurchLine);
                            TempPurchLine."Quantity Invoiced" :=
                              TempPurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                            TempPurchLine."Qty. Invoiced (Base)" :=
                              TempPurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                            IF ABS(TempPurchLine."Quantity Invoiced") > ABS(TempPurchLine."Return Qty. Shipped") THEN
                              ERROR(
                                Text041,
                                TempPurchLine."Document No.");
                            TempPurchLine.InitQtyToInvoice;
                            TempPurchLine.InitOutstanding;
                            //**4PS.sn
                            TempPurchLine."Modified by" := USERID; //DP00469
                            TempPurchLine."Last Date Modified" := TODAY;//DP00469
                            //**4PS.en
                            TempPurchLine.MODIFY;
                          END;
                        UNTIL PurchLine.NEXT = 0;
                      InsertTrackingSpecification;

                      PurchLine.SETRANGE("Return Shipment No.");
                      } //**4PS.eo
                    END;
                  ELSE
                    IF PurchLine.FINDSET THEN
                      REPEAT
                        IF PurchLine."Prepayment %" <> 0 THEN
                          DecrementPrepmtAmtInvLCY(
                            PurchLine,PurchLine."Prepmt. Amount Inv. (LCY)",PurchLine."Prepmt. VAT Amount Inv. (LCY)");
                      UNTIL PurchLine.NEXT = 0;
                END;

                PurchLine.SETFILTER("Blanket Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN
                  REPEAT
                    UpdateBlanketOrderLine(PurchLine,Receive,Ship,Invoice);
                  UNTIL PurchLine.NEXT = 0;
                PurchLine.SETRANGE("Blanket Order Line No.");

                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;

                IF NOT ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) THEN BEGIN //**4PS.n
                  ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Purchase Header","Document Type","No.");

                IF HASLINKS THEN
                  DELETELINKS;
                DELETE;

                ReservePurchLine.DeleteInvoiceSpecFromHeader(PurchHeader);
                IF PurchLine.FINDFIRST THEN
                  REPEAT
                    IF PurchLine."Deferral Code" <> '' THEN
                      DeferralUtilities.RemoveOrSetDeferralSchedule(
                        '',DeferralUtilities.GetPurchDeferralDocType,'','',
                        PurchLine."Document Type",
                        PurchLine."Document No.",
                        PurchLine."Line No.",0,0D,
                        PurchLine.Description,
                        '',
                        TRUE);
                    IF PurchLine.HASLINKS THEN
                      PurchLine.DELETELINKS;
                  UNTIL PurchLine.NEXT = 0;
                PurchLine.DELETEALL;
                DeleteItemChargeAssgnt;

                PurchCommentLine.SETRANGE("Document Type","Document Type");
                PurchCommentLine.SETRANGE("No.","No.");
                IF NOT PurchCommentLine.ISEMPTY THEN
                  PurchCommentLine.DELETEALL;
                DeleteWhseRqst(PurchHeader);
               END; //**4PS.n
              END;

              InsertValueEntryRelation;
              DeleteReservationEntryRelateJobNo(PurchLine."Document Type","No.",PurchLine."Line No.",PurchLine."Job No.");

              //**4PS02.sn  T002800
              IF "Register Invoice" AND
                ("Document Type" = "Document Type"::Order) THEN BEGIN
                GetReceipts.SetPurchHeader(lvPurchHeaderInv);
                lvReceiptLine.RESET;
                lvReceiptLine.SETFILTER("Order No.",PurchHeader."No.");
                GetReceipts.CreateInvLines(lvReceiptLine);
              END;
              //**4PS02.en
              //**4PS.sn
              IF Receive THEN
                IF PurchRcptHeader."No." <> '' THEN BEGIN
                  PurchRcptHeader.CALCFIELDS(Received, Invoiced);
                  PurchRcptHeader."Received Not Invoiced" := PurchRcptHeader.Received - PurchRcptHeader.Invoiced;
                  PurchRcptHeader.MODIFY;
                END;
              //**4PS.en

              IF NOT InvtPickPutaway THEN
                COMMIT;
              ClearPostBuffers;
              IF GUIALLOWED THEN
                Window.CLOSE;

              //**4PS.sn
              IF ReceiptForPlantOrders <> '' THEN
                MESSAGE(Text11012009, ReceiptForPlantOrders);
              //**4PS.en
            END;

            //mg.sn, 12-07-11: M27801
            IF ReplaceDocLink THEN BEGIN
              SourceLink.GETTABLE(PurchHeader);
              IF "Document Type" IN ["Document Type"::Order, "Document Type"::Invoice] THEN
                TargetLink.GETTABLE(PurchInvHeader)
              ELSE
                TargetLink.GETTABLE(PurchCrMemoHeader);
              DocumentLinkManagement.ReplaceDocLink(SourceLink,TargetLink);
            END;
            //mg.en, 12-07-11: M27801

            Rec := PurchHeader;

            IF NOT InvtPickPutaway THEN BEGIN
              COMMIT;
              UpdateAnalysisView.UpdateAll(0,TRUE);
              UpdateItemAnalysisView.UpdateAll(0,TRUE);
            END;

            //**4PS.sn
            IF ConsentUserSetup.READPERMISSION THEN BEGIN
              IF "Document Type" = "Document Type"::Invoice THEN
                ConsentManagCU.AutoConsentPurchInvHeader(PurchInvHeader."No.");
             IF "Document Type" = "Document Type"::"Credit Memo" THEN
                ConsentManagCU.AutoConsentPurchCrMemoHdr(PurchCrMemoHeader."No.");
            END;
            //**4PS.en

            OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcptHeader."No.",ReturnShptHeader."No.",PurchInvHeader."No.",
              PurchCrMemoHeader."No.");
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=There is nothing to post.';
      Text002@1001 : TextConst 'ENU=A drop shipment from a purchase order cannot be received and invoiced at the same time.';
      Text003@1002 : TextConst 'ENU=You cannot invoice this purchase order before the associated sales orders have been invoiced.';
      Text004@1003 : TextConst 'ENU=Please invoice sales order %1 before invoicing this purchase order.';
      Text005@1004 : TextConst 'ENU=Posting lines              #2######\';
      Text006@1005 : TextConst 'ENU=Posting purchases and VAT  #3######\';
      Text007@1006 : TextConst 'ENU=Posting to vendors         #4######\';
      Text008@1007 : TextConst 'ENU=Posting to bal. account    #5######';
      Text009@1008 : TextConst 'ENU=Posting lines         #2######';
      Text010@1009 : TextConst 'ENU=%1 %2 -> Invoice %3';
      Text011@1010 : TextConst 'ENU=%1 %2 -> Credit Memo %3';
      Text012@1011 : TextConst 'ENU=must have the same sign as the receipt';
      Text014@1012 : TextConst 'ENU=Receipt lines have been deleted.';
      Text015@1013 : TextConst 'ENU=You cannot purchase resources.';
      Text016@1014 : TextConst 'ENU=Purchase %1 %2 already exists for this vendor.';
      Text017@1015 : TextConst 'ENU=You cannot invoice order %1 for more than you have received.';
      Text018@1016 : TextConst 'ENU=You cannot post this purchase order before the associated sales orders have been invoiced.';
      Text021@1017 : TextConst 'ENU=VAT Amount';
      Text022@1018 : TextConst 'ENU=%1% VAT';
      Text023@1019 : TextConst 'ENU=in the associated blanket order must not be greater than %1';
      Text024@1020 : TextConst 'ENU=in the associated blanket order must be reduced.';
      Text025@1021 : TextConst 'ENU=Please enter "Yes" in %1 and/or %2 and/or %3.';
      Text026@1022 : TextConst 'ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6."';
      Text028@1024 : TextConst 'ENU=must have the same sign as the return shipment';
      Text029@1025 : TextConst 'ENU=Line %1 of the return shipment %2, which you are attempting to invoice, has already been invoiced.';
      Text030@1026 : TextConst 'ENU=Line %1 of the receipt %2, which you are attempting to invoice, has already been invoiced.';
      Text031@1027 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in receipt %1';
      Text032@1028 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3';
      Text033@1029 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4';
      Text034@1030 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3';
      Text035@1031 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4';
      Text036@1032 : TextConst 'ENU="You cannot assign more than %1 units in %2 = %3,%4 = %5,%6 = %7."';
      Text037@1033 : TextConst 'ENU=You must assign all item charges, if you invoice everything.';
      Text038@1034 : TextConst 'ENU="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced."';
      PurchSetup@1037 : Record 312;
      GLSetup@1038 : Record 98;
      GLEntry@1039 : Record 17;
      PurchHeader@1040 : Record 38;
      PurchLine@1041 : Record 39;
      PurchaseLineExtension@1210190001 : Record 11020644;
      PurchLine2@1042 : Record 39;
      JobPurchLine@1169 : Record 39;
      TotalPurchLine@1043 : Record 39;
      TotalPurchLineLCY@1044 : Record 39;
      TempPurchLine@1046 : Record 39;
      PurchLineACY@1047 : Record 39;
      TempPrepmtPurchLine@1167 : TEMPORARY Record 39;
      PurchRcptHeader@1048 : Record 120;
      PurchInvHeader@1050 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1054 : Record 6650;
      ReturnShptLine@1055 : Record 6651;
      SalesOrderHeader@1056 : Record 36;
      SalesOrderLine@1057 : Record 37;
      SalesShptHeader@1058 : Record 110;
      SalesShptLine@1059 : Record 111;
      ItemChargeAssgntPurch@1045 : Record 5805;
      TempItemChargeAssgntPurch@1060 : TEMPORARY Record 5805;
      GenJnlLine@1061 : Record 81;
      ItemJnlLine@1062 : Record 83;
      SourceCodeSetup@1065 : Record 242;
      SourceCode@1066 : Record 230;
      InvPostingBuffer@1069 : ARRAY [2] OF TEMPORARY Record 49;
      DropShptPostBuffer@1070 : TEMPORARY Record 223;
      Currency@1073 : Record 4;
      VendLedgEntry@1075 : Record 25;
      WhseRcptHeader@1023 : Record 7316;
      TempWhseRcptHeader@1142 : TEMPORARY Record 7316;
      WhseShptHeader@1143 : Record 7320;
      TempWhseShptHeader@1145 : TEMPORARY Record 7320;
      PostedWhseRcptHeader@1140 : Record 7318;
      PostedWhseRcptLine@1146 : Record 7319;
      PostedWhseShptHeader@1147 : Record 7322;
      PostedWhseShptLine@1151 : Record 7323;
      Location@1085 : Record 14;
      TempHandlingSpecification@1094 : TEMPORARY Record 336;
      TempTrackingSpecification@1137 : TEMPORARY Record 336;
      TempTrackingSpecificationInv@1158 : TEMPORARY Record 336;
      TempWhseSplitSpecification@1160 : TEMPORARY Record 336;
      TempValueEntryRelation@5555 : TEMPORARY Record 6508;
      ReservationEntry2@1170 : Record 337;
      ReservationEntry3@1171 : TEMPORARY Record 337;
      ItemJnlLine2@1164 : Record 83;
      Job@1093 : Record 11072003;
      TempICGenJnlLine@11093 : TEMPORARY Record 81;
      TempPrepmtDeductLCYPurchLine@1190 : TEMPORARY Record 39;
      TempSKU@1081 : TEMPORARY Record 5700;
      TotalDeferralHeader@1071 : Record 1701;
      DeferralPostBuffer@1049 : ARRAY [2] OF Record 1703;
      TempDeferralHeader@1203 : TEMPORARY Record 1701;
      TempDeferralLine@1235 : TEMPORARY Record 1702;
      GenJnlPostLine@1087 : Codeunit 12;
      ItemJnlPostLine@1089 : Codeunit 22;
      PurchCalcDisc@1090 : Codeunit 70;
      SalesTaxCalculate@1091 : Codeunit 398;
      ReservePurchLine@1092 : Codeunit 99000834;
      ApprovalsMgmt@1250 : Codeunit 1535;
      WhsePurchRelease@1097 : Codeunit 5772;
      SalesPost@1101 : Codeunit 80;
      ItemTrackingMgt@1138 : Codeunit 6500;
      WMSMgmt@1139 : Codeunit 7302;
      WhseJnlPostLine@1100 : Codeunit 7301;
      WhsePostRcpt@1148 : Codeunit 5760;
      WhsePostShpt@1149 : Codeunit 5763;
      CostCalcMgt@1162 : Codeunit 5836;
      JobPostLine@1172 : Codeunit 11072006;
      ReservePurchLine2@1088 : Codeunit 99000834;
      ServItemMgt@1063 : Codeunit 5920;
      DeferralUtilities@1051 : Codeunit 1720;
      Window@1102 : Dialog;
      PostingDate@1103 : Date;
      Usedate@1104 : Date;
      GenJnlLineDocNo@1105 : Code[20];
      GenJnlLineExtDocNo@1106 : Code[35];
      SrcCode@1107 : Code[10];
      ItemLedgShptEntryNo@1108 : Integer;
      GenJnlLineDocType@1110 : Integer;
      FALineNo@1111 : Integer;
      RoundingLineNo@1112 : Integer;
      DeferralLineNo@1053 : Integer;
      InvDefLineNo@1064 : Integer;
      RemQtyToBeInvoiced@1114 : Decimal;
      RemQtyToBeInvoicedBase@1115 : Decimal;
      QtyToBeInvoiced@1116 : Decimal;
      QtyToBeInvoicedBase@1117 : Decimal;
      RemAmt@1135 : Decimal;
      RemDiscAmt@1136 : Decimal;
      LastLineRetrieved@1119 : Boolean;
      RoundingLineInserted@1120 : Boolean;
      DropShipOrder@1121 : Boolean;
      PostingDateExists@1122 : Boolean;
      ReplacePostingDate@1123 : Boolean;
      ReplaceDocumentDate@1124 : Boolean;
      GLSetupRead@1130 : Boolean;
      Text039@1098 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in return shipment %1';
      Text040@1099 : TextConst 'ENU=Return shipment lines have been deleted.';
      Text041@1132 : TextConst 'ENU=You cannot invoice return order %1 for more than you have shipped.';
      Text99000000@1035 : TextConst 'ENU=Post sales order %1 before posting this purchase order.';
      Text042@1165 : TextConst 'ENU=Related item ledger entries cannot be found.';
      Text043@1173 : TextConst 'ENU=Item Tracking is signed wrongly.';
      Text044@1163 : TextConst 'ENU=Item Tracking does not match.';
      Text045@1155 : TextConst 'ENU=is not within your range of allowed posting dates.';
      Text046@1144 : TextConst 'ENU=The %1 does not match the quantity defined in item tracking for item %2.';
      Text047@1141 : TextConst 'ENU=cannot be more than %1.';
      Text048@1129 : TextConst 'ENU=must be at least %1.';
      ItemChargeAssgntOnly@1133 : Boolean;
      ItemJnlRollRndg@1134 : Boolean;
      WhseReceive@1113 : Boolean;
      WhseShip@1150 : Boolean;
      InvtPickPutaway@1154 : Boolean;
      JobItem@1189 : Boolean;
      PositiveWhseEntrycreated@1191 : Boolean;
      Text050@1177 : TextConst 'ENU=The total %1 cannot be more than %2.';
      Text051@1178 : TextConst 'ENU=The total %1 must be at least %2.';
      Text052Qst@1175 : TextConst 'ENU=An unposted invoice for order %1 exists. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post order %1?';
      Text053Qst@1176 : TextConst 'ENU=An invoice for order %1 exists in the IC inbox. To avoid duplicate postings, cancel invoice %2 in the IC inbox.\Do you still want to post order %1?';
      Text054Qst@1179 : TextConst 'ENU=Posted invoice %1 already exists for order %2. To avoid duplicate postings, do not post order %2.\Do you still want to post order %2?';
      Text055Qst@1180 : TextConst 'ENU=Order %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post invoice %2?';
      Text056Qst@1181 : TextConst 'ENU=A document originating from the same IC transaction as document %1 exists in the IC inbox. To avoid duplicate postings, cancel document %2 in the IC inbox.\Do you still want to post document %1?';
      Text057Qst@1182 : TextConst 'ENU=Posted invoice %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, do not post invoice %2.\Do you still want to post invoice %2?';
      Text059@1102601000 : TextConst 'ENU=You must assign item charge %1 if you want to invoice it.';
      Text060@1102601001 : TextConst 'ENU=You can not invoice item charge %1 because there is no item ledger entry to assign it to.';
      PurchaseLinesProcessed@1080 : Boolean;
      Text061Qst@1200 : TextConst '@@@="One or more reservation entries exist for the item with No. = 1000, Location Code = SILVER, Variant Code = NEW which may be disrupted if you post this negative adjustment. Do you want to continue?";ENU="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?"';
      Text062Err@1199 : TextConst 'ENU=The order line that the item charge was originally assigned to has been fully posted. You must reassign the item charge to the posted receipt or shipment.';
      PreviewMode@1036 : Boolean;
      NoDeferralScheduleErr@1068 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=You must create a deferral schedule because you have specified the deferral code %2 in line %1.';
      ZeroDeferralAmtErr@1067 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      CannotPostDiscountDeferralErr@1076 : TextConst '@@@=@1 - Line No., %2 - Line/Inv. Discount Amount field name.;ENU=You cannot post line %1 because it contains a deferral code and a %2.';
      "<DC>"@1193 : Boolean;
      RelPurchHeader@1192 : Record 38;
      PurchHeaderDCInfo@6085707 : Record 6085767;
      PurchDocLineRelMgt@1188 : Codeunit 6085761;
      WebSearchMgnt@1168 : Codeunit 6085748;
      "</DC>"@1096 : Boolean;
      PurchReceiptHeader@11012014 : Record 120;
      GenJnlLine1@11012025 : Record 81;
      ProjRec@11012043 : Record 11072003;
      ProjTypeRec@11012044 : Record 11012009;
      DimValRec@11012045 : Record 349;
      ICRec@11012046 : Record 11012057;
      ICEntryRec@11012047 : Record 11012058;
      SurchargePostingBuffer@11012049 : ARRAY [2] OF TEMPORARY Record 49;
      RequisitionPostingBuffer@1100485005 : ARRAY [2] OF TEMPORARY Record 49;
      ComplWIPPostingBuffer@1100485004 : ARRAY [2] OF TEMPORARY Record 49;
      JobJnlLine@1100525001 : Record 11072008;
      PlantLedgerEntry@1210190000 : Record 11012572;
      TmpPlantLocChargePO@1100409000 : TEMPORARY Record 11012579;
      PurchRcptLine1@11012051 : Record 121;
      PurchHeadExtensionRec@1100525004 : Record 11020398;
      PostPlantEntry@1210190002 : Codeunit 11012569;
      ProjInventPostLineCU@1210190005 : Codeunit 11012670;
      ConsentManagCU@1100485006 : Codeunit 11012132;
      ReceiptsInBundles@11012086 : Boolean;
      ReceiptHeaderExists@11012087 : Boolean;
      RemAmntToBeInvoiced@1000000000 : Decimal;
      AmntToBeInvoiced@1000000001 : Decimal;
      JobSetupRec@1210190003 : Record 315;
      ICJobSetupRec@1210190014 : Record 315;
      InventSetupRec@1210190009 : Record 313;
      ServOrderRec@1210190015 : Record 11012823;
      ServJnlLine@1210190007 : Record 11012820;
      OnHoldRec@1100485009 : Record 11012031;
      RetentionPostingBuffer@1100528501 : ARRAY [2] OF TEMPORARY Record 49;
      Item@1100528503 : Record 27;
      JobJnlPostLine@1100525002 : Codeunit 11072003;
      ServJnlPostLine@1210190006 : Codeunit 11012802;
      Text11012000@1210190013 : TextConst 'ENU=must be WIP Account %1';
      Text11012002@1210190012 : TextConst 'ENU=%1 may not exceed %2 in %3 %4';
      Text11012003@1210190011 : TextConst 'ENU=%1 %2 of Order %3 in use for Receipt %4. Use %1 anyway ?';
      Text11012004@1210190010 : TextConst 'ENU=is not equal to entries balance';
      RouteRefMgtCU@1210190017 : Codeunit 11012045;
      Text11012005@1100485000 : TextConst 'ENU=%1 must be specified.';
      Text11012006@1100485002 : TextConst 'ENU=Account at Bank Account %1 from Vendor %2 is empty.';
      Text11012007@1100485001 : TextConst 'ENU=Bank Account does not match with Bank No. Check.';
      Text11012008@1100485003 : TextConst 'ENU=must be negative for a return order';
      NSItemTrackingEntriesApply@1100528502 : Codeunit 11012352;
      ReceiptForPlantOrders@1100485034 : Text[250];
      Text11012009@1100485035 : TextConst 'ENU=Note: There are receipts posted for Plant Order(s): %1.';
      Text11012010@1100485010 : TextConst 'ENU=Order %2 already has an invoice (%1). For this order you can only post receipts.';
      gNoErrorNothingToPost@1100525003 : Boolean;
      SkipClearAll@1100525000 : Boolean;
      UptoPromisedReceiveDate@1100525005 : Date;
      Text11012013@1100525009 : TextConst 'ENU=%1 %2: %3';
      Text11012018@1100528500 : TextConst 'ENU=may only be selected when %1 is %2';
      DocumentRetentionAmount@1210190004 : Decimal;
      RetentionType@1210190016 : 'No Retention,Contract,Warranty';
      JobLedgEntryNo@1100528506 : Integer;
      ServLedgEntryNo@1100528507 : Integer;
      Text11012019@1100529101 : TextConst 'ENU=You must specify either %1 or %2.';
      PlotNoReceipts@1100525006 : Code[10];
      gReceiveMarkedOnly@1100409003 : Boolean;
      TempApprovalCommentLine@1100409004 : TEMPORARY Record 455;
      DCSetupRead@1100528201 : Boolean;
      DocumentCaptureSetup@1100528200 : Record 6085573;
      Text11012020@1100528800 : TextConst 'ENU=Posting receipt is not allowed. %1 is empty in %2 %3.';
      ConsentUserSetup@1100525007 : Record 11012229;
      PlantSetup@1100525008 : Record 11012550;
      GLAcc@1100525012 : Record 15;
      DimMgt@1100525010 : Codeunit 408;

    PROCEDURE SetPostingDate@1(NewReplacePostingDate@1000 : Boolean;NewReplaceDocumentDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      PostingDateExists := TRUE;
      ReplacePostingDate := NewReplacePostingDate;
      ReplaceDocumentDate := NewReplaceDocumentDate;
      PostingDate := NewPostingDate;
    END;

    LOCAL PROCEDURE PostItemJnlLine@2(PurchLine@1000 : Record 39;QtyToBeReceived@1001 : Decimal;QtyToBeReceivedBase@1002 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;ItemChargeNo@1006 : Code[20];TrackingSpecification@1010 : Record 336) : Integer;
    VAR
      ItemChargePurchLine@1008 : Record 39;
      OriginalItemJnlLine@1014 : Record 83;
      TempWhseJnlLine@1012 : TEMPORARY Record 7311;
      TempWhseTrackingSpecification@1016 : TEMPORARY Record 336;
      TempWhseJnlLine2@1011 : TEMPORARY Record 7311;
      CurrExchRate@1007 : Record 330;
      Factor@1009 : Decimal;
      PostWhseJnlLine@1013 : Boolean;
      CheckApplToItemEntry@1015 : Boolean;
      PostJobConsumptionBeforePurch@1018 : Boolean;
      NextReservationEntryNo@1017 : Integer;
    BEGIN
      IF NOT ItemJnlRollRndg THEN BEGIN
        RemAmt := 0;
        RemDiscAmt := 0;
      END;
      WITH PurchLine DO BEGIN
        ItemJnlLine.INIT;
        ItemJnlLine."Posting Date" := PurchHeader."Posting Date";
        ItemJnlLine."Document Date" := PurchHeader."Document Date";
        ItemJnlLine."Source Posting Group" := PurchHeader."Vendor Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := PurchHeader."Purchaser Code";
        ItemJnlLine."Country/Region Code" := PurchHeader."Buy-from Country/Region Code";
        ItemJnlLine."Reason Code" := PurchHeader."Reason Code";
        ItemJnlLine."Country/Region of Origin/Dest." := PurchHeader."Country of Destination";  //**4PS.n
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine.Description := Description;
        ItemJnlLine."Description 2" := "Description 2";  //**4PS01.n
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Dimension Set ID" := "Dimension Set ID";
        ItemJnlLine."Cost Component" := "Cost Component";  //**4PS.n
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Item Category Code" := "Item Category Code";
        ItemJnlLine."Product Group Code" := "Product Group Code";
        ItemJnlLine."Inventory Posting Group" := "Posting Group";
        ItemJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Serial No." := TrackingSpecification."Serial No.";
        ItemJnlLine."Lot No." := TrackingSpecification."Lot No.";
        ItemJnlLine."Job No." := "Job No.";
        ItemJnlLine."Job Task No." := "Job Task No.";
        IF ItemJnlLine."Job No." <> '' THEN
          ItemJnlLine."Job Purchase" := TRUE;
        ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
        ItemJnlLine."Transaction Type" := "Transaction Type";
        ItemJnlLine."Transport Method" := "Transport Method";
        ItemJnlLine."Entry/Exit Point" := "Entry Point";
        ItemJnlLine.Area := Area;
        ItemJnlLine."Transaction Specification" := "Transaction Specification";
        ItemJnlLine."Drop Shipment" := "Drop Shipment";
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Purchase;
        IF "Prod. Order No." <> '' THEN BEGIN
          ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Production;
          ItemJnlLine."Order No." := "Prod. Order No.";
          ItemJnlLine."Order Line No." := "Prod. Order Line No.";
        END;
        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Cross-Reference No." := "Cross-Reference No.";
        IF QtyToBeReceived = 0 THEN BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Credit Memo"
          ELSE
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Invoice";
          ItemJnlLine."Document No." := GenJnlLineDocNo;
          ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
          ItemJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
          IF QtyToBeInvoiced <> 0 THEN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
        END ELSE BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Return Shipment";
            ItemJnlLine."Document No." := ReturnShptHeader."No.";
            ItemJnlLine."External Document No." := ReturnShptHeader."Vendor Authorization No.";
            ItemJnlLine."Posting No. Series" := ReturnShptHeader."No. Series";
          END ELSE BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Receipt";
            ItemJnlLine."Document No." := PurchRcptHeader."No.";
            ItemJnlLine."External Document No." := PurchRcptHeader."Vendor Shipment No.";
            ItemJnlLine."Posting No. Series" := PurchRcptHeader."No. Series";
          END;
          IF QtyToBeInvoiced <> 0 THEN BEGIN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
            IF ItemJnlLine."Document No." = '' THEN BEGIN
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Credit Memo"
              ELSE
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Invoice";
              ItemJnlLine."Document No." := GenJnlLineDocNo;
            END;
            ItemJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
          END;
        END;

        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine.Quantity := QtyToBeReceived;
        ItemJnlLine."Quantity (Base)" := QtyToBeReceivedBase;
        ItemJnlLine."Invoiced Quantity" := QtyToBeInvoiced;
        ItemJnlLine."Invoiced Qty. (Base)" := QtyToBeInvoicedBase;
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
        ItemJnlLine."Source Currency Code" := PurchHeader."Currency Code";
        ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
        ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";
        IF ItemChargeNo <> '' THEN BEGIN
          ItemJnlLine."Item Charge No." := ItemChargeNo;
          "Qty. to Invoice" := QtyToBeInvoiced;
        END;
        IF (NOT Item.GET("Item No.")) THEN
          Item.INIT;
        IF (Item."Reason Code F-Gases Mandatory") OR ("Reason Code" <> '') THEN
          ItemJnlLine."Reason Code" := "Reason Code";

        IF QtyToBeInvoiced <> 0 THEN BEGIN
          IF (QtyToBeInvoicedBase <> 0) AND (Type = Type::Item)THEN
            Factor := QtyToBeInvoicedBase / "Qty. to Invoice (Base)"
          ELSE
            Factor := QtyToBeInvoiced / "Qty. to Invoice";
          ItemJnlLine.Amount := Amount * Factor + RemAmt;
          IF PurchHeader."Prices Including VAT" THEN
            ItemJnlLine."Discount Amount" :=
              ("Line Discount Amount" + "Inv. Discount Amount") / (1 + "VAT %" / 100) * Factor + RemDiscAmt
          ELSE
            ItemJnlLine."Discount Amount" :=
              ("Line Discount Amount" + "Inv. Discount Amount") * Factor + RemDiscAmt;
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          RemDiscAmt := ItemJnlLine."Discount Amount" - ROUND(ItemJnlLine."Discount Amount");
          ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
          ItemJnlLine."Discount Amount" := ROUND(ItemJnlLine."Discount Amount");
        END ELSE BEGIN
          IF PurchHeader."Prices Including VAT" THEN
            ItemJnlLine.Amount :=
              (QtyToBeReceived * "Direct Unit Cost" * (1 - "Line Discount %" / 100) / (1 + "VAT %" / 100)) + RemAmt
          ELSE
            ItemJnlLine.Amount :=
              (QtyToBeReceived * "Direct Unit Cost" * (1 - "Line Discount %" / 100)) + RemAmt;
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          IF PurchHeader."Currency Code" <> '' THEN
            ItemJnlLine.Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  0, '', //**4PS.n
                  PurchHeader."Posting Date",PurchHeader."Currency Code",
      //          ItemJnlLine.Amount,PurchHeader."Currency Factor")) //**4PS.o
                  ItemJnlLine.Amount,PurchHeader."Currency Factor",FALSE)) //**4PS.n
          ELSE
            ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
        END;

        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Vendor;
        ItemJnlLine."Source No." := "Buy-from Vendor No.";
        ItemJnlLine."Invoice-to Source No." := "Pay-to Vendor No.";
        ItemJnlLine."Source Code" := SrcCode;
        ItemJnlLine."Purchasing Code" := "Purchasing Code";

        IF "Prod. Order No." <> '' THEN BEGIN
          ItemJnlLine.Subcontracting := TRUE;
          ItemJnlLine."Quantity (Base)" := CalcBaseQty("No.","Unit of Measure Code",QtyToBeReceived);
          ItemJnlLine."Invoiced Qty. (Base)" := CalcBaseQty("No.","Unit of Measure Code",QtyToBeInvoiced);
          ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
          ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
          ItemJnlLine."Output Quantity (Base)" := ItemJnlLine."Quantity (Base)";
          ItemJnlLine."Output Quantity" := QtyToBeReceived;
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Output;
          ItemJnlLine.Type := ItemJnlLine.Type::"Work Center";
          ItemJnlLine."No." := "Work Center No.";
          ItemJnlLine."Routing No." := "Routing No.";
          ItemJnlLine."Routing Reference No." := "Routing Reference No.";
          ItemJnlLine."Operation No." := "Operation No.";
          ItemJnlLine."Work Center No." := "Work Center No.";
          ItemJnlLine."Unit Cost Calculation" := ItemJnlLine."Unit Cost Calculation"::Units;
          IF Finished THEN
            ItemJnlLine.Finished := Finished;
        END;

        ItemJnlLine."Item Shpt. Entry No." := ItemLedgShptEntryNo;
        ItemJnlLine."Indirect Cost %" := "Indirect Cost %";
        ItemJnlLine."Overhead Rate" := "Overhead Rate";
        ItemJnlLine."Return Reason Code" := "Return Reason Code";

        CheckApplToItemEntry :=
          PurchSetup."Exact Cost Reversing Mandatory" AND
          (Type = Type::Item) AND
          (((Quantity < 0) AND ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice])) OR
           ((Quantity > 0) AND ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))) AND
          ("Job No." = '');

        IF ("Location Code" <> '') AND
           (Type = Type::Item) AND
           (ItemJnlLine.Quantity <> 0) AND
           NOT ItemJnlLine.Subcontracting
        THEN BEGIN
          GetLocation("Location Code");
          IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
              Location."Directed Put-away and Pick") OR
             (Location."Bin Mandatory" AND NOT (WhseReceive OR WhseShip OR InvtPickPutaway OR "Drop Shipment"))
          THEN BEGIN
            CreateWhseJnlLine(ItemJnlLine,PurchLine,TempWhseJnlLine);
            PostWhseJnlLine := TRUE;
          END;
        END;
        ReservationEntry3.DELETEALL;
        CLEAR(ItemJnlLine2);
        ItemJnlLine2 := ItemJnlLine;

        IF "Job No." <> '' THEN BEGIN
          ReservePurchLine2.FindReservEntry(PurchLine,ReservationEntry2);
          IF ReservationEntry2.FIND('-') THEN
            REPEAT
              ReservationEntry3 := ReservationEntry2;
              ReservationEntry3.INSERT;
            UNTIL ReservationEntry2.NEXT = 0;
        END;

        IF QtyToBeReceivedBase <> 0 THEN BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchLine,ItemJnlLine,-QtyToBeReceivedBase,CheckApplToItemEntry)
          ELSE
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchLine,ItemJnlLine,QtyToBeReceivedBase,CheckApplToItemEntry);

          IF CheckApplToItemEntry AND (NOT IsServiceItem) THEN
            TESTFIELD("Appl.-to Item Entry");
        END;

        OriginalItemJnlLine := ItemJnlLine;

        IF "Job No." <> '' THEN BEGIN
          PostJobConsumptionBeforePurch :=
            ItemJnlLine.IsPurchaseReturn;
          IF PostJobConsumptionBeforePurch THEN
            PostItemJrnlLineJobConsumption(PurchLine,
              NextReservationEntryNo,
              QtyToBeInvoiced,
              QtyToBeInvoicedBase,
              QtyToBeReceived,
              QtyToBeReceivedBase,
              CheckApplToItemEntry);
        END;

        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
        CheckUpdateItemPrice(PurchLine);  //**4PS.n (call 11930)

        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) THEN BEGIN
          IF ItemJnlLine.Subcontracting THEN
            TempHandlingSpecification.DELETEALL;
          IF TempHandlingSpecification.FIND('-') THEN
            REPEAT
              TempTrackingSpecification := TempHandlingSpecification;
              TempTrackingSpecification."Source Type" := DATABASE::"Purchase Line";
              TempTrackingSpecification."Source Subtype" := "Document Type";
              TempTrackingSpecification."Source ID" := "Document No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := "Line No.";
              IF TempTrackingSpecification.INSERT THEN;
              IF QtyToBeInvoiced <> 0 THEN BEGIN
                TempTrackingSpecificationInv := TempTrackingSpecification;
                IF TempTrackingSpecificationInv.INSERT THEN;
              END;
              IF PostWhseJnlLine THEN BEGIN
                TempWhseTrackingSpecification := TempTrackingSpecification;
                IF TempWhseTrackingSpecification.INSERT THEN;
              END;
            UNTIL TempHandlingSpecification.NEXT = 0;
        END;

        IF "Job No." <> '' THEN
          IF NOT PostJobConsumptionBeforePurch THEN
            PostItemJrnlLineJobConsumption(PurchLine,
              NextReservationEntryNo,
              QtyToBeInvoiced,
              QtyToBeInvoicedBase,
              QtyToBeReceived,
              QtyToBeReceivedBase,
              CheckApplToItemEntry);

        IF PostWhseJnlLine THEN BEGIN
          ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseTrackingSpecification,FALSE);
          IF TempWhseJnlLine2.FIND('-') THEN
            REPEAT
              IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                CreatePositiveEntry(TempWhseJnlLine2,"Job No.",PostJobConsumptionBeforePurch);
              WhseJnlPostLine.RUN(TempWhseJnlLine2);
              IF RevertWarehouseEntry(TempWhseJnlLine2,"Job No.",PostJobConsumptionBeforePurch) THEN
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
            UNTIL TempWhseJnlLine2.NEXT = 0;
          TempWhseTrackingSpecification.DELETEALL;
        END;

        IF (Type = Type::Item) AND PurchHeader.Invoice THEN BEGIN
          ClearItemChargeAssgntFilter;
          TempItemChargeAssgntPurch.SETCURRENTKEY(
            "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
          IF TempItemChargeAssgntPurch.FIND('-') THEN
            REPEAT
              TESTFIELD("Allow Item Charge Assignment");
              GetItemChargeLine(ItemChargePurchLine);
              ItemChargePurchLine.CALCFIELDS("Qty. Assigned");
              IF (ItemChargePurchLine."Qty. to Invoice" <> 0) OR
                 (ABS(ItemChargePurchLine."Qty. Assigned") < ABS(ItemChargePurchLine."Quantity Invoiced"))
              THEN BEGIN
                OriginalItemJnlLine."Item Shpt. Entry No." := ItemJnlLine."Item Shpt. Entry No.";
                PostItemChargePerOrder(OriginalItemJnlLine,ItemChargePurchLine);
                TempItemChargeAssgntPurch.MARK(TRUE);
              END;
            UNTIL TempItemChargeAssgntPurch.NEXT = 0;
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE PostItemChargePerOrder@5801(ItemJnlLine2@1001 : Record 83;ItemChargePurchLine@1002 : Record 39);
    VAR
      NonDistrItemJnlLine@1000 : Record 83;
      CurrExchRate@1003 : Record 330;
      OriginalAmt@1007 : Decimal;
      OriginalAmtACY@1008 : Decimal;
      OriginalDiscountAmt@1009 : Decimal;
      OriginalQty@1010 : Decimal;
      QtyToInvoice@1004 : Decimal;
      Factor@1005 : Decimal;
      TotalChargeAmt2@1011 : Decimal;
      TotalChargeAmtLCY2@1012 : Decimal;
      SignFactor@1006 : Integer;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        PurchLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
        ItemJnlLine2."Document No." := GenJnlLineDocNo;
        ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
        ItemJnlLine2."Item Charge No." := "Item Charge No.";
        ItemJnlLine2.Description := ItemChargePurchLine.Description;
        ItemJnlLine2."Description 2" := ItemChargePurchLine."Description 2";  //**4PS01.n
        ItemJnlLine2."Document Line No." := ItemChargePurchLine."Line No.";
        ItemJnlLine2."Unit of Measure Code" := '';
        ItemJnlLine2."Qty. per Unit of Measure" := 1;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          QtyToInvoice :=
            CalcQtyToInvoice(PurchLine."Return Qty. to Ship (Base)",PurchLine."Qty. to Invoice (Base)")
        ELSE
          QtyToInvoice :=
            CalcQtyToInvoice(PurchLine."Qty. to Receive (Base)",PurchLine."Qty. to Invoice (Base)");
        IF ItemJnlLine2."Invoiced Quantity" = 0 THEN BEGIN
          ItemJnlLine2."Invoiced Quantity" := ItemJnlLine2.Quantity;
          ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
        END;
        ItemJnlLine2.Amount := "Amount to Assign" * ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          ItemJnlLine2.Amount := -ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost (ACY)" :=
          ROUND(
            ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
            Currency."Unit-Amount Rounding Precision");

        TotalChargeAmt2 := TotalChargeAmt2 + ItemJnlLine2.Amount;
        IF PurchHeader."Currency Code" <> '' THEN BEGIN
          ItemJnlLine2.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              0, '', //**4PS.n
              Usedate,PurchHeader."Currency Code",
      //      TotalChargeAmt2 + TotalPurchLine.Amount,PurchHeader."Currency Factor") - //**4PS.o
              TotalChargeAmt2 + TotalPurchLine.Amount,PurchHeader."Currency Factor",FALSE) - //**4PS.n
            TotalChargeAmtLCY2 - TotalPurchLineLCY.Amount;
        END ELSE
          ItemJnlLine2.Amount := TotalChargeAmt2 - TotalChargeAmtLCY2;

        ItemJnlLine2.Amount := ROUND(ItemJnlLine2.Amount);
        TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost" := ROUND(
            ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",GLSetup."Unit-Amount Rounding Precision");
        ItemJnlLine2."Applies-to Entry" := ItemJnlLine2."Item Shpt. Entry No.";
        ItemJnlLine2."Overhead Rate" := 0;

        IF PurchHeader."Currency Code" <> '' THEN
          ItemJnlLine2."Discount Amount" := ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                Usedate,PurchHeader."Currency Code",(ItemChargePurchLine."Inv. Discount Amount" +
                                                     ItemChargePurchLine."Line Discount Amount") *
                ItemJnlLine2."Invoiced Qty. (Base)" /
                ItemChargePurchLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
              //PurchHeader."Currency Factor"),GLSetup."Amount Rounding Precision") //**4PS.o
                PurchHeader."Currency Factor",FALSE),GLSetup."Amount Rounding Precision") //**4PS.n
        ELSE
          ItemJnlLine2."Discount Amount" := ROUND(
              (ItemChargePurchLine."Line Discount Amount" + ItemChargePurchLine."Inv. Discount Amount") *
              ItemJnlLine2."Invoiced Qty. (Base)" /
              ItemChargePurchLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
              GLSetup."Amount Rounding Precision");

        ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargePurchLine."Shortcut Dimension 1 Code";
        ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargePurchLine."Shortcut Dimension 2 Code";
        ItemJnlLine2."Dimension Set ID" := ItemChargePurchLine."Dimension Set ID";
        ItemJnlLine2."Cost Component" := ItemChargePurchLine."Cost Component";  //**4PS.n
        ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargePurchLine."Gen. Prod. Posting Group";
      END;

      WITH TempTrackingSpecificationInv DO BEGIN
        RESET;
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source ID",TempItemChargeAssgntPurch."Applies-to Doc. No.");
        SETRANGE("Source Ref. No.",TempItemChargeAssgntPurch ."Applies-to Doc. Line No.");
        IF ISEMPTY THEN
          ItemJnlPostLine.RunWithCheck(ItemJnlLine2)
        ELSE BEGIN
          FINDSET;
          NonDistrItemJnlLine := ItemJnlLine2;
          OriginalAmt := NonDistrItemJnlLine.Amount;
          OriginalAmtACY := NonDistrItemJnlLine."Amount (ACY)";
          OriginalDiscountAmt := NonDistrItemJnlLine."Discount Amount";
          OriginalQty := NonDistrItemJnlLine."Quantity (Base)";
          IF ("Quantity (Base)" / OriginalQty) > 0 THEN
            SignFactor := 1
          ELSE
            SignFactor := -1;
          REPEAT
            Factor := "Quantity (Base)" / OriginalQty * SignFactor;
            IF ABS("Quantity (Base)") < ABS(NonDistrItemJnlLine."Quantity (Base)") THEN BEGIN
              ItemJnlLine2."Quantity (Base)" := "Quantity (Base)";
              ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
              ItemJnlLine2."Amount (ACY)" :=
                ROUND(OriginalAmtACY * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2.Amount :=
                ROUND(OriginalAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Unit Cost (ACY)" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                  Currency."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Unit Cost" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Discount Amount" :=
                ROUND(OriginalDiscountAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Item Shpt. Entry No." := "Item Ledger Entry No.";
              ItemJnlLine2."Applies-to Entry" := "Item Ledger Entry No.";
              ItemJnlLine2."Lot No." := "Lot No.";
              ItemJnlLine2."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(ItemJnlLine2);
              ItemJnlLine2."Location Code" := NonDistrItemJnlLine."Location Code";
              NonDistrItemJnlLine."Quantity (Base)" -= "Quantity (Base)";
              NonDistrItemJnlLine.Amount -= (ItemJnlLine2.Amount * SignFactor);
              NonDistrItemJnlLine."Amount (ACY)" -= (ItemJnlLine2."Amount (ACY)" * SignFactor);
              NonDistrItemJnlLine."Discount Amount" -= (ItemJnlLine2."Discount Amount" * SignFactor);
            END ELSE BEGIN
              NonDistrItemJnlLine."Quantity (Base)" := "Quantity (Base)";
              NonDistrItemJnlLine."Invoiced Qty. (Base)" := "Quantity (Base)";
              NonDistrItemJnlLine."Unit Cost" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              NonDistrItemJnlLine."Unit Cost (ACY)" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                  Currency."Unit-Amount Rounding Precision") * SignFactor;
              NonDistrItemJnlLine."Item Shpt. Entry No." := "Item Ledger Entry No.";
              NonDistrItemJnlLine."Applies-to Entry" := "Item Ledger Entry No.";
              NonDistrItemJnlLine."Lot No." := "Lot No.";
              NonDistrItemJnlLine."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(NonDistrItemJnlLine);
              NonDistrItemJnlLine."Location Code" := ItemJnlLine2."Location Code";
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerRcpt@5807(VAR PurchLine@1000 : Record 39);
    VAR
      PurchRcptLine@1002 : Record 121;
      TempItemLedgEntry@1003 : TEMPORARY Record 32;
      ItemTrackingMgt@1005 : Codeunit 6500;
      Factor@1004 : Decimal;
      NonDistrQuantity@1010 : Decimal;
      NonDistrQtyToAssign@1009 : Decimal;
      NonDistrAmountToAssign@1008 : Decimal;
      QtyToAssign@1007 : Decimal;
      AmountToAssign@1006 : Decimal;
      Sign@1011 : Decimal;
      DistributeCharge@1001 : Boolean;
    BEGIN
      IF NOT PurchRcptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      THEN
        ERROR(Text014);

      Sign := GetSign(PurchRcptLine."Quantity (Base)");

      IF PurchRcptLine."Item Rcpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,PurchRcptLine."Quantity (Base)",PurchRcptLine."Item Rcpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Purch. Rcpt. Line",0,PurchRcptLine."Document No.",
          '',0,PurchRcptLine."Line No.",PurchRcptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := PurchRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,PurchRcptLine."Indirect Cost %");
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,PurchRcptLine."Indirect Cost %");
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          PurchRcptLine."Item Rcpt. Entry No.",PurchRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",
          PurchRcptLine."Indirect Cost %");
    END;

    LOCAL PROCEDURE PostItemChargePerRetShpt@5811(VAR PurchLine@1000 : Record 39);
    VAR
      ReturnShptLine@1002 : Record 6651;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1003 : Decimal;
      Sign@1011 : Decimal;
      DistributeCharge@1001 : Boolean;
    BEGIN
      ReturnShptLine.GET(
        TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
      ReturnShptLine.TESTFIELD("Job No.",'');

      Sign := GetSign(PurchLine."Line Amount");
      WITH PurchLine DO
        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
          Sign := -Sign;

      IF ReturnShptLine."Item Shpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,-ReturnShptLine."Quantity (Base)",ReturnShptLine."Item Shpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Shipment Line",0,ReturnShptLine."Document No.",
          '',0,ReturnShptLine."Line No.",ReturnShptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := -ReturnShptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := ABS(TempItemChargeAssgntPurch."Amount to Assign");
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,ReturnShptLine."Indirect Cost %");
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,ReturnShptLine."Indirect Cost %");
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          ReturnShptLine."Item Shpt. Entry No.",-ReturnShptLine."Quantity (Base)",
          ABS(TempItemChargeAssgntPurch."Amount to Assign") * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",
          ReturnShptLine."Indirect Cost %");
    END;

    LOCAL PROCEDURE PostItemChargePerTransfer@23(VAR PurchLine@1000 : Record 39);
    VAR
      TransRcptLine@1002 : Record 5747;
      ItemApplnEntry@1003 : Record 339;
      DummyTrackingSpecification@1001 : Record 336;
      PurchLine2@1016 : Record 39;
      CurrExchRate@1017 : Record 330;
      TotalAmountToPostFCY@1004 : Decimal;
      TotalAmountToPostLCY@1005 : Decimal;
      TotalDiscAmountToPost@1006 : Decimal;
      AmountToPostFCY@1007 : Decimal;
      AmountToPostLCY@1008 : Decimal;
      DiscAmountToPost@1009 : Decimal;
      RemAmountToPostFCY@1010 : Decimal;
      RemAmountToPostLCY@1011 : Decimal;
      RemDiscAmountToPost@1012 : Decimal;
      CalcAmountToPostFCY@1013 : Decimal;
      CalcAmountToPostLCY@1014 : Decimal;
      CalcDiscAmountToPost@1015 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        TransRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
        PurchLine2 := PurchLine;
        PurchLine2."No." := "Item No.";
        PurchLine2."Variant Code" := TransRcptLine."Variant Code";
        PurchLine2."Location Code" := TransRcptLine."Transfer-to Code";
        PurchLine2."Bin Code" := '';
        PurchLine2."Line No." := "Document Line No.";

        IF TransRcptLine."Item Rcpt. Entry No." = 0 THEN
          PostItemChargePerITTransfer(PurchLine,TransRcptLine)
        ELSE BEGIN
          TotalAmountToPostFCY := "Amount to Assign";
          IF PurchHeader."Currency Code" <> '' THEN
            TotalAmountToPostLCY :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                Usedate,PurchHeader."Currency Code",
      //        TotalAmountToPostFCY,PurchHeader."Currency Factor") //**4PS.o
                TotalAmountToPostFCY,PurchHeader."Currency Factor",FALSE) //**4PS.n
          ELSE
            TotalAmountToPostLCY := TotalAmountToPostFCY;

          TotalDiscAmountToPost :=
            ROUND(
              PurchLine2."Inv. Discount Amount" / PurchLine2.Quantity * "Qty. to Assign",
              GLSetup."Amount Rounding Precision");
          TotalDiscAmountToPost :=
            TotalDiscAmountToPost +
            ROUND(
              PurchLine2."Line Discount Amount" * ("Qty. to Assign" / PurchLine2."Qty. to Invoice"),
              GLSetup."Amount Rounding Precision");

          TotalAmountToPostLCY := ROUND(TotalAmountToPostLCY,GLSetup."Amount Rounding Precision");

          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.",TransRcptLine."Item Rcpt. Entry No.");
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',TransRcptLine."Item Rcpt. Entry No.");
          ItemApplnEntry.SETRANGE("Cost Application",TRUE);
          IF ItemApplnEntry.FINDSET THEN
            REPEAT
              PurchLine2."Appl.-to Item Entry" := ItemApplnEntry."Item Ledger Entry No.";
              CalcAmountToPostFCY :=
                ((TotalAmountToPostFCY / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemAmountToPostFCY;
              AmountToPostFCY := ROUND(CalcAmountToPostFCY);
              RemAmountToPostFCY := CalcAmountToPostFCY - AmountToPostFCY;
              CalcAmountToPostLCY :=
                ((TotalAmountToPostLCY / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemAmountToPostLCY;
              AmountToPostLCY := ROUND(CalcAmountToPostLCY);
              RemAmountToPostLCY := CalcAmountToPostLCY - AmountToPostLCY;
              CalcDiscAmountToPost :=
                ((TotalDiscAmountToPost / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemDiscAmountToPost;
              DiscAmountToPost := ROUND(CalcDiscAmountToPost);
              RemDiscAmountToPost := CalcDiscAmountToPost - DiscAmountToPost;
              PurchLine2.Amount := AmountToPostLCY;
              PurchLine2."Inv. Discount Amount" := DiscAmountToPost;
              PurchLine2."Line Discount Amount" := 0;
              PurchLine2."Unit Cost" :=
                ROUND(AmountToPostFCY / ItemApplnEntry.Quantity,GLSetup."Unit-Amount Rounding Precision");
              PurchLine2."Unit Cost (LCY)" :=
                ROUND(AmountToPostLCY / ItemApplnEntry.Quantity,GLSetup."Unit-Amount Rounding Precision");
              IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                PurchLine2.Amount := -PurchLine2.Amount;
              PostItemJnlLine(
                PurchLine2,
                0,0,
                ItemApplnEntry.Quantity,ItemApplnEntry.Quantity,
                PurchLine2."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
            UNTIL ItemApplnEntry.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerITTransfer@43(VAR PurchLine@1000 : Record 39;TransRcptLine@1017 : Record 5747);
    VAR
      TempItemLedgEntry@1016 : TEMPORARY Record 32;
      ItemTrackingMgt@1001 : Codeunit 6500;
      Factor@1023 : Decimal;
      NonDistrQuantity@1022 : Decimal;
      NonDistrQtyToAssign@1021 : Decimal;
      NonDistrAmountToAssign@1020 : Decimal;
      QtyToAssign@1019 : Decimal;
      AmountToAssign@1018 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Transfer Receipt Line",0,TransRcptLine."Document No.",
          '',0,TransRcptLine."Line No.",TransRcptLine."Quantity (Base)");
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := TransRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := "Qty. to Assign";
          NonDistrAmountToAssign := "Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042);
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerSalesShpt@41(VAR PurchLine@1000 : Record 39);
    VAR
      SalesShptLine@1002 : Record 111;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1003 : Decimal;
      Sign@1001 : Decimal;
      DistributeCharge@1011 : Boolean;
    BEGIN
      IF NOT SalesShptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      THEN
        ERROR(Text042);
      SalesShptLine.TESTFIELD("Job No.",'');

      Sign := -GetSign(SalesShptLine."Quantity (Base)");

      IF SalesShptLine."Item Shpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,-SalesShptLine."Quantity (Base)",SalesShptLine."Item Shpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Sales Shipment Line",0,SalesShptLine."Document No.",
          '',0,SalesShptLine."Line No.",SalesShptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := -SalesShptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          SalesShptLine."Item Shpt. Entry No.",-SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",0)
    END;

    LOCAL PROCEDURE PostItemChargePerRetRcpt@37(VAR PurchLine@1001 : Record 39);
    VAR
      ReturnRcptLine@1000 : Record 6661;
      TempItemLedgEntry@1011 : TEMPORARY Record 32;
      ItemTrackingMgt@1010 : Codeunit 6500;
      Factor@1009 : Decimal;
      NonDistrQuantity@1008 : Decimal;
      NonDistrQtyToAssign@1007 : Decimal;
      NonDistrAmountToAssign@1006 : Decimal;
      QtyToAssign@1005 : Decimal;
      AmountToAssign@1004 : Decimal;
      Sign@1003 : Decimal;
      DistributeCharge@1002 : Boolean;
    BEGIN
      IF NOT ReturnRcptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      THEN
        ERROR(Text042);
      ReturnRcptLine.TESTFIELD("Job No.",'');
      Sign := GetSign(ReturnRcptLine."Quantity (Base)");

      IF ReturnRcptLine."Item Rcpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",ReturnRcptLine."Item Rcpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Receipt Line",0,ReturnRcptLine."Document No.",
          '',0,ReturnRcptLine."Line No.",ReturnRcptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := ReturnRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          ReturnRcptLine."Item Rcpt. Entry No.",ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",0)
    END;

    LOCAL PROCEDURE PostAssocItemJnlLine@3(QtyToBeShipped@1000 : Decimal;QtyToBeShippedBase@1001 : Decimal) : Integer;
    VAR
      TempHandlingSpecification2@1005 : TEMPORARY Record 336;
      ItemEntryRelation@1006 : Record 6507;
      CurrExchRate@1002 : Record 330;
    BEGIN
      SalesOrderHeader.GET(
        SalesOrderHeader."Document Type"::Order,
        PurchLine."Sales Order No.");
      SalesOrderLine.GET(
        SalesOrderLine."Document Type"::Order,
        PurchLine."Sales Order No.",PurchLine."Sales Order Line No.");

      ItemJnlLine.INIT;
      ItemJnlLine."Source Posting Group" := SalesOrderHeader."Customer Posting Group";
      ItemJnlLine."Salespers./Purch. Code" := SalesOrderHeader."Salesperson Code";
      ItemJnlLine."Country/Region Code" := GetCountryCode(SalesOrderLine,SalesOrderHeader);
      ItemJnlLine."Reason Code" := SalesOrderHeader."Reason Code";
      ItemJnlLine."Posting No. Series" := SalesOrderHeader."Posting No. Series";
      ItemJnlLine."Item No." := SalesOrderLine."No.";
      ItemJnlLine.Description := SalesOrderLine.Description;
      ItemJnlLine."Description 2" := SalesOrderLine."Description 2";  //**4PS01.n
      ItemJnlLine."Shortcut Dimension 1 Code" := SalesOrderLine."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
      ItemJnlLine."Dimension Set ID" := SalesOrderLine."Dimension Set ID";
      ItemJnlLine."Cost Component" := SalesOrderLine."Cost Component";  //**4PS.n
      ItemJnlLine."Location Code" := SalesOrderLine."Location Code";
      ItemJnlLine."Inventory Posting Group" := SalesOrderLine."Posting Group";
      ItemJnlLine."Gen. Bus. Posting Group" := SalesOrderLine."Gen. Bus. Posting Group";
      ItemJnlLine."Gen. Prod. Posting Group" := SalesOrderLine."Gen. Prod. Posting Group";
      ItemJnlLine."Applies-to Entry" := SalesOrderLine."Appl.-to Item Entry";
      ItemJnlLine."Transaction Type" := SalesOrderLine."Transaction Type";
      ItemJnlLine."Transport Method" := SalesOrderLine."Transport Method";
      ItemJnlLine."Entry/Exit Point" := SalesOrderLine."Exit Point";
      ItemJnlLine.Area := SalesOrderLine.Area;
      ItemJnlLine."Transaction Specification" := SalesOrderLine."Transaction Specification";
      ItemJnlLine."Drop Shipment" := SalesOrderLine."Drop Shipment";
      ItemJnlLine."Posting Date" := PurchHeader."Posting Date";
      ItemJnlLine."Document Date" := PurchHeader."Document Date";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Sale;
      ItemJnlLine."Document No." := SalesOrderHeader."Shipping No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Shipment";
      ItemJnlLine."Document Line No." := SalesOrderLine."Line No.";
      ItemJnlLine.Quantity := QtyToBeShipped;
      ItemJnlLine."Quantity (Base)" := QtyToBeShippedBase;
      ItemJnlLine."Invoiced Quantity" := 0;
      ItemJnlLine."Invoiced Qty. (Base)" := 0;
      ItemJnlLine."Unit Cost" := SalesOrderLine."Unit Cost (LCY)";
      ItemJnlLine."Source Currency Code" := PurchHeader."Currency Code";
      ItemJnlLine."Unit Cost (ACY)" := SalesOrderLine."Unit Cost";
      ItemJnlLine.Amount := SalesOrderLine.Amount * QtyToBeShipped / SalesOrderLine.Quantity;
      IF SalesOrderHeader."Currency Code" <> '' THEN BEGIN
        ItemJnlLine.Amount :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              0, '', //**4PS.n
              SalesOrderHeader."Posting Date",SalesOrderHeader."Currency Code",
      //      ItemJnlLine.Amount,SalesOrderHeader."Currency Factor")); //**4PS.o
              ItemJnlLine.Amount,SalesOrderHeader."Currency Factor",TRUE)); //**4PS.n
        ItemJnlLine."Discount Amount" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              0, '', //**4PS.n
              SalesOrderHeader."Posting Date",SalesOrderHeader."Currency Code",
      //      SalesOrderLine."Line Discount Amount",SalesOrderHeader."Currency Factor")); //**4PS.o
              SalesOrderLine."Line Discount Amount",SalesOrderHeader."Currency Factor",TRUE)); //**4PS.n
      END ELSE BEGIN
        ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
        ItemJnlLine."Discount Amount" := SalesOrderLine."Line Discount Amount";
      END;
      ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Customer;
      ItemJnlLine."Source No." := SalesOrderLine."Sell-to Customer No.";
      ItemJnlLine."Invoice-to Source No." := SalesOrderLine."Bill-to Customer No.";
      ItemJnlLine."Source Code" := SrcCode;
      ItemJnlLine."Variant Code" := SalesOrderLine."Variant Code";
      ItemJnlLine."Item Category Code" := SalesOrderLine."Item Category Code";
      ItemJnlLine."Product Group Code" := SalesOrderLine."Product Group Code";
      ItemJnlLine."Bin Code" := SalesOrderLine."Bin Code";
      ItemJnlLine."Unit of Measure Code" := SalesOrderLine."Unit of Measure Code";
      ItemJnlLine."Purchasing Code" := SalesOrderLine."Purchasing Code";
      ItemJnlLine."Qty. per Unit of Measure" := SalesOrderLine."Qty. per Unit of Measure";
      ItemJnlLine."Derived from Blanket Order" := SalesOrderLine."Blanket Order No." <> '';
      ItemJnlLine."Applies-to Entry" := ItemLedgShptEntryNo;

      IF SalesOrderLine."Job Contract Entry No." = 0 THEN BEGIN
        TransferReservToItemJnlLine(SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,TRUE);
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
        // Handle Item Tracking
        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
          IF TempHandlingSpecification2.FINDSET THEN
            REPEAT
              TempTrackingSpecification := TempHandlingSpecification2;
              TempTrackingSpecification."Source Type" := DATABASE::"Sales Line";
              TempTrackingSpecification."Source Subtype" := SalesOrderLine."Document Type";
              TempTrackingSpecification."Source ID" := SalesOrderLine."Document No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := SalesOrderLine."Line No.";
              IF TempTrackingSpecification.INSERT THEN;
              ItemEntryRelation.INIT;
              ItemEntryRelation."Item Entry No." := TempHandlingSpecification2."Entry No.";
              ItemEntryRelation."Serial No." := TempHandlingSpecification2."Serial No.";
              ItemEntryRelation."Lot No." := TempHandlingSpecification2."Lot No.";
              ItemEntryRelation."Source Type" := DATABASE::"Sales Shipment Line";
              ItemEntryRelation."Source ID" := SalesOrderHeader."Shipping No.";
              ItemEntryRelation."Source Ref. No." := SalesOrderLine."Line No.";
              ItemEntryRelation."Order No." := SalesOrderLine."Document No.";
              ItemEntryRelation."Order Line No." := SalesOrderLine."Line No.";
              ItemEntryRelation.INSERT;
            UNTIL TempHandlingSpecification2.NEXT = 0;
          EXIT(0);
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE UpdateAssocOrder@4();
    VAR
      ReserveSalesLine@1000 : Codeunit 99000832;
      SalesSetup@1001 : Record 311;
    BEGIN
      DropShptPostBuffer.RESET;
      IF DropShptPostBuffer.ISEMPTY THEN
        EXIT;
      SalesSetup.GET;
      IF DropShptPostBuffer.FINDSET THEN BEGIN
        REPEAT
          SalesOrderHeader.GET(
            SalesOrderHeader."Document Type"::Order,
            DropShptPostBuffer."Order No.");
          SalesOrderHeader."Last Shipping No." := SalesOrderHeader."Shipping No.";
          SalesOrderHeader."Shipping No." := '';
          SalesOrderHeader.MODIFY;
          ReserveSalesLine.UpdateItemTrackingAfterPosting(SalesOrderHeader);
          DropShptPostBuffer.SETRANGE("Order No.",DropShptPostBuffer."Order No.");
          REPEAT
            SalesOrderLine.GET(
              SalesOrderLine."Document Type"::Order,
              DropShptPostBuffer."Order No.",DropShptPostBuffer."Order Line No.");
            SalesOrderLine."Quantity Shipped" := SalesOrderLine."Quantity Shipped" + DropShptPostBuffer.Quantity;
            SalesOrderLine."Qty. Shipped (Base)" := SalesOrderLine."Qty. Shipped (Base)" + DropShptPostBuffer."Quantity (Base)";
            SalesOrderLine.InitOutstanding;
            IF SalesSetup."Default Quantity to Ship" <> SalesSetup."Default Quantity to Ship"::Blank THEN
              SalesOrderLine.InitQtyToShip
            ELSE BEGIN
              SalesOrderLine."Qty. to Ship" := 0;
              SalesOrderLine."Qty. to Ship (Base)" := 0;
            END;
            SalesOrderLine.MODIFY;
          UNTIL DropShptPostBuffer.NEXT = 0;
          DropShptPostBuffer.SETRANGE("Order No.");
        UNTIL DropShptPostBuffer.NEXT = 0;
        DropShptPostBuffer.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE FillInvPostingBuffer@5804(PurchLine@1000 : Record 39;PurchLineACY@1001 : Record 39);
    VAR
      GenPostingSetup@1007 : Record 252;
      DeprBook@1006 : Record 5611;
      TotalVAT@1005 : Decimal;
      TotalVATACY@1004 : Decimal;
      TotalAmount@1003 : Decimal;
      TotalAmountACY@1002 : Decimal;
      AmtToDefer@1011 : Decimal;
      AmtToDeferACY@1010 : Decimal;
      DeferralAccount@1009 : Code[20];
      PurchAccount@1008 : Code[20];
      lvAccountNo@1100525000 : Code[20];
    BEGIN
      GenPostingSetup.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
      InvPostingBuffer[1].PreparePurchase(PurchLine);

      //**4PS.sn
      lvAccountNo := PurchLine."No.";
      WITH PurchLine DO BEGIN
        InvPostingBuffer[1]."Cost Component" := "Cost Component";
        InvPostingBuffer[1].Element := Element;
        InvPostingBuffer[1]."Service Order No." := "Service Order No.";
        InvPostingBuffer[1]."Service Contract No." := "Service Contract No.";
        InvPostingBuffer[1].Description := PurchLineACY.Description;
        InvPostingBuffer[1]."Description 2" := PurchLineACY."Description 2";
        InvPostingBuffer[1]."Employee No." := "Employee No.";
        IF InvPostingBuffer[1]."Service Contract No." <> '' THEN
          InvPostingBuffer[1]."Origin Type" := InvPostingBuffer[1]."Origin Type"::Service
        ELSE
          IF InvPostingBuffer[1]."Job No." <> '' THEN
            InvPostingBuffer[1]."Origin Type" := InvPostingBuffer[1]."Origin Type"::Project;
        IF PurchLineACY.Type = PurchLineACY.Type::"G/L Account" THEN BEGIN
          IF PurchLineACY."Receiving Company" <> '' THEN BEGIN
            ICRec.GET(COMPANYNAME, PurchLineACY."Receiving Company");
            InvPostingBuffer[1]."Intercompany Transaction" := TRUE;
            InvPostingBuffer[1]."Receiving Company" := PurchLineACY."Receiving Company";
            InvPostingBuffer[1]."G/L Account" := ICRec.GetICAccountOfCurrentCompany;
            InvPostingBuffer[1]."Job No." := '';
            InvPostingBuffer[1]."Global Dimension 1 Code" := '';
            InvPostingBuffer[1]."Global Dimension 2 Code" := '';
            InvPostingBuffer[1]."Dimension Set ID" := 0;
            InvPostingBuffer[1]."Cost Component" := '';
            InvPostingBuffer[1]."System-Created Entry"  := TRUE;
            lvAccountNo := ICRec.GetICAccountOfCurrentCompany;
            CreateICEntry;
          END;
        END;
        InvPostingBuffer[1]."Extension Contract" := "Extension Contract";
        InvPostingBuffer[1]."Service Location No." := "Service Location No.";
        PurchaseLineExtension.GetPurchLineExtension("Document Type","Document No.","Line No.");
        InvPostingBuffer[1]."Retention Amount" := PurchLine.RetentionAmount(0);
        InvPostingBuffer[1]."Applies-to Retention ID" := "Applies-to Retention ID";
      END;
      //**4PS.en

      InitAmounts(PurchLine,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,AmtToDefer,AmtToDeferACY,DeferralAccount);

      //**4PS.sn
      WITH PurchLine DO BEGIN
        IF PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::"No VAT" THEN BEGIN
          IF (Type = Type::"G/L Account") AND
             ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN BEGIN
            IF "VAT Calculation Type" <> "VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
              TotalAmount := TotalAmount + TotalVAT;
              TotalAmountACY := TotalAmountACY + TotalVATACY;
              TotalVAT := 0;
              TotalVATACY := 0;
            END;
            InvPostingBuffer[1]."Block VAT Posting" := TRUE;
          END;
        END;
      END;
      //**4PS.en

      IF PurchSetup."Discount Posting" IN
         [PurchSetup."Discount Posting"::"Invoice Discounts",PurchSetup."Discount Posting"::"All Discounts"]
      THEN BEGIN
        CalcInvoiceDiscountPosting(PurchLine,PurchLineACY);

        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
          InvPostingBuffer[1].SetSalesTax(PurchLine);

        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Purch. Inv. Disc. Account");
          IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
            DeprBook.GET(InvPostingBuffer[1]."Depreciation Book Code");
            IF DeprBook."Subtract Disc. in Purch. Inv." THEN BEGIN
              GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
              InvPostingBuffer[1].SetAccount(
                //PurchLine."No.",         //jth 20-09-2010 o
                lvAccountNo,               //jth 20-09-2010 n
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
              InvPostingBuffer[1].SetAccount(
                GenPostingSetup."Purch. FA Disc. Account",
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
            END;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Inv. Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
            UpdInvPostingBuffer;
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
          END ELSE BEGIN;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Inv. Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            UpdInvPostingBuffer;
          END;
        END;
      END;

      IF PurchSetup."Discount Posting" IN
         [PurchSetup."Discount Posting"::"Line Discounts",PurchSetup."Discount Posting"::"All Discounts"]
      THEN BEGIN
        CalcLineDiscountPosting(PurchLine,PurchLineACY);

        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
          InvPostingBuffer[1].SetSalesTax(PurchLine);

        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Purch. Line Disc. Account");
          IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
            DeprBook.GET(InvPostingBuffer[1]."Depreciation Book Code");
            IF DeprBook."Subtract Disc. in Purch. Inv." THEN BEGIN
              GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
              InvPostingBuffer[1].SetAccount(
                //PurchLine."No.",    //jth 20-09-2010 o
                lvAccountNo,          //jth 20-09-2010 n
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
              InvPostingBuffer[1].SetAccount(
                GenPostingSetup."Purch. FA Disc. Account",
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
            END;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Line Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
            UpdInvPostingBuffer;
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
          END ELSE BEGIN;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Line Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            UpdInvPostingBuffer;
          END;
        END;
      END;
      AdjustTotalAmountForDeferrals(PurchLine,AmtToDefer,AmtToDeferACY,TotalAmount,TotalAmountACY);

      IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Reverse Charge VAT" THEN
        InvPostingBuffer[1].SetAmountsNoVAT(
          TotalAmount,
          TotalAmountACY,
          PurchLine."VAT Difference")
      ELSE
        IF (NOT PurchLine."Use Tax") OR (PurchLine."VAT Calculation Type" <> PurchLine."VAT Calculation Type"::"Sales Tax") THEN BEGIN
          InvPostingBuffer[1].SetAmounts(
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference");
        END ELSE
          InvPostingBuffer[1].SetAmountsNoVAT(
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference");

      IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
        InvPostingBuffer[1].SetSalesTax(PurchLine);

      IF (PurchLine.Type = PurchLine.Type::"G/L Account") OR (PurchLine.Type = PurchLine.Type::"Fixed Asset") THEN BEGIN
      //PurchAccount := PurchLine."No."; //**4PS.o
        PurchAccount := lvAccountNo; //**4PS.n
        InvPostingBuffer[1].SetAccount(
          DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
          TotalVAT,
          TotalVATACY,
          TotalAmount,
          TotalAmountACY)
      END ELSE
        IF PurchLine."Document Type" IN [PurchLine."Document Type"::"Return Order",PurchLine."Document Type"::"Credit Memo"]
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Purch. Credit Memo Account");
          PurchAccount := GenPostingSetup."Purch. Credit Memo Account";
          InvPostingBuffer[1].SetAccount(
            DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
        END ELSE BEGIN
          GenPostingSetup.TESTFIELD("Purch. Account");
          PurchAccount := GenPostingSetup."Purch. Account";
          InvPostingBuffer[1].SetAccount(
            DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
        END;
      InvPostingBuffer[1]."Expense Allowance Scheme" := PurchaseLineExtension."Expense Allowance Scheme";   //**4PS CALL C013068
      UpdInvPostingBuffer;
      FillDeferralPostingBuffer(PurchLine,AmtToDefer,AmtToDeferACY,DeferralAccount,PurchAccount);
    END;

    LOCAL PROCEDURE UpdInvPostingBuffer@5();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      IF NOT InvPostingBuffer[1]."Intercompany Transaction" THEN BEGIN //**4PS.n C019894
        InvPostingBuffer[1]."Dimension Set ID" := PurchLine."Dimension Set ID";

        DimMgt.SetCompany(PurchLine."Receiving Company"); //**4PS.n C022859
        DimMgt.UpdateGlobalDimFromDimSetID(InvPostingBuffer[1]."Dimension Set ID",
          InvPostingBuffer[1]."Global Dimension 1 Code",InvPostingBuffer[1]."Global Dimension 2 Code");
      END; //**4PS.n C019894

      IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
        FALineNo := FALineNo + 1;
        InvPostingBuffer[1]."Fixed Asset Line No." := FALineNo;
      END;
      InvPostingBuffer[2] := InvPostingBuffer[1];
      //*29-11-2011.sn
      InvPostingBuffer[2].SETRANGE("Extension Contract", InvPostingBuffer[1]."Extension Contract");
      InvPostingBuffer[2].SETRANGE("Service Location No.", InvPostingBuffer[1]."Service Location No.");
      InvPostingBuffer[2].SETRANGE("Expense Allowance Scheme", InvPostingBuffer[1]."Expense Allowance Scheme"); //** 4PS C013068
      //*29-11-2011.en
      IF InvPostingBuffer[2].FIND THEN BEGIN
        InvPostingBuffer[2].Amount :=
          InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
        InvPostingBuffer[2]."VAT Amount" :=
          InvPostingBuffer[2]."VAT Amount" + InvPostingBuffer[1]."VAT Amount";
        InvPostingBuffer[2]."VAT Base Amount" :=
          InvPostingBuffer[2]."VAT Base Amount" + InvPostingBuffer[1]."VAT Base Amount";
        InvPostingBuffer[2]."VAT Difference" :=
          InvPostingBuffer[2]."VAT Difference" + InvPostingBuffer[1]."VAT Difference";
        InvPostingBuffer[2]."Amount (ACY)" :=
          InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
        InvPostingBuffer[2]."VAT Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Amount (ACY)" + InvPostingBuffer[1]."VAT Amount (ACY)";
        InvPostingBuffer[2]."VAT Base Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Base Amount (ACY)" +
          InvPostingBuffer[1]."VAT Base Amount (ACY)";
        InvPostingBuffer[2].Quantity :=
          InvPostingBuffer[2].Quantity + InvPostingBuffer[1].Quantity;
        //**4PS.sn
        InvPostingBuffer[2]."Retention Amount" :=
          InvPostingBuffer[2]."Retention Amount" + InvPostingBuffer[1]."Retention Amount";
        //**4PS.en
        IF NOT InvPostingBuffer[1]."System-Created Entry" THEN
          InvPostingBuffer[2]."System-Created Entry" := FALSE;
        InvPostingBuffer[2].MODIFY;
        InvDefLineNo := InvPostingBuffer[2]."Deferral Line No.";
      END ELSE BEGIN
        IF InvPostingBuffer[1]."Deferral Code" <> '' THEN BEGIN
          DeferralLineNo := DeferralLineNo + 1;
          InvPostingBuffer[1]."Deferral Line No." := DeferralLineNo;
          InvDefLineNo := InvPostingBuffer[1]."Deferral Line No.";
        END;
      //InvPostingBuffer[1].INSERT; //**4PS.o
        //**4PS.sn
        InvPostingBuffer[1]."Buffer Line No." := 1;
        WHILE NOT InvPostingBuffer[1].INSERT DO
          InvPostingBuffer[1]."Buffer Line No." := InvPostingBuffer[1]."Buffer Line No." + 1;
        //**4PS.en
      END;
    END;

    LOCAL PROCEDURE InsertPrepmtAdjInvPostingBuf@79(PrepmtPurchLine@1000 : Record 39);
    VAR
      PurchPostPrepayments@1002 : Codeunit 444;
      AdjAmount@1001 : Decimal;
    BEGIN
      WITH PrepmtPurchLine DO
        IF "Prepayment Line" THEN
          IF "Prepmt. Amount Inv. (LCY)" <> 0 THEN BEGIN
            AdjAmount := -"Prepmt. Amount Inv. (LCY)";
            FillPrepmtAdjInvPostingBuffer("No.",AdjAmount,PurchHeader."Currency Code" = '');
            FillPrepmtAdjInvPostingBuffer(
              PurchPostPrepayments.GetCorrBalAccNo(PurchHeader,AdjAmount > 0),
              -AdjAmount,
              PurchHeader."Currency Code" = '');
          END ELSE
            IF ("Prepayment %" = 100) AND ("Prepmt. VAT Amount Inv. (LCY)" <> 0) THEN
              FillPrepmtAdjInvPostingBuffer(
                PurchPostPrepayments.GetInvRoundingAccNo(PurchHeader."Vendor Posting Group"),
                "Prepmt. VAT Amount Inv. (LCY)",PurchHeader."Currency Code" = '');
    END;

    LOCAL PROCEDURE FillPrepmtAdjInvPostingBuffer@81(GLAccountNo@1001 : Code[20];AdjAmount@1003 : Decimal;RoundingEntry@1004 : Boolean);
    VAR
      PrepmtAdjInvPostBuffer@1002 : Record 49;
    BEGIN
      WITH PrepmtAdjInvPostBuffer DO BEGIN
        INIT;
        Type := Type::"Prepmt. Exch. Rate Difference";
        "G/L Account" := GLAccountNo;
        Amount := AdjAmount;
        IF RoundingEntry THEN
          "Amount (ACY)" := AdjAmount
        ELSE
          "Amount (ACY)" := 0;
        "Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
        "Global Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
        "Global Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
        "System-Created Entry" := TRUE;
        InvPostingBuffer[1] := PrepmtAdjInvPostBuffer;

        InvPostingBuffer[2] := InvPostingBuffer[1];
        IF InvPostingBuffer[2].FIND THEN BEGIN
          InvPostingBuffer[2].Amount := InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
          InvPostingBuffer[2]."Amount (ACY)" :=
            InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
          InvPostingBuffer[2].MODIFY;
        END ELSE
          InvPostingBuffer[1].INSERT;
      END;
    END;

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      WITH PurchHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    LOCAL PROCEDURE DivideAmount@8(QtyType@1000 : 'General,Invoicing,Shipping';PurchLineQty@1001 : Decimal;VAR TempVATAmountLine@1002 : TEMPORARY Record 290;VAR TempVATAmountLineRemainder@1003 : TEMPORARY Record 290);
    VAR
      OriginalDeferralAmount@1006 : Decimal;
    BEGIN
      IF RoundingLineInserted AND (RoundingLineNo = PurchLine."Line No.") THEN
        EXIT;
      WITH PurchLine DO
        //**4PS.sn
        BEGIN
          IF PurchHeader."Amounts only" THEN BEGIN
            PurchLineQty := 0;
            CASE QtyType OF
              QtyType::General:
                PurchLineQty := 1;
              QtyType::Invoicing:
      //C027348.so
      //        IF (PurchLine."Line Amount" <> 0) AND (PurchLine."Amnt. to Invoice" <> 0) THEN
      //          PurchLineQty := PurchLine."Amnt. to Invoice" / PurchLine."Line Amount";
      //C027348.eo
      //C027348.sn
                IF (PurchLine.Amount <> 0) AND (PurchLine."Amnt. to Invoice" <> 0) THEN
                  PurchLineQty := PurchLine."Amnt. to Invoice" / PurchLine.Amount;
      //C027348.en

              QtyType::Shipping:
      //C027348.so
      //        IF (PurchLine."Line Amount" <> 0) AND (PurchLine."Amnt. to Receive" <> 0) THEN
      //          PurchLineQty := PurchLine."Amnt. to Receive" / PurchLine."Line Amount";
                IF (PurchLine.Amount <> 0) AND (PurchLine."Amnt. to Receive" <> 0) THEN
                  PurchLineQty := PurchLine."Amnt. to Receive" / PurchLine.Amount;
      //C027348.eo
            END;
          END;
        //**4PS.en
        //IF (PurchLineQty = 0) OR ("Direct Unit Cost" = 0) THEN BEGIN //**4PS.o
        IF (PurchLineQty = 0) OR (("Direct Unit Cost" = 0) AND ("Amount Including VAT" = 0)) THEN BEGIN //**4PS.n
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        END ELSE BEGIN
          OriginalDeferralAmount := GetDeferralAmount;
          //**4PS.so
          //TempVATAmountLine.GET(
          //  "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax",
          //  "Line Amount" >= 0);
          //**4PS.eo
          //**4PS.sn
          //Call C023302: This is probably a solution for a problem we cannot reproduce at 4PS.
          //Because after the Error on 'GET' some other functions are not handled in a correct manner anymore.
          IF NOT TempVATAmountLine.GET(
            "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax",
            "Line Amount" >= 0) THEN EXIT;
          //**4PS.en
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
            "VAT %" := TempVATAmountLine."VAT %";
          TempVATAmountLineRemainder := TempVATAmountLine;
          IF NOT TempVATAmountLineRemainder.FIND THEN BEGIN
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          END;
          "Line Amount" := GetLineAmountToHandle(PurchLineQty) + GetPrepmtDiffToLineAmount(PurchLine);
          IF PurchLineQty <> Quantity THEN
            //**4PS.sn PS 12-06-13
            IF PurchHeader."Amounts only" THEN
              "Line Discount Amount" :=
                ROUND("Line Discount Amount" * PurchLineQty,Currency."Amount Rounding Precision")
            ELSE
            //**4PS.en
              "Line Discount Amount" :=
                ROUND("Line Discount Amount" * PurchLineQty / Quantity,Currency."Amount Rounding Precision");

          "Line Amount" := "Line Amount" - RetentionAmount(0); //**4PS.n

          IF "Allow Invoice Disc." AND (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) THEN
            IF QtyType = QtyType::Invoicing THEN
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            ELSE BEGIN
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            END;

          IF PurchHeader."Prices Including VAT" THEN BEGIN
           IF NOT "Manually VAT Posting" THEN BEGIN //**4PS.n
            IF (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) OR
               ("Line Amount" = 0)
            THEN BEGIN
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT" := 0;
            END ELSE BEGIN
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" +
                TempVATAmountLine."Amount Including VAT" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
            END;
            IF "Line Discount %" <> 100 THEN
              "Amount Including VAT" :=
                ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision")
            ELSE
              "Amount Including VAT" := 0;
           END; //**4PS.n
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT" :=
              TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          END ELSE
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
              IF "Line Discount %" <> 100 THEN
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount"
              ELSE
                "Amount Including VAT" := 0;
              Amount := 0;
              "VAT Base Amount" := 0;
            END ELSE BEGIN
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
             IF NOT "Manually VAT Posting" THEN BEGIN //**4PS.n
              IF TempVATAmountLine."VAT Base" = 0 THEN
                TempVATAmountLineRemainder."VAT Amount" := 0
              ELSE
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                  ("Line Amount" - "Inv. Discount Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              IF "Line Discount %" <> 100 THEN
                "Amount Including VAT" :=
                  Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision")
              ELSE
                "Amount Including VAT" := 0;
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
             END; //**4PS.n
            END;

          TempVATAmountLineRemainder.MODIFY;
          IF "Deferral Code" <> '' THEN
            CalcDeferralAmounts(PurchHeader,PurchLine,OriginalDeferralAmount);
        END;

      END; //**4PS.n
    END;

    LOCAL PROCEDURE RoundAmount@9(PurchLineQty@1000 : Decimal);
    VAR
      CurrExchRate@1002 : Record 330;
      NoVAT@1001 : Boolean;
    BEGIN
      WITH PurchLine DO BEGIN
        IncrAmount(TotalPurchLine);
        Increment(TotalPurchLine."Net Weight",ROUND(PurchLineQty * "Net Weight",0.00001));
        Increment(TotalPurchLine."Gross Weight",ROUND(PurchLineQty * "Gross Weight",0.00001));
        Increment(TotalPurchLine."Unit Volume",ROUND(PurchLineQty * "Unit Volume",0.00001));
        Increment(TotalPurchLine.Quantity,PurchLineQty);
        IF "Units per Parcel" > 0 THEN
          Increment(
            TotalPurchLine."Units per Parcel",
            ROUND(PurchLineQty / "Units per Parcel",1,'>'));

        TempPurchLine := PurchLine;
        PurchLineACY := PurchLine;
        IF PurchHeader."Currency Code" <> '' THEN BEGIN
          IF PurchHeader."Posting Date" = 0D THEN
            Usedate := WORKDATE
          ELSE
            Usedate := PurchHeader."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                Usedate,PurchHeader."Currency Code",
      //        TotalPurchLine."Amount Including VAT",PurchHeader."Currency Factor") - //**4PS.o
                TotalPurchLine."Amount Including VAT",PurchHeader."Currency Factor",FALSE)) - //**4PS.n
            TotalPurchLineLCY."Amount Including VAT";
          IF NoVAT THEN
            Amount := "Amount Including VAT"
          ELSE
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  0, '', //**4PS.n
                  Usedate,PurchHeader."Currency Code",
      //          TotalPurchLine.Amount,PurchHeader."Currency Factor")) - //**4PS.o
                  TotalPurchLine.Amount,PurchHeader."Currency Factor",FALSE)) - //**4PS.n
              TotalPurchLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                Usedate,PurchHeader."Currency Code",
      //        TotalPurchLine."Line Amount",PurchHeader."Currency Factor")) - //**4PS.o
                TotalPurchLine."Line Amount",PurchHeader."Currency Factor",FALSE)) - //**4PS.n
            TotalPurchLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                Usedate,PurchHeader."Currency Code",
      //        TotalPurchLine."Line Discount Amount",PurchHeader."Currency Factor")) - //**4PS.o
                TotalPurchLine."Line Discount Amount",PurchHeader."Currency Factor",FALSE)) - //**4PS.n
            TotalPurchLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                Usedate,PurchHeader."Currency Code",
      //        TotalPurchLine."Inv. Discount Amount",PurchHeader."Currency Factor")) - //**4PS.o
                TotalPurchLine."Inv. Discount Amount",PurchHeader."Currency Factor",FALSE)) - //**4PS.n
            TotalPurchLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                Usedate,PurchHeader."Currency Code",
      //        TotalPurchLine."VAT Difference",PurchHeader."Currency Factor")) - //**4PS.o
                TotalPurchLine."VAT Difference",PurchHeader."Currency Factor",FALSE)) - //**4PS.n
            TotalPurchLineLCY."VAT Difference";
        END;

        IncrAmount(TotalPurchLineLCY);
        Increment(TotalPurchLineLCY."Unit Cost (LCY)",ROUND(PurchLineQty * "Unit Cost (LCY)"));
      END;
    END;

    LOCAL PROCEDURE ReverseAmount@10(VAR PurchLine@1000 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        //**4PS.sn
        "Amnt. to Invoice" := -"Amnt. to Invoice";
        "Amnt. to Receive" := -"Amnt. to Receive";
        //**4PS.en
        "Qty. to Receive" := -"Qty. to Receive";
        "Qty. to Receive (Base)" := -"Qty. to Receive (Base)";
        "Return Qty. to Ship" := -"Return Qty. to Ship";
        "Return Qty. to Ship (Base)" := -"Return Qty. to Ship (Base)";
        "Qty. to Invoice" := -"Qty. to Invoice";
        "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
        "Line Amount" := -"Line Amount";
        Amount := -Amount;
        "VAT Base Amount" := -"VAT Base Amount";
        "VAT Difference" := -"VAT Difference";
        "Amount Including VAT" := -"Amount Including VAT";
        "Line Discount Amount" := -"Line Discount Amount";
        "Inv. Discount Amount" := -"Inv. Discount Amount";
        "Salvage Value" := -"Salvage Value";
      END;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(UseTempData@1000 : Boolean;BiggestLineNo@1004 : Integer);
    VAR
      VendPostingGr@1002 : Record 93;
      TempPurchLineForCalc@1003 : TEMPORARY Record 39;
      InvoiceRoundingAmount@1001 : Decimal;
      SavedStatusCheckSuspended@1100409000 : Boolean;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalPurchLine."Amount Including VAT" -
          ROUND(
            TotalPurchLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF InvoiceRoundingAmount <> 0 THEN BEGIN
        VendPostingGr.GET(PurchHeader."Vendor Posting Group");
        VendPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH PurchLine DO BEGIN
          INIT;
          BiggestLineNo := BiggestLineNo + 10000;
          "System-Created Entry" := TRUE;
          SavedStatusCheckSuspended := GetStatusCheckSuspended;  //**4PS C002812
          SuspendStatusCheck(TRUE);                              //**4PS C002812   must be True anycase
          SetSkipCheckSigns(TRUE);  //**4PS.n C001910
          IF UseTempData THEN BEGIN
            "Line No." := 0;
            Type := Type::"G/L Account";
            TempPurchLineForCalc := PurchLine;
            TempPurchLineForCalc.VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
            PurchLine := TempPurchLineForCalc;
          END ELSE BEGIN
            "Line No." := BiggestLineNo;
            VALIDATE(Type,Type::"G/L Account");
            VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
          END;
          VALIDATE(Quantity,1);
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            VALIDATE("Return Qty. to Ship",Quantity)
          ELSE
            VALIDATE("Qty. to Receive",Quantity);
          IF PurchHeader."Prices Including VAT" THEN
            VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
          ELSE
            VALIDATE(
              "Direct Unit Cost",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := BiggestLineNo;
          LastLineRetrieved := FALSE;
          RoundingLineInserted := TRUE;
          RoundingLineNo := "Line No.";
          SetSkipCheckSigns(FALSE);  //**4PS.n C001910
          SuspendStatusCheck(SavedStatusCheckSuspended);                              //**4PS C002812  reset to saved value
         END;
      END;
    END;

    LOCAL PROCEDURE IncrAmount@13(VAR TotalPurchLine@1000 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        IF PurchHeader."Prices Including VAT" OR
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        THEN
          Increment(TotalPurchLine."Line Amount","Line Amount");
        Increment(TotalPurchLine.Amount,Amount);
        Increment(TotalPurchLine."VAT Base Amount","VAT Base Amount");
        Increment(TotalPurchLine."VAT Difference","VAT Difference");
        Increment(TotalPurchLine."Amount Including VAT","Amount Including VAT");
        Increment(TotalPurchLine."Line Discount Amount","Line Discount Amount");
        Increment(TotalPurchLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(TotalPurchLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(TotalPurchLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(TotalPurchLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(TotalPurchLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(TotalPurchLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
        Increment(TotalPurchLine."Prepayment VAT Difference","Prepayment VAT Difference");
        Increment(TotalPurchLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
        Increment(TotalPurchLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      END;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    PROCEDURE GetPurchLines@16(VAR NewPurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldPurchLine@1003 : Record 39;
      MergedPurchLines@1004 : TEMPORARY Record 39;
    BEGIN
      PurchHeader := NewPurchHeader;
      IF QtyType = QtyType::Invoicing THEN BEGIN
        CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,FALSE);
        MergePurchLines(PurchHeader,OldPurchLine,TempPrepmtPurchLine,MergedPurchLines);
        SumPurchLines2(PurchLine,MergedPurchLines,QtyType,TRUE);
      END ELSE
        SumPurchLines2(PurchLine,OldPurchLine,QtyType,TRUE);
    END;

    PROCEDURE SumPurchLines@15(VAR NewPurchHeader@1000 : Record 38;QtyType@1001 : 'General,Invoicing,Shipping';VAR NewTotalPurchLine@1002 : Record 39;VAR NewTotalPurchLineLCY@1003 : Record 39;VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30]);
    VAR
      OldPurchLine@1006 : Record 39;
    BEGIN
      SumPurchLinesTemp(
        NewPurchHeader,OldPurchLine,QtyType,NewTotalPurchLine,NewTotalPurchLineLCY,
        VATAmount,VATAmountText);
    END;

    PROCEDURE SumPurchLinesTemp@24(VAR NewPurchHeader@1000 : Record 38;VAR OldPurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalPurchLine@1003 : Record 39;VAR NewTotalPurchLineLCY@1004 : Record 39;VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30]);
    VAR
      PurchLine@1007 : Record 39;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchHeader := NewPurchHeader;
        SumPurchLines2(PurchLine,OldPurchLine,QtyType,FALSE);
        VATAmount := TotalPurchLine."Amount Including VAT" - TotalPurchLine.Amount;
        IF TotalPurchLine."VAT %" = 0 THEN
          VATAmountText := Text021
        ELSE
          VATAmountText := STRSUBSTNO(Text022,TotalPurchLine."VAT %");
        NewTotalPurchLine := TotalPurchLine;
        NewTotalPurchLineLCY := TotalPurchLineLCY;
      END;
    END;

    LOCAL PROCEDURE SumPurchLines2@11(VAR NewPurchLine@1000 : Record 39;VAR OldPurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping';InsertPurchLine@1003 : Boolean);
    VAR
      TempVATAmountLine@1006 : TEMPORARY Record 290;
      TempVATAmountLineRemainder@1007 : TEMPORARY Record 290;
      PurchLineQty@1004 : Decimal;
      BiggestLineNo@1005 : Integer;
    BEGIN
      TempVATAmountLineRemainder.DELETEALL;
      OldPurchLine.CalcVATAmountLines(QtyType,PurchHeader,OldPurchLine,TempVATAmountLine);
      WITH PurchHeader DO BEGIN
        GetGLSetup;
        PurchSetup.GET;
        GetCurrency;
        OldPurchLine.SETRANGE("Document Type","Document Type");
        OldPurchLine.SETRANGE("Document No.","No.");
        RoundingLineInserted := FALSE;
        IF OldPurchLine.FINDSET THEN
          REPEAT
            IF NOT RoundingLineInserted THEN
              PurchLine := OldPurchLine;
            CASE QtyType OF
              QtyType::General:
                //**4PS.sn
                IF "Amounts only" THEN
                  PurchLineQty := 1
                ELSE
                //**4PS.en
                  PurchLineQty := PurchLine.Quantity;
              QtyType::Invoicing:
                //**4PS.sn
                IF "Amounts only" THEN
      //C027348.so
      //          IF (PurchLine."Line Amount" <> 0) AND (PurchLine."Amnt. to Invoice" <> 0) THEN
      //            PurchLineQty := PurchLine."Amnt. to Invoice" / PurchLine."Line Amount"
      //C027348.eo
      //C027348.sn
                  IF (PurchLine.Amount <> 0) AND (PurchLine."Amnt. to Invoice" <> 0) THEN
                    PurchLineQty := PurchLine."Amnt. to Invoice" / PurchLine.Amount
      //C027348.en
                  ELSE
                    PurchLineQty := 0
                ELSE
                //**4PS.en
                  PurchLineQty := PurchLine."Qty. to Invoice";
              QtyType::Shipping:
                BEGIN
                  //**4PS.sn
                  IF "Amounts only" THEN
      //C027348.so
      //            IF (PurchLine."Line Amount" <> 0) AND (PurchLine."Amnt. to Receive" <> 0) THEN
      //              PurchLineQty := PurchLine."Amnt. to Receive" / PurchLine."Line Amount"
      //C027348.eo
      //C027348.sn
                    IF (PurchLine.Amount <> 0) AND (PurchLine."Amnt. to Receive" <> 0) THEN
                      PurchLineQty := PurchLine."Amnt. to Receive" / PurchLine.Amount
      //C027348.en
                    ELSE
                      PurchLineQty := 0
                  ELSE
                  //**4PS.en
                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                      PurchLineQty := PurchLine."Return Qty. to Ship"
                    ELSE
                      PurchLineQty := PurchLine."Qty. to Receive"
                END;
            END;
            DivideAmount(QtyType,PurchLineQty,TempVATAmountLine,TempVATAmountLineRemainder);
            PurchLine.Quantity := PurchLineQty;
            IF PurchLineQty <> 0 THEN BEGIN
              IF (PurchLine.Amount <> 0) AND NOT RoundingLineInserted THEN
                IF TotalPurchLine.Amount = 0 THEN
                  TotalPurchLine."VAT %" := PurchLine."VAT %"
                ELSE
                  IF TotalPurchLine."VAT %" <> PurchLine."VAT %" THEN
                    TotalPurchLine."VAT %" := 0;
              RoundAmount(PurchLineQty);
              PurchLine := TempPurchLine;
            END;
            IF InsertPurchLine THEN BEGIN
              NewPurchLine := PurchLine;
              NewPurchLine.INSERT;
            END;
            IF RoundingLineInserted THEN
              LastLineRetrieved := TRUE
            ELSE BEGIN
              BiggestLineNo := MAX(BiggestLineNo,OldPurchLine."Line No.");
              LastLineRetrieved := OldPurchLine.NEXT = 0;
              IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
                InvoiceRounding(TRUE,BiggestLineNo);
            END;
          UNTIL LastLineRetrieved;
      END;
    END;

    PROCEDURE TestDeleteHeader@19(PurchHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120;VAR PurchInvHeader@1002 : Record 122;VAR PurchCrMemoHeader@1003 : Record 124;VAR ReturnShptHeader@1004 : Record 6650;VAR PurchInvHeaderPrepmt@1006 : Record 122;VAR PurchCrMemoHeaderPrepmt@1005 : Record 124);
    BEGIN
      WITH PurchHeader DO BEGIN
        CLEAR(PurchRcptHeader);
        CLEAR(PurchInvHeader);
        CLEAR(PurchCrMemoHeader);
        CLEAR(ReturnShptHeader);
        PurchSetup.GET;

        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        IF ("Receiving No. Series" <> '') AND ("Receiving No." <> '') THEN BEGIN
          PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
          PurchRcptHeader."No." := "Receiving No.";
          PurchRcptHeader."Posting Date" := TODAY;
          PurchRcptHeader."User ID" := USERID;
          PurchRcptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Return Shipment No. Series" <> '') AND ("Return Shipment No." <> '') THEN BEGIN
          ReturnShptHeader.TRANSFERFIELDS(PurchHeader);
          ReturnShptHeader."No." := "Return Shipment No.";
          ReturnShptHeader."Posting Date" := TODAY;
          ReturnShptHeader."User ID" := USERID;
          ReturnShptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::Invoice) AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          PurchInvHeader.TRANSFERFIELDS(PurchHeader);
          IF "Posting No." <> '' THEN
            PurchInvHeader."No." := "Posting No.";
          IF "Document Type" = "Document Type"::Invoice THEN BEGIN
            PurchInvHeader."Pre-Assigned No. Series" := "No. Series";
            PurchInvHeader."Pre-Assigned No." := "No.";
          END ELSE BEGIN
            PurchInvHeader."Pre-Assigned No. Series" := '';
            PurchInvHeader."Pre-Assigned No." := '';
            PurchInvHeader."Order No. Series" := "No. Series";
            PurchInvHeader."Order No." := "No.";
          END;
          PurchInvHeader."Posting Date" := TODAY;
          PurchInvHeader."User ID" := USERID;
          PurchInvHeader."Source Code" := SourceCode.Code;
          PurchInvHeader."Amount incl. VAT" := 0; //**4PS CALL C018927
          PurchInvHeader."On Hold" := '';         //**4PS CALL C018927
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::"Credit Memo") AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          PurchCrMemoHeader.TRANSFERFIELDS(PurchHeader);
          IF "Posting No." <> '' THEN
            PurchCrMemoHeader."No." := "Posting No.";
          PurchCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          PurchCrMemoHeader."Pre-Assigned No." := "No.";
          PurchCrMemoHeader."Posting Date" := TODAY;
          PurchCrMemoHeader."User ID" := USERID;
          PurchCrMemoHeader."Source Code" := SourceCode.Code;
          PurchCrMemoHeader."Amount incl. VAT" := 0; //**4PS CALL C018927
          PurchCrMemoHeader."On Hold" := '';         //**4PS CALL C018927
        END;

        IF ("Prepayment No. Series" <> '') AND ("Prepayment No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          PurchInvHeaderPrepmt.TRANSFERFIELDS(PurchHeader);
          PurchInvHeaderPrepmt."No." := "Prepayment No.";
          PurchInvHeaderPrepmt."Order No. Series" := "No. Series";
          PurchInvHeaderPrepmt."Prepayment Order No." := "No.";
          PurchInvHeaderPrepmt."Posting Date" := TODAY;
          PurchInvHeaderPrepmt."Pre-Assigned No. Series" := '';
          PurchInvHeaderPrepmt."Pre-Assigned No." := '';
          PurchInvHeaderPrepmt."User ID" := USERID;
          PurchInvHeaderPrepmt."Source Code" := SourceCode.Code;
          PurchInvHeaderPrepmt."Prepayment Invoice" := TRUE;
        END;

        IF ("Prepmt. Cr. Memo No. Series" <> '') AND ("Prepmt. Cr. Memo No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          PurchCrMemoHeaderPrepmt.TRANSFERFIELDS(PurchHeader);
          PurchCrMemoHeaderPrepmt."No." := "Prepmt. Cr. Memo No.";
          PurchCrMemoHeaderPrepmt."Prepayment Order No." := "No.";
          PurchCrMemoHeaderPrepmt."Posting Date" := TODAY;
          PurchCrMemoHeaderPrepmt."Pre-Assigned No. Series" := '';
          PurchCrMemoHeaderPrepmt."Pre-Assigned No." := '';
          PurchCrMemoHeaderPrepmt."User ID" := USERID;
          PurchCrMemoHeaderPrepmt."Source Code" := SourceCode.Code;
          PurchCrMemoHeaderPrepmt."Prepayment Credit Memo" := TRUE;
        END;
      END;
    END;

    PROCEDURE DeleteHeader@18(PurchHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120;VAR PurchInvHeader@1002 : Record 122;VAR PurchCrMemoHeader@1003 : Record 124;VAR ReturnShptHeader@1004 : Record 6650;VAR PurchInvHeaderPrepmt@1006 : Record 122;VAR PurchCrMemoHeaderPrepmt@1005 : Record 124);
    VAR
      PurchInvLine@1007 : Record 123;
      PurchCrMemoLine@1008 : Record 125;
      PurchRcptLine@1009 : Record 121;
    BEGIN
      WITH PurchHeader DO BEGIN
        TestDeleteHeader(
          PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
          ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
        IF PurchRcptHeader."No." <> '' THEN BEGIN
          PurchRcptHeader.INSERT;
          PurchRcptLine.INIT;
          PurchRcptLine."Document No." := PurchRcptHeader."No.";
          PurchRcptLine."Line No." := 10000;
          PurchRcptLine.Description := SourceCode.Description;
          PurchRcptLine.INSERT;
        END;

        IF ReturnShptHeader."No." <> '' THEN BEGIN
          ReturnShptHeader.INSERT;
          ReturnShptLine.INIT;
          ReturnShptLine."Document No." := ReturnShptHeader."No.";
          ReturnShptLine."Line No." := 10000;
          ReturnShptLine.Description := SourceCode.Description;
          ReturnShptLine.INSERT;
        END;

        IF PurchInvHeader."No." <> '' THEN BEGIN
          PurchInvHeader.Text := PurchHeadExtensionRec.Memo;  //**4PS.n
          PurchInvHeader.INSERT;
          PurchInvLine.INIT;
          PurchInvLine."Document No." := PurchInvHeader."No.";
          PurchInvLine."Line No." := 10000;
          PurchInvLine.Description := SourceCode.Description;
          PurchInvLine.INSERT;
        END;

        IF PurchCrMemoHeader."No." <> '' THEN BEGIN
          PurchCrMemoHeader.Text := PurchHeadExtensionRec.Memo;  //**4PS.n
          PurchCrMemoHeader.INSERT(TRUE);
          PurchCrMemoLine.INIT;
          PurchCrMemoLine."Document No." := PurchCrMemoHeader."No.";
          PurchCrMemoLine."Line No." := 10000;
          PurchCrMemoLine.Description := SourceCode.Description;
          PurchCrMemoLine.INSERT;
        END;

        IF PurchInvHeaderPrepmt."No." <> '' THEN BEGIN
          PurchInvHeaderPrepmt.INSERT;
          PurchInvLine."Document No." := PurchInvHeaderPrepmt."No.";
          PurchInvLine."Line No." := 10000;
          PurchInvLine.Description := SourceCode.Description;
          PurchInvLine.INSERT;
        END;

        IF PurchCrMemoHeaderPrepmt."No." <> '' THEN BEGIN
          PurchCrMemoHeaderPrepmt.INSERT;
          PurchCrMemoLine.INIT;
          PurchCrMemoLine."Document No." := PurchCrMemoHeaderPrepmt."No.";
          PurchCrMemoLine."Line No." := 10000;
          PurchCrMemoLine.Description := SourceCode.Description;
          PurchCrMemoLine.INSERT;
        END;
      END;
    END;

    PROCEDURE UpdateBlanketOrderLine@21(PurchLine@1000 : Record 39;Receive@1001 : Boolean;Ship@1006 : Boolean;Invoice@1002 : Boolean);
    VAR
      BlanketOrderPurchLine@1003 : Record 39;
      ModifyLine@1004 : Boolean;
      Sign@1005 : Decimal;
    BEGIN
      IF (PurchLine."Blanket Order No." <> '') AND (PurchLine."Blanket Order Line No." <> 0) AND
         ((Receive AND (PurchLine."Qty. to Receive" <> 0)) OR
          (Ship AND (PurchLine."Return Qty. to Ship" <> 0)) OR
          (Invoice AND (PurchLine."Qty. to Invoice" <> 0)))
      THEN
        IF BlanketOrderPurchLine.GET(
             BlanketOrderPurchLine."Document Type"::"Blanket Order",PurchLine."Blanket Order No.",
             PurchLine."Blanket Order Line No.")
        THEN BEGIN
          //BlanketOrderPurchLine.TESTFIELD(Type,PurchLine.Type); //**4PS.o
          BlanketOrderPurchLine.TESTFIELD("Item No.",PurchLine."Item No."); //**4PS.n
          //BlanketOrderPurchLine.TESTFIELD("No.",PurchLine."No.");  //**4PS.o
          //**4PS.n db, 04-12-03
          BlanketOrderPurchLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");

          ModifyLine := FALSE;
          CASE PurchLine."Document Type" OF
            PurchLine."Document Type"::Order,
            PurchLine."Document Type"::Invoice:
              Sign := 1;
            PurchLine."Document Type"::"Return Order",
            PurchLine."Document Type"::"Credit Memo":
              Sign := -1;
          END;
          IF Receive AND (PurchLine."Receipt No." = '') THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" + Sign * PurchLine."Qty. to Receive"
            ELSE
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Qty. to Receive",0.00001);
            BlanketOrderPurchLine."Qty. Received (Base)" :=
              BlanketOrderPurchLine."Qty. Received (Base)" + Sign * PurchLine."Qty. to Receive (Base)";
            ModifyLine := TRUE;
          END;
          IF Ship AND (PurchLine."Return Shipment No." = '') THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" + Sign * PurchLine."Return Qty. to Ship"
            ELSE
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Return Qty. to Ship",0.00001);
            BlanketOrderPurchLine."Qty. Received (Base)" :=
              BlanketOrderPurchLine."Qty. Received (Base)" + Sign * PurchLine."Return Qty. to Ship (Base)";
            ModifyLine := TRUE;
          END;

          IF Invoice THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Invoiced" :=
                BlanketOrderPurchLine."Quantity Invoiced" + Sign * PurchLine."Qty. to Invoice"
            ELSE
              BlanketOrderPurchLine."Quantity Invoiced" :=
                BlanketOrderPurchLine."Quantity Invoiced" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Qty. to Invoice",0.00001);
            BlanketOrderPurchLine."Qty. Invoiced (Base)" :=
              BlanketOrderPurchLine."Qty. Invoiced (Base)" + Sign * PurchLine."Qty. to Invoice (Base)";
            ModifyLine := TRUE;
          END;

          IF ModifyLine THEN BEGIN
            BlanketOrderPurchLine.InitOutstanding;

           IF NOT PurchLine."Allow Exceeding Order Quantity" THEN BEGIN //**4PS.n
            IF (BlanketOrderPurchLine.Quantity *
                BlanketOrderPurchLine."Quantity Received" < 0) OR
               (ABS(BlanketOrderPurchLine.Quantity) <
                ABS(BlanketOrderPurchLine."Quantity Received"))
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Quantity Received",
                STRSUBSTNO(
                  Text023,
                  BlanketOrderPurchLine.FIELDCAPTION(Quantity)));

            IF (BlanketOrderPurchLine."Quantity (Base)" *
                BlanketOrderPurchLine."Qty. Received (Base)" < 0) OR
               (ABS(BlanketOrderPurchLine."Quantity (Base)") <
                ABS(BlanketOrderPurchLine."Qty. Received (Base)"))
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Qty. Received (Base)",
                STRSUBSTNO(
                  Text023,
                  BlanketOrderPurchLine.FIELDCAPTION("Quantity Received")));
            END; //**4PS.n

            BlanketOrderPurchLine.CALCFIELDS("Reserved Qty. (Base)");
            IF ABS(BlanketOrderPurchLine."Outstanding Qty. (Base)") <
               ABS(BlanketOrderPurchLine."Reserved Qty. (Base)")
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Reserved Qty. (Base)",Text024);

            BlanketOrderPurchLine."Qty. to Invoice" :=
              BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Invoiced";
            {//**4PS.so
            BlanketOrderPurchLine."Qty. to Receive" :=
              BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Received";
            }//**4PS.eo
            BlanketOrderPurchLine."Qty. to Invoice (Base)" :=
              BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Invoiced (Base)";
            {//**4PS.so
            BlanketOrderPurchLine."Qty. to Receive (Base)" :=
              BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Received (Base)";
            }//**4PS.eo
            //**4PS.sn
            IF BlanketOrderPurchLine."Qty. to Receive" >
               (BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Received")
            THEN BEGIN
              BlanketOrderPurchLine."Qty. to Receive" :=
                BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Received";
              BlanketOrderPurchLine."Qty. to Receive (Base)" :=
                BlanketOrderPurchLine."Quantity (Base)"- BlanketOrderPurchLine."Qty. Received (Base)";
            END;
            //**4PS.en
            //**4PS.sn
            BlanketOrderPurchLine."Modified by" := USERID; //DP00469
            BlanketOrderPurchLine."Last Date Modified" := TODAY;//DP00469
            //**4PS.en
            BlanketOrderPurchLine.MODIFY;
          END;
        END;
    END;

    LOCAL PROCEDURE UpdatePurchaseHeader@163(VendorLedgerEntry@1000 : Record 25);
    BEGIN
      CASE GenJnlLineDocType OF
        GenJnlLine."Document Type"::Invoice:
          BEGIN
            FindVendorLedgerEntry(GenJnlLineDocType,GenJnlLineDocNo,VendorLedgerEntry);
            PurchInvHeader."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
            PurchInvHeader.MODIFY;
          END;
        GenJnlLine."Document Type"::"Credit Memo":
          BEGIN
            FindVendorLedgerEntry(GenJnlLineDocType,GenJnlLineDocNo,VendorLedgerEntry);
            PurchCrMemoHeader."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
            PurchCrMemoHeader.MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE PostVendorEntry@68(PurchHeader2@1006 : Record 38;TotalPurchLine2@1005 : Record 39;TotalPurchLineLCY2@1004 : Record 39;DocType@1003 : Option;DocNo@1002 : Code[20];ExtDocNo@1001 : Code[35];SourceCode@1000 : Code[10]);
    VAR
      GenJnlLine2@1007 : Record 81;
    BEGIN
      WITH PurchHeader2 DO BEGIN
        GenJnlLine2.INIT;
        GenJnlLine2."Posting Date" := "Posting Date";
        GenJnlLine2."Document Date" := "Document Date";
        GenJnlLine2.Description := "Posting Description";
        GenJnlLine2."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine2."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine2."Reason Code" := "Reason Code";
        GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::Vendor;
        GenJnlLine2."Account No." := "Pay-to Vendor No.";
        GenJnlLine2."Document Type" := DocType;
        GenJnlLine2."Document No." := DocNo;
        GenJnlLine2."External Document No." := ExtDocNo;
        GenJnlLine2."Currency Code" := "Currency Code";
        GenJnlLine2.Amount := -TotalPurchLine2."Amount Including VAT";
        GenJnlLine2."Source Currency Code" := "Currency Code";
        GenJnlLine2."Source Currency Amount" := -TotalPurchLine2."Amount Including VAT";
        GenJnlLine2."Amount (LCY)" := -TotalPurchLineLCY2."Amount Including VAT";
        IF "Currency Code" = '' THEN
          GenJnlLine2."Currency Factor" := 1
        ELSE
          GenJnlLine2."Currency Factor" := "Currency Factor";
        GenJnlLine2."Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
        GenJnlLine2.Correction := Correction;
        GenJnlLine2."Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";
        GenJnlLine2."Sell-to/Buy-from No." := "Buy-from Vendor No.";
        GenJnlLine2."Bill-to/Pay-to No." := "Pay-to Vendor No.";
        GenJnlLine2."Salespers./Purch. Code" := "Purchaser Code";
        GenJnlLine2."System-Created Entry" := TRUE;
        GenJnlLine2."On Hold" := "On Hold";
        GenJnlLine2."Applies-to Doc. Type" := "Applies-to Doc. Type";
        GenJnlLine2."Applies-to Doc. No." := "Applies-to Doc. No.";
        GenJnlLine2."Applies-to ID" := "Applies-to ID";
        GenJnlLine2."Allow Application" := "Bal. Account No." = '';
        GenJnlLine2."Due Date" := "Due Date";
        GenJnlLine2."Payment Terms Code" := "Payment Terms Code";
        GenJnlLine2."Pmt. Discount Date" := "Pmt. Discount Date";
        GenJnlLine2."Payment Discount %" := "Payment Discount %";
        //**4PS.sn
        GenJnlLine2."Pmt. Discount Date 2" := "Pmt. Discount Date 2";
        GenJnlLine2."Payment Discount % 2" := "Payment Discount % 2";
        GenJnlLine2."Pmt. Discount Date 3" := "Pmt. Discount Date 3";
        GenJnlLine2."Payment Discount % 3" := "Payment Discount % 3";
        //**4PS.en
        GenJnlLine2."Source Type" := GenJnlLine2."Source Type"::Vendor;
        GenJnlLine2."Source No." := "Pay-to Vendor No.";
        GenJnlLine2."Source Code" := SourceCode;
        GenJnlLine2."Posting No. Series" := "Posting No. Series";
        GenJnlLine2."IC Partner Code" := "Pay-to IC Partner Code";
        GenJnlLine2."Creditor No." := "Creditor No.";
        GenJnlLine2."Payment Reference" := "Payment Reference";
        GenJnlLine2."Payment Method Code" := "Payment Method Code";

        //**4PS.sn
        GenJnlLine2."Subcontracting Invoice" := "Subcontracting Invoice";
        GenJnlLine2."Payment Agreement" := "Payment Agreement";
        GenJnlLine2."Expected Effective Date" := "Actual Effective Date";
        GenJnlLine2."Expected Enddate" := "Actual End Date";
        GenJnlLine2."Number of Hours" := "Number of Hours";
        GenJnlLine2."Avg. Wage Rate" := "Avg. Wage Rate";
        GenJnlLine2."Labor Amount" := "Labor Amount";
        GenJnlLine2."Contribution Percentage Labor" := "Contribution Percentage Labor";
        GenJnlLine2."Contribution Percentage Total" := "Contribution Percentage Total";
        GenJnlLine2."Pay To Tax Authority" := "Pay To Tax Authority";
        GenJnlLine2."Wage Charge (to B Account)" := "Wage Charge (to B Account)";
        GenJnlLine2."Wage Charge (to Tax Authority)" := "Wage Charge (to Tax Authority)";
        GenJnlLine2.Memo := PurchHeadExtensionRec.Memo;
        GenJnlLine2."Transaction Mode B Payments" := "Transaction Mode B Payments";
        GenJnlLine2."Bank Account Code B Payments" := "Bank Account Code B Payments";
        CASE "Document Type" OF
          "Document Type"::Order:
            GenJnlLine2.Approved := TRUE;
          "Document Type"::Invoice:
            GenJnlLine2.Approved := "Invoice Approved";
          "Document Type"::"Credit Memo":
            GenJnlLine2.Approved := "Credit Memo Approved";
        END;
        GenJnlLine2."Approvement Initials" := "Approvement Initials";
        GenJnlLine2."Interest Date" := "Interest Date";
        GenJnlLine2."Your Reference" := "Your Reference";
        GenJnlLine2."Closed Project No." := "Job No.";
        GenJnlLine2."Subcontract No." := "Subcontract No.";

        //**4PS.sn DC Document Capture
        IF ("Document Type" = "Document Type"::Invoice) AND (PurchInvHeader."On Hold" <> '') THEN
          GenJnlLine2."On Hold" := PurchInvHeader."On Hold";
        IF ("Document Type" = "Document Type"::"Credit Memo") AND (PurchCrMemoHeader."On Hold" <> '') THEN
          GenJnlLine2."On Hold" := PurchCrMemoHeader."On Hold";
        //**4PS.en DC
        //**4PS.en

        GenJnlPostLine.RunWithCheck(GenJnlLine2);
      END;
    END;

    LOCAL PROCEDURE FindVendorLedgerEntry@64(DocType@1000 : Option;DocNo@1001 : Code[20];VAR VendorLedgerEntry@1002 : Record 25);
    BEGIN
      VendorLedgerEntry.SETRANGE("Document Type",DocType);
      VendorLedgerEntry.SETRANGE("Document No.",DocNo);
      VendorLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE CopyCommentLines@6(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      PurchCommentLine@1004 : Record 43;
      PurchCommentLine2@1005 : Record 43;
    BEGIN
      PurchCommentLine.SETRANGE("Document Type",FromDocumentType);
      PurchCommentLine.SETRANGE("No.",FromNumber);
      IF PurchCommentLine.FINDSET THEN
        REPEAT
          PurchCommentLine2 := PurchCommentLine;
          PurchCommentLine2."Document Type" := ToDocumentType;
          PurchCommentLine2."No." := ToNumber;
          PurchCommentLine2.INSERT;
        UNTIL PurchCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@52(VAR GenJnlLine@1000 : Record 81) : Integer;
    BEGIN
      EXIT(GenJnlPostLine.RunWithCheck(GenJnlLine));
    END;

    LOCAL PROCEDURE CheckPostRestrictions@108(PurchaseHeader@1000 : Record 38);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      PurchaseHeader.OnCheckPurchasePostRestrictions;

      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
      Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
      IF PurchaseHeader."Pay-to Vendor No." <> PurchaseHeader."Buy-from Vendor No." THEN BEGIN
        Vendor.GET(PurchaseHeader."Pay-to Vendor No.");
        Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckDim@34();
    VAR
      PurchLine2@1000 : Record 39;
    BEGIN
      PurchLine2."Line No." := 0;
      CheckDimComb(PurchLine2);
      CheckDimValuePosting(PurchLine2);

      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PutPromisedReceiveDateFilter(PurchLine2); //**4PS.n
      PutReceiveMarkedOnlyFilter(PurchLine2); //**4PS.n DP00556
      PurchLine2.SETFILTER(Type,'<>%1',PurchLine2.Type::" ");
      IF PurchLine2.FINDSET THEN
        REPEAT
          IF (PurchHeader.Receive AND (PurchLine2."Qty. to Receive" <> 0)) OR
             (PurchHeader.Invoice AND (PurchLine2."Qty. to Invoice" <> 0)) OR
             (PurchHeader.Ship AND (PurchLine2."Return Qty. to Ship" <> 0))
          THEN BEGIN
            CheckDimComb(PurchLine2);
            CheckDimValuePosting(PurchLine2);
          END
        UNTIL PurchLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimComb@30(PurchLine@1000 : Record 39);
    VAR
      DimMgt@1001 : Codeunit 408;
    BEGIN
      IF PurchLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(PurchHeader."Dimension Set ID") THEN
          ERROR(
            Text032,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimCombErr);

      IF PurchLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(PurchLine."Dimension Set ID") THEN
          ERROR(
            Text033,
            PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(VAR PurchLine2@1000 : Record 39);
    VAR
      DimMgt@1001 : Codeunit 408;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      //DimMgt.SetCompany(PurchLine2."Receiving Company"); //**4PS.o T003995
      IF PurchLine2."Line No." = 0 THEN BEGIN
        DimMgt.SetCompany(COMPANYNAME); //**4PS.n T003995
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := PurchHeader."Pay-to Vendor No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := PurchHeader."Purchaser Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := PurchHeader."Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := PurchHeader."Responsibility Center";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchHeader."Dimension Set ID") THEN
          ERROR(
            Text034,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimValuePostingErr);
      END ELSE BEGIN
        DimMgt.SetCompany(PurchLine2."Receiving Company"); //**4PS.n  T003995
        TableIDArr[1] := DimMgt.TypeToTableID3(PurchLine2.Type);
        NumberArr[1] := PurchLine2."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := PurchLine2."Job No.";
        TableIDArr[3] := DATABASE::"Work Center";
        NumberArr[3] := PurchLine2."Work Center No.";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchLine2."Dimension Set ID") THEN
          ERROR(
            Text035,
            PurchHeader."Document Type",PurchHeader."No.",PurchLine2."Line No.",DimMgt.GetDimValuePostingErr);
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5803();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchLine."Document No.");
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemChargeAssgnt@5808();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        ClearItemChargeAssgntFilter;
        MARKEDONLY(TRUE);
        IF FINDSET THEN
          REPEAT
            ItemChargeAssgntPurch.GET("Document Type","Document No.","Document Line No.","Line No.");
            ItemChargeAssgntPurch."Qty. Assigned" :=
              ItemChargeAssgntPurch."Qty. Assigned" + "Qty. to Assign";
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePurchOrderChargeAssgnt@5814(PurchOrderInvLine@1000 : Record 39;PurchOrderLine@1001 : Record 39);
    VAR
      PurchOrderLine2@1002 : Record 39;
      PurchOrderInvLine2@1003 : Record 39;
      PurchRcptLine@1004 : Record 121;
      ReturnShptLine@1005 : Record 6651;
    BEGIN
      WITH PurchOrderInvLine DO BEGIN
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        TempItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        TempItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        TempItemChargeAssgntPurch.MARKEDONLY(TRUE);
        IF TempItemChargeAssgntPurch.FINDSET THEN
          REPEAT
            IF TempItemChargeAssgntPurch."Applies-to Doc. Type" = "Document Type" THEN BEGIN
              PurchOrderInvLine2.GET(
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
              IF ((PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::Order) AND
                  (PurchOrderInvLine2."Receipt No." = "Receipt No.")) OR
                 ((PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::"Return Order") AND
                  (PurchOrderInvLine2."Return Shipment No." = "Return Shipment No."))
              THEN BEGIN
                IF PurchLine."Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                  IF NOT
                     PurchRcptLine.GET(PurchOrderInvLine2."Receipt No.",PurchOrderInvLine2."Receipt Line No.")
                  THEN
                    ERROR(Text014);
                  PurchOrderLine2.GET(
                    PurchOrderLine2."Document Type"::Order,
                    PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
                END ELSE BEGIN
                  IF NOT
                     ReturnShptLine.GET(PurchOrderInvLine2."Return Shipment No.",PurchOrderInvLine2."Return Shipment Line No.")
                  THEN
                    ERROR(Text040);
                  PurchOrderLine2.GET(
                    PurchOrderLine2."Document Type"::"Return Order",
                    ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");
                END;
                UpdatePurchChargeAssgntLines(
                  PurchOrderLine,
                  PurchOrderLine2."Document Type",
                  PurchOrderLine2."Document No.",
                  PurchOrderLine2."Line No.",
                  TempItemChargeAssgntPurch."Qty. to Assign");
              END;
            END ELSE
              UpdatePurchChargeAssgntLines(
                PurchOrderLine,
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.",
                TempItemChargeAssgntPurch."Qty. to Assign");
          UNTIL TempItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePurchChargeAssgntLines@5813(PurchOrderLine@1000 : Record 39;ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;QtytoAssign@1004 : Decimal);
    VAR
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch2@1008 : Record 5805;
      LastLineNo@1006 : Integer;
      TotalToAssign@1007 : Decimal;
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchOrderLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchOrderLine."Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchOrderLine."Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ApplToDocType);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",ApplToDocNo);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",ApplToDocLineNo);
      IF ItemChargeAssgntPurch.FINDFIRST THEN BEGIN
        ItemChargeAssgntPurch."Qty. Assigned" :=
          ItemChargeAssgntPurch."Qty. Assigned" + QtytoAssign;
        ItemChargeAssgntPurch."Qty. to Assign" := 0;
        ItemChargeAssgntPurch."Amount to Assign" := 0;
        ItemChargeAssgntPurch.MODIFY;
      END ELSE BEGIN
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
        ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");

        TempItemChargeAssgntPurch2.SETRANGE("Document Type",TempItemChargeAssgntPurch."Document Type");
        TempItemChargeAssgntPurch2.SETRANGE("Document No.",TempItemChargeAssgntPurch."Document No.");
        TempItemChargeAssgntPurch2.SETRANGE("Document Line No.",TempItemChargeAssgntPurch."Document Line No.");
        TempItemChargeAssgntPurch2.CALCSUMS("Qty. to Assign");

        TotalToAssign := ItemChargeAssgntPurch."Qty. to Assign" +
          TempItemChargeAssgntPurch2."Qty. to Assign";

        IF ItemChargeAssgntPurch.FINDLAST THEN
          LastLineNo := ItemChargeAssgntPurch."Line No.";

        IF PurchOrderLine.Quantity < TotalToAssign THEN
          REPEAT
            TotalToAssign := TotalToAssign - ItemChargeAssgntPurch."Qty. to Assign";
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          UNTIL (ItemChargeAssgntPurch.NEXT(-1) = 0) OR
                (TotalToAssign = PurchOrderLine.Quantity);

        InsertAssocOrderCharge(
          PurchOrderLine,
          ApplToDocType,
          ApplToDocNo,
          ApplToDocLineNo,
          LastLineNo,
          TempItemChargeAssgntPurch."Applies-to Doc. Line Amount");
      END;
    END;

    LOCAL PROCEDURE InsertAssocOrderCharge@48(PurchOrderLine@1000 : Record 39;ApplToDocType@1002 : Option;ApplToDocNo@1003 : Code[20];ApplToDocLineNo@1004 : Integer;LastLineNo@1007 : Integer;ApplToDocLineAmt@1005 : Decimal);
    VAR
      NewItemChargeAssgntPurch@1001 : Record 5805;
    BEGIN
      WITH NewItemChargeAssgntPurch DO BEGIN
        INIT;
        "Document Type" := PurchOrderLine."Document Type";
        "Document No." := PurchOrderLine."Document No.";
        "Document Line No." := PurchOrderLine."Line No.";
        "Line No." := LastLineNo + 10000;
        "Item Charge No." := TempItemChargeAssgntPurch."Item Charge No.";
        "Item No." := TempItemChargeAssgntPurch."Item No.";
        "Qty. Assigned" := TempItemChargeAssgntPurch."Qty. to Assign";
        "Qty. to Assign" := 0;
        "Amount to Assign" := 0;
        Description := TempItemChargeAssgntPurch.Description;
        "Unit Cost" := TempItemChargeAssgntPurch."Unit Cost";
        "Applies-to Doc. Type" := ApplToDocType;
        "Applies-to Doc. No." := ApplToDocNo;
        "Applies-to Doc. Line No." := ApplToDocLineNo;
        "Applies-to Doc. Line Amount" := ApplToDocLineAmt;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CopyAndCheckItemCharge@5806(PurchHeader@1000 : Record 38);
    VAR
      PurchLine2@1001 : Record 39;
      PurchLine3@1002 : Record 39;
      InvoiceEverything@1004 : Boolean;
      AssignError@1005 : Boolean;
      QtyNeeded@1102601000 : Decimal;
    BEGIN
      TempItemChargeAssgntPurch.RESET;
      TempItemChargeAssgntPurch.DELETEALL;

      // Check for max qty posting
      PurchLine2.RESET;
      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETRANGE(Type,PurchLine2.Type::"Charge (Item)");
      PutPromisedReceiveDateFilter(PurchLine2); //**4PS.n
      PutReceiveMarkedOnlyFilter(PurchLine2); //**4PS.n DP00556
      IF PurchLine2.ISEMPTY THEN
        EXIT;

      PurchLine2.FINDSET;
      REPEAT
        ItemChargeAssgntPurch.RESET;
        ItemChargeAssgntPurch.SETRANGE("Document Type",PurchLine2."Document Type");
        ItemChargeAssgntPurch.SETRANGE("Document No.",PurchLine2."Document No.");
        ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
        ItemChargeAssgntPurch.SETFILTER("Qty. to Assign",'<>0');
        IF ItemChargeAssgntPurch.FINDSET THEN
          REPEAT
            TempItemChargeAssgntPurch.INIT;
            TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
            TempItemChargeAssgntPurch.INSERT;
          UNTIL ItemChargeAssgntPurch.NEXT = 0;

        IF PurchLine2."Qty. to Invoice" <> 0 THEN BEGIN
          PurchLine2.TESTFIELD("Job No.",'');
          IF PurchHeader.Invoice AND
             (PurchLine2."Qty. to Receive" + PurchLine2."Return Qty. to Ship" <> 0) AND
             ((PurchHeader.Ship OR PurchHeader.Receive) OR
              (ABS(PurchLine2."Qty. to Invoice") >
               ABS(PurchLine2."Qty. Rcd. Not Invoiced" + PurchLine2."Qty. to Receive") +
               ABS(PurchLine2."Ret. Qty. Shpd Not Invd.(Base)" + PurchLine2."Return Qty. to Ship")))
          THEN
            PurchLine2.TESTFIELD("Line Amount");

          IF NOT PurchHeader.Receive THEN
            PurchLine2."Qty. to Receive" := 0;
          IF NOT PurchHeader.Ship THEN
            PurchLine2."Return Qty. to Ship" := 0;
          IF ABS(PurchLine2."Qty. to Invoice") >
             ABS(PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
               PurchLine2."Return Qty. Shipped" + PurchLine2."Return Qty. to Ship" -
               PurchLine2."Quantity Invoiced")
          THEN
            PurchLine2."Qty. to Invoice" :=
              PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
              PurchLine2."Return Qty. Shipped (Base)" + PurchLine2."Return Qty. to Ship (Base)" -
              PurchLine2."Quantity Invoiced";

          PurchLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");
          IF ABS(PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned") >
             ABS(PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced")
          THEN
            ERROR(Text036,
              PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced" -
              PurchLine2."Qty. Assigned",PurchLine2.FIELDCAPTION("Document Type"),
              PurchLine2."Document Type",PurchLine2.FIELDCAPTION("Document No."),
              PurchLine2."Document No.",PurchLine2.FIELDCAPTION("Line No."),
              PurchLine2."Line No.");
          IF PurchLine2.Quantity =
             PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced"
          THEN BEGIN
            IF PurchLine2."Qty. to Assign" <> 0 THEN
              IF PurchLine2.Quantity = PurchLine2."Quantity Invoiced" THEN BEGIN
                TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
                TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",PurchLine2."Document Type");
                IF TempItemChargeAssgntPurch.FINDSET THEN
                  REPEAT
                    PurchLine3.GET(
                      TempItemChargeAssgntPurch."Applies-to Doc. Type",
                      TempItemChargeAssgntPurch."Applies-to Doc. No.",
                      TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
                    IF PurchLine3.Quantity = PurchLine3."Quantity Invoiced" THEN
                      ERROR(Text038,PurchLine3.TABLECAPTION,
                        PurchLine3.FIELDCAPTION("Document Type"),PurchLine3."Document Type",
                        PurchLine3.FIELDCAPTION("Document No."),PurchLine3."Document No.",
                        PurchLine3.FIELDCAPTION("Line No."),PurchLine3."Line No.");
                  UNTIL TempItemChargeAssgntPurch.NEXT = 0;
              END;
            IF PurchLine2.Quantity <>
               PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned"
            THEN
              AssignError := TRUE;
          END;

          IF (PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned") <
             (PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced")
          THEN
            ERROR(Text059,PurchLine2."No.");

          // check if all ILEs exist
          QtyNeeded := PurchLine2."Qty. to Assign";
          TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
          IF TempItemChargeAssgntPurch.FINDSET THEN
            REPEAT
              IF (TempItemChargeAssgntPurch."Applies-to Doc. Type" <> PurchLine2."Document Type") OR
                 (TempItemChargeAssgntPurch."Applies-to Doc. No." <> PurchLine2."Document No.")
              THEN
                QtyNeeded := QtyNeeded - TempItemChargeAssgntPurch."Qty. to Assign"
              ELSE BEGIN
                PurchLine3.GET(
                  TempItemChargeAssgntPurch."Applies-to Doc. Type",
                  TempItemChargeAssgntPurch."Applies-to Doc. No.",
                  TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
                IF ItemLedgerEntryExist(PurchLine3) THEN
                  QtyNeeded := QtyNeeded - TempItemChargeAssgntPurch."Qty. to Assign";
              END;
            UNTIL TempItemChargeAssgntPurch.NEXT = 0;

          IF QtyNeeded > 0 THEN
            ERROR(Text060,PurchLine2."No.");
        END;
      UNTIL PurchLine2.NEXT = 0;

      // Check purchlines
      IF AssignError THEN
        IF PurchHeader."Document Type" IN
           [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]
        THEN
          InvoiceEverything := TRUE
        ELSE BEGIN
          PurchLine2.RESET;
          PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
          PurchLine2.SETFILTER(Type,'%1|%2',PurchLine2.Type::Item,PurchLine2.Type::"Charge (Item)");
          PutPromisedReceiveDateFilter(PurchLine2); //**4PS.n
          PutReceiveMarkedOnlyFilter(PurchLine2); //**4PS.n DP00556
          IF PurchLine2.FINDSET THEN
            REPEAT
              IF PurchHeader.Ship OR PurchHeader.Receive THEN
                InvoiceEverything :=
                  PurchLine2.Quantity = PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced"
              ELSE
                InvoiceEverything :=
                  (PurchLine2.Quantity = PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced") AND
                  (PurchLine2."Qty. to Invoice" =
                   PurchLine2."Qty. Rcd. Not Invoiced" + PurchLine2."Return Qty. Shipped Not Invd.");
            UNTIL (PurchLine2.NEXT = 0) OR (NOT InvoiceEverything);
        END;

      IF InvoiceEverything AND AssignError THEN
        ERROR(Text037);
    END;

    LOCAL PROCEDURE ClearItemChargeAssgntFilter@27();
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
      TempItemChargeAssgntPurch.MARKEDONLY(FALSE);
    END;

    LOCAL PROCEDURE GetItemChargeLine@5809(VAR ItemChargePurchLine@1000 : Record 39);
    BEGIN
      WITH TempItemChargeAssgntPurch DO
        IF (ItemChargePurchLine."Document Type" <> "Document Type") OR
           (ItemChargePurchLine."Document No." <> "Document No.") OR
           (ItemChargePurchLine."Line No." <> "Document Line No.")
        THEN BEGIN
          ItemChargePurchLine.GET("Document Type","Document No.","Document Line No.");
          IF NOT PurchHeader.Receive THEN
            PurchLine2."Qty. to Receive" := 0;
          IF NOT PurchHeader.Ship THEN
            PurchLine2."Return Qty. to Ship" := 0;
          IF ABS(PurchLine2."Qty. to Invoice") >
             ABS(PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
               PurchLine2."Return Qty. Shipped" + PurchLine2."Return Qty. to Ship" -
               PurchLine2."Quantity Invoiced")
          THEN
            PurchLine2."Qty. to Invoice" :=
              PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
              PurchLine2."Return Qty. Shipped (Base)" + PurchLine2."Return Qty. to Ship (Base)" -
              PurchLine2."Quantity Invoiced";
        END;
    END;

    LOCAL PROCEDURE OnlyAssgntPosting@36() : Boolean;
    VAR
      PurchLine@1000 : Record 39;
      QtyLeftToAssign@1002 : Boolean;
    BEGIN
      WITH PurchHeader DO BEGIN
        ItemChargeAssgntOnly := FALSE;
        QtyLeftToAssign := FALSE;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE(Type, PurchLine.Type::"Charge (Item)");
        PutPromisedReceiveDateFilter(PurchLine); //**4PS.n
        PutReceiveMarkedOnlyFilter(PurchLine); //**4PS.n DP00556
        IF PurchLine.FINDSET THEN
          REPEAT
            PurchLine.CALCFIELDS("Qty. Assigned");
            IF PurchLine."Quantity Invoiced" > PurchLine."Qty. Assigned" THEN
              QtyLeftToAssign := TRUE;
          UNTIL PurchLine.NEXT = 0;

        IF QtyLeftToAssign THEN
          CopyAndCheckItemCharge(PurchHeader);
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntPurch.SETCURRENTKEY("Applies-to Doc. Type");
        TempItemChargeAssgntPurch.SETFILTER("Applies-to Doc. Type",'<>%1',"Document Type");
        PurchLine.SETRANGE(Type);
        PurchLine.SETRANGE("Quantity Invoiced");
        PurchLine.SETFILTER("Qty. to Assign",'<>0');
        IF PurchLine.FINDSET THEN
          REPEAT
            TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
            IF TempItemChargeAssgntPurch.FINDFIRST THEN
              ItemChargeAssgntOnly := TRUE;
          UNTIL (PurchLine.NEXT = 0) OR ItemChargeAssgntOnly
        ELSE
          ItemChargeAssgntOnly := FALSE;
      END;
      EXIT(ItemChargeAssgntOnly);
    END;

    LOCAL PROCEDURE CalcQtyToInvoice@5810(QtyToHandle@1000 : Decimal;QtyToInvoice@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyToHandle) > ABS(QtyToInvoice) THEN
        EXIT(QtyToHandle);

      EXIT(QtyToInvoice);
    END;

    LOCAL PROCEDURE GetGLSetup@20();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(VAR PurchLine@1000 : Record 39);
    VAR
      PurchLine2@1001 : Record 39;
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
    BEGIN
      PurchLine2.COPY(PurchLine);
      IF PurchLine2."Prod. Order No." <> '' THEN
        EXIT;
      PurchLine2.SETRANGE(Type,PurchLine2.Type::Item);
      PurchLine2.SETRANGE("Drop Shipment",FALSE);
      IF PurchLine2.FINDSET THEN
        REPEAT
          GetLocation(PurchLine2."Location Code");
          CASE PurchLine2."Document Type" OF
            PurchLine2."Document Type"::Order:
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (PurchLine2.Quantity >= 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (PurchLine2.Quantity < 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Purchase Line",
                       PurchLine2."Document Type",
                       PurchLine2."Document No.",
                       PurchLine2."Line No.",
                       0,
                       PurchLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            PurchLine2."Document Type"::"Return Order":
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (PurchLine2.Quantity < 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (PurchLine2.Quantity >= 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Purchase Line",
                       PurchLine2."Document Type",
                       PurchLine2."Document No.",
                       PurchLine2."Line No.",
                       0,
                       PurchLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            PurchLine2."Document Type"::Invoice,PurchLine2."Document Type"::"Credit Memo":
              IF Location."Directed Put-away and Pick" THEN
                Location.TESTFIELD("Adjustment Bin Code");
          END;
          IF ShowError THEN
            ERROR(
              Text026,
              PurchLine2.FIELDCAPTION("Document Type"),
              PurchLine2."Document Type",
              PurchLine2.FIELDCAPTION("Document No."),
              PurchLine2."Document No.",
              PurchLine2.FIELDCAPTION("Line No."),
              PurchLine2."Line No.");
        UNTIL PurchLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;PurchLine@1002 : Record 39;VAR TempWhseJnlLine@1001 : TEMPORARY Record 7311);
    VAR
      WhseMgt@1003 : Codeunit 5775;
    BEGIN
      WITH PurchLine DO BEGIN
        WMSMgmt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,TRUE);
        WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,FALSE);
        TempWhseJnlLine."Source Type" := DATABASE::"Purchase Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        TempWhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        TempWhseJnlLine."Source Code" := SrcCode;
        CASE "Document Type" OF
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rcpt.";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted P. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted P. Cr. Memo";
          "Document Type"::"Return Order":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rtrn. Rcpt.";
        END;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      END;
    END;

    LOCAL PROCEDURE WhseHandlingRequired@7307() : Boolean;
    VAR
      WhseSetup@1000 : Record 5769;
    BEGIN
      IF (PurchLine.Type = PurchLine.Type::Item) AND
         (NOT PurchLine."Drop Shipment")
      THEN BEGIN
        IF PurchLine."Location Code" = '' THEN BEGIN
          WhseSetup.GET;
          IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
            EXIT(WhseSetup."Require Pick");

          EXIT(WhseSetup."Require Receive");
        END;

        GetLocation(PurchLine."Location Code");
        IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
          EXIT(Location."Require Pick");

        EXIT(Location."Require Receive");
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE InsertRcptEntryRelation@38(VAR PurchRcptLine@1002 : Record 121) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsPurchRcptLine(PurchRcptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END;
      EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE InsertReturnEntryRelation@39(VAR ReturnShptLine@1002 : Record 6651) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsReturnShptLine(ReturnShptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END;
      EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE CheckTrackingSpecification@46(VAR PurchLine@1019 : Record 39);
    VAR
      PurchLineToCheck@1000 : Record 39;
      ReservationEntry@1001 : Record 337;
      Item@1016 : Record 27;
      ItemTrackingCode@1009 : Record 6502;
      CreateReservEntry@1004 : Codeunit 99000830;
      ItemTrackingManagement@1015 : Codeunit 6500;
      ErrorFieldCaption@1018 : Text[250];
      SignFactor@1005 : Integer;
      PurchLineQtyToHandle@1023 : Decimal;
      TrackingQtyToHandle@1003 : Decimal;
      Inbound@1010 : Boolean;
      SNRequired@1011 : Boolean;
      LotRequired@1012 : Boolean;
      SNInfoRequired@1013 : Boolean;
      LotInfoRequired@1014 : Boolean;
      CheckPurchLine@1008 : Boolean;
    BEGIN
      // if a PurchaseLine is posted with ItemTracking then tracked quantity must be
      // equal to posted quantity

      IF PurchHeader."Document Type" IN
         [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"] = FALSE
      THEN
        EXIT;

      TrackingQtyToHandle := 0;

      PurchLineToCheck.COPY(PurchLine);
      PurchLineToCheck.SETRANGE(Type,PurchLineToCheck.Type::Item);
      IF PurchHeader.Receive THEN BEGIN
        PurchLineToCheck.SETFILTER("Quantity Received",'<>%1',0);
        ErrorFieldCaption := PurchLineToCheck.FIELDCAPTION("Qty. to Receive");
      END ELSE BEGIN
        PurchLineToCheck.SETFILTER("Return Qty. Shipped",'<>%1',0);
        ErrorFieldCaption := PurchLineToCheck.FIELDCAPTION("Return Qty. to Ship");
      END;

      IF PurchLineToCheck.FINDSET THEN BEGIN
        ReservationEntry."Source Type" := DATABASE::"Purchase Line";
        ReservationEntry."Source Subtype" := PurchHeader."Document Type";
        SignFactor := CreateReservEntry.SignFactor(ReservationEntry);
        REPEAT
          // Only Item where no SerialNo or LotNo is required
          Item.GET(PurchLineToCheck."No.");
          IF Item."Item Tracking Code" <> '' THEN BEGIN
            Inbound := (PurchLineToCheck.Quantity * SignFactor) > 0;
            ItemTrackingCode.Code := Item."Item Tracking Code";
            ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
              ItemJnlLine."Entry Type"::Purchase,
              Inbound,
              SNRequired,
              LotRequired,
              SNInfoRequired,
              LotInfoRequired);
            CheckPurchLine := (SNRequired = FALSE) AND (LotRequired = FALSE);
            IF CheckPurchLine THEN
              CheckPurchLine := GetTrackingQuantities(PurchLineToCheck,0,TrackingQtyToHandle);
          END ELSE
            CheckPurchLine := FALSE;

          TrackingQtyToHandle := 0;

          IF CheckPurchLine THEN BEGIN
            GetTrackingQuantities(PurchLineToCheck,1,TrackingQtyToHandle);
            TrackingQtyToHandle := TrackingQtyToHandle * SignFactor;
            IF PurchHeader.Receive THEN
              PurchLineQtyToHandle := PurchLineToCheck."Qty. to Receive (Base)"
            ELSE
              PurchLineQtyToHandle := PurchLineToCheck."Return Qty. to Ship (Base)";
            IF TrackingQtyToHandle <> PurchLineQtyToHandle THEN
              //ERROR(STRSUBSTNO(Text046,ErrorFieldCaption)); //**4PS.o DP00121
              ERROR(STRSUBSTNO(Text046,ErrorFieldCaption,PurchLineToCheck."No.")); //**4PS.n DP00121
          END;
        UNTIL PurchLineToCheck.NEXT = 0;
      END;

      //**4PS.sn DP00121
      PurchLineToCheck.COPY(PurchLine);
      PurchLineToCheck.SETRANGE(Type,PurchLineToCheck.Type::"G/L Account");
      PurchLineToCheck.SETFILTER("Item No.", '<>%1', '');
      IF PurchHeader.Receive THEN
        ErrorFieldCaption := PurchLineToCheck.FIELDCAPTION("Qty. to Receive")
      ELSE
        ErrorFieldCaption := PurchLineToCheck.FIELDCAPTION("Return Qty. to Ship");

      IF PurchLineToCheck.FINDSET THEN BEGIN
        ReservationEntry."Source Type" := DATABASE::"Purchase Line";
        ReservationEntry."Source Subtype" := PurchHeader."Document Type";
        SignFactor := CreateReservEntry.SignFactor(ReservationEntry);
        REPEAT
          // Only Item where no SerialNo or LotNo is required
          Item.GET(PurchLineToCheck."Item No.");
          IF Item."Item Tracking Code" <> '' THEN BEGIN
            Inbound := (PurchLineToCheck.Quantity * SignFactor) > 0;
            ItemTrackingCode.Code := Item."Item Tracking Code";
            ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
              ItemJnlLine."Entry Type"::Purchase,
              Inbound,
              SNRequired,
              LotRequired,
              SNInfoRequired,
              LotInfoRequired);
            CheckPurchLine := (SNRequired = FALSE) AND (LotRequired = FALSE);
            IF CheckPurchLine THEN
              CheckPurchLine := GetTrackingQuantities(PurchLineToCheck,0,TrackingQtyToHandle);
          END ELSE
            CheckPurchLine := FALSE;

          TrackingQtyToHandle := 0;

          IF CheckPurchLine THEN BEGIN
            GetTrackingQuantities(PurchLineToCheck,1,TrackingQtyToHandle);
            TrackingQtyToHandle := TrackingQtyToHandle * SignFactor;
            IF PurchHeader.Receive THEN
              PurchLineQtyToHandle := PurchLineToCheck."Qty. to Receive (Base)"
            ELSE
              PurchLineQtyToHandle := PurchLineToCheck."Return Qty. to Ship (Base)";

            IF TrackingQtyToHandle <> PurchLineQtyToHandle THEN
              ERROR(STRSUBSTNO(Text046,ErrorFieldCaption,PurchLineToCheck."Item No."));
          END;
        UNTIL PurchLineToCheck.NEXT = 0;
      END;
      //**4PS.en
    END;

    LOCAL PROCEDURE GetTrackingQuantities@47(PurchLine@1000 : Record 39;FunctionType@1002 : 'CheckTrackingExists,GetQty';VAR TrackingQtyToHandle@1003 : Decimal) : Boolean;
    VAR
      TrackingSpecification@1004 : Record 336;
      ReservEntry@1001 : Record 337;
      NSTrackingSpecification@1100528601 : Record 11071901;
      NSReservEntry@1100528600 : Record 11071900;
    BEGIN
      WITH TrackingSpecification DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
      END;
      WITH ReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
      END;

      //**4PS.sn DP00121
      WITH NSTrackingSpecification DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
      END;
      WITH NSReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
      END;
      //**4PS.en

      CASE FunctionType OF
        FunctionType::CheckTrackingExists:
          BEGIN
            TrackingSpecification.SETRANGE(Correction,FALSE);
            IF NOT TrackingSpecification.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETFILTER("Serial No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETRANGE("Serial No.");
            ReservEntry.SETFILTER("Lot No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            //**4PS.sn DP00121
            NSTrackingSpecification.SETRANGE(Correction,FALSE);
            IF NOT NSTrackingSpecification.ISEMPTY THEN
              EXIT(TRUE);
            NSReservEntry.SETFILTER("Serial No.",'<>%1','');
            IF NOT NSReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            NSReservEntry.SETRANGE("Serial No.");
            NSReservEntry.SETFILTER("Lot No.",'<>%1','');
            IF NOT NSReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            //**4PS.en
          END;
        FunctionType::GetQty:
          BEGIN
            IF ReservEntry.FINDSET THEN
              REPEAT
                IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN
                  TrackingQtyToHandle := TrackingQtyToHandle + ReservEntry."Qty. to Handle (Base)";
              UNTIL ReservEntry.NEXT = 0;
            //**4PS.sn DP00121
            IF NSReservEntry.FINDSET THEN
              REPEAT
                IF (NSReservEntry."Lot No." <> '') OR (NSReservEntry."Serial No." <> '') THEN
                  TrackingQtyToHandle := TrackingQtyToHandle + NSReservEntry."Qty. to Handle (Base)";
              UNTIL NSReservEntry.NEXT = 0;
            //**4PS.en
          END;
      END;
    END;

    LOCAL PROCEDURE SaveInvoiceSpecification@33(VAR TempInvoicingSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      TempInvoicingSpecification.RESET;
      IF TempInvoicingSpecification.FINDSET THEN BEGIN
        REPEAT
          TempInvoicingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
          TempTrackingSpecification := TempInvoicingSpecification;
          TempTrackingSpecification."Buffer Status" := TempTrackingSpecification."Buffer Status"::MODIFY;
          IF NOT TempTrackingSpecification.INSERT THEN BEGIN
            TempTrackingSpecification.GET(TempInvoicingSpecification."Entry No.");
            TempTrackingSpecification."Qty. to Invoice (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            IF TempInvoicingSpecification."Qty. to Invoice (Base)" = TempInvoicingSpecification."Quantity Invoiced (Base)" THEN
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Quantity Invoiced (Base)"
            ELSE
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Qty. to Invoice" += TempInvoicingSpecification."Qty. to Invoice";
            TempTrackingSpecification.MODIFY;
          END;
        UNTIL TempInvoicingSpecification.NEXT = 0;
        TempInvoicingSpecification.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE InsertTrackingSpecification@35();
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      TempTrackingSpecification.RESET;
      IF TempTrackingSpecification.FINDSET THEN BEGIN
        REPEAT
          TrackingSpecification := TempTrackingSpecification;
          TrackingSpecification."Buffer Status" := 0;
          TrackingSpecification.InitQtyToShip;
          TrackingSpecification.Correction := FALSE;
          TrackingSpecification."Quantity actual Handled (Base)" := 0;
          IF TempTrackingSpecification."Buffer Status" = TempTrackingSpecification."Buffer Status"::MODIFY THEN
            TrackingSpecification.MODIFY
          ELSE
            TrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
        TempTrackingSpecification.DELETEALL;
      END;

      ReservePurchLine.UpdateItemTrackingAfterPosting(PurchHeader);
    END;

    LOCAL PROCEDURE CalcBaseQty@29(ItemNo@1002 : Code[20];UOMCode@1004 : Code[10];Qty@1000 : Decimal) : Decimal;
    VAR
      UOMMgt@1001 : Codeunit 5402;
      Item@1003 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      EXIT(ROUND(Qty * UOMMgt.GetQtyPerUnitOfMeasure(Item,UOMCode),0.00001));
    END;

    LOCAL PROCEDURE InsertValueEntryRelation@40();
    VAR
      ValueEntryRelation@1000 : Record 6508;
    BEGIN
      TempValueEntryRelation.RESET;
      IF TempValueEntryRelation.FINDSET THEN BEGIN
        REPEAT
          ValueEntryRelation := TempValueEntryRelation;
          ValueEntryRelation.INSERT;
        UNTIL TempValueEntryRelation.NEXT = 0;
        TempValueEntryRelation.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE PostItemCharge@42(VAR PurchLine@1000 : Record 39;ItemEntryNo@1004 : Integer;QuantityBase@1005 : Decimal;AmountToAssign@1006 : Decimal;QtyToAssign@1007 : Decimal;IndirectCostPct@1008 : Decimal);
    VAR
      DummyTrackingSpecification@1001 : Record 336;
      PurchLineToPost@1009 : Record 39;
      CurrExchRate@1002 : Record 330;
      TotalChargeAmt@1003 : Decimal;
      TotalChargeAmtLCY@1010 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        PurchLineToPost := PurchLine;
        PurchLineToPost."No." := "Item No.";
        PurchLineToPost."Line No." := "Document Line No.";
        PurchLineToPost."Appl.-to Item Entry" := ItemEntryNo;
        PurchLineToPost."Indirect Cost %" := IndirectCostPct;

        PurchLineToPost.Amount := AmountToAssign;

        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          PurchLineToPost.Amount := -PurchLineToPost.Amount;

        IF PurchLineToPost."Currency Code" <> '' THEN
          PurchLineToPost."Unit Cost" := ROUND(
              PurchLineToPost.Amount / QuantityBase,Currency."Unit-Amount Rounding Precision")
        ELSE
          PurchLineToPost."Unit Cost" := ROUND(
              PurchLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");

        TotalChargeAmt := TotalChargeAmt + PurchLineToPost.Amount;
        IF PurchHeader."Currency Code" <> '' THEN
          PurchLineToPost.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
      //      Usedate,PurchHeader."Currency Code",TotalChargeAmt,PurchHeader."Currency Factor"); //**4PS.o
              0, '',Usedate,PurchHeader."Currency Code",TotalChargeAmt,PurchHeader."Currency Factor",FALSE); //**4PS.n

        PurchLineToPost.Amount := ROUND(PurchLineToPost.Amount,GLSetup."Amount Rounding Precision") - TotalChargeAmtLCY;
        IF PurchHeader."Currency Code" <> '' THEN
          TotalChargeAmtLCY := TotalChargeAmtLCY + PurchLineToPost.Amount;
        PurchLineToPost."Unit Cost (LCY)" :=
          ROUND(
            PurchLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");

        PurchLineToPost."Inv. Discount Amount" := ROUND(
            PurchLine."Inv. Discount Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");

        PurchLineToPost."Line Discount Amount" := ROUND(
            PurchLine."Line Discount Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        PurchLineToPost."Line Amount" := ROUND(
            PurchLine."Line Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        UpdatePurchLineDimSetIDFromAppliedEntry(PurchLineToPost,PurchLine);
        PurchLine."Inv. Discount Amount" := PurchLine."Inv. Discount Amount" - PurchLineToPost."Inv. Discount Amount";
        PurchLine."Line Discount Amount" := PurchLine."Line Discount Amount" - PurchLineToPost."Line Discount Amount";
        PurchLine."Line Amount" := PurchLine."Line Amount" - PurchLineToPost."Line Amount";
        PurchLine.Quantity := PurchLine.Quantity - QtyToAssign;
        PostItemJnlLine(
          PurchLineToPost,
          0,0,
          QuantityBase,QuantityBase,
          PurchLineToPost."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
      END;
    END;

    LOCAL PROCEDURE SaveTempWhseSplitSpec@45(PurchLine3@1000 : Record 39);
    BEGIN
      TempWhseSplitSpecification.RESET;
      TempWhseSplitSpecification.DELETEALL;
      IF TempHandlingSpecification.FINDSET THEN
        REPEAT
          TempWhseSplitSpecification := TempHandlingSpecification;
          TempWhseSplitSpecification."Source Type" := DATABASE::"Purchase Line";
          TempWhseSplitSpecification."Source Subtype" := PurchLine3."Document Type";
          TempWhseSplitSpecification."Source ID" := PurchLine3."Document No.";
          TempWhseSplitSpecification."Source Ref. No." := PurchLine3."Line No.";
          TempWhseSplitSpecification.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferReservToItemJnlLine@32(VAR SalesOrderLine@1000 : Record 37;VAR ItemJnlLine@1001 : Record 83;QtyToBeShippedBase@1002 : Decimal;ApplySpecificItemTracking@1003 : Boolean);
    VAR
      ReserveSalesLine@1006 : Codeunit 99000832;
      RemainingQuantity@1004 : Decimal;
      CheckApplFromItemEntry@1005 : Boolean;
    BEGIN
      // Handle Item Tracking and reservations, also on drop shipment
      IF QtyToBeShippedBase = 0 THEN
        EXIT;

      IF NOT ApplySpecificItemTracking THEN
        ReserveSalesLine.TransferSalesLineToItemJnlLine(
          SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
      ELSE BEGIN
        TempTrackingSpecification.RESET;
        TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Purchase Line");
        TempTrackingSpecification.SETRANGE("Source Subtype",PurchLine."Document Type");
        TempTrackingSpecification.SETRANGE("Source ID",PurchLine."Document No.");
        TempTrackingSpecification.SETRANGE("Source Batch Name",'');
        TempTrackingSpecification.SETRANGE("Source Prod. Order Line",0);
        TempTrackingSpecification.SETRANGE("Source Ref. No.",PurchLine."Line No.");
        IF TempTrackingSpecification.ISEMPTY THEN
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
        ELSE BEGIN
          ReserveSalesLine.SetApplySpecificItemTracking(TRUE);
          ReserveSalesLine.SetOverruleItemTracking(TRUE);
          TempTrackingSpecification.FINDSET;
          IF TempTrackingSpecification."Quantity (Base)" / QtyToBeShippedBase < 0 THEN
            ERROR(Text043);
          REPEAT
            ItemJnlLine."Serial No." := TempTrackingSpecification."Serial No.";
            ItemJnlLine."Lot No." := TempTrackingSpecification."Lot No.";
            ItemJnlLine."Applies-to Entry" := TempTrackingSpecification."Item Ledger Entry No.";
            RemainingQuantity :=
              ReserveSalesLine.TransferSalesLineToItemJnlLine(
                SalesOrderLine,ItemJnlLine,TempTrackingSpecification."Quantity (Base)",CheckApplFromItemEntry,FALSE);
            IF RemainingQuantity <> 0 THEN
              ERROR(Text044);
          UNTIL TempTrackingSpecification.NEXT = 0;
          ItemJnlLine."Serial No." := '';
          ItemJnlLine."Lot No." := '';
          ItemJnlLine."Applies-to Entry" := 0;
        END;
      END;
    END;

    PROCEDURE SetWhseRcptHeader@26(VAR WhseRcptHeader2@1000 : Record 7316);
    BEGIN
      WhseRcptHeader := WhseRcptHeader2;
      TempWhseRcptHeader := WhseRcptHeader;
      TempWhseRcptHeader.INSERT;
    END;

    PROCEDURE SetWhseShptHeader@44(VAR WhseShptHeader2@1000 : Record 7320);
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE CopySalesCommentLines@649(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      SalesCommentLine@1004 : Record 44;
      SalesCommentLine2@1005 : Record 44;
    BEGIN
      SalesCommentLine.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLine.SETRANGE("No.",FromNumber);
      IF SalesCommentLine.FINDSET THEN
        REPEAT
          SalesCommentLine2 := SalesCommentLine;
          SalesCommentLine2."Document Type" := ToDocumentType;
          SalesCommentLine2."No." := ToNumber;
          SalesCommentLine2.INSERT;
        UNTIL SalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetNextPurchline@54(VAR PurchLine@1000 : Record 39) : Boolean;
    BEGIN
      IF NOT PurchaseLinesProcessed THEN
        IF PurchLine.NEXT = 1 THEN
          EXIT(FALSE);
      PurchaseLinesProcessed := TRUE;
      IF TempPrepmtPurchLine.FIND('-') THEN BEGIN
        PurchLine := TempPrepmtPurchLine;
        TempPrepmtPurchLine.DELETE;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreatePrepmtLines@51(PurchHeader@1003 : Record 38;VAR TempPrepmtPurchLine@1004 : Record 39;CompleteFunctionality@1009 : Boolean);
    VAR
      GLAcc@1002 : Record 15;
      PurchLine@1000 : Record 39;
      TempExtTextLine@1011 : TEMPORARY Record 280;
      GenPostingSetup@1005 : Record 252;
      TransferExtText@1012 : Codeunit 378;
      NextLineNo@1001 : Integer;
      Fraction@1008 : Decimal;
      VATDifference@1015 : Decimal;
      TempLineFound@1010 : Boolean;
      PrePmtTestRun@1014 : Boolean;
      PrepmtAmtToDeduct@1016 : Decimal;
    BEGIN
      GetGLSetup;
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF NOT FIND('+') THEN
          EXIT;
        NextLineNo := "Line No." + 10000;
        PutPromisedReceiveDateFilter(PurchLine); //**4PS.n
        PutReceiveMarkedOnlyFilter(PurchLine); //**4PS.n DP00556
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        IF FIND('-') THEN
          REPEAT
            IF CompleteFunctionality THEN
              IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN BEGIN
                IF NOT PurchHeader.Receive AND ("Qty. to Invoice" = Quantity - "Quantity Invoiced") THEN
                  IF "Qty. Rcd. Not Invoiced" >= 0 THEN //**4PS.n C008671
                    IF "Qty. Rcd. Not Invoiced" < "Qty. to Invoice" THEN
                      VALIDATE("Qty. to Invoice","Qty. Rcd. Not Invoiced");
                Fraction := ("Qty. to Invoice" + "Quantity Invoiced") / Quantity;

                IF "Prepayment %" <> 100 THEN
                  CASE TRUE OF
                    ("Prepmt Amt to Deduct" <> 0) AND
                    (ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision") < "Prepmt Amt to Deduct"):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(
                          Text047,
                          ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")));
                    ("Prepmt. Amt. Inv." <> 0) AND
                    (ROUND((1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision") <
                     ROUND(
                       ROUND(
                         ROUND("Direct Unit Cost" * (Quantity - "Quantity Invoiced" - "Qty. to Invoice"),
                           Currency."Amount Rounding Precision") *
                         (1 - "Line Discount %" / 100),Currency."Amount Rounding Precision") *
                       "Prepayment %" / 100,Currency."Amount Rounding Precision")):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(
                          Text048,
                          ROUND(
                            "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" -
                            (1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision")));
                  END;
              END ELSE
                IF NOT PrePmtTestRun THEN BEGIN
                  TestGetRcptPPmtAmtToDeduct(PurchHeader);
                  PrePmtTestRun := TRUE;
                END;

            IF "Prepmt Amt to Deduct" <> 0 THEN BEGIN
              IF ("Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
                 ("Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              THEN BEGIN
                GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
              END;
              GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
              TempLineFound := FALSE;
              IF PurchHeader."Compress Prepayment" THEN BEGIN
                TempPrepmtPurchLine.SETRANGE("No.",GLAcc."No.");
                TempPrepmtPurchLine.SETRANGE("Job No.","Job No.");
                TempPrepmtPurchLine.SETRANGE("Dimension Set ID","Dimension Set ID");
                TempLineFound := TempPrepmtPurchLine.FINDFIRST;
              END;
              IF TempLineFound THEN BEGIN
                PrepmtAmtToDeduct :=
                  TempPrepmtPurchLine."Prepmt Amt to Deduct" +
                  InsertedPrepmtVATBaseToDeduct(PurchLine,TempPrepmtPurchLine."Line No.",TempPrepmtPurchLine."Direct Unit Cost");
                VATDifference := TempPrepmtPurchLine."VAT Difference";
                TempPrepmtPurchLine.VALIDATE(
                  "Direct Unit Cost",TempPrepmtPurchLine."Direct Unit Cost" + "Prepmt Amt to Deduct");
                TempPrepmtPurchLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
                TempPrepmtPurchLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                IF "Prepayment %" < TempPrepmtPurchLine."Prepayment %" THEN
                  TempPrepmtPurchLine."Prepayment %" := "Prepayment %";
                //**4PS.sn
                TempPrepmtPurchLine."Modified by" := USERID; //DP00469
                TempPrepmtPurchLine."Last Date Modified" := TODAY;//DP00469
                //**4PS.en
                TempPrepmtPurchLine.MODIFY;
              END ELSE BEGIN
                TempPrepmtPurchLine.INIT;
                TempPrepmtPurchLine."Document Type" := PurchHeader."Document Type";
                TempPrepmtPurchLine."Document No." := PurchHeader."No.";
                TempPrepmtPurchLine."Line No." := 0;
                TempPrepmtPurchLine."System-Created Entry" := TRUE;
                IF CompleteFunctionality THEN
                  TempPrepmtPurchLine.VALIDATE(Type,TempPrepmtPurchLine.Type::"G/L Account")
                ELSE
                  TempPrepmtPurchLine.Type := TempPrepmtPurchLine.Type::"G/L Account";
                TempPrepmtPurchLine.VALIDATE("No.",GenPostingSetup."Purch. Prepayments Account");
                TempPrepmtPurchLine.VALIDATE(Quantity,-1);
                TempPrepmtPurchLine."Qty. to Receive" := TempPrepmtPurchLine.Quantity;
                TempPrepmtPurchLine."Qty. to Invoice" := TempPrepmtPurchLine.Quantity;
                PrepmtAmtToDeduct := InsertedPrepmtVATBaseToDeduct(PurchLine,NextLineNo,0);
                TempPrepmtPurchLine.VALIDATE("Direct Unit Cost","Prepmt Amt to Deduct");
                TempPrepmtPurchLine.VALIDATE("VAT Difference",-"Prepmt VAT Diff. to Deduct");
                TempPrepmtPurchLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                TempPrepmtPurchLine."Prepayment %" := "Prepayment %";
                TempPrepmtPurchLine."Prepayment Line" := TRUE;
                TempPrepmtPurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                TempPrepmtPurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                TempPrepmtPurchLine."Dimension Set ID" := "Dimension Set ID";
                TempPrepmtPurchLine."Job No." := "Job No.";
                TempPrepmtPurchLine."Job Task No." := "Job Task No.";
                TempPrepmtPurchLine."Job Line Type" := "Job Line Type";
                TempPrepmtPurchLine."Line No." := NextLineNo;
                NextLineNo := NextLineNo + 10000;
                //**4PS.sn
                TempPrepmtPurchLine."Input by" := USERID; //DP00469
                TempPrepmtPurchLine."Input Date" := TODAY; //DP00469
                //**4PS.en
                TempPrepmtPurchLine.INSERT;

                TransferExtText.PrepmtGetAnyExtText(
                  TempPrepmtPurchLine."No.",DATABASE::"Purch. Inv. Line",
                  PurchHeader."Document Date",PurchHeader."Language Code",TempExtTextLine);
                IF TempExtTextLine.FIND('-') THEN
                  REPEAT
                    TempPrepmtPurchLine.INIT;
                    TempPrepmtPurchLine.Description := TempExtTextLine.Text;
                    TempPrepmtPurchLine."System-Created Entry" := TRUE;
                    TempPrepmtPurchLine."Prepayment Line" := TRUE;
                    TempPrepmtPurchLine."Line No." := NextLineNo;
                    NextLineNo := NextLineNo + 10000;
                    //**4PS.sn
                    TempPrepmtPurchLine."Input by" := USERID; //DP00469
                    TempPrepmtPurchLine."Input Date" := TODAY; //DP00469
                    //**4PS.en
                    TempPrepmtPurchLine.INSERT;
                  UNTIL TempExtTextLine.NEXT = 0;
              END;
            END;
          UNTIL NEXT = 0
      END;
      DividePrepmtAmountLCY(TempPrepmtPurchLine,PurchHeader);
    END;

    LOCAL PROCEDURE InsertedPrepmtVATBaseToDeduct@82(PurchLine@1000 : Record 39;PrepmtLineNo@1001 : Integer;TotalPrepmtAmtToDeduct@1002 : Decimal) : Decimal;
    VAR
      PrepmtVATBaseToDeduct@1003 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        IF PurchHeader."Prices Including VAT" THEN
          PrepmtVATBaseToDeduct :=
            ROUND(
              (TotalPrepmtAmtToDeduct + "Prepmt Amt to Deduct") / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision") -
            ROUND(
              TotalPrepmtAmtToDeduct / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          PrepmtVATBaseToDeduct := "Prepmt Amt to Deduct";
      END;
      WITH TempPrepmtDeductLCYPurchLine DO BEGIN
        TempPrepmtDeductLCYPurchLine := PurchLine;
        IF "Document Type" = "Document Type"::Order THEN
          "Qty. to Invoice" := GetQtyToInvoice(PurchLine)
        ELSE
          GetLineDataFromOrder(TempPrepmtDeductLCYPurchLine);
        CalcPrepaymentToDeduct;
        "Line Amount" := GetLineAmountToHandle("Qty. to Invoice");
        "Attached to Line No." := PrepmtLineNo;
        "VAT Base Amount" := PrepmtVATBaseToDeduct;
        INSERT;
      END;
      EXIT(PrepmtVATBaseToDeduct);
    END;

    LOCAL PROCEDURE DividePrepmtAmountLCY@83(VAR PrepmtPurchLine@1000 : Record 39;PurchHeader@1006 : Record 38);
    VAR
      CurrExchRate@1001 : Record 330;
      ActualCurrencyFactor@1002 : Decimal;
    BEGIN
      WITH PrepmtPurchLine DO BEGIN
        RESET;
        SETFILTER(Type,'<>%1',Type::" ");
        IF FINDSET THEN
          REPEAT
            IF PurchHeader."Currency Code" <> '' THEN
              ActualCurrencyFactor :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    0, '', //**4PS.n
                    PurchHeader."Posting Date",
                    PurchHeader."Currency Code",
                    "Prepmt Amt to Deduct",
                  //PurchHeader."Currency Factor")) / //**4PS.o
                    PurchHeader."Currency Factor",FALSE)) /  //**4PS.n
                "Prepmt Amt to Deduct"
            ELSE
              ActualCurrencyFactor := 1;

            UpdatePrepmtAmountInvBuf("Line No.",ActualCurrencyFactor);
          UNTIL NEXT = 0;
        RESET;
      END;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmountInvBuf@78(PrepmtSalesLineNo@1000 : Integer;CurrencyFactor@1004 : Decimal);
    VAR
      PrepmtAmtRemainder@1002 : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYPurchLine DO BEGIN
        RESET;
        SETRANGE("Attached to Line No.",PrepmtSalesLineNo);
        IF FINDSET(TRUE) THEN
          REPEAT
            "Prepmt. Amount Inv. (LCY)" :=
              CalcRoundedAmount(CurrencyFactor * "VAT Base Amount",PrepmtAmtRemainder);
            //**4PS.sn
            "Modified by" := USERID; //DP00469
            "Last Date Modified" := TODAY;//DP00469
            //**4PS.en
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AdjustPrepmtAmountLCY@84(VAR PrepmtPurchLine@1000 : Record 39);
    VAR
      PurchLine@1005 : Record 39;
      PurchInvoiceLine@1013 : Record 39;
      DeductionFactor@1001 : Decimal;
      PrepmtVATPart@1006 : Decimal;
      PrepmtVATAmtRemainder@1011 : Decimal;
      TotalRoundingAmount@1002 : ARRAY [2] OF Decimal;
      TotalPrepmtAmount@1003 : ARRAY [2] OF Decimal;
      FinalInvoice@1004 : Boolean;
      PricesInclVATRoundingAmount@1007 : ARRAY [2] OF Decimal;
    BEGIN
      IF PrepmtPurchLine."Prepayment Line" THEN BEGIN
        PrepmtVATPart :=
          (PrepmtPurchLine."Amount Including VAT" - PrepmtPurchLine.Amount) / PrepmtPurchLine."Direct Unit Cost";

        WITH TempPrepmtDeductLCYPurchLine DO BEGIN
          RESET;
          SETRANGE("Attached to Line No.",PrepmtPurchLine."Line No.");
          IF FINDSET(TRUE) THEN BEGIN
            FinalInvoice := IsFinalInvoice;
            REPEAT
              PurchLine := TempPrepmtDeductLCYPurchLine;
              PurchLine.FIND;
              IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                PurchInvoiceLine := PurchLine;
                GetPurchOrderLine(PurchLine,PurchInvoiceLine);
                PurchLine."Qty. to Invoice" := PurchInvoiceLine."Qty. to Invoice";
              END;
              IF PurchLine."Qty. to Invoice" <> "Qty. to Invoice" THEN
                PurchLine."Prepmt Amt to Deduct" := CalcPrepmtAmtToDeduct(PurchLine);
              DeductionFactor :=
                PurchLine."Prepmt Amt to Deduct" /
                (PurchLine."Prepmt. Amt. Inv." - PurchLine."Prepmt Amt Deducted");

              "Prepmt. VAT Amount Inv. (LCY)" :=
                -CalcRoundedAmount(PurchLine."Prepmt Amt to Deduct" * PrepmtVATPart,PrepmtVATAmtRemainder);
              IF ("Prepayment %" <> 100) OR IsFinalInvoice THEN
                CalcPrepmtRoundingAmounts(TempPrepmtDeductLCYPurchLine,PurchLine,DeductionFactor,TotalRoundingAmount);

              //**4PS.sn
              "Modified by" := USERID; //DP00469
              "Last Date Modified" := TODAY;//DP00469
              //**4PS.en
              MODIFY;

              IF PurchHeader."Prices Including VAT" THEN
                IF (("Prepayment %" <> 100) OR IsFinalInvoice) AND (DeductionFactor = 1) THEN BEGIN
                  PricesInclVATRoundingAmount[1] := TotalRoundingAmount[1];
                  PricesInclVATRoundingAmount[2] := TotalRoundingAmount[2];
                END;

              IF "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" THEN
                TotalPrepmtAmount[1] += "Prepmt. Amount Inv. (LCY)";
              TotalPrepmtAmount[2] += "Prepmt. VAT Amount Inv. (LCY)";
              FinalInvoice := FinalInvoice AND IsFinalInvoice;
            UNTIL NEXT = 0;
          END;
        END;

        UpdatePrepmtPurchLineWithRounding(
          PrepmtPurchLine,TotalRoundingAmount,TotalPrepmtAmount,
          FinalInvoice,PricesInclVATRoundingAmount);
      END;
    END;

    LOCAL PROCEDURE CalcPrepmtAmtToDeduct@53(PurchLine@1000 : Record 39) : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        "Qty. to Invoice" := GetQtyToInvoice(PurchLine);
        CalcPrepaymentToDeduct;
        EXIT("Prepmt Amt to Deduct");
      END;
    END;

    LOCAL PROCEDURE GetQtyToInvoice@94(PurchLine@1000 : Record 39) : Decimal;
    VAR
      AllowedQtyToInvoice@1001 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        AllowedQtyToInvoice := "Qty. Rcd. Not Invoiced";
        IF PurchHeader.Receive THEN
          AllowedQtyToInvoice := AllowedQtyToInvoice + "Qty. to Receive";
        IF "Qty. to Invoice" > AllowedQtyToInvoice THEN
          EXIT(AllowedQtyToInvoice);
        EXIT("Qty. to Invoice");
      END;
    END;

    LOCAL PROCEDURE GetLineDataFromOrder@95(VAR PurchLine@1000 : Record 39);
    VAR
      PurchRcptLine@1001 : Record 121;
      PurchOrderLine@1002 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        PurchRcptLine.GET("Receipt No.","Receipt Line No.");
        PurchOrderLine.GET("Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");

        Quantity := PurchOrderLine.Quantity;
        "Qty. Rcd. Not Invoiced" := PurchOrderLine."Qty. Rcd. Not Invoiced";
        "Quantity Invoiced" := PurchOrderLine."Quantity Invoiced";
        "Prepmt Amt Deducted" := PurchOrderLine."Prepmt Amt Deducted";
        "Prepmt. Amt. Inv." := PurchOrderLine."Prepmt. Amt. Inv.";
        "Line Discount Amount" := PurchOrderLine."Line Discount Amount";
      END;
    END;

    LOCAL PROCEDURE CalcPrepmtRoundingAmounts@58(VAR PrepmtPurchLineBuf@1000 : Record 39;PurchLine@1003 : Record 39;DeductionFactor@1001 : Decimal;VAR TotalRoundingAmount@1002 : ARRAY [2] OF Decimal);
    VAR
      RoundingAmount@1004 : ARRAY [2] OF Decimal;
    BEGIN
      WITH PrepmtPurchLineBuf DO BEGIN
        IF "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" THEN BEGIN
          RoundingAmount[1] :=
            "Prepmt. Amount Inv. (LCY)" - ROUND(DeductionFactor * PurchLine."Prepmt. Amount Inv. (LCY)");
          "Prepmt. Amount Inv. (LCY)" := "Prepmt. Amount Inv. (LCY)" - RoundingAmount[1];
          TotalRoundingAmount[1] += RoundingAmount[1];
        END;
        RoundingAmount[2] :=
          "Prepmt. VAT Amount Inv. (LCY)" - ROUND(DeductionFactor * PurchLine."Prepmt. VAT Amount Inv. (LCY)");
        "Prepmt. VAT Amount Inv. (LCY)" := "Prepmt. VAT Amount Inv. (LCY)" - RoundingAmount[2];
        TotalRoundingAmount[2] += RoundingAmount[2];
      END;
    END;

    LOCAL PROCEDURE UpdatePrepmtPurchLineWithRounding@89(VAR PrepmtPurchLine@1002 : Record 39;TotalRoundingAmount@1001 : ARRAY [2] OF Decimal;TotalPrepmtAmount@1000 : ARRAY [2] OF Decimal;FinalInvoice@1005 : Boolean;PricesInclVATRoundingAmount@1006 : ARRAY [2] OF Decimal);
    VAR
      NewAmountIncludingVAT@1003 : Decimal;
      Prepmt100PctVATRoundingAmt@1004 : Decimal;
    BEGIN
      WITH PrepmtPurchLine DO BEGIN
        NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
        IF "Prepayment %" = 100 THEN
          TotalRoundingAmount[1] -= "Amount Including VAT" + NewAmountIncludingVAT;

        IF ABS(TotalRoundingAmount[1]) <= GLSetup."Amount Rounding Precision" THEN BEGIN
          IF "Prepayment %" = 100 THEN
            Prepmt100PctVATRoundingAmt := TotalRoundingAmount[1];
          TotalRoundingAmount[1] := 0;
        END;
        "Prepmt. Amount Inv. (LCY)" := -TotalRoundingAmount[1];
        Amount := -(TotalPrepmtAmount[1] + TotalRoundingAmount[1]);

        IF (PricesInclVATRoundingAmount[1] <> 0) AND (TotalRoundingAmount[1] = 0) THEN BEGIN
          IF ("Prepayment %" = 100) AND FinalInvoice AND
             (Amount - TotalPrepmtAmount[2] = "Amount Including VAT")
          THEN
            Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[1] := 0;
        END;

        IF ((ABS(TotalRoundingAmount[2]) <= GLSetup."Amount Rounding Precision") OR
            FinalInvoice) AND (TotalRoundingAmount[1] = 0)
        THEN BEGIN
          IF ("Prepayment %" = 100) AND ("Prepmt. Amount Inv. (LCY)" = 0) THEN
            Prepmt100PctVATRoundingAmt += TotalRoundingAmount[2];
          TotalRoundingAmount[2] := 0;
        END;

        IF (PricesInclVATRoundingAmount[2] <> 0) AND (TotalRoundingAmount[2] = 0) THEN BEGIN
          Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[2] := 0;
        END;

        "Prepmt. VAT Amount Inv. (LCY)" := -(TotalRoundingAmount[2] + Prepmt100PctVATRoundingAmt);
        NewAmountIncludingVAT := Amount - (TotalPrepmtAmount[2] + TotalRoundingAmount[2]);
        IF (PricesInclVATRoundingAmount[1] = 0) AND (PricesInclVATRoundingAmount[2] = 0) OR
           ("Currency Code" <> '') AND FinalInvoice
        THEN
          Increment(
            TotalPurchLineLCY."Amount Including VAT",
            -("Amount Including VAT" - NewAmountIncludingVAT + Prepmt100PctVATRoundingAmt));
        IF "Currency Code" = '' THEN
          TotalPurchLine."Amount Including VAT" := TotalPurchLineLCY."Amount Including VAT";
        "Amount Including VAT" := NewAmountIncludingVAT;

        IF FinalInvoice AND (TotalPurchLine.Amount = 0) AND (TotalPurchLine."Amount Including VAT" <> 0) AND
           (ABS(TotalPurchLine."Amount Including VAT") <= Currency."Amount Rounding Precision")
        THEN BEGIN
          "Amount Including VAT" -= TotalPurchLineLCY."Amount Including VAT";
          TotalPurchLine."Amount Including VAT" := 0;
          TotalPurchLineLCY."Amount Including VAT" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcRoundedAmount@91(Amount@1000 : Decimal;VAR Remainder@1001 : Decimal) : Decimal;
    VAR
      AmountRnded@1002 : Decimal;
    BEGIN
      Amount := Amount + Remainder;
      AmountRnded := ROUND(Amount,GLSetup."Amount Rounding Precision");
      Remainder := Amount - AmountRnded;
      EXIT(AmountRnded);
    END;

    LOCAL PROCEDURE GetPurchOrderLine@85(VAR PurchOrderLine@1000 : Record 39;PurchLine@1001 : Record 39);
    VAR
      PurchRcptLine@1002 : Record 121;
    BEGIN
      PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,
        PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
      PurchOrderLine."Prepmt Amt to Deduct" := PurchLine."Prepmt Amt to Deduct";
    END;

    LOCAL PROCEDURE DecrementPrepmtAmtInvLCY@86(PurchLine@1000 : Record 39;VAR PrepmtAmountInvLCY@1001 : Decimal;VAR PrepmtVATAmountInvLCY@1002 : Decimal);
    BEGIN
      TempPrepmtDeductLCYPurchLine.RESET;
      TempPrepmtDeductLCYPurchLine := PurchLine;
      IF TempPrepmtDeductLCYPurchLine.FIND THEN BEGIN
        PrepmtAmountInvLCY := PrepmtAmountInvLCY - TempPrepmtDeductLCYPurchLine."Prepmt. Amount Inv. (LCY)";
        PrepmtVATAmountInvLCY := PrepmtVATAmountInvLCY - TempPrepmtDeductLCYPurchLine."Prepmt. VAT Amount Inv. (LCY)";
      END;
    END;

    LOCAL PROCEDURE AdjustFinalInvWith100PctPrepmt@97(VAR TempPurchLine@1000 : TEMPORARY Record 39);
    VAR
      DiffToLineDiscAmt@1001 : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYPurchLine DO BEGIN
        RESET;
        SETRANGE("Prepayment %",100);
        IF FINDSET(TRUE) THEN
          REPEAT
            IF IsFinalInvoice THEN BEGIN
              DiffToLineDiscAmt := "Prepmt Amt to Deduct" - "Line Amount";
              IF "Document Type" = "Document Type"::Order THEN
                DiffToLineDiscAmt := DiffToLineDiscAmt * Quantity / "Qty. to Invoice";
              IF DiffToLineDiscAmt <> 0 THEN BEGIN
                TempPurchLine.GET("Document Type","Document No.","Line No.");
                TempPurchLine."Line Discount Amount" -= DiffToLineDiscAmt;
                TempPurchLine.MODIFY;
                "Line Discount Amount" := TempPurchLine."Line Discount Amount";
                //**4PS.sn
                "Modified by" := USERID; //DP00469
                "Last Date Modified" := TODAY;//DP00469
                //**4PS.en
                MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
        RESET;
      END;
    END;

    LOCAL PROCEDURE GetPrepmtDiffToLineAmount@98(PurchLine@1000 : Record 39) : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYPurchLine DO
        IF PurchLine."Prepayment %" = 100 THEN
          IF GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
            EXIT("Prepmt Amt to Deduct" - "Line Amount");
      EXIT(0);
    END;

    LOCAL PROCEDURE MergePurchLines@50(PurchHeader@1000000004 : Record 38;VAR PurchLine@1000 : Record 39;VAR PurchLine2@1000000002 : Record 39;VAR MergedPurchLine@1000000003 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedPurchLine := PurchLine;
            MergedPurchLine.INSERT;
          UNTIL NEXT = 0;
      END;
      WITH PurchLine2 DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedPurchLine := PurchLine2;
            MergedPurchLine.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertICGenJnlLine@150(PurchLine@1000 : Record 39;VAR ICGenJnlLineNo@1006 : Integer);
    VAR
      ICGLAccount@1001 : Record 410;
      Cust@1002 : Record 18;
      Currency@1003 : Record 4;
      ICPartner@1004 : Record 413;
      CurrExchRate@1005 : Record 330;
    BEGIN
      PurchHeader.TESTFIELD("Buy-from IC Partner Code",'');
      PurchHeader.TESTFIELD("Pay-to IC Partner Code",'');
      PurchLine.TESTFIELD("IC Partner Ref. Type",PurchLine."IC Partner Ref. Type"::"G/L Account");
      ICGLAccount.GET(PurchLine."IC Partner Reference");
      ICGenJnlLineNo := ICGenJnlLineNo + 1;
      TempICGenJnlLine.INIT;
      TempICGenJnlLine."Line No." := ICGenJnlLineNo;
      TempICGenJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      TempICGenJnlLine."Document Date" := PurchHeader."Document Date";
      TempICGenJnlLine.Description := PurchHeader."Posting Description";
      TempICGenJnlLine."Reason Code" := PurchHeader."Reason Code";
      TempICGenJnlLine."Document Type" := GenJnlLineDocType;
      TempICGenJnlLine."Document No." := GenJnlLineDocNo;
      TempICGenJnlLine."External Document No." := GenJnlLineExtDocNo;
      TempICGenJnlLine.VALIDATE("Account Type",TempICGenJnlLine."Account Type"::"IC Partner");
      TempICGenJnlLine.VALIDATE("Account No.",PurchLine."IC Partner Code");
      TempICGenJnlLine."Source Currency Code" := PurchHeader."Currency Code";
      TempICGenJnlLine."Source Currency Amount" := TempICGenJnlLine.Amount;
      TempICGenJnlLine.Correction := PurchHeader.Correction;
      TempICGenJnlLine."Source Code" := SrcCode;
      TempICGenJnlLine."Country/Region Code" := PurchHeader."VAT Country/Region Code";
      TempICGenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
      TempICGenJnlLine."Source No." := PurchHeader."Pay-to Vendor No.";
      TempICGenJnlLine."Source Line No." := PurchLine."Line No.";
      TempICGenJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
      TempICGenJnlLine.VALIDATE("Bal. Account Type",TempICGenJnlLine."Bal. Account Type"::"G/L Account");
      TempICGenJnlLine.VALIDATE("Bal. Account No.",PurchLine."No.");
      TempICGenJnlLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      TempICGenJnlLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
      TempICGenJnlLine."Dimension Set ID" := PurchLine."Dimension Set ID";
      Cust.SETRANGE("IC Partner Code",PurchLine."IC Partner Code");
      IF Cust.FINDFIRST THEN BEGIN
        TempICGenJnlLine.VALIDATE("Bal. Gen. Bus. Posting Group",Cust."Gen. Bus. Posting Group");
        TempICGenJnlLine.VALIDATE("Bal. VAT Bus. Posting Group",Cust."VAT Bus. Posting Group");
      END;
      TempICGenJnlLine.VALIDATE("Bal. VAT Prod. Posting Group",PurchLine."VAT Prod. Posting Group");
      TempICGenJnlLine."IC Partner Code" := PurchLine."IC Partner Code";
      TempICGenJnlLine."IC Partner G/L Acc. No." := PurchLine."IC Partner Reference";
      TempICGenJnlLine."IC Direction" := TempICGenJnlLine."IC Direction"::Outgoing;
      ICPartner.GET(PurchLine."IC Partner Code");
      IF ICPartner."Cost Distribution in LCY" AND (PurchLine."Currency Code" <> '') THEN BEGIN
        TempICGenJnlLine."Currency Code" := '';
        TempICGenJnlLine."Currency Factor" := 0;
        Currency.GET(PurchLine."Currency Code");
        IF PurchHeader."Document Type" IN
           [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
        THEN
          TempICGenJnlLine.Amount :=
            -ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                PurchHeader."Posting Date",PurchLine."Currency Code",
      //        PurchLine.Amount,PurchHeader."Currency Factor")) //**4PS.o
                PurchLine.Amount,PurchHeader."Currency Factor",FALSE)) //**4PS.n
        ELSE
          TempICGenJnlLine.Amount :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '', //**4PS.n
                PurchHeader."Posting Date",PurchLine."Currency Code",
      //        PurchLine.Amount,PurchHeader."Currency Factor")); //**4PS.o
                PurchLine.Amount,PurchHeader."Currency Factor",FALSE)); //**4PS.n
      END ELSE BEGIN
        Currency.InitRoundingPrecision;
        TempICGenJnlLine."Currency Code" := PurchHeader."Currency Code";
        TempICGenJnlLine."Currency Factor" := PurchHeader."Currency Factor";
        IF PurchHeader."Document Type" IN
           [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
        THEN
          TempICGenJnlLine.Amount := -PurchLine.Amount
        ELSE
          TempICGenJnlLine.Amount := PurchLine.Amount;
      END;
      IF TempICGenJnlLine."Bal. VAT %" <> 0 THEN
        TempICGenJnlLine.Amount := ROUND(TempICGenJnlLine.Amount * (1 + TempICGenJnlLine."Bal. VAT %" / 100),
            Currency."Amount Rounding Precision");
      TempICGenJnlLine.VALIDATE(Amount);
      TempICGenJnlLine.INSERT;
    END;

    LOCAL PROCEDURE PostICGenJnl@151();
    VAR
      ICInboxOutboxMgt@1001 : Codeunit 427;
      ICTransactionNo@1000 : Integer;
    BEGIN
      TempICGenJnlLine.RESET;
      IF TempICGenJnlLine.FIND('-') THEN
        REPEAT
          ICTransactionNo := ICInboxOutboxMgt.CreateOutboxJnlTransaction(TempICGenJnlLine,FALSE);
          ICInboxOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,TempICGenJnlLine);
          IF TempICGenJnlLine.Amount <> 0 THEN
            GenJnlPostLine.RunWithCheck(TempICGenJnlLine);
        UNTIL TempICGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestGetRcptPPmtAmtToDeduct@57(PurchHeader@1001 : Record 38);
    VAR
      PurchLine2@1006 : Record 39;
      TempPurchLine3@1005 : TEMPORARY Record 39;
      TempTotalPurchLine@1004 : TEMPORARY Record 39;
      TempPurchRcptLine@1003 : TEMPORARY Record 121;
      PurchRcptLine@1000 : Record 121;
      MaxAmtToDeduct@1002 : Decimal;
    BEGIN
      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETFILTER(Quantity,'>0');
      PurchLine2.SETFILTER("Qty. to Invoice",'>0');
      PurchLine2.SETFILTER("Receipt No.",'<>%1','');
      PurchLine2.SETFILTER("Prepmt Amt to Deduct",'<>0');
      IF PurchLine2.ISEMPTY THEN
        EXIT;
      PurchLine2.SETRANGE("Prepmt Amt to Deduct");

      IF PurchLine2.FINDSET THEN
        REPEAT
          IF PurchRcptLine.GET(PurchLine2."Receipt No.",PurchLine2."Receipt Line No.") THEN BEGIN
            TempPurchLine3 := PurchLine2;
            TempPurchLine3.INSERT;
            TempPurchRcptLine := PurchRcptLine;
            IF TempPurchRcptLine.INSERT THEN;

            IF NOT TempTotalPurchLine.GET(PurchLine2."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.")
            THEN BEGIN
              TempTotalPurchLine.INIT;
              TempTotalPurchLine."Document Type" := PurchLine2."Document Type"::Order;
              TempTotalPurchLine."Document No." := PurchRcptLine."Order No.";
              TempTotalPurchLine."Line No." := PurchRcptLine."Order Line No.";
              //**4PS.sn
              TempTotalPurchLine."Input by" := USERID; //DP00469
              TempTotalPurchLine."Input Date" := TODAY; //DP00469
              //**4PS.en
              TempTotalPurchLine.INSERT;
            END;
            TempTotalPurchLine."Qty. to Invoice" := TempTotalPurchLine."Qty. to Invoice" + PurchLine2."Qty. to Invoice";
            TempTotalPurchLine."Prepmt Amt to Deduct" := TempTotalPurchLine."Prepmt Amt to Deduct" + PurchLine2."Prepmt Amt to Deduct";
            AdjustInvLineWith100PctPrepmt(PurchLine2,TempTotalPurchLine);
            //**4PS.sn
            TempTotalPurchLine."Modified by" := USERID; //DP00469
            TempTotalPurchLine."Last Date Modified" := TODAY;//DP00469
            //**4PS.en
            TempTotalPurchLine.MODIFY;
          END;
        UNTIL PurchLine2.NEXT = 0;

      IF TempPurchLine3.FINDSET THEN
        REPEAT
          IF TempPurchRcptLine.GET(TempPurchLine3."Receipt No.",TempPurchLine3."Receipt Line No.") THEN
            IF PurchLine2.GET(TempPurchLine3."Document Type"::Order,TempPurchRcptLine."Order No.",TempPurchRcptLine."Order Line No.") THEN
              IF TempTotalPurchLine.GET(
                   TempPurchLine3."Document Type"::Order,TempPurchRcptLine."Order No.",TempPurchRcptLine."Order Line No.")
              THEN BEGIN
                MaxAmtToDeduct := PurchLine2."Prepmt. Amt. Inv." - PurchLine2."Prepmt Amt Deducted";

                IF TempTotalPurchLine."Prepmt Amt to Deduct" > MaxAmtToDeduct THEN
                  ERROR(STRSUBSTNO(Text050,PurchLine2.FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));

                IF (TempTotalPurchLine."Qty. to Invoice" = PurchLine2.Quantity - PurchLine2."Quantity Invoiced") AND
                   (TempTotalPurchLine."Prepmt Amt to Deduct" <> MaxAmtToDeduct)
                THEN
                  ERROR(STRSUBSTNO(Text051,PurchLine2.FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));
              END;
        UNTIL TempPurchLine3.NEXT = 0;
    END;

    LOCAL PROCEDURE AdjustInvLineWith100PctPrepmt@99(VAR PurchInvoiceLine@1000 : Record 39;VAR TempTotalPurchLine@1001 : TEMPORARY Record 39);
    VAR
      PurchOrderLine@1003 : Record 39;
      DiffAmtToDeduct@1002 : Decimal;
    BEGIN
      IF PurchInvoiceLine."Prepayment %" = 100 THEN BEGIN
        PurchOrderLine := TempTotalPurchLine;
        PurchOrderLine.FIND;
        IF TempTotalPurchLine."Qty. to Invoice" = PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced" THEN BEGIN
          DiffAmtToDeduct :=
            PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted" - TempTotalPurchLine."Prepmt Amt to Deduct";
          IF DiffAmtToDeduct <> 0 THEN BEGIN
            PurchInvoiceLine."Prepmt Amt to Deduct" := PurchInvoiceLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
            PurchInvoiceLine."Line Amount" := PurchInvoiceLine."Prepmt Amt to Deduct";
            PurchInvoiceLine."Line Discount Amount" := PurchInvoiceLine."Line Discount Amount" - DiffAmtToDeduct;
            PurchInvoiceLine.MODIFY;
            TempTotalPurchLine."Prepmt Amt to Deduct" := TempTotalPurchLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
          END;
        END;
      END;
    END;

    PROCEDURE ArchiveUnpostedOrder@56(PurchHeader@1001 : Record 38);
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      PurchSetup.GET;
      IF NOT PurchSetup."Archive Quotes and Orders" THEN
        EXIT;
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"]) THEN
        EXIT;
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Quantity,'<>0');
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
        PurchLine.SETFILTER("Qty. to Receive",'<>0')
      ELSE
        PurchLine.SETFILTER("Return Qty. to Ship",'<>0');
      IF NOT PurchLine.ISEMPTY AND NOT PreviewMode THEN BEGIN
        RoundDeferralsForArchive(PurchHeader,PurchLine);
        ArchiveManagement.ArchPurchDocumentNoConfirm(PurchHeader);
      END;
    END;

    LOCAL PROCEDURE PostItemJrnlLineJobConsumption@59(VAR PurchLine@1000 : Record 39;VAR NextReservationEntryNo@1001 : Integer;QtyToBeInvoiced@1002 : Decimal;VAR QtyToBeInvoicedBase@1003 : Decimal;QtyToBeReceived@1004 : Decimal;QtyToBeReceivedBase@1005 : Decimal;VAR CheckApplToItemEntry@1006 : Boolean);
    VAR
      ItemLedgEntry@1102 : Record 32;
    BEGIN
      WITH PurchLine DO
        IF "Job No." <> '' THEN BEGIN
          ItemJnlLine2."Entry Type" := ItemJnlLine2."Entry Type"::"Negative Adjmt.";
          Job.GET("Job No.");
          ItemJnlLine2."Source No." := Job."Bill-to Customer No.";
          IF PurchHeader.Invoice THEN BEGIN
            ItemLedgEntry.RESET;
            ItemLedgEntry.SETRANGE("Document No.",ReturnShptLine."Document No.");
            ItemLedgEntry.SETRANGE("Item No.",ReturnShptLine."No.");
            ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::"Negative Adjmt.");
            ItemLedgEntry.SETRANGE("Completely Invoiced",FALSE);
            IF ItemLedgEntry.FINDFIRST THEN
              ItemJnlLine2."Item Shpt. Entry No." := ItemLedgEntry."Entry No.";
          END;
          ItemJnlLine2."Source Type" := ItemJnlLine2."Source Type"::Customer;
          ItemJnlLine2."Discount Amount" := 0;
          IF "Quantity Received" <> 0 THEN
            GetNextItemLedgEntryNo(ItemJnlLine2);

          IF QtyToBeReceived <> 0 THEN BEGIN
            // item tracking for consumption
            ReservationEntry2.RESET;
            IF ReservationEntry3.FIND('-') THEN BEGIN
              IF ReservationEntry2.FIND('+') THEN
                NextReservationEntryNo := ReservationEntry2."Entry No." + 1
              ELSE
                NextReservationEntryNo := 1;
              REPEAT
                ReservationEntry2 := ReservationEntry3;
                ReservationEntry2."Entry No." := NextReservationEntryNo;
                IF ReservationEntry2.Positive THEN
                  ReservationEntry2.Positive := FALSE
                ELSE
                  ReservationEntry2.Positive := TRUE;
                ReservationEntry2."Quantity (Base)" := ReservationEntry2."Quantity (Base)" * -1;
                ReservationEntry2."Shipment Date" := ReservationEntry2."Expected Receipt Date";
                ReservationEntry2."Expected Receipt Date" := 0D;
                ReservationEntry2.Quantity := ReservationEntry2.Quantity * -1;
                ReservationEntry2."Qty. to Handle (Base)" := ReservationEntry2."Qty. to Handle (Base)" * -1;
                ReservationEntry2."Qty. to Invoice (Base)" := ReservationEntry2."Qty. to Invoice (Base)" * -1;
                ReservationEntry2.INSERT;
                NextReservationEntryNo := NextReservationEntryNo + 1;
              UNTIL ReservationEntry3.NEXT = 0;
              IF QtyToBeReceivedBase <> 0 THEN
                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                  ReservePurchLine.TransferPurchLineToItemJnlLine(PurchLine,ItemJnlLine2,QtyToBeReceivedBase,CheckApplToItemEntry)
                ELSE
                  ReservePurchLine.TransferPurchLineToItemJnlLine(PurchLine,ItemJnlLine2,-QtyToBeReceivedBase,CheckApplToItemEntry);
            END;
          END;

          ItemJnlPostLine.RunWithCheck(ItemJnlLine2);

          IF QtyToBeInvoiced <> 0 THEN BEGIN
            "Qty. to Invoice" := QtyToBeInvoiced;
            JobPostLine.InsertPurchLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,SrcCode);
          END;
        END;
    END;

    LOCAL PROCEDURE GetNextItemLedgEntryNo@80(VAR ItemJnlLine@1000 : Record 83);
    VAR
      ItemApplicationEntry@1001 : Record 339;
    BEGIN
      WITH ItemApplicationEntry DO BEGIN
        SETRANGE("Inbound Item Entry No.",ItemJnlLine."Item Shpt. Entry No.");
        IF FINDLAST THEN
          ItemJnlLine."Item Shpt. Entry No." := "Outbound Item Entry No.";
      END
    END;

    LOCAL PROCEDURE ItemLedgerEntryExist@7(PurchLine2@1000 : Record 39) : Boolean;
    VAR
      HasItemLedgerEntry@1001 : Boolean;
    BEGIN
      IF PurchHeader.Receive OR PurchHeader.Ship THEN
        // item ledger entry will be created during posting in this transaction
        HasItemLedgerEntry :=
          ((PurchLine2."Qty. to Receive" + PurchLine2."Quantity Received") <> 0) OR
          ((PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced") <> 0) OR
          ((PurchLine2."Return Qty. to Ship" + PurchLine2."Return Qty. Shipped") <> 0)
      ELSE
        // item ledger entry must already exist
        HasItemLedgerEntry :=
          (PurchLine2."Quantity Received" <> 0) OR
          (PurchLine2."Return Qty. Shipped" <> 0);

      EXIT(HasItemLedgerEntry);
    END;

    LOCAL PROCEDURE LockTables@60();
    BEGIN
      PurchLine.LOCKTABLE;
      SalesOrderLine.LOCKTABLE;
      GetGLSetup;
      IF NOT GLSetup.OptimGLEntLockForMultiuserEnv THEN BEGIN
        GLEntry.LOCKTABLE;
        IF GLEntry.FINDLAST THEN;
      END;
    END;

    LOCAL PROCEDURE MAX@31(number1@1000 : Integer;number2@1001 : Integer) : Integer;
    BEGIN
      IF number1 > number2 THEN
        EXIT(number1);
      EXIT(number2);
    END;

    LOCAL PROCEDURE CreateJobPurchLine@22(VAR JobPurchLine2@1000 : Record 39;PurchLine2@1001 : Record 39;PricesIncludingVAT@1002 : Boolean);
    BEGIN
      JobPurchLine2 := PurchLine2;
      IF PricesIncludingVAT THEN
        IF JobPurchLine2."VAT Calculation Type" = JobPurchLine2."VAT Calculation Type"::"Full VAT" THEN
          JobPurchLine2."Direct Unit Cost" := 0
        ELSE
          JobPurchLine2."Direct Unit Cost" := JobPurchLine2."Direct Unit Cost" / (1 + JobPurchLine2."VAT %" / 100);
    END;

    LOCAL PROCEDURE RevertWarehouseEntry@62(VAR TempWhseJnlLine@1000 : TEMPORARY Record 7311;JobNo@1001 : Code[20];PostJobConsumptionBeforePurch@1002 : Boolean) : Boolean;
    BEGIN
      IF PostJobConsumptionBeforePurch OR (JobNo = '') OR PositiveWhseEntrycreated THEN
        EXIT(FALSE);
      WITH TempWhseJnlLine DO BEGIN
        "Entry Type" := "Entry Type"::"Negative Adjmt.";
        Quantity := -Quantity;
        "Qty. (Base)" := -"Qty. (Base)";
        "From Bin Code" := "To Bin Code";
        "To Bin Code" := '';
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreatePositiveEntry@93(WhseJnlLine@1000 : Record 7311;JobNo@1001 : Code[20];PostJobConsumptionBeforePurch@1002 : Boolean);
    BEGIN
      IF PostJobConsumptionBeforePurch OR (JobNo <> '') THEN BEGIN
        WITH WhseJnlLine DO BEGIN
          Quantity := -Quantity;
          "Qty. (Base)" := -"Qty. (Base)";
          "Qty. (Absolute)" := -"Qty. (Absolute)";
          "To Bin Code" := "From Bin Code";
          "From Bin Code" := '';
        END;
        WhseJnlPostLine.RUN(WhseJnlLine);
        PositiveWhseEntrycreated := TRUE;
      END;
    END;

    LOCAL PROCEDURE UpdateIncomingDocument@55(IncomingDocNo@1000 : Integer;PostingDate@1002 : Date;GenJnlLineDocNo@1003 : Code[20]);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocNo,PostingDate,GenJnlLineDocNo);
    END;

    LOCAL PROCEDURE CheckItemCharge@61(ItemChargeAssignmentPurch@1000 : Record 5805);
    VAR
      PurchLineForCharge@1001 : Record 39;
    BEGIN
      WITH ItemChargeAssignmentPurch DO
        CASE "Applies-to Doc. Type" OF
          "Applies-to Doc. Type"::Order,
          "Applies-to Doc. Type"::Invoice:
            IF PurchLineForCharge.GET(
                 "Applies-to Doc. Type",
                 "Applies-to Doc. No.",
                 "Applies-to Doc. Line No.")
            THEN
              IF (PurchLineForCharge."Quantity (Base)" = PurchLineForCharge."Qty. Received (Base)") AND
                 (PurchLineForCharge."Qty. Rcd. Not Invoiced (Base)" = 0)
              THEN
                ERROR(Text062Err);
          "Applies-to Doc. Type"::"Return Order",
          "Applies-to Doc. Type"::"Credit Memo":
            IF PurchLineForCharge.GET(
                 "Applies-to Doc. Type",
                 "Applies-to Doc. No.",
                 "Applies-to Doc. Line No.")
            THEN
              IF (PurchLineForCharge."Quantity (Base)" = PurchLineForCharge."Return Qty. Shipped (Base)") AND
                 (PurchLineForCharge."Ret. Qty. Shpd Not Invd.(Base)" = 0)
              THEN
                ERROR(Text062Err);
        END;
    END;

    PROCEDURE InitProgressWindow@105(PurchHeader@1000 : Record 38);
    BEGIN
      IF PurchHeader.Invoice THEN
        Window.OPEN(
          '#1#################################\\' +
          Text005 +
          Text006 +
          Text007 +
          Text008)
      ELSE
        Window.OPEN(
          '#1############################\\' +
          Text009);

      Window.UPDATE(1,STRSUBSTNO('%1 %2',PurchHeader."Document Type",PurchHeader."No."));
    END;

    PROCEDURE SetPreviewMode@74(NewPreviewMode@1000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    LOCAL PROCEDURE UpdateQtyPerUnitOfMeasure@63(VAR PurchLine@1000 : Record 39);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      IF PurchLine."Qty. per Unit of Measure" = 0 THEN
        IF (PurchLine.Type = PurchLine.Type::Item) AND
           (PurchLine."Unit of Measure" <> '') AND
           ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine."Unit of Measure")
        THEN
          PurchLine."Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure"
        ELSE
          PurchLine."Qty. per Unit of Measure" := 1;
    END;

    LOCAL PROCEDURE UpdateQtyToBeInvoiced@101(VAR QtyToBeInvoiced@1000 : Decimal;VAR QtyToBeInvoicedBase@1001 : Decimal;TrackingSpecificationExists@1002 : Boolean;PurchLine@1003 : Record 39;PurchRcptLine@1004 : Record 121;InvoicingTrackingSpecification@1006 : Record 336);
    BEGIN
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN //**4PS.n
        IF PurchLine."Qty. to Invoice" * PurchRcptLine.Quantity < 0 THEN
          PurchLine.FIELDERROR("Qty. to Invoice",Text012);
      IF TrackingSpecificationExists THEN BEGIN
        QtyToBeInvoiced := InvoicingTrackingSpecification."Qty. to Invoice";
        QtyToBeInvoicedBase := InvoicingTrackingSpecification."Qty. to Invoice (Base)";
      END ELSE BEGIN
        QtyToBeInvoiced := RemQtyToBeInvoiced - PurchLine."Qty. to Receive";
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - PurchLine."Qty. to Receive (Base)";
      END;
      IF ABS(QtyToBeInvoiced) > ABS(PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced") THEN BEGIN
        QtyToBeInvoiced := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
        QtyToBeInvoicedBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
      END;
    END;

    LOCAL PROCEDURE UpdateRemainingQtyToBeInvoiced@102(VAR RemQtyToInvoiceCurrLine@1000 : Decimal;VAR RemQtyToInvoiceCurrLineBase@1001 : Decimal;PurchRcptLine@1002 : Record 121);
    BEGIN
      RemQtyToInvoiceCurrLine := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
      RemQtyToInvoiceCurrLineBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
      IF RemQtyToInvoiceCurrLine > RemQtyToBeInvoiced THEN BEGIN
        RemQtyToInvoiceCurrLine := RemQtyToBeInvoiced;
        RemQtyToInvoiceCurrLineBase := RemQtyToBeInvoicedBase;
      END;
    END;

    LOCAL PROCEDURE GetCountryCode@75(SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36) : Code[10];
    VAR
      SalesShipmentHeader@1003 : Record 110;
    BEGIN
      IF SalesLine."Shipment No." <> '' THEN BEGIN
        SalesShipmentHeader.GET(SalesLine."Shipment No.");
        EXIT(
          GetCountryRegionCode(
            SalesLine."Sell-to Customer No.",
            SalesShipmentHeader."Ship-to Code",
            SalesShipmentHeader."Sell-to Country/Region Code"));
      END;
      EXIT(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
          SalesHeader."Ship-to Code",
          SalesHeader."Sell-to Country/Region Code"));
    END;

    LOCAL PROCEDURE GetCountryRegionCode@103(CustNo@1001 : Code[20];ShipToCode@1002 : Code[10];SellToCountryRegionCode@1003 : Code[10]) : Code[10];
    VAR
      ShipToAddress@1000 : Record 222;
    BEGIN
      IF ShipToCode <> '' THEN BEGIN
        ShipToAddress.GET(CustNo,ShipToCode);
        EXIT(ShipToAddress."Country/Region Code");
      END;
      EXIT(SellToCountryRegionCode);
    END;

    LOCAL PROCEDURE CheckItemReservDisruption@104();
    VAR
      Item@1000 : Record 27;
      AvailableQty@1001 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) OR
           (Type <> Type::Item) OR
           NOT ("Return Qty. to Ship (Base)" > 0)
        THEN
          EXIT;

        IF Nonstock OR
           "Special Order" OR
           "Drop Shipment" OR
           IsServiceItem OR
           TempSKU.GET("Location Code","No.","Variant Code") // Warn against item
        THEN
          EXIT;

        Item.GET("No.");
        Item.SETFILTER("Location Filter","Location Code");
        Item.SETFILTER("Variant Filter","Variant Code");
        Item.CALCFIELDS("Reserved Qty. on Inventory","Net Change");
        CALCFIELDS("Reserved Qty. (Base)");
        AvailableQty := Item."Net Change" - (Item."Reserved Qty. on Inventory" - "Reserved Qty. (Base)");

        IF (Item."Reserved Qty. on Inventory" > 0) AND
           (AvailableQty < "Return Qty. to Ship (Base)") AND
           (Item."Reserved Qty. on Inventory" > ABS("Reserved Qty. (Base)"))
        THEN BEGIN
          InsertTempSKU("Location Code","No.","Variant Code");
          IF NOT CONFIRM(
               Text061Qst,FALSE,FIELDCAPTION("No."),Item."No.",FIELDCAPTION("Location Code"),
               "Location Code",FIELDCAPTION("Variant Code"),"Variant Code")
          THEN
            ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE InsertTempSKU@106(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    BEGIN
      WITH TempSKU DO BEGIN
        INIT;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE DeleteReservationEntryRelateJobNo@66(DocumentType@1004 : Option;DocumentNo@1000 : Code[20];LineNo@1001 : Integer;JobNo@1003 : Code[20]);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      IF JobNo = '' THEN
        EXIT;

      WITH ReservationEntry DO BEGIN
        SETRANGE("Source ID",DocumentNo);
        SETRANGE("Source Ref. No.",LineNo);
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",DocumentType);
        SETRANGE("Reservation Status","Reservation Status"::Surplus);
        IF DocumentType = PurchLine."Document Type"::Order THEN
          SETRANGE(Positive,FALSE);
        IF DocumentType = PurchLine."Document Type"::"Return Order" THEN
          SETRANGE(Positive,TRUE);
        DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdatePurchLineDimSetIDFromAppliedEntry@67(VAR PurchLineToPost@1000 : Record 39;PurchLine@1001 : Record 39);
    VAR
      ItemLedgEntry@1002 : Record 32;
      DimensionMgt@1003 : Codeunit 408;
      DimSetID@1004 : ARRAY [10] OF Integer;
    BEGIN
      DimSetID[1] := PurchLine."Dimension Set ID";
      WITH PurchLineToPost DO BEGIN
        IF "Appl.-to Item Entry" <> 0 THEN BEGIN
          ItemLedgEntry.GET("Appl.-to Item Entry");
          DimSetID[2] := ItemLedgEntry."Dimension Set ID";
        END;
        "Dimension Set ID" :=
          DimensionMgt.GetCombinedDimensionSetID(DimSetID,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      END;
    END;

    LOCAL PROCEDURE CheckCertificateOfSupplyStatus@188(ReturnShptHeader@1000 : Record 6650;ReturnShptLine@1001 : Record 6651);
    VAR
      CertificateOfSupply@1002 : Record 780;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      IF ReturnShptLine.Quantity <> 0 THEN
        IF VATPostingSetup.GET(ReturnShptHeader."VAT Bus. Posting Group",ReturnShptLine."VAT Prod. Posting Group") AND
           VATPostingSetup."Certificate of Supply Required"
        THEN BEGIN
          CertificateOfSupply.InitFromPurchase(ReturnShptHeader);
          CertificateOfSupply.SetRequired(ReturnShptHeader."No.")
        END;
    END;

    LOCAL PROCEDURE CheckSalesCertificateOfSupplyStatus@69(SalesShptHeader@1001 : Record 110;SalesShptLine@1000 : Record 111);
    VAR
      CertificateOfSupply@1002 : Record 780;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      IF SalesShptLine.Quantity <> 0 THEN
        IF VATPostingSetup.GET(SalesShptHeader."VAT Bus. Posting Group",SalesShptLine."VAT Prod. Posting Group") AND
           VATPostingSetup."Certificate of Supply Required"
        THEN BEGIN
          CertificateOfSupply.InitFromSales(SalesShptHeader);
          CertificateOfSupply.SetRequired(SalesShptHeader."No.");
        END;
    END;

    LOCAL PROCEDURE InsertReceiptHeader@71(VAR PurchHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120);
    VAR
      PurchCommentLine@1002 : Record 43;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchRcptHeader.INIT;
        PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
        PurchRcptHeader."No." := "Receiving No.";
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          PurchRcptHeader."Order No. Series" := "No. Series";
          PurchRcptHeader."Order No." := "No.";
        END;
        PurchRcptHeader."No. Printed" := 0;
        PurchRcptHeader."Source Code" := SrcCode;
        PurchRcptHeader."User ID" := USERID;
        PurchRcptHeader.INSERT;

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");
        //**4PS.sn C017601
        //FIXME Approvals
        //ApprovalsMgmt.MoveApprvalCommentToPosted(TempApprovalCommentLine,
        //  DATABASE::"Purch. Rcpt. Header",PurchRcptHeader."No.");
        //**4PS.en

        IF PurchSetup."Copy Comments Order to Receipt" THEN BEGIN
          CopyCommentLines(
            "Document Type",PurchCommentLine."Document Type"::Receipt,
            "No.",PurchRcptHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchRcptHeader);
        END;
        IF WhseReceive THEN BEGIN
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Receiving No.","Posting Date");
        END;
        IF WhseShip THEN BEGIN
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Receiving No.","Posting Date");
        END;
      END;
    END;

    LOCAL PROCEDURE InsertReturnShipmentHeader@73(VAR PurchHeader@1000 : Record 38;VAR ReturnShptHeader@1001 : Record 6650);
    VAR
      PurchCommentLine@1002 : Record 43;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        ReturnShptHeader.INIT;
        ReturnShptHeader.TRANSFERFIELDS(PurchHeader);
        ReturnShptHeader."No." := "Return Shipment No.";
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          ReturnShptHeader."Return Order No. Series" := "No. Series";
          ReturnShptHeader."Return Order No." := "No.";
        END;
        ReturnShptHeader."No. Series" := "Return Shipment No. Series";
        ReturnShptHeader."No. Printed" := 0;
        ReturnShptHeader."Source Code" := SrcCode;
        ReturnShptHeader."User ID" := USERID;
        ReturnShptHeader.INSERT;

        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");
        //**4PS.sn C017601
        //FIXME Approvals
        //ApprovalsMgmt.MoveApprvalCommentToPosted(TempApprovalCommentLine,
        //  DATABASE::"Return Shipment Header",ReturnShptHeader."No.");
        //**4PS.en

        IF PurchSetup."Copy Cmts Ret.Ord. to Ret.Shpt" THEN BEGIN
          CopyCommentLines(
            "Document Type",PurchCommentLine."Document Type"::"Posted Return Shipment",
            "No.",ReturnShptHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,ReturnShptHeader);
        END;
        IF WhseShip THEN BEGIN
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Shipment No.","Posting Date");
        END;
        IF WhseReceive THEN BEGIN
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Shipment No.","Posting Date");
        END;
      END;
    END;

    LOCAL PROCEDURE InsertInvoiceHeader@87(VAR PurchHeader@1000 : Record 38;VAR PurchInvHeader@1001 : Record 122);
    VAR
      PurchCommentLine@1002 : Record 43;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchInvHeader.INIT;
        PurchInvHeader.TRANSFERFIELDS(PurchHeader);
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          PurchInvHeader."Pre-Assigned No. Series" := '';
          PurchInvHeader."No." := "Posting No.";
          PurchInvHeader."Order No. Series" := "No. Series";
          PurchInvHeader."Order No." := "No.";
          IF GUIALLOWED THEN
            Window.UPDATE(1,STRSUBSTNO(Text010,"Document Type","No.",PurchInvHeader."No."));
        END ELSE BEGIN
          IF "Posting No." <> '' THEN BEGIN
            PurchInvHeader."No." := "Posting No.";
            IF GUIALLOWED THEN
              Window.UPDATE(1,STRSUBSTNO(Text010,"Document Type","No.",PurchInvHeader."No."));
          END;
          PurchInvHeader."Pre-Assigned No. Series" := "No. Series";
          PurchInvHeader."Pre-Assigned No." := "No.";
        END;
        // <DC>
        IF IsDocumentCaptureActive THEN //**4PS.n
          PurchHeaderDCInfo.TransferToPurchInvHeader(PurchHeader,PurchInvHeader);
        // </DC>
        PurchInvHeader."Creditor No." := "Creditor No.";
        PurchInvHeader."Payment Reference" := "Payment Reference";
        PurchInvHeader."Payment Method Code" := "Payment Method Code";
        PurchInvHeader."Source Code" := SrcCode;
        PurchInvHeader."User ID" := USERID;
        PurchInvHeader."No. Printed" := 0;
        //**4PS.sn
        PurchInvHeader.Text := PurchHeadExtensionRec.Memo;
        PurchInvHeader."DMS Status" := PurchHeadExtensionRec."DMS Status"; // jhoek.060611
        PurchInvHeader."Invoice Approved" := TRUE; //call C-026335
        PurchInvHeader."Status (Approval)" := PurchInvHeader."Status (Approval)"::Released;
        IF (PurchHeader."Preregister WIP") AND (PurchSetup."Preregistration WIP Account" <> '') THEN BEGIN
          PurchLine.RESET;
          PurchLine.SETRANGE("Document Type","Document Type");
          PurchLine.SETRANGE("Document No.","No.");
          PurchLine.SETRANGE(Type, PurchLine.Type::"G/L Account");
          PurchLine.SETRANGE("No.", PurchSetup."Preregistration WIP Account");
          IF PurchLine.FINDFIRST THEN
            PurchInvHeader."Purchase Registration Account" := PurchSetup."Preregistration WIP Account"
          ELSE
            PurchInvHeader."Preregister WIP" := FALSE;
          PurchLine.RESET;
        END;
        IF "Document Type" = "Document Type"::Order THEN
          PurchInvHeader."Related Purch. Order No." := "No.";
        //**4PS.en
        PurchInvHeader.INSERT;

        //**4PS.sn
        IF ("Document Type" = "Document Type"::Invoice) THEN
          CopyAndDeleteSubcontractHours(0, 1, "No.", PurchInvHeader."No.");

        IF ("Vendor Invoice No." <> '') AND ("Document Type" = "Document Type"::Invoice) AND (PurchInvHeader."No." <> "No.") THEN
          CheckUpdateInvNoInInvoiceBBN("Vendor Invoice No.", "No.", PurchInvHeader."No.", FALSE);
        IF ConsentUserSetup.READPERMISSION THEN
          ConsentManagCU.PostPurchaseHeader(PurchHeader,PurchInvHeader."No.");
        //**4PS.en

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
        //**4PS.sn
        //FIXME Approvals
        //ApprovalsMgmt.MoveApprvalCommentToPosted(TempApprovalCommentLine,
        //  DATABASE::"Purch. Inv. Header",PurchInvHeader."No.");
        //**4PS.en
        //IF PurchSetup."Copy Comments Order to Invoice" THEN BEGIN //**4PS.o
        //**4PS.sn
        IF PurchSetup."Copy Comments Order to Invoice" OR
          ("Document Type" = "Document Type"::Invoice) THEN BEGIN
        //**4PS.en
          CopyCommentLines(
            "Document Type",PurchCommentLine."Document Type"::"Posted Invoice",
            "No.",PurchInvHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchInvHeader);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertCrMemoHeader@88(VAR PurchHeader@1000 : Record 38;VAR PurchCrMemoHdr@1001 : Record 124);
    VAR
      PurchCommentLine@1002 : Record 43;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchCrMemoHdr.INIT;
        PurchCrMemoHdr.TRANSFERFIELDS(PurchHeader);
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          PurchCrMemoHdr."No." := "Posting No.";
          PurchCrMemoHdr."Pre-Assigned No. Series" := '';
          PurchCrMemoHdr."Return Order No. Series" := "No. Series";
          PurchCrMemoHdr."Return Order No." := "No.";
          IF GUIALLOWED THEN
            Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",PurchCrMemoHdr."No."));
        END ELSE BEGIN
          PurchCrMemoHdr."Pre-Assigned No. Series" := "No. Series";
          PurchCrMemoHdr."Pre-Assigned No." := "No.";
          IF "Posting No." <> '' THEN BEGIN
            PurchCrMemoHdr."No." := "Posting No.";
            IF GUIALLOWED THEN
              Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",PurchCrMemoHdr."No."));
          END;
        END;
        // <DC>
        IF IsDocumentCaptureActive THEN //**4PS.n
          PurchHeaderDCInfo.TransferToPurchCrMemoHdr(PurchHeader,PurchCrMemoHdr);
        // </DC>
        PurchCrMemoHdr."Source Code" := SrcCode;
        PurchCrMemoHdr."User ID" := USERID;
        PurchCrMemoHdr."No. Printed" := 0;
        //**4PS.sn
        PurchCrMemoHdr.Text := PurchHeadExtensionRec.Memo;
        PurchCrMemoHdr."DMS Status" := PurchHeadExtensionRec."DMS Status";
        PurchCrMemoHdr."Status (Approval)" := PurchCrMemoHdr."Status (Approval)"::Released;
        //**4PS.en

        PurchCrMemoHdr.INSERT(TRUE);

        //**4PS.sn
        IF ("Vendor Cr. Memo No." <> '') AND ("Document Type" = "Document Type"::Invoice) AND (PurchCrMemoHdr."No."<>"No.") THEN
          CheckUpdateInvNoInInvoiceBBN("Vendor Cr. Memo No.", "No.", PurchCrMemoHdr."No.", TRUE);
        IF ConsentUserSetup.READPERMISSION THEN
          ConsentManagCU.PostPurchaseHeader(PurchHeader,PurchCrMemoHeader."No.");
        //**4PS.en

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");
        //**4PS.sn
        //FIXME Approvals
        //ApprovalsMgmt.MoveApprvalCommentToPosted(TempApprovalCommentLine,
        //  DATABASE::"Purch. Cr. Memo Hdr.",PurchCrMemoHdr."No.");
        //**4PS.en

        //IF PurchSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN //**4PS.o
        //**4PS.sn
        IF PurchSetup."Copy Cmts Ret.Ord. to Cr. Memo" OR
          ("Document Type" = "Document Type"::"Credit Memo") THEN BEGIN
        //**4PS.en
          CopyCommentLines(
            "Document Type",PurchCommentLine."Document Type"::"Posted Credit Memo",
            "No.",PurchCrMemoHdr."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchCrMemoHdr);
        END;
      END;
    END;

    LOCAL PROCEDURE GetSign@90(Value@1000 : Decimal) : Integer;
    BEGIN
      IF Value > 0 THEN
        EXIT(1);

      EXIT(-1);
    END;

    LOCAL PROCEDURE CheckICDocumentDuplicatePosting@65(PurchHeader@1000 : Record 38);
    VAR
      PurchHeader2@1001 : Record 38;
      ICInboxPurchHeader@1002 : Record 436;
      PurchInvHeader@1003 : Record 122;
    BEGIN
      WITH PurchHeader DO
        IF Invoice AND ("IC Direction" = "IC Direction"::Incoming) THEN BEGIN
          IF "Document Type" = "Document Type"::Order THEN BEGIN
            PurchHeader2.SETRANGE("Document Type","Document Type"::Invoice);
            PurchHeader2.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF PurchHeader2.FINDFIRST THEN
              IF NOT CONFIRM(Text052Qst,TRUE,"No.",PurchHeader2."No.") THEN
                ERROR('');
            ICInboxPurchHeader.SETRANGE("Document Type","Document Type"::Invoice);
            ICInboxPurchHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF ICInboxPurchHeader.FINDFIRST THEN
              IF NOT CONFIRM(Text053Qst,TRUE,"No.",ICInboxPurchHeader."No.") THEN
                ERROR('');
            PurchInvHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF PurchInvHeader.FINDFIRST THEN
              IF NOT CONFIRM(Text054Qst,FALSE,PurchInvHeader."No.","No.") THEN
                ERROR('');
          END;
          IF ("Document Type" = "Document Type"::Invoice) AND ("Vendor Order No." <> '') THEN BEGIN
            PurchHeader2.SETRANGE("Document Type","Document Type"::Order);
            PurchHeader2.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF PurchHeader2.FINDFIRST THEN
              IF NOT CONFIRM(Text055Qst,TRUE,PurchHeader2."No.","No.") THEN
                ERROR('');
            ICInboxPurchHeader.SETRANGE("Document Type","Document Type"::Order);
            ICInboxPurchHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF ICInboxPurchHeader.FINDFIRST THEN
              IF NOT CONFIRM(Text056Qst,TRUE,"No.",ICInboxPurchHeader."No.") THEN
                ERROR('');
            PurchInvHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF PurchInvHeader.FINDFIRST THEN
              IF NOT CONFIRM(Text057Qst,FALSE,PurchInvHeader."No.","No.") THEN
                ERROR('');
          END;
        END;
    END;

    LOCAL PROCEDURE CheckICPartnerBlocked@70(PurchHeader@1000 : Record 38);
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      IF (PurchHeader."Buy-from IC Partner Code" <> '') AND ICPartner.GET(PurchHeader."Buy-from IC Partner Code") THEN
        ICPartner.TESTFIELD(Blocked,FALSE);
      IF (PurchHeader."Pay-to IC Partner Code" <> '') AND ICPartner.GET(PurchHeader."Pay-to IC Partner Code") THEN
        ICPartner.TESTFIELD(Blocked,FALSE);
    END;

    LOCAL PROCEDURE SendICDocument@77(VAR PurchHeader@1000 : Record 38;VAR ModifyHeader@1002 : Boolean);
    VAR
      ICInboxOutboxMgt@1001 : Codeunit 427;
    BEGIN
      WITH PurchHeader DO
        IF "Send IC Document" AND ("IC Status" = "IC Status"::New) AND ("IC Direction" = "IC Direction"::Outgoing) AND
           ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
        THEN BEGIN
          ICInboxOutboxMgt.SendPurchDoc(PurchHeader,TRUE);
          "IC Status" := "IC Status"::Pending;
          ModifyHeader := TRUE;
        END;
    END;

    LOCAL PROCEDURE UpdateHandledICInboxTransaction@100(PurchHeader@1000 : Record 38);
    VAR
      HandledICInboxTrans@1001 : Record 420;
      Vendor@1002 : Record 23;
    BEGIN
      WITH PurchHeader DO
        IF "IC Direction" = "IC Direction"::Incoming THEN BEGIN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Invoice No.");
            "Document Type"::Order:
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Order No.");
            "Document Type"::"Credit Memo":
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Cr. Memo No.");
            "Document Type"::"Return Order":
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Order No.");
          END;
          Vendor.GET("Buy-from Vendor No.");
          HandledICInboxTrans.SETRANGE("IC Partner Code",Vendor."IC Partner Code");
          HandledICInboxTrans.LOCKTABLE;
          IF HandledICInboxTrans.FINDFIRST THEN BEGIN
            HandledICInboxTrans.Status := HandledICInboxTrans.Status::Posted;
            HandledICInboxTrans.MODIFY;
          END;
        END;
    END;

    LOCAL PROCEDURE MakeInventoryAdjustment@72(JobItem@1000 : Boolean);
    VAR
      InvtSetup@1001 : Record 313;
      InvtAdjmt@1002 : Codeunit 5895;
    BEGIN
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
         InvtSetup."Automatic Cost Adjustment"::Never
      THEN BEGIN
        InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.SetJobUpdateProperties(NOT JobItem);
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
    END;

    LOCAL PROCEDURE PostCombineSalesOrderShipment@76(VAR SalesSetup@1000 : Record 311;VAR PurchHeader@1001 : Record 38;VAR SalesCommentLine@1002 : Record 44);
    VAR
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        SalesSetup.GET;
        IF DropShptPostBuffer.FINDSET THEN
          REPEAT
            SalesOrderHeader.GET(
              SalesOrderHeader."Document Type"::Order,
              DropShptPostBuffer."Order No.");
            SalesPost.ArchiveUnpostedOrder(SalesOrderHeader);
            SalesShptHeader.INIT;
            SalesShptHeader.TRANSFERFIELDS(SalesOrderHeader);
            SalesShptHeader."No." := SalesOrderHeader."Shipping No.";
            SalesShptHeader."Order No." := SalesOrderHeader."No.";
            SalesShptHeader."Posting Date" := "Posting Date";
            SalesShptHeader."Document Date" := "Document Date";
            SalesShptHeader."No. Printed" := 0;
            SalesShptHeader.INSERT(TRUE);

            ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");
            //**4PS.sn
            //FIXME Approvals
            //ApprovalsMgmt.MoveApprvalCommentToPosted(TempApprovalCommentLine,
            //  DATABASE::"Sales Shipment Header",SalesShptHeader."No.");
            //**4PS.en

            IF SalesSetup."Copy Comments Order to Shpt." THEN BEGIN
              CopySalesCommentLines(
                SalesOrderHeader."Document Type",SalesCommentLine."Document Type"::Shipment,
                SalesOrderHeader."No.",SalesShptHeader."No.");
              RecordLinkManagement.CopyLinks(PurchHeader,SalesShptHeader);
            END;
            DropShptPostBuffer.SETRANGE("Order No.",DropShptPostBuffer."Order No.");
            REPEAT
              SalesOrderLine.GET(
                SalesOrderLine."Document Type"::Order,
                DropShptPostBuffer."Order No.",DropShptPostBuffer."Order Line No.");
              SalesShptLine.INIT;
              SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
              SalesShptLine."Posting Date" := SalesShptHeader."Posting Date";
              SalesShptLine."Document No." := SalesShptHeader."No.";
              SalesShptLine.Quantity := DropShptPostBuffer.Quantity;
              SalesShptLine."Quantity (Base)" := DropShptPostBuffer."Quantity (Base)";
              SalesShptLine."Quantity Invoiced" := 0;
              SalesShptLine."Qty. Invoiced (Base)" := 0;
              SalesShptLine."Order No." := SalesOrderLine."Document No.";
              SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
              SalesShptLine."Qty. Shipped Not Invoiced" :=
                SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";
              IF SalesShptLine.Quantity <> 0 THEN BEGIN
                SalesShptLine."Item Shpt. Entry No." := DropShptPostBuffer."Item Shpt. Entry No.";
                SalesShptLine."Item Charge Base Amount" := SalesOrderLine."Line Amount";
              END;
              SalesShptLine.INSERT;
              CheckSalesCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);

              SalesOrderLine."Qty. to Ship" := SalesShptLine.Quantity;
              SalesOrderLine."Qty. to Ship (Base)" := SalesShptLine."Quantity (Base)";
              ServItemMgt.CreateServItemOnSalesLineShpt(SalesOrderHeader,SalesOrderLine,SalesShptLine);
              SalesPost.UpdateBlanketOrderLine(SalesOrderLine,TRUE,FALSE,FALSE);

              SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
              SalesOrderLine.SETRANGE("Document No.",DropShptPostBuffer."Order No.");
              SalesOrderLine.SETRANGE("Attached to Line No.",DropShptPostBuffer."Order Line No.");
              SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::" ");
              IF SalesOrderLine.FINDSET THEN
                REPEAT
                  SalesShptLine.INIT;
                  SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
                  SalesShptLine."Document No." := SalesShptHeader."No.";
                  SalesShptLine."Order No." := SalesOrderLine."Document No.";
                  SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
                  SalesShptLine.INSERT;
                UNTIL SalesOrderLine.NEXT = 0;

            UNTIL DropShptPostBuffer.NEXT = 0;
            DropShptPostBuffer.SETRANGE("Order No.");
          UNTIL DropShptPostBuffer.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetupGenJnlLine@92(VAR PurchHeader@1000 : Record 38);
    BEGIN
      WITH PurchHeader DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
      //GenJnlLine.Description := "Posting Description";  //**4PS.o
        //**4PS.sn
        GenJnlLine.Description := InvPostingBuffer[1].Description;
        GenJnlLine."Description 2" := InvPostingBuffer[1]."Description 2";
        //**4PS.en
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Account No." := InvPostingBuffer[1]."G/L Account";
        GenJnlLine."System-Created Entry" := InvPostingBuffer[1]."System-Created Entry";
      //GenJnlLine.Amount := InvPostingBuffer[1].Amount; //**4PS.o
        GenJnlLine.Amount := InvPostingBuffer[1].Amount + InvPostingBuffer[1]."Retention Amount"; //**4PS.n
        GenJnlLine."Source Currency Code" := "Currency Code";
      //GenJnlLine."Source Currency Amount" := InvPostingBuffer[1]."Amount (ACY)"; //**4PS.o
        //**4PS.sn
        GenJnlLine."Source Currency Amount" := InvPostingBuffer[1]."Amount (ACY)" + InvPostingBuffer[1]."Retention Amount (ACY)";
        GenJnlLine."Retention Amount" := InvPostingBuffer[1]."Retention Amount";
        GenJnlLine."Source Curr. Retention Amount"  := InvPostingBuffer[1]."Retention Amount (ACY)";
        //**4PS.en
        GenJnlLine.Correction := Correction;
        IF InvPostingBuffer[1].Type <> InvPostingBuffer[1].Type::"Prepmt. Exch. Rate Difference" THEN
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
        //**4PS.sn
        IF InvPostingBuffer[1]."Block VAT Posting" THEN
          GenJnlLine."Gen. Posting Type" := 0
        ELSE
        //**4PS.en
          GenJnlLine."Gen. Bus. Posting Group" := InvPostingBuffer[1]."Gen. Bus. Posting Group";
        GenJnlLine."Gen. Prod. Posting Group" := InvPostingBuffer[1]."Gen. Prod. Posting Group";
        GenJnlLine."VAT Bus. Posting Group" := InvPostingBuffer[1]."VAT Bus. Posting Group";
        GenJnlLine."VAT Prod. Posting Group" := InvPostingBuffer[1]."VAT Prod. Posting Group";
        GenJnlLine."Tax Area Code" := InvPostingBuffer[1]."Tax Area Code";
        GenJnlLine."Tax Liable" := InvPostingBuffer[1]."Tax Liable";
        GenJnlLine."Tax Group Code" := InvPostingBuffer[1]."Tax Group Code";
        GenJnlLine."Use Tax" := InvPostingBuffer[1]."Use Tax";
        GenJnlLine.Quantity := InvPostingBuffer[1].Quantity;
        GenJnlLine."VAT Calculation Type" := InvPostingBuffer[1]."VAT Calculation Type";
        GenJnlLine."VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount";
        GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
        GenJnlLine."Source Curr. VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount (ACY)";
        GenJnlLine."VAT Amount" := InvPostingBuffer[1]."VAT Amount";
        GenJnlLine."Source Curr. VAT Amount" := InvPostingBuffer[1]."VAT Amount (ACY)";
        GenJnlLine."VAT Difference" := InvPostingBuffer[1]."VAT Difference";
        GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
        GenJnlLine."Job No." := InvPostingBuffer[1]."Job No.";
        GenJnlLine."Shortcut Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Sell-to/Buy-from No." := "Buy-from Vendor No.";
        GenJnlLine."Bill-to/Pay-to No." := "Pay-to Vendor No.";
        GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
        GenJnlLine."VAT Registration No." := "VAT Registration No.";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
        GenJnlLine."Source No." := "Pay-to Vendor No.";
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine."IC Partner Code" := "Pay-to IC Partner Code";
        GenJnlLine."Ship-to/Order Address Code" := "Order Address Code";

        IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset";
          IF InvPostingBuffer[1]."FA Posting Type" =
             InvPostingBuffer[1]."FA Posting Type"::"Acquisition Cost"
          THEN
            GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::"Acquisition Cost";
          IF InvPostingBuffer[1]."FA Posting Type" =
             InvPostingBuffer[1]."FA Posting Type"::Maintenance
          THEN
            GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::Maintenance;
          GenJnlLine."FA Posting Date" := InvPostingBuffer[1]."FA Posting Date";
          GenJnlLine."Depreciation Book Code" := InvPostingBuffer[1]."Depreciation Book Code";
          GenJnlLine."Salvage Value" := InvPostingBuffer[1]."Salvage Value";
          GenJnlLine."Depr. until FA Posting Date" := InvPostingBuffer[1]."Depr. until FA Posting Date";
          GenJnlLine."Depr. Acquisition Cost" := InvPostingBuffer[1]."Depr. Acquisition Cost";
          GenJnlLine."Maintenance Code" := InvPostingBuffer[1]."Maintenance Code";
          GenJnlLine."Insurance No." := InvPostingBuffer[1]."Insurance No.";
          GenJnlLine."Budgeted FA No." := InvPostingBuffer[1]."Budgeted FA No.";
          GenJnlLine."Duplicate in Depreciation Book" := InvPostingBuffer[1]."Duplicate in Depreciation Book";
          GenJnlLine."Use Duplication List" := InvPostingBuffer[1]."Use Duplication List";
        END;
        GenJnlLine."Deferral Code" := InvPostingBuffer[1]."Deferral Code";
        GenJnlLine."Deferral Line No." := InvPostingBuffer[1]."Deferral Line No.";

        //**4PS.sn
        GenJnlLine."Cost Component" := InvPostingBuffer[1]."Cost Component";
        GenJnlLine."Subcontract No." := PurchHeader."Subcontract No.";
        IF PurchLine.ReleaseRetention THEN BEGIN
          GenJnlLine."Retention Entry Type" := GenJnlLine."Retention Entry Type"::Purchase;
          GenJnlLine."Retention Entry Document Type" := GenJnlLine."Retention Entry Document Type"::Closure;
          GenJnlLine."Applies-to Retention ID" := InvPostingBuffer[1]."Applies-to Retention ID";
          GenJnlLine."Skip WIP Check" := TRUE;
        END ELSE BEGIN
          GenJnlLine."Retention Entry Type" := GenJnlLine."Retention Entry Type"::" ";
          GenJnlLine."Retention Entry Document Type" := GenJnlLine."Retention Entry Document Type"::" ";
          GenJnlLine."Applies-to Retention ID" := 0;
        END;

        //Pass quantity for use with FA ledger entries
        IF (GenJnlLine."Account Type" = GenJnlLine1."Account Type"::"Fixed Asset") THEN
          IF (PlantSetup.READPERMISSION) THEN
            IF (PlantSetup.GET AND PlantSetup."Integration Fixed Assets") THEN
              GenJnlLine.Quantity := InvPostingBuffer[1].Quantity;
        GenJnlLine.Element := InvPostingBuffer[1].Element;
        GenJnlLine."Extension Contract" := InvPostingBuffer[1]."Extension Contract";
        GenJnlLine."Service Order No." := InvPostingBuffer[1]."Service Order No.";
        GenJnlLine."Service Contract No." := InvPostingBuffer[1]."Service Contract No.";
        GenJnlLine."Service Location No." := InvPostingBuffer[1]."Service Location No.";
        GenJnlLine."Origin Type" := InvPostingBuffer[1]."Origin Type";
        GenJnlLine."Interest Date" := "Interest Date";
        GenJnlLine."Intercompany Transaction" := InvPostingBuffer[1]."Intercompany Transaction";
        GenJnlLine."Receiving Company" := InvPostingBuffer[1]."Receiving Company";
        GenJnlLine."Employee No." := InvPostingBuffer[1]."Employee No.";
        GenJnlLine."Block VAT Posting" := InvPostingBuffer[1]."Block VAT Posting";
        //**4PS.en
      END;
    END;

    LOCAL PROCEDURE FindTempItemChargeAssgntPurch@96(PurchLineNo@1000 : Integer) : Boolean;
    BEGIN
      ClearItemChargeAssgntFilter;
      TempItemChargeAssgntPurch.SETCURRENTKEY("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLineNo);
      EXIT(TempItemChargeAssgntPurch.FINDSET);
    END;

    LOCAL PROCEDURE UpdateInvoicedQtyOnPurchRcptLine@107(VAR PurchRcptLine@1000 : Record 121;QtyToBeInvoiced@1001 : Decimal;QtyToBeInvoicedBase@1002 : Decimal);
    VAR
      CurrExchRate@1100525000 : Record 330;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        "Quantity Invoiced" := "Quantity Invoiced" + QtyToBeInvoiced;
        "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
        "Qty. Rcd. Not Invoiced" := Quantity - "Quantity Invoiced";
        //**4PS.sn
        "Invoiced (line)" := "Invoiced (line)" +
          ROUND(QtyToBeInvoiced * GetPurchLineUnitCostInclDisc(PurchLine), Currency."Amount Rounding Precision");

        PurchReceiptHeader.GET(PurchRcptLine."Document No.");
        IF PurchReceiptHeader."Currency Code" = '' THEN
          PurchRcptLine."Invoiced (LCY) (line)" := PurchRcptLine."Invoiced (line)"
        ELSE
          PurchRcptLine."Invoiced (LCY) (line)" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '',"Posting Date", PurchReceiptHeader."Currency Code",
                PurchRcptLine."Invoiced (line)", PurchReceiptHeader."Currency Factor",FALSE));

        IF PurchHeader."Amounts only" THEN
          PurchRcptLine."Amnt. Rcd. Not Invoiced (LCY)" :=
            PurchRcptLine."Amount (LCY)" - PurchRcptLine."Invoiced (LCY) (line)"
        ELSE BEGIN
          PurchRcptLine."Amnt. Rcd. Not Invoiced" :=
            PurchRcptLine."Received (line)" - PurchRcptLine."Invoiced (line)";
          PurchRcptLine."Amnt. Rcd. Not Invoiced (LCY)" :=
            PurchRcptLine."Amount (LCY)" - PurchRcptLine."Invoiced (LCY) (line)";
        END;
        //**4PS.en
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE FillDeferralPostingBuffer@123(PurchLine@1000 : Record 39;RemainAmtToDefer@1001 : Decimal;RemainAmtToDeferACY@1002 : Decimal;DeferralAccount@1003 : Code[20];PurchAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1007 : Record 1700;
    BEGIN
      IF PurchLine."Deferral Code" <> '' THEN BEGIN
        DeferralTemplate.GET(PurchLine."Deferral Code");

        IF TempDeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',
             PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
        THEN BEGIN
          IF TempDeferralHeader."Amount to Defer" <> 0 THEN BEGIN
            TempDeferralLine.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
            TempDeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
            TempDeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
            TempDeferralLine.SETRANGE("Document Type",PurchLine."Document Type");
            TempDeferralLine.SETRANGE("Document No.",PurchLine."Document No.");
            TempDeferralLine.SETRANGE("Line No.",PurchLine."Line No.");

            // The remaining amounts only need to be adjusted into the deferral account and are always reversed
            IF (RemainAmtToDefer <> 0) OR (RemainAmtToDeferACY <> 0) THEN BEGIN
              DeferralPostBuffer[1].PreparePurch(PurchLine,GenJnlLineDocNo);
              DeferralPostBuffer[1]."Amount (LCY)" := -RemainAmtToDefer;
              DeferralPostBuffer[1].Amount := -RemainAmtToDeferACY;
              DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := 0;
              DeferralPostBuffer[1]."Sales/Purch Amount" := 0;
              // DeferralPostBuffer[1].ReverseAmounts;
              DeferralPostBuffer[1]."G/L Account" := PurchAccount;
              DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
              // Remainder always goes to the Posting Date
              DeferralPostBuffer[1]."Posting Date" := PurchHeader."Posting Date";
              DeferralPostBuffer[1].Description := DeferralTemplate.Description;
              DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
              DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
              UpdDeferralPostBuffer;
            END;

            // Add the deferral lines for each period to the deferral posting buffer merging when they are the same
            IF TempDeferralLine.FINDSET THEN
              REPEAT
                IF (TempDeferralLine."Amount (LCY)" <> 0) OR (TempDeferralLine.Amount <> 0) THEN BEGIN
                  DeferralPostBuffer[1].PreparePurch(PurchLine,GenJnlLineDocNo);
                  DeferralPostBuffer[1]."Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                  DeferralPostBuffer[1].Amount := TempDeferralLine.Amount;
                  DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                  DeferralPostBuffer[1]."Sales/Purch Amount" := TempDeferralLine.Amount;
                  IF PurchLine.IsCreditDocType THEN
                    DeferralPostBuffer[1].ReverseAmounts;
                  DeferralPostBuffer[1]."G/L Account" := PurchAccount;
                  DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
                  DeferralPostBuffer[1]."Posting Date" := TempDeferralLine."Posting Date";
                  DeferralPostBuffer[1].Description := TempDeferralLine.Description;
                  DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
                  DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
                  UpdDeferralPostBuffer;
                END ELSE
                  ERROR(ZeroDeferralAmtErr,PurchLine."No.",PurchLine."Deferral Code");

              UNTIL TempDeferralLine.NEXT = 0

            ELSE
              ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code");
          END ELSE
            ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code")
        END ELSE
          ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code")
      END;
    END;

    LOCAL PROCEDURE UpdDeferralPostBuffer@124();
    BEGIN
      DeferralPostBuffer[1]."Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
      DeferralPostBuffer[1]."Global Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
      DeferralPostBuffer[1]."Global Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";

      DeferralPostBuffer[2] := DeferralPostBuffer[1];
      IF DeferralPostBuffer[2].FIND THEN BEGIN
        DeferralPostBuffer[2].Amount += DeferralPostBuffer[1].Amount;
        DeferralPostBuffer[2]."Amount (LCY)" += DeferralPostBuffer[1]."Amount (LCY)";
        DeferralPostBuffer[2]."Sales/Purch Amount" += DeferralPostBuffer[1]."Sales/Purch Amount";
        DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" += DeferralPostBuffer[1]."Sales/Purch Amount (LCY)";

        IF NOT DeferralPostBuffer[1]."System-Created Entry" THEN
          DeferralPostBuffer[2]."System-Created Entry" := FALSE;
        IF IsCombinedDeferralZero THEN
          DeferralPostBuffer[2].DELETE
        ELSE
          DeferralPostBuffer[2].MODIFY;
      END ELSE
        DeferralPostBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE RoundDeferralsForArchive@126(PurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39);
    VAR
      DeferralHeader@1004 : Record 1701;
      AmtToDefer@1002 : Decimal;
      AmtToDeferACY@1003 : Decimal;
    BEGIN
      PurchLine.SETFILTER("Deferral Code",'<>%1','');
      IF PurchLine.FINDSET THEN
        REPEAT
          IF DeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',
               PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
          THEN
            DeferralUtilities.RoundDeferralAmount(
              DeferralHeader,PurchHeader."Currency Code",
              PurchHeader."Currency Factor",PurchHeader."Posting Date",
              AmtToDeferACY,AmtToDefer);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetAmountsForDeferral@127(PurchLine@1001 : Record 39;VAR AmtToDefer@1002 : Decimal;VAR AmtToDeferACY@1003 : Decimal;VAR DeferralAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1005 : Record 1700;
    BEGIN
      IF PurchLine."Deferral Code" <> '' THEN BEGIN
        DeferralTemplate.GET(PurchLine."Deferral Code");
        DeferralTemplate.TESTFIELD("Deferral Account");
        DeferralAccount := DeferralTemplate."Deferral Account";

        IF TempDeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',
             PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
        THEN BEGIN
          AmtToDeferACY := TempDeferralHeader."Amount to Defer";
          AmtToDefer := TempDeferralHeader."Amount to Defer (LCY)";
        END;

        IF PurchLine.IsCreditDocType THEN BEGIN
          AmtToDefer := -AmtToDefer;
          AmtToDeferACY := -AmtToDeferACY;
        END
      END ELSE BEGIN
        AmtToDefer := 0;
        AmtToDeferACY := 0;
        DeferralAccount := '';
      END;
    END;

    LOCAL PROCEDURE DefaultGLAccount@129(DeferralCode@1000 : Code[10];AmtToDefer@1001 : Decimal;GLAccNo@1002 : Code[20];DeferralAccNo@1003 : Code[20]) : Code[20];
    BEGIN
      IF (DeferralCode <> '') AND (AmtToDefer = 0) THEN
        EXIT(DeferralAccNo);

      EXIT(GLAccNo);
    END;

    LOCAL PROCEDURE IsCombinedDeferralZero@130() : Boolean;
    BEGIN
      IF (DeferralPostBuffer[2].Amount = 0) AND (DeferralPostBuffer[2]."Amount (LCY)" = 0) AND
         (DeferralPostBuffer[2]."Sales/Purch Amount" = 0) AND (DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" = 0)
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckMandatoryHeaderFields@128(PurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader.TESTFIELD("Document Type");
      PurchHeader.TESTFIELD("Buy-from Vendor No.");
      PurchHeader.TESTFIELD("Pay-to Vendor No.");
      PurchHeader.TESTFIELD("Posting Date");
      PurchHeader.TESTFIELD("Document Date");
    END;

    LOCAL PROCEDURE AdjustTotalAmountForDeferrals@49(PurchLine@1000 : Record 39;VAR AmtToDefer@1001 : Decimal;VAR AmtToDeferACY@1002 : Decimal;VAR TotalAmount@1003 : Decimal;VAR TotalAmountACY@1004 : Decimal);
    BEGIN
      IF PurchLine."Deferral Code" <> '' THEN
        IF (AmtToDefer = TotalAmount) AND (AmtToDeferACY = TotalAmountACY) THEN BEGIN
          AmtToDefer := 0;
          AmtToDeferACY := 0;
        END ELSE BEGIN
          TotalAmount := TotalAmount - AmtToDefer;
          TotalAmountACY := TotalAmountACY - AmtToDeferACY;
        END;
    END;

    LOCAL PROCEDURE InitVATAmounts@111(PurchLine@1002 : Record 39;VAR TotalVAT@1000 : Decimal;VAR TotalVATACY@1001 : Decimal;VAR TotalAmount@1003 : Decimal;VAR TotalAmountACY@1004 : Decimal);
    BEGIN
      TotalVAT := PurchLine."Amount Including VAT" - PurchLine.Amount;
      TotalVATACY := PurchLineACY."Amount Including VAT" - PurchLineACY.Amount;
      TotalAmount := PurchLine.Amount;
      TotalAmountACY := PurchLineACY.Amount;
    END;

    LOCAL PROCEDURE InitAmounts@109(PurchLine@1005 : Record 39;VAR TotalVAT@1004 : Decimal;VAR TotalVATACY@1003 : Decimal;VAR TotalAmount@1002 : Decimal;VAR TotalAmountACY@1001 : Decimal;VAR AmtToDefer@1006 : Decimal;VAR AmtToDeferACY@1007 : Decimal;VAR DeferralAccount@1008 : Code[20]);
    BEGIN
      InitVATAmounts(PurchLine,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
      GetAmountsForDeferral(PurchLine,AmtToDefer,AmtToDeferACY,DeferralAccount);
    END;

    LOCAL PROCEDURE CalcInvoiceDiscountPosting@112(PurchLine@1001 : Record 39;PurchLineACY@1000 : Record 39);
    BEGIN
      CASE PurchLine."VAT Calculation Type" OF
        PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT":
          InvPostingBuffer[1].CalcDiscount(
            PurchHeader."Prices Including VAT",
            -PurchLine."Inv. Discount Amount",
            -PurchLineACY."Inv. Discount Amount");
        PurchLine."VAT Calculation Type"::"Reverse Charge VAT":
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -PurchLine."Inv. Discount Amount",
            -PurchLineACY."Inv. Discount Amount");
        PurchLine."VAT Calculation Type"::"Sales Tax":
          IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
            InvPostingBuffer[1].CalcDiscount(
              PurchHeader."Prices Including VAT",
              -PurchLine."Inv. Discount Amount",
              -PurchLineACY."Inv. Discount Amount")
          ELSE
            InvPostingBuffer[1].CalcDiscountNoVAT(
              -PurchLine."Inv. Discount Amount",
              -PurchLineACY."Inv. Discount Amount");
      END;
    END;

    LOCAL PROCEDURE CalcLineDiscountPosting@110(PurchLine@1001 : Record 39;PurchLineACY@1000 : Record 39);
    BEGIN
      CASE PurchLine."VAT Calculation Type" OF
        PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT":
          InvPostingBuffer[1].CalcDiscount(
            PurchHeader."Prices Including VAT",
            -PurchLine."Line Discount Amount",
            -PurchLineACY."Line Discount Amount");
        PurchLine."VAT Calculation Type"::"Reverse Charge VAT":
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -PurchLine."Line Discount Amount",
            -PurchLineACY."Line Discount Amount");
        PurchLine."VAT Calculation Type"::"Sales Tax":
          IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
            InvPostingBuffer[1].CalcDiscount(
              PurchHeader."Prices Including VAT",
              -PurchLine."Line Discount Amount",
              -PurchLineACY."Line Discount Amount")
          ELSE
            InvPostingBuffer[1].CalcDiscountNoVAT(
              -PurchLine."Line Discount Amount",
              -PurchLineACY."Line Discount Amount");
      END;
    END;

    LOCAL PROCEDURE ClearPostBuffers@113();
    BEGIN
      CLEAR(PostPlantEntry);  //**4PS.n
      CLEAR(WhsePostRcpt);
      CLEAR(WhsePostShpt);
      CLEAR(GenJnlPostLine);
      CLEAR(JobPostLine);
      CLEAR(ItemJnlPostLine);
      CLEAR(WhseJnlPostLine);
    END;

    LOCAL PROCEDURE ValidatePostingAndDocumentDate@119(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      IF PostingDateExists AND (ReplacePostingDate OR (PurchaseHeader."Posting Date" = 0D)) THEN BEGIN
        PurchaseHeader."Posting Date" := PostingDate;
        PurchaseHeader.VALIDATE("Currency Code");
      END;

      IF PostingDateExists AND (ReplaceDocumentDate OR (PurchaseHeader."Document Date" = 0D)) THEN
        PurchaseHeader.VALIDATE("Document Date",PostingDate);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostPurchaseDoc@114(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostCommitPurchaseDoc@115(VAR PurchaseHeader@1000 : Record 38;VAR GenJnlPostLine@1001 : Codeunit 12;PreviewMode@1002 : Boolean;ModifyHeader@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterPostPurchaseDoc@116(VAR PurchaseHeader@1000 : Record 38;VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    BEGIN
    END;

    LOCAL PROCEDURE CheckExternalDocumentNumber@117(VAR VendLedgEntry@1001 : Record 25;VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("External Document No.");
      VendLedgEntry.SETRANGE("Document Type",GenJnlLineDocType);
      VendLedgEntry.SETRANGE("External Document No.",GenJnlLineExtDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",PurchaseHeader."Pay-to Vendor No.");
      VendLedgEntry.SETRANGE(Reversed,FALSE);
      //**4PS.sn
      VendLedgEntry.SETRANGE("Document Date" ,CALCDATE('<-CY>',PurchaseHeader."Document Date"),CALCDATE('<CY>',PurchaseHeader."Document Date"));
      //**4PS.en
      IF VendLedgEntry.FINDFIRST THEN
        ERROR(
          Text016,
          VendLedgEntry."Document Type",GenJnlLineExtDocNo);
    END;

    LOCAL PROCEDURE CheckDeferralPosting@157(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETFILTER("Qty. to Invoice",'<>%1',0);
      PurchaseLine.SETFILTER("Deferral Code",'<>%1','');
      IF PurchaseLine.FINDSET THEN
        REPEAT
          IF PurchaseLine."Line Discount Amount" <> 0 THEN
            ERROR(
              STRSUBSTNO(
                CannotPostDiscountDeferralErr,
                PurchaseLine."Line No.",PurchaseLine.FIELDCAPTION("Line Discount Amount")));
          IF PurchaseLine."Inv. Discount Amount" <> 0 THEN
            ERROR(
              STRSUBSTNO(
                CannotPostDiscountDeferralErr,
                PurchaseLine."Line No.",
                PurchaseLine.FIELDCAPTION("Inv. Discount Amount")));
        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreatePostedDeferralScheduleFromPurchDoc@169(PurchLine@1008 : Record 39;NewDocumentType@1007 : Integer;NewDocumentNo@1003 : Code[20];NewLineNo@1002 : Integer;PostingDate@1000 : Date);
    VAR
      PostedDeferralHeader@1006 : Record 1704;
      PostedDeferralLine@1005 : Record 1705;
      DeferralTemplate@1004 : Record 1700;
      DeferralAccount@1001 : Code[20];
    BEGIN
      IF DeferralTemplate.GET(PurchLine."Deferral Code") THEN
        DeferralAccount := DeferralTemplate."Deferral Account";

      IF TempDeferralHeader.GET(
           DeferralUtilities.GetPurchDeferralDocType,'','',PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
      THEN BEGIN
        PostedDeferralHeader.InitFromDeferralHeader(TempDeferralHeader,'','',NewDocumentType,
          NewDocumentNo,NewLineNo,DeferralAccount,PurchLine."Buy-from Vendor No.",PostingDate);
        WITH TempDeferralLine DO BEGIN
          SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name",'');
          SETRANGE("Gen. Jnl. Batch Name",'');
          SETRANGE("Document Type",PurchLine."Document Type");
          SETRANGE("Document No.",PurchLine."Document No.");
          SETRANGE("Line No.",PurchLine."Line No.");
          IF FINDSET THEN BEGIN
            REPEAT
              PostedDeferralLine.InitFromDeferralLine(
                TempDeferralLine,'','',NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount);
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcDeferralAmounts@173(PurchHeader@1000 : Record 38;PurchLine@1003 : Record 39;OriginalDeferralAmount@1002 : Decimal);
    VAR
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1005 : Record 1702;
      CurrExchRate@1006 : Record 330;
      TotalAmountLCY@1009 : Decimal;
      TotalAmount@1010 : Decimal;
      TotalDeferralCount@1007 : Integer;
      DeferralCount@1008 : Integer;
      UseDate@1001 : Date;
    BEGIN
      // Populate temp and calculate the LCY amounts for posting
      IF PurchHeader."Posting Date" = 0D THEN
        UseDate := WORKDATE
      ELSE
        UseDate := PurchHeader."Posting Date";

      IF DeferralHeader.GET(
           DeferralUtilities.GetPurchDeferralDocType,'','',PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
      THEN BEGIN
        TempDeferralHeader := DeferralHeader;
        IF PurchLine.Quantity <> PurchLine."Qty. to Invoice" THEN
          TempDeferralHeader."Amount to Defer" :=
            ROUND(TempDeferralHeader."Amount to Defer" *
              PurchLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");
        Increment(TotalDeferralHeader."Amount to Defer",TempDeferralHeader."Amount to Defer");
        TempDeferralHeader."Amount to Defer (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              0, '', //**4PS.n
              UseDate,PurchHeader."Currency Code",
      //      TotalDeferralHeader."Amount to Defer",PurchHeader."Currency Factor")) - //**4PS.o
              TotalDeferralHeader."Amount to Defer",PurchHeader."Currency Factor",TRUE)) - //**4PS.n
          TotalDeferralHeader."Amount to Defer (LCY)";
        TempDeferralHeader.INSERT;

        WITH DeferralLine DO BEGIN
          SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name",'');
          SETRANGE("Gen. Jnl. Batch Name",'');
          SETRANGE("Document Type",PurchLine."Document Type");
          SETRANGE("Document No.",PurchLine."Document No.");
          SETRANGE("Line No.",PurchLine."Line No.");
          IF FINDSET THEN BEGIN
            TotalDeferralCount := COUNT;
            REPEAT
              TempDeferralLine.INIT;
              TempDeferralLine := DeferralLine;
              DeferralCount := DeferralCount + 1;

              IF DeferralCount = TotalDeferralCount THEN BEGIN
                TempDeferralLine.Amount := TempDeferralHeader."Amount to Defer" - TotalAmount;
                TempDeferralLine."Amount (LCY)" := TempDeferralHeader."Amount to Defer (LCY)" - TotalAmountLCY;
              END ELSE BEGIN
                IF PurchLine.Quantity <> PurchLine."Qty. to Invoice" THEN
                  TempDeferralLine.Amount :=
                    ROUND(TempDeferralLine.Amount *
                      PurchLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");

                TempDeferralLine."Amount (LCY)" :=
                  ROUND(
                    CurrExchRate.ExchangeAmtFCYToLCY(
                      0, '', //**4PS.n
                      UseDate,PurchHeader."Currency Code",
      //              TempDeferralLine.Amount,PurchHeader."Currency Factor")); //**4PS.o
                      TempDeferralLine.Amount,PurchHeader."Currency Factor",TRUE)); //**4PS.n
                TotalAmount := TotalAmount + TempDeferralLine.Amount;
                TotalAmountLCY := TotalAmountLCY + TempDeferralLine."Amount (LCY)";
              END;
              TempDeferralLine.INSERT;
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteWhseRqst@120(PurchaseHeader@1001 : Record 38);
    VAR
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      WarehouseRequest.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
      WarehouseRequest.SETRANGE("Source Subtype",PurchaseHeader."Document Type");
      WarehouseRequest.SETRANGE("Source No.",PurchaseHeader."No.");
      IF NOT WarehouseRequest.ISEMPTY THEN
        WarehouseRequest.DELETEALL;
    END;

    PROCEDURE SetReceiptsInBundles@5819();
    BEGIN
      //**4PS
      ReceiptsInBundles := TRUE;
    END;

    PROCEDURE PostingJobServicePlant@1100525001(PurchRcptLine@1100525003 : Record 121);
    VAR
      lvWageCompRec@1100525004 : Record 11012014;
      lvPostJobJnl@1100525000 : Boolean;
      lvWIPAccNo@1100525002 : Code[20];
      lvCompName@1100525001 : Text[50];
      DiscountAmountPerQty@1100528501 : Decimal;
    BEGIN
      //**4PS
      JobLedgEntryNo := 0; //DP00121
      ServLedgEntryNo := 0; //DP00121
      WITH PurchHeader DO BEGIN
        IF (PurchSetup."Preregister WIP Purch. Inv.") AND
           (PurchSetup."Preregistration WIP Account" = PurchLine."No.") AND
           (PurchLine.Type = PurchLine.Type::"G/L Account") THEN
          lvPostJobJnl := FALSE
        ELSE
          lvPostJobJnl := TRUE;
        IF (PurchLine.ReleaseRetention AND (PurchLine."Line Discount Amount" + PurchLine."Inv. Discount Amount" = 0)) THEN
          lvPostJobJnl := FALSE;

        //IF (PurchLine."Job No." <> '') AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN //**4PS.o
        IF (lvPostJobJnl) AND
           (PurchLine."Receiving Company" = '') AND
           (PurchLine."Job No." <> '') AND
           (("Amounts only" AND (PurchLine."Amnt. to Invoice" <> 0)) OR
            ((NOT "Amounts only") AND (PurchLine."Qty. to Invoice" <> 0)))
        THEN BEGIN
          PurchLine.TESTFIELD("Shortcut Dimension 2 Code");
          DimMgt.GetDimValueRec(2,PurchLine."Shortcut Dimension 2 Code",DimValRec,TRUE,PurchLine."Job No.");

          IF PurchLine."Receiving Company" <> '' THEN
            lvCompName := PurchLine."Receiving Company"
          ELSE
            lvCompName := COMPANYNAME;

          lvWIPAccNo := ProjTypeRec.GetWipAcc(
            ProjRec."Project Type",
            DimValRec."Cost Type",
            ProjRec."Project Status",
            ICJobSetupRec."Provisions at Closure",
            lvCompName,
            DimValRec."Cost Type",
            PurchHeader."Buy-from Vendor No.");
          IF NOT PurchLine.ReleaseRetention THEN
            IF PurchLine."No." <> lvWIPAccNo THEN
              PurchLine.FIELDERROR("No.", STRSUBSTNO(Text11012000, lvWIPAccNo));

          // Post job entries
          JobJnlLine.INIT;
          JobJnlLine."Posting Date" := "Posting Date";
          JobJnlLine."Document Date" := "Document Date";
          JobJnlLine."Country/Region Code" := "VAT Country/Region Code";
          JobJnlLine."Reason Code" := "Reason Code";
          JobJnlLine."Job No." := PurchLine."Job No.";
          JobJnlLine.Element := PurchLine.Element;
          JobJnlLine."Extension Contract" := PurchLine."Extension Contract";
          JobJnlLine."Item No." := PurchLine."Item No.";
          JobJnlLine."Basic Item" := PurchLine."Basic Item";
          JobJnlLine."Trade Item" := PurchLine."Trade Item";
          JobJnlLine."Vendor (Trade Item)" := PurchLine."Vendor (Trade Item)";
          JobJnlLine.Manufacturer := PurchLine.Manufacturer;
          JobJnlLine."Service Order No." := PurchLine."Service Order No.";
          JobJnlLine."Service Contract No." := PurchLine."Service Contract No.";
          JobJnlLine."Service Location No." := PurchLine."Service Location No.";
          JobJnlLine."Purchase Action" := PurchLine."Purchase Action";
          JobJnlLine."Employee No." := PurchLine."Employee No.";
          JobJnlLine."Wage Component" := PurchLine."Wage Component";
          JobJnlLine.Vendor := PurchLine."Buy-from Vendor No.";
          JobJnlLine."Document Line No." := PurchLine."Line No.";  //db, 24-08-04
          JobJnlLine."Rental Unit" := PurchLine."Rental Unit";
          JobJnlLine."Cost Component" := PurchLine."Cost Component";
          JobJnlLine."Removal Contribution" := PurchLine."Removal Contribution";  //db, 18-09-06
          JobJnlLine."Plot No." := PurchLine."Plot No.";
          JobJnlLine."Country/Region of Origin/Dest." := PurchHeader."Country of Destination"; //hs, 16-10-07
          JobJnlLine."Tariff No." := PurchLine."Tariff No."; //**4PS05.n
          JobJnlLine."Net Weight" := PurchLine."Net Weight"; //**4PS05.n
          //IF (PurchLine."Employee No." <> '') AND (PurchLine."Receipt No." <> '') THEN  //*10927.o
          IF (PurchLine."Receipt No." <> '') THEN  //*10927.n
            JobJnlLine."Execution Date" := PurchRcptLine."Posting Date";
          IF JobJnlLine."Execution Date" = 0D THEN  //*10927.n
            JobJnlLine."Execution Date" := JobJnlLine."Posting Date";  //*10927.n
          JobJnlLine."No." := lvWIPAccNo;
          JobJnlLine."Variant Code" := PurchLine."Variant Code";
          JobJnlLine.Description := PurchLine.Description;
          JobJnlLine."Description 2" := PurchLine."Description 2";  //**4PS01.n
          JobJnlLine."Unit of Measure Code" := PurchLine."Unit of Measure Code";
          JobJnlLine."Location Code" := PurchLine."Location Code";
          JobJnlLine."Posting Group" := PurchLine."Posting Group";
          JobJnlLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
          JobJnlLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
          JobJnlLine."Dimension Set ID" := PurchLine."Dimension Set ID";
          JobJnlLine."Gen. Bus. Posting Group" := PurchLine."Gen. Bus. Posting Group";
          JobJnlLine."Gen. Prod. Posting Group" := PurchLine."Gen. Prod. Posting Group";
          JobJnlLine."Transaction Type" := PurchLine."Transaction Type";
          JobJnlLine."Transport Method" := PurchLine."Transport Method";
          JobJnlLine."Entry/Exit Point" := PurchLine."Entry Point";
          JobJnlLine.Area := PurchLine.Area;
          JobJnlLine."Transaction Specification" := PurchLine."Transaction Specification";
          JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;
          JobJnlLine."Document No." := GenJnlLineDocNo;
          JobJnlLine."External Document No." := GenJnlLineExtDocNo;
          JobJnlLine.Type := 3 - PurchLine.Type;
          JobJnlLine.Quantity := PurchLine."Qty. to Invoice";
          JobJnlLine."Quantity (Base)" := PurchLine."Qty. to Invoice (Base)";
          JobJnlLine."Source Code" := SrcCode;
          JobJnlLine."Posting No. Series" := "Posting No. Series";
          JobJnlLine."Source Currency Code" := "Currency Code";
          JobJnlLine."Cost Plus Entry Created" := PurchLine."Cost Plus Entry Created";
          PurchaseLineExtension.GetPurchLineExtension(
            PurchLine."Document Type", PurchLine."Document No.", PurchLine."Line No.");
          JobJnlLine."Yard No." := PurchaseLineExtension."Yard No.";
          JobJnlLine."System No." := PurchaseLineExtension."System No.";
          JobJnlLine."Entity Type" := PurchLine."Entity Type";
          JobJnlLine."Entity No." := PurchaseLineExtension."Entity No.";
          JobJnlLine."Cable Transit Pos." := PurchaseLineExtension."Cable Transit Pos.";

          IF PurchLine.ReleaseRetention THEN BEGIN
            IF PurchLine.Quantity = 0 THEN
              DiscountAmountPerQty := 0
            ELSE
              DiscountAmountPerQty :=
                ROUND((PurchLine."Line Discount Amount" + PurchLine."Inv. Discount Amount"),
                  GLSetup."Unit-Amount Rounding Precision");

            IF PurchHeader."Prices Including VAT" THEN
              DiscountAmountPerQty :=
                DiscountAmountPerQty / (1 + PurchLine."VAT %" / 100);

            JobJnlLine.VALIDATE("Unit Cost (LCY)", DiscountAmountPerQty);
            JobJnlLine."Direct Unit Cost (LCY)" := DiscountAmountPerQty;
            JobJnlLine."Total Cost (LCY)" := PurchLine."Line Discount Amount" + PurchLine."Inv. Discount Amount";
            JobJnlLine."Source Currency Total Cost" := PurchLineACY."Line Discount Amount" + PurchLineACY."Inv. Discount Amount";
            IF (JobJnlLine."Source Currency Code" <> '') THEN
              JobJnlLine."Total Cost"  := JobJnlLine."Source Currency Total Cost";  //**4PS RFC Multi Currency
            JobJnlLine."Sales Price Purch. Order" := PurchLine."Line Discount Amount" + PurchLine."Inv. Discount Amount";
          END ELSE BEGIN
            JobJnlLine."Total Cost (LCY)" := InvPostingBuffer[1].Amount + InvPostingBuffer[1]."Retention Amount";
            IF NOT "Amounts only" THEN
              JobJnlLine."Direct Unit Cost (LCY)" := ROUND(JobJnlLine."Total Cost (LCY)" / JobJnlLine.Quantity)
            ELSE
              JobJnlLine."Direct Unit Cost (LCY)" := JobJnlLine."Total Cost (LCY)";
            JobJnlLine."Source Currency Total Cost" :=
              InvPostingBuffer[1]."Amount (ACY)" + InvPostingBuffer[1]."Retention Amount (ACY)";
            IF (JobJnlLine."Source Currency Code" <> '') THEN
              JobJnlLine."Total Cost"  := JobJnlLine."Source Currency Total Cost";  //**4PS RFC Multi Currency
            JobJnlLine."Sales Price Purch. Order" := PurchLine."Sales Price";
          END;
          IF (PurchLine."Cost Type" = PurchLine."Cost Type"::Labor) AND
             (PurchLine."Wage Component" <> '') THEN
            IF lvWageCompRec.GET(PurchLine."Wage Component") THEN
              IF lvWageCompRec."Component Type" = lvWageCompRec."Component Type"::Expenses THEN BEGIN
                JobJnlLine.Quantity := 0;
                JobJnlLine."Quantity (Base)" := 0;
                JobJnlLine."Unit Cost (LCY)" := JobJnlLine."Direct Unit Cost (LCY)";  //db, 14-03-13: C001129 (checked on CostPlusEntry)
              END;
          JobJnlLine."Qty. per Unit of Measure" := PurchLine."Qty. per Unit of Measure";  //db, 29-12-11: M28965
          JobJnlLine."FSC Type Code" := PurchLine."FSC Type Code";  //DP00129
          JobJnlLine.Comment := GetCommentForProjEntry(PurchLine, MAXSTRLEN(JobJnlLine.Comment));  //*34602.n
          JobJnlLine.Text := PurchLine.Text;
          //**4PS.en

          JobJnlPostLine.RunWithCheck(JobJnlLine);
          JobLedgEntryNo := JobJnlPostLine.GetJobLedgEntryNo; //DP00121
          JobJnlLine."Sales Price Purch. Order" := 0;
          JobJnlLine.Comment := '';  //*34602.n  (Not in surcharges)

          PostComplementaryWIPCostProj;
          PostSurcharge(0);
        END ELSE BEGIN
          IF (PurchLine."Job No." <> '') AND ((PurchLine."Qty. to Receive" <> 0) OR (PurchLine."Return Qty. to Ship" <> 0)) THEN
            JobJnlPostLine.TestJob(PurchLine."Job No.", PurchLine."Receiving Company",
              (PurchLine."Employee No." <> '') AND (PurchLine."Wage Component" <> ''));
        END;

        IF (PurchLine."Receiving Company" = '') AND
           (PurchLine."Service Order No." <> '') AND
           (("Amounts only" AND (PurchLine."Amnt. to Invoice" <> 0)) OR
            ((NOT "Amounts only") AND (PurchLine."Qty. to Invoice" <> 0)))
        THEN BEGIN
          PostService(PurchRcptLine);
          PostComplementaryWIPCostServ;
          PostSurcharge(1);
        END;

        IF (PurchLine."Plant Type" <> '') AND
           (("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) OR
            (("Document Type" = "Document Type"::Order) AND Receive AND Invoice)) AND
           (PurchLine.Type IN [PurchLine.Type::"G/L Account", PurchLine.Type::"Fixed Asset"])
        THEN
          PostPlant;

        IF ("Document Type" = "Document Type"::Invoice) OR
           (("Document Type" = "Document Type"::Order) AND Receive AND Invoice)
        THEN BEGIN
          IF (PurchLine.Type = PurchLine.Type::"Fixed Asset") THEN
            FA_PlantIntegration;
          IF (PurchLine."Plant No." <> '') THEN
            UpdatePlantNoPurchPrice();
        END;

        IF ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) AND
           (PurchLine."Ext. Rented Plant Invoiced to" <> 0D)
        THEN
          UpdatePlantNoExtRentDate();
      END;
    END;

    PROCEDURE lvCheckCompanyIC@5820(PurchaseLine@11012000 : Record 39);
    BEGIN
      //**4PS
      IF PurchaseLine."Receiving Company" <> '' THEN BEGIN
        ICJobSetupRec.CHANGECOMPANY(PurchaseLine."Receiving Company");
        ProjRec.CHANGECOMPANY(PurchaseLine."Receiving Company");
        ProjTypeRec.CHANGECOMPANY(PurchaseLine."Receiving Company");
        GLAcc.CHANGECOMPANY(PurchaseLine."Receiving Company");
      END ELSE BEGIN
        ICJobSetupRec.CHANGECOMPANY(COMPANYNAME);
        ProjRec.CHANGECOMPANY(COMPANYNAME);
        ProjTypeRec.CHANGECOMPANY(COMPANYNAME);
        GLAcc.CHANGECOMPANY(PurchaseLine."Receiving Company");
      END;

      ICJobSetupRec.GET;
    END;

    PROCEDURE CreateICEntry@5818();
    VAR
      ICCounter@11012000 : Integer;
    BEGIN
      //**4PS
      ICEntryRec.LOCKTABLE;
      IF ICEntryRec.FIND('+') THEN
        ICCounter := ICEntryRec."Line No."
      ELSE
        ICCounter := 0;

      ICEntryRec.INIT;
      ICEntryRec."Line No." := ICCounter + 1;
      ICEntryRec."Post in Company" := PurchLine."Receiving Company";
      ICEntryRec."Supplying Company" := COMPANYNAME;
      ICEntryRec."Receiving Company" := PurchLine."Receiving Company";
      ICEntryRec."Account No." := ICRec."Receiving Company IC Account";
      ICEntryRec."Account Type" := ICEntryRec."Account Type"::"G/L Account";
      ICEntryRec."Bal. Account No." := PurchLine."No.";
      ICEntryRec.Description := PurchLine.Description;
      ICEntryRec."Description 2" := PurchLine."Description 2";  //**4PS01.n
      ICEntryRec."Project No." := PurchLine."Job No.";
      ICEntryRec.Element := PurchLine.Element;
      ICEntryRec."Extension Contract" := PurchLine."Extension Contract";
      ICEntryRec."Service Order No." := PurchLine."Service Order No.";
      ICEntryRec."Service Contract No." := PurchLine."Service Contract No.";
      ICEntryRec."Service Location No." := PurchLine."Service Location No.";
      ICEntryRec."Additional Cost (Service)" := PurchLine."Additional Cost (Service)";
      ICEntryRec."Item No." := PurchLine."Item No.";
      ICEntryRec."Basic Item" := PurchLine."Basic Item";
      ICEntryRec."Trade Item" := PurchLine."Trade Item";
      ICEntryRec.Manufacturer := PurchLine.Manufacturer;
      ICEntryRec."Vendor (Trade Item)" := PurchLine."Vendor (Trade Item)";
      ICEntryRec."Cost Object" := PurchLine."Shortcut Dimension 2 Code";
      ICEntryRec."Global Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      ICEntryRec."Dimension Set ID" := PurchLine."Dimension Set ID";  //**4PS DP00387 sn
      ICEntryRec.Quantity := PurchLine.Quantity;
      ICEntryRec."Unit of Measure Code" := PurchLine."Unit of Measure Code";
      IF PurchLine.Quantity = 0 THEN
        ICEntryRec.Price := PurchLine.Amount
      ELSE
        ICEntryRec.Price := PurchLine.Amount / PurchLine.Quantity;
      ICEntryRec.Amount := PurchLine.Amount;
      ICEntryRec."Document No." := PurchLine."Document No.";
      ICEntryRec."Vendor No." := PurchLine."Buy-from Vendor No.";
      ICEntryRec."Posting Date" := PurchLine."Posting Date";
      ICEntryRec."Interest Date" := PurchHeader."Interest Date";
      IF PurchLine."Plant Type" <> '' THEN
        PurchLine.TESTFIELD("Cost Component Plant");
      ICEntryRec."Plant Type" := PurchLine."Plant Type";
      ICEntryRec."Plant No." := PurchLine."Plant No.";
      ICEntryRec."Cost Component Plant" := PurchLine."Cost Component Plant";
      ICEntryRec."Cost Component" := PurchLine."Cost Component";
      ICEntryRec."Posting Group" := PurchLine."Posting Group";
      ICEntryRec."Employee No." := PurchLine."Employee No.";

      ICEntryRec.TESTFIELD("Account No.");
      ICEntryRec.TESTFIELD("Bal. Account No.");
      IF ICEntryRec."Project No." <> '' THEN
        ICEntryRec.TESTFIELD("Cost Object");

      ICEntryRec.CheckProjStatusReceivingComp();
      ICEntryRec.CheckProjElemBlockedRecComp(); //Call 6564

      IF ICEntryRec."Global Dimension 1 Code" <> '' THEN
        ICEntryRec.CheckGlobalDimAllowed(1, ICEntryRec."Global Dimension 1 Code");
      IF ICEntryRec."Cost Object" <> '' THEN
        ICEntryRec.CheckGlobalDimAllowed(2, ICEntryRec."Cost Object");

      ICEntryRec.INSERT(TRUE);
    END;

    PROCEDURE UpdateReceiptBalance@5817(lPurchLine@11012000 : Record 39);
    BEGIN
      //**4PS
      IF lPurchLine."Receipt No." = '' THEN
        EXIT;

      PurchRcptHeader.GET(lPurchLine."Receipt No.");
      PurchRcptHeader.CALCFIELDS(Received, Invoiced);
      PurchRcptHeader."Received Not Invoiced" := PurchRcptHeader.Received - PurchRcptHeader.Invoiced;
      PurchRcptHeader.MODIFY;
    END;

    LOCAL PROCEDURE PostSurchargeForExternalIndirectHours@1100528400();
    VAR
      JobsSetup@1100528401 : Record 315;
      Employee@1100528402 : Record 5200;
      Origin@1100528400 : 'Project,Service,Indirect';
    BEGIN
      //**4PS
      IF PurchLine."Employee No." = '' THEN
        EXIT;
      IF PurchLine."Document Type" <> PurchLine."Document Type"::Invoice THEN
        EXIT;
      IF PurchLine."Receiving Company" <> '' THEN
        EXIT;
      IF PurchLine."Job No." <> '' THEN
        EXIT;
      IF PurchLine."Service Order No." <> '' THEN
        EXIT;
      IF PurchLine."Wage Component" = '' THEN
        EXIT;
      IF NOT JobsSetup.GET THEN
        EXIT;
      IF JobsSetup."Charge Costs Extern. Employees" <> JobsSetup."Charge Costs Extern. Employees"::"Posting Invoices" THEN
        EXIT;
      IF NOT Employee.GET(PurchLine."Employee No.") THEN
        EXIT;
      IF NOT Employee.External THEN
        EXIT;

      FillGenJnlLineForExternalIndirectHours;
      PostSurcharge(Origin::Indirect);
    END;

    LOCAL PROCEDURE FillGenJnlLineForExternalIndirectHours@1100528401();
    VAR
      PurchRcptLine@1100528400 : Record 121;
      PurchaseLine@1100528401 : Record 39;
    BEGIN
      //**4PS
      GenJnlLine.INIT;
      GenJnlLine."Employee No." := PurchLine."Employee No.";
      GenJnlLine."Document No." := PurchLine."Document No.";
      GenJnlLine."Source Code" := SrcCode;
      GenJnlLine."Reason Code" := PurchLine."Reason Code";
      GenJnlLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      GenJnlLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
      GenJnlLine."Dimension Set ID" := PurchLine."Dimension Set ID";
      GenJnlLine."Wage Component" := PurchLine."Wage Component";
      GenJnlLine."Cost Component" := PurchLine."Cost Component";
      GenJnlLine."System-Created Entry" := TRUE;
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine."Posting Date" := PurchHeader."Posting Date";
      GenJnlLine."Account No." := PurchLine."No.";
      GenJnlLine.Description := PurchLine.Description;
      GenJnlLine."Interest Date" := GenJnlLine."Posting Date";
      GenJnlLine.Amount := PurchLine.Amount;
      GenJnlLine.VALIDATE(Amount);
      GenJnlLine.Quantity := PurchLine.Quantity;
      IF PurchRcptLine.GET(PurchLine."Receipt No.", PurchLine."Receipt Line No.") THEN
        IF PurchaseLine.GET(
          PurchaseLine."Document Type"::Order, PurchRcptLine."Order No.", PurchRcptLine."Order Line No.")
        THEN BEGIN
          GenJnlLine."Purchase Order" := PurchaseLine."Document No.";
          GenJnlLine."Purchase Order Line No." := PurchaseLine."Line No.";
        END;
    END;

    PROCEDURE PostSurcharge@1210190008(Origin@1210190002 : 'Project,Service,Indirect');
    VAR
      PostingMgt@1100525000 : Codeunit 11012360;
    BEGIN
      //**4PS
      PostingMgt.SetPostingFromPurchLine(PurchLine,PurchHeader,GenJnlLine);
      PostingMgt.BufferSurcharges(
        Origin,GenJnlLine,JobJnlLine,ServJnlLine,JobJnlPostLine,ServJnlPostLine,SurchargePostingBuffer,ComplWIPPostingBuffer);
    END;

    PROCEDURE PostService@1210190000(PurchRcptLine@1100525000 : Record 121);
    VAR
      lvWageCompRec@1100528600 : Record 11012014;
    BEGIN
      //**4PS
      ServJnlLine.INIT;
      ServJnlLine."Service Contract No." := PurchLine."Service Contract No.";
      ServJnlLine."Service Order No." := PurchLine."Service Order No.";
      ServJnlLine."Service Location No." := PurchLine."Service Location No.";
      IF PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo" THEN
        ServJnlLine."Document Type" := ServJnlLine."Document Type"::"Purchase Credit Memo"
      ELSE
        ServJnlLine."Document Type" := ServJnlLine."Document Type"::"Purchase Invoice";
      ServJnlLine."Document No." := GenJnlLineDocNo;
      ServJnlLine."Document Line No." := PurchLine."Line No.";
      ServJnlLine."G/L Account" := PurchLine."No.";
      ServJnlLine."Posting Date" := PurchHeader."Posting Date";
      ServJnlLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      ServJnlLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
      ServJnlLine."Dimension Set ID" := PurchLine."Dimension Set ID";
      ServJnlLine.Description := PurchLine.Description;
      ServJnlLine."Description 2" := PurchLine."Description 2";
      ServJnlLine.Quantity := PurchLine."Qty. to Invoice";
      ServJnlLine."Unit of Measure Code" := PurchLine."Unit of Measure Code";
      ServJnlLine."Currency Code" := PurchLine."Currency Code";
      ServJnlLine."Total Cost (LCY)" := InvPostingBuffer[1].Amount;
      ServJnlLine."Total Cost" := InvPostingBuffer[1]."Amount (ACY)";
      ServJnlLine."Entry Type" := ServJnlLine."Entry Type"::Usage;
      IF NOT PurchHeader."Amounts only" THEN BEGIN
        ServJnlLine."Unit Cost (LCY)" := ServJnlLine."Total Cost (LCY)" / ServJnlLine.Quantity;
        ServJnlLine."Unit Cost" := ServJnlLine."Total Cost" / ServJnlLine.Quantity;
      END ELSE BEGIN
        ServJnlLine."Unit Cost (LCY)" := ServJnlLine."Total Cost (LCY)";
        ServJnlLine."Unit Cost" := ServJnlLine."Total Cost";
      END;
      ServJnlLine."Reason Code" := PurchHeader."Reason Code";
      ServJnlLine."Source Code" := SrcCode;
      ServJnlLine."Item No." := PurchLine."Item No.";
      ServJnlLine."Basic Item" := PurchLine."Basic Item";
      ServJnlLine."Trade Item" := PurchLine."Trade Item";
      ServJnlLine."Vendor (Trade Item)" := PurchLine."Vendor (Trade Item)";
      ServJnlLine.Manufacturer := PurchLine.Manufacturer;
      ServJnlLine."Project No." := PurchLine."Job No.";
      ServJnlLine."Vendor No." := PurchLine."Buy-from Vendor No.";
      ServJnlLine."Additional Cost" := PurchLine."Additional Cost (Service)";
      ServJnlLine."Employee No." := PurchLine."Employee No.";
      ServJnlLine."Wage Component" := PurchLine."Wage Component";
      ServJnlLine."Cost Component" := PurchLine."Cost Component";
      ServJnlLine."Removal Contribution" := PurchLine."Removal Contribution";
      ServJnlLine."Sales Price Purch. Order" := PurchLine."Sales Price";
      IF (PurchLine."Receipt No." <> '') THEN
        ServJnlLine."Execution Date" := PurchRcptLine."Posting Date";
      IF ServJnlLine."Execution Date" = 0D THEN
        ServJnlLine."Execution Date" := ServJnlLine."Posting Date";
      ServJnlLine."Country/Region of Origin/Dest." := PurchHeader."Country of Destination";
      ServJnlLine."Tariff No." := PurchLine."Tariff No.";
      ServJnlLine."Net Weight" := PurchLine."Net Weight";
      ServJnlLine."Country/Region Code" := PurchHeader."VAT Country/Region Code";
      ServJnlLine."Transaction Type" := PurchLine."Transaction Type";
      ServJnlLine."Transport Method" := PurchLine."Transport Method";
      ServJnlLine."Entry/Exit Point" := PurchLine."Entry Point";
      ServJnlLine.Area := PurchLine.Area;
      ServJnlLine."Cost Plus Entry Created" := PurchLine."Cost Plus Entry Created";
      ServJnlLine.Text := PurchLine.Text;
      ServJnlLine."Qty. per Unit of Measure" := PurchLine."Qty. per Unit of Measure";

      IF (PurchLine."Cost Type" = PurchLine."Cost Type"::Labor) AND
         (PurchLine."Wage Component" <> '') THEN
        IF lvWageCompRec.GET(PurchLine."Wage Component") THEN
          IF lvWageCompRec."Component Type" = lvWageCompRec."Component Type"::Expenses THEN
            ServJnlLine.Quantity := 0;

      ServJnlPostLine.RunWithCheck(ServJnlLine);
      ServLedgEntryNo := ServJnlPostLine.GetServLedgEntryNo;
      ServJnlLine."Sales Price Purch. Order" := 0;
    END;

    PROCEDURE CheckGeneratePlantNoOnReceipt@1100485006(IPurchLineRec@1100485000 : Record 39;VAR OExplodeCounter@1100485001 : Integer) : Boolean;
    VAR
      lvPlantSetupRec@1100485004 : Record 11012550;
      lvPlantTypeRec@1100485002 : Record 11012551;
      lvTypeNo@1100485003 : Integer;
    BEGIN
      //**4PS
      OExplodeCounter := 1;
      WITH IPurchLineRec DO BEGIN
        IF PurchHeader."Hours Hire Order Type" = PurchHeader."Hours Hire Order Type"::Plant THEN
          EXIT(FALSE);
        IF NOT (("Plant Type" <> '') AND ("Plant No." = '') AND ("Cost Component Plant" <> '')) THEN
          EXIT(FALSE);

        lvTypeNo :=  CheckPlantAcquisitionOrRent(IPurchLineRec);
        IF (lvTypeNo = 0) THEN
          EXIT(FALSE);

        TESTFIELD("Receiving Company",''); //* Test needed otherwise error in functions for posting plant no./FA
        lvPlantTypeRec.GET("Plant Type");  //* Change company not needed because "Receiving Company" is empty (see test above).
        IF (lvPlantTypeRec.Bulk) THEN BEGIN
          lvPlantSetupRec.GET;
          IF NOT ((lvTypeNo = 2) AND (NOT lvPlantTypeRec.External) AND lvPlantSetupRec."Ext Bulk Plant with No. in Inv") THEN
            lvPlantTypeRec.TESTFIELD(External, (lvTypeNo=2))
        END ELSE BEGIN
          IF ("Qty. to Receive (Base)" > 0) THEN BEGIN
            TESTFIELD("Qty. to Receive (Base)", ROUND("Qty. to Receive (Base)", 1));
            OExplodeCounter := ROUND("Qty. to Receive (Base)", 1);
          END;
        END;

        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE SetRelPurchHeader@6085576(NewRelPurchHeader@1160040000 : Record 38);
    BEGIN
      //<DC>
      RelPurchHeader := NewRelPurchHeader;
      //</DC>
    END;

    PROCEDURE GeneratePlantNoOnReceipt@1100485000(VAR PurchLineRec@1100485002 : Record 39;IRcptDocNo@1100485004 : Code[20];IRcptLineNo@1100485005 : Integer) : Code[20];
    VAR
      lvPlantSetupRec@1100485007 : Record 11012550;
      lvPlantTypeRec@1100485006 : Record 11012551;
      lvPlantNoRec@1100485000 : Record 11012552;
      lvPurchOrderRentalRateRec@1100485011 : Record 11020513;
      lvRentalRateRec@1100485012 : Record 11012567;
      lvPlantPurchPriceRec@1100485013 : Record 11012597;
      lvPlantPurchDiscRec@1100485014 : Record 11012598;
    BEGIN
      //**4PS
      WITH PurchLineRec DO BEGIN
        lvPlantSetupRec.GET;
        lvPlantTypeRec.GET("Plant Type");

        lvPlantNoRec.INIT;
        lvPlantNoRec."Plant Type" := "Plant Type";
        lvPlantNoRec."No." := '';
        lvPlantNoRec.INSERT(TRUE);

        lvPlantNoRec.Description := COPYSTR(Description, 1, MAXSTRLEN(lvPlantNoRec.Description));
        IF NOT lvPlantTypeRec.Bulk THEN
          lvPlantNoRec.Quantity := 1
        ELSE
          lvPlantNoRec.Quantity := "Qty. to Receive (Base)";
        IF ("Shortcut Dimension 1 Code" <> '') THEN
          lvPlantNoRec.VALIDATE("Department Code", "Shortcut Dimension 1 Code")
        ELSE
          lvPlantNoRec.VALIDATE("Department Code", lvPlantTypeRec."Department Code");
        lvPlantNoRec."Exploded on No." := '';
        lvPlantNoRec.External := (CheckPlantAcquisitionOrRent(PurchLineRec) = 2);
        lvPlantNoRec."Fixed Asset" := '';
        lvPlantNoRec."Purchase Order No." := "Document No.";
        FillPlantNoFieldsCommon(PurchLineRec, lvPlantNoRec, lvPlantSetupRec);
        lvPlantNoRec.MODIFY;

        IF lvPlantNoRec.External AND lvPlantSetupRec."Save Rent Price on Receipt" THEN BEGIN
          lvPlantPurchPriceRec.INIT;
          lvPlantPurchPriceRec."Price Type" := lvPlantPurchPriceRec."Price Type"::Rent;
          lvPlantPurchPriceRec."Plant Type" := lvPlantNoRec."Plant Type";
          lvPlantPurchPriceRec."Plant No." := lvPlantNoRec."No.";
          lvPlantPurchPriceRec."Vendor No." := lvPlantNoRec.Vendor;
          lvPlantPurchPriceRec."Starting Date" := lvPlantNoRec."Receipt Date";
          lvPlantPurchPriceRec."Currency Code" := '';
          lvPlantPurchPriceRec."Unit of Measure Code" := PurchLineRec."Unit of Measure Code";
          lvPlantPurchPriceRec."Minimum Quantity" := 0;
          lvPlantPurchPriceRec."Ending Date" := 0D;
          lvPlantPurchPriceRec."Direct Unit Cost" := PurchLineRec."Direct Unit Cost";
          lvPlantPurchPriceRec.INSERT;

          IF PurchLineRec."Line Discount %" <> 0 THEN BEGIN
            lvPlantPurchDiscRec.INIT;
            lvPlantPurchDiscRec."Price Type" := lvPlantPurchDiscRec."Price Type"::Rent;
            lvPlantPurchDiscRec."Plant Type" := lvPlantNoRec."Plant Type";
            lvPlantPurchDiscRec."Plant No." := lvPlantNoRec."No.";
            lvPlantPurchDiscRec."Vendor No." := lvPlantNoRec.Vendor;
            lvPlantPurchDiscRec."Starting Date" := lvPlantNoRec."Receipt Date";
            lvPlantPurchDiscRec."Currency Code" := '';
            lvPlantPurchDiscRec."Unit of Measure Code" := PurchLineRec."Unit of Measure Code";
            lvPlantPurchDiscRec."Minimum Quantity" := 0;
            lvPlantPurchDiscRec."Ending Date" := 0D;
            lvPlantPurchDiscRec."Line Discount %" := PurchLineRec."Line Discount %";
            lvPlantPurchDiscRec.INSERT;
          END;
        END;

        IF PurchLineRec.CheckPlantNoRentalRatesAllowed(PurchLineRec) THEN BEGIN
          IF lvPurchOrderRentalRateRec.GET(PurchLineRec."Document No.", PurchLineRec."Line No.") THEN BEGIN
            IF (lvPurchOrderRentalRateRec."Rental Rate (Days)" <> 0) OR
               (lvPurchOrderRentalRateRec."Rental Rate External (Days)" <> 0)
            THEN BEGIN
              lvPurchOrderRentalRateRec.CheckFillRentalRate();
              lvRentalRateRec.INIT;
              lvRentalRateRec."Rental Type" := lvRentalRateRec."Rental Type"::Rental;
              lvRentalRateRec."Plant Type" := lvPlantNoRec."Plant Type";
              lvRentalRateRec."Plant No." := lvPlantNoRec."No.";
              lvRentalRateRec."Starting Date" := 0D;
              lvRentalRateRec."Rental Rate (Days)" := lvPurchOrderRentalRateRec."Rental Rate (Days)";
              lvRentalRateRec."Rental Rate External (Days)" := lvPurchOrderRentalRateRec."Rental Rate External (Days)";
              lvRentalRateRec.INSERT;
            END;
          END;
        END;

        PostPlantNoOnReceipt(PurchLineRec, lvPlantNoRec, lvPlantSetupRec, lvPlantTypeRec, IRcptDocNo, IRcptLineNo, FALSE);

      END;

      EXIT(lvPlantNoRec."No.");
    END;

    PROCEDURE CheckPostPlantNoOnReceipt@1100525009(VAR PurchLineRec@1100485000 : Record 39;IRcptDocNo@1100525004 : Code[20];IRcptLineNo@1100525003 : Integer);
    VAR
      lvPlantSetupRec@1100485004 : Record 11012550;
      lvPlantTypeRec@1100485002 : Record 11012551;
      lvPlantNoRec@1100485003 : Record 11012552;
    BEGIN
      //**4PS
      //** For unique plant numbers that are create on the Purchase Order with the function 'Create Unique Plant Numbers',
      //** via codeunit 11012243.
      WITH PurchLineRec DO BEGIN
        IF PurchHeader."Hours Hire Order Type" = PurchHeader."Hours Hire Order Type"::Plant THEN
          EXIT;
        IF ("Plant Type" = '') OR ("Plant No." = '') OR ("Cost Component Plant" = '') OR ("Receiving Company" <> '') THEN
          EXIT;
        IF NOT lvPlantTypeRec.GET("Plant Type") THEN
          EXIT;
        IF lvPlantTypeRec.Bulk THEN
          EXIT;
        IF NOT lvPlantNoRec.GET("Plant Type", "Plant No.") THEN
          EXIT;
        IF lvPlantNoRec.Posted OR lvPlantNoRec.External OR (lvPlantNoRec."Purchase Order No." <> "Document No.") THEN
          EXIT;
        IF CheckPlantAcquisitionOrRent(PurchLineRec) <> 1 THEN
          EXIT;

        lvPlantSetupRec.GET;
        lvPlantNoRec.Quantity := 1;
        FillPlantNoFieldsCommon(PurchLineRec, lvPlantNoRec, lvPlantSetupRec);
        lvPlantNoRec.MODIFY;

        PostPlantNoOnReceipt(PurchLineRec, lvPlantNoRec, lvPlantSetupRec, lvPlantTypeRec, IRcptDocNo, IRcptLineNo, TRUE);
      END;
    END;

    PROCEDURE GetCloseExtRentPlantOnReceipt@1210190003(VAR PurchLineRec@1210190000 : Record 39) : Boolean;
    BEGIN
      //**4PS
      WITH PurchLineRec DO BEGIN
        IF NOT PurchSetup."Close Pl.Ext.Rent Ord. on Rcpt" THEN
          EXIT(FALSE);
        IF PurchHeader."Hours Hire Order Type" = PurchHeader."Hours Hire Order Type"::Plant THEN
          EXIT(FALSE);
        IF ("Plant Type" = '') OR ("Plant No." = '') OR ("Cost Component Plant" = '') THEN
          EXIT(FALSE);

        IF CheckPlantAcquisitionOrRent(PurchLineRec) = 2 THEN
          EXIT(TRUE)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FillPlantNoFieldsCommon@1100525010(VAR PurchLineRec@1100525000 : Record 39;VAR PlantNoRec@1100525001 : Record 11012552;PlantSetupRec@1100525002 : Record 11012550);
    VAR
      PlantLocRec@1100525003 : Record 11012554;
      PlantOrderRec@1100525004 : Record 11012556;
    BEGIN
      //**4PS
      WITH PurchLineRec DO BEGIN
        PlantNoRec.Vendor := "Buy-from Vendor No.";
        IF ("Posting Date" <> 0D) THEN
          PlantNoRec."Receipt Date" := "Posting Date"
        ELSE BEGIN
          IF (PurchHeader."Posting Date" <> 0D) THEN
            PlantNoRec."Receipt Date" := PurchHeader."Posting Date"
          ELSE
            PlantNoRec."Receipt Date" := WORKDATE;
        END;
        IF PlantNoRec."Ship To Location" = '' THEN
          PlantNoRec."Ship To Location" := PlantSetupRec.GetShipToLocation;
        IF (PurchHeader.Deliver = PurchHeader.Deliver::"Plant Location") AND (PurchHeader."Ship To Location" <> '') THEN BEGIN
          IF PlantLocRec.GET(PurchHeader."Ship To Location") THEN BEGIN
            PlantNoRec."Ship To Location" := PurchHeader."Ship To Location";
          END;
        END;
        IF PlantSetupRec."Extended Picking Procedure" AND ("Plant Order No." <> '') AND
           ("Direct Delivery Plant" OR PlantNoRec.External)
        THEN BEGIN
          IF PlantOrderRec.GET("Plant Order No.") THEN BEGIN
            IF (PlantOrderRec."From Location" <> '') THEN
              PlantNoRec."Ship To Location" := PlantOrderRec."From Location";
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE PostPlantNoOnReceipt@1100525011(VAR PurchLineRec@1100525002 : Record 39;VAR PlantNoRec@1100525001 : Record 11012552;PlantSetupRec@1100525000 : Record 11012550;PlantTypeRec@1100525008 : Record 11012551;RcptDocNo@1100525004 : Code[20];RcptLineNo@1100525003 : Integer;FillFAOnPurchLine@1100525009 : Boolean);
    VAR
      lvPurchLineRec2@1100525010 : Record 39;
      PostPlantNoCU@1100525006 : Codeunit 11012550;
      ExtendedPlantOrderFuncCU@1100525005 : Codeunit 11020503;
      lvText000@1100525007 : TextConst 'ENU=Plant Receipt of Purchase Order Line %1-%2 can (or may) not be updated automatically in Plant Order %3, Plant No. %4-%5.';
    BEGIN
      //**4PS
      WITH PurchLineRec DO BEGIN
        PostPlantNoCU.SetReceiptMode(RcptDocNo, RcptLineNo, "Expected Enddate Rent");
        PostPlantNoCU.RUN(PlantNoRec);
        IF (Type = Type::"Fixed Asset") AND (PlantNoRec."Fixed Asset" = '') AND
           (NOT PlantNoRec.External) AND (PlantTypeRec."Rental Type" = PlantTypeRec."Rental Type"::Rental) AND
           PlantTypeRec."Integration Fixed Assets"
        THEN BEGIN
          PlantNoRec.CreateFA(TRUE, "Shortcut Dimension 1 Code");
          PlantNoRec.FIND;
          PurchLineRec."No." := PlantNoRec."Fixed Asset";
          IF FillFAOnPurchLine THEN BEGIN
            lvPurchLineRec2 := PurchLineRec;
            lvPurchLineRec2.FIND;
            lvPurchLineRec2."No." := PlantNoRec."Fixed Asset";
            lvPurchLineRec2.MODIFY;
          END
        END;

        IF PlantSetupRec."Extended Picking Procedure" AND ("Plant Order No." <> '') THEN BEGIN
          IF ReceiptForPlantOrders = '' THEN
            ReceiptForPlantOrders := "Plant Order No."
          ELSE BEGIN
            IF (STRPOS(ReceiptForPlantOrders, "Plant Order No.") = 0) AND
               ((STRLEN(ReceiptForPlantOrders) + STRLEN("Plant Order No.") + 2) <=  MAXSTRLEN(ReceiptForPlantOrders))
            THEN
              ReceiptForPlantOrders := ReceiptForPlantOrders + ', ' + "Plant Order No.";
          END;
          IF NOT ExtendedPlantOrderFuncCU.RunUpdateQtyOnReceipt(
             "Document No.", "Line No.", "Plant Order No.", "Plant Order Line No.", "Plant Type", PlantNoRec."No.")
          THEN
            MESSAGE(lvText000, "Document No.", "Line No.", "Plant Order No.", "Plant Type", PlantNoRec."No.");
        END;
      END;
    END;

    PROCEDURE ItemReceiptOnPlantOrder@1100485005(IPurchLineRec@1100485001 : Record 39);
    VAR
      lvText000@1100485000 : TextConst 'ENU=Item Receipt of Purchase Order Line %1-%2 can (or may) not be updated automatically in Plant Order %3, Item No. %4.';
      lvPlantSetupRec@1100485003 : Record 11012550;
      lvExtendedPlantOrderFuncCU@1100485002 : Codeunit 11020503;
    BEGIN
      //**4PS
      //* Update quantity on plant order-item line.
      WITH IPurchLineRec DO BEGIN
        IF ("Item No." = '') OR ("Plant Type" <> '') OR ("Plant Order No." = '') OR ("Plant Order Line No." = 0) THEN
          EXIT;

        lvPlantSetupRec.GET;
        IF NOT lvPlantSetupRec."Extended Picking Procedure" THEN
          EXIT;

        IF ReceiptForPlantOrders = '' THEN
          ReceiptForPlantOrders := "Plant Order No."
        ELSE BEGIN
          IF (STRPOS(ReceiptForPlantOrders, "Plant Order No.") = 0) AND
             ((STRLEN(ReceiptForPlantOrders) + STRLEN("Plant Order No.") + 2) <=  MAXSTRLEN(ReceiptForPlantOrders))
          THEN
            ReceiptForPlantOrders := ReceiptForPlantOrders + ', ' + "Plant Order No.";
        END;
        IF NOT lvExtendedPlantOrderFuncCU.RunUpdateItemQtyOnReceipt(
           "Document No.", "Line No.", "Plant Order No.", "Plant Order Line No.",
           "Item No.", "Qty. to Receive (Base)")
        THEN
          MESSAGE(lvText000, "Document No.", "Line No.", "Plant Order No.", "Item No.");
      END;
    END;

    PROCEDURE PostPlant@1210190002();
    VAR
      PlantSetup@1210190001 : Record 11012550;
      lvPlantTypeRec@1100525000 : Record 11012551;
      PlantCostComp@1100409002 : Record 11012575;
      InsertPlantOrderMgt@1100409000 : Codeunit 11012552;
      Immediately@1100409003 : Integer;
      PlantOrderNo@1100409001 : Code[20];
    BEGIN
      //**4PS
      IF (PurchLine."Plant Type" = '') OR (PurchLine."Receiving Company" <> '') THEN
        EXIT;

      PurchLine.TESTFIELD("Cost Component Plant");

      PlantSetup.GET;
      IF PlantSetup."Integration Fixed Assets" THEN BEGIN
        lvPlantTypeRec.GET(PurchLine."Plant Type");
        IF lvPlantTypeRec."Integration Fixed Assets" THEN BEGIN
          IF (PurchLine.CheckPlantAcquisitionOrRent(PurchLine) = 1) THEN
            EXIT;
        END;
      END;

      WITH PlantLedgerEntry DO BEGIN
        INIT;
        "Document No." := GenJnlLineDocNo;
        "Posting Date" := PurchLine."Posting Date";
        "Document Date" := PurchHeader."Document Date";
        "Account No." := PurchLine."No.";
        Description := PurchLine.Description;
        "Description 2" := PurchLine."Description 2";  //**4PS01.n
        Quantity := PurchLine."Qty. to Invoice";
        "Direct Unit Cost" := PurchLine."Direct Unit Cost";
        "Unit Cost" := PurchLine."Unit Cost (LCY)";
        "Total Cost" := PurchLine."Amount (LCY)";
        IF PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo" THEN
          "Total Cost" := -"Total Cost";
        "Unit of Measure Code" := PurchLine."Unit of Measure";
        "Department Code" := PurchLine."Shortcut Dimension 1 Code";
        "Cost Object" := PurchLine."Shortcut Dimension 2 Code";
        "Dimension Set ID" := PurchLine."Dimension Set ID";
        "Source Code" := SrcCode;
        "Reason Code" := PurchHeader."Reason Code";
        //"Plant Posting Group" := PurchLine."Posting Group";  //*27818.o
        "No. Series" := PurchHeader."No. Series";
        "Plant Type" := PurchLine."Plant Type";
        "Plant No." := PurchLine."Plant No.";
        "Cost Component" := PurchLine."Cost Component Plant";
        "Vendor No." := PurchLine."Buy-from Vendor No.";
        "Country/Region Code" := PurchHeader."VAT Country/Region Code";
        //*27818.sn
        IF "Plant Type" <> '' THEN BEGIN
          IF lvPlantTypeRec.GET("Plant Type") THEN
            "Plant Posting Group" := lvPlantTypeRec.PlantPostingGrp("Plant No.", '', '');
        END;
        //*27818.en
        PostPlantEntry.RUN(PlantLedgerEntry);
      END;

      //C001519.sn
      IF (PurchLine."Cost Component Plant" <> '') THEN BEGIN
        PlantCostComp.GET(PurchLine."Cost Component Plant");
        IF PlantCostComp."Charge Purchase" THEN BEGIN
          PurchLine.TESTFIELD("Plant Location");
          PlantOrderNo := '';
          IF PlantCostComp."Immediately Post Charge Purch." THEN
            Immediately := 1;
          IF TmpPlantLocChargePO.GET(PurchLine."Plant Location", Immediately) THEN
            PlantOrderNo := TmpPlantLocChargePO."Document No.";
          InsertPlantOrderMgt.InsertPlantOrderOnChargePurch(PlantOrderNo,PurchLine."Plant Location",PlantLedgerEntry,PlantCostComp);
          IF NOT TmpPlantLocChargePO.GET(PurchLine."Plant Location", Immediately) THEN BEGIN
            TmpPlantLocChargePO.INIT;
            TmpPlantLocChargePO.Location := PurchLine."Plant Location";
            TmpPlantLocChargePO."Line No." := Immediately;
              // Field used for 'Immediately Posting' of the created Plant Order(s)
            TmpPlantLocChargePO."Delete Remainder" := PlantSetup."Extended Picking Procedure";
              //Field used for 'Release Plant Order' needed
            TmpPlantLocChargePO."Document No." := PlantOrderNo;  // Doc.No is used for Plant Order No.
            TmpPlantLocChargePO.INSERT;
          END;
        END;
      END;
      //C001519.en
    END;

    PROCEDURE PostPlantOrderChargePurch@1100409001();
    VAR
      PlantOrder@1100409001 : Record 11012556;
      ExtentedPlantOrdeFunc@1100409000 : Codeunit 11020503;
      PostPlantOrder@1100409002 : Codeunit 11012553;
    BEGIN
      //**4PS (C001519)
      TmpPlantLocChargePO.RESET;
      TmpPlantLocChargePO.SETRANGE("Line No.", 1);
      IF TmpPlantLocChargePO.FINDSET THEN BEGIN
        REPEAT
          PlantOrder.GET(TmpPlantLocChargePO."Document No.");
          IF TmpPlantLocChargePO."Delete Remainder" THEN BEGIN
            ExtentedPlantOrdeFunc.SetChargePurchRun();
            ExtentedPlantOrdeFunc.RunReleasePlantOrder(PlantOrder);
          END;
          PostPlantOrder.SetChargePurchRun();
          PostPlantOrder.RUN(PlantOrder);
        UNTIL TmpPlantLocChargePO.NEXT = 0;
      END;
      TmpPlantLocChargePO.RESET;
      TmpPlantLocChargePO.DELETEALL;
    END;

    PROCEDURE FA_PlantIntegration@1210190001();
    VAR
      lRecPlantNumber@1210190001 : Record 11012552;
      lRecPlantSetup@1210190000 : Record 11012550;
      lRecFixedAsset@1210190002 : Record 5600;
      lCduPostPlantNumber@1210190003 : Codeunit 11012550;
      lDecPlantNoQuantity@1100485000 : Decimal;
    BEGIN
      //**4PS
      // - Post (unposted) plant no. in case parameter set
      // - Update plant no. (linked by fixed asset) with purchase price

      WITH PurchLine DO BEGIN
        IF (NOT lRecPlantSetup.READPERMISSION) THEN
          EXIT;
        IF (NOT(lRecPlantSetup.GET AND lRecPlantSetup."Integration Fixed Assets")) THEN
          EXIT;
        lRecPlantNumber.SETCURRENTKEY("Fixed Asset");
        lRecPlantNumber.SETRANGE("Fixed Asset", "No.");
        IF (NOT lRecPlantNumber.FIND('-')) THEN
          EXIT;
        lRecPlantNumber.SETCURRENTKEY("Plant Type", "No.");

        // Post plant
        IF (lRecPlantSetup."Post On FA Acquisition" AND NOT lRecPlantNumber.Posted) THEN
          lCduPostPlantNumber.RUN(lRecPlantNumber)
        ELSE
          lRecPlantNumber.TESTFIELD(Posted, TRUE);

      { Old (voorlopig nog even laten staan, bij verwideren ook locals  'lRecFixedAsset' en 'lDecPlantNoQuantity' verwijderen)
        // Update purchase price
        IF ("Quantity (Base)" = 0.0) THEN
          EXIT;

        lRecPlantNumber.CALCFIELDS(Bulk);
        IF (NOT lRecPlantNumber.Bulk) THEN
          lRecPlantNumber."Purchase Price" := lRecPlantNumber."Purchase Price" + PurchLine."Unit Cost (LCY)"
        ELSE BEGIN
          // Determine quantity to weigh current purchase price
          lRecFixedAsset.GET(lRecPlantNumber."Fixed Asset");
          lDecPlantNoQuantity := lRecFixedAsset.GetQuantity('', TRUE);

          // Calculate new purchase price as average price per unit
          lRecPlantNumber."Purchase Price" :=
            ((lRecPlantNumber."Purchase Price" * lDecPlantNoQuantity) + (PurchLine."Unit Cost (LCY)" * Quantity)) /
             (lDecPlantNoQuantity + "Quantity (Base)");
        END;
        lRecPlantNumber.MODIFY;
      }
      END;
    END;

    PROCEDURE UpdatePlantNoPurchPrice@1100485001();
    VAR
      lvPlantNoRec@1100485000 : Record 11012552;
    BEGIN
      //**4PS
      IF (PurchLine."Plant Type" = '') OR (PurchLine."Plant No." = '') OR (PurchLine."Cost Component Plant" = '') THEN
        EXIT;
      IF (PurchLine.CheckPlantAcquisitionOrRent(PurchLine) <> 1) THEN
        EXIT;
      IF NOT lvPlantNoRec.GET(PurchLine."Plant Type", PurchLine."Plant No.") THEN
        EXIT;

      IF (lvPlantNoRec."Purchase Price" = 0) THEN BEGIN
        lvPlantNoRec."Purchase Price" := PurchLine."Unit Cost (LCY)";
        lvPlantNoRec.MODIFY;
      END;
    END;

    PROCEDURE CheckCloseHeader@1210190004(iPurchLine@1210190000 : Record 39);
    VAR
      lPurchHeader@1210190001 : Record 38;
      lCloseOrder@1210190002 : Boolean;
      ReleasePurchDoc@1210190003 : Codeunit 415;
    BEGIN
      //**4PS01.n
      lPurchHeader.GET(iPurchLine."Document Type",iPurchLine."Document No.");
      IF lPurchHeader.Status = lPurchHeader.Status::Closed THEN
        EXIT;
      IF lPurchHeader."Document Type" <> lPurchHeader."Document Type"::Order THEN
        EXIT;

      IF (NOT lPurchHeader."Amounts only") THEN BEGIN
        IF (iPurchLine.Quantity <> iPurchLine."Quantity Invoiced") THEN BEGIN
          IF NOT CheckPlantExtRentOrdLineClosed(iPurchLine, lPurchHeader) THEN
            EXIT;
        END;
      END ELSE BEGIN
        IF (iPurchLine.Amount <> iPurchLine."Amnt. Invoiced") THEN
          EXIT;
      END;

       //**4PS DP00558 sn
      IF lPurchHeader."Tolerate Exceeding Invoice Qu." THEN
        EXIT;
      //**4PS DP00558 en

      iPurchLine.RESET;
      iPurchLine.SETRANGE("Document Type", lPurchHeader."Document Type");
      iPurchLine.SETRANGE("Document No.", lPurchHeader."No.");
      lCloseOrder := TRUE;
      IF iPurchLine.FINDSET THEN
        REPEAT
          IF (NOT lPurchHeader."Amounts only") THEN BEGIN
            IF (iPurchLine."Quantity Received" <> iPurchLine."Quantity Invoiced") OR
               (iPurchLine.Quantity <> iPurchLine."Quantity Invoiced")
            THEN BEGIN
              IF NOT CheckPlantExtRentOrdLineClosed(iPurchLine, lPurchHeader) THEN BEGIN
                lCloseOrder := FALSE;
                EXIT;
              END;
            END;
          END ELSE BEGIN
            IF iPurchLine.Amount <> iPurchLine."Amnt. Invoiced" THEN BEGIN
              lCloseOrder := FALSE;
              EXIT;
            END;
          END;
        UNTIL iPurchLine.NEXT = 0;

      IF lCloseOrder THEN
        ReleasePurchDoc.Close(lPurchHeader);
    END;

    PROCEDURE CheckPlantExtRentOrdLineClosed@1100525007(iPurchLine@1100525000 : Record 39;iPurchHeader@1210190000 : Record 38) : Boolean;
    BEGIN
      //**4PS
      IF iPurchHeader."Hours Hire Order Type" = iPurchHeader."Hours Hire Order Type"::Plant THEN
        EXIT(FALSE);

      IF NOT PurchSetup."Close Pl.Ext.Rent Ord. on Rcpt" THEN
        EXIT(FALSE);

      IF (iPurchLine."Quantity Received" = iPurchLine.Quantity) AND
         (iPurchLine."Plant Type" <> '') AND (iPurchLine."Cost Component Plant" <>'')
      THEN BEGIN
        IF (iPurchLine.CheckPlantAcquisitionOrRent(iPurchLine) = 2) THEN  //* 2 = External Rent (plant)
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE UndoProjectInventory@1100525003(PurchRcptLine@1100525000 : Record 121);
    BEGIN
      //* Post project inventory on undo posted receipt (called from CU5813).

      //* Read/fill all globals needed for the function 'PostProjInventory'.
      InventSetupRec.GET;
      PurchRcptHeader.GET(PurchRcptLine."Document No.");
      PurchRcptHeader."Document Date" := TODAY;
      IF NOT PurchHeader.GET(PurchHeader."Document Type"::Order, PurchRcptLine."Order No.") THEN
        PurchHeader.INIT;
      IF NOT PurchLine.GET(PurchLine."Document Type"::Order, PurchRcptLine."Order No.", PurchRcptLine."Order Line No.") THEN
        PurchLine.INIT;

      PostProjInventory(PurchRcptLine);
    END;

    PROCEDURE PostProjInventory@1210190006(PurchRcptLine@1100525000 : Record 121);
    VAR
      lvProjInventEntry@1210190000 : Record 11012670;
      lvItemRec@1210190001 : Record 27;
      lvBasicItemRec@1210190003 : Record 11012316;
      lvTradeItemRec@1210190004 : Record 11012317;
      PurchaseLineDetail@1100529000 : Record 11020660;
    BEGIN
      //**4PS
      IF (PurchHeader.Deliver = PurchHeader.Deliver::"Project Location") OR
         (PurchHeader.Deliver = PurchHeader.Deliver::"Service Location") THEN
        EXIT;
      IF PurchLine."No Project Stock" THEN  //C021402.n
        EXIT;

      WITH PurchRcptLine DO BEGIN
        IF ("Job No." = '') OR ("Location Code" = '') OR (Quantity = 0) OR ("Cost Type" <> "Cost Type"::Material) OR
           (("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') AND (Description = ''))
        THEN
          EXIT;
        IF NOT InventSetupRec.JobInventoryByLocationShelf("Job No.") THEN
          EXIT;
      END;

      WITH lvProjInventEntry DO BEGIN
        INIT;
        "Document Date" := PurchRcptHeader."Document Date";
        "Document No." := PurchRcptLine."Document No.";
        "Posting Date" := PurchRcptHeader."Posting Date";
        "Project No." := PurchRcptLine."Job No.";
        "Item No." := PurchRcptLine."Item No.";
        IF ("Item No." <> '') THEN BEGIN
          lvItemRec.GET("Item No.");
          lvItemRec.TESTFIELD("Base Unit of Measure");
          "Unit of Measure Code" := lvItemRec."Base Unit of Measure";
          //kzwerver.sn, #C015332
          Manufacturer := PurchRcptLine.Manufacturer;
          "Basic Item" := PurchRcptLine."Basic Item";
          "Vendor (Trade Item)" := PurchRcptLine."Vendor (Trade Item)";
          "Trade Item" := PurchRcptLine."Trade Item";
          //kzwerver.en, #C015332
        END ELSE BEGIN
          Manufacturer := PurchRcptLine.Manufacturer;
          "Basic Item" := PurchRcptLine."Basic Item";
          "Vendor (Trade Item)" := PurchRcptLine."Vendor (Trade Item)";
          "Trade Item" := PurchRcptLine."Trade Item";
          "Unit of Measure Code" := PurchRcptLine."Unit of Measure Code";
          IF "Trade Item" <> '' THEN BEGIN
            IF lvTradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN
              "Unit of Measure Code" := lvTradeItemRec."Application Unit";
            lvTradeItemRec.TESTFIELD("Application Unit");
          END ELSE BEGIN
            IF "Basic Item" <> '' THEN BEGIN
              IF lvBasicItemRec.GET(Manufacturer, "Basic Item") THEN
                "Unit of Measure Code" := lvBasicItemRec."Application Unit";
              lvBasicItemRec.TESTFIELD("Application Unit");
            END ELSE BEGIN
              PurchRcptLine.TESTFIELD("Unit of Measure Code");
              "Unit of Measure Code" := PurchRcptLine."Unit of Measure Code";
            END;
          END;
        END;
        Description := PurchRcptLine.Description;
        "Description 2" := PurchRcptLine."Description 2";
        "Location Code" := PurchRcptLine."Location Code";
        "Bin Code" := PurchRcptLine."Bin Code";  //db, 02-11-10
        "Shelf No." := PurchRcptLine."Shelf No.";  //db, 29-08-05
        Quantity := PurchRcptLine."Quantity (Base)";
        "Receipt Line No." := PurchRcptLine."Line No.";
        "Entry Type" := "Entry Type"::Receipt;
        "Yard No." := PurchRcptLine."Yard No.";
        "System No." := PurchRcptLine."System No.";
        "Entity Type" := PurchRcptLine."Entity Type";
        "Entity No." := PurchRcptLine."Entity No.";
        "Gland Position" := PurchRcptLine."Cable Transit Pos.";
        Element := PurchRcptLine.Element; //hbk, 06-05-10
        "Variant Code" := PurchRcptLine."Variant Code";  // Variant, X0.71
        "Purch. Detail No." := PurchaseLineDetail.GetDetailNoPurchOrderLine(PurchRcptLine."Order No.",PurchRcptLine."Order Line No."); //DP00749
        "Cost Object" := PurchRcptLine."Shortcut Dimension 2 Code"; //kzwerver, 110616, n, #RfC Electr. purchaseorder

        ProjInventPostLineCU.RunWithCheck(lvProjInventEntry);
      END;
    END;

    PROCEDURE InvoiceMarginCheck@1210190007() : Boolean;
    VAR
      lvGenPostSetupRec@1210190012 : Record 252;
      lvVendRec@1210190000 : Record 23;
      lvPurchLineRec@1210190004 : Record 39;
      lvProjRelated@1210190008 : Boolean;
      lvMarginAmount@1210190001 : Decimal;
      lvMarginPerc@1210190002 : Decimal;
      lvDiffAmount@1210190003 : Decimal;
      lvAmountHeader@1210190005 : Decimal;
      lvAmountLines@1210190006 : Decimal;
      lvReceivingComp@1210190015 : Code[30];
      lvShortcutDim1@1210190016 : Code[20];
      lvBusGroup@1210190013 : Code[10];
      lvProdGroup@1210190007 : Code[10];
      lvVatBusGroup@1210190010 : Code[10];
      lvVatProdGroup@1210190011 : Code[10];
      lvVatCalcType@1210190014 : Option;
      lvText11012000@1210190009 : TextConst 'ENU=Correction purchace variance';
    BEGIN
      //**4PS.n
      WITH PurchHeader DO BEGIN
        CALCFIELDS("Amount Including VAT");

        //call 27569
        lvAmountHeader := ROUND("Amount incl. VAT");
        IF "Subcontract No." <> '' THEN BEGIN
          CALCFIELDS(Amount);
          IF Amount <> 0 THEN
            lvAmountHeader := ROUND("Amount incl. VAT" - (("Amount Including VAT" / Amount) * DocumentRetentionAmount));
        END;
        //

        IF (ROUND("Amount Including VAT") = lvAmountHeader) THEN //call 27569
          EXIT(TRUE);
        lvVendRec.GET("Buy-from Vendor No.");
        lvMarginAmount := lvVendRec."Invoice/Receipt Margin Amount";
        lvMarginPerc := lvVendRec."Invoice/Receipt Margin Perc.";
        IF (lvMarginAmount = 0) AND (lvMarginPerc = 0) THEN BEGIN
          PurchSetup.GET;
          lvMarginAmount := PurchSetup."Margin Amount (Header)";
          lvMarginPerc := PurchSetup."Margin % (Header)";
        END;
        IF (lvMarginAmount = 0) AND (lvMarginPerc = 0) THEN
          EXIT(FALSE);

        lvAmountLines := "Amount Including VAT";
        lvDiffAmount := lvAmountHeader - lvAmountLines;
        IF (lvMarginAmount <> 0) AND (ABS(lvDiffAmount) > lvMarginAmount) THEN
          EXIT(FALSE);
        IF (lvMarginPerc <> 0) THEN BEGIN
          IF (lvAmountLines = 0) THEN
            EXIT(FALSE)
          ELSE BEGIN
            IF (ABS(lvDiffAmount / lvAmountLines * 100)  > lvMarginPerc) THEN
              EXIT(FALSE);
          END;
        END;

        lvPurchLineRec.RESET;
        lvPurchLineRec.SETRANGE("Document Type", "Document Type");
        lvPurchLineRec.SETRANGE("Document No.", "No.");
        lvPurchLineRec.SETFILTER(Type, '<>%1', lvPurchLineRec.Type::" ");
        IF NOT lvPurchLineRec.FINDSET THEN
          EXIT(FALSE);
        lvReceivingComp := lvPurchLineRec."Receiving Company";
        lvShortcutDim1 := lvPurchLineRec."Shortcut Dimension 1 Code";
        lvBusGroup := lvPurchLineRec."Gen. Bus. Posting Group";
        lvProdGroup := lvPurchLineRec."Gen. Prod. Posting Group";
        lvVatBusGroup := lvPurchLineRec."VAT Bus. Posting Group";
        lvVatProdGroup := lvPurchLineRec."VAT Prod. Posting Group";
        lvVatCalcType := lvPurchLineRec."VAT Calculation Type";
        lvProjRelated := (lvPurchLineRec."Job No." <> '');
        REPEAT
          IF (lvPurchLineRec."Receipt No." = '') OR (lvPurchLineRec."Receipt Line No." = 0) THEN
            EXIT(FALSE);
          IF (lvPurchLineRec."Receiving Company" <> lvReceivingComp) OR
             (lvPurchLineRec."Gen. Bus. Posting Group" <> lvBusGroup) OR
             (lvPurchLineRec."Gen. Prod. Posting Group" <> lvProdGroup) OR
             (lvPurchLineRec."VAT Bus. Posting Group" <> lvVatBusGroup) OR
             (lvPurchLineRec."VAT Prod. Posting Group" <> lvVatProdGroup) OR
             (lvPurchLineRec."VAT Calculation Type" <> lvVatCalcType)
          THEN
            EXIT(FALSE);
          IF (lvProjRelated <> (lvPurchLineRec."Job No." <> '')) THEN
            EXIT(FALSE);
          IF (lvShortcutDim1 <> '') AND (lvPurchLineRec."Shortcut Dimension 1 Code" <> lvShortcutDim1) THEN
            lvShortcutDim1 := '';
        UNTIL (lvPurchLineRec.NEXT = 0);

        IF NOT lvGenPostSetupRec.GET(lvBusGroup, lvProdGroup) THEN
          EXIT(FALSE);
        //IF ((NOT lvProjRelated) AND (lvGenPostSetupRec."Purchase Variance Account" = '')) OR
        //   ((lvProjRelated) AND (lvGenPostSetupRec."Purch. Variance Acc.(Projects)" = '')) THEN
        //  EXIT(FALSE);
        IF lvProjRelated  THEN
          lvGenPostSetupRec.TESTFIELD("Purch. Variance Acc.(Projects)")
        ELSE
          lvGenPostSetupRec.TESTFIELD("Purchase Variance Account");

        lvPurchLineRec.RESET;
        lvPurchLineRec.SETRANGE("Document Type", "Document Type");
        lvPurchLineRec.SETRANGE("Document No.", "No.");
        lvPurchLineRec.FINDLAST;  //Read last 'Line No.'
        //
        lvPurchLineRec.INIT;
        lvPurchLineRec."Document Type" := "Document Type";
        lvPurchLineRec."Document No." := "No.";
        lvPurchLineRec."Line No." := lvPurchLineRec."Line No." + 10000;
        lvPurchLineRec.VALIDATE(Type, lvPurchLineRec.Type::"G/L Account");
        lvPurchLineRec."System-Created Entry" := TRUE;
        lvPurchLineRec."Receiving Company" := lvReceivingComp;
        IF lvProjRelated THEN
          lvPurchLineRec.VALIDATE("No.", lvGenPostSetupRec."Purch. Variance Acc.(Projects)")
        ELSE
          lvPurchLineRec.VALIDATE("No.", lvGenPostSetupRec."Purchase Variance Account");
        IF (lvShortcutDim1 <> '') THEN
          lvPurchLineRec.VALIDATE("Shortcut Dimension 1 Code", lvShortcutDim1);
        lvPurchLineRec."Gen. Bus. Posting Group" := lvBusGroup;
        lvPurchLineRec."Gen. Prod. Posting Group" := lvProdGroup;
        lvPurchLineRec."VAT Bus. Posting Group" := lvVatBusGroup;
        lvPurchLineRec.VALIDATE("VAT Prod. Posting Group", lvVatProdGroup);
        lvPurchLineRec."VAT Calculation Type" := lvVatCalcType;
        lvPurchLineRec.Description := lvText11012000;
        lvPurchLineRec.VALIDATE(Quantity, 1);
        lvPurchLineRec.VALIDATE("Amount Including VAT", lvDiffAmount);
        lvPurchLineRec.VALIDATE("Line Amount", lvPurchLineRec.Amount);
        lvPurchLineRec.INSERT(TRUE);

        PurchHeader.Receive := TRUE;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckUpdateItemPrice@1210190012(PurchLine@1210190001 : Record 39);
    VAR
      lvItemRec@1210190000 : Record 27;
      lvAmnt@1100485000 : Decimal;
    BEGIN
      //**4PS
      //db, 10-08-04: call 4392 (update last purchase price for project-item)
      //db, 16-05-08: function rewritten because of call 11930; test on item relation, quantity/unit of measure
      WITH PurchLine DO BEGIN
        IF ("Item No." <> '') AND ("Trade Item" + "Basic Item" = '') THEN BEGIN
          lvItemRec.GET("Item No.");
          IF lvItemRec."Costing Method" <> lvItemRec."Costing Method"::Standard THEN BEGIN
            IF Quantity * "Qty. per Unit of Measure" <> 0 THEN BEGIN  //db, 18-07-06: call 7900
              IF "Document Type" <> "Document Type"::Invoice THEN
                lvAmnt := "Unit Cost (LCY)" / "Qty. per Unit of Measure"  //db, 16-12-08: M13599; 03-01-11: M23707
              ELSE
                lvAmnt := (Amount + "Line Discount Amount") / (Quantity * "Qty. per Unit of Measure");
              lvAmnt := ROUND(ABS(lvAmnt), GLSetup."Unit-Amount Rounding Precision");  //db, 27-06-07: call 9851 (credit memo)
              lvItemRec.VALIDATE("Last Direct Cost", lvAmnt);
              lvItemRec.MODIFY(TRUE);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CreatePurchOrderControl@1210190005(lPurchLine@1210190000 : Record 39);
    BEGIN
      //**4PS
      IF RoundingLineInserted THEN
        EXIT;

      lPurchLine.CreatePurchOrderControl(FALSE);
    END;

    PROCEDURE CheckStatusProjectAndService@1100485003() : Boolean;
    BEGIN
      //**4PS
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
        IF PurchHeader."Amounts only" THEN BEGIN
          IF PurchLine. "Amnt. to Receive" = 0 THEN
            EXIT(FALSE);
        END ELSE BEGIN
          IF PurchLine."Qty. to Receive" = 0 THEN
            EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE UpdatePlantNoExtRentDate@1100485021();
    VAR
      PlantSetup@1100525004 : Record 11012550;
      lvPlantNoRec@1100485000 : Record 11012552;
      lvRentEntryRec@1100525000 : Record 11012535;
      lvSaveDate@1100525001 : Date;
      lvStartDate@1100525002 : Date;
      lvEndDate@1100525003 : Date;
    BEGIN
      //**4PS.n
      IF (PurchLine."Receiving Company" = '') AND (PurchLine."Ext. Rented Plant Invoiced to" <> 0D) AND
         (PurchLine."Plant Type" <> '') AND (PurchLine."Plant No." <> '') AND (PurchLine."Cost Component Plant" <> '')
      THEN BEGIN
        PlantSetup.GET;
        IF PurchLine."Cost Component Plant" <> PlantSetup."Cost Component Rent" THEN
          EXIT;
        IF lvPlantNoRec.GET(PurchLine."Plant Type", PurchLine."Plant No.") THEN BEGIN
          IF lvPlantNoRec.External THEN BEGIN
            lvSaveDate := lvPlantNoRec."Ext. Rented Invoiced to";
            lvRentEntryRec.GetExtRentPeriod(lvPlantNoRec.Vendor,lvPlantNoRec."Plant Type",lvPlantNoRec."No.",lvStartDate,lvEndDate);
            //* Enddate (removal date) is only filled if the plant is completely removed (bulk can be removed in parts)
            IF PurchLine."Ext. Rented Plant Invoiced to" >= lvPlantNoRec."Ext. Rented Invoiced to" THEN BEGIN
              lvPlantNoRec."Ext. Rented Invoiced to" := PurchLine."Ext. Rented Plant Invoiced to";
              IF (lvEndDate <> 0D) AND (lvPlantNoRec."Ext. Rented Invoiced to" > lvEndDate) THEN
                lvPlantNoRec."Ext. Rented Invoiced to" := lvEndDate;
            END ELSE BEGIN
              IF (lvEndDate <> 0D) AND (lvPlantNoRec."Ext. Rented Invoiced to" > lvEndDate) THEN
                lvPlantNoRec."Ext. Rented Invoiced to" := lvEndDate;
            END;
            IF lvPlantNoRec."Ext. Rented Invoiced to" <> lvSaveDate THEN
              lvPlantNoRec.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE PostComplementaryWIPCostProj@1100485002();
    VAR
      VendPostGrpLedgerAccRec@1100485000 : Record 11020252;
      VendPostGrpRec@1100485001 : Record 93;
      VendorRec@1100485002 : Record 23;
      ProjectTypeRec@1100485003 : Record 11012009;
    BEGIN
      //**4PS
      IF JobJnlLine."Total Cost (LCY)" = 0 THEN
        EXIT;

      IF PurchLine."Pay-to Vendor No." = '' THEN
        EXIT;

      ProjRec.GET(PurchLine."Job No.");

      ProjRec.TESTFIELD("Project Type");
      ProjectTypeRec.GET(ProjRec."Project Type");
      IF NOT ProjectTypeRec."Post Complementary Costs" THEN
        EXIT;

      VendorRec.GET(PurchLine."Pay-to Vendor No.");
      VendPostGrpRec.GET(VendorRec."Vendor Posting Group");

      VendPostGrpLedgerAccRec.INIT;

      IF VendPostGrpLedgerAccRec.GET(ProjectTypeRec.Code,VendPostGrpRec.Code) THEN BEGIN
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Labor" <> '' THEN
          ProjectTypeRec."Compl. WIP Acc. Labor" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Labor";
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Material" <> '' THEN
          ProjectTypeRec."Compl. WIP Acc. Material" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Material";
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Subc." <> '' THEN
          ProjectTypeRec."Compl. WIP Acc. Subc." := VendPostGrpLedgerAccRec."Compl. WIP Acc. Subc.";
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Plant" <> '' THEN
          ProjectTypeRec."Compl. WIP Acc. Plant" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Plant";
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry" <> '' THEN
          ProjectTypeRec."Compl. WIP Acc. Sundry" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry";

        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor" <> '' THEN
          ProjectTypeRec."Compl. WIP Cover Acc. Labor" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material" <> '' THEN
          ProjectTypeRec."Compl. WIP Cover Acc. Material" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc." <> '' THEN
          ProjectTypeRec."Compl. WIP Cover Acc. Subc." := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc.";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant" <> '' THEN
          ProjectTypeRec."Compl. WIP Cover Acc. Plant" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry" <> '' THEN
          ProjectTypeRec."Compl. WIP Cover Acc. Sundry" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry";

        //**4PS.en Call C002702
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Surcharge" <> '' THEN
          ProjTypeRec."Compl. WIP Acc. Surcharge" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Surcharge";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Surch." <> '' THEN
          ProjTypeRec."Compl. WIP Cover Acc. Surch." := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Surch.";
        //**4PS.en Call C002702

      END;

      //Post Debit Line
      CLEAR(ComplWIPPostingBuffer[1]);
      CASE PurchLine."Cost Type" OF
        PurchLine."Cost Type"::Labor:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Cover Acc. Labor");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Cover Acc. Labor";
          END;
        PurchLine."Cost Type"::Material:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Cover Acc. Material");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Cover Acc. Material";
          END;
        PurchLine."Cost Type"::Subcontracting:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Cover Acc. Subc.");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Cover Acc. Subc.";
          END;
        PurchLine."Cost Type"::Plant:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Cover Acc. Plant");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Cover Acc. Plant";
          END;
        PurchLine."Cost Type"::Sundry:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Cover Acc. Sundry");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Cover Acc. Sundry";
          END
      END;
      ComplWIPPostingBuffer[1].Amount := -JobJnlLine."Total Cost (LCY)";
      ComplWIPPostingBuffer[1].Description := PurchHeader."Posting Description";
      ComplWIPPostingBuffer[1]."Job No." :=  ProjRec."No.";
      ComplWIPPostingBuffer[1]."Global Dimension 1 Code" := JobJnlLine."Shortcut Dimension 1 Code";
      ComplWIPPostingBuffer[1]."Global Dimension 2 Code" := JobJnlLine."Shortcut Dimension 2 Code";
      ComplWIPPostingBuffer[1]."Dimension Set ID" := JobJnlLine."Dimension Set ID";
      ComplWIPPostingBuffer[1]."Cost Component" := PurchLine."Cost Component"; //M22560

      UpdateComplementaryWIPBuffer;

      //Post Credit Line
      CASE PurchLine."Cost Type" OF
        PurchLine."Cost Type"::Labor:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Acc. Labor");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Acc. Labor";
          END;
        PurchLine."Cost Type"::Material:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Acc. Material");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Acc. Material";
          END;
        PurchLine."Cost Type"::Subcontracting:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Acc. Subc.");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Acc. Subc.";
          END;
        PurchLine."Cost Type"::Plant:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Acc. Plant");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Acc. Plant";
          END;
        PurchLine."Cost Type"::Sundry:
          BEGIN
            ProjectTypeRec.TESTFIELD("Compl. WIP Acc. Sundry");
            ComplWIPPostingBuffer[1]."G/L Account" := ProjectTypeRec."Compl. WIP Acc. Sundry";
          END
      END;

      ComplWIPPostingBuffer[1].Amount := JobJnlLine."Total Cost (LCY)";
      ComplWIPPostingBuffer[1]."Job No." := ProjRec."No.";
      UpdateComplementaryWIPBuffer;
    END;

    PROCEDURE PostComplementaryWIPCostServ@1100485007();
    VAR
      VendPostGrpLedgerAccRec@1100485000 : Record 11012889;
      VendPostGrpRec@1100485001 : Record 93;
      VendorRec@1100485002 : Record 23;
      ServiceTypeRec@1100485003 : Record 11012814;
    BEGIN
      //**4PS
      IF ServJnlLine."Total Cost (LCY)" = 0 THEN
        EXIT;

      IF PurchLine."Pay-to Vendor No." = '' THEN
        EXIT;

      ServOrderRec.GET(PurchLine."Service Order No.");

      ServOrderRec.TESTFIELD("Service Type");
      ServiceTypeRec.GET(ServOrderRec."Service Type");
      IF NOT ServiceTypeRec."Post Complementary Costs" THEN
        EXIT;

      VendorRec.GET(PurchLine."Pay-to Vendor No.");
      VendPostGrpRec.GET(VendorRec."Vendor Posting Group");

      VendPostGrpLedgerAccRec.INIT;

      IF VendPostGrpLedgerAccRec.GET(ServiceTypeRec.Code,VendPostGrpRec.Code) THEN BEGIN
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Labor" <> '' THEN
          ServiceTypeRec."Compl. WIP Acc. Labor" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Labor";
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Material" <> '' THEN
          ServiceTypeRec."Compl. WIP Acc. Material" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Material";
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Subc." <> '' THEN
          ServiceTypeRec."Compl. WIP Acc. Subc." := VendPostGrpLedgerAccRec."Compl. WIP Acc. Subc.";
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Plant" <> '' THEN
          ServiceTypeRec."Compl. WIP Acc. Plant" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Plant";
        IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry" <> '' THEN
          ServiceTypeRec."Compl. WIP Acc. Sundry" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry";

        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor" <> '' THEN
          ServiceTypeRec."Compl. WIP Cover Acc. Labor" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material" <> '' THEN
          ServiceTypeRec."Compl. WIP Cover Acc. Material" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc." <> '' THEN
          ServiceTypeRec."Compl. WIP Cover Acc. Subc." := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc.";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant" <> '' THEN
          ServiceTypeRec."Compl. WIP Cover Acc. Plant" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant";
        IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry" <> '' THEN
          ServiceTypeRec."Compl. WIP Cover Acc. Sundry" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry";
      END;

      //Post Debit Line
      CLEAR(ComplWIPPostingBuffer[1]);
      CASE PurchLine."Cost Type" OF
        PurchLine."Cost Type"::Labor:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Cover Acc. Labor");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Cover Acc. Labor";
          END;
        PurchLine."Cost Type"::Material:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Cover Acc. Material");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Cover Acc. Material";
          END;
        PurchLine."Cost Type"::Subcontracting:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Cover Acc. Subc.");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Cover Acc. Subc.";
          END;
        PurchLine."Cost Type"::Plant:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Cover Acc. Plant");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Cover Acc. Plant";
          END;
        PurchLine."Cost Type"::Sundry:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Cover Acc. Sundry");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Cover Acc. Sundry";
          END
      END;
      ComplWIPPostingBuffer[1].Amount := -ServJnlLine."Total Cost (LCY)";
      ComplWIPPostingBuffer[1].Description := PurchHeader."Posting Description";
      ComplWIPPostingBuffer[1]."Service Order No." := ServOrderRec."No.";
      ComplWIPPostingBuffer[1]."Service Contract No." := ServOrderRec."Service Contract No.";
      ComplWIPPostingBuffer[1]."Global Dimension 1 Code" := ServJnlLine."Shortcut Dimension 1 Code";
      ComplWIPPostingBuffer[1]."Global Dimension 2 Code" := ServJnlLine."Shortcut Dimension 2 Code";
      ComplWIPPostingBuffer[1]."Dimension Set ID" := ServJnlLine."Dimension Set ID";

      ComplWIPPostingBuffer[1]."Cost Component" := PurchLine."Cost Component"; //M22560

      UpdateComplementaryWIPBuffer;

      //Post Credit Line
      CASE PurchLine."Cost Type" OF
        PurchLine."Cost Type"::Labor:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Acc. Labor");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Acc. Labor";
          END;
        PurchLine."Cost Type"::Material:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Acc. Material");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Acc. Material";
          END;
        PurchLine."Cost Type"::Subcontracting:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Acc. Subc.");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Acc. Subc.";
          END;
        PurchLine."Cost Type"::Plant:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Acc. Plant");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Acc. Plant";
          END;
        PurchLine."Cost Type"::Sundry:
          BEGIN
            ServiceTypeRec.TESTFIELD("Compl. WIP Acc. Sundry");
            ComplWIPPostingBuffer[1]."G/L Account" := ServiceTypeRec."Compl. WIP Acc. Sundry";
          END
      END;

      ComplWIPPostingBuffer[1].Amount := ServJnlLine."Total Cost (LCY)";
      ComplWIPPostingBuffer[1]."Service Order No." := ServOrderRec."No.";
      ComplWIPPostingBuffer[1]."Service Contract No." := ServOrderRec."Service Contract No.";
      UpdateComplementaryWIPBuffer;
    END;

    PROCEDURE UpdateComplementaryWIPBuffer@1100485004();
    BEGIN
      //**4PS
      ComplWIPPostingBuffer[2] := ComplWIPPostingBuffer[1];
      IF ComplWIPPostingBuffer[2].FIND THEN BEGIN
        ComplWIPPostingBuffer[2].Amount :=
          ComplWIPPostingBuffer[2].Amount + ComplWIPPostingBuffer[1].Amount;
        ComplWIPPostingBuffer[2].MODIFY;
      END ELSE
        ComplWIPPostingBuffer[1].INSERT;
    END;

    PROCEDURE InwardProcessing@1100485011(PurchRcptLine@1100525000 : Record 121);
    VAR
      InwardRec@1100485000 : Record 11020350;
      InwardRec2@1100485001 : Record 11020350;
    BEGIN
      //**4PS
      InwardRec2.INIT;
      InwardRec2.RESET;
      InwardRec2.SETCURRENTKEY("Purchase Order No.");
      InwardRec2.SETRANGE("Purchase Order No.", PurchLine."Document No.");
      InwardRec2.SETRANGE("Order Line No.", PurchLine."Line No.");
      IF InwardRec2.FINDFIRST THEN;

      InwardRec.INIT;
      InwardRec.RESET;
      InwardRec."Job No." := PurchLine."Job No.";
      InwardRec.Element := PurchLine.Element;
      InwardRec."Receipt No." := PurchRcptLine."Document No.";
      InwardRec."Receipt Line" := PurchRcptLine."Line No.";
      InwardRec."Receipt Date" := PurchRcptHeader."Document Date";
      InwardRec."Purchase Order No." := PurchLine."Document No.";
      InwardRec."Order Line No." := PurchLine."Line No.";
      IF InwardRec.INSERT THEN BEGIN
        InwardRec.Quantity := PurchRcptLine.Quantity;
        InwardRec."Unit of Measure" := PurchRcptLine."Unit of Measure";
        InwardRec."Tariff Code" := InwardRec2."Tariff Code";
        InwardRec.MODIFY;
      END;
    END;

    PROCEDURE CheckUpdateInvNoInInvoiceBBN@1100525000(iInvoiceNoBBN@1100525000 : Code[35];iPurchInvNoOld@1100525001 : Code[20];iPurchInvNoNew@1100525002 : Code[20];iCreditMemo@1100525004 : Boolean);
    VAR
      lvInvoiceBBNRec@1100525003 : Record 11072653;
    BEGIN
      IF (iInvoiceNoBBN = '') OR (iPurchInvNoNew = iPurchInvNoOld) THEN
        EXIT;

      lvInvoiceBBNRec.SETRANGE("No.", COPYSTR(iInvoiceNoBBN, 1, MAXSTRLEN(lvInvoiceBBNRec."No.")));
      IF NOT iCreditMemo THEN
        lvInvoiceBBNRec.SETRANGE("Purch. Invoice Type", lvInvoiceBBNRec."Purch. Invoice Type"::Invoice)
      ELSE
        lvInvoiceBBNRec.SETRANGE("Purch. Invoice Type", lvInvoiceBBNRec."Purch. Invoice Type"::CreditMemo);
      lvInvoiceBBNRec.SETRANGE("Purchase Invoice No.", iPurchInvNoOld);
      IF lvInvoiceBBNRec.FINDFIRST THEN BEGIN  //* Don't use GET for permission reasons
        lvInvoiceBBNRec."Purchase Invoice No." := iPurchInvNoNew;
        lvInvoiceBBNRec.MODIFY;
      END;
    END;

    PROCEDURE SetNoErrorNothingToPost@1100525002(iNoErrorNothingToPost@1100525000 : Boolean);
    BEGIN
      //**4PS
      SkipClearAll := TRUE;  //DP00416.n
      gNoErrorNothingToPost := iNoErrorNothingToPost;
    END;

    PROCEDURE SetUptoPromisedReceiveDate@1100525004(NewUptoPromisedReceiveDate@1100525000 : Date);
    BEGIN
      //**4PS
      UptoPromisedReceiveDate := NewUptoPromisedReceiveDate;
    END;

    PROCEDURE PutPromisedReceiveDateFilter@1100525005(VAR PurchLine@1100525000 : Record 39);
    BEGIN
      //**4PS
      IF UptoPromisedReceiveDate <> 0D THEN
        PurchLine.SETRANGE("Promised Receipt Date", 0D, UptoPromisedReceiveDate);
    END;

    PROCEDURE CheckApprovalTemplate@1100525006();
    BEGIN
      //**4PS
      IF (PurchSetup."Determine Approval Template" = PurchSetup."Determine Approval Template"::GlobalDim1) THEN
        PurchHeader.TESTFIELD("Shortcut Dimension 1 Code");
      PurchHeader.TESTFIELD("Inv.Appr.Journal Template");
    END;

    LOCAL PROCEDURE FillRetentionPostingBuffer@1100525021(PurchLine@1000 : Record 39;PurchLineACY@1001 : Record 39;RetentionNo@1100528500 : Integer);
    VAR
      CurrExchRate@1100525000 : Record 330;
    BEGIN
      //**4PS
      WITH PurchLine DO BEGIN
        CLEAR(RetentionPostingBuffer[1]);

        RetentionPostingBuffer[1].Type := RetentionNo; //Type is used for separating retentions
        RetentionPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        RetentionPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        RetentionPostingBuffer[1]."Dimension Set ID" := "Dimension Set ID";
        RetentionPostingBuffer[1]."Cost Component" := "Cost Component";

        IF "Document Type" = "Document Type"::Invoice THEN
          RetentionPostingBuffer[1]."Retention Amount" := -PurchLine.RetentionAmount(RetentionNo)
        ELSE
          RetentionPostingBuffer[1]."Retention Amount" := PurchLine.RetentionAmount(RetentionNo);
        IF PurchHeader."Currency Code" = '' THEN
          RetentionPostingBuffer[1]."Retention Amount (ACY)" := RetentionPostingBuffer[1]."Retention Amount"
        ELSE BEGIN
          RetentionPostingBuffer[1]."Retention Amount (ACY)" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                0, '',PurchHeader."Posting Date",PurchHeader."Currency Code",
                RetentionPostingBuffer[1]."Retention Amount" ,PurchHeader."Currency Factor",FALSE));
        END;

        UpdRetentionPostingBuffer;
      END;
    END;

    LOCAL PROCEDURE FillRetentionPostingBufferWar@1210190009(PurchaseHeader@1210190000 : Record 38);
    VAR
      WarrantyDataPurchOrder@1210190001 : Record 11020665;
      CurrExchRate@1100525000 : Record 330;
    BEGIN
      //**4PS, RFC 337
      WITH PurchaseHeader DO BEGIN
        CLEAR(RetentionPostingBuffer[1]);

        WarrantyDataPurchOrder.SETRANGE("Document Type",WarrantyDataPurchOrder."Document Type"::Order);
        WarrantyDataPurchOrder.SETRANGE("Document No.", PurchaseHeader."Related Purch. Order No.");
        WarrantyDataPurchOrder.SETRANGE("Warranty Obligation satisfied",FALSE);
        IF WarrantyDataPurchOrder.FINDSET THEN BEGIN
          DocumentRetentionAmount := 0; //call 27569
          RetentionType := RetentionType::Warranty;
          REPEAT
            RetentionPostingBuffer[1].Type := 0;
            RetentionPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
            RetentionPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
            RetentionPostingBuffer[1]."Dimension Set ID" := "Dimension Set ID";
            RetentionPostingBuffer[1]."Purchase Order" := WarrantyDataPurchOrder."Document No.";
            RetentionPostingBuffer[1]."Warranty Object" := WarrantyDataPurchOrder."Warranty Code";
            CALCFIELDS(PurchaseHeader.Amount);
            IF WarrantyDataPurchOrder."Retention Percentage" <> 0 THEN
              RetentionPostingBuffer[1]."Retention Amount" := ROUND(-PurchaseHeader.Amount *
                WarrantyDataPurchOrder."Retention Percentage"/100)  // Call 29199 (round)
            ELSE
              RetentionPostingBuffer[1]."Retention Amount" := -WarrantyDataPurchOrder."Retention Amount";
            IF PurchHeader."Currency Code" = '' THEN
              RetentionPostingBuffer[1]."Retention Amount (ACY)" := RetentionPostingBuffer[1]."Retention Amount"
            ELSE BEGIN
              RetentionPostingBuffer[1]."Retention Amount (ACY)" :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    0, '',PurchHeader."Posting Date",PurchHeader."Currency Code",
                    RetentionPostingBuffer[1]."Retention Amount" ,PurchHeader."Currency Factor",FALSE));
            END;

            UpdRetentionPostingBuffer;
            DocumentRetentionAmount := DocumentRetentionAmount + RetentionPostingBuffer[1]."Retention Amount"; //call 27569
          UNTIL WarrantyDataPurchOrder.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdRetentionPostingBuffer@1100525020();
    BEGIN
      //**4PS
      RetentionPostingBuffer[2] := RetentionPostingBuffer[1];
      IF RetentionPostingBuffer[2].FIND THEN BEGIN
        RetentionPostingBuffer[2]."Retention Amount" :=
          RetentionPostingBuffer[2]."Retention Amount" + RetentionPostingBuffer[1]."Retention Amount";
        RetentionPostingBuffer[2]."Retention Amount (ACY)" :=
          RetentionPostingBuffer[2]."Retention Amount (ACY)" + RetentionPostingBuffer[1]."Retention Amount (ACY)";
        RetentionPostingBuffer[2].MODIFY;
      END ELSE
        RetentionPostingBuffer[1].INSERT;
    END;

    PROCEDURE PostRetentionPostingBuffer@11132551();
    VAR
      TempRetentionDimBuf@1000000001 : TEMPORARY Record 360;
      SubcontracterContract@1210190000 : Record 11020635;
      PaymentTerms@1210190001 : Record 3;
      Vendor@1100525000 : Record 23;
      VendPostingGr@1100525001 : Record 93;
    BEGIN
      IF RetentionPostingBuffer[1].FINDSET THEN
        REPEAT
          IF (PurchLine."Document Type" <> PurchHeader."Document Type") OR (PurchLine."Document No." <> PurchHeader."No.") THEN
            PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");

          Vendor.GET(PurchHeader."Buy-from Vendor No.");
          Vendor.TESTFIELD("Vendor Posting Group");
          VendPostingGr.GET(Vendor."Vendor Posting Group");
          VendPostingGr.TESTFIELD("Retention Suspense Acc.");

          GenJnlLine.INIT;
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
          GenJnlLine."Account No." := VendPostingGr."Retention Suspense Acc.";

          IF PurchHeader."Applies-to Doc. Type" IN
            [PurchHeader."Applies-to Doc. Type"::Invoice,PurchHeader."Applies-to Doc. Type"::"Credit Memo"]
          THEN BEGIN
            GenJnlLine."Applies-to Doc. Type" := PurchHeader."Applies-to Doc. Type";
            GenJnlLine."Applies-to Doc. No." := PurchHeader."Applies-to Doc. No.";
          END;

          GenJnlLine."Gen. Posting Type" := 0; // None
          GenJnlLine."Gen. Bus. Posting Group" := '';
          GenJnlLine."Gen. Prod. Posting Group" := '';
          GenJnlLine."VAT Bus. Posting Group" := '';
          GenJnlLine."VAT Prod. Posting Group" := '';
          GenJnlLine."VAT Calculation Type" := GenJnlLine."VAT Calculation Type"::"Normal VAT";
          GenJnlLine."VAT Amount" := 0;

          GLAcc.GET(GenJnlLine."Account No.");

          GenJnlLine."Currency Code" := PurchHeader."Currency Code";
          GenJnlLine.Amount := RetentionPostingBuffer[1]."Retention Amount (ACY)";
          GenJnlLine."Source Currency Code" := PurchHeader."Currency Code";
          GenJnlLine."Source Currency Amount" := RetentionPostingBuffer[1]."Retention Amount (ACY)";
          GenJnlLine."Amount (LCY)" := RetentionPostingBuffer[1]."Retention Amount";

          GenJnlLine."Skip WIP Check" := TRUE;

          IF PurchHeader."Currency Code" = '' THEN
            GenJnlLine."Currency Factor" :=  1
          ELSE
            GenJnlLine."Currency Factor" :=  PurchHeader."Currency Factor";

          IF ((GenJnlLine.Amount > 0) AND (NOT PurchHeader.Correction)) OR
             ((GenJnlLine.Amount < 0) AND PurchHeader.Correction)
          THEN BEGIN
            GenJnlLine."Debit Amount" := GenJnlLine.Amount;
            GenJnlLine."Credit Amount" := 0
          END ELSE BEGIN
            GenJnlLine."Debit Amount" := 0;
            GenJnlLine."Credit Amount" := -GenJnlLine.Amount;
          END;

          GenJnlLine."Posting Date" := PurchHeader."Posting Date";
          GenJnlLine."Document Date" := PurchHeader."Document Date";
          // call 29350
          GenJnlLine."Due Date" := PurchHeader."Document Date";
          IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN BEGIN
            IF (RetentionPostingBuffer[1].Type <> 0) AND (PurchHeader."Subcontract No." <> '') AND
               (PurchHeader."Document Date" <> 0D) THEN
            BEGIN
              SubcontracterContract.GET(PurchHeader."Buy-from Vendor No.", PurchHeader."Subcontract No.");
              IF (RetentionPostingBuffer[1].Type = 1) AND (SubcontracterContract."Retention Payment Terms Code" <> '') THEN
              BEGIN
                PaymentTerms.GET(SubcontracterContract."Retention Payment Terms Code");
                GenJnlLine."Due Date" := CALCDATE(PaymentTerms."Due Date Calculation",PurchHeader."Document Date");
              END;
              IF (RetentionPostingBuffer[1].Type = 2) AND (SubcontracterContract."Retention Payment Terms Code 2" <> '') THEN
              BEGIN
                PaymentTerms.GET(SubcontracterContract."Retention Payment Terms Code 2");
                GenJnlLine."Due Date" := CALCDATE(PaymentTerms."Due Date Calculation",PurchHeader."Document Date");
              END;
            END;
          END;
          //

          GenJnlLine."Purchase Order" := RetentionPostingBuffer[1]."Purchase Order"; // RFC 337
          GenJnlLine."Warranty Object" := RetentionPostingBuffer[1]."Warranty Object"; // RFC 337
          GenJnlLine.Description := PurchHeader."Posting Description";
          GenJnlLine."Reason Code" := PurchHeader."Reason Code";
          GenJnlLine."Document Type" := GenJnlLineDocType;
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlLine.Correction := PurchHeader.Correction;
          GenJnlLine.Quantity := 1;
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Sell-to/Buy-from No." := PurchHeader."Buy-from Vendor No.";
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
          GenJnlLine."Source No." := PurchHeader."Buy-from Vendor No.";
          GenJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";

          IF RetentionPostingBuffer[1].Type <> 0 THEN BEGIN // RFC 337
            GenJnlLine."Job No." := PurchHeader."Job No.";
            GenJnlLine."Subcontract No." := PurchHeader."Subcontract No.";
          END ELSE
            GenJnlLine."Closed Project No." := PurchHeader."Job No."; // RFC 337

          GenJnlLine."Shortcut Dimension 1 Code" := RetentionPostingBuffer[1]."Global Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := RetentionPostingBuffer[1]."Global Dimension 2 Code";
          GenJnlLine."Dimension Set ID" := RetentionPostingBuffer[1]."Dimension Set ID";
          GenJnlLine."Cost Component" := RetentionPostingBuffer[1]."Cost Component";

          GenJnlLine."Retention Entry Type" := GenJnlLine."Retention Entry Type"::Purchase;

          IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice] THEN
            GenJnlLine."Retention Entry Document Type" := GenJnlLine."Retention Entry Document Type"::Invoice
          ELSE
            GenJnlLine."Retention Entry Document Type" := GenJnlLine."Retention Entry Document Type"::"Credit Memo";

          TempRetentionDimBuf.DELETEALL;
          GenJnlPostLine.RunWithCheck(GenJnlLine);

        UNTIL RetentionPostingBuffer[1].NEXT = 0;
    END;

    PROCEDURE PlantReceivedAndCreatedOnOrder@1100525024(PurchLine2@1210190000 : Record 39) : Boolean;
    VAR
      PlantNoRec@1100525000 : Record 11012552;
    BEGIN
      //**4PS  26690
      WITH PurchLine2 DO BEGIN
        IF ("Document Type" = "Document Type"::Order) AND ("Receiving Company" = '') AND
           (Type = Type::"Fixed Asset") AND ("No." <> '') AND
           ("Plant Type" <> '') AND ("Plant Type" <> '') AND ("Cost Component Plant" <> '') AND
           (Quantity = 1) AND ("Qty. to Receive" = 0) AND ("Quantity Received" = 1)
        THEN BEGIN
          IF (CheckPlantAcquisitionOrRent(PurchLine2) = 1) THEN BEGIN
            IF PlantNoRec.GET("Plant Type", "Plant No.") THEN BEGIN
              PlantNoRec.CALCFIELDS(Bulk);
              IF (NOT PlantNoRec.Bulk) AND PlantNoRec.Posted AND (NOT PlantNoRec.External) AND
                 (PlantNoRec."Fixed Asset" = "No.") AND (PlantNoRec."Purchase Order No." = "Document No.")
              THEN
                EXIT(TRUE);
            END;
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckIntrastat@1210190020() : Boolean;
    VAR
      CountryRegion@1210190000 : Record 9;
      IntraStatCodeOrig@1210190001 : Code[10];
      IntraStatCodeDest@1210190002 : Code[10];
    BEGIN
      //**4PS, 28178
      IF NOT PurchHeader."Invoice Lines Input" THEN //M28723
        EXIT(FALSE);
      IF (PurchHeader."Country of Origin" = '') OR (PurchHeader."Country of Destination" = '') THEN
        EXIT(FALSE);
      IF PurchHeader."Country of Origin" = PurchHeader."Country of Destination" THEN
        EXIT(FALSE);

      IntraStatCodeOrig := '';
      IntraStatCodeDest := '';
      IF CountryRegion.GET(PurchHeader."Country of Origin") THEN
        IntraStatCodeOrig := CountryRegion."Intrastat Code";
      IF CountryRegion.GET(PurchHeader."Country of Destination") THEN
        IntraStatCodeDest := CountryRegion."Intrastat Code";
      IF (IntraStatCodeOrig = '') OR (IntraStatCodeDest = '') THEN
        EXIT(FALSE);
      IF (IntraStatCodeOrig <> IntraStatCodeDest) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetPurchLineUnitCostInclDisc@1210190010(PurchLine1@1210190001 : Record 39) : Decimal;
    VAR
      PurchLine2@1210190000 : Record 39;
    BEGIN
      //**4PS 30285
      //* Purchase line must be read a again because sometimes fields arre zero here (fi Line Amount)
      IF PurchLine2.GET(PurchLine1."Document Type", PurchLine1."Document No.", PurchLine1."Line No.") THEN BEGIN
        IF PurchLine2.Quantity <> 0 THEN
      //  EXIT(PurchLine2."Line Amount" / PurchLine2.Quantity); //C027348.o
          EXIT(PurchLine2.Amount / PurchLine2.Quantity); //C027348.n
      END;
      EXIT(0);
    END;

    PROCEDURE CopyAndDeleteSubcontractHours@1100409000(FromType@1100409005 : Option;ToType@1100409004 : Option;FromDocNo@1100409000 : Code[20];ToDocNo@1100409001 : Code[20]);
    VAR
      SubcontractingHoursInvoice@1100409002 : Record 11020694;
      SubcontractingHoursInvoice2@1100409003 : Record 11020694;
    BEGIN
      //**4PS.n kzwerver, 120810, #T000580
      SubcontractingHoursInvoice.SETRANGE(Type, FromType);
      SubcontractingHoursInvoice.SETRANGE("Document No.", FromDocNo);
      IF (NOT SubcontractingHoursInvoice.FINDSET(TRUE, TRUE)) THEN
        EXIT;

      REPEAT
        SubcontractingHoursInvoice2 := SubcontractingHoursInvoice;
        SubcontractingHoursInvoice2.Type := ToType;
        SubcontractingHoursInvoice2."Document No." := ToDocNo;
        SubcontractingHoursInvoice2.INSERT;

        SubcontractingHoursInvoice.DELETE(TRUE);
      UNTIL (SubcontractingHoursInvoice.NEXT = 0);
    END;

    PROCEDURE PostNSItemTracking@1100528601(PurchRcptLine@1100525000 : Record 121);
    VAR
      NSReservationEntry@1100528604 : Record 11071900;
      NSItemTrackingCheck@1100528600 : Codeunit 11012353;
      QuantityProcessed@1100528602 : Decimal;
      IsFirstReservLine@1100528500 : Boolean;
      ErrorFieldCaption@1100528501 : Text[250];
    BEGIN
      //**4PS DP00121
      IF (PurchRcptLine."Item No." = '') OR (PurchRcptLine.Type <> PurchRcptLine.Type::"G/L Account") THEN
        EXIT;

      IF NOT Item.GET(PurchRcptLine."Item No.") THEN
        EXIT;

      IF Item."Item Tracking Code" = '' THEN
        EXIT;

      IF PurchHeader.Receive THEN
        ErrorFieldCaption := PurchLine.FIELDCAPTION("Qty. to Receive")
      ELSE
        ErrorFieldCaption := PurchLine.FIELDCAPTION("Return Qty. to Ship");

      NSReservationEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype");
      IF PurchRcptLine."Order No." <> '' THEN BEGIN
        NSReservationEntry.SETRANGE("Source ID", PurchRcptLine."Order No.");
        NSReservationEntry.SETRANGE("Source Ref. No.", PurchRcptLine."Order Line No.");
      END ELSE BEGIN
        NSReservationEntry.SETRANGE("Source ID", PurchHeader."No.");
        NSReservationEntry.SETRANGE("Source Ref. No.", PurchLine."Line No.");
      END;
      NSReservationEntry.SETRANGE("Source Type", DATABASE::"Purchase Line");
      NSReservationEntry.SETRANGE("Source Subtype", PurchHeader."Document Type");
      IF NSReservationEntry.FINDSET(TRUE) THEN BEGIN
        IsFirstReservLine := TRUE;
        REPEAT
          IF (NSReservationEntry."Qty. to Handle (Base)" <> 0) AND
             ((NSReservationEntry."Serial No." <> '') OR (NSReservationEntry."Lot No." <> '')) THEN
          BEGIN
            NSItemTrackingCheck.CheckLine(
              NSReservationEntry, 0, PurchRcptHeader."Document Date",
              PurchRcptLine."Quantity (Base)", IsFirstReservLine, ErrorFieldCaption);
            PostNSItemTrackingEntry(NSReservationEntry,PurchRcptLine,Item,PurchRcptHeader."Posting Date",PurchHeader.Invoice); //C016406.c

            QuantityProcessed += NSReservationEntry."Qty. to Handle (Base)";
            IsFirstReservLine := FALSE;
            //TestCall T000815
            IF PurchHeader.Invoice THEN
              NSReservationEntry.MODIFY
            ELSE
            //
              NSReservationEntry.DELETE;
          END;
        UNTIL NSReservationEntry.NEXT = 0;
      END;

      IF ABS(QuantityProcessed) <> ABS(PurchRcptLine."Quantity (Base)") THEN
        ERROR(STRSUBSTNO(Text046,ErrorFieldCaption,PurchRcptLine."Item No."));
    END;

    PROCEDURE PostNSItemTrackingEntry@1100528603(VAR NSReservationEntry@1100528600 : Record 11071900;PurchRcptLine@1100525000 : Record 121;Item@1100525003 : Record 27;PostingDate@1100525001 : Date;PostingInvoice@1100525002 : Boolean);
    VAR
      NSTrackingSpecification@1100528601 : Record 11071901;
      NSItemTrackingEntry@1100528604 : Record 11071902;
      NSItemTrackingEntryRelation@1100528603 : Record 11071903;
      NSItemApplnEntry@1100528606 : Record 11071904;
      EntryNo@1100528602 : Integer;
    BEGIN
      //**4PS DP00121
      WITH NSItemTrackingEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          EntryNo := "Entry No." + 1
        ELSE
          EntryNo := 1;

        INIT;
        "Entry No." := EntryNo;
        "Item No." := PurchRcptLine."Item No.";
        "Posting Date" := PostingDate; //C016406.c
        "Entry Type" := "Entry Type"::Purchase;
        "Location Code" := PurchRcptLine."Location Code";
        "Document Type" := "Document Type"::"Purchase Receipt";
        "Document No." := PurchRcptLine."Document No.";
        "Document Line No." := PurchRcptLine."Line No.";
        "Variant Code" := PurchRcptLine."Variant Code";
        Open := TRUE;
        "Serial No." := NSReservationEntry."Serial No.";
        "Lot No." := NSReservationEntry."Lot No.";
        "Warranty Date Vendor" := NSReservationEntry."Warranty Date Vendor";
        "Warranty Code Vendor" := NSReservationEntry."Warranty Code Vendor";
        "Warranty Start Date Vendor" := NSReservationEntry."Warranty Start Date Vendor";
        "Warranty Period Vendor" := NSReservationEntry."Warranty Period Vendor";
        "Warranty Code Customer" := NSReservationEntry."Warranty Code Customer";
        "Warranty Start Date Customer" := NSReservationEntry."Warranty Start Date Customer";
        "Warranty Period Customer" := NSReservationEntry."Warranty Period Customer";
        "Warranty Date Customer" := NSReservationEntry."Warranty Date Customer";
        "Good Customs":= NSReservationEntry."Good Customs";
        "Shipment with T1" := NSReservationEntry."Shipment with T1";
        "Customs Destination Code" := NSReservationEntry."Customs Destination Code";
        "Expiration Date" := NSReservationEntry."Expiration Date";
        Quantity := NSReservationEntry."Qty. to Handle (Base)";
        "Remaining Quantity" := Quantity;
        Positive := ("Remaining Quantity" > 0);
        "Item Tracking":= ItemTrackingMgt.ItemTrackingOption(
          NSReservationEntry."Lot No.", NSReservationEntry."Serial No.");
        "Source Type":= "Source Type"::Vendor;
        "Source No.":= PurchRcptLine."Buy-from Vendor No.";
        "Project No." := PurchRcptLine."Job No.";
        "Service Order No." := PurchRcptLine."Service Order No.";
        //apply before insert cause applying data is added to NSItemTrackingEntry
        NSItemTrackingEntriesApply.ApplyNSItemTrackingEntry(NSItemTrackingEntry, Item."Item Tracking Code");
        INSERT;
      END;

      //C016406.sn
      //IF PurchHeader.Invoice AND (NSReservationEntry."Item Ledger Entry No." = 0) THEN //C028137.o
      IF PostingInvoice AND (NSReservationEntry."Item Ledger Entry No." = 0) THEN //C028137.n
        NSReservationEntry."Item Ledger Entry No." := EntryNo; //T000815
      //C016406.en

      WITH NSTrackingSpecification DO BEGIN
        INIT;
        TRANSFERFIELDS(NSReservationEntry);
        "Entry No." := EntryNo;
        "Quantity Handled (Base)" := NSReservationEntry."Qty. to Handle (Base)";
        "Qty. to Handle (Base)" := 0;
        INSERT;
      END;

      WITH NSItemTrackingEntryRelation DO BEGIN
        INIT;
        "Item Tracking Entry No." := EntryNo;
        "Serial No." := NSReservationEntry."Serial No.";
        "Lot No." := NSReservationEntry."Lot No.";
        TransferFieldsPurchRcptLine(PurchRcptLine);
        INSERT;
      END;

      //C016406.so
      //IF PurchHeader.Invoice AND (NSReservationEntry."Item Ledger Entry No." = 0) THEN
      //  NSReservationEntry."Item Ledger Entry No." := EntryNo; //T000815
      //C016406.eo

      //Application
      IF NOT NSItemTrackingEntry.Positive THEN
        EXIT;

      //C016406.sn
      IF NOT PurchHeader.Receive THEN
        EXIT;
      //C016406.en

      WITH NSItemApplnEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          EntryNo := "Entry No." + 1
        ELSE
          EntryNo := 1;

        INIT;
        "Entry No." := EntryNo;
        "NS Item Tracking Entry No." := NSItemTrackingEntry."Entry No.";
        "Inbound Item Entry No." := NSItemTrackingEntry."Entry No.";
        "Outbound Item Entry No." := 0;
        Quantity := NSItemTrackingEntry.Quantity;
        "Posting Date" := NSItemTrackingEntry."Posting Date";
        "Creation Date" := CURRENTDATETIME;
        "Created By" := USERID;
        INSERT;
      END;
    END;

    PROCEDURE InsertNSItemTrackingRelation@1100528500(PurchLine@1100528501 : Record 39;PurchRcptLine@1100525001 : Record 121;RowID@1100528503 : Text[100]);
    VAR
      NSReservationEntry@1100528502 : Record 11071900;
      NSItemTrackingRelation@1100528504 : Record 11071905;
      NSItemTrackingEntry@1100525000 : Record 11071902;
    BEGIN
      //**4PS DP00121
      NSReservationEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype");
      NSReservationEntry.SETRANGE("Source ID", PurchLine."Document No.");
      NSReservationEntry.SETRANGE("Source Ref. No.", PurchLine."Line No.");
      NSReservationEntry.SETRANGE("Source Type", DATABASE::"Purchase Line");
      NSReservationEntry.SETRANGE("Source Subtype", PurchLine."Document Type");
      IF NSReservationEntry.FINDSET(TRUE) THEN
        REPEAT
          IF NSReservationEntry."Item Ledger Entry No." <> 0 THEN BEGIN
      //C016406.sn
            IF NSItemTrackingRelation.GET(NSReservationEntry."Item Ledger Entry No.") THEN BEGIN
              //Must be second invoice. Adjust the first and create new
              NSItemTrackingEntry.GET(NSReservationEntry."Item Ledger Entry No.");
              NSItemTrackingEntry.Quantity -= NSReservationEntry."Qty. to Handle (Base)";
              NSItemTrackingEntry."Remaining Quantity" -= NSReservationEntry."Qty. to Handle (Base)";
              NSItemTrackingEntry.MODIFY;

              Item.GET(PurchLine."Item No.");
              NSReservationEntry."Item Ledger Entry No." := 0;
              PurchRcptHeader.GET(PurchRcptLine."Document No.");
              PostNSItemTrackingEntry(NSReservationEntry,PurchRcptLine,Item,PurchRcptHeader."Posting Date",PurchHeader.Invoice);
            END;
      //C016406.en
            NSItemTrackingRelation."Item Tracking Entry No." := NSReservationEntry."Item Ledger Entry No.";
            NSItemTrackingRelation."Source RowId" := RowID;
            NSItemTrackingRelation."Project Ledger Entry No." := JobLedgEntryNo;
            NSItemTrackingRelation."Service Ledger Entry No." := ServLedgEntryNo;
            NSItemTrackingRelation.INSERT;
            NSReservationEntry.DELETE;
          END;
        UNTIL NSReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetCommentForProjEntry@1100409002(PurchLine@1100409000 : Record 39;MaxLen@1100409001 : Integer) : Text[100];
    VAR
      PurchCommentLine@1100409002 : Record 43;
    BEGIN
      //**4PS 34602
      CASE PurchLine."Document Type" OF
        PurchLine."Document Type"::Order:
          PurchCommentLine.SETRANGE("Document Type", PurchCommentLine."Document Type"::Order);
        PurchLine."Document Type"::Invoice:
          PurchCommentLine.SETRANGE("Document Type", PurchCommentLine."Document Type"::Invoice);
        PurchLine."Document Type"::"Credit Memo":
          PurchCommentLine.SETRANGE("Document Type", PurchCommentLine."Document Type"::"Credit Memo");
        ELSE
          EXIT('')
      END;
      PurchCommentLine.SETRANGE("No.", PurchLine."Document No.");
      PurchCommentLine.SETRANGE("Document Line No.", PurchLine."Line No.");
      PurchCommentLine.SETFILTER(Comment, '<>%1', '');
      IF PurchCommentLine.FINDFIRST THEN
        EXIT(COPYSTR(PurchCommentLine.Comment, 1, MaxLen));
      EXIT('');
    END;

    PROCEDURE SetPlotNoReceipts@1100525013(PlotNo@1100525000 : Code[10]);
    BEGIN
      //DP00416  For Receipt from Blanket Scheme
      SkipClearAll := TRUE;
      PlotNoReceipts := PlotNo;
    END;

    PROCEDURE CheckReasonCodeFGases@1100528300(VAR PurchaseLine@1100528300 : Record 39);
    VAR
      PurchaseLineToCheck@1100528301 : Record 39;
    BEGIN
      PurchaseLineToCheck.COPY(PurchaseLine);

      PurchaseLineToCheck.SETRANGE(Type, PurchaseLine.Type::Item);
      IF PurchaseLineToCheck.FINDSET THEN BEGIN
        REPEAT
          IF (NOT Item.GET(PurchaseLineToCheck."Item No.")) THEN
            Item.INIT;
          IF (Item."Reason Code F-Gases Mandatory") THEN
            PurchaseLineToCheck.TESTFIELD("Reason Code");
        UNTIL (PurchaseLineToCheck.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE CheckPostingReceiptAllowed@1100528800(PurchaseLine@1100528800 : Record 39);
    VAR
      PurchasesPayablesSetup@1100528802 : Record 312;
      PurchaseHeader@1100528801 : Record 38;
    BEGIN
      //**4PS
      PurchasesPayablesSetup.GET;
      IF NOT PurchasesPayablesSetup."Block Posting Receipts" THEN
        EXIT;

      PurchaseHeader.GET(PurchaseLine."Document Type", PurchaseLine."Document No.");

      IF (PurchaseHeader."Contract Applicable") AND (PurchaseHeader."Return Date Signed Contract" = 0D) THEN
        ERROR(Text11012020, PurchaseHeader.FIELDCAPTION("Return Date Signed Contract"), PurchaseLine."Document Type", PurchaseLine."Document No.");

      IF (PurchaseHeader.LetterOfCreditIsApplicable) AND (PurchaseHeader."Return Date Letter of Credit" = 0D) THEN
        ERROR(Text11012020, PurchaseHeader.FIELDCAPTION("Return Date Letter of Credit"), PurchaseLine."Document Type", PurchaseLine."Document No.");
    END;

    PROCEDURE IsDocumentCaptureActive@1100528203() : Boolean;
    BEGIN
      //**4PS
      IF NOT DCSetupRead THEN BEGIN
        IF NOT DocumentCaptureSetup.READPERMISSION THEN
          EXIT(FALSE);
        IF DocumentCaptureSetup.GET THEN;
          DCSetupRead := TRUE;
      END;
      EXIT(DocumentCaptureSetup."Document Nos." <> '');
    END;

    LOCAL PROCEDURE SetReceiveMarkedOnly@1100525014(VAR PurchaseHeader@1100409000 : Record 38);
    BEGIN
      //**4PS DP00556
      gReceiveMarkedOnly := PurchaseHeader."Markedonly Receipt Run";
      PurchaseHeader."Markedonly Receipt Run" := FALSE;
    END;

    LOCAL PROCEDURE PutReceiveMarkedOnlyFilter@1100525015(VAR PurchLine@1100525000 : Record 39);
    BEGIN
      //**4PS DP00556
      IF gReceiveMarkedOnly THEN
        PurchLine.SETRANGE("Marked for Receipt Run", TRUE);
    END;

    PROCEDURE DCKeepOnHold@1100525008() : Boolean;
    BEGIN
      //**4PS C020358
      //Procedure 'adviesaanvraag'/ Advice Request.
      //Aproval procedure sequentially on table 38 (occasionally user defined) and on table 122 (always)
      IF NOT IsDocumentCaptureActive THEN
        EXIT(FALSE);

      //FIXME Approvals table 452 is gone in NAV2016
      //IF ApprovalSetup.GET THEN BEGIN
      //  IF ApprovalSetup."Purch. Hdr. Inv. Keep On Hold" AND ApprovalSetup."Appr. P. Hdr. And P. I. Hdr." THEN
      //    EXIT(TRUE);
      //END;

      EXIT(FALSE);
    END;

    BEGIN
    {
      <DC>
        Document Capture
      </DC>
      4PS07 HBK 03-08-2009, Transfer Objectfields to Project Inventory Entry
      4PS08 HBK 06-05-2010, Transfer Element to Project Inventory Entry
      4PS09 MMA 19-02-2010 Changes RFC Vendor rating
      4PS10 KK 22-11-2010, On hold when no contract returned or when no letter of credit returned.
      4PS11 JD 25-01-2010 Documentmanagement changes
      4PS, C024747, 22-12-2015, Read permissions added for table 17
    }
    END.
  }
}

