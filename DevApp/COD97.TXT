OBJECT Codeunit 97 Blanket Purch. Order to Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    TableNo=38;
    OnRun=VAR
            Vend@1001 : Record 23;
            PrepmtMgt@1003 : Codeunit 441;
            ShouldRedistributeInvoiceAmount@1000 : Boolean;
            lvRouteRefMgtCU@1210190001 : Codeunit 11012045;
            lvLastRefNo@1210190000 : Code[20];
          BEGIN
            TESTFIELD("Document Type","Document Type"::"Blanket Order");
            ShouldRedistributeInvoiceAmount := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(Rec);

            Vend.GET("Buy-from Vendor No.");
            Vend.CheckBlockedVendOnDocs(Vend,FALSE);

            IF QtyToReceiveIsZero THEN
              ERROR(Text002);

            //**4PS.sn
            IF ("Valid Until" <> 0D) AND ("Valid Until" <= TODAY) THEN
              ERROR(Text11012001, "No.", "Valid Until");
            //**4PS.en

            PurchSetup.GET;

            IF (NOT UseSamePurchaseHeader) OR (PurchOrderHeader."No." = '') THEN BEGIN //**4PS.n
              PurchOrderHeader := Rec;
              PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
              PurchOrderHeader."No. Printed" := 0;
              PurchOrderHeader.Status := PurchOrderHeader.Status::Open;
              PurchOrderHeader."No." := '';

              //**4PS.sn
              IF gAskForNoSerie THEN BEGIN
                PurchOrderHeader."No. Series" := gNoSeries;
                PurchOrderHeader.GetNoForSelectedNoSeries(PurchOrderHeader);
                PurchOrderHeader.InitRecord; //C030976.n
              END;
              //**4PS.en

              PurchOrderLine.LOCKTABLE;
              PurchOrderHeader.INSERT(TRUE);

              IF "Order Date" = 0D THEN
                PurchOrderHeader."Order Date" := WORKDATE
              ELSE
                PurchOrderHeader."Order Date" := "Order Date";
              IF "Posting Date" <> 0D THEN
                PurchOrderHeader."Posting Date" := "Posting Date";
              PurchOrderHeader."Document Date" := "Document Date";
              PurchOrderHeader."Expected Receipt Date" := "Expected Receipt Date";
              PurchOrderHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
              PurchOrderHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
              PurchOrderHeader."Dimension Set ID" := "Dimension Set ID";
              PurchOrderHeader."Inbound Whse. Handling Time" := "Inbound Whse. Handling Time";
              PurchOrderHeader."Location Code" := "Location Code";
              PurchOrderHeader."Ship-to Name" := "Ship-to Name";
              PurchOrderHeader."Ship-to Name 2" := "Ship-to Name 2";
              PurchOrderHeader."Ship-to Address" := "Ship-to Address";
              PurchOrderHeader."Ship-to Address 2" := "Ship-to Address 2";
              PurchOrderHeader."Ship-to City" := "Ship-to City";
              PurchOrderHeader."Ship-to Post Code" := "Ship-to Post Code";
              PurchOrderHeader."Ship-to County" := "Ship-to County";
              PurchOrderHeader."Ship-to Country/Region Code" := "Ship-to Country/Region Code";
              PurchOrderHeader."Ship-to Contact" := "Ship-to Contact";

              PurchOrderHeader."Prepayment %" := Vend."Prepayment %";
              IF PurchOrderHeader."Posting Date" = 0D THEN
                PurchOrderHeader."Posting Date" := WORKDATE;
              PurchOrderHeader.MODIFY;
            //**4PS.sn
              PurchHeadExtRec.CopyPurchHeadExtension("Document Type","No.",PurchOrderHeader."Document Type",PurchOrderHeader."No.");
            END;
            //**4PS.en

            PurchBlanketOrderLine.RESET;
            PurchBlanketOrderLine.SETRANGE("Document Type","Document Type");
            PurchBlanketOrderLine.SETRANGE("Document No.","No.");
            //**4PS.sn
            IF PurchBlanketOrderLineNo <> 0 THEN
              PurchBlanketOrderLine.SETRANGE("Line No.",PurchBlanketOrderLineNo);
            //**4PS.en
            IF PurchBlanketOrderLine.FINDSET THEN
              REPEAT
                IF (PurchBlanketOrderLine.Type = PurchBlanketOrderLine.Type::" ") OR
                   (PurchBlanketOrderLine."Qty. to Receive" <> 0)
                THEN BEGIN
                  PurchLine.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                  PurchLine.SETRANGE("Blanket Order No.",PurchBlanketOrderLine."Document No.");
                  PurchLine.SETRANGE("Blanket Order Line No.",PurchBlanketOrderLine."Line No.");
                  QuantityOnOrders := 0;
                  IF PurchLine.FINDSET THEN
                    REPEAT
                      IF (PurchLine."Document Type" = PurchLine."Document Type"::"Return Order") OR
                         ((PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo") AND
                          (PurchLine."Return Shipment No." = ''))
                      THEN
                        QuantityOnOrders := QuantityOnOrders - PurchLine."Outstanding Qty. (Base)"
                      ELSE
                        IF (PurchLine."Document Type" = PurchLine."Document Type"::Order) OR
                           ((PurchLine."Document Type" = PurchLine."Document Type"::Invoice) AND
                            (PurchLine."Receipt No." = ''))
                        THEN
                          QuantityOnOrders := QuantityOnOrders + PurchLine."Outstanding Qty. (Base)";
                    UNTIL PurchLine.NEXT = 0;
                  IF (ABS(PurchBlanketOrderLine."Qty. to Receive (Base)" + QuantityOnOrders +
                        PurchBlanketOrderLine."Qty. Received (Base)") >
                      ABS(PurchBlanketOrderLine."Quantity (Base)")) OR
                     (PurchBlanketOrderLine."Quantity (Base)" * PurchBlanketOrderLine."Outstanding Qty. (Base)" < 0)
                  THEN
                    ERROR(
                      Text000 +
                      '%6\' +
                      '%7 - %8 = %9',
                      PurchBlanketOrderLine.FIELDCAPTION("Qty. to Receive (Base)"),
                      PurchBlanketOrderLine.Type,PurchBlanketOrderLine."No.",
                      PurchBlanketOrderLine.FIELDCAPTION("Line No."),PurchBlanketOrderLine."Line No.",
                      STRSUBSTNO(
                        Text001,
                        PurchBlanketOrderLine.FIELDCAPTION("Outstanding Qty. (Base)"),
                        PurchBlanketOrderLine.FIELDCAPTION("Qty. to Receive (Base)")),
                      PurchBlanketOrderLine."Outstanding Qty. (Base)",QuantityOnOrders,
                      PurchBlanketOrderLine."Outstanding Qty. (Base)" - QuantityOnOrders);

                  PurchOrderLine := PurchBlanketOrderLine;
                  ResetQuantityFields(PurchOrderLine);
                  PurchOrderLine."Document Type" := PurchOrderHeader."Document Type";
                  PurchOrderLine."Document No." := PurchOrderHeader."No.";
                  //**4PS.sn  C000722
                  LastLineNo += 10000;
                  PurchOrderLine."Line No." := LastLineNo;
                  //**4PS.en
                  PurchOrderLine."Blanket Order No." := "No.";
                  PurchOrderLine."Blanket Order Line No." := PurchBlanketOrderLine."Line No.";
                  //**4PS.sn
                  IF (PurchBlanketOrderLine."Service Contract No." <> '') THEN
                    PurchOrderLine."Contract Type" := PurchOrderLine."Contract Type"::"Service Blanket Order"
                  ELSE BEGIN
                    IF (PurchBlanketOrderLine."Job No." <> '') THEN
                      PurchOrderLine."Contract Type" := PurchOrderLine."Contract Type"::"Project Blanket Order"
                    ELSE
                      PurchOrderLine."Contract Type" := PurchOrderLine."Contract Type"::"General Blanket Order";
                  END;
                  //**4PS.en
                  //IF (PurchOrderLine."No." <> '') AND (PurchOrderLine.Type <> 0)THEN BEGIN  //**4PS.o (standard bug)
                  IF PurchOrderLine.Type <> PurchOrderLine.Type::" " THEN BEGIN  //**4PS.n
                    PurchOrderLine.Amount := 0;
                    PurchOrderLine."Amount Including VAT" := 0;
                    //**4PS.sn
                    IF QuantityToPurchase <> 0 THEN
                      PurchOrderLine.VALIDATE(Quantity,QuantityToPurchase)
                    ELSE
                    //**4PS.en
                      PurchOrderLine.VALIDATE(Quantity,PurchBlanketOrderLine."Qty. to Receive");
                    IF PurchBlanketOrderLine."Expected Receipt Date" <> 0D THEN
                      PurchOrderLine.VALIDATE("Expected Receipt Date",PurchBlanketOrderLine."Expected Receipt Date")
                    ELSE
                      PurchOrderLine.VALIDATE("Order Date",PurchOrderHeader."Order Date");
                    PurchOrderLine.VALIDATE("Direct Unit Cost",PurchBlanketOrderLine."Direct Unit Cost");
                    PurchOrderLine.VALIDATE("Line Discount %",PurchBlanketOrderLine."Line Discount %");
                    IF PurchOrderLine.Quantity <> 0 THEN
                      PurchOrderLine.VALIDATE("Inv. Discount Amount",PurchBlanketOrderLine."Inv. Discount Amount");
                    PurchBlanketOrderLine.CALCFIELDS("Reserved Qty. (Base)");
                    IF PurchBlanketOrderLine."Reserved Qty. (Base)" <> 0 THEN
                      ReservePurchLine.TransferPurchLineToPurchLine(
                        PurchBlanketOrderLine,PurchOrderLine,-PurchBlanketOrderLine."Qty. to Receive (Base)");
                  END;

                  IF Vend."Prepayment %" <> 0 THEN
                    PurchOrderLine."Prepayment %" := Vend."Prepayment %";
                  PrepmtMgt.SetPurchPrepaymentPct(PurchOrderLine,PurchOrderHeader."Posting Date");
                  PurchOrderLine.VALIDATE("Prepayment %");

                  PurchOrderLine."Shortcut Dimension 1 Code" := PurchBlanketOrderLine."Shortcut Dimension 1 Code";
                  PurchOrderLine."Shortcut Dimension 2 Code" := PurchBlanketOrderLine."Shortcut Dimension 2 Code";
                  PurchOrderLine."Dimension Set ID" := PurchBlanketOrderLine."Dimension Set ID";
                  PurchOrderLine.DefaultDeferralCode;

                  //**4PS.sn
                  PurchOrderLine."Input by" := USERID; //DP00469
                  PurchOrderLine."Input Date" := TODAY; //DP00469
                  //**4PS.en
                  PurchOrderLine.INSERT;

                  //**4PS.sn
                  PurchOrderLine.CreatePurchOrderControl(FALSE);
                  PurchaseLineExtension.CopyPurchLineExtension(
                    PurchBlanketOrderLine."Document Type", PurchBlanketOrderLine."Document No.", PurchBlanketOrderLine."Line No.",
                    PurchOrderLine."Document Type", PurchOrderLine."Document No.", PurchOrderLine."Line No.");
                  //**4PS.en

                  //**4PS.so
                  //IF PurchBlanketOrderLine."Qty. to Receive" <> 0 THEN BEGIN
                  //  PurchBlanketOrderLine.VALIDATE("Qty. to Receive",0);
                  //  PurchBlanketOrderLine.MODIFY;
                  //END;
                  //**4PS.so

                  //**4PS.sn
                  IF PurchBlanketOrderLine."Qty. to Receive" <> 0 THEN BEGIN
                    IF (PurchBlanketOrderLine."Purchase Route Reference" <> '') THEN BEGIN
                      PurchOrderLine."Purchase Route Reference" := PurchBlanketOrderLine."Purchase Route Reference";
                    END ELSE BEGIN
                      lvLastRefNo := lvRouteRefMgtCU.GetLastRefNo();
                      lvLastRefNo := INCSTR(lvLastRefNo);
                      PurchOrderLine."Purchase Route Reference" := lvLastRefNo;
                      PurchBlanketOrderLine."Purchase Route Reference" := lvLastRefNo;
                    END;
                    //**4PS.sn
                    PurchOrderLine."Modified by" := USERID; //DP00469
                    PurchOrderLine."Last Date Modified" := TODAY;//DP00469
                    //**4PS.en
                    PurchOrderLine.MODIFY;
                    PurchBlanketOrderLine.VALIDATE("Qty. to Receive",0);
                    //**4PS.sn
                    PurchBlanketOrderLine."Modified by" := USERID; //DP00469
                    PurchBlanketOrderLine."Last Date Modified" := TODAY;//DP00469
                    //**4PS.en
                    PurchBlanketOrderLine.MODIFY;
                    lvRouteRefMgtCU.WriteLastRefNo(lvLastRefNo);
                  END ELSE BEGIN
                    IF PurchOrderLine.Quantity = 0 THEN
                      IF PurchOrderLine.Type <> PurchOrderLine.Type::" " THEN
                        PurchOrderLine.DELETE(TRUE);
                  END;
                  //**4PS.en
                END;
              UNTIL PurchBlanketOrderLine.NEXT = 0;

            IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN BEGIN
              PurchOrderHeader."Posting Date" := 0D;
              PurchOrderHeader.MODIFY;
            END;

            CopyCommentsFromBlanketToOrder(Rec);

            IF NOT ShouldRedistributeInvoiceAmount THEN
              PurchCalcDiscByType.ResetRecalculateInvoiceDisc(PurchOrderHeader);

            //**4PS.sn
            //22-12-03 JTH, nieuw document relatie type in afroepcontracten
            DocRelRec.SETRANGE("Document Type",DocRelRec."Document Type"::"Blanket Order");
            DocRelRec.SETRANGE("No.","No.");
            IF DocRelRec.FIND('-') THEN BEGIN
              REPEAT
                DocRel1Rec.COPY(DocRelRec);
                DocRel1Rec."Document Type" := DocRelRec."Document Type"::"Purchase Order";
                DocRel1Rec."No." := PurchOrderHeader."No.";
                DocRel1Rec."Document No." := DocRelRec."Document No.";
                DocRel1Rec.INSERT;
                ParRec.SETRANGE(Type,ParRec.Type::BlanketOrder);
                ParRec.SETRANGE("No.","No.");
                ParRec.SETRANGE("Document No.",DocRel1Rec."Related Document No.");
                IF ParRec.FIND('-') THEN BEGIN
                  REPEAT
                    Par1Rec.COPY(ParRec);
                    Par1Rec.Type := ParRec.Type::Order;
                    Par1Rec."No." := PurchOrderHeader."No.";
                    Par1Rec.INSERT;
                  UNTIL ParRec.NEXT = 0;
                END;
              UNTIL DocRelRec.NEXT = 0;
            END;
            //**4PS.en

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 of %2 %3 in %4 %5 cannot be more than %9.\';
      Text001@1001 : TextConst 'ENU="%1 - Unposted %1 = Possible %2"';
      PurchBlanketOrderLine@1003 : Record 39;
      PurchOrderHeader@1004 : Record 38;
      PurchOrderLine@1005 : Record 39;
      PurchCommentLine@1006 : Record 43;
      PurchCommentLine2@1007 : Record 43;
      PurchSetup@1008 : Record 312;
      PurchLine@1009 : Record 39;
      ReservePurchLine@1010 : Codeunit 99000834;
      PurchCalcDiscByType@1011 : Codeunit 66;
      QuantityOnOrders@1012 : Decimal;
      Text002@1002 : TextConst 'ENU=There is nothing to create.';
      DocRelRec@1210190005 : Record 11012407;
      DocRel1Rec@1210190004 : Record 11012407;
      ParRec@1210190003 : Record 11012072;
      Par1Rec@1210190002 : Record 11012072;
      PurchTextRec@1210190001 : Record 11012067;
      PurchText1Rec@1210190000 : Record 11012067;
      Text11012001@1210190006 : TextConst 'ENU=Generate Purchase Order not allowed, Blanket Order %1 valid until %2.';
      PurchHeadExtRec@1100525004 : Record 11020398;
      PurchaseLineExtension@1100525005 : Record 11020644;
      gAskForNoSerie@1210190007 : Boolean;
      gNoSeries@1210190008 : Code[10];
      PurchBlanketOrderLineNo@1100525000 : Integer;
      QuantityToPurchase@1100525001 : Decimal;
      UseSamePurchaseHeader@1100525002 : Boolean;
      LastLineNo@1100525003 : Integer;

    LOCAL PROCEDURE ResetQuantityFields@1(VAR TempPurchLine@1000 : Record 39);
    BEGIN
      TempPurchLine.Quantity := 0;
      TempPurchLine."Quantity (Base)" := 0;
      TempPurchLine."Qty. Rcd. Not Invoiced" := 0;
      TempPurchLine."Quantity Received" := 0;
      TempPurchLine."Quantity Invoiced" := 0;
      TempPurchLine."Qty. Rcd. Not Invoiced (Base)" := 0;
      TempPurchLine."Qty. Received (Base)" := 0;
      TempPurchLine."Qty. Invoiced (Base)" := 0;
    END;

    PROCEDURE GetPurchOrderHeader@2(VAR PurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader := PurchOrderHeader;
    END;

    LOCAL PROCEDURE CopyCommentsFromBlanketToOrder@3(BlanketOrderPurchaseHeader@1000 : Record 38);
    VAR
      RecordLinkManagement@1001 : Codeunit 447;
    BEGIN
      IF PurchSetup."Copy Comments Blanket to Order" THEN BEGIN
        PurchCommentLine.SETRANGE("Document Type",PurchCommentLine."Document Type"::"Blanket Order");
        PurchCommentLine.SETRANGE("No.",BlanketOrderPurchaseHeader."No.");
        IF PurchCommentLine.FINDSET THEN
          REPEAT
            PurchCommentLine2 := PurchCommentLine;
            PurchCommentLine2."Document Type" := PurchOrderHeader."Document Type";
            PurchCommentLine2."No." := PurchOrderHeader."No.";
            PurchCommentLine2.INSERT;
          UNTIL PurchCommentLine.NEXT = 0;
        RecordLinkManagement.CopyLinks(BlanketOrderPurchaseHeader,PurchOrderHeader);
      END;
    END;

    PROCEDURE SetAskForNoSerie@1210190000(INoSeries@1210190000 : Code[10]);
    BEGIN
      //**4PS
      gAskForNoSerie := TRUE;
      gNoSeries := INoSeries;
    END;

    PROCEDURE SetPurchBlanketOrderLineNo@1100525000(PurchBlanketOrderLineNoNew@1100525000 : Integer;QuantityToPurchaseNew@1100525001 : Decimal);
    BEGIN
      //**4PS
      PurchBlanketOrderLineNo := PurchBlanketOrderLineNoNew;
      QuantityToPurchase := QuantityToPurchaseNew;
      UseSamePurchaseHeader := TRUE;
    END;

    BEGIN
    {
      4PS HBK 13-07-09 Added Function SetPurchBlanketOrderLineNo
    }
    END.
  }
}

