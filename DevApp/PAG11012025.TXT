OBJECT Page 11012025 Project Installments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Project Installments;
    SaveValues=Yes;
    MultipleNewLines=No;
    SourceTable=Table11012018;
    DelayedInsert=Yes;
    DataCaptionFields=Project No.;
    PageType=List;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=ENU=New,Process,Report,Calc Totals;
    OnInit=BEGIN
             ProjectNoEditable := TRUE;
           END;

    OnOpenPage=VAR
                 JobsSetup@1100525000 : Record 315;
               BEGIN
                 Currency.InitRoundingPrecision;
                 JobsSetup.GET();
               END;

    OnAfterGetRecord=BEGIN
                       OnNewRecord := FALSE;
                       GetRelatedData("Project No.",Principal,"VAT Prod. Posting Group","Extension Contract"); // 26494.n
                       RefreshAmounts;
                     END;

    OnNewRecord=VAR
                  lvExtensionContractRec@1100485001 : Record 11012004;
                BEGIN
                  IF ProjectNo <> '' THEN
                    "Project No." := ProjectNo;
                  IF ("Project No." <> '') AND ("Extension Contract" = '') AND (GETFILTER("Extension Contract") <> '') THEN BEGIN
                    IF STRLEN(GETFILTER("Extension Contract")) <= MAXSTRLEN(lvExtensionContractRec."Contract No.") THEN BEGIN
                      IF lvExtensionContractRec.GET("Project No.", GETFILTER("Extension Contract")) THEN
                        "Extension Contract" := lvExtensionContractRec."Contract No."
                    END;
                  END;
                  IF ( "Project No." <> '') AND (Principal = '') AND (xRec.Principal <> '') THEN BEGIN
                    IF ProjPrincipalRec.GET("Project No.", xRec.Principal) THEN
                      VALIDATE(Principal, xRec.Principal);
                  END;
                  IF ( "Project No." <> '') AND ("Plot No." = '') AND (xRec."Plot No." <> '') THEN BEGIN
                    IF PlotRec.GET("Project No.", xRec."Plot No.") THEN
                      VALIDATE("Plot No.", xRec."Plot No.");
                  END;
                  GetDefaultNr();
                  CALCFIELDS("Installment Total  (LCY)");
                  OnNewRecord := TRUE;
                END;

    OnInsertRecord=BEGIN
                     OnNewRecord := FALSE;
                   END;

    OnAfterGetCurrRecord=BEGIN
                           CalculateTotals;
                           GetRelatedData("Project No.",Principal,"VAT Prod. Posting Group","Extension Contract");
                           UpdateEditable;
                         END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525005;1 ;Action    ;
                      CaptionML=ENU=Show Cumulatives;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Calculate;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 IF ShowCumulatives THEN
                                   ShowCumulatives := FALSE
                                 ELSE
                                   ShowCumulatives := TRUE;

                                 CalculateTotals;
                               END;
                                }
      { 1100525003;1 ;Action    ;
                      CaptionML=ENU=Incl. / Exlc. VAT;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Calculate;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 IF AmountsInclVAT THEN
                                   AmountsInclVAT := FALSE
                                 ELSE
                                   AmountsInclVAT := TRUE;

                                 CalculateTotals;
                               END;
                                }
      { 1210190050;1 ;ActionGroup;
                      CaptionML=ENU=Invoice }
      { 1100485035;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create &Invoices;
                      Promoted=Yes;
                      Image=CreateJobSalesInvoice;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Job@1210190001 : Record 11072003;
                               BEGIN
                                 // jhoek.270611.begin: melding 16372
                                 //ProjPrincipalRec.SETRANGE("Project No.","Project No.");
                                 //REPORT.RUNMODAL(REPORT::"Create Project Invoices",TRUE,FALSE,ProjPrincipalRec);
                                 Job.GET("Project No.");
                                 Job.SETRECFILTER;
                                 REPORT.RUNMODAL(REPORT::"Create Project Invoices", TRUE, FALSE, Job);
                                 // jhoek.270611.end
                               END;
                                }
      { 1210190053;2 ;Action    ;
                      CaptionML=ENU=Set Chargeable (Selected Lines);
                      Image=CompleteLine;
                      OnAction=VAR
                                 ProjectInstallment@1100525000 : Record 11012018;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ProjectInstallment);
                                 ProjectInstallment.SetChargeableCollective;
                               END;
                                }
      { 1210190054;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Set &Chargeable (Selections);
                      Image=CompleteLine;
                      OnAction=VAR
                                 ProjInstall@1210190000 : Record 11012018;
                               BEGIN
                                 //*15086.n
                                 ProjInstall.SETRANGE("Project No.", "Project No.");
                                 REPORT.RUNMODAL(REPORT::"Set Proj. Installm. Chargeable", TRUE, TRUE, ProjInstall);
                               END;
                                }
      { 1100485034;1 ;ActionGroup;
                      CaptionML=ENU=Process }
      { 1210190043;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Update Exp. Installmt. Invoice Dates;
                      Image=ChangeDates;
                      OnAction=VAR
                                 ProjectInstallment@1210190000 : Record 11012018;
                               BEGIN
                                 // jhoek.210611: melding 19735
                                 ProjectInstallment.SETRANGE("Project No.", "Project No.");
                                 ProjectInstallment.SETRANGE(Principal, Principal);

                                 REPORT.RUNMODAL(REPORT::"Upd. Exp. Installm. Inv. Dates", TRUE, FALSE, ProjectInstallment);
                               END;
                                }
      { 1210190052;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Generate Progress;
                      Image=CalcWorkCenterCalendar;
                      OnAction=VAR
                                 lvProjRec@1210190001 : Record 11072003;
                                 lvGenProgressFromInstallmRpt@1210190000 : Report 11020212;
                               BEGIN
                                 lvProjRec.GET("Project No.");
                                 lvProjRec.TESTFIELD("Progress from Instal. Progress", TRUE);
                                 lvGenProgressFromInstallmRpt.SetDefaultSelection("Project No.", TODAY);
                                 lvGenProgressFromInstallmRpt.RUNMODAL;
                               END;
                                }
      { 1210190051;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Calculate Interest Installment;
                      Image=CalculateBalanceAccount;
                      OnAction=VAR
                                 lvProjInstallRec@1210190000 : Record 11012018;
                               BEGIN
                                 //**4PS01.sn
                                 lvProjInstallRec.SETRANGE("Project No.", "Project No.");
                                 REPORT.RUNMODAL(REPORT::"Calc. Int. Plot Installments", TRUE, FALSE, lvProjInstallRec);
                                 //**4PS01.en
                               END;
                                }
      { 1100525001;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Change Orig. Contract Install. Date;
                      Image=ChangeDates;
                      OnAction=VAR
                                 ProjectInstallment@1210190000 : Record 11012018;
                               BEGIN
                                 ResetOrigContractInstDate;
                               END;
                                }
      { 1210190004;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1210190002;1 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=&Print;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 PrintDocument@1100485001 : Codeunit 229;
                                 ProjInstall@1210190001 : Record 11012018;
                               BEGIN
                                 //PrintDocument.PrintProjectInstallments(Rec);  //*32118.o

                                 //*32118.sn
                                 ProjInstall.COPY(Rec);
                                 IF ProjectFilterGroup > 0 THEN BEGIN
                                   ProjInstall.FILTERGROUP(ProjectFilterGroup);
                                   ProjInstall.SETRANGE("Project No.");  //* Reset
                                   ProjInstall.FILTERGROUP(0);
                                   //
                                   FILTERGROUP(ProjectFilterGroup);
                                   COPYFILTER("Project No.", ProjInstall."Project No.");
                                   FILTERGROUP(0);
                                 END;
                                 PrintDocument.PrintProjectInstallments(ProjInstall);
                                 //*32118.en
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Project No.";
                Visible=FALSE;
                Editable=ProjectNoEditable;
                OnValidate=BEGIN
                             IF OnNewRecord AND ("Project No." <> xRec."Project No.") THEN
                               GetDefaultNr;
                           END;
                            }

    { 1100525007;2;Field  ;
                CaptionML=ENU=Project Description;
                SourceExpr=ProjRec.Description;
                TableRelation=Job.Description WHERE (No.=FIELD(Project No.));
                Visible=FALSE;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr=Principal;
                OnValidate=BEGIN
                             IF OnNewRecord AND (Principal <> xRec.Principal) THEN
                               GetDefaultNr;
                           END;
                            }

    { 1100525012;2;Field  ;
                CaptionML=ENU=Principal Name;
                SourceExpr=GetPrincipalName;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Plot No.";
                OnValidate=BEGIN
                             IF OnNewRecord AND ("Plot No." <> xRec."Plot No.") THEN
                               GetDefaultNr;
                           END;
                            }

    { 1100485018;2;Field  ;
                SourceExpr="House Model";
                Visible=FALSE }

    { 1100485020;2;Field  ;
                SourceExpr="Block No.";
                Visible=FALSE }

    { 1100485012;2;Field  ;
                SourceExpr="Seq. No. in Block";
                Visible=FALSE }

    { 1100485016;2;Field  ;
                SourceExpr="Floor No.";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Installment No." }

    { 10  ;2   ;Field     ;
                SourceExpr="Extension Contract";
                OnValidate=BEGIN
                             CurrPage.UPDATE;  // 26494.n
                           END;
                            }

    { 1210190037;2;Field  ;
                SourceExpr="Description Extension Contract";
                Visible=FALSE }

    { 1210190044;2;Field  ;
                SourceExpr="Main Group";
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                SourceExpr=Group;
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Sub Group";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                SourceExpr=Option;
                Visible=FALSE }

    { 1210190000;2;Field  ;
                SourceExpr=Element;
                Visible=FALSE }

    { 1210190048;2;Field  ;
                DrillDown=No;
                SourceExpr="Element Description";
                Visible=FALSE }

    { 1210190055;2;Field  ;
                CaptionML=ENU=Principal Reference;
                SourceExpr=PrincipalReference;
                Visible=FALSE;
                Editable=FALSE }

    { 1100485010;2;Field  ;
                SourceExpr="Cost Component";
                Visible=FALSE }

    { 18  ;2   ;Field     ;
                SourceExpr="Cost Object";
                LookupPageID=Cost Object List }

    { 1100485002;2;Field  ;
                SourceExpr="Installment Scheme SerNo.";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr=Description }

    { 22  ;2   ;Field     ;
                SourceExpr="VAT Prod. Posting Group" }

    { 24  ;2   ;Field     ;
                SourceExpr=Points;
                Visible=FALSE }

    { 1100485004;2;Field  ;
                SourceExpr="Percentage Contract Amount";
                Visible=FALSE }

    { 1100525002;2;Field  ;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 1100525000;2;Field  ;
                SourceExpr="Installment Amount" }

    { 26  ;2   ;Field     ;
                SourceExpr="Installment Amount (LCY)";
                Visible=FALSE;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100485026;2;Field  ;
                SourceExpr="VAT Amount Long Lease";
                Visible=False }

    { 1210190007;2;Field  ;
                SourceExpr="Expected Invoice Date";
                Visible=FALSE }

    { 1210190061;2;Field  ;
                SourceExpr="Orig Contract Installment Date";
                Visible=FALSE;
                Editable=false }

    { 1210190063;2;Field  ;
                SourceExpr=Remarks;
                Visible=FALSE }

    { 1100525018;2;Field  ;
                SourceExpr="Commission No.";
                Visible=false }

    { 30  ;2   ;Field     ;
                SourceExpr=Chargeable }

    { 1210190005;2;Field  ;
                SourceExpr="Percentage Points";
                Visible=FALSE }

    { 1100485000;2;Field  ;
                SourceExpr="Total Percentage Points";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                SourceExpr="Points to be invoiced";
                Visible=FALSE }

    { 1100525004;2;Field  ;
                SourceExpr="Invoice Price" }

    { 34  ;2   ;Field     ;
                SourceExpr="Invoice Price (LCY)";
                Visible=False }

    { 1100485028;2;Field  ;
                SourceExpr="Invoice VAT Amount Long Lease";
                Visible=False }

    { 1100525006;2;Field  ;
                SourceExpr="Invoice in Process" }

    { 36  ;2   ;Field     ;
                SourceExpr="Invoice in Process (LCY)";
                Visible=False }

    { 1100525008;2;Field  ;
                AssistEdit=Yes;
                SourceExpr="Invoiced Price";
                OnAssistEdit=BEGIN
                               ShowPostedInvoices; //C018872
                             END;
                              }

    { 1210190059;2;Field  ;
                AssistEdit=Yes;
                CaptionML=ENU=Invoiced Price Including VAT;
                BlankZero=Yes;
                SourceExpr=InvoicedPriceInclVAT;
                Visible=False;
                OnAssistEdit=BEGIN
                               ShowPostedInvoices; //C018872
                             END;
                              }

    { 38  ;2   ;Field     ;
                AssistEdit=Yes;
                SourceExpr="Invoiced Price (LCY)";
                Visible=False;
                OnAssistEdit=BEGIN
                               ShowPostedInvoices; //C018872
                             END;
                              }

    { 1100525019;2;Field  ;
                SourceExpr="Credit Memo in Process" }

    { 40  ;2   ;Field     ;
                SourceExpr="Credit Memo in Process (LCY)";
                Visible=False }

    { 42  ;2   ;Field     ;
                CaptionML=ENU=Points Invoiced;
                BlankZero=Yes;
                SourceExpr=InvoicedPoints;
                Visible=FALSE;
                Editable=FALSE }

    { 44  ;2   ;Field     ;
                CaptionML=ENU=Payed;
                BlankZero=Yes;
                SourceExpr=InvoicePayment;
                Editable=FALSE }

    { 1210190057;2;Field  ;
                CaptionML=ENU=Payed included VAT;
                BlankZero=Yes;
                SourceExpr=InvoicePaymentInclVAT;
                Visible=FALSE }

    { 1100525100;2;Field  ;
                SourceExpr="RAW Final Installment";
                Visible=FALSE }

    { 1210190031;2;Field  ;
                SourceExpr="Last Installment";
                Visible=False }

    { 1210190041;2;Field  ;
                SourceExpr="Due Date Base" }

    { 1210190046;2;Field  ;
                DrillDown=No;
                CaptionML=ENU=Payment Terms Code;
                SourceExpr=GetPaymentTermsCode();
                Visible=FALSE }

    { 1100485006;2;Field  ;
                DrillDown=No;
                SourceExpr="Credit Restriction";
                Visible=FALSE }

    { 1210190033;2;Field  ;
                SourceExpr="Due Date Actual";
                Visible=FALSE }

    { 1100485022;2;Field  ;
                SourceExpr="Period Start";
                Visible=FALSE }

    { 1100485024;2;Field  ;
                SourceExpr="Period End";
                Visible=FALSE }

    { 1210190035;2;Field  ;
                SourceExpr="Interest Installment";
                Visible=FALSE }

    { 1100485126;2;Field  ;
                SourceExpr="Project Activity No.";
                Visible=False }

    { 1210190039;2;Field  ;
                SourceExpr="Interest Inst. No. Transfer";
                Visible=FALSE }

    { 1100525009;2;Field  ;
                SourceExpr="Document (in Process)" }

    { 1100525010;2;Field  ;
                SourceExpr="Document (Invoiced)" }

    { 1100409028;1;Group  ;
                CaptionML=ENU=Totals;
                GroupType=Group }

    { 1100409000;2;Group  ;
                GroupType=FixedLayout }

    { 1100409023;3;Group  ;
                GroupType=Group }

    { 1100409022;4;Field  ;
                Name=Option2;
                SourceExpr=Option;
                Editable=FALSE }

    { 1100409021;4;Field  ;
                Name=ExtContract2;
                SourceExpr="Extension Contract";
                Editable=FALSE }

    { 1100409020;4;Field  ;
                Name=PlotNo2;
                SourceExpr="Plot No.";
                Editable=FALSE }

    { 1100409019;4;Field  ;
                Name=Principal2;
                SourceExpr=Principal;
                Editable=FALSE }

    { 1100409018;4;Field  ;
                Name=ProjectNo2;
                SourceExpr="Project No.";
                Editable=FALSE }

    { 1100409017;4;Field  ;
                Name=WKAPeriod;
                CaptionML=ENU=Current WKA Period;
                SourceExpr=ProjPrincipalRec."WKA Period";
                CaptionClass=FORMAT (STRSUBSTNO(Text001, FIELDCAPTION(Principal), Principal));
                Enabled=WKAPeriodENABLED;
                OnValidate=BEGIN
                             ProjPrincipalRecWKAPeriodOnAft;
                           END;
                            }

    { 1100409016;3;Group  ;
                CaptionML=ENU=Installments;
                GroupType=Group }

    { 1100409015;4;Field  ;
                DrillDown=No;
                CaptionML=ENU=Option;
                BlankZero=Yes;
                SourceExpr=TotInstallAmnt[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409014;4;Field  ;
                DrillDown=No;
                CaptionML=ENU=Extension Contract;
                BlankZero=Yes;
                SourceExpr=TotInstallAmnt[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409013;4;Field  ;
                DrillDown=No;
                CaptionML=ENU=Plot No.;
                BlankZero=Yes;
                SourceExpr=TotInstallAmnt[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409012;4;Field  ;
                DrillDown=No;
                CaptionML=ENU=Principal;
                BlankZero=Yes;
                SourceExpr=TotInstallAmnt[4];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409011;4;Field  ;
                DrillDown=No;
                CaptionML=ENU=Project No.;
                BlankZero=Yes;
                SourceExpr=TotInstallAmnt[5];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409010;3;Group  ;
                CaptionML=ENU=Contract Amount;
                GroupType=Group }

    { 1100409009;4;Field  ;
                CaptionML=ENU=Option;
                BlankZero=Yes;
                SourceExpr=TotContractAmnt[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409008;4;Field  ;
                CaptionML=ENU=Extension Contract;
                BlankZero=Yes;
                SourceExpr=TotContractAmnt[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409007;4;Field  ;
                CaptionML=ENU=Plot No.;
                BlankZero=Yes;
                SourceExpr=TotContractAmnt[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409006;4;Field  ;
                CaptionML=ENU=Principal;
                BlankZero=Yes;
                SourceExpr=TotContractAmnt[4];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409005;4;Field  ;
                CaptionML=ENU=Project No.;
                BlankZero=Yes;
                SourceExpr=TotContractAmnt[5];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100525017;3;Group  ;
                CaptionML=ENU=Extension Contract;
                GroupType=Group }

    { 1100525016;4;Field  ;
                CaptionML=ENU=Option;
                BlankZero=Yes;
                SourceExpr=ExtensionContractAmnt[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100525015;4;Field  ;
                CaptionML=ENU=Extension Contract;
                BlankZero=Yes;
                SourceExpr=ExtensionContractAmnt[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100525014;4;Field  ;
                CaptionML=ENU=Plot No.;
                BlankZero=Yes;
                SourceExpr=ExtensionContractAmnt[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100525013;4;Field  ;
                CaptionML=ENU=Principal;
                BlankZero=Yes;
                SourceExpr=ExtensionContractAmnt[4];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100525011;4;Field  ;
                CaptionML=ENU=Project No.;
                BlankZero=Yes;
                SourceExpr=ExtensionContractAmnt[5];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409004;3;Group  ;
                CaptionML=ENU=Plot Price;
                GroupType=Group }

    { 1100528400;4;Field  ;
                BlankZero=Yes;
                SourceExpr=TotPlotPrice[1] }

    { 1100528401;4;Field  ;
                BlankZero=Yes;
                SourceExpr=TotPlotPrice[2] }

    { 1100409003;4;Field  ;
                CaptionML=ENU=Plot No.;
                BlankZero=Yes;
                SourceExpr=TotPlotPrice[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409002;4;Field  ;
                CaptionML=ENU=Principal;
                BlankZero=Yes;
                SourceExpr=TotPlotPrice[4];
                AutoFormatType=1;
                Editable=FALSE }

    { 1100409001;4;Field  ;
                Name=OnAfterGetCurrRecord;
                CaptionML=ENU=Project No.;
                BlankZero=Yes;
                SourceExpr=TotPlotPrice[5];
                AutoFormatType=1;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text000@11012004 : TextConst 'ENU=Plot Installment';
      ProjRec@11012001 : Record 11072003;
      ProjPrincipalRec@11012002 : Record 11012005;
      ProjInstalmRec@1210190001 : Record 11012018;
      ExtensionRec@1210190002 : Record 11012004;
      PlotRec@1210190003 : Record 11012500;
      OptionRec@1210190006 : Record 11012502;
      VatPostingSetup@1100485005 : Record 325;
      Currency@1100485006 : Record 4;
      ProjectFilterGroup@1210190008 : Integer;
      TotContractAmnt@1210190000 : ARRAY [5] OF Decimal;
      TotInstallAmnt@1210190004 : ARRAY [5] OF Decimal;
      TotPlotPrice@1210190005 : ARRAY [5] OF Decimal;
      Text001@1100485000 : TextConst 'ENU=WKA Period - %1 %2';
      ShowCumulatives@1100485002 : Boolean INDATASET;
      AmountsInclVAT@1100485004 : Boolean INDATASET;
      VATBusPostingGroup@1100485003 : Code[20];
      PrincipalReference@1210190007 : Text[50];
      "VAT Amount Long LeaseEditable"@1100409003 : Boolean INDATASET;
      WKAPeriodENABLED@1100409000 : Boolean INDATASET;
      ProjectNo@1100528701 : Code[20];
      ProjectNoEditable@1100528700 : Boolean INDATASET;
      ExtensionContractAmnt@1100525000 : ARRAY [5] OF Decimal;
      OnNewRecord@1100525001 : Boolean;

    PROCEDURE InvoicePayment@2() : Decimal;
    VAR
      CustEntryRec@11012000 : Record 21;
      ProjLedgEntryRec@11012001 : Record 11072005;
      PercDec@11012002 : Decimal;
      Fbet@11012003 : Decimal;
    BEGIN
      Fbet := 0;
      ProjLedgEntryRec.SETCURRENTKEY("Project Invoice", "Installment Invoice", "Job No.", Principal, "Installment No.");
      ProjLedgEntryRec.SETRANGE("Project Invoice", TRUE);
      ProjLedgEntryRec.SETRANGE("Installment Invoice", TRUE);
      ProjLedgEntryRec.SETRANGE("Job No.", "Project No.");
      ProjLedgEntryRec.SETRANGE(Principal, Principal);
      ProjLedgEntryRec.SETRANGE("Plot No.","Plot No.");
      ProjLedgEntryRec.SETRANGE("Installment No.", "Installment No.");
      ProjLedgEntryRec.SETRANGE("Entry Type",ProjLedgEntryRec."Entry Type"::Sale);
      IF ProjLedgEntryRec.FINDSET THEN
        REPEAT
          CustEntryRec.SETCURRENTKEY("Document No.");
          CustEntryRec.SETFILTER(
            "Document Type",'%1|%2',CustEntryRec."Document Type"::Invoice,CustEntryRec."Document Type"::"Credit Memo");
          CustEntryRec.SETRANGE("Document No.", ProjLedgEntryRec."Document No.");
          //Invoicing to other customer then principal possible, depending on customerdata. Document No. is sufficient.
          IF CustEntryRec.FINDFIRST THEN BEGIN
            CustEntryRec.CALCFIELDS("Amount (LCY)","Remaining Amt. (LCY)");
            IF CustEntryRec."Amount (LCY)" <> 0 THEN BEGIN
              PercDec := (-1 * ProjLedgEntryRec."Total Price (LCY)") / CustEntryRec."Amount (LCY)";
              Fbet := Fbet + ROUND((PercDec * (CustEntryRec."Amount (LCY)" - CustEntryRec."Remaining Amt. (LCY)")),0.01);
            END;
          END;
        UNTIL ProjLedgEntryRec.NEXT = 0;
      EXIT(Fbet);
    END;

    PROCEDURE InvoicePaymentInclVAT@1210190005() : Decimal;
    VAR
      CustEntryRec@11012000 : Record 21;
      ProjLedgEntryRec@11012001 : Record 11072005;
      PercDec@11012002 : Decimal;
      Fbet@11012003 : Decimal;
    BEGIN
      // C-027114.n
      Fbet := 0;
      ProjLedgEntryRec.SETCURRENTKEY("Project Invoice", "Installment Invoice", "Job No.", Principal, "Installment No.");
      ProjLedgEntryRec.SETRANGE("Project Invoice", TRUE);
      ProjLedgEntryRec.SETRANGE("Installment Invoice", TRUE);
      ProjLedgEntryRec.SETRANGE("Job No.", "Project No.");
      ProjLedgEntryRec.SETRANGE(Principal, Principal);
      ProjLedgEntryRec.SETRANGE("Plot No.","Plot No.");
      ProjLedgEntryRec.SETRANGE("Installment No.", "Installment No.");
      ProjLedgEntryRec.SETRANGE("Entry Type",ProjLedgEntryRec."Entry Type"::Sale);
      IF ProjLedgEntryRec.FINDSET THEN
        REPEAT
          CustEntryRec.SETCURRENTKEY("Document No.");
          CustEntryRec.SETFILTER(
            "Document Type",'%1|%2',CustEntryRec."Document Type"::Invoice,CustEntryRec."Document Type"::"Credit Memo");
          CustEntryRec.SETRANGE("Document No.", ProjLedgEntryRec."Document No.");
          //Invoicing to other customer then principal possible, depending on customerdata. Document No. is sufficient.
          IF CustEntryRec.FINDFIRST THEN BEGIN
            CustEntryRec.CALCFIELDS("Amount (LCY)","Remaining Amt. (LCY)");
            IF CustEntryRec."Sales (LCY)" <> 0 THEN BEGIN
              PercDec := (-1 * ProjLedgEntryRec."Total Price (LCY)") / CustEntryRec."Sales (LCY)";
              Fbet := Fbet + ROUND((PercDec * (CustEntryRec."Amount (LCY)" - CustEntryRec."Remaining Amt. (LCY)")),0.01);
            END;
          END;
        UNTIL ProjLedgEntryRec.NEXT = 0;
      EXIT(Fbet);
    END;

    PROCEDURE InvoicedPriceInclVAT@1210190001() : Decimal;
    VAR
      InvPriceInclVAT@11012003 : Decimal;
    BEGIN
      // C-027114.n
      InvPriceInclVAT := 0;
      IF "Installment Amount" <> 0 THEN
        InvPriceInclVAT := ROUND("Invoiced Price" * "Installment Amount Incl. VAT"/"Installment Amount",0.01);
      EXIT(InvPriceInclVAT);
    END;

    PROCEDURE RefreshAmounts@1100530000();
    BEGIN
      //Call 23226
      CALCFIELDS("Invoiced Price","Invoice in Process", "Credit Memo in Process");
      CALCFIELDS("Invoiced Price (LCY)","Invoice in Process (LCY)", "Credit Memo in Process (LCY)");
      CALCFIELDS("Document (in Process)","Document (Invoiced)");  //db, 08-10-13
    END;

    PROCEDURE SetProjectFilterGroup@1210190002(FilterGroup@1210190000 : Integer);
    BEGIN
      //*32118
      ProjectFilterGroup := FilterGroup;
    END;

    PROCEDURE GetDefaultNr@1();
    VAR
      lvGenerateProjInstalmCu@1100485000 : Codeunit 11012007;
    BEGIN
      IF Principal <> '' THEN BEGIN
        ValidatePrincipal;  //db, 30-06-15: C022459
        DetermineVATPPG("VAT Prod. Posting Group" = '');
        "Installment No." := lvGenerateProjInstalmCu.GetFreeInstallmentNo("Project No.", Principal, "Plot No.");
        IF ("Extension Contract" = '') AND (Option = '') THEN BEGIN
          ProjInstalmRec.RESET;
          ProjInstalmRec.SETRANGE("Project No.","Project No.");
          ProjInstalmRec.SETRANGE(Principal,Principal);
          IF ProjInstalmRec.ISEMPTY THEN BEGIN
            IF CheckPlotInstallmentCreated THEN BEGIN
              "Installment No." := '0';
              Description := Text000;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CheckPlotInstallmentCreated@3() : Boolean;
    BEGIN
      IF NOT ProjPrincipalRec.GET("Project No.",Principal) THEN
        EXIT(FALSE);

      IF ProjPrincipalRec."Plot Price" = 0 THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GetContractAmount@1210190000() : Decimal;
    BEGIN
      IF "Plot No." <> '' THEN BEGIN
        PlotRec.GET("Project No.", "Plot No.");
        EXIT(PlotRec."Building Price" + PlotRec."Additional Costs");
      END;

      IF "Extension Contract" <> '' THEN BEGIN
        ExtensionRec.GET("Project No.", "Extension Contract");
        EXIT(ExtensionRec."Contract Amount");
      END;

      IF ProjPrincipalRec.GET("Project No.", Principal) THEN
        EXIT(ProjPrincipalRec."Contract Amount")
      ELSE
        EXIT(0);
    END;

    PROCEDURE CalculateTotals@1100485000();
    BEGIN
      //* 25-01-08  Changed on request of EK.
      //* To determine installments, set filter according to schema below:
      //*
      //* LEVEL         | CUMULAT.   | PROJECT | PRINCIPAL | Ext.-CONTR. | PLOT NO.   | OPTION
      //* ========================================================================================
      //* Option        | Off        |    x    |     x     |      -      |     x      |   x
      //*               | On         |    x    |     -     |      -      |     -      |   x
      //* ----------------------------------------------------------------------------------------
      //* Extension-    | Off        |    x    |     x     |      x      |     -      |   -
      //* Contract      | On         |    x    |     x     |      x      |     -      |   -
      //* ----------------------------------------------------------------------------------------
      //* Plot No.      | Off        |    x    |     -     |      -      |     x      |   ''
      //*               | On         |    x    |     -     |      -      |     x      |   -
      //* ---------------------------------------------------------------------------------------
      //* Principal     | Off        |    x    |     x     |      ''     |     ''     |   ''
      //*               | On         |    x    |     x     |      -      |     -      |   -
      //* ----------------------------------------------------------------------------------------
      //* Project       | Off        |    x    |     -     |      ''     |     ''     |   ''
      //*               | On         |    x    |     -     |      -      |     -      |   -
      //* ----------------------------------------------------------------------------------------
      //*
      //* x  = Set filter to value of current line
      //* -  = Set no filter on field
      //* '' = Filter is empty

      CLEAR(TotContractAmnt);
      CLEAR(TotInstallAmnt);
      CLEAR(TotPlotPrice);
      CLEAR(ExtensionContractAmnt);  //db, 29-06-15: C024360

      //* Calculate Option Amounts...
      IF Option <> '' THEN BEGIN
        ResetProjInstallForCalcTotals();
        ProjInstalmRec.SETRANGE(Option,Option);
        IF NOT ShowCumulatives THEN BEGIN
          ProjInstalmRec.SETRANGE(Principal,Principal);
          ProjInstalmRec.SETRANGE("Plot No.","Plot No.");
        END;
        ProjInstalmRec.CALCSUMS("Installment Amount");
        TotInstallAmnt[1] := ProjInstalmRec."Installment Amount";
        AddVATAmount(TotInstallAmnt[1]);

        OptionRec.RESET;
        OptionRec.SETRANGE("Project No.", "Project No.");
        OptionRec.SETRANGE(Option,Option);
        IF ShowCumulatives THEN
          OptionRec.SETFILTER("Plot No.", '<>%1', '')  //* Only Options on Plot No. level (so not on f.e. proj/model level)
        ELSE BEGIN
          OptionRec.SETRANGE(Principal,Principal);
          OptionRec.SETRANGE("Plot No.","Plot No.");
        END;
        OptionRec.SETRANGE(Status, OptionRec.Status::Order, OptionRec.Status::Invoice);  //*C-026351.n
        IF OptionRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            TotContractAmnt[1] += OptionRec."Contract Amount";
          UNTIL OptionRec.NEXT = 0;
      END;

      //* Calculate Extension Amounts...
      IF "Extension Contract" <> '' THEN BEGIN
        ResetProjInstallForCalcTotals();
        ProjInstalmRec.SETRANGE(Principal,Principal);
        ProjInstalmRec.SETRANGE("Extension Contract","Extension Contract");
        ProjInstalmRec.CALCSUMS("Installment Amount");
        TotInstallAmnt[2] := ProjInstalmRec."Installment Amount";
        AddVATAmount(TotInstallAmnt[2]);

        IF ExtensionRec.GET("Project No.", "Extension Contract") THEN
          IF ExtensionRec.Status IN [ExtensionRec.Status::Order, ExtensionRec.Status::"Invoicing Allowed"] THEN  //*C-026351.n
            TotContractAmnt[2] := ExtensionRec."Contract Amount";

        ExtensionContractAmnt[2] := TotContractAmnt[2];   //db, 29-06-15: C024360
      END;

      //* Calculate Plot Amounts...
      IF "Plot No." <> '' THEN BEGIN
        ResetProjInstallForCalcTotals();
        ProjInstalmRec.SETRANGE("Plot No.","Plot No.");
        IF NOT ShowCumulatives THEN
          ProjInstalmRec.SETRANGE(Option, '');
        ProjInstalmRec.CALCSUMS("Installment Amount");
        TotInstallAmnt[3] := ProjInstalmRec."Installment Amount";
        AddVATAmount(TotInstallAmnt[3]);

        IF PlotRec.GET("Project No.", "Plot No.") THEN BEGIN
          TotContractAmnt[3] := PlotRec."Building Price" + PlotRec."Additional Costs";
          IF ShowCumulatives THEN BEGIN
            OptionRec.RESET;
            OptionRec.SETRANGE("Project No.", "Project No.");
            OptionRec.SETRANGE("Plot No.","Plot No.");
            OptionRec.SETRANGE(Status, OptionRec.Status::Order, OptionRec.Status::Invoice);  //*C-026351.n
            IF OptionRec.FINDSET(FALSE, FALSE) THEN
              REPEAT
                TotContractAmnt[3] += OptionRec."Contract Amount";
              UNTIL OptionRec.NEXT = 0;
          END;
          TotPlotPrice[3] := PlotRec."Plot Price";
        END;
      END;

      //* Calculate Principal Amounts...
      ResetProjInstallForCalcTotals();
      ProjInstalmRec.SETRANGE(Principal,Principal);
      IF NOT ShowCumulatives THEN BEGIN
        ProjInstalmRec.SETRANGE("Extension Contract", '');
        ProjInstalmRec.SETRANGE("Plot No.", '');
        ProjInstalmRec.SETRANGE(Option, '');
      END;
      ProjInstalmRec.CALCSUMS("Installment Amount");
      TotInstallAmnt[4] := ProjInstalmRec."Installment Amount";
      AddVATAmount(TotInstallAmnt[4]);

      GetRelatedData("Project No.",Principal,"VAT Prod. Posting Group","Extension Contract");  //* Read here!
      IF ProjPrincipalRec."Project No." <> '' THEN BEGIN
        TotContractAmnt[4] := ProjPrincipalRec."Contract Amount";
        TotPlotPrice[4] := ProjPrincipalRec."Plot Price";

        //db.sn, 29-06-15: C024360
        ExtensionRec.RESET;
        ExtensionRec.SETCURRENTKEY("Project No.",Principal,Status,"Version Date");
        ExtensionRec.SETRANGE("Project No.","Project No.");
        ExtensionRec.SETRANGE(Principal, Principal);
        ExtensionRec.SETRANGE(Status, ExtensionRec.Status::Order, ExtensionRec.Status::"Invoicing Allowed");  //*C-026351.n
        ExtensionRec.CALCSUMS("Contract Amount");
        ExtensionContractAmnt[4] := ExtensionRec."Contract Amount";
        //db.en, 29-06-15: C024360

        IF ShowCumulatives THEN BEGIN
          OptionRec.RESET;
          OptionRec.SETRANGE("Project No.", "Project No.");
          OptionRec.SETRANGE(Principal, Principal);
          OptionRec.SETFILTER("Plot No.", '<>%1', '');   //* Only Options on Plot No. level (so not on f.e. proj/model level)
          OptionRec.SETRANGE(Status, OptionRec.Status::Order, OptionRec.Status::Invoice);  //*C-026351.n
          IF OptionRec.FINDSET(FALSE, FALSE) THEN
            REPEAT
              TotContractAmnt[4] += OptionRec."Contract Amount";
            UNTIL OptionRec.NEXT = 0;

          ExtensionRec.RESET;
          ExtensionRec.SETCURRENTKEY("Project No.",Principal,Status,"Version Date");
          ExtensionRec.SETRANGE("Project No.","Project No.");
          ExtensionRec.SETRANGE(Principal, Principal);
          ExtensionRec.SETRANGE(Status, ExtensionRec.Status::Order, ExtensionRec.Status::"Invoicing Allowed");  //*C-026351.n
          ExtensionRec.CALCSUMS("Contract Amount");
          TotContractAmnt[4] += ExtensionRec."Contract Amount";
        END;
      END;

      // Calculate Project Amounts...
      ResetProjInstallForCalcTotals();
      IF NOT ShowCumulatives THEN BEGIN
        ProjInstalmRec.SETRANGE("Extension Contract", '');
        ProjInstalmRec.SETRANGE("Plot No.", '');
        ProjInstalmRec.SETRANGE(Option, '');
      END;
      ProjInstalmRec.CALCSUMS("Installment Amount");
      TotInstallAmnt[5] := ProjInstalmRec."Installment Amount";
      AddVATAmount(TotInstallAmnt[5]);

      IF ProjRec."No." <> '' THEN BEGIN
        ProjRec.CALCFIELDS("Contract Amount", "Plot Price");

        TotContractAmnt[5] := ProjRec."Contract Amount";
        TotPlotPrice[5] := ProjRec."Plot Price";

        //db.sn, 29-06-15: C024360
        ExtensionRec.RESET;
        ExtensionRec.SETCURRENTKEY("Project No.",Principal,Status,"Version Date");
        ExtensionRec.SETRANGE("Project No.","Project No.");
        ExtensionRec.SETRANGE(Status, ExtensionRec.Status::Order, ExtensionRec.Status::"Invoicing Allowed");  //*C-026351.n
        ExtensionRec.CALCSUMS("Contract Amount");
        ExtensionContractAmnt[5] := ExtensionRec."Contract Amount";
        //db.en, 29-06-15: C024360

        IF ShowCumulatives THEN BEGIN
          OptionRec.RESET;
          OptionRec.SETRANGE("Project No.", "Project No.");
          OptionRec.SETFILTER("Plot No.", '<>%1', '');   //* Only Options on Plot No. level (so not on f.e. proj/model level)
          OptionRec.SETRANGE(Status, OptionRec.Status::Order, OptionRec.Status::Invoice);  //*C-026351.n
          //*C-026351.so
          //OptionRec.CALCSUMS("Contract Amount");
          //TotContractAmnt[5] += OptionRec."Contract Amount";
          //*C-026351.eo
          //*C-026351.sn
          IF OptionRec.FINDSET(FALSE, FALSE) THEN
            REPEAT
              TotContractAmnt[5] += OptionRec."Contract Amount";
            UNTIL OptionRec.NEXT = 0;
          //*C-026351.en

          ExtensionRec.RESET;
          ExtensionRec.SETCURRENTKEY("Project No.",Principal,Status,"Version Date");
          ExtensionRec.SETRANGE("Project No.","Project No.");
          ExtensionRec.SETRANGE(Status, ExtensionRec.Status::Order, ExtensionRec.Status::"Invoicing Allowed");  //*C-026351.n
          ExtensionRec.CALCSUMS("Contract Amount");
          TotContractAmnt[5] += ExtensionRec."Contract Amount";
        END;
      END;
    END;

    PROCEDURE ResetProjInstallForCalcTotals@1100485005();
    BEGIN
      ProjInstalmRec.RESET;
      ProjInstalmRec.SETCURRENTKEY(
        "Project No.",Principal,"Extension Contract","Plot No.","Main Group",Group,"Sub Group",Option);

      ProjInstalmRec.SETRANGE("Project No.","Project No.");  //* Should on all levels, so can be set here already.
    END;

    PROCEDURE AddVATAmount@1100485001(VAR VAmountDec@1100485000 : Decimal);
    BEGIN
      IF NOT AmountsInclVAT THEN
        EXIT;

      IF ProjInstalmRec.FINDSET THEN
        REPEAT
          GetRelatedData(ProjInstalmRec."Project No.",ProjInstalmRec.Principal,ProjInstalmRec."VAT Prod. Posting Group","Extension Contract");
          IF (ProjRec."Long Lease" AND VatPostingSetup.Manually AND (ProjInstalmRec."Installment No." = '0')) THEN
            VAmountDec := VAmountDec + ProjInstalmRec."VAT Amount Long Lease"
          ELSE
            VAmountDec := VAmountDec + ProjInstalmRec."Installment Amount" * VatPostingSetup."VAT %" / 100;
          VAmountDec := ROUND(VAmountDec, Currency."Amount Rounding Precision");
        UNTIL ProjInstalmRec.NEXT = 0;
    END;

    LOCAL PROCEDURE GetRelatedData@1100409001(IProjectCode@1100485000 : Code[20];IPrincipalCode@1100485001 : Code[20];IVATProdPostingGroup@1100485002 : Code[20];IExtensionContract@1100525000 : Code[10]);
    VAR
      ExtensionContract@1100525001 : Record 11012004;
    BEGIN
      IF IProjectCode <> ProjRec."No." THEN
        IF NOT ProjRec.GET(IProjectCode) THEN
          CLEAR(ProjRec);

      IF (IProjectCode <> ProjPrincipalRec."Project No.") OR (IPrincipalCode <> ProjPrincipalRec.Principal) THEN
        IF NOT ProjPrincipalRec.GET(IProjectCode, IPrincipalCode) THEN
          CLEAR(ProjPrincipalRec);

      // 26494.sn
      IF IExtensionContract = '' THEN
        PrincipalReference := ProjPrincipalRec."Principal Reference"
      ELSE
        IF ExtensionContract.GET(IProjectCode,IExtensionContract) THEN
          PrincipalReference := ExtensionContract."Your Reference";
      // 26494.en

      IF (ProjPrincipalRec."VAT Bus. Posting Group" <> '') THEN
        VATBusPostingGroup := ProjPrincipalRec."VAT Bus. Posting Group"
      ELSE
        VATBusPostingGroup := ProjRec."VAT Bus. Posting Group";

      IF (VATBusPostingGroup <> VatPostingSetup."VAT Bus. Posting Group") OR
         (IVATProdPostingGroup <> VatPostingSetup."VAT Prod. Posting Group")
      THEN
        IF NOT VatPostingSetup.GET(VATBusPostingGroup, IVATProdPostingGroup) THEN
          CLEAR(VatPostingSetup);
    END;

    LOCAL PROCEDURE InstallmentAmountOnAfterValida@19078325();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowCumulativesOnAfterValidate@19049865();
    BEGIN
      CalculateTotals;
    END;

    LOCAL PROCEDURE AmountsInclVATOnAfterValidate@19006954();
    BEGIN
      CalculateTotals;
    END;

    LOCAL PROCEDURE ProjPrincipalRecWKAPeriodOnAft@19045242();
    BEGIN
      ProjPrincipalRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InvoiceinProcessOnDeactivate@19030728();
    BEGIN
      //Call 23226
      CALCFIELDS("Invoiced Price","Invoice in Process");
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE CreditMemoinProcessOnDeactivat@19056442();
    BEGIN
      //Call 23226
      CALCFIELDS("Invoiced Price","Credit Memo in Process");
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE VATAmountLongLeaseOnBeforeInpu@19055514();
    BEGIN
      //**4PS.n
      "VAT Amount Long LeaseEditable" := (ProjRec."Long Lease" AND VatPostingSetup.Manually AND ("Installment No." = '0'));
    END;

    LOCAL PROCEDURE InvoiceVATAmountLongLeaseOnBef@19022695();
    BEGIN
      //**4PS.n
      "VAT Amount Long LeaseEditable" := (ProjRec."Long Lease" AND VatPostingSetup.Manually AND ("Installment No." = '0'));
    END;

    PROCEDURE SetProject@1100528700(NewProjectNo@1100528700 : Code[20]);
    BEGIN
      ProjectNo := NewProjectNo;
      FILTERGROUP(2);
      SETRANGE("Project No.", ProjectNo);
      FILTERGROUP(0);
    END;

    LOCAL PROCEDURE UpdateEditable@1100528702();
    BEGIN
      IF ProjectNo <> '' THEN
        ProjectNoEditable := FALSE;
    END;

    BEGIN
    END.
  }
}

