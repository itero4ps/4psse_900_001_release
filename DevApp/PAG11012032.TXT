OBJECT Page 11012032 Project Purchase Action
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Project Purchase Action;
    SourceTable=Table11012026;
    PageType=Document;
    OnInit=BEGIN
             ProjectNoEditable := TRUE;
             AssignButtonEnable := TRUE;
           END;

    OnAfterGetRecord=BEGIN
                       PurchActVendRec2.RESET;
                       PurchActVendRec2.SETRANGE(Source, PurchActVendRec2.Source::Project);
                       PurchActVendRec2.SETRANGE("Estimate No.", '');
                       PurchActVendRec2.SETRANGE("Project No.","Project No.");
                       PurchActVendRec2.SETRANGE("Purchase Action",Code);
                       Number := 0;
                       IF PurchActVendRec2.FINDSET THEN
                         REPEAT
                           Number := Number + 1;
                         UNTIL PurchActVendRec2.NEXT = 0;

                       QuoteHeadRec2.RESET;
                       QuoteHeadRec2.SETCURRENTKEY("Document Type","Job No.");
                       QuoteHeadRec2.SETRANGE("Document Type",QuoteHeadRec2."Document Type"::Quote);
                       QuoteHeadRec2.SETRANGE("Job No.","Project No.");
                       QuoteHeadRec2.SETRANGE("Purchase Action",Code);
                       NoOfPurchQuote := 0;
                       IF QuoteHeadRec2.FINDSET THEN
                         REPEAT
                           NoOfPurchQuote := NoOfPurchQuote +1;
                         UNTIL QuoteHeadRec2.NEXT = 0;

                       OrderHeadRec2.RESET;
                       OrderHeadRec2.SETCURRENTKEY("Document Type","Job No.");
                       OrderHeadRec2.SETRANGE("Document Type", OrderHeadRec2."Document Type"::Order);
                       OrderHeadRec2.SETRANGE("Job No.","Project No.");
                       OrderHeadRec2.SETRANGE("Purchase Action",Code);
                       NoOfPurchOrder := 0;
                       IF OrderHeadRec2.FINDSET THEN
                         REPEAT
                           NoOfPurchOrder := NoOfPurchOrder +1;
                         UNTIL OrderHeadRec2.NEXT = 0;
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  IF gProjCde <> '' THEN
                    "Project No." := gProjCde;
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=BEGIN
                     TESTFIELD(Code); //TEST
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 31      ;1   ;ActionGroup;
                      CaptionML=ENU=&Purchase Action }
      { 1210190002;2 ;Action    ;
                      CaptionML=ENU=Texts;
                      RunObject=Page 11012126;
                      RunPageLink=Line Type=CONST(Project Purchase Action),
                                  No.=FIELD(Project No.),
                                  Purchase Action=FIELD(Code);
                      Image=Text }
      { 1210190003;2 ;Action    ;
                      CaptionML=ENU=Vendors;
                      RunObject=Page 11012129;
                      RunPageView=SORTING(Source,Estimate No.,Project No.,Purchase Action,Type,Vendor No.)
                                  WHERE(Source=CONST(Project),
                                        Estimate No.=CONST());
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Purchase Action=FIELD(Code);
                      Promoted=Yes;
                      Image=Segment;
                      PromotedCategory=Process }
      { 1100485016;2 ;Action    ;
                      CaptionML=ENU=Features;
                      Promoted=Yes;
                      Image=LotInfo;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 LFeatByPurchActionRec@1100485000 : Record 11012069;
                               BEGIN
                                 LFeatByPurchActionRec.RESET;
                                 LFeatByPurchActionRec.SETRANGE("Project No.","Project No.");
                                 LFeatByPurchActionRec.SETRANGE("Purchase Action",Code);

                                 PAGE.RUNMODAL(PAGE::"Features by Purchase Action",LFeatByPurchActionRec);
                               END;
                                }
      { 1210190006;2 ;Action    ;
                      CaptionML=ENU=Purchase &Orders;
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lPurchHeader@1100485000 : Record 38;
                                 lPurchLine@1100485002 : Record 39;
                               BEGIN
                                 lPurchLine.SETCURRENTKEY("Document Type", "Job No.");
                                 lPurchLine.SETRANGE("Document Type", lPurchLine."Document Type"::Order);
                                 lPurchLine.SETRANGE("Job No.", "Project No.");
                                 lPurchLine.SETRANGE("Purchase Action", Code);
                                 IF lPurchLine.FINDSET THEN
                                   REPEAT
                                     IF lPurchHeader.GET(lPurchLine."Document Type", lPurchLine."Document No.") THEN
                                       lPurchHeader.MARK(TRUE);
                                   UNTIL lPurchLine.NEXT = 0;

                                 lPurchHeader.SETRANGE("Document Type", lPurchHeader."Document Type"::Order);
                                 lPurchHeader.MARKEDONLY(TRUE);

                                 PAGE.RUNMODAL(PAGE::"Purchase Order List", lPurchHeader);
                               END;
                                }
      { 1210190005;2 ;Action    ;
                      CaptionML=ENU=Purchase Quotes;
                      RunObject=Page 9306;
                      RunPageView=SORTING(Document Type,Job No.)
                                  WHERE(Document Type=CONST(Quote));
                      RunPageLink=Job No.=FIELD(Project No.),
                                  Purchase Action=FIELD(Code);
                      Promoted=Yes;
                      Image=Quote;
                      PromotedCategory=Process }
      { 1100525010;1 ;ActionGroup;
                      CaptionML=ENU=&Documents }
      { 1100485018;2 ;Action    ;
                      CaptionML=ENU=Do&cuments;
                      Image=Documents;
                      OnAction=VAR
                                 RecRef@1199198001 : RecordRef;
                                 DocumentFilters@1100525001 : Codeunit 11012432;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 DocumentFilters.CreateTempFilterAndExecute1(RecRef, '', FALSE, TRUE);
                               END;
                                }
      { 1210190004;2 ;Action    ;
                      CaptionML=ENU=Document Relations;
                      RunObject=Page 11012130;
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Purchase Action=FIELD(Code);
                      Image=Relationship }
      { 1100485011;2 ;Action    ;
                      CaptionML=ENU=Matrix Document Relations;
                      RunObject=Page 11071829;
                      RunPageLink=No.=FIELD(Project No.);
                      Image=ShowMatrix }
      { 1100525009;1 ;ActionGroup;
                      CaptionML=ENU=&Quote Comparison }
      { 1210190017;2 ;Action    ;
                      CaptionML=ENU=Quote Comparison (Excel);
                      Image=Excel;
                      OnAction=VAR
                                 lvQuoteCompCU@1210190000 : Codeunit 11012054;
                               BEGIN
                                 lvQuoteCompCU.RunQuoteCompByPurchAction("Project No.", Code);
                               END;
                                }
      { 1100485017;2 ;Action    ;
                      CaptionML=ENU=Quote Comparison all Purchase Action (Excel);
                      Image=Excel;
                      OnAction=VAR
                                 lvQuoteCompCU@1100485001 : Codeunit 11012054;
                               BEGIN
                                 lvQuoteCompCU.AllPurchQuoteCompToExcel("Project No.");
                               END;
                                }
      { 1100528401;1 ;ActionGroup;
                      CaptionML=ENU=Consent;
                      Image=BOMLedger }
      { 1100528402;2 ;Action    ;
                      CaptionML=ENU=Consent Lines;
                      RunObject=Page 11071870;
                      RunPageLink=Type=CONST(Project),
                                  Type No.=FIELD(Project No.),
                                  Document Type=CONST(Purchase Action),
                                  Document No.=FIELD(Code);
                      Image=BOMLedger }
      { 1100528403;2 ;Action    ;
                      CaptionML=ENU=Insert Consent Lines;
                      Image=BOMLedger;
                      OnAction=BEGIN
                                 EditConsentLines;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525001;1 ;Action    ;
                      Name=AssignButton;
                      CaptionML=ENU=&Assign;
                      Promoted=Yes;
                      Enabled=AssignButtonEnable;
                      PromotedIsBig=Yes;
                      Image=AddAction;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CopyBudgetPage@1100525000 : Page 11130131;
                               BEGIN
                                 TESTFIELD("Project No.");
                                 TESTFIELD(Code);
                                 CopyBudgetPage.SetSelection("Project No.", Code);
                                 CopyBudgetPage.RUNMODAL;
                               END;
                                }
      { 1210190009;1 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Purchase &Quotes;
                      Promoted=Yes;
                      Image=MakeOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Job@1100528300 : Record 11072003;
                                 lvCounter@1210190000 : Integer;
                                 lvOptionNo@1210190004 : Integer;
                                 lvAskForPrinter@1210190003 : Boolean;
                               BEGIN
                                 //mg.so, 13-12-11: M29712
                                 //IF NOT NonAdvicedBudgetLinesExists(Rec) THEN
                                 //  ERROR(Text019);
                                 //mg.eo, 13-12-11: M29712

                                 IF Status = Status::Definitive THEN
                                   ERROR(Text006);

                                 PurchActVendRec.SETRANGE("Project No.","Project No.");
                                 PurchActVendRec.SETRANGE("Purchase Action",Code);
                                 IF NOT PurchActVendRec.FIND('-') THEN
                                   ERROR(Text000);

                                 Job.GET(PurchActVendRec."Project No.");
                                 IF (Job."Project Portal Project") THEN
                                   lvOptionNo := STRMENU(Text003,2)
                                 ELSE
                                   lvOptionNo := STRMENU(Text003,3);
                                 IF (lvOptionNo < 1) THEN
                                   ERROR('');

                                 CreateQuote("Project No.", Code, lvOptionNo, lvCounter, Rec); // C-019435.n
                                 IF (lvCounter > 0) THEN
                                   MESSAGE(Text002,lvCounter)
                                 ELSE
                                   ERROR(Text002,lvCounter);

                                 // C-019435.so
                                 // Original lines are placed in a new function CreateQuote(..,..,..,..,..)
                                 // C-019435.eo
                               END;
                                }
      { 1210190023;1 ;Action    ;
                      CaptionML=ENU=Create Purchase Quotes for &more Purchase Actions;
                      Image=CreateJobSalesCreditMemo;
                      OnAction=VAR
                                 ProjectPurchaseAction@1210190002 : Record 11012026;
                                 ProjectPurchaseActionList@1210190001 : Page 11012034;
                                 lvOptionNo@1210190003 : Integer;
                                 lvCounter@1210190004 : Integer;
                               BEGIN
                                 // C-019435.n
                                 lvOptionNo := STRMENU(Text003,3);
                                 IF (lvOptionNo < 1) THEN
                                   ERROR('');

                                 ProjectPurchaseAction.FILTERGROUP(9);
                                 ProjectPurchaseAction.SETRANGE("Project No.","Project No.");
                                 ProjectPurchaseAction.FILTERGROUP(0);
                                 ProjectPurchaseActionList.SETTABLEVIEW(ProjectPurchaseAction);
                                 ProjectPurchaseActionList.LOOKUPMODE(TRUE);
                                 IF ProjectPurchaseActionList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   ProjectPurchaseActionList.GetMarkedRecords(ProjPurchAction2);
                                   IF ProjPurchAction2.FINDSET THEN BEGIN
                                     REPEAT
                                       IF ProjPurchAction2.Status <> ProjPurchAction2.Status::Definitive THEN BEGIN
                                         PurchActVendRec.SETRANGE("Project No.","Project No.");
                                         PurchActVendRec.SETRANGE("Purchase Action",ProjPurchAction2.Code);
                                         IF PurchActVendRec.FINDFIRST THEN BEGIN
                                 //          IF NonAdvicedBudgetLinesExists(ProjPurchAction2) THEN //mg.o, 13-12-11: M29712
                                             CreateQuote(ProjPurchAction2."Project No.", ProjPurchAction2.Code, lvOptionNo,lvCounter,ProjPurchAction2);
                                         END;
                                       END;
                                     UNTIL ProjPurchAction2.NEXT = 0;
                                   END ELSE
                                     ERROR(Text020);
                                 END;

                                 IF (lvCounter > 0) THEN
                                   MESSAGE(Text002,lvCounter)
                                 ELSE
                                   ERROR(Text002,lvCounter);
                               END;
                                }
      { 1100485006;1 ;Action    ;
                      CaptionML=ENU=Create Purchase &Order;
                      Promoted=Yes;
                      Image=MakeOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvCopyBudget@1100485000 : Codeunit 11012008;
                               BEGIN
                                 lvCopyBudget.CopyLinesToNewOrder(Rec);
                               END;
                                }
      { 1210190018;1 ;Action    ;
                      CaptionML=ENU=Create &Documents;
                      Promoted=Yes;
                      Image=Word;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 DocGenerateFrm@1210190001 : Page 11020261;
                               BEGIN
                                 DocGenerateFrm.SetFilter("Project No.",'',Code);
                                 DocGenerateFrm.RUNMODAL;
                               END;
                                }
      { 1100485004;1 ;Action    ;
                      CaptionML=ENU=Print Purchase Quote Documents;
                      Promoted=Yes;
                      Image=PrintDocument;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 PrintQuoteDocs;
                               END;
                                }
      { 1100528800;1 ;Action    ;
                      CaptionML=ENU=Email Quotes;
                      Image=Email;
                      OnAction=VAR
                                 PurchaseHeader@1100528803 : Record 38;
                                 Vendor@1100528802 : Record 23;
                                 DocumentPrint@1100528402 : Codeunit 229;
                                 ChangeStatus@1100528401 : 'None,Released,Closed';
                                 DirectPostOrder@1100528400 : 'According to Vendor,Not';
                                 QuoteTxt@1100528801 : Text[1024];
                                 FirstQuote@1100528800 : Boolean;
                               BEGIN
                                 // 34441.n
                                 PurchaseHeader.SETCURRENTKEY("Document Type", "Job No.");
                                 PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Quote);
                                 PurchaseHeader.SETRANGE("Job No.","Project No.");
                                 PurchaseHeader.SETRANGE("Purchase Action",Code);
                                 FirstQuote := TRUE;
                                 IF PurchaseHeader.FINDSET THEN BEGIN
                                   REPEAT
                                     IF PurchaseHeader.GetEMailOrder <> '' THEN BEGIN
                                       IF FirstQuote THEN
                                         QuoteTxt := PurchaseHeader."No."
                                       ELSE
                                         QuoteTxt := QuoteTxt + '|' + PurchaseHeader."No.";
                                       FirstQuote := FALSE;
                                     END;
                                   UNTIL PurchaseHeader.NEXT = 0;
                                 END;

                                 IF FirstQuote THEN
                                   MESSAGE(Text021)
                                 ELSE BEGIN
                                   PurchaseHeader.SETRECFILTER;
                                   PurchaseHeader.SETFILTER("No.", QuoteTxt);
                                   IF PurchaseHeader.FINDSET THEN
                                     REPEAT
                                       DocumentPrint.EmailPurchHeader(
                                         PurchaseHeader, FALSE, ChangeStatus::None, DirectPostOrder::"Not", FALSE, TRUE);
                                     UNTIL PurchaseHeader.NEXT = 0;
                                 END;
                               END;
                                }
      { 1100528400;1 ;Action    ;
                      CaptionML=ENU=Email Quote Thanks Letters;
                      Image=Email;
                      OnAction=VAR
                                 PurchaseHeader@1100528803 : Record 38;
                                 DocumentPrint@1100528403 : Codeunit 229;
                                 ChangeStatus@1100528402 : 'None,Released,Closed';
                                 DirectPostOrder@1100528401 : 'According to Vendor,Not';
                               BEGIN
                                 PurchaseHeader.SETCURRENTKEY("Document Type", "Job No.");
                                 PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Quote);
                                 PurchaseHeader.SETRANGE("Job No.", "Project No.");
                                 PurchaseHeader.SETRANGE("Purchase Action", Code);
                                 PurchaseHeader.SETFILTER(
                                   "Quote Status", '%1|%2|%3', PurchaseHeader."Quote Status"::Send,
                                   PurchaseHeader."Quote Status"::Received, PurchaseHeader."Quote Status"::Rejected);
                                 IF PurchaseHeader.FINDSET THEN BEGIN
                                   REPEAT
                                     IF PurchaseHeader.GetEMailOrder <> '' THEN
                                       PurchaseHeader.MARK(TRUE);
                                   UNTIL PurchaseHeader.NEXT = 0;
                                 END;
                                 PurchaseHeader.MARKEDONLY(TRUE);
                                 IF PurchaseHeader.FINDSET THEN BEGIN
                                   REPEAT
                                     DocumentPrint.EmailPurchHeader(
                                       PurchaseHeader, FALSE, ChangeStatus::None, DirectPostOrder::"Not", TRUE, TRUE);
                                   UNTIL PurchaseHeader.NEXT = 0;
                                 END ELSE
                                   MESSAGE(Text021);
                               END;
                                }
      { 1100528302;1 ;ActionGroup;
                      CaptionML=ENU=Document Portal;
                      Image=Web }
      { 1100528300;2 ;Action    ;
                      CaptionML=ENU=Send Quote Requests;
                      Promoted=Yes;
                      Image=Web;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 DocumentPortalProject@1100528300 : Codeunit 11012948;
                               BEGIN
                                 DocumentPortalProject.UpdateQuoteRequests(Rec, 1); //1=Add
                               END;
                                }
      { 1100528303;2 ;Action    ;
                      CaptionML=ENU=Update All Responsible Persons;
                      Image=Segment;
                      OnAction=VAR
                                 Job@1100528301 : Record 11072003;
                                 DocumentPortalProject@1100528302 : Codeunit 11012948;
                               BEGIN
                                 Job.GET("Project No.");
                                 DocumentPortalProject.AddQuoteResponsiblePersons(Job);
                               END;
                                }
      { 1100528301;2 ;Action    ;
                      CaptionML=ENU=Update Vendors;
                      Image=Segment;
                      OnAction=VAR
                                 DocumentPortalProject@1100528301 : Codeunit 11012948;
                               BEGIN
                                 DocumentPortalProject.AddQuoteVendors(Rec);
                               END;
                                }
      { 1100409000;2 ;Action    ;
                      CaptionML=ENU=Update Quote Request;
                      Promoted=Yes;
                      Image=Web;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 DocumentPortalProject@1100528301 : Codeunit 11012948;
                               BEGIN
                                 DocumentPortalProject.UpdateQuoteRequests(Rec, 2); //2=Modify
                               END;
                                }
      { 1100528304;2 ;Action    ;
                      CaptionML=ENU=Update Related Documents;
                      Image=PostDocument;
                      OnAction=VAR
                                 DocumentPortalProject@1100528301 : Codeunit 11012948;
                               BEGIN
                                 DocumentPortalProject.AddQuoteAttachments(Rec, TRUE);
                               END;
                                }
      { 1100525007;  ;ActionContainer;
                      ActionContainerType=Reports }
      { 1210190013;1 ;Action    ;
                      CaptionML=ENU=Quote Reports;
                      Image=PrintForm;
                      OnAction=BEGIN
                                 PrintWriteOff;
                               END;
                                }
      { 29      ;1   ;Action    ;
                      CaptionML=ENU=Purchase Action Reports;
                      Promoted=Yes;
                      Image=Print;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 SETRANGE(Status, Status);
                                 PrintDoc.PrintPurchaseAction(Rec);
                               END;
                                }
      { 30      ;1   ;Action    ;
                      CaptionML=ENU=B&udget Reports;
                      Image=PrintCover;
                      OnAction=VAR
                                 BudgetRec@11012001 : Record 11012001;
                               BEGIN
                                 BudgetRec."Project No." := "Project No.";
                                 BudgetRec."Purchase Action" := Code;
                                 PrintDoc.PrintBudget(BudgetRec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;;Container;
                Name=p;
                ContainerType=ContentArea }

    { 5   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 6   ;2   ;Field     ;
                SourceExpr="Project No.";
                Editable=ProjectNoEditable;
                OnValidate=BEGIN
                             IF "Project No." <> '' THEN
                               GetDefaultNr;
                           END;
                            }

    { 12  ;2   ;Field     ;
                SourceExpr=Code;
                OnLookup=VAR
                           lookupFrm@1210190000 : Page 11012031;
                           lPurchActRec@1210190001 : Record 11012025;
                         BEGIN
                           CLEAR(lookupFrm);
                           lookupFrm.LOOKUPMODE(TRUE);
                           lookupFrm.SetCopyFunction("Project No.");
                           IF lookupFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             lookupFrm.GETRECORD(lPurchActRec);
                             VALIDATE(Code,lPurchActRec.Code);
                           END ELSE BEGIN
                             IF lookupFrm.CheckMultiCopy(ProjPurchActRec) THEN BEGIN
                               CurrPage.UPDATE(FALSE);
                               Rec := ProjPurchActRec;
                               FIND;
                               CurrPage.UPDATE(FALSE);
                             END;
                           END;
                         END;
                          }

    { 1210190011;2;Field  ;
                SourceExpr="Project Description";
                Importance=Additional }

    { 10  ;2   ;Field     ;
                SourceExpr=Description }

    { 1100485012;2;Field  ;
                SourceExpr="Amounts Only" }

    { 14  ;2   ;Field     ;
                SourceExpr="Search Name" }

    { 8   ;2   ;Field     ;
                SourceExpr="Responsible Employee";
                OnValidate=BEGIN
                             ResponsibleEmployeeOnAfterVali;
                           END;
                            }

    { 1100485005;2;Field  ;
                SourceExpr="Name Employee";
                Importance=Additional }

    { 16  ;2   ;Field     ;
                SourceExpr=Status;
                OnValidate=BEGIN
                             StatusOnAfterValidate;
                           END;
                            }

    { 3   ;1   ;Part      ;
                Name=PurchaseBudget;
                SubPageLink=Project No.=FIELD(Project No.),
                            Purchase Action=FIELD(Code),
                            Purchase Action Filter=FIELD(Code);
                PagePartID=Page11012033 }

    { 1902859001;1;Group  ;
                CaptionML=ENU=Text }

    { 18  ;2   ;Field     ;
                SourceExpr=Text;
                MultiLine=Yes }

    { 1905289801;1;Group  ;
                CaptionML=ENU=Data }

    { 1210190010;2;Field  ;
                SourceExpr="Requested Quote Receipt Date" }

    { 1210190015;2;Field  ;
                SourceExpr="Vendors React before" }

    { 1210190021;2;Field  ;
                SourceExpr="Document Template" }

    { 1100525013;2;Field  ;
                SourceExpr="Final Delivery Date" }

    { 1901994701;1;Group  ;
                CaptionML=ENU=Log }

    { 20  ;2   ;Field     ;
                SourceExpr="Changed by" }

    { 22  ;2   ;Field     ;
                SourceExpr="Changed on" }

    { 1210190000;2;Field  ;
                SourceExpr="Activate for" }

    { 1100485002;2;Field  ;
                SourceExpr="Approval Date";
                Editable=FALSE }

    { 1907544901;1;Group  ;
                CaptionML=ENU=Request Data }

    { 1100485000;2;Field  ;
                SourceExpr="Expected No. of Vendors" }

    { 1100485008;2;Field  ;
                CaptionML=ENU=Sum of selected vendors;
                SourceExpr=Number;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              PurchActVendRec2.RESET;
                              PurchActVendRec2.SETRANGE(Source, PurchActVendRec2.Source::Project);
                              PurchActVendRec2.SETRANGE("Estimate No.", '');
                              PurchActVendRec2.SETRANGE("Project No.","Project No.");
                              PurchActVendRec2.SETRANGE("Purchase Action",Code);
                              IF PurchActVendRec2.FIND('-') THEN
                                PAGE.RUNMODAL(PAGE::"Vendors by Purchase Action",PurchActVendRec2);
                              CurrPage.UPDATE;
                            END;
                             }

    { 1100485010;2;Field  ;
                Lookup=No;
                DrillDown=Yes;
                CaptionML=ENU=Count of Quotes;
                SourceExpr=NoOfPurchQuote;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              QuoteHeadRec2.RESET;
                              QuoteHeadRec2.SETCURRENTKEY("Document Type","Job No.");
                              //QuoteHeadRec2.SETFILTER("Document Type",'Offerte'); //**4PS.o
                              QuoteHeadRec2.SETRANGE("Document Type",QuoteHeadRec2."Document Type"::Quote); //**4PS.n
                              QuoteHeadRec2.SETFILTER("Job No.","Project No.");
                              QuoteHeadRec2.SETFILTER("Purchase Action",Code);
                              IF QuoteHeadRec2.FIND('-') THEN
                                PAGE.RUNMODAL(53,QuoteHeadRec2);
                            END;
                             }

    { 1100485014;2;Field  ;
                DrillDown=Yes;
                CaptionML=ENU=No. Of Purchase Headers;
                SourceExpr=NoOfPurchOrder;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              OrderHeadRec2.RESET;
                              OrderHeadRec2.SETCURRENTKEY("Document Type","Job No.");
                              //OrderHeadRec2.SETFILTER("Document Type",'Order'); //**4PS.o
                              OrderHeadRec2.SETRANGE("Document Type",OrderHeadRec2."Document Type"::Order); //**4PS.n
                              OrderHeadRec2.SETFILTER("Job No.","Project No.");
                              OrderHeadRec2.SETFILTER("Purchase Action",Code);
                              IF OrderHeadRec2.FIND('-') THEN
                                PAGE.RUNMODAL(53,OrderHeadRec2);
                            END;
                             }

    { 1903597801;1;Group  ;
                CaptionML=ENU=Budget Adjustment }

    { 1100525000;2;Field  ;
                SourceExpr="Default Cost Object Purchase";
                OnValidate=BEGIN
                             DefaultCostObjectPurchaseOnAft;
                           END;
                            }

    { 1100525004;2;Field  ;
                SourceExpr="Default Cost Object Purch.Desc" }

    { 1100525002;2;Field  ;
                SourceExpr="Budget Adjustment Type";
                OnValidate=BEGIN
                             BudgetAdjustmentTypeOnAfterVal;
                           END;
                            }

    { 1100525005;2;Field  ;
                SourceExpr="Budget Adjustment Type Desc." }

    { 1100525006;2;Field  ;
                SourceExpr="Budget Neutral" }

    { 1100525008;2;Field  ;
                SourceExpr="Created Budget Adjustments" }

    { 1210190001;0;Container;
                ContainerType=FactBoxArea }

    { 1100529900;1;Part   ;
                Name=RegisterExternalDocumentFB;
                PagePartID=Page11125053;
                PartType=Page }

    { 1210190016;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Purchase Action=FIELD(Code),
                            Purchase Action Filter=FIELD(Code);
                PagePartID=Page11130109;
                PartType=Page }

    { 1210190014;1;Part   ;
                SubPageView=WHERE(Purchase Action Filter=FILTER(''));
                SubPageLink=Project No.=FIELD(Project No.);
                PagePartID=Page11130001;
                PartType=Page }

    { 1100525012;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1100525011;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ProjPurchActRec@11012000 : Record 11012026;
      ProjPurchAction2@1210190014 : Record 11012026;
      PrintDoc@11012001 : Codeunit 229;
      PurchActVendRec@1210190007 : Record 11012068;
      PurchActVendRec2@1100485002 : Record 11012068;
      PurchLineRec@1210190006 : Record 39;
      PurchHeadRec@1210190005 : Record 38;
      VendorCount@1210190004 : Integer;
      VendorProcessed@1210190003 : Integer;
      TempPurchHeadRec@1210190000 : TEMPORARY Record 38;
      Text000@1210190015 : TextConst 'ENU=No Vendors selected for this Purchase Action';
      Text002@1210190013 : TextConst 'ENU=%1 quotes created';
      Text003@1210190001 : TextConst 'ENU=Quotes,Quotes + Word documents,Quotes + Print Word Documents,Quotes + Print Word Documents with printer selection';
      Text006@1210190017 : TextConst 'ENU=Status is definitive, creation of quotes not possible';
      Text11012000@1210190010 : TextConst 'ENU=First Associate a Prospect to Customer %1.';
      Text11012002@1210190008 : TextConst 'ENU=No purchase quote document present';
      Window@1210190018 : Dialog;
      Text007@1210190019 : TextConst 'ENU=Busy with #1####################################################################';
      Text008@1210190020 : TextConst 'ENU=Creating Quotes';
      text009@1210190021 : TextConst 'ENU=Creating Quote lines';
      text010@1210190022 : TextConst 'ENU=Creating text lines';
      Text011@1210190023 : TextConst 'ENU=Copying documents';
      Text012@1210190024 : TextConst 'ENU=Creating Word Document';
      Text013@1210190025 : TextConst 'ENU=Printing Word Document';
      Text015@1210190027 : TextConst 'ENU=Status should be definitive';
      Text016@1210190028 : TextConst 'ENU=No Quotes present';
      Text017@1210190029 : TextConst 'ENU=No Purchase Order present, continue ?';
      QuoteHeadRec@1210190030 : Record 38;
      OrderHeadRec@1210190031 : Record 38;
      ParRec@1210190032 : Record 11012072;
      Par2Rec@1210190033 : Record 11012072;
      Text018@1210190002 : TextConst 'ENU="Printing Word document. Note: Possible the printer selection form is in the background. Then enter ''Alt+Tab. "';
      CompQuote@1210190011 : Code[20];
      gProjCde@1100485000 : Code[20];
      Number@1100485003 : Integer;
      NoOfPurchQuote@1100485005 : Integer;
      QuoteHeadRec2@1100485006 : Record 38;
      OrderHeadRec2@1100485007 : Record 38;
      NoOfPurchOrder@1100485008 : Integer;
      Text020@1210190012 : TextConst 'ENU=There are not marked Purchase Actions';
      AssignButtonEnable@19053009 : Boolean INDATASET;
      ProjectNoEditable@19028701 : Boolean INDATASET;
      Text021@1100528800 : TextConst 'ENU=No Quotes present for Mail';

    PROCEDURE GetDefaultNr@1();
    VAR
      ProjActRec@1000000000 : Record 11012026;
    BEGIN
      IF "Project No." <> '' THEN BEGIN
        ProjActRec.SETRANGE("Project No.","Project No.");
        IF ProjActRec.FINDLAST THEN
          Code := INCSTR(ProjActRec.Code)
        ELSE
          Code := '1';
      END;
    END;

    PROCEDURE CreateQuote@1210190006(VAR ProjNo@1210190003 : Code[20];VAR PurchaseAction@1210190004 : Code[10];VAR OptionNo@1210190005 : Integer;VAR Counter@1210190006 : Integer;VAR ProjectPurchaseActionRec@1210190002 : Record 11012026);
    VAR
      lvAskForPrinter@1210190000 : Boolean;
    BEGIN
      Window.OPEN(Text007);
      TempPurchHeadRec.DELETEALL;

      VendorCount := PurchActVendRec.COUNT;
      VendorProcessed := 0;

      CompQuote := '';
      IF VendorCount > 1 THEN BEGIN
        PurchHeadRec.RESET;
        PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
        PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
        PurchHeadRec.SETRANGE("Job No.","Project No.");
        PurchHeadRec.SETRANGE("Purchase Action",PurchaseAction);
        PurchHeadRec.SETFILTER("Comparison Quote", '<>%1', '');
        IF PurchHeadRec.FINDFIRST THEN
          CompQuote := PurchHeadRec."Comparison Quote";
        IF CompQuote = '' THEN BEGIN
          PurchHeadRec.RESET;
          PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
          PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
          PurchHeadRec.SETRANGE("Job No.","Project No.");
          PurchHeadRec.SETRANGE("Purchase Action",PurchaseAction);
          PurchHeadRec.SETFILTER("Comparison Quote", '=%1', '');
          IF PurchHeadRec.FINDSET(TRUE, FALSE) THEN BEGIN
            CompQuote := PurchHeadRec."No.";
            REPEAT
              PurchHeadRec."Comparison Quote" := CompQuote;
              PurchHeadRec.UpdateComparisonQuoteLinks('INSERT');
              PurchHeadRec.MODIFY(TRUE);
            UNTIL PurchHeadRec.NEXT = 0;
          END;
        END;
      END;
      PurchHeadRec.RESET;

      REPEAT
        VendorProcessed := VendorProcessed + 1;
        PurchHeadRec.RESET;
        PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
        PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
        PurchHeadRec.SETRANGE("Job No.","Project No.");
        IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN
          PurchHeadRec.SETRANGE("Buy-from Vendor No.",PurchActVendRec."Vendor No.")
        ELSE
          PurchHeadRec.SETRANGE("Buy-from Contact No.",PurchActVendRec."Vendor No.");
        PurchHeadRec.SETRANGE("Purchase Action",PurchaseAction);
        IF NOT PurchHeadRec.FINDFIRST THEN BEGIN
          IF (OptionNo >= 2) THEN BEGIN //* Check here already. If Word document can't be created
            CheckCreateWordDoc();       //* also create no quote.
          END;
          InsertPurchHeader(PurchaseAction);
          CopyTextLines(ProjectPurchaseActionRec);
          CopyBudgetLines(ProjectPurchaseActionRec);
          CopyDocuments(ProjectPurchaseActionRec);
          Counter := Counter + 1;
        END;
      UNTIL PurchActVendRec.NEXT = 0;

      IF (Counter > 0) AND (OptionNo >= 2) THEN BEGIN
        COMMIT;
        IF TempPurchHeadRec.FIND('-') THEN BEGIN
          REPEAT
            IF TempPurchHeadRec."Buy-from Vendor No." <> '' THEN BEGIN
              PurchActVendRec."Vendor No." := TempPurchHeadRec."Buy-from Vendor No.";
              PurchActVendRec.Type := PurchActVendRec.Type::Vendor;
            END ELSE BEGIN
              PurchActVendRec.Type := PurchActVendRec.Type::Contact;
              PurchActVendRec."Vendor No." := TempPurchHeadRec."Buy-from Contact No.";
            END;
            PurchActVendRec.GET(PurchActVendRec.Source::Project, '',
              TempPurchHeadRec."Job No.", TempPurchHeadRec."Purchase Action",
              PurchActVendRec.Type, PurchActVendRec."Vendor No.");
            IF PurchHeadRec.GET(PurchHeadRec."Document Type"::Quote,TempPurchHeadRec."No.") THEN BEGIN
              IF NOT CreateWordDoc() THEN
                TempPurchHeadRec.DELETE;
            END;
            COMMIT;
          UNTIL TempPurchHeadRec.NEXT = 0;
        END;
        IF (OptionNo >= 3) THEN BEGIN
          IF (OptionNo = 4) THEN
            lvAskForPrinter := TRUE;
          IF TempPurchHeadRec.FIND('-') THEN BEGIN
            REPEAT
              PrintWordDoc((OptionNo = 4), lvAskForPrinter);
              lvAskForPrinter := FALSE;
            UNTIL TempPurchHeadRec.NEXT = 0;
          END;
        END;
      END;

      Window.CLOSE;
    END;

    PROCEDURE InsertPurchHeader@1210190004(VAR PurchaseAction@1210190003 : Code[10]);
    VAR
      NoSeriesMngmntCU@1210190001 : Codeunit 396;
      PurchSetupRec@1210190002 : Record 312;
      PurchaserRec@1210190000 : Record 13;
      lvContRec@1100485001 : Record 5050;
    BEGIN
      Window.UPDATE(1,Text008);
      PurchSetupRec.GET;
      WITH PurchHeadRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Quote;
        PurchSetupRec.TESTFIELD("Quote Nos.");
        "No." := NoSeriesMngmntCU.GetNextNo(PurchSetupRec."Quote Nos.",WORKDATE,TRUE);
        "No. Series" := PurchSetupRec."Quote Nos.";
        INSERT(TRUE);
        IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN
          VALIDATE("Buy-from Vendor No.",PurchActVendRec."Vendor No.")
        ELSE
          VALIDATE("Buy-from Contact No.",PurchActVendRec."Vendor No.");
        VALIDATE("Job No.","Project No.");
        VALIDATE("Document Date",TODAY);
        "Job No." := "Project No.";
        //"Purchase Action" := Code // C-019435.o
        "Purchase Action" := PurchaseAction; // C-019435.n
        PurchHeadRec."Amounts only" := Rec."Amounts Only"; // Issue C006079
        IF PurchActVendRec.Contact <> '' THEN BEGIN
          "Buy-from Contact" := PurchActVendRec.Contact;
          IF PurchActVendRec."Contact Person No." <> '' THEN BEGIN
            IF lvContRec.GET(PurchActVendRec."Contact Person No.") THEN BEGIN
              IF (lvContRec.Name = PurchActVendRec.Contact) THEN
                "Buy-from Contact Person No." := PurchActVendRec."Contact Person No.";
            END;
          END;
        END;
        "Requested Receipt Date" := "Requested Quote Receipt Date";
        "React before" := Rec."Vendors React before";
        IF "Responsible Employee" <> '' THEN
          IF PurchaserRec.GET("Responsible Employee") THEN
            "Purchaser Code" := "Responsible Employee";
        IF (CompQuote = '') AND (VendorCount > 1) THEN
          CompQuote := PurchHeadRec."No.";
        IF (CompQuote <> '') THEN BEGIN
          "Comparison Quote" := CompQuote;
          PurchHeadRec.UpdateComparisonQuoteLinks('INSERT');
        END;
        MODIFY(TRUE);
        TempPurchHeadRec.INIT;
        TempPurchHeadRec."Document Type" := PurchHeadRec."Document Type";
        TempPurchHeadRec."No." := PurchHeadRec."No.";
        IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN
          TempPurchHeadRec."Buy-from Vendor No." := PurchActVendRec."Vendor No."
        ELSE
          TempPurchHeadRec."Buy-from Contact No." := PurchActVendRec."Vendor No.";
        TempPurchHeadRec."Job No." := "Job No.";
        TempPurchHeadRec."Purchase Action" := "Purchase Action";
        TempPurchHeadRec.INSERT;
      END;
    END;

    PROCEDURE CopyBudgetLines@1210190008(VAR ProjectPurchaseActionRec@1210190001 : Record 11012026);
    VAR
      CopyBudgLinesCU@1210190000 : Codeunit 11012008;
    BEGIN
      Window.UPDATE(1,text009);
      PurchLineRec.INIT;
      PurchLineRec."Document Type" := PurchLineRec."Document Type"::Quote;
      PurchLineRec."Document No." := PurchHeadRec."No.";
      IF VendorCount = VendorProcessed THEN
        CopyBudgLinesCU.CopyLines(ProjectPurchaseActionRec,PurchLineRec,TRUE)
      ELSE
        CopyBudgLinesCU.CopyLines(ProjectPurchaseActionRec,PurchLineRec,FALSE);
    END;

    PROCEDURE CopyTextLines@1210190003(VAR ProjectPurchaseActionRec@1210190000 : Record 11012026);
    VAR
      PurchActTextRec@1210190001 : Record 11012067;
      PurchActText1Rec@1210190002 : Record 11012067;
    BEGIN
      Window.UPDATE(1,text010);
      PurchActTextRec.SETRANGE("Line Type",PurchActTextRec."Line Type"::"Project Purchase Action");
      PurchActTextRec.SETRANGE("No.","Project No.");
      PurchActTextRec.SETRANGE("Purchase Action",ProjectPurchaseActionRec.Code);
      IF PurchActTextRec.FINDSET THEN BEGIN
        REPEAT
          PurchActText1Rec.COPY(PurchActTextRec);
          PurchActText1Rec."Line Type" := PurchActText1Rec."Line Type"::"Purchase Quote";
          PurchActText1Rec."Purchase Action" := '';
          PurchActText1Rec."No." := PurchHeadRec."No.";
          PurchActText1Rec.INSERT;
        UNTIL PurchActTextRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyDocuments@1210190005(VAR ProjectPurchaseActionRec@1210190002 : Record 11012026);
    VAR
      PurchActDocRec@1210190000 : Record 11012071;
      DocRelRec@1210190001 : Record 11012407;
      DocumentProperties@1100528400 : Record 11012746;
    BEGIN
      Window.UPDATE(1,Text011);
      PurchActDocRec.SETRANGE(Source, PurchActDocRec.Source::Project);
      PurchActDocRec.SETRANGE("Project No.","Project No.");
      PurchActDocRec.SETRANGE("Purchase Action",ProjectPurchaseActionRec.Code);
      IF PurchActDocRec.FINDSET THEN BEGIN
        REPEAT
          DocRelRec.INIT;
          DocRelRec."Document Type" := DocRelRec."Document Type"::"Purchase Quote";
          DocRelRec."No." := PurchHeadRec."No.";
          DocRelRec.Description := PurchActDocRec.Description;
          DocRelRec."Description 2" := PurchActDocRec."Description 2";
          DocRelRec.Quantity := PurchActDocRec.Quantity;
          DocRelRec."Related Document No." := PurchActDocRec."Related Document No.";
          PurchActDocRec.CALCFIELDS("Document No.");
          DocRelRec."Document No." := PurchActDocRec."Document No.";
          DocRelRec."Send by E-Mail" := TRUE;
          IF DocumentProperties.GET(DocRelRec."Related Document No.") THEN
            IF DocumentProperties.FileCanBeConvertedToPDF THEN
              DocRelRec.Print := TRUE;
          DocRelRec.INSERT;
          ParRec.SETRANGE(Type,ParRec.Type::PurchAction);
          ParRec.SETRANGE("No.","Project No.");
          ParRec.SETRANGE("Purchase Action",ProjectPurchaseActionRec.Code);
          ParRec.SETRANGE("Document No.",PurchActDocRec."Related Document No.");
          IF ParRec.FINDSET THEN BEGIN
            REPEAT
              Par2Rec.COPY(ParRec);
              Par2Rec.Type := Par2Rec.Type::Quote;
              Par2Rec."No." := PurchHeadRec."No.";
              Par2Rec."Document No." := PurchActDocRec."Related Document No.";
              Par2Rec."Purchase Action" := '';
              Par2Rec.INSERT;
            UNTIL ParRec.NEXT = 0;
          END;
        UNTIL PurchActDocRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCreateWordDoc@1100485003();
    VAR
      lContact@1210190006 : Record 5050;
      lContBusRel@1210190005 : Record 5054;
      lRecDocument@1210190008 : Record 11012401;
    BEGIN
      IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN BEGIN
        lContBusRel.SETCURRENTKEY("Link to Table", "No.");
        lContBusRel.SETRANGE("Link to Table", lContBusRel."Link to Table"::Vendor);
        lContBusRel.SETRANGE("No.",PurchActVendRec."Vendor No.");
        IF NOT lContBusRel.FINDFIRST THEN
          ERROR(Text11012000,PurchActVendRec."Vendor No.");
        //
        lContact.GET(lContBusRel."Contact No.");
      END ELSE BEGIN
        lContact.GET(PurchActVendRec."Vendor No.");
      END;
      lContact.TESTFIELD("Document Group");

      lRecDocument.INIT;
      lRecDocument.SETRANGE("Document Group",lContact."Document Group");
      lRecDocument.SETRANGE(Type,lRecDocument.Type::"Purchase Quote");
      //**4PS01.sn
      IF PurchActVendRec."Document Template" <> '' THEN BEGIN
        lRecDocument.SETRANGE("Template Code",PurchActVendRec."Document Template");
      END ELSE
        lRecDocument.SETRANGE("Template Code");
      //**4PS01.en

      IF NOT lRecDocument.FINDFIRST THEN
        ERROR(Text11012002);
    END;

    PROCEDURE CreateWordDoc@1100525000() : Boolean;
    VAR
      lContact@1210190006 : Record 5050;
      lContBusRel@1210190005 : Record 5054;
      lUserRec@1210190002 : Record 91;
      lRecDocument@1210190008 : Record 11012401;
      lProject@1210190000 : Record 11072003;
      lCduWordInterface@1210190007 : Codeunit 11012406;
      DocLinkRID@1199198000 : ARRAY [5] OF RecordID;
      RecRef@1199198001 : RecordRef;
    BEGIN
      Window.UPDATE(1,Text012);
      CLEAR(lCduWordInterface);

      IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN BEGIN
        lContBusRel.SETCURRENTKEY("Link to Table", "No.");
        lContBusRel.SETRANGE("Link to Table", lContBusRel."Link to Table"::Vendor);
        lContBusRel.SETRANGE("No.",PurchActVendRec."Vendor No.");
        IF NOT lContBusRel.FINDFIRST THEN
          EXIT(FALSE);
        //
        IF NOT lContact.GET(lContBusRel."Contact No.") THEN
          EXIT(FALSE);
      END ELSE BEGIN
        IF NOT lContact.GET(PurchActVendRec."Vendor No.") THEN
          EXIT(FALSE);
      END;
      IF lContact."Document Group" = '' THEN
        EXIT(FALSE);

      IF NOT lUserRec.GET(USERID) THEN
        lUserRec.INIT;
      lRecDocument.INIT;
      lRecDocument.SETRANGE("Document Group",lContact."Document Group");
      lRecDocument.SETRANGE(Type,lRecDocument.Type::"Purchase Quote");
      //**4PS01.sn
      IF PurchActVendRec."Document Template" <> '' THEN BEGIN
        lRecDocument.SETRANGE("Template Code",PurchActVendRec."Document Template");
      END ELSE
        lRecDocument.SETRANGE("Template Code");
      //**4PS01.en

      IF lRecDocument.FINDSET THEN BEGIN

        // Get Link RecordID's
        // Source RID
        RecRef.GETTABLE(PurchHeadRec);
        DocLinkRID[1] := RecRef.RECORDID;

        RecRef.GETTABLE(Rec);
        DocLinkRID[2] := RecRef.RECORDID;

        IF lProject.GET("Project No.") THEN BEGIN
          RecRef.GETTABLE(lProject);
          DocLinkRID[3] := RecRef.RECORDID;
        END;

        REPEAT
          lCduWordInterface.GenerateDocFromTemplate(
            lRecDocument, DocLinkRID, PurchHeadRec."Shortcut Dimension 1 Code",
            lContact."No.", PurchActVendRec."Contact Person No." , '', FALSE);
          // Doc Mgt
        UNTIL lRecDocument.NEXT = 0;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PrintWordDoc@1210190009(IWithPrinterSelection@1210190002 : Boolean;IAskForPrinter@1210190003 : Boolean);
    VAR
      DocumentProperties@1210190000 : Record 11012746;
      DocumentProperties2@1100525002 : Record 11012746;
      DocumentLink@1100525000 : Record 11012747;
      RecRef@1100525001 : RecordRef;
      lCduWord@1210190001 : Codeunit 11012400;
    BEGIN
      IF NOT IAskForPrinter THEN
        Window.UPDATE(1,Text013)
      ELSE
        Window.UPDATE(1,Text018);
      COMMIT;

      RecRef.GETTABLE(TempPurchHeadRec);

      DocumentLink.SETCURRENTKEY("Record ID"); //mg, 05-07-11: M27801
      DocumentLink.SETRANGE("Table No.", DATABASE::"Purchase Header");
      DocumentLink.SETFILTER("Record ID",  STRSUBSTNO('''%1''',RecRef.RECORDID()));
      DocumentLink.SETRANGE(Source, TRUE);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF DocumentLink.FINDFIRST THEN BEGIN
        DocumentProperties.GET(DocumentLink."Document No.");

        DocumentProperties2.SETCURRENTKEY("Document Group", "Document Template", "Contact No.", "Doc. Action", Version);
        DocumentProperties2.SETRANGE("Document Group", DocumentProperties."Document Group");
        DocumentProperties2.SETRANGE("Document Template", DocumentProperties."Document Template");
        DocumentProperties2.SETRANGE("Contact No.", DocumentProperties."Contact No.");
        DocumentProperties2.SETRANGE("Internal Company", COMPANYNAME);
        DocumentProperties2.SETRANGE("Doc. Action", DocumentProperties."Doc. Action");
        IF DocumentProperties2.FINDLAST THEN BEGIN
          IF DocumentProperties2.File <> '' THEN BEGIN
            lCduWord.Initialise();
            lCduWord.Open(FALSE, DocumentProperties2.File, FALSE);
            lCduWord.Save();
            IF NOT IAskForPrinter THEN BEGIN
              lCduWord.Print();
              lCduWord.Save();
              lCduWord.Close();
            END ELSE BEGIN
              lCduWord.PrintWithPrinterSelection();
              Window.UPDATE(1,Text013);
              lCduWord.Save();
              lCduWord.Close();
              SLEEP(5000);
            END;
            IF NOT IWithPrinterSelection THEN
              lCduWord.Terminate;
          END;
        END;
      END;
    END;

    PROCEDURE PrintWriteOff@1210190000();
    VAR
      DocPrint@1100485002 : Codeunit 229;
      TempReportSelection@1100485003 : TEMPORARY Record 77;
    BEGIN
      //ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"P.Quote");
      //ReportSelection.SETFILTER("Report ID", '<>0');
      //Quantity := ReportSelection.COUNT;
      //IF Quantity > 1 THEN BEGIN
      //  ReportSelection.FIND('-');
      //  IF PAGE.RUNMODAL(PAGE::"Report Selection - Purchase", ReportSelection) = ACTION::LookupOK THEN
      //    ReportSelection.SETRANGE("Report ID", ReportSelection."Report ID")
      //  ELSE
      //    EXIT;
      //END;
      //IF ReportSelection.FIND('-') THEN BEGIN

      DocPrint.GetReportSelection(TempReportSelection.Usage::"P.Quote",TempReportSelection,TRUE);
      TempReportSelection.FIND('-');
      REPEAT
      //IF CONFIRM(Text014,TRUE) THEN BEGIN
        IF Status < Status::Definitive THEN
          ERROR(Text015);
        QuoteHeadRec.SETRANGE("Document Type",QuoteHeadRec."Document Type"::Quote);
        QuoteHeadRec.SETRANGE("Job No.","Project No.");
        QuoteHeadRec.SETRANGE("Purchase Action",Code);
        IF NOT QuoteHeadRec.FINDFIRST THEN
          ERROR(Text016)
        ELSE BEGIN
          OrderHeadRec.SETRANGE("Document Type",OrderHeadRec."Document Type"::Order);
          OrderHeadRec.SETRANGE("Job No.","Project No.");
          OrderHeadRec.SETRANGE("Purchase Action",Code);
          IF OrderHeadRec.FINDSET THEN
            WriteOff(TempReportSelection."Report ID")
          ELSE
            IF CONFIRM(Text017,TRUE) THEN
              WriteOff(TempReportSelection."Report ID");
        END;
      UNTIL TempReportSelection.NEXT = 0;
      //END;
    END;

    PROCEDURE WriteOff@1210190001(ReportID@1100485000 : Integer);
    VAR
      lQuoteHeadRec@1210190001 : Record 38;
    BEGIN
      REPEAT
        OrderHeadRec.SETRANGE("Copied from Purchase Quote No.",QuoteHeadRec."No.");
        IF NOT OrderHeadRec.FINDFIRST THEN BEGIN
          lQuoteHeadRec.COPYFILTERS(QuoteHeadRec);
          lQuoteHeadRec.SETRANGE("No.",QuoteHeadRec."No.");
          REPORT.RUNMODAL(ReportID, FALSE, FALSE, lQuoteHeadRec);
        END;
      UNTIL QuoteHeadRec.NEXT = 0;
    END;

    PROCEDURE Setfilter@1100485000(lProjCde@1210190000 : Code[20]);
    BEGIN
      FILTERGROUP(2);
      SETRANGE("Project No.",lProjCde);
      ProjectNoEditable := FALSE;
      gProjCde := lProjCde;
      FILTERGROUP(0);
    END;

    PROCEDURE PrintQuoteDocs@1100485001();
    VAR
      lvAskForPrinter@1100485000 : Boolean;
    BEGIN
      Window.OPEN(Text007);
      WITH PurchHeadRec DO BEGIN
        lvAskForPrinter := TRUE;
        RESET;
        SETCURRENTKEY("Document Type","Job No.");
        SETRANGE("Document Type", "Document Type"::Quote);
        SETRANGE("Job No.", Rec."Project No.");
        SETRANGE("Purchase Action", Rec.Code);
        IF FINDSET THEN
          REPEAT
            TempPurchHeadRec := PurchHeadRec;
            PrintWordDoc(TRUE, lvAskForPrinter);
            lvAskForPrinter := FALSE;
          UNTIL NEXT = 0;
        RESET;
      END;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ResponsibleEmployeeOnAfterVali@19053792();
    BEGIN
      CALCFIELDS("Name Employee");
    END;

    LOCAL PROCEDURE StatusOnAfterValidate@19072689();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE DefaultCostObjectPurchaseOnAft@19071480();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BudgetAdjustmentTypeOnAfterVal@19072882();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    VAR
      RecRef@1100529900 : RecordRef;
    BEGIN
      xRec := Rec;
      AssignButtonEnable := (NOT (Status = Status::Definitive));

      RecRef.GETTABLE(Rec);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetRecordReference(RecRef);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetByCompany(TRUE);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetDepartmentCode('');
    END;

    BEGIN
    {
      4PS, dbeekman, 22-10-2008:
        - ReportSelection changed. cod229.GetReportSelection called to select reports to be printed

      4PS, 11-11-13, Report "Project Purchase Actions" and "Purchase Shipment" no longer supported in NAV2013
    }
    END.
  }
}

