OBJECT Page 11012074 Project Ledger (Compressed)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11072005=m;
    CaptionML=ENU=Project Ledger (Compressed);
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table11072005;
    DataCaptionFields=Job No.;
    PageType=List;
    OnInit=BEGIN
             PurchaseActionVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 Compress(TRUE);
               END;

    OnNextRecord=VAR
                   Step@1100525003 : Integer;
                   CurrentSteps@1100525004 : Integer;
                   NumberOfSteps@1100525005 : Integer;
                   eof@1100525001 : Boolean;
                 BEGIN
                   IF NOT CompressedBln THEN
                     EXIT(NEXT(Steps));

                   ProjectLedgEntry.COPY(Rec);

                   IF Steps < 0 THEN
                     Step := -1
                   ELSE
                     Step := 1;

                   CurrentSteps := 0;
                   IF Steps <> 0 THEN
                     eof := ProjectLedgEntry.NEXT(Step) = 0;
                   IF NOT eof THEN
                     FOR NumberOfSteps := 1 TO ABS(Steps) DO BEGIN
                       WHILE SkipRec AND NOT eof DO
                         eof := ProjectLedgEntry.NEXT(Step) = 0;
                       IF NOT eof THEN BEGIN
                         Rec := ProjectLedgEntry;
                         CurrentSteps := CurrentSteps + Step;
                       END;
                     END;

                   EXIT(CurrentSteps);
                 END;

    OnAfterGetRecord=BEGIN
                       IF CompressedBln THEN BEGIN
                         IF CURRENTKEY <> AllowedKeyCompressed THEN BEGIN
                           MESSAGE(Text001, AllowedKeyCompressed);
                           SETCURRENTKEY("Main Project No.","Job No.", "Document No.", "Posting Date");
                         END;
                       END;

                       CountAmounts;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 24      ;1   ;Action    ;
                      CaptionML=ENU=Compress;
                      Promoted=Yes;
                      Enabled=CompresBtnEnabled;
                      Image=Compress;
                      OnAction=BEGIN
                                 Compress(TRUE);
                               END;
                                }
      { 25      ;1   ;Action    ;
                      CaptionML=ENU=Undo Compress;
                      Promoted=Yes;
                      Enabled=UndoCompresBtnEnabled;
                      Image=EditFilter;
                      OnAction=BEGIN
                                 Compress(FALSE);
                               END;
                                }
      { 1100409000;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 23      ;1   ;Action    ;
                      CaptionML=ENU=&Specification;
                      Promoted=Yes;
                      Image=Track;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProjectLedgEntry.RESET;
                                 ProjectLedgEntry.COPY(Rec);
                                 ProjectLedgEntry.SETCURRENTKEY("Document No.", "Posting Date");
                                 ProjectLedgEntry.SETRANGE("Document No.", "Document No.");
                                 ProjectLedgEntry.SETRANGE(Compressed);
                                 PAGE.RUNMODAL(PAGE::"Job Ledger Entries", ProjectLedgEntry);
                               END;
                                }
      { 1100485000;1 ;Action    ;
                      CaptionML=ENU=S&canned Document;
                      Promoted=Yes;
                      Image=Documents;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvPurchSetupRec@1100485000 : Record 312;
                               BEGIN
                                 lvPurchSetupRec.GET;
                                 lvPurchSetupRec.ShowScannedDocumentWithDocNoInSupplComp("Document No.", "Supplying Company");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 1100525000;2;Field  ;
                SourceExpr="Document No.";
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Posting Date";
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Job No.";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                CaptionML=ENU=Quantity;
                SourceExpr=TotalQuantity;
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                CaptionML=ENU=Total Cost;
                SourceExpr=TotalCost;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                CaptionML=ENU=Total Price;
                SourceExpr=TotalPrice;
                Editable=FALSE }

    { 1210190002;2;Field  ;
                CaptionML=ENU=Actual Preclosure Result;
                SourceExpr=TotalActualPreclosureResult;
                AutoFormatType=1;
                Editable=FALSE }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Actual Provision Result;
                SourceExpr=TotalActualProvisionResult;
                AutoFormatType=1 }

    { 12  ;2   ;Field     ;
                CaptionML=ENU=Closed Costs;
                SourceExpr=TotalClosedCosts;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                CaptionML=ENU=Closed Revenues;
                SourceExpr=TotalClosedRevenues;
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                CaptionML=ENU=Remaining Amount;
                SourceExpr=TotalRemainingAmount;
                Editable=FALSE }

    { 1100485006;2;Field  ;
                SourceExpr="Vendor No." }

    { 1100485002;2;Field  ;
                SourceExpr="Vendor Name" }

    { 1100485008;2;Field  ;
                SourceExpr=Principal }

    { 1100485004;2;Field  ;
                SourceExpr="Principal Name" }

    { 1100525004;2;Field  ;
                SourceExpr="Purchase Action";
                Visible=PurchaseActionVisible }

    { 1210190000;2;Field  ;
                SourceExpr="Source Code" }

  }
  CODE
  {
    VAR
      ProjectLedgEntry@11012000 : Record 11072005;
      CompressedBln@11012001 : Boolean;
      TotalCost@1210190000 : Decimal;
      TotalPrice@1210190001 : Decimal;
      TotalClosedCosts@1210190002 : Decimal;
      TotalClosedRevenues@1210190003 : Decimal;
      TotalRemainingAmount@1210190004 : Decimal;
      TotalQuantity@1210190005 : Decimal;
      TotalActualPreclosureResult@1210190006 : Decimal;
      TotalActualProvisionResult@1100525000 : Decimal;
      TotalInvoicedAmt@1100485000 : Decimal;
      TotalInvoicedQuan@1100485001 : Decimal;
      DepAuthRec@1100000997 : Record 11012466;
      DPA_IsHardFilter@1100000999 : Boolean;
      AllowedKeyCompressed@1100525001 : Text[1024];
      Text001@1100525002 : TextConst 'ENU=For ''Compressed'' only sort allowed on ''%1''.';
      PurchaseActionVisible@19039042 : Boolean INDATASET;
      CompresBtnEnabled@1100409000 : Boolean INDATASET;
      UndoCompresBtnEnabled@1100409001 : Boolean INDATASET;

    PROCEDURE Compress@1(CompressMode@1100409000 : Boolean);
    BEGIN
      IF CompressMode THEN BEGIN
        SETCURRENTKEY("Main Project No.","Job No.", "Document No.", "Posting Date");
        AllowedKeyCompressed := CURRENTKEY;
      END;
      CompressedBln := CompressMode;
      PurchaseActionVisible := (NOT CompressedBln); //call C-019412
      CompresBtnEnabled := (NOT CompressedBln);
      UndoCompresBtnEnabled := CompressedBln;
    END;

    PROCEDURE SkipRec@1100525002() : Boolean;
    BEGIN
      IF (ProjectLedgEntry."Main Project No." <> Rec."Main Project No.") OR
         (ProjectLedgEntry."Job No." <>  Rec."Job No.") OR
         (ProjectLedgEntry."Document No." <> Rec."Document No.")
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CountAmounts@2();
    VAR
      VendorTemp@1100525000 : TEMPORARY Record 23;
    BEGIN
      TotalCost := "Total Cost (LCY)";
      TotalPrice := "Total Price (LCY)";
      TotalClosedCosts := "Closed Costs";
      TotalClosedRevenues := "Closed Revenues";
      TotalQuantity := Quantity;
      TotalActualPreclosureResult := "Actual Preclosure Result";
      TotalActualProvisionResult := "Actual Provision Result";
      CALCFIELDS("Amount Invoiced (LCY)", "Quantity Invoiced");
      TotalInvoicedQuan := "Quantity Invoiced";
      TotalInvoicedAmt := "Amount Invoiced (LCY)";

      IF NOT CompressedBln THEN
        EXIT;

      //C008887
      VendorTemp."No." := "Vendor No.";
      VendorTemp.INSERT;
      //

      ProjectLedgEntry.RESET;
      ProjectLedgEntry.COPY(Rec);
      ProjectLedgEntry.SETCURRENTKEY("Main Project No.","Job No.", "Document No.", "Posting Date");
      ProjectLedgEntry.SETRANGE("Main Project No.", "Main Project No.");
      ProjectLedgEntry.SETRANGE("Job No.", "Job No.");
      ProjectLedgEntry.SETRANGE("Document No.", "Document No.");
      IF ProjectLedgEntry.FINDSET THEN BEGIN
        REPEAT
          IF ProjectLedgEntry."Entry No." <> "Entry No." THEN BEGIN
            TotalCost := TotalCost + ProjectLedgEntry."Total Cost (LCY)";
            TotalPrice := TotalPrice + ProjectLedgEntry."Total Price (LCY)";
            TotalClosedCosts :=  TotalClosedCosts + ProjectLedgEntry. "Closed Costs";
            TotalClosedRevenues := TotalClosedRevenues + ProjectLedgEntry."Closed Revenues";
            TotalQuantity := TotalQuantity + ProjectLedgEntry.Quantity;
            TotalActualPreclosureResult := TotalActualPreclosureResult + ProjectLedgEntry."Actual Preclosure Result";
            TotalActualProvisionResult := TotalActualProvisionResult + ProjectLedgEntry."Actual Provision Result";
            ProjectLedgEntry.CALCFIELDS("Amount Invoiced (LCY)", "Quantity Invoiced");
            TotalInvoicedQuan := TotalInvoicedQuan + ProjectLedgEntry."Quantity Invoiced";
            TotalInvoicedAmt := TotalInvoicedAmt + ProjectLedgEntry."Amount Invoiced (LCY)";
            //C008887
            IF ProjectLedgEntry."Vendor No." <> "Vendor No." THEN BEGIN
              VendorTemp."No." := ProjectLedgEntry."Vendor No.";
              IF VendorTemp.INSERT THEN;
            END;
            //
          END;
        UNTIL ProjectLedgEntry.NEXT = 0;
      END;

      "Purchase Action" := '';

      //C008887
      IF VendorTemp.COUNT > 1 THEN BEGIN
        "Vendor No." := '[' + FORMAT(VendorTemp.COUNT) + ']';
        "Vendor Name" := '';
      END;
      //
    END;

    BEGIN
    END.
  }
}

