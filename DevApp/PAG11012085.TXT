OBJECT Page 11012085 Prognosis
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012035=rimd;
    CaptionML=ENU=Prognosis;
    SourceTable=Table11012034;
    DataCaptionFields=Project No.;
    PageType=Document;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=ENU=New,Process,Report,Prognosis;
    OnInit=BEGIN
             FixPrognosisLineEditable := TRUE;
             TextEditable := TRUE;
             ExpectedFinishingDateEditable := TRUE;
             CommentEditable := TRUE;
             PrognosisDateEditable := TRUE;
             ProjectNoEditable := TRUE;
             PrognosisDetailedEnabled := TRUE;
             DetailedOrElementEnabled := TRUE;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 //C019663.so
                 //IF (GETFILTER("Project No.") <> '') AND
                 //   (GETFILTER("Prognosis Date") = '') THEN
                 //  IF FINDLAST THEN;
                 //C019663.eo
               END;

    OnAfterGetRecord=BEGIN
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=VAR
                  Proj@1100525001 : Record 11072003;
                BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02

                  ProjSetup.GET;
                  "Fix Prognosis Line" := ProjSetup."Fix Prognosis Line";  //db, 13-01-11
                  IF ("Project No." = '') AND (xRec."Project No." <> '') THEN
                    "Project No." := xRec."Project No.";
                  IF "Project No." <> '' THEN BEGIN
                    IF Proj.GET("Project No.") THEN
                      "Prognosis Level" := Proj."Prognosis Level";
                  END;
                  OnAfterGetCurrRecord;
                END;

    OnDeleteRecord=BEGIN
                     TESTFIELD(Fixed, FALSE);  //*31928
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 8       ;1   ;ActionGroup;
                      CaptionML=ENU=&Prognosis }
      { 1210190024;2 ;Action    ;
                      CaptionML=ENU=Project Budget;
                      RunObject=Page 11012003;
                      RunPageView=SORTING(No.);
                      RunPageLink=No.=FIELD(Project No.);
                      Image=CostBudget }
      { 1100485000;2 ;Action    ;
                      CaptionML=ENU=Purchase Orders;
                      Image=PostOrder;
                      OnAction=VAR
                                 Job@1100528400 : Record 11072003;
                               BEGIN
                                 IF Job.GET("Project No.") THEN
                                   Job.ShowPurchaseOrdersForProject;
                               END;
                                }
      { 1210190017;2 ;Action    ;
                      CaptionML=ENU=&Documents;
                      Image=Documents;
                      OnAction=VAR
                                 RecRef@1210190001 : RecordRef;
                                 DocumentFilters@1210190000 : Codeunit 11012432;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
                               END;
                                }
      { 1100525016;1 ;ActionGroup;
                      CaptionML=ENU=Lines;
                      ActionContainerType=RelatedInformation }
      { 1100525014;2 ;Action    ;
                      Name=Labor;
                      CaptionML=ENU=Labor;
                      RunObject=Page 11012101;
                      RunPageView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                  WHERE(Cost Type=CONST(Labor));
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Enabled=PrognosisDetailedEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100525008;2 ;Action    ;
                      Name=Material;
                      CaptionML=ENU=Material;
                      RunObject=Page 11012086;
                      RunPageView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                  WHERE(Cost Type=CONST(Material));
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Enabled=PrognosisDetailedEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100525006;2 ;Action    ;
                      Name=Subcontracting;
                      CaptionML=ENU=Subcontracting;
                      RunObject=Page 11012086;
                      RunPageView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                  WHERE(Cost Type=CONST(Subcontracting));
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Enabled=PrognosisDetailedEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100525003;2 ;Action    ;
                      Name=Plant;
                      CaptionML=ENU=Plant;
                      RunObject=Page 11012086;
                      RunPageView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                  WHERE(Cost Type=CONST(Plant));
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Enabled=PrognosisDetailedEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100525001;2 ;Action    ;
                      Name=Sundry;
                      CaptionML=ENU=Sundry;
                      RunObject=Page 11012086;
                      RunPageView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                  WHERE(Cost Type=CONST(Sundry));
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Enabled=PrognosisDetailedEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100525020;2 ;Action    ;
                      Name=Revenue;
                      CaptionML=ENU=Revenue;
                      RunObject=Page 11012062;
                      RunPageView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                  WHERE(Cost Type=CONST(Revenue));
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Enabled=PrognosisDetailedEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1100525004;2 ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=Summary;
                      RunObject=Page 11130134;
                      RunPageOnRec=Yes;
                      RunPageView=SORTING(Project No.,Prognosis Date);
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisDetailedEnabled;
                      Enabled=PrognosisDetailedEnabled;
                      Image=Statistics;
                      PromotedCategory=Category4 }
      { 1100525028;2 ;Action    ;
                      CaptionML=ENU=Element Lines;
                      RunObject=Page 11124964;
                      RunPageView=SORTING(Project No.,Prognosis Date,Element);
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Prognosis Date=FIELD(Prognosis Date);
                      Promoted=Yes;
                      Visible=PrognosisElementEnabled;
                      Enabled=PrognosisElementEnabled;
                      Image=ItemTrackingLedger;
                      PromotedCategory=Category4 }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 23      ;1   ;Action    ;
                      CaptionML=ENU=&Create;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105

                                 CASE "Prognosis Level" OF
                                   "Prognosis Level"::Detailed:
                                     ProcessPrognosis(Rec);
                                   "Prognosis Level"::Rough:
                                     PrognosisMgt.CreatePrognosis(Rec, CostTypes::Both);
                                   "Prognosis Level"::Element:
                                     ProcessPrognosisElement(Rec);
                                 END;
                               END;
                                }
      { 20      ;1   ;ActionGroup;
                      Name=FunctionsButton;
                      CaptionML=ENU=F&unctions }
      { 1210190025;2 ;Action    ;
                      CaptionML=ENU=Create from &Specifications of Previous Prognosis;
                      Enabled=PrognosisDetailedEnabled;
                      Image=CreatePutawayPick;
                      OnAction=VAR
                                 Prognosis@1210190000 : Record 11012034;
                               BEGIN
                                 //DP00042
                                 CurrPage.UPDATE(TRUE);
                                 CheckFixed;

                                 Prognosis := Rec;
                                 Prognosis.SETRECFILTER;
                                 CODEUNIT.RUN(CODEUNIT::"Copy Prognosis From PrevSpec", Prognosis);
                               END;
                                }
      { 1100525011;2 ;ActionGroup;
                      CaptionML=ENU=Copy Previous;
                      Image=ExecuteBatch }
      { 21      ;3   ;Action    ;
                      CaptionML=ENU=Copy Previous Cost Prognosis;
                      Promoted=No;
                      Enabled=DetailedOrElementEnabled;
                      Image=Copy;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105
                                 IF NOT CONFIRM(Text000) THEN
                                   EXIT;

                                 PrognosisMgt.CreatePrognosis(Rec,CostTypes::Cost);
                                 CopyPreviousPrognosis(CostTypes::Cost);
                               END;
                                }
      { 1210190005;3 ;Action    ;
                      CaptionML=ENU=Copy Previous Prognosis &End Result;
                      Promoted=No;
                      Enabled=PrognosisDetailedEnabled;
                      Image=Copy;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105
                                 IF NOT CONFIRM(Text003) THEN
                                   EXIT;

                                 PrognosisMgt.CreatePrognosis(Rec,CostTypes::Cost);
                                 CopyPreviousPrognosisEndResult(CostTypes::Cost);
                               END;
                                }
      { 1100525018;3 ;Action    ;
                      CaptionML=ENU=Copy Previous Revenue Prognosis;
                      Promoted=No;
                      Enabled=PrognosisDetailedEnabled;
                      Image=Copy;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105
                                 IF NOT CONFIRM(Text005) THEN
                                   EXIT;

                                 PrognosisMgt.CreatePrognosis(Rec,CostTypes::Revenue);
                                 CopyPreviousPrognosis(CostTypes::Revenue);
                               END;
                                }
      { 1100525017;3 ;Action    ;
                      CaptionML=ENU=Copy Previous Prognosis Total Revenues;
                      Promoted=No;
                      Enabled=PrognosisDetailedEnabled;
                      Image=Copy;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105
                                 IF NOT CONFIRM(Text006) THEN
                                   EXIT;

                                 PrognosisMgt.CreatePrognosis(Rec,CostTypes::Revenue);
                                 CopyPreviousPrognosisEndResult(CostTypes::Revenue);
                               END;
                                }
      { 1100525026;3 ;Action    ;
                      CaptionML=ENU=Copy Comments Previous Prognosis;
                      Image=Copy;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105
                                 CopyPreviousComments; // jhoek
                               END;
                                }
      { 1100525010;2 ;ActionGroup;
                      CaptionML=ENU=Fill prognosis;
                      Enabled=PrognosisDetailedEnabled;
                      Image=CostAccounting }
      { 22      ;3   ;Action    ;
                      CaptionML=ENU=Fill Prognosis with &Available Cost;
                      Enabled=DetailedOrElementEnabled;
                      Image=InsertAccount;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630

                                 CheckFixed;  //db, 04-01-11: M24105
                                 IF NOT CONFIRM(Text001) THEN
                                   EXIT;

                                 PrognosisMgt.CreatePrognosis(Rec,CostTypes::Cost);
                                 FillPrognosisWithAvailable;
                               END;
                                }
      { 1210190002;3 ;Action    ;
                      CaptionML=ENU=Fill Prognosis with extrapolated costs;
                      Enabled=PrognosisDetailedEnabled;
                      Image=InsertAccount;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105
                                 IF NOT CONFIRM(Text002) THEN
                                   EXIT;

                                 PrognosisMgt.CreatePrognosis(Rec,CostTypes::Cost);
                                 FillPrognosisWithXtraPolCost;
                               END;
                                }
      { 1100528400;3 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Fill Prognosis from Project Planning Activities;
                      Enabled=PrognosisDetailedEnabled;
                      Image=InsertAccount;
                      OnAction=VAR
                                 ProjectPlanningActivity@1100528400 : Record 11012431;
                                 FillPrognosisFromProjAct@1100528401 : Report 11012272;
                               BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;

                                 TESTFIELD("Project No.");
                                 TESTFIELD("Prognosis Date");
                                 ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
                                 ProjectPlanningActivity.FINDFIRST;  //* There must be a project planning activity for the project.

                                 ProjRec.SETRANGE("No.", "Project No.");
                                 FillPrognosisFromProjAct.SETTABLEVIEW(ProjRec);
                                 FillPrognosisFromProjAct.SetSelection("Project No.", "Prognosis Date");
                                 FillPrognosisFromProjAct.RUNMODAL;
                               END;
                                }
      { 1100528401;3 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Fill Prognosis from Requested Activity Capacity;
                      Enabled=PrognosisDetailedEnabled;
                      Image=InsertAccount;
                      OnAction=VAR
                                 RequestedActivityCapacity@1100528400 : Record 11125708;
                                 FillPrognosisFromReqCap@1100528401 : Report 11012271;
                               BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630

                                 CheckFixed;

                                 TESTFIELD("Project No.");
                                 TESTFIELD("Prognosis Date");
                                 RequestedActivityCapacity.SETRANGE("Project No.", "Project No.");
                                 RequestedActivityCapacity.FINDFIRST;  //* There must be a requested activity capacity for the project.

                                 ProjRec.SETRANGE("No.", "Project No.");
                                 FillPrognosisFromReqCap.SETTABLEVIEW(ProjRec);
                                 FillPrognosisFromReqCap.SetSelection("Project No.", "Prognosis Date");
                                 FillPrognosisFromReqCap.RUNMODAL;
                               END;
                                }
      { 1100525032;3 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Fill Prognosis from Assigned Activity Capacity;
                      Enabled=PrognosisDetailedEnabled;
                      Image=InsertAccount;
                      OnAction=VAR
                                 ProjRec@1100525002 : Record 11072003;
                                 AssignedActivCapRec@1100525000 : Record 11125710;
                                 FillPrognFromCapPlanningRpt@1100525001 : Report 11012270;
                               BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105

                                 TESTFIELD("Project No.");
                                 TESTFIELD("Prognosis Date");
                                 AssignedActivCapRec.SETRANGE("Project No.", "Project No.");
                                 AssignedActivCapRec.FINDFIRST;  //* There must be a capacity planning of the project

                                 ProjRec.SETRANGE("No.", "Project No.");
                                 FillPrognFromCapPlanningRpt.SETTABLEVIEW(ProjRec);
                                 FillPrognFromCapPlanningRpt.SetSelection("Project No.", "Prognosis Date");
                                 FillPrognFromCapPlanningRpt.RUNMODAL;
                               END;
                                }
      { 1100525068;3 ;Action    ;
                      CaptionML=ENU=Fill Prognosis Revenues;
                      Enabled=PrognosisDetailedEnabled;
                      Image=InsertAccount;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630

                                 TESTFIELD(Fixed,FALSE);
                                 IF NOT CONFIRM(Text004) THEN
                                   EXIT;

                                 PrognosisMgt.CreatePrognosis(Rec,CostTypes::Revenue);
                                 FillPrognRevenues;
                               END;
                                }
      { 1100525094;2 ;Action    ;
                      CaptionML=ENU=Calculate Surcharges;
                      Enabled=PrognosisDetailedEnabled;
                      Image=Calculate;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630
                                 CheckFixed;  //db, 04-01-11: M24105
                                 IF "Prognosis Level" = "Prognosis Level"::Rough THEN
                                   ERROR(Text008);

                                 IF NOT CONFIRM(Text007) THEN
                                   EXIT;

                                 "Ovh. Surcharges Calculated" := TRUE;
                                 "Altered After Calculation" := FALSE;
                                 MODIFY;

                                 RemoveSurcharges;
                                 CalculateSurcharges;
                               END;
                                }
      { 1100525095;2 ;Action    ;
                      CaptionML=ENU=Delete Surcharges;
                      Enabled=PrognosisDetailedEnabled;
                      Image=Delete;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630

                                 CheckFixed;  //db, 04-01-11: M24105
                                 IF "Prognosis Level" = "Prognosis Level"::Rough THEN
                                   ERROR(Text008);

                                 IF NOT CONFIRM(Text009) THEN
                                   EXIT;

                                 "Ovh. Surcharges Calculated" := FALSE;
                                 "Altered After Calculation" := FALSE;
                                 MODIFY;

                                 RemoveSurcharges;
                               END;
                                }
      { 1100525005;2 ;Action    ;
                      CaptionML=ENU=Calculate Risc Coverage;
                      Enabled=PrognosisDetailedEnabled;
                      Image=Calculate;
                      OnAction=BEGIN
                                 //C012556
                                 CurrPage.UPDATE(TRUE);
                                 CheckFixed;
                                 IF "Prognosis Level" = "Prognosis Level"::Rough THEN
                                   ERROR(Text008);

                                 IF NOT CONFIRM(Text010) THEN
                                   EXIT;

                                 CalculateRiscCoverage;
                               END;
                                }
      { 1100525025;  ;ActionContainer;
                      ActionContainerType=Reports }
      { 24      ;1   ;ActionGroup;
                      CaptionML=ENU=&Print }
      { 1100528402;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Print Prognosis;
                      Image=Print;
                      OnAction=VAR
                                 Prognosis@1100528400 : Record 11012034;
                                 PrognosisReport@1100528401 : Report 11012049;
                               BEGIN
                                 Prognosis := Rec;
                                 Prognosis.SETRANGE("Project No.", "Project No.");
                                 Prognosis.SETRANGE("Prognosis Date", "Prognosis Date");
                                 REPORT.RUN(REPORT::Prognosis, TRUE, FALSE, Prognosis);
                               END;
                                }
      { 26      ;2   ;Action    ;
                      CaptionML=ENU=Prognosis Reports;
                      Promoted=Yes;
                      Image=PrintReport;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 PrintDoc@1100525000 : Codeunit 229;
                               BEGIN
                                 PrintDoc.PrintPrognosis(Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 10  ;1   ;Group     ;
                CaptionML=ENU=General }

    { 11  ;2   ;Field     ;
                SourceExpr="Project No.";
                Editable=ProjectNoEditable }

    { 13  ;2   ;Field     ;
                SourceExpr="Project Description";
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Prognosis Date";
                Editable=PrognosisDateEditable }

    { 1100525069;2;Field  ;
                SourceExpr="Prognosis Level";
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 1100525019;2;Field  ;
                SourceExpr="Rough Prognosis Total Revenues";
                Editable=PrognosisRoughFieldsEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525015;2;Field  ;
                SourceExpr="Rough Prognosis Total Cost";
                Editable=PrognosisRoughFieldsEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Rough Prognosis Financial Result;
                BlankZero=Yes;
                SourceExpr="Rough Prognosis Total Revenues" - "Rough Prognosis Total Cost";
                AutoFormatType=1 }

    { 1100525000;2;Field  ;
                SourceExpr="Rough Prognosis End Result";
                Editable=PrognosisRoughFieldsEditable }

    { 14  ;2   ;Field     ;
                SourceExpr=Comment;
                Editable=CommentEditable }

    { 1100525022;2;Field  ;
                SourceExpr=Fixed;
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE); //call 25647
                           END;
                            }

    { 1100525023;2;Field  ;
                SourceExpr="Expected Finishing Date";
                Editable=ExpectedFinishingDateEditable }

    { 1100525096;2;Field  ;
                SourceExpr="Ovh. Surcharges Calculated" }

    { 1100525098;2;Field  ;
                SourceExpr="Altered After Calculation" }

    { 1100525100;2;Field  ;
                SourceExpr="Fix Prognosis Line";
                Editable=FixPrognosisLineEditable }

    { 1210190027;2;Field  ;
                SourceExpr="Used in Closing Project" }

    { 1905289801;1;Group  ;
                CaptionML=ENU=Data }

    { 1100525012;2;Field  ;
                SourceExpr="Created by" }

    { 1100525013;2;Field  ;
                SourceExpr="Created on" }

    { 1100525106;2;Field  ;
                SourceExpr="Modified by" }

    { 1100525102;2;Field  ;
                SourceExpr="Last Date Modified" }

    { 1902859001;1;Group  ;
                CaptionML=ENU=Text }

    { 18  ;2   ;Field     ;
                SourceExpr=Text;
                Editable=TextEditable;
                MultiLine=Yes }

    { 1100525024;0;Container;
                ContainerType=FactBoxArea }

    { 1100529900;1;Part   ;
                Name=RegisterExternalDocumentFB;
                PagePartID=Page11125053;
                PartType=Page }

    { 1100525021;1;Part   ;
                CaptionML=ENU=Prognosis;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11130128;
                PartType=Page }

    { 1100525027;1;Part   ;
                CaptionML=ENU=Prognosis End Result;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11130129;
                PartType=Page }

    { 1100525009;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1100525007;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@11012005 : TextConst 'ENU=Do you want to copy the previous prognosis Costs?';
      Text001@11012006 : TextConst 'ENU=Do you want to fill prognosis with Available ?';
      ProjSetup@1210190001 : Record 315;
      ProjRec@11012001 : Record 11072003;
      PrognosisMgt@1100525014 : Codeunit 11020217;
      Text002@1210190003 : TextConst 'ENU=Do you want to fill prognosis with extrapolated costs?';
      Text003@1210190008 : TextConst 'ENU=Do you want to copy the previous Prognosis End Result?';
      Text004@1100525003 : TextConst 'ENU=Do you want to Fill Prognosis Revenues?';
      CostTypes@1100525004 : 'Cost,Revenue,Both';
      Text005@1100525005 : TextConst 'ENU=Do you want to copy the previous prognosis Revenues?';
      DPA_IsHardFilter@1100000999 : Boolean;
      Text006@1100525011 : TextConst 'ENU=Do you want to copy the previous Prognosis Total Revenues?';
      Text007@1100525000 : TextConst 'ENU=Do you want to fill Prognosis Surcharges?';
      Text008@1100525001 : TextConst 'ENU=This option is only available at a detailled prognosis';
      Text009@1100525010 : TextConst 'ENU=Do you want to remove Prognosis Surcharges?';
      ProjectNoEditable@19028701 : Boolean INDATASET;
      PrognosisDateEditable@19046408 : Boolean INDATASET;
      CommentEditable@19054571 : Boolean INDATASET;
      ExpectedFinishingDateEditable@19013399 : Boolean INDATASET;
      TextEditable@19008086 : Boolean INDATASET;
      FixPrognosisLineEditable@19068858 : Boolean INDATASET;
      PrognosisDetailedEnabled@1100525009 : Boolean INDATASET;
      PrognosisRoughEnabled@1100525017 : Boolean INDATASET;
      PrognosisRoughFieldsEditable@1100525013 : Boolean INDATASET;
      PrognosisElementEnabled@1100525002 : Boolean INDATASET;
      DetailedOrElementEnabled@1100525006 : Boolean INDATASET;
      StartProcess@1100528801 : Boolean;
      PrognosisDate@1100528800 : Date;
      CalcSurcharges@1100528803 : Boolean;
      Text010@1100525015 : TextConst 'ENU=Do you want to calculate Risc Coverage?';
      CalcRiscCoverage@1100525016 : Boolean;

    PROCEDURE UpdateEditable@1100525001();
    BEGIN
      //db, 21-09-10
      ProjectNoEditable := (NOT Fixed);
      PrognosisDateEditable := (NOT Fixed);
      CommentEditable := (NOT Fixed);
      ExpectedFinishingDateEditable := (NOT Fixed);
      TextEditable := (NOT Fixed);
      FixPrognosisLineEditable := (NOT Fixed);  //db, 13-01-11

      PrognosisDetailedEnabled := ("Prognosis Level" = "Prognosis Level"::Detailed);
      PrognosisRoughEnabled := ("Prognosis Level" = "Prognosis Level"::Rough);
      PrognosisRoughFieldsEditable := (PrognosisRoughEnabled AND (NOT Fixed));
      PrognosisElementEnabled := ("Prognosis Level" = "Prognosis Level"::Element);
      DetailedOrElementEnabled := (PrognosisDetailedEnabled OR PrognosisElementEnabled);
    END;

    PROCEDURE CheckFixed@1100525000();
    BEGIN
      TESTFIELD(Fixed,FALSE);
    END;

    PROCEDURE CheckPrognosisSpecification@11136550(iProject@11136551 : Code[20];iPrognosisDate@11136554 : Date);
    VAR
      Job@11136553 : Record 11072003;
      BudgetLine@11136550 : Record 11012001;
      PrognosisLine@11136552 : Record 11012035;
      PrognosisLineSpec@11136556 : Record 11020687;
    BEGIN
      //DP00042
      Job.GET(iProject);

      PrognosisLine.SETRANGE("Project No.", iProject);
      PrognosisLine.SETRANGE("Prognosis Date", iPrognosisDate);
      IF PrognosisLine.FINDSET THEN BEGIN
        REPEAT
          BudgetLine.SETCURRENTKEY("Project No.", Element, "Cost Type", "Cost Object");
          BudgetLine.SETRANGE("Project No.", PrognosisLine."Project No.");
          IF Job."Prognosis per Element" THEN
            BudgetLine.SETRANGE(Element, PrognosisLine.Element);
          BudgetLine.SETRANGE("Cost Type", PrognosisLine."Cost Type");
          BudgetLine.SETRANGE("Cost Object", PrognosisLine."Cost Object");
          IF BudgetLine.FINDSET THEN BEGIN
            REPEAT
              IF ISNULLGUID(BudgetLine."Reference No.") THEN BEGIN
                BudgetLine."Reference No." := CREATEGUID;
                BudgetLine.MODIFY;
              END;

              PrognosisLineSpec.SETCURRENTKEY("Reference No.", "Project No.", "Prognosis Date");
              PrognosisLineSpec.SETRANGE("Reference No.", BudgetLine."Reference No.");
              PrognosisLineSpec.SETRANGE("Project No.", iProject);
              PrognosisLineSpec.SETRANGE("Prognosis Date", iPrognosisDate);
              IF PrognosisLineSpec.ISEMPTY THEN BEGIN
                CreatePrognosisSpecification(
                  iProject,
                  iPrognosisDate,
                  PrognosisLine.Element,
                  PrognosisLine."Cost Type",
                  PrognosisLine."Cost Object",
                  BudgetLine."Reference No.",
                  BudgetLine.Description,
                  BudgetLine."Extension Contract",
                  BudgetLine."Cost Component",
                  BudgetLine.Amount);   //db, 31-01-12: M32801
              END;
            UNTIL BudgetLine.NEXT = 0;
          END;
        UNTIL PrognosisLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreatePrognosisSpecification@11136551(iProject@11136555 : Code[20];iPrognosisDate@11136554 : Date;iElement@11136553 : Code[20];iCostType@11136552 : Integer;iCostObject@11136551 : Code[20];iReference@11136556 : GUID;iDescription@11136558 : Text[50];iExtensionContract@11136559 : Code[10];iCostComponent@11136560 : Code[20];iBudgetAmount@1210190000 : Decimal);
    VAR
      PrognosisLineSpec@11136550 : Record 11020687;
    BEGIN
      //DP00042
      PrognosisLineSpec.VALIDATE("Project No.", iProject);
      PrognosisLineSpec.VALIDATE("Prognosis Date", iPrognosisDate);
      PrognosisLineSpec.VALIDATE("Cost Type", iCostType);
      PrognosisLineSpec.VALIDATE(Element, iElement);
      PrognosisLineSpec.VALIDATE("Cost Object", iCostObject);
      PrognosisLineSpec.VALIDATE("Reference No.", iReference);
      PrognosisLineSpec.VALIDATE(Description, iDescription);
      PrognosisLineSpec.VALIDATE("Extension Contract", iExtensionContract);
      PrognosisLineSpec.VALIDATE("Cost Component", iCostComponent);
      PrognosisLineSpec.INSERT(TRUE);
      //db, 31-01-12: M32801
      PrognosisLineSpec."Budget Amount" := iBudgetAmount;
      PrognosisLineSpec.MODIFY;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    VAR
      lCostType@1100525000 : Integer;
      RecRef@1100529900 : RecordRef;
    BEGIN
      xRec := Rec;
      UpdateEditable;

      RecRef.GETTABLE(Rec);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetRecordReference(RecRef);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetByCompany(TRUE);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetDepartmentCode("Department Code");
    END;

    PROCEDURE CopyPreviousPrognosis@8(ICostTypes@1100525000 : 'Cost,Revenue,Both');
    BEGIN
      PrognosisMgt.CopyPrevPrognosis(Rec, FALSE, ICostTypes);
    END;

    PROCEDURE CopyPreviousPrognosisEndResult@1210190001(ICostTypes@1100525000 : 'Cost,Revenue,Both');
    BEGIN
      PrognosisMgt.CopyPrevPrognosis(Rec, TRUE, ICostTypes);
    END;

    PROCEDURE FillPrognosisWithAvailable@1100525005();
    BEGIN
      PrognosisMgt.FillPrognosisWithAvailable(Rec);
    END;

    PROCEDURE FillPrognosisWithXtraPolCost@1100525003();
    BEGIN
      PrognosisMgt.FillPrognosisWithXtraPolCost(Rec);
    END;

    PROCEDURE FillPrognRevenues@1100525004();
    BEGIN
      PrognosisMgt.FillPrognRevenues(Rec);
    END;

    PROCEDURE RemoveSurcharges@1100525002();
    BEGIN
      PrognosisMgt.RemoveSurcharges(Rec);
    END;

    PROCEDURE CalculateSurcharges@1100525006();
    BEGIN
      PrognosisMgt.CalculateSurcharges(Rec);
    END;

    PROCEDURE ProcessPrognosis@1100528800(Prognosis@1100528800 : Record 11012034);
    VAR
      ProjectPlanningActivity@1100528806 : Record 11012431;
      FillPrognosisFromProjAct@1100528805 : Report 11012272;
      RequestedActivityCapacity@1100528804 : Record 11125708;
      FillPrognosisFromReqCap@1100528803 : Report 11012271;
      AssignedActivCapRec@1100528802 : Record 11125710;
      AutomaticGeneratePrognosis@1100525011 : Report 11012668;
      FillPrognFromCapPlanningRpt@1100528801 : Report 11012270;
      CopyPrevCostPrognosis@1100525010 : Boolean;
      CopyPrevPrognosisEndResult@1100525009 : Boolean;
      CopyPrevRevenuePrognosis@1100525008 : Boolean;
      CopyPrevPrognosisTotalRev@1100525007 : Boolean;
      CopyCommentsPrevPrognosis@1100525006 : Boolean;
      FillProgWithAvailableCost@1100525005 : Boolean;
      FillProgWithExtrapolatedCosts@1100525004 : Boolean;
      FillProgFromProjPlanningAct@1100525003 : Boolean;
      FillProgFromRequestedActCap@1100525002 : Boolean;
      FillProgFromAssignedActCap@1100525001 : Boolean;
      FillProgRevenues@1100525000 : Boolean;
    BEGIN
      CLEAR(AutomaticGeneratePrognosis);
      AutomaticGeneratePrognosis.SetSelections("Prognosis Date");
      AutomaticGeneratePrognosis.RUNMODAL;
      AutomaticGeneratePrognosis.GetSelections(StartProcess,PrognosisDate,
        CopyPrevCostPrognosis,CopyPrevPrognosisEndResult,CopyPrevRevenuePrognosis,CopyPrevPrognosisTotalRev,
        CopyCommentsPrevPrognosis,FillProgWithAvailableCost,FillProgWithExtrapolatedCosts,FillProgFromProjPlanningAct,
        FillProgFromRequestedActCap,FillProgFromAssignedActCap,FillProgRevenues,CalcSurcharges,CalcRiscCoverage);

      IF NOT StartProcess THEN
        EXIT;

      IF "Prognosis Date" <> PrognosisDate THEN BEGIN
        "Prognosis Date" := PrognosisDate;

        IF NOT Prognosis.GET("Project No.", PrognosisDate) THEN BEGIN
          Prognosis.INIT;
          Prognosis."Project No." := "Project No.";
          Prognosis.VALIDATE("Prognosis Date",PrognosisDate);
          Prognosis.INSERT(TRUE);
        END;
      END;

      IF NOT Prognosis.Fixed THEN BEGIN
        PrognosisMgt.CreatePrognosis(Prognosis, CostTypes::Both);

        IF CopyPrevCostPrognosis THEN
          PrognosisMgt.CopyPrevPrognosis(Prognosis, FALSE, CostTypes::Cost);
        IF CopyPrevPrognosisEndResult THEN
          PrognosisMgt.CopyPrevPrognosis(Prognosis, TRUE, CostTypes::Cost);
        IF CopyPrevRevenuePrognosis THEN
          PrognosisMgt.CopyPrevPrognosis(Prognosis, FALSE, CostTypes::Revenue);
        IF CopyPrevPrognosisTotalRev THEN
          PrognosisMgt.CopyPrevPrognosis(Prognosis, TRUE, CostTypes::Revenue);
        IF CopyCommentsPrevPrognosis THEN
          Prognosis.CopyPreviousComments;

        IF FillProgWithAvailableCost THEN
          PrognosisMgt.FillPrognosisWithAvailable(Prognosis);
        IF FillProgWithExtrapolatedCosts THEN
          PrognosisMgt.FillPrognosisWithXtraPolCost(Prognosis);
        IF FillProgFromProjPlanningAct THEN BEGIN
          ProjectPlanningActivity.SETRANGE("Project No.", Prognosis."Project No.");
          ProjectPlanningActivity.FINDFIRST;  //* There must be a project planning activity for the project.
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognosisFromProjAct.SETTABLEVIEW(ProjRec);
          FillPrognosisFromProjAct.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognosisFromProjAct.RUNMODAL;
        END;
        IF FillProgFromRequestedActCap THEN BEGIN
          RequestedActivityCapacity.SETRANGE("Project No.", Prognosis."Project No.");
          RequestedActivityCapacity.FINDFIRST;  //* There must be a requested activity capacity for the project.
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognosisFromReqCap.SETTABLEVIEW(ProjRec);
          FillPrognosisFromReqCap.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognosisFromReqCap.RUNMODAL;
        END;
        IF FillProgFromAssignedActCap THEN BEGIN
          AssignedActivCapRec.SETRANGE("Project No.", Prognosis."Project No.");
          AssignedActivCapRec.FINDFIRST;  //* There must be a capacity planning of the project
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognFromCapPlanningRpt.SETTABLEVIEW(ProjRec);
          FillPrognFromCapPlanningRpt.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognFromCapPlanningRpt.RUNMODAL;
        END;
        IF FillProgRevenues THEN
          PrognosisMgt.FillPrognRevenues(Prognosis);
        IF CalcSurcharges THEN BEGIN
          IF "Prognosis Level" = "Prognosis Level"::Detailed THEN BEGIN
            Prognosis."Ovh. Surcharges Calculated" := TRUE;
            Prognosis."Altered After Calculation" := FALSE;
            Prognosis.MODIFY;

            PrognosisMgt.RemoveSurcharges(Prognosis);
            PrognosisMgt.CalculateSurcharges(Prognosis);
          END;
        END;
        //C012556
        IF CalcRiscCoverage THEN
          IF "Prognosis Level" = "Prognosis Level"::Detailed THEN
            PrognosisMgt.CalculateRiscCoverage(Prognosis);
        //
      END;
    END;

    PROCEDURE ProcessPrognosisElement@1100525008(Prognosis@1100528800 : Record 11012034);
    VAR
      ProjectPlanningActivity@1100528806 : Record 11012431;
      FillPrognosisFromProjAct@1100528805 : Report 11012272;
      RequestedActivityCapacity@1100528804 : Record 11125708;
      FillPrognosisFromReqCap@1100528803 : Report 11012271;
      AssignedActivCapRec@1100528802 : Record 11125710;
      FillPrognFromCapPlanningRpt@1100528801 : Report 11012270;
      GeneratePrognosisElements@1100525000 : Report 11020260;
      CopyPrevCostPrognosis@1100525011 : Boolean;
      CopyPrevPrognosisEndResult@1100525010 : Boolean;
      CopyPrevRevenuePrognosis@1100525009 : Boolean;
      CopyPrevPrognosisTotalRev@1100525008 : Boolean;
      CopyCommentsPrevPrognosis@1100525007 : Boolean;
      FillProgWithAvailableCost@1100525006 : Boolean;
      FillProgWithExtrapolatedCosts@1100525005 : Boolean;
      FillProgFromProjPlanningAct@1100525004 : Boolean;
      FillProgFromRequestedActCap@1100525003 : Boolean;
      FillProgFromAssignedActCap@1100525002 : Boolean;
      FillProgRevenues@1100525001 : Boolean;
    BEGIN
      GeneratePrognosisElements.SetSelections("Prognosis Date");
      GeneratePrognosisElements.RUNMODAL;
      GeneratePrognosisElements.GetSelections(StartProcess,PrognosisDate,
        CopyPrevCostPrognosis,CopyPrevPrognosisEndResult,CopyPrevRevenuePrognosis,CopyPrevPrognosisTotalRev,
        CopyCommentsPrevPrognosis,FillProgWithAvailableCost,FillProgWithExtrapolatedCosts,FillProgFromProjPlanningAct,
        FillProgFromRequestedActCap,FillProgFromAssignedActCap,FillProgRevenues,CalcSurcharges);

      IF NOT StartProcess THEN
        EXIT;

      IF "Prognosis Date" <> PrognosisDate THEN BEGIN
        "Prognosis Date" := PrognosisDate;

        IF NOT Prognosis.GET("Project No.", PrognosisDate) THEN BEGIN
          Prognosis.INIT;
          Prognosis."Project No." := "Project No.";
          Prognosis.VALIDATE("Prognosis Date",PrognosisDate);
          Prognosis.INSERT(TRUE);
        END;
      END;

      IF NOT Prognosis.Fixed THEN BEGIN
        PrognosisMgt.CreatePrognosisElements(Prognosis, CostTypes::Both);

        IF CopyPrevCostPrognosis THEN
          PrognosisMgt.CopyPrevPrognosisElements(Prognosis, FALSE, CostTypes::Cost);

        IF FillProgWithAvailableCost THEN
          PrognosisMgt.FillPrognosisWithAvailableElem(Prognosis);
      END;
    END;

    PROCEDURE CalculateRiscCoverage@1100525007();
    BEGIN
      //C012556
      PrognosisMgt.CalculateRiscCoverage(Rec);
    END;

    BEGIN
    {
      4PS, 11-11-13, Report "Prognosis" no longer supported in NAV2013
    }
    END.
  }
}

