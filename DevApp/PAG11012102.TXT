OBJECT Page 11012102 Advice Orders by Project
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Advice Orders by Project;
    MultipleNewLines=No;
    SourceTable=Table11012055;
    DelayedInsert=Yes;
    PageType=List;
    AutoSplitKey=No;
    PromotedActionCategoriesML=ENU=New,Process,Report,Logistics;
    OnInit=BEGIN
             TradeItemEnabled := TRUE;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 IF NOT ItemSetup.READPERMISSION THEN
                   TradeItemEnabled := FALSE;

                 FILTERGROUP(4);
                 //when form used in Base Service Order form, the so no. must be visible
                 ServiceOrderNoVisible := ((GETFILTER("Service Order No.") = '') AND (GETFILTER("Project No.") = ''));
                 FILTERGROUP(0);

                 SETRANGE(Processed, FALSE);

                 IF JobsSetup.GET() THEN;
                 IF ServiceSetup.GET() THEN;

                 FilterActive := FALSE;
                 NotFilterActive := TRUE;
               END;

    OnAfterGetRecord=BEGIN
                       InventoryReservation("Item No.");
                       CALCFIELDS("Vendor Name (Trade Item)", "Vendor Name", "Manufacturer Name", "Consent Lines Available",
                                  "Consent Lines Serv. Available");
                       RefQuote := RouteRefMgtCU.GetQuoteOfReference("Purchase Route Reference");
                       RefPurchOrder := RouteRefMgtCU.GetPurchOrderOfReference("Purchase Route Reference");
                       GetItemSpecifications;
                       VendorPrice := GetVendorPrice(Vendor, Price, VendorCurrency);
                       StrategicPurchMgt.FindContractForAdviceOrder(Rec);

                       SetEditable;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                  InitRecord;
                  RefQuote := '';
                  RefPurchOrder := '';
                  VendorPrice := 0;      //db, 20-11-08
                  VendorCurrency := '';  //db, 20-11-08

                  LocInventoryQuan := 0;
                  InventoryQuan := 0;
                  ReservedQuan := 0;
                  InventoryUnit := '';

                  FILTERGROUP(4);
                  //when form used in Base Service Order form, fill so no.
                  IF (GETFILTER("Service Order No.") = '') AND (GETFILTER("Base Service Order No.") <> '') THEN
                    VALIDATE("Service Order No.", GETRANGEMIN("Base Service Order No."));
                  FILTERGROUP(0);
                END;

    OnInsertRecord=BEGIN
                     "Quantity (Budget)" := 0;
                     "Quantity (Processed)" := 0;
                     "Process Status" := "Process Status"::Open;
                     Processed := FALSE;
                     VALIDATE("Line No.", 0);
                   END;

    OnModifyRecord=BEGIN
                     SetEditable;
                   END;

    OnAfterGetCurrRecord=BEGIN
                           SetEditable;
                         END;

    ActionList=ACTIONS
    {
      { 8       ;0   ;ActionContainer;
                      ActionContainerType=Reports }
      { 1100485001;1 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=&Print;
                      Promoted=Yes;
                      Image=Print;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PrintProjectAdviceSelect;
                               END;
                                }
      { 1210190011;1 ;Action    ;
                      CaptionML=ENU=Print Advice Order by &Company;
                      Image=Company;
                      OnAction=VAR
                                 AdviceOrderLine@1210190000 : Record 11012055;
                               BEGIN
                                 AdviceOrderLine.COPY(Rec);
                                 AdviceOrderLine.SETRANGE("Item No.", AdviceOrderLine."Item No.");
                                 IF (AdviceOrderLine."Project No." <> '') THEN
                                   AdviceOrderLine.SETRANGE("Project No.", AdviceOrderLine."Project No.");
                                 IF (AdviceOrderLine."Service Order No." <> '') THEN
                                   AdviceOrderLine.SETRANGE("Service Order No.", AdviceOrderLine."Service Order No.");
                                 AdviceOrderLine.SETRANGE(Processed, AdviceOrderLine.Processed);
                                 AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type");

                                 REPORT.RUNMODAL(REPORT::"Advice Order Lines by Company", TRUE, FALSE, AdviceOrderLine);
                               END;
                                }
      { 1100525118;  ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100525120;1 ;Action    ;
                      CaptionML=ENU=&Text;
                      Promoted=Yes;
                      Image=SNInfo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditText;
                               END;
                                }
      { 1100525130;1 ;ActionGroup;
                      CaptionML=ENU=Advice &Order }
      { 1210190007;2 ;Action    ;
                      CaptionML=ENU=Purchase &Line details;
                      Image=ViewCheck;
                      OnAction=BEGIN
                                 EditLineDetails;
                               END;
                                }
      { 1100525022;2 ;Action    ;
                      CaptionML=ENU=&Purchase Route References;
                      Image=ContactReference;
                      OnAction=BEGIN
                                 ShowPurchRouteRef;
                               END;
                                }
      { 1100525129;2 ;Action    ;
                      CaptionML=ENU=Purchase Orders;
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 Job@1100528400 : Record 11072003;
                               BEGIN
                                 IF Job.GET("Project No.") THEN
                                   Job.ShowPurchaseOrdersForProject;
                               END;
                                }
      { 1100525128;2 ;Action    ;
                      CaptionML=ENU=Quotes;
                      Promoted=Yes;
                      Image=Quote;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 Job@1100528400 : Record 11072003;
                               BEGIN
                                 IF Job.GET("Project No.") THEN
                                   Job.ShowPurchaseQuotesForProject;
                               END;
                                }
      { 1100525127;2 ;Action    ;
                      CaptionML=ENU=Item &Journal;
                      Promoted=Yes;
                      Image=Journals;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ProjSetUp@1210190004 : Record 315;
                                 ItemJnlTemplate@1210190002 : Record 82;
                                 ItemJnlLine@1210190001 : Record 83;
                               BEGIN
                                 ProjSetUp.GET;
                                 IF ItemJnlTemplate.GET(ProjSetUp."Inventory Journal Template") THEN BEGIN
                                   ItemJnlLine.FILTERGROUP := 2;
                                   ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlTemplate.Name);
                                   ItemJnlLine.FILTERGROUP := 0;
                                   ItemJnlLine.SETRANGE("Job No.","Project No.");
                                   PAGE.RUN(ItemJnlTemplate."Page ID",ItemJnlLine);
                                 END ELSE BEGIN
                                   PAGE.RUN(PAGE::"Item Journal", ItemJnlLine);  //db, 18-05-05: called form determines default template
                                 END;
                               END;
                                }
      { 1100525000;2 ;Action    ;
                      CaptionML=ENU=Advice Orders by &Item;
                      RunObject=Page 11012122;
                      Promoted=Yes;
                      Image=OrderTracking;
                      PromotedCategory=Process }
      { 1100528401;2 ;ActionGroup;
                      CaptionML=ENU=Consent;
                      Image=BOMLedger }
      { 1100525124;3 ;Action    ;
                      CaptionML=ENU=Consent Lines per Project (Advice Orders);
                      Image=BOMLedger;
                      OnAction=BEGIN
                                 ShowConsentLines(FALSE);
                               END;
                                }
      { 1100525123;3 ;Action    ;
                      CaptionML=ENU=Consent Lines per Advice Order;
                      Image=BOMLevel;
                      OnAction=BEGIN
                                 ShowConsentLines(TRUE);
                               END;
                                }
      { 1100525122;3 ;Action    ;
                      CaptionML=ENU=Insert Consent Lines;
                      Image=InsertAccount;
                      OnAction=BEGIN
                                 EditConsentLines;
                               END;
                                }
      { 1100525126;2 ;Action    ;
                      CaptionML=ENU=Shipping &Details;
                      RunObject=Page 11012486;
                      RunPageLink=No.=FIELD(Project No.),
                                  Source=CONST(AdviceOrder);
                      Image=ShipmentLines }
      { 1100525083;2 ;Action    ;
                      CaptionML=ENU=Item Availability by Period;
                      Image=Period;
                      OnAction=BEGIN
                                 ShowItemAvailbyPeriod;
                               END;
                                }
      { 1210190005;2 ;Action    ;
                      CaptionML=ENU=I&tem Inventory by Company;
                      Image=InventoryJournal;
                      OnAction=BEGIN
                                 ShowItemInventoryByCompany;
                               END;
                                }
      { 1210190009;2 ;Action    ;
                      CaptionML=ENU=Doc&uments;
                      Image=Documents;
                      OnAction=BEGIN
                                 ShowDocuments;
                               END;
                                }
      { 1210190010;2 ;Action    ;
                      CaptionML=ENU=&Comment Lines (Advice Order Line);
                      Image=Comment;
                      OnAction=BEGIN
                                 EditCommentLines(); // **4PS MVOS
                               END;
                                }
      { 1100525007;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525117;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1100525018;2 ;ActionGroup;
                      CaptionML=ENU=Select;
                      Image=Alerts }
      { 1100525110;3 ;Action    ;
                      CaptionML=ENU=Select Contract Type;
                      Promoted=Yes;
                      Visible=NotFilterActive;
                      Image=UseFilters;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 FilterPage@1100525001 : Page 11130199;
                                 AdviceOrderLine@1100525002 : Record 11012055;
                                 StrategicPurchMgt@1100525000 : Codeunit 11020211;
                               BEGIN
                                 CLEAR(FilterPage);
                                 FilterPage.LOOKUPMODE(TRUE);
                                 IF FilterPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   FilterPage.GetType(ContractFilter);
                                   AdviceOrderLine.COPY(Rec);
                                   IF Rec.FINDSET(TRUE) THEN
                                   REPEAT
                                     StrategicPurchMgt.FindContractForAdviceOrder(AdviceOrderLine);
                                     AdviceOrderLine.MODIFY;
                                   UNTIL AdviceOrderLine.NEXT = 0;
                                   SetContractFilter(ContractFilter);
                                   FilterActive := TRUE;
                                   NotFilterActive := FALSE;
                                 END;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525116;3 ;Action    ;
                      CaptionML=ENU=Select Budget Lines;
                      Promoted=Yes;
                      Image=GetLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Budget;
                               END;
                                }
      { 1100525115;3 ;Action    ;
                      CaptionML=ENU=Select Purchase Actions;
                      Promoted=Yes;
                      Image=GetEntries;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PurchaseAction;
                               END;
                                }
      { 1100525114;3 ;Action    ;
                      CaptionML=ENU=Select Recipes;
                      Image=ReceiptLines;
                      OnAction=BEGIN
                                 SelectRecipe;
                               END;
                                }
      { 1100525109;2 ;Action    ;
                      CaptionML=ENU=Show all;
                      Promoted=Yes;
                      Visible=FilterActive;
                      Image=RemoveFilterLines;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ContractFilter := ContractFilter::" ";
                                 SetContractFilter(ContractFilter);
                                 FilterActive := FALSE;
                                 NotFilterActive := TRUE;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1210190000;2 ;Action    ;
                      CaptionML=ENU=Explode BOM;
                      Image=ExplodeBOM;
                      OnAction=BEGIN
                                 ExplodeBOM;
                               END;
                                }
      { 1100525139;2 ;Action    ;
                      Name=ExchangeRate;
                      CaptionML=ENU=Actualise Currency Exchange Rate;
                      Image=CurrencyExchangeRates;
                      OnAction=VAR
                                 ProjRec@1100525000 : Record 11072003;
                               BEGIN
                                 ProjRec.UpdateAdviceOrderCurrencyData("Project No.");  //db, 08-03-16
                               END;
                                }
      { 1100525107;2 ;Action    ;
                      CaptionML=ENU=Actualise Price;
                      Image=Price;
                      OnAction=BEGIN
                                 UpdatePrice;
                               END;
                                }
      { 1100525106;2 ;Action    ;
                      CaptionML=ENU=Update From Selected Quote;
                      Image=UpdateUnitCost;
                      OnAction=BEGIN
                                 UpdateFromSelectedQuote;  //db, 13-03-07
                               END;
                                }
      { 1210190001;2 ;Action    ;
                      CaptionML=ENU=Divide Agreed Amount;
                      Image=PriceAdjustment;
                      OnAction=BEGIN
                                 PageDivideAgreedAmount(); //mg, 08-02-11: M24388
                               END;
                                }
      { 1210190002;2 ;Action    ;
                      CaptionML=ENU=Calculate availability;
                      Image=ItemAvailabilitybyPeriod;
                      OnAction=BEGIN
                                 UpdateLines;
                               END;
                                }
      { 1100525105;2 ;Action    ;
                      CaptionML=ENU=Compress Advice Orders;
                      Image=Compress;
                      OnAction=BEGIN
                                 Compress;
                               END;
                                }
      { 1100525104;2 ;Action    ;
                      CaptionML=ENU=Split Advice Orders;
                      Image=Splitlines;
                      OnAction=BEGIN
                                 Split;
                               END;
                                }
      { 1100525103;2 ;Action    ;
                      CaptionML=ENU=Divid&e Advice Orders;
                      Image=Allocate;
                      OnAction=BEGIN
                                 Divide;
                               END;
                                }
      { 1100525102;2 ;Action    ;
                      CaptionML=ENU=Release Advice Orders;
                      Promoted=Yes;
                      Image=ReleaseDoc;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ApproveLines;  //db, 06-05-08
                               END;
                                }
      { 1100525096;2 ;Action    ;
                      CaptionML=ENU=Process Advice Orders Collectively;
                      Image=TransferToLines;
                      OnAction=BEGIN
                                 ProcessRun;
                               END;
                                }
      { 1100525094;2 ;Action    ;
                      CaptionML=ENU=Modify Vendor Collectively;
                      Image=Vendor;
                      OnAction=BEGIN
                                 UpdateVendor;
                               END;
                                }
      { 1100409003;2 ;Action    ;
                      CaptionML=ENU=Modi&fy Collectively;
                      Image=ChangeBatch;
                      OnAction=BEGIN
                                 ModifyRun;
                               END;
                                }
      { 1100529300;2 ;Action    ;
                      CaptionML=ENU=Import E-plan Item;
                      RunObject=XMLport 11071865;
                      Image=Import }
      { 1100525136;2 ;Action    ;
                      CaptionML=ENU=Import E-plan Item TXT;
                      Image=Import;
                      OnAction=VAR
                                 AdviceOrderLine@1100525000 : Record 11012055;
                                 ImpEPlanItemsAdvOrderTXT@1100525001 : XMLport 11071859;
                               BEGIN
                                 IF "Project No." <> '' THEN
                                   AdviceOrderLine.SETRANGE("Project No.","Project No.")
                                 ELSE
                                   COPYFILTER("Project No.", AdviceOrderLine."Project No.");
                                 ImpEPlanItemsAdvOrderTXT.SETTABLEVIEW(AdviceOrderLine);
                                 ImpEPlanItemsAdvOrderTXT.RUN;
                               END;
                                }
      { 1100528800;2 ;Action    ;
                      CaptionML=ENU=Update Receipt Date from Project Element;
                      Image=DateRange;
                      OnAction=BEGIN
                                 UpdateReceiptDateByProjectElement;
                               END;
                                }
      { 1100525009;1 ;ActionGroup;
                      CaptionML=ENU=Generate }
      { 1100525100;2 ;Action    ;
                      CaptionML=ENU=Generate Purchase Quote;
                      Image=Quote;
                      OnAction=BEGIN
                                 ProcessGenQuote;
                               END;
                                }
      { 1100525099;2 ;Action    ;
                      ShortCutKey=Shift+F9;
                      CaptionML=ENU=Generate Purchase Orders;
                      Promoted=Yes;
                      Image=MakeOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProcessPurchase;
                               END;
                                }
      { 1100525098;2 ;Action    ;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=ENU=Generate Inventory Orders;
                      Promoted=Yes;
                      Image=InventoryJournal;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProcessInventory;
                               END;
                                }
      { 1100525097;2 ;Action    ;
                      CaptionML=ENU=Generate &Shipping Details;
                      Image=ShipmentLines;
                      OnAction=BEGIN
                                 ProcessShippingDetails;
                               END;
                                }
      { 1210190003;2 ;Action    ;
                      CaptionML=ENU=Generate Plant Requests;
                      Image=Components;
                      OnAction=VAR
                                 PlantManagementCompany@1210190000 : Record 11020586;
                               BEGIN
                                 IF NOT PlantManagementCompany.GET(COMPANYNAME) THEN
                                   ERROR(Text000, COMPANYNAME);

                                 ProcessPlant; //mg, 07-07-11: RFC605
                               END;
                                }
      { 1210190004;2 ;Action    ;
                      CaptionML=ENU=Generate Material Requirement;
                      Image=Resource;
                      OnAction=VAR
                                 AdviceOrderLine@1210190000 : Record 11012055;
                               BEGIN
                                 AdviceOrderLine.GenerateAdvOrderToMatReqLines("Project No.");
                               END;
                                }
      { 1100525095;2 ;Action    ;
                      CaptionML=ENU=Create ICK Order Files;
                      Image=CreateLedgerBudget;
                      OnAction=BEGIN
                                 GenerateICKOrder;  //db, 17-08-10: M15519
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525093;1;Group  ;
                GroupType=Repeater }

    { 1100525092;2;Field  ;
                SourceExpr="Project No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525091;2;Field  ;
                SourceExpr=Element;
                Visible=FALSE;
                Editable=ElementEditable }

    { 1100525090;2;Field  ;
                SourceExpr="Description Element";
                Visible=FALSE }

    { 1100525089;2;Field  ;
                SourceExpr="Extension Contract";
                Visible=FALSE;
                Editable=ExtensionContractEditable }

    { 1100525088;2;Field  ;
                SourceExpr="Description Extension";
                Visible=FALSE }

    { 1100525087;2;Field  ;
                SourceExpr="Plot No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525086;2;Field  ;
                SourceExpr="Line No.";
                Visible=FALSE }

    { 1100525085;2;Field  ;
                SourceExpr="Service Order No.";
                Visible=FALSE;
                Enabled=ServiceOrderNoVisible;
                Editable=FALSE }

    { 1100525082;2;Field  ;
                SourceExpr="Item No.";
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               ItemNoOnAfterValidate;

                             SetEditable;
                           END;

                OnLookup=BEGIN
                           HandleItemLookup(1);
                           CurrPage.UPDATE;
                           SetEditable;
                         END;
                          }

    { 1100525081;2;Field  ;
                SourceExpr=Manufacturer;
                Enabled=TradeItemEnabled;
                OnLookup=BEGIN
                           GabiVendorRec.HandleVendorLookup(1, Manufacturer);
                         END;
                          }

    { 1100525131;2;Field  ;
                SourceExpr="Manufacturer Name";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525080;2;Field  ;
                SourceExpr="Basic Item";
                Enabled=TradeItemEnabled;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               BasicItemOnAfterValidate;
                             SetEditable;
                           END;

                OnLookup=BEGIN
                           HandleItemLookup(2);
                           SetEditable;
                         END;
                          }

    { 1100525079;2;Field  ;
                SourceExpr="Vendor (Trade Item)";
                Enabled=TradeItemEnabled;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             SetEditable;
                           END;

                OnLookup=VAR
                           lvItem@1100485002 : Code[20];
                         BEGIN
                           IF "Basic Item" = '' THEN BEGIN
                             lvItem := "Vendor (Trade Item)";
                             GabiVendorRec.HandleVendorLookup(2, lvItem);
                             VALIDATE("Vendor (Trade Item)", lvItem);
                           END ELSE BEGIN
                             HandleItemLookup(0);
                           END;

                           SetEditable;
                         END;
                          }

    { 1100525119;2;Field  ;
                SourceExpr="Vendor Name (Trade Item)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525078;2;Field  ;
                SourceExpr="Trade Item";
                Enabled=TradeItemEnabled;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                             TradeItemOnAfterValidate;

                             SetEditable;
                           END;

                OnLookup=VAR
                           lvTempAdviceOrderLine@1100525002 : TEMPORARY Record 11012055;
                         BEGIN
                           IF "Item No." <> '' THEN BEGIN
                             lvTempAdviceOrderLine.COPY(Rec);  //db, 21-08-09
                             lvTempAdviceOrderLine.VALIDATE("Item No.","Item No.");
                             g_ItemCode := lvTempAdviceOrderLine."Trade Item";
                             g_Vendor := lvTempAdviceOrderLine."Vendor (Trade Item)";
                           END;

                           HandleItemLookup(3);

                           SetEditable;
                         END;

                OnAssistEdit=BEGIN
                               HandleItemAssistEdit(3);
                             END;
                              }

    { 1100525077;2;Field  ;
                SourceExpr="Item Brand";
                Visible=FALSE }

    { 1100525076;2;Field  ;
                SourceExpr="Item Type";
                Visible=FALSE }

    { 1100525075;2;Field  ;
                SourceExpr="Item Series";
                Visible=FALSE }

    { 1100525074;2;Field  ;
                SourceExpr="Shelf No. (Item)";
                Visible=FALSE }

    { 1100525073;2;Field  ;
                SourceExpr="Shelf No. (SKU)";
                Visible=FALSE }

    { 1100525072;2;Field  ;
                SourceExpr=Vendor;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;  //DP00884: refresh VendorPrice
                           END;

                OnAssistEdit=BEGIN
                               LookupItemVendor(FieldEditable);
                             END;
                              }

    { 1100525112;2;Field  ;
                SourceExpr="Vendor Name";
                Visible=FALSe;
                Editable=FALSE }

    { 1100525071;2;Field  ;
                SourceExpr="Order Address Code";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525113;2;Field  ;
                SourceExpr="Plant Location";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525111;2;Field  ;
                SourceExpr="Plant Type";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525070;2;Field  ;
                SourceExpr="Cost Type";
                Editable=CostTypeEditable }

    { 1100525069;2;Field  ;
                SourceExpr="Cost Object";
                Editable=FieldEditable;
                LookupPageID=Cost Object List;
                OnValidate=BEGIN
                             CostObjectOnAfterValidate;
                           END;
                            }

    { 1100525068;2;Field  ;
                SourceExpr="Cost Component";
                Editable=CostComponentEditable }

    { 1100525067;2;Field  ;
                SourceExpr=Description;
                Editable=FieldEditable }

    { 1100525066;2;Field  ;
                SourceExpr="Description 2";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525065;2;Field  ;
                SourceExpr="External Text Block";
                Visible=FALSE }

    { 1100525064;2;Field  ;
                SourceExpr="Price Agreement";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525063;2;Field  ;
                SourceExpr="Additional Cost (Service)";
                Visible=FALSE;
                Editable=AdditionalCostServiceEditable }

    { 1100525062;2;Field  ;
                SourceExpr="Quantity (Budget)" }

    { 1100525061;2;Field  ;
                SourceExpr="Quantity (Advice)";
                OnValidate=BEGIN
                             QuantityAdviceOnAfterValidate;
                           END;
                            }

    { 1100525060;2;Field  ;
                SourceExpr="Quantity (Processed)";
                Editable=FALSE }

    { 1100525059;2;Field  ;
                CaptionML=ENU=Quantity Received;
                SourceExpr=ReceivedPurchaseQuantity('');
                Editable=FALSE }

    { 1100409005;2;Field  ;
                CaptionML=ENU=Reserved Inventory;
                SourceExpr=QtyReservedInventory();
                OnDrillDown=BEGIN
                              DrilDownReservedInventory();
                            END;
                             }

    { 1100409004;2;Field  ;
                CaptionML=ENU=Delivered Inventory;
                SourceExpr=QtyDeliveredInventory();
                OnDrillDown=BEGIN
                              DrillDownDeliveredInventory();
                            END;
                             }

    { 1100525058;2;Field  ;
                CaptionML=ENU=Deliverable Quantity;
                SourceExpr=GetDeliverableQuantity() }

    { 1100525057;2;Field  ;
                SourceExpr="Unit of Measure";
                Editable=UnitOfMeasureEditable;
                OnValidate=BEGIN
                             UnitofMeasureOnAfterValidate;
                           END;
                            }

    { 1100525049;2;Field  ;
                SourceExpr=Transaction;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             TransactionOnAfterValidate;
                             SetEditable;
                           END;
                            }

    { 1100525056;2;Field  ;
                SourceExpr="Gross Price";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             GrossPriceOnAfterValidate;
                           END;
                            }

    { 1100525125;2;Field  ;
                SourceExpr="Gross Price (FCY)";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             GrossPriceOnAfterValidate;
                           END;
                            }

    { 1100525055;2;Field  ;
                SourceExpr="Discount %";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             Discount37OnAfterValidate;
                           END;
                            }

    { 1100525054;2;Field  ;
                SourceExpr=Price;
                OnValidate=BEGIN
                             PriceOnAfterValidate;
                           END;
                            }

    { 1100525132;2;Field  ;
                SourceExpr="Price (FCY)";
                Visible=FALSE;
                OnValidate=BEGIN
                             PriceOnAfterValidate;
                           END;
                            }

    { 1100525137;2;Field  ;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 1100525138;2;Field  ;
                SourceExpr="Currency Agreement";
                Visible=FALSE }

    { 1100525053;2;Field  ;
                Name=VendorPrice;
                CaptionML=ENU=Vendor Price (FCY);
                SourceExpr=VendorPrice;
                Visible=FALSE;
                Editable=VendorPriceEditable;
                OnValidate=BEGIN
                             VendorPriceOnAfterValidate;
                           END;
                            }

    { 1100525052;2;Field  ;
                Name=VendorCurrency;
                CaptionML=ENU=Currency (Vendor);
                SourceExpr=VendorCurrency;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525035;2;Field  ;
                SourceExpr="Alternative Vendor";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525034;2;Field  ;
                SourceExpr="Alternative Item";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525033;2;Field  ;
                SourceExpr="Alternative Price";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525135;2;Field  ;
                SourceExpr="Alternative Price (FCY)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525050;2;Field  ;
                SourceExpr="Sales Price";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525134;2;Field  ;
                SourceExpr="Sales Price (FCY)";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525051;2;Field  ;
                SourceExpr=Amount }

    { 1100525133;2;Field  ;
                SourceExpr="Amount (FCY)";
                Visible=FALSE }

    { 1100525048;2;Field  ;
                SourceExpr="Process Status";
                Editable=ProcessStatusEditable;
                OnValidate=BEGIN
                             //**4PS01.sn
                             IF ("Process Status" = "Process Status"::Open) AND
                                ("Quantity (Processed)" <> 0 )
                             THEN
                               "Process Status" := "Process Status"::"Partly Processed";
                             //**4PS01.en
                             ProcessStatusOnAfterValidate;
                           END;
                            }

    { 1100525047;2;Field  ;
                SourceExpr=Processed;
                Editable=FALSE }

    { 1100409000;2;Field  ;
                SourceExpr="Supplying Company Inventory";
                Visible=FALSE;
                Editable=SupplyingCompInvEditable;
                OnValidate=VAR
                             InvQuan@1100409000 : Decimal;
                           BEGIN
                             InventoryReservation("Item No.");
                             CurrPage.UPDATE;
                             InventoryReservation("Item No.");
                             IF InventoryQuan < LocInventoryQuan THEN
                               InvQuan := LocInventoryQuan
                             ELSE
                               InvQuan := InventoryQuan;

                             IF InvQuan < "Quantity (Advice)" THEN
                               IF Transaction = Transaction::Inventory THEN
                                 MESSAGE(Text000);
                           END;
                            }

    { 1100525046;2;Field  ;
                CaptionML=ENU=Inventory;
                SourceExpr=InventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::All);
                            END;
                             }

    { 1100525045;2;Field  ;
                CaptionML=ENU=Inventory pref. locations;
                SourceExpr=InventoryPrefLocations;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::PrefLocations);
                            END;
                             }

    { 1100525044;2;Field  ;
                CaptionML=ENU=Reserved;
                SourceExpr=ReservedQuan;
                Editable=FALSE;
                OnDrillDown=VAR
                              ItemJnlLineRec@1210190001 : Record 83;
                            BEGIN
                              IF ItemRec.GET("Item No.") THEN BEGIN
                                ItemJnlLineRec.SETRANGE("Item No.", ItemRec."No.");
                                ItemJnlLineRec."Job No." := "Project No.";
                                PAGE.RUN(0,ItemJnlLineRec);
                              END;
                            END;
                             }

    { 1100525043;2;Field  ;
                CaptionML=ENU=Base Unit of Measure;
                SourceExpr=InventoryUnit;
                Editable=FALSE }

    { 1100525042;2;Field  ;
                SourceExpr="Order Date";
                Editable=FieldEditable }

    { 1100525041;2;Field  ;
                SourceExpr="Delivery Period";
                Editable=FieldEditable }

    { 1100525040;2;Field  ;
                SourceExpr="Receipt Date";
                Editable=FieldEditable;
                OnValidate=BEGIN
                             ReceiptDateOnAfterValidate;
                           END;
                            }

    { 1100525108;2;Field  ;
                SourceExpr="Requested Receipt Date";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525121;2;Field  ;
                SourceExpr="Expected return on";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100528300;2;Field  ;
                SourceExpr="Delivery Time";
                Visible=false }

    { 1100525039;2;Field  ;
                SourceExpr="Location Code";
                Editable=LocationCodeEditable;
                OnValidate=BEGIN
                             LocationOnAfterValidate;
                           END;
                            }

    { 1100525084;2;Field  ;
                SourceExpr="Bin Code" }

    { 1100525038;2;Field  ;
                CaptionML=ENU=Location Inventory;
                SourceExpr=LocInventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::Location);
                            END;
                             }

    { 1100525037;2;Field  ;
                SourceExpr=Deliver;
                Editable=FieldEditable }

    { 1100525036;2;Field  ;
                SourceExpr="Ship To Location";
                Editable=FieldEditable }

    { 1100525032;2;Field  ;
                SourceExpr="Purchase Action";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525031;2;Field  ;
                SourceExpr="Purchase Phase";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525030;2;Field  ;
                SourceExpr="Purchaser Code";
                Editable=FieldEditable }

    { 1100525029;2;Field  ;
                SourceExpr="Negotiation recommended";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525028;2;Field  ;
                SourceExpr="Ask for Quote";
                Editable=FieldEditable }

    { 1100525027;2;Field  ;
                CaptionML=ENU=Quote No.;
                SourceExpr=RefQuote;
                Visible=FALSE;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefQuote = '') THEN
                             EXIT;

                           IF (COPYSTR(RefQuote, 1, 1) = '<') THEN  // IF Quote No. is '<Nr.>', then more than one quote present
                             RouteRefMgtCU.ShowReferenceQuoteList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Quote);
                             lvPurchHeadRec.SETRANGE("No.", RefQuote);
                             PAGE.RUNMODAL(PAGE::"Purchase Quote", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1100525026;2;Field  ;
                CaptionML=ENU=Purchase Order;
                SourceExpr=RefPurchOrder;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefPurchOrder = '') THEN
                             EXIT;

                           IF (COPYSTR(RefPurchOrder, 1, 1) = '<') THEN  // IF Order No. is '<Nr.>', then more than one order present
                             RouteRefMgtCU.ShowReferencePurchOrderList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Order);
                             lvPurchHeadRec.SETRANGE("No.", RefPurchOrder);
                             PAGE.RUNMODAL(PAGE::"Purchase Order", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1100525025;2;Field  ;
                SourceExpr="Purchase Route Reference";
                Visible=FALSE }

    { 1100525024;2;Field  ;
                SourceExpr="ICK Order";
                Visible=FALSE }

    { 1100525023;2;Field  ;
                SourceExpr="Created by";
                Visible=FALSE }

    { 1100525021;2;Field  ;
                SourceExpr="Created by Employee No.";
                Visible=FALSE }

    { 1100525020;2;Field  ;
                SourceExpr="Date Created";
                Visible=FALSE }

    { 1100525019;2;Field  ;
                SourceExpr="Modified by";
                Visible=FALSE }

    { 1100525017;2;Field  ;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1100525016;2;Field  ;
                SourceExpr="E-Plan Item";
                Visible=FALSE }

    { 1100525015;2;Field  ;
                SourceExpr="Scheme Code";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525014;2;Field  ;
                SourceExpr="Comments for Logistics";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525012;2;Field  ;
                SourceExpr="Main Project No.";
                Visible=FALSE }

    { 1100525013;2;Field  ;
                SourceExpr="Entity Type";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525011;2;Field  ;
                SourceExpr="System No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525010;2;Field  ;
                SourceExpr="Entity No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100409001;2;Field  ;
                SourceExpr="Vendor No. (Item Card)";
                Importance=Additional }

    { 1100409002;2;Field  ;
                SourceExpr="Vendor Item No. (Item Card)";
                Importance=Additional }

    { 1100525008;2;Field  ;
                SourceExpr="Cable Transit Pos.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525006;2;Field  ;
                SourceExpr="Consent Lines Available";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525005;2;Field  ;
                SourceExpr="Consent Lines Serv. Available";
                Visible=FALSE }

    { 1100528400;2;Field  ;
                SourceExpr="Consented Date-Time" }

    { 1100525004;2;Field  ;
                SourceExpr="Contract Type" }

    { 1100525003;2;Field  ;
                CaptionML=ENU=Blanket Order;
                SourceExpr=StrategicPurchMgt.NumberOfBlOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderAdviceOrder(Rec);
                         END;
                          }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Blanket Order Line;
                SourceExpr=StrategicPurchMgt.NumberOfBlOrderLinesAdvOrder(Rec);
                Editable=FALSE;
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1100525001;2;Field  ;
                CaptionML=ENU=Quantity in Blanket Orders;
                SourceExpr=StrategicPurchMgt.QtyInBlanketOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1100528000;2;Field  ;
                CaptionML=ENU=Documents;
                SourceExpr=HasDocumentLinks;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowDocuments;
                            END;
                             }

    { 1100525101;2;Field  ;
                SourceExpr="Bin Code (Project Inventory)" }

    { 1100528600;2;Field  ;
                SourceExpr="Price History 0 Exists" }

    { 1100528802;0;Container;
                ContainerType=FactBoxArea }

    { 1100528801;1;Part   ;
                Name=Item Features;
                CaptionML=ENU=Item Features;
                SubPageLink=Item No.=FIELD(Item No.);
                PagePartID=Page11229268;
                Visible=False;
                PartType=Page }

  }
  CODE
  {
    VAR
      gAdviceOrderLineRec@1100485000 : Record 11012055;
      ProcessStatusFilter@1100525029 : 'Open,Partly Processed,Released,Cancelled,Processed';
      ContractFilter@1100525000 : ' ,No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order';
      DPA_IsHardFilter@1100000999 : Boolean;
      JobsSetup@1100525033 : Record 315;
      ServiceSetup@1100525032 : Record 11012800;
      ItemSetup@1100525026 : Record 11012300;
      ItemRec@1100525025 : Record 27;
      AdviceRec@1100525024 : Record 11012055;
      GabiVendorRec@1100525023 : Record 11012304;
      PrintDoc@1100525022 : Codeunit 229;
      AdviceCu@1100525021 : Codeunit 11012041;
      RouteRefMgtCU@1100525020 : Codeunit 11012045;
      InventoryQuan@1100525019 : Decimal;
      ReservedQuan@1100525018 : Decimal;
      LocInventoryQuan@1100525017 : Decimal;
      InventoryUnit@1100525016 : Code[10];
      RefQuote@1100525015 : Code[20];
      RefPurchOrder@1100525014 : Code[20];
      VendorPrice@1100525012 : Decimal;
      VendorCurrency@1100525011 : Code[20];
      ShowLocations@1100525010 : 'All,PrefLocations,Location';
      g_ItemCode@1100525009 : Code[20];
      g_Vendor@1100525008 : Code[20];
      StrategicPurchMgt@1100525007 : Codeunit 11020211;
      TradeItemEnabled@1100525004 : Boolean INDATASET;
      Text000@1100525028 : TextConst 'ENU=Insufficient Stock present';
      ServiceOrderNoVisible@1100525001 : Boolean INDATASET;
      FieldEditable@1100528400 : Boolean INDATASET;
      AdditionalCostServiceEditable@1100528401 : Boolean INDATASET;
      ElementEditable@1100528402 : Boolean INDATASET;
      ExtensionContractEditable@1100528403 : Boolean INDATASET;
      QuantityAdviceEditable@1100528406 : Boolean INDATASET;
      PriceEditable@1100528407 : Boolean INDATASET;
      LocationCodeEditable@1100525002 : Boolean INDATASET;
      ProcessStatusEditable@1100525003 : Boolean INDATASET;
      VendorPriceEditable@1100525005 : Boolean INDATASET;
      UnitOfMeasureEditable@1100525030 : Boolean INDATASET;
      CostComponentEditable@1100525031 : Boolean INDATASET;
      CostTypeEditable@1100525027 : Boolean INDATASET;
      FilterActive@1100525035 : Boolean INDATASET;
      NotFilterActive@1100525034 : Boolean INDATASET;
      SupplyingCompInvEditable@1100409000 : Boolean INDATASET;
      Text001@1100409001 : TextConst 'ENU=First select lines.';

    PROCEDURE SelectAdviceOrderLine@1100485001(JobRec@1100485001 : Record 11072003;VAR AdviceOrderLineRec@1100485000 : Record 11012055);
    BEGIN
      gAdviceOrderLineRec.COPY(AdviceOrderLineRec);
    END;

    PROCEDURE Budget@8();
    BEGIN
      IF "Record Type" = "Record Type"::ServOrder THEN
        AdviceCu.SelectServiceBudget("Service Order No.")
      ELSE
        IF GETFILTER(Element) = '' THEN
          AdviceCu.SelectProjectBudget("Project No.", '','')
        ELSE
          AdviceCu.SelectProjectBudget("Project No.", '', GETFILTER(Element));
    END;

    PROCEDURE PurchaseAction@10();
    BEGIN
      AdviceCu.SelectPurchaseAction("Project No.");
    END;

    PROCEDURE ProcessGenQuote@1210190006();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessGenQuote(AdviceOrderLine);
    END;

    PROCEDURE ProcessPurchase@2();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessPurchase(AdviceOrderLine, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessInventory@3();
    VAR
      Text001@1100525000 : TextConst 'ENU=Do you want to recalculate the lines first?';
      AdviceOrderLine@1100525001 : Record 11012055;
      AdviceOrderLine2@1100525002 : Record 11012055;
      Counter@1100525003 : Integer;
      Text002@1100525004 : TextConst 'ENU=There are %1 inverntory entries created in Item Journal.';
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      CLEAR(AdviceCu); //CALL C019988 newline
      JobsSetup.GET;
      IF (JobsSetup."Inventory Calc. Advice Order" = JobsSetup."Inventory Calc. Advice Order"::Availability) AND
        CONFIRM(Text001)
      THEN BEGIN
        AdviceCu.SetSkipMessage;
        IF NOT AdviceOrderLine.ISEMPTY THEN                              //CALL C019988 newline
          AdviceCu.PreSetToTypeAndBatch(AdviceOrderLine, FALSE, TRUE);   //CALL C019988 newline

        IF AdviceOrderLine.FINDSET(TRUE,TRUE) THEN
          REPEAT
            AdviceOrderLine2 := AdviceOrderLine;
            AdviceOrderLine2.SETRECFILTER;
            AdviceOrderLine2.GetDefaults;
            AdviceOrderLine2.MODIFY;
            AdviceOrderLine2.MARK(TRUE);
            Counter += AdviceCu.ProcessInventory(AdviceOrderLine2,FALSE,FALSE); //PBRun= false, ItemRun=false
          UNTIL AdviceOrderLine.NEXT = 0;
          MESSAGE(Text002,Counter);
      END ELSE
        AdviceCu.ProcessInventory(AdviceOrderLine, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessRun@1210190003();
    BEGIN
      AdviceCu.ProcessRun(FALSE);  //ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessPlant@1210190009();
    BEGIN
      //mg, 07-07-11: RFC605
      AdviceCu.ProcessPlant(Rec, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateReceiptDateByProjectElement@1100528800();
    VAR
      AdviceOrderLine@1100528800 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.UpdateReceiptDateFromProjectElement(AdviceOrderLine);
    END;

    PROCEDURE Toggle@11(Phase@11012000 : Integer);
    BEGIN
      IF Phase = 0 THEN
        SETRANGE(Processed);
      IF Phase = 1 THEN
        SETRANGE(Processed, FALSE);
      IF Phase = 2 THEN
        SETRANGE(Processed, TRUE);
      IF Phase = 3 THEN BEGIN
        SETRANGE("Process Status", "Process Status"::Released);
        SETRANGE(Processed, FALSE);
      END ELSE BEGIN
        SETRANGE("Process Status");
      END;
    END;

    PROCEDURE Compress@1();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.ISEMPTY THEN BEGIN
        AdviceOrderLine.RESET;
        AdviceOrderLine.COPY(Rec);
      END;
      AdviceCu.CompressLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Split@9();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.FINDSET THEN;
      AdviceCu.SplitLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Divide@1100525011();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.FINDSET THEN; //mg, 22-01-2014: C010838
      AdviceCu.SplitLinesPrefLoc(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE InventoryReservation@4(lItem@11012000 : Code[20]);
    BEGIN
      LocInventoryQuan := 0;
      InventoryQuan := 0;
      ReservedQuan := 0;
      InventoryUnit := '';

      IF ItemRec.GET(lItem) THEN BEGIN
        //**4PS.sn
        IF "Record Type" = "Record Type"::Project THEN
          ItemRec.SETRANGE("Project Filter","Project No.");
        //**4PS.en
        ItemRec.CALCFIELDS(Inventory, "Qty. on Item Journal Project", "Qty. on Item Journal Service");
        LocInventoryQuan := GetInventory("Location Code",ItemRec,FALSE);
        InventoryQuan := GetInventory('',ItemRec,TRUE);
        ReservedQuan := ItemRec."Qty. on Item Journal Project" + ItemRec."Qty. on Item Journal Service";
        InventoryUnit := ItemRec."Base Unit of Measure";
      END;
    END;

    PROCEDURE EditText@1210190000();
    BEGIN
      AdviceCu.EditText(Rec);
    END;

    PROCEDURE HandleItemLookup@1210190001(ZoomType@1210190000 : Integer);
    BEGIN
      LookupItemData(ZoomType,g_ItemCode,g_Vendor);  //db, 30-11-10: M23941
      IF ZoomType = -1 THEN  //db, 09-03-07 (call 8283)
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE HandleItemAssistEdit@1100528302(ZoomType@1210190000 : Integer);
    BEGIN
      AssistEditItemData(ZoomType);
      IF ZoomType = -1 THEN
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ApproveLines@1210190002();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ApproveLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ShowPurchRouteRef@1210190004();
    BEGIN
      RouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
    END;

    PROCEDURE UpdatePrice@1210190007();
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN  //0=project, 1=service
        AdviceCu.UpdateActualPrice(0, "Project No.")
      ELSE
        AdviceCu.UpdateActualPrice(1, "Service Order No.");
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE PrintProjectAdviceSelect@1100525010();
    BEGIN
      AdviceRec.COPY(Rec);
      AdviceRec.SETRANGE("Record Type","Record Type"::Project);
      PrintDoc.PrintProjAdvice(AdviceRec);
    END;

    PROCEDURE PrintServiceAdviceSelect@1100485002();
    BEGIN
      AdviceRec.COPY(Rec);
      FILTERGROUP(4);
      IF GETFILTER("Service Order No.") <> '' THEN
        Rec.COPYFILTER("Service Order No.", AdviceRec."Service Order No.");
      IF GETFILTER("Base Service Order No.") <> '' THEN
        Rec.COPYFILTER("Base Service Order No.", AdviceRec."Base Service Order No.");
      FILTERGROUP(0);
      AdviceRec.SETRANGE("Record Type","Record Type"::ServOrder);
      PrintDoc.PrintServAdvice(AdviceRec);
    END;

    PROCEDURE ProcessShippingDetails@1100485003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessShippingDetails(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateVendor@1100525001();
    VAR
      ModifyItemVendor@1100485000 : Page 11020420;
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      ModifyItemVendor.SetAdviceOrderRec(AdviceOrderLine);
      ModifyItemVendor.RUNMODAL;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateFromSelectedQuote@1100485004();
    BEGIN
      AdviceCu.UpdateQuotePrice(Rec);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SelectRecipe@1100485005();
    VAR
      RecipeFrm@1100485001 : Page 11012164;
    BEGIN
      AdviceCu.SelectBaseRecipe(Rec); //DP00381
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE DrillDownInventory@1100525002(ShowLocations@1100525003 : 'All,PrefLocations,Location');
    BEGIN
      AdviceCu.DrillDownInventory(Rec, ShowLocations);  //db, 09-02-09
    END;

    PROCEDURE UpdateLines@1100525003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.UpdateLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SetContractFilter@1100525008(ContractFilter@1100525000 : ' ,No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order');
    BEGIN
      CASE ContractFilter OF
        ContractFilter::" ":
          SETRANGE("Contract Type");
        ContractFilter::"No Contract":
          SETRANGE("Contract Type","Contract Type"::"No Contract");
        ContractFilter::Contract:
          SETRANGE("Contract Type","Contract Type"::Contract);
        ContractFilter::"Contract with Discount Agreement":
          SETRANGE("Contract Type","Contract Type"::"Contract with Discount Terms");
        ContractFilter::"General Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"General Blanket Order");
        ContractFilter::"Project Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Project Blanket Order");
        ContractFilter::"Service Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Service Blanket Order");
      END;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SetProcessStatusFilter@1100525007(ProcessStatusFilter@1100525000 : 'Open,Partly Processed,Released,Cancelled,Processed') : Text[1024];
    BEGIN
      SETRANGE("Process Status", ProcessStatusFilter);

      CurrPage.UPDATE;
    END;

    PROCEDURE ShowItemAvailbyPeriod@1100525006();
    VAR
      Item@1100525000 : Record 27;
    BEGIN
      IF "Item No." = '' THEN EXIT;

      Item.GET("Item No.");
      // Item.SETFILTER("Project Filter",'=%1',"Project No."); //**4PS.o
      PAGE.RUN(PAGE::"Item Availability by Periods",Item);
    END;

    LOCAL PROCEDURE ItemNoOnAfterValidate@19061248();
    BEGIN
      CurrPage.UPDATE;
    END;

    PROCEDURE GenerateICKOrder@1100525009();
    VAR
      AdviceOrderLine@1100525500 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.GenerateICKOrder(AdviceOrderLine);  //db, 17-08-10: M15519
    END;

    LOCAL PROCEDURE BasicItemOnAfterValidate@19054956();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE TradeItemOnAfterValidate@19075338();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE CostObjectOnAfterValidate@19061648();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityAdviceOnAfterValidate@19073676();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE UnitofMeasureOnAfterValidate@19002161();
    BEGIN
      IF "Quantity (Processed)" = 0 THEN
        IF "Quantity (Budget)" <> 0 THEN
          "Quantity (Budget)" := "Quantity (Advice)";
    END;

    LOCAL PROCEDURE GrossPriceOnAfterValidate@19036441();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE Discount37OnAfterValidate@19039847();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE PriceOnAfterValidate@19065147();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE VendorPriceOnAfterValidate@19037936();
    BEGIN
      VALIDATE(Price, ConvertVendorPrice(Vendor, VendorPrice));  //db, 20-11-08
    END;

    LOCAL PROCEDURE TransactionOnAfterValidate@19077289();
    VAR
      InvQuan@1100525001 : Decimal;
    BEGIN
      InventoryReservation("Item No.");
      IF InventoryQuan < LocInventoryQuan THEN
        InvQuan := LocInventoryQuan
      ELSE
        InvQuan := InventoryQuan;

      IF InvQuan < "Quantity (Advice)" THEN
        IF Transaction = Transaction::Inventory THEN
          MESSAGE(Text000);
    END;

    LOCAL PROCEDURE ProcessStatusOnAfterValidate@19014714();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ReceiptDateOnAfterValidate@19074743();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE LocationOnAfterValidate@19026812();
    BEGIN
      InventoryReservation("Item No.");
    END;

    PROCEDURE EditLineDetails@1210190008();
    VAR
      PurchaseLineDetail@1210190000 : Record 11020660;
    BEGIN
      //**4PS  //kzwerver, 110606, n, #27784
      PurchaseLineDetail.ShowCard(PurchaseLineDetail."Line Type"::"Advice Order",
        "Record Type", "Project No.", "Yard No.", "System No.",
        "Entity Type", "Entity No.", "Service Order No.", '', "Line No.");
    END;

    LOCAL PROCEDURE GetAddCostServiceEditable@19077114(FieldEditable@1100528400 : Boolean) AddCostServiceEditable : Boolean;
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      AddCostServiceEditable := FieldEditable;

      IF NOT ServiceOrder.GET("Service Order No.") THEN
        ServiceOrder.INIT;

      IF ServiceOrder."Service Contract No." <> '' THEN
        AddCostServiceEditable :=
          ((ServiceOrder."Source Type" <> ServiceOrder."Source Type"::Direct) OR
          (ServiceOrder."Service Contract No." = ''));
    END;

    PROCEDURE SetEditable@1100525005();
    VAR
      JobsSetup@1100528400 : Record 315;
      ServiceSetup@1100528401 : Record 11012800;
    BEGIN
      IF JobsSetup.GET THEN;
      IF ServiceSetup.GET THEN;

      IF JobsSetup."Released AdvOrder not editable" THEN
        FieldEditable := ("Process Status" < "Process Status"::Released)
      ELSE
        FieldEditable := TRUE;

      AdditionalCostServiceEditable := GetAddCostServiceEditable(FieldEditable);
      ElementEditable := FieldEditable AND ("Record Type" = "Record Type"::Project);
      ExtensionContractEditable := FieldEditable AND ("Record Type" = "Record Type"::Project);
      QuantityAdviceEditable := FieldEditable AND ("Process Status" < "Process Status"::Processed);
      CostTypeEditable := FieldEditable AND ("Item No." + "Basic Item" + "Trade Item" = '');
      UnitOfMeasureEditable := FieldEditable AND ("Quantity (Processed)" = 0);
      PriceEditable := FieldEditable AND ("Quantity (Budget)" = 0);
      VendorPriceEditable := FieldEditable AND (VendorCurrency <> '');
      LocationCodeEditable := FieldEditable AND FieldIsEditable(FIELDNO("Location Code"));
      CostComponentEditable :=
        FieldEditable AND
        ((("Project No." <> '') AND JobsSetup."Cost Component Editable") OR
        (("Service Order No." <> '') AND ServiceSetup."Cost Component Editable") OR
        (("Project No." = '') AND ("Service Order No." = '')));

      ProcessStatusEditable := ("Process Status" <> "Process Status"::Processed);

      SupplyingCompInvEditable :=
        FieldEditable AND
        ("Cost Type" = "Cost Type"::Material) AND
        ("Item No." <> '') AND
        (Transaction = Transaction::Inventory) AND
        ("Process Status" < "Process Status"::Processed);
    END;

    PROCEDURE ExplodeBOM@1210190010();
    BEGIN
      //**4PS, Call 27339
      CODEUNIT.RUN(CODEUNIT::"Advice Order Line-Explode BOM",Rec);
    END;

    PROCEDURE PageDivideAgreedAmount@1100530000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      //mg, 08-02-11: M24388
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      Rec.DivideAgreedAmount(AdviceOrderLine);
    END;

    PROCEDURE ShowItemInventoryByCompany@1100528301();
    VAR
      AdviceOrderMgt@1100528300 : Codeunit 11012041;
    BEGIN
      AdviceOrderMgt.RunItemInventoryByCompany("Item No.");
    END;

    PROCEDURE ShowDocuments@1210190005();
    VAR
      RecRef@1210190000 : RecordRef;
      DocumentFilters@1210190001 : Codeunit 11012432;
    BEGIN
      TESTFIELD("Line No.");
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Global Dimension 1 Code", FALSE, TRUE);
    END;

    PROCEDURE EditCommentLines@1100529800();
    VAR
      CommentLine@1100529800 : Record 11020634;
      RecRef@1100529801 : RecordRef;
      RID@1100529802 : RecordID;
    BEGIN
      // **4PS MVOS
      RecRef.GETTABLE(Rec);
      RID := RecRef.RECORDID();

      CommentLine.EditCommentLines(2, RID);
    END;

    PROCEDURE ModifyRun@1100409000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.COUNT = 0 THEN BEGIN
        ERROR(Text001);
      END;
      AdviceCu.ModifyRun(AdviceOrderLine);
      CurrPage.UPDATE(FALSE);
    END;

    BEGIN
    {
      CC: Form11012102 EN Form11012103
    }
    END.
  }
}

