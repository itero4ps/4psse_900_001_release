OBJECT Page 11012122 Advice Orders by Item
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Advice Orders by Item;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table11012055;
    DelayedInsert=Yes;
    SourceTableView=SORTING(Processed,Item No.,Manufacturer,Basic Item,Vendor (Trade Item),Trade Item,Project No.,Element,Extension Contract);
    PageType=List;
    OnInit=BEGIN
             "Vendor (Trade Item)Enabled" := TRUE;
             ManufacturerEnabled := TRUE;
             "Trade ItemEnabled" := TRUE;
             "Basic ItemEnabled" := TRUE;

             SetEditable;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 IF NOT ItemSetup.READPERMISSION THEN BEGIN
                   "Basic ItemEnabled" := (FALSE);
                   "Trade ItemEnabled" := (FALSE);
                   ManufacturerEnabled := (FALSE);
                   "Vendor (Trade Item)Enabled" := (FALSE);
                 END;

                 IF NOT BypassFiltering THEN // jhoek.070910
                   IF gvRefRoute <> '' THEN BEGIN
                     //db, 29-01-04: changed because of call from purchase (order/quote)
                     SETCURRENTKEY("Purchase Route Reference");
                     SETRANGE("Purchase Route Reference", gvRefRoute);
                     Toggle(gvPhase);
                   END ELSE BEGIN
                     SETRANGE(Processed, FALSE);
                   END;

                 ProjSetup.GET;

                 FiltersVisible := CurrPage.EDITABLE;
               END;

    OnFindRecord=VAR
                   Found@1100525000 : Boolean;
                 BEGIN
                   Found := FindPosition(Which);
                   EXIT(Found);
                 END;

    OnNextRecord=VAR
                   lAdviceOrderLine@1100525000 : Record 11012055;
                   NextStep@1100525001 : Integer;
                 BEGIN
                   lAdviceOrderLine.COPY(Rec);
                   NextStep := NextPosition(lAdviceOrderLine,Steps);
                   IF NextStep <> 0 THEN Rec.COPY(lAdviceOrderLine);
                   EXIT(NextStep);
                 END;

    OnAfterGetRecord=BEGIN
                       InventoryReservation("Item No.");
                       CALCFIELDS("Vendor Name (Trade Item)", "Vendor Name", "Manufacturer Name");
                       CALCFIELDS("Description Project", "Description Element", "Description Extension", "Description Service Order");  //db, 01-02-07
                       RefQuote := RouteRefMgtCU.GetQuoteOfReference("Purchase Route Reference");
                       RefPurchOrder := RouteRefMgtCU.GetPurchOrderOfReference("Purchase Route Reference");
                       GetItemSpecifications;
                       VendorPrice := GetVendorPrice(Vendor, Price, VendorCurrency);  //db, 20-11-08
                       StrategicPurchMgt.FindContractForAdviceOrder(Rec); //**4PS.n

                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                  InitRecord;
                  RefQuote := '';
                  RefPurchOrder := '';
                  VendorPrice := 0;      //db, 20-11-08
                  VendorCurrency := '';  //db, 20-11-08
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=BEGIN
                     VALIDATE("Line No.");
                     //** 0=signal for table trigger to determine first free number
                     //** autosplitkey not used because of problems with suppress processed orders
                   END;

    OnModifyRecord=BEGIN
                     SetEditable;
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1210190032;1 ;ActionGroup;
                      CaptionML=ENU=Advice &Order }
      { 1210190037;2 ;Action    ;
                      ShortCutKey=Shift+Ctrl+L;
                      CaptionML=ENU=Project List;
                      Image=List;
                      OnAction=VAR
                                 lvProjRec@1210190000 : Record 11072003;
                               BEGIN
                                 lvProjRec."No." := "Project No.";
                                 PAGE.RUNMODAL(0, lvProjRec);
                               END;
                                }
      { 1210190040;2 ;Action    ;
                      CaptionML=ENU=&Purchase Route References;
                      Image=ContactReference;
                      OnAction=BEGIN
                                 ShowPurchRouteRef();
                               END;
                                }
      { 1100485045;2 ;Action    ;
                      CaptionML=ENU=Purchase Order (Service Order);
                      Image=ServiceMan;
                      OnAction=VAR
                                 ServiceOrder@1100528400 : Record 11012823;
                               BEGIN
                                 IF ServiceOrder.GET("Service Order No.") THEN
                                   ServiceOrder.ShowPurchaseOrdersForServiceOrder;
                               END;
                                }
      { 1100525000;2 ;Action    ;
                      CaptionML=ENU=Purchase Order (Job);
                      Image=Job;
                      OnAction=VAR
                                 Job@1100528400 : Record 11072003;
                               BEGIN
                                 IF Job.GET("Project No.") THEN
                                   Job.ShowPurchaseOrdersForProject;
                               END;
                                }
      { 1100485046;2 ;Action    ;
                      CaptionML=ENU=Item &Journal;
                      Image=Journals;
                      OnAction=VAR
                                 ItemJnlTemplate@1100485001 : Record 82;
                                 ItemJnlLine@1100485000 : Record 83;
                               BEGIN
                                 ProjSetup.GET;
                                 IF ItemJnlTemplate.GET(ProjSetup."Inventory Journal Template") THEN BEGIN
                                   ItemJnlLine.FILTERGROUP := 2;
                                   ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlTemplate.Name);
                                   ItemJnlLine.FILTERGROUP := 0;
                                   IF "Record Type" = "Record Type"::Project THEN
                                     ItemJnlLine.SETRANGE("Job No.","Project No.");
                                   IF "Record Type" = "Record Type"::ServOrder THEN
                                     ItemJnlLine.SETRANGE("Service Order No.","Service Order No.");
                                   PAGE.RUN(ItemJnlTemplate."Page ID",ItemJnlLine);
                                 END ELSE BEGIN
                                   PAGE.RUN(PAGE::"Item Journal", ItemJnlLine);  //db, 18-05-05: called form determines default template
                                 END;
                               END;
                                }
      { 1100525143;2 ;Action    ;
                      CaptionML=ENU=Item Availability by Period;
                      Image=Period;
                      OnAction=BEGIN
                                 ShowItemAvailbyPeriod;
                               END;
                                }
      { 1210190074;2 ;Action    ;
                      CaptionML=ENU=Doc&uments;
                      Image=Documents;
                      OnAction=BEGIN
                                 ShowDocuments;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210190006;1 ;Action    ;
                      CaptionML=ENU=&Text;
                      Promoted=Yes;
                      Image=SNInfo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditText;
                               END;
                                }
      { 1210190007;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1210190011;2 ;Action    ;
                      CaptionML=ENU=Select Budget Lines;
                      Image=GetLines;
                      OnAction=BEGIN
                                 Budget;
                               END;
                                }
      { 1210190012;2 ;Action    ;
                      CaptionML=ENU=Select Purchase Actions;
                      Image=GetEntries;
                      OnAction=BEGIN
                                 PurchaseAction;
                               END;
                                }
      { 1210190016;2 ;ActionGroup;
                      CaptionML=ENU=Display Selection;
                      Image=Alerts }
      { 1210190017;3 ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=All Advice Orders;
                      Image=AllLines;
                      OnAction=BEGIN
                                 Toggle(0);
                               END;
                                }
      { 1210190018;3 ;Action    ;
                      ShortCutKey=Shift+F11;
                      CaptionML=ENU=Open Advice Orders;
                      Image=OpenJournal;
                      OnAction=BEGIN
                                 Toggle(1);
                               END;
                                }
      { 1100485027;3 ;Action    ;
                      ShortCutKey=Shift+Ctrl+F9;
                      CaptionML=ENU=Released Advice Orders;
                      Image=ReleaseShipment;
                      OnAction=BEGIN
                                 Toggle(3);
                               END;
                                }
      { 1210190019;3 ;Action    ;
                      ShortCutKey=Ctrl+F11;
                      CaptionML=ENU=Processed Advice Orders;
                      Image=Reuse;
                      OnAction=BEGIN
                                 Toggle(2);
                               END;
                                }
      { 1100525051;2 ;Action    ;
                      CaptionML=ENU=Divide Agreed Amount;
                      Image=PriceAdjustment;
                      OnAction=VAR
                                 AdviceOrderLine@1100525001 : Record 11012055;
                               BEGIN
                                 GetRecSelection(AdviceOrderLine);
                                 DivideAgreedAmount(AdviceOrderLine); //mg, 08-02-11: M24388
                               END;
                                }
      { 1210190014;2 ;Action    ;
                      CaptionML=ENU=Compress Advice Orders;
                      Image=Compress;
                      OnAction=BEGIN
                                 Compress;
                               END;
                                }
      { 1210190015;2 ;Action    ;
                      CaptionML=ENU=Split Advice Orders;
                      Image=Splitlines;
                      OnAction=BEGIN
                                 Split;
                               END;
                                }
      { 1100525013;2 ;Action    ;
                      CaptionML=ENU=Divid&e Advice Orders;
                      Image=Allocate;
                      OnAction=BEGIN
                                 Divide;
                               END;
                                }
      { 1100485044;2 ;Action    ;
                      CaptionML=ENU=Release Advice Orders;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ReleaseDoc;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Approve;
                               END;
                                }
      { 1100525008;2 ;Action    ;
                      CaptionML=ENU=Remove Advice Orders;
                      Visible=FALSE;
                      Image=Delete;
                      OnAction=VAR
                                 AdviceOrderLine@1100528600 : Record 11012055;
                               BEGIN
                                 GetRecSelection(AdviceOrderLine);
                                 AdviceCu.RemoveAdviceOrders(AdviceOrderLine);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525057;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Actualise Price;
                      RunObject=Report 11020314;
                      Image=Price }
      { 1100525014;2 ;Action    ;
                      CaptionML=ENU=Calculate availability;
                      Image=ReleaseDoc;
                      OnAction=VAR
                                 AdviceOrderLine@1100525001 : Record 11012055;
                               BEGIN
                                 GetRecSelection(AdviceOrderLine);
                                 AdviceCu.UpdateLines(AdviceOrderLine);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525029;2 ;Action    ;
                      CaptionML=ENU=Modi&fy Collectively;
                      Image=ChangeBatch;
                      OnAction=BEGIN
                                 ModifyRun;
                               END;
                                }
      { 1210190023;2 ;Action    ;
                      CaptionML=ENU=Process Advice Orders Collectively;
                      Image=TransferToLines;
                      OnAction=BEGIN
                                 ProcessRun;
                               END;
                                }
      { 1100485030;2 ;Action    ;
                      CaptionML=ENU=Modify Vendor Collectively;
                      Image=Vendor;
                      OnAction=BEGIN
                                 UpdateVendor;
                               END;
                                }
      { 1210190026;2 ;Action    ;
                      CaptionML=ENU=Advice Orders Reports;
                      Image=Report;
                      OnAction=VAR
                                 AORec@11012001 : Record 11012055;
                                 PrintDoc@11012002 : Codeunit 229;
                               BEGIN
                                 AORec."Project No." := "Project No.";
                                 PrintDoc.PrintProjAdvice(AORec);
                               END;
                                }
      { 1100525006;1 ;ActionGroup;
                      CaptionML=ENU=Generate }
      { 1210190058;2 ;Action    ;
                      CaptionML=ENU=Generate Purchase Quote;
                      Promoted=Yes;
                      Image=Quote;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProcessGenQuote;
                               END;
                                }
      { 1210190021;2 ;Action    ;
                      ShortCutKey=Shift+F9;
                      CaptionML=ENU=Generate Purchase Orders;
                      Promoted=Yes;
                      Image=MakeOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProcessPurchase;
                               END;
                                }
      { 1210190022;2 ;Action    ;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=ENU=Generate Inventory Orders;
                      Promoted=Yes;
                      Image=InventoryJournal;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProcessInventory;
                               END;
                                }
      { 1100525031;2 ;Action    ;
                      ShortCutKey=Shift+Ctrl+F9;
                      CaptionML=ENU=Generate Purchase Requisitions;
                      Promoted=Yes;
                      Image=CreateMovement;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProcessPurchaseRequisition;
                               END;
                                }
      { 1210190085;2 ;Action    ;
                      CaptionML=ENU=Generate Plant Requests;
                      Image=Components;
                      OnAction=BEGIN
                                 ProcessPlant; //mg, 07-07-11: RFC605
                               END;
                                }
      { 1100525050;2 ;Action    ;
                      CaptionML=ENU=Create ICK Order Files;
                      Image=CreateLedgerBudget;
                      OnAction=BEGIN
                                 GenerateICKOrder;  //db, 17-08-10: M15519
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=PRP;
                GroupType=Repeater }

    { 1100485002;2;Field  ;
                SourceExpr="Record Type" }

    { 2   ;2   ;Field     ;
                SourceExpr="Project No.";
                Editable=FALSE }

    { 1100525042;2;Field  ;
                SourceExpr="Description Project";
                Visible=FALSE }

    { 1210190025;2;Field  ;
                SourceExpr="Yard No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1210190063;2;Field  ;
                SourceExpr="System No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1210190028;2;Field  ;
                SourceExpr="Entity Type";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1210190069;2;Field  ;
                SourceExpr="Entity No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1210190071;2;Field  ;
                SourceExpr="Cable Transit Pos.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 6   ;2   ;Field     ;
                SourceExpr=Element;
                Visible=FALSE;
                Editable=ElementEditable }

    { 1100525044;2;Field  ;
                SourceExpr="Description Element";
                Visible=FALSE }

    { 1210190004;2;Field  ;
                SourceExpr="Extension Contract";
                Visible=FALSE;
                Editable=ExtensionContractEditable }

    { 1100525046;2;Field  ;
                SourceExpr="Description Extension";
                Visible=FALSE }

    { 1100525017;2;Field  ;
                SourceExpr="Plot No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100485000;2;Field  ;
                SourceExpr="Service Order No.";
                Editable=FALSE }

    { 1100525048;2;Field  ;
                SourceExpr="Description Service Order";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Line No.";
                Visible=FALSE }

    { 1210190038;2;Field  ;
                SourceExpr="Recipe Group";
                Visible=FALSE;
                Editable=FALSE }

    { 1210190046;2;Field  ;
                SourceExpr=Recipe;
                Visible=FALSE;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Item No.";
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               ItemNoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           HandleItemLookup(1);
                         END;
                          }

    { 10  ;2   ;Field     ;
                SourceExpr=Manufacturer;
                Enabled=ManufacturerEnabled;
                Editable=FieldEditable;
                OnLookup=VAR
                           lvManufact@1100525002 : Code[15];
                         BEGIN
                           //GabiVendorRec.HandleVendorLookup(1, Manufacturer); // 34377.o

                           // 34377.sn
                           lvManufact := Manufacturer;
                           GabiVendorRec.HandleVendorLookup(1, lvManufact);
                           IF (NOT ProjSetup."Released AdvOrder not editable") OR
                              ((ProjSetup."Released AdvOrder not editable") AND
                               ("Process Status" < "Process Status"::Released))
                           THEN
                             VALIDATE(Manufacturer, lvManufact);
                           // 34377.en
                         END;
                          }

    { 12  ;2   ;Field     ;
                SourceExpr="Basic Item";
                Enabled="Basic ItemEnabled";
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               BasicItemOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           HandleItemLookup(2);
                         END;
                          }

    { 14  ;2   ;Field     ;
                SourceExpr="Vendor (Trade Item)";
                Enabled="Vendor (Trade Item)Enabled";
                Editable=FieldEditable;
                OnLookup=VAR
                           lvItem@1100485000 : Code[20];
                         BEGIN
                           lvItem := "Vendor (Trade Item)";
                           GabiVendorRec.HandleVendorLookup(2, lvItem);
                           // 34377.sn
                           IF (NOT ProjSetup."Released AdvOrder not editable") OR
                              ((ProjSetup."Released AdvOrder not editable") AND
                               ("Process Status" < "Process Status"::Released))
                           THEN
                           // 34377.en
                             VALIDATE("Vendor (Trade Item)", lvItem);
                         END;
                          }

    { 1210190086;2;Field  ;
                DrillDown=No;
                SourceExpr="Vendor Name (Trade Item)";
                Visible=FALSE;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Trade Item";
                Enabled="Trade ItemEnabled";
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                             TradeItemOnAfterValidate;
                           END;

                OnLookup=VAR
                           lvTempAdviceOrderLine@1100525002 : TEMPORARY Record 11012055;
                         BEGIN
                           IF "Item No." <> '' THEN BEGIN
                             lvTempAdviceOrderLine.COPY(Rec);  //db, 21-08-09
                             lvTempAdviceOrderLine.VALIDATE("Item No.","Item No.");
                             g_ItemCode := lvTempAdviceOrderLine."Trade Item";
                             g_Vendor := lvTempAdviceOrderLine."Vendor (Trade Item)";
                           END ELSE BEGIN
                             g_ItemCode := '';
                             g_Vendor := '';
                           END;

                           HandleItemLookup(3);
                         END;

                OnAssistEdit=VAR
                               ZoomType@1100528600 : Integer;
                             BEGIN
                               ZoomType := 3;
                               AssistEditItemData(ZoomType);
                               IF ZoomType = -1 THEN
                                 CurrPage.UPDATE(TRUE);
                             END;
                              }

    { 1100485017;2;Field  ;
                SourceExpr="Item Brand";
                Visible=FALSE }

    { 1100485019;2;Field  ;
                SourceExpr="Item Type";
                Visible=FALSE }

    { 1100485021;2;Field  ;
                SourceExpr="Item Series";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr="Shelf No. (Item)";
                Visible=FALSE }

    { 1100525021;2;Field  ;
                SourceExpr="Shelf No. (SKU)";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr=Vendor;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;  //DP00884: refresh VendorPrice
                           END;

                OnAssistEdit=BEGIN
                               LookupItemVendor(FieldEditable);
                             END;
                              }

    { 1210190088;2;Field  ;
                DrillDown=No;
                SourceExpr="Vendor Name";
                Visible=FALSE;
                Editable=FALSE }

    { 1210190078;2;Field  ;
                SourceExpr="Plant Location";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1210190080;2;Field  ;
                SourceExpr="Plant Type";
                Visible=FALSE;
                Editable=FieldEditable }

    { 24  ;2   ;Field     ;
                SourceExpr="Cost Type";
                Editable=CostTypeEditable }

    { 26  ;2   ;Field     ;
                SourceExpr="Cost Object";
                Editable=FieldEditable;
                LookupPageID=Cost Object List }

    { 1100485025;2;Field  ;
                SourceExpr="Cost Component";
                Visible=FALSE;
                Editable=CostComponentEditable }

    { 1100485023;2;Field  ;
                SourceExpr="Global Dimension 1 Code";
                Editable=FALSE;
                OnValidate=BEGIN
                             //**4PS Generated Code. Do Not Change.sn03
                             DPA_ChkDepartmentCodeAllowed(DPA_IsHardFilter);
                             //**4PS Generated Code.en03
                           END;
                            }

    { 1100529000;2;Field  ;
                SourceExpr="FSC Type Code";
                Visible=FALSE;
                Editable=FieldEditable }

    { 28  ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FieldEditable }

    { 30  ;2   ;Field     ;
                SourceExpr="Description 2";
                Editable=FieldEditable }

    { 1210190002;2;Field  ;
                SourceExpr="External Text Block";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              EditText;
                            END;
                             }

    { 1100525015;2;Field  ;
                SourceExpr="Price Agreement";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525019;2;Field  ;
                SourceExpr="Additional Cost (Service)";
                Visible=FALSE;
                Editable=AdditionalCostServiceEditable }

    { 32  ;2   ;Field     ;
                SourceExpr="Quantity (Budget)" }

    { 38  ;2   ;Field     ;
                SourceExpr="Quantity (Advice)";
                Editable=[QuantityAdviceEditable ] }

    { 40  ;2   ;Field     ;
                SourceExpr="Quantity (Processed)";
                Editable=FALSE }

    { 1100485014;2;Field  ;
                CaptionML=ENU=Quantity Received;
                SourceExpr=ReceivedPurchaseQuantity('');
                Editable=FALSE }

    { 1100409001;2;Field  ;
                CaptionML=ENU=Reserved Inventory;
                SourceExpr=QtyReservedInventory();
                OnDrillDown=BEGIN
                              DrilDownReservedInventory();
                            END;
                             }

    { 1100409000;2;Field  ;
                CaptionML=ENU=Delivered Inventory;
                SourceExpr=QtyDeliveredInventory();
                OnDrillDown=BEGIN
                              DrillDownDeliveredInventory();
                            END;
                             }

    { 1100525040;2;Field  ;
                CaptionML=ENU=Deliverable Quantity;
                SourceExpr=GetDeliverableQuantity() }

    { 34  ;2   ;Field     ;
                SourceExpr="Unit of Measure";
                Editable=UnitOfMeasureEditable }

    { 42  ;2   ;Field     ;
                SourceExpr=Transaction;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                             IF InventoryQuan < "Quantity (Advice)" THEN
                               IF Transaction = Transaction::Inventory THEN
                                 MESSAGE(Text000);
                               TransactionOnAfterValidate;
                           END;
                            }

    { 1210190065;2;Field  ;
                SourceExpr="Gross Price";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             GrossPriceOnAfterValidate;
                           END;
                            }

    { 1100525053;2;Field  ;
                SourceExpr="Gross Price (FCY)";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             GrossPriceOnAfterValidate;
                           END;
                            }

    { 1210190067;2;Field  ;
                SourceExpr="Discount %";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             Discount37OnAfterValidate;
                           END;
                            }

    { 36  ;2   ;Field     ;
                SourceExpr=Price;
                Editable=[PriceEditable ];
                OnValidate=BEGIN
                             PriceOnAfterValidate;
                           END;
                            }

    { 1100525052;2;Field  ;
                SourceExpr="Price (FCY)";
                Visible=FALSE;
                Editable=[PriceEditable ];
                OnValidate=BEGIN
                             PriceOnAfterValidate;
                           END;
                            }

    { 1100525003;2;Field  ;
                Name=VendorPrice;
                CaptionML=ENU=Vendor Price (FCY);
                SourceExpr=VendorPrice;
                Visible=FALSE;
                Editable=VendorPriceEditable;
                OnValidate=BEGIN
                             VendorPriceOnAfterValidate;
                           END;
                            }

    { 1100525001;2;Field  ;
                Name=VendorCurrency;
                CaptionML=ENU=Currency (Vendor);
                SourceExpr=VendorCurrency;
                Visible=FALSE;
                Editable=FALSE }

    { 1100485038;2;Field  ;
                SourceExpr="Alternative Vendor";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485040;2;Field  ;
                SourceExpr="Alternative Item";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485042;2;Field  ;
                SourceExpr="Alternative Price";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525054;2;Field  ;
                SourceExpr="Alternative Price (FCY)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525007;2;Field  ;
                SourceExpr="Sales Price";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525055;2;Field  ;
                SourceExpr="Sales Price (FCY)";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525005;2;Field  ;
                SourceExpr=Amount }

    { 1100525056;2;Field  ;
                SourceExpr="Amount (FCY)";
                Visible=FALSE }

    { 1210190052;2;Field  ;
                SourceExpr="Process Status";
                Editable=ProcessStatusEditable;
                OnValidate=BEGIN
                             IF ("Process Status" = "Process Status"::Open) AND
                                ("Quantity (Processed)" <> 0 )
                             THEN
                               "Process Status" := "Process Status"::"Partly Processed";
                           END;
                            }

    { 44  ;2   ;Field     ;
                SourceExpr=Processed;
                Editable=FALSE }

    { 1100528300;2;Field  ;
                SourceExpr="Supplying Company Inventory";
                Editable=SupplyingCompInvEditable;
                OnValidate=BEGIN
                             SupplyingCompanyInventoryOnAft;
                           END;
                            }

    { 46  ;2   ;Field     ;
                CaptionML=ENU=Inventory;
                SourceExpr=InventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::All);
                            END;
                             }

    { 1100525009;2;Field  ;
                CaptionML=ENU=Inventory pref. locations;
                SourceExpr=InventoryPrefLocations;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::PrefLocations);
                            END;
                             }

    { 1100525011;2;Field  ;
                CaptionML=ENU=Location Inventory;
                SourceExpr=LocInventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::Location);
                            END;
                             }

    { 48  ;2   ;Field     ;
                CaptionML=ENU=Reserved;
                SourceExpr=ReservedQuan;
                Editable=FALSE;
                OnDrillDown=VAR
                              ItemJnlLineRec@1210190001 : Record 83;
                            BEGIN
                              IF ItemRec.GET("Item No.") THEN BEGIN
                                IF ("Supplying Company Inventory" <> '') THEN
                                  ItemJnlLineRec.CHANGECOMPANY("Supplying Company Inventory");

                                ItemJnlLineRec.SETRANGE("Item No.", ItemRec."No.");
                                ItemJnlLineRec."Job No." := "Project No.";
                                PAGE.RUN(0,ItemJnlLineRec);
                              END;
                            END;
                             }

    { 50  ;2   ;Field     ;
                CaptionML=ENU=Base Unit of Measure;
                SourceExpr=InventoryUnit;
                Editable=FALSE }

    { 52  ;2   ;Field     ;
                SourceExpr="Order Date";
                Editable=FieldEditable }

    { 54  ;2   ;Field     ;
                SourceExpr="Delivery Period";
                Editable=FieldEditable }

    { 56  ;2   ;Field     ;
                SourceExpr="Receipt Date";
                Editable=FieldEditable }

    { 1100525049;2;Field  ;
                SourceExpr="Requested Receipt Date";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1210190082;2;Field  ;
                SourceExpr="Expected return on";
                Visible=FALSE;
                Editable=FieldEditable }

    { 60  ;2   ;Field     ;
                SourceExpr="Location Code";
                Editable=LocationCodeEditable;
                OnValidate=BEGIN
                             IF Transaction = Transaction::Inventory THEN
                               LocRec.GET("Location Code");
                           END;
                            }

    { 1100526200;2;Field  ;
                SourceExpr="Bin Code";
                Editable=BinCodeEditable }

    { 58  ;2   ;Field     ;
                SourceExpr=Deliver;
                Editable=FieldEditable }

    { 62  ;2   ;Field     ;
                SourceExpr="Ship To Location";
                Editable=FieldEditable }

    { 64  ;2   ;Field     ;
                SourceExpr="Purchase Action";
                Editable=FieldEditable }

    { 66  ;2   ;Field     ;
                SourceExpr="Purchase Phase";
                Editable=FieldEditable }

    { 1210190050;2;Field  ;
                SourceExpr="Purchaser Code";
                Editable=FieldEditable }

    { 1210190000;2;Field  ;
                SourceExpr="Negotiation recommended";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1210190059;2;Field  ;
                SourceExpr="Ask for Quote";
                Editable=FieldEditable }

    { 1210190056;2;Field  ;
                CaptionML=ENU=Quote No.;
                SourceExpr=RefQuote;
                Visible=FALSE;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefQuote = '') THEN
                             EXIT;

                           IF (COPYSTR(RefQuote, 1, 1) = '<') THEN  // IF Quote No. is '<Nr.>', then more than one quote present
                             RouteRefMgtCU.ShowReferenceQuoteList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Quote);
                             lvPurchHeadRec.SETRANGE("No.", RefQuote);
                             PAGE.RUNMODAL(PAGE::"Purchase Quote", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1210190061;2;Field  ;
                CaptionML=ENU=Purchase Order;
                SourceExpr=RefPurchOrder;
                Visible=FALSE;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefPurchOrder = '') THEN
                             EXIT;

                           IF (COPYSTR(RefPurchOrder, 1, 1) = '<') THEN  // IF Order No. is '<Nr.>', then more than one order present
                             RouteRefMgtCU.ShowReferencePurchOrderList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Order);
                             lvPurchHeadRec.SETRANGE("No.", RefPurchOrder);
                             PAGE.RUNMODAL(PAGE::"Purchase Order", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1210190054;2;Field  ;
                SourceExpr="Purchase Route Reference";
                Visible=FALSE }

    { 1210190009;2;Field  ;
                SourceExpr="Created by" }

    { 1100525038;2;Field  ;
                SourceExpr="Created by Employee No.";
                Visible=FALSE }

    { 1210190042;2;Field  ;
                SourceExpr="Date Created" }

    { 1210190044;2;Field  ;
                SourceExpr="Modified by" }

    { 1210190048;2;Field  ;
                SourceExpr="Last Date Modified" }

    { 1100485032;2;Field  ;
                SourceExpr="E-Plan Item";
                Visible=FALSE }

    { 1100485036;2;Field  ;
                SourceExpr="Scheme Code";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100485034;2;Field  ;
                SourceExpr="Comments for Logistics";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525030;2;Field  ;
                SourceExpr="Contract Type" }

    { 1100525027;2;Field  ;
                CaptionML=ENU=Blanket Order;
                SourceExpr=StrategicPurchMgt.NumberOfBlOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderAdviceOrder(Rec);
                         END;
                          }

    { 1100525032;2;Field  ;
                CaptionML=ENU=Blanket Order Line;
                SourceExpr=StrategicPurchMgt.NumberOfBlOrderLinesAdvOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1100525034;2;Field  ;
                CaptionML=ENU=Quantity in Blanket Order;
                SourceExpr=StrategicPurchMgt.QtyInBlanketOrdersAdviceOrder(Rec) }

    { 1210190075;2;Field  ;
                CaptionML=ENU=Documents;
                SourceExpr=HasDocumentLinks;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowDocuments;
                            END;
                             }

    { 1100525012;2;Field  ;
                SourceExpr="Vendor No. (Item Card)" }

    { 1100525010;2;Field  ;
                SourceExpr="Vendor Item No. (Item Card)" }

    { 1100525045;2;Field  ;
                SourceExpr="Bin Code (Project Inventory)" }

    { 1100525018;1;Group  ;
                CaptionML=ENU=Service Order Filters;
                Visible=FiltersVisible;
                GroupType=Group }

    { 1100525022;2;Field  ;
                CaptionML=ENU=Source Type Filter;
                SourceExpr=SourceTypeFilter;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER("No.", SourceTypeFilter);
                             SourceTypeFilter := ServiceOrder.GETFILTER("No.");
                             ApplyFilters;
                           END;
                            }

    { 1100525016;2;Field  ;
                CaptionML=ENU=Starting Date Filter;
                SourceExpr=StartingDateFilter;
                OnValidate=VAR
                             ServiceOrder@1100528600 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER("Starting Date", StartingDateFilter);
                             StartingDateFilter := ServiceOrder.GETFILTER("Starting Date");
                             ApplyFilters;
                           END;
                            }

    { 1100525047;2;Field  ;
                CaptionML=ENU=Starting Time Filter;
                SourceExpr=StartingTimeFilter;
                Importance=Additional;
                OnValidate=VAR
                             ServiceOrder@1100528600 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER("Starting Time", StartingTimeFilter);
                             StartingTimeFilter := ServiceOrder.GETFILTER("Starting Time");
                             ApplyFilters;
                           END;
                            }

    { 1100525033;2;Field  ;
                CaptionML=ENU=Status Filter;
                SourceExpr=StatusFilter;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER(Status, StatusFilter);
                             StatusFilter := ServiceOrder.GETFILTER(Status);
                             ApplyFilters;
                           END;
                            }

    { 1100525020;2;Field  ;
                Lookup=Yes;
                CaptionML=ENU=Actual Reference Point Filter;
                SourceExpr=ActualReferencePointFilter;
                TableRelation="Reference Point".No. WHERE (Apply=CONST(ServOrder));
                OnValidate=VAR
                             ReferencePoint@1100528600 : Record 11020271;
                           BEGIN
                             ReferencePoint.SETFILTER("No.", ActualReferencePointFilter);
                             ActualReferencePointFilter := ReferencePoint.GETFILTER("No.");
                             ApplyFilters;
                           END;

                OnLookup=VAR
                           ReferencePoint@1100525000 : Record 11020271;
                         BEGIN
                           CurrPage.UPDATE(TRUE);
                           ReferencePoint.RESET;
                           IF PAGE.RUNMODAL(0,ReferencePoint) = ACTION::LookupOK THEN BEGIN
                             ActualReferencePointFilter := ActualReferencePointFilter + FORMAT(ReferencePoint."No.");
                           END;
                         END;
                          }

    { 1100525035;2;Field  ;
                CaptionML=ENU=Priority Filter;
                SourceExpr=PriorityFilter;
                TableRelation="Service Priority".Code;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER(Priority, PriorityFilter);
                             PriorityFilter := ServiceOrder.GETFILTER(Priority);
                             ApplyFilters;
                           END;
                            }

    { 1100525036;2;Field  ;
                CaptionML=ENU=Discipline Filter;
                SourceExpr=DisciplineFilter;
                TableRelation=Discipline;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER(Discipline, DisciplineFilter);
                             DisciplineFilter := ServiceOrder.GETFILTER(Discipline);
                             ApplyFilters;
                           END;
                            }

    { 1100525037;2;Field  ;
                CaptionML=ENU=Trade Speciality Filter;
                SourceExpr=TradeSpecialityFilter;
                TableRelation="Trade Speciality".Code;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER("Trade Speciality", TradeSpecialityFilter);
                             TradeSpecialityFilter := ServiceOrder.GETFILTER("Trade Speciality");
                             ApplyFilters;
                           END;
                            }

    { 1100525039;2;Field  ;
                CaptionML=ENU=Order Kind filter;
                SourceExpr=OrderKindFilter;
                TableRelation="Service Order Indication" WHERE (Indication=CONST(Kind));
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER("Order Kind", OrderKindFilter);
                             OrderKindFilter := ServiceOrder.GETFILTER("Order Kind");
                             ApplyFilters;
                           END;
                            }

    { 1100525024;2;Field  ;
                CaptionML=ENU=Planned Employee No. Filter;
                SourceExpr=EmployeeNoFilter;
                TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                Importance=Additional;
                OnValidate=VAR
                             ResourceWOP@1100525000 : Record 11229278;
                           BEGIN
                             ResourceWOP.SETFILTER("No.", EmployeeNoFilter);
                             ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Employee);
                             EmployeeNoFilter := ResourceWOP.GETFILTER("No.");
                             ApplyFilters;
                           END;
                            }

    { 1100525041;2;Field  ;
                CaptionML=ENU=Territory Filter;
                SourceExpr=TerritoryFilter;
                TableRelation=Territory;
                Importance=Additional;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER("Territory Code", TerritoryFilter);
                             TerritoryFilter := ServiceOrder.GETFILTER("Territory Code");
                             ApplyFilters;
                           END;
                            }

    { 1100525026;2;Field  ;
                CaptionML=ENU=City Filter;
                SourceExpr=CityFilter;
                Importance=Additional;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER(City, CityFilter);
                             CityFilter := ServiceOrder.GETFILTER(City);
                             ApplyFilters;
                           END;
                            }

    { 1100525043;2;Field  ;
                CaptionML=ENU=Post code Filter;
                SourceExpr=PostcodeFilter;
                TableRelation="Post Code";
                Importance=Additional;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER("Post Code", PostcodeFilter);
                             PostcodeFilter := ServiceOrder.GETFILTER("Post Code");
                             ApplyFilters;
                           END;
                            }

    { 1100525028;2;Field  ;
                CaptionML=ENU=Address Filter;
                SourceExpr=AddressFilter;
                Importance=Additional;
                OnValidate=VAR
                             ServiceOrder@1100525000 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER(Address, AddressFilter);
                             AddressFilter := ServiceOrder.GETFILTER(Address);
                             ApplyFilters;
                           END;
                            }

    { 1100525025;2;Field  ;
                CaptionML=ENU=Customer No. Filter;
                SourceExpr=CustomerNoFilter;
                TableRelation=Customer.No.;
                OnValidate=VAR
                             Customer@1100525000 : Record 18;
                           BEGIN
                             Customer.SETFILTER("No.", CustomerNoFilter);
                             CustomerNoFilter := Customer.GETFILTER("No.");
                             ApplyFilters;
                           END;
                            }

    { 1100525023;2;Field  ;
                CaptionML=ENU=Master Project Filter;
                SourceExpr=ChargeToProjectFilter;
                TableRelation=Job WHERE (Internal Project=CONST(No));
                Importance=Additional;
                OnValidate=VAR
                             Job@1100525000 : Record 11072003;
                           BEGIN
                             Job.SETFILTER("No.", ChargeToProjectFilter);
                             ChargeToProjectFilter := Job.GETFILTER("No.");
                             ApplyFilters;
                           END;
                            }

    { 1100528600;2;Field  ;
                SourceExpr="Price History 0 Exists" }

    { 1100525002;0;Container;
                ContainerType=FactBoxArea }

    { 1100525004;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Line No.=FIELD(Line No.),
                            Record Type=FIELD(Record Type),
                            Service Order No.=FIELD(Service Order No.);
                PagePartID=Page11130138;
                PartType=Page }

    { 1100528800;1;Part   ;
                Name=Item Features;
                CaptionML=ENU=Item Features;
                SubPageLink=Item No.=FIELD(Item No.);
                PagePartID=Page11229268;
                PartType=Page }

  }
  CODE
  {
    VAR
      Text000@11012025 : TextConst 'ENU=Unsufficient Stock present';
      ProjSetup@1100525007 : Record 315;
      ItemSetup@1100525006 : Record 11012300;
      LocRec@1210190000 : Record 14;
      ItemRec@1210190003 : Record 27;
      GabiVendorRec@1100485001 : Record 11012304;
      AdviceCu@1210190015 : Codeunit 11012041;
      RouteRefMgtCU@1210190012 : Codeunit 11012045;
      InventoryQuan@11012010 : Decimal;
      ReservedQuan@11012011 : Decimal;
      InventoryUnit@11012012 : Code[10];
      RefQuote@1210190011 : Code[20];
      RefPurchOrder@1210190014 : Code[20];
      gvPhase@1210190001 : Integer;
      gvRefRoute@1210190002 : Code[20];
      VendorPrice@1100525001 : Decimal;
      VendorCurrency@1100525000 : Code[20];
      LocInventoryQuan@1100525002 : Decimal;
      ShowLocations@1100525005 : 'All,PrefLocations,Location';
      g_ItemCode@1100525004 : Code[20];
      g_Vendor@1100525003 : Code[20];
      ContractFilter@1100525008 : ' ,No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order';
      StrategicPurchMgt@1100525009 : Codeunit 11020211;
      BypassFiltering@1100525010 : Boolean;
      AdditionalCostServiceEditable@19048170 : Boolean INDATASET;
      "Basic ItemEnabled"@19042756 : Boolean INDATASET;
      "Trade ItemEnabled"@19042429 : Boolean INDATASET;
      ManufacturerEnabled@19015155 : Boolean INDATASET;
      "Vendor (Trade Item)Enabled"@19043796 : Boolean INDATASET;
      FieldEditable@1210190004 : Boolean INDATASET;
      ElementEditable@1210190005 : Boolean INDATASET;
      ExtensionContractEditable@1210190006 : Boolean INDATASET;
      CostTypeEditable@1210190009 : Boolean INDATASET;
      CostComponentEditable@1210190010 : Boolean INDATASET;
      QuantityAdviceEditable@1210190013 : Boolean INDATASET;
      UnitOfMeasureEditable@1210190016 : Boolean INDATASET;
      PriceEditable@1210190017 : Boolean INDATASET;
      VendorPriceEditable@1210190018 : Boolean INDATASET;
      LocationCodeEditable@1210190019 : Boolean INDATASET;
      BinCodeEditable@1210190020 : Boolean INDATASET;
      DPA_IsHardFilter@1100000999 : Boolean;
      ProcessStatusEditable@1210190022 : Boolean INDATASET;
      SupplyingCompInvEditable@1210190021 : Boolean INDATASET;
      FiltersVisible@1100528000 : Boolean INDATASET;
      SourceTypeFilter@1100525013 : Text[250];
      StartingDateFilter@1100525011 : Text[250];
      StartingTimeFilter@1100525026 : Text[250];
      StatusFilter@1100525019 : Text[250];
      ActualReferencePointFilter@1100525012 : Text[250];
      PriorityFilter@1100525020 : Code[250];
      DisciplineFilter@1100525021 : Code[250];
      TradeSpecialityFilter@1100525022 : Code[250];
      OrderKindFilter@1100525023 : Code[250];
      EmployeeNoFilter@1100525015 : Code[250];
      TerritoryFilter@1100525024 : Code[250];
      CityFilter@1100525018 : Text[250];
      PostcodeFilter@1100525025 : Code[250];
      AddressFilter@1100525017 : Text[250];
      CustomerNoFilter@1100525016 : Code[250];
      ChargeToProjectFilter@1100525014 : Code[250];
      LastRecFilter@1100409000 : Text;

    PROCEDURE Budget@8();
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN
        AdviceCu.SelectProjectBudget("Project No.", '', '');
      IF "Record Type" = "Record Type"::ServOrder THEN
        AdviceCu.SelectServiceBudget("Service Order No.");
    END;

    PROCEDURE PurchaseAction@10();
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN
        AdviceCu.SelectPurchaseAction("Project No.");
    END;

    PROCEDURE ProcessGenQuote@1210190006();
    VAR
      AdviceOrderLine@1210190000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      AdviceCu.ProcessGenQuote(AdviceOrderLine);
    END;

    PROCEDURE ProcessPurchase@2();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      AdviceCu.ProcessPurchase(AdviceOrderLine, FALSE, TRUE);  //PBRun= false, ItemRun=true
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessInventory@3();
    VAR
      AdviceOrderLine@1100525003 : Record 11012055;
      AdviceOrderLine2@1100525002 : Record 11012055;
      Counter@1100525001 : Integer;
      Text001@1100525004 : TextConst 'ENU=Do you want to recalculate the lines first?';
      Text002@1100525000 : TextConst 'ENU=There are %1 inverntory entries created in Item Journal.';
    BEGIN
      GetRecSelection(AdviceOrderLine);
      CLEAR(AdviceCu); //CALL C019988 newline
      ProjSetup.GET;
      IF (ProjSetup."Inventory Calc. Advice Order" = ProjSetup."Inventory Calc. Advice Order"::Availability) THEN BEGIN
        IF CONFIRM(Text001) THEN BEGIN
          AdviceCu.SetSkipMessage;
          IF NOT AdviceOrderLine.ISEMPTY THEN                              //CALL C019988 newline
            AdviceCu.PreSetToTypeAndBatch(AdviceOrderLine, FALSE, TRUE);   //CALL C019988 newline

          IF AdviceOrderLine.FINDSET(TRUE,TRUE) THEN
            REPEAT
              AdviceOrderLine2 := AdviceOrderLine;
              AdviceOrderLine2.SETRECFILTER;
              AdviceOrderLine2.GetDefaults;
              AdviceOrderLine2.MODIFY;
              AdviceOrderLine2.MARK(TRUE);
              Counter += AdviceCu.ProcessInventory(AdviceOrderLine2, FALSE, TRUE);  //PBRun= false, ItemRun=true
            UNTIL AdviceOrderLine.NEXT = 0;
          MESSAGE(Text002,Counter);
        END ELSE
          AdviceCu.ProcessInventory(AdviceOrderLine, FALSE, TRUE);  //PBRun= false, ItemRun=true
      END ELSE
        AdviceCu.ProcessInventory(AdviceOrderLine, FALSE, TRUE);  //PBRun= false, ItemRun=true
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessPurchaseRequisition@1100525009();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      AdviceCu.ProcessPurchaseRequisition(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessPlant@1210190003();
    BEGIN
      //mg, 07-07-11: RFC605
      AdviceCu.ProcessPlant(Rec, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ModifyRun@1100525003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      IF AdviceOrderLine.FINDSET THEN;
        AdviceCu.ModifyRun(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessRun@12();
    BEGIN
      AdviceCu.ProcessRun(TRUE);  //ItemRun=true
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Toggle@11(Phase@11012000 : Integer);
    BEGIN
      IF Phase = 0 THEN
        SETRANGE(Processed);
      IF Phase = 1 THEN
        SETRANGE(Processed, FALSE);
      IF Phase = 2 THEN
        SETRANGE(Processed, TRUE);
      IF Phase = 3 THEN BEGIN
        SETRANGE("Process Status", "Process Status"::Released);
        SETRANGE(Processed, FALSE);
      END ELSE BEGIN
        SETRANGE("Process Status");
      END;
    END;

    PROCEDURE Compress@1();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      IF AdviceOrderLine.ISEMPTY THEN BEGIN
        AdviceOrderLine.RESET;
        AdviceOrderLine.COPY(Rec);
      END;
      AdviceCu.CompressLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Split@9();
    VAR
      AdviceOrderLine@1210190000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      IF AdviceOrderLine.FINDSET THEN; //mg, 22-01-2014: C010838
      AdviceCu.SplitLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Divide@1100525000();
    VAR
      AdviceOrderLine@1210190000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      IF AdviceOrderLine.FINDSET THEN; //mg, 22-01-2014: C010838
      AdviceCu.SplitLinesPrefLoc(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Approve@1100485002();
    VAR
      AdviceOrderLine@1210190000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      AdviceCu.ApproveLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE InventoryReservation@4(lItem@11012000 : Code[20]);
    BEGIN
      LocInventoryQuan := 0;
      InventoryQuan := 0;
      ReservedQuan := 0;
      InventoryUnit := '';

      IF ("Supplying Company Inventory" <> '') THEN
        ItemRec.CHANGECOMPANY("Supplying Company Inventory");

      IF ItemRec.GET(lItem) THEN BEGIN
        //**4PS.sn
        IF "Record Type" = "Record Type"::Project THEN
          ItemRec.SETRANGE("Project Filter","Project No.");
        //**4PS.en
        ItemRec.CALCFIELDS(Inventory, "Qty. on Item Journal Project", "Qty. on Item Journal Service");
      //  LocInventoryQuan := GetInventory(Location,ItemRec,FALSE);
        InventoryQuan := GetInventory('',ItemRec,TRUE);
        ReservedQuan := ItemRec."Qty. on Item Journal Project" + ItemRec."Qty. on Item Journal Service";
        InventoryUnit := ItemRec."Base Unit of Measure";
      END;

      IF ("Supplying Company Inventory" <> '') THEN
        ItemRec.CHANGECOMPANY(COMPANYNAME);
    END;

    PROCEDURE EditText@1210190000();
    BEGIN
      AdviceCu.EditText(Rec);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE HandleItemLookup@1100485000(ZoomType@1210190000 : Integer);
    BEGIN
      LookupItemData(ZoomType,g_ItemCode,g_Vendor);  //db, 30-11-10: M23941
      IF ZoomType = -1 THEN  //db, 09-03-07 (call 8283)
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ShowPurchRouteRef@1210190004();
    BEGIN
      RouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
    END;

    PROCEDURE SetSelection@1210190001(lvPhase@1210190000 : Integer;lvRefRoute@1210190001 : Code[20]);
    BEGIN
      //db, 29-01-04: change because of call from purchase (order/quote)
      gvPhase := lvPhase;
      gvRefRoute := lvRefRoute;
    END;

    PROCEDURE UpdateVendor@1100485001();
    VAR
      ModifyItemVendor@1100485000 : Page 11020420;
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      ModifyItemVendor.SetAdviceOrderRec(AdviceOrderLine);
      ModifyItemVendor.RUNMODAL;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE DrillDownInventory@1100525001(ShowLocations@1100525003 : 'All,PrefLocations,Location');
    BEGIN
      AdviceCu.DrillDownInventory(Rec, ShowLocations);  //db, 09-02-09
    END;

    PROCEDURE SetProcessStatusFilter@1100525007(ProcessStatusFilter@1100525000 : Text[1024]) : Text[1024];
    BEGIN
      IF ProcessStatusFilter <> '' THEN
        SETFILTER("Process Status",ProcessStatusFilter)
      ELSE
        SETRANGE("Process Status");
    END;

    PROCEDURE SetContractFilter@1100525002(ContractFilter@1100525000 : ' ,No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order');
    BEGIN
      CASE ContractFilter OF
        ContractFilter::" ":
          SETRANGE("Contract Type");
        ContractFilter::"No Contract":
          SETRANGE("Contract Type","Contract Type"::"No Contract");
        ContractFilter::Contract:
          SETRANGE("Contract Type","Contract Type"::Contract);
        ContractFilter::"Contract with Discount Agreement":
          SETRANGE("Contract Type","Contract Type"::"Contract with Discount Terms");
        ContractFilter::"General Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"General Blanket Order");
        ContractFilter::"Project Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Project Blanket Order");
        ContractFilter::"Service Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Service Blanket Order");
      END;
    END;

    PROCEDURE ShowItemAvailbyPeriod@1100525006();
    VAR
      Item@1100525000 : Record 27;
    BEGIN
      IF "Item No." = '' THEN EXIT;
      IF Item.GET("Item No.") THEN BEGIN
        PAGE.RUN(PAGE::"Item Availability by Periods",Item);
      END;
    END;

    PROCEDURE GenerateICKOrder@1100525004();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      GetRecSelection(AdviceOrderLine);
      AdviceCu.GenerateICKOrder(AdviceOrderLine);  //db, 17-08-10: M15519
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SetBypassFiltering@1100525005(BypassFiltering2@1100525000 : Boolean);
    BEGIN
      BypassFiltering := BypassFiltering2;
    END;

    LOCAL PROCEDURE ShowDocuments@1210190002();
    VAR
      RecRef@1210190000 : RecordRef;
      DocumentFilters@1210190001 : Codeunit 11012432;
    BEGIN
      TESTFIELD("Line No.");
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Global Dimension 1 Code", FALSE, TRUE);
    END;

    LOCAL PROCEDURE ItemNoOnAfterValidate@19061248();
    BEGIN
      SetEditable;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BasicItemOnAfterValidate@19054956();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE TradeItemOnAfterValidate@19075338();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE GrossPriceOnAfterValidate@19036441();
    BEGIN
      CurrPage.UPDATE; //call 31790
    END;

    LOCAL PROCEDURE Discount37OnAfterValidate@19039847();
    BEGIN
      CurrPage.UPDATE; //call 31790
    END;

    LOCAL PROCEDURE PriceOnAfterValidate@19065147();
    BEGIN
      CurrPage.UPDATE; //call 31790
    END;

    LOCAL PROCEDURE VendorPriceOnAfterValidate@19037936();
    BEGIN
      VALIDATE(Price, ConvertVendorPrice(Vendor, VendorPrice));  //db, 20-11-08
    END;

    LOCAL PROCEDURE TransactionOnAfterValidate@19077289();
    BEGIN
      SetEditable;
    END;

    LOCAL PROCEDURE SupplyingCompanyInventoryOnAft@19041258();
    BEGIN
      InventoryReservation("Item No.");
    END;

    LOCAL PROCEDURE ContractFilterOnAfterValidate@19030304();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      SetEditable;
    END;

    LOCAL PROCEDURE PriceAgreementOnActivate@19033268();
    BEGIN
    END;

    LOCAL PROCEDURE GetAddCostServiceEditable@19077114(FieldEditable@1100528400 : Boolean) AddCostServiceEditable : Boolean;
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      AddCostServiceEditable := FieldEditable;

      IF NOT ServiceOrder.GET("Service Order No.") THEN
        ServiceOrder.INIT;

      IF ServiceOrder."Service Contract No." <> '' THEN
        AddCostServiceEditable :=
          ((ServiceOrder."Source Type" <> ServiceOrder."Source Type"::Direct) OR
          (ServiceOrder."Service Contract No." = ''));
    END;

    LOCAL PROCEDURE ProcessStatusFilterOnAfterInpu@19050706(VAR Text@19050707 : Text[1024]);
    BEGIN
      SetProcessStatusFilter(Text);
    END;

    PROCEDURE SetEditable@1210190005();
    VAR
      JobsSetup@1100525001 : Record 315;
      ServiceSetup@1100525000 : Record 11012800;
    BEGIN
      IF JobsSetup.GET THEN;
      IF ServiceSetup.GET THEN;

      IF JobsSetup."Released AdvOrder not editable" THEN
        FieldEditable := ("Process Status" < "Process Status"::Released)
      ELSE
        FieldEditable := TRUE;

      AdditionalCostServiceEditable := GetAddCostServiceEditable(FieldEditable);
      ElementEditable := FieldEditable AND ("Record Type" = "Record Type"::Project);
      ExtensionContractEditable := FieldEditable AND ("Record Type" = "Record Type"::Project);
      QuantityAdviceEditable := FieldEditable AND ("Process Status" < "Process Status"::Processed);
      CostTypeEditable := FieldEditable AND ("Item No." + "Basic Item" + "Trade Item" = '');
      UnitOfMeasureEditable := FieldEditable AND ("Quantity (Processed)" = 0);
      PriceEditable := FieldEditable AND ("Quantity (Budget)" = 0);
      VendorPriceEditable := FieldEditable AND (VendorCurrency <> '');
      LocationCodeEditable := FieldEditable AND FieldIsEditable(FIELDNO("Location Code"));
      BinCodeEditable := FieldEditable AND FieldIsEditable(FIELDNO("Bin Code"));
      CostComponentEditable :=
        FieldEditable AND
        ((("Project No." <> '') AND JobsSetup."Cost Component Editable") OR
        (("Service Order No." <> '') AND ServiceSetup."Cost Component Editable") OR
        (("Project No." = '') AND ("Service Order No." = '')));

      ProcessStatusEditable := ("Process Status" <> "Process Status"::Processed);

      SupplyingCompInvEditable :=
        FieldEditable AND
        ("Cost Type" = "Cost Type"::Material) AND
        ("Item No." <> '') AND
        (Transaction = Transaction::Inventory) AND
        ("Process Status" < "Process Status"::Processed);
    END;

    LOCAL PROCEDURE ApplyFilters@1100528600();
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      //** DP00576
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE ServiceOrderExtensionFound@1100528603(IServiceOrderNo@1100528600 : Code[20];IFieldType@1100528604 : Integer;IServiceTextFilter@1100528602 : Text[250]) : Boolean;
    VAR
      ServiceOrderExtension@1100528603 : Record 11071727;
    BEGIN
      //** DP00576
      IF IServiceTextFilter = '' THEN
        EXIT(TRUE);

      ServiceOrderExtension.SETRANGE("Service Order No.", IServiceOrderNo);
      IF IFieldType = 1 THEN BEGIN
        ServiceOrderExtension.SETFILTER("Master Project", IServiceTextFilter);
        IF NOT ServiceOrderExtension.ISEMPTY THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetRecSelection@1100528604(VAR OAdviceOrderLine@1100528600 : Record 11012055);
    BEGIN
      //BackupAdviceOrderLine.COPY(Rec);               //** Call C026687 old
      //CurrPage.SETSELECTIONFILTER(Rec);            //** Call C026687 old
      //OAdviceOrderLine.COPY(Rec);                  //** Call C026687 old
      ApplyFiltersToGetMarkedOnly(OAdviceOrderLine); //** Call C026687 new
      IF OAdviceOrderLine.GET("Record Type","Project No.","Service Order No.","Line No.") THEN; //** Call C026687 new Get Current Record
      //Rec.COPY(BackupAdviceOrderLine);               //** Call C026687 old
    END;

    LOCAL PROCEDURE FindPosition@1100409003(Which@1100409001 : Text) : Boolean;
    VAR
      lAdviceOrderLine@1100409000 : Record 11012055;
      i@1100409002 : Integer;
    BEGIN
      //** Call C026687 new
      lAdviceOrderLine.COPY(Rec);
      IF Which = '' THEN Which := '=';
      FOR i := 1 TO STRLEN(Which) DO
      CASE Which[i] OF
        '-': BEGIN
          IF Rec.FIND('-') THEN REPEAT
            IF ShowThisRecord(Rec) THEN EXIT(TRUE);
          UNTIL Rec.NEXT = 0;
        END;
        '+': BEGIN
          IF Rec.FIND('+') THEN REPEAT
            IF ShowThisRecord(Rec) THEN EXIT(TRUE);
          UNTIL Rec.NEXT(-1) = 0;
        END;
        '=': BEGIN
          IF Rec.FIND THEN
            IF ShowThisRecord(Rec) THEN EXIT(TRUE);
        END;
        '>': BEGIN
          IF NextPosition(Rec, 1) <> 0 THEN
            EXIT(TRUE);
        END;
        '<': BEGIN
          IF NextPosition(Rec, -1) <> 0 THEN
            EXIT(TRUE);
        END;
      END;
      Rec.COPY(lAdviceOrderLine);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE NextPosition@1100409004(VAR lAdviceOrderLine@1100409000 : Record 11012055;Steps@1100409001 : Integer) StepsCount : Integer;
    VAR
      RecRef2@1100409003 : Record 11012055;
      RecRef3@1100409004 : Record 11012055;
      Direction@1100409002 : Integer;
    BEGIN
      //** Call C026687 new
      IF Steps = 0 THEN EXIT;
      IF Steps > 0 THEN
        Direction := 1
      ELSE
        Direction := -1;
      RecRef2.COPY(lAdviceOrderLine);
      RecRef3.COPY(lAdviceOrderLine);
      REPEAT
        IF lAdviceOrderLine.NEXT(Direction) = 0 THEN BEGIN
          lAdviceOrderLine.COPY(RecRef3);
          EXIT;
        END;
        IF ShowThisRecord(lAdviceOrderLine) THEN BEGIN
          RecRef3.COPY(lAdviceOrderLine);
          StepsCount += Direction;
        END;
      UNTIL ABS(StepsCount) >= ABS(Steps);
      IF StepsCount = 0 THEN
        lAdviceOrderLine.COPY(RecRef2)
      ELSE
        lAdviceOrderLine.COPY(RecRef3);
    END;

    LOCAL PROCEDURE ShowThisRecord@1100525008(lAdviceOrderLine@1100528200 : Record 11012055) : Boolean;
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      //** DP00576
      IF (SourceTypeFilter = '') AND
         (StartingDateFilter = '') AND
         (StartingTimeFilter = '') AND
         (StatusFilter = '') AND
         (ActualReferencePointFilter = '') AND
         (PriorityFilter = '') AND
         (DisciplineFilter = '') AND
         (TradeSpecialityFilter = '') AND
         (OrderKindFilter = '') AND
         (EmployeeNoFilter = '') AND
         (TerritoryFilter = '') AND
         (CityFilter = '') AND
         (PostcodeFilter = '') AND
         (AddressFilter = '') AND
         (CustomerNoFilter = '') AND
         (ChargeToProjectFilter = '')
      THEN
        EXIT(TRUE);

      IF lAdviceOrderLine."Service Order No." = '' THEN
        EXIT(FALSE);

      ServiceOrder.SETRANGE("No.", lAdviceOrderLine."Service Order No.");

      IF SourceTypeFilter <> '' THEN
        ServiceOrder.SETFILTER("Source Type", SourceTypeFilter);
      IF StartingDateFilter <> '' THEN
        ServiceOrder.SETFILTER("Starting Date", StartingDateFilter);
      IF StartingTimeFilter <> '' THEN
        ServiceOrder.SETFILTER("Starting Time", StartingTimeFilter);
      IF StatusFilter <> '' THEN
        ServiceOrder.SETFILTER(Status, StatusFilter);
      IF ActualReferencePointFilter <> '' THEN
        ServiceOrder.SETFILTER("Actual Reference Point", ActualReferencePointFilter);
      IF PriorityFilter <> '' THEN
        ServiceOrder.SETFILTER(Priority, PriorityFilter);
      IF DisciplineFilter <> '' THEN
        ServiceOrder.SETFILTER(Discipline, DisciplineFilter);
      IF TradeSpecialityFilter <> '' THEN
        ServiceOrder.SETFILTER("Trade Speciality", TradeSpecialityFilter);
      IF OrderKindFilter <> '' THEN
        ServiceOrder.SETFILTER("Order Kind", OrderKindFilter);
      IF EmployeeNoFilter <> '' THEN
        ServiceOrder.SETFILTER("Employee No.",EmployeeNoFilter);
      IF TerritoryFilter <> '' THEN
        ServiceOrder.SETFILTER("Territory Code",TerritoryFilter);
      IF CityFilter <> '' THEN
        ServiceOrder.SETFILTER(City,CityFilter);
      IF PostcodeFilter <> '' THEN
        ServiceOrder.SETFILTER("Post Code",PostcodeFilter);
      IF AddressFilter <> '' THEN
        ServiceOrder.SETFILTER(Address,AddressFilter);
      IF CustomerNoFilter <> '' THEN
        ServiceOrder.SETFILTER("Customer No.",CustomerNoFilter);

      IF NOT ServiceOrder.FINDFIRST THEN
        EXIT(FALSE);

      IF NOT ServiceOrderExtensionFound(ServiceOrder."No.", 1, ChargeToProjectFilter) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE ApplyFiltersToGetMarkedOnly@1100525018(VAR AdviceOrderLine@1100525001 : Record 11012055);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      //** Call C026687 new
      //This Selection is necessary in case the user has selected records using: <CTRL>-A
      //In that case the extra filtering would be ignored.

      AdviceOrderLine.RESET;
      AdviceOrderLine.CLEARMARKS;
      AdviceOrderLine.MARKEDONLY(FALSE);

      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);

      IF (SourceTypeFilter = '') AND
         (StartingDateFilter = '') AND
         (StartingTimeFilter = '') AND
         (StatusFilter = '') AND
         (ActualReferencePointFilter = '') AND
         (PriorityFilter = '') AND
         (DisciplineFilter = '') AND
         (TradeSpecialityFilter = '') AND
         (OrderKindFilter = '') AND
         (EmployeeNoFilter = '') AND
         (TerritoryFilter = '') AND
         (CityFilter = '') AND
         (PostcodeFilter = '') AND
         (AddressFilter = '') AND
         (CustomerNoFilter = '') AND
         (ChargeToProjectFilter = '') THEN
      BEGIN
        EXIT;
      END;

      IF SourceTypeFilter <> '' THEN
        ServiceOrder.SETFILTER("Source Type", SourceTypeFilter);
      IF StartingDateFilter <> '' THEN
        ServiceOrder.SETFILTER("Starting Date", StartingDateFilter);
      IF StartingTimeFilter <> '' THEN
        ServiceOrder.SETFILTER("Starting Time", StartingTimeFilter);
      IF StatusFilter <> '' THEN
        ServiceOrder.SETFILTER(Status, StatusFilter);
      IF ActualReferencePointFilter <> '' THEN
        ServiceOrder.SETFILTER("Actual Reference Point", ActualReferencePointFilter);
      IF PriorityFilter <> '' THEN
        ServiceOrder.SETFILTER(Priority, PriorityFilter);
      IF DisciplineFilter <> '' THEN
        ServiceOrder.SETFILTER(Discipline, DisciplineFilter);
      IF TradeSpecialityFilter <> '' THEN
        ServiceOrder.SETFILTER("Trade Speciality", TradeSpecialityFilter);
      IF OrderKindFilter <> '' THEN
        ServiceOrder.SETFILTER("Order Kind", OrderKindFilter);
      IF EmployeeNoFilter <> '' THEN
        ServiceOrder.SETFILTER("Employee No.",EmployeeNoFilter);
      IF TerritoryFilter <> '' THEN
        ServiceOrder.SETFILTER("Territory Code",TerritoryFilter);
      IF CityFilter <> '' THEN
        ServiceOrder.SETFILTER(City,CityFilter);
      IF PostcodeFilter <> '' THEN
        ServiceOrder.SETFILTER("Post Code",PostcodeFilter);
      IF AddressFilter <> '' THEN
        ServiceOrder.SETFILTER(Address,AddressFilter);
      IF CustomerNoFilter <> '' THEN
        ServiceOrder.SETFILTER("Customer No.",CustomerNoFilter);

      IF ServiceOrder.FINDSET THEN BEGIN
        AdviceOrderLine.FILTERGROUP(7);
        REPEAT
          IF ServiceOrderExtensionFound(ServiceOrder."No.", 1, ChargeToProjectFilter) THEN
          BEGIN
            AdviceOrderLine.SETRANGE("Service Order No.", ServiceOrder."No.");
            IF AdviceOrderLine.FINDSET THEN
              REPEAT
                AdviceOrderLine.MARK(TRUE);
              UNTIL AdviceOrderLine.NEXT = 0;
          END;
        UNTIL ServiceOrder.NEXT = 0;
        AdviceOrderLine.SETRANGE("Service Order No.");
        AdviceOrderLine.FILTERGROUP(0);
      END;

      AdviceOrderLine.MARKEDONLY(TRUE);
    END;

    BEGIN
    {
      4PS HBK 07-08-09 Fields Added: "Contract Found In", "Blanket Order No." and Filter Tab
      4PS HBK 09-06-10: TM4856 Added projectfilter in InventoryReservation
    }
    END.
  }
}

