OBJECT Page 11012148 Apply Budget Difference
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012263=r;
    CaptionML=ENU=Apply Budget Difference;
    PageType=NavigatePage;
    OnInit=BEGIN
             ElementEditable := TRUE;
             RateFieldEditable := TRUE;
             DescriptionNewBudgetLineEditab := TRUE;
             CostObjectEditable := TRUE;
             NoOfLinesToAddEditable := TRUE;
             AmntToApplyEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 gBudgAdjRec.CALCFIELDS("Project Description");
                 NoOfLinesToAdd := 1;
                 IF CostObjectRec.Code <> '' THEN
                   ValidateCostObject;

                 AmntToApplyEditable := AmntToApplyEditable; //call 29351
                 // This MARKEDONLY(TRUE) is needed in page to prevent that all budget lines in the database are updated
                 // when apply button is pressed before SetMarkedBudgetLines is called.
                 MarkedBudgetLine.MARKEDONLY(TRUE); //*C-029097.n Must also be done if the functie SetMarkedBudgetLines is not executed!
                 SetEditable();  //*C-029097.n
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210190020;1 ;Action    ;
                      CaptionML=ENU=&Apply;
                      InFooterBar=Yes;
                      Image=ApplyTemplate;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 BudgetRec@1210190000 : Record 11012001;
                                 BudgetRec2@1210190003 : Record 11012001;
                                 TmpTenderParPart@1210190005 : TEMPORARY Record 11012264;
                                 SkipTenderParPart@1210190006 : Boolean;
                                 LineNoInt@1210190001 : Integer;
                                 Counter@1100485001 : Integer;
                                 ApplyPercentage@1210190004 : Decimal;
                                 RemainingAmountToApply@1210190007 : Decimal;
                               BEGIN
                                 IF CompressType <> CompressType::No THEN BEGIN  //*C-029097.n
                                   IF CostObjectRec.Code = '' THEN
                                     ERROR(Text001, BudgetRec.FIELDCAPTION("Cost Object"));

                                   IF (CostObjectRec."Cost Type" = CostObjectRec."Cost Type"::Labor) AND
                                      (BudgetRateRec.Code = '')
                                   THEN
                                     IF NOT BudgetRateRec.GET(BudgetRateRec.Code) THEN
                                       ERROR(Text001, BudgetRateRec.TABLECAPTION);
                                 END;  //*C-029097.n
                                 ValidateCompressType();   //*C-029097.n
                                 ValidateNoOfLinesToAdd(); //*C-029097.n

                                 //Call C-018496
                                 IF AmntToApplyEditable AND (gAmntToApplyDec <> MaxAmntToApplyDec) THEN BEGIN //call 29351
                                   ApplyPercentage := gAmntToApplyDec / MaxAmntToApplyDec;
                                   MarkedBudgetLine.FINDSET(TRUE, FALSE);
                                   REPEAT
                                     IF MarkedBudgetLine."Cost Type" = MarkedBudgetLine."Cost Type"::Labor THEN
                                       MarkedBudgetLine.VALIDATE(Quantity, MarkedBudgetLine.Quantity * ApplyPercentage)
                                     ELSE
                                       MarkedBudgetLine.VALIDATE(Price, MarkedBudgetLine.Price * ApplyPercentage);
                                     MarkedBudgetLine.MODIFY;
                                   UNTIL MarkedBudgetLine.NEXT = 0;
                                 END;

                                 //Determine Last Line No of Adjustment
                                 BudgetRec.SETCURRENTKEY("Project No.", Adjustment);
                                 BudgetRec.SETRANGE("Project No.",gBudgAdjRec."Project No.");
                                 BudgetRec.SETRANGE(Adjustment,gBudgAdjRec."No.");
                                 IF BudgetRec.FINDSET THEN
                                   REPEAT
                                     IF LineNoInt < BudgetRec."Line No." THEN
                                       LineNoInt := BudgetRec."Line No.";
                                   UNTIL BudgetRec.NEXT = 0
                                 ELSE
                                   CurrPage.CLOSE;

                                 //*C-029097.sn
                                 IF CompressType = CompressType::No THEN BEGIN
                                   //* Only marked budget lines may be applied.
                                   //* Note: Mark the budget lines of BudgetRec after the last lineno is determined.
                                   MarkedBudgetLine.FINDSET;
                                   REPEAT
                                     IF BudgetRec.GET(
                                       MarkedBudgetLine."Project No.", MarkedBudgetLine.Adjustment,
                                       MarkedBudgetLine."Extension Contract", MarkedBudgetLine.Option, MarkedBudgetLine."Line No.")
                                     THEN
                                       BudgetRec.MARK(TRUE);
                                   UNTIL MarkedBudgetLine.NEXT = 0;
                                   BudgetRec.MARKEDONLY(TRUE);
                                 END;
                                 //*C-029097.en
                                 BudgetRec.SETFILTER("Line No.", '..%1', LineNoInt);
                                 LineNoInt := LineNoInt + 10000;
                                 BudgetRec.SETRANGE("Budget Summary Line", FALSE); //call 30022
                                 IF BudgetRec.FINDSET(FALSE, FALSE) THEN
                                   REPEAT
                                     //*C-029097.sn
                                     SkipTenderParPart := FALSE;
                                     IF CompressType = CompressType::"Tender Paragraph / Part" THEN BEGIN
                                       IF TmpTenderParPart.GET(BudgetRec."Project No.", BudgetRec."Tender Paragraph", BudgetRec."Tender Paragraph Part") THEN
                                         SkipTenderParPart := TRUE
                                       ELSE BEGIN
                                         TmpTenderParPart."Project No." := BudgetRec."Project No.";
                                         TmpTenderParPart."Tender Paragraph" := BudgetRec."Tender Paragraph";
                                         TmpTenderParPart."Tender Paragraph Part" := BudgetRec."Tender Paragraph Part";
                                         TmpTenderParPart.INSERT;
                                       END;
                                     END;
                                     //*C-029097.en
                                     IF (NOT SkipTenderParPart) THEN BEGIN  //*C-029097.n
                                       BudgetRec.SETRANGE("Adjustment Filter", gBudgAdjRec."No.");
                                       BudgetRec.SETRANGE("Extension Filter", BudgetRec."Extension Contract");
                                       //BudgetRec.CALCFIELDS("Total Amount");  //*C-029097.o
                                       CalcTotalAmountForCompressType(BudgetRec, RemainingAmountToApply);  //*C-029097.n //call 30022
                                     END;  //*C-029097.n
                                     //IF ABS(BudgetRec."Total Amount") >= 0.01 THEN BEGIN  //*C-029097.o
                                     IF (ABS(RemainingAmountToApply) >= 0.01) AND (NOT SkipTenderParPart) THEN BEGIN  //*C-029097.n
                                       CLEAR(BudgetRec2);
                                       BudgetRec2."Project No." := gBudgAdjRec."Project No.";
                                       BudgetRec2.Adjustment := gBudgAdjRec."No.";
                                       BudgetRec2."Cost Type" := CostObjectRec."Cost Type";
                                       BudgetRec2."Extension Contract" := BudgetRec."Extension Contract";
                                       BudgetRec2."Version Date" := gBudgAdjRec."Version Date";
                                       //*C-029097.sn
                                       IF CompressType = CompressType::"Tender Paragraph / Part" THEN BEGIN
                                         BudgetRec2."Tender Paragraph" := BudgetRec."Tender Paragraph";
                                         BudgetRec2."Tender Paragraph Part" := BudgetRec."Tender Paragraph Part";
                                       END;
                                       IF CompressType = CompressType::No THEN BEGIN
                                         BudgetRec2.VALIDATE(Element, BudgetRec.Element);
                                         BudgetRec2."Cost Object" := BudgetRec."Cost Object";
                                         BudgetRec2."Cost Type" := BudgetRec."Cost Type";
                                         BudgetRec2.Description := BudgetRec.Description;
                                         BudgetRec2."Description 2" := BudgetRec."Description 2";
                                         BudgetRec2."Unit of Measure" := BudgetRec."Unit of Measure";
                                         BudgetRec2."Unit of Time" := BudgetRec."Unit of Time";
                                         BudgetRec2."Time Quantity" := BudgetRec."Time Quantity";
                                         BudgetRec2."Item No." := BudgetRec."Item No.";
                                         BudgetRec2.Manufacturer := BudgetRec.Manufacturer;
                                         BudgetRec2."Basic Item" := BudgetRec."Basic Item";
                                         BudgetRec2."Vendor (Trade Item)" := BudgetRec."Vendor (Trade Item)";
                                         BudgetRec2."Trade Item" := BudgetRec."Trade Item";
                                         BudgetRec2."Plot No." := BudgetRec."Plot No.";
                                         BudgetRec2."House Model" := BudgetRec."House Model";
                                         BudgetRec2.Option := BudgetRec.Option;
                                         BudgetRec2."Main Group" := BudgetRec."Main Group";
                                         BudgetRec2.Group := BudgetRec.Group;
                                         BudgetRec2."Sub Group" := BudgetRec."Sub Group";
                                         BudgetRec2."Tender Paragraph" := BudgetRec."Tender Paragraph";
                                         BudgetRec2."Tender Paragraph Part" := BudgetRec."Tender Paragraph Part";
                                         BudgetRec2."Cost Component" := BudgetRec."Cost Component";
                                         BudgetRec2."Variant Code" := BudgetRec."Variant Code";
                                         BudgetRec2."Plant Type" := BudgetRec."Plant Type";
                                         IF BudgetRec2."Cost Type" = BudgetRec2."Cost Type"::Labor THEN BEGIN
                                           BudgetRec2."Rate Code" := BudgetRec."Rate Code";
                                           BudgetRec2.Rate := BudgetRec.Rate;
                                           BudgetRec2.Norm := BudgetRec.Norm;
                                           BudgetRec2."Production Rate" := BudgetRec."Production Rate";
                                           BudgetRec2.VALIDATE(Quantity, -BudgetRec.Quantity);
                                         END ELSE BEGIN
                                           BudgetRec2."Discount %" := BudgetRec."Discount %";
                                           //*33412.so
                                           //IF BudgetRec."Gross Price" <> 0 THEN
                                           //  BudgetRec2."Gross Price" := -BudgetRec."Gross Price";
                                           //BudgetRec2."Surcharge %" := BudgetRec."Surcharge %";
                                           //IF BudgetRec."Surcharge Price" <> 0 THEN
                                           //  BudgetRec2."Surcharge Price" := -BudgetRec."Surcharge Price";
                                           //BudgetRec2.Quantity := BudgetRec.Quantity;
                                           //BudgetRec2.VALIDATE(Price, -BudgetRec.Price);
                                           //*33412.eo
                                           //*33412.sn
                                           BudgetRec2."Gross Price" := BudgetRec."Gross Price";
                                           BudgetRec2."Surcharge %" := BudgetRec."Surcharge %";
                                           BudgetRec2."Surcharge Price" := BudgetRec."Surcharge Price";
                                           BudgetRec2.Quantity := -BudgetRec.Quantity;
                                           BudgetRec2.VALIDATE(Price, BudgetRec.Price);
                                           //*33412.en
                                         END;
                                       END ELSE BEGIN
                                       //*C-029097.en
                                         BudgetRec2.VALIDATE("Cost Object",CostObjectRec.Code);
                                         IF CostObjectRec."Cost Type" = CostObjectRec."Cost Type"::Labor THEN BEGIN
                                           BudgetRec2.VALIDATE("Rate Code",BudgetRateRec.Code);
                                           BudgetRec2.TESTFIELD(Rate);
                                           BudgetRec2.Norm := 1; //Call C-018496
                                           BudgetRec2."Production Rate" := 1;
                                           BudgetRec2.VALIDATE(Quantity,((RemainingAmountToApply * -1)/ (BudgetRec2.Rate * NoOfLinesToAdd))); //Call C-018496
                                         END ELSE BEGIN
                                           BudgetRec2.Quantity := 1; //Call C-018496
                                           BudgetRec2.VALIDATE(Price,RemainingAmountToApply/NoOfLinesToAdd * -1);
                                         END;
                                         IF ProjElemRec.Element <> '' THEN
                                           BudgetRec2.VALIDATE(Element, ProjElemRec.Element);
                                         IF (DescriptionNewBudgetLine <> '') AND (BudgetRec2.Description <> DescriptionNewBudgetLine) THEN
                                           BudgetRec2.Description := DescriptionNewBudgetLine;
                                       END;  //*C-029097.n
                                       FOR Counter := 1 TO NoOfLinesToAdd DO BEGIN
                                         //IF (NoOfLinesToAdd > 1) AND (Counter = NoOfLinesToAdd) THEN BEGIN  //*C-029097.o
                                         IF (NoOfLinesToAdd > 1) AND (Counter = NoOfLinesToAdd) AND (CompressType <> CompressType::No) THEN BEGIN //*C-029097.n
                                           //Call C-026368: last line holds rounding
                                           BudgetRec2.SETRANGE("Adjustment Filter", gBudgAdjRec."No.");
                                           BudgetRec2.SETRANGE("Extension Filter", BudgetRec."Extension Contract");
                                           //BudgetRec2.CALCFIELDS("Total Amount");  //*C-029097.o
                                           CalcTotalAmountForCompressType(BudgetRec2, RemainingAmountToApply);  //*C-029097.n
                                           IF CostObjectRec."Cost Type" = CostObjectRec."Cost Type"::Labor THEN
                                             //BudgetRec2.VALIDATE(Norm,((BudgetRec2."Total Amount" * -1)/ (BudgetRec2.Rate))) //Call C-018496
                                             BudgetRec2.VALIDATE(Quantity,((RemainingAmountToApply * -1)/ (BudgetRec2.Rate))) //Call C-018496
                                           ELSE
                                             BudgetRec2.VALIDATE(Price,RemainingAmountToApply * -1);
                                         END;
                                         BudgetRec2."Line No." := LineNoInt;
                                         BudgetRec2.INSERT(TRUE);
                                         BudgetRec2.VALIDATE("Purchase Action",gPurchActionCde);
                                         BudgetRec2.MODIFY(TRUE);
                                         LineNoInt := LineNoInt + 10000;
                                       END;
                                     END;
                                   UNTIL BudgetRec.NEXT = 0;

                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525001;1;Field  ;
                CaptionML=ENU=Apply Budget Difference;
                Style=Strong;
                StyleExpr=TRUE }

    { 1210190002;1;Field  ;
                CaptionML=ENU=Project No.;
                SourceExpr=gBudgAdjRec."Project No.";
                Editable=FALSE }

    { 1210190000;1;Field  ;
                CaptionML=ENU=Project Description;
                SourceExpr=gBudgAdjRec."Project Description";
                Visible=false;
                Editable=FALSE }

    { 1210190004;1;Field  ;
                CaptionML=ENU=Adjustment;
                SourceExpr=gBudgAdjRec."No.";
                Editable=FALSE }

    { 1210190001;1;Field  ;
                CaptionML=ENU=Adjustment Description;
                SourceExpr=gBudgAdjRec.Description;
                Visible=false;
                Editable=FALSE }

    { 1210190006;1;Field  ;
                Name=AmntToApply;
                CaptionML=ENU=Amount to Apply;
                SourceExpr=gAmntToApplyDec;
                Editable=AmntToApplyEditable;
                OnValidate=BEGIN
                             IF ((MaxAmntToApplyDec >= 0) AND (gAmntToApplyDec > MaxAmntToApplyDec)) OR
                                ((MaxAmntToApplyDec < 0) AND (gAmntToApplyDec < MaxAmntToApplyDec)) THEN
                               ERROR(Text002, MaxAmntToApplyDec);
                           END;
                            }

    { 1210190023;1;Field  ;
                CaptionML=ENU=Compress;
                OptionCaptionML=ENU=Yes,No,Tender Paragraph / Part;
                SourceExpr=CompressType;
                OnValidate=BEGIN
                             //*C-029097
                             ValidateCompressType();
                             SetEditable();
                           END;
                            }

    { 1210190008;1;Field  ;
                Name=CostObject;
                CaptionML=ENU=Cost Object;
                SourceExpr=CostObjectRec.Code;
                Editable=CostObjectEditable;
                OnValidate=VAR
                             lCostObjectRec@1210190001 : Record 349;
                           BEGIN
                             IF CostObjectRec.Code <> '' THEN BEGIN
                               lCostObjectRec.RESET;
                               lCostObjectRec.SETRANGE("Global Dimension No.",2);
                               lCostObjectRec.SETRANGE(Code,CostObjectRec.Code);
                               lCostObjectRec.FIND('-');
                             END;
                             CheckChangeDescription(CostObjectRec.Name, lCostObjectRec.Name);
                             CostObjectRec := lCostObjectRec;
                             ValidateCostObject;
                               CostObjectRecCodeOnAfterValida;
                           END;

                OnLookup=VAR
                           lCostObjectRec@1100525002 : Record 349;
                           CostObjectLookupFrm@1210190000 : Page 11012021;
                         BEGIN
                           IF NOT CostObjectEditable THEN  //*33411.n
                             EXIT;
                           lCostObjectRec := CostObjectRec;
                           CLEAR(CostObjectLookupFrm);
                           CostObjectLookupFrm.LOOKUPMODE(TRUE);
                           CostObjectLookupFrm.SETRECORD(CostObjectRec);
                           IF CostObjectLookupFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             CostObjectLookupFrm.GETRECORD(CostObjectRec);
                             CheckChangeDescription(lCostObjectRec.Name, CostObjectRec.Name);
                           END;
                           ValidateCostObject;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190010;1;Field  ;
                CaptionML=ENU=Cost Object Name;
                SourceExpr=CostObjectRec.Name;
                Visible=false;
                Editable=FALSE }

    { 1210190011;1;Field  ;
                CaptionML=ENU=Cost Type;
                OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry;
                SourceExpr=CostObjectRec."Cost Type";
                Editable=FALSE }

    { 1100525000;1;Field  ;
                Name=DescriptionNewBudgetLine;
                CaptionML=ENU=Description;
                SourceExpr=DescriptionNewBudgetLine;
                Editable=DescriptionNewBudgetLineEditab }

    { 1210190013;1;Field  ;
                Name=Element;
                CaptionML=ENU=Element;
                SourceExpr=ProjElemRec.Element;
                Editable=ElementEditable;
                OnValidate=VAR
                             lProjElemRec@1210190000 : Record 11012010;
                           BEGIN
                             IF ProjElemRec.Element <> '' THEN BEGIN
                               lProjElemRec.RESET;
                               lProjElemRec.SETRANGE("Project No.",gBudgAdjRec."Project No.");
                               lProjElemRec.SETRANGE(Element,ProjElemRec.Element);
                               lProjElemRec.FIND('-');
                               ProjElemRec := lProjElemRec;
                             END;
                           END;

                OnLookup=VAR
                           ProjElemLookupFrm@1210190000 : Page 11012029;
                         BEGIN
                           IF NOT ElementEditable THEN  //*33411.n
                             EXIT;
                           CLEAR(ProjElemLookupFrm);
                           ProjElemLookupFrm.LOOKUPMODE(TRUE);
                           ProjElemRec.SETRANGE("Project No.",gBudgAdjRec."Project No.");
                           ProjElemLookupFrm.SETTABLEVIEW(ProjElemRec);
                           IF ProjElemLookupFrm.RUNMODAL = ACTION::LookupOK THEN
                             ProjElemLookupFrm.GETRECORD(ProjElemRec);
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190015;1;Field  ;
                CaptionML=ENU=Element Description;
                SourceExpr=ProjElemRec.Description;
                Visible=false;
                Editable=FALSE }

    { 1210190016;1;Field  ;
                Name=RateField;
                CaptionML=ENU=Rate Code;
                SourceExpr=BudgetRateRec.Code;
                Editable=RateFieldEditable;
                OnValidate=BEGIN
                             CalcHours;
                               BudgetRateRecCodeOnAfterValida;
                           END;

                OnLookup=VAR
                           RateLookupFrm@1210190000 : Page 11020265;
                         BEGIN
                           IF NOT RateFieldEditable THEN  //*33411.n
                             EXIT;
                           CLEAR(RateLookupFrm);
                           RateLookupFrm.LOOKUPMODE(TRUE);

                           BudgetRateRec.RESET;
                           BudgetRateRec.SETFILTER("Project Filter", '%1', gBudgAdjRec."Project No.");
                           RateLookupFrm.SETTABLEVIEW(BudgetRateRec);
                           IF RateLookupFrm.RUNMODAL = ACTION::LookupOK THEN
                             RateLookupFrm.GETRECORD(BudgetRateRec);
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190018;1;Field  ;
                CaptionML=ENU=Rate Description;
                BlankZero=Yes;
                SourceExpr=GetBudgetRate();
                Visible=false;
                Editable=FALSE }

    { 1210190021;1;Field  ;
                Name=HoursToAddField;
                CaptionML=ENU=Hours to add;
                BlankZero=Yes;
                SourceExpr=HoursToAdd;
                Editable=FALSE }

    { 1100485000;1;Field  ;
                Name=NoOfLinesToAdd;
                CaptionML=ENU=No. of Lines to Add;
                SourceExpr=NoOfLinesToAdd;
                MinValue=1;
                Editable=NoOfLinesToAddEditable;
                OnValidate=BEGIN
                             ValidateNoOfLinesToAdd();  //*C-029097.n
                           END;
                            }

  }
  CODE
  {
    VAR
      gBudgAdjRec@1210190000 : Record 11012003;
      ProjElemRec@1210190004 : Record 11012010;
      BudgetRateRec@1210190003 : Record 11012000;
      CostObjectRec@1100525000 : Record 349;
      MarkedBudgetLine@1210190008 : Record 11012001;
      gPurchActionCde@1100525001 : Code[20];
      DescriptionNewBudgetLine@1100525002 : Text[50];
      gAmntToApplyDec@1210190001 : Decimal;
      MaxAmntToApplyDec@1210190002 : Decimal;
      HoursToAdd@1210190005 : Decimal;
      NoOfLinesToAdd@1100485000 : Integer;
      Text001@1210190006 : TextConst 'ENU=Select %1';
      Text002@1210190007 : TextConst 'ENU=Maximum Amount to Apply is %1.';
      AmntToApplyEditable@1210190009 : Boolean INDATASET;
      CompressType@1210190010 : 'Yes,No,Tender Paragraph / Part';
      Text003@1210190011 : TextConst 'ENU=No permission for %1';
      Text004@1210190012 : TextConst 'ENU="Compress ''No'' only allowed if first budget lines are marked. "';
      NoOfLinesToAddEditable@19062939 : Boolean INDATASET;
      CostObjectEditable@19039205 : Boolean INDATASET;
      DescriptionNewBudgetLineEditab@19008204 : Boolean INDATASET;
      ElementEditable@19042443 : Boolean INDATASET;
      RateFieldEditable@1210190013 : Boolean INDATASET;

    PROCEDURE SetDefaults@1210190000(lBudgAdjRec@1210190001 : Record 11012003;lAmntToApplyDec@1210190000 : Decimal;lCostObjectCde@1100525000 : Code[20];lPurchActionCde@1100525001 : Code[20]);
    BEGIN
      gBudgAdjRec := lBudgAdjRec;
      gAmntToApplyDec := lAmntToApplyDec;
      MaxAmntToApplyDec := lAmntToApplyDec;
      gPurchActionCde := lPurchActionCde;
      CostObjectRec.SETRANGE(Code,lCostObjectCde);
      CostObjectRec.SETRANGE("Global Dimension No.",2);
      IF CostObjectRec.FINDFIRST THEN;
      DescriptionNewBudgetLine := CostObjectRec.Name;
    END;

    PROCEDURE SetDefaultNewDescription@1100525001(DefaultDescription@1100525000 : Text[50]);
    BEGIN
      DescriptionNewBudgetLine := DefaultDescription;
    END;

    PROCEDURE SetMarkedBudgetLines@1210190002(VAR BudgetLine@1210190001 : Record 11012001;AmountToApplyEditable@1210190000 : Boolean);
    BEGIN
      MarkedBudgetLine.COPY(BudgetLine);
      //AmntToApplyEditable := TRUE;  //*C-029097.o
      AmntToApplyEditable := AmountToApplyEditable;  //*C-029097.n
    END;

    PROCEDURE CalcHours@1210190001();
    VAR
      lvRate@1100485000 : Decimal;
    BEGIN
      HoursToAdd := 0;
      lvRate := GetBudgetRate();
      IF lvRate <> 0 THEN
        HoursToAdd := (gAmntToApplyDec * -1)/lvRate;
    END;

    PROCEDURE GetBudgetRate@1100485000() : Decimal;
    VAR
      lvRateRec@1100485000 : Record 11012000;
      Job@1100528600 : Record 11072003;
      BudgetRateManagement@1100528601 : Codeunit 11012358;
      lvRate@1100485001 : Decimal;
      BudgetRateFoundAt@1100528602 : Text[250];
    BEGIN
      IF NOT Job.GET(gBudgAdjRec."Project No.") THEN
        Job.INIT;
      lvRate := BudgetRateManagement.GetBudgetRate(
        0, gBudgAdjRec."Project No.", '', '', Job."Global Dimension 1 Code", BudgetRateRec.Code, gBudgAdjRec."Version Date",
        BudgetRateFoundAt);

      EXIT(lvRate);
    END;

    PROCEDURE ValidateCostObject@1100525000();
    BEGIN
      BudgetRateRec.RESET;
      BudgetRateRec.SETRANGE(Code, CostObjectRec."Rate Code");
      BudgetRateRec.SETRANGE("Starting Date", 0D, gBudgAdjRec."Version Date");
      BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, gBudgAdjRec."Version Date");
      IF BudgetRateRec.FINDLAST THEN
        CalcHours;
      SetEditable();  //*C-029097.n
    END;

    PROCEDURE CheckChangeDescription@1100525002(OldDescription@1100525000 : Text[50];NewDescription@1100525001 : Text[50]);
    BEGIN
      IF  (DescriptionNewBudgetLine = OldDescription) OR (DescriptionNewBudgetLine = '') THEN
        DescriptionNewBudgetLine := NewDescription;
    END;

    PROCEDURE ValidateCompressType@1210190003();
    VAR
      ProjTenderPar@1210190000 : Record 11012263;
    BEGIN
      //*C-029097
      IF CompressType = CompressType::"Tender Paragraph / Part" THEN BEGIN
        IF NOT ProjTenderPar.READPERMISSION THEN  // Tender Par. in granule 11012390 (GWW)
          ERROR(Text003, ProjTenderPar.TABLECAPTION);
      END;

      IF CompressType <> CompressType::Yes THEN
        NoOfLinesToAdd := 1;

      IF CompressType = CompressType::No THEN BEGIN
        IF MarkedBudgetLine.ISEMPTY THEN
          ERROR(Text004);
        CostObjectRec.Code := '';
        DescriptionNewBudgetLine := '';
        ProjElemRec.Element := '';
        BudgetRateRec.Code := '';
      END;
    END;

    PROCEDURE ValidateNoOfLinesToAdd@1210190004();
    BEGIN
      //*C-029097
      IF NoOfLinesToAdd <> 1 THEN BEGIN
        IF CompressType <> CompressType::Yes THEN
          NoOfLinesToAdd := 1;  //* Must be 1 if not compressed!  Also if by Tender Par then 1 line per Tender Par.
      END;
    END;

    PROCEDURE SetEditable@1210190005();
    BEGIN
      //*C-029097
      CostObjectEditable := CompressType <> CompressType::No;
      DescriptionNewBudgetLineEditab := CompressType <> CompressType::No;
      ElementEditable := CompressType <> CompressType::No;
      RateFieldEditable :=
        (CompressType <> CompressType::No) AND (CostObjectRec."Cost Type" = CostObjectRec."Cost Type"::Labor);
      NoOfLinesToAddEditable := CompressType = CompressType::Yes;
    END;

    PROCEDURE CalcTotalAmountForCompressType@1210190006(VAR BudgetLine@1210190000 : Record 11012001;VAR RemainingAmountToApply@1210190002 : Decimal) : Decimal;
    VAR
      BudgetLine2@1210190001 : Record 11012001;
    BEGIN
      //*C-029097
      // In this function only the (flow)field "Total Amount" may be filled/calculated
      CASE CompressType OF
        CompressType::Yes:
          BEGIN
            BudgetLine.CALCFIELDS("Total Amount");
            RemainingAmountToApply := BudgetLine."Total Amount" - BudgetLine.SummaryAmount;
          END;
        CompressType::No:
          RemainingAmountToApply := BudgetLine.Amount;
        CompressType::"Tender Paragraph / Part":
          BEGIN
            RemainingAmountToApply := 0;
            BudgetLine2.SETRANGE("Project No.", BudgetLine."Project No.");
            BudgetLine2.SETRANGE(Adjustment, BudgetLine.Adjustment);
            BudgetLine2.SETRANGE("Extension Contract", BudgetLine."Extension Contract");
            BudgetLine2.SETRANGE("Tender Paragraph", BudgetLine."Tender Paragraph");
            BudgetLine2.SETRANGE("Tender Paragraph Part", BudgetLine."Tender Paragraph Part");
            BudgetLine2.SETRANGE("Budget Summary Line", FALSE);
            IF BudgetLine2.FINDSET THEN BEGIN
              REPEAT
                RemainingAmountToApply := RemainingAmountToApply + BudgetLine2.Amount;
              UNTIL BudgetLine2.NEXT =0;
            END;
          END;
      END;

      //call 30022
      IF gAmntToApplyDec > 0 THEN BEGIN
        IF RemainingAmountToApply > gAmntToApplyDec THEN
          RemainingAmountToApply := gAmntToApplyDec;
      END ELSE
        IF RemainingAmountToApply < gAmntToApplyDec THEN
          RemainingAmountToApply := gAmntToApplyDec;
      //call 30022
    END;

    LOCAL PROCEDURE CostObjectRecCodeOnAfterValida@19059534();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE BudgetRateRecCodeOnAfterValida@19063496();
    BEGIN
      IF NOT BudgetRateRec.GET(BudgetRateRec.Code) THEN
        CLEAR(BudgetRateRec);
    END;

    BEGIN
    END.
  }
}

