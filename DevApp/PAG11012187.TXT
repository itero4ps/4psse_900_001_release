OBJECT Page 11012187 Transfer Estimate to Project
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012151=rm,
                TableData 11012152=rm,
                TableData 11012153=rm,
                TableData 11012154=rm;
    CaptionML=ENU=Transfer Estimate to Project;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table11012151;
    PageType=NavigatePage;
    OnOpenPage=VAR
                 lvEstRec@1100485000 : Record 11012151;
               BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 EstRec.GET("No.");
                 ProjTo := EstRec."Project No.";
                 IF (EstRec."Estimate Type" = EstRec."Estimate Type"::Sales) AND
                    (EstRec."Copied from Cost Estimate" <> '') THEN
                 BEGIN
                   CopyFromCostEst := EstRec."Copied from Cost Estimate";
                   lvEstRec.GET(CopyFromCostEst);
                   CopyFromCostEstTxt := lvEstRec.Description;
                 END;

                 IF gvJobNo <> '' THEN
                   ProjTo := gvJobNo;

                 IF ProjRec.GET(ProjTo) THEN;

                 TransferCommentLines := TRUE; //kkleermaker, 110902, M28906
                 WizardStep := 1;
                 ShowStep(TRUE);
               END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525004;1 ;Action    ;
                      Name=Back;
                      CaptionML=ENU=< &Back;
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 WizardStep -= 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525003;1 ;Action    ;
                      Name=Next;
                      CaptionML=ENU=&Next >;
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 //CheckStatus;
                                 ShowStep(FALSE);
                                 WizardStep += 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525000;1 ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Completed;
                      OnAction=BEGIN
                                 //CheckStatus;
                                 FinishWizard;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190022;1;Group  ;
                Name=Step1;
                CaptionML=ENU=Transfer from;
                Visible=Step1Visible;
                GroupType=Group }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Transfer from;
                Style=Strong;
                StyleExpr=TRUE }

    { 1   ;2   ;Field     ;
                CaptionML=ENU=Estimate;
                SourceExpr="No.";
                Editable=FALSE }

    { 1100485012;2;Field  ;
                CaptionML=ENU=Cost Estimate;
                SourceExpr=CopyFromCostEst;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=ENU=Sub Estimate;
                SourceExpr=SubEstFilter;
                OnValidate=VAR
                             Level@1100485003 : Integer;
                             Chapter@1100485002 : Code[20];
                             Paragraph@1100485001 : Code[20];
                           BEGIN
                             ValidateSubEstimate;
                           END;

                OnLookup=BEGIN
                           LookupSubEstimate;
                         END;
                          }

    { 1100525001;2;Field  ;
                CaptionML=ENU=Part;
                SourceExpr=EstPartFilter;
                OnValidate=BEGIN
                             ValidatePart;
                           END;

                OnLookup=BEGIN
                           LookupPart;
                         END;
                          }

    { 1210190005;2;Field  ;
                CaptionML=ENU=Status;
                SourceExpr=StatusFilter;
                OnValidate=BEGIN
                             IF NOT StatusRec.GET(StatusFilter) THEN;
                           END;

                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Line Statuses",StatusRec) = ACTION::LookupOK THEN BEGIN
                              StatusFilter := StatusRec.Status;
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190013;2;Field  ;
                CaptionML=ENU=Transfer Zero Lines;
                SourceExpr=TransferZeroLines }

    { 1210190015;2;Field  ;
                CaptionML=ENU=Transfer Structure;
                SourceExpr=TransferStructure;
                OnValidate=BEGIN
                             EstSetup.GET;
                             ProjSetup.GET;
                             EstSetup.TESTFIELD("Part Format", ProjSetup."Project Element Format");
                           END;
                            }

    { 1100409000;2;Field  ;
                CaptionML=ENU=Transfer Recipe Structure;
                SourceExpr=TransferRecipeStructure }

    { 1210190002;2;Field  ;
                CaptionML=ENU=Transfer Summary;
                SourceExpr=SelectSheet;
                OnValidate=BEGIN
                             SelectSheetOnAfterValidate;
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=SheetFrom;
                CaptionML=ENU=Summary;
                SourceExpr=SheetFilter;
                OnValidate=BEGIN
                             IF NOT SelectSheet THEN
                               ERROR('');

                             IF NOT SheetRec.GET("No.",SheetFilter) THEN;
                           END;

                OnLookup=BEGIN
                           SheetRec.RESET;
                           SheetRec.SETRANGE("Estimate No.", "No.");
                           IF PAGE.RUNMODAL(PAGE::"Summary Sheet List",SheetRec) = ACTION::LookupOK THEN BEGIN
                              SheetFilter := SheetRec.Summary;
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190028;2;Field  ;
                CaptionML=ENU=Transfer Project Planning Activities;
                SourceExpr=TransferProjectPlanActCodes }

    { 1210190030;2;Field  ;
                Name=ProjectPlanningTemplateBox;
                CaptionML=ENU=Copy Project Planning Template;
                SourceExpr=ProjectPlanningTemplate;
                TableRelation="Project Planning Template" }

    { 1210190000;1;Group  ;
                Name=Step2;
                CaptionML=ENU=Transfer to;
                Visible=Step2Visible;
                GroupType=Group }

    { 1100525005;2;Field  ;
                CaptionML=ENU=Transfer to;
                Style=Strong;
                StyleExpr=TRUE }

    { 5   ;2   ;Field     ;
                CaptionML=ENU=Project;
                SourceExpr=ProjTo;
                OnValidate=BEGIN
                             IF ProjTo <> '' THEN BEGIN
                               IF NOT ProjRec.GET(ProjTo) THEN
                                 ERROR(Text000, ProjRec.TABLECAPTION, ProjTo);
                             END ELSE BEGIN
                               PlotTo := ''
                             END;
                           END;

                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Job List",ProjRec) = ACTION::LookupOK THEN BEGIN
                             ProjTo := ProjRec."No.";
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=ENU=Extension;
                SourceExpr=ExtTo;
                OnValidate=BEGIN
                             IF ExtTo <> '' THEN BEGIN
                               IF NOT ExtRec.GET(ProjTo,ExtTo) THEN
                                 ERROR(Text000, ExtRec.TABLECAPTION, ExtTo);
                             END;

                             CheckandValidate(1);
                           END;

                OnLookup=BEGIN
                           ExtRec.SETRANGE("Project No.",ProjTo);
                           IF PAGE.RUNMODAL(PAGE::"Extension List",ExtRec) = ACTION::LookupOK THEN BEGIN
                             ExtTo := ExtRec."Contract No.";
                           END;
                           CurrPage.UPDATE(TRUE);

                           CheckandValidate(1);
                         END;
                          }

    { 13  ;2   ;Field     ;
                CaptionML=ENU=Adjustment Code;
                SourceExpr=AdjTo;
                OnValidate=BEGIN
                             IF AdjTo <> '' THEN BEGIN
                               IF NOT AdjRec.GET(ProjTo,AdjTo) THEN
                                 ERROR(Text000, AdjRec.TABLECAPTION, AdjTo)
                             END;


                             CheckandValidate(2);
                           END;

                OnLookup=BEGIN
                           AdjRec.SETRANGE("Project No.",ProjTo);
                           IF PAGE.RUNMODAL(PAGE::"Budget Adjustment List",AdjRec) = ACTION::LookupOK THEN BEGIN
                             AdjTo := AdjRec."No.";
                           END;
                           CurrPage.UPDATE(TRUE);

                           CheckandValidate(2);
                         END;
                          }

    { 1210190019;2;Field  ;
                CaptionML=ENU=House Model;
                SourceExpr=HouseModelTo;
                OnValidate=BEGIN
                             ValidateHouseModel();
                           END;

                OnLookup=BEGIN
                           LookupHouseModel();
                         END;
                          }

    { 1100485003;2;Field  ;
                CaptionML=ENU=Plot;
                SourceExpr=PlotTo;
                OnValidate=BEGIN
                             IF (ProjTo = '') OR (HouseModelTo = '') THEN
                               ERROR('');

                             ValidatePlot();
                           END;

                OnLookup=BEGIN
                           LookupPlot();
                         END;
                          }

    { 1210190017;2;Field  ;
                CaptionML=ENU=Option Main Group;
                SourceExpr=MainGroupTo;
                OnValidate=BEGIN
                             ValidateMainGroup();
                           END;

                OnLookup=BEGIN
                           LookupMainGroup();
                         END;
                          }

    { 1210190018;2;Field  ;
                CaptionML=ENU=Option Group;
                SourceExpr=GroupTo;
                OnValidate=BEGIN
                             ValidateGroup();
                           END;

                OnLookup=BEGIN
                           LookupGroup();
                         END;
                          }

    { 1210190020;2;Field  ;
                CaptionML=ENU=Option Sub Group;
                SourceExpr=SubGroupTo;
                OnValidate=BEGIN
                             ValidateSubGroup();
                           END;

                OnLookup=BEGIN
                           LookupSubgroup();
                         END;
                          }

    { 1210190008;2;Field  ;
                CaptionML=ENU=Option Code;
                SourceExpr=OptTo;
                OnValidate=BEGIN
                             ValidateOption(TRUE);
                           END;

                OnLookup=BEGIN
                           LookupOption();
                         END;
                          }

    { 1210190001;1;Group  ;
                Name=Step3;
                CaptionML=ENU=Options;
                Visible=Step3Visible;
                GroupType=Group }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Enter various options;
                Style=Strong;
                StyleExpr=TRUE }

    { 1210190003;2;Field  ;
                CaptionML=ENU=Update Project Data;
                SourceExpr=UpdateProject }

    { 1100485000;2;Field  ;
                CaptionML=ENU=Copy Try-Out Successor;
                SourceExpr=CopyTryOut }

    { 1100485002;2;Field  ;
                CaptionML=ENU=Parts to Tender Paragraphs;
                SourceExpr=SelectTenderElement;
                OnValidate=BEGIN
                             IF (EstRec."Customer No." = '') AND (SelectTenderElement) THEN
                               ERROR(Text008);
                           END;
                            }

    { 1100485006;2;Field  ;
                CaptionML=ENU=Transfer Sales Price;
                SourceExpr=TransferSalesPrice }

    { 1100485008;2;Field  ;
                CaptionML=ENU=Store Sub-Estimate in Budget Lines;
                SourceExpr=StoreSubEstimate }

    { 1100485010;2;Field  ;
                CaptionML=ENU=Transfer Purchase Actions;
                SourceExpr=CopyPurchaseActions }

    { 1100529800;2;Field  ;
                CaptionML=ENU=Transfer Comment Lines;
                SourceExpr=TransferCommentLines }

  }
  CODE
  {
    VAR
      Text000@11012018 : TextConst 'ENU=%1 %2 does not exist';
      Text002@11012020 : TextConst 'ENU=Select a project';
      Text003@11012021 : TextConst 'ENU=Do you want to transfer Estimate %1 to Project %2?';
      EstSetup@1210190020 : Record 11012150;
      ProjSetup@1210190021 : Record 315;
      EstRec@1210190000 : Record 11012151;
      ProjRec@11012000 : Record 11072003;
      PlotRec@1100485003 : Record 11012500;
      ExtRec@11012001 : Record 11012004;
      AdjRec@11012002 : Record 11012003;
      HouseModelRec@1210190026 : Record 11012501;
      MainGroupRec@1210190025 : Record 11012509;
      GroupRec@1210190024 : Record 11012504;
      SubGroupRec@1210190023 : Record 11012505;
      OptRec@1210190008 : Record 11012502;
      StatusRec@1210190005 : Record 11012158;
      SheetRec@11012004 : Record 11012172;
      SheetFilter@11012005 : Code[250];
      SubEstFilter@11012007 : Code[250];
      EstPartFilter@1100525000 : Code[250];
      StatusFilter@1210190003 : Code[250];
      ProjTo@11012009 : Code[20];
      ExtTo@11012011 : Code[20];
      AdjTo@11012013 : Code[20];
      HouseModelTo@1210190022 : Code[20];
      PlotTo@1100485001 : Code[20];
      MainGroupTo@1210190017 : Code[20];
      GroupTo@1210190011 : Code[20];
      SubGroupTo@1210190010 : Code[20];
      OptTo@1210190006 : Code[20];
      TransferZeroLines@1210190018 : Boolean;
      TransferStructure@1210190019 : Boolean;
      SelectSheet@1210190001 : Boolean;
      UpdateProject@1210190002 : Boolean;
      FormatMgt@11012017 : Codeunit 11012022;
      Text004@1100525011 : TextConst 'ENU="Assigned project is divergent from value in Estimate: yes=apply assigned project; no=process table data"';
      Text005@1210190009 : TextConst 'ENU=not present';
      CopyTryOut@1100485000 : Boolean;
      Text006@1100485002 : TextConst 'ENU=Select Option';
      Text007@1100485004 : TextConst 'ENU=Not allowed option has already status ''%1''.';
      SelectTenderElement@1100485005 : Boolean;
      TransferSalesPrice@1100485007 : Boolean;
      StoreSubEstimate@1100485008 : Boolean;
      CopyPurchaseActions@1100485009 : Boolean;
      CopyFromCostEst@1100485010 : Code[20];
      CopyFromCostEstTxt@1100485011 : Text[50];
      Text008@1100485006 : TextConst 'ENU=Enter Customer for Estimate';
      DPA_IsHardFilter@1100000999 : Boolean;
      TransferCommentLines@1100529800 : Boolean;
      TransferProjectPlanActCodes@1210190031 : Boolean;
      ProjectPlanningTemplate@1210190032 : Code[20];
      Text19059755@19030938 : TextConst 'ENU=Transfer from';
      Text19010085@19043084 : TextConst 'ENU=Transfer to';
      gvJobNo@1210190131 : Code[20];
      Step1Visible@1100525005 : Boolean INDATASET;
      Step2Visible@1100525004 : Boolean INDATASET;
      Step3Visible@1100525003 : Boolean INDATASET;
      WizardStep@1100525006 : Integer;
      FinishEnable@1100525009 : Boolean INDATASET;
      BackEnable@1100525008 : Boolean INDATASET;
      NextEnable@1100525007 : Boolean INDATASET;
      TransferRecipeStructure@1100409000 : Boolean;
      "-EVRY-"@1100285001 : Integer;
      NoConfirm@1100285000 : Boolean;

    PROCEDURE ValidateSubEstimate@1100528903();
    VAR
      Level@1100528902 : Integer;
      Chapter@1100528901 : Code[20];
      Paragraph@1100528900 : Code[20];
      OldSubEstRec@1100528904 : Record 11012152;
      SubEstRec@1100528903 : Record 11072074;
    BEGIN
      //DP00381
      IF SubEstFilter <> '' THEN
        IF STRPOS(SubEstFilter, '..')=0 THEN
          IF FormatMgt.Numeric(SubEstFilter) THEN
            FormatMgt.FormatSubEstimate(SubEstFilter,Chapter,Paragraph,Level,"No.",FALSE);
      IF Converted THEN BEGIN
        IF NOT SubEstRec.GET("No.",SubEstFilter) THEN SubEstRec.INIT;
        //SubEstTxt := SubEstRec.Description;
      END ELSE BEGIN
        IF NOT OldSubEstRec.GET("No.",SubEstFilter) THEN OldSubEstRec.INIT;
        //SubEstTxt := OldSubEstRec.Description;
      END;
      CheckProjectWithEstimateFilter;
      CheckExtCntrWithEstimateFilter;  //DP00260
    END;

    PROCEDURE LookupSubEstimate@1100528901();
    VAR
      OldSubEstRec@1100528901 : Record 11012152;
      SubEstRec@1100528900 : Record 11072074;
    BEGIN
      //DP00381
      IF Converted THEN BEGIN
        SubEstRec.SETRANGE("Estimate No.", "No.");
        IF PAGE.RUNMODAL(0, SubEstRec) = ACTION::LookupOK THEN BEGIN
          SubEstFilter := SubEstRec."Sub-Estimate No.";
          //SubEstTxt := SubEstRec.Description;
        END;
      END ELSE BEGIN
        OldSubEstRec.SETRANGE("Estimate No.", "No.");
        IF PAGE.RUNMODAL(0, OldSubEstRec) = ACTION::LookupOK THEN BEGIN
          SubEstFilter := OldSubEstRec."Sub-Estimate No.";
          //SubEstTxt := OldSubEstRec.Description;
        END;
      END;
      CheckProjectWithEstimateFilter;
      CheckExtCntrWithEstimateFilter;  //DP00260
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ValidatePart@1100528904();
    VAR
      OldEstPartRec@1100528900 : Record 11012153;
      EstPartRec@1100528901 : Record 11072073;
    BEGIN
      //DP00381
      IF EstPartFilter <> '' THEN
        IF STRPOS(EstPartFilter, '..')=0 THEN
          IF FormatMgt.Numeric(EstPartFilter) THEN
            FormatMgt.FormatElem(EstPartFilter,1,'');
      IF Converted THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", "No.");
        IF SubEstFilter <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF EstPartFilter <> '' THEN
          EstPartRec.SETFILTER(Part, EstPartFilter);
        IF NOT EstPartRec.FIND('-') THEN EstPartRec.INIT;
        //EstPartTxt := EstPartRec.Description;
      END ELSE BEGIN
        OldEstPartRec.SETRANGE("Estimate No.", "No.");
        IF SubEstFilter <> '' THEN
          OldEstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF EstPartFilter <> '' THEN
          OldEstPartRec.SETFILTER(Part, EstPartFilter);
        IF NOT OldEstPartRec.FIND('-') THEN OldEstPartRec.INIT;
        //EstPartTxt := OldEstPartRec.Description;
      END;
      CheckProjectWithEstimateFilter;
      CheckExtCntrWithEstimateFilter;  //DP00260
    END;

    PROCEDURE LookupPart@1100528902();
    VAR
      OldEstPartRec@1100528901 : Record 11012153;
      EstPartRec@1100528900 : Record 11072073;
    BEGIN
      //DP00381
      IF Converted THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", "No.");
        IF SubEstFilter <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF PAGE.RUNMODAL(0, EstPartRec) = ACTION::LookupOK THEN BEGIN
          EstPartRec.CALCFIELDS("Sub-Estimate Description");
          SubEstFilter := EstPartRec."Sub-Estimate No.";
          //SubEstTxt := EstPartRec."Sub-Estimate Description";
          EstPartFilter := EstPartRec.Part;
          //EstPartTxt := EstPartRec.Description;
        END;
      END ELSE BEGIN
        OldEstPartRec.SETRANGE("Estimate No.", "No.");
        IF SubEstFilter <> '' THEN
          OldEstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF PAGE.RUNMODAL(0, OldEstPartRec) = ACTION::LookupOK THEN BEGIN
          OldEstPartRec.CALCFIELDS("Sub-Estimate Description");
          SubEstFilter := OldEstPartRec."Sub-Estimate No.";
          //SubEstTxt := OldEstPartRec."Sub-Estimate Description";
          EstPartFilter := OldEstPartRec.Part;
          //EstPartTxt := OldEstPartRec.Description;
        END;
      END;
      CheckProjectWithEstimateFilter;
      CheckExtCntrWithEstimateFilter;  //DP00260
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE LookupHouseModel@1210190010();
    BEGIN
      WITH HouseModelRec DO BEGIN
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjTo;
        Model := HouseModelTo;
        IF ProjTo <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"House Models by Project List", HouseModelRec) = ACTION::LookupOK THEN BEGIN
            HouseModelTo := Model;
            ValidateOption(FALSE);
          END;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"House Model List", HouseModelRec) = ACTION::LookupOK THEN BEGIN
            HouseModelTo := Model;
            ValidateOption(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE LookupMainGroup@1210190008();
    BEGIN
      WITH MainGroupRec DO BEGIN
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjTo;
        Code := MainGroupTo;
        IF ProjTo <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Main Group List", MainGroupRec) = ACTION::LookupOK THEN BEGIN
            MainGroupTo := Code;
            ValidateOption(FALSE);
          END;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Main Group List", MainGroupRec) = ACTION::LookupOK THEN BEGIN
            MainGroupTo := Code;
            ValidateOption(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE LookupGroup@1210190007();
    BEGIN
      WITH GroupRec DO BEGIN
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjTo;
        Code := GroupTo;
        IF ProjTo <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Groups", GroupRec) = ACTION::LookupOK THEN BEGIN
            GroupTo := Code;
            ValidateOption(FALSE);
          END;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Groups", GroupRec) = ACTION::LookupOK THEN BEGIN
            GroupTo := Code;
            ValidateOption(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE LookupSubgroup@1210190006();
    BEGIN
      WITH SubGroupRec DO BEGIN
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjTo;
        Code := SubGroupTo;
        IF ProjTo <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Sub Groups", SubGroupRec) = ACTION::LookupOK THEN BEGIN
            SubGroupTo := Code;
            ValidateOption(FALSE);
          END;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Sub Groups", SubGroupRec) = ACTION::LookupOK THEN BEGIN
            SubGroupTo := Code;
            ValidateOption(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE LookupOption@1210190005();
    BEGIN
      WITH OptRec DO BEGIN
        FILTERGROUP(9);
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        SETRANGE("Plot No.", PlotTo);
        FILTERGROUP(0);
        "Project No." := ProjTo;
        "Plot No." := PlotTo;
        "House Model" := HouseModelTo;
        "Main Group" := MainGroupTo;
        Group := GroupTo;
        "Sub Group" := SubGroupTo;
        Option := OptTo;
        IF PAGE.RUNMODAL(PAGE::"Option List",OptRec) = ACTION::LookupOK THEN BEGIN
          HouseModelTo := "House Model";
          MainGroupTo := "Main Group";
          GroupTo := Group;
          SubGroupTo := "Sub Group";
          OptTo := Option;
          ValidateHouseModel();
          ValidateMainGroup();
          ValidateGroup();
          ValidateSubGroup();
          ValidateOption(FALSE);
        END;
      END;
    END;

    PROCEDURE LookupPlot@1100485001();
    BEGIN
      WITH PlotRec DO BEGIN
        SETRANGE("Project No.", ProjTo);
        SETRANGE("House Model", HouseModelTo);
        "Project No." := ProjTo;
        "Plot No." := PlotTo;
        IF PAGE.RUNMODAL(PAGE::"Plot Number List", PlotRec) = ACTION::LookupOK THEN BEGIN
          PlotTo := "Plot No.";
          ValidateOption(FALSE);
        END;
      END;
    END;

    PROCEDURE ValidatePlot@1100485000();
    BEGIN
      IF PlotTo <> '' THEN BEGIN
        PlotRec.GET(ProjTo, PlotTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateHouseModel@1210190002();
    BEGIN
      IF HouseModelTo <> '' THEN BEGIN
        HouseModelRec.GET(ProjTo, HouseModelTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateMainGroup@1210190003();
    BEGIN
      IF MainGroupTo <> '' THEN BEGIN
        MainGroupRec.GET(ProjTo, MainGroupTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateGroup@1210190004();
    BEGIN
      IF GroupTo <> '' THEN BEGIN
        GroupRec.GET(ProjTo, GroupTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateSubGroup@1210190009();
    BEGIN
      IF SubGroupTo <> '' THEN BEGIN
        SubGroupRec.GET(ProjTo, SubGroupTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateOption@1210190001(IModeError@1210190000 : Boolean);
    BEGIN
      IF OptTo <> '' THEN BEGIN
        IF OptRec.GET(ProjTo, PlotTo, HouseModelTo, MainGroupTo, GroupTo, SubGroupTo, OptTo) THEN BEGIN
          IF OptRec.Status >= OptRec.Status::Order THEN
            ERROR(Text007, OptRec.Status);
        END ELSE BEGIN
          IF IModeError THEN BEGIN
            OptRec."Project No." := ProjTo;
            OptRec."House Model" := HouseModelTo;
            OptRec."Main Group" := MainGroupTo;
            OptRec.Group := GroupTo;
            OptRec."Sub Group" := SubGroupTo;
            OptRec.Option := OptTo;
            OptRec.FIELDERROR(Option, Text005);
          END;
        END;
      END;
      CheckandValidate(3);
    END;

    PROCEDURE CheckandValidate@1(Type@11012000 : Integer);
    BEGIN
      IF Type = 1 THEN BEGIN
        IF ExtTo <> '' THEN BEGIN
          AdjTo := '';
          PlotTo := '';
          HouseModelTo := '';
          MainGroupTo := '';
          GroupTo := '';
          SubGroupTo := '';
          OptTo := '';
        END;
      END;

      IF Type = 2 THEN BEGIN
        IF AdjTo <> '' THEN BEGIN
          ExtTo := '';
          PlotTo := '';
          HouseModelTo := '';
          MainGroupTo := '';
          GroupTo := '';
          SubGroupTo := '';
          OptTo := '';
        END;
      END;

      IF Type = 3 THEN BEGIN
        IF OptTo <> '' THEN BEGIN
          ExtTo := '';
          AdjTo := '';
        END;
      END;
    END;

    LOCAL PROCEDURE SelectSheetOnAfterValidate@19049695();
    BEGIN
      IF SelectSheet = FALSE THEN BEGIN
        SheetFilter := '';
      END;
    END;

    LOCAL PROCEDURE SheetFilterOnBeforeInput@19025462();
    BEGIN
      //CurrPage.SheetFrom.UPDATEEDITABLE(SelectSheet = TRUE);
    END;

    LOCAL PROCEDURE PlotToOnBeforeInput@19005405();
    BEGIN
      //CurrPage.PlotTo.UPDATEEDITABLE((ProjTo <> '') AND (HouseModelTo <> ''));
    END;

    PROCEDURE SetSelection@1210190000(lvJobNo@1210190000 : Code[20]);
    BEGIN
      gvJobNo := lvJobNo;
    END;

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            Step1Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;
            END;
          END;
        2:
          BEGIN
            Step2Visible := Visible;
            IF Visible THEN BEGIN
              NextEnable := TRUE;
              BackEnable := TRUE;
              FinishEnable := FALSE;
            END;
          END;
        3:
          BEGIN
            Step3Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
            END;
          END;
      END;
    END;

    PROCEDURE FinishWizard@1100525001();
    VAR
      TransferCu@1100528901 : Codeunit 11012152;
      TransferMgt@1100528900 : Codeunit 11012228;
    BEGIN
      IF ProjTo = '' THEN
        IF OptTo = '' THEN
          ERROR(Text002);

      IF PlotTo <> '' THEN BEGIN
        IF ProjTo = '' THEN
          ERROR(Text002);
        IF OptTo = '' THEN
          ERROR(Text006);
      END;

      ValidateOption(TRUE);

      //>> LAHE 121203
      //IF CONFIRM(Text003,FALSE,"No.",ProjTo) THEN BEGIN
      IF NOT NoConfirm THEN
        IF NOT CONFIRM(Text003,FALSE,"No.",ProjTo) THEN
          EXIT;
      BEGIN
      //<< LAHE 121203
        //db.sn, 22-03-13: C005871
        UpdateLinkEstimateProject;
        //db.en, 22-03-13: C005871
        COMMIT;
        IF Converted THEN BEGIN  //DP00381
          TransferMgt.SetTransferOptions(
            TransferZeroLines,TransferStructure,SelectTenderElement,
            TransferSalesPrice,StoreSubEstimate,CopyPurchaseActions, TransferCommentLines, 0,0,CopyTryOut,0,
            SelectSheet,UpdateProject,FALSE); //mg.c, 05-01-12: M31753
          TransferMgt.SetEstimateOptions("No.",SubEstFilter,EstPartFilter,SheetFilter,StatusFilter);
          TransferMgt.SetProjectOptions(
            ProjTo,ExtTo,AdjTo,PlotTo,HouseModelTo,MainGroupTo,GroupTo,SubGroupTo,OptTo);
          TransferMgt.SetProjectPlanningOptions(TransferProjectPlanActCodes,ProjectPlanningTemplate);
          TransferMgt.SetSaveStructureRecipe(TransferRecipeStructure);  //db, 23-09-14: C016015
          TransferMgt.Start;
        END ELSE BEGIN
          TransferCu.SetTransferOptions(
            TransferZeroLines,TransferStructure,SelectTenderElement,
            TransferSalesPrice,StoreSubEstimate,CopyPurchaseActions, TransferCommentLines, 0,0,CopyTryOut,0,
            SelectSheet,UpdateProject,FALSE); //mg.c, 05-01-12: M31753
          TransferCu.SetEstimateOptions("No.",SubEstFilter,EstPartFilter,SheetFilter,StatusFilter);
          TransferCu.SetProjectOptions(
            ProjTo,ExtTo,AdjTo,PlotTo,HouseModelTo,MainGroupTo,GroupTo,SubGroupTo,OptTo);
          TransferCu.SetProjectPlanningOptions(TransferProjectPlanActCodes,ProjectPlanningTemplate);
          TransferCu.Start;
        END;
      END;
    END;

    PROCEDURE CheckProjectWithEstimateFilter@1100525003();
    VAR
      SubEstRec@1100525000 : Record 11012152;
      EstPartRec@1100525001 : Record 11012153;
      ProjFound@1100525002 : Boolean;
    BEGIN
      //db, 17-05-13: C005871
      IF (SubEstFilter <> '') AND (EstPartFilter <> '') THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", "No.");
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        EstPartRec.SETFILTER(Part, EstPartFilter);
        IF EstPartRec.FINDSET THEN BEGIN
          REPEAT
            IF EstPartRec."Project No." <> '' THEN BEGIN
              ProjTo := EstPartRec."Project No.";
              ProjFound := TRUE;
            END;
          UNTIL (EstPartRec.NEXT = 0) OR (ProjFound = TRUE);
        END;
      END;
      IF (SubEstFilter <> '') AND (ProjFound = FALSE) THEN BEGIN
        SubEstRec.SETRANGE("Estimate No.", "No.");
        SubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            IF SubEstRec."Project No." <> '' THEN BEGIN
              ProjTo := SubEstRec."Project No.";
              ProjFound := TRUE;
            END;
          UNTIL (SubEstRec.NEXT = 0) OR (ProjFound = TRUE);
        END;
      END;
      IF (ProjFound = FALSE) THEN BEGIN
        EstRec.GET("No.");
        ProjTo := EstRec."Project No.";
      END;
      IF NOT ProjRec.GET(ProjTo) THEN ProjRec.INIT;
    END;

    PROCEDURE CheckExtCntrWithEstimateFilter@1100528900();
    VAR
      SubEstRec@1100525000 : Record 11072074;
      EstPartRec@1100525001 : Record 11072073;
      ExtFound@1100525002 : Boolean;
    BEGIN
      //DP00260
      IF (SubEstFilter <> '') AND (EstPartFilter <> '') THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", "No.");
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        EstPartRec.SETFILTER(Part, EstPartFilter);
        IF EstPartRec.FINDSET THEN BEGIN
          REPEAT
            IF EstPartRec."Extension Contract" <> '' THEN BEGIN
              ExtTo := EstPartRec."Extension Contract";
              ExtFound := TRUE;
            END;
          UNTIL (EstPartRec.NEXT = 0) OR (ExtFound = TRUE);
        END;
      END;
      IF (SubEstFilter <> '') AND (ExtFound = FALSE) THEN BEGIN
        SubEstRec.SETRANGE("Estimate No.", "No.");
        SubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            IF SubEstRec."Extension Contract" <> '' THEN BEGIN
              ExtTo := SubEstRec."Extension Contract";
              ExtFound := TRUE;
            END;
          UNTIL (SubEstRec.NEXT = 0) OR (ExtFound = TRUE);
        END;
      END;
      IF (ExtFound = FALSE) THEN BEGIN
        EstRec.GET("No.");
        ExtTo := EstRec."Extension Contract";
      END;
      IF NOT ExtRec.GET(ProjTo,ExtTo) THEN ExtRec.INIT;
      //ExtToTxt := ExtRec.Description;
    END;

    PROCEDURE UpdateLinkEstimateProject@1100525000();
    VAR
      SubEstRec@1100525003 : Record 11012152;
      EstPartRec@1100525002 : Record 11012153;
      EstLineRec@1100525001 : Record 11012154;
      AskUpdate@1100525000 : Boolean;
    BEGIN
      //db, 17-05-13: C005871
      EstRec.GET("No.");

      SubEstRec.SETRANGE("Estimate No.", EstRec."No.");
      SubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
      SubEstRec.SETFILTER("Project No.", '<>%1&<>%2', ProjTo, '');
      IF SubEstRec.FINDFIRST THEN
        AskUpdate := TRUE;

      IF AskUpdate = FALSE THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", EstRec."No.");
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        EstPartRec.SETFILTER(Part, EstPartFilter);
        EstPartRec.SETFILTER("Project No.", '<>%1&<>%2', ProjTo, '');
        IF EstPartRec.FINDFIRST THEN
          AskUpdate := TRUE;
      END;

      IF AskUpdate = FALSE THEN BEGIN
        EstLineRec.SETRANGE("Estimate No.", EstRec."No.");
        EstLineRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        EstLineRec.SETFILTER(Part, EstPartFilter);
        EstLineRec.SETFILTER("Project No.", '<>%1&<>%2', ProjTo, '');
        IF EstLineRec.FINDFIRST THEN
          AskUpdate := TRUE;
      END;

      IF AskUpdate THEN
        IF CONFIRM(Text004) = FALSE THEN
         EXIT;

      IF (SubEstFilter = '') AND (EstPartFilter = '') THEN BEGIN
        //db, 21-05-13: assumed to be export of complete estimate
        EstRec."Project No." := ProjTo;  //db, 29-10-08: M13171 (skip validate project)
        EstRec.MODIFY;
      END;

      SubEstRec.RESET;
      SubEstRec.SETRANGE("Estimate No.", EstRec."No.");
      SubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
      SubEstRec.MODIFYALL("Project No.", ProjTo);

      EstPartRec.RESET;
      EstPartRec.SETRANGE("Estimate No.", EstRec."No.");
      EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
      EstPartRec.SETFILTER(Part, EstPartFilter);
      EstPartRec.MODIFYALL("Project No.", ProjTo);

      EstLineRec.RESET;
      EstLineRec.SETRANGE("Estimate No.", EstRec."No.");
      EstLineRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
      EstLineRec.SETFILTER(Part, EstPartFilter);
      EstLineRec.MODIFYALL("Project No.", ProjTo);
    END;

    LOCAL PROCEDURE "---EVRY---"@1100290000();
    BEGIN
    END;

    PROCEDURE SetDefaultValues@1100290001(_estimateNo@1100285000 : Code[20];_projectNo@1100285001 : Code[20]);
    BEGIN
      // LAHE 121203
      NoConfirm := TRUE;
      //Step 1
      CopyFromCostEst := _estimateNo;
      SubEstFilter := '';
      EstPartFilter := '';
      StatusFilter := '';
      SheetFilter := ''; // Summary
      TransferZeroLines := FALSE;
      TransferStructure := FALSE;
      SelectSheet := FALSE;
      //Step 2
      TransferProjectPlanActCodes := FALSE;
      ProjectPlanningTemplate := '';
      ProjTo := _projectNo;
      ExtTo := '';
      AdjTo := '';
      HouseModelTo := '';
      PlotTo := '';
      MainGroupTo := '';
      GroupTo := '';
      SubGroupTo := '';
      OptTo := '';
      //Step 3
      UpdateProject := FALSE;
      CopyTryOut := FALSE;
      SelectTenderElement := FALSE;
      TransferSalesPrice := FALSE;
      StoreSubEstimate := FALSE;
      CopyPurchaseActions := FALSE;
      TransferCommentLines := TRUE;
    END;

    BEGIN
    END.
  }
}

