OBJECT Page 11012210 Copy Estimate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012761=rd;
    CaptionML=ENU=Copy Estimate;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=StandardDialog;
    OnOpenPage=BEGIN
                 EstToTxtEditable := TRUE;

                 TransferCommentLines := TRUE; // **4PS MVOS M28906
                 CopySumSheet := CopySumSheet::EstSource; //mg, 27-03-12: M28844

                 EstSetup.GET;
                 InitSalesFromCost := EstSetup."Init Sales From Cost";  //db, 03-02-15: C020959
                 RateGroupEditable := (EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group");  //db, 08-07-14: C012973
               END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                   END;

    OnQueryClosePage=BEGIN
                       CloseActionOK := CloseAction IN [ACTION::OK,ACTION::LookupOK];
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525000;1;Group  ;
                CaptionML=ENU=Copy from;
                GroupType=Group }

    { 1   ;2   ;Field     ;
                CaptionML=ENU=Estimate;
                NotBlank=Yes;
                SourceExpr=EstFrom;
                OnValidate=BEGIN
                             //dbeekman.sn: 28837
                             EstRec."No." := EstFrom;
                             EstRec.DPA_FindRecWithDPAFilterAppld;
                             //dbeekman.en: 28837

                             EstFromTxt := EstRec.Description;
                             EstToTxt := EstRec.Description;

                             //IF EstOld <> EstFrom THEN //C019552.o
                             FillDefaults(EstFrom);  //db, 20-09-10: M22574
                           END;

                OnLookup=BEGIN
                           EstRec.RESET;
                           EstRec.SETRANGE(Converted, EstFromConverted);  //db, 19-05-14: T004749
                           IF PAGE.RUNMODAL(PAGE::"Estimate List", EstRec) = ACTION::LookupOK THEN BEGIN
                              EstFrom := EstRec."No.";
                              EstFromTxt := EstRec.Description;
                              EstToTxt := EstRec.Description;
                              //IF EstOld <> EstFrom THEN //C019552.o
                              FillDefaults(EstFrom);  //db, 20-09-10: M22574
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 7   ;2   ;Field     ;
                CaptionML=ENU=Estimate Description;
                SourceExpr=EstFromTxt;
                Editable=FALSE }

    { 1210190017;2;Field  ;
                CaptionML=ENU=Estimate Part;
                SourceExpr=SubEstFrom;
                OnValidate=VAR
                             Level@1210190002 : Integer;
                             Chapter@1210190001 : Code[20];
                             Paragraph@1100485001 : Code[20];
                             SubEstRecOLD@1100528901 : Record 11012152;
                             SubEstRecNEW@1100528900 : Record 11072074;
                           BEGIN
                             IF SubEstFrom <> '' THEN
                               IF STRPOS(SubEstFrom, '..')=0 THEN  //db, 05-07-11
                                 IF FormatMgt.Numeric(SubEstFrom) THEN
                                   FormatMgt.FormatSubEstimate(SubEstFrom,Chapter,Paragraph,Level,EstFrom,FALSE);

                             IF EstRec.Converted THEN BEGIN  //DP00381
                               IF NOT SubEstRecNEW.GET(EstFrom,SubEstFrom) THEN SubEstRecNEW.INIT;
                               SubEstFromTxt := SubEstRecNEW.Description;
                             END ELSE BEGIN
                               IF NOT SubEstRecOLD.GET(EstFrom,SubEstFrom) THEN SubEstRecOLD.INIT;
                               SubEstFromTxt := SubEstRecOLD.Description;
                             END;
                           END;

                OnLookup=VAR
                           SubEstRecOLD@1100528902 : Record 11012152;
                           SubEstRecNEW@1100528901 : Record 11072074;
                         BEGIN
                           IF EstRec.Converted THEN BEGIN  //DP00381
                             SubEstRecNEW.SETRANGE("Estimate No.", EstFrom);
                             IF PAGE.RUNMODAL(PAGE::"Sub-Estimate List NEW",SubEstRecNEW) = ACTION::LookupOK THEN BEGIN
                               SubEstFrom := SubEstRecNEW."Sub-Estimate No.";
                               SubEstFromTxt := SubEstRecNEW.Description;
                             END;
                           END ELSE BEGIN
                             SubEstRecOLD.SETRANGE("Estimate No.", EstFrom);
                             IF PAGE.RUNMODAL(PAGE::"Sub-Estimate List",SubEstRecOLD) = ACTION::LookupOK THEN BEGIN
                               SubEstFrom := SubEstRecOLD."Sub-Estimate No.";
                               SubEstFromTxt := SubEstRecOLD.Description;
                             END;
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190021;2;Field  ;
                CaptionML=ENU=Estimate Part Description;
                SourceExpr=SubEstFromTxt;
                Editable=FALSE }

    { 1210190000;2;Field  ;
                CaptionML=ENU=Estimate Type;
                OptionCaptionML=ENU=Cost,Sales;
                SourceExpr=EstTypeFromOpt;
                Visible=EstTypeEditable;
                Editable=FALSE }

    { 1210190009;2;Field  ;
                CaptionML=ENU=Norm Group;
                SourceExpr=NormGroupFrom;
                Editable=FALSE }

    { 1100525007;2;Field  ;
                CaptionML=ENU=Norm Group Description;
                SourceExpr=NormGroupFromTxt;
                Editable=FALSE }

    { 1100525005;2;Field  ;
                CaptionML=ENU=Norm Group (Sales);
                SourceExpr=NormGroupSalesFrom;
                Visible=NormGroupSalesEditable;
                Editable=FALSE }

    { 1100525004;2;Field  ;
                CaptionML=ENU=Norm Group (Sales)  Description;
                SourceExpr=NormGroupSalesFromTxt;
                Visible=NormGroupSalesEditable;
                Editable=FALSE }

    { 1210190011;2;Field  ;
                CaptionML=ENU=Rate Group;
                SourceExpr=RateGroupFrom;
                Editable=FALSE }

    { 1100525003;2;Field  ;
                CaptionML=ENU=Rate Group Description;
                SourceExpr=RateGroupFromTxt;
                Editable=FALSE }

    { 1100485008;2;Field  ;
                CaptionML=ENU=Copy Summary Sheet from;
                OptionCaptionML=ENU=Original Estimate,Estimate Source,Not applicable;
                SourceExpr=CopySumSheet;
                OnValidate=BEGIN
                             //db, 27-05-14: T004757
                             IF CopySumSheet = CopySumSheet::Empty THEN
                               GenerateSummarySubEstimate := FALSE;
                           END;
                            }

    { 1100525010;2;Field  ;
                CaptionML=ENU=Generate Summary Sub Estimate;
                SourceExpr=GenerateSummarySubEstimate }

    { 1100525002;1;Group  ;
                CaptionML=ENU=Copy to;
                GroupType=Group }

    { 1100485006;2;Field  ;
                CaptionML=ENU=Select Existing Estimate;
                SourceExpr=SelectExistingEstimate;
                OnValidate=BEGIN
                             SelectExistingEstimateOnAfterV;
                           END;
                            }

    { 4   ;2   ;Field     ;
                CaptionML=ENU=Estimate;
                NotBlank=Yes;
                SourceExpr=EstTo;
                OnValidate=BEGIN
                             //dbeekman.sn: 28837
                             EstToTxt := EstFromTxt;
                             IF SelectExistingEstimate THEN BEGIN
                               EstRec."No." := EstTo;
                               EstRec.DPA_FindRecWithDPAFilterAppld;
                               EstToTxt := EstRec.Description
                             END ELSE
                               IF EstRec.GET(EstTo) THEN
                                 EstRec.INSERT; //show error
                             //dbeekman.en: 28837

                             IF EstTo <>'' THEN BEGIN
                               NoSeriesMgt.TestManual(EstNos);  //db, 26-08-08
                             //"No. Series" := '';  //db, 26-08-08: No. Series of new (not old) estimate may be empty.
                             END;

                             EstToTxtSetEditable;
                           END;

                OnLookup=BEGIN
                           LookupEstTo;  //db, 09-05-08: M11303
                           EstToTxtSetEditable;
                         END;
                          }

    { 8   ;2   ;Field     ;
                CaptionML=ENU=Estimate Description;
                SourceExpr=EstToTxt;
                Editable=EstToTxtEditable }

    { 1210190001;2;Field  ;
                CaptionML=ENU=Estimate Type;
                OptionCaptionML=ENU=Cost,Sales;
                SourceExpr=EstTypeToOpt;
                Visible=EstTypeEditable;
                Editable=EstTypeEditable;
                OnValidate=VAR
                             lvRateGrp@1100485000 : Text[30];
                           BEGIN
                             IF NOT CustRec.GET(CustTo) THEN CustRec.INIT;
                             IF EstTypeToOpt = EstTypeToOpt::Cost THEN BEGIN
                               lvRateGrp := CustRec."Rate Group (Nett)";
                               DiscRef1To := EstRec."Purch Discount Term Group 1";
                               DiscRef2To := EstRec."Purch Discount Term Group 2";
                             END;
                             IF EstTypeToOpt = EstTypeToOpt::Sales THEN BEGIN
                               lvRateGrp := CustRec."Rate Group (Gross)";
                               DiscRef1To := EstRec."Sales Discount Term Group 1";
                               DiscRef2To := EstRec."Sales Discount Term Group 2";
                             END;
                             IF RateGroupRec.GET(lvRateGrp) THEN BEGIN
                               RateGroupTo := RateGroupRec."No.";
                               RateGroupToTxt := RateGroupRec.Description;
                             END;
                             IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, DiscRef1To) THEN DiscRefRec.INIT;
                             DiscRef1ToTxt := DiscRefRec.Description;
                             IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, DiscRef2To) THEN DiscRefRec.INIT;
                             DiscRef2ToTxt := DiscRefRec.Description;
                               EstTypeToOptOnAfterValidate;
                           END;
                            }

    { 1210190005;2;Field  ;
                CaptionML=ENU=Customer No.;
                SourceExpr=CustTo;
                TableRelation=Customer.No.;
                OnValidate=VAR
                             lvRateGrp@1100485001 : Text[30];
                           BEGIN
                             IF NOT CustRec.GET(CustTo) THEN BEGIN
                               CustTo := '';
                               CustToTxt := '';
                             END ELSE BEGIN
                               CustToTxt := CustRec.Name;
                               IF EstTypeToOpt = EstTypeToOpt::Cost THEN
                                 lvRateGrp := CustRec."Rate Group (Nett)";
                               IF EstTypeToOpt = EstTypeToOpt::Sales THEN
                                 lvRateGrp := CustRec."Rate Group (Gross)";
                               IF RateGroupRec.GET(lvRateGrp) THEN BEGIN
                                 RateGroupTo := RateGroupRec."No.";
                                 RateGroupToTxt := RateGroupRec.Description;
                               END;
                             END;
                             CheckCustContact(0);
                           END;
                            }

    { 1210190006;2;Field  ;
                CaptionML=ENU=Customer Name;
                SourceExpr=CustToTxt;
                Editable=FALSE }

    { 1100485011;2;Field  ;
                CaptionML=ENU=Contact;
                SourceExpr=ContactTo;
                TableRelation=Contact.No.;
                OnValidate=BEGIN
                             IF NOT ContactRec.GET(ContactTo) THEN BEGIN
                               ContactTo := '';
                               ContactToTxt := '';
                             END ELSE BEGIN
                               ContactToTxt := ContactRec.Name;
                             END;
                             CheckCustContact(1);
                           END;
                            }

    { 1100485010;2;Field  ;
                CaptionML=ENU=Contact Name;
                SourceExpr=ContactToTxt;
                Editable=FALSE }

    { 1100485014;2;Field  ;
                CaptionML=ENU=Contact Person;
                SourceExpr=ContactPersonTo;
                TableRelation=Contact.No.;
                OnValidate=BEGIN
                             IF NOT ContactRec.GET(ContactPersonTo) THEN BEGIN
                               ContactPersonTo := '';
                               ContactPersonToTxt := '';
                             END ELSE BEGIN
                               ContactPersonToTxt := ContactRec.Name;
                             END;
                           END;

                OnLookup=BEGIN
                           ContactRec.RESET;
                           ContactRec.SETRANGE("Company No.", ContactTo);
                           ContactRec.SETRANGE(Type, ContactRec.Type::Person);
                           PAGE.RUNMODAL(PAGE::"Contact List", ContactRec);
                         END;
                          }

    { 1100485013;2;Field  ;
                CaptionML=ENU=Contact Person Name;
                SourceExpr=ContactPersonToTxt;
                Editable=FALSE }

    { 1210190016;2;Field  ;
                CaptionML=ENU=Norm Group;
                SourceExpr=NormGroupTo;
                TableRelation="Norm Group".Code;
                OnValidate=BEGIN
                             IF NOT NormGroupRec.GET(NormGroupTo) THEN BEGIN
                               NormGroupTo := NormGroupFrom;
                               NormGroupToTxt := NormGroupFromTxt;
                             END ELSE BEGIN
                               NormGroupToTxt := COPYSTR(NormGroupRec.Description, 1, 50);
                             END;
                           END;
                            }

    { 1210190019;2;Field  ;
                CaptionML=ENU=Norm Group Description;
                SourceExpr=NormGroupToTxt;
                Editable=FALSE }

    { 1100525009;2;Field  ;
                CaptionML=ENU=Norm Group (Sales);
                SourceExpr=NormGroupSalesTo;
                TableRelation="Norm Group".Code;
                Visible=NormGroupSalesEditable;
                Editable=NormGroupSalesEditable;
                OnValidate=BEGIN
                             //DP00381
                             IF NOT NormGroupRec.GET(NormGroupSalesTo) THEN BEGIN
                               NormGroupSalesTo := NormGroupSalesFrom;
                               NormGroupSalesToTxt := NormGroupSalesFromTxt;
                             END ELSE BEGIN
                               NormGroupSalesToTxt := COPYSTR(NormGroupRec.Description, 1, 50);
                             END;
                           END;
                            }

    { 1100525008;2;Field  ;
                CaptionML=ENU=Norm Group (Sales) Description;
                SourceExpr=NormGroupSalesToTxt;
                Visible=NormGroupSalesEditable;
                Editable=FALSE }

    { 1210190018;2;Field  ;
                CaptionML=ENU=Rate Group;
                SourceExpr=RateGroupTo;
                TableRelation="Rate Group".No.;
                Editable=RateGroupEditable;
                OnValidate=BEGIN
                             IF NOT RateGroupRec.GET(RateGroupTo) THEN BEGIN
                               RateGroupTo := RateGroupFrom;
                               RateGroupToTxt := RateGroupFromTxt;
                             END ELSE BEGIN
                               RateGroupToTxt := RateGroupRec.Description;
                             END;
                           END;
                            }

    { 1210190020;2;Field  ;
                CaptionML=ENU=Rate Group Description;
                SourceExpr=RateGroupToTxt;
                Editable=FALSE }

    { 1100485004;2;Field  ;
                CaptionML=ENU=Reference Date Item Prices;
                SourceExpr=RefDateTo }

    { 1100485017;2;Field  ;
                CaptionML=ENU=Discount Term Group (Customer);
                SourceExpr=DiscRef1To;
                TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer));
                OnValidate=BEGIN
                             IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, DiscRef1To) THEN BEGIN
                               DiscRef1To := DiscRef1From;
                               DiscRef1ToTxt := DiscRef1FromTxt;
                             END ELSE BEGIN
                               DiscRef1ToTxt := DiscRefRec.Description;
                             END;
                           END;
                            }

    { 1100485018;2;Field  ;
                CaptionML=ENU=Discount Term Group Description (Customer);
                SourceExpr=DiscRef1ToTxt;
                Editable=FALSE }

    { 1100485021;2;Field  ;
                CaptionML=ENU=Discount Term Group (Job);
                SourceExpr=DiscRef2To;
                TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job));
                OnValidate=BEGIN
                             IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, DiscRef2To) THEN BEGIN
                               DiscRef2To := DiscRef2From;
                               DiscRef2ToTxt := DiscRef2FromTxt;
                             END ELSE BEGIN
                               DiscRef2ToTxt := DiscRefRec.Description;
                             END;
                           END;
                            }

    { 1100485022;2;Field  ;
                CaptionML=ENU=Discount Term Group Description (Job);
                SourceExpr=DiscRef2ToTxt;
                Editable=FALSE }

    { 1100409004;2;Field  ;
                CaptionML=ENU=Sales Discount Term Group (Customer);
                SourceExpr=SalesDiscRef1To;
                TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer));
                Visible=SalesDiscRefEditable;
                Editable=SalesDiscRefEditable;
                OnValidate=BEGIN
                             IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, SalesDiscRef1To) THEN BEGIN
                               SalesDiscRef1To := SalesDiscRef1From;
                               IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, SalesDiscRef1To) THEN DiscRefRec.INIT;
                             END;
                             SalesDiscRef1ToTxt := DiscRefRec.Description;
                           END;
                            }

    { 1100409003;2;Field  ;
                CaptionML=ENU=Sales Discount Term Group Description (Customer);
                SourceExpr=SalesDiscRef1ToTxt;
                Importance=Additional;
                Visible=SalesDiscRefEditable;
                Editable=FALSE }

    { 1100409002;2;Field  ;
                CaptionML=ENU=Sales Discount Term Group (Job);
                SourceExpr=SalesDiscRef2To;
                TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job));
                Visible=SalesDiscRefEditable;
                Editable=SalesDiscRefEditable;
                OnValidate=BEGIN
                             IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, SalesDiscRef2To) THEN BEGIN
                               SalesDiscRef2To := SalesDiscRef2From;
                               IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, SalesDiscRef1To) THEN DiscRefRec.INIT;
                             END;
                             SalesDiscRef2ToTxt := DiscRefRec.Description;
                           END;
                            }

    { 1100409001;2;Field  ;
                CaptionML=ENU=Sales Discount Term Group Description (Job);
                SourceExpr=SalesDiscRef2ToTxt;
                Importance=Additional;
                Visible=SalesDiscRefEditable;
                Editable=FALSE }

    { 1100525006;1;Group  ;
                CaptionML=ENU=Apply;
                GroupType=Group }

    { 1100485000;2;Field  ;
                CaptionML=ENU=Copy Try-Out Successor;
                SourceExpr=CopyTryOut }

    { 1100485002;2;Field  ;
                CaptionML=ENU=Skip Lines;
                SourceExpr=SkipLines }

    { 1100525001;2;Field  ;
                CaptionML=ENU=Copy Estimate Quantity Sheet;
                SourceExpr=CopyEstQuanSheet }

    { 1100529801;2;Field  ;
                CaptionML=ENU=Transfer Comment Lines;
                SourceExpr=TransferCommentLines }

    { 1210190022;2;Field  ;
                CaptionML=ENU=Copy Price Agreement;
                SourceExpr=CopyPriceAgreement;
                Editable=CopyPriceAgreementEditable }

    { 1100409000;2;Field  ;
                CaptionML=ENU=Initialize Sales From Cost;
                SourceExpr=InitSalesFromCost }

  }
  CODE
  {
    VAR
      Text000@11012008 : TextConst 'ENU=Estimate does not exist';
      Text001@11012009 : TextConst 'ENU=Estimate already exists';
      EstFromOld@1100525001 : Code[20];
      EstFrom@11012000 : Code[20];
      EstTo@11012001 : Code[20];
      NewEst@11012002 : Code[20];
      EstFromTxt@11012003 : Text[50];
      EstToTxt@11012004 : Text[50];
      EstNos@1000000002 : Code[20];
      SubEstFrom@1210190021 : Code[20];
      SubEstFromTxt@1210190022 : Text[50];
      EstTypeFromOpt@1210190000 : 'Cost,Sales';
      EstTypeToOpt@1210190001 : 'Cost,Sales';
      RateGroupFrom@1210190002 : Code[20];
      NormGroupFrom@1210190003 : Code[20];
      RateGroupFromTxt@1210190004 : Text[50];
      NormGroupFromTxt@1210190005 : Text[50];
      RateGroupTo@1210190009 : Code[20];
      NormGroupTo@1210190008 : Code[20];
      RateGroupToTxt@1210190007 : Text[50];
      NormGroupToTxt@1210190006 : Text[50];
      ContactTo@1100485005 : Code[20];
      ContactToTxt@1100485007 : Text[50];
      ContactPersonTo@1100485006 : Code[20];
      ContactPersonToTxt@1100485008 : Text[50];
      CustTo@1210190017 : Code[20];
      CustToTxt@1210190018 : Text[50];
      CustRec@1210190019 : Record 18;
      ContactRec@1100485009 : Record 5050;
      RateGroupRec@1210190010 : Record 11012161;
      NormGroupRec@1210190011 : Record 11012164;
      EstRec@1210190016 : Record 11012151;
      EstSetup@1210190015 : Record 11012150;
      SerLineRec@1210190014 : Record 309;
      SerRelRec@1210190013 : Record 310;
      NoSeriesMgt@1210190012 : Codeunit 396;
      FormatMgt@1210190023 : Codeunit 11012022;
      CopyTryOut@1100485000 : Boolean;
      SkipLines@1100485001 : Boolean;
      SelectExistingEstimate@1100485003 : Boolean;
      RefDateTo@1100485002 : Date;
      CopySumSheet@1100485004 : 'EstFrom,EstSource,Empty';
      CopiedEstTo@1100485010 : Code[20];
      DiscRef1From@1100485016 : Code[20];
      DiscRef2From@1100485017 : Code[20];
      DiscRef1To@1100485011 : Code[20];
      DiscRef2To@1100485012 : Code[20];
      DiscRef1FromTxt@1100485018 : Text[50];
      DiscRef2FromTxt@1100485019 : Text[50];
      DiscRef1ToTxt@1100485013 : Text[50];
      DiscRef2ToTxt@1100485014 : Text[50];
      DiscRefRec@1100485015 : Record 11012338;
      CopyEstQuanSheet@1100525000 : Boolean;
      TransferCommentLines@1100529800 : Boolean;
      CopyPriceAgreement@1210190025 : Boolean;
      EstToTxtEditable@1100525009 : Boolean INDATASET;
      CopyPriceAgreementEditable@1100409000 : Boolean INDATASET;
      CloseActionOK@1100528400 : Boolean;
      RateGroupEditable@1100528900 : Boolean INDATASET;
      EstTypeEditable@1100528901 : Boolean INDATASET;
      NormGroupSalesEditable@1100525008 : Boolean INDATASET;
      NormGroupSalesFrom@1100525005 : Code[20];
      NormGroupSalesFromTxt@1100525004 : Text[50];
      NormGroupSalesTo@1100525003 : Code[20];
      NormGroupSalesToTxt@1100525002 : Text[50];
      EstFromConverted@1100525006 : Boolean;
      GenerateSummarySubEstimate@1100525007 : Boolean;
      InitSalesFromCost@1100409002 : Boolean;
      SalesDiscRef1To@1100409007 : Code[20];
      SalesDiscRef2To@1100409006 : Code[20];
      SalesDiscRef1ToTxt@1100409005 : Text[50];
      SalesDiscRef2ToTxt@1100409004 : Text[50];
      SalesDiscRef1From@1100409003 : Code[20];
      SalesDiscRef2From@1100409001 : Code[20];
      SalesDiscRefEditable@1100409008 : Boolean INDATASET;

    PROCEDURE FillDefaults@1(lEstFrom@11012000 : Code[20]);
    BEGIN
      //C019552.sn
      IF lEstFrom = EstFromOld THEN
        EXIT;
      EstFromOld := lEstFrom;
      //C019552.en
      EstFrom := lEstFrom;
      IF EstRec.GET(EstFrom) THEN BEGIN
        EstFromTxt  := EstRec.Description;
        EstTypeFromOpt := EstRec."Estimate Type";

        NormGroupFrom := EstRec."Norm Group";
        IF NOT NormGroupRec.GET(NormGroupFrom) THEN NormGroupRec.INIT;
        NormGroupFromTxt := COPYSTR(NormGroupRec.Description, 1, 50);

        //DP00381.sn
        NormGroupSalesFrom := EstRec."Norm Group (Sales)";
        IF NOT NormGroupRec.GET(NormGroupSalesFrom) THEN NormGroupRec.INIT;
        NormGroupSalesFromTxt := COPYSTR(NormGroupRec.Description, 1, 50);
        //DP00381.en

        RateGroupFrom := EstRec."Rate Group";
        IF NOT RateGroupRec.GET(RateGroupFrom) THEN RateGroupRec.INIT;
        RateGroupFromTxt := RateGroupRec.Description;

        //db.sn, 03-03-15: C017681
        IF EstRec.Converted THEN BEGIN
          DiscRef1From := EstRec."Purch Discount Term Group 1";
          DiscRef2From := EstRec."Purch Discount Term Group 2";
          SalesDiscRef1From := EstRec."Sales Discount Term Group 1";
          SalesDiscRef2From := EstRec."Sales Discount Term Group 2";
          SalesDiscRef1To := SalesDiscRef1From;
          SalesDiscRef2To := SalesDiscRef2From;
          IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, SalesDiscRef1To) THEN DiscRefRec.INIT;
          SalesDiscRef1ToTxt := DiscRefRec.Description;
          IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, SalesDiscRef2To) THEN DiscRefRec.INIT;
          SalesDiscRef2ToTxt := DiscRefRec.Description;
        END ELSE BEGIN
          IF EstTypeFromOpt = EstTypeFromOpt::Cost THEN BEGIN
            DiscRef1From := EstRec."Purch Discount Term Group 1";
            DiscRef2From := EstRec."Purch Discount Term Group 2";
          END ELSE BEGIN
            DiscRef1From := EstRec."Sales Discount Term Group 1";
            DiscRef2From := EstRec."Sales Discount Term Group 2";
         END;
        END;
        IF NOT DiscRefRec.GET(DiscRefRec.Level::Customer, DiscRef1From) THEN DiscRefRec.INIT;
        DiscRef1FromTxt := DiscRefRec.Description;
        IF NOT DiscRefRec.GET(DiscRefRec.Level::Job, DiscRef2From) THEN DiscRefRec.INIT;
        DiscRef2FromTxt := DiscRefRec.Description;
        //db.en, 03-03-15: C017681

        CustTo := EstRec."Customer No.";
        IF NOT CustRec.GET(CustTo) THEN CustRec.INIT;
        CustToTxt := CustRec.Name;

        EstRec.CALCFIELDS("Contact Name", "Contact Person Name");
        ContactTo := EstRec."Contact No.";
        ContactToTxt := EstRec."Contact Name";
        ContactPersonTo := EstRec."Contact Person No.";
        ContactPersonToTxt := EstRec."Contact Person Name";
        RefDateTo := EstRec."Reference Date (Item)";

        DetermineNewEstimate;
        EstTo    := NewEst;
        EstToTxtSetEditable;
        EstToTxt := EstFromTxt;
        EstTypeToOpt := EstTypeFromOpt;
        NormGroupTo := NormGroupFrom;
        NormGroupSalesTo := NormGroupSalesFrom;  //DP00381
        RateGroupTo := RateGroupFrom;
        DiscRef1To := DiscRef1From;
        DiscRef2To := DiscRef2From;
        NormGroupToTxt := NormGroupFromTxt;
        NormGroupSalesToTxt := NormGroupSalesFromTxt;  //DP00381
        RateGroupToTxt := RateGroupFromTxt;
        DiscRef1ToTxt := DiscRef1FromTxt;
        DiscRef2ToTxt := DiscRef2FromTxt;

        //DP00381.sn
        EstTypeEditable := (EstRec.Converted=FALSE);
        //RateGroupEditable := (EstRec.Converted=FALSE);  //db, 08-07-14: C012973
        EstFromConverted := EstRec.Converted;
        NormGroupSalesEditable := (EstRec.Converted);
        SalesDiscRefEditable := (EstRec.Converted);
        //DP00381.en
      END;
    END;

    PROCEDURE FillDefaultRentalContract@1100485002(ICustomerNo@1100485000 : Code[20];IContactNo@1100485001 : Code[20];IDescription@1100485002 : Text[50]);
    BEGIN
      CustTo := ICustomerNo;
      IF NOT CustRec.GET(CustTo) THEN CustRec.INIT;
      CustToTxt := CustRec.Name;
      ContactTo := IContactNo;
      IF NOT ContactRec.GET(ContactTo) THEN ContactRec.INIT;
      ContactToTxt := ContactRec.Name;
      EstToTxt := IDescription;
    END;

    PROCEDURE DetermineNewEstimate@1000000000();
    BEGIN
      CLEAR(NoSeriesMgt);  //db, 09-05-08: M11303

      IF EstRec."No. Series" <> '' THEN BEGIN
        EstNos := EstRec."No. Series";
      END ELSE BEGIN
        EstSetup.GET;
        EstNos := EstSetup."Estimate Nos.";
      END;

      SerRelRec.SETRANGE(Code, EstNos);
      IF SerRelRec.FINDSET THEN BEGIN
        REPEAT
          SerLineRec.SETRANGE("Series Code", SerRelRec."Series Code");
          IF SerLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              IF (SerLineRec.Open = TRUE) AND
                 (EstFrom >= SerLineRec."Starting No.") AND
                 ((EstFrom < SerLineRec."Ending No.") OR (SerLineRec."Ending No." = '')) THEN
                EstNos := SerLineRec."Series Code";
            UNTIL SerLineRec.NEXT = 0;
          END;
        UNTIL SerRelRec.NEXT = 0;
      END;

      NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,FALSE);
    END;

    PROCEDURE ValidateEstimate@1210190001();
    VAR
      lvText000@1210190001 : TextConst 'ENU=Estimate Lines present in Destination.';
      EstLineRecOLD@1100528901 : Record 11012154;
      EstLineRecNEW@1100528900 : Record 11072072;
    BEGIN
      IF SelectExistingEstimate THEN BEGIN
        EstRec.GET(EstTo);
      END ELSE BEGIN
        IF EstRec.GET(EstTo) THEN BEGIN
          DetermineNewEstimate;
          EstTo := NewEst;
          ERROR(Text001);
        END;
      END;

      IF EstRec.Converted THEN BEGIN  //DP00381
        EstLineRecNEW.SETRANGE("Estimate No.", EstTo);
        IF SubEstFrom <> '' THEN
          EstLineRecNEW.SETFILTER("Sub-Estimate No.", SubEstFrom);
        IF EstLineRecNEW.FINDFIRST THEN
          ERROR(lvText000);
      END ELSE BEGIN
        EstLineRecOLD.SETRANGE("Estimate No.", EstTo);
        IF SubEstFrom <> '' THEN
          EstLineRecOLD.SETFILTER("Sub-Estimate No.", SubEstFrom);
        IF EstLineRecOLD.FINDFIRST THEN
          ERROR(lvText000);
      END;
    END;

    PROCEDURE StartUpdate@1210190000();
    VAR
      CopyCu@1100528907 : Codeunit 11012151;
      CopyMgt@1100528906 : Codeunit 11012227;
      UpdateEst@1100528905 : Codeunit 11012155;
      UpdateMgt@1100528904 : Codeunit 11012229;
      TryOutRec@1100528903 : Record 11012761;
      EstLineRecOLD@1100528902 : Record 11012154;
      EstLineRecNEW@1100528901 : Record 11072072;
      SelectType@1100528900 : Integer;
    BEGIN
      EstRec.GET(EstFrom); //C019552
      IF EstRec.GET(EstTo) THEN
        EstRec.TESTFIELD(Fixed, FALSE);
      ValidateEstimate;

      SelectType := CopySumSheet;

      IF EstRec.Converted THEN BEGIN  //DP00381
        CopyMgt.SetTransferComments(TransferCommentLines);
        CopyMgt.SetGenerateSummary(GenerateSummarySubEstimate);  //db, 27-05-14: T004757
        CopyMgt.SetInitSalesFromCost(InitSalesFromCost);  //db, 03-02-15: C020959
        CopyMgt.SetDiscTermGroupSales(SalesDiscRef1To, SalesDiscRef2To);  //db, 03-03-15: C017681
        CopyMgt.CopyEst(EstFrom, SubEstFrom, EstTo, EstToTxt, EstTypeToOpt,
          NormGroupTo, RateGroupTo, CustTo, RefDateTo, DiscRef1To, DiscRef2To, SkipLines, SelectType, CopyEstQuanSheet,
          CopyPriceAgreement);
      END ELSE BEGIN
        CopyCu.SetTransferComments(TransferCommentLines);
        CopyCu.SetGenerateSummary(GenerateSummarySubEstimate);  //db, 27-05-14: T004757
        CopyCu.CopyEst(EstFrom, SubEstFrom, EstTo, EstToTxt, EstTypeToOpt,
          NormGroupTo, RateGroupTo, CustTo, RefDateTo, DiscRef1To, DiscRef2To, SkipLines, SelectType, CopyEstQuanSheet,
          CopyPriceAgreement);
      END;

      CLEAR(NoSeriesMgt);     //Force re-read of 'NoSeriesLine' record at next 'GetNextNo' (with FALSE)
      NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,FALSE);
      IF NewEst = EstTo THEN
        NewEst := NoSeriesMgt.GetNextNo(EstNos,0D,TRUE);

      IF NormGroupFrom <> NormGroupTo THEN BEGIN
        NormGroupRec.GET(NormGroupTo);
        IF EstRec.Converted THEN BEGIN  //DP00381
          EstLineRecNEW.SETRANGE("Estimate No.", EstTo);
          UpdateMgt.ReplaceNormGroup(EstLineRecNEW, NormGroupFrom, NormGroupTo);
        END ELSE BEGIN
          EstLineRecOLD.SETRANGE("Estimate No.", EstTo);
          UpdateEst.ReplaceNormGroup(EstLineRecOLD, NormGroupFrom, NormGroupTo, TRUE);
        END;
      END;

      //DP00381.sn
      IF NormGroupSalesFrom <> NormGroupSalesTo THEN BEGIN
        NormGroupRec.GET(NormGroupSalesTo);
        IF EstRec.Converted THEN BEGIN
          EstLineRecNEW.SETRANGE("Estimate No.", EstTo);
          UpdateMgt.ReplaceNormGroupSales(EstLineRecNEW, NormGroupSalesFrom, NormGroupSalesTo);
        END;
      END;
      //DP00381.en

      IF RateGroupFrom <> RateGroupTo THEN BEGIN
        RateGroupRec.GET(RateGroupTo);
        IF EstRec.Converted THEN  //DP00381
          UpdateMgt.UpdateRate(EstTo, RateGroupFrom, RateGroupTo)  //C025953
        ELSE
          UpdateEst.ReplaceRateGroup(EstTo, RateGroupFrom, RateGroupTo, TRUE);
      END;

      IF CopyTryOut AND TryOutRec.READPERMISSION THEN
        TryOutRec.CopyRelation(1, 1, EstFrom, EstTo);  //db, 04-10-07

      WITH EstRec DO BEGIN  //db, 13-10-15
        GET(EstTo);
        "Contact No." := ContactTo;
        "Contact Person No." := ContactPersonTo;
        MODIFY;
      END;
    END;

    PROCEDURE CheckCustContact@1100485000(lvAction@1100485001 : Integer);
    VAR
      ContBusRel@1100485000 : Record 5054;
      NumContact@1100485002 : Integer;
    BEGIN
      //db, 22-02-08
      IF lvAction = 0 THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table", "No.");
        ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("No.", CustTo);
        IF ContBusRel.FINDFIRST THEN BEGIN
          ContBusRel.CALCFIELDS("Contact Name");
          ContactTo := ContBusRel."Contact No.";
          ContactToTxt := ContBusRel."Contact Name";
        END;
      END;
      IF lvAction = 1 THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Contact No.", "Business Relation Code");
        ContBusRel.SETRANGE("Contact No.", ContactTo);
        ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
        IF ContBusRel.FINDFIRST THEN BEGIN
          ContBusRel.CALCFIELDS("Contact Name");
          CustTo := ContBusRel."No.";
          CustToTxt := ContBusRel."Contact Name";
        END;
      END;

      ContactPersonTo := '';
      ContactPersonToTxt := '';

      ContactRec.RESET;
      ContactRec.SETRANGE("Company No.", ContactTo);
      ContactRec.SETRANGE(Type, ContactRec.Type::Person);
      NumContact := ContactRec.COUNT;
      IF NumContact = 1 THEN BEGIN
        IF ContactRec.FINDFIRST THEN BEGIN
          ContactPersonTo := ContactRec."No.";
          ContactPersonToTxt := ContactRec.Name;
        END;
      END;
    END;

    PROCEDURE LookupEstTo@1100485001();
    BEGIN
      EstRec.RESET;
      EstRec.SETRANGE(Converted, EstFromConverted);  //db, 19-05-14: T004749
      IF PAGE.RUNMODAL(PAGE::"Estimate List", EstRec) = ACTION::LookupOK THEN BEGIN
        IF SelectExistingEstimate = FALSE THEN EXIT;  //db, 09-05-08: M11303
        EstTo := EstRec."No.";
        EstToTxt := EstRec.Description;
        ValidateEstimate;
      END;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE GetCopiedEstTo@1100485003(VAR OEstNo@1100485000 : Code[20]);
    BEGIN
      OEstNo := CopiedEstTo;
    END;

    PROCEDURE SetEstTo@1210190002(EstNo@1210190000 : Code[20]);
    BEGIN
      //call 30195
      EstTo := EstNo;
    END;

    LOCAL PROCEDURE EstTypeToOptOnAfterValidate@19049826();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SelectExistingEstimateOnAfterV@19035671();
    BEGIN
      //db, 09-05-08: M11303
      IF SelectExistingEstimate = FALSE THEN BEGIN
        EstTo := NewEst;
        EstToTxt := EstFromTxt;
      END ELSE BEGIN
        EstTo := '';
        LookupEstTo;
      END;
    END;

    LOCAL PROCEDURE EstToTxtSetEditable@19010875();
    BEGIN
      IF EstRec.GET(EstTo) THEN
        EstToTxtEditable := FALSE
      ELSE
        EstToTxtEditable := TRUE;
    END;

    PROCEDURE CheckCopyAgreement@1100409000();
    BEGIN
      CopyPriceAgreementEditable := (EstTypeFromOpt = EstTypeToOpt);
      IF (EstTypeFromOpt <> EstTypeToOpt) THEN
        CopyPriceAgreement := FALSE
    END;

    LOCAL PROCEDURE StdDialogConfirm@1100528400() : Boolean;
    BEGIN
      CurrPage.RUNMODAL;
      EXIT(CloseActionOK);
    END;

    LOCAL PROCEDURE StdDialogDoAction@1100528401();
    BEGIN
      StartUpdate;
    END;

    PROCEDURE StdDialogRunModal@1100528404();
    BEGIN
      IF StdDialogConfirm THEN
        StdDialogDoAction;
    END;

    PROCEDURE GetNewEstimate@1100525000() : Code[20];
    BEGIN
      //C027531: db, 24-12-15
      EXIT(EstTo);
    END;

    BEGIN
    {
      db, 13-10-15: SourceTable (Estimate) removed; DPA-actions skipped
    }
    END.
  }
}

