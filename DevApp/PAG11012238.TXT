OBJECT Page 11012238 Estimate Part Sales Price
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Estimate Part Sales Price;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table11012153;
    PageType=List;
    OnInit=BEGIN
             SalesRemarkEditable := TRUE;
             OfferFixedEditable := TRUE;
           END;

    OnOpenPage=VAR
                 UpdateEstimateCU@1100525001 : Codeunit 11012155;
                 lvEstRec@1100485000 : Record 11012151;
               BEGIN
                 FILTERGROUP(3);
                 IF "Estimate No." <> '' THEN BEGIN
                   lvEstRec.GET("Estimate No.");
                   IF lvEstRec."Estimate Type" <> lvEstRec."Estimate Type"::Sales THEN BEGIN
                     ERROR(Text001, "Estimate No.");
                   END;
                 END;
                 FILTERGROUP(0);

                 OfferFixedEditable := (NOT lvEstRec.Fixed);
                 OfferNotFixed := (NOT lvEstRec.Fixed);
                 SalesRemarkEditable := (NOT lvEstRec.Fixed);

                 CheckFormat(sp1,sp2);

                 //mg.sn, 07-12-10: M22588
                 IF "Estimate No." <> '' THEN BEGIN
                   gvEstRec.GET("Estimate No.");
                   IF gvEstRec."Full Cost/Sales Price Updated" = FALSE THEN
                     UpdateEstimateCU.UpdateFullCostSalesPrice("Estimate No.");
                 END;
                 //mg.en, 07-12-10: M22588

                 WarnForIllegalCode(lvEstRec."No.");
               END;

    OnAfterGetRecord=VAR
                       FormatManagement@1100409000 : Codeunit 11012022;
                       CopyPartQuan@1100525000 : Decimal;
                       PartQuan@1100525001 : Decimal;
                     BEGIN
                       PartIndent := 0;
                       CALCFIELDS("Estimated Part", "Estimate Description");

                       CurrLevel := Level;
                       IF (sp1 = 0) AND (CurrLevel = 1) THEN CurrLevel := CurrLevel + 1;
                       IF (sp2 = 0) AND (CurrLevel = 2) THEN CurrLevel := CurrLevel + 1;

                       CopyRec := Rec;
                       IF gvEstRec."No." <> CopyRec."Estimate No." THEN
                         gvEstRec.GET(CopyRec."Estimate No.");
                       gvEstRec.CALCFIELDS("Copied from Estimate Descr.");
                       CopyRec."Estimate No." := gvEstRec."Copied from Cost Estimate";
                       IF NOT CopyRec.FIND THEN CopyRec.INIT;
                       GetSummary;

                       CASE CurrLevel OF
                         0:BEGIN
                             CALCFIELDS("Estimated Total","Hours Total","Cum. Estimated Total");
                             //PartSalesPrice := "Estimated Total";
                             PartSalesHours := "Hours Total";
                             PartSalesAmount := "Cum. Estimated Total";

                             CopyRec.CALCFIELDS("Labor Total", "Material Total",
                                        "Subcontracting Total", "Plant Total", "Hours Total");
                             LaborDec := CopyRec."Labor Total";
                             MatDec := CopyRec."Material Total";
                             SubcDec := CopyRec."Subcontracting Total";
                             PlantDec := CopyRec."Plant Total";
                             PartCostHours := CopyRec."Hours Total";

                             CopyRec.CALCFIELDS("Cum. Labor Total", "Cum. Material Total",
                                        "Cum. Subcontracting Total", "Cum. Plant Total");
                             CumLaborDec := CopyRec."Cum. Labor Total";
                             CumMatDec := CopyRec."Cum. Material Total";
                             CumSubcDec := CopyRec."Cum. Subcontracting Total";
                             CumPlantDec := CopyRec."Cum. Plant Total";
                           END;
                         1:BEGIN
                             CALCFIELDS("Estimated Chapter","Hours Chapter","Cum. Estimated Chapter");
                             //PartSalesPrice := "Estimated Chapter";
                             PartSalesHours := "Hours Chapter";
                             PartSalesAmount := "Cum. Estimated Chapter";

                             CopyRec.CALCFIELDS("Labor Chapter", "Material Chapter",
                                        "Subcontracting Chapter", "Plant Chapter", "Hours Chapter");
                             LaborDec := CopyRec."Labor Chapter";
                             MatDec := CopyRec."Material Chapter";
                             SubcDec := CopyRec."Subcontracting Chapter";
                             PlantDec := CopyRec."Plant Chapter";
                             PartCostHours := CopyRec."Hours Chapter";

                             CopyRec.CALCFIELDS("Cum. Labor Chapter", "Cum. Material Chapter",
                                        "Cum. Subcontracting Chapter", "Cum. Plant Chapter");
                             CumLaborDec := CopyRec."Cum. Labor Chapter";
                             CumMatDec := CopyRec."Cum. Material Chapter";
                             CumSubcDec := CopyRec."Cum. Subcontracting Chapter";
                             CumPlantDec := CopyRec."Cum. Plant Chapter";
                           END;
                         2:BEGIN
                             CALCFIELDS("Estimated Paragraph","Hours Paragraph","Cum. Estimated Paragraph");
                             //PartSalesPrice := "Estimated Paragraph";
                             PartSalesHours := "Hours Paragraph";
                             PartSalesAmount := "Cum. Estimated Paragraph";

                             CopyRec.CALCFIELDS("Labor Paragraph", "Material Paragraph",
                                        "Subcontracting Paragraph", "Plant Paragraph", "Hours Paragraph");
                             LaborDec := CopyRec."Labor Paragraph";
                             MatDec := CopyRec."Material Paragraph";
                             SubcDec := CopyRec."Subcontracting Paragraph";
                             PlantDec := CopyRec."Plant Paragraph";
                             PartCostHours := CopyRec."Hours Paragraph";

                             CopyRec.CALCFIELDS("Cum. Labor Paragraph", "Cum. Material Paragraph",
                                        "Cum. Subcontracting Paragraph", "Cum. Plant Paragraph");
                             CumLaborDec := CopyRec."Cum. Labor Paragraph";
                             CumMatDec := CopyRec."Cum. Material Paragraph";
                             CumSubcDec := CopyRec."Cum. Subcontracting Paragraph";
                             CumPlantDec := CopyRec."Cum. Plant Paragraph";
                           END;
                         3:BEGIN
                             CALCFIELDS("Estimated Part","Hours Part","Cum. Estimated Part");
                             //PartSalesPrice := "Estimated Part";
                             PartSalesHours := "Hours Part";
                             PartSalesAmount := "Cum. Estimated Part";

                             CopyRec.CALCFIELDS("Labor Part", "Material Part",
                                                "Subcontracting Part", "Plant Part", "Hours Part");
                             LaborDec := CopyRec."Labor Part";
                             MatDec := CopyRec."Material Part";
                             SubcDec := CopyRec."Subcontracting Part";
                             PlantDec := CopyRec."Plant Part";
                             PartCostHours := CopyRec."Hours Part";

                             CopyRec.CALCFIELDS("Cum. Labor Part", "Cum. Material Part",
                                                "Cum. Subcontracting Part", "Cum. Plant Part");
                             CumLaborDec := CopyRec."Cum. Labor Part";
                             CumMatDec := CopyRec."Cum. Material Part";
                             CumSubcDec := CopyRec."Cum. Subcontracting Part";
                             CumPlantDec := CopyRec."Cum. Plant Part";
                           END;
                       END;

                       //PartSalesAmount := PartSalesPrice * GetPartQuantity;
                       //test diekus.sn
                       PartQuan := GetPartQuantity;
                       IF PartQuan <> 0 THEN
                         PartSalesPrice := ROUND(PartSalesAmount/PartQuan)
                       ELSE
                         PartSalesPrice := PartSalesAmount;
                       //test diekus.en

                       PartCostAmount := CumLaborDec + CumMatDec + CumSubcDec + CumPlantDec;
                       //db.sn, 18-03-09: M14420
                       CopyPartQuan := CopyRec.GetPartQuantity;
                       IF CopyPartQuan <> 0 THEN
                         PartCostPrice := ROUND(PartCostAmount/CopyPartQuan)
                       ELSE
                         PartCostPrice := PartCostAmount;
                       //db.en, 18-03-09: M14420

                       CalculatedCostPrice := CopyRec."Calculated Price";
                       CalculatedCostAmount := CalculatedCostPrice * CopyPartQuan;

                       CALCFIELDS("Estimated Part");
                       GetSubEstTotals;

                       "Markup %" := GetMarkup("Offer Price",CalculatedCostPrice);
                       "Margin %" := GetMargin("Offer Price",CalculatedCostPrice);
                       OnAfterGetCurrRecord;
                       PartOnFormat;
                       DescriptionOnFormat;

                       IsIllegalCode := FormatManagement.IsIllegalCode(Part);
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100485046;1 ;ActionGroup;
                      CaptionML=ENU=D&istribute }
      { 1100485047;2 ;Action    ;
                      Name=DistributeLine;
                      ShortCutKey=Ctrl+Alt+F9;
                      CaptionML=ENU=Line to Distribute (test marco);
                      Image=Allocate;
                      OnAction=BEGIN
                                 IF Selection1 THEN
                                   ERROR(Text008);

                                 SubEstPartRec.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(SubEstPartRec);
                                 IF SubEstPartRec.COUNT <> 1 THEN
                                   ERROR(Text004);

                                 IF SubEstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                   IF Selection2 THEN BEGIN
                                     TempSubEstPartRec2.RESET;
                                     IF TempSubEstPartRec2.FINDSET(FALSE,FALSE) THEN BEGIN
                                       REPEAT
                                         IF (TempSubEstPartRec2.Level > SubEstPartRec.Level) THEN BEGIN
                                           CASE SubEstPartRec.Level OF
                                             1: IF (TempSubEstPartRec2.Chapter = SubEstPartRec.Part) THEN
                                                ERROR(Text005);
                                             2: IF (TempSubEstPartRec2.Chapter = SubEstPartRec.Chapter) AND
                                                   (TempSubEstPartRec2.Paragraph = SubEstPartRec.Part) THEN
                                                ERROR(Text005);
                                           END;
                                         END;
                                       UNTIL TempSubEstPartRec2.NEXT = 0;
                                     END
                                   END;
                                   TempSubEstPartRec1 := SubEstPartRec;
                                   TempSubEstPartRec1.OnTempTable := TRUE;
                                   TempSubEstPartRec1.INSERT;
                                 END;

                                 Selection1 := TRUE;
                               END;
                                }
      { 1100485048;2 ;Action    ;
                      Name=DistributeSelection;
                      ShortCutKey=Ctrl+Alt+F10;
                      CaptionML=ENU=Distribute over Selection;
                      Image=Allocate;
                      OnAction=BEGIN
                                 IF Selection2 THEN
                                   ERROR(Text009);

                                 SubEstPartRec.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(SubEstPartRec);
                                 IF SubEstPartRec.COUNT = 0 THEN BEGIN
                                   ERROR(Text002);
                                 END;

                                 IF SubEstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                   REPEAT

                                     IF Selection1 THEN BEGIN
                                       TempSubEstPartRec1.RESET;
                                       IF TempSubEstPartRec1.FINDFIRST THEN BEGIN
                                         IF (TempSubEstPartRec1.Level < SubEstPartRec.Level) THEN BEGIN
                                           CASE TempSubEstPartRec1.Level OF
                                             1: IF (TempSubEstPartRec1.Part = SubEstPartRec.Chapter) THEN
                                                  ERROR(Text005);
                                             2: IF (TempSubEstPartRec1.Chapter = SubEstPartRec.Chapter) AND
                                                   (TempSubEstPartRec1.Part = SubEstPartRec.Paragraph) THEN
                                                ERROR(Text005);
                                           END;
                                         END;
                                       END;
                                     END;

                                     TempSubEstPartRec2 := SubEstPartRec;
                                     TempSubEstPartRec2.OnTempTable := TRUE;
                                     TempSubEstPartRec2.INSERT;

                                   UNTIL SubEstPartRec.NEXT = 0;
                                 END;

                                 Selection2 := TRUE;
                               END;
                                }
      { 1100485049;2 ;Action    ;
                      Name=ProcessSelection;
                      ShortCutKey=Ctrl+Alt+F11;
                      CaptionML=ENU=Process;
                      Image=Start;
                      OnAction=VAR
                                 lvSubEstPartRec@1100485005 : Record 11012153;
                                 TempSubEstPartRec3@1100485000 : TEMPORARY Record 11012153;
                                 lvBaseAmount@1100485001 : Decimal;
                                 lvAddAmount@1100485002 : Decimal;
                                 lvPartQuan@1100485006 : Decimal;
                                 lvLines@1100485003 : Integer;
                               BEGIN
                                 IF NOT Selection1 THEN
                                   ERROR(Text006);

                                 IF NOT Selection2 THEN
                                   ERROR(Text007);

                                 TempSubEstPartRec1.RESET;
                                 TempSubEstPartRec1.FINDFIRST;

                                 //Fill extra table
                                 TempSubEstPartRec2.RESET;
                                 TempSubEstPartRec2.SETFILTER(Level, '>%1', 0);
                                 TempSubEstPartRec2.SETRANGE("Offer fixed", FALSE);
                                 IF TempSubEstPartRec2.FINDSET(FALSE, FALSE) THEN BEGIN
                                   REPEAT
                                     TempSubEstPartRec3 := TempSubEstPartRec2;
                                     TempSubEstPartRec3.INSERT;
                                   UNTIL TempSubEstPartRec2.NEXT = 0;
                                 END;

                                 //Select only the 'ends' (deepest level)
                                 TempSubEstPartRec2.SETRANGE(Level, 1, 2);
                                 TempSubEstPartRec2.SETRANGE("Offer fixed", FALSE);
                                 TempSubEstPartRec2.RESET;
                                 IF TempSubEstPartRec2.FINDSET(FALSE, FALSE) THEN BEGIN
                                   REPEAT
                                     TempSubEstPartRec3.RESET;
                                     TempSubEstPartRec3.SETRANGE(Chapter, TempSubEstPartRec2.Chapter);
                                     IF TempSubEstPartRec2.Level = 2 THEN
                                       TempSubEstPartRec3.SETRANGE(Paragraph, TempSubEstPartRec2.Part);
                                     TempSubEstPartRec3.SETFILTER(Level, '>%1', TempSubEstPartRec2.Level);
                                     IF TempSubEstPartRec3.FINDFIRST THEN BEGIN
                                       TempSubEstPartRec3.RESET;
                                       TempSubEstPartRec3 := TempSubEstPartRec2;
                                       IF TempSubEstPartRec3.FIND THEN
                                         TempSubEstPartRec3.DELETE;
                                     END;
                                   UNTIL TempSubEstPartRec2.NEXT = 0;
                                 END;

                                 //Determine new amounts
                                 lvBaseAmount := 0;
                                 TempSubEstPartRec3.RESET;
                                 lvLines := TempSubEstPartRec3.COUNT;
                                 IF TempSubEstPartRec3.FINDSET(TRUE, FALSE) THEN BEGIN
                                   REPEAT
                                     lvBaseAmount += TempSubEstPartRec3."Offer Amount"
                                   UNTIL TempSubEstPartRec3.NEXT = 0;
                                 END;
                                 //

                                 //Divide amount to selected 'ends'
                                 lvAddAmount := TempSubEstPartRec1."Offer Amount";
                                 TempSubEstPartRec3.RESET;
                                 IF TempSubEstPartRec3.FINDSET(TRUE, FALSE) THEN BEGIN
                                   REPEAT
                                     lvSubEstPartRec := TempSubEstPartRec3;
                                     lvSubEstPartRec.FIND;
                                     IF lvBaseAmount = 0 THEN
                                       TempSubEstPartRec3."Offer Amount" += lvAddAmount/lvLines
                                     ELSE
                                       TempSubEstPartRec3."Offer Amount" += TempSubEstPartRec3."Offer Amount"/lvBaseAmount * lvAddAmount;
                                     lvPartQuan := lvSubEstPartRec.GetPartQuantity();
                                     IF lvPartQuan = 0 THEN
                                       lvPartQuan := 1;
                                     lvSubEstPartRec.VALIDATE("Offer Price", ROUND(TempSubEstPartRec3."Offer Amount"/lvPartQuan));
                                     lvSubEstPartRec.MODIFY;
                                   UNTIL TempSubEstPartRec3.NEXT = 0;

                                   lvSubEstPartRec := TempSubEstPartRec1;
                                   lvSubEstPartRec.FIND;
                                   lvSubEstPartRec.VALIDATE("Offer Price", 0);
                                   lvSubEstPartRec.MODIFY;

                                 END;
                                 //
                                 CurrPage.UPDATE;
                                 //
                                 Selection1 := FALSE;
                                 Selection2 := FALSE;
                                 TempSubEstPartRec1.RESET;
                                 TempSubEstPartRec2.RESET;
                                 TempSubEstPartRec1.DELETEALL;
                                 TempSubEstPartRec2.DELETEALL;
                               END;
                                }
      { 1100485050;2 ;Action    ;
                      Name=ResetSelection;
                      ShortCutKey=Ctrl+Alt+F12;
                      CaptionML=ENU=Reset;
                      Image=Cancel;
                      OnAction=BEGIN
                                 Selection1 := FALSE;
                                 Selection2 := FALSE;
                                 TempSubEstPartRec1.RESET;
                                 TempSubEstPartRec2.RESET;
                                 TempSubEstPartRec1.DELETEALL;
                                 TempSubEstPartRec2.DELETEALL;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525035;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1100525036;2 ;Action    ;
                      Name=AssignOffer;
                      CaptionML=ENU=Assign Offer fixed collectively;
                      Promoted=Yes;
                      Image=SelectLineToApply;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GlobalUpdateAskForOffer(TRUE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525037;2 ;Action    ;
                      Name=RemoveOffer;
                      CaptionML=ENU=Remove Offer fixed collectively;
                      Promoted=Yes;
                      Image=ReverseLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GlobalUpdateAskForOffer(FALSE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525038;2 ;Action    ;
                      Name=CopyOfferPrice;
                      CaptionML=ENU=Copy Offer Price from Calculated Sales Price;
                      Promoted=Yes;
                      Image=CopyToTask;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(TRUE,TRUE);
                               END;
                                }
      { 1100525044;2 ;Action    ;
                      Name=UpdateOfferAmount;
                      CaptionML=ENU=Update Offer Amount/Full Cost/Sales Price;
                      Image=CostCenter;
                      OnAction=VAR
                                 UpdateEstimateCU@1100525000 : Codeunit 11012155;
                               BEGIN
                                 //mg.sn, 07-12-10: M22588
                                 IF "Estimate No." <> '' THEN
                                   UpdateEstimateCU.UpdateFullCostSalesPrice("Estimate No.");
                                 //mg.en, 07-12-10: M22588
                               END;
                                }
      { 1210190004;2 ;Action    ;
                      Name=UpdateMargin;
                      CaptionML=ENU=Update Margin collectively;
                      Image=Edit;
                      OnAction=BEGIN
                                 GlobalUpdateMargin;
                               END;
                                }
      { 1100525039;1 ;ActionGroup;
                      CaptionML=ENU=&Print }
      { 1100525040;2 ;Action    ;
                      CaptionML=ENU=Estimate Reports;
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(0);
                               END;
                                }
      { 1100525041;2 ;Action    ;
                      CaptionML=ENU=Sub-Estimate Reports;
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(1);
                               END;
                                }
      { 1100525042;2 ;Action    ;
                      CaptionML=ENU=Estimate &Part Reports;
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(2);
                               END;
                                }
      { 1100525043;2 ;Action    ;
                      CaptionML=ENU=Estimate &Lines Reports;
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(3);
                               END;
                                }
      { 1100525028;1 ;Action    ;
                      CaptionML=ENU=Initialize &Cost Prices;
                      Promoted=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(FALSE,FALSE);
                               END;
                                }
      { 1100485045;1 ;Action    ;
                      CaptionML=ENU=Initialize &Sales Prices;
                      Promoted=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(TRUE,FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Part;
                GroupType=Repeater }

    { 1210190000;2;Field  ;
                SourceExpr="Estimate No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1210190002;2;Field  ;
                SourceExpr="Estimate Description";
                Visible=FALSE;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                SourceExpr="Sub-Estimate No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1000000000;2;Field  ;
                SourceExpr="Sub-Estimate Description";
                Visible=FALSE;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr=Part;
                Editable=FALSE;
                Style=Attention;
                StyleExpr=IsIllegalCode }

    { 6   ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE }

    { 1100525008;2;Field  ;
                CaptionML=ENU=Quantity (Cost Price);
                SourceExpr=CopyRec.Quantity;
                OnValidate=VAR
                             CopyRec2@1100525001 : Record 11012153;
                           BEGIN
                             gvEstRec.GET("Estimate No.");
                             IF CopyRec2.GET(gvEstRec."Copied from Cost Estimate", "Sub-Estimate No.", "Part Group", Part) THEN BEGIN
                               CopyRec2.VALIDATE(Quantity, CopyRec.Quantity);
                               CopyRec2.MODIFY(TRUE);  //db, 26-04-10 (update logbook)
                               CopyRec := CopyRec2;
                             END;
                               CopyRecQuantityOnAfterValidate;
                           END;
                            }

    { 1100525010;2;Field  ;
                CaptionML=ENU=Cum.Quantity (Cost Price);
                SourceExpr=CopyRec.GetPartQuantity }

    { 1100525012;2;Field  ;
                CaptionML=ENU=Hours Cost Price;
                SourceExpr=PartCostHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationCostPrice();
                              CheckDateTimeAndRecalculate(gvEstRec."Copied from Cost Estimate","Sub-Estimate No.",FALSE,FALSE);
                              CurrPage.UPDATE();
                            END;
                             }

    { 1100485011;2;Field  ;
                CaptionML=ENU=Cost Price;
                SourceExpr=PartCostPrice;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationCostPrice();
                              CheckDateTimeAndRecalculate(gvEstRec."Copied from Cost Estimate","Sub-Estimate No.",FALSE,FALSE);
                              CurrPage.UPDATE();
                            END;
                             }

    { 1100485013;2;Field  ;
                CaptionML=ENU=Cost Amount;
                SourceExpr=PartCostAmount;
                Editable=FALSE }

    { 1100525004;2;Field  ;
                CaptionML=ENU=Calculated Price (Full Cost Price);
                SourceExpr=CalculatedCostPrice;
                Editable=FALSE }

    { 1100525033;2;Field  ;
                CaptionML=ENU=Calculated Amount (Full Cost Price);
                SourceExpr=CalculatedCostAmount }

    { 1100485005;2;Field  ;
                CaptionML=ENU=Quantity (Sales);
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             QuantityOnAfterValidate;
                           END;
                            }

    { 1100525000;2;Field  ;
                CaptionML=ENU=Cum.Quantity (Sales);
                SourceExpr=GetPartQuantity }

    { 1100485007;2;Field  ;
                SourceExpr="Unit of Measure";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485009;2;Field  ;
                SourceExpr="Settlement Type";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Hours Sales;
                SourceExpr=PartSalesHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationSalesPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
                              CurrPage.UPDATE();
                            END;
                             }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Sales Price;
                SourceExpr=PartSalesPrice;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationSalesPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
                              CurrPage.UPDATE();
                            END;
                             }

    { 1100525031;2;Field  ;
                CaptionML=ENU=Sales Amount;
                SourceExpr=PartSalesAmount;
                Editable=FALSE }

    { 1100485015;2;Field  ;
                CaptionML=ENU=Calculated Price ((Full Sales Price);
                SourceExpr="Calculated Price";
                Editable=FALSE }

    { 1100485017;2;Field  ;
                CaptionML=ENU=Calculated Amount ((Full Sales Amount);
                SourceExpr="Calculated Amount";
                Editable=FALSE }

    { 1100485026;2;Field  ;
                SourceExpr="Transfer to Installment M.";
                Visible=FALSE }

    { 1100485019;2;Field  ;
                SourceExpr="Offer Price";
                Editable=OfferNotFixed;
                OnValidate=BEGIN
                             "Markup %" := GetMarkup("Offer Price",CalculatedCostPrice);
                             "Margin %" := GetMargin("Offer Price",CalculatedCostPrice);
                             OfferPriceOnAfterValidate;
                           END;
                            }

    { 1100485021;2;Field  ;
                SourceExpr="Offer Amount";
                Editable=OfferNotFixed;
                OnValidate=BEGIN
                             OfferAmountOnAfterValidate;
                           END;
                            }

    { 1100525014;2;Field  ;
                SourceExpr="Markup %";
                Editable=OfferNotFixed;
                OnValidate=BEGIN
                             "Offer Price" := ROUND(CalculatedCostPrice + (CalculatedCostPrice * "Markup %" / 100 ));
                             VALIDATE("Offer Price");
                             //db: assign amount after validate price, because difference (Rec/xRec) based on amount is assigned to lower parts in validate above
                             "Offer Amount" := "Offer Price" * GetPartQuantity;
                             Markup37OnAfterValidate;
                           END;
                            }

    { 1100485023;2;Field  ;
                SourceExpr="Margin %";
                Editable=OfferNotFixed;
                OnValidate=BEGIN
                             //"Offer Price" := ROUND(CalculatedCostPrice * (100 + "Margin %")/100);  //db, 26-04-10
                             IF "Margin %" >= 100 THEN
                               ERROR(Text011, FIELDCAPTION("Margin %"), 100); //mg, 20-07-10, M20057
                             "Offer Price" := ROUND(CalculatedCostPrice / (1 - "Margin %" / 100));  //db, 26-04-10 (derived from ItemRec.Profit%)
                             VALIDATE("Offer Price");
                             //db: assign amount after validate price, because difference (Rec/xRec) based on amount is assigned to lower parts in validate above
                             "Offer Amount" := "Offer Price" * GetPartQuantity;
                             Margin37OnAfterValidate;
                           END;
                            }

    { 1100485040;2;Field  ;
                SourceExpr="Offer fixed";
                Editable=OfferFixedEditable;
                OnValidate=BEGIN
                             OfferfixedOnAfterValidate;
                           END;
                            }

    { 1100485003;2;Field  ;
                SourceExpr="Sales Comment";
                Editable=SalesRemarkEditable }

    { 1100525003;0;Container;
                ContainerType=FactBoxArea }

    { 1100525007;1;Part   ;
                SubPageLink=Estimate No.=FIELD(Estimate No.),
                            Sub-Estimate No.=FIELD(Sub-Estimate No.);
                PagePartID=Page11130174;
                PartType=Page }

    { 1100525005;1;Part   ;
                SubPageLink=Estimate No.=FIELD(Estimate No.),
                            Sub-Estimate No.=FIELD(Sub-Estimate No.);
                PagePartID=Page11130173;
                PartType=Page }

  }
  CODE
  {
    VAR
      gvEstRec@1100485022 : Record 11012151;
      EstRec@1100525015 : Record 11012151;
      CopyRec@1100525002 : Record 11012153;
      SubEstPartRec@1100485029 : Record 11012153;
      TempSubEstPartRec1@1100485028 : TEMPORARY Record 11012153;
      TempSubEstPartRec2@1100485030 : TEMPORARY Record 11012153;
      LaborDec@1100485017 : Decimal;
      MatDec@1100485016 : Decimal;
      SubcDec@1100485014 : Decimal;
      PlantDec@1100485013 : Decimal;
      CumLaborDec@1100485010 : Decimal;
      CumMatDec@1100485009 : Decimal;
      CumSubcDec@1100485007 : Decimal;
      CumPlantDec@1100485006 : Decimal;
      SubEstTotCosts@1100485008 : Decimal;
      SubEstTotSales@1100485011 : Decimal;
      SubEstTotOffer@1100485015 : Decimal;
      SubEstTotMargin@1100485018 : Decimal;
      SubEstTotCostPrice@1100525009 : Decimal;
      SubEstTotSalesPrice@1100525006 : Decimal;
      SubEstTotOfferPrice@1100525008 : Decimal;
      SubEstTotMarkup@1100525007 : Decimal;
      sp1@1100485002 : Integer;
      sp2@1100485001 : Integer;
      CurrLevel@1100485000 : Integer;
      Text001@1100485021 : TextConst 'ENU=%1 is not a Sales Estimate';
      EstFixed@1100485020 : Boolean;
      Text002@1100485023 : TextConst 'ENU=First select Lines.';
      Text004@100485027 : TextConst 'ENU=First select 1 Line.';
      Selection2@1100485031 : Boolean;
      Selection1@1100485032 : Boolean;
      Text005@1100485033 : TextConst 'ENU="Distribution not possible due to selection of Parts. "';
      Text006@1100485034 : TextConst 'ENU=No Line selected to be set zo zero.';
      Text007@1100485035 : TextConst 'ENU=No selection made to divide amount.';
      Text008@1100485036 : TextConst 'ENU=Already Lines selected to divide.';
      Text009@1100485037 : TextConst 'ENU=Already selection made for dividing.';
      SumSheetCost@1100525010 : Code[10];
      SumSheetCostDesc@1100525005 : Text[50];
      SumSheetSales@1100525011 : Code[10];
      SumSheetSalesDesc@1100525013 : Text[50];
      SubEstimateFilter@1100525016 : Code[20];
      PartCostPrice@1100525019 : Decimal;
      PartCostAmount@1100525018 : Decimal;
      PartCostHours@1100525004 : Decimal;
      PartSalesPrice@1100525003 : Decimal;
      PartSalesAmount@1100525020 : Decimal;
      PartSalesHours@1100525001 : Decimal;
      CalculatedCostPrice@1100525021 : Decimal;
      CalculatedCostAmount@1100525000 : Decimal;
      Text011@1100525014 : TextConst 'ENU=%1 must be smaller than %2';
      Text012@1100525022 : TextConst 'ENU=Not all Offer Prices are copied because some Offer Prices are fixed.';
      OfferNotFixed@19036365 : Boolean INDATASET;
      OfferFixedEditable@19077911 : Boolean INDATASET;
      SalesRemarkEditable@19034400 : Boolean INDATASET;
      PartEmphasize@19008440 : Boolean INDATASET;
      PartIndent@19076330 : Integer INDATASET;
      DescriptionEmphasize@19010547 : Boolean INDATASET;
      DescriptionIndent@19057867 : Integer INDATASET;
      IsIllegalCode@1100409000 : Boolean INDATASET;
      Text013@1100409001 : TextConst 'ENU=Warning: This Estimate lacks some intermediate levels. The Sales Price functionality may therefore not work.';

    PROCEDURE GetSubEstTotals@1210190001();
    VAR
      lvEstRec@1100485001 : Record 11012151;
      lvSubEstPartRec@1100485002 : Record 11012153;
      CumQuan@1100525000 : Decimal;
    BEGIN
      SubEstTotCosts := 0;
      SubEstTotSales := 0;
      SubEstTotOffer := 0;
      SubEstTotMargin := 0;
      SubEstTotCostPrice :=0;
      SubEstTotSalesPrice :=0;
      SubEstTotOfferPrice :=0;
      SubEstTotMarkup := 0;

      lvEstRec.GET("Estimate No.");

      lvSubEstPartRec.SETRANGE("Estimate No.", lvEstRec."Copied from Cost Estimate");
      lvSubEstPartRec.SETRANGE(Level, 0);
      IF lvSubEstPartRec.FINDSET THEN BEGIN
        REPEAT
          CumQuan := lvSubEstPartRec.GetPartQuantity;
          SubEstTotCosts := SubEstTotCosts + lvSubEstPartRec."Calculated Price" * CumQuan;
          SubEstTotCostPrice := SubEstTotCostPrice + lvSubEstPartRec."Calculated Price";
        UNTIL lvSubEstPartRec.NEXT = 0;
      END;

      lvSubEstPartRec.SETRANGE("Estimate No.", "Estimate No.");
      lvSubEstPartRec.SETRANGE(Level, 0);
      IF lvSubEstPartRec.FINDSET THEN BEGIN
        REPEAT
          CumQuan := lvSubEstPartRec.GetPartQuantity;
          SubEstTotSales := SubEstTotSales + lvSubEstPartRec."Calculated Price" * CumQuan;
          SubEstTotOffer := SubEstTotOffer + lvSubEstPartRec."Offer Price" * CumQuan;
          SubEstTotSalesPrice := SubEstTotSalesPrice + lvSubEstPartRec."Calculated Price";
          SubEstTotOfferPrice := SubEstTotOfferPrice + lvSubEstPartRec."Offer Price";
        UNTIL lvSubEstPartRec.NEXT = 0;
      END;

      SubEstTotMargin := GetMargin(SubEstTotOfferPrice,SubEstTotCostPrice);
      SubEstTotMarkup := GetMarkup(SubEstTotOfferPrice,SubEstTotCostPrice);
    END;

    PROCEDURE RunFormCalculationCostPrice@1100525001();
    VAR
      EstLineRec@1100525000 : Record 11012154;
    BEGIN
      EstLineRec.FILTERGROUP(9);
      EstLineRec.SETRANGE("Estimate No.", gvEstRec."Copied from Cost Estimate");
      EstLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstLineRec.SETRANGE("Part Group", "Part Group");
      EstLineRec.SETRANGE(Part, Part);
      EstLineRec.FILTERGROUP(0);
      EstLineRec."Estimate No." := gvEstRec."Copied from Cost Estimate";  //db, 22-03-10: set estimate for hide zerolines (subform)
      PAGE.RUNMODAL(PAGE::"Estimate Lines", EstLineRec);
    END;

    PROCEDURE RunFormCalculationSalesPrice@1100525002();
    VAR
      EstLineRec@1100525000 : Record 11012154;
    BEGIN
      EstLineRec.FILTERGROUP(9);
      EstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstLineRec.SETRANGE("Part Group", "Part Group");
      EstLineRec.SETRANGE(Part, Part);
      EstLineRec.FILTERGROUP(0);
      EstLineRec."Estimate No." := "Estimate No.";  //db, 22-03-10: set estimate for hide zerolines (subform)
      PAGE.RUNMODAL(PAGE::"Estimate Lines", EstLineRec);
    END;

    PROCEDURE CheckDateTimeAndRecalculate@1100525000(iEstimate@1100525003 : Code[20];iSubEst@1100525006 : Code[20];iSales@1100525004 : Boolean;iAdjustOfferPrice@1100525005 : Boolean);
    VAR
      lvEstRec@1100525000 : Record 11012151;
      lvSummaryRec@1100525001 : Record 11012172;
    BEGIN
      lvEstRec.GET(iEstimate);
      //db.sn, 26-02-10
      lvSummaryRec.SETRANGE("Estimate No.", iEstimate);
      lvSummaryRec.SETRANGE("Sub-Estimate No.", iSubEst);
      IF NOT lvSummaryRec.FINDFIRST THEN BEGIN
        lvSummaryRec.SETFILTER("Sub-Estimate No.", '%1', '');
        IF NOT lvSummaryRec.FINDFIRST THEN EXIT;
      END;
      //db.sn, 26-02-10
      IF lvEstRec."Last Date Modified" > lvSummaryRec."Last Date Modified" THEN BEGIN
        CallReport(iSales,iAdjustOfferPrice);
      END ELSE BEGIN
        IF lvEstRec."Last Date Modified" = lvSummaryRec."Last Date Modified" THEN BEGIN
          IF lvEstRec."Last Time Modified" > lvSummaryRec."Last Time Modified" THEN BEGIN
            CallReport(iSales,iAdjustOfferPrice);
          END;
        END;
      END;
    END;

    PROCEDURE CallReport@1100525019(iSales@1100525000 : Boolean;iAdjustOfferPrice@1100525004 : Boolean);
    VAR
      EstRec@1100525005 : Record 11012151;
      SubEstRec@1100525003 : Record 11012152;
      SubEstPartRec@1100525006 : Record 11012153;
      EstlineRec@1100525002 : Record 11012154;
      lreport@1100525001 : Report 11012170;
    BEGIN
      IF iSales THEN BEGIN
        EstRec.GET("Estimate No.");
      END ELSE BEGIN
        EstRec.GET(gvEstRec."Copied from Cost Estimate");
      END;

      SubEstRec.SETRANGE("Estimate No.", EstRec."No.");
      SubEstRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
      SubEstRec.SETFILTER("Summary (Offer Price)" , '<>%1', '');
      IF NOT SubEstRec.FINDFIRST THEN BEGIN
        //db.sn, 16-05-14: C014714
        IF EstRec."Estimate Type" = EstRec."Estimate Type"::Cost THEN BEGIN
          EstRec.TESTFIELD("Summary (Cost)");
          lreport.SetSelection(EstRec."Summary (Cost)", iAdjustOfferPrice);
        END ELSE BEGIN
          EstRec.TESTFIELD("Summary (Sales)");
          lreport.SetSelection(EstRec."Summary (Sales)", iAdjustOfferPrice);
        END;
        //db.en, 16-05-14: C014714
        lreport.USEREQUESTPAGE := FALSE;
        //lreport.SetSelection(EstRec."Summary (Sales)", iAdjustOfferPrice);   //db, 16-05-14: C014714
        EstlineRec.SETRANGE("Estimate No.", EstRec."No.");
        EstlineRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);  //db, 24-03-10: M18793
        lreport.SETTABLEVIEW(EstlineRec);
        lreport.RUNMODAL;
      END ELSE BEGIN
        SubEstRec.SETRANGE("Summary (Offer Price)");
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            SubEstRec.TESTFIELD("Summary (Offer Price)");
            CLEAR(lreport);
            lreport.USEREQUESTPAGE := FALSE;
            lreport.SetSelection(SubEstRec."Summary (Offer Price)", iAdjustOfferPrice);
            EstlineRec.SETRANGE("Estimate No.", SubEstRec."Estimate No.");
            EstlineRec.SETRANGE("Sub-Estimate No.", SubEstRec."Sub-Estimate No.");
            lreport.SETTABLEVIEW(EstlineRec);
            lreport.RUNMODAL;
          UNTIL SubEstRec.NEXT = 0;
        END;
      END;

      //mg.sn, 22-07-10, M20061
      IF iAdjustOfferPrice THEN BEGIN  //db, 03-08-10 (PT)
        SubEstPartRec.SETRANGE("Estimate No.", EstRec."No.");
        SubEstPartRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
        SubEstPartRec.SETRANGE(SubEstPartRec."Offer fixed", TRUE);
        IF NOT SubEstPartRec.ISEMPTY THEN
          MESSAGE(Text012);
      END;
      //mg.en, 22-07-10, M20061
    END;

    PROCEDURE GetSummary@1100525003();
    VAR
      lvEstRec@1100525000 : Record 11012151;
      lvSubEstRec@1100525002 : Record 11012152;
      lvSumRec@1100525001 : Record 11012172;
    BEGIN
      IF SubEstimateFilter <> '' THEN BEGIN
        IF NOT lvSubEstRec.GET(gvEstRec."Copied from Cost Estimate",SubEstimateFilter) THEN lvSubEstRec.INIT;
        SumSheetCost := lvSubEstRec."Summary (Offer Price)";
      END ELSE BEGIN
        IF NOT lvEstRec.GET(gvEstRec."Copied from Cost Estimate") THEN lvEstRec.INIT;
        SumSheetCost := lvEstRec."Summary (Cost)";  //db, 16-05-14: C014714
      END;
      IF NOT lvSumRec.GET(gvEstRec."Copied from Cost Estimate", SumSheetCost) THEN lvSumRec.INIT;
      SumSheetCostDesc := lvSumRec.Description;

      IF SubEstimateFilter <> '' THEN BEGIN
        IF NOT lvSubEstRec.GET("Estimate No.",SubEstimateFilter) THEN lvSubEstRec.INIT;
        SumSheetSales := lvSubEstRec."Summary (Offer Price)";
      END ELSE BEGIN
        IF NOT lvEstRec.GET("Estimate No.") THEN lvEstRec.INIT;
        SumSheetSales := lvEstRec."Summary (Sales)";
      END;
      IF NOT lvSumRec.GET("Estimate No.", SumSheetSales) THEN lvSumRec.INIT;
      SumSheetSalesDesc := lvSumRec.Description
    END;

    PROCEDURE ValidateSummarySales@1100525004();
    VAR
      lvEstRec@1100525002 : Record 11012151;
      lvSubEstRec@1100525001 : Record 11012152;
      lvSumRec@1100525000 : Record 11012172;
    BEGIN
      IF SumSheetSales <> '' THEN BEGIN
        lvSumRec.GET("Estimate No.", SumSheetSales);
        SumSheetSalesDesc := lvSumRec.Description;
      END;
      IF SubEstimateFilter = '' THEN BEGIN
        lvEstRec.GET("Estimate No.");
        lvEstRec."Summary (Sales)" := SumSheetSales;
        lvEstRec.MODIFY;
      END ELSE BEGIN
        IF lvSubEstRec.GET("Estimate No.", SubEstimateFilter) THEN BEGIN
          lvSubEstRec."Summary (Offer Price)" := SumSheetSales;
          lvSubEstRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE ValidateSummaryCost@1100525006();
    VAR
      lvEstRec@1100525000 : Record 11012151;
      lvSubEstRec@1100525002 : Record 11012152;
      lvSumRec@1100525001 : Record 11012172;
    BEGIN
      IF SumSheetCost <> '' THEN BEGIN
        lvSumRec.GET(gvEstRec."Copied from Cost Estimate", SumSheetCost);
        SumSheetCostDesc := lvSumRec.Description;
      END;
      IF SubEstimateFilter = '' THEN BEGIN
        lvEstRec.GET(gvEstRec."Copied from Cost Estimate");
        lvEstRec."Summary (Cost)" := SumSheetCost;  //db, 16-05-14: C014714
        lvEstRec.MODIFY;
      END ELSE BEGIN
        IF lvSubEstRec.GET(gvEstRec."Copied from Cost Estimate", SubEstimateFilter) THEN BEGIN
          lvSubEstRec."Summary (Offer Price)" := SumSheetCost;
          lvSubEstRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE LookupSummarySales@1100525005();
    VAR
      lvSumRec@1100525000 : Record 11012172;
    BEGIN
      lvSumRec.SETRANGE("Estimate No.","Estimate No.");
      IF SubEstimateFilter = '' THEN
        lvSumRec.SETFILTER("Sub-Estimate No.", '%1', '')
      ELSE
        lvSumRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
      lvSumRec."Estimate No." := "Estimate No.";
      lvSumRec.Summary := SumSheetSales;
      IF PAGE.RUNMODAL(0, lvSumRec) = ACTION::LookupOK THEN BEGIN
        SumSheetSales := lvSumRec.Summary;
        ValidateSummarySales;
      END;
    END;

    PROCEDURE LookupSummaryCost@1100525007();
    VAR
      lvSumRec@1100525000 : Record 11012172;
    BEGIN
      lvSumRec.SETRANGE("Estimate No.",gvEstRec."Copied from Cost Estimate");
      IF SubEstimateFilter = '' THEN
        lvSumRec.SETFILTER("Sub-Estimate No.", '%1', '')
      ELSE
        lvSumRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
      lvSumRec."Estimate No." := gvEstRec."Copied from Cost Estimate";
      lvSumRec.Summary := SumSheetCost;
      IF PAGE.RUNMODAL(0, lvSumRec) = ACTION::LookupOK THEN BEGIN
        SumSheetCost := lvSumRec.Summary;
        ValidateSummaryCost;
      END;
    END;

    PROCEDURE GlobalUpdateAskForOffer@1100485000(lvAction@1100525000 : Boolean);
    VAR
      lvText001@1100485001 : TextConst 'ENU=First select line(s)';
      lvSubEstPartRec@1100525001 : Record 11012153;
    BEGIN
      lvSubEstPartRec.COPY(Rec);
      WITH lvSubEstPartRec DO BEGIN
        CurrPage.SETSELECTIONFILTER(lvSubEstPartRec);
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;
        REPEAT
          VALIDATE("Offer fixed", lvAction);
          MODIFY(TRUE);
          IF "Offer fixed" = FALSE THEN
            CheckOfferFixedUpwards(lvSubEstPartRec);  //db, 27-07-10: M20060
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetFilterPrintDoc@1100485002(lvAction@1100485000 : Integer);
    VAR
      EstPartRec@1100485002 : Record 11012153;
      PrintDoc@1100485001 : Codeunit 229;
    BEGIN
      EstPartRec."Estimate No." := "Estimate No.";
      PrintDoc.PrintEstimateOLD(EstPartRec, lvAction);
    END;

    PROCEDURE GlobalUpdateMargin@1210190000();
    VAR
      EstPartRec@1210190000 : Record 11012153;
      OrigPartRec@1210190003 : Record 11012153;
      MarginReport@1210190001 : Report 11012173;
      UpdateMargin@1210190006 : Boolean;
      UpdateMarkup@1210190007 : Boolean;
      varMethod@1210190005 : 'Replace,Add,Increase';
      varPerc@1210190002 : Decimal;
      NewPerc@1210190004 : Decimal;
      BasePerc@1210190008 : Decimal;
    BEGIN
      //db, 21-03-14: skip filter on EstPartRec in report; use marked lines
      MarginReport.RUNMODAL;
      MarginReport.GetRequestOptions(UpdateMargin, UpdateMarkup, varMethod, varPerc);
      IF (UpdateMargin = FALSE) AND (UpdateMarkup = FALSE) THEN EXIT;

      //db.sn, 21-03-14
      EstPartRec.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EstPartRec);
      //db.en, 21-03-14
      IF EstPartRec.FINDSET THEN BEGIN
        REPEAT
          EstPartRec.TESTFIELD("Offer fixed", FALSE);

          //copy from OnAfterGetRecord:
          OrigPartRec := EstPartRec;
          IF gvEstRec."No." <> OrigPartRec."Estimate No." THEN
            gvEstRec.GET(OrigPartRec."Estimate No.");
          gvEstRec.CALCFIELDS("Copied from Estimate Descr.");
          OrigPartRec."Estimate No." := gvEstRec."Copied from Cost Estimate";
          IF NOT OrigPartRec.FIND THEN OrigPartRec.INIT;

          IF UpdateMargin THEN
            BasePerc := EstPartRec."Margin %";
          IF UpdateMarkup THEN
            BasePerc := EstPartRec."Markup %";
          CASE varMethod OF
            varMethod::Replace:
              NewPerc := varPerc;
            varMethod::Add:
              NewPerc := BasePerc + varPerc;
            varMethod::Increase:
              NewPerc := BasePerc * (100+varPerc)/100;
          END;
          IF NewPerc < 0 THEN NewPerc := 0;
          IF NewPerc > 100 THEN NewPerc := 100;
          IF UpdateMargin THEN BEGIN
            EstPartRec.VALIDATE("Margin %", NewPerc);
            //copy from OnValidate formfield Margin %":
            EstPartRec."Offer Price" := ROUND(OrigPartRec."Calculated Price" / (1 - EstPartRec."Margin %" / 100));
          END;
          IF UpdateMarkup THEN BEGIN
            EstPartRec.VALIDATE("Markup %", NewPerc);
            //copy from OnValidate formfield Markup %":
            EstPartRec."Offer Price" :=
              ROUND(OrigPartRec."Calculated Price" + (OrigPartRec."Calculated Price" * EstPartRec."Markup %" / 100));
          END;
          EstPartRec.VALIDATE("Offer Price");
          EstPartRec."Offer Amount" := EstPartRec."Offer Price" * EstPartRec.GetPartQuantity;
          EstPartRec.MODIFY;
        UNTIL EstPartRec.NEXT = 0;
      END;

      CLEARMARKS;  //db, 21-03-14
    END;

    LOCAL PROCEDURE CopyRecQuantityOnAfterValidate@19048847();
    BEGIN
      CheckDateTimeAndRecalculate(gvEstRec."Copied from Cost Estimate","Sub-Estimate No.",FALSE,FALSE);
      CurrPage.UPDATE();
    END;

    LOCAL PROCEDURE QuantityOnAfterValidate@19032465();
    BEGIN
      CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
      IF GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part) THEN;  //db, 26-04-10 (get Calculated Amount)
      CurrPage.UPDATE();
    END;

    LOCAL PROCEDURE OfferPriceOnAfterValidate@19023147();
    BEGIN
      CurrPage.UPDATE();
    END;

    LOCAL PROCEDURE OfferAmountOnAfterValidate@19069116();
    BEGIN
      CurrPage.UPDATE();
    END;

    LOCAL PROCEDURE Markup37OnAfterValidate@19021663();
    BEGIN
      CurrPage.UPDATE();
    END;

    LOCAL PROCEDURE Margin37OnAfterValidate@19029100();
    BEGIN
      CurrPage.UPDATE();
    END;

    LOCAL PROCEDURE OfferfixedOnAfterValidate@19008780();
    BEGIN
      CheckOfferFixedUpwards(Rec);  //db, 27-07-10: M20060
      CheckOfferFixedUpwards1(Rec);  //db, 03-08-10: M22083

      CurrPage.UPDATE;  //db, 27-05-10 (show result function ProcessPartFields)
    END;

    LOCAL PROCEDURE SubEstimateFilterOnAfterValida@19031222();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    VAR
      CopyRec@1100485000 : Record 11012153;
      lvEstRec@1100485001 : Record 11012151;
    BEGIN
      xRec := Rec;
      CALCFIELDS("Estimated Part", "Estimate Description");

      CurrLevel := Level;
      IF (sp1 = 0) AND (CurrLevel = 1) THEN CurrLevel := CurrLevel + 1;
      IF (sp2 = 0) AND (CurrLevel = 2) THEN CurrLevel := CurrLevel + 1;

      CopyRec := Rec;
      IF gvEstRec."No." <> CopyRec."Estimate No." THEN
        gvEstRec.GET(CopyRec."Estimate No.");
      CopyRec."Estimate No." := gvEstRec."Copied from Cost Estimate";
      GetSummary;

      PartCostAmount := CumLaborDec + CumMatDec + CumSubcDec + CumPlantDec;
      PartCostPrice := ROUND(PartCostAmount/CopyRec.GetPartQuantity());

      CALCFIELDS("Estimated Part");
      GetSubEstTotals;

      "Markup %" := GetMarkup("Offer Price",CalculatedCostPrice);
      "Margin %" := GetMargin("Offer Price",CalculatedCostPrice);

      IF "Estimate No." <> '' THEN BEGIN
        lvEstRec.GET("Estimate No.");
        EstFixed := lvEstRec.Fixed
      END;

      OfferNotFixed := ((NOT "Offer fixed") AND (NOT EstFixed));
    END;

    LOCAL PROCEDURE PartOnFormat@19041823();
    BEGIN
      PartIndent := Level;
      IF ("Estimated Part" <> 0) OR ("Quantity Model Exist") THEN
        PartEmphasize := TRUE;
    END;

    LOCAL PROCEDURE DescriptionOnFormat@19023855();
    BEGIN
      DescriptionIndent := Level;
      IF "Estimated Part" <> 0 THEN
        DescriptionEmphasize := TRUE;
    END;

    PROCEDURE WarnForIllegalCode@1100409000(IEstimateNo@1100409000 : Code[20]);
    VAR
      SubEstimatePart@1100409001 : Record 11012153;
      FormatManagement@1100409002 : Codeunit 11012022;
    BEGIN
      SubEstimatePart.SETRANGE("Estimate No.", IEstimateNo);
      IF SubEstimatePart.FINDSET THEN
        REPEAT
          IF FormatManagement.IsIllegalCode(SubEstimatePart.Part) THEN BEGIN
            MESSAGE(Text013);
            EXIT;
          END;
        UNTIL SubEstimatePart.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

