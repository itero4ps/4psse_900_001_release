OBJECT Page 11012390 Import External Budget
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import External Budget;
    SaveValues=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=NavigatePage;
    OnInit=BEGIN
             ElementOptoutVisible := TRUE;
             OptionBudgetVisible := TRUE;
             SettlementQuantityVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF OriginCde = '' THEN
                   ERROR('');

                 JobSetup.GET;

                 FileNameInputVISIBLE := ((OriginCde = 'TRAD-TXT') OR (OriginCde = 'IBIS-INFRA'));
                 SetElementOptoutVisible();

                 OptionBudgetVisible := (FromOptionBudget AND (OriginCde <> 'IBIS-INFRA'));
                 SettlementQuantityVisible := (FromSettlementQuantity AND (OriginCde <> 'IBIS-INFRA'));

                 //db.sn, 18-04-13
                 FillElementVisible := (OriginCde = 'KPDGWW-XML');
                 FillCostObjectVisible := (OriginCde = 'KPDGWW-XML');
                 DeriveCostTypeVisible := (OriginCde = 'KPDGWW-XML');
                 //db.en, 18-04-13

                 // db00404.sn
                 FillElementWith2Visible := (OriginCde = 'CUF-XML-WECAP');
                 CreateTenderEntriesVisible := (OriginCde = 'CUF-XML-WECAP');
                 // db00404.en
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525000;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 3       ;2   ;Action    ;
                      CaptionML=ENU=&Import;
                      InFooterBar=Yes;
                      Image=Report;
                      OnAction=BEGIN
                                 CurrPage.EDITABLE(FALSE);
                                 FinishWizard;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190002;1;Field  ;
                CaptionML=ENU=Import External Budget;
                Style=Strong;
                StyleExpr=TRUE }

    { 1   ;1   ;Field     ;
                CaptionML=ENU=Project;
                SourceExpr=ProjectCde;
                OnValidate=BEGIN
                             ValidateProject(ProjectCde);
                           END;

                OnLookup=BEGIN
                           ProjRec."No.":= ProjectCde;
                           IF PAGE.RUNMODAL(PAGE::"Job List",ProjRec) = ACTION::LookupOK THEN BEGIN
                             ValidateProject(ProjRec."No.");
                             ProjectCde := ProjRec."No.";
                           END;
                         END;
                          }

    { 4   ;1   ;Field     ;
                CaptionML=ENU=Adjustment;
                SourceExpr=AdjustmentCde;
                OnValidate=BEGIN
                             IF AdjustmentCde <> '' THEN
                               AdjustmentRec.GET(ProjectCde,AdjustmentCde);
                           END;

                OnLookup=BEGIN
                           AdjustmentRec.SETRANGE("Project No.",ProjectCde);
                           IF PAGE.RUNMODAL(PAGE::"Budget Adjustment List",AdjustmentRec) = ACTION::LookupOK THEN
                             AdjustmentCde := AdjustmentRec."No.";
                         END;
                          }

    { 6   ;1   ;Field     ;
                CaptionML=ENU=Extension Contract;
                SourceExpr=ExtensionCde;
                OnValidate=BEGIN
                             IF ExtensionCde <> '' THEN
                               ExtensionRec.GET(ProjectCde,ExtensionCde);
                           END;

                OnLookup=BEGIN
                           ExtensionRec.SETRANGE("Project No.",ProjectCde);
                           IF PAGE.RUNMODAL(PAGE::"Extension List",ExtensionRec) = ACTION::LookupOK THEN
                             ExtensionCde := ExtensionRec."Contract No.";
                         END;
                          }

    { 1100485001;1;Field  ;
                Name=OnlyBudgetLines;
                CaptionML=ENU=Import Budget Lines only;
                SourceExpr=OnlyBudgetLines;
                Visible=OptionBudgetVisible }

    { 1210190012;1;Field  ;
                Name=HouseModel;
                CaptionML=ENU=House Model;
                SourceExpr=HouseModelCde;
                Visible=OptionBudgetVisible;
                OnValidate=BEGIN
                             IF HouseModelCde <> '' THEN
                               HouseModelRec.GET(ProjectCde, HouseModelCde);
                           END;

                OnLookup=BEGIN
                           LookupHouseModel();
                         END;
                          }

    { 1100485000;1;Field  ;
                Name=Plot;
                CaptionML=ENU=Plotno.;
                SourceExpr=PlotCde;
                Visible=OptionBudgetVisible;
                OnValidate=BEGIN
                             IF PlotCde <> '' THEN
                               PlotRec.GET(ProjectCde, PlotCde);
                           END;

                OnLookup=BEGIN
                           LookupPlot();
                         END;
                          }

    { 1210190003;1;Field  ;
                Name=MainGroup;
                CaptionML=ENU=Option Main Group;
                SourceExpr=MainGroupCde;
                Visible=OptionBudgetVisible;
                OnValidate=BEGIN
                             IF MainGroupCde <> '' THEN
                               MainGroupRec.GET(ProjectCde, MainGroupCde);
                           END;

                OnLookup=BEGIN
                           LookupMainGroup();
                         END;
                          }

    { 1210190007;1;Field  ;
                Name=Group;
                CaptionML=ENU=Option Group;
                SourceExpr=GroupCde;
                Visible=OptionBudgetVisible;
                OnValidate=BEGIN
                             IF GroupCde <> '' THEN
                               GroupRec.GET(ProjectCde, GroupCde);
                           END;

                OnLookup=BEGIN
                           LookupGroup();
                         END;
                          }

    { 1210190009;1;Field  ;
                Name=SubGroup;
                CaptionML=ENU=Option Sub Group;
                SourceExpr=SubGroupCde;
                Visible=OptionBudgetVisible;
                OnValidate=BEGIN
                             IF SubGroupCde <> '' THEN
                               SubGroupRec.GET(ProjectCde, SubGroupCde);
                           END;

                OnLookup=BEGIN
                           LookupSubgroup();
                         END;
                          }

    { 8   ;1   ;Field     ;
                Name=Option;
                CaptionML=ENU=Option;
                SourceExpr=OptionCde;
                Visible=OptionBudgetVisible;
                OnValidate=BEGIN
                             ValidateOption();
                           END;

                OnLookup=BEGIN
                           LookupOption();
                         END;
                          }

    { 1100528201;1;Field  ;
                Name=HouseModel2;
                CaptionML=ENU=House Model;
                SourceExpr=HouseModelCde;
                Visible=SettlementQuantityVisible;
                OnValidate=BEGIN
                             IF HouseModelCde <> '' THEN
                               HouseModelRec.GET(ProjectCde, HouseModelCde);
                           END;

                OnLookup=BEGIN
                           LookupHouseModel();
                         END;
                          }

    { 1100528200;1;Field  ;
                Name=SettlementQuantity;
                CaptionML=ENU=Settlement Quantity;
                SourceExpr=SettlementQuantityCde;
                Visible=SettlementQuantityVisible;
                OnValidate=BEGIN
                             ValidateSettlQuantity();
                           END;

                OnLookup=BEGIN
                           LookupSettlQuantity();
                         END;
                          }

    { 1210190004;1;Field  ;
                Name=ElementOptout;
                CaptionML=ENU=Do not process Elements;
                SourceExpr=ElementOptout;
                Visible=ElementOptoutVisible }

    { 1210190001;1;Field  ;
                Name=FileNameInput;
                CaptionML=ENU=Filename;
                SourceExpr=FileNameTxt;
                Visible=FileNameInputVISIBLE;
                OnAssistEdit=VAR
                               FileAbsPathName@1100525000 : Text;
                             BEGIN
                               JobSetup.GET;
                               IF Folder = '' THEN
                                 Folder := JobSetup."Pathname External Estimates";
                               IF FileMgt.SelectFile('txt', Folder, FileNameTxt, FileAbsPathName) THEN
                                 IF FileNameTxt <> '' THEN
                                   FileNameTxt := COPYSTR(FileNameTxt, 2, STRLEN(FileNameTxt) - 5);  //verwijderen voorloopletter + extensie
                             END;
                              }

    { 1100525001;1;Field  ;
                Name=FillElementWith;
                CaptionML=ENU=Fill Element with;
                OptionCaptionML=ENU=Sort Code,Tender Code;
                SourceExpr=FillElementWith;
                Visible=FillElementVisible }

    { 1100525002;1;Field  ;
                Name=FillCostObjectWith;
                CaptionML=ENU=Fill Cost Object with;
                OptionCaptionML=ENU=Code,Sort Code;
                SourceExpr=FillCostObjectWith;
                Visible=FillCostObjectVisible }

    { 1100525003;1;Field  ;
                Name=DeriveCostTypeFrom;
                CaptionML=ENU=Derive Cost Type From;
                OptionCaptionML=ENU=Cost Type KPD,Cost Object Navision;
                SourceExpr=DeriveCostTypeFrom;
                Visible=DeriveCostTypeVisible }

    { 1100525005;1;Field  ;
                Name=FillElementWith2;
                CaptionML=ENU=Fill Element with;
                OptionCaptionML=ENU=" ,Bewakingscode WECAP";
                SourceExpr=FillElementWith2;
                Visible=FillElementWith2Visible }

    { 1100525004;1;Field  ;
                Name=CreateTenderEntries;
                CaptionML=ENU=Tender Entries;
                SourceExpr=CreateTenderEntries;
                Visible=CreateTenderEntriesVisible }

  }
  CODE
  {
    VAR
      Text000@11012012 : TextConst 'ENU=Combinations of Adjustments, Extension and Options not allowed';
      JobSetup@1100485002 : Record 315;
      ProjRec@11012000 : Record 11072003;
      AdjustmentRec@11012001 : Record 11012003;
      ExtensionRec@11012002 : Record 11012004;
      HouseModelRec@1210190010 : Record 11012501;
      PlotRec@1100485000 : Record 11012500;
      MainGroupRec@1210190011 : Record 11012509;
      GroupRec@1210190012 : Record 11012504;
      SubGroupRec@1210190013 : Record 11012505;
      OptionRec@11012003 : Record 11012502;
      ErrorRec@1210190000 : Record 11012051;
      BudgetRec@1100485005 : Record 11012001;
      FileMgt@1100525006 : Codeunit 419;
      ProjectCde@11012004 : Code[20];
      ExtensionCde@11012005 : Code[10];
      AdjustmentCde@11012006 : Code[10];
      OptionCde@11012007 : Code[20];
      OriginCde@11012008 : Code[20];
      PlotCde@1100485001 : Code[20];
      HouseModelCde@1210190009 : Code[20];
      MainGroupCde@1210190008 : Code[20];
      GroupCde@1210190007 : Code[20];
      SubGroupCde@1210190006 : Code[20];
      Folder@1100485004 : Text[250];
      FileNameTxt@1210190002 : Text[100];
      ElementOptout@1210190005 : Boolean;
      OnlyBudgetLines@1100485003 : Boolean;
      Text002@1100485006 : TextConst 'ENU=Budget Lines are already present. Continue import?';
      FromOptionBudget@1100485007 : Boolean;
      Text003@1100485008 : TextConst 'ENU=When called from the Option Budget the Option Code is mandatory.';
      Text004@1100485009 : TextConst 'ENU=Import Option Budget not allowed for Option with status ''%1''.';
      Text005@1100485010 : TextConst 'ENU=Project may not be empty.';
      OptionBudgetVisible@19006080 : Boolean INDATASET;
      ElementOptoutVisible@19064248 : Boolean INDATASET;
      FileNameInputVISIBLE@1210190001 : Boolean INDATASET;
      FillElementWith@1100525001 : Option;
      FillCostObjectWith@1100525000 : Option;
      FillElementVisible@1100525002 : Boolean INDATASET;
      FillCostObjectVisible@1100525003 : Boolean INDATASET;
      DeriveCostTypeFrom@1100525004 : 'CostTypeKPD,CostObjectNav';
      DeriveCostTypeVisible@1100525005 : Boolean INDATASET;
      CreateTenderEntries@1100525010 : Boolean;
      FillElementWith2@1100525009 : ' ,Bewakingscode WECAP';
      CreateTenderEntriesVisible@1100525008 : Boolean INDATASET;
      FillElementWith2Visible@1100525007 : Boolean INDATASET;
      SettlementQuantityCde@1100528200 : Code[20];
      SettlementQuantityRec@1100528201 : Record 11072243;
      SettlementQuantityVisible@1100528202 : Boolean INDATASET;
      FromSettlementQuantity@1100528203 : Boolean;
      Text006@1100528204 : TextConst 'ENU=When called from the Settlement Quantities the Settlement Quantity is mandatory.';

    PROCEDURE DetermineDefaults@1(lProjectCde@11012000 : Code[20];lAdjustmentCde@11012001 : Code[10];lExtensionCde@11012002 : Code[10];lOptionCde@11012003 : Code[20];lOriginCde@11012004 : Code[20]);
    VAR
      ProjRec@1100525001 : Record 11072003;
      ProjSetup@1100525000 : Record 315;
    BEGIN
      ProjectCde := lProjectCde;
      AdjustmentCde := lAdjustmentCde;
      ExtensionCde := lExtensionCde;
      OptionCde := lOptionCde;
      OriginCde := lOriginCde;

      //db.sn, 18-04-13
      ProjSetup.GET;
      IF ProjRec.GET(ProjectCde) THEN BEGIN
        FillElementWith := ProjRec."Fill Element with (KPD)";
        FillCostObjectWith := ProjRec."Fill Cost Object with (KPD)";
      END ELSE BEGIN
        FillElementWith := ProjSetup."Fill Element with (KPD)";
        FillCostObjectWith := ProjSetup."Fill Cost Object with (KPD)";
      END;
      //db.en, 18-04-13

      // dp00404.sn
      IF OriginCde = 'CUF-XML-WECAP' THEN BEGIN
        FillElementWith2 := 1;
        CreateTenderEntries := TRUE;
      END;
      // dp00404.en
    END;

    PROCEDURE SetExtraDefaultsOptionBudget@1210190000(IHouseModel@11012000 : Code[20];IMainGroup@11012003 : Code[20];IGroup@11012004 : Code[20];ISubGroup@1210190000 : Code[20];IPlotNo@1100485000 : Code[20]);
    BEGIN
      FromOptionBudget := TRUE;
      HouseModelCde := IHouseModel;
      MainGroupCde := IMainGroup;
      GroupCde := IGroup;
      SubGroupCde := ISubGroup;
      PlotCde := IPlotNo;
    END;

    PROCEDURE SetElementOptoutVisible@1100485006();
    VAR
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      ElementOptoutVisible := FALSE;
      IF ((OriginCde = 'TRAD-CSV') OR (OriginCde = 'TRAD-TXT') OR (OriginCde = 'TRAD-XML')) THEN BEGIN
        IF (FromOptionBudget AND (ProjectCde = '')) THEN BEGIN
          ElementOptoutVisible := TRUE;
          EXIT;
        END;

        lvProjRec.GET(ProjectCde);
        IF (NOT lvProjRec."Posting Element Mandatory") THEN
          ElementOptoutVisible := TRUE;
      END;
    END;

    PROCEDURE FinishWizard@1100525000();
    BEGIN
      StartImport;
    END;

    PROCEDURE StartImport@1210190002();
    VAR
      lvImportTradTXT@1100485001 : Codeunit 11012018;
      lvImportTRAD@1100485003 : XMLport 11012397;
      lvImportCUF@1100485002 : XMLport 11012391;
      lvImportDuncan@1100485000 : XMLport 11012394;
      lvImportIbisInfra@1100485004 : Codeunit 11012018;
      lvImportKPD@1000000000 : XMLport 11012395;
      lvImportKPDgww@1100525000 : XMLport 11012392;
    BEGIN
      IF ((ExtensionCde <> '') AND (AdjustmentCde <> '')) OR
         ((ExtensionCde <> '') AND (OptionCde <> '')) OR
         ((OptionCde <> '') AND (AdjustmentCde <> '')) OR
         ((SettlementQuantityCde <> '') AND (OptionCde <> '')) OR
         ((SettlementQuantityCde <> '') AND (ExtensionCde  <> '')) OR
         ((SettlementQuantityCde <> '') AND (AdjustmentCde <> '')) THEN
         ERROR(Text000);

      IF (ExtensionCde = '') AND (AdjustmentCde = '') AND (OptionCde = '') AND (SettlementQuantityCde= '') THEN BEGIN
        ProjRec.GET(ProjectCde);
        ProjRec.TESTFIELD("Budget Fixed",FALSE);
      END;

      ValidateProject(ProjectCde);
      ValidateOption();
      ValidateSettlQuantity();

      //Check Budget Lines Present
      BudgetRec.SETRANGE("Project No.", ProjectCde);
      BudgetRec.SETRANGE("Extension Contract", ExtensionCde);
      BudgetRec.SETRANGE(Adjustment, AdjustmentCde);
      BudgetRec.SETRANGE(Option, OptionCde);
      IF FromSettlementQuantity THEN BEGIN
        IF SettlementQuantityCde <> '' THEN
          BudgetRec.SETRANGE("Settlement Quantity Code", SettlementQuantityCde)
        ELSE
          BudgetRec.SETFILTER("Settlement Quantity Code", '<>%1', '');
      END;

      BudgetRec.SETRANGE("Budget Summary Line", FALSE);
      IF NOT BudgetRec.ISEMPTY THEN
        IF NOT CONFIRM(Text002) THEN
          EXIT;
      //

      ErrorRec.RESET;
      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"Import Budget");
      ErrorRec.DELETEALL;
      COMMIT;

      IF (NOT ElementOptoutVisible) AND ElementOptout THEN ElementOptout := FALSE;

      CASE OriginCde OF
        'TRAD-CSV':
          BEGIN
            IF FromSettlementQuantity THEN
              lvImportTRAD.SetDefaultsSettlQuantity(SettlementQuantityCde);
            lvImportTRAD.DetermineSelection(
              ProjectCde,AdjustmentCde,ExtensionCde,HouseModelCde,MainGroupCde,GroupCde,SubGroupCde,OptionCde,ElementOptout,PlotCde);
            lvImportTRAD.RUN;
          END;
        'TRAD-TXT':
          BEGIN
            IF FromSettlementQuantity THEN
              lvImportTradTXT.SetDefaultsSettlQuantity(SettlementQuantityCde);
            lvImportTradTXT.ImportTradTxtBudget(
              ProjectCde,AdjustmentCde,ExtensionCde,HouseModelCde,MainGroupCde,GroupCde,
              SubGroupCde,OptionCde,Folder,FileNameTxt,PlotCde,ElementOptout);
            COMMIT;
          END;
        'TRAD-XML':
          BEGIN
            ImportFromTRADXML;
          END;
        'IBIS-INFRA':
          lvImportIbisInfra.ImportIbisInfraBudget(ProjectCde,AdjustmentCde,ExtensionCde,OnlyBudgetLines,Folder,FileNameTxt);
        'CUF':
          BEGIN
            lvImportCUF.DetermineSelection(
              ProjectCde,AdjustmentCde,ExtensionCde,HouseModelCde,MainGroupCde,GroupCde,SubGroupCde,OptionCde,PlotCde);
            lvImportCUF.RUN;
          END;
        'CUF-XML':
          BEGIN
            ImportFromCUFXML;
          END;
        'CUF-XML-WECAP':
          BEGIN
            ImportFromCUFXMLWECAP;
          END;
        'DUNCAN':
          BEGIN
            lvImportDuncan.DetermineSelection(
              ProjectCde,AdjustmentCde,ExtensionCde,HouseModelCde,MainGroupCde,GroupCde,SubGroupCde,OptionCde,PlotCde);
            lvImportDuncan.RUN;
          END;
        'KPDCONSTRUCT':
          BEGIN
            lvImportKPD.DetermineSelection(
              ProjectCde,AdjustmentCde,ExtensionCde,HouseModelCde,MainGroupCde,GroupCde,SubGroupCde,OptionCde,PlotCde);
            lvImportKPD.RUN;
          END;
        'KPDGWW':
          BEGIN
            lvImportKPDgww.DetermineSelection(
              ProjectCde,AdjustmentCde,ExtensionCde,HouseModelCde,MainGroupCde,GroupCde,SubGroupCde,OptionCde,PlotCde);
            lvImportKPDgww.RUN;
          END;
        'KPDGWW-XML':
          BEGIN
            ImportFromKPDGWWXML;  //DP00200
          END;
      END;

      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"Import Budget");
      IF ErrorRec.FIND('-') THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
      END;
    END;

    PROCEDURE ValidateProject@1100485001(IProjNo@1100485000 : Code[20]);
    BEGIN
      IF IProjNo <> '' THEN BEGIN
        ProjRec.GET(IProjNo);
        IF OriginCde = 'KPDGWW-XML'THEN BEGIN  //db, 22-04-13
          ProjRec."Fill Element with (KPD)" := FillElementWith;
          ProjRec."Fill Cost Object with (KPD)" :=  FillCostObjectWith;
          ProjRec.MODIFY;
        END;
      END ELSE BEGIN
        IF NOT FromOptionBudget OR FromSettlementQuantity THEN
          ERROR(Text005);
      END;

      SetElementOptoutVisible();
    END;

    PROCEDURE LookupPlot@1100485000();
    BEGIN
      WITH PlotRec DO BEGIN
        IF ProjectCde <> '' THEN
          SETRANGE("Project No.", ProjectCde)
        ELSE
          SETRANGE("Project No.", '');
        IF HouseModelCde <> '' THEN
          SETRANGE("House Model",HouseModelCde);
        "Project No." := ProjectCde;
        "Plot No." := PlotCde;
        IF ProjectCde <> '' THEN
          IF PAGE.RUNMODAL(PAGE::"Plot Number List", PlotRec) = ACTION::LookupOK THEN
            PlotCde := PlotRec."Plot No.";
      END;
    END;

    PROCEDURE LookupHouseModel@1210190010();
    BEGIN
      WITH HouseModelRec DO BEGIN
        IF ProjectCde <> '' THEN
          SETRANGE("Project No.", ProjectCde)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjectCde;
        Model := HouseModelCde;
        IF ProjectCde <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"House Models by Project List", HouseModelRec) = ACTION::LookupOK THEN
            HouseModelCde := Model;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"House Model List", HouseModelRec) = ACTION::LookupOK THEN
            HouseModelCde := Model;
        END;
      END;
    END;

    PROCEDURE LookupMainGroup@1210190008();
    BEGIN
      WITH MainGroupRec DO BEGIN
        IF ProjectCde <> '' THEN
          SETRANGE("Project No.", ProjectCde)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjectCde;
        Code := MainGroupCde;
        IF ProjectCde <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Main Group List", MainGroupRec) = ACTION::LookupOK THEN
            MainGroupCde := Code;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Main Group List", MainGroupRec) = ACTION::LookupOK THEN
            MainGroupCde := Code;
        END;
      END;
    END;

    PROCEDURE LookupGroup@1210190007();
    BEGIN
      WITH GroupRec DO BEGIN
        IF ProjectCde <> '' THEN
          SETRANGE("Project No.", ProjectCde)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjectCde;
        Code := GroupCde;
        IF ProjectCde <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Groups", GroupRec) = ACTION::LookupOK THEN
            GroupCde := Code;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Groups", GroupRec) = ACTION::LookupOK THEN
            GroupCde := Code;
        END;
      END;
    END;

    PROCEDURE LookupSubgroup@1210190006();
    BEGIN
      WITH SubGroupRec DO BEGIN
        IF ProjectCde <> '' THEN
          SETRANGE("Project No.", ProjectCde)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjectCde;
        Code := SubGroupCde;
        IF ProjectCde <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Sub Groups", SubGroupRec) = ACTION::LookupOK THEN
            SubGroupCde := Code;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Sub Groups", SubGroupRec) = ACTION::LookupOK THEN
            SubGroupCde := Code;
        END;
      END;
    END;

    PROCEDURE LookupOption@1210190005();
    BEGIN
      WITH OptionRec DO BEGIN
        IF ProjectCde <> '' THEN
          SETRANGE("Project No.", ProjectCde)
         ELSE
          SETRANGE("Project No.", '');
        SETRANGE("Plot No.", PlotCde);
        "Project No." := ProjectCde;
        "Plot No." := PlotCde;
        "House Model" := HouseModelCde;
        "Main Group" := MainGroupCde;
        Group := GroupCde;
        "Sub Group" := SubGroupCde;
        Option := OptionCde;
        IF PAGE.RUNMODAL(PAGE::"Option List",OptionRec) = ACTION::LookupOK THEN
          OptionCde := Option;
      END;
    END;

    PROCEDURE ValidateOption@1210190001();
    BEGIN
      IF OptionCde <> '' THEN BEGIN
        IF NOT FromOptionBudget THEN BEGIN
          OptionCde := '';  //* Dan leeg maken want 'Optie Code' gevuld is indicatie dat toevoegen in
          EXIT;             //* de optiebegroting ipv in de werkbegroting
        END;
        OptionRec.GET(ProjectCde, PlotCde, HouseModelCde, MainGroupCde, GroupCde, SubGroupCde, OptionCde);
        IF (ProjectCde <> '') AND (PlotCde <> '') AND
           (OptionRec.Status IN [OptionRec.Status::Order,OptionRec.Status::Invoice])
        THEN
          ERROR(Text004, OptionRec.Status);
          //* Niet toestaan dan allerlei problemen oa: mogelijk al termijnen aangemaakt/gefact,
          //* zou dan ook naar werkbegroting moeten (via functie OB->WB), hoe dan omgaan met
          //* fouten tijdens import, etc. Is so wie so niet logisch om dan nog/pas te importeren.
      END ELSE BEGIN
        IF FromOptionBudget THEN
          ERROR(Text003);  //* Moet dan gevuld zijn is indicatie optiebegroting ipv werkbegroting
      END;
    END;

    PROCEDURE SetExtraDefaultsSettlQuantity@1100528203(IHouseModelCde@1100528200 : Code[20];ISettlementQuantityCde@11012000 : Code[20]);
    BEGIN
      FromSettlementQuantity := TRUE;
      SettlementQuantityCde := ISettlementQuantityCde;
      HouseModelCde := IHouseModelCde;
    END;

    PROCEDURE LookupSettlQuantity@1100528206();
    BEGIN
      WITH SettlementQuantityRec DO BEGIN
        SETRANGE("Project No.", ProjectCde);
        SETRANGE(Code, SettlementQuantityCde);
        "Project No." := ProjectCde;
        Code := SettlementQuantityCde;
        IF PAGE.RUNMODAL(PAGE::"Settlement Quantity List",SettlementQuantityRec) = ACTION::LookupOK THEN
          SettlementQuantityCde := Code;
      END;
    END;

    PROCEDURE ValidateSettlQuantity@1100528205();
    BEGIN
      IF SettlementQuantityCde <> '' THEN BEGIN
        IF NOT FromSettlementQuantity THEN BEGIN
          SettlementQuantityCde := '';  //* Dan leeg maken want 'Verrekenbare hoeveelheid code' gevuld is indicatie van toevoegen in
          EXIT;                         //* de verrekenbare hoeveelheden begroting ipv in de werkbegroting
        END;
        SettlementQuantityRec.GET(ProjectCde, HouseModelCde, SettlementQuantityCde);
        { TODO Status toevoegen van waar af het niet meer mogelijk is de begroting te overschrijven
        IF (SettlementQuantityRec.Status IN [SettlementQuantityRec.Status::Order, SettlementQuantityRec.Status::Invoice])
        THEN
          ERROR(Text???, SettlementQuantityRec.Status);
          //* Niet toestaan dan allerlei problemen oa: mogelijk al termijnen aangemaakt/gefact,
          //* zou dan ook naar werkbegroting moeten (via functie OB->WB), hoe dan omgaan met
          //* fouten tijdens import, etc. Is so wie so niet logisch om dan nog/pas te importeren.
        }
      END ELSE BEGIN
      //  IF FromSettlementQuantity THEN
      //    ERROR(Text006);  //* Moet dan gevuld zijn is indicatie verrekenbare hoeveelheid ipv werkbegroting
      END;
    END;

    LOCAL PROCEDURE ImportFromCUFXML@2();
    VAR
      JobSetup@1006 : Record 315;
      FileName@1004 : Text[250];
      StartFileName@1003 : Text[250];
      FileManagement@1000 : Codeunit 419;
      ParseCUFXMLDocument@1100525000 : Codeunit 11012390;
    BEGIN
      JobSetup.GET;

      StartFileName := JobSetup."Pathname External Estimates";
      IF StartFileName <> '' THEN BEGIN
        IF StartFileName[STRLEN(StartFileName)] <> '\' THEN
          StartFileName := StartFileName + '\';
        StartFileName := StartFileName + '*.xml';
      END;
      FileName := FileManagement.OpenFileDialog('',StartFileName,'*.xml|*.xml');

      IF FileName = '' THEN
        EXIT;

      ParseCUFXMLDocument.InitCodeunit(ProjectCde,AdjustmentCde,ExtensionCde,
        HouseModelCde,MainGroupCde,GroupCde,SubGroupCde,OptionCde,PlotCde);
      ParseCUFXMLDocument.ProcessFile(FileName);
    END;

    LOCAL PROCEDURE ImportFromTRADXML@1210190003();
    VAR
      JobSetup@1006 : Record 315;
      FileName@1004 : Text[250];
      StartFileName@1003 : Text[250];
      FileManagement@1000 : Codeunit 419;
      ParseTRADXMLDocument@1100525000 : Codeunit 11012391;
    BEGIN
      JobSetup.GET;

      StartFileName := JobSetup."Pathname External Estimates";
      IF StartFileName <> '' THEN BEGIN
        IF StartFileName[STRLEN(StartFileName)] <> '\' THEN
          StartFileName := StartFileName + '\';
        StartFileName := StartFileName + '*.xml';
      END;
      FileName := FileManagement.OpenFileDialog('',StartFileName,'*.xml|*.xml');
      IF FileName = '' THEN
        EXIT;

      IF FromSettlementQuantity THEN
       ParseTRADXMLDocument.SetDefaultsSettlQuantity(SettlementQuantityCde); //Must be set before ...InitCodeuni
      ParseTRADXMLDocument.InitCodeunit(ProjectCde,AdjustmentCde,ExtensionCde,
        HouseModelCde,MainGroupCde,GroupCde,SubGroupCde,OptionCde,PlotCde,ElementOptout);
      ParseTRADXMLDocument.ProcessFile(FileName);
    END;

    LOCAL PROCEDURE ImportFromKPDGWWXML@1100409001();
    VAR
      JobSetup@1006 : Record 315;
      FileName@1004 : Text[250];
      StartFileName@1003 : Text[250];
      ParseGWWXMLDocument@1100525000 : Codeunit 11012392;
      FileMgt@1100525001 : Codeunit 419;
      FilterString@1100525002 : Text;
    BEGIN
      //DP00200
      JobSetup.GET;

      StartFileName := JobSetup."Pathname External Estimates";
      IF StartFileName <> '' THEN BEGIN
        IF StartFileName[STRLEN(StartFileName)] <> '\' THEN
          StartFileName := StartFileName + '\';
        StartFileName := StartFileName + '*.xml';
      END;
      FilterString := FileMgt.GetToFilterText('', '.xml');

      FileName := FileMgt.OpenFileDialog('',StartFileName, FilterString);
      IF FileName = '' THEN
        EXIT;

      ParseGWWXMLDocument.InitCodeunit(ProjectCde,AdjustmentCde,ExtensionCde,
        HouseModelCde,MainGroupCde,GroupCde,SubGroupCde,OptionCde,PlotCde,
        FillElementWith,FillCostObjectWith,DeriveCostTypeFrom);  //db, 26-04-13
      ParseGWWXMLDocument.ProcessFile(FileName);
    END;

    LOCAL PROCEDURE ImportFromCUFXMLWECAP@1100525003();
    VAR
      JobSetup@1006 : Record 315;
      FileName@1004 : Text[250];
      StartFileName@1003 : Text[250];
      ParseCUFXMLDocument@1100525000 : Codeunit 11012393;
      FileMgt@1100525001 : Codeunit 419;
      FilterString@1100525002 : Text;
    BEGIN
      // dp00404.n
      JobSetup.GET();

      StartFileName := JobSetup."Pathname External Estimates";
      IF StartFileName <> '' THEN BEGIN
        IF StartFileName[STRLEN(StartFileName)] <> '\' THEN
          StartFileName := StartFileName + '\';
        StartFileName := StartFileName + '*.xml';
      END;
      FilterString := FileMgt.GetToFilterText('', '.xml');

      FileName := FileMgt.OpenFileDialog('',StartFileName, FilterString);
      IF FileName = '' THEN
        EXIT;

      ParseCUFXMLDocument.InitCodeunit(ProjectCde, AdjustmentCde, ExtensionCde,
        HouseModelCde, MainGroupCde, GroupCde, SubGroupCde, OptionCde, PlotCde, FillElementWith2, CreateTenderEntries);
      ParseCUFXMLDocument.ProcessFile(FileName);
    END;

    BEGIN
    END.
  }
}

