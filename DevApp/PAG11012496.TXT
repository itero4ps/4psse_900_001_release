OBJECT Page 11012496 Get Options Other Company
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Get Standard Options from Other Company;
    PageType=Card;
    OnOpenPage=BEGIN
                 ProjectSetup.GET;
                 UserSetup.GET(USERID);
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;Action    ;
                      CaptionML=ENU=&Run;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvDummyOptionSurchRec@1100485002 : Record 11012512;
                                 lvBuyerMgtCU@1100485001 : Codeunit 11012500;
                               BEGIN
                                 IF gCopyModels OR gCopyOptions THEN
                                   IF (CompanyOrigin <> '') AND (CompanyOrigin <> COMPANYNAME) THEN
                                   BEGIN
                                 //    IF ProjectSetup."Resp.Person Exchange Procedure" <> UPPERCASE(USERID) THEN BEGIN
                                     IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                        [UserSetup."Buyers Mgt. Exchange"::"Company Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                                     THEN BEGIN
                                       MESSAGE(Text013);
                                       EXIT;
                                     END;
                                     CopyBase;
                                   END;

                                   //IF UpdateOptions THEN BEGIN
                                   //Doorrekenen toeslagen bij opties waar de begroting is aangepast vanuit de
                                   //integratie met bouw
                                   OptRec.RESET;
                                   OptRec.SETFILTER("Project No.", '%1', '');
                                   OptRec.SETFILTER("Plot No.", '%1', '');
                                   OptRec.SETRANGE("Budget Changed by Integration", TRUE);
                                   IF OptRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                     REPEAT
                                       OptRec."Budget Changed by Integration" := FALSE;
                                       OptRec."Transaction Date In" := CURRENTDATETIME;
                                       OptRec.MODIFY;
                                       lvBuyerMgtCU.BmCalcSurchargesUpdateOption('',
                                                                                 '',
                                                                                 OptRec."House Model",
                                                                                 OptRec."Main Group",
                                                                                 OptRec.Group,
                                                                                 OptRec."Sub Group",
                                                                                 OptRec.Option,
                                                                                 FALSE,
                                                                                 lvDummyOptionSurchRec);
                                     UNTIL OptRec.NEXT = 0;
                                   END;
                                   OptRec.RESET;
                                 //END;

                                 COMMIT;

                                 //IF LinesPrinted AND PrintActivityDetails THEN BEGIN
                                 //  ActivityReport.RUNMODAL;
                                 //END;

                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 6   ;1   ;Group     ;
                CaptionML=ENU=From Company }

    { 1210190003;2;Field  ;
                SourceExpr=CompanyOrigin;
                Style=Strong;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             ValidateCompanyOrigin;
                           END;

                OnLookup=VAR
                           Company@1100528600 : Record 2000000006;
                         BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Company List (NEW)", Company) = ACTION::LookupOK THEN BEGIN
                             CompanyOrigin := Company.Name;
                             ValidateCompanyOrigin;
                           END;
                         END;
                          }

    { 1210190005;1;Group  ;
                CaptionML=ENU=Copy;
                GroupType=Group }

    { 1210190004;2;Field  ;
                CaptionML=ENU=House Model;
                SourceExpr=gCopyModels;
                OnValidate=BEGIN
                             //IF (ProjectSetup."Resp.Person Exchange Procedure" <> UPPERCASE(USERID)) AND (gCopyModels) THEN
                             //  ERROR(Text013);

                             IF gCopyModels THEN
                               IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                  [UserSetup."Buyers Mgt. Exchange"::"Company Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                               THEN
                                 ERROR(Text013);
                           END;
                            }

    { 1210190010;2;Field  ;
                CaptionML=ENU=Options;
                SourceExpr=gCopyOptions;
                OnValidate=BEGIN
                             //IF (ProjectSetup."Resp.Person Exchange Procedure" <> UPPERCASE(USERID)) AND
                             //   (gCopyOptions) THEN
                             //  ERROR(Text013);

                             IF gCopyOptions THEN
                               IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                  [UserSetup."Buyers Mgt. Exchange"::"Company Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                               THEN
                                 ERROR(Text013);
                           END;
                            }

  }
  CODE
  {
    VAR
      ProjectSetup@1210190039 : Record 315;
      UserSetup@1100525000 : Record 91;
      ModelOrig@11012013 : Record 11012501;
      ModelDest@11012014 : Record 11012501;
      UnitOrig@1210190017 : Record 11012508;
      UnitDest@1210190018 : Record 11012508;
      OptRec@1210190002 : Record 11012502;
      OptOrig@11012017 : Record 11012502;
      MainGrpOrig@1210190054 : Record 11012509;
      MainGrpDest@1210190055 : Record 11012509;
      GrpOrig@11012019 : Record 11012504;
      GrpDest@11012020 : Record 11012504;
      SubGrpOrig@1210190020 : Record 11012505;
      SubGrpDest@1210190019 : Record 11012505;
      OptBudgSumOrig@1210190022 : Record 11012064;
      OptBudgSumDest@1100485015 : Record 11012064;
      OptBudgetOrig@11012025 : Record 11012503;
      OptBudgetDest@11012026 : Record 11012503;
      OptSurchRec@1210190057 : Record 11012512;
      BuyerMgtTextRec@1210190056 : Record 11012511;
      OptionTextOrigRec@1100485001 : Record 11012511;
      OptionTextDestRec@1100485002 : Record 11012511;
      CompanyOrigin@1210190008 : Text[30];
      gCopyModels@11012034 : Boolean;
      gCopyOptions@11012035 : Boolean;
      Text013@1210190050 : TextConst 'ENU=User has no permissions for standard data';
      Text015@1210190052 : TextConst 'ENU=No import from current company';
      DataNewBool@1100485000 : Boolean;
      DataDelBool@1100485006 : Boolean;
      DataUpdBool@1100485010 : Boolean;
      gRemoveRedundant@1100485020 : Boolean;

    PROCEDURE CopyBase@1210190001();
    BEGIN
      //**standard-house models + rooms
      IF gCopyModels THEN
        IF CopyHouseModels(CompanyOrigin) THEN;

      //**standard-options and option groups
      IF gCopyOptions THEN
        IF CopyOptions(CompanyOrigin) THEN;
    END;

    PROCEDURE CopyHouseModels@1210190000(iCompanyOrig@1210190000 : Text[30]) NewHouseModelsBool : Boolean;
    BEGIN
      NewHouseModelsBool := FALSE;
      ModelOrig.CHANGECOMPANY(iCompanyOrig);
      UnitOrig.CHANGECOMPANY(iCompanyOrig);
      ModelOrig.SETFILTER("Project No.", '%1', '');
      IF ModelOrig.FINDSET THEN BEGIN
        REPEAT
          IF ModelDest.GET('',ModelOrig.Model) THEN BEGIN
            ModelDest.TRANSFERFIELDS(ModelOrig, FALSE);
            ModelDest.MODIFY;
            DataUpdBool := TRUE;
          END ELSE BEGIN
            ModelDest.TRANSFERFIELDS(ModelOrig);
            ModelDest.INSERT;
            DataNewBool := TRUE;
            NewHouseModelsBool := TRUE;
          END;
          UnitOrig.SETFILTER("Project No.", '%1', '');
          UnitOrig.SETFILTER(Model, '%1', ModelOrig.Model);
          IF UnitOrig.FINDSET THEN BEGIN
            REPEAT
              IF UnitDest.GET('',UnitOrig.Model,UnitOrig.Unit) THEN BEGIN
                UnitDest.TRANSFERFIELDS(UnitOrig, FALSE);
                UnitDest.MODIFY;
                DataUpdBool := TRUE;
              END ELSE BEGIN
                UnitDest.TRANSFERFIELDS(UnitOrig);
                UnitDest.INSERT;
                DataNewBool := TRUE;
              END;
            UNTIL UnitOrig.NEXT = 0;
          END;
        UNTIL ModelOrig.NEXT = 0;
      END;


      //gRemoveRedundant is always FALSE
      IF gRemoveRedundant THEN
        RemoveOldModels;
    END;

    PROCEDURE CopyOptions@1210190006(iCompanyOrig@1210190001 : Text[30]) NewOptionsBool : Boolean;
    BEGIN
      NewOptionsBool := FALSE;

      //** Set Origin Company
      ModelOrig.CHANGECOMPANY(iCompanyOrig);
      MainGrpOrig.CHANGECOMPANY(iCompanyOrig);
      GrpOrig.CHANGECOMPANY(iCompanyOrig);
      SubGrpOrig.CHANGECOMPANY(iCompanyOrig);
      OptOrig.CHANGECOMPANY(iCompanyOrig);
      OptBudgetOrig.CHANGECOMPANY(iCompanyOrig);
      OptBudgSumOrig.CHANGECOMPANY(iCompanyOrig);
      OptionTextOrigRec.CHANGECOMPANY(iCompanyOrig);

      //**add/overwrite option groups (also main- and subgroups)
      MainGrpOrig.SETFILTER("Project No.", '%1', '');
      IF MainGrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT MainGrpDest.GET('',MainGrpOrig.Code) THEN BEGIN
            MainGrpDest.TRANSFERFIELDS(MainGrpOrig);
            MainGrpDest.INSERT;
          END ELSE BEGIN
            MainGrpDest.TRANSFERFIELDS(MainGrpOrig, FALSE);
            MainGrpDest.MODIFY;
          END;
        UNTIL MainGrpOrig.NEXT = 0;
      END;

      GrpOrig.SETFILTER("Project No.", '%1', '');
      IF GrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT GrpDest.GET('',GrpOrig.Code) THEN BEGIN
            GrpDest.TRANSFERFIELDS(GrpOrig);
            GrpDest.INSERT;
          END ELSE BEGIN
            GrpDest.TRANSFERFIELDS(GrpOrig, FALSE);
            GrpDest.MODIFY;
          END;
        UNTIL GrpOrig.NEXT = 0;
      END;

      SubGrpOrig.SETFILTER("Project No.", '%1', '');
      IF SubGrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT SubGrpDest.GET('', SubGrpOrig.Code) THEN BEGIN
            SubGrpDest.TRANSFERFIELDS(SubGrpOrig);
            SubGrpDest.INSERT;
          END ELSE BEGIN
            SubGrpDest.TRANSFERFIELDS(SubGrpOrig, FALSE);
            SubGrpDest.MODIFY;
          END;
        UNTIL SubGrpOrig.NEXT = 0;
      END;

      //**Options (level 1 = standard option)
      OptOrig.SETFILTER("Project No.", '%1', '');
      OptOrig.SETFILTER("Plot No.", '%1', '');
      OptOrig.SETFILTER(OptOrig.Status, '');

      IF OptOrig.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT OptRec.GET('','',OptOrig."House Model",
                                 OptOrig."Main Group",OptOrig.Group,
                                 OptOrig."Sub Group",OptOrig.Option) THEN
          BEGIN
            ModelDest.GET('',OptOrig."House Model");
            MainGrpDest.GET('',OptOrig."Main Group");
            GrpDest.GET('',OptOrig.Group);
            SubGrpDest.GET('',OptOrig."Sub Group");
            OptRec.TRANSFERFIELDS(OptOrig);

            OptRec."Installments Generated" := FALSE;
            OptRec."Installment Scheme" := '';
            OptRec."Generation Date" := 0D;
            OptRec."Last Date Printed on Opt.List" := 0D;
            OptRec."Last Time Printed on Opt.List" := 0T;
            OptRec."Nett Price" := 0;
            OptRec."Computed Sales Price Incl. VAT" := 0;
            OptRec."Sales Amount incl. VAT" := 0;
            OptRec."Sales Price incl. VAT" := 0;
            OptRec."Sales Price excl. VAT" := 0;
            OptRec."Computed VAT Amount" := 0;
            OptRec."VAT Amount" := 0;
            OptRec."Contract Amount" := 0;
            OptRec."Offered Amount" := 0;
            OptRec."VAT Prod. Posting Group" := '';
            OptRec."VAT Bus. Posting Group" := '';
            OptRec."Fixed Sales Price" := FALSE;
            OptRec."Transaction Date Out" := 0DT;

            OptRec."Budget Changed by Integration" := TRUE;
            OptRec."Transaction Date In" := CURRENTDATETIME;
            OptRec.INSERT;

            NewOptionsBool := TRUE;

            //Copy texts.
            OptionTextOrigRec.SETRANGE(Table, OptionTextOrigRec.Table::Option);
            OptionTextOrigRec.SETRANGE("Text Type", OptionTextOrigRec."Text Type"::Sales);
            OptionTextOrigRec.SETFILTER("Project No.", '%1', '');
            OptionTextOrigRec.SETRANGE("House Model", OptOrig."House Model");
            OptionTextOrigRec.SETRANGE("Option Main Group", OptOrig."Main Group");
            OptionTextOrigRec.SETRANGE("Option Sub Group", OptOrig."Sub Group");
            OptionTextOrigRec.SETRANGE("Option Group",OptOrig.Group);
            OptionTextOrigRec.SETFILTER("Plot No.",  '%1', '');
            OptionTextOrigRec.SETRANGE(Option, OptOrig.Option);
            IF OptionTextOrigRec.FINDSET THEN BEGIN
              REPEAT
                OptionTextDestRec.TRANSFERFIELDS(OptionTextOrigRec);
                IF OptionTextDestRec.INSERT THEN;
              UNTIL OptionTextOrigRec.NEXT = 0;
            END;

            //Note: Surcharges now in seperate table, do not transfer these because surcharge percentage
            //are always made zero in old situation
            DataNewBool := TRUE;

          END;
          CopyOptionBudget;
        UNTIL OptOrig.NEXT = 0;
      END;

      //gRemoveRedundant is always FALSE
      IF gRemoveRedundant THEN
        RemoveOldBudgets;
    END;

    PROCEDURE CopyOptionBudget@1100485000() lDestUpdated : Boolean;
    BEGIN
      //**Options (level 1 = standard option)
      lDestUpdated := FALSE;

      OptBudgetOrig.RESET;
      OptBudgSumOrig.RESET;

      //** Remove existing summary sheet and option budget
      OptBudgSumDest.SETFILTER("Project No.", '%1', '');
      OptBudgSumDest.SETFILTER("Contract No.", '%1', '');
      OptBudgSumDest.SETFILTER("Plot No.", '%1', '');
      OptBudgSumDest.SETRANGE("House Model", OptOrig."House Model");
      OptBudgSumDest.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgSumDest.SETRANGE(Group, OptOrig.Group);
      OptBudgSumDest.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgSumDest.SETRANGE(Option, OptOrig.Option);
      OptBudgSumDest.DELETEALL;
      OptBudgSumDest.RESET;

      OptBudgetDest.SETFILTER("Project No.", '%1', '');
      OptBudgetDest.SETFILTER("Plot No.", '%1', '');
      OptBudgetDest.SETRANGE("House Model", OptOrig."House Model");
      OptBudgetDest.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgetDest.SETRANGE(Group, OptOrig.Group);
      OptBudgetDest.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgetDest.SETRANGE(Option, OptOrig.Option);
      OptBudgetDest.DELETEALL;
      OptBudgetDest.RESET;

      //**Option Budget
      OptBudgetOrig.SETFILTER("Project No.", '%1', '');
      OptBudgetOrig.SETFILTER("Plot No.", '%1', '');
      OptBudgetOrig.SETRANGE("House Model", OptOrig."House Model");
      OptBudgetOrig.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgetOrig.SETRANGE(Group, OptOrig.Group);
      OptBudgetOrig.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgetOrig.SETRANGE(Option, OptOrig.Option);
      IF OptBudgetOrig.FINDSET THEN BEGIN
        REPEAT
          OptBudgetDest.COPY(OptBudgetOrig);

          IF OptBudgetDest."Cost Object" <> '' THEN
            OptBudgetDest.VALIDATE("Cost Object");
          IF OptBudgetDest."Unit of Measure" <> '' THEN
            OptBudgetDest.VALIDATE("Unit of Measure");
          IF OptBudgetDest."Rate Code" <> '' THEN
            OptBudgetDest.VALIDATE("Rate Code");
          IF OptBudgetDest."Unit of Time" <> '' THEN
            OptBudgetDest.VALIDATE("Unit of Time");
          IF OptBudgetDest."Cost Component" <> '' THEN
            OptBudgetDest.VALIDATE("Cost Component");

          OptBudgetDest.INSERT(TRUE);
          lDestUpdated := TRUE;
        UNTIL OptBudgetOrig.NEXT = 0;
      END;

      //** Summary sheet option budget
      OptBudgSumOrig.SETFILTER("Project No.", '%1', '');
      OptBudgSumOrig.SETFILTER("Plot No.", '%1', '');
      OptBudgSumOrig.SETFILTER("Contract No.", '%1', '');
      OptBudgSumOrig.SETRANGE("House Model", OptOrig."House Model");
      OptBudgSumOrig.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgSumOrig.SETRANGE(Group, OptOrig.Group);
      OptBudgSumOrig.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgSumOrig.SETRANGE(Option, OptOrig.Option);
      IF OptBudgSumOrig.FINDSET THEN BEGIN
        REPEAT
          OptBudgSumDest.COPY(OptBudgSumOrig);

          IF OptBudgSumDest."Cost Object" <> '' THEN
            OptBudgSumDest.VALIDATE("Cost Object");
          IF OptBudgSumDest."Unit of Measure" <> '' THEN
            OptBudgSumDest.VALIDATE("Unit of Measure");
          IF OptBudgSumDest."Rate Code" <> '' THEN
            OptBudgSumDest.VALIDATE("Rate Code");
          IF OptBudgSumDest."Cost Component" <> '' THEN
            OptBudgSumDest.VALIDATE("Cost Component");

          OptBudgSumDest.INSERT(TRUE);
          lDestUpdated := TRUE;
        UNTIL OptBudgSumOrig.NEXT = 0;
      END;

      OptRec."Budget Changed by Integration" := TRUE;
      OptRec.MODIFY;
    END;

    PROCEDURE RemoveOldModels@1100485005();
    BEGIN
      //not used
      //** Delete expired lines.
      ModelOrig.RESET;
      ModelDest.RESET;
      UnitOrig.RESET;
      UnitDest.RESET;
      OptRec.RESET;
      ModelDest.SETFILTER("Project No.", '%1', '');
      IF ModelDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF ModelOrig.GET('', ModelDest.Model) THEN BEGIN
            UnitDest.SETFILTER("Project No.",'%1', '');
            UnitDest.SETFILTER(Model,'%1',ModelOrig.Model);
            IF UnitDest.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                IF NOT UnitOrig.GET('',UnitDest.Model,UnitDest.Unit) THEN BEGIN
                  UnitDest.DELETE;
                END;
              UNTIL UnitDest.NEXT = 0;
            END;
          END ELSE BEGIN
            OptRec.SETFILTER("Project No.",'%1', '');
            OptRec.SETFILTER("House Model", '%1', ModelDest.Model);
            IF NOT OptRec.FINDFIRST THEN BEGIN
              UnitDest.SETFILTER("Project No.",'%1', '');
              UnitDest.SETFILTER(Model,'%1',ModelDest.Model);
              UnitDest.DELETEALL;
              DeleteTextLines(BuyerMgtTextRec.Table::"House Model",'','',ModelDest.Model,'','','','');
              ModelDest.DELETE;
            END;
          END;
        UNTIL ModelDest.NEXT = 0;
      END;
    END;

    PROCEDURE RemoveOldBudgets@1100485006();
    BEGIN
      //not used
      //delete expired lines
      //**delete option groups
      MainGrpDest.RESET;
      MainGrpOrig.RESET;
      MainGrpDest.SETFILTER("Project No.",'%1', '');
      IF MainGrpDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT MainGrpOrig.GET('',MainGrpDest.Code) THEN BEGIN
            DeleteTextLines(BuyerMgtTextRec.Table::"Option Main Group",'','','',MainGrpDest.Code,'','','');
            MainGrpDest.DELETE;
          END;
        UNTIL MainGrpDest.NEXT = 0;
      END;

      GrpDest.RESET;
      GrpOrig.RESET;
      GrpDest.SETFILTER("Project No.",'%1','');
      IF GrpDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT GrpOrig.GET('',GrpDest.Code) THEN BEGIN
            DeleteTextLines(BuyerMgtTextRec.Table::"Option Group",'','','','',GrpDest.Code,'','');
            GrpDest.DELETE;
          END;
        UNTIL GrpDest.NEXT = 0;
      END;

      SubGrpDest.RESET;
      SubGrpOrig.RESET;
      SubGrpDest.SETFILTER("Project No.",'%1', '');
      IF SubGrpDest.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT SubGrpOrig.GET('',SubGrpDest.Code) THEN BEGIN
            DeleteTextLines(BuyerMgtTextRec.Table::"Option Sub Group",'','','','','',SubGrpDest.Code,'');
            SubGrpDest.DELETE;
          END;
        UNTIL SubGrpDest.NEXT = 0;
      END;
       //**delete options
      OptOrig.RESET;
      OptRec.RESET;
      OptBudgetDest.RESET;
      OptBudgetOrig.RESET;
      OptRec.SETFILTER("Project No.",'%1', '');
      OptRec.SETFILTER("Plot No.", '%1', '');
      IF OptRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          OptOrig.SETFILTER("Project No.",'%1', '');
          OptOrig.SETFILTER("Plot No.", '%1', '');
          OptOrig.SETRANGE("House Model", OptRec."House Model");
          OptOrig.SETRANGE("Main Group", OptRec."Main Group");
          OptOrig.SETRANGE(Group, OptRec.Group);
          OptOrig.SETRANGE("Sub Group", OptRec."Sub Group");
          OptOrig.SETRANGE(Option, OptRec.Option);
          IF NOT OptOrig.FINDSET THEN BEGIN
           //**option budget + summary sheet
            OptBudgetDest.SETFILTER("Project No.", '%1', '');
            OptBudgetDest.SETFILTER("Plot No.", '%1', '');
            OptBudgetDest.SETRANGE("House Model", OptRec."House Model");
            OptBudgetDest.SETRANGE("Main Group", OptRec."Main Group");
            OptBudgetDest.SETRANGE(Group, OptRec.Group);
            OptBudgetDest.SETRANGE("Sub Group", OptRec."Sub Group");
            OptBudgetDest.SETRANGE(Option, OptRec.Option);
            IF OptBudgetDest.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                OptBudgetDest.DELETE;
              UNTIL OptBudgetDest.NEXT = 0;
            END;
            //** Summary sheet option budget
            OptBudgSumDest.SETFILTER("Project No.", '%1', '');
            OptBudgSumDest.SETRANGE("Contract No.", '');
            OptBudgSumDest.SETFILTER("Plot No.", '%1', '');
            OptBudgSumDest.SETRANGE("House Model", OptRec."House Model");
            OptBudgSumDest.SETRANGE("Main Group", OptRec."Main Group");
            OptBudgSumDest.SETRANGE(Group, OptRec.Group);
            OptBudgSumDest.SETRANGE("Sub Group", OptRec."Sub Group");
            OptBudgSumDest.SETRANGE(Option, OptRec.Option);
            IF OptBudgSumDest.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                OptBudgSumDest.DELETE;
              UNTIL OptBudgSumDest.NEXT = 0;
            END;
            DeleteTextLines(BuyerMgtTextRec.Table::Option,'','',OptRec."House Model",
              OptRec."Main Group",OptRec.Group,OptRec."Sub Group",OptRec.Option);
            DeleteSurcharges('','',OptRec."House Model",
              OptRec."Main Group",OptRec.Group,OptRec."Sub Group",OptRec.Option);
            OptRec.DELETE;
            DataDelBool := TRUE;
          END;
        UNTIL OptRec.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteTextLines@1210190005(ITable@1210190000 : Option;IProject@1210190001 : Code[20];IPlot@1210190002 : Code[10];IModel@1210190003 : Code[20];IMGrp@1210190004 : Code[20];IGrp@1210190005 : Code[20];ISGrp@1210190006 : Code[20];IOption@1210190007 : Code[20]);
    BEGIN
      //not used
      //can possibly be used again when deleting expired options is switched on again.
      WITH BuyerMgtTextRec DO BEGIN
        RESET;
        SETRANGE(Table, ITable);
        SETFILTER("Project No.", '%1', '');
        SETFILTER("Plot No.", '%1', '');
        CASE ITable OF
          Table::"House Model":
            SETRANGE("House Model", IModel);
          Table::"Option Main Group":
            SETRANGE("Option Main Group", IMGrp);
          Table::"Option Group":
            SETRANGE("Option Group", IGrp);
          Table::"Option Sub Group":
            SETRANGE("Option Sub Group", ISGrp);
          Table::Option:
            BEGIN
              SETRANGE("House Model", IModel);
              SETRANGE("Option Main Group", IMGrp);
              SETRANGE("Option Group", IGrp);
              SETRANGE("Option Sub Group", ISGrp);
              SETRANGE(Option, IOption);
            END;
        END;
        DELETEALL;
      END;
    END;

    PROCEDURE DeleteSurcharges@1210190013(IProject@1210190006 : Code[20];IPlot@1210190005 : Code[10];IModel@1210190004 : Code[20];IMGrp@1210190003 : Code[20];IGrp@1210190002 : Code[20];ISGrp@1210190001 : Code[20];IOption@1210190000 : Code[20]);
    BEGIN
      //not used.
      //can possibly be used again when deleting expired options is switched on again.
      WITH OptSurchRec DO BEGIN
        RESET;
        SETFILTER("Project No.", '%1', '');
        SETFILTER("Plot No.", '%1', '');
        SETRANGE("House Model", IModel);
        SETRANGE("Main Group", IMGrp);
        SETRANGE(Group, IGrp);
        SETRANGE("Sub Group", ISGrp);
        SETRANGE(Option, IOption);
        DELETEALL;
      END;
    END;

    LOCAL PROCEDURE ValidateCompanyOrigin@1100528600();
    VAR
      Company@1100525000 : Record 2000000006;
    BEGIN
      IF CompanyOrigin = COMPANYNAME THEN
        ERROR(Text015);
      Company.GET(CompanyOrigin);
    END;

    BEGIN
    END.
  }
}

