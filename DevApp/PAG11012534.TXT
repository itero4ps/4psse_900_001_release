OBJECT Page 11012534 Synchronise Option Data In
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Synchronize Budget Data;
    PageType=Card;
    OnInit=BEGIN
             InvoicePlotInstallmentsEditabl := TRUE;
           END;

    OnOpenPage=BEGIN
                 UserSetup.GET(USERID);
                 ProjectSetup.GET;

                 IF ProjectSetup."Company Type" <> ProjectSetup."Company Type"::"Construction Company" THEN BEGIN
                   ERROR(Text019, COMPANYNAME);
                 END;

                 //IF ProjectSetup."Company Type" = ProjectSetup."Company Type"::"Construction Company" THEN BEGIN
                   CompanyDestiny := ProjectSetup."Related Company";
                   CheckLastUpdateCompany();
                   CheckLastUpdateProject();
                 //END;

                 IF ProjectSetup."Invoice Installments from" <>
                    ProjectSetup."Invoice Installments from"::"Building Company" THEN BEGIN
                   PlotInstallmentInvoice := FALSE;
                   InvoicePlotInstallmentsEditabl := FALSE;
                 END;

                 PrintActivityDetails := TRUE;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100485004;1 ;Action    ;
                      CaptionML=ENU=&Checklist Installments;
                      Promoted=Yes;
                      Visible=false;
                      Image=CheckRulesSyntax;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lPlotRec@1100485003 : Record 11012500;
                               BEGIN
                                 IF ProjFilter <> '' THEN
                                   lPlotRec.SETFILTER("Project No.",ProjFilter);

                                 {FIXME Report11012531
                                 lReport.SETTABLEVIEW(lPlotRec);
                                 lReport.RUNMODAL();
                                 }
                               END;
                                }
      { 9       ;1   ;Action    ;
                      CaptionML=ENU=&Process;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvProjRec@1210190004 : Record 11072003;
                                 lvOptionRec@1210190001 : Record 11012502;
                                 lvCopyOptBudgToBudgetRpt@1210190005 : Report 11012500;
                                 lvDoCalcSurch@1210190002 : Boolean;
                                 lPlotUpdated@1100485002 : Boolean;
                                 lCopiedStandardBudgetToProject@1100485004 : Boolean;
                                 lOptionInstallmentGenerated@1100485003 : Boolean;
                                 lOptionInstallmentInvoicable@1100485005 : Boolean;
                                 lPlotInstallmentInvoicable@1100485006 : Boolean;
                                 lOldVersionDate@1100485001 : Date;
                               BEGIN
                                 IF (ProjFilter = '') AND
                                    ((ProjOptionBudgetExp) OR
                                     (OptionInstallmentInvoice) OR
                                     (PlotInstallmentInvoice) OR
                                     (ProjectOptBudgetFromStandard) OR
                                     (PlotOptBudgetFromProject) OR
                                     (ProjectBudget) OR
                                     (GenerateProjectInstallment)
                                    ) THEN
                                 BEGIN
                                   MESSAGE(Text002);
                                   EXIT;
                                 END;

                                 PrintActivityDetails := TRUE; //(Eventueel aan te sturen via form)
                                 LinesPrinted := FALSE;

                                 //Exporteren standaard Optie-begrotingen
                                 IF (CompanyDestiny <> '') AND
                                    (CompanyDestiny <> COMPANYNAME) AND
                                    (Addit = TRUE) THEN
                                 BEGIN
                                   //IF UPPERCASE(ProjectSetup."Resp.Person Exchange Procedure") <> UPPERCASE(USERID) THEN BEGIN
                                   IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                      [UserSetup."Buyers Mgt. Exchange"::"Company Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                                   THEN BEGIN
                                     MESSAGE(Text003);
                                     EXIT;
                                   END;
                                   IF CopyOptionBudgetToDestCompany(CompanyDestiny,'','') THEN
                                     AddMessage(CompanyDestiny,COMPANYNAME,'','',Text100);
                                 END;

                                 IF (ProjOptionBudgetExp) OR
                                    (OptionInstallmentInvoice) OR
                                    (PlotInstallmentInvoice) THEN
                                 BEGIN
                                   IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                     [UserSetup."Buyers Mgt. Exchange"::"Project Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                                   THEN BEGIN
                                     MESSAGE(Text200);
                                     EXIT;
                                   END;
                                 END;

                                 IF (ProjOptionBudgetExp) OR
                                    (OptionInstallmentInvoice) OR
                                    (PlotInstallmentInvoice) OR
                                    (ProjectOptBudgetFromStandard) OR
                                    (PlotOptBudgetFromProject) OR
                                    (ProjectBudget) OR
                                    (GenerateProjectInstallment) THEN
                                 BEGIN

                                   ProjRec.SETFILTER("No.",ProjFilter );
                                   ProjRec.SETFILTER("Joint Company", '<>%1', '');
                                   ProjRec.SETFILTER("Joint Job No.", '<>%1', '');
                                   IF ProjRec.FINDSET THEN BEGIN
                                     REPEAT
                                       IF ProjRec."Joint Company" <> COMPANYNAME THEN BEGIN
                                         IF ProjectOptBudgetFromStandard THEN BEGIN
                                           //Nieuwe Opties vanuit Projectontwikkeling verwerken,
                                           //dwz de optiebegroting kopieren uit de standaard

                                           lCopiedStandardBudgetToProject := FALSE;

                                           ProjOptRec.RESET;
                                           ProjOptRec.SETRANGE("Project No.", ProjRec."No.");
                                           ProjOptRec.SETFILTER("Plot No.", '%1', '');
                                           ProjOptRec.SETRANGE("Budget Changed by Integration", TRUE);
                                           IF ProjOptRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                             REPEAT
                                               lvDoCalcSurch := CopyOptionBudgetInternally('');
                                               ProjOptOrig."Transaction Date In" := CURRENTDATETIME;
                                               ProjOptRec."Budget Changed by Integration" := FALSE;
                                               ProjOptRec.MODIFY;
                                               IF lvDoCalcSurch THEN
                                                 lCopiedStandardBudgetToProject := TRUE;
                                                 BuyerMgtCU.BmCalcSurchargesUpdateOption(ProjOptRec."Project No.", ProjOptRec."Plot No.",
                                                   ProjOptRec."House Model", ProjOptRec."Main Group", ProjOptRec.Group, ProjOptRec."Sub Group",
                                                   ProjOptRec.Option, FALSE, OptSurchRec);
                                             UNTIL ProjOptRec.NEXT = 0;
                                           END;
                                           IF lCopiedStandardBudgetToProject THEN
                                             AddMessage(COMPANYNAME,COMPANYNAME,ProjRec."No.",'',STRSUBSTNO(Text110,ProjRec."No."));
                                         END;

                                         IF (ProjectBudget) OR (PlotOptBudgetFromProject) THEN BEGIN
                                           // kopieren begroting vanuit project naar bouwnummer
                                           // begroting overzetten naar werkbegroting
                                           ProjPlotRec.RESET;
                                           ProjOptRec.RESET;
                                           ProjPlotRec.SETRANGE("Project No.", ProjRec."No.");
                                           IF ProjPlotRec.FINDSET THEN BEGIN
                                             lPlotUpdated := FALSE;
                                             REPEAT
                                               ProjOptRec.RESET;
                                               ProjOptRec.SETRANGE("Project No.", ProjRec."No.");
                                               ProjOptRec.SETRANGE("Plot No.", ProjPlotRec."Plot No.");
                                               ProjOptRec.SETFILTER(Status, '%1..', ProjOptRec.Status::Order);
                                               ProjOptRec.SETRANGE("Budget Changed by Integration", TRUE);

                                               IF ProjOptRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                                 REPEAT
                                                   lvDoCalcSurch := FALSE;

                                                   IF (ProjOptRec.Status = ProjOptRec.Status::Order) OR
                                                      (ProjOptRec.Status = ProjOptRec.Status::Invoice) THEN BEGIN
                                                     lvDoCalcSurch := CopyOptionBudgetInternally(ProjOptRec."Project No.");
                                                   END;

                                                   IF (lvDoCalcSurch) AND (NOT lPlotUpdated) THEN
                                                     lPlotUpdated := TRUE;

                                                   ProjOptRec."Sales Amount incl. VAT" := ROUND(ProjOptRec.Quantity * ProjOptRec."Sales Price incl. VAT");
                                                   BuyerMgtCU.BmCalculateVat(ProjOptRec);
                                                   IF (ProjOptRec."Plot No." <> '') AND (ProjOptRec.Status <> ProjOptRec.Status::Invoice) THEN BEGIN
                                                     ProjOptRec."Contract Amount" := ROUND(ProjOptRec.Quantity * ProjOptRec."Sales Price excl. VAT");
                                                     ProjOptRec."Offered Amount" := ROUND(ProjOptRec.Quantity * ProjOptRec."Sales Price excl. VAT");
                                                   END;

                                                   IF (ProjectBudget) THEN BEGIN
                                                     ProjOptRec."Budget Changed by Integration" := FALSE;
                                                     ProjOptOrig."Transaction Date In" := CURRENTDATETIME;
                                                   END;
                                                   ProjOptRec.MODIFY(TRUE);

                                                   IF lvDoCalcSurch THEN
                                                     BuyerMgtCU.BmCalcSurchargesUpdateOption(ProjOptRec."Project No.", ProjOptRec."Plot No.",
                                                     ProjOptRec."House Model", ProjOptRec."Main Group", ProjOptRec.Group, ProjOptRec."Sub Group",
                                                     ProjOptRec.Option, FALSE, OptSurchRec);

                                                   IF (ProjectBudget) THEN BEGIN
                                                     CLEAR(lvCopyOptBudgToBudgetRpt);
                                                     IF VersionDate <> 0D THEN BEGIN
                                                       lOldVersionDate := ProjOptRec."Version Date";
                                                       ProjOptRec."Version Date" := VersionDate;
                                                       ProjOptRec.MODIFY();
                                                     END;
                                                     lvProjRec.SETRANGE("No.", ProjOptRec."Project No.");
                                                     lvCopyOptBudgToBudgetRpt.SETTABLEVIEW(lvProjRec);

                                                     lvOptionRec.SETRANGE("Plot No.", ProjOptRec."Plot No.");
                                                     lvOptionRec.SETRANGE("House Model", ProjOptRec."House Model");
                                                     lvOptionRec.SETRANGE("Main Group", ProjOptRec."Main Group");
                                                     lvOptionRec.SETRANGE(Group, ProjOptRec.Group);
                                                     lvOptionRec.SETRANGE("Sub Group", ProjOptRec."Sub Group");
                                                     lvOptionRec.SETRANGE(Option, ProjOptRec.Option);
                                                     lvCopyOptBudgToBudgetRpt.SETTABLEVIEW(lvOptionRec);

                                                     lvCopyOptBudgToBudgetRpt.USEREQUESTPAGE(FALSE);
                                                     lvCopyOptBudgToBudgetRpt.RUNMODAL;

                                                     IF VersionDate <> 0D THEN BEGIN
                                                       ProjOptRec."Version Date" := lOldVersionDate;
                                                       ProjOptRec.MODIFY();
                                                     END;

                                                   END;
                                                 UNTIL ProjOptRec.NEXT = 0;

                                               END;
                                               IF lPlotUpdated THEN
                                                 AddMessage(COMPANYNAME,COMPANYNAME,ProjRec."No.",ProjPlotRec."Plot No.",
                                                            STRSUBSTNO(Text120,ProjRec."No.",ProjPlotRec."Plot No."));

                                             UNTIL ProjPlotRec.NEXT = 0;
                                           END;
                                         END;

                                         IF GenerateProjectInstallment THEN BEGIN
                                           ProjPlotRec.RESET;
                                           ProjPlotRec.SETRANGE("Project No.", ProjRec."No.");
                                           IF ProjPlotRec.FINDSET THEN BEGIN
                                             REPEAT
                                               lOptionInstallmentGenerated := FALSE;
                                               ProjOptRec.RESET;
                                               ProjOptRec.SETRANGE("Generate Installments",FALSE);
                                               ProjOptRec.SETRANGE("Project No.", ProjRec."No.");
                                               ProjOptRec.SETRANGE("Plot No.",ProjPlotRec."Plot No.");
                                               ProjOptRec.SETFILTER(Option, '<>%1', '');
                                               ProjOptRec.MODIFYALL("Generate Installments",TRUE,TRUE);
                                               ProjOptRec.SETRANGE("Generate Installments",TRUE);
                                               ProjOptRec.SETRANGE("Installments Generated",FALSE);
                                               IF ProjOptRec.FINDSET THEN BEGIN
                                                 REPEAT
                                                   CLEAR(GenerateProjInstallm);
                                                   GenerateProjInstallm.FromOptionNotAsk(ProjOptRec."Project No.", ProjOptRec."Plot No.", ProjOptRec."House Model",
                                                     ProjOptRec."Main Group", ProjOptRec.Group, ProjOptRec."Sub Group", ProjOptRec.Option);
                                                   lOptionInstallmentGenerated := TRUE;
                                                 UNTIL ProjOptRec.NEXT = 0;
                                               END;
                                               IF lOptionInstallmentGenerated THEN
                                                 AddMessage(COMPANYNAME,COMPANYNAME,ProjRec."No.",ProjPlotRec."Plot No.",
                                                            STRSUBSTNO(Text130,ProjRec."No.",ProjPlotRec."Plot No."));
                                             UNTIL ProjPlotRec.NEXT = 0;
                                           END;
                                         END;

                                         DestUpdBool := FALSE;

                                         //Facturabel stellen termijnen
                                         IF (OptionInstallmentInvoice) AND
                                            (ProjRec."Options Sold By" = ProjRec."Options Sold By"::"Development Company" ) THEN
                                         BEGIN
                                           //**Dit betreft de termijnen voor de meerwerkopties.
                                           //**Wanneer deze gefactureerd worden door het ontwikkelbedrijf aan de klant.
                                           ProjOptRecDest.CHANGECOMPANY(ProjRec."Joint Company");
                                           ProjInstalmDestRec.CHANGECOMPANY(ProjRec."Joint Company");

                                           ProjPlotRec.RESET;
                                           ProjPlotRec.SETRANGE("Project No.", ProjRec."No.");
                                           IF ProjPlotRec.FINDSET THEN BEGIN
                                             REPEAT
                                               lOptionInstallmentInvoicable := FALSE;
                                               ProjOptRec.RESET;
                                               ProjOptRec.SETRANGE("Project No.", ProjRec."No.");
                                               ProjOptRec.SETRANGE("Plot No.", ProjPlotRec."Plot No.");
                                               ProjOptRec.SETFILTER(Option,  '<>%1', '');
                                               ProjOptRec.SETFILTER(Status, '%1..', ProjOptRec.Status::Invoice);
                                               IF ProjOptRec.FINDSET THEN BEGIN
                                                 IF ProjOptRecDest.GET(ProjRec."Joint Job No.",
                                                                       ProjOptRec."Plot No.",
                                                                       ProjOptRec."House Model",
                                                                       ProjOptRec."Main Group",
                                                                       ProjOptRec.Group,
                                                                       ProjOptRec."Sub Group",
                                                                       ProjOptRec.Option) THEN BEGIN
                                                   IF ProjOptRecDest.Status >= ProjOptRecDest.Status::Invoice  THEN BEGIN
                                                     REPEAT
                                                       ProjInstalmRec.RESET;
                                                       ProjInstalmRec.SETRANGE("Project No.",ProjRec."No.");
                                                       ProjInstalmRec.SETRANGE("Plot No.", ProjOptRec."Plot No.");
                                                       ProjInstalmRec.SETRANGE("Main Group", ProjOptRec."Main Group");
                                                       ProjInstalmRec.SETRANGE(Group, ProjOptRec.Group);
                                                       ProjInstalmRec.SETRANGE("Sub Group", ProjOptRec."Sub Group");
                                                       ProjInstalmRec.SETRANGE(Option, ProjOptRec.Option);
                                                       ProjInstalmRec.SETRANGE(Chargeable, TRUE);
                                                       IF ProjInstalmRec.FINDSET THEN BEGIN
                                                         REPEAT
                                                           ProjInstalmDestRec.SETRANGE("Project No.",ProjRec."Joint Job No.");
                                                           ProjInstalmDestRec.SETRANGE("Plot No.", ProjInstalmRec."Plot No.");
                                                           ProjInstalmDestRec.SETRANGE("Main Group", ProjOptRec."Main Group");
                                                           ProjInstalmDestRec.SETRANGE(Group, ProjOptRec.Group);
                                                           ProjInstalmDestRec.SETRANGE("Sub Group", ProjOptRec."Sub Group");
                                                           ProjInstalmDestRec.SETRANGE(Option, ProjOptRec.Option);
                                                           ProjInstalmDestRec.SETRANGE("Installment Scheme SerNo.", ProjInstalmRec."Installment Scheme SerNo.");
                                                           ProjInstalmDestRec.SETRANGE(Chargeable, FALSE);
                                                           IF ProjInstalmDestRec.FINDFIRST THEN BEGIN
                                                             ProjInstalmDestRec.Chargeable := TRUE;
                                                             ProjInstalmDestRec.MODIFY;
                                                             DestUpdBool := TRUE;
                                                             lOptionInstallmentInvoicable := TRUE;
                                                           END;
                                                         UNTIL ProjInstalmRec.NEXT = 0;
                                                       END;
                                                     UNTIL ProjOptRec.NEXT = 0;
                                                   END;
                                                 END;
                                               END;
                                               IF lOptionInstallmentInvoicable THEN
                                                 AddMessage(ProjRec."Joint Company",COMPANYNAME,ProjRec."No.",ProjPlotRec."Plot No.",
                                                            STRSUBSTNO(Text140,ProjRec."Joint Job No.",ProjPlotRec."Plot No."));
                                             UNTIL ProjPlotRec.NEXT = 0;
                                           END;
                                         END;

                                         IF (PlotInstallmentInvoice) THEN BEGIN
                                           //**Dit betreft de termijnen voor het bouwnummer.
                                           //**Het programma gaat ervanuit dat het serievolgnummers is gevuld, dit is nieuw 30-11-2005.
                                           ProjPlotRec.RESET;
                                           ProjPlotRec.SETRANGE("Project No.", ProjRec."No.");
                                           IF ProjPlotRec.FINDSET THEN BEGIN
                                             REPEAT
                                               lPlotInstallmentInvoicable := FALSE;
                                               ProjInstalmDestRec.CHANGECOMPANY(ProjRec."Joint Company");
                                               ProjInstalmRec.RESET;
                                               ProjInstalmRec.SETRANGE("Project No.",ProjRec."No.");
                                               ProjInstalmRec.SETRANGE("Plot No.",ProjPlotRec."Plot No.");
                                               ProjInstalmRec.SETRANGE(Chargeable, TRUE);
                                               ProjInstalmRec.SETFILTER("Main Group", '%1' , '');
                                               ProjInstalmRec.SETFILTER(Group,  '%1' , '');
                                               ProjInstalmRec.SETFILTER("Sub Group",  '%1' , '');
                                               ProjInstalmRec.SETFILTER(Option,  '%1' , '');
                                               IF ProjInstalmRec.FINDSET THEN BEGIN
                                                 REPEAT
                                                   ProjInstalmDestRec.SETRANGE("Project No.",ProjRec."Joint Job No.");
                                                   ProjInstalmDestRec.SETRANGE("Plot No.", ProjInstalmRec."Plot No.");
                                                   ProjInstalmDestRec.SETRANGE("Installment Scheme SerNo.", ProjInstalmRec."Installment Scheme SerNo.");
                                                   ProjInstalmDestRec.SETRANGE(Chargeable, FALSE);
                                                   ProjInstalmDestRec.SETFILTER("Main Group", '%1' , '');
                                                   ProjInstalmDestRec.SETFILTER(Group, '%1' , '');
                                                   ProjInstalmDestRec.SETFILTER("Sub Group", '%1' , '');
                                                   ProjInstalmDestRec.SETFILTER(Option, '%1' , '');
                                                    IF ProjInstalmDestRec.FINDFIRST THEN BEGIN
                                                      ProjInstalmDestRec.Chargeable := TRUE;
                                                      ProjInstalmDestRec.MODIFY;
                                                      DestUpdBool := TRUE;
                                                      lPlotInstallmentInvoicable := TRUE;
                                                   END;
                                                 UNTIL ProjInstalmRec.NEXT = 0;
                                               END;
                                               IF lPlotInstallmentInvoicable THEN
                                                 AddMessage(ProjRec."Joint Company",COMPANYNAME,ProjRec."No.",ProjPlotRec."Plot No.",
                                                            STRSUBSTNO(Text150,ProjRec."Joint Job No.",ProjPlotRec."Plot No."));
                                             UNTIL ProjPlotRec.NEXT = 0;
                                           END;
                                         END;

                                         //Kopieren van de optiebegrotingen per project.
                                         IF ProjOptionBudgetExp THEN
                                           IF CopyOptionBudgetToDestCompany(ProjRec."Joint Company",ProjRec."No.",ProjRec."Joint Job No.") THEN
                                             AddMessage(ProjRec."Joint Company",COMPANYNAME,ProjRec."No.",'',
                                                        STRSUBSTNO(Text160,ProjRec."Joint Job No."));

                                         IF (ProjOptionBudgetExp) OR
                                            (OptionInstallmentInvoice) OR
                                            (PlotInstallmentInvoice) THEN
                                         BEGIN
                                           IF DestUpdBool = FALSE THEN
                                             MESSAGE(Text004);
                                         END;

                                       END;
                                     UNTIL ProjRec.NEXT = 0;
                                   END;
                                 END;

                                 COMMIT;

                                 IF LinesPrinted AND PrintActivityDetails THEN
                                   ActivityReport.RUNMODAL;

                                 CurrPage.CLOSE;
                               END;
                                }
      { 1210190027;1 ;Action    ;
                      CaptionML=ENU=Ove&rview open Options;
                      Promoted=Yes;
                      Image=ListPage;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lProjOptRec@1210190000 : Record 11012502;
                               BEGIN
                                 IF ProjFilter <> '' THEN
                                   lProjOptRec.SETFILTER("Project No.",ProjFilter)
                                 ELSE
                                   lProjOptRec.SETFILTER("Project No.", '<>%1', '');
                                 lProjOptRec.SETFILTER("Plot No.", '%1', '');
                                 lProjOptRec.SETRANGE("Budget Changed by Integration", TRUE);
                                 PAGE.RUNMODAL(PAGE::"Project Option List", lProjOptRec);
                               END;
                                }
      { 1210190028;1 ;Action    ;
                      CaptionML=ENU=Over&view open Options;
                      Promoted=Yes;
                      Image=ListPage;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lProjOptRec@1210190000 : Record 11012502;
                               BEGIN
                                 IF ProjFilter <> '' THEN
                                   lProjOptRec.SETFILTER("Project No.", ProjFilter)
                                 ELSE
                                   lProjOptRec.SETFILTER("Project No.", '<>%1', '');
                                 lProjOptRec.SETFILTER("Plot No.",  '<>%1', '');
                                 lProjOptRec.SETFILTER(Status, '%1..', ProjOptRec.Status::Order);
                                 lProjOptRec.SETRANGE("Budget Changed by Integration", TRUE);
                                 PAGE.RUNMODAL(PAGE::"Plot No. Option List", lProjOptRec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190001;1;Group  ;
                CaptionML=ENU=To Company;
                GroupType=Group }

    { 1210190003;2;Field  ;
                SourceExpr=CompanyDestiny;
                Style=Strong;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             ValidateCompanyDestiny;
                           END;

                OnLookup=VAR
                           Company@1100528600 : Record 2000000006;
                         BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Company List (NEW)", Company) = ACTION::LookupOK THEN BEGIN
                             CompanyDestiny := Company.Name;
                             ValidateCompanyDestiny;
                           END;
                         END;
                          }

    { 1210190002;1;Group  ;
                CaptionML=ENU=Norm }

    { 1210190017;2;Field  ;
                CaptionML=ENU=Copy;
                Style=Strong;
                StyleExpr=TRUE }

    { 1210190005;2;Field  ;
                CaptionML=ENU=Option Budget;
                SourceExpr=Addit;
                OnValidate=BEGIN
                             //IF (ProjectSetup."Resp.Person Exchange Procedure" <> UPPERCASE(USERID)) AND
                             //   (Addit) THEN
                             //  ERROR(Text003);

                             IF (Addit) THEN
                               IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                  [UserSetup."Buyers Mgt. Exchange"::"Company Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                               THEN
                                 ERROR(Text003);
                           END;
                            }

    { 1210190019;2;Field  ;
                CaptionML=ENU=Last Update Standard Options;
                SourceExpr=LastUpdateStandardOptions;
                Editable=FALSE }

    { 1210190004;1;Group  ;
                CaptionML=ENU=Project }

    { 2   ;2   ;Group     ;
                CaptionML=ENU=Project Filter;
                GroupType=Group }

    { 1210190014;3;Field  ;
                Lookup=Yes;
                CaptionML=ENU=Project Filter;
                SourceExpr=ProjFilter;
                TableRelation=Job;
                OnValidate=BEGIN
                             CheckLastUpdateProject();
                             FromhouseModel := '';
                           END;
                            }

    { 1100525000;3;Field  ;
                CaptionML=ENU=Project Description;
                SourceExpr=ProjectDescription;
                Editable=FALSE }

    { 1210190006;1;Group  ;
                CaptionML=ENU=Extern;
                GroupType=Group }

    { 1210190013;2;Field  ;
                CaptionML=ENU=Copy;
                Style=Strong;
                StyleExpr=TRUE }

    { 1210190000;2;Field  ;
                CaptionML=ENU=Last update;
                SourceExpr=ProjOptionBudgetExp;
                OnValidate=BEGIN

                             IF (ProjOptionBudgetExp) THEN
                               IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                  [UserSetup."Buyers Mgt. Exchange"::"Project Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                               THEN
                                 ERROR(Text200);
                           END;
                            }

    { 1210190021;2;Field  ;
                CaptionML=ENU=Last Update Project Options;
                SourceExpr=LastupdateProjectOptions;
                Editable=FALSE }

    { 1210190018;2;Field  ;
                CaptionML=ENU=Set to be Invoiced;
                Style=Strong;
                StyleExpr=TRUE }

    { 1210190011;2;Field  ;
                CaptionML=ENU=Installments Options;
                SourceExpr=OptionInstallmentInvoice;
                OnValidate=BEGIN
                             IF (OptionInstallmentInvoice) THEN
                               IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                  [UserSetup."Buyers Mgt. Exchange"::"Project Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                               THEN
                                 ERROR(Text200);
                           END;
                            }

    { 1100485003;2;Field  ;
                Name=InvoicePlotInstallments;
                CaptionML=ENU=Installments Plots;
                SourceExpr=PlotInstallmentInvoice;
                Editable=InvoicePlotInstallmentsEditabl;
                OnValidate=BEGIN
                             IF (PlotInstallmentInvoice) THEN
                               IF NOT (UserSetup."Buyers Mgt. Exchange" IN
                                  [UserSetup."Buyers Mgt. Exchange"::"Project Level",UserSetup."Buyers Mgt. Exchange"::"Both Levels"])
                               THEN
                                 ERROR(Text200);
                           END;
                            }

    { 1210190016;1;Group  ;
                CaptionML=ENU=Intern }

    { 1210190023;2;Field  ;
                CaptionML=ENU=Copy;
                Style=Strong;
                StyleExpr=TRUE }

    { 1210190025;2;Field  ;
                CaptionML=ENU=Option Budget Standard to Project;
                SourceExpr=ProjectOptBudgetFromStandard }

    { 1210190026;2;Field  ;
                CaptionML=ENU=Project Plot Options To Process;
                OptionCaptionML=ENU=" ,No new Options per Plot,New Options per Plot";
                SourceExpr=ProjectPlotOptionsToProcess;
                Editable=FALSE }

    { 1210190033;2;Field  ;
                CaptionML=ENU=House Model Filter;
                SourceExpr=PlotOptBudgetFromProject;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525001;2;Field  ;
                Lookup=Yes;
                CaptionML=ENU=From House Model;
                SourceExpr=FromhouseModel;
                TableRelation="House Model".Model;
                OnLookup=VAR
                           lProjRec@1100525000 : Record 11072003;
                           lHouseModelRec@1100525001 : Record 11012501;
                         BEGIN
                           lHouseModelRec.SETRANGE("Project No.");
                           IF (STRLEN(ProjFilter) <= 20) AND (STRLEN(ProjFilter) > 0) THEN BEGIN
                             IF lProjRec.GET(ProjFilter) THEN
                               lHouseModelRec.SETRANGE("Project No.", ProjFilter);
                           END;

                           IF PAGE.RUNMODAL(0, lHouseModelRec) = ACTION::LookupOK THEN
                             FromhouseModel := FromhouseModel + lHouseModelRec.Model;
                         END;
                          }

    { 1210190015;2;Field  ;
                CaptionML=ENU=Generate;
                Style=Strong;
                StyleExpr=TRUE }

    { 1210190007;2;Field  ;
                CaptionML=ENU=Installments;
                SourceExpr=GenerateProjectInstallment }

    { 11  ;2   ;Field     ;
                CaptionML=ENU=Budget;
                SourceExpr=ProjectBudget }

    { 1100485000;2;Field  ;
                CaptionML=ENU=Version Date Budget;
                SourceExpr=VersionDate;
                Editable=TRUE }

  }
  CODE
  {
    VAR
      UserSetup@1100525003 : Record 91;
      ProjectSetup@1210190017 : Record 315;
      ProjectSetupDest@1210190029 : Record 315;
      ProjRec@11012005 : Record 11072003;
      ProjOptRec@11012017 : Record 11012502;
      OptBudgSumRec@1210190016 : Record 11012064;
      OptBudgSumOrig@1210190021 : Record 11012064;
      OptBudgSumDest@1210190007 : Record 11012064;
      ProjInstalmRec@1210190022 : Record 11012018;
      ProjInstalmDestRec@1210190013 : Record 11012018;
      OptBudgetRec@1210190015 : Record 11012503;
      OptBudgetOrig@11012025 : Record 11012503;
      OptBudgetDest@11012026 : Record 11012503;
      ProjPlotRec@1210190009 : Record 11012500;
      ProjOptOrig@1210190005 : Record 11012502;
      ProjOptDest@1210190006 : Record 11012502;
      ProjOptRecDest@1210190012 : Record 11012502;
      OptSurchRec@1210190031 : Record 11012512;
      GenerateProjInstallm@1210190004 : Codeunit 11012007;
      BuyerMgtCU@1210190030 : Codeunit 11012500;
      ProjFilter@1210190008 : Text[250];
      CompanyDestiny@1210190011 : Text[30];
      FromhouseModel@1100525000 : Code[20];
      OptionInstallmentInvoice@1210190000 : Boolean;
      PlotInstallmentInvoice@1100485001 : Boolean;
      GenerateProjectInstallment@1210190001 : Boolean;
      ProjectBudget@1210190002 : Boolean;
      ProjectOptBudgetFromStandard@1210190014 : Boolean;
      PlotOptBudgetFromProject@1210190034 : Boolean;
      ProjOptionBudgetExp@1210190003 : Boolean;
      Addit@1210190010 : Boolean;
      DestUpdBool@1210190027 : Boolean;
      LinesPrinted@1100485010 : Boolean;
      PrintActivityDetails@1100485011 : Boolean;
      LastUpdateStandardOptions@1210190019 : DateTime;
      LastupdateProjectOptions@1210190018 : DateTime;
      ProjectPlotOptionsToProcess@1210190020 : ' ,Geen nieuwe opties per bouwnummer,Nieuwe opties per bouwnummer';
      Text001@1100528300 : TextConst 'ENU=%1 ''%2'' has no BM relation (%3: %4-%5-%6-%7-%8-%9-%10)';
      Text002@1210190025 : TextConst 'ENU=Select a Job.';
      Text003@1210190028 : TextConst 'ENU=User has no permissions for standard data.';
      Text004@1210190026 : TextConst 'ENU=No Project data exported to Development.';
      Text014@1210190033 : TextConst 'ENU=Type should be development for %1.';
      Text015@1210190032 : TextConst 'ENU=No export allowed to current company';
      VersionDate@1100485000 : Date;
      Text100@1100485002 : TextConst 'ENU=Standard Option Budget Transferred to Development.';
      Text110@1100485004 : TextConst 'ENU=Standard Option Budget Transferred to Project %1.';
      Text120@1100485005 : TextConst 'ENU=Project %1 Option Budget Transferred to Plot %2.';
      Text130@1100485006 : TextConst 'ENU=Project %1 Plot %2 Option Installments Generated.';
      Text140@1100485003 : TextConst 'ENU=Project %1 Plot %2 Option Installments Set to Invoice.';
      Text150@1100485007 : TextConst 'ENU=Project %1 Plot %2 Installments Set to Invoice.';
      Text160@1100485008 : TextConst 'ENU=Project %1 Option Budget Transferred to Development.';
      ActivityReport@1100525005 : Report 11012530;
      ProjectDescription@1100525001 : Text[80];
      Text170@1100525002 : TextConst 'ENU=Project is not joined with developing company';
      InvoicePlotInstallmentsEditabl@19028659 : Boolean INDATASET;
      Text200@1100525004 : TextConst 'ENU=User has no permissions for project data.';
      Text019@1100525006 : TextConst 'ENU=Type should be construction for %1.';

    PROCEDURE CopyOptionBudgetInternally@1100485005(FromProjectNo@1100485000 : Code[20]) lOptionBudgetUpdated : Boolean;
    BEGIN
      lOptionBudgetUpdated := FALSE;

      OptBudgetOrig.RESET;
      OptBudgSumOrig.RESET;
      OptBudgetRec.RESET;

      OptBudgetRec.SETRANGE("Project No.",ProjOptRec."Project No.");
      OptBudgetRec.SETRANGE("Plot No.",ProjOptRec."Plot No.");
      OptBudgetRec.SETRANGE("House Model", ProjOptRec."House Model");
      OptBudgetRec.SETRANGE("Main Group", ProjOptRec."Main Group");
      OptBudgetRec.SETRANGE(Group, ProjOptRec.Group);
      OptBudgetRec.SETRANGE("Sub Group", ProjOptRec."Sub Group");
      OptBudgetRec.SETRANGE(Option, ProjOptRec.Option);
      IF NOT OptBudgetRec.FINDFIRST THEN BEGIN
        OptBudgSumRec.RESET;
        OptBudgSumRec.SETRANGE("Project No.",ProjOptRec."Project No.");
        OptBudgSumRec.SETFILTER("Contract No.", '%1', '');
        OptBudgSumRec.SETRANGE("Plot No.",ProjOptRec."Plot No.");
        OptBudgSumRec.SETRANGE("House Model", ProjOptRec."House Model");
        OptBudgSumRec.SETRANGE("Main Group", ProjOptRec."Main Group");
        OptBudgSumRec.SETRANGE(Group, ProjOptRec.Group);
        OptBudgSumRec.SETRANGE("Sub Group", ProjOptRec."Sub Group");
        OptBudgSumRec.SETRANGE(Option, ProjOptRec.Option);
        IF NOT OptBudgSumRec.FINDFIRST THEN BEGIN
          OptBudgetRec.RESET;
          OptBudgSumRec.RESET;
          //** Optiebegroting
          OptBudgetOrig.SETRANGE("Project No.", FromProjectNo);
          OptBudgetOrig.SETFILTER("Plot No.", '%1', '');
          OptBudgetOrig.SETRANGE("House Model", ProjOptRec."House Model");

          IF (FromhouseModel <> '') AND (FromProjectNo <> '') THEN
            OptBudgetOrig.SETRANGE("House Model", FromhouseModel);

          OptBudgetOrig.SETRANGE("Main Group", ProjOptRec."Main Group");
          OptBudgetOrig.SETRANGE(Group, ProjOptRec.Group);
          OptBudgetOrig.SETRANGE("Sub Group", ProjOptRec."Sub Group");
          OptBudgetOrig.SETRANGE(Option, ProjOptRec.Option);
          IF OptBudgetOrig.FINDSET THEN BEGIN
            REPEAT
              OptBudgetRec.TRANSFERFIELDS(OptBudgetOrig);
              OptBudgetRec."Project No." := ProjOptRec."Project No.";
              OptBudgetRec."Plot No."    := ProjOptRec."Plot No.";
              IF (FromhouseModel <> '') AND (FromProjectNo <> '') THEN
                OptBudgetRec."House Model" := ProjOptRec."House Model";
              OptBudgetRec.VALIDATE(Quantity);
              OptBudgetRec.INSERT;
              lOptionBudgetUpdated := TRUE;
            UNTIL OptBudgetOrig.NEXT = 0;
          END;
          //** Staartblad optiebegroting
          OptBudgSumOrig.SETRANGE("Project No.", FromProjectNo);
          OptBudgSumOrig.SETFILTER("Contract No.", '%1', '');
          OptBudgSumOrig.SETFILTER("Plot No.", '%1', '');
          OptBudgSumOrig.SETRANGE("House Model", ProjOptRec."House Model");

          IF (FromhouseModel <> '') AND (FromProjectNo <> '') THEN
            OptBudgSumOrig.SETRANGE("House Model", FromhouseModel);

          OptBudgSumOrig.SETRANGE("Main Group", ProjOptRec."Main Group");
          OptBudgSumOrig.SETRANGE(Group, ProjOptRec.Group);
          OptBudgSumOrig.SETRANGE("Sub Group", ProjOptRec."Sub Group");
          OptBudgSumOrig.SETRANGE(Option, ProjOptRec.Option);
          IF OptBudgSumOrig.FINDSET THEN BEGIN
            REPEAT
              OptBudgSumRec.TRANSFERFIELDS(OptBudgSumOrig);
              OptBudgSumRec."Project No." := ProjOptRec."Project No.";
              OptBudgSumRec."Plot No.":= ProjOptRec."Plot No.";
              IF (FromhouseModel <> '') AND (FromProjectNo <> '') THEN
                OptBudgSumRec."House Model" := ProjOptRec."House Model";
              OptBudgSumRec.INSERT(TRUE);
              lOptionBudgetUpdated := TRUE;
            UNTIL OptBudgSumOrig.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CopyOptionBudgetToDestCompany@1210190006(iCompanyDest@1210190001 : Text[30];iProjectOrig@1210190000 : Code[20];iProjectDest@1210190003 : Code[20]) lDestUpdated : Boolean;
    VAR
      ErrorText@1210190002 : Text[250];
    BEGIN
      //**meerwerkopties (nivo 1 = standaard optie; nivo 2 = project optie)
      lDestUpdated := FALSE;
      //** Set Destiny Company
      ProjOptDest.CHANGECOMPANY(iCompanyDest);
      OptBudgetDest.CHANGECOMPANY(iCompanyDest);
      OptBudgSumDest.CHANGECOMPANY(iCompanyDest);

      OptBudgetOrig.RESET;
      ProjOptOrig.RESET;
      ProjOptOrig.SETFILTER("Project No.",'%1', iProjectOrig);

      IF ProjOptOrig.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF ProjOptDest.GET(iProjectDest,ProjOptOrig."Plot No.",ProjOptOrig."House Model",
                                          ProjOptOrig."Main Group",ProjOptOrig.Group,
                                          ProjOptOrig."Sub Group",ProjOptOrig.Option)
          THEN BEGIN
            //** Remove existing summary sheet and option budget
            OptBudgSumDest.SETRANGE("Project No.", iProjectDest);
            OptBudgSumDest.SETFILTER("Contract No.", '%1', '');
            OptBudgSumDest.SETFILTER("Plot No.", '%1', '');
            OptBudgSumDest.SETRANGE("House Model", ProjOptOrig."House Model");
            OptBudgSumDest.SETRANGE("Main Group", ProjOptOrig."Main Group");
            OptBudgSumDest.SETRANGE(Group, ProjOptOrig.Group);
            OptBudgSumDest.SETRANGE("Sub Group", ProjOptOrig."Sub Group");
            OptBudgSumDest.SETRANGE(Option, ProjOptOrig.Option);
            OptBudgSumDest.DELETEALL;
            OptBudgSumDest.RESET;

            OptBudgetDest.SETRANGE("Project No.", iProjectDest);
            OptBudgetDest.SETFILTER("Plot No.", '%1', '');
            OptBudgetDest.SETRANGE("House Model", ProjOptOrig."House Model");
            OptBudgetDest.SETRANGE("Main Group", ProjOptOrig."Main Group");
            OptBudgetDest.SETRANGE(Group, ProjOptOrig.Group);
            OptBudgetDest.SETRANGE("Sub Group", ProjOptOrig."Sub Group");
            OptBudgetDest.SETRANGE(Option, ProjOptOrig.Option);
            OptBudgetDest.DELETEALL;
            OptBudgetDest.RESET;

            //**optiebegroting
            OptBudgetOrig.SETRANGE("Project No.", iProjectOrig);
            OptBudgetOrig.SETFILTER("Plot No.", '%1', '');
            OptBudgetOrig.SETRANGE("House Model", ProjOptOrig."House Model");
            OptBudgetOrig.SETRANGE("Main Group", ProjOptOrig."Main Group");
            OptBudgetOrig.SETRANGE(Group, ProjOptOrig.Group);
            OptBudgetOrig.SETRANGE("Sub Group", ProjOptOrig."Sub Group");
            OptBudgetOrig.SETRANGE(Option, ProjOptOrig.Option);
            IF OptBudgetOrig.FINDSET THEN BEGIN
              REPEAT
                OptBudgetDest.COPY(OptBudgetOrig);
                OptBudgetDest."Project No." := iProjectDest;
                //kzwerver, 20110816, sn, #26039
                //kzwerver, 20111011, c, #C-026103
                GetRelatedCostObject(OptBudgetDest."Cost Object", OptBudgetDest."Cost Type", iCompanyDest);
                IF (OptBudgetDest."Cost Object" = '') THEN BEGIN
                  ErrorText := STRSUBSTNO(Text001, OptBudgetOrig.FIELDCAPTION("Cost Object"),
                    OptBudgetOrig."Cost Object", OptBudgetOrig.TABLECAPTION,
                    iProjectDest, OptBudgetOrig."Plot No.",
                    OptBudgetOrig."House Model", OptBudgetOrig."Main Group",
                    OptBudgetOrig.Group, OptBudgetOrig."Sub Group", OptBudgetOrig.Option);
                  AddMessage(iCompanyDest, COMPANYNAME, iProjectOrig, OptBudgetOrig."Plot No.", ErrorText);
                END;
                //kzwerver, 20110816, en, #26039
                //kzwerver, 20111011, sn, #C-026103
                IF (OptBudgetOrig."Cost Type" <> OptBudgetDest."Cost Type") THEN
                  RecalcOptBudgetDest;
                //kzwerver, 20111011, en, #C-026103
                OptBudgetDest.INSERT(TRUE);
                DestUpdBool := TRUE;
                lDestUpdated := TRUE;
              UNTIL OptBudgetOrig.NEXT = 0;
            END;

            //** Staartblad optiebegroting
            OptBudgSumOrig.SETRANGE("Project No.", iProjectOrig);
            OptBudgSumOrig.SETFILTER("Plot No.", '%1', '');
            OptBudgSumOrig.SETFILTER("Contract No.", '%1', '');
            OptBudgSumOrig.SETRANGE("House Model", ProjOptOrig."House Model");
            OptBudgSumOrig.SETRANGE("Main Group", ProjOptOrig."Main Group");
            OptBudgSumOrig.SETRANGE(Group, ProjOptOrig.Group);
            OptBudgSumOrig.SETRANGE("Sub Group", ProjOptOrig."Sub Group");
            OptBudgSumOrig.SETRANGE(Option, ProjOptOrig.Option);
            IF OptBudgSumOrig.FINDSET THEN BEGIN
              REPEAT
                OptBudgSumDest.COPY(OptBudgSumOrig);
                OptBudgSumDest."Project No." := iProjectDest;
                //kzwerver, 20110816, sn, #26039
                //kzwerver, 20111011, c, #C-026103
                GetRelatedCostObject(OptBudgSumDest."Cost Object", OptBudgSumDest."Cost Type", iCompanyDest);
                IF (OptBudgSumDest."Cost Object" = '') THEN BEGIN
                  ErrorText := STRSUBSTNO(Text001, OptBudgSumOrig.FIELDCAPTION("Cost Object"),
                    OptBudgSumOrig."Cost Object", OptBudgSumOrig.TABLECAPTION,
                    iProjectDest, OptBudgSumOrig."Plot No.",
                    OptBudgSumOrig."House Model", OptBudgSumOrig."Main Group",
                    OptBudgSumOrig.Group, OptBudgSumOrig."Sub Group", OptBudgSumOrig.Option);
                  AddMessage(iCompanyDest, COMPANYNAME, iProjectOrig, OptBudgSumOrig."Plot No.", ErrorText);
                END;
                //kzwerver, 20110816, en, #26039
                //kzwerver, 20111011, sn, #C-026103
                IF (OptBudgSumOrig."Cost Type" <> OptBudgSumDest."Cost Type") THEN
                  RecalcOptBudgSumDest;
                //kzwerver, 20111011, en, #C-026103
                OptBudgSumDest.INSERT(TRUE);
                DestUpdBool := TRUE;
                lDestUpdated := TRUE;
              UNTIL OptBudgSumOrig.NEXT = 0;
            END;

            CopyOptionTechText(iCompanyDest, iProjectDest); //kzwerver, 20110816, n, #26039

            ProjOptDest."Budget Changed by Integration" := TRUE;
            ProjOptDest.MODIFY;

            ProjOptOrig."Transaction Date Out" := CURRENTDATETIME;
            ProjOptOrig.MODIFY;

          END;

        UNTIL ProjOptOrig.NEXT = 0;
      END;
    END;

    PROCEDURE CheckLastUpdateCompany@1210190007();
    BEGIN
      ProjOptOrig.RESET;
      ProjOptOrig.SETFILTER("Project No.",'%1', '');
      ProjOptOrig.SETFILTER("Plot No.", '%1', '');
      ProjOptOrig.SETFILTER(ProjOptOrig."Transaction Date Out", '>%1',0DT);
      LastUpdateStandardOptions := 0DT;

      IF ProjOptOrig.FINDSET THEN BEGIN
        REPEAT
        IF LastUpdateStandardOptions < ProjOptOrig."Transaction Date Out" THEN
           LastUpdateStandardOptions := ProjOptOrig."Transaction Date Out";
        UNTIL ProjOptOrig.NEXT = 0;
      END;

      ProjOptOrig.RESET;
    END;

    PROCEDURE CheckLastUpdateProject@1210190008();
    BEGIN
      ProjOptOrig.RESET;
      ProjRec.RESET;
      LastupdateProjectOptions := 0DT;
      ProjectPlotOptionsToProcess := ProjectPlotOptionsToProcess::" " ;
      ProjectDescription := '';

      IF (ProjFilter <> '') THEN BEGIN
        ProjRec.SETFILTER("No.",ProjFilter);
        IF ProjRec.FINDFIRST THEN BEGIN
          IF ProjFilter = ProjRec."No." THEN BEGIN

            IF (ProjRec."Joint Company" = '') OR (ProjRec."Joint Job No." = '') THEN
              ERROR(Text170);

            ProjectDescription := ProjRec.Description;
            ProjOptOrig.SETFILTER("Project No.",'%1', ProjRec."No.");
            ProjOptOrig.SETFILTER("Plot No.", '%1', '');
            ProjOptOrig.SETFILTER(ProjOptOrig."Transaction Date Out", '>%1',0DT);
            LastupdateProjectOptions := 0DT;
            IF ProjOptOrig.FINDSET THEN BEGIN
              REPEAT
                IF LastupdateProjectOptions < ProjOptOrig."Transaction Date Out" THEN
                  LastupdateProjectOptions := ProjOptOrig."Transaction Date Out";
              UNTIL ProjOptOrig.NEXT = 0;
            END;

            ProjOptOrig.SETFILTER(ProjOptOrig."Transaction Date Out", '');
            ProjOptOrig.SETRANGE("Budget Changed by Integration", TRUE);
            ProjOptOrig.SETFILTER("Plot No.", '<>%1', '');

            IF ProjOptOrig.FINDFIRST THEN
               ProjectPlotOptionsToProcess := ProjectPlotOptionsToProcess::"Nieuwe opties per bouwnummer"
            ELSE
               ProjectPlotOptionsToProcess := ProjectPlotOptionsToProcess::"Geen nieuwe opties per bouwnummer";

            ProjOptOrig.RESET;
          END;
        END;
      END;
    END;

    PROCEDURE AddMessage@1100485000(ToCompany@1100485000 : Text[50];FromCompany@1100485004 : Text[50];FromProject@1100485001 : Code[20];FromPlot@1100485002 : Code[20];lText@1100485003 : Text[250]);
    BEGIN
      ActivityReport.AddMessage(ToCompany,FromCompany,FromProject,FromPlot,lText);
      LinesPrinted := TRUE;
    END;

    PROCEDURE CopyOptionTechText@1210190000(iCompanyDest@1210190002 : Text[30];iProjectDest@1210190003 : Code[20]);
    VAR
      OptionTextOrigRec@1210190001 : Record 11012511;
      OptionTextDestRec@1210190000 : Record 11012511;
    BEGIN
      //kzwerver, 20110816, n, #26039
      IF (NOT ProjectSetup."Copy Tech Texts") THEN
        EXIT;

      OptionTextDestRec.CHANGECOMPANY(iCompanyDest);

      //Delete Tech Text
      OptionTextDestRec.RESET;
      OptionTextDestRec.SETRANGE(Table, OptionTextOrigRec.Table::Option);
      OptionTextDestRec.SETRANGE("Text Type", OptionTextOrigRec."Text Type"::Technical);
      OptionTextDestRec.SETFILTER("Project No.", '%1', iProjectDest);
      OptionTextDestRec.SETFILTER("House Model", '%1', ProjOptOrig."House Model");
      OptionTextDestRec.SETFILTER("Option Main Group", '%1', ProjOptOrig."Main Group");
      OptionTextDestRec.SETFILTER("Option Sub Group", '%1', ProjOptOrig."Sub Group");
      OptionTextDestRec.SETFILTER("Option Group", '%1', ProjOptOrig.Group);
      OptionTextDestRec.SETFILTER("Plot No.", '%1', ProjOptOrig."Plot No.");
      OptionTextDestRec.SETFILTER(Option, '%1', ProjOptOrig.Option);
      OptionTextDestRec.DELETEALL;

      //Copy Tech Text
      OptionTextOrigRec.RESET;
      OptionTextOrigRec.SETRANGE(Table, OptionTextOrigRec.Table::Option);
      OptionTextOrigRec.SETRANGE("Text Type", OptionTextOrigRec."Text Type"::Technical);
      OptionTextOrigRec.SETRANGE("Project No.", ProjOptOrig."Project No.");
      OptionTextOrigRec.SETRANGE("House Model", ProjOptOrig."House Model");
      OptionTextOrigRec.SETRANGE("Option Main Group", ProjOptOrig."Main Group");
      OptionTextOrigRec.SETRANGE("Option Sub Group", ProjOptOrig."Sub Group");
      OptionTextOrigRec.SETRANGE("Option Group",ProjOptOrig.Group);
      OptionTextOrigRec.SETRANGE("Plot No.", ProjOptOrig."Plot No.");
      OptionTextOrigRec.SETRANGE(Option, ProjOptOrig.Option);
      IF OptionTextOrigRec.FINDSET THEN BEGIN
        REPEAT
          OptionTextDestRec.TRANSFERFIELDS(OptionTextOrigRec);
          OptionTextDestRec."Project No." := iProjectDest;
          IF OptionTextDestRec.INSERT THEN;
        UNTIL OptionTextOrigRec.NEXT = 0;
      END;
    END;

    PROCEDURE CostObjectIsPresentInDestComp@1210190001(CostType@1210190000 : 'Labor,Material,Subcontracting,Plant,Sundry';CostObject@1210190001 : Code[20];DestinationComp@1210190002 : Text[30]) : Boolean;
    VAR
      DimensionValue@1210190003 : Record 349;
    BEGIN
      DimensionValue.CHANGECOMPANY(DestinationComp);
      DimensionValue.SETCURRENTKEY(Code, "Global Dimension No.");
      DimensionValue.SETRANGE(Code, CostObject);
      DimensionValue.SETRANGE("Global Dimension No.", 2);
      DimensionValue.SETRANGE("Cost Type", CostType);
      EXIT(DimensionValue.FINDFIRST);
    END;

    PROCEDURE GetRelatedCostObject@1100528300(VAR CostObject@1210190001 : Code[20];VAR CostObjectType@1100528300 : Option;DestinationComp@1210190002 : Text[30]);
    VAR
      CostObjectRelationBuyerMgt@1210190003 : Record 11012351;
      DimensionValue@1100528301 : Record 349;
      lCostObject@1210190000 : Code[20];
    BEGIN
      //kzwerver, 111011, n, #C-026103
      lCostObject := '';

      CostObjectRelationBuyerMgt.SETRANGE("Construction Company", COMPANYNAME);
      CostObjectRelationBuyerMgt.SETRANGE("Construction Cost Object", CostObject);
      CostObjectRelationBuyerMgt.SETRANGE("Development Company", DestinationComp);
      IF (CostObjectRelationBuyerMgt.FINDFIRST) THEN BEGIN
        lCostObject := CostObjectRelationBuyerMgt."Development Cost Object";
        IF (lCostObject <> '') THEN BEGIN
          DimensionValue.SETCURRENTKEY(Code, "Global Dimension No.");
          DimensionValue.SETRANGE(Code, lCostObject);
          DimensionValue.SETRANGE("Global Dimension No.", 2);
          IF (DimensionValue.FINDFIRST) THEN
            CostObjectType := DimensionValue."Cost Type";
        END;
      END;

      IF (lCostObject = '') THEN BEGIN
        DimensionValue.CHANGECOMPANY(DestinationComp);
        DimensionValue.SETCURRENTKEY(Code, "Global Dimension No.");
        DimensionValue.SETRANGE(Code, CostObject);
        DimensionValue.SETRANGE("Global Dimension No.", 2);
        IF (DimensionValue.FINDFIRST) THEN
          lCostObject := DimensionValue.Code;
          CostObjectType := DimensionValue."Cost Type";
      END;

      CostObject := lCostObject;
    END;

    LOCAL PROCEDURE RecalcOptBudgetDest@1100528305();
    BEGIN
      //kzwerver, 111011, n, #C-026103
      IF (OptBudgetOrig."Cost Type" = OptBudgetOrig."Cost Type"::Labor) AND
         (OptBudgetDest."Cost Type" <> OptBudgetDest."Cost Type"::Labor)
      THEN BEGIN
        IF (OptBudgetDest.Rate <> 0) THEN
          OptBudgetDest.Price := OptBudgetDest.Norm * OptBudgetDest.Rate;
        OptBudgetDest."Rate Code" := '';
        OptBudgetDest.Rate := 0;
        OptBudgetDest.Norm := 0;
      END;
    END;

    LOCAL PROCEDURE RecalcOptBudgSumDest@1100528301();
    BEGIN
      //kzwerver, 111011, n, #C-026103
      IF (OptBudgSumOrig."Cost Type" = OptBudgSumOrig."Cost Type"::Labor) AND
         (OptBudgSumDest."Cost Type" <> OptBudgSumDest."Cost Type"::Labor)
      THEN BEGIN
        IF (OptBudgSumDest.Rate <> 0) THEN
          OptBudgSumDest.Price := OptBudgSumDest.Norm * OptBudgSumDest.Rate;
        OptBudgSumDest."Rate Code" := '';
        OptBudgSumDest.Rate := 0;
        OptBudgSumDest.Norm := 0;
      END;
    END;

    LOCAL PROCEDURE ValidateCompanyDestiny@1100528600();
    VAR
      Company@1100525000 : Record 2000000006;
    BEGIN
      IF CompanyDestiny = COMPANYNAME THEN
        ERROR(Text015,CompanyDestiny);
      Company.GET(CompanyDestiny);

      ProjectSetupDest.CHANGECOMPANY(CompanyDestiny);
      ProjectSetupDest.FIND('-');

      IF ProjectSetupDest."Company Type" <> ProjectSetup."Company Type"::"Development Company" THEN
        ERROR(Text014,CompanyDestiny);

      CheckLastUpdateCompany();
    END;

    BEGIN
    END.
  }
}

