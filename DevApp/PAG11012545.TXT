OBJECT Page 11012545 Option Quote Subform
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Lines;
    SourceTable=Table11012514;
    DelayedInsert=Yes;
    PageType=ListPart;
    AutoSplitKey=Yes;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             QuantityEditable := TRUE;
           END;

    OnAfterGetRecord=BEGIN
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  InitRecord;
                  OnAfterGetCurrRecord;
                END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1907935204;1 ;ActionGroup;
                      CaptionML=ENU=&Line }
      { 1906656804;2 ;Action    ;
                      CaptionML=ENU=Sales Text;
                      Image=Text;
                      OnAction=BEGIN
                                 EditBuyerMgtText('Sales');
                               END;
                                }
      { 1905549604;2 ;Action    ;
                      CaptionML=ENU=Technical Text;
                      Image=Text;
                      OnAction=BEGIN
                                 EditBuyerMgtText('Technical');
                               END;
                                }
      { 1100525001;2 ;Action    ;
                      CaptionML=ENU=Internal Text;
                      Image=Text;
                      OnAction=BEGIN
                                 EditBuyerMgtText('Internal');
                               END;
                                }
      { 1906587504;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1906996104;2 ;Action    ;
                      CaptionML=ENU=Collective Update &Status;
                      Image=RefreshText;
                      OnAction=BEGIN
                                 CollUpdateStatus();
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190000;1;Group  ;
                GroupType=Repeater }

    { 1210190001;2;Field  ;
                SourceExpr="Main Group" }

    { 1210190003;2;Field  ;
                SourceExpr=Group }

    { 1210190005;2;Field  ;
                SourceExpr="Sub Group" }

    { 1210190007;2;Field  ;
                SourceExpr=Option;
                OnValidate=BEGIN
                             OptionOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           Rec.LookupOption();
                           IF Option <> '' THEN
                             CurrPage.SAVERECORD;
                         END;
                          }

    { 1210190009;2;Field  ;
                SourceExpr=Description }

    { 1100485000;2;Field  ;
                SourceExpr=Quantities;
                OnValidate=BEGIN
                             SetEditable;
                           END;
                            }

    { 1210190011;2;Field  ;
                BlankZero=Yes;
                SourceExpr=Quantity;
                Editable=QuantityEditable }

    { 1210190026;2;Field  ;
                BlankZero=Yes;
                SourceExpr="Nett Price" }

    { 1210190019;2;Field  ;
                SourceExpr="VAT Bus. Posting Group" }

    { 1210190013;2;Field  ;
                SourceExpr="VAT Prod. Posting Group" }

    { 1100525004;2;Field  ;
                SourceExpr="Developers Discount Percentage";
                Visible=FALSE }

    { 1210190017;2;Field  ;
                SourceExpr="Sales Price excl. VAT";
                Visible=FALSE }

    { 1210190028;2;Field  ;
                BlankZero=Yes;
                SourceExpr="VAT Amount" }

    { 1210190015;2;Field  ;
                BlankZero=Yes;
                SourceExpr="Sales Price incl. VAT" }

    { 1100525006;2;Field  ;
                SourceExpr="Sales Price incl. VAT (Buyer)";
                Visible=FALSE }

    { 1210190032;2;Field  ;
                BlankZero=Yes;
                SourceExpr="Sales Amount excl. VAT";
                Visible=FALSE }

    { 1210190030;2;Field  ;
                BlankZero=Yes;
                SourceExpr="Sales Amount incl. VAT" }

    { 1100525008;2;Field  ;
                CaptionML=ENU=Sales Amount incl. VAT (Buyer);
                SourceExpr=Quantity*"Sales Price incl. VAT (Buyer)";
                Visible=FALSE }

    { 1100525000;2;Field  ;
                SourceExpr="Sales Text";
                Visible=FALSE }

    { 1100525002;2;Field  ;
                SourceExpr="Technical Text";
                Visible=FALSE }

    { 1210190034;2;Field  ;
                SourceExpr=Status;
                OnValidate=BEGIN
                             TmpOptionRec.DELETEALL;
                             ProcessOnStatusChange(Rec, xRec.Status, Status);
                             CurrPage.SAVERECORD;
                             AskForGenerateInstallments();
                           END;
                            }

  }
  CODE
  {
    VAR
      Text000@1210190003 : TextConst 'ENU=Option %1,%2,%3,%4 is already present with status ''%5'' for project %6, plot %7.';
      Text002@1210190001 : TextConst 'ENU=Only expired lines gemarkeerd, these can not be updated collective.';
      Text003@1210190000 : TextConst 'ENU=Applied,Offered,Order,Invoice,Expired';
      TmpOptionRec@1210190004 : TEMPORARY Record 11012502;
      Text004@1210190005 : TextConst 'ENU=Do you want to generate installments for the option(s) ?';
      Text005@1100525000 : TextConst 'ENU=First select line(s).';
      QuantityEditable@1100525500 : Boolean INDATASET;

    PROCEDURE EditBuyerMgtText@1210190001(IType@1210190001 : Text[10]);
    VAR
      lvBuyerMgtTextRec@1210190000 : Record 11012511;
    BEGIN
      IF ("Option Quote No." = '') OR ("Line No." = 0) THEN
        EXIT;
      lvBuyerMgtTextRec.FILTERGROUP(9);
      lvBuyerMgtTextRec.SETRANGE(Table, lvBuyerMgtTextRec.Table::"Option Quote Line");
      CASE IType OF
        'Sales':
          lvBuyerMgtTextRec.SETRANGE("Text Type", lvBuyerMgtTextRec."Text Type"::Sales);
        'Technical':
          lvBuyerMgtTextRec.SETRANGE("Text Type", lvBuyerMgtTextRec."Text Type"::Technical);
        'Internal':
          lvBuyerMgtTextRec.SETRANGE("Text Type", lvBuyerMgtTextRec."Text Type"::Internal); //mg, 25-01-11: M23555
        ELSE
          EXIT;
      END;
      lvBuyerMgtTextRec.SETRANGE("Quote No.", "Option Quote No.");
      lvBuyerMgtTextRec.SETRANGE("Quote Line No.", "Line No.");
      lvBuyerMgtTextRec.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"Buyer Management Text", lvBuyerMgtTextRec);
    END;

    PROCEDURE CollUpdateStatus@1210190000();
    VAR
      lvOptQuoteLineRec@1210190002 : Record 11012514;
      lvNo@1210190001 : Integer;
      lvNewStatus@1210190000 : 'Applied,Offered,Order,Invoice,Expired';
      lvOldStatus@1210190003 : Option;
    BEGIN
      WITH lvOptQuoteLineRec DO BEGIN
        COPY(Rec);
        CurrPage.SETSELECTIONFILTER(lvOptQuoteLineRec);

        IF NOT FIND('-') THEN
          ERROR(Text005);

        SETFILTER(Status,'<>%1',Status::Expired);
        IF NOT FIND('-') THEN BEGIN

          ERROR(Text002);
        END;

        lvNo := STRMENU(Text003, 0);
        CASE lvNo OF
          1: lvNewStatus := Status::Applied;
          2: lvNewStatus := Status::Offered;
          3: lvNewStatus := Status::Order;
          4: lvNewStatus := Status::Invoice;
          5: lvNewStatus := Status::Expired;
          ELSE
            EXIT;
        END;

        TmpOptionRec.DELETEALL;
        REPEAT
          IF (lvNewStatus <> Status) THEN BEGIN
            lvOldStatus := Status;
            Status := lvNewStatus;
            MODIFY;
            ProcessOnStatusChange(lvOptQuoteLineRec, lvOldStatus, lvNewStatus);
          END;
        UNTIL NEXT = 0;
      END;

      AskForGenerateInstallments();
    END;

    PROCEDURE ProcessOnStatusChange@1210190006(IOptQuoteLineRec@1210190000 : Record 11012514;IOldStatus@1210190001 : Option;INewStatus@1210190002 : Option);
    VAR
      lvQuoteHeadRec@1210190007 : Record 11012513;
      lvOptionRec@1210190004 : Record 11012502;
      lvBuyerMgtCU@1210190003 : Codeunit 11012500;
      lvLevel@1210190006 : 'Standard,Project,Plot';
      lvNewCopy@1100485000 : Boolean;
    BEGIN
      WITH IOptQuoteLineRec DO BEGIN

        TESTFIELD("Project No.");
        TESTFIELD("Plot No.");
        TESTFIELD("House Model");
        TESTFIELD("Main Group");
        TESTFIELD(Group);
        TESTFIELD("Sub Group");
        TESTFIELD(Option);
        lvQuoteHeadRec.GET("Option Quote No.");
        lvQuoteHeadRec.CALCFIELDS("House Model");
        TESTFIELD("Project No.", lvQuoteHeadRec."Project No.");
        TESTFIELD("Plot No.", lvQuoteHeadRec."Plot No.");
        TESTFIELD("House Model", lvQuoteHeadRec."House Model");
        TESTFIELD(Quantity);

        IF lvOptionRec.GET("Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option) THEN BEGIN
          IF NOT lvOptionRec.Quantities THEN
            IF lvOptionRec.Status >= lvOptionRec.Status::Order THEN
              ERROR(Text000, "Main Group", Group, "Sub Group", Option, lvOptionRec.Status, "Project No.", "Plot No.");
          IF NOT lvOptionRec.Quantities THEN
              TESTFIELD(Quantity, 1);
        END ELSE BEGIN
          IF lvOptionRec.GET("Project No.", '', "House Model", "Main Group", Group, "Sub Group", Option) THEN BEGIN
            IF NOT lvOptionRec.Quantities THEN
              TESTFIELD(Quantity, 1);
            lvBuyerMgtCU.BmCopyOptions(
              lvLevel::Project, lvLevel::Plot,
              "Project No.", "Project No.",
              '', "Plot No.",
              "House Model", "House Model",
              "Main Group", "Main Group",
              Group, Group,
              "Sub Group", "Sub Group",
              Option, Option);
            lvNewCopy := TRUE;
          END;
        END;

        IF lvOptionRec.GET("Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option) THEN BEGIN
          IF lvOptionRec.Quantities AND
             (NOT lvNewCopy) AND
             (lvOptionRec.Status IN [lvOptionRec.Status::Order,lvOptionRec.Status::Invoice])
          THEN BEGIN
            lvOptionRec.Quantity += Quantity;
            IF lvOptionRec."Installments Generated" THEN
              lvOptionRec."Installments Generated" := FALSE;
          END ELSE BEGIN
            lvOptionRec.Description := Description;
            lvOptionRec.Quantity := Quantity;
            lvOptionRec.Quantities := Quantities;
          END;
          lvOptionRec.VALIDATE("Sales Price incl. VAT", "Sales Price incl. VAT");
          lvOptionRec.VALIDATE(Status, INewStatus);
          lvOptionRec."Modified by" := USERID;
          lvOptionRec."Last Date Modified" := TODAY;
          lvOptionRec.MODIFY(TRUE);
          lvOptionRec.UpdateWorkBudgetOnChanges(lvOptionRec, FALSE, FALSE);
        END ELSE BEGIN
          lvOptionRec.INIT;

          lvOptionRec."Project No." := "Project No.";
          lvOptionRec."Plot No." := "Plot No.";
          lvOptionRec."House Model" := "House Model";
          lvOptionRec."Main Group" := "Main Group";
          lvOptionRec.Group := Group;
          lvOptionRec."Sub Group" := "Sub Group";
          lvOptionRec.Option := Option;
          lvOptionRec.Status := INewStatus;
          lvOptionRec.Description := Description;
          lvOptionRec.Quantities := Quantities;
          lvOptionRec.Quantity := Quantity;
          lvOptionRec."Computed Sales Price Incl. VAT" := "Sales Amount incl. VAT";
          lvOptionRec."Sales Amount incl. VAT" := "Sales Amount excl. VAT";
          lvOptionRec."Contract Amount" := "Sales Amount excl. VAT";
          lvOptionRec."Offered Amount" := "Sales Amount excl. VAT";
          lvOptionRec."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
          lvOptionRec."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
          lvOptionRec."Computed VAT Amount" := "VAT Amount";

          lvOptionRec."VAT Amount" := "VAT Amount";
          lvOptionRec."Developers Discount Percentage" := "Developers Discount Percentage"; //C-025544
          lvOptionRec."Sales Price incl. VAT (Buyer)" := "Sales Price incl. VAT (Buyer)"; //C-025544
          lvOptionRec.VALIDATE("Sales Price incl. VAT", "Sales Price incl. VAT");

          lvOptionRec.INSERT(TRUE);
          lvOptionRec.VALIDATE(Status, INewStatus);
          lvOptionRec.MODIFY(TRUE);
        END;
        lvBuyerMgtCU.BmCopyQuoteLineTextToOption("Option Quote No.", "Line No.",
          "Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option);

        IF (lvOptionRec."Generate Installments") AND
           (lvOptionRec."Installment Scheme" <> '') AND (NOT  lvOptionRec."Installments Generated")
        THEN BEGIN
          TmpOptionRec := lvOptionRec;
          TmpOptionRec.INSERT;
        END;
      END;
    END;

    PROCEDURE AskForGenerateInstallments@1210190003();
    VAR
      lvGenerateProjInstalmCU@1210190000 : Codeunit 11012007;
    BEGIN
      WITH TmpOptionRec DO BEGIN
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          COMMIT;
          IF CONFIRM(Text004) THEN BEGIN
            REPEAT
              lvGenerateProjInstalmCU.FromOptionNotAsk(
                "Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option);
              COMMIT;
            UNTIL NEXT = 0;
          END;
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE OptionOnAfterValidate@19058771();
    BEGIN
      IF Option <> '' THEN
        CurrPage.SAVERECORD;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      CALCFIELDS("Quote Amount incl. VAT", "Quote Amount excl. VAT");
      SetEditable;
    END;

    LOCAL PROCEDURE SetEditable@19028302();
    BEGIN
      QuantityEditable := Quantities;
    END;

    BEGIN
    END.
  }
}

