OBJECT Page 11012549 Plot No. Option Subform
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Plot Options;
    SourceTable=Table11012502;
    SourceTableView=SORTING(Project No.,Plot No.,House Model,Main Group,Group,Sub Group,Option);
    DataCaptionFields=Project No.,Plot No.;
    PageType=ListPart;
    CardPageID=Plot No. Option;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN
                 JobSetup.GET();
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1906587504;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1905888404;2 ;Action    ;
                      CaptionML=ENU=S&witch on 'Generate Installments' (Option);
                      Image=SwitchCompanies;
                      OnAction=BEGIN
                                 SetGenerateInstallments();
                               END;
                                }
      { 1906656604;2 ;Action    ;
                      CaptionML=ENU=Generate Option Install&ments;
                      Image=AmountByPeriod;
                      OnAction=BEGIN
                                 GenerateOptionInstallments();
                               END;
                                }
      { 1904103004;2 ;Action    ;
                      CaptionML=ENU=Collective Update Option Status;
                      Image=RefreshText;
                      OnAction=BEGIN
                                 CollUpdateStatus();
                               END;
                                }
      { 1100409000;2 ;Action    ;
                      CaptionML=ENU=Transfer Option Difference to Budget;
                      Image=NewTransferOrder;
                      OnAction=BEGIN
                                 //C019697
                                 TransferOptionDiffToBudget;
                               END;
                                }
      { 1902014104;1 ;ActionGroup;
                      CaptionML=ENU=&Option }
      { 1210190003;2 ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Card Form;
                      Image=EditLines;
                      OnAction=BEGIN
                                 PlotOptionCard();
                               END;
                                }
      { 1905549604;2 ;Action    ;
                      CaptionML=ENU=Option Budget;
                      Image=Job;
                      OnAction=BEGIN
                                 OptionBudget();
                               END;
                                }
      { 1904103204;2 ;Action    ;
                      CaptionML=ENU=Sur&charges;
                      Image=InsertStartingFee;
                      OnAction=BEGIN
                                 OptionSurcharges();
                               END;
                                }
      { 1907424804;2 ;Action    ;
                      CaptionML=ENU=Sales Text;
                      Image=Text;
                      OnAction=BEGIN
                                 EditBuyerMgtText('Sales');
                               END;
                                }
      { 1904442504;2 ;Action    ;
                      CaptionML=ENU=Technical Text;
                      Image=Text;
                      OnAction=BEGIN
                                 EditBuyerMgtText('Technical');
                               END;
                                }
      { 1902218904;2 ;Action    ;
                      CaptionML=ENU=Do&cuments;
                      Image=Documents;
                      OnAction=BEGIN
                                 ShowDocuments;
                               END;
                                }
      { 1100525001;2 ;Action    ;
                      CaptionML=ENU=Internal Text;
                      Image=Text;
                      OnAction=BEGIN
                                 EditBuyerMgtText('Internal');
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 1210190018;2;Field  ;
                SourceExpr="Main Group" }

    { 6   ;2   ;Field     ;
                SourceExpr=Group }

    { 8   ;2   ;Field     ;
                SourceExpr="Sub Group" }

    { 10  ;2   ;Field     ;
                Lookup=No;
                SourceExpr=Option }

    { 14  ;2   ;Field     ;
                SourceExpr=Description }

    { 1210190025;2;Field  ;
                SourceExpr="Option No. External";
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr=Mandatory;
                Visible=FALSE }

    { 1210190021;2;Field  ;
                SourceExpr=Quantities;
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr=Quantity }

    { 1210190000;2;Field  ;
                SourceExpr="Unit Cost";
                OnDrillDown=VAR
                              lvOptionBudgetRec@1210190000 : Record 11012503;
                            BEGIN
                              CurrPage.UPDATE(TRUE);
                              COMMIT;
                              lvOptionBudgetRec.SETRANGE("Project No.", "Project No.");
                              lvOptionBudgetRec.SETRANGE("Plot No.", "Plot No.");
                              lvOptionBudgetRec.SETRANGE("House Model", "House Model");
                              lvOptionBudgetRec.SETRANGE("Main Group", "Main Group");
                              lvOptionBudgetRec.SETRANGE("Sub Group", "Sub Group");
                              lvOptionBudgetRec.SETRANGE(Group, Group);
                              lvOptionBudgetRec.SETRANGE(Option, Option);
                              PAGE.RUNMODAL(PAGE::"Option Budget Lines", lvOptionBudgetRec);
                              CurrPage.UPDATE;
                            END;
                             }

    { 1210190019;2;Field  ;
                SourceExpr=Surcharges;
                OnDrillDown=BEGIN
                              CurrPage.UPDATE(TRUE);
                              COMMIT;
                              OptionSurcharges();
                              CurrPage.UPDATE;
                            END;
                             }

    { 1210190034;2;Field  ;
                SourceExpr="Summary Sheet" }

    { 22  ;2   ;Field     ;
                SourceExpr="Nett Price" }

    { 1100525008;2;Field  ;
                SourceExpr="Nett Amount";
                Visible=FALSE }

    { 24  ;2   ;Field     ;
                SourceExpr="VAT Bus. Posting Group" }

    { 26  ;2   ;Field     ;
                SourceExpr="VAT Prod. Posting Group" }

    { 28  ;2   ;Field     ;
                SourceExpr="Computed VAT Amount" }

    { 30  ;2   ;Field     ;
                SourceExpr="Computed Sales Price Incl. VAT" }

    { 32  ;2   ;Field     ;
                SourceExpr="VAT Percentage" }

    { 1100525002;2;Field  ;
                SourceExpr="Developers Discount Percentage";
                Visible=FALSE }

    { 1210190023;2;Field  ;
                SourceExpr="Sales Price excl. VAT";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                SourceExpr="VAT Amount" }

    { 36  ;2   ;Field     ;
                SourceExpr="Sales Price incl. VAT" }

    { 1100525004;2;Field  ;
                SourceExpr="Sales Price incl. VAT (Buyer)";
                Visible=FALSE }

    { 38  ;2   ;Field     ;
                SourceExpr="Sales Amount incl. VAT" }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Sales Amount incl. VAT (Buyer);
                SourceExpr=Quantity*"Sales Price incl. VAT (Buyer)";
                Visible=FALSE }

    { 40  ;2   ;Field     ;
                SourceExpr="Fixed Sales Price" }

    { 1210190028;2;Field  ;
                SourceExpr="Sales Text";
                Visible=FALSE }

    { 1210190030;2;Field  ;
                SourceExpr="Technical Text";
                Visible=FALSE }

    { 42  ;2   ;Field     ;
                SourceExpr="Valid from" }

    { 44  ;2   ;Field     ;
                SourceExpr="Valid Until" }

    { 46  ;2   ;Field     ;
                SourceExpr="Version Date" }

    { 52  ;2   ;Field     ;
                SourceExpr="Contract Amount" }

    { 1100525010;2;Field  ;
                SourceExpr="Contract Amount - Nett Amount";
                Visible=FALSE }

    { 54  ;2   ;Field     ;
                SourceExpr="Offered Amount" }

    { 56  ;2   ;Field     ;
                SourceExpr="Offering Date" }

    { 1210190001;2;Field  ;
                SourceExpr="Offering Term" }

    { 1210190015;2;Field  ;
                SourceExpr="End Open Offer Term";
                Visible=FALSE }

    { 58  ;2   ;Field     ;
                SourceExpr="Contract Date" }

    { 60  ;2   ;Field     ;
                SourceExpr=Status;
                OnValidate=VAR
                             lvGenerateProjInstalmCU@1210190003 : Codeunit 11012007;
                             lvNewStatus@1210190001 : Option;
                             lvOldStatus@1210190002 : Option;
                           BEGIN
                             lvOldStatus := xRec.Status;
                             DeleteBudgetBln := FALSE;
                             UpdateBudgetBln := CheckUpdateBudgetOnStatChange(lvOldStatus, Status);
                             IF NOT UpdateBudgetBln THEN
                               DeleteBudgetBln := CheckDeleteBudgetOnStatChange(lvOldStatus, Status);

                             IF UpdateBudgetBln THEN BEGIN
                               MODIFY;
                               Rec.UpdateWorkBudgetOnChanges(Rec, FALSE, FALSE);
                             END ELSE BEGIN
                               IF DeleteBudgetBln THEN BEGIN
                                 lvNewStatus := Status;
                                 Status := lvOldStatus;
                                 Rec.UpdateWorkBudgetOnChanges(Rec, FALSE, TRUE);  //* Old status, otherwise budget is not processed/deleted
                                 IF (lvNewStatus <> Status::Expired) THEN
                                   VALIDATE(Status, lvNewStatus)
                                 ELSE
                                   Status := lvNewStatus;
                               END;
                             END;
                             CurrPage.SAVERECORD;

                             IF Status <> lvOldStatus THEN BEGIN
                               UpdateOptQuoteStatus(Rec);
                               CheckUpdateOptionCrossList(Rec);
                             END;

                             IF (Status IN [Status::Order, Status::Invoice]) AND (Status <> lvOldStatus) AND
                                ("Generate Installments") AND ("Installment Scheme" <> '') AND (NOT  "Installments Generated")
                             THEN BEGIN
                               COMMIT;
                               IF CONFIRM(Text010) THEN BEGIN
                                 lvGenerateProjInstalmCU.FromOptionNotAsk(
                                   "Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option);
                                 COMMIT;
                               END;
                             END;
                               StatusOnAfterValidate;

                             CurrPage.UPDATE(FALSE); //#C028251.c
                           END;
                            }

    { 1100485000;2;Field  ;
                SourceExpr="Order Date";
                Visible=FALSE }

    { 1100485002;2;Field  ;
                SourceExpr="Expired was Order";
                Visible=FALSE }

    { 62  ;2   ;Field     ;
                SourceExpr="Generate Installments" }

    { 64  ;2   ;Field     ;
                SourceExpr="Installment Scheme" }

    { 66  ;2   ;Field     ;
                SourceExpr="Installments Generated" }

    { 68  ;2   ;Field     ;
                SourceExpr="Input by";
                Visible=FALSE }

    { 70  ;2   ;Field     ;
                SourceExpr="Input Date";
                Visible=FALSE }

    { 72  ;2   ;Field     ;
                SourceExpr="Modified by";
                Visible=FALSE }

    { 74  ;2   ;Field     ;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1210190005;2;Field  ;
                SourceExpr="Last Date Printed on Opt.List";
                Visible=FALSE }

    { 1210190007;2;Field  ;
                SourceExpr="Last Time Printed on Opt.List";
                Visible=FALSE }

    { 1210190009;2;Field  ;
                SourceExpr="Last Mod. Date Def.Option";
                Visible=FALSE }

    { 1210190011;2;Field  ;
                SourceExpr="Last Modification Time Option";
                Visible=FALSE }

    { 1100485004;2;Field  ;
                SourceExpr=Principal;
                Visible=FALSE }

    { 1100485006;2;Field  ;
                SourceExpr="Principal Name";
                Visible=FALSE }

    { 1100525005;2;Field  ;
                SourceExpr=URL }

    { 1100525000;2;Field  ;
                SourceExpr=Picture;
                Visible=FALSE }

    { 1210190013;2;Field  ;
                SourceExpr="(Re)Print Option List";
                Visible=FALSE }

    { 1100525007;2;Field  ;
                SourceExpr="Closing Date" }

  }
  CODE
  {
    VAR
      JobSetup@1100485000 : Record 315;
      BuyerMgtCU@1210190001 : Codeunit 11012500;
      Text009@1210190003 : TextConst 'ENU=Installments generated for %1 options.';
      Text010@1210190004 : TextConst 'ENU=Do you want to generate installments for the option(s) ?';
      Text012@1210190006 : TextConst 'ENU=Only expired lines gemarkeerd, these can not be updated collective.';
      Text013@1210190007 : TextConst 'ENU=Applied,Offered,Order,Invoice,Expired';
      UpdateBudgetBln@1210190008 : Boolean;
      DeleteBudgetBln@1210190009 : Boolean;
      Text014@1210190010 : TextConst 'ENU=Do you want switch on ''%1'' of the Options ?';
      Text015@1100525000 : TextConst 'ENU=No lines selected, first select line(s)';

    PROCEDURE PlotOptionCard@1210190007();
    VAR
      lvOptionRec@1210190000 : Record 11012502;
    BEGIN
      lvOptionRec.FILTERGROUP(9);
      lvOptionRec.SETRANGE("Project No.", "Project No.");
      lvOptionRec.SETRANGE("Plot No.", "Plot No.");
      lvOptionRec.FILTERGROUP(0);
      lvOptionRec.SETRANGE("Project No.", "Project No.");
      lvOptionRec.SETRANGE("Plot No.", "Plot No.");
      lvOptionRec.SETRANGE("House Model", "House Model");
      lvOptionRec.SETRANGE("Main Group", "Main Group");
      lvOptionRec.SETRANGE(Group, Group);
      lvOptionRec.SETRANGE("Sub Group", "Sub Group");
      lvOptionRec.SETRANGE(Option, Option);
      lvOptionRec.FINDFIRST;
      lvOptionRec.SETRANGE("Main Group");
      lvOptionRec.SETRANGE(Group);
      lvOptionRec.SETRANGE("Sub Group");
      lvOptionRec.SETRANGE(Option);


      PAGE.RUNMODAL(PAGE::"Plot No. Option", lvOptionRec);
    END;

    PROCEDURE OptionBudget@1210190006();
    BEGIN
      BuyerMgtCU.EditOptionBudget(Rec, FALSE);
    END;

    PROCEDURE OptionSurcharges@1210190005();
    BEGIN
      BuyerMgtCU.EditOptionSurcharges(Rec);
    END;

    PROCEDURE EditBuyerMgtText@1210190003(IType@1210190001 : Text[10]);
    BEGIN
      BuyerMgtCU.EditOptionBuyerMgtText(Rec, IType);
    END;

    PROCEDURE CopyOptions@1210190004();
    VAR
      lvCopyProjOptionFrm@1210190000 : Page 11012544;
    BEGIN
      lvCopyProjOptionFrm.SetDefaults("Project No.", "Plot No.", "House Model", "House Model",'','','','');
      lvCopyProjOptionFrm.StdDialogRunModal;
    END;

    PROCEDURE CopyOptionsSelection@1210190002(IPlotLevel@1210190004 : Boolean;IMultiPlotToSelection@1100525000 : Boolean);
    VAR
      lvOptionRec@1210190002 : Record 11012502;
      lvOptionListFrm@1210190001 : Page 11012508;
      lvCopyTypeTo@1210190003 : 'Option,Quote';
      lvCopyLevelTo@1210190000 : 'Standard,Project,Plot';
    BEGIN
      lvOptionRec.SETRANGE("Project No.", "Project No.");
      lvOptionRec.FILTERGROUP(9);
      IF IPlotLevel THEN
        lvOptionRec.SETFILTER("Plot No.", '<>%1', '')
      ELSE
        lvOptionRec.SETRANGE("Plot No.", '');
      lvOptionRec.FILTERGROUP(0);
      lvOptionRec.SETRANGE("House Model", "House Model");
      IF NOT lvOptionRec.FINDSET(FALSE, FALSE) THEN BEGIN
        lvOptionRec."Project No." := "Project No.";
        lvOptionRec."Plot No." := '';
        lvOptionRec."House Model" := '';
      END;
      //lvOptionRec.SETRANGE("House Model");  //* Reset filter
      lvOptionListFrm.SETTABLEVIEW(lvOptionRec);
      lvOptionListFrm.SETRECORD(lvOptionRec);
      lvOptionListFrm.SetDefault(lvCopyTypeTo::Option, lvCopyLevelTo::Plot, "Project No.", "Plot No.", "House Model", '');
      IF IMultiPlotToSelection AND (NOT IPlotLevel) THEN
        lvOptionListFrm.SetMultiPlotToSelection();
      lvOptionListFrm.RUNMODAL;
    END;

    PROCEDURE CollUpdateStatus@1210190000();
    VAR
      lvOptionRec@1210190002 : Record 11012502;
      lvTmpOptionRec@1210190004 : TEMPORARY Record 11012502;
      lvGenerateProjInstalmCU@1210190005 : Codeunit 11012007;
      lvNo@1210190001 : Integer;
      lvNewStatus@1210190000 : 'Applied,Offered,Order,Invoice,Expired';
      lvOldStatus@1100485000 : Option;
    BEGIN
      WITH lvOptionRec DO BEGIN
        COPY(Rec);
        CurrPage.SETSELECTIONFILTER(lvOptionRec);
        IF NOT FINDFIRST THEN
          ERROR(Text015);

        SETFILTER(Status,'<>%1',Status::Expired);
        IF NOT FINDFIRST THEN BEGIN
          ERROR(Text012);
        END;

        lvNo := STRMENU(Text013, 0);
        CASE lvNo OF
          1: lvNewStatus := Status::Applied;
          2: lvNewStatus := Status::Offered;
          3: lvNewStatus := Status::Order;
          4: lvNewStatus := Status::Invoice;
          5: lvNewStatus := Status::Expired;
          ELSE
            EXIT;
        END;

        lvTmpOptionRec.DELETEALL;
        REPEAT
          lvOldStatus := Status;
          IF (lvNewStatus <> Status) THEN BEGIN
            DeleteBudgetBln := FALSE;
            UpdateBudgetBln := lvOptionRec.CheckUpdateBudgetOnStatChange(Status, lvNewStatus);
            IF NOT UpdateBudgetBln THEN
              DeleteBudgetBln := lvOptionRec.CheckDeleteBudgetOnStatChange(Status, lvNewStatus);

            IF UpdateBudgetBln THEN BEGIN
              VALIDATE(Status, lvNewStatus);
              "Modified by" := USERID;
              "Last Date Modified" := TODAY;
              "Last Mod. Date Def.Option" := TODAY;
              "Last Modification Time Option" := TIME;
              MODIFY;
              lvOptionRec.UpdateWorkBudgetOnChanges(lvOptionRec, FALSE, FALSE);
              IF ("Generate Installments") AND ("Installment Scheme" <> '') AND (NOT "Installments Generated") THEN BEGIN
                lvTmpOptionRec := lvOptionRec;
                lvTmpOptionRec.INSERT;
              END;
            END ELSE BEGIN
              IF DeleteBudgetBln THEN
                lvOptionRec.UpdateWorkBudgetOnChanges(lvOptionRec,FALSE,TRUE); //Old status, otherwise budget isn't processed/deleted
              VALIDATE(Status, lvNewStatus);
              IF (Status IN [Status::Order, Status::Invoice]) AND
                 ("Generate Installments") AND ("Installment Scheme" <> '') AND (NOT  "Installments Generated")
              THEN BEGIN
                lvTmpOptionRec := lvOptionRec;
                lvTmpOptionRec.INSERT;
              END;
              "Modified by" := USERID;
              "Last Date Modified" := TODAY;
              "Last Mod. Date Def.Option" := TODAY;
              "Last Modification Time Option" := TIME;
              MODIFY;
            END;
            IF Status <> lvOldStatus THEN BEGIN
              UpdateOptQuoteStatus(lvOptionRec);
              CheckUpdateOptionCrossList(lvOptionRec);
            END;
          END;
        UNTIL NEXT = 0;
      END;


      WITH lvTmpOptionRec DO BEGIN
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          COMMIT;
          IF CONFIRM(Text010) THEN BEGIN
            REPEAT
              lvGenerateProjInstalmCU.FromOptionNotAsk(
                "Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option);
              COMMIT;
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE SetGenerateInstallments@1210190008();
    VAR
      lvOptionRec@1210190000 : Record 11012502;
    BEGIN
      WITH lvOptionRec DO BEGIN
        COPY(Rec);
        CurrPage.SETSELECTIONFILTER(lvOptionRec);
        IF NOT FINDFIRST THEN
          ERROR(Text015);

        IF NOT CONFIRM(Text014, FALSE, FIELDCAPTION("Generate Installments")) THEN
          EXIT;

        SETRANGE("Generate Installments", FALSE);
        IF FINDSET(TRUE, FALSE) THEN;
        lvOptionRec.MODIFYALL("Generate Installments",TRUE);
      END;
    END;

    PROCEDURE GenerateOptionInstallments@1210190001();
    VAR
      lvOptionRec@1210190001 : Record 11012502;
      lvGenerateProjInstalmCU@1210190000 : Codeunit 11012007;
      lvCounterOrg@1210190002 : Integer;
    BEGIN
      WITH lvOptionRec DO BEGIN
        COPY(Rec);
        CurrPage.SETSELECTIONFILTER(lvOptionRec);
        IF NOT FINDFIRST THEN
          ERROR(Text015);

        IF NOT CONFIRM(Text010) THEN
          EXIT;

        SETRANGE("Installments Generated", FALSE);
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          lvCounterOrg := COUNT;
          REPEAT
            lvGenerateProjInstalmCU.FromOptionNotAsk(
              "Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option);
          UNTIL NEXT = 0;
        END;
        MESSAGE(Text009, (lvCounterOrg - COUNT));
      END;
    END;

    PROCEDURE TransferOptionDiffToBudget@1210190009();
    VAR
      Project@1210190000 : Record 11072003;
      Option@1210190001 : Record 11012502;
      TransferOptionDiffToBudget@1100409000 : Report 11012539;
    BEGIN
      Project.SETRANGE("No.", "Project No.");
      Option.SETRANGE("Plot No.", "Plot No.");
      Option.SETRANGE("House Model", "House Model");
      Option.SETRANGE("Main Group", "Main Group");
      Option.SETRANGE(Group, Group);
      Option.SETRANGE("Sub Group", "Sub Group");
      Option.SETRANGE(Option, Rec.Option);
      TransferOptionDiffToBudget.SETTABLEVIEW(Project);
      TransferOptionDiffToBudget.SETTABLEVIEW(Option);
      TransferOptionDiffToBudget.RUNMODAL;
    END;

    PROCEDURE ShowDocuments@1100485000();
    BEGIN
      ShowDocuments;
    END;

    LOCAL PROCEDURE StatusOnAfterValidate@19072689();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    BEGIN
    END.
  }
}

