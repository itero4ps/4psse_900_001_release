OBJECT Page 11012559 Plant Inventory
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Plant Inventory;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table11012555;
    SourceTableView=WHERE(Removed=CONST(No));
    PageType=List;
    OnOpenPage=BEGIN
                 PlantSetup.GET;
                 IF (NOT PlantSetup."Rate Codes") AND (Details = Details::RateCode) AND (NOT gSetDetail) THEN
                   Details := Details::PlantNo;
                 IF gSetDetail THEN
                   Details := gDetails;
                 DetailsEditable := (NOT gSetMultiSelection);
                 PrintBtnVisible := (gCompany = '');
                 SetVisibleOnDetails();
               END;

    OnNextRecord=VAR
                   CurrentSteps@1100525001 : Integer;
                   Step@1100525002 : Integer;
                   NumberOfSteps@1100525003 : Integer;
                   EOF@1100525004 : Boolean;
                 BEGIN
                   Rec2.COPY(Rec);

                   IF Details = Details::InventEntry THEN BEGIN
                     CurrentSteps := Rec2.NEXT(Steps);
                     IF CurrentSteps <> 0 THEN
                       Rec := Rec2;
                     EXIT(CurrentSteps);
                   END;

                   //Less Detailed
                   IF Steps < 0 THEN
                     Step := -1
                   ELSE
                     Step := 1;

                   CurrentSteps := 0;
                   EOF := Rec2.NEXT(Step) = 0;
                   IF NOT EOF THEN
                     FOR NumberOfSteps := 1 TO ABS(Steps) DO BEGIN
                       WHILE SameRec AND NOT EOF DO
                         EOF := Rec2.NEXT(Step) = 0;
                       IF NOT EOF THEN BEGIN
                         Rec := Rec2;
                         CurrentSteps := CurrentSteps + Step;
                       END;
                     END;

                   EXIT(CurrentSteps);
                 END;

    OnAfterGetRecord=BEGIN
                       ReadDataOtherCompany();
                       IF (GETFILTER("Present from") = '') THEN  //* Fill "Date Filter" with "Present from" filter
                         SETRANGE("Date Filter")
                       ELSE
                         SETFILTER("Date Filter",'..%1',GETRANGEMAX("Present from"));

                       EmployeeHideValue := (NOT CheckShowEmployee());
                       GetInspectionDate();
                       MeterReadingInspection();  //DP00614
                       IF (Details = Details::InventEntry) AND ("Arrival Order Type" = "Arrival Order Type"::ReturnedExit) THEN
                         Element := GetElementReturnedExit();
                       IF gCompany <> '' THEN BEGIN
                         "Location Description" := gCompPlantLoc.Description;
                         "Employee Location" := (gCompPlantLoc."Employee No." <> '');
                         "Plant Type Description" := gCompPlantType.Description;
                         "Plant No. Description" := gCompPlantNumber.Description;
                         "Inspection No." := gCompPlantNumber."Inspection No.";
                       END;
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 31      ;1   ;Action    ;
                      Name=PrintBtn;
                      Ellipsis=Yes;
                      CaptionML=ENU=&Print;
                      Promoted=Yes;
                      Visible=PrintBtnVisible;
                      Image=Print;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 InventoryReport@1100525000 : Report 11012553;
                               BEGIN
                                 SETRANGE("Sold Filter");
                                 InventoryReport.SetDetails(Details::InventEntry);
                                 InventoryReport.SETTABLEVIEW(Rec);
                                 InventoryReport.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525001;1;Group  ;
                GroupType=Group }

    { 1100525003;2;Field  ;
                CaptionML=ENU=Details;
                OptionCaptionML=ENU=Inventory Item,Plant Type,Plant No.,Rate Code;
                SourceExpr=Details;
                OnValidate=BEGIN
                             SetVisibleOnDetails();
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr=Location }

    { 4   ;2   ;Field     ;
                DrillDown=No;
                SourceExpr="Location Description" }

    { 1100485021;2;Field  ;
                SourceExpr="Employee Location";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Plant Type" }

    { 1100525004;2;Field  ;
                SourceExpr="Rental Type" }

    { 8   ;2   ;Field     ;
                SourceExpr="Plant No.";
                Visible=PlantNoLevelVisible;
                HideValue=PlantNoLevelHideValue }

    { 10  ;2   ;Field     ;
                CaptionML=ENU=Plant Description;
                SourceExpr=GetPlantDescription }

    { 1210190000;2;Field  ;
                DrillDown=No;
                SourceExpr="Plant Type Description";
                Visible=FALSE }

    { 1210190002;2;Field  ;
                DrillDown=No;
                SourceExpr="Plant No. Description";
                Visible=FALSE;
                HideValue=PlantNoLevelHideValue }

    { 1100485013;2;Field  ;
                DrillDown=No;
                SourceExpr="Inspection No.";
                Visible=FALSE;
                HideValue=PlantNoLevelHideValue }

    { 1100485002;2;Field  ;
                SourceExpr="Rate Code";
                Visible=RateCodeVisible;
                HideValue=RateCodeHideValue }

    { 1100485011;2;Field  ;
                CaptionML=ENU=External;
                SourceExpr=GetExternal() }

    { 12  ;2   ;Field     ;
                CaptionML=ENU=Quantity;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=CompressedQuantity(Details,FALSE) }

    { 1100409003;2;Field  ;
                CaptionML=ENU=Quantity Incl. Neg. Invent.;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=CompressedQuantity(Details,TRUE) }

    { 14  ;2   ;Field     ;
                CaptionML=ENU=Number Sold;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=SoldQuantity(Details) }

    { 1100485009;2;Field  ;
                DrillDown=No;
                SourceExpr="Vendor No.";
                Visible=PlantNoLevelVisible;
                HideValue=PlantNoLevelHideValue;
                OnLookup=VAR
                           Vend@1100485000 : Record 23;
                         BEGIN
                           IF (gCompany <> '') THEN
                             EXIT(FALSE);

                           Vend."No." := "Vendor No.";
                           PAGE.RUNMODAL(0, Vend);
                         END;
                          }

    { 1100525000;2;Field  ;
                Name=VendorName;
                DrillDown=No;
                CaptionML=ENU=Vendor Name;
                SourceExpr=GetVendorName();
                Visible=PlantNoLevelVisible;
                HideValue=PlantNoLevelHideValue }

    { 16  ;2   ;Field     ;
                SourceExpr="Present from";
                Visible=InventEntryLevelVisible;
                HideValue=InventEntryLevelHideValue }

    { 1100485005;2;Field  ;
                SourceExpr="Rental Start Date";
                Visible=InventEntryLevelVisible;
                HideValue=InventEntryLevelHideValue }

    { 1100485000;2;Field  ;
                SourceExpr="Expected return on";
                Visible=InventEntryLevelVisible;
                Editable=FALSE;
                HideValue=InventEntryLevelHideValue }

    { 18  ;2   ;Field     ;
                SourceExpr="Arrival Order Type";
                Visible=InventEntryLevelVisible;
                HideValue=InventEntryLevelHideValue }

    { 20  ;2   ;Field     ;
                SourceExpr="Arrival Order";
                Visible=InventEntryLevelVisible;
                HideValue=InventEntryLevelHideValue }

    { 22  ;2   ;Field     ;
                Lookup=No;
                DrillDown=No;
                BlankZero=Yes;
                SourceExpr="Arrival Order Line";
                Visible=InventEntryLevelVisible;
                HideValue=InventEntryLevelHideValue }

    { 1100409001;2;Field  ;
                DrillDown=No;
                SourceExpr="Arrival Order Line Descr. 1";
                Visible=FALSE;
                HideValue=InventEntryLevelHideValue }

    { 1100409002;2;Field  ;
                DrillDown=No;
                SourceExpr="Arrival Order Line Descr. 2";
                Visible=FALSE;
                HideValue=InventEntryLevelHideValue }

    { 1100485007;2;Field  ;
                DrillDown=No;
                SourceExpr="Arrival Transport Order";
                Visible=TransportVisible;
                HideValue=TransportHideValue;
                OnLookup=BEGIN
                           IF (gCompany <> '') THEN
                             EXIT;
                           LookupTransportOrder(TRUE);
                         END;
                          }

    { 1210190004;2;Field  ;
                Name=DateInspectBefore;
                CaptionML=ENU=Inspect before;
                SourceExpr=DateInspectBefore;
                Visible=PlantNoLevelVisible;
                HideValue=PlantNoLevelHideValue }

    { 1100529001;2;Field  ;
                CaptionML=ENU=Meter Reading;
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=ActMeterReading;
                Visible=MeterReadingVisible;
                HideValue=MeterReadingHideValue;
                OnDrillDown=BEGIN
                              //DP00614
                              DrillDownMeterReading();
                            END;
                             }

    { 1100529000;2;Field  ;
                CaptionML=ENU=Unit Meter Reading;
                SourceExpr=ActualMeterReadingUnit();
                Visible=MeterReadingVisible;
                HideValue=MeterReadingHideValue }

    { 1100529002;2;Field  ;
                CaptionML=ENU=Available (Meter);
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=AvailableMR;
                Visible=MeterReadingVisible;
                HideValue=MeterReadingHideValue }

    { 1100525002;2;Field  ;
                DrillDown=No;
                SourceExpr=Element;
                Visible=InventEntryLevelVisible;
                HideValue=InventEntryLevelHideValue }

    { 1100485015;2;Field  ;
                SourceExpr="Employee Company";
                Visible=PlantNoLevelVisible;
                HideValue=EmployeeHideValue }

    { 1100485017;2;Field  ;
                SourceExpr="Employee No.";
                Visible=PlantNoLevelVisible;
                Editable=PlantNoLevelHideValue;
                HideValue=EmployeeHideValue }

    { 1100485019;2;Field  ;
                Name=EmplName;
                CaptionML=ENU=Employee Name;
                SourceExpr=GetEmployeeName();
                Visible=PlantNoLevelVisible;
                HideValue=EmployeeHideValue }

    { 1100409000;2;Field  ;
                SourceExpr=Bulk;
                Visible=FALSE;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      PlantSetup@1100485000 : Record 11012550;
      Rec2@1100525016 : Record 11012555;
      gCompPlantType@1100525001 : Record 11012551;
      gCompPlantNumber@1100525002 : Record 11012552;
      gCompPlantLoc@1100525003 : Record 11012554;
      DateInspectBefore@1210190000 : Date;
      gDetails@1100485001 : Option;
      Details@11012001 : 'InventEntry,PlantType,PlantNo,RateCode';
      gSetDetail@1100485002 : Boolean;
      gSetMultiSelection@1100525005 : Boolean;
      DetailsEditable@1100525014 : Boolean INDATASET;
      PrintBtnVisible@19070540 : Boolean INDATASET;
      Text666@19003950 : TextConst 'ENU=%1 is not a valid selection.';
      PlantNoLevelVisible@1100525000 : Boolean INDATASET;
      InventEntryLevelVisible@1100525006 : Boolean INDATASET;
      RateCodeVisible@1100525008 : Boolean INDATASET;
      TransportVisible@1100525011 : Boolean INDATASET;
      MeterReadingVisible@1100529002 : Boolean INDATASET;
      PlantNoLevelHideValue@1100525007 : Boolean INDATASET;
      InventEntryLevelHideValue@1100525010 : Boolean INDATASET;
      RateCodeHideValue@1100525009 : Boolean INDATASET;
      TransportHideValue@1100525012 : Boolean INDATASET;
      EmployeeHideValue@1100525015 : Boolean INDATASET;
      MeterReadingHideValue@1100529003 : Boolean INDATASET;
      ActMeterReading@1100529000 : Decimal;
      AvailableMR@1100529001 : Decimal;
      gCompany@1100525013 : Text[30];

    PROCEDURE SameRec@1() : Boolean;
    BEGIN
      IF (Rec2.Location <> Location) OR
         (Rec2."Plant Type" <> "Plant Type")
      THEN
        EXIT(FALSE);

      IF (Details = Details::PlantNo) THEN
        EXIT(Rec2."Plant No." = "Plant No.");

      IF Details = Details::RateCode THEN
        EXIT((Rec2."Plant No." = "Plant No.") AND (Rec2."Rate Code" = "Rate Code"));

      EXIT(TRUE);
    END;

    PROCEDURE SetVisibleOnDetails@16();
    BEGIN
      PlantNoLevelVisible := (Details <> Details::PlantType);
      PlantNoLevelHideValue := (NOT PlantNoLevelVisible);
      InventEntryLevelVisible := (Details = Details::InventEntry);
      InventEntryLevelHideValue := (NOT InventEntryLevelVisible);
      RateCodeVisible := (Details = Details::RateCode) OR (PlantSetup."Rate Codes" AND (Details = Details::InventEntry));
      RateCodeHideValue := ((Details = Details::PlantType) OR (Details = Details::PlantNo));
      TransportVisible := (Details = Details::InventEntry) AND PlantSetup."Transport Orders" AND (gCompany = '');
      TransportHideValue := (NOT TransportVisible);
    END;

    PROCEDURE GetInspectionDate@1210190000();
    VAR
      Inspection@1210190000 : Record 11012564;
    BEGIN
      DateInspectBefore := 0D;
      IF Details = Details::PlantType THEN
        EXIT;

      IF gCompany <> '' THEN
        Inspection.CHANGECOMPANY(gCompany);
      Inspection.SETCURRENTKEY("Plant Type", "Plant No.", "Inspect before");
      Inspection.SETRANGE("Plant Type", "Plant Type");
      Inspection.SETRANGE("Plant No.", "Plant No.");
      Inspection.SETRANGE("Inspection Result", Inspection."Inspection Result"::" ");
      IF Inspection.FINDFIRST THEN
        DateInspectBefore := Inspection."Inspect before";
    END;

    LOCAL PROCEDURE MeterReadingInspection@1100529000();
    BEGIN
      //DP00614
      IF gCompany <> '' THEN BEGIN
        MeterReadingVisible := FALSE;
        MeterReadingHideValue := TRUE;
      END ELSE BEGIN
        ActMeterReading := ActualMeterReading();
        AvailableMR := NextMeterReadingAt() - ActualMeterReading;
        MeterReadingVisible := PlantNoLevelVisible;
        MeterReadingHideValue := PlantNoLevelHideValue;
      END;
    END;

    PROCEDURE GetExternal@1100485001() : Boolean;
    VAR
      PlantType@1100485000 : Record 11012551;
      PlantNumber@1100485001 : Record 11012552;
    BEGIN
      IF (Details = Details::PlantType) OR ("Plant No." = '') OR ("Plant No." = '0') THEN BEGIN
        IF gCompany <> '' THEN
          PlantType.CHANGECOMPANY(gCompany);
        IF PlantType.GET("Plant Type") THEN
          EXIT(PlantType.External);
      END ELSE BEGIN
        IF gCompany <> '' THEN
          PlantNumber.CHANGECOMPANY(gCompany);
        IF PlantNumber.GET("Plant Type", "Plant No.") THEN
          EXIT(PlantNumber.External);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetPlantDescription@1100525011() : Text[50];
    BEGIN
      IF gCompany = '' THEN
        EXIT(PlantDescr(Details))
      ELSE BEGIN
        IF (Details <> Details::PlantType) AND
           ("Plant No." <> '') AND ("Plant No." <> '0') AND (gCompPlantNumber.Description <> '')
        THEN
          EXIT(gCompPlantNumber.Description);
        EXIT(gCompPlantType.Description);
      END;
    END;

    PROCEDURE SetDetailSelection@1100485002(IDetails@1100485000 : Option);
    BEGIN
      gSetDetail := TRUE;
      gDetails := IDetails;
    END;

    PROCEDURE GetDetailSelection@1100485000(VAR ODetails@1100485000 : Option);
    BEGIN
      ODetails := Details;
    END;

    PROCEDURE GetEmployeeName@1100485003() : Text[200];
    VAR
      Empl@1100485000 : Record 5200;
    BEGIN
      IF CheckShowEmployee() THEN BEGIN
        IF "Employee Company" <> '' THEN
          Empl.CHANGECOMPANY("Employee Company")
        ELSE BEGIN
          IF (gCompany <> '') THEN
            Empl.CHANGECOMPANY(gCompany);
        END;
        IF Empl.GET("Employee No.") THEN
          EXIT(Empl."Full Name");
      END;

      EXIT('');
    END;

    PROCEDURE CheckShowEmployee@1100485005() : Boolean;
    VAR
      PlantInvent@1100485000 : Record 11012555;
    BEGIN
      IF Details = Details::PlantType THEN
        EXIT(FALSE);

      IF ("Employee No." <> '') AND (Details <> Details::InventEntry) THEN BEGIN
        IF (gCompany <> '') THEN
          PlantInvent.CHANGECOMPANY(gCompany);
        PlantInvent.SETRANGE(Removed, FALSE);
        PlantInvent.SETRANGE(Location, Location);
        PlantInvent.SETRANGE("Plant Type", "Plant Type");
        PlantInvent.SETRANGE("Plant No.", "Plant No.");
        IF Details = Details::RateCode THEN
          PlantInvent.SETRANGE("Rate Code", "Rate Code");
        PlantInvent.SETFILTER("Employee No.", '<>%1', "Employee No.");
        IF NOT PlantInvent.ISEMPTY THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE SetCompany@1100525000(ICompany@1100485000 : Text[30]);
    BEGIN
      IF (ICompany = '') OR (ICompany = COMPANYNAME) THEN
        gCompany := ''
      ELSE BEGIN
        gCompany := ICompany;
        Rec.CHANGECOMPANY(gCompany);
        Rec2.CHANGECOMPANY(gCompany);
        PlantSetup.CHANGECOMPANY(gCompany);
        gCompPlantType.CHANGECOMPANY(gCompany);
        gCompPlantNumber.CHANGECOMPANY(gCompany);
        gCompPlantLoc.CHANGECOMPANY(gCompany);
      END;
    END;

    PROCEDURE ReadDataOtherCompany@1100525002();
    BEGIN
      IF (gCompany = '') THEN
        EXIT;

      IF NOT gCompPlantType.GET("Plant Type") THEN
        gCompPlantType.INIT;
      IF NOT gCompPlantNumber.GET("Plant Type", "Plant No.") THEN
        gCompPlantNumber.INIT;
      IF NOT gCompPlantLoc.GET(Location) THEN
        gCompPlantLoc.INIT;
    END;

    PROCEDURE SetMultiSelection@1100485011();
    BEGIN
      //* Called from Plant Order and Plant Request: Function 'Insert Plant Present (Selection)'
      gSetMultiSelection := TRUE;
    END;

    PROCEDURE GetMarkedRecords@1100485015(VAR TmpPlantInvent@1100485000 : TEMPORARY Record 11012555) : Boolean;
    VAR
      MarkedPlantInvent@1100525000 : Record 11012555;
    BEGIN
      //* NOTE: In the calling process 'TmpPlantInventRec' must be 'Temporary' (and empty before calling)!
      IF (gCompany <> '') THEN
        MarkedPlantInvent.CHANGECOMPANY(gCompany);
      CurrPage.SETSELECTIONFILTER(MarkedPlantInvent);

      IF MarkedPlantInvent.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          IF NOT MarkedPlantInvent.Sold THEN
            MarkedPlantInvent.Quantity := MarkedPlantInvent.CompressedQuantity(Details,FALSE)
          ELSE
            MarkedPlantInvent.Quantity := MarkedPlantInvent.SoldQuantity(Details);
          TmpPlantInvent := MarkedPlantInvent;
          TmpPlantInvent.INSERT;
        UNTIL MarkedPlantInvent.NEXT = 0;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

