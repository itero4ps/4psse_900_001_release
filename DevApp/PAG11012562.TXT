OBJECT Page 11012562 Plant Order Subform
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Lines;
    SourceTable=Table11012557;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    PageType=ListPart;
    AutoSplitKey=Yes;
    OnInit=BEGIN
             PageFieldsEditable := TRUE;
             PlantTypeEditable := TRUE;
             PlantNoEditable := TRUE;
             Description2Editable := TRUE;
             ToLocationEditable := TRUE;
             AskedQuantityEditable := TRUE;
             QtyToReceiveEditable := TRUE;
             RentalShiftDatesEditable := TRUE;
             PurchaseFieldsEditable := TRUE;
             SalesRateEditable := TRUE;
             BuyBackRateEditable := TRUE;
             PlantFieldsEditable := TRUE;
             ItemFieldsEditable := TRUE;
             ItemAmountEditable := TRUE;
             ItemNewLocationCodeEditable := TRUE;

             AskedQuantityVisible := TRUE;
             QtyToReceiveVisible := TRUE;
             QuantityInventoryVisible := TRUE;
             QuantityDamagedVisible := TRUE;
             QuantityExitVisible := TRUE;
             ReasonCodeExitVisible := TRUE;
             FromRateCodeVisible := TRUE;
             ToRateCodeVisible := TRUE;
             ItemFieldsVisible := TRUE;
             ItemNewLocationCodeVisible := TRUE;
             ItemInventoryVisible := TRUE;

             CommentCPOrderEnable := TRUE;
             OrderPickingStatusEnable := TRUE;
           END;

    OnOpenPage=VAR
                 LicensePlantExtendedCU@1100529000 : Codeunit 11012579;
               BEGIN
                 UserSetup.GET(USERID);  //*DP00183
                 PlantSetup.GET;
                 SalesRateEditable := PlantSetup."Change Sales Rate";
                 BuyBackRateEditable := PlantSetup."Change Buy Back Rate";
                 FromRateCodeVisible := PlantSetup."Rate Codes";
                 ToRateCodeVisible := PlantSetup."Rate Codes";
                 OrderPickingStatusEnable := PlantSetup."PO-Picking Bar Code Scanner";
                 CommentCPOrderEnable := PlantSetup."Comment CP Order";

                 IF "Plant Order No." <> '' THEN BEGIN
                   PlantOrderRec.GET("Plant Order No.");
                   IF PlantOrderRec.Posted THEN
                     CurrPage.EDITABLE(FALSE);
                 END;

                 ItemLicense := LicensePlantExtendedCU.LicenseTablePlantItem(FALSE,0);
               END;

    OnAfterGetRecord=BEGIN
                       SetDateFilter;
                       CALCFIELDS(Bulk,"Stock Plant No. on From Loc.","Stock Plant Type on From Loc.","Stock Rate Code on From Loc.");
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  UpdateAfterAddLinkedPlant := FALSE;  //*01-07-2010  Sometimes problem if only items inserted
                  InitRecord;
                  Type := xRec.Type;
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=VAR
                     PlantOrderLine@1100529001 : Record 11012557;
                   BEGIN
                     //*DP00183.sn
                     IF (UserSetup."Plant Category Filter (Rem.PO)" <> '') THEN BEGIN
                       CALCFIELDS("Plant Order Type");
                       IF ("Plant Order Type" = "Plant Order Type"::Removal) THEN BEGIN
                         IF PlantOrderLine.GET("Plant Order No.", "Line No.") THEN BEGIN
                           PlantOrderLine.SETRANGE("Plant Order No.", "Plant Order No.");
                           PlantOrderLine.FINDLAST;
                           "Line No." := PlantOrderLine."Line No." + 10000;
                         END;
                       END;
                     END;
                     //*DP00183.sn
                     //AddStandardItemOnInsertRecord();  //*16163.o
                     //AddStandardItemOnInsertRecord('I');  //*16163.n  I=Insert  //*01-07-2010.o
                     AddLinkedPlantTypeStndItemMgt.InsertOnPlantOrder(Rec, 0);  //*01-07-2010  0=Insert
                   END;

    OnModifyRecord=BEGIN
                     //AddStandardItemOnInsertRecord('M');  //*16163.n  M=Modify  //*01-07-2010.o
                     IF AddLinkedPlantTypeStndItemMgt.InsertOnPlantOrder(Rec, 1) THEN  //*01-07-2010  1=Modify
                       UpdateAfterAddLinkedPlant := TRUE;  //* Sometimes the form is not updated after Modify, therefore this is done
                                                           //* in 'OnAfterGetCurrRecord'. Because 'CurrPage.UPDATE' not allowed in OnModify!.
                   END;

    OnDeleteRecord=BEGIN
                     IF PlantOrderRec.GET("Plant Order No.") THEN BEGIN
                       PlantOrderRec.TESTFIELD(Posted, FALSE);
                       //* Ondanks dat subform op niet editable is gezet was verwijderen toch mogelijk
                       IF PlantOrderRec.Status >= PlantOrderRec.Status::Released THEN
                         PlantOrderRec.FIELDERROR(Status);
                     END;
                     ModifyAllowedOnOrderPickStatus(0);  //DP00688
                     CheckUpdatePlantNeed('DELETE');
                   END;

    ActionList=ACTIONS
    {
      { 1100409002;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100529003;1 ;ActionGroup;
                      CaptionML=ENU=&Line }
      { 1100529004;2 ;Action    ;
                      CaptionML=ENU=Comments;
                      Image=ViewComments;
                      OnAction=BEGIN
                                 CommentSheet(TRUE);  //*DP00183
                               END;
                                }
      { 1100529002;2 ;Action    ;
                      CaptionML=ENU=Documents;
                      Image=Documents;
                      OnAction=BEGIN
                                 ShowDocuments();  //*DP00183
                               END;
                                }
      { 1100409001;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1100529007;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Partly Transfer to New Order;
                      Enabled=PartlyTransferOrderEnabled;
                      Image=ChangeBatch;
                      OnAction=VAR
                                 POLine@1100529000 : Record 11012557;
                                 ExtentedPlantOrdeFuncCU@1100529001 : Codeunit 11020503;
                                 NewOrderNo@1100529002 : Code[20];
                               BEGIN
                                 //*DP00183
                                 PlantSetup.TESTFIELD("Extended Picking Procedure", TRUE);
                                 CurrPage.SETSELECTIONFILTER(POLine);

                                 PlantOrderRec.GET("Plant Order No.");
                                 NewOrderNo := ExtentedPlantOrdeFuncCU.RunPartlyMoveToNewOrder(PlantOrderRec, POLine);
                                 IF NewOrderNo <> '' THEN BEGIN
                                   COMMIT;
                                   CurrPage.UPDATE(FALSE);  //Update orderlines ('delete' copied lines)
                                   IF PlantOrderRec.GET(NewOrderNo) THEN
                                     PAGE.RUN(PAGE::"Plant Order", PlantOrderRec);  //Open new card with new order
                                 END;
                               END;
                                }
      { 1100409000;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Returned &Loss Order;
                      Image=CreateCreditMemo;
                      OnAction=VAR
                                 PlantOrder@1100409000 : Record 11012556;
                               BEGIN
                                 PlantOrder.GET("Plant Order No.");
                                 PlantOrder.TESTFIELD("No.");
                                 PlantOrder.TESTFIELD(Posted, FALSE);
                                 PlantOrder.TESTFIELD(Type, PlantOrder.Type::Removal);

                                 CreateReturnedLossOrder(PlantOrder);
                               END;
                                }
      { 1100528800;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Service Order;
                      Image=MakeOrder;
                      OnAction=VAR
                                 CreateSOfromPlantOrderLPAGE@1100528800 : Page 11229373;
                                 PlantOrderLineServiceOrder@1100528801 : Record 11072211;
                                 PlantOrderLine@1100528802 : Record 11012557;
                               BEGIN
                                 TESTFIELD(Type, Type::Plant);
                                 PlantOrderLineServiceOrder.SETRANGE("Plant Order", "Plant Order No.");
                                 PlantOrderLineServiceOrder.SETRANGE("Plant Order Line No.", "Line No.");
                                 IF PlantOrderLineServiceOrder.ISEMPTY THEN BEGIN
                                   PlantOrderLineServiceOrder.INIT;
                                   PlantOrderLineServiceOrder."Plant Order" := "Plant Order No.";
                                   PlantOrderLineServiceOrder."Plant Order Line No." := "Line No.";
                                   PlantOrderLineServiceOrder."Line No." := 10000;
                                   PlantOrderLineServiceOrder."New Service Order" := TRUE;
                                   PlantOrderLineServiceOrder.INSERT;
                                   //PlantOrderLineServiceOrder.validate("New Service Order", TRUE);
                                   //PlantOrderLineServiceOrder.modify;
                                   COMMIT;
                                 END;

                                 PlantOrderLine.SETRANGE("Plant Order No.", "Plant Order No.");
                                 PlantOrderLine.SETRANGE("Line No.", "Line No.");
                                 CreateSOfromPlantOrderLPAGE.SETTABLEVIEW(PlantOrderLine);
                                 CreateSOfromPlantOrderLPAGE.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="From Location";
                Visible=FALSE;
                Enabled=PageFieldsEditable }

    { 4   ;2   ;Field     ;
                SourceExpr=Type;
                Editable=PageFieldsEditable;
                OnValidate=BEGIN
                             ModifyAllowedOnOrderPickStatus(FIELDNO(Type));  //DP00688
                             UpdateEditable;
                           END;
                            }

    { 1100485000;2;Field  ;
                SourceExpr="Set Code";
                Visible=FALSE;
                Editable=PlantFieldsEditable;
                OnValidate=BEGIN
                             UpdateEditable;
                           END;
                            }

    { 6   ;2   ;Field     ;
                AssistEdit=Yes;
                SourceExpr="Plant Type";
                Editable=PlantTypeEditable;
                OnValidate=BEGIN
                             ModifyAllowedOnOrderPickStatus(FIELDNO("Plant Type"));  //DP00688
                             UpdateEditable;
                           END;

                OnLookup=BEGIN
                           //LookupPlantType();  //*C-028869.o
                           LookupPlantType(Text);  //*C-028869.n
                         END;

                OnAssistEdit=BEGIN
                               LookupPlantInventory(1);
                             END;
                              }

    { 8   ;2   ;Field     ;
                SourceExpr="Rental Type";
                Visible=FALSE;
                Editable=PlantFieldsEditable }

    { 10  ;2   ;Field     ;
                SourceExpr="No.";
                Editable=PlantNoEditable;
                OnValidate=BEGIN
                             ModifyAllowedOnOrderPickStatus(FIELDNO("No."));  //DP00688
                           END;

                OnLookup=VAR
                           StandTextRec@11012003 : Record 7;
                         BEGIN
                           CASE Type OF
                             Type::Plant:
                               LookupPlantInventory(2);
                             Type::Text:
                               BEGIN
                                 StandTextRec.Code := "No.";
                                 IF PAGE.RUNMODAL(PAGE::"Standard Text Codes",StandTextRec) = ACTION::LookupOK THEN BEGIN
                                   Text := StandTextRec.Code;
                                   EXIT(TRUE);
                                 END;
                               END;
                           END;
                         END;
                          }

    { 1100529010;2;Field  ;
                SourceExpr="Item No.";
                Visible=ItemFieldsVisible;
                Editable=ItemFieldsEditable;
                OnValidate=BEGIN
                             ModifyAllowedOnOrderPickStatus(FIELDNO("Item No."));  //DP00688
                           END;

                OnLookup=BEGIN
                           Text := LookupItemNo(xRec."Item No.");
                           IF Text <> "Item No." THEN
                             EXIT(TRUE)  //* Selected by LookupOK
                           ELSE
                             CurrPage.UPDATE(TRUE); //* May be MultiCopy is done, then form must be refreshed
                         END;
                          }

    { 1100529009;2;Field  ;
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable=ItemFieldsEditable;
                OnValidate=BEGIN
                             ModifyAllowedOnOrderPickStatus(FIELDNO("Variant Code"));  //DP00688
                           END;
                            }

    { 12  ;2   ;Field     ;
                SourceExpr=Description;
                Editable=PageFieldsEditable }

    { 1100525002;2;Field  ;
                SourceExpr="Description 2";
                Visible=FALSE;
                Editable=Description2Editable }

    { 1100529011;2;Field  ;
                CaptionML=ENU=S/BB Plant/Item;
                SourceExpr=GetSalesBuyBack();
                Visible=FALSE }

    { 1100485030;2;Field  ;
                SourceExpr="Inspection No.";
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                SourceExpr=Bulk;
                Visible=FALSE }

    { 1100529008;2;Field  ;
                SourceExpr="Plant Category";
                Visible=FALSE }

    { 1100485004;2;Field  ;
                CaptionML=ENU=External;
                SourceExpr=GetExternal();
                OnLookup=VAR
                           Vend@1100409000 : Record 23;
                         BEGIN
                           Vend."No." := VendorNoExternalPlant();
                           PAGE.RUNMODAL(0, Vend);
                         END;
                          }

    { 1100409004;2;Field  ;
                CaptionML=ENU=Vendor No. External Plant;
                SourceExpr=VendorNoExternalPlant();
                TableRelation=Vendor;
                Visible=FALSE }

    { 1100409005;2;Field  ;
                CaptionML=ENU=Vendor External Plant;
                SourceExpr=VendorNameExternalPlant();
                TableRelation=Vendor;
                Visible=FALSE;
                OnLookup=VAR
                           Vend@1100409000 : Record 23;
                         BEGIN
                           Vend."No." := VendorNoExternalPlant();
                           PAGE.RUNMODAL(0, Vend);
                         END;
                          }

    { 1100485006;2;Field  ;
                SourceExpr="From Rate Code";
                Visible=FromRateCodeVisible;
                Editable=PlantFieldsEditable;
                OnLookup=BEGIN
                           LookupPlantInventory(3);
                         END;
                          }

    { 1100485002;2;Field  ;
                SourceExpr="To Location";
                Visible=FALSE;
                Editable=ToLocationEditable }

    { 1100485008;2;Field  ;
                SourceExpr="To Rate Code";
                Visible=ToRateCodeVisible;
                Editable=PlantFieldsEditable }

    { 1100485032;2;Field  ;
                SourceExpr="To Employee Company";
                Visible=FALSE;
                Editable=PageFieldsEditable }

    { 1100485034;2;Field  ;
                SourceExpr="To Employee No.";
                Visible=FALSE;
                Editable=PageFieldsEditable;
                OnLookup=BEGIN
                           LookupToEmployee(CurrPage.EDITABLE);
                         END;
                          }

    { 1210190016;2;Field  ;
                CaptionML=ENU=Employee Name;
                SourceExpr=GetEmployeeName;
                Visible=FALSE;
                Editable=FALSE }

    { 1100529014;2;Field  ;
                SourceExpr="Location Code";
                Visible=ItemFieldsVisible;
                Editable=ItemFieldsEditable }

    { 1100529013;2;Field  ;
                Name=Inventory-Item;
                CaptionML=ENU=Item Inventory;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=Rec.GetItemInventory(FALSE);
                Visible=ItemInventoryVisible }

    { 1100529012;2;Field  ;
                Name=Inventory-Location;
                CaptionML=ENU=Item Inventory Location;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=Rec.GetItemInventory(TRUE);
                Visible=ItemInventoryVisible }

    { 1100529015;2;Field  ;
                SourceExpr="New Location Code";
                Visible=ItemNewLocationCodeVisible;
                Editable=ItemNewLocationCodeEditable }

    { 1100525000;2;Field  ;
                SourceExpr=Element;
                Visible=FALSE;
                Editable=PageFieldsEditable }

    { 20  ;2   ;Field     ;
                SourceExpr="Expected return on";
                Visible=FALSE;
                Editable=PlantFieldsEditable }

    { 1100485012;2;Field  ;
                SourceExpr="Asked Quantity";
                Visible=AskedQuantityVisible;
                Editable=AskedQuantityEditable;
                OnValidate=BEGIN
                             ModifyAllowedOnOrderPickStatus(FIELDNO("Asked Quantity"));  //DP00688
                           END;
                            }

    { 1100525006;2;Field  ;
                SourceExpr="Qty. to Receive";
                Visible=QtyToReceiveVisible;
                Editable=QtyToReceiveEditable }

    { 16  ;2   ;Field     ;
                SourceExpr=Quantity;
                Editable=PageFieldsEditable;
                OnValidate=BEGIN
                             ModifyAllowedOnOrderPickStatus(FIELDNO(Quantity));  //DP00688
                             CheckUpdatePlantNeed('MODIFY');
                             QuantityOnAfterValidate;
                           END;
                            }

    { 1210190010;2;Field  ;
                SourceExpr="Quantity Inventory";
                Visible=QuantityInventoryVisible;
                Editable=PlantFieldsEditable }

    { 1210190012;2;Field  ;
                SourceExpr="Quantity Damaged";
                Visible=QuantityDamagedVisible;
                Editable=PlantFieldsEditable }

    { 1210190014;2;Field  ;
                SourceExpr="Quantity Exit";
                Visible=QuantityExitVisible;
                Editable=PlantFieldsEditable }

    { 1100485026;2;Field  ;
                SourceExpr="Reason Code (Exit)";
                Visible=ReasonCodeExitVisible;
                Editable=PageFieldsEditable;
                OnValidate=BEGIN
                             UpdateEditable;
                           END;
                            }

    { 1100485022;2;Field  ;
                SourceExpr="Quantity Exit (Sold)";
                Visible=FALSE;
                Editable=PlantFieldsEditable }

    { 1100409003;2;Field  ;
                SourceExpr="Exit Order No.";
                Visible=QuantityExitVisible }

    { 18  ;2   ;Field     ;
                SourceExpr="Unit of Measure";
                Editable=ItemFieldsEditable;
                OnValidate=BEGIN
                             ModifyAllowedOnOrderPickStatus(FIELDNO("Unit of Measure"));  //DP00688
                           END;
                            }

    { 1100525004;2;Field  ;
                CaptionML=ENU=Rental Rate;
                BlankZero=Yes;
                SourceExpr=GetRentalRate();
                AutoFormatType=2;
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr="Buy Back Rate";
                Visible=FALSE;
                Editable=BuyBackRateEditable }

    { 24  ;2   ;Field     ;
                SourceExpr="Sales Rate";
                Visible=FALSE;
                Editable=SalesRateEditable }

    { 1100529016;2;Field  ;
                SourceExpr="Item Amount";
                Visible=ItemFieldsVisible;
                Editable=ItemAmountEditable }

    { 26  ;2   ;Field     ;
                SourceExpr="Stock Plant No. on From Loc.";
                Visible=FALSE }

    { 1100485010;2;Field  ;
                SourceExpr="Stock Rate Code on From Loc.";
                Visible=FALSE }

    { 28  ;2   ;Field     ;
                SourceExpr="Stock Plant Type on From Loc.";
                Visible=FALSE }

    { 1100525003;2;Field  ;
                CaptionML=ENU=Available Plant Type on Depot;
                BlankZero=Yes;
                SourceExpr=CalcPlantTypeAvailable();
                Visible=FALSE }

    { 1210190004;2;Field  ;
                SourceExpr="Rental Shift";
                Visible=FALSE;
                Editable=PlantFieldsEditable;
                OnValidate=BEGIN
                             UpdateEditable;
                           END;
                            }

    { 1210190006;2;Field  ;
                SourceExpr="Rental Startdate (To Location)";
                Visible=FALSE;
                Editable=RentalShiftDatesEditable }

    { 1210190008;2;Field  ;
                SourceExpr="Rental Enddate (From Location)";
                Visible=FALSE;
                Editable=RentalShiftDatesEditable }

    { 1100485014;2;Field  ;
                SourceExpr="Purch. Order Type";
                Visible=FALSE;
                Editable=PurchaseFieldsEditable }

    { 1100485016;2;Field  ;
                SourceExpr="Vendor No.";
                Visible=FALSE;
                Editable=PurchaseFieldsEditable;
                OnAssistEdit=BEGIN
                               IF PurchaseFieldsEditable THEN
                                 AssistEditVendorNo;
                             END;
                              }

    { 1100525001;2;Field  ;
                SourceExpr="Order Address Code";
                Visible=FALSE;
                Enabled=PurchaseFieldsEditable }

    { 1100485018;2;Field  ;
                SourceExpr="Direct Delivery";
                Visible=FALSE;
                Editable=PurchaseFieldsEditable }

    { 1210190000;2;Field  ;
                SourceExpr="Location Copied Need";
                Visible=FALSE }

    { 1210190002;2;Field  ;
                SourceExpr="Line No. Copied Need";
                Visible=FALSE }

    { 1100529005;2;Field  ;
                CaptionML=ENU=Meter Reading;
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=ActualMeterReading();
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              //DP00614
                              DrillDownMeterReading();
                              IF NOT Posted THEN
                                CheckInspection();
                            END;
                             }

    { 1100529006;2;Field  ;
                CaptionML=ENU=Unit Meter Reading;
                SourceExpr=ActualMeterReadingUnit();
                Visible=FALSE;
                Editable=FALSE }

    { 1100485024;2;Field  ;
                SourceExpr="Order Picking Status";
                Visible=OrderPickingStatusEnable;
                Enabled=OrderPickingStatusEnable;
                Editable=FALSE }

    { 1100485020;2;Field  ;
                SourceExpr="Comment CP Order";
                Visible=CommentCPOrderEnable;
                Enabled=CommentCPOrderEnable;
                Editable=PageFieldsEditable }

    { 1100529001;2;Field  ;
                CaptionML=ENU=Comments;
                SourceExpr=HasCommentLines();
                Visible=FALSE;
                OnDrillDown=BEGIN
                              CommentSheet(TRUE);  //*DP00183
                            END;
                             }

    { 1100529000;2;Field  ;
                CaptionML=ENU=Documents;
                SourceExpr=HasDocumentLinks();
                Visible=FALSE;
                OnDrillDown=BEGIN
                              ShowDocuments();  //*DP00183
                            END;
                             }

  }
  CODE
  {
    VAR
      PlantSetup@11012000 : Record 11012550;
      Text001@1210190000 : TextConst 'ENU=Update quantity to copy of Plant Type ''%1'' in the Plant Need?';
      UserSetup@1100529000 : Record 91;
      PlantOrderRec@1210190002 : Record 11012556;
      PlanningFutureDeficit@1210190001 : Codeunit 11012576;
      PlantOrderCostMgtCU@1100485001 : Codeunit 11012581;
      SearchRate@1100525000 : Codeunit 11012567;
      AddLinkedPlantTypeStndItemMgt@1100525001 : Codeunit 11012583;
      UpdateAfterAddLinkedPlant@1100525002 : Boolean;
      PlantListLastPlantType@1210190003 : Code[20];
      SaveRemoval@1100529002 : Boolean;
      ItemLicense@1100529006 : Boolean;
      PageFieldsEditable@1100529007 : Boolean INDATASET;
      QuantityInventoryVisible@19008232 : Boolean INDATASET;
      QuantityDamagedVisible@19012066 : Boolean INDATASET;
      QuantityExitVisible@19046635 : Boolean INDATASET;
      ReasonCodeExitVisible@19052298 : Boolean INDATASET;
      AskedQuantityVisible@19070419 : Boolean INDATASET;
      QtyToReceiveVisible@19050888 : Boolean INDATASET;
      AskedQuantityEditable@19044480 : Boolean INDATASET;
      PurchaseFieldsEditable@19012738 : Boolean INDATASET;
      QtyToReceiveEditable@19025168 : Boolean INDATASET;
      FromRateCodeVisible@19023073 : Boolean INDATASET;
      ToRateCodeVisible@19064766 : Boolean INDATASET;
      SalesRateEditable@19004097 : Boolean INDATASET;
      BuyBackRateEditable@19005937 : Boolean INDATASET;
      OrderPickingStatusEnable@19019190 : Boolean INDATASET;
      CommentCPOrderEnable@19076467 : Boolean INDATASET;
      PlantTypeEditable@1100409000 : Boolean INDATASET;
      PlantNoEditable@1100529010 : Boolean INDATASET;
      Description2Editable@1100525003 : Boolean INDATASET;
      ToLocationEditable@1100409002 : Boolean INDATASET;
      RentalShiftDatesEditable@1100409003 : Boolean INDATASET;
      PlantFieldsEditable@1100529009 : Boolean INDATASET;
      ItemFieldsVisible@1100529001 : Boolean INDATASET;
      ItemFieldsEditable@1100529004 : Boolean INDATASET;
      ItemAmountEditable@1100529011 : Boolean INDATASET;
      ItemNewLocationCodeVisible@1100529003 : Boolean INDATASET;
      ItemNewLocationCodeEditable@1100529005 : Boolean INDATASET;
      ItemInventoryVisible@1100529008 : Boolean INDATASET;
      PartlyTransferOrderEnabled@1100525004 : Boolean INDATASET;

    PROCEDURE CheckUpdatePlantNeed@1210190000(lvIUpdateMode@1210190000 : Text[6]);
    VAR
      lvPlantNeedRec@1210190001 : Record 11012579;
      lvQuantity@1210190002 : Decimal;
    BEGIN
      IF ("Location Copied Need" <> '') AND ("Line No. Copied Need" > 0) AND
         (lvPlantNeedRec.GET("Location Copied Need", "Line No. Copied Need")) AND
         ((lvIUpdateMode = 'DELETE') OR (lvIUpdateMode = 'MODIFY')) THEN BEGIN

        IF PlantOrderRec.GET("Plant Order No.") THEN BEGIN
          PlantOrderRec.CALCFIELDS("Plant Request No.");
          IF PlantOrderRec."Plant Request No." <> '' THEN
            EXIT;
        END;

        lvPlantNeedRec.CALCFIELDS("Copied Quantity");

        IF (lvIUpdateMode = 'DELETE') THEN BEGIN
          lvQuantity := Quantity;
          IF (Quantity <= 0) THEN
            EXIT;
        END;

        IF (lvIUpdateMode = 'MODIFY') THEN BEGIN
          lvQuantity := xRec.Quantity - Quantity;
          IF (Quantity = xRec.Quantity) THEN
            EXIT;
        END;

        IF (lvQuantity < 0) AND (lvPlantNeedRec."Quantity To Copy" <= 0) THEN
          EXIT;

        IF NOT CONFIRM(Text001, TRUE, "Plant Type") THEN
          EXIT;

        IF (lvQuantity > 0) AND lvPlantNeedRec.Finished THEN BEGIN
          lvPlantNeedRec.Finished := FALSE;
          lvPlantNeedRec."Delete Remainder" := TRUE;
          lvPlantNeedRec."Quantity To Copy" := 0;
        END;
        lvPlantNeedRec."Quantity To Copy" := lvPlantNeedRec."Quantity To Copy" + lvQuantity;
        IF lvPlantNeedRec."Quantity To Copy" <= 0 THEN BEGIN
          lvPlantNeedRec.Finished := TRUE;
          lvPlantNeedRec."Quantity To Copy" := 0;
        END;
        IF lvPlantNeedRec."Delete Remainder" AND
          (lvPlantNeedRec.Finished OR
           ((lvPlantNeedRec."Quantity To Copy" + lvPlantNeedRec."Copied Quantity" - lvQuantity) <= 0) OR
           ((lvPlantNeedRec."Quantity To Copy" + lvPlantNeedRec."Copied Quantity" - lvQuantity) >= lvPlantNeedRec.Quantity)) THEN
          lvPlantNeedRec."Delete Remainder" := FALSE;

        lvPlantNeedRec.MODIFY;
      END;
    END;

    PROCEDURE GetExternal@1100485001() : Boolean;
    VAR
      lvPlantTypeRec@1100485000 : Record 11012551;
      lvPlantNoRec@1100485001 : Record 11012552;
    BEGIN
      IF (Type <> Type::Plant) OR ("Plant Type" = '') THEN
        EXIT(FALSE);

      IF ("No." <= '0') THEN BEGIN
        IF lvPlantTypeRec.GET("Plant Type") THEN
          EXIT(lvPlantTypeRec.External);
      END ELSE BEGIN
        IF lvPlantNoRec.GET("Plant Type", "No.") THEN
          EXIT(lvPlantNoRec.External);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE LookupPlantType@1100525001(PlantType@1210190000 : Code[20]);
    VAR
      PlantTypeRec@1100525000 : Record 11012551;
      TmpPlantTypeRec@1100525002 : TEMPORARY Record 11012551;
      MultiCopyMgt@1100525003 : Codeunit 11012068;
      PlantTypeList@1100525001 : Page 11012552;
      FormLookupOK@1210190001 : Boolean;
    BEGIN
      IF Type <> Type::Plant THEN
        EXIT;
      PlantOrderRec.GET("Plant Order No.");
      PlantTypeRec.Code := "Plant Type";  //*C-028869.o
      //*C-028869.sn
      IF PlantType = '' THEN
        PlantTypeRec.Code := PlantListLastPlantType
      ELSE
        PlantTypeRec.Code := PlantType;
      //*C-028869.en
      PlantTypeList.SETRECORD(PlantTypeRec);
      IF (PlantOrderRec.Status < PlantOrderRec.Status::Released) AND (NOT Posted) THEN BEGIN
        PlantTypeList.LOOKUPMODE(TRUE);
        PlantTypeList.SetMultiCopyAllowed(TRUE);
      END;
      //IF PlantTypeList.RUNMODAL = ACTION::LookupOK THEN BEGIN  //*C-028869.o
      //  PlantTypeList.GETRECORD(PlantTypeRec);                 //*C-028869.o
      //*C-028869.sn
      FormLookupOK := (PlantTypeList.RUNMODAL = ACTION::LookupOK);
      PlantTypeList.GETRECORD(PlantTypeRec);
      PlantListLastPlantType := PlantTypeRec.Code;
      IF FormLookupOK THEN BEGIN
      //*C-028869.en
        VALIDATE("Plant Type", PlantTypeRec.Code);
      END ELSE BEGIN
        IF PlantTypeList.GetMultiCopyRec(TmpPlantTypeRec) THEN BEGIN
          MultiCopyMgt.CopyPlantTypeToPlantOrderLine(TmpPlantTypeRec, PlantOrderRec, "Line No.");
          CurrPage.UPDATE(TRUE);
        END;
      END;
    END;

    PROCEDURE LookupPlantInventory@1100485000(ILevel@1100485003 : Integer);
    VAR
      lvInventoryRec@1100485001 : Record 11012555;
      lvInventoryPage@1100485000 : Page 11012559;
      lvDetails@1100485002 : 'InventEntry,PlantType,PlantNo,RateCode';
    BEGIN
      //* Level: 1-Plant Type, 2-Plant No., 3-Rate Code
      IF Type <> Type::Plant THEN
        EXIT;
      lvInventoryRec.SETRANGE(Removed,FALSE);
      lvInventoryRec.SETRANGE(Location,"From Location");
      IF (ILevel = 2) OR (ILevel = 3) THEN
        lvInventoryRec.SETRANGE("Plant Type", "Plant Type");
      IF (ILevel = 3) AND ("No." <>'')THEN
        lvInventoryRec.SETRANGE("Plant No.", "No.");
      lvInventoryRec.Removed := FALSE;
      lvInventoryRec.Location := "From Location";
      lvInventoryRec."Plant Type" := "Plant Type";
      lvInventoryRec."Plant No." := "No.";
      IF NOT PlantSetup."Rate Codes" THEN
        lvInventoryPage.SetDetailSelection(lvDetails::PlantNo)
      ELSE BEGIN
        lvInventoryRec."Rate Code" := "From Rate Code";
        lvInventoryPage.SetDetailSelection(lvDetails::RateCode);
      END;
      IF "Transfer Date" <> 0D THEN
        lvInventoryRec.SETFILTER("Present from", '..%1', "Transfer Date");
      lvInventoryPage.SETTABLEVIEW(lvInventoryRec);
      lvInventoryPage.SETRECORD(lvInventoryRec);
      PlantOrderRec.GET("Plant Order No.");
      IF PlantOrderRec.Status < PlantOrderRec.Status::Released THEN
        lvInventoryPage.LOOKUPMODE := TRUE;
      IF lvInventoryPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
        lvInventoryPage.GETRECORD(lvInventoryRec);
        lvInventoryPage.GetDetailSelection(lvDetails);
        IF (ILevel = 1) THEN
          VALIDATE("Plant Type",lvInventoryRec."Plant Type");
        IF ((ILevel = 1) OR (ILevel = 2)) AND (lvDetails <> lvDetails::PlantType) THEN
          VALIDATE("No.",lvInventoryRec."Plant No.");
        IF ((ILevel = 1) OR (ILevel = 2) OR (ILevel = 3)) AND (lvDetails = lvDetails::RateCode) THEN
          VALIDATE("From Rate Code",lvInventoryRec."Rate Code");
      END;
    END;

    PROCEDURE GetRentalRate@1100525000() : Decimal;
    VAR
      PlantLocRec@1100525001 : Record 11012554;
      PlantRateCode@1210190001 : Record 11020502;
      Loc@1100525000 : Code[20];
      RateCode@1210190000 : Code[10];
    BEGIN
      IF ("Plant Type" = '') OR ("Rental Type" <> "Rental Type"::Rental) OR (Type <> Type::Plant) THEN
        EXIT(0);
      IF NOT PlantOrderRec.GET("Plant Order No.") THEN
        EXIT(0);

      RateCode := "To Rate Code";  //*C000398.n
      CASE PlantOrderRec.Type OF
        PlantOrderRec.Type::Arrival:
          Loc := PlantOrderRec."To Location";
        PlantOrderRec.Type::Removal:
          BEGIN
            Loc := PlantOrderRec."From Location";
            RateCode := "From Rate Code";  //*C000398.n
          END;
        PlantOrderRec.Type::"Other Transfers":
          BEGIN
            IF PlantLocRec.GET(PlantOrderRec."To Location") THEN BEGIN
              IF NOT PlantLocRec.Depot THEN
                Loc := PlantOrderRec."To Location";
            END;
            IF Loc = '' THEN BEGIN
              IF PlantLocRec.GET(PlantOrderRec."From Location") THEN BEGIN
                IF NOT PlantLocRec.Depot THEN BEGIN
                  Loc := PlantOrderRec."From Location";
                  RateCode := "From Rate Code";  //*C000398.n
                END;
              END;
            END;
            IF Loc = '' THEN
              EXIT(0);
          END;
        ELSE
          EXIT(0);
      END;

      //*C000398.sn
      IF RateCode <> '' THEN BEGIN
        IF NOT PlantRateCode.CheckPlantRateCode(Loc, RateCode, FALSE, '') THEN
          EXIT(0);
      END;
      //*C000398.en

      //EXIT(SearchRate.Rate(Loc,"Plant Type","No.","To Rate Code",PlantOrderRec."Transfer Date",0,0,'')); //*C000398.o
      EXIT(SearchRate.Rate(Loc,"Plant Type","No.",RateCode,PlantOrderRec."Transfer Date",0,0,''));  //*C000398.n
    END;

    PROCEDURE CreateReturnedLossOrder@1100525002(PlantOrder@1100525000 : Record 11012556);
    VAR
      PlantOrderLine@1100525002 : Record 11012557;
      CreatePlantReturnedOrder@1100525001 : Codeunit 11012558;
    BEGIN
      PlantOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(PlantOrderLine);
      CreatePlantReturnedOrder.CreateReturnedLossOrdersFromPO(PlantOrder, PlantOrderLine);
    END;

    LOCAL PROCEDURE QuantityOnAfterValidate@19032465();
    BEGIN
      IF Type = Type::Plant THEN
        PlanningFutureDeficit.FutureDeficitWarning("Plant Order No.", "Line No.", "Plant Type", "Expected return on", Quantity);
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      IF UpdateAfterAddLinkedPlant THEN BEGIN  //*01-07-2010
       UpdateAfterAddLinkedPlant := FALSE;  //* First reset then update form!
       CurrPage.UPDATE(FALSE);
      END;
      IF NOT PlantOrderRec.GET("Plant Order No.") THEN
        PlantOrderRec.INIT;
      PageFieldsEditable := ((NOT PlantOrderRec.Posted) AND (PlantOrderRec.Status < PlantOrderRec.Status::Released));

      QuantityInventoryVisible :=
        (PlantOrderRec."Advanced Removal" AND
        ((PlantOrderRec."To Location Repair" <> '') OR (PlantOrderRec."To Location Exit" <> '')));
      QuantityDamagedVisible := (PlantOrderRec."Advanced Removal" AND (PlantOrderRec."To Location Repair" <> ''));
      QuantityExitVisible := (PlantOrderRec."Advanced Removal" AND (PlantOrderRec."To Location Exit" <> ''));
      ReasonCodeExitVisible := QuantityExitVisible OR ((PlantOrderRec.Type = PlantOrderRec.Type::Removal) AND ItemLicense);

      AskedQuantityVisible := PlantSetup."Extended Picking Procedure" AND (PlantOrderRec.Type = PlantOrderRec.Type::Arrival);
      AskedQuantityEditable := PageFieldsEditable AND AskedQuantityVisible;
      PurchaseFieldsEditable := PageFieldsEditable AND
        PlantSetup."Extended Picking Procedure" AND (PlantOrderRec.Type = PlantOrderRec.Type::Arrival);

      QtyToReceiveVisible := PlantSetup."Removal with Qty. to Receive" AND (PlantOrderRec.Type = PlantOrderRec.Type::Removal);
      QtyToReceiveEditable := PageFieldsEditable AND QtyToReceiveVisible;

      IF NOT ItemLicense THEN BEGIN
        ItemNewLocationCodeVisible := FALSE;
        ItemFieldsVisible := FALSE;
        ItemInventoryVisible := FALSE;
      END ELSE BEGIN
        ItemNewLocationCodeVisible := PlantOrderRec.IsOtherTransferDepotToDepot();  //*DP00183.n
        ItemFieldsVisible := (PlantOrderRec.Type <= PlantOrderRec.Type::Removal) OR ItemNewLocationCodeVisible;
        ItemInventoryVisible := (PlantOrderRec.Type = PlantOrderRec.Type::Arrival) OR ItemNewLocationCodeVisible;  //*DP00183.c
      END;
      PartlyTransferOrderEnabled := (PlantOrderRec.Type IN [PlantOrderRec.Type::Arrival, PlantOrderRec.Type::Removal]);

      UpdateEditable;
    END;

    PROCEDURE UpdateEditable@1100409000();
    BEGIN
      PlantOrderRec.GET("Plant Order No.");
      PageFieldsEditable := ((NOT PlantOrderRec.Posted) AND (PlantOrderRec.Status < PlantOrderRec.Status::Released));
      PlantTypeEditable := PageFieldsEditable AND (Type = Type::Plant) AND (NOT PlantOrderCostMgtCU.POLineLinkedCostWithPurchOrder(Rec));
      PlantNoEditable := PageFieldsEditable AND ((Type = Type::Plant) OR (Type = Type::Text));
      Description2Editable := PageFieldsEditable AND ((Type = Type::Plant) OR (Type = Type::Item)) AND ("Set Code" = '');
      ToLocationEditable := PageFieldsEditable AND
        ((Type = Type::Plant) AND ("Plant Type" <> '') AND (PlantOrderRec.Type = PlantOrderRec.Type::Removal));
      RentalShiftDatesEditable := PageFieldsEditable AND "Rental Shift";

      PlantFieldsEditable := PageFieldsEditable AND (Type = Type::Plant);
      ItemFieldsEditable := PageFieldsEditable AND ItemFieldsVisible AND (Type = Type::Item);
      ItemAmountEditable := ItemFieldsEditable AND ("Reason Code (Exit)" = '');
      ItemNewLocationCodeEditable := PageFieldsEditable AND ItemNewLocationCodeVisible AND (Type = Type::Item);

      SalesRateEditable := PageFieldsEditable AND (((Type = Type::Plant) AND PlantSetup."Change Sales Rate") OR ItemAmountEditable);
      BuyBackRateEditable := PageFieldsEditable AND ((Type = Type::Plant) AND PlantSetup."Change Buy Back Rate");
    END;

    PROCEDURE SetPlantCategoryFilter@1100529000(Removal@1100529000 : Boolean);
    BEGIN
      //*DP00183
      //* Set filter on Plant Category, only for removal orders (reset filter for other order types).
      IF (Removal = SaveRemoval) OR (UserSetup."Plant Category Filter (Rem.PO)" = '') THEN
        EXIT;

      SaveRemoval := Removal;
      FILTERGROUP(9);  // May not be modified/deleted by the user
      IF Removal THEN
        SETFILTER("Plant Category", UserSetup."Plant Category Filter (Rem.PO)")
      ELSE
        SETRANGE("Plant Category");  //* Reset filter
      FILTERGROUP(0);
    END;

    BEGIN
    END.
  }
}

