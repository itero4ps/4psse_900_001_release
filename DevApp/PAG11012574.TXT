OBJECT Page 11012574 Inspections
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Inspections;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table11012564;
    SourceTableView=WHERE(Inspection Result=CONST(" "));
    PageType=Worksheet;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01

                 IF DateFilter = '' THEN
                   DateFilter := STRSUBSTNO('..%1', TODAY);
                 SetFilters();
               END;

    OnFindRecord=BEGIN
                   EXIT(OnFindRec(Which));
                 END;

    OnNextRecord=BEGIN
                   EXIT(OnNextRec(Steps));
                 END;

    OnAfterGetRecord=BEGIN
                       MeterReadingInspection();
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    ActionList=ACTIONS
    {
      { 1100525004;  ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100525006;1 ;ActionGroup;
                      CaptionML=ENU=Inspection }
      { 1100525005;2 ;Action    ;
                      CaptionML=ENU=Card;
                      RunObject=Page 11012572;
                      RunPageOnRec=Yes;
                      RunPageView=SORTING(Plant Type,Plant No.,Line No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Card;
                      PromotedCategory=Process }
      { 1100525001;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1100525002;1 ;Action    ;
                      CaptionML=ENU=&Print;
                      Promoted=Yes;
                      Image=PrintReport;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 PlantInspection@1100529002 : Record 11012564;
                                 PrintDocumentCU@1100529001 : Codeunit 229;
                               BEGIN
                                 //DP00241.so (27495)
                                 //Old was a ActionGroup with two Actions
                                 //REPORT.RUNMODAL(REPORT::"Inspections - Open",TRUE,FALSE,Rec);
                                 //REPORT.RUNMODAL(REPORT::"Inspections by Location - Open",TRUE,FALSE,Rec);
                                 //DP00241.eo
                                 //DP00241.sn (27495)
                                 PlantInspection := Rec;
                                 COPYFILTER("Date Filter", PlantInspection."Date Filter");
                                 PrintDocumentCU.PrintPlantInspection(PlantInspection);
                                 //DP00241.en
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1903121901;1;Group   }

    { 1100529005;2;Field  ;
                CaptionML=ENU=Inspection Based on;
                OptionCaptionML=ENU=Time,Quantity,Both;
                SourceExpr=InspectionBasedOn;
                OnValidate=BEGIN
                             SetFilters();
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 24  ;2   ;Field     ;
                CaptionML=ENU=Date Filter;
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             OnValidateDateFilter();
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1100529006;2;Field  ;
                CaptionML=ENU=Available (Meter) to;
                DecimalPlaces=0:0;
                SourceExpr=AvailableTo;
                OnValidate=BEGIN
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1   ;1   ;Group     ;
                Name=TableBox;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Plant Type";
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Plant No.";
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                DrillDown=No;
                SourceExpr="Plant Description" }

    { 1100529000;2;Field  ;
                DrillDown=No;
                SourceExpr="Inspection No." }

    { 8   ;2   ;Field     ;
                SourceExpr="Inspection Type";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                DrillDown=No;
                SourceExpr=Description }

    { 12  ;2   ;Field     ;
                SourceExpr="Last Inspection Date" }

    { 14  ;2   ;Field     ;
                SourceExpr="Inspect before";
                Editable=FALSE }

    { 1100529004;2;Field  ;
                CaptionML=ENU=Meter Reading;
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=ActMeterReading;
                OnDrillDown=BEGIN
                              DrillDownMeterReading(TRUE);
                              CurrPage.UPDATE;
                            END;
                             }

    { 1100529003;2;Field  ;
                CaptionML=ENU=Unit Meter Reading;
                SourceExpr=ActualMeterReadingUnit() }

    { 1100529001;2;Field  ;
                CaptionML=ENU=Next Inspection at;
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=NextMeterReading }

    { 1100529002;2;Field  ;
                CaptionML=ENU=Available (Meter);
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=AvailableMR }

    { 16  ;2   ;Field     ;
                SourceExpr="Inspection Vendor";
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                SourceExpr="Present Location" }

    { 20  ;2   ;Field     ;
                SourceExpr="Present Location Description";
                Visible=FALSE }

    { 1100485002;2;Field  ;
                DrillDown=No;
                SourceExpr="Employee Company";
                Visible=FALSE }

    { 1100485000;2;Field  ;
                DrillDown=No;
                SourceExpr="Responsible Employee (Current)" }

    { 1100485004;2;Field  ;
                CaptionML=ENU=Employee Name;
                SourceExpr=GetEmployeeName();
                Visible=FALSE }

  }
  CODE
  {
    VAR
      DPA_IsHardFilter@1100000999 : Boolean;
      InspectionBasedOn@1100529003 : 'Time,Quantity,Both';
      ActMeterReading@1100529001 : Decimal;
      NextMeterReading@1100529002 : Decimal;
      AvailableMR@1100529000 : Decimal;
      AvailableTo@1100529004 : Decimal;
      DateFilter@1100525000 : Text[30];

    LOCAL PROCEDURE OnFindRec@1100529001(Which@1100529000 : Text) : Boolean;
    VAR
      Found@1100529002 : Boolean;
      Steps@1100529001 : Integer;
    BEGIN
      Found := FIND(Which);
      IF (NOT Found) OR (InspectionBasedOn = InspectionBasedOn::Time) THEN
        EXIT(Found);

      IF NOT SkipInspection(Rec, InspectionBasedOn, DateFilter, AvailableTo) THEN
        EXIT(TRUE)
      ELSE BEGIN
        IF Which = '+' THEN
          Steps := -1
        ELSE
          Steps := 1;
        //EXIT(OnNextRec(Steps) <> 0);
        Found := (OnNextRec(Steps) <> 0);
        IF (NOT Found) AND (Steps = 1) THEN
          EXIT(OnNextRec(-1) <> 0);
        EXIT(Found);
      END;
    END;

    LOCAL PROCEDURE OnNextRec@1100529002(Steps@1100529000 : Integer) : Integer;
    VAR
      Rec2@1100529005 : Record 11012564;
      EOF@1100529004 : Boolean;
      CurrentSteps@1100529003 : Integer;
      Step@1100529002 : Integer;
      NumberOfSteps@1100529001 : Integer;
    BEGIN
      Rec2.COPY(Rec);

      IF InspectionBasedOn = InspectionBasedOn::Time THEN BEGIN
        //All records, there are filters set on "Inspect before" and "Inspection Based on"
        CurrentSteps := Rec2.NEXT(Steps);
        IF CurrentSteps <> 0 THEN
          Rec := Rec2;
        EXIT(CurrentSteps);
      END;

      // For Quantity and Both
      IF Steps < 0 THEN
        Step := -1
      ELSE
        Step := 1;
      CurrentSteps := 0;
      EOF := Rec2.NEXT(Step) = 0;
      IF NOT EOF THEN
        FOR NumberOfSteps := 1 TO ABS(Steps) DO BEGIN
          WHILE SkipInspection(Rec2, InspectionBasedOn, DateFilter, AvailableTo) AND NOT EOF DO
            EOF := Rec2.NEXT(Step) = 0;
          IF NOT EOF THEN BEGIN
            Rec := Rec2;
            CurrentSteps := CurrentSteps + Step;
          END;
        END;

      EXIT(CurrentSteps);
    END;

    LOCAL PROCEDURE GetEmployeeName@1100485000() : Text[200];
    VAR
      lvEmplRec@1100485000 : Record 5200;
    BEGIN
      IF "Employee Company" <> '' THEN
        lvEmplRec.CHANGECOMPANY("Employee Company");

      IF lvEmplRec.GET("Responsible Employee (Current)") THEN
        EXIT(lvEmplRec."Full Name");

      EXIT('');
    END;

    LOCAL PROCEDURE SetFilters@1210190000();
    BEGIN
      FILTERGROUP(7);
      IF InspectionBasedOn = InspectionBasedOn::Both THEN
        SETRANGE("Inspection Based on")  //Reset filter
      ELSE
        SETFILTER("Inspection Based on", '%1|%2', InspectionBasedOn, InspectionBasedOn::Both);
      IF InspectionBasedOn <> InspectionBasedOn::Time THEN
        SETRANGE("Inspect before")  //Reset filter
      ELSE
        SETFILTER("Inspect before", DateFilter);
      FILTERGROUP(0);
    END;

    LOCAL PROCEDURE OnValidateDateFilter@1210190011();
    VAR
      Inspection@1100525000 : Record 11012564;
      Date@1210190000 : Record 2000000007;
      ApplicationMgt@1100525001 : Codeunit 1;
      DateMinMax@1210190002 : Date;
    BEGIN
      IF ApplicationMgt.MakeDateFilter(DateFilter) = 0 THEN;
      Inspection.SETFILTER("Date Filter", DateFilter);
      DateFilter := Inspection.GETFILTER("Date Filter");

      SetFilters();
    END;

    LOCAL PROCEDURE MeterReadingInspection@1100529000();
    BEGIN
      ActMeterReading := ActualMeterReading();
      NextMeterReading := NextMeterReadingAt();
      AvailableMR := NextMeterReading - ActMeterReading;
    END;

    BEGIN
    {
      //DP00614  Several modifications for inspections based on Meter Reading
    }
    END.
  }
}

