OBJECT Page 11012673 Project Inventory List
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=Project Inventory List;
    SourceTable=Table11012670;
    SourceTableView=SORTING(Project No.,Item Composition,Location Code,Bin Code,Shelf No.,Unit of Measure Code,Element,Assembly Yard Number Object,Posting Date,Entry Type)
                    WHERE(Inventory Quantity=FILTER(<>0));
    PageType=List;
    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
               END;

    OnNextRecord=VAR
                   lvCurrentSteps@1210190003 : Integer;
                   lvStep@1210190002 : Integer;
                   lvNumberOfSteps@1210190001 : Integer;
                   lvEof@1210190000 : Boolean;
                 BEGIN
                   Rec2.COPY(Rec);

                   IF Steps < 0 THEN
                     lvStep := -1
                   ELSE
                     lvStep := 1;

                   lvCurrentSteps := 0;
                   lvEof := Rec2.NEXT(lvStep) = 0;
                   IF NOT lvEof THEN
                     FOR lvNumberOfSteps := 1 TO ABS(Steps) DO BEGIN
                       WHILE CheckSameRec(Rec) AND NOT lvEof DO
                         lvEof := Rec2.NEXT(lvStep) = 0;
                       IF NOT lvEof THEN BEGIN
                         Rec := Rec2;
                         lvCurrentSteps := lvCurrentSteps + lvStep;
                       END;
                     END;

                   EXIT(lvCurrentSteps);
                 END;

    OnAfterGetRecord=BEGIN
                       ItemBrandOnFormat(FORMAT("Item Brand"));
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnQueryClosePage=BEGIN
                       IF CloseAction = ACTION::LookupOK THEN
                           LookupOKOnPush;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100409000;1 ;ActionGroup;
                      CaptionML=ENU=Project In&ventory }
      { 1100529003;2 ;Action    ;
                      CaptionML=ENU=Purchase Order;
                      Promoted=Yes;
                      Image=Order;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowPurchaseOrderOfInventoryLine();
                               END;
                                }
      { 1100529002;2 ;Action    ;
                      CaptionML=ENU=Purchase Line Details;
                      Image=ViewCheck;
                      OnAction=BEGIN
                                 ShowDetailCard();
                               END;
                                }
      { 1100409001;2 ;Action    ;
                      CaptionML=ENU=Item &Tracking Entries;
                      Image=ItemTrackingLedger;
                      OnAction=VAR
                                 ItemTrackingDocMgt@1100409000 : Codeunit 6503;
                               BEGIN
                                 //DP00121
                                 ItemTrackingDocMgt.SetProject("Project No.");
                                 ItemTrackingDocMgt.ShowItemTrackingForMasterData(3,'',"Item No.",'','','','');
                               END;
                                }
      { 1900000004;  ;ActionContainer;
                      ActionContainerType=Reports }
      { 1210190028;1 ;Action    ;
                      CaptionML=ENU=&Print;
                      Promoted=Yes;
                      Image=Print;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 PrintDoc@1100525001 : Codeunit 229;
                               BEGIN
                                 PrintDoc.PrintProjectInventory(Rec);
                               END;
                                }
      { 1100525011;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525009;1 ;Action    ;
                      Name=CopyBtn;
                      CaptionML=ENU=&Copy;
                      Promoted=Yes;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ProjectInventoryEntry@1100525001 : Record 11012670;
                                 MultipleCopyManagement@1100525000 : Codeunit 11012068;
                               BEGIN
                                 //db, 13-07-15: C009868
                                 ProjectInventoryEntry.COPY(Rec);
                                 IF g_table = DATABASE::"Shipping Order Line" THEN BEGIN
                                   MultipleCopyManagement.SetSelectionShippingOrder(g_table, g_int1, g_code1, g_int2, '');
                                   MultipleCopyManagement.CopyProjInventToShippingLine(ProjectInventoryEntry);
                                 END;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190000;1;Group  ;
                GroupType=Repeater }

    { 1210190001;2;Field  ;
                SourceExpr="Project No." }

    { 1100525008;2;Field  ;
                SourceExpr="Project Description";
                Visible=FALSE }

    { 1100525000;2;Field  ;
                SourceExpr="Yard No." }

    { 1100525001;2;Field  ;
                SourceExpr="System No." }

    { 1100525002;2;Field  ;
                SourceExpr="Entity Type" }

    { 1100525003;2;Field  ;
                SourceExpr="Entity No." }

    { 1100525024;2;Field  ;
                SourceExpr=Element }

    { 1210190003;2;Field  ;
                SourceExpr="Item No." }

    { 1100525005;2;Field  ;
                SourceExpr="Variant Code" }

    { 1210190005;2;Field  ;
                SourceExpr=Manufacturer }

    { 1210190007;2;Field  ;
                SourceExpr="Basic Item" }

    { 1210190009;2;Field  ;
                SourceExpr="Vendor (Trade Item)" }

    { 1210190011;2;Field  ;
                SourceExpr="Trade Item" }

    { 1100529001;2;Field  ;
                SourceExpr="Purch. Detail No." }

    { 1100529000;2;Field  ;
                CaptionML=ENU=Purchase Details;
                SourceExpr=PurchaseDetailDescription();
                OnDrillDown=BEGIN
                              ShowDetailCard();
                            END;
                             }

    { 1210190015;2;Field  ;
                CaptionML=ENU=Description;
                SourceExpr=Description }

    { 1210190031;2;Field  ;
                SourceExpr="Description 2";
                Visible=FALSE }

    { 1100525020;2;Field  ;
                SourceExpr="Cost Object";
                OnValidate=BEGIN
                             //**4PS Generated Code. Do Not Change.sn03
                             DPA_ChkDepartmentCodeAllowed(DPA_IsHardFilter);
                             //**4PS Generated Code.en03
                           END;
                            }

    { 1100525010;2;Field  ;
                SourceExpr="Item Brand";
                Visible=FALSE }

    { 1210190017;2;Field  ;
                SourceExpr="Location Code" }

    { 1100525007;2;Field  ;
                SourceExpr="Bin Code" }

    { 1210190019;2;Field  ;
                SourceExpr="Shelf No." }

    { 1210190021;2;Field  ;
                SourceExpr="Unit of Measure Code" }

    { 1210190023;2;Field  ;
                SourceExpr="Inventory Quantity" }

    { 1100525004;2;Field  ;
                CaptionML=ENU=Standard Cost Price;
                DecimalPlaces=4:4;
                SourceExpr=GetPriceOrAmount('P');
                Visible=FALSE }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Amount;
                SourceExpr=GetPriceOrAmount('A');
                Visible=FALSE }

    { 1100525018;2;Field  ;
                SourceExpr="Gland Position" }

    { 1100525022;2;Field  ;
                SourceExpr="Project Delivery Note No." }

  }
  CODE
  {
    VAR
      Rec2@1210190000 : Record 11012670;
      gKeyNo@1100525006 : Integer;
      CopyToDeliveryNoteCode@1100525000 : Code[20];
      DPA_IsHardFilter@1100000999 : Boolean;
      g_table@1100525013 : Integer;
      g_code1@1100525012 : Code[20];
      g_code2@1100525011 : Code[20];
      g_code3@1100525010 : Code[20];
      g_code4@1100525009 : Code[20];
      g_code5@1100525008 : Code[20];
      g_code6@1100525007 : Code[20];
      g_code7@1100525005 : Code[20];
      g_code8@1100525004 : Code[20];
      g_int1@1100525003 : Integer;
      g_int2@1100525002 : Integer;
      g_Multicopy@1100525001 : Boolean;

    PROCEDURE CheckSameRec@1(ProjectInvEntry@1100529000 : Record 11012670) : Boolean;
    BEGIN
      IF (Rec2."Project No." <> ProjectInvEntry."Project No.") OR
         (Rec2."Item Composition" <> ProjectInvEntry."Item Composition") OR
         (Rec2."Location Code" <> ProjectInvEntry."Location Code") OR
         (Rec2."Bin Code" <> ProjectInvEntry."Bin Code") OR  //db, 02-11-10
         (Rec2."Shelf No." <> ProjectInvEntry."Shelf No.") OR
         (Rec2."Unit of Measure Code" <> ProjectInvEntry."Unit of Measure Code") OR
         (Rec2.Element <> ProjectInvEntry.Element) OR //hbk,10-06-2010,M4869
         (Rec2."Assembly Yard Number Object" <> ProjectInvEntry."Assembly Yard Number Object")
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE SetDefaultKeyNo@1100525002(iKeyNo@1100525000 : Integer);
    BEGIN
      gKeyNo := iKeyNo;
    END;

    PROCEDURE GetPriceOrAmount@1100525000(iTypeMode@1100525000 : Code[1]) : Decimal;
    BEGIN
      //* Mode: P=Price, A=Amount
      IF ("Item No." <> '') OR ("Trade Item" <> '') OR ("Basic Item" <> '') THEN BEGIN
        {
        //*17987.so
        IF ("Item Composition" <> PrevItemComposition) OR
           ("Vendor (Trade Item)" <> PrevVendorTrade) OR (Manufacturer <> PrevManufacturer)
        THEN BEGIN
          CALCFIELDS("Inventory Quantity");
          StandardCostPrice := GetItemPrice();
          TotalAmount := "Inventory Quantity" * StandardCostPrice;
          PrevItemComposition := "Item Composition";
          PrevVendorTrade := "Vendor (Trade Item)";
          PrevManufacturer := Manufacturer;
        END;
        CASE iTypeMode OF
          'P': EXIT(StandardCostPrice);
          'A': EXIT(TotalAmount);
        END;
        } //*17987.eo
        //*17987.sn
        CASE iTypeMode OF
          'P':
            EXIT(GetItemPrice());
          'A':
            BEGIN
              CALCFIELDS("Inventory Quantity");
              EXIT("Inventory Quantity" * GetItemPrice());
            END;
        END;
        //*17987.en
      END;
      EXIT(0);
    END;

    PROCEDURE CreateDeliveryNoteLines@1100525003(ProjDelNote@1100525002 : Code[20]);
    VAR
      ProjectInvEntry@1100525000 : Record 11012670;
      ProjDelNoteLine@1100525001 : Record 11012673;
      ProjDelNoteHeader@1100525004 : Record 11012672;
      LineNo@1100525003 : Integer;
    BEGIN
      ProjectInvEntry.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(ProjectInvEntry);

      Rec2.INIT;

      IF ProjectInvEntry.FINDSET THEN BEGIN
        ProjDelNoteHeader.GET(ProjDelNote); //C008936
        ProjDelNoteLine.SETRANGE("Project Delivery Note No.", ProjDelNote);
        IF ProjDelNoteLine.FINDLAST THEN
          LineNo := ProjDelNoteLine."Line No.";

        REPEAT
          IF NOT CheckSameRec(ProjectInvEntry) THEN BEGIN
            LineNo += 10000;

            ProjDelNoteLine.INIT;
            ProjDelNoteLine."Project Delivery Note No." := ProjDelNote;
            ProjDelNoteLine."Line No." := LineNo;
            ProjDelNoteLine."Item No." := ProjectInvEntry."Item No.";
            ProjDelNoteLine.Manufacturer := ProjectInvEntry.Manufacturer;
            ProjDelNoteLine."Basic Item" := ProjectInvEntry."Basic Item";
            ProjDelNoteLine."Vendor (Trade Item)" := ProjectInvEntry."Vendor (Trade Item)";
            ProjDelNoteLine."Trade Item" := ProjectInvEntry."Trade Item";
            ProjDelNoteLine."Shelf No." := ProjectInvEntry."Shelf No.";
            ProjectInvEntry.CALCFIELDS("Inventory Quantity");
            ProjDelNoteLine.Quantity := ProjectInvEntry."Inventory Quantity";
            ProjDelNoteLine."Unit of Measure Code" := ProjectInvEntry."Unit of Measure Code";
            ProjDelNoteLine."Yard No." := ProjectInvEntry."Yard No.";
            ProjDelNoteLine."System No." := ProjectInvEntry."System No.";
            ProjDelNoteLine."Entity No." := ProjectInvEntry."Entity No.";
            ProjDelNoteLine."Gland Position" := ProjectInvEntry."Gland Position";
            //kkleermaker.sn, 130829, C008352
            ProjDelNoteLine."Assembly Yard Number Object" := ProjectInvEntry."Assembly Yard Number Object";
            //kkleermaker.en
            ProjDelNoteLine."Entity Type" := ProjectInvEntry."Entity Type";
            ProjDelNoteLine."Location Code" := ProjectInvEntry."Location Code";
            ProjDelNoteLine."Bin Code" := ProjectInvEntry."Bin Code";  //db, 02-11-10
            ProjDelNoteLine."Item Composition" := ProjectInvEntry."Item Composition";
            ProjDelNoteLine.Element := ProjectInvEntry.Element; //hbk,10-06-10,TM4874
            ProjDelNoteLine."Variant Code" := ProjectInvEntry."Variant Code"; // X0.71
            ProjDelNoteLine."Purch. Detail No." := ProjectInvEntry."Purch. Detail No."; //DP00749
            ProjDelNoteLine."Global Dimension 2 Code" := ProjectInvEntry."Cost Object";  //db, 10-02-12: M32097
            ProjDelNoteLine.Description := ProjectInvEntry.GetItemDescription();
            ProjDelNoteLine."Description 2" := ProjectInvEntry."Description 2";
            //C008936.sn
            IF ProjDelNoteHeader."Transaction Type" = ProjDelNoteHeader."Transaction Type"::Transfer THEN BEGIN
              ProjDelNoteLine."To Location Code" := ProjectInvEntry."Location Code";
              ProjDelNoteLine."To Bin Code" := ProjectInvEntry."Bin Code";
            END;
            //
            ProjDelNoteLine.INSERT;

          END;
          Rec2 := ProjectInvEntry;
        UNTIL ProjectInvEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CopyToDeliveryNote@1100525004(DeliveryNote@1100525000 : Code[20]);
    BEGIN
      CopyToDeliveryNoteCode := DeliveryNote;
    END;

    LOCAL PROCEDURE LookupOKOnPush@19031339();
    BEGIN
      IF CopyToDeliveryNoteCode <> '' THEN
        CreateDeliveryNoteLines(CopyToDeliveryNoteCode);
    END;

    LOCAL PROCEDURE ItemBrandOnFormat@19019902(Text@19065394 : Text[1024]);
    VAR
      lvBasicItemRec@1100525000 : Record 11012316;
    BEGIN
      IF ("Item No." = '') AND ("Basic Item" <> '') THEN BEGIN
        IF lvBasicItemRec.GET(Manufacturer, "Basic Item") THEN
          Text := lvBasicItemRec."Item Brand";
      END;
    END;

    PROCEDURE DetermineInterface@11012002(l_table@11012046 : Integer;l_code1@11012047 : Code[20];l_code2@11012048 : Code[20];l_code3@11012049 : Code[20];l_code4@11012050 : Code[20];l_int1@11012051 : Integer;l_code5@11012052 : Code[20];l_code6@11012053 : Code[20];l_int2@1210190042 : Integer;l_code7@1210190000 : Code[20];l_code8@1210190001 : Code[20]);
    BEGIN
      //test diekus, 13-07-15: C009868
      g_table := l_table;
      g_code1 := l_code1;
      g_code2 := l_code2;
      g_code3 := l_code3;
      g_code4 := l_code4;
      g_int1 := l_int1;
      g_code5 := l_code5;
      g_code6 := l_code6;
      g_int2 := l_int2;
      g_code7 := l_code7;
      g_code8 := l_code8;
    END;

    BEGIN
    {
      4PS HBK 06-05-2010 Added field Element
    }
    END.
  }
}

