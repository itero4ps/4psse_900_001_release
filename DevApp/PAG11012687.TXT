OBJECT Page 11012687 Purchase Rating Statistics
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Purchase Rating Statistics;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table11012285;
    PageType=ListPlus;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             PurchStatisticMgt.InitStatistic(1);  // 1=Rating
           END;

    OnOpenPage=VAR
                 SelType@1100525000 : Record 11012285;
                 HardFilter@1100525001 : Boolean;
               BEGIN
                 INIT;    // Dummy table (temporary) is needed and there must be a record in this table,
                 INSERT;  // otherwise no lines are shown in the matrix subpage.

                 VendRatingTypeSelCode := PurchStatisticMgt.GetSelectionCodeWithSelType(SelType.Type::"VR-Type");
                 IF (LineSelCode = '') AND (ColumnSelCode = '') THEN BEGIN  // No defaults saved (these fields are mandatory)
                   LineSelCode := PurchStatisticMgt.GetSelectionCodeWithSelType(SelType.Type::"VR-Type");
                   ColumnSelCode := PurchStatisticMgt.GetSelectionCodeWithSelType(SelType.Type::Vendor);
                   DateFilter:= STRSUBSTNO('%1..%2', DMY2DATE(1, 1, DATE2DMY(TODAY, 3)), DMY2DATE(31, 12, DATE2DMY(TODAY, 3)));
                   PeriodType := PeriodType::Month;
                 END;
                 OldLineSelCode := LineSelCode;
                 OldColumnSelCode := ColumnSelCode;
                 HardDPAFilter := PurchStatisticMgt.GetVendorDPAFilter(CurrPage.OBJECTID(FALSE), HardFilter);
                 IF NOT HardFilter THEN BEGIN
                   IF GlobalDim1Filter = ''  THEN
                     GlobalDim1Filter := HardDPAFilter;
                   HardDPAFilter := '';
                 END;
                 CurrPage.MATRIX.PAGE.ShareTmpTables(TmpLineCodeBuf, TmpDataBuf);

                 MATRIX_MaximumSetLength := 12;
                 // Temporary tables are not build yet, so column captions can not be generated
                 //MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                 //UpdateMatrixSubForm;
               END;

    ActionList=ACTIONS
    {
      { 1100528710;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525016;1 ;Action    ;
                      CaptionML=ENU=First Set;
                      ToolTipML=ENU=First Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::FirstRec);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 1100528707;1 ;Action    ;
                      CaptionML=ENU=Previous Set;
                      ToolTipML=ENU=Previous Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Previous);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 1100528706;1 ;Action    ;
                      CaptionML=ENU=Previous Column;
                      ToolTipML=ENU=Previous Column;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::PreviousColumn);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 1100528705;1 ;Action    ;
                      CaptionML=ENU=Next Column;
                      ToolTipML=ENU=Next Column;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::NextColumn);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 1100528704;1 ;Action    ;
                      CaptionML=ENU=Next Set;
                      ToolTipML=ENU=Next Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Next);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 1100525015;1 ;Action    ;
                      CaptionML=ENU=Last Set;
                      ToolTipML=ENU=Last Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::LastRec);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 1100525017;1 ;Action    ;
                      CaptionML=ENU=Update;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Refresh;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UpdateSelections();
                               END;
                                }
      { 1100525018;1 ;Action    ;
                      CaptionML=ENU=Excel;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Excel;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UpdateSelections();
                                 PurchStatisticMgt.ProcessExportExcel(CurrPage.CAPTION, ShowColumnName, SkipEmptyLines, SkipEmptyColumns, -1);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528703;;Container;
                ContainerType=ContentArea }

    { 1100528729;1;Group  ;
                CaptionML=ENU=Options;
                GroupType=Group }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Show as Lines;
                NotBlank=Yes;
                SourceExpr=LineSelCode;
                OnValidate=BEGIN
                             ValidateLineSelCode();
                           END;

                OnLookup=BEGIN
                           PurchStatisticMgt.LookupSelectionCode(LineSelCode);
                           ValidateLineSelCode();
                         END;
                          }

    { 1100525005;2;Field  ;
                CaptionML=ENU=Show as Columns;
                NotBlank=Yes;
                SourceExpr=ColumnSelCode;
                OnValidate=BEGIN
                             ValidateColumnSeleCode();
                           END;

                OnLookup=BEGIN
                           PurchStatisticMgt.LookupSelectionCode(ColumnSelCode);
                           ValidateColumnSeleCode();
                         END;
                          }

    { 1100525004;2;Field  ;
                CaptionML=ENU=Rounding Factor Amounts;
                OptionCaptionML=ENU=None,1,1000,1000000;
                SourceExpr=RoundingFactor }

    { 1100525000;2;Field  ;
                CaptionML=ENU=Period Type;
                ToolTipML=ENU=Day;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                SourceExpr=PeriodType }

    { 1100525003;2;Field  ;
                CaptionML=ENU=Skip Empty Lines;
                SourceExpr=SkipEmptyLines }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Skip Empty Columns;
                SourceExpr=SkipEmptyColumns }

    { 1100525001;2;Field  ;
                CaptionML=ENU=Show Column Name;
                SourceExpr=ShowColumnName }

    { 1100528700;1;Part   ;
                Name=MATRIX;
                PagePartID=Page11012686;
                PartType=Page }

    { 1100525014;1;Group  ;
                CaptionML=ENU=Filters }

    { 1100525013;2;Field  ;
                CaptionML=ENU=Date Filter;
                NotBlank=Yes;
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             ValidateDateFilter();
                           END;
                            }

    { 1100525012;2;Field  ;
                CaptionML=ENU=Vendor Filter;
                SourceExpr=VendorFilter;
                OnLookup=BEGIN
                           EXIT(PurchStatisticMgt.LookupVendorNoFilter(Text));
                         END;
                          }

    { 1100525020;2;Field  ;
                CaptionML=ENU=Vendor Categories Filter Coding System;
                SourceExpr=VendorCategoryFilterCodeSystem;
                OnLookup=VAR
                           VendorCategoryPage@1100529103 : Page 11124820;
                           VendorCategory@1100529102 : Record 11071892;
                           VendorLocal@1100525001 : Text[250];
                         BEGIN
                           // Filter Based on "Vendor No."
                           VendorLocal := DELCHR(VendorFilter,'=','''');
                           VendorCategoryPage.LOOKUPMODE(TRUE);
                           IF VendorFilter <> '' THEN
                             VendorCategory.SETRANGE("Vendor No.", VendorLocal);
                             VendorCategoryPage.SETTABLEVIEW(VendorCategory);
                           IF VendorCategoryPage.RUNMODAL<> ACTION::LookupOK THEN
                             EXIT(FALSE);
                           Text := VendorCategoryPage.GetSelectionFilterCodeSystem;
                           EXIT(TRUE);

                           //EXIT(PurchStatisticMgt.LookupVendorCategoryCodeSystem(Text));
                         END;
                          }

    { 1100525019;2;Field  ;
                CaptionML=ENU=Vendor Categories Filter Code;
                SourceExpr=VendorCategoryFilterCode;
                OnLookup=VAR
                           VendorCategoryPage@1100529103 : Page 11124820;
                           VendorCategory@1100529102 : Record 11071892;
                           VendorLocal@1100525001 : Text[250];
                         BEGIN
                           // Filter Based on "Vendor No." and "Coding System".
                           VendorLocal := DELCHR(VendorFilter,'=','''');
                           VendorCategoryPage.LOOKUPMODE(TRUE);
                           IF VendorFilter <> '' THEN BEGIN
                             VendorCategory.SETRANGE("Vendor No.",VendorLocal);
                             VendorCategoryPage.SETTABLEVIEW(VendorCategory);
                           END;
                           IF VendorCategoryFilterCodeSystem <> '' THEN BEGIN
                             VendorCategory.SETRANGE("Coding System",VendorCategoryFilterCodeSystem);
                             VendorCategoryPage.SETTABLEVIEW(VendorCategory);
                           END;
                           IF VendorCategoryPage.RUNMODAL<> ACTION::LookupOK THEN
                             EXIT(FALSE);
                           Text := VendorCategoryPage.GetSelectionFilterCode;
                           EXIT(TRUE);

                           //EXIT(PurchStatisticMgt.LookupVendorCategoryCode(Text));
                         END;
                          }

    { 1100525011;2;Field  ;
                CaptionML=ENU=Vendor Qualification Filter;
                SourceExpr=VendQualFilter;
                OnLookup=BEGIN
                           EXIT(PurchStatisticMgt.LookupVendQualificationFilter(Text));
                         END;
                          }

    { 1100525010;2;Field  ;
                CaptionML=ENU=G/L Account Filter;
                SourceExpr=GLAccFilter;
                OnLookup=BEGIN
                           EXIT(PurchStatisticMgt.LookupGLAccountNoFilter(Text));
                         END;
                          }

    { 1100525009;2;Field  ;
                Name=GlobalDim1Filter;
                CaptionML=ENU=Global Dimension 1 Filter;
                SourceExpr=GlobalDim1Filter;
                CaptionClass='1,3,1';
                OnLookup=BEGIN
                           EXIT(PurchStatisticMgt.LookUpDimensionValueFilter(1, Text));
                         END;
                          }

    { 1100525008;2;Field  ;
                Name=GlobalDim2Filter;
                CaptionML=ENU=Global Dimension 2 Filter;
                SourceExpr=GlobalDim2Filter;
                CaptionClass='1,3,2';
                OnLookup=BEGIN
                           EXIT(PurchStatisticMgt.LookUpDimensionValueFilter(2, Text));
                         END;
                          }

    { 1100525007;2;Field  ;
                CaptionML=ENU=Rating Type Filter;
                SourceExpr=RatingTypeFilter;
                OnLookup=BEGIN
                           EXIT(PurchStatisticMgt.LookupRatingTypeFilter(Text));
                         END;
                          }

  }
  CODE
  {
    VAR
      MATRIX_MatrixRecord@1100528708 : TEMPORARY Record 11012288;
      MATRIX_MatrixRecords@1100528707 : ARRAY [32] OF Record 11012288;
      MATRIX_MaximumSetLength@1100528706 : Integer;
      MATRIX_PrimKeyRecInCurrSet@1100528705 : Text[1024];
      MATRIX_CaptionSet@1100528704 : ARRAY [32] OF Text[80];
      MATRIX_CaptionRange@1100528703 : Text[250];
      MATRIX_CurrSetLength@1100528702 : Integer;
      MATRIX_Step@1100528701 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn,,,,,FirstRec,LastRec';
      TmpLineCodeBuf@1100525025 : TEMPORARY Record 11012287;
      TmpDataBuf@1100525020 : TEMPORARY Record 11012289;
      PurchStatisticMgt@1100525026 : Codeunit 11012297;
      RoundingFactor@1100525019 : 'None,1,1000,1000000';
      PeriodType@1100525018 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      SkipEmptyLines@1100525015 : Boolean;
      SkipEmptyColumns@1100525014 : Boolean;
      ShowColumnName@1100525013 : Boolean;
      VendRatingTypeSelCode@1100525012 : Code[30];
      OldLineSelCode@1100525011 : Code[30];
      OldColumnSelCode@1100525010 : Code[30];
      LineSelCode@1100525009 : Code[30];
      ColumnSelCode@1100525008 : Code[30];
      RatingTypeFilter@1100525007 : Code[250];
      VendorFilter@1100525006 : Code[250];
      VendorCategoryFilterCodeSystem@1100525017 : Code[250];
      VendorCategoryFilterCode@1100525016 : Code[250];
      VendQualFilter@1100525005 : Code[250];
      GLAccFilter@1100525004 : Code[250];
      GlobalDim1Filter@1100525003 : Code[250];
      GlobalDim2Filter@1100525001 : Code[250];
      HardDPAFilter@1100525002 : Code[250];
      DateFilter@1100525000 : Text[30];
      Text000@1100525022 : TextConst 'ENU=<EMPTY>';

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@1152(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn');
    VAR
      SelType@1100525003 : Record 11012285;
      MatrixManagement@1002 : Codeunit 9200;
      RecRef@1006 : RecordRef;
      FieldRef@1011 : FieldRef;
      I@1100525004 : Integer;
      CaptionFieldNo@1100525000 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CLEAR(MATRIX_MatrixRecords);

      CaptionFieldNo := MATRIX_MatrixRecord.FIELDNO(Code);

      RecRef.GETTABLE(MATRIX_MatrixRecord);
      RecRef.SETTABLE(MATRIX_MatrixRecord);
      MatrixManagement.GenerateMatrixData(
        RecRef,
        MATRIX_SetWanted,
        MATRIX_MaximumSetLength,
        CaptionFieldNo,
        MATRIX_PrimKeyRecInCurrSet,
        MATRIX_CaptionSet,
        MATRIX_CaptionRange,
        MATRIX_CurrSetLength);
      I := 1;
      IF MATRIX_PrimKeyRecInCurrSet <> '' THEN
        MATRIX_MatrixRecord.SETPOSITION(MATRIX_PrimKeyRecInCurrSet);
      IF MATRIX_MatrixRecord.FIND('=') THEN
        REPEAT
          MATRIX_MatrixRecords[I].COPY(MATRIX_MatrixRecord);
          IF NOT ShowColumnName THEN BEGIN
            IF MATRIX_MatrixRecord."Selection Type Option No." = SelType.Type::Period THEN
              MATRIX_CaptionSet[I] := FORMAT(MATRIX_MatrixRecord."Period Start");
            IF MATRIX_CaptionSet[I] = '' THEN
              MATRIX_CaptionSet[I] := Text000;
          END ELSE BEGIN
            IF MATRIX_MatrixRecord."Selection Type Option No." <> SelType.Type::Period THEN
              MATRIX_CaptionSet[I] := MATRIX_MatrixRecord.Name
            ELSE
              MATRIX_CaptionSet[I] := FORMAT(MATRIX_MatrixRecord."Period Start") + ' ' + MATRIX_MatrixRecord.Name;
          END;
          I := I + 1;
        UNTIL (I > MATRIX_CurrSetLength) OR (MATRIX_MatrixRecord.NEXT <> 1);

      FOR I := I TO MATRIX_MaximumSetLength DO
        MATRIX_CaptionSet[I] := ' '; // Fill unused captions with space char, otherwise rubbish is showed in the matrix
    END;

    LOCAL PROCEDURE UpdateMatrixSubForm@7();
    BEGIN
      CurrPage.MATRIX.PAGE.Load(
        MATRIX_CaptionSet,
        MATRIX_MatrixRecords,
        MATRIX_CurrSetLength);
    END;

    LOCAL PROCEDURE UpdateMatrixSubForm2@1100525001();
    BEGIN
      // Function splitted. Here only selections/filters used for building tmp tables
      CurrPage.MATRIX.PAGE.Load2(
        LineSelCode,
        ColumnSelCode,
        PeriodType,
        RoundingFactor,
        SkipEmptyLines,
        RatingTypeFilter,
        DateFilter,
        VendorFilter,
        VendorCategoryFilterCodeSystem,
        VendorCategoryFilterCode,
        VendQualFilter,
        GLAccFilter,
        GlobalDim1Filter,
        GlobalDim2Filter,
        HardDPAFilter);
    END;

    PROCEDURE ValidateLineSelCode@1100485004();
    VAR
      SelType@1100525000 : Record 11012285;
      SelCodeType@1100525001 : Option;
    BEGIN
      PurchStatisticMgt.ValidateSelectionCode(LineSelCode, SelCodeType);
      IF (SelCodeType = SelType.Type::"VR-Type") THEN BEGIN  // Lines or Columns (not both) must be 'Vendor Rating Type'.
        IF (LineSelCode = ColumnSelCode) THEN
          ColumnSelCode := OldLineSelCode;
      END ELSE BEGIN
        IF ColumnSelCode <> VendRatingTypeSelCode THEN
          ColumnSelCode := VendRatingTypeSelCode
      END;
      OldLineSelCode := LineSelCode;
      OldColumnSelCode := ColumnSelCode;
    END;

    PROCEDURE ValidateColumnSeleCode@1100485005();
    VAR
      SelType@1100525000 : Record 11012285;
      SelCodeType@1100525001 : Option;
    BEGIN
      PurchStatisticMgt.ValidateSelectionCode(ColumnSelCode, SelCodeType);
      IF (SelCodeType = SelType.Type::"VR-Type") THEN BEGIN  // Lines or Columns (not both) must be 'Vendor Rating Type'.
        IF (ColumnSelCode = LineSelCode) THEN
          LineSelCode := OldColumnSelCode;
      END ELSE BEGIN
        IF LineSelCode <> VendRatingTypeSelCode THEN
          LineSelCode := VendRatingTypeSelCode
      END;
      OldLineSelCode := LineSelCode;
      OldColumnSelCode := ColumnSelCode;
    END;

    PROCEDURE ValidateDateFilter@1210190011();
    VAR
      GLAcc@1100525000 : Record 15;
      Date@1210190000 : Record 2000000007;
      ApplicationMgt@1100525001 : Codeunit 1;
      DateMinMax@1210190002 : Date;
    BEGIN
      IF ApplicationMgt.MakeDateFilter(DateFilter) = 0 THEN;
      GLAcc.SETFILTER("Date Filter", DateFilter);
      DateFilter := GLAcc.GETFILTER("Date Filter");

      WITH Date DO BEGIN
        SETFILTER("Period Start", DateFilter);
        DateMinMax := GETRANGEMIN("Period Start");
        DateMinMax := GETRANGEMAX("Period Start");
      END;
    END;

    PROCEDURE UpdateSelections@1100525000();
    BEGIN
      PurchStatisticMgt.LoadSelections(
        LineSelCode, ColumnSelCode, PeriodType, RoundingFactor, 0, FALSE, RatingTypeFilter,
        DateFilter, VendorFilter, VendQualFilter, GLAccFilter, GlobalDim1Filter, GlobalDim2Filter, HardDPAFilter);
      PurchStatisticMgt.LoadSelectionsForVendCategory(VendorCategoryFilterCodeSystem, VendorCategoryFilterCode);
      PurchStatisticMgt.ProcessStatistic(TmpLineCodeBuf, MATRIX_MatrixRecord, TmpDataBuf);

      IF SkipEmptyColumns THEN
        MATRIX_MatrixRecord.SETRANGE("Empty Column", FALSE)
      ELSE
        MATRIX_MatrixRecord.SETRANGE("Empty Column");  // Reset Filter
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
      UpdateMatrixSubForm2;
      CurrPage.UPDATE;
    END;

    BEGIN
    {
      Lines, columns and data are all base on temporary tables. Therefore the column table 'MATRIX_MatrixRecord'is also temporary!
    }
    END.
  }
}

