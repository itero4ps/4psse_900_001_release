OBJECT Page 11020467 Transfer Estimate to Service
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Transfer Estimate to Service;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table11012151;
    PageType=NavigatePage;
    OnOpenPage=VAR
                 lvEstRec@1100525000 : Record 11012151;
               BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 CheckTransferDestination;

                 EstRec.GET("No.");
                 IF (EstRec."Estimate Type" = EstRec."Estimate Type"::Sales) AND
                    (EstRec."Copied from Cost Estimate" <> '') THEN
                 BEGIN
                   CopyFromCostEst := EstRec."Copied from Cost Estimate";
                   lvEstRec.GET(CopyFromCostEst);
                   CopyFromCostEstTxt := lvEstRec.Description;
                 END;

                 WizardStep := 1;
                 ShowStep(TRUE);
               END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528603;1 ;Action    ;
                      Name=Back;
                      CaptionML=ENU=< &Back;
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 WizardStep -= 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100528602;1 ;Action    ;
                      Name=Next;
                      CaptionML=ENU=&Next >;
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 //CheckStatus;
                                 ShowStep(FALSE);
                                 WizardStep += 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100528601;1 ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Completed;
                      OnAction=BEGIN
                                 //CheckStatus;
                                 FinishWizard;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190022;1;Group  ;
                Name=Step1;
                CaptionML=ENU=Transfer from;
                Visible=Step1Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Select the Data that should be Copied }

    { 1   ;2   ;Field     ;
                CaptionML=ENU=Estimate;
                SourceExpr="No.";
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                CaptionML=ENU=Estimate Description;
                SourceExpr=Description;
                Importance=Additional;
                Editable=FALSE }

    { 1100525011;2;Field  ;
                CaptionML=ENU=Cost Estimate;
                SourceExpr=CopyFromCostEst;
                Editable=FALSE }

    { 1100525010;2;Field  ;
                CaptionML=ENU=Cost Estimate Description;
                SourceExpr=CopyFromCostEstTxt;
                Importance=Additional;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=ENU=Sub Estimate;
                SourceExpr=SubEstFilter;
                OnValidate=VAR
                             Level@1100485003 : Integer;
                             Chapter@1100485002 : Code[20];
                             Paragraph@1100485001 : Code[20];
                           BEGIN
                             ValidateSubEstimate;
                           END;

                OnLookup=BEGIN
                           LookupSubEstimate;
                         END;
                          }

    { 18  ;2   ;Field     ;
                CaptionML=ENU=Sub Estimate Description;
                SourceExpr=SubEstTxt;
                Importance=Additional;
                Editable=FALSE }

    { 1100485005;2;Field  ;
                CaptionML=ENU=Part;
                SourceExpr=EstPartFilter;
                OnValidate=BEGIN
                             ValidatePart;
                           END;

                OnLookup=BEGIN
                           LookupPart;
                         END;
                          }

    { 1100485006;2;Field  ;
                Name=ElemFromTxt;
                CaptionML=ENU=Part Description;
                SourceExpr=EstPartTxt;
                Importance=Additional;
                Editable=FALSE }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Status;
                SourceExpr=StatusFilter;
                OnValidate=BEGIN
                             IF NOT StatusRec.GET(StatusFilter) THEN
                               StatusTxt := ''
                             ELSE
                               StatusTxt := StatusRec.Description;
                           END;

                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Line Statuses",StatusRec) = ACTION::LookupOK THEN BEGIN
                              StatusFilter := StatusRec.Status;
                              StatusTxt := StatusRec.Description;
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525007;2;Field  ;
                CaptionML=ENU=Status Description;
                SourceExpr=StatusTxt;
                Importance=Additional;
                Editable=FALSE }

    { 1100528600;1;Group  ;
                Name=Step2;
                CaptionML=ENU=Transfer To;
                Visible=Step2Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Select the Destination of the copied Estimate }

    { 1100485011;2;Field  ;
                CaptionML=ENU=Destination;
                OptionCaptionML=ENU=" ,,Service Order,Modification";
                SourceExpr=TransferDestination;
                OnValidate=BEGIN
                             IF (TransferDestination = TransferDestination::Modification) AND NOT Converted THEN
                               ERROR(Text000);
                             UpdateEditable;
                           END;
                            }

    { 1100525015;2;Field  ;
                CaptionML=ENU=Order Kind;
                SourceExpr=OrderKind;
                Editable=OrderKindEditable;
                OnValidate=BEGIN
                             ValidateOrderIndication(OrderIndRec.Indication::Kind, OrderKind);
                           END;

                OnLookup=BEGIN
                           IF NOT (TransferDestination IN [TransferDestination::ServOrder, TransferDestination::Modification]) THEN EXIT;

                           OrderIndRec.Code := OrderKind;
                           OrderIndRec.SETRANGE(Indication, OrderIndRec.Indication::Kind);
                           IF PAGE.RUNMODAL(0, OrderIndRec) = ACTION::LookupOK THEN BEGIN
                             OrderKind := OrderIndRec.Code;
                           END;
                         END;
                          }

    { 1100485015;2;Field  ;
                CaptionML=ENU=Transfer Zero Lines;
                SourceExpr=TransferZeroLines;
                Editable=TransferZeroLinesEditable }

    { 1100525004;2;Field  ;
                CaptionML=ENU=Validate Rate Code;
                SourceExpr=ValidateRateCode }

    { 1100525000;2;Field  ;
                CaptionML=ENU=Update Order Amount;
                OptionCaptionML=ENU=" ,,TryOut Quote";
                SourceExpr=UpdateOrderAmount;
                Editable=TargetFieldsEditable;
                OnValidate=BEGIN
                             GetOrderAmount;
                           END;
                            }

    { 1100525001;2;Field  ;
                CaptionML=ENU=Try-out Quote;
                SourceExpr=TryoutQuote;
                Editable=TargetFieldsEditable;
                OnValidate=BEGIN
                             GetOrderAmount;
                           END;

                OnLookup=VAR
                           SelectedQuote@1100409001 : Code[20];
                         BEGIN
                           //db, 22-01-15: C020309
                           SelectedQuote := ShowTryOut(2);
                           IF SelectedQuote <> '' THEN BEGIN
                             TryoutQuote := SelectedQuote;
                             GetOrderAmount;
                           END;
                         END;
                          }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Order Amount;
                SourceExpr=OrderAmount;
                Editable=TargetFieldsEditable }

    { 1100525003;2;Field  ;
                CaptionML=ENU=Installment Scheme;
                SourceExpr=InstScheme;
                Editable=TargetFieldsEditable;
                OnValidate=BEGIN
                             IF InstScheme <> '' THEN
                               InstSchemeRec.GET(InstScheme);
                           END;

                OnLookup=BEGIN
                           InstSchemeRec.SETRANGE(Type, InstSchemeRec.Type::"Service Order");
                           IF PAGE.RUNMODAL(0, InstSchemeRec) = ACTION::LookupOK THEN BEGIN
                             InstScheme := InstSchemeRec.Code;
                           END;
                         END;
                          }

    { 1100525005;2;Field  ;
                CaptionML=ENU=Copy Try-Out Successor;
                SourceExpr=CopyTryOut }

  }
  CODE
  {
    VAR
      EstRec@1100525011 : Record 11012151;
      SheetRec@11012004 : Record 11012172;
      StatusRec@1100525007 : Record 11012158;
      OrderIndRec@1100528601 : Record 11012837;
      InstSchemeRec@1100525012 : Record 11012016;
      OrderKind@1100525013 : Code[10];
      SubEstFilter@11012007 : Code[250];
      EstPartFilter@1100485002 : Code[250];
      StatusFilter@1100525006 : Code[250];
      StatusTxt@1100525005 : Text[50];
      SubEstTxt@1210190013 : Text[50];
      EstPartTxt@1100485003 : Text[50];
      FormatMgt@11012017 : Codeunit 11012022;
      SettlementMethod@1100485000 : 'FixedPrice,CostPlus';
      TransferToContract@1100485001 : ' ,Yes,No';
      CopyTryOut@1100485005 : Boolean;
      TransferDestination@1100485007 : ' ,,ServOrder,Modification';
      TransferZeroLines@1100485010 : Boolean;
      CopyFromCostEst@1100525009 : Code[20];
      CopyFromCostEstTxt@1100525010 : Text[50];
      DPA_IsHardFilter@1100000999 : Boolean;
      CopyFeatures@1100528600 : ' ,TechSpec,CheckList,Both';
      Step1Visible@1100528602 : Boolean INDATASET;
      Step2Visible@1100528603 : Boolean INDATASET;
      WizardStep@1100528604 : Integer;
      FinishEnable@1100528605 : Boolean INDATASET;
      BackEnable@1100528606 : Boolean INDATASET;
      NextEnable@1100528607 : Boolean INDATASET;
      TargetFieldsEditable@1100525000 : Boolean INDATASET;
      OrderKindEditable@1100528608 : Boolean INDATASET;
      TransferZeroLinesEditable@1100528609 : Boolean INDATASET;
      UpdateOrderAmount@1100525008 : ' ,,TryOutQuote';
      OrderAmount@1100525003 : Decimal;
      InstScheme@1100525002 : Code[20];
      TryoutQuote@1100525001 : Code[20];
      ValidateRateCode@1100525004 : Boolean;
      Text000@1100528610 : TextConst 'ENU=Estimate must be converted to use this function';

    PROCEDURE ValidateSubEstimate@1100528903();
    VAR
      Level@1100528902 : Integer;
      Chapter@1100528901 : Code[20];
      Paragraph@1100528900 : Code[20];
      OldSubEstRec@1100528904 : Record 11012152;
      SubEstRec@1100528903 : Record 11072074;
    BEGIN
      //DP00381
      IF SubEstFilter <> '' THEN
        IF STRPOS(SubEstFilter, '..')=0 THEN
          IF FormatMgt.Numeric(SubEstFilter) THEN
            FormatMgt.FormatSubEstimate(SubEstFilter,Chapter,Paragraph,Level,"No.",FALSE);
      IF Converted THEN BEGIN
        IF NOT SubEstRec.GET("No.",SubEstFilter) THEN SubEstRec.INIT;
        SubEstTxt := SubEstRec.Description;
      END ELSE BEGIN
        IF NOT OldSubEstRec.GET("No.",SubEstFilter) THEN OldSubEstRec.INIT;
        SubEstTxt := OldSubEstRec.Description;
      END;
      CheckTransferDestination;
    END;

    PROCEDURE LookupSubEstimate@1100528901();
    VAR
      OldSubEstRec@1100528901 : Record 11012152;
      SubEstRec@1100528900 : Record 11072074;
    BEGIN
      //DP00381
      IF Converted THEN BEGIN
        SubEstRec.SETRANGE("Estimate No.", "No.");
        IF PAGE.RUNMODAL(0, SubEstRec) = ACTION::LookupOK THEN BEGIN
          SubEstFilter := SubEstRec."Sub-Estimate No.";
          SubEstTxt := SubEstRec.Description;
        END;
      END ELSE BEGIN
        OldSubEstRec.SETRANGE("Estimate No.", "No.");
        IF PAGE.RUNMODAL(0, OldSubEstRec) = ACTION::LookupOK THEN BEGIN
          SubEstFilter := OldSubEstRec."Sub-Estimate No.";
          SubEstTxt := OldSubEstRec.Description;
        END;
      END;
      CheckTransferDestination;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ValidatePart@1100528904();
    VAR
      OldEstPartRec@1100528900 : Record 11012153;
      EstPartRec@1100528901 : Record 11072073;
    BEGIN
      //DP00381
      IF EstPartFilter <> '' THEN
        IF STRPOS(EstPartFilter, '..')=0 THEN
          IF FormatMgt.Numeric(EstPartFilter) THEN
            FormatMgt.FormatElem(EstPartFilter,1,'');
      IF Converted THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", "No.");
        IF SubEstFilter <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF EstPartFilter <> '' THEN
          EstPartRec.SETFILTER(Part, EstPartFilter);
        IF NOT EstPartRec.FIND('-') THEN EstPartRec.INIT;
        EstPartTxt := EstPartRec.Description;
      END ELSE BEGIN
        OldEstPartRec.SETRANGE("Estimate No.", "No.");
        IF SubEstFilter <> '' THEN
          OldEstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF EstPartFilter <> '' THEN
          OldEstPartRec.SETFILTER(Part, EstPartFilter);
        IF NOT OldEstPartRec.FIND('-') THEN OldEstPartRec.INIT;
        EstPartTxt := OldEstPartRec.Description;
      END;
    END;

    PROCEDURE LookupPart@1100528902();
    VAR
      OldEstPartRec@1100528901 : Record 11012153;
      EstPartRec@1100528900 : Record 11072073;
    BEGIN
      //DP00381
      IF Converted THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", "No.");
        IF SubEstFilter <> '' THEN
          EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF PAGE.RUNMODAL(0, EstPartRec) = ACTION::LookupOK THEN BEGIN
          EstPartRec.CALCFIELDS("Sub-Estimate Description");
          SubEstFilter := EstPartRec."Sub-Estimate No.";
          SubEstTxt := EstPartRec."Sub-Estimate Description";
          EstPartFilter := EstPartRec.Part;
          EstPartTxt := EstPartRec.Description;
        END;
      END ELSE BEGIN
        OldEstPartRec.SETRANGE("Estimate No.", "No.");
        IF SubEstFilter <> '' THEN
          OldEstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF PAGE.RUNMODAL(0, OldEstPartRec) = ACTION::LookupOK THEN BEGIN
          OldEstPartRec.CALCFIELDS("Sub-Estimate Description");
          SubEstFilter := OldEstPartRec."Sub-Estimate No.";
          SubEstTxt := OldEstPartRec."Sub-Estimate Description";
          EstPartFilter := OldEstPartRec.Part;
          EstPartTxt := OldEstPartRec.Description;
        END;
      END;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE CheckTransferDestination@1100485000();
    VAR
      lvSubEstRec@1100525002 : Record 11072074;
      lvSubEstRecOLD@1100525001 : Record 11012152;
      lvServOrderRec@1100525000 : Record 11012823;
    BEGIN
      TransferDestination := TransferDestination::" ";

      IF Converted THEN BEGIN  //DP00381
        lvSubEstRec.SETFILTER("Estimate No.", "No.");
        lvSubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        lvSubEstRec.SETRANGE("Transfer to Service", lvSubEstRec."Transfer to Service"::ServOrder);
        IF lvSubEstRec.FINDFIRST THEN
          TransferDestination := TransferDestination::ServOrder;

        lvSubEstRec.SETFILTER("Transfer to Service", '<>%1', lvSubEstRec."Transfer to Service"::ServOrder);
        IF lvSubEstRec.FINDFIRST THEN
          TransferDestination := TransferDestination::" ";

        IF TransferDestination = TransferDestination::" " THEN BEGIN
          lvSubEstRec.SETFILTER("Estimate No.", "No.");
          lvSubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
          lvSubEstRec.SETRANGE("Transfer to Service", lvSubEstRec."Transfer to Service"::Modification);
          IF lvSubEstRec.FINDFIRST THEN
            TransferDestination := TransferDestination::Modification;

          lvSubEstRec.SETFILTER("Transfer to Service", '<>%1', lvSubEstRec."Transfer to Service"::Modification);
          IF lvSubEstRec.FINDFIRST THEN
            TransferDestination := TransferDestination::" ";
        END;
      END ELSE BEGIN
        lvSubEstRecOLD.SETFILTER("Estimate No.", "No.");
        lvSubEstRecOLD.SETFILTER("Sub-Estimate No.", SubEstFilter);
        lvSubEstRecOLD.SETRANGE("Transfer to Service", lvSubEstRecOLD."Transfer to Service"::ServOrder);
        IF lvSubEstRecOLD.FINDFIRST THEN
          TransferDestination := TransferDestination::ServOrder;

        lvSubEstRecOLD.SETFILTER("Transfer to Service", '<>%1', lvSubEstRecOLD."Transfer to Service"::ServOrder);
        IF lvSubEstRecOLD.FINDFIRST THEN
          TransferDestination := TransferDestination::" ";
      END;

      IF TransferDestination = TransferDestination::ServOrder THEN BEGIN
        SettlementMethod := SettlementMethod::CostPlus;
        IF lvServOrderRec.GET(GetNumServiceOrder) THEN BEGIN
          OrderKind := lvServOrderRec."Order Kind";
        END;
      END ELSE BEGIN
        //db.sn, 15-01-13: 34378
        UpdateOrderAmount := UpdateOrderAmount::" ";
        OrderAmount := 0;
        InstScheme := '';
        //db.en, 15-01-13: 34378
      END;

      UpdateEditable;
    END;

    PROCEDURE ValidateOrderIndication@1100485003(IIndication@1100485000 : Option;ICode@1100485001 : Code[10]);
    BEGIN
      IF (ICode <> '') THEN
        OrderIndRec.GET(IIndication, ICode);
    END;

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            Step1Visible := Visible;
            IF Visible THEN BEGIN
              BackEnable := FALSE;
              NextEnable := TRUE;
              FinishEnable := FALSE;
            END;
          END;
        2:
          BEGIN
            Step2Visible := Visible;
            IF Visible THEN BEGIN
              BackEnable := TRUE;
              NextEnable := FALSE;
              FinishEnable := TRUE;
            END;
          END;
      END;
    END;

    PROCEDURE FinishWizard@1100525001();
    VAR
      TransferCu@1100528901 : Codeunit 11012152;
      TransferMgt@1100528900 : Codeunit 11012228;
    BEGIN
      IF TransferDestination = TransferDestination::" " THEN
        ERROR('');

      CASE TransferDestination OF
        TransferDestination::ServOrder:
          BEGIN
            IF Converted THEN BEGIN  //DP00381
              TransferMgt.SetTransferOptions(
                TransferZeroLines, FALSE,
                FALSE,FALSE,FALSE,FALSE,FALSE,TransferDestination,SettlementMethod,CopyTryOut,CopyFeatures::" ",
                FALSE,FALSE,TRUE);
              TransferMgt.SetEstimateOptions("No.",SubEstFilter,EstPartFilter,'',StatusFilter);
              TransferMgt.SetServiceOptions(OrderKind,'',UpdateOrderAmount,OrderAmount,InstScheme);
              TransferMgt.SetValidateRateCode(ValidateRateCode);  //db, 20-05-14: C011364
              TransferMgt.Start;
            END ELSE BEGIN
              TransferCu.SetTransferOptions(
                TransferZeroLines, FALSE,
                FALSE,FALSE,FALSE,FALSE,FALSE,TransferDestination,SettlementMethod,CopyTryOut,CopyFeatures::" ",
                FALSE,FALSE,TRUE);
              TransferCu.SetEstimateOptions("No.",SubEstFilter,EstPartFilter,'',StatusFilter);
              TransferCu.SetServiceOptions(OrderKind,'',UpdateOrderAmount,OrderAmount,InstScheme);
              TransferCu.SetValidateRateCode(ValidateRateCode);  //db, 20-05-14: C011364
              TransferCu.Start;
            END;
          END;
        TransferDestination::Modification:
          IF Converted THEN BEGIN
            TransferMgt.SetTransferOptions(
              TransferZeroLines, FALSE,
              FALSE, FALSE, FALSE, FALSE, FALSE, TransferDestination, SettlementMethod, CopyTryOut, CopyFeatures::" ",
              FALSE, FALSE, TRUE);
            TransferMgt.SetEstimateOptions("No.", SubEstFilter, EstPartFilter, '', StatusFilter);
            TransferMgt.SetServiceOptions(OrderKind, '', UpdateOrderAmount::" ", 0, '');
            TransferMgt.SetValidateRateCode(ValidateRateCode);
            TransferMgt.Start;
          END;
      END;
    END;

    PROCEDURE UpdateEditable@1100525002();
    BEGIN
      TargetFieldsEditable := TransferDestination = TransferDestination::ServOrder;
      OrderKindEditable := TransferDestination IN [TransferDestination::ServOrder, TransferDestination::Modification];
      TransferZeroLinesEditable := TransferDestination IN [TransferDestination::ServOrder, TransferDestination::Modification];
    END;

    PROCEDURE GetOrderAmount@1100409000();
    VAR
      SumLineRec@1100409000 : Record 11012171;
      TryoutQuoteRec@1100409001 : Record 11012758;
    BEGIN
      IF UpdateOrderAmount = UpdateOrderAmount::TryOutQuote THEN BEGIN
        IF TryoutQuoteRec.GET(TryoutQuote) THEN BEGIN
          OrderAmount := TryoutQuoteRec."Offered Amount (LCY)";
          InstScheme := TryoutQuoteRec."Installment Scheme Service";
        END;
      END;
    END;

    BEGIN
    END.
  }
}

