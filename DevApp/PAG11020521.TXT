OBJECT Page 11020521 Plant Request Subform
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Lines;
    SourceTable=Table11020521;
    DelayedInsert=Yes;
    PageType=ListPart;
    AutoSplitKey=Yes;
    OnInit=BEGIN
             "Comment CP OrderEnable" := TRUE;
             "Rate CodeVisible" := TRUE;
             FromRateCodeVisible := TRUE;
             "Comment CP OrderVisible" := TRUE;
             ItemNoVisible := TRUE;
           END;

    OnOpenPage=VAR
                 LicensePlantExtendedCU@1100525000 : Codeunit 11012579;
               BEGIN
                 PlantSetupRec.GET;
                 "Rate CodeVisible" := (PlantSetupRec."Rate Codes");
                 IF NOT PlantSetupRec."Rate Codes" THEN
                   FromRateCodeVisible := FALSE;

                 IF (NOT PlantSetupRec."Comment CP Order") THEN BEGIN
                   "Comment CP OrderEnable" := FALSE;
                   "Comment CP OrderVisible" := FALSE;
                 END;

                 IF NOT LicensePlantExtendedCU.LicenseTablePlantItem(FALSE,11020521) THEN  //DP00267
                   ItemNoVisible := FALSE;
               END;

    OnAfterGetRecord=BEGIN
                       GetItemInventoryLocationHideVa := FALSE;
                       "GetStockQuantity()HideValue" := FALSE;
                       IF (NOT "Comment CP OrderEnable") THEN
                         "Comment CP OrderVisible" := FALSE;
                       OnAfterGetCurrRec;
                       GetStockQuantityOnFormat(FORMAT(GetStockQuantity()));
                       GetItemInventoryLocationOnForm(FORMAT(GetItemInventoryLocation()));
                       UpdateEditable;
                     END;

    OnNewRecord=BEGIN
                  UpdateAfterAddLinkedPlant := FALSE;  //*01-07-2010
                  OnAfterGetCurrRec;
                  UpdateEditable;
                END;

    OnInsertRecord=BEGIN
                     //AddStandardItemOnInsertRecord(BelowxRec);  //*01-07-2010.o
                     AddLinkedPlantTypeStndItemMgt.InsertOnPlantRequest(Rec, 0);  //*01-07-2010  0=Insert  (As in subform PO, F11012562)
                   END;

    OnModifyRecord=BEGIN
                     IF AddLinkedPlantTypeStndItemMgt.InsertOnPlantRequest(Rec, 1) THEN  //*01-07-2010  1=Modify
                       UpdateAfterAddLinkedPlant := TRUE;  //* Sometimes the form is not updated after Modify, therefore this is done
                                                           //* in 'OnAfterGetCurrRecord'. Because 'CurrPage.UPDATE' not allowed in OnModify!.
                   END;

    ActionList=ACTIONS
    {
      { 1210190001;  ;ActionContainer;
                      CaptionML=ENU=Functions;
                      ActionContainerType=ActionItems }
      { 1210190003;1 ;Action    ;
                      ShortCutKey=Shift+Ctrl+S;
                      CaptionML=ENU=Explode &Set;
                      Image=ExplodeBOM;
                      OnAction=BEGIN
                                   ExplodeSetLines();
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 1100485000;2;Field  ;
                SourceExpr=Type;
                OnValidate=BEGIN
                             UpdateEditable;
                           END;
                            }

    { 1100485022;2;Field  ;
                SourceExpr="Set Code";
                Visible=FALSE;
                Editable="Set CodeEditable";
                OnValidate=BEGIN
                             UpdateEditable;
                           END;

                OnLookup=VAR
                           PlantSet@1100525000 : Record 11012587;
                         BEGIN
                           PlantSet.FILTERGROUP(9);
                           PlantSet.SETRANGE("Order via Plant Request", TRUE);
                           PlantSet.FILTERGROUP(0);
                           PlantSet.Code := "Set Code";
                           IF PAGE.RUNMODAL(0, PlantSet) = ACTION::LookupOK THEN
                             VALIDATE("Set Code", PlantSet.Code);
                         END;
                          }

    { 1100485002;2;Field  ;
                SourceExpr="Plant Type";
                Editable="Plant TypeEditable";
                OnValidate=BEGIN
                             UpdateEditable;
                           END;

                OnLookup=BEGIN
                           //LookupPlantType();  //*C-028869.o
                           LookupPlantType(Text);  //*C-028869.n
                           UpdateEditable;
                         END;

                OnAssistEdit=BEGIN
                               IF Type = Type::Plant THEN
                                 LookupPlantInventory(1);
                             END;
                              }

    { 1100485004;2;Field  ;
                SourceExpr="Plant No.";
                Editable="Plant NoEditable";
                OnAssistEdit=BEGIN
                               IF Type = Type::Plant THEN
                                 LookupPlantInventory(2);
                             END;
                              }

    { 1100485006;2;Field  ;
                SourceExpr="Item No.";
                Visible=ItemNoVisible;
                OnLookup=VAR
                           Item@1100525000 : Record 27;
                         BEGIN
                           Item.FILTERGROUP(9);
                           Item.SETRANGE("Order via Plant Request", TRUE);
                           Item.FILTERGROUP(0);
                           Item."No." := "Item No.";
                           IF PAGE.RUNMODAL(0, Item) = ACTION::LookupOK THEN
                             VALIDATE("Item No.", Item."No.");
                         END;
                          }

    { 1100485008;2;Field  ;
                SourceExpr=Description }

    { 1100525004;2;Field  ;
                SourceExpr="Unit Price" }

    { 1100485010;2;Field  ;
                SourceExpr=Bulk }

    { 1100525005;2;Field  ;
                SourceExpr="Plant Category";
                Visible=FALSE }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Plant Category Description;
                SourceExpr=GetPlantCategoryDescription();
                Visible=FALSE }

    { 1100485016;2;Field  ;
                CaptionML=ENU=External;
                SourceExpr=GetExternal() }

    { 1100525002;2;Field  ;
                SourceExpr="From Rate Code (Other Transf.)";
                Visible=FromRateCodeVisible }

    { 1100485014;2;Field  ;
                SourceExpr="Rate Code";
                Visible="Rate CodeVisible" }

    { 1210190004;2;Field  ;
                SourceExpr="Location Code";
                Visible=FALSE }

    { 1100525000;2;Field  ;
                SourceExpr=Element;
                Visible=FALSE }

    { 1100485020;2;Field  ;
                SourceExpr="Expected return on" }

    { 1100485012;2;Field  ;
                SourceExpr=Quantity;
                Editable=QuantityEditable }

    { 1100530000;2;Field  ;
                CaptionML=ENU=Unit of Measure;
                SourceExpr=GetUnitOfMeasureCode() }

    { 1210190000;2;Field  ;
                CaptionML=ENU=Inventory;
                SourceExpr=GetStockQuantity();
                Visible=FALSE;
                HideValue="GetStockQuantity()HideValue" }

    { 1100525001;2;Field  ;
                CaptionML=ENU=Available Plant Type on Depot;
                BlankZero=Yes;
                SourceExpr=CalcPlantTypeAvailable();
                Visible=FALSE }

    { 1210190006;2;Field  ;
                CaptionML=ENU=Item Inventory Location;
                SourceExpr=GetItemInventoryLocation();
                Visible=FALSE;
                HideValue=GetItemInventoryLocationHideVa }

    { 1210190002;2;Field  ;
                CaptionML=ENU=Open Order;
                SourceExpr=GetOpenPlantOrderLineQuantity();
                Visible=FALSE;
                OnDrillDown=BEGIN
                              DrillDownOpenPlantOrderLineQty();
                            END;
                             }

    { 1100525003;2;Field  ;
                CaptionML=ENU=Rental Rate;
                BlankZero=Yes;
                SourceExpr=GetRentalRate();
                AutoFormatType=2;
                Visible=FALSE }

    { 1100485018;2;Field  ;
                SourceExpr="Comment CP Order";
                Visible="Comment CP OrderVisible";
                Enabled="Comment CP OrderEnable" }

  }
  CODE
  {
    VAR
      PlantSetupRec@1100485000 : Record 11012550;
      PlantReqRec@1100485001 : Record 11020520;
      AddLinkedPlantTypeStndItemMgt@1100525001 : Codeunit 11012583;
      UpdateAfterAddLinkedPlant@1100525000 : Boolean;
      PlantListLastPlantType@1210190000 : Code[20];
      "Comment CP OrderVisible"@19005773 : Boolean INDATASET;
      "Rate CodeVisible"@19062503 : Boolean INDATASET;
      FromRateCodeVisible@1100525003 : Boolean INDATASET;
      "Comment CP OrderEnable"@19076467 : Boolean INDATASET;
      "GetStockQuantity()HideValue"@19031331 : Boolean INDATASET;
      GetItemInventoryLocationHideVa@19045862 : Boolean INDATASET;
      "Set CodeEditable"@1100409000 : Boolean INDATASET;
      "Plant TypeEditable"@1100409001 : Boolean INDATASET;
      "Plant NoEditable"@1100409002 : Boolean INDATASET;
      QuantityEditable@1100409003 : Boolean INDATASET;
      ItemNoVisible@1100525002 : Boolean INDATASET;

    PROCEDURE GetExternal@1100485001() : Boolean;
    VAR
      lvPlantTypeRec@1100485000 : Record 11012551;
      lvPlantNoRec@1100485001 : Record 11012552;
    BEGIN
      IF (Type <> Type::Plant) OR ("Plant Type" = '') THEN
        EXIT(FALSE);

      IF ("Plant No." = '') THEN BEGIN
        IF lvPlantTypeRec.GET("Plant Type") THEN
          EXIT(lvPlantTypeRec.External);
      END ELSE BEGIN
        IF lvPlantNoRec.GET("Plant Type", "Plant No.") THEN
          EXIT(lvPlantNoRec.External);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE LookupPlantType@1100525001(PlantType@1210190000 : Code[20]);
    VAR
      PlantTypeRec@1100525000 : Record 11012551;
      TmpPlantTypeRec@1100525002 : TEMPORARY Record 11012551;
      MultiCopyMgt@1100525003 : Codeunit 11012068;
      PlantTypeList@1100525001 : Page 11012552;
      FormLookupOK@1210190001 : Boolean;
    BEGIN
      IF NOT PlantReqRec.GET("Plant Request No.") THEN
        EXIT;
      IF (Type <> Type::Plant) THEN
        EXIT;

      PlantTypeRec.FILTERGROUP(9);
      PlantTypeRec.SETRANGE("Order via Plant Request",TRUE);
      PlantTypeRec.FILTERGROUP(0);
      PlantTypeList.SETTABLEVIEW(PlantTypeRec);

      //PlantTypeRec.Code := "Plant Type";  //*C-028869.o
      //*C-028869.sn
      IF PlantType = '' THEN
        PlantTypeRec.Code := PlantListLastPlantType
      ELSE
        PlantTypeRec.Code := PlantType;
      //*C-028869.en
      PlantTypeList.SETRECORD(PlantTypeRec);
      IF (PlantReqRec.Status <= PlantReqRec.Status::Requested) AND (Type = Type::Plant) THEN BEGIN
        PlantTypeList.LOOKUPMODE(TRUE);
        PlantTypeList.SetMultiCopyAllowed(TRUE);
      END;
      //IF PlantTypeList.RUNMODAL = ACTION::LookupOK THEN BEGIN  //*C-028869.o
      //  PlantTypeList.GETRECORD(PlantTypeRec);                 //*C-028869.o
      //*C-028869.sn
      FormLookupOK := (PlantTypeList.RUNMODAL = ACTION::LookupOK);
      PlantTypeList.GETRECORD(PlantTypeRec);
      PlantListLastPlantType := PlantTypeRec.Code;
      IF FormLookupOK THEN BEGIN
      //*C-028869.en
        VALIDATE("Plant Type", PlantTypeRec.Code);
      END ELSE BEGIN
        IF PlantTypeList.GetMultiCopyRec(TmpPlantTypeRec) THEN BEGIN
          MultiCopyMgt.CopyPlantTypeToPlantRequesLine(TmpPlantTypeRec, PlantReqRec, "Line No.");
          CurrPage.UPDATE(TRUE);
        END;
      END;
    END;

    PROCEDURE LookupPlantInventory@1100485000(ILevel@1100485003 : Integer);
    VAR
      lvInventoryRec@1100485001 : Record 11012555;
      lvInventoryPage@1100485000 : Page 11012559;
      lvDetails@1100485002 : 'InventEntry,PlantType,PlantNo,RateCode';
    BEGIN
      //* Level: 1-Plant Type, 2-Plant No.
      IF NOT PlantReqRec.GET("Plant Request No.") THEN
        EXIT;
      IF (Type <> Type::Plant) THEN
        EXIT;

      lvInventoryRec.FILTERGROUP(9);
      lvInventoryRec.SETRANGE("Order via Plant Request",TRUE);
      lvInventoryRec.FILTERGROUP(0);
      lvInventoryRec.SETRANGE(Removed,FALSE);
      lvInventoryRec.SETRANGE(Location, PlantReqRec."From Location");
      IF (ILevel = 2) THEN
        lvInventoryRec.SETRANGE("Plant Type", "Plant Type");
      lvInventoryRec.Removed := FALSE;
      lvInventoryRec.Location :=  PlantReqRec."From Location";
      lvInventoryRec."Plant Type" := "Plant Type";
      lvInventoryRec."Plant No." := "Plant No.";
      lvInventoryPage.SetDetailSelection(lvDetails::PlantNo);
      lvInventoryPage.SETTABLEVIEW(lvInventoryRec);
      lvInventoryPage.SETRECORD(lvInventoryRec);
      lvInventoryPage.LOOKUPMODE := TRUE;
      IF lvInventoryPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
        lvInventoryPage.GETRECORD(lvInventoryRec);
        lvInventoryPage.GetDetailSelection(lvDetails);
        IF (ILevel = 1) THEN
          VALIDATE("Plant Type",lvInventoryRec."Plant Type");
        IF ((ILevel = 1) OR (ILevel = 2)) AND (lvDetails <> lvDetails::PlantType) THEN BEGIN
          IF lvInventoryRec."Plant No." = '0' THEN
            lvInventoryRec."Plant No." := '';  //* Op materieelaanvraag wordt niet gewerkt met '0'
          VALIDATE("Plant No.",lvInventoryRec."Plant No.");
        END;
      END;
    END;

    PROCEDURE ExplodeSetLines@1100485002();
    BEGIN
      ExplodeSet(Rec);
      CLEARMARKS;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRec@19077479();
    BEGIN
      xRec := Rec;
      IF UpdateAfterAddLinkedPlant THEN BEGIN  //*01-07-2010  (As in subform PO, F11012562)
       UpdateAfterAddLinkedPlant := FALSE;  //* First reset then update form!
       CurrPage.UPDATE(FALSE);
      END;
      IF NOT PlantReqRec.GET("Plant Request No.") THEN
        PlantReqRec.INIT;
      FromRateCodeVisible := (PlantSetupRec."Rate Codes" AND (PlantReqRec.Type = PlantReqRec.Type::"Other Transfers"));
    END;

    LOCAL PROCEDURE RateCodeOnAfterInput@19044879(VAR Text@19044880 : Text[1024]);
    VAR
      PlantRateCodeRec@1100525000 : Record 11020502;
    BEGIN
      IF PlantReqRec.GET("Plant Request No.") THEN BEGIN
        IF PlantReqRec.Type = PlantReqRec.Type::Removal THEN
          PlantRateCodeRec.ExpandRateCodeOnInput(Text, PlantReqRec."From Location", '')
        ELSE
          PlantRateCodeRec.ExpandRateCodeOnInput(Text, PlantReqRec."To Location", '');
      END;
    END;

    LOCAL PROCEDURE GetStockQuantityOnFormat@19036905(Text@19003996 : Text[1024]);
    BEGIN
      IF NOT PlantReqRec.GET("Plant Request No.") THEN
        Text := ''
      ELSE
        IF PlantReqRec.Type <> PlantReqRec.Type::Arrival THEN
          "GetStockQuantity()HideValue" := TRUE;
    END;

    LOCAL PROCEDURE GetItemInventoryLocationOnForm@19055529(Text@19009914 : Text[1024]);
    BEGIN
      IF (Type <> Type::Item) OR ("Location Code" = '') THEN BEGIN
        GetItemInventoryLocationHideVa := TRUE;
        EXIT;
      END;
      IF NOT PlantReqRec.GET("Plant Request No.") THEN
        Text := ''
      ELSE
        IF PlantReqRec.Type <> PlantReqRec.Type::Arrival THEN
          GetItemInventoryLocationHideVa := TRUE;
    END;

    PROCEDURE UpdateEditable@1100409000();
    BEGIN
      "Set CodeEditable" := ((Type = Type::Plant) AND ("Plant Type" = ''));
      "Plant TypeEditable" := ((Type = Type::Plant) AND ("Set Code" = ''));
      "Plant NoEditable" := (((Type = Type::Plant) AND ("Set Code" = '')) OR (Type = Type::Text)); //DP00241.c (28876)
      QuantityEditable := (Type IN [Type::Plant, Type::Item]);
    END;

    BEGIN
    END.
  }
}

