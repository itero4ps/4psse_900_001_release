OBJECT Page 11020528 Plant Transport Ride
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Transport Ride;
    SourceTable=Table11020517;
    SourceTableView=WHERE(Posted=CONST(No));
    PageType=Document;
    PromotedActionCategoriesML=ENU=New,Process,Report,Ride,Functions;
    OnInit=BEGIN
             PurchaseDataEditable := TRUE;
             BeforeRelease := TRUE;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 PlantSetupRec.GET;
                 PlantSetupRec.TESTFIELD("Transport Orders");
               END;

    OnAfterGetRecord=BEGIN
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                  SetEditable();
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100485021;1 ;ActionGroup;
                      CaptionML=ENU=Ride }
      { 1100525007;2 ;Action    ;
                      CaptionML=ENU=Transport Orders;
                      Promoted=Yes;
                      Image=ShipmentLines;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 TransportRideLine@1100409000 : Record 11020518;
                               BEGIN
                                 TransportRideLine.FILTERGROUP(2);
                                 TransportRideLine.SETRANGE("Ride No.", "No.");
                                 TransportRideLine.FILTERGROUP(0);
                                 PAGE.RUNMODAL(PAGE::"Plant Transport Ride SF", TransportRideLine);
                               END;
                                }
      { 1210190001;2 ;Action    ;
                      CaptionML=ENU=Documents;
                      Image=Documents;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 RecRef@1210190001 : RecordRef;
                                 DocumentFilters@1210190000 : Codeunit 11012432;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100485024;1 ;ActionGroup;
                      CaptionML=ENU=Functions }
      { 1100485025;2 ;Action    ;
                      CaptionML=ENU=Distribute Transport Amount;
                      Image=ContractPayment;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 DistributeTransportCost();
                               END;
                                }
      { 1100525020;2 ;Action    ;
                      CaptionML=ENU=Create &Transport Orders;
                      Image=Shipment;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 lvTransFuncCU@1100525000 : Codeunit 11020504;
                                 lvCounter@1100525004 : Decimal;
                               BEGIN
                                 TESTFIELD("No.");
                                 lvCounter := lvTransFuncCU.RunCreateTransOrderFromRidePOs(Rec);
                                 IF lvCounter >= 0 THEN  //* '-1' indicator exit on confirm=No
                                 MESSAGE(Text004, (lvCounter DIV 1), ((lvCounter MOD 1)*10000));
                               END;
                                }
      { 1100525024;2 ;Action    ;
                      CaptionML=ENU=Create Purchase Order Transport Ride;
                      Image=MakeOrder;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 lvTransOrderFuncCU@1100525000 : Codeunit 11020504;
                               BEGIN
                                 TESTFIELD("No.");
                                 TESTFIELD(Date);
                                 TESTFIELD("Shipping Agent");
                                 TESTFIELD("Means of Transport");
                                 TESTFIELD("Purchase Order", '');

                                 lvTransOrderFuncCU.RunCreateTransportPurchOrder('', "No.", "Shipping Agent", Date, 2);  //* 1=Ride-Cost
                               END;
                                }
      { 1100485034;2 ;Action    ;
                      CaptionML=ENU=Create Purchase Order Transport Order;
                      Image=MakeOrder;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 lvTransOrderFuncCU@1100485000 : Codeunit 11020504;
                               BEGIN
                                 TESTFIELD("No.");
                                 TESTFIELD(Date);
                                 TESTFIELD("Shipping Agent");
                                 TESTFIELD("Means of Transport");
                                 TESTFIELD("Purchase Order", '');

                                 lvTransOrderFuncCU.RunCreateTransportPurchOrder('', "No.", "Shipping Agent", Date, 1);  //* 1=TO-Cost
                               END;
                                }
      { 1100485028;1 ;ActionGroup;
                      CaptionML=ENU=Posting }
      { 1100485029;2 ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=Release;
                      Promoted=Yes;
                      Image=Approve;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvPostTransportOrderCU@1100485000 : Codeunit 11020501;
                               BEGIN
                                 TESTFIELD("No.");
                                 IF NOT CONFIRM(Text000,FALSE,TABLECAPTION) THEN
                                   EXIT;

                                 lvPostTransportOrderCU.RunReleaseTransportRide(Rec);
                               END;
                                }
      { 1100485030;2 ;Action    ;
                      CaptionML=ENU=Reset Release;
                      Image=ResetStatus;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvPostTransportOrderCU@1100485000 : Codeunit 11020501;
                               BEGIN
                                 IF NOT CONFIRM(Text001,FALSE,TABLECAPTION) THEN
                                   EXIT;

                                 lvPostTransportOrderCU.RunResetReleaseTransportRide(Rec);
                               END;
                                }
      { 1100485033;2 ;Action    ;
                      ShortCutKey=F9;
                      CaptionML=ENU=Post Transport Cost;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Post;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvPostTransportYNCU@1100485000 : Codeunit 11020502;
                               BEGIN
                                 //* Moet altijd alles in 1 keer van 1 rit. Op want transportkosten worden verdeeld over de TO's, pas boeken als alle akkoord.
                                 //* Kan ook niet anderds want op rit kunnen/mogen alleen niet geboekt TO staan, geboekte TO's staan in een andere tabel.
                                 TESTFIELD("No.");
                                 lvPostTransportYNCU.RunPostTransportRideYN(Rec);
                               END;
                                }
      { 1100525001;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1100525008;1 ;Action    ;
                      CaptionML=ENU=Ride;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Print;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 lvPrintDocumentCU@1100525000 : Codeunit 229;
                               BEGIN
                                 lvPrintDocumentCU.PrintPlantTransportRideList(Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100485000;1;Group  ;
                CaptionML=ENU=General }

    { 1100485001;2;Field  ;
                SourceExpr="No.";
                Importance=Promoted;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 1100485003;2;Field  ;
                SourceExpr=Date;
                Editable=BeforeRelease }

    { 1100485005;2;Field  ;
                SourceExpr="Shipping Agent";
                Editable=BeforeRelease }

    { 1100485007;2;Field  ;
                DrillDown=No;
                SourceExpr="Shipping Agent Name";
                Importance=Additional }

    { 1100485011;2;Field  ;
                SourceExpr="Means of Transport";
                Editable=BeforeRelease }

    { 1100485013;2;Field  ;
                DrillDown=No;
                SourceExpr="Means of Transport Description";
                Importance=Additional }

    { 1100525000;2;Field  ;
                SourceExpr=Driver }

    { 1100485018;2;Field  ;
                SourceExpr=Status;
                Importance=Promoted }

    { 1100485026;2;Field  ;
                SourceExpr=Printed }

    { 1100485009;2;Field  ;
                SourceExpr="Transport Cost";
                Importance=Additional }

    { 1100485015;2;Field  ;
                SourceExpr="Load/Unload Cost";
                Importance=Additional }

    { 1100525005;2;Field  ;
                CaptionML=ENU=Order Amount;
                SourceExpr="Transport Cost"+"Load/Unload Cost";
                Importance=Additional }

    { 1100526000;2;Field  ;
                SourceExpr="Department Code";
                OnValidate=BEGIN
                             //**4PS Generated Code. Do Not Change.sn03
                             DPA_ChkDepartmentCodeAllowed(DPA_IsHardFilter);
                             //**4PS Generated Code.en03
                           END;
                            }

    { 1100525004;1;Part   ;
                Name=POLineSubfrm;
                SubPageLink=Ride No.=FIELD(No.);
                PagePartID=Page11020530 }

    { 1904412501;1;Group  ;
                CaptionML=ENU=Purchase }

    { 1100525009;2;Field  ;
                SourceExpr=Quantity;
                Importance=Promoted;
                Editable=PurchaseDataEditable }

    { 1100525012;2;Field  ;
                SourceExpr="Unit of Measure";
                Importance=Promoted;
                Editable=PurchaseDataEditable }

    { 1100525014;2;Field  ;
                SourceExpr="Purchase Price";
                Editable=PurchaseDataEditable }

    { 1100525016;2;Field  ;
                SourceExpr="Purchase Amount";
                Editable=PurchaseDataEditable }

    { 1100525022;2;Field  ;
                SourceExpr="Purchase Order" }

    { 1210190101;0;Container;
                ContainerType=FactBoxArea }

    { 1100529900;1;Part   ;
                Name=RegisterExternalDocumentFB;
                PagePartID=Page11125053;
                PartType=Page }

    { 1210190002;1;Part   ;
                SubPageLink=No.=FIELD(Ride No.);
                PagePartID=Page11130332;
                ProviderID=1100525004;
                PartType=Page }

    { 1210190100;1;Part   ;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page11130334;
                PartType=Page }

    { 1100525003;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1100525002;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1100485001 : TextConst 'ENU=Do you want to release the %1?';
      Text001@1100485000 : TextConst 'ENU=Do you want to reset released?';
      PlantSetupRec@1100485002 : Record 11012550;
      Text002@1100525000 : TextConst 'ENU=Create transport order(s)?';
      Text003@1100525002 : TextConst 'ENU=Already transport orders present on the ride, if possible/allowed then add plant order to these transport orders?';
      Text004@1100525001 : TextConst 'ENU=%1 ride plantorder line(s) processed, %2 transport order(s) created';
      DPA_IsHardFilter@1100000999 : Boolean;
      BeforeRelease@1210190000 : Boolean INDATASET;
      PurchaseDataEditable@1210190001 : Boolean INDATASET;

    PROCEDURE DistributeTransportCost@1100485000();
    VAR
      lvRideLineRec@1100485006 : Record 11020518;
      lvTransOrderRec@1100485027 : Record 11020505;
      lvTransCostLineRec@1100485012 : Record 11020506;
      lvDefOptNo@1100485025 : Integer;
      lvDefaultOptNo@1100485004 : Integer;
      lvOptNo@1100485000 : Integer;
      lvText001@1100485001 : TextConst 'ENU=Transport Amount,Load/Unload Amount,Both';
      lvText002@1100485002 : TextConst 'ENU=Divide Transport Amount?';
      lvText003@1100485003 : TextConst 'ENU=Divide Loadi/Unload Amount';
      lvText004@1100485005 : TextConst 'ENU=No Transport Amount and/or Load/Unload Amount filled, distribute not possible.';
      lvMaxTranTOLine@1100485024 : Integer;
      lvMaxLoadTOLine@1100485023 : Integer;
      lvTotTranAmt@1100485007 : Decimal;
      lvTotLoadAmt@1100485008 : Decimal;
      lvTranAmtTO@1100485010 : Decimal;
      lvLoadAmtTO@1100485009 : Decimal;
      lvText005@1100485011 : TextConst 'ENU=No Tranport Orders present.';
      lvText006@1100485013 : TextConst 'ENU=Transport Cost (%1) of Transport Order ''%2'' must be greater than zero, distribute not possible.';
      lvText007@1100485014 : TextConst 'ENU=Load/Unload Cost (%1) of Transport Order ''%2'' must be greater than zero, distribute not possible.';
      lvTranAmtSubTot@1100485016 : Decimal;
      lvLoadAmtSubTot@1100485015 : Decimal;
      lvTranAmtSubMod@1100485018 : Decimal;
      lvLoadAmtSubMod@1100485017 : Decimal;
      lvMaxTranAmt@1100485019 : Decimal;
      lvMaxLoadAmt@1100485020 : Decimal;
      lvMaxTranTO@1100485021 : Code[20];
      lvMaxLoadTO@1100485022 : Code[20];
      lvText008@1100485026 : TextConst 'ENU=The bedragen are alreadydistributed.';
      lvText009@1100525000 : TextConst 'ENU=Posted transport order(s) present, distribute not allowed anymore.';
    BEGIN
      TESTFIELD("No.");
      IF "Transport Cost" <> 0 THEN
        lvDefOptNo := lvDefOptNo + 1;
      IF "Load/Unload Cost" <> 0 THEN
        lvDefOptNo := lvDefOptNo + 2;
      IF lvDefOptNo = 0 THEN
        ERROR(lvText004);

      lvRideLineRec.SETRANGE("Ride No.", "No.");
      lvRideLineRec.SETRANGE("Posted (TO)", TRUE);
      IF lvRideLineRec.FINDFIRST THEN
        ERROR(lvText009);

      lvDefaultOptNo := lvDefOptNo;
      IF lvDefOptNo IN [1,3] THEN BEGIN
        lvTotTranAmt := lvRideLineRec.GetTotalRideOrderCost("No.",1);
        IF "Transport Cost" = lvTotTranAmt THEN
          lvDefaultOptNo := lvDefaultOptNo - 1;
      END;
      IF lvDefOptNo IN [2,3] THEN BEGIN
        lvTotLoadAmt := lvRideLineRec.GetTotalRideOrderCost("No.",2);
        IF "Load/Unload Cost" = lvTotLoadAmt THEN
          lvDefaultOptNo := lvDefaultOptNo - 2;
      END;

      CASE lvDefaultOptNo OF
        1:
          IF CONFIRM(lvText002, TRUE) THEN
            lvOptNo := 1;
        2:
          IF CONFIRM(lvText003, TRUE) THEN
            lvOptNo := 2;
        3:
          lvOptNo := STRMENU(lvText001, lvDefaultOptNo);
        ELSE
          ERROR(lvText008);
      END;
      IF lvOptNo = 0 THEN
        EXIT;

      lvRideLineRec.RESET;
      lvRideLineRec.SETRANGE("Ride No.", "No.");
      IF NOT lvRideLineRec.FINDSET(FALSE,FALSE) THEN
        ERROR(lvText005)
      ELSE BEGIN
        IF lvOptNo IN [1,3] THEN
          lvTotTranAmt := lvRideLineRec.GetTotalRideOrderCost("No.",1);
        IF lvOptNo IN [2,3] THEN
          lvTotLoadAmt := lvRideLineRec.GetTotalRideOrderCost("No.",2);
        REPEAT
          lvTransOrderRec.GET(lvRideLineRec."Transport Order No.");
          lvTransOrderRec.CALCFIELDS("Invoice with Transport Order");
          IF lvTransOrderRec."Invoice with Transport Order" = '' THEN BEGIN  //* Gekoppeld TO's overslaan, hierop staan geen kosten
            IF lvOptNo IN [1,3] THEN BEGIN
              lvTranAmtTO := lvRideLineRec.GetTransportOrderCost(lvRideLineRec."Transport Order No.",1);
              //* Uitgangspunt is dat men deze over alle TO's wil verdelen, als bij een TO nog niet heeft ingegeven
              //* dan niet verdelen over de overige TO's. Als men dat zou willen moet men dat handmatig op de
              //* afzonderlijke TO's doen, kan dan niet automatisch. Zoals besproken in overleg 4PS/Heras (27-10-2007).
              IF lvTranAmtTO <= 0 THEN
                ERROR(lvText006, lvTranAmtTO, lvRideLineRec."Transport Order No.");
            END;
            IF lvOptNo IN [2,3] THEN BEGIN
              lvLoadAmtTO := lvRideLineRec.GetTransportOrderCost(lvRideLineRec."Transport Order No.",2);
              IF lvLoadAmtTO <= 0 THEN  //* Opmerking idem zoals bij transportkosten
                ERROR(lvText007, lvLoadAmtTO, lvRideLineRec."Transport Order No.");
            END;
            lvTransCostLineRec.SETRANGE("Transport Order No.", lvRideLineRec."Transport Order No.");
            CASE lvOptNo OF
              1: lvTransCostLineRec.SETRANGE(Type, lvTransCostLineRec.Type::Transport);
              2: lvTransCostLineRec.SETRANGE(Type, lvTransCostLineRec.Type::"Load/Unload");
              3: lvTransCostLineRec.SETFILTER(Type, '<>%1', lvTransCostLineRec.Type::Text);
            END;
            IF lvTransCostLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
              REPEAT
                IF lvTransCostLineRec.Amount <> 0 THEN BEGIN
                  CASE lvTransCostLineRec.Type OF
                    lvTransCostLineRec.Type::Transport:
                      BEGIN
                        lvTranAmtSubTot := lvTranAmtSubTot + lvTransCostLineRec.Amount;
                        lvTransCostLineRec.Amount := (("Transport Cost" / lvTotTranAmt) * lvTranAmtSubTot) - lvTranAmtSubMod;
                        lvTransCostLineRec.VALIDATE(Amount, ROUND(lvTransCostLineRec.Amount, 0.01));
                        lvTranAmtSubMod := lvTranAmtSubMod + lvTransCostLineRec.Amount;
                        IF lvTransCostLineRec.Amount >= lvMaxTranAmt THEN BEGIN
                          lvMaxTranAmt := lvTransCostLineRec.Amount;
                          lvMaxTranTO := lvTransCostLineRec."Transport Order No.";
                          lvMaxTranTOLine := lvTransCostLineRec."Line No.";
                        END;
                      END;
                    lvTransCostLineRec.Type::"Load/Unload":
                      BEGIN
                        lvLoadAmtSubTot := lvLoadAmtSubTot + lvTransCostLineRec.Amount;
                        lvTransCostLineRec.Amount := (("Load/Unload Cost" / lvTotLoadAmt) * lvLoadAmtSubTot) - lvLoadAmtSubMod;
                        lvTransCostLineRec.VALIDATE(Amount, ROUND(lvTransCostLineRec.Amount, 0.01));
                        lvLoadAmtSubMod := lvLoadAmtSubMod + lvTransCostLineRec.Amount;
                        IF lvTransCostLineRec.Amount >= lvMaxLoadAmt THEN BEGIN
                          lvMaxLoadAmt := lvTransCostLineRec.Amount;
                          lvMaxLoadTO := lvTransCostLineRec."Transport Order No.";
                          lvMaxLoadTOLine := lvTransCostLineRec."Line No.";
                        END;
                      END;
                  END;
                  lvTransCostLineRec.MODIFY;
                END;
              UNTIL lvTransCostLineRec.NEXT = 0;
            END;
          END;
        UNTIL lvRideLineRec.NEXT = 0;
        IF (lvOptNo IN [1,3]) AND ("Transport Cost" <> lvTranAmtSubMod) AND (lvMaxTranTO <> '') THEN BEGIN
          lvTransCostLineRec.GET(lvMaxTranTO, lvMaxTranTOLine);
          lvTransCostLineRec.Amount := lvTransCostLineRec.Amount + "Transport Cost"  - lvTranAmtSubMod;
          lvTransCostLineRec.VALIDATE(Amount, ROUND(lvTransCostLineRec.Amount, 0.01));
          lvTransCostLineRec.MODIFY;
        END;
        IF (lvOptNo IN [2,3]) AND ("Load/Unload Cost" <> lvLoadAmtSubMod) AND (lvMaxLoadTO <> '') THEN BEGIN
          lvTransCostLineRec.GET(lvMaxLoadTO, lvMaxLoadTOLine);
          lvTransCostLineRec.Amount := lvTransCostLineRec.Amount + "Load/Unload Cost"  - lvLoadAmtSubMod;
          lvTransCostLineRec.VALIDATE(Amount, ROUND(lvTransCostLineRec.Amount, 0.01));
          lvTransCostLineRec.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    VAR
      RecRef@1100529900 : RecordRef;
    BEGIN
      xRec := Rec;
      SetEditable();
      RecRef.GETTABLE(Rec);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetRecordReference(RecRef);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetByCompany(TRUE);
      CurrPage.RegisterExternalDocumentFB.PAGE.SetDepartmentCode('');
    END;

    PROCEDURE SetEditable@1100485001();
    BEGIN
      BeforeRelease := (Status < Status::Released);
      //* Transport- en laad-/loskosten mag nog wel als vrijgegeven, zolang TO niet geboekt mogen kosten nog gewijzigd worden.

      CurrPage.POLineSubfrm.PAGE.EDITABLE(Status < Status::Released);
      PurchaseDataEditable := ("Purchase Order" = '');
    END;

    BEGIN
    END.
  }
}

