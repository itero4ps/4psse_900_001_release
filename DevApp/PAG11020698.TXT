OBJECT Page 11020698 Progn. Add. Hours / Contract
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Prognosis Additional Hours per Contract;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    OnInit=BEGIN
             SetDisciplineFilter;
             InitYearNo(0);
           END;

    OnOpenPage=BEGIN
                 MATRIX_MaximumSetLength := 12;
                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                 UpdateMatrixSubForm;
               END;

    ActionList=ACTIONS
    {
      { 1100528606;  ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100528607;1 ;Action    ;
                      CaptionML=ENU=Total Prognosis Additional Hours;
                      RunObject=Page 11020684;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CalculateRemainingUsage;
                      PromotedCategory=Process }
      { 1100528608;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528609;1 ;Action    ;
                      CaptionML=ENU=&Copy Prognosis;
                      Image=Copy;
                      OnAction=VAR
                                 PrognosisDetails@1100528600 : Record 11012884;
                                 CopyPrognosisDetailsREP@1100528601 : Report 11072018;
                               BEGIN
                                 PrognosisDetails.SETRANGE(Type, PrognosisDetails.Type::Workload);
                                 IF ServiceContract."No." <> '' THEN
                                   PrognosisDetails.SETRANGE("Source Code", ServiceContract."No.");
                                 IF ServiceContract."Global Dimension 1 Code" <> '' THEN
                                   PrognosisDetails.SETRANGE("Global Dimension 1 Code", PrognosisDetails."Global Dimension 1 Code");

                                 CopyPrognosisDetailsREP.SetToYear(YearNo);
                                 CopyPrognosisDetailsREP.SetType(PrognosisDetails.Type::Workload);
                                 CopyPrognosisDetailsREP.SETTABLEVIEW(PrognosisDetails);
                                 CopyPrognosisDetailsREP.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528600;;Container;
                ContainerType=ContentArea }

    { 1100528601;1;Group  ;
                CaptionML=ENU=General;
                GroupType=Group }

    { 1100528602;2;Field  ;
                CaptionML=ENU=Service Contract;
                SourceExpr=ServiceContract."No.";
                TableRelation=Service-Contract;
                OnValidate=BEGIN
                             ServiceContract.GET(ServiceContract."No.");
                             SetDisciplineFilter;
                             UpdateMatrixSubForm;
                           END;
                            }

    { 1100528603;2;Field  ;
                CaptionML=ENU=Contract Description;
                SourceExpr=ServiceContract.Description;
                Editable=false }

    { 1100528604;2;Field  ;
                CaptionML=ENU=Year;
                SourceExpr=YearNo;
                OnValidate=BEGIN
                             SetPeriodFilter(YearNo);
                             MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             UpdateMatrixSubForm;
                           END;
                            }

    { 1100528605;1;Part   ;
                Name=MATRIX;
                CaptionML=ENU=Prognosis Additional Hours;
                PagePartID=Page11229228;
                PartType=Page }

  }
  CODE
  {
    VAR
      MATRIX_MatrixRecord@1100528610 : Record 2000000007;
      MATRIX_MatrixRecords@1100528609 : ARRAY [32] OF Record 2000000007;
      MATRIX_MaximumSetLength@1100528608 : Integer;
      MATRIX_PrimKeyRecInCurrSet@1100528607 : Text[1024];
      MATRIX_CaptionSet@1100528606 : ARRAY [32] OF Text[80];
      MATRIX_CaptionRange@1100528605 : Text[250];
      MATRIX_CurrSetLength@1100528604 : Integer;
      MATRIX_Step@1100528603 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn,,,,,FirstRec,LastRec';
      PeriodType@1100528602 : 'Day,Week,Month,Quarter,Year';
      ServiceContract@1100528600 : Record 11012812;
      YearNo@1100528601 : Integer;
      DateFilter@1100528611 : Text;

    PROCEDURE SetPeriodFilter@1100485000(YearNo@1100485000 : Integer);
    BEGIN
      PeriodType := PeriodType::Month;
      DateFilter := STRSUBSTNO('%1..%2', DMY2DATE(1, 1, YearNo), DMY2DATE(31, 12, YearNo));
    END;

    PROCEDURE InitYearNo@1100485001(IYearNo@1100528600 : Integer);
    BEGIN
      IF IYearNo = 0 THEN
        IYearNo := DATE2DMY(WORKDATE,3);
      YearNo := IYearNo;
      SetPeriodFilter(YearNo);
    END;

    PROCEDURE SetContractFilter@1100485002(IServiceContract@1100485000 : Record 11012812);
    BEGIN
      ServiceContract.COPY(IServiceContract);
    END;

    PROCEDURE SetDisciplineFilter@1100528600();
    VAR
      TradeSpeciality@1100528601 : Record 11020285;
      ServiceContractDiscipline@1100528600 : Record 11012881;
      DataSetMarked@1100528602 : Boolean;
    BEGIN
      ServiceContractDiscipline.SETRANGE("Service Contract No.", ServiceContract."No.");
      IF ServiceContractDiscipline.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          TradeSpeciality.SETCURRENTKEY(Discipline);
          TradeSpeciality.SETRANGE(Discipline, ServiceContractDiscipline.Discipline);
          IF TradeSpeciality.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              TradeSpeciality.MARK(TRUE);
              DataSetMarked := TRUE;
            UNTIL TradeSpeciality.NEXT = 0;
          END;
        UNTIL ServiceContractDiscipline.NEXT = 0;
      END;

      //IF DataSetMarked THEN BEGIN
      //  TradeSpeciality.SETRANGE(Discipline);
      //  Rec.COPY(TradeSpeciality);
      //  MARKEDONLY(TRUE);
      //END ELSE BEGIN
      //  CLEARMARKS;
      //  MARKEDONLY(FALSE);
      //END;
    END;

    PROCEDURE MATRIX_GenerateColumnCaptions@1152(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn,,,,,FirstRec,LastRec');
    VAR
      MatrixManagement@1002 : Codeunit 9200;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CLEAR(MATRIX_MatrixRecords);

      MatrixManagement.GeneratePeriodMatrixData(
        MATRIX_SetWanted,
        MATRIX_MaximumSetLength,
        FALSE, // UseNameForCaption
        PeriodType,
        DateFilter,
        MATRIX_PrimKeyRecInCurrSet,
        MATRIX_CaptionSet,
        MATRIX_CaptionRange,
        MATRIX_CurrSetLength,
        MATRIX_MatrixRecords);
    END;

    LOCAL PROCEDURE UpdateMatrixSubForm@7();
    BEGIN
      CurrPage.MATRIX.PAGE.Load(
        MATRIX_CaptionSet,
        MATRIX_MatrixRecords,
        MATRIX_CurrSetLength,
        ServiceContract."No.");
    END;

    BEGIN
    END.
  }
}

