OBJECT Page 11071844 Activities/Occ. Bar Chart
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Activities/Occupation Bar Chart;
    SaveValues=Yes;
    OnInit=BEGIN
             PeriodType := PeriodType::Month;
             NoOfColumns := 24;

             MaintActivitiesVisible := TRUE;
             CallActivitiesVisible := TRUE;
             AddActivitiesVisible := TRUE;
             TryoutActivitiesVisible := TRUE;
             OccupationVisible := TRUE;
             DeltaOccupationVisible := TRUE;

             DetermineMeasurementIndexes;
           END;

    OnOpenPage=BEGIN
                 Date."Period Start" := WORKDATE;
                 PeriodFormManagement.FindDate('=<', Date, PeriodType);
                 BaseDate := Date."Period Start";
               END;

    ActionList=ACTIONS
    {
      { 1100528605;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528607;1 ;Action    ;
                      CaptionML=ENU=Previous;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PeriodFormManagement.FindDate('<', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
      { 1100528606;1 ;Action    ;
                      CaptionML=ENU=Next;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PeriodFormManagement.FindDate('>', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528600;;Container;
                ContainerType=ContentArea }

    { 1100528609;1;Group  ;
                CaptionML=ENU=General;
                GroupType=Group }

    { 1100528610;2;Field  ;
                CaptionML=ENU=Department Filter;
                SourceExpr=DepartmentFilter;
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528611;2;Field  ;
                CaptionML=ENU=Territory Filter;
                SourceExpr=TerritoryFilter;
                TableRelation=Territory.Code;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528612;2;Field  ;
                CaptionML=ENU=Try-out Quote Status Filter;
                SourceExpr=TryoutQuoteStatusFilter;
                TableRelation="Try-out Status".Code WHERE (Type=CONST(Try-out Quote));
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528613;2;Field  ;
                CaptionML=ENU=Discipline Filter;
                SourceExpr=DisciplineFilter;
                TableRelation=Discipline;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528614;2;Field  ;
                CaptionML=ENU=Trade Speciality Filter;
                SourceExpr=TradeSpecFilter;
                OnValidate=BEGIN
                             UpdateChart;
                           END;

                OnLookup=VAR
                           TradeSpeciality@1100528600 : Record 11020285;
                         BEGIN
                           TradeSpeciality.SETFILTER(Discipline, DisciplineFilter);
                           IF PAGE.RUNMODAL(0, TradeSpeciality) = ACTION::LookupOK THEN BEGIN
                             Text := TradeSpeciality.Code;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100528615;2;Field  ;
                CaptionML=ENU=Maintenance Activities;
                SourceExpr=MaintActivitiesVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528620;2;Field  ;
                CaptionML=ENU=Call Activities;
                SourceExpr=CallActivitiesVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528616;2;Field  ;
                CaptionML=ENU=Additional Activities (Prognosis);
                SourceExpr=AddActivitiesVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528617;2;Field  ;
                CaptionML=ENU=Try-out Quote Activities (Prognosis);
                SourceExpr=TryoutActivitiesVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528618;2;Field  ;
                CaptionML=ENU=Occupation;
                SourceExpr=OccupationVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528621;2;Field  ;
                CaptionML=ENU=Source Occupation Prognosis;
                OptionCaptionML=ENU=Employee,Department,Territory;
                SourceExpr=SourceOccupationPrognosis;
                Editable=OccupationVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528619;2;Field  ;
                CaptionML=ENU=Over/Under Capacity;
                SourceExpr=DeltaOccupationVisible;
                Editable=OccupationVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528604;1;Group  ;
                CaptionML=ENU=Chart;
                GroupType=Group }

    { 1100528601;2;Field  ;
                Name=Chart;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

    { 1100528603;1;Group  ;
                CaptionML=ENU=Options;
                GroupType=Group }

    { 1100528608;2;Field  ;
                CaptionML=ENU=View by;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             PeriodFormManagement.FindDate('=<>', Date, PeriodType);
                             UpdateChart;
                           END;
                            }

    { 1100528602;2;Field  ;
                CaptionML=ENU=No. Of Periods;
                SourceExpr=NoOfColumns;
                OnValidate=BEGIN
                             IF NoOfColumns <= 0 THEN
                               ERROR(Text001);
                             UpdateChart;
                           END;
                            }

  }
  CODE
  {
    VAR
      BusinessChartBuffer@1100528600 : Record 485;
      Date@1100528611 : Record 2000000007;
      TmpPrognosisDetails@1100528637 : TEMPORARY Record 11012884;
      TmpServiceContractCtrlBudget@1100528638 : TEMPORARY Record 11071759;
      PeriodFormManagement@1100528610 : Codeunit 359;
      MaintActivitiesIndex@1100528601 : Integer;
      CallActivitiesIndex@1100528633 : Integer;
      AddActivitiesIndex@1100528602 : Integer;
      TryoutActivitiesIndex@1100528603 : Integer;
      OccupationIndex@1100528605 : Integer;
      DeltaOccupationIndex@1100528606 : Integer;
      PeriodType@1100528608 : ',,Month,Quarter,Year';
      BaseDate@1100528607 : Date;
      NoOfColumns@1100528609 : Integer;
      DisciplineFilter@1100528622 : Code[250];
      TradeSpecFilter@1100528621 : Code[250];
      DepartmentFilter@1100528620 : Code[250];
      TerritoryFilter@1100528619 : Code[250];
      TryoutQuoteStatusFilter@1100528618 : Code[250];
      Text000@1100528604 : TextConst 'ENU=Day,Week,Month,Quarter,Year,Period';
      Text001@1100528623 : TextConst 'ENU=No. of Periods must be at least 1';
      MaintActivitiesVisible@1100528624 : Boolean;
      CallActivitiesVisible@1100528635 : Boolean;
      AddActivitiesVisible@1100528625 : Boolean;
      TryoutActivitiesVisible@1100528626 : Boolean;
      OccupationVisible@1100528627 : Boolean;
      DeltaOccupationVisible@1100528628 : Boolean;
      Text002@1100528639 : TextConst 'ENU=Progress: @1@@@@@@@@@@@';
      TextMaintActivities@1100528615 : TextConst 'ENU=Maintenance';
      TextCallActivities@1100528636 : TextConst 'ENU=Calls';
      TextAddActivities@1100528629 : TextConst 'ENU=Additional Activities (Prognosis)';
      TextTryoutActivities@1100528630 : TextConst 'ENU=Try-out Quote Activities (Prognosis)';
      TextOccupation@1100528631 : TextConst 'ENU=Occupation';
      TextDeltaOccupation@1100528632 : TextConst 'ENU=Over/Under Capacity';
      BufferedFromDate@1100528640 : Date;
      SourceOccupationPrognosis@1100528612 : 'Employee,Department,Territory';

    PROCEDURE SetMaintActivitiesFilter@1100528613(IPeriodStart@1100528600 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date."Period Start" := IPeriodStart;
      PeriodFormManagement.FindDate('=', Date, PeriodType);
      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.SETRANGE("Reference Date", Date."Period Start", Date."Period End");
      TmpServiceContractCtrlBudget.SETRANGE("Budget Type", TmpServiceContractCtrlBudget."Budget Type"::Budget);
      TmpServiceContractCtrlBudget.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      TmpServiceContractCtrlBudget.SETFILTER(Discipline, DisciplineFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Trade Speciality", TradeSpecFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Territory Code", TerritoryFilter);
    END;

    PROCEDURE SetCallActivitiesFilter@1100528616(IPeriodStart@1100528600 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date."Period Start" := IPeriodStart;
      PeriodFormManagement.FindDate('=', Date, PeriodType);
      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.SETRANGE("Reference Date", Date."Period Start", Date."Period End");
      TmpServiceContractCtrlBudget.SETRANGE("Budget Type", TmpServiceContractCtrlBudget."Budget Type"::"Budget Calls");
      TmpServiceContractCtrlBudget.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      TmpServiceContractCtrlBudget.SETFILTER(Discipline, DisciplineFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Trade Speciality", TradeSpecFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Territory Code", TerritoryFilter);
    END;

    PROCEDURE SetAddActivitiesFilter@1100528617(IPeriodStart@1100528600 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date."Period Start" := IPeriodStart;
      PeriodFormManagement.FindDate('=', Date, PeriodType);
      TmpPrognosisDetails.RESET;
      TmpPrognosisDetails.SETRANGE(Type, TmpPrognosisDetails.Type::Workload);
      TmpPrognosisDetails.SETRANGE("Workload Type", TmpPrognosisDetails."Workload Type"::ServiceContract);
      TmpPrognosisDetails.SETRANGE(Date, Date."Period Start", Date."Period End");
      TmpPrognosisDetails.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      TmpPrognosisDetails.SETFILTER("Discipline Code", DisciplineFilter);
      TmpPrognosisDetails.SETFILTER("Trade Speciality Code", TradeSpecFilter);
      TmpPrognosisDetails.SETFILTER("Territory Code", TerritoryFilter);
    END;

    PROCEDURE SetTryoutActivitiesFilter@1100528618(IPeriodStart@1100528600 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date."Period Start" := IPeriodStart;
      PeriodFormManagement.FindDate('=', Date, PeriodType);
      TmpPrognosisDetails.RESET;
      TmpPrognosisDetails.SETRANGE(Type, TmpPrognosisDetails.Type::Workload);
      TmpPrognosisDetails.SETRANGE("Workload Type", TmpPrognosisDetails."Workload Type"::TryoutQuote);
      TmpPrognosisDetails.SETRANGE(Date, Date."Period Start", Date."Period End");
      TmpPrognosisDetails.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      TmpPrognosisDetails.SETFILTER("Discipline Code", DisciplineFilter);
      TmpPrognosisDetails.SETFILTER("Trade Speciality Code", TradeSpecFilter);
      TmpPrognosisDetails.SETFILTER("Territory Code", TerritoryFilter);
      TmpPrognosisDetails.SETFILTER("Try-out Quote Status", TryoutQuoteStatusFilter);
    END;

    PROCEDURE SetOccupationFilter@1100528619(IPeriodStart@1100528600 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date."Period Start" := IPeriodStart;
      PeriodFormManagement.FindDate('=', Date, PeriodType);
      TmpPrognosisDetails.RESET;
      TmpPrognosisDetails.SETRANGE(Type, TmpPrognosisDetails.Type::Occupation);
      TmpPrognosisDetails.SETRANGE(Date, Date."Period Start", Date."Period End");
      TmpPrognosisDetails.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      TmpPrognosisDetails.SETFILTER("Discipline Code", DisciplineFilter);
      TmpPrognosisDetails.SETFILTER("Trade Speciality Code", TradeSpecFilter);
      TmpPrognosisDetails.SETFILTER("Territory Code", TerritoryFilter);
      CASE SourceOccupationPrognosis OF
        SourceOccupationPrognosis::Employee:
          TmpPrognosisDetails.SETFILTER("Source Code", '<>%1', '');
        SourceOccupationPrognosis::Department:
          BEGIN
            TmpPrognosisDetails.SETRANGE("Source Code", '');
            TmpPrognosisDetails.SETRANGE("Territory Code", '');
          END;
        SourceOccupationPrognosis::Territory:
          BEGIN
            TmpPrognosisDetails.SETRANGE("Source Code", '');
            TmpPrognosisDetails.SETRANGE("Global Dimension 1 Code", '');
          END;
      END;
    END;

    PROCEDURE GetMaintActivities@1100528603(IPeriodStart@1100528600 : Date) Hours : Decimal;
    BEGIN
      SetMaintActivitiesFilter(IPeriodStart);
      TmpServiceContractCtrlBudget.CALCSUMS(Hours);
      Hours := TmpServiceContractCtrlBudget.Hours;
    END;

    PROCEDURE GetCallActivities@1100528615(IPeriodStart@1100528600 : Date) Hours : Decimal;
    BEGIN
      SetCallActivitiesFilter(IPeriodStart);
      TmpServiceContractCtrlBudget.CALCSUMS(Hours);
      Hours := TmpServiceContractCtrlBudget.Hours;
    END;

    PROCEDURE GetAddActivities@1100528605(IPeriodStart@1100528600 : Date) : Decimal;
    BEGIN
      SetAddActivitiesFilter(IPeriodStart);
      TmpPrognosisDetails.CALCSUMS(Hours);
      EXIT(TmpPrognosisDetails.Hours);
    END;

    PROCEDURE GetTryoutActivities@1100528606(IPeriodStart@1100528600 : Date) : Decimal;
    BEGIN
      SetTryoutActivitiesFilter(IPeriodStart);
      TmpPrognosisDetails.CALCSUMS(Hours);
      EXIT(TmpPrognosisDetails.Hours);
    END;

    PROCEDURE GetOccupationHours@1100528600(IPeriodStart@1100528602 : Date) : Decimal;
    BEGIN
      SetOccupationFilter(IPeriodStart);
      TmpPrognosisDetails.CALCSUMS(Hours);
      EXIT(TmpPrognosisDetails.Hours);
    END;

    PROCEDURE ShowMaintActivities@1100528608(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset, Date);
      SetMaintActivitiesFilter(Date."Period Start");
      PAGE.RUNMODAL(0, TmpServiceContractCtrlBudget);
    END;

    PROCEDURE ShowCallActivities@1100528614(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset, Date);
      SetCallActivitiesFilter(Date."Period Start");
      PAGE.RUNMODAL(0, TmpServiceContractCtrlBudget);
    END;

    PROCEDURE ShowAddActivities@1100528607(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset, Date);
      SetAddActivitiesFilter(Date."Period Start");
      PAGE.RUNMODAL(0, TmpPrognosisDetails);
    END;

    PROCEDURE ShowTryoutActivities@1100528609(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset, Date);
      SetTryoutActivitiesFilter(Date."Period Start");
      PAGE.RUNMODAL(0, TmpPrognosisDetails);
    END;

    PROCEDURE ShowOccupationHours@1100528602(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset, Date);
      SetOccupationFilter(Date."Period Start");
      PAGE.RUNMODAL(0, TmpPrognosisDetails);
    END;

    PROCEDURE UpdateChart@1100528601();
    VAR
      Date@1100528604 : Record 2000000007;
      Year@1100528603 : Integer;
      Offset@1100528602 : Integer;
      ColumnName@1100528601 : Text[30];
      PeriodDate@1100528600 : Date;
      WorkloadTotal@1100528605 : Decimal;
      MaintActivitiesHours@1100528611 : Decimal;
      CallActivitiesHours@1100528610 : Decimal;
      AddActivitiesHours@1100528609 : Decimal;
      TryoutActivitiesHours@1100528608 : Decimal;
      Occupation@1100528607 : Decimal;
      DeltaOccupation@1100528606 : Decimal;
    BEGIN
      BuildTmpTables;

      WITH BusinessChartBuffer DO BEGIN
        Initialize;
        AddMeasure(TextMaintActivities, MaintActivitiesIndex, "Data Type"::Decimal, "Chart Type"::StackedColumn);
        AddMeasure(TextCallActivities, CallActivitiesIndex, "Data Type"::Decimal, "Chart Type"::StackedColumn);
        AddMeasure(TextAddActivities, AddActivitiesIndex, "Data Type"::Decimal, "Chart Type"::StackedColumn);
        AddMeasure(TextTryoutActivities, TryoutActivitiesIndex, "Data Type"::Decimal, "Chart Type"::StackedColumn);
        IF OccupationVisible THEN
          AddMeasure(TextOccupation, OccupationIndex, "Data Type"::Decimal, "Chart Type"::Line)
        ELSE
          AddMeasure(TextOccupation, OccupationIndex, "Data Type"::Decimal, "Chart Type"::Column);
        IF DeltaOccupationVisible THEN
          AddMeasure(TextDeltaOccupation, DeltaOccupationIndex, "Data Type"::Decimal, "Chart Type"::Line)
        ELSE
          AddMeasure(TextDeltaOccupation, DeltaOccupationIndex, "Data Type"::Decimal, "Chart Type"::Column);
        SetXAxis(GetPeriodTypeText(PeriodType), "Data Type"::String);

        Date."Period Start" := BaseDate;
        PeriodFormManagement.FindDate('=<>', Date, PeriodType);

        FOR Offset := 0 TO NoOfColumns -1 DO BEGIN
          IF Offset > 0 THEN
            PeriodFormManagement.NextDate(1, Date, PeriodType);
          PeriodDate := Date."Period Start";
          Year := DATE2DMY(PeriodDate, 3);
          ColumnName := PeriodFormManagement.CreatePeriodFormat(PeriodType, Date."Period Start");

          AddColumn(ColumnName);

          MaintActivitiesHours := GetMaintActivities(PeriodDate);
          CallActivitiesHours := GetCallActivities(PeriodDate);
          AddActivitiesHours := GetAddActivities(PeriodDate);
          TryoutActivitiesHours := GetTryoutActivities(PeriodDate);
          WorkloadTotal := 0;
          IF MaintActivitiesVisible THEN
            WorkloadTotal += MaintActivitiesHours;
          IF CallActivitiesVisible THEN
            WorkloadTotal += CallActivitiesHours;
          IF AddActivitiesVisible THEN
             WorkloadTotal += AddActivitiesHours;
          IF TryoutActivitiesVisible THEN
             WorkloadTotal += TryoutActivitiesHours;
          Occupation := GetOccupationHours(PeriodDate);
          DeltaOccupation := Occupation - WorkloadTotal;
      //    DeltaOccupation := - (Occupation + WorkloadTotal);

          IF MaintActivitiesVisible THEN
            BusinessChartBuffer.SetValueByIndex(MaintActivitiesIndex -1, Offset, MaintActivitiesHours);
          IF CallActivitiesVisible THEN
            BusinessChartBuffer.SetValueByIndex(CallActivitiesIndex -1, Offset, CallActivitiesHours);
          IF AddActivitiesVisible THEN
            BusinessChartBuffer.SetValueByIndex(AddActivitiesIndex -1, Offset, AddActivitiesHours);
          IF TryoutActivitiesVisible THEN
            BusinessChartBuffer.SetValueByIndex(TryoutActivitiesIndex -1, Offset, TryoutActivitiesHours);
          IF OccupationVisible THEN
            BusinessChartBuffer.SetValueByIndex(OccupationIndex -1, Offset, Occupation);
          IF DeltaOccupationVisible THEN
            BusinessChartBuffer.SetValueByIndex(DeltaOccupationIndex -1, Offset, DeltaOccupation);
        END;
        Update(CurrPage.Chart);
      END;
    END;

    PROCEDURE GetPeriod@1100528604(IOffset@1100528600 : Integer;VAR ODate@1100528601 : Record 2000000007);
    BEGIN
      ODate."Period Start" := BaseDate;
      PeriodFormManagement.FindDate('=<>', ODate, PeriodType);
      IF IOffset <> 0 THEN
        PeriodFormManagement.NextDate(IOffset, ODate, PeriodType);
    END;

    PROCEDURE GetPeriodTypeText@1100528610(IPeriodType@1100528600 : Option) PeriodTypeText : Text;
    VAR
      OptionFieldTools@1100528601 : Codeunit 11012271;
    BEGIN
      OptionFieldTools.OptionValueToReadableOption(Text000, IPeriodType, PeriodTypeText);
    END;

    PROCEDURE DetermineMeasurementIndexes@1100528611();
    BEGIN
      MaintActivitiesIndex := 1;
      CallActivitiesIndex := 2;
      AddActivitiesIndex := 3;
      TryoutActivitiesIndex := 4;
      OccupationIndex := 5;
      DeltaOccupationIndex := 6;
    END;

    PROCEDURE BuildTmpTables@1100528612();
    VAR
      PrognosisDetails@1100528600 : Record 11012884;
      ServiceContract@1100528602 : Record 11012812;
      ServiceContractCtrlBudget@1100528603 : Record 11071759;
      Dialog@1100528604 : Dialog;
      FromDate@1100528607 : Date;
      ToDate@1100528601 : Date;
      RecordCount@1100528605 : Integer;
      RecordCounter@1100528606 : Integer;
    BEGIN
      Dialog.OPEN(Text002);
      FromDate := DMY2DATE(1, 1, DATE2DMY(BaseDate, 3));
      IF (BufferedFromDate <> 0D) AND (FromDate >= BufferedFromDate) THEN
        EXIT;
      BufferedFromDate := FromDate;

      TmpPrognosisDetails.RESET;
      TmpPrognosisDetails.DELETEALL;

      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.DELETEALL;

      ToDate := 99991231D;
      PrognosisDetails.SETRANGE(Date, BufferedFromDate, ToDate);
      IF PrognosisDetails.FINDSET THEN
        REPEAT
          TmpPrognosisDetails := PrognosisDetails;
          TmpPrognosisDetails.INSERT;
        UNTIL PrognosisDetails.NEXT = 0;

      ServiceContract.SETRANGE("No. of Control Messages", 0);
      IF ServiceContract.FINDSET THEN BEGIN
        RecordCount := ServiceContract.COUNT;
        REPEAT
          ServiceContractCtrlBudget.SETRANGE("Reporting Date", ServiceContract."Control Build Date");
          ServiceContractCtrlBudget.SETRANGE("Service Contract No.", ServiceContract."No.");
          ServiceContractCtrlBudget.SETRANGE("Reference Date", BufferedFromDate, ToDate);
          ServiceContractCtrlBudget.SETFILTER("Budget Type", '%1|%2',
           ServiceContractCtrlBudget."Budget Type"::Budget,
           ServiceContractCtrlBudget."Budget Type"::"Budget Calls");
      //    ServiceContractCtrlBudget.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      //    ServiceContractCtrlBudget.SETFILTER(Discipline, DisciplineFilter);
      //    ServiceContractCtrlBudget.SETFILTER("Trade Speciality", TradeSpecFilter);
      //    ServiceContractCtrlBudget.SETFILTER("Territory Code", TerritoryFilter);
          IF ServiceContractCtrlBudget.FINDSET THEN
            REPEAT
              TmpServiceContractCtrlBudget := ServiceContractCtrlBudget;
              TmpServiceContractCtrlBudget.INSERT;
            UNTIL ServiceContractCtrlBudget.NEXT = 0;
          RecordCounter += 1;
          Dialog.UPDATE(1, ROUND(RecordCounter / RecordCount * 9999, 1));
        UNTIL ServiceContract.NEXT = 0;
      END;
      Dialog.CLOSE;
    END;

    EVENT Chart@-1100528601::DataPointClicked@13(point@1100528600 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    VAR
      DrillDownIndex@1100528601 : Integer;
    BEGIN
      BusinessChartBuffer.SetDrillDownIndexes(point);
      DrillDownIndex := BusinessChartBuffer."Drill-Down X Index";
      CASE BusinessChartBuffer."Drill-Down Measure Index" +1 OF
        MaintActivitiesIndex:
          ShowMaintActivities(DrillDownIndex);
        CallActivitiesIndex:
          ShowCallActivities(DrillDownIndex);
        AddActivitiesIndex:
          ShowAddActivities(DrillDownIndex);
        TryoutActivitiesIndex:
          ShowTryoutActivities(DrillDownIndex);
        OccupationIndex:
          ShowOccupationHours(DrillDownIndex);
        DeltaOccupationIndex:;
      END;
    END;

    EVENT Chart@-1100528601::DataPointDoubleClicked@14(point@1100528600 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT Chart@-1100528601::AddInReady@15();
    BEGIN
      UpdateChart;
    END;

    BEGIN
    END.
  }
}

