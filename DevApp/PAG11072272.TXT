OBJECT Page 11072272 Estimate Purchase Action
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Estimate Purchase Action;
    SourceTable=Table11012366;
    PageType=Document;
    OnInit=BEGIN
             "Estimate No.Editable" := TRUE;
             AbolishButtonEnable := TRUE;
             AllocateButtonEnable := TRUE;
           END;

    OnAfterGetRecord=BEGIN

                       PurchActVendRec2.RESET;
                       PurchActVendRec2.SETRANGE(Source, PurchActVendRec2.Source::Estimate);
                       PurchActVendRec2.SETRANGE("Estimate No.","Estimate No.");
                       PurchActVendRec2.SETRANGE("Purchase Action",Code);
                       Number := 0;
                       IF PurchActVendRec2.FIND('-') THEN
                         REPEAT
                           Number := Number +1;
                         UNTIL PurchActVendRec2.NEXT = 0;

                       QuoteHeadRec2.RESET;
                       QuoteHeadRec2.SETCURRENTKEY("Document Type","Job No.");
                       QuoteHeadRec2.SETRANGE("Document Type", QuoteHeadRec2."Document Type"::Quote);
                       QuoteHeadRec2.SETFILTER("Estimate No.","Estimate No.");
                       QuoteHeadRec2.SETFILTER("Purchase Action",Code);
                       NoOfPurchQuote := 0;
                       IF QuoteHeadRec2.FIND('-') THEN
                         REPEAT
                           NoOfPurchQuote := NoOfPurchQuote +1;
                         UNTIL QuoteHeadRec2.NEXT = 0;
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  IF gEstCde <> '' THEN
                    "Estimate No." := gEstCde;
                  OnAfterGetCurrRecord;
                END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 31      ;1   ;ActionGroup;
                      CaptionML=ENU=&Purchase Action }
      { 1210190002;2 ;Action    ;
                      CaptionML=ENU=Texts;
                      RunObject=Page 11012126;
                      RunPageLink=Line Type=CONST(Estimate Purchase Action),
                                  No.=FIELD(Estimate No.),
                                  Purchase Action=FIELD(Code);
                      Image=SNInfo }
      { 1210190003;2 ;Action    ;
                      CaptionML=ENU=Vendors;
                      RunObject=Page 11012129;
                      RunPageView=SORTING(Source,Estimate No.,Project No.,Purchase Action,Type,Vendor No.)
                                  WHERE(Source=CONST(Estimate));
                      RunPageLink=Estimate No.=FIELD(Estimate No.),
                                  Purchase Action=FIELD(Code);
                      Image=Vendor }
      { 1100485016;2 ;Action    ;
                      CaptionML=ENU=Features;
                      Image=BulletList;
                      OnAction=VAR
                                 LFeatByPurchActionRec@1100485000 : Record 11012069;
                               BEGIN
                                 LFeatByPurchActionRec.RESET;
                                 LFeatByPurchActionRec.SETRANGE(Source,LFeatByPurchActionRec.Source::Estimate);
                                 LFeatByPurchActionRec.SETRANGE("Estimate No.","Estimate No.");
                                 LFeatByPurchActionRec.SETRANGE("Purchase Action",Code);

                                 PAGE.RUNMODAL(PAGE::"Features by Purchase Action",LFeatByPurchActionRec);
                               END;
                                }
      { 1210190004;2 ;Action    ;
                      CaptionML=ENU=Document Relations;
                      RunObject=Page 11012130;
                      RunPageLink=Source=CONST(Estimate),
                                  Estimate No.=FIELD(Estimate No.),
                                  Purchase Action=FIELD(Code);
                      Image=Relationship }
      { 1210190005;2 ;Action    ;
                      CaptionML=ENU=Purchase Quotes;
                      RunObject=Page 53;
                      RunPageView=SORTING(Document Type,Job No.)
                                  WHERE(Document Type=CONST(Quote));
                      RunPageLink=Estimate No.=FIELD(Estimate No.),
                                  Purchase Action=FIELD(Code);
                      Image=Quote }
      { 1100485023;2 ;Action    ;
                      CaptionML=ENU=Provisional work;
                      Image=Quote;
                      OnAction=VAR
                                 lvProvWorkRec@1100485000 : Record 11012774;
                               BEGIN
                                 lvProvWorkRec."No." := "Estimate No.";
                                 lvProvWorkRec.SETRANGE("No.", "Estimate No.");
                                 IF NOT lvProvWorkRec.FINDFIRST THEN BEGIN
                                   EstRec.GET("Estimate No.");
                                   lvProvWorkRec."No." := "Estimate No.";
                                   lvProvWorkRec.Description := EstRec.Description;
                                   lvProvWorkRec."Job No." := EstRec."Project No.";
                                   lvProvWorkRec."Contact No." := EstRec."Contact No.";
                                   lvProvWorkRec.Estimator := EstRec.Estimator;
                                   lvProvWorkRec.INSERT;
                                   COMMIT;
                                 END;
                                 PAGE.RUNMODAL(PAGE::"Provisional Work Card", lvProvWorkRec);
                               END;
                                }
      { 1210190012;2 ;Action    ;
                      CaptionML=ENU=Quote Comparison;
                      Image=ViewWorksheet;
                      OnAction=VAR
                                 VendorsByPurchaseActionRec@1100485000 : Record 11012068;
                                 EstimatePurchaseAction@1100485002 : Record 11012366;
                                 EstPurchaseQuoteComparison@1100525000 : Page 11072275;
                               BEGIN
                                 VendorsByPurchaseActionRec.SETRANGE(Source, VendorsByPurchaseActionRec.Source::Estimate);
                                 VendorsByPurchaseActionRec.SETRANGE("Estimate No.", "Estimate No.");
                                 VendorsByPurchaseActionRec.SETRANGE("Purchase Action", Code);
                                 VendorsByPurchaseActionRec.FINDSET; //No Vendors means error

                                 EstimatePurchaseAction.GET("Estimate No.", Code);
                                 EstimatePurchaseAction.SETRANGE("Estimate No.", "Estimate No.");
                                 EstimatePurchaseAction.SETRANGE(Code, Code);
                                 EstPurchaseQuoteComparison.SETTABLEVIEW(EstimatePurchaseAction);
                                 EstPurchaseQuoteComparison.SETRECORD(EstimatePurchaseAction);
                                 EstPurchaseQuoteComparison.RUNMODAL;
                               END;
                                }
      { 1210190017;2 ;Action    ;
                      CaptionML=ENU=Quote Comparison Excel;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 lvQuoteCompCU@1210190000 : Codeunit 11012054;
                               BEGIN
                                 lvQuoteCompCU.RunQuoteCompByEstPurchAction("Estimate No.", Code);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 34      ;1   ;Action    ;
                      Name=AbolishButton;
                      CaptionML=ENU=&Abolish;
                      Promoted=Yes;
                      Enabled=AbolishButtonEnable;
                      Image=ReverseLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage."Purchase Budget".PAGE.DisconnectPurchAction(Code);
                               END;
                                }
      { 33      ;1   ;Action    ;
                      Name=AllocateButton;
                      CaptionML=ENU=&Allocate;
                      Promoted=Yes;
                      Enabled=AllocateButtonEnable;
                      Image=SelectLineToApply;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage."Estimate Lines".PAGE.AssignPurchAction(Code);
                               END;
                                }
      { 1210190008;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1210190009;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Purchase &Quotes;
                      Image=Quote;
                      OnAction=VAR
                                 lvCounter@1210190000 : Integer;
                                 lvOptionNo@1210190004 : Integer;
                                 lvAskForPrinter@1210190003 : Boolean;
                               BEGIN
                                 IF Status = Status::Definitive THEN
                                   ERROR(Text006);

                                 PurchActVendRec.SETRANGE(Source, PurchActVendRec.Source::Estimate);
                                 PurchActVendRec.SETRANGE("Estimate No.","Estimate No.");
                                 PurchActVendRec.SETRANGE("Purchase Action",Code);
                                 IF NOT PurchActVendRec.FIND('-') THEN
                                   ERROR(Text000);

                                 EstRec.GET("Estimate No.");

                                 lvOptionNo := STRMENU(Text003,3);
                                 IF (lvOptionNo < 1) THEN
                                   ERROR('');

                                 Window.OPEN(Text007);
                                 TempPurchHeadRec.DELETEALL;

                                 VendorCount := PurchActVendRec.COUNT;

                                 CompQuote := '';
                                 IF VendorCount > 1 THEN BEGIN
                                   PurchHeadRec.RESET;
                                   PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
                                   PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
                                 //  PurchHeadRec.SETRANGE("Job No.",EstRec."Project No.");
                                   PurchHeadRec.SETRANGE("Estimate No.",EstRec."No.");
                                   PurchHeadRec.SETRANGE("Purchase Action",Code);
                                   PurchHeadRec.SETFILTER("Comparison Quote", '<>%1', '');
                                   IF PurchHeadRec.FINDFIRST THEN
                                     CompQuote := PurchHeadRec."Comparison Quote";
                                   IF CompQuote = '' THEN BEGIN
                                     PurchHeadRec.RESET;
                                     PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
                                     PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
                                     //PurchHeadRec.SETRANGE("Job No.",EstRec."Project No.");
                                     PurchHeadRec.SETRANGE("Estimate No.",EstRec."No.");
                                     PurchHeadRec.SETRANGE("Purchase Action",Code);
                                     PurchHeadRec.SETFILTER("Comparison Quote", '=%1', '');
                                     IF PurchHeadRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                       CompQuote := PurchHeadRec."No.";
                                       REPEAT
                                         PurchHeadRec."Comparison Quote" := CompQuote;
                                         PurchHeadRec.UpdateComparisonQuoteLinks('INSERT');
                                         PurchHeadRec.MODIFY(TRUE);
                                       UNTIL PurchHeadRec.NEXT = 0;
                                     END;
                                   END;
                                 END;
                                 PurchHeadRec.RESET;

                                 REPEAT
                                   VendorProcessed := VendorProcessed + 1;
                                   PurchHeadRec.RESET;
                                   PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
                                   PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
                                   //PurchHeadRec.SETRANGE("Job No.",EstRec."Project No.");
                                   PurchHeadRec.SETRANGE("Estimate No.",EstRec."No.");
                                   IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN
                                     PurchHeadRec.SETRANGE("Buy-from Vendor No.",PurchActVendRec."Vendor No.")
                                   ELSE
                                     PurchHeadRec.SETRANGE("Buy-from Contact No.",PurchActVendRec."Vendor No.");
                                   PurchHeadRec.SETRANGE("Purchase Action",Code);
                                   IF NOT PurchHeadRec.FINDFIRST THEN BEGIN
                                     IF (lvOptionNo >= 2) THEN  //* Hier al testen,als Word document niet aangemaakt
                                       CheckCreateWordDoc();    //* kan worden dan ook geen offerte aanmaken.
                                     InsertPurchHeader;
                                     CopyTextLines;
                                     CopyEstimateLines;
                                     CopyDocuments;
                                     lvCounter := lvCounter + 1;
                                   END;
                                 UNTIL PurchActVendRec.NEXT = 0;

                                 IF (lvCounter > 0) AND (lvOptionNo >= 2) THEN BEGIN
                                   COMMIT;
                                   IF TempPurchHeadRec.FIND('-') THEN BEGIN
                                     REPEAT
                                       IF TempPurchHeadRec."Buy-from Vendor No." <> '' THEN BEGIN
                                         PurchActVendRec."Vendor No." := TempPurchHeadRec."Buy-from Vendor No.";
                                         PurchActVendRec.Type := PurchActVendRec.Type::Vendor;
                                       END ELSE BEGIN
                                         PurchActVendRec.Type := PurchActVendRec.Type::Contact;
                                         PurchActVendRec."Vendor No." := TempPurchHeadRec."Buy-from Contact No.";
                                       END;
                                       PurchActVendRec.GET(PurchActVendRec.Source::Estimate,
                                         EstRec."No.", TempPurchHeadRec."Purchase Action",
                                         PurchActVendRec.Type, PurchActVendRec."Vendor No.");
                                       IF PurchHeadRec.GET(PurchHeadRec."Document Type"::Quote,TempPurchHeadRec."No.") THEN BEGIN
                                         IF NOT CreateWordDoc() THEN
                                           TempPurchHeadRec.DELETE;
                                       END;
                                       COMMIT;
                                     UNTIL TempPurchHeadRec.NEXT = 0;
                                   END;
                                   IF (lvOptionNo >= 3) THEN BEGIN
                                     IF (lvOptionNo = 4) THEN
                                       lvAskForPrinter := TRUE;
                                     IF TempPurchHeadRec.FIND('-') THEN BEGIN
                                       REPEAT
                                         PrintWordDoc((lvOptionNo = 4), lvAskForPrinter);
                                         lvAskForPrinter := FALSE;
                                       UNTIL TempPurchHeadRec.NEXT = 0;
                                     END;
                                   END;
                                 END;

                                 Window.CLOSE;
                                 IF (lvCounter > 0) THEN
                                   MESSAGE(Text002,lvCounter)
                                 ELSE
                                   ERROR(Text002,lvCounter);
                               END;
                                }
      { 1210190018;2 ;Action    ;
                      CaptionML=ENU=Create &Documents;
                      Image=NewDocument;
                      OnAction=VAR
                                 GenerateDocuments@1100525000 : Page 11020261;
                               BEGIN
                                 GenerateDocuments.SetFilter('', "Estimate No.", Code);
                                 GenerateDocuments.RUNMODAL;
                               END;
                                }
      { 1100485004;2 ;Action    ;
                      CaptionML=ENU=Print Purchase Quote Documents;
                      Image=PrintDocument;
                      OnAction=BEGIN
                                 PrintQuoteDocs;
                               END;
                                }
      { 1100485020;2 ;Action    ;
                      CaptionML=ENU=Create Provisional Work;
                      Image=NewDocument;
                      OnAction=VAR
                                 lvCounter@1100485002 : Integer;
                                 lvOptionNo@1100485001 : Integer;
                                 lvAskForPrinter@1100485000 : Boolean;
                                 lvProvisionalWorkRec@1100485003 : Record 11012774;
                                 lvProvisionalWorkSetup@1100485004 : Record 11012784;
                                 lvFeatureByPurchaseActionRec@1100485006 : Record 11012069;
                                 lvProvisionalWorkFeatureRec@1100485007 : Record 11012777;
                                 lvVendorByPurchaseActionRec@1100485008 : Record 11012068;
                                 lvProvisionalWorkContactRec@1100485009 : Record 11012779;
                                 Contact@1100528702 : Record 5050;
                                 ContactNo@1100528701 : Code[20];
                               BEGIN
                                 IF Status = Status::Definitive THEN
                                   ERROR(Text006);

                                 PurchActVendRec.SETRANGE(Source, PurchActVendRec.Source::Estimate);
                                 PurchActVendRec.SETRANGE("Estimate No.","Estimate No.");
                                 PurchActVendRec.SETRANGE("Purchase Action",Code);
                                 IF NOT PurchActVendRec.FIND('-') THEN
                                   ERROR(Text000);

                                 EstRec.GET("Estimate No.");

                                 lvOptionNo := STRMENU(Text019,3);
                                 IF (lvOptionNo < 1) THEN
                                   ERROR('');

                                 Window.OPEN(Text007);
                                 TempPurchHeadRec.DELETEALL;

                                 VendorCount := PurchActVendRec.COUNT;
                                 VendorProcessed := 0;

                                 CompQuote := '';
                                 IF VendorCount > 1 THEN BEGIN
                                   PurchHeadRec.RESET;
                                   PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
                                   PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
                                 //  PurchHeadRec.SETRANGE("Job No.",EstRec."Project No.");
                                   PurchHeadRec.SETRANGE("Estimate No.",EstRec."No.");
                                   PurchHeadRec.SETRANGE("Purchase Action",Code);
                                   PurchHeadRec.SETFILTER("Comparison Quote", '<>%1', '');
                                   IF PurchHeadRec.FINDFIRST THEN
                                     CompQuote := PurchHeadRec."Comparison Quote";
                                   IF CompQuote = '' THEN BEGIN
                                     PurchHeadRec.RESET;
                                     PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
                                     PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
                                     //PurchHeadRec.SETRANGE("Job No.",EstRec."Project No.");
                                     PurchHeadRec.SETRANGE("Estimate No.",EstRec."No.");
                                     PurchHeadRec.SETRANGE("Purchase Action",Code);
                                     PurchHeadRec.SETFILTER("Comparison Quote", '=%1', '');
                                     IF PurchHeadRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                       CompQuote := PurchHeadRec."No.";
                                       REPEAT
                                         PurchHeadRec."Comparison Quote" := CompQuote;
                                         PurchHeadRec.UpdateComparisonQuoteLinks('INSERT');
                                         PurchHeadRec.MODIFY(TRUE);
                                       UNTIL PurchHeadRec.NEXT = 0;
                                     END;
                                   END;
                                 END;
                                 PurchHeadRec.RESET;

                                 REPEAT
                                   VendorProcessed := VendorProcessed + 1;
                                   PurchHeadRec.RESET;
                                   PurchHeadRec.SETCURRENTKEY("Document Type", "Job No.");
                                   PurchHeadRec.SETRANGE("Document Type",PurchHeadRec."Document Type"::Quote);
                                   //PurchHeadRec.SETRANGE("Job No.",EstRec."Project No.");
                                   PurchHeadRec.SETRANGE("Estimate No.",EstRec."No.");
                                   IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN
                                     PurchHeadRec.SETRANGE("Buy-from Vendor No.",PurchActVendRec."Vendor No.")
                                   ELSE
                                     PurchHeadRec.SETRANGE("Buy-from Contact No.",PurchActVendRec."Vendor No.");
                                   PurchHeadRec.SETRANGE("Purchase Action",Code);
                                   IF NOT PurchHeadRec.FINDFIRST THEN BEGIN
                                     IF (lvOptionNo >= 2) THEN  //* Hier al testen,als Word document niet aangemaakt
                                       CheckCreateWordDoc();    //* kan worden dan ook geen offerte aanmaken.
                                     InsertPurchHeader;
                                     CopyTextLines;
                                     CopyEstimateLines;
                                     CopyDocuments;
                                     lvCounter := lvCounter + 1;
                                   END;
                                 UNTIL PurchActVendRec.NEXT = 0;

                                 IF (lvCounter > 0) AND (lvOptionNo >= 2) THEN BEGIN
                                   COMMIT;
                                   IF TempPurchHeadRec.FIND('-') THEN BEGIN
                                     REPEAT
                                       IF TempPurchHeadRec."Buy-from Vendor No." <> '' THEN BEGIN
                                         PurchActVendRec."Vendor No." := TempPurchHeadRec."Buy-from Vendor No.";
                                         PurchActVendRec.Type := PurchActVendRec.Type::Vendor;
                                       END ELSE BEGIN
                                         PurchActVendRec.Type := PurchActVendRec.Type::Contact;
                                         PurchActVendRec."Vendor No." := TempPurchHeadRec."Buy-from Contact No.";
                                       END;
                                       PurchActVendRec.GET(PurchActVendRec.Source::Estimate,
                                         EstRec."No.", TempPurchHeadRec."Purchase Action",
                                         PurchActVendRec.Type, PurchActVendRec."Vendor No.");
                                       IF PurchHeadRec.GET(PurchHeadRec."Document Type"::Quote,TempPurchHeadRec."No.") THEN BEGIN
                                         IF NOT CreateWordDoc() THEN
                                           TempPurchHeadRec.DELETE;
                                       END;
                                       COMMIT;
                                     UNTIL TempPurchHeadRec.NEXT = 0;
                                   END;
                                   IF (lvOptionNo >= 3) THEN BEGIN
                                     IF (lvOptionNo = 4) THEN
                                       lvAskForPrinter := TRUE;
                                     IF TempPurchHeadRec.FIND('-') THEN BEGIN
                                       REPEAT
                                         PrintWordDoc((lvOptionNo = 4), lvAskForPrinter);
                                         lvAskForPrinter := FALSE;
                                       UNTIL TempPurchHeadRec.NEXT = 0;
                                     END;
                                   END;
                                 END;

                                 IF NOT lvProvisionalWorkRec.GET("Estimate No.") THEN BEGIN
                                   lvProvisionalWorkSetup.GET();
                                   lvProvisionalWorkRec.INIT;
                                   lvProvisionalWorkRec."No. Series" := lvProvisionalWorkSetup."Provisional Work Nos.";
                                   lvProvisionalWorkRec."No." := "Estimate No.";
                                   lvProvisionalWorkRec.INSERT(TRUE);
                                   lvProvisionalWorkRec.Description := EstRec.Description;
                                   lvProvisionalWorkRec.VALIDATE(Estimator, EstRec.Estimator);
                                   lvProvisionalWorkRec.VALIDATE("Contact No.", EstRec."Contact No.");
                                   lvProvisionalWorkRec.MODIFY;
                                 END;

                                 lvFeatureByPurchaseActionRec.SETRANGE(Source, lvFeatureByPurchaseActionRec.Source::Estimate);
                                 lvFeatureByPurchaseActionRec.SETRANGE("Estimate No.", "Estimate No.");
                                 lvFeatureByPurchaseActionRec.SETRANGE("Purchase Action", Code);
                                 IF lvFeatureByPurchaseActionRec.FINDSET(FALSE, FALSE) THEN
                                   REPEAT
                                     lvProvisionalWorkFeatureRec."Provisional Work No." := "Estimate No.";
                                     lvProvisionalWorkFeatureRec."Feature Group" := lvFeatureByPurchaseActionRec."Contact Feature Group";
                                     lvProvisionalWorkFeatureRec.Feature := lvFeatureByPurchaseActionRec."Contact Feature";
                                     IF lvProvisionalWorkFeatureRec.INSERT THEN;
                                   UNTIL lvFeatureByPurchaseActionRec.NEXT =0;

                                 IF lvFeatureByPurchaseActionRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                   lvVendorByPurchaseActionRec.SETRANGE(Source, lvVendorByPurchaseActionRec.Source::Estimate);
                                   lvVendorByPurchaseActionRec.SETRANGE("Estimate No.", "Estimate No.");
                                   lvVendorByPurchaseActionRec.SETRANGE("Purchase Action", Code);
                                   IF lvVendorByPurchaseActionRec.FINDSET(FALSE, FALSE) THEN
                                     REPEAT
                                       lvProvisionalWorkContactRec.INIT;
                                       lvProvisionalWorkContactRec."Provisional Work No." := "Estimate No.";
                                       lvProvisionalWorkContactRec."Feature Group" := lvFeatureByPurchaseActionRec."Contact Feature Group";
                                       lvProvisionalWorkContactRec.Feature := lvFeatureByPurchaseActionRec."Contact Feature";

                                       IF lvVendorByPurchaseActionRec.Type = lvVendorByPurchaseActionRec.Type::Contact THEN
                                         ContactNo := lvVendorByPurchaseActionRec.Contact
                                       ELSE
                                         ContactNo := GetContact(lvVendorByPurchaseActionRec."Vendor No.");
                                       IF Contact.GET(ContactNo) THEN BEGIN
                                         IF Contact.IsContactPerson THEN BEGIN
                                           lvProvisionalWorkContactRec."Contact No." := Contact."Company No.";
                                           lvProvisionalWorkContactRec."Contact Person No." := Contact."No.";
                                         END ELSE
                                           lvProvisionalWorkContactRec."Contact No." := Contact."No.";
                                       END;

                                       IF lvProvisionalWorkContactRec.INSERT THEN;

                                     UNTIL lvVendorByPurchaseActionRec.NEXT =0;
                                 END;

                                 Window.CLOSE;
                                 IF (lvCounter > 0) THEN
                                   MESSAGE(Text002,lvCounter)
                                 ELSE
                                   MESSAGE(Text002,lvCounter);
                               END;
                                }
      { 1100485021;2 ;Action    ;
                      CaptionML=ENU=Process Quote Comparison Excel;
                      Image=CalculatePlan;
                      OnAction=VAR
                                 lvQuoteCompCU@1100485000 : Codeunit 11012054;
                               BEGIN
                                 lvQuoteCompCU.ProcessQuotesByEstPurchAction("Estimate No.", Code);
                               END;
                                }
      { 24      ;1   ;ActionGroup;
                      CaptionML=ENU=&Print }
      { 1210190013;2 ;Action    ;
                      CaptionML=ENU=Quote Reports;
                      Image=Report;
                      OnAction=BEGIN
                                 //PrintWriteOff;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 5   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 6   ;2   ;Field     ;
                SourceExpr="Estimate No.";
                Editable="Estimate No.Editable";
                OnValidate=BEGIN
                             IF "Estimate No." <> '' THEN
                               GetDefaultNr;
                           END;
                            }

    { 12  ;2   ;Field     ;
                SourceExpr=Code;
                OnLookup=VAR
                           lPurchActRec@1210190001 : Record 11012025;
                           PurchaseActionsPage@1100525001 : Page 11012031;
                         BEGIN
                           PurchaseActionsPage.LOOKUPMODE(TRUE);
                           PurchaseActionsPage.SetCopyFunctionEstimate("Estimate No.");
                           IF PurchaseActionsPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             PurchaseActionsPage.GETRECORD(lPurchActRec);
                             VALIDATE(Code,lPurchActRec.Code);
                           END ELSE BEGIN
                             IF PurchaseActionsPage.CheckMultiCopyEst(EstPurchActRec) THEN BEGIN
                               CurrPage.UPDATE(FALSE);
                               Rec := EstPurchActRec;
                               FIND;
                               CurrPage.UPDATE(FALSE);
                             END;
                           END;
                         END;
                          }

    { 1210190011;2;Field  ;
                SourceExpr="Estimate Description" }

    { 10  ;2   ;Field     ;
                SourceExpr=Description }

    { 8   ;2   ;Field     ;
                SourceExpr="Responsible Employee";
                OnValidate=BEGIN
                             ResponsibleEmployeeOnAfterVali;
                           END;
                            }

    { 1100485005;2;Field  ;
                SourceExpr="Name Employee" }

    { 16  ;2   ;Field     ;
                SourceExpr=Status }

    { 1100485012;2;Field  ;
                SourceExpr="Amounts Only" }

    { 14  ;2   ;Field     ;
                SourceExpr="Search Name" }

    { 2   ;1   ;Group     ;
                CaptionML=ENU=Purchase Budget;
                GroupType=Group }

    { 3   ;2   ;Part      ;
                Name=Purchase Budget;
                SubPageLink=Estimate No.=FIELD(Estimate No.),
                            Purchase Action=FIELD(Code),
                            Purchase Action Filter=FIELD(Code);
                PagePartID=Page11072273 }

    { 1901651601;1;Group  ;
                CaptionML=ENU=Estimate Lines not Assigned to Purchase Action;
                GroupType=Group }

    { 4   ;2   ;Part      ;
                Name=Estimate Lines;
                SubPageView=WHERE(Purchase Action=FILTER(''),
                                  Purchase Action Filter=FILTER(''));
                SubPageLink=Estimate No.=FIELD(Estimate No.);
                PagePartID=Page11072273;
                Editable=FALSE }

    { 1902859001;1;Group  ;
                CaptionML=ENU=Text }

    { 18  ;2   ;Field     ;
                SourceExpr=Text;
                MultiLine=Yes }

    { 1905289801;1;Group  ;
                CaptionML=ENU=Data }

    { 1210190010;2;Field  ;
                SourceExpr="Requested Quote Receipt Date" }

    { 1210190015;2;Field  ;
                SourceExpr="Vendors React before" }

    { 1100485015;2;Group  ;
                CaptionML=ENU=Details }

    { 1100485018;3;Field  ;
                OptionCaptionML=ENU=All Estimate Lines,Compressed Lines;
                SourceExpr=ShowType;
                OnValidate=BEGIN
                             IF ShowType = ShowType::Compressed THEN
                               CompressedShowTypeOnValidate;
                             IF ShowType = ShowType::All THEN
                               AllShowTypeOnValidate;
                           END;
                            }

    { 1901994701;1;Group  ;
                CaptionML=ENU=Log }

    { 20  ;2   ;Field     ;
                SourceExpr="Changed by" }

    { 22  ;2   ;Field     ;
                SourceExpr="Changed on" }

    { 1210190000;2;Field  ;
                SourceExpr="Activate for" }

    { 1100485002;2;Field  ;
                SourceExpr="Approval Date";
                Editable=FALSE }

    { 1907544901;1;Group  ;
                CaptionML=ENU=Request Data }

    { 1100485000;2;Field  ;
                SourceExpr="Expected No. of Vendors" }

    { 1100485008;2;Field  ;
                CaptionML=ENU=Sum of selected vendors;
                SourceExpr=Number;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              PurchActVendRec2.RESET;
                              PurchActVendRec2.SETRANGE(Source, PurchActVendRec2.Source::Estimate);
                              PurchActVendRec2.SETRANGE("Estimate No.","Estimate No.");
                              PurchActVendRec2.SETRANGE("Purchase Action",Code);
                              IF PurchActVendRec2.FIND('-') THEN
                                PAGE.RUNMODAL(PAGE::"Vendors by Purchase Action",PurchActVendRec2);
                              CurrPage.UPDATE;
                            END;
                             }

    { 1100485010;2;Field  ;
                Lookup=No;
                DrillDown=Yes;
                CaptionML=ENU=Count of Quotes;
                SourceExpr=NoOfPurchQuote;
                Editable=FALSE }

    { 1100525000;0;Container;
                ContainerType=FactBoxArea }

    { 1100525002;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1100525001;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      EstRec@1100485008 : Record 11012151;
      EstPurchActRec@11012000 : Record 11012366;
      PurchActVendRec@1210190007 : Record 11012068;
      PurchActVendRec2@1100485002 : Record 11012068;
      PurchLineRec@1210190006 : Record 39;
      PurchHeadRec@1210190005 : Record 38;
      QuoteHeadRec@1100485010 : Record 38;
      OrderHeadRec@1100485009 : Record 38;
      ParRec@1100485004 : Record 11012072;
      TempPurchHeadRec@1100485011 : TEMPORARY Record 38;
      Par2Rec@1100485001 : Record 11012072;
      QuoteHeadRec2@1100485007 : Record 38;
      Window@1100485016 : Dialog;
      CompQuote@1100485015 : Code[20];
      gEstCde@1100485000 : Code[20];
      VendorCount@1210190004 : Integer;
      VendorProcessed@1210190003 : Integer;
      Text000@1210190015 : TextConst 'ENU=No Vendors selected for this Purchase Action';
      Text002@1210190013 : TextConst 'ENU=%1 quotes created';
      Text003@1210190001 : TextConst 'ENU=Quotes,Quotes + Word documents,Quotes + Print Word Documents,Quotes + Print Word Documents with printer selection';
      Text019@1100485006 : TextConst 'ENU=Quotes,Quotes + Word documents,Quotes + Print Word Documents,Quotes + Print Word Documents with printer selection';
      Text006@1210190017 : TextConst 'ENU=Status is definitive, creation of quotes not possible';
      Text11012000@1210190010 : TextConst 'ENU=First Associate a Prospect to Customer %1.';
      Text11012002@1210190008 : TextConst 'ENU=No purchase quote document present';
      Text007@1210190019 : TextConst 'ENU=Busy with #1####################################################################';
      Text008@1210190020 : TextConst 'ENU=Creating Quotes';
      text009@1210190021 : TextConst 'ENU=Creating Quote lines';
      text010@1210190022 : TextConst 'ENU=Creating text lines';
      Text011@1210190023 : TextConst 'ENU=Copying documents';
      Text012@1210190024 : TextConst 'ENU=Creating Word Document';
      Text013@1210190025 : TextConst 'ENU=Printing Word Document';
      Text018@1210190002 : TextConst 'ENU="Printing Word document. Note: Possible the printer selection form is in the background. Then enter ''Alt+Tab. "';
      Number@1100485003 : Integer;
      NoOfPurchQuote@1100485005 : Integer;
      ShowType@1100485017 : 'All,Compressed';
      Specified@1100485018 : Boolean;
      AllocateButtonEnable@19041381 : Boolean INDATASET;
      AbolishButtonEnable@19055108 : Boolean INDATASET;
      "Estimate No.Editable"@19014384 : Boolean INDATASET;

    PROCEDURE GetDefaultNr@1();
    VAR
      lvEstPurchaseActionRec@1000000000 : Record 11012366;
    BEGIN
      IF "Estimate No." <> '' THEN BEGIN
        lvEstPurchaseActionRec.SETRANGE("Estimate No.","Estimate No.");
        IF lvEstPurchaseActionRec.FINDLAST THEN
          Code := INCSTR(lvEstPurchaseActionRec.Code)
        ELSE
          Code := '1';
      END;
    END;

    PROCEDURE InsertPurchHeader@1210190004();
    VAR
      NoSeriesMngmntCU@1210190001 : Codeunit 396;
      PurchSetupRec@1210190002 : Record 312;
      PurchaserRec@1210190000 : Record 13;
      lvContRec@1100485001 : Record 5050;
    BEGIN
      Window.UPDATE(1,Text008);
      PurchSetupRec.GET;
      WITH PurchHeadRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Quote;
        PurchSetupRec.TESTFIELD("Quote Nos.");
        "No." := NoSeriesMngmntCU.GetNextNo(PurchSetupRec."Quote Nos.",WORKDATE,TRUE);
        "No. Series" := PurchSetupRec."Quote Nos.";
        INSERT(TRUE);
        IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN
          VALIDATE("Buy-from Vendor No.",PurchActVendRec."Vendor No.")
        ELSE
          VALIDATE("Buy-from Contact No.",PurchActVendRec."Vendor No.");
        VALIDATE("Job No.",EstRec."Project No.");
        VALIDATE("Estimate No.",EstRec."No.");

        VALIDATE("Document Date",TODAY);
        "Job No." := EstRec."Project No.";
        "Estimate No." := EstRec."No.";
        "Purchase Action" := Code;
        PurchHeadRec."Amounts only" := Rec."Amounts Only"; // Issue C006079
        IF PurchActVendRec.Contact <> '' THEN BEGIN
          "Buy-from Contact" := PurchActVendRec.Contact;
          IF PurchActVendRec."Contact Person No." <> '' THEN BEGIN
            IF lvContRec.GET(PurchActVendRec."Contact Person No.") THEN BEGIN
              IF (lvContRec.Name = PurchActVendRec.Contact) THEN
                "Buy-from Contact Person No." := PurchActVendRec."Contact Person No.";
            END;
          END;
        END;
        "Requested Receipt Date" := "Requested Quote Receipt Date";
        "React before" := Rec."Vendors React before";
        IF "Responsible Employee" <> '' THEN
          IF PurchaserRec.GET("Responsible Employee") THEN
            "Purchaser Code" := "Responsible Employee";
        IF (CompQuote = '') AND (VendorCount > 1) THEN
          CompQuote := PurchHeadRec."No.";
        IF (CompQuote <> '') THEN BEGIN
          "Comparison Quote" := CompQuote;
          PurchHeadRec.UpdateComparisonQuoteLinks('INSERT');
        END;
        MODIFY(TRUE);
        TempPurchHeadRec.INIT;
        TempPurchHeadRec."Document Type" := PurchHeadRec."Document Type";
        TempPurchHeadRec."No." := PurchHeadRec."No.";
        IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN
          TempPurchHeadRec."Buy-from Vendor No." := PurchActVendRec."Vendor No."
        ELSE
          TempPurchHeadRec."Buy-from Contact No." := PurchActVendRec."Vendor No.";
        TempPurchHeadRec."Job No." := "Job No.";
        TempPurchHeadRec."Estimate No." := "Estimate No.";
        TempPurchHeadRec."Purchase Action" := "Purchase Action";
        TempPurchHeadRec.INSERT;
      END;
    END;

    PROCEDURE CopyEstimateLines@1210190008();
    VAR
      CopyEstLinesCU@1210190000 : Codeunit 11012183;
    BEGIN
      Window.UPDATE(1,text009);
      PurchLineRec.INIT;
      PurchLineRec."Document Type" := PurchLineRec."Document Type"::Quote;
      PurchLineRec."Document No." := PurchHeadRec."No.";
      IF VendorCount = VendorProcessed THEN
        CopyEstLinesCU.CopyLines(Rec,PurchLineRec,TRUE)
      ELSE
        CopyEstLinesCU.CopyLines(Rec,PurchLineRec,FALSE);
    END;

    PROCEDURE CopyTextLines@1210190003();
    VAR
      PurchActTextRec@1210190001 : Record 11012067;
      PurchActText1Rec@1210190002 : Record 11012067;
    BEGIN
      Window.UPDATE(1,text010);
      PurchActTextRec.SETRANGE("Line Type",PurchActTextRec."Line Type"::"Estimate Purchase Action");
      PurchActTextRec.SETRANGE("No.","Estimate No.");
      PurchActTextRec.SETRANGE("Purchase Action",Code);
      IF PurchActTextRec.FINDSET THEN BEGIN
        REPEAT
          PurchActText1Rec.COPY(PurchActTextRec);
          PurchActText1Rec."Line Type" := PurchActText1Rec."Line Type"::"Purchase Quote";
          PurchActText1Rec."Purchase Action" := '';
          PurchActText1Rec."No." := PurchHeadRec."No.";
          PurchActText1Rec.INSERT;
        UNTIL PurchActTextRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyDocuments@1210190005();
    VAR
      PurchActDocRec@1210190000 : Record 11012071;
      DocRelRec@1210190001 : Record 11012407;
      DocumentProperties@1100528400 : Record 11012746;
    BEGIN
      Window.UPDATE(1,Text011);
      PurchActDocRec.SETRANGE(PurchActDocRec.Source,PurchActDocRec.Source::Estimate);
      PurchActDocRec.SETRANGE("Estimate No.","Estimate No.");
      PurchActDocRec.SETRANGE("Purchase Action",Code);
      IF PurchActDocRec.FINDSET THEN BEGIN
        REPEAT
          DocRelRec.INIT;
          DocRelRec."Document Type" := DocRelRec."Document Type"::"Purchase Quote";
          DocRelRec."No." := PurchHeadRec."No.";
          DocRelRec."Related Document No." := PurchActDocRec."Related Document No.";
          PurchActDocRec.CALCFIELDS("Document No.");
          DocRelRec."Document No." := PurchActDocRec."Document No.";
          DocRelRec."Send by E-Mail" := TRUE;
          IF DocumentProperties.GET(DocRelRec."Related Document No.") THEN
            IF DocumentProperties.FileCanBeConvertedToPDF THEN
              DocRelRec.Print := TRUE;
          DocRelRec.INSERT;
          ParRec.SETRANGE(Type,ParRec.Type::EstPurchAction);
          ParRec.SETRANGE("No.","Estimate No.");
          ParRec.SETRANGE("Purchase Action",Code);
          ParRec.SETRANGE("Document No.",PurchActDocRec."Related Document No.");
          IF ParRec.FINDSET THEN BEGIN
            REPEAT
              Par2Rec.COPY(ParRec);
              Par2Rec.Type := Par2Rec.Type::Quote;
              Par2Rec."No." := PurchHeadRec."No.";
              Par2Rec."Document No." := PurchActDocRec."Related Document No.";
              Par2Rec."Purchase Action" := '';
              Par2Rec.INSERT;
            UNTIL ParRec.NEXT = 0;
          END;
        UNTIL PurchActDocRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCreateWordDoc@1100485003();
    VAR
      lContact@1210190006 : Record 5050;
      lContBusRel@1210190005 : Record 5054;
      lRecDocument@1210190008 : Record 11012401;
    BEGIN
      IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN BEGIN
        lContBusRel.SETCURRENTKEY("Link to Table", "No.");
        lContBusRel.SETRANGE("Link to Table", lContBusRel."Link to Table"::Vendor);
        lContBusRel.SETRANGE("No.",PurchActVendRec."Vendor No.");
        IF NOT lContBusRel.FINDFIRST THEN
          ERROR(Text11012000,PurchActVendRec."Vendor No.");
        lContact.GET(lContBusRel."Contact No.");
      END ELSE BEGIN
        lContact.GET(PurchActVendRec."Vendor No.");
      END;
      lContact.TESTFIELD("Document Group");

      lRecDocument.INIT;
      lRecDocument.SETRANGE("Document Group",lContact."Document Group");
      lRecDocument.SETRANGE(Type,lRecDocument.Type::"Purchase Quote");

      IF PurchActVendRec."Document Template" <> '' THEN BEGIN
        lRecDocument.SETRANGE("Template Code",PurchActVendRec."Document Template");
      END ELSE
        lRecDocument.SETRANGE("Template Code");

      IF NOT lRecDocument.FINDFIRST THEN
        ERROR(Text11012002);
    END;

    PROCEDURE CreateWordDoc@1210190007() : Boolean;
    VAR
      lContact@1210190006 : Record 5050;
      lContBusRel@1210190005 : Record 5054;
      lRecDocument@1210190008 : Record 11012401;
      lCduWordInterface@1210190007 : Codeunit 11012406;
      RecRef@1100525000 : RecordRef;
      DocLinkRID@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      Window.UPDATE(1,Text012);
      CLEAR(lCduWordInterface);

      IF (PurchActVendRec.Type <> PurchActVendRec.Type::Contact) THEN BEGIN
        lContBusRel.SETCURRENTKEY("Link to Table", "No.");
        lContBusRel.SETRANGE("Link to Table", lContBusRel."Link to Table"::Vendor);
        lContBusRel.SETRANGE("No.",PurchActVendRec."Vendor No.");
        IF NOT lContBusRel.FINDFIRST THEN
          EXIT(FALSE);
        IF NOT lContact.GET(lContBusRel."Contact No.") THEN
          EXIT(FALSE);
      END ELSE BEGIN
        IF NOT lContact.GET(PurchActVendRec."Vendor No.") THEN
          EXIT(FALSE);
      END;
      IF lContact."Document Group" = '' THEN
        EXIT(FALSE);

      // Get Source Document link
      RecRef.GETTABLE(PurchHeadRec);
      DocLinkRID[2] := RecRef.RECORDID();

      lRecDocument.INIT;
      lRecDocument.SETRANGE("Document Group",lContact."Document Group");
      lRecDocument.SETRANGE(Type,lRecDocument.Type::"Purchase Quote");

      IF PurchActVendRec."Document Template" <> '' THEN BEGIN
        lRecDocument.SETRANGE("Template Code",PurchActVendRec."Document Template");
      END ELSE
        lRecDocument.SETRANGE("Template Code");

      IF lRecDocument.FINDSET THEN BEGIN
        REPEAT
          lRecDocument.Type := lRecDocument.Type::"Purchase Quote";

          lCduWordInterface.GenerateDocFromTemplate(lRecDocument,
                                                    DocLinkRID,
                                                    '',
                                                    lContact."No.",
                                                    PurchHeadRec."Buy-from Contact Person No.",
                                                    '',
                                                    FALSE)

        UNTIL lRecDocument.NEXT = 0;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PrintWordDoc@1210190009(IWithPrinterSelection@1210190002 : Boolean;IAskForPrinter@1210190003 : Boolean);
    VAR
      DocumentProperties@1100525000 : Record 11012746;
      DocumentLink@1100525001 : Record 11012747;
      RecRef@1100525002 : RecordRef;
      lCduWord@1210190001 : Codeunit 11012400;
      DocumentLinkMgt@1100525003 : Codeunit 11012401;
    BEGIN
      IF NOT IAskForPrinter THEN
        Window.UPDATE(1,Text013)
      ELSE
        Window.UPDATE(1,Text018);
      COMMIT;
      //DocRec.SETRANGE("Document No.",TempPurchHeadRec."No.");
      RecRef.GETTABLE(TempPurchHeadRec);

      DocumentLink.RESET;
      DocumentLink.SETRANGE("Table No.", RecRef.NUMBER);
      DocumentLink.SETRANGE("Filter Expression", DocumentLinkMgt.GetFilterExpression(RecRef.RECORDID));
      DocumentLink.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF DocumentLink.FINDSET THEN BEGIN
        REPEAT
          IF DocumentProperties.GET(DocumentLink."Document No.") THEN
            DocumentProperties.MARK(TRUE);
        UNTIL DocumentLink.NEXT = 0;
      END;

      DocumentProperties.MARKEDONLY(TRUE);

      IF DocumentProperties.FINDLAST THEN BEGIN  //use '+' to read last document version
        IF DocumentProperties.File <> '' THEN BEGIN
          lCduWord.Initialise();
          lCduWord.Open(FALSE, DocumentProperties.File, FALSE);
          lCduWord.Save();
          IF NOT IAskForPrinter THEN BEGIN
            lCduWord.Print();
            lCduWord.Save();
            lCduWord.Close();
          END ELSE BEGIN
            lCduWord.PrintWithPrinterSelection();
            Window.UPDATE(1,Text013);
            lCduWord.Save();
            lCduWord.Close();
            SLEEP(5000);
          END;
          IF NOT IWithPrinterSelection THEN
            lCduWord.Terminate;
        END;
      END;

      DocumentProperties.CLEARMARKS();
    END;

    PROCEDURE WriteOff@1210190001(ReportID@1100485000 : Integer);
    VAR
      lQuoteHeadRec@1210190001 : Record 38;
    BEGIN
      REPEAT
        OrderHeadRec.SETRANGE("Copied from Purchase Quote No.",QuoteHeadRec."No.");
        IF NOT OrderHeadRec.FINDFIRST THEN BEGIN
          lQuoteHeadRec.COPYFILTERS(QuoteHeadRec);
          lQuoteHeadRec.SETRANGE("No.",QuoteHeadRec."No.");
          REPORT.RUNMODAL(ReportID, FALSE, FALSE, lQuoteHeadRec);
        END;
      UNTIL QuoteHeadRec.NEXT = 0;
    END;

    PROCEDURE Setfilter@1100485000(lEstCde@1210190000 : Code[20]);
    BEGIN
      FILTERGROUP(2);
      SETRANGE("Estimate No.",lEstCde);
      "Estimate No.Editable" := (FALSE);
      gEstCde := lEstCde;
      FILTERGROUP(0);
    END;

    PROCEDURE PrintQuoteDocs@1100485001();
    VAR
      lvAskForPrinter@1100485000 : Boolean;
    BEGIN
      Window.OPEN(Text007);
      WITH PurchHeadRec DO BEGIN
        lvAskForPrinter := TRUE;
        RESET;
        SETCURRENTKEY("Document Type","Job No.");
        SETRANGE("Document Type", "Document Type"::Quote);
        SETRANGE("Estimate No.", Rec."Estimate No.");
        SETRANGE("Purchase Action", Rec.Code);
        IF FINDSET THEN
          REPEAT
            TempPurchHeadRec := PurchHeadRec;
            PrintWordDoc(TRUE, lvAskForPrinter);
            lvAskForPrinter := FALSE;
          UNTIL NEXT = 0;
        RESET;
      END;
      Window.CLOSE;
    END;

    PROCEDURE ProcessShowType@1100485002();
    BEGIN
      CurrPage."Purchase Budget".PAGE.ProcessShowType(ShowType);
      CurrPage."Estimate Lines".PAGE.ProcessShowType(ShowType);
      IF ShowType = ShowType::Compressed THEN BEGIN
        Specified := FALSE;
      END ELSE BEGIN
        Specified := TRUE;
      END;
    END;

    PROCEDURE GetContact@1100485004(VendorNo@1100485000 : Code[20]) ContactNo : Code[20];
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      ContactNo := '' ;

      IF VendorNo = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
      ContBusRel.SETRANGE("No.",VendorNo);
      IF NOT ContBusRel.FIND('-') THEN
        EXIT;

      IF NOT Cont.GET(ContBusRel."Contact No.") THEN
        EXIT;

      ContactNo := ContBusRel."Contact No." ;
    END;

    LOCAL PROCEDURE ResponsibleEmployeeOnAfterVali@19053792();
    BEGIN
      CALCFIELDS("Name Employee");
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      IF Status = Status::Definitive THEN BEGIN
        AllocateButtonEnable := FALSE;
        AbolishButtonEnable := FALSE;
      END;
    END;

    LOCAL PROCEDURE PurchaseBudgetOnDeactivate@19048175();
    BEGIN
      IF Status <> Status::Definitive THEN BEGIN
        AllocateButtonEnable := TRUE;
        AbolishButtonEnable := FALSE;
      END ELSE BEGIN
        AllocateButtonEnable := FALSE;
        AbolishButtonEnable := FALSE;
      END;
    END;

    LOCAL PROCEDURE EstimateLinesOnDeactivate@19019373();
    BEGIN
      IF Status <> Status::Definitive THEN BEGIN
        AbolishButtonEnable := TRUE;
        AllocateButtonEnable := FALSE;
      END ELSE BEGIN
        AllocateButtonEnable := FALSE;
        AbolishButtonEnable := FALSE;
      END;
    END;

    LOCAL PROCEDURE PurchaseBudgetOnActivate@19067281();
    BEGIN
      IF Status <> Status::Definitive THEN BEGIN
        AllocateButtonEnable := FALSE;
        AbolishButtonEnable := TRUE;
      END ELSE BEGIN
        AllocateButtonEnable := FALSE;
        AbolishButtonEnable := FALSE;
      END;
    END;

    LOCAL PROCEDURE EstimateLinesOnActivate@19004679();
    BEGIN
      IF Status <> Status::Definitive THEN BEGIN
        AbolishButtonEnable := FALSE;
        AllocateButtonEnable := TRUE;
      END ELSE BEGIN
        AllocateButtonEnable := FALSE;
        AbolishButtonEnable := FALSE;
      END;
    END;

    LOCAL PROCEDURE AllShowTypeOnPush@19072879();
    BEGIN
      ProcessShowType();
    END;

    LOCAL PROCEDURE CompressedShowTypeOnPush@19051876();
    BEGIN
      ProcessShowType();
    END;

    LOCAL PROCEDURE AllShowTypeOnValidate@19037893();
    BEGIN
      AllShowTypeOnPush;
    END;

    LOCAL PROCEDURE CompressedShowTypeOnValidate@19011389();
    BEGIN
      CompressedShowTypeOnPush;
    END;

    BEGIN
    END.
  }
}

