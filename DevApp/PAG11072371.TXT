OBJECT Page 11072371 Plant Availability
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Plant Availability;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table11012551;
    PageType=Worksheet;
    OnInit=BEGIN
             EndDateSpecialEditable := TRUE;
             EndDateSpecialVisible := TRUE;
             CopyButtonVisible := TRUE;
             CountPlantNeed := TRUE;
             gDoMultiCopy := FALSE;
             PeriodType := PeriodType::SpecialPeriod;
           END;

    OnOpenPage=VAR
                 lvPlantOrderLineRec@1100485000 : Record 11012557;
               BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 PlantSetupRec.GET;
                 //PlantSetupRec.TESTFIELD("Rental Depot");  //*DPA.o
                 //*DPA.sn
                 DefRentalDepot := PlantSetupRec.GetRentalDepot();
                 IF DefRentalDepot = '' THEN;
                   PlantSetupRec.TESTFIELD("Rental Depot");
                 //*DPA.en

                 CopyButtonVisible := gMultiCopyAllowed;

                 IF gSelectedDepots <> '' THEN
                   SelectedDepots := gSelectedDepots;
                 CheckDepotFilter(FALSE);

                 IF gStartDate <> 0D THEN
                   PeriodRec."Period Start" := gStartDate;

                 IF gUsePeriodType THEN
                   PeriodType := gPeriodType;

                 IF gStartDateSpecial <> 0D THEN BEGIN
                   StartDateSpecial := gStartDateSpecial;
                   EndDateSpecial := gEndDateSpecial;
                   OnValidateEndDateSpecial(FALSE);
                 END;

                 IF PeriodType <> PeriodType::SpecialPeriod THEN
                   PeriodFormManagement.FindDate('=',PeriodRec,PeriodType)
                 ELSE
                   PeriodFormManagement.FindDate('=',PeriodRec,PeriodType::Day);

                 SetPeriodDates();
               END;

    OnAfterGetRecord=BEGIN
                       CALCFIELDS("Quantity in Depot", "Quantity Rented");
                       QuantityTotal := "Quantity in Depot" + "Quantity Rented";

                       FillPeriodDates();

                       //* Available: with CountNotPostedand CountExpectedReturn on 'TRUE'
                       QuantityAvailable :=
                         PlanningFutureDeficit.PlanningAvailable(SelectedDepots,TRUE,CountPlantNeed,TRUE,Code,PeriodStart,PeriodEnd,TRUE);

                       //* Planned: calculate plant need
                       QuantityPlanned := PlanningFutureDeficit.PlanningPlantNeed(SelectedDepots,Code,PeriodStart,PeriodEnd,TRUE);

                       //* Reserved: calculate not-posted plant orders
                       QuantityReserved := PlanningFutureDeficit.PlanningNotPostedPO(SelectedDepots,Code,PeriodStart,PeriodEnd,TRUE);
                       QuantityAvailableOnFormat;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100485042;1 ;ActionGroup;
                      CaptionML=ENU=&Planning }
      { 1100485043;2 ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Plant Type &Card;
                      RunObject=Page 11012551;
                      RunPageLink=Code=FIELD(Code);
                      Image=NewResource }
      { 1100485046;2 ;Action    ;
                      CaptionML=ENU=Plant &Planning;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=RefreshPlanningLine;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvPlantPlanningFrm@1100485000 : Page 11012608;
                               BEGIN
                                 lvPlantPlanningFrm.SETRECORD(Rec);
                                 lvPlantPlanningFrm.SetDepotFilter(SelectedDepots);
                                 //lvPlantPlanningFrm.SetStarDate(StartDateSpecial);
                                 lvPlantPlanningFrm.RUNMODAL;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210190001;1 ;Action    ;
                      CaptionML=ENU=Previous Period;
                      ToolTipML=ENU=Previous Period;
                      Promoted=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF PeriodType <> PeriodType::SpecialPeriod THEN BEGIN
                                   PeriodFormManagement.NextDate(-1,PeriodRec,PeriodType);
                                   StartDateSpecial := PeriodRec."Period Start";
                                   EndDateSpecial := PeriodRec."Period End";
                                 END;
                               END;
                                }
      { 1210190000;1 ;Action    ;
                      CaptionML=ENU=Next Period;
                      ToolTipML=ENU=Next Period;
                      Promoted=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF PeriodType <> PeriodType::SpecialPeriod THEN BEGIN
                                   PeriodFormManagement.NextDate(1,PeriodRec,PeriodType);
                                   StartDateSpecial := PeriodRec."Period Start";
                                   EndDateSpecial := PeriodRec."Period End";
                                 END;
                               END;
                                }
      { 1100485012;1 ;Action    ;
                      Name=CopyButton;
                      CaptionML=ENU=&Copy;
                      Promoted=Yes;
                      Visible=CopyButtonVisible;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //CopyLines;
                                 CurrPage.SETSELECTIONFILTER(MarkedMultiCopyRec);
                                 IF NOT MarkedMultiCopyRec.FINDFIRST THEN
                                   ERROR(Text004)
                                 ELSE BEGIN
                                   gDoMultiCopy := TRUE;
                                   CurrPage.CLOSE;
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190004;1;Group   }

    { 1210190005;2;Field  ;
                Lookup=Yes;
                CaptionML=ENU=Depot Filter;
                SourceExpr=SelectedDepots;
                TableRelation="Plant Location" WHERE (Depot=CONST(Yes));
                LookupPageID=Plant Location List;
                OnValidate=BEGIN
                             CheckDepotFilter(TRUE);
                           END;
                            }

    { 1100485041;2;Field  ;
                CaptionML=ENU=Plant Need;
                ToolTipML=ENU=Count in 'Quantity Available';
                SourceExpr=CountPlantNeed }

    { 14  ;2   ;Field     ;
                CaptionML=ENU=Periode Type;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period,,,,,,Special Period;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             IF PeriodType = PeriodType::SpecialPeriod THEN
                               SpecialPeriodPeriodTypeOnValid;
                             IF PeriodType = PeriodType::"Accounting Period" THEN
                               AccountingPerioPeriodTypeOnVal;
                             IF PeriodType = PeriodType::Year THEN
                               YearPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Quarter THEN
                               QuarterPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Month THEN
                               MonthPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Week THEN
                               WeekPeriodTypeOnValidate;
                             IF PeriodType = PeriodType::Day THEN
                               DayPeriodTypeOnValidate;
                           END;
                            }

    { 1100485004;2;Field  ;
                Name=StartDateSpecial;
                CaptionML=ENU=Start Date Period;
                NotBlank=Yes;
                SourceExpr=StartDateSpecial;
                OnValidate=BEGIN
                             IF PeriodType <> PeriodType::SpecialPeriod THEN
                               SetPeriodDates();

                             IF StartDateSpecial > EndDateSpecial THEN
                               EndDateSpecial := StartDateSpecial;

                             OnValidateEndDateSpecial(FALSE);
                           END;
                            }

    { 1100485002;2;Field  ;
                Name=EndDateSpecial;
                CaptionML=ENU=End Date Period;
                NotBlank=Yes;
                SourceExpr=EndDateSpecial;
                Visible=EndDateSpecialVisible;
                Editable=EndDateSpecialEditable;
                OnValidate=BEGIN
                             IF EndDateSpecial < StartDateSpecial THEN
                               ERROR(Text003);

                             OnValidateEndDateSpecial(TRUE);
                           END;
                            }

    { 1100485013;1;Group  ;
                Editable=FALSE;
                GroupType=Repeater }

    { 1100485014;2;Field  ;
                CaptionML=ENU=Plant Type;
                SourceExpr=Code }

    { 1100485018;2;Field  ;
                SourceExpr=Description }

    { 1100485016;2;Field  ;
                SourceExpr="Search Name";
                Visible=FALSE }

    { 1100485024;2;Field  ;
                CaptionML=ENU=Level 1;
                SourceExpr="Group Level 1";
                Visible=FALSE }

    { 1100485030;2;Field  ;
                DrillDown=No;
                SourceExpr="Group Level 1 Description";
                Visible=FALSE }

    { 1100485026;2;Field  ;
                CaptionML=ENU=Level 2;
                SourceExpr="Group Level 2";
                Visible=FALSE }

    { 1100485032;2;Field  ;
                DrillDown=No;
                SourceExpr="Group Level 2 Description";
                Visible=FALSE }

    { 1100485028;2;Field  ;
                CaptionML=ENU=Level 3;
                SourceExpr="Group Level 3";
                Visible=FALSE }

    { 1100485034;2;Field  ;
                DrillDown=No;
                SourceExpr="Group Level 3 Description";
                Visible=FALSE }

    { 1100485020;2;Field  ;
                SourceExpr="Unit of Measure" }

    { 1100485008;2;Field  ;
                CaptionML=ENU=Total Quantity;
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=QuantityTotal }

    { 1100485022;2;Field  ;
                CaptionML=ENU=Stock (Current);
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=CalculateInventoryQuantity() }

    { 1100485036;2;Field  ;
                CaptionML=ENU=Planned;
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=QuantityPlanned;
                OnDrillDown=BEGIN
                              DrillDownPlanningList(2);
                            END;
                             }

    { 1100485038;2;Field  ;
                CaptionML=ENU=Reserved;
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=QuantityReserved;
                OnDrillDown=BEGIN
                              DrillDownPlanningList(3);
                            END;
                             }

    { 1100485000;2;Field  ;
                Name=QuantityAvailable;
                CaptionML=ENU=Available;
                DecimalPlaces=0:0;
                BlankZero=Yes;
                SourceExpr=QuantityAvailable;
                OnDrillDown=BEGIN
                              DrillDownPlanningList(1);
                            END;
                             }

  }
  CODE
  {
    VAR
      PlantSetupRec@1210190001 : Record 11012550;
      PeriodRec@1100485023 : Record 2000000007;
      MarkedMultiCopyRec@1100485018 : Record 11012551;
      PeriodFormManagement@1210190002 : Codeunit 359;
      PlanningFutureDeficit@1210190000 : Codeunit 11012576;
      gUsePeriodType@1100485009 : Boolean;
      gMultiCopyAllowed@1100485015 : Boolean;
      gDoMultiCopy@1100485017 : Boolean;
      CountPlantNeed@1100485025 : Boolean;
      PeriodType@11012002 : 'Day,Week,Month,Quarter,Year,Accounting Period,,,,,,SpecialPeriod';
      gPeriodType@1100485008 : Option;
      PeriodStart@1100485007 : Date;
      PeriodEnd@1100485006 : Date;
      gStartDate@1100485004 : Date;
      StartDateSpecial@1100485012 : Date;
      EndDateSpecial@1100485011 : Date;
      gStartDateSpecial@1100485014 : Date;
      gEndDateSpecial@1100485013 : Date;
      QuantityAvailable@11012004 : Decimal;
      Text001@1210190007 : TextConst 'ENU=Only depots allowed. location ''%1'' is not a depot.';
      QuantityTotal@1100485020 : Decimal;
      QuantityPlanned@1100485021 : Decimal;
      QuantityReserved@1100485022 : Decimal;
      DefRentalDepot@1210190003 : Code[20];
      SelectedDepots@1100485002 : Code[250];
      gSelectedDepots@1100485000 : Code[250];
      gCompany@1100485001 : Text[30];
      Text002@1100485003 : TextConst 'ENU=No depot selected.';
      Text003@1100485005 : TextConst 'ENU=End Date may not be less than the Start Date.';
      Text004@1100485016 : TextConst 'ENU=First select records.';
      Text005@1100485019 : TextConst 'ENU=Maximum a period of 1 year allowed.';
      DPA_IsHardFilter@1100000999 : Boolean;
      CopyButtonVisible@19037030 : Boolean INDATASET;
      EndDateSpecialVisible@19037427 : Boolean INDATASET;
      EndDateSpecialEditable@19018942 : Boolean INDATASET;

    PROCEDURE CheckDepotFilter@1100485000(IErrorMode@1100485001 : Boolean) : Boolean;
    VAR
      lvLocationRec@1100485000 : Record 11012554;
    BEGIN
      IF (gCompany <> '') THEN
        lvLocationRec.CHANGECOMPANY(gCompany);

      IF SelectedDepots = '' THEN  //* Filter empty not allowed, because this are all locations (not all depots)
        //SelectedDepots := PlantSetupRec."Rental Depot";  //*DPA.o
        SelectedDepots := DefRentalDepot;  //*DPA.n

      lvLocationRec.SETFILTER(Code, SelectedDepots);  //* Only depots allowed in depot filter!
      lvLocationRec.SETRANGE(Depot, FALSE);
      IF lvLocationRec.FIND('-') THEN BEGIN
        IF IErrorMode THEN
          ERROR(Text001, lvLocationRec.Code)
        ELSE
          //SelectedDepots := PlantSetupRec."Rental Depot";  //*DPA.o
          SelectedDepots := DefRentalDepot;  //*DPA.n
      END;

      lvLocationRec.SETRANGE(Depot, TRUE);
      IF NOT lvLocationRec.FIND('-') THEN BEGIN
        IF IErrorMode THEN
          ERROR(Text002)
        ELSE
          //SelectedDepots := PlantSetupRec."Rental Depot";  //*DPA.o
          SelectedDepots := DefRentalDepot;  //*DPA.n
      END;
    END;

    LOCAL PROCEDURE CalculateInventoryQuantity@1210190000() : Decimal;
    VAR
      lvStockQuantity@1210190000 : Decimal;
    BEGIN
      lvStockQuantity := PlanningFutureDeficit.GetCurrentInventoryQuantity(SelectedDepots,Code);
      EXIT(lvStockQuantity);
    END;

    PROCEDURE SetDepotFilter@1100485003(ISelectedDepots@1100485000 : Code[250]);
    BEGIN
      gSelectedDepots := ISelectedDepots;
    END;

    PROCEDURE SetStarDate@1100485004(IStartDate@1100485000 : Date);
    BEGIN
      gStartDate := IStartDate;
    END;

    PROCEDURE SetPeriodType@1100485009(IPeriodType@1100485000 : Option);
    BEGIN
      gUsePeriodType := TRUE;
      gPeriodType := IPeriodType;
    END;

    PROCEDURE SetSpecialPeriodFilter@1100485006(IStartDateSpecial@1100485001 : Date;IEndDateSpecial@1100485000 : Date;IUseSpecialPeriod@1100485002 : Boolean);
    BEGIN
      IF IUseSpecialPeriod THEN BEGIN
        gUsePeriodType := TRUE;
        gPeriodType := PeriodType::SpecialPeriod;
      END;
      gStartDateSpecial := IStartDateSpecial;
      gEndDateSpecial := IEndDateSpecial;
      IF gEndDateSpecial < gStartDateSpecial THEN
        gEndDateSpecial := gStartDateSpecial;
    END;

    PROCEDURE SetCompany@1100485001(ICompany@1100485000 : Text[30]);
    BEGIN
      IF (ICompany = '') OR (ICompany = COMPANYNAME) THEN
        gCompany := ''
      ELSE BEGIN
        gCompany := ICompany;
        Rec.CHANGECOMPANY(gCompany);
        PlantSetupRec.CHANGECOMPANY(gCompany);
        PlanningFutureDeficit.SetCompany(gCompany);
      END;
    END;

    PROCEDURE SetMultiCopyAllowed@1100485011(IMultiCopyAllowed@1100485000 : Boolean);
    BEGIN
      gMultiCopyAllowed := IMultiCopyAllowed;
      gDoMultiCopy := FALSE;
    END;

    PROCEDURE GetMultiCopyRec@1100485015(VAR OTmpPlantTypeRec@1100485000 : TEMPORARY Record 11012551) : Boolean;
    BEGIN
      //* Attention: Record-variable (OTmpPlantTypeRec) must be 'Temporary' in calling process
      OTmpPlantTypeRec.RESET;
      OTmpPlantTypeRec.DELETEALL;

      IF gDoMultiCopy THEN BEGIN
        gDoMultiCopy := FALSE;
        CurrPage.SETSELECTIONFILTER(MarkedMultiCopyRec);
        IF MarkedMultiCopyRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            OTmpPlantTypeRec := MarkedMultiCopyRec;
            OTmpPlantTypeRec.INSERT;
          UNTIL MarkedMultiCopyRec.NEXT = 0;
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE DrillDownPlanningList@1100485002(IType@1100485002 : Integer);
    VAR
      lvTmpPlanRec@1100485001 : TEMPORARY Record 11012543;
      lvPlanningFutureDeficit@1100485000 : Codeunit 11012576;
    BEGIN
      //* Use a local for CU here! Not global, because then problems in combination with determine quantity
      //* Type: 1=Planning, 2=PlantNeed, 3=Not Posted Plant Orders
      FillPeriodDates();
      CASE IType OF
        1: lvPlanningFutureDeficit.BeforeDrilldownPlanning(
             SelectedDepots,TRUE,TRUE,TRUE,Code,PeriodStart,PeriodEnd,lvTmpPlanRec);
        2: lvPlanningFutureDeficit.BeforeDrilldownPlannedReserved(
             SelectedDepots,FALSE,TRUE,Code,PeriodStart,PeriodEnd,lvTmpPlanRec);
        3: lvPlanningFutureDeficit.BeforeDrilldownPlannedReserved(
             SelectedDepots,TRUE,FALSE,Code,PeriodStart,PeriodEnd,lvTmpPlanRec);
      END;
      PAGE.RUNMODAL(PAGE::"Plant Planning List", lvTmpPlanRec)
    END;

    PROCEDURE SetPeriodDates@1100485007();
    BEGIN
      IF PeriodType <> PeriodType::SpecialPeriod THEN BEGIN
        EndDateSpecialEditable := (FALSE);
        PeriodRec."Period Start" := StartDateSpecial;
        PeriodFormManagement.FindDate('=<>',PeriodRec,PeriodType);
        StartDateSpecial := PeriodRec."Period Start";
        EndDateSpecial := PeriodRec."Period End";
      END ELSE BEGIN
        IF StartDateSpecial = 0D THEN BEGIN
          StartDateSpecial := PeriodRec."Period Start";
          EndDateSpecial := PeriodRec."Period End";
        END;
        EndDateSpecialEditable := (TRUE);
      END;
      EndDateSpecialVisible := (PeriodType <> PeriodType::Day);
    END;

    PROCEDURE FillPeriodDates@1100485005();
    BEGIN
      PeriodStart := StartDateSpecial;
      PeriodEnd := EndDateSpecial;
    END;

    PROCEDURE OnValidateEndDateSpecial@1100485010(IErrorMode@1100485000 : Boolean);
    BEGIN
      //* Allow max 366 days (1 Year) at 'PlanningFutureDeficit.PlanningAvailable' because of arrays
      IF (EndDateSpecial - StartDateSpecial + 1) > 366 THEN BEGIN
        IF IErrorMode THEN
          ERROR(Text005)
        ELSE
          EndDateSpecial := StartDateSpecial + 366 - 1;
      END;
    END;

    LOCAL PROCEDURE AccountingPerioPeriodTypOnPush@19038761();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE YearPeriodTypeOnPush@19051042();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE QuarterPeriodTypeOnPush@19018850();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE MonthPeriodTypeOnPush@19047374();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE WeekPeriodTypeOnPush@19046063();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE DayPeriodTypeOnPush@19008851();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE SpecialPeriodPeriodTypeOnPush@19062696();
    BEGIN
      SetPeriodDates();
    END;

    LOCAL PROCEDURE QuantityAvailableOnFormat@19079397();
    BEGIN
      IF QuantityAvailable < 0 THEN;
    END;

    LOCAL PROCEDURE DayPeriodTypeOnValidate@19012979();
    BEGIN
      DayPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE WeekPeriodTypeOnValidate@19058475();
    BEGIN
      WeekPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE MonthPeriodTypeOnValidate@19021027();
    BEGIN
      MonthPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE QuarterPeriodTypeOnValidate@19015346();
    BEGIN
      QuarterPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE YearPeriodTypeOnValidate@19064743();
    BEGIN
      YearPeriodTypeOnPush;
    END;

    LOCAL PROCEDURE AccountingPerioPeriodTypeOnVal@19058901();
    BEGIN
      AccountingPerioPeriodTypOnPush;
    END;

    LOCAL PROCEDURE SpecialPeriodPeriodTypeOnValid@19016408();
    BEGIN
      SpecialPeriodPeriodTypeOnPush;
    END;

    BEGIN
    END.
  }
}

