OBJECT Page 11124886 Advice Order Subform Assembly
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Advice Order;
    SourceTable=Table11012055;
    DelayedInsert=Yes;
    PageType=List;
    AutoSplitKey=No;
    OnInit=BEGIN
             "Vendor (Trade Item)Visible" := TRUE;
             ManufacturerVisible := TRUE;
             "Trade ItemVisible" := TRUE;
             "Basic ItemVisible" := TRUE;
           END;

    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01

                 IF NOT ItemSetup.READPERMISSION THEN BEGIN
                   "Basic ItemVisible" := (FALSE);
                   "Trade ItemVisible" := (FALSE);
                   ManufacturerVisible := (FALSE);
                   "Vendor (Trade Item)Visible" := (FALSE);
                 END;

                 FILTERGROUP(4);
                 //when form used in Base Service Order form, the so no. must be visible
                 //CurrPage."Service Order No.".VISIBLE((GETFILTER("Service Order No.") = '') AND (GETFILTER("Project No.") = ''));
                 FILTERGROUP(0);

                 SETRANGE(Processed, FALSE);
               END;

    OnAfterGetRecord=BEGIN
                       InventoryReservation("Item No.");
                       CALCFIELDS("Vendor Name (Trade Item)", "Vendor Name", "Manufacturer Name", "Consent Lines Available",
                                  "Consent Lines Serv. Available");
                       RefQuote := RouteRefMgtCU.GetQuoteOfReference("Purchase Route Reference");
                       RefPurchOrder := RouteRefMgtCU.GetPurchOrderOfReference("Purchase Route Reference");
                       GetItemSpecifications;
                       VendorPrice := GetVendorPrice(Vendor, Price, VendorCurrency);  //db, 20-11-08
                       StrategicPurchMgt.FindContractForAdviceOrder(Rec);
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                  InitRecord;
                  RefQuote := '';
                  RefPurchOrder := '';
                  VendorPrice := 0;      //db, 20-11-08
                  VendorCurrency := '';  //db, 20-11-08

                  LocInventoryQuan := 0;
                  InventoryQuan := 0;
                  ReservedQuan := 0;
                  InventoryUnit := '';

                  FILTERGROUP(4);
                  //when form used in Base Service Order form, fill so no.
                  IF (GETFILTER("Service Order No.") = '') AND (GETFILTER("Base Service Order No.") <> '') THEN
                    VALIDATE("Service Order No.", GETRANGEMIN("Base Service Order No."));
                  FILTERGROUP(0);
                END;

    OnInsertRecord=BEGIN
                     "Quantity (Budget)" := 0;
                     "Quantity (Processed)" := 0;
                     "Process Status" := "Process Status"::Open;
                     VALIDATE(Processed, FALSE); //mg.c, 03-10-11: M28950
                     VALIDATE("Line No.", 0);
                     //** 0=signal for tabletrigger to determine first free number
                     //** autosplitkey not used, because of problems with suppress processed orders
                     //** initiating process data (when Ctrl C+V used)
                   END;

    ActionList=ACTIONS
    {
      { 1100525001;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525021;1 ;ActionGroup;
                      CaptionML=ENU=Display Selection }
      { 1100525017;2 ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=All Advice Orders;
                      Image=OrderTracking;
                      OnAction=BEGIN
                                 Toggle(0);
                               END;
                                }
      { 1100525015;2 ;Action    ;
                      ShortCutKey=Shift+F11;
                      CaptionML=ENU=Open Advice Orders;
                      Image=ViewDocumentLine;
                      OnAction=BEGIN
                                 Toggle(1);
                               END;
                                }
      { 1100525013;2 ;Action    ;
                      ShortCutKey=Shift+Ctrl+F9;
                      CaptionML=ENU=Released Advice Orders;
                      Image=Approve;
                      OnAction=BEGIN
                                 Toggle(3);
                               END;
                                }
      { 1100525011;2 ;Action    ;
                      ShortCutKey=Ctrl+F11;
                      CaptionML=ENU=Processed Advice Orders;
                      Image=Approval;
                      OnAction=BEGIN
                                 Toggle(2);
                               END;
                                }
      { 1100525055;1 ;ActionGroup;
                      CaptionML=ENU=Advice Order }
      { 1100525048;2 ;Action    ;
                      CaptionML=ENU=Compress Advice Orders;
                      Image=Compress;
                      OnAction=BEGIN
                                 Compress;
                               END;
                                }
      { 1100525047;2 ;Action    ;
                      CaptionML=ENU=Split Advice Orders;
                      Image=Split;
                      OnAction=BEGIN
                                 Split;
                               END;
                                }
      { 1100525046;2 ;Action    ;
                      CaptionML=ENU=Divid&e Advice Orders;
                      Image=Allocate;
                      OnAction=BEGIN
                                 Divide;
                               END;
                                }
      { 1100525045;2 ;Action    ;
                      CaptionML=ENU=Release Advice Orders;
                      Image=Approve;
                      OnAction=BEGIN
                                 ApproveLines;
                                 COMMIT;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525044;2 ;Action    ;
                      CaptionML=ENU=Calculate availability;
                      Image=SalesShipment;
                      OnAction=BEGIN
                                 UpdateLines;
                               END;
                                }
      { 1100525053;2 ;Action    ;
                      CaptionML=ENU=Purchase &Line Details;
                      Image=ViewCheck;
                      OnAction=BEGIN
                                 EditLineDetails;
                               END;
                                }
      { 1100525056;1 ;ActionGroup;
                      CaptionML=ENU=Purchase }
      { 1100525041;2 ;Action    ;
                      CaptionML=ENU=Generate Purchase Quote;
                      Image=Quote;
                      OnAction=BEGIN
                                 ProcessGenQuote;
                               END;
                                }
      { 1100525039;2 ;Action    ;
                      ShortCutKey=Shift+F9;
                      CaptionML=ENU=Generate Purchase Orders;
                      Image=MakeOrder;
                      OnAction=BEGIN
                                 ProcessPurchase;
                               END;
                                }
      { 1100525037;2 ;Action    ;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=ENU=Generate Inventory Orders;
                      Image=ItemInvoice;
                      OnAction=BEGIN
                                 ProcessInventory;
                               END;
                                }
      { 1100525035;2 ;Action    ;
                      CaptionML=ENU=Generate &Shipping Details;
                      Image=NewShipment;
                      OnAction=BEGIN
                                 ProcessShippingDetails;
                               END;
                                }
      { 1100525033;2 ;Action    ;
                      CaptionML=ENU=Process Advice Orders Collectively;
                      Image=Approval;
                      OnAction=BEGIN
                                 ProcessRun;
                               END;
                                }
      { 1100525031;2 ;Action    ;
                      CaptionML=ENU=Create ICK Order Files;
                      Image=ElectronicDoc;
                      OnAction=BEGIN
                                 GenerateICKOrder;  //db, 17-08-10: M15519
                               END;
                                }
      { 1100528800;2 ;Action    ;
                      CaptionML=ENU=Update Receipt Date from Project Element;
                      Image=DateRange;
                      OnAction=BEGIN
                                 UpdateReceiptDateByProjectElement;
                               END;
                                }
      { 1100525057;1 ;ActionGroup;
                      CaptionML=ENU=Functions }
      { 1100525027;2 ;Action    ;
                      CaptionML=ENU=Modify Vendor Collectively;
                      Image=Vendor;
                      OnAction=BEGIN
                                 UpdateVendor;
                               END;
                                }
      { 1100525023;2 ;Action    ;
                      CaptionML=ENU=Documents;
                      Image=Documents;
                      OnAction=BEGIN
                                 ShowDocuments;
                               END;
                                }
      { 1100525022;2 ;Action    ;
                      CaptionML=ENU=Link Documents from Object;
                      Image=Links;
                      OnAction=BEGIN
                                 CopyDocLinksFromAssemYardNoObj;
                               END;
                                }
      { 1100525019;1 ;ActionGroup;
                      CaptionML=ENU=&Advice Order }
      { 1100525051;2 ;Action    ;
                      CaptionML=ENU=Actualise Price;
                      Visible=false;
                      Image=RefreshText;
                      OnAction=BEGIN
                                 UpdatePrice;
                               END;
                                }
      { 1100525050;2 ;Action    ;
                      CaptionML=ENU=Update From Selected Quote;
                      Visible=false;
                      Image=Cost;
                      OnAction=BEGIN
                                 UpdateFromSelectedQuote;  //db, 13-03-07
                               END;
                                }
      { 1100525009;2 ;Action    ;
                      CaptionML=ENU=Select Budget Lines;
                      Visible=false;
                      Image=GetLines;
                      OnAction=BEGIN
                                 Budget;
                               END;
                                }
      { 1100525007;2 ;Action    ;
                      CaptionML=ENU=Select Purchase Actions;
                      Visible=false;
                      Image=GetLines;
                      OnAction=BEGIN
                                 PurchaseAction;
                               END;
                                }
      { 1100525005;2 ;Action    ;
                      CaptionML=ENU=Select Recipes;
                      Visible=false;
                      Image=GetLines;
                      OnAction=BEGIN
                                 SelectRecipe;
                               END;
                                }
      { 1100525003;2 ;Action    ;
                      CaptionML=ENU=Import E-plan Item List;
                      Visible=false;
                      Image=Import;
                      OnAction=BEGIN
                                 SelectEPlanItems;  //db, 10-06-09
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Project No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1100526100;2;Field  ;
                SourceExpr="Yard No.";
                Visible=FALSE }

    { 1100525014;2;Field  ;
                SourceExpr="System No.";
                Visible=FALSE }

    { 1100525012;2;Field  ;
                SourceExpr="Entity Type";
                Visible=FALSE }

    { 1100525016;2;Field  ;
                SourceExpr="Entity No.";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr=Element;
                Visible=FALSE }

    { 1100525036;2;Field  ;
                SourceExpr="Description Element";
                Visible=FALSE }

    { 1210190004;2;Field  ;
                SourceExpr="Extension Contract";
                Visible=FALSE }

    { 1100525038;2;Field  ;
                SourceExpr="Description Extension";
                Visible=FALSE }

    { 1100485030;2;Field  ;
                SourceExpr="Plot No.";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Line No.";
                Visible=FALSE }

    { 1100485000;2;Field  ;
                SourceExpr="Service Order No.";
                Visible=FALSE;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Item No.";
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               ItemNoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           HandleItemLookup(1);
                           CurrPage.UPDATE;
                         END;
                          }

    { 1210190012;2;Field  ;
                SourceExpr="Item Category Code";
                Visible=FALSE }

    { 1210190040;2;Field  ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr=Manufacturer;
                Visible=ManufacturerVisible;
                OnLookup=BEGIN
                           GabiVendorRec.HandleVendorLookup(1, Manufacturer);
                         END;
                          }

    { 12  ;2   ;Field     ;
                SourceExpr="Basic Item";
                Visible="Basic ItemVisible";
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               BasicItemOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           HandleItemLookup(2);
                         END;
                          }

    { 14  ;2   ;Field     ;
                SourceExpr="Vendor (Trade Item)";
                Visible="Vendor (Trade Item)Visible";
                OnLookup=VAR
                           lvItem@1100485002 : Code[20];
                         BEGIN
                           IF "Basic Item" = '' THEN BEGIN
                             lvItem := "Vendor (Trade Item)";
                             GabiVendorRec.HandleVendorLookup(2, lvItem);
                             VALIDATE("Vendor (Trade Item)", lvItem);
                           END ELSE BEGIN
                             HandleItemLookup(0);
                           END;
                         END;
                          }

    { 1210190018;2;Field  ;
                DrillDown=No;
                SourceExpr="Vendor Name (Trade Item)";
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Trade Item";
                Visible="Trade ItemVisible";
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               TradeItemOnAfterValidate;
                           END;

                OnLookup=VAR
                           lvTempAdviceOrderLine@1100525002 : TEMPORARY Record 11012055;
                         BEGIN
                           IF "Item No." <> '' THEN BEGIN
                             lvTempAdviceOrderLine.COPY(Rec);  //db, 21-08-09
                             lvTempAdviceOrderLine.VALIDATE("Item No.","Item No.");
                             g_ItemCode := lvTempAdviceOrderLine."Trade Item";
                             g_Vendor := lvTempAdviceOrderLine."Vendor (Trade Item)";
                           END;

                           HandleItemLookup(3);
                         END;
                          }

    { 1100485018;2;Field  ;
                SourceExpr="Item Brand";
                Visible=FALSE }

    { 1100485020;2;Field  ;
                SourceExpr="Item Type";
                Visible=FALSE }

    { 1100485022;2;Field  ;
                SourceExpr="Item Series";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr="Shelf No. (Item)";
                Visible=FALSE }

    { 1100525020;2;Field  ;
                SourceExpr="Shelf No. (SKU)";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr=Vendor;
                OnAssistEdit=BEGIN
                               LookupItemVendor(TRUE);
                             END;
                              }

    { 1210190042;2;Field  ;
                DrillDown=No;
                SourceExpr="Vendor Name";
                Visible=FALSE }

    { 1100525040;2;Field  ;
                SourceExpr="Order Address Code";
                Visible=FALSE }

    { 24  ;2   ;Field     ;
                SourceExpr="Cost Type" }

    { 26  ;2   ;Field     ;
                SourceExpr="Cost Object";
                LookupPageID=Cost Object List;
                OnValidate=BEGIN
                             CostObjectOnAfterValidate;
                           END;
                            }

    { 1100485016;2;Field  ;
                SourceExpr="Cost Component";
                Editable=CostComponentEditable }

    { 28  ;2   ;Field     ;
                SourceExpr=Description }

    { 30  ;2   ;Field     ;
                SourceExpr="Description 2";
                Visible=FALSE }

    { 1210190002;2;Field  ;
                SourceExpr="External Text Block";
                Visible=FALSE }

    { 1210190032;2;Field  ;
                SourceExpr="Price Agreement";
                Visible=FALSE }

    { 1100485014;2;Field  ;
                SourceExpr="Additional Cost (Service)";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                SourceExpr="Quantity (Budget)" }

    { 38  ;2   ;Field     ;
                SourceExpr="Quantity (Advice)";
                OnValidate=BEGIN
                             QuantityAdviceOnAfterValidate;
                           END;
                            }

    { 40  ;2   ;Field     ;
                SourceExpr="Quantity (Processed)";
                Editable=FALSE }

    { 1100485012;2;Field  ;
                CaptionML=ENU=Quantity Received;
                SourceExpr=ReceivedPurchaseQuantity('');
                Editable=FALSE }

    { 1100525034;2;Field  ;
                CaptionML=ENU=Deliverable Quantity;
                SourceExpr=GetDeliverableQuantity }

    { 34  ;2   ;Field     ;
                SourceExpr="Unit of Measure";
                OnValidate=BEGIN
                             UnitofMeasureOnAfterValidate;
                           END;
                            }

    { 1210190010;2;Field  ;
                SourceExpr="Gross Price";
                Visible=FALSE;
                OnValidate=BEGIN
                             GrossPriceOnAfterValidate;
                           END;
                            }

    { 1210190034;2;Field  ;
                SourceExpr="Discount %";
                Visible=FALSE;
                OnValidate=BEGIN
                             Discount37OnAfterValidate;
                           END;
                            }

    { 36  ;2   ;Field     ;
                SourceExpr=Price;
                OnValidate=BEGIN
                             PriceOnAfterValidate;
                           END;
                            }

    { 1100525004;2;Field  ;
                Name=VendorPrice;
                CaptionML=ENU=Direct Unit Cost;
                SourceExpr=VendorPrice;
                Visible=FALSE;
                OnValidate=BEGIN
                             VendorPriceOnAfterValidate;
                           END;
                            }

    { 1100525006;2;Field  ;
                Name=VendorCurrency;
                CaptionML=ENU=Currency;
                SourceExpr=VendorCurrency;
                Visible=FALSE;
                Editable=FALSE }

    { 1100485036;2;Field  ;
                SourceExpr=Amount }

    { 1100525010;2;Field  ;
                SourceExpr="Sales Price";
                Visible=FALSE }

    { 42  ;2   ;Field     ;
                SourceExpr=Transaction;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                             IF InventoryQuan < "Quantity (Advice)" THEN
                               IF Transaction = Transaction::Inventory THEN
                                 MESSAGE(Text000);
                           END;
                            }

    { 1210190006;2;Field  ;
                SourceExpr="Process Status";
                OnValidate=BEGIN
                             //**4PS01.sn
                             IF ("Process Status" = "Process Status"::Open) AND
                                ("Quantity (Processed)" <> 0 )
                             THEN
                               "Process Status" := "Process Status"::"Partly Processed";
                             //**4PS01.en
                               ProcessStatusOnAfterValidate;
                           END;
                            }

    { 44  ;2   ;Field     ;
                SourceExpr=Processed;
                Editable=FALSE }

    { 46  ;2   ;Field     ;
                CaptionML=ENU=Inventory;
                SourceExpr=InventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::All);
                            END;
                             }

    { 1100525008;2;Field  ;
                CaptionML=ENU=Inventory pref. locations;
                SourceExpr=InventoryPrefLocations;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::PrefLocations);
                            END;
                             }

    { 48  ;2   ;Field     ;
                CaptionML=ENU=Reserved for Project;
                SourceExpr=ReservedQuan;
                Editable=FALSE;
                OnDrillDown=VAR
                              ItemJnlLineRec@1210190001 : Record 83;
                            BEGIN
                              IF ItemRec.GET("Item No.") THEN BEGIN
                                ItemJnlLineRec.SETRANGE("Item No.", ItemRec."No.");
                                ItemJnlLineRec."Job No." := "Project No.";
                                PAGE.RUN(0,ItemJnlLineRec);
                              END;
                            END;
                             }

    { 50  ;2   ;Field     ;
                CaptionML=ENU=Base Unit of Measure;
                SourceExpr=InventoryUnit;
                Editable=FALSE }

    { 52  ;2   ;Field     ;
                SourceExpr="Order Date" }

    { 54  ;2   ;Field     ;
                SourceExpr="Delivery Period" }

    { 56  ;2   ;Field     ;
                SourceExpr="Receipt Date";
                OnValidate=BEGIN
                             ReceiptDateOnAfterValidate;
                           END;
                            }

    { 1100525025;2;Field  ;
                SourceExpr="Requested Receipt Date";
                Visible=FALSE }

    { 60  ;2   ;Field     ;
                SourceExpr="Location Code";
                OnValidate=BEGIN
                             IF Transaction = Transaction::Inventory THEN
                               LocRec.GET("Location Code");
                               LocationCodeOnAfterValidate;
                           END;
                            }

    { 1210190008;2;Field  ;
                SourceExpr="Bin Code" }

    { 1100485034;2;Field  ;
                CaptionML=ENU=Location Inventory;
                SourceExpr=LocInventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::Location);
                            END;
                             }

    { 58  ;2   ;Field     ;
                SourceExpr=Deliver }

    { 62  ;2   ;Field     ;
                SourceExpr="Ship To Location" }

    { 1100485038;2;Field  ;
                SourceExpr="Alternative Vendor";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485040;2;Field  ;
                SourceExpr="Alternative Item";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485042;2;Field  ;
                SourceExpr="Alternative Price";
                Visible=FALSE;
                Editable=FALSE }

    { 64  ;2   ;Field     ;
                SourceExpr="Purchase Action";
                Visible=FALSE }

    { 66  ;2   ;Field     ;
                SourceExpr="Purchase Phase";
                Visible=FALSE }

    { 1210190022;2;Field  ;
                SourceExpr="Purchaser Code" }

    { 1210190000;2;Field  ;
                SourceExpr="Negotiation recommended";
                Visible=FALSE }

    { 1210190028;2;Field  ;
                SourceExpr="Ask for Quote" }

    { 1210190026;2;Field  ;
                CaptionML=ENU=Quote No.;
                SourceExpr=RefQuote;
                Visible=FALSE;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefQuote = '') THEN
                             EXIT;

                           IF (COPYSTR(RefQuote, 1, 1) = '<') THEN  // IF Quote No. is '<Nr.>', then more than one quote present
                             RouteRefMgtCU.ShowReferenceQuoteList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Quote);
                             lvPurchHeadRec.SETRANGE("No.", RefQuote);
                             PAGE.RUNMODAL(PAGE::"Purchase Quote", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1210190030;2;Field  ;
                CaptionML=ENU=Purchase Order;
                SourceExpr=RefPurchOrder;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefPurchOrder = '') THEN
                             EXIT;

                           IF (COPYSTR(RefPurchOrder, 1, 1) = '<') THEN  // IF Order No. is '<Nr.>', then more than one order present
                             RouteRefMgtCU.ShowReferencePurchOrderList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Order);
                             lvPurchHeadRec.SETRANGE("No.", RefPurchOrder);
                             PAGE.RUNMODAL(PAGE::"Purchase Order", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1210190024;2;Field  ;
                SourceExpr="Purchase Route Reference";
                Visible=FALSE }

    { 1100525042;2;Field  ;
                SourceExpr="ICK Order";
                Visible=FALSE }

    { 1210190036;2;Field  ;
                SourceExpr="Created by";
                Visible=FALSE }

    { 1100525032;2;Field  ;
                SourceExpr="Created by Employee No.";
                Visible=FALSE }

    { 1210190014;2;Field  ;
                SourceExpr="Date Created";
                Visible=FALSE }

    { 1210190016;2;Field  ;
                SourceExpr="Modified by";
                Visible=FALSE }

    { 1210190020;2;Field  ;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1100485024;2;Field  ;
                SourceExpr="E-Plan Item";
                Visible=FALSE }

    { 1100485026;2;Field  ;
                SourceExpr="Scheme Code";
                Visible=FALSE }

    { 1100485028;2;Field  ;
                SourceExpr="Comments for Logistics";
                Visible=FALSE }

    { 1100526000;2;Field  ;
                SourceExpr="Main Project No.";
                Visible=FALSE }

    { 1100525018;2;Field  ;
                SourceExpr="Cable Transit Pos.";
                Visible=FALSE }

    { 1100525000;2;Field  ;
                SourceExpr="Consent Lines Available";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525002;2;Field  ;
                SourceExpr="Consent Lines Serv. Available";
                Visible=FALSE }

    { 1100528400;2;Field  ;
                SourceExpr="Consented Date-Time" }

    { 1100525024;2;Field  ;
                SourceExpr="Contract Type" }

    { 1100525026;2;Field  ;
                CaptionML=ENU=Blanket Order;
                SourceExpr=StrategicPurchMgt.NumberOfBlOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderAdviceOrder(Rec);
                         END;
                          }

    { 1100525030;2;Field  ;
                CaptionML=ENU=Blanket Order Line;
                SourceExpr=StrategicPurchMgt.NumberOfBlOrderLinesAdvOrder(Rec);
                Editable=FALSE;
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1100525028;2;Field  ;
                CaptionML=ENU=Quantity in Blanket Orders;
                SourceExpr=StrategicPurchMgt.QtyInBlanketOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1210190038;2;Field  ;
                CaptionML=ENU=Documents;
                SourceExpr=HasDocumentLinks;
                Editable=FALSE }

    { 1100528600;2;Field  ;
                SourceExpr="Price History 0 Exists" }

  }
  CODE
  {
    VAR
      ProjSetup@1100525006 : Record 315;
      ItemSetup@1100525005 : Record 11012300;
      LocRec@1210190000 : Record 14;
      ItemRec@1100525008 : Record 27;
      AdviceRec@1100485001 : Record 11012055;
      GabiVendorRec@1100485003 : Record 11012304;
      PrintDoc@1100485005 : Codeunit 229;
      AdviceCu@1210190012 : Codeunit 11012041;
      RouteRefMgtCU@1210190005 : Codeunit 11012045;
      InventoryQuan@11012010 : Decimal;
      ReservedQuan@11012011 : Decimal;
      LocInventoryQuan@1100485000 : Decimal;
      InventoryUnit@11012012 : Code[10];
      RefQuote@1210190004 : Code[20];
      RefPurchOrder@1210190018 : Code[20];
      Text000@1210190017 : TextConst 'ENU=Unsufficient Stock present';
      VendorPrice@1100525000 : Decimal;
      VendorCurrency@1100525001 : Code[20];
      ShowLocations@1100525002 : 'All,PrefLocations,Location';
      g_ItemCode@1100525004 : Code[20];
      g_Vendor@1100525003 : Code[20];
      StrategicPurchMgt@1100525007 : Codeunit 11020211;
      DPA_IsHardFilter@1100000999 : Boolean;
      "Basic ItemVisible"@19042756 : Boolean INDATASET;
      "Trade ItemVisible"@19042429 : Boolean INDATASET;
      ManufacturerVisible@19015155 : Boolean INDATASET;
      "Vendor (Trade Item)Visible"@19043796 : Boolean INDATASET;
      CostComponentEditable@1210190001 : Boolean INDATASET;
      CostTypeEditable@1210190002 : Boolean INDATASET;
      UnitofMeasureEditable@1210190003 : Boolean INDATASET;
      VendorPriceEditable@1210190006 : Boolean INDATASET;
      ProcessStatusEditable@1210190007 : Boolean INDATASET;

    PROCEDURE Budget@8();
    BEGIN
      IF "Record Type" = "Record Type"::ServOrder THEN
        AdviceCu.SelectServiceBudget("Service Order No.")
      ELSE
        AdviceCu.SelectProjectBudget("Project No.", '', '');
    END;

    PROCEDURE PurchaseAction@10();
    BEGIN
      AdviceCu.SelectPurchaseAction("Project No.");
    END;

    PROCEDURE ProcessGenQuote@1210190006();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessGenQuote(AdviceOrderLine);
    END;

    PROCEDURE ProcessPurchase@2();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessPurchase(AdviceOrderLine, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessInventory@3();
    VAR
      Text001@1100525000 : TextConst 'ENU=Do you want to recalculate the lines first?';
      AdviceOrderLine@1100525001 : Record 11012055;
      AdviceOrderLine2@1100525002 : Record 11012055;
      Counter@1100525003 : Integer;
      Text002@1100525004 : TextConst 'ENU=There are %1 inverntory entries created in Item Journal.';
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      CLEAR(AdviceCu); //CALL C019988 newline
      ProjSetup.GET;
      IF (ProjSetup."Inventory Calc. Advice Order" = ProjSetup."Inventory Calc. Advice Order"::Availability) AND
        CONFIRM(Text001)
      THEN BEGIN
        AdviceCu.SetSkipMessage;
        IF NOT AdviceOrderLine.ISEMPTY THEN                              //CALL C019988 newline
          AdviceCu.PreSetToTypeAndBatch(AdviceOrderLine, FALSE, TRUE);   //CALL C019988 newline

        IF AdviceOrderLine.FINDSET(TRUE,TRUE) THEN
          REPEAT
            AdviceOrderLine2 := AdviceOrderLine;
            AdviceOrderLine2.SETRECFILTER;
            AdviceOrderLine2.GetDefaults;
            AdviceOrderLine2.MODIFY;
            AdviceOrderLine2.MARK(TRUE);
            Counter += AdviceCu.ProcessInventory(AdviceOrderLine2,FALSE,FALSE); //PBRun= false, ItemRun=false
          UNTIL AdviceOrderLine.NEXT = 0;
          MESSAGE(Text002,Counter);
      END ELSE
        AdviceCu.ProcessInventory(AdviceOrderLine, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessRun@1210190003();
    BEGIN
      AdviceCu.ProcessRun(FALSE);  //ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Toggle@11(Phase@11012000 : Integer);
    BEGIN
      IF Phase = 0 THEN
        SETRANGE(Processed);
      IF Phase = 1 THEN
        SETRANGE(Processed, FALSE);
      IF Phase = 2 THEN
        SETRANGE(Processed, TRUE);
      IF Phase = 3 THEN BEGIN
        SETRANGE("Process Status", "Process Status"::Released);
        SETRANGE(Processed, FALSE);
      END ELSE BEGIN
        SETRANGE("Process Status");
      END;
    END;

    PROCEDURE Compress@1();
    BEGIN
      AdviceCu.CompressLines(Rec);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Split@9();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.FINDSET THEN; //mg, 22-01-2014: C010838
      AdviceCu.SplitLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Divide@1100525001();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.FINDSET THEN; //mg, 22-01-2014: C010838
      AdviceCu.SplitLinesPrefLoc(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE InventoryReservation@4(lItem@11012000 : Code[20]);
    BEGIN
      LocInventoryQuan := 0;
      InventoryQuan := 0;
      ReservedQuan := 0;
      InventoryUnit := '';

      IF ItemRec.GET(lItem) THEN BEGIN
        //**4PS.sn
        IF "Record Type" = "Record Type"::Project THEN
          ItemRec.SETRANGE("Project Filter","Project No.");
        //**4PS.en
        ItemRec.CALCFIELDS(Inventory, "Qty. on Item Journal Project", "Qty. on Item Journal Service");
        IF "Location Code" <> '' THEN
          LocInventoryQuan := GetInventory("Location Code",ItemRec, TRUE);
        InventoryQuan := GetInventory('',ItemRec, TRUE);
        ReservedQuan := ItemRec."Qty. on Item Journal Project" + ItemRec."Qty. on Item Journal Service";
        InventoryUnit := ItemRec."Base Unit of Measure";
      END;
    END;

    PROCEDURE EditText@1210190000();
    BEGIN
      AdviceCu.EditText(Rec);
    END;

    PROCEDURE HandleItemLookup@1210190001(ZoomType@1210190000 : Integer);
    BEGIN
      LookupItemData(ZoomType,g_ItemCode,g_Vendor);
      IF ZoomType = -1 THEN  //db, 09-03-07 (call 8283)
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ApproveLines@1210190002();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ApproveLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ShowPurchRouteRef@1210190004();
    BEGIN
      RouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
    END;

    PROCEDURE UpdatePrice@1210190007();
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN  //0=project, 1=service
        AdviceCu.UpdateActualPrice(0, "Project No.")
      ELSE
        AdviceCu.UpdateActualPrice(1, "Service Order No.");
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE PrintProjectAdviceSelect@1100485001();
    BEGIN
      AdviceRec.COPY(Rec);
      AdviceRec.SETRANGE("Record Type","Record Type"::Project);
      PrintDoc.PrintProjAdvice(AdviceRec);
    END;

    PROCEDURE PrintServiceAdviceSelect@1100485002();
    BEGIN
      AdviceRec.COPY(Rec);
      FILTERGROUP(4);
      IF GETFILTER("Service Order No.") <> '' THEN
        Rec.COPYFILTER("Service Order No.", AdviceRec."Service Order No.");
      IF GETFILTER("Base Service Order No.") <> '' THEN
        Rec.COPYFILTER("Base Service Order No.", AdviceRec."Base Service Order No.");
      FILTERGROUP(0);
      AdviceRec.SETRANGE("Record Type","Record Type"::ServOrder);
      PrintDoc.PrintServAdvice(AdviceRec);
    END;

    PROCEDURE ProcessShippingDetails@1100485003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessShippingDetails(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateVendor@1100485000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
      ModifyItemVendor@1100485000 : Page 11020420;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      ModifyItemVendor.SetAdviceOrderRec(AdviceOrderLine);
      ModifyItemVendor.RUNMODAL;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateFromSelectedQuote@1100485004();
    BEGIN
      AdviceCu.UpdateQuotePrice(Rec);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SelectEPlanItems@1100525004();
    VAR
      ImportFromEplan@1100525001 : XMLport 11012029;
      AdviceOrderRec@1100525000 : Record 11012055;
    BEGIN
      //db, 10-06-09
      AdviceOrderRec.SETRANGE("Record Type",AdviceOrderRec."Record Type"::Project);
      AdviceOrderRec.SETRANGE("Project No.","Project No.");
      ImportFromEplan.SETTABLEVIEW(AdviceOrderRec);
      ImportFromEplan.RUN;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SelectRecipe@1100485005();
    VAR
      RecipeFrm@1100485001 : Page 11012164;
    BEGIN
      CLEAR(RecipeFrm);
      //RecipeFrm.LOOKUPMODE(TRUE);  //db, 17-08-09
      RecipeFrm.SetSelection(DATABASE::"Advice Order Line",
        "Project No.","Service Order No.",Element,"Extension Contract",'','','','','',TRUE);
      RecipeFrm.RUNMODAL;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE DrillDownInventory@1100525002(ShowLocations@1100525003 : 'All,PrefLocations,Location');
    BEGIN
      AdviceCu.DrillDownInventory(Rec, ShowLocations);  //db, 09-02-09
    END;

    PROCEDURE UpdateLines@1100525003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      //UpdateLines;  //db, 23-08-10: M22385
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.UpdateLines(AdviceOrderLine);  //db, 23-08-10: M22385
      CurrPage.UPDATE(TRUE);  //db, 06-08-10 (PT)
    END;

    PROCEDURE SetContractFilter@1100525008(ContractFilter@1100525000 : ' ,No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order');
    BEGIN
      CASE ContractFilter OF
        ContractFilter::" ":
          SETRANGE("Contract Type");
        ContractFilter::"No Contract":
          SETRANGE("Contract Type","Contract Type"::"No Contract");
        ContractFilter::Contract:
          SETRANGE("Contract Type","Contract Type"::Contract);
        ContractFilter::"Contract with Discount Agreement":
          SETRANGE("Contract Type","Contract Type"::"Contract with Discount Terms");
        ContractFilter::"General Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"General Blanket Order");
        ContractFilter::"Project Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Project Blanket Order");
        ContractFilter::"Service Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Service Blanket Order");
      END;
      CurrPage.UPDATE;
    END;

    PROCEDURE SetProcessStatusFilter@1100525007(ProcessStatusFilter@1100525000 : Text[1024]) : Text[1024];
    BEGIN
      IF ProcessStatusFilter <> '' THEN
        SETFILTER("Process Status",ProcessStatusFilter)
      ELSE
        SETRANGE("Process Status");
      CurrPage.UPDATE;
    END;

    PROCEDURE LocationCodeEditable@1100525005() : Boolean;
    VAR
      Item@1100525000 : Record 27;
    BEGIN
      IF Transaction = Transaction::Inventory THEN
        EXIT(TRUE)
      ELSE
        IF (Transaction IN [Transaction::Purchase, Transaction::Requisition]) AND Item.GET("Item No.") THEN
          EXIT(Item."Blanket Order Plan Item");
    END;

    PROCEDURE ShowItemAvailbyPeriod@1100525006();
    VAR
      Item@1100525000 : Record 27;
    BEGIN
      IF "Item No." = '' THEN EXIT; //**4PS.n
      //**4PS
      IF Item.GET("Item No.") THEN BEGIN
        // Item.SETFILTER("Project Filter",'=%1',"Project No."); //**4PS.o
        PAGE.RUN(PAGE::"Item Availability by Periods",Item);
      END;
    END;

    PROCEDURE GenerateICKOrder@1100525009();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.GenerateICKOrder(AdviceOrderLine);  //db, 17-08-10: M15519
    END;

    PROCEDURE ShowDocuments@1100528400();
    VAR
      DocumentFilters@1100528401 : Codeunit 11012432;
      RecRef@1100528400 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Global Dimension 1 Code", FALSE, TRUE);
    END;

    PROCEDURE CopyDocLinksFromAssemYardNoObj@1100528401();
    VAR
      AssemblyYardNumberObject@1100528400 : Record 11020596;
      DocumentLinkMgt@1100528401 : Codeunit 11012401;
      AssembYardNoObjRecRef@1100528402 : RecordRef;
      AdviceOrderLineRecRef@1100528403 : RecordRef;
    BEGIN
      IF AssemblyYardNumberObject.GET(
          "Project No.",
          "Yard No.",
          "Entity Type",
          "System No.",
          "Entity No.")
      THEN BEGIN
        AssembYardNoObjRecRef.GETTABLE(AssemblyYardNumberObject);
        AdviceOrderLineRecRef.GETTABLE(Rec);
        DocumentLinkMgt.CopyDocLinks(AssembYardNoObjRecRef, AdviceOrderLineRecRef);
      END;
    END;

    PROCEDURE EditLineDetails@1210190008();
    VAR
      PurchaseLineDetail@1210190000 : Record 11020660;
    BEGIN
      //**4PS  //kzwerver, 110606, n, #27784
      PurchaseLineDetail.ShowCard(PurchaseLineDetail."Line Type"::"Advice Order",
        PurchaseLineDetail."Record Type"::Project, "Project No.", "Yard No.", "System No.", "Entity Type",
        "Entity No.", '', '', "Line No.");
    END;

    LOCAL PROCEDURE ItemNoOnAfterValidate@19061248();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BasicItemOnAfterValidate@19054956();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE TradeItemOnAfterValidate@19075338();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE CostObjectOnAfterValidate@19061648();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityAdviceOnAfterValidate@19073676();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE UnitofMeasureOnAfterValidate@19002161();
    BEGIN
      IF "Quantity (Processed)" = 0 THEN
        IF "Quantity (Budget)" <> 0 THEN
          "Quantity (Budget)" := "Quantity (Advice)";
    END;

    LOCAL PROCEDURE GrossPriceOnAfterValidate@19036441();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE Discount37OnAfterValidate@19039847();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE PriceOnAfterValidate@19065147();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE VendorPriceOnAfterValidate@19037936();
    BEGIN
      VALIDATE(Price, ConvertVendorPrice(Vendor, VendorPrice));  //db, 20-11-08
    END;

    LOCAL PROCEDURE ProcessStatusOnAfterValidate@19014714();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ReceiptDateOnAfterValidate@19074743();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE LocationCodeOnAfterValidate@19034787();
    BEGIN
      InventoryReservation("Item No.");
    END;

    PROCEDURE SetEditable@1210190005();
    VAR
      JobsSetup@1210190001 : Record 315;
      ServiceSetup@1210190000 : Record 11012800;
    BEGIN
      //**4PS.sn
      IF JobsSetup.GET() THEN;
      IF ServiceSetup.GET() THEN;

      CostComponentEditable := ((("Project No." <> '') AND JobsSetup."Cost Component Editable") OR
                                         (("Service Order No." <> '') AND ServiceSetup."Cost Component Editable") OR
                                         (("Project No." = '') AND ("Service Order No." = '')));
      //**4PS.en
      CostTypeEditable := (("Item No." + "Basic Item" + "Trade Item") = '');
      UnitofMeasureEditable := ("Quantity (Processed)" = 0);
      VendorPriceEditable := (VendorCurrency<>'');  //db, 20-11-08
      ProcessStatusEditable := ("Process Status" <> "Process Status"::Processed);
      //LocationCodeEditable
    END;

    PROCEDURE UpdateReceiptDateByProjectElement@1100528800();
    VAR
      AdviceOrderLine@1100528800 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.UpdateReceiptDateFromProjectElement(AdviceOrderLine);
    END;

    BEGIN
    {
      4PS HBK 13-07-09: Added Field Number Of Blanket Order Lines
      4PS HBK 03-06-10: M15722 Field "Order Address Code" added
      4PS HBK 09-06-10: TM4856 Added projectfilter in InventoryReservation
    }
    END.
  }
}

