OBJECT Page 11125149 Import External Budget Service
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import External Budget Service;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=NavigatePage;
    OnOpenPage=BEGIN
                 ProjSetup.GET;
                 PathName := ProjSetup."Pathname External Estimates";  // Default path
                 FileName := '';
                 xImportType := ImportType;
                 FillFileExtensionFilter();
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;Action    ;
                      CaptionML=ENU=Import;
                      InFooterBar=Yes;
                      Image=ImportDatabase;
                      OnAction=BEGIN
                                 CurrPage.EDITABLE(FALSE);
                                 StartImport();
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100409000;1;Field  ;
                CaptionML=ENU=Import Type;
                OptionCaptionML=ENU=" ,,,IBIS-Trad TXT Estimate,,IBIS-Trad XML Estimate";
                SourceExpr=ImportType;
                OnValidate=BEGIN
                             IF ImportType <> ImportType THEN BEGIN
                               FileName := '';
                               xImportType := ImportType;
                             END;
                             FillFileExtensionFilter();
                           END;
                            }

    { 1   ;1   ;Field     ;
                CaptionML=ENU=Service Order No.;
                SourceExpr=ServOrderNo;
                TableRelation="Service Order";
                OnValidate=BEGIN
                             ValidateServiceOrder(ServOrderNo);
                           END;
                            }

    { 1210190001;1;Field  ;
                CaptionML=ENU=Filename;
                SourceExpr=FileName;
                OnValidate=BEGIN
                             ValidateFileName();
                           END;

                OnAssistEdit=VAR
                               PathAndFileName@1100525000 : Text;
                             BEGIN
                               IF FileName = '' THEN
                                 PathAndFileName := PathName + FileFilter
                               ELSE
                                 PathAndFileName := PathName + FileName;
                               PathAndFileName := FileMgt.OpenFileDialog('', PathAndFileName, STRSUBSTNO('%1 (%2)|%2', ImportType, FileFilter));
                               IF PathAndFileName <> '' THEN
                                 FileMgt.SplitFileAbsPathName(PathAndFileName, PathName, FileName);
                             END;
                              }

  }
  CODE
  {
    VAR
      ProjSetup@1100485002 : Record 315;
      Errors@1210190000 : Record 11012051;
      FileMgt@1100525006 : Codeunit 419;
      ImportType@1100409001 : ' ,,,IBIS-Trad TXT,,IBIS-Trad XML';
      xImportType@1100409002 : Option;
      ServOrderNo@11012004 : Code[20];
      PathName@1100485004 : Text[250];
      FileName@1210190002 : Text[100];
      Text001@1100409000 : TextConst 'ENU=%1 may not be empty';
      Text002@1100485006 : TextConst 'ENU=Budget Lines are already present. Continue import?';
      Text003@1100409003 : TextConst 'ENU=Import Type';
      Text004@1100409004 : TextConst 'ENU=Filename';
      Text005@1100409005 : TextConst 'ENU=Must be a ''%1'' file';
      Text006@1100409006 : TextConst 'ENU=First character of %1 must be a ''%2''';
      FileExtension@1100409007 : Text[10];
      FileFilter@1100409008 : Text[30];

    PROCEDURE SetSelections@1(ServiceOrderNo@11012000 : Code[20]);
    VAR
      ProjRec@1100525001 : Record 11072003;
      ProjSetup@1100525000 : Record 315;
    BEGIN
      ServOrderNo := ServiceOrderNo;
    END;

    LOCAL PROCEDURE FillFileExtensionFilter@1100409002();
    BEGIN
      CASE ImportType OF
        ImportType::"IBIS-Trad TXT":
          BEGIN
            FileExtension := '.txt';
            FileFilter := 'b*' + FileExtension;
            EXIT;
          END;
        ImportType::"IBIS-Trad XML":
          FileExtension := '.xml';
      END;
      FileFilter := '*' + FileExtension;
    END;

    LOCAL PROCEDURE ValidateServiceOrder@1100485001(ServiceOrderNo@1100485000 : Code[20]);
    VAR
      ServOrder@1100409000 : Record 11012823;
    BEGIN
      IF ServiceOrderNo = '' THEN
        ERROR(Text001, Errors.FIELDCAPTION("Service Order No."));

      ServOrder.GET(ServiceOrderNo);
    END;

    LOCAL PROCEDURE ValidateFileName@1100409001();
    BEGIN
      CASE ImportType OF
        ImportType::"IBIS-Trad TXT",
        ImportType::"IBIS-Trad XML":
          BEGIN
            IF (STRLEN(FileName) < 4) THEN
              ERROR(Text005, FileExtension)
            ELSE BEGIN
              IF LOWERCASE(COPYSTR(FileName, STRLEN(FileName)-3, 4)) <> FileExtension THEN
                ERROR(Text005, FileExtension);
            END;
          END;
      END;

      IF (ImportType = ImportType::"IBIS-Trad TXT") AND (LOWERCASE(COPYSTR(FileName,1,1)) <> 'b') THEN
        ERROR(Text006, Text004);
    END;

    LOCAL PROCEDURE StartImport@1210190002();
    VAR
      BudgetLine@1100409000 : Record 11012875;
      ImportTradTXT@1100485001 : Codeunit 11012873;
      ImportTradXML@1100409001 : Codeunit 11012875;
    BEGIN
      IF ImportType = 0 THEN
        ERROR(Text001, Text003);
      ValidateServiceOrder(ServOrderNo);
      IF FileName = '' THEN
        ERROR(Text001, Text004);
      ValidateFileName();

      //Check Budget Lines Present
      BudgetLine.SETRANGE("Budget Type", BudgetLine."Budget Type"::Order);
      BudgetLine.SETRANGE("Service Order No.", ServOrderNo);
      IF NOT BudgetLine.ISEMPTY THEN BEGIN
        IF NOT CONFIRM(Text002) THEN
          EXIT;
      END;

      Errors.RESET;
      Errors.SETRANGE("User ID", USERID);
      Errors.SETRANGE("Source Type", Errors."Source Type"::"Import Budget");
      Errors.DELETEALL;
      COMMIT;

      CASE ImportType OF
        ImportType::"IBIS-Trad TXT":
          ImportTradTXT.ImportTradTxtBudget(ServOrderNo, PathName, FileName);
        ImportType::"IBIS-Trad XML":
          BEGIN
            ImportTradXML.SetSelections(ServOrderNo);
            ImportTradXML.ProcessFile(PathName+FileName);
          END;
      END;

      Errors.RESET;
      Errors.SETRANGE("User ID", USERID);
      Errors.SETRANGE("Source Type", Errors."Source Type"::"Import Budget");
      IF Errors.FINDFIRST THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::Errors, Errors);
      END;
    END;

    BEGIN
    {
      DP00693  Copied from Project (P11012390)  Only import TRAD-TXT and TRAD-XML in Service Order Budget Lines
    }
    END.
  }
}

