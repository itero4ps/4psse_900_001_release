OBJECT Page 11125198 Service Call Wizard
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Service Call Wizard;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=NavigatePage;
    OnInit=BEGIN
             SLStructureNoEnable := TRUE;
             ReportProcedureVisible := TRUE;
             ContractAgreementVisible := TRUE;
             CustomerTermsVisible := TRUE;
             ActualContractVisible := TRUE;
             StdObjectsVisible := TRUE;
             InternalTextVisible := TRUE;
             LocationsVisible := TRUE;
             NextEnable := TRUE;
             ObjectUnknownVisible := TRUE;
             NotFoundVisible := TRUE;
             ClearVisible := TRUE;
             ExistingCustomerEditable := TRUE;
           END;

    OnOpenPage=VAR
                 CentralDataManagement@1100525000 : Codeunit 11012010;
               BEGIN
                 gvWizardStepOpt:= gvWizardStepOpt::FirstContact;

                 gvWizProblemText.SETRANGE("Table Name", gvWizProblemText."Table Name"::"Service Call");
                 gvWizProblemText.SETRANGE("No.", 'UNKNOWN');
                 gvWizProblemText.SETRANGE("Table Field", 60);
                 gvWizProblemText.SETRANGE("Created by", USERID);
                 gvWizProblemText.DELETEALL;
                 gvWizProblemText.SetUpNewLine;

                 gvWizInternalText.SETRANGE("Table Name", gvWizInternalText."Table Name"::"Service Call");
                 gvWizInternalText.SETRANGE("No.", 'UNKNOWN');
                 gvWizInternalText.SETRANGE("Table Field", 91);
                 gvWizInternalText.SETRANGE("Created by", USERID);
                 gvWizInternalText.DELETEALL;
                 gvWizInternalText.SetUpNewLine;

                 gvWizResolveText.SETRANGE("Table Name", gvWizResolveText."Table Name"::"Service Call");
                 gvWizResolveText.SETRANGE("No.", 'UNKNOWN');
                 gvWizResolveText.SETRANGE("Table Field", 75);
                 gvWizResolveText.SETRANGE("Created by", USERID);
                 gvWizResolveText.DELETEALL;
                 gvWizResolveText.SetUpNewLine;

                 gvExistingCustOpt := gvExistingCustOpt::Yes;
                 //IF NOT CentralDataManagement.InsertingCustomerIsAllowed THEN
                 //  ExistingCustomerEditable := FALSE;

                 ShowStep(TRUE);
               END;

    OnQueryClosePage=BEGIN
                       IF NOT FinishButtonUsed THEN
                         EXIT(CONFIRM(Text011));
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=Back;
                      CaptionML=ENU=&Back;
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 //PerformPrevWizardStatus;
                                 PerfromPreviousWizardStep;
                                 ShowStep(TRUE);
                                 //CurrPage.UPDATE(TRUE); //mg.o, 17-10-10: C003132
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=Next;
                      CaptionML=ENU=&Next;
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF NOT CheckStatus THEN
                                   EXIT;
                                 ShowStep(FALSE);
                                 PerfromNextWizardStep;
                                 InitCurrentStep;
                                 ShowStep(TRUE);
                                 //CurrPage.UPDATE(TRUE); //mg.o, 17-10-10: C003132
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      Promoted=No;
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Completed;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100528601 : Record 11012823;
                                 CompletionCheckManagement@1210190001 : Codeunit 11012252;
                                 ServiceCallRecordRef@1210190002 : RecordRef;
                                 CreateServiceOrderfromCallFRM@1210190003 : Page 11125229;
                                 ReplanServiceOrder@1100528602 : Page 11126465;
                                 NextStepAfterSOCreation@1100528600 : ' ,Service Order Card,Plan Service Order';
                               BEGIN
                                 IF NOT CheckStatus THEN
                                   EXIT;
                                 FinishWizard;
                                 COMMIT;
                                 CurrPage.EDITABLE(FALSE);

                                 ServiceCallRecordRef.GETTABLE(gvServiceCallRec);
                                 CompletionCheckManagement.ShowIncompleteFieldsNoMessages(ServiceCallRecordRef);

                                 IF CreateServiceOrder THEN BEGIN
                                   gvServiceCallRec.VALIDATE("Next Step", gvServiceCallRec."Next Step"::ServiceOrder);
                                   gvServiceCallRec.MODIFY(TRUE);
                                   COMMIT;
                                   CreateServiceOrderfromCallFRM.SetDefaults(gvServiceCallRec."No.");
                                   CreateServiceOrderfromCallFRM.RUNMODAL;
                                   CreateServiceOrderfromCallFRM.GetNextStep(NextStepAfterSOCreation);
                                 END;

                                 CASE NextStepAfterSOCreation OF
                                   NextStepAfterSOCreation::" ":
                                     PAGE.RUN(PAGE::"Service Call", gvServiceCallRec);
                                   NextStepAfterSOCreation::"Service Order Card":
                                     BEGIN
                                       gvServiceCallRec.FIND('=');
                                       IF gvServiceCallRec."Service Order No." <> '' THEN BEGIN
                                         ServiceOrder.GET(gvServiceCallRec."Service Order No.");
                                         ServiceOrder.ShowServiceOrderCard;
                                       END;
                                     END;
                                   NextStepAfterSOCreation::"Plan Service Order":
                                     BEGIN
                                       gvServiceCallRec.FIND('=');
                                       IF gvServiceCallRec."Service Order No." <> '' THEN BEGIN
                                         ServiceOrder.GET(gvServiceCallRec."Service Order No.");
                                         ServiceOrder.SETRECFILTER;
                                         ReplanServiceOrder.SetReplanData(ServiceOrder, TODAY, 1, 0, FALSE, FALSE, TRUE, TRUE);
                                         ReplanServiceOrder.RUN;
                                       END;
                                     END;
                                 END;

                                 FinishButtonUsed := TRUE;
                                 CurrPage.CLOSE;
                               END;
                                }
      { 1210190010;1 ;Action    ;
                      CaptionML=ENU=&Object Unknown;
                      Promoted=Yes;
                      Enabled=ObjectUnknownVisible;
                      Image=WorkCenterLoad;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 gvStandardObjectRec.INIT;
                                 gvServiceObjectRec."No." := '';

                                 ShowStep(FALSE);
                                 PerfromNextWizardStep;
                                 InitCurrentStep;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100409002;1 ;Action    ;
                      CaptionML=ENU=Contacts;
                      Promoted=Yes;
                      Image=ContactPerson;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Contact@1100409000 : Record 5050;
                               BEGIN
                                 PAGE.RUNMODAL(0, Contact);
                               END;
                                }
      { 1100409001;1 ;Action    ;
                      CaptionML=ENU=Internal Text;
                      Promoted=Yes;
                      Enabled=InternalTextEnabled;
                      Image=EditLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PAGE.RUNMODAL(PAGE::"Service Call Wiz. Serv. Text", gvWizInternalText);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=FirstContact;
                Visible=FirstContactVisible;
                GroupType=Group }

    { 1100525033;2;Field  ;
                CaptionML=ENU=First Contact;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100528660;2;Field  ;
                Name=tbCallingContact;
                CaptionML=ENU=Calling Contact;
                SourceExpr=gvServiceCallRec."Calling Contact" }

    { 1100528662;2;Field  ;
                Name=tbCallingAccount;
                CaptionML=ENU=Calling Account;
                SourceExpr=gvServiceCallRec."Calling Account" }

    { 1100528664;2;Field  ;
                CaptionML=ENU=Calling Phone No.;
                SourceExpr=gvServiceCallRec."Calling Phone No." }

    { 1100528665;2;Field  ;
                CaptionML=ENU=Description;
                SourceExpr=gvServiceCallRec.Description }

    { 1100525004;1;Group  ;
                Name=PostCodeHouseNo;
                Visible=PostCodeHouseNoVisible;
                GroupType=Group }

    { 1100525036;2;Field  ;
                CaptionML=ENU=Lookup Location;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525000;2;Field  ;
                CaptionML=ENU=Location;
                SourceExpr=gvLocRec."No.";
                OnDrillDown=BEGIN
                              IF PAGE.RUNMODAL(PAGE::"Service Call Wiz. Locations", gvLocRec) = ACTION::LookupOK THEN;
                            END;
                             }

    { 1100525001;2;Field  ;
                CaptionML=ENU=Description;
                SourceExpr=gvLocRec.Description;
                Editable=false }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Address;
                SourceExpr=gvLocRec.Address;
                Editable=false }

    { 1100525003;2;Field  ;
                CaptionML=ENU=Post Code;
                SourceExpr=gvLocRec."Post Code";
                Editable=false }

    { 1100525005;2;Field  ;
                CaptionML=ENU=City;
                SourceExpr=gvLocRec.City }

    { 1100525019;1;Group  ;
                Name=CreateLocation;
                Visible=CreateLocationVisible;
                GroupType=Group }

    { 1100525038;2;Field  ;
                CaptionML=ENU=Location Data;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525018;2;Field  ;
                CaptionML=ENU=Description;
                SourceExpr=gvLocDesctxt }

    { 1100525017;2;Field  ;
                CaptionML=ENU=Description 2;
                SourceExpr=gvLocDesc2Txt }

    { 1100525016;2;Field  ;
                CaptionML=ENU=Address;
                SourceExpr=gvLocAddressTxt }

    { 1100525015;2;Field  ;
                CaptionML=ENU=Address 2;
                SourceExpr=gvLocAddress2Txt }

    { 1100525014;2;Field  ;
                CaptionML=ENU=Post Code;
                SourceExpr=gvLocPostCodeRec.Code;
                OnLookup=BEGIN
                           gvLocPostCodeRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Post Codes",gvLocPostCodeRec) = ACTION::LookupOK THEN BEGIN
                             gvLocCityTxt := gvLocPostCodeRec.City;
                             CurrPage.UPDATE(TRUE);
                           END;
                         END;
                          }

    { 1100525013;2;Field  ;
                CaptionML=ENU=City;
                SourceExpr=gvLocCityTxt }

    { 1100525012;2;Field  ;
                CaptionML=ENU=Country/Region Code;
                SourceExpr=gvLocCountryRec.Code;
                OnLookup=BEGIN
                           gvLocCountryRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Countries/Regions",gvLocCountryRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525011;2;Field  ;
                CaptionML=ENU=Phone No.;
                SourceExpr=gvLocPhoneNo }

    { 1100525010;2;Field  ;
                CaptionML=ENU=Mobile Phone No.;
                SourceExpr=gvLocMobilePhoneNo }

    { 1100525009;2;Field  ;
                CaptionML=ENU=E-Mail;
                SourceExpr=gvLocEmail }

    { 1100525008;2;Field  ;
                SourceExpr=gvLocGlobalDim1Rec.Code;
                CaptionClass='1,1,1';
                OnValidate=VAR
                             ServiceLocation@1210190002 : Record 11012801;
                             DimensionManagement@1210190001 : Codeunit 408;
                             DPA_IsHardFilter@1210190000 : Boolean;
                           BEGIN
                             DPA_IsHardFilter := ServiceLocation.DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                             DimensionManagement.CheckDepartmAuthWithFilterType(
                               DATABASE::"Service Location", gvLocGlobalDim1Rec.Code, DPA_IsHardFilter);
                           END;

                OnLookup=BEGIN
                           gvLocGlobalDim1Rec.RESET;
                           gvLocGlobalDim1Rec.SETRANGE("Global Dimension No.", 1);
                           IF PAGE.RUNMODAL(0, gvLocGlobalDim1Rec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525007;2;Field  ;
                Name=ExistingCustomer;
                CaptionML=ENU=Connect To;
                OptionCaptionML=ENU=Existing Customer,New Customer;
                SourceExpr=gvExistingCustOpt;
                Editable=ExistingCustomerEditable;
                OnValidate=BEGIN
                             IF gvExistingCustOpt = gvExistingCustOpt::No THEN
                               NogvExistingCustOptOnValidate;
                             IF gvExistingCustOpt = gvExistingCustOpt::Yes THEN
                               YesgvExistingCustOptOnValidate;
                           END;
                            }

    { 1100525006;2;Field  ;
                Name=CopyCustData;
                CaptionML=ENU=Copy to Customer Address;
                SourceExpr=gvCopyLocAddrToCustAddr;
                Enabled=CopyCustDataEnable }

    { 1100528611;1;Group  ;
                Name=SelectCustomer;
                Visible=SelectCustomerVisible;
                GroupType=Group }

    { 1100525039;2;Field  ;
                CaptionML=ENU=You have chosen to connect the newly created Service Location to an existing Customer: select customer.;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100528627;2;Field  ;
                Name=CustomerCode;
                CaptionML=ENU=Customer No.;
                SourceExpr=gvCustRec."No.";
                OnValidate=BEGIN
                             gvCustRec.GET(gvCustRec."No.");
                               gvCustRecNoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           gvCustRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Customer List", gvCustRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100528625;2;Field  ;
                CaptionML=ENU=Name;
                SourceExpr=gvCustRec.Name;
                Editable=FALSE }

    { 1100528623;2;Field  ;
                CaptionML=ENU=Name 2;
                SourceExpr=gvCustRec."Name 2";
                Editable=FALSE }

    { 1100528621;2;Field  ;
                CaptionML=ENU=Address;
                SourceExpr=gvCustRec.Address;
                Editable=FALSE }

    { 1100528615;2;Field  ;
                CaptionML=ENU=Address 2;
                SourceExpr=gvCustRec."Address 2";
                Editable=FALSE }

    { 1100528617;2;Field  ;
                CaptionML=ENU=Post Code;
                SourceExpr=gvCustRec."Post Code";
                Editable=FALSE }

    { 1100528619;2;Field  ;
                CaptionML=ENU=City;
                SourceExpr=gvCustRec.City;
                Editable=FALSE }

    { 1100528613;2;Field  ;
                CaptionML=ENU=Country/Region Code;
                SourceExpr=gvCustRec."Country/Region Code";
                Editable=FALSE }

    { 1100525029;1;Group  ;
                Name=CreateCustomer;
                Visible=CreateCustomerVisible;
                GroupType=Group }

    { 1100525056;2;Field  ;
                CaptionML=ENU=Customer Data;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525028;2;Field  ;
                Name=CustomerName;
                CaptionML=ENU=Name;
                SourceExpr=gvCustNametxt }

    { 1100525026;2;Field  ;
                CaptionML=ENU=Name 2;
                SourceExpr=gvCustName2Txt }

    { 1100525027;2;Field  ;
                CaptionML=ENU=Address;
                SourceExpr=gvCustAddressTxt }

    { 1100525025;2;Field  ;
                CaptionML=ENU=Address 2;
                SourceExpr=gvCustAddress2Txt }

    { 1100525024;2;Field  ;
                CaptionML=ENU=Post Code;
                SourceExpr=gvCustPostCodeRec.Code;
                OnValidate=VAR
                             PostCode@1100525001 : Record 225;
                             NormalizedPostCode@1100525000 : Code[20];
                           BEGIN
                             IF ObjectImpWorkSheetMgtCU.NormalizePostCode(gvCustPostCodeRec.Code, '', NormalizedPostCode) THEN BEGIN
                               gvCustPostCodeRec.Code := NormalizedPostCode;
                               PostCode.SETRANGE(Code, gvCustPostCodeRec.Code);
                               IF PostCode.FINDFIRST THEN
                                 gvCustCityTxt := PostCode.City;
                             END;
                           END;

                OnLookup=BEGIN
                           gvCustPostCodeRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Post Codes",gvCustPostCodeRec) = ACTION::LookupOK THEN BEGIN
                             gvCustCityTxt := gvCustPostCodeRec.City;
                             CurrPage.UPDATE(TRUE);
                           END;
                         END;
                          }

    { 1100525023;2;Field  ;
                CaptionML=ENU=City;
                SourceExpr=gvCustCityTxt }

    { 1100525022;2;Field  ;
                CaptionML=ENU=Country/Region Code;
                SourceExpr=gvCustCountryRec.Code;
                OnLookup=BEGIN
                           gvCustCountryRec.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Countries/Regions",gvCustCountryRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525021;2;Field  ;
                CaptionML=ENU=Phone No.;
                SourceExpr=gvCustPhoneNo }

    { 1100525020;2;Field  ;
                CaptionML=ENU=Customer Template;
                SourceExpr=gvCustTemplateRec.Code;
                OnValidate=VAR
                             CentralDataManagement@1100525000 : Codeunit 11012010;
                           BEGIN
                             IF gvCustTemplateRec.Code <> '' THEN BEGIN
                             //IF CentralDataManagement.CentralActiveLocalInput THEN //C016112.o
                               IF CentralDataManagement.CentralActiveLocalInput(DATABASE::"Marketing Setup") THEN //C016112.n
                                 gvCustTemplateRec.CHANGECOMPANY(CentralDataManagement.CentralCompany);
                               gvCustTemplateRec.FIND('=');
                             END;
                           END;

                OnLookup=VAR
                           CentralDataManagement@1100525001 : Codeunit 11012010;
                         BEGIN
                           gvCustTemplateRec.RESET;
                           //IF CentralDataManagement.CentralActiveLocalInput THEN //C016112.o
                           IF CentralDataManagement.CentralActiveLocalInput(DATABASE::"Marketing Setup") THEN //C016112.n
                             gvCustTemplateRec.CHANGECOMPANY(CentralDataManagement.CentralCompany);
                           IF PAGE.RUNMODAL(PAGE::"Customer Template List",gvCustTemplateRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE;
                         END;
                          }

    { 1100525032;1;Group  ;
                Name=SelectStdObject;
                Visible=SelectStdObjectVisible;
                GroupType=Group }

    { 1100525057;2;Field  ;
                CaptionML=ENU=Select Standard Object;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525046;2;Field  ;
                CaptionML=ENU=Standard Object No.;
                SourceExpr=gvStandardObjectRec."No.";
                OnDrillDown=BEGIN
                              IF PAGE.RUNMODAL(PAGE::"Service Call Wiz. Std. Objects", gvStandardObjectRec) = ACTION::LookupOK THEN;
                            END;
                             }

    { 1100525047;2;Field  ;
                CaptionML=ENU=Description;
                SourceExpr=gvStandardObjectRec.Description;
                Editable=false }

    { 4   ;1   ;Group     ;
                Name=ShowSelectedLocation;
                Visible=ShowSelectedLocationVisible;
                GroupType=Group }

    { 1100525059;2;Field  ;
                CaptionML=ENU=Lookup Object;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525048;2;Field  ;
                Name=LocationCode;
                CaptionML=ENU=Location No.;
                SourceExpr=gvLocRec."No.";
                Editable=FALSE;
                OnValidate=BEGIN
                             gvLocRec.SETRANGE("Customer No.", gvCustRec."No.");
                             gvLocRec.GET(gvLocRec."No.");
                             gvLocRecNoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           gvLocRec.RESET;
                           gvLocRec.SETCURRENTKEY("Customer No.");
                           gvLocRec.FILTERGROUP(4);
                           gvLocRec.SETRANGE("Customer No.", gvCustRec."No."); //mg, 14-01-11: M24862
                           gvLocRec.FILTERGROUP(0);
                           IF PAGE.RUNMODAL(PAGE::"Service Location List", gvLocRec) = ACTION::LookupOK THEN
                             CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100525049;2;Field  ;
                CaptionML=ENU=Description;
                SourceExpr=gvLocRec.Description;
                Editable=FALSE }

    { 1100525050;2;Field  ;
                CaptionML=ENU=Description 2;
                SourceExpr=gvLocRec."Description 2";
                Editable=FALSE }

    { 1100525051;2;Field  ;
                CaptionML=ENU=Address;
                SourceExpr=gvLocRec.Address;
                Editable=FALSE }

    { 1100525052;2;Field  ;
                CaptionML=ENU=Address 2;
                SourceExpr=gvLocRec."Address 2";
                Editable=FALSE }

    { 1100525053;2;Field  ;
                CaptionML=ENU=Post Code;
                SourceExpr=gvLocRec."Post Code";
                Editable=FALSE }

    { 1100525054;2;Field  ;
                CaptionML=ENU=City;
                SourceExpr=gvLocRec.City;
                Editable=FALSE }

    { 1100525055;2;Field  ;
                CaptionML=ENU=Country/Region Code;
                SourceExpr=gvLocRec."Country/Region Code";
                Editable=FALSE }

    { 1100525045;2;Field  ;
                CaptionML=ENU=Object No.;
                SourceExpr=gvServiceObjectRec."No.";
                OnDrillDown=BEGIN
                              gvServiceObjectRec.SETCURRENTKEY("Service Location No.");
                              gvServiceObjectRec.SETRANGE("Service Location No.", gvLocRec."No.");
                              gvServiceObjectRec.SETRANGE(Blocked, FALSE);
                              IF PAGE.RUNMODAL(PAGE::"Service Call Wiz. Objects", gvServiceObjectRec) <> ACTION::LookupOK THEN
                                CLEAR(gvServiceObjectRec);
                            END;
                             }

    { 1100525034;1;Group  ;
                Name=SelectActualContract;
                Visible=SelectActualContractVisible;
                GroupType=Group }

    { 1100525060;2;Field  ;
                CaptionML=ENU=Select a Service Contract;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525030;2;Field  ;
                CaptionML=ENU=Contract No.;
                SourceExpr=gvServContractRec."No.";
                OnDrillDown=VAR
                              ServiceContractNo@1100525000 : Code[20];
                            BEGIN
                              ServiceContractNo :=
                                MaintenanceManagementCU.ShowActualContractsForObject(gvServiceObjectRec."No.", '', TODAY, TRUE, '');
                              gvServContractRec.GET(ServiceContractNo);
                            END;
                             }

    { 1100525031;2;Field  ;
                CaptionML=ENU=Description;
                SourceExpr=gvServContractRec.Description;
                Editable=false }

    { 1100525040;1;Group  ;
                Name=ContractDetails;
                Visible=ContractDetailsVisible;
                GroupType=Group }

    { 1100525061;2;Field  ;
                CaptionML=ENU=Terms / Report Procedure;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525037;2;Part   ;
                Name=ContractAgreement;
                CaptionML=ENU=Contract Terms;
                PagePartID=Page11125200;
                Visible=ContractAgreementVisible;
                Editable=FALSE }

    { 1100528600;2;Part   ;
                Name=CustomerTerms;
                CaptionML=ENU=Customer Terms;
                PagePartID=Page11126449;
                Visible=CustomerTermsVisible;
                PartType=Page }

    { 1100525035;2;Part   ;
                Name=ReportProcedure;
                CaptionML=ENU=Report Procedure;
                PagePartID=Page11125200;
                Visible=ReportProcedureVisible;
                Editable=FALSE }

    { 1100528630;1;Group  ;
                Name=WhosCalling;
                Visible=WhosCallingVisible;
                GroupType=Group }

    { 1100525062;2;Field  ;
                CaptionML=ENU=Calling Account Data;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100528640;2;Field  ;
                CaptionML=ENU=Calling Contact;
                SourceExpr=gvServiceCallRec."Calling Contact" }

    { 1100528632;2;Field  ;
                CaptionML=ENU=Calling Account;
                SourceExpr=gvServiceCallRec."Calling Account" }

    { 1100528635;2;Field  ;
                CaptionML=ENU=Calling Phone No.;
                SourceExpr=gvServiceCallRec."Calling Phone No." }

    { 1100528668;2;Field  ;
                CaptionML=ENU=Description;
                SourceExpr=gvServiceCallRec.Description }

    { 1100528637;2;Field  ;
                CaptionML=ENU=Call Kind;
                SourceExpr=gvServiceCallRec."Call Kind";
                TableRelation="Service Call Indication".Code WHERE (Indication=CONST(Kind));
                OnLookup=VAR
                           ServiceCallIndication@1100528600 : Record 11020333;
                         BEGIN
                           ServiceCallIndication.SETRANGE(Indication, ServiceCallIndication.Indication::Kind);
                           IF PAGE.RUNMODAL(0, ServiceCallIndication) = ACTION::LookupOK THEN BEGIN
                             gvServiceCallRec."Call Kind" := ServiceCallIndication.Code;
                             CurrPage.UPDATE;
                           END;
                         END;
                          }

    { 1100528639;2;Field  ;
                CaptionML=ENU=Call Type;
                SourceExpr=gvServiceCallRec."Call Type";
                TableRelation="Service Call Indication".Code WHERE (Indication=CONST(Type));
                OnLookup=VAR
                           ServiceCallIndication@1100528600 : Record 11020333;
                         BEGIN
                           ServiceCallIndication.SETRANGE(Indication, ServiceCallIndication.Indication::Type);
                           IF PAGE.RUNMODAL(0, ServiceCallIndication) = ACTION::LookupOK THEN BEGIN
                             gvServiceCallRec."Call Type" := ServiceCallIndication.Code;
                             CurrPage.UPDATE;
                           END;
                         END;
                          }

    { 1100528650;2;Field  ;
                CaptionML=ENU=Order No. Customer;
                SourceExpr=gvServiceCallRec."Order No. Customer" }

    { 1100528648;2;Field  ;
                CaptionML=ENU=Your Reference;
                SourceExpr=gvServiceCallRec."Your Reference" }

    { 1100528646;2;Field  ;
                CaptionML=ENU=Receiving Date;
                SourceExpr=gvServiceCallRec."Receiving Date" }

    { 1100528645;2;Field  ;
                CaptionML=ENU=Receiving Time;
                SourceExpr=gvServiceCallRec."Receiving Time" }

    { 1100525058;1;Group  ;
                Name=ProblemText;
                Visible=ProblemTextVisible;
                GroupType=Group }

    { 1100525063;2;Field  ;
                CaptionML=ENU=Problem Text;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100526240;2;Field  ;
                CaptionML=ENU=Standard Object No.;
                SourceExpr=gvStandardObjectRec."No.";
                Editable=FALSE }

    { 1100526244;2;Field  ;
                CaptionML=ENU=Standard Object Description;
                SourceExpr=gvStandardObjectRec.Description;
                Editable=FALSE }

    { 1100409000;2;Field  ;
                ExtendedDatatype=URL;
                CaptionML=ENU=Checklist URL;
                SourceExpr=gvStandardObjectRec."Checklist URL";
                Editable=false }

    { 1100528642;2;Field  ;
                Name=tbProblemTextCode;
                CaptionML=ENU=&Problem Text Code;
                SourceExpr=gvProblemTextCode;
                TableRelation="Standard Service Text".Code WHERE (Type=CONST(Problem));
                OnValidate=BEGIN
                             gvServiceCallRecProblemTextCod;
                           END;

                OnLookup=VAR
                           StandardServiceText@1100528602 : Record 11020338;
                         BEGIN
                           StandardServiceText.SETRANGE(Type, StandardServiceText.Type::Problem);
                           IF gvProblemTextCode <> '' THEN
                             IF StandardServiceText.GET(StandardServiceText.Type::Problem, gvProblemTextCode) THEN;
                           IF PAGE.RUNMODAL(0, StandardServiceText) = ACTION::LookupOK THEN BEGIN
                             gvProblemTextCode := StandardServiceText.Code;
                             ValidateProblemTextCode;
                             FillProblemTextFromProblemCode;
                             CurrPage.UPDATE;
                           END;
                         END;
                          }

    { 1100528605;2;Field  ;
                CaptionML=ENU=Problem Analysis;
                SourceExpr=gvServiceCallRec.Problem;
                TableRelation="Service Analysis".Code WHERE (Analysis Type=CONST(Problem));
                OnValidate=BEGIN
                             gvServiceCallRecProblemOnAfter;
                           END;

                OnLookup=BEGIN
                           gvServiceCallRec.GetFilteredProblemsOnDisciplines(gvServiceAnalysisProblemRec);
                           //gvServiceAnalysisProblemRec.SETRANGE("Analysis Type", gvServiceAnalysisProblemRec."Analysis Type"::Problem);
                           IF PAGE.RUNMODAL(PAGE::"Service Analysis (Problem)", gvServiceAnalysisProblemRec) = ACTION::LookupOK THEN BEGIN
                             gvServiceCallRec.VALIDATE(Problem, gvServiceAnalysisProblemRec.Code);
                             ValidateAnalysisCode;
                             CurrPage.UPDATE;
                           END;
                         END;
                          }

    { 1100528655;2;Field  ;
                CaptionML=ENU=Customer Problem Analysis;
                SourceExpr=gvServiceCallRec."Customer Problem";
                OnLookup=VAR
                           CustomerServiceAnalysis@1100528602 : Record 11071728;
                         BEGIN
                           IF gvExistingCustOpt = gvExistingCustOpt::No THEN
                             EXIT;

                           CustomerServiceAnalysis.SETRANGE("Analysis Type", CustomerServiceAnalysis."Analysis Type"::Problem);
                           CustomerServiceAnalysis.SETRANGE("Customer No.", gvCustRec."No.");
                           IF PAGE.RUNMODAL(PAGE::"Cust. Serv. Analysis (Problem)", CustomerServiceAnalysis) = ACTION::LookupOK THEN BEGIN
                             gvServiceCallRec."Customer Problem" := CustomerServiceAnalysis.Code;
                             CurrPage.UPDATE;
                           END;
                         END;
                          }

    { 1100525042;1;Group  ;
                Name=CheckList;
                Visible=CheckListVisible;
                GroupType=Group }

    { 1100525065;2;Field  ;
                CaptionML=ENU=Checklist;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525041;2;Field  ;
                CaptionClass=Text19017320;
                MultiLine=Yes }

    { 1100526218;1;Group  ;
                Name=AskCreateCall;
                Visible=AskCreateCallVisible;
                GroupType=Group }

    { 1100525066;2;Field  ;
                CaptionML=ENU=Resolve Text;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100526223;2;Field  ;
                CaptionML=ENU=Solved / Not Solved;
                OptionCaptionML=ENU=Problem is not solved,Problem is solved;
                SourceExpr=gvProblemSolvedStatus }

    { 1100526220;1;Group  ;
                Name=PlanCall;
                Visible=PlanCallVisible;
                GroupType=Group }

    { 1100525067;2;Field  ;
                CaptionML=ENU=Checklist;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100528652;2;Field  ;
                CaptionML=ENU=Planning Agreement;
                SourceExpr=gvServiceCallRec."Planning Agreement Code";
                TableRelation="Planning Agreement";
                OnValidate=BEGIN
                             gvServiceCallRecPlanningAgreem;
                           END;

                OnLookup=VAR
                           PlanningAgreement@1100528600 : Record 11071729;
                         BEGIN
                           PlanningAgreement.SETFILTER(Type, '%1|%2', PlanningAgreement.Type::Plan, PlanningAgreement.Type::Both);
                           IF PAGE.RUNMODAL(0, PlanningAgreement) = ACTION::LookupOK THEN BEGIN
                             gvServiceCallRec."Planning Agreement Code" := PlanningAgreement.Code;
                             UpdatePlanningAgreementTimes;
                           END;
                         END;
                          }

    { 1100528654;2;Field  ;
                CaptionML=ENU=Planning Agreement from;
                SourceExpr=gvPlanningsAgreementFromTime;
                Editable=FALSE }

    { 1100528658;2;Field  ;
                CaptionML=ENU=Planning Agreement untill;
                SourceExpr=gvPlanningsAgreementToTime;
                Editable=FALSE }

    { 1100526227;2;Field  ;
                Name=tbExpectedDate;
                CaptionML=ENU=Expected Date;
                SourceExpr=gvServiceCallRec."Expected Date" }

    { 1100526232;2;Field  ;
                CaptionML=ENU=Expected time;
                SourceExpr=gvServiceCallRec."Expected Time" }

    { 1100526234;2;Field  ;
                CaptionML=ENU=Expected Hours;
                SourceExpr=gvServiceCallRec."Expected Hours" }

    { 1100528601;2;Field  ;
                CaptionML=ENU=Firm Planned;
                SourceExpr=gvServiceCallRec."Firm Planned" }

    { 1100528609;2;Field  ;
                CaptionML=ENU=Priority;
                SourceExpr=gvServiceCallRec.Priority;
                OnValidate=VAR
                             ServicePriority@1100525000 : Record 11012829;
                           BEGIN
                             IF gvServiceCallRec.Priority <> '' THEN
                               ServicePriority.GET(gvServiceCallRec.Priority);
                           END;

                OnAssistEdit=BEGIN
                               gvServiceCallRec.AssistEditPriority;
                             END;
                              }

    { 1210190017;2;Field  ;
                CaptionML=ENU=Create Service Order;
                SourceExpr=CreateServiceOrder }

    { 1100525043;1;Group  ;
                Name=CloseWizard;
                Visible=CloseWizardVisible;
                GroupType=Group }

    { 1100525044;2;Field  ;
                CaptionML=ENU=Click Finish }

  }
  CODE
  {
    VAR
      ObjectImpWorkSheetMgtCU@1100526210 : Codeunit 11012839;
      MaintenanceManagementCU@1100526219 : Codeunit 11012829;
      gvCustTemplateRec@1100526223 : Record 5105;
      gvCustPostCodeRec@1100526222 : Record 225;
      gvCustCountryRec@1100526221 : Record 9;
      gvCustRec@1100526224 : Record 18;
      gvLocRec@1100526225 : Record 11012801;
      gvLocPostCodeRec@1100526228 : Record 225;
      gvLocCountryRec@1100526227 : Record 9;
      gvLocGlobalDim1Rec@1210190002 : Record 349;
      gvServContractRec@1100526226 : Record 11012812;
      gvStandardObjectRec@1100526218 : Record 11020334;
      gvServiceObjectRec@1100526217 : Record 11071691;
      gvServiceCallRec@1100526216 : Record 11012822;
      gvContractAgreementRec@1100526215 : Record 11012882;
      gvCustomerTermRec@1100528609 : Record 11020260;
      gvReportProcedureRec@1100526214 : Record 11012882;
      gvWizProblemText@1100526211 : Record 11071722;
      gvWizInternalText@1100528600 : Record 11071722;
      gvWizResolveText@1100526205 : Record 11071722;
      gvServiceAnalysisProblemRec@1100528602 : Record 11012842;
      gvWizardStepOpt@1100525000 : 'FirstContact,PostCodeHouseNo,CreateLocation,SelectCustomer,CreateCustomer,SelectStdObject,ShowSelectedLocation,SelectActualContract,ContractDetails,WhosCalling,ProblemText,,CheckList,AskCreateCall,PlanCall,CloseWizard';
      gvExistingCustOpt@1100525002 : 'Yes,No';
      gvExistingLocOpt@1100525013 : 'Yes,No';
      gvCustNametxt@1100525004 : Text[50];
      gvCustName2Txt@1100525005 : Text[50];
      gvCustAddressTxt@1100525006 : Text[50];
      gvCustAddress2Txt@1100525007 : Text[50];
      gvCustCityTxt@1100525009 : Text[50];
      gvCustPhoneNo@1100526233 : Text[30];
      gvLocDesctxt@1100525018 : Text[50];
      gvLocDesc2Txt@1100525017 : Text[50];
      gvLocAddressTxt@1100525016 : Text[50];
      gvLocAddress2Txt@1100525015 : Text[50];
      gvLocCityTxt@1100525010 : Text[50];
      gvLocPostCodeTxt@1100526209 : Code[20];
      gvLocHouseNo@1100526208 : Text[20];
      gvLocHouseNoExt@1100526207 : Code[10];
      Text001@1100526201 : TextConst 'ENU=Edit at least Name and Customer Template for Customer';
      Text004@1100526229 : TextConst 'ENU=The choosen object has no actual contract, continue?';
      Text005@1100526234 : TextConst 'ENU=No problem text given, continue?';
      gvLocPhoneNo@1210190008 : Text[30];
      gvLocMobilePhoneNo@1210190009 : Text[30];
      gvLocEmail@1210190010 : Text[80];
      gvCopyLocAddrToCustAddr@1100526204 : Boolean;
      gvProblemSolvedStatus@1100526203 : 'Not Solved,Solved';
      gvProblemTextCode@1100528601 : Code[10];
      gvNoOfActualContracts@1100526220 : Integer;
      Text007@1100526235 : TextConst 'ENU=No resolve text given, continue?';
      dummyTxt@1100526237 : Text[30];
      Text008@1100528604 : TextConst 'ENU=Edit at least Description for Service Location';
      Text009@1100528603 : TextConst 'ENU=Edit at least Problem Analysis';
      Text010@1100528605 : TextConst 'ENU=Edit at least Customer Problem Analysis';
      gvPlanningsAgreementFromTime@1100528606 : Time;
      gvPlanningsAgreementToTime@1100528607 : Time;
      FinishButtonUsed@1210190000 : Boolean;
      Text011@1210190001 : TextConst 'ENU=Wizard not finished, cancel anyway?';
      Text012@1210190003 : TextConst 'ENU=No Object given';
      CreateServiceOrder@1210190011 : Boolean;
      CopyCustDataEnable@19070501 : Boolean INDATASET;
      FinishEnable@19079943 : Boolean INDATASET;
      NextEnable@19007695 : Boolean INDATASET;
      LocationsVisible@19042280 : Boolean INDATASET;
      InternalTextVisible@19027292 : Boolean INDATASET;
      StdObjectsVisible@19036116 : Boolean INDATASET;
      ActualContractVisible@19067925 : Boolean INDATASET;
      ContractAgreementVisible@19024223 : Boolean INDATASET;
      CustomerTermsVisible@1100528608 : Boolean INDATASET;
      ReportProcedureVisible@19063542 : Boolean INDATASET;
      FirstContactVisible@19067551 : Boolean INDATASET;
      PostCodeHouseNoVisible@19067406 : Boolean INDATASET;
      CreateLocationVisible@19067629 : Boolean INDATASET;
      SelectCustomerVisible@19067716 : Boolean INDATASET;
      CreateCustomerVisible@19067683 : Boolean INDATASET;
      SelectStdObjectVisible@19067522 : Boolean INDATASET;
      ShowSelectedLocationVisible@19067745 : Boolean INDATASET;
      SelectActualContractVisible@19067336 : Boolean INDATASET;
      ContractDetailsVisible@19067303 : Boolean INDATASET;
      WhosCallingVisible@19013506 : Boolean INDATASET;
      ProblemTextVisible@19004802 : Boolean INDATASET;
      CheckListVisible@19014466 : Boolean INDATASET;
      AskCreateCallVisible@19008101 : Boolean INDATASET;
      PlanCallVisible@19039397 : Boolean INDATASET;
      CloseWizardVisible@1100525001 : Boolean;
      BackEnable@19029006 : Boolean INDATASET;
      SLStructureNoEnable@19030454 : Boolean INDATASET;
      ContractAgreementHeight@19038129 : Integer;
      ReportProcedureHeight@19016812 : Integer;
      Text19017320@19007063 : TextConst 'ENU=Checklist';
      ObjectUnknownVisible@1210190012 : Boolean INDATASET;
      NotFoundVisible@1210190013 : Boolean INDATASET;
      ClearVisible@1210190014 : Boolean INDATASET;
      InternalTextEnabled@1100409000 : Boolean INDATASET;
      LocationDetermined@1100525011 : Boolean;
      ExistingCustomerEditable@1100525003 : Boolean INDATASET;

    PROCEDURE SetInitialCall@1100525001(ServiceCall@1100525000 : Record 11012822);
    BEGIN
      gvServiceCallRec := ServiceCall;
      gvLocPostCodeTxt := ServiceCall."Post Code";
      gvLocHouseNo := ServiceCall."House No.";
      gvLocHouseNoExt := ServiceCall."House No. Ext.";
      IF gvServiceCallRec."Service Location No." <> '' THEN
        IF gvLocRec.GET( gvServiceCallRec."Service Location No.") THEN
          LocationDetermined := TRUE;
    END;

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      LocationsVisible := FALSE;
      StdObjectsVisible := FALSE;
      ActualContractVisible := FALSE;
      ContractAgreementVisible := FALSE;
      CustomerTermsVisible := FALSE;
      ReportProcedureVisible := FALSE;
      ObjectUnknownVisible := FALSE;
      NotFoundVisible := FALSE;
      ClearVisible := FALSE;
      InternalTextEnabled := FALSE;

      CASE gvWizardStepOpt OF
        gvWizardStepOpt::FirstContact:
          BEGIN
            FirstContactVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::PostCodeHouseNo:
          BEGIN
            PostCodeHouseNoVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              LocationsVisible := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := TRUE;
              ClearVisible := TRUE;
            END;
          END;
        gvWizardStepOpt::CreateLocation:
          BEGIN
            CreateLocationVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::SelectCustomer:
          BEGIN
            SelectCustomerVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::CreateCustomer:
          BEGIN
            CreateCustomerVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::SelectStdObject:
          BEGIN
            SelectStdObjectVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              StdObjectsVisible := TRUE;
              ObjectUnknownVisible := TRUE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::ShowSelectedLocation:
          BEGIN
            ShowSelectedLocationVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := TRUE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::SelectActualContract:
          BEGIN
            SelectActualContractVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
              ActualContractVisible := TRUE;
            END;
          END;
        gvWizardStepOpt::ContractDetails:
          BEGIN
            ContractDetailsVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;

              ContractAgreementVisible := gvNoOfActualContracts > 0;
              CustomerTermsVisible := gvNoOfActualContracts = 0;
              ReportProcedureVisible := TRUE;
            END;
          END;
        gvWizardStepOpt::WhosCalling:
          BEGIN
            WhosCallingVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;

            END;
          END;
        gvWizardStepOpt::ProblemText:
          BEGIN
            ProblemTextVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;

              InternalTextEnabled := TRUE;
            END;
          END;
        gvWizardStepOpt::CheckList:
          BEGIN
            CheckListVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::AskCreateCall:
          BEGIN
            AskCreateCallVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::PlanCall:
          BEGIN
            PlanCallVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
        gvWizardStepOpt::CloseWizard:
          BEGIN
            CloseWizardVisible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
              ObjectUnknownVisible := FALSE;
              NotFoundVisible := FALSE;
              ClearVisible := FALSE;
            END;
          END;
      END;
    END;

    PROCEDURE EnableFields@3();
    BEGIN
      CurrPage.UPDATE;
    END;

    PROCEDURE PerfromNextWizardStep@1100525000();
    VAR
      ServiceCallWizLocations@1100409000 : Page 11125199;
      ServiceContractNo@1100526200 : Code[20];
    BEGIN
      CASE gvWizardStepOpt OF
        gvWizardStepOpt::FirstContact:
          IF LocationDetermined THEN BEGIN
            gvExistingLocOpt := gvExistingLocOpt::Yes;
            gvWizardStepOpt := gvWizardStepOpt::ShowSelectedLocation;
          END ELSE BEGIN
            ServiceCallWizLocations.LOOKUPMODE := TRUE;
            ServiceCallWizLocations.SETTABLEVIEW(gvLocRec);
            ServiceCallWizLocations.SetPostCodeHouseNo(gvLocPostCodeTxt, gvLocHouseNo, gvLocHouseNoExt);
            IF ServiceCallWizLocations.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ServiceCallWizLocations.GETRECORD(gvLocRec);
              gvExistingLocOpt := gvExistingLocOpt::Yes;
              gvWizardStepOpt := gvWizardStepOpt::ShowSelectedLocation;

              gvServiceObjectRec.SETCURRENTKEY("Service Location No.");
              gvServiceObjectRec.SETRANGE("Service Location No.", gvLocRec."No.");
              gvServiceObjectRec.SETRANGE(Blocked, FALSE);
              IF PAGE.RUNMODAL(PAGE::"Service Call Wiz. Objects", gvServiceObjectRec) <> ACTION::LookupOK THEN
                CLEAR(gvServiceObjectRec);
            END ELSE BEGIN
              gvExistingLocOpt := gvExistingLocOpt::No;
              gvWizardStepOpt := gvWizardStepOpt::CreateLocation;
              gvLocAddressTxt := ServiceCallWizLocations.GetLocationAddress;
            END;
          END;
        gvWizardStepOpt::PostCodeHouseNo:
          IF gvLocRec.ISEMPTY OR (gvExistingLocOpt = gvExistingLocOpt::No) THEN BEGIN
            gvLocAddressTxt := gvLocPostCodeTxt + FORMAT(gvLocHouseNo) + gvLocHouseNoExt;
            gvWizardStepOpt := gvWizardStepOpt::CreateLocation;
          END ELSE
            gvWizardStepOpt := gvWizardStepOpt::ShowSelectedLocation;
        gvWizardStepOpt::CreateLocation:
          IF gvExistingCustOpt = gvExistingCustOpt::No THEN
            gvWizardStepOpt := gvWizardStepOpt::CreateCustomer
          ELSE
            gvWizardStepOpt := gvWizardStepOpt::SelectCustomer;
        gvWizardStepOpt::SelectCustomer:
          gvWizardStepOpt := gvWizardStepOpt::SelectStdObject;
        gvWizardStepOpt::CreateCustomer:
          gvWizardStepOpt := gvWizardStepOpt::SelectStdObject;
        gvWizardStepOpt::SelectStdObject:
          BEGIN
            gvWizardStepOpt := gvWizardStepOpt::WhosCalling;
          END;
        gvWizardStepOpt::ShowSelectedLocation:
          BEGIN
            IF gvLocRec."Customer No." <> '' THEN
              gvCustRec.GET(gvLocRec."Customer No.");
            IF NOT gvStandardObjectRec.GET(gvServiceObjectRec."Standard Object No.") THEN
              gvStandardObjectRec.INIT;
            gvNoOfActualContracts :=
              MaintenanceManagementCU.GetNoOfActualContractsForObj(gvServiceObjectRec."No.", TODAY, ServiceContractNo);
            gvServContractRec.INIT;
            IF gvNoOfActualContracts <= 1 THEN BEGIN
              gvWizardStepOpt := gvWizardStepOpt::ContractDetails;
              IF gvNoOfActualContracts = 1 THEN
                gvServContractRec.GET(ServiceContractNo);
            END ELSE
              gvWizardStepOpt := gvWizardStepOpt::SelectActualContract;
          END;
        gvWizardStepOpt::SelectActualContract:
          gvWizardStepOpt := gvWizardStepOpt::ContractDetails;
        gvWizardStepOpt::ContractDetails:
          gvWizardStepOpt := gvWizardStepOpt::WhosCalling;
        gvWizardStepOpt::WhosCalling:
          gvWizardStepOpt := gvWizardStepOpt::ProblemText;
        gvWizardStepOpt::ProblemText:
          BEGIN
            gvWizardStepOpt := gvWizardStepOpt::AskCreateCall;
            PAGE.RUNMODAL(PAGE::"Service Call Wiz. Serv. Text", gvWizProblemText);
          END;
        gvWizardStepOpt::CheckList:
          gvWizardStepOpt := gvWizardStepOpt::AskCreateCall;
        gvWizardStepOpt::AskCreateCall:
          BEGIN
            gvWizardStepOpt := gvWizardStepOpt::PlanCall;
            IF gvProblemSolvedStatus = gvProblemSolvedStatus::Solved THEN BEGIN
              PAGE.RUNMODAL(PAGE::"Service Call Wiz. Serv. Text", gvWizResolveText);
              gvWizardStepOpt := gvWizardStepOpt::CloseWizard;
            END;
          END;
        gvWizardStepOpt::PlanCall:
          BEGIN
          END;
        gvWizardStepOpt::CloseWizard:
          BEGIN
          END;
      END;
    END;

    PROCEDURE PerfromPreviousWizardStep@1100525005();
    BEGIN
      CASE gvWizardStepOpt OF
        gvWizardStepOpt::PostCodeHouseNo:
          gvWizardStepOpt := gvWizardStepOpt::FirstContact;
        gvWizardStepOpt::ShowSelectedLocation:
          gvWizardStepOpt := gvWizardStepOpt::FirstContact;
        gvWizardStepOpt::CreateLocation:
          BEGIN
            gvExistingLocOpt := gvExistingLocOpt::Yes;
            gvWizardStepOpt := gvWizardStepOpt::FirstContact;
          END;
        gvWizardStepOpt::SelectCustomer:
          gvWizardStepOpt := gvWizardStepOpt::CreateLocation;
        gvWizardStepOpt::CreateCustomer:
          gvWizardStepOpt := gvWizardStepOpt::CreateLocation;
        gvWizardStepOpt::SelectStdObject:
          IF gvExistingCustOpt = gvExistingCustOpt::Yes THEN
            gvWizardStepOpt := gvWizardStepOpt::SelectCustomer
          ELSE
            gvWizardStepOpt := gvWizardStepOpt::CreateCustomer;
        gvWizardStepOpt::SelectActualContract:
         gvWizardStepOpt := gvWizardStepOpt::ShowSelectedLocation;
        gvWizardStepOpt::ContractDetails:
          IF gvNoOfActualContracts <= 1 THEN
            gvWizardStepOpt := gvWizardStepOpt::ShowSelectedLocation
          ELSE
            gvWizardStepOpt := gvWizardStepOpt::SelectActualContract;
        gvWizardStepOpt::WhosCalling:
          IF gvExistingLocOpt = gvExistingLocOpt::Yes THEN
            gvWizardStepOpt := gvWizardStepOpt::ContractDetails
          ELSE
            gvWizardStepOpt := gvWizardStepOpt::SelectStdObject;
        gvWizardStepOpt::ProblemText:
          gvWizardStepOpt := gvWizardStepOpt::WhosCalling;
        gvWizardStepOpt::CheckList:
          gvWizardStepOpt := gvWizardStepOpt::ProblemText;
        gvWizardStepOpt::AskCreateCall:
          gvWizardStepOpt := gvWizardStepOpt::ProblemText;
        gvWizardStepOpt::PlanCall:
          gvWizardStepOpt := gvWizardStepOpt::AskCreateCall;
        gvWizardStepOpt::CloseWizard:
          gvWizardStepOpt := gvWizardStepOpt::AskCreateCall;
      END;
    END;

    PROCEDURE CheckStatus@1100525006() retValue : Boolean;
    VAR
      ServiceContractNo@1100528600 : Code[20];
    BEGIN
      CASE gvWizardStepOpt OF
        gvWizardStepOpt::PostCodeHouseNo:
          BEGIN
            gvLocRec.FIND('=');
          END;
        gvWizardStepOpt::CreateLocation:
          BEGIN
            IF (gvLocDesctxt = '') THEN BEGIN
              MESSAGE(Text008);
              EXIT(FALSE);
            END;
          END;
        gvWizardStepOpt::ShowSelectedLocation:
          BEGIN
            IF gvServiceObjectRec."No." = '' THEN
              ERROR(Text012);
            gvServiceObjectRec.TESTFIELD(Blocked, FALSE);
            gvServiceObjectRec.CALCFIELDS(Discipline);
            gvServiceCallRec.Discipline := gvServiceObjectRec.Discipline;
            gvNoOfActualContracts :=
              MaintenanceManagementCU.GetNoOfActualContractsForObj(gvServiceObjectRec."No.", TODAY, ServiceContractNo);
            IF gvNoOfActualContracts = 0 THEN
              IF NOT CONFIRM(Text004) THEN
                EXIT(FALSE);
          END;
        gvWizardStepOpt::SelectActualContract:
          gvServContractRec.FIND('=');
        gvWizardStepOpt::SelectStdObject:
          BEGIN
            gvStandardObjectRec.FIND('=');
          END;
        gvWizardStepOpt::CreateCustomer:
          BEGIN
            IF (gvCustNametxt = '') OR (gvCustTemplateRec.Code = '') THEN BEGIN
              MESSAGE(Text001);
              EXIT(FALSE);
            END;
          END;
        gvWizardStepOpt::ProblemText:
          BEGIN
            IF NOT CheckProblem(gvServiceCallRec.Problem) THEN
              EXIT(FALSE);
            IF NOT CheckCustomerProblem(gvServiceCallRec."Customer Problem") THEN
              EXIT(FALSE);
      //      IF gvWizProblemText.COUNT = 0 THEN
      //        IF NOT CONFIRM(Text005) THEN
      //          EXIT(FALSE);
          END;
        gvWizardStepOpt::AskCreateCall:;
      //    IF (gvProblemSolvedStatus = gvProblemSolvedStatus::Solved) AND (gvWizResolveText.COUNT = 0) THEN
      //      IF NOT CONFIRM(Text007) THEN
      //        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE InitCurrentStep@1100528602();
    BEGIN
      CASE gvWizardStepOpt OF
        gvWizardStepOpt::CreateLocation:
          BEGIN
            gvExistingLocOpt := gvExistingLocOpt::No;
          END;
        gvWizardStepOpt::CreateCustomer:
          IF gvCopyLocAddrToCustAddr THEN BEGIN
            gvCustNametxt := gvLocDesctxt;
            gvCustName2Txt := gvLocDesc2Txt;
            gvCustAddressTxt := gvLocAddressTxt;
            gvCustAddress2Txt := gvLocAddress2Txt;
            gvCustPostCodeRec.Code := gvLocPostCodeRec.Code;
            gvCustCityTxt := gvLocCityTxt;
            gvCustCountryRec.Code := gvLocCountryRec.Code;
            gvCustPhoneNo := gvLocPhoneNo;
          END;
        gvWizardStepOpt::ShowSelectedLocation:
          BEGIN
            gvExistingLocOpt := gvExistingLocOpt::Yes;
          END;
        gvWizardStepOpt::ContractDetails:
          BEGIN
            UpdateContractDetailsSF;
          END;
        gvWizardStepOpt::WhosCalling:
          BEGIN
            IF gvServiceCallRec."Calling Contact" = '' THEN
              gvServiceCallRec."Calling Contact" := gvCustNametxt;
            gvServiceCallRec."Receiving Date" := TODAY;
            gvServiceCallRec."Receiving Time" := TIME;
          END;
        gvWizardStepOpt::ProblemText:
          BEGIN
            IF gvExistingLocOpt = gvExistingLocOpt::Yes THEN
              IF gvServContractRec."Customer No." <> '' THEN
                gvCustRec.GET(gvServContractRec."Customer No.")
              ELSE
                IF gvLocRec."Customer No." <> '' THEN
                  gvCustRec.GET(gvLocRec."Customer No.");
          END;
        gvWizardStepOpt::AskCreateCall:
          BEGIN
            gvServiceCallRec."Service Contract No." := gvServContractRec."No.";
            gvServiceCallRec."Service Location No." := gvLocRec."No.";
            gvServiceCallRec."Customer No." := gvCustRec."No.";
          END;
        gvWizardStepOpt::PlanCall:
          BEGIN
            IF gvServiceAnalysisProblemRec.GET(gvServiceAnalysisProblemRec."Analysis Type"::Problem, gvServiceCallRec.Problem) THEN
              gvServiceCallRec."Expected Hours" := gvServiceAnalysisProblemRec."Expected Hours";
          END;
      END;
    END;

    PROCEDURE FinishWizard@1100525007();
    BEGIN
      IF gvProblemSolvedStatus = gvProblemSolvedStatus::"Not Solved" THEN BEGIN
        IF gvExistingLocOpt = gvExistingLocOpt::No THEN BEGIN
          IF gvExistingCustOpt = gvExistingCustOpt::No THEN
            CreateCustomer;
          CreateLocation;
          IF gvStandardObjectRec."No." <> '' THEN
            CreateObject;
        END;
      END;
      CreateServiceCall;
    END;

    PROCEDURE CreateCustomer@1100525011();
    VAR
      Customer@1100525000 : Record 18;
      SalesSetup@1100525001 : Record 311;
      CreateCustomerCentralMgt@1100525002 : Codeunit 11012866;
      CentralDataManagement@1100525003 : Codeunit 11012010;
    BEGIN
      SalesSetup.GET;

      Customer.INIT;
      Customer.Name := gvCustNametxt;
      Customer."Name 2" := gvCustName2Txt;
      Customer.Address :=  gvCustAddressTxt;
      Customer."Address 2" := gvCustAddress2Txt;
      Customer.City := gvCustCityTxt;
      Customer."Post Code" := gvCustPostCodeRec.Code;
      Customer."Country/Region Code" := gvCustCountryRec.Code;
      Customer."Phone No." := gvCustPhoneNo;
      IF CentralDataManagement.InsertingCustomerIsAllowed THEN BEGIN
        Customer."No. Series" := SalesSetup."Customer Nos.";
        Customer.CreateCustFromTemplate(gvCustTemplateRec);
        Customer.INSERT(TRUE)
      END ELSE
        CreateCustomerCentralMgt.CreateCustomerInCentralCompany(Customer, gvCustTemplateRec.Code);
      gvCustRec := Customer;
    END;

    PROCEDURE CreateLocation@1100525013();
    VAR
      ServiceLocation@1100525000 : Record 11012801;
    BEGIN
      ServiceLocation.INIT;
      ServiceLocation.VALIDATE(Description,gvLocDesctxt);
      ServiceLocation."Description 2" := gvLocDesc2Txt;
      ServiceLocation."Creation Date" := TODAY;
      ServiceLocation.Address := gvLocAddressTxt;
      ServiceLocation."Address 2" := gvLocAddress2Txt;
      ServiceLocation.City := gvLocCityTxt;
      ServiceLocation."Post Code" := gvLocPostCodeRec.Code;
      ServiceLocation."Country/Region Code" := gvLocCountryRec.Code;
      ServiceLocation."Customer No." := gvCustRec."No.";
      ServiceLocation."Phone No." := gvLocPhoneNo;
      ServiceLocation."Mobile Phone No." := gvLocMobilePhoneNo;
      ServiceLocation."E-Mail" := gvLocEmail;
      IF gvLocGlobalDim1Rec.Code <> '' THEN
        ServiceLocation.VALIDATE("Global Dimension 1 Code", gvLocGlobalDim1Rec.Code);
      ServiceLocation.INSERT(TRUE);
      gvLocRec := ServiceLocation;
    END;

    PROCEDURE CreateObject@1100525014();
    BEGIN
      gvServiceObjectRec.INIT;
      gvServiceObjectRec."No." := '';
      gvServiceObjectRec.INSERT(TRUE);
      gvServiceObjectRec.VALIDATE("Standard Object No.", gvStandardObjectRec."No.");
      gvServiceObjectRec.VALIDATE("Service Location No.", gvLocRec."No.");
      gvServiceObjectRec.MODIFY(TRUE);
    END;

    PROCEDURE CreateServiceCall@1100526208();
    VAR
      ServiceCall@1100526200 : Record 11012822;
    BEGIN
      ServiceCall.INIT;
      ServiceCall."No." := '';
      ServiceCall.INSERT(TRUE);

      IF gvExistingLocOpt = gvExistingLocOpt::Yes THEN BEGIN
        IF NOT gvServContractRec.Blocked AND
          (gvServContractRec.Status IN [gvServContractRec.Status::Order, gvServContractRec.Status::"Invoicing Allowed"])
        THEN
          ServiceCall.VALIDATE("Service Contract No.", gvServContractRec."No.");
        ServiceCall.VALIDATE("Service Location No.", gvLocRec."No.");
        ServiceCall.VALIDATE("Object No.", gvServiceObjectRec."No.");
      END ELSE BEGIN
        ServiceCall."Calling Contact" := gvCustNametxt;
        ServiceCall.Name := gvLocDesctxt;
        ServiceCall.Address := gvLocAddressTxt;
        ServiceCall."Post Code" := gvLocPostCodeRec.Code;
        ServiceCall.City := gvLocCityTxt;
        ServiceCall."Country/Region Code" := gvLocCountryRec.Code;
        ServiceCall."Phone No." := gvCustPhoneNo;

        IF gvProblemSolvedStatus = gvProblemSolvedStatus::"Not Solved" THEN BEGIN
          ServiceCall."Customer No." := gvCustRec."No.";
          ServiceCall.VALIDATE("Service Location No.", gvLocRec."No."); //mg.c, 11-01-12: M32186
          ServiceCall.VALIDATE("Object No.", gvServiceObjectRec."No.");
        END;
      END;
      IF gvProblemSolvedStatus = gvProblemSolvedStatus::"Not Solved" THEN BEGIN
        ServiceCall."Expected Date" := gvServiceCallRec."Expected Date";
        ServiceCall."Expected Time" := gvServiceCallRec."Expected Time";
        ServiceCall."Expected Hours" := gvServiceCallRec."Expected Hours";
      END;
      ServiceCall.Problem := gvServiceCallRec.Problem;
      ServiceCall.Priority := gvServiceCallRec.Priority;
      ServiceCall."Calling Contact" := gvServiceCallRec."Calling Contact";
      ServiceCall."Calling Account" := gvServiceCallRec."Calling Account";
      ServiceCall."Calling Phone No." := gvServiceCallRec."Calling Phone No.";
      ServiceCall."Call Kind" := gvServiceCallRec."Call Kind";
      ServiceCall."Call Type" := gvServiceCallRec."Call Type";
      ServiceCall."Receiving Date" := gvServiceCallRec."Receiving Date";
      ServiceCall."Receiving Time" := gvServiceCallRec."Receiving Time";
      ServiceCall."Order No. Customer" := gvServiceCallRec."Order No. Customer";
      ServiceCall."Your Reference" := gvServiceCallRec."Your Reference";
      ServiceCall.Problem := gvServiceCallRec.Problem;
      ServiceCall."Customer Problem" := gvServiceCallRec."Customer Problem";
      ServiceCall."Planning Agreement Code" := gvServiceCallRec."Planning Agreement Code";
      ServiceCall.Description := gvServiceCallRec.Description;
      ServiceCall."Firm Planned" := gvServiceCallRec."Firm Planned";

      ServiceCall.MODIFY(TRUE);

      gvServiceCallRec := ServiceCall;

      StoreProblemText;
      StoreInternalText;
      IF gvProblemSolvedStatus = gvProblemSolvedStatus::Solved THEN
        StoreResolveText;
    END;

    PROCEDURE UpdateContractDetailsSF@1100526203();
    BEGIN
      gvContractAgreementRec.SETRANGE("Table Name", gvContractAgreementRec."Table Name"::"Service Contract");
      gvContractAgreementRec.SETRANGE("No.", gvServContractRec."No.");
      gvContractAgreementRec.SETRANGE("Table Field", 0);
      CurrPage.ContractAgreement.PAGE.SETTABLEVIEW(gvContractAgreementRec);
      CurrPage.ContractAgreement.PAGE.UpdateForm;
      CurrPage.ContractAgreement.PAGE.SetControlHeight(ContractAgreementHeight);

      gvCustomerTermRec.SETRANGE(Table, gvCustomerTermRec.Table::Customer);
      gvCustomerTermRec.SETRANGE(Code, gvCustRec."No.");
      gvCustomerTermRec.SETRANGE("Table Line No.", 0);
      CurrPage.CustomerTerms.PAGE.SETTABLEVIEW(gvCustomerTermRec);
      CurrPage.CustomerTerms.PAGE.UpdateForm;
      //CurrPage.ContractAgreement.PAGE.SetControlHeight(ContractAgreementHeight);

      gvReportProcedureRec.SETRANGE("Table Name", gvContractAgreementRec."Table Name"::"Service Location");
      gvReportProcedureRec.SETRANGE("No.", gvLocRec."No.");
      gvReportProcedureRec.SETRANGE("Table Field", 0);
      CurrPage.ReportProcedure.PAGE.SETTABLEVIEW(gvReportProcedureRec);
      CurrPage.ReportProcedure.PAGE.UpdateForm;
      CurrPage.ReportProcedure.PAGE.SetControlHeight(ReportProcedureHeight);
    END;

    PROCEDURE StoreProblemText@1100526210();
    VAR
      ServiceText@1100526200 : Record 11012882;
    BEGIN
      IF NOT gvWizProblemText.FINDSET THEN
        EXIT;
      REPEAT
        ServiceText.TRANSFERFIELDS(gvWizProblemText);
        ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
        ServiceText."No." := gvServiceCallRec."No.";
        ServiceText."Table Field" := 60;
        ServiceText.INSERT(TRUE);
      UNTIL gvWizProblemText.NEXT = 0;
    END;

    PROCEDURE StoreInternalText@1100528600();
    VAR
      ServiceText@1100528600 : Record 11012882;
    BEGIN
      IF NOT gvWizInternalText.FINDSET THEN
        EXIT;
      REPEAT
        ServiceText.TRANSFERFIELDS(gvWizInternalText);
        ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
        ServiceText."No." := gvServiceCallRec."No.";
        ServiceText."Table Field" := 70;
        ServiceText.INSERT(TRUE);
      UNTIL gvWizInternalText.NEXT = 0;
    END;

    PROCEDURE StoreResolveText@1100526211();
    VAR
      ServiceText@1100526200 : Record 11012882;
    BEGIN
      IF NOT gvWizResolveText.FINDSET THEN
        EXIT;
      REPEAT
        ServiceText.TRANSFERFIELDS(gvWizResolveText);
        ServiceText."Table Name" := ServiceText."Table Name"::"Service Call";
        ServiceText."No." := gvServiceCallRec."No.";
        ServiceText."Table Field" := 75;
        ServiceText.INSERT(TRUE);
      UNTIL gvWizResolveText.NEXT = 0;
    END;

    PROCEDURE ValidateProblemTextCode@1100528604();
    VAR
      StandardServiceText@1100528600 : Record 11020338;
    BEGIN
      IF gvProblemTextCode <> '' THEN BEGIN
        IF StandardServiceText.GET(StandardServiceText.Type::Problem, gvProblemTextCode) THEN BEGIN
          gvServiceCallRec.Problem := StandardServiceText."Analysis Code";
          ValidateAnalysisCode;
        END;
      END;
    END;

    PROCEDURE ValidateAnalysisCode@1100528607();
    VAR
      CustomerServiceAnalysis@1100528600 : Record 11071728;
    BEGIN
      IF gvServiceCallRec.Problem = '' THEN
        EXIT;
      IF gvExistingCustOpt = gvExistingCustOpt::Yes THEN BEGIN
        CustomerServiceAnalysis.SETRANGE("Analysis Type", CustomerServiceAnalysis."Analysis Type"::Problem);
        CustomerServiceAnalysis.SETRANGE("Customer No.", gvCustRec."No.");
        CustomerServiceAnalysis.SETRANGE("Standard Analysis Code", gvServiceCallRec.Problem);
        IF CustomerServiceAnalysis.COUNT = 1 THEN BEGIN
          CustomerServiceAnalysis.FINDFIRST;
          gvServiceCallRec."Customer Problem" := CustomerServiceAnalysis.Code;
        END;
      END;
    END;

    PROCEDURE CheckProblem@1100528601(ProblemCode@1100528600 : Code[10]) : Boolean;
    VAR
      ServiceAnalysis@1100528601 : Record 11012842;
    BEGIN
      IF ProblemCode = '' THEN BEGIN
        ServiceAnalysis.SETRANGE("Analysis Type", ServiceAnalysis."Analysis Type"::Problem);
        IF NOT ServiceAnalysis.ISEMPTY THEN BEGIN
          MESSAGE(Text009);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckCustomerProblem@1100528603(CustomerProblemCode@1100528600 : Code[10]) : Boolean;
    VAR
      CustomerServiceAnalysis@1100528601 : Record 11071728;
    BEGIN
      IF CustomerProblemCode = '' THEN BEGIN
        CustomerServiceAnalysis.SETRANGE("Analysis Type", CustomerServiceAnalysis."Analysis Type"::Problem);
        CustomerServiceAnalysis.SETRANGE("Customer No.", gvCustRec."No.");
        IF NOT CustomerServiceAnalysis.ISEMPTY THEN BEGIN
          MESSAGE(Text010);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE FillProblemTextFromProblemCode@1100528605();
    VAR
      StandardServiceText@1100528600 : Record 11020338;
      TextArray@1100528602 : ARRAY [10] OF Text[80];
      NoOfLines@1100528603 : Integer;
      LineNo@1100528604 : Integer;
      CurrLineNo@1100528605 : Integer;
      TextEditor@1100529100 : Codeunit 11012001;
    BEGIN
      IF gvProblemTextCode = '' THEN
        EXIT;

      IF StandardServiceText.GET(StandardServiceText.Type::Problem, gvProblemTextCode) THEN BEGIN
        IF StandardServiceText.Text <> '' THEN BEGIN
          NoOfLines := TextEditor.BreakDescription(StandardServiceText.Text, MAXSTRLEN(gvWizProblemText.Comment), TRUE, TextArray);
          IF gvWizProblemText.FINDLAST THEN
            CurrLineNo := gvWizProblemText."Line No.";
          FOR LineNo := 1 TO NoOfLines DO BEGIN
            gvWizProblemText.INIT;
            gvWizProblemText.SetUpNewLine;
            gvWizProblemText."Table Name" := gvWizProblemText."Table Name"::"Service Call";
            gvWizProblemText."No." := 'UNKNOWN';
            gvWizProblemText."Table Field" := 60;
            gvWizProblemText."Created by" := USERID;
            gvWizProblemText.Comment := TextArray[LineNo];
            CurrLineNo += 10000;
            gvWizProblemText."Line No." := CurrLineNo;
            gvWizProblemText.INSERT(TRUE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE SplitLength@7(Text@1210190000 : Text[1024];MaxLineLength@1100528600 : Integer) : Integer;
    VAR
      Pos@1210190001 : Integer;
    BEGIN
      Text := Reverse(COPYSTR(Text,1,MaxLineLength));
      Pos := STRPOS(Text,' ');
      IF Pos = 0 THEN
        Pos := STRPOS(Text,';');
      IF Pos = 0 THEN
        Pos := STRPOS(Text,',');
      IF Pos = 0 THEN
        Pos := MaxLineLength
      ELSE
        Pos := MaxLineLength - Pos + 1;
      EXIT(Pos);
    END;

    LOCAL PROCEDURE Reverse@4(Text1@1210190000 : Text[1024]) : Text[1024];
    VAR
      Text2@1210190001 : Text[250];
      Length@1210190002 : Integer;
      i@1210190003 : Integer;
    BEGIN
      Length := STRLEN(Text1);
      Text2 := '';
      FOR i := 1 TO Length DO
        Text2[i] := Text1[Length - i + 1];
      EXIT(Text2);
    END;

    PROCEDURE UpdatePlanningAgreementTimes@1100528608();
    VAR
      PlanningAgreement@1100528600 : Record 11071729;
    BEGIN
      IF (gvServiceCallRec."Planning Agreement Code" <> '') AND
        PlanningAgreement.GET(gvServiceCallRec."Planning Agreement Code") THEN BEGIN
        gvPlanningsAgreementFromTime := PlanningAgreement."Starting Time";
        gvPlanningsAgreementToTime := PlanningAgreement."Ending Time";
        gvServiceCallRec."Expected Time" := PlanningAgreement."Starting Time";
      END ELSE BEGIN
        gvPlanningsAgreementFromTime := 0T;
        gvPlanningsAgreementToTime := 0T;
      END;
    END;

    LOCAL PROCEDURE gvLocRecNoOnAfterValidate@19017395();
    BEGIN
    END;

    LOCAL PROCEDURE gvServiceCallRecProblemOnAfter@19060191();
    BEGIN
      ValidateAnalysisCode;
    END;

    LOCAL PROCEDURE gvServiceCallRecProblemTextCod@19066444();
    BEGIN
      ValidateProblemTextCode;
      FillProblemTextFromProblemCode;
    END;

    LOCAL PROCEDURE gvServiceCallRecPlanningAgreem@19018328();
    BEGIN
      UpdatePlanningAgreementTimes;
    END;

    LOCAL PROCEDURE gvCustRecNoOnAfterValidate@19005098();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE YesgvExistingCustOptOnPush@19075079();
    BEGIN
      CopyCustDataEnable := gvExistingCustOpt = gvExistingCustOpt::No;
    END;

    LOCAL PROCEDURE YesgvExistingCustOptOnValidate@19063393();
    BEGIN
      YesgvExistingCustOptOnPush;
    END;

    LOCAL PROCEDURE NogvExistingCustOptOnValidate@19028987();
    BEGIN
      CopyCustDataEnable := gvExistingCustOpt = gvExistingCustOpt::No;
    END;

    BEGIN
    END.
  }
}

