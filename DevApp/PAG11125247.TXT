OBJECT Page 11125247 Service Order Budget Lines 2
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Service Order Object Budget Lines;
    SourceTable=Table11012875;
    DelayedInsert=Yes;
    PageType=List;
    AutoSplitKey=Yes;
    OnInit=BEGIN
             AllocateButtonVisible := TRUE;
             AdviceButtonVisible := TRUE;
           END;

    OnOpenPage=VAR
                 ServSetup@1100525000 : Record 11012800;
               BEGIN
                 IF gAdviceSelect = FALSE THEN BEGIN
                   AdviceButtonVisible := (FALSE);
                   AllocateButtonVisible := (FALSE);
                 END ELSE BEGIN
                   AdviceOrderMgt.ToggleService(1,Rec);
                 END;

                 ServSetup.GET;
                 CostComponentEditable := ServSetup."Cost Component Editable";
                 UpdateEditable;
               END;

    OnClosePage=VAR
                  ServiceOrder@1210190000 : Record 11012823;
                  ServiceSurchargeManagement@1100528600 : Codeunit 11012834;
                BEGIN
                  IF RecordsModified THEN BEGIN
                    ServiceOrder.GET("Service Order No.");
                    ServiceOrder.UpdateSOHours;
                  //  ServiceSurchargeManagement.UpdateSOSurchargeBudgetLines(ServiceOrder);
                  END;
                END;

    OnAfterGetRecord=BEGIN
                       DescriptionIndent := 0;
                       DescriptionOnFormat;
                     END;

    OnNewRecord=BEGIN
                  IF ServOrderRec.GET("Service Order No.") THEN BEGIN  //db, 22-01-09: M14007
                    "Service Location No." := ServOrderRec."Service Location No.";
                    "Service Contract No." := ServOrderRec."Service Contract No.";
                    "Object No." := GETFILTER("Object No.");
                    VALIDATE("Cost Type", xRec."Cost Type");
                    UpdateEditable;
                  END;
                END;

    OnInsertRecord=BEGIN
                     RecordsModified := TRUE;
                   END;

    OnModifyRecord=BEGIN
                     IF "Surcharge Line Budget" THEN
                       FIELDERROR("Surcharge Line Budget");

                     IF "Surcharge Line" THEN
                       FIELDERROR("Surcharge Line");

                     RecordsModified := TRUE;
                   END;

    OnDeleteRecord=BEGIN
                     IF "Surcharge Line Budget" THEN
                       FIELDERROR("Surcharge Line Budget");

                     IF "Surcharge Line" THEN
                       FIELDERROR("Surcharge Line");

                     RecordsModified := TRUE;
                   END;

    OnAfterGetCurrRecord=BEGIN
                           UpdateEditable;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100485050;1 ;ActionGroup;
                      Name=AdviceButton;
                      CaptionML=ENU=&Advice;
                      Enabled=AdviceButtonVisible }
      { 1100485052;2 ;Action    ;
                      ShortCutKey=F9;
                      CaptionML=ENU=Create;
                      Image=AddAction;
                      OnAction=BEGIN
                                 CreateAdvice;
                               END;
                                }
      { 1100485053;2 ;ActionGroup;
                      CaptionML=ENU=Display Selection;
                      Image=ShowMatrix }
      { 1100485054;3 ;Action    ;
                      CaptionML=ENU=Budget Lines per Service Order;
                      Image=LedgerBudget;
                      OnAction=BEGIN
                                 AdviceOrderMgt.ToggleService(0,Rec);
                               END;
                                }
      { 1100485055;3 ;Action    ;
                      CaptionML=ENU=Not Adviced lines;
                      Image=CancelAllLines;
                      OnAction=BEGIN
                                 AdviceOrderMgt.ToggleService(1,Rec);
                               END;
                                }
      { 1100485056;3 ;Action    ;
                      CaptionML=ENU=Adviced Lines;
                      Image=SuggestLines;
                      OnAction=BEGIN
                                 AdviceOrderMgt.ToggleService(2,Rec);
                               END;
                                }
      { 1100485057;2 ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=Close;
                      Image=ReverseLines;
                      OnAction=BEGIN
                                 RemoveAdvice;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100485049;1 ;Action    ;
                      Name=AllocateButton;
                      CaptionML=ENU=A&llocate;
                      Promoted=Yes;
                      Enabled=AllocateButtonVisible;
                      Image=SelectLineToApply;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateAdvice;
                                 CurrPage.CLOSE;
                               END;
                                }
      { 1100409001;1 ;Action    ;
                      CaptionML=ENU=Import External Estimate;
                      Image=ImportDatabase;
                      OnAction=VAR
                                 ImportExtBudgetSelection@1210190000 : Page 11125149;
                               BEGIN
                                 //DP00693
                                 TESTFIELD("Service Order No.");
                                 ImportExtBudgetSelection.SetSelections("Service Order No.");
                                 ImportExtBudgetSelection.RUNMODAL;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100485000;1;Group  ;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Description;
                GroupType=Repeater }

    { 1100525010;2;Field  ;
                SourceExpr="Line No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485062;2;Field  ;
                SourceExpr="Object No.";
                Visible=FALSe;
                Editable=ObjectNoEditable }

    { 1100528604;2;Field  ;
                SourceExpr="Maintenance Scheme";
                Visible=FALSE }

    { 1100485066;2;Field  ;
                SourceExpr=Building;
                Visible=FALSE }

    { 1100485068;2;Field  ;
                SourceExpr=Floor;
                Visible=FALSE }

    { 1100485070;2;Field  ;
                SourceExpr=Room;
                Visible=FALSE }

    { 1100485015;2;Field  ;
                SourceExpr="Cost Type";
                OnValidate=BEGIN
                             UpdateEditable;
                           END;
                            }

    { 1100485035;2;Field  ;
                SourceExpr="Item No.";
                Editable=ItemDataEditable;
                OnValidate=BEGIN
                             ItemNoOnAfterValidate;
                           END;
                            }

    { 1100525024;2;Field  ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 1100485043;2;Field  ;
                SourceExpr=Manufacturer;
                Editable=ItemDataEditable;
                OnLookup=BEGIN
                           VendorRec.HandleVendorLookup(1, Manufacturer);
                         END;
                          }

    { 1100485037;2;Field  ;
                SourceExpr="Basic Item";
                Editable=ItemDataEditable;
                OnValidate=BEGIN
                             BasicItemOnAfterValidate;
                           END;

                OnLookup=VAR
                           BasicItemRec@1100485001 : Record 11012316;
                           BasicItemFrm@1100485000 : Page 11012333;
                           lvRefDate@1100485006 : Date;
                           lvDiscRef1@1100485005 : Code[20];
                           lvDiscRef2@1100485004 : Code[20];
                         BEGIN
                           CLEAR(BasicItemFrm);
                           BasicItemFrm.LOOKUPMODE(TRUE);
                           BasicItemFrm.SetSelection(DATABASE::"Service Order Budget Line",
                             "Service Order No.",'','','',0,'','',"Line No.",'','');

                           GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
                           BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

                           BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
                           BasicItemFrm.SETRECORD(BasicItemRec);

                           IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             VALIDATE("Cost Type", "Cost Type"::Material);
                             BasicItemFrm.GETRECORD(BasicItemRec);
                             Manufacturer := BasicItemRec.Manufacturer;
                             VALIDATE("Basic Item", BasicItemRec."Product Code");
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1100485041;2;Field  ;
                SourceExpr="Vendor (Trade Item)";
                Editable=ItemDataEditable;
                OnLookup=VAR
                           lvItem@1100485000 : Code[20];
                         BEGIN
                           lvItem := "Vendor (Trade Item)";
                           VendorRec.HandleVendorLookup(2, lvItem);
                           VALIDATE("Vendor (Trade Item)", lvItem);
                         END;
                          }

    { 1100485039;2;Field  ;
                SourceExpr="Trade Item";
                Editable=ItemDataEditable;
                OnValidate=BEGIN
                             TradeItemOnAfterValidate;
                           END;

                OnLookup=VAR
                           TradeItemRec@1100485001 : Record 11012317;
                           TradeItemFrm@1100485000 : Page 11012334;
                           lvRefDate@1100485004 : Date;
                           lvDiscRef1@1100485005 : Code[20];
                           lvDiscRef2@1100485006 : Code[20];
                           lvTempServOrderBudgetLine@1100525002 : TEMPORARY Record 11012875;
                         BEGIN
                           IF "Item No." <> '' THEN BEGIN
                             lvTempServOrderBudgetLine.INIT;
                             lvTempServOrderBudgetLine."Budget Type" := "Budget Type";
                             lvTempServOrderBudgetLine."Service Order No." := "Service Order No.";
                             lvTempServOrderBudgetLine."Service Contract No." := "Service Contract No.";
                             lvTempServOrderBudgetLine.VALIDATE("Item No.","Item No.");
                             g_ItemCode := lvTempServOrderBudgetLine."Trade Item";
                             g_Vendor := lvTempServOrderBudgetLine."Vendor (Trade Item)";
                           END ELSE BEGIN
                             g_ItemCode := '';
                             g_Vendor := '';
                           END;

                           CLEAR(TradeItemFrm);
                           TradeItemFrm.LOOKUPMODE(TRUE);
                           TradeItemFrm.SetSelection(DATABASE::"Service Order Budget Line",
                             "Service Order No.", '', '','', 0, '', '', "Line No.", '', '',
                             "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", g_ItemCode, g_Vendor);

                           GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
                           TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

                           TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
                           TradeItemFrm.SETRECORD(TradeItemRec);

                           IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             VALIDATE("Cost Type", "Cost Type"::Material);
                             TradeItemFrm.GETRECORD(TradeItemRec);
                             Manufacturer := TradeItemRec.Manufacturer;
                             "Basic Item" := TradeItemRec."Product Code";
                             "Vendor (Trade Item)" := TradeItemRec.Vendor;
                             VALIDATE("Trade Item", TradeItemRec."Item Code");
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;

                OnAssistEdit=BEGIN
                               IF HandleAssistEditItem(FIELDNO("Trade Item")) THEN
                                 CurrPage.UPDATE(TRUE);
                             END;
                              }

    { 1100485017;2;Field  ;
                SourceExpr="Cost Object";
                LookupPageID=Cost Object List;
                OnValidate=BEGIN
                             CostObjectOnAfterValidate;
                           END;
                            }

    { 1100485045;2;Field  ;
                SourceExpr="Cost Component";
                Editable=CostComponentEditable }

    { 1100485101;2;Field  ;
                SourceExpr=Code;
                Visible=FALSE }

    { 1100485005;2;Field  ;
                SourceExpr=Description }

    { 1100525022;2;Field  ;
                SourceExpr="Description 2";
                Visible=FALSE }

    { 1100485011;2;Field  ;
                SourceExpr="Time Quantity";
                Visible=FALSE }

    { 1100485013;2;Field  ;
                SourceExpr="Unit of Time";
                Visible=FALSE }

    { 1100485007;2;Field  ;
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             QuantityOnAfterValidate;
                           END;
                            }

    { 1100525006;2;Field  ;
                SourceExpr="Original Quantity";
                Editable=OriginalQuantityEditable;
                OnValidate=BEGIN
                             OriginalQuantityOnAfterValidat;
                           END;
                            }

    { 1100525008;2;Field  ;
                SourceExpr="Part of Line";
                Visible=FALSE }

    { 1100485009;2;Field  ;
                SourceExpr="Unit of Measure" }

    { 1100485019;2;Field  ;
                SourceExpr=Norm;
                Visible=NormEditable;
                Editable=NormEditable }

    { 1100485021;2;Field  ;
                SourceExpr="Rate Code";
                Editable=RateCodeEditable }

    { 1100485023;2;Field  ;
                SourceExpr=Rate;
                Editable=RateEditable }

    { 1100485025;2;Field  ;
                SourceExpr=Hours }

    { 1100485029;2;Field  ;
                SourceExpr="Gross Price";
                Visible=FALSE }

    { 1100485031;2;Field  ;
                SourceExpr="Discount %";
                Visible=FALSE }

    { 1100485027;2;Field  ;
                SourceExpr=Price;
                Editable=PriceEditable }

    { 1100485033;2;Field  ;
                SourceExpr=Amount }

    { 1100485093;2;Field  ;
                SourceExpr="Overhead Surcharge";
                Visible=FALSE }

    { 1100485080;2;Field  ;
                SourceExpr="Index Date";
                Visible=FALSE }

    { 1100485072;2;Field  ;
                SourceExpr=Discipline;
                Visible=FALSE }

    { 1100485074;2;Field  ;
                SourceExpr="Trade Speciality";
                Visible=FALSE }

    { 1100485078;2;Field  ;
                SourceExpr="Trade Expertise";
                Visible=FALSE }

    { 1100525000;2;Field  ;
                SourceExpr="Summary Line";
                Editable=FALSE }

    { 1100525004;2;Field  ;
                SourceExpr="Surcharge Line";
                Editable=FALSE }

    { 1100485082;2;Field  ;
                SourceExpr="Additional Cost";
                Editable=AdditionalCostEditable }

    { 1100485001;2;Field  ;
                SourceExpr=Advised }

    { 1100485003;2;Field  ;
                SourceExpr=Finished }

    { 1100485084;2;Field  ;
                SourceExpr="Follow-up Job" }

    { 1100525014;2;Field  ;
                SourceExpr=Comments;
                Visible=FALSE }

    { 1100525018;2;Field  ;
                SourceExpr="Comments for Logistics";
                Visible=FALSE }

    { 1100528600;2;Field  ;
                SourceExpr="Price History 0 Exists" }

    { 1100525001;0;Container;
                ContainerType=FactBoxArea }

    { 1100525003;1;Part   ;
                SubPageLink=Service Order No.=FIELD(Service Order No.),
                            Line No.=FIELD(Line No.),
                            Object Filter=FIELD(Object Filter),
                            Maintenance Scheme Filter=FIELD(Maintenance Scheme Filter);
                PagePartID=Page11130470;
                PartType=Page }

  }
  CODE
  {
    VAR
      gAdviceSelect@1100485000 : Boolean;
      AdviceOrderMgt@1100485001 : Codeunit 11012041;
      ServOrderRec@1100485003 : Record 11012823;
      VendorRec@1100485004 : Record 11012304;
      g_ItemCode@1100525001 : Code[20];
      g_Vendor@1100525000 : Code[20];
      ChangedAmountBOM@1100525002 : Decimal;
      RecordsModified@1100528608 : Boolean;
      AdviceButtonVisible@19067976 : Boolean INDATASET;
      AllocateButtonVisible@19028097 : Boolean INDATASET;
      DescriptionIndent@19057867 : Integer INDATASET;
      CostComponentEditable@1100525010 : Boolean INDATASET;
      ObjectNoEditable@1100525009 : Boolean INDATASET;
      OriginalQuantityEditable@1100525007 : Boolean INDATASET;
      NormEditable@1100525006 : Boolean INDATASET;
      RateCodeEditable@1100525005 : Boolean INDATASET;
      RateEditable@1100525004 : Boolean INDATASET;
      PriceEditable@1100525003 : Boolean INDATASET;
      AdditionalCostEditable@1100525008 : Boolean INDATASET;
      ItemDataEditable@1100525011 : Boolean INDATASET;

    PROCEDURE SetSelectionAdvice@1();
    BEGIN
      gAdviceSelect := TRUE;
    END;

    PROCEDURE CreateAdvice@2();
    VAR
      ServiceOrderBudgetLine@1100525000 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(ServiceOrderBudgetLine);
      AdviceOrderMgt.CreateServiceAdvice(ServiceOrderBudgetLine);
    END;

    PROCEDURE RemoveAdvice@3();
    VAR
      ServiceOrderBudgetLine@1100525000 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(ServiceOrderBudgetLine);
      AdviceOrderMgt.RemoveServiceAdvice(ServiceOrderBudgetLine);
    END;

    PROCEDURE ExplodeBOM@1100485001();
    VAR
      SOBudgetLine@1100525000 : Record 11012875;
    BEGIN
      CurrPage.SETSELECTIONFILTER(SOBudgetLine);
      IF SOBudgetLine.FINDFIRST THEN BEGIN
        REPEAT
          ChangedAmountBOM := SOBudgetLine.Amount;
          CODEUNIT.RUN(CODEUNIT::"Service BudgetLine-Explode BOM",SOBudgetLine);
          UpgradeBOMAmountAfter(SOBudgetLine);
          COMMIT;
        UNTIL SOBudgetLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpgradeBOMDiscount@1100525002();
    VAR
      SOBudgetLine@1100525000 : Record 11012875;
      ProcessBOMDiscount@1100525001 : Report 11012549;
    BEGIN
      SOBudgetLine.COPY(Rec);
      SOBudgetLine.SETRECFILTER;
      ProcessBOMDiscount.SetSelection(DATABASE::"Service Order Budget Line");
      ProcessBOMDiscount.SetSelectionSOBudget(SOBudgetLine);
      ProcessBOMDiscount.SETTABLEVIEW(SOBudgetLine);
      ProcessBOMDiscount.RUNMODAL;
      CurrPage.UPDATE;
    END;

    PROCEDURE RemoveZeroLinesBOM@1100525001();
    VAR
      SOBudgetLine@1100525003 : Record 11012875;
      RemoveZeroLinesBOM@1100525002 : Report 11012358;
    BEGIN
      SOBudgetLine.COPY(Rec);
      SOBudgetLine.SETRECFILTER;
      RemoveZeroLinesBOM.SetSelection(DATABASE::"Service Order Budget Line");
      RemoveZeroLinesBOM.SetSelectionSOBudget(SOBudgetLine);
      RemoveZeroLinesBOM.SETTABLEVIEW(SOBudgetLine);
      RemoveZeroLinesBOM.USEREQUESTPAGE(FALSE);
      RemoveZeroLinesBOM.RUNMODAL;
      CurrPage.UPDATE;
    END;

    PROCEDURE UpgradeBOMAmount@1100525000();
    VAR
      SOBudgetLine@1100525002 : Record 11012875;
      ProcessBOMAmount@1100525001 : Report 11012359;
    BEGIN
      SOBudgetLine.COPY(Rec);
      SOBudgetLine.SETRECFILTER;
      ProcessBOMAmount.SetSelection(DATABASE::"Service Order Budget Line");
      ProcessBOMAmount.SetSelectionSOBudget(SOBudgetLine);
      ProcessBOMAmount.SETTABLEVIEW(SOBudgetLine);
      ProcessBOMAmount.RUNMODAL;
      CurrPage.UPDATE;
    END;

    PROCEDURE UpgradeBOMAmountAfter@1100525003(VAR SOBudgetLine2@1100525000 : Record 11012875);
    VAR
      SOBudgetLine@1100525002 : Record 11012875;
      ProcessBOMAmount@1100525001 : Report 11012359;
    BEGIN
      SOBudgetLine.COPY(SOBudgetLine2);
      SOBudgetLine.SETRECFILTER;
      ProcessBOMAmount.SetSelection(DATABASE::"Service Order Budget Line");
      ProcessBOMAmount.SetSelectionSOBudgetAmount(SOBudgetLine,ChangedAmountBOM);
      ProcessBOMAmount.SETTABLEVIEW(SOBudgetLine);
      ProcessBOMAmount.USEREQUESTPAGE(FALSE);
      ProcessBOMAmount.RUNMODAL;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ItemNoOnAfterValidate@19061248();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BasicItemOnAfterValidate@19054956();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE TradeItemOnAfterValidate@19075338();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE CostObjectOnAfterValidate@19061648();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityOnAfterValidate@19032465();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE OriginalQuantityOnAfterValidat@19021056();
    BEGIN
      //**4PS
      IF (xRec."Original Quantity" <> "Original Quantity") AND (xRec."Original Quantity" <> 0) THEN BEGIN
        ChangeQuantityExplodedLines("Original Quantity" / xRec."Original Quantity");
        CurrPage.UPDATE;
      END;
    END;

    LOCAL PROCEDURE AdditionalCostOnActivate@19052148();
    VAR
      ServiceOrder@1210190000 : Record 11012823;
    BEGIN
      IF NOT ServiceOrder.GET("Service Order No.") THEN
        ServiceOrder.INIT;

      AdditionalCostEditable :=
        ((ServiceOrder."Source Type" <> ServiceOrder."Source Type"::Direct) OR
         (ServiceOrder."Service Contract No." = ''));
    END;

    LOCAL PROCEDURE DescriptionOnFormat@19023855();
    BEGIN
      IF "Level BOM" < 10 THEN
        DescriptionIndent := "Level BOM";
    END;

    PROCEDURE UpdateEditable@1100525004();
    BEGIN
      ObjectNoEditable := TRUE;
      OriginalQuantityEditable := ("Item No." = '');
      NormEditable := (("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting));
      RateCodeEditable := (("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting));
      RateEditable :=  ((("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Subcontracting)) AND ("Rate Code" = ''));
      PriceEditable := (Rate = 0);
      ItemDataEditable := ("Cost Type" = "Cost Type"::Material);
    END;

    BEGIN
    END.
  }
}

