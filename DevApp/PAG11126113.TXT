OBJECT Page 11126113 Plan Maint. Proposal Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Plan Maintenance Proposal Lines;
    SourceTable=Table11012823;
    PageType=NavigatePage;
    OnInit=BEGIN
             MinimalUnoccupiedHoursEnable := TRUE;
             MinimalUnoccupiedHours := 1;
           END;

    OnOpenPage=BEGIN
                 //**4PS.sn
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS.en
                 UpdateEditable;
                 WizardStep := 1;
                 ShowStep(TRUE);
               END;

    OnNewRecord=BEGIN
                  //**4PS.sn
                  DPA_SetDefaultDepartment;
                  //**4PS.en
                END;

    OnInsertRecord=VAR
                     xRecRef@1100525000 : RecordRef;
                   BEGIN
                     //**4PS.sn
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS.en
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528618;1 ;Action    ;
                      Name=Back;
                      CaptionML=ENU=< &Back;
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PreCheckStatus(FALSE);
                                 ShowStep(FALSE);
                                 PostCheckStatus(FALSE);
                                 WizardStep -= 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100528617;1 ;Action    ;
                      Name=Next;
                      CaptionML=ENU=&Next >;
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PreCheckStatus(TRUE);
                                 ShowStep(FALSE);
                                 PostCheckStatus(TRUE);
                                 WizardStep += 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100528616;1 ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Completed;
                      OnAction=BEGIN
                                 PostCheckStatus(TRUE);
                                 FinishWizard;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100528606;1;Group  ;
                CaptionML=ENU=Plan Method;
                Visible=Step1Visible;
                GroupType=Group }

    { 1100528609;2;Field  ;
                CaptionML=ENU=Plan Method;
                OptionCaptionML=ENU=Employee,Cluster;
                SourceExpr=PlanMethod }

    { 1100528602;1;Group  ;
                CaptionML=ENU=Employee;
                Visible=Step2Visible;
                GroupType=Group }

    { 1100525000;2;Field  ;
                CaptionML=ENU=Plan Maintenance Proposal Lines;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100528603;2;Field  ;
                CaptionML=ENU=Plan Date From;
                SourceExpr=PlanDateFrom }

    { 1100528608;2;Field  ;
                CaptionML=ENU=Plan Date Until;
                SourceExpr=PlanDateUntil }

    { 1100528601;2;Field  ;
                CaptionML=ENU=Employee No.;
                SourceExpr=ResourceNo;
                TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                OnValidate=VAR
                             Employee@1210190000 : Record 5200;
                           BEGIN
                             ResourceNoOnAfterValidate;
                           END;

                OnLookup=VAR
                           ResourceWOP@1100528602 : Record 11229278;
                           MaintenanceManagement@1100528600 : Codeunit 11012829;
                         BEGIN
                           MaintenanceManagement.GetResourceDSByMaintenanceProposalLineDS(
                             MaintenanceProposalLine, ResourceWOP, PlanDateFrom, PlanDateUntil, 1, '', '', '');
                           IF PAGE.RUNMODAL(0, ResourceWOP) = ACTION::LookupOK THEN BEGIN
                             ResourceNo := ResourceWOP."No.";
                             ResourceNoOnAfterValidate;
                           END;
                         END;
                          }

    { 1100528607;2;Field  ;
                CaptionML=ENU=Employee Name;
                SourceExpr=EmployeeName;
                Editable=FALSE }

    { 1100528604;1;Group  ;
                CaptionML=ENU=Cluster;
                Visible=Step3Visible;
                GroupType=Group }

    { 1100528611;2;Field  ;
                CaptionML=ENU=Cluster Seqn.;
                SourceExpr=ClusterSeqn;
                OnValidate=VAR
                             ServiceContractClusterSeq@1100528600 : Record 11071966;
                           BEGIN
                             IF ClusterSeqn <> 0 THEN BEGIN
                               ServiceContractClusterSeq.GET(
                                 MaintenanceProposalLine.GetClusterContractNo, MaintenanceProposalLine.Cluster, ClusterSeqn);
                               ClusterPlanDateFrom := ServiceContractClusterSeq."Execution Period Start Date";
                               ClusterPlanDateUntil := ServiceContractClusterSeq."Execution Period Ending Date";
                             END;
                           END;

                OnLookup=VAR
                           ServiceContractClusterSeq@1100528600 : Record 11071966;
                         BEGIN
                           ServiceContractClusterSeq.SETRANGE("Service Contract No.", MaintenanceProposalLine.GetClusterContractNo);
                           ServiceContractClusterSeq.SETRANGE("Cluster Code", MaintenanceProposalLine.Cluster);
                           IF PAGE.RUNMODAL(0, ServiceContractClusterSeq) = ACTION::LookupOK THEN BEGIN
                             ClusterSeqn := ServiceContractClusterSeq."Seq. No.";
                             ClusterPlanDateFrom := ServiceContractClusterSeq."Execution Period Start Date";
                             ClusterPlanDateUntil := ServiceContractClusterSeq."Execution Period Ending Date";
                           END;
                         END;
                          }

    { 1100528613;2;Field  ;
                CaptionML=ENU=Plan Date From;
                SourceExpr=ClusterPlanDateFrom;
                Editable=false }

    { 1100528614;2;Field  ;
                CaptionML=ENU=Plan Date Until;
                SourceExpr=ClusterPlanDateUntil;
                Editable=false }

    { 1100528615;1;Group  ;
                CaptionML=ENU=Other;
                Visible=Step4Visible;
                GroupType=Group }

    { 1100528605;2;Field  ;
                CaptionML=ENU=Travel Time;
                SourceExpr=TravelDuration }

    { 1100528612;2;Field  ;
                CaptionML=ENU=Assign to Several Days;
                SourceExpr=OccupySeveralDays;
                OnValidate=BEGIN
                             OccupySeveralDaysOnAfterValida;
                           END;
                            }

    { 1100528610;2;Field  ;
                Name=MinimalUnoccupiedHours;
                CaptionML=ENU=Minimal Unoccupied Hours;
                SourceExpr=MinimalUnoccupiedHours;
                Enabled=MinimalUnoccupiedHoursEnable }

  }
  CODE
  {
    VAR
      MaintenanceProposalLine@1100528604 : Record 11071696;
      ResourceNo@1100528600 : Code[20];
      EmployeeName@1100528603 : Text[100];
      PlanDateFrom@1100528601 : Date;
      PlanDateUntil@1100528607 : Date;
      TravelDuration@1100528602 : Duration;
      Text000@1100528605 : TextConst 'ENU=Employee No. not filled';
      Text001@1100528606 : TextConst 'ENU=Plan Date From and Plan Date To must be filled';
      Text002@1100528608 : TextConst 'ENU=Plan Date From must occur before Plan Date Until';
      MinimalUnoccupiedHours@1100528609 : Decimal;
      OccupySeveralDays@1100528610 : Boolean;
      MinimalUnoccupiedHoursEnable@19064514 : Boolean INDATASET;
      PlanMethod@1100528611 : 'Employee,Cluster Seqn.';
      ClusterSeqn@1100528612 : Integer;
      Text003@1100528613 : TextConst 'ENU=Selected Lines do not belong to same Cluster';
      ClusterPlanDateFrom@1100528614 : Date;
      ClusterPlanDateUntil@1100528615 : Date;
      WizardStep@1100528616 : Integer;
      Step1Visible@1100528619 : Boolean INDATASET;
      Step2Visible@1100528618 : Boolean INDATASET;
      Step3Visible@1100528617 : Boolean INDATASET;
      Step4Visible@1100528623 : Boolean INDATASET;
      FinishEnable@1100528622 : Boolean INDATASET;
      BackEnable@1100528621 : Boolean INDATASET;
      NextEnable@1100528620 : Boolean INDATASET;
      Text004@1100528624 : TextConst 'ENU=Cluster Seqn. must be set';
      DPA_IsHardFilter@1100525000 : Boolean;

    PROCEDURE SetSelection@1100528603(VAR IMaintenanceProposalLine@1100528600 : Record 11071696);
    BEGIN
      MaintenanceProposalLine.COPY(IMaintenanceProposalLine);
      MaintenanceProposalLine.FINDFIRST;
    END;

    PROCEDURE UpdateEditable@1100528600();
    BEGIN
      MinimalUnoccupiedHoursEnable := OccupySeveralDays;
    END;

    LOCAL PROCEDURE ResourceNoOnAfterValidate@19040646();
    VAR
      Resource@1100528600 : Record 11229278;
      ResourceMgtWorkOrderPlan@1100528601 : Codeunit 11229277;
    BEGIN
      IF ResourceNo <> '' THEN BEGIN
        ResourceMgtWorkOrderPlan.TestResourceWithinCompanyPlanGroup(ResourceNo);
        Resource.GET(ResourceNo);  //DP00465.c
        EmployeeName := Resource.Name;  //DP00465.c
      END;
    END;

    LOCAL PROCEDURE OccupySeveralDaysOnAfterValida@19062635();
    BEGIN
      UpdateEditable;
    END;

    PROCEDURE PreCheckStatus@1100528602(IForward@1100528600 : Boolean);
    VAR
      MaintenanceProposalLine2@1100528601 : Record 11071696;
    BEGIN
      CASE WizardStep OF
        2:
          BEGIN
            IF IForward THEN BEGIN
              IF ResourceNo = '' THEN
                ERROR(Text000);
              IF (PlanDateFrom = 0D) OR (PlanDateUntil = 0D) THEN
                ERROR(Text001);
              IF PlanDateFrom > PlanDateUntil THEN
                ERROR(Text002);
            END;
          END;
        3:
          BEGIN
            IF IForward THEN BEGIN
              IF ClusterSeqn = 0 THEN
                ERROR(Text004);
              MaintenanceProposalLine2.COPY(MaintenanceProposalLine);
              MaintenanceProposalLine2.SETFILTER(Cluster, '<>%1', MaintenanceProposalLine2.Cluster);
              IF NOT MaintenanceProposalLine2.ISEMPTY THEN
                ERROR(Text003);
              IF ClusterSeqn <> 0 THEN
                MaintenanceProposalLine.SETRANGE("Cluster Seqn.", ClusterSeqn);
            END;
          END;
      END;
    END;

    PROCEDURE PostCheckStatus@1100528604(IForward@1100528600 : Boolean);
    VAR
      MaintenanceProposalHeader@1100528601 : Record 11071695;
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            IF IForward THEN BEGIN
              CASE PlanMethod OF
                PlanMethod::Employee:
                  BEGIN
                    ClusterSeqn := 0;
                    ClusterPlanDateFrom := 0D;
                    ClusterPlanDateUntil := 0D;
                  END;
                PlanMethod::"Cluster Seqn.":
                  BEGIN
                    MaintenanceProposalHeader.GET(MaintenanceProposalLine."Maintenance Proposal");
                    MaintenanceProposalHeader.TESTFIELD("Created from", MaintenanceProposalHeader."Created from"::Contract);
                    ResourceNo := '';
                    EmployeeName := '';
                    PlanDateFrom := 0D;
                    PlanDateUntil := 0D;
                  END;
              END;
              UpdateEditable;
              IF PlanMethod = PlanMethod::"Cluster Seqn." THEN
                WizardStep += 1;
            END;
          END;
        2:
          IF IForward THEN
            IF PlanMethod = PlanMethod::Employee THEN
              WizardStep += 1;
        3:
          IF NOT IForward THEN
            IF PlanMethod = PlanMethod::"Cluster Seqn." THEN
              WizardStep -= 1;
        4:
          IF NOT IForward THEN
            IF PlanMethod = PlanMethod::Employee THEN
                WizardStep -= 1;
      END;
    END;

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            Step1Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;
            END;
          END;
        2:
          BEGIN
            Step2Visible := Visible;
            IF Visible THEN BEGIN
              NextEnable := TRUE;
              BackEnable := TRUE;
              FinishEnable := FALSE;
            END;
          END;
        3:
          BEGIN
            Step3Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := TRUE;
              NextEnable := TRUE;
            END;
          END;
        4:
          BEGIN
            Step4Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
            END;
          END;
      END;
    END;

    PROCEDURE FinishWizard@1100528606();
    VAR
      MaintenanceManagement@1100528600 : Codeunit 11012829;
    BEGIN
      MaintenanceManagement.PlanMaintPropLinesByResource(
        MaintenanceProposalLine, ResourceNo, PlanDateFrom, PlanDateUntil, TravelDuration,
        MinimalUnoccupiedHours, OccupySeveralDays, ClusterSeqn);
      CurrPage.CLOSE;
    END;

    PROCEDURE SetResourceNo@1100528601(IResourceNo@1100528600 : Code[20]);
    BEGIN
      ResourceNo := IResourceNo;
      ResourceNoOnAfterValidate;
    END;

    BEGIN
    END.
  }
}

