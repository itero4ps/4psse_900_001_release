OBJECT Page 11126281 Advice Order SF2
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Advice Order;
    SourceTable=Table11012055;
    DelayedInsert=Yes;
    PageType=List;
    AutoSplitKey=No;
    OnInit=BEGIN
             BinCodeProjectInventoryEditabl := TRUE;
             BinCodeEditable := TRUE;
             LocationCodeEditable := TRUE;
             "Vendor (Trade Item)Visible" := TRUE;
             ManufacturerVisible := TRUE;
             "Trade ItemVisible" := TRUE;
             "Basic ItemVisible" := TRUE;
             AdditionalCostServiceEditable := TRUE;
             "Ask for QuoteEditable" := TRUE;
             NegotiationrecommendedEditable := TRUE;
             ReleasedAdvOrderEditable := TRUE;
           END;

    OnOpenPage=VAR
                 ServiceOrder@1100528600 : Record 11012823;
               BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01

                 IF NOT ItemSetup.READPERMISSION THEN BEGIN
                   "Basic ItemVisible" := (FALSE);
                   "Trade ItemVisible" := (FALSE);
                   ManufacturerVisible := (FALSE);
                   "Vendor (Trade Item)Visible" := (FALSE);
                 END;

                 //when form used in Base Service Order form, the so no. must be visible
                 ServiceOrderVisible := (GETFILTER("Service Order No.") = '') AND (GETFILTER("Project No.") = '');
                 IF NOT ServiceOrder.GET(GETFILTER("Service Order No.")) THEN
                   SETRANGE("Service Order No.");

                 ProjSetup.GET;
               END;

    OnClosePage=VAR
                  ServiceOrder@1100528600 : Record 11012823;
                BEGIN
                  IF GETFILTER("Service Order No.") <> '' THEN BEGIN
                    ServiceOrder.SETFILTER("No.", GETFILTER("Service Order No."));
                    IF ServiceOrder.FINDSET(TRUE) THEN
                      REPEAT
                        IF ServiceOrder.DetermineLimitBudgetExceeded THEN
                          ServiceOrder.MODIFY(TRUE);
                      UNTIL ServiceOrder.NEXT = 0;
                  END;
                END;

    OnAfterGetRecord=BEGIN
                       DescriptionIndent := 0;
                       InventoryReservation("Item No.");
                       CALCFIELDS("Vendor Name (Trade Item)", "Vendor Name", "Manufacturer Name", "Consent Lines Available",
                                  "Consent Lines Serv. Available");
                       RefQuote := RouteRefMgtCU.GetQuoteOfReference("Purchase Route Reference");
                       RefPurchOrder := RouteRefMgtCU.GetPurchOrderOfReference("Purchase Route Reference");
                       GetItemSpecifications;
                       VendorPrice := GetVendorPrice(Vendor, Price, VendorCurrency);  //db, 20-11-08
                       StrategicPurchMgt.FindContractForAdviceOrder(Rec);
                       UpdateEditable;
                       DescriptionOnFormat;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                  InitRecord;
                  RefQuote := '';
                  RefPurchOrder := '';
                  VendorPrice := 0;      //db, 20-11-08
                  VendorCurrency := '';  //db, 20-11-08

                  LocInventoryQuan := 0;
                  InventoryQuan := 0;
                  ReservedQuan := 0;
                  InventoryUnit := '';

                  FILTERGROUP(4);
                  //when form used in Base Service Order form, fill so no.
                  IF (GETFILTER("Service Order No.") = '') AND (GETFILTER("Base Service Order No.") <> '') THEN
                    VALIDATE("Service Order No.", GETRANGEMIN("Base Service Order No."));
                  FILTERGROUP(0);

                  UpdateEditable;
                END;

    OnInsertRecord=BEGIN
                     "Quantity (Budget)" := 0;
                     "Quantity (Processed)" := 0;
                     "Process Status" := "Process Status"::Open;
                     VALIDATE(Processed, FALSE); //mg.c, 03-10-11: M28950
                     VALIDATE("Line No.", 0);
                     //** 0=signal for table trigger tp determine first free number
                     //** autosplitkey not used because of problems with suppress processed orders
                     //** initiating process data (when Ctrl C+V used)
                   END;

    ActionList=ACTIONS
    {
      { 1100528000;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100528001;1 ;ActionGroup;
                      CaptionML=ENU=Advice order }
      { 1100525005;2 ;ActionGroup;
                      CaptionML=ENU=Consent;
                      Image=BOMLedger }
      { 1210190019;3 ;Action    ;
                      CaptionML=ENU=Consent Lines by Service Order;
                      Image=BOMLedger;
                      OnAction=BEGIN
                                 ShowConsentLines(FALSE);
                               END;
                                }
      { 1210190017;3 ;Action    ;
                      CaptionML=ENU=Consent Lines by Advice Order;
                      Image=BOMLedger;
                      OnAction=BEGIN
                                 ShowConsentLines(TRUE);
                               END;
                                }
      { 1210190015;3 ;Action    ;
                      CaptionML=ENU=Create Consentlines;
                      Image=BOMLedger;
                      OnAction=BEGIN
                                 EditConsentLines;
                               END;
                                }
      { 1100528003;2 ;Action    ;
                      CaptionML=ENU=Documents;
                      Image=Documents;
                      OnAction=BEGIN
                                 ShowDocuments;
                               END;
                                }
      { 1100528401;2 ;Action    ;
                      CaptionML=ENU=&Comment Lines (Advice Order Line);
                      Image=Comment;
                      OnAction=BEGIN
                                 EditCommentLines;
                               END;
                                }
      { 1210190047;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210190045;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1210190068;2 ;Action    ;
                      CaptionML=ENU=Select Budget Lines;
                      Image=GetLines;
                      OnAction=BEGIN
                                 Budget;
                               END;
                                }
      { 1210190067;2 ;Action    ;
                      CaptionML=ENU=Select Recipes;
                      Image=SourceDocLine;
                      OnAction=BEGIN
                                 SelectRecipe;
                               END;
                                }
      { 1210190059;2 ;Action    ;
                      CaptionML=ENU=Divide Agreed Amount;
                      Image=ContractPayment;
                      OnAction=BEGIN
                                 FrmDivideAgreedAmount(); //mg, 08-02-11: M24388
                               END;
                                }
      { 1210190049;2 ;Action    ;
                      CaptionML=ENU=Calculate availability;
                      Image=SalesShipment;
                      OnAction=BEGIN
                                 UpdateLines;
                               END;
                                }
      { 1210190005;2 ;Action    ;
                      CaptionML=ENU=Modify Vendor Collectively;
                      Image=Vendor;
                      OnAction=BEGIN
                                 UpdateVendor;
                               END;
                                }
      { 1100409002;2 ;Action    ;
                      CaptionML=ENU=Modi&fy Collectively;
                      Image=ChangeBatch;
                      OnAction=BEGIN
                                 ModifyRun;
                               END;
                                }
      { 1210190025;2 ;Action    ;
                      CaptionML=ENU=Item &Journal;
                      Image=Journals;
                      OnAction=VAR
                                 ProjSetup@1210190001 : Record 315;
                                 ItemJnlLine@1210190002 : Record 83;
                                 ItemJnlTemplate@1210190003 : Record 82;
                               BEGIN
                                 ProjSetup.GET;
                                 IF ItemJnlTemplate.GET(ProjSetup."Inventory Journal Template") THEN BEGIN
                                   ItemJnlLine.FILTERGROUP := 2;
                                   ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlTemplate.Name);
                                   ItemJnlLine.FILTERGROUP := 0;
                                   ItemJnlLine.SETRANGE("Service Order No.", "Service Order No.");
                                   PAGE.RUN(ItemJnlTemplate."Page ID",ItemJnlLine);
                                 END ELSE BEGIN
                                   PAGE.RUN(PAGE::"Item Journal", ItemJnlLine);  //db, 18-05-05: aangeroepen form bepaalt default template
                                 END;
                               END;
                                }
      { 1210190023;2 ;Action    ;
                      CaptionML=ENU=Shipping &Details;
                      RunObject=Page 11012486;
                      RunPageView=SORTING(No.)
                                  WHERE(Source=CONST(AdviceOrder));
                      RunPageLink=Order No.=FIELD(Service Order No.),
                                  Source=CONST(AdviceOrder);
                      Visible=false;
                      Image=GetLines }
      { 1210190037;2 ;Action    ;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=ENU=Generate &Inventory Orders;
                      Image=ItemInvoice;
                      OnAction=VAR
                                 ServiceOrder@1210190000 : Record 11012823;
                               BEGIN
                                 IF NOT ServiceOrder.GET("Service Order No.") THEN
                                   ServiceOrder.INIT;
                                 IF (ServiceOrder.Status > ServiceOrder.Status::"In Process") THEN
                                   ERROR(Text000, ServiceOrder.Status);

                                 ProcessInventory;
                               END;
                                }
      { 1210190035;2 ;Action    ;
                      CaptionML=ENU=Generate &Shipping Details;
                      Visible=false;
                      Image=NewShipment;
                      OnAction=BEGIN
                                 ProcessShippingDetails;
                               END;
                                }
      { 1210190009;2 ;Action    ;
                      CaptionML=ENU=Text;
                      Image=Text;
                      OnAction=BEGIN
                                 EditText;
                               END;
                                }
      { 1100525003;1 ;ActionGroup;
                      CaptionML=ENU=Purchase order;
                      Image=Document }
      { 1210190041;2 ;Action    ;
                      CaptionML=ENU=Generate Purchase Quote;
                      Image=Quote;
                      OnAction=BEGIN
                                 ProcessGenQuote;
                               END;
                                }
      { 1210190039;2 ;Action    ;
                      ShortCutKey=Shift+F9;
                      CaptionML=ENU=Generate &Purchase Orders;
                      Image=MakeOrder;
                      OnAction=VAR
                                 ServiceOrder@1210190000 : Record 11012823;
                               BEGIN
                                 IF NOT ServiceOrder.GET("Service Order No.") THEN
                                   ServiceOrder.INIT;
                                 IF (ServiceOrder.Status > ServiceOrder.Status::"In Process") THEN
                                   ERROR(Text000, ServiceOrder.Status);

                                 ProcessPurchase;
                               END;
                                }
      { 1210190031;2 ;Action    ;
                      CaptionML=ENU=&Purchase Route References;
                      Image=ContactReference;
                      OnAction=BEGIN
                                 ShowPurchRouteRef;
                               END;
                                }
      { 1210190029;2 ;Action    ;
                      CaptionML=ENU=Purchase &Order;
                      Image=Document;
                      OnAction=VAR
                                 ServiceOrder@1100528400 : Record 11012823;
                               BEGIN
                                 IF "Service Order No." <> '' THEN
                                   IF ServiceOrder.GET("Service Order No.") THEN
                                     ServiceOrder.ShowPurchaseOrdersForServiceOrder;
                               END;
                                }
      { 1210190027;2 ;Action    ;
                      CaptionML=ENU=Purchase &Line details;
                      Image=ViewCheck;
                      OnAction=BEGIN
                                 EditLineDetails; //mg, 13-01-12: M32173
                               END;
                                }
      { 1100525001;1 ;ActionGroup;
                      CaptionML=ENU=Advice order;
                      Image=OrderTracking }
      { 1210190011;2 ;Action    ;
                      CaptionML=ENU=Advice Orders by &Item;
                      RunObject=Page 11012122;
                      Image=OrderTracking }
      { 1210190057;2 ;Action    ;
                      CaptionML=ENU=Compress Advice Orders;
                      Image=Compress;
                      OnAction=BEGIN
                                 Compress;
                               END;
                                }
      { 1210190055;2 ;Action    ;
                      CaptionML=ENU=Split Advice Orders;
                      Image=Split;
                      OnAction=BEGIN
                                 Split;
                               END;
                                }
      { 1210190053;2 ;Action    ;
                      CaptionML=ENU=&Divide Advice Orders;
                      Image=Allocate;
                      OnAction=BEGIN
                                 Divide;
                               END;
                                }
      { 1210190051;2 ;Action    ;
                      CaptionML=ENU=Release Advice Orders;
                      Image=Approve;
                      OnAction=BEGIN
                                 ApproveLines;  //db, 06-05-08
                               END;
                                }
      { 1100525009;2 ;Action    ;
                      CaptionML=ENU=Actualise Price;
                      Image=Price;
                      OnAction=BEGIN
                                 UpdatePrice;
                               END;
                                }
      { 1210190001;2 ;Action    ;
                      CaptionML=ENU=Advice Order Reports;
                      Image=Report;
                      OnAction=BEGIN
                                 PrintServiceAdviceSelect;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=tbAdviceOrderLines;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Description;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Project No.";
                Visible=FALSE;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr=Element;
                Visible=FALSE;
                Editable=ElementEditable }

    { 1100525036;2;Field  ;
                SourceExpr="Description Element";
                Visible=FALSE }

    { 1210190004;2;Field  ;
                SourceExpr="Extension Contract";
                Visible=FALSE;
                Editable=ExtensionContractEditable }

    { 1100525038;2;Field  ;
                SourceExpr="Description Extension";
                Visible=FALSE }

    { 1100485030;2;Field  ;
                SourceExpr="Plot No.";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 4   ;2   ;Field     ;
                SourceExpr="Line No.";
                Visible=FALSE }

    { 1100485000;2;Field  ;
                SourceExpr="Service Order No.";
                Visible=ServiceOrderVisible;
                Editable=FALSE }

    { 1210190012;2;Field  ;
                SourceExpr="Recipe Group";
                Visible=FALSE;
                Editable=FALSE }

    { 1210190018;2;Field  ;
                SourceExpr=Recipe;
                Visible=FALSE;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Item No.";
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               ItemNoOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           IF ProjSetup."Released AdvOrder not editable" AND
                             ("Process Status" >= "Process Status"::Released) THEN EXIT;

                           HandleItemLookup(1);
                           CurrPage.UPDATE;
                         END;
                          }

    { 1210190050;2;Field  ;
                SourceExpr="Item Category Code";
                Visible=FALSE }

    { 1100525044;2;Field  ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr=Manufacturer;
                Visible=ManufacturerVisible;
                Editable=ReleasedAdvOrderEditable;
                OnLookup=BEGIN
                           IF ProjSetup."Released AdvOrder not editable" AND
                             ("Process Status" >= "Process Status"::Released) THEN EXIT;

                           GabiVendorRec.HandleVendorLookup(1, Manufacturer);
                         END;
                          }

    { 12  ;2   ;Field     ;
                SourceExpr="Basic Item";
                Visible="Basic ItemVisible";
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               BasicItemOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           IF ProjSetup."Released AdvOrder not editable" AND
                             ("Process Status" >= "Process Status"::Released) THEN EXIT;

                           HandleItemLookup(2);
                         END;
                          }

    { 14  ;2   ;Field     ;
                SourceExpr="Vendor (Trade Item)";
                Visible="Vendor (Trade Item)Visible";
                Editable=ReleasedAdvOrderEditable;
                OnLookup=VAR
                           lvItem@1100485002 : Code[20];
                         BEGIN
                           IF ProjSetup."Released AdvOrder not editable" AND
                             ("Process Status" >= "Process Status"::Released) THEN EXIT;

                           IF "Basic Item" = '' THEN BEGIN
                             lvItem := "Vendor (Trade Item)";
                             GabiVendorRec.HandleVendorLookup(2, lvItem);
                             VALIDATE("Vendor (Trade Item)", lvItem);
                           END ELSE BEGIN
                             HandleItemLookup(0);
                           END;
                         END;
                          }

    { 1210190054;2;Field  ;
                DrillDown=No;
                SourceExpr="Vendor Name (Trade Item)";
                Visible=FALSE;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Trade Item";
                Visible="Trade ItemVisible";
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                               TradeItemOnAfterValidate;
                           END;

                OnLookup=VAR
                           lvTempAdviceOrderLine@1100525002 : TEMPORARY Record 11012055;
                         BEGIN
                           IF ProjSetup."Released AdvOrder not editable" AND
                             ("Process Status" >= "Process Status"::Released) THEN EXIT;

                           IF "Item No." <> '' THEN BEGIN
                             lvTempAdviceOrderLine.COPY(Rec);  //db, 21-08-09
                             lvTempAdviceOrderLine.VALIDATE("Item No.","Item No.");
                             g_ItemCode := lvTempAdviceOrderLine."Trade Item";
                             g_Vendor := lvTempAdviceOrderLine."Vendor (Trade Item)";
                           END;

                           HandleItemLookup(3);
                         END;

                OnAssistEdit=BEGIN
                               HandleItemAssistEdit(3);
                             END;
                              }

    { 1100485018;2;Field  ;
                SourceExpr="Item Brand";
                Visible=FALSE }

    { 1100485020;2;Field  ;
                SourceExpr="Item Type";
                Visible=FALSE }

    { 1100485022;2;Field  ;
                SourceExpr="Item Series";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr="Shelf No. (Item)";
                Visible=FALSE }

    { 1100525020;2;Field  ;
                SourceExpr="Shelf No. (SKU)";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr=Vendor;
                Enabled=ReleasedAdvOrderEditable;
                OnAssistEdit=BEGIN
                               LookupItemVendor(ReleasedAdvOrderEditable);
                             END;
                              }

    { 1210190056;2;Field  ;
                DrillDown=No;
                SourceExpr="Vendor Name";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525040;2;Field  ;
                SourceExpr="Order Address Code";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 1210190044;2;Field  ;
                SourceExpr="Plant Location";
                Visible=FALSE }

    { 1210190046;2;Field  ;
                SourceExpr="Plant Type";
                Visible=FALSE }

    { 24  ;2   ;Field     ;
                SourceExpr="Cost Type";
                Editable=ReleasedAdvOrderEditable }

    { 26  ;2   ;Field     ;
                SourceExpr="Cost Object";
                Editable=ReleasedAdvOrderEditable;
                LookupPageID=Cost Object List;
                OnValidate=BEGIN
                             CostObjectOnAfterValidate;
                           END;
                            }

    { 1100485016;2;Field  ;
                SourceExpr="Cost Component";
                Editable=ReleasedAdvOrderEditable }

    { 28  ;2   ;Field     ;
                SourceExpr=Description;
                Editable=ReleasedAdvOrderEditable }

    { 30  ;2   ;Field     ;
                SourceExpr="Description 2";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 1210190002;2;Field  ;
                SourceExpr="External Text Block";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              EditText;
                            END;
                             }

    { 1210190032;2;Field  ;
                SourceExpr="Price Agreement";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 1100485014;2;Field  ;
                SourceExpr="Additional Cost (Service)";
                Visible=FALSE;
                Editable=AdditionalCostServiceEditable }

    { 32  ;2   ;Field     ;
                SourceExpr="Quantity (Budget)" }

    { 38  ;2   ;Field     ;
                SourceExpr="Quantity (Advice)";
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             QuantityAdviceOnAfterValidate;
                           END;
                            }

    { 40  ;2   ;Field     ;
                SourceExpr="Quantity (Processed)";
                Editable=FALSE }

    { 1100485012;2;Field  ;
                CaptionML=ENU=Quantity Received;
                SourceExpr=ReceivedPurchaseQuantity('');
                Editable=FALSE }

    { 1100525034;2;Field  ;
                CaptionML=ENU=Deliverable Quantity;
                SourceExpr=GetDeliverableQuantity }

    { 34  ;2   ;Field     ;
                SourceExpr="Unit of Measure";
                Editable=UnitofMeasureEditable;
                OnValidate=BEGIN
                             UnitofMeasureOnAfterValidate;
                           END;
                            }

    { 42  ;2   ;Field     ;
                SourceExpr=Transaction;
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             TransactionOnAfterValidate;
                           END;
                            }

    { 1210190010;2;Field  ;
                SourceExpr="Gross Price";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             GrossPriceOnAfterValidate;
                           END;
                            }

    { 1210190034;2;Field  ;
                SourceExpr="Discount %";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             Discount37OnAfterValidate;
                           END;
                            }

    { 36  ;2   ;Field     ;
                SourceExpr=Price;
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             PriceOnAfterValidate;
                           END;
                            }

    { 1100525004;2;Field  ;
                Name=VendorPrice;
                CaptionML=ENU=Direct Unit Cost;
                SourceExpr=VendorPrice;
                Visible=FALSE;
                Editable=VendorPriceEditable;
                OnValidate=BEGIN
                             VendorPriceOnAfterValidate;
                           END;
                            }

    { 1100525006;2;Field  ;
                Name=VendorCurrency;
                CaptionML=ENU=Vendor Currency;
                SourceExpr=VendorCurrency;
                Visible=FALSE;
                Editable=FALSE }

    { 1100485036;2;Field  ;
                SourceExpr=Amount }

    { 1100525010;2;Field  ;
                SourceExpr="Sales Price";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 1210190006;2;Field  ;
                SourceExpr="Process Status";
                Editable=ProcessStatusEditable;
                OnValidate=BEGIN
                             //**4PS01.sn
                             IF ("Process Status" = "Process Status"::Open) AND
                                ("Quantity (Processed)" <> 0 )
                             THEN
                               "Process Status" := "Process Status"::"Partly Processed";
                             //**4PS01.en
                               ProcessStatusOnAfterValidate;
                           END;
                            }

    { 44  ;2   ;Field     ;
                SourceExpr=Processed;
                Editable=FALSE }

    { 1100528300;2;Field  ;
                SourceExpr="Supplying Company Inventory";
                Visible=FALSE;
                Editable=SupplyingCompanyInventEditable;
                OnValidate=BEGIN
                             SupplyingCompanyInventoryOnAft;
                           END;
                            }

    { 46  ;2   ;Field     ;
                CaptionML=ENU=Inventory;
                SourceExpr=InventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::All);
                            END;
                             }

    { 1100525008;2;Field  ;
                CaptionML=ENU=Inventory pref. locations;
                SourceExpr=InventoryPrefLocations;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::PrefLocations);
                            END;
                             }

    { 48  ;2   ;Field     ;
                CaptionML=ENU=Reserved for Project;
                SourceExpr=ReservedQuan;
                Editable=FALSE;
                OnDrillDown=VAR
                              ItemJnlLineRec@1210190001 : Record 83;
                            BEGIN
                              IF ItemRec.GET("Item No.") THEN BEGIN
                                IF ("Supplying Company Inventory" <> '') THEN
                                  ItemJnlLineRec.CHANGECOMPANY("Supplying Company Inventory");

                                ItemJnlLineRec.SETRANGE("Item No.", ItemRec."No.");
                                ItemJnlLineRec."Job No." := "Project No.";
                                PAGE.RUN(0,ItemJnlLineRec);
                              END;
                            END;
                             }

    { 50  ;2   ;Field     ;
                CaptionML=ENU=Base Unit of Measure;
                SourceExpr=InventoryUnit;
                Editable=FALSE }

    { 52  ;2   ;Field     ;
                SourceExpr="Order Date";
                Editable=ReleasedAdvOrderEditable }

    { 54  ;2   ;Field     ;
                SourceExpr="Delivery Period";
                Editable=ReleasedAdvOrderEditable }

    { 56  ;2   ;Field     ;
                SourceExpr="Receipt Date";
                Editable=ReleasedAdvOrderEditable;
                OnValidate=BEGIN
                             ReceiptDateOnAfterValidate;
                           END;
                            }

    { 1100525007;2;Field  ;
                SourceExpr="Requested Receipt Date";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 1210190048;2;Field  ;
                SourceExpr="Expected return on";
                Visible=FALSE }

    { 60  ;2   ;Field     ;
                SourceExpr="Location Code";
                Editable=LocationCodeEditable;
                OnValidate=BEGIN
                             LocationCodeOnAfterValidate;
                           END;
                            }

    { 1100526200;2;Field  ;
                SourceExpr="Bin Code";
                Editable=BinCodeEditable }

    { 1210190008;2;Field  ;
                SourceExpr="Bin Code (Project Inventory)";
                Editable=BinCodeProjectInventoryEditabl }

    { 1100485034;2;Field  ;
                CaptionML=ENU=Location Inventory;
                SourceExpr=LocInventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::Location);
                            END;
                             }

    { 58  ;2   ;Field     ;
                SourceExpr=Deliver;
                Editable=ReleasedAdvOrderEditable }

    { 62  ;2   ;Field     ;
                SourceExpr="Ship To Location";
                Editable=ReleasedAdvOrderEditable }

    { 1100485038;2;Field  ;
                SourceExpr="Alternative Vendor";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485040;2;Field  ;
                SourceExpr="Alternative Item";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485042;2;Field  ;
                SourceExpr="Alternative Price";
                Visible=FALSE;
                Editable=FALSE }

    { 64  ;2   ;Field     ;
                SourceExpr="Purchase Action";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 66  ;2   ;Field     ;
                SourceExpr="Purchase Phase";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 1210190022;2;Field  ;
                SourceExpr="Purchaser Code";
                Editable=ReleasedAdvOrderEditable }

    { 1210190000;2;Field  ;
                SourceExpr="Negotiation recommended";
                Visible=FALSE;
                Editable=NegotiationrecommendedEditable }

    { 1210190028;2;Field  ;
                SourceExpr="Ask for Quote";
                Editable="Ask for QuoteEditable" }

    { 1210190026;2;Field  ;
                CaptionML=ENU=Quote No.;
                SourceExpr=RefQuote;
                Visible=FALSE;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefQuote = '') THEN
                             EXIT;

                           IF (COPYSTR(RefQuote, 1, 1) = '<') THEN  // IF Quote No. is '<Nr.>', then more than one quote present
                             RouteRefMgtCU.ShowReferenceQuoteList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Quote);
                             lvPurchHeadRec.SETRANGE("No.", RefQuote);
                             PAGE.RUNMODAL(PAGE::"Purchase Quote", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1210190030;2;Field  ;
                CaptionML=ENU=Purchase Order;
                SourceExpr=RefPurchOrder;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefPurchOrder = '') THEN
                             EXIT;

                           IF (COPYSTR(RefPurchOrder, 1, 1) = '<') THEN  // IF Order No. is '<Nr.>', then more than one order present
                             RouteRefMgtCU.ShowReferencePurchOrderList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Order);
                             lvPurchHeadRec.SETRANGE("No.", RefPurchOrder);
                             PAGE.RUNMODAL(PAGE::"Purchase Order", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1210190024;2;Field  ;
                SourceExpr="Purchase Route Reference";
                Visible=FALSE }

    { 1100525042;2;Field  ;
                SourceExpr="ICK Order";
                Visible=FALSE }

    { 1210190036;2;Field  ;
                SourceExpr="Created by";
                Visible=FALSE }

    { 1100525032;2;Field  ;
                SourceExpr="Created by Employee No.";
                Visible=FALSE }

    { 1210190014;2;Field  ;
                SourceExpr="Date Created";
                Visible=FALSE }

    { 1210190016;2;Field  ;
                SourceExpr="Modified by";
                Visible=FALSE }

    { 1210190020;2;Field  ;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1100485024;2;Field  ;
                SourceExpr="E-Plan Item";
                Visible=FALSE }

    { 1100485026;2;Field  ;
                SourceExpr="Scheme Code";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 1100485028;2;Field  ;
                SourceExpr="Comments for Logistics";
                Visible=FALSE;
                Editable=ReleasedAdvOrderEditable }

    { 1100526000;2;Field  ;
                SourceExpr="Main Project No.";
                Visible=FALSE }

    { 1100526100;2;Field  ;
                SourceExpr="Yard No.";
                Visible=FALSE }

    { 1100525014;2;Field  ;
                SourceExpr="System No.";
                Visible=FALSE }

    { 1100525012;2;Field  ;
                SourceExpr="Entity Type";
                Visible=FALSE }

    { 1100525016;2;Field  ;
                SourceExpr="Entity No.";
                Visible=FALSE }

    { 1100525018;2;Field  ;
                SourceExpr="Cable Transit Pos.";
                Visible=FALSE }

    { 1100525000;2;Field  ;
                SourceExpr="Consent Lines Available";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525002;2;Field  ;
                SourceExpr="Consent Lines Serv. Available";
                Visible=FALSE }

    { 1100528400;2;Field  ;
                SourceExpr="Consented Date-Time" }

    { 1100525024;2;Field  ;
                SourceExpr="Contract Type" }

    { 1100525026;2;Field  ;
                CaptionML=ENU=Blanket Order;
                SourceExpr=StrategicPurchMgt.NumberOfBlOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderAdviceOrder(Rec);
                         END;
                          }

    { 1100525030;2;Field  ;
                CaptionML=ENU=Blanket Order Line;
                SourceExpr=StrategicPurchMgt.NumberOfBlOrderLinesAdvOrder(Rec);
                Editable=FALSE;
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1100525028;2;Field  ;
                CaptionML=ENU=Quantity in Blanket Orders;
                SourceExpr=StrategicPurchMgt.QtyInBlanketOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1210190038;2;Field  ;
                SourceExpr="Glazing Service Call No.";
                Visible=FALSE }

    { 1210190040;2;Field  ;
                SourceExpr="Glazing Service Call Line No.";
                Visible=FALSE }

    { 1210190042;2;Field  ;
                CaptionML=ENU=Documents;
                SourceExpr=HasDocumentLinks;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowDocuments;
                            END;
                             }

    { 1210190052;2;Field  ;
                CaptionML=ENU=Comment;
                SourceExpr=CommentLineExist();
                Visible=FALSE;
                Editable=FALSE;
                OnValidate=BEGIN
                             CommentLineExistOnPush;
                           END;
                            }

    { 1100528600;2;Field  ;
                SourceExpr="Price History 0 Exists" }

    { 1100409001;2;Field  ;
                SourceExpr="Vendor No. (Item Card)";
                Importance=Additional }

    { 1100409000;2;Field  ;
                SourceExpr="Vendor Item No. (Item Card)";
                Importance=Additional }

  }
  CODE
  {
    VAR
      ProjSetup@1100525006 : Record 315;
      ItemSetup@1100525005 : Record 11012300;
      ItemRec@1100525008 : Record 27;
      AdviceRec@1100485001 : Record 11012055;
      GabiVendorRec@1100485003 : Record 11012304;
      PrintDoc@1100485005 : Codeunit 229;
      AdviceCu@1210190012 : Codeunit 11012041;
      RouteRefMgtCU@1210190005 : Codeunit 11012045;
      InventoryQuan@11012010 : Decimal;
      ReservedQuan@11012011 : Decimal;
      LocInventoryQuan@1100485000 : Decimal;
      InventoryUnit@11012012 : Code[10];
      RefQuote@1210190004 : Code[20];
      RefPurchOrder@1210190018 : Code[20];
      Text000@1210190017 : TextConst 'ENU=Insufficient Stock present';
      VendorPrice@1100525000 : Decimal;
      VendorCurrency@1100525001 : Code[20];
      ShowLocations@1100525002 : 'All,PrefLocations,Location';
      g_ItemCode@1100525004 : Code[20];
      g_Vendor@1100525003 : Code[20];
      StrategicPurchMgt@1100525007 : Codeunit 11020211;
      DPA_IsHardFilter@1100000999 : Boolean;
      Text001@1210190001 : TextConst 'ENU=Logistic handling from this item is on Component Level. Via de button ''Explode BOM'' this item can be exploded.';
      NegotiationrecommendedEditable@19025029 : Boolean INDATASET;
      "Ask for QuoteEditable"@19065696 : Boolean INDATASET;
      AdditionalCostServiceEditable@19048170 : Boolean INDATASET;
      "Basic ItemVisible"@19042756 : Boolean INDATASET;
      "Trade ItemVisible"@19042429 : Boolean INDATASET;
      ManufacturerVisible@19015155 : Boolean INDATASET;
      "Vendor (Trade Item)Visible"@19043796 : Boolean INDATASET;
      DescriptionIndent@19057867 : Integer INDATASET;
      BinCodeProjectInventoryEditabl@19024719 : Boolean INDATASET;
      SupplyingCompanyInventEditable@1210190000 : Boolean INDATASET;
      ElementEditable@1210190002 : Boolean INDATASET;
      ExtensionContractEditable@1210190003 : Boolean INDATASET;
      ReleasedAdvOrderEditable@1210190006 : Boolean INDATASET;
      UnitofMeasureEditable@1210190007 : Boolean INDATASET;
      VendorPriceEditable@1210190008 : Boolean INDATASET;
      ProcessStatusEditable@1210190009 : Boolean INDATASET;
      LocationCodeEditable@1210190010 : Boolean INDATASET;
      BinCodeEditable@1210190011 : Boolean INDATASET;
      ServiceOrderVisible@1210190013 : Boolean INDATASET;

    PROCEDURE Budget@8();
    BEGIN
      IF "Record Type" = "Record Type"::ServOrder THEN
        AdviceCu.SelectServiceBudget("Service Order No.")
      ELSE
        AdviceCu.SelectProjectBudget("Project No.", '', '');
    END;

    PROCEDURE PurchaseAction@10();
    BEGIN
      AdviceCu.SelectPurchaseAction("Project No.");
    END;

    PROCEDURE ProcessGenQuote@1210190006();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessGenQuote(AdviceOrderLine);
    END;

    PROCEDURE ProcessPurchase@2();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessPurchase(AdviceOrderLine, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessInventory@3();
    VAR
      Text001@1100525000 : TextConst 'ENU=Do you want to recalculate the lines first?';
      AdviceOrderLine@1100525001 : Record 11012055;
      AdviceOrderLine2@1100525002 : Record 11012055;
      Counter@1100525003 : Integer;
      Text002@1100525004 : TextConst 'ENU=There are %1 inverntory entries created in Item Journal.';
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      CLEAR(AdviceCu); //CALL C019988 newline
      ProjSetup.GET;
      IF (ProjSetup."Inventory Calc. Advice Order" = ProjSetup."Inventory Calc. Advice Order"::Availability) AND
        CONFIRM(Text001)
      THEN BEGIN
        AdviceCu.SetSkipMessage;
        IF NOT AdviceOrderLine.ISEMPTY THEN                              //CALL C019988 newline
          AdviceCu.PreSetToTypeAndBatch(AdviceOrderLine, FALSE, TRUE);   //CALL C019988 newline

        IF AdviceOrderLine.FINDSET(TRUE,TRUE) THEN
          REPEAT
            AdviceOrderLine2 := AdviceOrderLine;
            AdviceOrderLine2.SETRECFILTER;
            AdviceOrderLine2.GetDefaults;
            AdviceOrderLine2.MODIFY;
            AdviceOrderLine2.MARK(TRUE);
            Counter += AdviceCu.ProcessInventory(AdviceOrderLine2,FALSE,FALSE); //PBRun= false, ItemRun=false
          UNTIL AdviceOrderLine.NEXT = 0;
          MESSAGE(Text002,Counter);
      END ELSE
        AdviceCu.ProcessInventory(AdviceOrderLine, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessRun@1210190003();
    BEGIN
      AdviceCu.ProcessRun(FALSE);  //ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessPlant@1210190009();
    BEGIN
      //mg, 07-07-11: RFC605
      AdviceCu.ProcessPlant(Rec, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Compress@1();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.ISEMPTY THEN BEGIN
        AdviceOrderLine.RESET;
        AdviceOrderLine.COPY(Rec);
      END;
      AdviceCu.CompressLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Split@9();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.FINDFIRST THEN; //mg, 22-01-2014: C010838
      AdviceCu.SplitLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Divide@1100525001();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      //AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.FINDFIRST THEN; //mg, 22-01-2014: C010838
      AdviceCu.SplitLinesPrefLoc(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE InventoryReservation@4(lItem@11012000 : Code[20]);
    BEGIN
      LocInventoryQuan := 0;
      InventoryQuan := 0;
      ReservedQuan := 0;
      InventoryUnit := '';

      IF ("Supplying Company Inventory" <> '') THEN
        ItemRec.CHANGECOMPANY("Supplying Company Inventory");

      IF ItemRec.GET(lItem) THEN BEGIN
        //**4PS.sn
        IF "Record Type" = "Record Type"::Project THEN
          ItemRec.SETRANGE("Project Filter","Project No.");
        //**4PS.en
        ItemRec.CALCFIELDS(Inventory, "Qty. on Item Journal Project", "Qty. on Item Journal Service");
        LocInventoryQuan := GetInventory("Location Code",ItemRec,FALSE);
        InventoryQuan := GetInventory('',ItemRec,TRUE);
        ReservedQuan := ItemRec."Qty. on Item Journal Project" + ItemRec."Qty. on Item Journal Service";
        InventoryUnit := ItemRec."Base Unit of Measure";
      END;

      IF ("Supplying Company Inventory" <> '') THEN
        ItemRec.CHANGECOMPANY(COMPANYNAME);
    END;

    PROCEDURE EditText@1210190000();
    BEGIN
      AdviceCu.EditText(Rec);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE HandleItemLookup@1210190001(ZoomType@1210190000 : Integer);
    BEGIN
      LookupItemData(ZoomType,g_ItemCode,g_Vendor);  //db, 30-11-10: M23941
      IF ZoomType = -1 THEN  //db, 09-03-07 (call 8283)
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE HandleItemAssistEdit@1100528302(ZoomType@1210190000 : Integer);
    BEGIN
      //kzwerver, 140110, n, #C011514
      AssistEditItemData(ZoomType);
      IF ZoomType = -1 THEN
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ApproveLines@1210190002();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ApproveLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ShowPurchRouteRef@1210190004();
    BEGIN
      RouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
    END;

    PROCEDURE UpdatePrice@1210190007();
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN  //0=project, 1=service
        AdviceCu.UpdateActualPrice(0, "Project No.")
      ELSE
        AdviceCu.UpdateActualPrice(1, "Service Order No.");
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE PrintProjectAdviceSelect@1100485001();
    BEGIN
      AdviceRec.COPY(Rec);
      AdviceRec.SETRANGE("Record Type","Record Type"::Project);
      PrintDoc.PrintProjAdvice(AdviceRec);
    END;

    PROCEDURE PrintServiceAdviceSelect@1100485002();
    BEGIN
      AdviceRec.COPY(Rec);
      FILTERGROUP(4);
      IF GETFILTER("Service Order No.") <> '' THEN
        Rec.COPYFILTER("Service Order No.", AdviceRec."Service Order No.");
      IF GETFILTER("Base Service Order No.") <> '' THEN
        Rec.COPYFILTER("Base Service Order No.", AdviceRec."Base Service Order No.");
      FILTERGROUP(0);
      AdviceRec.SETRANGE("Record Type","Record Type"::ServOrder);
      PrintDoc.PrintServAdvice(AdviceRec);
    END;

    PROCEDURE ProcessShippingDetails@1100485003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.ProcessShippingDetails(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateVendor@1100485000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
      ModifyItemVendor@1100485000 : Page 11020420;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      ModifyItemVendor.SetAdviceOrderRec(AdviceOrderLine);
      ModifyItemVendor.RUNMODAL;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateFromSelectedQuote@1100485004();
    BEGIN
      AdviceCu.UpdateQuotePrice(Rec);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SelectRecipe@1100485005();
    VAR
      RecipeFrm@1100485001 : Page 11012164;
    BEGIN
      AdviceCu.SelectBaseRecipe(Rec); //DP00381
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE DrillDownInventory@1100525002(ShowLocations@1100525003 : 'All,PrefLocations,Location');
    BEGIN
      AdviceCu.DrillDownInventory(Rec, ShowLocations);  //db, 09-02-09
    END;

    PROCEDURE UpdateLines@1100525003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.UpdateLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SetContractFilter@1100525008(ContractFilter@1100525000 : ' ,No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order');
    BEGIN
      CASE ContractFilter OF
        ContractFilter::" ":
          SETRANGE("Contract Type");
        ContractFilter::"No Contract":
          SETRANGE("Contract Type","Contract Type"::"No Contract");
        ContractFilter::Contract:
          SETRANGE("Contract Type","Contract Type"::Contract);
        ContractFilter::"Contract with Discount Agreement":
          SETRANGE("Contract Type","Contract Type"::"Contract with Discount Terms");
        ContractFilter::"General Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"General Blanket Order");
        ContractFilter::"Project Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Project Blanket Order");
        ContractFilter::"Service Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Service Blanket Order");
      END;
      CurrPage.UPDATE;
    END;

    PROCEDURE SetProcessStatusFilter@1100525007(ProcessStatusFilter@1100525000 : Text[1024]) : Text[1024];
    BEGIN
      IF ProcessStatusFilter <> '' THEN
        SETFILTER("Process Status",ProcessStatusFilter)
      ELSE
        SETRANGE("Process Status");
      CurrPage.UPDATE;
    END;

    PROCEDURE SetElementFilter@1100525005(ElementFilter@1100525000 : Code[250]);
    BEGIN
      IF ElementFilter <> '' THEN
        SETFILTER(Element,ElementFilter)
      ELSE
        SETRANGE(Element);
      CurrPage.UPDATE;
    END;

    PROCEDURE ShowItemAvailbyPeriod@1100525006();
    VAR
      Item@1100525000 : Record 27;
    BEGIN
      IF "Item No." = '' THEN EXIT; //**4PS.n
      //**4PS
      IF Item.GET("Item No.") THEN BEGIN
        // Item.SETFILTER("Project Filter",'=%1',"Project No."); //**4PS.o
        PAGE.RUN(PAGE::"Item Availability by Periods",Item);
      END;
    END;

    PROCEDURE GenerateICKOrder@1100525009();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceCu.GenerateICKOrder(AdviceOrderLine);  //db, 17-08-10: M15519
      CurrPage.UPDATE;
    END;

    PROCEDURE FrmDivideAgreedAmount@1100530000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      //mg, 08-02-11: M24388
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      Rec.DivideAgreedAmount(AdviceOrderLine);
    END;

    PROCEDURE ShowDocuments@1210190005();
    VAR
      RecRef@1210190000 : RecordRef;
      DocumentFilters@1210190001 : Codeunit 11012432;
    BEGIN
      TESTFIELD("Line No.");
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Global Dimension 1 Code", FALSE, TRUE);
    END;

    PROCEDURE EditLineDetails@1210190008();
    VAR
      PurchaseLineDetail@1210190000 : Record 11020660;
    BEGIN
      //**4PS  //kzwerver, 110606, n, #27784
      PurchaseLineDetail.ShowCard(PurchaseLineDetail."Line Type"::"Advice Order",
        "Record Type", "Project No.", "Yard No.", "System No.",
        "Entity Type", "Entity No.", "Service Order No.", '', "Line No.");
    END;

    PROCEDURE EditCommentLines@1100529800();
    VAR
      CommentLine@1100529800 : Record 11020634;
      RecRef@1100529801 : RecordRef;
      RID@1100529802 : RecordID;
    BEGIN
      // **4PS MVOS
      RecRef.GETTABLE(Rec);
      RID := RecRef.RECORDID();

      CommentLine.EditCommentLines(2, RID);
    END;

    PROCEDURE ExplodeBOM@1210190010();
    BEGIN
      //**4PS, Call 27339
      CODEUNIT.RUN(CODEUNIT::"Advice Order Line-Explode BOM",Rec);
    END;

    PROCEDURE UpdateEditable@1100528300();
    VAR
      ServiceOrder@1210190000 : Record 11012823;
    BEGIN
      SupplyingCompanyInventEditable :=
        ("Cost Type" = "Cost Type"::Material) AND
        ("Item No." <> '') AND
        (Transaction = Transaction::Inventory) AND
        ("Process Status" < "Process Status"::Processed);

      BinCodeProjectInventoryEditabl := "Supplying Company Inventory" = '';

      IF NOT ServiceOrder.GET("Service Order No.") THEN
        ServiceOrder.INIT;
      IF ServiceOrder."Service Contract No." <> '' THEN
        AdditionalCostServiceEditable :=
          (ServiceOrder."Source Type" <> ServiceOrder."Source Type"::Direct) OR
          (ServiceOrder."Service Contract No." = '');

      ElementEditable :=
        (NOT ProjSetup."Released AdvOrder not editable" OR ("Process Status" < "Process Status"::Released)) AND
        ("Record Type" = "Record Type"::Project);
      ExtensionContractEditable :=
        (NOT ProjSetup."Released AdvOrder not editable" OR ("Process Status" < "Process Status"::Released)) AND
        ("Record Type" = "Record Type"::Project);
      ReleasedAdvOrderEditable :=
        NOT ProjSetup."Released AdvOrder not editable" OR ("Process Status" < "Process Status"::Released);
      UnitofMeasureEditable :=
        (NOT ProjSetup."Released AdvOrder not editable" OR ("Process Status" < "Process Status"::Released)) AND
        ("Quantity (Processed)" = 0);
      VendorPriceEditable :=
        (NOT ProjSetup."Released AdvOrder not editable" OR ("Process Status" < "Process Status"::Released)) AND
        (VendorCurrency <> '');
      LocationCodeEditable :=
        (NOT ProjSetup."Released AdvOrder not editable" OR ("Process Status" < "Process Status"::Released)) AND
        FieldIsEditable(FIELDNO("Location Code")) AND ("Supplying Company Inventory" = '');
      BinCodeEditable :=
        (NOT ProjSetup."Released AdvOrder not editable" OR ("Process Status" < "Process Status"::Released)) AND
        FieldIsEditable(FIELDNO("Bin Code")) AND ("Supplying Company Inventory" = '');
      ProcessStatusEditable := "Process Status" <> "Process Status"::Processed;
    END;

    PROCEDURE ShowItemInventoryByCompany@1100528301();
    VAR
      AdviceOrderMgt@1100528300 : Codeunit 11012041;
    BEGIN
      AdviceOrderMgt.RunItemInventoryByCompany("Item No.");
    END;

    LOCAL PROCEDURE ItemNoOnAfterValidate@19061248();
    VAR
      InvQuan@1100525001 : Decimal;
    BEGIN
      UpdateEditable;
      CurrPage.UPDATE;
      InventoryReservation("Item No.");
      IF InventoryQuan < LocInventoryQuan THEN
        InvQuan := LocInventoryQuan
      ELSE
        InvQuan := InventoryQuan;

      IF InvQuan < "Quantity (Advice)" THEN
        IF Transaction = Transaction::Inventory THEN
          MESSAGE(Text000);
    END;

    LOCAL PROCEDURE BasicItemOnAfterValidate@19054956();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE TradeItemOnAfterValidate@19075338();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE CostObjectOnAfterValidate@19061648();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityAdviceOnAfterValidate@19073676();
    VAR
      InvQuan@1100525001 : Decimal;
    BEGIN
      CurrPage.UPDATE(TRUE);
      InventoryReservation("Item No.");
      IF InventoryQuan < LocInventoryQuan THEN
        InvQuan := LocInventoryQuan
      ELSE
        InvQuan := InventoryQuan;

      IF InvQuan < "Quantity (Advice)" THEN
        IF Transaction = Transaction::Inventory THEN
          MESSAGE(Text000);
    END;

    LOCAL PROCEDURE UnitofMeasureOnAfterValidate@19002161();
    BEGIN
      IF "Quantity (Processed)" = 0 THEN
        IF "Quantity (Budget)" <> 0 THEN
          "Quantity (Budget)" := "Quantity (Advice)";
    END;

    LOCAL PROCEDURE GrossPriceOnAfterValidate@19036441();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE Discount37OnAfterValidate@19039847();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE PriceOnAfterValidate@19065147();
    BEGIN
      CurrPage.UPDATE;  //db, 20-11-08: refresh VendorPrice
    END;

    LOCAL PROCEDURE VendorPriceOnAfterValidate@19037936();
    BEGIN
      VALIDATE(Price, ConvertVendorPrice(Vendor, VendorPrice));  //db, 20-11-08
    END;

    LOCAL PROCEDURE TransactionOnAfterValidate@19077289();
    VAR
      InvQuan@1100525001 : Decimal;
    BEGIN
      UpdateEditable;
      InventoryReservation("Item No.");
      IF InventoryQuan < LocInventoryQuan THEN
        InvQuan := LocInventoryQuan
      ELSE
        InvQuan := InventoryQuan;

      IF InvQuan < "Quantity (Advice)" THEN
        IF Transaction = Transaction::Inventory THEN
          MESSAGE(Text000);
    END;

    LOCAL PROCEDURE ProcessStatusOnAfterValidate@19014714();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SupplyingCompanyInventoryOnAft@19041258();
    VAR
      InvQuan@1100528301 : Decimal;
    BEGIN
      InventoryReservation("Item No.");
      CurrPage.UPDATE;
      InventoryReservation("Item No.");
      IF InventoryQuan < LocInventoryQuan THEN
        InvQuan := LocInventoryQuan
      ELSE
        InvQuan := InventoryQuan;

      IF InvQuan < "Quantity (Advice)" THEN
        IF Transaction = Transaction::Inventory THEN
          MESSAGE(Text000);
    END;

    LOCAL PROCEDURE ReceiptDateOnAfterValidate@19074743();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE LocationCodeOnAfterValidate@19034787();
    BEGIN
      InventoryReservation("Item No.");
    END;

    LOCAL PROCEDURE ItemNoOnAfterInput@19047020(VAR Text@19047021 : Text[1024]);
    BEGIN
      IF ItemRec."Logistics on Component Level" THEN // Call 27339
        MESSAGE(Text001); // Call 27339
    END;

    LOCAL PROCEDURE CommentLineExistOnPush@19031096();
    BEGIN
      EditCommentLines(); // **4PS M28907
    END;

    LOCAL PROCEDURE DescriptionOnFormat@19023855();
    BEGIN
      IF "Source Type"  = "Source Type"::"Recipe Line" THEN
        DescriptionIndent := 1;
    END;

    PROCEDURE ModifyRun@1100409000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.COUNT = 0 THEN BEGIN
        ERROR(Text001);
      END;
      AdviceCu.ModifyRun(AdviceOrderLine);
      CurrPage.UPDATE(FALSE);
    END;

    BEGIN
    {
      4PS HBK 13-07-09: Added Field Number Of Blanket Order Lines
      4PS HBK 03-06-10: M15722 Field "Order Address Code" added
      4PS HBK 09-06-10: TM4856 Added projectfilter in InventoryReservation
    }
    END.
  }
}

