OBJECT Page 11126454 SC Budget/Actual Bar Chart
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Service Contract Budget vs. Actual Bar Chart;
    SaveValues=Yes;
    OnInit=BEGIN
             PeriodType := PeriodType::Month;
             NoOfColumns := 24;

             DetermineMeasurementIndexes;
           END;

    OnOpenPage=BEGIN
                 Date."Period Start" := WORKDATE;
                 PeriodFormManagement.FindDate('=<', Date, PeriodType);
                 BaseDate := Date."Period Start";

                 IF InitContractFilter <> '' THEN
                   ContractFilter := InitContractFilter;
               END;

    ActionList=ACTIONS
    {
      { 1100528611;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528610;1 ;Action    ;
                      CaptionML=ENU=Previous;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PeriodFormManagement.FindDate('<', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
      { 1100528609;1 ;Action    ;
                      CaptionML=ENU=Next;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PeriodFormManagement.FindDate('>', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528600;;Container;
                ContainerType=ContentArea }

    { 1100528601;1;Group  ;
                CaptionML=ENU=General;
                GroupType=Group }

    { 1100528607;2;Field  ;
                CaptionML=ENU=Contract Filter;
                SourceExpr=ContractFilter;
                TableRelation=Service-Contract;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528608;2;Field  ;
                CaptionML=ENU=Contract Group Filter;
                SourceExpr=ContractGroupFilter;
                TableRelation="Service Contract Group";
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528615;2;Field  ;
                CaptionML=ENU=Department Filter;
                SourceExpr=DepartmentFilter;
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528614;2;Field  ;
                CaptionML=ENU=Territory Filter;
                SourceExpr=TerritoryFilter;
                TableRelation=Territory.Code;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528612;2;Field  ;
                CaptionML=ENU=Discipline Filter;
                SourceExpr=DisciplineFilter;
                TableRelation=Discipline;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528613;2;Field  ;
                CaptionML=ENU=Trade Speciality Filter;
                SourceExpr=TradeSpecFilter;
                OnValidate=BEGIN
                             UpdateChart;
                           END;

                OnLookup=VAR
                           TradeSpeciality@1100528600 : Record 11020285;
                         BEGIN
                           TradeSpeciality.SETFILTER(Discipline, DisciplineFilter);
                           IF PAGE.RUNMODAL(0, TradeSpeciality) = ACTION::LookupOK THEN BEGIN
                             Text := TradeSpeciality.Code;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100528616;2;Field  ;
                CaptionML=ENU=Based on;
                OptionCaptionML=ENU=Hours,Amount;
                SourceExpr=ChartBasedOn;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528602;1;Group  ;
                CaptionML=ENU=Diagram;
                GroupType=Group }

    { 1100528603;2;Field  ;
                Name=Chart;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

    { 1100528606;1;Group  ;
                CaptionML=ENU=Options;
                GroupType=Group }

    { 1100528605;2;Field  ;
                CaptionML=ENU=View by;
                OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             PeriodFormManagement.FindDate('=<>', Date, PeriodType);
                             UpdateChart;
                           END;
                            }

    { 1100528604;2;Field  ;
                CaptionML=ENU=No. Of Periods;
                SourceExpr=NoOfColumns;
                OnValidate=BEGIN
                             IF NoOfColumns <= 0 THEN
                               ERROR(Text001);
                             UpdateChart;
                           END;
                            }

  }
  CODE
  {
    VAR
      BusinessChartBuffer@1100528600 : Record 485;
      Date@1100528601 : Record 2000000007;
      TmpServiceContractCtrlBudget@1100528612 : TEMPORARY Record 11071759;
      TmpServiceOrderControlBudget@1100528613 : TEMPORARY Record 11071757;
      TmpServiceOrderCtrlCostRev@1100528614 : TEMPORARY Record 11071756;
      PeriodFormManagement@1100528602 : Codeunit 359;
      PeriodType@1100528605 : ',Week,Month,Quarter,Year';
      ChartBasedOn@1100528628 : 'Hours,Amount';
      BaseDate@1100528604 : Date;
      NoOfColumns@1100528603 : Integer;
      BufferedFromDate@1100528606 : Date;
      Text000@1100528609 : TextConst 'ENU=Day,Week,Month,Quarter,Year,Period';
      Text001@1100528608 : TextConst 'ENU=No. of Periods must be at least 1';
      Text002@1100528607 : TextConst 'ENU=Progress: @1@@@@@@@@@@@';
      ContractFilter@1100528610 : Code[250];
      InitContractFilter@1100528616 : Code[250];
      ContractGroupFilter@1100528611 : Code[250];
      DepartmentFilter@1100528627 : Code[250];
      TerritoryFilter@1100528626 : Code[250];
      DisciplineFilter@1100528625 : Code[250];
      TradeSpecFilter@1100528624 : Code[250];
      MaintenanceToGoIndex@1100528618 : Integer;
      MaintenanceFinishedIndex@1100528622 : Integer;
      MaintenanceActualIndex@1100528615 : Integer;
      TextMaintenanceToGo@1100528619 : TextConst 'ENU=Maintenance (Budget To Go)';
      TextMaintenanceFinished@1100528623 : TextConst 'ENU=Maintenance (Allowed)';
      TextMaintenanceActual@1100528620 : TextConst 'ENU=Maintenance (Actual)';
      TextMaintenanceResult@1100528617 : TextConst 'ENU=Maintenance (Result)';
      MaintenanceResultIndex@1100528621 : Integer;

    PROCEDURE SetMaintenanceToGoFilter@1100528609(IPeriodStart@1100528600 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date."Period Start" := IPeriodStart;
      PeriodFormManagement.FindDate('=', Date, PeriodType);
      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.SETRANGE("Reference Date", Date."Period Start", Date."Period End");
      TmpServiceContractCtrlBudget.SETRANGE("Budget Type", TmpServiceContractCtrlBudget."Budget Type"::Budget);
      TmpServiceContractCtrlBudget.SETFILTER("Service Contract No.", ContractFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Contract Group", ContractGroupFilter);
      TmpServiceContractCtrlBudget.SETRANGE(Finished, FALSE);
      TmpServiceContractCtrlBudget.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      TmpServiceContractCtrlBudget.SETFILTER(Discipline, DisciplineFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Trade Speciality", TradeSpecFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Territory Code", TerritoryFilter);
    END;

    PROCEDURE SetMaintenanceFinishedFilter@1100528613(IPeriodStart@1100528600 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date."Period Start" := IPeriodStart;
      PeriodFormManagement.FindDate('=', Date, PeriodType);
      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.SETRANGE("Reference Date", Date."Period Start", Date."Period End");
      TmpServiceContractCtrlBudget.SETRANGE("Budget Type", TmpServiceContractCtrlBudget."Budget Type"::Budget);
      TmpServiceContractCtrlBudget.SETFILTER("Service Contract No.", ContractFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Contract Group", ContractGroupFilter);
      TmpServiceContractCtrlBudget.SETRANGE(Finished, TRUE);
      TmpServiceContractCtrlBudget.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      TmpServiceContractCtrlBudget.SETFILTER(Discipline, DisciplineFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Trade Speciality", TradeSpecFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Territory Code", TerritoryFilter);
    END;

    PROCEDURE SetMaintenanceActualFilter@1100528614(IPeriodStart@1100528600 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date."Period Start" := IPeriodStart;
      PeriodFormManagement.FindDate('=', Date, PeriodType);
      TmpServiceOrderCtrlCostRev.RESET;
      TmpServiceOrderCtrlCostRev.SETRANGE("Service Control Period Date", Date."Period Start", Date."Period End");
      TmpServiceOrderCtrlCostRev.SETFILTER("No.", ContractFilter);
      TmpServiceOrderCtrlCostRev.SETFILTER("Contract Group", ContractGroupFilter);
      TmpServiceOrderCtrlCostRev.SETRANGE("Source Type", TmpServiceOrderCtrlCostRev."Source Type"::Contract);
      TmpServiceOrderCtrlCostRev.SETRANGE(Additional, FALSE);
      TmpServiceOrderCtrlCostRev.SETFILTER("Global Dimension 1 Code", DepartmentFilter);
      TmpServiceOrderCtrlCostRev.SETFILTER(Discipline, DisciplineFilter);
      TmpServiceOrderCtrlCostRev.SETFILTER("Trade Speciality", TradeSpecFilter);
      TmpServiceOrderCtrlCostRev.SETFILTER("Territory Code", TerritoryFilter);
    END;

    PROCEDURE GetMaintenanceToGo@1100528603(IPeriodStart@1100528600 : Date;IBasedOn@1100528601 : 'Hours,Amount') : Decimal;
    BEGIN
      SetMaintenanceToGoFilter(IPeriodStart);
      CASE ChartBasedOn OF
        ChartBasedOn::Hours:
          BEGIN
            TmpServiceContractCtrlBudget.CALCSUMS(Hours);
            EXIT(TmpServiceContractCtrlBudget.Hours);
          END;
        ChartBasedOn::Amount:
          BEGIN
            TmpServiceContractCtrlBudget.CALCSUMS(Amount);
            EXIT(TmpServiceContractCtrlBudget.Amount);
          END;
      END;
    END;

    PROCEDURE GetMaintenanceFinished@1100528605(IPeriodStart@1100528600 : Date;IBasedOn@1100528601 : 'Hours,Amount') : Decimal;
    BEGIN
      SetMaintenanceFinishedFilter(IPeriodStart);
      CASE ChartBasedOn OF
        ChartBasedOn::Hours:
          BEGIN
            TmpServiceContractCtrlBudget.CALCSUMS(Hours);
            EXIT(TmpServiceContractCtrlBudget.Hours);
          END;
        ChartBasedOn::Amount:
          BEGIN
            TmpServiceContractCtrlBudget.CALCSUMS(Amount);
            EXIT(TmpServiceContractCtrlBudget.Amount);
          END;
      END;
    END;

    PROCEDURE GetMaintenanceActual@1100528602(IPeriodStart@1100528600 : Date;IBasedOn@1100528601 : 'Hours,Amount') : Decimal;
    BEGIN
      SetMaintenanceActualFilter(IPeriodStart);
      CASE ChartBasedOn OF
        ChartBasedOn::Hours:
          BEGIN
            TmpServiceOrderCtrlCostRev.CALCSUMS(Hours);
            EXIT(-TmpServiceOrderCtrlCostRev.Hours);
          END;
        ChartBasedOn::Amount:
          BEGIN
            TmpServiceOrderCtrlCostRev.CALCSUMS("Cost Amount");
            EXIT(-TmpServiceOrderCtrlCostRev."Cost Amount");
          END;
      END;
    END;

    PROCEDURE ShowMaintenanceToGo@1100528608(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset, Date);
      SetMaintenanceToGoFilter(Date."Period Start");
      PAGE.RUNMODAL(0, TmpServiceContractCtrlBudget);
    END;

    PROCEDURE ShowMaintenanceFinished@1100528607(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset, Date);
      SetMaintenanceFinishedFilter(Date."Period Start");
      PAGE.RUNMODAL(0, TmpServiceContractCtrlBudget);
    END;

    PROCEDURE ShowMaintenanceActual@1100528606(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset, Date);
      SetMaintenanceActualFilter(Date."Period Start");
      PAGE.RUNMODAL(0, TmpServiceOrderCtrlCostRev);
    END;

    PROCEDURE UpdateChart@1100528601();
    VAR
      Date@1100528604 : Record 2000000007;
      Offset@1100528602 : Integer;
      ColumnName@1100528601 : Text[30];
      PeriodDate@1100528600 : Date;
      WorkloadTotal@1100528605 : Decimal;
      MaintenanceToGo@1100528606 : Decimal;
      MaintenanceFinished@1100528608 : Decimal;
      MaintenanceActual@1100528603 : Decimal;
      MaintenanceResult@1100528607 : Decimal;
    BEGIN
      BuildTmpTables;

      WITH BusinessChartBuffer DO BEGIN
        Initialize;
        AddMeasure(TextMaintenanceToGo, MaintenanceToGoIndex, "Data Type"::Decimal, "Chart Type"::StackedColumn);
        AddMeasure(TextMaintenanceFinished, MaintenanceFinishedIndex, "Data Type"::Decimal, "Chart Type"::StackedColumn);
        AddMeasure(TextMaintenanceActual, MaintenanceActualIndex, "Data Type"::Decimal, "Chart Type"::StackedColumn);
        AddMeasure(TextMaintenanceResult, MaintenanceResultIndex, "Data Type"::Decimal, "Chart Type"::Line);
        SetXAxis(GetPeriodTypeText(PeriodType), "Data Type"::String);

        Date."Period Start" := BaseDate;
        PeriodFormManagement.FindDate('=<>', Date, PeriodType);

        FOR Offset := 0 TO NoOfColumns -1 DO BEGIN
          IF Offset > 0 THEN
            PeriodFormManagement.NextDate(1, Date, PeriodType);
          PeriodDate := Date."Period Start";
          ColumnName := PeriodFormManagement.CreatePeriodFormat(PeriodType, Date."Period Start");

          AddColumn(ColumnName);

          MaintenanceToGo := GetMaintenanceToGo(PeriodDate, ChartBasedOn);
          MaintenanceFinished := GetMaintenanceFinished(PeriodDate, ChartBasedOn);
          MaintenanceActual := GetMaintenanceActual(PeriodDate, ChartBasedOn);
          MaintenanceResult := MaintenanceFinished + MaintenanceActual;

          BusinessChartBuffer.SetValueByIndex(MaintenanceToGoIndex -1, Offset, MaintenanceToGo);
          BusinessChartBuffer.SetValueByIndex(MaintenanceFinishedIndex -1, Offset, MaintenanceFinished);
          BusinessChartBuffer.SetValueByIndex(MaintenanceActualIndex -1, Offset, MaintenanceActual);
          BusinessChartBuffer.SetValueByIndex(MaintenanceResultIndex -1, Offset, MaintenanceResult);
        END;
        Update(CurrPage.Chart);
      END;
    END;

    PROCEDURE GetPeriod@1100528604(IOffset@1100528600 : Integer;VAR ODate@1100528601 : Record 2000000007);
    BEGIN
      ODate."Period Start" := BaseDate;
      PeriodFormManagement.FindDate('=<>', ODate, PeriodType);
      IF IOffset <> 0 THEN
        PeriodFormManagement.NextDate(IOffset, ODate, PeriodType);
    END;

    PROCEDURE GetPeriodTypeText@1100528610(IPeriodType@1100528600 : Option) PeriodTypeText : Text;
    VAR
      OptionFieldTools@1100528601 : Codeunit 11012271;
    BEGIN
      OptionFieldTools.OptionValueToReadableOption(Text000, IPeriodType, PeriodTypeText);
    END;

    PROCEDURE BuildTmpTables@1100528612();
    VAR
      PrognosisDetails@1100528600 : Record 11012884;
      ServiceContract@1100528602 : Record 11012812;
      ServiceContractCtrlBudget@1100528603 : Record 11071759;
      ServiceOrderControlBudget@1100528608 : Record 11071757;
      ServiceOrderCtrlCostRev@1100528609 : Record 11071756;
      Dialog@1100528604 : Dialog;
      FromDate@1100528607 : Date;
      ToDate@1100528601 : Date;
      RecordCount@1100528605 : Integer;
      RecordCounter@1100528606 : Integer;
    BEGIN
      Dialog.OPEN(Text002);
      FromDate := DMY2DATE(1, 1, DATE2DMY(BaseDate, 3));
      IF (BufferedFromDate <> 0D) AND (FromDate >= BufferedFromDate) THEN
        EXIT;
      BufferedFromDate := FromDate;

      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.DELETEALL;

      TmpServiceOrderControlBudget.RESET;
      TmpServiceOrderControlBudget.DELETEALL;

      TmpServiceOrderCtrlCostRev.RESET;
      TmpServiceOrderCtrlCostRev.DELETEALL;

      ToDate := 99991231D;

      ServiceContract.SETRANGE("No. of Control Messages", 0);
      IF ServiceContract.FINDSET THEN BEGIN
        RecordCount := ServiceContract.COUNT;
        REPEAT
          ServiceContractCtrlBudget.SETRANGE("Reporting Date", ServiceContract."Control Build Date");
          ServiceContractCtrlBudget.SETRANGE("Service Contract No.", ServiceContract."No.");
          ServiceContractCtrlBudget.SETRANGE("Reference Date", BufferedFromDate, ToDate);
          ServiceContractCtrlBudget.SETRANGE("Budget Type", ServiceContractCtrlBudget."Budget Type"::Budget);
          IF ServiceContractCtrlBudget.FINDSET THEN
            REPEAT
              TmpServiceContractCtrlBudget := ServiceContractCtrlBudget;
              TmpServiceContractCtrlBudget.INSERT;
            UNTIL ServiceContractCtrlBudget.NEXT = 0;

          ServiceOrderControlBudget.SETRANGE("Reporting Date", ServiceContract."Control Build Date");
          ServiceOrderControlBudget.SETRANGE(Work, ServiceOrderControlBudget.Work::Contract);
          ServiceOrderControlBudget.SETRANGE("No.", ServiceContract."No.");
          ServiceOrderControlBudget.SETRANGE("Service Control Period Date", BufferedFromDate, ToDate);
          ServiceOrderControlBudget.SETRANGE("Budget Type", ServiceOrderControlBudget."Budget Type"::Budget);
          ServiceOrderControlBudget.SETRANGE("Source Type", ServiceOrderControlBudget."Source Type"::Contract);
          IF ServiceOrderControlBudget.FINDSET THEN
            REPEAT
              TmpServiceOrderControlBudget := ServiceOrderControlBudget;
              TmpServiceOrderControlBudget.INSERT;
            UNTIL ServiceOrderControlBudget.NEXT = 0;

          ServiceOrderCtrlCostRev.SETRANGE("Reporting Date", ServiceContract."Control Build Date");
          ServiceOrderCtrlCostRev.SETRANGE(Work, TmpServiceOrderCtrlCostRev.Work::Contract);
          ServiceOrderCtrlCostRev.SETRANGE("No.", ServiceContract."No.");
          ServiceOrderCtrlCostRev.SETRANGE("Source Type", TmpServiceOrderCtrlCostRev."Source Type"::Contract);
          ServiceOrderCtrlCostRev.SETRANGE(Additional, FALSE);
          IF ServiceOrderCtrlCostRev.FINDSET THEN
            REPEAT
              TmpServiceOrderCtrlCostRev := ServiceOrderCtrlCostRev;
              TmpServiceOrderCtrlCostRev.INSERT;
            UNTIL ServiceOrderCtrlCostRev.NEXT = 0;

          RecordCounter += 1;
          Dialog.UPDATE(1, ROUND(RecordCounter / RecordCount * 9999, 1));
        UNTIL ServiceContract.NEXT = 0;
      END;
      Dialog.CLOSE;
    END;

    PROCEDURE DetermineMeasurementIndexes@1100528611();
    BEGIN
      MaintenanceToGoIndex := 1;
      MaintenanceFinishedIndex := 2;
      MaintenanceActualIndex := 3;
      MaintenanceResultIndex := 4;
    END;

    PROCEDURE SetContractFilter@1100528600(IContractFilter@1100528600 : Code[250]);
    BEGIN
      InitContractFilter := IContractFilter;
    END;

    EVENT Chart@-1100528603::DataPointClicked@13(point@1100528600 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    VAR
      DrillDownIndex@1100528601 : Integer;
    BEGIN
      BusinessChartBuffer.SetDrillDownIndexes(point);
      DrillDownIndex := BusinessChartBuffer."Drill-Down X Index";
      CASE BusinessChartBuffer."Drill-Down Measure Index" +1 OF
        MaintenanceToGoIndex:
          ShowMaintenanceToGo(DrillDownIndex);
        MaintenanceFinishedIndex:
          ShowMaintenanceFinished(DrillDownIndex);
        MaintenanceActualIndex:
          ShowMaintenanceActual(DrillDownIndex);
        MaintenanceResultIndex:;
      END;
    END;

    EVENT Chart@-1100528603::DataPointDoubleClicked@14(point@1100528600 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT Chart@-1100528603::AddInReady@15();
    BEGIN
      UpdateChart;
    END;

    BEGIN
    END.
  }
}

