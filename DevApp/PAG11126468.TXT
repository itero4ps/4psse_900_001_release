OBJECT Page 11126468 Plan Service Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Plan Service Orders;
    SourceTable=Table11012823;
    PageType=NavigatePage;
    OnInit=BEGIN
             MinimalUnoccupiedHoursEnable := TRUE;
             MinimalUnoccupiedHours := 1;
             KeepPlanAgreementWindow := TRUE;
           END;

    OnOpenPage=BEGIN
                 //**4PS.sn
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS.en
                 UpdateEditable;
                 WizardStep := 1;
                 ShowStep(TRUE);
                 UpdateValues;
               END;

    OnNewRecord=BEGIN
                  //**4PS.sn
                  DPA_SetDefaultDepartment;
                  //**4PS.en
                END;

    OnInsertRecord=VAR
                     xRecRef@1100525000 : RecordRef;
                   BEGIN
                     //**4PS.sn
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS.en
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528618;1 ;Action    ;
                      Name=Back;
                      CaptionML=ENU=< &Back;
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PreCheckStatus(FALSE);
                                 ShowStep(FALSE);
                                 PostCheckStatus(FALSE);
                                 WizardStep -= 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100528617;1 ;Action    ;
                      Name=Next;
                      CaptionML=ENU=&Next >;
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PreCheckStatus(TRUE);
                                 ShowStep(FALSE);
                                 PostCheckStatus(TRUE);
                                 WizardStep += 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100528616;1 ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Completed;
                      OnAction=BEGIN
                                 PostCheckStatus(TRUE);
                                 FinishWizard;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100528602;1;Group  ;
                CaptionML=ENU=Employee;
                Visible=Step1Visible;
                GroupType=Group }

    { 1100525000;2;Field  ;
                CaptionML=ENU=Plan Serivce Orders;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100528601;2;Field  ;
                CaptionML=ENU=Employee No.;
                SourceExpr=EmployeeResourceNo;
                TableRelation="Resource (WOP)" WHERE (Schedule=FILTER(ServiceOrder|Both));
                Editable=FALSE }

    { 1100528607;2;Field  ;
                CaptionML=ENU=Employee Name;
                SourceExpr=EmployeeName;
                Editable=FALSE }

    { 1100528606;2;Field  ;
                CaptionML=ENU=No. of Team Members;
                BlankZero=Yes;
                SourceExpr=NoOfTeamMembers;
                Editable=FALSE }

    { 1100528603;2;Field  ;
                CaptionML=ENU=Plan Date From;
                SourceExpr=PlanDateFrom;
                OnValidate=BEGIN
                             IF PlanDateUntil = 0D THEN
                               PlanDateUntil := PlanDateFrom;
                             UpdateValues;
                           END;
                            }

    { 1100528608;2;Field  ;
                CaptionML=ENU=Plan Date Until;
                SourceExpr=PlanDateUntil;
                OnValidate=BEGIN
                             UpdateValues;
                           END;
                            }

    { 1100528604;2;Field  ;
                CaptionML=ENU=Total Duration Time;
                SourceExpr=TotalDurationTime;
                Editable=FALSE }

    { 1100528614;2;Field  ;
                CaptionML=ENU=No. of Available Hours (approximate);
                SourceExpr=NoOfAvailableHoursByTeam;
                Editable=FALSE;
                OnDrillDown=VAR
                              ResourceWOP@1100528600 : Record 11229278;
                              ServiceOrderPlanManagement@1100528601 : Codeunit 11012868;
                            BEGIN
                              ResourceWOP.SETFILTER("No.", TmpCollectivePlanTeam.GetResourceFilter(TmpCollectivePlanTeam));
                              //ServiceOrderPlanManagement.ShowResourceCalendar(ResourceWOP, PlanDateFrom, PlanDateUntil);
                              ServiceOrderPlanManagement.ShowAvailableHoursResources(ResourceWOP, ServiceOrder, PlanDateFrom, PlanDateUntil);
                            END;
                             }

    { 1100528609;2;Field  ;
                CaptionML=ENU=Overlap Percentage;
                SourceExpr=OverlapPercentage;
                MinValue=-100;
                MaxValue=100 }

    { 1100528611;2;Field  ;
                CaptionML=ENU=Keep Plan Agreement;
                SourceExpr=KeepPlanAgreementWindow }

    { 1100528615;1;Group  ;
                CaptionML=ENU=Other;
                Visible=Step2Visible;
                GroupType=Group }

    { 1100528605;2;Field  ;
                CaptionML=ENU=Travel Time;
                SourceExpr=TravelDuration }

    { 1100528612;2;Field  ;
                CaptionML=ENU=Assign to Several Days;
                SourceExpr=OccupySeveralDays;
                OnValidate=BEGIN
                             OccupySeveralDaysOnAfterValida;
                           END;
                            }

    { 1100528610;2;Field  ;
                Name=MinimalUnoccupiedHours;
                CaptionML=ENU=Minimal Unoccupied Hours;
                SourceExpr=MinimalUnoccupiedHours;
                Enabled=MinimalUnoccupiedHoursEnable }

    { 1100528600;2;Field  ;
                CaptionML=ENU=Percentage Reserve Hours for Calls;
                SourceExpr=ReserveLaborPercentage }

  }
  CODE
  {
    VAR
      ServiceOrder@1100528604 : Record 11012823;
      TmpCollectivePlanTeam@1100528613 : TEMPORARY Record 11071979;
      EmployeeResourceNo@1100528600 : Code[20];
      EmployeeName@1100528603 : Text[100];
      PlanDateFrom@1100528601 : Date;
      PlanDateUntil@1100528607 : Date;
      TravelDuration@1100528602 : Duration;
      Text000@1100528605 : TextConst 'ENU=Employee not filled';
      Text001@1100528606 : TextConst 'ENU=Plan Date From and Plan Date To must be filled';
      Text002@1100528608 : TextConst 'ENU=Plan Date From must occur before Plan Date Until';
      MinimalUnoccupiedHours@1100528609 : Decimal;
      OccupySeveralDays@1100528610 : Boolean;
      MinimalUnoccupiedHoursEnable@19064514 : Boolean INDATASET;
      WizardStep@1100528616 : Integer;
      Step1Visible@1100528619 : Boolean INDATASET;
      Step2Visible@1100528618 : Boolean INDATASET;
      FinishEnable@1100528622 : Boolean INDATASET;
      BackEnable@1100528621 : Boolean INDATASET;
      NextEnable@1100528620 : Boolean INDATASET;
      DPA_IsHardFilter@1100525000 : Boolean;
      ReserveLaborPercentage@1100528611 : Decimal;
      TotalDurationTime@1100528612 : Decimal;
      NoOfTeamMembers@1100528614 : Integer;
      OverlapPercentage@1100528615 : Decimal;
      PlanIndividually@1100525001 : Boolean;
      KeepPlanAgreementWindow@1100528617 : Boolean;
      NoOfAvailableHoursByTeam@1100528623 : Decimal;

    PROCEDURE SetSelection@1100528603(VAR IServiceOrder@1100528600 : Record 11012823;VAR ICollectivePlanTeam@1100528601 : Record 11071979;IPlanIndividually@1100525000 : Boolean;IPlanDateFrom@1100528605 : Date;IPlanDateUntil@1100528606 : Date);
    VAR
      Resource@1100528602 : Record 11229278;
      MaintenanceManagement@1100528603 : Codeunit 11012829;
      ServiceOrderPlanManagement@1100528604 : Codeunit 11012868;
    BEGIN
      ServiceOrder.COPY(IServiceOrder);
      TmpCollectivePlanTeam.COPY(ICollectivePlanTeam, TRUE);
      IF NOT ServiceOrder.FINDFIRST THEN
        ServiceOrder.INIT;
      IF NOT IPlanIndividually THEN BEGIN
        EmployeeResourceNo := ICollectivePlanTeam.GetResourceNoTeamLeader(ICollectivePlanTeam);
        IF Resource.GET(EmployeeResourceNo) THEN
          EmployeeName := Resource.Name;
      END ELSE
        EmployeeResourceNo := ICollectivePlanTeam.GetNoOfResourcesInTeamText(ICollectivePlanTeam);
      IF NOT IPlanIndividually THEN
        NoOfTeamMembers := ICollectivePlanTeam.COUNT
      ELSE
        NoOfTeamMembers := 0;
      TotalDurationTime := ServiceOrderPlanManagement.GetTotalDurationTime(IServiceOrder);
      PlanIndividually := IPlanIndividually;
      PlanDateFrom := IPlanDateFrom;
      PlanDateUntil := IPlanDateUntil;
    END;

    LOCAL PROCEDURE UpdateEditable@1100528600();
    BEGIN
      MinimalUnoccupiedHoursEnable := OccupySeveralDays;
    END;

    LOCAL PROCEDURE OccupySeveralDaysOnAfterValida@19062635();
    BEGIN
      UpdateEditable;
    END;

    LOCAL PROCEDURE PreCheckStatus@1100528602(IForward@1100528600 : Boolean);
    VAR
      MaintenanceProposalLine2@1100528601 : Record 11071696;
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            IF IForward THEN BEGIN
              IF EmployeeResourceNo = '' THEN
                ERROR(Text000);
              IF (PlanDateFrom = 0D) OR (PlanDateUntil = 0D) THEN
                ERROR(Text001);
              IF PlanDateFrom > PlanDateUntil THEN
                ERROR(Text002);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE PostCheckStatus@1100528604(IForward@1100528600 : Boolean);
    VAR
      Resource@1100528602 : Record 11229278;
      MaintenanceManagement@1100528601 : Codeunit 11012829;
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            IF NOT Resource.GET(EmployeeResourceNo) THEN
              Resource.INIT;
            ReserveLaborPercentage := MaintenanceManagement.GetResLaborPerc(PlanDateFrom, EmployeeResourceNo, '', '');
          END;
      END;
    END;

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            Step1Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;
            END;
          END;
        2:
          BEGIN
            Step2Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE FinishWizard@1100528606();
    VAR
      ServiceOrderPlanManagement@1100528600 : Codeunit 11012868;
    BEGIN
      IF NOT PlanIndividually THEN
        ServiceOrderPlanManagement.PlanServiceOrdersByResource(
          ServiceOrder, TmpCollectivePlanTeam, PlanDateFrom, PlanDateUntil, TravelDuration,
          MinimalUnoccupiedHours, OccupySeveralDays, ReserveLaborPercentage, OverlapPercentage, KeepPlanAgreementWindow)
      ELSE
        ServiceOrderPlanManagement.PlanServiceOrdersResourceByResource(
          ServiceOrder, TmpCollectivePlanTeam, PlanDateFrom, PlanDateUntil, TravelDuration,
          MinimalUnoccupiedHours, OccupySeveralDays, ReserveLaborPercentage, OverlapPercentage, KeepPlanAgreementWindow);
      CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE UpdateValues@1100528601();
    VAR
      ResourceWOP@1100528601 : Record 11229278;
      ServiceOrderPlanManagement@1100528600 : Codeunit 11012868;
    BEGIN
      ResourceWOP.SETFILTER("No.", TmpCollectivePlanTeam.GetResourceFilter(TmpCollectivePlanTeam));
      NoOfAvailableHoursByTeam := ServiceOrderPlanManagement.GetAvailableHoursByTeam(ResourceWOP, ServiceOrder, PlanDateFrom, PlanDateUntil);
    END;

    BEGIN
    END.
  }
}

