OBJECT Page 11130236 Transfer Sales Recipe to Proj
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Transfer Sales Recipe  to Project;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table37;
    PageType=StandardDialog;
    OnOpenPage=VAR
                 lvEstRec@1100485000 : Record 11012151;
               BEGIN
                 CheckSelection;

                 SeriesNoEditable := TRUE;
                 NewCodeEditable := TRUE;
               END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                   END;

    OnQueryClosePage=BEGIN
                       CloseActionOK := CloseAction IN [ACTION::OK,ACTION::LookupOK];
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190022;1;Group  ;
                Name=Step1;
                CaptionML=ENU=Transfer from;
                GroupType=Group }

    { 1100525005;2;Field  ;
                CaptionML=ENU=Transfer to;
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525001;2;Field  ;
                Name=CurrSeries;
                AssistEdit=Yes;
                CaptionML=ENU=No. Series;
                SourceExpr=CurrSeries;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               IF SeriesNoEditable THEN
                                 CheckSeries(TRUE);
                             END;
                              }

    { 5   ;2   ;Field     ;
                CaptionML=ENU=Project;
                SourceExpr=ProjTo;
                Editable=NewCodeEditable;
                OnValidate=BEGIN
                             IF ProjTo <> '' THEN BEGIN
                               IF NOT ProjRec.GET(ProjTo) THEN
                                 ERROR(Text000, ProjRec.TABLECAPTION, ProjTo);
                             END;
                           END;

                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Job List",ProjRec) = ACTION::LookupOK THEN BEGIN
                             ProjTo := ProjRec."No.";
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

  }
  CODE
  {
    VAR
      Text000@11012018 : TextConst 'ENU=%1 %2 does not exist';
      Text001@1100525014 : TextConst 'ENU=Sales Line Selection not correct';
      Text002@11012020 : TextConst 'ENU=Select a project';
      Text003@11012021 : TextConst 'ENU=Do you want to transfer Order %1 to Project %2';
      NoSeriesMgt@1100525010 : Codeunit 396;
      JobSetup@1210190021 : Record 315;
      SalesHeader@1100525016 : Record 36;
      CurrSeries@1100525002 : Code[20];
      OrderNo@1100525015 : Code[20];
      ProjTo@1100525000 : Code[20];
      ProjRec@11012000 : Record 11072003;
      Text19059755@19030938 : TextConst 'ENU=Transfer from';
      Text19010085@19043084 : TextConst 'ENU=Transfer to';
      Step1Visible@1100525005 : Boolean INDATASET;
      Step2Visible@1100525004 : Boolean INDATASET;
      Step3Visible@1100525003 : Boolean INDATASET;
      WizardStep@1100525006 : Integer;
      FinishEnable@1100525009 : Boolean INDATASET;
      BackEnable@1100525008 : Boolean INDATASET;
      NextEnable@1100525007 : Boolean INDATASET;
      CloseActionOK@1100528400 : Boolean;
      NewCodeEditable@1100525011 : Boolean INDATASET;
      SeriesNoEditable@1100525001 : Boolean INDATASET;

    PROCEDURE CheckSelection@1100525002();
    BEGIN
      ProjTo := '';
      OrderNo := '';

      IF FINDSET THEN BEGIN
        OrderNo := "Document No.";
        REPEAT
          IF ("Job No." <> '') AND (ProjTo = '')  THEN
            ProjTo := "Job No.";
        UNTIL (NEXT = 0) OR (OrderNo <> "Document No.");
      END;

      IF (ProjTo <> '') OR (OrderNo = '') OR (OrderNo <> "Document No.") THEN
        ERROR(Text001);

      SalesHeader.GET("Document Type","Document No.");
      ProjTo := SalesHeader."Job No.";
    END;

    PROCEDURE FinishWizard@1100525001();
    VAR
      Job@1100528400 : Record 11072003;
      TransferCu@1100525000 : Codeunit 11012228;
      SheetFilter@1100525004 : Code[250];
      SubEstFilter@1100525003 : Code[250];
      EstPartFilter@1100525002 : Code[250];
      StatusFilter@1100525001 : Code[250];
      ExtTo@1100525026 : Code[20];
      AdjTo@1100525025 : Code[20];
      HouseModelTo@1100525024 : Code[20];
      PlotTo@1100525023 : Code[20];
      MainGroupTo@1100525022 : Code[20];
      GroupTo@1100525021 : Code[20];
      SubGroupTo@1100525020 : Code[20];
      OptTo@1100525019 : Code[20];
      TransferZeroLines@1100525018 : Boolean;
      TransferStructure@1100525017 : Boolean;
      SelectSheet@1100525016 : Boolean;
      UpdateProject@1100525015 : Boolean;
      CopyTryOut@1100525014 : Boolean;
      SelectTenderElement@1100525013 : Boolean;
      TransferSalesPrice@1100525012 : Boolean;
      StoreSubEstimate@1100525011 : Boolean;
      CopyPurchaseActions@1100525010 : Boolean;
      CopyFromCostEst@1100525009 : Code[20];
      CopyFromCostEstTxt@1100525008 : Text[50];
      TransferCommentLines@1100525007 : Boolean;
      TransferProjectPlanActCodes@1100525006 : Boolean;
      ProjectPlanningTemplate@1100525005 : Code[20];
    BEGIN
      IF ProjTo = '' THEN
        ERROR(Text002);

      IF CONFIRM(Text003,FALSE,OrderNo,ProjTo) THEN BEGIN
        COMMIT;
        Job.GenerateAssemblyProject(
          SalesHeader."Sell-to Customer No.", SalesHeader."Bill-to Customer No.",
          ProjTo, CurrSeries, SalesHeader."No.");
        TransferCu.SetTransferOptions(
          TransferZeroLines,TransferStructure,SelectTenderElement,
          TransferSalesPrice,StoreSubEstimate,CopyPurchaseActions, TransferCommentLines, 0,0,CopyTryOut,0,
          SelectSheet,UpdateProject,FALSE);
        TransferCu.SetEstimateOptions("No.",SubEstFilter,EstPartFilter,SheetFilter,StatusFilter);
        TransferCu.SetProjectOptions(
          ProjTo,ExtTo,AdjTo,PlotTo,HouseModelTo,MainGroupTo,GroupTo,SubGroupTo,OptTo);
        TransferCu.SetProjectPlanningOptions(TransferProjectPlanActCodes,ProjectPlanningTemplate);
        TransferCu.CopySalesRecipeToProjBudget(Rec)
      END;
    END;

    PROCEDURE CheckSeries@1210190005(lvAssistEdit@1100485000 : Boolean);
    VAR
      SerieRel@1210190000 : Record 310;
      ServiceSourceTypeSetup@1210190001 : Record 11071726;
    BEGIN
      JobSetup.GET;
      JobSetup.TESTFIELD("Assembly Project Nos.");
      CurrSeries := JobSetup."Assembly Project Nos.";

      IF lvAssistEdit = TRUE THEN
        NoSeriesMgt.SelectSeries(CurrSeries, CurrSeries, CurrSeries);

      DetermineNewCode(FALSE);

      NewCodeEditable := CheckSeriesManual;
    END;

    PROCEDURE DetermineNewCode@1000000000(lvUpdate@1100485000 : Boolean);
    BEGIN
      IF CheckSeriesDefaultNos THEN BEGIN
        CLEAR(NoSeriesMgt);
        ProjTo := NoSeriesMgt.GetNextNo(CurrSeries,0D,lvUpdate);
      END ELSE BEGIN
        IF CurrSeries <> '' THEN
          ProjTo := '';
      END;
    END;

    PROCEDURE CheckSeriesManual@1100485006() : Boolean;
    VAR
      NoSeries@1100485000 : Record 308;
    BEGIN
      IF NOT NoSeries.GET(CurrSeries) THEN
        EXIT(TRUE);
      EXIT(NoSeries."Manual Nos.");
    END;

    PROCEDURE CheckSeriesDefaultNos@1100525000() : Boolean;
    VAR
      NoSeries@1100485000 : Record 308;
    BEGIN
      IF CurrSeries = '' THEN
        EXIT(FALSE);
      IF NOT NoSeries.GET(CurrSeries) THEN
        EXIT(FALSE);
      EXIT(NoSeries."Default Nos.");
    END;

    LOCAL PROCEDURE StdDialogConfirm@1100528400() : Boolean;
    BEGIN
      CurrPage.RUNMODAL;
      EXIT(CloseActionOK);
    END;

    LOCAL PROCEDURE StdDialogDoAction@1100528401();
    BEGIN
      FinishWizard;
    END;

    PROCEDURE StdDialogRunModal@1100528402();
    BEGIN
      IF StdDialogConfirm THEN
        StdDialogDoAction;
    END;

    BEGIN
    END.
  }
}

