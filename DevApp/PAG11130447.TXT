OBJECT Page 11130447 Site Mgt Hour Lines (HPT)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    SourceTable=Table11012361;
    PageType=Card;
    OnOpenPage=BEGIN
                 HourPortalSetup.GET;
                 //HourPortalSetup.TESTFIELD("Default Wage Comp (Expense)");
                 HourPortalSetup.TESTFIELD("Default Wage Comp (Km)");

                 LineEditable := TRUE;
                 TypeEditable := TRUE;
                 PlantCompanyEditable := TRUE;
                 PlantLocationEditable := TRUE;
                 PlantTypeNoEditable := TRUE;
                 CostComponentPlantEditable := TRUE;
                 ElementEditable := TRUE;
                 ExtensionContractEditable := TRUE;
                 ShiftCodeEditable :=TRUE;
                 QuantityEditable := TRUE;
                 AmountEditable := TRUE;
                 DaynoEditable := TRUE;
                 DayQtyEditable := TRUE;
                 OverHourQtyEditable := TRUE;
                 RiderTypeEditable := TRUE;
                 StartTimeEditable := TRUE;
                 EndTimeEditable := TRUE;
                 StartKmEditable := TRUE;
                 EndKmEditable := TRUE;
               END;

    OnClosePage=BEGIN
                  //not working with ODATA  DeleteHeaderIfNoLines;
                END;

    OnAfterGetRecord=BEGIN
                       SetDescriptionFields;
                       SetEditable;
                       SetDefaultsAndFormat;
                       SetPageFields;
                       WageComponentCode := "Wage Component";
                     END;

    OnInsertRecord=BEGIN
                     CreateHeaderIfNotPresent;
                     IF ("Receiving Company" = '') THEN
                       "Receiving Company" := COMPANYNAME;
                     IF ("Line Template Code" = '') THEN
                       "Line Template Code" := GetHourLineTemplate;
                   END;

    OnModifyRecord=VAR
                     HourLineTemplateLine@1100409000 : Record 11012078;
                     HourLineTemplateMgt@1100528000 : Codeunit 11012025;
                   BEGIN
                     IF ("Line Template Code" = '') THEN BEGIN
                       "Line Template Code" := GetHourLineTemplate;
                       HourLineTemplateMgt.GetDefaultsSiteMgtLine(Rec);
                     END;
                     IF ("Wage Component" = '') THEN BEGIN
                       IF (WageComponentCode <> '') THEN
                           "Wage Component" := ''//kz WageComponentCode
                       ELSE BEGIN
                         IF (LineType = 2) THEN
                           VALIDATE("Wage Component", HourPortalSetup."Default Wage Comp (Km)")
                           //"Wage Component" := HourPortalSetup."Default Wage Comp (Km)"
                         ELSE BEGIN
                           HourLineTemplateLine.SETRANGE(Source, HourLineTemplateLine.Source::"Site Mngmnt. Hours");
                           HourLineTemplateLine.SETRANGE("Receiving Company", "Receiving Company");
                           HourLineTemplateLine.SETRANGE("Template Code", "Line Template Code");
                           HourLineTemplateLine.SETFILTER("Start Date", '<=%1', DWY2DATE(1, Week, Year));
                           IF (HourLineTemplateLine.FINDLAST) THEN
                             "Wage Component" := HourLineTemplateLine."Wage Component";
                         END;
                       END;
                     END;
                   END;

  }
  CONTROLS
  {
    { 1100528300;0;Container;
                ContainerType=ContentArea }

    { 1100528301;1;Group  ;
                Name=General;
                GroupType=Group }

    { 1100528302;2;Field  ;
                Name=Year;
                SourceExpr=Year }

    { 1100528303;2;Field  ;
                Name=Week;
                SourceExpr=Week }

    { 1100528304;2;Field  ;
                Name=Supplying Company;
                SourceExpr="Supplying Company" }

    { 1100528305;2;Field  ;
                Name=Employee No.;
                SourceExpr="Employee No." }

    { 1100528306;2;Field  ;
                Name=Line No.;
                SourceExpr="Line No.";
                OnValidate=BEGIN
                             WageComponentCode := "Wage Component";
                             IF ("Line No." <= 0) THEN
                               "Line No." := GetLastLineNo + 10000;
                           END;
                            }

    { 1100528308;2;Field  ;
                Name=Receiving Company;
                SourceExpr="Receiving Company";
                OnValidate=BEGIN
                             VALIDATE("Line Template Code", GetHourLineTemplate);
                             SetEditable;
                             SetDefaultsAndFormat;
                           END;
                            }

    { 1100528313;2;Field  ;
                Name=Line Template Code;
                SourceExpr="Line Template Code" }

    { 1100528337;2;Field  ;
                Name=Line Template Description;
                SourceExpr=HourLineTemplate.Description }

    { 1100528309;2;Field  ;
                Name=Type;
                SourceExpr=Type;
                OnValidate=BEGIN
                             IF NOT CurrentTemplateOK THEN
                               VALIDATE("Line Template Code", GetHourLineTemplate);
                             SetEditable;
                             SetDefaultsAndFormat;
                           END;
                            }

    { 1100528344;2;Field  ;
                Name=LineType;
                SourceExpr=LineType;
                OnValidate=VAR
                             HourLineTemplateLine@1100528300 : Record 11012078;
                           BEGIN
                             IF ((LineType > 1) AND (WageComponentCode = '')) THEN BEGIN
                               HourPortalSetup.GET;

                               HourLineTemplateLine.SETRANGE(Source, HourLineTemplateLine.Source::"Site Mngmnt. Hours");

                               IF "Receiving Company" = '' THEN
                                 HourLineTemplate.SETRANGE("Receiving Company", COMPANYNAME)
                               ELSE
                                 HourLineTemplate.SETRANGE("Receiving Company", "Receiving Company");

                               HourLineTemplateLine.SETRANGE("Template Code", "Line Template Code");
                               HourLineTemplateLine.SETFILTER("Start Date", '<=%1', TODAY);
                               IF (NOT HourLineTemplateLine.FINDLAST) THEN
                                 HourLineTemplateLine.INIT;

                               CASE LineType OF
                                 2: BEGIN //Km
                                   IF (HourLineTemplateLine."Cost Object (Km)" <> '') THEN
                                     VALIDATE("Cost Object", HourLineTemplateLine."Cost Object (Km)");
                                   IF (HourLineTemplateLine."Wage Component (Km)" <> '') THEN BEGIN
                                     VALIDATE("Wage Component", HourLineTemplateLine."Wage Component (Km)");
                                   END ELSE BEGIN
                                     VALIDATE("Wage Component", HourPortalSetup."Default Wage Comp (Km)");
                                   END;
                                 END;
                                 3: BEGIN //Expense
                                   IF (HourLineTemplateLine."Wage Component (Expense)" <> '') THEN BEGIN
                                     VALIDATE("Wage Component", HourLineTemplateLine."Wage Component (Expense)");
                                   END ELSE BEGIN
                                     VALIDATE("Wage Component", HourPortalSetup."Default Wage Comp (Expense)");
                                   END;
                                 END;
                               END;
                             END;
                           END;
                            }

    { 1100528307;2;Field  ;
                Name=Object No.;
                SourceExpr="Object No." }

    { 1100528335;2;Field  ;
                Name=Object Description;
                SourceExpr="Object Name" }

    { 1100525006;2;Field  ;
                SourceExpr="Shift Code";
                Visible=FALSE }

    { 1100528321;2;Field  ;
                Name=DayNo;
                SourceExpr=DayNo;
                OnValidate=BEGIN
                             SetTableFields;
                           END;
                            }

    { 1100528312;2;Field  ;
                Name=Element;
                SourceExpr=Element }

    { 1100528334;2;Field  ;
                Name=Element Description;
                SourceExpr=ElementDescription;
                Editable=TRUE }

    { 1100528310;2;Field  ;
                Name=Extension Contract;
                SourceExpr="Extension Contract" }

    { 1100528338;2;Field  ;
                Name=Extension Contract Description;
                SourceExpr=ExtensionContract.Description }

    { 1100528314;2;Field  ;
                Name=Plant Company;
                SourceExpr="Plant Company" }

    { 1100528315;2;Field  ;
                Name=Plant Location;
                SourceExpr="Plant Location" }

    { 1100528316;2;Field  ;
                Name=Plant Type;
                SourceExpr="Plant Type" }

    { 1100528317;2;Field  ;
                Name=Plant No.;
                SourceExpr="Plant No." }

    { 1100525005;2;Field  ;
                Name=Plant Description;
                SourceExpr=PlantDescription }

    { 1100528318;2;Field  ;
                Name=Cost Component Plant;
                SourceExpr="Cost Component Plant" }

    { 1100528319;2;Field  ;
                Name=Department Code;
                SourceExpr="Department Code" }

    { 1100528339;2;Field  ;
                Name=Department Description;
                SourceExpr=DimensionValue.Name }

    { 1100528311;2;Field  ;
                Name=Cost Object;
                SourceExpr="Cost Object" }

    { 1100528336;2;Field  ;
                Name=Cost Object Description;
                SourceExpr="Cost Object Description" }

    { 1100528320;2;Field  ;
                Name=Wage Component;
                SourceExpr="Wage Component" }

    { 1100528340;2;Field  ;
                Name=Wage Component Description;
                SourceExpr=WageComponent.Description }

    { 1100528322;2;Field  ;
                Name=DayQty;
                SourceExpr=DayQty;
                OnValidate=BEGIN
                             SetTableFields;
                           END;
                            }

    { 1100528323;2;Field  ;
                Name=OverHourQty;
                SourceExpr=OverHourQty;
                OnValidate=BEGIN
                             SetTableFields;
                           END;
                            }

    { 1100528324;2;Field  ;
                Name=RiderType;
                SourceExpr=RiderType;
                OnValidate=BEGIN
                             SetTableFields;
                           END;
                            }

    { 1100528325;2;Field  ;
                Name=LineEditable;
                SourceExpr=LineEditable }

    { 1100528342;2;Field  ;
                Name=StartTime;
                SourceExpr=StartTime;
                OnValidate=BEGIN
                             CheckTimes;
                             "Start Time" := StartTime;
                           END;
                            }

    { 1100528343;2;Field  ;
                Name=EndTime;
                SourceExpr=EndTime;
                OnValidate=BEGIN
                             CheckTimes;
                             "End Time" := EndTime;
                           END;
                            }

    { 1100528333;2;Field  ;
                Name=CaoFilter;
                SourceExpr=CaoFilter }

    { 1100528341;2;Field  ;
                Name=Hour Portal Link Guid;
                SourceExpr="Hour Portal Link Guid" }

    { 1100528345;2;Field  ;
                Name=Quantity;
                SourceExpr=Quantity }

    { 1100528346;2;Field  ;
                Name=Amount;
                SourceExpr=Amount }

    { 1100409000;2;Field  ;
                Name=Reject Text;
                SourceExpr="Reject Text" }

    { 1100528349;2;Field  ;
                Name=Status;
                SourceExpr=Status }

    { 1100525000;2;Field  ;
                Name=Comment;
                SourceExpr=Comment }

    { 1100525003;2;Field  ;
                Name=StartKm;
                SourceExpr=StartKm;
                OnValidate=BEGIN
                             "Start Kilometer" := StartKm;
                           END;
                            }

    { 1100525004;2;Field  ;
                Name=EndKm;
                SourceExpr=EndKm;
                OnValidate=BEGIN
                             "End Kilometer" := EndKm;
                           END;
                            }

    { 1100525007;2;Field  ;
                SourceExpr="Posting Date" }

    { 1100525009;2;Field  ;
                Name=TypeFormat;
                SourceExpr=TypeFormat }

    { 1100525013;2;Field  ;
                Name=Plant CompanyFormat;
                SourceExpr=PlantCompanyFormat }

    { 1100525012;2;Field  ;
                Name=Plant LocationFormat;
                SourceExpr=PlantLocationFormat }

    { 1100525011;2;Field  ;
                Name=Plant TypeFormat;
                SourceExpr=PlantTypeFormat }

    { 1100525010;2;Field  ;
                Name=Plant  NoFormat;
                SourceExpr=PlantNoFormat }

    { 1100525014;2;Field  ;
                Name=Plant DescriptionFormat;
                SourceExpr=PlantDescriptionFormat }

    { 1100525008;2;Field  ;
                Name=Cost Component PlantFormat;
                SourceExpr=CostComponentPlantFormat }

    { 1100525016;2;Field  ;
                Name=ElementFormat;
                SourceExpr=ElementFormat }

    { 1100525017;2;Field  ;
                Name=Element DescriptionFormat;
                SourceExpr=ElementDescriptionFormat }

    { 1100525015;2;Field  ;
                Name=Extension ContractFormat;
                SourceExpr=ExtensionContractFormat }

    { 1100525018;2;Field  ;
                Name=Shift CodeFormat;
                SourceExpr=ShiftCodeFormat }

    { 1100525002;2;Field  ;
                Name=QuantityFormat;
                SourceExpr=QuantityFormat }

    { 1100525001;2;Field  ;
                Name=AmountFormat;
                SourceExpr=AmountFormat }

    { 1100525019;2;Field  ;
                Name=DayNoFormat;
                SourceExpr=DayNoFormat }

    { 1100525020;2;Field  ;
                Name=DayQtyFormat;
                SourceExpr=DayQtyFormat }

    { 1100525021;2;Field  ;
                Name=OverHourQtyFormat;
                SourceExpr=OverHourQtyFormat }

    { 1100525022;2;Field  ;
                Name=RiderTypeFormat;
                SourceExpr=RiderTypeFormat }

    { 1100525023;2;Field  ;
                Name=StartTimeFormat;
                SourceExpr=StartTimeFormat }

    { 1100525024;2;Field  ;
                Name=EndTimeFormat;
                SourceExpr=EndTimeFormat }

    { 1100525025;2;Field  ;
                Name=StartKmFormat;
                SourceExpr=StartKmFormat }

    { 1100525026;2;Field  ;
                Name=EndKmFormat;
                SourceExpr=EndKmFormat }

  }
  CODE
  {
    VAR
      HourPortalSetup@1100528326 : Record 11020454;
      HourLineTemplate@1100528313 : Record 11229799;
      ExtensionContract@1100528314 : Record 11012004;
      DimensionValue@1100528322 : Record 349;
      WageComponent@1100528309 : Record 11012014;
      LineType@1100528325 : Integer;
      DayNo@1100528305 : Integer INDATASET;
      DayQty@1100528304 : Decimal;
      OverHourQty@1100528303 : Decimal;
      RiderType@1100528302 : Integer INDATASET;
      CaoFilter@1100528306 : Code[250];
      StartTime@1100528323 : Time;
      EndTime@1100528324 : Time;
      WageComponentCode@1100409000 : Code[20];
      ElementDescription@1100525000 : Text[50];
      StartKm@1100525005 : Integer;
      EndKm@1100525006 : Integer;
      PlantDescription@1100525008 : Text[50];
      LineEditable@1100525009 : Boolean;
      TypeEditable@1100525041 : Boolean;
      TypeFormat@1100525022 : Integer;
      PlantCompanyEditable@1100525016 : Boolean;
      PlantCompanyFormat@1100525015 : Integer;
      PlantLocationEditable@1100525014 : Boolean;
      PlantLocationFormat@1100525013 : Integer;
      PlantTypeNoEditable@1100525012 : Boolean;
      PlantTypeFormat@1100525011 : Integer;
      PlantNoFormat@1100525010 : Integer;
      CostComponentPlantEditable@1100525017 : Boolean;
      CostComponentPlantFormat@1100525007 : Integer;
      ElementEditable@1100525019 : Boolean;
      ElementFormat@1100525018 : Integer;
      ExtensionContractEditable@1100525021 : Boolean;
      ExtensionContractFormat@1100525020 : Integer;
      ShiftCodeEditable@1100525024 : Boolean;
      ShiftCodeFormat@1100525023 : Integer;
      QuantityEditable@1100525003 : Boolean;
      QuantityFormat@1100525001 : Integer;
      AmountEditable@1100525004 : Boolean;
      AmountFormat@1100525002 : Integer;
      DaynoEditable@1100525026 : Boolean;
      DayNoFormat@1100525025 : Integer;
      DayQtyEditable@1100525027 : Boolean;
      DayQtyFormat@1100525028 : Integer;
      OverHourQtyEditable@1100525030 : Boolean;
      OverHourQtyFormat@1100525029 : Integer;
      RiderTypeEditable@1100525032 : Boolean;
      RiderTypeFormat@1100525031 : Integer;
      StartTimeEditable@1100525034 : Boolean;
      StartTimeFormat@1100525033 : Integer;
      EndTimeEditable@1100525036 : Boolean;
      EndTimeFormat@1100525035 : Integer;
      StartKmEditable@1100525038 : Boolean;
      StartKmFormat@1100525037 : Integer;
      EndKmEditable@1100525040 : Boolean;
      EndKmFormat@1100525039 : Integer;
      PlantDescriptionEditable@1100525042 : Boolean;
      ElementDescriptionEditable@1100525043 : Boolean;
      LineTotalEditable@1100525044 : Boolean;
      StatusEditable@1100525045 : Boolean;
      PlantDescriptionFormat@1100525046 : Integer;
      ElementDescriptionFormat@1100525047 : Integer;

    LOCAL PROCEDURE SetEditable@1100528300();
    BEGIN
      LineType := GetLineType;

      LineEditable := CheckLineEditable;

      TypeEditable := LineEditable;

      PlantCompanyEditable := LineEditable AND (Type = Type::Plant) AND ("Receiving Company" <> '');  //* Not for Unmanned Plant!
      PlantLocationEditable := LineEditable AND (Type IN [Type::Plant,Type::UnmannedPlant]) AND ("Object No."<>'') AND ("Plant Company" <> '');
      PlantTypeNoEditable := LineEditable AND (Type IN [Type::Plant, Type::UnmannedPlant]) AND ("Plant Company" <> '');
      PlantDescriptionEditable := FALSE;
      CostComponentPlantEditable := LineEditable AND (Type = Type::Plant) AND ("Plant Company" <> '');

      ElementEditable := LineEditable AND (Type IN [Type::Project,Type::Plant,Type::UnmannedPlant]);
      ElementDescriptionEditable := FALSE;
      ExtensionContractEditable := LineEditable AND (Type = Type::Project);

      ShiftCodeEditable := LineEditable AND (Type IN [Type::Project,Type::Plant,Type::UnmannedPlant]);

      QuantityEditable := (LineEditable AND (LineType = 3));
      AmountEditable :=  (LineEditable AND (LineType = 3));

      DaynoEditable := LineEditable AND (LineType IN [0,1,2]) ;
      DayQtyEditable := LineEditable AND (LineType IN [0,1,2]);

      OverHourQtyEditable := LineEditable AND (LineType IN [0,1]);
      StartTimeEditable := LineEditable AND (LineType IN [0,1]);
      EndTimeEditable := LineEditable AND (LineType IN [0,1]);

      StartKmEditable := LineEditable AND (LineType = 2);
      EndKmEditable := LineEditable AND (LineType = 2);
      RiderTypeEditable := LineEditable AND (LineType = 2);

      LineTotalEditable := FALSE;
      StatusEditable := FALSE
    END;

    LOCAL PROCEDURE CheckLineEditable@1100528301() : Boolean;
    BEGIN
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        EXIT(FALSE);
      IF (Status <> Status::Open) AND (Status <> Status::Rejected) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetDefaultsAndFormat@1100528307();
    VAR
      StringFunctions@1100528300 : Codeunit 11012273;
    BEGIN
      TypeFormat := StringFunctions.BitStringToInteger(CreateFormatString(TypeEditable, 75));

      PlantCompanyFormat := StringFunctions.BitStringToInteger(CreateFormatString(PlantCompanyEditable, 700));
      PlantLocationFormat := StringFunctions.BitStringToInteger(CreateFormatString(PlantLocationEditable, 705));
      PlantTypeFormat := StringFunctions.BitStringToInteger(CreateFormatString(PlantTypeNoEditable, 710));
      PlantNoFormat := StringFunctions.BitStringToInteger(CreateFormatString(PlantTypeNoEditable, 720));
      PlantDescriptionFormat := StringFunctions.BitStringToInteger(CreateFormatString(PlantTypeNoEditable, 721));
      CostComponentPlantFormat := StringFunctions.BitStringToInteger(CreateFormatString(CostComponentPlantEditable, 730));

      ElementFormat := StringFunctions.BitStringToInteger(CreateFormatString(ElementEditable, 100));
      ElementDescriptionFormat := StringFunctions.BitStringToInteger(CreateFormatString(ElementDescriptionEditable, 820));
      ExtensionContractFormat := StringFunctions.BitStringToInteger(CreateFormatString(ExtensionContractEditable, 80));

      ShiftCodeFormat := StringFunctions.BitStringToInteger(CreateFormatString(ShiftCodeEditable, 280));

      QuantityFormat := StringFunctions.BitStringToInteger(CreateFormatString(QuantityEditable, 560));
      AmountFormat := StringFunctions.BitStringToInteger(CreateFormatString(AmountEditable, 570));

      DayNoFormat := StringFunctions.BitStringToInteger(CreateFormatString(DaynoEditable, 1));
      DayQtyFormat := StringFunctions.BitStringToInteger(CreateFormatString(DayQtyEditable, 2));
      OverHourQtyFormat := StringFunctions.BitStringToInteger(CreateFormatString(OverHourQtyEditable, 6));
      RiderTypeFormat := StringFunctions.BitStringToInteger(CreateFormatString(RiderTypeEditable, 5));
      StartTimeFormat := StringFunctions.BitStringToInteger(CreateFormatString(StartTimeEditable, 860));
      EndTimeFormat := StringFunctions.BitStringToInteger(CreateFormatString(EndTimeEditable, 870));
      StartKmFormat := StringFunctions.BitStringToInteger(CreateFormatString(StartKmEditable, 900));
      EndKmFormat := StringFunctions.BitStringToInteger(CreateFormatString(EndKmEditable, 910));

      CaoFilter := HourLineTemplate."CAO Filter";
    END;

    LOCAL PROCEDURE SetPageFields@1100528302();
    BEGIN
      DayNo := 0;
      DayQty := 0;
      OverHourQty := 0;
      RiderType := 0;

      CASE TRUE OF
        ((Monday <> 0) OR ("Overtime Hours Monday" <> 0) OR ("Travel Hours Monday" <> 0)): BEGIN
          DayNo := 1;
          DayQty := Monday;
          OverHourQty := "Overtime Hours Monday";
          RiderType := "Travel Hours Monday";
        END;
        ((Tuesday <> 0) OR ("Overtime Hours Tuesday" <> 0) OR ("Travel Hours Tuesday" <> 0)): BEGIN
          DayNo := 2;
          DayQty := Tuesday;
          OverHourQty := "Overtime Hours Tuesday";
          RiderType := "Travel Hours Tuesday";
        END;
        ((Wednesday <> 0) OR ("Overtime Hours Wednesday" <> 0) OR ("Travel Hours Wednesday" <> 0)): BEGIN
          DayNo := 3;
          DayQty := Wednesday;
          OverHourQty := "Overtime Hours Wednesday";
          RiderType := "Travel Hours Wednesday";
        END;
        ((Thursday <> 0) OR ("Overtime Hours Thursday" <> 0) OR ("Travel Hours Thursday" <> 0)): BEGIN
          DayNo := 4;
          DayQty := Thursday;
          OverHourQty := "Overtime Hours Thursday";
          RiderType := "Travel Hours Thursday";
        END;
        ((Friday <> 0) OR ("Overtime Hours Friday" <> 0) OR ("Travel Hours Friday" <> 0)): BEGIN
          DayNo := 5;
          DayQty := Friday;
          OverHourQty := "Overtime Hours Friday";
          RiderType := "Travel Hours Friday";
        END;
        ((Saturday <> 0) OR ("Overtime Hours Saturday" <> 0) OR ("Travel Hours Saturday" <> 0)): BEGIN
          DayNo := 6;
          DayQty := Saturday;
          OverHourQty := "Overtime Hours Saturday";
          RiderType := "Travel Hours Saturday";
        END;
        ((Sunday <> 0) OR ("Overtime Hours Sunday" <> 0) OR ("Travel Hours Sunday" <> 0)): BEGIN
          DayNo := 7;
          DayQty := Sunday;
          OverHourQty := "Overtime Hours Sunday";
          RiderType := "Travel Hours Sunday";
        END;
      END;
      StartTime := "Start Time";
      EndTime := "End Time";
      StartKm := "Start Kilometer";
      EndKm := "End Kilometer";

      LineType := GetLineType;
    END;

    LOCAL PROCEDURE SetTableFields@1100528303();
    BEGIN
      IF ((DayNo <> 0) AND
          ((DayQty <> 0) OR (OverHourQty <> 0) OR (RiderType <> 0)))
      THEN BEGIN
        CASE DayNo OF
          1: BEGIN
            Monday := DayQty;
            "Overtime Hours Monday" := OverHourQty;
            "Travel Hours Monday" := RiderType;
            ResetTableFields(1);
          END;
          2: BEGIN
            Tuesday := DayQty;
            "Overtime Hours Tuesday" := OverHourQty;
            "Travel Hours Tuesday" := RiderType;
            ResetTableFields(2);
          END;
          3: BEGIN
            Wednesday := DayQty;
            "Overtime Hours Wednesday" := OverHourQty;
            "Travel Hours Wednesday" := RiderType;
            ResetTableFields(3);
          END;
          4: BEGIN
            Thursday := DayQty;
            "Overtime Hours Thursday" := OverHourQty;
            "Travel Hours Thursday" := RiderType;
            ResetTableFields(4);
          END;
          5: BEGIN
            Friday := DayQty;
            "Overtime Hours Friday" := OverHourQty;
            "Travel Hours Friday" := RiderType;
            ResetTableFields(5);
          END;
          6: BEGIN
            Saturday := DayQty;
            "Overtime Hours Saturday" := OverHourQty;
            "Travel Hours Saturday" := RiderType;
            ResetTableFields(6);
          END;
          7: BEGIN
            Sunday := DayQty;
            "Overtime Hours Sunday" := OverHourQty;
            "Travel Hours Sunday" := RiderType;
            ResetTableFields(7);
          END;
        END;
        "Total Line" := Monday + "Overtime Hours Monday" + Tuesday + "Overtime Hours Tuesday" + Wednesday + "Overtime Hours Wednesday" +
          Thursday + "Overtime Hours Thursday" + Friday + "Overtime Hours Friday" + Saturday + "Overtime Hours Saturday" +
          Sunday + "Overtime Hours Sunday";
      END;
    END;

    LOCAL PROCEDURE ResetTableFields@1100528309(NewDayNo@1100528300 : Integer);
    BEGIN
      IF (NewDayNo <> 1) THEN BEGIN
        Monday := 0;
        "Overtime Hours Monday" := 0;
        "Travel Hours Monday" := 0;
      END;
      IF (NewDayNo <> 2) THEN BEGIN
        Tuesday := 0;
        "Overtime Hours Tuesday" := 0;
        "Travel Hours Tuesday" := 0;
      END;
      IF (NewDayNo <> 3) THEN BEGIN
        Wednesday := 0;
        "Overtime Hours Wednesday" := 0;
        "Travel Hours Wednesday" := 0;
      END;
      IF (NewDayNo <> 4) THEN BEGIN
        Thursday := 0;
        "Overtime Hours Thursday" := 0;
        "Travel Hours Thursday" := 0;
      END;
      IF (NewDayNo <> 5) THEN BEGIN
        Friday := 0;
        "Overtime Hours Friday" := 0;
        "Travel Hours Friday" := 0;
      END;
      IF (NewDayNo <> 6) THEN BEGIN
        Saturday := 0;
        "Overtime Hours Saturday" := 0;
        "Travel Hours Saturday" := 0;
      END;
      IF (NewDayNo <> 7) THEN BEGIN
        Sunday := 0;
        "Overtime Hours Sunday" := 0;
        "Travel Hours Sunday" := 0;
      END;
    END;

    LOCAL PROCEDURE SetDescriptionFields@1100528306();
    BEGIN
      HourLineTemplate.INIT;
      ExtensionContract.INIT;
      DimensionValue.INIT;
      WageComponent.INIT;

      IF (HourLineTemplate.GET(1, "Receiving Company", "Line Template Code")) THEN;
      IF (Type = Type::Project) AND ("Extension Contract" <> '') THEN
        IF (ExtensionContract.GET("Object No.", "Extension Contract")) THEN;
      IF ("Department Code" <> '') THEN BEGIN
        DimensionValue.SETCURRENTKEY(Code, "Global Dimension No.");
        DimensionValue.SETRANGE(Code, "Department Code");
        DimensionValue.SETRANGE("Global Dimension No.", 1);
        IF (DimensionValue.FINDFIRST) THEN;
      END;
      IF (WageComponent.GET("Wage Component")) THEN;

      CALCFIELDS("Element Description");
      ElementDescription := "Element Description";

      PlantDescription := GetPlantDescription();
    END;

    LOCAL PROCEDURE GetLineType@1100528305() : Integer;
    VAR
      WageComponent@1100528300 : Record 11012014;
    BEGIN
      IF (NOT WageComponent.GET("Wage Component")) THEN
        EXIT(0); //Unknown
      IF (WageComponent."Component Type" = WageComponent."Component Type"::Hours) THEN
        EXIT(1); //Hour
      IF (WageComponent."Component Type" = WageComponent."Component Type"::Expenses) THEN BEGIN
        IF (WageComponent."Kilometer Expense") THEN
          EXIT(2); //Km;
        EXIT(3); //Expense;
      END;
    END;

    LOCAL PROCEDURE CreateFormatString@1100528316(Editable@1100528307 : Boolean;CurrFieldNo@1100528308 : Integer) : Text;
    VAR
      Employee@1100528301 : Record 5200;
      HourPortalFieldsTemplate@1100528302 : Record 11012076;
      HourPortalFieldsTemplLine@1100528303 : Record 11012077;
      HourLineTemplateMgt@1100528304 : Codeunit 11012025;
      CaoFound@1100528305 : Boolean;
      FormatString@1100528306 : Text;
      FieldNumber@1100528300 : Integer;
    BEGIN
      //Format positions:
      //1: Visible in HPT
      //2: Read-only
      //3: Optional in HPT
      //4: tbd
      IF (CurrFieldNo = -1) THEN BEGIN //Page only fields (e.g.: DayNo)
        IF (Editable) THEN
          EXIT('1000')
        ELSE
          EXIT('1100');
      END;

      FormatString := '0100'; //Not visible, Read Only, Not Optional
      IF (NOT Employee.GET("Employee No.")) THEN
        Employee.INIT;

      IF (NOT HourPortalFieldsTemplate.FINDSET) THEN
        EXIT(FormatString);

      REPEAT
        CaoFound := HourLineTemplateMgt.IsEmployeeInCAOFilter(COMPANYNAME, Employee."No.", HourPortalFieldsTemplate."CAO Filter");
      UNTIL (HourPortalFieldsTemplate.NEXT = 0) OR (CaoFound);
      IF (NOT CaoFound) THEN
        EXIT(FormatString);

      IF (HourPortalFieldsTemplLine.GET(HourPortalFieldsTemplate.Code,
        HourPortalFieldsTemplLine."Table No."::"Site Mgt Hours Line", CurrFieldNo))
      THEN BEGIN
        IF (HourPortalFieldsTemplLine.Type > HourPortalFieldsTemplLine.Type::"Not Used") THEN BEGIN
          IF (HourPortalFieldsTemplLine.Type = HourPortalFieldsTemplLine.Type::Mandatory) OR
             (HourPortalFieldsTemplLine.Visible)
          THEN
            FormatString[1] := '1';
          IF (NOT HourPortalFieldsTemplLine."Read Only") AND (Editable) THEN
            FormatString[2] := '0';
          IF (HourPortalFieldsTemplLine.Type = HourPortalFieldsTemplLine.Type::Optional) THEN
            FormatString[3] := '1';
        END;
      END;
      EXIT(FormatString);
    END;

    LOCAL PROCEDURE CheckTimes@1100528308();
    VAR
      MinutesOffset@1100528300 : Integer;
    BEGIN
      EXIT;
      //disabled by kz
      MinutesOffset := 15 * 60 * 1000;
      IF (StartTime > 0T) AND (EndTime = 0T) THEN BEGIN
        EndTime := StartTime + MinutesOffset;
      END;
      IF (StartTime > 0T) AND (EndTime > 0T) AND (EndTime < StartTime) THEN BEGIN
        EndTime := StartTime + MinutesOffset;
      END;
    END;

    LOCAL PROCEDURE CreateHeaderIfNotPresent@1100409000();
    VAR
      SiteMngmntHoursHeader@1100409000 : Record 11012360;
    BEGIN
      IF (NOT SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.")) THEN BEGIN
        SiteMngmntHoursHeader.INIT;
        SiteMngmntHoursHeader.VALIDATE(Year, Year);
        SiteMngmntHoursHeader.VALIDATE(Week, Week);
        SiteMngmntHoursHeader.VALIDATE("Supplying Company", "Supplying Company");
        SiteMngmntHoursHeader.VALIDATE("Employee No.", "Employee No.");
        SiteMngmntHoursHeader.INSERT(TRUE);
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE DeleteHeaderIfNoLines@1100409001();
    VAR
      SiteMngmntHoursHeader@1100409000 : Record 11012360;
      SiteMngmntHoursLine@1100409001 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      IF (NOT SiteMngmntHoursLine.FINDFIRST) THEN BEGIN
        IF (SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.")) THEN
          SiteMngmntHoursHeader.DELETE(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetHourLineTemplate@1100409002() : Code[20];
    VAR
      HourLineTemplate@1100409001 : Record 11229799;
      HourLineTemplateMgt@1100409000 : Codeunit 11012025;
    BEGIN
      HourLineTemplate.SETCURRENTKEY(Source,"Receiving Company","Seq. No.",Code);
      HourLineTemplate.SETRANGE(Source, HourLineTemplate.Source::"Site Mngmnt. Hours");
      IF "Receiving Company" = '' THEN
        HourLineTemplate.SETRANGE("Receiving Company", COMPANYNAME)
      ELSE
        HourLineTemplate.SETRANGE("Receiving Company", "Receiving Company");

      HourLineTemplate.SETRANGE(Type, Type);
      IF (HourLineTemplate.FINDSET) THEN BEGIN
        REPEAT
          IF (HourLineTemplateMgt.IsEmployeeInCAOFilter(COMPANYNAME, "Employee No.", HourLineTemplate."CAO Filter")) THEN
            EXIT(HourLineTemplate.Code);
        UNTIL (HourLineTemplate.NEXT = 0);
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE CurrentTemplateOK@1100525000() : Boolean;
    VAR
      HourLineTemplate@1100525002 : Record 11229799;
      HourLineTemplateMgt@1100525001 : Codeunit 11012025;
    BEGIN
      IF "Line Template Code" <> '' THEN BEGIN
        HourLineTemplate.SETCURRENTKEY(Source,"Receiving Company","Seq. No.",Code);
        HourLineTemplate.SETRANGE(Source, HourLineTemplate.Source::"Site Mngmnt. Hours");
        IF "Receiving Company" = '' THEN
          HourLineTemplate.SETRANGE("Receiving Company", COMPANYNAME)
        ELSE
          HourLineTemplate.SETRANGE("Receiving Company", "Receiving Company");
        HourLineTemplate.SETRANGE(Type, Type);
        HourLineTemplate.SETRANGE(Code, "Line Template Code");
        IF (HourLineTemplate.FINDFIRST) THEN BEGIN
          IF (HourLineTemplateMgt.IsEmployeeInCAOFilter(COMPANYNAME, "Employee No.", HourLineTemplate."CAO Filter")) THEN
            EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    BEGIN
    {
      LineType:
        1 = Hour
        2 = Km
        3 = Expences
    }
    END.
  }
}

