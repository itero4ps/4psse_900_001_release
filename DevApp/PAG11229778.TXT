OBJECT Page 11229778 Estimate Offer Amount
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Offer Amounts;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table11072073;
    OnInit=BEGIN
             OfferPriceEditable := TRUE;
             OfferAmountEditable := TRUE;
             OfferFixedEditable := TRUE;
             MarkupEditable := TRUE;
             MarginEditable := TRUE;
             SalesRemarkEditable := TRUE;
           END;

    OnOpenPage=VAR
                 EstimateUpdateMgt@1100525001 : Codeunit 11012229;
                 lvEstRec@1100485000 : Record 11012151;
                 lvSubEstRec@1100525002 : Record 11072074;
                 lvSumRec@1100525000 : Record 11012172;
               BEGIN
                 FILTERGROUP(3);
                 IF "Estimate No." <> '' THEN BEGIN
                   lvEstRec.GET("Estimate No.");
                   IF (SubEstimateFilter = '') THEN BEGIN  //DP00381
                     IF lvSumRec.GET("Estimate No.", lvEstRec."Summary (Cost)") THEN BEGIN
                       SumSheetCost := lvEstRec."Summary (Cost)";
                       SumSheetCostDesc := lvSumRec.Description;
                       CallReport(FALSE,FALSE);  //db, 24-02-15
                     END;
                     IF lvSumRec.GET("Estimate No.", lvEstRec."Summary (Sales)") THEN BEGIN
                       SumSheetSales := lvEstRec."Summary (Sales)";
                       SumSheetSalesDesc := lvSumRec.Description;
                       CallReport(TRUE,FALSE);  //db, 24-02-15
                     END;
                   END;
                 END;
                 FILTERGROUP(0);

                 OfferPriceEditable := (NOT lvEstRec.Fixed);
                 OfferAmountEditable := (NOT lvEstRec.Fixed);
                 OfferFixedEditable := (NOT lvEstRec.Fixed);
                 MarkupEditable := (NOT lvEstRec.Fixed);
                 MarginEditable := (NOT lvEstRec.Fixed);
                 SalesRemarkEditable := (NOT lvEstRec.Fixed);

                 IF "Estimate No." <> '' THEN BEGIN
                   lvEstRec.GET("Estimate No.");
                   IF lvEstRec."Full Cost/Sales Price Updated" = FALSE THEN
                     EstimateUpdateMgt.UpdateFullCostSalesPrice("Estimate No.");
                 END;

                 WarnForIllegalCode(lvEstRec."No.");
               END;

    OnAfterGetRecord=VAR
                       FormatManagement@1100409000 : Codeunit 11012022;
                       CopyPartQuan@1100525000 : Decimal;
                       PartQuan@1100525001 : Decimal;
                     BEGIN
                       GetTotals(
                         CostHours,CostLabor,CostMat,CostSubc,CostPlant,CostSundry,
                         SalesHours,SalesLabor,SalesMat,SalesSubc,SalesPlant,SalesSundry);  //DP00381

                       CostTotal := CostLabor + CostMat + CostSubc + CostPlant + CostSundry;
                       SalesTotal := SalesLabor + SalesMat + SalesSubc + SalesPlant + SalesSundry;

                       CALCFIELDS("Estimated Part", "Estimate Description");

                       PartQuan := GetPartQuantity;
                       IF PartQuan <> 0 THEN BEGIN
                         CostPrice := ROUND(CostTotal/PartQuan);
                         SalesPrice := ROUND(SalesTotal/PartQuan);
                       END ELSE BEGIN
                         CostPrice := CostTotal;
                         SalesPrice := SalesTotal;
                       END;

                       CALCFIELDS("Estimated Part");
                       GetSubEstTotals;

                       EstRec.GET("Estimate No.");  //db, 26-05-15
                       IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN BEGIN
                         "Markup %" := GetMarkup("Offer Price","Calculated Cost Price");
                         "Margin %" := GetMargin("Offer Price","Calculated Cost Price");
                       END ELSE BEGIN
                         "Markup %" := GetMarkup("Offer Price","Calculated Sales Price");
                         "Margin %" := GetMargin("Offer Price","Calculated Sales Price");
                       END;
                       GetUnitPrice;  //DP00686
                       HideSamevalue := (Level <> 0);  //DP00909
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525035;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 1100525028;2 ;Action    ;
                      Name=InitCostPrice;
                      CaptionML=ENU=Initialize &Cost Prices;
                      Promoted=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(FALSE,FALSE);
                               END;
                                }
      { 1100485045;2 ;Action    ;
                      Name=InitSalesPrice;
                      CaptionML=ENU=Initialize &Sales Prices;
                      Promoted=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(TRUE,FALSE);
                               END;
                                }
      { 1100409001;2 ;Action    ;
                      Name=CopyOfferPriceFromCost;
                      CaptionML=ENU=Copy Offer Price from Calculated Cost Price;
                      Promoted=Yes;
                      Image=CopyToTask;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(FALSE,TRUE);  //DP00686
                               END;
                                }
      { 1100525038;2 ;Action    ;
                      Name=CopyOfferPriceFromSales;
                      CaptionML=ENU=Copy Offer Price from Calculated Sales Price;
                      Promoted=Yes;
                      Image=CopyToTask;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallReport(TRUE,TRUE);
                               END;
                                }
      { 1100525044;2 ;Action    ;
                      Name=UpdateOfferAmount;
                      CaptionML=ENU=Update Offer Amount/Full Cost/Sales Price;
                      Image=CostCenter;
                      OnAction=VAR
                                 EstimateUpdateMgt@1100525000 : Codeunit 11012229;
                               BEGIN
                                 IF "Estimate No." <> '' THEN
                                   EstimateUpdateMgt.UpdateFullCostSalesPrice("Estimate No.");
                               END;
                                }
      { 1100525011;2 ;Action    ;
                      Name=InitMargin;
                      CaptionML=ENU=Initialize Margin;
                      Image=Start;
                      OnAction=BEGIN
                                 InitMargin;
                               END;
                                }
      { 1210190004;2 ;Action    ;
                      Name=UpdateMargin;
                      CaptionML=ENU=Update Margin collectively;
                      Image=Edit;
                      OnAction=BEGIN
                                 GlobalUpdateMargin;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525036;2 ;Action    ;
                      Name=AssignOfferFixed;
                      CaptionML=ENU=Assign Offer fixed collectively;
                      Image=SelectLineToApply;
                      OnAction=BEGIN
                                 GlobalUpdateAskForOffer(TRUE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525037;2 ;Action    ;
                      Name=RemoveOfferFixed;
                      CaptionML=ENU=Remove Offer fixed collectively;
                      Image=ReverseLines;
                      OnAction=BEGIN
                                 GlobalUpdateAskForOffer(FALSE);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525039;1 ;ActionGroup;
                      CaptionML=ENU=&Print }
      { 1100525040;2 ;Action    ;
                      Name=PrintEstimate;
                      CaptionML=ENU=Estimate Reports;
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(0);
                               END;
                                }
      { 1100525041;2 ;Action    ;
                      Name=PrintSubEstimate;
                      CaptionML=ENU=Sub-Estimate Reports;
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(1);
                               END;
                                }
      { 1100525042;2 ;Action    ;
                      Name=PrintEstimatePart;
                      CaptionML=ENU=Estimate &Part Reports;
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(2);
                               END;
                                }
      { 1100525043;2 ;Action    ;
                      Name=PrintEstimateLine;
                      CaptionML=ENU=Estimate &Lines Reports;
                      Image=List;
                      OnAction=BEGIN
                                 SetFilterPrintDoc(3);
                               END;
                                }
      { 1100485046;1 ;ActionGroup;
                      CaptionML=ENU=D&istribute }
      { 1100485047;2 ;Action    ;
                      Name=DistributeToLine;
                      ShortCutKey=Ctrl+Alt+F9;
                      CaptionML=ENU=Line to Distribute;
                      Image=Allocate;
                      OnAction=BEGIN
                                 DistributeLine;
                               END;
                                }
      { 1100485048;2 ;Action    ;
                      Name=DistributeOverSelection;
                      ShortCutKey=Ctrl+Alt+F10;
                      CaptionML=ENU=Distribute over Selection;
                      Image=Allocate;
                      OnAction=BEGIN
                                 DistributeSelection;
                               END;
                                }
      { 1100485049;2 ;Action    ;
                      Name=ProcessSelection;
                      ShortCutKey=Ctrl+Alt+F11;
                      CaptionML=ENU=Process Selection;
                      Image=Start;
                      OnAction=BEGIN
                                 ProcessSelection;
                               END;
                                }
      { 1100485050;2 ;Action    ;
                      Name=ResetSelection;
                      ShortCutKey=Ctrl+Alt+F12;
                      CaptionML=ENU=Reset Selection;
                      Image=Cancel;
                      OnAction=BEGIN
                                 ResetSelection;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525001;1;Group  ;
                GroupType=Group }

    { 1100525000;2;Field  ;
                Name=DefaultMargin;
                CaptionML=ENU=Margin % (Offer Price);
                SourceExpr=EstRec."Margin % (Offer Price)";
                Editable=FALSE }

    { 1100525009;2;Field  ;
                Name=DefaultMarkup;
                CaptionML=ENU=Markup % (Offer Price);
                SourceExpr=EstRec."Markup % (Offer Price)";
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                IndentationColumnName=Level;
                IndentationControls=Part;
                GroupType=Repeater }

    { 1210190000;2;Field  ;
                SourceExpr="Estimate No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1210190002;2;Field  ;
                SourceExpr="Estimate Description";
                Visible=FALSE;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                SourceExpr="Sub-Estimate No.";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=HideSamevalue }

    { 1000000000;2;Field  ;
                SourceExpr="Sub-Estimate Description";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=HideSamevalue }

    { 4   ;2   ;Field     ;
                SourceExpr=Part;
                Editable=FALSE;
                Style=Attention;
                StyleExpr=IsIllegalCode }

    { 6   ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE }

    { 1100409005;2;Field  ;
                SourceExpr="Description 2";
                Importance=Additional;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525008;2;Field  ;
                SourceExpr=Quantity;
                OnValidate=VAR
                             CopyRec2@1100525001 : Record 11012153;
                           BEGIN
                             CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
                             MODIFY;
                             IF GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part) THEN;  //db, 26-04-10 (get Calculated Amount)
                             RefreshLine;
                           END;
                            }

    { 1100525010;2;Field  ;
                CaptionML=ENU=Cum.Quantity;
                SourceExpr=GetPartQuantity }

    { 1100485007;2;Field  ;
                SourceExpr="Unit of Measure";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485009;2;Field  ;
                SourceExpr="Settlement Type";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525012;2;Field  ;
                CaptionML=ENU=Hours Cost Price;
                SourceExpr=CostHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationCostPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",FALSE,FALSE);
                              RefreshLine;
                            END;
                             }

    { 1100485011;2;Field  ;
                CaptionML=ENU=Cost Price;
                SourceExpr=CostPrice;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationCostPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",FALSE,FALSE);
                              RefreshLine;
                            END;
                             }

    { 1100485013;2;Field  ;
                CaptionML=ENU=Cost Amount;
                SourceExpr=CostTotal;
                Editable=FALSE }

    { 1100525004;2;Field  ;
                CaptionML=ENU=Calculated Price (Full Cost Price);
                SourceExpr="Calculated Cost Price";
                Editable=FALSE }

    { 1100525033;2;Field  ;
                CaptionML=ENU=Calculated Amount (Full Cost Price);
                SourceExpr="Calculated Cost Amount" }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Hours Sales;
                SourceExpr=SalesHours;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationSalesPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
                              RefreshLine;
                            END;
                             }

    { 1100525002;2;Field  ;
                CaptionML=ENU=Sales Price;
                SourceExpr=SalesPrice;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              RunFormCalculationSalesPrice();
                              CheckDateTimeAndRecalculate("Estimate No.","Sub-Estimate No.",TRUE,FALSE);
                              RefreshLine;
                            END;
                             }

    { 1100525031;2;Field  ;
                CaptionML=ENU=Sales Amount;
                SourceExpr=SalesTotal;
                Editable=FALSE }

    { 1100485015;2;Field  ;
                CaptionML=ENU=Calculated Price ((Full Sales Price);
                SourceExpr="Calculated Sales Price";
                Editable=FALSE }

    { 1100485017;2;Field  ;
                CaptionML=ENU=Calculated Amount ((Full Sales Amount);
                SourceExpr="Calculated Sales Amount";
                Editable=FALSE }

    { 1100485026;2;Field  ;
                SourceExpr="Transfer to Installment M.";
                Visible=FALSE }

    { 1100528601;2;Field  ;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 1100485019;2;Field  ;
                SourceExpr="Offer Price";
                Editable=OfferPriceEditable;
                OnValidate=BEGIN
                             EstRec.GET("Estimate No.");  //db, 26-05-15
                             IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN BEGIN
                               "Markup %" := GetMarkup("Offer Price","Calculated Cost Price");
                               "Margin %" := GetMargin("Offer Price","Calculated Cost Price");
                             END ELSE BEGIN
                               "Markup %" := GetMarkup("Offer Price","Calculated Sales Price");
                               "Margin %" := GetMargin("Offer Price","Calculated Sales Price");
                             END;
                             RefreshLine;
                           END;
                            }

    { 1100528600;2;Field  ;
                SourceExpr="Offer Price (FCY)";
                Visible=FALSE;
                OnValidate=BEGIN
                             VALIDATE("Offer Price");
                           END;
                            }

    { 1100485021;2;Field  ;
                SourceExpr="Offer Amount";
                Editable=OfferAmountEditable;
                OnValidate=BEGIN
                             RefreshLine;
                           END;
                            }

    { 1100528602;2;Field  ;
                SourceExpr="Offer Amount (FCY)";
                Visible=FALSE;
                OnValidate=BEGIN
                             RefreshLine;
                           END;
                            }

    { 1100525014;2;Field  ;
                SourceExpr="Markup %";
                Editable=MarkupEditable;
                OnValidate=BEGIN
                             EstRec.GET("Estimate No.");  //db, 26-05-15
                             IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
                               "Offer Price" := ROUND("Calculated Cost Price" + ("Calculated Cost Price" * "Markup %" / 100 ))
                             ELSE
                               "Offer Price" := ROUND("Calculated Sales Price" + ("Calculated Sales Price" * "Markup %" / 100 ));
                             VALIDATE("Offer Price");
                             //db: assign amount after validate price, because difference (Rec/xRec) based on amount is assigned to lower parts in validate above
                             "Offer Amount" := "Offer Price" * GetPartQuantity;
                             RefreshLine;
                           END;
                            }

    { 1100485023;2;Field  ;
                SourceExpr="Margin %";
                Editable=MarginEditable;
                OnValidate=BEGIN
                             IF "Margin %" >= 100 THEN
                               ERROR(Text011, FIELDCAPTION("Margin %"), 100); //mg, 20-07-10, M20057
                             EstRec.GET("Estimate No.");  //db, 26-05-15
                             IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
                               "Offer Price" := ROUND("Calculated Cost Price" / (1 - "Margin %" / 100))
                             ELSE
                               "Offer Price" := ROUND("Calculated Sales Price" / (1 - "Margin %" / 100));
                             VALIDATE("Offer Price");
                             //db: assign amount after validate price, because difference (Rec/xRec) based on amount is assigned to lower parts in validate above
                             "Offer Amount" := "Offer Price" * GetPartQuantity;
                             RefreshLine;
                           END;
                            }

    { 1100485040;2;Field  ;
                SourceExpr="Offer fixed";
                Editable=OfferFixedEditable;
                OnValidate=BEGIN
                             OfferfixedOnAfterValidate;
                           END;
                            }

    { 1100485003;2;Field  ;
                SourceExpr="Sales Comment";
                Importance=Additional;
                Editable=SalesRemarkEditable }

    { 1100409006;2;Field  ;
                SourceExpr="Quantity per Unit";
                OnValidate=BEGIN
                             GetUnitPrice;  //DP00686
                             RefreshLine;
                           END;
                            }

    { 1100409004;2;Field  ;
                SourceExpr="Unit of Qty per Unit" }

    { 1100409000;2;Field  ;
                CaptionML=ENU=Cost Price Index;
                SourceExpr=CostPriceIndex;
                Editable=FALSE }

    { 1100409002;2;Field  ;
                CaptionML=ENU=Sales Price Index;
                SourceExpr=SalesPriceIndex;
                Editable=FALSE }

    { 1100409003;2;Field  ;
                CaptionML=ENU=OFfer Price Index;
                SourceExpr=OfferPriceIndex;
                OnValidate=BEGIN
                             VALIDATE("Offer Price", ROUND("Quantity per Unit" * OfferPriceIndex, 0.01));  //db, 18-12-14
                             RefreshLine;
                           END;
                            }

    { 1100525003;0;Container;
                ContainerType=FactBoxArea }

    { 1100525007;1;Part   ;
                SubPageLink=Estimate No.=FIELD(Estimate No.),
                            Sub-Estimate No.=FIELD(Sub-Estimate No.);
                PagePartID=Page11229316;
                PartType=Page }

    { 1100525005;1;Part   ;
                SubPageLink=Estimate No.=FIELD(Estimate No.),
                            Sub-Estimate No.=FIELD(Sub-Estimate No.);
                PagePartID=Page11229317;
                PartType=Page }

  }
  CODE
  {
    VAR
      Text001@1100485021 : TextConst 'ENU=%1 is not a Sales Estimate';
      Text002@1100485023 : TextConst 'ENU=First select Lines.';
      Text004@100485027 : TextConst 'ENU=First select 1 Line.';
      Text005@1100485033 : TextConst 'ENU="Distribution not possible due to selection of Parts. "';
      Text006@1100485034 : TextConst 'ENU=No Line selected to be set zo zero.';
      Text007@1100485035 : TextConst 'ENU=No selection made to divide amount.';
      Text008@1100485036 : TextConst 'ENU=Already Lines selected to divide.';
      Text009@1100485037 : TextConst 'ENU=Already selection made for dividing.';
      Text011@1100525014 : TextConst 'ENU=%1 must be smaller than %2';
      Text012@1100525022 : TextConst 'ENU=Not all Offer Prices are copied because some Offer Prices are fixed.';
      Text013@1100409001 : TextConst 'ENU=Warning: This Estimate lacks some intermediate levels. The Sales Price functionality may therefore not work.';
      EstRec@1100525038 : Record 11012151;
      EstPartRec@1100525037 : Record 11072073;
      TempEstPartRec1@1100525036 : TEMPORARY Record 11072073;
      TempEstPartRec2@1100525035 : TEMPORARY Record 11072073;
      SubEstTotCosts@1100525034 : Decimal;
      SubEstTotSales@1100525033 : Decimal;
      SubEstTotOffer@1100525032 : Decimal;
      SubEstTotMargin@1100525031 : Decimal;
      SubEstTotCostPrice@1100525030 : Decimal;
      SubEstTotSalesPrice@1100525029 : Decimal;
      SubEstTotOfferPrice@1100525028 : Decimal;
      SubEstTotMarkup@1100525027 : Decimal;
      EstFixed@1100525026 : Boolean;
      Selection2@1100525025 : Boolean;
      Selection1@1100525024 : Boolean;
      SumSheetCost@1100525023 : Code[10];
      SumSheetCostDesc@1100525021 : Text[50];
      SumSheetSales@1100525020 : Code[10];
      SumSheetSalesDesc@1100525019 : Text[50];
      SubEstimateFilter@1100525018 : Code[20];
      SubEstDesc@1100525017 : Text[50];
      CostHours@1100525016 : Decimal;
      CostLabor@1100525015 : Decimal;
      CostMat@1100525013 : Decimal;
      CostSubc@1100525012 : Decimal;
      CostPlant@1100525011 : Decimal;
      CostSundry@1100525010 : Decimal;
      CostTotal@1100525009 : Decimal;
      SalesHours@1100525008 : Decimal;
      SalesLabor@1100525007 : Decimal;
      SalesMat@1100525006 : Decimal;
      SalesSubc@1100525005 : Decimal;
      SalesPlant@1100525004 : Decimal;
      SalesSundry@1100525003 : Decimal;
      SalesTotal@1100525002 : Decimal;
      CostPrice@1100525001 : Decimal;
      SalesPrice@1100525000 : Decimal;
      MarginEditable@1100525049 : Boolean INDATASET;
      OfferPriceEditable@1100525048 : Boolean INDATASET;
      OfferAmountEditable@1100525047 : Boolean INDATASET;
      OfferFixedEditable@1100525046 : Boolean INDATASET;
      MarkupEditable@1100525045 : Boolean INDATASET;
      SalesRemarkEditable@1100525044 : Boolean INDATASET;
      PartEmphasize@1100525043 : Boolean INDATASET;
      PartIndent@1100525042 : Integer INDATASET;
      DescriptionEmphasize@1100525041 : Boolean INDATASET;
      DescriptionIndent@1100525040 : Integer INDATASET;
      IsIllegalCode@1100525039 : Boolean INDATASET;
      CostPriceIndex@1100409000 : Decimal;
      SalesPriceIndex@1100409002 : Decimal;
      OfferPriceIndex@1100409003 : Decimal;
      HideSamevalue@1100525050 : Boolean INDATASET;

    PROCEDURE GetSubEstTotals@1210190001();
    VAR
      lvEstRec@1100485001 : Record 11012151;
      lvEstPartRec@1100485002 : Record 11072073;
      CumQuan@1100525000 : Decimal;
    BEGIN
      SubEstTotCosts := 0;
      SubEstTotSales := 0;
      SubEstTotOffer := 0;
      SubEstTotMargin := 0;
      SubEstTotCostPrice :=0;
      SubEstTotSalesPrice :=0;
      SubEstTotOfferPrice :=0;
      SubEstTotMarkup := 0;

      lvEstRec.GET("Estimate No.");

      //DP00381.sn
      lvEstPartRec.SETRANGE("Estimate No.", "Estimate No.");
      lvEstPartRec.SETRANGE(Level, 0);
      IF lvEstPartRec.FINDSET THEN BEGIN
        REPEAT
          CumQuan := lvEstPartRec.GetPartQuantity;
          SubEstTotCosts := SubEstTotCosts + lvEstPartRec."Calculated Cost Price" * CumQuan;
          SubEstTotCostPrice := SubEstTotCostPrice + lvEstPartRec."Calculated Cost Price";

          SubEstTotSales := SubEstTotSales + lvEstPartRec."Calculated Sales Price" * CumQuan;
          SubEstTotSalesPrice := SubEstTotSalesPrice + lvEstPartRec."Calculated Sales Price";

          SubEstTotOffer := SubEstTotOffer + lvEstPartRec."Offer Price" * CumQuan;
          SubEstTotOfferPrice := SubEstTotOfferPrice + lvEstPartRec."Offer Price";
        UNTIL lvEstPartRec.NEXT = 0;
      END;
      //DP00381.en

      SubEstTotMargin := GetMargin(SubEstTotOfferPrice,SubEstTotCostPrice);
      SubEstTotMarkup := GetMarkup(SubEstTotOfferPrice,SubEstTotCostPrice);
    END;

    PROCEDURE RunFormCalculationCostPrice@1100525001();
    VAR
      EstLineRec@1100525000 : Record 11072072;
    BEGIN
      EstLineRec.FILTERGROUP(9);
      EstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstLineRec.SETRANGE("Part Group", "Part Group");
      EstLineRec.SETRANGE(Part, Part);
      EstLineRec.FILTERGROUP(0);
      EstLineRec."Estimate No." := "Estimate No.";  //db, 22-03-10: set estimate for hide zerolines (subform)
      PAGE.RUNMODAL(PAGE::"Estimate Line Cost NEW", EstLineRec);   //db, 24-03-14
    END;

    PROCEDURE RunFormCalculationSalesPrice@1100525002();
    VAR
      EstLineRec@1100525000 : Record 11072072;
    BEGIN
      EstLineRec.FILTERGROUP(9);
      EstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstLineRec.SETRANGE("Part Group", "Part Group");
      EstLineRec.SETRANGE(Part, Part);
      EstLineRec.FILTERGROUP(0);
      EstLineRec."Estimate No." := "Estimate No.";  //db, 22-03-10: set estimate for hide zerolines (subform)
      PAGE.RUNMODAL(PAGE::"Estimate Line Sales NEW", EstLineRec);  //db, 24-03-14
    END;

    PROCEDURE CheckDateTimeAndRecalculate@1100525000(iEstimate@1100525003 : Code[20];iSubEst@1100525006 : Code[20];iSales@1100525004 : Boolean;iAdjustOfferPrice@1100525005 : Boolean);
    VAR
      lvEstRec@1100525000 : Record 11012151;
      lvSummaryRec@1100525001 : Record 11012172;
    BEGIN
      lvEstRec.GET(iEstimate);
      lvSummaryRec.SETRANGE("Estimate No.", iEstimate);
      lvSummaryRec.SETRANGE("Sub-Estimate No.", iSubEst);
      IF NOT lvSummaryRec.FINDFIRST THEN BEGIN
        lvSummaryRec.SETFILTER("Sub-Estimate No.", '%1', '');
        IF NOT lvSummaryRec.FINDFIRST THEN EXIT;
      END;
      IF lvEstRec."Last Date Modified" > lvSummaryRec."Last Date Modified" THEN BEGIN
        CallReport(iSales,iAdjustOfferPrice);
      END ELSE BEGIN
        IF lvEstRec."Last Date Modified" = lvSummaryRec."Last Date Modified" THEN BEGIN
          IF lvEstRec."Last Time Modified" > lvSummaryRec."Last Time Modified" THEN BEGIN
            CallReport(iSales,iAdjustOfferPrice);
          END;
        END;
      END;
    END;

    PROCEDURE CallReport@1100525019(iSales@1100525000 : Boolean;iAdjustOfferPrice@1100525004 : Boolean);
    VAR
      EstRec@1100525006 : Record 11012151;
      SubEstRec@1100525005 : Record 11072074;
      SubEstPartRec@1100525003 : Record 11072073;
      EstlineRec@1100525002 : Record 11072072;
      OpenBudgetReport@1100525001 : Report 11229768;
    BEGIN
      EstRec.GET("Estimate No.");

      SubEstRec.SETRANGE("Estimate No.", EstRec."No.");
      SubEstRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
      IF iSales THEN
        SubEstRec.SETFILTER("Summary (Sales)" , '<>%1', '')
      ELSE
        SubEstRec.SETFILTER("Summary (Cost)" , '<>%1', '');
      IF NOT SubEstRec.FINDFIRST THEN BEGIN
        OpenBudgetReport.USEREQUESTPAGE := FALSE;
        IF iSales THEN BEGIN
          EstRec.TESTFIELD("Summary (Sales)");
          OpenBudgetReport.SetSelection(EstRec."No.", EstRec."Summary (Sales)", iAdjustOfferPrice);
        END ELSE BEGIN
          EstRec.TESTFIELD("Summary (Cost)");
          OpenBudgetReport.SetSelection(EstRec."No.", EstRec."Summary (Cost)", iAdjustOfferPrice);
        END;
        EstlineRec.SETRANGE("Estimate No.", EstRec."No.");
        EstlineRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
        OpenBudgetReport.SETTABLEVIEW(EstlineRec);
        OpenBudgetReport.RUNMODAL;
      END ELSE BEGIN
        SubEstRec.SETRANGE("Summary (Sales)");
        SubEstRec.SETRANGE("Summary (Cost)");
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            CLEAR(OpenBudgetReport);
            OpenBudgetReport.USEREQUESTPAGE := FALSE;
            IF iSales THEN BEGIN
              SubEstRec.TESTFIELD("Summary (Sales)");
              OpenBudgetReport.SetSelection(SubEstRec."Estimate No.", SubEstRec."Summary (Sales)", iAdjustOfferPrice);
            END ELSE BEGIN
              SubEstRec.TESTFIELD("Summary (Cost)");
              OpenBudgetReport.SetSelection(SubEstRec."Estimate No.", SubEstRec."Summary (Cost)", iAdjustOfferPrice);
            END;
            EstlineRec.SETRANGE("Estimate No.", SubEstRec."Estimate No.");
            EstlineRec.SETRANGE("Sub-Estimate No.", SubEstRec."Sub-Estimate No.");
            OpenBudgetReport.SETTABLEVIEW(EstlineRec);
            OpenBudgetReport.RUNMODAL;
          UNTIL SubEstRec.NEXT = 0;
        END;
      END;

      IF iAdjustOfferPrice THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", EstRec."No.");
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
        EstPartRec.SETRANGE(EstPartRec."Offer fixed", TRUE);
        IF NOT EstPartRec.ISEMPTY THEN
          MESSAGE(Text012);
      END;
    END;

    PROCEDURE GetSummary@1100525003();
    VAR
      lvEstRec@1100525000 : Record 11012151;
      lvSubEstRec@1100525002 : Record 11072074;
      lvSumRec@1100525001 : Record 11012172;
    BEGIN
      //DP00381
      IF SubEstimateFilter <> '' THEN BEGIN
        IF NOT lvSubEstRec.GET("Estimate No.",SubEstimateFilter) THEN lvSubEstRec.INIT;
        SumSheetCost := lvSubEstRec."Summary (Cost)";
        SumSheetSales := lvSubEstRec."Summary (Sales)";
      END ELSE BEGIN
        IF NOT lvEstRec.GET("Estimate No.") THEN lvEstRec.INIT;
        SumSheetCost := lvEstRec."Summary (Cost)";
        SumSheetSales := lvEstRec."Summary (Sales)";
      END;
      IF NOT lvSumRec.GET("Estimate No.", SumSheetCost) THEN lvSumRec.INIT;
      SumSheetCostDesc := lvSumRec.Description;
      IF NOT lvSumRec.GET("Estimate No.", SumSheetSales) THEN lvSumRec.INIT;
      SumSheetSalesDesc := lvSumRec.Description;
    END;

    PROCEDURE ValidateSummarySales@1100525004();
    VAR
      lvEstRec@1100525002 : Record 11012151;
      lvSubEstRec@1100525001 : Record 11072074;
      lvSumRec@1100525000 : Record 11012172;
    BEGIN
      IF SumSheetSales <> '' THEN BEGIN
        lvSumRec.GET("Estimate No.", SumSheetSales);
        SumSheetSalesDesc := lvSumRec.Description;
      END;
      IF SubEstimateFilter = '' THEN BEGIN
        lvEstRec.GET("Estimate No.");
        lvEstRec."Summary (Sales)" := SumSheetSales;
        lvEstRec.MODIFY;
      END ELSE BEGIN
        IF lvSubEstRec.GET("Estimate No.", SubEstimateFilter) THEN BEGIN
          lvSubEstRec."Summary (Sales)" := SumSheetSales;
          lvSubEstRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE ValidateSummaryCost@1100525006();
    VAR
      lvEstRec@1100525000 : Record 11012151;
      lvSubEstRec@1100525002 : Record 11072074;
      lvSumRec@1100525001 : Record 11012172;
    BEGIN
      IF SumSheetCost <> '' THEN BEGIN
        lvSumRec.GET("Estimate No.", SumSheetCost);
        SumSheetCostDesc := lvSumRec.Description;
      END;
      IF SubEstimateFilter = '' THEN BEGIN
        lvEstRec.GET("Estimate No.");
        lvEstRec."Summary (Cost)" := SumSheetCost;
        lvEstRec.MODIFY;
      END ELSE BEGIN
        IF lvSubEstRec.GET("Estimate No.", SubEstimateFilter) THEN BEGIN
          lvSubEstRec."Summary (Cost)" := SumSheetCost;
          lvSubEstRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE LookupSummarySales@1100525005();
    VAR
      lvSumRec@1100525000 : Record 11012172;
    BEGIN
      lvSumRec.SETRANGE("Estimate No.","Estimate No.");
      IF SubEstimateFilter = '' THEN
        lvSumRec.SETFILTER("Sub-Estimate No.", '%1', '')
      ELSE
        lvSumRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
      lvSumRec."Estimate No." := "Estimate No.";
      lvSumRec.Summary := SumSheetSales;
      IF PAGE.RUNMODAL(0, lvSumRec) = ACTION::LookupOK THEN BEGIN
        SumSheetSales := lvSumRec.Summary;
        ValidateSummarySales;
      END;
    END;

    PROCEDURE LookupSummaryCost@1100525007();
    VAR
      lvSumRec@1100525000 : Record 11012172;
    BEGIN
      lvSumRec.SETRANGE("Estimate No.","Estimate No.");
      IF SubEstimateFilter = '' THEN
        lvSumRec.SETFILTER("Sub-Estimate No.", '%1', '')
      ELSE
        lvSumRec.SETFILTER("Sub-Estimate No.", SubEstimateFilter);
      lvSumRec."Estimate No." := "Estimate No.";
      lvSumRec.Summary := SumSheetCost;
      IF PAGE.RUNMODAL(0, lvSumRec) = ACTION::LookupOK THEN BEGIN
        SumSheetCost := lvSumRec.Summary;
        ValidateSummaryCost;
      END;
    END;

    PROCEDURE GlobalUpdateAskForOffer@1100485000(lvAction@1100525000 : Boolean);
    VAR
      lvText001@1100485001 : TextConst 'ENU=First select line(s)';
      lvEstPartRec@1100525001 : Record 11072073;
    BEGIN
      lvEstPartRec.COPY(Rec);
      WITH lvEstPartRec DO BEGIN
        CurrPage.SETSELECTIONFILTER(lvEstPartRec);  //db, 21-03-14
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;
        REPEAT
          VALIDATE("Offer fixed", lvAction);
          MODIFY(TRUE);
          IF "Offer fixed" = FALSE THEN
            CheckOfferFixedUpwards(lvEstPartRec);
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetFilterPrintDoc@1100485002(lvAction@1100485000 : Integer);
    VAR
      EstPartRec@1100485002 : Record 11072073;
      PrintDoc@1100485001 : Codeunit 229;
    BEGIN
      EstPartRec."Estimate No." := "Estimate No.";
      PrintDoc.PrintEstimateNEW(EstPartRec, lvAction);   //DP00381
    END;

    PROCEDURE GlobalUpdateMargin@1210190000();
    VAR
      EstPartRec@1210190000 : Record 11072073;
      MarginReport@1210190001 : Report 11012173;
      UpdateMargin@1210190006 : Boolean;
      UpdateMarkup@1210190007 : Boolean;
      varMethod@1210190005 : 'Replace,Add,Increase';
      varPerc@1210190002 : Decimal;
      NewPerc@1210190004 : Decimal;
      BasePerc@1210190008 : Decimal;
    BEGIN
      //db, 21-03-14: skip filter on EstPartRec in report; use marked lines
      //db.sn, 21-03-14
      EstPartRec.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EstPartRec);
      //db.en, 21-03-14

      MarginReport.RUNMODAL;
      MarginReport.GetRequestOptions(UpdateMargin, UpdateMarkup, varMethod, varPerc);
      IF (UpdateMargin = FALSE) AND (UpdateMarkup = FALSE) THEN EXIT;

      //db.sn, 21-03-14
      //EstPartRec.COPY(Rec);
      //CurrPage.SETSELECTIONFILTER(EstPartRec);
      //db.en, 21-03-14
      IF EstPartRec.FINDSET THEN BEGIN
        REPEAT
          EstRec.GET(EstPartRec."Estimate No.");  //db, 26-05-15
          EstPartRec.TESTFIELD("Offer fixed", FALSE);

          IF UpdateMargin THEN
            BasePerc := EstPartRec."Margin %";
          IF UpdateMarkup THEN
            BasePerc := EstPartRec."Markup %";
          CASE varMethod OF
            varMethod::Replace:
              NewPerc := varPerc;
            varMethod::Add:
              NewPerc := BasePerc + varPerc;
            varMethod::Increase:
              NewPerc := BasePerc * (100+varPerc)/100;
          END;
          IF NewPerc < 0 THEN NewPerc := 0;
          IF NewPerc > 100 THEN NewPerc := 100;
          IF UpdateMargin THEN BEGIN
            EstPartRec.VALIDATE("Margin %", NewPerc);
            //copy from OnValidate formfield Margin %":
            IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
              EstPartRec."Offer Price" := ROUND(EstPartRec."Calculated Cost Price" / (1 - EstPartRec."Margin %" / 100))
            ELSE
              EstPartRec."Offer Price" := ROUND(EstPartRec."Calculated Sales Price" / (1 - EstPartRec."Margin %" / 100));
          END;
          IF UpdateMarkup THEN BEGIN
            EstPartRec.VALIDATE("Markup %", NewPerc);
            //copy from OnValidate formfield Markup %":   //db, 17-03-15: C019456
            IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
              EstPartRec."Offer Price" :=
                ROUND(EstPartRec."Calculated Cost Price" + (EstPartRec."Calculated Cost Price" * EstPartRec."Markup %" / 100))
            ELSE
              EstPartRec."Offer Price" :=
                ROUND(EstPartRec."Calculated Sales Price" + (EstPartRec."Calculated Sales Price" * EstPartRec."Markup %" / 100));
          END;
          EstPartRec.VALIDATE("Offer Price");
          EstPartRec."Offer Amount" := EstPartRec."Offer Price" * EstPartRec.GetPartQuantity;
          EstPartRec.MODIFY;
        UNTIL EstPartRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE OfferfixedOnAfterValidate@19008780();
    BEGIN
      CheckOfferFixedUpwards(Rec);  //db, 27-07-10: M20060
      CheckOfferFixedUpwards1(Rec);  //db, 03-08-10: M22083

      IF (NOT "Offer fixed") AND (NOT EstFixed) THEN BEGIN
        MarginEditable := TRUE;
        OfferPriceEditable := TRUE;
      END;
      RefreshLine;  //db, 27-05-10 (show result function ProcessPartFields)
    END;

    PROCEDURE WarnForIllegalCode@1100409000(IEstimateNo@1100409000 : Code[20]);
    VAR
      EstPartRec@1100525001 : Record 11072073;
      FormatManagement@1100525000 : Codeunit 11012022;
    BEGIN
      EstPartRec.SETRANGE("Estimate No.", IEstimateNo);
      IF EstPartRec.FINDSET THEN BEGIN
        REPEAT
          IF FormatManagement.IsIllegalCode(EstPartRec.Part) THEN BEGIN
            MESSAGE(Text013);
            EXIT;
          END;
        UNTIL EstPartRec.NEXT = 0;
      END;
    END;

    PROCEDURE ResetSelection@1100525011();
    BEGIN
      Selection1 := FALSE;
      Selection2 := FALSE;
      TempEstPartRec1.RESET;
      TempEstPartRec2.RESET;
      TempEstPartRec1.DELETEALL;
      TempEstPartRec2.DELETEALL;
    END;

    PROCEDURE ProcessSelection@1100525013();
    VAR
      lvEstPartRec@1100525005 : Record 11072073;
      TempEstPartRec3@1100525004 : TEMPORARY Record 11072073;
      lvBaseAmount@1100525003 : Decimal;
      lvAddAmount@1100525002 : Decimal;
      lvPartQuan@1100525001 : Decimal;
      lvLines@1100525000 : Integer;
    BEGIN
      IF NOT Selection1 THEN
        ERROR(Text006);

      IF NOT Selection2 THEN
        ERROR(Text007);

      TempEstPartRec1.RESET;
      TempEstPartRec1.FINDFIRST;

      //Fill extra table
      TempEstPartRec2.RESET;
      TempEstPartRec2.SETFILTER(Level, '>%1', 0);
      TempEstPartRec2.SETRANGE("Offer fixed", FALSE);
      IF TempEstPartRec2.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          TempEstPartRec3 := TempEstPartRec2;
          TempEstPartRec3.INSERT;
        UNTIL TempEstPartRec2.NEXT = 0;
      END;

      //Select solely the 'ends' (deepest level)
      TempEstPartRec2.SETRANGE(Level, 1, 2);
      TempEstPartRec2.SETRANGE("Offer fixed", FALSE);
      TempEstPartRec2.RESET;
      IF TempEstPartRec2.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          TempEstPartRec3.RESET;
          TempEstPartRec3.SETRANGE(Chapter, TempEstPartRec2.Chapter);
          IF TempEstPartRec2.Level = 2 THEN
            TempEstPartRec3.SETRANGE(Paragraph, TempEstPartRec2.Part);
          TempEstPartRec3.SETFILTER(Level, '>%1', TempEstPartRec2.Level);
          IF TempEstPartRec3.FINDFIRST THEN BEGIN
            TempEstPartRec3.RESET;
            TempEstPartRec3 := TempEstPartRec2;
            IF TempEstPartRec3.FIND THEN
              TempEstPartRec3.DELETE;
          END;
        UNTIL TempEstPartRec2.NEXT = 0;
      END;

      //Determine new amounts
      lvBaseAmount := 0;
      TempEstPartRec3.RESET;
      lvLines := TempEstPartRec3.COUNT;
      IF TempEstPartRec3.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvBaseAmount += TempEstPartRec3."Offer Amount"
        UNTIL TempEstPartRec3.NEXT = 0;
      END;

      //Divide amount to selected 'ends'.
      lvAddAmount := TempEstPartRec1."Offer Amount";
      TempEstPartRec3.RESET;
      IF TempEstPartRec3.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvEstPartRec := TempEstPartRec3;
          lvEstPartRec.FIND;
          IF lvBaseAmount = 0 THEN
            TempEstPartRec3."Offer Amount" += lvAddAmount/lvLines
          ELSE
            TempEstPartRec3."Offer Amount" += TempEstPartRec3."Offer Amount"/lvBaseAmount * lvAddAmount;
          lvPartQuan := lvEstPartRec.GetPartQuantity();
          IF lvPartQuan = 0 THEN
            lvPartQuan := 1;
          lvEstPartRec.VALIDATE("Offer Price", ROUND(TempEstPartRec3."Offer Amount"/lvPartQuan));
          lvEstPartRec.MODIFY;
        UNTIL TempEstPartRec3.NEXT = 0;
        lvEstPartRec := TempEstPartRec1;
        lvEstPartRec.FIND;
        lvEstPartRec.VALIDATE("Offer Price", 0);
        lvEstPartRec.MODIFY;
      END;

      CurrPage.UPDATE;
      ResetSelection;
    END;

    PROCEDURE DistributeLine@1100525015();
    BEGIN
      IF Selection1 THEN
        ERROR(Text008);

      EstPartRec.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EstPartRec);
      IF EstPartRec.COUNT <> 1 THEN
        ERROR(Text004);

      IF EstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN
        IF Selection2 THEN BEGIN
          TempEstPartRec2.RESET;
          IF TempEstPartRec2.FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              IF (TempEstPartRec2.Level > EstPartRec.Level) THEN BEGIN
                CASE EstPartRec.Level OF
                  1: IF (TempEstPartRec2.Chapter = EstPartRec.Part) THEN
                     ERROR(Text005);
                  2: IF (TempEstPartRec2.Chapter = EstPartRec.Chapter) AND
                        (TempEstPartRec2.Paragraph = EstPartRec.Part) THEN
                     ERROR(Text005);
                END;
              END;
            UNTIL TempEstPartRec2.NEXT = 0;
          END
        END;
        TempEstPartRec1 := EstPartRec;
        TempEstPartRec1.OnTempTable := TRUE;
        TempEstPartRec1.INSERT;
      END;

      Selection1 := TRUE;
    END;

    PROCEDURE DistributeSelection@1100525016();
    BEGIN
      IF Selection2 THEN
        ERROR(Text009);

      EstPartRec.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(EstPartRec);
      IF EstPartRec.COUNT = 0 THEN BEGIN
        ERROR(Text002);
      END;

      IF EstPartRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF Selection1 THEN BEGIN
            TempEstPartRec1.RESET;
            IF TempEstPartRec1.FINDFIRST THEN BEGIN
              IF (TempEstPartRec1.Level < EstPartRec.Level) THEN BEGIN
                CASE TempEstPartRec1.Level OF
                  1: IF (TempEstPartRec1.Part = EstPartRec.Chapter) THEN
                       ERROR(Text005);
                  2: IF (TempEstPartRec1.Chapter = EstPartRec.Chapter) AND
                        (TempEstPartRec1.Part = EstPartRec.Paragraph) THEN
                     ERROR(Text005);
                END;
              END;
            END;
          END;
          TempEstPartRec2 := EstPartRec;
          TempEstPartRec2.OnTempTable := TRUE;
          TempEstPartRec2.INSERT;
        UNTIL EstPartRec.NEXT = 0;
      END;

      Selection2 := TRUE;
    END;

    PROCEDURE GetUnitPrice@1100409001();
    BEGIN
      //DP00686
      IF "Quantity per Unit" <> 0 THEN BEGIN
        CostPriceIndex := "Calculated Cost Amount"/"Quantity per Unit";
        SalesPriceIndex := "Calculated Sales Amount"/"Quantity per Unit";
        OfferPriceIndex := "Offer Amount"/"Quantity per Unit";
      END ELSE BEGIN
        CostPriceIndex := 0;
        SalesPriceIndex := 0;
        OfferPriceIndex := 0;
      END;
    END;

    PROCEDURE RefreshLine@1100409002();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE InitMargin@1100525008();
    VAR
      EstPartRec@1100525001 : Record 11072073;
    BEGIN
      //db, 26-05-15
      EstRec.GET("Estimate No.");

      EstPartRec.SETRANGE("Estimate No.", "Estimate No.");
      IF EstPartRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF EstPartRec."Offer fixed" = FALSE THEN BEGIN
            IF EstPartRec."Margin %" = 0 THEN
              EstPartRec.VALIDATE("Margin %", EstRec."Margin % (Offer Price)");
            IF EstPartRec."Markup %" = 0 THEN
              EstPartRec.VALIDATE("Markup %", EstRec."Markup % (Offer Price)");
            IF EstRec."Offer Price Based On" = EstRec."Offer Price Based On"::Cost THEN
              EstPartRec."Offer Price" := ROUND(EstPartRec."Calculated Cost Price" / (1 - EstPartRec."Margin %" / 100))
            ELSE
              EstPartRec."Offer Price" := ROUND(EstPartRec."Calculated Sales Price" / (1 - EstPartRec."Margin %" / 100));
            EstPartRec.VALIDATE("Offer Price");
            EstPartRec."Offer Amount" := EstPartRec."Offer Price" * EstPartRec.GetPartQuantity;
            EstPartRec.MODIFY;
          END;
        UNTIL EstPartRec.NEXT = 0;
      END;

      RefreshLine;
    END;

    BEGIN
    END.
  }
}

