OBJECT Page 12013595 Item Charge Assign. (EX Purch)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF400000;
  }
  PROPERTIES
  {
    CaptionML=ENU=Item Charge Assign. (ExFlow Purch);
    InsertAllowed=No;
    SourceTable=Table12013594;
    DataCaptionExpr=DataCaption;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    PageType=Worksheet;
    AutoSplitKey=Yes;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN
                 FILTERGROUP(2);
                 SETRANGE("Document Type",PurchLine2."Document Type");
                 SETRANGE("Inbound Document No.",PurchLine2."Inbound Document No.");
                 SETRANGE("Document Line No.",PurchLine2."Line No.");
                 SETRANGE("Item Charge No.",PurchLine2."No.");
                 FILTERGROUP(0);
               END;

    OnAfterGetRecord=BEGIN
                       UpdateQty;
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    OnDeleteRecord=BEGIN
                     IF "Document Type" = "Applies-to Doc. Type" THEN BEGIN
                       PurchLine2.TESTFIELD("Receipt No.",'');
                       PurchLine2.TESTFIELD("Return Shipment No.",'');
                     END;
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 2       ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions }
      { 20      ;2   ;Action    ;
                      CaptionML=ENU=Get &Receipt Lines;
                      OnAction=VAR
                                 ItemChargeAssgntPurch@1001 : Record 12013594;
                                 ReceiptLines@1002 : Page 12013601;
                               BEGIN
                                 ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
                                 ItemChargeAssgntPurch.SETRANGE("Inbound Document No.","Inbound Document No.");
                                 ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");

                                 ReceiptLines.SETTABLEVIEW(PurchRcptLine);
                                 IF ItemChargeAssgntPurch.FIND('+') THEN
                                   ReceiptLines.Initialize(ItemChargeAssgntPurch,PurchLine2."Unit Cost")
                                 ELSE
                                   ReceiptLines.Initialize(Rec,PurchLine2."Unit Cost");

                                 ReceiptLines.LOOKUPMODE(TRUE);
                                 ReceiptLines.RUNMODAL;
                               END;
                                }
      { 42      ;2   ;Action    ;
                      CaptionML=ENU=Get &Transfer Receipt Lines;
                      OnAction=VAR
                                 ItemChargeAssgntPurch@1001 : Record 12013594;
                                 PostedTransferReceiptLines@1002 : Page 12013602;
                               BEGIN
                                 ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
                                 ItemChargeAssgntPurch.SETRANGE("Inbound Document No.","Inbound Document No.");
                                 ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");

                                 PostedTransferReceiptLines.SETTABLEVIEW(TransferRcptLine);
                                 IF ItemChargeAssgntPurch.FIND('+') THEN
                                   PostedTransferReceiptLines.Initialize(ItemChargeAssgntPurch,PurchLine2."Unit Cost")
                                 ELSE
                                   PostedTransferReceiptLines.Initialize(Rec,PurchLine2."Unit Cost");

                                 PostedTransferReceiptLines.LOOKUPMODE(TRUE);
                                 PostedTransferReceiptLines.RUNMODAL;
                               END;
                                }
      { 5       ;2   ;Action    ;
                      CaptionML=ENU=Get Return &Shipment Lines;
                      OnAction=VAR
                                 ItemChargeAssgntPurch@1001 : Record 12013594;
                                 ShipmentLines@1002 : Page 12013603;
                               BEGIN
                                 ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
                                 ItemChargeAssgntPurch.SETRANGE("Inbound Document No.","Inbound Document No.");
                                 ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");

                                 ShipmentLines.SETTABLEVIEW(ReturnShptLine);
                                 IF ItemChargeAssgntPurch.FIND('+') THEN
                                   ShipmentLines.Initialize(ItemChargeAssgntPurch,PurchLine2."Unit Cost")
                                 ELSE
                                   ShipmentLines.Initialize(Rec,PurchLine2."Unit Cost");

                                 ShipmentLines.LOOKUPMODE(TRUE);
                                 ShipmentLines.RUNMODAL;
                               END;
                                }
      { 43      ;2   ;Action    ;
                      CaptionML=ENU=Get S&ales Shipment Lines;
                      OnAction=VAR
                                 ItemChargeAssgntPurch@1001 : Record 12013594;
                                 SalesShipmentLines@1000 : Page 12013604;
                               BEGIN
                                 ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
                                 ItemChargeAssgntPurch.SETRANGE("Inbound Document No.","Inbound Document No.");
                                 ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");

                                 SalesShipmentLines.SETTABLEVIEW(SalesShptLine);
                                 IF ItemChargeAssgntPurch.FIND('+') THEN
                                   SalesShipmentLines.InitializePurchase(ItemChargeAssgntPurch,PurchLine2."Unit Cost")
                                 ELSE
                                   SalesShipmentLines.InitializePurchase(Rec,PurchLine2."Unit Cost");

                                 SalesShipmentLines.LOOKUPMODE(TRUE);
                                 SalesShipmentLines.RUNMODAL;
                               END;
                                }
      { 44      ;2   ;Action    ;
                      CaptionML=ENU=Get Ret&urn Receipt Lines;
                      OnAction=VAR
                                 ItemChargeAssgntPurch@1000 : Record 12013594;
                                 ReturnRcptLines@1001 : Page 12013612;
                               BEGIN
                                 ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
                                 ItemChargeAssgntPurch.SETRANGE("Inbound Document No.","Inbound Document No.");
                                 ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");

                                 ReturnRcptLines.SETTABLEVIEW(ReturnRcptLine);
                                 IF ItemChargeAssgntPurch.FIND('+') THEN
                                   ReturnRcptLines.InitializePurchase(ItemChargeAssgntPurch,PurchLine2."Unit Cost")
                                 ELSE
                                   ReturnRcptLines.InitializePurchase(Rec,PurchLine2."Unit Cost");

                                 ReturnRcptLines.LOOKUPMODE(TRUE);
                                 ReturnRcptLines.RUNMODAL;
                               END;
                                }
      { 41      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Suggest &Item Charge Assignment;
                      OnAction=VAR
                                 AssignItemChargePurch@1001 : Codeunit 12013597;
                               BEGIN
                                 AssignItemChargePurch.SuggestAssgnt(PurchLine2,AssignableQty);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                SourceExpr="Applies-to Doc. Type";
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Applies-to Doc. No.";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Applies-to Doc. Line No.";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr="Item No.";
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                SourceExpr=Description }

    { 16  ;2   ;Field     ;
                SourceExpr="Qty. to Assign";
                OnValidate=BEGIN
                             IF PurchLine2.Quantity * "Qty. to Assign" < 0 THEN
                               ERROR(Text000,
                                 FIELDCAPTION("Qty. to Assign"),PurchLine2.FIELDCAPTION(Quantity));
                               QtytoAssignOnAfterValidate;
                           END;
                            }

    { 14  ;2   ;Field     ;
                SourceExpr="Qty. Assigned" }

    { 18  ;2   ;Field     ;
                SourceExpr="Amount to Assign";
                Editable=FALSE }

    { 33  ;2   ;Field     ;
                CaptionML=ENU=Qty. to Receive (Base);
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=QtyToReceiveBase;
                Editable=FALSE }

    { 35  ;2   ;Field     ;
                CaptionML=ENU=Qty. Received (Base);
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=QtyReceivedBase;
                Editable=FALSE }

    { 37  ;2   ;Field     ;
                CaptionML=ENU=Qty. to Ship (Base);
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=QtyToShipBase;
                Editable=FALSE }

    { 39  ;2   ;Field     ;
                CaptionML=ENU=Qty. Shipped (Base);
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=QtyShippedBase;
                Editable=FALSE }

    { 22  ;1   ;Group      }

    { 1900669001;2;Group  ;
                GroupType=FixedLayout }

    { 1901652601;3;Group  ;
                CaptionML=ENU=Assignable }

    { 23  ;4   ;Field     ;
                CaptionML=ENU=Total (Qty.);
                DecimalPlaces=0:5;
                SourceExpr=AssignableQty;
                Editable=FALSE }

    { 30  ;4   ;Field     ;
                CaptionML=ENU=Total (Amount);
                DecimalPlaces=0:5;
                SourceExpr=AssgntAmount;
                Editable=FALSE }

    { 1900545401;3;Group  ;
                CaptionML=ENU=To Assign }

    { 25  ;4   ;Field     ;
                CaptionML=ENU=Qty. to Assign;
                DecimalPlaces=0:5;
                SourceExpr=TotalQtyToAssign;
                Editable=FALSE }

    { 31  ;4   ;Field     ;
                CaptionML=ENU=Amount to Assign;
                DecimalPlaces=0:5;
                SourceExpr=TotalAmountToAssign;
                Editable=FALSE }

    { 1900295801;3;Group  ;
                CaptionML=ENU=Rem. to Assign }

    { 27  ;4   ;Field     ;
                CaptionML=ENU=Rem. Qty. to Assign;
                DecimalPlaces=0:5;
                SourceExpr=RemQtyToAssign;
                Editable=FALSE }

    { 32  ;4   ;Field     ;
                CaptionML=ENU=Rem. Amount to Assign;
                DecimalPlaces=0:5;
                SourceExpr=RemAmountToAssign;
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The sign of %1 must be the same as the sign of %2 of the item charge.';
      PurchLine@1001 : Record 12013588;
      PurchLine2@1002 : Record 12013588;
      PurchRcptLine@1003 : Record 121;
      ReturnShptLine@1004 : Record 6651;
      TransferRcptLine@1019 : Record 5747;
      SalesShptLine@1017 : Record 111;
      ReturnRcptLine@1018 : Record 6661;
      AssignableQty@1005 : Decimal;
      TotalQtyToAssign@1006 : Decimal;
      RemQtyToAssign@1007 : Decimal;
      AssgntAmount@1008 : Decimal;
      TotalAmountToAssign@1009 : Decimal;
      RemAmountToAssign@1010 : Decimal;
      QtyToReceiveBase@1011 : Decimal;
      QtyReceivedBase@1012 : Decimal;
      QtyToShipBase@1013 : Decimal;
      QtyShippedBase@1014 : Decimal;
      UnitCost@1015 : Decimal;
      DataCaption@1016 : Text[250];

    PROCEDURE UpdateQtyAssgnt@2();
    VAR
      ItemChargeAssgntPurch@1000 : Record 12013594;
    BEGIN
      PurchLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");
      AssignableQty := PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced" -
        PurchLine2."Qty. Assigned";
      AssgntAmount := AssignableQty * UnitCost;

      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETCURRENTKEY("Document Type","Inbound Document No.","Document Line No.");
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Inbound Document No.","Inbound Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");
      ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign","Amount to Assign");
      TotalQtyToAssign := ItemChargeAssgntPurch."Qty. to Assign";
      TotalAmountToAssign := ItemChargeAssgntPurch."Amount to Assign";

      RemQtyToAssign := AssignableQty - TotalQtyToAssign;
      RemAmountToAssign := AssgntAmount - TotalAmountToAssign;
    END;

    LOCAL PROCEDURE UpdateQty@1();
    VAR
      TempNo@1100285000 : Integer;
    BEGIN
      CASE "Applies-to Doc. Type" OF
        "Applies-to Doc. Type"::Order,"Applies-to Doc. Type"::Invoice:
          BEGIN
            IF NOT EVALUATE(TempNo, "Applies-to Doc. No.") THEN
              EXIT;
            PurchLine.SETRANGE("Inbound Document No.", TempNo);
            PurchLine.SETRANGE("Line No.", "Applies-to Doc. Line No.");
            PurchLine.FINDFIRST;

            QtyToReceiveBase := PurchLine."Qty. to Receive (Base)";
            QtyReceivedBase := PurchLine."Qty. Received (Base)";
            QtyToShipBase := 0;
            QtyShippedBase := 0;
          END;
        "Applies-to Doc. Type"::"Return Order","Applies-to Doc. Type"::"Credit Memo":
          BEGIN
            IF NOT EVALUATE(TempNo, "Applies-to Doc. No.") THEN
              EXIT;
            PurchLine.SETRANGE("Inbound Document No.", TempNo);
            PurchLine.SETRANGE("Line No.", "Applies-to Doc. Line No.");
            PurchLine.FINDFIRST;

            QtyToReceiveBase := 0;
            QtyReceivedBase := 0;
            QtyToShipBase := PurchLine."Return Qty. to Ship (Base)";
            QtyShippedBase := PurchLine."Return Qty. Shipped (Base)";
          END;
        "Applies-to Doc. Type"::Receipt:
          BEGIN
            PurchRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToReceiveBase := 0;
            QtyReceivedBase := PurchRcptLine."Quantity (Base)";
            QtyToShipBase := 0;
            QtyShippedBase := 0;
          END;
        "Applies-to Doc. Type"::"Return Shipment":
          BEGIN
            ReturnShptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToReceiveBase := 0;
            QtyReceivedBase := 0;
            QtyToShipBase := 0;
            QtyShippedBase := ReturnShptLine."Quantity (Base)";
          END;
        "Applies-to Doc. Type"::"Transfer Receipt":
          BEGIN
            TransferRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToReceiveBase := 0;
            QtyReceivedBase := TransferRcptLine.Quantity;
            QtyToShipBase := 0;
            QtyShippedBase := 0;
          END;
        "Applies-to Doc. Type"::"Sales Shipment":
          BEGIN
            SalesShptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToReceiveBase := 0;
            QtyReceivedBase := 0;
            QtyToShipBase := 0;
            QtyShippedBase := SalesShptLine."Quantity (Base)";
          END;
        "Applies-to Doc. Type"::"Return Receipt":
          BEGIN
            ReturnRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToReceiveBase := 0;
            QtyReceivedBase := ReturnRcptLine."Quantity (Base)";
            QtyToShipBase := 0;
            QtyShippedBase := 0;
          END;
      END;
    END;

    PROCEDURE Initialize@3(NewPurchLine@1000 : Record 12013588;NewUnitCost@1001 : Decimal);
    BEGIN
      PurchLine2 := NewPurchLine;
      DataCaption := PurchLine2."No." + ' ' + PurchLine2.Description;
      UnitCost := NewUnitCost;
    END;

    LOCAL PROCEDURE QtytoAssignOnAfterValidate@19000177();
    BEGIN
      CurrPage.UPDATE(TRUE);
      UpdateQtyAssgnt;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      UpdateQtyAssgnt;
    END;

    BEGIN
    END.
  }
}

