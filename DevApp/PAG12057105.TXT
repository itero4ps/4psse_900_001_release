OBJECT Page 12057105 ExFlow Posted DocHead. PDF Web
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF400005;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=PDF Preview;
    SourceTable=Table12013626;
    PageType=CardPart;
    ShowFilter=No;
    OnInit=BEGIN
             ExAppSetup.GET;
             TempFilePath := ExFlowFileMgt.Path(ExFlowFileMgt.ServerTempFileName('',''));
             CurrentlyLoadingPDF := FALSE;
           END;

    OnAfterGetRecord=BEGIN
                       IF CurrentlyLoadingPDF THEN
                         RecordChangedWhenLoading := TRUE
                       ELSE
                         PutPDF;
                     END;

  }
  CONTROLS
  {
    { 1100285000;0;Container;
                CaptionML=ENU=PDF;
                ContainerType=ContentArea }

    { 1100285002;1;Field  ;
                Name=PdfControl;
                ControlAddIn=[SignUpPdfControl;PublicKeyToken=436e8aeec51b873c] }

  }
  CODE
  {
    VAR
      ExAppSetup@1100285000 : Record 12013601;
      ExFlowFileMgt@1100285004 : Codeunit 12013602;
      ExFFileURL@1100285003 : Text;
      TempFilePath@1100285001 : Text;
      TmpID@1100285002 : Integer;
      PDFAddInReady@1100285005 : Boolean;
      RecordChangedWhenLoading@1100285007 : Boolean;
      CurrentlyLoadingPDF@1100285006 : Boolean;
      CloseDoc@1100285008 : TextConst 'ENU=!CLOSEDOC!';

    LOCAL PROCEDURE PutPDF@1100285001();
    VAR
      TempExFFileURL@1100285000 : Text;
    BEGIN
      IF PDFAddInReady AND NOT CurrentlyLoadingPDF THEN BEGIN
        TempExFFileURL := ConvertPdfToBase64;
        IF TempExFFileURL <> '' THEN BEGIN
          CurrentlyLoadingPDF := TRUE;
          CurrPage.PdfControl.PutPdf(TempExFFileURL);
          CurrentlyLoadingPDF := FALSE;
        END;
      END;
    END;

    LOCAL PROCEDURE ConvertPdfToBase64@1100285000() EncodedPdf : Text;
    VAR
      TempFile@1100285005 : File;
      TempFileName@1100285001 : Text;
      InStr@1100285004 : InStream;
      Convert@1100285003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemStream@1100285002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      IF ID = 0 THEN
        EXIT;

      IF TmpID <> ID THEN BEGIN
        ExFFileURL := '';
        IF (ExAppSetup."Path to Used Invoices" <> '') AND ("Image Name" <> '') THEN BEGIN
          TempFileName := 'P_' + ExFlowFileMgt.GetFileName("Image Name");

          IF NOT ExFlowFileMgt.FileExist(TempFilePath,TempFileName) THEN
            ExFlowFileMgt.Copy("Image Name",TempFileName,ExAppSetup."Path to Used Invoices",TempFilePath,ExAppSetup."Path to Used Invoices");

          IF TempFileName <> '' THEN
            ExFFileURL := TempFilePath + TempFileName;
        END;

        TmpID := ID;

        IF (STRPOS(UPPERCASE(ExFFileURL),'PDF') = 0) AND
           (STRPOS(UPPERCASE(ExFFileURL),'htm') = 0) AND
           (STRPOS(UPPERCASE(ExFFileURL),'html') = 0) THEN
          ExFFileURL := '';
      END;

      IF ExFFileURL <> '' THEN BEGIN
        TempFile.OPEN(ExFFileURL);
        TempFile.CREATEINSTREAM(InStr);

        MemStream := MemStream.MemoryStream;
        COPYSTREAM(MemStream,InStr);

        EncodedPdf := Convert.ToBase64String(MemStream.ToArray);

        TempFile.CLOSE;
      END
      ELSE
        EncodedPdf := CloseDoc;
    END;

    EVENT PdfControl@-1100285002::AddInReady@1();
    BEGIN
      IF NOT PDFAddInReady THEN BEGIN
        PDFAddInReady := TRUE;
        PutPDF;
      END;
    END;

    EVENT PdfControl@-1100285002::UpdatePdf@2();
    BEGIN
      CurrentlyLoadingPDF := FALSE;
      IF RecordChangedWhenLoading THEN BEGIN
        RecordChangedWhenLoading := FALSE;
        PutPDF;
      END;
    END;

    BEGIN
    END.
  }
}

