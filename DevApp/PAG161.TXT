OBJECT Page 161 Purchase Statistics
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.44974,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Purchase Statistics;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table38;
    PageType=ListPlus;
    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 PurchSetup.GET;
                 AllowInvDisc :=
                   NOT (PurchSetup."Calc. Inv. Discount" AND VendInvDiscRecExists("Invoice Disc. Code"));
                 AllowVATDifference :=
                   PurchSetup."Allow VAT Difference" AND
                   NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
                 CurrPage.EDITABLE := AllowVATDifference OR AllowInvDisc;
                 SetVATSpecification;
               END;

    OnAfterGetRecord=VAR
                       PurchLine@1000 : Record 39;
                       TempPurchLine@1001 : TEMPORARY Record 39;
                     BEGIN
                       CurrPage.CAPTION(STRSUBSTNO(Text000,"Document Type"));
                       IF PrevNo = "No." THEN BEGIN
                         GetVATSpecification;
                         EXIT;
                       END;
                       PrevNo := "No.";
                       FILTERGROUP(2);
                       SETRANGE("No.",PrevNo);
                       FILTERGROUP(0);
                       CLEAR(PurchLine);
                       CLEAR(TotalPurchLine);
                       CLEAR(TotalPurchLineLCY);
                       CLEAR(PurchPost);

                       PurchPost.GetPurchLines(Rec,TempPurchLine,0);
                       CLEAR(PurchPost);
                       PurchPost.SumPurchLinesTemp(
                         Rec,TempPurchLine,0,TotalPurchLine,TotalPurchLineLCY,VATAmount,VATAmountText);

                       IF "Prices Including VAT" THEN BEGIN
                         TotalAmount2 := TotalPurchLine.Amount;
                         TotalAmount1 := TotalAmount2 + VATAmount;
                         TotalPurchLine."Line Amount" := TotalAmount1 + TotalPurchLine."Inv. Discount Amount";
                       END ELSE BEGIN
                         TotalAmount1 := TotalPurchLine.Amount;
                         TotalAmount2 := TotalPurchLine."Amount Including VAT";
                       END;

                       IF Vend.GET("Pay-to Vendor No.") THEN
                         Vend.CALCFIELDS("Balance (LCY)")
                       ELSE
                         CLEAR(Vend);

                       PurchLine.CalcVATAmountLines(0,Rec,TempPurchLine,TempVATAmountLine);
                       TempVATAmountLine.MODIFYALL(Modified,FALSE);
                       SetVATSpecification;
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    OnQueryClosePage=BEGIN
                       GetVATSpecification;
                       IF TempVATAmountLine.GetAnyLineModified THEN
                         UpdateVATOnPurchLines;
                       EXIT(TRUE);
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 97  ;2   ;Field     ;
                Name=Amount;
                CaptionML=ENU=Amount;
                SourceExpr=TotalPurchLine."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                Importance=Promoted;
                Editable=FALSE }

    { 93  ;2   ;Field     ;
                Name=InvDiscountAmount;
                CaptionML=ENU=Inv. Discount Amount;
                SourceExpr=TotalPurchLine."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                OnValidate=BEGIN
                             UpdateInvDiscAmount;
                           END;
                            }

    { 80  ;2   ;Field     ;
                CaptionML=ENU=Total;
                SourceExpr=TotalAmount1;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                Importance=Promoted;
                OnValidate=BEGIN
                             UpdateTotalAmount;
                           END;
                            }

    { 75  ;2   ;Field     ;
                CaptionML=ENU=VAT Amount;
                SourceExpr=VATAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText);
                Editable=FALSE }

    { 76  ;2   ;Field     ;
                CaptionML=ENU=Total Incl. VAT;
                SourceExpr=TotalAmount2;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,TRUE);
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                CaptionML=ENU=Purchase (LCY);
                SourceExpr=TotalPurchLineLCY.Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 95  ;2   ;Field     ;
                Name=Quantity;
                CaptionML=ENU=Quantity;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine.Quantity;
                Editable=FALSE }

    { 73  ;2   ;Field     ;
                CaptionML=ENU=Parcels;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine."Units per Parcel";
                Editable=FALSE }

    { 91  ;2   ;Field     ;
                CaptionML=ENU=Net Weight;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine."Net Weight";
                Editable=FALSE }

    { 82  ;2   ;Field     ;
                CaptionML=ENU=Gross Weight;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine."Gross Weight";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                CaptionML=ENU=Volume;
                DecimalPlaces=0:5;
                SourceExpr=TotalPurchLine."Unit Volume";
                Editable=FALSE }

    { 5   ;1   ;Part      ;
                Name=SubForm;
                PagePartID=Page576 }

    { 1901061301;1;Group  ;
                CaptionML=ENU=Vendor }

    { 67  ;2   ;Field     ;
                CaptionML=ENU=Balance (LCY);
                SourceExpr=Vend."Balance (LCY)";
                AutoFormatType=1;
                Importance=Promoted;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Purchase %1 Statistics';
      Text001@1001 : TextConst 'ENU=Amount';
      Text002@1002 : TextConst 'ENU=Total';
      Text003@1003 : TextConst 'ENU=%1 must not be 0.';
      Text004@1004 : TextConst 'ENU=%1 must not be greater than %2.';
      Text005@1005 : TextConst 'ENU=You cannot change the invoice discount because a vendor invoice discount with the code %1 exists.';
      TotalPurchLine@1006 : Record 39;
      TotalPurchLineLCY@1007 : Record 39;
      Vend@1008 : Record 23;
      TempVATAmountLine@1009 : TEMPORARY Record 290;
      PurchSetup@1010 : Record 312;
      PurchPost@1011 : Codeunit 90;
      TotalAmount1@1012 : Decimal;
      TotalAmount2@1013 : Decimal;
      VATAmount@1014 : Decimal;
      VATAmountText@1015 : Text[30];
      PrevNo@1016 : Code[20];
      AllowInvDisc@1017 : Boolean;
      AllowVATDifference@1018 : Boolean;
      DPA_IsHardFilter@1100000999 : Boolean;

    LOCAL PROCEDURE UpdateHeaderInfo@5();
    VAR
      CurrExchRate@1000 : Record 330;
      UseDate@1001 : Date;
    BEGIN
      TotalPurchLine."Inv. Discount Amount" := TempVATAmountLine.GetTotalInvDiscAmount;
      TotalAmount1 :=
        TotalPurchLine."Line Amount" - TotalPurchLine."Inv. Discount Amount";
      VATAmount := TempVATAmountLine.GetTotalVATAmount;
      IF "Prices Including VAT" THEN BEGIN
        TotalAmount1 := TempVATAmountLine.GetTotalAmountInclVAT;
        TotalAmount2 := TotalAmount1 - VATAmount;
        TotalPurchLine."Line Amount" := TotalAmount1 + TotalPurchLine."Inv. Discount Amount";
      END ELSE
        TotalAmount2 := TotalAmount1 + VATAmount;

      IF "Prices Including VAT" THEN
        TotalPurchLineLCY.Amount := TotalAmount2
      ELSE
        TotalPurchLineLCY.Amount := TotalAmount1;
      IF "Currency Code" <> '' THEN BEGIN
        IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
           ("Posting Date" = 0D)
        THEN
          UseDate := WORKDATE
        ELSE
          UseDate := "Posting Date";

        TotalPurchLineLCY.Amount :=
          CurrExchRate.ExchangeAmtFCYToLCY(
      //    UseDate,"Currency Code",TotalPurchLineLCY.Amount,"Currency Factor"); //**4PS.o
            0, '', UseDate,"Currency Code",TotalPurchLineLCY.Amount,"Currency Factor",FALSE); //**4PS.n

      END;
    END;

    LOCAL PROCEDURE GetVATSpecification@21();
    BEGIN
      CurrPage.SubForm.PAGE.GetTempVATAmountLine(TempVATAmountLine);
      IF TempVATAmountLine.GetAnyLineModified THEN
        UpdateHeaderInfo;
    END;

    LOCAL PROCEDURE SetVATSpecification@11();
    BEGIN
      CurrPage.SubForm.PAGE.SetTempVATAmountLine(TempVATAmountLine);
      CurrPage.SubForm.PAGE.InitGlobals(
        "Currency Code",AllowVATDifference,AllowVATDifference,
        "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
    END;

    LOCAL PROCEDURE UpdateTotalAmount@16();
    VAR
      SaveTotalAmount@1000 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      IF "Prices Including VAT" THEN BEGIN
        SaveTotalAmount := TotalAmount1;
        UpdateInvDiscAmount;
        TotalAmount1 := SaveTotalAmount;
      END;

      WITH TotalPurchLine DO
        "Inv. Discount Amount" := "Line Amount" - TotalAmount1;
      UpdateInvDiscAmount;
    END;

    LOCAL PROCEDURE UpdateInvDiscAmount@3();
    VAR
      InvDiscBaseAmount@1000 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      InvDiscBaseAmount := TempVATAmountLine.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");
      IF InvDiscBaseAmount = 0 THEN
        ERROR(Text003,TempVATAmountLine.FIELDCAPTION("Inv. Disc. Base Amount"));

      IF TotalPurchLine."Inv. Discount Amount" / InvDiscBaseAmount > 1 THEN
        ERROR(
          Text004,
          TotalPurchLine.FIELDCAPTION("Inv. Discount Amount"),
          TempVATAmountLine.FIELDCAPTION("Inv. Disc. Base Amount"));

      TempVATAmountLine.SetInvoiceDiscountAmount(
        TotalPurchLine."Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
      CurrPage.SubForm.PAGE.SetTempVATAmountLine(TempVATAmountLine);
      UpdateHeaderInfo;

      "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
      "Invoice Discount Value" := TotalPurchLine."Inv. Discount Amount";
      MODIFY;
      UpdateVATOnPurchLines;
    END;

    LOCAL PROCEDURE GetCaptionClass@2(FieldCaption@1000 : Text[100];ReverseCaption@1001 : Boolean) : Text[80];
    BEGIN
      IF "Prices Including VAT" XOR ReverseCaption THEN
        EXIT('2,1,' + FieldCaption);

      EXIT('2,0,' + FieldCaption);
    END;

    LOCAL PROCEDURE UpdateVATOnPurchLines@1();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      GetVATSpecification;
      IF TempVATAmountLine.GetAnyLineModified THEN BEGIN
        PurchLine.UpdateVATOnLines(0,Rec,PurchLine,TempVATAmountLine);
        PurchLine.UpdateVATOnLines(1,Rec,PurchLine,TempVATAmountLine);
      END;
      PrevNo := '';
    END;

    LOCAL PROCEDURE VendInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      VendInvDisc@1001 : Record 24;
    BEGIN
      VendInvDisc.SETRANGE(Code,InvDiscCode);
      EXIT(VendInvDisc.FINDFIRST);
    END;

    LOCAL PROCEDURE CheckAllowInvDisc@8();
    BEGIN
      IF NOT AllowInvDisc THEN
        ERROR(Text005,"Invoice Disc. Code");
    END;

    BEGIN
    END.
  }
}

