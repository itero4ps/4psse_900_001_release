OBJECT Page 6085593 Document Capture Client Addin
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.4.05;
  }
  PROPERTIES
  {
    CaptionML=ENU=Document Capture Client Addin;
    LinksAllowed=No;
    SourceTable=Table6085590;
    SourceTableView=WHERE(File Type=CONST(OCR));
    PageType=List;
    OnOpenPage=BEGIN
                 IF GetContiniaUserProp AND (ContiniaUserProp."Image Zoom" > 0) THEN
                   CurrZoom := ContiniaUserProp."Image Zoom"
                 ELSE
                   CurrZoom := 50;

                 Setup.GET;
                 ShowCaptureUI := TRUE;
               END;

    OnAfterGetRecord=BEGIN
                       IF ("No." <> xRec."No.") OR ("Template No." <> xRec."Template No.") THEN BEGIN
                         IF (HeaderFieldsFormName <> '') OR (LineFieldsFormName <> '') THEN BEGIN
                           CaptureAddinLib.BuildNotifierConfig(HeaderFieldsFormName,LineFieldsFormName,CaptureXmlDoc);
                           IF (LineFieldsFormName <> '') THEN
                             CaptureAddinLib.BuildLineFieldOrderCommand("Template No.",CaptureXmlDoc);
                         END;
                         UpdateImage;
                         CaptureAddinLib.BuildCaptureEnabledCommand((Status = Status::Open) AND (NOT DisableCapture),CaptureXmlDoc);
                         SendCommand(CaptureXmlDoc);
                       END ELSE IF (SendAllPendingCommands AND (NOT ISNULL(CaptureXmlDoc))) THEN BEGIN
                         SendAllPendingCommands := FALSE;
                         CaptureAddinLib.BuildCaptureEnabledCommand((Status = Status::Open) AND (NOT DisableCapture),CaptureXmlDoc);
                         SendCommand(CaptureXmlDoc);
                       END;
                       CLEAR(CaptureXmlDoc);
                     END;

  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Field  ;
                Name=CaptureUI;
                SourceExpr=CaptureUISource;
                Visible=SHOWCAPTUREUI;
                ControlAddIn=[Akeyto.DocumentCapture.Dynamics.Nav.UI;PublicKeyToken=44fe4ac2c6480df6];
                OnControlAddIn=VAR
                                 InXmlDoc@1161054001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
                                 XmlLib@1161054000 : Codeunit 6085573;
                               BEGIN
                                 CLEAR(CaptureXmlDoc);
                                 IF Index = 0 THEN
                                   HandleSimpleCommand(Data)
                                 ELSE BEGIN
                                   CaptureAddinLib.TextToXml(InXmlDoc,Data);
                                   HandleXmlCommand(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Command'),InXmlDoc);
                                 END;
                               END;
                                }

  }
  CODE
  {
    VAR
      Setup@1000000019 : Record 6085573;
      ContiniaUserProp@6085573 : Record 6085780;
      CaptureMgt@1000000014 : Codeunit 6085576;
      CaptureAddinLib@1000000013 : Codeunit 6085660;
      CaptureXmlDoc@1000000010 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      CaptureUISource@1000000000 : Text;
      Channel@1000000011 : Code[50];
      CurrentPageText@1000000005 : Text[250];
      CurrentZoomText@1000000009 : Text[30];
      HeaderFieldsFormName@1000000008 : Text[50];
      LineFieldsFormName@1000000003 : Text[50];
      MatchQty@1000000007 : Decimal;
      CurrZoom@1000000004 : Decimal;
      CurrentPageNo@1000000006 : Integer;
      Text001@1000000002 : TextConst 'ENU=(%1 pages in total)';
      Text002@1000000001 : TextConst 'ENU=Page %1';
      SendAllPendingCommands@1000000012 : Boolean;
      Text003@1000000015 : TextConst 'ENU=2000000000';
      DisableCapture@1000000018 : Boolean;
      ShowCaptureUI@1000000021 : Boolean INDATASET;

    PROCEDURE UpdateImage@1000000006();
    VAR
      ThreeTierAut@1000000002 : Codeunit 419;
    BEGIN
      IF ("No." = '') THEN BEGIN
        CaptureAddinLib.BuildClearImageCommand(CaptureXmlDoc);
        UpdateCurrPageNo(0);
        EXIT;
      END;

      CaptureAddinLib.BuildSetImageCommand(GetTIFFileName,TRUE,CaptureXmlDoc);

      UpdateCurrPageNo(1);

      CaptureAddinLib.BuildScrollTopCommand(CaptureXmlDoc);

      Zoom(CurrZoom,FALSE);

      CaptureAddinLib.BuildTotalNoOfPagesTextCommand(STRSUBSTNO(Text001,"No. of Pages"),CaptureXmlDoc);

      CaptureAddinLib.BuildAddDocumentField(Text003,CaptureXmlDoc);
    END;

    PROCEDURE UpdateCurrPageNo@1000000003(PageNo@1000000000 : Integer);
    BEGIN
      CALCFIELDS("No. of Pages");
      CurrentPageNo := PageNo;
      CurrentPageText := STRSUBSTNO(Text002,CurrentPageNo);

      CaptureAddinLib.BuildSetActivePageCommand(PageNo,CurrentPageText,CaptureXmlDoc);
      RedrawValues;
    END;

    PROCEDURE ParsePageText@1000000001(PageText@1000000000 : Text[30]);
    VAR
      NewPageNo@1000000001 : Integer;
    BEGIN
      IF STRPOS(PageText,' ') = 0 THEN BEGIN
        IF EVALUATE(NewPageNo,PageText) THEN;
      END ELSE
        IF EVALUATE(NewPageNo,COPYSTR(PageText,STRPOS(PageText,' '))) THEN;

      CALCFIELDS("No. of Pages");
      IF (NewPageNo <= 0) OR (NewPageNo > "No. of Pages") THEN
        UpdateCurrPageNo(CurrentPageNo)
      ELSE
        UpdateCurrPageNo(NewPageNo);
    END;

    PROCEDURE Zoom@1000000000(ZoomPct@1000000000 : Decimal;UpdateUserProp@1160040000 : Boolean);
    BEGIN
      IF ZoomPct < 1 THEN
        ZoomPct := 1;
      CurrZoom := ZoomPct;
      CurrentZoomText := FORMAT(CurrZoom) + '%';

      IF UpdateUserProp THEN BEGIN
        IF NOT GetContiniaUserProp THEN BEGIN
          ContiniaUserProp."User ID" := USERID;
          ContiniaUserProp."Image Zoom" := CurrZoom;
          ContiniaUserProp.INSERT;
        END ELSE BEGIN
          IF ContiniaUserProp."Image Zoom" <> CurrZoom THEN BEGIN
            ContiniaUserProp."Image Zoom" := CurrZoom;
            ContiniaUserProp.MODIFY;
          END;
        END;
      END;

      CaptureAddinLib.BuildZoomCommand(CurrZoom,CaptureXmlDoc);
      CaptureAddinLib.BuildZoomTextCommand(CurrentZoomText,CaptureXmlDoc);
    END;

    PROCEDURE RedrawValues@1000000009();
    VAR
      Value@1000000000 : Record 6085593;
      Field@1160040000 : Record 6085580;
      DocPage@1160040001 : Record 6085591;
      CaptureEngine@1160040003 : Codeunit 6085575;
      LeftPos@1160040002 : Integer;
    BEGIN
      CaptureAddinLib.BuildRemoveAllFieldsCommand(CaptureXmlDoc);
      Value.SETRANGE("Document No.","No.");
      Value.SETRANGE("Page No.",CurrentPageNo);
      IF Value.FINDSET THEN
        REPEAT
          IF (Value.Right - Value.Left > 0) AND (Value.Bottom - Value.Top > 0) THEN BEGIN
            IF Value."Is Value" THEN BEGIN
              IF Value.Type = Value.Type::Header THEN
                CaptureAddinLib.BuildDrawFieldCommand(Value.Code,TRUE,Value.Top,Value.Left,Value.Bottom,Value.Right,CaptureXmlDoc)
              ELSE
                CaptureAddinLib.BuildDrawFieldCommand(
                  Value.Code + FORMAT(Value."Line No."),TRUE,Value.Top,Value.Left,Value.Bottom,Value.Right,CaptureXmlDoc);
            END ELSE
              IF Value.Type = Value.Type::Line THEN BEGIN
                Field.GET(Value."Template No.",Value.Type,Value.Code);
                DocPage.GET(Value."Document No.",Value."Page No.");
                LeftPos := Value.Left +
                  ROUND(Field."Caption Offset X" * CaptureEngine.GetDPIFactor(Field."Offset DPI",DocPage."TIFF Image Resolution"),1);

                CaptureAddinLib.BuildDrawFieldCommand(
                  Value.Code + FORMAT(Value."Line No."),
                  FALSE,
                  Value.Top,
                  LeftPos,
                  Value.Bottom,
                  LeftPos + ROUND(Field."Typical Field Width" * CaptureEngine.GetDPIFactor(150,DocPage."TIFF Image Resolution"),1),
                  CaptureXmlDoc);
              END ELSE
                CaptureAddinLib.BuildDrawFieldCommand(Value.Code,FALSE,Value.Top,Value.Left,Value.Bottom,Value.Right,CaptureXmlDoc);
          END;
        UNTIL Value.NEXT = 0;
    END;

    PROCEDURE SendCommand@1000000002(VAR XmlDoc@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      NewXmlDoc@161024012 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CaptureAddinLib.XmlToText(XmlDoc,CaptureUISource);

      CaptureAddinLib.TextToXml(NewXmlDoc,CaptureUISource);
    END;

    PROCEDURE SetConfig@1000000004(NewHeaderFieldsFormName@1000000001 : Text[50];NewLineFieldsFormName@1000000000 : Text[50];NewChannel@1000000002 : Code[50]);
    BEGIN
      HeaderFieldsFormName := NewHeaderFieldsFormName;
      LineFieldsFormName := NewLineFieldsFormName;
      Channel := NewChannel;
    END;

    PROCEDURE HandleSimpleCommand@1000000011(Command@1000000000 : Text[1024]);
    BEGIN
      CASE Command OF
        'ZoomIn':
          Zoom(CurrZoom + 5,TRUE);

        'ZoomOut':
          Zoom(CurrZoom - 5,TRUE);

        'FirstPage':
          BEGIN
            CALCFIELDS("No. of Pages");
            IF "No. of Pages" > 0 THEN
              UpdateCurrPageNo(1);
          END;

        'NextPage':
          BEGIN
            CALCFIELDS("No. of Pages");
            IF CurrentPageNo < "No. of Pages" THEN
              UpdateCurrPageNo(CurrentPageNo + 1);
          END;

        'PrevPage':
          BEGIN
            IF CurrentPageNo > 1 THEN
              UpdateCurrPageNo(CurrentPageNo - 1);
          END;


        'LastPage':
          BEGIN
            CALCFIELDS("No. of Pages");
            UpdateCurrPageNo("No. of Pages");
          END;
      END;

      SendCommand(CaptureXmlDoc);
      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE HandleXmlCommand@1000000007(Command@1000000000 : Text[1024];VAR InXmlDoc@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XmlLib@1000000003 : Codeunit 6085573;
      Area@1000000008 : Code[10];
      FieldCode@1000000009 : Code[20];
      PageNo@1000000002 : Integer;
      Top@1000000004 : Integer;
      Left@1000000005 : Integer;
      Right@1000000006 : Integer;
      Bottom@1000000007 : Integer;
      IsValue@1000000010 : Boolean;
      LineNo@1000000011 : Integer;
    BEGIN
      CASE Command OF
        'ZoomTextChanged':
          BEGIN
            CurrentZoomText := XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Text');
            IF EVALUATE(CurrZoom,DELCHR(CurrentZoomText,'=','%')) THEN;
            Zoom(CurrZoom,TRUE);
          END;

        'PageTextChanged':
          BEGIN
            CurrentPageText := XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Text');
            ParsePageText(CurrentPageText);
          END;

        'ChangePage':
          UpdateCurrPageNo(XmlLib.Text2Int(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'NewPageNo')));

        'CaptureEnded':
          BEGIN
            Area := XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Area');
            LineNo := XmlLib.Text2Int(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'LineNo'));
            FieldCode := XmlLib.GetNodeText(InXmlDoc.DocumentElement,'FieldName');
            IsValue := XmlLib.Text2Bool(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'IsValue'));
            PageNo := XmlLib.Text2Int(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'PageNo'));
            Top := XmlLib.Text2Int(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Top'));
            Left := XmlLib.Text2Int(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Left'));
            Bottom := XmlLib.Text2Int(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Bottom'));
            Right := XmlLib.Text2Int(XmlLib.GetNodeText(InXmlDoc.DocumentElement,'Right'));
            CaptureEnded(PageNo,Area,FieldCode,LineNo,IsValue,Top,Left,Bottom,Right);
          END;

        'RedrawValues':
            RedrawValues;
      END;

      IF NOT ISNULL(CaptureXmlDoc) THEN
        SendCommand(CaptureXmlDoc);
      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE CaptureEnded@1000000008(PageNo@1000000013 : Integer;Area@1000000009 : Code[20];FieldName@1000000005 : Text[1024];LineNo@1000000016 : Integer;IsValue@1000000004 : Boolean;Top@1000000003 : Integer;Left@1000000002 : Integer;Bottom@1000000001 : Integer;Right@1000000000 : Integer);
    VAR
      Template@1000000018 : Record 6085579;
      Page@1000000008 : Record 6085591;
      Value@1000000007 : Record 6085593;
      Field@1000000010 : Record 6085580;
      Words@1000000019 : TEMPORARY Record 6085592;
      CaptureEngine@1160040000 : Codeunit 6085575;
      WordFunc@1000000017 : Codeunit 6085574;
      Word@1000000006 : Text[1024];
      ActivePageNo@1000000012 : Integer;
      xLeft@1000000014 : Integer;
      xRight@161024012 : Integer;
      IsField@1000000011 : Boolean;
    BEGIN
      FIND('=');
      IF Status <> Status::Open THEN
        EXIT;

      Field.SETRANGE("Template No.","Template No.");

      Page.GET("No.",CurrentPageNo);

      CASE Area OF
        'DOCUMENT':
          BEGIN
            IF FieldName = Text003 THEN BEGIN
              WordFunc.GetWordsInRegion(Page,Top,Left,Bottom,Right,Words);

              IF Template.GET("Template No.") THEN BEGIN
                Template."Search Text" := COPYSTR(WordFunc.CombineWords(Words),1,MAXSTRLEN(Template."Search Text"));
                Template.MODIFY(TRUE);
              END;
            END;
            LineNo := 0;
          END;

        'HEADER':
          BEGIN
            Field.SETRANGE(Type,Field.Type::Header);
            Field.SETRANGE(Code,FieldName);
            Field.FINDFIRST;
            LineNo := 0;
            IsField := TRUE;
          END;

        'LINE':
          BEGIN
            Field.SETRANGE(Type,Field.Type::Line);
            IF IsValue THEN
              Field.SETRANGE(Code,COPYSTR(FieldName,1,STRLEN(FieldName) - STRLEN(FORMAT(LineNo))))
            ELSE
              Field.SETRANGE(Code,FieldName);
            Field.FINDFIRST;

            IF (NOT IsValue) AND (Right - Left > 20) THEN BEGIN
              xLeft := ROUND(Left,1);
              xRight := ROUND(Right,1);
            END;
            IsField := TRUE;
          END;
      END;

      IF IsField THEN BEGIN
        IF PageNo <> CurrentPageNo THEN
          UpdateCurrPageNo(PageNo);

        Field.FIND('=');
        IF Field.Formula = '' THEN BEGIN
          IF IsValue THEN BEGIN
            CaptureMgt.UpdateFieldValue("No.",PageNo,LineNo,Field,Word,TRUE);
            Word := CaptureMgt.CaptureFromPos(Page,Field,LineNo,IsValue,Top,Left,Bottom,Right,Value);
          END ELSE
            Word := CaptureMgt.CaptureFromPos(Page,Field,0,IsValue,Top,Left,Bottom,Right,Value);

          IF IsValue THEN
            CaptureMgt.UpdateFieldValue("No.",PageNo,LineNo,Field,Word,FALSE);

          IF IsValue AND (NOT (CaptureMgt.IsValidValue(Field,"No.",LineNo))) THEN BEGIN
            IF Field."Data Type" = Field."Data Type"::Text THEN
              CaptureMgt.UpdateFieldValue(Rec."No.",PageNo,LineNo,Field,Word,TRUE)
            ELSE BEGIN
              IF CaptureMgt.TryUpdateFieldRuleFromMaster(Field,Word) THEN
                Word := CaptureMgt.CaptureFromPos(Page,Field,LineNo,IsValue,Top,Left,Bottom,Right,Value)
              ELSE
                CaptureMgt.UpdateFieldValue(Rec."No.",PageNo,LineNo,Field,Word,TRUE);
            END;
          END;

          IF (NOT IsValue) AND (Area = 'LINE') THEN BEGIN
            IF (xLeft > 0) AND (xLeft < Left) THEN
              Field."Caption Offset X" := xLeft - Left
            ELSE
              Field."Caption Offset X" := 0;
            Field."Offset DPI" := Page."TIFF Image Resolution";

            IF xRight > Right THEN
              Field."Typical Field Width" := xRight - Left - Field."Caption Offset X"
            ELSE
              Field."Typical Field Width" := Right - Left - Field."Caption Offset X";
            Field."Typical Field Width" := ROUND(Field."Typical Field Width" /
              CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
            Field."Typical Field DPI" := Page."TIFF Image Resolution";
          END;

          IF IsValue THEN BEGIN
            IF Field.Type <> Field.Type::Line THEN BEGIN
              IF (Right - Left) > 0 THEN BEGIN
                Field."Typical Field Width" := ROUND((Right - Left) /
                  CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
                Field."Typical Field DPI" := Page."TIFF Image Resolution";
              END;

              IF (Bottom - Top) > 0 THEN BEGIN
                Field."Typical Field Height" := ROUND((Bottom - Top) /
                  CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
                Field."Typical Field DPI" := Page."TIFF Image Resolution";
              END;
              Field.MODIFY;
            END;
          END ELSE BEGIN
            IF Field."Auto Update Caption" THEN BEGIN
              CaptureMgt.UpdateFieldCaption(Field,PageNo,Top,Left,Word);
              Field."Search for Value" := Word <> '';
              Field.MODIFY(TRUE);
            END;

            IF Area = 'LINE' THEN BEGIN
              IF Template.GET("Template No.") AND (Template."Recognize Lines" = Template."Recognize Lines"::No) THEN BEGIN
                Template."Recognize Lines" := Template."Recognize Lines"::Yes;
                Template.MODIFY;
              END;
            END;

          END;

          IF (LineNo = 0) OR (NOT IsValue) THEN
            CaptureMgt.UpdateCaptionOffset(Field,"No.");

          IF CurrentPageNo = 1 THEN
            Field."Default Page Source" := Field."Default Page Source"::"First Page"
          ELSE
            Field."Default Page Source" := Field."Default Page Source"::"Last Page";
          Field.MODIFY(TRUE);

          IF (Area = 'LINE') AND (NOT IsValue) THEN BEGIN
            Left := Left +
              ROUND(Field."Caption Offset X" * CaptureEngine.GetDPIFactor(Field."Offset DPI",Page."TIFF Image Resolution"),1);
            Right := Left + ROUND(Field."Typical Field Width" * CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
          END;
        END ELSE BEGIN
          Right := 0;
          Left := 0;
          Bottom := 0;
          Top := 0;
        END;
      END;

      CaptureAddinLib.BuildDrawFieldCommand(FieldName,IsValue,Top,Left,Bottom,Right,CaptureXmlDoc);
      COMMIT;

      CaptureAddinLib.BuildNotifyMessage(Channel,'UPDATE' + Area,CaptureXmlDoc);
    END;

    PROCEDURE SetSendAllPendingCommands@1000000005(NewSendAllPendingCommands@1000000000 : Boolean);
    BEGIN
      SendAllPendingCommands := NewSendAllPendingCommands;
    END;

    PROCEDURE SetDisableCapture@1000000010(NewDisableCapture@1000000000 : Boolean);
    BEGIN
      DisableCapture := NewDisableCapture;
    END;

    PROCEDURE ClearImage@1161054000();
    BEGIN
      CaptureAddinLib.BuildClearImageCommand(CaptureXmlDoc);
      UpdateCurrPageNo(0);
      SendCommand(CaptureXmlDoc);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdatePage@1161054001();
    BEGIN
      UpdateImage;
      CaptureAddinLib.BuildCaptureEnabledCommand((Status = Status::Open) AND (NOT DisableCapture),CaptureXmlDoc);
      SendCommand(CaptureXmlDoc);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE GetContiniaUserProp@1160040001() : Boolean;
    BEGIN
      IF ContiniaUserProp."User ID" = USERID THEN
        EXIT(TRUE);
      EXIT(ContiniaUserProp.GET(USERID));
    END;

    BEGIN
    {
      The reason for this form to be a list is to avoide default RTC right-click functionality
    }
    END.
  }
}

