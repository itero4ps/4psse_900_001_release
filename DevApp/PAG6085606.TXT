OBJECT Page 6085606 Document List for Source
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.3.50.05,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Documents;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table6085756;
    PageType=Card;
    SourceTableTemporary=Yes;
    ActionList=ACTIONS
    {
      { 1100409000;  ;ActionContainer;
                      CaptionML=ENU=Functions;
                      ActionContainerType=ActionItems }
      { 1100409001;1 ;Action    ;
                      Name=LinkDoc;
                      CaptionML=ENU=Link Document;
                      Promoted=Yes;
                      Image=Links;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 DocAttachMgt@1100409000 : Codeunit 6085602;
                               BEGIN
                                 //**4PS Call C018097
                                 DocAttachMgt.LinkDocument(CreatedDocType, CreatedDocSubtype, CreatedDocID, CreatedDocRefNo);
                                 LoadDocuments(RecID,CreatedDocType,CreatedDocSubtype,CreatedDocID,CreatedDocRefNo);   //Call C017609
                                 UpdateInfoBar;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 161024012;0;Container;
                ContainerType=ContentArea }

    { 6085573;1;Field     ;
                Name=DocDragAndDropAddIn;
                SourceExpr=DocDragAndDropAddInSource;
                ControlAddIn=[Continia.DocumentCapture.Dynamics.Nav.DocDragAndDrop220;PublicKeyToken=afaa4797ccef7206];
                OnControlAddIn=BEGIN
                                 CLEAR(OutXmlDoc);
                                 AddInResponse.Load(Data);
                                 HandleResponse;
                                 CLEAR(AddInResponse);
                               END;
                                }

  }
  CODE
  {
    VAR
      CaptureAddinLib@161024013 : Codeunit 6085660;
      AddInResponse@161024016 : Codeunit 6085661;
      OutXmlDoc@161024014 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RecID@161024015 : RecordID;
      CreatedDocType@161024017 : Integer;
      CreatedDocSubtype@161024018 : Integer;
      CreatedDocID@161024019 : Code[20];
      CreatedDocRefNo@161024020 : Integer;
      DocDragAndDropAddInSource@161024021 : Text;
      Text001@161024023 : TextConst 'ENU=Open Document,Edit Properties';
      Text002@161024024 : TextConst 'ENU=Drop Files Here';
      Text003@161024025 : TextConst 'ENU=Browse';
      Text004@161024026 : TextConst 'ENU=New';
      Text005@161024027 : TextConst 'ENU=You must enter a description to create a new document';
      Text006@161024028 : TextConst 'ENU=[No Name]';
      Text007@161024029 : TextConst 'ENU=There are no %1 that has %2.';
      Text008@161024030 : TextConst 'ENU=Delete %1?';
      SupplyingCompany@1100528400 : Text[30];
      Text11012000@1100528401 : TextConst;

    PROCEDURE LoadDocuments@161024013(NewRecID@161024012 : RecordID;NewCreatedDocType@161024014 : Integer;NewCreatedDocSubtype@161024015 : Integer;NewCreatedDocID@161024016 : Code[20];NewCreatedDocRefNo@161024017 : Integer);
    VAR
      DocAttachMgt@161024018 : Codeunit 6085602;
    BEGIN
      RecID := NewRecID;
      CreatedDocType := NewCreatedDocType;
      CreatedDocSubtype := NewCreatedDocSubtype;
      CreatedDocID := NewCreatedDocID;
      CreatedDocRefNo := NewCreatedDocRefNo;

      DocAttachMgt.SetSupplyingCompany(SupplyingCompany); //**4PS.n
      DocAttachMgt.CreateTempDocumentList(Rec,RecID,CreatedDocType,CreatedDocSubtype,CreatedDocID,CreatedDocRefNo);

      UpdateInfoBar;
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdateInfoBar@161024016();
    VAR
      AppMgnt@161024012 : Codeunit 1;
    BEGIN
      CaptureAddinLib.BuildFileMenuCommand(OutXmlDoc,Text002,Text003,Text004);
      CaptureAddinLib.BuildDocListSetupCommand(OutXmlDoc,FALSE);
      CaptureAddinLib.BuildDocListContentCommand(OutXmlDoc,Rec,FALSE);

      CaptureAddinLib.XmlToText(OutXmlDoc,DocDragAndDropAddInSource);
      CLEAR(OutXmlDoc);
    END;

    PROCEDURE HandleResponse@161024017();
    BEGIN
      CASE AddInResponse.Command OF
        'Visible':
          EXIT;  // This event is raised by the Client Add-in after it is visible. This is to fix a bug in the NAV 2009 RTC Client

        'NewFile':
          NewFileCmd;

        'CopyFileStarting':
          CopyFileStartingCmd;

        'FileCopyCompleted':
          FileCopyCompletedCmd;

        'ContextActionClicked':
          ContextActionClickedCmd;

        'DoubleClick':
          DoubleClickCmd;
      END;

      IF NOT ISNULL(OutXmlDoc) THEN BEGIN
        CaptureAddinLib.XmlToText(OutXmlDoc,DocDragAndDropAddInSource);
        CLEAR(OutXmlDoc);
      END;
    END;

    PROCEDURE NewFileCmd@161024019();
    VAR
      Document@161024018 : Record 6085590;
      DocAttachMgt@161024016 : Codeunit 6085602;
      NewDocDialog@161024014 : Page 6085780;
      CategoryCode@161024017 : Code[20];
      DocType@161024013 : Text[1024];
      DocDesc@161024012 : Text[1024];
      NewDescription@161024015 : Text[1024];
    BEGIN
      //**4PS.sn
      IF SupplyingCompany <> '' THEN
        ERROR(Text11012000, Document.FIELDCAPTION(Company), SupplyingCompany);
      //**4PS.en
      DocType := AddInResponse.GetText('Type');
      DocDesc := AddInResponse.GetText('Description');

      NewDocDialog.SetValues(RecID,DocDesc);
      NewDocDialog.LOOKUPMODE := TRUE;

      IF NewDocDialog.RUNMODAL = ACTION::LookupOK THEN BEGIN
        NewDocDialog.GetValues(CategoryCode,NewDescription);
        IF DELCHR(NewDescription,'=',' ') = '' THEN
          ERROR(Text005);

        DocAttachMgt.CreateDocument(Document,RecID,CreatedDocType,CreatedDocSubtype,CreatedDocID,CreatedDocRefNo,
          CategoryCode,NewDescription,DocType);

        CaptureAddinLib.BuildCreateNewFileCommand(OutXmlDoc,DocType,Document.GetMiscFileName,Document."No.",FALSE);

        LoadDocuments(RecID,CreatedDocType,CreatedDocSubtype,CreatedDocID,CreatedDocRefNo);
      END;
    END;

    PROCEDURE CopyFileStartingCmd@161024020();
    VAR
      DocCat@161024018 : Record 6085575;
      Document@161024021 : Record 6085590;
      DocAttachMgt@161024020 : Codeunit 6085602;
      RecRef@161024019 : RecordRef;
      CategoryCode@161024015 : Code[20];
      FullFilename@161024014 : Text[1024];
      Filename@161024013 : Text[1024];
      Extension@161024012 : Text[20];
      FileIndex@161024016 : Integer;
      NumberOfFiles@161024017 : Integer;
      MoveFile@161024022 : Boolean;
    BEGIN
      //**4PS.sn
      IF SupplyingCompany <> '' THEN
        ERROR(Text11012000, Document.FIELDCAPTION(Company), SupplyingCompany);
      //**4PS.en
      FullFilename := AddInResponse.GetText('FullFilename');
      Filename := AddInResponse.GetText('Filename');
      Extension := AddInResponse.GetText('Extension');
      CategoryCode := AddInResponse.GetText('CategoryCode');
      FileIndex := AddInResponse.GetInt('FileIndex');
      NumberOfFiles := AddInResponse.GetInt('NumberOfFiles');
      MoveFile := AddInResponse.GetText('Action') = 'Move';

      IF (CategoryCode = '') AND (FORMAT(RecID) <> '') THEN BEGIN
        RecRef.GET(RecID);
        DocCat.SETRANGE("Source Table No.",RecRef.NUMBER);
        DocCat.SETRANGE("Allow Drag-and-Drop",TRUE);
        IF NOT DocCat.FINDFIRST THEN BEGIN
          DocCat.SETRANGE("Source Table No.",0);
          IF NOT DocCat.FINDFIRST THEN
            ERROR(Text007,DocCat.TABLECAPTION,DocCat.FIELDCAPTION("Allow Drag-and-Drop"));
        END;

        IF DocCat.COUNT > 1 THEN
          IF PAGE.RUNMODAL(0,DocCat) <> ACTION::LookupOK THEN
            ERROR('');

        CategoryCode := DocCat.Code;
      END;

      DocAttachMgt.CreateDocument(Document,RecID,CreatedDocType,CreatedDocSubtype,CreatedDocID,CreatedDocRefNo,
        CategoryCode,Filename,Extension);
      COMMIT;

      IF MoveFile THEN
        CaptureAddinLib.BuildMoveFileCommand(OutXmlDoc,FullFilename,Document.GetMiscFileName,CategoryCode)
      ELSE
        CaptureAddinLib.BuildCopyFileCommand(OutXmlDoc,FullFilename,Document.GetMiscFileName,CategoryCode);
    END;

    PROCEDURE FileCopyCompletedCmd@161024021();
    BEGIN
      LoadDocuments(RecID,CreatedDocType,CreatedDocSubtype,CreatedDocID,CreatedDocRefNo);
    END;

    PROCEDURE ContextActionClickedCmd@161024022();
    VAR
      Document@161024014 : Record 6085590;
      RenameDocDialog@161024015 : Page 6085781;
      DocAttachMgt@161024017 : Codeunit 6085602;
      ActionName@161024013 : Code[20];
      DocumentNo@161024012 : Code[20];
      NewDescription@161024016 : Text[80];
    BEGIN
      //**4PS.sn
      IF SupplyingCompany <> '' THEN BEGIN
        Document.CHANGECOMPANY(SupplyingCompany);
        Document.SetSupplyingCompany(SupplyingCompany);
      END;
      //**4PS.en
      ActionName := AddInResponse.GetText('Name');
      DocumentNo := AddInResponse.GetText('DocumentNo');
      Document.GET(DocumentNo);

      CASE ActionName OF
        'OPEN':
          BEGIN
            IF Document."File Type" = Document."File Type"::OCR THEN
              CaptureAddinLib.BuildOpenFileCommand(OutXmlDoc,Document.GetPDFileName,"No.",FALSE)
            ELSE
              CaptureAddinLib.BuildOpenFileCommand(OutXmlDoc,Document.GetMiscFileName,"No.",FALSE);
          END;

        'RENAME':
          BEGIN
            //**4PS.sn
            IF SupplyingCompany <> '' THEN
              ERROR(Text11012000, Document.FIELDCAPTION(Company), SupplyingCompany);
            //**4PS.en
            Rec.RESET;
            Rec.SETRANGE("No.",DocumentNo);
            Rec.FINDFIRST;
            Rec.RESET;

            RenameDocDialog.SetValues(Description);
            RenameDocDialog.LOOKUPMODE := TRUE;
            IF RenameDocDialog.RUNMODAL = ACTION::LookupOK THEN BEGIN
              RenameDocDialog.GetValues(NewDescription);
              IF DELCHR(NewDescription,'=',' ') = '' THEN
                ERROR(Text005);
              IF Description <> NewDescription THEN BEGIN
                Description := NewDescription;
                MODIFY;
                DocAttachMgt.ModifyDocument(Rec);
              END;

              UpdateInfoBar;
            END;
          END;

        'DELETE':
          BEGIN
            //**4PS.sn
            IF SupplyingCompany <> '' THEN
              ERROR(Text11012000, Document.FIELDCAPTION(Company), SupplyingCompany);
            //**4PS.en
            Rec.RESET;
            Rec.SETRANGE("No.",DocumentNo);
            Rec.FINDFIRST;
            IF CONFIRM(Text008,FALSE,TABLECAPTION) THEN
              IF DocAttachMgt.DeleteDocument(Rec) THEN
                LoadDocuments(RecID,CreatedDocType,CreatedDocSubtype,CreatedDocID,CreatedDocRefNo);

          END;
      END;
    END;

    PROCEDURE DoubleClickCmd@161024023();
    VAR
      Document@161024012 : Record 6085590;
    BEGIN
      //**4PS.sn
      IF SupplyingCompany <> '' THEN BEGIN
        Document.CHANGECOMPANY(SupplyingCompany);
        Document.SetSupplyingCompany(SupplyingCompany);
      END;
      //**4PS.en
      Document.GET(AddInResponse.GetText('DocumentNo'));

      IF Document."File Type" = Document."File Type"::OCR THEN
        CaptureAddinLib.BuildOpenFileCommand(OutXmlDoc,Document.GetPDFileName,"No.",FALSE)
      ELSE
        CaptureAddinLib.BuildOpenFileCommand(OutXmlDoc,Document.GetMiscFileName,"No.",FALSE);
    END;

    PROCEDURE SetSupplyingCompany@1100528400(SupplyingCompany2@1100528400 : Text[30]);
    BEGIN
      //**4PS
      SupplyingCompany := SupplyingCompany2;
    END;

    EVENT OutXmlDoc@161024014::NodeInserting@93(sender@6085574 : Variant;e@6085573 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT OutXmlDoc@161024014::NodeInserted@94(sender@6085574 : Variant;e@6085573 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT OutXmlDoc@161024014::NodeRemoving@95(sender@6085574 : Variant;e@6085573 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT OutXmlDoc@161024014::NodeRemoved@96(sender@6085574 : Variant;e@6085573 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT OutXmlDoc@161024014::NodeChanging@97(sender@6085574 : Variant;e@6085573 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT OutXmlDoc@161024014::NodeChanged@98(sender@6085574 : Variant;e@6085573 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

