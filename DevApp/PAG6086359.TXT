OBJECT Page 6086359 Expense Mgt. Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW17.00.00.1.02.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Expense Management Setup Wizard;
    InsertAllowed=No;
    DeleteAllowed=No;
    PageType=NavigatePage;
    OnInit=VAR
             ExpSetup@1000 : Record 6086300;
             OnlineMgt@1001 : Codeunit 6086500;
           BEGIN
             IF (NOT ExpSetup.GET) THEN BEGIN
               NewCompany := TRUE;
             END ELSE BEGIN
               WizardAction := WizardAction::Setup;
               NewCompany := (ExpSetup."Company Code" = '') OR (ExpSetup."Archive Path" = '');
             END;

             ActivateCompany := NewCompany;

             SetupBankAgreement := TRUE;
             TestConnection := TRUE;
           END;

    OnOpenPage=BEGIN
                 ShowNextStep(0);
               END;

    ActionList=ACTIONS
    {
      { 1160040012;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1160040011;1 ;Action    ;
                      Name=Back;
                      CaptionML=ENU=&Back;
                      Promoted=Yes;
                      Enabled=BackEnabled;
                      InFooterBar=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowNextStep(-1);
                               END;
                                }
      { 1160040010;1 ;Action    ;
                      Name=Next;
                      CaptionML=ENU=&Next;
                      Promoted=Yes;
                      Enabled=NextEnabled;
                      InFooterBar=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowNextStep(1);
                               END;
                                }
      { 1160040009;1 ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      Promoted=Yes;
                      Enabled=FinishEnabled;
                      InFooterBar=Yes;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1160040003;0;Container;
                ContainerType=ContentArea }

    { 1160040000;1;Group  ;
                Name=WizardStart;
                Visible=WizardStartVisible;
                GroupType=Group;
                InstructionalTextML=ENU=This wizard helps you to import or export Expense Management configurations and to set it up. }

    { 6085573;2;Field     ;
                CaptionML=ENU=Action;
                OptionCaptionML=ENU=Import Configuration,Export Configuration,Setup Company;
                SourceExpr=WizardAction;
                OnValidate=BEGIN
                             EnableWizardStartFields;
                           END;
                            }

    { 1160040002;2;Field  ;
                AssistEdit=Yes;
                CaptionML=ENU=File Name;
                SourceExpr=ClientFilename;
                Enabled=FilenameEnabled;
                OnAssistEdit=BEGIN
                               IF WizardAction = WizardAction::Import THEN
                                 ClientFilename := FileMgt.OpenFileDialog(CurrPage.CAPTION,ClientFilename,'')
                               ELSE
                                 ClientFilename := FileMgt.SaveFileDialog(CurrPage.CAPTION,ClientFilename,'');
                               IF STRPOS(ClientFilename,'.xml') = 0 THEN
                                 ClientFilename := ClientFilename + '.xml';
                             END;
                              }

    { 1160040004;1;Group  ;
                Name=ImportExportSelection;
                CaptionML=ENU=Configurations;
                Visible=ImportExportSelectionVisible;
                GroupType=Group;
                InstructionalTextML=ENU=You can exclude a table by unticking 'Include'. You can expand to view records for each table. }

    { 1160040007;2;Part   ;
                Name=ConfigLines;
                PagePartID=Page6086360;
                Visible=ConfigLinesVisible;
                PartType=Page }

    { 1160040005;1;Group  ;
                Name=ImportExportCompleted;
                CaptionML=ENU=Import/Export Completed;
                Visible=ImportExportCompletedVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Expense Management configurations have been imported/exported. }

    { 1   ;2   ;Field     ;
                Name=TEMP1;
                CaptionClass='3,' }

    { 6085579;1;Group     ;
                Name=WizardSetupCompanyStory;
                CaptionML=ENU=Setup Expense Management;
                Visible=WizardSetupCompanyStoryVisible;
                GroupType=Group;
                InstructionalTextML=ENU=This wizard will help you set up some of the key Expense Management configurations. Settings will be saved after each step, so at any point you can click 'Finish' to end. }

    { 6085578;2;Field     ;
                Name=TEMP3;
                CaptionClass='3,' }

    { 6085577;1;Group     ;
                Name=SpecifyClientCredentials;
                Visible=SpecifyClientCredentialsVisible;
                GroupType=Group;
                InstructionalTextML=ENU="In order to activate and use Expense Management you will need to specify your Continia client credentials. These should have been received by your reseller. " }

    { 6085576;2;Field     ;
                CaptionML=ENU=Client ID;
                SourceExpr=ClientID }

    { 6085580;2;Field     ;
                CaptionML=ENU=Client Password;
                SourceExpr=ClientPassword }

    { 6085581;2;Field     ;
                CaptionML=ENU=Test Connection;
                SourceExpr=TestConnection }

    { 6085585;1;Group     ;
                Name=SpecifyGeneralEMSetupInfo;
                CaptionML=ENU=General Expense Management Settings;
                Visible=SpecifyGeneralEMSetupInfoVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Please specify general Expense Management settings below. }

    { 6085584;2;Field     ;
                CaptionML=ENU=Company Code;
                CharAllowed=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+-;
                SourceExpr=CompanyCode }

    { 6085583;2;Field     ;
                CaptionML=ENU=Archive File Path;
                SourceExpr=ArchiveFilePath }

    { 6085582;2;Field     ;
                CaptionML=ENU=Activate Company;
                SourceExpr=ActivateCompany }

    { 6085587;2;Field     ;
                CaptionML=ENU=Setup Bank Agreement;
                SourceExpr=SetupBankAgreement }

    { 6   ;2   ;Field     ;
                Name=<CreateEMProfile>;
                CaptionML=ENU=Create Expense Management Role Center;
                SourceExpr=CreateEMProfile }

    { 5   ;2   ;Field     ;
                CaptionML=ENU=Set as Default Role Center;
                SourceExpr=SetEMDefaultProfile }

    { 6085590;1;Group     ;
                Name=SpecifyBankAgreement;
                CaptionML=ENU=Bank Agreement;
                Visible=SpecifyBankAgreementVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Please chose a bank agreement for Expense Management }

    { 2   ;2   ;Field     ;
                CaptionML=ENU=Bank Code;
                SourceExpr=BankCode;
                OnValidate=BEGIN
                             IF (BankCode = '') THEN BEGIN
                               BankAgreementID := '';
                               BankName := '';
                             END;
                           END;

                OnLookup=VAR
                           CEMBank@1000 : Record 6086314;
                         BEGIN
                           IF CEMBank.GET(BankCode,BankCountryCode) THEN;
                           IF PAGE.RUNMODAL(0,CEMBank) = ACTION::LookupOK THEN BEGIN
                             BankCode:= CEMBank.Code;
                             BankCountryCode := CEMBank."Country/Region Code";
                             BankName := CEMBank.Name;
                             BankAgreementID := '';
                           END;
                         END;
                          }

    { 3   ;2   ;Field     ;
                CaptionML=ENU=Bank Name;
                SourceExpr=BankName;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                CaptionML=ENU=Bank Agreement ID;
                SourceExpr=BankAgreementID }

    { 7   ;1   ;Group     ;
                Name=SpecifyContiniaUserSetup;
                CaptionML=ENU=Continia User Setup;
                Visible=SpecifyContiniaUsersVisible;
                GroupType=Group;
                InstructionalTextML=ENU=You need to configure Expense Accounts and Continia Users to start working with Expense Management. }

    { 9   ;2   ;Field     ;
                CaptionML=ENU=Setup demo data;
                ToolTipML=ENU=This is recommende only for testing in a CRONUS database.;
                SourceExpr=SetupDemoData }

    { 8   ;2   ;Field     ;
                CaptionML=ENU=Open screen to configure Continia Users;
                SourceExpr=SetContiniaUsers }

    { 6085596;1;Group     ;
                Name=WizardCompleted;
                CaptionML=ENU=Wizard is complete;
                Visible=WizardCompletedVisible;
                GroupType=Group;
                InstructionalTextML=ENU=This wizard has now completed. We hope you will enjoy working with Expense Management. }

    { 6085595;2;Field     ;
                Name=TEMP4;
                CaptionClass='3,' }

  }
  CODE
  {
    VAR
      Text001@1005 : TextConst 'ENU=You must specify a filename';
      Text002@1004 : TextConst 'ENU=You must specify a Company Code.';
      FileMgt@6085573 : Codeunit 419;
      OnlineMgt@6085602 : Codeunit 6086500;
      WizardAction@6085574 : 'Import,Export,Setup';
      BackEnabled@1160040000 : Boolean INDATASET;
      WizardStartVisible@1013 : Boolean INDATASET;
      ConfigLinesVisible@1160040005 : Boolean INDATASET;
      ImportExportSelectionVisible@6085576 : Boolean INDATASET;
      ImportExportCompletedVisible@1160040004 : Boolean INDATASET;
      WizardSetupCompanyStoryVisible@6085593 : Boolean INDATASET;
      SpecifyClientCredentialsVisible@6085594 : Boolean INDATASET;
      SpecifyGeneralEMSetupInfoVisible@6085595 : Boolean INDATASET;
      SpecifyBankAgreementVisible@6085596 : Boolean INDATASET;
      SpecifyContiniaUsersVisible@1016 : Boolean INDATASET;
      WizardCompletedVisible@6085597 : Boolean INDATASET;
      FinishEnabled@1160040006 : Boolean INDATASET;
      NextEnabled@1160040007 : Boolean INDATASET;
      FilenameEnabled@6085598 : Boolean INDATASET;
      Step@1160040002 : Integer;
      Steps@6085577 : 'WizardStart,ImportExportSelection,ImportExportCompleted,WizardSetupCompanyStory,SpecifyClientCredentials,SpecifyGeneralEMSetupInfo,SpecifyBankAgreement,SpecifyContiniaUserSetup,WizardCompleted';
      ClientFilename@1160040010 : Text[250];
      ServerFilename@1001 : Text[250];
      TEMP@1000 : Text INDATASET;
      ClientID@6085591 : Code[20];
      CompanyCode@6085590 : Code[20];
      BankCode@1011 : Code[10];
      BankAgreementID@1010 : Text[30];
      BankName@1009 : Text[30];
      BankCountryCode@1008 : Code[10];
      xBankCode@1007 : Code[10];
      xBankAgreementID@1006 : Text[30];
      ArchiveFilePath@6085589 : Text[250];
      ClientPassword@6085588 : Text[50];
      TestConnection@6085587 : Boolean;
      ActivateCompany@6085586 : Boolean;
      NewCompany@1003 : Boolean;
      UseContiniaOnlineWeb@6085584 : Boolean;
      LocalDomainName@6085583 : Code[50];
      WindowsWSUrl@6085582 : Text[250];
      DatabaseWSUrl@6085581 : Text[250];
      WebSiteUrl@6085580 : Text[80];
      UseCloudOCR@6085579 : Boolean;
      SetupBankAgreement@6085578 : Boolean;
      CreateEMProfile@1002 : Boolean;
      SetEMDefaultProfile@1012 : Boolean;
      NewCompanyImport@1014 : TextConst 'ENU=Setting a new company requires importing the setup file.';
      SetContiniaUsers@1015 : Boolean;
      SetupDemoData@1017 : Boolean INDATASET;

    LOCAL PROCEDURE ShowNextStep@6085573(NextStep@1160040000 : Integer);
    VAR
      COSetup@1006 : Record 6086500;
      ExpSetup@1005 : Record 6086300;
      CEMBank@1004 : Record 6086314;
      BankAgr@1003 : Record 6086315;
      Profile@1001 : Record 2000000072;
      DCSetup@1009 : Record 6085573;
      ContiniaUserSetupList@1007 : Page 6086051;
      OnlineMgt@1002 : Codeunit 6086500;
      CEMOnline@1000 : Codeunit 6086305;
      CreateDemoData@1008 : Codeunit 6086357;
    BEGIN
      IF NewCompany AND (WizardAction = WizardAction::Setup) AND (NextStep = 1) THEN
        ERROR(NewCompanyImport);

      IF (WizardAction = WizardAction::Setup) AND (Step = 0) AND (NextStep <> 0) THEN
        Step := 2;

      CASE (Step + NextStep) OF
        0:
          BEGIN
            CurrPage.ConfigLines.PAGE.ClearTempTable;

            EnableWizardStartFields;
            ShowStep(Steps::WizardStart,FALSE,TRUE,FALSE);
          END;

        1:
          BEGIN
            IF ClientFilename = '' THEN
              ERROR(Text001);

            IF WizardAction = WizardAction::Import THEN BEGIN
              ServerFilename := FileMgt.UploadFileSilent(ClientFilename);
              CurrPage.ConfigLines.PAGE.SetParam(0,ServerFilename,NewCompany);
            END ELSE BEGIN
              ServerFilename := FileMgt.ServerTempFileName('xml');
              CurrPage.ConfigLines.PAGE.SetParam(1,ServerFilename,NewCompany);
            END;

            CurrPage.ConfigLines.PAGE.CreateTempTable;

            ShowStep(Steps::ImportExportSelection,TRUE,TRUE,FALSE);
          END;

        2:
          BEGIN
            CurrPage.ConfigLines.PAGE.PerformAction;

            IF WizardAction = WizardAction::Export THEN BEGIN
              FileMgt.DownloadToFile(ServerFilename,ClientFilename);
              ShowStep(Steps::ImportExportCompleted,FALSE,FALSE,TRUE);
            END ELSE
              ShowStep(Steps::ImportExportCompleted,FALSE,TRUE,FALSE);
          END;

        3:
          ShowStep(Steps::WizardSetupCompanyStory,FALSE,TRUE,TRUE);

        4:
          BEGIN
            IF COSetup.GET THEN BEGIN
              ClientID := COSetup."Client ID";
              IF COSetup."Client Password" <> '' THEN
                ClientPassword := '****************'
              ELSE
                ClientPassword := '';
            END;

            ShowStep(Steps::SpecifyClientCredentials,TRUE,TRUE,TRUE);
          END;

        5:
          BEGIN
            IF NextStep = 1 THEN BEGIN
              // PROCESS THE CONTINIA ONLINE SETTINGS AND TEST THE CONNECTION IF REQUESTED
              IF NOT COSetup.GET THEN
                COSetup.INSERT(TRUE);

              COSetup."Client ID" := ClientID;
              IF ClientPassword <> '****************' THEN
                COSetup."Client Password" := ClientPassword;

              COSetup.MODIFY;

              IF TestConnection THEN
                OnlineMgt.TestConnection;

              CreateEMProfile := OnlineMgt.IsDev OR OnlineMgt.IsDemo;
              SetEMDefaultProfile := OnlineMgt.IsDev OR OnlineMgt.IsDemo;

              // SETUP THE DEFAULT VALUES FOR EM SETUP AND SHOW THE STEP
              ExpSetup.GET;
              COSetup.GET;

              IF ExpSetup."Company Code" <> '' THEN
                CompanyCode := ExpSetup."Company Code"
              ELSE
                IF DCSetup.GET THEN
                  CompanyCode := DCSetup."Company Code";

              ArchiveFilePath := ExpSetup."Archive Path";
              ShowStep(Steps::SpecifyGeneralEMSetupInfo,TRUE,TRUE,TRUE);
            END;
          END;

        6:
          BEGIN
            ExpSetup.GET;
            IF NextStep = 1 THEN BEGIN
              // PROCESS THE SETTINGS, ACTIVATE THE COMPANY
              COMMIT;

              IF (CompanyCode = '') THEN
                ERROR(Text002);

              ExpSetup."Company Code" := CompanyCode;
              ExpSetup.VALIDATE("Archive Path",ArchiveFilePath);
              ExpSetup.MODIFY;
              COMMIT;

              IF CreateEMProfile THEN BEGIN
                IF NOT Profile.GET('EXPENSEMANAGEMENT') THEN BEGIN
                  Profile."Profile ID" := 'EXPENSEMANAGEMENT';
                  Profile.Description := 'Expense Management';
                  Profile."Role Center ID" := PAGE::"Expense Management Role Center";
                  Profile.INSERT(TRUE);
                END;
              END;

              IF SetEMDefaultProfile THEN BEGIN
                Profile.MODIFYALL("Default Role Center",FALSE);

                Profile.GET('EXPENSEMANAGEMENT');
                Profile."Default Role Center" := TRUE;
                Profile.MODIFY;
              END;
              COMMIT;

              IF ActivateCompany THEN BEGIN
                CEMOnline.ActivateCompany;
                CEMOnline.SetupCloud;
              END;
            END;

            IF OnlineMgt.IsDev OR OnlineMgt.IsDemo THEN
              SetupDemoData := TRUE;


            // SETUP THE DEFAULT VALUES FOR BANK ACCOUNT SETUP AND SHOW THE STEP
            IF SetupBankAgreement THEN BEGIN
              IF (BankAgr.COUNT() < 2) THEN
                CEMOnline.GetBanks;
                BankCode := '';

              BankAgreementID := '';

              IF BankAgr.FINDSET THEN BEGIN
                xBankCode := BankAgr."Bank Code";
                xBankAgreementID := BankAgr."Agreement Id";
                BankCode := BankAgr."Bank Code";
                BankAgreementID := BankAgr."Agreement Id";

                CEMBank.GET(BankAgr."Bank Code",BankAgr."Country/Region Code");
                BankName := CEMBank.Name;
              END ELSE BEGIN
                IF OnlineMgt.IsDev OR OnlineMgt.IsDemo THEN BEGIN
                  BankCode := 'TEST';
                  BankName := 'Continia Test Bank';
                  BankAgreementID := '1111111111';
                  BankCountryCode := '';
                END;
              END;

              ShowStep(Steps::SpecifyBankAgreement,TRUE,TRUE,TRUE);
            END ELSE BEGIN
              IF SetupDemoData THEN BEGIN
                ShowStep(Steps::SpecifyContiniaUserSetup,FALSE,TRUE,TRUE);
                Step := 6;
              END ELSE BEGIN
                ShowStep(Steps::WizardCompleted,FALSE,FALSE,TRUE);
                Step := 7;
              END;
            END;
          END;

        7:
          BEGIN
            IF NextStep = 1 THEN BEGIN
              IF ((xBankCode <> BankCode) OR (BankAgreementID <> xBankAgreementID)) THEN BEGIN
                IF (BankCode = '') THEN BEGIN
                  IF CEMBank.GET(xBankCode,'') THEN
                    CEMBank.DELETE;
                  IF BankAgr.GET(xBankCode,xBankAgreementID,'') THEN
                    BankAgr.DELETE;
                END;

                IF (BankCode <> '') AND (BankAgreementID <> xBankAgreementID) THEN BEGIN
                  IF BankAgr.GET(BankCode,xBankAgreementID,BankCountryCode) THEN BEGIN
                    BankAgr."Agreement Id" := BankAgreementID;
                    BankAgr.MODIFY;
                  END ELSE BEGIN
                    BankAgr."Bank Code" := BankCode;
                    BankAgr."Agreement Id" := BankAgreementID;
                    BankAgr."Country/Region Code" := BankCountryCode;
                    BankAgr.INSERT;
                  END;
                END;
              END;
            END;

            IF OnlineMgt.IsDev OR OnlineMgt.IsDemo THEN BEGIN
              SetupDemoData := TRUE;
              ShowStep(Steps::SpecifyContiniaUserSetup,FALSE,TRUE,TRUE)
            END ELSE
              ShowStep(Steps::WizardCompleted,FALSE,FALSE,TRUE);
          END;

        8:
          BEGIN
            IF SetContiniaUsers THEN
              ContiniaUserSetupList.RUN;

            IF SetupDemoData THEN
              CreateDemoData.RUN;

            ShowStep(Steps::WizardCompleted,FALSE,FALSE,TRUE);
          END;
      END;

      Step += NextStep;
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE ShowStep@1160040013(NewStep@1160040000 : Integer;EnableBack@1160040001 : Boolean;EnableNext@1160040002 : Boolean;EnableFinish@1160040003 : Boolean);
    BEGIN
      WizardStartVisible := FALSE;
      ImportExportSelectionVisible := FALSE;
      ImportExportCompletedVisible := FALSE;
      ConfigLinesVisible := FALSE;
      WizardSetupCompanyStoryVisible := FALSE;
      SpecifyClientCredentialsVisible := FALSE;
      SpecifyGeneralEMSetupInfoVisible := FALSE;
      SpecifyBankAgreementVisible := FALSE;
      SpecifyContiniaUsersVisible := FALSE;
      WizardCompletedVisible := FALSE;

      CASE NewStep OF
        Steps::WizardStart:
          WizardStartVisible := TRUE;

        Steps::ImportExportSelection:
          BEGIN
            ImportExportSelectionVisible := TRUE;
            ConfigLinesVisible := TRUE;
          END;

        Steps::ImportExportCompleted:
          ImportExportCompletedVisible := TRUE;

        Steps::WizardSetupCompanyStory:
          WizardSetupCompanyStoryVisible := TRUE;

        Steps::SpecifyClientCredentials:
          SpecifyClientCredentialsVisible := TRUE;

        Steps::SpecifyGeneralEMSetupInfo:
          SpecifyGeneralEMSetupInfoVisible := TRUE;

        Steps::SpecifyBankAgreement:
          SpecifyBankAgreementVisible := TRUE;

        Steps::SpecifyContiniaUserSetup:
          SpecifyContiniaUsersVisible := TRUE;

        Steps::WizardCompleted:
          WizardCompletedVisible := TRUE;
      END;

      BackEnabled := EnableBack;
      NextEnabled := EnableNext;
      FinishEnabled := EnableFinish;
    END;

    PROCEDURE GetTopFolder@1160040016(Path@1160040000 : Text[250]) : Text[250];
    VAR
      FileSystemMgt@1160040001 : Codeunit 6085584;
    BEGIN
      IF Path = '' THEN
        EXIT;

      Path := DELCHR(Path,'>','\');
      Path := COPYSTR(Path,1,FileSystemMgt.LastIndexOf(Path,'\',TRUE)-1);
      EXIT(DELCHR(Path,'>','\'));
    END;

    PROCEDURE GetSubFolder@1160040035(Path@1160040000 : Text[250]) : Text[250];
    VAR
      FileSystemMgt@1160040001 : Codeunit 6085584;
    BEGIN
      IF Path = '' THEN
        EXIT;

      Path := DELCHR(Path,'<>','\');
      Path := COPYSTR(Path,FileSystemMgt.LastIndexOf(Path,'\',TRUE));
      EXIT(DELCHR(Path,'<>','\'));
    END;

    PROCEDURE EnableWizardStartFields@6085574();
    BEGIN
      FilenameEnabled := WizardAction <> WizardAction::Setup;
    END;

    BEGIN
    END.
  }
}

