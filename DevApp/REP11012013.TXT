OBJECT Report 11012013 Create Project Cost Plus
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11072005=m;
    CaptionML=ENU=Create Project Cost Plus Entries;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ProjSetup.GET;

                   //+++4PSSE
                   OnlyConsentedLines := TRUE;
                   //---4PSSE
                 END;

    OnPreReport=BEGIN
                  Window.OPEN(Text000 + Text001);

                  JobLedgEntryFilterRec.COPYFILTERS("Job Ledger Entry");

                  RestQuanLedgEntryAlso := gRepeatForRestQuantitity AND ("Job Ledger Entry".GETFILTER("Cost Plus Entry Created") = Text012);
                  RestQuanPostedHourLineAlso := gRepeatForRestQuantitity AND ("Posted Hour Line".GETFILTER("Cost Plus Entry Created") = Text012);
                END;

    OnPostReport=BEGIN
                   COMMIT;
                   Window.CLOSE;
                   IF NOT HideMessage THEN BEGIN
                     IF CounterOK = 0 THEN
                       MESSAGE(Text007)
                     ELSE
                       MESSAGE(Text008,CounterOK);
                   END;
                   CheckCompressLines;  //db, 20-09-10: M20069
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.)
                                 WHERE(No.=FILTER(<>''));
               OnPreDataItem=BEGIN
                               GetSettleInfoPerProject := COUNT > 1;

                               //>>IME-382
                               IF JobProjectStatusFilter <> '' THEN BEGIN
                                 Job.SETFILTER("Project Status", JobProjectStatusFilter);
                                 Job.SETFILTER("Bill-to Customer No.",'<>%1','');
                               END;
                               //<<IME-382
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ("No." = '') THEN
                                    CurrReport.SKIP;

                                  COMMIT;
                                  Counter := 0;
                                  CounterTotal := 0;
                                  ProjCde := "No.";
                                  ProjCustCde := CustCde;
                                  ProjCommCde := CommCde;
                                  ProjSettlCde := SettlCde;

                                  // 30671.n, 04-01-12, Improve 22568, changes not marked
                                  //mg.sn, 03-03-11: M22568
                                  IF GetSettleInfoPerProject THEN
                                    IF NOT Check1Princip1Comm1Settl("No.", ProjCustCde, ProjCommCde, ProjSettlCde) THEN
                                      CurrReport.SKIP;
                                  //mg.en, 03-03-11: M22568

                                  CostPlusRec.LOCKTABLE;
                                END;

               ReqFilterFields=No. }

    { 5612;1   ;DataItem;                    ;
               DataItemTable=Table11072005;
               DataItemTableView=SORTING(Job No.,Cost Type,Global Dimension 2 Code,Entry Type,Posting Date)
                                 WHERE(Project Invoice=CONST(No),
                                       Chargeable=CONST(Yes),
                                       Processed=CONST(No),
                                       Project Interest=CONST(No));
               OnPreDataItem=BEGIN
                               LOCKTABLE;

                               FILTERGROUP(6);
                               IF (Job."Small Project" AND
                                   (ProjSetup."Small Project Cost Plus Hours" = ProjSetup."Small Project Cost Plus Hours"::"Job Ledger Entries"))
                                 OR
                                  (NOT Job."Small Project" AND
                                   (ProjSetup."Project Cost Plus Hours from" = ProjSetup."Project Cost Plus Hours from"::"Job Ledger Entries"))
                               THEN
                                 SETRANGE("Cost Type")
                               ELSE
                                 SETFILTER("Cost Type", '<>%1', "Cost Type"::Labor);
                               FILTERGROUP(0);

                               IF RestQuanLedgEntryAlso THEN
                                 SETRANGE("Cost Plus Entry Created");

                               IF SortEntry = SortEntry::EntryNo THEN  //DP00495
                                 SETCURRENTKEY("Entry No.");

                               CounterTotal := CounterTotal + COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF (Job."Small Project" AND
                                      (ProjSetup."Small Project Cost Plus Hours" <> ProjSetup."Small Project Cost Plus Hours"::"Job Ledger Entries"))
                                    OR
                                     (NOT Job."Small Project" AND
                                      (ProjSetup."Project Cost Plus Hours from" <> ProjSetup."Project Cost Plus Hours from"::"Job Ledger Entries"))
                                  THEN BEGIN
                                    //* Skip expenses created for an external employee via a purchase order (if not create via purchorder then Chargeble is false)
                                    IF ("Employee No." <> '') AND "Employee External" AND ("Wage Component" <> '') AND (NOT "Created from Intercompany") THEN BEGIN
                                      IF WageCompRec.GET("Wage Component") THEN BEGIN
                                        IF WageCompRec."Component Type" = WageCompRec."Component Type"::Expenses THEN
                                          CurrReport.SKIP;
                                      END;
                                    END;
                                  END;

                                  //>> 150915 ITERO.PR RFC001
                                  IF ("Global Dimension 2 Code" <> '') THEN BEGIN
                                    DimMgt.GetDimValueRec(2, "Global Dimension 2 Code", DimValRec, TRUE, ProjCde);
                                    IF DimValRec."Exclude Cost Plus" THEN
                                      CurrReport.SKIP;
                                  END;
                                  //<<RFC001

                                  IF NOT ProcessJobLedgerEntry("Job Ledger Entry") THEN
                                    CurrReport.SKIP;
                                END;

               ReqFilterFields=Cost Type,Element,Extension Contract,Posting Date;
               DataItemLink=Job No.=FIELD(No.) }

    { 3913;1   ;DataItem;JobLedgerEntryIC    ;
               DataItemTable=Table11072005;
               DataItemTableView=SORTING(Job No.,Posting Date)
                                 WHERE(Chargeable=CONST(Yes),
                                       Project Interest=CONST(No));
               OnPreDataItem=BEGIN
                               //* Melding: 9135
                               //* Als aanmaken regiemutaties op basis van de urenverantwoording (niet-geboekte en/of geboekte uren) dan werden in geval
                               //* van rekening courant geen regiemutaties aangemaakt. Bv: In bedrijf 10 boeken op project van bedrijf 22, de uren
                               //* staan dan in bedrijf 10 en de projectposten in bedrijf 22. Bij het aanmaken van de regiemutaties voor 'Arbeid'
                               //* daarom in geval van RC altijd op basis van de projectposten.

                               IF (Job."Small Project" AND
                                   (ProjSetup."Small Project Cost Plus Hours" = ProjSetup."Small Project Cost Plus Hours"::"Job Ledger Entries"))
                                 OR
                                  (NOT Job."Small Project" AND
                                   (ProjSetup."Project Cost Plus Hours from" = ProjSetup."Project Cost Plus Hours from"::"Job Ledger Entries"))
                               THEN
                                 CurrReport.BREAK;

                               COPYFILTERS(JobLedgEntryFilterRec);
                               FILTERGROUP(4);
                               SETRANGE("Job No.", Job."No.");   //* Herstellen 'DataItemLink' (is bij copyfilter verdwenen).
                               FILTERGROUP(0);

                               FILTERGROUP(6);
                               SETRANGE("Cost Type", "Cost Type"::Labor);
                               SETRANGE("Created from Intercompany", TRUE);
                               FILTERGROUP(0);

                               IF RestQuanLedgEntryAlso THEN
                                 SETRANGE("Cost Plus Entry Created");

                               LOCKTABLE;
                               CounterTotal := CounterTotal + COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  //>> 150915 ITERO.PR RFC001
                                  IF ("Global Dimension 2 Code" <> '') THEN BEGIN
                                    DimMgt.GetDimValueRec(2, "Global Dimension 2 Code", DimValRec, TRUE, ProjCde);
                                    IF DimValRec."Exclude Cost Plus" THEN
                                      CurrReport.SKIP;
                                  END;
                                  //<<RFC001

                                  IF NOT ProcessJobLedgerEntry(JobLedgerEntryIC) THEN
                                    CurrReport.SKIP;
                                END;

               DataItemLink=Job No.=FIELD(No.) }

    { 2635;1   ;DataItem;                    ;
               DataItemTable=Table11012085;
               DataItemTableView=SORTING(Project No.)
                                 WHERE(Component Type=FILTER(Hours|Expenses|Expense hours),
                                       Chargeable=CONST(Yes),
                                       Processed=CONST(No));
               ReqFilterHeadingML=ENU=Posted Hours;
               OnPreDataItem=BEGIN
                               WITH ProjSetup DO BEGIN
                                 IF (Job."Small Project" AND
                                     ("Small Project Cost Plus Hours" = "Small Project Cost Plus Hours"::"Job Ledger Entries"))
                                   OR
                                    (NOT Job."Small Project" AND
                                     ("Project Cost Plus Hours from" = "Project Cost Plus Hours from"::"Job Ledger Entries"))
                                 THEN
                                   CurrReport.BREAK;
                               END;

                               IF RestQuanPostedHourLineAlso THEN
                                 SETRANGE("Cost Plus Entry Created");

                               LOCKTABLE;
                               CounterTotal := CounterTotal + COUNT;
                             END;

               OnAfterGetRecord=VAR
                                  SettlementSheet@1100525000 : Record 11012021;
                                  lvProjectCostPlusEntryRec@1100485000 : Record 11012019;
                                  lvCurrentQuantity@1100485001 : Decimal;
                                  lvWageComponent@1100285400 : Record 11012014;
                                  lvPriceFactor@1100409000 : Decimal;
                                BEGIN
                                  //>> 150915 ITERO.PR RFC001
                                  IF ("Cost Object" <> '') THEN BEGIN
                                    DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, ProjCde);
                                    IF DimValRec."Exclude Cost Plus" THEN
                                      CurrReport.SKIP;
                                  END;
                                  //<<RFC001

                                  Counter := Counter + 1;
                                  Window.UPDATE(1,ROUND(Counter / CounterTotal * 10000,1));

                                  ExtContractCde := "Extension Contract";
                                  IF NOT CheckData() THEN
                                    CurrReport.SKIP;

                                  GetCommAndSettlData();
                                  CALCFIELDS("Description Wage Component");

                                  //jth.sn
                                  IF "Component Type" = "Component Type"::Expenses THEN
                                    lvCurrentQuantity := Quantity
                                  ELSE
                                    lvCurrentQuantity := "Total Line";

                                  //>>ADD-Exp.Hrs
                                  IF lvWageComponent.GET("Posted Hour Line"."Wage Component") THEN BEGIN
                                     IF lvWageComponent."Component Type" = lvWageComponent."Component Type" :: "Expense hours" THEN BEGIN
                                        IF ProjSetup."Project Cost Plus Hours from" = ProjSetup."Project Cost Plus Hours from" :: "All Hours" THEN
                                           lvCurrentQuantity := "Total Line";
                                     END;
                                  END;
                                  //<<ADD-Exp.Hrs

                                  IF RestQuanPostedHourLineAlso AND "Cost Plus Entry Created" THEN BEGIN
                                    IF ("Posting Date" < RestQuantityStartDate) THEN
                                      CurrReport.SKIP;
                                    InvoicedQuantityPostedHourLine :=  0;
                                    lvProjectCostPlusEntryRec.SETCURRENTKEY("Posted Hour Year","Posted Hour Week","Employee No.","Posted Hour Line No.");
                                    lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Year", Year );
                                    lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Week", Week );
                                    lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Line No.", "Line No." );
                                    lvProjectCostPlusEntryRec.SETRANGE("Employee No.", "Employee No.");
                                    IF lvProjectCostPlusEntryRec.FIND('-') THEN
                                      REPEAT
                                        lvProjectCostPlusEntryRec.CALCFIELDS("Invoiced Quantity");
                                        InvoicedQuantityPostedHourLine := InvoicedQuantityPostedHourLine + lvProjectCostPlusEntryRec."Invoiced Quantity";
                                      UNTIL lvProjectCostPlusEntryRec.NEXT = 0;

                                    lvCurrentQuantity := lvCurrentQuantity - InvoicedQuantityPostedHourLine;
                                  END;

                                  IF (lvCurrentQuantity <> 0) THEN BEGIN
                                  //jth.en

                                    CostPlusRec.INIT;
                                    CostPlusRec."Project No." := ProjCde;
                                    CostPlusRec.Principal := ProjCustCde;
                                    CostPlusRec."Commission No." := ProjCommCde;
                                    CostPlusRec."Settl.Sheet No." := ProjSettlCde;
                                    CostPlusRec."Line No." := CostPlusRec.GetCostPlusFirstFreeLine(
                                      ProjCde, ProjCustCde, ProjCommCde, ProjSettlCde);  //db, 10-01-11
                                    CostPlusRec.INSERT(TRUE);  //db, 23-06-08

                                    CostPlusRec."Employee No." := "Employee No.";
                                    CostPlusRec.Element := Element;
                                    CostPlusRec."Extension Contract" := "Extension Contract";
                                    CostPlusRec."Wage Component" := "Wage Component";
                                    //IF "Component Type" = "Component Type"::Expenses THEN  //call 31431
                                    //>> 160315 ITERO.AC RFC024 Get Price Factor for current Cost Type
                                    CostPlusRec.CALCFIELDS("Cost Type");
                                    lvPriceFactor := CostPlusRec.GetPrincipalCostPriceFactor( ProjCde, ProjCustCde, CostPlusRec."Cost Type") ;
                                    CostPlusRec.VALIDATE("Cost Price", "Unit Cost (LCY)" * lvPriceFactor);
                                    //<< 160315 ITERO.AC RFC024
                                    CostPlusRec."Posted Hour Line No." := "Line No.";   //Call T003566

                                    IF ("Cost Object" <> '') THEN BEGIN
                                      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, ProjCde);
                                      CostPlusRec."Cost Object" := "Cost Object";

                                      CostPlusRec.CALCFIELDS("Cost Type"); //call C008533 sn
                                      IF CostPlusRec."Cost Type" = CostPlusRec."Cost Type"::Labor THEN BEGIN
                                        SettlementSheet.INIT;
                                        IF SettlementSheet.GET(
                                          CostPlusRec."Project No.",
                                          CostPlusRec.Principal,
                                          CostPlusRec."Commission No.",
                                          CostPlusRec."Settl.Sheet No.")
                                        THEN;
                                        IF (SettlementSheet."Reference Date" = 0D) AND (GetExecutionDate <> 0D) THEN
                                          CostPlusRec."Reference Date" := GetExecutionDate;
                                      END;                               //call C008533 en

                                      CostPlusRec.GetBasicPrice;
                                    END;
                                    IF (CostPlusRec."Hour Rate Code" = '') AND
                                       (CostPlusRec."Basic Price" = 0) AND
                                       (CostPlusRec."Basic Price Found at" = '') THEN BEGIN //mg.c, 03-03-11: M23981
                                      IF lvCurrentQuantity = 0 THEN
                                        CostPlusRec."Basic Price" := "Amount (LCY)"
                                      ELSE
                                        CostPlusRec."Basic Price" := "Unit Cost (LCY)";
                                      CostPlusRec.CalcOvertimeSurcharge(CostPlusRec."Basic Price");
                                    END;
                                    CostPlusRec."Cost Component" := "Cost Component";
                                    CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;  //db, 23-06-08

                                    CostPlusRec.Quantity := lvCurrentQuantity;
                                    CostPlusRec.VALIDATE("Basic Price");
                                    CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
                                    CostPlusRec."VAT Prod. Posting Group" := ProjPrincipalRec."VAT Prod. Posting Group";

                                    //+++4PSSE
                                    IF ProjSetup."Hour Account Comm. as Descrip" THEN BEGIN
                                      CostPlusRec.Description := Comment;
                                    //IF EmplRec.GET("Employee No.") THEN BEGIN
                                    END ELSE IF EmplRec.GET("Employee No.") THEN BEGIN
                                    //---4PSSE
                                      IF "Component Type" = "Component Type"::Expenses THEN
                                        CostPlusRec.Description := Text009
                                      ELSE
                                        CostPlusRec.Description := Text010;
                                      CostPlusRec.Description := COPYSTR(CostPlusRec.Description + ' ' + EmplRec."Full Name", 1, MAXSTRLEN(CostPlusRec.Description));
                                    END ELSE
                                      CostPlusRec.Description := "Description Wage Component";
                                    IF ProjSetup."Copy Entry Description to CPE" THEN
                                      CostPlusRec.AddDateToDescription("Posting Date")
                                    ELSE
                                      CostPlusRec.GetDescription;

                                    CostPlusRec.CheckCustomer;  //db, 10-01-11

                                    CostPlusRec."Execution Date" := GetExecutionDate;

                                    // jhoek.160611.begin: melding 19134
                                    CostPlusRec."From Date" := CostPlusRec."Execution Date";
                                    CostPlusRec."From Time" := "Time From";
                                    CostPlusRec."To Date" := CostPlusRec."From Date";
                                    CostPlusRec."To Time" := "Time Until";
                                    // jhoek.160611.end

                                    CostPlusRec."Posted Hour Year" := Year;
                                    CostPlusRec."Posted Hour Week" := Week;
                                    CostPlusRec."Posted Hour Line No." := "Line No.";

                                    CostPlusRec."Source Document" := "Document No.";
                                    CostPlusRec."Reconcilation ID" := CostPlusRec.GetReconcilationID;
                                    CostPlusRec."VAT Prod. Posting Group" := CostPlusRec.UpdateVatProdPostingGrp; //RFC 547

                                    CostPlusRec.MODIFY(TRUE);

                                    // SESB.I039 ASH 05.07.2013 >>
                                    // CostPlusRec.InsertCustPlusCommentLine(Comment);  //*31668.n
                                    RecRef.GETTABLE("Posted Hour Line");
                                    HourCommentLine.SETRANGE("Table Name",HourCommentLine."Table Name"::"Posted Hour Line");
                                    HourCommentLine.SETRANGE("Record ID",RecRef.RECORDID);
                                    IF HourCommentLine.FINDSET THEN
                                      REPEAT
                                        CostPlusRec.InsertHourAccCommentLine(HourCommentLine.Comment);
                                      UNTIL HourCommentLine.NEXT = 0;
                                    // SESB.I039 ASH 05.07.2013 <<

                                    CostPlusRec.DetermineRemovalContribution;  //db, 15-06-07

                                    "Cost Plus Entry Created" := TRUE;
                                    MODIFY;
                                    CounterOK := CounterOK + 1;

                                  END; //jth n
                                END;

               ReqFilterFields=Element,Extension Contract,Posting Date;
               DataItemLink=Project No.=FIELD(No.) }

    { 8729;1   ;DataItem;                    ;
               DataItemTable=Table11012039;
               DataItemTableView=SORTING(Project No.)
                                 WHERE(Component Type=FILTER(Hours|Expenses|Expense hours),
                                       Chargeable=CONST(Yes));
               ReqFilterHeadingML=ENU=Hour Accounting;
               OnPreDataItem=BEGIN
                               WITH ProjSetup DO BEGIN
                                 IF (Job."Small Project" AND
                                     ("Small Project Cost Plus Hours" <> "Small Project Cost Plus Hours"::"All Hours"))
                                   OR
                                    (NOT Job."Small Project" AND
                                     ("Project Cost Plus Hours from" <> "Project Cost Plus Hours from"::"All Hours"))
                                 THEN
                                   CurrReport.BREAK;
                               END;

                               LOCKTABLE;
                               CounterTotal := CounterTotal + COUNT;
                             END;

               OnAfterGetRecord=VAR
                                  lvSaveHourLineRec@1100485000 : Record 11012039;
                                  SettlementSheet@1100525001 : Record 11012021;
                                  lvI@1100485001 : Integer;
                                  lvEndI@1100485002 : Integer;
                                  lvQuantity@1100525000 : Decimal;
                                  "***ITERO***"@1100285001 : Integer;
                                  HourAccounting@1100285000 : Record 11012038;
                                  lvWageComponent@1100285400 : Record 11012014;
                                BEGIN
                                  //>> 150915 ITERO.PR RFC001
                                  IF ("Cost Object" <> '') THEN BEGIN
                                    DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, ProjCde);
                                    IF DimValRec."Exclude Cost Plus" THEN
                                      CurrReport.SKIP;
                                  END;
                                  //<<RFC001

                                  //+++4PSSE
                                  IF OnlyConsentedLines THEN BEGIN
                                    IF HourAccounting.GET(Year, Week, "Employee No.") THEN BEGIN
                                      IF NOT HourAccounting.Consented THEN
                                        CurrReport.SKIP;
                                    END;
                                  END;
                                  //---4PSSE

                                  Counter := Counter + 1;
                                  Window.UPDATE(1,ROUND(Counter / CounterTotal * 10000,1));

                                  ExtContractCde := "Extension Contract";
                                  IF NOT CheckData() THEN
                                    CurrReport.SKIP;

                                  GetCommAndSettlData();
                                  CALCFIELDS(Description, "Component Type");

                                  //* Bij het boeken van de uren wordt record pas gesplitst als instelling aan staat (CU 11012005).
                                  //* Bij niet geboekte uren is dit nog niet gedaan, en moet het dus hier nog (zoals in CU11012005)
                                  IF ProjSetup."Post Hours Per Day" AND ("Component Type" = "Component Type"::Hours) THEN
                                    lvEndI := 7
                                  ELSE
                                    lvEndI := 1;

                                  lvSaveHourLineRec.COPY("Hour Accounting Line");
                                  FOR lvI := 1 TO lvEndI DO BEGIN
                                    IF lvEndI = 7 THEN BEGIN
                                      Monday := 0;
                                      Tuesday := 0;
                                      Wednesday := 0;
                                      Thursday := 0;
                                      Friday := 0;
                                      Saturday := 0;
                                      Sunday := 0;
                                      CASE lvI OF
                                        1: Monday := lvSaveHourLineRec.Monday;
                                        2: Tuesday := lvSaveHourLineRec.Tuesday;
                                        3: Wednesday := lvSaveHourLineRec.Wednesday;
                                        4: Thursday := lvSaveHourLineRec.Thursday;
                                        5: Friday := lvSaveHourLineRec.Friday;
                                        6: Saturday := lvSaveHourLineRec.Saturday;
                                        7: Sunday := lvSaveHourLineRec.Sunday;
                                      END;
                                      "Total Line" := Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday;
                                      "Amount (LCY)" := ROUND("Total Line" * "Unit Cost (LCY)");
                                      "Posting Date" := lvSaveHourLineRec."Posting Date";
                                      CheckPostingDate();  //* Functie van T11012039 waar ook posting date gevuld wordt.
                                    END;

                                    IF "Component Type" = "Component Type"::Expenses THEN
                                      lvQuantity := Quantity
                                    ELSE
                                      lvQuantity := "Total Line";

                                    //>>ADD-Exp.Hrs
                                    IF lvWageComponent.GET("Posted Hour Line"."Wage Component") THEN BEGIN
                                       IF lvWageComponent."Component Type" = lvWageComponent."Component Type" :: "Expense hours" THEN BEGIN
                                          IF ProjSetup."Project Cost Plus Hours from" = ProjSetup."Project Cost Plus Hours from" :: "All Hours" THEN
                                             lvQuantity := "Total Line";
                                       END;
                                    END;
                                    //<<ADD-Exp.Hrs

                                    IF lvQuantity <> 0 THEN BEGIN
                                      CostPlusRec.INIT;
                                      CostPlusRec."Project No." := ProjCde;
                                      CostPlusRec.Principal := ProjCustCde;
                                      CostPlusRec."Commission No." := ProjCommCde;
                                      CostPlusRec."Settl.Sheet No." := ProjSettlCde;
                                      CostPlusRec."Line No." := CostPlusRec.GetCostPlusFirstFreeLine(
                                        ProjCde, ProjCustCde, ProjCommCde, ProjSettlCde);  //db, 10-01-11
                                      CostPlusRec.INSERT(TRUE);

                                      CostPlusRec."Employee No." := "Employee No.";
                                      CostPlusRec.Element := Element;
                                      CostPlusRec."Extension Contract" := "Extension Contract";
                                      CostPlusRec."Wage Component" := "Wage Component";
                                      IF "Component Type" = "Component Type"::Expenses THEN
                                        CostPlusRec.VALIDATE("Cost Price", "Unit Cost (LCY)");
                                      IF ("Cost Object" <> '') THEN BEGIN
                                        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, ProjCde);
                                        CostPlusRec."Cost Object" := "Cost Object";

                                        CostPlusRec.CALCFIELDS("Cost Type"); //call C008533 sn
                                        IF CostPlusRec."Cost Type" = CostPlusRec."Cost Type"::Labor THEN BEGIN
                                          SettlementSheet.INIT;
                                          IF SettlementSheet.GET(
                                            CostPlusRec."Project No.",
                                            CostPlusRec.Principal,
                                            CostPlusRec."Commission No.",
                                            CostPlusRec."Settl.Sheet No.")
                                          THEN;
                                          IF (SettlementSheet."Reference Date" = 0D) AND (GetExecutionDate <> 0D) THEN
                                            CostPlusRec."Reference Date" := GetExecutionDate;
                                        END;                               //call C008533 en

                                        CostPlusRec.GetBasicPrice;
                                      END;
                                      CostPlusRec."Cost Component" := "Cost Component";
                                      CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;  //db, 23-06-08

                                      CostPlusRec.Quantity := lvQuantity;
                                      CostPlusRec.VALIDATE("Basic Price");
                                      CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
                                      CostPlusRec."VAT Prod. Posting Group" := ProjPrincipalRec."VAT Prod. Posting Group";

                                      //+++4PSSE
                                      IF ProjSetup."Hour Account Comm. as Descrip" THEN BEGIN
                                        CostPlusRec.Description := Comment;
                                      //IF EmplRec.GET("Employee No.") THEN BEGIN
                                      END ELSE IF EmplRec.GET("Employee No.") THEN BEGIN
                                      //---4PSSE
                                        IF "Component Type" = "Component Type"::Expenses THEN
                                          CostPlusRec.Description := Text009
                                        ELSE
                                          CostPlusRec.Description := Text010;
                                        CostPlusRec.Description := COPYSTR(CostPlusRec.Description + ' ' + EmplRec."Full Name", 1, MAXSTRLEN(CostPlusRec.Description
                                  ))
                                      END ELSE
                                        CostPlusRec.Description := Description;
                                      IF ProjSetup."Copy Entry Description to CPE" THEN
                                        CostPlusRec.AddDateToDescription("Posting Date")
                                      ELSE
                                        CostPlusRec.GetDescription;

                                      CostPlusRec."Execution Date" := GetExecutionDate;

                                      // jhoek.160611.begin: melding 19134
                                      CostPlusRec."From Date" := CostPlusRec."Execution Date";
                                      CostPlusRec."From Time" := "Time From";
                                      CostPlusRec."To Date" := CostPlusRec."From Date";
                                      CostPlusRec."To Time" := "Time Until";
                                      // jhoek.1606011.end

                                      CostPlusRec.CheckCustomer;  //db, 10-01-11

                                      CostPlusRec."Source Document" := "Document No.";
                                      CostPlusRec."Reconcilation ID" := CostPlusRec.GetReconcilationID;
                                      CostPlusRec."VAT Prod. Posting Group" := CostPlusRec.UpdateVatProdPostingGrp; //RFC 547

                                      CostPlusRec.MODIFY(TRUE);

                                      // SESB.I039 ASH 05.07.2013 >>
                                      // CostPlusRec.InsertCustPlusCommentLine(Comment);  //*31668.n
                                      RecRef.GETTABLE("Hour Accounting Line");
                                      HourCommentLine.RESET;
                                      HourCommentLine.SETRANGE("Table Name",HourCommentLine."Table Name"::"Hour Accounting Line");
                                      HourCommentLine.SETRANGE("Record ID",RecRef.RECORDID);
                                      IF HourCommentLine.FINDSET THEN
                                      REPEAT
                                        CostPlusRec.InsertHourAccCommentLine(HourCommentLine.Comment);
                                      UNTIL HourCommentLine.NEXT = 0;
                                      // SESB.I039 ASH 05.07.2013 <<

                                      CounterOK := CounterOK + 1;
                                    END;
                                  END;
                                  "Hour Accounting Line".COPY(lvSaveHourLineRec);

                                  "Cost Plus Entry Created" := TRUE;
                                  MODIFY;
                                  IF "Connection No." > 0 THEN BEGIN
                                    HourAccProjectLine.SETCURRENTKEY("Connection No.");
                                    HourAccProjectLine.SETRANGE("Connection No.", "Connection No.");
                                    IF HourAccProjectLine.FIND('-') THEN BEGIN
                                      HourAccProjectLine."Cost Plus Entry Created" := TRUE;
                                      HourAccProjectLine.MODIFY;
                                    END;
                                  END;
                                END;

               ReqFilterFields=Element,Extension Contract,Posting Date;
               DataItemLink=Project No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               RestQuantityStartDateEditable := TRUE;
             END;

      OnOpenPage=BEGIN
                   IF gvSelection = FALSE THEN BEGIN
                     CustCde := '';
                     CommCde := '';
                     SettlCde := '';
                   END ELSE BEGIN  //db, 18-07-08
                     CustCde := gvCust;
                     CommCde := gvComm;
                     SettlCde := gvSheet;
                   END;
                   gRepeatForRestQuantitity := FALSE;

                   IF (ProjCde <> '') THEN BEGIN
                     ProjPrincipalRec.SETRANGE("Project No.", ProjCde);
                     ProjPrincipalRec.SETRANGE("Cost Plus Customer",TRUE);
                     IF ProjPrincipalRec.FINDFIRST THEN
                       CustCde := ProjPrincipalRec.Principal;

                     CommRec.SETRANGE("Project No.", ProjCde);
                     CommRec.SETRANGE(Principal, CustCde);
                     CASE CommRec.COUNT OF
                       0: CommCde := '1';
                       1: BEGIN
                            CommRec.FIND('-');
                            CommCde := CommRec."No.";
                          END;
                     END;

                     IF CommCde <> '' THEN BEGIN
                       SettlRec.SETRANGE("Project No.", ProjCde);
                       SettlRec.SETRANGE(Principal, CustCde);
                       SettlRec.SETRANGE("Commission No.", CommCde);
                       CASE SettlRec.COUNT OF
                         0: SettlCde := '1';
                         1: BEGIN
                              SettlRec.FIND('-');
                              SettlCde := SettlRec."No.";
                            END;
                       END;
                     END;
                   END;

                   IF gRepeatForRestQuantitity AND
                     ((ProjSetup."Small Project Cost Plus Hours" =
                       ProjSetup."Small Project Cost Plus Hours"::"All Hours") OR
                      (ProjSetup."Project Cost Plus Hours from" =
                       ProjSetup."Project Cost Plus Hours from"::"All Hours"))
                   THEN
                     gRepeatForRestQuantitity := FALSE;
                   SetReqForm(NOT GUIALLOWED); // LAHE 130529

                   RestQuantityStartDateEditable := gRepeatForRestQuantitity;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1210190004;2;Field  ;
                  CaptionML=ENU=Principal;
                  SourceExpr=CustCde;
                  OnValidate=BEGIN
                               IF CustCde <> '' THEN
                                 ProjPrincipalRec.GET(ProjCde, CustCde);
                             END;

                  OnLookup=BEGIN
                             ProjPrincipalRec.RESET;
                             ProjPrincipalRec.SETRANGE("Project No.", ProjCde);
                             IF PAGE.RUNMODAL(PAGE::"Project Principal List", ProjPrincipalRec) = ACTION::LookupOK THEN
                               CustCde := ProjPrincipalRec.Principal;
                           END;
                            }

      { 1210190002;2;Field  ;
                  CaptionML=ENU=Commission No.;
                  SourceExpr=CommCde;
                  OnValidate=BEGIN
                               IF CommCde <> '' THEN //mg, 03-03-11: M22568
                                 CommRec.GET(ProjCde, CustCde, CommCde);
                             END;

                  OnLookup=BEGIN
                             CommRec.SETRANGE("Project No.", ProjCde);
                             CommRec.SETRANGE(Principal, CustCde);
                             IF PAGE.RUNMODAL(PAGE::"Commission List", CommRec) = ACTION::LookupOK THEN
                               CommCde := CommRec."No.";
                           END;
                            }

      { 1210190000;2;Field  ;
                  CaptionML=ENU=Settlement Sheet;
                  SourceExpr=SettlCde;
                  OnValidate=BEGIN
                               IF SettlCde <> '' THEN //mg, 03-03-11: M22568
                                 SettlRec.GET(ProjCde, CustCde, CommCde, SettlCde);
                             END;

                  OnLookup=BEGIN
                             SettlRec.SETRANGE("Project No.", ProjCde);
                             SettlRec.SETRANGE(Principal, CustCde);
                             SettlRec.SETRANGE("Commission No.", CommCde);
                             IF PAGE.RUNMODAL(PAGE::"Settlement Sheet List", SettlRec) = ACTION::LookupOK THEN
                               SettlCde := SettlRec."No.";
                           END;
                            }

      { 1100485000;2;Field  ;
                  CaptionML=ENU=Process not Invoiced Quantity;
                  SourceExpr=gRepeatForRestQuantitity;
                  OnValidate=BEGIN
                               IF gRepeatForRestQuantitity AND
                                 ((ProjSetup."Small Project Cost Plus Hours" =
                                   ProjSetup."Small Project Cost Plus Hours"::"All Hours") OR
                                  (ProjSetup."Project Cost Plus Hours from" =
                                   ProjSetup."Project Cost Plus Hours from"::"All Hours"))
                               THEN
                                 ERROR(Text011);

                               RestQuantityStartDateEditable := gRepeatForRestQuantitity;
                             END;
                              }

      { 1100485002;2;Field  ;
                  Name=RestQuantityStartDate;
                  CaptionML=ENU=Not Invoiced From Posting Date;
                  SourceExpr=RestQuantityStartDate;
                  Editable=RestQuantityStartDateEditable }

      { 1100485004;2;Field  ;
                  Name=CompressCPE;
                  CaptionML=ENU=Compress Cost Plus Entries;
                  SourceExpr=CompressCPE }

      { 1100485006;2;Field  ;
                  Name=ConvertUnit;
                  CaptionML=ENU=Convert Purchase-Inventory Unit;
                  SourceExpr=ConvertUnit }

      { 1100525002;2;Field  ;
                  CaptionML=ENU=Automatic Translation;
                  SourceExpr=AutoTranslate }

      { 1100528500;2;Field  ;
                  CaptionML=ENU=Specify Serial and Lot No.'s;
                  SourceExpr=SpecifySerialAndLot }

      { 1100525000;2;Field  ;
                  CaptionML=ENU=Sorting Project Ledger Entries;
                  OptionCaptionML=ENU=Cost Type - Cost Object,Entry No.;
                  SourceExpr=SortEntry }

      { 1100285000;2;Field  ;
                  CaptionML=ENU=Exclude not consented lines;
                  SourceExpr=OnlyConsentedLines }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012011 : TextConst 'ENU=Creating Cost Plus Entries....\\';
      Text001@11012012 : TextConst 'ENU=Percentage Finished  @1@@@@@@@@@@@@@\';
      Text002@11012013 : TextConst 'ENU=Project Status of Project %1 could not be %2';
      Text005@11012016 : TextConst 'ENU=Generated Commission';
      Text006@11012017 : TextConst 'ENU=Generated Settlement Sheet';
      Text007@11012018 : TextConst 'ENU=There are no Cost Plus Entries created.';
      Text008@11012019 : TextConst 'ENU=%1 Cost Plus Entries have been created.';
      ProjSetup@1210190004 : Record 315;
      CostPlusRec@11012000 : Record 11012019;
      CostPlusRec2@1210190019 : Record 11012019;
      TmpProjRec@1100525005 : TEMPORARY Record 11072003;
      ExtRec@1210190011 : Record 11012004;
      CommRec@1210190003 : Record 11012020;
      SettlRec@11012004 : Record 11012021;
      ProjPrincipalRec@1210190005 : Record 11012005;
      CustRec@1100485009 : Record 18;
      EmplRec@1210190018 : Record 5200;
      TradeItemRec@1100485006 : Record 11012317;
      BasicItemRec@1100485007 : Record 11012316;
      ItemRec@1100485008 : Record 27;
      DimValRec@1210190007 : Record 349;
      HourAccProjectLine@1100485000 : Record 11020225;
      JobLedgEntryFilterRec@1100485014 : Record 11072005;
      WageCompRec@1100525001 : Record 11012014;
      DimMgt@1210190006 : Codeunit 408;
      CompressCu@1100485013 : Codeunit 11012043;
      Window@1210190013 : Dialog;
      RestQuantityStartDate@1100485011 : Date;
      SettlMethod@1210190012 : 'Fixed Price,Cost Plus';
      SortEntry@1100525002 : 'CostTypeObject,EntryNo';
      gRepeatForRestQuantitity@1100485001 : Boolean;
      RestQuanLedgEntryAlso@1100485005 : Boolean;
      RestQuanPostedHourLineAlso@1100485002 : Boolean;
      ConvertUnit@1100485015 : Boolean;
      CompressCPE@1100485012 : Boolean;
      Counter@11012006 : Integer;
      CounterOK@11012007 : Integer;
      CounterTotal@1210190009 : Integer;
      InvoicedQuantityPostedHourLine@1100485004 : Decimal;
      SettlCde@1210190000 : Code[20];
      CommCde@1210190001 : Code[20];
      CustCde@1210190008 : Code[20];
      ProjCde@1210190002 : Code[20];
      ExtContractCde@1210190014 : Code[10];
      Text009@1100525000 : TextConst 'ENU=Expense';
      Text010@1210190017 : TextConst 'ENU=Hours';
      Text011@1100485003 : TextConst 'ENU=Project Setup "(Small) Project Cost Plus Hours from" must be Posted Hours or Project Ledger Entries';
      Text012@1100485010 : TextConst 'ENU=No';
      gvSelection@1100485016 : Boolean;
      gvCust@1100485019 : Code[20];
      gvComm@1100485018 : Code[20];
      gvSheet@1100485017 : Code[20];
      AutoTranslate@1100525003 : Boolean;
      GetSettleInfoPerProject@1210190015 : Boolean;
      RestQuantityStartDateEditable@19077982 : Boolean INDATASET;
      SpecifySerialAndLot@1100528500 : Boolean;
      ProjCustCde@1100528501 : Code[20];
      ProjCommCde@1100528502 : Code[20];
      ProjSettlCde@1100528503 : Code[20];
      HourCommentLine@1100294001 : Record 11128234;
      RecRef@1100294000 : RecordRef;
      "-EVRY-"@1100285500 : Integer;
      NoMessage@1100285501 : Boolean;
      "***4PSSE**"@1100285001 : Integer;
      OnlyConsentedLines@1100285000 : Boolean;
      JobProjectStatusFilter@1000000002 : Text;
      HideMessage@1100528600 : Boolean;

    PROCEDURE ProcessJobLedgerEntry@1100485001(VAR VarJobLedgEntryRec@1100485000 : Record 11072005) : Boolean;
    VAR
      NSItemTrackingRelation@1100528500 : Record 11071905;
      NSItemTrackingEntry@1100528502 : Record 11071902;
      SerialJobLedgEntry@1100528504 : Record 11072005;
      TotQuanSpecified@1100528501 : Decimal;
    BEGIN
      WITH VarJobLedgEntryRec DO BEGIN
        Counter := Counter + 1;
        Window.UPDATE(1,ROUND(Counter / CounterTotal * 10000,1));

        ExtContractCde := "Extension Contract";
        IF NOT CheckData() THEN
          EXIT(FALSE);

        GetCommAndSettlData();

        //DP00121.sn
        NSItemTrackingRelation.SETCURRENTKEY("Project Ledger Entry No.");
        NSItemTrackingRelation.SETRANGE("Project Ledger Entry No.", VarJobLedgEntryRec."Entry No.");
        IF SpecifySerialAndLot AND NOT NSItemTrackingRelation.ISEMPTY THEN BEGIN
          NSItemTrackingRelation.FINDSET;
          REPEAT
            NSItemTrackingEntry.GET(NSItemTrackingRelation."Item Tracking Entry No.");
            SerialJobLedgEntry := VarJobLedgEntryRec;
            SerialJobLedgEntry.Quantity := NSItemTrackingEntry.Quantity;
            TotQuanSpecified := TotQuanSpecified + NSItemTrackingEntry.Quantity;
            GenerateCostPlusFromProjEntry(
              SerialJobLedgEntry, NSItemTrackingEntry."Serial No.", NSItemTrackingEntry."Lot No.");
          UNTIL NSItemTrackingRelation.NEXT = 0;
          IF Quantity <> TotQuanSpecified THEN BEGIN
            SerialJobLedgEntry := VarJobLedgEntryRec;
            SerialJobLedgEntry.Quantity := Quantity - TotQuanSpecified;
            GenerateCostPlusFromProjEntry(SerialJobLedgEntry, '','');
          END;
        END ELSE
        //DP00121.en
          GenerateCostPlusFromProjEntry(VarJobLedgEntryRec,'','');

        //db.sn, 20-09-10: M20069
        TmpProjRec."No." := "Job No.";
        IF TmpProjRec.INSERT THEN;
        //db.en, 20-09-10: M20069

        "Cost Plus Entry Created" := TRUE;
        MODIFY;
        CounterOK := CounterOK + 1;

      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckData@1210190006() : Boolean;
    BEGIN
      SettlMethod := Job."Settlement Method";
      IF ExtContractCde <> '' THEN BEGIN
        ExtRec.GET(ProjCde, ExtContractCde);
        SettlMethod := ExtRec."Settlement Method";
      END;
      IF SettlMethod = SettlMethod::"Fixed Price" THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF (ProjSetup."Provisions at Closure") THEN BEGIN
          IF Job."Project Status" >= Job."Project Status"::Archive THEN
            ERROR(Text002,ProjCde,Job."Project Status");
        END ELSE BEGIN
          IF Job."Project Status" >= Job."Project Status"::"Administrative Finished" THEN
            ERROR(Text002,ProjCde,Job."Project Status");
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetCommAndSettlData@1210190013();
    VAR
      JobSetup@1100285300 : Record 315;
    BEGIN
      JobSetup.GET();
      IF ProjCustCde = '' THEN
        GetCostPlusCust(ProjCde, ProjCustCde);

      IF ProjCustCde <> '' THEN BEGIN
        IF NOT SettlRec.GET(ProjCde, ProjCustCde, ProjCommCde, ProjSettlCde) THEN BEGIN
          IF ProjCommCde = '1' THEN BEGIN
            IF NOT CommRec.GET(ProjCde, ProjCustCde, ProjCommCde) THEN BEGIN
              CommRec.INIT;
              CommRec."Project No." := ProjCde;
              CommRec.Principal := ProjCustCde;
              CommRec."No." := ProjCommCde;
              CommRec.Description := Text005;
              //CommRec."Collect Invoices By" := JobSetup."Default Collect Invoices By"; //from customer, is done in InitRecord
              CommRec.InitRecord();
              CommRec.INSERT;
            END;
          END;
          IF ProjCommCde <> '' THEN BEGIN
            IF ProjSettlCde = '1' THEN BEGIN
              IF NOT SettlRec.GET(ProjCde, ProjCustCde, ProjCommCde, ProjSettlCde) THEN BEGIN
                SettlRec.INIT;
                SettlRec."Project No." := ProjCde;
                SettlRec.Principal := ProjCustCde;
                SettlRec."Commission No." := ProjCommCde;
                SettlRec."No." := ProjSettlCde;
                SettlRec.Description := Text006;
                //>> 151228 ITERO.SB SE Use default status from Jobs Setup
                SettlRec.Status := JobSetup."Default Seattlement Status";
                //<<
                SettlRec.INSERT;
              END;
            END;
          END;
        END;
      END;

      ProjPrincipalRec.GET(ProjCde, ProjCustCde);
      CommRec.GET(ProjCde, ProjCustCde, ProjCommCde);
      SettlRec.GET(ProjCde, ProjCustCde, ProjCommCde, ProjSettlCde);
    END;

    PROCEDURE GetCostPlusCust@1210190003(lvProj@1210190000 : Code[20];VAR lvCust@1210190001 : Code[20]);
    VAR
      ProjectPrincipal@1100409000 : Record 11012005;
    BEGIN
      ProjectPrincipal.SETRANGE("Project No.",lvProj);
      ProjectPrincipal.SETRANGE("Cost Plus Customer",TRUE);
      ProjectPrincipal.FINDFIRST; //Must be present

      lvCust := ProjectPrincipal.Principal;
    END;

    PROCEDURE SetDefault@1210190001(lvProj@1210190000 : Code[20]);
    BEGIN
      ProjCde := lvProj;
    END;

    PROCEDURE SetSelection@1100485000(lvProj@1210190000 : Code[20];lvCust@1100485000 : Code[20];lvComm@1100485001 : Code[20];lvSheet@1100485002 : Code[20]);
    BEGIN
      ProjCde := lvProj;
      gvCust := lvCust;
      gvComm := lvComm;
      gvSheet := lvSheet;
      gvSelection := TRUE;  //db, 18-07-08
    END;

    PROCEDURE CheckCompressLines@1100525002();
    BEGIN
      //db, 20-09-10: M20069
      IF CompressCPE THEN BEGIN
        CostPlusRec.RESET;
        IF TmpProjRec.FINDFIRST THEN BEGIN
          REPEAT
           CostPlusRec.SETRANGE("Project No.", TmpProjRec."No.");
           IF CostPlusRec.FINDFIRST THEN BEGIN
             REPEAT
               CostPlusRec.MARK(TRUE);
             UNTIL CostPlusRec.NEXT = 0;
           END;
          UNTIL TmpProjRec.NEXT = 0;
        END;
        CostPlusRec.MARKEDONLY(TRUE);
        IF Job.GETFILTER("No.") <> '' THEN
          CostPlusRec.SETFILTER("Project No.", Job.GETFILTER("No."));
        IF "Job Ledger Entry".GETFILTER("Job No.") <> '' THEN
          CostPlusRec.SETFILTER("Project No.", "Job Ledger Entry".GETFILTER("Job No."));
        IF CostPlusRec.FINDFIRST THEN
          CompressCu.ProcessProjectCostPlus(CostPlusRec);
      END;
    END;

    PROCEDURE Check1Princip1Comm1Settl@1210190002(JobNo@1210190000 : Code[20];VAR ProjCustCde@1210190001 : Code[20];VAR ProjCommCde@1210190002 : Code[20];VAR ProjSettlCde@1210190003 : Code[10]) : Boolean;
    VAR
      ProjectPrincipal@1210190004 : Record 11012005;
      Commission@1210190005 : Record 11012020;
      SettlementSheet@1210190006 : Record 11012021;
    BEGIN
      //T000461 reconstructed
      ProjectPrincipal.SETRANGE("Project No.", JobNo);
      ProjectPrincipal.SETRANGE("Cost Plus Customer",TRUE); //W003470
      IF ProjectPrincipal.COUNT <> 1 THEN
        EXIT(FALSE);

      ProjectPrincipal.FINDFIRST;
      ProjCustCde := ProjectPrincipal.Principal;

      Commission.SETRANGE("Project No.", ProjectPrincipal."Project No.");
      Commission.SETRANGE(Principal, ProjectPrincipal.Principal);
      CASE Commission.COUNT OF
        0:
          EXIT(TRUE); //commission will be generated if cost plus lines are generated (in GetCommAndSettlData)
        1:
          BEGIN
            Commission.FINDFIRST;
            ProjCommCde := Commission."No.";

            SettlementSheet.SETRANGE("Project No.", Commission."Project No.");
            SettlementSheet.SETRANGE(Principal, Commission.Principal);
            SettlementSheet.SETRANGE("Commission No.", Commission."No.");
            CASE SettlementSheet.COUNT OF
              0:
                EXIT(TRUE); //settlement will be generated if cost plus lines are generated
              1:
                BEGIN
                  SettlementSheet.FINDFIRST;
                  ProjSettlCde := SettlementSheet."No.";
                  EXIT(TRUE); //exactly one settlement present, which is good.
                END;
              ELSE
                EXIT(FALSE); //several settlements present, user has to choose
            END;
          END;
        ELSE
          EXIT(FALSE); //several commissions present, user has to choose
      END;
    END;

    PROCEDURE GenerateCostPlusFromProjEntry@1100528501(VAR JobLedgerEntry@1100528500 : Record 11072005;SerialNo@1100528501 : Code[40];LotNo@1100528502 : Code[20]);
    BEGIN
      //DP00121
      //db.sn, 10-01-11: M22696
      CostPlusRec.GenerateCostPlusFromProjEntry(JobLedgerEntry,
        ProjCde, ProjCustCde, ProjCommCde, ProjSettlCde,
        RestQuanLedgEntryAlso, RestQuantityStartDate,
        ConvertUnit, AutoTranslate,    //db, 07-07-11: M21954
        SerialNo, LotNo); //DP00121
      //db.en, 10-01-11: M22696
    END;

    LOCAL PROCEDURE "---EVRY---"@1000000000();
    BEGIN
    END;

    PROCEDURE SetReqForm@1000000001(IHideMessage@1100528600 : Boolean);
    BEGIN
      HideMessage := IHideMessage;
      IF gvSelection = FALSE THEN BEGIN
        CustCde := '';
        CommCde := '';
        SettlCde := '';
      END ELSE BEGIN  //db, 18-07-08
        CustCde := gvCust;
        CommCde := gvComm;
        SettlCde := gvSheet;
      END;
      gRepeatForRestQuantitity := FALSE;

      IF (ProjCde <> '') THEN BEGIN
        ProjPrincipalRec.SETRANGE("Project No.", ProjCde);
        ProjPrincipalRec.SETRANGE("Cost Plus Customer",TRUE);
        IF ProjPrincipalRec.FINDFIRST THEN
          CustCde := ProjPrincipalRec.Principal;

        CommRec.SETRANGE("Project No.", ProjCde);
        CommRec.SETRANGE(Principal, CustCde);
        CASE CommRec.COUNT OF
          0: CommCde := '1';
          1: BEGIN
               CommRec.FIND('-');
               CommCde := CommRec."No.";
             END;
        END;

        IF CommCde <> '' THEN BEGIN
          SettlRec.SETRANGE("Project No.", ProjCde);
          SettlRec.SETRANGE(Principal, CustCde);
          SettlRec.SETRANGE("Commission No.", CommCde);
          CASE SettlRec.COUNT OF
            0: SettlCde := '1';
            1: BEGIN
                 SettlRec.FIND('-');
                 SettlCde := SettlRec."No.";
               END;
          END;
          //>> 150319 ITERO.SB IME-320 Handle more than one settlement sheet
          IF SettlRec.COUNT > 1 THEN BEGIN
            //>> 160628 ITERO.AC IME476 Set current settlement sheet as default
            IF gvSheet <> '' THEN BEGIN
              SettlRec.SETRANGE("No.", gvSheet);
              IF SettlRec.COUNT = 1 THEN BEGIN
                SettlRec.SETRANGE("No.");
                SettlCde := gvSheet;
              END ELSE BEGIN
                SettlRec.SETRANGE("No.");
                SettlRec.FINDLAST;
                SettlCde := SettlRec."No.";
              END;
            END ELSE BEGIN
            //<< 160628 ITERO.AC IME476
              SettlRec.FINDLAST;
              SettlCde := SettlRec."No.";
            END;  // 160628 ITERO.AC IME476
          END;
          //<<
        END;
      END;

      IF gRepeatForRestQuantitity AND
        ((ProjSetup."Small Project Cost Plus Hours" =
          ProjSetup."Small Project Cost Plus Hours"::"All Hours") OR
         (ProjSetup."Project Cost Plus Hours from" =
          ProjSetup."Project Cost Plus Hours from"::"All Hours"))
      THEN
        gRepeatForRestQuantitity := FALSE;

      RestQuantityStartDateEditable := gRepeatForRestQuantitity;

      //IME-382
      Job.SETRANGE("Project Status",0,Job."Project Status"::"Technical Finished");
      JobProjectStatusFilter := Job.GETFILTER("Project Status");
    END;

    BEGIN
    {
      db, 10-02-12: M31700, DataItemTableView changed: SORTING(Job No.,Posting Date) -> (Job No., Cost Type, Global Dimension 2 Code)
      IMSE-005
      LAHE 130529 Moved code from OnOpenForm (reqform) to SetReqForm for external use (c11020217)
      LAHE 130705 Suppress Message

      SESB.I039 Extend no of characters in hour line
         ASH 05.07.2013 Trigger "Posted Hour Line - OnAfterGetRecord" changed
         ASH 05.07.2013 Trigger "Hour Accounting Line - OnAfterGetRecord" changed


      4PSSE.MK 30.08.2013 New setup to decide the report to only post hour account lines that are consented
                          + The comment field owerwrites the description on Project Cost Plus table

      ADD-Exp.Hrs 14-02-04  GHE   Wage Component is "Expense Hours" - change Calculation
                                  - Posted Hour Line
                                  - Hour Accounting Line
      150319 ITERO.SB IME-320 Handle more than one settlement sheet

      150915 ITERO.PR RFC001
      151201 ITERO.DL IME382 create prognosis stops with error if project is closed, extra code in SetReqForm()
                              used in Job - OnPreDataItem()
      151228 ITERO.SB SE Use default status from Jobs Setup
      160628 ITERO.AC IME476 Set current/calling settlement sheet as default in SetReqForm()
    }
    END.
  }
  RDLDATA
  {
  }
}

