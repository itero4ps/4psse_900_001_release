OBJECT Report 11012037 Archive Projects
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11072005=rid;
    CaptionML=ENU=Archive Projects;
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  lvProjRec@1100485000 : Record 11072003;
                  lvProjEntryRec@1100485001 : Record 11072005;
                  lvProjNoLastEntry@1100485002 : Code[20];
                BEGIN
                  IF DeleteBln THEN BEGIN
                    //* Verwijderen laatste projectpost niet toegestaan (ivm bepalen eerste vrije postnummer),
                    //* want dan worden postnummers opnieuw gebruikt bij andere project(en).
                    //* Als die projecten dan later gearchiveerd worden krijg je melding 'Postnummer bestaat al'.
                    IF lvProjEntryRec.FINDLAST THEN BEGIN
                      lvProjNoLastEntry := lvProjEntryRec."Job No.";

                      lvProjRec.COPYFILTERS(Job);
                      lvProjRec.FILTERGROUP(10);
                      lvProjRec.SETRANGE("No.", lvProjNoLastEntry);
                      lvProjRec.FILTERGROUP(0);
                      IF NOT lvProjRec.ISEMPTY THEN
                        ERROR(Text034, lvProjRec."No.");
                    END;
                  END;
                END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=WHERE(Project Status=CONST(Archive));
               OnPreDataItem=BEGIN
                               ProjRec.COPYFILTERS(Job);
                               IF NOT ProjRec.FINDFIRST THEN
                                 MESSAGE(Text000);

                               ProjSetUp.GET;
                               ProjSetUp.TESTFIELD("Archive Company");

                               ArchCommonData;
                             END;

               OnAfterGetRecord=BEGIN
                                  ArchProjects;
                                END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=ENU=Remove Projects;
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=ENU=Remove Projects;
                  SourceExpr=DeleteBln }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012064 : TextConst 'ENU=There are no Projects on Status Archive';
      Text001@11012065 : TextConst 'ENU=Project               #1##########\\';
      Text002@11012066 : TextConst 'ENU=Busy With             #2#################### @3@@@@@@@@@@@@@';
      Text003@11012067 : TextConst 'ENU=Projects';
      Text004@11012068 : TextConst 'ENU=Units';
      Text005@11012069 : TextConst 'ENU=Rates';
      Text006@11012070 : TextConst 'ENU=Project %1 already exists in Archive Company';
      Text007@11012071 : TextConst 'ENU=Budget';
      Text008@11012072 : TextConst 'ENU=Budget Quantity';
      Text009@11012073 : TextConst 'ENU=Budget Adjustments';
      Text010@11012074 : TextConst 'ENU=Extensions';
      Text011@11012075 : TextConst 'ENU=Project Principals';
      Text012@11012076 : TextConst 'ENU=Progress';
      Text013@11012077 : TextConst 'ENU=Progress Lines';
      Text014@11012078 : TextConst 'ENU=Project responsible persons';
      Text015@11012079 : TextConst 'ENU=Project Elements';
      Text016@11012080 : TextConst 'ENU=Project Installments';
      Text017@11012081 : TextConst 'ENU=House Types';
      Text018@11012082 : TextConst 'ENU=Plots';
      Text019@11012083 : TextConst 'ENU=Cost Plus Entries';
      Text020@11012084 : TextConst 'ENU=Options';
      Text021@11012085 : TextConst 'ENU=Commisions';
      Text022@11012086 : TextConst 'ENU=Settlement Sheets';
      Text023@11012087 : TextConst 'ENU=Option Budgets';
      Text024@11012088 : TextConst 'ENU=Purchase Actions';
      Text025@11012089 : TextConst 'ENU=Project Hour Rates';
      Text026@11012090 : TextConst 'ENU=Payment Agreements';
      Text027@11012091 : TextConst 'ENU=Prognosis';
      Text028@11012092 : TextConst 'ENU=Prognosis Lines';
      Text029@11012093 : TextConst 'ENU=Project Locations';
      Text030@11012094 : TextConst 'ENU=Project Ledger Entries';
      Text031@11012095 : TextConst 'ENU=Delete';
      ProjRec@11012002 : Record 11072003;
      BudgetRec@11012003 : Record 11012001;
      Budget1Rec@11012004 : Record 11012001;
      BudgetQuantityRec@11012005 : Record 11012002;
      BudgetQuant1Rec@11012006 : Record 11012002;
      BudgetAdjustmentRec@11012007 : Record 11012003;
      BudgetAdjustm1Rec@11012008 : Record 11012003;
      ExtensionRec@11012009 : Record 11012004;
      Extension1Rec@11012010 : Record 11012004;
      ProjPrincipRec@11012011 : Record 11012005;
      ProjPrincipal1Rec@11012012 : Record 11012005;
      ProgrRec@11012013 : Record 11012036;
      Progr1Rec@11012014 : Record 11012036;
      ProgrLineRec@11012015 : Record 11012037;
      ProgrLine1Rec@11012016 : Record 11012037;
      ProjResponsRec@11012017 : Record 11012040;
      ProjRespons1Rec@11012018 : Record 11012040;
      ProjElemRec@11012019 : Record 11012010;
      ProjElem1Rec@11012020 : Record 11012010;
      ProjInstalmRec@11012021 : Record 11012018;
      ProjInstalm1Rec@11012022 : Record 11012018;
      HouseModRec@11012023 : Record 11012501;
      HouseMod1Rec@11012024 : Record 11012501;
      MainGroupRec@1210190004 : Record 11012509;
      MainGroup1Rec@1210190007 : Record 11012509;
      GroupRec@1210190005 : Record 11012504;
      Group1Rec@1210190008 : Record 11012504;
      SubGroupRec@1210190006 : Record 11012505;
      SubGroup1Rec@1210190009 : Record 11012505;
      PlotNoRec@11012025 : Record 11012500;
      PlotNo1Rec@11012026 : Record 11012500;
      CostPlusRec@11012027 : Record 11012019;
      CostPlus1Rec@11012028 : Record 11012019;
      OptionRec@11012029 : Record 11012502;
      Option1Rec@11012030 : Record 11012502;
      CommRec@11012031 : Record 11012020;
      Comm1Rec@11012032 : Record 11012020;
      SettlSheetRec@11012033 : Record 11012021;
      SettlSheet1Rec@11012034 : Record 11012021;
      OptionBudgetRec@11012035 : Record 11012503;
      OptionBudget1Rec@11012036 : Record 11012503;
      ProjPurchActRec@11012037 : Record 11012026;
      ProjPurchAction1Rec@11012038 : Record 11012026;
      ProjPrincHourRateRec@11012039 : Record 11012024;
      ProjPrincHourRate1Rec@11012040 : Record 11012024;
      PaymAgreemRec@11012041 : Record 11012028;
      PaymAgreem1Rec@11012042 : Record 11012028;
      PrognRec@11012043 : Record 11012034;
      Progn1Rec@11012044 : Record 11012034;
      PrognLineRec@11012045 : Record 11012035;
      PrognLine1Rec@11012046 : Record 11012035;
      ProjLocRec@11012047 : Record 11012011;
      ProjLoc1Rec@11012048 : Record 11012011;
      ProjectLedgerRec@11012049 : Record 11072005;
      ProjectLedger1Rec@11012050 : Record 11072005;
      ProjSetUp@11012051 : Record 315;
      UnitRec@11012054 : Record 204;
      Unit1Rec@11012055 : Record 204;
      DimValRec@11012056 : Record 349;
      DimVal1Rec@11012057 : Record 349;
      BudgetRateRec@11012058 : Record 11012000;
      BudgRate1Rec@11012059 : Record 11012000;
      ProjBudgetRateRec@1100485000 : Record 11020231;
      ProjBudgetRate1Rec@1100485001 : Record 11020231;
      PreclosureRec@1210190001 : Record 11012093;
      Preclosure1Rec@1210190002 : Record 11012093;
      CommLineRec@1100485003 : Record 97;
      CommLine1Rec@1100485002 : Record 97;
      SourceProjectPlanningActivity@1100525000 : Record 11012431;
      TargetProjectPlanningActivity@1100525001 : Record 11012431;
      SourceProjectPlannConstraint@1100525004 : Record 11012433;
      TargetProjectPlannConstraint@1100525005 : Record 11012433;
      SourceProjectPlannBaseActivity@1100525006 : Record 11012434;
      TargetProjectPlannBaseActivity@1100525007 : Record 11012434;
      ArchiveGeneralLedgerSetup@1100485006 : Record 98;
      GeneralTextRec@1100525008 : Record 11020260;
      GeneralText1Rec@1100525009 : Record 11020260;
      BudgetSummarySheet@1100525002 : Record 11012064;
      BudgetSummarySheet1@1100525003 : Record 11012064;
      ProjectAuthority@1100529200 : Record 11020216;
      ProjectAuthority1@1100529201 : Record 11020216;
      DeleteBln@11012060 : Boolean;
      Status@11012061 : Dialog;
      LineCount@11012062 : Integer;
      NoOfRecords@11012063 : Integer;
      DimMgt@1210190000 : Codeunit 408;
      Text032@1210190003 : TextConst 'ENU=Project Ledger Entries';
      Text033@1210190010 : TextConst 'ENU=Option Groups (%1)';
      Text034@1100485004 : TextConst 'ENU=The last Project Entry is an Entry of Project ''%1'', delete of the last Project Entry is not allowed.\Wait until there is posted a Project Entry on another project.';
      Text035@1100485005 : TextConst 'ENU=Cost Object en Cost Centre not in General Ledger Setup of %1.';
      DocumentLinkManagement@1100528700 : Codeunit 11012401;

    PROCEDURE ArchCommonData@1();
    BEGIN
      Status.OPEN(Text001 +
                  Text002);

      ArchiveGeneralLedgerSetup.CHANGECOMPANY(ProjSetUp."Archive Company");
      ArchiveGeneralLedgerSetup.GET;

      IF (ArchiveGeneralLedgerSetup."Global Dimension 1 Code" = '') OR
         (ArchiveGeneralLedgerSetup."Global Dimension 2 Code" = '') THEN
        ERROR(Text035, ProjSetUp."Archive Company");

      DimVal1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      DimValRec.SETRANGE("Global Dimension No.", 2);
      IF DimValRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text003);
        NoOfRecords := DimValRec.COUNT;
        REPEAT
          DimMgt.GetDimValueRec(2, DimValRec.Code, DimVal1Rec, FALSE,'');
          IF DimVal1Rec.Code = '' THEN BEGIN
            DimVal1Rec.INIT;
            DimVal1Rec.COPY(DimValRec);
            DimVal1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
            DimVal1Rec.INSERT;
            Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
            LineCount := LineCount + 1;
          END;
        UNTIL DimValRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      Unit1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      IF UnitRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text004);
        NoOfRecords := UnitRec.COUNT;
        REPEAT
          IF NOT Unit1Rec.GET(UnitRec.Code) THEN BEGIN
            Unit1Rec.INIT;
            Unit1Rec.COPY(UnitRec);
            Unit1Rec.INSERT;
            Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
            LineCount := LineCount + 1;
          END;
        UNTIL UnitRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      BudgRate1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      IF BudgetRateRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text005);
        NoOfRecords := BudgetRateRec.COUNT;
        REPEAT
          BudgRate1Rec := BudgetRateRec;
          IF NOT BudgRate1Rec.FIND THEN BEGIN
            BudgRate1Rec.INSERT;
            Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
            LineCount := LineCount + 1;
           END;
        UNTIL BudgetRateRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      //**4PS.sn
      LineCount := 0;
      TargetProjectPlannBaseActivity.CHANGECOMPANY(ProjSetUp."Archive Company");
      IF SourceProjectPlannBaseActivity.FINDSET THEN BEGIN
        Status.UPDATE(2, SourceProjectPlannBaseActivity.TABLECAPTION);
        NoOfRecords := SourceProjectPlannBaseActivity.COUNT;
        REPEAT
          TargetProjectPlannBaseActivity := SourceProjectPlannBaseActivity;
          IF NOT TargetProjectPlannBaseActivity.FIND THEN BEGIN
            TargetProjectPlannBaseActivity.INSERT;
            Status.UPDATE(3, ROUND(LineCount / NoOfRecords * 10000, 1));
            LineCount := LineCount + 1;
          END;
        UNTIL SourceProjectPlannBaseActivity.NEXT = 0;
        Status.UPDATE(3, 0);
      END;
      //**4PS.en
    END;

    PROCEDURE ArchProjects@2();
    VAR
      ProjFeatType@1210190000 : Record 11012753;
      ContFeatGroup@1210190001 : Record 11012751;
      ContFeature@1210190002 : Record 11012752;
      ProjFeatType1@1210190005 : Record 11012753;
      ContFeatGroup1@1210190004 : Record 11012751;
      ContFeature1@1210190003 : Record 11012752;
      DocumentLink@1100528701 : Record 11012747;
      RecRef@1100528700 : RecordRef;
      TryOut@1100525005 : Record 11012750;
      TryOut1@1100525004 : Record 11012750;
      TryOutQuote@1100525003 : Record 11012758;
      TryOutQuote1@1100525002 : Record 11012758;
      TryOutSuccessor@1100525001 : Record 11012761;
      TryOutSuccessor1@1100525000 : Record 11012761;
    BEGIN
      ProjRec.CHANGECOMPANY(ProjSetUp."Archive Company");
      IF ProjRec.GET(Job."No.") THEN
        ERROR(Text006,Job."No.")
      ELSE BEGIN
        ProjRec.COPY(Job);
        ProjRec."Project Status" := ProjRec."Project Status"::Archived;
        ProjRec."Cost Control Up to Date" := FALSE;  //* C-012707 (21-08-2008): Moet zo van EK
        ProjRec.INSERT;
      END;

      Job."Project Status" := Job."Project Status"::Archived;
      Job.MODIFY;

      IF DocumentLink.READPERMISSION THEN BEGIN
        RecRef.GETTABLE(Job);
        DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
      END;

      Status.UPDATE(1,Job."No.");

      LineCount := 0;
      Budget1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      BudgetRec.SETRANGE("Project No.",Job."No.");
      IF BudgetRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text007);
        NoOfRecords := BudgetRec.COUNT;
        REPEAT
          Budget1Rec.INIT;
          Budget1Rec.COPY(BudgetRec);
          Budget1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(BudgetRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL BudgetRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      BudgetQuant1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      BudgetQuantityRec.SETRANGE("Project No.",Job."No.");
      IF BudgetQuantityRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text008);
        NoOfRecords := BudgetQuantityRec.COUNT;
        REPEAT
          BudgetQuant1Rec.INIT;
          BudgetQuant1Rec.COPY(BudgetQuantityRec);
          BudgetQuant1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(BudgetQuantityRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL BudgetQuantityRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      BudgetAdjustm1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      BudgetAdjustmentRec.SETRANGE("Project No.",Job."No.");
      IF BudgetAdjustmentRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text009);
        NoOfRecords := BudgetAdjustmentRec.COUNT;
        REPEAT
          BudgetAdjustm1Rec.INIT;
          BudgetAdjustm1Rec.COPY(BudgetAdjustmentRec);
          BudgetAdjustm1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(BudgetAdjustmentRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL BudgetAdjustmentRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      BudgetSummarySheet1.CHANGECOMPANY(ProjSetUp."Archive Company");
      BudgetSummarySheet.SETRANGE("Project No.",Job."No.");
      IF BudgetSummarySheet.FINDSET THEN BEGIN
        Status.UPDATE(2,Text009);
        NoOfRecords := BudgetSummarySheet.COUNT;
        REPEAT
          BudgetSummarySheet1.INIT;
          BudgetSummarySheet1.COPY(BudgetSummarySheet);
          BudgetSummarySheet1.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(BudgetSummarySheet);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL BudgetSummarySheet.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      Extension1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ExtensionRec.SETRANGE("Project No.",Job."No.");
      IF ExtensionRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text010);
        NoOfRecords := ExtensionRec.COUNT;
        REPEAT
          Extension1Rec.INIT;
          Extension1Rec.COPY(ExtensionRec);
          Extension1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ExtensionRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ExtensionRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjPrincipal1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjPrincipRec.SETRANGE("Project No.",Job."No.");
      IF ProjPrincipRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text011);
        NoOfRecords := ProjPrincipRec.COUNT;
        REPEAT
          ProjPrincipal1Rec.INIT;
          ProjPrincipal1Rec.COPY(ProjPrincipRec);
          ProjPrincipal1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjPrincipRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjPrincipRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      Progr1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProgrRec.SETRANGE("Project No.",Job."No.");
      IF ProgrRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text012);
        NoOfRecords := ProgrRec.COUNT;
        REPEAT
          Progr1Rec.INIT;
          Progr1Rec.COPY(ProgrRec);
          Progr1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProgrRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProgrRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProgrLine1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProgrLineRec.SETRANGE("Project No.",Job."No.");
      IF ProgrLineRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text013);
        NoOfRecords := ProgrLineRec.COUNT;
        REPEAT
          ProgrLine1Rec.INIT;
          ProgrLine1Rec.COPY(ProgrLineRec);
          ProgrLine1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProgrLineRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProgrLineRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjRespons1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjResponsRec.SETRANGE("Project No.",Job."No.");
      IF ProjResponsRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text014);
        NoOfRecords := ProjResponsRec.COUNT;
        REPEAT
          ProjRespons1Rec.INIT;
          ProjRespons1Rec.COPY(ProjResponsRec);
          ProjRespons1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjResponsRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjResponsRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjectAuthority1.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjectAuthority.SETRANGE("Project No.",Job."No.");
      IF ProjectAuthority.FINDSET THEN BEGIN
        Status.UPDATE(2,Text014);
        NoOfRecords := ProjectAuthority.COUNT;
        REPEAT
          ProjectAuthority1.INIT;
          ProjectAuthority1.COPY(ProjectAuthority);
          ProjectAuthority1.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjectAuthority);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjectAuthority.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjElem1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjElemRec.SETRANGE("Project No.",Job."No.");
      IF ProjElemRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text015);
        NoOfRecords := ProjElemRec.COUNT;
        REPEAT
          ProjElem1Rec.INIT;
          ProjElem1Rec.COPY(ProjElemRec);
          ProjElem1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjElemRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjElemRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjInstalm1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjInstalmRec.SETRANGE("Project No.",Job."No.");
      IF ProjInstalmRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text016);
        NoOfRecords := ProjInstalmRec.COUNT;
        REPEAT
          ProjInstalm1Rec.INIT;
          ProjInstalm1Rec.COPY(ProjInstalmRec);
          ProjInstalm1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjInstalmRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjInstalmRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      HouseMod1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      HouseModRec.SETRANGE("Project No.",Job."No.");
      IF HouseModRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text017);
        NoOfRecords := HouseModRec.COUNT;
        REPEAT
          HouseMod1Rec.INIT;
          HouseMod1Rec.COPY(HouseModRec);
          HouseMod1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(HouseModRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL HouseModRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      MainGroup1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      MainGroupRec.SETRANGE("Project No.",Job."No.");
      IF MainGroupRec.FINDSET THEN BEGIN
        Status.UPDATE(2,STRSUBSTNO(Text033,1));
        NoOfRecords := MainGroupRec.COUNT;
        REPEAT
          MainGroup1Rec.INIT;
          MainGroup1Rec.COPY(MainGroupRec);
          MainGroup1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(MainGroupRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL MainGroupRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      Group1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      GroupRec.SETRANGE("Project No.",Job."No.");
      IF GroupRec.FINDSET THEN BEGIN
        Status.UPDATE(2,STRSUBSTNO(Text033,2));
        NoOfRecords := GroupRec.COUNT;
        REPEAT
          Group1Rec.INIT;
          Group1Rec.COPY(GroupRec);
          Group1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(GroupRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL GroupRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      SubGroup1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      SubGroupRec.SETRANGE("Project No.",Job."No.");
      IF SubGroupRec.FINDSET THEN BEGIN
        Status.UPDATE(2,STRSUBSTNO(Text033,3));
        NoOfRecords := SubGroupRec.COUNT;
        REPEAT
          SubGroup1Rec.INIT;
          SubGroup1Rec.COPY(SubGroupRec);
          SubGroup1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(SubGroupRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL SubGroupRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      PlotNo1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      PlotNoRec.SETRANGE("Project No.",Job."No.");
      IF PlotNoRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text018);
        NoOfRecords := PlotNoRec.COUNT;
        REPEAT
          PlotNo1Rec.INIT;
          PlotNo1Rec.COPY(PlotNoRec);
          PlotNo1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(PlotNoRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL PlotNoRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      CostPlus1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      CostPlusRec.SETRANGE("Project No.",Job."No.");
      IF CostPlusRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text019);
        NoOfRecords := CostPlusRec.COUNT;
        REPEAT
          CostPlus1Rec.INIT;
          CostPlus1Rec.COPY(CostPlusRec);
          CostPlus1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(CostPlusRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL CostPlusRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      Option1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      OptionRec.SETRANGE("Project No.",Job."No.");
      IF OptionRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text020);
        NoOfRecords := OptionRec.COUNT;
        REPEAT
          Option1Rec.INIT;
          Option1Rec.COPY(OptionRec);
          Option1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(OptionRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL OptionRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      Comm1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      CommRec.SETRANGE("Project No.",Job."No.");
      IF CommRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text021);
        NoOfRecords := CommRec.COUNT;
        REPEAT
          Comm1Rec.INIT;
          Comm1Rec.COPY(CommRec);
          Comm1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(CommRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL CommRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      SettlSheet1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      SettlSheetRec.SETRANGE("Project No.",Job."No.");
      IF SettlSheetRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text022);
        NoOfRecords := SettlSheetRec.COUNT;
        REPEAT
          SettlSheet1Rec.INIT;
          SettlSheet1Rec.COPY(SettlSheetRec);
          SettlSheet1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(SettlSheetRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL SettlSheetRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      OptionBudget1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      OptionBudgetRec.SETRANGE("Project No.",Job."No.");
      IF OptionBudgetRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text023);
        NoOfRecords := OptionBudgetRec.COUNT;
        REPEAT
          OptionBudget1Rec.INIT;
          OptionBudget1Rec.COPY(OptionBudgetRec);
          OptionBudget1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(OptionBudgetRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL OptionBudgetRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjPurchAction1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjPurchActRec.SETRANGE("Project No.",Job."No.");
      IF ProjPurchActRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text024);
        NoOfRecords := ProjPurchActRec.COUNT;
        REPEAT
          ProjPurchAction1Rec.INIT;
          ProjPurchAction1Rec.COPY(ProjPurchActRec);
          ProjPurchAction1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjPurchActRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjPurchActRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjPrincHourRate1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjPrincHourRateRec.SETRANGE("Project No.",Job."No.");
      IF ProjPrincHourRateRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text025);
        NoOfRecords := ProjPrincHourRateRec.COUNT;
        REPEAT
          ProjPrincHourRate1Rec.INIT;
          ProjPrincHourRate1Rec.COPY(ProjPrincHourRateRec);
          ProjPrincHourRate1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjPrincHourRateRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjPrincHourRateRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      PaymAgreem1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      PaymAgreemRec.SETRANGE("Project No.",Job."No.");
      IF PaymAgreemRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text026);
        NoOfRecords := PaymAgreemRec.COUNT;
        REPEAT
          PaymAgreem1Rec.INIT;
          PaymAgreem1Rec.COPY(PaymAgreemRec);
          PaymAgreem1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(PaymAgreemRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL PaymAgreemRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      Progn1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      PrognRec.SETRANGE("Project No.",Job."No.");
      IF PrognRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text027);
        NoOfRecords := PrognRec.COUNT;
        REPEAT
          Progn1Rec.INIT;
          Progn1Rec.COPY(PrognRec);
          Progn1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(PrognRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL PrognRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      PrognLine1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      PrognLineRec.SETRANGE("Project No.",Job."No.");
      IF PrognLineRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text028);
        NoOfRecords := PrognLineRec.COUNT;
        REPEAT
          PrognLine1Rec.INIT;
          PrognLine1Rec.COPY(PrognLineRec);
          PrognLine1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(PrognLineRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL PrognLineRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjLoc1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjLocRec.SETRANGE("Project No.",Job."No.");
      IF ProjLocRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text029);
        NoOfRecords := ProjLocRec.COUNT;
        REPEAT
          ProjLoc1Rec.INIT;
          ProjLoc1Rec.COPY(ProjLocRec);
          ProjLoc1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjLocRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjLocRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjectLedger1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjectLedgerRec.SETRANGE("Job No.",Job."No.");
      IF ProjectLedgerRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text030);
        NoOfRecords := ProjectLedgerRec.COUNT;
        REPEAT
          ProjectLedger1Rec.INIT;
          ProjectLedger1Rec.COPY(ProjectLedgerRec);
          ProjectLedger1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjectLedgerRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjectLedgerRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      Preclosure1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      PreclosureRec.SETRANGE("Project No.",Job."No.");
      IF PreclosureRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text032);
        NoOfRecords := PreclosureRec.COUNT;
        REPEAT
          Preclosure1Rec.INIT;
          Preclosure1Rec.COPY(PreclosureRec);
          Preclosure1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(PreclosureRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL PreclosureRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      ProjBudgetRate1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjBudgetRateRec.SETRANGE("Project No.",Job."No.");
      IF ProjBudgetRateRec.FINDSET THEN BEGIN
        Status.UPDATE(2,Text005);
        NoOfRecords := ProjBudgetRateRec.COUNT;
        REPEAT
          ProjBudgetRate1Rec.INIT;
          ProjBudgetRate1Rec.COPY(ProjBudgetRateRec);
          ProjBudgetRate1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjBudgetRateRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjBudgetRateRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      LineCount := 0;
      CommLine1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      CommLineRec.SETRANGE("Table Name",CommLineRec."Table Name"::Job);  //db, 15-08-06
      CommLineRec.SETRANGE("No.",Job."No.");
      IF CommLineRec.FINDSET THEN BEGIN
        Status.UPDATE(2, CommLineRec.TABLECAPTION);
        NoOfRecords := CommLineRec.COUNT;
        REPEAT
          CommLine1Rec.INIT;
          CommLine1Rec.COPY(CommLineRec);
          CommLine1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(CommLineRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL CommLineRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      //**4PS.sn
      LineCount := 0;
      TargetProjectPlanningActivity.CHANGECOMPANY(ProjSetUp."Archive Company");
      SourceProjectPlanningActivity.SETCURRENTKEY("Project No.");
      SourceProjectPlanningActivity.SETRANGE("Project No.", Job."No.");
      IF SourceProjectPlanningActivity.FINDSET THEN BEGIN
        Status.UPDATE(2, SourceProjectPlanningActivity.TABLECAPTION);
        NoOfRecords := SourceProjectPlanningActivity.COUNT;
        REPEAT
          // Project Planning Activities
          TargetProjectPlanningActivity.COPY(SourceProjectPlanningActivity);
          TargetProjectPlanningActivity.INSERT;

          // Project Planning Constraints
          TargetProjectPlannConstraint.CHANGECOMPANY(ProjSetUp."Archive Company");
          SourceProjectPlannConstraint.SETRANGE("From Project Activity No.", SourceProjectPlanningActivity."No.");
          IF SourceProjectPlannConstraint.FINDSET THEN BEGIN
            REPEAT
              TargetProjectPlannConstraint.COPY(SourceProjectPlannConstraint);
              TargetProjectPlannConstraint.INSERT;

              IF DocumentLink.READPERMISSION THEN BEGIN
                RecRef.GETTABLE(SourceProjectPlannConstraint);
                DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
              END;
            UNTIL SourceProjectPlannConstraint.NEXT = 0;
          END;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(SourceProjectPlanningActivity);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3, ROUND(LineCount / NoOfRecords * 10000, 1));
          LineCount := LineCount + 1;
        UNTIL SourceProjectPlanningActivity.NEXT = 0;
        Status.UPDATE(3, 0);
      END;
      //**4PS.en

      //mg.sn, 21-07-10, C-019565
      LineCount := 0;
      GeneralText1Rec.CHANGECOMPANY(ProjSetUp."Archive Company");
      GeneralTextRec.SETRANGE(Table, GeneralTextRec.Table::Job);
      GeneralTextRec.SETRANGE(Code, Job."No.");
      IF GeneralTextRec.FINDSET THEN BEGIN
        Status.UPDATE(2, GeneralTextRec.TABLECAPTION);
        NoOfRecords := GeneralTextRec.COUNT;
        REPEAT
          GeneralText1Rec.INIT;
          GeneralText1Rec.COPY(GeneralTextRec);
          GeneralText1Rec.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(GeneralTextRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL GeneralTextRec.NEXT = 0;
        Status.UPDATE(3,0);
      END;
      //mg.en, 21-07-10, C-019565

      LineCount := 0;
      ProjFeatType1.CHANGECOMPANY(ProjSetUp."Archive Company");
      ContFeatGroup1.CHANGECOMPANY(ProjSetUp."Archive Company");
      ContFeature1.CHANGECOMPANY(ProjSetUp."Archive Company");
      ProjFeatType.SETRANGE("Relation Type",ProjFeatType."Relation Type"::Job);
      ProjFeatType.SETRANGE(Code,Job."No.");
      IF ProjFeatType.FINDSET THEN BEGIN
        Status.UPDATE(2, ProjFeatType.TABLECAPTION);
        NoOfRecords := ProjFeatType.COUNT;
        REPEAT
          IF ContFeatGroup.GET(ProjFeatType."Feature Group") THEN BEGIN
            IF ContFeatGroup1.GET(ProjFeatType."Feature Group") THEN
              ContFeatGroup1.DELETE;
            ContFeatGroup1.INIT;
            ContFeatGroup1.COPY(ContFeatGroup);
            ContFeatGroup1.INSERT;

            IF DocumentLink.READPERMISSION THEN BEGIN
              RecRef.GETTABLE(ContFeatGroup);
              DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
            END;
          END;
          IF ContFeature.GET(ProjFeatType."Feature Group", ProjFeatType.Feature) THEN BEGIN
            IF ContFeature1.GET(ProjFeatType."Feature Group", ProjFeatType.Feature) THEN
              ContFeature1.DELETE;
            ContFeature1.INIT;
            ContFeature1.COPY(ContFeature);
            ContFeature1.INSERT;

            IF DocumentLink.READPERMISSION THEN BEGIN
              RecRef.GETTABLE(ContFeature);
              DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
            END;
          END;
          ProjFeatType1.INIT;
          ProjFeatType1.COPY(ProjFeatType);
          ProjFeatType1.INSERT;

          IF DocumentLink.READPERMISSION THEN BEGIN
            RecRef.GETTABLE(ProjFeatType);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, ProjSetUp."Archive Company", DeleteBln);
          END;

          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL ProjFeatType.NEXT = 0;
        Status.UPDATE(3,0);
      END;

      //db.sn, 16-01-14: C011682
      LineCount := 0;
      TryOut1.CHANGECOMPANY(ProjSetUp."Archive Company");
      TryOutQuote1.CHANGECOMPANY(ProjSetUp."Archive Company");
      TryOutSuccessor1.CHANGECOMPANY(ProjSetUp."Archive Company");
      TryOutSuccessor.SETCURRENTKEY("Project No.");
      TryOutSuccessor.SETRANGE("Project No.",Job."No.");
      IF TryOutSuccessor.FINDSET THEN BEGIN
        Status.UPDATE(2, TryOutSuccessor.TABLECAPTION);
        NoOfRecords := TryOutSuccessor.COUNT;
        REPEAT
          TryOutSuccessor1.INIT;
          TryOutSuccessor1."Try-out No." := TryOutSuccessor."Try-out No.";
          TryOutSuccessor1."Try-out Quote" := TryOutSuccessor."Try-out Quote";
          TryOutSuccessor1."Line No." := 0;
          REPEAT
            TryOutSuccessor1."Project No." := TryOutSuccessor."Project No.";
            TryOutSuccessor1."Line No." := TryOutSuccessor1."Line No." + 1;
          UNTIL TryOutSuccessor1.INSERT;
          IF TryOutSuccessor."Try-out No." <> '' THEN BEGIN
            TryOut.SETRANGE(Code,TryOutSuccessor."Try-out No.");
            IF TryOut.FINDSET THEN BEGIN
              REPEAT
                TryOut1.INIT;
                TryOut1.COPY(TryOut);
                IF TryOut1.INSERT THEN;
              UNTIL TryOut.NEXT = 0;
            END;
          END;
          IF TryOutSuccessor."Try-out Quote" <> '' THEN BEGIN
            TryOutQuote.SETRANGE(Code,TryOutSuccessor."Try-out Quote");
            IF TryOutQuote.FINDSET THEN BEGIN
              REPEAT
                TryOutQuote1.INIT;
                TryOutQuote1.COPY(TryOutQuote);
                IF TryOutQuote1.INSERT THEN;
              UNTIL TryOutQuote.NEXT = 0;
            END;
          END;
          Status.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
        UNTIL TryOutSuccessor.NEXT = 0;
        Status.UPDATE(3,0);
      END;
      //db.en, 16-01-14: C011682

      IF DeleteBln THEN BEGIN
        Status.UPDATE(2,Text031);
        Status.UPDATE(3,0);
        Job.DELETE(TRUE);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

