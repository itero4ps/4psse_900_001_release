OBJECT Report 11012058 Project Costs Graph
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Project Costs Graph;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   PeriodType := PeriodType::Month;
                 END;

    OnPreReport=BEGIN
                  IF PeriodFilter = '' THEN
                    ERROR(Text017);

                  ExcelAutomation.InitExcel;
                  ExcelAutomation.InitWorkbook(Text000);

                  ExcelAutomation.WriteCell(1, 1, Text002);
                  ExcelAutomation.WriteCell(1, 3, Text004);
                  ExcelAutomation.WriteCell(2, 3, Text006);
                  ExcelAutomation.WriteCell(3, 3, Text008);
                  ExcelAutomation.WriteCell(4, 3, Text009);
                  ExcelAutomation.WriteCell(5, 3, Text010);
                END;

    OnPostReport=VAR
                   ExcelBuffer@1100528705 : Record 370;
                   XlWrkBk@1100528700 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
                   XlChart@1100528702 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart" RUNONCLIENT;
                   XlAxis@1100528703 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Axis" RUNONCLIENT;
                   TypeMissing@1100528701 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object" RUNONCLIENT;
                   i@1100528704 : Integer;
                 BEGIN
                   Counter := 3;
                   FOR i := 10 DOWNTO 1 DO BEGIN
                     ExcelAutomation.WriteCell(2, Counter + i, FORMAT(ActCostDec[i]));
                     ExcelAutomation.WriteCell(3, Counter + i, FORMAT(RevDec[i]));
                     ExcelAutomation.WriteCell(4, Counter + i, FORMAT(ContrAmntDec[i]));
                     ExcelAutomation.WriteCell(5, Counter + i, FORMAT(TotCostDec[i]));
                   END;

                   ExcelAutomation.SetNumberFormatInRange(ExcelBuffer.RC2Range(4, 2, 13, 5), '#.##0');
                   ExcelAutomation.AutoFit(1, 5);

                   ExcelAutomation.AddChart(
                     Text014,
                     1, 3, 5, 13,
                     ExcelEnumeration.XlChartType_xlLine,
                     1,
                     ExcelEnumeration.XlRowCol_xlColumns,
                     1,
                     1,
                     TRUE,
                     STRSUBSTNO(Text016, Job."No.", Job.Description));

                   DotNetManagement.GetTypeMissing(TypeMissing);

                   ExcelAutomation.GetXlWrkBk(XlWrkBk);
                   XlChart := XlWrkBk.Charts.Item(XlWrkBk.Charts.Count);
                   XlAxis := XlChart.Axes(ExcelEnumeration.XlAxisType_xlCategory, TypeMissing);
                   XlAxis.HasMajorGridlines := FALSE;
                   XlAxis.HasMinorGridlines := FALSE;
                   XlAxis.BaseUnitIsAuto := TRUE;
                   XlAxis.Crosses := ExcelEnumeration.XlAxisCrosses_xlAxisCrossesAutomatic;
                   XlAxis.AxisBetweenCategories := FALSE;
                   XlAxis.ReversePlotOrder := FALSE;
                   XlAxis.CategoryType := ExcelEnumeration.XlCategoryType_xlCategoryScale;

                   XlAxis := XlChart.Axes(ExcelEnumeration.XlAxisType_xlValue, TypeMissing);
                   XlAxis.HasMajorGridlines := TRUE;
                   XlAxis.HasMinorGridlines := FALSE;

                   ExcelAutomation.GiveUserControl;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               OnPreDataItem=VAR
                               i@1100528703 : Integer;
                               DateFilter@1100528702 : Text;
                               CumulationFilter@1100528701 : Text;
                             BEGIN
                               DateFilter := PeriodFilter;

                               Counter := 3;
                               PeriodStartDate[10] := PeriodFilterStart;
                               PeriodEndDate[10] := PeriodFilterEnd;

                               FOR i := 9 DOWNTO 1 DO BEGIN
                                 SearchPeriod.FindPeriod(PeriodStartDate[i], PeriodEndDate[i], CumulationFilter, DateFilter, PeriodType, '<=');
                                 ExcelAutomation.WriteCell(1, Counter + i, STRSUBSTNO('%1', PeriodStartDate[i]));
                               END;
                               ExcelAutomation.WriteCell(1, Counter + 10, STRSUBSTNO('%1', PeriodStartDate[10]));
                             END;

               OnAfterGetRecord=VAR
                                  i@1100528700 : Integer;
                                BEGIN
                                  CreateCostControl.RUN(Job);

                                  ProjRec.GET("No.");
                                  ProjRec.SETFILTER("Project Filter","No.");

                                  FOR i := 10 DOWNTO 1 DO BEGIN
                                    ProjRec.SETRANGE("Cumulation Filter",0D,PeriodEndDate[i]);
                                    ProjRec.CALCFIELDS("Actual Costs", Revenues, "Project Contract Amount", "Extension Contract Amount", "Options Contract Amount");
                                    ActCostDec[i] := ProjRec."Actual Costs";
                                    RevDec[i] := ProjRec.Revenues;
                                    TotCostDec[i] := CostControlMgt.TotCostProject(ProjRec,TRUE);
                                    ContrAmntDec[i] := ProjRec."Project Contract Amount" + ProjRec."Extension Contract Amount" + ProjRec."Options Contract Amount";
                                  END;
                                END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=ENU=Period Filter;
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100528700;2;Field  ;
                  CaptionML=ENU=Period Type;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                  SourceExpr=PeriodType }

      { 1100528701;2;Field  ;
                  CaptionML=ENU=Period Filter;
                  SourceExpr=PeriodFilter;
                  OnValidate=VAR
                               DateSelectionManagement@1100528700 : Codeunit 11130005;
                             BEGIN
                               DateSelectionManagement.ConvertPeriodStringToDates(PeriodFilter, PeriodFilterStart, PeriodFilterEnd);
                             END;

                  OnLookup=VAR
                             DateSelectionManagement@1100528700 : Codeunit 11130005;
                           BEGIN
                             DateSelectionManagement.GetPeriod(PeriodFilter);
                             DateSelectionManagement.ConvertPeriodStringToDates(PeriodFilter, PeriodFilterStart, PeriodFilterEnd);
                             Text := PeriodFilter;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012031 : TextConst 'ENU=Period List';
      Text002@11012033 : TextConst 'ENU=Project Cost and Revenue';
      Text004@11012035 : TextConst 'ENU=Period';
      Text006@11012037 : TextConst 'ENU=Actual Cost';
      Text008@11012039 : TextConst 'ENU=Revenues';
      Text009@1100485001 : TextConst 'ENU=Contract Amount';
      Text010@1100485002 : TextConst 'ENU=Total Cost';
      Text014@11012045 : TextConst 'ENU=Graph';
      Text016@11012047 : TextConst 'ENU=S Curve Project %1';
      Text017@11012048 : TextConst 'ENU=Select Period on Option Tab';
      DotNetManagement@1100528704 : Codeunit 11012374;
      ExcelEnumeration@1100528703 : Codeunit 11012375;
      ExcelAutomation@1100528706 : Codeunit 11012402;
      PeriodStartDate@11012002 : ARRAY [10] OF Date;
      PeriodEndDate@11012003 : ARRAY [10] OF Date;
      ActCostDec@11012004 : ARRAY [10] OF Decimal;
      RevDec@11012005 : ARRAY [10] OF Decimal;
      ContrAmntDec@1100485004 : ARRAY [10] OF Decimal;
      TotCostDec@1100485005 : ARRAY [10] OF Decimal;
      PeriodType@11012012 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      PeriodFilter@1100528705 : Text;
      SearchPeriod@11012013 : Codeunit 11012016;
      PeriodFilterStart@11012014 : Date;
      PeriodFilterEnd@11012015 : Date;
      datefilter@11012017 : Text[30];
      ProjRec@11012019 : Record 11072003;
      FilterTxt@11012020 : Text[50];
      CreateCostControl@11012021 : Codeunit 11012012;
      CostControlMgt@1100485006 : Codeunit 11012006;
      Counter@11012028 : Integer;
      PeriodNo@1100485003 : Text[1024];
      InternalDateFilter@1100525000 : Text[30];

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

