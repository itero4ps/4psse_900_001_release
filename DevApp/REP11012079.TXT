OBJECT Report 11012079 Process Scanned Bar Code Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Process Scanned Bar Code Lines;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   InvSetupRec.GET;
                   PurchSetupRec.GET;

                   IF EndDate = 0D THEN
                    EndDate := TODAY;
                 END;

    OnPreReport=BEGIN
                  IF EndDate = 0D THEN
                    ERROR(Text000);
                  IF EndDate < StartDate THEN
                    ERROR(Text001);
                END;

  }
  DATASET
  {
    { 7475;    ;DataItem;                    ;
               DataItemTable=Table11012061;
               DataItemTableView=SORTING(Type)
                                 ORDER(Ascending)
                                 WHERE(Status=FILTER(<>Done));
               OnPreDataItem=BEGIN
                               PreviousType := -1;
                               SETRANGE(Date, StartDate, EndDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Status = Status::Done THEN
                                    CurrReport.SKIP;

                                  CASE Type OF
                                    Type::"Project Delivery",
                                    Type::"Service Delivery",
                                    Type::"Phys. Inventory",
                                    Type::Stock:
                                      BEGIN
                                        IF (Type <> PreviousType) THEN BEGIN
                                          SearchNextLineNo();
                                          NextDocNo := ''
                                        END;

                                        ItemJourRec.INIT;
                                        ItemJourRec."Line No." := NextLineNo;
                                        ItemJourRec.VALIDATE("Posting Date", Date);
                                        ItemJourRec."Document No." := "Document No.";
                                        CASE Type OF
                                          Type::"Project Delivery":
                                            BEGIN
                                              FillTemplateAndBatchDelivery();
                                              FillReceivingCompany();
                                              ItemJourRec.VALIDATE("Entry Type", ItemJourRec."Entry Type"::Sale);
                                              ItemJourRec.VALIDATE("Item No.", "Item No.");  //db, 17-10-02
                                              IF "Location Code" <> '' THEN BEGIN
                                                ItemJourRec.VALIDATE("Location Code", "Location Code");
                                              END;
                                              ItemJourRec.VALIDATE("Job No.", "Project No.");
                                              ItemJourRec.VALIDATE(Element, Element);
                                              ItemJourRec.VALIDATE(Quantity, Quantity);
                                            END;
                                          Type::"Service Delivery":
                                            BEGIN
                                              FillTemplateAndBatchDelivery();
                                              FillReceivingCompany();
                                              ItemJourRec.VALIDATE("Entry Type", ItemJourRec."Entry Type"::Sale);
                                              ItemJourRec.VALIDATE("Item No.", "Item No.");
                                              IF "Location Code" <> '' THEN BEGIN
                                                ItemJourRec.VALIDATE("Location Code", "Location Code");
                                              END;
                                              ItemJourRec."Entry Type" := ItemJourRec."Entry Type"::Sale;
                                              ItemJourRec.VALIDATE("Service Order No.", "Service Order");
                                              ItemJourRec.VALIDATE(Quantity, Quantity);
                                            END;
                                          Type::"Phys. Inventory":
                                            BEGIN
                                              IF (Quantity < 0) THEN
                                                FIELDERROR(Quantity, Text002);
                                              FillTemplateAndBatchPhysInvent();
                                              ItemRec.RESET;
                                              ItemRec.GET("Item No.");
                                              ItemRec.SETRANGE("Date Filter", 0D, Date);
                                              ItemRec.SETRANGE("Location Filter", "Location Code");  //*34103
                                              ItemRec.CALCFIELDS("Net Change");

                                              ItemJourRec."Entry Type" := ItemJourRec."Entry Type"::"Positive Adjmt.";
                                              ItemJourRec.VALIDATE("Item No.", "Item No.");
                                              IF "Location Code" <> '' THEN BEGIN
                                                ItemJourRec.VALIDATE("Location Code", "Location Code");
                                              END;
                                              ItemJourRec."Phys. Inventory" := TRUE;
                                              ItemJourRec."Qty. (Calculated)" := ItemRec."Net Change";
                                              ItemJourRec.VALIDATE("Qty. (Phys. Inventory)", Quantity);
                                              // Calculate 'Quantity' and fill 'Entry Type' (Pos/Neg Adjmt)

                                              ItemLedgEntryRec.RESET;
                                              ItemLedgEntryRec.SETCURRENTKEY("Item No.");
                                              ItemLedgEntryRec.SETRANGE("Item No.", ItemJourRec."Item No.");
                                              IF ItemLedgEntryRec.FIND('+') THEN
                                                ItemJourRec."Last Item Ledger Entry No." := ItemLedgEntryRec."Entry No."
                                              ELSE
                                                ItemJourRec."Last Item Ledger Entry No." := 0;
                                            END;

                                            Type::Stock:

                                             BEGIN
                                              //* Vestiging A -->  Vestiging B
                                              IF (Quantity < 0) THEN
                                                FIELDERROR(Quantity, Text002);

                                              TESTFIELD("Location Code");
                                              TESTFIELD("New Location Code");

                                              ItemRec.RESET;
                                              ItemRec.GET("Item No.");

                                              FillTemplateAndBatchStockTrans();

                                              ItemJourRec.VALIDATE("Entry Type", ItemJourRec."Entry Type"::Transfer);
                                              ItemJourRec.VALIDATE("Item No.", "Item No.");
                                              ItemJourRec."Entry Type" := ItemJourRec."Entry Type"::Transfer;

                                              ItemJourRec.VALIDATE("Location Code", "Location Code");
                                              ItemJourRec.VALIDATE("New Location Code", "New Location Code");
                                              ItemJourRec.VALIDATE(Quantity, Quantity);

                                              ItemLedgEntryRec.RESET;
                                              ItemLedgEntryRec.SETCURRENTKEY("Item No.");
                                              ItemLedgEntryRec.SETRANGE("Item No.", ItemJourRec."Item No.");
                                              IF ItemLedgEntryRec.FIND('+') THEN
                                                ItemJourRec."Last Item Ledger Entry No." := ItemLedgEntryRec."Entry No."
                                              ELSE
                                                ItemJourRec."Last Item Ledger Entry No." := 0;
                                             END;

                                        END;

                                        IF (ItemJourRec."Document No." = '') AND (ItemJnlBatchRec."No. Series" <> '') THEN BEGIN
                                          IF NextDocNo = '' THEN BEGIN
                                            NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatchRec."No. Series",ItemJourRec."Posting Date",FALSE);
                                            CLEAR(NoSeriesMgt);
                                          END;
                                          ItemJourRec."Document No." := NextDocNo;
                                        END;
                                        ItemJourRec."Source Code" := ItemJnlTemplateRec."Source Code";
                                        ItemJourRec."Reason Code" := ItemJnlBatchRec."Reason Code";
                                        ItemJourRec."Posting No. Series" := ItemJnlBatchRec."Posting No. Series";
                                        ItemJourRec.VALIDATE("Shortcut Dimension 2 Code");
                                        ItemJourRec.Blocked := InvSetupRec."Default Blocked"; //C004152 new
                                        ItemJourRec.INSERT(TRUE);
                                        NextLineNo := NextLineNo + 10000;
                                      END;
                                  //  Type::Stock:
                                  //    BEGIN
                                  //       //* Deze soort wordt (nog) niet gebruikt.
                                  //    END;
                                    Type::"Purch. Requisition":
                                      BEGIN
                                        IF (Type <> PreviousType) THEN
                                          SearchNextReqLineNo();
                                        ReqLineRec.INIT;
                                        ReqLineRec.VALIDATE("Worksheet Template Name", PurchSetupRec."Req. Template Name - Bar Code");
                                        ReqLineRec.VALIDATE("Journal Batch Name", PurchSetupRec."Req. Jnl. Batch Name -Bar Code");
                                        ReqLineRec."Line No." := NextLineNo;
                                        ReqLineRec.Type := ReqLineRec.Type::Item;
                                        ReqLineRec.SetCurrentFieldNo(1); //** CAll C002848
                                        ReqLineRec.VALIDATE("No.", "Item No.");
                                        ReqLineRec.SetCurrentFieldNo(0); //** CAll C002848
                                        IF "Location Code" <> '' THEN BEGIN
                                          ReqLineRec.VALIDATE("Location Code", "Location Code");
                                        END;
                                        //ReqLineRec.VALIDATE("Order Date", TODAY); //**4PS02.n   //** CAll C002848 OLD
                                        //ReqLineRec.VALIDATE("Starting Date", TODAY); //**4PS02.n //** CAll C002848 OLD
                                        ReqLineRec.VALIDATE(Quantity, Quantity);
                                        ReqLineRec.INSERT(TRUE);
                                        NextLineNo := NextLineNo + 10000;
                                      END;
                                  END;

                                  Status := Status::Done;
                                  MODIFY;

                                  PreviousType := Type;
                                END;

               ReqFilterFields=Type }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525003;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100525001;2;Field  ;
                  CaptionML=ENU=Starting Date;
                  SourceExpr=StartDate }

      { 1100525002;2;Field  ;
                  CaptionML=ENU=Ending Date;
                  SourceExpr=EndDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ItemJourRec@1210190004 : Record 83;
      InvSetupRec@1210190005 : Record 313;
      ItemJnlTemplateRec@1210190008 : Record 82;
      ItemJnlBatchRec@1210190009 : Record 233;
      ItemRec@1210190011 : Record 27;
      ItemLedgEntryRec@1210190012 : Record 32;
      PurchSetupRec@1100485000 : Record 312;
      ReqLineRec@1100485001 : Record 246;
      NoSeriesMgt@1210190013 : Codeunit 396;
      StartDate@1210190001 : Date;
      EndDate@1210190000 : Date;
      NextLineNo@1210190006 : Integer;
      Text000@1210190003 : TextConst 'ENU=The End Date must be filled.';
      Text001@1210190002 : TextConst 'ENU=Start Date is less than the End Date.';
      PreviousType@1210190007 : Option;
      Text002@1210190010 : TextConst 'ENU=not allowed, Phys. Inventory Quantity may not be negative';
      NextDocNo@1210190014 : Code[20];

    PROCEDURE SearchNextLineNo@1210190001();
    BEGIN
      IF ("Text Bar Code Scanner".Type <> "Text Bar Code Scanner".Type::"Phys. Inventory") THEN BEGIN
        ItemJourRec.SETRANGE(ItemJourRec."Journal Template Name", InvSetupRec."Scanned Item Journal Template");
        ItemJourRec.SETRANGE(ItemJourRec."Journal Batch Name", InvSetupRec."Scanned Item Journal Batch");
      END ELSE BEGIN
        ItemJourRec.SETRANGE(ItemJourRec."Journal Template Name", InvSetupRec."Scanned Phys. Inv Jnl Template");
        ItemJourRec.SETRANGE(ItemJourRec."Journal Batch Name", InvSetupRec."Scanned Phys. Inv Jnl Batch");
      END;
      IF NOT ItemJourRec.FIND('+') THEN
        ItemJourRec."Line No." := 0;

      NextLineNo := ItemJourRec."Line No." + 10000;
    END;

    PROCEDURE FillTemplateAndBatchDelivery@1210190000();
    BEGIN
      InvSetupRec.TESTFIELD("Scanned Item Journal Template");
      InvSetupRec.TESTFIELD("Scanned Item Journal Batch");

      ItemJnlTemplateRec.GET(InvSetupRec."Scanned Item Journal Template");
      ItemJnlBatchRec.GET(InvSetupRec."Scanned Item Journal Template", InvSetupRec."Scanned Item Journal Batch");

      ItemJourRec."Journal Template Name" := InvSetupRec."Scanned Item Journal Template";
      ItemJourRec."Journal Batch Name" := InvSetupRec."Scanned Item Journal Batch";
    END;

    PROCEDURE FillTemplateAndBatchPhysInvent@1210190002();
    BEGIN
      InvSetupRec.TESTFIELD("Scanned Phys. Inv Jnl Template");
      InvSetupRec.TESTFIELD("Scanned Phys. Inv Jnl Batch");

      ItemJnlTemplateRec.GET(InvSetupRec."Scanned Phys. Inv Jnl Template");
      ItemJnlBatchRec.GET(InvSetupRec."Scanned Phys. Inv Jnl Template", InvSetupRec."Scanned Phys. Inv Jnl Batch");

      ItemJourRec."Journal Template Name" := InvSetupRec."Scanned Phys. Inv Jnl Template";
      ItemJourRec."Journal Batch Name" := InvSetupRec."Scanned Phys. Inv Jnl Batch";
    END;

    PROCEDURE FillTemplateAndBatchStockTrans@1100525000();
    BEGIN
      InvSetupRec.TESTFIELD("Scanned Stock Tr. Jnl Template");
      InvSetupRec.TESTFIELD("Scanned Stock Tr. Jnl Batch");

      ItemJnlTemplateRec.GET(InvSetupRec."Scanned Stock Tr. Jnl Template");
      ItemJnlBatchRec.GET(InvSetupRec."Scanned Stock Tr. Jnl Template", InvSetupRec."Scanned Stock Tr. Jnl Batch");

      ItemJourRec."Journal Template Name" := InvSetupRec."Scanned Stock Tr. Jnl Template";
      ItemJourRec."Journal Batch Name" := InvSetupRec."Scanned Stock Tr. Jnl Batch";
    END;

    PROCEDURE FillReceivingCompany@1210190003();
    BEGIN
      IF ("Text Bar Code Scanner"."Receiving Company" <> '') AND ("Text Bar Code Scanner"."Receiving Company" <> COMPANYNAME) THEN
        ItemJourRec.VALIDATE("Receiving Company", "Text Bar Code Scanner"."Receiving Company");
    END;

    PROCEDURE SearchNextReqLineNo@1100485002();
    BEGIN
      PurchSetupRec.TESTFIELD("Req. Template Name - Bar Code");
      PurchSetupRec.TESTFIELD("Req. Jnl. Batch Name -Bar Code");

      ReqLineRec.RESET;
      ReqLineRec.SETRANGE("Worksheet Template Name", PurchSetupRec."Req. Template Name - Bar Code");
      ReqLineRec.SETRANGE("Journal Batch Name", PurchSetupRec."Req. Jnl. Batch Name -Bar Code");
      IF NOT ReqLineRec.FIND('+') THEN
        ReqLineRec."Line No." := 0;

      NextLineNo := ReqLineRec."Line No." + 10000;  //**4PS01 er stond ItemJourRec."Line No", tikfoutje vermoed ik
    END;

    BEGIN
    {
      4PS01 JD Melding 8512, 16-11-2006, Het bepalen van het volgende No. in een inkoopvoorstel gaat fout.
      4PS02 JD Melding 8520, 16-11-2006, Er wordt geen vervaldatum bepaald voor inkoopvoorstelregels.
    }
    END.
  }
  RDLDATA
  {
  }
}

