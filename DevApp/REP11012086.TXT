OBJECT Report 11012086 Build Project Precl. Result
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Build Preclosure Result / Provision Loss Projects;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  JobSetup.GET;
                END;

  }
  DATASET
  {
    { 8258;    ;DataItem;                    ;
               DataItemTable=Table11012093;
               DataItemTableView=SORTING(Project No.,Posting Date);
               OnAfterGetRecord=VAR
                                  DummyRec@1100525000 : Record 11072021;
                                BEGIN
                                  CalculateResult("Project Preclosure Result", DummyRec, FALSE);
                                END;

               ReqFilterFields=Project No.,Posting Date }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100485002;2;Field  ;
                  CaptionML=ENU=Count Plots;
                  SourceExpr=gvCountUnits }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      JobSetup@1210190005 : Record 315;
      JobRec@1210190002 : Record 11072003;
      PlotRec@1100485000 : Record 11012500;
      PrognosisRec@1100525000 : Record 11012034;
      CostContMgt@1210190000 : Codeunit 11012006;
      DetermineProgressDate@1210190003 : Codeunit 11012014;
      DeterminePrognosisDate@1210190001 : Codeunit 11012029;
      ProjFilter@1100485001 : Text[250];
      PrognEndResVersusContractPr@1210190023 : Decimal;
      FirmCommitments@1210190004 : Decimal;
      gvCountUnits@1100485002 : Boolean;

    PROCEDURE CalculateResult@1100525001(VAR IProjPreclResultRec@1100525002 : Record 11012093;IProjRecordingLine@1100525004 : Record 11072021;ICalledFromProjectRecording@1100525003 : Boolean);
    VAR
      lvDampingRatioRec@1100525001 : Record 11072019;
      lvHoldPreclRec@1100525006 : Record 11012093;
      lvPrognRevenuePresent@1100525000 : Boolean;
    BEGIN
      WITH IProjPreclResultRec DO BEGIN
        JobSetup.GET; //Function can be called from outside
        TESTFIELD(Posted, FALSE);
        lvHoldPreclRec := IProjPreclResultRec;
        INIT; //Clear previous calculations and other progress fields
        "Result Type" := lvHoldPreclRec."Result Type";
        "Global Dimension 1 Code" := lvHoldPreclRec."Global Dimension 1 Code";

        JobRec.GET("Project No.");
        JobRec.SETFILTER("Cumulation Filter", '..%1', "Posting Date");
        JobRec.SETRANGE("Period Filter", "Posting Date");

        DetermineProgressDate.DetermineBothDates(JobRec);
        DeterminePrognosisDate.DetermineBothDates(JobRec);

        JobRec.FillProjectFilter(ProjFilter);
        JobRec.SETFILTER("Project Filter", ProjFilter);
        JobRec.CALCFIELDS(
          "Actual Costs",
          "Project Contract Amount",
          "Extension Contract Amount",
          "Options Contract Amount");

        CLEAR(PrognosisRec);
        "Prognosis Total Cost" := 0;
        IF JobSetup."Purch. Result in Precl. Result" THEN
          "Purchase Result" := CostContMgt.PurchResultProject(JobRec, TRUE);
        "Prognosis Total Revenues" := 0;
        "Prognosis Financial Result" := 0;
        IF JobRec.GETFILTER("Prognosis Filter") <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", JobRec.GETFILTER("Prognosis Filter"));
          IF PrognosisRec.FINDFIRST THEN BEGIN
            IF PrognosisRec."Prognosis Level" = PrognosisRec."Prognosis Level"::Rough THEN BEGIN
              "Prognosis Total Cost" := PrognosisRec."Rough Prognosis Total Cost";
              "Prognosis Total Revenues" := PrognosisRec."Rough Prognosis Total Revenues";
              lvPrognRevenuePresent := "Prognosis Total Revenues" <> 0;
            END ELSE BEGIN
              PrognosisRec.CALCFIELDS("Prognosis Revenue", "Prognosis Total Cost");
              "Prognosis Total Cost" := PrognosisRec."Prognosis Total Cost";
              "Prognosis Total Revenues" := PrognosisRec."Prognosis Revenue" + PrognosisRec."Project Invoiced";
              lvPrognRevenuePresent := PrognosisRec."Prognosis Revenue" <> 0;
            END;
            "Prognosis Financial Result" := "Prognosis Total Revenues" - ("Prognosis Total Cost" + "Purchase Result") ;
          END;
        END;
        "Actual Cost" := JobRec."Actual Costs" ;
        "Contract Amount" :=
          JobRec."Project Contract Amount" +
          JobRec."Extension Contract Amount" +
          JobRec."Options Contract Amount";

        IF lvPrognRevenuePresent THEN
      //  lvPrognRevenue := "Prognosis Total Revenues" //C022697.o
          "Prognosis Revenue" := "Prognosis Total Revenues" //C022697.o VAR lvPrognRevenue replaced by new field
        ELSE
          "Prognosis Revenue" := "Contract Amount";

        IF ICalledFromProjectRecording THEN
          PrognEndResVersusContractPr := IProjRecordingLine."Progn. End Res. Vs. Contract"
        ELSE BEGIN
          PrognEndResVersusContractPr := CostContMgt.PrognEndResVrsContrAmtProject(JobRec, TRUE);
        END;
        IF lvPrognRevenuePresent THEN
          PrognEndResVersusContractPr := PrognEndResVersusContractPr - "Contract Amount" + "Prognosis Total Revenues";

        CALCFIELDS("Previous Actual Precl. Result", "Previous Turnover", "Previous Cost");

        "Progress % Base" := 0;

        CASE JobRec."Preclosure Result" OF
          JobRec."Preclosure Result"::Allowed,
          JobRec."Preclosure Result"::"Sales Allowed":
            IF ICalledFromProjectRecording THEN
              "Progress % Base" := IProjRecordingLine.Progress
            ELSE
              "Progress % Base" := CostContMgt.AllowedPercProject(JobRec,TRUE);
          JobRec."Preclosure Result"::Invoiced: //08-07-09
            BEGIN
              JobRec.CALCFIELDS(Revenues);
      //M C-027051 so
      //        IF JobRec."Project Contract Amount" + JobRec."Extension Contract Amount" + JobRec."Options Contract Amount" <> 0 THEN
      //          "Progress % Base" :=
      //            JobRec.Revenues /
      //            (JobRec."Project Contract Amount" + JobRec."Extension Contract Amount" + JobRec."Options Contract Amount") * 100
      //M C-027051 sn
              IF "Prognosis Revenue" <> 0 THEN
                "Progress % Base" := (JobRec.Revenues / "Prognosis Revenue") * 100;
      //M C-027051 en
            END;
          ELSE
            IF JobSetup."Method Proj. Progress" = JobSetup."Method Proj. Progress"::"Cost to Revenue" THEN BEGIN
              IF "Prognosis Revenue" <> 0 THEN
                "Progress % Base" :=  ("Actual Cost"/"Prognosis Revenue") * 100;
            END;
            IF JobSetup."Method Proj. Progress" = JobSetup."Method Proj. Progress"::"Cost to Cost" THEN BEGIN
              IF ("Prognosis Revenue" - PrognEndResVersusContractPr <> 0) THEN
                "Progress % Base" := ("Actual Cost"/("Prognosis Revenue"-PrognEndResVersusContractPr)) * 100;
            END;
            //C-026777.sn
            IF JobSetup."Method Proj. Progress" = JobSetup."Method Proj. Progress"::"Cost to Cost (incl. Firm Commitments)" THEN BEGIN
              IF ("Prognosis Revenue" - PrognEndResVersusContractPr <> 0) THEN BEGIN
                JobRec.CALCFIELDS("Received/Not Invoiced", "Open Ovh. Surch. Firm (Purch.)");  // C-026777
                FirmCommitments := JobRec."Received/Not Invoiced" + JobRec."Open Ovh. Surch. Firm (Purch.)";  // C-026777
                "Progress % Base" := (("Actual Cost" + FirmCommitments)/("Prognosis Revenue"-PrognEndResVersusContractPr)) * 100;
              END;
            END;
            //C-026777.en
        END;

        IF (JobRec."Preclosure Result" = JobRec."Preclosure Result"::"Sales Progress") OR
           (JobRec."Preclosure Result" = JobRec."Preclosure Result"::"Sales Allowed") THEN BEGIN

          IF gvCountUnits THEN BEGIN
            PlotRec.RESET;
            PlotRec.SETRANGE("Project No.", JobRec."No.");
            "Units Saleable" := PlotRec.COUNT;
            PlotRec.SETFILTER("Sales Status", '%1..', PlotRec."Sales Status"::Sold);
            PlotRec.SETFILTER("Sales Status Since", '..%1', "Posting Date");
            "Units Sold" := PlotRec.COUNT;
          END;

          IF "Units Saleable" <> 0 THEN
            "Sales Progress" := ROUND(100 * "Units Sold" / "Units Saleable")
          ELSE
            "Sales Progress" := 0;
          "Progress %" := ROUND("Progress % Base" * ("Sales Progress" / 100));
        END ELSE
          "Progress %" := "Progress % Base";

        IF "Progress %" > 100 THEN  //M16746
          "Progress %" := 100;      //M16746

        IF "Result Type" = "Result Type"::"Preclosure Result" THEN BEGIN
          "Expected Final Result" := "Prognosis Financial Result";
          "Corrected Final Result":= "Expected Final Result";
          "Calculated Turnover" := ROUND("Progress %" * "Prognosis Revenue" / 100);
          Turnover := "Calculated Turnover" - "Previous Turnover";

          IF "Expected Final Result" < 0 THEN
            "Calculated Preclosure Result" := "Expected Final Result"
          ELSE BEGIN
            "Calculated Preclosure Result" := "Progress %" * "Expected Final Result" / 100 ;
            lvDampingRatioRec.SETFILTER("Until Production", '>=%1', ROUND("Progress %", 1, '>'));
            IF lvDampingRatioRec.FINDFIRST THEN BEGIN
              "Calculated Preclosure Result" := "Progress %" * lvDampingRatioRec.Ratio * "Expected Final Result" / 100;
            END;
          END;

          "Calculated Preclosure Result" := ROUND("Calculated Preclosure Result");
          "Corrected Preclosure Result" := "Calculated Preclosure Result" ;
          "Actual Preclosure Result" := "Calculated Preclosure Result" - "Previous Actual Precl. Result";
          "Actual Preclosure Result" := ROUND("Actual Preclosure Result");

          "Calculated Cost" := ROUND("Calculated Turnover" - "Calculated Preclosure Result");
          "Corrected Cost" := "Calculated Cost";
          Cost := ROUND("Corrected Cost" - "Previous Cost");
          "Progress % Actual" := "Progress %";  //C001798.n
        END ELSE BEGIN
          "Progress % Actual" := 0;  //C001798.n
          IF "Prognosis Financial Result" < 0 THEN
            "Calculated Provision" := "Prognosis Financial Result"
          ELSE
            "Calculated Provision" := 0;

          CALCFIELDS("Previous Actual Provision");
          "Actual Provision" := "Calculated Provision" - "Previous Actual Provision"
        END;

        "Prognosis Date" := JobRec.GETRANGEMAX("Prognosis Filter");
        "Progress Date" := JobRec.GETRANGEMAX("Progress Filter");
        "Prognosis Level" := PrognosisRec."Prognosis Level";
        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

