OBJECT Report 11012086 Build Project Precl. Result
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=ENU=Build Preclosure Result / Provision Loss Projects;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  JobSetup.GET;
                END;

  }
  DATASET
  {
    { 8258;    ;DataItem;                    ;
               DataItemTable=Table11012093;
               DataItemTableView=SORTING(Project No.,Posting Date);
               OnAfterGetRecord=VAR
                                  DummyRec@1100525000 : Record 11072021;
                                BEGIN
                                  CalculateResult("Project Preclosure Result", DummyRec, FALSE);
                                END;

               ReqFilterFields=Project No.,Posting Date }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100485002;2;Field  ;
                  CaptionML=ENU=Count Plots;
                  SourceExpr=gvCountUnits }

      { 1100285100;2;Field  ;
                  CaptionML=ENU=Include closed jobs;
                  SourceExpr=gincludeFinishedJobs }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      JobSetup@1210190005 : Record 315;
      JobRec@1210190002 : Record 11072003;
      PlotRec@1100485000 : Record 11012500;
      PrognosisRec@1100525000 : Record 11012034;
      CostContMgt@1210190000 : Codeunit 11012006;
      DetermineProgressDate@1210190003 : Codeunit 11012014;
      DeterminePrognosisDate@1210190001 : Codeunit 11012029;
      ProjFilter@1100485001 : Text[250];
      PrognEndResVersusContractPr@1210190023 : Decimal;
      FirmCommitments@1210190004 : Decimal;
      gvCountUnits@1100485002 : Boolean;
      gincludeFinishedJobs@1100285100 : Boolean;

    PROCEDURE CalculateResult@1100525001(VAR IProjPreclResultRec@1100525002 : Record 11012093;IProjRecordingLine@1100525004 : Record 11072021;ICalledFromProjectRecording@1100525003 : Boolean);
    VAR
      lvDampingRatioRec@1100525001 : Record 11072019;
      lvHoldPreclRec@1100525006 : Record 11012093;
      lvPrognRevenuePresent@1100525000 : Boolean;
      lJobRec2@1100285102 : Record 11072003;
      lJobLedgerEntry@1100285100 : Record 11072005;
      lExtensionContract@1100285101 : Record 11012004;
      lProjectPrincipal@1100285103 : Record 11012005;
      lOption@1100285104 : Record 11012502;
      lPrognosisLineCC@1100285105 : Record 11128270;
      lPrognosisLine@1100285106 : Record 11012035;
      lProjectPreclosureResult@1100285107 : Record 11012093;
      lPurchaseOrderControlLine@1100285108 : Record 11020221;
      lProjectStatusFilter@1100285111 : Text;
      lProjectStatusFilterMin@1100285109 : Option;
      lProjectStatusFilterMax@1100285110 : Option;
      includeFinishedJobs@1100285112 : Boolean;
    BEGIN
      WITH IProjPreclResultRec DO BEGIN
        JobSetup.GET; //Function can be called from outside
        TESTFIELD(Posted, FALSE);
        lvHoldPreclRec := IProjPreclResultRec;
        INIT; //Clear previous calculations and other progress fields
        "Result Type" := lvHoldPreclRec."Result Type";
        "Global Dimension 1 Code" := lvHoldPreclRec."Global Dimension 1 Code";
        JobRec.GET("Project No.");
        JobRec.SETFILTER("Cumulation Filter", '..%1', "Posting Date");
        JobRec.SETRANGE("Period Filter", "Posting Date");
      //>>IME403B
        includeFinishedJobs := gincludeFinishedJobs;
        IF JobRec."Single/Main/Sub Project" <> JobRec."Single/Main/Sub Project"::"Main Project" THEN
          includeFinishedJobs := TRUE;
        lProjectStatusFilter := JobRec.GETFILTER("Project Status");
        IF lProjectStatusFilter <> '' THEN BEGIN
          lProjectStatusFilterMin := JobRec.GETRANGEMIN("Project Status");
          lProjectStatusFilterMax := JobRec.GETRANGEMAX("Project Status");
        END;
        IF NOT includeFinishedJobs THEN
          JobRec.SETRANGE("Project Status");
      //<<IME403B
        DetermineProgressDate.DetermineBothDates(JobRec);
        DeterminePrognosisDate.DetermineBothDates(JobRec);
        JobRec.FillProjectFilter(ProjFilter);
      //>>IME403
        IF NOT includeFinishedJobs THEN
          JobRec.SETRANGE("Project Status",0,JobRec."Project Status"::"Administrative Finished");
      //<<IME403
        JobRec.SETFILTER("Project Filter", ProjFilter);
        IF includeFinishedJobs THEN //IME403
          JobRec.CALCFIELDS(
            "Actual Costs",
            "Project Contract Amount",
            "Extension Contract Amount",
            "Options Contract Amount");
      //>>IME403
        IF NOT includeFinishedJobs THEN BEGIN
          JobRec."Actual Costs" := 0;
          lJobLedgerEntry.RESET;
          lJobLedgerEntry.SETRANGE("Main Project No.",JobRec."Main Project");
          IF ProjFilter <> '' THEN lJobLedgerEntry.SETFILTER("Job No.",ProjFilter);
          lJobLedgerEntry.SETRANGE("Entry Type",lJobLedgerEntry."Entry Type"::Usage);
          IF "Posting Date" <> 0D THEN lJobLedgerEntry.SETFILTER("Posting Date", '..%1', "Posting Date");
          lJobRec2.COPYFILTERS(JobRec);
          IF lJobLedgerEntry.FINDSET(FALSE) THEN
          REPEAT
            lJobRec2.SETRANGE("No.",lJobLedgerEntry."Job No.");
            IF lJobRec2.FINDFIRST() THEN
              JobRec."Actual Costs" += lJobLedgerEntry."Total Cost (LCY)";
          UNTIL lJobLedgerEntry.NEXT=0;
          //Extension Contract Amount
          //Sum("Extension Contract"."Expected Contract Amount" WHERE (Main Project No.=FIELD(Main Project),Project No.=FIELD(Project Filter),Version Date=FIELD(Cumulation Filter)))
          JobRec."Extension Contract Amount" := 0;
          lExtensionContract.SETRANGE("Main Project No.",JobRec."Main Project");
          IF ProjFilter <> '' THEN lExtensionContract.SETFILTER("Project No.",ProjFilter);
          IF "Posting Date" <> 0D THEN lExtensionContract.SETFILTER("Version Date", '..%1', "Posting Date");
          lJobRec2.COPYFILTERS(JobRec);
          IF lExtensionContract.FINDSET(FALSE) THEN
          REPEAT
            lJobRec2.SETRANGE("No.",lExtensionContract."Project No.");
            IF lJobRec2.FINDFIRST() THEN
              JobRec."Extension Contract Amount" += lExtensionContract."Expected Contract Amount";
          UNTIL lJobLedgerEntry.NEXT=0;
          //Project Contract Amount
          //Sum("Project Principal"."Contract Amount (LCY)" WHERE (Main Project No.=FIELD(Main Project),Project No.=FIELD(Project Filter)))
          JobRec."Project Contract Amount" := 0;
          lProjectPrincipal.SETRANGE("Main Project No.",JobRec."Main Project");
          IF ProjFilter <> '' THEN lProjectPrincipal.SETFILTER("Project No.",ProjFilter);
          lJobRec2.COPYFILTERS(JobRec);
          IF lProjectPrincipal.FINDSET(FALSE) THEN
          REPEAT
            lJobRec2.SETRANGE("No.",lProjectPrincipal."Project No.");
            IF lJobRec2.FINDFIRST() THEN
              JobRec."Project Contract Amount" += lProjectPrincipal."Contract Amount (LCY)";
          UNTIL lProjectPrincipal.NEXT=0;
          //Options Contract Amount
          //Sum(Option."Contract Amount" WHERE (Main Project No.=FIELD(Main Project),Project No.=FIELD(Project Filter),Status=FILTER(Order|Invoice),Order Date=FIELD(Cumulation Filter),Plot No.=FILTER(<>'')))
          JobRec."Options Contract Amount" := 0;
          lOption.SETRANGE("Main Project No.",JobRec."Main Project");
          IF ProjFilter <> '' THEN lOption.SETFILTER("Project No.",ProjFilter);
          lOption.SETFILTER(Status, '%1|%2',lOption.Status::Order,lOption.Status::Invoice);
          IF "Posting Date" <> 0D THEN lOption.SETFILTER("Order Date", '..%1', "Posting Date");
          lOption.SETFILTER("Plot No.",'<>%1','');
          lJobRec2.COPYFILTERS(JobRec);
          IF lOption.FINDSET(FALSE) THEN
          REPEAT
            lJobRec2.SETRANGE("No.",lOption."Project No.");
            IF lJobRec2.FINDFIRST() THEN
              JobRec."Options Contract Amount" += lOption."Contract Amount";
          UNTIL lOption.NEXT=0;
        END;
      //<<IME403
        CLEAR(PrognosisRec);
        "Prognosis Total Cost" := 0;
        IF JobSetup."Purch. Result in Precl. Result" THEN
          "Purchase Result" := CostContMgt.PurchResultProject(JobRec, TRUE);
        "Prognosis Total Revenues" := 0;
        "Prognosis Financial Result" := 0;
        IF JobRec.GETFILTER("Prognosis Filter") <> '' THEN BEGIN
          PrognosisRec.SETRANGE("Project No.", "Project No.");
          PrognosisRec.SETFILTER("Prognosis Date", JobRec.GETFILTER("Prognosis Filter"));
          IF PrognosisRec.FINDFIRST THEN BEGIN
            IF PrognosisRec."Prognosis Level" = PrognosisRec."Prognosis Level"::Rough THEN BEGIN
              "Prognosis Total Cost" := PrognosisRec."Rough Prognosis Total Cost";
              "Prognosis Total Revenues" := PrognosisRec."Rough Prognosis Total Revenues";
              lvPrognRevenuePresent := "Prognosis Total Revenues" <> 0;
      //>>4PS-002
            //END ELSE BEGIN
            END ELSE
              IF JobRec."Forecast Level" = JobRec."Forecast Level"::"Cost Component" THEN BEGIN
                IF includeFinishedJobs THEN //IME403
                  PrognosisRec.CALCFIELDS("Prognosis Total Revenue CC", "Prognosis Total Cost CC");
      //>>IME403
                IF NOT includeFinishedJobs THEN BEGIN
              //Prognosis Total Revenue CC
              //Sum("Prognosis Line CC"."Prognosis Total Revenues" WHERE (Project No.=FIELD(Project No.),Prognosis Date=FIELD(Prognosis Date)))
              //Prognosis Total Cost CC
              //Sum("Prognosis Line CC"."Prognosis Total Cost" WHERE (Project No.=FIELD(Project No.),Prognosis Date=FIELD(Prognosis Date)))
                  PrognosisRec."Prognosis Total Revenue CC" :=0;
                  PrognosisRec."Prognosis Total Cost CC" :=0;
                  lPrognosisLineCC.SETRANGE("Project No.",PrognosisRec."Project No.");
                  lPrognosisLineCC.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
                  lJobRec2.COPYFILTERS(JobRec);
                  IF lPrognosisLineCC.FINDSET(FALSE) THEN
                  REPEAT
                    lJobRec2.SETRANGE("No.",lPrognosisLineCC."Project No.");
                    IF lJobRec2.FINDFIRST() THEN BEGIN
                      PrognosisRec."Prognosis Total Revenue CC" += lPrognosisLineCC."Prognosis Total Revenues";
                      PrognosisRec."Prognosis Total Cost CC" += lPrognosisLineCC."Prognosis Total Cost";
                    END;
                  UNTIL lPrognosisLineCC.NEXT=0;
                END;
      //<<IME403
                "Prognosis Total Cost" := PrognosisRec."Prognosis Total Cost CC";
                "Prognosis Total Revenues" := PrognosisRec."Prognosis Total Revenue CC";// + PrognosisRec."Project Invoiced";
                "Purchase Result" := 0;
                //>> 140514 ITERO.SB IME-145
                IF includeFinishedJobs THEN //IME403
                  PrognosisRec.CALCFIELDS("Prognosis Revenue CC");
      //>>IME403
                IF NOT includeFinishedJobs THEN BEGIN
                  //Prognosis Revenue CC
                  //Sum("Prognosis Line CC"."Prognosis Amount Revenue" WHERE (Project No.=FIELD(Project No.),Prognosis Date=FIELD(Prognosis Date)))
                  PrognosisRec."Prognosis Revenue CC" :=0;
                  lPrognosisLineCC.SETRANGE("Project No.",PrognosisRec."Project No.");
                  lPrognosisLineCC.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
                  lJobRec2.COPYFILTERS(JobRec);
                  IF lPrognosisLineCC.FINDSET(FALSE) THEN
                  REPEAT
                    lJobRec2.SETRANGE("No.",lPrognosisLineCC."Project No.");
                    IF lJobRec2.FINDFIRST() THEN BEGIN
                      PrognosisRec."Prognosis Revenue CC" += lPrognosisLineCC."Prognosis Amount Revenue";
                    END;
                  UNTIL lPrognosisLineCC.NEXT=0;
                END;
      //<<IME403
                //<<
                lvPrognRevenuePresent := PrognosisRec."Prognosis Revenue CC" <> 0;
              END ELSE
      //>>4PS-002
            BEGIN
              IF includeFinishedJobs THEN //IME403
                PrognosisRec.CALCFIELDS("Prognosis Revenue", "Prognosis Total Cost");
      //>>IME403
              IF NOT includeFinishedJobs THEN BEGIN
                //Prognosis Revenue
                //Sum("Prognosis Line"."Amount Revenue"       WHERE (Project No.=FIELD(Project No.),Prognosis Date=FIELD(Prognosis Date),Cost Type=FILTER(Revenue)))
                //Prognosis Total Cost
                //Sum("Prognosis Line"."Prognosis Total Cost" WHERE (Project No.=FIELD(Project No.),Prognosis Date=FIELD(Prognosis Date)))
                PrognosisRec."Prognosis Revenue" :=0;
                lPrognosisLine.SETRANGE("Project No.",PrognosisRec."Project No.");
                lPrognosisLine.SETRANGE("Prognosis Date",PrognosisRec."Prognosis Date");
                //lPrognosisLine.SETRANGE("Cost Type",lPrognosisLine."Cost Type"::Revenue);
                lJobRec2.COPYFILTERS(JobRec);
                IF lPrognosisLine.FINDSET(FALSE) THEN
                REPEAT
                  lJobRec2.SETRANGE("No.",lPrognosisLine."Project No.");
                  IF lJobRec2.FINDFIRST() THEN BEGIN
      //>>IME403C
                    PrognosisRec."Prognosis Total Cost" += lPrognosisLine."Prognosis Total Cost" ;
                    IF lPrognosisLine."Cost Type" = lPrognosisLine."Cost Type"::Revenue THEN
      //<<IME403C
                      PrognosisRec."Prognosis Revenue" += lPrognosisLine."Amount Revenue";
                  END;
                UNTIL lPrognosisLine.NEXT=0;
              END;
      //<<IME403
              "Prognosis Total Cost" := PrognosisRec."Prognosis Total Cost";
              "Prognosis Total Revenues" := PrognosisRec."Prognosis Revenue" + PrognosisRec."Project Invoiced";
              lvPrognRevenuePresent := PrognosisRec."Prognosis Revenue" <> 0;
            END;
            "Prognosis Financial Result" := "Prognosis Total Revenues" - ("Prognosis Total Cost" + "Purchase Result") ;
          END;
        END;
        "Actual Cost" := JobRec."Actual Costs" ;
        "Contract Amount" :=
          JobRec."Project Contract Amount" +
          JobRec."Extension Contract Amount" +
          JobRec."Options Contract Amount";
        //>> 150604 ITERO.SB IME-365/IME-441 Do not use contract amount in calculation
          "Prognosis Revenue" := "Prognosis Total Revenues"; //C022697.o VAR lvPrognRevenue replaced by new field
      //  IF lvPrognRevenuePresent THEN
      ////  lvPrognRevenue := "Prognosis Total Revenues" //C022697.o
      //    "Prognosis Revenue" := "Prognosis Total Revenues" //C022697.o VAR lvPrognRevenue replaced by new field
      //  ELSE
      //    "Prognosis Revenue" := "Contract Amount";
        IF ICalledFromProjectRecording THEN
          PrognEndResVersusContractPr := IProjRecordingLine."Progn. End Res. Vs. Contract"
        ELSE BEGIN
          PrognEndResVersusContractPr := CostContMgt.PrognEndResVrsContrAmtProject(JobRec, TRUE);
        END;
        IF lvPrognRevenuePresent THEN
          PrognEndResVersusContractPr := PrognEndResVersusContractPr - "Contract Amount" + "Prognosis Total Revenues";
        IF includeFinishedJobs THEN //IME403
          CALCFIELDS("Previous Actual Precl. Result", "Previous Turnover", "Previous Cost");
      //>>IME403
        IF NOT includeFinishedJobs THEN BEGIN
          lProjectPreclosureResult.RESET;
          lJobRec2.COPYFILTERS(JobRec);
          lProjectPreclosureResult.SETRANGE("Project No.",PrognosisRec."Project No.");
          lProjectPreclosureResult.SETRANGE(Posted,TRUE);
          //Previous Turnover
          //Sum("Project Preclosure Result".Turnover WHERE (Project No.=FIELD(Project No.),Posted=CONST(Yes)))
          //Previous Cost
          //Sum("Project Preclosure Result".Cost WHERE (Project No.=FIELD(Project No.),Posted=CONST(Yes)))
          "Previous Turnover" := 0;
          "Previous Cost" := 0;
          IF lProjectPreclosureResult.FINDSET(FALSE) THEN
          REPEAT
            lJobRec2.SETRANGE("No.",lProjectPreclosureResult."Project No.");
            IF lJobRec2.FINDFIRST() THEN BEGIN
              "Previous Turnover" += lProjectPreclosureResult.Turnover;
              "Previous Cost" += lProjectPreclosureResult.Cost;
            END;
          UNTIL lProjectPreclosureResult.NEXT=0;
        //Previous Actual Precl. Result
        //Sum("Project Preclosure Result"."Actual Preclosure Result" WHERE (Project No.=FIELD(Project No.),Posted=CONST(Yes),Posting Date=FIELD(Period Filter),Line No.=FIELD(Line Filter)))
          "Previous Actual Precl. Result" :=0;
          IF GETFILTER("Period Filter") <> '' THEN lProjectPreclosureResult.SETFILTER("Posting Date",'%1',"Period Filter");
          IF GETFILTER("Line Filter") <> '' THEN lProjectPreclosureResult.SETFILTER("Line No.",'%1',"Line Filter");
          IF lProjectPreclosureResult.FINDSET(FALSE) THEN
          REPEAT
            lJobRec2.SETRANGE("No.",lProjectPreclosureResult."Project No.");
            IF lJobRec2.FINDFIRST() THEN BEGIN
              "Previous Actual Precl. Result" += lProjectPreclosureResult."Actual Preclosure Result";
            END;
          UNTIL lProjectPreclosureResult.NEXT=0;
        END;
      //<<IME403
        "Progress % Base" := 0;
        CASE JobRec."Preclosure Result" OF
          JobRec."Preclosure Result"::Allowed,
          JobRec."Preclosure Result"::"Sales Allowed":
            IF ICalledFromProjectRecording THEN
              "Progress % Base" := IProjRecordingLine.Progress
            ELSE
              "Progress % Base" := CostContMgt.AllowedPercProject(JobRec,TRUE);
          JobRec."Preclosure Result"::Invoiced: //08-07-09
            BEGIN
              IF includeFinishedJobs THEN //IME403
                JobRec.CALCFIELDS(Revenues);
      //Revenues
      //-Sum("Job Ledger Entry"."Total Price (LCY)"
      //  WHERE (
      //  Main Project No.=FIELD(Main Project),
      //  Job No.=FIELD(Project Filter),
      //  Entry Type=CONST(Sale),
      //  Posting Date=FIELD(Cumulation Filter),
      //  Original Cost Type=FIELD(Original Cost Type Filter),
      //  Rental Unit=FIELD(Rental Unit Filter)
      //>>IME403
              IF NOT includeFinishedJobs THEN BEGIN
                JobRec.Revenues := 0;
                lJobLedgerEntry.RESET;
                lJobLedgerEntry.SETRANGE("Main Project No.",JobRec."Main Project");
                IF ProjFilter <> '' THEN lJobLedgerEntry.SETFILTER("Job No.",ProjFilter);
                lJobLedgerEntry.SETRANGE("Entry Type",lJobLedgerEntry."Entry Type"::Sale);
                IF "Posting Date" <> 0D THEN lJobLedgerEntry.SETFILTER("Posting Date", '..%1', "Posting Date");
                IF JobRec.GETFILTER("Original Cost Type Filter") <> '' THEN lJobLedgerEntry.SETFILTER("Original Cost Type", '%1',JobRec."Original Cost Type Filter");
                IF JobRec.GETFILTER("Rental Unit Filter") <> '' THEN lJobLedgerEntry.SETFILTER("Rental Unit",'%1',JobRec."Rental Unit Filter");
                lJobRec2.COPYFILTERS(JobRec);
                IF lJobLedgerEntry.FINDSET(FALSE) THEN
                REPEAT
                  lJobRec2.SETRANGE("No.",lJobLedgerEntry."Job No.");
                  IF lJobRec2.FINDFIRST() THEN
                    JobRec.Revenues -= lJobLedgerEntry."Total Price (LCY)";
                UNTIL lJobLedgerEntry.NEXT=0;
              END;
      //<<IME403
      //M C-027051 so
      //        IF JobRec."Project Contract Amount" + JobRec."Extension Contract Amount" + JobRec."Options Contract Amount" <> 0 THEN
      //          "Progress % Base" :=
      //            JobRec.Revenues /
      //            (JobRec."Project Contract Amount" + JobRec."Extension Contract Amount" + JobRec."Options Contract Amount") * 100
      //M C-027051 sn
              IF "Prognosis Revenue" <> 0 THEN
                "Progress % Base" := (JobRec.Revenues / "Prognosis Revenue") * 100;
      //M C-027051 en
            END;
          ELSE
            IF JobSetup."Method Proj. Progress" = JobSetup."Method Proj. Progress"::"Cost to Revenue" THEN BEGIN
              IF "Prognosis Revenue" <> 0 THEN
                "Progress % Base" :=  ("Actual Cost"/"Prognosis Revenue") * 100;
            END;
            IF JobSetup."Method Proj. Progress" = JobSetup."Method Proj. Progress"::"Cost to Cost" THEN BEGIN
              IF ("Prognosis Revenue" - PrognEndResVersusContractPr <> 0) THEN
                "Progress % Base" := ("Actual Cost"/("Prognosis Revenue"-PrognEndResVersusContractPr)) * 100;
            END;
            //C-026777.sn
            IF JobSetup."Method Proj. Progress" = JobSetup."Method Proj. Progress"::"Cost to Cost (incl. Firm Commitments)" THEN BEGIN
              IF ("Prognosis Revenue" - PrognEndResVersusContractPr <> 0) THEN BEGIN
                IF includeFinishedJobs THEN //IME403
                  JobRec.CALCFIELDS("Received/Not Invoiced", "Open Ovh. Surch. Firm (Purch.)");  // C-026777
      //>>IME403
                //Received/Not Invoiced
                //Sum("Purchase Order Control Line"."Amt. Rcd. Not Invoiced" WHERE (Main Project No.=FIELD(Main Project),Project No.=FIELD(Project Filter),Date=FIELD(Cumulation Filter),Purchase Action=FIELD(Purchase Action Filter)))
                //Open Ovh. Surch. Firm (Purch.)
                //Sum("Purchase Order Control Line"."Overhead Surcharge Firm" WHERE (Main Project No.=FIELD(Main Project),Project No.=FIELD(Project Filter),Date=FIELD(Cumulation Filter),Purchase Action=FIELD(Purchase Action Filter)))
                IF NOT includeFinishedJobs THEN BEGIN
                  JobRec."Received/Not Invoiced" :=0;
                  JobRec."Open Ovh. Surch. Firm (Purch.)" :=0;
                  lPurchaseOrderControlLine.RESET;
                  lPurchaseOrderControlLine.SETRANGE("Main Project No.",JobRec."Main Project");
                  IF ProjFilter <> '' THEN lPurchaseOrderControlLine.SETFILTER("Project No.",ProjFilter);
                  IF JobRec.GETFILTER("Cumulation Filter") <> '' THEN lPurchaseOrderControlLine.SETFILTER(Date,'%1',JobRec."Cumulation Filter");
                  IF JobRec.GETFILTER("Purchase Action Filter") <> '' THEN lPurchaseOrderControlLine.SETFILTER("Purchase Action",JobRec."Purchase Action Filter");
                  lJobRec2.COPYFILTERS(JobRec);
                  IF lPurchaseOrderControlLine.FINDSET(FALSE) THEN
                  REPEAT
                    lJobRec2.SETRANGE("No.",lPurchaseOrderControlLine."Project No.");
                    IF lJobRec2.FINDFIRST() THEN BEGIN
                      JobRec."Received/Not Invoiced" += lPurchaseOrderControlLine."Amt. Rcd. Not Invoiced";
                      JobRec."Open Ovh. Surch. Firm (Purch.)" += lPurchaseOrderControlLine."Overhead Surcharge Firm" ;
                    END;
                  UNTIL lPurchaseOrderControlLine.NEXT=0;
                END;
      //<<IME403
                FirmCommitments := JobRec."Received/Not Invoiced" + JobRec."Open Ovh. Surch. Firm (Purch.)";  // C-026777
                "Progress % Base" := (("Actual Cost" + FirmCommitments)/("Prognosis Revenue"-PrognEndResVersusContractPr)) * 100;
              END;
            END;
            //C-026777.en
        END;
        IF (JobRec."Preclosure Result" = JobRec."Preclosure Result"::"Sales Progress") OR
           (JobRec."Preclosure Result" = JobRec."Preclosure Result"::"Sales Allowed") THEN BEGIN
          IF gvCountUnits THEN BEGIN
            PlotRec.RESET;
            PlotRec.SETRANGE("Project No.", JobRec."No.");
            "Units Saleable" := PlotRec.COUNT;
            PlotRec.SETFILTER("Sales Status", '%1..', PlotRec."Sales Status"::Sold);
            PlotRec.SETFILTER("Sales Status Since", '..%1', "Posting Date");
            "Units Sold" := PlotRec.COUNT;
          END;
          IF "Units Saleable" <> 0 THEN
            "Sales Progress" := ROUND(100 * "Units Sold" / "Units Saleable")
          ELSE
            "Sales Progress" := 0;
          "Progress %" := ROUND("Progress % Base" * ("Sales Progress" / 100));
        END ELSE
          "Progress %" := "Progress % Base";
      //>>4PS-002
        IF JobRec."Forecast Level" = JobRec."Forecast Level"::"Cost Component" THEN BEGIN
          "Progress % Base" := 0;
          IF "Prognosis Total Cost" <> 0 THEN
      //>>IME403
            //"Progress % Base" := (JobRec."Actual Costs" / "Prognosis Total Cost" * 100);
            "Progress % Base" := ("Actual Cost" / "Prognosis Total Cost" * 100);
      //<<IME403
          "Progress %" := "Progress % Base";
        END;
      //>> 150604 ITERO.SB IME-366 Change calculation of Progress for cost object level
        IF JobRec."Forecast Level" = JobRec."Forecast Level"::"Cost Object" THEN BEGIN
          "Progress % Base" := 0;
          IF "Prognosis Total Cost" <> 0 THEN
      //>>IME403
            //"Progress % Base" := (JobRec."Actual Costs" / "Prognosis Total Cost" * 100);
            "Progress % Base" := ("Actual Cost" / "Prognosis Total Cost" * 100);
      //<<IME403
          "Progress %" := "Progress % Base";
        END;
      //<<
        IF "Progress %" > 100 THEN  //M16746
          "Progress %" := 100;      //M16746
        //>> 150608 ITERO.SB IME-366 Change calculation of Progress
        IF "Progress %" < 0 THEN BEGIN
      //>>IME403
          //IF ("Prognosis Total Cost" > 0) AND (JobRec."Actual Costs" < 0) THEN
          IF ("Prognosis Total Cost" > 0) AND ("Actual Cost" < 0) THEN
      //<<IME403
            "Progress %" := 0;
        END;
        IF "Progress %" < 0 THEN BEGIN
      //>>IME403
          //IF ("Prognosis Total Cost" < 0) AND (JobRec."Actual Costs" > 0) THEN
          IF ("Prognosis Total Cost" < 0) AND ("Actual Cost" > 0) THEN
      //<<IME403
            "Progress %" := 0;
        END;
        //>>
        IF "Result Type" = "Result Type"::"Preclosure Result" THEN BEGIN
          "Expected Final Result" := "Prognosis Financial Result";
          "Corrected Final Result":= "Expected Final Result";
          "Calculated Turnover" := ROUND("Progress %" * "Prognosis Revenue" / 100);
          Turnover := "Calculated Turnover" - "Previous Turnover";
          IF "Expected Final Result" < 0 THEN
            "Calculated Preclosure Result" := "Expected Final Result"
          ELSE BEGIN
            "Calculated Preclosure Result" := "Progress %" * "Expected Final Result" / 100 ;
            lvDampingRatioRec.SETFILTER("Until Production", '>=%1', ROUND("Progress %", 1, '>'));
            IF lvDampingRatioRec.FINDFIRST THEN BEGIN
              "Calculated Preclosure Result" := "Progress %" * lvDampingRatioRec.Ratio * "Expected Final Result" / 100;
            END;
          END;
          "Calculated Preclosure Result" := ROUND("Calculated Preclosure Result");
          "Corrected Preclosure Result" := "Calculated Preclosure Result" ;
          "Actual Preclosure Result" := "Calculated Preclosure Result" - "Previous Actual Precl. Result";
          "Actual Preclosure Result" := ROUND("Actual Preclosure Result");
          "Calculated Cost" := ROUND("Calculated Turnover" - "Calculated Preclosure Result");
          "Corrected Cost" := "Calculated Cost";
          Cost := ROUND("Corrected Cost" - "Previous Cost");
          "Progress % Actual" := "Progress %";  //C001798.n
        END ELSE BEGIN
          "Progress % Actual" := 0;  //C001798.n
          IF "Prognosis Financial Result" < 0 THEN
            "Calculated Provision" := "Prognosis Financial Result"
          ELSE
            "Calculated Provision" := 0;
          IF includeFinishedJobs THEN //IME403
            CALCFIELDS("Previous Actual Provision");
      //>>IME403
          //Previous Actual Provision
          //Sum("Project Preclosure Result"."Actual Provision" WHERE (Project No.=FIELD(Project No.),Posted=CONST(Yes)))
          IF NOT includeFinishedJobs THEN BEGIN
            lProjectPreclosureResult.RESET;
            lJobRec2.COPYFILTERS(JobRec);
            lProjectPreclosureResult.SETRANGE("Project No.",PrognosisRec."Project No.");
            lProjectPreclosureResult.SETRANGE(Posted,TRUE);
            "Previous Actual Provision" := 0;
            IF lProjectPreclosureResult.FINDSET(FALSE) THEN
            REPEAT
              lJobRec2.SETRANGE("No.",lProjectPreclosureResult."Project No.");
              IF lJobRec2.FINDFIRST() THEN BEGIN
                "Previous Actual Provision" += lProjectPreclosureResult."Actual Provision";
              END;
            UNTIL lProjectPreclosureResult.NEXT=0;
          END;
      //<<IME403
          "Actual Provision" := "Calculated Provision" - "Previous Actual Provision"
        END;
        "Prognosis Date" := JobRec.GETRANGEMAX("Prognosis Filter");
        "Progress Date" := JobRec.GETRANGEMAX("Progress Filter");
        "Prognosis Level" := PrognosisRec."Prognosis Level";
        MODIFY;
      //>>IME403B
        IF (lProjectStatusFilter <> '') AND includeFinishedJobs THEN
          JobRec.SETRANGE("Project Status",lProjectStatusFilterMin, lProjectStatusFilterMax);
      //<<IME403B
      END;
    END;

    BEGIN
    {
      140514 ITERO.SB IME-145 Calc. of revenues is missing calcfield
      150604 ITERO.SB Change calculation of Progress for cost object level
      150604 ITERO.SB IME-365/IME-341 Do not use contract amount in calculation
      150608 ITERO.SB IME-366 Change calculation of Progress
      160120 ITERO.DL IME403 don't include closed projects in project precl.result
      160225 ITERO.DL IME403B reset old filter
      160524 ITERO.DL IME403C incl PrognosisRec."Prognosis Total Cost" in calc (pure 089004)
    }
    END.
  }
  RDLDATA
  {
  }
}

