OBJECT Report 11012095 Create Cycle Blanket Scheme
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Cycle Blanket Scheme;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF (StartingDate = 0D) OR (Cycle = EmptyCycle) THEN
                    ERROR(Text002);

                  ValidateFirstDate();
                  ValidateEndingDate();
                END;

  }
  DATASET
  {
    { 6547;    ;DataItem;                    ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnPreDataItem=BEGIN
                               COPY(gPurchLineRec);
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Total Quantity Blanket Scheme");
                                  QuantityToDo := Quantity - "Total Quantity Blanket Scheme";
                                  IF (QuantityToDo <= 0) THEN
                                    CurrReport.SKIP;

                                  BlanketSchemeRec.RESET;
                                  BlanketSchemeRec.SETCURRENTKEY("Document No." ,"Document Line No.", "Blanket Date");
                                  BlanketSchemeRec2.RESET;
                                  BlanketSchemeRec2.SETCURRENTKEY("Document No." ,"Document Line No.", "Blanket Date");
                                  BlanketSchemeFound := TRUE;
                                  NextDate := FirstDate;

                                  WHILE (QuantityToDo > 0) AND ((NextDate <= EndingDate) OR (EndingDate = 0D)) AND (BlanketSchemeFound) DO BEGIN
                                    BlanketSchemeFound := FALSE;
                                    BlanketSchemeRec.SETCURRENTKEY("Document No." ,"Document Line No.", "Blanket Date");
                                    BlanketSchemeRec.SETRANGE("Document No.", "Document No.");
                                    BlanketSchemeRec.SETRANGE("Document Line No.", "Line No.");
                                    BlanketSchemeRec.SETRANGE("Blanket Date", StartingDate);
                                    BlanketSchemeRec.SETFILTER(Quantity, '>0');
                                    IF BlanketSchemeRec.FIND('-') THEN BEGIN
                                      REPEAT
                                        BlanketSchemeFound := TRUE;
                                        BlanketSchemeRec2.SETRANGE("Document No.", BlanketSchemeRec."Document No.");
                                        BlanketSchemeRec2.SETRANGE("Document Line No.", BlanketSchemeRec."Document Line No.");
                                        BlanketSchemeRec2.SETRANGE("Blanket Date", NextDate);
                                        BlanketSchemeRec2.SETRANGE(Deliver, BlanketSchemeRec.Deliver);
                                        BlanketSchemeRec2.SETRANGE("Ship To Location", BlanketSchemeRec."Ship To Location");
                                        BlanketSchemeRec2.SETRANGE("Project No.", BlanketSchemeRec."Project No.");  //DP00416.n
                                        BlanketSchemeRec2.SETRANGE("Plot No.", BlanketSchemeRec."Plot No.");  //DP00416.n
                                        IF NOT BlanketSchemeRec2.FIND('-') THEN BEGIN
                                          IF (QuantityToDo >= BlanketSchemeRec.Quantity) THEN BEGIN
                                            BlanketQuantity := BlanketSchemeRec.Quantity;
                                            QuantityToDo := QuantityToDo - BlanketQuantity;
                                          END ELSE BEGIN
                                            BlanketQuantity := QuantityToDo;
                                            QuantityToDo := 0;
                                          END;
                                          BlanketSchemeRec2.INIT;
                                          BlanketSchemeRec2."Document No." := BlanketSchemeRec."Document No.";
                                          BlanketSchemeRec2."Document Line No." := BlanketSchemeRec."Document Line No.";
                                          BlanketSchemeRec2."Line No." := 0;
                                          BlanketSchemeRec2."Blanket Date" := NextDate;
                                          BlanketSchemeRec2.Quantity := BlanketQuantity;
                                          BlanketSchemeRec2.Deliver := BlanketSchemeRec.Deliver;
                                          BlanketSchemeRec2."Ship To Location" := BlanketSchemeRec."Ship To Location";
                                          BlanketSchemeRec2."Project No." := BlanketSchemeRec."Project No.";  //DP00416.n
                                          BlanketSchemeRec2."Plot No." := BlanketSchemeRec."Plot No.";  //DP00416.n
                                          BlanketSchemeRec2.INSERT(TRUE);
                                        END;
                                      UNTIL (BlanketSchemeRec.NEXT = 0) OR (QuantityToDo <= 0)
                                    END;

                                    NextDate := CalculateNextDate(NextDate);

                                    IF BaseCalRec.READPERMISSION THEN BEGIN  //db.sn, 29-12-06
                                      CompInfoRec.GET;
                                      REPEAT
                                        NonWorkDate := CalendarMgt.CheckDateStatus(CompInfoRec."Base Calendar Code", NextDate, dummyDesc);
                                        IF NonWorkDate = TRUE THEN
                                          NextDate := CalculateNextDate(NextDate);
                                      UNTIL (NonWorkDate = FALSE) OR (NextDate > EndingDate);
                                    END;                                     //db.en, 29-12-06
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   StartingDate := gStartingDate;
                   IF (StartingDate = 0D) THEN
                     StartingDate := TODAY;

                   FirstDate := CalculateNextDate(StartingDate);
                 END;

    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=ENU=Starting Date;
                  SourceExpr=StartingDate;
                  OnValidate=BEGIN
                               IF (StartingDate = 0D) OR (Cycle = EmptyCycle) THEN
                                 EXIT;

                               ValidateFirstDate();
                             END;
                              }

      { 1100525003;2;Field  ;
                  CaptionML=ENU=Cycle;
                  SourceExpr=Cycle;
                  OnValidate=BEGIN
                               IF (StartingDate = 0D) OR (Cycle = EmptyCycle) THEN
                                 EXIT;

                               ValidateFirstDate();
                             END;
                              }

      { 1100525004;2;Field  ;
                  CaptionML=ENU=Generate from;
                  SourceExpr=FirstDate;
                  Editable=FALSE }

      { 1100525005;2;Field  ;
                  CaptionML=ENU=Generate upto;
                  SourceExpr=EndingDate;
                  OnValidate=BEGIN
                               ValidateEndingDate();
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      gPurchLineRec@1210190000 : Record 39;
      Text000@1210190001 : TextConst 'ENU=Date ''Generate from'' must be greater than the Starting Date.';
      BlanketSchemeRec@1210190010 : Record 11012066;
      BlanketSchemeRec2@1210190013 : Record 11012066;
      CompInfoRec@1100485001 : Record 79;
      BaseCalRec@1100485000 : Record 11072014;
      Cycle@1210190002 : DateFormula;
      EmptyCycle@1210190007 : DateFormula;
      gStartingDate@1210190008 : Date;
      StartingDate@1210190003 : Date;
      EndingDate@1210190004 : Date;
      FirstDate@1210190005 : Date;
      Text001@1210190006 : TextConst 'ENU=Date ''Generate from'' may not be less than current date.';
      Text002@1210190009 : TextConst 'ENU=Starting Date and/or Cycle not filled.';
      NextDate@1210190011 : Date;
      BlanketSchemeFound@1210190016 : Boolean;
      QuantityToDo@1210190012 : Decimal;
      Text003@1210190014 : TextConst 'ENU=Date ''Generate upto'' may not be less than date ''Generate from''.';
      BlanketQuantity@1210190015 : Decimal;
      NonWorkDate@1100485002 : Boolean;
      CalendarMgt@1100485003 : Codeunit 7600;
      dummyDesc@1100485004 : Text[30];

    PROCEDURE InitSelections@1210190000(VAR IPurchLineRec@1210190000 : Record 39;IStartingDate@1210190001 : Date);
    BEGIN
      gPurchLineRec.COPY(IPurchLineRec);
      gStartingDate := IStartingDate;
    END;

    PROCEDURE ValidateFirstDate@1210190002();
    BEGIN
      FirstDate := CalculateNextDate(StartingDate);
      IF (FirstDate <= StartingDate) THEN
        ERROR(Text000);

      IF (FirstDate < TODAY) THEN
        ERROR(Text001);
    END;

    PROCEDURE ValidateEndingDate@1210190005();
    BEGIN
      IF (EndingDate =0D) THEN
        EXIT;

      IF (EndingDate < FirstDate) THEN
        ERROR(Text003);
    END;

    PROCEDURE CalculateNextDate@1210190001(IDate@1210190000 : Date) : Date;
    BEGIN
      IF (IDate = 0D) OR (Cycle = EmptyCycle) THEN
        EXIT(IDate);

      EXIT(CALCDATE(Cycle, IDate));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

