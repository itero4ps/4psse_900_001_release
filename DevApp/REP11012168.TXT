OBJECT Report 11012168 Update Recipe OLD
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Update Recipe;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CheckCentralManagement;
                 END;

  }
  DATASET
  {
    { 5945;    ;DataItem;                    ;
               DataItemTable=Table11012156;
               DataItemTableView=SORTING(Recipe Group,Recipe)
                                 WHERE(Estimate No.=FILTER(''));
               OnPreDataItem=BEGIN
                               RemoveMessage;  //db, 10-03-15: C017415
                               StartUpdate;
                               ShowMessage;  //db, 10-03-15: C017415
                               CurrReport.BREAK;
                             END;

               ReqFilterFields=Recipe Group,Recipe }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=ActNorm;
                  CaptionML=ENU=Actualise Norm;
                  SourceExpr=ActNorm }

      { 1100525003;2;Field  ;
                  Name=ActPrice;
                  CaptionML=ENU=Actualise Price;
                  SourceExpr=ActPrice;
                  OnValidate=BEGIN
                               IF NOT ActPrice AND ActItemRelation THEN
                                 ActItemRelation := FALSE;
                             END;
                              }

      { 1100525004;2;Field  ;
                  Name=PriceMethod;
                  CaptionML=ENU=Calculate Price and Discount;
                  OptionCaptionML=ENU=Actualise Gross Price + Discount Percentage + Nett Price,Actualise Gross Price + Fix Discount Percentage + Calculate Nett Price,Fix Gross Price + Actualise Discount Percentage + Calculate Nett Price, Fix Gross Price + Calculate Discount Percentage + Actualise Nett Price, Calculate Gross Price + Fix Discount Percentage + Actualise Nett Price;
                  SourceExpr=PriceMethod }

      { 1100525005;2;Field  ;
                  Name=ActRate;
                  CaptionML=ENU=Actualise Rate;
                  SourceExpr=ActRate }

      { 1100525006;2;Field  ;
                  Name=ActPlantPrice;
                  CaptionML=ENU=Update Plant Price;
                  SourceExpr=ActPlantPrice }

      { 1100525007;2;Field  ;
                  Name=ActSubOper;
                  CaptionML=ENU=Update Sub Operation;
                  SourceExpr=ActSubOper }

      { 1100525008;2;Field  ;
                  Name=ActCostObject;
                  CaptionML=ENU=Renew Cost Object;
                  SourceExpr=ActCostObject }

      { 1100525009;2;Field  ;
                  Name=ActDesc;
                  CaptionML=ENU=Renew Description;
                  SourceExpr=ActDesc }

      { 1100525010;2;Field  ;
                  Name=UpdateWithPerc;
                  CaptionML=ENU=Update with Percentage;
                  SourceExpr=UpdateWithPerc }

      { 1100525011;2;Field  ;
                  Name=PercNorm;
                  CaptionML=ENU=Norm;
                  SourceExpr=PercNorm }

      { 1100525012;2;Field  ;
                  Name=PercItem;
                  CaptionML=ENU=Material;
                  SourceExpr=PercItem }

      { 1100525013;2;Field  ;
                  Name=PercSubc;
                  CaptionML=ENU=Subcontracting;
                  SourceExpr=PercSubc }

      { 1100525014;2;Field  ;
                  Name=PercEqmt;
                  CaptionML=ENU=Plant;
                  SourceExpr=PercEqmt }

      { 1100525015;2;Field  ;
                  Name=CalcRemovalContribution;
                  CaptionML=ENU=Calculate Removal Contribution;
                  SourceExpr=CalcRemovalContribution }

      { 1100525016;2;Field  ;
                  Name=InitAdjFact;
                  CaptionML=ENU=Initialise Adjustment Factor;
                  SourceExpr=InitAdjFact }

      { 1100525017;2;Field  ;
                  Name=ActItemRelation;
                  CaptionML=ENU=Renew Trade Item via Item Relation;
                  SourceExpr=ActItemRelation }

      { 1100525018;2;Field  ;
                  Name=ReplaceRateGroup;
                  CaptionML=ENU=Replace Rate Group;
                  SourceExpr=ReplaceRateGroup;
                  OnValidate=BEGIN
                               IF NOT ReplaceRateGroup THEN BEGIN
                                 OldRateGrp := '';
                                 NewRateGrp := '';
                                 OldRateGrpTxt := '';
                                 NewRateGrpTxt := '';
                               END;
                             END;
                              }

      { 1100525019;2;Field  ;
                  Name=OldRateGrp;
                  CaptionML=ENU=Rate Group (Old);
                  SourceExpr=OldRateGrp;
                  OnValidate=BEGIN
                               RateGrpRec.GET(OldRateGrp);
                               OldRateGrpTxt := RateGrpRec.Description;
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Rate Group List", RateGrpRec) = ACTION::LookupOK THEN BEGIN
                               OldRateGrp := RateGrpRec."No.";
                               OldRateGrpTxt := RateGrpRec.Description;
                             END;
                           END;
                            }

      { 1100525020;2;Field  ;
                  Name=NewRateGrp;
                  CaptionML=ENU=Rate Group (new);
                  SourceExpr=NewRateGrp;
                  OnValidate=BEGIN
                               RateGrpRec.GET(NewRateGrp);
                               NewRateGrpTxt := RateGrpRec.Description;
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Rate Group List", RateGrpRec) = ACTION::LookupOK THEN BEGIN
                               NewRateGrp := RateGrpRec."No.";
                               NewRateGrpTxt := RateGrpRec.Description;
                             END;
                           END;
                            }

      { 1100525021;2;Field  ;
                  Name=ReplaceVendor;
                  CaptionML=ENU=Replace Preferred Vendor;
                  SourceExpr=ReplaceVendor;
                  OnValidate=BEGIN
                               IF ReplaceVendor = FALSE THEN BEGIN
                                 OldVendor := '';
                                 NewVendor := '';
                                 OldVendorTxt := '';
                                 NewVendorTxt := '';
                               END;
                             END;
                              }

      { 1100525022;2;Field  ;
                  Name=OldVendor;
                  CaptionML=ENU=Old Vendor;
                  SourceExpr=OldVendor;
                  TableRelation="ETIM Vendor (Central Mgt)";
                  OnValidate=VAR
                               VendorRec@1100525000 : Record 11012304;
                             BEGIN
                               ValidateOldVendor;
                             END;
                              }

      { 1100525023;2;Field  ;
                  Name=NewVendor;
                  CaptionML=ENU=New Vendor;
                  SourceExpr=NewVendor;
                  TableRelation="ETIM Vendor (Central Mgt)";
                  OnValidate=VAR
                               VendorRec@1100525000 : Record 11012304;
                             BEGIN
                               ValidateNewVendor;
                             END;
                              }

      { 1100525024;2;Field  ;
                  Name=ActStdOption;
                  CaptionML=ENU=Standard Option;
                  OptionCaptionML=ENU=" ,Update,Replace";
                  SourceExpr=ActStdOption }

      { 1100525025;2;Field  ;
                  Name=ActPrjOption;
                  CaptionML=ENU=Project Option;
                  OptionCaptionML=ENU=" ,Update,Replace";
                  SourceExpr=ActPrjOption }

      { 1100525026;2;Field  ;
                  Name=ActEstRcp;
                  CaptionML=ENU=Estimate;
                  OptionCaptionML=ENU=" ,Update,Replace";
                  SourceExpr=ActEstRcp;
                  OnValidate=BEGIN
                               IF ActEstRcp = ActEstRcp::Replace THEN
                                 MESSAGE(Text003, EstRec.TABLECAPTION);
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Estimate List", EstRec) = ACTION::LookupOK THEN BEGIN
                                Est := EstRec."No.";
                                EstTxt := EstRec.Description;
                             END;
                             RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1100525027;2;Field  ;
                  Name=ActServRcp;
                  CaptionML=ENU=Service;
                  SourceExpr=ActServRcp }

      { 1100525028;2;Field  ;
                  Name=Est;
                  CaptionML=ENU=Estimate;
                  OptionCaptionML=ENU=" ,Update,Replace";
                  SourceExpr=Est;
                  OnValidate=BEGIN
                               ValidateEstimate;
                             END;

                  OnLookup=BEGIN
                             LookupEstimate;
                           END;
                            }

      { 1100525029;2;Field  ;
                  Name=Contr;
                  CaptionML=ENU=Service Contract;
                  SourceExpr=Contr;
                  OnValidate=BEGIN
                               ValidateContract;
                             END;

                  OnLookup=BEGIN
                             LookupContract;
                           END;
                            }

      { 1100525030;2;Field  ;
                  Name=Loc;
                  CaptionML=ENU=Service Location;
                  SourceExpr=Loc;
                  OnValidate=BEGIN
                               ValidateLocation;
                             END;

                  OnLookup=BEGIN
                             LookupLocation;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      EstRec@1100525049 : Record 11012151;
      ContrRec@1100525048 : Record 11012812;
      LocRec@1100525047 : Record 11012801;
      RecipeRec@1100525046 : Record 11012155;
      RateGrpRec@1100525044 : Record 11012161;
      PlantTypeRec@1100525043 : Record 11012551;
      TempRec@1100525054 : TEMPORARY Record 11012156;
      ActDesc@1100525028 : Boolean;
      ActNorm@1100525027 : Boolean;
      ActPrice@1100525026 : Boolean;
      ActPlantPrice@1100525025 : Boolean;
      ActRate@1100525024 : Boolean;
      ActSubOper@1100525023 : Boolean;
      ActCostObject@1100525022 : Boolean;
      ActItemRelation@1100525040 : Boolean;
      ActStdOption@1100525021 : ' ,Update,Replace';
      ActPrjOption@1100525020 : ' ,Update,Replace';
      ActEstRcp@1100525019 : ' ,Update,Replace';
      ActServRcp@1100525018 : ' ,Update,Replace';
      InitAdjFact@1100525017 : Boolean;
      ReplaceRateGroup@1100525016 : Boolean;
      CalcRemovalContribution@1100525015 : Boolean;
      PriceMethod@1100525014 : 'Actualise GP+DP+NP,Actualise GP + Fix DP + Calculate NP,Fix GP + Actualise DP + Calculate NP,Fix GP + Calculate DP + Actualise NP,Calculate GP + Fix DP + Actualise NP';
      OldRateGrp@1100525032 : Code[20];
      NewRateGrp@1100525031 : Code[20];
      OldRateGrpTxt@1100525030 : Text[50];
      NewRateGrpTxt@1100525029 : Text[50];
      OldVendor@1100525009 : Code[20];
      NewVendor@1100525008 : Code[20];
      OldVendorTxt@1100525007 : Text[50];
      NewVendorTxt@1100525006 : Text[50];
      ReplaceVendor@1100525005 : Boolean;
      UpdateWithPerc@1100525004 : Boolean;
      PercNorm@1100525003 : Decimal;
      PercItem@1100525002 : Decimal;
      PercSubc@1100525001 : Decimal;
      PercEqmt@1100525000 : Decimal;
      Text000@1100525055 : TextConst 'ENU="Update Recipe Lines only allowed in Company used as source for Central Item Management; update related tables possible."';
      Text002@1100525053 : TextConst 'ENU=Recipe            #1################# @2@@@@@@@@@@@@@';
      Text003@1100525010 : TextConst 'ENU=Changes in %1 will be lost';
      Text004@1100525051 : TextConst 'ENU=No Vendors modified within Selection.';
      Text005@1100525050 : TextConst 'ENU=Can not actualize Plant Price on %1 %2 %3 because of difference in Unit of Measurement';
      RcpBln@1100525052 : Boolean;
      Est@1100525038 : Code[20];
      EstTxt@1100525037 : Text[50];
      Contr@1100525036 : Code[20];
      ContrTxt@1100525035 : Text[50];
      Loc@1100525034 : Code[20];
      LocTxt@1100525033 : Text[50];
      UpdateEstimate@1100525012 : Codeunit 11012155;
      Text006@1100525039 : TextConst 'ENU=Continue with update?';
      Text999@1100528000 : TextConst 'ENU=%1 %2:  check Unit %3 for Item %4';

    PROCEDURE StartUpdate@1();
    VAR
      CopyRecipeMgt@1100525001 : Codeunit 11012068;
      UpdateRep@1100485005 : Report 11012318;
      UpdateRecipeLineRep@1100525004 : Report 11012171;
      lvFinal@1100525000 : 'Yes,Only Report';
      lvRcp@1100525002 : Code[20];
      lvRcpGrp@1100525003 : Code[20];
    BEGIN
      //db, 21-01-13
      lvRcpGrp := "Recipe Line OLD".GETFILTER("Recipe Group");
      lvRcp := "Recipe Line OLD".GETFILTER(Recipe);
      //db, 21-01-13

      IF RcpBln = FALSE THEN BEGIN
        //mg.sn, 27-07-10, M15402
        IF ActItemRelation THEN BEGIN
          UpdateRecipeLineRep.SETTABLEVIEW("Recipe Line OLD");
          UpdateRecipeLineRep.RUNMODAL;
          IF NOT CONFIRM(Text006) THEN ERROR('');
        END;
        //mg.sn, 27-07-10, M15402

        UpdateRecipe;
        IF CalcRemovalContribution THEN
          UpdateEstimate.DetermineRemovalContribution(2, '', '', '', '', lvRcpGrp, lvRcp);
        IF InitAdjFact THEN
          UpdateEstimate.ResetAdjustmentFactor('', '', lvRcpGrp,lvRcp, 0, TRUE, 5, 0);
      END;

      IF ActStdOption > ActStdOption::" " THEN BEGIN
        CLEAR(CopyRecipeMgt);
        CopyRecipeMgt.SetSelectionRecipe(DATABASE::"Option Budget",'','','',lvRcpGrp,lvRcp,'','','','',0);  //C027336
        CopyRecipeMgt.ReplaceRecipe(1);
      END;

      IF ActPrjOption > ActPrjOption::" " THEN BEGIN
        CLEAR(CopyRecipeMgt);
        CopyRecipeMgt.SetSelectionRecipe(DATABASE::"Option Budget",'','','',lvRcpGrp,lvRcp,'','','','',0);  //C027336
        CopyRecipeMgt.ReplaceRecipe(2);
      END;

      IF ActEstRcp > ActEstRcp::" " THEN
        UpdateEstimate.ReplaceRecipe(Est, '', lvRcpGrp, lvRcp, ActEstRcp);

      IF ReplaceVendor THEN BEGIN
        IF TempRec.COUNT = 0 THEN
          MESSAGE(Text004)
        ELSE BEGIN
          COMMIT;
          UpdateRep.SetTempRecipeLineOLD(TempRec,lvFinal::Yes);
          UpdateRep.SETTABLEVIEW(RecipeRec);
          UpdateRep.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE UpdateRecipe@1100525001();
    VAR
      EstSetup@1100525034 : Record 11012150;
      EstRec@1100525033 : Record 11012151;
      TradeItemRec@1100525032 : Record 11012317;
      BasicItemRec@1100525031 : Record 11012316;
      ItemRec@1100525030 : Record 27;
      OperRec@1100525029 : Record 11012165;
      SubOperRec@1100525028 : Record 11012166;
      RcpLineRec@1100525027 : Record 11012156;
      RcpLineRec2@1100525026 : Record 11012156;
      OldRcpLineRec@1100525025 : Record 11012156;
      NewRcpLineRec@1100525024 : Record 11012156;
      BudgetRateRec@1100525022 : Record 11012000;
      RateRec@1100525021 : Record 11012162;
      InventorySetup@1210190000 : Record 313;
      ItemRelationRec@1100409000 : Record 11012319;
      ItemRelationPresent@1100409001 : Boolean;
      Status@1100525019 : Dialog;
      maxrec@1100525018 : Integer;
      currec@1100525017 : Integer;
      ItemTypeOpt@1100525016 : 'Item,Basic Item,Trade Item';
      Desc1Txt@1100525014 : Text[100];
      Desc2Txt@1100525013 : Text[100];
      CostObject1@1100525012 : Code[20];
      CostObject2@1100525011 : Code[20];
      OldCostObject@1100525010 : Code[20];
      OldDesc@1100525009 : Text[100];
      OldGrossPrice@1100525008 : Decimal;
      OldDiscPerc@1100525007 : Decimal;
      SubOperNew@1100525006 : Code[20];
      UnitOld@1100525005 : Code[20];
      UnitNew@1100525004 : Code[20];
      NewTradeItem@1100525002 : Code[20];
      CurrItem@1100525000 : Code[20];
      CurrVendor@1100525001 : Code[20];
    BEGIN
      Status.OPEN(Text002);
      CLEAR(currec);
      EstSetup.GET;

      RcpLineRec.COPY("Recipe Line OLD");
      RcpLineRec.SETFILTER("Estimate No.", '%1', '');
      RcpLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
      RcpLineRec.SETFILTER("Part Group", '%1', '');
      RcpLineRec.SETFILTER(Part, '%1', '');
      RcpLineRec.SETRANGE("Estimate Line", 0);
      IF RcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        maxrec := RcpLineRec.COUNT;
        REPEAT
          OldRcpLineRec := RcpLineRec;  //db, 21-01-13
          RecipeRec.GET(RcpLineRec."Recipe Group", RcpLineRec.Recipe);

          OldCostObject := RcpLineRec."Cost Object Material";
          OldDesc := RcpLineRec.Description;
          OldGrossPrice := RcpLineRec."Gross Price";
          OldDiscPerc := RcpLineRec."Discount %";

          IF ReplaceRateGroup = TRUE THEN BEGIN
            EstSetup.TESTFIELD("Rates Based On", EstSetup."Rates Based On"::"Rate Group");
            IF (RecipeRec."Rate Group" = OldRateGrp) THEN BEGIN  //db, 14-01-09: M17790
              RecipeRec."Rate Group" := NewRateGrp;
              RecipeRec.MODIFY(TRUE);
            END;
            IF RateRec.GET(RecipeRec."Rate Group", RcpLineRec."Rate Code") THEN
              RcpLineRec.Rate := RateRec."Cost Rate";
          END;

          IF ReplaceVendor = TRUE THEN BEGIN
            IF (RcpLineRec."Recipe (Child)" = '') AND
              ((RcpLineRec."Vendor (Trade Item)" = OldVendor) OR (OldVendor = '')) THEN
            BEGIN
              IF TradeItemRec.CheckReplaceVendor(
                RcpLineRec."Vendor (Trade Item)", RcpLineRec."Trade Item", NewVendor, NewTradeItem) THEN
              BEGIN
                TempRec := RcpLineRec;
                RcpLineRec2 := RcpLineRec;

                RcpLineRec2."Trade Item" := '';
                RcpLineRec2.VALIDATE("Vendor (Trade Item)", NewVendor);
                RcpLineRec2.VALIDATE("Trade Item", NewTradeItem);
                IF (RcpLineRec2."Item No." = TempRec."Item No.") AND
                   (RcpLineRec2."Vendor (Trade Item)" = NewVendor) AND
                   (RcpLineRec2."Trade Item" = NewTradeItem) THEN
                BEGIN
                  RcpLineRec."Trade Item" := '';
                  RcpLineRec.VALIDATE("Vendor (Trade Item)", NewVendor);
                  RcpLineRec.VALIDATE("Trade Item", NewTradeItem);
                  TempRec.INSERT;
                END;
              END;
            END;
          END;

          IF ActRate = TRUE THEN BEGIN
            IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Budget Rate" THEN BEGIN
              BudgetRateRec.SETRANGE(Code,RcpLineRec."Rate Code");
              BudgetRateRec.SETRANGE("Starting Date",0D,TODAY);
              BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
              IF BudgetRateRec.FINDLAST THEN
                RcpLineRec.Rate := BudgetRateRec.Rate;
            END ELSE BEGIN
              IF RateRec.GET(RecipeRec."Rate Group", RcpLineRec."Rate Code") THEN
                RcpLineRec.Rate := RateRec."Cost Rate";
            END;
          END;

          IF ActNorm = TRUE THEN BEGIN
            IF ActSubOper = TRUE THEN
              SubOperNew := CheckSubOperation(RcpLineRec.Manufacturer, RcpLineRec."Vendor (Trade Item)",
                RcpLineRec."Item No.", RcpLineRec."Basic Item", RcpLineRec."Trade Item");
            IF SubOperNew <> '' THEN
              RcpLineRec.VALIDATE("Sub Operation Code", SubOperNew)
            ELSE
              RcpLineRec.VALIDATE("Sub Operation Code");
          END;

          IF ActPrice = TRUE THEN BEGIN
            OldRcpLineRec := RcpLineRec;
            IF NOT EstRec.GET(RcpLineRec."Estimate No.") THEN EstRec.INIT;
            //mg.sn, 28-07-10, M15402
            IF ActItemRelation THEN BEGIN
              IF RcpLineRec."Item No." <> '' THEN
                RcpLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, FALSE);
            //mg.en, 28-07-10, M15402
            END ELSE BEGIN
              IF RcpLineRec."Trade Item" <> '' THEN
                RcpLineRec.ValidateItem(ItemTypeOpt::"Trade Item", EstRec, FALSE)
              ELSE
                IF RcpLineRec."Basic Item" <> '' THEN
                  RcpLineRec.ValidateItem(ItemTypeOpt::"Basic Item", EstRec, FALSE)
                ELSE
                  IF RcpLineRec."Item No." <> '' THEN
                    RcpLineRec.ValidateItem(ItemTypeOpt::Item, EstRec, FALSE);
            END;

            NewRcpLineRec := RcpLineRec;
            IF (NewRcpLineRec."Trade Item" = OldRcpLineRec."Trade Item") AND //mg, 29-07-10, M15402
               (NewRcpLineRec."Basic Item" = OldRcpLineRec."Basic Item") AND
               (NewRcpLineRec."Unit of Measure" <> OldRcpLineRec."Unit of Measure") THEN BEGIN
              UnitOld := OldRcpLineRec."Unit of Measure";
              UnitNew := NewRcpLineRec."Unit of Measure";
              NewRcpLineRec."Unit of Measure" := UnitOld;
              OldRcpLineRec."Unit of Measure" := UnitNew;
              RcpLineRec.CheckItemUnitConversion(NewRcpLineRec, OldRcpLineRec);
              RcpLineRec."Unit of Measure" := UnitOld;
              RcpLineRec."Material Price":= NewRcpLineRec."Material Price";
              RcpLineRec."Gross Price":= NewRcpLineRec."Gross Price";
              //db.sn, 10-03-15: C017415
              IF RcpLineRec."Trade Item" <> '' THEN BEGIN
                CurrItem := OldRcpLineRec."Trade Item";
                CurrVendor := OldRcpLineRec."Vendor (Trade Item)";
              END ELSE BEGIN
                CurrItem := RcpLineRec."Item No.";
                CurrVendor := OldRcpLineRec.Vendor;
              END;
              StoreMessage(
                COPYSTR(OldRcpLineRec.Description, 1,50),
                STRSUBSTNO(Text999,
                  OldRcpLineRec.FIELDCAPTION(Recipe), OldRcpLineRec.Recipe,
                  OldRcpLineRec."Unit of Measure", CurrItem),
                CurrVendor,CurrItem);
              //db.en, 10-03-15: C017415
            END;

            IF PriceMethod = PriceMethod::"Actualise GP + Fix DP + Calculate NP" THEN BEGIN
              RcpLineRec."Discount %" := OldDiscPerc;
              RcpLineRec.CalculateNettPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Actualise DP + Calculate NP" THEN BEGIN
              RcpLineRec."Gross Price" := OldGrossPrice;
              RcpLineRec.CalculateNettPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Calculate DP + Actualise NP" THEN BEGIN
              RcpLineRec."Gross Price" := OldGrossPrice;
              RcpLineRec.CalculateDiscount;
            END;
            IF PriceMethod = PriceMethod::"Calculate GP + Fix DP + Actualise NP" THEN BEGIN
              RcpLineRec."Discount %" := OldDiscPerc;
              RcpLineRec.CalculateGrossPrice;
            END;

            IF (ActCostObject = FALSE) OR (RcpLineRec."Cost Object Material" = '') THEN
              RcpLineRec."Cost Object Material" := OldCostObject;
            IF ActDesc = FALSE THEN
              RcpLineRec.Description := OldDesc;
          END;

          IF (ActPlantPrice = TRUE) AND
             (PlantTypeRec.READPERMISSION) AND
             (RcpLineRec."Plant Type" <> '') THEN BEGIN
            PlantTypeRec.GET(RcpLineRec."Plant Type");
            IF NOT RcpLineRec."Plant Agreement" THEN BEGIN
              IF RcpLineRec."Unit of Measure" = PlantTypeRec."Unit of Measure" THEN BEGIN
                RcpLineRec.GetDefaultsPlantType;  //db, 13-09-10: M22812
              END ELSE BEGIN
                MESSAGE(Text005, RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.");
              END;
            END;
          END;

          IF (ActDesc = TRUE) AND
             (RcpLineRec."Plant Type" <> '') AND
             (PlantTypeRec.READPERMISSION) THEN
          BEGIN
            PlantTypeRec.GET(RcpLineRec."Plant Type");
            RcpLineRec.Description := PlantTypeRec.Description;
          END;
          IF (ActDesc = TRUE) OR (ActCostObject = TRUE) THEN BEGIN
            Desc1Txt := RcpLineRec.Description;
            Desc2Txt := '';
            CostObject1 := RcpLineRec."Cost Object Labor";
            CostObject2 := RcpLineRec."Cost Object Material";
            //mg.sn, 17-05-11: M26409
            InventorySetup.GET;
            //db.sn, 24-09-12: 26409
            IF ItemRelationRec.GET(RcpLineRec."Item No.") THEN
              ItemRelationPresent := TRUE
            ELSE
              ItemRelationPresent := FALSE;
            IF (ItemRelationPresent = TRUE) AND (InventorySetup."Item Info Trade Item Leading" = FALSE) THEN BEGIN
            //db.en, 24-09-12: 26409
              ItemRec.GET(RcpLineRec."Item No.");
              Desc1Txt := ItemRec.Description;
              Desc2Txt := ItemRec."Description 2";
              IF ItemRec."Global Dimension 2 Code" <> '' THEN
                CostObject2 := ItemRec."Global Dimension 2 Code";
            //mg.en, 17-05-11: M26409
            END ELSE BEGIN
              IF RcpLineRec."Trade Item" <> '' THEN BEGIN
                TradeItemRec.GET(RcpLineRec."Vendor (Trade Item)", RcpLineRec."Trade Item");
                Desc1Txt := TradeItemRec."Item Description";
                Desc2Txt := TradeItemRec."Item Description 2";
                IF TradeItemRec."Cost Object" <> '' THEN
                  CostObject2 := TradeItemRec."Cost Object";
              END ELSE BEGIN
                IF RcpLineRec."Basic Item" <> '' THEN BEGIN
                  BasicItemRec.GET(RcpLineRec.Manufacturer, RcpLineRec."Basic Item");
                  Desc1Txt := BasicItemRec."Product Description";
                  Desc2Txt := BasicItemRec."Product Description 2";
                  IF BasicItemRec."Cost Object" <> '' THEN
                    CostObject2 := BasicItemRec."Cost Object";
                END ELSE BEGIN
                  IF RcpLineRec."Item No." <> '' THEN BEGIN
                    ItemRec.GET(RcpLineRec."Item No.");
                    Desc1Txt := ItemRec.Description;
                    Desc2Txt := ItemRec."Description 2";
                    IF ItemRec."Global Dimension 2 Code" <> '' THEN
                      CostObject2 := ItemRec."Global Dimension 2 Code";
                  END ELSE BEGIN
                    IF RcpLineRec."Sub Operation Code" <> '' THEN BEGIN
                      IF SubOperRec.GET(RcpLineRec."Sub Operation Code") THEN BEGIN
                        //SubOperRec.Description (250), RcpLineRec.Description (100): fill only Desc1Txt (100)
                        Desc1Txt := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Desc1Txt));  //db, 08-06-15: C020235
                        IF OperRec.GET(SubOperRec.Operation) THEN
                          IF OperRec."Cost Object" <> '' THEN
                            CostObject1 := OperRec."Cost Object";
                      END;
                    END;
                  END;
                END;
              END;
            END;
            IF ActDesc = TRUE THEN BEGIN
              IF Desc2Txt = '' THEN
                RcpLineRec.Description := Desc1Txt
              ELSE
                RcpLineRec.Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(RcpLineRec.Description));
            END;
            IF ActCostObject = TRUE THEN BEGIN
              IF RcpLineRec."Item No." + RcpLineRec.Manufacturer + RcpLineRec."Vendor (Trade Item)" = '' THEN
                RcpLineRec."Cost Object Labor" := CostObject1
              ELSE
                RcpLineRec."Cost Object Material" := CostObject2;
            END;
          END;

          IF UpdateWithPerc = TRUE THEN BEGIN
            IF PercNorm <> 0 THEN
              RcpLineRec.Norm := ROUND(RcpLineRec.Norm * (100+PercNorm)/100, 0.00001);
            IF PercItem <> 0 THEN BEGIN
              RcpLineRec."Material Price" := ROUND(RcpLineRec."Material Price" * (100+PercItem)/100, 0.00001);
              IF RcpLineRec."Gross Price" <> 0 THEN
                RcpLineRec."Discount %" :=
                ROUND(100 * (RcpLineRec."Gross Price" - RcpLineRec."Material Price")/
                            (RcpLineRec."Gross Price"), 0.00001);
            END;
            IF PercSubc <> 0 THEN
              RcpLineRec."Subcontracting Price" := ROUND(RcpLineRec."Subcontracting Price" * (100+PercSubc)/100, 0.00001);
            IF PercEqmt <> 0 THEN
              RcpLineRec."Plant Price" := ROUND(RcpLineRec."Plant Price" * (100+PercEqmt)/100, 0.00001);
          END;

          RcpLineRec.CalculateTotals;
          IF FORMAT(OldRcpLineRec) <> FORMAT(RcpLineRec) THEN  //db, 21-01-13: if record not changed, avoid update related companies
            RcpLineRec.MODIFY(TRUE);
          IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
            RcpLineRec.CheckRecipeCharge;

          COMMIT;
          RcpLineRec.UpdateRelatedRecipe(RcpLineRec."Recipe Group", RcpLineRec.Recipe);

          currec := currec + 1;
          Status.UPDATE(1, RcpLineRec.Recipe);
          Status.UPDATE(2, ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      Status.CLOSE;
    END;

    PROCEDURE CheckSubOperation@1210190017(lvManufacturer@1210190004 : Code[20];lvVendor@1210190005 : Code[20];lvItem@1210190000 : Code[20];lvBasicItem@1210190001 : Code[20];lvTradeItem@1210190002 : Code[20]) : Code[20];
    VAR
      TradeItemRec@1210190008 : Record 11012317;
      BasicItemRec@1210190007 : Record 11012316;
      ItemRec@1210190006 : Record 27;
    BEGIN
      IF lvTradeItem <> '' THEN BEGIN
        IF NOT TradeItemRec.GET(lvVendor, lvTradeItem) THEN TradeItemRec.INIT;
        IF TradeItemRec."Sub Operation Code" <> '' THEN
          EXIT(TradeItemRec."Sub Operation Code");
      END;

      IF lvBasicItem <> '' THEN BEGIN
        IF NOT BasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BasicItemRec.INIT;
        IF BasicItemRec."Sub Operation Code" <> '' THEN
          EXIT(BasicItemRec."Sub Operation Code");
      END;

      IF lvItem <> '' THEN BEGIN
        IF NOT ItemRec.GET(lvItem) THEN ItemRec.INIT;
        IF ItemRec."Sub Operation Code" <> '' THEN
          EXIT(ItemRec."Sub Operation Code");
      END;

      EXIT('');
    END;

    PROCEDURE CheckCentralManagement@1100525000();
    VAR
      CompRel@1100525003 : Record 11012059;
      CentrManagementCU@1100525002 : Codeunit 11012010;
      NavBln@1100525001 : Boolean;
      DiscBln@1100525000 : Boolean;
      DiscGrpBln@1100528300 : Boolean;
    BEGIN
      IF CompRel.READPERMISSION THEN BEGIN
        CentrManagementCU.ItemFormEditable(NavBln,DiscBln,DiscGrpBln,RcpBln);
        IF RcpBln THEN BEGIN
          MESSAGE(Text000);
          ActNorm := FALSE;
          ActPrice := FALSE;
          CLEAR(PriceMethod);
          ActRate := FALSE;
          ActPlantPrice := FALSE;
          ActSubOper := FALSE;
          ActCostObject := FALSE;
          ActDesc := FALSE;
          UpdateWithPerc := FALSE;
          PercNorm := 0;
          PercItem := 0;
          PercSubc := 0;
          PercEqmt := 0;
          CalcRemovalContribution := FALSE;
          InitAdjFact := FALSE;
          ReplaceRateGroup := FALSE;
          OldRateGrp := '';
          NewRateGrp := '';
          ReplaceVendor := FALSE;
          OldVendor := '';
          NewVendor := '';
        END;
      END;
    END;

    PROCEDURE ValidateEstimate@1100525003();
    BEGIN
      IF NOT EstRec.GET(Est) THEN EstRec.INIT;
      EstTxt := EstRec.Description;
    END;

    PROCEDURE LookupEstimate@1100525004();
    BEGIN
      IF PAGE.RUNMODAL(0, EstRec) = ACTION::LookupOK THEN BEGIN
         Est := EstRec."No.";
         EstTxt := EstRec.Description;
      END;
    END;

    PROCEDURE ValidateContract@1100525005();
    BEGIN
      IF NOT ContrRec.GET(Contr) THEN ContrRec.INIT;
      ContrTxt := ContrRec.Description;
    END;

    PROCEDURE LookupContract@1100525006();
    BEGIN
      IF PAGE.RUNMODAL(0, ContrRec) = ACTION::LookupOK THEN BEGIN
         Contr := ContrRec."No.";
         ContrTxt := ContrRec.Description;
      END;
    END;

    PROCEDURE ValidateLocation@1100525007();
    BEGIN
      IF NOT LocRec.GET(Loc) THEN LocRec.INIT;
      LocTxt := LocRec.Description;
    END;

    PROCEDURE LookupLocation@1100525008();
    BEGIN
      IF PAGE.RUNMODAL(0, LocRec) = ACTION::LookupOK THEN BEGIN
         Loc := LocRec."No.";
         LocTxt := LocRec.Description;
      END;
    END;

    PROCEDURE ValidateOldVendor@1100525009();
    VAR
      VendorRec@1100525000 : Record 11012304;
    BEGIN
      IF NOT VendorRec.GET(OldVendor) THEN VendorRec.INIT;
      OldVendorTxt := VendorRec.Name;
    END;

    PROCEDURE ValidateNewVendor@1100525010();
    VAR
      VendorRec@1100525000 : Record 11012304;
    BEGIN
      IF NOT VendorRec.GET(NewVendor) THEN VendorRec.INIT;
      NewVendorTxt := VendorRec.Name;
    END;

    PROCEDURE RemoveMessage@1100525011();
    VAR
      ErrorRec@1100525000 : Record 11012051;
    BEGIN
      //db, 10-03-15: C017415
      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::Item);
      ErrorRec.DELETEALL;
      COMMIT;  //db, 08-09-15: C025532
    END;

    PROCEDURE StoreMessage@5(lvDesc@11012000 : Text[50];lvMess@11012001 : Text[80];CurrVendor@1100525001 : Code[20];CurrItem@1100525000 : Code[20]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      //db, 10-03-15: C017415
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::Item);
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::Item;
        "Vendor No.":= CurrVendor;
        "Item No." := CurrItem;
        "Line No." := lvError;
        "Error message" := lvMess;
        Description := lvDesc;
        INSERT;
      END;
    END;

    PROCEDURE ShowMessage@1100525012();
    VAR
      ErrorRec@1100525000 : Record 11012051;
    BEGIN
      //db, 10-03-15: C017415
      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::Item);
      IF ErrorRec.FIND('-') THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

