OBJECT Report 11012170 Calc.EstPart (Open Budget)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calculate Part Open Budget;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  StoreFilterEstLineRec.COPY("Estimate Line OLD");  //db, 01-02-10
                  IF NOT CurrReport.USEREQUESTPAGE THEN
                    InitOfferPrice := gvInitOfferPrice;  //db, 22-02-10
                  IF gvSumSheet <> '' THEN
                    SummarySheetRec.Summary := gvSumSheet;  //db, 08-02-10
                  IF SummarySheetRec.Summary <> '' THEN BEGIN
                    SummarySheetRec2.RESET;
                    SummarySheetRec2.SETRANGE(Summary, SummarySheetRec.Summary);
                    SummarySheetRec2.SETRANGE("Estimate No.", "Estimate Line OLD".GETFILTER("Estimate No."));
                    IF NOT SummarySheetRec2.FINDFIRST THEN
                      ERROR(Text11012302);
                  END ELSE BEGIN
                    SummarySheetRec2.RESET;
                    SummarySheetRec2.SETRANGE("Estimate No.", "Estimate Line OLD".GETFILTER("Estimate No."));
                    IF SummarySheetRec2.FIND('-') THEN
                      IF PAGE.RUNMODAL(PAGE::"Summary Sheet List",SummarySheetRec2) = ACTION::LookupOK THEN
                        SummarySheetRec.Summary := SummarySheetRec2.Summary;
                  END;
                END;

  }
  DATASET
  {
    { 1530;    ;DataItem;                    ;
               DataItemTable=Table11012151;
               DataItemTableView=SORTING(No.)
                                 ORDER(Ascending);
               OnPreDataItem=BEGIN
                               Estimate.SETFILTER("No.", StoreFilterEstLineRec.GETFILTER("Estimate No."));  //db, 01-02-10
                             END;

               OnAfterGetRecord=VAR
                                  lSubEstPartRec@1100485000 : Record 11012153;
                                BEGIN
                                  DetermineSummarySheet(Estimate,SummarySheetRec);

                                  TempSummarySheetLineRec[1].RESET;
                                  TempSummarySheetLineRec[1].DELETEALL;

                                  SummarySheetLineRec.SETRANGE(Summary,SummarySheetRec.Summary);
                                  SummarySheetLineRec.SETRANGE("Estimate No.", "No.");
                                  IF SummarySheetLineRec.FINDSET THEN BEGIN
                                    REPEAT
                                      TempSummarySheetLineRec[1] := SummarySheetLineRec;
                                      TempSummarySheetLineRec[1].INSERT;
                                    UNTIL SummarySheetLineRec.NEXT = 0;
                                  END;

                                  lSubEstPartRec.SETRANGE("Estimate No.", "No.");
                                  lSubEstPartRec.SETFILTER("Sub-Estimate No.", StoreFilterEstLineRec.GETFILTER("Sub-Estimate No."));  //db, 23-02-10
                                  IF lSubEstPartRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                    REPEAT
                                      lSubEstPartRec."Calculated Price" := 0;
                                      lSubEstPartRec."Calculated Amount" := 0;
                                      IF InitOfferPrice AND NOT lSubEstPartRec."Offer fixed" THEN BEGIN  //db, 01-02-10 //mg, 20-07-10, M20061
                                        lSubEstPartRec."Offer Price" := 0;
                                        lSubEstPartRec."Offer Amount" := 0;
                                      END;
                                      lSubEstPartRec.MODIFY;
                                    UNTIL lSubEstPartRec.NEXT = 0;
                                  END;

                                  DetermineAdditionalCost;  //db, 01-02-10
                                END;

               OnPostDataItem=BEGIN
                                AggregatePartTotals;  //db, 13-05-14
                              END;
                               }

    { 7176;1   ;DataItem;                    ;
               DataItemTable=Table11012152;
               DataItemTableView=SORTING(Estimate No.,Sub-Estimate No.);
               OnPreDataItem=BEGIN
                               "Sub-Estimate OLD".SETFILTER("Sub-Estimate No.",StoreFilterEstLineRec.GETFILTER("Sub-Estimate No."));  //db, 23-02-10
                             END;

               DataItemLink=Estimate No.=FIELD(No.) }

    { 4927;2   ;DataItem;                    ;
               DataItemTable=Table11012154;
               DataItemTableView=SORTING(Estimate No.,Sub-Estimate No.,Part Group,Part,Line No.);
               OnAfterGetRecord=BEGIN
                                  //db, 01-02-10
                                  WITH "Estimate Line OLD" DO BEGIN
                                    //db.sn, 10-03-14
                                    IF LastKeyValue <> "Estimate No." + "Sub-Estimate No." + "Part Group" + Part THEN BEGIN
                                      LineAmount := 0;
                                      CumTotal := 0;
                                      LastKeyValue := "Estimate No." + "Sub-Estimate No." + "Part Group" + Part;
                                    END;
                                    //db.en, 10-03-14

                                    OldEstLineRec := "Estimate Line OLD";
                                    IF Recipe = '' THEN
                                      DetermineSurchEstLine("Estimate Line OLD",SummarySheetRec)
                                    ELSE BEGIN
                                      DetermineAmountRecipeEstLine("Estimate Line OLD");
                                    END;

                                    IF (EstTotal <> 0) AND (AdditionalCost <> 0) THEN BEGIN
                                      "Labor Amount" := "Labor Amount" +
                                        (OldEstLineRec."Labor Amount" * AdditionalCost / EstTotal);
                                      "Material Amount" := "Material Amount" +
                                        (OldEstLineRec."Material Amount" * AdditionalCost / EstTotal);
                                      "Subcontracting Amount" := "Subcontracting Amount" +
                                        (OldEstLineRec."Subcontracting Amount" * AdditionalCost / EstTotal);
                                      "Plant Amount" := "Plant Amount" +
                                       (OldEstLineRec."Plant Amount" *  AdditionalCost / EstTotal);
                                    END;

                                    Amount := "Labor Amount" + "Material Amount" + "Subcontracting Amount" + "Plant Amount";

                                    "Cumulative Hours" := Hours * "Part Quantity";
                                    "Cumulative Labor" := "Labor Amount" * "Part Quantity";
                                    "Cumulative Material" := "Material Amount" * "Part Quantity";
                                    "Cumulative Gross Price" := "Gross Amount" * "Part Quantity";
                                    "Cumulative Subcontracting" := "Subcontracting Amount" * "Part Quantity";
                                    "Cumulative Plant" := "Plant Amount" * "Part Quantity";
                                    "Cumulative Total" := Amount * "Part Quantity";

                                    //db.sn, 10-03-14
                                    LineAmount := LineAmount + Amount;
                                    CumTotal := CumTotal + (Amount * "Part Quantity");
                                    StoreCalculatedPrice("Estimate No.", "Sub-Estimate No.", "Part Group", Part);
                                    //db.sn, 10-03-14
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                //db, 13-05-14: AggregatePartTotals moved to DataItem Estimate
                              END;

               ReqFilterFields=Estimate No.,Sub-Estimate No.,Part Group,Part;
               DataItemLink=Estimate No.=FIELD(Estimate No.),
                            Sub-Estimate No.=FIELD(Sub-Estimate No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100485004;2;Field  ;
                  CaptionML=ENU=Summary Sheet;
                  SourceExpr=SummarySheetRec.Summary;
                  TableRelation="Summary Sheet".Summary }

      { 1100525000;2;Field  ;
                  CaptionML=ENU=Update Offer Price;
                  SourceExpr=InitOfferPrice }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TotSurchargeAmount@1100485005 : Decimal;
      TotSurchargeHours@1100485006 : Decimal;
      Print2Excel@1100485007 : Boolean;
      Text000@1100485090 : TextConst 'ENU=NotAppl';
      SummarySheetRec@1100485030 : Record 11012172;
      SummarySheetRec2@1100485087 : Record 11012172;
      Text11012302@1100485088 : TextConst 'ENU=No relation between Estimate and Summery sheet';
      TempSummarySheetLineRec@1100485089 : ARRAY [2] OF TEMPORARY Record 11012171;
      SummarySheetLineRec@1100485091 : Record 11012171;
      InitOfferPrice@1100525000 : Boolean;
      AdditionalCost@1100525003 : Decimal;
      EstTotal@1100525002 : Decimal;
      StoreFilterEstLineRec@1100525001 : Record 11012154;
      OldEstLineRec@1100525004 : Record 11012154;
      gvSumSheet@1100525005 : Code[20];
      gvInitOfferPrice@1100525006 : Boolean;
      CumTotal@1100525009 : Decimal;
      LineAmount@1100525008 : Decimal;
      LastKeyValue@1100525007 : Text[250];

    PROCEDURE DetermineSummarySheet@1100485010(IEstimateRec@1100485001 : Record 11012151;ISummarySheetRec@1100485000 : Record 11012172);
    BEGIN
      //First determine the concerning Summary Sheet
      IF SummarySheetRec.Summary = '' THEN BEGIN
        SummarySheetRec.SETRANGE("Estimate No.",IEstimateRec."No.");
        IF NOT SummarySheetRec.FIND('-') THEN BEGIN
          SummarySheetRec := ISummarySheetRec;
        END;
      END ELSE
        SummarySheetRec := ISummarySheetRec;
    END;

    PROCEDURE DetermineSurchEstLine@1100485000(VAR EstimateLineRec@1100485000 : Record 11012154;ISummarySheetRec@1100485001 : Record 11012172);
    BEGIN
      //Determine surcharges for each "Cost Type" line.
      TempSummarySheetLineRec[1].SETRANGE(Type,TempSummarySheetLineRec[1].Type::"Cost Type");
      IF TempSummarySheetLineRec[1].FIND('-') THEN
        REPEAT
          //these are the lines in which Estimate Line exist.
          IF EstLineInFilters(EstimateLineRec,TempSummarySheetLineRec[1]) THEN BEGIN
            IF (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Labor) OR
               (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              SummaryLineInFilter(TempSummarySheetLineRec[1],0,EstimateLineRec."Labor Amount",EstimateLineRec.Hours);
              EstimateLineRec."Labor Amount" += TotSurchargeAmount;
              EstimateLineRec.Hours += TotSurchargeHours;
            END;
            IF (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Material) OR
               (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              SummaryLineInFilter(TempSummarySheetLineRec[1],0,EstimateLineRec."Material Amount",EstimateLineRec.Hours);
              EstimateLineRec."Material Amount" += TotSurchargeAmount;
            END;
            IF (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Subcontracting) OR
               (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              SummaryLineInFilter(TempSummarySheetLineRec[1],0,EstimateLineRec."Subcontracting Amount",EstimateLineRec.Hours);
              EstimateLineRec."Subcontracting Amount" += TotSurchargeAmount;
            END;
            IF (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Plant) OR
               (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              SummaryLineInFilter(TempSummarySheetLineRec[1],0,EstimateLineRec."Plant Amount",EstimateLineRec.Hours);
              EstimateLineRec."Plant Amount" += TotSurchargeAmount;
            END;
          END;
        UNTIL TempSummarySheetLineRec[1].NEXT = 0;
    END;

    PROCEDURE EstLineInFilters@1100485002(IEstLineRec@1100485000 : Record 11012154;ISummarySheetLineRec@1100485001 : Record 11012171) : Boolean;
    VAR
      lvEstLineRec@1100485003 : TEMPORARY Record 11012154;
    BEGIN
      //Determine if Estimate Line fits in filter of "Cost Type" line.
      lvEstLineRec := IEstLineRec;
      lvEstLineRec.INSERT;

      lvEstLineRec.SETRANGE("Estimate No.", ISummarySheetLineRec."Estimate No.");
      lvEstLineRec.SETFILTER("Sub-Estimate No.", ISummarySheetLineRec."Sub-Estimate Filter");
      //lvEstLineRec.SETFILTER("Part Group", ISummarySheetLineRec."Part Group Filter");
      lvEstLineRec.SETFILTER(Part, ISummarySheetLineRec."Part Filter");
      lvEstLineRec.SETFILTER("Line Status", ISummarySheetLineRec."Line Status Filter");
      lvEstLineRec.SETFILTER("Rate Code", ISummarySheetLineRec."Rate Filter");
      lvEstLineRec.SETFILTER("Material Price", ISummarySheetLineRec."Material Price Filter");
      lvEstLineRec.SETFILTER(Code, ISummarySheetLineRec."Code Filter");
      CASE ISummarySheetLineRec."Cost Type" OF
        ISummarySheetLineRec."Cost Type"::Labor,ISummarySheetLineRec."Cost Type"::Total:
          lvEstLineRec.SETFILTER("Cost Object Labor",ISummarySheetLineRec."Cost Object Filter");
        ISummarySheetLineRec."Cost Type"::Material,ISummarySheetLineRec."Cost Type"::Total:
          lvEstLineRec.SETFILTER("Cost Object Material",ISummarySheetLineRec."Cost Object Filter");
        ISummarySheetLineRec."Cost Type"::Subcontracting,ISummarySheetLineRec."Cost Type"::Total:
          lvEstLineRec.SETFILTER("Cost Object Subcontracting",ISummarySheetLineRec."Cost Object Filter");
        ISummarySheetLineRec."Cost Type"::Plant,ISummarySheetLineRec."Cost Type"::Total:
          lvEstLineRec.SETFILTER("Cost Object Plant",ISummarySheetLineRec."Cost Object Filter");
      END;
      //lvEstLineRec.SETFILTER(Recipe, '%1', '');

      EXIT(lvEstLineRec.FIND('-'));
    END;

    PROCEDURE SummaryLineInFilter@1100485001(ISummarySheetLineRec@1100485000 : Record 11012171;iLevel@1100485003 : Integer;iBaseAmount@1100485004 : Decimal;iBaseHours@1100485006 : Decimal);
    VAR
      lvTempSummarySheetLineRec@1100485001 : TEMPORARY Record 11012171;
      lvSummarySheetLineRec@1100485002 : Record 11012171;
      lvSurchargeAmount@1100485005 : Decimal;
      lvSurchargeHours@1100485007 : Decimal;
    BEGIN
      //calculates 1 level surcharge: called iterative!

      lvTempSummarySheetLineRec."Row No." := ISummarySheetLineRec."Row No.";
      lvTempSummarySheetLineRec.INSERT;

      TempSummarySheetLineRec[2].SETRANGE("Estimate No.",ISummarySheetLineRec."Estimate No.");
      TempSummarySheetLineRec[2].SETRANGE(Summary,ISummarySheetLineRec.Summary);
      TempSummarySheetLineRec[2].SETFILTER("Row No.",'<>%1',ISummarySheetLineRec."Row No.");
      TempSummarySheetLineRec[2].SETFILTER("Surcharge Over Row", '<>%1', Text000);
      IF TempSummarySheetLineRec[2].FIND('-') THEN
        REPEAT
          lvTempSummarySheetLineRec.SETFILTER("Row No.",TempSummarySheetLineRec[2]."Surcharge Over Row");
          IF lvTempSummarySheetLineRec.FIND('-') THEN BEGIN
            IF TempSummarySheetLineRec[2].Type = TempSummarySheetLineRec[2].Type::"Surcharge Amount" THEN BEGIN
              lvSurchargeAmount := iBaseAmount * TempSummarySheetLineRec[2]."Surcharge Percentage" / 100;
              TotSurchargeAmount += lvSurchargeAmount;
              lvSummarySheetLineRec.COPY(TempSummarySheetLineRec[2]); //Save
              SummaryLineInFilter(TempSummarySheetLineRec[2],iLevel + 1,lvSurchargeAmount,0);
              TempSummarySheetLineRec[2].COPY(lvSummarySheetLineRec); //Retrieve
            END;
            IF TempSummarySheetLineRec[2].Type = TempSummarySheetLineRec[2].Type::"Surcharge Hours" THEN BEGIN
              lvSurchargeHours := iBaseHours * TempSummarySheetLineRec[2]."Surcharge Percentage" / 100;
              TempSummarySheetLineRec[2].CALCFIELDS("Cost Rate");
              lvSurchargeAmount := lvSurchargeHours * TempSummarySheetLineRec[2]."Cost Rate";
              TotSurchargeHours += lvSurchargeHours;
              TotSurchargeAmount += lvSurchargeAmount;
              lvSummarySheetLineRec.COPY(TempSummarySheetLineRec[2]); //Save
              SummaryLineInFilter(TempSummarySheetLineRec[2],iLevel + 1,lvSurchargeAmount,lvSurchargeHours);
              TempSummarySheetLineRec[2].COPY(lvSummarySheetLineRec); //Retrieve
            END;
          END;
        UNTIL TempSummarySheetLineRec[2].NEXT = 0;
    END;

    PROCEDURE DetermineSurchRcpLine@1100485007(VAR VRecipeLineRec@1100485000 : Record 11012156;ISummarySheetRec@1100485001 : Record 11012172);
    BEGIN
      //Determine surcharges for each "Cost Type" line.
      TempSummarySheetLineRec[1].SETRANGE(Type,TempSummarySheetLineRec[1].Type::"Cost Type");
      IF TempSummarySheetLineRec[1].FIND('-') THEN
        REPEAT
          //these are the lines in which Estimate Line exist.
          IF RcpLineInFilters(VRecipeLineRec,TempSummarySheetLineRec[1]) THEN BEGIN
            IF (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Labor) OR
               (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              SummaryLineInFilter(TempSummarySheetLineRec[1],0,VRecipeLineRec."Labor Amount",VRecipeLineRec.Hours);
              VRecipeLineRec."Labor Amount" += TotSurchargeAmount;
              VRecipeLineRec.Hours += TotSurchargeHours;
            END;
            IF (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Material) OR
               (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              SummaryLineInFilter(TempSummarySheetLineRec[1],0,VRecipeLineRec."Material Amount",VRecipeLineRec.Hours);
              VRecipeLineRec."Material Amount" += TotSurchargeAmount;
            END;
            IF (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Subcontracting) OR
               (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              SummaryLineInFilter(TempSummarySheetLineRec[1],0,VRecipeLineRec."Subcontracting Amount",VRecipeLineRec.Hours);
              VRecipeLineRec."Subcontracting Amount" += TotSurchargeAmount;
            END;
            IF (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Plant) OR
               (TempSummarySheetLineRec[1]."Cost Type" = TempSummarySheetLineRec[1]."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              SummaryLineInFilter(TempSummarySheetLineRec[1],0,VRecipeLineRec."Plant Amount",VRecipeLineRec.Hours);
              VRecipeLineRec."Plant Amount" += TotSurchargeAmount;
            END;
          END;
        UNTIL TempSummarySheetLineRec[1].NEXT = 0;
    END;

    PROCEDURE RcpLineInFilters@1100485008(IRecipeLineRec@1100485000 : Record 11012156;ISummarySheetLineRec@1100485001 : Record 11012171) : Boolean;
    VAR
      lvRecipeLineRec@1100485003 : TEMPORARY Record 11012156;
    BEGIN
      //Determine if Estimate Line fits in filter of "Cost Type" line.
      lvRecipeLineRec := IRecipeLineRec;
      lvRecipeLineRec.INSERT;

      lvRecipeLineRec.SETRANGE("Estimate No.", ISummarySheetLineRec."Estimate No.");
      lvRecipeLineRec.SETFILTER("Sub-Estimate No.", ISummarySheetLineRec."Sub-Estimate Filter");
      //lvRecipeLineRec.SETFILTER("Part Group", ISummarySheetLineRec."Part Group Filter");
      lvRecipeLineRec.SETFILTER(Part, ISummarySheetLineRec."Part Filter");
      lvRecipeLineRec.SETFILTER("Line Status", ISummarySheetLineRec."Line Status Filter");
      lvRecipeLineRec.SETFILTER("Rate Code", ISummarySheetLineRec."Rate Filter");
      lvRecipeLineRec.SETFILTER("Material Price", ISummarySheetLineRec."Material Price Filter");
      lvRecipeLineRec.SETFILTER(Code, ISummarySheetLineRec."Code Filter");
      CASE ISummarySheetLineRec."Cost Type" OF
        ISummarySheetLineRec."Cost Type"::Labor,ISummarySheetLineRec."Cost Type"::Total:
          lvRecipeLineRec.SETFILTER("Cost Object Labor",ISummarySheetLineRec."Cost Object Filter");
        ISummarySheetLineRec."Cost Type"::Material,ISummarySheetLineRec."Cost Type"::Total:
          lvRecipeLineRec.SETFILTER("Cost Object Material",ISummarySheetLineRec."Cost Object Filter");
        ISummarySheetLineRec."Cost Type"::Subcontracting,ISummarySheetLineRec."Cost Type"::Total:
          lvRecipeLineRec.SETFILTER("Cost Object Subcontracting",ISummarySheetLineRec."Cost Object Filter");
        ISummarySheetLineRec."Cost Type"::Plant,ISummarySheetLineRec."Cost Type"::Total:
          lvRecipeLineRec.SETFILTER("Cost Object Plant",ISummarySheetLineRec."Cost Object Filter");
      END;
      //lvRecipeLineRec.SETFILTER(Recipe, '%1', '');

      EXIT(lvRecipeLineRec.FIND('-'));
    END;

    PROCEDURE SummaryRcptLineInFilter@1100485009(ISummarySheetLineRec@1100485000 : Record 11012171;iLevel@1100485003 : Integer;iBaseAmount@1100485004 : Decimal;iBaseHours@1100485006 : Decimal);
    VAR
      lvTempSummarySheetLineRec@1100485001 : TEMPORARY Record 11012171;
      lvSummarySheetLineRec@1100485002 : Record 11012171;
      lvSurchargeAmount@1100485005 : Decimal;
      lvSurchargeHours@1100485007 : Decimal;
    BEGIN
      //calculates 1 level surcharge: called iterative!
      lvTempSummarySheetLineRec := ISummarySheetLineRec;
      lvTempSummarySheetLineRec.INSERT;

      lvTempSummarySheetLineRec.SETRANGE("Estimate No.",ISummarySheetLineRec."Estimate No.");
      lvTempSummarySheetLineRec.SETRANGE(Summary,ISummarySheetLineRec.Summary);

      lvSummarySheetLineRec.SETRANGE("Estimate No.",ISummarySheetLineRec."Estimate No.");
      lvSummarySheetLineRec.SETRANGE(Summary,ISummarySheetLineRec.Summary);
      lvSummarySheetLineRec.SETFILTER("Row No.",'<>%1',ISummarySheetLineRec."Row No.");
      IF lvSummarySheetLineRec.FIND('-') THEN
        REPEAT
          lvTempSummarySheetLineRec.SETFILTER("Row No.",lvSummarySheetLineRec."Surcharge Over Row");
          IF lvTempSummarySheetLineRec.FIND('-') THEN BEGIN
            IF lvSummarySheetLineRec.Type = lvSummarySheetLineRec.Type::"Surcharge Amount" THEN BEGIN
              lvSurchargeAmount := iBaseAmount * lvSummarySheetLineRec."Surcharge Percentage" / 100;
              TotSurchargeAmount += lvSurchargeAmount;
              SummaryLineInFilter(lvSummarySheetLineRec,iLevel + 1,lvSurchargeAmount,0);
            END;
            IF lvSummarySheetLineRec.Type = lvSummarySheetLineRec.Type::"Surcharge Hours" THEN BEGIN
              lvSurchargeHours := iBaseHours * lvSummarySheetLineRec."Surcharge Percentage" / 100;
              lvSummarySheetLineRec.CALCFIELDS("Cost Rate");
              lvSurchargeAmount := lvSurchargeHours * lvSummarySheetLineRec."Cost Rate";
              TotSurchargeHours += lvSurchargeHours;
              TotSurchargeAmount += lvSurchargeAmount;
              SummaryLineInFilter(lvSummarySheetLineRec,iLevel + 1,lvSurchargeAmount,lvSurchargeHours);
            END;
          END;
        UNTIL lvSummarySheetLineRec.NEXT = 0;
    END;

    PROCEDURE DetermineAmountRecipeEstLine@1100485017(VAR VEstLineRec@1100485000 : Record 11012154);
    VAR
      lvRecipeLine@1100485001 : Record 11012156;
    BEGIN
      VEstLineRec.Hours := 0;
      VEstLineRec."Labor Amount" := 0;
      VEstLineRec."Material Amount" := 0;
      VEstLineRec."Subcontracting Amount" := 0;
      VEstLineRec."Plant Amount" := 0;
      VEstLineRec.Amount := 0;

      lvRecipeLine.SETRANGE("Estimate No.",VEstLineRec."Estimate No.");
      lvRecipeLine.SETRANGE("Sub-Estimate No.",VEstLineRec."Sub-Estimate No.");
      lvRecipeLine.SETRANGE("Part Group",VEstLineRec."Part Group");
      lvRecipeLine.SETRANGE(Part,VEstLineRec.Part);
      lvRecipeLine.SETRANGE("Estimate Line",VEstLineRec."Line No.");
      lvRecipeLine.SETRANGE("Recipe Group",VEstLineRec."Recipe Group");
      lvRecipeLine.SETRANGE(Recipe,VEstLineRec.Recipe);
      IF lvRecipeLine.FINDSET THEN
        REPEAT
          DetermineSurchRcpLine(lvRecipeLine,SummarySheetRec);
          //db.sn, 20-03-13: T001183/C003018
          //IF lvRecipeLine."Ignore Recipe Quantity" THEN BEGIN   //db, 18-03-11: M26001
          //  VEstLineRec.Hours += lvRecipeLine.Hours;
          //  VEstLineRec."Labor Amount" += lvRecipeLine."Labor Amount";
          //  VEstLineRec."Material Amount" += lvRecipeLine."Material Amount";
          //  VEstLineRec."Subcontracting Amount" += lvRecipeLine."Subcontracting Amount";
          //  VEstLineRec."Plant Amount" += lvRecipeLine."Plant Amount";
          //  VEstLineRec.Amount += lvRecipeLine.Amount;
          //END ELSE BEGIN
            VEstLineRec.Hours += lvRecipeLine.Hours * VEstLineRec.Quantity;
            VEstLineRec."Labor Amount" += lvRecipeLine."Labor Amount" * VEstLineRec.Quantity;
            VEstLineRec."Material Amount" += lvRecipeLine."Material Amount" * VEstLineRec.Quantity;
            VEstLineRec."Subcontracting Amount" += lvRecipeLine."Subcontracting Amount" * VEstLineRec.Quantity;
            VEstLineRec."Plant Amount" += lvRecipeLine."Plant Amount" * VEstLineRec.Quantity;
            VEstLineRec.Amount += lvRecipeLine.Amount * VEstLineRec.Quantity;
          //END;
          //db.en, 20-03-13: T001183/C003018
        UNTIL lvRecipeLine.NEXT = 0;

      VEstLineRec."Cumulative Hours" := VEstLineRec.Hours * VEstLineRec."Part Quantity";
      VEstLineRec."Cumulative Labor" := VEstLineRec."Labor Amount" * VEstLineRec."Part Quantity";
      VEstLineRec."Cumulative Material" := VEstLineRec."Material Amount" * VEstLineRec."Part Quantity";
      VEstLineRec."Cumulative Subcontracting" := VEstLineRec."Subcontracting Amount" * VEstLineRec."Part Quantity";
      VEstLineRec."Cumulative Plant" := VEstLineRec."Plant Amount" * VEstLineRec."Part Quantity";
      VEstLineRec."Cumulative Total" := VEstLineRec.Amount * VEstLineRec."Part Quantity";
    END;

    PROCEDURE DetermineAdditionalCost@1100525000();
    VAR
      lvSumLineRec@1100525000 : Record 11012171;
      lvEstRec@1100525001 : Record 11012151;
      lvSumRec@1100525002 : Record 11012172;
      lvSubEstRec@1100525003 : Record 11012152;
    BEGIN
      //db, 01-02-10
      EstTotal := 0;
      AdditionalCost := 0;

      lvSumLineRec.SETRANGE("Estimate No.",TempSummarySheetLineRec[1]."Estimate No.");
      lvSumLineRec.SETRANGE(Summary,TempSummarySheetLineRec[1].Summary);
      lvSumLineRec.SETRANGE(Type,TempSummarySheetLineRec[1].Type::"Additional Costs");
      IF lvSumLineRec.FINDSET THEN BEGIN
        REPEAT
          AdditionalCost := AdditionalCost + lvSumLineRec.Amount;
        UNTIL lvSumLineRec.NEXT = 0;
      END;

      IF NOT lvSumRec.GET(TempSummarySheetLineRec[1]."Estimate No.",TempSummarySheetLineRec[1].Summary) THEN lvSumRec.INIT;

      IF lvSumRec."Sub-Estimate No." <> '' THEN BEGIN  //db, 26-02-10
        IF lvSubEstRec.GET(lvSumRec."Estimate No.", lvSumRec."Sub-Estimate No.") THEN BEGIN
          lvSubEstRec.CALCFIELDS("Cum. Total");  //db, 27-04-10
          EstTotal := lvSubEstRec."Cum. Total";
        END;
      END ELSE BEGIN
        IF lvEstRec.GET(TempSummarySheetLineRec[1]."Estimate No.") THEN BEGIN
          lvEstRec.CALCFIELDS("Total OLD");
          EstTotal := lvEstRec."Total OLD";
        END;
      END;
    END;

    PROCEDURE SetSelection@1100525001(lvSumSheet@1100525000 : Code[20];lvInitOfferPrice@1100525001 : Boolean);
    BEGIN
      //db, 23-02-10
      gvSumSheet := lvSumSheet;
      gvInitOfferPrice := lvInitOfferPrice;
    END;

    PROCEDURE StoreCalculatedPrice@1100528900(IEstimate@1100528901 : Code[20];ISubEstimate@1100528902 : Code[20];IPartGroup@1100528903 : Code[20];IPart@1100528904 : Code[20]);
    VAR
      lvEstPartRec@1100528900 : Record 11012153;
    BEGIN
      //db, 10-03-14: called from DataItem instead of GroupFooter
      IF lvEstPartRec.GET(IEstimate, ISubEstimate, IPartGroup, IPart) THEN BEGIN
        lvEstPartRec."Calculated Price" := LineAmount;
        lvEstPartRec."Calculated Amount" := CumTotal;
        IF InitOfferPrice AND NOT lvEstPartRec."Offer fixed" THEN BEGIN
          lvEstPartRec."Offer Price" := lvEstPartRec."Calculated Price";
          lvEstPartRec."Offer Amount" := lvEstPartRec."Calculated Amount";  //db, 16-05-14: C014714
        END;
        lvEstPartRec.MODIFY;
      END;
    END;

    PROCEDURE AggregatePartTotals@1100525002();
    VAR
      lvEstPartRec@1100525003 : Record 11012153;
      lvEstPartRec2@1100525002 : Record 11012153;
      lLevel@1100525001 : Integer;
      lPartQty@1100525000 : Decimal;
    BEGIN
      //db, 13-05-14
      lvEstPartRec.SETRANGE("Estimate No.", Estimate."No.");
      lvEstPartRec.SETFILTER("Sub-Estimate No.", StoreFilterEstLineRec.GETFILTER("Sub-Estimate No."));  //db, 15-12-14: C019301
      FOR lLevel := 2 DOWNTO 0 DO BEGIN
        lvEstPartRec.SETRANGE(Level, lLevel);
        IF lvEstPartRec.FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              lvEstPartRec2.RESET;
              lvEstPartRec2.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.", Level, Chapter, Paragraph);
              lvEstPartRec2.SETRANGE("Estimate No.", lvEstPartRec."Estimate No.");
              lvEstPartRec2.SETRANGE("Sub-Estimate No.", lvEstPartRec."Sub-Estimate No.");
              CASE lLevel OF
              2: BEGIN
                   lvEstPartRec2.SETRANGE(Level, lLevel + 1);
                   lvEstPartRec2.SETRANGE(Chapter, lvEstPartRec.Chapter);
                   lvEstPartRec2.SETRANGE(Paragraph, lvEstPartRec.Part);
                 END;
              1: BEGIN
                   lvEstPartRec2.SETRANGE(Level, lLevel + 1);
                   lvEstPartRec2.SETRANGE(Chapter, lvEstPartRec.Part);
                 END;
              0: BEGIN
                   lvEstPartRec2.SETRANGE(Level, lLevel + 1);
                 END;
              END;
              IF lvEstPartRec2.FINDFIRST THEN BEGIN
                lvEstPartRec2.CALCSUMS("Calculated Amount");
                lvEstPartRec."Calculated Amount" :=
                  lvEstPartRec."Calculated Amount" + lvEstPartRec2."Calculated Amount";
                lvEstPartRec2.CALCSUMS("Offer Amount");
                IF InitOfferPrice AND NOT lvEstPartRec."Offer fixed" THEN
                  lvEstPartRec."Offer Amount" := lvEstPartRec."Offer Amount"  + lvEstPartRec2."Offer Amount";
                lPartQty := lvEstPartRec.GetPartQuantity();
                IF lPartQty <> 0 THEN BEGIN
                  lvEstPartRec."Calculated Price" := lvEstPartRec."Calculated Amount" / lPartQty;
                  IF InitOfferPrice AND NOT lvEstPartRec."Offer fixed" THEN
                    lvEstPartRec."Offer Price" := lvEstPartRec."Offer Amount" / lPartQty;
                END ELSE BEGIN
                  lvEstPartRec."Calculated Price" := lvEstPartRec."Calculated Amount";
                  lvEstPartRec."Calculated Amount" := 0;
                  IF InitOfferPrice AND NOT lvEstPartRec."Offer fixed" THEN BEGIN
                    lvEstPartRec."Offer Price" := lvEstPartRec."Offer Amount";
                    lvEstPartRec."Offer Amount" := 0;
                  END;
                END;
                lvEstPartRec.MODIFY;
              END;
            UNTIL lvEstPartRec.NEXT = 0;
          END;
      END;
    END;

    BEGIN
    {
      db, 01-02-10:
      - Save filter on Estimate Line earlier because of link estrec-estlinerec (this link makes it empty)
      - extra parameter for calculating Calculated Sales Price/Amount independentl of Offer Price/Amount
      - Switch off recalculating of norm/rate; will not be used on; will be used in copy of report 11012165 for excel

      db, 23-02-10:
      - extra DataItem and function (SetSelection) for automatically processing per Sub-Estimate

      db, 10-03-14: function StoreCalculatedPrice moved to DataItem Estimate Line; removed in GroupFooter (ProcessingOnly=Yes)
    }
    END.
  }
  RDLDATA
  {
  }
}

