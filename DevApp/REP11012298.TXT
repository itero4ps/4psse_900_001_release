OBJECT Report 11012298 Block Pur. Vendor based on Ass
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Block Vendor for Purchase based on Assessment (Selection);
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   PurchSetup.GET;
                   PurchSetup.TESTFIELD("Max. Score Assessment");
                 END;

    OnPreReport=BEGIN
                  ValidateStartDateAss();
                  ValidateEndDateAss();
                  ValidateMinNeededScore();
                END;

    OnPostReport=BEGIN
                   IF NOT TmpVendor.FINDFIRST THEN
                     ERROR(Text006)
                   ELSE
                     PAGE.RUN(PAGE::"Block Pur. Vendor based on Ass", TmpVendor);
                 END;

  }
  DATASET
  {
    { 2089;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.)
                                 WHERE(Block Purchase Order=CONST(No));
               OnAfterGetRecord=BEGIN
                                  ReadVendorAssessment();
                                  IF (NoOfAssess > 0) AND (ResultScore < MinNeededScore) THEN BEGIN
                                    TmpVendor := Vendor;
                                    TmpVendor."Prepayment %" := NoOfAssess;
                                    TmpVendor."Budgeted Amount" := ResultScore;
                                    TmpVendor.INSERT;
                                  END;
                                END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF (EndDateAss = 0D) THEN
                     EndDateAss := TODAY;
                   IF (MinNeededScore = 0) THEN
                     MinNeededScore := 1;

                   GetScoreDescription();
                 END;

    }
    CONTROLS
    {
      { 1100409000;0;Container;
                  ContainerType=ContentArea }

      { 1100409001;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100409003;2;Field  ;
                  CaptionML=ENU=Starting Date;
                  NotBlank=Yes;
                  SourceExpr=StartDateAss;
                  OnValidate=BEGIN
                               ValidateStartDateAss();
                             END;
                              }

      { 1100409004;2;Field  ;
                  CaptionML=ENU=Ending Date;
                  NotBlank=Yes;
                  SourceExpr=EndDateAss;
                  OnValidate=BEGIN
                               ValidateEndDateAss();
                             END;
                              }

      { 1100409005;2;Field  ;
                  CaptionML=ENU=Minimal Needed Score;
                  NotBlank=Yes;
                  SourceExpr=MinNeededScore;
                  MinValue=1;
                  OnValidate=BEGIN
                               ValidateMinNeededScore();
                             END;

                  OnLookup=BEGIN
                             ScoreRec.Score := ROUND(MinNeededScore,1);
                             IF PAGE.RUNMODAL(0, ScoreRec) = ACTION::LookupOK THEN BEGIN
                               IF (ScoreRec.Score >= 1) AND (ScoreRec.Score <= PurchSetup."Max. Score Assessment")  THEN BEGIN
                                 MinNeededScore := ScoreRec.Score;
                                 GetScoreDescription();
                               END;
                             END;
                           END;
                            }

      { 1100409006;2;Field  ;
                  CaptionML=ENU=ScoreDescription;
                  SourceExpr=ScoreDescription;
                  Editable=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PurchSetup@1210190010 : Record 312;
      ScoreRec@1210190012 : Record 11012294;
      TmpVendor@1100525000 : TEMPORARY Record 23;
      StartDateAss@1100485000 : Date;
      EndDateAss@1100485001 : Date;
      NoOfAssess@1210190007 : Integer;
      TotalScore@1210190006 : Decimal;
      MaxScore@1210190005 : Decimal;
      AverageScore@1210190004 : Decimal;
      ResultScore@1210190003 : Decimal;
      MinNeededScore@1100485002 : Decimal;
      Text001@1100485005 : TextConst 'ENU=Date may not be empty.';
      Text002@1100485006 : TextConst 'ENU=Date may not be greater than the current date.';
      Text003@1100485007 : TextConst 'ENU=Starting Date may not be greater than the Ending Date.';
      Text004@1100485008 : TextConst 'ENU=Ending Date may not be less than the Starting Date.';
      Text005@1100485009 : TextConst 'ENU=The maximum permitted value %1.';
      ScoreDescription@1100485014 : Text[50];
      Text006@1100525001 : TextConst 'ENU=No vendors to block founded.';

    PROCEDURE ReadVendorAssessment@1100485000();
    VAR
      lvVendAssRec@1100485001 : Record 11012292;
      lvVendAssLineRec@1100485000 : Record 11012293;
    BEGIN
      NoOfAssess := 0;
      TotalScore := 0;
      MaxScore := 0;
      AverageScore := 0;
      ResultScore := 0;
      ScoreRec.INIT;

      lvVendAssRec.SETCURRENTKEY("Vendor No.", Date, "Project No.");
      lvVendAssRec.SETRANGE("Vendor No.", Vendor."No.");
      lvVendAssRec.SETRANGE(Date, StartDateAss, EndDateAss);
      IF lvVendAssRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          lvVendAssLineRec.SETRANGE("Project No.", lvVendAssRec."Project No.");
          lvVendAssLineRec.SETRANGE("Vendor No.", lvVendAssRec."Vendor No.");
          lvVendAssLineRec.SETRANGE(Date, lvVendAssRec.Date);
          lvVendAssLineRec.SETFILTER("Weight Factor", '<>%1', 0);
          lvVendAssLineRec.SETFILTER(Score, '<>%1', 0);
          IF lvVendAssLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
            NoOfAssess := NoOfAssess + 1;
            REPEAT
              TotalScore := TotalScore + (lvVendAssLineRec."Weight Factor" * lvVendAssLineRec.Score);
              MaxScore := MaxScore + (lvVendAssLineRec."Weight Factor" * PurchSetup."Max. Score Assessment");
            UNTIL lvVendAssLineRec.NEXT = 0;
          END;
        UNTIL lvVendAssRec.NEXT = 0;
      END;

      IF (NoOfAssess > 0) THEN BEGIN
        AverageScore := TotalScore / NoOfAssess;
        IF MaxScore <> 0 THEN
          ResultScore := ROUND((TotalScore / MaxScore * PurchSetup."Max. Score Assessment"), 0.01);
        IF NOT ScoreRec.GET(ROUND(ResultScore,1)) THEN
          ScoreRec.INIT;
      END;
    END;

    PROCEDURE ValidateStartDateAss@1100485002();
    BEGIN
      IF (StartDateAss = 0D) THEN
        ERROR(Text001);
      IF (StartDateAss > TODAY) THEN
        ERROR(Text002);
      IF (StartDateAss > EndDateAss) AND (EndDateAss <> 0D) THEN
        ERROR(Text003);
    END;

    PROCEDURE ValidateEndDateAss@1100485003();
    BEGIN
      IF (EndDateAss = 0D) THEN
        ERROR(Text001);
      IF (EndDateAss > TODAY) THEN
        ERROR(Text002);
      IF (EndDateAss < StartDateAss) THEN
        ERROR(Text004);
    END;

    PROCEDURE ValidateMinNeededScore@1100485004();
    BEGIN
      IF (MinNeededScore > PurchSetup."Max. Score Assessment") THEN
        ERROR(Text005, PurchSetup."Max. Score Assessment");

      GetScoreDescription();
    END;

    PROCEDURE GetScoreDescription@1100485005();
    BEGIN
      ScoreDescription := '';
      IF ScoreRec.GET(ROUND(MinNeededScore,1)) THEN
        ScoreDescription := ScoreRec.Assessment;
    END;

    BEGIN
    {
      //* Not for deblock for the following reasons:
      //* - There can be another reason to block a vendor then the assessment
      //* - When a vendor is blocked for purchase, no business will be done anymore with this vendor,
      //*   so also no assessments.
    }
    END.
  }
  RDLDATA
  {
  }
}

