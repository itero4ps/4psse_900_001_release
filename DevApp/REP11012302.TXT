OBJECT Report 11012302 Copy Item from Trade Item
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Trade Item to Item;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   IF CompRelationRec.READPERMISSION THEN BEGIN
                     CentrManagementCU.ItemFormEditable(NavBln,DiscBln,DiscGrpBln,RcpBln);
                     IF NavBln THEN
                       ERROR(Text000);
                   END;
                 END;

  }
  DATASET
  {
    { 4326;    ;DataItem;TradeItemRec        ;
               DataItemTable=Table11012317;
               OnPreDataItem=BEGIN
                               status.OPEN(Text001);
                               NoOfLines := COUNT;
                             END;

               OnAfterGetRecord=VAR
                                  lvType@11012003 : 'BasicItem,TradeItem';
                                  lvBasicItemRec@11012002 : Record 11012316;
                                  lvItemRec@11012000 : Record 27;
                                BEGIN
                                  TESTFIELD("Item Code");  //db, 12-06-14: C015877
                                  IF CopyMethod = CopyMethod::NoSeries THEN BEGIN
                                    ItemCode := NoSeriesMgt.GetNextNo(ItemSeries,0D,TRUE);
                                  END;
                                  IF CopyMethod = CopyMethod::ItemCode THEN BEGIN
                                    ItemCode := "Item Code";
                                    IF ItemRec.GET(ItemCode) THEN
                                      ERROR(Text002, ItemCode);
                                  END;
                                  IF CopyMethod = CopyMethod::Manual THEN BEGIN
                                    ItemCode := NewDest;
                                    IF ItemRec.GET(ItemCode) THEN
                                      ERROR(Text002, ItemCode)
                                    ELSE
                                      ItemRec."No." := ItemCode; //db, 31-05-11
                                    ItemRec.TESTFIELD("No.");   //db, 08-09-10: M22741
                                  END;

                                  IF STRLEN(ItemCode) > MAXSTRLEN(lvItemRec."No.") THEN
                                    CurrReport.BREAK
                                  ELSE BEGIN
                                    IF NOT lvBasicItemRec.GET(Manufacturer, "Product Code") THEN
                                      lvBasicItemRec.INIT;
                                    lvType := lvType::TradeItem;
                                    lvItemRec.ProcessItemRelation(lvType,ItemCode,ItemSeries,lvBasicItemRec,TradeItemRec);  //db, 19-12-11: M31760
                                  END;

                                  StatusCounter:=StatusCounter+1;
                                  status.UPDATE(1,ROUND(StatusCounter/NoOfLines*10000,1));
                                END;

               OnPostDataItem=BEGIN
                                status.CLOSE;
                              END;

               ReqFilterFields=Product Code,Manufacturer,Item Code,Vendor }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF CopyMethod = CopyMethod::NoSeries THEN
                     DetermineNewDestination;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100525002;2;Field  ;
                  CaptionML=ENU=Item No. based on;
                  OptionCaptionML=ENU=No. Series,Trade Item,Manual;
                  SourceExpr=CopyMethod;
                  OnValidate=BEGIN
                               CopyMethodOnAfterValidate;
                             END;
                              }

      { 1210190000;2;Field  ;
                  Name=ItemSeriesPge;
                  AssistEdit=Yes;
                  CaptionML=ENU=No. Series;
                  SourceExpr=ItemSeries;
                  OnValidate=VAR
                               InventorySetup@1210190001 : Record 313;
                             BEGIN
                               IF CopyMethod = CopyMethod::NoSeries THEN BEGIN
                                 //mg.sn, 14-06-11: M26961
                                 IF ItemSeries <> '' THEN BEGIN
                                   InventorySetup.GET;
                                   InventorySetup.TESTFIELD("Item Nos.");
                                   NoSeriesMgt.TestSeries(InventorySetup."Item Nos.",ItemSeries);
                                 END;
                                 //mg.en, 14-06-11: M26961
                                 ItemRec.VALIDATE("No. Series", ItemSeries);
                                 DetermineNewDestination;
                               END;
                             END;

                  OnAssistEdit=VAR
                                 InventorySetup@1210190001 : Record 313;
                               BEGIN
                                 ItemRec."No. Series" := ItemSeries;
                                 //mg.sc, 14-06-11: M26961
                                 //ItemRec.AssistEdit;
                                 InventorySetup.GET;
                                 InventorySetup.TESTFIELD("Item Nos.");
                                 IF NoSeriesMgt.SelectSeries(InventorySetup."Item Nos.",ItemRec."No. Series",ItemRec."No. Series") THEN BEGIN
                                 //mg.ec, 14-06-11: M26961
                                   IF CopyMethod = CopyMethod::NoSeries THEN BEGIN
                                     NoSeriesMgt.TestSeries(InventorySetup."Item Nos.",ItemRec."No. Series");
                                     ItemSeries := ItemRec."No. Series";
                                     DetermineNewDestination;
                                   END;
                                 END;
                               END;
                                }

      { 1100525000;2;Field  ;
                  Name=NewDest;
                  CaptionML=ENU=Item No.;
                  SourceExpr=NewDest;
                  OnValidate=BEGIN
                               NewDestOnAfterValidate;
                             END;

                  OnLookup=VAR
                             ItemList@1100525000 : Page 31;
                           BEGIN
                             ItemList.RUNMODAL; //No lookupmode cause existing items may not be choosen.
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012018 : TextConst 'ENU=Transaction only allowed in company used as source for central itemmanagement';
      Text001@11012019 : TextConst 'ENU=Create Navision Items @1@@@@@@@@@@@@@@@@@@';
      NoOfLines@11012008 : Integer;
      StatusCounter@11012009 : Integer;
      status@11012011 : Dialog;
      NoSeriesMgt@1210190000 : Codeunit 396;
      CentrManagementCU@11012012 : Codeunit 11012010;
      CompRelationRec@11012013 : Record 11012059;
      NavBln@11012014 : Boolean;
      DiscBln@1100485000 : Boolean;
      DiscGrpBln@1100528300 : Boolean;
      RcpBln@11012017 : Boolean;
      ItemRec@1210190002 : Record 27;
      ItemSeries@1210190001 : Code[20];
      ItemCode@1210190004 : Code[50];
      NewDest@1100525000 : Code[20];
      CopyMethod@1100525001 : 'NoSeries,ItemCode,Manual';
      Text002@1100525002 : TextConst 'ENU=Item %1 already exists';

    PROCEDURE DetermineNewDestination@1000000000();
    VAR
      InvtSetup@1100525000 : Record 313;
      SeriesRec@1100525004 : Record 308;
      NoSeriesMgt@1100525001 : Codeunit 396;
    BEGIN
      NewDest := '';

      IF ItemSeries = '' THEN BEGIN
        InvtSetup.GET;
        ItemSeries := InvtSetup."Item Nos.";
      END;

      IF SeriesRec.GET(ItemSeries) THEN
        NewDest := NoSeriesMgt.GetNextNo(ItemSeries,0D,FALSE);
    END;

    LOCAL PROCEDURE NewDestOnAfterValidate@19062243();
    BEGIN
      IF ItemRec.GET(NewDest) THEN BEGIN
        MESSAGE(Text002, NewDest);
        NewDest := '';
      END;
    END;

    LOCAL PROCEDURE CopyMethodOnAfterValidate@19020830();
    BEGIN
      IF CopyMethod = CopyMethod::NoSeries THEN BEGIN
        DetermineNewDestination;
      END;
      IF CopyMethod = CopyMethod::ItemCode THEN BEGIN
        ItemSeries := '';
        NewDest := '';
      END;
      IF CopyMethod = CopyMethod::Manual THEN BEGIN
        ItemSeries := '';
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

