OBJECT Report 11012325 Import Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Invoice;
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   ImportInvoice;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;0;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100525003;2;Field  ;
                  Lookup=Yes;
                  CaptionML=ENU=Import Filter;
                  NotBlank=Yes;
                  SourceExpr=ActiveSetup;
                  TableRelation="Import Inv. Setup Header"."Format Code" }

      { 1100525004;2;Field  ;
                  CaptionML=ENU=File Name;
                  SourceExpr=FileName;
                  OnAssistEdit=VAR
                                 FileManagement@1100525000 : Codeunit 419;
                                 FilterString@1100525001 : Text;
                               BEGIN
                                 FilterString := FileManagement.GetToFilterText('', '');
                                 FileName := FileManagement.OpenFileDialog('', FileName, FilterString);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TextFile@1100485012 : File;
      f_InStream@1100485007 : InStream;
      ImpInvSetupHead@1100485024 : Record 11020430;
      ImpInvSetupLine@1100485003 : Record 11020431;
      ProjSetup@1100485001 : Record 315;
      PurchaseLineRec@1100485032 : Record 39;
      TempBlob@1100525001 : Record 99008535;
      FileMgt@1100525000 : Codeunit 419;
      RecSeperatorChr@1100485016 : Char;
      InvoiceCode@1100485030 : Code[20];
      ActiveSetup@1100485010 : Code[20];
      FileName@1100485000 : Text[250];
      Text001@1100485009 : TextConst 'ENU=Unable to find import setup';
      Text002@1100485006 : TextConst 'ENU=Filename must be filled';
      Text003@1100485005 : TextConst 'ENU=%1 does not exist';
      Textline@1100485008 : ARRAY [4] OF Text[1024];
      FilterTextLine@1100485002 : ARRAY [4] OF Text[1024];
      ProblemLinesTxt@1100485013 : Text[255];
      ArrayCounter@1100485020 : Integer;
      LineNumber@1100485022 : Integer;
      Text004@1100485015 : TextConst 'ENU=No import lines found.';
      Text006@1100485017 : TextConst 'ENU=5 successive faulty lines found. Please correct the file or import filter.';
      SuccessiveErrorsCounter@1100485027 : Integer;
      IgnoreLineBln@1100485025 : Boolean;
      NewInvoiceLineBln@1100485031 : Boolean;
      Text007@1100485019 : TextConst 'ENU=Unable to open file';
      Text008@1100485021 : TextConst 'ENU=Line cannot exceed 4096 characters';
      Text010@1100485028 : TextConst 'ENU=Importing Line #1#####.';
      Text020@1100525002 : TextConst 'ENU=XML Files|*.xml|All Files|*.*';
      Text098@1100485018 : TextConst 'ENU=File Imported, the next lines were skipped:\%1';
      EOFBln@1100485004 : Boolean;
      Text100@1100485014 : TextConst 'ENU=File succesfully imported.';

    PROCEDURE ImportInvoice@1100485001();
    VAR
      lvProgressDlg@1100485000 : Dialog;
    BEGIN
      //Welcome to the Main "IMPORT FILTER" program loop

      InitCheck;
      BuildInvoiceHeader;
      InitFile;

      lvProgressDlg.OPEN(Text010);
      lvProgressDlg.UPDATE(1, LineNumber);

      NewInvoiceLineBln := TRUE;
      REPEAT
        IgnoreLineBln := FALSE;
        ReadLine;

        lvProgressDlg.UPDATE(1, LineNumber);

        IF ImpInvSetupHead."Format Type" = ImpInvSetupHead."Format Type"::Fixed THEN
          FilterFixedLine
        ELSE
          FilterDynamicLine;
        CloseInvoiceLine;
        NewInvoiceLineBln := TRUE;
      UNTIL EOFBln;

      IF ProblemLinesTxt = '' THEN
        MESSAGE(Text100)
      ELSE BEGIN
        ProblemLinesTxt := COPYSTR(ProblemLinesTxt, 3);
        MESSAGE(Text098, ProblemLinesTxt);
      END;
    END;

    PROCEDURE InitCheck@1100485000();
    BEGIN
      //Basic checks, e.g. file availability

      ImpInvSetupHead.SETRANGE("Format Code", ActiveSetup);
      IF NOT ImpInvSetupHead.FINDFIRST THEN
        ERROR(Text001);

      IF FileName = '' THEN
        ERROR(Text002);

      IF NOT FileMgt.ClientFileExists(FileName) THEN
        ERROR(Text003, FileName);

      ImpInvSetupLine.SETRANGE("Format Code", ActiveSetup);
      IF NOT ImpInvSetupLine.FINDFIRST THEN
        ERROR(Text004);

      IF ImpInvSetupHead."Record Separator" <> '' THEN
        RecSeperatorChr := ImpInvSetupHead."Record Separator"[1];

      LineNumber := 0;
      EOFBln := FALSE;
    END;

    PROCEDURE InitFile@1100485003();
    VAR
      lvCounter@1100485000 : Integer;
      lvCharacterChr@1100485001 : Char;
    BEGIN
      FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
      TempBlob.Blob.CREATEINSTREAM(f_InStream);

      //Skip Header lines
      lvCounter := 0;
      WHILE lvCounter <> ImpInvSetupHead."Header Lines" DO BEGIN
        REPEAT
          f_InStream.READ(lvCharacterChr);
        UNTIL lvCharacterChr = 13;
        lvCounter := lvCounter + 1;
        LineNumber:= LineNumber + 1;
      END;
    END;

    PROCEDURE ReadLine@1100485006();
    VAR
      lvCharacterChr@1100485000 : Char;
    BEGIN
      FOR ArrayCounter := 4 DOWNTO 1 DO
        Textline[ArrayCounter] := '';

      IF ImpInvSetupHead."Record Separator" = '' THEN BEGIN
        REPEAT
          IF STRLEN(Textline[ArrayCounter]) = 1024 THEN BEGIN
            ArrayCounter := ArrayCounter + 1;
            IF ArrayCounter = 5 THEN
              ERROR(Text008);
          END;
          f_InStream.READ(lvCharacterChr);
          IF lvCharacterChr <> 13 THEN
            Textline[ArrayCounter] := Textline[ArrayCounter] + FORMAT(lvCharacterChr);
        UNTIL (lvCharacterChr = 13) OR f_InStream.EOS;
      END ELSE BEGIN
        REPEAT
          IF STRLEN(Textline[ArrayCounter]) = 1024 THEN BEGIN
            ArrayCounter := ArrayCounter + 1;
            IF ArrayCounter = 5 THEN
              ERROR(Text008);
          END;
          f_InStream.READ(lvCharacterChr);
          IF lvCharacterChr <> ImpInvSetupHead."Record Separator"[1] THEN
            Textline[ArrayCounter] := Textline[ArrayCounter] + FORMAT(lvCharacterChr);
        UNTIL (lvCharacterChr = ImpInvSetupHead."Record Separator"[1]) OR f_InStream.EOS;
      END;

      LineNumber := LineNumber + 1;
      IF f_InStream.EOS THEN
        EOFBln := TRUE;
    END;

    PROCEDURE FilterFixedLine@1100485012();
    VAR
      ArrayHelpNumber@1100485000 : Integer;
    BEGIN
      //CODE FOR READING FIXED LINE FIELDS

      ImpInvSetupLine.FINDFIRST;
      REPEAT //Loop to get multiple fields from one line.
        //CHECK FOR FIXED VALUE
        IF ImpInvSetupLine."Fixed Value" <> '' THEN BEGIN
          ArrayCounter := 1;
          FilterTextLine[ArrayCounter] := ImpInvSetupLine."Fixed Value";
        END ELSE BEGIN
          FOR ArrayCounter := 4 DOWNTO 1 DO
            FilterTextLine[ArrayCounter] := Textline[ArrayCounter];

          //CALCULATE IN WHICH ARRAY WE NEED TO BE
          ArrayHelpNumber := ROUND(ImpInvSetupLine."Start Position" / 1024.01,1,'<') + 1;
          EVALUATE(ArrayCounter, FORMAT(ArrayHelpNumber));
          ArrayHelpNumber := ROUND((ImpInvSetupLine."Start Position" + ImpInvSetupLine.Length) / 1024.01,1,'<') + 1;

          IF ArrayCounter <> ArrayHelpNumber THEN BEGIN
            IF ArrayHelpNumber < 5 THEN BEGIN
              FilterTextLine[ArrayCounter] := COPYSTR(FilterTextLine[ArrayCounter], ImpInvSetupLine."Start Position" + 1);
              FilterTextLine[ArrayCounter] := FilterTextLine[ArrayCounter] + COPYSTR(FilterTextLine[ArrayCounter + 1], 0,
                                              ImpInvSetupLine.Length - (ImpInvSetupLine."Start Position" MOD 1024));
            END;
          END ELSE BEGIN
            FilterTextLine[ArrayCounter] := COPYSTR(FilterTextLine[ArrayCounter],
                                          ImpInvSetupLine."Start Position" + 1, ImpInvSetupLine.Length);
          END;
          IF ImpInvSetupHead."Trim Spaces" THEN
            FilterTextLine[ArrayCounter] := DELCHR(FilterTextLine[ArrayCounter],'<>');
        END;
        BuildInvoiceLine;
      UNTIL (ImpInvSetupLine.NEXT = 0) OR IgnoreLineBln;

      IF IgnoreLineBln THEN BEGIN
        SuccessiveErrorsCounter := SuccessiveErrorsCounter + 1;
        IF SuccessiveErrorsCounter > 4 THEN
          ERROR(Text006);
      END;
    END;

    PROCEDURE FilterDynamicLine@1100485013();
    VAR
      lvCounter@1100485000 : Integer;
      lvCharPos@1100485001 : Integer;
    BEGIN
       //CODE FOR READING SYMBOL-SEPERATED FIELDS
      ImpInvSetupLine.FINDFIRST;

      REPEAT
        ArrayCounter := 1;
        //CHECK FOR A FIXED VALUE.
        IF ImpInvSetupLine."Fixed Value" <> '' THEN BEGIN
          FilterTextLine[ArrayCounter] := ImpInvSetupLine."Fixed Value";
        END ELSE BEGIN
          FOR ArrayCounter := 4 DOWNTO 1 DO
            FilterTextLine[ArrayCounter] := Textline[ArrayCounter];
          lvCounter := 1;

          //SEARCH FOR FIELDNUMBER
          WHILE (lvCounter < ImpInvSetupLine."Start Position") AND NOT IgnoreLineBln DO BEGIN
            lvCharPos := STRPOS(FilterTextLine[ArrayCounter], ImpInvSetupHead.Separator);
            IF lvCharPos = 0 THEN BEGIN
              ArrayCounter := ArrayCounter + 1;
              IF ArrayCounter = 5 THEN BEGIN
                ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                IgnoreLineBln := TRUE;
              END
            END ELSE BEGIN
              FilterTextLine[ArrayCounter] := COPYSTR(FilterTextLine[ArrayCounter], lvCharPos + 1);
              lvCounter := lvCounter + 1;
            END;
          END;

          IF NOT IgnoreLineBln THEN BEGIN
          //FIND END OF COMMAND
            lvCharPos := STRPOS(FilterTextLine[ArrayCounter], ImpInvSetupHead.Separator);
            IF lvCharPos = 0 THEN BEGIN //End of Field not found
              ArrayCounter := ArrayCounter + 1;
              IF ArrayCounter < 5 THEN BEGIN
                lvCharPos := STRPOS(FilterTextLine[ArrayCounter], ImpInvSetupHead.Separator);
                IF lvCharPos = 0 THEN BEGIN
                  ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                  IgnoreLineBln := TRUE;
                END ELSE BEGIN
                  FilterTextLine[ArrayCounter - 1] := FilterTextLine[ArrayCounter -1] +
                                                      COPYSTR(FilterTextLine[ArrayCounter], 1, lvCharPos);
                  ArrayCounter := ArrayCounter - 1;
                END;
              END ELSE BEGIN
                ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                IgnoreLineBln := TRUE;
              END;
            END;


            //IF SELECTION ENTERED, FILTER IT OUT.
            IF NOT IgnoreLineBln THEN BEGIN
              IF ImpInvSetupLine."Length Selection" > 0 THEN BEGIN
                FilterTextLine[ArrayCounter] := COPYSTR(FilterTextLine[ArrayCounter], ImpInvSetupLine."Start Position Selection" + 1
                                                        , ImpInvSetupLine."Length Selection");
              END ELSE BEGIN
                IF ((lvCharPos - ImpInvSetupLine."Start Position Selection" - 1) < 1 ) THEN BEGIN
                  ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                  IgnoreLineBln := TRUE;
                END ELSE BEGIN
                  FilterTextLine[ArrayCounter] := COPYSTR(FilterTextLine[ArrayCounter], ImpInvSetupLine."Start Position Selection" + 1
                                                          , lvCharPos - ImpInvSetupLine."Start Position Selection" - 1);
                END;
              END;
            END;
          END;
        END; //End fixed value or not.

        IF NOT IgnoreLineBln THEN BEGIN
          IF ImpInvSetupHead."Trim Spaces" THEN
            FilterTextLine[ArrayCounter] := DELCHR(FilterTextLine[ArrayCounter],'<>');
          BuildInvoiceLine;
        END;
      UNTIL IgnoreLineBln OR (ImpInvSetupLine.NEXT = 0);

      IF IgnoreLineBln THEN BEGIN
        SuccessiveErrorsCounter := SuccessiveErrorsCounter + 1;
        IF SuccessiveErrorsCounter > 4 THEN
          ERROR(Text006);
      END;
    END;

    PROCEDURE BuildInvoiceHeader@1100485005();
    VAR
      lvPurchaseHeaderRec@1100485001 : Record 38;
    BEGIN
      //Build Invoice Header

      lvPurchaseHeaderRec.INIT;
      lvPurchaseHeaderRec.VALIDATE(lvPurchaseHeaderRec."Document Type",lvPurchaseHeaderRec."Document Type"::Invoice);
      lvPurchaseHeaderRec.VALIDATE(lvPurchaseHeaderRec."No.",'');

      lvPurchaseHeaderRec.INSERT(TRUE);
      lvPurchaseHeaderRec.VALIDATE(lvPurchaseHeaderRec."Buy-from Vendor No.", ImpInvSetupHead."Vendor No.");
      lvPurchaseHeaderRec.VALIDATE(lvPurchaseHeaderRec."Payment Terms Code");
      lvPurchaseHeaderRec.MODIFY;
      InvoiceCode := lvPurchaseHeaderRec."No.";
    END;

    PROCEDURE BuildInvoiceLine@1100485015();
    VAR
      locGLAccountRec@1100485000 : Record 15;
      locItemRec@1100485001 : Record 27;
      locFixedAssetRec@1100485002 : Record 5600;
      locItemChargeRec@1100485003 : Record 5800;
      locCompanyRec@1100485006 : Record 2000000006;
      locNoLengthInt@1100485004 : Integer;
      locDecimalTest@1100485005 : Decimal;
    BEGIN
      IF NewInvoiceLineBln THEN BEGIN
        //INIT Invoice Line
        PurchaseLineRec.INIT;
        PurchaseLineRec.VALIDATE(PurchaseLineRec."Document Type", PurchaseLineRec."Document Type"::Invoice);
        PurchaseLineRec."Document No." := InvoiceCode;
        PurchaseLineRec."Line No." := (LineNumber - ImpInvSetupHead."Header Lines") * 10000;
        PurchaseLineRec.VALIDATE(PurchaseLineRec.Type, ImpInvSetupHead.Type);
        PurchaseLineRec.VALIDATE(PurchaseLineRec."Job No.", ImpInvSetupHead."Job No.");
        PurchaseLineRec.VALIDATE(PurchaseLineRec."Service Order No.", ImpInvSetupHead."Service Order No.");
        PurchaseLineRec.VALIDATE(PurchaseLineRec."Cost Type", ImpInvSetupHead."Cost Type");
        IF ImpInvSetupHead."Shortcut Dimension Code 2" <> '' THEN
          PurchaseLineRec.VALIDATE(PurchaseLineRec."Shortcut Dimension 2 Code", ImpInvSetupHead."Shortcut Dimension Code 2");
        IF ImpInvSetupHead."No." <> '' THEN BEGIN
          PurchaseLineRec.VALIDATE(PurchaseLineRec."No.", ImpInvSetupHead."No.");
          PurchaseLineRec.Description := '';
        END;
        NewInvoiceLineBln := FALSE;
      END;

      IgnoreLineBln := FALSE;

      //Insert in correct field
      CASE ImpInvSetupLine."Invoice Field" OF
        ImpInvSetupLine."Invoice Field"::Description: BEGIN
          //Check Length, Maximum description length = 50 char.
          IF STRLEN(PurchaseLineRec.Description) + STRLEN(FilterTextLine[ArrayCounter]) <= 50 THEN BEGIN
            PurchaseLineRec.Description := PurchaseLineRec.Description + FilterTextLine[ArrayCounter];
          END;
        END;
        ImpInvSetupLine."Invoice Field"::"No.": BEGIN
          //Check if Number exists.
          CASE ImpInvSetupHead.Type OF
            ImpInvSetupHead.Type::"G/L Account": BEGIN
              //G/L Account number exists of minimal 4 numbers, so add zero's if necessary... NOT USEABLE AT ALL CUSTOMERS
              locNoLengthInt := 4 - STRLEN(FilterTextLine[ArrayCounter]);
              IF locNoLengthInt > 0 THEN BEGIN
                REPEAT
                  FilterTextLine[ArrayCounter] := INSSTR(FilterTextLine[ArrayCounter], '0', 1);
                  locNoLengthInt := locNoLengthInt - 1;
                UNTIL locNoLengthInt = 0;
              END;
              IF locGLAccountRec.GET(FilterTextLine[ArrayCounter]) THEN
                PurchaseLineRec."No." := FilterTextLine[ArrayCounter]
              ELSE BEGIN
                ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                IgnoreLineBln := TRUE;
              END;
            END;
            ImpInvSetupHead.Type::Item: BEGIN
              IF locItemRec.GET(FilterTextLine[ArrayCounter]) THEN
                PurchaseLineRec."No." := FilterTextLine[ArrayCounter]
              ELSE BEGIN
                ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                IgnoreLineBln := TRUE;
              END;
            END;
            ImpInvSetupHead.Type::"Fixed Asset": BEGIN
              IF locFixedAssetRec.GET(FilterTextLine[ArrayCounter]) THEN
                PurchaseLineRec."No." := FilterTextLine[ArrayCounter]
              ELSE BEGIN
                ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                IgnoreLineBln := TRUE;
              END;
            END;
            ImpInvSetupHead.Type::"Charge (Item)": BEGIN
              IF locItemChargeRec.GET(FilterTextLine[ArrayCounter]) THEN
                PurchaseLineRec."No." := FilterTextLine[ArrayCounter]
              ELSE BEGIN
                ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                IgnoreLineBln := TRUE;
              END;
            END;
          END;
        END;
        ImpInvSetupLine."Invoice Field"::Quantity: BEGIN
          //Just learned EVALUATE is NOT the way to do this.
          //IF NOT(EVALUATE(PurchaseLineRec.Quantity, FilterTextLine[ArrayCounter])) THEN
          //  IgnoreLineBln := TRUE;
          IF EVALUATE(locDecimalTest, FilterTextLine[ArrayCounter]) THEN
            PurchaseLineRec.VALIDATE(Quantity, locDecimalTest)
          ELSE BEGIN
            ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
            IgnoreLineBln := TRUE;
          END;
        END;
        ImpInvSetupLine."Invoice Field"::UnitPrice: BEGIN
          IF EVALUATE(locDecimalTest, FilterTextLine[ArrayCounter]) THEN BEGIN
            //Line Amount can only be inserted if Quantity is > 0
            IF PurchaseLineRec.Quantity = 0 THEN
              PurchaseLineRec.VALIDATE(PurchaseLineRec.Quantity, 1);
            PurchaseLineRec.VALIDATE("Line Amount", locDecimalTest);
          END ELSE BEGIN
            ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
            IgnoreLineBln := TRUE;
          END;
        END;
        ImpInvSetupLine."Invoice Field"::"Receiving Company": BEGIN
          IF FilterTextLine[ArrayCounter] <> '' THEN BEGIN
            IF locCompanyRec.GET(FilterTextLine[ArrayCounter]) THEN BEGIN
              PurchaseLineRec.VALIDATE(PurchaseLineRec."Receiving Company", FilterTextLine[ArrayCounter]);
            END ELSE BEGIN
              locCompanyRec.SETFILTER(Name, '%1', FilterTextLine[ArrayCounter] + '*');
              IF locCompanyRec.FINDFIRST THEN
                PurchaseLineRec.VALIDATE(PurchaseLineRec."Receiving Company", FilterTextLine[ArrayCounter])
              ELSE BEGIN
                ProblemLinesTxt := ProblemLinesTxt + ', ' + FORMAT(LineNumber);
                IgnoreLineBln := TRUE;
              END;
            END
          END;
        END;
      END;
    END;

    PROCEDURE CloseInvoiceLine@1100485019();
    BEGIN
      //Fill Invoice line with minimal requirements.
      IF NOT IgnoreLineBln THEN BEGIN
        IF (PurchaseLineRec."Line Amount" <> 0) THEN BEGIN
          PurchaseLineRec.VALIDATE(PurchaseLineRec."Unit of Measure Code", ImpInvSetupHead."Unit of Measure");
          PurchaseLineRec.VALIDATE(PurchaseLineRec."Gen. Prod. Posting Group", ImpInvSetupHead."Gen. Prod. Posting Group");
          PurchaseLineRec.VALIDATE(PurchaseLineRec."VAT Bus. Posting Group", ImpInvSetupHead."VAT Bus. Posting Group");
          PurchaseLineRec.VALIDATE(PurchaseLineRec."VAT Prod. Posting Group", ImpInvSetupHead."VAT Prod. Posting Group");
        END;

        PurchaseLineRec.INSERT(TRUE);
        SuccessiveErrorsCounter := 0;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

