OBJECT Report 11012564 Create Invoice Proposals
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Invoice Proposals;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   PlantSetup.GET;
                   ProjectSetupRec.GET;
                   GLSetupRec.GET;

                   DPA_UserDepartmentFilter := '';
                   IF DepartmentAuthorizObject.READPERMISSION THEN BEGIN
                     IF DPA_Management.AuthorizationActive() THEN
                       DPA_UserDepartmentFilter := DPA_Management.GetUserDepartmentFilter();
                   END;
                 END;

    OnPreReport=BEGIN
                  IF PostingDate = 0D THEN
                    ERROR(Text000);

                  IF (NOT InvoiceRental) AND (NOT InvoiceSalesBuyBack) AND
                     (NOT InvoicePlantOrderCost) AND (NOT InvoiceRentalCorrections) AND
                     (NOT InvoiceExitOrders) AND (NOT InvoicePlantHours) AND (NOT InvoiceTransportOrders)
                  THEN
                    ERROR(Text009);

                  SavePlantLocRec.COPY("Plant Location");
                END;

    OnPostReport=BEGIN
                   IF (InvCounter = 0) THEN
                     MESSAGE(Text005)
                   ELSE
                     MESSAGE(Text006, InvCounter, LineCounter);

                   COMMIT;
                   Window.CLOSE;
                 END;

  }
  DATASET
  {
    { 9306;    ;DataItem;                    ;
               DataItemTable=Table11012554;
               DataItemTableView=SORTING(Customer No.,Project No.,Service Order No.)
                                 ORDER(Ascending)
                                 WHERE(Depot=CONST(No),
                                       Employee Location=CONST(No));
               OnPreDataItem=BEGIN
                               IF RentalPeriodeToDate = 0D THEN
                                 ERROR(Text001);

                               xRecCustNo := '';
                               xRecProjectNo := '';
                               xRecServOrderNo := '';
                               xRecCompName := '';
                               xRecPlantTypeOnLoc := FALSE;

                               Window.OPEN(
                                 Text002 +
                                 Text003 +
                                 Text004);

                               InvCounter := 0;
                               LineCounter := 0;

                               "Plant Inventory".LOCKTABLE;
                               IF DPA_UserDepartmentFilter <> '' THEN BEGIN
                                 FILTERGROUP(7);
                                 SETFILTER("Department Code", DPA_UserDepartmentFilter);
                                 FILTERGROUP(0);
                               END;
                             END;

               OnAfterGetRecord=VAR
                                  lvCustRec@1100485000 : Record 18;
                                  lvProjRec@1100525000 : Record 11072003;
                                  lvInvoiceMethod@1100485001 : Code[10];
                                  PlantTypeOnLoc@1100529000 : Boolean;
                                BEGIN
                                  Window.UPDATE(1,Code);
                                  Window.UPDATE(2,"Customer No.");

                                  IF ("Project No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '') THEN BEGIN
                                    TESTFIELD("Customer No.");
                                    TESTFIELD("VAT Bus. Posting Group");
                                    TESTFIELD("Company Name", '');
                                  END ELSE BEGIN
                                    IF "Company Name" = '' THEN
                                      "Company Name" := COMPANYNAME;
                                    IF ("Project No." <> '') THEN BEGIN
                                      TESTFIELD("Service Order No.", '');
                                      TESTFIELD("Plant Type", '');
                                      IF NOT lvProjRec.CHANGECOMPANY("Company Name") THEN
                                        CurrReport.SKIP;
                                    END;
                                    IF ("Service Order No." <> '') THEN BEGIN
                                      TESTFIELD("Project No.", '');
                                      TESTFIELD("Plant Type", '');
                                      IF NOT ServOrderRec.CHANGECOMPANY("Company Name") THEN
                                        CurrReport.SKIP;
                                      ServOrderRec.GET("Service Order No.")
                                    END;
                                    IF ("Plant Type" <> '') THEN BEGIN  //DP00815
                                      TESTFIELD("Project No.", '');
                                      TESTFIELD("Service Order No.", '');
                                      TESTFIELD("Customer No.", '');
                                      IF "Company Name" <> COMPANYNAME THEN
                                        TESTFIELD("Company Name", '');
                                      PlantRec.GET("Plant Type");
                                      IF NOT PlantRec.Bulk THEN
                                        TESTFIELD("Plant No.");
                                      xRecPlantTypeOnLoc := TRUE;
                                    END;
                                    IF "Company Name" <> COMPANYNAME THEN BEGIN
                                      CompanyData.GET("Company Name");
                                      CompanyData.TESTFIELD("Customer No.");
                                      TESTFIELD("Customer No.",CompanyData."Customer No.");
                                    END;
                                  END;

                                  IF ("Customer No." <> xRecCustNo) OR
                                     ("Company Name" <> xRecCompName) OR
                                     ("Project No." <> xRecProjectNo) OR
                                     ("Service Order No." <> xRecServOrderNo) OR
                                     (PlantTypeOnLoc <> xRecPlantTypeOnLoc)
                                  THEN BEGIN
                                    xRecCustNo := "Customer No.";
                                    xRecCompName := "Company Name";
                                    xRecProjectNo := "Project No.";
                                    xRecServOrderNo := "Service Order No.";
                                    xRecPlantTypeOnLoc := PlantTypeOnLoc;  //DP00815.n  All or nothing on invoice is Interna Charge
                                    SalesLineNo := 0;
                                  END;

                                  lvInvoiceMethod := '';
                                  IF (PlantSetup."Level One Loc. per Invoice" <> PlantSetup."Level One Loc. per Invoice"::Customer) OR
                                     ("Customer No." = '')  //* Customer can only be empty for location with a project (in same company). Then from setup.
                                  THEN BEGIN                //* And now also for location with a service order.
                                    IF PlantSetup."One Location per Invoice" THEN BEGIN
                                      SalesLineNo := 0;
                                      lvInvoiceMethod := "Invoice Method";
                                    END;
                                  END ELSE BEGIN
                                    IF lvCustRec.GET("Customer No.") THEN BEGIN
                                      IF lvCustRec."One Location per Plant Invoice" THEN BEGIN
                                        SalesLineNo := 0;
                                        lvInvoiceMethod := "Invoice Method";
                                      END;
                                    END;
                                  END;

                                  IF SalesLineNo = 0 THEN BEGIN
                                    TmpSalesHeader.RESET;
                                    TmpSalesHeader.DELETEALL;

                                    COMMIT;
                                    "Plant Inventory".LOCKTABLE;
                                  END;

                                  FillTmpCollectNoTable(lvInvoiceMethod);
                                END;

               OnPostDataItem=BEGIN
                                COMMIT;
                                CLEAR("Plant Location");  //* Important that fields are empty during invoice of location independent
                              END;

               ReqFilterFields=Code,Customer No.,Project No. }

    { 5234;1   ;DataItem;InvoiceCollectNo    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               TmpCollectNoRec.RESET;
                               IF NOT TmpCollectNoRec.FIND('-') THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF (Number > 1) THEN BEGIN
                                    IF TmpCollectNoRec.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  END;

                                  IF CollectByInvoiceType THEN
                                    SalesLineNo := 0;
                                END;
                                 }

    { 5905;2   ;DataItem;                    ;
               DataItemTable=Table11012555;
               DataItemTableView=SORTING(Completely Invoiced,Location,Plant Type,Plant No.,Rate Code,Present from)
                                 ORDER(Ascending)
                                 WHERE(Completely Invoiced=CONST(No),
                                       Quantity=FILTER(>0),
                                       Invoice Status=FILTER(0|Posted),
                                       Sold=CONST(No));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceRental THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec.Rental) THEN
                                 CurrReport.BREAK;

                               SETRANGE("Present from",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=VAR
                                  PlantOrder2@1100485000 : Record 11012556;
                                BEGIN
                                  InventoryRec := "Plant Inventory";
                                  InventoryRec.FIND;
                                  CountNumberRentalPeriods;

                                  //**11351.sn   (This stood first below)
                                  IF Credit THEN
                                    InventoryRec."Invoiced until" := StartDate - 1
                                  ELSE
                                    IF EndDate >= InventoryRec."Rental Start Date" THEN
                                      InventoryRec."Invoiced until" := EndDate;
                                  IF (InventoryRec."Invoiced until" < "Present from") OR
                                     (InventoryRec."Invoiced until" < "Rental Start Date") THEN
                                    InventoryRec."Invoiced until" := 0D;
                                  InventoryRec.VALIDATE("Completely Invoiced");
                                  //**11351.en

                                  CheckMinRentalDays();  //**11351.n //* Not change StartDate, EndDate, Credit! (ia in connection with determine 'Invoiced Until')

                                  //IF NumberRentalPeriods <> 0 THEN BEGIN  //**11351.o
                                  IF (NumberRentalPeriods + ExtraRentalPeriods) <> 0 THEN BEGIN  //**11351.n
                                    IF ("Invoiced until") = 0D THEN
                                      RentalFirstInvoiced := TRUE
                                    ELSE
                                      RentalFirstInvoiced := FALSE;
                                    RentalSplitNo := 0;

                                    CLEAR(LocationFrom);
                                    IF "Plant Inventory"."Arrival Order Type" = "Plant Inventory"."Arrival Order Type"::"Plant Order" THEN
                                      IF PlantOrder2.GET("Plant Inventory"."Arrival Order") THEN
                                        IF LocationFrom.GET(PlantOrder2."From Location") THEN;

                                    InsertSalesHeaderLocation;
                                    InsertSalesLineInventory;
                                    InventoryRec."Previous Invoice No." := "Last Invoice No.";
                                    InventoryRec."Previous Invoice Line No." := "Last Invoice Line No.";
                                    InventoryRec."Previous Invoiced Until" := "Invoiced until";
                                    InventoryRec."Last Invoice No." := SalesHeaderRec."No.";
                                    InventoryRec."Last Invoice Line No." := SalesLineRec."Line No.";
                                    InventoryRec."Invoice Status" := "Invoice Status"::Proposal;
                                    InventoryRec."Previous No. of Invoiced Days" := "No. of Invoiced Days";  //**11351.n
                                    InventoryRec."No. of Invoiced Days" := "No. of Invoiced Days" + NumberRentalDays + ExtraRentalDays;  //**11351.n
                                  END;
                                  { //**11351.so   Naar boven verplaatst, nieuwe waarde is al nodig bij bepalen extra huurdagen ivm min. aantal huurdagen
                                  IF Credit THEN
                                    InventoryRec."Invoiced until" := StartDate - 1
                                  ELSE
                                    IF EndDate >= InventoryRec."Rental Start Date" THEN
                                      InventoryRec."Invoiced until" := EndDate;
                                  IF (InventoryRec."Invoiced until" < "Present from") OR
                                     (InventoryRec."Invoiced until" < "Rental Start Date") THEN
                                    InventoryRec."Invoiced until" := 0D;
                                  InventoryRec.VALIDATE("Completely Invoiced");
                                  }  //11351.eo

                                  InventoryRec.MODIFY;

                                  CLEAR(LocationFrom);
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=Location=FIELD(Code) }

    { 7062;2   ;DataItem;OrderFromLocation   ;
               DataItemTable=Table11012556;
               DataItemTableView=SORTING(Posted,From Location Invoiced,From Location,Transfer Date)
                                 WHERE(Posted=CONST(Yes),
                                       From Location Invoiced=CONST(No),
                                       Type=FILTER(Removal|Other Transfers));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceSalesBuyBack THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Sales/Buy Back") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Transfer Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=VAR
                                  InsertHeaderDone@1100529000 : Boolean;
                                BEGIN
                                  InvoiceCreated := FALSE;

                                  LocationFrom.GET(OrderFromLocation."From Location");

                                  //Buy Back
                                  OrderLineRec.RESET;
                                  OrderLineRec.SETRANGE("Plant Order No.",OrderFromLocation."No.");
                                  OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Plant);
                                  OrderLineRec.SETFILTER("Rental Type",'%1|%2',OrderLineRec."Rental Type"::"Buy Back",OrderLineRec."Rental Type"::"Buy Back and Sales");
                                  IF OrderLineRec.FINDSET THEN BEGIN
                                    //InsertSalesHeaderLocation;  //DP00241.o (26972)
                                    //InvoiceCreated :=TRUE;      //DP00241.o (26972)
                                    REPEAT
                                      //InsertSalesLineBuyBack;  //DP00241.o (26972)
                                      //DP00241.sn (26972)
                                      IF NOT OrderLineRec.ExitSoldSBBOnLoc() THEN BEGIN
                                        IF NOT InsertHeaderDone THEN BEGIN
                                          InsertHeaderDone := TRUE;
                                          InsertSalesHeaderLocation;
                                          InvoiceCreated :=TRUE;
                                        END;
                                        InsertSalesLineBuyBack;
                                      END;
                                      //DP00241.en (26972)
                                    UNTIL OrderLineRec.NEXT = 0;
                                  END;

                                  InsertHeaderDone := FALSE;  //DP00485.n (26972)
                                  //Items (Return)
                                  IF Type = Type::Removal THEN BEGIN
                                    OrderItemLineRec.RESET;
                                    OrderItemLineRec.SETRANGE("Plant Order No.","No.");
                                    OrderItemLineRec.SETRANGE(Type, OrderItemLineRec.Type::Item); //DP00690
                                    IF OrderItemLineRec.FINDSET THEN BEGIN
                                      //InsertSalesHeaderLocation;   //DP00485.o (26972)
                                      //InvoiceCreated :=TRUE;       //DP00485.o (26972)
                                      REPEAT
                                        //InsertSalesLinePlantOrderItem(-1);  //DP00485.o (26972)
                                        //DP00485.sn (26972)
                                        IF NOT OrderItemLineRec.ExitSoldSBBOnLoc() THEN BEGIN
                                          IF NOT InsertHeaderDone THEN BEGIN
                                            InsertHeaderDone := TRUE;
                                            InsertSalesHeaderLocation;
                                            InvoiceCreated :=TRUE;
                                          END;
                                          InsertSalesLinePlantOrderItem(-1);
                                        END;
                                        //DP00485.en (26972)
                                      UNTIL OrderItemLineRec.NEXT = 0;
                                    END;
                                  END;

                                  //Update Invoice Data Order
                                  OrderRec := OrderFromLocation;
                                  OrderRec.FIND;
                                  IF InvoiceCreated THEN BEGIN
                                    OrderRec."From Location Invoice No." := SalesHeaderRec."No.";
                                    OrderRec."From Location Invoice Status" := OrderRec."From Location Invoice Status"::Proposal;
                                  END;
                                  OrderRec."From Location Invoiced" := TRUE;  //While nothing to be invoiced, change to invoiced (performance)
                                  OrderRec.MODIFY;

                                  CLEAR(LocationFrom);
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=From Location=FIELD(Code) }

    { 5770;2   ;DataItem;OrderToLocation     ;
               DataItemTable=Table11012556;
               DataItemTableView=SORTING(Posted,To Location Invoiced,To Location,Transfer Date)
                                 WHERE(Posted=CONST(Yes),
                                       To Location Invoiced=CONST(No),
                                       Type=FILTER(Arrival|Other Transfers));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceSalesBuyBack THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Sales/Buy Back") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Transfer Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  InvoiceCreated := FALSE;

                                  LocationFrom.GET(OrderToLocation."From Location");

                                  //Sales
                                  OrderLineRec.RESET;
                                  OrderLineRec.SETRANGE("Plant Order No.",OrderToLocation."No.");
                                  OrderLineRec.SETRANGE(Type, OrderLineRec.Type::Plant);
                                  OrderLineRec.SETFILTER("Rental Type",'%1|%2',OrderLineRec."Rental Type"::Sales,OrderLineRec."Rental Type"::"Buy Back and Sales");
                                  IF OrderLineRec.FINDSET THEN BEGIN
                                    InsertSalesHeaderLocation;
                                    InvoiceCreated :=TRUE;
                                    REPEAT
                                      InsertSalesLineSales;
                                    UNTIL OrderLineRec.NEXT = 0;
                                  END;

                                  //Items (Sales)
                                  IF Type = Type::Arrival THEN BEGIN
                                    OrderItemLineRec.RESET;
                                    OrderItemLineRec.SETRANGE("Plant Order No.","No.");
                                    OrderItemLineRec.SETRANGE(Type, OrderItemLineRec.Type::Item); //DP00690
                                    IF OrderItemLineRec.FINDSET THEN BEGIN
                                      InsertSalesHeaderLocation;
                                      InvoiceCreated :=TRUE;
                                      REPEAT
                                        InsertSalesLinePlantOrderItem(1);
                                      UNTIL OrderItemLineRec.NEXT = 0;
                                    END;
                                  END;

                                  //Update Invoice Data Order
                                  OrderRec := OrderToLocation;
                                  OrderRec.FIND;
                                  IF InvoiceCreated THEN BEGIN
                                    OrderRec."To Location Invoice No." := SalesHeaderRec."No.";
                                    OrderRec."To Location Invoice Status" := OrderRec."To Location Invoice Status"::Proposal;
                                  END;
                                  OrderRec."To Location Invoiced" := TRUE;  //While nothing to be invoiced, change to invoiced (performance)
                                  OrderRec.MODIFY;

                                  CLEAR(LocationFrom);
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=To Location=FIELD(Code) }

    { 1806;2   ;DataItem;OrderCostFromLoc    ;
               DataItemTable=Table11012556;
               DataItemTableView=SORTING(Posted,Order Cost Invoiced,From Location,Transfer Date)
                                 WHERE(Posted=CONST(Yes),
                                       Order Cost Invoiced=CONST(No),
                                       Type=FILTER(Removal));
               OnPreDataItem=BEGIN
                               IF NOT InvoicePlantOrderCost THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Plant Order Cost") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Transfer Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  //Sundry Costs

                                  InvoiceCreated := FALSE;

                                  LocationFrom.GET(OrderCostFromLoc."From Location");

                                  CostRec.SETRANGE("Plant Order No.",OrderCostFromLoc."No.");
                                  IF CostRec.FINDSET THEN BEGIN
                                    InsertSalesHeaderLocation;
                                    InvoiceCreated :=TRUE;
                                    REPEAT
                                      InsertSalesLinePlantCost(FALSE);
                                    UNTIL CostRec.NEXT = 0;
                                  END;

                                  //Update Invoice Data Order
                                  OrderRec := OrderCostFromLoc;
                                  OrderRec.FIND;
                                  IF InvoiceCreated THEN BEGIN
                                    OrderRec."Order Cost Invoice No." := SalesHeaderRec."No.";
                                    OrderRec."Order Cost Invoice Status" := OrderRec."Order Cost Invoice Status"::Proposal;
                                  END;
                                  OrderRec."Order Cost Invoiced" := TRUE;  //While nothing to be invoiced, change to invoiced (performance)
                                  OrderRec.MODIFY;

                                  CLEAR(LocationFrom);
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=From Location=FIELD(Code) }

    { 4889;2   ;DataItem;OrderCostToLoc      ;
               DataItemTable=Table11012556;
               DataItemTableView=SORTING(Posted,Order Cost Invoiced,To Location,Transfer Date)
                                 WHERE(Posted=CONST(Yes),
                                       Order Cost Invoiced=CONST(No),
                                       Type=FILTER(Arrival|Other Transfers));
               OnPreDataItem=BEGIN
                               IF NOT InvoicePlantOrderCost THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Plant Order Cost") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Transfer Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  LocationFrom.GET(OrderCostToLoc."From Location");

                                  //Sundry Costs
                                  CostRec.SETRANGE("Plant Order No.",OrderCostToLoc."No.");
                                  IF CostRec.FINDSET THEN BEGIN
                                    InsertSalesHeaderLocation;
                                    InvoiceCreated :=TRUE;
                                    REPEAT
                                      InsertSalesLinePlantCost(TRUE);
                                    UNTIL CostRec.NEXT = 0;
                                  END;

                                  //Update Invoice Data Order
                                  OrderRec := OrderCostToLoc;
                                  OrderRec.FIND;
                                  IF InvoiceCreated THEN BEGIN
                                    OrderRec."Order Cost Invoice No." := SalesHeaderRec."No.";
                                    OrderRec."Order Cost Invoice Status" := OrderRec."Order Cost Invoice Status"::Proposal;
                                  END;
                                  OrderRec."Order Cost Invoiced" := TRUE;  //While nothing to be invoiced, change to invoiced (performance)
                                  OrderRec.MODIFY;

                                  CLEAR(LocationFrom);
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=To Location=FIELD(Code) }

    { 3081;2   ;DataItem;TransOrderFromLoc   ;
               DataItemTable=Table11020507;
               DataItemTableView=SORTING(From Location Invoiced,From Location,Transport Date)
                                 WHERE(From Location Invoiced=CONST(No),
                                       Invoice with Transport Order=FILTER(''));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceTransportOrders THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Transport Orders") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Transport Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  //Transport Order (From)

                                  InvoiceCreated := FALSE;
                                  TransOrderRec := TransOrderFromLoc;
                                  TransOrderRec.CALCFIELDS("From Depot", "To Depot");

                                  TransOrderCostRec.RESET;
                                  TransOrderCostRec.SETRANGE("Transport Order No.", TransOrderRec."No.");
                                  SetFilterTransCostInvoiceTo('FROM LOC.');
                                  IF TransOrderCostRec.FINDSET THEN BEGIN
                                    REPEAT
                                      IF ((TransOrderRec."Perc. From Location" <> 0) AND
                                          (TransOrderCostRec."Invoice-to" = TransOrderCostRec."Invoice-to"::" ")) OR
                                         (TransOrderCostRec."Invoice-to" IN
                                          [TransOrderCostRec."Invoice-to"::Location,TransOrderCostRec."Invoice-to"::"From Location"])
                                      THEN BEGIN
                                        TransCostPercentage := GetTransCostPercentage('FROM LOC.');
                                        IF TransCostPercentage <> 0 THEN BEGIN
                                          IF NOT InvoiceCreated THEN BEGIN
                                            InsertSalesHeaderLocation;
                                            InvoiceCreated := TRUE;
                                          END;
                                          InsertSalesLineTransportOrder('FROM LOC.');
                                        END;
                                      END;
                                    UNTIL TransOrderCostRec.NEXT = 0;
                                  END;

                                  //Update Invoice Data
                                  TransOrderRec.FIND;
                                  IF InvoiceCreated THEN BEGIN
                                    TransOrderRec."From Location Invoice No." := SalesHeaderRec."No.";
                                    TransOrderRec."From Location Invoice Status" := "From Location Invoice Status"::Proposal;
                                  END;
                                  TransOrderRec."From Location Invoiced" := TRUE;  //Also if nothing to be invoiced, change to invoiced (performance)
                                  TransOrderRec.FillStatusInvoiced(TRUE);
                                  TransOrderRec.MODIFY;
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=From Location=FIELD(Code) }

    { 8575;2   ;DataItem;TransOrderToLoc     ;
               DataItemTable=Table11020507;
               DataItemTableView=SORTING(To Location Invoiced,To Location,Transport Date)
                                 WHERE(To Location Invoiced=CONST(No),
                                       Invoice with Transport Order=FILTER(''));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceTransportOrders THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Transport Orders") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Transport Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  //Transport Order (To)

                                  InvoiceCreated := FALSE;
                                  TransOrderRec := TransOrderToLoc;
                                  TransOrderRec.CALCFIELDS("From Depot", "To Depot");

                                  TransOrderCostRec.RESET;
                                  TransOrderCostRec.SETRANGE("Transport Order No.", TransOrderRec."No.");
                                  SetFilterTransCostInvoiceTo('TO LOC.');
                                  IF TransOrderCostRec.FINDSET THEN BEGIN
                                    REPEAT
                                      IF ((TransOrderRec."Perc. To Location" <> 0) AND
                                          (TransOrderCostRec."Invoice-to" = TransOrderCostRec."Invoice-to"::" ")) OR
                                         (TransOrderCostRec."Invoice-to" IN
                                          [TransOrderCostRec."Invoice-to"::Location,TransOrderCostRec."Invoice-to"::"To Location"])
                                      THEN BEGIN
                                        TransCostPercentage := GetTransCostPercentage('TO LOC.');
                                        IF TransCostPercentage <> 0 THEN BEGIN
                                          IF NOT InvoiceCreated THEN BEGIN
                                            InsertSalesHeaderLocation;
                                            InvoiceCreated := TRUE;
                                          END;
                                          InsertSalesLineTransportOrder('TO LOC.');
                                        END;
                                      END;
                                    UNTIL TransOrderCostRec.NEXT = 0;
                                  END;

                                  //Update Invoice Data
                                  TransOrderRec.FIND;
                                  IF InvoiceCreated THEN BEGIN
                                    TransOrderRec."To Location Invoice No." := SalesHeaderRec."No.";
                                    TransOrderRec."To Location Invoice Status" := "To Location Invoice Status"::Proposal;
                                  END;
                                  TransOrderRec."To Location Invoiced" := TRUE;  //Also if nothing to be invoiced, change to invoiced (performance)
                                  TransOrderRec.FillStatusInvoiced(TRUE);
                                  TransOrderRec.MODIFY;
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=To Location=FIELD(Code) }

    { 3371;2   ;DataItem;CorrLocationDebit   ;
               DataItemTable=Table11012565;
               DataItemTableView=SORTING(Posted,Debet Location Invoiced,Debit Location)
                                 WHERE(Posted=CONST(Yes),
                                       Debet Location Invoiced=CONST(No));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceRentalCorrections THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Rental Correction") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Posting Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  InvoiceCreated := FALSE;

                                  CorrLineRec.SETRANGE("Rental  Correction No.",CorrLocationDebit."No.");
                                  IF CorrLineRec.FINDSET THEN BEGIN
                                    InsertSalesHeaderLocation;
                                    InvoiceCreated :=TRUE;
                                    REPEAT
                                      InsertDebitCorrSalesLine;
                                    UNTIL CorrLineRec.NEXT = 0;
                                  END;

                                  //Update Invoice Data Correction
                                  AdjRec := CorrLocationDebit;
                                  AdjRec.FIND;
                                  IF InvoiceCreated THEN BEGIN
                                    AdjRec."Invoice No. Debit Location" := SalesHeaderRec."No.";
                                    AdjRec."Invoice Status Debit Location" := AdjRec."Invoice Status Debit Location"::Proposal;
                                  END;
                                  AdjRec."Debet Location Invoiced" := TRUE;  //While nothing to be invoiced, change to invoiced (performance)
                                  IF AdjRec."Debet Location Invoiced" AND (AdjRec."Credit Location Invoiced" OR (AdjRec."Credit Location" = '')) THEN
                                    AdjRec."Completely Invoiced" := TRUE;
                                  AdjRec.MODIFY;
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=Debit Location=FIELD(Code) }

    { 1324;2   ;DataItem;CorrLocationCredit  ;
               DataItemTable=Table11012565;
               DataItemTableView=SORTING(Posted,Credit Location Invoiced,Credit Location)
                                 WHERE(Posted=CONST(Yes),
                                       Credit Location Invoiced=CONST(No));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceRentalCorrections THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Rental Correction") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Posting Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  InvoiceCreated := FALSE;

                                  CorrLineRec.SETRANGE("Rental  Correction No.",CorrLocationCredit."No.");
                                  IF CorrLineRec.FINDSET THEN BEGIN
                                    InsertSalesHeaderLocation;
                                    InvoiceCreated :=TRUE;
                                    REPEAT
                                      InsertSalesLineCreditCorr;
                                    UNTIL CorrLineRec.NEXT = 0;
                                  END;

                                  //Update Invoice Data Correction
                                  AdjRec := CorrLocationCredit;
                                  AdjRec.FIND;
                                  IF InvoiceCreated THEN BEGIN
                                    AdjRec."Invoice.No.Credit Location" := SalesHeaderRec."No.";
                                    AdjRec."Invoice Status Credit Location" := AdjRec."Invoice Status Credit Location"::Proposal;
                                  END;
                                  AdjRec."Credit Location Invoiced" := TRUE;  //While nothing to be invoiced, change to invoiced (performance)
                                  IF (AdjRec."Debet Location Invoiced" OR (AdjRec."Debit Location" = '')) AND AdjRec."Credit Location Invoiced" THEN
                                    AdjRec."Completely Invoiced" := TRUE;
                                  AdjRec.MODIFY;
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=Credit Location=FIELD(Code) }

    { 5504;2   ;DataItem;PlantHourLine       ;
               DataItemTable=Table11012574;
               DataItemTableView=SORTING(Invoiced,Status,Plant Location,Year,Week,Plant Type,Plant No.)
                                 WHERE(Invoiced=CONST(No),
                                       Status=FILTER(Posted));
               OnPreDataItem=BEGIN
                               IF NOT InvoicePlantHours THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Plant Hours") THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  lvI@1100485001 : Integer;
                                  lvEndI@1100485003 : Integer;
                                  DayNo@1100530000 : Integer;
                                BEGIN
                                  //LastDateWeek := DWY2DATE(7, PlantHourLine.Week, PlantHourLine.Year);  //*C-026590.o
                                  //*C-026590.sn
                                  DayNo := 5;  //*Default Friday (for Expenses)
                                  //IF Type = Type::Hours THEN BEGIN  //*C-19470.o
                                  IF Type <> Type::Expenses THEN BEGIN  //*C-19470.n
                                    IF Monday <> 0 THEN DayNo := 1;
                                    IF Tuesday <> 0 THEN DayNo := 2;
                                    IF Wednesday <> 0 THEN DayNo := 3;
                                    IF Thursday <> 0 THEN DayNo := 4;
                                    IF Friday <> 0 THEN DayNo := 5;
                                    IF Saturday <> 0 THEN DayNo := 6;
                                    IF Sunday <> 0 THEN DayNo := 7;
                                  END;
                                  LastDateWeek := DWY2DATE(DayNo, PlantHourLine.Week, PlantHourLine.Year);
                                  //*C-026590.en
                                  IF RentalPeriodeToDate < LastDateWeek THEN
                                    CurrReport.SKIP;

                                  IF Type = Type::Expenses THEN BEGIN
                                    IF (Amount = 0) THEN
                                      CurrReport.SKIP;
                                  END ELSE BEGIN
                                    IF (Monday=0) AND (Tuesday=0) AND (Wednesday=0) AND (Thursday=0) AND (Friday=0) AND (Saturday=0) AND (Sunday=0) THEN
                                      CurrReport.SKIP;
                                  END;

                                  lvEndI := FillPlantHourArrays();

                                  FOR lvI := 1 TO lvEndI DO BEGIN
                                    InsertSalesHeaderLocation;
                                    InsertHoursSalesLine(PlantHourDateArray[lvI], PlantHourQuanArray[lvI], PlantHourRateArray[lvI]);

                                    PlantHourRec := PlantHourLine;
                                    PlantHourRec.FIND;
                                    PlantHourRec."Invoice No." := SalesHeaderRec."No.";
                                    PlantHourRec."Invoice Line No." := SalesLineRec."Line No.";
                                    PlantHourRec."Invoice Status" := PlantHourRec."Invoice Status"::Proposal;
                                    PlantHourRec.Invoiced := TRUE;
                                    PlantHourRec.MODIFY;
                                  END;
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=Plant Location=FIELD(Code) }

    { 7184;2   ;DataItem;                    ;
               DataItemTable=Table11012559;
               DataItemTableView=SORTING(Posted,Location,Invoiced,Exit-date)
                                 WHERE(Posted=CONST(Yes),
                                       Invoiced=CONST(No));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceExitOrders THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Exit Order") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Exit-date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=VAR
                                  InvoiceCreated@11012000 : Boolean;
                                BEGIN
                                  InvoiceCreated := FALSE;

                                  IF (Type <> Type::External) THEN BEGIN
                                    ExitLineRec.SETRANGE("Exit-order No.","No.");
                                    IF ExitLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                      InvoiceCreated := TRUE;
                                      InsertSalesHeaderLocation;
                                      REPEAT
                                        InsertSalesLineExitPlant("Exit Order");
                                      UNTIL ExitLineRec.NEXT = 0;
                                    END;
                                  END;

                                  ExitCostRec.SETRANGE("Exit-order No.","No.");
                                  IF ExitCostRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                    InvoiceCreated := TRUE;
                                    InsertSalesHeaderLocation;
                                    REPEAT
                                      InsertSalesLineExitCost;
                                    UNTIL ExitCostRec.NEXT = 0;
                                  END;

                                  ExitOrderRec := "Exit Order";
                                  ExitOrderRec.FIND;

                                  IF InvoiceCreated THEN BEGIN
                                    ExitOrderRec."Invoice No." := SalesHeaderRec."No.";
                                    ExitOrderRec."Invoice Status" := "Invoice Status"::Proposal;
                                  END;

                                  ExitOrderRec.Invoiced := TRUE;
                                  ExitOrderRec.MODIFY;
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=Location=FIELD(Code) }

    { 6517;2   ;DataItem;                    ;
               DataItemTable=Table11012655;
               DataItemTableView=SORTING(Posted,Location,Invoiced,Return Date)
                                 WHERE(Posted=CONST(Yes),
                                       Invoiced=CONST(No));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceExitOrders THEN
                                 CurrReport.BREAK;

                               IF CollectByInvoiceType AND (TmpCollectNoRec.Number <> InvMethodRec."Exit Order") THEN
                                 CurrReport.BREAK;

                               SETRANGE("Return Date",0D,RentalPeriodeToDate);
                             END;

               OnAfterGetRecord=VAR
                                  InvoiceCreated@1100525000 : Boolean;
                                BEGIN
                                  InvoiceCreated := FALSE;

                                  ReturnLossOrderLineRec.SETRANGE("Returned Loss Order No.","No.");
                                  IF ReturnLossOrderLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                    InvoiceCreated := TRUE;
                                    InsertSalesHeaderLocation;
                                    REPEAT
                                      InsertSalesLineReturnedLoss("Returned Loss Order");
                                    UNTIL ReturnLossOrderLineRec.NEXT = 0;
                                  END;

                                  ReturnLossOrderRec := "Returned Loss Order";
                                  ReturnLossOrderRec.FIND;

                                  IF InvoiceCreated THEN BEGIN
                                    ReturnLossOrderRec."Invoice No." := SalesHeaderRec."No.";
                                    ReturnLossOrderRec."Invoice Status" := "Invoice Status"::Proposal;
                                  END;

                                  ReturnLossOrderRec.Invoiced := TRUE;
                                  ReturnLossOrderRec.MODIFY;
                                END;

               DataItemLinkReference=Plant Location;
               DataItemLink=Location=FIELD(Code) }

    { 3790;    ;DataItem;ExitOrderCustomer   ;
               DataItemTable=Table11012559;
               DataItemTableView=SORTING(Posted,Location,Invoiced,Exit-date)
                                 WHERE(Posted=CONST(Yes),
                                       Location=FILTER(''),
                                       Invoiced=CONST(No),
                                       Customer No.=FILTER(<>''));
               ReqFilterHeadingML=ENU=Exit Order Customer;
               OnPreDataItem=BEGIN
                               IF NOT InvoiceExitOrders THEN
                                 CurrReport.BREAK;

                               FILTERGROUP(9);  //* Other filtergroup, can also be set a filter on exit date by the user
                               SETRANGE("Exit-date",0D,RentalPeriodeToDate);
                               FILTERGROUP(0);
                             END;

               OnAfterGetRecord=VAR
                                  InvoiceCreated@11012000 : Boolean;
                                BEGIN
                                  Window.UPDATE(1,'');
                                  Window.UPDATE(2,"Customer No.");
                                  IF DPA_DeparmentInFilter(DATABASE::Customer, "Customer No.") THEN BEGIN
                                    InvoiceCreated := FALSE;
                                    SalesLineNo := 0;

                                    IF (Type <> Type::External) THEN BEGIN
                                      ExitLineRec.SETRANGE("Exit-order No.","No.");
                                      IF ExitLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                        InvoiceCreated := TRUE;
                                        InsertSalesHeaderCustomerExit;
                                        REPEAT
                                          InsertSalesLineExitPlant(ExitOrderCustomer);
                                        UNTIL ExitLineRec.NEXT = 0;
                                      END;
                                    END;

                                    ExitCostRec.SETRANGE("Exit-order No.","No.");
                                    IF ExitCostRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                      InvoiceCreated := TRUE;
                                      InsertSalesHeaderCustomerExit;
                                      REPEAT
                                        InsertSalesLineExitCost;
                                      UNTIL ExitCostRec.NEXT = 0;
                                    END;

                                    ExitOrderRec := ExitOrderCustomer;
                                    ExitOrderRec.FIND;

                                    IF InvoiceCreated THEN BEGIN
                                      ExitOrderRec."Invoice No." := SalesHeaderRec."No.";
                                      ExitOrderRec."Invoice Status" := "Invoice Status"::Proposal;
                                    END;

                                    ExitOrderRec.Invoiced := TRUE;
                                    ExitOrderRec.MODIFY;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                COMMIT;
                              END;

               ReqFilterFields=Customer No. }

    { 1452;    ;DataItem;ReturnedLossCustomer;
               DataItemTable=Table11012655;
               DataItemTableView=SORTING(Posted,Location,Invoiced,Return Date)
                                 WHERE(Posted=CONST(Yes),
                                       Location=FILTER(''),
                                       Invoiced=CONST(No),
                                       Customer No.=FILTER(<>''));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceExitOrders THEN
                                 CurrReport.BREAK;

                               FILTERGROUP(9);  //* Other filtergroup, can also be set a filter on return date by the user (via "Exit-date" of
                               SETRANGE("Return Date",0D,RentalPeriodeToDate);    //* DataItem ExitOrderCustomer, see copyfilters above)
                               FILTERGROUP(0);

                               ExitOrderCustomer.COPYFILTER("Customer No.", ReturnedLossCustomer."Customer No.");
                               ExitOrderCustomer.COPYFILTER("Bill-to Customer No.", ReturnedLossCustomer."Bill-to Customer No.");
                               ExitOrderCustomer.COPYFILTER("No.", ReturnedLossCustomer."No.");
                               ExitOrderCustomer.COPYFILTER("Exit-date", ReturnedLossCustomer."Return Date");
                               ExitOrderCustomer.COPYFILTER("Posting Date", ReturnedLossCustomer."Posting Date");
                               ExitOrderCustomer.COPYFILTER("Department Code", ReturnedLossCustomer."Department Code");
                             END;

               OnAfterGetRecord=VAR
                                  InvoiceCreated@1100525000 : Boolean;
                                BEGIN
                                  Window.UPDATE(1,'');
                                  Window.UPDATE(2,"Customer No.");
                                  IF DPA_DeparmentInFilter(DATABASE::Customer, "Customer No.") THEN BEGIN
                                    ExitOrderCustomer."Customer No." := "Customer No.";
                                    InvoiceCreated := FALSE;
                                    SalesLineNo := 0;

                                    ReturnLossOrderLineRec.SETRANGE("Returned Loss Order No.","No.");
                                    IF ReturnLossOrderLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
                                      InvoiceCreated := TRUE;
                                      InsertSalesHeaderCustRetLoss;
                                      REPEAT
                                        InsertSalesLineReturnedLoss(ReturnedLossCustomer);
                                      UNTIL ReturnLossOrderLineRec.NEXT = 0;
                                    END;

                                    ReturnLossOrderRec := ReturnedLossCustomer;
                                    ReturnLossOrderRec.FIND;

                                    IF InvoiceCreated THEN BEGIN
                                      ReturnLossOrderRec."Invoice No." := SalesHeaderRec."No.";
                                      ReturnLossOrderRec."Invoice Status" := "Invoice Status"::Proposal;
                                    END;

                                    ReturnLossOrderRec.Invoiced := TRUE;
                                    ReturnLossOrderRec.MODIFY;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                COMMIT;
                              END;
                               }

    { 1862;    ;DataItem;TransOrderProject   ;
               DataItemTable=Table11020507;
               DataItemTableView=SORTING(Project Invoiced,Project No.,Transport Date)
                                 WHERE(Project Invoiced=CONST(No),
                                       Project No.=FILTER(<>''),
                                       Invoice with Transport Order=FILTER(''));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceTransportOrders THEN
                                 CurrReport.BREAK;

                               SETRANGE("Transport Date",0D,RentalPeriodeToDate);
                               SavePlantLocRec.COPYFILTER("Project No.", "Project No.");

                               xRecProjectNo := '';
                               Window.UPDATE(2,'');
                             END;

               OnAfterGetRecord=BEGIN
                                  //Transport Order (Project)

                                  Window.UPDATE(1,"Project No.");
                                  IF DPA_DeparmentInFilter(DATABASE::Job, "Project No.") THEN BEGIN
                                    InvoiceCreated := FALSE;
                                    TransOrderRec := TransOrderProject;

                                    IF ("Project No." <> xRecProjectNo) THEN BEGIN
                                      xRecProjectNo := "Project No.";
                                      SalesLineNo := 0;
                                      COMMIT;
                                    END;

                                    TransOrderCostRec.RESET;
                                    TransOrderCostRec.SETRANGE("Transport Order No.", TransOrderRec."No.");
                                    SetFilterTransCostInvoiceTo('PROJECT');
                                    IF TransOrderCostRec.FINDSET THEN BEGIN
                                      REPEAT
                                        IF ((TransOrderRec."Perc. Project" <> 0) AND
                                            (TransOrderCostRec."Invoice-to" = TransOrderCostRec."Invoice-to"::" ")) OR
                                           (TransOrderCostRec."Invoice-to" = TransOrderCostRec."Invoice-to"::Project)
                                        THEN BEGIN
                                          TransCostPercentage := GetTransCostPercentage('PROJECT');
                                          IF TransCostPercentage <> 0 THEN BEGIN
                                            IF NOT InvoiceCreated THEN BEGIN
                                              InsertSalesHeaderProjectTrans;
                                              InvoiceCreated := TRUE;
                                            END;
                                            InsertSalesLineTransportOrder('PROJECT');
                                          END;
                                        END;
                                      UNTIL TransOrderCostRec.NEXT = 0;
                                    END;

                                    //Update Invoice Data
                                    TransOrderRec.FIND;
                                    IF InvoiceCreated THEN BEGIN
                                      TransOrderRec."Project Invoice No." := SalesHeaderRec."No.";
                                      TransOrderRec."Project Invoice Status" := "Project Invoice Status"::Proposal;
                                    END;
                                    TransOrderRec."Project Invoiced" := TRUE;  //Also if nothing to be invoiced, change to invoiced (performance)
                                    TransOrderRec.FillStatusInvoiced(TRUE);
                                    TransOrderRec.MODIFY;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                COMMIT;
                              END;
                               }

    { 3097;    ;DataItem;TransOrderInternal  ;
               DataItemTable=Table11020507;
               DataItemTableView=SORTING(Internal Invoiced,Internal Customer No.,Transport Date)
                                 WHERE(Internal Invoiced=CONST(No),
                                       Internal Customer No.=FILTER(<>''),
                                       Invoice with Transport Order=FILTER(''));
               OnPreDataItem=BEGIN
                               IF NOT InvoiceTransportOrders THEN
                                 CurrReport.BREAK;

                               SETRANGE("Transport Date",0D,RentalPeriodeToDate);
                               SavePlantLocRec.COPYFILTER("Customer No.", "Internal Customer No.");

                               xRecCustNo := '';
                               Window.UPDATE(1,'');
                             END;

               OnAfterGetRecord=BEGIN
                                  //Transport Order (Internal)

                                  Window.UPDATE(2,"Internal Customer No.");
                                  IF DPA_DeparmentInFilter(DATABASE::Customer, "Internal Customer No.") THEN BEGIN
                                    InvoiceCreated := FALSE;
                                    TransOrderRec := TransOrderInternal;;

                                    IF ("Internal Customer No." <> xRecCustNo) THEN BEGIN
                                      xRecCustNo := "Internal Customer No.";
                                      SalesLineNo := 0;
                                      COMMIT;
                                    END;

                                    TransOrderCostRec.RESET;
                                    TransOrderCostRec.SETRANGE("Transport Order No.", TransOrderRec."No.");
                                    SetFilterTransCostInvoiceTo('INTERNAL');
                                    IF TransOrderCostRec.FINDSET THEN BEGIN
                                      REPEAT
                                        IF ((TransOrderRec."Perc. Internal" <> 0) AND
                                            (TransOrderCostRec."Invoice-to" = TransOrderCostRec."Invoice-to"::" ")) OR
                                           (TransOrderCostRec."Invoice-to" = TransOrderCostRec."Invoice-to"::Internal)
                                        THEN BEGIN
                                          TransCostPercentage := GetTransCostPercentage('INTERNAL');
                                          IF TransCostPercentage <> 0 THEN BEGIN
                                            IF NOT InvoiceCreated THEN BEGIN
                                              InsertSalesHeaderIntCustTrans;
                                              InvoiceCreated := TRUE;
                                            END;
                                            InsertSalesLineTransportOrder('INTERNAL');
                                          END;
                                        END;
                                      UNTIL TransOrderCostRec.NEXT = 0;
                                    END;

                                    //Update Invoice Data
                                    TransOrderRec.FIND;
                                    IF InvoiceCreated THEN BEGIN
                                      TransOrderRec."Internal Invoice No." := SalesHeaderRec."No.";
                                      TransOrderRec."Internal Invoice Status" := "Internal Invoice Status"::Proposal;
                                    END;
                                    TransOrderRec."Internal Invoiced" := TRUE;  //Also if nothing to be invoiced, change to invoiced (performance)
                                    TransOrderRec.FillStatusInvoiced(TRUE);
                                    TransOrderRec.MODIFY;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                COMMIT;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               InvoiceTransportOrdersEnable := TRUE;
             END;

      OnOpenPage=VAR
                   lvLicensePlantExtendedCU@1100485000 : Codeunit 11012579;
                 BEGIN
                   RentalPeriodeToDate := 0D;   // 'Save Value' option of request form is on now, these date fields must
                   PostingDate := 0D;           // always initional be empty (must always be entered by the time.

                   IF NOT lvLicensePlantExtendedCU.LicenseTableTransportOrder(FALSE) THEN BEGIN
                     InvoiceTransportOrdersEnable := FALSE;
                     InvoiceTransportOrders := FALSE;
                   END;
                 END;

      ActionList=ACTIONS
      {
        { 1100409001;  ;ActionContainer;
                        CaptionML=ENU=Period;
                        ActionContainerType=RelatedInformation }
        { 1100409004;1 ;Action    ;
                        CaptionML=ENU=Previous Period;
                        Promoted=Yes;
                        PromotedIsBig=Yes;
                        Image=PreviousRecord;
                        OnAction=BEGIN
                                   FindPeriod('<=');
                                 END;
                                  }
        { 1100409003;1 ;Action    ;
                        CaptionML=ENU=Next Period;
                        ToolTipML=ENU=Next Column;
                        Promoted=Yes;
                        PromotedIsBig=Yes;
                        Image=NextRecord;
                        PromotedCategory=Process;
                        OnAction=BEGIN
                                   FindPeriod('>=');
                                 END;
                                  }
      }
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100409000;2;Field  ;
                  CaptionML=ENU=Period Type;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period,Rental Period;
                  SourceExpr=PeriodType;
                  OnValidate=BEGIN
                               FindPeriod('');
                             END;
                              }

      { 1   ;2   ;Field     ;
                  Name=RentalPeriodeToDate;
                  CaptionML=ENU=Rental Periode to Date;
                  SourceExpr=RentalPeriodeToDate;
                  OnValidate=VAR
                               RentalPeriod@1100409001 : Record 11012589;
                               EndingDate@1100409000 : Date;
                             BEGIN
                               IF (PeriodType <> PeriodType::"Rental Period") THEN BEGIN
                                 Calendar."Period Start" := RentalPeriodeToDate;
                                 PeriodFormManagement.FindDate('=<',Calendar,PeriodType);
                               END ELSE BEGIN
                                 RentalPeriod."Starting Date" := RentalPeriodeToDate;
                                 IF RentalPeriod.FindDate('=<', RentalPeriod, EndingDate) THEN BEGIN
                                   Calendar."Period Start" := RentalPeriod."Starting Date";
                                   IF EndingDate = RentalPeriodeToDate THEN
                                     PostingDate := RentalPeriod."Posting Date";
                                 END;
                               END;
                             END;

                  OnAssistEdit=BEGIN
                                 Calendar."Period Start" := 0D;
                                 FindPeriod('');
                               END;
                                }

      { 1100409002;2;Field  ;
                  CaptionML=ENU=Period Name;
                  SourceExpr=GetPeriodName();
                  Enabled=FALSE }

      { 1100409005;2;Field  ;
                  CaptionML=ENU="   Previous Period";
                  SourceExpr=Text012;
                  Editable=FALSE;
                  StyleExpr=TRUE;
                  OnLookup=BEGIN
                             FindPeriod('<=');
                           END;
                            }

      { 1100409006;2;Field  ;
                  CaptionML=ENU="   Next Period";
                  SourceExpr=Text013;
                  Editable=FALSE;
                  OnLookup=BEGIN
                             FindPeriod('>=');
                           END;
                            }

      { 11  ;2   ;Field     ;
                  CaptionML=ENU=Posting Date;
                  SourceExpr=PostingDate }

      { 1100485001;2;Field  ;
                  CaptionML=ENU=Rental;
                  SourceExpr=InvoiceRental }

      { 1100485003;2;Field  ;
                  CaptionML=ENU=Sales/Buy Back and Item Delivery;
                  ToolTipML=ENU=Sales/Buy Back of Plant and Item Delivery via the Plant Order;
                  SourceExpr=InvoiceSalesBuyBack }

      { 1210190002;2;Field  ;
                  CaptionML=ENU=Plant Order Cost;
                  SourceExpr=InvoicePlantOrderCost }

      { 1100485006;2;Field  ;
                  Name=InvoiceTransportOrders;
                  CaptionML=ENU=Transport Orders;
                  SourceExpr=InvoiceTransportOrders;
                  Enabled=InvoiceTransportOrdersEnable }

      { 1210190001;2;Field  ;
                  CaptionML=ENU=Rental Corrections;
                  SourceExpr=InvoiceRentalCorrections }

      { 1210190007;2;Field  ;
                  CaptionML=ENU=Plant Hours;
                  SourceExpr=InvoicePlantHours }

      { 1210190005;2;Field  ;
                  CaptionML=ENU=Exit Orders;
                  SourceExpr=InvoiceExitOrders }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012037 : TextConst 'ENU=Enter Posting Date on Option Tab';
      Text001@11012038 : TextConst 'ENU=Enter "Rental Period until" on Options Tab';
      Text002@11012039 : TextConst 'ENU=Creating Invoice Proposals ...\\';
      Text003@11012040 : TextConst 'ENU=Plant Location  #1##########\';
      Text004@11012041 : TextConst 'ENU=Customer No.    #2##########\';
      Text005@11012042 : TextConst 'ENU=There are no Invoice Proposals created';
      Text006@11012043 : TextConst 'ENU=There are %1 Invoice Proposals and %2 Invoice Proposal lines created.';
      PlantSetup@11012000 : Record 11012550;
      ProjectSetupRec@1210190010 : Record 315;
      GLSetupRec@1100525001 : Record 98;
      SalesHeaderRec@11012001 : Record 36;
      SalesLineRec@11012002 : Record 37;
      PlantRec@11012004 : Record 11012551;
      PlantNoRec@1210190018 : Record 11012552;
      InventoryRec@11012005 : Record 11012555;
      SavePlantLocRec@1100485013 : Record 11012554;
      CostRec@11012006 : Record 11012558;
      ExitOrderRec@1210190007 : Record 11012559;
      ExitLineRec@11012007 : Record 11012560;
      ExitCostRec@11012008 : Record 11012561;
      ReturnLossOrderRec@1100525005 : Record 11012655;
      ReturnLossOrderLineRec@1100525006 : Record 11012656;
      PlantPostingSetup@11012009 : Record 11012586;
      ProjRec@11012010 : Record 11072003;
      OrderRec@11012012 : Record 11012556;
      OrderLineRec@11012013 : Record 11012557;
      AdjRec@11012014 : Record 11012565;
      CorrLineRec@11012015 : Record 11012566;
      Calendar@11012016 : Record 2000000007;
      CustomerRec@11012017 : Record 18;
      CompanyData@11012018 : Record 11020674;
      PlantHourRec@1210190008 : Record 11012574;
      ItemRec@1100485011 : Record 27;
      OrderItemLineRec@1100485010 : Record 11012557;
      TransOrderRec@1100485012 : Record 11020507;
      TransOrderCostRec@1100485009 : Record 11020508;
      ShipAgentRec@1100485014 : Record 291;
      InvMethodRec@1100485002 : Record 11012595;
      TmpCollectNoRec@1100485000 : TEMPORARY Record 2000000026;
      LocationFrom@1100485018 : Record 11012554;
      TmpSalesHeader@1100485021 : TEMPORARY Record 36;
      DimValRec@1100525002 : Record 349;
      ServOrderRec@1100525004 : Record 11012823;
      DepartmentAuthorizObject@1100525009 : Record 11012466;
      SearchRate@11012019 : Codeunit 11012567;
      CalculateRentalPeriodsCU@11012020 : Codeunit 11012568;
      PeriodFormManagement@11012021 : Codeunit 359;
      DPA_Management@1100525007 : Codeunit 11012783;
      Window@11012022 : Dialog;
      PeriodType@11012023 : 'Day,Week,Month,Quarter,Year,Accounting Period,Rental Period';
      RateUnitType@1100485016 : ' ,Plant Rental,Plant Sales/Buy Back,Plant Hours';
      InvCounter@11012024 : Integer;
      LineCounter@11012025 : Integer;
      SalesLineNo@11012026 : Integer;
      RentalSplitNo@1100525000 : Integer;
      xRecCustNo@11012027 : Code[20];
      xRecProjectNo@11012028 : Code[20];
      xRecServOrderNo@1100525003 : Code[20];
      DefaultProjElement@1210190004 : Code[20];
      PlantPostingGrp@1210190009 : Code[10];
      xRecCompName@11012029 : Text[30];
      DPA_UserDepartmentFilter@1100525008 : Text[250];
      NumberRentalPeriods@11012030 : Decimal;
      ExtraRentalPeriods@1100485023 : Decimal;
      NumberRentalDays@1100485024 : Decimal;
      ExtraRentalDays@1100485025 : Decimal;
      TransCostPercentage@1100485015 : Decimal;
      RentalPeriodeToDate@11012031 : Date;
      StartDate@11012032 : Date;
      EndDate@11012033 : Date;
      PostingDate@11012034 : Date;
      LastDateWeek@1210190006 : Date;
      InvoiceRental@1100485003 : Boolean;
      InvoiceSalesBuyBack@1100485004 : Boolean;
      InvoicePlantOrderCost@1210190013 : Boolean;
      InvoiceTransportOrders@1100485008 : Boolean;
      InvoiceRentalCorrections@1210190016 : Boolean;
      InvoiceExitOrders@1210190014 : Boolean;
      InvoicePlantHours@1210190015 : Boolean;
      Credit@11012035 : Boolean;
      InvoiceCreated@11012036 : Boolean;
      Text007@1210190011 : TextConst 'ENU=Standard element of project %1 not present';
      Text008@1210190012 : TextConst 'ENU=Week %1';
      Text009@1210190017 : TextConst 'ENU=There are no invoice types selected';
      CollectByInvoiceType@1100485001 : Boolean;
      Text010@1100485006 : TextConst 'ENU=Week';
      Text011@1100485007 : TextConst 'ENU=Quarter';
      RentalFirstInvoiced@1100485017 : Boolean;
      xRecPlantTypeOnLoc@1100529001 : Boolean;
      PlantHourRateArray@1100485019 : ARRAY [7] OF Decimal;
      PlantHourQuanArray@1100485020 : ARRAY [7] OF Decimal;
      PlantHourDateArray@1100485022 : ARRAY [7] OF Date;
      InvoiceTransportOrdersEnable@19042849 : Boolean INDATASET;
      Text012@1100528000 : TextConst 'ENU=PREVIOUS';
      Text013@1100528001 : TextConst 'ENU=NEXT';

    LOCAL PROCEDURE FindPeriod@1100409000(SearchArg@1100409000 : Text[3]);
    VAR
      RentalPeriod@1100409001 : Record 11012589;
      EndingDate@1100409002 : Date;
    BEGIN
      IF (PeriodType <> PeriodType::"Rental Period") THEN BEGIN
        PeriodFormManagement.FindDate(SearchArg, Calendar, PeriodType);
        RentalPeriodeToDate := Calendar."Period End";
      END ELSE BEGIN
        RentalPeriod."Starting Date" := Calendar."Period Start";
        IF RentalPeriod.FindDate(SearchArg, RentalPeriod, EndingDate) THEN BEGIN
          Calendar."Period Start" := RentalPeriod."Starting Date";
          RentalPeriodeToDate := EndingDate;
          PostingDate := RentalPeriod."Posting Date";
        END;
      END;
    END;

    LOCAL PROCEDURE GetPeriodName@1100409006() : Text;
    VAR
      RentalPeriod@1100485001 : Record 11012589;
      EndingDate@1100485000 : Date;
    BEGIN
      IF (PeriodType <> PeriodType::"Rental Period") THEN BEGIN
        Calendar."Period Start" := RentalPeriodeToDate;
        PeriodFormManagement.FindDate('=<',Calendar,PeriodType);
        IF Calendar."Period End" = RentalPeriodeToDate THEN BEGIN
          CASE PeriodType OF
            PeriodType::Week:
              EXIT(Text010 + ' ' + Calendar."Period Name");
            PeriodType::Quarter:
              EXIT(Text011 + ' ' + Calendar."Period Name");
          ELSE
            EXIT(Calendar."Period Name");
          END;
        END;
      END ELSE BEGIN
        RentalPeriod."Starting Date" := RentalPeriodeToDate;
        IF RentalPeriod.FindDate('=<', RentalPeriod, EndingDate) THEN BEGIN
          IF EndingDate = RentalPeriodeToDate THEN
            EXIT(RentalPeriod.Name);
        END;
      END;
      EXIT('');
    END;

    PROCEDURE InsertSalesHeaderLocation@3();
    BEGIN
      CheckFromLocation;

      IF SalesLineNo > 0 THEN
        EXIT;

      "Plant Location".CheckBlock(2,FALSE,TRUE);

      WITH SalesHeaderRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Invoice Proposal";
        "No." := '';
        "Plant Invoice" := TRUE;
        "Invoice From" := "Invoice From"::Logistic;
        "Company Name" := "Plant Location"."Company Name";
        "Job No." := "Plant Location"."Project No.";
        "Service Order No." := "Plant Location"."Service Order No.";
        VALIDATE("No.");
        INSERT(TRUE);
        IF "Plant Location"."Customer No." <> '' THEN BEGIN
          "Sell-to Customer No." := "Plant Location"."Customer No.";
          VALIDATE("Sell-to Customer No.");
          IF "Plant Location"."Bill-to Customer No." <> '' THEN BEGIN
            "Bill-to Customer No." := "Plant Location"."Bill-to Customer No.";
            VALIDATE("Bill-to Customer No.");
            IF "Plant Location"."Alternative Bill-to Address" <> '' THEN
              VALIDATE("Alternative Bill-to Address", "Plant Location"."Alternative Bill-to Address");
          END;
        END;
        VALIDATE("Location Code",LocationFrom."VAT Location Code");
        FillShipToAddress(SalesHeaderRec,"Plant Location");
        "Rental Periode to Date" := RentalPeriodeToDate;
        "Posting Date" := PostingDate;
        Status := Status::Released;
        FillDefaultInvoiceLayoutCode();  //34413.n
        MODIFY;
        GetDefaultProjectElement();
      END;

      InsertTmpSalesHeader(SalesHeaderRec);
      CLEAR(LocationFrom);

      InvCounter := InvCounter + 1;
      SalesLineNo := 10000;
    END;

    PROCEDURE InsertSalesHeaderCustomerExit@8();
    BEGIN
      IF SalesLineNo > 0 THEN
        EXIT;

      ExitOrderCustomer.CheckBlock(TRUE);

      WITH SalesHeaderRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Invoice Proposal";
        "No." := '';
        VALIDATE("No.");
        "Plant Invoice" := TRUE;
        INSERT(TRUE);
        "Sell-to Customer No." := ExitOrderCustomer."Customer No.";
        VALIDATE("Sell-to Customer No.");
        "Bill-to Customer No." := ExitOrderCustomer."Bill-to Customer No.";
        "Bill-to Name" := COPYSTR(ExitOrderCustomer."Bill-to Name", 1, MAXSTRLEN("Bill-to Name"));
        "Bill-to Name 2" := COPYSTR(ExitOrderCustomer."Bill-to Name 2", 1, MAXSTRLEN("Bill-to Name 2"));
        "Bill-to Address" := ExitOrderCustomer."Bill-to Address";
        "Bill-to Address 2" := ExitOrderCustomer."Bill-to Address 2";
        "Bill-to Post Code" := ExitOrderCustomer."Bill-to Post Code";
        "Bill-to City" := ExitOrderCustomer."Bill-to City";
        "Sell-to County" := ExitOrderCustomer."Bill-to County";
        "Bill-to Country/Region Code" := ExitOrderCustomer."Bill-to Country/Region Code";
        "Bill-to Contact" := ExitOrderCustomer."Bill-to Contact";
        "Ship-to Code" := ExitOrderCustomer."Ship-to Code";
        "Ship-to Name" := COPYSTR(ExitOrderCustomer."Ship-to Name", 1, MAXSTRLEN("Ship-to Name"));
        "Ship-to Name 2" := COPYSTR(ExitOrderCustomer."Ship-to Name 2", 1, MAXSTRLEN("Ship-to Name 2"));
        "Ship-to Address" := ExitOrderCustomer."Ship-to Address";
        "Ship-to Address 2" := ExitOrderCustomer."Ship-to Address 2";
        "Ship-to Post Code" := ExitOrderCustomer."Ship-to Post Code";
        "Ship-to City" := ExitOrderCustomer."Ship-to City";
        "Ship-to County" := ExitOrderCustomer."Ship-to County";
        "Ship-to Country/Region Code" := ExitOrderCustomer."Ship-to Country/Region Code";
        "Ship-to Contact" := ExitOrderCustomer."Ship-to Contact";
        "Rental Periode to Date" := RentalPeriodeToDate;
        "Posting Date" := PostingDate;
        Status := Status::Released;
        FillDefaultInvoiceLayoutCode();  //34413.n
        MODIFY;
        GetDefaultProjectElement();
      END;

      InvCounter := InvCounter + 1;
      SalesLineNo := 10000;
    END;

    PROCEDURE InsertSalesHeaderCustRetLoss@1100525011();
    BEGIN
      IF SalesLineNo > 0 THEN
        EXIT;

      ReturnedLossCustomer.CheckLocationCustBlock(TRUE);

      WITH SalesHeaderRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Invoice Proposal";
        "No." := '';
        VALIDATE("No.");
        "Plant Invoice" := TRUE;
        INSERT(TRUE);
        "Sell-to Customer No." := ReturnedLossCustomer."Customer No.";
        VALIDATE("Sell-to Customer No.");
        "Bill-to Customer No." := ReturnedLossCustomer."Bill-to Customer No.";
        "Bill-to Name" := COPYSTR(ReturnedLossCustomer."Bill-to Name", 1, MAXSTRLEN("Bill-to Name"));
        "Bill-to Name 2" := COPYSTR(ReturnedLossCustomer."Bill-to Name 2", 1, MAXSTRLEN("Bill-to Name 2"));
        "Bill-to Address" := ReturnedLossCustomer."Bill-to Address";
        "Bill-to Address 2" := ReturnedLossCustomer."Bill-to Address 2";
        "Bill-to Post Code" := ReturnedLossCustomer."Bill-to Post Code";
        "Bill-to City" := ReturnedLossCustomer."Bill-to City";
        "Sell-to County" := ReturnedLossCustomer."Bill-to County";
        "Bill-to Country/Region Code" := ReturnedLossCustomer."Bill-to Country/Region Code";
        "Bill-to Contact" := ReturnedLossCustomer."Bill-to Contact";
        "Rental Periode to Date" := RentalPeriodeToDate;
        "Posting Date" := PostingDate;
        Status := Status::Released;
        FillDefaultInvoiceLayoutCode();  //34413.n
        MODIFY;
        GetDefaultProjectElement();
      END;

      InvCounter := InvCounter + 1;
      SalesLineNo := 10000;
    END;

    PROCEDURE InsertSalesHeaderIntCustTrans@1100485014();
    BEGIN
      IF SalesLineNo > 0 THEN
        EXIT;

      WITH SalesHeaderRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Invoice Proposal";
        "No." := '';
        VALIDATE("No.");
        "Plant Invoice" := TRUE;
        INSERT(TRUE);
        "Sell-to Customer No." := TransOrderRec."Internal Customer No.";
        VALIDATE("Sell-to Customer No.");
        "Job No." := '';
        "Service Order No." := '';
        "Rental Periode to Date" := RentalPeriodeToDate;
        "Posting Date" := PostingDate;
        Status := Status::Released;
        FillDefaultInvoiceLayoutCode();  //34413.n
        MODIFY;
        GetDefaultProjectElement();
      END;

      InvCounter := InvCounter + 1;
      SalesLineNo := 10000;
    END;

    PROCEDURE InsertSalesHeaderProjectTrans@1100485019();
    BEGIN
      IF SalesLineNo > 0 THEN
        EXIT;

      WITH SalesHeaderRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Invoice Proposal";
        "No." := '';
        "Plant Invoice" := TRUE;
        "Job No." := TransOrderRec."Project No.";
        "Service Order No." := '';
        VALIDATE("No.");
        INSERT(TRUE);
        "Rental Periode to Date" := RentalPeriodeToDate;
        "Posting Date" := PostingDate;
        Status := Status::Released;
        FillDefaultInvoiceLayoutCode();  //34413.n
        MODIFY;
        GetDefaultProjectElement();
      END;

      InvCounter := InvCounter + 1;
      SalesLineNo := 10000;
    END;

    PROCEDURE InsertSalesLineInventory@4();
    VAR
      PlantType@1100525001 : Record 11012551;
      TmpGenericTempTable@1100528803 : TEMPORARY Record 11020579;
      lvRentalStartDate@1210190000 : Date;
      lvRentalStartDate2@1100485002 : Date;
      lvEndDate@1100485005 : Date;
      lvRentalEndDate@1210190001 : Date;
      lvNewRateDate@1210190002 : Date;
      lvNewDiscDate@1100530000 : Date;
      lvDiscEndDate@1100530001 : Date;
      lvRateModified@1210190005 : Boolean;
      RentalQuantityDiscountModified@1100528804 : Boolean;
      lvLastPart@1100485003 : Boolean;
      lvRateType@1100485000 : Option;
      lvNoRentalPeriods@1210190003 : Decimal;
      lvRemainingPeriodsToInvoice@1210190004 : Decimal;
      lvExtraRentalPeriods@1100485001 : Decimal;
      lvRemainingExtraPeriods@1100485004 : Decimal;
      RentalDiscount@1100528800 : Decimal;
      RentalQuantityDiscount@1100528801 : Decimal;
    BEGIN
      "Plant Inventory".TESTFIELD("Plant Type");
      GetPlantAndPostingSetup("Plant Inventory"."Plant Type", "Plant Inventory"."Plant No.");

      PlantPostingSetup.TESTFIELD("Rental Account");

      lvRemainingPeriodsToInvoice := NumberRentalPeriods;
      lvRentalStartDate := StartDate;
      lvEndDate := EndDate;  //**11351  Elsewhere in this function use lvEndDate instead of 'EndDate'
      lvRemainingExtraPeriods := ExtraRentalPeriods;  //**11351

      //DP00536.sn mve

      "Plant Inventory".CALCFIELDS(Bulk);
      IF ("Plant Location"."Rate Type" = "Plant Location"."Rate Type"::Day) AND (NOT "Plant Inventory".Bulk) THEN
        SearchRate.FindRentalQuantityDiscountDates(
          "Plant Location".Code,'',"Plant Inventory"."Plant Type","Plant Inventory"."Plant No.",InventoryRec."Rental Start Date",TmpGenericTempTable);
      //DP00536.en

      REPEAT
        //**11351.sn
        IF (NumberRentalPeriods = 0) AND (ExtraRentalPeriods > 0) THEN BEGIN
          lvRateModified := FALSE;
          lvEndDate := "Plant Inventory"."Rental End Date";
          IF lvEndDate = 0D THEN
            lvEndDate := "Plant Inventory"."Removed on";
          lvRentalStartDate := lvEndDate;
        END ELSE BEGIN
        //**11351.en
          lvRateModified := SearchRate.RentalRateModifiedInPeriod("Plant Location".Code,
                                                                  "Plant Inventory"."Plant Type",
                                                                  "Plant Inventory"."Plant No.",
                                                                  lvRentalStartDate, lvEndDate, lvNewRateDate);

          //*C-026618.sn
          IF lvRateModified THEN
            lvDiscEndDate := lvNewRateDate - 1
          ELSE
            lvDiscEndDate := lvEndDate;

        //DP00536.sn mve
        TmpGenericTempTable.RESET;
        IF NOT TmpGenericTempTable.ISEMPTY THEN
          RentalQuantityDiscountModified := QuantityDiscountModifiedInPeriod(
            lvRentalStartDate, lvDiscEndDate, lvNewRateDate, RentalQuantityDiscount, TmpGenericTempTable);
        //DP00536.en

          IF SearchRate.RentalDiscountModifiedInPeriod("Plant Location".Code, '', "Plant Inventory"."Plant Type",
             "Plant Inventory"."Plant No.", lvRentalStartDate, lvDiscEndDate, lvNewDiscDate)
          THEN BEGIN
            IF lvRateModified OR RentalQuantityDiscountModified THEN BEGIN
              IF lvNewDiscDate < lvNewRateDate THEN
                lvNewRateDate := lvNewDiscDate;
            END ELSE BEGIN
              lvRateModified := TRUE;
              lvNewRateDate := lvNewDiscDate;
            END;
          END;
          //*C-026618.en

        END;
        IF lvRateModified OR RentalQuantityDiscountModified THEN BEGIN
          lvRentalEndDate := lvNewRateDate - 1;
          lvNoRentalPeriods :=
            CalculateRentalPeriodsCU.NumberRentalPeriods(
              "Plant Location",lvRentalStartDate,lvRentalEndDate,
              "Plant Inventory"."Plant Type","Plant Inventory"."Plant No.",lvRateType);
          IF Credit THEN
            lvNoRentalPeriods := -lvNoRentalPeriods;
        END ELSE BEGIN
          lvRentalEndDate := lvEndDate;
          lvNoRentalPeriods := lvRemainingPeriodsToInvoice;
        END;
        lvRemainingPeriodsToInvoice := lvRemainingPeriodsToInvoice - lvNoRentalPeriods;

        //* Determine last part as in case 'UNTIL' (NB: lvRentalStartDate not updated here yet therefore lvRentalStartDate2);
        lvRentalStartDate2 := lvRentalEndDate + 1;
        lvLastPart := (NOT lvRateModified AND NOT RentalQuantityDiscountModified) OR (lvRemainingPeriodsToInvoice = 0) OR (lvRentalStartDate2 > lvEndDate);

        //**11351.sn
        //* Process extra days at last part, only when 'Credit' start from first (evt. rest at last part)
        lvExtraRentalPeriods := 0;
        IF lvRemainingExtraPeriods > 0 THEN BEGIN
          IF lvLastPart THEN BEGIN
            lvExtraRentalPeriods := lvRemainingExtraPeriods;
            lvRemainingExtraPeriods := 0;
          END ELSE BEGIN
            //* If Credit then 'lvNoRentalPeriods' always negative (or zero), extra periods always positive
            IF Credit AND (lvNoRentalPeriods <> 0) THEN BEGIN
              IF lvNoRentalPeriods + lvRemainingExtraPeriods < 0 THEN
                lvExtraRentalPeriods := lvRemainingExtraPeriods
              ELSE
                lvExtraRentalPeriods := -lvNoRentalPeriods;  //* No invoice line will be created
              lvRemainingExtraPeriods := lvRemainingExtraPeriods - lvExtraRentalPeriods;
            END;
          END;
        END;
        //**11351.en

        //IF lvNoRentalPeriods <> 0 THEN BEGIN  //**11351.o
        IF (lvNoRentalPeriods + lvExtraRentalPeriods) <> 0 THEN BEGIN  //**11351.n
          SalesLineInit(FALSE);
          SalesLineRec."Relate to" := SalesLineRec."Relate to"::Rental;
          SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
          SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
          SalesLineRec.VALIDATE("No.", PlantPostingSetup."Rental Account");
          //SalesLineRec."Number of Time Units" := lvNoRentalPeriods;  //**11351.o
          SalesLineRec."Number of Time Units" := lvNoRentalPeriods + lvExtraRentalPeriods;  //**11351.n
          SalesLineRec.VALIDATE(Quantity,"Plant Inventory".Quantity);
          SalesLineRec.VALIDATE(
            "Unit Price", (SearchRate.Rate(
              "Plant Location".Code,"Plant Inventory"."Plant Type",
              "Plant Inventory"."Plant No.", "Plant Inventory"."Rate Code",lvRentalStartDate,0,2,''))
              *(1+(RentalQuantityDiscount/100))); //DP00536.n mve
          SalesLineRec.VALIDATE("Line Discount %", SearchRate.RentalDiscount
            ("Plant Location".Code,'',"Plant Inventory"."Plant Type","Plant Inventory"."Plant No.",lvRentalStartDate));
          SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
          SalesLineRec.VALIDATE("Unit of Measure Code",PlantRec."Unit of Measure");
          SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
          SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantRec."Gen. Prod. Posting Group");
          SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantRec."VAT Prod. Posting Group");
          SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
          SalesLineRec."Posting Group" := PlantPostingGrp;
          SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
          SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Plant Inventory";
          SalesLineRec."Plant Location" := "Plant Location".Code;
          SalesLineRec.VALIDATE("Plant Type", "Plant Inventory"."Plant Type");
          SalesLineRec.VALIDATE("Plant No.", "Plant Inventory"."Plant No.");
          SalesLineRec.Description := '';
          SalesLineRec."Description 2" := '';
          IF ("Plant Inventory"."Arrival Order Type" = "Plant Inventory"."Arrival Order Type"::"Plant Order") AND
             ("Plant Inventory"."Arrival Order" <> '') AND ("Plant Inventory"."Arrival Order Line" <> 0)
          THEN BEGIN
            IF OrderLineRec.GET("Plant Inventory"."Arrival Order", "Plant Inventory"."Arrival Order Line") THEN BEGIN
              SalesLineRec.Description := OrderLineRec.Description;
              SalesLineRec."Description 2" := OrderLineRec."Description 2";
            END;
          END;
          IF SalesLineRec.Description = '' THEN
            SalesLineRec.Description := "Plant Inventory".PlantDescription;
          IF SalesLineRec.Description = '' THEN BEGIN
            //Still empty then generate error message
            PlantType.GET("Plant Inventory"."Plant Type");
            PlantType.TESTFIELD(Description);
          END;

          SalesLineRec."Plant Rate Code" := "Plant Inventory"."Rate Code";
          SalesLineRec."Arrival Order Type" := "Plant Inventory"."Arrival Order Type";
          SalesLineRec."Arrival Order" := "Plant Inventory"."Arrival Order";
          SalesLineRec."Arrival Order Line" := "Plant Inventory"."Arrival Order Line";  //C00481
          SalesLineRec."Removal Order Type" := "Plant Inventory"."Removal Order Type";
          IF lvLastPart THEN BEGIN
            SalesLineRec."Removal Order" := "Plant Inventory"."Removal Order";
            SalesLineRec."Removal Order Line" := "Plant Inventory"."Removal Order Line";  //C00481
          END;
          SalesLineRec."Rental Period" := STRSUBSTNO('%1..%2', lvRentalStartDate, lvRentalEndDate);
          SalesLineRec."Rate Type" := "Plant Location"."Rate Type" + 1;
          SalesLineRec."Plant Rental First Invoiced" := RentalFirstInvoiced;  //* Mainly used in customization
          SalesLineRec."Plant Rental Split No." := RentalSplitNo;             //* (invoice / invoice attachments)
          RentalFirstInvoiced := FALSE;                                       //* to recognize these records for
          RentalSplitNo := RentalSplitNo + 1;                                 //* compression an balance quanty

          IF (SalesLineRec."Job No." <> '') AND
             ("Plant Inventory"."Arrival Order" <> '') AND ("Plant Inventory"."Arrival Order Line" <> 0)
          THEN BEGIN
            CASE "Plant Inventory"."Arrival Order Type" OF
              "Plant Inventory"."Arrival Order Type"::"Plant Order":
                BEGIN
                  //IF lvPlantOrderLineRec.GET("Plant Inventory"."Arrival Order", "Plant Inventory"."Arrival Order Line") THEN
                  //  FillSalesLineElement(lvPlantOrderLineRec.Element);  //Old  Now there is a flowfield of the element of the PO-Line
                  "Plant Inventory".CALCFIELDS(Element);  //* Element of the PO-Line
                  FillSalesLineElement("Plant Inventory".Element);
                END;
              "Plant Inventory"."Arrival Order Type"::ReturnedExit:
                FillSalesLineElement("Plant Inventory".GetElementReturnedExit());
            END;
          END;
          FillRateUnitOfMeasure(RateUnitType::"Plant Rental");
          FillSalesLineDim1WithPlantDep();
          SalesLineFinish;
          SalesLineRec.INSERT;

          SalesLineNo := SalesLineNo + 10000;
          LineCounter := LineCounter + 1;
        END;
        lvRentalStartDate := lvRentalEndDate + 1;
      UNTIL (NOT lvRateModified AND NOT RentalQuantityDiscountModified) OR (lvRemainingPeriodsToInvoice = 0) OR (lvRentalStartDate > lvEndDate);
    END;

    PROCEDURE InsertSalesLineSales@13();
    BEGIN
      SalesLineInit(FALSE);

      OrderLineRec.TESTFIELD("Plant Type");
      OrderLineRec.TESTFIELD(Description);
      GetPlantAndPostingSetup(OrderLineRec."Plant Type", OrderLineRec."No.");

      PlantPostingSetup.TESTFIELD("Sell Account");

      SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
      SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
      SalesLineRec.VALIDATE("No.", PlantPostingSetup."Sell Account");
      SalesLineRec.VALIDATE(Quantity,OrderLineRec.Quantity);
      SalesLineRec.VALIDATE("Unit Price",OrderLineRec."Sales Rate");
      IF PlantSetup."Discount Sales/Buy Back" THEN
        SalesLineRec.VALIDATE("Line Discount %","Plant Location"."Discount %");
      SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
      SalesLineRec.VALIDATE("Unit of Measure Code",PlantRec."Unit of Measure");
      SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
      SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantRec."Gen. Prod. Posting Group");
      SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantRec."VAT Prod. Posting Group");
      SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
      SalesLineRec."Posting Group" := PlantPostingGrp;
      SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Plant Order";
      SalesLineRec."Relate to" := SalesLineRec."Relate to"::Sales;
      SalesLineRec."Plant Location" := "Plant Location".Code;
      SalesLineRec.VALIDATE("Plant Type", OrderLineRec."Plant Type");
      SalesLineRec.VALIDATE("Plant No.", OrderLineRec."No.");
      SalesLineRec."Arrival Order Type" := SalesLineRec."Arrival Order Type"::"Plant Order";
      SalesLineRec."Arrival Order" := OrderLineRec."Plant Order No.";
      SalesLineRec."Arrival Order Line" := OrderLineRec."Line No.";  //C00481
      SalesLineRec."Shipment Date" := OrderLineRec."Transfer Date";
      SalesLineRec.Description := OrderLineRec.Description;
      SalesLineRec."Description 2" := OrderLineRec."Description 2";
      FillSalesLineElement(OrderLineRec.Element);
      FillRateUnitOfMeasure(RateUnitType::"Plant Sales/Buy Back");
      FillSalesLineDim1WithPlantDep();
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertSalesLineBuyBack@27();
    BEGIN
      SalesLineInit(FALSE);

      OrderLineRec.TESTFIELD("Plant Type");
      OrderLineRec.TESTFIELD(Description);
      GetPlantAndPostingSetup(OrderLineRec."Plant Type", OrderLineRec."No.");

      PlantPostingSetup.TESTFIELD("Buy Back Account");

      SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
      SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
      SalesLineRec.VALIDATE("No.", PlantPostingSetup."Buy Back Account");
      SalesLineRec.VALIDATE(Quantity,OrderLineRec.Quantity);
      SalesLineRec.VALIDATE("Unit Price",-OrderLineRec."Buy Back Rate");
      //* No discount for Buy Back  //19653.o
      IF PlantSetup."Discount Sales/Buy Back" THEN //19653.n  Also discount for Buy Back!, see call 19653
        SalesLineRec.VALIDATE("Line Discount %","Plant Location"."Discount %");
      SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
      SalesLineRec.VALIDATE("Unit of Measure Code",PlantRec."Unit of Measure");
      SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
      SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantRec."Gen. Prod. Posting Group");
      SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantRec."VAT Prod. Posting Group");
      SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
      SalesLineRec."Posting Group" := PlantPostingGrp;
      SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Plant Order";
      SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Buy Back";
      SalesLineRec."Plant Location" := "Plant Location".Code;
      SalesLineRec.VALIDATE("Plant Type", OrderLineRec."Plant Type");
      SalesLineRec.VALIDATE("Plant No.", OrderLineRec."No.");
      SalesLineRec."Removal Order Type" := SalesLineRec."Removal Order Type"::"Plant Order";
      SalesLineRec."Removal Order" := OrderLineRec."Plant Order No.";
      SalesLineRec."Removal Order Line" := OrderLineRec."Line No.";  //C00481
      SalesLineRec."Shipment Date" := OrderLineRec."Transfer Date";
      SalesLineRec.Description := OrderLineRec.Description;
      SalesLineRec."Description 2" := OrderLineRec."Description 2";
      FillSalesLineElement(OrderLineRec.Element);
      FillRateUnitOfMeasure(RateUnitType::"Plant Sales/Buy Back");
      FillSalesLineDim1WithPlantDep();
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertSalesLinePlantOrderItem@1100485000(IFactorDC@1100485000 : Integer);
    VAR
      GenPostSetupRec@1100485001 : Record 252;
      lvPriceCalcMgtCU@1100525000 : Codeunit 7000;
      lvPlantOrderItemBuyBack@1100485003 : Boolean;
      lvAccountNo@1100485002 : Code[20];
    BEGIN
      //* Factor: 1 = Sales (Type Arrival), -1 = Return (Type Removal)
      SalesLineInit(OrderItemLineRec.Type = OrderItemLineRec.Type::Text);
      IF OrderItemLineRec.Type <> OrderItemLineRec.Type::Text THEN BEGIN
        OrderItemLineRec.TESTFIELD(Description);

        ItemRec.GET(OrderItemLineRec."Item No.");
        ItemRec.TESTFIELD("Global Dimension 2 Code");
        ItemRec.TESTFIELD("Gen. Prod. Posting Group");
        ItemRec.TESTFIELD("VAT Prod. Posting Group");
        GenPostSetupRec.GET("Plant Location"."Gen. Bus. Posting Group", ItemRec."Gen. Prod. Posting Group");
        IF ItemRec."Sales/Buy-Back Item (Plant)" AND (IFactorDC = -1) THEN BEGIN // V/t-item and Removal (so repurchase v/t-item)
          GenPostSetupRec.TESTFIELD("Buy-Back Account (Plant Order)");
          lvAccountNo := GenPostSetupRec."Buy-Back Account (Plant Order)";
          lvPlantOrderItemBuyBack := TRUE;
        END ELSE BEGIN
          GenPostSetupRec.TESTFIELD("Sales Account");
          lvAccountNo := GenPostSetupRec."Sales Account";
        END;
        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        SalesLineRec."Item No." := OrderItemLineRec."Item No.";  //* No Validate!
        SalesLineRec."Variant Code" := OrderItemLineRec."Variant Code";  //* No Validate!
        SalesLineRec.VALIDATE("No.", lvAccountNo);
        SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", ItemRec."Global Dimension 1 Code");
        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", ItemRec."Global Dimension 2 Code");
        InsertOtherItemDimensions(SalesLineRec, ItemRec);  //* 14472
        SalesLineRec.VALIDATE(Quantity,(OrderItemLineRec.Quantity * IFactorDC));
        SalesLineRec.VALIDATE("Unit of Measure Code",OrderItemLineRec."Unit of Measure");
        //* First fill unit then price, otherwise std.price will be recalculated
        //SalesLineRec.VALIDATE("Unit Price",OrderItemLineRec."Unit Price"); //DP00690.o
        SalesLineRec.VALIDATE("Unit Price",OrderItemLineRec."Sales Rate");   //DP00690.n
        //IF NOT lvPlantOrderItemBuyBack THEN BEGIN //19653.o  Also discount for Buy Back!, see call 19653
          //* This determines highest % of different levels
          lvPriceCalcMgtCU.FindSalesLineLineDisc(SalesHeaderRec,SalesLineRec);
          //* Dan locatie korting (indien van toepassing) ook alleen als die hoger is.
          IF PlantSetup."Discount Items" AND ("Plant Location"."Discount %" > SalesLineRec."Line Discount %") THEN
            SalesLineRec.VALIDATE("Line Discount %","Plant Location"."Discount %");
        //END ELSE BEGIN                                    //19653.so
        //  //* No discount for Buy Back
        //  IF SalesLineRec."Line Discount %" <> 0 THEN
        //    SalesLineRec.VALIDATE("Line Discount %", 0);
        //END;                                              //19653.so
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
        SalesLineRec.VALIDATE("Gen. Prod. Posting Group",ItemRec."Gen. Prod. Posting Group");
        SalesLineRec.VALIDATE("VAT Prod. Posting Group",ItemRec."VAT Prod. Posting Group");
        SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
        SalesLineRec.UpdateUnitPrice(0);
        FillSalesLineElement(OrderItemLineRec.Element);
      END;
      SalesLineRec.Description := OrderItemLineRec.Description;
      SalesLineRec."Description 2" := OrderItemLineRec."Description 2";
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Plant Order";
      IF NOT lvPlantOrderItemBuyBack THEN
        SalesLineRec."Relate to" := SalesLineRec."Relate to"::Item
      ELSE
        SalesLineRec."Relate to" := SalesLineRec."Relate to"::ItemBuyBack;
      SalesLineRec."Plant Location" := "Plant Location".Code;
      IF (IFactorDC <> -1) THEN BEGIN
        SalesLineRec."Arrival Order Type" := SalesLineRec."Arrival Order Type"::"Plant Order";
        SalesLineRec."Arrival Order" := OrderItemLineRec."Plant Order No.";
        SalesLineRec."Arrival Order Line" := OrderItemLineRec."Line No.";  //C00481
        SalesLineRec."Shipment Date" := OrderToLocation."Transfer Date";
      END ELSE BEGIN
        SalesLineRec."Removal Order Type" := SalesLineRec."Removal Order Type"::"Plant Order";
        SalesLineRec."Removal Order" := OrderItemLineRec."Plant Order No.";
        SalesLineRec."Removal Order Line" := OrderItemLineRec."Line No.";  //C00481
        SalesLineRec."Shipment Date" := OrderFromLocation."Transfer Date";
      END;
      FillRateUnitOfMeasure(RateUnitType::" ");
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertSalesLinePlantCost@9(Arrival@11012000 : Boolean);
    BEGIN
      SalesLineInit(CostRec.Type = CostRec.Type::Text);

      IF CostRec.Type = CostRec.Type::Text THEN BEGIN
        SalesLineRec.Type := SalesLineRec.Type::" ";
        SalesLineRec."No." := CostRec."No.";
      END ELSE BEGIN
        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", CostRec."No.");
        FillGLandPostingGroups(CostRec.Type,CostRec."No.",CostRec."Plant Type",CostRec."Plant No.");
        SalesLineRec.VALIDATE(Quantity,CostRec.Quantity);
        SalesLineRec.VALIDATE("Unit Price",CostRec.Price);
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        SalesLineRec.UpdateUnitPrice(0);
        SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
        SalesLineRec.VALIDATE("Unit of Measure Code",CostRec."Unit of Measure");
        FillSalesLineElement(CostRec.Element);
      END;
      //SalesLineRec.Description := CostRec.Description;   Moved below, was overwritten by validations
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Plant Order";
      CASE CostRec.Type OF
        CostRec.Type::Hours:SalesLineRec."Relate to" := SalesLineRec."Relate to"::Hours;
        CostRec.Type::Transport:SalesLineRec."Relate to" := SalesLineRec."Relate to"::Transport;
        CostRec.Type::"Sundry Costs":SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Sundry Costs";
        CostRec.Type::Damage: SalesLineRec."Relate to" := SalesLineRec."Relate to"::Damage;
      END;
      SalesLineRec."Plant Location" := "Plant Location".Code;
      IF (CostRec."Plant Type" <> '') AND (CostRec.Type <> CostRec.Type::Text) THEN BEGIN
        SalesLineRec.VALIDATE("Plant Type", CostRec."Plant Type");
        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", CostRec."No."); //Validate Plant Type changes Shortcut dim2, so reset.
        CostRec.CALCFIELDS(Bulk);
        IF CostRec.Bulk AND (CostRec."Plant No." = '') THEN
          SalesLineRec."Plant No." := '0'
        ELSE
          SalesLineRec.VALIDATE("Plant No.", CostRec."Plant No.");
      END;
      //*16001.sn  For plant independent cost the Cost Center (department / "Global Dimension 1 Code") of de Cost Object
      IF (CostRec."Plant Type" = '') AND (CostRec.Type <> CostRec.Type::Text) AND (CostRec."No." <> '') THEN BEGIN
        IF DimValRec.GET(GLSetupRec."Global Dimension 2 Code", CostRec."No.") THEN BEGIN
          IF DimValRec."Global Dimension 1 Code" <> '' THEN
            SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", DimValRec."Global Dimension 1 Code");
        END;
      END;
      //*16001.sn
      IF Arrival THEN BEGIN
        SalesLineRec."Arrival Order Type" := SalesLineRec."Arrival Order Type"::"Plant Order";
        SalesLineRec."Arrival Order" := CostRec."Plant Order No.";
        SalesLineRec."Arrival Order Line" := CostRec."Line No.";  //C00481
      END ELSE BEGIN
        SalesLineRec."Removal Order Type" := SalesLineRec."Removal Order Type"::"Plant Order";
        SalesLineRec."Removal Order" := CostRec."Plant Order No.";
        SalesLineRec."Removal Order Line" := CostRec."Line No.";  //C00481
      END;
      SalesLineRec."Shipment Date" := CostRec.Date;

      IF SalesLineRec.Type <> SalesLineRec.Type::" " THEN
        IF SalesLineRec.Description = '' THEN
          CostRec.TESTFIELD(Description);

      IF CostRec.Description <> '' THEN BEGIN
        SalesLineRec.Description := CostRec.Description;
        SalesLineRec."Description 2" := CostRec."Description 2";  //DP00183
      END;
      FillRateUnitOfMeasure(RateUnitType::" ");
      FillSalesLineDim1WithPlantDep(); //C014622
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertSalesLineTransportOrder@1100485006(IMode@11012000 : Code[10]);
    VAR
      MeansOfTransport@1100409000 : Record 11020503;
      lvVatBusPostGroup@1100485000 : Code[10];
      lvTransOrderNo@1100485001 : Code[20];
    BEGIN
      SalesLineInit(TransOrderCostRec.Type = TransOrderCostRec.Type::Text);

      CASE IMode OF
        'FROM LOC.':
          lvVatBusPostGroup := "Plant Location"."VAT Bus. Posting Group";
        'TO LOC.':
          lvVatBusPostGroup := "Plant Location"."VAT Bus. Posting Group";
        'PROJECT':
          BEGIN
            ProjRec.GET(TransOrderRec."Project No.");
            lvVatBusPostGroup := ProjRec."VAT Bus. Posting Group";
          END;
        'INTERNAL':
          BEGIN
            CustomerRec.GET(TransOrderRec."Internal Customer No.");
            lvVatBusPostGroup := CustomerRec."VAT Bus. Posting Group";
          END;
        ELSE
          EXIT;
      END;

      ShipAgentRec.GET(TransOrderRec."Shipping Agent");

      IF TransOrderCostRec.Type = TransOrderCostRec.Type::Text THEN BEGIN
        SalesLineRec.Type := SalesLineRec.Type::" ";
        SalesLineRec."No." := TransOrderCostRec."No.";
      END ELSE BEGIN
        TransOrderCostRec.TESTFIELD(Description);

        //DP00672.sn
        IF NOT ShipAgentRec.External THEN BEGIN
          IF MeansOfTransport.GET(TransOrderRec."Shipping Agent", TransOrderRec."Means of Transport") THEN BEGIN
            IF MeansOfTransport."Plant Type" <> '' THEN BEGIN
              SalesLineRec."Plant Type" := MeansOfTransport."Plant Type";  // No validate on plant type/no.
              IF MeansOfTransport."Plant No." <> '' THEN
                SalesLineRec."Plant No." := MeansOfTransport."Plant No.";
            END;
          END;
        END;
        //DP00672.en
        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        FillGLandPostingGroupsTrans(TransOrderCostRec.Type,ShipAgentRec.External,IMode);
        SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", ShipAgentRec."Cost Centre");
        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", TransOrderCostRec."No.");
        SalesLineRec.VALIDATE(Quantity,TransOrderCostRec.Quantity * (TransCostPercentage/100));
        SalesLineRec.VALIDATE("Unit Price",TransOrderCostRec.Price);
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        SalesLineRec.UpdateUnitPrice(0);
        SalesLineRec.VALIDATE("VAT Bus. Posting Group", lvVatBusPostGroup);
        SalesLineRec.VALIDATE("Unit of Measure Code",TransOrderCostRec."Unit of Measure");
        //*16001.sn  For plant independent cost the Cost Center (department / "Global Dimension 1 Code") of de Cost Object,
        //*          only if Cost Centre of the Shipping Agent is empty
        IF (ShipAgentRec."Cost Centre" = '') AND (TransOrderCostRec."No." <> '') THEN BEGIN
          IF DimValRec.GET(GLSetupRec."Global Dimension 2 Code", TransOrderCostRec."No.") THEN BEGIN
            IF DimValRec."Global Dimension 1 Code" <> '' THEN
              SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", DimValRec."Global Dimension 1 Code");
          END;
        END;
        //*16001.sn
      END;
      SalesLineRec.Description := TransOrderCostRec.Description;
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Transport Order";
      CASE TransOrderCostRec.Type OF
        TransOrderCostRec.Type::Transport: SalesLineRec."Relate to" := SalesLineRec."Relate to"::Transport;
        TransOrderCostRec.Type::"Load/Unload": SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Load/Unload";
      END;

      IF PlantSetup."Lnk TO Cost on Main TO allowed" AND
        (TransOrderCostRec.Type = TransOrderCostRec.Type::"Load/Unload") AND
        (TransOrderCostRec."Linked Transport Order (Cost)" <> '')
      THEN
        lvTransOrderNo := TransOrderCostRec."Linked Transport Order (Cost)"
      ELSE
        lvTransOrderNo := TransOrderCostRec."Transport Order No.";

      CASE IMode OF
        'FROM LOC.':
          BEGIN
            SalesLineRec."Plant Location" := "Plant Location".Code;
            SalesLineRec."Removal Order Type" := SalesLineRec."Removal Order Type"::"Transport Order";
            SalesLineRec."Removal Order" := lvTransOrderNo;
            SalesLineRec."Removal Order Line" := TransOrderCostRec."Line No.";  //C00481
          END;
        'TO LOC.':
          BEGIN
            SalesLineRec."Plant Location" := "Plant Location".Code;
            SalesLineRec."Arrival Order Type" := SalesLineRec."Arrival Order Type"::"Transport Order";
            SalesLineRec."Arrival Order" := lvTransOrderNo;
            SalesLineRec."Arrival Order Line" := TransOrderCostRec."Line No.";  //C00481
          END;
        'PROJECT',
        'INTERNAL':
          BEGIN
            //* NB: At posting of Plant Invoice (Origin 'Transport Order') is 'Location' and 'Project' empty, this indicates that
            //*     it concerns an internal customer to charge. This in connection with cost posting ('Internal Bal. Acc Cost').
            SalesLineRec."Plant Location" := '';
            IF TransOrderRec.Type IN [TransOrderRec.Type::Arrival, TransOrderRec.Type::"Other Transfers"] THEN BEGIN
              SalesLineRec."Arrival Order Type" := SalesLineRec."Arrival Order Type"::"Transport Order";
              SalesLineRec."Arrival Order" := lvTransOrderNo;
              SalesLineRec."Arrival Order Line" := TransOrderCostRec."Line No.";  //C00481
            END;
            IF TransOrderRec.Type IN [TransOrderRec.Type::Removal, TransOrderRec.Type::"Other Transfers"] THEN BEGIN
              SalesLineRec."Removal Order Type" := SalesLineRec."Removal Order Type"::"Transport Order";
              SalesLineRec."Removal Order" := lvTransOrderNo;
              SalesLineRec."Removal Order Line" := TransOrderCostRec."Line No.";  //C00481
            END;
          END;
      END;
      SalesLineRec."Shipment Date" := TransOrderRec."Transport Date";
      FillRateUnitOfMeasure(RateUnitType::" ");
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertSalesLineExitPlant@2(lExitOrderRec@11012000 : Record 11012559);
    VAR
      lvTextBPM@1100485000 : TextConst 'ENU=TPM';
      lvText001@1100485001 : TextConst 'ENU=(%1-%2) has a %3, for TPM only 0% allowed';
    BEGIN
      SalesLineInit(ExitLineRec.Type = ExitLineRec.Type::Text);

      SalesLineRec."Plant Location" := "Plant Location".Code;
      IF ExitLineRec.Type = ExitLineRec.Type::Text THEN BEGIN
        SalesLineRec.Type := SalesLineRec.Type::" ";
        SalesLineRec."No." := ExitLineRec."No.";
      END ELSE BEGIN
        ExitLineRec.TESTFIELD("Plant Type");
        ExitLineRec.TESTFIELD(Description);
        GetPlantAndPostingSetup(ExitLineRec."Plant Type", ExitLineRec."No.");

        CASE lExitOrderRec.Type OF
          lExitOrderRec.Type::Sales:PlantPostingSetup.TESTFIELD("Sales Account");
          lExitOrderRec.Type::Missing:PlantPostingSetup.TESTFIELD("Missing Account");
          lExitOrderRec.Type::Scrap:PlantPostingSetup.TESTFIELD("Scrap Account");
        END;

        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        CASE lExitOrderRec.Type OF
          lExitOrderRec.Type::Sales:SalesLineRec."No." := PlantPostingSetup."Sales Account";
          lExitOrderRec.Type::Missing:SalesLineRec."No." := PlantPostingSetup."Missing Account";
          lExitOrderRec.Type::Scrap:SalesLineRec."No." := PlantPostingSetup."Scrap Account";
        END;
        //mg.so, 04-03-11: 26003
      //  IF (lExitOrderRec.Type = lExitOrderRec.Type::Missing) AND (PlantSetup."Fixed Cost Object Loss" <> '') THEN
      //    SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantSetup."Fixed Cost Object Loss")
      //  ELSE
      //    SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
        //mg.eo, 04-03-11: 26003
        SalesLineRec.VALIDATE("No.");
        SalesLineRec.VALIDATE(Quantity,ExitLineRec.Quantity);
        SalesLineRec.VALIDATE("Unit Price",ExitLineRec.Price);
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        SalesLineRec.VALIDATE("Unit of Measure Code",PlantRec."Unit of Measure");
        SalesLineRec.VALIDATE("Plant Type", ExitLineRec."Plant Type");
        SalesLineRec.VALIDATE("Plant No.", ExitLineRec."No.");
        SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
        SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantRec."Gen. Prod. Posting Group");
        SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantRec."VAT Prod. Posting Group");
        IF "Plant Location".Code <> '' THEN
          SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
        SalesLineRec."Posting Group" := PlantPostingGrp;

        //mg.sn, 04-03-11: 26003   Validate on "Plant Type" overwrites "Shortcut Dim 2 Code"
        IF (lExitOrderRec.Type = lExitOrderRec.Type::Missing) AND (PlantSetup."Fixed Cost Object Loss" <> '') THEN
          SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantSetup."Fixed Cost Object Loss")
        ELSE
          SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
        //mg.en, 04-03-11: 26003

        SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
        FillSalesLineElement(ExitLineRec.Element);  //*C005404
      END;
      SalesLineRec.Description := ExitLineRec.Description;
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Exit Order";
      CASE lExitOrderRec.Type OF
        lExitOrderRec.Type::Sales:   SalesLineRec."Relate to" := SalesLineRec."Relate to"::Sales;
        lExitOrderRec.Type::Missing: SalesLineRec."Relate to" := SalesLineRec."Relate to"::Missing;
        lExitOrderRec.Type::Scrap:   SalesLineRec."Relate to" := SalesLineRec."Relate to"::Scrap;
      END;
      SalesLineRec."Removal Order Type" := SalesLineRec."Removal Order Type"::"Exit-order";
      SalesLineRec."Removal Order" := ExitLineRec."Exit-order No.";
      SalesLineRec."Removal Order Line" := ExitLineRec."Line No.";  //C00481
      SalesLineRec."Shipment Date" := ExitLineRec."Exit-date";

      FillRateUnitOfMeasure(RateUnitType::" ");
      FillSalesLineDim1WithPlantDep();
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;

      IF ExitLineRec."BPM Amount" <> 0 THEN BEGIN  //* Extra sales line for BPM
        ExitLineRec.CALCFIELDS(Bulk);
        ExitLineRec.TESTFIELD(Bulk, FALSE);
        PlantSetup.TESTFIELD("VAT Prod. Posting Group BPM");
        //
        SalesLineRec."Line No." := SalesLineRec."Line No." + 1;
        SalesLineRec.SuspendUpdateVATAmounts(TRUE);
        SalesLineRec.VALIDATE(Quantity,1);
        SalesLineRec.VALIDATE("Unit Price",ExitLineRec."BPM Amount");
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        SalesLineRec.VALIDATE("VAT Prod. Posting Group", PlantSetup."VAT Prod. Posting Group BPM");
        IF SalesLineRec."VAT %" <> 0 THEN
          PlantSetup.FIELDERROR("VAT Prod. Posting Group BPM", STRSUBSTNO(lvText001,
            SalesLineRec."VAT Bus. Posting Group",  SalesLineRec."VAT Prod. Posting Group", SalesLineRec.FIELDCAPTION("VAT %")));
        SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
        SalesLineRec.Description := lvTextBPM;
        SalesLineFinish;
        SalesLineRec.INSERT;
        LineCounter := LineCounter + 1;
      END;
    END;

    PROCEDURE InsertSalesLineExitCost@14();
    BEGIN
      SalesLineInit(ExitCostRec.Type = ExitCostRec.Type::Text);

      IF ExitCostRec.Type = ExitCostRec.Type::Text THEN BEGIN
        SalesLineRec.Type := SalesLineRec.Type::" ";
        SalesLineRec."No." := ExitCostRec."No.";
      END ELSE BEGIN
        ExitCostRec.TESTFIELD(Description);
        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", ExitCostRec."No.");
        FillGLandPostingGroups(ExitCostRec.Type,ExitCostRec."No.",'','');
        SalesLineRec.VALIDATE(Quantity,ExitCostRec.Quantity);
        SalesLineRec.VALIDATE("Unit Price",ExitCostRec.Price);
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        IF "Plant Location".Code <> '' THEN
          SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
        SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
        SalesLineRec.VALIDATE("Unit of Measure Code",ExitCostRec."Unit of Measure");
        //DP00241.sn (19918)  As in InsertSalesLinePlantCost (Plant Order Cost)
        IF (ExitCostRec."Plant Type" <> '') THEN BEGIN
          SalesLineRec.VALIDATE("Plant Type", ExitCostRec."Plant Type");
          SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", ExitCostRec."No."); //Validate Plant Type changes Shortcut dim2, so reset.
          ExitCostRec.CALCFIELDS(Bulk);
          IF ExitCostRec.Bulk AND (ExitCostRec."Plant No." = '') THEN
            SalesLineRec."Plant No." := '0'
          ELSE
            SalesLineRec.VALIDATE("Plant No.", ExitCostRec."Plant No.");
        END;
        //DP00241.en
        //*16001.sn  For plant independent cost the Cost Center (department / "Global Dimension 1 Code") of de Cost Object
        IF (ExitCostRec."Plant Type" = '') AND (ExitCostRec."No." <> '') THEN BEGIN  //DP00241.c (19918)
          IF DimValRec.GET(GLSetupRec."Global Dimension 2 Code", ExitCostRec."No.") THEN BEGIN
            IF DimValRec."Global Dimension 1 Code" <> '' THEN
              SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", DimValRec."Global Dimension 1 Code");
          END;
        END;
        //*16001.sn
        FillSalesLineElement(ExitCostRec.Element);  //*C005404
      END;
      SalesLineRec.Description := ExitCostRec.Description;
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Exit Order";
      CASE ExitCostRec.Type OF
        ExitCostRec.Type::Hours:SalesLineRec."Relate to" := SalesLineRec."Relate to"::Hours;
        ExitCostRec.Type::Transport:SalesLineRec."Relate to" := SalesLineRec."Relate to"::Transport;
        ExitCostRec.Type::"Sundry Costs":SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Sundry Costs";
        ExitCostRec.Type::Damage: SalesLineRec."Relate to" := SalesLineRec."Relate to"::Damage;  //DP00559.n (C005755)
      END;
      SalesLineRec."Plant Location" := "Plant Location".Code;
      SalesLineRec."Removal Order Type" := SalesLineRec."Removal Order Type"::"Exit-order";
      SalesLineRec."Removal Order" := ExitCostRec."Exit-order No.";
      SalesLineRec."Removal Order Line" := ExitCostRec."Line No.";  //C00481
      SalesLineRec."Shipment Date" := ExitCostRec."Exit-date";
      FillRateUnitOfMeasure(RateUnitType::" ");
      FillSalesLineDim1WithPlantDep(); //C014622
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertSalesLineReturnedLoss@1100525005(lReturnLossOrderRec@11012000 : Record 11012655);
    VAR
      lvTextBPM@1100485000 : TextConst 'ENU=TPM';
      lvText001@1100485001 : TextConst 'ENU=(%1-%2) has a %3, for TPM only 0% allowed';
    BEGIN
      SalesLineInit(ReturnLossOrderLineRec.Type = ReturnLossOrderLineRec.Type::Text);

      SalesLineRec."Plant Location" := "Plant Location".Code;
      IF ReturnLossOrderLineRec.Type = ReturnLossOrderLineRec.Type::Text THEN BEGIN
        SalesLineRec.Type := SalesLineRec.Type::" ";
        SalesLineRec."No." := ReturnLossOrderLineRec."No.";
      END ELSE BEGIN
        ReturnLossOrderLineRec.TESTFIELD("Plant Type");
        ReturnLossOrderLineRec.TESTFIELD(Description);

        GetPlantAndPostingSetup(ReturnLossOrderLineRec."Plant Type", ReturnLossOrderLineRec."No.");

        PlantPostingSetup.TESTFIELD("Missing Account");

        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        SalesLineRec."No." := PlantPostingSetup."Missing Account";
        IF (PlantSetup."Fixed Cost Object Loss" <> '') THEN
          SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantSetup."Fixed Cost Object Loss")
        ELSE
          SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
        SalesLineRec.VALIDATE("No.");
        SalesLineRec.VALIDATE(Quantity,-ReturnLossOrderLineRec.Quantity); //Qty negative
        SalesLineRec.VALIDATE("Unit Price",ReturnLossOrderLineRec.Price);
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        SalesLineRec.VALIDATE("Unit of Measure Code",PlantRec."Unit of Measure");
        SalesLineRec.VALIDATE("Plant Type", ReturnLossOrderLineRec."Plant Type");
        SalesLineRec.VALIDATE("Plant No.", ReturnLossOrderLineRec."No.");
        SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
        SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantRec."Gen. Prod. Posting Group");
        SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantRec."VAT Prod. Posting Group");
        IF "Plant Location".Code <> '' THEN
          SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
        SalesLineRec."Posting Group" := PlantPostingGrp;
        SalesLineRec.UpdateUnitPrice(0);
      END;
      SalesLineRec.Description := ReturnLossOrderLineRec.Description;
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Returned Loss";
      SalesLineRec."Relate to" := SalesLineRec."Relate to"::Missing;
      SalesLineRec."Arrival Order Type" := SalesLineRec."Arrival Order Type"::"Returned Loss";
      SalesLineRec."Arrival Order" := ReturnLossOrderLineRec."Returned Loss Order No.";
      SalesLineRec."Arrival Order Line" := ReturnLossOrderLineRec."Line No.";  //C00481
      SalesLineRec."Shipment Date" := lReturnLossOrderRec."Return Date";

      FillRateUnitOfMeasure(RateUnitType::" ");
      FillSalesLineDim1WithPlantDep();
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertDebitCorrSalesLine@5();
    BEGIN
      SalesLineInit(CorrLineRec.Type = CorrLineRec.Type::Text);

      IF CorrLineRec.Type = CorrLineRec.Type::Text THEN BEGIN
        SalesLineRec.Type := SalesLineRec.Type::" ";
        SalesLineRec."No." := CorrLineRec."No.";
      END ELSE BEGIN
        CorrLineRec.TESTFIELD("Plant Type");
        CorrLineRec.TESTFIELD(Description);
        GetPlantAndPostingSetup(CorrLineRec."Plant Type", CorrLineRec."No.");

        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        CASE CorrLineRec."Debit Rental Type" OF
          CorrLineRec."Debit Rental Type"::Rental:
            BEGIN
              SalesLineRec."Relate to":= SalesLineRec."Relate to"::Rental;
              PlantPostingSetup.TESTFIELD("Rental Account");
              SalesLineRec.VALIDATE("No.", PlantPostingSetup."Rental Account");
              SalesLineRec."Number of Time Units" := CorrLineRec."Debit No. of Rental Periods";
            END;
          CorrLineRec."Debit Rental Type"::Sales:
            BEGIN
              SalesLineRec."Relate to" := SalesLineRec."Relate to"::Sales;
              PlantPostingSetup.TESTFIELD("Sell Account");
              SalesLineRec.VALIDATE("No.", PlantPostingSetup."Sell Account");
            END;
          CorrLineRec."Debit Rental Type"::"Buy Back":
            BEGIN
              SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Buy Back";
              PlantPostingSetup.TESTFIELD("Buy Back Account");
              SalesLineRec.VALIDATE("No.", PlantPostingSetup."Buy Back Account");
            END;
          ELSE
            CorrLineRec.FIELDERROR("Debit Rental Type");
        END;
        SalesLineRec.VALIDATE(Quantity,CorrLineRec.Quantity);
        SalesLineRec.VALIDATE("Unit Price",CorrLineRec."Debit Rate");
        { Niet meer testen, als op correctie regell korting % gevulld dan deze altijd gebruiken
        IF (NOT (SalesLineRec."Relate to" IN [SalesLineRec."Relate to"::Sales,SalesLineRec."Relate to"::"Buy Back"])) OR
           ((SalesLineRec."Relate to" = SalesLineRec."Relate to"::Sales) AND PlantSetup."Discount Sales/Buy Back")
        THEN
        }
          SalesLineRec.VALIDATE("Line Discount %",CorrLineRec."Debit Discount %");
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        SalesLineRec.VALIDATE("Unit of Measure Code",PlantRec."Unit of Measure");
        SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
        SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantRec."Gen. Prod. Posting Group");
        SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantRec."VAT Prod. Posting Group");
        SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
        SalesLineRec."Posting Group" := PlantPostingGrp;
        SalesLineRec."Plant Location" := "Plant Location".Code;
        SalesLineRec.VALIDATE("Plant Type", CorrLineRec."Plant Type");
        SalesLineRec.VALIDATE("Plant No.", CorrLineRec."No.");
        SalesLineRec."Plant Rate Code" := CorrLineRec."Debit Rate Code";
        IF CorrLineRec."Debit Rental Type" = CorrLineRec."Debit Rental Type"::Rental THEN
          SalesLineRec."Rental Period" := STRSUBSTNO('%1..%2',CorrLineRec."Starting Date",CorrLineRec."Ending Date")
        ELSE
          SalesLineRec."Shipment Date" := CorrLineRec."Starting Date";
        SalesLineRec."Rate Type" := CorrLineRec."Debit Rate Type";
        SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
        FillSalesLineElement(CorrLineRec."Debit Element");  //DP00241.n (C004118)
      END;
      SalesLineRec.Description := CorrLineRec.Description;
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Rental Correction";
      SalesLineRec."Arrival Order Type" := SalesLineRec."Arrival Order Type"::"Rental Correction";
      SalesLineRec."Arrival Order" := CorrLineRec."Rental  Correction No.";
      SalesLineRec."Arrival Order Line" := CorrLineRec."Line No.";  //C00481
      IF CorrLineRec."Debit Rental Type" = CorrLineRec."Debit Rental Type"::Rental THEN
        FillRateUnitOfMeasure(RateUnitType::"Plant Rental")
      ELSE
        FillRateUnitOfMeasure(RateUnitType::"Plant Sales/Buy Back");
      FillSalesLineDim1WithPlantDep();
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertSalesLineCreditCorr@26();
    BEGIN
      SalesLineInit(CorrLineRec.Type = CorrLineRec.Type::Text);

      SalesLineRec."Plant Location" := "Plant Location".Code;
      IF CorrLineRec.Type = CorrLineRec.Type::Text THEN BEGIN
        SalesLineRec.Type := SalesLineRec.Type::" ";
        SalesLineRec."No." := CorrLineRec."No.";
      END ELSE BEGIN
        CorrLineRec.TESTFIELD("Plant Type");
        CorrLineRec.TESTFIELD(Description);
        GetPlantAndPostingSetup(CorrLineRec."Plant Type", CorrLineRec."No.");

        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        CASE CorrLineRec."Credit Rental Type" OF
          CorrLineRec."Credit Rental Type"::Rental:
            BEGIN
              SalesLineRec."Relate to" := SalesLineRec."Relate to"::Rental;
              PlantPostingSetup.TESTFIELD("Rental Account");
              SalesLineRec.VALIDATE("No.", PlantPostingSetup."Rental Account");
              SalesLineRec."Number of Time Units" := -CorrLineRec."Credit No. of Rental Periods";
            END;
          CorrLineRec."Credit Rental Type"::Sales:
            BEGIN
              SalesLineRec."Relate to" := SalesLineRec."Relate to"::Sales;
              PlantPostingSetup.TESTFIELD("Sell Account");
              SalesLineRec.VALIDATE("No.", PlantPostingSetup."Sell Account");
            END;
          CorrLineRec."Credit Rental Type"::"Buy Back":
            BEGIN
              SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Buy Back";
              PlantPostingSetup.TESTFIELD("Buy Back Account");
              SalesLineRec.VALIDATE("No.", PlantPostingSetup."Buy Back Account");
            END;
          ELSE
            CorrLineRec.FIELDERROR("Credit Rental Type");
        END;
        IF (CorrLineRec."Credit Rental Type" = CorrLineRec."Credit Rental Type"::Rental) AND
          (SalesLineRec."Number of Time Units" <> 0)
        THEN
          SalesLineRec.VALIDATE(Quantity, CorrLineRec.Quantity)
        ELSE
          SalesLineRec.VALIDATE(Quantity, -CorrLineRec.Quantity);
        SalesLineRec.VALIDATE("Unit Price",CorrLineRec."Credit Rate");
        { Niet meer testen, als op correctie regell korting % gevulld dan deze altijd gebruiken
        IF (NOT (SalesLineRec."Relate to" IN [SalesLineRec."Relate to"::Sales,SalesLineRec."Relate to"::"Buy Back"])) OR
           ((SalesLineRec."Relate to" = SalesLineRec."Relate to"::Sales) AND PlantSetup."Discount Sales/Buy Back")
        THEN
        }
          SalesLineRec.VALIDATE("Line Discount %",CorrLineRec."Credit Discount %");
        SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
        SalesLineRec.VALIDATE("Unit of Measure Code",PlantRec."Unit of Measure");
        SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
        SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantRec."Gen. Prod. Posting Group");
        SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantRec."VAT Prod. Posting Group");
        SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
        SalesLineRec."Posting Group" := PlantPostingGrp;
        SalesLineRec.VALIDATE("Plant Type", CorrLineRec."Plant Type");
        SalesLineRec.VALIDATE("Plant No.", CorrLineRec."No.");
        SalesLineRec."Plant Rate Code" := CorrLineRec."Credit Rate Code";
        IF CorrLineRec."Credit Rental Type" = CorrLineRec."Credit Rental Type"::Rental THEN
          SalesLineRec."Rental Period" := STRSUBSTNO('%1..%2',CorrLineRec."Starting Date",CorrLineRec."Ending Date")
        ELSE
          SalesLineRec."Shipment Date" := CorrLineRec."Starting Date";
        SalesLineRec."Rate Type" := CorrLineRec."Credit Rate Type";
        SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
        FillSalesLineElement(CorrLineRec."Credit Element");  //DP00241.n (C004118)
      END;
      SalesLineRec.Description := CorrLineRec.Description;
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Rental Correction";
      SalesLineRec."Removal Order Type" := SalesLineRec."Removal Order Type"::"Rental Correction";
      SalesLineRec."Removal Order" := CorrLineRec."Rental  Correction No.";
      SalesLineRec."Removal Order Line" := CorrLineRec."Line No.";  //C00481
      IF CorrLineRec."Credit Rental Type" = CorrLineRec."Credit Rental Type"::Rental THEN
        FillRateUnitOfMeasure(RateUnitType::"Plant Rental")
      ELSE
        FillRateUnitOfMeasure(RateUnitType::"Plant Sales/Buy Back");
      FillSalesLineDim1WithPlantDep();
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertHoursSalesLine@1210190000(IDate@1100485000 : Date;IHours@1100485001 : Decimal;IUnitPrice@1100485002 : Decimal);
    VAR
      lvEmplRec@1100485003 : Record 5200;
    BEGIN
      SalesLineInit(FALSE);

      SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
      GetPlantAndPostingSetup(PlantHourLine."Plant Type", PlantHourLine."Plant No.");
      IF (PlantHourLine.Type = PlantHourLine.Type::Expenses) THEN BEGIN
        PlantPostingSetup.TESTFIELD("Hours Expenses Account");
        IF PlantHourLine."Employee No." <> '' THEN
          lvEmplRec.GET(PlantHourLine."Employee No.");
        SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Sundry Costs";
        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantHourLine."Cost Object");
        SalesLineRec.VALIDATE("No.", PlantPostingSetup."Hours Expenses Account");
      END ELSE BEGIN
        PlantPostingSetup.TESTFIELD("Hours Revenues Account");
        SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Plant Hours";
        SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", PlantRec."Cost Object");
        SalesLineRec.VALIDATE("No.", PlantPostingSetup."Hours Revenues Account");
      END;

      //SalesLineRec."Relate to" := SalesLineRec."Relate to"::"Plant Hours";
      //SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
      //SalesLineRec."Shortcut Dimension 2 Code" := PlantRec."Cost Object";
      //SalesLineRec.VALIDATE("No.", PlantPostingSetup."Hours Revenues Account");
      SalesLineRec."Number of Time Units" := 0;
      SalesLineRec.VALIDATE(Quantity,IHours);
      //SalesLineRec.VALIDATE("Unit Price", PlantHourLine.GetUnitPrice);
      SalesLineRec.VALIDATE("Unit Price", IUnitPrice);
      IF (PlantSetup."Discount Plant Hours") AND (PlantHourLine.Type = PlantHourLine.Type::Hours) THEN
        SalesLineRec.VALIDATE("Line Discount %","Plant Location"."Discount %");
      SalesLineRec."Amount (LCY)" := SalesLineRec.Amount;
      IF (PlantHourLine.Type = PlantHourLine.Type::Expenses) THEN BEGIN
        PlantHourLine.CALCFIELDS("Cost Object Description", "Cost Object Unit of Measure");
        SalesLineRec.Description := PlantHourLine."Cost Object Description";
        SalesLineRec.VALIDATE("Unit of Measure Code",PlantHourLine."Cost Object Unit of Measure");
      END ELSE BEGIN
        IF PlantNoRec.GET(PlantHourLine."Plant Type",PlantHourLine."Plant No.") THEN
          SalesLineRec.Description := PlantNoRec.Description;
        SalesLineRec.VALIDATE("Unit of Measure Code",PlantSetup."Plant Hours Unit of Measure");
      END;
      SalesLineRec."Gen. Bus. Posting Group" := "Plant Location"."Gen. Bus. Posting Group";
      SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantRec."Gen. Prod. Posting Group");
      SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantRec."VAT Prod. Posting Group");
      SalesLineRec.VALIDATE("VAT Bus. Posting Group","Plant Location"."VAT Bus. Posting Group");
      SalesLineRec."Posting Group" := PlantPostingGrp;
      SalesLineRec.UpdateUnitPrice(0);  //db, 12-09-03: extra argument CalledByFieldNo
      SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Plant Hours";
      SalesLineRec."Plant Location" := "Plant Location".Code;
      SalesLineRec.VALIDATE("Plant Type", PlantHourLine."Plant Type");
      SalesLineRec.VALIDATE("Plant No.", PlantHourLine."Plant No.");
      //Check Description after validating plant type and no.
      IF SalesLineRec.Description = '' THEN
        IF (PlantHourLine.Type = PlantHourLine.Type::Expenses) THEN
          PlantHourLine.TESTFIELD("Cost Object Description")
        ELSE BEGIN
          PlantNoRec."Plant Type" := PlantHourLine."Plant Type";
          PlantNoRec."No." := PlantHourLine."Plant No.";
          PlantNoRec.Description := '';
          PlantNoRec.TESTFIELD(Description);
        END;
      //
      SalesLineRec."Plant Rate Code" := PlantHourLine."Rate Code";
      SalesLineRec."Rental Period" := STRSUBSTNO(Text008, PlantHourLine.Week);
      SalesLineRec."Employee No." := PlantHourLine."Employee No.";
      SalesLineRec."Shipment Date" := IDate;
      FillSalesLineElement(PlantHourLine.Element);
      IF (PlantHourLine.Type <> PlantHourLine.Type::Expenses) THEN BEGIN
        FillRateUnitOfMeasure(RateUnitType::"Plant Hours");
        FillSalesLineDim1WithPlantDep();
      END ELSE BEGIN
        FillRateUnitOfMeasure(RateUnitType::" ");
        IF PlantHourLine."Employee No." <> '' THEN
          SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", lvEmplRec."Global Dimension 1 Code")
        ELSE
          FillSalesLineDim1WithPlantDep();
      END;
      SalesLineFinish;
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE SalesLineInit@10(TextLine@1100525000 : Boolean);
    BEGIN
      SalesLineRec.INIT;
      SalesLineRec."Document Type" := SalesHeaderRec."Document Type";
      SalesLineRec."Document No." := SalesHeaderRec."No.";
      SalesLineRec."Line No." := SalesLineNo;
      SalesLineRec."System-Created Entry" := TRUE;
      SalesLineRec."Plant Invoice" := TRUE;
      IF SalesHeaderRec."Sell-to Customer No." <> '' THEN
        SalesLineRec.VALIDATE("Sell-to Customer No.",SalesHeaderRec."Sell-to Customer No.");
      IF NOT TextLine THEN BEGIN
        IF SalesHeaderRec."Job No." <> '' THEN BEGIN
          SalesLineRec."Job No." := SalesHeaderRec."Job No.";
          SalesLineRec.Element := DefaultProjElement;
        END;
        IF SalesHeaderRec."Service Order No." <> '' THEN
          SalesLineRec."Service Order No." := SalesHeaderRec."Service Order No.";
      END;
      SalesLineRec.SuspendUpdateVATAmounts(TRUE);
    END;

    PROCEDURE SalesLineFinish@1100485007();
    BEGIN
      SalesLineRec.SuspendUpdateVATAmounts(FALSE);
      IF SalesLineRec.Type <> SalesLineRec.Type::" " THEN BEGIN
        IF SalesLineRec."Service Order No." <> '' THEN BEGIN
          //* Service Order record is already read in 'Plant Location -OnAfterGetRecord' (in service company)
      //    ServOrderRec.TESTFIELD("Service Control Year");
          SalesLineRec."Service Location No." := ServOrderRec."Service Location No.";
          SalesLineRec."Service Contract No." := ServOrderRec."Service Contract No.";
      //    SalesLineRec."Service Control Year" := ServOrderRec."Service Control Year";
          SalesLineRec."Base Service Order No." := ServOrderRec."Base Service Order No.";
          IF NOT DimValRec.GET(GLSetupRec."Global Dimension 2 Code", SalesLineRec."Shortcut Dimension 2 Code") THEN
            DimValRec."Cost Type" := DimValRec."Cost Type"::Plant;
          SalesLineRec."Additional Cost (Service)" :=
            ServOrderRec.GetAdditionalCostService(
              SalesLineRec."Service Order No.",
              SalesLineRec."Shortcut Dimension 2 Code",
              DimValRec."Cost Type"+1,
              SalesHeaderRec."Company Name");
        END;
        SalesLineRec.UpdateAmounts;
      END;
    END;

    PROCEDURE CountNumberRentalPeriods@7();
    VAR
      lvRateType@1100485000 : Option;
    BEGIN
      NumberRentalPeriods := 0;
      Credit := FALSE;

      WITH "Plant Inventory" DO BEGIN

        IF NOT Removed AND ("Invoiced until" > RentalPeriodeToDate) THEN BEGIN
          //Plant is still present and already invoiced.
          EndDate := "Invoiced until";
          EXIT;
        END;

        //Determine Start Date
        IF "Invoiced until" >= "Present from" THEN
          StartDate := "Invoiced until" + 1
        ELSE
          IF "Rental Start Date" > "Present from" THEN
            StartDate := "Rental Start Date"
          ELSE
            StartDate := "Present from";

        //Determine End Date
        EndDate := RentalPeriodeToDate;
        IF Removed THEN
          IF RentalPeriodeToDate > LastRentalDay THEN
            EndDate := LastRentalDay;

        //Determine Credit
        Credit := "Invoiced until" > EndDate;
        IF Credit THEN BEGIN
          StartDate := EndDate + 1;
          IF StartDate < "Rental Start Date" THEN
            StartDate := "Rental Start Date";
          EndDate := "Invoiced until";
        END;

        IF EndDate < StartDate THEN
          EXIT;

        //Determine Rental Periods (Days, months)
        NumberRentalPeriods :=
          CalculateRentalPeriodsCU.NumberRentalPeriods("Plant Location",StartDate,EndDate,"Plant Type","Plant No.",lvRateType);

        //**11351.sn
        IF NOT ("Plant Location"."Rate Type" IN ["Plant Location"."Rate Type"::Week, "Plant Location"."Rate Type"::Month]) THEN
          NumberRentalDays := NumberRentalPeriods
        ELSE
          NumberRentalDays := EndDate - StartDate + 1;  //* For wk/month all days are calculated, see 'CalculateRentalPeriodsCU'
        //**11351.en

        IF Credit THEN BEGIN
          NumberRentalPeriods := -NumberRentalPeriods;
          NumberRentalDays := -NumberRentalDays;  //**11351
        END;
      END;
    END;

    PROCEDURE CheckMinRentalDays@1100485013();
    VAR
      lvMinRentalDays@1100485000 : Integer;
      lvStartDate@1100485001 : Date;
      lvEndDate@1100485002 : Date;
    BEGIN
      //**11351.n
      //* Determine if extra days should be invoiced related to 'Minimum Number of Rental Days'.
      //* This occurs afterwards, so when plant is already transported (MO posted).
      //*
      ExtraRentalPeriods := 0;
      ExtraRentalDays := 0;
      IF NOT "Plant Inventory".Removed THEN
        EXIT;
      IF NOT InventoryRec."Completely Invoiced" THEN  //* This is already the new value, calculate extra
        EXIT;                                         //* days only if 'Completely Invoiced'

      //lvMinRentalDays := PlantSetup."Minimum Number of Rental Days";  //* 22447.o  Setup (common) level
      PlantRec.GET("Plant Inventory"."Plant Type");  //* 22447.n
      lvMinRentalDays := PlantRec."Minimum Number of Rental Days";  //* 22447.n  Plant Type level
      IF lvMinRentalDays <= 0 THEN
        EXIT;

      IF ("Plant Inventory"."No. of Invoiced Days" + NumberRentalDays) < lvMinRentalDays THEN
        ExtraRentalDays := lvMinRentalDays - ("Plant Inventory"."No. of Invoiced Days" + NumberRentalDays);
      IF ExtraRentalDays = lvMinRentalDays THEN  //C007526  If no days invoiced, also not invoice min. rental days
        ExtraRentalDays := 0;

      IF (ExtraRentalDays <> 0) THEN BEGIN
        CASE "Plant Location"."Rate Type" OF
          "Plant Location"."Rate Type"::Day:
            ExtraRentalPeriods := ExtraRentalDays;
          "Plant Location"."Rate Type"::Week:
            ExtraRentalPeriods := ROUND((ExtraRentalDays / 7), 0.00001);
          "Plant Location"."Rate Type"::Month:
            BEGIN
              lvStartDate := "Plant Inventory".LastRentalDay();
              IF lvStartDate <> 0D THEN BEGIN
                lvEndDate := lvStartDate + ExtraRentalDays;
                ExtraRentalPeriods := CalculateRentalPeriodsCU.NumberRentalMonths(lvStartDate+1, lvEndDate);
                ExtraRentalPeriods := ROUND(ExtraRentalPeriods, 0.00001);
              END;
            END;
        END;
      END;
    END;

    PROCEDURE SetFilterTransCostInvoiceTo@1100485004(IMode@1100485000 : Code[10]);
    BEGIN
      WITH TransOrderCostRec DO BEGIN
        CASE IMode OF
          'FROM LOC.':
            BEGIN
              IF TransOrderRec."Perc. From Location" <> 0 THEN
               SETFILTER("Invoice-to", '%1|%2|%3', "Invoice-to"::" ", "Invoice-to"::Location, "Invoice-to"::"From Location")
              ELSE
               SETFILTER("Invoice-to", '%1|%2', "Invoice-to"::Location, "Invoice-to"::"From Location");
            END;
          'TO LOC.':
            BEGIN
              IF TransOrderRec."Perc. To Location" <> 0 THEN
               SETFILTER("Invoice-to", '%1|%2|%3', "Invoice-to"::" ", "Invoice-to"::Location, "Invoice-to"::"To Location")
              ELSE
               SETFILTER("Invoice-to", '%1|%2', "Invoice-to"::Location, "Invoice-to"::"To Location");
            END;
          'PROJECT':
            BEGIN
              IF TransOrderRec."Perc. Project" <> 0 THEN
               SETFILTER("Invoice-to", '%1|%2', "Invoice-to"::" ", "Invoice-to"::Project)
              ELSE
               SETRANGE("Invoice-to", "Invoice-to"::Project);
            END;
          'INTERNAL':
            BEGIN
              IF TransOrderRec."Perc. Internal" <> 0 THEN
               SETFILTER("Invoice-to", '%1|%2', "Invoice-to"::" ", "Invoice-to"::Internal)
              ELSE
               SETRANGE("Invoice-to", "Invoice-to"::Internal);
            END;
        END;
      END;
    END;

    PROCEDURE GetTransCostPercentage@1100485002(IMode@1100485000 : Code[10]) : Decimal;
    BEGIN
      WITH TransOrderCostRec DO BEGIN
        CASE IMode OF
          'FROM LOC.':
            BEGIN
               IF TransOrderRec."From Depot" THEN
                 EXIT(0);
               IF "Invoice-to" = "Invoice-to"::" " THEN
                 EXIT(TransOrderRec."Perc. From Location");
               IF (TransOrderRec.Type = TransOrderRec.Type::Removal) AND ("Invoice-to" = "Invoice-to"::Location) THEN
                 EXIT(100);
               IF (TransOrderRec.Type = TransOrderRec.Type::"Other Transfers") THEN BEGIN
                 IF "Invoice-to" = "Invoice-to"::"From Location" THEN
                   EXIT(100);
                 IF "Invoice-to" = "Invoice-to"::Location THEN BEGIN
                   IF TransOrderRec."To Depot" THEN
                     EXIT(100)
                   ELSE
                     EXIT(50);
                 END;
               END;
            END;
          'TO LOC.':
            BEGIN
               IF TransOrderRec."To Depot" THEN
                 EXIT(0);
               IF "Invoice-to" = "Invoice-to"::" " THEN
                 EXIT(TransOrderRec."Perc. To Location");
               IF (TransOrderRec.Type = TransOrderRec.Type::Arrival) AND ("Invoice-to" = "Invoice-to"::Location) THEN
                 EXIT(100);
               IF (TransOrderRec.Type = TransOrderRec.Type::"Other Transfers") THEN BEGIN
                 IF "Invoice-to" = "Invoice-to"::"To Location" THEN
                   EXIT(100);
                 IF "Invoice-to" = "Invoice-to"::Location THEN BEGIN
                   IF TransOrderRec."From Depot" THEN
                     EXIT(100)
                   ELSE
                     EXIT(50);
                 END;
               END;
            END;
          'PROJECT':
            BEGIN
               IF "Invoice-to" = "Invoice-to"::" " THEN
                 EXIT(TransOrderRec."Perc. Project");
               IF "Invoice-to" = "Invoice-to"::Project THEN
                 EXIT(100);
            END;
          'INTERNAL':
            BEGIN
               IF "Invoice-to" = "Invoice-to"::" " THEN
                 EXIT(TransOrderRec."Perc. Internal");
               IF "Invoice-to" = "Invoice-to"::Internal THEN
                 EXIT(100);
            END;
        END;
      END;

      EXIT(0);
    END;

    PROCEDURE FillGLandPostingGroups@29(Type@11012000 : ',Hours,Transport,Sundry Costs,Damage';CostObject@11012001 : Code[20];IPlantType@1100525000 : Code[20];IPlantNo@1100525001 : Code[10]);
    VAR
      lvPlantTypeRec@1100525002 : Record 11012551;
      lGenBusPostingGrp@1210190000 : Code[10];
    BEGIN
      IF "Plant Location".Code = '' THEN BEGIN
        CustomerRec.GET(ExitOrderCustomer."Customer No.");
        lGenBusPostingGrp := CustomerRec."Gen. Bus. Posting Group";
      END ELSE
        lGenBusPostingGrp := "Plant Location"."Gen. Bus. Posting Group";

      PlantPostingSetup.INIT;
      IF IPlantType <> '' THEN BEGIN
        IF lvPlantTypeRec.GET(IPlantType) THEN BEGIN
          IF NOT PlantPostingSetup.GET(lGenBusPostingGrp, lvPlantTypeRec.PlantPostingGrp(IPlantNo, COMPANYNAME, '')) THEN
            PlantPostingSetup.INIT;
        END;
      END;

      CASE Type OF
        Type::Hours:
          BEGIN
            PlantSetup.TESTFIELD("Product Posting Group Hours");
            PlantSetup.TESTFIELD("VAT-Product P.Group Hours");
            IF PlantPostingSetup."Hours (PO) Account" <> '' THEN
              SalesLineRec."No." := PlantPostingSetup."Hours (PO) Account"
            ELSE BEGIN
              PlantSetup.TESTFIELD("Hours Account");
              SalesLineRec."No." := PlantSetup."Hours Account";
            END;
            SalesLineRec.VALIDATE("No.");
            SalesLineRec."Gen. Bus. Posting Group" := lGenBusPostingGrp;
            SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantSetup."Product Posting Group Hours");
            SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantSetup."VAT-Product P.Group Hours");
          END;
        Type::Transport:
          BEGIN
            PlantSetup.TESTFIELD("Prod.Posting Group Transport");
            PlantSetup.TESTFIELD("VAT-Prod.Posting Gr. Transport");
            IF PlantPostingSetup."Transport (PO) Account" <> '' THEN
              SalesLineRec."No." := PlantPostingSetup."Transport (PO) Account"
            ELSE BEGIN
              PlantSetup.TESTFIELD("Transport Account");
              SalesLineRec."No." := PlantSetup."Transport Account";
            END;
            SalesLineRec.VALIDATE("No.");
            SalesLineRec."Gen. Bus. Posting Group" := lGenBusPostingGrp;
            SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantSetup."Prod.Posting Group Transport");
            SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantSetup."VAT-Prod.Posting Gr. Transport");
          END;
        Type::"Sundry Costs":
          BEGIN
            PlantSetup.TESTFIELD("Prod.Posting Group Miscell.");
            PlantSetup.TESTFIELD("VAT-Product Post.Gr. Miscell.");
            IF PlantPostingSetup."Miscellaneous (PO) Account" <> '' THEN
              SalesLineRec."No." := PlantPostingSetup."Miscellaneous (PO) Account"
            ELSE BEGIN
              PlantSetup.TESTFIELD("Miscellaneous Account");
              SalesLineRec."No." := PlantSetup."Miscellaneous Account";
            END;
            SalesLineRec.VALIDATE("No.");
            SalesLineRec."Gen. Bus. Posting Group" := lGenBusPostingGrp;
            SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantSetup."Prod.Posting Group Miscell.");
            SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantSetup."VAT-Product Post.Gr. Miscell.");
          END;
        Type::Damage:
          BEGIN
            PlantSetup.TESTFIELD("Prod.Posting Group Damage");
            PlantSetup.TESTFIELD("VAT-Product Post.Gr. Damage");
            IF PlantPostingSetup."Damage (PO) Account" <> '' THEN
              SalesLineRec."No." := PlantPostingSetup."Damage (PO) Account"
            ELSE BEGIN
              PlantSetup.TESTFIELD("Damage Account");
              SalesLineRec."No." := PlantSetup."Damage Account";
            END;
            SalesLineRec.VALIDATE("No.");
            SalesLineRec."Gen. Bus. Posting Group" := lGenBusPostingGrp;
            SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantSetup."Prod.Posting Group Damage");
            SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantSetup."VAT-Product Post.Gr. Damage");
          END;
      END;
    END;

    PROCEDURE FillGLandPostingGroupsTrans@1100485025(IType@11012000 : Option;IShipAgentExternal@1100485000 : Boolean;IMode@1100485001 : Code[10]);
    VAR
      lGenBusPostingGrp@1210190000 : Code[10];
    BEGIN
      CASE IMode OF
        'FROM LOC.',
        'TO LOC.':
          lGenBusPostingGrp := "Plant Location"."Gen. Bus. Posting Group";
        'INTERNAL':
          BEGIN
            CustomerRec.GET(TransOrderRec."Internal Customer No.");
            lGenBusPostingGrp := CustomerRec."Gen. Bus. Posting Group";
          END;
      END;

      CASE IType OF
        TransOrderCostRec.Type::Transport:
          BEGIN
            PlantSetup.TESTFIELD("Prod.Posting Group Transport");
            PlantSetup.TESTFIELD("VAT-Prod.Posting Gr. Transport");
            IF (IMode <> 'INTERNAL') AND (IMode <> 'PROJECT') THEN BEGIN
              IF NOT IShipAgentExternal THEN BEGIN
                PlantSetup.TESTFIELD("Account Transport Internal");
                SalesLineRec."No." := PlantSetup."Account Transport Internal";
              END ELSE BEGIN
                PlantSetup.TESTFIELD("Account Transport External");
                SalesLineRec."No." := PlantSetup."Account Transport External";
              END;
            END ELSE BEGIN
              IF NOT IShipAgentExternal THEN BEGIN
                PlantSetup.TESTFIELD("Internal Account Trans. Int.");
                SalesLineRec."No." := PlantSetup."Internal Account Trans. Int.";
              END ELSE BEGIN
                PlantSetup.TESTFIELD("Internal Account Trans. Ext.");
                SalesLineRec."No." := PlantSetup."Internal Account Trans. Ext.";
              END;
            END;
            SalesLineRec.VALIDATE("No.");
            IF lGenBusPostingGrp <> '' THEN
              SalesLineRec."Gen. Bus. Posting Group" := lGenBusPostingGrp;
            SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantSetup."Prod.Posting Group Transport");
            IF (IMode <> 'INTERNAL') AND (IMode <> 'PROJECT') THEN
              SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantSetup."VAT-Prod.Posting Gr. Transport")
            ELSE
              SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantSetup."VAT-Prod.Post. Gr. Trp. Intern");

          END;
        TransOrderCostRec.Type::"Load/Unload":
          BEGIN
            PlantSetup.TESTFIELD("Prod.Posting Group Transport");
            PlantSetup.TESTFIELD("VAT-Prod.Posting Gr. Transport");
            IF (IMode <> 'INTERNAL') AND (IMode <> 'PROJECT') THEN BEGIN
              IF NOT IShipAgentExternal THEN BEGIN
                PlantSetup.TESTFIELD("Account Load/Unload Internal");
                SalesLineRec."No." := PlantSetup."Account Load/Unload Internal";
              END ELSE BEGIN
                PlantSetup.TESTFIELD("Account Load/Unload External");
                SalesLineRec."No." := PlantSetup."Account Load/Unload External";
              END;
            END ELSE BEGIN
              IF NOT IShipAgentExternal THEN BEGIN
                PlantSetup.TESTFIELD("Internal Acc. Load/Unload Int.");
                SalesLineRec."No." := PlantSetup."Internal Acc. Load/Unload Int.";
              END ELSE BEGIN
                PlantSetup.TESTFIELD("Internal Acc. Load/Unload Ext.");
                SalesLineRec."No." := PlantSetup."Internal Acc. Load/Unload Ext.";
              END;
            END;
            SalesLineRec.VALIDATE("No.");
            IF lGenBusPostingGrp <> '' THEN
              SalesLineRec."Gen. Bus. Posting Group" := lGenBusPostingGrp;
            SalesLineRec.VALIDATE("Gen. Prod. Posting Group",PlantSetup."Prod.Posting Group Transport");
            IF (IMode <> 'INTERNAL') AND (IMode <> 'PROJECT') THEN
              SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantSetup."VAT-Prod.Posting Gr. Transport")
            ELSE
              SalesLineRec.VALIDATE("VAT Prod. Posting Group",PlantSetup."VAT-Prod.Post. Gr. Trp. Intern");
          END;
      END;
    END;

    PROCEDURE GetPlantAndPostingSetup@18(PlntType@11012000 : Code[20];PlntNo@1210190000 : Code[10]);
    BEGIN
      PlantRec.GET(PlntType);
      PlantRec.TESTFIELD("Gen. Prod. Posting Group");
      PlantRec.TESTFIELD("VAT Prod. Posting Group");
      PlantRec.TESTFIELD("Cost Object");

      PlantPostingGrp := PlantRec.PlantPostingGrp(PlntNo, COMPANYNAME, '');
      IF "Plant Location".Code <> '' THEN
        PlantPostingSetup.GET("Plant Location"."Gen. Bus. Posting Group", PlantPostingGrp)
      ELSE BEGIN
        //* Comment: For Returned Loss field ExitOrderCustomer."Customer No." is fill with customer of 'ReturedLossCustomer'
        CustomerRec.GET(ExitOrderCustomer."Customer No.");
        PlantPostingSetup.GET(CustomerRec."Gen. Bus. Posting Group", PlantPostingGrp);
      END;
    END;

    PROCEDURE GetDefaultProjectElement@1210190002();
    VAR
      lvProjElementRec@1210190000 : Record 11012010;
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      DefaultProjElement := '';
      IF (SalesHeaderRec."Job No." = '') THEN
        EXIT;

      IF "Plant Location".Element <> '' THEN
        DefaultProjElement := "Plant Location".Element
      ELSE BEGIN

      //  IF (NOT ProjectSetupRec."Posting Element Mandatory") OR                                             //**4PS01.so
      //     ((SalesHeaderRec."Company Name" <> '') AND (SalesHeaderRec."Company Name" <> COMPANYNAME)) THEN  //**4PS01.eo
        IF SalesHeaderRec."Company Name" <> '' THEN                                                           //**4PS01.sn
          lvProjRec.CHANGECOMPANY(SalesHeaderRec."Company Name");
        lvProjRec.GET(SalesHeaderRec."Job No.");
        IF (NOT lvProjRec."Posting Element Mandatory") THEN                                                   //**4PS01.en
          EXIT;
        IF SalesHeaderRec."Company Name" <> '' THEN                                                           //**4PS01.sn
          lvProjElementRec.CHANGECOMPANY(SalesHeaderRec."Company Name");                                      //**4PS01.en
        lvProjElementRec.SETRANGE("Project No.", SalesHeaderRec."Job No.");
        lvProjElementRec.SETRANGE(Level, 0);
        IF lvProjElementRec.FINDFIRST THEN
          DefaultProjElement := lvProjElementRec.Element;

        IF DefaultProjElement = '' THEN
          ERROR(Text007, SalesHeaderRec."Job No.");
      END;
    END;

    PROCEDURE FillSalesLineElement@1100525000(IElement@1100525001 : Code[20]);
    VAR
      lvProjElementRec@1100525000 : Record 11012010;
    BEGIN
      IF (SalesLineRec."Job No." = '') OR (IElement = '') THEN
        EXIT;
      IF SalesHeaderRec."Company Name" <> '' THEN
        lvProjElementRec.CHANGECOMPANY(SalesHeaderRec."Company Name");
      IF lvProjElementRec.GET(SalesLineRec."Job No.", IElement) THEN
        SalesLineRec.Element := IElement;
    END;

    PROCEDURE FillSalesLineDim1WithPlantDep@1100525002();
    BEGIN
      {  //C-026090.old
      IF (SalesLineRec."Plant Type" = '') OR (SalesLineRec."Plant No." = '') OR (SalesLineRec."Plant No." = '0') THEN
        EXIT;
      IF NOT PlantNoRec.GET(SalesLineRec."Plant Type", SalesLineRec."Plant No.") THEN
        EXIT;

      IF (PlantNoRec."Department Code" <> '') AND (SalesLineRec."Shortcut Dimension 1 Code" <> PlantNoRec."Department Code") THEN
        SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", PlantNoRec."Department Code");
      }
      //C-026090.new (also plant type level)
      IF (SalesLineRec."Plant Type" = '') THEN
        EXIT;
      IF (SalesLineRec."Plant No." <> '') AND (SalesLineRec."Plant No." <> '0') THEN BEGIN
        IF PlantNoRec.GET(SalesLineRec."Plant Type", SalesLineRec."Plant No.") THEN BEGIN
          IF (PlantNoRec."Department Code" <> '') THEN BEGIN
            IF (SalesLineRec."Shortcut Dimension 1 Code" <> PlantNoRec."Department Code") THEN
              SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", PlantNoRec."Department Code");
            EXIT;
          END;
        END;
      END;
      IF PlantRec.GET(SalesLineRec."Plant Type") THEN BEGIN
        IF (PlantRec."Department Code" <> '') AND (SalesLineRec."Shortcut Dimension 1 Code" <> PlantRec."Department Code") THEN
          SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", PlantRec."Department Code");
      END;
    END;

    PROCEDURE FillTmpCollectNoTable@1100485003(IInvoiceMethod@1100485000 : Code[10]);
    VAR
      lvOk@1100485001 : Boolean;
    BEGIN
      TmpCollectNoRec.DELETEALL;

      IF (IInvoiceMethod = '') THEN BEGIN
        CollectByInvoiceType := FALSE;
        TmpCollectNoRec.Number := 0;
        TmpCollectNoRec.INSERT;
      END ELSE BEGIN
        CollectByInvoiceType := TRUE;
        InvMethodRec.GET(IInvoiceMethod);  //* Must be present if filled

        IF InvoiceRental THEN BEGIN
          TmpCollectNoRec.Number := InvMethodRec.Rental;
          lvOk := TmpCollectNoRec.INSERT;
        END;
        IF InvoiceSalesBuyBack THEN BEGIN
          TmpCollectNoRec.Number := InvMethodRec."Sales/Buy Back";
          lvOk := TmpCollectNoRec.INSERT;
        END;
        IF InvoicePlantOrderCost THEN BEGIN
          TmpCollectNoRec.Number := InvMethodRec."Plant Order Cost";
          lvOk := TmpCollectNoRec.INSERT;
        END;
        IF InvoiceTransportOrders THEN BEGIN
          TmpCollectNoRec.Number := InvMethodRec."Transport Orders";
          lvOk := TmpCollectNoRec.INSERT;
        END;
        IF InvoiceRentalCorrections THEN BEGIN
          TmpCollectNoRec.Number := InvMethodRec."Rental Correction";
          lvOk := TmpCollectNoRec.INSERT;
        END;
        IF InvoicePlantHours THEN BEGIN
          TmpCollectNoRec.Number := InvMethodRec."Plant Hours";
          lvOk := TmpCollectNoRec.INSERT;
        END;
        IF InvoiceExitOrders THEN BEGIN
          TmpCollectNoRec.Number := InvMethodRec."Exit Order";
          lvOk := TmpCollectNoRec.INSERT;
        END;
      END;
    END;

    PROCEDURE FillRateUnitOfMeasure@1100485001(IRateUnitType@1100485000 : Option);
    VAR
      lvRateRec@1100485001 : Record 11012567;
    BEGIN
      CASE IRateUnitType OF
        RateUnitType::"Plant Rental":
          BEGIN
            lvRateRec."Rental Type" := lvRateRec."Rental Type"::Rental;
            lvRateRec."Plant Type" := SalesLineRec."Plant Type";
            SalesLineRec."Plant Rate Unit of Measure" := lvRateRec.CalcfieldRateUnit();
            SalesLineRec."Plant Qty. per Rate Unit" := GetQtyRateUnitofMeasure();
          END;
        RateUnitType::"Plant Sales/Buy Back":
          BEGIN
            lvRateRec."Rental Type" := lvRateRec."Rental Type"::"Sales / Buy Back";
            lvRateRec."Plant Type" := SalesLineRec."Plant Type";
            SalesLineRec."Plant Rate Unit of Measure" := lvRateRec.CalcfieldRateUnit();
            SalesLineRec."Plant Qty. per Rate Unit" := GetQtyRateUnitofMeasure();
          END;
        RateUnitType::"Plant Hours":
          BEGIN
            lvRateRec."Rental Type" := lvRateRec."Rental Type"::"Plant Hours";
            lvRateRec."Plant Type" := SalesLineRec."Plant Type";
            SalesLineRec."Plant Rate Unit of Measure" := lvRateRec.CalcfieldRateUnit();
            SalesLineRec."Plant Qty. per Rate Unit" := 1;
          END;
        ELSE
          BEGIN
            SalesLineRec."Plant Rate Unit of Measure" := SalesLineRec."Unit of Measure Code";
            SalesLineRec."Plant Qty. per Rate Unit" := 1;
          END
      END;
    END;

    PROCEDURE GetQtyRateUnitofMeasure@1100485010() : Decimal;
    VAR
      lvPlantUnitRec@1100485000 : Record 11012599;
    BEGIN
      IF (SalesLineRec."Plant Rate Unit of Measure" = '') OR
         (SalesLineRec."Plant Rate Unit of Measure" = SalesLineRec."Unit of Measure Code")
      THEN
        EXIT(1);

      lvPlantUnitRec.GET(SalesLineRec."Plant Type", SalesLineRec."Plant Rate Unit of Measure");
      lvPlantUnitRec.TESTFIELD("Qty. per Unit of Measure");

      EXIT(lvPlantUnitRec."Qty. per Unit of Measure");
    END;

    PROCEDURE CheckFromLocation@1100485008();
    VAR
      SalesLine2@1100485000 : Record 37;
    BEGIN
      IF SalesLineNo = 0 THEN
        EXIT;

      IF SalesHeaderRec."Location Code" = LocationFrom."VAT Location Code" THEN
        EXIT;

      TmpSalesHeader.RESET;
      TmpSalesHeader.SETRANGE("Location Code",LocationFrom."VAT Location Code");
      IF TmpSalesHeader.FINDFIRST THEN BEGIN
        SalesHeaderRec := TmpSalesHeader;
        SalesLine2.SETRANGE("Document Type",SalesHeaderRec."Document Type");
        SalesLine2.SETRANGE("Document No.",SalesHeaderRec."No.");
        IF SalesLine2.FINDLAST THEN
          SalesLineNo := SalesLine2."Line No." + 10000
        ELSE
          SalesLineNo := 0;
      END ELSE
        SalesLineNo := 0;
    END;

    PROCEDURE InsertTmpSalesHeader@1100485011(iSalesHeader@1100485000 : Record 36);
    BEGIN
      TmpSalesHeader := iSalesHeader;
      TmpSalesHeader.INSERT;
    END;

    PROCEDURE FillShipToAddress@1100485005(VAR SalesHeader2@1100485002 : Record 36;VAR PlantLocation2@1100485003 : Record 11012554);
    BEGIN
      WITH SalesHeader2 DO BEGIN
        "Ship-to Name" := PlantLocation2.Description;
        "Ship-to Name 2" := PlantLocation2."Description 2";
        "Ship-to Address" := PlantLocation2.Address;
        "Ship-to Address 2" := PlantLocation2."Address 2";
        "Ship-to City" := PlantLocation2.City;
        "Ship-to Post Code" := PlantLocation2."Post Code";
        "Ship-to County" := PlantLocation2.County;
        VALIDATE("Ship-to Country/Region Code",PlantLocation2."Country/Region Code");
        "Ship-to Contact" := PlantLocation2.Contact;
      END;
    END;

    LOCAL PROCEDURE FillPlantHourArrays@1100485009() : Integer;
    VAR
      lvDate@1100485002 : Date;
      lvArrNo@1100485000 : Integer;
      lvDayNo@1100485001 : Integer;
      lvHours@1100485003 : Decimal;
      lvUnitPrice@1100485004 : Decimal;
    BEGIN
      WITH PlantHourLine DO BEGIN
        lvArrNo := 0;
        CLEAR(PlantHourRateArray);
        CLEAR(PlantHourQuanArray);
        CLEAR(PlantHourDateArray);

        IF Type = Type::Expenses THEN BEGIN
          lvArrNo := 1;
          PlantHourRateArray[lvArrNo] := "Unit Price";
          PlantHourQuanArray[lvArrNo] := Quantity;
          PlantHourDateArray[lvArrNo] := DWY2DATE(5,Week,Year);
        END ELSE BEGIN
          FOR lvDayNo := 1 TO 7 DO BEGIN
            lvHours := 0;
            CASE lvDayNo OF
              1: IF (Monday <> 0) THEN lvHours := Monday;
              2: IF (Tuesday <> 0) THEN lvHours := Tuesday;
              3: IF (Wednesday <> 0) THEN lvHours := Wednesday;
              4: IF (Thursday <> 0) THEN lvHours := Thursday;
              5: IF (Friday <> 0) THEN lvHours := Friday;
              6: IF (Saturday <> 0) THEN lvHours := Saturday;
              7: IF (Sunday <> 0) THEN lvHours := Sunday;
            END;
            IF (lvHours <> 0) THEN BEGIN
              lvDate := DWY2DATE(lvDayNo,Week,Year);
              SearchRate.SetExtraSelectionGetEmplRate("Employee Company", "Wage Component");
              lvUnitPrice := SearchRate.Rate("Plant Location","Plant Type","Plant No.","Rate Code",lvDate,3,2,"Employee No.");
              SearchRate.SetExtraSelectionGetEmplRate('', '');
              IF (lvArrNo = 0) OR (PlantSetup."Invoice Hours by Day") THEN
                lvArrNo := lvArrNo + 1
              ELSE BEGIN
                IF (lvUnitPrice <> PlantHourRateArray[lvArrNo]) THEN
                  lvArrNo := lvArrNo + 1;
              END;
              PlantHourRateArray[lvArrNo] := lvUnitPrice;
              PlantHourQuanArray[lvArrNo] := PlantHourQuanArray[lvArrNo] + lvHours;
              PlantHourDateArray[lvArrNo] := lvDate;
            END;
          END;
        END;
      END;

      EXIT(lvArrNo);
    END;

    PROCEDURE InsertOtherItemDimensions@1100525001(VAR SalesLine@1100409000 : Record 37;Item@1100409001 : Record 27);
    VAR
      SourceCodeSetup@1100409004 : Record 242;
      DimMgt@1100409005 : Codeunit 408;
      TableID@1100409002 : ARRAY [10] OF Integer;
      No@1100409003 : ARRAY [10] OF Code[20];
    BEGIN
      //* 18-02-2009  Call 13472: Also extra dimensions of the item. Same as for call 13088 in CU11012553.
      // DIMENSION SET FIXED
      //lvDefaultDimRec.SETRANGE("Table ID", DATABASE::Item);
      //lvDefaultDimRec.SETRANGE("No.", SalesLineRec."Item No.");
      //lvDefaultDimRec.SETFILTER("Dimension Value Code", '<>%1', '');
      //lvDefaultDimRec.SETFILTER("Value Posting", '<>%1', lvDefaultDimRec."Value Posting"::"No Code");
      //IF lvDefaultDimRec.FINDSET(FALSE,FALSE) THEN BEGIN
      //  REPEAT
      //    IF (lvDefaultDimRec."Dimension Code" <> GLSetupRec."Global Dimension 1 Code") AND
      //       (lvDefaultDimRec."Dimension Code" <> GLSetupRec."Global Dimension 2 Code")
      //    THEN BEGIN
      //      IF NOT lvDocDimRec.GET(
      //        DATABASE::"Sales Line", SalesLineRec."Document Type", SalesLineRec."Document No.",
      //        SalesLineRec."Line No.", lvDefaultDimRec."Dimension Code")
      //      THEN BEGIN
      //        lvDocDimRec.INIT;
      //        lvDocDimRec."Table ID" := DATABASE::"Sales Line";
      //        lvDocDimRec."Document Type" := SalesLineRec."Document Type";
      //        lvDocDimRec."Document No." := SalesLineRec."Document No.";
      //        lvDocDimRec."Line No." := SalesLineRec."Line No.";
      //        lvDocDimRec."Dimension Code" := lvDefaultDimRec."Dimension Code";
      //        lvDocDimRec."Dimension Value Code" := lvDefaultDimRec."Dimension Value Code";
      //        lvDocDimRec.INSERT;
      //       END ELSE BEGIN
      //        lvDocDimRec."Dimension Value Code" := lvDefaultDimRec."Dimension Value Code";
      //        lvDocDimRec.MODIFY;
      //      END;
      //    END;
      //  UNTIL lvDefaultDimRec.NEXT = 0;
      //END;

      //DP000387 sn
      SourceCodeSetup.GET;
      TableID[1] := DATABASE::Item;
      No[1] := SalesLine."Item No.";
      SalesLine."Dimension Set ID" := DimMgt.GetDefaultDimID(
        TableID, No, SourceCodeSetup.Sales,
        SalesLine."Shortcut Dimension 1 Code", SalesLine."Shortcut Dimension 2 Code", 0, 0);
      IF SalesLine."Shortcut Dimension 1 Code" <> Item."Global Dimension 1 Code" THEN BEGIN
        SalesLine."Shortcut Dimension 1 Code" := Item."Global Dimension 1 Code";
        DimMgt.ValidateShortcutDimValues(1,SalesLine."Shortcut Dimension 1 Code",SalesLine."Dimension Set ID");  //DP000387 n
      END;
      IF SalesLine."Shortcut Dimension 2 Code" <> Item."Global Dimension 2 Code" THEN BEGIN
        SalesLine."Shortcut Dimension 2 Code" := Item."Global Dimension 2 Code";
        DimMgt.ValidateShortcutDimValues(2,SalesLine."Shortcut Dimension 2 Code",SalesLine."Dimension Set ID");  //DP000387 n
      END;
      //DP000387 en
    END;

    PROCEDURE DPA_DeparmentInFilter@1100525003(TableID@1100525000 : Integer;No@1100525003 : Code[20]) : Boolean;
    VAR
      Cust@1100525001 : Record 18;
      Proj@1100525002 : Record 11072003;
    BEGIN
      IF DPA_UserDepartmentFilter = '' THEN
        EXIT(TRUE);

      CASE TableID OF
        DATABASE::Customer:
          BEGIN
            IF Cust.GET(No) THEN
              EXIT(DPA_Management.CodeInFilter(Cust."Global Dimension 1 Code", DPA_UserDepartmentFilter));
          END;
        DATABASE::Job:
          BEGIN
            IF Proj.GET(No) THEN
              EXIT(DPA_Management.CodeInFilter(Proj."Global Dimension 1 Code", DPA_UserDepartmentFilter));
          END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE QuantityDiscountModifiedInPeriod@1100528802(IRentalStartDate@1100528800 : Date;VAR IDiscEndDate@1100528801 : Date;VAR lvNewRateDate@1100528802 : Date;VAR RentalQuantityDiscount@1100528804 : Decimal;VAR TmpGenericTempTable@1100528803 : Record 11020579) : Boolean;
    BEGIN
      //DP00536
      RentalQuantityDiscount := 0;
      TmpGenericTempTable.RESET;
      TmpGenericTempTable.SETFILTER(Date1, '<=%1', IDiscEndDate);
      TmpGenericTempTable.SETFILTER(Date2, '>=%1|%2', IRentalStartDate,0D);
      IF TmpGenericTempTable.ISEMPTY THEN
        EXIT(FALSE);

      TmpGenericTempTable.FINDFIRST;
      RentalQuantityDiscount := TmpGenericTempTable.Dec1;
      IF TmpGenericTempTable.Date1 > IRentalStartDate THEN BEGIN
        lvNewRateDate := TmpGenericTempTable.Date1;
        IDiscEndDate := lvNewRateDate-1;
        RentalQuantityDiscount := 0;
        EXIT(TRUE);
      END;

      IF TmpGenericTempTable.Date2 <> 0D THEN BEGIN
        IF TmpGenericTempTable.Date2 < IDiscEndDate THEN BEGIN
          lvNewRateDate := TmpGenericTempTable.Date2 +1;
          IDiscEndDate := TmpGenericTempTable.Date2;
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    BEGIN
    {
      4PS01 JD, 8 aug 2007, Call 5990, "Posting Element Mandatory" also on project card
    }
    END.
  }
  RDLDATA
  {
  }
}

