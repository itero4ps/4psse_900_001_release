OBJECT Report 11012740 Close SC Control Period
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Close Service Contract Control Period;
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   DisplayError;
                 END;

  }
  DATASET
  {
    { 4178;    ;DataItem;                    ;
               DataItemTable=Table11012812;
               DataItemTableView=SORTING(No.);
               ReqFilterFields=No.,Contract Group,Contract Manager,Contract Form }

    { 9302;1   ;DataItem;                    ;
               DataItemTable=Table11071746;
               DataItemTableView=SORTING(Service Contract No.,Code)
                                 WHERE(Date Finished=CONST());
               OnPreDataItem=BEGIN
                               SETFILTER("Ending Date", '..%1', PeriodEndingDate);
                             END;

               OnAfterGetRecord=VAR
                                  ServiceContractArrangement@1100528600 : Record 11071705;
                                  ServiceOrder@1100528601 : Record 11012823;
                                BEGIN
                                  TmpServiceOrder.RESET;
                                  TmpServiceOrder.DELETEALL;

                                  // Maintenance Service Orders
                                  //ServiceContractArrangement.SETRANGE("Service Contract No.", "Service Contract No.");
                                  //ServiceContractArrangement.SETRANGE("Theoretical Maintenance Date", "Starting Date", "Ending Date");
                                  //IF ServiceContractArrangement.FINDSET THEN
                                  //  REPEAT
                                  //    ServiceContractArrangement.CALCFIELDS("Service Order No.");
                                  //    IF ServiceContractArrangement."Service Order No." <> '' THEN BEGIN
                                  //      ServiceOrder.GET(ServiceContractArrangement."Service Order No.");
                                  //      IF ServiceOrder.Status < ServiceOrder.Status::Cancelled THEN
                                  //        InsertSOtoTmp(ServiceOrder, '', "Service Contract No.", Code);
                                  //    END;
                                  //  UNTIL ServiceContractArrangement.NEXT = 0;

                                  // Service Orders (Calls and Direct)
                                  ServiceOrder.SETCURRENTKEY("Service Contract No.");
                                  ServiceOrder.SETRANGE("Service Contract No.", "Service Contract No.");
                                  ServiceOrder.SETRANGE("Service Control Period Date", "Starting Date", "Ending Date");
                                  ServiceOrder.SETFILTER("Source Type", '%1|%2', ServiceOrder."Source Type"::Call, ServiceOrder."Source Type"::Direct);
                                  ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::Cancelled);
                                  IF ServiceOrder.FINDSET THEN
                                    REPEAT
                                      InsertSOtoTmp(ServiceOrder, '', "Service Contract No.", Code);
                                    UNTIL ServiceOrder.NEXT = 0;

                                  //// Service Orders (Contract) without Contract Arrangement link (due to conversion)
                                  ServiceOrder.SETCURRENTKEY("Service Contract No.");
                                  ServiceOrder.SETRANGE("Service Contract No.", "Service Contract No.");
                                  ServiceOrder.SETRANGE("Service Control Period Date", "Starting Date", "Ending Date");
                                  ServiceOrder.SETRANGE("Source Type", ServiceOrder."Source Type"::Contract);
                                  ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::Cancelled);
                                  IF ServiceOrder.FINDSET THEN
                                    REPEAT
                                  //    IF ServiceOrder.IsOldMaintenanceServiceOrder() THEN
                                        InsertSOtoTmp(ServiceOrder, '', "Service Contract No.", Code);
                                    UNTIL ServiceOrder.NEXT = 0;

                                  CheckTmpServiceOrders("Service-Contract Ctrl. Period");
                                  CheckServiceContractPeriod("Service-Contract Ctrl. Period");

                                  IF Finalize THEN
                                    IF NOT ErrorsExist("Service Contract No.", Code) THEN BEGIN
                                      FinalizeTmpServiceOrders("Service-Contract Ctrl. Period");
                                      FinalizeServiceContractPeriod("Service-Contract Ctrl. Period");
                                      COMMIT;
                                    END;
                                END;

               DataItemLink=Service Contract No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=Period Ending Date;
                  CaptionML=ENU=Period Ending Date;
                  SourceExpr=PeriodEndingDate }

      { 1100525003;2;Field  ;
                  Name=Posting Date;
                  CaptionML=ENU=Posting Date;
                  SourceExpr=PostingDate }

      { 1100525004;2;Field  ;
                  Name=Ingnore Sales Control;
                  CaptionML=ENU=Ingnore Sales Control;
                  SourceExpr=IgnoreSales;
                  OnValidate=BEGIN
                               IF IgnoreSales THEN
                                 MESSAGE(Text000 + Text001);
                             END;
                              }

      { 1100525005;2;Field  ;
                  Name=Ignore Purchase Control;
                  CaptionML=ENU=Ignore Purchase Control;
                  SourceExpr=IgnorePurchase;
                  OnValidate=BEGIN
                               IF IgnorePurchase THEN
                                 MESSAGE(Text002 + Text003);
                             END;
                              }

      { 1100525006;2;Field  ;
                  Name=Ignore Future Posting Control;
                  CaptionML=ENU=Ignore Future Posting Control;
                  SourceExpr=IgnoreFuturePostings }

      { 1100525007;2;Field  ;
                  Name=Post;
                  CaptionML=ENU=Post;
                  SourceExpr=Finalize }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TmpServiceOrder@1100528602 : TEMPORARY Record 11012823;
      PeriodEndingDate@1100528601 : Date;
      PostingDate@1100528604 : Date;
      IgnorePurchase@1100528605 : Boolean;
      IgnoreSales@1100528606 : Boolean;
      IgnoreFuturePostings@1100528607 : Boolean;
      Finalize@1100528603 : Boolean;
      Text000@1100528609 : TextConst 'ENU=Ignoring the Sales Check could result in evaluating Service Contracts too early.\';
      Text001@1100528608 : TextConst 'ENU=There could be not Invoiced Cost Plus Entries or Installemtens present.';
      Text002@1100528611 : TextConst 'ENU=Ignoring the Purchase Check could result in closing Service Orders too early.\';
      Text003@1100528610 : TextConst 'ENU=There could still be Purchase Orders present.';
      Text004@1100528612 : TextConst 'ENU=Service Order not administrative finished';
      Text005@1210190000 : TextConst 'ENU=Workdate can not Preceed Ending Date of Contract Period %1 of Service Contract %2';

    PROCEDURE CheckTmpServiceOrders@1100528603(IServiceContractCtrlPeriod@1100525000 : Record 11071746);
    VAR
      CloseProjectServiceCU@1100528600 : Codeunit 11012046;
      Type@1100528602 : 'Project,Service Contract,Service Order';
    BEGIN
      IF NOT TmpServiceOrder.FINDSET THEN
        EXIT;
      REPEAT
        CLEAR(CloseProjectServiceCU);
        CloseProjectServiceCU.SetSelection(
          Type::"Service Order", '', TmpServiceOrder."Service Contract No.", TmpServiceOrder."No.",
          PostingDate, IgnorePurchase, IgnoreSales, IgnoreFuturePostings, FALSE, FALSE, '', FALSE);
        CloseProjectServiceCU.SetSelectionCloseService(0, IServiceContractCtrlPeriod.Code);
        CloseProjectServiceCU.Check;
      UNTIL TmpServiceOrder.NEXT = 0;
    END;

    PROCEDURE FinalizeTmpServiceOrders@1100528604(IServiceContractCtrlPeriod@1100525000 : Record 11071746);
    VAR
      CloseProjectServiceCU@1100528601 : Codeunit 11012046;
      Type@1100528600 : 'Project,Service Contract,Service Order';
    BEGIN
      IF NOT TmpServiceOrder.FINDSET THEN
        EXIT;
      REPEAT
        CLEAR(CloseProjectServiceCU);
        CloseProjectServiceCU.SetSelection(
          Type::"Service Order", '', TmpServiceOrder."Service Contract No.", TmpServiceOrder."No.",
          PostingDate, IgnorePurchase, IgnoreSales, IgnoreFuturePostings, FALSE, FALSE, '', FALSE);
        CloseProjectServiceCU.SetSelectionCloseService(0, IServiceContractCtrlPeriod.Code);
        CloseProjectServiceCU.Check;
        CloseProjectServiceCU.Post;
      UNTIL TmpServiceOrder.NEXT = 0;
    END;

    PROCEDURE CheckServiceContractPeriod@1100528600(IServiceContractCtrlPeriod@1100528601 : Record 11071746);
    VAR
      CloseProjectServiceCU@1100528602 : Codeunit 11012046;
      Type@1100528600 : 'Project,Service Contract,Service Order';
    BEGIN
      CloseProjectServiceCU.SetSelection(
        Type::"Service Contract", '', IServiceContractCtrlPeriod."Service Contract No.", '',
        PostingDate, IgnorePurchase, IgnoreSales, IgnoreFuturePostings, FALSE, FALSE, '', FALSE);
      CloseProjectServiceCU.SetSelectionCloseService(0, IServiceContractCtrlPeriod.Code);
      CloseProjectServiceCU.Check;
    END;

    PROCEDURE FinalizeServiceContractPeriod@1100528605(IServiceContractCtrlPeriod@1100528602 : Record 11071746);
    VAR
      CloseProjectServiceCU@1100528601 : Codeunit 11012046;
      Type@1100528600 : 'Project,Service Contract,Service Order';
    BEGIN
      CloseProjectServiceCU.SetSelection(
        Type::"Service Contract", '', IServiceContractCtrlPeriod."Service Contract No.", '',
        PostingDate, IgnorePurchase, IgnoreSales, IgnoreFuturePostings, FALSE, FALSE, '', FALSE);
      CloseProjectServiceCU.SetSelectionCloseService(0, IServiceContractCtrlPeriod.Code);
      CloseProjectServiceCU.Check;
      CloseProjectServiceCU.Post;
    END;

    PROCEDURE InsertSOtoTmp@1100528607(IServiceOrder@1100528600 : Record 11012823;IBaseServiceOrderNo@1100528601 : Code[20];IServiceContractNo@1100525001 : Code[20];IServContrControlPeriodCode@1100525000 : Code[10]);
    VAR
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      //IF IBaseServiceOrderNo = '' THEN
      //  IF IServiceOrder."Base Service Order No." <> IServiceOrder."No." THEN
      //    EXIT;

      //IF IServiceOrder."Base Service Order" THEN BEGIN
      //  ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      //  ServiceOrder.SETRANGE("Base Service Order No.", IServiceOrder."No.");
      //  ServiceOrder.SETRANGE("Base Service Order", FALSE);
      //  IF ServiceOrder.FINDSET THEN
      //    REPEAT
      //      InsertSOtoTmp(ServiceOrder, IServiceOrder."No.", IServiceContractNo, IServContrControlPeriodCode);
      //    UNTIL ServiceOrder.NEXT = 0;
      //END;

      IF IServiceOrder.Status < IServiceOrder.Status::"Administrative Finished" THEN
        AddError(Text004, IServiceOrder."No.", IServiceContractNo, IServContrControlPeriodCode)
      ELSE BEGIN
        TmpServiceOrder := IServiceOrder;
        IF TmpServiceOrder.INSERT THEN;
      END;
    END;

    PROCEDURE AddError@7(IMessTxt@11012000 : Text[250];IServiceOrder@1100525001 : Code[20];IServiceContractNo@1100525002 : Code[20];IServContrControlPeriodCode@1100525003 : Code[10]);
    VAR
      ErrorRec@1100525000 : Record 11012051;
      NewLine@1100485000 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Finish Service-Project");
        IF FINDLAST THEN
          NewLine := "Line No." + 1
        ELSE
          NewLine := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Finish Service-Project";
        "Line No." := NewLine;
        "Error message" := IMessTxt;
        "Service Order No." := IServiceOrder;
        "Service Contract No." := IServiceContractNo;
        "Serv. Contr. Ctrl. Period Code" := IServContrControlPeriodCode;
        INSERT;
      END;
    END;

    PROCEDURE DisplayError@1210190000();
    VAR
      ErrorRec@1100525000 : Record 11012051;
    BEGIN
      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"Finish Service-Project");
      IF ErrorRec.FINDSET THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
      END;
    END;

    PROCEDURE ErrorsExist@1100528606(IServiceContractNo@1100525000 : Code[20];IServContrControlPeriodCode@1100525001 : Code[10]) : Boolean;
    VAR
      ErrorRec@1100528600 : Record 11012051;
    BEGIN
      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"Finish Service-Project");
      ErrorRec.SETRANGE("Service Contract No.", IServiceContractNo);
      ErrorRec.SETRANGE("Serv. Contr. Ctrl. Period Code", IServContrControlPeriodCode);
      EXIT(NOT ErrorRec.ISEMPTY)
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

