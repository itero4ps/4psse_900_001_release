OBJECT Report 11012758 Select Try-Out Successor
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Select Try-Out Successor;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CRMSetup.GET;
                 END;

    OnPostReport=BEGIN
                   StartUpdate;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525004;0;Container;
                  ContainerType=ContentArea }

      { 1100525003;1;Group  ;
                  CaptionML=ENU=General;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=CurrSeries;
                  AssistEdit=Yes;
                  CaptionML=ENU=No. Series;
                  SourceExpr=CurrSeries;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 CheckSeries(TRUE);
                               END;
                                }

      { 1100525001;2;Field  ;
                  Name=NewCode;
                  CaptionML=ENU=Try-out Successor;
                  NotBlank=Yes;
                  SourceExpr=NewCode;
                  CaptionClass=ActionName;
                  Editable=NewCodeEditable;
                  OnValidate=BEGIN
                               NewCodeOnAfterValidate;
                             END;
                              }

      { 1100525000;2;Field  ;
                  Name=EstFrom;
                  CaptionML=ENU=Estimate Source;
                  SourceExpr=EstFrom;
                  TableRelation=Estimate;
                  Visible=EstFromVisible }

      { 1210190000;2;Field  ;
                  CaptionML=ENU=Copy Price Agreement;
                  SourceExpr=CopyPriceAgreement;
                  Visible=PriceAgreementVisible }

      { 1100409000;2;Field  ;
                  CaptionML=ENU=Iintialize Sales From Cost;
                  SourceExpr=InitSalesFromCost;
                  Visible=InitSalesFromCostVisible }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SuccFilter@1100525022 : Code[20];
      SuccQuote@1100525021 : Boolean;
      NewCode@1100525020 : Code[20];
      CurrSeries@1100525019 : Code[20];
      EstFrom@1100525018 : Code[20];
      gvAction@1100525017 : Integer;
      gvTryOut@1100525016 : Code[20];
      gvTryOutQuote@1100525015 : Code[20];
      gvTryOutLine@1100525014 : Integer;
      NoSeriesMgt@1100525013 : Codeunit 396;
      RiskOpportunityManagement@1100528800 : Codeunit 11229282;
      EstSetup@1100525012 : Record 11012150;
      RawSetup@1100525011 : Record 11125673;
      JobSetup@1100525010 : Record 315;
      ServSetup@1100525009 : Record 11012800;
      CRMSetup@1100525008 : Record 5079;
      TryoutRec@1100525007 : Record 11012750;
      TryoutQuoteRec@1100525006 : Record 11012758;
      TryoutSuccRec@1100525005 : Record 11012761;
      NoSeries@1100525004 : Record 308;
      ActionName@1100525003 : Text[50];
      TryoutRespPersRec@1100525002 : Record 11012756;
      NewCodeEditable@1100525001 : Boolean INDATASET;
      EstFromVisible@1100525000 : Boolean INDATASET;
      Text000@1100525024 : TextConst 'ENU=%1 %2 is created';
      Text001@1100525023 : TextConst 'ENU=New code is empty, %1 can not be created.';
      PriceAgreementVisible@1210190001 : Boolean INDATASET;
      CopyPriceAgreement@1210190000 : Boolean;
      InitSalesFromCost@1100409001 : Boolean;
      InitSalesFromCostVisible@1100409000 : Boolean INDATASET;

    PROCEDURE SetSelection@1100485001(lvAction@1100485000 : Integer;lvTryOut@1100485001 : Code[20];lvTryOutQuote@1100485002 : Code[20];lvTryOutLine@1100485003 : Integer);
    VAR
      EstRec@1100485008 : Record 11012151;
      ProjRec@1100485007 : Record 11072003;
      ServOrderRec@1100485006 : Record 11012823;
      ServLocRec@1100485005 : Record 11012801;
      ServContrRec@1100485004 : Record 11012812;
      ServiceSurvey@1210190000 : Record 11071803;
    BEGIN
      CRMSetup.GET;
      gvAction := lvAction;
      gvTryOut := lvTryOut;
      gvTryOutQuote := lvTryOutQuote;
      gvTryOutLine := lvTryOutLine;

      EstFromVisible := FALSE;
      PriceAgreementVisible := FALSE;
      CASE gvAction OF
        10,12,13:
          BEGIN
            ActionName := EstRec.TABLECAPTION;
            EstFromVisible := TRUE;
            PriceAgreementVisible := TRUE;
            //db.sn, 03-02-15: C020959
            EstSetup.GET;
            InitSalesFromCost := EstSetup."Init Sales From Cost";
            InitSalesFromCostVisible := TRUE;
            //db.en, 03-02-15: C020959
          END;
        20,21,22: ActionName := ProjRec.TABLECAPTION;
        30: ActionName := ServOrderRec.TABLECAPTION;
        31: ActionName := ServLocRec.TABLECAPTION;
        32: ActionName := ServContrRec.TABLECAPTION;
        33: ActionName := ServiceSurvey.TABLECAPTION;
      END;

      IF gvTryOutQuote <> '' THEN BEGIN
        SuccQuote := TRUE;
        SuccFilter := gvTryOutQuote;
      END ELSE BEGIN
        SuccQuote := FALSE;
        SuccFilter := gvTryOut;
      END;

      IF CRMSetup."Inherit No. at Successor" THEN BEGIN
        CurrSeries := '';
        NewCode := SuccFilter;
        NewCodeEditable := FALSE;
      END ELSE BEGIN
        CheckSeries(FALSE);
        NewCodeEditable := CheckSeriesManual;
      END;
    END;

    PROCEDURE StartUpdate@1100485000();
    BEGIN
      IF CurrSeries <> '' THEN
        DetermineNewCode(TRUE);
      IF NewCode = '' THEN
        ERROR(Text001, ActionName);
      CASE gvAction OF
        10,12,13: GenerateEstimate;
        20,21,22: GenerateProject;
        30: GenerateServiceOrder;
        31: GenerateServiceLocation;
        32: GenerateServiceContract;
        33: GenerateServiceSurvey;
      END;
    END;

    PROCEDURE GenerateEstimate@1210190000();
    VAR
      EstRec@1210190000 : Record 11012151;
      OrigEstRec@1100485001 : Record 11012151;
      OrigEstRec2@1100525005 : Record 11012151;
      OrigSumRec@1100525004 : Record 11012172;
      EstRateRec@1100525000 : Record 11012160;
      EstimateRAWSetup@1100525002 : Record 11125673;
      CopyMgt@1100525003 : Codeunit 11012227;
      CopyCu@1100485000 : Codeunit 11012151;
      CopyRawCu@1100525001 : Codeunit 11125672;
    BEGIN
      EstRec.INIT;
      EstRec."No." := NewCode;
      EstRec."No. Series" := CurrSeries;
      EstRec."RAW Estimate" := (gvAction = 12);
      EstRec."Estimate Project" := (gvAction = 13);
      EstRec.InitRecord;
      EstRec.INSERT(TRUE);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        EstRec.VALIDATE(Description, TryoutRec.Description);
        EstRec."Description 2" := TryoutRec."Description 2";
        EstRec.Address := TryoutRec.Address;
        EstRec."Address 2" := TryoutRec."Address 2";
        EstRec.City := TryoutRec.City;
        EstRec."Post Code" := TryoutRec."Post Code";
        EstRec.County := TryoutRec.County;
        EstRec."Country/Region Code":= TryoutRec."Country/Region Code";
        EstRec."Territory Code":= TryoutRec."Territory Code";
        EstRec."Starting Date" := TryoutRec."Expected Starting Date";
        EstRec."Ending Date" := TryoutRec."Expected End Date";
        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          EstRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        EstRec.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);
        EstRec.VALIDATE(Description, TryoutQuoteRec.Description);
        EstRec."Description 2" := TryoutQuoteRec."Description 2";
        EstRec."Contact No." := TryoutQuoteRec."Contact No.";
        EstRec.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        EstRec.Address := TryoutQuoteRec.Address;
        EstRec."Address 2" := TryoutQuoteRec."Address 2";
        EstRec.City := TryoutQuoteRec.City;
        EstRec."Post Code" := TryoutQuoteRec."Post Code";
        EstRec.County := TryoutQuoteRec.County;
        EstRec."Country/Region Code":= TryoutQuoteRec."Country/Region Code";
        EstRec."Territory Code":= TryoutQuoteRec."Territory Code";
        EstRec.Discipline := TryoutQuoteRec.Discipline;
        EstRec."Starting Date" := TryoutQuoteRec."Expected Starting Date";
        EstRec."Ending Date" := TryoutQuoteRec."Expected End Date";
        EstRec."Register Date" := TryoutQuoteRec."Register Date";  //db, 03-10-13: C009768
        EstRec."Tender Date" := TryoutQuoteRec."Tender Date";
        EstRec."Tender No." := TryoutQuoteRec."Tender No.";
        IF TryoutQuoteRec.Estimator <> '' THEN  //db, 20-12-12: 25975
          EstRec.Estimator := TryoutQuoteRec.Estimator;
        EstRec."Expected Est. Completion Date" := TryoutQuoteRec."Register Date";
        EstRec."Contact Person No." := TryoutQuoteRec."Contact Person No.";
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          EstRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        //db.sn, 25-06-15: C024158
        IF EstFrom <> '' THEN BEGIN
          OrigEstRec.GET(EstFrom);
          EstRec."Estimate Source" := OrigEstRec."No.";
          IF OrigSumRec.GET(OrigEstRec."No.",  OrigEstRec."Summary (Cost)") THEN BEGIN
            EstRec."Summary Source (Cost)" := OrigSumRec.Summary;
          END ELSE BEGIN
            IF OrigEstRec2.GET(OrigEstRec."Estimate Source") THEN BEGIN
              IF OrigSumRec.GET(OrigEstRec2."No.",  OrigEstRec2."Summary (Cost)") THEN
                EstRec."Summary Source (Cost)" := OrigSumRec.Summary;
            END ELSE BEGIN
              //default from setup already assigned by OnInsert
            END;
          END;
          IF OrigSumRec.GET(OrigEstRec."No.",  OrigEstRec."Summary (Sales)") THEN BEGIN
            EstRec."Summary Source (Sales)" := OrigSumRec.Summary;
          END ELSE BEGIN
            IF OrigEstRec2.GET(OrigEstRec."Estimate Source") THEN BEGIN
              IF OrigSumRec.GET(OrigEstRec2."No.",  OrigEstRec2."Summary (Sales)") THEN
                EstRec."Summary Source (Sales)" := OrigSumRec.Summary;
            END ELSE BEGIN
              //default from setup already assigned by OnInsert
            END;
          END;
        END;
        //db.en, 25-06-15: C024158
        //db.sn, 16-01-15: C020093
        IF EstFrom = '' THEN BEGIN  //C024873
          EstRec."Summary (Cost)" := '';
          EstRec."Summary (Sales)" := '';
        END ELSE BEGIN
          EstRec."Summary (Cost)" := ReadEstimateSource(EstRec."Estimate Source",0);
          EstRec."Summary (Sales)" := ReadEstimateSource(EstRec."Estimate Source",1);
        END;
        //db.en, 16-01-15: C020093
        EstRec.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Estimate No." := EstRec."No.";
      TryoutSuccRec.MODIFY;

      IF EstFrom <> '' THEN BEGIN
        //db.sn, 25-03-09: M14775
        EstRateRec.SETRANGE("Estimate No.", TryoutSuccRec."Estimate No.");
        EstRateRec.DELETEALL(TRUE);
        //db.en, 25-03-09: M14775

        OrigEstRec.GET(EstFrom);
        OrigEstRec.TESTFIELD(Converted, EstRec.Converted);  //db, 03-07-14: C015879

        IF EstRec."RAW Estimate" THEN BEGIN
          CopyRawCu.CopyEst(OrigEstRec."No.", '', EstRec."No.", EstRec.Description,
            OrigEstRec."Estimate Type", OrigEstRec."Norm Group", OrigEstRec."Rate Group", EstRec."Customer No.",
            OrigEstRec."Reference Date (Item)", OrigEstRec."Purch Discount Term Group 1", OrigEstRec."Purch Discount Term Group 2",
            FALSE, 0, CopyPriceAgreement)
        END ELSE BEGIN
          IF EstRec.Converted THEN BEGIN  //db, 03-07-14: C015879
            CopyMgt.SetInitSalesFromCost(InitSalesFromCost);  //db, 03-02-15: C020959
            CopyMgt.SetTransferComments(TRUE);   //db, 09-06-15
            CopyMgt.CopyEst(OrigEstRec."No.", '', EstRec."No.", EstRec.Description,
              OrigEstRec."Estimate Type", OrigEstRec."Norm Group", OrigEstRec."Rate Group", EstRec."Customer No.",
              OrigEstRec."Reference Date (Item)", OrigEstRec."Purch Discount Term Group 1", OrigEstRec."Purch Discount Term Group 2",
              FALSE, 0, TRUE, CopyPriceAgreement);  //db, 09-06-15 (CopyQuantitySheet=TRUE)
          END ELSE BEGIN
            CopyCu.CopyEst(OrigEstRec."No.", '', EstRec."No.", EstRec.Description,
              OrigEstRec."Estimate Type", OrigEstRec."Norm Group", OrigEstRec."Rate Group", EstRec."Customer No.",
              OrigEstRec."Reference Date (Item)", OrigEstRec."Purch Discount Term Group 1", OrigEstRec."Purch Discount Term Group 2",
              FALSE, 0, FALSE, CopyPriceAgreement);
          END;
        END;

        EstRec.GET(TryoutSuccRec."Estimate No.");
        EstRec.InheritDataFromSource(EstFrom);  //db, 02-02-15: C020972
        EstRec.MODIFY;
      END;

      COMMIT;
      MESSAGE(Text000, EstRec.TABLECAPTION, EstRec."No.");
    END;

    PROCEDURE GenerateProject@1210190001();
    VAR
      ProjRec@1210190000 : Record 11072003;
      ProjCustRec@1210190001 : Record 11012005;
      Cust@1210190002 : Record 18;
      lvTryoutLineRec@1100485003 : Record 11012755;
      lvContactTypeRec@1100485000 : Record 11012757;
      lvContactBusRelRec@1100485001 : Record 5054;
      ContactFeatureType@1100525000 : Record 11012753;
      RiskOpportunitySchedule@1100528800 : Record 11229900;
      BillToCustBl@1100485002 : Boolean;
      ProjCust@1100485004 : Code[20];
      TryOutCode@1100528801 : Code[20];
    BEGIN
      BillToCustBl := FALSE;

      ProjRec.INIT;
      ProjRec."No." := NewCode;
      ProjRec."No. Series" := CurrSeries;
      ProjRec."Small Project" := (gvAction = 21);
      ProjRec."Assembly Project" := (gvAction = 22); //kzwerver, 110527, n, #27456
      IF SuccQuote THEN
        ProjRec.SetCopyFeaturesFrom(ContactFeatureType."Relation Type"::"Try-out Quote", SuccFilter)
      ELSE
        ProjRec.SetCopyFeaturesFrom(ContactFeatureType."Relation Type"::"Try-out", SuccFilter);

      ProjRec.INSERT(TRUE);

      ProjRec."Project Type" := ProjRec.DetProjectTypeSeriesSimple(COMPANYNAME);  //db, 22-09-09: M16533

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        IF NOT CRMSetup."Generate Project allowed" THEN
          TryoutRec.TESTFIELD(Order,TRUE);

        ProjRec.VALIDATE(Description, TryoutRec.Description);
        ProjRec."Description 2" := TryoutRec."Description 2";  // dp00248.n
        ProjRec.Address := TryoutRec.Address;
        ProjRec."Address 2" := TryoutRec."Address 2";
        ProjRec.City := TryoutRec.City;
        ProjRec."Post Code" := TryoutRec."Post Code";
        ProjRec.County := TryoutRec.County;
        ProjRec."Country/Region Code":= TryoutRec."Country/Region Code";
        ProjRec."Territory Code":= TryoutRec."Territory Code";
        ProjRec."Starting Date" := TryoutRec."Expected Starting Date";
        ProjRec."Ending Date" := TryoutRec."Expected End Date";
        ProjRec."Salesperson Code" := TryoutRec."Salesperson Code"; //db, 29-08-13: C007070

        lvTryoutLineRec.SETRANGE("Try-out No.",TryoutRec.Code);
        IF lvTryoutLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            IF lvContactTypeRec.GET(lvTryoutLineRec."Contact Type") THEN;
            IF lvContactTypeRec.Principal THEN BEGIN
              lvContactBusRelRec.SETRANGE("Link to Table",lvContactBusRelRec."Link to Table"::Customer);
              lvContactBusRelRec.SETRANGE("Contact No.",lvTryoutLineRec."Contact No.");
              IF lvContactBusRelRec.FINDFIRST THEN BEGIN
                InsertProjectPrincipal(lvContactBusRelRec."No.",ProjRec."No.");
                IF NOT BillToCustBl THEN BEGIN
                  ProjRec."Bill-to Customer No." := lvContactBusRelRec."No.";
                  BillToCustBl := TRUE;
                END;
              END;
            END;
          UNTIL lvTryoutLineRec.NEXT = 0
        END;

        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          ProjRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        ProjRec.MODIFY;
        GenerateProjRespPers(TryoutRec.Code, ProjRec."No.");

      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);

        IF TryoutQuoteRec."Installment Scheme Project" <> '' THEN                     //M24900
          ProjRec."Settlement Method" := ProjRec."Settlement Method"::"Fixed Price";  //M24900

        ProjCust := GetCustomer(TryoutQuoteRec."Contact No.");
        IF ProjCust <> '' THEN BEGIN
          Cust.GET(ProjCust);
          ProjCustRec.INIT;
          ProjCustRec."Project No." := ProjRec."No.";
          ProjCustRec.VALIDATE(Principal, ProjCust);
          ProjCustRec.CopySalesSurcharges(Cust);  //*27663.n
          IF TryoutQuoteRec."Bill-to Customer No." <> '' THEN
            ProjCustRec.VALIDATE("Bill-to Customer No.", TryoutQuoteRec."Bill-to Customer No.");  //evdb.sn
          ProjCustRec."Bill-to Name" := TryoutQuoteRec."Bill-to Name";
          ProjCustRec."Bill-to Name 2" := TryoutQuoteRec."Bill-to Name 2";
          ProjCustRec."Bill-to Address" := TryoutQuoteRec."Bill-to Address";
          ProjCustRec."Bill-to Address 2" := TryoutQuoteRec."Bill-to Address 2";
          ProjCustRec."Bill-to Post Code" := TryoutQuoteRec."Bill-to Post Code";
          ProjCustRec."Bill-to City" := TryoutQuoteRec."Bill-to City";
          ProjCustRec."Contact Person No." := TryoutQuoteRec."Contact Person No.";
          ProjCustRec."Contact Person Name" := TryoutQuoteRec."Contact Person Name";
          ProjCustRec."Bill-to Contact Person" := TryoutQuoteRec."Bill-to Contact No (Person)";
          ProjCustRec."Bill-to Contact Person Name" := TryoutQuoteRec."Bill-to Contact Name";  //evdb.en
          //* 18297.sn
          IF ProjRec."Settlement Method" = ProjRec."Settlement Method"::"Fixed Price" THEN BEGIN
            ProjCustRec."Generate Installments" := TRUE;
            ProjCustRec."Installment Scheme" := TryoutQuoteRec."Installment Scheme Project";
          END;
          //* 18297.en
          ProjCustRec."Order Date" := TryoutQuoteRec."Order Date"; //M18752
          IF ProjCustRec."Currency Code" <> TryoutQuoteRec."Currency Code" THEN
            ProjCustRec.VALIDATE("Currency Code", TryoutQuoteRec."Currency Code");
          ProjCustRec.VALIDATE("Contract Amount", TryoutQuoteRec."Offered Amount (FCY)"); //M18753
          ProjCustRec.INSERT(TRUE);
          ProjRec.VALIDATE("Bill-to Customer No.", ProjCust);
        END;

        ProjRec.VALIDATE(Description, TryoutQuoteRec.Description);
        ProjRec."Description 2" := TryoutQuoteRec."Description 2";  // dp00248.n
        ProjRec.Address := TryoutQuoteRec.Address;
        ProjRec."Address 2" := TryoutQuoteRec."Address 2";
        ProjRec.City := TryoutQuoteRec.City;
        ProjRec."Post Code" := TryoutQuoteRec."Post Code";
        ProjRec.County := TryoutQuoteRec.County;
        ProjRec."Country/Region Code":= TryoutQuoteRec."Country/Region Code";
        ProjRec."Territory Code":= TryoutQuoteRec."Territory Code";
        ProjRec.Discipline := TryoutQuoteRec.Discipline;  // Melding 18158
        ProjRec.Contact := TryoutQuoteRec."Contact Person No.";
        IF ProjRec.Contact <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone", "Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ProjRec."Phone No." := TryoutQuoteRec."Contact Phone";
          //ProjRec."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ProjRec."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ProjRec."Fax No." := TryoutQuoteRec."Contact Fax";
          //ProjRec."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        ProjRec."Starting Date" := TryoutQuoteRec."Expected Starting Date";
        ProjRec."Ending Date" := TryoutQuoteRec."Expected End Date";
        ProjRec."Salesperson Code" := TryoutQuoteRec."Salesperson Code"; //db, 29-08-13: C007070
        IF TryoutQuoteRec.Estimator <> '' THEN  //db, 20-12-12: 25975
          ProjRec.Estimator := TryoutQuoteRec.Estimator;
        ProjRec."Service Warranty Code" := TryoutQuoteRec."Service Warranty Code"; //DP00121
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          ProjRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        ProjRec.MODIFY;
        UpdateResponsibility(ProjRec."No.",ProjRec.Estimator);  //M 25819
      END;

      //DP00732.sn
      IF SuccQuote THEN
        TryOutCode := TryoutQuoteRec."Try-out No."
      ELSE
        TryOutCode := TryoutRec.Code;

      RiskOpportunitySchedule.SETRANGE(Source, 1);
        RiskOpportunitySchedule.SETRANGE("Source Code", TryOutCode);
      IF RiskOpportunitySchedule.FINDLAST THEN
        RiskOpportunityManagement.CopyScheduleBetweenSources(1, TryOutCode,RiskOpportunitySchedule.Date,0,ProjRec."No.",RiskOpportunitySchedule.Date);
      //DP00732.en

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Project No." := ProjRec."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ProjRec.TABLECAPTION, ProjRec."No.");
    END;

    PROCEDURE GenerateServiceOrder@1210190006();
    VAR
      ServiceSetup@1210190001 : Record 11012800;
      ServOrderRec@1210190000 : Record 11012823;
    BEGIN
      ServiceSetup.GET;

      ServOrderRec.INIT;
      ServOrderRec."No." := NewCode;
      ServOrderRec."No. Series" := CurrSeries;
      ServOrderRec.INSERT(TRUE);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServOrderRec.VALIDATE(Description, TryoutRec.Description);
        ServOrderRec."Description 2" := TryoutRec."Description 2";  // dp00248.n
        ServOrderRec.Address := TryoutRec.Address;
        ServOrderRec."Address 2" := TryoutRec."Address 2";
        ServOrderRec.City := TryoutRec.City;
        ServOrderRec."Post Code" := TryoutRec."Post Code";
        ServOrderRec."Territory Code":= TryoutRec."Territory Code";
        //db.sn, 17-12-12: C003246
        ServOrderRec."Starting Date" := TryoutRec."Expected Starting Date";
        ServOrderRec."Ending Date" := TryoutRec."Expected End Date";
        ServOrderRec."First Possible Starting Date" := ServOrderRec."Starting Date";
        ServOrderRec."Last Possible Ending Date" := ServOrderRec."Ending Date";
        //db.en, 17-12-12: C003246
        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          ServOrderRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        ServOrderRec.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);

        IF TryoutQuoteRec."Installment Scheme Service" <> '' THEN                               //M24900
          ServOrderRec."Settlement Method" := ServOrderRec."Settlement Method"::"Fixed Price";  //M24900

        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServOrderRec.VALIDATE(Description, TryoutQuoteRec.Description);
        ServOrderRec."Description 2" := TryoutQuoteRec."Description 2";  // dp00248.n
        ServOrderRec.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        ServOrderRec.Address := TryoutQuoteRec.Address;
        ServOrderRec."Address 2":= TryoutQuoteRec."Address 2";
        ServOrderRec.City := TryoutQuoteRec.City;
        ServOrderRec."Post Code" := TryoutQuoteRec."Post Code";
        ServOrderRec."Territory Code":= TryoutQuoteRec."Territory Code";
        ServOrderRec."Contact Name" := TryoutQuoteRec."Contact Person Name";
        IF ServOrderRec."Contact Name" <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone", "Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ServOrderRec."Phone No." := TryoutQuoteRec."Contact Phone";
          ServOrderRec."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ServOrderRec."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ServOrderRec."Fax No." := TryoutQuoteRec."Contact Fax";
          ServOrderRec."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          ServOrderRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        ServOrderRec.VALIDATE("Bill-to Customer No.", TryoutQuoteRec."Bill-to Customer No.");    //evdb.sn
        ServOrderRec."Contact Person No."   := TryoutQuoteRec."Contact Person No.";
        ServOrderRec."Bill-to Contact Person" := TryoutQuoteRec."Bill-to Contact No (Person)";   //evdb.en
        ServOrderRec."Service Warranty Code" := TryoutQuoteRec."Service Warranty Code"; //DP00121
        ServOrderRec."Your Reference" := TryoutQuoteRec."Your reference";  //db, 17-12-12: 34378
        //db.sn, 17-12-12: C003246
        ServOrderRec."Starting Date" := TryoutQuoteRec."Expected Starting Date";
        ServOrderRec."Ending Date" := TryoutQuoteRec."Expected End Date";
        ServOrderRec."First Possible Starting Date" := ServOrderRec."Starting Date";
        ServOrderRec."Last Possible Ending Date" := ServOrderRec."Ending Date";
        //db.en, 17-12-12: C003246
        ServOrderRec.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Service Order No." := ServOrderRec."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServOrderRec.TABLECAPTION, ServOrderRec."No.");
    END;

    PROCEDURE GenerateServiceLocation@1210190002();
    VAR
      ServiceSetup@1210190001 : Record 11012800;
      ServLocRec@1210190000 : Record 11012801;
    BEGIN
      ServiceSetup.GET;

      ServLocRec.INIT;
      ServLocRec."No." := NewCode;
      ServLocRec."No. Series" := CurrSeries;
      ServLocRec.INSERT(TRUE);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServLocRec.VALIDATE(Description, TryoutRec.Description);
        ServLocRec."Description 2" := TryoutRec."Description 2";  // dp00248.n
        ServLocRec.Address := TryoutRec.Address;
        ServLocRec."Address 2" := TryoutRec."Address 2";
        ServLocRec.City := TryoutRec.City;
        ServLocRec."Post Code" := TryoutRec."Post Code";
        ServLocRec.County := TryoutRec.County;
        ServLocRec."Country/Region Code":= TryoutRec."Country/Region Code";
        ServLocRec."Territory Code":= TryoutRec."Territory Code";
        ServLocRec."Location Manager"  := TryoutRec."Salesperson Code";
        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          ServLocRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        ServLocRec.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);
        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServLocRec.VALIDATE(Description, TryoutQuoteRec.Description);
        ServLocRec."Description 2" := TryoutQuoteRec."Description 2";
        ServLocRec.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        ServLocRec.Address := TryoutQuoteRec.Address;
        ServLocRec."Address 2" := TryoutQuoteRec."Address 2";
        ServLocRec.City := TryoutQuoteRec.City;
        ServLocRec."Post Code" := TryoutQuoteRec."Post Code";
        ServLocRec.County := TryoutQuoteRec.County;
        ServLocRec."Country/Region Code":= TryoutQuoteRec."Country/Region Code";
        ServLocRec."Territory Code":= TryoutQuoteRec."Territory Code";
        ServLocRec."Contact Name" := TryoutQuoteRec."Contact Person Name";
        IF ServLocRec."Contact Name" <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone", "Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ServLocRec."Phone No." := TryoutQuoteRec."Contact Phone";
          ServLocRec."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ServLocRec."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ServLocRec."Fax No." := TryoutQuoteRec."Contact Fax";
          ServLocRec."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        IF TryoutQuoteRec.Estimator <> '' THEN  //db, 20-12-12: 25975
          ServLocRec.Estimator := TryoutQuoteRec.Estimator;
        ServLocRec."Location Manager"  := TryoutQuoteRec."Salesperson Code";
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          ServLocRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        ServLocRec.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Service Location No." := ServLocRec."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServLocRec.TABLECAPTION, ServLocRec."No.");
    END;

    PROCEDURE GenerateServiceContract@1210190004();
    VAR
      ServiceSetup@1210190001 : Record 11012800;
      ServContrRec@1210190000 : Record 11012812;
    BEGIN
      ServiceSetup.GET;

      ServContrRec.INIT;
      ServContrRec."No." := NewCode;
      ServContrRec."No. Series" := CurrSeries;
      ServContrRec.INSERT(TRUE);

      IF ServContrRec."Service Type" = '' THEN
        ServContrRec."Service Type" := ServContrRec.DetServiceTypeSeriesSimple;   //db, 22-09-09: M16533

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServContrRec.VALIDATE(Description, TryoutRec.Description);
        ServContrRec."Description 2" := TryoutRec."Description 2";  // dp00248.n
        ServContrRec."Contract Manager"  := TryoutRec."Salesperson Code";
        IF TryoutRec."Global Dimension 1 Code" <> '' THEN
          ServContrRec.VALIDATE("Global Dimension 1 Code", TryoutRec."Global Dimension 1 Code");
        ServContrRec.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);
        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServContrRec.VALIDATE(Description, TryoutQuoteRec.Description);
        ServContrRec."Description 2" := TryoutQuoteRec."Description 2";
        ServContrRec.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        ServContrRec."Contact Name" := TryoutQuoteRec."Contact Person Name";
        IF ServContrRec."Contact Name" <> '' THEN BEGIN
          TryoutQuoteRec.CALCFIELDS("Contact Phone", "Contact Phone 2", "Contact Mobile Phone",
            "Contact Fax", "Contact E-Mail");
          ServContrRec."Phone No." := TryoutQuoteRec."Contact Phone";
          ServContrRec."Phone No. 2" := TryoutQuoteRec."Contact Phone 2";
          ServContrRec."Mobile Phone No." := TryoutQuoteRec."Contact Mobile Phone";
          ServContrRec."Fax No." := TryoutQuoteRec."Contact Fax";
          ServContrRec."E-Mail" := TryoutQuoteRec."Contact E-Mail";
        END;
        ServContrRec."Contract Manager"  := TryoutQuoteRec."Salesperson Code";
        IF TryoutQuoteRec."Global Dimension 1 Code" <> '' THEN
          ServContrRec.VALIDATE("Global Dimension 1 Code", TryoutQuoteRec."Global Dimension 1 Code");
        ServContrRec.VALIDATE("Bill-to Customer No. (CP)", TryoutQuoteRec."Bill-to Customer No.");    //evdb.sn
        ServContrRec."Bill-to Name (Cost Plus)" := TryoutQuoteRec."Bill-to Name";
        ServContrRec."Bill-to Name 2 (Cost Plus)" := TryoutQuoteRec."Bill-to Name 2";
        ServContrRec."Bill-to Address (Cost Plus)" := TryoutQuoteRec."Bill-to Address";
        ServContrRec."Bill-to Address 2 (Cost Plus)" := TryoutQuoteRec."Bill-to Address 2";
        ServContrRec."Bill-to Post Code (Cost Plus)" := TryoutQuoteRec."Bill-to Post Code";
        ServContrRec."Bill-to City (Cost Plus)" := TryoutQuoteRec."Bill-to City";
        ServContrRec."Contact Person"   := TryoutQuoteRec."Contact Person No.";
        ServContrRec."Contact Person Name" := TryoutQuoteRec."Contact Person Name";
        ServContrRec."Bill-to Contact Person (CP)" := TryoutQuoteRec."Bill-to Contact No (Person)";
        ServContrRec."Bill-to Cont. Person Name (CP)" := TryoutQuoteRec."Bill-to Contact Name";  //evdb.en
        ServContrRec.VALIDATE("Bill-to Customer No. (Contr.)", TryoutQuoteRec."Bill-to Customer No.");
        ServContrRec."Bill-to Name (Contract)" := TryoutQuoteRec."Bill-to Name";
        ServContrRec."Bill-to Name 2 (Contract)" := TryoutQuoteRec."Bill-to Name 2";
        ServContrRec."Bill-to Address (Contract)" := TryoutQuoteRec."Bill-to Address";
        ServContrRec."Bill-to Address 2 (Contract)" := TryoutQuoteRec."Bill-to Address 2";
        ServContrRec."Bill-to Post Code (Contract)" := TryoutQuoteRec."Bill-to Post Code";
        ServContrRec."Bill-to City (Contract)" := TryoutQuoteRec."Bill-to City";
        ServContrRec."Your Reference" := TryoutQuoteRec."Your reference";  //db, 17-12-12: 34378
        ServContrRec.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Service Contract No." := ServContrRec."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServContrRec.TABLECAPTION, ServContrRec."No.");
    END;

    PROCEDURE GenerateServiceSurvey@1100528600();
    VAR
      ServiceSurvey@1100528600 : Record 11071803;
    BEGIN
      ServiceSurvey.INIT;
      ServiceSurvey."No." := NewCode;
      ServiceSurvey."No. Series" := CurrSeries;
      ServiceSurvey.INSERT(TRUE);

      IF SuccQuote = FALSE THEN BEGIN
        TryoutRec.GET(SuccFilter);
        ServiceSurvey.VALIDATE(Description, TryoutRec.Description);
        ServiceSurvey."Description 2" := TryoutRec."Description 2";  // dp00248.n
        ServiceSurvey.MODIFY;
      END ELSE BEGIN
        TryoutQuoteRec.GET(SuccFilter);
        TryoutQuoteRec.CALCFIELDS("Contact Person Name");
        ServiceSurvey.VALIDATE(Description, TryoutQuoteRec.Description);
        ServiceSurvey."Description 2" := TryoutQuoteRec."Description 2";  // dp00248.n
        ServiceSurvey.VALIDATE("Contact No. (Company)", TryoutQuoteRec."Contact No.");
        ServiceSurvey.VALIDATE("Contact No. (Person)", TryoutQuoteRec."Contact Person No.");
        ServiceSurvey.VALIDATE("Customer No.", GetCustomer(TryoutQuoteRec."Contact No."));
        //DP00978.sn
        ServiceSurvey."Register Date" := TryoutQuoteRec."Register Date";
        IF TryoutQuoteRec.Estimator <> '' THEN
          ServiceSurvey.Estimator := TryoutQuoteRec.Estimator;
        //DP00978.en
        ServiceSurvey.MODIFY;
      END;

      TryoutSuccRec.GET(gvTryOut, gvTryOutQuote, gvTryOutLine);
      TryoutSuccRec."Service Survey No." := ServiceSurvey."No.";
      TryoutSuccRec.MODIFY;

      COMMIT;
      MESSAGE(Text000, ServiceSurvey.TABLECAPTION, ServiceSurvey."No.");
    END;

    PROCEDURE InsertProjectPrincipal@1100485003(lvCustomer@1210190001 : Code[20];lvProject@1100485000 : Code[20]);
    VAR
      ProjRec@1100485001 : Record 11072003;
      ProjPrincipalRec@1210190000 : Record 11012005;
      CommRec@1210190002 : Record 11012020;
      SettlRec@1210190003 : Record 11012021;
    BEGIN
      IF lvCustomer = '' THEN
        EXIT;

      JobSetup.GET;
      ProjRec.GET(lvProject);

      IF NOT ProjPrincipalRec.GET(lvProject, lvCustomer) THEN BEGIN
        ProjPrincipalRec.INIT;
        ProjPrincipalRec."Project No." := lvProject;
        ProjPrincipalRec.VALIDATE(Principal, lvCustomer);
        ProjPrincipalRec."Cost Plus Customer" := TRUE;
        IF ProjPrincipalRec."Cost Object" = '' THEN
          ProjPrincipalRec."Cost Object" := JobSetup."Cost Object Cost Plus";
        IF ProjPrincipalRec."VAT Prod. Posting Group" = '' THEN
          ProjPrincipalRec."VAT Prod. Posting Group" := JobSetup."VAT Prod. Post Group";
        ProjPrincipalRec.VALIDATE("Bill-to Customer No.", TryoutQuoteRec."Bill-to Customer No.");  //evdb.sn
        ProjPrincipalRec."Bill-to Name" := TryoutQuoteRec."Bill-to Name";
        ProjPrincipalRec."Bill-to Name 2" := TryoutQuoteRec."Bill-to Name 2";
        ProjPrincipalRec."Bill-to Address" := TryoutQuoteRec."Bill-to Address";
        ProjPrincipalRec."Bill-to Address 2" := TryoutQuoteRec."Bill-to Address 2";
        ProjPrincipalRec."Bill-to Post Code" := TryoutQuoteRec."Bill-to Post Code";
        ProjPrincipalRec."Bill-to City" := TryoutQuoteRec."Bill-to City";                          //evdb.en
        ProjPrincipalRec.INSERT(TRUE);
      END;

      CommRec.RESET;
      CommRec.SETRANGE("Project No.", lvProject);
      CommRec.SETRANGE(Principal, lvCustomer);
      IF NOT CommRec.FINDLAST THEN BEGIN
        CommRec.INIT;
        CommRec."Project No." := lvProject;
        CommRec.Principal := lvCustomer;
        CommRec."No." := '1';
        CommRec.Text := ProjRec.Text;
        CommRec.Description := ProjRec.Description;
        //CommRec."Collect Invoices By" := JobSetup."Default Collect Invoices By"; //from customer, is done in InitRecord
        CommRec.InitRecord();
        CommRec.INSERT;
      END;

      SettlRec.RESET;
      SettlRec.SETRANGE("Project No.", lvProject);
      SettlRec.SETRANGE(Principal, lvCustomer);
      SettlRec.SETRANGE("Commission No.", CommRec."No.");
      IF NOT SettlRec.FINDLAST THEN BEGIN
        SettlRec.INIT;
        SettlRec."Project No." := lvProject;
        SettlRec.Principal := lvCustomer;
        SettlRec."Commission No." := CommRec."No.";
        SettlRec."No." := '1';
        SettlRec.Description := ProjRec.Description;
        SettlRec.Text := ProjRec.Text;
        SettlRec."Reference Date" := TODAY;
        SettlRec.INSERT;
        SettlRec.InsertDefCustAgreementLines(
          SettlRec."Project No.", SettlRec.Principal, SettlRec."Commission No.", SettlRec."No.", SettlRec."Reference Date");
      END;
    END;

    PROCEDURE GetCustomer@1210190003(lvContact@1210190000 : Code[20]) : Code[20];
    VAR
      ContBusRel@1210190001 : Record 5054;
    BEGIN
      ContBusRel.RESET;
      ContBusRel.SETCURRENTKEY("Contact No.", "Business Relation Code");
      ContBusRel.SETRANGE("Contact No.", lvContact);
      ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FIND('-') THEN
        EXIT(ContBusRel."No.");

      EXIT('');
    END;

    PROCEDURE CheckSeries@1210190005(lvAssistEdit@1100485000 : Boolean);
    VAR
      SerieRel@1210190000 : Record 310;
      ServiceSourceTypeSetup@1210190001 : Record 11071726;
    BEGIN
      CASE gvAction OF
        10,13:
          BEGIN
            EstSetup.GET;
            EstSetup.TESTFIELD("Estimate Nos.");
            CurrSeries := EstSetup."Estimate Nos.";
          END;
        12:  //ISS
          BEGIN
            RawSetup.GET;
            RawSetup.TESTFIELD("Estimate Nos.");
            CurrSeries := RawSetup."Estimate Nos.";
          END;
        20:
          BEGIN
            JobSetup.GET;
            JobSetup.TESTFIELD("Job Nos.");
            CurrSeries := JobSetup."Job Nos.";
          END;
        21:
          BEGIN
            JobSetup.GET;
            JobSetup.TESTFIELD("Small Project Nos.");
            CurrSeries := JobSetup."Small Project Nos.";
          END;
        22: //kzwerver, 110527, n, #27456
          BEGIN
            JobSetup.GET;
            JobSetup.TESTFIELD("Assembly Project Nos.");
            CurrSeries := JobSetup."Assembly Project Nos.";
          END;
        30:
          BEGIN
            ServiceSourceTypeSetup.GET(ServiceSourceTypeSetup."Source Type"::Direct);
            ServiceSourceTypeSetup.TESTFIELD("No. Series");
            CurrSeries := ServiceSourceTypeSetup."No. Series";
          END;
        31:
          BEGIN
            ServSetup.GET;
            ServSetup.TESTFIELD("Service Location Nos.");
            CurrSeries := ServSetup."Service Location Nos.";
          END;
        32:
          BEGIN
            ServSetup.GET;
            ServSetup.TESTFIELD("Service Contract Nos.");
            CurrSeries := ServSetup."Service Contract Nos.";
          END;
        33:
          BEGIN
            ServSetup.GET;
            ServSetup.TESTFIELD("Survey Nos.");
            CurrSeries := ServSetup."Survey Nos.";
          END;
      END;

      IF lvAssistEdit = FALSE THEN  //db, 25-06-15: C024158
        IF CheckMoreSeries THEN
          lvAssistEdit := TRUE;

      IF lvAssistEdit = TRUE THEN
        NoSeriesMgt.SelectSeries(CurrSeries, CurrSeries, CurrSeries);

      DetermineNewCode(FALSE);

      IF CRMSetup."Inherit No. at Successor" THEN BEGIN
        CurrSeries := '';
        NewCode := SuccFilter;
        NewCodeEditable := FALSE;
      END ELSE BEGIN
        NewCodeEditable := CheckSeriesManual;
      END;
    END;

    PROCEDURE CheckSeriesManual@1100485006() : Boolean;
    VAR
      NoSeries@1100485000 : Record 308;
    BEGIN
      IF NOT NoSeries.GET(CurrSeries) THEN
        EXIT(TRUE);
      EXIT(NoSeries."Manual Nos.");
    END;

    PROCEDURE CheckSeriesDefaultNos@1100525001() : Boolean;
    VAR
      NoSeries@1100485000 : Record 308;
    BEGIN
      IF CurrSeries = '' THEN
        EXIT(FALSE);
      IF NOT NoSeries.GET(CurrSeries) THEN
        EXIT(FALSE);
      EXIT(NoSeries."Default Nos.");
    END;

    PROCEDURE DetermineNewCode@1000000000(lvUpdate@1100485000 : Boolean);
    BEGIN
      IF CheckSeriesDefaultNos THEN BEGIN
        CLEAR(NoSeriesMgt);
        NewCode := NoSeriesMgt.GetNextNo(CurrSeries,0D,lvUpdate);
      END ELSE BEGIN
        IF CurrSeries <> '' THEN
          NewCode := '';
      END;
    END;

    PROCEDURE CheckNewCode@1100485002();
    VAR
      lvText000@1100485000 : TextConst 'ENU=%1 %2 already exists';
      EstRec@1100485001 : Record 11012151;
      ProjRec@1100485002 : Record 11072003;
      ServOrderRec@1100485003 : Record 11012823;
      ServLocRec@1100485004 : Record 11012801;
      ServContrRec@1100485005 : Record 11012812;
      ServiceSurvey@1210190000 : Record 11071803;
    BEGIN
      CASE gvAction OF
        10,12,13: IF EstRec.GET(NewCode) THEN ERROR(lvText000, EstRec.TABLECAPTION, NewCode);
        20,21,22: IF ProjRec.GET(NewCode) THEN ERROR(lvText000, ProjRec.TABLECAPTION, NewCode);
        30: IF ServOrderRec.GET(NewCode) THEN ERROR(lvText000, ServOrderRec.TABLECAPTION, NewCode);
        31: IF ServLocRec.GET(NewCode) THEN ERROR(lvText000, ServLocRec.TABLECAPTION, NewCode);
        32: IF ServContrRec.GET(NewCode) THEN ERROR(lvText000, ServContrRec.TABLECAPTION, NewCode);
        33: IF ServiceSurvey.GET(NewCode) THEN ERROR(lvText000, ServiceSurvey.TABLECAPTION, NewCode);
      END;
    END;

    PROCEDURE GenerateProjRespPers@1100525000(TryOutNo@1100525000 : Code[20];ProjectNo@1100525001 : Code[20]);
    VAR
      ProjRespPersRec@1100525003 : Record 11012040;
    BEGIN
      TryoutRespPersRec.SETRANGE("Try-out", TryOutNo);
      IF TryoutRespPersRec.FINDSET THEN
        REPEAT
          ProjRespPersRec.INIT;
          ProjRespPersRec."Project No." := ProjectNo;
          ProjRespPersRec."Line No." := ProjRespPersRec."Line No." + 10000;
          ProjRespPersRec.Responsibility := TryoutRespPersRec.Responsibility;
          ProjRespPersRec."Employee No." := TryoutRespPersRec.Employee;
          ProjRespPersRec.INSERT(TRUE);
        UNTIL TryoutRespPersRec.NEXT = 0;
    END;

    LOCAL PROCEDURE NewCodeOnAfterValidate@19056113();
    BEGIN
      CheckNewCode;
      CurrSeries := '';
    END;

    PROCEDURE ReadEstimateSource@1210190007(EstNo@1210190000 : Code[20];SummaryType@1100525000 : Integer) SummaryCode : Code[20];
    VAR
      Estimate@1210190001 : Record 11012151;
    BEGIN
      //db, 16-01-15: C020093
      IF Estimate.GET(EstNo) THEN BEGIN
        IF SummaryType = 0 THEN
          SummaryCode := Estimate."Summary (Cost)"
        ELSE
          SummaryCode := Estimate."Summary (Sales)";
      END;
    END;

    PROCEDURE UpdateResponsibility@1100525003(IProjNo@1210190000 : Code[20];INewEmplNo@1100525002 : Code[20]);
    VAR
      lvProjRespPersRec@1100525004 : Record 11012040;
      lvProjRespPersRec2@1100525006 : Record 11012040;
      lvRespCode@1100525003 : Code[10];
    BEGIN
      JobSetup.GET;
      lvRespCode := JobSetup."Responsibility Estimator";

      IF (lvRespCode = '') OR (INewEmplNo = '') THEN
        EXIT;

      lvProjRespPersRec.SETCURRENTKEY("Employee No.", Responsibility, "Project No.");
      lvProjRespPersRec.SETRANGE("Project No.", IProjNo);
      lvProjRespPersRec.SETRANGE(Responsibility, lvRespCode);
      lvProjRespPersRec2.SETCURRENTKEY("Employee No.", Responsibility, "Project No.");
      lvProjRespPersRec2.SETRANGE("Project No.", IProjNo);
      lvProjRespPersRec2.SETRANGE(Responsibility, lvRespCode);

      lvProjRespPersRec.SETRANGE("Employee No.", INewEmplNo);
      IF NOT lvProjRespPersRec.FINDFIRST THEN BEGIN
        lvProjRespPersRec2.RESET;
        lvProjRespPersRec2.SETRANGE("Project No.", IProjNo);
        IF NOT lvProjRespPersRec2.FINDLAST THEN
          lvProjRespPersRec2."Line No." := 0;
        lvProjRespPersRec.RESET;
        lvProjRespPersRec.INIT;
        lvProjRespPersRec."Project No." := IProjNo;
        lvProjRespPersRec."Line No." := lvProjRespPersRec2."Line No." + 10000;
        lvProjRespPersRec.Responsibility := lvRespCode;
        lvProjRespPersRec."Employee No." := INewEmplNo;
        lvProjRespPersRec.INSERT; // M 25818
      END;
    END;

    PROCEDURE CheckMoreSeries@1100525002() : Boolean;
    VAR
      SerieRelation@1100525000 : Record 310;
    BEGIN
      //db, 25-06-15: C024158
      SerieRelation.SETRANGE(Code, CurrSeries);
      IF SerieRelation.FIND('-') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

