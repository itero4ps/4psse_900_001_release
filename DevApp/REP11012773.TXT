OBJECT Report 11012773 Mail Subcontr. Inv. not Receiv
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Mail Subcontractor Invoice not Received;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   NoOfDays := 7;
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.)
                                 WHERE(Subcontractor=CONST(Yes));
               OnAfterGetRecord=VAR
                                  ServiceSubcontrEmailMgt@1100409000 : Codeunit 11012857;
                                  SubcontractorNo@1100528400 : Code[20];
                                BEGIN
                                  SubcontractorNo := Vendor.GetResourceNo;
                                  IF SubcontractorNo <> '' THEN
                                    IF ServiceOrderHasOpenPurchOrder('', SubcontractorNo, NoOfDays) THEN
                                      ServiceSubcontrEmailMgt.SendSOListMail("No.", 1, NoOfDays, 3031);
                                END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100409000;;Container;
                  ContainerType=ContentArea }

      { 1100409001;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100409002;2;Field  ;
                  CaptionML=ENU=Period (Days) after Technical Finished;
                  SourceExpr=NoOfDays;
                  MinValue=0 }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1100409000 : TextConst 'ENU=List Service Orders Invoice not Received';
      NoOfDays@1100409001 : Integer;

    PROCEDURE ServiceOrderHasOpenPurchOrder@1100528601(IServiceOrderNo@1100526102 : Code[20];ISubcontractorNo@1100528600 : Code[20];INoOfDays@1100526103 : Integer) : Boolean;
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      AdviceOrderLine@1100528602 : Record 11012055;
      PurchaseRouteReference@1100528603 : Record 11012079;
      PurchaseHeader@1100528605 : Record 38;
      ResourceWOP@1100528400 : Record 11229278;
      PurchRouteRefManagement@1100526101 : Codeunit 11012045;
      VendorNo@1100528401 : Code[20];
      OpenPurchaseOrder@1100526100 : Boolean;
    BEGIN
      IF NOT ResourceWOP.GET(ISubcontractorNo) THEN
        EXIT(FALSE);

      VendorNo := ResourceWOP.GetVendorNo;

      IF IServiceOrderNo <> '' THEN
        ServiceOrder.SETRANGE("No.", IServiceOrderNo)
      ELSE
        ServiceOrder.SETCURRENTKEY(Subcontractor);
      ServiceOrder.SETRANGE(Subcontractor, ISubcontractorNo);
      ServiceOrder.SETRANGE(Status, ServiceOrder.Status::"Technical Finished");
      ServiceOrder.SETFILTER("Closing Date", '<>%1&<%2', 0D, TODAY - INoOfDays);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
          AdviceOrderLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          AdviceOrderLine.SETRANGE(Vendor, VendorNo);
          AdviceOrderLine.SETFILTER("Purchase Route Reference", '<>%1', '');
          IF AdviceOrderLine.FINDSET THEN BEGIN
            REPEAT
              PurchRouteRefManagement.UpdateReferenceLines(AdviceOrderLine."Purchase Route Reference");
              PurchaseRouteReference.SETRANGE(Type, PurchaseRouteReference.Type::Reference);
              PurchaseRouteReference.SETRANGE("Reference No.", AdviceOrderLine."Purchase Route Reference");
              PurchaseRouteReference.SETRANGE("Line Type", PurchaseRouteReference."Line Type"::"Purchase Order Line");
              IF PurchaseRouteReference.FINDSET THEN
                REPEAT
                  IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, PurchaseRouteReference."No.") THEN
                    IF PurchaseHeader.Status < PurchaseHeader.Status::Closed THEN
                      OpenPurchaseOrder := TRUE;
                UNTIL OpenPurchaseOrder OR (PurchaseRouteReference.NEXT = 0);
              PurchaseRouteReference.SETRANGE("Line Type");
              PurchaseRouteReference.DELETEALL(TRUE);
              IF OpenPurchaseOrder THEN
                EXIT(TRUE);
            UNTIL AdviceOrderLine.NEXT = 0;
          END;
        UNTIL ServiceOrder.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

