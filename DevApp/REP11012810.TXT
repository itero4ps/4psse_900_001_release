OBJECT Report 11012810 Close Service Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Close Service Orders;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF PostingDate = 0D THEN
                    ERROR(Text000);

                  ServContract.COPY("Service-Contract");
                  //FilterServContract := ("Service-Contract".GETFILTERS <> '');  //db, 06-12-10: M24359 (new field on request form)
                END;

    OnPostReport=BEGIN
                   ClosingProcedure.DisplayError;
                 END;

  }
  DATASET
  {
    { 1373;    ;DataItem;                    ;
               DataItemTable=Table11012823;
               OnPreDataItem=BEGIN
                               IF PostClosedServOrder THEN BEGIN
                                 IF GETFILTER(Status) <> '' THEN
                                   IF NOT CONFIRM(Text006) THEN
                                     ERROR(Text007);

                               //SETRANGE(Status, Status::"Administrative Finished");  //db, 29-03-10
                                 SETFILTER(Status, '%1|%2', Status::"Administrative Finished", Status::Finished);  //db, 29-03-10
                               END ELSE BEGIN
                                 IF GETFILTER(Status) = '' THEN BEGIN  //db, 31-03-10
                                   FILTERGROUP(6);
                                   SETFILTER(Status, '<=%1', Status::"Administrative Finished");
                                   ServOrderRec.FILTERGROUP(6);
                                   ServOrderRec.COPYFILTERS("Service Order");
                                   ServOrderRec.FILTERGROUP(0);
                                   FILTERGROUP(0);
                                 END;
                               END;

                               ServOrderRec.COPYFILTERS("Service Order");
                               IF NOT ServOrderRec.FINDFIRST THEN
                                 MESSAGE(Text001);
                             END;

               OnAfterGetRecord=VAR
                                  ServiceContract@1100528600 : Record 11012812;
                                  ServiceContractCtrlPeriod@1100525000 : Record 11071746;
                                  ServiceOrderExtension@1100528601 : Record 11071727;
                                BEGIN
                                  IF NOT ServContrInFilter THEN
                                    CurrReport.SKIP;

                                  ServiceOrderExtension.GetServOrderExtension("No.");
                                  IF OnlySOsWithoutMasterProject AND (ServiceOrderExtension."Master Project" <> '') THEN
                                    CurrReport.SKIP;

                                  IF ("Service Contract No." <> '') THEN BEGIN
                                    ServiceContract.GET("Service Contract No.");
                                    IF (ServiceContract."Contract Form" <> ServiceContract."Contract Form"::"Framework Contract") AND
                                        NOT (ServiceContract.IsAlwaysCloseOrdersAllowed("Service Contract No.", "Source Type")) AND
                                       (ServiceContract.Status < ServiceContract.Status::Expired)
                                    THEN BEGIN
                                      //mg.sc, 11-10-13: C009991
                                      ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", "Service Contract No.");
                                      ServiceContractCtrlPeriod.SETFILTER("Starting Date", '<=%1', "Service Control Period Date");
                                      ServiceContractCtrlPeriod.SETFILTER("Ending Date", '>=%1', "Service Control Period Date");
                                      IF NOT ServiceContractCtrlPeriod.FINDFIRST OR (ServiceContractCtrlPeriod."Date Finished" = 0D) THEN
                                        CurrReport.SKIP;
                                      //mg.ec, 11-10-13: C009991
                                    END;
                                  END;

                                  IF CheckOrderStatus THEN  //db, 29-03-10
                                    ProcessServOrder;
                                END;

               ReqFilterFields=No.,Status,Closing Date }

    { 4178;    ;DataItem;                    ;
               DataItemTable=Table11012812;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF NOT FilterServContract THEN CurrReport.BREAK;  //db, 29-03-10
                             END;

               ReqFilterFields=Status,Renewal Date }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   PostingDate := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1100528300;;Container;
                  ContainerType=ContentArea }

      { 1100528600;1;Group  ;
                  CaptionML=ENU=Extra Filter;
                  GroupType=Group }

      { 1100528601;2;Field  ;
                  CaptionML=ENU=Only Service Orders without Master Project;
                  SourceExpr=OnlySOsWithoutMasterProject }

      { 1100528301;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100528302;2;Field  ;
                  CaptionML=ENU=Posting Date;
                  SourceExpr=PostingDate }

      { 1100528303;2;Field  ;
                  CaptionML=ENU=Ingnore Sales Control;
                  SourceExpr=IgnoreSales;
                  OnValidate=BEGIN
                               IF IgnoreSales THEN
                                 MESSAGE(Text004 + Text005);
                             END;
                              }

      { 1100528304;2;Field  ;
                  CaptionML=ENU=Ignore Purchase Control;
                  SourceExpr=IgnorePurchase;
                  OnValidate=BEGIN
                               IF IgnorePurchase THEN
                                 MESSAGE(Text002 + Text003);
                             END;
                              }

      { 1100525000;2;Field  ;
                  CaptionML=ENU=Ignore Plant Location Control;
                  SourceExpr=IgnorePlant }

      { 1100529100;2;Field  ;
                  CaptionML=ENU=Ignore Work Orders;
                  SourceExpr=IgnoreWorkOrders }

      { 1100528305;2;Field  ;
                  CaptionML=ENU=Ignore Future Posting Control;
                  SourceExpr=IgnoreFuturePostings }

      { 1100528306;2;Field  ;
                  CaptionML=ENU=Filter Service Contract;
                  SourceExpr=FilterServContract }

      { 1100528308;2;Field  ;
                  CaptionML=ENU=All sales  invoices payed;
                  SourceExpr=CheckInvoicesPayed }

      { 1100528309;2;Field  ;
                  CaptionML=ENU=Post;
                  SourceExpr=PostClosedServOrder }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012042 : TextConst 'ENU=Select Posting Date on Option Tab';
      Text001@11012043 : TextConst 'ENU=There are no Service Orders with status Administrative Finished.';
      ServOrderRec@11012000 : Record 11012823;
      ServContract@1100525001 : Record 11012812;
      ServEntryRec@1100525002 : Record 11012819;
      PostingDate@1210190001 : Date;
      PostClosedServOrder@1210190006 : Boolean;
      IgnorePurchase@11012040 : Boolean;
      IgnoreSales@11012041 : Boolean;
      IgnorePlant@1100525000 : Boolean;
      IgnoreWorkOrders@1100529100 : Boolean;
      IgnoreFuturePostings@1100485002 : Boolean;
      ClosingProcedure@1210190015 : Codeunit 11012046;
      Text002@1210190005 : TextConst 'ENU=Ignoring the Purchase Check could result in closing Service Orders too early.\';
      Text003@1210190004 : TextConst 'ENU=There could still be Purchase Orders present.';
      Text004@1210190003 : TextConst 'ENU=Ignoring the Sales Check could result in closing Service Orders too early.\';
      Text005@1210190002 : TextConst 'ENU=There could still not Invoiced Cost Plus Entries or Installment Lines present.';
      gvType@1210190000 : 'Project,Service Contract,Service Order';
      Text006@1100485001 : TextConst 'ENU="You have chosen to post and you''ve put a filter on Status. Would you like to continue posting Service Orders with predefined Status ? "';
      Text007@1100485000 : TextConst 'ENU=Closing is stopped.';
      FilterServContract@1100525003 : Boolean;
      CheckInvoicesPayed@1100409000 : Boolean;
      OnlySOsWithoutMasterProject@1100528600 : Boolean INDATASET;

    PROCEDURE ServContrInFilter@1100525000() : Boolean;
    BEGIN
      IF NOT FilterServContract THEN
        EXIT(TRUE);

      ServContract.FILTERGROUP(10);
      ServContract.SETRANGE("No.", "Service Order"."Service Contract No.");
      EXIT(NOT ServContract.ISEMPTY);
    END;

    PROCEDURE ProcessServOrder@1100525001();
    BEGIN
      //db, 29-03-10
      CLEAR(ClosingProcedure);  //Needed because each Service Order is committed now in ClosingProcedure.
      ClosingProcedure.SetSelection(gvType::"Service Order", '', "Service Order"."Service Contract No.", "Service Order"."No.",
        PostingDate, IgnorePurchase, IgnoreSales, IgnoreFuturePostings, FALSE, IgnoreWorkOrders, '', FALSE);
      ClosingProcedure.SetSelectionIgnorePlant(IgnorePlant);
      ClosingProcedure.SetServOrderExtraTest(CheckInvoicesPayed);
      ClosingProcedure.Check;
      IF PostClosedServOrder THEN
        ClosingProcedure.Post;
    END;

    PROCEDURE CheckOrderStatus@1100525003() : Boolean;
    BEGIN
      //db, 29-03-10
      WITH "Service Order" DO BEGIN
        IF Status = Status::"Administrative Finished" THEN EXIT(TRUE);

        IF (Status = Status::Finished) OR (Status = Status::Cancelled) THEN BEGIN
          CALCFIELDS("Serv.Order WIP not processed");
          EXIT("Serv.Order WIP not processed");
        END;
      END;
      EXIT(FALSE);
    END;

    BEGIN
    {
      db, 29-03-10: extra filter on entries to process contractual costs on service order at the same time with contract revenue.
    }
    END.
  }
  RDLDATA
  {
  }
}

