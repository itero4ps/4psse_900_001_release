OBJECT Report 11012859 Process Collective-List
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Process Collective-List;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ServSetup.GET;
                 END;

    OnPostReport=VAR
                   InvoiceRange@1100528600 : Text[50];
                   CreditMemoRange@1100528601 : Text[50];
                   InvoiceProposalRange@1100529300 : Text[50];
                   InternalCounter@1100528602 : Integer;
                 BEGIN
                   InternalCounter := InternalChargeMgt.GetNumInternalCharges;

                   IF InternalChargeMgt.GetNumInternalCharges > 0 THEN
                     InternalChargeMgt.PostBatch(1, TempGenJnlLine, TmpIcEntry);  //DP00847.c

                   IF (InvCounter = 0) AND (CreditMemoCounter = 0) AND (InternalCounter = 0) AND (InvProposalCounter = 0) THEN //DP00195.c
                     MESSAGE(Text005)
                   ELSE BEGIN
                     IF FirstSalesHeaderNo <> '' THEN
                       IF FirstSalesHeaderNo <> LastSalesHeaderNo THEN
                         InvoiceRange := STRSUBSTNO('%1..%2', FirstSalesHeaderNo, LastSalesHeaderNo)
                       ELSE
                         InvoiceRange := FirstSalesHeaderNo;
                     IF FirstSalesCreditMemoNo <> '' THEN
                       IF FirstSalesCreditMemoNo <> LastSalesCreditMemoNo THEN
                         CreditMemoRange := STRSUBSTNO('%1..%2', FirstSalesCreditMemoNo, LastSalesCreditMemoNo)
                       ELSE
                         CreditMemoRange := FirstSalesCreditMemoNo;
                      //DP00195.sn
                      IF FirstInvoiceProposalNo <> '' THEN
                        IF FirstInvoiceProposalNo <> LastInvoiceProposalNo THEN
                          InvoiceProposalRange := STRSUBSTNO('%1..%2', FirstInvoiceProposalNo, LastInvoiceProposalNo)
                        ELSE
                          InvoiceProposalRange := FirstInvoiceProposalNo;
                      //DP00195.en

                     MESSAGE(
                       Text006,
                       InvCounter, InvoiceRange, CreditMemoCounter, CreditMemoRange, InvProposalCounter,InvoiceProposalRange, //DP00195.c
                       LineCounter, InternalCounter);
                   END;
                 END;

  }
  DATASET
  {
    { 8464;    ;DataItem;                    ;
               DataItemTable=Table11071730;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF ReleaseCollectiveList THEN
                                 SETFILTER(Status, '<%1', Status::Processed)
                               ELSE
                                 SETRANGE(Status, Status::Released);
                             END;

               OnAfterGetRecord=VAR
                                  ContinueProcessing@1100528600 : Boolean;
                                  PlantLocation@1100529000 : Record 11012554;
                                BEGIN
                                  ContinueProcessing := TRUE;

                                  IF ((("Ending Date" = 0D) OR ("Ending Date" > TODAY)) AND
                                       ("Minimal Invoice Amount" > 0) AND (GetTotalInvoicePrice < "Minimal Invoice Amount")) OR
                                     (("Ending Date" > TODAY) AND ("Minimal Invoice Amount" = 0))
                                  THEN
                                    CurrReport.SKIP;

                                  InsertHeader := TRUE;
                                  //DP00195.sn
                                  IsPlantServiceOrder := FALSE;
                                  IF "Service Collective-List"."Service Order No." <> '' THEN
                                    IF ServiceOrder.GET("Service Collective-List"."Service Order No.") THEN BEGIN
                                      IsPlantServiceOrder := ServiceOrder.IsPlantServiceOrder;
                                      //DP00847.sn
                                      IF IsPlantServiceOrder THEN BEGIN
                                        PlantLocation.GET(ServiceOrder."Plant Location");
                                        IF (PlantLocation."Project No." <> '') THEN
                                          CompanyPlantInvoice := PlantLocation."Company Name";
                                      END;
                                      //DP00847.en
                                    END;
                                  //DP00195.en

                                  IF RecalculateCollectiveList THEN
                                    ForceRecalculate(FALSE);
                                  IF ReleaseCollectiveList AND (Status <> Status::Released) THEN BEGIN
                                    Status := Status::Released; // no validate
                                    MODIFY(TRUE);
                                  END;
                                  IF Status <> Status::Released THEN
                                    CurrReport.SKIP;
                                END;

               OnPostDataItem=VAR
                                SalesCalcDiscount@1100409000 : Codeunit 60;
                              BEGIN
                                ProcessInvoiceDiscountSurcharge(SalesHeaderRec."Document Date");
                                SalesCalcDiscount.CalculateIncDiscForHeader(SalesHeaderRec);
                              END;

               ReqFilterFields=No. }

    { 4731;1   ;DataItem;                    ;
               DataItemTable=Table11071931;
               DataItemTableView=SORTING(Collective List No.,Line No.)
                                 WHERE(Invoiced=CONST(No));
               OnAfterGetRecord=VAR
                                  ServiceContract@1100528600 : Record 11012812;
                                BEGIN
                                  ServiceContract.GET("Service Contract No.");
                                  ServiceContract.TESTFIELD("Bill-to Customer No. (Contr.)");
                                  IF InsertHeader THEN
                                    InsertSalesHeader(
                                      "Service Collective-List", ServiceContract."% Labor", ServiceContract."% to B Account", ServiceContract."Your Reference",
                                      '', 0D, "Service Collective-List"."Service Order No.", ServiceContract."No.",
                                      ServiceContract."Global Dimension 1 Code", ServiceContract."Bill-to Customer No. (Contr.)");
                                  InsertSCInvoicingSalesLine;

                                  Invoiced := TRUE;
                                  MODIFY;
                                END;

               DataItemLink=Collective List No.=FIELD(No.) }

    { 3589;1   ;DataItem;                    ;
               DataItemTable=Table11012825;
               DataItemTableView=SORTING(Collective List No.,Base Service Order No.,Service Order No.,Line No.,Invoiced,Chargeable)
                                 WHERE(Invoiced=CONST(No),
                                       Chargeable=CONST(Yes));
               OnPreDataItem=BEGIN
                               CASE SortingOrderType OF
                                 SortingOrderType::"Line No.":
                                   SETCURRENTKEY("Collective List No.", "Base Service Order No.", "Service Order No.", "Line No.");
                                 SortingOrderType::"Work Order - Cost Object":
                                   SETCURRENTKEY("Collective List No.", "Base Service Order No.", "Service Order No.", "Created by Work Order No.", "Cost Object");
                               END;
                               SalesHeaderRec.LOCKTABLE;
                               SalesLineRec.LOCKTABLE;
                               //DP00195.sn
                               IF IsPlantServiceOrder THEN
                                 "Service Order Cost Plus Entry".SETRANGE("Additional Cost", FALSE);
                               //DP00195.en
                             END;

               OnAfterGetRecord=VAR
                                  ServiceOrderExtension@1100528600 : Record 11071727;
                                  CostPlusAmnt@1100528601 : Decimal;
                                  CostPlusDisc@1100528602 : Decimal;
                                BEGIN
                                  CurrServiceOrderCostPlusEntry := "Service Order Cost Plus Entry";
                                  SOCostPlusEntryOnAfterGetRecor("Service Order Cost Plus Entry");
                                END;

               OnPostDataItem=BEGIN
                                //DP00195
                                "Service Collective-List".CALCFIELDS("Invoice Price");
                                IF "Service Collective-List"."Invoice Price" = 0 THEN BEGIN
                                  "Service Collective-List".Status := "Service Collective-List".Status::Processed;
                                  "Service Collective-List".MODIFY;
                                END;
                                SalesHeaderRec.DetermineRemovalContribution;
                                UpdateInvoicedAndChargable("Service Order Cost Plus Entry");
                              END;

               DataItemLink=Collective List No.=FIELD(No.) }

    { 1100529300;1;DataItem;SO Cost Plus Entry Plant;
               DataItemTable=Table11012825;
               DataItemTableView=SORTING(Collective List No.,Base Service Order No.,Service Order No.,Line No.,Invoiced,Chargeable)
                                 WHERE(Invoiced=CONST(No),
                                       Chargeable=CONST(Yes),
                                       Additional Cost=CONST(Yes));
               OnPreDataItem=BEGIN
                               //DP00195
                               IF NOT IsPlantServiceOrder THEN
                                 CurrReport.BREAK;

                               CASE SortingOrderType OF
                                 SortingOrderType::"Line No.":
                                   SETCURRENTKEY("Collective List No.", "Base Service Order No.", "Service Order No.", "Line No.");
                                 SortingOrderType::"Work Order - Cost Object":
                                   SETCURRENTKEY("Collective List No.", "Base Service Order No.", "Service Order No.", "Created by Work Order No.", "Cost Object");
                               END;
                               IF NOT ISEMPTY THEN BEGIN
                                 SalesHeaderRec.LOCKTABLE;
                                 SalesLineRec.LOCKTABLE;
                                 LastServiceOrderNo := '';
                                 InsertHeader := TRUE;
                               END;
                             END;

               OnAfterGetRecord=VAR
                                  ServiceOrderExtension@1100528600 : Record 11071727;
                                  CostPlusAmnt@1100528601 : Decimal;
                                  CostPlusDisc@1100528602 : Decimal;
                                BEGIN
                                  //DP00195
                                  CurrServiceOrderCostPlusEntry := "SO Cost Plus Entry Plant";
                                  SOCostPlusEntryOnAfterGetRecor("SO Cost Plus Entry Plant");
                                END;

               OnPostDataItem=BEGIN
                                //DP00195
                                "Service Collective-List".CALCFIELDS("Invoice Price");
                                IF "Service Collective-List"."Invoice Price" = 0 THEN BEGIN
                                  "Service Collective-List".Status := "Service Collective-List".Status::Processed;
                                  "Service Collective-List".MODIFY;
                                END;
                                SalesHeaderRec.DetermineRemovalContribution;
                                UpdateInvoicedAndChargable("SO Cost Plus Entry Plant");
                              END;

               DataItemLink=Collective List No.=FIELD(No.) }

    { 1100525000;1;DataItem;UsedForCommit    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  COMMIT;
                                  CurrReport.SKIP;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100528600;;Container;
                  ContainerType=ContentArea }

      { 1100528601;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100528602;2;Field  ;
                  CaptionML=ENU=Sort by;
                  OptionCaptionML=ENU=Line No.,Work Order No. - Cost Object;
                  SourceExpr=SortingOrderType;
                  OnValidate=VAR
                               JobsSetup@1100528600 : Record 315;
                             BEGIN
                               IF SortingOrderType = SortingOrderType::"Work Order - Cost Object" THEN BEGIN
                                 JobsSetup.GET;
                                 JobsSetup.TESTFIELD("4PS-Mobile Active", TRUE);
                               END;
                             END;
                              }

      { 1100528603;2;Field  ;
                  CaptionML=ENU=Recalculatie;
                  SourceExpr=RecalculateCollectiveList }

      { 1100528604;2;Field  ;
                  CaptionML=ENU=Release;
                  SourceExpr=ReleaseCollectiveList;
                  OnValidate=BEGIN
                               IF ReleaseCollectiveList THEN
                                 RecalculateCollectiveList := TRUE;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012018 : TextConst 'ENU=Creating Invoices...\\';
      Text001@11012019 : TextConst 'ENU=Customer     #1##########\';
      Text002@11012020 : TextConst 'ENU=Service Order    #2##########\';
      Text004@11012022 : TextConst 'ENU=Cost Plus Entry  #3##########';
      Text005@11012023 : TextConst 'ENU=No Invoices Created.';
      Text006@11012024 : TextConst 'ENU=%1 Invoices (%2), %3 Credit Memos (%4), %5 Invoices (%6), %7 Invoice Lines and %8 Internal Charge Lines created.';
      Text007@11012025 : TextConst 'ENU=Collecting Data...\\';
      ServSetup@1210190004 : Record 11012800;
      ServTypeRec@1210190001 : Record 11012814;
      ServContrRec@1100485004 : Record 11012812;
      SalesHeaderRec@1210190008 : Record 36;
      SalesLineRec@1210190009 : Record 37;
      CustRec@1210190003 : Record 18;
      ContractRec@1100528600 : Record 11012812;
      ServiceOrder@1100528608 : Record 11012823;
      TempGenJnlLine@1100409000 : TEMPORARY Record 81;
      TmpIcEntry@1100529000 : TEMPORARY Record 11012058;
      CurrServiceOrderCostPlusEntry@1100529301 : Record 11012825;
      CreditMemoCounter@1210190000 : Integer;
      InvCounter@11012011 : Integer;
      InvProposalCounter@1100529302 : Integer;
      LineCounter@11012013 : Integer;
      SalesLineNo@11012014 : Integer;
      SendInvPer@11012015 : 'InstalmPos,InstalmNeg,ServOrder,ServLocation,ServContract,Customer,Call,CustOrder';
      NoSeriesMgt@11012016 : Codeunit 396;
      InternalChargeMgt@1100528609 : Codeunit 11012265;
      InsertHeader@11012017 : Boolean;
      MultipleDim1@1100485000 : Boolean;
      MultipleReferences@1100485002 : Boolean;
      MultipleOrderNos@1100485001 : Boolean;
      MultipleServOrders@1100485005 : Boolean;
      IsPlantServiceOrder@1100529300 : Boolean;
      FirstSalesHeaderNo@1100528601 : Code[20];
      LastSalesHeaderNo@1100528602 : Code[20];
      FirstSalesCreditMemoNo@1100528603 : Code[20];
      LastSalesCreditMemoNo@1100528604 : Code[20];
      LastServiceOrderNo@1100528605 : Code[20];
      FirstInvoiceProposalNo@1100529304 : Code[20];
      LastInvoiceProposalNo@1100529303 : Code[20];
      SortingOrderType@1100528606 : 'Line No.,Work Order - Cost Object';
      ReleaseCollectiveList@1100528610 : Boolean;
      RecalculateCollectiveList@1100528607 : Boolean;
      CompanyPlantInvoice@1100529001 : Text;

    PROCEDURE InsertSalesHeader@1(IServiceCollectiveList@1100528601 : Record 11071730;PercLabor@1100528600 : Decimal;PerctoBAccount@1100528602 : Decimal;YourReference@1100528603 : Text[50];OrderNoCustomer@1100528604 : Text[50];CommisionDateCustomer@1100528400 : Date;ServiceOrderNo@1100528605 : Code[20];ServiceContractNo@1100528606 : Code[20];GlobalDim1Code@1100528607 : Code[20];BilltoCustomerNo@1100528608 : Code[20]);
    VAR
      ServOrder@1100409000 : Record 11012823;
    BEGIN
      SalesHeaderRec.INIT;
      IF "Service Collective-List".GetTotalInvoiceAmountInclVAT < 0 THEN BEGIN
        SalesHeaderRec."Document Type" := SalesHeaderRec."Document Type"::"Credit Memo";
        CreditMemoCounter := CreditMemoCounter + 1;
      END ELSE BEGIN
        //DP00195.sn
        IF IsPlantServiceOrder AND (CurrServiceOrderCostPlusEntry."Additional Cost") THEN BEGIN
          SalesHeaderRec."Document Type" := SalesHeaderRec."Document Type"::"Invoice Proposal";
          InvProposalCounter := InvProposalCounter + 1;
        END ELSE BEGIN
        //DP00195.en
          SalesHeaderRec."Document Type" := SalesHeaderRec."Document Type"::Invoice;
          InvCounter := InvCounter + 1;
        END;
      END;

      //DP00195.sn
      IF IsPlantServiceOrder AND (CurrServiceOrderCostPlusEntry."Additional Cost") THEN BEGIN
        SalesHeaderRec."Plant Invoice" := TRUE;
        SalesHeaderRec."Company Name" := CompanyPlantInvoice;  //DP00847.n
      END ELSE
        SalesHeaderRec."Service Invoice" := TRUE;
      //DP00195.en

      SalesHeaderRec."No." := '';

      IF SalesHeaderRec."Document Type" <> SalesHeaderRec."Document Type"::"Invoice Proposal" THEN BEGIN   //DP00195
        IF ServTypeRec."Sales Invoice Nos." <> '' THEN BEGIN
          SalesHeaderRec."No." := NoSeriesMgt.GetNextNo(ServTypeRec."Sales Invoice Nos.", WORKDATE, TRUE);
          SalesHeaderRec."No. Series" := ServTypeRec."Sales Invoice Nos.";
        END;
        IF ServTypeRec."Posted Sales Invoice Nos." <> '' THEN
          SalesHeaderRec."Posting No. Series" := ServTypeRec."Posted Sales Invoice Nos.";
      END;
      SalesHeaderRec.INSERT(TRUE);

      IF SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::Invoice THEN BEGIN
        IF FirstSalesHeaderNo = '' THEN
          FirstSalesHeaderNo := SalesHeaderRec."No.";
        LastSalesHeaderNo := SalesHeaderRec."No.";
      END;

      IF SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo" THEN BEGIN
        IF FirstSalesCreditMemoNo = '' THEN
          FirstSalesCreditMemoNo := SalesHeaderRec."No.";
        LastSalesCreditMemoNo := SalesHeaderRec."No.";
      END;

      //DP00195.sn.
      IF SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Invoice Proposal" THEN BEGIN
        IF FirstInvoiceProposalNo = '' THEN
          FirstInvoiceProposalNo := SalesHeaderRec."No.";
        LastInvoiceProposalNo := SalesHeaderRec."No.";
      END;
      //DP00195.en

      SalesHeaderRec.VALIDATE("Sell-to Customer No.", IServiceCollectiveList."Customer No.");   //evdb.n
      SalesHeaderRec.SetHideValidationDialog(TRUE);
      SalesHeaderRec.VALIDATE("Bill-to Customer No.", IServiceCollectiveList."Bill-to Customer No.");
      SalesHeaderRec.VALIDATE("Alternative Bill-to Address", IServiceCollectiveList."Alternative Bill-to Address");
      SalesHeaderRec.VALIDATE("Bill-to Contact No.", IServiceCollectiveList."Bill-to Contact Person No.");

      SalesHeaderRec."% Labor" := PercLabor;
      SalesHeaderRec."% to B Account" := PerctoBAccount;
      SalesHeaderRec."Specific WKA Percentages" := (PercLabor <> 0) OR (PerctoBAccount <> 0);
      SalesHeaderRec."Principal Reference" := YourReference;
      SalesHeaderRec."Order No. Customer" := OrderNoCustomer;
      SalesHeaderRec."Commision Date Customer" := CommisionDateCustomer;
      SalesHeaderRec.VALIDATE("Service Order No.", ServiceOrderNo);

      IF ServContrRec.GET(ServiceContractNo) THEN BEGIN
        ServContrRec.TESTFIELD(Status, ServContrRec.Status::"Invoicing Allowed");
        IF ServContrRec."Contract Manager" <> '' THEN
          SalesHeaderRec.VALIDATE("Salesperson Code", ServContrRec."Contract Manager");  //db, 11-04-08 (voor kostenplaats valideren)
        IF ServiceOrderNo = '' THEN //mg, 06-02-13: C005416
          SalesHeaderRec."Invoice Text" := ServContrRec."Invoice Text Installments";
      END;

      SalesHeaderRec."Currency Code" := IServiceCollectiveList."Currency Code";
      SalesHeaderRec.UpdateCurrencyFactor;

      SalesHeaderRec.VALIDATE("Shortcut Dimension 1 Code", GlobalDim1Code);
      //DP00640.sn (SEPA-2)
      IF SalesHeaderRec."Service Order No." <> '' THEN BEGIN
        IF ServOrder.GET(SalesHeaderRec."Service Order No.") THEN BEGIN
          IF ServOrder."Payment Method Code (SO Inv.)" <> '' THEN
            SalesHeaderRec.VALIDATE("Payment Method Code", ServOrder."Payment Method Code (SO Inv.)");
        END;
      END;
      //DP00640.en (SEPA-2)
      SalesHeaderRec.GetDirectDebitMandateServiceOrProject(SalesHeaderRec."Service Order No.", '', '', ''); //DP00640

      SalesHeaderRec.MODIFY(TRUE);
      SalesLineNo := 10000;
      InsertHeader := FALSE;

      MultipleReferences := FALSE;
      MultipleOrderNos := FALSE;
      MultipleDim1 := FALSE;
      MultipleServOrders := FALSE;

      CustRec.GET(BilltoCustomerNo);
    END;

    PROCEDURE InsertSalesLine@5(IServiceOrder@1100528600 : Record 11012823;ServiceOrderCostPlusEntry@1100529300 : Record 11012825);
    VAR
      DimValRec@1100485001 : Record 349;
      Currency@1100528602 : Record 4;
      PlantTypeRec@1100529301 : Record 11012551;
      PlantPostingSetupRec@1100529302 : Record 11012570;
      PlantLocationRec@1100529303 : Record 11012554;
      ProjectTypeRec@1100529304 : Record 11012009;
      ProjRec@1100529305 : Record 11072003;
      JobSetUp@1100529306 : Record 315;
      SalesHeader2@1100528400 : Record 36;
      DimMgt@1100485000 : Codeunit 408;
      CostPlusAmnt@1210190001 : Decimal;
      CostPlusDisc@1210190000 : Decimal;
    BEGIN
      IF NOT Currency.GET(SalesHeaderRec."Currency Code") THEN
        Currency.InitRoundingPrecision;

      SalesLineRec.INIT;
      SalesLineRec.SuspendUpdateVATAmounts(TRUE);
      SalesLineRec."Document Type" := SalesHeaderRec."Document Type";
      SalesLineRec."Document No." := SalesHeaderRec."No.";
      SalesLineRec."Line No." := SalesLineNo;
      SalesLineRec."System-Created Entry" := TRUE;
      //mg.sn, 04-02-2014: C012839
      IF IsPlantServiceOrder AND (CurrServiceOrderCostPlusEntry."Additional Cost") THEN
        SalesLineRec."Plant Invoice" := TRUE
      ELSE
        SalesLineRec."Service Invoice" := TRUE;
      //mg.en, 04-02-2014: C012839
      SalesLineRec."Collective-List Line Type" := SalesLineRec."Collective-List Line Type"::"Cost Plus Entry";
      SalesLineRec."Collective List No." := "Service Collective-List"."No.";
      SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
      SalesLineRec."Cost Plus Line No." := ServiceOrderCostPlusEntry."Line No.";
      SalesLineRec."Cost Type Cost Plus Line" := ServiceOrderCostPlusEntry."Cost Type";
      SalesLineRec."Cost Object Cost Plus Line" := ServiceOrderCostPlusEntry."Cost Object";
      SalesLineRec."Additional Cost (Service)" := ServiceOrderCostPlusEntry."Additional Cost";
      SalesLineRec."Shortcut Dimension 2 Code" := ServSetup."Cost Object Revenues";
      SalesLineRec.VALIDATE("Sell-to Customer No.", ServiceOrderCostPlusEntry."Customer No.");
      SalesLineRec.VALIDATE("Bill-to Customer No.", ServiceOrderCostPlusEntry."Bill-to Customer No.");
      SalesLineRec.VALIDATE("Service Order No.", ServiceOrderCostPlusEntry."Service Order No.");
      SalesLineRec.VALIDATE("No.", ServTypeRec.GetWipRevenueAcc(ServiceOrderCostPlusEntry."Cost Type"));
      SalesLineRec.GetServTypeRevenueAccount;

      //DP00195.sn
      IF ServiceOrder.GET(ServiceOrderCostPlusEntry."Service Order No.") THEN BEGIN
        IF ServiceOrder.IsPlantServiceOrder THEN BEGIN
          ServiceOrder.TESTFIELD("Plant Type");
          ServiceOrder.TESTFIELD("Cost Component Plant");
          SalesLineRec.VALIDATE("Plant Location", ServiceOrder."Plant Location");
          SalesLineRec.IsPlantService := TRUE;
          IF ServiceOrderCostPlusEntry."Additional Cost" THEN BEGIN
            //IF PlantLocationRec.GET(ServiceOrder."Plant Location") THEN BEGIN //DP00847.o GET's should already have been without IF,
            //  IF ProjRec.GET(PlantLocationRec."Project No.") THEN BEGIN       //DP00847.o and read ProjRec only if Project No. filled.
            //DP00847.sn                                                                 // So only new is check on Company is empty.
            PlantLocationRec.GET(ServiceOrder."Plant Location");
            IF (PlantLocationRec."Project No." <> '') AND (PlantLocationRec."Company Name" = '') THEN BEGIN
              ProjRec.GET(PlantLocationRec."Project No.");
            //DP00847.en
              SalesLineRec."Job No." := PlantLocationRec."Project No.";
              JobSetUp.FINDFIRST;
              SalesLineRec."No." := ProjectTypeRec.GetWipAcc(ProjRec."Project Type",
                                                        ServiceOrderCostPlusEntry."Cost Type",
                                                        ProjRec."Project Status",
                                                        JobSetUp."Provisions at Closure",
                                                        COMPANYNAME,
                                                        ServiceOrderCostPlusEntry."Cost Type",'');
            END ELSE BEGIN
              //DP00847.sn
              IF (PlantLocationRec."Project No." <> '') AND (PlantLocationRec."Company Name" <> '') THEN
                SalesLineRec."Job No." := PlantLocationRec."Project No.";
              //DP00847.en
              SalesLineRec.VALIDATE("No.", ServTypeRec.GetWipRevenueAcc(ServiceOrderCostPlusEntry."Cost Type"));
            END
          END ELSE BEGIN
            SalesLineRec."Plant Type" := ServiceOrder."Plant Type";
            SalesLineRec."Plant No." := ServiceOrder."Plant Number";
            PlantTypeRec.GET(ServiceOrder."Plant Type");
            PlantPostingSetupRec.GET(PlantTypeRec.PlantPostingGrp(ServiceOrder."Plant Number",'',''),
                                     '', //veldje voor leveranciers boekings groep
                                     ServiceOrder."Cost Component Plant");
            PlantPostingSetupRec.TESTFIELD("Plant Cost Account");
            SalesLineRec.VALIDATE("No.", PlantPostingSetupRec."Plant Cost Account");
          END;
          SalesLineRec."Plant Invoice Origin" := SalesLineRec."Plant Invoice Origin"::"Service order";
        END ELSE BEGIN
          SalesLineRec.VALIDATE("No.", ServTypeRec.GetWipRevenueAcc(ServiceOrderCostPlusEntry."Cost Type"));
          SalesLineRec.GetServTypeRevenueAccount;
        END;
      END;
      //DP00195.en

      //db, 14-12-05 ivm verwijderingbijdrage artikel toekennen voor validatie aantal+eenheid
      SalesLineRec."Item No." := ServiceOrderCostPlusEntry."Item No.";
      SalesLineRec."Serial No." := ServiceOrderCostPlusEntry."Serial No.";
      SalesLineRec."Lot No." := ServiceOrderCostPlusEntry."Lot No.";
      SalesLineRec."Basic Item" := ServiceOrderCostPlusEntry."Basic Item";
      SalesLineRec."Trade Item" := ServiceOrderCostPlusEntry."Trade Item";
      SalesLineRec.Manufacturer := ServiceOrderCostPlusEntry.Manufacturer;
      SalesLineRec."Vendor (Trade Item)" := ServiceOrderCostPlusEntry."Vendor (Trade Item)";

      //db, 11-05-07 (melding 9036)
      IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND
        (ServiceOrderCostPlusEntry.Quantity < 0) THEN
        SalesLineRec.VALIDATE(Quantity, -1 * ServiceOrderCostPlusEntry.Quantity)
      ELSE
        SalesLineRec.VALIDATE(Quantity, ServiceOrderCostPlusEntry.Quantity);
      GetCostPlusAmountAndDiscount(CostPlusAmnt, CostPlusDisc);  //db, 18-04-11
      IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND (CostPlusAmnt > 0) THEN
        SalesLineRec.VALIDATE(Quantity, -1 * ServiceOrderCostPlusEntry.Quantity);
      IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND (CostPlusAmnt < 0) THEN
        SalesLineRec.VALIDATE("Unit Price", -1 * CostPlusAmnt)
      ELSE
        SalesLineRec.VALIDATE("Unit Price", CostPlusAmnt);
      SalesLineRec.UpdateUnitPrice(0);
      //** 4PS02.sn
      SalesLineRec."Gross Price" := ServiceOrderCostPlusEntry."Gross Price";
      SalesLineRec."Purchase Discount % (Item)" := ServiceOrderCostPlusEntry."Purchase Discount % (Item)";
      SalesLineRec."Sales Discount % (Item)" := ServiceOrderCostPlusEntry."Sales Discount % (Item)";
      SalesLineRec."Basic Price" := ServiceOrderCostPlusEntry."Basic Price";
      SalesLineRec."Surcharge %" := ServiceOrderCostPlusEntry."Surcharge %";
      SalesLineRec."Surcharge Amount" := ServiceOrderCostPlusEntry."Surcharge Amount";  //db, 08-10-08: M10359
      SalesLineRec."Sales Price" := ServiceOrderCostPlusEntry."Sales Price";
      SalesLineRec."Discount % (Contract)" := ServiceOrderCostPlusEntry."Discount % (ServOrder)";
      //** 4PS02.en
      SalesLineRec.VALIDATE("VAT Prod. Posting Group", ServiceOrderCostPlusEntry."VAT Prod. Posting Group");
      SalesLineRec.VALIDATE("VAT Bus. Posting Group", CustRec."VAT Bus. Posting Group");
      IF IServiceOrder."VAT Bus. Posting Group" <> '' THEN
        SalesLineRec.VALIDATE("VAT Bus. Posting Group", IServiceOrder."VAT Bus. Posting Group");

      SalesLineRec.Amount :=
        ROUND(SalesLineRec."Unit Price" * SalesLineRec.Quantity, Currency."Amount Rounding Precision");
      IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND (CostPlusAmnt < 0) THEN
        SalesLineRec."Amount (LCY)" := -1 * CostPlusAmnt * SalesLineRec.Quantity
      ELSE
        SalesLineRec."Amount (LCY)" := CostPlusAmnt * SalesLineRec.Quantity;

      Currency.InitRoundingPrecision;
      SalesLineRec."Amount (LCY)"  := ROUND(SalesLineRec."Amount (LCY)", Currency."Amount Rounding Precision");


      IF ServiceOrder.IsPlantServiceOrder THEN //DP00195
        SalesLineRec."Unit of Measure Code" := ServiceOrderCostPlusEntry."Unit of Measure"  //DP00195
      ELSE
        SalesLineRec.VALIDATE("Unit of Measure Code", ServiceOrderCostPlusEntry."Unit of Measure");
      SalesLineRec.VALIDATE("Line Discount %", CostPlusDisc);
      SalesLineRec."Sales Surcharge Overtime %" := ServiceOrderCostPlusEntry."Sales Surcharge Overtime %";
      SalesLineRec.VALIDATE(Text, ServiceOrderCostPlusEntry.Text);
      SalesLineRec.Description := ServiceOrderCostPlusEntry.Description;
      SalesLineRec."Description 2" := ServiceOrderCostPlusEntry."Description 2";
      IF SalesHeader2.GET(SalesLineRec."Document Type", SalesLineRec."Document No.") THEN
        IF (SalesHeader2."Language Code" <> '') AND
           (SalesLineRec."Item No." <> '')
        THEN
          SalesLineRec.GetItemTranslation;
      SalesLineRec."Employee No." := ServiceOrderCostPlusEntry."Employee No.";
      SalesLineRec."Source Document" := ServiceOrderCostPlusEntry."Source Document";

      IF SalesLineRec."Shortcut Dimension 2 Code" <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2,SalesLineRec."Shortcut Dimension 2 Code",DimValRec,FALSE,'');
          SalesLineRec."Cost Component" := DimValRec."Cost Component";
      END;
      IF SalesLineRec."Cost Component" = '' THEN
        SalesLineRec."Cost Component" := ServiceOrderCostPlusEntry."Cost Component";

      SalesLineRec."Removal Contribution" := ServiceOrderCostPlusEntry."Removal Contribution";
      IF ServiceOrderCostPlusEntry."Removal Contribution" THEN
        SalesLineRec."Attached to Line No. (RC)" := GetAttachedtoLineNoRC(SalesHeaderRec, ServiceOrderCostPlusEntry);

      SalesLineRec."Principal Reference" := IServiceOrder."Your Reference";
      SalesLineRec."Order No. Customer" := IServiceOrder."Order No. Customer";
      SalesLineRec."Cost Entry No. Service Ledger" := ServiceOrderCostPlusEntry."Entry No. Service Ledger";

      IF ServiceOrderCostPlusEntry."Additional Cost" THEN  //db, 24-02-10
        SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", IServiceOrder."Department Code (Other)")
      ELSE
        SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", IServiceOrder."Global Dimension 1 Code");
      //SalesLineRec."Cost Price" :=  CostPlusEntryRec."Cost Price";  //diekus: uitgeschakeld
      SalesLineRec."Execution Date" := ServiceOrderCostPlusEntry."Posting Date";
      //kzwerver, 110615, sn, #24416
      SalesLineRec."Wage Component Cost Plus Line" := ServiceOrderCostPlusEntry."Wage Component";
      SalesLineRec."Hour Rate Cost Plus Line" := ServiceOrderCostPlusEntry."Hour Rate Code";
      //kzwerver, 110615, en, #24416
      SalesLineRec."Object No." := ServiceOrderCostPlusEntry."Object No.";

      //kzwerver, 111004, sn, #RfC Unit Price
      SalesLineRec."Service Price Book Code" := ServiceOrderCostPlusEntry."Price Book Code";
      SalesLineRec."SUP Index Date" := ServiceOrderCostPlusEntry."Unit Price Index Date";
      SalesLineRec."SUP Extention" := ServiceOrderCostPlusEntry."Unit Price Extention";
      SalesLineRec."SUP Production Date" := ServiceOrderCostPlusEntry."Production Recording Date";
      SalesLineRec."SUP Room" := ServiceOrderCostPlusEntry."Unit Price Room";
      SalesLineRec."Service Unit Price Code" := ServiceOrderCostPlusEntry."Unit Price Line Code";
      //kzwerver, 111004, en, #RfC Unit Price

      SalesLineRec."Work Order No." := ServiceOrderCostPlusEntry."Created by Work Order No.";
      SalesLineRec.SuspendUpdateVATAmounts(FALSE);
      IF SalesLineRec.Type <> SalesLineRec.Type::" " THEN
        SalesLineRec.UpdateAmounts;
      SalesLineRec.INSERT;

      IF SalesHeaderRec."Principal Reference" <> SalesLineRec."Principal Reference" THEN
        MultipleReferences := TRUE;
      IF SalesHeaderRec."Order No. Customer" <> SalesLineRec."Order No. Customer" THEN
        MultipleOrderNos := TRUE;
      IF SalesHeaderRec."Shortcut Dimension 1 Code" <> SalesLineRec."Shortcut Dimension 1 Code" THEN
        MultipleDim1 := TRUE;
      IF SalesHeaderRec."Service Order No." <> SalesLineRec."Service Order No." THEN
        MultipleServOrders := TRUE;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;

      LinkDocumentsToSalesInvoice(IServiceOrder."No.", SalesHeaderRec);
    END;

    PROCEDURE InsertSCInvoicingSalesLine@1100528602();
    VAR
      DimensionValue@1100528602 : Record 349;
      Currency@1100528603 : Record 4;
      DimensionManagement@1100528601 : Codeunit 408;
      MaintenanceInvoiceMgt@1100528600 : Codeunit 11012828;
    BEGIN
      SalesLineRec.INIT;
      SalesLineRec."Document Type" := SalesHeaderRec."Document Type";
      SalesLineRec."Document No." := SalesHeaderRec."No.";
      SalesLineRec."Line No." := SalesLineNo;
      SalesLineRec."System-Created Entry" := TRUE;
      SalesLineRec."Service Invoice" := TRUE;
      SalesLineRec."Collective-List Line Type" := "Collective-List SC Inv. Line".Type +1;
      SalesLineRec."Collective List No." := "Service Collective-List"."No.";

      SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
      SalesLineRec.VALIDATE("Service Contract No.", "Collective-List SC Inv. Line"."Service Contract No.");
      SalesLineRec.VALIDATE("Object No.", "Collective-List SC Inv. Line"."Service Object No.");
      SalesLineRec.VALIDATE("Installment Line No.", "Collective-List SC Inv. Line"."Installment Line No.");
      SalesLineRec.VALIDATE("Service Location No.", "Collective-List SC Inv. Line"."Service Location No.");
      SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", "Collective-List SC Inv. Line"."Cost Object");

      SalesLineRec."Currency Code" := SalesHeaderRec."Currency Code";

      SalesLineRec."Unit Price" := "Collective-List SC Inv. Line"."Unit Price";
      SalesLineRec.VALIDATE(Amount, "Collective-List SC Inv. Line".Amount);
      SalesLineRec."Amount (LCY)" :=
        MaintenanceInvoiceMgt.CalcAmountLCYFromAmount(
          SalesLineRec.Amount, "Collective-List SC Inv. Line"."Currency Code", "Collective-List SC Inv. Line"."Currency Date");

      IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND (SalesLineRec."Amount (LCY)" > 0) THEN
        SalesLineRec.VALIDATE(Quantity, -1 * "Collective-List SC Inv. Line".Quantity)
      ELSE
        SalesLineRec.VALIDATE(Quantity, "Collective-List SC Inv. Line".Quantity);

      SalesLineRec.VALIDATE("VAT Prod. Posting Group", "Collective-List SC Inv. Line"."VAT Prod. Posting Group");
      SalesLineRec.Description := "Collective-List SC Inv. Line".Description;
      SalesLineRec."Description 2" := "Collective-List SC Inv. Line"."Description 2";
      IF SalesLineRec."Shortcut Dimension 2 Code" <> '' THEN BEGIN
        DimensionManagement.GetDimValueRec(2,SalesLineRec."Shortcut Dimension 2 Code",DimensionValue,FALSE,'');
          SalesLineRec."Cost Component" := DimensionValue."Cost Component";
      END;

      SalesLineRec.VALIDATE("Service Control Period Date", "Collective-List SC Inv. Line"."Service Control Period Date");
      SalesLineRec.VALIDATE("Unit of Measure", "Collective-List SC Inv. Line"."Unit of Measure");
      SalesLineRec."Coll.-List SC Inv. Line No." := "Collective-List SC Inv. Line"."Line No.";

      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE GetCostPlusAmountAndDiscount@1210190001(VAR CostPlusAmnt@1210190001 : Decimal;VAR CostPlusDisc@1210190002 : Decimal);
    VAR
      ServiceOrderExtension@1100528600 : Record 11071727;
      CostPlusAmnt2@1210190003 : Decimal;
    BEGIN
      //db, 18-04-11
      CostPlusDisc := CurrServiceOrderCostPlusEntry."Discount % (ServOrder)";
      CostPlusAmnt := CurrServiceOrderCostPlusEntry."Sales Price";
      IF NOT ServiceOrderExtension.GET(CurrServiceOrderCostPlusEntry."Service Order No.") THEN
        ServiceOrderExtension.INIT;
      IF ServiceOrderExtension."Item Price Cost Plus Entry" = ServiceOrderExtension."Item Price Cost Plus Entry"::GrossMin THEN
      BEGIN
        CostPlusAmnt2 := CostPlusAmnt * (1 - CostPlusDisc / 100);
        IF (CurrServiceOrderCostPlusEntry."Gross Price" > CostPlusAmnt2) AND
           (CurrServiceOrderCostPlusEntry."Gross Price" <> 0) THEN BEGIN
          CostPlusAmnt := CurrServiceOrderCostPlusEntry."Gross Price";
          CostPlusDisc := 100 * (CurrServiceOrderCostPlusEntry."Gross Price" - CostPlusAmnt2) /
            CurrServiceOrderCostPlusEntry."Gross Price";
        END ELSE BEGIN
          IF (CurrServiceOrderCostPlusEntry."Basic Price" > CostPlusAmnt2) AND
             (CurrServiceOrderCostPlusEntry."Basic Price" <> 0) THEN BEGIN
            CostPlusAmnt := CurrServiceOrderCostPlusEntry."Basic Price";
            CostPlusDisc := 100 * (CurrServiceOrderCostPlusEntry."Basic Price" - CostPlusAmnt2) /
              CurrServiceOrderCostPlusEntry."Basic Price";
          END;
        END;
      END;
    END;

    PROCEDURE GetAttachedtoLineNoRC@1100528600(ISalesHeader@1100528603 : Record 36;IServiceOrderCostPlusEntry@1100528600 : Record 11012825) : Decimal;
    VAR
      ServiceOrderCostPlusEntry@1100528601 : Record 11012825;
      SalesLine@1100528602 : Record 37;
    BEGIN
      IF NOT IServiceOrderCostPlusEntry."Removal Contribution" THEN
        EXIT;
      IF IServiceOrderCostPlusEntry."Attached to Line No. (RC)" = 0 THEN
        EXIT;
      IF NOT ServiceOrderCostPlusEntry.GET(
        IServiceOrderCostPlusEntry."Service Order No.", IServiceOrderCostPlusEntry."Attached to Line No. (RC)")
      THEN
        EXIT;

      SalesLine.SETRANGE("Document Type", ISalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.", ISalesHeader."No.");
      SalesLine.SETRANGE("Cost Plus Line No.", ServiceOrderCostPlusEntry."Line No.");
      IF SalesLine.FINDFIRST THEN
        EXIT(SalesLine."Line No.");
    END;

    PROCEDURE DivideComment@1100409000(TextToDivide@1100409000 : Text[80];VAR Text1@1100409001 : Text[50];VAR Text2@1100409002 : Text[50]);
    VAR
      Pos@1100409003 : Integer;
    BEGIN
      IF STRLEN(TextToDivide) <= MAXSTRLEN(Text1) THEN BEGIN  //CALL C006639 sn
        Text1 := COPYSTR(TextToDivide, 1, MAXSTRLEN(Text1));
        Text2 := '';
      END ELSE BEGIN                                          //CALL C006639 en
        Pos := GetSplitPosition(TextToDivide, MAXSTRLEN(Text1));
        IF STRLEN(TextToDivide) - Pos <= MAXSTRLEN(Text2) THEN BEGIN
          Text1 := COPYSTR(TextToDivide, 1, Pos);
          Text2 := COPYSTR(TextToDivide, Pos +1, STRLEN(TextToDivide));
        END ELSE BEGIN
          Text1 := COPYSTR(TextToDivide, 1, MAXSTRLEN(Text1));
          Text2 := COPYSTR(TextToDivide, MAXSTRLEN(Text1) +1, 40);
        END;
      END;                                                   //CALL C006639 n
    END;

    PROCEDURE GetSplitPosition@1100409001(TextToDivide@1100409000 : Text[1024];MaxStrLength@1100409001 : Integer) Pos : Integer;
    VAR
      SplitText@1100409002 : Text[1024];
    BEGIN
      SplitText := ReverseText(COPYSTR(TextToDivide, 1, MaxStrLength));
      Pos := STRPOS(SplitText, ' ');
      IF Pos = 0 THEN
        Pos := STRPOS(SplitText, ';');
      IF Pos = 0 THEN
        Pos := STRPOS(SplitText, ',');
      IF Pos = 0 THEN
        Pos := MaxStrLength
      ELSE
        Pos := MaxStrLength - (Pos + (MaxStrLength - STRLEN(SplitText))) + 1; //CALL C006639 changed
      EXIT(Pos);
    END;

    PROCEDURE ReverseText@1100409002(Text1@1100409000 : Text[1024]) : Text[1024];
    VAR
      Length@1100409001 : Integer;
      Text2@1100409002 : Text[1024];
      i@1100409003 : Integer;
    BEGIN
      Length := STRLEN(Text1);
      Text2 := '';
      FOR i := 1 TO Length DO
        Text2[i] := Text1[Length - i + 1];
      EXIT(Text2);
    END;

    PROCEDURE LinkDocumentsToSalesInvoice@1100528700(ServiceOrderNo@1100528701 : Code[20];SalesHeader@1100528700 : Record 36);
    VAR
      DocsToBeLinkedtoSlsInv@1100525000 : Record 11229792;
      ServiceOrder@1100528703 : Record 11012823;
      ServiceOrderRecRef@1100528702 : RecordRef;
      DocumentProperties@1100528704 : Record 11012746;
      DocumentRelation@1100528706 : Record 11012407;
      DocumentLinkManagement@1100528705 : Codeunit 11012401;
    BEGIN
      IF NOT (SalesHeader."Document Type" IN [SalesHeader."Document Type"::Invoice, SalesHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      DocsToBeLinkedtoSlsInv.SETRANGE("Customer No.", SalesHeader."Bill-to Customer No.");
      IF DocsToBeLinkedtoSlsInv.ISEMPTY THEN
        EXIT;

      ServiceOrder.GET(ServiceOrderNo);
      ServiceOrderRecRef.GETTABLE(ServiceOrder);

      DocumentLinkManagement.GetDocuments(DocumentProperties, ServiceOrderRecRef);
      DocumentProperties.MARKEDONLY(TRUE);
      IF DocumentProperties.FINDSET THEN
        REPEAT
          IF DocumentMustBeLinked(SalesHeader."Bill-to Customer No.", ServiceOrder, DocumentProperties) THEN BEGIN
            DocumentRelation.INIT;
            CASE SalesHeader."Document Type" OF
              SalesHeader."Document Type"::Invoice:
                DocumentRelation."Document Type" := DocumentRelation."Document Type"::"Sales Invoice";
              SalesHeader."Document Type"::"Credit Memo":
                DocumentRelation."Document Type" := DocumentRelation."Document Type"::"Sales Cr.Memo";
            END;
            DocumentRelation.VALIDATE("No.", SalesHeader."No.");
            DocumentRelation.VALIDATE("Related Document No.", DocumentProperties."No.");
            DocumentRelation."Send by E-Mail" := TRUE;
            IF DocumentProperties.FileCanBeConvertedToPDF THEN
              DocumentRelation.Print := TRUE;
            IF NOT DocumentRelation.FIND THEN
              DocumentRelation.INSERT(TRUE);
          END;
        UNTIL DocumentProperties.NEXT = 0;
    END;

    PROCEDURE DocumentMustBeLinked@1100528701(CustomerNo@1100528700 : Code[20];ServiceOrder@1100528703 : Record 11012823;DocumentProperties@1100528702 : Record 11012746) : Boolean;
    VAR
      DocsToBeLinkedtoSlsInv@1100528701 : Record 11229792;
    BEGIN
      DocsToBeLinkedtoSlsInv.SETRANGE("Customer No.", CustomerNo);
      DocsToBeLinkedtoSlsInv.SETFILTER("Service Order Source Type", '%1|%2',
        DocsToBeLinkedtoSlsInv."Service Order Source Type"::" ",
        ServiceOrder."Source Type" + 1);
      DocsToBeLinkedtoSlsInv.SETFILTER("Document Type", '%1|%2', '', DocumentProperties."Document Type");
      DocsToBeLinkedtoSlsInv.SETFILTER("Document Category", '%1|%2', '', DocumentProperties."Document Category");
      EXIT(DocsToBeLinkedtoSlsInv.FINDFIRST);
    END;

    PROCEDURE SOCostPlusEntryOnAfterGetRecor@1100529901(VAR ServiceOrderCostPlusEntry@1100529903 : Record 11012825);
    VAR
      ServiceOrderExtension@1100529902 : Record 11071727;
      CostPlusAmnt@1100529901 : Decimal;
      CostPlusDisc@1100529900 : Decimal;
    BEGIN
      WITH ServiceOrderCostPlusEntry DO BEGIN
        IF LastServiceOrderNo <> "Service Order No." THEN BEGIN
          ServiceOrder.GET("Service Order No.");
          ServiceOrder.TESTFIELD("Service Type");
          ServiceOrder.TESTFIELD("Service Type (Other)");
          ServiceOrder.TESTFIELD("Bill-to Customer No.");
          IF "Service Collective-List"."Invoice per Service Order" THEN
            InsertHeader := TRUE;
          IF InsertHeader THEN
            SalesHeaderRec.DetermineRemovalContribution;
          LastServiceOrderNo := "Service Order No.";
        END;

        ServiceOrderExtension.GetServOrderExtension("Service Order No.");
        IF (ServiceOrderExtension."Master Project" = '') OR
           (ServSetup."Service to Project" = ServSetup."Service to Project"::"Transfer Cost and Revenue")
        THEN BEGIN
          TESTFIELD("VAT Prod. Posting Group");
          TESTFIELD(Description);
          CALCFIELDS("Cost Type");
          IF "Additional Cost" THEN
            ServTypeRec.GET(ServiceOrder."Service Type (Other)")
          ELSE
            ServTypeRec.GET(ServiceOrder."Service Type");
          IF NOT ContractRec.GET(ServiceOrder."Service Contract No.") THEN
            ContractRec.INIT;

          IF InsertHeader THEN
            InsertSalesHeader(
              "Service Collective-List", ServiceOrder."% Labor", ServiceOrder."% to B Account", ServiceOrder."Your Reference",
              ServiceOrder."Order No. Customer", ServiceOrder."Commision Date", "Service Order No.",
              ServiceOrder."Service Contract No.", ServiceOrder."Global Dimension 1 Code", ServiceOrder."Bill-to Customer No.");
          InsertSalesLine(ServiceOrder,ServiceOrderCostPlusEntry);
        END ELSE BEGIN
          GetCostPlusAmountAndDiscount(CostPlusAmnt, CostPlusDisc);
          InternalChargeMgt.InsertTempGLEntry(
            1, ServiceOrder."No.", Description, "Description 2", Quantity, CostPlusAmnt, "Cost Object", "Cost Component", '', TempGenJnlLine, TmpIcEntry);  //DP00847.c
        END;
      END;
    END;

    LOCAL PROCEDURE ProcessInvoiceDiscountSurcharge@1100528622(IInvoiceFromDate@1100528603 : Date);
    VAR
      Customer@1100528608 : Record 18;
      ServiceSalesDiscSurch@1100528602 : Record 11072237;
      DimensionValue@1100528607 : Record 349;
      CustomerPostingGroup@1100528609 : Record 92;
      MaintenanceInvoiceMgt@1100528600 : Codeunit 11012828;
      DimensionManagement@1100528605 : Codeunit 408;
      UnitPrice@1100528604 : Decimal;
      DiscountSurcharge@1100528606 : 'Discount,Surcharge';
      EmptyDateFormula@1100528601 : DateFormula;
    BEGIN
      IF NOT Customer.GET(SalesHeaderRec."Bill-to Customer No.") THEN
        EXIT;
      IF Customer."Customer Price Group" = '' THEN
        EXIT;

      FOR DiscountSurcharge := DiscountSurcharge::Discount TO DiscountSurcharge::Surcharge DO BEGIN
        ServiceSalesDiscSurch.SETRANGE(Type, ServiceSalesDiscSurch.Type::"Customer Group");
        ServiceSalesDiscSurch.SETRANGE(Code, Customer."Customer Price Group");
        ServiceSalesDiscSurch.SETRANGE("Object No.", '');
        ServiceSalesDiscSurch.SETRANGE("Discount/Surcharge", DiscountSurcharge);
        ServiceSalesDiscSurch.SETFILTER("Starting Date", '<>%1&<=%2', 0D, IInvoiceFromDate);
        ServiceSalesDiscSurch.SETFILTER("Ending Date", '%1|>%2', 0D, IInvoiceFromDate);
        ServiceSalesDiscSurch.SETRANGE(Source, ServiceSalesDiscSurch.Source::"Service Order");
        ServiceSalesDiscSurch.SETFILTER("Contract Group", '%1', '');
        ServiceSalesDiscSurch.SETFILTER("Invoice Period", '%1', EmptyDateFormula);
        IF ServiceSalesDiscSurch.FIND('+') THEN BEGIN
          SalesHeaderRec.TESTFIELD("Customer Posting Group");
          CustomerPostingGroup.GET(SalesHeaderRec."Customer Posting Group");
          REPEAT
            IF IsCorrectTransactionMode(ServiceSalesDiscSurch, SalesHeaderRec) THEN BEGIN
              IF ServiceSalesDiscSurch.Percentage <> 0 THEN BEGIN
                SalesLineRec.SETRANGE("Document Type", SalesHeaderRec."Document Type");
                SalesLineRec.SETRANGE("Document No.", SalesHeaderRec."No.");
                SalesLineRec.CALCSUMS("Line Amount");
                UnitPrice := SalesLineRec."Line Amount" * ServiceSalesDiscSurch.Percentage / 100;
              END ELSE BEGIN
                IF Customer."Currency Code" = '' THEN
                  UnitPrice := ServiceSalesDiscSurch.Amount
                ELSE
                  UnitPrice := MaintenanceInvoiceMgt.CalcAmountFromAmountLCY(
                    ServiceSalesDiscSurch.Amount, Customer."Currency Code", SalesHeaderRec."Document Date");
              END;
              IF UnitPrice <> 0 THEN BEGIN
                SalesLineRec.INIT;
                SalesLineRec."Document Type" := SalesHeaderRec."Document Type";
                SalesLineRec."Document No." := SalesHeaderRec."No.";
                SalesLineRec."Line No." := SalesLineNo;
                SalesLineRec."System-Created Entry" := TRUE;
                SalesLineRec."Service Invoice" := TRUE;
                SalesLineRec."Collective List No." := "Service Collective-List"."No.";

                SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
                SalesLineRec.VALIDATE("No.", CustomerPostingGroup."Service Charge Acc.");
                SalesLineRec.VALIDATE("Shortcut Dimension 2 Code", SalesHeaderRec."Shortcut Dimension 2 Code");

                SalesLineRec."Currency Code" := SalesHeaderRec."Currency Code";

                IF ServiceSalesDiscSurch."Discount/Surcharge" = ServiceSalesDiscSurch."Discount/Surcharge"::Discount THEN
                  UnitPrice := -UnitPrice;

                SalesLineRec."Unit Price" := UnitPrice;
                SalesLineRec.VALIDATE(Amount, UnitPrice);
                SalesLineRec."Amount (LCY)" :=
                  MaintenanceInvoiceMgt.CalcAmountLCYFromAmount(
                    SalesLineRec.Amount, Customer."Currency Code", SalesHeaderRec."Document Date");

                IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND (SalesLineRec."Amount (LCY)" > 0) THEN
                  SalesLineRec.VALIDATE(Quantity, -1)
                ELSE
                  SalesLineRec.VALIDATE(Quantity, 1);

                SalesLineRec.Description := ServiceSalesDiscSurch.Description;
                IF SalesLineRec."Shortcut Dimension 2 Code" <> '' THEN BEGIN
                  DimensionManagement.GetDimValueRec(2,SalesLineRec."Shortcut Dimension 2 Code",DimensionValue,FALSE,'');
                    SalesLineRec."Cost Component" := DimensionValue."Cost Component";
                END;

                SalesLineRec.INSERT;

                SalesLineNo += 10000;
                LineCounter += 1;
              END;
            END;
          UNTIL ServiceSalesDiscSurch.NEXT(-1) = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE IsCorrectTransactionMode@1100528615(IServiceSalesDiscSurch@1100528600 : Record 11072237;ISalesHeader@1100528601 : Record 36) : Boolean;
    BEGIN
      IF IServiceSalesDiscSurch."Transaction Mode Filter" = '' THEN
        EXIT(TRUE);
      ISalesHeader.SETRECFILTER;
      EXIT(NOT ISalesHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE UpdateInvoicedAndChargable@1100525001(VAR IServiceOrderCostPlusEntry@1100525000 : Record 11012825);
    BEGIN
      IF NOT IServiceOrderCostPlusEntry.ISEMPTY THEN
        IF IServiceOrderCostPlusEntry.FINDSET(TRUE) THEN
          REPEAT
            IServiceOrderCostPlusEntry.Invoiced := TRUE;
            IServiceOrderCostPlusEntry.Chargeable := FALSE;
            IServiceOrderCostPlusEntry.MODIFY;
          UNTIL IServiceOrderCostPlusEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

