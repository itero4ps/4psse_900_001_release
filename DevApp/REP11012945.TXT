OBJECT Report 11012945 Indexing Rental Package
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Indexing Rental Package;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ProjSetup.GET;
                   ProjSetup.TESTFIELD("Rental Units active", TRUE);
                 END;

    OnPreReport=BEGIN
                  IF (IndexDateFrom = 0D) OR (IndexDateTo = 0D) THEN
                    ERROR(Text003, "Rental Package".FIELDCAPTION("Indexation Date"));
                  ValidateIndexDateFrom();
                  ValidateIndexDateTo();
                  IF CALCDATE('<3M>', IndexDateFrom) < TODAY THEN BEGIN
                    IF NOT CONFIRM(Text011, FALSE, (TODAY - IndexDateFrom)) THEN
                      ERROR('');
                  END;

                  Counter := 0;
                  TmpError.RESET;
                  TmpError.DELETEALL;
                END;

    OnPostReport=BEGIN
                   MESSAGE(Text000, Counter);
                   IF TmpError.FINDFIRST THEN BEGIN
                     COMMIT;
                     TmpError.FILTERGROUP(1);
                     TmpError.SETRANGE("Tempory Table", TRUE);
                     TmpError.FILTERGROUP(0);
                     PAGE.RUN(PAGE::Errors, TmpError);
                   END;
                 END;

  }
  DATASET
  {
    { 1100529000;;DataItem;                  ;
               DataItemTable=Table11012941;
               DataItemTableView=SORTING(Project No.,Rental Unit,Starting Date)
                                 WHERE(Indexation Date=FILTER(<>''));
               OnPreDataItem=BEGIN
                               FILTERGROUP(9);
                               "Rental Package".SETRANGE("Indexation Date", IndexDateFrom, IndexDateTo);
                               FILTERGROUP(0);
                               Window.OPEN(FIELDCAPTION("Project No.") + '/' + FIELDCAPTION("Rental Unit") + '#1############################');
                             END;

               OnAfterGetRecord=VAR
                                  RentalRateLine@1100529002 : Record 11012942;
                                  RentalPackageLineRate1@1100529004 : Record 11229856;
                                  RentalPackageLineRate2@1100529003 : Record 11229856;
                                  IndexingRate@1100529000 : Record 11229847;
                                  Indexed@1100529001 : Boolean;
                                  DelayedIndex@1100529005 : Boolean;
                                BEGIN
                                  Window.UPDATE(1, "Project No." + '/' + "Rental Unit");
                                  IF NOT Check("Rental Package") THEN
                                    CurrReport.SKIP;

                                  RentalRateLine.SETRANGE("Project No.", "Project No.");
                                  RentalRateLine.SETRANGE("Rental Unit", "Rental Unit");
                                  RentalRateLine.SETRANGE("Starting Date Package", "Starting Date");
                                  RentalRateLine.SETFILTER("Index Group", '<>%1', '');
                                  RentalRateLine.SETRANGE("Index Type", RentalRateLine."Index Type"::Index);
                                  //RentalRateLine.SETFILTER("Starting Date Line", '<%1', "Indexation Date");  //C017312  //C020370.o
                                  IF RentalRateLine.FINDFIRST THEN
                                    ResetDelayedIndexPeriod("Rental Package");
                                  IF RentalRateLine.FINDSET(TRUE,FALSE) THEN BEGIN
                                    REPEAT
                                      IF StartIndexingLine("Rental Package", RentalRateLine) THEN BEGIN  //C020370.n
                                        IF NOT LineTerminatedBeforeIndexDate("Rental Package", RentalRateLine) THEN BEGIN
                                          ReadIndexRate(RentalRateLine, "Indexation Date", IndexingRate);
                                          IF RentalRateLine.GetLineRateOnRefDate(RentalRateLine, ("Indexation Date" - 1), RentalPackageLineRate1) THEN BEGIN
                                            RentalPackageLineRate2 := RentalPackageLineRate1;
                                            RentalPackageLineRate2.Date := "Indexation Date";
                                            RentalPackageLineRate2."Year Amount" := ROUND(RentalPackageLineRate1."Year Amount" * (1 +(IndexingRate.Percentage/100)));
                                            RentalPackageLineRate2.CalculatePeriodAmount(TRUE, "Invoice Frequency");
                                            RentalPackageLineRate2.INSERT;
                                            IF FillDelayedIndexPeriod("Rental Package", RentalRateLine) THEN BEGIN
                                              RentalRateLine.MODIFY(FALSE);
                                              DelayedIndex := TRUE;
                                            END;
                                          END;
                                          Indexed := TRUE;
                                        END;
                                      END;
                                    UNTIL RentalRateLine.NEXT = 0;
                                    IF Indexed THEN BEGIN
                                      "Indexation Date" := CALCDATE("Indexation Frequency", "Indexation Date");
                                      IF DelayedIndex THEN
                                        "Invoice Delayed Indexation" := TRUE;
                                      MODIFY(FALSE);
                                      Counter := Counter + 1;
                                      WriteError("Rental Package", Text006);  // Only message (note), no error
                                    END;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;

               ReqFilterFields=Project No.,Rental Unit,Invoice Frequency }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IndexDateFrom := 0D;
                   IndexDateTo := 0D;
                   IF gIndexationDate <> 0D THEN BEGIN
                     IndexDateFrom := gIndexationDate;
                     IndexDateTo := gIndexationDate;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1100529002;0;Container;
                  ContainerType=ContentArea }

      { 1100529001;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100529004;2;Field  ;
                  CaptionML=ENU=Indexation Date From;
                  NotBlank=Yes;
                  SourceExpr=IndexDateFrom;
                  OnValidate=BEGIN
                               ValidateIndexDateFrom();
                               IF IndexDateTo < IndexDateFrom THEN
                                 IndexDateTo := IndexDateFrom;
                             END;
                              }

      { 1100529003;2;Field  ;
                  CaptionML=ENU=Indexation Date To;
                  NotBlank=Yes;
                  SourceExpr=IndexDateTo;
                  OnValidate=BEGIN
                               ValidateIndexDateTo();
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ProjSetup@1100529005 : Record 315;
      TmpError@1100529000 : TEMPORARY Record 11012051;
      Text000@1100529008 : TextConst 'ENU=%1 rental package(s) indexed';
      Text001@1100529001 : TextConst 'ENU=%1 ''%2'' no %3 found';
      Text002@1100529002 : TextConst 'ENU=No lines that must be indexed';
      Text003@1100529003 : TextConst 'ENU=%1 not filled';
      Window@1100529010 : Dialog;
      IndexDateFrom@1100529006 : Date;
      IndexDateTo@1100529014 : Date;
      gIndexationDate@1100529009 : Date;
      Counter@1100529007 : Integer;
      Text005@1100529011 : TextConst 'ENU=ATTENTION: Also lines present that must be indexed manually';
      Text006@1100529012 : TextConst 'ENU=Indexed';
      Text008@1100529013 : TextConst 'ENU=%1 ''%2'' has status ''%3'', this must be posted first';
      Text009@1100529015 : TextConst 'ENU="''Date To'' may not be less than ''Date From'' "';
      Text010@1100529016 : TextConst 'ENU=Indexation Date older than 1 year not allowed';
      Text011@1100529017 : TextConst 'ENU=Selected indexation date already %1 days old. Are you sure?';
      Text012@1100529018 : TextConst 'ENU=No Rate found before %1 %2: %3 %4, %5 %6';
      Text013@1100529019 : TextConst 'ENU=Already rate persent on %1, %2 %3: %4 %5, %6 %7';

    PROCEDURE SetSelections@1100529001(IndexationDate@1100529000 : Date);
    BEGIN
      gIndexationDate := IndexationDate;
    END;

    LOCAL PROCEDURE ValidateIndexDateFrom@1100529006();
    BEGIN
      IF IndexDateFrom <> 0D THEN BEGIN
        IF CALCDATE('<1Y>', IndexDateFrom) < TODAY THEN
          ERROR(Text010);
      END;
    END;

    LOCAL PROCEDURE ValidateIndexDateTo@1100529007();
    BEGIN
      IF IndexDateTo < IndexDateFrom THEN
        ERROR(Text009);
    END;

    LOCAL PROCEDURE Check@1100529000(RentalPackage@1100529000 : Record 11012941) RetOK : Boolean;
    VAR
      RentalRateLine@1100529001 : Record 11012942;
      RentalPackageLineRate@1100529007 : Record 11229856;
      IndexingRate@1100529003 : Record 11229847;
      TmpIndexGroup@1100529004 : TEMPORARY Record 11229846;
      Invoiced@1100529002 : Boolean;
      CounterIndex@1100529005 : Integer;
      CounterManual@1100529006 : Integer;
    BEGIN
      RetOK := TRUE;
      WITH RentalPackage DO BEGIN
        RentalRateLine.SETRANGE("Project No.", "Project No.");
        RentalRateLine.SETRANGE("Rental Unit", "Rental Unit");
        RentalRateLine.SETRANGE("Starting Date Package", "Starting Date");
        RentalRateLine.SETFILTER("Index Group", '<>%1', '');
        //
        RentalRateLine.SETRANGE("Index Type", RentalRateLine."Index Type"::Index);
        IF RentalRateLine.ISEMPTY THEN
          EXIT(FALSE);  //Skip, no error(s)
        //
        RentalRateLine.SETRANGE("Index Type", RentalRateLine."Index Type"::Index, RentalRateLine."Index Type"::Manual);
        IF RentalRateLine.FINDSET() THEN BEGIN
          REPEAT
            IF StartIndexingLine(RentalPackage, RentalRateLine) THEN BEGIN  //C020370.n
              IF NOT LineTerminatedBeforeIndexDate(RentalPackage, RentalRateLine) THEN BEGIN
                RentalRateLine.CALCFIELDS("Index Type");
                CASE RentalRateLine."Index Type" OF
                  RentalRateLine."Index Type"::Index:
                    BEGIN
                      CounterIndex := CounterIndex + 1;
                      IF NOT TmpIndexGroup.GET(RentalRateLine."Index Group") THEN BEGIN
                        TmpIndexGroup.Code := RentalRateLine."Index Group";
                        TmpIndexGroup.INSERT;
                        IF NOT ReadIndexRate(RentalRateLine, "Indexation Date", IndexingRate) THEN BEGIN
                          WriteError(RentalPackage,
                            STRSUBSTNO(Text001,
                              RentalRateLine.FIELDCAPTION("Index Group"),
                              RentalRateLine."Index Group", IndexingRate.TABLECAPTION));
                          RetOK := FALSE;
                        END;
                      END;
                      IF NOT RentalRateLine.GetLineRateOnRefDate(RentalRateLine, "Indexation Date"-1, RentalPackageLineRate) THEN BEGIN
                        //IF "Indexation Date" >= RentalRateLine."Starting Date Line" THEN BEGIN  //C020370.o
                          WriteError(RentalPackage, STRSUBSTNO(Text012,
                            FIELDCAPTION("Indexation Date"), "Indexation Date",
                            RentalRateLine.FIELDCAPTION("Line No."), RentalRateLine."Line No.",
                            RentalRateLine.FIELDCAPTION(Description), RentalRateLine.Description));
                          RetOK := FALSE;
                        //END;
                      END ELSE BEGIN
                        IF RentalRateLine.GetNextLineRate(RentalPackageLineRate, RentalPackageLineRate) THEN BEGIN
                          WriteError(RentalPackage, STRSUBSTNO(Text013, RentalPackageLineRate.Date,
                            FIELDCAPTION("Indexation Date"), "Indexation Date",
                            RentalRateLine.FIELDCAPTION("Line No."), RentalRateLine."Line No.",
                            RentalRateLine.FIELDCAPTION(Description), RentalRateLine.Description));
                          RetOK := FALSE;
                        END;
                      END;
                    END;
                  RentalRateLine."Index Type"::Manual:
                    CounterManual := CounterManual + 1;
                END;
              END;
            END;
          UNTIL RentalRateLine.NEXT = 0;
          TmpIndexGroup.DELETEALL;
        END;

        IF CounterIndex = 0 THEN BEGIN
          WriteError(RentalPackage, Text002);
          EXIT(FALSE);  //Skip, no further erors
        END;

        IF "Invoice Status" = "Invoice Status"::"Temporary" THEN BEGIN
          WriteError(RentalPackage, STRSUBSTNO(Text008, FIELDCAPTION("Last Invoice No."), "Last Invoice No.", "Invoice Status"));
          RetOK := FALSE;
        END;
        IF FORMAT("Indexation Frequency") = '' THEN BEGIN
          WriteError(RentalPackage, STRSUBSTNO(Text001, FIELDCAPTION("Indexation Frequency")));
          RetOK := FALSE;
        END;

        //Not needed anymore, because now rates per line/date (was only 1 periode/year amount on line). Can be removed later (may be needed again?)
        //RentalRateLine.RESET;
        //RentalRateLine.SETRANGE("Project No.", "Project No.");
        //RentalRateLine.SETRANGE("Rental Unit", "Rental Unit");
        //RentalRateLine.SETRANGE("Starting Date Package", "Starting Date");
        //RentalRateLine.SETFILTER("Invoiced Until", '<%1', "Indexation Date"-1);
        //RentalRateLine.SETFILTER("Starting Date Line", '<%1', "Indexation Date");
        //IF RentalRateLine.FINDSET THEN BEGIN
        //  REPEAT
        //    Invoiced := FALSE;
        //    IF RentalRateLine."Ending Date Line" <> 0D THEN BEGIN
        //      IF (RentalRateLine."Ending Date Line" = RentalRateLine."Invoiced Until") AND (RentalRateLine."Termination Reason" <> '') THEN
        //        Invoiced := TRUE;
        //    END ELSE BEGIN
        //      IF ("Ending Date" <> 0D) AND ("Ending Date" = RentalRateLine."Invoiced Until") AND ("Termination Reason" <> '') THEN
        //        Invoiced := TRUE;
        //    END;
        //    IF NOT Invoiced THEN BEGIN
        //      WriteError(RentalPackage, STRSUBSTNO(Text004, FIELDCAPTION("Indexation Date"), "Indexation Date"));
        //      Text004 was: ENU=Not yet (completely) invoiced until %1 (%2);NLD=Nog niet (volledig) gefactureerd tot %1 (%2)
        //      RetOK := FALSE;
        //    END;
        //  UNTIL (RentalRateLine.NEXT = 0) OR (NOT Invoiced);
        //END;
      END;

      IF RetOK AND (CounterManual > 0) THEN
        WriteError(RentalPackage, Text005);  //Only a warning
      EXIT(RetOK);
    END;

    PROCEDURE StartIndexingLine@1100409001(RentalPackage@1100409000 : Record 11012941;RentalRateLine@1100409001 : Record 11012942) : Boolean;
    BEGIN
      //C020370
      IF RentalRateLine."Indexing Allowed From" = 0D THEN
        EXIT(RentalRateLine."Starting Date Line" <= RentalPackage."Indexation Date")
      ELSE
        EXIT(RentalRateLine."Indexing Allowed From" <= RentalPackage."Indexation Date");
    END;

    LOCAL PROCEDURE ReadIndexRate@1100529004(RentalRateLine@1100529001 : Record 11012942;IndexDate@1100529002 : Date;VAR IndexingRate@1100529000 : Record 11229847) : Boolean;
    BEGIN
      IndexingRate.SETCURRENTKEY("Index Group", "Index Date");
      IndexingRate.SETRANGE("Index Group", RentalRateLine."Index Group");
      IndexingRate.SETRANGE("Index Date", IndexDate-360, IndexDate);
      IF IndexingRate.FINDLAST THEN BEGIN
        IF IndexingRate."Index Date" <> 0D THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE WriteError@1100529003(RentalPackage@1100529001 : Record 11012941;ErrorMess@1100529000 : Text);
    BEGIN
      TmpError.INIT;
      TmpError."User ID" := USERID;
      TmpError."Source Type" := TmpError."Source Type"::RentalUnit;
      TmpError."Line No." := TmpError."Line No." + 1;
      TmpError."Project No." := RentalPackage."Project No.";
      TmpError."Rental Unit" := RentalPackage."Rental Unit";
      TmpError."Starting Date Package" := RentalPackage."Starting Date";
      TmpError."Error message" := COPYSTR(ErrorMess, 1, MAXSTRLEN(TmpError."Error message"));
      TmpError.INSERT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

