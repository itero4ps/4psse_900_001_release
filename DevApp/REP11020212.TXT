OBJECT Report 11020212 Gen. Progress from Installment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Genenerate Progress from Installment;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ValidateProject();
                  ValidateProgressDate();
                END;

  }
  DATASET
  {
    { 5136;    ;DataItem;                    ;
               DataItemTable=Table11012018;
               DataItemTableView=SORTING(Project No.,Principal,Plot No.,Installment No.)
                                 WHERE(Element=FILTER(<>''));
               OnPreDataItem=BEGIN
                               Window.OPEN(Text001);

                               SETRANGE("Project No.", ProjectNo);

                               TmpProjInstallRec.RESET;
                               TmpProjInstallRec.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1, "Installment No.");

                                  IF Points <> 0 THEN
                                     InvoiceAmt := (("Points to be invoiced" + InvoicedPoints()) / Points) * "Installment Amount (LCY)"
                                  ELSE BEGIN
                                     CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)", "Credit Memo in Process (LCY)");
                                     InvoiceAmt := "Invoice Price (LCY)" + "Invoiced Price (LCY)" + "Invoice in Process (LCY)" + "Credit Memo in Process (LCY)";
                                  END;
                                  IF "Installment Amount (LCY)" >=0 THEN BEGIN
                                    IF InvoiceAmt > "Installment Amount (LCY)" THEN
                                      InvoiceAmt := "Installment Amount (LCY)";
                                    IF InvoiceAmt < 0 THEN
                                      InvoiceAmt := 0;
                                  END ELSE BEGIN
                                    IF InvoiceAmt < "Installment Amount (LCY)" THEN
                                      InvoiceAmt := "Installment Amount (LCY)";
                                    IF InvoiceAmt > 0 THEN
                                      InvoiceAmt := 0;
                                  END;

                                  IF NOT TmpProjInstallRec.GET("Project No.", Element, '', '') THEN BEGIN
                                    TmpProjInstallRec.INIT;
                                    TmpProjInstallRec."Project No." := "Project No.";
                                    TmpProjInstallRec.Principal := Element; //* Keyfield 'Principal' is also used for 'Element' (needed for sorting on element)
                                    TmpProjInstallRec."Plot No." := '';
                                    TmpProjInstallRec."Installment No." := '';
                                    TmpProjInstallRec.Element := Element;
                                    TmpProjInstallRec."Installment Amount (LCY)" := "Installment Amount (LCY)";
                                    TmpProjInstallRec."Invoice Price (LCY)" := InvoiceAmt;
                                    TmpProjInstallRec.INSERT;
                                  END ELSE BEGIN
                                    TmpProjInstallRec."Installment Amount (LCY)" := TmpProjInstallRec."Installment Amount (LCY)" + "Installment Amount (LCY)";
                                    TmpProjInstallRec."Invoice Price (LCY)" := TmpProjInstallRec."Invoice Price (LCY)" + InvoiceAmt;
                                    TmpProjInstallRec.MODIFY;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;
                               }

    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               Window.OPEN(Text002);

                               TmpProjInstallRec.RESET;
                               IF NOT TmpProjInstallRec.FIND('-') THEN
                                 ERROR(Text003);

                               AllProgressIsZero := TRUE;

                               IF NOT ProgressLevelRec.GET(TmpProjInstallRec."Project No.", ProgressDate) THEN BEGIN
                                 ProgressLevelRec.INIT;
                                 ProgressLevelRec."Project No." := TmpProjInstallRec."Project No.";
                                 ProgressLevelRec."Progress Date" := ProgressDate;
                                 ProgressLevelRec.INSERT(TRUE);
                               END;
                               CODEUNIT.RUN(CODEUNIT::"Create Progress Lines", ProgressLevelRec);

                               ProgressLineRec.RESET;
                               ProgressLineRec.SETCURRENTKEY("Project No.", "Progress Date", Element, "Cost Object");
                               ProgressLineRec.SETRANGE("Project No.", TmpProjInstallRec."Project No.");
                               ProgressLineRec.SETRANGE("Progress Date", ProgressDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number > 1 THEN BEGIN
                                    IF TmpProjInstallRec.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  END;

                                  Window.UPDATE(1, TmpProjInstallRec.Element);

                                  IF (TmpProjInstallRec."Installment Amount (LCY)" = 0) OR (TmpProjInstallRec."Invoice Price (LCY)" = 0) THEN
                                    CumPerc := 0
                                  ELSE
                                    CumPerc := ROUND(TmpProjInstallRec."Invoice Price (LCY)" / TmpProjInstallRec."Installment Amount (LCY)" * 100, 0.01);
                                  IF CumPerc <> 0 THEN
                                    AllProgressIsZero := FALSE;

                                  ProgressLineRec.SETRANGE(Element, TmpProjInstallRec.Element);
                                  IF ProgressLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                    REPEAT
                                      ProgressLineRec.VALIDATE("Cumulative Progress %", CumPerc);
                                      ProgressLineRec.MODIFY(TRUE);
                                    UNTIL ProgressLineRec.NEXT = 0;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                                IF AllProgressIsZero THEN  //* Onzinnige melding, moet van Jules
                                  MESSAGE(Text004);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               ProgressDate := TODAY;
             END;

      OnOpenPage=BEGIN
                   IF gProjectNo <> '' THEN
                     ProjectNo := gProjectNo;
                   IF gProgressDate <> 0D THEN
                     ProgressDate := gProgressDate;

                   DetermineLastProgressDate();
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1210190000;2;Field  ;
                  CaptionML=ENU=Job No.;
                  NotBlank=Yes;
                  SourceExpr=ProjectNo;
                  TableRelation=Job;
                  OnValidate=BEGIN
                               ValidateProject();
                                 ProjectNoOnAfterValidate;
                             END;
                              }

      { 1210190003;2;Field  ;
                  CaptionML=ENU=Last Progress Date;
                  SourceExpr=LastProgressDate;
                  Editable=FALSE }

      { 1210190005;2;Field  ;
                  CaptionML=ENU=Progress Date;
                  NotBlank=Yes;
                  SourceExpr=ProgressDate;
                  OnValidate=BEGIN
                               ValidateProgressDate();
                             END;

                  OnLookup=VAR
                             lvProgressLevelRec@1210190000 : Record 11012036;
                           BEGIN
                             lvProgressLevelRec.SETRANGE("Project No.", ProjectNo);
                             lvProgressLevelRec."Project No." := ProjectNo;
                             lvProgressLevelRec."Progress Date" := ProgressDate;
                             IF PAGE.RUNMODAL(0, lvProgressLevelRec) = ACTION::LookupOK THEN
                               ProgressDate := lvProgressLevelRec."Progress Date";
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ProjRec@1210190005 : Record 11072003;
      ProgressLevelRec@1210190011 : Record 11012036;
      ProgressLineRec@1210190012 : Record 11012037;
      TmpProjInstallRec@1210190009 : TEMPORARY Record 11012018;
      Window@1210190014 : Dialog;
      LastProgressDate@1210190004 : Date;
      ProgressDate@1210190001 : Date;
      gProgressDate@1210190000 : Date;
      SaveProgressDateOk@1210190007 : Date;
      AllProgressIsZero@1100485001 : Boolean;
      InvoiceAmt@1210190010 : Decimal;
      CumPerc@1210190013 : Decimal;
      gProjectNo@1210190003 : Code[20];
      ProjectNo@1210190002 : Code[20];
      Text000@1210190006 : TextConst 'ENU=Progress Date ''%1'' is less than Last Progress Date ''%2''. Continue ?';
      SaveProjectNoOk@1210190008 : Code[20];
      Text001@1210190015 : TextConst 'ENU=Installment No. #1##########';
      Text002@1210190016 : TextConst 'ENU=Element #1##########';
      Text003@1100485000 : TextConst 'ENU=No installments present of the project or the element of the installments is not filled.';
      Text004@1100485002 : TextConst 'ENU=Cum. progress percentage is zero for all installments, probable there are no installments  to be invoice and/or invoiced.';

    PROCEDURE SetDefaultSelection@1210190003(IProjectNo@1210190000 : Code[20];IProgressDate@1210190001 : Date);
    BEGIN
      gProjectNo := IProjectNo;
      IF IProgressDate <> 0D THEN
        gProgressDate := IProgressDate
      ELSE
        gProgressDate := TODAY;
    END;

    PROCEDURE DetermineLastProgressDate@1210190000();
    VAR
      lvProgressLevelRec@1210190000 : Record 11012036;
    BEGIN
      LastProgressDate := 0D;
      IF ProjectNo = '' THEN
        EXIT;

      lvProgressLevelRec.SETRANGE("Project No.", ProjectNo);
      IF lvProgressLevelRec.FIND('+') THEN
        LastProgressDate := lvProgressLevelRec."Progress Date";
    END;

    PROCEDURE ValidateProject@1210190008();
    BEGIN
      ProjRec.GET(ProjectNo);
      ProjRec.TESTFIELD("Progress from Instal. Progress", TRUE);
      ProjRec.TESTFIELD("Progress Registry", ProjRec."Progress Registry"::Percentages);
    END;

    PROCEDURE ValidateProgressDate@1210190001();
    BEGIN
      IF (ProjectNo = '') OR (LastProgressDate = 0D) THEN
        EXIT;

      IF (ProgressDate < LastProgressDate) AND ((ProjectNo <> SaveProjectNoOk) OR (ProgressDate <> SaveProgressDateOk)) THEN BEGIN
        IF NOT CONFIRM(Text000, FALSE, ProgressDate, LastProgressDate) THEN
          ERROR('');
        SaveProjectNoOk := ProjectNo;
        SaveProgressDateOk := ProgressDate;
      END;
    END;

    LOCAL PROCEDURE ProjectNoOnAfterValidate@19041008();
    BEGIN
      DetermineLastProgressDate();
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

