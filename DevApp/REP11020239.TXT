OBJECT Report 11020239 Post Receipts Blanket Scheme
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Post Receipts based on Blanket Scheme;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ValidateStartingDate();
                  ValidateEndingDate();
                  ValidatePostingDate();

                  Window.OPEN(Text000 + '\\\\\\\\\\\\\\\');  //* Extra empty line, then order no. is visible whenan error occurs
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                 END;

  }
  DATASET
  {
    { 4458;    ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order),
                                       Purchase Order Type=CONST(Blanket Order),
                                       Status=FILTER(Open|Released));
               ReqFilterHeadingML=ENU=Blanket Order;
               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1, "No.");
                                  IF NOT AllPurchLinesToReceiveIsZero() THEN BEGIN
                                    //* Boeken van ontvangsten is alleen mogelijk per order, als er op de order al 'Te ontvangen' is ingevuld
                                    //* dan niet toegestaan. Als men alles via het afroepschema doet zal dat te ontvangen aantal toch nul zijn.
                                    ERROR(Text005, "No.", PurchLineRec.FIELDCAPTION("Qty. to Receive"));
                                  END;

                                  TmpPurchLineRec.RESET;
                                  TmpPurchLineRec.DELETEALL;
                                END;

               ReqFilterFields=No.,Buy-from Vendor No. }

    { 1100525000;1;DataItem;BlanketSchemePlots;
               DataItemTable=Table11012066;
               DataItemTableView=SORTING(Document No.,Document Line No.,Blanket Date)
                                 WHERE(Quantity=FILTER(>0),
                                       Receipts Created=CONST(No));
               OnPreDataItem=BEGIN
                               //DP00416
                               //* Build tmp with plots of the selecteted Blanket Scheme lines.
                               FILTERGROUP(9);
                               SETRANGE("Blanket Date", StartingDate, EndingDate);
                               FILTERGROUP(0);

                               TmpPlot.RESET;
                               TmpPlot.DELETEALL;
                             END;

               OnAfterGetRecord=VAR
                                  Plot@1100525000 : Record 11012500;
                                BEGIN
                                  IF PurchLineRec.GET(PurchLineRec."Document Type"::Order, "Document No.", "Document Line No.") THEN BEGIN
                                    TESTFIELD("Project No.", PurchLineRec."Job No.");
                                    IF PurchLineRec."Job No." = '' THEN
                                      TESTFIELD("Plot No.", '')
                                    ELSE BEGIN
                                      IF PurchLineRec."Plot No." <> '' THEN
                                        TESTFIELD("Plot No.", PurchLineRec."Plot No.");
                                      IF "Plot No." <> '' THEN
                                        Plot.GET("Project No.", "Plot No.");
                                    END;
                                    IF NOT TmpPlot.GET("Project No.", "Plot No.") THEN BEGIN
                                      TmpPlot."Project No." := "Project No.";
                                      TmpPlot."Plot No." := "Plot No.";
                                      TmpPlot.INSERT;
                                    END;
                                  END;
                                END;

               ReqFilterFields=Plot No.;
               DataItemLink=Document No.=FIELD(No.) }

    { 1100525001;1;DataItem;PlotLoop         ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               //DP00416
                               TmpPlot.RESET;
                               IF NOT TmpPlot.FINDSET THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number > 1 THEN BEGIN
                                    IF TmpPlot.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  END;
                                END;
                                 }

    { 9106;2   ;DataItem;                    ;
               DataItemTable=Table11012066;
               DataItemTableView=SORTING(Document No.,Document Line No.,Blanket Date)
                                 WHERE(Quantity=FILTER(>0),
                                       Receipts Created=CONST(No));
               OnPreDataItem=BEGIN
                               //SETRANGE("Blanket Date", StartingDate, EndingDate);  //DP00416.o
                               //DP00416.sn
                               COPYFILTERS(BlanketSchemePlots);  //Copy filters filtergroup 0 (entered filters)
                               FILTERGROUP(9);
                               SETRANGE("Blanket Date", StartingDate, EndingDate);
                               SETRANGE("Project No.", TmpPlot."Project No.");
                               SETRANGE("Plot No.", TmpPlot."Plot No.");
                               FILTERGROUP(0);
                               TmpPurchLineRec.RESET;
                               TmpPurchLineRec.DELETEALL;
                               SetAllPurchLinesToReceiveZero();
                               //DP00416.en
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT TmpPurchLineRec.GET(TmpPurchLineRec."Document Type"::Order, "Document No.", "Document Line No.") THEN BEGIN
                                    TmpPurchLineRec."Document Type" := TmpPurchLineRec."Document Type"::Order;
                                    TmpPurchLineRec."Document No." := "Document No.";
                                    TmpPurchLineRec."Line No." := "Document Line No.";
                                    TmpPurchLineRec."Qty. to Receive" := "Blanket Scheme".Quantity;
                                    TmpPurchLineRec."Input by" := USERID; //DP00469
                                    TmpPurchLineRec."Input Date" := TODAY; //DP00469
                                    TmpPurchLineRec.INSERT;
                                  END ELSE BEGIN
                                    TmpPurchLineRec."Qty. to Receive" := TmpPurchLineRec."Qty. to Receive" + "Blanket Scheme".Quantity;
                                    TmpPurchLineRec."Modified by" := USERID; //DP00469
                                    TmpPurchLineRec."Last Date Modified" := TODAY;//DP00469
                                    TmpPurchLineRec.MODIFY;
                                  END;

                                  "Receipts Created" := TRUE;
                                  MODIFY(FALSE);
                                END;

               OnPostDataItem=BEGIN
                                PostReceipts();
                              END;

               DataItemLinkReference=Purchase Header;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=ENU=Period Filter;
                  NotBlank=Yes;
                  SourceExpr=PeriodFilter;
                  OnValidate=VAR
                               DateSelectionManagement@1100525000 : Codeunit 11130005;
                             BEGIN
                               DateSelectionManagement.ConvertPeriodStringToDates(PeriodFilter, StartingDate, EndingDate);
                             END;

                  OnAssistEdit=VAR
                                 DateSelectionManagement@1100525000 : Codeunit 11130005;
                               BEGIN
                                 DateSelectionManagement.GetPeriod(PeriodFilter);
                                 DateSelectionManagement.ConvertPeriodStringToDates(PeriodFilter, StartingDate, EndingDate);
                               END;
                                }

      { 1100525004;2;Field  ;
                  CaptionML=ENU=Posting Date;
                  NotBlank=Yes;
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               ValidatePostingDate();
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PeriodRec@1100485012 : Record 2000000007;
      PurchLineRec@1100485001 : Record 39;
      TmpPurchLineRec@1100485000 : TEMPORARY Record 39;
      TmpPlot@1100525003 : TEMPORARY Record 11012500;
      PeriodFormMgtCU@1100485011 : Codeunit 359;
      PurchPostYesNoCU@1100485005 : Codeunit 91;
      Window@1100525000 : Dialog;
      StartingDate@1100485003 : Date;
      EndingDate@1100485004 : Date;
      PostingDate@1100485006 : Date;
      Text000@1100525001 : TextConst 'ENU=Order #1##################';
      Text001@1100485007 : TextConst 'ENU=Period Filter may not be empty.';
      Text002@1100485008 : TextConst 'ENU=Ending Date may not be empty.';
      Text003@1100485009 : TextConst 'ENU=Ending Date may not be less than the Starting Date.';
      Text004@1100485002 : TextConst 'ENU=Posting Date may not be empty.';
      PeriodType@1100485010 : 'Day,Week,Month';
      Text005@1100485013 : TextConst 'ENU=Create receipts not allowed for blanket order ''%1'', there are still not posted receipts present (''%2'' is filled). These must be posted or deleted first.';
      PeriodFilter@1100525002 : Text[100];

    PROCEDURE ValidateStartingDate@1100485002();
    BEGIN
      IF StartingDate = 0D THEN
        ERROR(Text001);

      IF EndingDate < StartingDate THEN
        EndingDate := StartingDate;
    END;

    PROCEDURE ValidateEndingDate@1100485003();
    BEGIN
      IF EndingDate = 0D THEN
        ERROR(Text002);
      IF EndingDate < StartingDate THEN
        ERROR(Text003);
    END;

    PROCEDURE ValidatePostingDate@1100485007();
    BEGIN
      IF PostingDate = 0D THEN
        ERROR(Text004);
    END;

    PROCEDURE OnPushPeriodType@1100485004(ISearchString@1100485000 : Text[10]);
    BEGIN
      PeriodRec."Period Start" := StartingDate;
      PeriodFormMgtCU.FindDate(ISearchString, PeriodRec, PeriodType);
      StartingDate := PeriodRec."Period Start";
      EndingDate := PeriodRec."Period End";
    END;

    PROCEDURE AllPurchLinesToReceiveIsZero@1100485000() : Boolean;
    BEGIN
      PurchLineRec.RESET;
      PurchLineRec.SETRANGE("Document Type", "Purchase Header"."Document Type");
      PurchLineRec.SETRANGE("Document No.", "Purchase Header"."No.");
      PurchLineRec.SETFILTER("Qty. to Receive", '<>%1', 0);
      IF NOT PurchLineRec.FINDFIRST THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE SetAllPurchLinesToReceiveZero@1100525002();
    BEGIN
      //DP00461.n
      // Is already check if all lines zero for Purch.Order but now more than 1 run per order possible, if "Qty. to Receive" is
      // (default) filled in a previous run then this quantity must be reset.
      PurchLineRec.RESET;
      PurchLineRec.SETRANGE("Document Type", "Purchase Header"."Document Type");
      PurchLineRec.SETRANGE("Document No.", "Purchase Header"."No.");
      PurchLineRec.SETFILTER("Qty. to Receive", '<>%1', 0);
      PurchLineRec.MODIFYALL("Qty. to Receive", 0, TRUE);
    END;

    PROCEDURE PostReceipts@1100485001();
    VAR
      lvReceiptsCreated@1100485000 : Boolean;
    BEGIN
      lvReceiptsCreated := FALSE;
      TmpPurchLineRec.RESET;
      IF TmpPurchLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF TmpPurchLineRec."Qty. to Receive" > 0 THEN BEGIN
            IF PurchLineRec.GET(TmpPurchLineRec."Document Type", TmpPurchLineRec."Document No.", TmpPurchLineRec."Line No.") THEN BEGIN
              PurchLineRec.VALIDATE("Qty. to Receive", TmpPurchLineRec."Qty. to Receive");
              PurchLineRec.MODIFY(TRUE);
              lvReceiptsCreated := TRUE;
            END;
          END;
        UNTIL TmpPurchLineRec.NEXT = 0;
        IF lvReceiptsCreated THEN BEGIN
          PurchPostYesNoCU.PostReceiptsFromBlanketScheme("Purchase Header", PostingDate, TmpPlot."Plot No.");
          COMMIT;
        END;
      END;
    END;

    PROCEDURE SetDateFilter@1100525000(NewStartDate@1100525000 : Date;NewEndDate@1100525001 : Date);
    BEGIN
      CASE TRUE OF
        (NewStartDate <> 0D) AND (NewEndDate <> 0D):
          PeriodFilter := FORMAT(NewStartDate) + '..' + FORMAT(NewEndDate);
        (NewStartDate <> 0D) AND (NewEndDate = 0D):
          PeriodFilter := FORMAT(NewStartDate);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

