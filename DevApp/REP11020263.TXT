OBJECT Report 11020263 Process Proj Collective-List
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11072003=m;
    CaptionML=ENU=Process Project Collective-List;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  Window.OPEN( //kkleermaker, 110718, M28248
                    Text007 +
                    Text001 +
                    Text002 +
                    Text004);

                  ProjSetup.GET;
                  SalesSetup.GET;

                  NextLinkNo := '1';
                  TmpProjInvBuffer.RESET;
                  TmpProjInvBuffer.DELETEALL;  //* Is a temporary tabel
                  TmpProjInvBuffer2.RESET;
                  TmpProjInvBuffer2.DELETEALL;
                END;

    OnPostReport=VAR
                   SaveProjNo@1100525000 : Code[20];
                   InternalCounter@1210190000 : Integer;
                   ProjectCollectiveList@1100528200 : Record 11071875;
                 BEGIN
                   Window.CLOSE;
                   Window.OPEN(
                     Text000 +
                     Text001 +
                     Text002 +
                     Text004);

                   IF TmpGenericRec.FINDSET THEN BEGIN
                     REPEAT
                       WITH TmpProjInvBuffer DO BEGIN
                         RESET;
                         SETCURRENTKEY("Sorting Order");
                         SETRANGE("Production Code", TmpGenericRec."Key Code1");
                         IF FINDSET THEN
                           REPEAT
                             InsertHeader := TRUE;
                             MultipleProjects := FALSE;
                             MultipleReferences := FALSE;
                             MultipleOrderNos := FALSE;
                             MultipleOrderDates := FALSE;
                             MultipleDim1 := FALSE;
                             Window.UPDATE(1,Principal);

                             SaveProjNo := "Project No.";
                             CollectByMainProjectRun := FALSE;
                             IF "Collect Invoices By" = "Collect Invoices By"::"Main Project" THEN BEGIN
                               TmpProjInvBuffer2.RESET;
                               TmpProjInvBuffer2.SETRANGE("No. Series Debet", "Link No.");
                               TmpProjInvBuffer2.SETRANGE("Production Code", "Production Code");
                               IF TmpProjInvBuffer2.FINDFIRST THEN BEGIN
                                 CollectByMainProjectRun := TRUE;
                                 "Project No." := TmpProjInvBuffer2."Project No.";
                               END;
                             END;

                             REPEAT
                               TmpGenericRec2.RESET;
                               TmpGenericRec2.SETRANGE("Key Code1", TmpGenericRec.Text1);  //Collective list
                               TmpGenericRec2.SETRANGE("Key Code2");                       //Project
                               TmpGenericRec2.SETRANGE("Key Code3", Principal);            //Principal
                               TmpGenericRec2.SETRANGE("Key Code4");                       //Commission
                               TmpGenericRec2.SETRANGE(Int1);                              //CollectInvoicesBy

                               CASE "Collect Invoices By" OF
                                 "Collect Invoices By"::"Main Project":
                                   TmpGenericRec2.SETRANGE(Int1,CommissionRec."Collect Cost Plus Lines By"::"Main Project");
                               ELSE
                                 TmpGenericRec2.SETRANGE(Int1,"Collect Invoices By");
                               END;

                               CASE "Collect Invoices By" OF
                                 "Collect Invoices By"::Supervisor:;      //** = By Collective list
                                     //   select all
                                 "Collect Invoices By"::"Main Project",   //** By Main Project
                                 "Collect Invoices By"::Project:          //** By Project
                                   TmpGenericRec2.SETRANGE("Key Code2","Project No.");         //Project

                                 "Collect Invoices By"::Commission:  //** By Commission
                                   BEGIN
                                     TmpGenericRec2.SETRANGE("Key Code2","Project No.");         //Project
                                     TmpGenericRec2.SETRANGE("Key Code4","Commission No.");      //Commission
                                   END;
                                 "Collect Invoices By"::"Settlement Sheet": //** BySettlement Sheet
                                   BEGIN
                                     TmpGenericRec2.SETRANGE("Key Code2","Project No.");         //Project
                                     TmpGenericRec2.SETRANGE("Key Code4","Commission No.");      //Commission
                                   END;
                                 "Collect Invoices By"::Principal: //** By Cost Plus entry
                                   BEGIN
                                     TmpGenericRec2.SETRANGE("Key Code2","Project No.");         //Project
                                     TmpGenericRec2.SETRANGE("Key Code4","Commission No.");      //Commission
                                   END;
                               END;

                               IF TmpGenericRec2.FINDSET(TRUE, FALSE) THEN BEGIN
                                 REPEAT
                                    CommissionRec.GET(
                                      TmpGenericRec2."Key Code2",                //Project
                                      TmpGenericRec2."Key Code3",                //Principal
                                      TmpGenericRec2."Key Code4");               //Commission

                                    ProjRec.GET(CommissionRec."Project No.");
                                    TestProject;
                                    IF NOT SkipProjTypeSeries(CommissionRec."Project No.") THEN BEGIN
                                      CommissionRec.CALCFIELDS(Prospect,"Supervisor Name");
                                      IF (ProjSetup."Provisions at Closure") THEN BEGIN
                                        IF (ProjRec."Project Status" < ProjRec."Project Status"::Archive) THEN
                                          InvoiceCostPlus;
                                      END ELSE BEGIN
                                        IF (ProjRec."Project Status" < ProjRec."Project Status"::"Administrative Finished") THEN
                                          InvoiceCostPlus;
                                      END;
                                    END;
                                   TmpGenericRec2.DELETE;
                                 UNTIL TmpGenericRec2.NEXT = 0;
                               END;

                               IF CollectByMainProjectRun THEN BEGIN
                                 TmpProjInvBuffer2.DELETE;
                                 IF TmpProjInvBuffer2.NEXT = 0 THEN
                                   CollectByMainProjectRun := FALSE
                                 ELSE
                                   "Project No." := TmpProjInvBuffer2."Project No.";
                               END;
                             UNTIL NOT CollectByMainProjectRun;

                             IF "Project No." <> SaveProjNo THEN
                               "Project No." := SaveProjNo;

                             IF NOT InsertHeader THEN
                               SalesHeaderRec.DetermineRemovalContribution;

                             IF MultipleProjects THEN BEGIN
                               SalesHeaderRec."Job No." := '';
                               SalesHeaderRec.MODIFY;
                             END;
                             IF MultipleDim1 THEN BEGIN
                               SalesHeaderRec."Shortcut Dimension 1 Code" := '';
                               SalesHeaderRec.MODIFY;
                             END;
                             IF MultipleReferences THEN BEGIN
                               SalesHeaderRec."Principal Reference" := '';
                               SalesHeaderRec.MODIFY;
                             END;
                             IF MultipleOrderNos THEN BEGIN
                               SalesHeaderRec."Order No. Customer" := '';
                               SalesHeaderRec.MODIFY;
                             END;
                             IF MultipleOrderDates THEN BEGIN
                               SalesHeaderRec."Commision Date Customer" := 0D;
                               SalesHeaderRec.MODIFY;
                             END;

                           UNTIL NEXT = 0;

                         IF InternalChargeMgt.GetNumInternalCharges > 0 THEN
                           InternalChargeMgt.PostBatch(0, TempGenJnlLine, TmpIcEntry);  //DP00847.c

                         DELETEALL;
                       END;
                       ProjectCollectiveList.GET(TmpGenericRec.Text1);
                       ProjectCollectiveList.CALCFIELDS("Invoice Price");
                       IF ProjectCollectiveList."Invoice Price" = 0 THEN BEGIN
                         ProjectCollectiveList.Status := "Project Collective-List".Status::Processed;
                         ProjectCollectiveList.MODIFY;
                       END;

                     UNTIL TmpGenericRec.NEXT =0;
                   END;

                   //Modify Project Status of small projects
                   IF UpdateProjectStatus THEN
                     IF TempProjRec.FIND('-') THEN
                       REPEAT
                         ProjRec := TempProjRec;
                         ProjRec.FIND('='); //necessary for sql
                         ProjRec.VALIDATE("Project Status", ProjRec."Project Status"::"Administrative Finished");
                         ProjRec.MODIFY;
                       UNTIL TempProjRec.NEXT = 0;



                   COMMIT;
                   Window.CLOSE;

                   InternalCounter := InternalChargeMgt.GetNumInternalCharges;

                   IF (InvCounter = 0) AND (CreditMemoCounter = 0) AND (InternalCounter = 0) THEN
                     MESSAGE(Text005)
                   ELSE
                     MESSAGE(
                       Text006,
                       InvCounter, CreditMemoCounter, LineCounter, InternalCounter);
                 END;

  }
  DATASET
  {
    { 2637;    ;DataItem;                    ;
               DataItemTable=Table11071875;
               DataItemTableView=WHERE(Status=CONST(Released));
               OnPreDataItem=BEGIN
                               CollectiveListCount := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  CollectiveListCount += 1;

                                  TmpGenericRec.INIT;
                                  TmpGenericRec."Key Code1" := FORMAT(CollectiveListCount);
                                  TmpGenericRec.Text1 := "Project Collective-List"."No.";
                                  TmpGenericRec.INSERT;
                                END;
                                 }

    { 4870;1   ;DataItem;                    ;
               DataItemTable=Table11012019;
               DataItemTableView=WHERE(Invoiced=CONST(No),
                                       Chargeable=CONST(Yes));
               OnPreDataItem=BEGIN
                               InvCounter := 0;
                               CreditMemoCounter := 0;
                               LineCounter := 0;

                               "Project Cost Plus Entry".LOCKTABLE;
                               SalesHeaderRec.LOCKTABLE;
                               SalesLineRec.LOCKTABLE;
                             END;

               OnAfterGetRecord=VAR
                                  AmountInclVAT@1100525001 : Decimal;
                                  lvVatBusPostGroup@1100525000 : Code[20];
                                  BlockingCode@1100528200 : Record 11012027;
                                BEGIN
                                  IF ProjRec."No." <> "Project No." THEN
                                    ProjRec.GET("Project No.");

                                  IF (ProjSetup."Provisions at Closure") THEN BEGIN
                                    IF (ProjRec."Project Status" >= ProjRec."Project Status"::Archive) THEN
                                      CurrReport.SKIP;
                                    IF (ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND
                                       (ProjRec."Blocking Code" <> '') THEN
                                    BEGIN
                                      IF BlockingCode.CheckBlocked(ProjRec."Blocking Code", BlockingCode.Switch::"Sales Invoice", ProjRec, FALSE) THEN
                                        CurrReport.SKIP;
                                    END;
                                  END ELSE BEGIN
                                    IF (ProjRec."Blocking Code" <> '') AND (ProjRec."Project Status" IN
                                         [ProjRec."Project Status"::"Technical Finished", ProjRec."Project Status"::"Administrative Finished"]) THEN BEGIN
                                      IF BlockingCode.CheckBlocked(ProjRec."Blocking Code", BlockingCode.Switch::"Sales Invoice", ProjRec, FALSE) THEN
                                        CurrReport.SKIP;
                                    END ELSE
                                      IF (ProjRec."Project Status" >= ProjRec."Project Status"::"Administrative Finished") THEN
                                        CurrReport.SKIP;
                                  END;

                                  IF ProjRec.Blocked <> ProjRec.Blocked::" " THEN
                                    CurrReport.SKIP;

                                  Window.UPDATE(1,Principal);
                                  Window.UPDATE(2,"Project No.");
                                  Window.UPDATE(4,"Commission No.");
                                  Window.UPDATE(5,"Settl.Sheet No.");
                                  Window.UPDATE(6,"Line No.");

                                  //Test
                                  SettlRec.GET("Project No.",Principal,"Commission No.","Settl.Sheet No.");
                                  IF SettlRec.Status <> SettlRec.Status::Invoice THEN
                                    CurrReport.SKIP;

                                  IF (ProjPrincipalRec."Project No." <> "Project No.") OR
                                     (ProjPrincipalRec.Principal <> Principal)
                                  THEN
                                    ProjPrincipalRec.GET("Project No.", Principal);

                                  ProjPrincipalRec.TESTFIELD("Cost Object");
                                  IF (ProjPrincipalRec."VAT Bus. Posting Group" = '') AND (ProjRec."VAT Bus. Posting Group" = '') THEN
                                    ERROR(Text010, ProjRec.FIELDCAPTION("VAT Bus. Posting Group"), ProjRec."No.", ProjPrincipalRec.Principal);

                                  IF ("Attached to Line No." = 0) AND ("Standard Text Code" = '') THEN
                                    TESTFIELD("VAT Prod. Posting Group");

                                  TestProject();

                                  CommissionRec.GET("Project No.",Principal,"Commission No.");

                                  //Fill Invoice Buffer
                                  ProjNoLinkTable := '';
                                  CostPlusEntryRec := "Project Cost Plus Entry";
                                  StrLineNo := FORMAT(CostPlusEntryRec."Line No.");
                                  CASE "Project Collective-List"."Collect Invoices By" OF
                                    "Project Collective-List"."Collect Invoices By"::"Collective-List":
                                      BEGIN
                                        CostPlusEntryRec."Project No." := '';
                                        CostPlusEntryRec."Commission No." := '';
                                        CostPlusEntryRec."Settl.Sheet No." := '';
                                        StrLineNo := '';
                                        CollectInvPer := CommissionRec."Collect Cost Plus Lines By"::Supervisor; //misbruik van variabelen
                                      END;
                                    "Project Collective-List"."Collect Invoices By"::"Main Project":
                                      BEGIN
                                        CostPlusEntryRec."Commission No." := '';
                                        CostPlusEntryRec."Settl.Sheet No." := '';
                                        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Sub Project" THEN
                                          CostPlusEntryRec."Project No." := ProjRec."Main Project";

                                        IF ProjRec."Single/Main/Sub Project" IN
                                          [ProjRec."Single/Main/Sub Project"::"Main Project", ProjRec."Single/Main/Sub Project"::"Sub Project"]
                                        THEN
                                          ProjNoLinkTable := CostPlusEntryRec."Project No.";

                                        StrLineNo := '';
                                        CollectInvPer := CommissionRec."Collect Cost Plus Lines By"::"Main Project"; //misbruik van variabelen
                                      END;
                                    "Project Collective-List"."Collect Invoices By"::Project:
                                      BEGIN
                                        CostPlusEntryRec."Commission No." := '';
                                        CostPlusEntryRec."Settl.Sheet No." := '';
                                        StrLineNo := '';
                                        CollectInvPer := CommissionRec."Collect Cost Plus Lines By"::Project; //misbruik van variabelen
                                      END;
                                    "Project Collective-List"."Collect Invoices By"::Commission:
                                      BEGIN
                                        CostPlusEntryRec."Settl.Sheet No." := '';
                                        StrLineNo := '';
                                        CollectInvPer := CommissionRec."Collect Cost Plus Lines By"::Commission; //misbruik van variabelen
                                      END;
                                    "Project Collective-List"."Collect Invoices By"::"Settlement Sheet":
                                      BEGIN
                                        StrLineNo := '';
                                        CollectInvPer := CommissionRec."Collect Cost Plus Lines By"::"Settlement Sheet"; //misbruik van variabelen
                                      END;
                                    "Project Collective-List"."Collect Invoices By"::"Cost Plus Entry":
                                      BEGIN
                                        CollectInvPer := CommissionRec."Collect Cost Plus Lines By"::Principal; //misbruik van variabelen
                                      END;
                                  END;

                                  IF NOT TmpGenericRec2.GET("Project Collective-List"."No.", "Project No.",
                                    Principal, "Commission No.")
                                  THEN BEGIN
                                    TmpGenericRec2."Key Code1" := "Project Collective-List"."No.";   //Collective List
                                    TmpGenericRec2."Key Code2" := "Project No.";                     //Project
                                    TmpGenericRec2."Key Code3" := Principal;                         //Principal
                                    TmpGenericRec2."Key Code4" := "Commission No.";                  //Commission
                                    TmpGenericRec2.Int1 := CollectInvPer;                            //CollectInvoiceBy
                                    TmpGenericRec2.INSERT;
                                  END;

                                  AmountInclVAT := CalcAmountInclVat(
                                    Quantity * "Sales Price",
                                    "VAT Prod. Posting Group",
                                    ProjPrincipalRec."VAT Bus. Posting Group", ProjRec."VAT Bus. Posting Group");

                                  IF TmpProjInvBuffer.GET(
                                    ProjectTypeRec."Sales Invoice Nos.",
                                    ProjectTypeRec."Posted Sales Invoice Nos.",
                                    ProjectTypeRec."Credit Memo Nos.",
                                    ProjectTypeRec."Posted Credit Memo Nos.",
                                    Principal,
                                    ProjPrincipalRec."Bill-to Customer No.",
                                    ProjPrincipalRec."Alternative Bill-to Address",
                                    CostPlusEntryRec."Project No.",
                                    StrLineNo,
                                    CollectInvPer,
                                    CommissionRec.Supervisor,
                                    CostPlusEntryRec."Commission No.",
                                    CostPlusEntryRec."Settl.Sheet No.",
                                    0D,
                                    TmpGenericRec."Key Code1",
                                    0)
                                  THEN BEGIN
                                    TmpProjInvBuffer.Amount := TmpProjInvBuffer.Amount + AmountInclVAT;
                                    IF (ProjNoLinkTable <> '') AND (TmpProjInvBuffer."Link No." = '') THEN
                                      TmpProjInvBuffer."Link No." := GetNextLinkNo();
                                    TmpProjInvBuffer.MODIFY;
                                  END ELSE BEGIN
                                    TmpProjInvBuffer.INIT;
                                    TmpProjInvBuffer."No. Series Debet" := ProjectTypeRec."Sales Invoice Nos.";
                                    TmpProjInvBuffer."Posting No. Series Debet" := ProjectTypeRec."Posted Sales Invoice Nos.";
                                    TmpProjInvBuffer."No. Series Credit" := ProjectTypeRec."Credit Memo Nos.";
                                    TmpProjInvBuffer."Posting No. Series Credit" := ProjectTypeRec."Posted Credit Memo Nos.";
                                    TmpProjInvBuffer."Project No." := CostPlusEntryRec."Project No.";
                                    TmpProjInvBuffer."Plot No." := StrLineNo; // mis-gebruik van dit veld
                                    TmpProjInvBuffer.Principal := Principal;
                                    TmpProjInvBuffer."Bill-to Customer No." := ProjPrincipalRec."Bill-to Customer No.";
                                    TmpProjInvBuffer."Alternative Bill-to Address" := ProjPrincipalRec."Alternative Bill-to Address";
                                    TmpProjInvBuffer."Collect Invoices By" := CollectInvPer;
                                    TmpProjInvBuffer."Commission No." := CostPlusEntryRec."Commission No.";
                                    TmpProjInvBuffer."Settl.Sheet No." := CostPlusEntryRec."Settl.Sheet No.";
                                    TmpProjInvBuffer."Production Code" := TmpGenericRec."Key Code1";
                                    TmpProjInvBuffer.Amount := AmountInclVAT;
                                    TmpProjInvBuffer."Country/Region of Origin" := CostPlusEntryRec."Country/Region of Origin";
                                    IF (ProjNoLinkTable <> '') THEN
                                      TmpProjInvBuffer."Link No." := GetNextLinkNo();
                                    SortingOrder := SortingOrder + 1;
                                    TmpProjInvBuffer."Sorting Order" := SortingOrder;
                                    TmpProjInvBuffer.INSERT;
                                  END;

                                  IF (ProjNoLinkTable <> '') THEN BEGIN
                                    TmpProjInvBuffer2.RESET;
                                    TmpProjInvBuffer2.SETRANGE("No. Series Debet", TmpProjInvBuffer."Link No.");
                                    TmpProjInvBuffer2.SETRANGE("Project No.", ProjNoLinkTable);
                                    TmpProjInvBuffer2.SETRANGE("Production Code", TmpProjInvBuffer."Production Code");
                                    IF TmpProjInvBuffer2.ISEMPTY THEN BEGIN
                                      TmpProjInvBuffer2.INIT;
                                      TmpProjInvBuffer2."No. Series Debet" := TmpProjInvBuffer."Link No.";
                                      TmpProjInvBuffer2."Project No." := ProjNoLinkTable;
                                      SortingOrder := SortingOrder + 1;
                                      TmpProjInvBuffer2."Sorting Order" := SortingOrder;
                                      TmpProjInvBuffer2."Production Code" := TmpProjInvBuffer."Production Code";
                                      TmpProjInvBuffer2.INSERT;
                                    END;
                                  END;
                                END;

               DataItemLink=Collective List No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   TransferCommentLines := TRUE; // **4PS MVOS M28906
                   ExtensionTextHeader := TRUE;  // C000321.n
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100485000;2;Field  ;
                  CaptionML=ENU=Change project status to Administrative Finished (Small Cost Plus Projects only);
                  SourceExpr=UpdateProjectStatus }

      { 1210190000;2;Field  ;
                  CaptionML=ENU=Transfer Comment Lines;
                  SourceExpr=TransferCommentLines }

      { 1210190001;2;Field  ;
                  CaptionML=ENU="Extension Text in Invoice Header ";
                  SourceExpr=ExtensionTextHeader }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012018 : TextConst 'ENU=Creating Invoices...\\';
      Text001@11012019 : TextConst 'ENU=Principal        #1##########\';
      Text002@11012020 : TextConst 'ENU=Project          #2##########\';
      Text004@11012022 : TextConst 'ENU=Cost Plus Entry  #4########## #5########## #6######';
      Text005@11012023 : TextConst 'ENU=No Invoices Created.';
      Text006@11012024 : TextConst 'ENU=%1 Invoices, %2 Credit Memos and %3 Invoice Lines and %4 Internal Charge Lines created.';
      Text007@11012025 : TextConst 'ENU=Collecting Data...\\';
      "Unit Price Production Mot. L."@1100528201 : Record 11020426;
      ProjSetup@1210190001 : Record 315;
      SalesSetup@1210190000 : Record 311;
      ProjRec@11012000 : Record 11072003;
      PlotRec@1210190003 : Record 11012500;
      InstalmRec@11012001 : Record 11012018;
      SalesHeaderRec@11012002 : Record 36;
      SalesLineRec@11012003 : Record 37;
      ProjectTypeRec@11012004 : Record 11012009;
      CommissionRec@11012005 : Record 11012020;
      SettlRec@11012006 : Record 11012021;
      TmpProjInvBuffer@11012007 : TEMPORARY Record 11012045;
      TmpProjInvBuffer2@1100525008 : TEMPORARY Record 11012045;
      TmpGenericRec@1100528204 : TEMPORARY Record 11020579;
      TmpGenericRec2@1100528206 : TEMPORARY Record 11020579;
      CostPlusEntryRec@11012008 : Record 11012019;
      ProjPrincipalRec@11012009 : Record 11012005;
      ExtRec@1210190002 : Record 11012004;
      CustRec@1100485001 : Record 18;
      TempProjRec@1100485009 : TEMPORARY Record 11072003;
      PlantTypeRec@1100485020 : Record 11012551;
      PlantPostingSetupRec@1100485021 : Record 11012570;
      VATPostingSetup@1100485022 : Record 325;
      GenLedgerSetup@1100525014 : Record 98;
      DimValRec@1100525018 : Record 349;
      CurrencyExchangeRateRec@1100528200 : Record 330;
      TempGenJnlLine@1100409000 : TEMPORARY Record 81;
      TmpIcEntry@1100529000 : TEMPORARY Record 11012058;
      NoSeriesMngmntCU@1210190005 : Codeunit 396;
      DimMgt@1100525011 : Codeunit 408;
      InternalChargeMgt@1210190009 : Codeunit 11012265;
      Window@11012010 : Dialog;
      CollectInvPer@1210190007 : Option;
      gInvoiceType@1100485023 : 'ProjInstallment,CostPlus,ProductionMot';
      InsertHeader@1210190006 : Boolean;
      InvCounter@11012011 : Integer;
      CreditMemoCounter@11012012 : Integer;
      LineCounter@11012013 : Integer;
      SalesLineNo@11012014 : Integer;
      NextLineNo@1100525005 : Integer;
      CollectiveListCount@1100528205 : Integer;
      PrevProjNo@1210190004 : Code[20];
      PrevContractNo@1210190008 : Code[10];
      Text008@1100485002 : TextConst 'ENU="Different WKA data for Cost Plus Entry:  %1, %2, %3, %4, %5 \Make a different selection "';
      Text010@1100485006 : TextConst 'ENU=%1 must be filled for Project ''%2'' or for Project Principal ''%3''.';
      Text011@1100485025 : TextConst 'ENU=must be zero for internal posting';
      ProjNoLinkTable@1100525004 : Code[20];
      NextLinkNo@1100525006 : Code[10];
      MultipleProjects@1100485000 : Boolean;
      MultipleReferences@1100485004 : Boolean;
      MultipleOrderNos@1100485005 : Boolean;
      MultipleOrderDates@1100485013 : Boolean;
      MultipleDim1@1100485011 : Boolean;
      UpdateProjectStatus@1100485008 : Boolean;
      CollectByMainProjectRun@1100525007 : Boolean;
      OrNoCust@1100485007 : Text[50];
      StrLineNo@1100528202 : Text[30];
      OrDateCust@1100485012 : Date;
      ProdMotDate@1100525002 : Date;
      ProdMotCode@1100525003 : Code[10];
      gDocumentNo@1100525017 : Code[20];
      gGrossPrice@1100485014 : Decimal;
      gPurchDisc@1100485015 : Decimal;
      gSalesDisc@1100485016 : Decimal;
      gBasicPrice@1100485017 : Decimal;
      gSurchPerc@1100485018 : Decimal;
      gSurchAmnt@1100525000 : Decimal;
      gSalesPrice@1100485019 : Decimal;
      gDescr2@1100525001 : Text[50];
      gUPCode@1100525022 : Code[20];
      SortingOrder@1210190010 : Integer;
      TransferCommentLines@1100529800 : Boolean;
      ExtensionTextHeader@1210190011 : Boolean;

    PROCEDURE TestProject@2();
    BEGIN
      ProjRec.TESTFIELD("Project Type");
      ProjectTypeRec.GET(ProjRec."Project Type");
      ProjectTypeRec.TESTFIELD("WIP Account Revenue");
      IF (ProjRec."Project Status" >= ProjRec."Project Status"::Finished) AND
         (ProjSetup."Provisions at Closure" = TRUE) THEN
        ProjectTypeRec.TESTFIELD("Provision Account Revenue");
    END;

    PROCEDURE InvoiceCostPlus@7();
    VAR
      CostPlusDisc@1210190001 : Decimal;
      CostPlusAmnt@1210190000 : Decimal;
    BEGIN
      //reduce parameters for writing saleslines.
      InstalmRec.INIT;

      WITH TmpProjInvBuffer DO BEGIN
        Window.UPDATE(2,CommissionRec."Project No.");
        SettlRec.SETRANGE("Project No.",CommissionRec."Project No.");
        SettlRec.SETRANGE(Principal,Principal);
        SettlRec.SETRANGE("Commission No.",CommissionRec."No.");
        IF "Collect Invoices By" = "Collect Invoices By"::"Settlement Sheet" THEN
          SettlRec.SETRANGE("No.","Settl.Sheet No.")
        ELSE
          SettlRec.SETRANGE("No.");

        IF "Collect Invoices By" = "Collect Invoices By"::Principal THEN BEGIN//** By Cost Plus entry
          SettlRec.SETRANGE("No.","Settl.Sheet No.")
         END;


        SettlRec.SETRANGE(Status,SettlRec.Status::Invoice);

        IF SettlRec.FIND('-') THEN
          REPEAT
            CostPlusEntryRec.SETRANGE("Project No.",SettlRec."Project No.");
            CostPlusEntryRec.SETRANGE(Principal,SettlRec.Principal);
            CostPlusEntryRec.SETRANGE("Commission No.",SettlRec."Commission No.");
            CostPlusEntryRec.SETRANGE("Settl.Sheet No.",SettlRec."No.");
            CostPlusEntryRec.SETRANGE(Invoiced,FALSE);
            CostPlusEntryRec.SETRANGE(Chargeable,TRUE);

            IF "Collect Invoices By" = "Collect Invoices By"::Principal THEN BEGIN   //** By Cost Plus entry
              EVALUATE(CostPlusEntryRec."Line No.", "Plot No.");
              CostPlusEntryRec.SETRANGE("Line No.",CostPlusEntryRec."Line No.");
            END;

            WHILE CostPlusEntryRec.FIND('-') DO BEGIN
              Window.UPDATE(4,CostPlusEntryRec."Commission No.");
              Window.UPDATE(5,CostPlusEntryRec."Settl.Sheet No.");
              Window.UPDATE(6,CostPlusEntryRec."Line No.");

              ProjPrincipalRec.GET(CostPlusEntryRec."Project No.",Principal);
              ProjRec.GET(CostPlusEntryRec."Project No.");
              IF CostPlusEntryRec."Extension Contract" <> '' THEN
                ExtRec.GET(CostPlusEntryRec."Project No.", CostPlusEntryRec."Extension Contract");
              IF ProjRec."Posting Element Mandatory" THEN
                CostPlusEntryRec.TESTFIELD(Element);
              CustRec.GET(Principal);

              CostPlusEntryRec.CALCFIELDS("Cost Type");
              CostPlusDisc := 0;
              CostPlusAmnt := CostPlusEntryRec."Sales Price";
              IF CustRec."Item Price Cost Plus Project" = CustRec."Item Price Cost Plus Project"::GrossMin THEN
              BEGIN
                IF (CostPlusEntryRec."Gross Price" > CostPlusEntryRec."Sales Price") AND
                   (CostPlusEntryRec."Gross Price" <> 0) THEN BEGIN
                  CostPlusAmnt := CostPlusEntryRec."Gross Price";
                  CostPlusDisc := 100*(CostPlusEntryRec."Gross Price"-CostPlusEntryRec."Sales Price") / CostPlusEntryRec."Gross Price";
                END ELSE BEGIN
                  IF (CostPlusEntryRec."Basic Price" > CostPlusEntryRec."Sales Price") AND
                     (CostPlusEntryRec."Basic Price" <> 0) THEN BEGIN
                    CostPlusAmnt := CostPlusEntryRec."Basic Price";
                    CostPlusDisc := 100*(CostPlusEntryRec."Basic Price" - CostPlusEntryRec."Sales Price") /
                      CostPlusEntryRec."Basic Price";
                  END;
                END;
              END;

              OrNoCust :=  SettlRec."Order No. Customer"; //** helaas kon ik deze var niet als extra param meegeven aan
                                                          //   InsertSalesLine, wordt ook in InsertSalesHeader gebruikt
              OrDateCust := SettlRec."Commision Date Principal";
              ProdMotDate := 0D;
              ProdMotCode := '';

              gGrossPrice := CostPlusEntryRec."Gross Price";
              gPurchDisc := CostPlusEntryRec."Purchase Discount % (Item)";
              gSalesDisc := CostPlusEntryRec."Sales Discount % (Item)";
              gBasicPrice := CostPlusEntryRec."Basic Price";
              gSurchPerc := CostPlusEntryRec."Surcharge %";
              gSurchAmnt := CostPlusEntryRec."Surcharge Amount";
              gSalesPrice := CostPlusEntryRec."Sales Price";

              IF NOT ProjRec."Internal Project" THEN BEGIN
                IF InsertHeader THEN BEGIN
                  InsertSalesHeader(CostPlusEntryRec."Extension Contract", ProjPrincipalRec."Invoice Text Cost Plus"); //**4PS01.n
                  FillSalesHeaderLaborPerc(CostPlusEntryRec."Extension Contract", FALSE, TRUE);
                END ELSE
                  FillSalesHeaderLaborPerc(CostPlusEntryRec."Extension Contract", FALSE, FALSE);
              END;

              //** Extension Contract Code ook meegeven aan regie-verkoopregels (Factuur).
              gDescr2 := CostPlusEntryRec."Description 2";
              gUPCode := '';
              IF ProjRec."Internal Project" THEN BEGIN
                InternalChargeMgt.InsertTempGLEntry(0, CostPlusEntryRec."Project No.",
                  CostPlusEntryRec.Description, CostPlusEntryRec."Description 2",
                  CostPlusEntryRec.Quantity, CostPlusAmnt,
                  CostPlusEntryRec."Cost Object", CostPlusEntryRec."Cost Component",
                  CostPlusEntryRec.Element, TempGenJnlLine, TmpIcEntry);  //DP00847.c
              END ELSE BEGIN
                IF (CostPlusEntryRec."Attached to Line No." = 0) AND (CostPlusEntryRec."Standard Text Code" = '') THEN
                  CostPlusEntryRec.TESTFIELD(Description);

                IF (CostPlusEntryRec."Cost Object" = '') AND CostPlusEntryRec.CheckItemLine THEN
                   CostPlusEntryRec."Cost Type" := CostPlusEntryRec."Cost Type"::Material;

                InsertSalesLine(CostPlusEntryRec.Description,
                                CostPlusEntryRec.Quantity,
                                CostPlusAmnt,
                                ProjPrincipalRec."Cost Object",
                                CostPlusEntryRec."VAT Prod. Posting Group",
                                gInvoiceType::CostPlus,
                                '',
                                CostPlusEntryRec."Project No.",
                                CostPlusEntryRec."Commission No.",
                                CostPlusEntryRec."Settl.Sheet No.",
                                CostPlusEntryRec."Line No.",
                                CostPlusEntryRec."Cost Type",
                                CostPlusEntryRec."Unit of Measure",'',
                                CostPlusEntryRec.Element,
                                CostPlusEntryRec."Extension Contract",
                                CostPlusDisc,
                                CostPlusEntryRec."Execution Date");

                UpdateSalesHeaderInvText(CostPlusEntryRec."Project No.", Principal);
              END;
              CostPlusEntryRec.Invoiced := TRUE;
              CostPlusEntryRec.Chargeable := FALSE;
              CostPlusEntryRec.MODIFY;
            END;
          UNTIL SettlRec.NEXT = 0;
      END;
    END;

    PROCEDURE InsertSalesHeader@1(ExtContract@1100485000 : Code[10];iInvoiceText@1100525000 : Text[250]);
    BEGIN
      WITH TmpProjInvBuffer DO BEGIN
        SalesHeaderRec.INIT;
        SalesHeaderRec."No." := '';
        IF Amount < 0 THEN BEGIN
          SalesHeaderRec."Document Type" := SalesHeaderRec."Document Type"::"Credit Memo";
          IF "No. Series Credit" <> '' THEN BEGIN
            SalesHeaderRec."No." := NoSeriesMngmntCU.GetNextNo("No. Series Credit",WORKDATE,TRUE);
            SalesHeaderRec."No. Series" := "No. Series Credit";
          END;
          CreditMemoCounter := CreditMemoCounter + 1;
        END ELSE BEGIN
          SalesHeaderRec."Document Type" := SalesHeaderRec."Document Type"::Invoice;
          IF "No. Series Debet" <> '' THEN BEGIN
            SalesHeaderRec."No." := NoSeriesMngmntCU.GetNextNo("No. Series Debet",WORKDATE,TRUE);
            SalesHeaderRec."No. Series" := "No. Series Debet";
          END;
          InvCounter := InvCounter + 1;
        END;
        SalesHeaderRec."Project Invoice" := TRUE;
        SalesHeaderRec.INSERT(TRUE);

        CASE "Collect Invoices By" OF
          "Collect Invoices By"::InstalmPos,
          "Collect Invoices By"::InstalmNeg,
          "Collect Invoices By"::InstalmCollectContractAmt: //mg.c, 05-12-11: M31253
            BEGIN
              SalesHeaderRec."Job No." := "Project No.";
              SalesHeaderRec."Your Reference" := "Commission No.";
              SalesHeaderRec."Installment Invoice" := TRUE;
            END;
          "Collect Invoices By"::ProductionMotProj,
          "Collect Invoices By"::ProductionMotPrin,
          "Collect Invoices By"::ProductionMot:
            BEGIN
              SalesHeaderRec."Job No." := "Project No.";
              SalesHeaderRec."Your Reference" := "Commission No.";
              SalesHeaderRec."Production Motivation Date" := "Production Date";
              SalesHeaderRec."Production Motivation Code" := "Production Code";
            END;
          "Collect Invoices By"::Supervisor:
            BEGIN
              SalesHeaderRec."Job No." := CostPlusEntryRec."Project No.";
              SalesHeaderRec."Your Reference" := CommissionRec."Supervisor Name";
            END;
          ELSE
            BEGIN
              SalesHeaderRec."Job No." := CostPlusEntryRec."Project No.";
            END;
        END;
        SalesHeaderRec.SetHideValidationDialog(TRUE);
        IF (NOT (ProjRec."Small Project" AND ProjRec."Plant Job Order")) THEN BEGIN
          SalesHeaderRec.VALIDATE("Sell-to Customer No.",Principal);
          SalesHeaderRec.VALIDATE("Alternative Bill-to Address","Alternative Bill-to Address");
          IF ("Bill-to Customer No." <> '') AND
             ("Bill-to Customer No." <> SalesHeaderRec."Bill-to Customer No.") THEN
            SalesHeaderRec.VALIDATE("Bill-to Customer No.", "Bill-to Customer No.");
        END;
        FillSalesHeaderContact;
        SalesHeaderRec.FillDefaultSalesPerson();
        SalesHeaderRec.FillDefaultInvoiceLayoutCode();

        IF SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo" THEN BEGIN
          IF "Posting No. Series Credit" <> '' THEN
            SalesHeaderRec."Posting No. Series" := "Posting No. Series Credit";
        END ELSE
          IF "Posting No. Series Debet" <> '' THEN
            SalesHeaderRec."Posting No. Series" := "Posting No. Series Debet";

        CASE "Collect Invoices By" OF
          "Collect Invoices By"::InstalmPos,
          "Collect Invoices By"::InstalmNeg,
          "Collect Invoices By"::ProductionMotPrin:
            BEGIN
              SalesHeaderRec."Invoice Text" := iInvoiceText;     //ProjPrincipalRec."Invoice Text Installments";
              SalesHeaderRec."Calculate B Amounts based on" := SalesHeaderRec."Calculate B Amounts based on"::"Invoice Amount";
              SalesHeaderRec."WKA Period" := ProjPrincipalRec."WKA Period";
            END;
          ELSE
            BEGIN
              //Cost Plus, ProductionMotProj, ProductionMot
              SalesHeaderRec."Invoice Text" := iInvoiceText; //ProjPrincipalRec."Invoice Text Cost Plus";
              IF ProjRec.GET(SalesHeaderRec."Job No.") THEN
                SalesHeaderRec."Calculate B Amounts based on" := ProjRec."Calculate B Amounts based on";
            END;
        END;
        //**4PS01.sn
        IF ExtContract = '' THEN BEGIN
          SalesHeaderRec."Principal Reference" := ProjPrincipalRec."Principal Reference";
        END ELSE BEGIN
          SalesHeaderRec."Principal Reference" := ExtRec."Your Reference";
        END;
        //**4PS01.en
        //**4PS02.sn
        SalesHeaderRec."Order No. Customer" := OrNoCust;
        //**4PS02.en
        SalesHeaderRec."Commision Date Customer" := OrDateCust; //**4PS06.n
        SalesHeaderRec."Country of Origin" := "Country/Region of Origin"; //hs, 16-10-07
        IF SalesHeaderRec."Installment Invoice" AND (InstalmRec."Currency Code" <> '') THEN
          SalesHeaderRec.VALIDATE("Currency Code", InstalmRec."Currency Code");
        IF (NOT SalesHeaderRec."Installment Invoice") AND (ProjPrincipalRec."Currency Code" <> '') THEN
          SalesHeaderRec.VALIDATE("Currency Code", ProjPrincipalRec."Currency Code");
        SalesHeaderRec.MODIFY(TRUE);
        SalesLineNo := 10000;
        InsertHeader := FALSE;
        MultipleProjects := FALSE;
        MultipleReferences := FALSE;  //**4PS01.n
        MultipleOrderNos := FALSE;  //**4PS02.n
        MultipleOrderDates := FALSE; //**4PS06.n
        MultipleDim1 := FALSE;  //**4PS03.n
        PrevProjNo := '';
        PrevContractNo := '';
      END;
    END;

    PROCEDURE UpdateSalesHeaderInvText@1210190002(IProjectNo@1210190005 : Code[20];IPrincipal@1210190006 : Code[20]);
    VAR
      SalesLine@1210190000 : Record 37;
      ExtensionContract@1210190001 : Record 11012004;
      ProjectPrincipal@1210190002 : Record 11012005;
      UseProjectPrincipalText@1210190003 : Boolean;
      InvoiceText@1210190004 : Text[250];
    BEGIN
      //mg, 02-08-11: M24517
      SalesLine.SETRANGE("Document Type", SalesHeaderRec."Document Type");
      SalesLine.SETRANGE("Document No.", SalesHeaderRec."No.");
      SalesLine.SETFILTER(Type, '<>%1', SalesLine.Type::" ");
      SalesLine.SETFILTER("Extension Contract", '<>%1', '');
      IF SalesLine.ISEMPTY THEN EXIT;

      SalesLine.FINDFIRST;
      SalesLine.SETFILTER("Job No.", '<>%1', SalesLine."Job No.");
      IF NOT SalesLine.ISEMPTY THEN EXIT;

      SalesLine.SETRANGE("Job No.");
      SalesLine.SETFILTER("Extension Contract", '<>%1', SalesLine."Extension Contract");
      UseProjectPrincipalText := NOT SalesLine.ISEMPTY;

      IF UseProjectPrincipalText THEN
        ProjectPrincipal.GET(IProjectNo, IPrincipal)
      ELSE
        ExtensionContract.GET(SalesLine."Job No.", SalesLine."Extension Contract");

      // C000321.sn
      IF (ExtensionContract."Invoice Text" <> '') AND NOT ExtensionTextHeader THEN
        EXIT;
      // C000321.en

      IF SalesLine."Installment Invoice" THEN BEGIN
        IF UseProjectPrincipalText THEN
          InvoiceText := ProjectPrincipal."Invoice Text Installments"
        ELSE
          InvoiceText := ExtensionContract."Invoice Text";
      END ELSE BEGIN
        IF UseProjectPrincipalText THEN
          InvoiceText := ProjectPrincipal."Invoice Text Cost Plus"
        ELSE
          InvoiceText := ExtensionContract."Invoice Text Cost Plus";
      END;
      SalesHeaderRec."Invoice Text" := InvoiceText;
      SalesHeaderRec.MODIFY(TRUE);
    END;

    PROCEDURE InsertSalesLine@5(Descr@11012000 : Text[50];Qty@11012001 : Decimal;UnitPriceLCY@11012002 : Decimal;CostObject@11012003 : Code[10];"VAT-ProdGroup"@11012004 : Code[10];InvoiceType@11012005 : 'ProjInstallment,CostPlus,ProductionMot';InstalmNo@11012006 : Code[10];ProjectNo@11012008 : Code[20];CommNo@11012009 : Code[20];SettlNo@11012010 : Code[10];CostPlusEntryNo@11012011 : Integer;CostType@11012013 : 'Labor,Material,Subcontracting,Sundry,Revenues';UnitOfMeasure@11012014 : Code[10];PlotNo@11012015 : Code[10];Elem@11012016 : Code[20];MMC@11012017 : Code[20];DiscPerc@1210190000 : Decimal;LineDate@1100485001 : Date);
    VAR
      CurrExchRate@1210190003 : Record 330;
      DimValRec@1100485002 : Record 349;
      DimMgt@1100485000 : Codeunit 408;
      UnitPrice@1210190002 : Decimal;
    BEGIN
      //when tablefields used (either for costplus or installment), take care of init values.

      ProjRec.GET(ProjectNo);
      ProjectTypeRec.GET(ProjRec."Project Type");

      SalesLineRec.SuspendUpdateVATAmounts(TRUE);

      SalesLineRec.INIT;
      SalesLineRec."Document Type" := SalesHeaderRec."Document Type";
      SalesLineRec."Document No." := SalesHeaderRec."No.";
      SalesLineRec."Line No." := SalesLineNo;
      SalesLineRec."System-Created Entry" := TRUE;
      SalesLineRec."Project Invoice" := TRUE;
      SalesLineRec."Production Motivation Date" := ProdMotDate;
      SalesLineRec."Production Motivation Code" := ProdMotCode;
      SalesLineRec."Unit Price Code" := gUPCode;
      //kzwerver, 110615, sn, #RfC Electr. InkoopOrder
      SalesLineRec."Wage Component Cost Plus Line" := CostPlusEntryRec."Wage Component";
      SalesLineRec."Hour Rate Cost Plus Line" := CostPlusEntryRec."Hour Rate Code";
      //kzwerver, 110615, en, #RfC Electr. InkoopOrder
      IF ((InvoiceType = InvoiceType::CostPlus) AND
         ((CostPlusEntryRec."Attached to Line No." <> 0) OR (CostPlusEntryRec."Standard Text Code" <> '')))
         OR
         ((TmpProjInvBuffer."Collect Invoices By" >= TmpProjInvBuffer."Collect Invoices By"::ProductionMot) AND (Qty = 0))
      THEN BEGIN
        //Text extensions from cost plus

        SalesLineRec.Type := SalesLineRec.Type::" ";
        IF (NOT (ProjRec."Small Project" AND ProjRec."Plant Job Order")) THEN BEGIN
          SalesLineRec."Sell-to Customer No." := TmpProjInvBuffer.Principal;
          SalesLineRec."Bill-to Customer No." := TmpProjInvBuffer."Bill-to Customer No.";    //evdb.n
        END;                                                                                 //evdb.n
        SalesLineRec."Job No." := ProjectNo;
        SalesLineRec.Description := Descr;
        SalesLineRec."Description 2" := gDescr2;
        SalesLineRec."Commission No." := CommNo;
        SalesLineRec."Supervisor Name" := CommissionRec."Supervisor Name";
        SalesLineRec."Failure No." := CommissionRec."Failure No.";
        SalesLineRec."Settl.Sheet No." := SettlNo;
        SalesLineRec."Cost Plus Line No." := CostPlusEntryNo;
        SalesLineRec.Element := Elem;
        SalesLineRec."Extension Contract" := MMC;
      END ELSE BEGIN
        SalesLineRec.Type := SalesLineRec.Type::"G/L Account";
        SalesLineRec."Installment Invoice" := (InvoiceType = InvoiceType::ProjInstallment);
        IF InvoiceType = InvoiceType::ProjInstallment THEN
          SalesLineRec."Installment Motivation" := LineDate;
        IF InvoiceType = InvoiceType::CostPlus THEN
          SalesLineRec."Execution Date" := LineDate;
        SalesLineRec."Shortcut Dimension 2 Code" := CostObject;
        SalesLineRec."Cost Type Cost Plus Line" := CostType;
        SalesLineRec."Cost Object Cost Plus Line" := CostPlusEntryRec."Cost Object";
        SalesLineRec."Employee No." := CostPlusEntryRec."Employee No."; //ten behoeve van validatie Job No.
        SalesLineRec.VALIDATE("Job No.", ProjectNo);  //* Moet v¢¢r bepalen rekening anders wordt deze overschreven

        IF (NOT (ProjRec."Small Project" AND ProjRec."Plant Job Order")) THEN BEGIN
          SalesLineRec.VALIDATE("Sell-to Customer No.", TmpProjInvBuffer.Principal);
          IF (ProjRec."Project Status" >= ProjRec."Project Status"::Finished) AND
             (ProjSetup."Provisions at Closure" = TRUE) THEN
            SalesLineRec.VALIDATE("No.", ProjectTypeRec."Provision Account Revenue")
          ELSE
            SalesLineRec.VALIDATE("No.", ProjectTypeRec.GetWipRevenueAcc(CostType,
               (InstalmRec."Interest Installment" <> InstalmRec."Interest Installment"::" ")));
          SalesLineRec.GetProjTypeRevenueAccount((InstalmRec."Interest Installment" <> InstalmRec."Interest Installment"::" "), FALSE);
        END ELSE BEGIN
          ProjRec.TESTFIELD("Plant Type");
          ProjRec.TESTFIELD("Cost Component Plant");
          PlantTypeRec.GET(ProjRec."Plant Type");
          PlantPostingSetupRec.GET(PlantTypeRec.PlantPostingGrp(ProjRec."Plant No.",'',''),
                                   '', //veldje voor leveranciers boekings groep
                                   ProjRec."Cost Component Plant");
          PlantPostingSetupRec.TESTFIELD("Plant Cost Account");
          SalesLineRec.VALIDATE("No.", PlantPostingSetupRec."Plant Cost Account");
        END;
        //PS, 11-03-08 (call 11005).so
        //db, 11-05-07 (melding 9036)
        //IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND (Qty < 0) THEN
        //  SalesLineRec.VALIDATE(Quantity, -1 * Qty)
        //ELSE
        //  SalesLineRec.VALIDATE(Quantity, Qty);
        //PS, 11-03-08 (call 11005).eo
        //PS, 11-03-08 (call 11005).sn
        IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") THEN
          SalesLineRec.VALIDATE(Quantity, -1 * Qty)
        ELSE
          SalesLineRec.VALIDATE(Quantity, Qty);
        //PS, 11-03-08 (call 11005).en

        IF SalesHeaderRec."Currency Code" = '' THEN
          UnitPrice := UnitPriceLCY
        ELSE BEGIN
          SalesHeaderRec.TESTFIELD("Currency Factor");
          IF (InvoiceType = InvoiceType::ProjInstallment) AND
             (InstalmRec."Currency Code" <> '') THEN
          BEGIN
            //Amount in FCY is leading
            SalesHeaderRec.TESTFIELD("Currency Code", InstalmRec."Currency Code");
            UnitPrice := InstalmRec."Invoice Price";
            //C002546.sn
            IF InstalmRec."Invoice Price (LCY)" < 0 THEN
              UnitPrice := - UnitPrice; //* Is done fore LCY price before calling, so should be done also voor FCY
            //C002546.en
            UnitPriceLCY :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                1,SalesLineRec."Job No.", SalesHeaderRec."Posting Date", InstalmRec."Currency Code",
                UnitPrice, SalesHeaderRec."Currency Factor",TRUE);
          END ELSE BEGIN
            UnitPrice :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                0, '', SalesHeaderRec."Posting Date",SalesHeaderRec."Currency Code",
                UnitPriceLCY,SalesHeaderRec."Currency Factor",TRUE);
          END;
        END;
        //PS, 11-03-08 (call 11005).so
        //db, 05-11-07 (melding 10544)
        //IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND (UnitPrice > 0) THEN
        //  SalesLineRec.VALIDATE(Quantity, -1 * CostPlusEntryRec.Quantity);
        //PS, 11-03-08 (call 11005).eo
        //db, 11-05-07 (melding 9036)
        //PS, 11-03-08 (call 11005).so
        //IF (SalesHeaderRec."Document Type" = SalesHeaderRec."Document Type"::"Credit Memo") AND (UnitPrice < 0) THEN
        //  SalesLineRec.VALIDATE("Unit Price",  -1 * UnitPrice)
        //ELSE
        //  SalesLineRec.VALIDATE("Unit Price", UnitPrice);
        //PS, 11-03-08 (call 11005).eo
        SalesLineRec.VALIDATE("Unit Price", UnitPrice);   //PS, 11-03-08 (call 11005).n
      //  SalesLineRec."Employee No." := CostPlusEntryRec."Employee No."; //ten behoeve van validatie Job No.
      //  SalesLineRec.VALIDATE("Job No.", ProjectNo);
        SalesLineRec.UpdateUnitPrice(0);
        SalesLineRec.VALIDATE("VAT Prod. Posting Group", "VAT-ProdGroup");
        IF (ProjPrincipalRec."VAT Bus. Posting Group" <> '') THEN
          SalesLineRec.VALIDATE("VAT Bus. Posting Group", ProjPrincipalRec."VAT Bus. Posting Group")
        ELSE
          SalesLineRec.VALIDATE("VAT Bus. Posting Group", ProjRec."VAT Bus. Posting Group");
        SalesLineRec."Installment No." := InstalmNo;
        SalesLineRec."Commission No." := CommNo;
        SalesLineRec."Supervisor Name" := CommissionRec."Supervisor Name";
        SalesLineRec."Failure No." := CommissionRec."Failure No.";
        SalesLineRec."Settl.Sheet No." := SettlNo;
        SalesLineRec."Cost Plus Line No." := CostPlusEntryNo;
        SalesLineRec."Amount (LCY)" := UnitPrice * SalesLineRec.Quantity;
        //db, 14-12-05 ivm verwijderingbijdrage artikel toekennen voor validatie aantal+eenheid
      //  SalesLineRec."Cost Type Cost Plus Line" := CostType;                          //* Naar boven verplaatst ivm
      //  SalesLineRec."Cost Object Cost Plus Line" := CostPlusEntryRec."Cost Object";  //* 'GetProjTypeRevenueAccount'
        SalesLineRec."Item No." := CostPlusEntryRec."Item No.";
        SalesLineRec."Serial No." := CostPlusEntryRec."Serial No."; //DP00121
        SalesLineRec."Lot No." := CostPlusEntryRec."Lot No."; //DP00121
        SalesLineRec."Basic Item" := CostPlusEntryRec."Basic Item";
        SalesLineRec."Trade Item" := CostPlusEntryRec."Trade Item";
        SalesLineRec.Manufacturer := CostPlusEntryRec.Manufacturer;
        SalesLineRec."Vendor (Trade Item)" := CostPlusEntryRec."Vendor (Trade Item)";
        SalesLineRec.VALIDATE("Unit of Measure Code", UnitOfMeasure);
        SalesLineRec.VALIDATE("Line Discount %", DiscPerc);
        SalesLineRec."Sales Surcharge Overtime %" := CostPlusEntryRec."Sales Surcharge Overtime %";
        SalesLineRec."Plot No." := PlotNo;
        SalesLineRec.Element := Elem;
        SalesLineRec."Extension Contract" := MMC;
        SalesLineRec."Employee No." := CostPlusEntryRec."Employee No.";
        SalesLineRec.VALIDATE(Text, CostPlusEntryRec.Text);
        SalesLineRec.Description := Descr;
        SalesLineRec."Description 2" := gDescr2;
        SalesLineRec."Source Document" := CostPlusEntryRec."Source Document";
      //**4PS01.sn
        IF MMC = '' THEN BEGIN
          SalesLineRec."Principal Reference" := ProjPrincipalRec."Principal Reference";
        END ELSE BEGIN
          SalesLineRec."Principal Reference" := ExtRec."Your Reference";
        END;
      //**4PS01.en
        SalesLineRec."Order No. Customer" := OrNoCust; //**4PS02.n
        SalesLineRec."Commision Date Customer" := OrDateCust; //**4PS06.n
        //** 4PS07.sn
        SalesLineRec."Gross Price" := gGrossPrice;
        SalesLineRec."Purchase Discount % (Item)" := gPurchDisc;
        SalesLineRec."Sales Discount % (Item)" := gSalesDisc;
        SalesLineRec."Basic Price" := gBasicPrice;
        SalesLineRec."Surcharge %" := gSurchPerc;
        SalesLineRec."Surcharge Amount" := gSurchAmnt;  //db, 08-10-08: M10359
        SalesLineRec."Sales Price" := gSalesPrice;
        //** 4PS07.en

        //db, 09-07-07: bij verzamelen per klant en meer dan 1 project wordt project in factuurkop weer leeg gemaakt
        //echter niet kostenplaats die overgenomen wordt voor factuurregels hoewel project afwijkende kostenplaats heeft.
        SalesLineRec.VALIDATE("Shortcut Dimension 1 Code", ProjRec."Global Dimension 1 Code");

        IF InvoiceType = InvoiceType::ProjInstallment THEN BEGIN
          SalesLineRec.Points := InstalmRec."Points to be invoiced";
          SalesLineRec."Last Installment" := InstalmRec."Last Installment";
          SalesLineRec."Cost Component" := InstalmRec."Cost Component";
          //**4PS.sn
          IF VATPostingSetup.GET(SalesLineRec."VAT Bus. Posting Group", SalesLineRec."VAT Prod. Posting Group") THEN
          BEGIN
            IF VATPostingSetup.Manually THEN
            BEGIN
              SalesLineRec."Unit Cost" := UnitPrice;
              SalesLineRec."Manually VAT Posting" := TRUE;
              SalesLineRec."VAT %" := 0;
              SalesLineRec."VAT Base Amount" := InstalmRec."Invoice VAT Amount Long Lease";
              SalesLineRec."Amount Including VAT":= InstalmRec."Invoice VAT Amount Long Lease" + UnitPrice;
            END;
          END;
          //**4PS.en
          IF InstalmRec.Option <> '' THEN BEGIN
            IF PlotNo <> '' THEN BEGIN
              PlotRec.GET(ProjectNo, PlotNo);
              SalesLineRec."House Model" := PlotRec."House Model";
            END;
            SalesLineRec."Main Group" := InstalmRec."Main Group";
            SalesLineRec.Group := InstalmRec.Group;
            SalesLineRec."Sub Group" := InstalmRec."Sub Group";
            SalesLineRec.Option := InstalmRec.Option;
          END;
        END ELSE BEGIN
          SalesLineRec."Cost Entry No. Project Ledger" := CostPlusEntryRec."Entry No. Project Ledger";
          IF SalesLineRec."Shortcut Dimension 2 Code" <> '' THEN BEGIN
            DimMgt.GetDimValueRec(2,SalesLineRec."Shortcut Dimension 2 Code",DimValRec,FALSE,ProjectNo);
            SalesLineRec."Cost Component" := DimValRec."Cost Component";
          END;
          IF SalesLineRec."Cost Component" = '' THEN
            SalesLineRec."Cost Component" := CostPlusEntryRec."Cost Component";
          SalesLineRec."Removal Contribution" := CostPlusEntryRec."Removal Contribution";
          IF CostPlusEntryRec."Removal Contribution" THEN
            SalesLineRec."Attached to Line No. (RC)" := GetAttachedtoLineNoRC(SalesHeaderRec, CostPlusEntryRec);
        END;
        IF (ProjRec."Small Project" AND ProjRec."Plant Job Order") THEN BEGIN
          IF VATPostingSetup.GET(SalesLineRec."VAT Bus. Posting Group", SalesLineRec."VAT Prod. Posting Group") THEN BEGIN
            IF VATPostingSetup."VAT %" <> 0 THEN
              VATPostingSetup.FIELDERROR("VAT %", Text011);
          END;
        END;
      END;
      SalesLineRec.SuspendUpdateVATAmounts(FALSE);
      IF SalesLineRec.Type <> SalesLineRec.Type::" " THEN
        SalesLineRec.UpdateAmounts;  //* Hier wordt dan ook 'UpdateVATAmounts' uitgevoerd
      SalesLineRec.INSERT;

      CopyCommentLines(); // **4PS MVOS

      ProjRec."Last Invoice date" := TODAY;
      IF ProjRec."Small Project" THEN BEGIN
        IF ProjRec."Small Project Status" < ProjRec."Small Project Status"::Invoice THEN
          ProjRec."Small Project Status" := ProjRec."Small Project Status"::Invoice;
        IF (UpdateProjectStatus) AND (ProjRec."Settlement Method"=ProjRec."Settlement Method"::"Cost Plus" ) THEN
          IF ProjRec."Project Status" < ProjRec."Project Status"::"Administrative Finished" THEN BEGIN
            TempProjRec := ProjRec;
            IF TempProjRec.INSERT THEN;
          END;
      END;
      ProjRec.MODIFY;

      IF SalesHeaderRec."Job No." <> SalesLineRec."Job No." THEN
        MultipleProjects := TRUE;
      IF SalesHeaderRec."Principal Reference" <> SalesLineRec."Principal Reference" THEN
        MultipleReferences := TRUE; //remove reference from header
      IF SalesHeaderRec."Order No. Customer" <> SalesLineRec."Order No. Customer" THEN
        MultipleOrderNos := TRUE;
      IF SalesHeaderRec."Shortcut Dimension 1 Code" <> SalesLineRec."Shortcut Dimension 1 Code" THEN
        MultipleDim1 := TRUE;
      IF SalesHeaderRec."Commision Date Customer" <> SalesLineRec."Commision Date Customer" THEN
        MultipleOrderDates := TRUE;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE InsertSalesLineTextInstallm@1210190000();
    BEGIN
      IF (ExtRec."Project No." = PrevProjNo) AND (ExtRec."Contract No." = PrevContractNo) THEN
        EXIT;
      PrevProjNo := ExtRec."Project No.";
      PrevContractNo := ExtRec."Contract No.";

      IF (ExtRec.Description = '') AND (ExtRec."Invoice Text" = '') THEN
        EXIT;

      SalesLineRec.INIT;
      SalesLineRec."Document Type" := SalesHeaderRec."Document Type";
      SalesLineRec."Document No." := SalesHeaderRec."No.";
      SalesLineRec."Line No." := SalesLineNo;
      SalesLineRec."System-Created Entry" := TRUE;
      SalesLineRec."Project Invoice" := TRUE;
      IF InstalmRec."Installment No." <> '' THEN BEGIN
        SalesLineRec."Installment No." := InstalmRec."Installment No.";
        SalesLineRec."Installment Invoice" := TRUE;
      END;
      SalesLineRec."Job No." := ExtRec."Project No.";
      SalesLineRec."Extension Contract" := ExtRec."Contract No.";
      SalesLineRec.Description := ExtRec.Description;

      IF NOT ExtensionTextHeader THEN // C000321.n
        SalesLineRec.VALIDATE(Text, ExtRec."Invoice Text");
      SalesLineRec.INSERT;

      SalesLineNo := SalesLineNo + 10000;
      LineCounter := LineCounter + 1;
    END;

    PROCEDURE FillSalesHeaderLaborPerc@1100485000(ExtensionContract@1100485000 : Code[20];Installm@1100485001 : Boolean;FirstInvLine@1100485003 : Boolean);
    VAR
      PercLabor@1100485005 : Decimal;
      PercBAcc@1100485002 : Decimal;
      lCustRec@1100485004 : Record 18;
    BEGIN
      PercLabor := 0;
      PercBAcc := 0;

      IF ExtensionContract = '' THEN BEGIN
        IF ProjRec."Contract Type" <> ProjRec."Contract Type"::Subcontracting THEN
          EXIT;
      END ELSE BEGIN
        IF ExtRec."Contract Type" <> ExtRec."Contract Type"::Subcontracting THEN
          EXIT;
      END;

      IF ProjPrincipalRec."Specific WKA Percentages" THEN BEGIN
        PercLabor := ProjPrincipalRec."% Labor";
        PercBAcc := ProjPrincipalRec."% to B Account";
      END ELSE BEGIN
        PercLabor := ProjRec."% Labor";
        PercBAcc := ProjRec."% to B Account";
      END;

      IF ExtensionContract <> '' THEN
        IF ExtRec."Specific WKA Percentages" THEN BEGIN
          PercLabor := ExtRec."% Labor";
          PercBAcc := ExtRec."% to B Account";
        END ELSE BEGIN
          IF ProjRec."Contract Type" = ExtRec."Contract Type"::Maincontracting  THEN BEGIN
            IF lCustRec.GET(ExtRec.Principal) THEN BEGIN
              PercLabor := CustRec."% Labor";
              PercBAcc := CustRec."% to B Account";
            END;
          END;
        END;

      IF FirstInvLine THEN BEGIN
        IF (PercLabor <> 0) OR (PercBAcc <> 0) THEN BEGIN
          SalesHeaderRec."% Labor" := PercLabor;
          SalesHeaderRec."% to B Account" := PercBAcc;
          SalesHeaderRec.MODIFY;
        END;
      END ELSE
        IF (PercLabor <> SalesHeaderRec."% Labor") OR
           (PercBAcc <> SalesHeaderRec."% to B Account")
        THEN
            ERROR(
              Text008,CostPlusEntryRec."Project No.", CostPlusEntryRec.Principal,
              CostPlusEntryRec."Commission No.", CostPlusEntryRec."Settl.Sheet No.",CostPlusEntryRec."Line No.");
    END;

    PROCEDURE FillSalesHeaderContact@1100485001();
    BEGIN
      //call 28113
      //IF (ProjPrincipalRec."Contact Person" <> '') OR (ProjPrincipalRec."Bill-to Contact Person" <> '') THEN BEGIN
      //IF ProjPrincipalRec."Contact Person" <> '' THEN
      //  IF SalesHeaderRec."Sell-to Contact No." <> ProjPrincipalRec."Contact Person" THEN
      //    SalesHeaderRec.VALIDATE("Sell-to Contact No.", ProjPrincipalRec."Contact Person");
      //
      //IF ProjPrincipalRec."Bill-to Contact Person" <> '' THEN begin
      //  IF SalesHeaderRec."Bill-to Contact No." <> ProjPrincipalRec."Bill-to Contact Person" THEN
      //    SalesHeaderRec.VALIDATE("Bill-to Contact No.", ProjPrincipalRec."Bill-to Contact Person");
      //  END ELSE
      //    IF SalesHeaderRec."Bill-to Contact No." <> ProjPrincipalRec."Contact Person" THEN
      //      SalesHeaderRec.VALIDATE("Bill-to Contact No.", ProjPrincipalRec."Contact Person");
      //END ELSE BEGIN
      //  ProjRec.CALCFIELDS(Prospect);
      //  ProjRec.CALCFIELDS("Invoice Contact Person Name");
      //  IF (ProjRec.Prospect <> '') AND (ProjRec."Invoice Contact Person Name" <> '') THEN BEGIN
      //    SalesHeaderRec."Sell-to Contact" := ProjRec."Invoice Contact Person Name";
      //    SalesHeaderRec."Bill-to Contact" := ProjRec."Invoice Contact Person Name";
      //  END;
      //END;

      IF ProjPrincipalRec."Contact Person No." <> '' THEN BEGIN
        IF ProjPrincipalRec."Contact Person No." <> SalesHeaderRec."Sell-to Contact No." THEN
          SalesHeaderRec.VALIDATE("Sell-to Contact No.", ProjPrincipalRec."Contact Person No.");
      END ELSE
        SalesHeaderRec."Sell-to Contact" := '';

      IF ProjPrincipalRec."Bill-to Contact Person" <> '' THEN BEGIN
        IF SalesHeaderRec."Bill-to Contact No." <> ProjPrincipalRec."Bill-to Contact Person" THEN
          SalesHeaderRec.VALIDATE("Bill-to Contact No.", ProjPrincipalRec."Bill-to Contact Person");
      END ELSE
        SalesHeaderRec."Bill-to Contact" := '';
    END;

    PROCEDURE GetNextLinkNo@1100525001() RetNextLinkNo : Code[10];
    BEGIN
      RetNextLinkNo := NextLinkNo;
      NextLinkNo := INCSTR(NextLinkNo);
    END;

    PROCEDURE SkipProjTypeSeries@1100525003(ProjNo@1100525000 : Code[20]) : Boolean;
    BEGIN
      IF ProjRec."No." <> ProjNo THEN
        ProjRec.GET(ProjNo);
      IF ProjectTypeRec.Code <> ProjRec."Project Type" THEN
        ProjectTypeRec.GET(ProjRec."Project Type");
      IF (TmpProjInvBuffer."No. Series Debet" = ProjectTypeRec."Sales Invoice Nos.") AND
         (TmpProjInvBuffer."Posting No. Series Debet" = ProjectTypeRec."Posted Sales Invoice Nos.") AND
         (TmpProjInvBuffer."No. Series Credit" = ProjectTypeRec."Credit Memo Nos.") AND
         (TmpProjInvBuffer."Posting No. Series Credit" = ProjectTypeRec."Posted Credit Memo Nos.") THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE CalcAmountInclVat@1100525000(Amount@1100525003 : Decimal;VatProdPostingGroup@1100525000 : Code[10];ProjPrincVatBusPostingGroup@1100525006 : Code[10];ProjVatBusPostingGroup@1100525005 : Code[10]) AmountInclVat : Decimal;
    VAR
      VatBusPostingGroup@1100525001 : Code[20];
    BEGIN
      AmountInclVat := Amount;

      IF Amount = 0 THEN
        EXIT;

      IF ProjPrincVatBusPostingGroup <> '' THEN
        VatBusPostingGroup := ProjPrincVatBusPostingGroup
      ELSE
        VatBusPostingGroup := ProjVatBusPostingGroup;

      IF VATPostingSetup.GET(VatBusPostingGroup,VatProdPostingGroup) THEN;

      IF (VATPostingSetup."VAT %" = 0) OR VATPostingSetup.Manually THEN
        EXIT;

      CASE VATPostingSetup."VAT Calculation Type" OF
        VATPostingSetup."VAT Calculation Type"::"Normal VAT",
        VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
          AmountInclVat := Amount + Amount * VATPostingSetup."VAT %" / 100;
      END;
    END;

    PROCEDURE CopyCommentLines@1100529801();
    VAR
      ProjectCostPlusEntry@1100529800 : Record 11012019;
      CommentLineFrom@1100529801 : Record 11020634;
      SalesCommentLine@1100529802 : Record 44;
      RecRef@1100529803 : RecordRef;
      LineNo@1100529804 : Integer;
    BEGIN
      // **4PS MVOS
      IF NOT TransferCommentLines THEN
        EXIT;

      IF ProjectCostPlusEntry.GET(SalesLineRec."Job No.",
                                  SalesLineRec."Sell-to Customer No.",
                                  SalesLineRec."Commission No.",
                                  SalesLineRec."Settl.Sheet No.",
                                  SalesLineRec."Cost Plus Line No.")
      THEN BEGIN
        RecRef.GETTABLE(ProjectCostPlusEntry);

        CommentLineFrom.RESET;
        CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::"Settlement Sheet");
        CommentLineFrom.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
        IF CommentLineFrom.FINDSET THEN BEGIN
          SalesCommentLine.RESET;
          SalesCommentLine.SETRANGE("Document Type", SalesLineRec."Document Type");
          SalesCommentLine.SETRANGE("No.", SalesLineRec."Document No.");
          SalesCommentLine.SETRANGE("Document Line No.", SalesLineRec."Line No.");
          IF SalesCommentLine.FINDLAST THEN
            LineNo := SalesLineRec."Line No." + 10000
          ELSE
            LineNo += 10000;

          REPEAT
            SalesCommentLine.INIT;
            SalesCommentLine."Document Type" := SalesLineRec."Document Type";
            SalesCommentLine."No." := SalesLineRec."Document No.";
            SalesCommentLine."Document Line No." := SalesLineRec."Line No.";
            SalesCommentLine."Line No." := LineNo;
            SalesCommentLine.Date := CommentLineFrom.Date;
            SalesCommentLine.Code := CommentLineFrom.Code;
            SalesCommentLine.Comment := CommentLineFrom.Comment;
            SalesCommentLine."Comment Code" := CommentLineFrom."Comment Code";
            SalesCommentLine."Line Break" := CommentLineFrom."Line Break";
            SalesCommentLine."Created by" := CommentLineFrom."Created by";
            SalesCommentLine.INSERT(TRUE);

            LineNo += 10000; // MVOS M28718
          UNTIL CommentLineFrom.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetAttachedtoLineNoRC@1100528600(ISalesHeader@1100528603 : Record 36;IProjectCostPlusEntry@1100528600 : Record 11012019) : Decimal;
    VAR
      ProjectCostPlusEntry@1100528601 : Record 11012019;
      SalesLine@1100528602 : Record 37;
    BEGIN
      IF NOT IProjectCostPlusEntry."Removal Contribution" THEN
        EXIT;
      IF IProjectCostPlusEntry."Attached to Line No. (RC)" = 0 THEN
        EXIT;
      IF NOT ProjectCostPlusEntry.GET(
        IProjectCostPlusEntry."Project No.", IProjectCostPlusEntry.Principal, IProjectCostPlusEntry."Commission No.",
        IProjectCostPlusEntry."Settl.Sheet No.", IProjectCostPlusEntry."Attached to Line No. (RC)")
      THEN
        EXIT;

      SalesLine.SETRANGE("Document Type", ISalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.", ISalesHeader."No.");
      SalesLine.SETRANGE("Cost Plus Line No.", ProjectCostPlusEntry."Line No.");
      IF SalesLine.FINDFIRST THEN
        EXIT(SalesLine."Line No.");
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

