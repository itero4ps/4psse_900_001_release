OBJECT Report 11020278 Create Purch Installment Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Purchase Installment Lines;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1100525000;;DataItem;                  ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnAfterGetRecord=BEGIN
                                  DistributeInstallments("Purchase Line");
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525003;0;Container;
                  ContainerType=ContentArea }

      { 1100525002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1100525000;2;Field  ;
                  CaptionML=ENU=Amount to Split;
                  SourceExpr=gAmntToApplyDec;
                  Editable=FALSE }

      { 1100525001;2;Field  ;
                  CaptionML=ENU=No. of Installments;
                  SourceExpr=NoOfLinesToAdd }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoOfLinesToAdd@1100525002 : Integer;
      gAmntToApplyDec@1100525001 : Decimal;
      NewText@1100525000 : Text[250];
      Text001@1100525003 : TextConst 'ENU=Installment %1';

    PROCEDURE DistributeInstallments@1100485003(IPurchaseLine@1100525001 : Record 39);
    VAR
      PurchaseLine@1100485001 : Record 39;
      PurchaseHeader@1100525000 : Record 38;
      MaxLine@1100485002 : Integer;
    BEGIN
      PurchaseHeader.GET(IPurchaseLine."Document Type",IPurchaseLine."Document No.");
      PurchaseHeader.TESTFIELD("Amounts only", TRUE);
      PurchaseHeader.TESTFIELD(Status, PurchaseHeader.Status::Open);
      MaxLine := 0;
      PurchaseLine.SETRANGE("Document Type", PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.", PurchaseHeader."No.");
      IF PurchaseLine.FINDLAST THEN
        MaxLine := PurchaseLine."Line No.";

      GeneratePurchaseLines(PurchaseHeader, IPurchaseLine, MaxLine);
    END;

    LOCAL PROCEDURE GeneratePurchaseLines@1100498000(IPurchaseHeader@1100498000 : Record 38;IPurchaseLine@1100485001 : Record 39;VAR PurchaseLineNo@1100485005 : Integer);
    VAR
      PurchaseLine@1100498001 : Record 39;
      SalesHeader@1100525002 : Record 36;
      SalesLine@1100525003 : Record 37;
      ItemChargeAssgntPurch@1100525008 : Record 5805;
      TempItemChargeAssgntPurch@1100525007 : TEMPORARY Record 5805;
      DimMgt@1100525005 : Codeunit 408;
      CopyDocMgt@1100525009 : Codeunit 6620;
      TotalAmount@1100485000 : Decimal;
      xFactor@1100525000 : Decimal;
      LoopCount@1100525001 : Integer;
    BEGIN
      //**4PS.n
      TotalAmount := IPurchaseLine.Amount;
      xFactor := 1/NoOfLinesToAdd;

      IPurchaseLine.TESTFIELD("Amnt. Received",0);
      IPurchaseLine.TESTFIELD("Amnt. Invoiced",0);
      IPurchaseLine.TESTFIELD("Quantity Received",0);
      IPurchaseLine.TESTFIELD("Quantity Invoiced",0);
      IPurchaseLine.TESTFIELD("Return Qty. Shipped",0);
      IPurchaseLine.CALCFIELDS("Reserved Qty. (Base)");
      IPurchaseLine.TESTFIELD("Reserved Qty. (Base)",0);
      IPurchaseLine.TESTFIELD("Receipt No.",'');
      IPurchaseLine.TESTFIELD("Return Shipment No.",'');
      IPurchaseLine.TESTFIELD("Blanket Order No.",'');
      IPurchaseLine.TESTFIELD("Attached to Line No.",0);
      IPurchaseLine.TESTFIELD("No.");
      IPurchaseLine.TESTFIELD(Type, IPurchaseLine.Type::"G/L Account");
      IPurchaseLine.TESTFIELD("Drop Shipment", FALSE);
      IPurchaseLine.TESTFIELD("Special Order", FALSE);
      IF IPurchaseLine."Drop Shipment" OR IPurchaseLine."Special Order" THEN BEGIN
        CASE TRUE OF
          IPurchaseLine."Drop Shipment":
            SalesHeader.GET(SalesHeader."Document Type"::Order,IPurchaseLine."Sales Order No.");
          IPurchaseLine."Special Order":
            SalesHeader.GET(SalesHeader."Document Type"::Order,IPurchaseLine."Special Order Sales No.");
        END;
        IPurchaseHeader.TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
        IPurchaseHeader.TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
      END;

      IPurchaseLine.TESTFIELD("Prepmt. Amt. Inv.",0);

      PurchaseLine.LOCKTABLE;
      ItemChargeAssgntPurch.LOCKTABLE;

      ItemChargeAssgntPurch.SETRANGE("Document Type",IPurchaseLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",IPurchaseLine."Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",IPurchaseLine."Line No.");
      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        REPEAT
          TempItemChargeAssgntPurch.INIT;
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          TempItemChargeAssgntPurch.INSERT;
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
        ItemChargeAssgntPurch.DELETEALL;
      END;

      IPurchaseLine.CreatePurchOrderControl(TRUE);
      IPurchaseLine.DELETE;

      FOR LoopCount := 1 TO NoOfLinesToAdd DO
        BEGIN
          PurchaseLineNo := PurchaseLineNo + 10000;
          PurchaseLine.INIT;
          PurchaseLine.VALIDATE("Document Type", IPurchaseHeader."Document Type");
          PurchaseLine.VALIDATE("Document No.", IPurchaseHeader."No.");
          PurchaseLine.VALIDATE("Line No.", PurchaseLineNo);

          PurchaseLine.VALIDATE(Type,IPurchaseLine.Type);
          PurchaseLine."Buy-from Vendor No." := IPurchaseHeader."Buy-from Vendor No.";

          PurchaseLine."System-Created Entry" := IPurchaseLine."System-Created Entry";
          PurchaseLine.VALIDATE("No.",IPurchaseLine."No.");

          PurchaseLine.VALIDATE("Unit of Measure Code",IPurchaseLine."Unit of Measure Code");
          PurchaseLine.VALIDATE("Variant Code",IPurchaseLine."Variant Code");
          IF (IPurchaseLine."Job No." <> '') AND (IPurchaseLine."Job Task No." <> '') THEN BEGIN
            PurchaseLine.VALIDATE("Job No.",IPurchaseLine."Job No.");
            PurchaseLine.VALIDATE("Job Task No.",IPurchaseLine."Job Task No.");
            PurchaseLine."Job Line Type" := IPurchaseLine."Job Line Type";
          END;
          PurchaseLine."Prod. Order No." := IPurchaseLine."Prod. Order No.";
          PurchaseLine."Routing No." := IPurchaseLine."Routing No.";
          PurchaseLine."Routing Reference No." := IPurchaseLine."Routing Reference No.";
          PurchaseLine."Operation No." := IPurchaseLine."Operation No.";
          PurchaseLine."Work Center No." := IPurchaseLine."Work Center No.";
          PurchaseLine."Prod. Order Line No." := IPurchaseLine."Prod. Order Line No.";
          PurchaseLine."Overhead Rate" := IPurchaseLine."Overhead Rate";
          IF PurchaseLine."Buy-from Vendor No." <> IPurchaseHeader."Buy-from Vendor No." THEN
            PurchaseLine."Buy-from Vendor No." := IPurchaseHeader."Buy-from Vendor No.";

          PurchaseLine."Input by" := USERID; //DP00469
          PurchaseLine."Input Date" := TODAY; //DP00469
          PurchaseLine.INSERT;

          PurchaseLine.GetTempPurchLine(IPurchaseLine);


          PurchaseLine.VALIDATE("Direct Unit Cost",IPurchaseLine."Direct Unit Cost" * xFactor);
          PurchaseLine.VALIDATE("Line Discount %", IPurchaseLine."Line Discount %");
          IF PurchaseLine."Description 2" <> ''THEN
            NewText := PurchaseLine."Description 2" + ' ' + STRSUBSTNO(Text001, LoopCount)
          ELSE
            NewText := STRSUBSTNO(Text001, LoopCount);

          PurchaseLine."Description 2" := COPYSTR(NewText, 1, MAXSTRLEN(PurchaseLine."Description 2"));
          PurchaseLine."Modified by" := USERID; //DP00469
          PurchaseLine."Last Date Modified" := TODAY;//DP00469
          PurchaseLine.MODIFY;
          PurchaseLine.CreatePurchOrderControl(FALSE);

        END;
    END;

    PROCEDURE SetAmount@1100525000(lAmntToApplyDec@1100525000 : Decimal);
    BEGIN
      gAmntToApplyDec := lAmntToApplyDec;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

