OBJECT Report 11020287 Project Cost Plus to, ProcOnly
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Project Cost Plus Entries to Create, Processing only;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ProjSetup.GET;
                   ProcessingOnly := TRUE;  //RTC tijdelijke ? oplossing
                 END;

    OnPreReport=BEGIN
                  SaveCustInput := CustCde;
                END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.)
                                 WHERE(No.=FILTER(<>''));
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  IF ("No." = '') THEN
                                    CurrReport.SKIP;

                                  SalesAmountProj := 0;
                                  ProjCde := "No.";

                                  TmpErrorRec.RESET;
                                  TmpErrorRec.DELETEALL;
                                  NextLineNoError := 1;
                                END;

               ReqFilterFields=No. }

    { 5612;1   ;DataItem;                    ;
               DataItemTable=Table11072005;
               DataItemTableView=SORTING(Job No.,Posting Date)
                                 WHERE(Project Invoice=CONST(No),
                                       Chargeable=CONST(Yes),
                                       Processed=CONST(No));
               OnPreDataItem=BEGIN
                               FILTERGROUP(6);
                               IF (Job."Small Project" AND
                                   (ProjSetup."Small Project Cost Plus Hours" = ProjSetup."Small Project Cost Plus Hours"::"Job Ledger Entries"))
                                 OR
                                  (NOT Job."Small Project" AND
                                   (ProjSetup."Project Cost Plus Hours from" = ProjSetup."Project Cost Plus Hours from"::"Job Ledger Entries"))
                               THEN
                                 SETRANGE("Cost Type")
                               ELSE
                                 SETFILTER("Cost Type", '<>%1', "Cost Type"::Labor);
                               FILTERGROUP(0);

                               IF RepeatForRestQuantitity THEN
                                 SETRANGE("Cost Plus Entry Created")
                               ELSE
                                 SETRANGE("Cost Plus Entry Created", FALSE);
                             END;

               OnAfterGetRecord=VAR
                                  lvCostPrice@1100525000 : Decimal;
                                  lvQuantity@1100525001 : Decimal;
                                  TradeItemRec@1100525003 : Record 11012317;
                                  MissUnit@1100525002 : Boolean;
                                BEGIN
                                  IF (Job."Small Project" AND
                                      (ProjSetup."Small Project Cost Plus Hours" <> ProjSetup."Small Project Cost Plus Hours"::"Job Ledger Entries"))
                                    OR
                                     (NOT Job."Small Project" AND
                                      (ProjSetup."Project Cost Plus Hours from" <> ProjSetup."Project Cost Plus Hours from"::"Job Ledger Entries"))
                                  THEN BEGIN
                                    //* Skip expenses created for an external employee via a purchase order (if not create via purchorder then Chargeble is false)
                                    IF ("Employee No." <> '') AND "Employee External" AND ("Wage Component" <> '') AND (NOT "Created from Intercompany") THEN BEGIN
                                      IF WageCompRec.GET("Wage Component") THEN BEGIN
                                        IF WageCompRec."Component Type" = WageCompRec."Component Type"::Expenses THEN
                                          CurrReport.SKIP;
                                      END;
                                    END;
                                  END;
                                  CustCde := SaveCustInput;
                                  ExtContractCde := "Extension Contract";
                                  IF NOT CheckData() THEN
                                    CurrReport.SKIP;

                                  GetCommAndSettlData();

                                  IF CustRec."No." <> CustCde THEN
                                    CustRec.GET(CustCde);

                                  CostPlusRec.INIT;
                                  CostPlusRec."Project No." := ProjCde;
                                  CostPlusRec.Principal := CustCde;
                                  CostPlusRec."Commission No." := CommCde;
                                  CostPlusRec."Settl.Sheet No." := SettlCde;
                                  CostPlusRec.Element := Element;
                                  CostPlusRec."Extension Contract" := "Extension Contract";
                                  IF NOT CheckCustomer() THEN
                                    CurrReport.SKIP;
                                  CostPlusRec."Reference Date" := CostPlusRec.FillReferenceDate;
                                  IF Quantity = 0 THEN
                                    lvCostPrice := "Total Cost (LCY)"
                                  ELSE
                                    lvCostPrice := "Unit Cost (LCY)";

                                  IF Quantity = 0 THEN
                                    IF "Unit Cost (LCY)" <> 0 THEN
                                      lvQuantity := ROUND("Total Cost (LCY)"/ "Unit Cost (LCY)")
                                    ELSE
                                      lvQuantity := 1
                                  ELSE
                                    lvQuantity := Quantity;

                                  IF RepeatForRestQuantitity AND "Cost Plus Entry Created" THEN BEGIN
                                    CALCFIELDS("Quantity Invoiced");
                                    lvQuantity := lvQuantity - "Quantity Invoiced";
                                  END;
                                  IF lvQuantity = 0 THEN
                                    CurrReport.SKIP;

                                  CostPlusRec.Quantity := lvQuantity;
                                  CostPlusRec."Unit of Measure" := "Unit of Measure Code";
                                  CostPlusRec."Employee No." := "Employee No.";
                                  DimMgt.GetDimValueRec(2, "Global Dimension 2 Code", DimValRec, FALSE, ProjCde);
                                  IF DimValRec.Code = '' THEN BEGIN
                                    InsertCostObjectError("Global Dimension 2 Code");
                                    CurrReport.SKIP;
                                  END;
                                  CostPlusRec."Cost Object" := "Global Dimension 2 Code";
                                  CostPlusRec."Cost Component" := "Cost Component";
                                  CostPlusRec.Element := Element;
                                  CostPlusRec."Extension Contract" := "Extension Contract";
                                  CostPlusRec."Wage Component" := "Wage Component";
                                  CostPlusRec."Item No." := "Item No.";
                                  CostPlusRec."Basic Item" := "Basic Item";
                                  CostPlusRec."Trade Item" := "Trade Item";
                                  CostPlusRec.Manufacturer := Manufacturer;
                                  CostPlusRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
                                  CostPlusRec.GetBasicPrice;

                                  IF "Basic Item" <> '' THEN BEGIN
                                    CostPlusRec."Basic Item" := "Basic Item";
                                    CostPlusRec.Manufacturer := Manufacturer;
                                  END;
                                  IF "Trade Item" <> '' THEN BEGIN
                                    CostPlusRec."Trade Item" := "Trade Item";
                                    CostPlusRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
                                    //db.sn, 30-05-13: C007194
                                    TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
                                    MissUnit := ((UPPERCASE(TradeItemRec."Application Unit") <> "Unit of Measure Code") AND
                                                (UPPERCASE(TradeItemRec."Packaging Unit") <> "Unit of Measure Code"));
                                    //db.en, 30-05-13: C007194
                                  END;

                                  IF CostPlusRec.CheckItemLine THEN
                                    IF CostPlusRec."Basic Price" = 0 THEN BEGIN
                                      CostPlusRec."Basic Price" := lvCostPrice;
                                      CostPlusRec."Basic Price Found at" := TABLECAPTION;
                                    END;

                                  IF CustRec."Item Price Cost Plus Project" = CustRec."Item Price Cost Plus Project"::GrossMin THEN BEGIN
                                    //evaluate unit cost as gross price item minus sales discount:
                                    CostPlusRec.Manufacturer := Manufacturer;
                                    CostPlusRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
                                    IF "Trade Item" <> '' THEN
                                      CostPlusRec.VALIDATE("Trade Item", "Trade Item")
                                    ELSE
                                      IF "Basic Item" <> '' THEN
                                        CostPlusRec.VALIDATE("Basic Item", "Basic Item")
                                      ELSE
                                        IF "Item No." <> '' THEN
                                          CostPlusRec.VALIDATE("Item No.", "Item No.")
                                        ELSE
                                          CheckDocument("No. Series", "Document No.", "Document Line No.",
                                            CostPlusRec."Gross Price", CostPlusRec."Basic Price", CostPlusRec."Sales Discount % (Item)");
                                  END;

                                  IF "Global Dimension 2 Code" <> '' THEN  //db, 19-06-09: M14973
                                    CostPlusRec."Cost Object" := "Global Dimension 2 Code";

                                  CostPlusRec.VALIDATE("Cost Price", lvCostPrice);
                                  IF NOT CostPlusRec.CheckItemLine AND (CostPlusRec."Basic Price" = 0) THEN
                                    CostPlusRec.GetBasicPrice;

                                  //db, 24-08-04: validate item-data disturbes quantity/unit: evaluate function CheckItemUnitConversion
                                  CostPlusRec.VALIDATE("Unit of Measure","Unit of Measure Code");
                                  CostPlusRec.VALIDATE(Quantity, lvQuantity);

                                  CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;
                                  CostPlusRec."Sales Price" := CostPlusRec."Basic Price" * (1 + CostPlusRec."Surcharge %"/100);
                                  IF "Sales Price Purch. Order" <> 0 THEN BEGIN
                                    CostPlusRec.VALIDATE("Sales Price", "Sales Price Purch. Order");
                                    CostPlusRec."Basic Price Found at" := FIELDCAPTION("Sales Price Purch. Order");
                                    IF CostPlusRec."Basic Price" <> 0 THEN
                                      CostPlusRec."Surcharge %" := (CostPlusRec."Sales Price"/CostPlusRec."Basic Price" -1) * 100
                                    ELSE BEGIN
                                      CostPlusRec."Surcharge %" := 0;
                                      CostPlusRec."Basic Price" := CostPlusRec."Sales Price";
                                      IF CostPlusRec."Gross Price" <> 0 THEN
                                         CostPlusRec."Sales Discount % (Item)" :=
                                          ((CostPlusRec."Gross Price" - CostPlusRec."Basic Price") / CostPlusRec."Gross Price") * 100;
                                    END;
                                  END;
                                  CostPlusRec."VAT Prod. Posting Group" := ProjPrincipalRec."VAT Prod. Posting Group";
                                  CostPlusRec."Creation Date" := TODAY;
                                  CostPlusRec."Source Document" := "Document No.";

                                  CostPlusRec.Description := Description;  //db, 14-06-06 (melding 7894)
                                  IF ProjSetup."Copy Entry Description to CPE" THEN
                                    CostPlusRec.AddDateToDescription("Posting Date")
                                  ELSE
                                    CostPlusRec.GetDescription;

                                  CalculateSalesAmount; //C015376
                                END;

               ReqFilterFields=Cost Type,Element,Extension Contract;
               DataItemLink=Job No.=FIELD(No.) }

    { 2635;1   ;DataItem;                    ;
               DataItemTable=Table11012085;
               DataItemTableView=SORTING(Project No.)
                                 WHERE(Component Type=CONST(Hours),
                                       Processed=CONST(No));
               ReqFilterHeadingML=ENU=Posted Hours (Small Project);
               OnPreDataItem=BEGIN
                               WITH ProjSetup DO BEGIN
                                 IF (Job."Small Project" AND
                                     ("Small Project Cost Plus Hours" = "Small Project Cost Plus Hours"::"Job Ledger Entries"))
                                   OR
                                    (NOT Job."Small Project" AND
                                     ("Project Cost Plus Hours from" = "Project Cost Plus Hours from"::"Job Ledger Entries"))
                                 THEN
                                   CurrReport.BREAK;
                               END;

                               IF RepeatForRestQuantitity THEN
                                 SETRANGE("Cost Plus Entry Created")
                               ELSE
                                 SETRANGE("Cost Plus Entry Created", FALSE);
                             END;

               OnAfterGetRecord=VAR
                                  lvProjectCostPlusEntryRec@1100525001 : Record 11012019;
                                  lvCurrentQuantity@1100525000 : Decimal;
                                BEGIN
                                  CustCde := SaveCustInput;
                                  ExtContractCde := "Extension Contract";
                                  IF NOT CheckData() THEN
                                    CurrReport.SKIP;

                                  GetCommAndSettlData();
                                  CALCFIELDS("Description Wage Component");
                                  IF "Component Type" = "Component Type"::Expenses THEN
                                    lvCurrentQuantity := Quantity
                                  ELSE
                                    lvCurrentQuantity := "Total Line";
                                  IF RepeatForRestQuantitity AND "Cost Plus Entry Created" THEN BEGIN
                                    InvoicedQuantityPostedHourLine :=  0;
                                    lvProjectCostPlusEntryRec.SETCURRENTKEY("Posted Hour Year","Posted Hour Week","Employee No.","Posted Hour Line No.");
                                    lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Year", Year );
                                    lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Week", Week );
                                    lvProjectCostPlusEntryRec.SETRANGE("Posted Hour Line No.", "Line No." );
                                    lvProjectCostPlusEntryRec.SETRANGE("Employee No.", "Employee No.");
                                    IF lvProjectCostPlusEntryRec.FIND('-') THEN
                                      REPEAT
                                        lvProjectCostPlusEntryRec.CALCFIELDS("Invoiced Quantity");
                                        InvoicedQuantityPostedHourLine := InvoicedQuantityPostedHourLine + lvProjectCostPlusEntryRec."Invoiced Quantity";
                                      UNTIL lvProjectCostPlusEntryRec.NEXT = 0;

                                    lvCurrentQuantity := lvCurrentQuantity - InvoicedQuantityPostedHourLine;
                                  END;

                                  IF (lvCurrentQuantity = 0) THEN
                                    CurrReport.SKIP;

                                  CostPlusRec.INIT;
                                  CostPlusRec."Project No." := ProjCde;
                                  CostPlusRec.Principal := CustCde;
                                  CostPlusRec."Commission No." := CommCde;
                                  CostPlusRec."Settl.Sheet No." := SettlCde;
                                  CostPlusRec.Element := Element;
                                  CostPlusRec."Extension Contract" := "Extension Contract";
                                  IF NOT CheckCustomer() THEN
                                    CurrReport.SKIP;
                                  CostPlusRec."Reference Date" := CostPlusRec.FillReferenceDate;
                                  CostPlusRec."Employee No." := "Employee No.";
                                  CostPlusRec."Wage Component" := "Wage Component";
                                  IF "Component Type" = "Component Type"::Expenses THEN
                                    CostPlusRec."Cost Price" := "Unit Cost";
                                  IF ("Cost Object" <> '') THEN BEGIN
                                    DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, ProjCde);
                                    IF DimValRec.Code = '' THEN BEGIN
                                      InsertCostObjectError("Cost Object");
                                      CurrReport.SKIP;
                                    END;
                                    CostPlusRec."Cost Object" := "Cost Object";
                                    CostPlusRec.GetBasicPrice;
                                  END;
                                  CostPlusRec."Cost Component" := "Cost Component";
                                  CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;  //db, 23-06-08
                                  CostPlusRec.VALIDATE("Basic Price");
                                  CostPlusRec.Quantity := lvCurrentQuantity;
                                  CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
                                  CostPlusRec."VAT Prod. Posting Group" := ProjPrincipalRec."VAT Prod. Posting Group";
                                  CostPlusRec."Creation Date" := TODAY;

                                  CostPlusRec."Source Document" := "Document No.";

                                  IF EmplRec.GET("Employee No.") THEN BEGIN
                                    IF "Component Type" = "Component Type"::Expenses THEN
                                      CostPlusRec.Description := Text009
                                    ELSE
                                      CostPlusRec.Description := Text010;
                                    CostPlusRec.Description := COPYSTR(CostPlusRec.Description + ' ' + EmplRec."Full Name", 1, MAXSTRLEN(CostPlusRec.Description));
                                  END ELSE
                                    CostPlusRec.Description := "Description Wage Component";
                                  IF ProjSetup."Copy Entry Description to CPE" THEN
                                    CostPlusRec.AddDateToDescription("Posting Date")
                                  ELSE
                                    CostPlusRec.GetDescription;

                                  CalculateSalesAmount; //C015376
                                END;

               ReqFilterFields=Element,Extension Contract;
               DataItemLink=Project No.=FIELD(No.) }

    { 8729;1   ;DataItem;                    ;
               DataItemTable=Table11012039;
               DataItemTableView=SORTING(Project No.)
                                 WHERE(Component Type=CONST(Hours),
                                       Cost Plus Entry Created=CONST(No));
               ReqFilterHeadingML=ENU=Hour Acc. (Small Project);
               OnPreDataItem=BEGIN
                               WITH ProjSetup DO BEGIN
                                 IF (Job."Small Project" AND
                                     ("Small Project Cost Plus Hours" <> "Small Project Cost Plus Hours"::"All Hours"))
                                   OR
                                    (NOT Job."Small Project" AND
                                     ("Project Cost Plus Hours from" <> "Project Cost Plus Hours from"::"All Hours"))
                                 THEN
                                   CurrReport.BREAK;
                               END;

                               IF RepeatForRestQuantitity THEN
                                 SETRANGE("Cost Plus Entry Created")
                               ELSE
                                 SETRANGE("Cost Plus Entry Created", FALSE);
                             END;

               OnAfterGetRecord=BEGIN
                                  CustCde := SaveCustInput;
                                  ExtContractCde := "Extension Contract";
                                  IF NOT CheckData() THEN
                                    CurrReport.SKIP;

                                  GetCommAndSettlData();
                                  CALCFIELDS(Description, "Component Type");

                                  CostPlusRec.INIT;
                                  CostPlusRec."Project No." := ProjCde;
                                  CostPlusRec.Principal := CustCde;
                                  CostPlusRec."Commission No." := CommCde;
                                  CostPlusRec."Settl.Sheet No." := SettlCde;
                                  CostPlusRec.Element := Element;
                                  CostPlusRec."Extension Contract" := "Extension Contract";
                                  IF NOT CheckCustomer() THEN
                                    CurrReport.SKIP;
                                  IF "Component Type" = "Component Type"::Expenses THEN
                                    CostPlusRec.Quantity := Quantity
                                  ELSE
                                    CostPlusRec.Quantity := "Total Line";
                                  CostPlusRec."Reference Date" := CostPlusRec.FillReferenceDate;
                                  CostPlusRec."Employee No." := "Employee No.";
                                  CostPlusRec."Wage Component" := "Wage Component";
                                  IF "Component Type" = "Component Type"::Expenses THEN
                                     CostPlusRec."Cost Price" := "Unit Cost";
                                  IF ("Cost Object" <> '') THEN BEGIN
                                    DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, ProjCde);
                                    IF DimValRec.Code = '' THEN BEGIN
                                      InsertCostObjectError("Cost Object");
                                      CurrReport.SKIP;
                                    END;
                                    CostPlusRec."Cost Object" := "Cost Object";
                                    CostPlusRec.GetBasicPrice;
                                  END;
                                  CostPlusRec."Cost Component" := "Cost Component";

                                  CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;  //db, 23-06-08
                                  CostPlusRec.VALIDATE("Basic Price");

                                  CostPlusRec."Unit of Measure" := DimValRec."Unit of Measure";
                                  CostPlusRec."VAT Prod. Posting Group" := ProjPrincipalRec."VAT Prod. Posting Group";
                                  CostPlusRec."Creation Date" := TODAY;

                                  CostPlusRec."Source Document" := "Document No.";

                                  IF EmplRec.GET("Employee No.") THEN BEGIN
                                    IF "Component Type" = "Component Type"::Expenses THEN
                                      CostPlusRec.Description := Text009
                                    ELSE
                                      CostPlusRec.Description := Text010;
                                    CostPlusRec.Description := COPYSTR(CostPlusRec.Description + ' ' + EmplRec."Full Name", 1, MAXSTRLEN(CostPlusRec.Description))
                                  END ELSE
                                    CostPlusRec.Description := Description;
                                  IF ProjSetup."Copy Entry Description to CPE" THEN
                                    CostPlusRec.AddDateToDescription("Posting Date")
                                  ELSE
                                    CostPlusRec.GetDescription;

                                  CalculateSalesAmount; //C015376
                                END;

               ReqFilterFields=Element,Extension Contract;
               DataItemLink=Project No.=FIELD(No.) }

    { 5444;1   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               TmpErrorRec.RESET;
                               IF NOT TmpErrorRec.FIND('-') THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Integer.Number > 1 THEN BEGIN
                                    IF TmpErrorRec.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1210190004;2;Field  ;
                  CaptionML=ENU=Principal;
                  SourceExpr=CustCde;
                  OnValidate=BEGIN
                               IF (ProjCde <> '') AND (CustCde <> '') THEN
                                 ProjPrincipalRec.GET(ProjCde, CustCde);
                             END;

                  OnLookup=BEGIN
                             ProjPrincipalRec.RESET;
                             ProjPrincipalRec.SETRANGE("Cost Plus Customer",TRUE);
                             IF (ProjCde <> '') THEN
                               ProjPrincipalRec.SETRANGE("Project No.", ProjCde);
                             IF PAGE.RUNMODAL(PAGE::"Project Principal List", ProjPrincipalRec) = ACTION::LookupOK THEN
                               CustCde := ProjPrincipalRec.Principal;
                           END;
                            }

      { 1210190002;2;Field  ;
                  CaptionML=ENU=Commission No.;
                  SourceExpr=CommCde;
                  OnValidate=BEGIN
                               CommRec.GET(ProjCde, CustCde, CommCde);
                             END;

                  OnLookup=BEGIN
                             CommRec.SETRANGE("Project No.", ProjCde);
                             CommRec.SETRANGE(Principal, CustCde);
                             IF PAGE.RUNMODAL(PAGE::"Commission List", CommRec) = ACTION::LookupOK THEN
                               CommCde := CommRec."No.";
                           END;
                            }

      { 1210190000;2;Field  ;
                  CaptionML=ENU=Settlement Sheet;
                  SourceExpr=SettlCde;
                  OnValidate=BEGIN
                               SettlRec.GET(ProjCde, CustCde, CommCde, SettlCde);
                             END;

                  OnLookup=BEGIN
                             SettlRec.SETRANGE("Project No.", ProjCde);
                             SettlRec.SETRANGE(Principal, CustCde);
                             SettlRec.SETRANGE("Commission No.", CommCde);
                             IF PAGE.RUNMODAL(PAGE::"Settlement Sheet List", SettlRec) = ACTION::LookupOK THEN
                               SettlCde := SettlRec."No.";
                           END;
                            }

      { 1100525000;2;Field  ;
                  CaptionML=ENU=Process not Invoiced Quantity;
                  SourceExpr=RepeatForRestQuantitity;
                  OnValidate=BEGIN
                               IF RepeatForRestQuantitity AND
                                 ((ProjSetup."Small Project Cost Plus Hours" =
                                   ProjSetup."Small Project Cost Plus Hours"::"All Hours") OR
                                  (ProjSetup."Project Cost Plus Hours from" =
                                   ProjSetup."Project Cost Plus Hours from"::"All Hours"))
                               THEN
                                 ERROR(Text011);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text002@11012013 : TextConst 'ENU=Project Status of Project %1 could not be %2';
      ProjSetup@1210190004 : Record 315;
      CostPlusRec@11012000 : Record 11012019;
      ExtRec@1210190011 : Record 11012004;
      CommRec@1210190003 : Record 11012020;
      SettlRec@11012004 : Record 11012021;
      ProjPrincipalRec@1210190005 : Record 11012005;
      EmplRec@1210190018 : Record 5200;
      DimValRec@1210190007 : Record 349;
      TmpErrorRec@1100485001 : TEMPORARY Record 11012051;
      CustRec@1100485010 : Record 18;
      WageCompRec@1100525005 : Record 11012014;
      DimMgt@1210190006 : Codeunit 408;
      SettlMethod@1210190012 : 'Fixed Price,Cost Plus';
      CostPlusCust@1210190010 : Boolean;
      ProcessingOnly@1100525000 : Boolean;
      ErrorLevel@1100485006 : Integer;
      NextLineNoError@1100485002 : Integer;
      SalesAmountLine@1100485003 : Decimal;
      SalesAmountProj@1100485004 : Decimal;
      SettlCde@1210190000 : Code[20];
      CommCde@1210190001 : Code[20];
      CustCde@1210190008 : Code[20];
      SaveCustInput@1100485009 : Code[20];
      ProjCde@1210190002 : Code[20];
      ExtContractCde@1210190014 : Code[10];
      Text009@1100525006 : TextConst 'ENU=Expense';
      Text010@1210190017 : TextConst 'ENU=Hours';
      Text011@1100525003 : TextConst 'ENU=Project Setup "(Small) Project Cost Plus Hours from" must be Posted Hours or Project Ledger Entries';
      Text100@1100485005 : TextConst 'ENU=%1 ''%2'' not present';
      Text101@1100485007 : TextConst 'ENU=%1 ''%2'' is no ''%3''';
      Text102@1100485008 : TextConst 'ENU=%1 ''%2'', %3 must be ''Cost Plus''';
      RepeatForRestQuantitity@1100525001 : Boolean;
      InvoicedQuantityPostedHourLine@1100525004 : Decimal;

    PROCEDURE CheckData@1210190006() : Boolean;
    VAR
      lvStatusError@1100485000 : Boolean;
    BEGIN
      SettlMethod := Job."Settlement Method";
      IF ExtContractCde <> '' THEN BEGIN
        IF ExtRec.GET(ProjCde, ExtContractCde) THEN
          SettlMethod := ExtRec."Settlement Method";
      END;
      IF SettlMethod = SettlMethod::"Fixed Price" THEN
        EXIT(FALSE)
      ELSE BEGIN
        IF (ProjSetup."Provisions at Closure") THEN BEGIN
          IF Job."Project Status" >= Job."Project Status"::Archive THEN
            lvStatusError := TRUE;
        END ELSE BEGIN
          IF Job."Project Status" >= Job."Project Status"::"Administrative Finished" THEN
            lvStatusError := TRUE;
        END;
      END;

      IF lvStatusError THEN BEGIN
        InsertProjectStatusError();
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetCommAndSettlData@1210190013();
    BEGIN
      IF CustCde = '' THEN
        CostPlusCust := CheckCostPlusCust(ProjCde, CustCde);

      IF NOT CommRec.GET(ProjCde, CustCde, CommCde) THEN
        CommRec.INIT;
      IF NOT SettlRec.GET(ProjCde, CustCde, CommCde, SettlCde) THEN
        SettlRec.INIT;
    END;

    PROCEDURE CheckCostPlusCust@1210190003(lvProj@1210190000 : Code[20];VAR lvCust@1210190001 : Code[20]) : Boolean;
    BEGIN
      ProjPrincipalRec.RESET;
      ProjPrincipalRec.SETRANGE("Project No.",lvProj);
      ProjPrincipalRec.SETRANGE(Principal);
      ProjPrincipalRec.SETRANGE("Cost Plus Customer",TRUE);
      IF ProjPrincipalRec.FIND('-') THEN
        lvCust := ProjPrincipalRec.Principal;

      EXIT(lvCust <> '');
    END;

    PROCEDURE CheckCustomer@1210190002() : Boolean;
    BEGIN
      IF NOT ProjPrincipalRec.GET(CostPlusRec."Project No.", CostPlusRec.Principal) THEN BEGIN
        InsertProjectPrincipalError(1);
        EXIT(FALSE);
      END;

      IF CostPlusRec."Extension Contract" = '' THEN BEGIN
        IF NOT ProjPrincipalRec."Cost Plus Customer" THEN BEGIN
          InsertProjectPrincipalError(2);
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        IF NOT ExtRec.GET(CostPlusRec."Project No.", CostPlusRec."Extension Contract") THEN BEGIN
          InsertProjectExtensionError(1);
          EXIT(FALSE);
        END;
        IF ExtRec."Settlement Method" <> ExtRec."Settlement Method"::"Cost Plus" THEN BEGIN
          InsertProjectExtensionError(2);
          EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE SetDefault@1210190001(lvProj@1210190000 : Code[20]);
    BEGIN
      ProjCde := lvProj;

      ProjPrincipalRec.SETRANGE("Project No.", lvProj);
      ProjPrincipalRec.SETRANGE("Cost Plus Customer",TRUE);
      IF ProjPrincipalRec.FIND('-') THEN
        CustCde := ProjPrincipalRec.Principal;

      CommRec.SETRANGE("Project No.", ProjCde);
      CommRec.SETRANGE(Principal, CustCde);
      CASE CommRec.COUNT OF
        0: CommCde := '1';
        1: BEGIN
             CommRec.FIND('-');
             CommCde := CommRec."No.";
           END;
      END;

      IF CommCde <> '' THEN BEGIN
        SettlRec.SETRANGE("Project No.", ProjCde);
        SettlRec.SETRANGE(Principal, CustCde);
        SettlRec.SETRANGE("Commission No.", CommCde);
        CASE SettlRec.COUNT OF
          0: SettlCde := '1';
          1: BEGIN
               SettlRec.FIND('-');
               SettlCde := SettlRec."No.";
             END;
        END;
      END;
    END;

    PROCEDURE CheckDocument@1210190000(DocSeries@1210190003 : Code[20];DocNo@1210190000 : Code[20];LineNo@1210190001 : Integer;VAR GrossPrice@1210190005 : Decimal;VAR NettPrice@1210190006 : Decimal;VAR Discount@1210190007 : Decimal);
    VAR
      PurchInvLine@1210190002 : Record 123;
      PurchSetup@1210190004 : Record 312;
    BEGIN
      PurchSetup.GET;
      IF DocSeries <> PurchSetup."Posted Invoice Nos." THEN EXIT;

      IF PurchInvLine.GET(DocNo, LineNo) THEN BEGIN
        Discount := PurchInvLine."Line Discount %";  //db, 13-12-05
        NettPrice := PurchInvLine."Unit Cost (LCY)";  //db, 12-09-07 (uit) + 12-03-08 (aan)
        //(M9805: basis is bedrag uit post, dus exclusief indirecte kosten)
        GrossPrice := NettPrice;
        IF Discount <> 100 THEN
          GrossPrice := NettPrice * 100 / (100 - Discount);
        NettPrice := 0; //Basic Price Sales is not filled with Cost Price anymore (04-09-08)
      END;
    END;

    PROCEDURE CalculateSalesAmount@1100485000();
    BEGIN
      SalesAmountLine := CostPlusRec.Quantity * CostPlusRec."Sales Price";
      SalesAmountProj := SalesAmountProj + SalesAmountLine;
    END;

    PROCEDURE InsertProjectStatusError@1100485033();
    BEGIN
      ErrorLevel := 1;  //* Project level: project status error

      TmpErrorRec.RESET;
      TmpErrorRec.SETRANGE("User ID", '');
      TmpErrorRec.SETRANGE("Source Type", ErrorLevel);
      IF TmpErrorRec.FIND('-') THEN
        EXIT;

      TmpErrorRec."User ID" := '';
      TmpErrorRec."Source Type" := ErrorLevel;
      TmpErrorRec."Line No." := NextLineNoError;
      TmpErrorRec."Error message" := STRSUBSTNO(Text002,ProjCde,Job."Project Status");
      TmpErrorRec.INSERT;
      NextLineNoError := NextLineNoError + 1;
    END;

    PROCEDURE InsertProjectPrincipalError@1100485043(IErrorNo@1100485000 : Integer);
    BEGIN
      ErrorLevel := 2;  //* Project level: project principal error

      TmpErrorRec.RESET;
      TmpErrorRec.SETRANGE("User ID", '');
      TmpErrorRec.SETRANGE("Source Type", ErrorLevel);
      TmpErrorRec.SETRANGE("Service Order No.", CostPlusRec.Principal);
      IF TmpErrorRec.FIND('-') THEN
        EXIT;

      TmpErrorRec."User ID" := '';
      TmpErrorRec."Source Type" := ErrorLevel;
      TmpErrorRec."Line No." := NextLineNoError;
      TmpErrorRec."Service Order No." := CostPlusRec.Principal;
      IF IErrorNo = 1 THEN
        TmpErrorRec."Error message" := STRSUBSTNO(Text100, CostPlusRec.FIELDCAPTION(Principal), CostPlusRec.Principal)
      ELSE
        TmpErrorRec."Error message" := STRSUBSTNO(Text101,
           CostPlusRec.FIELDCAPTION(Principal), CostPlusRec.Principal, ProjPrincipalRec.FIELDCAPTION("Cost Plus Customer"));
      TmpErrorRec.INSERT;
      NextLineNoError := NextLineNoError + 1;
    END;

    PROCEDURE InsertProjectExtensionError@1100485044(IErrorNo@1100485000 : Integer);
    BEGIN
      ErrorLevel := 3;  //* Project level: extension contract error

      TmpErrorRec.RESET;
      TmpErrorRec.SETRANGE("User ID", '');
      TmpErrorRec.SETRANGE("Source Type", ErrorLevel);
      TmpErrorRec.SETRANGE("Service Order No.", CostPlusRec."Extension Contract");
      IF TmpErrorRec.FIND('-') THEN
        EXIT;

      TmpErrorRec."User ID" := '';
      TmpErrorRec."Source Type" := ErrorLevel;
      TmpErrorRec."Line No." := NextLineNoError;
      TmpErrorRec."Service Order No." := CostPlusRec."Extension Contract";
      IF IErrorNo = 1 THEN
        TmpErrorRec."Error message" :=
          STRSUBSTNO(Text100, CostPlusRec.FIELDCAPTION("Extension Contract"), CostPlusRec."Extension Contract")
      ELSE
        TmpErrorRec."Error message" := STRSUBSTNO(Text102, CostPlusRec.FIELDCAPTION("Extension Contract"),
          CostPlusRec."Extension Contract", ExtRec.FIELDCAPTION("Settlement Method"));
      TmpErrorRec.INSERT;
      NextLineNoError := NextLineNoError + 1;
    END;

    PROCEDURE InsertCostObjectError@1100485034(ICostObject@1100485000 : Code[20]);
    BEGIN
      ErrorLevel := 101;  //* Line level: cost object error

      TmpErrorRec.RESET;
      TmpErrorRec.SETRANGE("User ID", '');
      TmpErrorRec.SETRANGE("Source Type", ErrorLevel);
      TmpErrorRec."Source Type" := ErrorLevel;
      TmpErrorRec.SETRANGE("Service Order No.", ICostObject);
      IF TmpErrorRec.FIND('-') THEN
        EXIT;

      TmpErrorRec."User ID" := '';
      TmpErrorRec."Source Type" := ErrorLevel;
      TmpErrorRec."Line No." := NextLineNoError;
      TmpErrorRec."Service Order No." := ICostObject;
      TmpErrorRec."Error message" := STRSUBSTNO(Text100, CostPlusRec.FIELDCAPTION("Cost Object"), ICostObject);
      TmpErrorRec.INSERT;
      NextLineNoError := NextLineNoError + 1;
    END;

    PROCEDURE SetProcessingOnly@1100525001();
    BEGIN
      ProcessingOnly := TRUE;
    END;

    PROCEDURE SetRepeatForRestQuan@1100525002();
    BEGIN
      RepeatForRestQuantitity := TRUE;
    END;

    PROCEDURE GetSalesAmountProj@1100525000() : Decimal;
    BEGIN
      EXIT(SalesAmountProj);
    END;

    BEGIN
    {
      This report is started from codeunit 11020217 (Prognosis Mgt)
      - Copy from report 11012137 'Project Cost Plus to Create',
      - Copy from report 11012013 'Create Project Cost Plus'.
      FIXME: reduce duplicate sourcelines; integrate with main procedure (report 11012013)
    }
    END.
  }
  RDLDATA
  {
  }
}

