OBJECT Report 11020314 Get Actual Price Advice Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Get Actual Price Advice Order;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1100525000;;DataItem;                  ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF SelectProject = FALSE THEN CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  AdviceOrderMgt.UpdateActualPrice(0, "No.");
                                END;

               ReqFilterFields=No.,Project Status }

    { 1100525001;;DataItem;                  ;
               DataItemTable=Table11012823;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF SelectService = FALSE THEN CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  AdviceOrderMgt.UpdateActualPrice(1, "No.");
                                END;

               ReqFilterFields=No.,Status }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Field  ;
                  CaptionML=ENU=Select Project;
                  SourceExpr=SelectProject }

      { 1100525002;1;Field  ;
                  CaptionML=ENU=Select Service Order;
                  SourceExpr=SelectService }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SelectProject@1100525001 : Boolean;
      SelectService@1100525000 : Boolean;
      AdviceOrderMgt@1100525002 : Codeunit 11012041;

    PROCEDURE UpdateActualPrice@1210190007(iType@1100525001 : Integer;iCode@1210190001 : Code[20]);
    VAR
      MainRec@1210190000 : Record 11012055;
      OldMainRec@1210190011 : Record 11012055;
      NewMainRec@1210190012 : Record 11012055;
      Status@1210190004 : Dialog;
      maxrec@1210190003 : Integer;
      currec@1210190002 : Integer;
      lvText001@1210190006 : TextConst 'ENU=Busy with       #1################# @2@@@@@@@@@@@@@';
      lvText002@1210190005 : TextConst 'ENU=Advice Orders';
      UnitOld@1210190010 : Code[20];
      UnitNew@1210190013 : Code[20];
      ItemTypeOpt@1100525000 : 'Item,Basic Item,Trade Item';
      TradeItemRec@1100525002 : Record 11012317;
      BasicItemRec@1100525003 : Record 11012316;
      ItemRec@1100525004 : Record 27;
    BEGIN
      //copy from codeunit 11012041
      Status.OPEN(lvText001);
      Status.UPDATE(1,lvText002);

      WITH MainRec DO BEGIN
        IF iType = 0 THEN BEGIN
          SETRANGE("Record Type", "Record Type"::Project);
          SETRANGE("Project No.", iCode);
        END;
        IF iType = 1 THEN BEGIN
          SETRANGE("Record Type", "Record Type"::ServOrder);
          SETRANGE("Service Order No.", iCode);
        END;
        SETRANGE(Processed, FALSE);
        SETRANGE("Price Agreement", FALSE);
        SETFILTER("Purchase Route Reference", '%1', '');
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          currec := 0;
          maxrec := COUNT;
          REPEAT
            OldMainRec := MainRec;
            IF "Trade Item" <> '' THEN BEGIN
              IF TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN
                ValidateItem(ItemTypeOpt::"Trade Item");
            END ELSE BEGIN
              IF "Basic Item" <> '' THEN BEGIN
                IF BasicItemRec.GET(Manufacturer, "Basic Item") THEN
                  ValidateItem(ItemTypeOpt::"Basic Item");
              END ELSE BEGIN
                IF "Item No." <> '' THEN BEGIN
                  IF ItemRec.GET("Item No.") THEN
                    ValidateItem(ItemTypeOpt::Item);
                END;
              END;
            END;
            NewMainRec := MainRec;
            IF NewMainRec."Unit of Measure" <> OldMainRec."Unit of Measure" THEN BEGIN
              UnitOld := OldMainRec."Unit of Measure";
              UnitNew := NewMainRec."Unit of Measure";
              NewMainRec."Unit of Measure" := UnitOld;
              OldMainRec."Unit of Measure" := UnitNew;
              CheckItemUnitConversion(NewMainRec, OldMainRec);
              "Unit of Measure" := UnitOld;
              "Gross Price":= NewMainRec."Gross Price";
              "Discount %":= NewMainRec."Discount %";
              Price:= NewMainRec.Price;
            END;
            CalculateTotal;
            MODIFY(TRUE);
            currec := currec + 1;
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL NEXT = 0;
        END;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

