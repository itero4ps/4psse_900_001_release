OBJECT Report 11071707 Copy Settl Q Budget to Budget
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Settlement Quantity Budget to Budget;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF NOT gOnDeleteSettlQuanRun THEN BEGIN
                    //* Niet bij deze run het window openen, want je krijgt dan (soms) opeens vraag de vraag 'Naam record wijzigen?' en
                    //* daarna een aantal meldingen. (vreemd, oorzaak onbekend).
                    Window.OPEN(Text000 + Text001 + Text002 + Text003);
                  END;

                  Counter := 0;
                  ProjSetupRec.GET;
                END;

    OnPostReport=BEGIN
                   IF CurrReport.USEREQUESTPAGE THEN BEGIN
                     IF ProjSetupRec."Batch update budg from option" THEN BEGIN
                       MESSAGE(Text006);
                     END ELSE BEGIN
                       IF Counter = 0 THEN
                         MESSAGE(Text004)
                       ELSE
                         MESSAGE(Text005,Counter);
                     END;
                   END;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  TmpUpdBudgLineRec.RESET;
                                  TmpUpdBudgLineRec.DELETEALL;

                                  GetProjElement("No.");
                                  FillCommonCostObjects("No.");
                                END;

               ReqFilterFields=No. }

    { 1100528200;1;DataItem;                 ;
               DataItemTable=Table11072253;
               DataItemTableView=SORTING(Project No.,Type,Code)
                                 WHERE(Type=FILTER(Settlement));
               OnPreDataItem=BEGIN
                               TmpSettlementQuantityBudget.RESET;
                               TmpSettlementQuantityBudget.DELETEALL;
                               NextLineNoTmp := 1;

                               PrevSettlQuantCode := '';
                               PrevSettlQuantCodeClearOtherLevels := '';
                               VersionDate := 0D;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT SettlementQuantity.GET("Project No.", Code) THEN
                                    CurrReport.SKIP;

                                  IF NOT gOnDeleteSettlQuanRun THEN BEGIN
                                    Window.UPDATE(1, "Project No.");
                                    Window.UPDATE(2, Code);
                                    Window.UPDATE(3, 0);
                                  END;

                                  Counter := Counter + 1;
                                  IF (Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::Detailed) THEN
                                    VersionDate := 0D;

                                  IF (gOnDeleteSettlQuanRun OR gOnResetSettlQuanStatusRun) AND
                                     ("Project No." = gDelProjectNo) AND (Code = gDelCode)
                                  THEN
                                    SkipWriteTmpOptBudget := TRUE
                                  ELSE
                                    SkipWriteTmpOptBudget := FALSE;
                                END;

               OnPostDataItem=BEGIN
                                ProcessBudget(PrevSettlQuantCode);
                              END;

               ReqFilterFields=Code;
               DataItemLink=Project No.=FIELD(No.) }

    { 1100528201;2;DataItem;IntegerNotDetailed;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               IF ("Plot Recording Cross List".Code = PrevSettlQuantCode) THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT gOnDeleteSettlQuanRun THEN
                                    Window.UPDATE(2, PrevSettlQuantCode);

                                  ProcessBudget(PrevSettlQuantCode);
                                  PrevSettlQuantCode := "Plot Recording Cross List".Code;
                                  VersionDate := 0D;

                                  IF NOT gOnDeleteSettlQuanRun THEN
                                    Window.UPDATE(2, "Plot Recording Cross List".Code);
                                END;
                                 }

    { 8498;2   ;DataItem;BudgetLineClearOtherLevels;
               DataItemTable=Table11012001;
               DataItemTableView=SORTING(Project No.,Adjustment,Extension Contract,Option,Line No.)
                                 WHERE(Adjustment=FILTER(''),
                                       Extension Contract=FILTER(''),
                                       Option Line Type=FILTER(Option Budget|Option Surcharge));
               OnPreDataItem=BEGIN
                               IF "Plot Recording Cross List".Code = PrevSettlQuantCodeClearOtherLevels THEN
                                 CurrReport.BREAK;

                               PrevSettlQuantCodeClearOtherLevels := "Plot Recording Cross List".Code;

                               SETFILTER("Budget Level for Settl. Q.", '<>%1', Job."Budget Level for Settl. Q.");
                             END;

               OnAfterGetRecord=BEGIN
                                  DELETE;
                                END;

               DataItemLink=Project No.=FIELD(Project No.) }

    { 4668;2   ;DataItem;                    ;
               DataItemTable=Table11072244;
               DataItemTableView=SORTING(Project No.,Settlement Quantity Code,Line No.)
                                 WHERE(Quantity=FILTER(<>0));
               OnPreDataItem=BEGIN
                               IF SkipWriteTmpOptBudget THEN
                                 CurrReport.BREAK;

                               SQLineType := BudgetRec."Settl. Q. Line Type"::"SQ Budget";
                               IF (SettlementQuantity."Version Date" <> 0D) AND ((SettlementQuantity."Version Date" < VersionDate) OR (VersionDate = 0D)) THEN
                                 VersionDate := SettlementQuantity."Version Date";
                             END;

               OnAfterGetRecord=VAR
                                  PlotSQRecordingLine@1100528200 : Record 11072252;
                                  lvPlot@1100528201 : Record 11012500;
                                  TotalQuantity@1100528202 : Decimal;
                                BEGIN
                                  IF NOT gOnDeleteSettlQuanRun THEN
                                    Window.UPDATE(3, "Line No.");

                                  IF (Amount =0) AND (Quantity = 0) AND ("Time Quantity" = 0) AND ("Cost Object" = '') THEN
                                    CurrReport.SKIP;

                                  TotalQuantity := 0;

                                  lvPlot.SETRANGE("Project No.", "Plot Recording Cross List"."Project No.");
                                  IF lvPlot.FINDSET THEN
                                    REPEAT
                                      PlotSQRecordingLine.SETCURRENTKEY("Project No.", "Plot No.",Type);
                                      PlotSQRecordingLine.SETRANGE("Project No.", "Plot Recording Cross List"."Project No.");
                                      PlotSQRecordingLine.SETRANGE("Plot No.", lvPlot."Plot No.");
                                      PlotSQRecordingLine.SETRANGE(Unit, "Plot Recording Cross List".Unit);
                                      PlotSQRecordingLine.SETRANGE("Line No.", "Plot Recording Cross List"."Line No.");
                                      IF PlotSQRecordingLine.FINDLAST THEN
                                        TotalQuantity := TotalQuantity + PlotSQRecordingLine."Delta Recording Quantity";
                                    UNTIL lvPlot.NEXT = 0;

                                  IF TotalQuantity = 0 THEN
                                    CurrReport.SKIP;

                                  //naar hoger nivo
                                  SettlementQuantityBudget := "Settlement Quantity Budget";
                                  CASE Job."Budget Level for Settl. Q." OF
                                    Job."Budget Level for Settl. Q."::"SQ-Cost Type",
                                    Job."Budget Level for Settl. Q."::"SQ-Element-Cost Type":
                                      BEGIN
                                        SettlementQuantityBudget.Quantity := 1;
                                        SettlementQuantityBudget."Time Quantity" := 1;
                                      END;
                                    Job."Budget Level for Settl. Q."::Detailed,
                                    Job."Budget Level for Settl. Q."::"SQ-Cost Object",
                                    Job."Budget Level for Settl. Q."::"SQ-Element-Cost Object":
                                      BEGIN
                                        SettlementQuantityBudget.Quantity := Quantity * "Time Quantity" * TotalQuantity;
                                        SettlementQuantityBudget."Time Quantity" := 1;
                                      END;
                                  END;

                                  SettlementQuantityBudget.Amount := Amount * TotalQuantity;
                                  SettlementQuantityBudget.Hours := Hours * TotalQuantity;

                                  UpdateTmpSQBudget(SettlementQuantityBudget);
                                END;

               DataItemLink=Project No.=FIELD(Project No.),
                            Settlement Quantity Code=FIELD(Code) }

    { 1100528202;2;DataItem;                 ;
               DataItemTable=Table11072247;
               DataItemTableView=SORTING(Project No.,Settlement Quantity Code,Line No.);
               OnPreDataItem=BEGIN
                               IF SkipWriteTmpOptBudget THEN
                                 CurrReport.BREAK;

                               SQLineType := BudgetRec."Settl. Q. Line Type"::"SQ Surcharge";

                               //TOD hieronder ??? wat is dit
                               //IF SettlementQuantity."Order Date" <> 0D THEN
                               //  OptionRateDate := PlotOption."Order Date"
                               //ELSE
                                 OptionRateDate := TODAY;
                             END;

               OnAfterGetRecord=VAR
                                  Job@1100528601 : Record 11072003;
                                  BudgetRateManagement@1100528600 : Codeunit 11012358;
                                  BudgetRateFoundAt@1100528602 : Text[250];
                                  PlotSQRecordingLine@1100528200 : Record 11072252;
                                  TotalQuantity@1100528201 : Decimal;
                                  lvPlot@1100528202 : Record 11012500;
                                BEGIN
                                  IF NOT gOnDeleteSettlQuanRun THEN
                                    Window.UPDATE(3, "Line No.");

                                  TotalQuantity := 0;

                                  lvPlot.SETRANGE("Project No.", "Plot Recording Cross List"."Project No.");
                                  IF lvPlot.FINDSET THEN
                                    REPEAT
                                      PlotSQRecordingLine.SETCURRENTKEY("Project No.", "Plot No.",Type);
                                      PlotSQRecordingLine.SETRANGE("Project No.", "Plot Recording Cross List"."Project No.");
                                      PlotSQRecordingLine.SETRANGE(Unit, "Plot Recording Cross List".Unit);
                                      PlotSQRecordingLine.SETRANGE("Line No.", "Plot Recording Cross List"."Line No.");
                                      IF PlotSQRecordingLine.FINDLAST THEN
                                        TotalQuantity := TotalQuantity + PlotSQRecordingLine."Delta Recording Quantity";
                                    UNTIL lvPlot.NEXT = 0;

                                  IF TotalQuantity = 0 THEN
                                    CurrReport.SKIP;

                                  //naar hoger nivo
                                  SettlementQuantityBudget.INIT;
                                  SettlementQuantityBudget."Project No." := "Project No.";
                                  SettlementQuantityBudget."Settlement Quantity Code" := "Settlement Quantity Code" ;
                                  SettlementQuantityBudget."Line No." := -"Line No.";  //* Use negative Line Nos. in 'TmpOptBudgRec' for Surcharges to prevent duplicates!
                                  SettlementQuantityBudget."Cost Type" := "Cost Type";
                                  SettlementQuantityBudget."Cost Object" := "Cost Object";

                                  SettlementQuantityBudget.Description := Description;
                                  SettlementQuantityBudget.Element := Element;
                                  SettlementQuantityBudget.Chapter := Chapter;
                                  SettlementQuantityBudget.Paragraph := Paragraph;
                                  SettlementQuantityBudget."Time Quantity" := 1;
                                  SettlementQuantityBudget.Quantity := 1;
                                  SettlementQuantityBudget.Amount := "Surcharge Amount" * TotalQuantity;
                                  IF SettlementQuantityBudget."Cost Type" = SettlementQuantityBudget."Cost Type"::Labor THEN BEGIN
                                    SettlementQuantityBudget."Rate Code" := "Rate Code";
                                    IF NOT Job.GET("Project No.") THEN
                                      Job.INIT;
                                    SettlementQuantityBudget.Rate := BudgetRateManagement.GetBudgetRate(
                                      0, "Project No.", '', '', Job."Global Dimension 1 Code", "Rate Code", OptionRateDate, BudgetRateFoundAt);
                                    IF SettlementQuantityBudget.Rate <> 0 THEN BEGIN
                                      SettlementQuantityBudget.Norm := ROUND((SettlementQuantityBudget.Amount / SettlementQuantityBudget.Rate), 0.00001);
                                      SettlementQuantityBudget.Hours := ROUND(SettlementQuantityBudget.Norm);
                                    END ELSE BEGIN
                                      SettlementQuantityBudget.Norm := 0;
                                      SettlementQuantityBudget.Hours := 0;
                                      SettlementQuantityBudget.Rate := SettlementQuantityBudget.Amount;
                                    END;
                                  END ELSE BEGIN
                                    SettlementQuantityBudget.Price := SettlementQuantityBudget.Amount;
                                  END;

                                  IF SettlementQuantityBudget.Amount <> 0 THEN BEGIN
                                    TESTFIELD("Cost Object"); //Cost Object obligatory
                                    DimMgtCU.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");
                                    SettlementQuantityBudget."Cost Component" := DimValRec."Cost Component";
                                  END;

                                  IF SettlementQuantityBudget.Amount <> 0 THEN
                                    UpdateTmpSQBudget(SettlementQuantityBudget);
                                END;

               DataItemLink=Project No.=FIELD(Project No.),
                            Settlement Quantity Code=FIELD(Code) }

    { 6719;2   ;DataItem;IntegerDetailed     ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ProcessBudget("Plot Recording Cross List".Code);
                                END;
                                 }

    { 3896;1   ;DataItem;RemoveBudgetDeletedSQs;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  IF TotalBatchUpdate THEN
                                    RemoveSQLinesFromBudget(Job);
                                END;
                                 }

    { 9499;1   ;DataItem;DeleteSQAdjustmentBudget;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  CheckDeleteSQAdjustBudget();
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012006 : TextConst 'ENU=Updating Budget...\\';
      Text001@11012007 : TextConst 'ENU=Project          #1##########\';
      Text002@11012008 : TextConst 'ENU=Settlement Quantity   #2##########\\';
      Text003@11012010 : TextConst 'ENU=Line No.        #3##########\\';
      Text004@11012013 : TextConst 'ENU=No Options Updated';
      Text005@11012014 : TextConst 'ENU=There are %1 Options updated';
      ProjSetupRec@1210190013 : Record 315;
      ProjElemRec@1210190010 : Record 11012010;
      BudgetRec@1210190003 : Record 11012001;
      SettlementQuantityBudget@1210190001 : Record 11072244;
      RateRec@1100485002 : Record 11012000;
      DimValRec@1210190011 : Record 349;
      ProjPurchActRec@1100525000 : Record 11012026;
      TmpSettlementQuantityBudget@1210190036 : TEMPORARY Record 11072244;
      TmpUpdBudgLineRec@1100525006 : TEMPORARY Record 11012514;
      SettlementQuantity@1100528200 : Record 11072243;
      DimMgtCU@1210190012 : Codeunit 408;
      Window@11012000 : Dialog;
      SQLineType@1210190002 : Option;
      gOnDeleteSettlQuanRun@1210190034 : Boolean;
      gOnResetSettlQuanStatusRun@1210190046 : Boolean;
      SkipWriteTmpOptBudget@1210190045 : Boolean;
      VersionDate@1210190044 : Date;
      OptionRateDate@1100485003 : Date;
      Counter@11012001 : Integer;
      NextLineNoTmp@1210190037 : Integer;
      NextLineNo@1210190007 : Integer;
      gDelProjectNo@1210190043 : Code[20];
      gDelCode@1210190000 : Code[20];
      ProjElement@1210190004 : Code[20];
      ProjChapter@1210190008 : Code[20];
      ProjParagraph@1210190009 : Code[20];
      CostObjectLabor@1210190014 : Code[20];
      CostObjectMaterial@1210190015 : Code[20];
      CostObjectSubcontr@1210190016 : Code[20];
      CostObjectPlant@1210190017 : Code[20];
      CostObjectSundry@1210190018 : Code[20];
      UnitLabor@1210190028 : Code[10];
      UnitMaterial@1210190027 : Code[10];
      UnitSubcontr@1210190026 : Code[10];
      UnitPlant@1210190025 : Code[10];
      UnitSundry@1210190024 : Code[10];
      TimeUnitLabor@1210190033 : Code[10];
      TimeUnitMaterial@1210190032 : Code[10];
      TimeUnitSubcontr@1210190031 : Code[10];
      TimeUnitPlant@1210190030 : Code[10];
      TimeUnitSundry@1210190029 : Code[10];
      PrevSettlQuantCode@1210190038 : Code[20];
      PrevSettlQuantCodeClearOtherLevels@1210190035 : Code[20];
      CostObjectNameLabor@1210190023 : Text[50];
      CostObjectNameMaterial@1210190022 : Text[50];
      CostObjectNameSubcontr@1210190021 : Text[50];
      CostObjectNamePlant@1210190020 : Text[50];
      CostObjectNameSundry@1210190019 : Text[50];
      TotalBatchUpdate@1100485001 : Boolean;
      Text006@1100485000 : TextConst 'ENU="De budget is updated. "';
      UseAdjustmentNo@1100528201 : Code[10];
      LastAdjustmentNo@1100528202 : Code[10];

    PROCEDURE SetOnDeleteSettlQuanRun@1210190002(IProjectNo@1210190000 : Code[20];ICode@1210190006 : Code[20]);
    BEGIN
      gOnDeleteSettlQuanRun := TRUE;
      gDelProjectNo := IProjectNo;
      gDelCode := ICode;
    END;

    PROCEDURE SetOnResetSettlQuanStatusRun@1210190003(IProjectNo@1210190000 : Code[20];IPlotNo@1210190001 : Code[10];ICode@1210190006 : Code[20]);
    BEGIN
      gOnResetSettlQuanStatusRun := TRUE;
      gDelProjectNo := IProjectNo;
      gDelCode := ICode;
    END;

    PROCEDURE UpdateTmpSQBudget@1210190041(ISettlementQuantityBudget@1210190000 : Record 11072244);
    BEGIN
      WITH ISettlementQuantityBudget DO BEGIN

        CASE Job."Budget Level for Settl. Q." OF
          Job."Budget Level for Settl. Q."::"SQ-Cost Type",
          Job."Budget Level for Settl. Q."::"SQ-Element-Cost Type":
            BEGIN
              IF Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Cost Type" THEN BEGIN
                Element := ProjElement;
                Chapter := ProjChapter;
                Paragraph := ProjParagraph;
              END;
              GetCommonCostObjectData("Cost Type", "Cost Object", Description, "Unit of Measure", "Unit of Time");
              "Description 2" := '';
              "Item No." := '';
              "Basic Item" := '';
              Manufacturer := '';
              "Trade Item" := '';
              "Vendor (Trade Item)" := '';
              Quantity := 1;
              "Time Quantity" := 1;
              IF "Cost Type" = "Cost Type"::Labor THEN
                "Rate Code" := "Rate Code";   //Kan verschillen dus niet doen?
              //  "Rate Code" := ProjSetupRec."Rate Code Option in Budget";  //?????? TODO nieuw variable

            END;
          Job."Budget Level for Settl. Q."::Detailed,
          Job."Budget Level for Settl. Q."::"SQ-Cost Object",
          Job."Budget Level for Settl. Q."::"SQ-Element-Cost Object":
            BEGIN
              IF Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Cost Object" THEN BEGIN
                Element := ProjElement;
                Chapter := ProjChapter;
                Paragraph := ProjParagraph;
              END;
              IF "Cost Type" = "Cost Type"::Labor THEN
                "Rate Code" := "Rate Code"; //???
              //  "Rate Code" := ProjSetupRec."Rate Code Option in Budget";  //?????? TODO
            END;
        END;

        TmpSettlementQuantityBudget.RESET;
        TmpSettlementQuantityBudget.SETRANGE("Source Type", SQLineType);  //* (Mis)Use of field 'Source Type' for Settl. Q. Line Type.
        TmpSettlementQuantityBudget.SETRANGE("Project No.", "Project No.");
        TmpSettlementQuantityBudget.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code");
        TmpSettlementQuantityBudget.SETRANGE("Cost Component", "Cost Component");
        CASE Job."Budget Level for Settl. Q." OF
          Job."Budget Level for Settl. Q."::"SQ-Cost Type",
          Job."Budget Level for Settl. Q."::"SQ-Element-Cost Type":
            BEGIN
              IF Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Element-Cost Type" THEN
                TmpSettlementQuantityBudget.SETRANGE(Element, Element);
              TmpSettlementQuantityBudget.SETRANGE("Cost Type", "Cost Type");
            END;
          Job."Budget Level for Settl. Q."::Detailed,
          Job."Budget Level for Settl. Q."::"SQ-Cost Object",
          Job."Budget Level for Settl. Q."::"SQ-Element-Cost Object":
            BEGIN
              IF Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Element-Cost Object" THEN
                TmpSettlementQuantityBudget.SETRANGE(Element, Element);
              TmpSettlementQuantityBudget.SETRANGE("Cost Type", "Cost Type");
              TmpSettlementQuantityBudget.SETRANGE("Cost Object", "Cost Object");
              TmpSettlementQuantityBudget.SETRANGE(Description, Description);
              TmpSettlementQuantityBudget.SETRANGE("Description 2", "Description 2");
              TmpSettlementQuantityBudget.SETRANGE("Unit of Measure", "Unit of Measure");
              TmpSettlementQuantityBudget.SETRANGE("Unit of Time", "Unit of Time");
              IF "Cost Type" = "Cost Type"::Material THEN BEGIN
                TmpSettlementQuantityBudget.SETRANGE("Item No.", "Item No.");
                TmpSettlementQuantityBudget.SETRANGE("Basic Item", "Basic Item");
                TmpSettlementQuantityBudget.SETRANGE(Manufacturer, Manufacturer);
                TmpSettlementQuantityBudget.SETRANGE("Trade Item", "Trade Item");
                TmpSettlementQuantityBudget.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
              END;
            END;
        END;

        //extra filter toevoegen op staartkosten
        IF "Overhead Surcharge from Summ." THEN
          TmpSettlementQuantityBudget.SETRANGE("Overhead Surcharge from Summ.", "Overhead Surcharge from Summ.");

        IF NOT TmpSettlementQuantityBudget.FIND('-') THEN BEGIN
          TmpSettlementQuantityBudget := ISettlementQuantityBudget;
          TmpSettlementQuantityBudget."Line No." := NextLineNoTmp;
          NextLineNoTmp := NextLineNoTmp + 1;
          TmpSettlementQuantityBudget."Source Type" := SQLineType;
          TmpSettlementQuantityBudget.INSERT;
        END ELSE BEGIN
          //* Note: Don't count "Time Quantity", is always '1' when data is compressed
          IF (SQLineType <> BudgetRec."Settl. Q. Line Type"::"SQ Surcharge") AND
             (Job."Budget Level for Settl. Q." <> Job."Budget Level for Settl. Q."::"SQ-Cost Type") AND
             (Job."Budget Level for Settl. Q." <> Job."Budget Level for Settl. Q."::"SQ-Element-Cost Type")
          THEN BEGIN
            TmpSettlementQuantityBudget.Quantity := TmpSettlementQuantityBudget.Quantity + Quantity;
          END;
          TmpSettlementQuantityBudget.Amount := TmpSettlementQuantityBudget.Amount + Amount;
          TmpSettlementQuantityBudget.Hours := TmpSettlementQuantityBudget.Hours + Hours;

          BudgetRec."Surcharge Amnt from Summary" := TmpSettlementQuantityBudget."Surcharge Amnt from Summary";
          TmpSettlementQuantityBudget.MODIFY;
        END;

      END;
    END;

    PROCEDURE ProcessBudget@1210190050(ICode@1210190000 : Code[20]);
    VAR
      lvBudgetAdjustment@1100528203 : Record 11012003;
      lvSettlementQuantity@1100485000 : Record 11072243;
      lvBudgetRecTotalCount@1100528204 : Record 11012001;
      lvStep@1100528202 : Integer;
      TotalQuantity@1100528205 : Decimal;
      TotalAmount@1100528200 : Decimal;
      totalHours@1100528206 : Decimal;
    BEGIN
      IF ICode = '' THEN
        EXIT;

      //bepaal adjustment new 17-12
      UseAdjustmentNo := '';
      LastAdjustmentNo := '';
      IF Job."Budget Fixed" THEN BEGIN
        lvBudgetAdjustment.SETRANGE("Project No.",Job."No.");
        IF lvBudgetAdjustment.FINDLAST THEN BEGIN
          LastAdjustmentNo := lvBudgetAdjustment."No.";
          IF lvBudgetAdjustment."Correction Fixed" THEN BEGIN
            lvBudgetAdjustment.GetDefaultAdjustmentNo()
          END;
        END ELSE BEGIN
          lvBudgetAdjustment."Project No." := Job."No.";
          lvBudgetAdjustment.GetDefaultAdjustmentNo();
        END;
        UseAdjustmentNo := lvBudgetAdjustment."No.";
      END;
      //

      BudgetRec.RESET;
      BudgetRec.SETCURRENTKEY("Project No.", Adjustment, "Extension Contract", Option, "Settlement Quantity Code", "Line No.");
      BudgetRec.SETRANGE("Project No.", Job."No.");
      //BudgetRec.SETRANGE(Adjustment, '');   //new 17-12--> cater for updates
      BudgetRec.SETRANGE("Extension Contract", '');
      BudgetRec.SETRANGE(Option, '');
      BudgetRec.SETRANGE("Settlement Quantity Code", ICode);
      BudgetRec.SETRANGE("Budget Level for Settl. Q.", Job."Budget Level for Settl. Q.");
      IF BudgetRec.FINDSET(TRUE, FALSE) THEN BEGIN  //Try to find a matching line in the TmpSettlementQuantityBudget
        REPEAT
          lvBudgetRecTotalCount.COPY(BudgetRec);
          TmpSettlementQuantityBudget.RESET;
          TmpSettlementQuantityBudget.SETRANGE("Source Type", BudgetRec."Settl. Q. Line Type");
          TmpSettlementQuantityBudget.SETRANGE("Project No.", BudgetRec."Project No.");
          TmpSettlementQuantityBudget.SETRANGE("Settlement Quantity Code", ICode);
          TmpSettlementQuantityBudget.SETRANGE("Cost Component", BudgetRec."Cost Component");
          TmpSettlementQuantityBudget.SETRANGE("Overhead Surcharge from Summ.", BudgetRec."Overhead Surcharge from Summ.");
          //new 17-12
          lvBudgetRecTotalCount.SETRANGE("Settl. Q. Line Type", BudgetRec."Settl. Q. Line Type");
          lvBudgetRecTotalCount.SETRANGE("Cost Component", BudgetRec."Cost Component");
          lvBudgetRecTotalCount.SETRANGE("Overhead Surcharge from Summ.", BudgetRec."Overhead Surcharge from Summ.");
          //new 17-12
          CASE Job."Budget Level for Settl. Q." OF
            Job."Budget Level for Settl. Q."::Detailed:
              BEGIN
                IF BudgetRec."Settl. Q. Line Type" <> BudgetRec."Settl. Q. Line Type"::"SQ Surcharge" THEN
                  TmpSettlementQuantityBudget.SETRANGE("Line No.", BudgetRec."Settl. Q. Line No.")
                ELSE
                  TmpSettlementQuantityBudget.SETRANGE("Line No.", -BudgetRec."Settl. Q. Line No."); //* Surch. with neg. Line No in 'TmpSettlementQuantityBudget'

                //new 17-12
                  lvBudgetRecTotalCount.SETRANGE("Settl. Q. Line No.", BudgetRec."Settl. Q. Line No.");
                //new 17-12

              END;
            Job."Budget Level for Settl. Q."::"SQ-Cost Type",
            Job."Budget Level for Settl. Q."::"SQ-Element-Cost Type":
              BEGIN
                IF Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Element-Cost Type" THEN BEGIN
                  TmpSettlementQuantityBudget.SETRANGE(Element, BudgetRec.Element);
                //new 17-12
                  lvBudgetRecTotalCount.SETRANGE(Element, BudgetRec.Element);
                //new 17-12

                END;
                TmpSettlementQuantityBudget.SETRANGE("Cost Type", BudgetRec."Cost Type");
                //new 17-12
                lvBudgetRecTotalCount.SETRANGE("Cost Type", BudgetRec."Cost Type");
                //new 17-12

              END;
            Job."Budget Level for Settl. Q."::"SQ-Cost Object",
            Job."Budget Level for Settl. Q."::"SQ-Element-Cost Object":
              BEGIN
                IF Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Element-Cost Object" THEN BEGIN
                  TmpSettlementQuantityBudget.SETRANGE(Element, BudgetRec.Element);
                  //new 17-12
                  lvBudgetRecTotalCount.SETRANGE(Element, BudgetRec.Element);
                  //new 17-12
                END;
                TmpSettlementQuantityBudget.SETRANGE("Cost Type", BudgetRec."Cost Type");
                TmpSettlementQuantityBudget.SETRANGE("Cost Object", BudgetRec."Cost Object");
                TmpSettlementQuantityBudget.SETRANGE(Description, BudgetRec.Description);
                TmpSettlementQuantityBudget.SETRANGE("Description 2", BudgetRec."Description 2");
                TmpSettlementQuantityBudget.SETRANGE("Unit of Measure", BudgetRec."Unit of Measure");
                TmpSettlementQuantityBudget.SETRANGE("Unit of Time", BudgetRec."Unit of Time");
                //new 17-12 s
                lvBudgetRecTotalCount.SETRANGE("Cost Type", BudgetRec."Cost Type");
                lvBudgetRecTotalCount.SETRANGE("Cost Object", BudgetRec."Cost Object");
                lvBudgetRecTotalCount.SETRANGE(Description, BudgetRec.Description);
                lvBudgetRecTotalCount.SETRANGE("Description 2", BudgetRec."Description 2");
                lvBudgetRecTotalCount.SETRANGE("Unit of Measure", BudgetRec."Unit of Measure");
                lvBudgetRecTotalCount.SETRANGE("Unit of Time", BudgetRec."Unit of Time");
                //new 17-12 e
                IF BudgetRec."Cost Type" = BudgetRec."Cost Type"::Material THEN BEGIN
                  TmpSettlementQuantityBudget.SETRANGE("Item No.", BudgetRec."Item No.");
                  TmpSettlementQuantityBudget.SETRANGE("Basic Item", BudgetRec."Basic Item");
                  TmpSettlementQuantityBudget.SETRANGE(Manufacturer, BudgetRec.Manufacturer);
                  TmpSettlementQuantityBudget.SETRANGE("Trade Item", BudgetRec."Trade Item");
                  TmpSettlementQuantityBudget.SETRANGE("Vendor (Trade Item)", BudgetRec."Vendor (Trade Item)");
                //new 17-12 s
                  lvBudgetRecTotalCount.SETRANGE("Item No.", BudgetRec."Item No.");
                  lvBudgetRecTotalCount.SETRANGE("Basic Item", BudgetRec."Basic Item");
                  lvBudgetRecTotalCount.SETRANGE(Manufacturer, BudgetRec.Manufacturer);
                  lvBudgetRecTotalCount.SETRANGE("Trade Item", BudgetRec."Trade Item");
                  lvBudgetRecTotalCount.SETRANGE("Vendor (Trade Item)", BudgetRec."Vendor (Trade Item)");
               //new 17-12 e

                END;
              END;
          END;

          IF NOT TmpSettlementQuantityBudget.FIND('-') THEN BEGIN
            //Sleutel bestaat niet in verrekenbare hoeveelheid, dus verwijderen, of totale aantal naar 0 resetten.
            //new 17-12 s
            TotalQuantity  := 0;
            totalHours := 0;
            TotalAmount := 0;
            lvBudgetRecTotalCount.SETCURRENTKEY("Project No.",Adjustment,"Extension Contract",Option,"Settlement Quantity Code","Line No.");
            IF lvBudgetRecTotalCount.FINDSET THEN BEGIN
              //In het ideale geval stap je er door heen per correctie.
              lvStep := 0;
              REPEAT
                TotalQuantity := TotalQuantity + lvBudgetRecTotalCount."Time Quantity" * lvBudgetRecTotalCount.Quantity;
                TotalAmount :=  totalHours + lvBudgetRecTotalCount.Amount;
                totalHours := lvBudgetRecTotalCount.Hours;
                lvStep += 1;
              UNTIL lvBudgetRecTotalCount.NEXT = 0;
            END;
            //new 17-12 e
            IF NOT ((TotalQuantity = 0) AND (TotalAmount = 0) AND (totalHours = 0)) THEN BEGIN
              IF lvStep <= 1 THEN BEGIN
                BudgetRec.DELETE;
                Job.UpdateCostControlStatus(2, '', BudgetRec."Cost Object");
              END ELSE BEGIN
                IF (UseAdjustmentNo = '') OR
                   ((LastAdjustmentNo=UseAdjustmentNo) AND (UseAdjustmentNo = lvBudgetRecTotalCount.Adjustment)) THEN
                BEGIN
                  //herschrijf laatste regel (is totaal resetten naar 0)
                  CorrectBudgetRec(lvBudgetRecTotalCount, totalHours, TotalQuantity, TotalAmount);
                  lvBudgetRecTotalCount.MODIFY;
                  Job.UpdateCostControlStatus(1, '', BudgetRec."Cost Object");
                END ELSE BEGIN
                  //voeg regel toe aan laatste correctie
                  lvBudgetRecTotalCount.Adjustment := UseAdjustmentNo;
                  NewBudgetRecValues(lvBudgetRecTotalCount, totalHours, TotalQuantity, TotalAmount);
                  lvBudgetRecTotalCount.INSERT;
                  Job.UpdateCostControlStatus(1, '', BudgetRec."Cost Object");
                END;
              END;
            END;
          END ELSE BEGIN
            //record is ook in TmpSettlementQuantityBudget aanwezig, dus aantal aanpassen
            //new 17-12 s
            TotalQuantity  := 0;
            totalHours := 0;
            TotalAmount := 0;
            IF lvBudgetRecTotalCount.FINDSET THEN BEGIN
              //1 regel per adjustment (of 2  als het + en - is)
              lvStep := 0;
              REPEAT
                TotalQuantity := TotalQuantity + lvBudgetRecTotalCount."Time Quantity" * lvBudgetRecTotalCount.Quantity;
                TotalAmount :=  totalHours + lvBudgetRecTotalCount.Amount;
                totalHours := lvBudgetRecTotalCount.Hours;
                lvStep += 1;
              UNTIL lvBudgetRecTotalCount.NEXT = 0;
            END;
            //new 17-12 e

            IF NOT ((TotalQuantity = TmpSettlementQuantityBudget.Quantity) AND
                    (TotalAmount = TmpSettlementQuantityBudget.Amount) AND
                    (totalHours = TmpSettlementQuantityBudget.Hours)) THEN BEGIN
              IF lvStep > 0 THEN BEGIN
                IF (UseAdjustmentNo = '') OR
                   ((LastAdjustmentNo=UseAdjustmentNo) AND (UseAdjustmentNo = lvBudgetRecTotalCount.Adjustment)) THEN
                BEGIN
                  //herschrijf laatste regel ()
                  CorrectBudgetRec(lvBudgetRecTotalCount,
                    totalHours-TmpSettlementQuantityBudget.Hours,
                    TotalQuantity-TmpSettlementQuantityBudget.Quantity,
                    TotalAmount-TmpSettlementQuantityBudget.Hours);
                  lvBudgetRecTotalCount.MODIFY;
                  Job.UpdateCostControlStatus(1, '', BudgetRec."Cost Object");
                END ELSE BEGIN
                  //voeg regel toe aan laatste correctie
                  lvBudgetRecTotalCount.Adjustment := UseAdjustmentNo;
                  NewBudgetRecValues(lvBudgetRecTotalCount,
                    totalHours-TmpSettlementQuantityBudget.Hours,
                    TotalQuantity-TmpSettlementQuantityBudget.Quantity,
                    TotalAmount-TmpSettlementQuantityBudget.Hours);
                  lvBudgetRecTotalCount.INSERT;
                  Job.UpdateCostControlStatus(1, '', BudgetRec."Cost Object");
                END;
              END;
            END;

            IF TotalBatchUpdate THEN
              InsertTmpUpdBudgetLine();

            TmpSettlementQuantityBudget.DELETE;
          END;

          //new 17-12
          lvBudgetRecTotalCount.SETRANGE("Settl. Q. Line Type");
          lvBudgetRecTotalCount.SETRANGE("Cost Component");
          lvBudgetRecTotalCount.SETRANGE("Overhead Surcharge from Summ.");
          lvBudgetRecTotalCount.SETRANGE("Settl. Q. Line No.");
          lvBudgetRecTotalCount.SETRANGE(Element);
          lvBudgetRecTotalCount.SETRANGE("Cost Type");
          lvBudgetRecTotalCount.SETRANGE("Cost Object");
          lvBudgetRecTotalCount.SETRANGE(Description);
          lvBudgetRecTotalCount.SETRANGE("Description 2");
          lvBudgetRecTotalCount.SETRANGE("Unit of Measure");
          lvBudgetRecTotalCount.SETRANGE("Unit of Time");
          lvBudgetRecTotalCount.SETRANGE("Item No.");
          lvBudgetRecTotalCount.SETRANGE("Basic Item");
          lvBudgetRecTotalCount.SETRANGE(Manufacturer);
          lvBudgetRecTotalCount.SETRANGE("Trade Item");
          lvBudgetRecTotalCount.SETRANGE("Vendor (Trade Item)");
          //new 17-12

        UNTIL BudgetRec.NEXT = 0;
      END;

      TmpSettlementQuantityBudget.RESET;     //Lines that are not matched with budgetline
      IF TmpSettlementQuantityBudget.FIND('-') THEN BEGIN
        BudgetRec.RESET;
        BudgetRec.SETRANGE("Project No.", TmpSettlementQuantityBudget."Project No.");
        BudgetRec.SETRANGE(Adjustment, UseAdjustmentNo);
        BudgetRec.SETRANGE("Extension Contract", '');
        BudgetRec.SETRANGE(Option, '');
        BudgetRec.SETRANGE("Settlement Quantity Code", ICode);
        //BudgetRec.SETRANGE(Option, TmpSettlementQuantityBudget.Option);
        NextLineNo := 10;
        IF BudgetRec.FINDLAST THEN
          NextLineNo := NextLineNo + BudgetRec."Line No.";
        REPEAT
          BudgetRec.INIT;
          BudgetRec."Project No." := TmpSettlementQuantityBudget."Project No.";
          BudgetRec.Adjustment := UseAdjustmentNo;
          BudgetRec."Extension Contract" := '';
          BudgetRec."Settlement Quantity Code" := ICode;
          BudgetRec.Option := '';
          BudgetRec."Line No." := NextLineNo;
          FillBudgetFields();
          FillPurchaseAction();
          BudgetRec.FillMainProject;

          IF BudgetRec."Settlement Quantity Code" <> '' THEN BEGIN
            lvSettlementQuantity.SETRANGE("Project No.", BudgetRec."Project No.");
            lvSettlementQuantity.SETRANGE(Code, BudgetRec."Settlement Quantity Code");
            IF lvSettlementQuantity.FINDFIRST THEN
              BudgetRec."Version Date" := lvSettlementQuantity."Version Date";
          END;

          BudgetRec."Department Code" := Job."Global Dimension 1 Code";

          BudgetRec.INSERT;
          Job.UpdateCostControlStatus(0, '', BudgetRec."Cost Object");
          NextLineNo := NextLineNo + 10;
          IF TotalBatchUpdate THEN
            InsertTmpUpdBudgetLine();

        UNTIL TmpSettlementQuantityBudget.NEXT = 0;
        TmpSettlementQuantityBudget.DELETEALL;
      END;
      NextLineNoTmp := 1;
    END;

    PROCEDURE FillBudgetFields@10();
    BEGIN
      WITH TmpSettlementQuantityBudget DO BEGIN
        BudgetRec."Settl. Q. Line Type" := "Source Type";
        BudgetRec."Budget Level for Settl. Q." := Job."Budget Level for Settl. Q.";
        BudgetRec."Version Date" := VersionDate;
        IF Job."Budget Level for Settl. Q." <> Job."Budget Level for Settl. Q."::Detailed THEN
          BudgetRec."Settl. Q. Line No." := 0
        ELSE BEGIN
          IF BudgetRec."Settl. Q. Line Type" <> BudgetRec."Settl. Q. Line Type"::"SQ Surcharge" THEN
            BudgetRec."Settl. Q. Line No." := "Line No."
          ELSE
            BudgetRec."Settl. Q. Line No." := -"Line No.";  //* Surch. with neg. Line No in 'TmpSettlementQuantityBudget',
                                                            //* must be pos. 'BudgetRec'
        END;
        BudgetRec."Cost Type" := "Cost Type";
        BudgetRec."Cost Object" := "Cost Object";
        BudgetRec."Cost Component" := "Cost Component";
        BudgetRec.Element := Element;
        BudgetRec.Chapter := Chapter;
        BudgetRec.Paragraph := Paragraph;
        BudgetRec."Item No." := "Item No.";
        BudgetRec."Basic Item" := "Basic Item";
        BudgetRec.Manufacturer := Manufacturer;
        BudgetRec."Trade Item" := "Trade Item";
        BudgetRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
        BudgetRec.Description := Description;
        BudgetRec."Description 2" := "Description 2";
        BudgetRec."Unit of Measure" := "Unit of Measure";
        BudgetRec."Unit of Time" := "Unit of Time";
        BudgetRec.Quantity := Quantity;
        BudgetRec."Time Quantity" := "Time Quantity";
        BudgetRec.Amount := Amount;

        BudgetRec."Surcharge Amnt from Summary" := TmpSettlementQuantityBudget."Surcharge Amnt from Summary";
        BudgetRec."Overhead Surcharge from Summ." := TmpSettlementQuantityBudget."Overhead Surcharge from Summ.";

        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          BudgetRec.Norm := Norm;
          BudgetRec."Rate Code" := "Rate Code";
          BudgetRec.Rate := Rate;
          BudgetRec.Hours := Hours;
          BudgetRec.Price := 0;
        END ELSE BEGIN
          BudgetRec.Norm := 0;
          BudgetRec."Rate Code" := '';
          BudgetRec.Rate := 0;
          BudgetRec.Hours := 0;
          BudgetRec.Price := Price;
        END;

        IF BudgetRec."Budget Level for Settl. Q." <> BudgetRec."Budget Level for Settl. Q."::Detailed THEN BEGIN
          IF BudgetRec."Cost Type" = "Cost Type"::Labor THEN BEGIN
            IF BudgetRec.Hours <> 0 THEN BEGIN
              BudgetRec.Rate := ROUND((BudgetRec.Amount / BudgetRec.Hours), 0.00001);
              IF BudgetRec.Quantity = 0 THEN
                BudgetRec.Quantity := 1;
              IF BudgetRec."Time Quantity" = 0 THEN
                BudgetRec."Time Quantity" := 1;
              BudgetRec.Norm := ROUND((BudgetRec.Hours / (BudgetRec.Quantity * BudgetRec."Time Quantity")), 0.00001);
            END ELSE BEGIN
              BudgetRec.Rate := BudgetRec.Amount;
              BudgetRec.Norm := 0
            END;
          END ELSE BEGIN
            IF BudgetRec.Quantity <> 0 THEN
              BudgetRec.Price := BudgetRec.Amount / BudgetRec.Quantity
            ELSE
              BudgetRec.Price := BudgetRec.Amount;
          END;
        END;

      END;
    END;

    PROCEDURE CorrectBudgetRec@1100528204(VAR CorrectionBudgetRec@1100528200 : Record 11012001;HoursCorrection@1100528201 : Decimal;QuantityCorrection@1100528202 : Decimal;AmountCorrection@1100528203 : Decimal);
    BEGIN
      CorrectionBudgetRec.Amount := CorrectionBudgetRec.Amount - AmountCorrection;
      CorrectionBudgetRec.Quantity := CorrectionBudgetRec.Quantity - QuantityCorrection;

      IF CorrectionBudgetRec."Cost Type" = CorrectionBudgetRec."Cost Type"::Labor THEN BEGIN
        CorrectionBudgetRec.Hours := CorrectionBudgetRec.Hours - HoursCorrection;
        IF CorrectionBudgetRec.Hours <> 0 THEN
          CorrectionBudgetRec.Rate := ROUND((CorrectionBudgetRec.Amount / CorrectionBudgetRec.Hours), 0.00001)
        ELSE
          CorrectionBudgetRec.Rate := CorrectionBudgetRec.Amount;
      END ELSE BEGIN
        IF CorrectionBudgetRec.Quantity <> 0 THEN
          CorrectionBudgetRec.Price := CorrectionBudgetRec.Amount / CorrectionBudgetRec.Quantity
        ELSE
          CorrectionBudgetRec.Price := CorrectionBudgetRec.Amount;
      END;
    END;

    PROCEDURE NewBudgetRecValues@1100528208(VAR NewBudgetRec@1100528203 : Record 11012001;HoursCorrection@1100528202 : Decimal;QuantityCorrection@1100528201 : Decimal;AmountCorrection@1100528200 : Decimal);
    VAR
      lBudgetRec@1100528204 : Record 11012001;
      lNextLineNo@1100528205 : Integer;
    BEGIN
      lBudgetRec.RESET;
      lBudgetRec.SETRANGE("Project No.", NewBudgetRec."Project No.");
      lBudgetRec.SETRANGE(Adjustment, NewBudgetRec.Adjustment);
      lBudgetRec.SETRANGE("Extension Contract", NewBudgetRec."Extension Contract");
      lBudgetRec.SETRANGE(Option, NewBudgetRec.Option);
      lBudgetRec.SETRANGE("Settlement Quantity Code", NewBudgetRec."Settlement Quantity Code");
      lNextLineNo := 10000;
      IF lBudgetRec.FINDLAST THEN
        lNextLineNo := lNextLineNo + BudgetRec."Line No.";

      NewBudgetRec."Line No." := lNextLineNo;

      NewBudgetRec.Amount := -1 *  AmountCorrection;
      NewBudgetRec.Quantity := -1 * QuantityCorrection;

      IF NewBudgetRec."Cost Type" = NewBudgetRec."Cost Type"::Labor THEN BEGIN
        NewBudgetRec.Hours := -1 *  HoursCorrection;
        IF NewBudgetRec.Hours <> 0 THEN
          NewBudgetRec.Rate := ROUND((NewBudgetRec.Amount / NewBudgetRec.Hours), 0.00001)
        ELSE
          NewBudgetRec.Rate := NewBudgetRec.Amount;
      END ELSE BEGIN
        IF NewBudgetRec.Quantity <> 0 THEN
          NewBudgetRec.Price := ROUND(NewBudgetRec.Amount / NewBudgetRec.Quantity)
        ELSE
          NewBudgetRec.Price := NewBudgetRec.Amount;
      END;
    END;

    PROCEDURE FillPurchaseAction@1100525000();
    BEGIN
      //* Zie testen in T11012001, daar als >=Applied dan melding.
      //* Hier alleen vullen als (standaard) inkoopactie van de kostendrager aanwezig is als een project inkoopactie
      //* met de status 'Concept' (zie testen in T11012001, daar als >=Applied dan melding).
      //* Hier nooit een melding/error, gewoon niet doen.
      //* Verder alleen bij het toevoegen van een werkbegrotingsregel.
      IF (BudgetRec."Purchase Action" = '') AND (BudgetRec."Cost Object" <> '') THEN BEGIN
        DimMgtCU.GetDimValueRec(2, BudgetRec."Cost Object", DimValRec, FALSE, '');
        IF DimValRec."Purchase Action" <> '' THEN BEGIN
          IF ProjPurchActRec.GET(BudgetRec."Project No.", DimValRec."Purchase Action") THEN BEGIN
            IF ProjPurchActRec.Status < ProjPurchActRec.Status::Applied THEN
              BudgetRec."Purchase Action" := DimValRec."Purchase Action";
          END;
        END;
      END;
    END;

    PROCEDURE GetProjElement@1210190000(IProjNo@1210190000 : Code[20]);
    BEGIN
      ProjElement := '';
      ProjChapter := '';
      ProjParagraph := '';

      IF (Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Cost Type") OR
         (Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Cost Object")
      THEN BEGIN
        ProjElemRec.SETRANGE("Project No.", IProjNo);
        IF ProjElemRec.FIND('-') THEN BEGIN
          ProjElement := ProjElemRec.Element;
          ProjChapter := ProjElemRec.Chapter;
          ProjParagraph := ProjElemRec.Paragraph;
        END;
      END;
    END;

    PROCEDURE FillCommonCostObjects@1210190001(IProjNo@1210190000 : Code[20]);
    BEGIN
      IF (Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Cost Type") OR
         (Job."Budget Level for Settl. Q." = Job."Budget Level for Settl. Q."::"SQ-Element-Cost Type")
      THEN BEGIN
        CostObjectLabor := ProjSetupRec."Cost Object Labor in Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectLabor, DimValRec, FALSE, IProjNo);
        CostObjectNameLabor := DimValRec.Name;
        UnitLabor := DimValRec."Unit of Measure";
        TimeUnitLabor := DimValRec."Unit of Time";

        CostObjectMaterial := ProjSetupRec."Cost Object Material in Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectMaterial, DimValRec, FALSE, IProjNo);
        CostObjectNameMaterial := DimValRec.Name;
        UnitMaterial := DimValRec."Unit of Measure";
        TimeUnitMaterial := DimValRec."Unit of Time";

        CostObjectSubcontr := ProjSetupRec."Cost Object Subcontr. Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectSubcontr, DimValRec, FALSE, IProjNo);
        CostObjectNameSubcontr := DimValRec.Name;
        UnitSubcontr := DimValRec."Unit of Measure";
        TimeUnitSubcontr := DimValRec."Unit of Time";

        CostObjectPlant := ProjSetupRec."Cost Object Plant in Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectPlant, DimValRec, FALSE, IProjNo);
        CostObjectNamePlant := DimValRec.Name;
        UnitPlant := DimValRec."Unit of Measure";
        TimeUnitPlant := DimValRec."Unit of Time";

        CostObjectSundry := ProjSetupRec."Cost Object Sundry in Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectSundry, DimValRec, FALSE, IProjNo);
        CostObjectNameSundry := DimValRec.Name;
        UnitSundry := DimValRec."Unit of Measure";
        TimeUnitSundry := DimValRec."Unit of Time";
      END;
    END;

    PROCEDURE GetCommonCostObjectData@1210190012(ICostType@1210190004 : Option;VAR OCostObject@1210190000 : Code[20];VAR OName@1210190001 : Text[50];VAR OUnit@1210190002 : Code[10];VAR OTimeUnit@1210190003 : Code[10]);
    BEGIN
      CASE ICostType OF
        BudgetRec."Cost Type"::Labor:
          BEGIN
            OCostObject := CostObjectLabor;
            OName := CostObjectNameLabor;
            OUnit := UnitLabor;
            OTimeUnit := TimeUnitLabor;
          END;
        BudgetRec."Cost Type"::Material:
          BEGIN
            OCostObject := CostObjectMaterial;
            OName := CostObjectNameMaterial;
            OUnit := UnitMaterial;
            OTimeUnit := TimeUnitMaterial;
          END;
        BudgetRec."Cost Type"::Subcontracting:
          BEGIN
            OCostObject := CostObjectSubcontr;
            OName := CostObjectNameSubcontr;
            OUnit := UnitSubcontr;
            OTimeUnit := TimeUnitSubcontr;
          END;
        BudgetRec."Cost Type"::Plant:
          BEGIN
            OCostObject := CostObjectPlant;
            OName := CostObjectNamePlant;
            OUnit := UnitPlant;
            OTimeUnit := TimeUnitPlant;
          END;
        BudgetRec."Cost Type"::Sundry:
          BEGIN
            OCostObject := CostObjectSundry;
            OName := CostObjectNameSundry;
            OUnit := UnitSundry;
            OTimeUnit := TimeUnitSundry;
          END;
      END;
    END;

    PROCEDURE InsertTmpUpdBudgetLine@1100525001();
    BEGIN
      IF NOT TmpUpdBudgLineRec.GET(BudgetRec."Settlement Quantity Code", BudgetRec."Line No.") THEN BEGIN
        TmpUpdBudgLineRec."Option Quote No." := BudgetRec."Settlement Quantity Code";
        TmpUpdBudgLineRec."Line No." := BudgetRec."Line No.";
        TmpUpdBudgLineRec.INSERT;
      END;
    END;

    PROCEDURE RemoveSQLinesFromBudget@1100485000(VAR vProjectRec@1100485000 : Record 11072003);
    VAR
      lBudgetLineRec@1100485001 : Record 11012001;
    BEGIN
      //* First the option lines in the work budget where deleted before (re)building (by project). Then some dat was lost,
      //* f.i. when the Purchase Action was filled in the budget line.
      //* Now this is done after the (whole) project is rebuild. Then budget lines of options that not present or options (or
      //* status is reset) are deleted;

      IF NOT TotalBatchUpdate THEN  //* Only when for the whole project
        EXIT;

      WITH lBudgetLineRec DO BEGIN
        SETRANGE("Project No.",vProjectRec."No.");
        SETRANGE(Adjustment, '');
        SETRANGE("Extension Contract", '');
        SETRANGE(Option,'');
        SETFILTER("Settlement Quantity Code",'<>%1','');

        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT TmpUpdBudgLineRec.GET("Settlement Quantity Code", "Line No.") THEN BEGIN
              DELETE;
              Job.UpdateCostControlStatus(2, '', BudgetRec."Cost Object");
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckDeleteSQAdjustBudget@1100525002();
    VAR
      lvBudgetLineRec@1100525000 : Record 11012001;
      lvSettlementQuantity@1100525001 : Record 11072243;
    BEGIN
      { TODO, dit gaat niet werken?
      WITH lvBudgetLineRec DO BEGIN
        SETRANGE("Project No.", Job."No.");
        SETFILTER(Adjustment, '<>%1','');
        SETRANGE("Extension Contract", '');
        SETRANGE(Option, '');
        SETFILTER("Settlement Quantity Code", '<>%1', '');  //* Only delete adjustment budgetline on Settlement Quantity level
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF (gOnDeleteSettlQuanRun OR gOnResetSettlQuanStatusRun) AND
              ("Project No." = gDelProjectNo) AND ("Settlement Quantity Code" = gDelCode)
            THEN
              lvSettlementQuantity.Status := 0   //* Option record is not deleted/updated yet, budget must be deleted
            ELSE BEGIN
              IF NOT lvSettlementQuantity.GET("Project No.", "Settlement Quantity Code") THEN
                llvSettlementQuantity.Status := 0;
            END;
            IF NOT (lvOptionRec.Status IN [lvOptionRec.Status::Order, lvOptionRec.Status::Invoice]) THEN BEGIN
              DELETE;
              Job.UpdateCostControlStatus(2, '', BudgetRec."Cost Object"); //kzwerver, 120116, n, #PER
            END;
          UNTIL NEXT = 0;
        END;
      END;
      }
    END;

    PROCEDURE SetBatchUpdate@1100485002(itotalBatchUpdate@1100485000 : Boolean);
    BEGIN
      TotalBatchUpdate := itotalBatchUpdate;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

