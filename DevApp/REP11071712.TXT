OBJECT Report 11071712 MMR Create Project Cost Plus
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Project Cost Plus Entries;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ProjSetup.GET;
                 END;

    OnPreReport=BEGIN
                  Window.OPEN(Text000 + Text001);
                  IF ProjCde = '' THEN
                    ProjCde := Job.GETFILTER("No.");
                END;

    OnPostReport=BEGIN
                   COMMIT;
                   Window.CLOSE;
                   IF CounterOK = 0 THEN
                     MESSAGE(Text007)
                   ELSE
                     MESSAGE(Text008,CounterOK);

                   CheckCompressLines;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.)
                                 WHERE(No.=FILTER(<>''),
                                       Maintenance And Renovation=CONST(Yes));
               OnPreDataItem=BEGIN
                               GetSettleInfoPerProject := COUNT > 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ("No." = '') THEN
                                    CurrReport.SKIP;

                                  COMMIT;
                                  Counter := 0;
                                  CounterTotal := 0;
                                  ProjCde := "No.";
                                  ProjCustCde := CustCde;
                                  ProjCommCde := CommCde;
                                  ProjSettlCde := SettlCde;

                                  IF "Project Principal".GET(Job."No.",Job."Bill-to Customer No.") THEN

                                  IF GetSettleInfoPerProject THEN  //More then one project selected
                                   IF NOT Check1Princip1Comm1Settl("No.", ProjCustCde, ProjCommCde, ProjSettlCde) THEN
                                      CurrReport.SKIP;

                                  IF (ProjCustCde = '') OR  (ProjCommCde = '') OR (ProjSettlCde = '') THEN BEGIN
                                   IF NOT Check1Princip1Comm1Settl("No.", ProjCustCde, ProjCommCde, ProjSettlCde) THEN
                                      CurrReport.SKIP;
                                  END;

                                  CostPlusRec.LOCKTABLE;
                                END;

               ReqFilterFields=No. }

    { 1100528206;1;DataItem;                 ;
               DataItemTable=Table11012005;
               DataItemTableView=SORTING(Principal,Project No.);
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=VAR
                                  BlockingCode@1100525000 : Record 11012027;
                                BEGIN
                                END;

               ReqFilterFields=Principal,Main Project No.;
               DataItemLink=Project No.=FIELD(No.) }

    { 1100528205;2;DataItem;                 ;
               DataItemTable=Table11072251;
               DataItemTableView=SORTING(Project No.,Plot No.,Phase,Recording Date,Seq. No.)
                                 ORDER(Ascending);
               MaxIteration=1;
               OnPreDataItem=BEGIN
                               //only the last record is read from the database.
                               //And only for MMR projects
                               IF NOT Job."Maintenance And Renovation" THEN
                                 CurrReport.BREAK;
                             END;

               DataItemLinkReference=Job;
               DataItemLink=Project No.=FIELD(No.) }

    { 1100528204;3;DataItem;PlotDataItem     ;
               DataItemTable=Table11012500;
               DataItemTableView=SORTING(Project No.,Plot No.)
                                 WHERE(MMR Status=CONST(Finished),
                                       MMR Generate Invoice=CONST(Yes));
               DataItemLink=Project No.=FIELD(Project No.) }

    { 1100528203;4;DataItem;SettlementQuantityCrosslist;
               DataItemTable=Table11072253;
               DataItemTableView=SORTING(Project No.,House Model,Unit,Type,Main Group,Group,Sub Group,Code,Line No.)
                                 ORDER(Ascending)
                                 WHERE(Type=CONST(Settlement));
               OnPreDataItem=BEGIN
                               IF PlotDataItem.Principal <> "Project Principal".Principal THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  PlotSQRecordingLine@1100528200 : Record 11072252;
                                BEGIN
                                  PlotSQRecordingLine.SETRANGE("Project No.", SettlementQuantityCrosslist."Project No.");
                                  PlotSQRecordingLine.SETRANGE("Plot No.", PlotDataItem."Plot No.");
                                  PlotSQRecordingLine.SETRANGE("House Model", SettlementQuantityCrosslist."House Model");
                                  PlotSQRecordingLine.SETRANGE(Unit, SettlementQuantityCrosslist.Unit);
                                  PlotSQRecordingLine.SETRANGE("Line No.", SettlementQuantityCrosslist."Line No.");
                                  IF PlotSQRecordingLine.FINDLAST THEN BEGIN
                                    PlotSQRecordingLine.CALCFIELDS("Cold Recording Quantity", "Production Recording Quantity");
                                    IF PlotSQRecordingLine."Cold Recording Quantity" <> PlotSQRecordingLine."Production Recording Quantity" THEN BEGIN
                                      CounterTotal := CounterTotal + COUNT;
                                      IF NOT ProcessPlotSQRecordingLine(PlotSQRecordingLine) THEN
                                        CurrReport.SKIP;
                                    END;
                                  END;
                                END;

               DataItemLink=Project No.=FIELD(Project No.) }

    { 1100528200;4;DataItem;PlotOptionCrosslist;
               DataItemTable=Table11072253;
               DataItemTableView=SORTING(Project No.,House Model,Unit,Type,Main Group,Group,Sub Group,Code,Line No.)
                                 ORDER(Ascending)
                                 WHERE(Type=CONST(Option));
               DataItemLink=Project No.=FIELD(Project No.),
                            House Model=FIELD(House Model) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF gvSelection = FALSE THEN BEGIN
                     ProjCde := Job.GETFILTER("No.");
                     CustCde := '';
                   END ELSE BEGIN  //db, 18-07-08
                     CustCde := gvCust;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1210190004;2;Field  ;
                  CaptionML=ENU=Principal;
                  SourceExpr=CustCde;
                  OnValidate=BEGIN
                               IF CustCde <> '' THEN
                                 ProjPrincipalRec.GET(ProjCde, CustCde);
                             END;

                  OnLookup=BEGIN
                             ProjPrincipalRec.RESET;
                             ProjPrincipalRec.SETRANGE("Project No.", ProjCde);
                             IF PAGE.RUNMODAL(PAGE::"Project Principal List", ProjPrincipalRec) = ACTION::LookupOK THEN
                               CustCde := ProjPrincipalRec.Principal;
                           END;
                            }

      { 1210190002;2;Field  ;
                  CaptionML=ENU=Commission No.;
                  SourceExpr=CommCde;
                  OnValidate=BEGIN
                               IF CommCde <> '' THEN //mg, 03-03-11: M22568
                                 CommRec.GET(ProjCde, CustCde, CommCde);
                             END;

                  OnLookup=BEGIN
                             CommRec.SETRANGE("Project No.", ProjCde);
                             CommRec.SETRANGE(Principal, CustCde);
                             IF PAGE.RUNMODAL(PAGE::"Commission List", CommRec) = ACTION::LookupOK THEN
                               CommCde := CommRec."No.";
                           END;
                            }

      { 1210190000;2;Field  ;
                  CaptionML=ENU=Settlement Sheet;
                  SourceExpr=SettlCde;
                  OnValidate=BEGIN
                               IF SettlCde <> '' THEN //mg, 03-03-11: M22568
                                 SettlRec.GET(ProjCde, CustCde, CommCde, SettlCde);
                             END;

                  OnLookup=BEGIN
                             SettlRec.SETRANGE("Project No.", ProjCde);
                             SettlRec.SETRANGE(Principal, CustCde);
                             SettlRec.SETRANGE("Commission No.", CommCde);
                             IF PAGE.RUNMODAL(PAGE::"Settlement Sheet List", SettlRec) = ACTION::LookupOK THEN
                               SettlCde := SettlRec."No.";
                           END;
                            }

      { 1100485004;2;Field  ;
                  Name=CompressCPE;
                  CaptionML=ENU=Compress Cost Plus Entries;
                  SourceExpr=CompressCPE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012011 : TextConst 'ENU=Creating Cost Plus Entries....\\';
      Text001@11012012 : TextConst 'ENU=Percentage Finished  @1@@@@@@@@@@@@@\';
      Text002@11012013 : TextConst 'ENU=Project Status of Project %1 could not be %2';
      Text005@11012016 : TextConst 'ENU=Generated Commission';
      Text006@11012017 : TextConst 'ENU=Generated Settlement Sheet';
      Text007@11012018 : TextConst 'ENU=There are no Cost Plus Entries created.';
      Text008@11012019 : TextConst 'ENU=%1 Cost Plus Entries have been created.';
      ProjSetup@1210190004 : Record 315;
      CommRec@1100528200 : Record 11012020;
      SettlRec@1100528201 : Record 11012021;
      CostPlusRec@11012000 : Record 11012019;
      CostPlusRec2@1210190019 : Record 11012019;
      TmpProjRec@1100525005 : TEMPORARY Record 11072003;
      ProjPrincipalRec@1210190005 : Record 11012005;
      CustRec@1100485009 : Record 18;
      EmplRec@1210190018 : Record 5200;
      TradeItemRec@1100485006 : Record 11012317;
      BasicItemRec@1100485007 : Record 11012316;
      ItemRec@1100485008 : Record 27;
      DimValRec@1210190007 : Record 349;
      HourAccProjectLine@1100485000 : Record 11020225;
      JobLedgEntryFilterRec@1100485014 : Record 11072005;
      WageCompRec@1100525001 : Record 11012014;
      DimMgt@1210190006 : Codeunit 408;
      CompressCu@1100485013 : Codeunit 11012043;
      Window@1210190013 : Dialog;
      RestQuantityStartDate@1100485011 : Date;
      SettlMethod@1210190012 : 'Fixed Price,Cost Plus';
      CompressCPE@1100485012 : Boolean;
      Counter@11012006 : Integer;
      CounterOK@11012007 : Integer;
      CounterTotal@1210190009 : Integer;
      InvoicedQuantityPostedHourLine@1100485004 : Decimal;
      SettlCde@1210190000 : Code[20];
      CommCde@1210190001 : Code[20];
      CustCde@1210190008 : Code[20];
      ProjCde@1210190002 : Code[20];
      ExtContractCde@1210190014 : Code[10];
      Text009@1100525000 : TextConst 'ENU=Expense';
      Text010@1210190017 : TextConst 'ENU=Hours';
      Text011@1100485003 : TextConst 'ENU=Project Setup "(Small) Project Cost Plus Hours from" must be Posted Hours or Project Ledger Entries';
      Text012@1100485010 : TextConst 'ENU=No';
      gvSelection@1100485016 : Boolean;
      gvCust@1100485019 : Code[20];
      gvComm@1100485018 : Code[20];
      gvSheet@1100485017 : Code[20];
      GetSettleInfoPerProject@1210190015 : Boolean;
      RestQuantityStartDateEditable@19077982 : Boolean INDATASET;
      ProjCustCde@1100528501 : Code[20];
      ProjCommCde@1100528502 : Code[20];
      ProjSettlCde@1100528503 : Code[20];

    PROCEDURE CheckData@1210190006() : Boolean;
    BEGIN
      //SettlMethod := Job."Settlement Method";
      //IF SettlMethod = SettlMethod::"Fixed Price" THEN
      //  EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE SetDefault@1210190001(lvProj@1210190000 : Code[20]);
    BEGIN
      ProjCde := lvProj;
    END;

    PROCEDURE SetSelection@1100485000(lvProj@1210190000 : Code[20];lvCust@1100485000 : Code[20];lvComm@1100485001 : Code[20];lvSheet@1100485002 : Code[20]);
    BEGIN
      ProjCde := lvProj;
      gvCust := lvCust;
      gvComm := lvComm;
      gvSheet := lvSheet;
      gvSelection := TRUE;
    END;

    PROCEDURE CheckCompressLines@1100525002();
    BEGIN
      IF CompressCPE THEN BEGIN
        CostPlusRec.RESET;
        IF TmpProjRec.FINDFIRST THEN BEGIN
          REPEAT
           CostPlusRec.SETRANGE("Project No.", TmpProjRec."No.");
           IF CostPlusRec.FINDFIRST THEN BEGIN
             REPEAT
               CostPlusRec.MARK(TRUE);
             UNTIL CostPlusRec.NEXT = 0;
           END;
          UNTIL TmpProjRec.NEXT = 0;
        END;
        CostPlusRec.MARKEDONLY(TRUE);
        IF Job.GETFILTER("No.") <> '' THEN
          CostPlusRec.SETFILTER("Project No.", Job.GETFILTER("No."));
        IF "Project Principal".GETFILTER("Project No.") <> '' THEN
          CostPlusRec.SETFILTER("Project No.", "Project Principal".GETFILTER("Project No."));
        IF CostPlusRec.FINDFIRST THEN
          CompressCu.ProcessProjectCostPlus(CostPlusRec);
      END;
    END;

    PROCEDURE Check1Princip1Comm1Settl@1210190002(JobNo@1210190000 : Code[20];VAR ProjCustCde@1210190001 : Code[20];VAR ProjCommCde@1210190002 : Code[20];VAR ProjSettlCde@1210190003 : Code[10]) : Boolean;
    VAR
      Commission@1210190005 : Record 11012020;
      SettlementSheet@1210190006 : Record 11012021;
    BEGIN
      ProjCustCde := "Project Principal".Principal;

      Commission.SETRANGE("Project No.", "Project Principal"."Project No.");
      Commission.SETRANGE(Principal, "Project Principal".Principal);
      CASE Commission.COUNT OF
        0:
          EXIT(TRUE); //commission will be generated if cost plus lines are generated (in GetCommAndSettlData)
        1:
          BEGIN
            Commission.FINDFIRST;
            ProjCommCde := Commission."No.";

            SettlementSheet.SETRANGE("Project No.", Commission."Project No.");
            SettlementSheet.SETRANGE(Principal, Commission.Principal);
            SettlementSheet.SETRANGE("Commission No.", Commission."No.");
            CASE SettlementSheet.COUNT OF
              0:
                EXIT(TRUE); //settlement will be generated if cost plus lines are generated
              1:
                BEGIN
                  SettlementSheet.FINDFIRST;
                  ProjSettlCde := SettlementSheet."No.";
                  EXIT(TRUE); //exactly one settlement present, which is good.
                END;
              ELSE
                EXIT(FALSE); //several settlements present, user has to choose
            END;
          END;
        ELSE
          EXIT(FALSE); //several commissions present, user has to choose
      END;
    END;

    PROCEDURE ProcessPlotSQRecordingLine@1100528208(VAR varPlotSQRecordingLine@1100528200 : Record 11072252) : Boolean;
    VAR
      NSItemTrackingRelation@1100528500 : Record 11071905;
      NSItemTrackingEntry@1100528502 : Record 11071902;
      SerialJobLedgEntry@1100528504 : Record 11072005;
      TotQuanSpecified@1100528501 : Decimal;
    BEGIN
      WITH varPlotSQRecordingLine DO BEGIN
        Counter := Counter + 1;
        Window.UPDATE(1,ROUND(Counter / CounterTotal * 10000,1));

        IF NOT CheckData() THEN
          EXIT(FALSE);

        GenerateCostPlusFromSettlementQuantity(varPlotSQRecordingLine,
          ProjCde, ProjCustCde, ProjCommCde, ProjSettlCde,
          //RestQuanLedgEntryAlso, RestQuantityStartDate,
          FALSE, 0D);


        TmpProjRec."No." := "Project No.";
        IF TmpProjRec.INSERT THEN;

        "Cost Plus Entry Created" := TRUE;
        MODIFY;

        CounterOK := CounterOK + 1;

      END;

      EXIT(TRUE);
    END;

    PROCEDURE GenerateCostPlusFromSettlementQuantity@1100528201(VAR varPlotSQRecordingLine@1100528200 : Record 11072252;ProjCde@1100530002 : Code[20];CustCde@1100530003 : Code[20];CommCde@1100530004 : Code[20];SettlCde@1100530005 : Code[20];RestQuanLedgEntryAlso@1100530011 : Boolean;RestQuantityStartDate@1100530012 : Date);
    VAR
      CostPlusRec@1100530001 : Record 11012019;
      TradeItemRec@1100530017 : Record 11012317;
      BasicItemRec@1100530016 : Record 11012316;
      ItemRec@1100530015 : Record 27;
      JobRec@1100530019 : Record 11072003;
      ItemTranslation@1210190004 : Record 30;
      SettlementSheet@1100525000 : Record 11012021;
      lvCostPrice@1100530010 : Decimal;
      lvUnitFactor@1100530008 : Decimal;
      lvItemUnknown@1100530007 : Boolean;
      lvQuantity@1100530006 : Decimal;
      lvSavedQuantity@1100530014 : Decimal;
      HistCostPriceItem@1210190001 : Boolean;
      HistCostPriceCostObject@1210190000 : Boolean;
      UOMMgt@1210190002 : Codeunit 5402;
    BEGIN
      ProjSetup.GET;
      HistCostPriceItem := ProjSetup."Copy Price Item from Entry";
      HistCostPriceCostObject := ProjSetup."Copy Price C.Object from Entry";

      WITH varPlotSQRecordingLine DO BEGIN
        CALCFIELDS("Unit of Measure", "Unit Price",Description);

        CostPlusRec.INIT;
        CostPlusRec."Project No." := ProjCde;
        CostPlusRec.Principal := CustCde;
        CostPlusRec."Commission No." := CommCde;
        CostPlusRec."Settl.Sheet No." := SettlCde;

        lvQuantity := ROUND("Production Recording Quantity" - "Cold Recording Quantity");
        lvCostPrice := varPlotSQRecordingLine."Unit Price";

      //  IF RestQuanLedgEntryAlso AND "Cost Plus Entry Created" THEN BEGIN
      //    IF ("Posting Date" < RestQuantityStartDate) THEN
      //      EXIT;  //db, 10-01-11
      //    CALCFIELDS("Quantity Invoiced");
      //   lvQuantity := lvQuantity - "Quantity Invoiced";
      //  END;

        IF lvQuantity <> 0 THEN BEGIN
          CostPlusRec."Line No." := CostPlusRec.GetCostPlusFirstFreeLine(ProjCde, CustCde, CommCde, SettlCde);  //db, 10-01-11
          CostPlusRec.INSERT(TRUE);  //db, 23-06-08
          CostPlusRec.Quantity := lvQuantity;
          CostPlusRec."Unit of Measure" := "Unit of Measure";
          //DimMgt.GetDimValueRec(2, "Global Dimension 2 Code", DimValRec, TRUE, ProjCde);
          CostPlusRec."Cost Object" := "Project Principal"."Cost Object";
          //CostPlusRec."Cost Component" := "Cost Component";
          //CostPlusRec.Element := Element;  ??

          CostPlusRec.CALCFIELDS("Cost Type"); //call C008533 sn

          CustRec.GET(CostPlusRec.Principal);  //db, 18-07-06: check option GrossMin by customer instead common setup
          IF CostPlusRec.CheckItemLine THEN
            IF (CostPlusRec."Basic Price" = 0) OR (HistCostPriceItem = TRUE) THEN BEGIN  //db, 17-09-09: M14148+16524
              CostPlusRec."Cost Price" := lvCostPrice;  //db, 08-08-11
              //CostPlusRec."Unit of Measure" := "Unit of Measure Code"; //C009984
              IF CustRec."Item Price Cost Plus Project" = CustRec."Item Price Cost Plus Project"::CostPrice THEN BEGIN
                CostPlusRec."Basic Price" := lvCostPrice;
                CostPlusRec."Basic Price Found at" := TABLECAPTION;
              END;
            END;

          lvSavedQuantity := CostPlusRec.Quantity;  //validate item-data disturbes quantity/unit

          //CheckDocument("No. Series", "Document No.", "Document Line No.",
          //  CostPlusRec."Gross Price", CostPlusRec."Basic Price", CostPlusRec."Sales Discount % (Item)",
          // CostPlusRec."Basic Price Found at", HistCostPriceCostObject);

          //IF "Global Dimension 2 Code" <> '' THEN  //db, 19-06-09: M14973
          //  CostPlusRec."Cost Object" := "Global Dimension 2 Code";

          //CostPlusRec.VALIDATE("Cost Price", lvCostPrice);
          //CostPlusRec."Entry No. Project Ledger" := "Entry No."; //Call C006617 n
          //IF NOT CostPlusRec.CheckItemLine AND (CostPlusRec."Basic Price" = 0) THEN
          //  CostPlusRec.GetBasicPrice;

          CostPlusRec."Basic Price" := "Unit Price";  //M21448 25-08-10
          CostPlusRec."Basic Price Found at" := TABLECAPTION;

          CostPlusRec.VALIDATE("Unit of Measure","Unit of Measure");

          //CostPlusRec."Surcharge %" := CostPlusRec.GetSurcharge;
          CostPlusRec."Sales Price" := CostPlusRec."Basic Price" * (1 + CostPlusRec."Surcharge %"/100);
          // CostPlusRec.CheckCustomer;   //db, 10-01-11
          CostPlusRec.DetermineVATProdPostingGroup;  //db, 10-01-11

          //CostPlusRec."Execution Date" := "Execution Date";
          //IF CostPlusRec."Execution Date" = 0D THEN           //* 10927.n
          //  CostPlusRec."Execution Date" := "Posting Date";

          //CostPlusRec."Source Document" := "Document No.";
          //IF "Entry No." = 0 THEN  //db, 10-01-11: fill source line for obligations only
          //  CostPlusRec."Source Line" := "Document Line No.";


          //CostPlusRec."Entry No. Project Ledger" := "Entry No.";
          //    CostPlusRec."Reconcilation ID" := CostPlusRec.GetReconcilationID;

           IF lvItemUnknown THEN
            CostPlusRec."Item No." := '';

          CostPlusRec.Description := Description;
          //CostPlusRec."Description 2" := "Description 2";

          //CostPlusRec.GetDescription()
          //CostPlusRec.VALIDATE(Text, Text);

          CostPlusRec.MODIFY(TRUE);
          CostPlusRec.InsertCustPlusCommentLine(Comment);  //*31668.n
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

