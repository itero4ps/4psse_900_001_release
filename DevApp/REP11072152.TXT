OBJECT Report 11072152 Maint Plan by SC to Excel
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Maintenance Plan to Excel;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CellDateRec.SETRANGE("Period Type", PeriodType);
                  CellDateRec.SETRANGE("Period Start", DateStart, DateEnd);
                  CellDateRec.FINDSET;
                END;

    OnPostReport=BEGIN
                   CreateWorkBook;
                   DefineCellLayout;
                   DefinePrintLayout;
                   ExcelAutomation.GiveUserControl;
                 END;

  }
  DATASET
  {
    { 1100528800;;DataItem;                  ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               IF ContStatusOrderAndInvAllowed THEN
                                 ContractStatusFilter := '2|3'; //Service Contract status 2=Order en 3=Invoicing Allowed

                               MaintenancePlanManagement.FillMaintenancePlanBuffer(
                                 CompressionLevel,
                                 CustomerFilter,
                                 ContractFilter,
                                 ContractGroupFilter,
                                 ContractStatusFilter,
                                 ManagerFilter,
                                 Dim1CodeFilter,
                                 TmpMaintenancePlanBuffer);

                               MaintenancePlanManagement.UpdateContractArrangements(TmpMaintenancePlanBuffer, DateEnd);

                               IF TmpMaintenancePlanBuffer.COUNT = 0 THEN
                                 CurrReport.BREAK;

                               SETRANGE(Number, 1, TmpMaintenancePlanBuffer.COUNT);

                               CreateColumnCaption;
                               MakeExcelInfo;

                               IF TmpMaintenancePlanBuffer.FINDFIRST THEN;
                             END;

               OnAfterGetRecord=BEGIN
                                  TmpMaintenancePlanBuffer.CALCFIELDS(
                                    "Service Contract Description",
                                    "Service Location Description",
                                    "Service Object Description",
                                    "Maintenance Scheme Description");

                                  CASE CompressionLevel OF
                                    CompressionLevel::"Service Contract":
                                      BEGIN
                                        EnterCell(RowNo, 1, TmpMaintenancePlanBuffer."Service Contract No.",FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                        EnterCell(RowNo, 2, TmpMaintenancePlanBuffer."Service Contract Description",FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                      END;

                                    CompressionLevel::"Service Location":
                                      BEGIN
                                        IF HeaderServiceContract <> TmpMaintenancePlanBuffer."Service Contract No." THEN BEGIN
                                          EnterCell(RowNo, 1,  TmpMaintenancePlanBuffer."Service Contract No.",TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          EnterCell(RowNo, 2,  TmpMaintenancePlanBuffer."Service Contract Description",TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          RowNo += 1;
                                          HeaderServiceContract := TmpMaintenancePlanBuffer."Service Contract No.";
                                        END;
                                        EnterCell(RowNo, 1,  STRSUBSTNO('...%1', TmpMaintenancePlanBuffer."Service Location No."),FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                        EnterCell(RowNo, 2,  STRSUBSTNO('...%1', TmpMaintenancePlanBuffer."Service Location Description"),FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                      END;

                                    CompressionLevel::"Service Object":
                                      BEGIN
                                        IF HeaderServiceContract <> TmpMaintenancePlanBuffer."Service Contract No."  THEN BEGIN
                                          EnterCell(RowNo, 1, TmpMaintenancePlanBuffer."Service Contract No.",TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          EnterCell(RowNo, 2, TmpMaintenancePlanBuffer."Service Contract Description",TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          RowNo += 1;
                                          HeaderServiceContract := TmpMaintenancePlanBuffer."Service Contract No.";
                                        END;

                                        IF HeaderServiceLocation <> TmpMaintenancePlanBuffer."Service Location No."  THEN BEGIN
                                          EnterCell(RowNo, 1,  STRSUBSTNO('...%1', TmpMaintenancePlanBuffer."Service Location No."),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          EnterCell(RowNo, 2,  STRSUBSTNO('...%1', TmpMaintenancePlanBuffer."Service Location Description"),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          RowNo += 1;
                                          HeaderServiceLocation := TmpMaintenancePlanBuffer."Service Location No.";
                                        END;
                                          EnterCell(RowNo, 1,  STRSUBSTNO('......%1', TmpMaintenancePlanBuffer."Object No."),FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          EnterCell(RowNo, 2,  STRSUBSTNO('......%1', TmpMaintenancePlanBuffer."Service Object Description"),FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                      END;

                                    CompressionLevel::"Maintenance Scheme":
                                      BEGIN
                                        IF HeaderServiceContract <> TmpMaintenancePlanBuffer."Service Contract No."  THEN BEGIN
                                          EnterCell(RowNo, 1, TmpMaintenancePlanBuffer."Service Contract No.",TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          EnterCell(RowNo, 2, TmpMaintenancePlanBuffer."Service Contract Description",TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          RowNo += 1;
                                          HeaderServiceContract := TmpMaintenancePlanBuffer."Service Contract No.";
                                        END;

                                        IF HeaderServiceLocation <> TmpMaintenancePlanBuffer."Service Location No."  THEN BEGIN
                                          EnterCell(RowNo, 1,  STRSUBSTNO('...%1', TmpMaintenancePlanBuffer."Service Location No."),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          EnterCell(RowNo, 2,  STRSUBSTNO('...%1', TmpMaintenancePlanBuffer."Service Location Description"),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          RowNo += 1;
                                          HeaderServiceLocation := TmpMaintenancePlanBuffer."Service Location No.";
                                        END;

                                        IF HeaderServiceObject <> TmpMaintenancePlanBuffer."Object No."  THEN BEGIN
                                          EnterCell(RowNo, 1,  STRSUBSTNO('......%1', TmpMaintenancePlanBuffer."Object No."),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          EnterCell(RowNo, 2,  STRSUBSTNO('......%1', TmpMaintenancePlanBuffer."Service Object Description"),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          RowNo += 1;
                                          HeaderServiceObject := TmpMaintenancePlanBuffer."Object No.";
                                        END;
                                          EnterCell(RowNo, 1,  STRSUBSTNO('.........%1', TmpMaintenancePlanBuffer."Maintenance Scheme Code"),FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                          EnterCell(RowNo, 2,  STRSUBSTNO('.........%1', TmpMaintenancePlanBuffer."Maintenance Scheme Description"),FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                      END;
                                  END;

                                  ColNo := 3;
                                  IF CellDateRec.FINDSET THEN BEGIN
                                      REPEAT
                                        EnterCell(RowNo, ColNo,  TmpMaintenancePlanBuffer.GetMaintProgressIndicator(CellDateRec."Period Start",CellDateRec."Period End"),FALSE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
                                        ColNo += 1;
                                      UNTIL CellDateRec.NEXT = 0;
                                  END;

                                  RowNo += 1;
                                  TmpMaintenancePlanBuffer.NEXT;
                                  LastRow := RowNo-1;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100528800;;Container;
                  Name=Options;
                  ContainerType=ContentArea }

      { 1100528805;1;Group  ;
                  Name=Excel;
                  GroupType=Group }

      { 1100528801;2;Field  ;
                  Name=Name Datasheet;
                  CaptionML=ENU=Name Datasheet;
                  SourceExpr=DataSheet }

      { 1100528803;2;Field  ;
                  Name=Print Logo from Company Information;
                  CaptionML=ENU=Print Logo from Company Information;
                  SourceExpr=PrintLogo }

      { 1100528806;1;Group  ;
                  Name=Filters;
                  GroupType=Group }

      { 1100528814;2;Field  ;
                  Name=Start Date;
                  CaptionML=ENU=Start Date;
                  SourceExpr=DateStart }

      { 1100528815;2;Field  ;
                  Name=End Date;
                  CaptionML=ENU=End Date;
                  SourceExpr=DateEnd }

      { 1100528816;2;Field  ;
                  Name=Period Type;
                  CaptionML=ENU=Period Type;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year;
                  SourceExpr=PeriodType }

      { 1100528807;2;Field  ;
                  Name=Compression Level;
                  CaptionML=ENU=Compression Level;
                  OptionCaptionML=ENU=Service Contract,Service Location,Service Object,Maintenance Scheme;
                  SourceExpr=CompressionLevel }

      { 1100528808;2;Field  ;
                  Name=Customer Filter;
                  CaptionML=ENU=Customer Filter;
                  SourceExpr=CustomerFilter;
                  TableRelation=Customer;
                  OnLookup=VAR
                             CustomerList@1100528800 : Page 22;
                           BEGIN
                             CustomerList.LOOKUPMODE(TRUE);
                             IF CustomerList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                               Text += CustomerList.GetSelectionFilter;
                               EXIT(TRUE);
                             END;
                           END;
                            }

      { 1100528809;2;Field  ;
                  Name=Contract Filter;
                  CaptionML=ENU=Contract Filter;
                  SourceExpr=ContractFilter;
                  TableRelation=Service-Contract;
                  OnLookup=VAR
                             ServiceContractsList@1100528800 : Page 11012825;
                           BEGIN
                             ServiceContractsList.LOOKUPMODE(TRUE);
                             IF ServiceContractsList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                               Text += ServiceContractsList.GetSelectionFilter;
                               EXIT(TRUE);
                             END;
                           END;
                            }

      { 1100528810;2;Field  ;
                  Name=Contract Group Filter;
                  CaptionML=ENU=Contract Group Filter;
                  SourceExpr=ContractGroupFilter;
                  TableRelation="Service Contract Group" }

      { 1100528811;2;Field  ;
                  Name=Contract Manager Filter;
                  CaptionML=ENU=Contract Manager Filter;
                  SourceExpr=ManagerFilter;
                  TableRelation=Salesperson/Purchaser }

      { 1100528812;2;Field  ;
                  Name=Departement Code Filter;
                  CaptionML=ENU=Departement Code Filter;
                  SourceExpr=Dim1CodeFilter;
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1)) }

      { 1100528813;2;Field  ;
                  Name=Apply Filter on Contract Status 'Order' and 'Invoicing Allowed';
                  CaptionML=ENU=Apply Filter on Contract Status 'Order' and 'Invoicing Allowed';
                  SourceExpr=ContStatusOrderAndInvAllowed }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuffer@1100528841 : TEMPORARY Record 370;
      ExcelAutomation@1100528814 : Codeunit 11012402;
      RowNo@1100528873 : Integer;
      ColNo@1100528874 : Integer;
      FirstBodyRow@1100528875 : Integer;
      FirstBodyColumn@1100528834 : Integer;
      LastRow@1100528877 : Integer;
      LastColumn@1100528876 : Integer;
      TodayColumn@1100528878 : Integer;
      TodayLineDetermined@1100528805 : Boolean;
      TmpMaintenancePlanBuffer@1100528840 : TEMPORARY Record 11072235;
      CellDateRec@1100528839 : Record 2000000007;
      MaintenancePlanManagement@1100528838 : Codeunit 11012877;
      PeriodType@1100528833 : 'Day,Week,Month,Quarter,Year';
      FileNameClient@1100528815 : Text;
      ThreeTierAutomationMgt@1100528837 : Codeunit 419;
      DateStart@1100528836 : Date;
      DateEnd@1100528835 : Date;
      CompressionLevel@1100528831 : 'Service Contract,Service Location,Service Object,Maintenance Scheme';
      CustomerFilter@1100528830 : Code[250];
      Dim1CodeFilter@1100528829 : Code[250];
      ContractFilter@1100528828 : Code[250];
      ManagerFilter@1100528827 : Code[250];
      ContractGroupFilter@1100528826 : Code[250];
      ContractStatusFilter@1100528825 : Code[250];
      ContStatusOrderAndInvAllowed@1100528824 : Boolean;
      PrintLogo@1100528823 : Boolean;
      HeaderServiceContract@1100528821 : Code[20];
      HeaderServiceLocation@1100528820 : Code[20];
      HeaderServiceObject@1100528819 : Code[20];
      DataSheet@1100528811 : Text[30];
      Text000@1100528872 : TextConst 'ENU=Maintenance Planning';
      Text003@1100528869 : TextConst 'ENU=Company:';
      Text004@1100528868 : TextConst 'ENU=User:';
      Text005@1100528867 : TextConst 'ENU=Export Date:';
      Text006@1100528866 : TextConst 'ENU=Export Time:';
      Text007@1100528865 : TextConst 'ENU=Report';
      Text008@1100528864 : TextConst 'ENU=Start Date Period:';
      Text009@1100528863 : TextConst 'ENU=End Date Period:';
      Text010@1100528862 : TextConst 'ENU=Compression Level:';
      Text011@1100528861 : TextConst 'ENU=Customer Filter:';
      Text012@1100528860 : TextConst 'ENU=Contract Filter:';
      Text013@1100528859 : TextConst 'ENU=Contract Group Filter:';
      Text014@1100528858 : TextConst 'ENU=Contract Manager Filter:';
      Text015@1100528857 : TextConst 'ENU=Department Code Filter:';
      Text018@1100528845 : TextConst 'ENU=Contract Status Filter:';
      Text019@1100528853 : TextConst 'ENU=Only Contracts with status ''Order'' and ''Invoicing Allowed''.';
      Text020@1100528852 : TextConst 'ENU=Contract';
      Text021@1100528851 : TextConst 'ENU=Location';
      Text022@1100528850 : TextConst 'ENU=Object';
      Text023@1100528849 : TextConst 'ENU=Maintenance Scheme';
      Text024@1100528810 : TextConst 'ENU=Information';
      Text025@1100528847 : TextConst 'ENU=Description';
      Text026@1100528846 : TextConst 'ENU=%1 %2%3%4 %5%6%7 %8';
      Text027@1100528813 : TextConst 'ENU=Filters:';
      Text028@1100528844 : TextConst 'ENU=Date:';
      Text029@1100528832 : TextConst 'ENU=Maintenance Planning';
      Text030@1100525000 : TextConst 'ENU=Service Contract';
      Text031@1100525001 : TextConst 'ENU=Service Location';
      Text032@1100525002 : TextConst 'ENU=Service Object';
      Text033@1100525003 : TextConst 'ENU=Maintenance Scheme';
      Text034@1100525004 : TextConst 'ENU=Q';
      Err001@1100528843 : TextConst 'ENU=No logo present in Company Information.';
      FilterTxt@1100528800 : Text[1024];

    PROCEDURE InitReport@1100485000(VAR vCellDateRec@1100485001 : Record 2000000007);
    VAR
      ServSetup@1100525001 : Record 11012800;
    BEGIN
      CellDateRec.COPY(vCellDateRec);
      DateStart := DMY2DATE(1,1,DATE2DMY(CellDateRec."Period Start",3));
      DateEnd := DMY2DATE(31,12,DATE2DMY(CellDateRec."Period Start",3));
    END;

    PROCEDURE SetSelection@1000000000(iPeriodType@1100528800 : 'Day,Week,Month,Quarter,Year';iCompressionLevel@1100528801 : 'Service Contract,Service Location,Service Object,Maintenance Scheme';iCustomerFilter@1210190000 : Code[1024];iContractFilter@1210190001 : Code[1024];iContractGroupFilter@1210190002 : Code[1024];iManagerFilter@1210190003 : Code[1024];iDim1CodeFilter@1210190004 : Code[1024]);
    BEGIN
      PeriodType := iPeriodType;
      CompressionLevel := iCompressionLevel;
      CustomerFilter := iCustomerFilter;
      ContractFilter := iContractFilter;
      ContractGroupFilter := iContractGroupFilter;
      ManagerFilter := iManagerFilter;
      Dim1CodeFilter := iDim1CodeFilter;
    END;

    LOCAL PROCEDURE MakeExcelInfo@1100528802();
    VAR
      ExcelAutomation@1100528800 : Codeunit 11012402;
    BEGIN
      ExcelBuffer.SetUseInfoSheet;
      ExcelBuffer.AddInfoColumn(FORMAT(Text003),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(COMPANYNAME,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text004),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(USERID,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text005),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(TODAY,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text006),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(TIME,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text007),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(STRSUBSTNO('%1, ObjectID: %2',CurrReport.OBJECTID(TRUE),CurrReport.OBJECTID(FALSE)),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text008),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(FORMAT(DateStart),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text009),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(FORMAT(DateEnd),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text010),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(CompressionLevel,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text011),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(CustomerFilter,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text012),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(ContractFilter,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text013),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(ContractGroupFilter,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text014),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(ManagerFilter,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text015),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddInfoColumn(FORMAT(Dim1CodeFilter),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.NewRow;
      ExcelBuffer.AddInfoColumn(FORMAT(Text018),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      IF ContStatusOrderAndInvAllowed THEN
        ExcelBuffer.AddInfoColumn(Text019,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE CreateColumnCaption@1100528801();
    VAR
      QuarterNo@1100528800 : Integer;
    BEGIN
      ColNo := 1;
      RowNo := 1;

      EnterCell(RowNo, ColNo, Text030, TRUE, FALSE, '', '', 0, ExcelBuffer."Cell Type"::Text);
      RowNo += 1;
      EnterCell(RowNo, ColNo, '...' + Text031, TRUE, FALSE, '', '', 0, ExcelBuffer."Cell Type"::Text);
      RowNo += 1;
      EnterCell(RowNo, ColNo, '......' + Text032, TRUE, FALSE, '', '', 0, ExcelBuffer."Cell Type"::Text);
      RowNo += 1;
      EnterCell(RowNo, ColNo, '.........' + Text033, TRUE, FALSE, '', '', 0, ExcelBuffer."Cell Type"::Text);

      ColNo += 1;

      EnterCell(RowNo, ColNo, Text025, TRUE, FALSE, '', '', 0, ExcelBuffer."Cell Type"::Text);

      ColNo += 1;
      FirstBodyColumn := ColNo;

      EnterCell(1, FirstBodyColumn, STRSUBSTNO('PLANNING %1', DATE2DMY(DateEnd, 3)),TRUE,FALSE,'','', 28, ExcelBuffer."Cell Type"::Text);

      //Matrix_Period Caption

      IF CellDateRec.FINDSET THEN BEGIN
        REPEAT
          CASE CellDateRec."Period Type" OF
            CellDateRec."Period Type"::Date:
              BEGIN
                EnterCell(RowNo, ColNo, FORMAT(CellDateRec."Period Start"),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
              END;
            CellDateRec."Period Type"::Week:
              BEGIN
                EnterCell(RowNo, ColNo, STRSUBSTNO('%1 %2','WK', DATE2DWY(CellDateRec."Period Start",2)), TRUE, FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
              END;
            CellDateRec."Period Type"::Month:
              BEGIN
                EnterCell(RowNo, ColNo, STRSUBSTNO('%1 - %2', DATE2DMY(CellDateRec."Period Start",2), DATE2DMY(CellDateRec."Period Start",3)),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
              END;
            CellDateRec."Period Type"::Quarter:
              BEGIN
                CASE DATE2DMY(CellDateRec."Period Start",2) OF
                  1,  2, 3 : QuarterNo := 1;
                  4,  5, 6 : QuarterNo := 2;
                  7 , 8, 9 : QuarterNo := 3;
                  10,11,12 : QuarterNo := 4;
                END;
                EnterCell(RowNo, ColNo, STRSUBSTNO('%1%2 %3', Text034, QuarterNo ,DATE2DMY(CellDateRec."Period Start",3)),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
              END;
            CellDateRec."Period Type"::Year:
              BEGIN
                EnterCell(RowNo, ColNo, STRSUBSTNO('%1',DATE2DMY(CellDateRec."Period Start",3)),TRUE,FALSE,'','', 0, ExcelBuffer."Cell Type"::Text);
              END;
          END;

          IF (CellDateRec."Period Start" <= TODAY)
            AND (CellDateRec."Period End" >= TODAY)
            AND (NOT TodayLineDetermined) THEN BEGIN
              TodayColumn := ColNo;
              TodayLineDetermined := TRUE;
          END;

          ColNo += 1;
        UNTIL (CellDateRec.NEXT = 0) OR (ColNo > 240);
      END;

      RowNo += 1;
      FirstBodyRow := RowNo;
      LastColumn := ColNo-1;
    END;

    LOCAL PROCEDURE CreateWorkBook@1100528804();
    VAR
      FileManagement@1100528802 : Codeunit 419;
    BEGIN
      IF DataSheet = '' THEN
        DataSheet := Text029;

      ExcelBuffer.CreateBook('',DataSheet);
      ExcelBuffer.WriteSheet(Text029, COMPANYNAME, USERID);
      ExcelBuffer.CloseBook;
      FileNameClient := FileManagement.ClientTempFolderName + 'Book1.xlsx';
      ExcelBuffer.MoveFileToClient(FileNameClient);

      ExcelAutomation.InitExcel;
      ExcelAutomation.OpenWorkbook(FileNameClient);
      ExcelAutomation.SetCurrentSheet(DataSheet);
    END;

    PROCEDURE DefinePrintLayout@1210190006();
    VAR
      CompanyInfoRec@1210190000 : Record 79;
      TempBlob@1100525000 : Record 99008535;
      chrlinebreak@1000000000 : Char;
      LeftHeader@1100528801 : Text[1024];
      CenterHeader@1100528802 : Text[1024];
      RightHeader@1100528803 : Text[1024];
      RightHeaderPicture@1100528804 : Text[1024];
    BEGIN
      IF PrintLogo THEN BEGIN
        CompanyInfoRec.GET();
        CompanyInfoRec.CALCFIELDS(Picture);

        IF CompanyInfoRec.Picture.HASVALUE THEN
          IF ISSERVICETIER THEN BEGIN
            TempBlob.Blob := CompanyInfoRec.Picture;
            ThreeTierAutomationMgt.BLOBExport4PS(
              TempBlob, ThreeTierAutomationMgt.ClientTempFolderName + 'logo.bmp', FALSE, FALSE);
          END ELSE BEGIN
            CompanyInfoRec.Picture.EXPORT(TEMPORARYPATH + '\logo.bmp')
          END
        ELSE
          ERROR(Err001);
        IF ISSERVICETIER THEN
          RightHeaderPicture := ThreeTierAutomationMgt.ClientTempFolderName + 'logo.bmp'
        ELSE
          RightHeaderPicture := TEMPORARYPATH + '\logo.bmp';
      END;

      FilterTxt := STRSUBSTNO('%1 %2 %3 %4 %5',
                          ContractFilter,
                          CustomerFilter,
                          ManagerFilter,
                          Dim1CodeFilter,
                          ContractGroupFilter);

      chrlinebreak := 13;

      LeftHeader := STRSUBSTNO(Text026,
                        Text028, FORMAT(TODAY), FORMAT(chrlinebreak),
                        Text010, FORMAT(CompressionLevel), FORMAT(chrlinebreak),
                        Text027, FilterTxt);

      ExcelAutomation.SetHeader(LeftHeader,CenterHeader,RightHeader,RightHeaderPicture);

      ExcelAutomation.SetMargins(-1,-1,2.5,-1,-1,-1,FALSE,FALSE);

      CASE CellDateRec."Period Type" OF
        CellDateRec."Period Type"::Date, CellDateRec."Period Type"::Week:
          ExcelAutomation.PageSetup(8,2,1,5,100,TRUE,FALSE);
        CellDateRec."Period Type"::Month:
          ExcelAutomation.PageSetup(9,2,1,5, 100,TRUE,FALSE);
        CellDateRec."Period Type"::Quarter, CellDateRec."Period Type"::Year:
          ExcelAutomation.PageSetup(9,2,1,100,100,FALSE,FALSE);
      END;
    END;

    LOCAL PROCEDURE DefineCellLayout@1100528803();
    VAR
      ExcelEnumeration@1100528808 : Codeunit 11012375;
      HeaderRangeTxt@1100528805 : Text[30];
      MatrixRangeTxt@1100528804 : Text[30];
      BodyRangeTxt@1100528803 : Text[30];
      SheetRangeTxt@1100528802 : Text[30];
      TodayRangeTxt@1100528801 : Text[30];
      FreezePaneRangeTxt@1100528800 : Text[30];
      TitleRange@1100528809 : Text[30];
    BEGIN
      HeaderRangeTxt := ExcelBuffer.RC2Range(1, 1, FirstBodyRow - 1, LastColumn);
      MatrixRangeTxt := ExcelBuffer.RC2Range(FirstBodyRow, FirstBodyColumn, LastRow, LastColumn);
      FreezePaneRangeTxt := ExcelBuffer.RC2Range(1, FirstBodyColumn, LastRow, LastColumn);
      BodyRangeTxt := ExcelBuffer.RC2Range(FirstBodyRow, 1, LastRow, LastColumn);
      SheetRangeTxt := ExcelBuffer.RC2Range(1, 1, LastRow, LastColumn);
      TitleRange := ExcelBuffer.RC2Range(1, FirstBodyColumn, FirstBodyRow - 2, LastColumn);

      IF TodayColumn > 0 THEN
        TodayRangeTxt := ExcelBuffer.RC2Range(FirstBodyRow, TodayColumn, LastRow, TodayColumn);

      ExcelAutomation.SetHorzAlignmentInRange(MatrixRangeTxt, ExcelEnumeration.XlHAlign_xlHAlignCenter);

      ExcelAutomation.AutoFit(1, 2);

      ExcelAutomation.SetPrintHeader(HeaderRangeTxt);

      ExcelAutomation.FreezePane(ExcelBuffer.RC2Range(FirstBodyRow, FirstBodyColumn, 0, 0));

      ExcelAutomation.SetBordersInRange(MatrixRangeTxt, 2, 1, 1);
      ExcelAutomation.SetBordersInRange(MatrixRangeTxt, 7, 1, 2);
      ExcelAutomation.SetBordersInRange(BodyRangeTxt, 4, 1, 1);
      ExcelAutomation.SetBordersInRange(BodyRangeTxt, 9, 1, 2);
      ExcelAutomation.SetBordersInRange(BodyRangeTxt, 10, 1, 2);

      ExcelAutomation.SetBordersInRange(SheetRangeTxt, 7, 1, 2);

      ExcelAutomation.SetBordersInRange(HeaderRangeTxt, 9, 1, 2);

      ExcelAutomation.SetInteriorColorInRange(HeaderRangeTxt, 'Donkerblauw');
      ExcelAutomation.SetFontColorInRange(HeaderRangeTxt, 'Wit');

      IF TodayColumn > 0 THEN
        ExcelAutomation.SetBordersInRange(TodayRangeTxt, 10, 2, 3);

      ExcelAutomation.MergeCellsInRangeToOneCell(TitleRange);
      ExcelAutomation.SetVerticalAlignmentInRange(TitleRange,ExcelEnumeration.XlVAlign_xlVAlignTop);

      ExcelAutomation.SetCurrentSheet(Text024);
      ExcelAutomation.AutoFit(1, 2);
      ExcelAutomation.SetCurrentSheet(DataSheet);
    END;

    LOCAL PROCEDURE EnterCell@3(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;UnderLine@1004 : Boolean;NumberFormat@1005 : Text[30];FontName@1100485000 : Text[30];FontSize@1100528800 : Integer;CellType@1100525000 : Option);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer."Cell Value as Text" := CellValue;
      ExcelBuffer.Formula := '';
      ExcelBuffer.Bold := Bold;
      ExcelBuffer.Underline := UnderLine;
      ExcelBuffer.NumberFormat := NumberFormat;
      ExcelBuffer.FontName := FontName;
      ExcelBuffer.FontSize := FontSize;
      ExcelBuffer."Cell Type" := CellType;
      ExcelBuffer.INSERT;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

