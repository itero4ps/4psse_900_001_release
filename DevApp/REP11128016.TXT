OBJECT Report 11128016 From Giro Journal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVSE6.00.01 (11206),4PSSE;
  }
  PROPERTIES
  {
    CaptionML=ENU=From Giro Journal;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 4114;    ;DataItem;                    ;
               DataItemTable=Table25;
               DataItemTableView=SORTING(Open,Due Date);
               OnPreDataItem=BEGIN
                               IF Method = 0 THEN
                                 ERROR(BA007);
                               IF GiroType = 0 THEN
                                 ERROR(BA002);
                               IF DueDate2 = 0D THEN
                                 ERROR(BA003);
                               CASE Method OF
                                 Method::"By Due Date":
                                   BEGIN
                                       IF BankAccountNo = '' THEN
                                          ERROR(BA006);
                                   END;
                                 Method::"All by Posting Date":
                                   BEGIN
                                       IF PostingDate = 0D THEN
                                          ERROR(BA001);
                                   END;
                               END;
                               GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                               GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                               IF GenJnlLine.FIND('+') THEN
                                 GenJnlLine.INIT
                               ELSE
                                 CLEAR(GenJnlLine."Line No.");
                               SETRANGE(Open, TRUE);
                               SETFILTER("Due Date", '..%1',DueDate2);
                               SETFILTER("LB Giro Journal No.",'<>0');
                               IF CurrFilter <> '' THEN
                                 SETFILTER("Currency Code",CurrFilter);
                               Window.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
                               NoOfRec := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Remaining Amount");
                                  IF GiroType <> 0 THEN
                                    IF Pack.GET("LB Giro Journal No.") AND (Pack."Giro Type" = GiroType) THEN BEGIN
                                      CASE Method OF
                                        Method::"All by Posting Date":
                                          BEGIN
                                            i += 1;
                                            Window.UPDATE(1,ROUND((i/NoOfRec*10000),1.0));
                                            xGenJnlLine := GenJnlLine;
                                            //>>121012
                                            //GenJnlLine.INIT;
                                            //GenJnlLine."Line No." += 10000;
                                            CLEAR(GenJnlLine);
                                            GenJnlLine.INIT;
                                            GenJnlLine."Journal Template Name" := xGenJnlLine."Journal Template Name";
                                            GenJnlLine."Journal Batch Name" := xGenJnlLine."Journal Batch Name";
                                            GenJnlLine."Line No." := xGenJnlLine."Line No." + 10000;
                                            //<<121012
                                            GenJnlLine.SetUpNewLine(xGenJnlLine,0,TRUE);
                                            GenJnlLine.VALIDATE("Posting Date", PostingDate);
                                            GenJnlLine.VALIDATE("Account Type", GenJnlLine."Account Type"::Vendor);
                                            GenJnlLine.VALIDATE("Account No.", "Vendor No.");
                                            GenJnlLine.VALIDATE("Document Type", "Document Type"::Payment);
                                            IF Positive THEN
                                              GenJnlLine.Description := STRSUBSTNO(BA004,"Document Type","Document No.")
                                            ELSE
                                              GenJnlLine.Description := STRSUBSTNO(BA005,"Document Type","Document No.");
                                            GenJnlLine.VALIDATE("Currency Code","Currency Code");
                                            GenJnlLine.VALIDATE(Amount, -"Remaining Amount");
                                            GenJnlLine.VALIDATE("Applies-to Doc. Type", "Document Type");
                                            GenJnlLine.VALIDATE("Applies-to Doc. No.", "Document No.");
                                            GenJnlLine.VALIDATE("Code for Bank of Sweden", "Code for Bank of Sweden");
                                            GenJnlLine.INSERT;
                                          END;
                                        Method::"By Due Date":
                                          BEGIN
                                            i += 1;
                                            Window.UPDATE(1,ROUND((i/NoOfRec*10000),1.0));
                                            TempGenJnlLine.INIT;
                                            TempGenJnlLine."Line No." += 10000;
                                            TempGenJnlLine."Applies-to Doc. No." := "Document No.";
                                            TempGenJnlLine."Document Type" := "Document Type";
                                            DueDate := "Due Date";
                                            IF DueDate <> 0D THEN
                                              IF (DATE2DWY(DueDate,1) IN [6,7]) THEN
                                                DueDate := CALCDATE(STRSUBSTNO('<+%1D>',8 - DATE2DWY(DueDate,1)),DueDate);
                                            TempGenJnlLine."Posting Date" := DueDate;
                                            TempGenJnlLine."LB Ledger Entry No." := "Entry No.";
                                            TempGenJnlLine.INSERT;
                                          END;
                                        END;
                                    END;
                                END;

               OnPostDataItem=BEGIN
                                IF Method = Method::"By Due Date" THEN BEGIN
                                  CLEAR(TotAmount);
                                  Window.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
                                  NoOfRec := TempGenJnlLine.COUNT;
                                  TempGenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date");

                                  IF TempGenJnlLine.FIND('-') THEN BEGIN
                                    REPEAT
                                      i += 1;
                                      Window.UPDATE(1,ROUND((i/NoOfRec*10000),1.0));
                                      WITH VendLedgerEntry DO BEGIN
                                        GET(TempGenJnlLine."LB Ledger Entry No.");
                                        IF (SavePostDate <> 0D) AND (SavePostDate <> TempGenJnlLine."Posting Date") THEN
                                          BalAccount;
                                        IF (SavePostDate <> TempGenJnlLine."Posting Date") THEN
                                          SavePostDate := TempGenJnlLine."Posting Date";
                                        xGenJnlLine := GenJnlLine;
                                        //>>121012
                                        //GenJnlLine.INIT;
                                        //GenJnlLine."Line No." += 10000;
                                        CLEAR(GenJnlLine);
                                        GenJnlLine.INIT;
                                        GenJnlLine."Journal Template Name" := xGenJnlLine."Journal Template Name";
                                        GenJnlLine."Journal Batch Name" := xGenJnlLine."Journal Batch Name";
                                        GenJnlLine."Line No." := xGenJnlLine."Line No." + 10000;
                                        //<<121012
                                        GenJnlLine.SetUpNewLine(xGenJnlLine,0,TRUE);
                                        GenJnlLine.VALIDATE("Posting Date",TempGenJnlLine."Posting Date");
                                        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::Vendor);
                                        GenJnlLine.VALIDATE("Account No.","Vendor No.");
                                        GenJnlLine.VALIDATE("Document Type","Document Type"::Payment);
                                        IF Positive THEN
                                          GenJnlLine.Description := STRSUBSTNO(BA004,"Document Type","Document No.")
                                        ELSE
                                          GenJnlLine.Description := STRSUBSTNO(BA005,"Document Type","Document No.");
                                        GenJnlLine.VALIDATE("Currency Code","Currency Code");
                                        CALCFIELDS("Remaining Amount");
                                        GenJnlLine.VALIDATE(Amount,-"Remaining Amount");
                                        GenJnlLine.VALIDATE("Applies-to Doc. Type","Document Type");
                                        GenJnlLine.VALIDATE("Applies-to Doc. No.","Document No.");
                                        GenJnlLine.VALIDATE("Code for Bank of Sweden","Code for Bank of Sweden");
                                        GenJnlLine.INSERT;
                                        TotAmount += CalcBalanceAmount;
                                      END;
                                    UNTIL TempGenJnlLine.NEXT = 0;
                                    BalAccount;
                                  END;
                                END;
                                Window.CLOSE;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1070000;2;Field     ;
                  CaptionML=ENU=LB Giro Type;
                  OptionCaptionML=ENU=" ,BG Sweden,PG Sweden,BG Foreign,PG Foreign";
                  SourceExpr=GiroType }

      { 1070002;2;Field     ;
                  CaptionML=ENU=Due Date;
                  SourceExpr=DueDate2 }

      { 1070004;2;Field     ;
                  CaptionML=ENU=Method;
                  OptionCaptionML=ENU=" ,By Due Date,All by Posting Date ";
                  SourceExpr=Method }

      { 1070006;2;Field     ;
                  CaptionML=ENU=Account Type;
                  OptionCaptionML=ENU=G/L Account,,,Bank Account;
                  SourceExpr=AccountType;
                  OnValidate=BEGIN
                               CLEAR(BankAccountNo);
                               CLEAR(CurrFilter);
                             END;
                              }

      { 1070008;2;Field     ;
                  CaptionML=ENU=Account No;
                  SourceExpr=BankAccountNo;
                  OnValidate=BEGIN
                               CASE AccountType OF
                                 AccountType::"G/L Account":
                                   BEGIN
                                     IF BankAccountNo <> '' THEN
                                       GLAccount.GET(BankAccountNo);
                                   END;
                                 AccountType::"Bank Account":
                                   BEGIN
                                     IF BankAccountNo <> '' THEN BEGIN
                                       BankAccount.GET(BankAccountNo);
                                       IF BankAccount."Currency Code" <> '' THEN
                                         CurrFilter := BankAccount."Currency Code";
                                     END ELSE
                                       CLEAR(CurrFilter);
                                   END;
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE AccountType OF
                               AccountType::"G/L Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,GLAccount) = ACTION::LookupOK THEN
                                     BankAccountNo := GLAccount."No.";
                                 END;
                               AccountType::"Bank Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,BankAccount) = ACTION::LookupOK THEN
                                     BankAccountNo := BankAccount."No.";
                                   BankAccount.GET(BankAccountNo);
                                   IF BankAccount."Currency Code" <> '' THEN
                                     CurrFilter := BankAccount."Currency Code";
                                 END;
                             END;
                           END;
                            }

      { 1070010;2;Field     ;
                  CaptionML=ENU=Currency Filter;
                  SourceExpr=CurrFilter;
                  TableRelation=Currency }

      { 1070012;2;Field     ;
                  CaptionML=ENU=Posting Date;
                  SourceExpr=PostingDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      GiroType@1070000 : ' ,BG Sweden,PG Sweden,BG Foreign,PG Foreign';
      DueDate2@1070001 : Date;
      VendLedgerEntry@1070002 : Record 25;
      GenJnlLine@1070003 : Record 81;
      xGenJnlLine@1070004 : Record 81;
      Pack@1070005 : Record 11128016;
      BA001@1070020 : TextConst 'ENU=Enter the posting date';
      BA002@1070021 : TextConst 'ENU=Enter the LB giro type';
      BA003@1070022 : TextConst 'ENU=Enter the due date';
      BA004@1070023 : TextConst 'ENU=Deduction for %1 %2';
      BA005@1070024 : TextConst 'ENU=Payment for %1 %2';
      TempGenJnlLine@1070006 : TEMPORARY Record 81;
      SavePostDate@1070007 : Date;
      TotAmount@1070008 : Decimal;
      GLAccount@1070009 : Record 15;
      BankAccount@1070010 : Record 270;
      DueDate@1070011 : Date;
      Window@1070012 : Dialog;
      i@1070013 : Integer;
      BA006@1070025 : TextConst 'ENU=Enter the bank account number';
      Method@1070014 : ' ,By Due Date,All by Posting Date';
      PostingDate@1070015 : Date;
      BA007@1070026 : TextConst 'ENU=Enter the method';
      AccountType@1070016 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      BankAccountNo@1070017 : Code[20];
      NoOfRec@1070018 : Integer;
      CurrFilter@1070019 : Code[10];

    PROCEDURE SetGenJnlLine@1070001(NewGLJnlLine@1000 : Record 81);
    BEGIN
      GenJnlLine := NewGLJnlLine;
    END;

    PROCEDURE BalAccount@1070002();
    BEGIN
      xGenJnlLine := GenJnlLine;
      GenJnlLine.INIT;
      GenJnlLine."Line No." += 10000;
      GenJnlLine.SetUpNewLine(xGenJnlLine,0,TRUE);
      GenJnlLine.VALIDATE("Account Type",AccountType);
      GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
      GenJnlLine.VALIDATE("Account No.",BankAccountNo);
      GenJnlLine.VALIDATE("Posting Date",SavePostDate);
      GenJnlLine.VALIDATE(Amount,-TotAmount);
      GenJnlLine.INSERT;
      CLEAR(TotAmount);
    END;

    PROCEDURE CalcBalanceAmount@1070000() BalanceAmount : Decimal;
    VAR
      CurrExchRate@1070000 : Record 330;
    BEGIN
      IF (BankAccount."No." = '') AND (AccountType = AccountType::"Bank Account") THEN
        BankAccount.GET(BankAccountNo);
      IF (AccountType = AccountType::"G/L Account") OR
        ((AccountType = AccountType::"Bank Account") AND (BankAccount."Currency Code" = '')) THEN BEGIN
        IF GenJnlLine."Currency Code" <> '' THEN
          BalanceAmount := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
      //**4PSSE
      //        SavePostDate,GenJnlLine."Currency Code",GenJnlLine.Amount,
      //        CurrExchRate.ExchangeRate(SavePostDate,GenJnlLine."Currency Code")))
              0,'',SavePostDate,GenJnlLine."Currency Code",GenJnlLine.Amount,
              CurrExchRate.ExchangeRate(0,'',SavePostDate,GenJnlLine."Currency Code",TRUE),TRUE))
      //**4PSSE
        ELSE
          BalanceAmount := GenJnlLine.Amount;
        END ELSE IF (AccountType = AccountType::"Bank Account") AND (BankAccount."Currency Code" <> '') THEN BEGIN
          IF GenJnlLine."Currency Code" <> '' THEN BEGIN
            IF (GenJnlLine."Currency Code" <> BankAccount."Currency Code") THEN
              BalanceAmount := ROUND(
                CurrExchRate.ExchangeAmtFCYToFCY(
      //**4PSSE
      //            SavePostDate,GenJnlLine."Currency Code",BankAccount."Currency Code", GenJnlLine.Amount))
                  SavePostDate,GenJnlLine."Currency Code",BankAccount."Currency Code", GenJnlLine.Amount,TRUE))
      //**4PSSE
            ELSE
              BalanceAmount := GenJnlLine.Amount;
          END ELSE BEGIN
            BalanceAmount := ROUND(
              CurrExchRate.ExchangeAmtLCYToFCY(
      //**4PSSE
      //          SavePostDate,BankAccount."Currency Code",GenJnlLine.Amount,
      //          CurrExchRate.ExchangeRate(SavePostDate,BankAccount."Currency Code")));
                0,'',SavePostDate,BankAccount."Currency Code",GenJnlLine.Amount,
                CurrExchRate.ExchangeRate(0,'',SavePostDate,BankAccount."Currency Code",TRUE),TRUE));
      //**4PSSE
          END;
      END;
    END;

    BEGIN
    {
      4PSSE
      Adjusted call to function ExchangeRate in table CurrencyExchangeRate.

      Itero
      GenJnlLine must be cleared before appilibg creditmemos due to 4PS functions in GenJnlLine."Applies-to Doc. No."
    }
    END.
  }
  RDLDATA
  {
  }
}

