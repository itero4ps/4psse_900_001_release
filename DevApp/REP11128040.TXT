OBJECT Report 11128040 Copy Cust. Obj Sales Price
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CostObjectCode := 'COSTOBJECT';
                 END;

  }
  DATASET
  {
    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               ReqFilterHeadingML=ENU=To Customer;
               OnPreDataItem=BEGIN
                               NoOfUpdates := 0;

                               IF NewStartingDate = 0D THEN
                                 ERROR(Text003);

                               // If FromCustNo and ToCustomer are empty then show error.
                               ToCustFilter := GETFILTER("No.");
                               IF (FromCustNo = '') AND (ToCustFilter = '') THEN
                                 ERROR(Text002);

                               // If "From Customer" is empty then copy values from the base price table.
                               // Otherwise copy within the same table.
                               IF FromCustNo = '' THEN
                                 UseBasePriceTable := TRUE
                               ELSE
                                 UseBasePriceTable := FALSE;

                               // If "To Customer" is empty then use the FromCustNo as both the source and destination.
                               IF ToCustFilter = '' THEN
                                 SETRANGE("No.",FromCustNo);

                               // Gather entries in CostObjectBuffer
                               CostObjectBuffer.DELETEALL;

                               IF UseBasePriceTable THEN BEGIN

                                 //////////////////////////////////////////////
                                 // From Base table
                                 IF CostObjectSalesPrice.FINDSET THEN REPEAT
                                   IF NOT CostObjectBuffer.GET(CostObjectCode,CostObjectSalesPrice."Cost Object") THEN BEGIN
                                     CostObjectBuffer.INIT;
                                     CostObjectBuffer."Dimension Code" := CostObjectCode;
                                     CostObjectBuffer.Code := CostObjectSalesPrice."Cost Object";
                                     CostObjectBuffer.INSERT;
                                   END;
                                 UNTIL CostObjectSalesPrice.NEXT = 0;


                               END ELSE BEGIN

                                 //////////////////////////////////////////////
                                 // From within same table
                                 IF From_CustCostObjectSalesPrice.FINDSET THEN REPEAT

                                   IF NOT CostObjectBuffer.GET(CostObjectCode,From_CustCostObjectSalesPrice."Cost Object") THEN BEGIN
                                     CostObjectBuffer.INIT;
                                     CostObjectBuffer."Dimension Code" := CostObjectCode;
                                     CostObjectBuffer.Code := From_CustCostObjectSalesPrice."Cost Object";
                                     CostObjectBuffer.INSERT;
                                   END;
                                 UNTIL From_CustCostObjectSalesPrice.NEXT = 0;

                               END;

                               // Empty destination buffer table
                               CustCostObjectSalesPriceBuffer.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  // For each "To Customer" insert the last entry of each CostObject.
                                  IF UseBasePriceTable THEN BEGIN

                                    //////////////////////////////////////////////
                                    // From Base price table
                                    CostObjectSalesPrice.RESET;
                                    CostObjectBuffer.RESET;

                                    IF CostObjectBuffer.FINDSET THEN REPEAT

                                      // Get the latest price
                                      CostObjectSalesPrice.SETRANGE("Cost Object",CostObjectBuffer.Code);
                                      IF CostObjectSalesPrice.FINDLAST THEN BEGIN

                                        // Insert new line with new date and price in the buffer
                                        CustCostObjectSalesPriceBuffer.INIT;
                                        CustCostObjectSalesPriceBuffer.VALIDATE("Customer No.","No.");
                                        CustCostObjectSalesPriceBuffer.VALIDATE("Cost Object",CostObjectBuffer.Code);
                                        CustCostObjectSalesPriceBuffer.VALIDATE("Starting Date",NewStartingDate);

                                        CASE UpdateOption OF
                                        UpdateOption::"Fixed Amount":
                                          NewAmount := CostObjectSalesPrice."Sales Price" + NewValue;
                                        UpdateOption::Percent:
                                          NewAmount := CostObjectSalesPrice."Sales Price" * ((100 + NewValue) / 100);
                                        END;

                                        IF RoundAmount <> 0 THEN
                                          NewAmount := ROUND(NewAmount, RoundAmount)
                                        ELSE
                                          NewAmount := ROUND(NewAmount, 0.01);

                                        IF NewAmount < 0 THEN
                                          IF NOT CONFIRM(STRSUBSTNO(Text001,
                                            NewAmount,
                                            CustCostObjectSalesPriceBuffer."Customer No.",
                                            CustCostObjectSalesPriceBuffer."Cost Object")) THEN
                                            ERROR(Text007);

                                        CustCostObjectSalesPriceBuffer.VALIDATE("Sales Price",NewAmount);
                                        CustCostObjectSalesPriceBuffer.INSERT;

                                      END;

                                    UNTIL CostObjectBuffer.NEXT = 0;

                                  END ELSE BEGIN

                                    //////////////////////////////////////////////
                                    // From within the same table
                                    From_CustCostObjectSalesPrice.RESET;
                                    CostObjectBuffer.RESET;

                                    IF CostObjectBuffer.FINDSET THEN REPEAT

                                      // Get the latest price
                                      From_CustCostObjectSalesPrice.SETRANGE("Customer No.",FromCustNo);
                                      From_CustCostObjectSalesPrice.SETRANGE("Cost Object",CostObjectBuffer.Code);
                                      IF From_CustCostObjectSalesPrice.FINDLAST THEN BEGIN

                                        // Insert new line with new date and price in the buffer
                                        // The buffer is used so that no lines are inserting to the table in the loop
                                        // and interrupting the last find price
                                        CustCostObjectSalesPriceBuffer.INIT;
                                        CustCostObjectSalesPriceBuffer.VALIDATE("Customer No.","No.");
                                        CustCostObjectSalesPriceBuffer.VALIDATE("Cost Object",CostObjectBuffer.Code);
                                        CustCostObjectSalesPriceBuffer.VALIDATE("Starting Date",NewStartingDate);

                                        CASE UpdateOption OF
                                        UpdateOption::"Fixed Amount":
                                          NewAmount := From_CustCostObjectSalesPrice."Sales Price" + NewValue;
                                        UpdateOption::Percent:
                                          NewAmount := From_CustCostObjectSalesPrice."Sales Price" * ((100 + NewValue) / 100);
                                        END;

                                        IF RoundAmount <> 0 THEN
                                          NewAmount := ROUND(NewAmount, RoundAmount)
                                        ELSE
                                          NewAmount := ROUND(NewAmount, 0.01);

                                        IF NewAmount < 0 THEN
                                          IF NOT CONFIRM(STRSUBSTNO(Text001,
                                            NewAmount,
                                            CustCostObjectSalesPriceBuffer."Customer No.",
                                            CustCostObjectSalesPriceBuffer."Cost Object")) THEN
                                            ERROR(Text007);

                                        CustCostObjectSalesPriceBuffer.VALIDATE("Sales Price",NewAmount);
                                        CustCostObjectSalesPriceBuffer.INSERT;

                                      END;

                                    UNTIL CostObjectBuffer.NEXT = 0;

                                  END;
                                END;

               OnPostDataItem=BEGIN
                                // Update the real table from the buffer
                                CustCostObjectSalesPriceBuffer.RESET;
                                IF CustCostObjectSalesPriceBuffer.FINDSET THEN REPEAT
                                  To_CustCostObjectSalesPrice.SETRANGE("Customer No.",CustCostObjectSalesPriceBuffer."Customer No.");
                                  To_CustCostObjectSalesPrice.SETRANGE("Cost Object",CustCostObjectSalesPriceBuffer."Cost Object");
                                  To_CustCostObjectSalesPrice.SETRANGE("Starting Date",CustCostObjectSalesPriceBuffer."Starting Date");
                                  IF NOT To_CustCostObjectSalesPrice.FINDFIRST THEN BEGIN

                                    To_CustCostObjectSalesPrice.VALIDATE("Customer No.",CustCostObjectSalesPriceBuffer."Customer No.");
                                    To_CustCostObjectSalesPrice.VALIDATE("Cost Object",CustCostObjectSalesPriceBuffer."Cost Object");
                                    To_CustCostObjectSalesPrice.VALIDATE("Starting Date",CustCostObjectSalesPriceBuffer."Starting Date");
                                    To_CustCostObjectSalesPrice.VALIDATE("Sales Price",CustCostObjectSalesPriceBuffer."Sales Price");
                                    To_CustCostObjectSalesPrice.INSERT(TRUE);
                                    NoOfUpdates += 1;
                                  END;

                                UNTIL CustCostObjectSalesPriceBuffer.NEXT = 0;

                                MESSAGE(Text006,NoOfUpdates);
                              END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100285001;;Container;
                  CaptionML=ENU=Options;
                  ContainerType=ContentArea }

      { 1100285000;1;Field  ;
                  CaptionML=ENU=Update Option;
                  OptionCaptionML=ENU=Fixed Amount,Percent;
                  SourceExpr=UpdateOption }

      { 1100285005;1;Field  ;
                  CaptionML=ENU=From Cust. No.;
                  SourceExpr=FromCustNo;
                  TableRelation=Customer;
                  OnValidate=BEGIN
                               IF FromCustNo <> '' THEN BEGIN
                                 From_CustCostObjectSalesPrice.SETRANGE("Customer No.",FromCustNo);
                                 IF NOT From_CustCostObjectSalesPrice.FINDLAST THEN
                                   ERROR(STRSUBSTNO(Text005,FromCustNo));
                               END;
                             END;
                              }

      { 1100285004;1;Field  ;
                  CaptionML=ENU=Update w. Amount/Percentage;
                  SourceExpr=NewValue }

      { 1100285003;1;Field  ;
                  CaptionML=ENU=Round Amount;
                  SourceExpr=RoundAmount }

      { 1100285002;1;Field  ;
                  CaptionML=ENU=New Starting Date;
                  SourceExpr=NewStartingDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      From_CustCostObjectSalesPrice@1100285002 : Record 11012080;
      CustCostObjectSalesPriceBuffer@1100285013 : TEMPORARY Record 11012080;
      To_CustCostObjectSalesPrice@1100285000 : Record 11012080;
      CostObjectSalesPrice@1100285016 : Record 11020351;
      CostObjectBuffer@1100285011 : TEMPORARY Record 349;
      ToCustFilter@1100285015 : Text[250];
      FromCustNo@1100285009 : Code[20];
      CostObjectCode@1100285012 : Code[20];
      UpdateOption@1100285006 : 'Fixed Amount,Percent';
      NoOfUpdates@1100285018 : Integer;
      NewAmount@1100285007 : Decimal;
      NewValue@1100285005 : Decimal;
      RoundAmount@1100285008 : Decimal;
      NewStartingDate@1100285001 : Date;
      Text001@1100285003 : TextConst 'ENU=There will be a negative amount (%1) for Customer No. %2, Cost Object %3. Would you like to proceed anyway?';
      Text002@1100285010 : TextConst 'ENU=From Cust. No. cannot be blank if To Customer No. is blank.';
      Text003@1100285014 : TextConst 'ENU=New Starting Date must not be blank.';
      Text005@1100285004 : TextConst 'ENU=There is no information for Customer No. %1 in the table.';
      UseBasePriceTable@1100285017 : Boolean;
      Text006@1100285019 : TextConst 'ENU=%1 new line(s) were inserted.';
      Text007@1100285020 : TextConst 'ENU=The operation was aborted.';

    BEGIN
    {
      4PSSE
      130814 ITERO.LP New ProcessingOnly report to copy data.
      130908 ITERO.LP Small adjustment to variable.
    }
    END.
  }
  RDLDATA
  {
  }
}

