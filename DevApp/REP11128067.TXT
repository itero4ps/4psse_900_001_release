OBJECT Report 11128067 VP pain002 Feedback Satus
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE6.03.04 (12048864);
  }
  PROPERTIES
  {
    CaptionML=ENU=pain002 Feedback Satus;
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   ReadFile;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  Name=Cont;
                  ContainerType=ContentArea }

      { 1100570001;1;Group  ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 12047958;2;Field    ;
                  CaptionML=ENU=File Name;
                  SourceExpr=gFileName;
                  OnAssistEdit=BEGIN
                                 gFileName := gFileMgt.OpenFileDialog(PEB004,gFileName,PEB003);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      gFileName@12047960 : Text;
      PEB001@12047961 : TextConst 'ENU=All items are approved';
      PEB002@12047962 : TextConst 'ENU=One or more records are incorrect';
      PEB003@1070000 : TextConst 'ENU=All files|*.*|TXT-files (*.txt)|*.txt|XML-files (*.xml)|*.xml';
      PEB004@1000000008 : TextConst 'ENU=Import pain002';
      gFileMgt@12047958 : Codeunit 419;
      PEB010@12047959 : TextConst 'ENU=There is no %1  match with %2, % 3';

    LOCAL PROCEDURE ReadFile@12047960();
    VAR
      XMLReader@12047958 : Codeunit 11128078;
      DocNode@12047959 : Integer;
      DocNode2@12047962 : Integer;
      ServerFileName@12047960 : Text;
      FileMgt@12047961 : Codeunit 419;
      VPPack@12047963 : Record 11128016;
      VPPackEntry@12047964 : Record 11128063;
      MsgId@12047965 : Text;
      OrgnlPmtInfId@12047966 : Text;
      Status@12047967 : ' ,Rejected,OK';
    BEGIN

      ServerFileName := FileMgt.UploadFileSilent(gFileName);

      XMLReader.SetNameSpace('x','urn:iso:std:iso:20022:tech:xsd:pain.002.001.03');

      DocNode := XMLReader.LoadFromFile(ServerFileName,'/x:Document/x:CstmrPmtStsRpt');

      WHILE XMLReader.GetNextNode(DocNode) DO BEGIN
        MsgId := XMLReader.GetValue(DocNode, 'x:OrgnlGrpInfAndSts/x:OrgnlMsgId');
        VPPack.RESET;
        VPPack.SETRANGE("SEPA Reference",MsgId);
        IF NOT VPPack.FINDSET THEN
          ERROR(PEB010,VPPack.TABLECAPTION,VPPack.FIELDCAPTION("SEPA Reference"),MsgId);

        // Clear old information
        VPPackEntry.RESET;
        VPPackEntry.SETRANGE("Pack Entry No.",VPPack."Entry No.");
        IF VPPackEntry.FINDSET THEN REPEAT
          VPPackEntry."Bank Status" := '';
          VPPackEntry."Bank Staus Code" := '';
          VPPackEntry."Bank Information" := '';
          VPPackEntry.MODIFY;
        UNTIL VPPackEntry.NEXT = 0;

        DocNode2 := XMLReader.SelectNodes(DocNode,'x:OrgnlPmtInfAndSts/x:TxInfAndSts');
        WHILE XMLReader.GetNextNode(DocNode2) DO BEGIN
          OrgnlPmtInfId := XMLReader.GetValue(DocNode2, 'x:OrgnlEndToEndId');

          // Update with new Information
          VPPackEntry.RESET;
          VPPackEntry.SETRANGE("Pack Entry No.",VPPack."Entry No.");
          VPPackEntry.SETRANGE("SEPA Line Reference",OrgnlPmtInfId);
          VPPackEntry.FINDSET;
          VPPackEntry."Bank Status" := XMLReader.GetValue(DocNode2, 'x:TxSts');
          IF Status <> Status::Rejected THEN
            IF VPPackEntry."Bank Status" = 'ACCP' THEN
              Status := Status::OK
            ELSE
              Status := Status::Rejected;
          VPPackEntry."Bank Staus Code" := XMLReader.GetValue(DocNode2, 'x:StsRsnInf/x:Rsn/x:Cd');
          VPPackEntry."Bank Information" := COPYSTR(XMLReader.GetValue(DocNode2, 'x:StsRsnInf/x:AddtlInf'),1,150);
          VPPackEntry.MODIFY;
        END;
      END;

      CASE Status OF
        Status::OK: MESSAGE(PEB001);
        Status::Rejected: MESSAGE(PEB002);
      END;
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0065 BG-Max
      PEB
      PEB *** End ***
    }
    END.
  }
  RDLDATA
  {
  }
}

