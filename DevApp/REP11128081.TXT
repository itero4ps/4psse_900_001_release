OBJECT Report 11128081 Create Prognosis
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1100285000;;DataItem;                  ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN

                                  IF ProgDate=0D THEN
                                    ERROR('Prognosdatum mste fyllas i');
                                  IF Job.COUNT>1 THEN
                                    ERROR('Kan inte skapa prognos fr mer n ett projekt t gngen');

                                  IF CONFIRM('Skapa prognos?') THEN BEGIN

                                    PrognosisRec.INIT;
                                    PrognosisRec.VALIDATE("Project No.",Job."No.");
                                    PrognosisRec.VALIDATE("Prognosis Date",ProgDate);
                                    PrognosisRec.INSERT(TRUE);

                                    ProjectDetail.SETRANGE("Project No.",Job."No.");
                                    ProjectDetail.SETFILTER("New Prognosis Amount",'<>0');
                                    ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
                                    ProjectDetail.SETRANGE(UserID,USERID);
                                    ProjectDetail.SETRANGE("Sum Quantity",TRUE);
                                    //ProjectDetail.SETCURRENTKEY("Sum Quantity");
                                    IF ProjectDetail.FINDSET THEN BEGIN REPEAT
                                    //  IF ProjectDetail."Sum Line"= TRUE THEN
                                    //    ERROR('Kan ej ange prognos p summeringsrad (%1)',ProjectDetail.Caption);
                                    //  IF NOT DV.GET('KOSTNADSOBJEKT',ProjectDetail."Prognosis Cost Object") THEN
                                    //    ERROR('Kan ej ange prognos p rad %1',ProjectDetail.Caption);
                                      CLEAR(PrognosisLine);
                                      PrognosisLine.SETRANGE("Project No.",Job."No.");
                                      PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
                                      PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
                                      IF PrognosisLine.FINDFIRST THEN BEGIN
                                        IF ProjectDetail."Sum Quantity" = TRUE THEN
                                          PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."New Prognosis Amount")
                                        ELSE
                                          PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
                                          PrognosisLine.MODIFY(TRUE);
                                          ProjectDetail2:=ProjectDetail;
                                          ProjectDetail2."New Prognosis Amount":=0;
                                          ProjectDetail2.MODIFY(TRUE);

                                      END ELSE BEGIN
                                        CLEAR(PrognosisLine);
                                        PrognosisLine.INIT;
                                        PrognosisLine.VALIDATE("Project No.",Job."No.");
                                        PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
                                        DV.GET('KOSTNADSOBJEKT',ProjectDetail."Prognosis Cost Object");
                                        PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
                                        PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
                                        PrognosisLine.INSERT(TRUE);

                                        IF ProjectDetail."Sum Quantity"=TRUE THEN BEGIN
                                          PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."New Prognosis Amount");
                                        END ELSE BEGIN
                                          IF DV."Cost Type"=DV."Cost Type"::Revenue THEN
                                            PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."New Prognosis Amount"-PrognosisLine.Invoiced)
                                          ELSE
                                            PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
                                        END;
                                        PrognosisLine.Comment := ProjectDetail.Comment;
                                        PrognosisLine.MODIFY(TRUE);
                                        ProjectDetail.Comment := '';
                                        ProjectDetail2:=ProjectDetail;
                                        IF PrognosisLine.Comment <> '' THEN
                                          ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
                                        ProjectDetail2."New Prognosis Amount":=0;

                                        ProjectDetail2.MODIFY(TRUE);
                                      END;
                                    UNTIL ProjectDetail.NEXT=0;
                                    END;
                                    CLEAR(ProjectDetail);
                                    ProjectDetail.SETRANGE("Project No.",Job."No.");
                                    ProjectDetail.SETFILTER("New Prognosis Amount",'<>0');
                                    ProjectDetail.SETFILTER("Prognosis Cost Object",'<>%1','');
                                    ProjectDetail.SETRANGE(UserID,USERID);
                                    ProjectDetail.SETRANGE("Sum Quantity",FALSE);
                                    //ProjectDetail.SETCURRENTKEY("Sum Quantity");
                                    IF ProjectDetail.FINDSET THEN BEGIN REPEAT
                                    //  IF ProjectDetail."Sum Line"= TRUE THEN
                                    //    ERROR('Kan ej ange prognos p summeringsrad (%1)',ProjectDetail.Caption);
                                    //  IF NOT DV.GET('KOSTNADSOBJEKT',ProjectDetail."Prognosis Cost Object") THEN
                                    //    ERROR('Kan ej ange prognos p rad %1',ProjectDetail.Caption);
                                      CLEAR(PrognosisLine);
                                      PrognosisLine.SETRANGE("Project No.",Job."No.");
                                      PrognosisLine.SETRANGE("Prognosis Date",ProgDate);
                                      PrognosisLine.SETRANGE("Cost Object",ProjectDetail."Prognosis Cost Object");
                                      IF PrognosisLine.FINDFIRST THEN BEGIN
                                        IF ProjectDetail."Sum Quantity" = TRUE THEN
                                          PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."New Prognosis Amount")
                                        ELSE
                                          PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
                                          PrognosisLine.MODIFY(TRUE);
                                          ProjectDetail2:=ProjectDetail;
                                          ProjectDetail2."New Prognosis Amount":=0;
                                          ProjectDetail2.MODIFY(TRUE);

                                      END ELSE BEGIN
                                        CLEAR(PrognosisLine);
                                        PrognosisLine.INIT;
                                        PrognosisLine.VALIDATE("Project No.",Job."No.");
                                        PrognosisLine.VALIDATE("Prognosis Date",ProgDate);
                                        DV.GET('KOSTNADSOBJEKT',ProjectDetail."Prognosis Cost Object");
                                        PrognosisLine.VALIDATE("Cost Type",DV."Cost Type");
                                        PrognosisLine.VALIDATE("Cost Object",ProjectDetail."Prognosis Cost Object");
                                        PrognosisLine.INSERT(TRUE);

                                        IF ProjectDetail."Sum Quantity"=TRUE THEN BEGIN
                                          PrognosisLine.VALIDATE("Prognosis Total Hours",ProjectDetail."New Prognosis Amount");
                                        END ELSE BEGIN
                                          IF DV."Cost Type"=DV."Cost Type"::Revenue THEN
                                            PrognosisLine.VALIDATE("Amount Revenue",ProjectDetail."New Prognosis Amount"-PrognosisLine.Invoiced)
                                          ELSE
                                            PrognosisLine.VALIDATE("Prognosis Total Cost",ProjectDetail."New Prognosis Amount");
                                        END;
                                        PrognosisLine.Comment := ProjectDetail.Comment;
                                        PrognosisLine.MODIFY(TRUE);
                                        ProjectDetail.Comment := '';
                                        ProjectDetail2:=ProjectDetail;
                                        IF PrognosisLine.Comment <> '' THEN
                                          ProjectDetail2."Prognosis comment" := PrognosisLine.Comment;
                                        ProjectDetail2."New Prognosis Amount":=0;

                                        ProjectDetail2.MODIFY(TRUE);
                                      END;
                                    UNTIL ProjectDetail.NEXT=0;

                                    END;
                                  END;// ELSE
                                    //EXIT;
                                END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100285000;;Container;
                  Name=Options;
                  ContainerType=ContentArea }

      { 1100285001;1;Field  ;
                  Name=Prognosdatum;
                  NotBlank=Yes;
                  SourceExpr=ProgDate;
                  Importance=Promoted }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ProgDate@1100285000 : Date;
      ProjectDetail@1100285001 : Record 11128083;
      PrognosisRec@1100285002 : Record 11012034;
      PrognosisLine@1100285003 : Record 11012035;
      DV@1100285004 : Record 349;
      ProjectDetail2@1100285005 : Record 11128083;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

