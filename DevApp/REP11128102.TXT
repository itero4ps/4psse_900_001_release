OBJECT Report 11128102 Invoices with ROT File
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    CaptionML=ENU=Invoices with ROT;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   SalesRecSetup.GET();
                   LastSent := SalesRecSetup."ROT Application Last Sent";
                   LastApplicationNo := SalesRecSetup."ROT Application No.";
                   ApplicationNo := LastApplicationNo + 1;
                 END;

    OnPreReport=BEGIN

                  FileObj.CREATETEMPFILE;
                  FileObj.CREATEOUTSTREAM(OutStreamObj);

                  xmldoc := xmldoc.XmlDocument();

                  // Create SOAP Envelope
                  XmlProcessingInstruction := xmldoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
                  xmldoc.AppendChild(XmlProcessingInstruction);

                  NameSpaceHtko := 'http://xmls.skatteverket.se/se/skatteverket/ht/komponent/begaran/3.0';
                  NameSpaceBegaran := 'http://xmls.skatteverket.se/se/skatteverket/ht/begaran/3.0';

                  soapEnvelope := xmldoc.CreateElement('a', 'Begaran', NameSpaceBegaran);
                  soapEnvelope.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
                  soapEnvelope.SetAttribute('xmlns:htko', NameSpaceHtko);

                  xmldoc.AppendChild(soapEnvelope);
                  XmlElement := xmldoc.CreateElement('htko', 'BegaranNr', NameSpaceHtko);
                  xmlTextNode := xmldoc.CreateTextNode(FORMAT(ApplicationNo));
                  XmlElement.AppendChild(xmlTextNode);
                  soapEnvelope.AppendChild(XmlElement);

                  soapBody := xmldoc.CreateElement('htko', 'RotBegaran', NameSpaceHtko);
                  soapEnvelope.AppendChild(soapBody);

                  NoOfApplications := 0;
                END;

    OnPostReport=BEGIN

                   IF (NoOfApplications = 0) THEN BEGIN
                      MESSAGE(txtNoXMLCreated);
                      CurrReport.QUIT;
                   END;
                   SalesRecSetup.GET();
                   SalesRecSetup."ROT Application Last Sent" := CURRENTDATETIME;
                   SalesRecSetup."ROT Application No." := ApplicationNo;
                   SalesRecSetup.MODIFY();

                   xmldoc.Save(OutStreamObj);

                   IF (gWrongPersNo <> '') THEN                    // IME417
                      MESSAGE(txtWrongPersNoFound, gWrongPersNo);  // IME417


                   FileObj.CREATEINSTREAM(InStreamObj);
                   ToFile:='rot' + FORMAT(ApplicationNo) + '.xml';
                      // Transfer the content from the temporary file on the NAV server to a
                      // file on the RoleTailored client.
                      DOWNLOADFROMSTREAM(
                      InStreamObj,
                      'Save ROT-file',
                      '',
                      'XML File *.xml| *.xml',
                       ToFile);
                      // Close the temporary file and delete it from NAV server.
                   FileObj.CLOSE();
                 END;

  }
  DATASET
  {
    { 8503;    ;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Entry No.)
                                 ORDER(Ascending)
                                 WHERE(Amount ROT=FILTER(>0));
               ReqFilterHeadingML=ENU=Paid ROT Invoices;
               OnAfterGetRecord=VAR
                                  CustLedgerEntry2@1100285000 : Record 21;
                                BEGIN

                                  CALCFIELDS("Remaining Amount", Amount);

                                  // RFC-076 Tolerance: 1 SEK difference
                                  IF (ABS(ABS("Remaining Amount") - ABS("Amount ROT")) > 1) THEN CurrReport.SKIP;

                                  IF ("Sent to Tax Authorities Date" <> 0D) AND NOT (IncludeAlreadySent) THEN CurrReport.SKIP;

                                  CustLedgerEntry.RESET();
                                  CustLedgerEntry.SETCURRENTKEY("Closed by Entry No.");
                                  CustLedgerEntry.SETRANGE("Document Type", "Document Type"::Payment);
                                  CustLedgerEntry.SETRANGE("Closed by Entry No.", "Entry No.");
                                  PayAmount := 0;
                                  IF (CustLedgerEntry.FINDSET(FALSE)) THEN REPEAT
                                     PayDate := CustLedgerEntry."Posting Date";
                                     CustLedgerEntry.CALCFIELDS(Amount);
                                     PayAmount += CustLedgerEntry.Amount;
                                  UNTIL CustLedgerEntry.NEXT = 0;
                                  PayAmount := PayAmount * -1;

                                  /// RFC065 - added Rounding to add more tolereance on payment

                                  //IF (ROUND(PayAmount, 1, '=') < ROUND((Amount - "Amount ROT"), 1, '=') + 1) THEN CurrReport.SKIP; RFC076 Commented


                                  FillXML;

                                  NoOfApplications += 1;


                                  //>>IME-135,140422
                                  "Sent to Tax Authorities Date" := TODAY;
                                  //"Cust. Ledger Entry".MODIFY();
                                  CustLedgerEntry2.GET("Cust. Ledger Entry"."Entry No.");
                                  CustLedgerEntry2."Sent to Tax Authorities Date" := "Sent to Tax Authorities Date";
                                  CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgerEntry2);
                                  //<<IME-135
                                END;

               ReqFilterFields=Posting Date }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100285000;;Container;
                  Name=ROT;
                  ContainerType=ContentArea }

      { 1100285504;1;Group  ;
                  CaptionML=ENU=Export ROT Application;
                  GroupType=Group }

      { 1100285500;2;Field  ;
                  CaptionML=ENU=Last Application Sent;
                  SourceExpr=LastSent;
                  Enabled=False;
                  Editable=False }

      { 1100285501;2;Field  ;
                  CaptionML=ENU=Last Application No.;
                  SourceExpr=LastApplicationNo;
                  Enabled=False;
                  Editable=False }

      { 1100285001;2;Field  ;
                  Name=Include all;
                  CaptionML=ENU=Include Posts Already Sent to Tax Authorities;
                  SourceExpr=IncludeAlreadySent }

      { 1100285502;2;Field  ;
                  CaptionML=ENU=Application No.;
                  SourceExpr=ApplicationNo }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExportFile@1100285000 : Boolean;
      IncludeAlreadySent@1100285001 : Boolean;
      LastSent@1100285500 : DateTime;
      LastApplicationNo@1100285502 : Integer;
      ApplicationNo@1100285501 : Integer;
      FileObj@1100285007 : File;
      OutStreamObj@1100285006 : OutStream;
      InStreamObj@1100285004 : InStream;
      ToFile@1100285003 : Text[250];
      CustLedgerEntry@1100285002 : Record 21;
      AmountRot@1100285008 : Decimal;
      FileName@1100285009 : Text[255];
      soapEnvelope@1100285015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      soapBody@1100285014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      arenden@1100285018 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      UtfortArbete@1100285508 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Arbete@1100285510 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      XmlElement@1100285013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      xmlTextNode@1100285012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
      nodeList@1100285011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      node@1100285010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmldoc@1100285016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlProcessingInstruction@1100285017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      ROTInformation@1100285019 : Record 11128101;
      PayDate@1100285503 : Date;
      PayAmount@1100285504 : Decimal;
      NoOfApplications@1100285505 : Integer;
      txtNoXMLCreated@1100285506 : TextConst 'ENU=No ROT Invoice Applications were created.';
      SalesRecSetup@1100285507 : Record 311;
      NameSpaceBegaran@1100285509 : Text;
      NameSpaceHtko@1100285511 : Text;
      gWrongPersNo@1100285100 : Text;
      txtWrongPersNoFound@1100285101 : TextConst 'ENU=Wrong Personal No. was found in the following invoices: %1';

    PROCEDURE FillXML@1100285000();
    VAR
      ExtendedROTInformation@1100285500 : Record 11128102;
      OtherCost@1100285501 : Decimal;
    BEGIN



      ROTInformation.RESET();
      ROTInformation.SETRANGE(Type, ROTInformation.Type::"Posted Invoice");
      ROTInformation.SETRANGE("Invoice No.", "Cust. Ledger Entry"."Document No."); // 140513
      IF (ROTInformation.FINDSET(FALSE)) THEN REPEAT

         arenden := xmldoc.CreateElement('Arenden', NameSpaceHtko);
         soapBody.AppendChild(arenden);

         XmlElement := xmldoc.CreateElement('Kopare', NameSpaceHtko);
                                              // IME379 Added function FixPersNo
         xmlTextNode := xmldoc.CreateTextNode(FixPersNo(ROTInformation."Personal No.", ROTInformation."Invoice No.")); // 140703 Changed to Personal no. from name
         XmlElement.AppendChild(xmlTextNode);
         arenden.AppendChild(XmlElement);

         XmlElement := xmldoc.CreateElement('BetalningsDatum', NameSpaceHtko);
         xmlTextNode := xmldoc.CreateTextNode(FORMAT(PayDate, 0, 9));
         XmlElement.AppendChild(xmlTextNode);
         arenden.AppendChild(XmlElement);

         XmlElement := xmldoc.CreateElement('PrisForArbete', NameSpaceHtko);
         xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ROTInformation."Labour Cost"), 0, '<Integer>'));
         XmlElement.AppendChild(xmlTextNode);
         arenden.AppendChild(XmlElement);

         //XmlElement := xmldoc.CreateElement('FaktureratBelopp');
         //xmlTextNode := xmldoc.CreateTextNode(FORMAT("Cust. Ledger Entry".Amount, 0, '<Integer>'));
         //XmlElement.AppendChild(xmlTextNode);
         //arenden.AppendChild(XmlElement);

         XmlElement := xmldoc.CreateElement('BetaltBelopp', NameSpaceHtko);                                                             // IME379 Get From ROT Information file instead
         xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ROTInformation."Labour Cost") - ROTInformation.Amount, 0 ,'<Integer>'));  // IME379 added DivideAmount()
         XmlElement.AppendChild(xmlTextNode);
         arenden.AppendChild(XmlElement);

         XmlElement := xmldoc.CreateElement('BegartBelopp', NameSpaceHtko);
         xmlTextNode := xmldoc.CreateTextNode(FORMAT(ROUND(ROTInformation.Amount, 1, '='), 0 ,'<Integer>'));
         XmlElement.AppendChild(xmlTextNode);
         arenden.AppendChild(XmlElement);

         XmlElement := xmldoc.CreateElement('FakturaNr', NameSpaceHtko);
         xmlTextNode := xmldoc.CreateTextNode("Cust. Ledger Entry"."Document No.");
         XmlElement.AppendChild(xmlTextNode);
         arenden.AppendChild(XmlElement);

         ExtendedROTInformation.SETRANGE(Type, ROTInformation.Type);
         ExtendedROTInformation.SETRANGE("Document No.", ROTInformation."Document No.");
         ExtendedROTInformation.SETRANGE("Invoice No.", ROTInformation."Invoice No.");
         ExtendedROTInformation.SETRANGE("Personal No.", ROTInformation."Personal No.");

         // 150601 Added new calculation of Other cost - first, get material lines:
         OtherCost := 0;
         IF (ExtendedROTInformation.FINDSET(FALSE)) THEN REPEAT
            OtherCost += ExtendedROTInformation."Material Cost";
         UNTIL ExtendedROTInformation.NEXT = 0;

         XmlElement := xmldoc.CreateElement('Ovrigkostnad', NameSpaceHtko);
         //xmlTextNode := xmldoc.CreateTextNode(FORMAT("Cust. Ledger Entry".Amount - ROTInformation."Labour Cost", 0 ,'<Integer>')); -Old Code-
         xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ("Cust. Ledger Entry".Amount - ROTInformation."Labour Cost" - OtherCost)), 0 ,'<Integer>')); // remove other material cost
         XmlElement.AppendChild(xmlTextNode);                                                                                                                                                        // IME379 added DivideAmount()
         arenden.AppendChild(XmlElement);

         IF (ROTInformation."Building/Apartment" = ROTInformation."Building/Apartment"::Apartment) THEN BEGIN
            // *** IF Bostadsrtt
            XmlElement := xmldoc.CreateElement('LagenhetsNr', NameSpaceHtko);
            xmlTextNode := xmldoc.CreateTextNode(ROTInformation."Building No.");
            XmlElement.AppendChild(xmlTextNode);
            arenden.AppendChild(XmlElement);

            XmlElement := xmldoc.CreateElement('BrfOrgNr', NameSpaceHtko);
            xmlTextNode := xmldoc.CreateTextNode(ROTInformation."Apartment Organisation No.");
            XmlElement.AppendChild(xmlTextNode);

            arenden.AppendChild(XmlElement);
         END ELSE BEGIN
            // If Fastighet
            XmlElement := xmldoc.CreateElement('Fastighetsbeteckning', NameSpaceHtko);
            xmlTextNode := xmldoc.CreateTextNode(ROTInformation."Building No.");
            XmlElement.AppendChild(xmlTextNode);
            arenden.AppendChild(XmlElement);
         END;

         // ************ EXTENDED ROT INFORMATION **************************************
         UtfortArbete := xmldoc.CreateElement('UtfortArbete', NameSpaceHtko);
         arenden.AppendChild(UtfortArbete);

         IF (ExtendedROTInformation.FINDSET(FALSE)) THEN REPEAT
            CASE ExtendedROTInformation."ROT Type" OF
               ExtendedROTInformation."ROT Type"::Construction:
                  Arbete := xmldoc.CreateElement('Bygg', NameSpaceHtko);
               ExtendedROTInformation."ROT Type"::Electricity:
                  Arbete := xmldoc.CreateElement('El', NameSpaceHtko);
               ExtendedROTInformation."ROT Type"::"Glass/Steel":
                  Arbete := xmldoc.CreateElement('GlasPlatarbete', NameSpaceHtko);
               ExtendedROTInformation."ROT Type"::"Land Drain":
                  Arbete := xmldoc.CreateElement('MarkDraneringarbete', NameSpaceHtko);
               ExtendedROTInformation."ROT Type"::"Brick Laying":
                  Arbete := xmldoc.CreateElement('Murning', NameSpaceHtko);
               ExtendedROTInformation."ROT Type"::"Painting/Wall Covering":
                  Arbete := xmldoc.CreateElement('MalningTapetsering', NameSpaceHtko);
               ExtendedROTInformation."ROT Type"::"Water System":
                  Arbete := xmldoc.CreateElement('Vvs', NameSpaceHtko);
            END;

            UtfortArbete.AppendChild(Arbete);

               XmlElement := xmldoc.CreateElement('AntalTimmar', NameSpaceHtko);
               xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ExtendedROTInformation."Quantity Hours"), 0 ,'<Integer>')); // IME379 added DivideAmount()
               XmlElement.AppendChild(xmlTextNode);
               Arbete.AppendChild(XmlElement);

               XmlElement := xmldoc.CreateElement('Materialkostnad', NameSpaceHtko);
               xmlTextNode := xmldoc.CreateTextNode(FORMAT(DivideAmount(ROTInformation."Quote of ROT Amount", ExtendedROTInformation."Material Cost"), 0 ,'<Integer>')); // IME379 added DivideAmount()
               XmlElement.AppendChild(xmlTextNode);
               Arbete.AppendChild(XmlElement);

         UNTIL ExtendedROTInformation.NEXT = 0;

      UNTIL ROTInformation.NEXT = 0;
    END;

    PROCEDURE FixPersNo@1100285501(PersNo@1100285500 : Code[30];InvoiceNo@1100285100 : Code[30]) : Code[30];
    BEGIN
      // IME379 **** New function
      PersNo := DELCHR(PersNo, '=', DELCHR(PersNo, '=', '0123456789'));
      IF (STRLEN(PersNo) = 10) THEN PersNo := '19' + PersNo;
      IF (STRLEN(PersNo) <> 12) THEN BEGIN
         gWrongPersNo += InvoiceNo + '\';  // IME417: Added PersNo in global varible and stopped error
         EXIT(PADSTR(PersNo, 12, '0'));
      END;
      EXIT(PersNo);
    END;

    PROCEDURE DivideAmount@1100285504(Percentage@1100285500 : Decimal;Amount@1100285501 : Decimal) : Decimal;
    BEGIN
      // IME379 **** New function

      EXIT(ROUND(Percentage / 100 * Amount, 1, '='));  // IME417: Added rounding
    END;

    EVENT xmldoc@1100285016::NodeInserting@93(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeInserted@94(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeRemoving@95(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeRemoved@96(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeChanging@97(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmldoc@1100285016::NodeChanged@98(sender@1100285501 : Variant;e@1100285500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    {
      140513 Changed from "No." to "Invoice No." in XML-creation
      150320  NEW XML-FILE SPECIFICATION - REWRITE
              Added Extended ROT Information and disabled fields not to be displayed in ROT after 150331
      150525 ITERO.MH Changed XML structure based on Skatteverket Schema
      150528 ITERO.MH Change Namespace addition in code
      150601 ITERO.MH Added calculation of other cost based on material cost on extended lines
      150624 ITERO.MH IME379 - Complemented ROT file with * Personal No. Fix
                                                           * Divided all fields based on the Quote of ROT in the new function DivideAmount()
      150915 ITERO.MH IME417 Added Rounding to int in DivideAmount() and global variable to show all pers. no. errors after export.
      150821 ITERO.MH IME-400 Added rounding of Remaning amount compared to ROT Amount
      151013 ITERO.MH IME417 Changed DivideAmount to use Decimal - added rounding
      151103 ITERO.MH RFC015 Added rounding to account for more payment tolerance
                      RFC-076 Tolerance: 1 SEK difference
                      RFC065 - added Rounding to add more tolereance on payment
    }
    END.
  }
  RDLDATA
  {
  }
}

