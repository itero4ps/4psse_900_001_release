OBJECT Report 11229773 Convert Estimate/Recipe
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Convert Estimate/Recipe;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   LastUpdateTime := TIME;
                 END;

    OnPreReport=BEGIN
                  CheckBeforeConversion;
                  InitCustomerSurcharges;
                END;

  }
  DATASET
  {
    { 1530;    ;DataItem;                    ;
               DataItemTable=Table11012151;
               DataItemTableView=WHERE(Converted=CONST(No));
               OnPreDataItem=BEGIN
                               IF ConvertEstimate = FALSE THEN CurrReport.BREAK;

                               Window.OPEN(STRSUBSTNO(Text000, TABLECAPTION));
                               NoOfRecords := COUNT;
                               Counter := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  Counter := Counter + 1;
                                  UpdateProgressWindow(Counter);
                                  ProcessEstimate;
                                END;

               OnPostDataItem=BEGIN
                                IF ConvertEstimate = TRUE THEN
                                  Window.CLOSE;
                              END;

               ReqFilterFields=No. }

    { 7492;    ;DataItem;                    ;
               DataItemTable=Table11012155;
               OnPreDataItem=BEGIN
                               IF ConvertRecipe = FALSE THEN CurrReport.BREAK;

                               Window.OPEN(STRSUBSTNO(Text000, TABLECAPTION));
                               NoOfRecords := COUNT;
                               Counter := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  Counter := Counter + 1;
                                  UpdateProgressWindow(Counter);
                                  ProcessRecipe;
                                END;

               OnPostDataItem=BEGIN
                                IF ConvertRecipe = TRUE THEN
                                  Window.CLOSE;
                              END;

               ReqFilterFields=Recipe Group,No. }

    { 4215;    ;DataItem;                    ;
               DataItemTable=Table11012169;
               OnPreDataItem=BEGIN
                               IF ConvertPartLines = FALSE THEN CurrReport.BREAK;

                               Window.OPEN(STRSUBSTNO(Text000, TABLECAPTION));
                               NoOfRecords := COUNT;
                               Counter := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  Counter := Counter + 1;
                                  UpdateProgressWindow(Counter);
                                  ProcessPartLines;
                                END;

               OnPostDataItem=BEGIN
                                IF ConvertPartLines = TRUE THEN
                                  Window.CLOSE;
                              END;

               ReqFilterFields=Part Group,Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100528900;;Container;
                  ContainerType=ContentArea }

      { 1100528901;1;Group  ;
                  GroupType=Group }

      { 1100528902;2;Field  ;
                  Name=ConvertEstimate;
                  CaptionML=ENU=Convert Estimate;
                  SourceExpr=ConvertEstimate }

      { 1100528903;2;Field  ;
                  Name=ConvertRecipe;
                  CaptionML=ENU=Convert Recipe;
                  SourceExpr=ConvertRecipe }

      { 1100528904;2;Field  ;
                  Name=ConvertPartLines;
                  CaptionML=ENU=Convert Part Lines;
                  SourceExpr=ConvertPartLines }

      { 1100525001;2;Field  ;
                  Name=InitSurcharge;
                  CaptionML=ENU=Init Customer Surcharges;
                  OptionCaptionML=ENU=" ,Copy Surcharge CostPlusEntry,Copy From Estimate,Copy From Customer Template";
                  SourceExpr=InitCustomerSurcharge;
                  OnValidate=BEGIN
                               //db, 06-05-14: T004687
                               IF InitCustomerSurcharge <> InitCustomerSurcharge::CopyFromTemplate THEN
                                 CustTemplate := '';
                             END;
                              }

      { 1100525002;2;Field  ;
                  Name=CustTemplate;
                  CaptionML=ENU=Customer Template;
                  SourceExpr=CustTemplate;
                  TableRelation="Customer Template";
                  OnValidate=BEGIN
                               //db, 06-05-14: T004687
                               IF CustTemplate <> '' THEN
                                 CustTemplateRec.GET(CustTemplate);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ConvertEstimate@1100528900 : Boolean;
      ConvertRecipe@1100528901 : Boolean;
      ConvertPartLines@1100528902 : Boolean;
      Text000@1100528903 : TextConst 'ENU=Update %1  @1@@@@@@@@@@@@@';
      ConversionIrreversible@1100528912 : Boolean;
      Window@1100528908 : Dialog;
      NoOfRecords@1100528907 : Integer;
      Counter@1100528906 : Integer;
      Progress@1100528905 : Integer;
      LastUpdateTime@1100528904 : Time;
      UpdateMgt@1100528909 : Codeunit 11012229;
      EstSetup@1100528910 : Record 11012150;
      Text001@1100525006 : TextConst 'ENU="Estimate %1 is already converted; first clean existing data."';
      Text002@1100525000 : TextConst 'ENU="Base Recipe %1 is already converted; first clean existing data."';
      Text003@1100525007 : TextConst 'ENU="Base Part %1 is already converted; first clean existing data."';
      Text995@1100409001 : TextConst 'ENU=I agree that complete content of Table %1 will be converted';
      Text996@1100409000 : TextConst 'ENU=I agree that this selection %1 on Table %2 will be converted';
      Text997@1100528926 : TextConst 'ENU=Filter on table %1 should be empty: %2';
      Text998@1100528915 : TextConst 'ENU=Still Data present, delete?';
      Text999@1100528911 : TextConst 'ENU=Conversion complete and irreversible ?';
      RateRec@1100528913 : Record 11012160;
      LastGroup@1100525001 : Code[20];
      InitCustomerSurcharge@1100525003 : ' ,CopySurchargeCPE,CopyFromEstimate,CopyFromTemplate';
      CustTemplate@1100525002 : Code[20];
      CustRec@1100525005 : Record 18;
      CustTemplateRec@1100525004 : Record 5105;

    PROCEDURE UpdateProgressWindow@9(NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) OR (TIME > LastUpdateTime + 5000) THEN BEGIN
          Window.UPDATE(1,100 * NewProgress);
          LastUpdateTime := TIME;
        END;
        Progress := NewProgress;
      END;
    END;

    PROCEDURE ProcessEstimate@1100528900();
    VAR
      ProjSetup@1100525001 : Record 315;
      CustRec@1100525002 : Record 18;
      SubEstRecOLD@1100528912 : Record 11012152;
      SubEstRecNEW@1100528911 : Record 11072074;
      EstPartRecOLD@1100528910 : Record 11012153;
      EstPartRecNEW@1100528909 : Record 11072073;
      EstLineRecOLD@1100528908 : Record 11012154;
      EstLineRecNEW@1100528907 : Record 11072072;
      RcpLineRecOLD@1100528904 : Record 11012156;
      RcpLineRecNEW@1100528903 : Record 11072075;
      EstCompRecOLD@1100528900 : Record 11012189;
      CostTypeLabor@1100528901 : Boolean;
      CostTypeItem@1100528902 : Boolean;
      CostTypeSubc@1100528905 : Boolean;
      CostTypePlant@1100528906 : Boolean;
      NumCostType@1100528915 : Integer;
      OrigNumCostType@1100525000 : Integer;
    BEGIN
      CheckDataPresentEstimate;  //db, 28-01-15: C020406
      UpdateEstimate;  //db, 30-12-14: C020075

      WITH Estimate DO BEGIN
        SubEstRecOLD.SETRANGE("Estimate No.", "No.");
        IF SubEstRecOLD.FINDSET THEN BEGIN
          REPEAT
            SubEstRecNEW.TRANSFERFIELDS(SubEstRecOLD);
            SubEstRecNEW.InitSurcharge;  //db, 30-12-14: C020075
            SubEstRecNEW.INSERT;
          UNTIL SubEstRecOLD.NEXT = 0;
        END;

        EstPartRecOLD.SETRANGE("Estimate No.", "No.");
        IF EstPartRecOLD.FINDSET THEN BEGIN
          REPEAT
            EstPartRecNEW.TRANSFERFIELDS(EstPartRecOLD);
            EstPartRecNEW.InitSurcharge;  //db, 30-12-14: C020075
            EstPartRecNEW.INSERT;
          UNTIL EstPartRecOLD.NEXT = 0;
        END;

        EstLineRecOLD.SETRANGE("Estimate No.", "No.");
        EstLineRecOLD.SETRANGE("Removal Contribution", FALSE);
        IF EstLineRecOLD.FINDSET THEN BEGIN
          REPEAT
            EstLineRecNEW.TRANSFERFIELDS(EstLineRecOLD);
            IF  EstLineRecNEW.Recipe <> '' THEN BEGIN
              NumCostType := 0;  //db, 11-02-14: C012976
              SplitEstLine(-1, EstLineRecOLD, EstLineRecNEW, NumCostType);
            END ELSE BEGIN
              NumCostType := 0;
              CostTypeLabor := FALSE;
              CostTypeItem := FALSE;
              CostTypeSubc := FALSE;
              CostTypePlant := FALSE;
              IF (EstLineRecOLD."Cost Object Labor" <> '') OR (EstLineRecOLD.Norm <> 0) OR
                 (EstLineRecOLD."Sub Operation Code" <> '') THEN BEGIN  //db, 20-02-14: C013419
                CostTypeLabor := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (EstLineRecOLD."Cost Object Material" <> '') OR (EstLineRecOLD."Material Price" <> 0) THEN BEGIN
                CostTypeItem := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (EstLineRecOLD."Cost Object Subcontracting" <> '') OR (EstLineRecOLD."Subcontracting Price" <> 0) THEN BEGIN
                CostTypeSubc := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (EstLineRecOLD."Cost Object Plant" <> '') OR (EstLineRecOLD."Plant Price" <> 0) THEN BEGIN
                CostTypePlant := TRUE;
                NumCostType := NumCostType + 1;
              END;
              OrigNumCostType := NumCostType;
              IF CostTypePlant THEN
                SplitEstLine(3, EstLineRecOLD, EstLineRecNEW, NumCostType);
              IF CostTypeSubc THEN
                SplitEstLine(2, EstLineRecOLD, EstLineRecNEW, NumCostType);
              IF CostTypeItem THEN
                SplitEstLine(1, EstLineRecOLD, EstLineRecNEW, NumCostType);
              IF CostTypeLabor THEN
                SplitEstLine(0, EstLineRecOLD, EstLineRecNEW, NumCostType);
              IF OrigNumCostType = 0 THEN  //textlines
                SplitEstLine(-1, EstLineRecOLD, EstLineRecNEW, NumCostType);
            END;
          UNTIL EstLineRecOLD.NEXT = 0;
          CheckAttachedEstLines("No.");  //db, 24-02-14: C012367
        END;

        RcpLineRecOLD.SETRANGE("Estimate No.", "No.");
        RcpLineRecOLD.SETRANGE("Removal Contribution", FALSE);
        IF RcpLineRecOLD.FINDSET THEN BEGIN
          REPEAT
            RcpLineRecNEW.TRANSFERFIELDS(RcpLineRecOLD);
            IF  RcpLineRecNEW."Recipe (Child)" <> '' THEN BEGIN
              NumCostType := 0;  //db, 11-02-14: C012976
              SplitEstRcpLine(-1, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
            END ELSE BEGIN
              NumCostType := 0;
              CostTypeLabor := FALSE;
              CostTypeItem := FALSE;
              CostTypeSubc := FALSE;
              CostTypePlant := FALSE;
              IF (RcpLineRecOLD."Cost Object Labor" <> '') OR (RcpLineRecOLD.Norm <> 0) OR
                 (RcpLineRecOLD."Sub Operation Code" <> '') THEN BEGIN  //db, 20-02-14: C013419
                CostTypeLabor := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (RcpLineRecOLD."Cost Object Material" <> '') OR (RcpLineRecOLD."Material Price" <> 0) THEN BEGIN
                CostTypeItem := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (RcpLineRecOLD."Cost Object Subcontracting" <> '') OR (RcpLineRecOLD."Subcontracting Price" <> 0) THEN BEGIN
                CostTypeSubc := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (RcpLineRecOLD."Cost Object Plant" <> '') OR (RcpLineRecOLD."Plant Price" <> 0) THEN BEGIN
                CostTypePlant := TRUE;
                NumCostType := NumCostType + 1;
              END;
              OrigNumCostType := NumCostType;
              IF CostTypePlant THEN
                SplitEstRcpLine(3, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
              IF CostTypeSubc THEN
                SplitEstRcpLine(2, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
              IF CostTypeItem THEN
                SplitEstRcpLine(1, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
              IF CostTypeLabor THEN
                SplitEstRcpLine(0, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
              IF OrigNumCostType = 0 THEN  //textlines
                SplitEstRcpLine(-1, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
            END;
          UNTIL RcpLineRecOLD.NEXT = 0;
          CheckAttachedEstRcpLines("No.");  //db, 24-02-14: C012367
        END;

        UpdateMgt.DetermineRemovalContribution(0, "No.", '', '', '', '', '');
        UpdateMgt.UpdateTotals("No.", '', '', TRUE);
      END;
    END;

    PROCEDURE ProcessRecipe@1100528901();
    VAR
      RecipeRecOLD@1100528906 : Record 11012155;
      RecipeRecNEW@1100528905 : Record 11020581;
      RcpLineRecOLD@1100528904 : Record 11012156;
      RcpLineRecNEW@1100528903 : Record 11020582;
      CostTypeLabor@1100528908 : Boolean;
      CostTypeItem@1100528907 : Boolean;
      CostTypeSubc@1100528902 : Boolean;
      CostTypePlant@1100528901 : Boolean;
      NumCostType@1100528900 : Integer;
      OrigNumCostType@1100525000 : Integer;
    BEGIN
      CheckDataPresentBaseRecipe;  //db, 28-01-15: C020406

      WITH "Recipe OLD" DO BEGIN
        RecipeRecNEW.TRANSFERFIELDS("Recipe OLD");
        RecipeRecNEW.INSERT(TRUE);  //C027548: db, 24-12-15 (CentralMgt)

        RcpLineRecOLD.SETFILTER("Estimate No.", '%1', '');
        RcpLineRecOLD.SETRANGE("Recipe Group", "Recipe Group");
        RcpLineRecOLD.SETRANGE(Recipe, "No.");
        RcpLineRecOLD.SETRANGE("Removal Contribution", FALSE);
        IF RcpLineRecOLD.FINDSET THEN BEGIN
          REPEAT
            CheckRecipeGroupExist;
            RcpLineRecNEW.TRANSFERFIELDS(RcpLineRecOLD);
            IF  RcpLineRecNEW."Recipe (Child)" <> '' THEN BEGIN
              NumCostType := 0;  //db, 11-02-14: C012976
              SplitBaseRcpLine(-1, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
            END ELSE BEGIN
              NumCostType := 0;
              CostTypeLabor := FALSE;
              CostTypeItem := FALSE;
              CostTypeSubc := FALSE;
              CostTypePlant := FALSE;
              IF (RcpLineRecOLD."Cost Object Labor" <> '') OR (RcpLineRecOLD.Norm <> 0) OR
                 (RcpLineRecOLD."Sub Operation Code" <> '') THEN BEGIN  //db, 20-02-14: C013419
                CostTypeLabor := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (RcpLineRecOLD."Cost Object Material" <> '') OR (RcpLineRecOLD."Material Price" <> 0) THEN BEGIN
                CostTypeItem := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (RcpLineRecOLD."Cost Object Subcontracting" <> '') OR (RcpLineRecOLD."Subcontracting Price" <> 0) THEN BEGIN
                CostTypeSubc := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (RcpLineRecOLD."Cost Object Plant" <> '') OR (RcpLineRecOLD."Plant Price" <> 0) THEN BEGIN
                CostTypePlant := TRUE;
                NumCostType := NumCostType + 1;
              END;
              OrigNumCostType := NumCostType;  //db, 10-12-13
              IF CostTypePlant THEN
                SplitBaseRcpLine(3, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
              IF CostTypeSubc THEN
                SplitBaseRcpLine(2, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
              IF CostTypeItem THEN
                SplitBaseRcpLine(1, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
              IF CostTypeLabor THEN
                SplitBaseRcpLine(0, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
              IF OrigNumCostType = 0 THEN  //textlines
                SplitBaseRcpLine(-1, RcpLineRecOLD, RcpLineRecNEW, NumCostType);
            END;
          UNTIL RcpLineRecOLD.NEXT = 0;
          CheckAttachedBaseRcpLines(RcpLineRecOLD);  //db, 24-02-14: C012367
        END;

        UpdateMgt.DetermineRemovalContribution(2, '', '', '', '', RcpLineRecNEW."Recipe Group", RcpLineRecNEW.Recipe);
      END;
    END;

    PROCEDURE ProcessPartLines@1100528904();
    VAR
      PartLineRecOLD@1100528902 : Record 11012187;
      PartLineRecNEW@1100528901 : Record 11072076;
      CostTypeLabor@1100528906 : Boolean;
      CostTypeItem@1100528905 : Boolean;
      CostTypeSubc@1100528904 : Boolean;
      CostTypePlant@1100528903 : Boolean;
      NumCostType@1100528900 : Integer;
      OrigNumCostType@1100525000 : Integer;
    BEGIN
      CheckDataPresentBasePart;  //db, 28-01-15: C020406

      WITH "Estimate Base Part" DO BEGIN
        PartLineRecOLD.SETRANGE("Part Group", "Part Group");
        PartLineRecOLD.SETRANGE(Part, Code);
        IF PartLineRecOLD.FINDSET THEN BEGIN
          REPEAT
            PartLineRecNEW.TRANSFERFIELDS(PartLineRecOLD);
            IF  PartLineRecNEW.Recipe <> '' THEN BEGIN
              NumCostType := 0;  //db, 11-02-14: C012976
              SplitPartLine(-1, PartLineRecOLD, PartLineRecNEW, NumCostType);
            END ELSE BEGIN
              NumCostType := 0;
              CostTypeLabor := FALSE;
              CostTypeItem := FALSE;
              CostTypeSubc := FALSE;
              CostTypePlant := FALSE;
              IF (PartLineRecOLD."Cost Object Labor" <> '') OR (PartLineRecOLD.Norm <> 0) OR
                 (PartLineRecOLD."Sub Operation Code" <> '') THEN BEGIN  //db, 20-02-14: C013419
                CostTypeLabor := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (PartLineRecOLD."Cost Object Material" <> '') OR (PartLineRecOLD."Material Price" <> 0) THEN BEGIN
                CostTypeItem := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (PartLineRecOLD."Cost Object Subcontracting" <> '') OR (PartLineRecOLD."Subcontracting Price" <> 0) THEN BEGIN
                CostTypeSubc := TRUE;
                NumCostType := NumCostType + 1;
              END;
              IF (PartLineRecOLD."Cost Object Plant" <> '') OR (PartLineRecOLD."Plant Price" <> 0) THEN BEGIN
                CostTypePlant := TRUE;
                NumCostType := NumCostType + 1;
              END;
              OrigNumCostType := NumCostType;
              IF CostTypePlant THEN
                SplitPartLine(3, PartLineRecOLD, PartLineRecNEW, NumCostType);
              IF CostTypeSubc THEN
                SplitPartLine(2, PartLineRecOLD, PartLineRecNEW, NumCostType);
              IF CostTypeItem THEN
                SplitPartLine(1, PartLineRecOLD, PartLineRecNEW, NumCostType);
              IF CostTypeLabor THEN
                SplitPartLine(0, PartLineRecOLD, PartLineRecNEW, NumCostType);
              IF OrigNumCostType = 0 THEN  //textlines
                SplitPartLine(-1, PartLineRecOLD, PartLineRecNEW, NumCostType);
            END;
          UNTIL PartLineRecOLD.NEXT = 0;
          CheckAttachedPartLines(PartLineRecOLD);  //db, 24-02-14: C012367
        END;
      END;
    END;

    PROCEDURE CheckBeforeConversion@1100528903();
    VAR
      FilterTxt@1100528900 : Text[1024];
    BEGIN
      EstSetup.GET;
      IF ConvertEstimate AND ConvertRecipe AND ConvertPartLines THEN BEGIN
        ConversionIrreversible := CONFIRM(Text999);
        IF ConversionIrreversible THEN BEGIN
          EstSetup.Converted := TRUE;
          EstSetup.MODIFY;
        END;
      END;

      IF ConversionIrreversible THEN BEGIN
        FilterTxt := Estimate.GETFILTERS;
        IF FilterTxt <> '' THEN
          ERROR(Text997, Estimate.TABLECAPTION, FilterTxt);

        FilterTxt := "Recipe OLD".GETFILTERS;
        IF FilterTxt <> '' THEN
          ERROR(Text997, "Recipe OLD".TABLECAPTION, FilterTxt);

        FilterTxt := "Estimate Base Part".GETFILTERS;
        IF FilterTxt <> '' THEN
          ERROR(Text997, "Estimate Base Part".TABLECAPTION, FilterTxt);
      END;


      IF ConvertEstimate THEN BEGIN
        FilterTxt := Estimate.GETFILTERS;
        IF FilterTxt = '' THEN BEGIN
          IF NOT CONFIRM(Text995,FALSE, Estimate.TABLECAPTION) THEN ERROR('');
        END ELSE BEGIN
          IF NOT CONFIRM(Text996,FALSE, FilterTxt, Estimate.TABLECAPTION) THEN ERROR('');
        END;
      END;
      IF ConvertRecipe THEN BEGIN
        FilterTxt := "Recipe OLD".GETFILTERS;
        IF FilterTxt = '' THEN BEGIN
          IF NOT CONFIRM(Text995,FALSE, "Recipe OLD".TABLECAPTION) THEN ERROR('');
        END ELSE BEGIN
          IF NOT CONFIRM(Text996,FALSE, FilterTxt, "Recipe OLD".TABLECAPTION) THEN ERROR('');
        END;
      END;
      IF ConvertPartLines THEN BEGIN
        FilterTxt := "Estimate Base Part".GETFILTERS;
        IF FilterTxt = '' THEN BEGIN
          IF NOT CONFIRM(Text995,FALSE, "Estimate Base Part".TABLECAPTION) THEN ERROR('');
        END ELSE BEGIN
          IF NOT CONFIRM(Text996,FALSE, FilterTxt, "Estimate Base Part".TABLECAPTION) THEN ERROR('');
        END;
      END;
    END;

    PROCEDURE SplitEstLine@1100528908(CostType@1100528900 : Integer;EstLineRecOLD@1100528901 : Record 11012154;VAR EstLineRecNEW@1100528902 : Record 11072072;VAR NumCostType@1100528903 : Integer);
    VAR
      ChrgRecOLD@1100528000 : Record 11012175;
      ChrgRecNEW@1100528001 : Record 11229771;
      CodeRecOLD@1100528002 : Record 11012194;
      CodeRecNEW@1100528003 : Record 11229772;
    BEGIN
      IF CostType >= 0 THEN  //db, 17-01-14: C012294
        NumCostType := NumCostType - 1;
      WITH EstLineRecNEW DO BEGIN
        "Line No." := EstLineRecOLD."Line No." + NumCostType;
        InitEstLine(EstLineRecNEW);
        IF CostType >= 0 THEN
          AssignEstLine(EstLineRecOLD, EstLineRecNEW, CostType);
        "Quantity (Sales)" := Quantity;
        "Norm (Sales)" := Norm;
        "Norm Group (Sales)" := "Norm Group";
        //db.sn, 24-02-14: C012367
        "Attached to Line No." := EstLineRecOLD."Attached to Line No.";
        IF ("Line No." <> EstLineRecOLD."Line No.") AND (EstLineRecOLD."Attached to Line No." = 0) THEN
          "Attached to Line No." := EstLineRecOLD."Line No.";
        //db.en, 24-02-14: C012367
        InitSurcharge(FALSE);  //db, 30-12-14: C020075
        INSERT;
      END;

      //db.sn, 16-04-15: C014713
      WITH EstLineRecOLD DO BEGIN
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          ChrgRecOLD.SETRANGE("Estimate No.", "Estimate No.");
          ChrgRecOLD.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          ChrgRecOLD.SETRANGE("Part Group", "Part Group");
          ChrgRecOLD.SETRANGE(Part, Part);
          ChrgRecOLD.SETRANGE("Basic Line", "Line No.");
          ChrgRecOLD.SETFILTER("Recipe Group", '%1', '');
          ChrgRecOLD.SETFILTER(Recipe, '%1', '');
          ChrgRecOLD.SETRANGE("Recipe Line", 0);
          ChrgRecOLD.SETFILTER("Sales Document No.", '%1', '');
          ChrgRecOLD.SETRANGE("Sales Line No.", 0);
          IF ChrgRecOLD.FINDSET THEN BEGIN
            REPEAT
              ChrgRecNEW.TRANSFERFIELDS(ChrgRecOLD);
              IF EstLineRecNEW."Attached to Line No." <> 0 THEN
                ChrgRecNEW."Basic Line" := EstLineRecNEW."Line No.";
              IF ChrgRecNEW.INSERT THEN;
            UNTIL ChrgRecOLD.NEXT = 0;
          END;
        END;
        //
        CodeRecOLD.SETRANGE("Estimate No.", "Estimate No.");
        CodeRecOLD.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
        CodeRecOLD.SETRANGE("Part Group", "Part Group");
        CodeRecOLD.SETRANGE(Part, Part);
        CodeRecOLD.SETRANGE("Estimate Line", "Line No.");
        CodeRecOLD.SETFILTER("Recipe Group", '%1', '');
        CodeRecOLD.SETFILTER(Recipe, '%1', '');
        CodeRecOLD.SETRANGE("Recipe Line", 0);
        IF CodeRecOLD.FINDSET THEN BEGIN
          REPEAT
            CodeRecNEW.TRANSFERFIELDS(CodeRecOLD);
            IF EstLineRecNEW."Attached to Line No." <> 0 THEN
              CodeRecNEW."Estimate Line" := EstLineRecNEW."Line No.";
            IF CodeRecNEW.INSERT THEN;
          UNTIL CodeRecOLD.NEXT = 0;
        END;
      END;
      //db.en, 16-04-15: C014713
    END;

    PROCEDURE InitEstLine@1100528905(VAR EstLineRecNEW@1100528902 : Record 11072072);
    BEGIN
      WITH EstLineRecNEW DO BEGIN
        "Cost Type (Price)" := "Cost Type (Price)"::" ";
        "Cost Object Labor" := '';
        "Cost Object Price" := '';
        //Labor
        "Sub Operation Code" := '';
        Norm := 0;
        "Production Rate" := 0;
        "Rate Code" := '';
        "Rate Type" := 0;
        "Team Size" := 0;
        "Cost Rate" := 0;
        "Sales Rate" := 0;
        //Material
        "Item No." := '';
        Manufacturer := '';
        "Basic Item" := '';
        "Vendor (Trade Item)" := '';
        "Trade Item" := '';
        "Gross Price" := 0;
        "Purchase Discount %" := 0;
        "Nett Cost Price" := 0;
        "Sales Discount %" := 0;
        "Nett Sales Price" := 0;
      END;
    END;

    PROCEDURE AssignEstLine@1100528906(EstLineRecOLD@1100528902 : Record 11012154;VAR EstLineRecNEW@1100528900 : Record 11072072;CostType@1100528903 : Integer);
    BEGIN
      WITH EstLineRecNEW DO BEGIN
        IF CostType = 0 THEN BEGIN  //Labor
          "Cost Object Labor" := EstLineRecOLD."Cost Object Labor";
          "Sub Operation Code" := EstLineRecOLD."Sub Operation Code";
          Norm := EstLineRecOLD.Norm;
          "Production Rate" := EstLineRecOLD."Production Rate";
          "Rate Code" := EstLineRecOLD."Rate Code";
          "Rate Type" := EstLineRecOLD."Rate Type";
          "Team Size" := EstLineRecOLD."Team Size";
          IF NOT RateRec.GET("Estimate No.","Rate Code") THEN RateRec.INIT;  //db, 17-01-14: C012305
          "Cost Rate" := RateRec."Cost Rate";
          "Sales Rate" := RateRec."Sales Rate";
        END;
        IF CostType = 1 THEN BEGIN  //Material
          "Cost Type (Price)" := "Cost Type (Price)"::Material;
          "Cost Object Price" := EstLineRecOLD."Cost Object Material";
          "Item No." := EstLineRecOLD."Item No.";
          Manufacturer := EstLineRecOLD.Manufacturer;
          "Basic Item" := EstLineRecOLD."Basic Item";
          "Vendor (Trade Item)" := EstLineRecOLD."Vendor (Trade Item)";
          "Trade Item" := EstLineRecOLD."Trade Item";
          "Gross Price" := EstLineRecOLD."Gross Price";
          "Purchase Discount %" := EstLineRecOLD."Purchase Discount %";
          "Nett Cost Price" := EstLineRecOLD."Material Price";
          "Sales Discount %" := EstLineRecOLD."Sales Discount %";
          IF "Gross Price" = 0 THEN
            "Gross Price" := "Nett Cost Price";
        END;
        IF CostType = 2 THEN BEGIN  //Subcontracting
          "Cost Type (Price)" := "Cost Type (Price)"::Subcontracting;
          "Cost Object Price" := EstLineRecOLD."Cost Object Subcontracting";
          "Gross Price" := EstLineRecOLD."Subcontracting Price";
          "Nett Cost Price" := EstLineRecOLD."Subcontracting Price";
        END;
        IF CostType = 3 THEN BEGIN  //Plant
          "Cost Type (Price)" := "Cost Type (Price)"::Plant;
          "Cost Object Price" := EstLineRecOLD."Cost Object Plant";
          "Gross Price" := EstLineRecOLD."Plant Price";
          "Nett Cost Price" := EstLineRecOLD."Plant Price";
        END;
        IF CostType > 0 THEN BEGIN
          CalculateNettPrice;  //fill sales price
          UpdateSalesPriceFromCostPrice;  //db, 30-12-14; C020075
        END;
      END;
    END;

    PROCEDURE SplitEstRcpLine@1100528907(CostType@1100528900 : Integer;RcpLineRecOLD@1100528901 : Record 11012156;VAR RcpLineRecNEW@1100528902 : Record 11072075;VAR NumCostType@1100528903 : Integer);
    VAR
      ChrgRecOLD@1100528003 : Record 11012175;
      ChrgRecNEW@1100528002 : Record 11229771;
      CodeRecOLD@1100528001 : Record 11012194;
      CodeRecNEW@1100528000 : Record 11229772;
    BEGIN
      IF CostType >= 0 THEN  //db, 17-01-14: C012294
        NumCostType := NumCostType - 1;
      WITH RcpLineRecNEW DO BEGIN
        "Line No." := RcpLineRecOLD."Line No." + NumCostType;
        InitEstRcpLine(RcpLineRecNEW);
        IF CostType >= 0 THEN
          AssignEstRcpLine(RcpLineRecOLD, RcpLineRecNEW, CostType);
        "Quantity (Sales)" := Quantity;
        "Norm (Sales)" := Norm;
        "Norm Group (Sales)" := "Norm Group";
        //db.sn, 24-02-14: C012367
        "Attached to Line No." := RcpLineRecOLD."Attached to Line No.";
        IF ("Line No." <> RcpLineRecOLD."Line No.") AND (RcpLineRecOLD."Attached to Line No." = 0) THEN
          "Attached to Line No." := RcpLineRecOLD."Line No.";
        //db.en, 24-02-14: C012367
        InitSurcharge(FALSE);  //db, 30-12-14: C020075
        INSERT;
      END;

      //db.sn, 16-04-15: C014713
      WITH RcpLineRecOLD DO BEGIN
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          ChrgRecOLD.SETRANGE("Estimate No.", "Estimate No.");
          ChrgRecOLD.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          ChrgRecOLD.SETRANGE("Part Group", "Part Group");
          ChrgRecOLD.SETRANGE(Part, Part);
          ChrgRecOLD.SETRANGE("Basic Line", "Line No.");
          ChrgRecOLD.SETRANGE("Recipe Group", "Recipe Group");
          ChrgRecOLD.SETRANGE(Recipe, Recipe);
          ChrgRecOLD.SETRANGE("Recipe Line","Estimate Line");
          ChrgRecOLD.SETFILTER("Sales Document No.", '%1', '');
          ChrgRecOLD.SETRANGE("Sales Line No.", 0);
          IF ChrgRecOLD.FINDSET THEN BEGIN
            REPEAT
              ChrgRecNEW.TRANSFERFIELDS(ChrgRecOLD);
              IF RcpLineRecNEW."Attached to Line No." <> 0 THEN
                ChrgRecNEW."Basic Line" := RcpLineRecNEW."Line No.";
              IF ChrgRecNEW.INSERT THEN;
            UNTIL ChrgRecOLD.NEXT = 0;
          END;
        END;
        //
        CodeRecOLD.SETRANGE("Estimate No.", "Estimate No.");
        CodeRecOLD.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
        CodeRecOLD.SETRANGE("Part Group", "Part Group");
        CodeRecOLD.SETRANGE(Part, Part);
        CodeRecOLD.SETRANGE("Estimate Line", "Estimate Line");
        CodeRecOLD.SETRANGE("Recipe Group", "Recipe Group");
        CodeRecOLD.SETRANGE(Recipe, Recipe);
        CodeRecOLD.SETRANGE("Recipe Line", "Line No.");
        IF CodeRecOLD.FINDSET THEN BEGIN
          REPEAT
            CodeRecNEW.TRANSFERFIELDS(CodeRecOLD);
            IF RcpLineRecNEW."Attached to Line No." <> 0 THEN
              CodeRecNEW."Recipe Line" := RcpLineRecNEW."Line No.";
            IF CodeRecNEW.INSERT THEN;
          UNTIL CodeRecOLD.NEXT = 0;
        END;
      END;
      //db.en, 16-04-15: C014713
    END;

    PROCEDURE InitEstRcpLine@1100528909(VAR RcpLineRecNEW@1100528902 : Record 11072075);
    BEGIN
      WITH RcpLineRecNEW DO BEGIN
        "Cost Type (Price)" := "Cost Type (Price)"::" ";
        "Cost Object Labor" := '';
        "Cost Object Price" := '';
        //Labor
        "Sub Operation Code" := '';
        Norm := 0;
        "Production Rate" := 0;
        "Rate Code" := '';
        "Rate Type" := 0;
        "Team Size" := 0;
        "Cost Rate" := 0;
        "Sales Rate" := 0;
        //Material
        "Item No." := '';
        Manufacturer := '';
        "Basic Item" := '';
        "Vendor (Trade Item)" := '';
        "Trade Item" := '';
        "Gross Price" := 0;
        "Purchase Discount %" := 0;
        "Nett Cost Price" := 0;
        "Sales Discount %" := 0;
        "Nett Sales Price" := 0;
      END;
    END;

    PROCEDURE AssignEstRcpLine@1100528910(RcpLineRecOLD@1100528902 : Record 11012156;VAR RcpLineRecNEW@1100528900 : Record 11072075;CostType@1100528903 : Integer);
    BEGIN
      WITH RcpLineRecNEW DO BEGIN
        IF CostType = 0 THEN BEGIN  //Labor
          "Cost Object Labor" := RcpLineRecOLD."Cost Object Labor";
          "Sub Operation Code" := RcpLineRecOLD."Sub Operation Code";
          Norm := RcpLineRecOLD.Norm;
          "Production Rate" := RcpLineRecOLD."Production Rate";
          "Rate Code" := RcpLineRecOLD."Rate Code";
          "Rate Type" := RcpLineRecOLD."Rate Type";
          "Team Size" := RcpLineRecOLD."Team Size";
          IF NOT RateRec.GET("Estimate No.","Rate Code") THEN RateRec.INIT;  //db, 17-01-14: C012305
          "Cost Rate" := RateRec."Cost Rate";
          "Sales Rate" := RateRec."Sales Rate";
        END;
        IF CostType = 1 THEN BEGIN  //Material
          "Cost Type (Price)" := "Cost Type (Price)"::Material;
          "Cost Object Price" := RcpLineRecOLD."Cost Object Material";
          "Item No." := RcpLineRecOLD."Item No.";
          Manufacturer := RcpLineRecOLD.Manufacturer;
          "Basic Item" := RcpLineRecOLD."Basic Item";
          "Vendor (Trade Item)" := RcpLineRecOLD."Vendor (Trade Item)";
          "Trade Item" := RcpLineRecOLD."Trade Item";
          "Gross Price" := RcpLineRecOLD."Gross Price";
          "Purchase Discount %" := RcpLineRecOLD."Purchase Discount %";
          "Nett Cost Price" := RcpLineRecOLD."Material Price";
          "Sales Discount %" := RcpLineRecOLD."Sales Discount %";
          IF "Gross Price" = 0 THEN
            "Gross Price" := "Nett Cost Price";
        END;
        IF CostType = 2 THEN BEGIN  //Subcontracting
          "Cost Type (Price)" := "Cost Type (Price)"::Subcontracting;
          "Cost Object Price" := RcpLineRecOLD."Cost Object Subcontracting";
          "Gross Price" := RcpLineRecOLD."Subcontracting Price";
          "Nett Cost Price" := RcpLineRecOLD."Subcontracting Price";
        END;
        IF CostType = 3 THEN BEGIN  //Plant
          "Cost Type (Price)" := "Cost Type (Price)"::Plant;
          "Cost Object Price" := RcpLineRecOLD."Cost Object Plant";
          "Gross Price" := RcpLineRecOLD."Plant Price";
          "Nett Cost Price" := RcpLineRecOLD."Plant Price";
        END;
        IF CostType > 0 THEN
          CalculateNettPrice;  //fill sales price
      END;
    END;

    PROCEDURE SplitBaseRcpLine@1100528912(CostType@1100528900 : Integer;RcpLineRecOLD@1100528901 : Record 11012156;VAR RcpLineRecNEW@1100528902 : Record 11020582;VAR NumCostType@1100528903 : Integer);
    VAR
      ChrgRecOLD@1100528003 : Record 11012175;
      ChrgRecNEW@1100528002 : Record 11229771;
      CodeRecOLD@1100528001 : Record 11012194;
      CodeRecNEW@1100528000 : Record 11229772;
    BEGIN
      IF CostType >= 0 THEN  //db, 17-01-14: C012294
        NumCostType := NumCostType - 1;
      WITH RcpLineRecNEW DO BEGIN
        "Line No." := RcpLineRecOLD."Line No." + NumCostType;
        INSERT;  //C027548: db, 24-12-15 (CentralMgt)
        InitBaseRcpLine(RcpLineRecNEW);
        IF CostType >= 0 THEN
          AssignBaseRcpLine(RcpLineRecOLD, RcpLineRecNEW, CostType);
        //"Quantity (Sales)" := Quantity;
        //"Norm (Sales)" := Norm;
        //"Norm Group (Sales)" := "Norm Group";
        //db.sn, 24-02-14: C012367
        "Attached to Line No." := RcpLineRecOLD."Attached to Line No.";
        IF ("Line No." <> RcpLineRecOLD."Line No.") AND (RcpLineRecOLD."Attached to Line No." = 0) THEN
          "Attached to Line No." := RcpLineRecOLD."Line No.";
        //db.en, 24-02-14: C012367
        MODIFY(TRUE);  //C027548: db, 24-12-15 (CentralMgt)
      END;

      //db.sn, 16-04-15: C014713
      WITH RcpLineRecOLD DO BEGIN
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          ChrgRecOLD.SETFILTER("Estimate No.", '%1', '');
          ChrgRecOLD.SETFILTER("Sub-Estimate No.", '%1', '');
          ChrgRecOLD.SETFILTER("Part Group", '%1', '');
          ChrgRecOLD.SETFILTER(Part, '%1', '');
          ChrgRecOLD.SETRANGE("Basic Line", "Line No.");
          ChrgRecOLD.SETRANGE("Recipe Group", "Recipe Group");
          ChrgRecOLD.SETRANGE(Recipe, Recipe);
          ChrgRecOLD.SETRANGE("Recipe Line", 0);
          ChrgRecOLD.SETFILTER("Sales Document No.", '%1', '');
          ChrgRecOLD.SETRANGE("Sales Line No.", 0);
          IF ChrgRecOLD.FINDSET THEN BEGIN
            REPEAT
              ChrgRecNEW.TRANSFERFIELDS(ChrgRecOLD);
              IF RcpLineRecNEW."Attached to Line No." <> 0 THEN
                ChrgRecNEW."Basic Line" := RcpLineRecNEW."Line No.";
              IF ChrgRecNEW.INSERT THEN;
            UNTIL ChrgRecOLD.NEXT = 0;
          END;
        END;
        //
        CodeRecOLD.SETFILTER("Estimate No.", '%1', '');
        CodeRecOLD.SETFILTER("Sub-Estimate No.", '%1', '');
        CodeRecOLD.SETFILTER("Part Group", '%1', '');
        CodeRecOLD.SETFILTER(Part, '%1', '');
        CodeRecOLD.SETRANGE("Estimate Line", 0);
        CodeRecOLD.SETRANGE("Recipe Group", "Recipe Group");
        CodeRecOLD.SETRANGE(Recipe, Recipe);
        CodeRecOLD.SETRANGE("Recipe Line", "Line No.");
        IF CodeRecOLD.FINDSET THEN BEGIN
          REPEAT
            CodeRecNEW.TRANSFERFIELDS(CodeRecOLD);
            IF RcpLineRecNEW."Attached to Line No." <> 0 THEN
              CodeRecNEW."Recipe Line" := RcpLineRecNEW."Line No.";
            IF CodeRecNEW.INSERT THEN;
          UNTIL CodeRecOLD.NEXT = 0;
        END;
      END;
      //db.en, 16-04-15: C014713
    END;

    PROCEDURE InitBaseRcpLine@1100528913(VAR RcpLineRecNEW@1100528902 : Record 11020582);
    BEGIN
      WITH RcpLineRecNEW DO BEGIN
        "Cost Type (Price)" := "Cost Type (Price)"::" ";
        "Cost Object Labor" := '';
        "Cost Object Price" := '';
        //Labor
        "Sub Operation Code" := '';
        Norm := 0;
        "Production Rate" := 0;
        "Rate Code" := '';
        "Rate Type" := 0;
        "Team Size" := 0;
        "Cost Rate" := 0;
        "Sales Rate" := 0;
        //Material
        "Item No." := '';
        Manufacturer := '';
        "Basic Item" := '';
        "Vendor (Trade Item)" := '';
        "Trade Item" := '';
        "Gross Price" := 0;
        "Purchase Discount %" := 0;
        "Nett Cost Price" := 0;
        "Sales Discount %" := 0;
        "Nett Sales Price" := 0;
      END;
    END;

    PROCEDURE AssignBaseRcpLine@1100528914(RcpLineRecOLD@1100528902 : Record 11012156;VAR RcpLineRecNEW@1100528900 : Record 11020582;CostType@1100528903 : Integer);
    BEGIN
      WITH RcpLineRecNEW DO BEGIN
        IF CostType = 0 THEN BEGIN  //Labor
          "Cost Object Labor" := RcpLineRecOLD."Cost Object Labor";
          "Sub Operation Code" := RcpLineRecOLD."Sub Operation Code";
          Norm := RcpLineRecOLD.Norm;
          "Production Rate" := RcpLineRecOLD."Production Rate";
          "Rate Code" := RcpLineRecOLD."Rate Code";
          "Rate Type" := RcpLineRecOLD."Rate Type";
          "Team Size" := RcpLineRecOLD."Team Size";
          IF "Rate Code" <> '' THEN
            VALIDATE("Rate Code");
        END;
        IF CostType = 1 THEN BEGIN  //Material
          "Cost Type (Price)" := "Cost Type (Price)"::Material;
          "Cost Object Price" := RcpLineRecOLD."Cost Object Material";
          "Item No." := RcpLineRecOLD."Item No.";
          Manufacturer := RcpLineRecOLD.Manufacturer;
          "Basic Item" := RcpLineRecOLD."Basic Item";
          "Vendor (Trade Item)" := RcpLineRecOLD."Vendor (Trade Item)";
          "Trade Item" := RcpLineRecOLD."Trade Item";
          "Gross Price" := RcpLineRecOLD."Gross Price";
          "Purchase Discount %" := RcpLineRecOLD."Purchase Discount %";
          "Nett Cost Price" := RcpLineRecOLD."Material Price";
          "Sales Discount %" := RcpLineRecOLD."Sales Discount %";
          IF "Gross Price" = 0 THEN
            "Gross Price" := "Nett Cost Price";
        END;
        IF CostType = 2 THEN BEGIN  //Subcontracting
          "Cost Type (Price)" := "Cost Type (Price)"::Subcontracting;
          "Cost Object Price" := RcpLineRecOLD."Cost Object Subcontracting";
          "Gross Price" := RcpLineRecOLD."Subcontracting Price";
          "Nett Cost Price" := RcpLineRecOLD."Subcontracting Price";
        END;
        IF CostType = 3 THEN BEGIN  //Plant
          "Cost Type (Price)" := "Cost Type (Price)"::Plant;
          "Cost Object Price" := RcpLineRecOLD."Cost Object Plant";
          "Gross Price" := RcpLineRecOLD."Plant Price";
          "Nett Cost Price" := RcpLineRecOLD."Plant Price";
        END;
        IF CostType > 0 THEN
          CalculateNettPrice;  //fill sales price
        CalculateTotals;
      END;
    END;

    PROCEDURE SplitPartLine@1100528911(CostType@1100528900 : Integer;PartLineRecOLD@1100528901 : Record 11012187;VAR PartLineRecNEW@1100528902 : Record 11072076;VAR NumCostType@1100528903 : Integer);
    VAR
      ChrgRecOLD@1100528003 : Record 11012175;
      ChrgRecNEW@1100528002 : Record 11229771;
      CodeRecOLD@1100528001 : Record 11012194;
      CodeRecNEW@1100528000 : Record 11229772;
    BEGIN
      IF CostType >= 0 THEN  //db, 17-01-14: C012294
        NumCostType := NumCostType - 1;
      WITH PartLineRecNEW DO BEGIN
        "Line No." := PartLineRecOLD."Line No." + NumCostType;
        InitPartLine(PartLineRecNEW);
        IF CostType >= 0 THEN
          AssignPartLine(PartLineRecOLD, PartLineRecNEW, CostType);
        //"Quantity (Sales)" := Quantity;
        //"Norm (Sales)" := Norm;
        //"Norm Group (Sales)" := "Norm Group";
        //db.sn, 24-02-14: C012367
        "Attached to Line No." := 0;  //link between lines missing for Part Line OLD
        IF ("Line No." <> PartLineRecOLD."Line No.") THEN
          "Attached to Line No." := PartLineRecOLD."Line No.";
        //db.en, 24-02-14: C012367
        INSERT;
      END;

      //db.sn, 16-04-15: C014713
      WITH PartLineRecOLD DO BEGIN
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          ChrgRecOLD.SETFILTER("Estimate No.", '%1', '');
          ChrgRecOLD.SETFILTER("Sub-Estimate No.", '%1', '');
          ChrgRecOLD.SETRANGE("Part Group", "Part Group");
          ChrgRecOLD.SETRANGE(Part, Part);
          ChrgRecOLD.SETFILTER("Recipe Group", '%1', '');
          ChrgRecOLD.SETFILTER(Recipe, '%1', '');
          ChrgRecOLD.SETRANGE("Recipe Line", 0);
          ChrgRecOLD.SETRANGE("Basic Line", "Line No.");
          ChrgRecOLD.SETFILTER("Sales Document No.", '%1', '');
          ChrgRecOLD.SETRANGE("Sales Line No.", 0);
          IF ChrgRecOLD.FINDSET THEN BEGIN
            REPEAT
              ChrgRecNEW.TRANSFERFIELDS(ChrgRecOLD);
              IF PartLineRecNEW."Attached to Line No." <> 0 THEN
                ChrgRecNEW."Basic Line" := PartLineRecNEW."Line No.";
              IF ChrgRecNEW.INSERT THEN;
            UNTIL ChrgRecOLD.NEXT = 0;
          END;
        END;
        //
        CodeRecOLD.SETFILTER("Estimate No.", '%1', '');
        CodeRecOLD.SETFILTER("Sub-Estimate No.", '%1', '');
        CodeRecOLD.SETRANGE("Part Group", "Part Group");
        CodeRecOLD.SETRANGE(Part, Part);
        CodeRecOLD.SETRANGE("Estimate Line", "Line No.");
        CodeRecOLD.SETRANGE("Recipe Group", '%1', '');
        CodeRecOLD.SETRANGE(Recipe, '%1', '');
        CodeRecOLD.SETRANGE("Recipe Line", 0);
        IF CodeRecOLD.FINDSET THEN BEGIN
          REPEAT
            CodeRecNEW.TRANSFERFIELDS(CodeRecOLD);
            IF PartLineRecNEW."Attached to Line No." <> 0 THEN
              CodeRecNEW."Estimate Line" := PartLineRecNEW."Line No.";
            IF CodeRecNEW.INSERT THEN;
          UNTIL CodeRecOLD.NEXT = 0;
        END;
      END;
      //db.en, 16-04-15: C014713
    END;

    PROCEDURE InitPartLine@1100528916(VAR PartLineRecNEW@1100528902 : Record 11072076);
    BEGIN
      WITH PartLineRecNEW DO BEGIN
        "Cost Type (Price)" := "Cost Type (Price)"::" ";
        "Cost Object Labor" := '';
        "Cost Object Price" := '';
        //Labor
        "Sub Operation Code" := '';
        Norm := 0;
        "Rate Code" := '';
        //Material
        "Item No." := '';
        Manufacturer := '';
        "Basic Item" := '';
        "Vendor (Trade Item)" := '';
        "Trade Item" := '';
        "Gross Price" := 0;
        "Purchase Discount %" := 0;
        "Nett Cost Price" := 0;
      END;
    END;

    PROCEDURE AssignPartLine@1100528917(PartLineRecOLD@1100528902 : Record 11012187;VAR PartLineRecNEW@1100528900 : Record 11072076;CostType@1100528903 : Integer);
    BEGIN
      WITH PartLineRecNEW DO BEGIN
        IF CostType = 0 THEN BEGIN  //Labor
          "Cost Object Labor" := PartLineRecOLD."Cost Object Labor";
          "Sub Operation Code" := PartLineRecOLD."Sub Operation Code";
          Norm := PartLineRecOLD.Norm;
          "Rate Code" := PartLineRecOLD."Rate Code";
        END;
        IF CostType = 1 THEN BEGIN  //Material
          "Cost Type (Price)" := "Cost Type (Price)"::Material;
          "Cost Object Price" := PartLineRecOLD."Cost Object Material";
          "Item No." := PartLineRecOLD."Item No.";
          Manufacturer := PartLineRecOLD.Manufacturer;
          "Basic Item" := PartLineRecOLD."Basic Item";
          "Vendor (Trade Item)" := PartLineRecOLD."Vendor (Trade Item)";
          "Trade Item" := PartLineRecOLD."Trade Item";
          "Gross Price" := PartLineRecOLD."Gross Price";
          "Purchase Discount %" := PartLineRecOLD."Discount %";
          "Nett Cost Price" := PartLineRecOLD."Material Price";
          IF "Gross Price" = 0 THEN
            "Gross Price" := "Nett Cost Price";
        END;
        IF CostType = 2 THEN BEGIN  //Subcontracting
          "Cost Type (Price)" := "Cost Type (Price)"::Subcontracting;
          "Cost Object Price" := PartLineRecOLD."Cost Object Subcontracting";
          "Gross Price" := PartLineRecOLD."Subcontracting Price";
          "Nett Cost Price" := PartLineRecOLD."Subcontracting Price";
        END;
        IF CostType = 3 THEN BEGIN  //Plant
          "Cost Type (Price)" := "Cost Type (Price)"::Plant;
          "Cost Object Price" := PartLineRecOLD."Cost Object Plant";
          "Gross Price" := PartLineRecOLD."Plant Price";
          "Nett Cost Price" := PartLineRecOLD."Plant Price";
        END;
        IF CostType > 0 THEN
          CalculateNettPrice;  //fill sales price
      END;
    END;

    PROCEDURE CheckRecipeGroupExist@1100525000();
    VAR
      EstGroupRec@1100525000 : Record 11012157;
      RcpGroupRec@1100525001 : Record 11020580;
    BEGIN
      IF LastGroup <> "Recipe OLD"."Recipe Group" THEN BEGIN
        IF NOT EstGroupRec.GET("Recipe OLD"."Recipe Group", EstGroupRec.Type::Recipe) THEN EXIT;
        IF NOT RcpGroupRec.GET("Recipe OLD"."Recipe Group") THEN BEGIN
          RcpGroupRec.INIT;
          RcpGroupRec."No." := EstGroupRec."No.";
          RcpGroupRec.Description := EstGroupRec.Description;
          RcpGroupRec."External UOM Code (RAW)" := EstGroupRec."External UOM Code (RAW)";
          RcpGroupRec."Internal UOM Code (RAW)" := EstGroupRec."Internal UOM Code (RAW)";
          RcpGroupRec.INSERT;
        END;
      END;
      LastGroup := "Recipe OLD"."Recipe Group";
    END;

    PROCEDURE CheckAttachedEstLines@1100525001(iEstimate@1100525003 : Code[20]);
    VAR
      EstLineRec@1100525000 : Record 11072072;
      EstLineRec1@1100528003 : Record 11072072;
      EstLineRec2@1100528004 : Record 11072072;
      OrigEstLineRec@1100525001 : Record 11072072;
      EstLineTotal@1100525002 : Record 11072077;
      ChrgRec@1100528000 : Record 11229771;
      ChrgRec2@1100528002 : Record 11229771;
      CodeRec@1100528001 : Record 11229772;
      TempEstimateLine@1100525004 : TEMPORARY Record 11072072;
    BEGIN
      //db, 24-02-14: C012367
      EstLineRec.SETRANGE("Estimate No.", iEstimate);  //C026608
      EstLineRec.SETFILTER("Attached to Line No.", '<>0');
      IF EstLineRec.FINDSET THEN BEGIN
        REPEAT
      //C026608.sn
          TempEstimateLine := EstLineRec;
          TempEstimateLine.INSERT;
        UNTIL EstLineRec.NEXT = 0;
      IF TempEstimateLine.FINDSET THEN
        REPEAT
          EstLineRec := TempEstimateLine;
      //C026608.en
          IF OrigEstLineRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Attached to Line No.") THEN BEGIN
            IF (EstLineRec."Cost Type (Price)" <> EstLineRec."Cost Type (Price)"::" ") AND
               (OrigEstLineRec."Cost Type (Price)" = OrigEstLineRec."Cost Type (Price)"::" ") AND
               (OrigEstLineRec.Description = EstLineRec.Description) THEN BEGIN
              OrigEstLineRec."Cost Type (Price)" := EstLineRec."Cost Type (Price)";
              OrigEstLineRec."Cost Object Price" := EstLineRec."Cost Object Price";
              OrigEstLineRec."Item No." := EstLineRec."Item No.";
              OrigEstLineRec.Manufacturer := EstLineRec.Manufacturer;
              OrigEstLineRec."Basic Item" := EstLineRec."Basic Item";
              OrigEstLineRec."Vendor (Trade Item)" := EstLineRec."Vendor (Trade Item)";
              OrigEstLineRec."Trade Item" := EstLineRec."Trade Item";
              OrigEstLineRec."Gross Price" := EstLineRec."Gross Price";
              OrigEstLineRec."Purchase Discount %" := EstLineRec."Purchase Discount %";
              OrigEstLineRec."Nett Cost Price" := EstLineRec."Nett Cost Price";
              OrigEstLineRec."Sales Discount %" := EstLineRec."Sales Discount %";
              OrigEstLineRec."Nett Sales Price" := EstLineRec."Nett Sales Price";
              OrigEstLineRec.MODIFY;
              EstLineRec.DELETE;
              IF EstLineTotal.GET(EstLineRec."Estimate No.",EstLineRec."Sub-Estimate No.",
                EstLineRec."Part Group",EstLineRec.Part,EstLineRec."Line No.") THEN
                EstLineTotal.DELETE;  //db, 11-12-14: C019800
              //db.sn, 16-04-15: C014713
              ChrgRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
              ChrgRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
              ChrgRec.SETRANGE("Part Group", EstLineRec."Part Group");
              ChrgRec.SETRANGE(Part, EstLineRec.Part);
              ChrgRec.SETFILTER("Recipe Group", '%1', '');
              ChrgRec.SETFILTER(Recipe, '%1', '');
              ChrgRec.SETRANGE("Recipe Line",0);  //don't remove surcharge of recipe lines
              ChrgRec.SETRANGE("Basic Line", EstLineRec."Line No.");
              ChrgRec.SETFILTER("Sales Document No.", '%1', '');
              ChrgRec.SETRANGE("Sales Line No.", 0);
              IF NOT ChrgRec.ISEMPTY THEN //C026608.n
                ChrgRec.DELETEALL;
              //
              CodeRec.SETRANGE("Estimate No.", EstLineRec."Estimate No.");
              CodeRec.SETRANGE("Sub-Estimate No.", EstLineRec."Sub-Estimate No.");
              CodeRec.SETRANGE("Part Group", EstLineRec."Part Group");
              CodeRec.SETRANGE(Part, EstLineRec.Part);
              CodeRec.SETRANGE("Estimate Line", EstLineRec."Line No.");
              CodeRec.SETFILTER("Recipe Group", '%1', '');
              CodeRec.SETFILTER(Recipe, '%1', '');
              CodeRec.SETRANGE("Recipe Line", 0);
              IF NOT CodeRec.ISEMPTY THEN //C026608.n
                CodeRec.DELETEALL;
              //db.en, 16-04-15: C014713
            END;
          END;
      //UNTIL EstLineRec.NEXT = 0; //C026608.o
        UNTIL TempEstimateLine.NEXT = 0; //C026608.n
      END;

      //db.sn, 16-04-15: C014713
      ChrgRec2.SETRANGE("Estimate No.", iEstimate);  //C026608
      ChrgRec2.SETFILTER("Sub-Estimate No.", '<>%1', '');
      ChrgRec2.SETFILTER("Part Group", '<>%1', '');
      ChrgRec2.SETFILTER(Part, '<>%1', '');
      ChrgRec2.SETFILTER("Recipe Group", '%1', '');
      ChrgRec2.SETFILTER(Recipe, '%1', '');
      ChrgRec2.SETRANGE("Recipe Line", 0);
      ChrgRec2.SETFILTER("Sales Document No.", '%1', '');
      ChrgRec2.SETRANGE("Sales Line No.", 0);
      IF ChrgRec2.FINDSET THEN BEGIN
        REPEAT
          IF NOT EstLineRec1.GET(ChrgRec2."Estimate No.", ChrgRec2."Sub-Estimate No.",
            ChrgRec2."Part Group", ChrgRec2.Part, ChrgRec2."Basic Line") THEN
            EstLineRec1.INIT;
          IF NOT EstLineRec2.GET(ChrgRec2."Estimate No.", ChrgRec2."Sub-Estimate No.",
            ChrgRec2."Part Group", ChrgRec2.Part, ChrgRec2."Surcharge Line") THEN
            EstLineRec2.INIT;
          IF EstLineRec1."Cost Type (Price)" <>  EstLineRec2."Cost Type (Price)" THEN
            IF EstLineRec2."Surcharge Type" <> EstLineRec2."Surcharge Type"::Labor THEN
              ChrgRec2.DELETE;
        UNTIL ChrgRec2.NEXT = 0;
      END;
      //db.en, 16-04-15: C014713
    END;

    PROCEDURE CheckAttachedEstRcpLines@1100525002(iEstimate@1100525003 : Code[20]);
    VAR
      EstRcpLineRec@1100525000 : Record 11072075;
      EstRcpLineRec1@1100528003 : Record 11072075;
      EstRcpLineRec2@1100528004 : Record 11072075;
      OrigEstRcpLineRec@1100525001 : Record 11072075;
      ChrgRec@1100528001 : Record 11229771;
      ChrgRec2@1100528002 : Record 11229771;
      CodeRec@1100528000 : Record 11229772;
      TempEstimateRecipeLine@1100525002 : TEMPORARY Record 11072075;
    BEGIN
      //db, 24-02-14: C012367
      EstRcpLineRec.SETRANGE("Estimate No.", iEstimate);  //C026608
      EstRcpLineRec.SETFILTER("Attached to Line No.", '<>0');
      IF EstRcpLineRec.FINDSET THEN BEGIN
        REPEAT
      //C026608.sn
          TempEstimateRecipeLine := EstRcpLineRec;
          TempEstimateRecipeLine.INSERT;
        UNTIL EstRcpLineRec.NEXT = 0;
      IF TempEstimateRecipeLine.FINDSET THEN
        REPEAT
          EstRcpLineRec := TempEstimateRecipeLine;
      //C026608.en
          IF OrigEstRcpLineRec.GET(EstRcpLineRec."Estimate No.", EstRcpLineRec."Sub-Estimate No.",
            EstRcpLineRec."Part Group", EstRcpLineRec.Part,  EstRcpLineRec."Estimate Line",
            EstRcpLineRec."Recipe Group", EstRcpLineRec.Recipe, EstRcpLineRec."Attached to Line No.") THEN BEGIN
            IF (EstRcpLineRec."Cost Type (Price)" <> EstRcpLineRec."Cost Type (Price)"::" ") AND
               (OrigEstRcpLineRec."Cost Type (Price)" = OrigEstRcpLineRec."Cost Type (Price)"::" ") AND
               (OrigEstRcpLineRec.Description = EstRcpLineRec.Description) THEN BEGIN
              OrigEstRcpLineRec."Cost Type (Price)" := EstRcpLineRec."Cost Type (Price)";
              OrigEstRcpLineRec."Cost Object Price" := EstRcpLineRec."Cost Object Price";
              OrigEstRcpLineRec."Item No." := EstRcpLineRec."Item No.";
              OrigEstRcpLineRec.Manufacturer := EstRcpLineRec.Manufacturer;
              OrigEstRcpLineRec."Basic Item" := EstRcpLineRec."Basic Item";
              OrigEstRcpLineRec."Vendor (Trade Item)" := EstRcpLineRec."Vendor (Trade Item)";
              OrigEstRcpLineRec."Trade Item" := EstRcpLineRec."Trade Item";
              OrigEstRcpLineRec."Gross Price" := EstRcpLineRec."Gross Price";
              OrigEstRcpLineRec."Purchase Discount %" := EstRcpLineRec."Purchase Discount %";
              OrigEstRcpLineRec."Nett Cost Price" := EstRcpLineRec."Nett Cost Price";
              OrigEstRcpLineRec."Sales Discount %" := EstRcpLineRec."Sales Discount %";
              OrigEstRcpLineRec."Nett Sales Price" := EstRcpLineRec."Nett Sales Price";
              OrigEstRcpLineRec.MODIFY;
              EstRcpLineRec.DELETE;

              //db.sn, 16-04-15: C014713
              ChrgRec.SETRANGE("Estimate No.", EstRcpLineRec."Estimate No.");
              ChrgRec.SETRANGE("Sub-Estimate No.", EstRcpLineRec."Sub-Estimate No.");
              ChrgRec.SETRANGE("Part Group", EstRcpLineRec."Part Group");
              ChrgRec.SETRANGE(Part, EstRcpLineRec.Part);
              ChrgRec.SETRANGE("Recipe Group", EstRcpLineRec."Recipe Group");
              ChrgRec.SETRANGE(Recipe, EstRcpLineRec.Recipe);
              ChrgRec.SETRANGE("Recipe Line", EstRcpLineRec."Estimate Line");
              ChrgRec.SETRANGE("Basic Line", EstRcpLineRec."Line No.");
              ChrgRec.SETFILTER("Sales Document No.", '%1', '');
              ChrgRec.SETRANGE("Sales Line No.", 0);
              IF NOT ChrgRec.ISEMPTY THEN //C026608.n
                ChrgRec.DELETEALL;
              //
              CodeRec.SETRANGE("Estimate No.", EstRcpLineRec."Estimate No.");
              CodeRec.SETRANGE("Sub-Estimate No.", EstRcpLineRec."Sub-Estimate No.");
              CodeRec.SETRANGE("Part Group", EstRcpLineRec."Part Group");
              CodeRec.SETRANGE(Part, EstRcpLineRec.Part);
              CodeRec.SETRANGE("Estimate Line", EstRcpLineRec."Estimate Line");
              CodeRec.SETRANGE("Recipe Group", EstRcpLineRec."Recipe Group");
              CodeRec.SETRANGE(Recipe, EstRcpLineRec.Recipe);
              CodeRec.SETRANGE("Recipe Line", EstRcpLineRec."Line No.");
              IF NOT CodeRec.ISEMPTY THEN //C026608.n
                CodeRec.DELETEALL;
              //db.en, 16-04-15: C014713
            END;
          END;
      //UNTIL EstRcpLineRec.NEXT = 0; //C026608.o
        UNTIL TempEstimateRecipeLine.NEXT = 0; //C026608.n
      END;

      //db.sn, 16-04-15: C014713
      ChrgRec2.SETRANGE("Estimate No.", iEstimate);  //C026608
      ChrgRec2.SETFILTER("Sub-Estimate No.", '<>%1', '');
      ChrgRec2.SETFILTER("Part Group", '<>%1', '');
      ChrgRec2.SETFILTER(Part, '<>%1', '');
      ChrgRec2.SETFILTER("Recipe Group", '<>%1', '');
      ChrgRec2.SETFILTER(Recipe, '<>%1', '');
      ChrgRec2.SETFILTER("Recipe Line", '<>%1', 0);
      ChrgRec2.SETFILTER("Sales Document No.", '%1', '');
      ChrgRec2.SETRANGE("Sales Line No.", 0);
      IF ChrgRec2.FINDSET THEN BEGIN
        REPEAT
          //link: ChrgRec.SETRANGE("Recipe Line","Estimate Line");
          IF NOT EstRcpLineRec1.GET(ChrgRec2."Estimate No.", ChrgRec2."Sub-Estimate No.",
            ChrgRec2."Part Group", ChrgRec2.Part, ChrgRec2."Recipe Line",
            ChrgRec2."Recipe Group", ChrgRec2.Recipe, ChrgRec2."Basic Line") THEN
            EstRcpLineRec1.INIT;
          IF NOT EstRcpLineRec2.GET(ChrgRec2."Estimate No.", ChrgRec2."Sub-Estimate No.",
            ChrgRec2."Part Group", ChrgRec2.Part, ChrgRec2."Recipe Line",
            ChrgRec2."Recipe Group", ChrgRec2.Recipe, ChrgRec2."Surcharge Line") THEN
            EstRcpLineRec2.INIT;
          IF EstRcpLineRec1."Cost Type (Price)" <>  EstRcpLineRec2."Cost Type (Price)" THEN
            IF EstRcpLineRec2."Surcharge Type" <> EstRcpLineRec2."Surcharge Type"::Labor THEN
              ChrgRec2.DELETE;
        UNTIL ChrgRec2.NEXT = 0;
      END;
      //db.en, 16-04-15: C014713
    END;

    PROCEDURE CheckAttachedBaseRcpLines@1100525003(VAR RcpLineRecOLD@1100525003 : Record 11012156);
    VAR
      BaseRcpLineRec@1100525000 : Record 11020582;
      BaseRcpLineRec1@1100528003 : Record 11020582;
      BaseRcpLineRec2@1100528004 : Record 11020582;
      OrigBaseRcpLineRec@1100525001 : Record 11020582;
      ChrgRec@1100528001 : Record 11229771;
      ChrgRec2@1100528002 : Record 11229771;
      CodeRec@1100528000 : Record 11229772;
      TempBaseRecipeLine@1100525002 : TEMPORARY Record 11020582;
    BEGIN
      //db, 24-02-14: C012367
      BaseRcpLineRec.SETFILTER("Recipe Group", RcpLineRecOLD.GETFILTER("Recipe Group"));
      BaseRcpLineRec.SETFILTER(Recipe, RcpLineRecOLD.GETFILTER(Recipe));
      BaseRcpLineRec.SETFILTER("Attached to Line No.", '<>0');
      IF BaseRcpLineRec.FINDSET THEN BEGIN
        REPEAT
      //C026608.sn
          TempBaseRecipeLine := BaseRcpLineRec;
          TempBaseRecipeLine.INSERT;
        UNTIL BaseRcpLineRec.NEXT = 0;
      IF TempBaseRecipeLine.FINDSET THEN
        REPEAT
          BaseRcpLineRec := TempBaseRecipeLine;
      //C026608.en
          IF OrigBaseRcpLineRec.GET(BaseRcpLineRec."Recipe Group", BaseRcpLineRec.Recipe,
            BaseRcpLineRec."Attached to Line No.") THEN BEGIN
            IF (BaseRcpLineRec."Cost Type (Price)" <> BaseRcpLineRec."Cost Type (Price)"::" ") AND
               (OrigBaseRcpLineRec."Cost Type (Price)" = OrigBaseRcpLineRec."Cost Type (Price)"::" ") AND
               (OrigBaseRcpLineRec.Description = BaseRcpLineRec.Description) THEN BEGIN
              OrigBaseRcpLineRec."Cost Type (Price)" := BaseRcpLineRec."Cost Type (Price)";
              OrigBaseRcpLineRec."Cost Object Price" := BaseRcpLineRec."Cost Object Price";
              OrigBaseRcpLineRec."Item No." := BaseRcpLineRec."Item No.";
              OrigBaseRcpLineRec.Manufacturer := BaseRcpLineRec.Manufacturer;
              OrigBaseRcpLineRec."Basic Item" := BaseRcpLineRec."Basic Item";
              OrigBaseRcpLineRec."Vendor (Trade Item)" := BaseRcpLineRec."Vendor (Trade Item)";
              OrigBaseRcpLineRec."Trade Item" := BaseRcpLineRec."Trade Item";
              OrigBaseRcpLineRec."Gross Price" := BaseRcpLineRec."Gross Price";
              OrigBaseRcpLineRec."Purchase Discount %" := BaseRcpLineRec."Purchase Discount %";
              OrigBaseRcpLineRec."Nett Cost Price" := BaseRcpLineRec."Nett Cost Price";
              OrigBaseRcpLineRec."Sales Discount %" := BaseRcpLineRec."Sales Discount %";
              OrigBaseRcpLineRec."Nett Sales Price" := BaseRcpLineRec."Nett Sales Price";
              OrigBaseRcpLineRec.MODIFY;
              BaseRcpLineRec.DELETE;
              //db.sn, 16-04-15: C014713
              ChrgRec.SETFILTER("Estimate No.", '%1', '');
              ChrgRec.SETFILTER("Sub-Estimate No.", '%1', '');
              ChrgRec.SETFILTER("Part Group", '%1', '');
              ChrgRec.SETFILTER(Part, '%1', '');
              ChrgRec.SETRANGE("Recipe Group", BaseRcpLineRec."Recipe Group");
              ChrgRec.SETRANGE(Recipe, BaseRcpLineRec.Recipe);
              ChrgRec.SETRANGE("Recipe Line", 0);
              ChrgRec.SETRANGE("Basic Line", BaseRcpLineRec."Line No.");
              ChrgRec.SETFILTER("Sales Document No.", '%1', '');
              ChrgRec.SETRANGE("Sales Line No.", 0);
              IF NOT ChrgRec.ISEMPTY THEN //C026608.n
                ChrgRec.DELETEALL;
              //
              CodeRec.SETFILTER("Estimate No.", '%1', '');
              CodeRec.SETFILTER("Sub-Estimate No.", '%1', '');
              CodeRec.SETFILTER("Part Group", '%1', '');
              CodeRec.SETFILTER(Part, '%1', '');
              CodeRec.SETRANGE("Estimate Line", 0);
              CodeRec.SETRANGE("Recipe Group", BaseRcpLineRec."Recipe Group");
              CodeRec.SETRANGE(Recipe, BaseRcpLineRec.Recipe);
              CodeRec.SETRANGE("Recipe Line", BaseRcpLineRec."Line No.");
              IF NOT CodeRec.ISEMPTY THEN //C026608.n
                CodeRec.DELETEALL;
              //db.en, 16-04-15: C014713
            END;
          END;
      //UNTIL BaseRcpLineRec.NEXT = 0; //C026608.o
        UNTIL TempBaseRecipeLine.NEXT = 0; //C026608.n
      END;

      //db.sn, 16-04-15: C014713
      ChrgRec2.SETFILTER("Estimate No.", '%1', '');
      ChrgRec2.SETFILTER("Sub-Estimate No.", '%1', '');
      ChrgRec2.SETFILTER("Part Group", '%1', '');
      ChrgRec2.SETFILTER(Part, '%1', '');
      ChrgRec2.SETFILTER("Recipe Group", RcpLineRecOLD.GETFILTER("Recipe Group"));
      ChrgRec2.SETFILTER(Recipe, RcpLineRecOLD.GETFILTER(Recipe));
      ChrgRec2.SETRANGE("Recipe Line", 0);
      ChrgRec2.SETFILTER("Sales Document No.", '%1', '');
      ChrgRec2.SETRANGE("Sales Line No.", 0);
      IF ChrgRec2.FINDSET THEN BEGIN
        REPEAT
          IF NOT BaseRcpLineRec1.GET(ChrgRec2."Recipe Group", ChrgRec2.Recipe, ChrgRec2."Basic Line") THEN
            BaseRcpLineRec1.INIT;
          IF NOT BaseRcpLineRec2.GET(ChrgRec2."Recipe Group", ChrgRec2.Recipe, ChrgRec2."Surcharge Line") THEN
            BaseRcpLineRec2.INIT;
          IF BaseRcpLineRec1."Cost Type (Price)" <>  BaseRcpLineRec2."Cost Type (Price)" THEN
            IF BaseRcpLineRec2."Surcharge Type" <> BaseRcpLineRec2."Surcharge Type"::Labor THEN
              ChrgRec2.DELETE;
        UNTIL ChrgRec2.NEXT = 0;
      END;
      //db.en, 16-04-15: C014713
    END;

    PROCEDURE CheckAttachedPartLines@1100525004(VAR PartLineRecOLD@1100525003 : Record 11012187);
    VAR
      PartLineRec@1100525000 : Record 11072076;
      PartLineRec1@1100528003 : Record 11072076;
      PartLineRec2@1100528004 : Record 11072076;
      OrigPartLineRec@1100525001 : Record 11072076;
      ChrgRec@1100528001 : Record 11229771;
      ChrgRec2@1100528002 : Record 11229771;
      CodeRec@1100528000 : Record 11229772;
      TempPartLine@1100525002 : TEMPORARY Record 11072076;
    BEGIN
      //db, 24-02-14: C012367
      PartLineRec.SETFILTER("Part Group", PartLineRecOLD.GETFILTER("Part Group"));
      PartLineRec.SETFILTER(Part, PartLineRecOLD.GETFILTER(Part));
      PartLineRec.SETFILTER("Attached to Line No.", '<>0');
      IF PartLineRec.FINDSET THEN BEGIN
        REPEAT
      //C026608.sn
          TempPartLine := PartLineRec;
          TempPartLine.INSERT;
        UNTIL PartLineRec.NEXT = 0;
      IF TempPartLine.FINDSET THEN
        REPEAT
          PartLineRec := TempPartLine;
      //C026608.en
          IF OrigPartLineRec.GET(PartLineRec."Part Group", PartLineRec.Part,
            PartLineRec."Attached to Line No.") THEN BEGIN
            IF (PartLineRec."Cost Type (Price)" <> PartLineRec."Cost Type (Price)"::" ") AND
               (OrigPartLineRec."Cost Type (Price)" = OrigPartLineRec."Cost Type (Price)"::" ") AND
               (OrigPartLineRec.Description = PartLineRec.Description) THEN BEGIN
              OrigPartLineRec."Cost Type (Price)" := PartLineRec."Cost Type (Price)";
              OrigPartLineRec."Cost Object Price" := PartLineRec."Cost Object Price";
              OrigPartLineRec."Item No." := PartLineRec."Item No.";
              OrigPartLineRec.Manufacturer := PartLineRec.Manufacturer;
              OrigPartLineRec."Basic Item" := PartLineRec."Basic Item";
              OrigPartLineRec."Vendor (Trade Item)" := PartLineRec."Vendor (Trade Item)";
              OrigPartLineRec."Trade Item" := PartLineRec."Trade Item";
              OrigPartLineRec."Gross Price" := PartLineRec."Gross Price";
              OrigPartLineRec."Purchase Discount %" := PartLineRec."Purchase Discount %";
              OrigPartLineRec."Nett Cost Price" := PartLineRec."Nett Cost Price";
              OrigPartLineRec."Nett Sales Price" := PartLineRec."Nett Sales Price";
              OrigPartLineRec.MODIFY;
              PartLineRec.DELETE;
              //db.sn, 16-04-15: C014713
              ChrgRec.SETFILTER("Estimate No.", '%1', '');
              ChrgRec.SETFILTER("Sub-Estimate No.", '%1', '');
              ChrgRec.SETRANGE("Part Group", PartLineRec."Part Group");
              ChrgRec.SETRANGE(Part, PartLineRec.Part);
              ChrgRec.SETFILTER("Recipe Group", '%1', '');
              ChrgRec.SETFILTER(Recipe, '%1', '');
              ChrgRec.SETRANGE("Recipe Line",0);
              ChrgRec.SETRANGE("Basic Line", PartLineRec."Line No.");
              ChrgRec.SETFILTER("Sales Document No.", '%1', '');
              ChrgRec.SETRANGE("Sales Line No.", 0);
              IF NOT ChrgRec.ISEMPTY THEN //C026608.n
                ChrgRec.DELETEALL;
              //
              CodeRec.SETFILTER("Estimate No.", '%1', '');
              CodeRec.SETFILTER("Sub-Estimate No.", '%1', '');
              CodeRec.SETRANGE("Part Group", PartLineRec."Part Group");
              CodeRec.SETRANGE(Part, PartLineRec.Part);
              CodeRec.SETRANGE("Estimate Line", PartLineRec."Line No.");
              CodeRec.SETFILTER("Recipe Group", '%1', '');
              CodeRec.SETFILTER(Recipe, '%1', '');
              CodeRec.SETRANGE("Recipe Line", 0);
              IF NOT CodeRec.ISEMPTY THEN //C026608.n
                CodeRec.DELETEALL;
              //db.en, 16-04-15: C014713
            END;
          END;
      //UNTIL PartLineRec.NEXT = 0; //C026608.o
        UNTIL TempPartLine.NEXT = 0; //C026608.n
      END;

      //db.sn, 16-04-15: C014713
      ChrgRec2.SETFILTER("Estimate No.", '%1', '');
      ChrgRec2.SETFILTER("Sub-Estimate No.", '%1', '');
      ChrgRec2.SETFILTER("Part Group", PartLineRecOLD.GETFILTER("Part Group"));
      ChrgRec2.SETFILTER(Part, PartLineRecOLD.GETFILTER(Part));
      ChrgRec2.SETFILTER("Recipe Group", '%1', '');
      ChrgRec2.SETFILTER(Recipe, '%1', '');
      ChrgRec2.SETRANGE("Recipe Line",0);
      ChrgRec2.SETFILTER("Sales Document No.", '%1', '');
      ChrgRec2.SETRANGE("Sales Line No.", 0);
      IF ChrgRec2.FINDSET THEN BEGIN
        REPEAT
          IF NOT PartLineRec1.GET(ChrgRec2."Part Group", ChrgRec2.Part, ChrgRec2."Basic Line") THEN
            PartLineRec1.INIT;
          IF NOT PartLineRec2.GET(ChrgRec2."Part Group", ChrgRec2.Part, ChrgRec2."Surcharge Line") THEN
            PartLineRec2.INIT;
          IF PartLineRec1."Cost Type (Price)" <>  PartLineRec2."Cost Type (Price)" THEN
            IF PartLineRec2."Surcharge Type" <> PartLineRec2."Surcharge Type"::Labor THEN
              ChrgRec2.DELETE;
        UNTIL ChrgRec2.NEXT = 0;
      END;
      //db.en, 16-04-15: C014713
    END;

    PROCEDURE InitCustomerSurcharges@1100525005();
    BEGIN
      //C026608.sn
      IF InitCustomerSurcharge = 0 THEN
        EXIT;
      //C026608.en
      IF InitCustomerSurcharge = InitCustomerSurcharge::CopyFromEstimate THEN
        EstSetup.GET;
      IF InitCustomerSurcharge = InitCustomerSurcharge::CopyFromTemplate THEN
        CustTemplateRec.GET(CustTemplate);

      IF CustRec.FINDSET THEN BEGIN
        REPEAT
          IF InitCustomerSurcharge = InitCustomerSurcharge::CopySurchargeCPE THEN BEGIN
            CustRec."Surcharge % Labor (Est)" := CustRec."Surcharge % Labor";
            CustRec."Surcharge % Material (Est)" := CustRec."Surcharge % Material";
            CustRec."Surcharge % Subcontr. (Est)" := CustRec."Surcharge % Subcontr.";
            CustRec."Surcharge % Plant (Est)" := CustRec."Surcharge % Plant";
            CustRec."Surcharge % Sundry (Est)":= CustRec."Surcharge % Sundry";
            CustRec."Item Price Estimate":= CustRec."Item Price Cost Plus Project";
          END;
          IF InitCustomerSurcharge = InitCustomerSurcharge::CopyFromEstimate THEN BEGIN
            CustRec."Surcharge % Labor (Est)" := EstSetup."Surcharge % Labor";
            CustRec."Surcharge % Material (Est)" := EstSetup."Surcharge % Material";
            CustRec."Surcharge % Subcontr. (Est)" := EstSetup."Surcharge % Subcontracting";
            CustRec."Surcharge % Plant (Est)" := EstSetup."Surcharge % Plant";
            CustRec."Surcharge % Sundry (Est)":= EstSetup."Surcharge % Sundry";
            CustRec."Item Price Estimate":= EstSetup."Item Sales Price Based On";
          END;
          IF InitCustomerSurcharge = InitCustomerSurcharge::CopyFromTemplate THEN BEGIN
            CustRec."Surcharge % Labor (Est)" := CustTemplateRec."Surcharge % Labor (Est)";
            CustRec."Surcharge % Material (Est)" := CustTemplateRec."Surcharge % Material (Est)";
            CustRec."Surcharge % Subcontr. (Est)" := CustTemplateRec."Surcharge % Subcontr. (Est)";
            CustRec."Surcharge % Plant (Est)" := CustTemplateRec."Surcharge % Plant (Est)";
            CustRec."Surcharge % Sundry (Est)":= CustTemplateRec."Surcharge % Sundry (Est)";
            CustRec."Item Price Estimate":= CustTemplateRec."Item Price Estimate";
          END;
          CustRec.MODIFY;
        UNTIL CustRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateEstimate@1100525006();
    BEGIN
      WITH Estimate DO BEGIN
        //db.sn, 29-08-14: C017322
        EstSetup.GET;
        "Item Sales Price Based On" := EstSetup."Item Sales Price Based On";
        IF "Item Sales Price Based On" = "Item Sales Price Based On"::CostPrice THEN BEGIN  //db, 30-12-14: C020075
          "Surcharge % Labor" := EstSetup."Surcharge % Labor";
          "Surcharge % Material" := EstSetup."Surcharge % Material";
          "Surcharge % Subcontracting" := EstSetup."Surcharge % Subcontracting";
          "Surcharge % Plant" := EstSetup."Surcharge % Plant";
          "Surcharge % Sundry":= EstSetup."Surcharge % Sundry";
        END;
        IF CustRec.GET("Customer No.") THEN BEGIN
          "Item Sales Price Based On" := CustRec."Item Price Estimate";
          IF "Item Sales Price Based On" = "Item Sales Price Based On"::CostPrice THEN BEGIN  //db, 30-12-14: C020075
            "Surcharge % Labor" := CustRec."Surcharge % Labor (Est)";
            "Surcharge % Material" := CustRec."Surcharge % Material (Est)";
            "Surcharge % Subcontracting" := CustRec."Surcharge % Subcontr. (Est)";
            "Surcharge % Plant" := CustRec."Surcharge % Plant (Est)";
            "Surcharge % Sundry":= CustRec."Surcharge % Sundry (Est)";
          END;
        END;
        //db.en, 29-08-14: C017322

        //db.sn, 28-02-14: C013444
        IF "Summary Source (Sales)" = '' THEN BEGIN
          "Summary Source (Sales)" := EstSetup."Summary Source (Sales)";
        END;
        //db.en, 28-02-14: C013444

        GetSalesRate;
        CLEAR("Estimate Type");
        "Rate Group" := '';
        "Copied from Cost Estimate" := '';
        Converted := TRUE;
        "Estimate Project" := FALSE;  //db, 15-05-15
        MODIFY;
      END;
    END;

    PROCEDURE CheckDataPresentEstimate@1100525007();
    VAR
      SubEstRecNEW@1100525000 : Record 11072074;
    BEGIN
      //db, 28-01-15: C020406
      SubEstRecNEW.SETRANGE("Estimate No.", Estimate."No.");
      IF SubEstRecNEW.FINDFIRST THEN
        ERROR(Text001, SubEstRecNEW."Estimate No.");
    END;

    PROCEDURE CheckDataPresentBaseRecipe@1100525009();
    VAR
      RcpLineRecNEW@1100525001 : Record 11020582;
    BEGIN
      //db, 28-01-15: C020406
      RcpLineRecNEW.SETRANGE("Recipe Group", "Recipe OLD"."Recipe Group");
      RcpLineRecNEW.SETRANGE(Recipe, "Recipe OLD"."No.");
      IF RcpLineRecNEW.FINDFIRST THEN
        ERROR(Text002, RcpLineRecNEW.Recipe);
    END;

    PROCEDURE CheckDataPresentBasePart@1100525010();
    VAR
      PartLineRecNEW@1100525001 : Record 11072076;
    BEGIN
      //db, 28-01-15: C020406
      PartLineRecNEW.SETRANGE("Part Group", "Estimate Base Part"."Part Group");
      PartLineRecNEW.SETRANGE(Part, "Estimate Base Part".Code);
      IF PartLineRecNEW.FINDFIRST THEN
        ERROR(Text003, PartLineRecNEW.Part);
    END;

    BEGIN
    {
      db, 28-01-15: C020406 delete-actions moved to new report (11229777)
    }
    END.
  }
  RDLDATA
  {
  }
}

