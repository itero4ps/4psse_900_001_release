OBJECT Report 15000300 Create Recurring Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO7.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Recurring Orders;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   HideError := TRUE;
                 END;

  }
  DATASET
  {
    { 6640;    ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Blanket Order),
                                       Recurring Group Code=FILTER(<>''));
               OnPreDataItem=BEGIN
                               IF ProcessingDate = 0D THEN
                                 ERROR(Text001);
                               OrderCounter := 0;
                               ErrorCounter := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  // Select orders that don't recur
                                  RecurringGroup.GET("Recurring Group Code");
                                  IF HideError THEN BEGIN
                                    IF "Order Date" > ProcessingDate THEN
                                      CurrReport.SKIP;
                                    IF (RecurringGroup."Starting date" > ProcessingDate) OR
                                       ((RecurringGroup."Closing date" < ProcessingDate) AND (RecurringGroup."Closing date" <> 0D))
                                    THEN
                                      CurrReport.SKIP;
                                    IF "Deactivate recurrence" THEN
                                      CurrReport.SKIP;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF ErrorCounter = 0 THEN
                                  MESSAGE(Text002,OrderCounter)
                                ELSE
                                  IF CONFIRM(
                                       Text003,
                                       TRUE,OrderCounter,ErrorCounter)
                                  THEN BEGIN
                                    "Sales Header".MARKEDONLY(TRUE);
                                    OrderOverview.SETTABLEVIEW("Sales Header");
                                    OrderOverview.RUNMODAL;
                                  END;
                              END;

               ReqFilterFields=Recurring Group Code,No. }

    { 3269;1   ;DataItem;RecurringOrder      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnAfterGetRecord=BEGIN
                                  StoreOrderDate := "Sales Header"."Order Date";
                                  BlanketOrderToOrder.Initialize(ProcessingDate,CreateLatest);
                                  IF HideError THEN
                                    IF BlanketOrderToOrder.RUN("Sales Header") THEN
                                      OrderCounter := OrderCounter + 1
                                    ELSE BEGIN
                                      ErrorCounter := ErrorCounter + 1;
                                      "Sales Header".MARK(TRUE);
                                    END
                                  ELSE BEGIN
                                    BlanketOrderToOrder.RUN("Sales Header");
                                    OrderCounter := OrderCounter + 1;
                                  END;

                                  // Check if the order recurs
                                  // Stop if the date is overwritten or if the order date is not moved (Date formula is for inst. 0D):
                                  IF ("Sales Header"."Order Date" > ProcessingDate) OR (StoreOrderDate = "Sales Header"."Order Date") THEN
                                    CurrReport.BREAK;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   ProcessingDate := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  CaptionML=ENU=Processing Date;
                  SourceExpr=ProcessingDate }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Create only latest;
                  SourceExpr=CreateLatest }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      RecurringGroup@1080001 : Record 15000300;
      BlanketOrderToOrder@1080002 : Codeunit 15000300;
      OrderOverview@1080003 : Page 15000303;
      OrderCounter@1080004 : Integer;
      ErrorCounter@1080005 : Integer;
      ProcessingDate@1080006 : Date;
      CreateLatest@1080007 : Boolean;
      HideError@1080008 : Boolean;
      StoreOrderDate@1080009 : Date;
      Text001@1080000 : TextConst 'ENU=You must specify a processing date.';
      Text002@1080012 : TextConst 'ENU=%1 orders are created.';
      Text003@1080011 : TextConst 'ENU=%1 orders are created.\An error occured. %2 orders were not created.\\Do you want to view recurring orders?';

    PROCEDURE SetHiddenError@1(NewHiddenError@1080000 : Boolean);
    BEGIN
      HideError := NewHiddenError;
    END;

    PROCEDURE SetCreatingDate@2(NewProcessingDate@1080000 : Date);
    BEGIN
      ProcessingDate := NewProcessingDate;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

