OBJECT Report 698 Get Sales Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00,4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Get Sales Orders;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  SalesSetup.GET; //**4PS.n dp00114

                  ReqWkshTmpl.GET(ReqLine."Worksheet Template Name");
                  ReqWkshName.GET(ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name");
                  ReqLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
                  ReqLine.SETRANGE("Journal Batch Name",ReqLine."Journal Batch Name");
                  ReqLine.LOCKTABLE;
                  IF ReqLine.FINDLAST THEN BEGIN
                    ReqLine.INIT;
                    LineNo := ReqLine."Line No.";
                  END;
                  Window.OPEN(Text000);
                END;

  }
  DATASET
  {
    { 2844;    ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Document Type=CONST(Order),
                                       Purch. Order Line No.=CONST(0),
                                       Outstanding Quantity=FILTER(<>0));
               ReqFilterHeadingML=ENU=Sales Order Line;
               OnAfterGetRecord=BEGIN
                                  //**4PS.en dp00114
                                  IF SalesSetup."Release Sales Orders Required" THEN
                                    IF SalesHeader.GET("Sales Line"."Document Type","Sales Line"."Document No.") THEN
                                      IF SalesHeader.Status <> SalesHeader.Status::Released THEN
                                        CurrReport.SKIP;
                                  //**4PS.en dp00114

                                  IF ("Purchasing Code" = '') AND (SpecOrder <> 1)THEN
                                    IF "Drop Shipment" THEN BEGIN
                                      LineCount := LineCount + 1;
                                      Window.UPDATE(1,LineCount);
                                      InsertReqWkshLine("Sales Line");
                                    END;

                                  IF "Purchasing Code" <> '' THEN
                                    IF PurchasingCode.GET("Purchasing Code") THEN
                                      IF PurchasingCode."Drop Shipment" AND (SpecOrder <> 1) THEN BEGIN
                                        LineCount := LineCount + 1;
                                        Window.UPDATE(1,LineCount);
                                        InsertReqWkshLine("Sales Line");
                                      END ELSE
                                        IF PurchasingCode."Special Order" AND
                                           ("Special Order Purchase No." = '') AND
                                           (SpecOrder <> 0)
                                        THEN BEGIN
                                          LineCount := LineCount + 1;
                                          Window.UPDATE(1,LineCount);
                                          InsertReqWkshLine("Sales Line");
                                        END;
                                END;

               OnPostDataItem=BEGIN
                                IF LineCount = 0 THEN
                                  ERROR(Text001);
                              END;

               ReqFilterFields=Document No.,Sell-to Customer No.,No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  CaptionML=ENU=Retrieve dimensions from;
                  OptionCaptionML=ENU=Item,Sales Line;
                  SourceExpr=GetDim }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing sales lines  #1######';
      Text001@1001 : TextConst 'ENU=There are no sales lines to retrieve.';
      ReqWkshTmpl@1002 : Record 244;
      ReqWkshName@1003 : Record 245;
      ReqLine@1004 : Record 246;
      SalesHeader@1005 : Record 36;
      PurchasingCode@1009 : Record 5721;
      SalesSetup@1100528800 : Record 311;
      ItemTrackingMgt@1011 : Codeunit 6500;
      LeadTimeMgt@1012 : Codeunit 5404;
      Window@1006 : Dialog;
      LineCount@1007 : Integer;
      SpecOrder@1010 : Integer;
      GetDim@1008 : 'Item,Sales Line';
      LineNo@1013 : Integer;

    PROCEDURE SetReqWkshLine@1(NewReqLine@1000 : Record 246;SpecialOrder@1001 : Integer);
    BEGIN
      ReqLine := NewReqLine;
      SpecOrder := SpecialOrder;
    END;

    LOCAL PROCEDURE InsertReqWkshLine@2(SalesLine@1000 : Record 37);
    BEGIN
      ReqLine.RESET;
      ReqLine.SETCURRENTKEY(Type,"No.");
      ReqLine.SETRANGE(Type,"Sales Line".Type);
      ReqLine.SETRANGE("No.","Sales Line"."No.");
      ReqLine.SETRANGE("Sales Order No.","Sales Line"."Document No.");
      ReqLine.SETRANGE("Sales Order Line No.","Sales Line"."Line No.");
      IF ReqLine.FINDFIRST THEN
        EXIT;

      LineNo := LineNo + 10000;
      CLEAR(ReqLine);
      ReqLine.SetDropShipment(SalesLine."Drop Shipment");
      WITH ReqLine DO BEGIN
        INIT;
        "Worksheet Template Name" := ReqWkshName."Worksheet Template Name";
        "Journal Batch Name" := ReqWkshName.Name;
        "Line No." := LineNo;
        VALIDATE(Type,SalesLine.Type);
        //**4PS.sn (db, 03-07-14: C002114, SpecialOrder TradeItem)
        "Project No." := SalesLine."Job No.";
        "Service Order No." := SalesLine."Service Order No.";
        IF SalesLine."Trade Item" <> '' THEN BEGIN
          "Vendor (Trade Item)" := SalesLine."Vendor (Trade Item)";
          VALIDATE("Trade Item", SalesLine."Trade Item");
        END;
        "Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
        IF "Project No." + "Service Order No." <> '' THEN BEGIN
          GetWipAccount;
          VALIDATE("No.");
        END ELSE BEGIN
          SalesLine.TESTFIELD("No.");  //db, 08-07-14
          VALIDATE("No.",SalesLine."No.");
        END;
        //**4PS.en
        "Variant Code" := SalesLine."Variant Code";
        VALIDATE("Location Code",SalesLine."Location Code");
        "Bin Code" := SalesLine."Bin Code";
        Description := SalesLine.Description; //**4PS.n

        // Drop Shipment means replenishment by purchase only
        IF ("Replenishment System" <> "Replenishment System"::Purchase) AND
           SalesLine."Drop Shipment"
        THEN
          VALIDATE("Replenishment System","Replenishment System"::Purchase);

        IF SpecOrder <> 1 THEN
          VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
        VALIDATE(
          Quantity,
          ROUND(SalesLine."Outstanding Quantity" * SalesLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure",0.00001));
        "Sales Order No." := SalesLine."Document No.";
        "Sales Order Line No." := SalesLine."Line No.";
        "Sell-to Customer No." := SalesLine."Sell-to Customer No.";
        Description := SalesLine.Description;
        "Description 2" := SalesLine."Description 2";
        SalesHeader.GET(1,SalesLine."Document No.");
        IF SpecOrder <> 1 THEN
          "Ship-to Code" := SalesHeader."Ship-to Code";
        "Item Category Code" := SalesLine."Item Category Code";
        Nonstock := SalesLine.Nonstock;
        "Action Message" := "Action Message"::New;
        "Product Group Code" := SalesLine."Product Group Code";
        "Purchasing Code" := SalesLine."Purchasing Code";
        // Backward Scheduling
        "Due Date" := SalesLine."Shipment Date";
        IF Type = Type::Item THEN BEGIN  //**4PS.n (db, 03-07-14: C002114, SpecialOrder TradeItem)
          "Ending Date" :=
            LeadTimeMgt.PlannedEndingDate(
              "No.","Location Code","Variant Code","Due Date","Vendor No.","Ref. Order Type");
          CalcStartingDate('');
        END;  //**4PS.n
        UpdateDatetime;
        //**4PS.sn
        VALIDATE("Unit Price (LCY)", SalesLine."Unit Cost (LCY)");
        VALIDATE("Direct Unit Cost", SalesLine."Unit Cost (LCY)");
        //**4PS.en

        INSERT;
        ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,RowID1,TRUE);
        IF GetDim = GetDim::"Sales Line" THEN BEGIN
          "Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
          "Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
          "Dimension Set ID" := SalesLine."Dimension Set ID";
          MODIFY;
        END;
      END;
    END;

    PROCEDURE InitializeRequest@3(NewRetrieveDimensionsFrom@1000 : Option);
    BEGIN
      GetDim := NewRetrieveDimensionsFrom;
    END;

    BEGIN
    {
      db, 03-07-14: C002114, Type=Item removed in DataItemTableView.
    }
    END.
  }
  RDLDATA
  {
  }
}

