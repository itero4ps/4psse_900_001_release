OBJECT Report 78777 PGL Export 2
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00.BK.OK;
  }
  PROPERTIES
  {
    CaptionML=ENU=PGL Export 2;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   // 4PS TRU 15-04-2010 BEGIN
                   // ExcludeSubProjClosedInPrevYear := TRUE;
                   // 4PS TRU 15-04-2010 END
                 END;

    OnPreReport=BEGIN
                  JobFilter := Job.GETFILTERS;
                  Dim1Filter := Job.GETFILTER("Global Dimension 1 Code");
                END;

    OnPostReport=BEGIN
                   //xlApp.ActiveWorkbook.Save;
                   xlApp.Calculation := xlCalculationAutomatic;
                   xlApp.ActiveWindow.Zoom := 100;
                   xlApp.Visible := TRUE;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(Main Project);
               OnPreDataItem=VAR
                               ColCount@1000000000 : Integer;
                               ltxtPeriod@1000000001 : Text[2];
                             BEGIN
                               IF CumulationFilterTxt <> '' THEN
                                 SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,'');

                               CREATE(xlApp, FALSE, TRUE);

                               xlBook := xlApp.Workbooks.Open(Filename);
                               xlApp.Calculation := xlCalculationManual;
                               xlApp.DisplayAlerts := FALSE;
                               xlSheet := xlApp.Worksheets.Item(Sheetname);
                               xlSheet.Range('M2:AN3').ClearContents;
                               xlSheet.Range('M2:AN3').NumberFormat := FORMAT('dd-mm-jjjj');
                               xlSheet.Range('A7:AN9999').ClearContents;
                               xlSheet.Range('A7:AN9999').Interior.ColorIndex := 0;
                               xlSheet.Range('A7:AN9999').Font.ColorIndex := 0;
                               xlApp.ActiveWindow.FreezePanes := FALSE;
                               xlSheet.Range('D7').Select;
                               xlApp.ActiveWindow.FreezePanes := TRUE;
                               xlSheet.Range('A:A').ColumnWidth := 10.41;
                               xlSheet.Range('A1').Value := 'Projectgegevenslijst (PGL 2) '+ COMPANYNAME;
                               xlSheet.Range('J:GZ').ColumnWidth := 12;

                               Window.OPEN('Rapport voortgang @1@@@@@@@@');

                               IF DatFilterEnd = 0D THEN
                                 ERROR(Text004);

                               IYear := DATE2DMY(DatFilterEnd,3);
                               IMonth := DATE2DMY(DatFilterEnd,2);

                               PeriodStartingDate := DMY2DATE(1,1,IYear);
                               AccountingPeriod.RESET;
                               IF NOT AccountingPeriod.GET(PeriodStartingDate) THEN
                                 ERROR(Text005);

                               AccountingPeriod2.SETFILTER("Starting Date",'>=%1',AccountingPeriod."Starting Date");
                               MaxCount := AccountingPeriod2.COUNT;
                               IF MaxCount > IMonth THEN
                                 MaxCount := IMonth;

                               IF MaxCount > 12 THEN
                                 MaxCount := 12;   //4PS.GB 02-12-2009

                               FOR i := 14 TO 26 DO BEGIN;
                                 xlSheet.Range(matrix(i,2)).Value := FORMAT(PeriodStartingDate);
                                 xlSheet.Range(matrix(i,3)).Value := FORMAT(DatFilterEnd);
                               END;
                               PrevEndDate := PeriodStartingDate - 1;

                               AccountingPeriod3.RESET;
                               AccountingPeriod3.SETRANGE("Starting Date", PeriodStartingDate, DatFilterEnd);
                               intPeriodeInAccYear := AccountingPeriod3.COUNT;

                               IF STRLEN(FORMAT(intPeriodeInAccYear)) = 1 THEN BEGIN;
                                 ltxtPeriod := '0' + FORMAT(intPeriodeInAccYear);
                               END ELSE BEGIN;
                                 ltxtPeriod := FORMAT(intPeriodeInAccYear);
                               END;

                               xlSheet.Range(matrix(14,1)).Value := '''' + STRSUBSTNO(txcCurrAccYear, IYear, ltxtPeriod);

                               // 4PS TRU 15-04-2010 BEGIN
                               // Because of only 1 second block of columns Maxcount becomes 1.
                               MaxCount := 1;
                               // 4PS TRU 15-04-2010 END


                               //y := 25;
                               // 2 new columns REVENUE + PRODUCTIE
                               y := 28;

                               FOR i := 1 TO MaxCount DO BEGIN
                                 StartDate[i] := PeriodStartingDate;
                                 EndDate[i] := DatFilterEnd;
                                 PeriodName[i] := STRSUBSTNO(txcCumTillEndDate, IYear, ltxtPeriod);
                                 AccountingPeriod.NEXT;
                                 ColCount := 1;
                                 xlSheet.Range(matrix(y,1)).Value := '''' + FORMAT(PeriodName[i]);
                                 xlSheet.Range(matrix(y,1)+':'+matrix(y+8,1)).Columns.Merge := TRUE;
                                 WHILE ColCount <= 13 DO BEGIN
                                   // xlSheet.Range(matrix(y + ColCount - 1,2)).Value := FORMAT(StartDate[i]); // No startdate --> Cumulative
                                   xlSheet.Range(matrix(y + ColCount - 1,3)).Value := '..' + FORMAT(EndDate[i]);

                                   // 4PS TRU 15-04-2010 BEGIN
                                   // Columnheader is filled in Excel-template.
                                   //// jhoek.040609.begin
                                   //xlSheet.Range(matrix(y + ColCount - 1, 4)).Value := UPPERCASE(GetColumnHeader(ColCount, 1));
                                   //xlSheet.Range(matrix(y + ColCount - 1, 5)).Value := UPPERCASE(GetColumnHeader(ColCount, 2));
                                   //// jhoek.040609.end
                                   // 4PS TRU 15-04-2010 END
                                   ColCount += 1;
                                 END;
                                 // y += 9; // 4PS TRU 15-04-2010
                               END;

                               xlSheet.Range(matrix(4,1)).Value := Dim1Filter;

                               x := 7;
                               y := 1;

                               IF NOT PrintDetails THEN
                                 SETFILTER("Single/Main/Sub Project",'%1|%2',"Single/Main/Sub Project"::Single,"Single/Main/Sub Project"::"Main Project");

                               DPA_SetFilters(CurrReport.OBJECTID(FALSE)); //4PS.n

                               TotalRec := COUNT;
                             END;

               OnAfterGetRecord=VAR
                                  lvPrognosis@1000000000 : ARRAY [2] OF Decimal;
                                  l_PrognRec@1000000001 : Record 11012034;
                                  Employee@1000000007 : Record 5200;
                                  ClosedCosts@1000000002 : Decimal;
                                  ClosedRevenues@1000000003 : Decimal;
                                  ActualCosts@1000000005 : Decimal;
                                  Revenues2@1000000004 : Decimal;
                                  ExpectedCompletionDate@1100525000 : Date;
                                  ExpectedCompletionDate2@1000000006 : Date;
                                  PreviousCostPrognosis@1100525002 : Decimal;
                                  PreviousRevenuePrognosis@1100525001 : Decimal;
                                  PreclosureCosts@1100525003 : Decimal;
                                  PreclosureRevenues@1100525004 : Decimal;
                                  lrecAccountingPeriod@1000000008 : Record 50;
                                  ldatStartingDateExpComplDate@1000000009 : Date;
                                  lintPeriodeInAccYear@1000000010 : Integer;
                                  ltxtPeriod@1000000011 : Text[2];
                                  CumCostPrognosis@1000000013 : Decimal;
                                  CumRevenuePrognosis@1000000012 : Decimal;
                                  lrecJob@1000000014 : Record 11072003;
                                BEGIN
                                  CurRec += 1;
                                  Window.UPDATE(1,ROUND(CurRec/TotalRec * 10000,1));

                                  PreviousCostPrognosis := 0;
                                  PreviousRevenuePrognosis := 0;
                                  CumCostPrognosis := 0;
                                  CumRevenuePrognosis := 0;

                                  IF (NOT blnShowCompClosPrevYear) AND (Job."Posting Date Closing" <> 0D) THEN BEGIN;
                                    lrecJob.RESET;
                                    lrecJob.SETCURRENTKEY(lrecJob."Main Project");
                                    lrecJob.SETRANGE("Main Project", Job."Main Project");
                                    lrecJob.SETFILTER("Posting Date Closing", '%1..|%2', PeriodStartingDate, 0D);
                                    IF NOT lrecJob.FINDSET THEN BEGIN;
                                      CurrReport.SKIP;
                                    END;
                                  END;

                                  LastPage:=FALSE;

                                  BufferJobLedgerEntries("Main Project"); // jhoek.110609

                                  FOR Teller := 1 TO 180 DO
                                    CellCde[Teller] := matrix(Teller,x);

                                  xlSheet.Range(CellCde[1]+':'+CellCde[124]).Font.Bold := FALSE;
                                  xlSheet.Range(CellCde[5]+':'+CellCde[124]).NumberFormat := '#.###';
                                  xlSheet.Range(CellCde[1]).Value := ''''+FORMAT("No.");
                                  xlSheet.Range(CellCde[2]).Value := FORMAT(Description);
                                  xlSheet.Range(CellCde[4]).Value := ''''+FORMAT("Bill-to Customer No.");
                                  xlSheet.Range(CellCde[5]).Value := FORMAT("Principal Name");
                                  xlSheet.Range(CellCde[6]).Value := FORMAT("Global Dimension 1 Code"); // jhoek.020709

                                  IF NOT Employee.GET("Project Manager") THEN
                                    Employee.INIT;

                                  xlSheet.Range(CellCde[7]).Value := FORMAT(UPPERCASE(Employee."Full Name"));
                                  xlSheet.Range(CellCde[8]).Value := FORMAT(UPPERCASE(FORMAT("Project Status")));
                                  xlSheet.Range(CellCde[9]).Value := FORMAT(UPPERCASE(Type));

                                  IF FreeFieldRec.GET("No.") THEN BEGIN
                                  //  xlSheet.Range(CellCde[10]).Value := FORMAT(FreeFieldRec."Market sector");
                                  //  xlSheet.Range(CellCde[11]).Value := FORMAT(FreeFieldRec."Function");
                                  //  xlSheet.Range(CellCde[12]).Value := FORMAT(FreeFieldRec."Technical discipline");
                                  //  xlSheet.Range(CellCde[13]).Value := FORMAT(FreeFieldRec."Business segment");
                                  END;

                                  y := 28;
                                  FOR i := 1 TO MaxCount DO BEGIN
                                    SETRANGE("Cumulation Filter", 0D, DatFilterEnd);
                                    CostContrMgt.CalcFieldsProject(Job);
                                    ClosedCosts := CalcClosedCostsRevenues(Job, 0); // jhoek.080609
                                    ClosedRevenues := CalcClosedCostsRevenues(Job, 1); // jhoek.080609
                                    Revenues2 := CalcRevenues(Job); // jhoek.080609
                                    PreclosureCosts := CalcPreclosureResult(Job, 0); // jhoek.020709
                                    PreclosureRevenues := CalcPreclosureResult(Job, 1); // jhoek.020709

                                    CLEAR(lvPrognosis);
                                    IF NOT CalcPrognosisNew(Job,StartDate[i],DatFilterEnd,lvPrognosis[1],lvPrognosis[2],ExpectedCompletionDate2) THEN BEGIN
                                      //lvPrognosis[1] := CumCostPrognosis;    //4PS.GB.14-02-2012
                                      //lvPrognosis[2] := CumRevenuePrognosis; //4PS.GB.14-02-2012
                                    END;

                                    CumCostPrognosis := lvPrognosis[1];
                                    CumRevenuePrognosis := lvPrognosis[2];

                                    IF ExpectedCompletionDate2 <> 0D THEN
                                      ExpectedCompletionDate := ExpectedCompletionDate2;
                                    xlSheet.Range(CellCde[y+4]).Value := FORMAT(CumCostPrognosis);                                                // was y
                                    xlSheet.Range(CellCde[y+3]).Value := FORMAT(CumRevenuePrognosis);                                              // was y+1
                                    xlSheet.Range(CellCde[y+5]).Value := '='+FORMAT(CellCde[y+3])+'-'+FORMAT(CellCde[y+4]);                     // was y+2

                                    //xlSheet.Range(CellCde[y+3]).Value := '='+FORMAT(CellCde[y+2])+'-'+FORMAT(CellCde[16]);                  // was y+3
                                    //xlSheet.Range(CellCde[y+4]).Value := '='+FORMAT(CellCde[y+1])+'-'+FORMAT(CellCde[15]);                  // was y+4

                                    // SETRANGE("Cumulation Filter",0D,EndDate[i]); // 4PS TRU 15-04-2010
                                    SETRANGE("Cumulation Filter",0D, DatFilterEnd);
                                    ClosedCosts := CalcClosedCostsRevenues(Job, 0); // jhoek.080609
                                    ClosedRevenues := CalcClosedCostsRevenues(Job, 1); // jhoek.080609
                                    ActualCosts := CalcActualCosts(Job); // jhoek.080609
                                    Revenues2 := CalcRevenues(Job); // jhoek.080609

                                    //xlSheet.Range(CellCde[y+1]).Value := FORMAT(ActualCosts - (ClosedCosts * -1) - PreclosureCosts);          // was y+5
                                    //xlSheet.Range(CellCde[y]).Value := FORMAT(Revenues2 - ClosedRevenues - PreclosureRevenues);             // was y+6
                                    xlSheet.Range(CellCde[y+1]).Value := FORMAT(ActualCosts);          // was y+5
                                    xlSheet.Range(CellCde[y]).Value := FORMAT(Revenues2);             // was y+6

                                    xlSheet.Range(CellCde[y+7]).Value := FORMAT(ClosedCosts * -1 + PreclosureCosts);                          // was y+7
                                    xlSheet.Range(CellCde[y+6]).Value := FORMAT(ClosedRevenues + PreclosureRevenues);                         // was y+8

                                    xlSheet.Range(CellCde[y+2]).Value := '='+FORMAT(CellCde[y])+'-'+FORMAT(CellCde[y+1]);

                                    xlSheet.Range(CellCde[y+8]).Value := '='+FORMAT(CellCde[y+6])+'-'+FORMAT(CellCde[y+7]);

                                    // Voorziening
                                    xlSheet.Range(CellCde[y+12]).Value := FORMAT(CalcVoorziening(Job));

                                    // y := y + 9; // 4PS TRU 15-04-2010
                                  END;



                                  // SETRANGE("Cumulation Filter",0D,PrevEndDate); // 4PS TRU 15-04-2010
                                  SETRANGE("Cumulation Filter", PeriodStartingDate, DatFilterEnd);
                                  CostContrMgt.CalcFieldsProject(Job);

                                  ClosedCosts := CalcClosedCostsRevenues(Job, 0); // jhoek.080609
                                  ClosedRevenues := CalcClosedCostsRevenues(Job, 1); // jhoek.080609
                                  ActualCosts := CalcActualCosts(Job); // jhoek.080609
                                  Revenues2 := CalcRevenues(Job); // jhoek.080609
                                  PreclosureCosts := CalcPreclosureResult(Job, 0); // jhoek.020709
                                  PreclosureRevenues := CalcPreclosureResult(Job, 1); // jhoek.020709

                                  CLEAR(lvPrognosis);
                                  CalcPrognosisNew(Job,PeriodStartingDate,DatFilterEnd,lvPrognosis[1],lvPrognosis[2],ExpectedCompletionDate2);
                                  PreviousCostPrognosis := lvPrognosis[1];
                                  PreviousRevenuePrognosis := lvPrognosis[2];

                                  IF ExpectedCompletionDate2 <> 0D THEN
                                    ExpectedCompletionDate := ExpectedCompletionDate2;
                                  // 4PS TRU 15-04-2010 Below setup in r78765
                                  //xlSheet.Range(CellCde[14]).Value := FORMAT(lvPrognosis[1]);
                                  //xlSheet.Range(CellCde[15]).Value := FORMAT(lvPrognosis[2]);
                                  //xlSheet.Range(CellCde[16]).Value := '='+FORMAT(CellCde[15])+'-'+FORMAT(CellCde[14]);
                                  //xlSheet.Range(CellCde[17]).Value := FORMAT(ActualCosts - (ClosedCosts * -1) - PreclosureCosts);
                                  //xlSheet.Range(CellCde[18]).Value := FORMAT(Revenues2 - ClosedRevenues - PreclosureRevenues);
                                  //xlSheet.Range(CellCde[19]).Value := FORMAT(ClosedCosts * -1 + PreclosureCosts);
                                  //xlSheet.Range(CellCde[20]).Value := FORMAT(ClosedRevenues + PreclosureRevenues);

                                  xlSheet.Range(CellCde[14]).Value := FORMAT(ClosedRevenues + PreclosureRevenues);
                                  // was 20 // Omzet gereedgemeld
                                  xlSheet.Range(CellCde[15]).Value := FORMAT(ClosedCosts * -1 + PreclosureCosts);
                                  // was 19 // Kosten gereedgemeld
                                  xlSheet.Range(CellCde[16]).Value := '='+FORMAT(CellCde[14])+'-'+FORMAT(CellCde[15]);                // Marge Gereedgemeld.

                                  xlSheet.Range(CellCde[37]).Value := '='+FORMAT(CellCde[28])+'-'+FORMAT(CellCde[34]);
                                  // Opbrengsten OHW = Opbr.cum - omzet geree
                                  xlSheet.Range(CellCde[38]).Value := '='+FORMAT(CellCde[29])+'-'+FORMAT(CellCde[35]);     // Kosten OHW = Kost.cum - kosten gereed
                                  xlSheet.Range(CellCde[39]).Value := '='+FORMAT(CellCde[37])+'-'+FORMAT(CellCde[38]);     // Financiering OHW = opbr OHW - kost OHW

                                  xlSheet.Range(CellCde[20]).Value := '='+FORMAT(CellCde[31])+'-'+FORMAT(CellCde[34]);
                                  // omz.verw.rest = opbr.tot.prog - omz ger.
                                  xlSheet.Range(CellCde[21]).Value := '='+FORMAT(CellCde[32])+'-'+FORMAT(CellCde[35]);
                                  // kos.verw.rest = kost.tot.prog - kos ger.
                                  xlSheet.Range(CellCde[22]).Value := '='+FORMAT(CellCde[20])+'-'+FORMAT(CellCde[21]);
                                  // marge.verw.rest = omz.verw - kost. verw.

                                  // Voorziening
                                  xlSheet.Range(CellCde[23]).Value := FORMAT(CalcVoorziening(Job));

                                  // Gefactureerd = Opbrengsten in boekjaar
                                  xlSheet.Range(CellCde[24]).Value := FORMAT(CalcRevenues(Job));

                                  // Productie = Besteed in boekjaar
                                  xlSheet.Range(CellCde[25]).Value := FORMAT(CalcProductie(Job));

                                  // mut. OHW
                                  xlSheet.Range(CellCde[17]).Value := '='+FORMAT(CellCde[24])+'-'+FORMAT(CellCde[14]);     // mut. opbr OHW
                                  xlSheet.Range(CellCde[18]).Value := '='+FORMAT(CellCde[25])+'-'+FORMAT(CellCde[15]);     // mut.Kost OHW
                                  xlSheet.Range(CellCde[19]).Value := '='+FORMAT(CellCde[17])+'-'+FORMAT(CellCde[18]);     // mut.Fin OHW

                                  // Revenue = Omzet gereedgemeld + mut.kosten ohw - mut. voorziening ohw
                                  xlSheet.Range(CellCde[26]).Value := '='+FORMAT(CellCde[14])+'+'+FORMAT(CellCde[18])+'-'+FORMAT(CellCde[23]);

                                  //xlSheet.Range(CellCde[14]).Value := FORMAT(lvPrognosis[1]);
                                  //xlSheet.Range(CellCde[15]).Value := FORMAT(lvPrognosis[2]);
                                  //xlSheet.Range(CellCde[16]).Value := '='+FORMAT(CellCde[15])+'-'+FORMAT(CellCde[14]);
                                  //xlSheet.Range(CellCde[17]).Value := FORMAT(ActualCosts - (ClosedCosts * -1) - PreclosureCosts);
                                  //xlSheet.Range(CellCde[18]).Value := FORMAT(Revenues2 - ClosedRevenues - PreclosureRevenues);


                                  // Format Expected Completion Date.
                                  IF ExpectedCompletionDate <> 0D THEN BEGIN;
                                    lrecAccountingPeriod.RESET;
                                    ldatStartingDateExpComplDate := DMY2DATE(1, 1, DATE2DWY(ExpectedCompletionDate, 3));
                                    lrecAccountingPeriod.SETRANGE("Starting Date", ldatStartingDateExpComplDate, ExpectedCompletionDate);
                                    lintPeriodeInAccYear := lrecAccountingPeriod.COUNT;
                                    IF lintPeriodeInAccYear = 0 THEN BEGIN;
                                      lintPeriodeInAccYear := DATE2DMY(ExpectedCompletionDate, 2);
                                    END;
                                    IF STRLEN(FORMAT(lintPeriodeInAccYear)) = 1 THEN BEGIN;
                                      ltxtPeriod := '0' + FORMAT(lintPeriodeInAccYear);
                                    END ELSE BEGIN;
                                      ltxtPeriod := FORMAT(lintPeriodeInAccYear);
                                    END;
                                    xlSheet.Range(CellCde[3]).Value := '''' + FORMAT(ExpectedCompletionDate, 0, '<Year,2>') + ltxtPeriod;
                                  END ELSE BEGIN;
                                    xlSheet.Range(CellCde[3]).Value := '''';
                                  END;

                                  x += 1;
                                END;

               OnPostDataItem=BEGIN
                                IF (NOT PrintDetails) THEN BEGIN // jhoek.080609
                                  x += 2;

                                  xlSheet.Range(matrix(14,x)+':'+matrix(40,x)).Borders.Item(3).LineStyle := 1;
                                  xlSheet.Range(matrix(14,x)+':'+matrix(40,x)).Borders.Item(4).LineStyle := 1;
                                  xlSheet.Range(matrix(14,x)+':'+matrix(40,x)).Borders.Item(4).Weight := 2;
                                  xlSheet.Range(matrix(14,x)+':'+matrix(40,x)).Borders.Item(4).Weight := 3;
                                  xlSheet.Range(matrix(14,x)+':'+matrix(40,x)).NumberFormat := '#.###';

                                  FOR i := 14 TO 40 DO
                                   // CASE FormulaLanguage OF
                                    //  FormulaLanguage::English:
                                    //    xlSheet.Range(matrix(i,x)).Value := '=SUBTOTAL(9;'+FORMAT(matrix(i,7))+':'+FORMAT(matrix(i,x-1))+')';
                                    //  FormulaLanguage::Dutch:
                                        xlSheet.Range(matrix(i,x)).Value := '=SUBTOTAAL(9;'+FORMAT(matrix(i,7))+':'+FORMAT(matrix(i,x-1))+')';
                                    //END;
                                END; // jhoek.080609

                                Window.CLOSE;
                              END;

               ReqFilterFields=Main Project,Global Dimension 1 Code,Project Type;
               CalcFields=Principal Name,Revenues,Actual Costs }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 8   ;    ;Container ;
                  Name=test;
                  ContainerType=ContentArea }

      { 7   ;1   ;Group     ;
                  GroupType=Group }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Cumulation Filter;
                  SourceExpr=CumulationFilterTxt;
                  OnValidate=BEGIN
                               PeriodFilterTxt := CumulationFilterTxt;
                               IF PeriodFilterTxt <> '' THEN BEGIN
                                 PeriodType := PeriodType::Month;

                                 IF CumulationFilterTxt <> '' THEN
                                   SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,PeriodNo);
                               END;
                             END;

                  OnLookup=VAR
                             DateSelectionManagement@1100409000 : Codeunit 11130005;
                           BEGIN
                             DateSelectionManagement.GetPeriod(CumulationFilterTxt);
                             PeriodFilterTxt := CumulationFilterTxt;
                             IF PeriodFilterTxt <> '' THEN BEGIN
                               PeriodType := PeriodType::Month;
                               IF CumulationFilterTxt <> '' THEN
                                 SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,PeriodNo);

                             END;
                             Text := CumulationFilterTxt;
                           END;
                            }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Filename;
                  SourceExpr=Filename;
                  OnAssistEdit=VAR
                                 FileMan@1000 : Codeunit 419;
                               BEGIN
                                 CLEAR(Filename);
                                 FileMan.SelectFile('xl*',FileAbsPathName,ShortFileName,Filename);
                               END;
                                }

      { 4   ;2   ;Field     ;
                  CaptionML=ENU=Sheetname;
                  SourceExpr=Sheetname }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Formula Language;
                  SourceExpr=FormulaLanguage }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=Print Details;
                  SourceExpr=PrintDetails }

      { 1   ;2   ;Field     ;
                  CaptionML=ENU=Show Complete Closed Project Previous Year;
                  SourceExpr=blnShowCompClosPrevYear }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      JobSetup@1000000020 : Record 315;
      CompanyInfo@1065 : Record 79;
      AccountingPeriod@1066 : Record 50;
      AccountingPeriod2@1067 : Record 50;
      AccountingPeriod3@1000000039 : Record 50;
      PeriodStartingDate@1069 : Date;
      StartDate@1070 : ARRAY [20] OF Date;
      EndDate@1071 : ARRAY [20] OF Date;
      JobFilter@1072 : Text[250];
      ColumnValuesAsText@1073 : ARRAY [13] OF Text[30];
      HeaderText@1074 : Text[100];
      RoundingText@1075 : Text[80];
      Header@1076 : ARRAY [13,2] OF Text[100];
      NormalFormatString@1077 : Text[80];
      LastPageText@1078 : Text[30];
      RoundingFactor@1079 : 'None,1,1000,1000000';
      i@1080 : Integer;
      MaxCount@1081 : Integer;
      LastPage@1082 : Boolean;
      Text002@1000000012 : TextConst;
      Text004@1083 : TextConst 'ENU=Enter the starting date for the first period.';
      Text005@1084 : TextConst 'ENU=The starting date is not the starting date of an accounting period.';
      Text006@1085 : TextConst 'ENU=Page %1 %2';
      Text007@1086 : TextConst 'ENU=-1D';
      Text008@1087 : TextConst 'ENU=<Precision,';
      Text009@1088 : TextConst 'ENU=><Standard Format,0>';
      Text010@1089 : TextConst 'ENU=<Precision,1><Standard Format,0>';
      Text011@1090 : TextConst 'ENU=Amounts are rounded to 1';
      Text012@1091 : TextConst 'ENU=Amounts are in whole 1000s';
      Text013@1092 : TextConst 'ENU=Amounts are in whole 1000000s';
      Text014@1093 : TextConst 'ENU=Indentation Level %1 is not used in the Chart of Accounts. This Chart of Accounts uses max. %2 levels.';
      Text015@1094 : TextConst 'ENU=Indentation Level : %1';
      Text050@1095 : TextConst 'ENU=/ Last Page';
      Text051@1096 : TextConst 'ENU=/ Continued';
      "--- Xcel01 -----"@1000000000 : Integer;
      x@1000000001 : Integer;
      y@1000000002 : Integer;
      Teller@1000000003 : Integer;
      Filename@1000000009 : Text[250];
      Sheetname@1000000010 : Text[250];
      CommonDialogMgt@1000000011 : Codeunit 412;
      ExcelBuf@1000000013 : Record 370;
      CellCde@1000000014 : ARRAY [180] OF Code[10];
      Dim1Filter@1000000015 : Text[100];
      IYear@1000000016 : Integer;
      Window@1000000017 : Dialog;
      TotalRec@1000000018 : Integer;
      CurRec@1000000019 : Integer;
      PrevEndDate@1000000022 : Date;
      FreeFieldRec@1000000021 : Record 50000;
      CostContrMgt@1000000023 : Codeunit 11012006;
      PeriodName@1000000024 : ARRAY [20] OF Text[50];
      SearchPeriod@1000000030 : Codeunit 11012016;
      PeriodType@1000000029 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      PeriodFilterTxt@1000000028 : Text[30];
      CumulationFilterTxt@1000000027 : Text[30];
      DatFilterStart@1000000026 : Date;
      DatFilterEnd@1000000025 : Date;
      PeriodNo@1000000031 : Text[1024];
      IMonth@1000000032 : Integer;
      PrevPrognDate@1000000033 : Date;
      PrintDetails@1000000034 : Boolean;
      TempMain@1000000038 : Code[20];
      Text060@1000000041 : TextConst 'ENU=Projects that were closed in previous years are not included in the calculations below.';
      JobLedgerEntryBuffer@1000000042 : TEMPORARY Record 11072005;
      FormulaLanguage@1100525000 : 'English,,,Dutch';
      LastBufferedMainProjectNo@1100525001 : Code[20];
      txcCurrAccYear@1000000035 : TextConst;
      txcCumTillEndDate@1000000036 : TextConst;
      intPeriodeInAccYear@1000000037 : Integer;
      blnShowCompClosPrevYear@1000000044 : Boolean;
      FileAbsPathName@1005 : Text;
      ShortFileName@1006 : Text;
      xlApp@1004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlBook@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      xlSheet@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlChart@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart";
      xlRange@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";

    LOCAL PROCEDURE AccPeriodEndDate@1099(UseStartDate@1100 : Date) : Date;
    VAR
      AccountingPeriod2@1101 : Record 50;
    BEGIN
      AccountingPeriod2."Starting Date" := UseStartDate;
      IF AccountingPeriod2.FIND('>') THEN
        EXIT(AccountingPeriod2."Starting Date" - 1);
      EXIT(99991231D);
    END;

    PROCEDURE matrix@1000000002(m_col@1000000000 : Integer;m_row@1000000001 : Integer) m_ret : Code[10];
    VAR
      xx@1000000002 : Integer;
      alf@1000000003 : Code[50];
      m_rest@1000000004 : Decimal;
      m_nu@1000000005 : Decimal;
      m_heel@1000000006 : Decimal;
      m_tus@1000000007 : Code[30];
    BEGIN
      IF m_col > 16384 THEN BEGIN
        m_tus := 'XFD';
        ERROR('Selecteer minder kolommen (max 16384)');
      END ELSE BEGIN
        alf := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ ';
        REPEAT
          IF m_col > 676  THEN
            m_heel := ROUND(m_col/(POWER(26.000000001,2)),1,'<')
          ELSE
            m_heel := ROUND(m_col/26.000000001,1,'<');
          IF m_heel > 0 THEN
            m_nu := m_heel
          ELSE
            m_nu := m_col;
          IF m_nu = 0 THEN
            m_nu := 27;
          m_tus := m_tus + COPYSTR(alf,m_nu,1);
          IF m_col > 676 THEN
            m_col := ROUND(m_col-(m_heel*(POWER(26,2))),1)
          ELSE
            m_col := ROUND(m_col-(m_heel*26),1);
        UNTIL m_heel <= 0;
      END;

      m_ret := DELCHR(STRSUBSTNO('%1 %2',m_tus,m_row));
    END;

    PROCEDURE CalcPrognosisNew@1100525009(pJob@1100525000 : Record 11072003;FromDate@1100525003 : Date;ToDate@1100525004 : Date;VAR Costs@1100525001 : Decimal;VAR Revenues@1100525002 : Decimal;VAR ExpectedCompletionDate@1100525006 : Date) PrognosisFound : Boolean;
    VAR
      Job2@1100525008 : Record 11072003;
      Prognosis@1100525005 : Record 11012034;
      Prognosis2@1100525009 : Record 11012034;
      PrognosisLine@1100525007 : Record 11012035;
      lvJobRec@1000000000 : Record 11072003;
    BEGIN
      Costs := 0;
      Revenues := 0;
      ExpectedCompletionDate := 0D;
      IF pJob."Single/Main/Sub Project" <> pJob."Single/Main/Sub Project"::"Main Project" THEN BEGIN
        Prognosis.SETRANGE("Project No.", pJob."No.");
        IF (pJob."Posting Date Closing" <> 0D) AND  (pJob."Posting Date Closing" < FromDate) THEN
          Prognosis.SETRANGE("Prognosis Date", 0D, FromDate)
        ELSE
          Prognosis.SETRANGE("Prognosis Date", FromDate, ToDate);
        IF Prognosis.FINDLAST THEN BEGIN
          PrognosisFound := TRUE;
          ExpectedCompletionDate := Prognosis."Expected Finishing Date";
          CASE Prognosis."Prognosis Level" OF
            Prognosis."Prognosis Level"::Detailed: BEGIN
              PrognosisLine.SETRANGE("Project No.", Prognosis."Project No.");
              PrognosisLine.SETRANGE("Prognosis Date", Prognosis."Prognosis Date");
              IF PrognosisLine.FINDSET THEN BEGIN
                REPEAT
                  CASE PrognosisLine."Cost Type" = PrognosisLine."Cost Type"::Revenue OF
                    TRUE: Revenues := Revenues + PrognosisLine."Amount Revenue" + PrognosisLine.Invoiced; //GB 19-11-09
                    FALSE: Costs := Costs + PrognosisLine."Prognosis Total Cost";  //GB 19-11-09 {+ PrognosisLine.Amount}
                  END;
                UNTIL PrognosisLine.NEXT = 0;
              END;
            END;
            Prognosis."Prognosis Level"::Rough: BEGIN
              Costs := Prognosis."Rough Prognosis Total Cost";
              Revenues := Prognosis."Rough Prognosis Total Revenues";
            END;
          END;
        END;
      END ELSE BEGIN
         lvJobRec.SETRANGE("Main Project", pJob."No.");
         IF lvJobRec.FINDSET THEN BEGIN
           REPEAT
             //IF (NOT PrintDetails) OR (lvJobRec."Posting Date Closing" = 0D) OR
             IF (lvJobRec."Posting Date Closing" >= FromDate) OR (lvJobRec."Posting Date Closing" = 0D) THEN
               Prognosis2.SETRANGE("Prognosis Date", FromDate, ToDate);
             IF (lvJobRec."Posting Date Closing" <> 0D) AND (lvJobRec."Posting Date Closing" < FromDate) THEN
               Prognosis2.SETRANGE("Prognosis Date", 0D, FromDate);
             Prognosis2.SETRANGE("Project No.", lvJobRec."No.");
             IF Prognosis2.FINDLAST THEN BEGIN
               PrognosisFound := TRUE;
               IF Prognosis2."Expected Finishing Date" > ExpectedCompletionDate THEN
                 ExpectedCompletionDate := Prognosis2."Expected Finishing Date";
                 CASE Prognosis2."Prognosis Level" OF Prognosis2."Prognosis Level"::Detailed: BEGIN
                   PrognosisLine.SETRANGE("Project No.", Prognosis2."Project No.");
                   PrognosisLine.SETRANGE("Prognosis Date", Prognosis2."Prognosis Date");
                   IF PrognosisLine.FINDSET THEN BEGIN
                     REPEAT
                       CASE PrognosisLine."Cost Type" = PrognosisLine."Cost Type"::Revenue OF
                         TRUE: Revenues := Revenues + PrognosisLine."Amount Revenue" + PrognosisLine.Invoiced;
                         FALSE: Costs := Costs + PrognosisLine."Prognosis Total Cost";
                       END;
                     UNTIL PrognosisLine.NEXT = 0;
                   END;
                 END;
                 Prognosis2."Prognosis Level"::Rough: BEGIN
                   Costs := Costs + Prognosis2."Rough Prognosis Total Cost";
                   Revenues := Revenues + Prognosis2."Rough Prognosis Total Revenues";
                 END;
               END;
             END;
           UNTIL lvJobRec.NEXT = 0;
         END;
       END;
    END;

    PROCEDURE BufferJobLedgerEntries@1000000005(MainProjectNo@1000000000 : Code[20]);
    VAR
      lrecJob@1100525000 : Record 11072003;
      lrecJobLedgerEntry@1000000001 : Record 11072005;
    BEGIN
      // Check if current project is already in buffer
      IF MainProjectNo = LastBufferedMainProjectNo THEN
        EXIT;

      JobLedgerEntryBuffer.RESET;
      JobLedgerEntryBuffer.DELETEALL;

      lrecJobLedgerEntry.SETCURRENTKEY("Main Project No.", "Job No.");
      lrecJobLedgerEntry.SETRANGE("Main Project No.", MainProjectNo);
      IF NOT lrecJobLedgerEntry.ISEMPTY THEN BEGIN;
       IF lrecJobLedgerEntry.FINDSET THEN REPEAT;
          lrecJob.COPYFILTERS(Job);
          lrecJob.SETRANGE("No.", lrecJobLedgerEntry."Job No.");
          lrecJob.SETRANGE("Single/Main/Sub Project");
          IF NOT lrecJob.ISEMPTY THEN BEGIN;
            JobLedgerEntryBuffer := lrecJobLedgerEntry;
            JobLedgerEntryBuffer.INSERT;
          END;
        UNTIL lrecJobLedgerEntry.NEXT = 0;
      END;
      LastBufferedMainProjectNo := MainProjectNo;
    END;

    PROCEDURE CalcClosedCostsRevenues@1000000003(VAR Job@1000000000 : Record 11072003;Type@1000000003 : 'Costs,Revenues') : Decimal;
    BEGIN
      JobLedgerEntryBuffer.RESET;
      JobLedgerEntryBuffer.SETCURRENTKEY("Main Project No.","Job No.","Entry Type","Cost Type","Posting Date");
      JobLedgerEntryBuffer.SETRANGE("Main Project No.", Job."Main Project");
      JobLedgerEntryBuffer.SETFILTER("Job No.", Job.GETFILTER("Project Filter"));
      JobLedgerEntryBuffer.SETFILTER("Posting Date", Job.GETFILTER("Cumulation Filter"));
      CASE Type OF
        Type::Costs:
          BEGIN
            JobLedgerEntryBuffer.CALCSUMS("Closed Costs");
            EXIT(JobLedgerEntryBuffer."Closed Costs");
          END;
        Type::Revenues:
          BEGIN
            JobLedgerEntryBuffer.CALCSUMS("Closed Revenues");
            EXIT(JobLedgerEntryBuffer."Closed Revenues");
          END;
      END;
    END;

    PROCEDURE CalcPreclosureResult@1100525002(VAR Job@1100525001 : Record 11072003;Type@1100525002 : 'Costs,Revenues') Result : Decimal;
    VAR
      ProjectPreclosureResult@1100525000 : Record 11012093;
      ProjectPreclosureResultBuffer@1100525003 : TEMPORARY Record 11012093;
    BEGIN
      JobLedgerEntryBuffer.RESET;
      JobLedgerEntryBuffer.SETCURRENTKEY("Main Project No.", "Job No.", "Entry Type");
      JobLedgerEntryBuffer.SETRANGE("Main Project No.", Job."Main Project");
      IF Job."Single/Main/Sub Project" <> Job."Single/Main/Sub Project"::"Main Project" THEN
        JobLedgerEntryBuffer.SETRANGE("Job No.", Job."No.");
      JobLedgerEntryBuffer.SETRANGE("Entry Type", JobLedgerEntryBuffer."Entry Type"::Usage);
      JobLedgerEntryBuffer.SETFILTER("Posting Date", '..%1', Job.GETRANGEMAX("Cumulation Filter"));
      JobLedgerEntryBuffer.SETFILTER("Actual Preclosure Result", '<>%1', 0);
      IF NOT JobLedgerEntryBuffer.ISEMPTY THEN                           //Xcel03.n
       IF JobLedgerEntryBuffer.FINDSET THEN BEGIN
        REPEAT
          IF ProjectPreclosureResult.GET(JobLedgerEntryBuffer."Job No.", JobLedgerEntryBuffer."Posting Date") THEN
            IF ProjectPreclosureResult.Posted THEN
              IF ProjectPreclosureResult."Result Type" = ProjectPreclosureResult."Result Type"::"Preclosure Result" THEN
                // potentially two project ledger entries; consider preclosure result only once!
                IF NOT ProjectPreclosureResultBuffer.GET(
                  ProjectPreclosureResult."Project No.",
                  ProjectPreclosureResult."Posting Date")
                THEN BEGIN
                  CASE Type OF
                    Type::Costs: Result := Result + ProjectPreclosureResult.Cost;
                    Type::Revenues: Result := Result + ProjectPreclosureResult.Turnover;
                  END;
                  ProjectPreclosureResultBuffer := ProjectPreclosureResult;
                  ProjectPreclosureResultBuffer.INSERT;
                END;
        UNTIL JobLedgerEntryBuffer.NEXT = 0;
       END;
    END;

    PROCEDURE CalcActualCosts@1000000010(VAR Job@1000000000 : Record 11072003) : Decimal;
    BEGIN
      JobLedgerEntryBuffer.RESET;
      JobLedgerEntryBuffer.SETCURRENTKEY(
        "Main Project No.","Job No.","Cost Type","Global Dimension 2 Code","Entry Type","Posting Date","Purchase Action");
      JobLedgerEntryBuffer.SETRANGE("Main Project No.", Job."Main Project");
      JobLedgerEntryBuffer.SETFILTER("Job No.", Job.GETFILTER("Project Filter"));
      JobLedgerEntryBuffer.SETRANGE("Entry Type", JobLedgerEntryBuffer."Entry Type"::Usage);
      JobLedgerEntryBuffer.SETFILTER("Posting Date", Job.GETFILTER("Cumulation Filter"));
      JobLedgerEntryBuffer.SETFILTER("Purchase Action", Job.GETFILTER("Purchase Action Filter"));
      JobLedgerEntryBuffer.CALCSUMS("Total Cost (LCY)");
      EXIT(JobLedgerEntryBuffer."Total Cost (LCY)");
    END;

    PROCEDURE CalcRevenues@1000000004(VAR Job@1000000000 : Record 11072003) Result : Decimal;
    BEGIN
      JobLedgerEntryBuffer.RESET;
      JobLedgerEntryBuffer.SETCURRENTKEY(
        "Main Project No.","Job No.","Entry Type","Cost Type","Posting Date","Purchase Action","Original Cost Type","Rental Unit");
      JobLedgerEntryBuffer.SETRANGE("Main Project No.", Job."Main Project");
      JobLedgerEntryBuffer.SETFILTER("Job No.", Job.GETFILTER("Project Filter"));
      JobLedgerEntryBuffer.SETRANGE("Entry Type", JobLedgerEntryBuffer."Entry Type"::Sale);
      JobLedgerEntryBuffer.SETFILTER("Posting Date", Job.GETFILTER("Cumulation Filter"));
      JobLedgerEntryBuffer.SETFILTER("Original Cost Type", Job.GETFILTER("Original Cost Type Filter"));
      JobLedgerEntryBuffer.SETFILTER("Rental Unit", Job.GETFILTER("Rental Unit Filter"));
      JobLedgerEntryBuffer.CALCSUMS("Total Price (LCY)");
      EXIT(-JobLedgerEntryBuffer."Total Price (LCY)");
    END;

    PROCEDURE xlLeft@1000000001() : Integer;
    BEGIN
      EXIT(-4131);
    END;

    LOCAL PROCEDURE xlCalculationManual@1100525001() : Integer;
    BEGIN
      EXIT(-4135);
    END;

    LOCAL PROCEDURE xlCalculationAutomatic@1100525004() : Integer;
    BEGIN
      EXIT(-4105);
    END;

    PROCEDURE CalcProductie@1000000000(VAR Job@1000000000 : Record 11072003) : Decimal;
    BEGIN
      JobLedgerEntryBuffer.RESET;
      JobLedgerEntryBuffer.SETCURRENTKEY(
        "Main Project No.","Job No.","Cost Type","Global Dimension 2 Code","Entry Type","Posting Date","Purchase Action");
      JobLedgerEntryBuffer.SETRANGE("Main Project No.", Job."Main Project");
      JobLedgerEntryBuffer.SETFILTER("Job No.", Job.GETFILTER("Project Filter"));
      JobLedgerEntryBuffer.SETRANGE("Entry Type", JobLedgerEntryBuffer."Entry Type"::Usage);
      JobLedgerEntryBuffer.SETFILTER("Posting Date", Job.GETFILTER("Cumulation Filter"));
      JobLedgerEntryBuffer.SETFILTER("Purchase Action", Job.GETFILTER("Purchase Action Filter"));
      JobLedgerEntryBuffer.CALCSUMS("Total Cost (LCY)");
      EXIT(JobLedgerEntryBuffer."Total Cost (LCY)");
    END;

    PROCEDURE CalcVoorziening@1000000006(VAR Job@1000000000 : Record 11072003) : Decimal;
    BEGIN
      JobLedgerEntryBuffer.RESET;
      JobLedgerEntryBuffer.SETCURRENTKEY(
        "Main Project No.","Job No.","Cost Type","Global Dimension 2 Code","Entry Type","Posting Date","Purchase Action");
      JobLedgerEntryBuffer.SETRANGE("Main Project No.", Job."Main Project");
      JobLedgerEntryBuffer.SETFILTER("Job No.", Job.GETFILTER("Project Filter"));
      JobLedgerEntryBuffer.SETRANGE("Entry Type", JobLedgerEntryBuffer."Entry Type"::Usage);
      JobLedgerEntryBuffer.SETFILTER("Posting Date", Job.GETFILTER("Cumulation Filter"));
      JobLedgerEntryBuffer.CALCSUMS("Actual Provision Result");
      EXIT(JobLedgerEntryBuffer."Actual Provision Result");
    END;

    EVENT xlChart@1001::Activate@304();
    BEGIN
    END;

    EVENT xlChart@1001::Deactivate@1530();
    BEGIN
    END;

    EVENT xlChart@1001::Resize@256();
    BEGIN
    END;

    EVENT xlChart@1001::MouseDown@1531(Button@1003 : Integer;Shift@1002 : Integer;x@1001 : Integer;y@1000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1001::MouseUp@1532(Button@1003 : Integer;Shift@1002 : Integer;x@1001 : Integer;y@1000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1001::MouseMove@1533(Button@1003 : Integer;Shift@1002 : Integer;x@1001 : Integer;y@1000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1001::BeforeRightClick@1534(VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlChart@1001::BeforeDoubleClick@1537(ElementID@1003 : Integer;Arg1@1002 : Integer;Arg2@1001 : Integer;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlChart@1001::Select@235(ElementID@1002 : Integer;Arg1@1001 : Integer;Arg2@1000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1001::SeriesChange@1538(SeriesIndex@1001 : Integer;PointIndex@1000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1001::Calculate@279();
    BEGIN
    END;

    EVENT xlSheet@1002::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1002::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1002::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1002::Activate@304();
    BEGIN
    END;

    EVENT xlSheet@1002::Deactivate@1530();
    BEGIN
    END;

    EVENT xlSheet@1002::Calculate@279();
    BEGIN
    END;

    EVENT xlSheet@1002::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1002::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlSheet@1002::PivotTableUpdate@2156(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlSheet@1002::PivotTableAfterValueChange@2886(TargetPivotTable@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1002::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1002 : Integer;ValueChangeEnd@1001 : Integer;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1002::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1002 : Integer;ValueChangeEnd@1001 : Integer;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1002::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1001 : Integer;ValueChangeEnd@1000 : Integer);
    BEGIN
    END;

    EVENT xlSheet@1002::PivotTableChangeSync@2894(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1003::Open@1923();
    BEGIN
    END;

    EVENT xlBook@1003::Activate@304();
    BEGIN
    END;

    EVENT xlBook@1003::Deactivate@1530();
    BEGIN
    END;

    EVENT xlBook@1003::BeforeClose@1546(VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::BeforeSave@1547(SaveAsUI@1001 : Boolean;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::BeforePrint@1549(VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::NewSheet@1550(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1003::AddinInstall@1552();
    BEGIN
    END;

    EVENT xlBook@1003::AddinUninstall@1553();
    BEGIN
    END;

    EVENT xlBook@1003::WindowResize@1554(Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1003::WindowActivate@1556(Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1003::WindowDeactivate@1557(Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1003::SheetSelectionChange@1558(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1003::SheetBeforeDoubleClick@1559(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::SheetBeforeRightClick@1560(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::SheetActivate@1561(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1003::SheetDeactivate@1562(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1003::SheetCalculate@1563(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1003::SheetChange@1564(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1003::SheetFollowHyperlink@1854(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlBook@1003::SheetPivotTableUpdate@2157(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1003::PivotTableCloseConnection@2158(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1003::PivotTableOpenConnection@2159(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1003::Sync@2266(SyncEventType@1000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1003::BeforeXmlImport@2283(Map@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1002 : Text;IsRefresh@1001 : Boolean;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::AfterXmlImport@2285(Map@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1001 : Boolean;Result@1000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1003::BeforeXmlExport@2287(Map@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1001 : Text;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::AfterXmlExport@2288(Map@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1001 : Text;Result@1000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1003::RowsetComplete@2610(Description@1002 : Text;Sheet@1001 : Text;Success@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::SheetPivotTableAfterValueChange@2895(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1003::SheetPivotTableBeforeAllocateChanges@2896(Sh@1004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1002 : Integer;ValueChangeEnd@1001 : Integer;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::SheetPivotTableBeforeCommitChanges@2897(Sh@1004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1002 : Integer;ValueChangeEnd@1001 : Integer;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::SheetPivotTableBeforeDiscardChanges@2898(Sh@1003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1001 : Integer;ValueChangeEnd@1000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1003::SheetPivotTableChangeSync@2899(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1003::AfterSave@2900(Success@1000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1003::NewChart@2901(Ch@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT xlApp@1004::NewWorkbook@1565(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1004::SheetSelectionChange@1558(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1004::SheetBeforeDoubleClick@1559(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::SheetBeforeRightClick@1560(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::SheetActivate@1561(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1004::SheetDeactivate@1562(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1004::SheetCalculate@1563(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1004::SheetChange@1564(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookOpen@1567(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookActivate@1568(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookDeactivate@1569(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookBeforeClose@1570(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookBeforeSave@1571(Wb@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1001 : Boolean;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookBeforePrint@1572(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookNewSheet@1573(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookAddinInstall@1574(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookAddinUninstall@1575(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1004::WindowResize@1554(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1004::WindowActivate@1556(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1004::WindowDeactivate@1557(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1004::SheetFollowHyperlink@1854(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlApp@1004::SheetPivotTableUpdate@2157(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookPivotTableCloseConnection@2160(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookPivotTableOpenConnection@2161(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookSync@2289(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookBeforeXmlImport@2290(Wb@1004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1002 : Text;IsRefresh@1001 : Boolean;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookAfterXmlImport@2291(Wb@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1001 : Boolean;Result@1000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookBeforeXmlExport@2292(Wb@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1001 : Text;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookAfterXmlExport@2293(Wb@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1001 : Text;Result@1000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookRowsetComplete@2611(Wb@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Description@1002 : Text;Sheet@1001 : Text;Success@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::AfterCalculate@2612();
    BEGIN
    END;

    EVENT xlApp@1004::SheetPivotTableAfterValueChange@2895(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1004::SheetPivotTableBeforeAllocateChanges@2896(Sh@1004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1002 : Integer;ValueChangeEnd@1001 : Integer;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::SheetPivotTableBeforeCommitChanges@2897(Sh@1004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1002 : Integer;ValueChangeEnd@1001 : Integer;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::SheetPivotTableBeforeDiscardChanges@2898(Sh@1003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1001 : Integer;ValueChangeEnd@1000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1004::ProtectedViewWindowOpen@2903(Pvw@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1004::ProtectedViewWindowBeforeEdit@2905(Pvw@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::ProtectedViewWindowBeforeClose@2906(Pvw@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";Reason@1001 : Integer;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::ProtectedViewWindowResize@2908(Pvw@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1004::ProtectedViewWindowActivate@2909(Pvw@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1004::ProtectedViewWindowDeactivate@2910(Pvw@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookAfterSave@2911(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Success@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1004::WorkbookNewChart@2912(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Ch@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    BEGIN
    {
      // 4PS TRU 15-04-2010:
       - object created. Copied from report 78765 - PGL Export
       - for possible reactivation-reasons disabled used code with //
       - deleted function GetColumnHeader

      // 4PS TRU 23-04-2010:
       - edited

      // 4PS TRU 06-05-2010:
       - added new columns.
       - moved columns.

      // 4PS TRU 10-06-2010:
       - edited Job OnAfterGetRecord
       - edited BufferJobLedgerEntries(MainProjectNo : Code[20]) for filtering on Job
       - deleted ExcludeSubProjClosedInPrevYear

      // 4PS TRU 15-06-2010:
       - edited Report; deleted previous comments and old code for better visibility //
    }
    END.
  }
  RDLDATA
  {
  }
}

