OBJECT Report 78802 PGL Projecten PEEK
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00.BK.OK;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPostReport=BEGIN

                   IF NOT NoAccPeriodBl THEN BEGIN
                     xlApp.Range('A4').Select;
                     xlApp.ActiveWindow.FreezePanes := TRUE;
                     xlApp.Visible := TRUE;
                   END;
                 END;

  }
  DATASET
  {
    { 1100525005;;DataItem;                  ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN

                               CREATE(xlApp,FALSE,TRUE);
                               xlBook := xlApp.Workbooks.Add;

                               IF ShowVerpl THEN BEGIN
                                 xlSheet := xlApp.Sheets.Add;
                                 xlApp.DisplayAlerts := FALSE;
                                 xlSheet.Name := FORMAT('Verplichtingen');
                                 xlSheet.Select;
                               END;

                               IF ShowBudgActual THEN BEGIN
                                 xlSheet := xlApp.Sheets.Add;
                                 xlSheet.Name := FORMAT('Budget-Actual');
                                 xlSheet.Select;
                               END;

                               xlSheet := xlApp.Sheets.Add;
                               xlSheet.Name := FORMAT('PGL export');
                               xlSheet.Select;
                               xlSheet.Range('A1:BT7').Font.Bold := TRUE;
                               xlSheet.Range('A7:BT7').AutoFilter;
                               xlSheet.Range('A5:BT7').Interior.ColorIndex(36);

                               //Intake t/m einde vorig jaar
                               xlSheet.Range('S5:V5').Merge;
                               xlSheet.Range('S5').HorizontalAlignment := -4108;
                               xlSheet.Range('S6:V6').Merge;
                               xlSheet.Range('S6').HorizontalAlignment := -4108;
                               xlSheet.Range('S5').Value := FORMAT(STRSUBSTNO('..31-12-%1',(DATE2DMY(DatFilterStart,3) -1)));
                               xlSheet.Range('S6').Value := 'Intake ..Y';

                               //Intake t/m einde periode
                               xlSheet.Range('W5:Z5').Merge;
                               xlSheet.Range('W5').HorizontalAlignment := -4108;
                               xlSheet.Range('W6:Z6').Merge;
                               xlSheet.Range('W6').HorizontalAlignment := -4108;
                               xlSheet.Range('W5').Value := FORMAT(STRSUBSTNO('01-01-%1..%2',DATE2DMY(DatFilterStart,3),DatFilterEnd));
                               xlSheet.Range('W6').Value := 'Intake YTD';

                               //Intake deze periode
                               xlSheet.Range('AA5:AD5').Merge;
                               xlSheet.Range('AA5').HorizontalAlignment := -4108;
                               xlSheet.Range('AA6:AD6').Merge;
                               xlSheet.Range('AA6').HorizontalAlignment := -4108;
                               xlSheet.Range('AA5').Value := FORMAT(STRSUBSTNO('%1..%2', DatFilterStart, DatFilterEnd));
                               xlSheet.Range('AA6').Value := 'Intake periode';

                               //tt VORIGE JAAR
                               xlSheet.Range('AE5:AH5').Merge;
                               xlSheet.Range('AE5').HorizontalAlignment := -4108;
                               xlSheet.Range('AE6:AH6').Merge;
                               xlSheet.Range('AE6').HorizontalAlignment := -4108;
                               xlSheet.Range('AE5').Value := FORMAT(STRSUBSTNO('..31-12-%1',(DATE2DMY(DatFilterStart,3) -1)));
                               xlSheet.Range('AE6').Value := 'TTR ..Y';

                               //tt VORIGE periode
                               xlSheet.Range('AI5:AL5').Merge;
                               xlSheet.Range('AI5').HorizontalAlignment := -4108;
                               xlSheet.Range('AI6:AL6').Merge;
                               xlSheet.Range('AI6').HorizontalAlignment := -4108;
                               xlSheet.Range('AI5').Value := FORMAT(STRSUBSTNO('01-01-%1..%2',DATE2DMY(DatFilterStart,3),DatFilterEnd));
                               xlSheet.Range('AI6').Value := 'TTR YTD';

                               //tt deze periode
                               xlSheet.Range('AM5:AP5').Merge;
                               xlSheet.Range('AM5').HorizontalAlignment := -4108;
                               xlSheet.Range('AM6:AP6').Merge;
                               xlSheet.Range('AM6').HorizontalAlignment := -4108;
                               xlSheet.Range('AM5').Value := FORMAT(STRSUBSTNO('%1..%2', DatFilterStart, DatFilterEnd));
                               xlSheet.Range('AM6').Value := 'TTR periode';

                               //Gereed t/m einde vorig jaar
                               xlSheet.Range('AQ5:AT5').Merge;
                               xlSheet.Range('AQ5').HorizontalAlignment := -4108;
                               xlSheet.Range('AQ6:AT6').Merge;
                               xlSheet.Range('AQ6').HorizontalAlignment := -4108;
                               xlSheet.Range('AQ5').Value := FORMAT(STRSUBSTNO('..31-12-%1',(DATE2DMY(DatFilterStart,3) -1)));
                               xlSheet.Range('AQ6').Value := 'Gereed ..Y';

                               //Gereed t/m einde periode
                               xlSheet.Range('AU5:AX5').Merge;
                               xlSheet.Range('AU5').HorizontalAlignment := -4108;
                               xlSheet.Range('AU6:AX6').Merge;
                               xlSheet.Range('AU6').HorizontalAlignment := -4108;
                               xlSheet.Range('AU5').Value := FORMAT(STRSUBSTNO('01-01-%1..%2',DATE2DMY(DatFilterStart,3),DatFilterEnd));
                               xlSheet.Range('AU6').Value := 'Gereed YTD';

                               //Gereed deze periode
                               xlSheet.Range('AY5:BB5').Merge;
                               xlSheet.Range('AY5').HorizontalAlignment := -4108;
                               xlSheet.Range('AY6:BB6').Merge;
                               xlSheet.Range('AY6').HorizontalAlignment := -4108;
                               xlSheet.Range('AY5').Value := FORMAT(STRSUBSTNO('%1..%2', DatFilterStart, DatFilterEnd));
                               xlSheet.Range('AY6').Value := 'Gereed Periode';

                               //Correctie intake prognose
                               xlSheet.Range('BC5:BF5').Merge;
                               xlSheet.Range('BC5').HorizontalAlignment := -4108;
                               xlSheet.Range('BC6:BF6').Merge;
                               xlSheet.Range('BC6').HorizontalAlignment := -4108;
                               xlSheet.Range('BC6').Value := 'Correctie intake prognoses';

                               //Backlog
                               xlSheet.Range('BG5:BJ5').Merge;
                               xlSheet.Range('BG5').HorizontalAlignment := -4108;
                               xlSheet.Range('BG6:BJ6').Merge;
                               xlSheet.Range('BG6').HorizontalAlignment := -4108;
                               xlSheet.Range('BG5').Value := FORMAT(STRSUBSTNO('..%1',DatFilterEnd));
                               xlSheet.Range('BG6').Value := 'Backlog';

                               //Voorziening
                               xlSheet.Range('BK5:BL5').Merge;
                               xlSheet.Range('BK5').HorizontalAlignment := -4108;
                               xlSheet.Range('BK6:BL6').Merge;
                               xlSheet.Range('BK6').HorizontalAlignment := -4108;
                               xlSheet.Range('BK5').Value := FORMAT(STRSUBSTNO('..%1',DatFilterEnd));
                               xlSheet.Range('BK6').Value := 'Voorziening';

                               //OHW positie periode
                               xlSheet.Range('BM5:BO5').Merge;
                               xlSheet.Range('BM5').HorizontalAlignment := -4108;
                               xlSheet.Range('BM6:BO6').Merge;
                               xlSheet.Range('BM6').HorizontalAlignment := -4108;
                               xlSheet.Range('BM5').Value := FORMAT(STRSUBSTNO('%1 T/M %2',DatFilterStart,DatFilterEnd));
                               xlSheet.Range('BM6').Value := 'Mutatie OHW per.';

                               //OHW positie cumulatief
                               xlSheet.Range('BP5:BR5').Merge;
                               xlSheet.Range('BP5').HorizontalAlignment := -4108;
                               xlSheet.Range('BP6:BR6').Merge;
                               xlSheet.Range('BP6').HorizontalAlignment := -4108;
                               xlSheet.Range('BP5').Value := FORMAT(STRSUBSTNO('..%1',DatFilterEnd));
                               xlSheet.Range('BP6').Value := 'Stand OHW cum.';

                               //Benamingen en filters
                               xlSheet.Range('A:A').HorizontalAlignment := 2;
                               xlSheet.Range('A1').Value := 'PGL export';
                               xlSheet.Range('A2').Value := FORMAT(COMPANYNAME);
                               xlSheet.Range('A3').Value := '';
                               xlSheet.Range('A4').Value := '';
                               xlSheet.Range('A5').Value := '';
                               xlSheet.Range('C3').Value := '';
                               xlSheet.Range('C4').Value := '';

                               //FieldLabels
                               xlSheet.Range('A7').Value := 'Project';                             //1
                               xlSheet.Range('B7').Value := 'Hoofdproject';                        //2
                               xlSheet.Range('C7').Value := 'Omschrijving';                        //3
                               xlSheet.Range('D7').Value := 'H/D/E';                               //4
                               xlSheet.Range('E7').Value := 'A/R';                                 //5
                               xlSheet.Range('F7').Value := 'Discipline';                          //6
                               xlSheet.Range('G7').Value := 'Oplevering';                          //7
                               xlSheet.Range('H7').Value := 'Debiteurnummer';                      //8
                               xlSheet.Range('I7').Value := 'Opdrachtgever';                       //9
                               xlSheet.Range('J7').Value := 'Land';                                //10
                               xlSheet.Range('K7').Value := 'Productlijn';                         //11
                               xlSheet.Range('L7').Value := 'PJM';                                 //12
                               xlSheet.Range('M7').Value := 'Naam';                                //13
                               xlSheet.Range('N7').Value := 'Verkoper';                            //14    //n*
                               xlSheet.Range('O7').Value := 'Naam';                                //15    //n*
                               xlSheet.Range('P7').Value := 'Projectstatus';                       //16
                               xlSheet.Range('Q7').Value := 'Projecttype';                         //17
                               xlSheet.Range('R7').Value := 'Laatste Prognose';                    //18

                               xlSheet.Range('S7').Value := 'Opbrengst';   ////////////////////      13
                               xlSheet.Range('T7').Value := 'Kosten';      //Intake t/m      //      14
                               xlSheet.Range('U7').Value := 'Marge';       //einde vorig jaar//      15
                               xlSheet.Range('V7').Value := 'Marge %';     ////////////////////      16

                               xlSheet.Range('W7').Value := 'Opbrengst';   ////////////////////      17
                               xlSheet.Range('X7').Value := 'Kosten';      //Intake t/m      //      18
                               xlSheet.Range('Y7').Value := 'Marge';       //einde periode   //      19
                               xlSheet.Range('Z7').Value := 'Marge %';     ////////////////////      20

                               xlSheet.Range('AA7').Value := 'Opbrengst';   ////////////////////      21
                               xlSheet.Range('AB7').Value := 'Kosten';      //Intake          //      22
                               xlSheet.Range('AC7').Value := 'Marge';       //deze periode    //      23
                               xlSheet.Range('AD7').Value := 'Marge %';     ////////////////////      24

                               xlSheet.Range('AE7').Value := 'Opbrengst';   ////////////////////      25
                               xlSheet.Range('AF7').Value := 'Kosten';      //tt t/m          //      26
                               xlSheet.Range('AG7').Value := 'Marge';       //einde vorig jaar//     27
                               xlSheet.Range('AH7').Value := 'Marge %';     ////////////////////     28

                               xlSheet.Range('AI7').Value := 'Opbrengst';   ////////////////////      29
                               xlSheet.Range('AJ7').Value := 'Kosten';      //tt t/m          //      30
                               xlSheet.Range('AK7').Value := 'Marge';       //einde periode   //      31
                               xlSheet.Range('AL7').Value := 'Marge %';     ////////////////////      32

                               xlSheet.Range('AM7').Value := 'Opbrengst';   ////////////////////      33
                               xlSheet.Range('AN7').Value := 'Kosten';      //tt              //      34
                               xlSheet.Range('AO7').Value := 'Marge';       //deze periode    //      35
                               xlSheet.Range('AP7').Value := 'Marge %';     ////////////////////      36

                               xlSheet.Range('AQ7').Value := 'Opbrengst';   ////////////////////      37
                               xlSheet.Range('AR7').Value := 'Kosten';      //gereed          //      38
                               xlSheet.Range('AS7').Value := 'Marge';       //vorig jaar      //      39
                               xlSheet.Range('AT7').Value := 'Marge %';     ////////////////////      40

                               xlSheet.Range('AU7').Value := 'Opbrengst';  ////////////////////      41
                               xlSheet.Range('AV7').Value := 'Kosten';     //gereed          //      42
                               xlSheet.Range('AW7').Value := 'Marge';      //einde periode   //      43
                               xlSheet.Range('AX7').Value := 'Marge %';    ////////////////////      44

                               xlSheet.Range('AY7').Value := 'Opbrengst';  ////////////////////      45
                               xlSheet.Range('AZ7').Value := 'Kosten';     //gereed          //      46
                               xlSheet.Range('BA7').Value := 'Marge';      //deze periode    //      47
                               xlSheet.Range('BB7').Value := 'Marge %';    ////////////////////      48

                               xlSheet.Range('BC7').Value := 'Datum gereed';//    CORR.       //     49
                               xlSheet.Range('BD7').Value := 'Opbrengst';   //    INTAKE      //     50
                               xlSheet.Range('BE7').Value := 'Kosten';      //    PROGN       //     51
                               xlSheet.Range('BF7').Value := 'Marge' ;      ////////////////////     52

                               xlSheet.Range('BG7').Value := 'Opbrengst';  //                //      53
                               xlSheet.Range('BH7').Value := 'Kosten';     //   Backlog      //      54
                               xlSheet.Range('BI7').Value := 'Marge';      //                //      55
                               xlSheet.Range('BJ7').Value := 'Marge %';    ////////////////////      56

                               xlSheet.Range('BK7').Value := 'Mutatie';    //     Voor       //      57
                               xlSheet.Range('BL7').Value := 'Stand';      //    ziening     //      58
                               xlSheet.Range('BM7').Value := 'Productie opbrengst';/////////////////// 59
                               xlSheet.Range('BN7').Value := 'Productie kosten';   //  OHW periode  // 60
                               xlSheet.Range('BO7').Value := 'Mutaties OHW';       /////////////////// 61

                               xlSheet.Range('BP7').Value := 'Opbrengst';  ////////////////////      62
                               xlSheet.Range('BQ7').Value := 'Kosten';     // OHW cumulatief //      63
                               xlSheet.Range('BR7').Value := 'Stand OHW';  ////////////////////      64

                               xlSheet.Range('BS6').Value := 'Incl.';                            //  65
                               xlSheet.Range('BT7').Value := 'Voorz.';                           //  65
                               IF ShowVerpl THEN BEGIN
                                 xlSheet.Range('BT6').Value := 'Totaal';                           //  66
                                 xlSheet.Range('BT7').Value := 'Verplichtingen';                   //  66
                               END;

                               xlApp.Range('F8').Select;
                               xlApp.ActiveWindow.FreezePanes := TRUE;

                               RowNo := 8;
                               IF OnlySingleAndMainProjects THEN
                                 SETRANGE("Single/Main/Sub Project","Single/Main/Sub Project"::Single,"Single/Main/Sub Project"::"Main Project")
                             END;

               OnAfterGetRecord=VAR
                                  EmployeeRec@1100525012 : Record 5200;
                                  ProjectPreclosureResult@1100525011 : Record 11012093;
                                  JobRec2@1100525010 : Record 11072003;
                                  lPrognosis@1100525009 : Record 11012034;
                                  GDatFilterStart@1100525008 : Date;
                                  GDatFilterEnd@1100525007 : Date;
                                  G2DatFilterEnd@1100525006 : Date;
                                  CDatFilterStart@1100525005 : Date;
                                  ClosedCosts@1100525004 : Decimal;
                                  ClosedRev@1100525003 : Decimal;
                                  GereedRev@1100525002 : Decimal;
                                  GereedCosts@1100525001 : Decimal;
                                  i@1100525000 : Integer;
                                BEGIN

                                  SETRANGE("Period Filter",DatFilterStart,DatFilterEnd);
                                  IF GETRANGEMIN("Period Filter") = GETRANGEMAX("Period Filter") THEN
                                    SETRANGE("Period Filter",GETRANGEMIN("Period Filter"));

                                  SETRANGE("Cumulation Filter",0D,DatFilterEnd);

                                  IF ("Project Status" >= "Project Status"::Finished) THEN BEGIN
                                    IF NOT ShowClosedProjects THEN BEGIN
                                      IF ("Posting Date Closing" <> 0D) THEN
                                        IF DATE2DMY("Posting Date Closing",3) < DATE2DMY(DatFilterEnd,3) THEN
                                          CurrReport.SKIP;
                                    END;
                                  END;

                                  BuildCostControl;
                                  SearchProgrDate.DetermineDate(Job);

                                  CLEAR(GttResKostPr);
                                  CLEAR(GttResOmz);
                                  CLEAR(GttResKostPrPrevP);
                                  CLEAR(GttResOmzPrevP);
                                  CLEAR(GttResKostPrPrevYear);
                                  CLEAR(GttResOmzPrevYear);
                                  CLEAR(GPerVoorz);
                                  CLEAR(GCumVoorz);
                                  CLEAR(GPerTusRes);
                                  CLEAR(GCumTusRes);
                                  CLEAR(PrognTotRevenue);
                                  CLEAR(PrognTotRevenuePrevP);
                                  CLEAR(PrognTotRevenuePrevYear);
                                  CLEAR(PrognTotCostDec);
                                  CLEAR(PrognTotCostDecPrevP);
                                  CLEAR(PrognTotCostDecPrevYear);
                                  CLEAR(ClosedInPeriodBl);
                                  CLEAR(ClosedPrevPeriodBl);
                                  CLEAR(ClosedPrevYearBl);
                                  CLEAR(TegenBGereedmRevPer);
                                  CLEAR(TegenBGereedmCostsPer);
                                  CLEAR(GereedgemeldBl);

                                  JobRec.GET("No.");

                                  //Berekenen gegevens hoofdproject of per enkelvoudig en deelprojecten;
                                  IF (OnlySingleAndMainProjects) AND ("Single/Main/Sub Project" = "Single/Main/Sub Project"::"Main Project") THEN BEGIN
                                    JobRec2.SETRANGE("Main Project","No.");
                                    IF JobRec2.FINDSET THEN
                                      REPEAT
                                        IF JobRec2."Single/Main/Sub Project" <> JobRec2."Single/Main/Sub Project"::"Main Project" THEN BEGIN
                                          CaclTussRes(JobRec2."No.", GttResKostPr, GttResOmz);   //TT
                                          CaclTussResPrevP(JobRec2."No.", GttResKostPrPrevP, GttResOmzPrevP);   //TT
                                          CaclTussResPrevYear(JobRec2."No.", GttResKostPrPrevYear, GttResOmzPrevYear);   //TT
                                          CalcVoorz(JobRec2."No.",DatFilterStart,DatFilterEnd,GPerVoorz,GCumVoorz); //Voorziening
                                          CalcGereedM(JobRec2."No.",DatFilterStart,DatFilterEnd,GPerTusRes,GCumTusRes); //Gereed I
                                          PrognTotRevenue := PrognTotRevenue + CalcPrognReveneu(JobRec2."No.");
                                          PrognTotRevenuePrevP := PrognTotRevenuePrevP + CalcPrognReveneuPrevPeriod(JobRec2."No.");
                                          PrognTotRevenuePrevYear := PrognTotRevenuePrevYear + CalcPrognReveneuPrevYear(JobRec2."No.");
                                          PrognTotCostDec := PrognTotCostDec + CalcPrognCosts(JobRec2."No.");
                                          PrognTotCostDecPrevP := PrognTotCostDecPrevP + CalcPrognCostsPrevPeriod(JobRec2."No.");
                                          PrognTotCostDecPrevYear := PrognTotCostDecPrevYear + CalcPrognCostsPrevYear(JobRec2."No.");
                                          LastPRognPRevPerCost := LastPRognPRevPerCost + CalcLastPrognPrevPeriod(JobRec2."No.",0);
                                          LastPRognPRevPerRev := LastPRognPRevPerRev + CalcLastPrognPrevPeriod(JobRec2."No.",0);

                                        END;
                                      UNTIL JobRec2.NEXT = 0;
                                  END ELSE BEGIN
                                    IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::"Main Project" THEN BEGIN
                                       CaclTussRes("No.", GttResKostPr, GttResOmz);
                                       CaclTussResPrevP("No.", GttResKostPrPrevP, GttResOmzPrevP);
                                       CaclTussResPrevYear("No.", GttResKostPrPrevYear, GttResOmzPrevYear);
                                       CalcVoorz("No.",DatFilterStart,DatFilterEnd,GPerVoorz,GCumVoorz);
                                       CalcGereedM("No.",DatFilterStart,DatFilterEnd,GPerTusRes,GCumTusRes);
                                       PrognTotRevenue := CalcPrognReveneu("No.");
                                       PrognTotRevenuePrevP := CalcPrognReveneuPrevPeriod("No.");
                                       PrognTotRevenuePrevYear := CalcPrognReveneuPrevYear("No.");
                                       PrognTotCostDec := CalcPrognCosts("No.");
                                       PrognTotCostDecPrevP := CalcPrognCostsPrevPeriod("No.");
                                       PrognTotCostDecPrevYear := CalcPrognCostsPrevYear("No.");
                                       LastPRognPRevPerCost := CalcLastPrognPrevPeriod("No.",0);
                                       LastPRognPRevPerRev := CalcLastPrognPrevPeriod("No.",1);
                                    END;
                                    SETFILTER("Project Filter","No.");
                                  END;

                                  CALCFIELDS("Actual Costs",Revenues,"Actuals Period","Revenues Period","Total Budget",
                                            "Closed Costs","Closed Revenues");

                                  IF "Project Status" = "Project Status"::Finished THEN BEGIN
                                    CDatFilterStart := DMY2DATE(1,1,(DATE2DMY(DatFilterStart,3)));
                                    IF "Posting Date Closing" <= DatFilterEnd THEN BEGIN
                                      IF ("Posting Date Closing" >= DatFilterStart) AND ("Posting Date Closing" <= DatFilterEnd) THEN
                                        ClosedInPeriodBl := TRUE;
                                      IF ("Posting Date Closing" <= DatFilterEnd) AND ("Posting Date Closing" >= CDatFilterStart) THEN
                                        ClosedPrevPeriodBl := TRUE;
                                      IF ("Posting Date Closing" < CDatFilterStart) THEN
                                        ClosedPrevYearBl := TRUE;
                                    END;
                                    ClosedCosts := -("Closed Costs");
                                    ClosedRev := "Closed Revenues";
                                  END;

                                  FOR ColNo := 1 TO 100 DO BEGIN
                                    CellCde[ColNo] := xl.matrix(ColNo,RowNo);
                                  END;
                                  xlSheet.Range(CellCde[1]).Value := "No.";
                                  IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::Single THEN
                                    xlSheet.Range(CellCde[2]).Value := "Main Project";
                                  xlSheet.Range(CellCde[3]).Value := Description;
                                  xlSheet.Range(CellCde[4]).Value := COPYSTR(FORMAT("Single/Main/Sub Project"),1,1);
                                  xlSheet.Range(CellCde[5]).Value := COPYSTR(FORMAT(Job."Settlement Method"),1,1);
                                  xlSheet.Range(CellCde[6]).Value := FORMAT(Discipline);                              //n +1
                                  xlSheet.Range(CellCde[7]).Value := FORMAT("Ending Date");
                                  xlSheet.Range(CellCde[8]).Value := "Bill-to Customer No.";
                                  CALCFIELDS("Principal Name", "Salesperson Name");
                                  xlSheet.Range(CellCde[9]).Value := "Principal Name";
                                  xlSheet.Range(CellCde[10]).Value := FORMAT("Country/Region Code");                  //n +2
                                  xlSheet.Range(CellCde[11]).Value := "Global Dimension 1 Code";
                                  xlSheet.Range(CellCde[12]).Value := "Project Manager";                              //n +3
                                  IF "Project Manager" <> '' THEN
                                    IF EmployeeRec.GET("Project Manager") THEN
                                      xlSheet.Range(CellCde[13]).Value := EmployeeRec."Last Name";
                                  xlSheet.Range(CellCde[14]).Value := FORMAT("Salesperson Code"); //NIEUW
                                  xlSheet.Range(CellCde[15]).Value := "Salesperson Name";

                                  xlSheet.Range(CellCde[16]).Value := FORMAT("Project Status");

                                  CASE "Project Status" OF
                                    "Project Status"::Finished :xlSheet.Range(CellCde[16]).Interior.ColorIndex(4);
                                    "Project Status"::Production :xlSheet.Range(CellCde[16]).Interior.ColorIndex(20);
                                    "Project Status"::Preparation :xlSheet.Range(CellCde[16]).Interior.ColorIndex(46);
                                  END;

                                  xlSheet.Range(CellCde[17]).Value := FORMAT("Project Type");
                                  lPrognosis.SETRANGE("Project No.", "No.");
                                  lPrognosis.SETRANGE("Prognosis Date", 0D, DatFilterEnd);
                                  IF lPrognosis.FINDLAST THEN
                                    xlSheet.Range(CellCde[18]).Value := FORMAT(lPrognosis."Prognosis Date");                    //n +4

                                  TegenBGereedmCosts := 0;
                                  TegenBGereedmRev  := 0;

                                  IF ("Project Status" = "Project Status"::Finished) AND ("Posting Date Closing" <= DatFilterEnd) THEN BEGIN
                                    GereedgemeldBl := TRUE;
                                  END;

                                  //Intake vorig jaar      //Old 13 transfer to 17 (+4)
                                  IF NOT ClosedPrevYearBl THEN BEGIN
                                    xlSheet.Range(CellCde[19]).Value := FORMAT(ROUND(PrognTotRevenuePrevYear,1));;
                                    xlSheet.Range(CellCde[20]).Value := FORMAT(ROUND(PrognTotCostDecPrevYear,1));;
                                    xlSheet.Range(CellCde[21]).Value := FORMAT(ROUND(PrognTotRevenuePrevYear - PrognTotCostDecPrevYear,1));
                                    IF PrognTotRevenuePrevYear <> 0 THEN BEGIN
                                      xlSheet.Range(CellCde[22]).Value := FORMAT(ROUND((PrognTotRevenuePrevYear - PrognTotCostDecPrevYear) /
                                      PrognTotRevenuePrevYear,0.01));
                                      xlSheet.Range(CellCde[22]).NumberFormat := STRSUBSTNO('%1','0%');
                                    END;
                                  END ELSE BEGIN
                                    xlSheet.Range(CellCde[19]).Value := FORMAT(ROUND(ClosedRev,1));;
                                    xlSheet.Range(CellCde[20]).Value := FORMAT(ROUND(ClosedCosts,1));;
                                    xlSheet.Range(CellCde[21]).Value := FORMAT(ROUND(ClosedRev - ClosedCosts,1));
                                    IF (PrognTotRevenuePrevYear - ClosedRev) <> 0 THEN BEGIN
                                      xlSheet.Range(CellCde[22]).Value := FORMAT(ROUND((ClosedRev - ClosedCosts) / ClosedRev,0.01));
                                      xlSheet.Range(CellCde[22]).NumberFormat := STRSUBSTNO('%1','0%');
                                    END;
                                  END;

                                  //Intake t/m eindig periode  //02092010.sn GB
                                  IF PrognTotRevenuePrevP <> 0 THEN
                                    xlSheet.Range(CellCde[23]).Value := FORMAT(ROUND(PrognTotRevenuePrevP - PrognTotRevenuePrevYear,1))
                                  ELSE
                                    xlSheet.Range(CellCde[23]).Value := 0;
                                  IF PrognTotCostDecPrevP <> 0 THEN
                                    xlSheet.Range(CellCde[24]).Value := FORMAT(ROUND(PrognTotCostDecPrevP - PrognTotCostDecPrevYear,1))
                                  ELSE
                                    xlSheet.Range(CellCde[24]).Value := 0;
                                  IF (PrognTotRevenuePrevP = 0) AND (PrognTotCostDecPrevP = 0) THEN
                                    xlSheet.Range(CellCde[25]).Value := 0
                                  ELSE
                                    xlSheet.Range(CellCde[25]).Value := FORMAT(ROUND((PrognTotRevenuePrevP - PrognTotRevenuePrevYear) -
                                    (PrognTotCostDecPrevP - PrognTotCostDecPrevYear),1));
                                  IF (PrognTotRevenuePrevP = 0) AND (PrognTotCostDecPrevP = 0) THEN
                                    xlSheet.Range(CellCde[26]).Value := 0
                                  ELSE
                                    IF (PrognTotRevenuePrevP - PrognTotRevenuePrevYear) <> 0 THEN BEGIN
                                      xlSheet.Range(CellCde[26]).Value := FORMAT(ROUND(((PrognTotRevenuePrevP - PrognTotRevenuePrevYear) -
                                      (PrognTotCostDecPrevP - PrognTotCostDecPrevYear)) / (PrognTotRevenuePrevP - PrognTotRevenuePrevYear),0.01));
                                      xlSheet.Range(CellCde[26]).NumberFormat := STRSUBSTNO('%1','0%');
                                  END;


                                  //Intake deze periode LastPRognPRevPerCost - LastPRognPRevPerRev
                                  IF LastPRognPRevPerRev = 0 THEN
                                    LastPRognPRevPerRev := PrognTotRevenuePrevYear;
                                  IF LastPRognPRevPerCost = 0 THEN
                                    LastPRognPRevPerCost := PrognTotCostDecPrevYear;

                                  IF (PrognTotRevenue <> 0) THEN
                                    xlSheet.Range(CellCde[27]).Value := FORMAT(ROUND(PrognTotRevenue - LastPRognPRevPerRev,1))
                                  ELSE
                                    xlSheet.Range(CellCde[27]).Value := 0;

                                  IF PrognTotCostDec <> 0 THEN
                                    xlSheet.Range(CellCde[28]).Value := FORMAT(ROUND(PrognTotCostDec - LastPRognPRevPerCost,1))
                                  ELSE
                                    xlSheet.Range(CellCde[28]).Value := 0;

                                  IF (PrognTotCostDec <> 0) AND (PrognTotRevenue <> 0) THEN BEGIN
                                    xlSheet.Range(CellCde[29]).Value := FORMAT(ROUND((PrognTotRevenue - LastPRognPRevPerRev) -
                                                                        (PrognTotCostDec - LastPRognPRevPerCost),1));
                                    IF (PrognTotRevenue - LastPRognPRevPerRev) <> 0 THEN BEGIN
                                      xlSheet.Range(CellCde[30]).Value := FORMAT(ROUND(((PrognTotRevenue - LastPRognPRevPerRev) -
                                      (PrognTotCostDec - LastPRognPRevPerCost)) / (PrognTotRevenue - LastPRognPRevPerRev),0.01));
                                      xlSheet.Range(CellCde[30]).NumberFormat := STRSUBSTNO('%1','0%');
                                    END;
                                  END ELSE BEGIN
                                    xlSheet.Range(CellCde[29]).Value := 0;
                                    xlSheet.Range(CellCde[30]).Value := 0;
                                  END;

                                  // tussentijdsresutaat Vorig jaar
                                  //IF "Project Status" <> "Project Status"::Finished THEN
                                  IF GereedgemeldBl THEN BEGIN
                                    IF "Posting Date Closing" <= (DMY2DATE(31,12,(DATE2DMY(DatFilterStart,3) - 1))) THEN
                                      CalcTussResGereedm("Posting Date Closing");
                                    IF ("Posting Date Closing" >= DatFilterStart) AND ("Posting Date Closing" <= DatFilterEnd) THEN
                                      CalcTussResGereedmthisperiod("Posting Date Closing");
                                  END;

                                  BEGIN
                                    xlSheet.Range(CellCde[31]).Value := FORMAT(ROUND(GttResOmzPrevYear + TegenBGereedmRev,1));
                                    xlSheet.Range(CellCde[32]).Value := FORMAT(ROUND(GttResKostPrPrevYear + TegenBGereedmCosts,1));
                                    xlSheet.Range(CellCde[33]).Value := FORMAT(ROUND((GttResOmzPrevYear + TegenBGereedmRev) -
                                    (GttResKostPrPrevYear + TegenBGereedmCosts),1));
                                    IF (GttResOmzPrevYear + TegenBGereedmRev) <> 0 THEN BEGIN
                                      xlSheet.Range(CellCde[34]).Value := FORMAT(ROUND(((GttResOmzPrevYear + TegenBGereedmRev) -
                                      (GttResKostPrPrevYear + TegenBGereedmCosts)) / (GttResOmzPrevYear + TegenBGereedmRev),0.01));
                                      xlSheet.Range(CellCde[34]).NumberFormat := STRSUBSTNO('%1','0%');
                                    END;
                                  END;

                                  // tussentijdsresutaat tot en met deze periode
                                  //IF "Project Status" <> "Project Status"::Finished THEN
                                  IF GereedgemeldBl THEN
                                    IF ((("Posting Date Closing" >= (DMY2DATE(31,12,(DATE2DMY(DatFilterStart,3) - 1))))) AND
                                       ("Posting Date Closing" < DatFilterEnd)) THEN
                                      CalcTussResGereedm("Posting Date Closing");

                                  BEGIN
                                    xlSheet.Range(CellCde[35]).Value := FORMAT(ROUND(GttResOmzPrevP + (-1 * TegenBGereedmRev),1));
                                    xlSheet.Range(CellCde[36]).Value := FORMAT(ROUND(GttResKostPrPrevP + (-1 * TegenBGereedmCosts),1));
                                    xlSheet.Range(CellCde[37]).Value := FORMAT(ROUND((GttResOmzPrevP + (-1 * TegenBGereedmRev)) -
                                    (GttResKostPrPrevP + (-1 * TegenBGereedmCosts)),1));
                                    IF (GttResOmzPrevP + (-1 * TegenBGereedmRev)) <> 0 THEN BEGIN
                                      xlSheet.Range(CellCde[38]).Value := FORMAT(ROUND(((GttResOmzPrevP + (-1 * TegenBGereedmRev)) -
                                      (GttResKostPrPrevP +(-1 * TegenBGereedmCosts))) / (GttResOmzPrevP + (-1 * TegenBGereedmRev)),0.01));
                                      xlSheet.Range(CellCde[38]).NumberFormat := STRSUBSTNO('%1','0%');
                                    END;
                                  END;

                                  // tussentijdsresutaat deze periode
                                  BEGIN
                                    xlSheet.Range(CellCde[39]).Value := FORMAT(ROUND(GttResOmz + (-1 * TegenBGereedmRevPer),1));
                                    xlSheet.Range(CellCde[40]).Value := FORMAT(ROUND(GttResKostPr + (-1 * TegenBGereedmCostsPer),1));
                                    xlSheet.Range(CellCde[41]).Value := FORMAT(ROUND((GttResOmz + (-1 * TegenBGereedmRevPer)) -
                                    (GttResKostPr + (-1 * TegenBGereedmCostsPer)),1));
                                    IF (GttResOmz - (-1 * TegenBGereedmRevPer) <> 0) THEN BEGIN
                                      xlSheet.Range(CellCde[42]).Value := FORMAT(ROUND(((GttResOmz + (-1 * TegenBGereedmRevPer))
                                      - (GttResKostPr + (-1 * TegenBGereedmCostsPer)))
                                       / (GttResOmz + (-1 * TegenBGereedmRevPer)),0.01));
                                      xlSheet.Range(CellCde[42]).NumberFormat := STRSUBSTNO('%1','0%');
                                    END;
                                  END;

                                  IF ("Posting Date Closing" <> 0D) THEN BEGIN
                                    IF DATE2DMY("Posting Date Closing",3) < DATE2DMY(DatFilterEnd,3) THEN BEGIN
                                       FOR i := 31 TO 42 DO BEGIN
                                         //xlSheet.Range(CellCde[i]).Value := '0';
                                       END;
                                    END;
                                    //070912.GB.new
                                    IF DATE2DMY("Posting Date Closing",2) < DATE2DMY(DatFilterEnd,2) THEN BEGIN
                                       FOR i := 31 TO 42 DO BEGIN
                                         //xlSheet.Range(CellCde[i]).Value := '0';
                                       END;
                                    END;
                                    //070912.GB.endnew
                                  END;

                                  //Gereed deze periode
                                  CALCFIELDS("Closed Revenues Period","Closed Costs Period");
                                  xlSheet.Range(CellCde[51]).Value := FORMAT(ROUND("Closed Revenues Period",1)); //  opb
                                  xlSheet.Range(CellCde[52]).Value := FORMAT(ROUND(-"Closed Costs Period",1));    //  kosten
                                  xlSheet.Range(CellCde[53]).Value := FORMAT(ROUND("Closed Revenues Period" -
                                                                      -"Closed Costs Period" ,1));                //  marge
                                  IF "Closed Revenues Period" <> 0 THEN BEGIN
                                    xlSheet.Range(CellCde[54]).Value := FORMAT(
                                    ROUND((("Closed Revenues Period" - -("Closed Costs Period")) / ("Closed Revenues Period")),0.01));  //  marge%
                                    xlSheet.Range(CellCde[54]).NumberFormat := STRSUBSTNO('%1','0%');
                                  END;

                                  //Gereed vorige periode
                                  GDatFilterStart := DMY2DATE(1,1,(DATE2DMY(DatFilterStart,3)));
                                  GDatFilterEnd := DatFilterEnd;
                                  SETRANGE("Period Filter",GDatFilterStart,GDatFilterEnd);
                                  SETRANGE("Cumulation Filter",0D,GDatFilterEnd);
                                  CALCFIELDS("Closed Revenues Period","Closed Costs Period");
                                  xlSheet.Range(CellCde[47]).Value := FORMAT(ROUND("Closed Revenues Period",1)); //  opb
                                  xlSheet.Range(CellCde[48]).Value := FORMAT(ROUND(-"Closed Costs Period",1));    //  kosten
                                  xlSheet.Range(CellCde[49]).Value := FORMAT(ROUND("Closed Revenues Period" -
                                                                      -"Closed Costs Period" ,1));                //  marge
                                  IF "Closed Revenues Period" <> 0 THEN BEGIN
                                    xlSheet.Range(CellCde[50]).Value := FORMAT(ROUND((("Closed Revenues Period" -
                                    -"Closed Costs Period") / "Closed Revenues Period"),0.01));                        //  marge%
                                    xlSheet.Range(CellCde[50]).NumberFormat := STRSUBSTNO('%1','0%');
                                  END;

                                  IF GereedgemeldBl THEN BEGIN
                                    GereedRev := ROUND("Closed Revenues Period",1);
                                    GereedCosts := ROUND(-"Closed Costs Period",1);
                                  END;

                                  //Gereed vorig jaar
                                  G2DatFilterEnd := DMY2DATE(31,12,(DATE2DMY(DatFilterStart,3) - 1));
                                  SETRANGE("Period Filter",0D,G2DatFilterEnd);
                                  SETRANGE("Cumulation Filter",0D,G2DatFilterEnd);
                                  CALCFIELDS("Closed Revenues Period","Closed Costs Period");
                                  xlSheet.Range(CellCde[43]).Value := FORMAT(ROUND("Closed Revenues Period",1)); //  opb
                                  xlSheet.Range(CellCde[44]).Value := FORMAT(ROUND(("Closed Costs Period" * -1),1));    //  kosten
                                  xlSheet.Range(CellCde[45]).Value := FORMAT(ROUND(("Closed Revenues Period" - ("Closed Costs Period" * -1)),1)); //  marge
                                  IF "Closed Revenues Period" <> 0 THEN BEGIN
                                    xlSheet.Range(CellCde[46]).Value := FORMAT(ROUND((("Closed Revenues Period" -
                                    "Closed Costs Period") / "Closed Revenues Period"),0.01));                        //  marge%
                                    xlSheet.Range(CellCde[46]).NumberFormat := STRSUBSTNO('%1','0%');
                                  END;

                                  IF GereedgemeldBl THEN BEGIN
                                    GereedRev := GereedRev + ROUND("Closed Revenues Period",1);
                                    GereedCosts := GereedCosts + ROUND(("Closed Costs Period" * -1),1);
                                  END;

                                  //Corr. intake prognose
                                  IF "Posting Date Closing" <> 0D THEN
                                    xlSheet.Range(CellCde[55]).Value := "Posting Date Closing";
                                  IF GereedgemeldBl THEN BEGIN
                                    xlSheet.Range(CellCde[56]).Value := STRSUBSTNO('=((W%1+S%1)-(AQ%1+AU%1)) * -1', RowNo);
                                    xlSheet.Range(CellCde[56]).NumberFormat :='#.##0';
                                    xlSheet.Range(CellCde[57]).Value := STRSUBSTNO('=((X%1+T%1)-(AR%1+AV%1)) * -1', RowNo);
                                    xlSheet.Range(CellCde[57]).NumberFormat :='#.##0';
                                    xlSheet.Range(CellCde[58]).Value := STRSUBSTNO('=BD%1-BE%1',RowNo);
                                    xlSheet.Range(CellCde[58]).NumberFormat :='#.##0';
                                  END;

                                  //BackLog
                                  SETRANGE("Period Filter",DatFilterStart,DatFilterEnd);
                                  SETRANGE("Cumulation Filter",0D,DatFilterEnd);

                                  xlSheet.Range(CellCde[59]).Value := STRSUBSTNO('=(W%1+S%1)-(AI%1+AE%1)-(AU%1+AQ%1)+(BD%1)', RowNo);
                                  xlSheet.Range(CellCde[60]).Value := STRSUBSTNO('=(X%1+T%1)-(AJ%1+AF%1)-(AV%1+AR%1)+(BE%1)', RowNo);
                                  xlSheet.Range(CellCde[61]).Value := STRSUBSTNO('=(BG%1-BH%1)', RowNo);

                                  xlSheet.Range(CellCde[62]).Value := STRSUBSTNO('=IF(BG%1=0;"";BI%1/BG%1)',RowNo);
                                  xlSheet.Range(CellCde[62]).NumberFormat := STRSUBSTNO('%1','0%');

                                  //Voorziening
                                  xlSheet.Range(CellCde[63]).Value := FORMAT(ROUND(GPerVoorz,1));
                                  xlSheet.Range(CellCde[64]).Value := FORMAT(ROUND(GCumVoorz,1));

                                  //Stand OHW periode
                                  xlSheet.Range(CellCde[65]).Value := FORMAT(ROUND("Revenues Period",1));
                                  xlSheet.Range(CellCde[66]).Value := FORMAT(ROUND("Actuals Period",1));
                                  xlSheet.Range(CellCde[67]).Value := FORMAT(ROUND("Actuals Period" - "Revenues Period",1));

                                  //Stand OHW cumulatief
                                  IF GereedgemeldBl THEN
                                    xlSheet.Range(CellCde[68]).Value := FORMAT(ROUND(Revenues + -(GereedRev) + GttResOmzPrevP + GttResOmzPrevYear +
                                    -(TegenBGereedmRev),1))
                                  ELSE
                                    xlSheet.Range(CellCde[68]).Value := FORMAT(ROUND(Revenues + -(GttResOmzPrevP + GttResOmzPrevYear),1));
                                  IF GereedgemeldBl THEN
                                    xlSheet.Range(CellCde[69]).Value := FORMAT(ROUND("Actual Costs" + -(GereedCosts) + GttResKostPrPrevYear + GttResKostPrPrevP +
                                     -(TegenBGereedmCosts),1))
                                  ELSE
                                    xlSheet.Range(CellCde[69]).Value := FORMAT(ROUND("Actual Costs" + -(GttResKostPrPrevYear + GttResKostPrPrevP),1));
                                  IF GereedgemeldBl THEN
                                    xlSheet.Range(CellCde[70]).Value := FORMAT(ROUND(("Actual Costs" + -(GereedCosts) + GttResKostPrPrevYear + GttResKostPrPrevP +
                                    -(TegenBGereedmCosts)) - (Revenues + -(GereedRev) + GttResOmzPrevP + GttResOmzPrevYear + -(TegenBGereedmRev)),1))
                                  ELSE
                                    xlSheet.Range(CellCde[70]).Value := FORMAT(ROUND(("Actual Costs" + -(GttResKostPrPrevYear + GttResKostPrPrevP)) -
                                    (Revenues + -(GttResOmzPrevP + GttResOmzPrevYear)),1));

                                  //070912.GB.new
                                  IF ("Posting Date Closing" <> 0D) THEN BEGIN
                                    IF DATE2DMY("Posting Date Closing",3) < DATE2DMY(DatFilterEnd,3) THEN BEGIN
                                       FOR i := 68 TO 70 DO BEGIN
                                         xlSheet.Range(CellCde[i]).Value := '0';
                                       END;
                                    END;
                                    IF DATE2DMY("Posting Date Closing",2) < DATE2DMY(DatFilterEnd,2) THEN BEGIN
                                       FOR i := 68 TO 70 DO BEGIN
                                         xlSheet.Range(CellCde[i]).Value := '0';
                                       END;
                                    END;
                                  END;
                                  //070912.GB.endnew

                                  xlSheet.Range(CellCde[71]).Value := STRSUBSTNO('=+BR%1+BL%1',RowNo);
                                  IF ShowVerpl THEN BEGIN
                                    xlSheet.Range(CellCde[72]).Value := STRSUBSTNO('=VLOOKUP(A%1;Verplichtingen!A:Y;25;)',RowNo);
                                    xlSheet.Range(CellCde[72]).NumberFormat :='#.##0';
                                  END;
                                  RowNo += 1;
                                END;

               OnPostDataItem=BEGIN

                                RowCounter := RowNo;
                                xlSheet.Range('R4').Value := 'GRANDTOTAL';

                                xlSheet.Range('S4').Value := STRSUBSTNO('=SUBTOTAL(9;S8:S%1)',RowNo);
                                xlSheet.Range('T4').Value := STRSUBSTNO('=SUBTOTAL(9;T8:T%1)',RowNo);
                                xlSheet.Range('U4').Value := STRSUBSTNO('=SUBTOTAL(9;U8:U%1)',RowNo);
                                xlSheet.Range('S4:U4').NumberFormat :='#.##0';
                                xlSheet.Range('V4').Value := STRSUBSTNO('=IFERROR(+U4/S4;0)');
                                xlSheet.Range('V4').NumberFormat := '0%';
                                xlSheet.Range('W4').Value := STRSUBSTNO('=SUBTOTAL(9;W8:W%1)',RowNo);
                                xlSheet.Range('X4').Value := STRSUBSTNO('=SUBTOTAL(9;X8:X%1)',RowNo);
                                xlSheet.Range('Y4').Value := STRSUBSTNO('=SUBTOTAL(9;Y8:Y%1)',RowNo);
                                xlSheet.Range('W4:Y4').NumberFormat :='#.##0';
                                xlSheet.Range('Z4').Value := STRSUBSTNO('=IFERROR(+Y4/W4;0)');
                                xlSheet.Range('Z4').NumberFormat := '0%';
                                xlSheet.Range('AA4').Value := STRSUBSTNO('=SUBTOTAL(9;AA8:AA%1)',RowNo);
                                xlSheet.Range('AB4').Value := STRSUBSTNO('=SUBTOTAL(9;AB8:AB%1)',RowNo);
                                xlSheet.Range('AC4').Value := STRSUBSTNO('=SUBTOTAL(9;AC8:AC%1)',RowNo);
                                xlSheet.Range('AA4:AC4').NumberFormat :='#.##0';
                                xlSheet.Range('AD4').Value := STRSUBSTNO('=IFERROR(+AC4/AA4;0)');
                                xlSheet.Range('AD4').NumberFormat := '0%';
                                xlSheet.Range('AE4').Value := STRSUBSTNO('=SUBTOTAL(9;AE8:AE%1)',RowNo);
                                xlSheet.Range('AF4').Value := STRSUBSTNO('=SUBTOTAL(9;AF8:AF%1)',RowNo);
                                xlSheet.Range('AG4').Value := STRSUBSTNO('=SUBTOTAL(9;AG8:AG%1)',RowNo);
                                xlSheet.Range('AE4:AG4').NumberFormat :='#.##0';
                                xlSheet.Range('AH4').Value := STRSUBSTNO('=IFERROR(+AG4/AE4;0)');
                                xlSheet.Range('AH4').NumberFormat := '0%';
                                xlSheet.Range('AI4').Value := STRSUBSTNO('=SUBTOTAL(9;AI8:AI%1)',RowNo);
                                xlSheet.Range('AJ4').Value := STRSUBSTNO('=SUBTOTAL(9;AJ8:AJ%1)',RowNo);
                                xlSheet.Range('AK4').Value := STRSUBSTNO('=SUBTOTAL(9;AK8:AK%1)',RowNo);
                                xlSheet.Range('AI4:AK4').NumberFormat :='#.##0';
                                xlSheet.Range('AL4').Value := STRSUBSTNO('=IFERROR(+AK4/AI4;0)');
                                xlSheet.Range('AL4').NumberFormat := '0%';
                                xlSheet.Range('AM4').Value := STRSUBSTNO('=SUBTOTAL(9;AM8:AM%1)',RowNo);
                                xlSheet.Range('AN4').Value := STRSUBSTNO('=SUBTOTAL(9;AN8:AN%1)',RowNo);
                                xlSheet.Range('AO4').Value := STRSUBSTNO('=SUBTOTAL(9;AO8:AO%1)',RowNo);
                                xlSheet.Range('AM4:AO4').NumberFormat :='#.##0';
                                xlSheet.Range('AP4').Value := STRSUBSTNO('=IFERROR(+AO4/AM4;0)');
                                xlSheet.Range('AP4').NumberFormat := '0%';
                                xlSheet.Range('AQ4').Value := STRSUBSTNO('=SUBTOTAL(9;AQ8:AQ%1)',RowNo);
                                xlSheet.Range('AR4').Value := STRSUBSTNO('=SUBTOTAL(9;AR8:AR%1)',RowNo);
                                xlSheet.Range('AS4').Value := STRSUBSTNO('=SUBTOTAL(9;AS8:AS%1)',RowNo);
                                xlSheet.Range('AQ4:AS4').NumberFormat :='#.##0';
                                xlSheet.Range('AT4').Value := STRSUBSTNO('=IFERROR(+AS4/AQ4;0)');
                                xlSheet.Range('AT4').NumberFormat := '0%';
                                xlSheet.Range('AU4').Value := STRSUBSTNO('=SUBTOTAL(9;AU8:AU%1)',RowNo);
                                xlSheet.Range('AV4').Value := STRSUBSTNO('=SUBTOTAL(9;AV8:AV%1)',RowNo);
                                xlSheet.Range('AW4').Value := STRSUBSTNO('=SUBTOTAL(9;AW8:AW%1)',RowNo);
                                xlSheet.Range('AU4:AW4').NumberFormat :='#.##0';
                                xlSheet.Range('AX4').Value := STRSUBSTNO('=IFERROR(+AW4/AU4;0)');
                                xlSheet.Range('AX4').NumberFormat := '0%';
                                xlSheet.Range('AY4').Value := STRSUBSTNO('=SUBTOTAL(9;AY8:AY%1)',RowNo);
                                xlSheet.Range('AZ4').Value := STRSUBSTNO('=SUBTOTAL(9;AZ8:AZ%1)',RowNo);
                                xlSheet.Range('BA4').Value := STRSUBSTNO('=SUBTOTAL(9;BA8:BA%1)',RowNo);
                                xlSheet.Range('AY4:BA4').NumberFormat :='#.##0';
                                xlSheet.Range('BB4').Value := STRSUBSTNO('=IFERROR(+BA4/AY4;0)');
                                xlSheet.Range('BB4').NumberFormat := '0%';
                                //xlSheet.Range('BC4').Value := STRSUBSTNO('=SUBTOTAL(9;BC8:BC%1)',RowNo);
                                xlSheet.Range('BD4').Value := STRSUBSTNO('=SUBTOTAL(9;BD8:BD%1)',RowNo);
                                xlSheet.Range('BE4').Value := STRSUBSTNO('=SUBTOTAL(9;BE8:BE%1)',RowNo);
                                xlSheet.Range('BC4:BE4').NumberFormat :='#.##0';
                                xlSheet.Range('BF4').Value := STRSUBSTNO('=IFERROR(+BE4/BD4;0)');
                                xlSheet.Range('BF4').NumberFormat := '0%';
                                xlSheet.Range('BG4').Value := STRSUBSTNO('=SUBTOTAL(9;BG8:BG%1)',RowNo);
                                xlSheet.Range('BH4').Value := STRSUBSTNO('=SUBTOTAL(9;BH8:BH%1)',RowNo);
                                xlSheet.Range('BI4').Value := STRSUBSTNO('=SUBTOTAL(9;BI8:BI%1)',RowNo);
                                xlSheet.Range('BG4:BI4').NumberFormat :='#.##0';
                                xlSheet.Range('BJ4').Value := STRSUBSTNO('=IFERROR(+BI4/BG4;0)');
                                xlSheet.Range('BJ4').NumberFormat := '0%';
                                xlSheet.Range('BK4').Value := STRSUBSTNO('=SUBTOTAL(9;BK8:BK%1)',RowNo);
                                xlSheet.Range('BL4').Value := STRSUBSTNO('=SUBTOTAL(9;BL8:BL%1)',RowNo);
                                xlSheet.Range('BM4').Value := STRSUBSTNO('=SUBTOTAL(9;BM8:BM%1)',RowNo);
                                xlSheet.Range('BK4:BM4').NumberFormat :='#.##0';
                                //xlSheet.Range('BN4').Value := STRSUBSTNO('=IFERROR(+BM4/BK4;0)');
                                xlSheet.Range('BN4').Value := STRSUBSTNO('=SUBTOTAL(9;BN8:BN%1)',RowNo);
                                xlSheet.Range('BN4').NumberFormat := '#.##0';
                                xlSheet.Range('BO4').Value := STRSUBSTNO('=SUBTOTAL(9;BO8:BO%1)',RowNo);
                                xlSheet.Range('BP4').Value := STRSUBSTNO('=SUBTOTAL(9;BP8:BP%1)',RowNo);
                                xlSheet.Range('BQ4').Value := STRSUBSTNO('=SUBTOTAL(9;BQ8:BQ%1)',RowNo);
                                xlSheet.Range('BO4:BQ4').NumberFormat :='#.##0';
                                //xlSheet.Range('BR4').Value := STRSUBSTNO('=IFERROR(+BQ4/BO4;0)');
                                xlSheet.Range('BR4').Value := STRSUBSTNO('=SUBTOTAL(9;BR8:BR%1)',RowNo);
                                xlSheet.Range('BR4').NumberFormat := '#.##0';
                                xlSheet.Range('BS4').Value := STRSUBSTNO('=SUBTOTAL(9;BS8:BS%1)',RowNo);
                                xlSheet.Range('BT4').Value := STRSUBSTNO('=SUBTOTAL(9;BT8:BT%1)',RowNo);
                                xlSheet.Range('BS4:BT4').NumberFormat :='#.##0';
                              END;

               ReqFilterFields=No.,Global Dimension 1 Code,Ending Date }

    { 1100525004;;DataItem;ResultsInPeriod   ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN

                               xlSheet := xlApp.Sheets.Add;
                               xlApp.DisplayAlerts := FALSE;

                               xlSheet.Name := FORMAT('Resultaat in de periode');
                               xlSheet.Select;

                               xlSheet.Range('A1:T7').Font.Bold := TRUE;
                               xlSheet.Range('A7:T7').AutoFilter;
                               xlSheet.Range('A5:T7').Interior.ColorIndex(36);

                               xlSheet.Range('A5:O5').Merge;
                               xlSheet.Range('A5').HorizontalAlignment := -4108;
                               xlSheet.Range('A6:O6').Merge;
                               xlSheet.Range('A6').HorizontalAlignment := -4108;
                               xlSheet.Range('A6').Value := 'Algemene gegevens';

                               xlSheet.Range('P5:S5').Merge;
                               xlSheet.Range('P5').HorizontalAlignment := -4108;
                               xlSheet.Range('P6:S6').Merge;
                               xlSheet.Range('P6').HorizontalAlignment := -4108;
                               xlSheet.Range('P5').Value := FORMAT(STRSUBSTNO('%1..%2', DatFilterStart, DatFilterEnd));
                               xlSheet.Range('P6').Value := 'Resultaat in periode';


                               //FieldLabels
                               xlSheet.Range('A7').Value := 'Project';
                               xlSheet.Range('B7').Value := 'Hoofdproject';                        //1
                               xlSheet.Range('C7').Value := 'Omschrijving';                        //2
                               xlSheet.Range('D7').Value := 'H/D/E';                               //3
                               xlSheet.Range('E7').Value := 'A/R';                                 //4
                               xlSheet.Range('F7').Value := 'Discipline';                          //5 n
                               xlSheet.Range('G7').Value := 'Oplevering';                          //6
                               xlSheet.Range('H7').Value := 'Debiteurnummer';                      //7
                               xlSheet.Range('I7').Value := 'Opdrachtgever';                       //8
                               xlSheet.Range('J7').Value := 'Land';                                //9 n
                               xlSheet.Range('K7').Value := 'Productlijn';                         //10
                               xlSheet.Range('L7').Value := 'PJM';                                 //11
                               xlSheet.Range('M7').Value := 'Naam';                                //12 n
                               xlSheet.Range('N7').Value := 'Projectstatus';                       //13
                               xlSheet.Range('O7').Value := 'Projecttype';                         //14
                               xlSheet.Range('P7').Value := 'Opbrengst';   ////////////////////      15
                               xlSheet.Range('Q7').Value := 'Kosten';      //Intake t/m      //      16
                               xlSheet.Range('R7').Value := 'Marge';       //einde vorig jaar//      17
                               xlSheet.Range('S7').Value := 'Marge %';     ////////////////////      18
                               xlSheet.Range('T7').Value := 'Mutatie voorziening'; //                19

                               xlApp.Range('F8').Select;
                               xlApp.ActiveWindow.FreezePanes := TRUE;

                               RowNo := 8;

                               ResultsInPeriod.COPYFILTERS(Job);
                             END;

               OnAfterGetRecord=VAR
                                  EmployeeRec@1100525000 : Record 5200;
                                BEGIN

                                  SETRANGE("Period Filter",DatFilterStart,DatFilterEnd);
                                  IF GETRANGEMIN("Period Filter") = GETRANGEMAX("Period Filter") THEN
                                    SETRANGE("Period Filter",GETRANGEMIN("Period Filter"));

                                  SETRANGE("Cumulation Filter",0D,DatFilterEnd);

                                  IF ("Project Status" >= "Project Status"::Finished) THEN BEGIN
                                    IF NOT ShowClosedProjects THEN BEGIN
                                      IF ("Posting Date Closing" <> 0D) THEN
                                        IF DATE2DMY("Posting Date Closing",3) < DATE2DMY(DatFilterEnd,3) THEN
                                          CurrReport.SKIP;
                                    END;
                                  END;

                                  FOR ColNo := 1 TO 100 DO BEGIN
                                    CellCde[ColNo] := xl.matrix(ColNo,RowNo);
                                  END;
                                  xlSheet.Range(CellCde[1]).Value := "No.";
                                  IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::Single THEN
                                    xlSheet.Range(CellCde[2]).Value := "Main Project";
                                  xlSheet.Range(CellCde[3]).Value := Description;
                                  xlSheet.Range(CellCde[4]).Value := COPYSTR(FORMAT("Single/Main/Sub Project"),1,1);
                                  xlSheet.Range(CellCde[5]).Value := COPYSTR(FORMAT(Job."Settlement Method"),1,1);
                                  xlSheet.Range(CellCde[6]).Value := FORMAT(Discipline);
                                  xlSheet.Range(CellCde[7]).Value := FORMAT("Ending Date");
                                  xlSheet.Range(CellCde[8]).Value := "Bill-to Customer No.";
                                  CALCFIELDS("Principal Name");
                                  xlSheet.Range(CellCde[9]).Value := "Principal Name";
                                  xlSheet.Range(CellCde[10]).Value := FORMAT("Country/Region Code");
                                  xlSheet.Range(CellCde[11]).Value := "Global Dimension 1 Code";
                                  xlSheet.Range(CellCde[12]).Value := FORMAT("Project Manager");
                                  IF "Project Manager" <> '' THEN
                                    IF EmployeeRec.GET("Project Manager") THEN
                                      xlSheet.Range(CellCde[13]).Value := EmployeeRec."Last Name";
                                  xlSheet.Range(CellCde[14]).Value := FORMAT("Project Status");

                                  CASE "Project Status" OF
                                    "Project Status"::Finished :xlSheet.Range(CellCde[14]).Interior.ColorIndex(4);
                                    "Project Status"::Production :xlSheet.Range(CellCde[14]).Interior.ColorIndex(20);
                                    "Project Status"::Preparation :xlSheet.Range(CellCde[14]).Interior.ColorIndex(46);
                                  END;
                                  xlSheet.Range(CellCde[15]).Value := FORMAT("Project Type");

                                  xlSheet.Range(CellCde[16]).Value := STRSUBSTNO(Verw4, RowNo, RowNo);
                                  xlSheet.Range(CellCde[17]).Value := STRSUBSTNO(Verw5, RowNo, RowNo);
                                  xlSheet.Range(CellCde[18]).Value := STRSUBSTNO('=P%1-Q%1', RowNo, RowNo);
                                  xlSheet.Range(CellCde[19]).Value := STRSUBSTNO('=IF(P%1=0;0;(R%2/P%3))',RowNo, RowNo, RowNo);
                                  xlSheet.Range(CellCde[19]).NumberFormat := '0%';
                                  xlSheet.Range(CellCde[20]).Value := STRSUBSTNO(Verw6, RowNo);

                                  RowNo += 1;
                                END;

               OnPostDataItem=BEGIN

                                xlSheet.Range('N4').Value := 'GRANDTOTAL';

                                xlSheet.Range('P4').Value := STRSUBSTNO('=SUBTOTAL(9;P8:P%1)',RowNo);
                                xlSheet.Range('Q4').Value := STRSUBSTNO('=SUBTOTAL(9;Q8:Q%1)',RowNo);
                                xlSheet.Range('R4').Value := STRSUBSTNO('=SUBTOTAL(9;R8:R%1)',RowNo);
                                xlSheet.Range('S4').Value := STRSUBSTNO('=IFERROR(+R4/P4;0)');
                                xlSheet.Range('S4').NumberFormat := '0%';
                                xlSheet.Range('T4').Value := STRSUBSTNO('=SUBTOTAL(9;T8:T%1)',RowNo);

                                xlSheet.Range('P4:R4').NumberFormat :='#.##0';
                                xlSheet.Range('T4').NumberFormat :='#.##0';
                              END;
                               }

    { 1100525003;;DataItem;Forecast          ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN

                               IF NOT ShowExtraSheet THEN
                                 CurrReport.BREAK;

                               GenerateAccPer;
                               IF NoAccPeriodBl THEN BEGIN
                                 xlApp.Visible := TRUE;
                                 CurrReport.BREAK;
                               END;

                               Forecast.COPYFILTERS(Job);

                               IF OnlySingleAndMainProjects THEN
                                 SETRANGE("Single/Main/Sub Project","Single/Main/Sub Project"::Single,"Single/Main/Sub Project"::"Main Project");

                               RowNo := 3;
                               GenereateForecMonths;
                               RowNo := 6;

                               StartReportingdate := DatFilterEnd + 1;
                               EndReportingDate := CALCDATE('<+12M>',DatFilterEnd + 1);
                               ReportingMonth := DATE2DMY(DatFilterEnd,2);
                             END;

               OnAfterGetRecord=VAR
                                  JobRec2@1100525006 : Record 11072003;
                                  i@1100525005 : Integer;
                                  X@1100525004 : Integer;
                                  EmployeeRec@1100525003 : Record 5200;
                                  AP@1100525002 : Integer;
                                  lCellCde@1100525001 : ARRAY [100] OF Code[20];
                                  l1CellCde@1100525000 : ARRAY [100] OF Code[20];
                                BEGIN

                                  IF ("Project Status" >= "Project Status"::Finished) THEN BEGIN
                                    IF NOT ShowClosedProjects THEN BEGIN
                                      IF ("Posting Date Closing" <> 0D) THEN
                                        IF DATE2DMY("Posting Date Closing",3) < DATE2DMY(DatFilterEnd,3) THEN
                                          CurrReport.SKIP;
                                    END;
                                  END;

                                  IF "Ending Date" <> 0D THEN BEGIN
                                    //bepalen range op basis van einddatum
                                    FOR AP := 1 TO 12 DO BEGIN
                                      IF ("Ending Date" >= AccountingPer[AP]) AND ("Ending Date" <= AccountingPerEndDate[AP]) THEN
                                        i := AP;
                                    END;
                                  END;

                                  FOR ColNo := 1 TO 100 DO BEGIN
                                    CellCde[ColNo] := xl.matrix(ColNo,RowNo);
                                  END;
                                  xlSheet.Range(CellCde[1]).Value := "No.";
                                  xlSheet.Range(CellCde[2]).Value := Description;
                                  xlSheet.Range(CellCde[3]).Value := COPYSTR(FORMAT("Single/Main/Sub Project"),1,1);
                                  xlSheet.Range(CellCde[4]).Value := COPYSTR(FORMAT(Job."Settlement Method"),1,1);
                                  xlSheet.Range(CellCde[5]).Value := FORMAT("Ending Date");
                                  IF ("Ending Date" <> 0D) THEN
                                    IF ("Ending Date" < DatFilterStart) THEN BEGIN
                                      xlSheet.Range(CellCde[5]).Interior.ColorIndex(3);
                                      xlSheet.Range(CellCde[5]).Font.Bold := TRUE;
                                      xlSheet.Range(CellCde[5]).Font.Italic := TRUE;
                                      xlSheet.Range(CellCde[5]).Font.Size := 12;
                                      xlSheet.Range(CellCde[5]).Font.ThemeColor := 1;
                                    END;

                                  xlSheet.Range(CellCde[6]).Value := "Bill-to Customer No.";
                                  CALCFIELDS("Principal Name");
                                  xlSheet.Range(CellCde[7]).Value := "Principal Name";
                                  xlSheet.Range(CellCde[8]).Value := "Country/Region Code";
                                  xlSheet.Range(CellCde[9]).Value := "Global Dimension 1 Code";
                                  xlSheet.Range(CellCde[10]).Value := FORMAT("Project Manager");
                                  IF "Project Manager" <> '' THEN
                                    IF EmployeeRec.GET("Project Manager") THEN
                                      xlSheet.Range(CellCde[11]).Value := EmployeeRec."Last Name";
                                  xlSheet.Range(CellCde[12]).Value := FORMAT("Project Status");

                                  CASE "Project Status" OF
                                    "Project Status"::Finished :xlSheet.Range(CellCde[12]).Interior.ColorIndex(4);
                                    "Project Status"::Production :xlSheet.Range(CellCde[12]).Interior.ColorIndex(20);
                                    "Project Status"::Preparation :xlSheet.Range(CellCde[12]).Interior.ColorIndex(46);
                                  END;

                                  xlSheet.Range(CellCde[13]).Value := STRSUBSTNO(Verw1,RowNo + 2);
                                  xlSheet.Range(CellCde[14]).Value := STRSUBSTNO(Verw2,RowNo + 2);
                                  xlSheet.Range(CellCde[15]).Value := STRSUBSTNO(Verw3,RowNo + 2);

                                  X := 16;
                                  FOR ColNo := 1 TO 13 DO BEGIN
                                    CellCde[ColNo] := xl.matrix((((ColNo -1) * 3) + X), RowNo);
                                    lCellCde[ColNo] := xl.matrix((((ColNo -1) * 3) + X + 1), RowNo);
                                    l1CellCde[ColNo] := xl.matrix((((ColNo -1) * 3) + X + 2), RowNo);
                                  END;

                                  IF i = 0 THEN
                                    i := 13;

                                  IF i < 14 THEN BEGIN
                                    xlSheet.Range(CellCde[i]).Value := STRSUBSTNO('=M%1',RowNo);
                                    xlSheet.Range(lCellCde[i]).Value := STRSUBSTNO('=N%1',RowNo);
                                    xlSheet.Range(l1CellCde[i]).Value := STRSUBSTNO('=O%1',RowNo);
                                  END;

                                  RowNo += 1;
                                END;

               OnPostDataItem=VAR
                                M@1100525000 : Integer;
                              BEGIN

                                //M:BB
                                xlSheet.Range('K2').Value := 'GRANDTOTAL';

                                FOR ColNo := 1 TO 100 DO BEGIN
                                  CellCde[ColNo] := xl.matrix(ColNo,2);
                                END;

                                FOR M := 13 TO 54 DO BEGIN
                                  xlSheet.Range(CellCde[M]).Value := STRSUBSTNO('=SUBTOTAL(9;%1%2:%3%4)', GetLetter(CellCde[M]),6,GetLetter(CellCde[M]),RowNo);
                                END;

                                xlSheet.Range('M2:BB2').NumberFormat :='#.##0';

                                IF NOT NoAccPeriodBl THEN BEGIN
                                  xlApp.Range('P6').Select;
                                  xlApp.ActiveWindow.FreezePanes := TRUE;
                                END;
                              END;
                               }

    { 1100525002;;DataItem;Verplichtingen    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN

                               IF NOT ShowVerpl THEN
                                 CurrReport.BREAK;

                               Verplichtingen.COPYFILTERS(Job);

                               IF OnlySingleAndMainProjects THEN
                                 SETRANGE("Single/Main/Sub Project","Single/Main/Sub Project"::Single,"Single/Main/Sub Project"::"Main Project");

                               StartReportingdate := DatFilterEnd + 1;
                               EndReportingDate := CALCDATE('<+12M>',DatFilterEnd + 1);
                               ReportingMonth := DATE2DMY(DatFilterEnd,2);

                               //xlSheet := xlApp.Sheets.Add;
                               xlApp.DisplayAlerts := FALSE;
                               xlSheet := xlBook.Worksheets.Item('Verplichtingen');
                               xlSheet.Select;

                               //FieldLabels

                               xlSheet.Range('P5:Y5').MergeCells := TRUE;
                               xlSheet.Range('P5').Value := STRSUBSTNO('%1  %2 uur',TODAY, TIME);

                               xlSheet.Range('A1:Y7').Font.Bold := TRUE;
                               xlSheet.Range('A7:Y7').AutoFilter;
                               xlSheet.Range('A5:Y7').Interior.ColorIndex(36);

                               xlSheet.Range('A:A').HorizontalAlignment := 2;
                               xlSheet.Range('A1').Value := 'Verplichtingen export';
                               xlSheet.Range('A2').Value := FORMAT(COMPANYNAME);
                               xlSheet.Range('A3').Value := '';
                               xlSheet.Range('A4').Value := '';
                               xlSheet.Range('A5').Value := '';
                               xlSheet.Range('C3').Value := '';
                               xlSheet.Range('C4').Value := '';

                               xlSheet.Range('O4').Value := 'GRANDTOTAL';

                               xlSheet.Range('A7').Value := 'Project';                             //1
                               xlSheet.Range('B7').Value := 'Hoofdproject';                        //2
                               xlSheet.Range('C7').Value := 'Omschrijving';                        //3
                               xlSheet.Range('D7').Value := 'H/D/E';                               //4
                               xlSheet.Range('E7').Value := 'A/R';                                 //5
                               xlSheet.Range('F7').Value := 'Discipline';                          //6
                               xlSheet.Range('G7').Value := 'Oplevering';                          //7
                               xlSheet.Range('H7').Value := 'Debiteurnummer';                      //8
                               xlSheet.Range('I7').Value := 'Opdrachtgever';                       //9
                               xlSheet.Range('J7').Value := 'Land';                                //10
                               xlSheet.Range('K7').Value := 'Productlijn';                         //11
                               xlSheet.Range('L7').Value := 'PJM';                                 //12
                               xlSheet.Range('M7').Value := 'Naam';                                //13
                               xlSheet.Range('N7').Value := 'Projectstatus';                       //14
                               xlSheet.Range('O7').Value := 'Projecttype';                         //15

                               xlSheet.Range('P6:Q6').MergeCells := TRUE;
                               xlSheet.Range('P6').Value := 'Openstaand Inkoop';
                               xlSheet.Range('P6').HorizontalAlignment := -4108;

                               xlSheet.Range('P7').Value := 'openstaand (inkoop)';                 //16
                               xlSheet.Range('Q7').Value := 'Ontvangen niet gefactureerd';         //17
                               xlSheet.Range('R7').Value := 'openstaand(AK inkoop)';               //18

                               xlSheet.Range('S6:T6').MergeCells := TRUE;
                               xlSheet.Range('S6').Value := 'Openstaand Voorraad';
                               xlSheet.Range('S6').HorizontalAlignment := -4108;

                               xlSheet.Range('S7').Value := 'openstaand (voorraad)';                //19
                               xlSheet.Range('T7').Value := 'openstaand (AK voorraad)';             //20

                               xlSheet.Range('U6:V6').MergeCells := TRUE;
                               xlSheet.Range('U6').Value := 'Openstaand Uren';
                               xlSheet.Range('U6').HorizontalAlignment := -4108;

                               xlSheet.Range('U7').Value := 'openstaand (uren)';                    //21
                               xlSheet.Range('V7').Value := 'openstaand (AK uren)';                 //22
                               xlSheet.Range('W7').Value := 'openstaand (totaal excl AK)';          //23
                               xlSheet.Range('X7').Value := 'openstaand (AK)';                      //24
                               xlSheet.Range('Y7').Value := 'Verplichtingtotaal';                   //25
                               xlSheet.Range('P7:Y7').HorizontalAlignment := -4108;

                               xlApp.Range('H8').Select;
                               xlApp.ActiveWindow.FreezePanes := TRUE;

                               RowNo := 8;
                             END;

               OnAfterGetRecord=VAR
                                  EmployeeRec@1100525000 : Record 5200;
                                BEGIN

                                  SETRANGE("Period Filter",DatFilterStart,DatFilterEnd);
                                  IF GETRANGEMIN("Period Filter") = GETRANGEMAX("Period Filter") THEN
                                    SETRANGE("Period Filter",GETRANGEMIN("Period Filter"));

                                  SETRANGE("Cumulation Filter",0D,DatFilterEnd);

                                  IF ("Project Status" >= "Project Status"::Finished) THEN BEGIN
                                    IF NOT ShowClosedProjects THEN BEGIN
                                      IF ("Posting Date Closing" <> 0D) THEN
                                        IF DATE2DMY("Posting Date Closing",3) < DATE2DMY(DatFilterEnd,3) THEN
                                          CurrReport.SKIP;
                                    END;
                                  END;
                                  SETFILTER("Project Filter","No.");

                                  CALCFIELDS("Open (Purchase)","Received/Not Invoiced","Open (Inventory)","Open Amount (Hours)");
                                  CALCFIELDS("Open Ovh. Surch. Firm (Purch.)","Open Ovh. Surch. (Inventory)","Open Ovh. Surch. (Hours)");
                                  CALCFIELDS("Principal Name", "Open Ovh. Surch. Soft (Purch.)");

                                  FOR ColNo := 1 TO 100 DO BEGIN
                                    CellCde[ColNo] := xl.matrix(ColNo,RowNo);
                                  END;
                                  xlSheet.Range(CellCde[1]).Value := "No.";
                                  IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::Single THEN
                                    xlSheet.Range(CellCde[2]).Value := "Main Project";
                                  xlSheet.Range(CellCde[3]).Value := Description;
                                  xlSheet.Range(CellCde[4]).Value := COPYSTR(FORMAT("Single/Main/Sub Project"),1,1);
                                  xlSheet.Range(CellCde[5]).Value := COPYSTR(FORMAT(Job."Settlement Method"),1,1);
                                  xlSheet.Range(CellCde[6]).Value := FORMAT(Discipline);
                                  xlSheet.Range(CellCde[7]).Value := FORMAT("Ending Date");
                                  xlSheet.Range(CellCde[8]).Value := "Bill-to Customer No.";
                                  xlSheet.Range(CellCde[9]).Value := "Principal Name";
                                  xlSheet.Range(CellCde[10]).Value := "Country/Region Code";
                                  xlSheet.Range(CellCde[11]).Value := "Global Dimension 1 Code";
                                  xlSheet.Range(CellCde[12]).Value := "Project Manager";
                                  IF "Project Manager" <> '' THEN
                                    IF EmployeeRec.GET("Project Manager") THEN
                                      xlSheet.Range(CellCde[13]).Value := EmployeeRec."Last Name";
                                  xlSheet.Range(CellCde[14]).Value := FORMAT("Project Status");

                                  CASE "Project Status" OF
                                    "Project Status"::Finished :xlSheet.Range(CellCde[14]).Interior.ColorIndex(4);
                                    "Project Status"::Production :xlSheet.Range(CellCde[14]).Interior.ColorIndex(20);
                                    "Project Status"::Preparation :xlSheet.Range(CellCde[14]).Interior.ColorIndex(46);
                                  END;
                                  xlSheet.Range(CellCde[15]).Value := FORMAT("Project Type");

                                  xlSheet.Range(CellCde[16]).Value := FORMAT("Open (Purchase)");
                                  xlSheet.Range(CellCde[17]).Value := FORMAT("Received/Not Invoiced");
                                  xlSheet.Range(CellCde[18]).Value := FORMAT("Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. Soft (Purch.)");
                                  xlSheet.Range(CellCde[19]).Value := FORMAT("Open (Inventory)");
                                  xlSheet.Range(CellCde[20]).Value := FORMAT("Open Ovh. Surch. (Inventory)");
                                  xlSheet.Range(CellCde[21]).Value := FORMAT("Open Amount (Hours)");
                                  xlSheet.Range(CellCde[22]).Value := FORMAT("Open Ovh. Surch. (Hours)");
                                  xlSheet.Range(CellCde[23]).Value := FORMAT("Open (Purchase)"+"Received/Not Invoiced"+"Open (Inventory)"+
                                    "Open Amount (Hours)");
                                  SetBackgroundColor(CellCde[23]);
                                  xlSheet.Range(CellCde[24]).Value := FORMAT("Open Ovh. Surch. Soft (Purch.)"+"Open Ovh. Surch. (Inventory)"+
                                    "Open Ovh. Surch. Firm (Purch.)" + "Open Ovh. Surch. (Hours)");
                                  SetBackgroundColor(CellCde[24]);
                                  xlSheet.Range(CellCde[25]).Value := FORMAT(STRSUBSTNO('=SUM(W%1:X%1)', RowNo));
                                  RowNo += 1;
                                END;

               OnPostDataItem=BEGIN

                                xlSheet.Range('P4').Value := STRSUBSTNO('=SUBTOTAL(9;P8:P%1)',RowNo);
                                xlSheet.Range('Q4').Value := STRSUBSTNO('=SUBTOTAL(9;Q8:Q%1)',RowNo);
                                xlSheet.Range('R4').Value := STRSUBSTNO('=SUBTOTAL(9;R8:R%1)',RowNo);
                                xlSheet.Range('S4').Value := STRSUBSTNO('=SUBTOTAL(9;S8:S%1)',RowNo);
                                xlSheet.Range('T4').Value := STRSUBSTNO('=SUBTOTAL(9;T8:T%1)',RowNo);
                                xlSheet.Range('U4').Value := STRSUBSTNO('=SUBTOTAL(9;U8:U%1)',RowNo);
                                xlSheet.Range('V4').Value := STRSUBSTNO('=SUBTOTAL(9;V8:V%1)',RowNo);
                                xlSheet.Range('W4').Value := STRSUBSTNO('=SUBTOTAL(9;W8:W%1)',RowNo);
                                xlSheet.Range('X4').Value := STRSUBSTNO('=SUBTOTAL(9;X8:X%1)',RowNo);
                                xlSheet.Range('Y4').Value := STRSUBSTNO('=SUBTOTAL(9;Y8:Y%1)',RowNo);
                                xlSheet.Range('P4:Y4').NumberFormat :='#.##0';
                              END;
                               }

    { 1100525001;;DataItem;budgetactual      ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN

                               IF NOT ShowBudgActual THEN
                                 CurrReport.BREAK;

                               budgetactual.COPYFILTERS(Job);

                               IF OnlySingleAndMainProjects THEN
                                 SETRANGE("Single/Main/Sub Project","Single/Main/Sub Project"::Single,"Single/Main/Sub Project"::"Main Project");

                               StartReportingdate := DatFilterEnd + 1;
                               EndReportingDate := CALCDATE('<+12M>',DatFilterEnd + 1);
                               ReportingMonth := DATE2DMY(DatFilterEnd,2);

                               //xlSheet := xlApp.Sheets.Add;
                               xlApp.DisplayAlerts := FALSE;
                               xlSheet := xlBook.Worksheets.Item('Budget-Actual');
                               xlSheet.Select;

                               //FieldLabels

                               xlSheet.Range('P5:Y5').MergeCells := TRUE;
                               xlSheet.Range('P5').Value := STRSUBSTNO('%1  %2 uur',TODAY, TIME);

                               xlSheet.Range('A1:AB7').Font.Bold := TRUE;
                               xlSheet.Range('A7:AB7').AutoFilter;
                               xlSheet.Range('A5:AB7').Interior.ColorIndex(36);

                               xlSheet.Range('A:A').HorizontalAlignment := 2;
                               xlSheet.Range('A1').Value := 'Budget-Actual export';
                               xlSheet.Range('A2').Value := FORMAT(COMPANYNAME);
                               xlSheet.Range('A3').Value := '';
                               xlSheet.Range('A4').Value := '';
                               xlSheet.Range('A5').Value := '';
                               xlSheet.Range('C3').Value := '';
                               xlSheet.Range('C4').Value := '';

                               //FieldLabels
                               xlSheet.Range('A7').Value := 'Project';                             //1
                               xlSheet.Range('B7').Value := 'Hoofdproject';                        //2
                               xlSheet.Range('C7').Value := 'Omschrijving';                        //3
                               xlSheet.Range('D7').Value := 'H/D/E';                               //4
                               xlSheet.Range('E7').Value := 'A/R';                                 //5
                               xlSheet.Range('F7').Value := 'Discipline';                          //6
                               xlSheet.Range('G7').Value := 'Oplevering';                          //7
                               xlSheet.Range('H7').Value := 'Debiteurnummer';                      //8
                               xlSheet.Range('I7').Value := 'Opdrachtgever';                       //9
                               xlSheet.Range('J7').Value := 'Land';                                //10
                               xlSheet.Range('K7').Value := 'Productlijn';                         //11
                               xlSheet.Range('L7').Value := 'PJM';                                 //12
                               xlSheet.Range('M7').Value := 'Naam';                                //13
                               xlSheet.Range('N7').Value := 'Verkoper';                            //14
                               xlSheet.Range('O7').Value := 'Naam';                                //15
                               xlSheet.Range('P7').Value := 'Projectstatus';                       //16
                               xlSheet.Range('Q7').Value := 'Projecttype';                         //17
                               xlSheet.Range('R7').Value := 'Traject nr.';                         //18
                               xlSheet.Range('S7').Value := 'Begroot origineel';                   //19
                               xlSheet.Range('T7').Value := 'Begrotings correctie';                //20
                               xlSheet.Range('U7').Value := 'Begroot MMW';                         //21
                               xlSheet.Range('V7').Value := 'Begroot totaal';                      //22
                               xlSheet.Range('W7').Value := 'Besteed totaal';                      //23
                               xlSheet.Range('X7').Value := 'Beschikbaar';                         //24
                               xlSheet.Range('Y7').Value := 'Totale kosten';                       //25
                               xlSheet.Range('Z7').Value := 'Beschikbaar';                         //26
                               xlSheet.Range('AA7').Value:= 'Opbrengsten project';                 //27
                               xlSheet.Range('AB7').Value:= 'Opbrengsten MMW';                     //28
                               xlSheet.Range('AC7').Value:= 'Marge origineel begroot';             //29
                               xlSheet.Range('AD7').Value:= 'Marge %';                             //30
                               xlSheet.Range('AE7').Value:= 'Marge werkelijk';                     //31
                               xlSheet.Range('AF7').Value:= 'Marge %';                             //32

                               xlApp.Range('H8').Select;
                               xlApp.ActiveWindow.FreezePanes := TRUE;

                               RowNo := 8;
                             END;

               OnAfterGetRecord=VAR
                                  EmployeeRec@1100525005 : Record 5200;
                                  EstimateRec@1100525004 : Record 11012151;
                                  "CostContMgt."@1100525003 : Codeunit 11012006;
                                  SummarySheetLineRec@1100525002 : Record 11012171;
                                  ShtCsts@1100525001 : Decimal;
                                  CalcCosts@1100525000 : Decimal;
                                BEGIN

                                  SETRANGE("Period Filter",DatFilterStart,DatFilterEnd);
                                  IF GETRANGEMIN("Period Filter") = GETRANGEMAX("Period Filter") THEN
                                    SETRANGE("Period Filter",GETRANGEMIN("Period Filter"));

                                  SETRANGE("Cumulation Filter",0D,DatFilterEnd);

                                  IF ("Project Status" >= "Project Status"::Finished) THEN BEGIN
                                    IF NOT ShowClosedProjects THEN BEGIN
                                      IF ("Posting Date Closing" <> 0D) THEN
                                        IF DATE2DMY("Posting Date Closing",3) < DATE2DMY(DatFilterEnd,3) THEN
                                          CurrReport.SKIP;
                                    END;
                                  END;
                                  SETRANGE("Project Filter","No.");

                                  CALCFIELDS("Total Budget", "Actual Costs");

                                  FOR ColNo := 1 TO 100 DO BEGIN
                                    CellCde[ColNo] := xl.matrix(ColNo,RowNo);
                                  END;
                                  xlSheet.Range(CellCde[1]).Value := "No.";
                                  IF "Single/Main/Sub Project" <> "Single/Main/Sub Project"::Single THEN
                                    xlSheet.Range(CellCde[2]).Value := "Main Project";
                                  xlSheet.Range(CellCde[3]).Value := Description;
                                  xlSheet.Range(CellCde[4]).Value := COPYSTR(FORMAT("Single/Main/Sub Project"),1,1);
                                  xlSheet.Range(CellCde[5]).Value := COPYSTR(FORMAT(Job."Settlement Method"),1,1);
                                  xlSheet.Range(CellCde[6]).Value := FORMAT(Discipline);                              //n +1
                                  xlSheet.Range(CellCde[7]).Value := FORMAT("Ending Date");
                                  xlSheet.Range(CellCde[8]).Value := "Bill-to Customer No.";
                                  CALCFIELDS("Principal Name", "Salesperson Name");
                                  xlSheet.Range(CellCde[9]).Value := "Principal Name";
                                  xlSheet.Range(CellCde[10]).Value := FORMAT("Country/Region Code");                  //n +2
                                  xlSheet.Range(CellCde[11]).Value := "Global Dimension 1 Code";
                                  xlSheet.Range(CellCde[12]).Value := "Project Manager";                              //n +3
                                  IF "Project Manager" <> '' THEN
                                    IF EmployeeRec.GET("Project Manager") THEN
                                      xlSheet.Range(CellCde[13]).Value := EmployeeRec."Last Name";
                                  xlSheet.Range(CellCde[14]).Value := FORMAT("Salesperson Code"); //NIEUW
                                  xlSheet.Range(CellCde[15]).Value := "Salesperson Name";
                                  xlSheet.Range(CellCde[16]).Value := FORMAT("Project Status");
                                  CASE "Project Status" OF
                                    "Project Status"::Finished :xlSheet.Range(CellCde[16]).Interior.ColorIndex(4);
                                    "Project Status"::Production :xlSheet.Range(CellCde[16]).Interior.ColorIndex(20);
                                    "Project Status"::Preparation :xlSheet.Range(CellCde[16]).Interior.ColorIndex(46);
                                  END;
                                  xlSheet.Range(CellCde[17]).Value := FORMAT("Project Type");
                                  xlSheet.Range(CellCde[18]).Value := "Estimate No.";
                                  {IF "Estimate No." <> '' THEN BEGIN
                                    EstimateRec.GET("Estimate No.");
                                    EstimateRec.CALCFIELDS(Total);
                                    CalcCosts := EstimateRec.Total;
                                    SummarySheetLineRec.SETRANGE("Estimate No.", "Estimate No.");
                                    SummarySheetLineRec.SETRANGE(Summary, 'COST');
                                    SummarySheetLineRec.SETFILTER(Type, '%1|%2|%3|%4',
                                    SummarySheetLineRec.Type::"Surcharge Amount",SummarySheetLineRec.Type::"Surcharge Hours",
                                    SummarySheetLineRec.Type::"Additional Costs", SummarySheetLineRec.Type::Variable);
                                    IF SummarySheetLineRec.FINDSET THEN BEGIN
                                      ShtCsts += SummarySheetLineRec.Amount;
                                    END;
                                    xlSheet.Range(CellCde[19]).Value := FORMAT(EstimateRec.Total + ShtCsts);
                                  END;}
                                  xlSheet.Range(CellCde[19]).Value := FORMAT(CalcBudgetOrg("No."));            //19 'Begroot origineel'
                                  xlSheet.Range(CellCde[20]).Value := FORMAT(CalcBudgetAdj("No."));            //20 'Begrotings correctie'
                                  xlSheet.Range(CellCde[21]).Value := FORMAT(CalcBudgetExt("No."));            //21 'Begroot MMW'
                                  xlSheet.Range(CellCde[22]).Value := FORMAT("Total Budget");                  //22 'Begroot totaal'
                                  xlSheet.Range(CellCde[23]).Value := FORMAT("Actual Costs");                  //23 'Besteed totaal'
                                  xlSheet.Range(CellCde[24]).Value := FORMAT("Total Budget" - "Actual Costs"); //24 'Beschikbaar'
                                  xlSheet.Range(CellCde[25]).Value := FORMAT(CostContMgt.TotCostProject(budgetactual, FALSE)); //25 'Totale kosten';
                                  xlSheet.Range(CellCde[26]).Value := FORMAT("Total Budget" - CostContMgt.TotCostProject(budgetactual, FALSE)); //26 'Beschikbaar';
                                  xlSheet.Range(CellCde[27]).Value := FORMAT(CalcRevProj("No."));              //27 'Opbrengsten project';
                                  xlSheet.Range(CellCde[28]).Value := FORMAT(CalcRevExtByProj("No."));         //28 'Opbrengsten MMW';
                                  xlSheet.Range(CellCde[29]).Value := FORMAT(CalcRevProj("No.") - CalcBudgetAdj("No."));
                                  xlSheet.Range(CellCde[30]).NumberFormat := '0%';
                                  IF (CalcRevProj("No.") <> 0) THEN                                            //30 'Marge %';
                                    xlSheet.Range(CellCde[30]).Value := FORMAT(CalcRevProj("No.") - CalcBudgetAdj("No.") / (CalcRevProj("No.")));
                                  xlSheet.Range(CellCde[31]).Value := FORMAT(CalcRevProj("No.") + CalcRevExtByProj("No.") - "Actual Costs"); //31 'Marge werkelijk';
                                  xlSheet.Range(CellCde[32]).NumberFormat := '0%';
                                  IF (CalcRevProj("No.") + CalcRevExtByProj("No.")) <> 0 THEN                  //32 'Marge %';
                                    xlSheet.Range(CellCde[32]).Value := FORMAT((CalcRevProj("No.") + CalcRevExtByProj("No.") - "Actual Costs") /
                                    (CalcRevProj("No.") + CalcRevExtByProj("No.")));

                                  RowNo += 1;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               forecastsheetVISIBLE := TRUE;
               rappenkelenhfdVISIBLE := TRUE;
             END;

      OnOpenPage=BEGIN

                   PeriodType := PeriodType::"Accounting Period";
                   SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,'>=');
                   SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,'<=')
                 END;

    }
    CONTROLS
    {
      { 1100525008;;Container;
                  Name=General;
                  CaptionML=ENU=<General>;
                  ContainerType=ContentArea }

      { 1100525007;1;Group  ;
                  Name=Opties;
                  CaptionML=ENU=Opties;
                  GroupType=Group }

      { 1100525015;2;Group  ;
                  Visible=forecastsheetVISIBLE;
                  GroupType=Group }

      { 1100525009;3;Field  ;
                  Name=Forecast sheet genereren;
                  SourceExpr=ShowExtraSheet;
                  OnValidate=BEGIN

                               IF ShowExtraSheet THEN BEGIN
                                 rappenkelenhfdVISIBLE := (FALSE);
                                 OnlySingleAndMainProjects := FALSE;
                               END;
                               // ELSE
                               //   RequestOptionsForm.rappenkelenhfd.VISIBLE(TRUE);
                               RequestOptionsPage.UPDATE;
                             END;
                              }

      { 1100525010;2;Field  ;
                  Name=Verplichtingen sheet genereren;
                  SourceExpr=ShowVerpl }

      { 1100525011;2;Field  ;
                  Name=Budget-Actual sheet genereren;
                  SourceExpr=ShowBudgActual }

      { 1100525012;2;Field  ;
                  Name=Historisch afgesloten projecten weergeven;
                  CaptionML=ENU=Historisch afgesloten projecten weergeven;
                  SourceExpr=ShowClosedProjects }

      { 1100525006;2;Field  ;
                  Name=CumulationFilterTxt;
                  CaptionML=ENU=Cumulation Filter;
                  SourceExpr=CumulationFilterTxt;
                  Editable=False }

      { 1100525005;2;Field  ;
                  Name=PeriodType;
                  CaptionML=ENU=Period Type;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                  SourceExpr=PeriodType;
                  Visible=False;
                  OnValidate=BEGIN
                               SearchPeriod.FindPeriod(DateFilterStart,DateFilterEnd,CumulationFilterTxt,DateFilterTxt,PeriodType,'');
                             END;
                              }

      { 1100525004;2;Field  ;
                  Name=Datefiltertxt;
                  CaptionML=ENU=Period Filter;
                  SourceExpr=STRSUBSTNO('%1 .. %2',DateFilterStart,DateFilterEnd);
                  Editable=False }

      { 1100525003;2;Field  ;
                  Name=DateFilterStart;
                  CaptionML=ENU=Starting Date;
                  SourceExpr=DateFilterStart }

      { 1100525002;2;Field  ;
                  Name=DateFilterEnd;
                  CaptionML=ENU=Ending Date;
                  SourceExpr=DateFilterEnd;
                  OnValidate=BEGIN
                               CumulationFilterTxt := STRSUBSTNO('.. %1',DateFilterEnd);
                             END;
                              }

      { 1100525001;2;Field  ;
                  SourceExpr=NextPeriodButtonCap;
                  Editable=false;
                  OnAssistEdit=BEGIN
                                 SearchPeriod.FindPeriod(DateFilterStart,DateFilterEnd,CumulationFilterTxt,DateFilterTxt,PeriodType,'>=');
                               END;
                                }

      { 1100525000;2;Field  ;
                  SourceExpr=PrevPeriodButtonCap;
                  Editable=false;
                  OnAssistEdit=BEGIN
                                 SearchPeriod.FindPeriod(DateFilterStart,DateFilterEnd,CumulationFilterTxt,DateFilterTxt,PeriodType,'<=');
                               END;
                                }

      { 1100525014;2;Group  ;
                  Visible=rappenkelenhfdVISIBLE;
                  GroupType=Group }

      { 1100525013;3;Field  ;
                  Name=Rapporteren op enkelvoudige en hoofdprojecten;
                  CaptionML=ENU=ofdprojecten;
                  SourceExpr=OnlySingleAndMainProjects;
                  OnValidate=BEGIN

                               IF OnlySingleAndMainProjects THEN BEGIN
                                 forecastsheetVISIBLE := (FALSE);
                                 ShowExtraSheet := FALSE;
                               END ELSE
                                 forecastsheetVISIBLE := (TRUE);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      rappenkelenhfdVISIBLE@1100525000 : Boolean INDATASET;
      forecastsheetVISIBLE@1100525001 : Boolean INDATASET;
      ColNo@1100525057 : Integer;
      RowNo@1100525056 : Integer;
      xl@1100525055 : Report 82224;
      OnlySingleAndMainProjects@1100525054 : Boolean;
      CellCde@1100525053 : ARRAY [100] OF Code[20];
      SearchPeriod@1100525052 : Codeunit 11012016;
      PeriodType@1100525051 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      DatFilterStart@1100525050 : Date;
      DatFilterEnd@1100525049 : Date;
      ProjectFilter@1100525048 : Text[250];
      PeriodFilterTxt@1100525047 : Text[30];
      CumulationFilterTxt@1100525046 : Text[30];
      PeriodNo@1100525045 : Text[1024];
      SearchProgrDate@1100525044 : Codeunit 11012014;
      SearchPrognDate@1100525043 : Codeunit 11012029;
      PrognTotCostDec@1100525042 : Decimal;
      PrognTotCostDecPrevP@1100525041 : Decimal;
      PrognTotCostDecPrevYear@1100525040 : Decimal;
      CostContMgt@1100525039 : Codeunit 11012006;
      JobRec@1100525038 : Record 11072003;
      PrognTotRevenue@1100525037 : Decimal;
      PrognTotRevenuePrevP@1100525036 : Decimal;
      PrognTotRevenuePrevYear@1100525035 : Decimal;
      ProjectPreclosureResult@1100525034 : Record 11012093;
      GPerVoorz@1100525033 : Decimal;
      GCumVoorz@1100525032 : Decimal;
      GPerTusRes@1100525031 : Decimal;
      GCumTusRes@1100525030 : Decimal;
      GttResKostPr@1100525029 : Decimal;
      GttResKostPrPrevP@1100525028 : Decimal;
      GttResKostPrPrevYear@1100525027 : Decimal;
      GttResOmz@1100525026 : Decimal;
      GttResOmzPrevP@1100525025 : Decimal;
      GttResOmzPrevYear@1100525024 : Decimal;
      ShowExtraSheet@1100525023 : Boolean;
      StartReportingdate@1100525022 : Date;
      EndReportingDate@1100525021 : Date;
      ReportingMonth@1100525020 : Integer;
      ClosedInPeriodBl@1100525019 : Boolean;
      ClosedPrevPeriodBl@1100525018 : Boolean;
      ClosedPrevYearBl@1100525017 : Boolean;
      GereedgemeldBl@1100525016 : Boolean;
      TegenBGereedmCosts@1100525015 : Decimal;
      TegenBGereedmRev@1100525014 : Decimal;
      LastPRognPRevPerRev@1100525013 : Decimal;
      LastPRognPRevPerCost@1100525012 : Decimal;
      TegenBGereedmRevPer@1100525011 : Decimal;
      TegenBGereedmCostsPer@1100525010 : Decimal;
      AccountingPerRec@1100525009 : Record 50;
      AccountingPer@1100525008 : ARRAY [14] OF Date;
      AccountingPerEndDate@1100525007 : ARRAY [13] OF Date;
      NoAccPeriodBl@1100525006 : Boolean;
      RowCounter@1100525005 : Integer;
      ShowClosedProjects@1100525004 : Boolean;
      ShowVerpl@1100525003 : Boolean;
      ShowBudgActual@1100525002 : Boolean;
      Text001@1100525069 : TextConst;
      Verw1@1100525068 : TextConst;
      Verw2@1100525067 : TextConst;
      Verw3@1100525066 : TextConst;
      Verw4@1100525065 : TextConst;
      Verw5@1100525064 : TextConst;
      Verw6@1100525063 : TextConst;
      DateFilterEnd@1100525071 : Date;
      DateFilterStart@1100525070 : Date;
      prevper@1100525074 : Text;
      nextper@1100525073 : Text;
      DateFilterTxt@1100525072 : Text;
      NextPeriodButtonCap@1100525076 : TextConst 'ENU=Next Period';
      PrevPeriodButtonCap@1100525075 : TextConst 'ENU=Previous Period';
      xlApp@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.6:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlBook@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.6:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      xlSheet@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.6:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlChart@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.6:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart";
      xlRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.6:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";

    PROCEDURE CalcPrognReveneu@1000000113(JobNo@1000000000 : Code[20]) : Decimal;
    VAR
      PrognosisRec@1000000001 : Record 11012034;
    BEGIN
      //Deze periode
      PrognosisRec.SETRANGE("Project No.", JobNo);
      PrognosisRec.SETRANGE("Prognosis Date",DatFilterStart,DatFilterEnd);
      IF PrognosisRec.FINDLAST THEN BEGIN
        IF PrognosisRec."Rough Prognosis Total Revenues" <> 0 THEN
          EXIT(PrognosisRec."Rough Prognosis Total Revenues");
        PrognosisRec.CALCFIELDS("Prognosis Revenue");
        EXIT(PrognosisRec."Project Invoiced" + PrognosisRec."Prognosis Revenue");
      END;
    END;

    PROCEDURE CalcPrognReveneuPrevPeriod@1000000045(JobNo@1000000000 : Code[20]) : Decimal;
    VAR
      PrognosisRec@1000000001 : Record 11012034;
      PDatfilterStart@1000000002 : Date;
      PDatfilterEnd@1000000003 : Date;
    BEGIN
      //01-01-year tot en met deze periode
      PrognosisRec.SETRANGE("Project No.", JobNo);
      PDatfilterStart := DMY2DATE(1,1,(DATE2DMY(DatFilterStart,3)));
      PDatfilterEnd := DatFilterEnd;
      PrognosisRec.SETRANGE("Prognosis Date",PDatfilterStart,PDatfilterEnd);
      IF PrognosisRec.FINDLAST THEN BEGIN
        IF PrognosisRec."Rough Prognosis Total Revenues" <> 0 THEN
          EXIT(PrognosisRec."Rough Prognosis Total Revenues");
        PrognosisRec.CALCFIELDS("Prognosis Revenue");
        EXIT(PrognosisRec."Project Invoiced" + PrognosisRec."Prognosis Revenue");
      END;
    END;

    PROCEDURE CalcPrognReveneuPrevYear@1000000046(JobNo@1000000000 : Code[20]) : Decimal;
    VAR
      PrognosisRec@1000000001 : Record 11012034;
      PDatfilterStart@1000000003 : Date;
      PDatfilterEnd@1000000002 : Date;
    BEGIN
      //Vorig jaar
      PrognosisRec.SETRANGE("Project No.", JobNo);
      PDatfilterEnd := DMY2DATE(31,12,(DATE2DMY(DatFilterStart,3) - 1));
      PrognosisRec.SETRANGE("Prognosis Date",0D,PDatfilterEnd);
      IF PrognosisRec.FINDLAST THEN BEGIN
        IF PrognosisRec."Rough Prognosis Total Revenues" <> 0 THEN
          EXIT(PrognosisRec."Rough Prognosis Total Revenues");
        PrognosisRec.CALCFIELDS("Prognosis Revenue");
        EXIT(PrognosisRec."Project Invoiced" + PrognosisRec."Prognosis Revenue");
      END;
    END;

    PROCEDURE CalcPrognCosts@1000000008(JobNo@1000000000 : Code[20]) : Decimal;
    VAR
      PrognosisRec@1000000001 : Record 11012034;
    BEGIN
      //Huidige periode
      PrognosisRec.SETRANGE("Project No.", JobNo);
      PrognosisRec.SETRANGE("Prognosis Date",DatFilterStart,DatFilterEnd);
      IF PrognosisRec.FINDLAST THEN BEGIN
        IF PrognosisRec."Rough Prognosis Total Cost" <> 0 THEN
          EXIT(PrognosisRec."Rough Prognosis Total Cost");
        PrognosisRec.CALCFIELDS("Prognosis Total Cost");
        EXIT(PrognosisRec."Prognosis Total Cost");
      END;
    END;

    PROCEDURE CalcPrognCostsPrevPeriod@1000000059(JobNo@1000000000 : Code[20]) : Decimal;
    VAR
      PrognosisRec@1000000001 : Record 11012034;
      PdatFilterStart@1000000002 : Date;
      PdatFilterEnd@1000000003 : Date;
    BEGIN
      //Vorige periode
      PrognosisRec.SETRANGE("Project No.", JobNo);
      PdatFilterStart := DMY2DATE(1,1,(DATE2DMY(DatFilterStart,3)));
      PdatFilterEnd := DatFilterEnd;
      PrognosisRec.SETRANGE("Prognosis Date",PdatFilterStart,PdatFilterEnd);
      IF PrognosisRec.FINDLAST THEN BEGIN
        IF PrognosisRec."Rough Prognosis Total Cost" <> 0 THEN
          EXIT(PrognosisRec."Rough Prognosis Total Cost");
        PrognosisRec.CALCFIELDS("Prognosis Total Cost");
        EXIT(PrognosisRec."Prognosis Total Cost");
      END;
    END;

    PROCEDURE CalcPrognCostsPrevYear@1000000060(JobNo@1000000000 : Code[20]) : Decimal;
    VAR
      PrognosisRec@1000000001 : Record 11012034;
      PDatFilterEnd@1000000002 : Date;
    BEGIN
      //Vorig jaar
      PrognosisRec.SETRANGE("Project No.", JobNo);
      PDatFilterEnd := DMY2DATE(31,12,(DATE2DMY(DatFilterStart,3) - 1));
      PrognosisRec.SETRANGE("Prognosis Date",0D, PDatFilterEnd);
      IF PrognosisRec.FINDLAST THEN BEGIN
        IF PrognosisRec."Rough Prognosis Total Cost" <> 0 THEN
          EXIT(PrognosisRec."Rough Prognosis Total Cost");

        PrognosisRec.CALCFIELDS("Prognosis Total Cost");
        EXIT(PrognosisRec."Prognosis Total Cost");
      END;
    END;

    PROCEDURE CalcVoorz@1000000133(JobNo@1000000000 : Code[20];StartDate@1000000002 : Date;EndDate@1000000003 : Date;VAR PerProvLosDec@1000000004 : Decimal;VAR CumProvLosDec@1000000005 : Decimal);
    VAR
      lProjectPreclosureResult@1000000001 : Record 11012093;
      lJobLedgerEntry@1000000006 : Record 11072005;
    BEGIN
      {lProjectPreclosureResult.SETRANGE("Project No.",JobNo);
      lProjectPreclosureResult.SETRANGE(Posted,TRUE);
      lProjectPreclosureResult.SETRANGE("Result Type",lProjectPreclosureResult."Result Type"::"Preclosure Result",
      lProjectPreclosureResult."Result Type"::"Provision Loss");
      lProjectPreclosureResult.SETRANGE("Posting Date",StartDate,EndDate);
      IF lProjectPreclosureResult.FINDSET THEN BEGIN
        REPEAT
          PerProvLosDec := PerProvLosDec + lProjectPreclosureResult."Actual Provision";
        UNTIL lProjectPreclosureResult.NEXT = 0;
      END;
      lProjectPreclosureResult.SETFILTER("Posting Date", CumulationFilterTxt);
      IF lProjectPreclosureResult.FINDFIRST THEN BEGIN
        lProjectPreclosureResult.CALCFIELDS("Previous Actual Provision");
        CumProvLosDec := lProjectPreclosureResult."Previous Actual Provision";
      END;}

      //Berekenen tegenboeking uit gereedmelding
      lJobLedgerEntry.SETRANGE("Job No.", JobNo);
      lJobLedgerEntry.SETRANGE("Posting Date",StartDate,EndDate);
      lJobLedgerEntry.SETRANGE("Cost Type", lJobLedgerEntry."Cost Type"::Revenues);
      lJobLedgerEntry.SETRANGE("Entry Type",lJobLedgerEntry."Entry Type"::Usage);
      IF lJobLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          PerProvLosDec := PerProvLosDec + -(lJobLedgerEntry."Actual Provision Result");
        UNTIL lJobLedgerEntry.NEXT = 0;
      END;
      lJobLedgerEntry.SETFILTER("Posting Date",CumulationFilterTxt);
      IF lJobLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          CumProvLosDec := CumProvLosDec + -(lJobLedgerEntry."Actual Provision Result");
        UNTIL lJobLedgerEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CalcGereedM@1000000134(JobNo@1000000000 : Code[20];StartDate@1000000004 : Date;EndDate@1000000005 : Date;VAR PerTusResDec@1000000003 : Decimal;VAR CumPerTusResDec@1000000002 : Decimal);
    VAR
      lProjectPreclosureResult@1000000001 : Record 11012093;
    BEGIN
      lProjectPreclosureResult.SETRANGE("Project No.",JobNo);
      lProjectPreclosureResult.SETRANGE(Posted,TRUE);
      lProjectPreclosureResult.SETRANGE("Result Type",lProjectPreclosureResult."Result Type"::"Preclosure Result");
      lProjectPreclosureResult.SETRANGE("Posting Date",StartDate,EndDate);
      IF lProjectPreclosureResult.FINDSET THEN BEGIN
        REPEAT
          PerTusResDec := PerTusResDec + lProjectPreclosureResult."Actual Provision";
        UNTIL lProjectPreclosureResult.NEXT = 0;
      END;
      lProjectPreclosureResult.SETFILTER("Posting Date",CumulationFilterTxt);
      IF lProjectPreclosureResult.FINDFIRST THEN BEGIN
        lProjectPreclosureResult.CALCFIELDS(lProjectPreclosureResult."Previous Actual Precl. Result");
        CumPerTusResDec := lProjectPreclosureResult."Previous Actual Precl. Result";
      END;
    END;

    PROCEDURE CaclTussRes@1000000027(ProjectNo@1000000000 : Code[20];VAR ttResKostPr@1000000001 : Decimal;VAR ttResOmz@1000000002 : Decimal);
    BEGIN
      ProjectPreclosureResult.RESET;
      ProjectPreclosureResult.SETRANGE("Project No.",ProjectNo);
      ProjectPreclosureResult.SETFILTER("Posting Date",PeriodFilterTxt);
      ProjectPreclosureResult.SETRANGE("Result Type",ProjectPreclosureResult."Result Type"::"Preclosure Result");
      IF ProjectPreclosureResult.FINDSET THEN BEGIN
        REPEAT
          ttResKostPr := ttResKostPr + ProjectPreclosureResult.Cost;
          ttResOmz := ttResOmz + ProjectPreclosureResult.Turnover;
        UNTIL ProjectPreclosureResult.NEXT = 0;
      END;
    END;

    PROCEDURE CaclTussResPrevP@1000000078(ProjectNo@1000000000 : Code[20];VAR ttResKostPr@1000000001 : Decimal;VAR ttResOmz@1000000002 : Decimal);
    VAR
      PDatFilterStart@1000000003 : Date;
      PDatFilterEnd@1000000004 : Date;
    BEGIN
      ProjectPreclosureResult.RESET;
      ProjectPreclosureResult.SETRANGE("Project No.",ProjectNo);
      PDatFilterStart := DMY2DATE(1,1,(DATE2DMY(DatFilterStart,3)));
      PDatFilterEnd := DatFilterEnd;
      ProjectPreclosureResult.SETRANGE("Posting Date", PDatFilterStart, PDatFilterEnd);
      ProjectPreclosureResult.SETRANGE("Result Type",ProjectPreclosureResult."Result Type"::"Preclosure Result");
      IF ProjectPreclosureResult.FINDSET THEN BEGIN
        REPEAT
          ttResKostPr := ttResKostPr + ProjectPreclosureResult.Cost;
          ttResOmz := ttResOmz + ProjectPreclosureResult.Turnover;
        UNTIL ProjectPreclosureResult.NEXT = 0;
      END;
    END;

    PROCEDURE CaclTussResPrevYear@1000000079(ProjectNo@1000000000 : Code[20];VAR ttResKostPr@1000000001 : Decimal;VAR ttResOmz@1000000002 : Decimal);
    VAR
      PDatFilterEnd@1000000003 : Date;
    BEGIN
      ProjectPreclosureResult.RESET;
      ProjectPreclosureResult.SETRANGE("Project No.",ProjectNo);
      PDatFilterEnd := DMY2DATE(31,12,(DATE2DMY(DatFilterStart,3) - 1));
      ProjectPreclosureResult.SETRANGE("Posting Date",0D, PDatFilterEnd);
      ProjectPreclosureResult.SETRANGE("Result Type",ProjectPreclosureResult."Result Type"::"Preclosure Result");
      IF ProjectPreclosureResult.FINDSET THEN BEGIN
        REPEAT
          ttResKostPr := ttResKostPr + ProjectPreclosureResult.Cost;
          ttResOmz := ttResOmz + ProjectPreclosureResult.Turnover;
        UNTIL ProjectPreclosureResult.NEXT = 0;
      END;
    END;

    PROCEDURE GenereateForecMonths@1000000012();
    VAR
      HeaderDateMonth@1000000000 : Date;
      lCellCde@1000000001 : ARRAY [100] OF Code[20];
      i@1000000002 : Integer;
      x@1000000003 : Integer;
    BEGIN
      xlSheet := xlApp.Sheets.Add;
      xlApp.DisplayAlerts := FALSE;
      xlSheet.Name := FORMAT('ForeCast');
      xlSheet.Select;

      xlSheet.Range('M4:O4').Merge;
      xlSheet.Range('M4').HorizontalAlignment := -4108;
      xlSheet.Range('M4').Value := CumulationFilterTxt;

      xlSheet.Range('A3:BB5').Font.Bold := TRUE;
      xlSheet.Range('A5:BB5').AutoFilter;
      xlSheet.Range('A3:BB5').Interior.ColorIndex(36);

      xlSheet.Range('A5').Value := 'Project';                             //1
      xlSheet.Range('B5').Value := 'Omschrijving';                        //2
      xlSheet.Range('C5').Value := 'H/D/E';                               //3
      xlSheet.Range('D5').Value := 'A/R';                                 //4
      xlSheet.Range('E5').Value := 'Oplevering';                          //5
      xlSheet.Range('F5').Value := 'Debiteurnummer';                      //6
      xlSheet.Range('G5').Value := 'Opdrachtgever';                       //7
      xlSheet.Range('H5').Value := 'Land';                                //8 *n
      xlSheet.Range('I5').Value := 'Productlijn';                         //9
      xlSheet.Range('J5').Value := 'Projectleider';                       //10
      xlSheet.Range('K5').Value := 'Naam';                                //11 *n
      xlSheet.Range('L5').Value := 'Projectstatus';                       //12
      xlSheet.Range('M5').Value := 'Omzet';                               //13
      xlSheet.Range('N5').Value := 'Marge';                               //14
      xlSheet.Range('O5').Value := 'Stand voorziening';                   //15

      FOR ColNo := 1 TO 100 DO BEGIN
        CellCde[ColNo] := xl.matrix(ColNo,5);
        lCellCde[ColNo] := xl.matrix(ColNo,4);
      END;

      //Maand 1
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[16],lCellCde[18])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[16])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[16]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[1]),FORMAT(AccountingPer[2] -1));
      xlSheet.Range(CellCde[16]).Value := 'Omzet';
      xlSheet.Range(CellCde[17]).Value := 'Marge';
      xlSheet.Range(CellCde[18]).Value := 'Mut. Voorziening';

      //Maand 2
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[19],lCellCde[21])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[19])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[19]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[2]),FORMAT(AccountingPer[3] -1));
      xlSheet.Range(CellCde[19]).Value := 'Omzet';
      xlSheet.Range(CellCde[20]).Value := 'Marge';
      xlSheet.Range(CellCde[21]).Value := 'Mut. Voorziening';

      //Maand 3
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[22],lCellCde[24])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[22])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[22]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[3]),FORMAT(AccountingPer[4] -1));
      xlSheet.Range(CellCde[22]).Value := 'Omzet';
      xlSheet.Range(CellCde[23]).Value := 'Marge';
      xlSheet.Range(CellCde[24]).Value := 'Mut. Voorziening';

      //Maand 4
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[25],lCellCde[27])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[25])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[25]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[4]),FORMAT(AccountingPer[5] -1));
      xlSheet.Range(CellCde[25]).Value := 'Omzet';
      xlSheet.Range(CellCde[26]).Value := 'Marge';
      xlSheet.Range(CellCde[27]).Value := 'Mut. Voorziening';

      //Maand 5
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[28],lCellCde[30])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[28])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[28]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[5]),FORMAT(AccountingPer[6] -1));
      xlSheet.Range(CellCde[28]).Value := 'Omzet';
      xlSheet.Range(CellCde[29]).Value := 'Marge';
      xlSheet.Range(CellCde[30]).Value := 'Mut. Voorziening';

      //Maand 6
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[31],lCellCde[33])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[31])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[31]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[6]),FORMAT(AccountingPer[7] -1));
      xlSheet.Range(CellCde[31]).Value := 'Omzet';
      xlSheet.Range(CellCde[32]).Value := 'Marge';
      xlSheet.Range(CellCde[33]).Value := 'Mut. Voorziening';

      //Maand 7
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[34],lCellCde[36])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[34])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[34]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[7]),FORMAT(AccountingPer[8] -1));
      xlSheet.Range(CellCde[34]).Value := 'Omzet';
      xlSheet.Range(CellCde[35]).Value := 'Marge';
      xlSheet.Range(CellCde[36]).Value := 'Mut. Voorziening';

      //Maand 8
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[37],lCellCde[39])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[37])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[37]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[8]),FORMAT(AccountingPer[9] -1));
      xlSheet.Range(CellCde[37]).Value := 'Omzet';
      xlSheet.Range(CellCde[38]).Value := 'Marge';
      xlSheet.Range(CellCde[39]).Value := 'Mut. Voorziening';

      //Maand 9
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[40],lCellCde[42])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[40])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[40]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[9]),FORMAT(AccountingPer[10] -1));
      xlSheet.Range(CellCde[40]).Value := 'Omzet';
      xlSheet.Range(CellCde[41]).Value := 'Marge';
      xlSheet.Range(CellCde[42]).Value := 'Mut. Voorziening';

      //Maand 10
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[43],lCellCde[45])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[43])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[43]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[10]),FORMAT(AccountingPer[11] -1));
      xlSheet.Range(CellCde[43]).Value := 'Omzet';
      xlSheet.Range(CellCde[44]).Value := 'Marge';
      xlSheet.Range(CellCde[45]).Value := 'Mut. Voorziening';

      //Maand 11
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[46],lCellCde[48])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[46])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[46]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[11]),FORMAT(AccountingPer[12] -1));
      xlSheet.Range(CellCde[46]).Value := 'Omzet';
      xlSheet.Range(CellCde[47]).Value := 'Marge';
      xlSheet.Range(CellCde[48]).Value := 'Mut. Voorziening';

      //Maand 12
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[49],lCellCde[51])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[49])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[49]).Value := STRSUBSTNO('%1.. %2',FORMAT(AccountingPer[12]),FORMAT(AccountingPer[13] -1));
      xlSheet.Range(CellCde[49]).Value := 'Omzet';
      xlSheet.Range(CellCde[50]).Value := 'Marge';
      xlSheet.Range(CellCde[51]).Value := 'Mut. Voorziening';

      //Na 1 jaar
      xlSheet.Range(STRSUBSTNO('%1:%2',lCellCde[52],lCellCde[54])).Merge;
      xlSheet.Range(STRSUBSTNO('%1',lCellCde[52])).HorizontalAlignment := -4108;
      xlSheet.Range(lCellCde[52]).Value := STRSUBSTNO('%1..',FORMAT(AccountingPer[13]));
      xlSheet.Range(CellCde[52]).Value := 'Omzet';
      xlSheet.Range(CellCde[53]).Value := 'Marge';
      xlSheet.Range(CellCde[54]).Value := 'Mut. Voorziening';
    END;

    PROCEDURE CalcTussResGereedm@1000000016(PostingDategereedm@1000000000 : Date);
    VAR
      JobLedgerEntry@1000000001 : Record 11072005;
    BEGIN
      JobLedgerEntry.SETRANGE("Posting Date", PostingDategereedm);
      JobLedgerEntry.SETRANGE("Job No.",Job."No.");
      JobLedgerEntry.SETFILTER("Source Code", 'PROJCLOS');
      IF JobLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          CASE COPYSTR(JobLedgerEntry."No.", 1, 2) OF
            '77' : TegenBGereedmRev += -(JobLedgerEntry."Actual Preclosure Result");
            '71' : TegenBGereedmCosts += (JobLedgerEntry."Actual Preclosure Result");
          END;

          {IF JobLedgerEntry."Actual Preclosure Result" > 0 THEN //29012013.Gb
            TegenBGereedmCosts += (JobLedgerEntry."Actual Preclosure Result")
          ELSE
            TegenBGereedmRev += -(JobLedgerEntry."Actual Preclosure Result");}
        UNTIL JobLedgerEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CalcLastPrognPrevPeriod@1000000043(JobNo@1000000003 : Code[20];Type@1000000004 : Integer) : Decimal;
    VAR
      PrognosisRec@1000000002 : Record 11012034;
      PDatfilterStart@1000000001 : Date;
      PDatfilterEnd@1000000000 : Date;
    BEGIN
      //Cost := 0;
      //Rev := 1;

      //LastPRognPRevPerCost - LastPRognPRevPerRev
      //Vorige periode
      IF Type = 0 THEN BEGIN
        PrognosisRec.RESET;
        PrognosisRec.SETRANGE("Project No.", JobNo);
        SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,'<=');
        PDatfilterStart := DMY2DATE(1,1,(DATE2DMY(DatFilterStart,3)));
        PDatfilterEnd := DatFilterEnd;
        SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,'>=');
        PrognosisRec.SETRANGE("Prognosis Date",PDatfilterStart,PDatfilterEnd);     //0D
        IF PrognosisRec.FINDLAST THEN BEGIN
          IF PrognosisRec."Rough Prognosis Total Cost" <> 0 THEN
            EXIT(PrognosisRec."Rough Prognosis Total Cost");
          PrognosisRec.CALCFIELDS("Prognosis Total Cost");
          EXIT(PrognosisRec."Prognosis Total Cost");
        END;
      END;
      IF Type = 1 THEN BEGIN
        PrognosisRec.RESET;
        PrognosisRec.SETRANGE("Project No.", JobNo);
        SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,'<=');
        PDatfilterStart := DMY2DATE(1,1,(DATE2DMY(DatFilterStart,3)));
        PDatfilterEnd := DatFilterEnd;
        SearchPeriod.FindPeriod(DatFilterStart,DatFilterEnd,CumulationFilterTxt,PeriodFilterTxt,PeriodType,'>=');
        PrognosisRec.SETRANGE("Prognosis Date",PDatfilterStart,PDatfilterEnd);   //Pdatfilterstart
        IF PrognosisRec.FINDLAST THEN BEGIN
          IF PrognosisRec."Rough Prognosis Total Revenues" <> 0 THEN
            EXIT(PrognosisRec."Rough Prognosis Total Revenues");
          PrognosisRec.CALCFIELDS("Prognosis Revenue");
          EXIT(PrognosisRec."Project Invoiced" + PrognosisRec."Prognosis Revenue");
        END;
      END;
    END;

    PROCEDURE CalcTussResGereedmthisperiod@1000000002(PostingDategereedm@1000000000 : Date);
    VAR
      JobLedgerEntry@1000000001 : Record 11072005;
    BEGIN
      JobLedgerEntry.SETRANGE("Posting Date", PostingDategereedm);
      JobLedgerEntry.SETRANGE("Job No.",Job."No.");
      JobLedgerEntry.SETFILTER("Source Code", 'PROJCLOS');
      IF JobLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          CASE COPYSTR(JobLedgerEntry."No.", 1, 2) OF
            '77' : TegenBGereedmRevPer += -(JobLedgerEntry."Actual Preclosure Result");
            '71' : TegenBGereedmCostsPer += (JobLedgerEntry."Actual Preclosure Result");
          END;
          {IF JobLedgerEntry."Actual Preclosure Result" > 0 THEN //29012013.Gb
            TegenBGereedmCostsPer += (JobLedgerEntry."Actual Preclosure Result")
          ELSE
            TegenBGereedmRevPer += -(JobLedgerEntry."Actual Preclosure Result");}
        UNTIL JobLedgerEntry.NEXT = 0;
      END;
    END;

    PROCEDURE GenerateAccPer@1000000022();
    VAR
      i@1000000000 : Integer;
      x@1000000001 : Integer;
    BEGIN
      AccountingPerRec.SETFILTER("Starting Date",'%1..',DatFilterStart);
      IF AccountingPerRec.FINDFIRST THEN BEGIN
        REPEAT
          i := i + 1;
          AccountingPer[i] := AccountingPerRec."Starting Date";
        UNTIL (AccountingPerRec.NEXT = 0) OR (i = 13);
      END;

      IF i < 13 THEN BEGIN
        MESSAGE(Text001,DatFilterStart,i);
        NoAccPeriodBl := TRUE;
      END ELSE BEGIN
        FOR x := 1 TO 12 DO BEGIN
          AccountingPerEndDate[x] := (AccountingPer[x+1]-1);
        END;
      END;
    END;

    PROCEDURE SetBackgroundColor@1000000025(pRange@1000000000 : Code[10]);
    BEGIN
      xlSheet.Range(pRange).Interior.Pattern := 1;
      xlSheet.Range(pRange).Interior.PatternColorIndex := -4105;
      xlSheet.Range(pRange).Interior.ThemeColor := 5;
      xlSheet.Range(pRange).Interior.TintAndShade := 0.599993896298105;
      xlSheet.Range(pRange).Interior.PatternTintAndShade := 0;
    END;

    PROCEDURE GetLetter@1000000023(Cde@1000000000 : Code[10]) : Code[10];
    BEGIN
      CASE STRLEN(Cde) OF
        2: EXIT(COPYSTR(Cde,1,1));
        3: EXIT(COPYSTR(Cde,1,2));
      END;
    END;

    PROCEDURE CalcBudgetOrg@1210190023(JobNo@1210190000 : Code[20]) : Decimal;
    VAR
      BudgetLineRec@1210190001 : Record 11012001;
    BEGIN
      BudgetLineRec.SETRANGE("Project No.", JobNo);
      BudgetLineRec.SETFILTER(Adjustment, '');
      BudgetLineRec.SETFILTER("Extension Contract",'=%1','');
      BudgetLineRec.SETFILTER(Option, '');
      IF BudgetLineRec.FINDSET THEN BEGIN
        BudgetLineRec.CALCSUMS(Amount);
        EXIT(BudgetLineRec.Amount);
      END ELSE
        EXIT(0);
    END;

    PROCEDURE CalcBudgetExt@1210190024(JobNo@1210190000 : Code[20]) : Decimal;
    VAR
      BudgetLineRec@1210190001 : Record 11012001;
    BEGIN
      BudgetLineRec.SETRANGE("Project No.", JobNo);
      BudgetLineRec.SETFILTER(Adjustment, '');
      BudgetLineRec.SETFILTER("Extension Contract", '<>%1','');
      BudgetLineRec.SETFILTER(Option, '');
      IF BudgetLineRec.FINDSET THEN BEGIN
        BudgetLineRec.CALCSUMS(Amount);
        EXIT(BudgetLineRec.Amount);
      END ELSE
        EXIT(0);
    END;

    PROCEDURE CalcBudgetAdj@1000000005(JobNo@1210190000 : Code[20]) : Decimal;
    VAR
      BudgetLineRec@1210190001 : Record 11012001;
    BEGIN
      BudgetLineRec.SETRANGE("Project No.", JobNo);
      BudgetLineRec.SETFILTER(Adjustment, '<>%1','');
      IF BudgetLineRec.FINDSET THEN BEGIN
        BudgetLineRec.CALCSUMS(Amount);
        EXIT(BudgetLineRec.Amount);
      END ELSE
        EXIT(0);
    END;

    PROCEDURE CalcRevProj@1210190033(JobNo@1210190000 : Code[20]) Rev : Decimal;
    VAR
      JobLedgEntryRec@1210190001 : Record 11072005;
    BEGIN
      JobLedgEntryRec.SETCURRENTKEY("Job No.",Element,"Cost Type","Entry Type","Posting Date");
      JobLedgEntryRec.SETRANGE("Job No.", JobNo);
      JobLedgEntryRec.SETRANGE("Cost Type", JobLedgEntryRec."Cost Type"::Revenues);
      JobLedgEntryRec.SETRANGE("Entry Type", JobLedgEntryRec."Entry Type"::Sale);
      JobLedgEntryRec.SETFILTER("Extension Contract",'=%1', '');
      JobLedgEntryRec.SETFILTER("Posting Date", CumulationFilterTxt);
      IF JobLedgEntryRec.FINDSET THEN BEGIN
        REPEAT
          Rev += -(JobLedgEntryRec."Total Price (LCY)");
        UNTIL JobLedgEntryRec.NEXT = 0;
      END;

      EXIT(Rev);
    END;

    PROCEDURE CalcRevExtByProj@1210190034(JobNo@1210190000 : Code[20]) Rev : Decimal;
    VAR
      JobLedgEntryRec@1210190001 : Record 11072005;
    BEGIN
      JobLedgEntryRec.SETCURRENTKEY("Job No.",Element,"Cost Type","Entry Type","Posting Date");
      JobLedgEntryRec.SETRANGE("Job No.", JobNo);
      JobLedgEntryRec.SETRANGE("Cost Type", JobLedgEntryRec."Cost Type"::Revenues);
      JobLedgEntryRec.SETRANGE("Entry Type", JobLedgEntryRec."Entry Type"::Sale);
      JobLedgEntryRec.SETFILTER("Extension Contract",'<>%1', '');
      JobLedgEntryRec.SETFILTER("Posting Date", CumulationFilterTxt);
      IF JobLedgEntryRec.FINDSET THEN BEGIN
        REPEAT
          Rev += -(JobLedgEntryRec."Total Price (LCY)");
        UNTIL JobLedgEntryRec.NEXT = 0;
      END;

      EXIT(Rev);
    END;

    EVENT xlChart@1000000001::Activate@304();
    BEGIN
    END;

    EVENT xlChart@1000000001::Deactivate@1530();
    BEGIN
    END;

    EVENT xlChart@1000000001::Resize@256();
    BEGIN
    END;

    EVENT xlChart@1000000001::MouseDown@1531(Button@1000000003 : Integer;Shift@1000000002 : Integer;x@1000000001 : Integer;y@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1000000001::MouseUp@1532(Button@1000000003 : Integer;Shift@1000000002 : Integer;x@1000000001 : Integer;y@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1000000001::MouseMove@1533(Button@1000000003 : Integer;Shift@1000000002 : Integer;x@1000000001 : Integer;y@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1000000001::BeforeRightClick@1534(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlChart@1000000001::BeforeDoubleClick@1537(ElementID@1000000003 : Integer;Arg1@1000000002 : Integer;Arg2@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlChart@1000000001::Select@235(ElementID@1000000002 : Integer;Arg1@1000000001 : Integer;Arg2@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1000000001::SeriesChange@1538(SeriesIndex@1000000001 : Integer;PointIndex@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlChart@1000000001::Calculate@279();
    BEGIN
    END;

    EVENT xlSheet@1000000002::SelectionChange@1543(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1000000002::BeforeDoubleClick@1537(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1000000002::BeforeRightClick@1534(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1000000002::Activate@304();
    BEGIN
    END;

    EVENT xlSheet@1000000002::Deactivate@1530();
    BEGIN
    END;

    EVENT xlSheet@1000000002::Calculate@279();
    BEGIN
    END;

    EVENT xlSheet@1000000002::Change@1545(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1000000002::FollowHyperlink@1470(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlSheet@1000000002::PivotTableUpdate@2156(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlSheet@1000000002::PivotTableAfterValueChange@2886(TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1000000002::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1000000002::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1000000002::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlSheet@1000000002::PivotTableChangeSync@2894(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000003::Open@1923();
    BEGIN
    END;

    EVENT xlBook@1000000003::Activate@304();
    BEGIN
    END;

    EVENT xlBook@1000000003::Deactivate@1530();
    BEGIN
    END;

    EVENT xlBook@1000000003::BeforeClose@1546(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::BeforeSave@1547(SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::BeforePrint@1549(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::NewSheet@1550(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1000000003::AddinInstall@1552();
    BEGIN
    END;

    EVENT xlBook@1000000003::AddinUninstall@1553();
    BEGIN
    END;

    EVENT xlBook@1000000003::WindowResize@1554(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1000000003::WindowActivate@1556(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1000000003::WindowDeactivate@1557(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000003::PivotTableCloseConnection@2158(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000003::PivotTableOpenConnection@2159(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000003::Sync@2266(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1000000003::BeforeXmlImport@2283(Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::AfterXmlImport@2285(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1000000003::BeforeXmlExport@2287(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::AfterXmlExport@2288(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1000000003::RowsetComplete@2610(Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1000000003::SheetPivotTableChangeSync@2899(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000003::AfterSave@2900(Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000003::NewChart@2901(Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT xlApp@1000000004::NewWorkbook@1565(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookOpen@1567(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookActivate@1568(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookDeactivate@1569(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookBeforeClose@1570(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookBeforeSave@1571(Wb@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookBeforePrint@1572(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookNewSheet@1573(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookAddinInstall@1574(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookAddinUninstall@1575(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000004::WindowResize@1554(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1000000004::WindowActivate@1556(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1000000004::WindowDeactivate@1557(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookPivotTableCloseConnection@2160(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookPivotTableOpenConnection@2161(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookSync@2289(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookBeforeXmlImport@2290(Wb@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookAfterXmlImport@2291(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookBeforeXmlExport@2292(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookAfterXmlExport@2293(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookRowsetComplete@2611(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::AfterCalculate@2612();
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1000000004::ProtectedViewWindowOpen@2903(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1000000004::ProtectedViewWindowBeforeEdit@2905(Pvw@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::ProtectedViewWindowBeforeClose@2906(Pvw@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";Reason@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::ProtectedViewWindowResize@2908(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1000000004::ProtectedViewWindowActivate@2909(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1000000004::ProtectedViewWindowDeactivate@2910(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookAfterSave@2911(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000004::WorkbookNewChart@2912(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    BEGIN
    {
      //xlSheet.Range(CellCde[14]).NumberFormat := STRSUBSTNO('%1','0.00%');
    }
    END.
  }
  RDLDATA
  {
  }
}

