OBJECT Report 78824 Outlook PEEK
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00.SMART.OK;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   GetPath('POUTLOOK');
                   //IF DocumentGroup.GET('General') THEN BEGIN
                   //  FileName := DocumentGroup."Template Directory" + 'Outlookpeek.xltx';
                   //  IF NOT EXISTS(FileName) THEN
                   //    FileName := PathName;
                   //    //FileName := STRSUBSTNO('G:\ERP\Templates\4PS Report templates\Outlookpeek.xltx');
                   //END ELSE
                   FileName := PathName;
                   //FileName := STRSUBSTNO('G:\ERP\Templates\4PS Report templates\Outlookpeek.xltx');
                 END;

    OnPreReport=BEGIN
                  SheetName           := 'Data';

                  { // using Excel Buffer <<
                  CREATE(xlApp, FALSE, TRUE); // CREATE(xlApp);
                  //xlBook              :=  xlApp.Workbooks._Open(FileName);
                  xlApp.DisplayAlerts :=  FALSE;

                  xlApp.Workbooks.Open(FileName);
                  xlBook              := xlApp.ActiveWorkbook;
                  xlSheet             := xlApp.Worksheets.Item(SheetName);
                  xlSheet.Select;
                  } // using Excel Buffer >>

                  RowNo               := 300;   //2 21-03-2011
                  ColumnNo            := 1;

                  _Dialog.OPEN(Text000 + Text001 + Text002 + Text003,
                    TryOutCnt, TryOutTotalCnt,
                    JobCnt, JobTotalCnt,
                    TrajCnt, TrajTotalCnt,
                    ExtCnt, ExtTotalCnt);
                END;

    OnPostReport=VAR
                   VarRange@1100525001 : Variant;
                   VarRangeName@1100525000 : Variant;
                 BEGIN


                   //xlSheet.SaveAs(STRSUBSTNO('G:\ERP\Templates\4PS Report templates\%1.xlsx',STRSUBSTNO('%1_%2_%3',USERID,TODAY,TIME)));
                   { // using Excel Buffer <<
                   xlSheet.Cells.Select;
                   xlSheet.Cells.EntireColumn.AutoFit ;

                   VarRange   := STRSUBSTNO('A1:BA%1', RowNo - 1);
                   {SetOrderInRange( STRSUBSTNO('A1:BA%1', RowNo - 1),    // Range
                                    STRSUBSTNO('W1:W%1' , RowNo - 1), 0, // Sort column 1         + ascending (0)
                                    STRSUBSTNO('V1:V%1' , RowNo - 1), 0, // Sort column 2         + ascending (0)
                                   '', 0, TRUE);}                         // Sort column 3 = EMPTY + ascending (0) + Header (true)

                   xlApp.Range('A1').Select;

                   xlBook.RefreshAll();
                   xlApp.Visible:=TRUE;
                   } // using Excel Buffer >>

                   TempExcelBuffer.UpdateBook(FileName,SheetName);
                   TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                   TempExcelBuffer.CloseBook;
                   TempExcelBuffer.OpenExcel;
                   TempExcelBuffer.GiveUserControl;
                 END;

  }
  DATASET
  {
    { 1100525000;;DataItem;                  ;
               DataItemTable=Table11012758;
               DataItemTableView=SORTING(Code);
               OnPreDataItem=BEGIN
                               TryOutTotalCnt := COUNT;
                               _Dialog.UPDATE(2, TryOutTotalCnt);
                             END;

               OnAfterGetRecord=VAR
                                  TryOut@1100525012 : Record 11012750;
                                  Tryoutline@1100525011 : Record 11012755;
                                  StelpostBedrag@1100525010 : Decimal;
                                  OfferteBedrag@1100525009 : Decimal;
                                  Kostprijs@1100525008 : Decimal;
                                  GewogenOfferteBedrag@1100525007 : Decimal;
                                  GewogenKostprijs@1100525006 : Decimal;
                                  lMarge@1100525005 : Decimal;
                                  lMarkup@1100525004 : Decimal;
                                  GewogenMarge@1100525003 : Decimal;
                                  dec@1100525002 : TextConst;
                                  int@1100525001 : TextConst;
                                  txt@1100525000 : TextConst;
                                BEGIN
                                  TryOutCnt += 1;
                                  _Dialog.UPDATE(1, TryOutCnt);

                                  CALCFIELDS("Contact Name", "Salesperson Name");

                                  PartCostAmount := 0;

                                  //Ophalen eindklant
                                  IF TryOut.GET("Try-out No.") THEN;
                                  Tryoutline.SETRANGE("Try-out No.", "Try-out No.");
                                  Tryoutline.SETFILTER("Contact Type",'END CUSTOMER');
                                  IF Tryoutline.FINDFIRST THEN
                                    Tryoutline.CALCFIELDS("Contact Name");

                                  //Calculatie gegevens
                                  CalculateCostPriceData(Code, "Try-out Quote".ShowEstimates(0));

                                  // REKENVELDEN
                                  StelpostBedrag       :=  GetBedragStelpost(Code);
                                  OfferteBedrag        := "Offered Amount (LCY)";
                                  Kostprijs            :=  PartCostAmount - StelpostBedrag;

                                  GewogenOfferteBedrag := (OfferteBedrag / 100) * "Scoring Percentage" ;
                                  GewogenKostprijs     := (Kostprijs / 100) * "Scoring Percentage" ;

                                  CASE TRUE OF
                                    (OfferteBedrag <> 0) AND (Kostprijs <> 0 ) : lMarge  := ((OfferteBedrag - Kostprijs) / OfferteBedrag );
                                    (OfferteBedrag <> 0) AND (Kostprijs  = 0 ) : lMarge  := 1;
                                    (OfferteBedrag  = 0)                       : lMarge  := 0;
                                  END;

                                  CASE TRUE OF
                                    (Kostprijs <> 0)                           : lMarkup := ((OfferteBedrag - Kostprijs) / Kostprijs     );
                                    (Kostprijs  = 0) AND (OfferteBedrag  = 0 ) : lMarkup := 0;
                                    (Kostprijs  = 0) AND (OfferteBedrag <> 0 ) : lMarkup := 1;
                                  END;

                                  IF GewogenOfferteBedrag <> 0 THEN
                                    GewogenMarge := ((GewogenOfferteBedrag - GewogenKostprijs) / GewogenOfferteBedrag )
                                  ELSE
                                    GewogenMarge := 1;

                                  // Excel Dump
                                  AddCell(COPYSTR(FORMAT(TryOut.Status),1,3));         // Status  traject
                                  AddCell(COPYSTR(FORMAT(Status),1,3));                // Status Trajectofferte
                                  AddCell(TryOut.Code);                                // Traject

                                  IF TryOut."Single/Main/Sub Tryout" <> TryOut."Single/Main/Sub Tryout"::Single THEN
                                    AddCell(TryOut."Main Try-out")                      // Hoofd traject
                                  ELSE
                                    AddCell('');                                        // GEEN Hoofd traject

                                  AddCell("Try-out Quote".Description);                 // Omschrijving
                                  AddCell( txt + "Tender No.");                         // Bestek
                                  AddCell( Code);                                       // Offerte
                                  AddCell("Contact Name");                    // Klant
                                  AddCell( GetABCD("Contact No."));           // ABDC
                                  AddCell( Tryoutline."Contact Name");        // Eindklant
                                  AddCell( GetABCD(Tryoutline."Contact No."));// ABDC
                                  IF "Contact Name" <> '' THEN
                                    AddCell("Country/Region Code")                      // Land van klant
                                  ELSE
                                    AddCell(GetCountryCode(Tryoutline."Contact No."));// Land van eindklant

                                  //
                                  AddCell( FORMAT("Apply Date"   ) );                   // Aanvraagdatum
                                  AddCell( FORMAT("Creation Date") );                   // start offerte
                                  AddCell( FORMAT("Assign Date"  ) );                   // Aanwijzingsdatum
                                  AddCell( FORMAT("Register Date") );                   // Indiendatum
                                  AddCell( FORMAT("Tender Date"  ) );                   // Aanbestedingsdatum
                                  AddCell( FORMAT("Tender Time"  ) );                   // Aanbestedingstijd
                                  AddCell( FORMAT("Send Date"    ) );                   // Offertedatum
                                  AddCell( FORMAT("Valid Until"  ) );                   // Geldig tot
                                  //

                                  AddCell( FORMAT(TryOut."Expected Order Date"));       // Verwachtte orderdatum
                                  //
                                  IF TryOut."Expected Order Date" <> 0D THEN BEGIN
                                    AddCell( FORMAT(DATE2DWY(TryOut."Expected Order Date",2))); //verwachttte orderweek
                                    AddCell( txt + FORMAT(TryOut."Expected Order Date", 0, '[<Month,2>] <Month Text>')); // Verwachtte ordermaand
                                    AddCell( FORMAT(TryOut."Expected Order Date", 0, '<YEAR4>'               )); // Verwachtte ordermaand
                                  END ELSE BEGIN
                                    AddCell( ''  );                                               // Verwachtte orderweek
                                    AddCell( ''  );                                               // Verwachtte ordermaand
                                    AddCell( ''  );                                               // Verwachtte orderjaar
                                  END;
                                  //
                                  AddCell( FORMAT(TryOut."Order Date"));                // Opdrachtdatum

                                  IF TryOut."Order Date" <> 0D THEN BEGIN
                                    AddCell( FORMAT(DATE2DWY(TryOut."Order Date",2)));                          // OpdrachtWeek
                                    AddCell( txt + FORMAT(TryOut."Order Date", 0, '[<Month,2>] <Month Text>')); // OpdrachtMaand
                                    AddCell( FORMAT(TryOut."Order Date", 0, '<YEAR4>'               ));         // Opdrachtjaar
                                  END ELSE BEGIN
                                    AddCell( ''  );                                               // OpdrachtWeek
                                    AddCell( ''  );                                               // OpdrachtMaand
                                    AddCell( ''  );                                               // Opdrachtjaar
                                  END;

                                  AddCell( FORMAT(TryOut."Expected Starting Date"));    // Verwachtte begindatum
                                  AddCell( FORMAT(TryOut."Expected End Date"));         // Verw einddatum
                                  AddCell( Getplanningsreservering(Code));              // Planningsreservering
                                  AddCell( GetEmployeeName(Estimator));                 // Behandelaar
                                  AddCell("Salesperson Name");                         // Accountmanager
                                  AddCell( GetTryOutSuccProjectManager("Try-out No.")); // Projectmanager
                                  AddCell( GetTryOutSuccProjectNumber("Try-out No."));  // Projectnummers
                                  AddCell( GetEstimates("Try-out No."));                // Tellende Calculatie(s)
                                  //dCell( FORMAT("Offered Amount", 0, dec));           // Offerte bedrag   // REPLACE JvL 2010-08-19
                                  AddCell( FORMAT(TryOut."Order Amount (LCY)", 0, dec));      // Offerte bedrag   // REPLACE JvL 2010-08-19
                                  AddCell( FORMAT( Kostprijs, 0, dec));                 // kostprijs
                                  AddCell( FORMAT( lMarge   , 0, dec));                 // Marge %
                                  AddCell( FORMAT( lMarkup  , 0, dec));                 // Markup
                                  //
                                  AddCell( FORMAT(TryOut."Order Amount (LCY)" - Kostprijs, 0, dec));// Marge EUR
                                  //
                                  AddCell( FORMAT("Scoring Percentage" / 100, 0, dec)); // Kans
                                  AddCell( FORMAT( GewogenOfferteBedrag, 0, dec));      // Offerte bedrag gewogen
                                  AddCell( FORMAT( GewogenKostprijs, 0, dec));          // Kostprijs gewogen
                                  AddCell( FORMAT( GewogenMarge, 0, dec));              // Marge gewogen    Kolom AS
                                  AddCell( GetMaintenancePeriod(Code));                 // OH jaren
                                  AddCell( FORMAT(GetOnderhoudsbedrag(Code), 0, dec));  // OH Bedrag per jaar
                                  AddCell( FORMAT(StelpostBedrag           , 0, dec));  // Stelpost Bedrag
                                  AddCell( GetFeature(Code,'Offer Type'));              // Offer type
                                  AddCell( GetFeature(Code,'Type of work'));            // Type of Work
                                  AddCell( GetFeature(Code,'Role Peek'));               // Role Peek
                                  AddCell( GetFeature(Code,'Category'));                // Category
                                  AddCell( GetFeature(Code,'Products 1'));              // Products 1
                                  AddCell( FORMAT(GetFeatureDec(Code,'Products 1')));   // Products 1 kenmerk waarde
                                  AddCell( GetFeature(Code,'Products 2'));              // Products 2
                                  AddCell( FORMAT(GetFeatureDec(Code,'Products 2')));   // Products 2 kenmer waarde
                                  AddCell("Global Dimension 1 Code");                   // Kosten plaats
                                  IF Leading THEN
                                    AddCell('Ja')
                                  ELSE
                                    AddCell(' ');                                       // Tellend
                                  AddCell(FORMAT("Offered Amount (LCY)"));                    // Aanbiedingsbedrag
                                  AddCell(FORMAT(TryOut."Scoring Percentage" / 100));   // Scoringskans
                                  AddCell( GetHoursBudget(Code));                       // Ureninschatting
                                  NewLine;
                                END;

               ReqFilterFields=Code }

    { 1100525001;;DataItem;                  ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.)
                                 WHERE(Settlement Method=CONST(Cost Plus),
                                       Discipline=CONST(COMMODITY));
               OnPreDataItem=BEGIN
                               JobTotalCnt := COUNT;
                               _Dialog.UPDATE(4, JobTotalCnt);
                             END;

               OnAfterGetRecord=VAR
                                  ProjectPrincipal@1100525000 : Record 11012005;
                                  dec@1100525003 : TextConst;
                                  int@1100525002 : TextConst;
                                  txt@1100525001 : TextConst;
                                BEGIN
                                  JobCnt += 1;
                                  _Dialog.UPDATE(3, JobCnt);

                                  IF ProjectPrincipal.GET(Job."No.", Job."Bill-to Customer No.") THEN;

                                  CALCFIELDS("Name Estimator", "Name Project Manager", "Salesperson Name");

                                  // Excel Dump
                                  AddCell('T45');                                       // Status  traject
                                  AddCell('T45');                                       // Status Trajectofferte
                                  AddCell(' ');                                          // GEEN Traject
                                  AddCell(' ');                                          // GEEN Hoofd traject

                                  AddCell( Description);                                // Omschrijving
                                  AddCell(' ');                                          // Bestek
                                  AddCell(' ');                                          // Offerte
                                  CALCFIELDS("Principal Name");
                                  AddCell("Principal Name");                            // Klant
                                  AddCell( GetABCD("Bill-to Customer No."));            // ABDC
                                  AddCell("Principal Name");                            // Eindklant
                                  AddCell( GetABCD("Bill-to Customer No."));            // ABDC
                                  AddCell("Country/Region Code"  );                     // Land van klant

                                  AddCell( FORMAT(ProjectPrincipal."Order Date"   ) );  // Aanvraagdatum
                                  AddCell(' '); //AddCell( FORMAT("Creation Date") );                   // start offerte
                                  AddCell(' '); //AddCell( FORMAT("Assign Date"  ) );                   // Aanwijzingsdatum
                                  AddCell(' '); //AddCell( FORMAT("Register Date") );                   // Indiendatum
                                  AddCell(' '); //AddCell( FORMAT("Tender Date"  ) );                   // Aanbestedingsdatum
                                  AddCell(' '); //AddCell( FORMAT("Tender Time"  ) );                   // Aanbestedingstijd
                                  AddCell(' '); //AddCell( FORMAT("Send Date"    ) );                   // Offertedatum
                                  AddCell(' '); //AddCell( FORMAT("Valid Until"  ) );                   // Geldig tot

                                  IF ProjectPrincipal."Order Date" <> 0D THEN BEGIN
                                    AddCell(FORMAT(ProjectPrincipal."Order Date"));                                       // Verwachtte orderdatum
                                    AddCell( FORMAT(DATE2DWY(ProjectPrincipal."Order Date",2)));                          // verwachttte orderweek
                                    AddCell( txt + FORMAT(ProjectPrincipal."Order Date", 0, '[<Month,2>] <Month Text>')); // Verwachtte ordermaand
                                    AddCell( FORMAT(ProjectPrincipal."Order Date", 0, '<YEAR4>'               ));         // Verwachtte orderjaar
                                  END ELSE BEGIN
                                    AddCell( ' '  );                                               // Verwachtte orderdatum
                                    AddCell( ' '  );                                               // Verwachtte orderweek
                                    AddCell( ' '  );                                               // Verwachtte ordermaand
                                    AddCell( ' '  );                                               // Verwachtte orderjaar
                                  END;
                                  //
                                  AddCell( FORMAT(ProjectPrincipal."Order Date"   ) );  // Opdrachtdatum
                                  IF ProjectPrincipal."Order Date" <> 0D THEN BEGIN
                                    AddCell( FORMAT(DATE2DWY(ProjectPrincipal."Order Date",2)));                          // OpdrachtWeek
                                    AddCell( txt + FORMAT(ProjectPrincipal."Order Date", 0, '[<Month,2>] <Month Text>')); // OpdrachtMaand
                                    AddCell( FORMAT(ProjectPrincipal."Order Date", 0, '<YEAR4>'               ));         // Opdrachtjaar
                                  END ELSE BEGIN
                                    AddCell( ''  );                                               // OpdrachtWeek
                                    AddCell( ''  );                                               // OpdrachtMaand
                                    AddCell( ''  );                                               // Opdrachtjaar
                                  END;

                                  AddCell( FORMAT("Starting Date"));                    // Verwachtte begindatum
                                  AddCell( FORMAT("Ending Date"));                      // Verw einddatum
                                  AddCell('');                                          // Planningsreservering
                                  AddCell("Name Estimator");                            // Behandelaar
                                  AddCell("Salesperson Name");                          // Accountmanager
                                  AddCell("Name Project Manager");                      // Projectmanager
                                  AddCell("No.");                                       // Projectnummer
                                  AddCell(' ');                                          // Tellende Calculatie(s)
                                  AddCell( FORMAT(GetJobQuoteAmount("No."), 0, dec));   // Offerte bedrag   // REPLACE JvL 2010-08-19
                                  AddCell( FORMAT(GetJobQuoteCost("No."), 0, dec));     // kostprijs
                                  AddCell( FORMAT( Margin   , 0, dec));                 // Marge %
                                  AddCell( FORMAT( Markup   , 0, dec));                 // Markup
                                  AddCell( FORMAT( MarginAmount, 0, dec));              // Markge EUR
                                  AddCell('1');                                         // Kans
                                  AddCell( FORMAT(GetJobQuoteAmount("No."), 0, dec));   // Offerte bedrag gewogen
                                  AddCell( FORMAT(GetJobQuoteCost("No."), 0, dec));     // Kostprijs gewogen
                                  AddCell( FORMAT( Margin   , 0, dec));                 // Marge gewogen
                                  AddCell('0');                                         // OH jaren
                                  AddCell('0');                                         // OH Bedrag per jaar
                                  AddCell('0');                                         // Stelpost Bedrag
                                  AddCell(' ');                                          // Offer type
                                  AddCell('COMMODITY');                                 // Type of Work
                                  AddCell('MAINCONTRACTOR');                            // Role Peek
                                  AddCell(' ');                                          // Category
                                  AddCell(' ');                                          // Products 1
                                  AddCell(' ');                                          // Products 1 Amount
                                  AddCell(' ');                                          // Products 2
                                  AddCell(' ');                                          // Products 2 Amount
                                  AddCell("Global Dimension 1 Code");                   // Kostenplaats
                                  AddCell('Ja');                                        // Tellend
                                  AddCell( FORMAT(GetJobQuoteAmount("No."), 0, dec));   // Aanbiedingsbedrag
                                  AddCell('1');                                         // Scoringskans
                                  AddCell(' ');                                         // Ureninschatting
                                  NewLine;
                                END;

               ReqFilterFields=No.,Bill-to Customer No. }

    { 1100525002;;DataItem;                  ;
               DataItemTable=Table11012750;
               DataItemTableView=SORTING(Code)
                                 ORDER(Ascending)
                                 WHERE(Status=FILTER(T00..T04));
               OnPreDataItem=BEGIN
                               TrajTotalCnt := COUNT;
                               _Dialog.UPDATE(6, TrajTotalCnt);
                             END;

               OnAfterGetRecord=VAR
                                  TryOutLine@1100525001 : Record 11012755;
                                  SalesPerson@1100525000 : Record 13;
                                  dec@1100525004 : TextConst;
                                  int@1100525003 : TextConst;
                                  txt@1100525002 : TextConst;
                                BEGIN

                                  TrajCnt += 1;
                                  _Dialog.UPDATE( 5, TrajCnt);


                                  TryOutLine.SETRANGE("Try-out No.", Code);
                                  TryOutLine.SETFILTER("Contact Type",'END CUSTOMER');
                                  IF TryOutLine.FINDFIRST THEN
                                    TryOutLine.CALCFIELDS("Contact Name");

                                  IF SalesPerson.GET("Try-out"."Salesperson Code") THEN;

                                  // Excel Dump
                                  AddCell( COPYSTR(Status, 1, 3));                      // Status  traject
                                  AddCell('');                                          // Status Trajectofferte
                                  AddCell( Code);                                       // Traject

                                  IF "Single/Main/Sub Tryout" <> "Single/Main/Sub Tryout"::Single THEN
                                    AddCell("Main Try-out")                             // Hoofd traject
                                  ELSE
                                    AddCell('');                                        // GEEN Hoofd traject

                                  AddCell( Description);                                // Omschrijving
                                  AddCell('');                                          // Bestek
                                  AddCell('');                                          // Offerte
                                  AddCell('');                                          // Klant
                                  AddCell('');                                          // ABDC
                                  AddCell( TryOutLine."Contact Name");        // Eindklant
                                  AddCell( GetABCD(TryOutLine."Contact No."));// ABDC
                                  AddCell( GetCountryCode(TryOutLine."Contact No."));// Land van eindklant

                                  //
                                  AddCell( '' );                                        // Aanvraagdatum
                                  AddCell( '' );                                        // start offerte
                                  AddCell( '' );                                        // Aanwijzingsdatum
                                  AddCell( '' );                                        // Indiendatum
                                  AddCell( '' );                                        // Aanbestedingsdatum
                                  AddCell( '' );                                        // Aanbestedingstijd
                                  AddCell( '' );                                        // Offertedatum
                                  AddCell( '' );                                        // Geldig tot
                                  //

                                  AddCell( FORMAT("Expected Order Date"));              // Verwachtte orderdatum
                                  //
                                  IF "Expected Order Date" <> 0D THEN BEGIN
                                    AddCell( FORMAT(DATE2DWY("Expected Order Date",2))); //verwachttte orderweek
                                    AddCell( txt + FORMAT("Expected Order Date", 0, '[<Month,2>] <Month Text>')); // Verwachtte ordermaand
                                    AddCell( FORMAT("Expected Order Date", 0, '<YEAR4>'    )); // Verwachtte ordermaand
                                  END ELSE BEGIN
                                    AddCell( '' );                                        // Verwachtte orderweek
                                    AddCell( '' );                                        // Verwachtte ordermaand
                                    AddCell( '' );                                        // Verwachtte orderjaar
                                  END;
                                  AddCell( FORMAT("Order Date"));                       // Opdrachtdatum
                                  IF "Order Date" <> 0D THEN BEGIN
                                    AddCell( FORMAT(DATE2DWY("Order Date",2)));                          // OpdrachtWeek
                                    AddCell( txt + FORMAT("Order Date", 0, '[<Month,2>] <Month Text>')); // OpdrachtMaand
                                    AddCell( FORMAT("Order Date", 0, '<YEAR4>'               ));         // Opdrachtjaar
                                  END ELSE BEGIN
                                    AddCell( ''  );                                               // OpdrachtWeek
                                    AddCell( ''  );                                               // OpdrachtMaand
                                    AddCell( ''  );                                               // Opdrachtjaar
                                  END;

                                  AddCell( FORMAT("Expected Starting Date"));           // Verwachtte begindatum
                                  AddCell( FORMAT("Expected End Date"));                // Verw einddatum
                                  AddCell( Getplanningsreservering(Code));              // Planningsreservering
                                  AddCell('');                                          // Behandelaar
                                  AddCell( SalesPerson.Name);                           // Accountmanager
                                  AddCell( GetTryOutSuccProjectManager(Code));          // Projectmanager
                                  AddCell( GetTryOutSuccProjectNumber(Code));           // Projectnummers
                                  AddCell( GetEstimates(Code));                         // Tellende Calculatie(s)
                                  AddCell( FORMAT("Order Amount (LCY)", 0, dec));             // Offerte bedrag
                                  AddCell('0,00');                                      // kostprijs
                                  AddCell('0,00');                                      // Marge
                                  AddCell('0,00');                                      // Markup
                                  AddCell('0,00');                                      // Marge EUR
                                  AddCell( FORMAT("Scoring Percentage" / 100, 0, dec)); // Kans
                                  AddCell( FORMAT("Order Amount (LCY)" * "Scoring Percentage" / 100, 0, dec));      // Offerte bedrag gewogen
                                  AddCell('0');                                         // Kostprijs gewogen
                                  AddCell('0');                                         // Marge gewogen
                                  AddCell( GetMaintenancePeriod(Code));                 // OH jaren
                                  AddCell('0,00');                                      // OH Bedrag per jaar
                                  AddCell('0,00');                                      // Stelpost Bedrag
                                  AddCell( GetFeature(Code,'Offer Type'));              // Offer type
                                  AddCell( GetFeature(Code,'Type of work'));            // Type of Work
                                  AddCell( GetFeature(Code,'Role Peek'));               // Role Peek
                                  AddCell( GetFeature(Code,'Category'));                // Category
                                  AddCell( GetFeature(Code,'Products 1'));              // Products 1
                                  AddCell( GetFeature(Code,'Products 1 Amount'));       // Products 1 Amount
                                  AddCell( GetFeature(Code,'Products 2'));              // Products 2
                                  AddCell( GetFeature(Code,'Products 2 Amount'));       // Products 2 Amount
                                  AddCell("Global Dimension 1 Code");                   // Kostenplaats
                                  AddCell('Ja');                                        // Tellende offerte
                                  AddCell(FORMAT("Scoring Percentage" / 100, 0, dec));  // Scoringskans
                                  AddCell('0');                                         // Aanbiedingsbedrag
                                  AddCell(' ');                                         // Uren inschatting
                                  NewLine;
                                END;

               ReqFilterFields=Salesperson Code }

    { 1100525003;0;DataItem;                 ;
               DataItemTable=Table11012004;
               DataItemTableView=SORTING(Project No.,Contract No.)
                                 WHERE(Contract No.=FILTER(>=500));
               OnPreDataItem=BEGIN
                               ExtTotalCnt := COUNT;
                               _Dialog.UPDATE(8, ExtTotalCnt);
                             END;

               OnAfterGetRecord=VAR
                                  dec@1100525016 : TextConst;
                                  int@1100525015 : TextConst;
                                  txt@1100525014 : TextConst;
                                  JobRec@1100525013 : Record 11072003;
                                  JobRec1@1100525012 : Record 11072003;
                                  TryOutRelationRec@1100525011 : Record 11012761;
                                  TryOut@1100525010 : Record 11012750;
                                  TryOutLine@1100525009 : Record 11012755;
                                  SalesPerson@1100525008 : Record 13;
                                  StelpostBedrag@1100525007 : Decimal;
                                  OfferteBedrag@1100525006 : Decimal;
                                  Kostprijs@1100525005 : Decimal;
                                  GewogenOfferteBedrag@1100525004 : Decimal;
                                  GewogenKostprijs@1100525003 : Decimal;
                                  lMarge@1100525002 : Decimal;
                                  lMarkup@1100525001 : Decimal;
                                  GewogenMarge@1100525000 : Decimal;
                                BEGIN
                                  ExtCnt += 1;
                                  _Dialog.UPDATE( 7, ExtCnt);

                                  CALCFIELDS("Principal Name");

                                  JobRec.GET("Project No.");
                                  IF TryOutRelationRec.GetTryOut(JobRec."No.", '', '', '', '', '', '', 1) <> '' THEN
                                    IF TryOut.GET(TryOutRelationRec.GetTryOut(JobRec."No.", '', '', '', '', '', '', 1)) THEN;

                                  JobRec.CALCFIELDS("Name Adviser");

                                  TryOutLine.SETRANGE("Try-out No.", TryOut.Code);
                                  TryOutLine.SETFILTER("Contact Type",'END CUSTOMER');
                                  IF TryOutLine.FINDFIRST THEN
                                    TryOutLine.CALCFIELDS("Contact Name");

                                  IF SalesPerson.GET(TryOut."Salesperson Code") THEN;

                                  Kostprijs := CalcBudgetExt("Project No.", "Contract No.");
                                  OfferteBedrag := "Contract Amount (LCY)";

                                  GewogenOfferteBedrag := (OfferteBedrag / 100) * 100 ;
                                  GewogenKostprijs     := (Kostprijs / 100) * 100 ;

                                  CASE TRUE OF
                                    (OfferteBedrag <> 0) AND (Kostprijs <> 0 ) : lMarge  := ((OfferteBedrag - Kostprijs) / OfferteBedrag );
                                    (OfferteBedrag <> 0) AND (Kostprijs  = 0 ) : lMarge  := 1;
                                    (OfferteBedrag  = 0)                       : lMarge  := 0;
                                  END;

                                  CASE TRUE OF
                                    (Kostprijs <> 0)                           : lMarkup := ((OfferteBedrag - Kostprijs) / Kostprijs     );
                                    (Kostprijs  = 0) AND (OfferteBedrag  = 0 ) : lMarkup := 0;
                                    (Kostprijs  = 0) AND (OfferteBedrag <> 0 ) : lMarkup := 1;
                                  END;

                                  IF GewogenOfferteBedrag <> 0 THEN
                                    GewogenMarge := ((GewogenOfferteBedrag - GewogenKostprijs) / GewogenOfferteBedrag )
                                  ELSE
                                    GewogenMarge := 1;


                                  // Excel Dump
                                  AddCell('T45');                                       // Status  traject
                                  AddCell('T45');                                       // Status Trajectofferte
                                  AddCell( TryOut.Code);                                // Traject

                                  IF TryOut."Single/Main/Sub Tryout" <> TryOut."Single/Main/Sub Tryout"::Single THEN
                                    AddCell(TryOut."Main Try-out")                      // Hoofd traject
                                  ELSE
                                    AddCell('');                                        // GEEN Hoofd traject

                                  AddCell( Description);                                // Omschrijving
                                  AddCell('');                                          // Bestek
                                  AddCell(TryOutRelationRec.GetTryOut(JobRec."No.", '', '', '', '','', '', 2)); // Offerte
                                  AddCell("Principal Name");       // Klant
                                  AddCell('');                                          // ABDC
                                  AddCell( TryOutLine."Contact Name");        // Eindklant
                                  AddCell( GetABCD(TryOutLine."Contact No."));// ABDC
                                  AddCell( GetCountryCode(TryOutLine."Contact No."));// Land van eindklant

                                  //
                                  AddCell( '' );                                        // Aanvraagdatum
                                  AddCell( '' );                                        // start offerte
                                  AddCell( '' );                                        // Aanwijzingsdatum
                                  AddCell( '' );                                        // Indiendatum
                                  AddCell( '' );                                        // Aanbestedingsdatum
                                  AddCell( '' );                                        // Aanbestedingstijd
                                  AddCell( '' );                                        // Offertedatum
                                  AddCell( '' );                                        // Geldig tot
                                  //

                                  AddCell( FORMAT("Contract Date"));                    // Verwachtte orderdatum
                                  //
                                  IF "Contract Date" <> 0D THEN BEGIN
                                    AddCell( FORMAT(DATE2DWY("Contract Date",2))); //verwachtte orderweek
                                    AddCell( txt + FORMAT("Contract Date", 0, '[<Month,2>] <Month Text>')); // Verwachtte ordermaand
                                    AddCell( FORMAT("Contract Date", 0, '<YEAR4>'    )); // Verwachtte ordermaand
                                  END ELSE BEGIN
                                    AddCell( '' );                                        // Verwachtte orderweek
                                    AddCell( '' );                                        // Verwachtte ordermaand
                                    AddCell( '' );                                        // Verwachtte orderjaar
                                  END;
                                  AddCell( FORMAT("Contract Date"));                       // Opdrachtdatum
                                  IF "Contract Date" <> 0D THEN BEGIN
                                    AddCell( FORMAT(DATE2DWY("Contract Date",2)));                          // OpdrachtWeek
                                    AddCell( txt + FORMAT("Contract Date", 0, '[<Month,2>] <Month Text>')); // OpdrachtMaand
                                    AddCell( FORMAT("Contract Date", 0, '<YEAR4>'               ));         // Opdrachtjaar
                                  END ELSE BEGIN
                                    AddCell( ''  );                                               // OpdrachtWeek
                                    AddCell( ''  );                                               // OpdrachtMaand
                                    AddCell( ''  );                                               // Opdrachtjaar
                                  END;

                                  AddCell( '');           // Verwachtte begindatum
                                  AddCell( '');           // Verw einddatum
                                  AddCell( '');           // Planningsreservering

                                  AddCell(JobRec."Name Adviser");                       // Behandelaar
                                  AddCell( SalesPerson.Name);                           // Accountmanager

                                  IF JobRec1.GET("Project No.") THEN BEGIN
                                    JobRec1.CALCFIELDS("Name Project Manager");
                                    AddCell( JobRec1."Name Project Manager");          // Projectmanager
                                  END ELSE
                                    AddCell( '');

                                  AddCell( FORMAT("Project No."));                      // Projectnummers
                                  AddCell( '');                                         // Tellende Calculatie(s)
                                  AddCell( FORMAT("Contract Amount (LCY)", 0, dec));          // Offerte bedrag
                                  AddCell(FORMAT(Kostprijs, 0, dec));                   // kostprijs
                                  AddCell(FORMAT(lMarge, 0, dec));                      // Marge
                                  AddCell(FORMAT(lMarkup, 0, dec));                     // Markup
                                  AddCell(FORMAT("Contract Amount (LCY)"  - Kostprijs, 0, dec)); // Marge EUR
                                  AddCell('1');                                       // Kans
                                  AddCell( FORMAT("Contract Amount (LCY)" , 0, dec)); // Offerte bedrag gewogen
                                  AddCell(FORMAT(Kostprijs, 0, dec));                   // Kostprijs gewogen
                                  AddCell(FORMAT(GewogenMarge, 0, dec));                // Marge gewogen
                                  AddCell('0');                                         // OH jaren
                                  AddCell('0,00');                                      // OH Bedrag per jaar
                                  AddCell('0,00');                                      // Stelpost Bedrag
                                  AddCell( '');                                         // Offer type
                                  AddCell( 'ADDITIONAL WORK');                          // Type of Work
                                  AddCell( 'MAINCONTRACTOR');                           // Role Peek
                                  AddCell( '');                                         // Category
                                  AddCell( '');                                         // Products 1
                                  AddCell( '');                                         // Products 1 Amount
                                  AddCell( '');                                         // Products 2
                                  AddCell( '');                                         // Products 2 Amount
                                  AddCell(JobRec."Global Dimension 1 Code");            // Kostenplaats
                                  AddCell('Ja');                                        // Tellende offerte
                                  AddCell(FORMAT("Contract Amount (LCY)", 0, dec));           // Aanbiedingsbedrag
                                  AddCell('1');                                       // Scoringskans
                                  AddCell(' ');                                         // Uren inschatting
                                  AddCell("Contract No.");                              // Contract Nr.
                                  NewLine;
                                END;

               OnPostDataItem=BEGIN
                                _Dialog.CLOSE;
                              END;

               ReqFilterFields=Project No.,Contract No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Opties;
                  GroupType=Group }

      { 1100525004;2;Field  ;
                  Name=FileName;
                  CaptionML=ENU=Bestandsnaam;
                  SourceExpr=FileName;
                  OnAssistEdit=VAR
                                 CommonDialog@1100525000 : Codeunit 419;
                                 Excel2007FileType@1100525001 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU="Excel Files (*.xlsx;*.xls)|*.xlsx;*.xls"';
                               BEGIN
                                 FileName := CommonDialog.OpenFileDialog('Selecteer calculatiesheet', FileName, Excel2007FileType); // CommonDialog.OpenFile('Selecteer calculatiesheet', FileName, 2, '', 0);
                               END;
                                }

      { 1100525003;2;Field  ;
                  Name=Padcode;
                  CaptionML=ENU=Padcode;
                  SourceExpr='POUTLOOK';
                  Editable=FALSE }

      { 1100525002;2;Field  ;
                  Name=PathName;
                  CaptionML=ENU=Templatebestand;
                  SourceExpr=PathName;
                  Editable=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FileName@1100525025 : Text[250];
      SheetName@1100525024 : Text[250];
      PathName@1100525023 : Text[250];
      TempExcelBuffer@1100525034 : TEMPORARY Record 370;
      RowNo@1100525016 : Integer;
      ColumnNo@1100525015 : Integer;
      newsheetname@1100525014 : Text[30];
      PartCostAmount@1100525013 : Decimal;
      Margin@1100525012 : Decimal;
      Markup@1100525011 : Decimal;
      MarginAmount@1100525010 : Decimal;
      Onderhoudsbedrag@1100525009 : Decimal;
      _Dialog@1100525008 : Dialog;
      TryOutTotalCnt@1100525007 : Integer;
      TryOutCnt@1100525006 : Integer;
      JobTotalCnt@1100525005 : Integer;
      JobCnt@1100525004 : Integer;
      TrajTotalCnt@1100525003 : Integer;
      TrajCnt@1100525002 : Integer;
      ExtTotalCnt@1100525001 : Integer;
      ExtCnt@1100525000 : Integer;
      Text11012001@1100525033 : TextConst 'ENU=Index1';
      Text11012002@1100525032 : TextConst 'ENU=Index2';
      Text11012003@1100525031 : TextConst 'ENU=Index3';
      Text005@1100525030 : TextConst;
      Text000@1100525029 : TextConst;
      Text001@1100525028 : TextConst;
      Text002@1100525027 : TextConst;
      Text003@1100525026 : TextConst;
      XlApp1@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlBook1@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      xlSheet1@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlRange1@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";

    PROCEDURE Matrix@1000000001(m_col@1000000000 : Integer;m_row@1000000001 : Integer) m_ret : Code[10];
    VAR
      xx@1000000002 : Integer;
      alf@1000000003 : Code[50];
      m_rest@1000000004 : Decimal;
      m_nu@1000000005 : Decimal;
      m_heel@1000000006 : Decimal;
      m_tus@1000000007 : Code[30];
    BEGIN
      IF m_col > 256 THEN BEGIN
       m_tus:='IV';
       ERROR('Selecteer minder artikelen (max 256)');
      END ELSE BEGIN
       alf:='ABCDEFGHIJKLMNOPQRSTUVWXYZ    ';
       REPEAT
         m_heel:=ROUND(m_col/26.000000001,1,'<');
         IF m_heel>0 THEN
          m_nu:=m_heel
         ELSE
          m_nu:=m_col;
         IF m_nu=0 THEN m_nu:=27;
         m_tus:=m_tus+COPYSTR(alf,m_nu,1);
         m_col:=ROUND(m_col-(m_heel*26),1);
       UNTIL m_heel<=0 ;
      END;
      m_ret:=DELCHR(STRSUBSTNO('%1 %2',m_tus,m_row));
    END;

    PROCEDURE AddCell@1000000006(Value@1000000000 : Text[250]);
    BEGIN
      // xlSheet.Range(Matrix(ColumnNo, RowNo)).Value := Value;

      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := Value;
      TempExcelBuffer."Cell Type" := TempExcelBuffer."Cell Type"::Text;
      TempExcelBuffer.INSERT;

      ColumnNo += 1;
    END;

    PROCEDURE NewLine@1000000007();
    BEGIN
      RowNo += 1;
      ColumnNo := 1;
    END;

    PROCEDURE Getplanningsreservering@1000000022(TryOutQuoteNo@1000000000 : Code[20]) : Text[30];
    VAR
      TryOutQuote@1000000002 : Record 11012758;
    BEGIN
      IF TryOutQuote.GET(TryOutQuoteNo) THEN
        IF TryOutQuote."Planning Informed" <> 0D THEN
          EXIT('YES')
        ELSE
          EXIT(' ');
    END;

    PROCEDURE GetTryOutSuccProjectManager@1000000031(TryOutNo@1000000001 : Code[20]) : Text[50];
    VAR
      TryoutSuccessor@1000000000 : Record 11012761;
      JobRec@1000000002 : Record 11072003;
    BEGIN
      TryoutSuccessor.SETRANGE("Try-out No.",TryOutNo);
      TryoutSuccessor.SETFILTER("Project No.",'<>%1','');
      IF TryoutSuccessor.FINDFIRST THEN BEGIN
        JobRec.GET(TryoutSuccessor."Project No.");
        JobRec.CALCFIELDS("Name Project Manager");
        EXIT(JobRec."Name Project Manager");
      END ELSE
        EXIT(' ');
    END;

    PROCEDURE GetTryOutSuccProjectNumber@1000000040(TryOutNo@1000000001 : Code[20]) : Text[250];
    VAR
      TryoutSuccessor@1000000000 : Record 11012761;
      JobRec@1000000002 : Record 11072003;
      JobNo@1000000003 : Text[1024];
    BEGIN
      TryoutSuccessor.SETRANGE("Try-out No.",TryOutNo);
      TryoutSuccessor.SETFILTER("Project No.",'<>%1','');
      IF TryoutSuccessor.FINDFIRST THEN BEGIN
        JobNo          := TryoutSuccessor."Project No.";
        WHILE TryoutSuccessor.NEXT <> 0 DO
          JobNo := JobNo + ', ' + TryoutSuccessor."Project No.";
        EXIT(JobNo);
      END ELSE
        EXIT(' ');
    END;

    PROCEDURE GetEstimates@1000000005(TryOutNo@1000000001 : Code[20]) EstimateList : Text[250];
    VAR
      TryoutSuccessor@1000000000 : Record 11012761;
      JobRec@1000000002 : Record 11072003;
    BEGIN
      TryoutSuccessor.SETRANGE( "Try-out No."     ,  TryOutNo);
      //youtSuccessor.SETFILTER("Project No."     , '<>%1','');
      TryoutSuccessor.SETRANGE( "Leading Estimate",  TRUE    );
      IF TryoutSuccessor.FINDFIRST THEN BEGIN
        EstimateList := TryoutSuccessor."Estimate No.";
        WHILE TryoutSuccessor.NEXT <> 0 DO
          EstimateList := EstimateList + ', ' + TryoutSuccessor."Estimate No.";
        EXIT;
      END ELSE
        EXIT;
    END;

    PROCEDURE GetFeature@1000000044(TryOutQuoteNo@1000000000 : Code[20];Feature@1000000002 : Text[30]) : Text[30];
    VAR
      ContactFeatureType@1000000001 : Record 11012753;
    BEGIN
      ContactFeatureType.SETRANGE("Relation Type",ContactFeatureType."Relation Type"::"Try-out Quote");
      ContactFeatureType.SETRANGE(Code, TryOutQuoteNo);
      ContactFeatureType.SETRANGE("Feature Group",Feature);
      IF ContactFeatureType.FINDFIRST THEN BEGIN
        EXIT(ContactFeatureType.Feature);
      END ELSE
        EXIT(' ');
    END;

    PROCEDURE GetFeatureDec@1000000014(TryOutQuoteNo@1000000000 : Code[20];Feature@1000000002 : Text[30]) : Decimal;
    VAR
      ContactFeatureType@1000000001 : Record 11012753;
    BEGIN
      ContactFeatureType.SETRANGE("Relation Type",ContactFeatureType."Relation Type"::"Try-out Quote");
      ContactFeatureType.SETRANGE(Code, TryOutQuoteNo);
      ContactFeatureType.SETRANGE("Feature Group",Feature);
      IF ContactFeatureType.FINDFIRST THEN BEGIN
        EXIT(ContactFeatureType.Value);
      END ELSE
        EXIT(0);
    END;

    PROCEDURE GetMaintenancePeriod@1000000053(TryOutQuoteNo@1000000000 : Code[20]) : Text[30];
    VAR
      ContactFeatureType@1000000001 : Record 11012753;
    BEGIN
      ContactFeatureType.SETRANGE("Relation Type",ContactFeatureType."Relation Type"::"Try-out Quote");
      ContactFeatureType.SETRANGE(Code, TryOutQuoteNo);
      ContactFeatureType.SETRANGE("Feature Group",'Maintenance period');
      IF ContactFeatureType.FINDFIRST THEN BEGIN
        EXIT(ContactFeatureType.Feature);
      END ELSE
        EXIT(' ');
    END;

    PROCEDURE CalculateCostPriceData@1000000056(TryOutQte@1000000001 : Code[20];EstimateNo@1000000018 : Code[20]);
    VAR
      TryoutSuccessor@1000000000 : Record 11012761;
      SubEstRec@1000000002 : Record 11012152;
      CopyRec@1000000003 : Record 11012153;
      SubEstPart@1000000004 : Record 11012153;
      Estimate@1000000005 : Record 11012151;
      PartSalesHours@1000000006 : Decimal;
      PartSalesAmount@1000000007 : Decimal;
      LaborDec@1000000008 : Decimal;
      Matdec@1000000009 : Decimal;
      SubcDec@1000000010 : Decimal;
      PlantDec@1000000011 : Decimal;
      PartCostHours@1000000012 : Decimal;
      CumLaborDec@1000000013 : Decimal;
      CumMatDec@1000000014 : Decimal;
      CumSubcDec@1000000015 : Decimal;
      CumPlantDec@1000000016 : Decimal;
      CalculatedCostPrice@1000000017 : Decimal;
    BEGIN
      IF COPYSTR(EstimateNo, 1, 1) = '[' THEN
        TryoutSuccessor.SETFILTER("Estimate No."    , '*V'             )
      ELSE
        TryoutSuccessor.SETFILTER("Estimate No."    ,  EstimateNo + 'V');

      //PartCostAmount := CumLaborDec + CumMatDec + CumSubcDec + CumPlantDec;
      TryoutSuccessor.SETRANGE( "Try-out Quote"   ,  TryOutQte);

      IF TryoutSuccessor.FINDFIRST THEN BEGIN        //calculatienr.
        SubEstPart.SETRANGE("Estimate No.",TryoutSuccessor."Estimate No.");
        SubEstPart.SETRANGE("Sub-Estimate No.",'100.000', '199.999');
        SubEstPart.SETRANGE("Part Group",'G');
        SubEstPart.SETRANGE( Part,'00.000.000');

        IF SubEstPart.FINDFIRST THEN BEGIN
         REPEAT //jvl
          Estimate.GET(TryoutSuccessor."Estimate No.");

          IF NOT Estimate.Finished THEN EXIT;

          CopyRec := SubEstPart;
          IF Estimate."No." <> CopyRec."Estimate No." THEN
            Estimate.GET(CopyRec."Estimate No.");
          Estimate.CALCFIELDS("Copied from Estimate Descr.");
          CopyRec."Estimate No." := Estimate."Copied from Cost Estimate";
          IF NOT CopyRec.FIND THEN
            CopyRec.INIT;

          CASE SubEstPart.Level OF
            0:BEGIN
                SubEstPart.CALCFIELDS("Estimated Total","Hours Total","Cum. Estimated Total");

                //PartSalesPrice := "Estimated Total";
                PartSalesHours  := SubEstPart."Hours Total";
                PartSalesAmount := SubEstPart."Cum. Estimated Total";

                CopyRec.CALCFIELDS("Labor Total", "Material Total",
                           "Subcontracting Total", "Plant Total", "Hours Total");
                LaborDec      := CopyRec."Labor Total";
                Matdec        := CopyRec."Material Total";
                SubcDec       := CopyRec."Subcontracting Total";
                PlantDec      := CopyRec."Plant Total";
                PartCostHours := CopyRec."Hours Total";


                CopyRec.CALCFIELDS("Cum. Labor Total", "Cum. Material Total",
                           "Cum. Subcontracting Total", "Cum. Plant Total");

                CumLaborDec := CopyRec."Cum. Labor Total";
                CumMatDec   := CopyRec."Cum. Material Total";
                CumSubcDec  := CopyRec."Cum. Subcontracting Total";
                CumPlantDec := CopyRec."Cum. Plant Total";

                //rtCostAmount      := CumLaborDec + CumMatDec + CumSubcDec + CumPlantDec;
                CalculatedCostPrice := CopyRec."Calculated Price";

                // test JvL
                PartCostAmount      += CalculatedCostPrice;
                // test JvL

                Margin += SubEstPart.GetMargin(SubEstPart."Offer Price",CalculatedCostPrice);
                Markup += SubEstPart.GetMarkup(SubEstPart."Offer Price",CalculatedCostPrice);
              END;
          END;
         UNTIL SubEstPart.NEXT = 0; //JvL
        END;
      END;
    END;

    PROCEDURE GetOnderhoudsbedrag@1000000018(TryOutQte@1000000005 : Code[20]) : Decimal;
    VAR
      TryoutSuccessor@1000000004 : Record 11012761;
      SubEstRec@1000000003 : Record 11012152;
      CopyRec@1000000002 : Record 11012153;
      SubEstPart@1000000001 : Record 11012153;
      Estimate@1000000000 : Record 11012151;
    BEGIN
      //deelcalc met onderdeel groep S aanbiedingsprijs
      TryoutSuccessor.SETRANGE("Try-out Quote",TryOutQte);
      TryoutSuccessor.SETFILTER("Estimate No.",'*V');
      TryoutSuccessor.SETRANGE("Leading Estimate",FALSE);
      IF TryoutSuccessor.FINDFIRST THEN BEGIN        //calculatienr.
        SubEstPart.SETRANGE("Estimate No.",TryoutSuccessor."Estimate No.");
        SubEstPart.SETFILTER("Part Group",'S');
        IF SubEstPart.FINDFIRST THEN BEGIN
          Estimate.GET(TryoutSuccessor."Estimate No.");
          CopyRec := SubEstPart;
          IF Estimate."No." <> CopyRec."Estimate No." THEN
            Estimate.GET(CopyRec."Estimate No.");
          Estimate.CALCFIELDS("Copied from Estimate Descr.");
          CopyRec."Estimate No." := Estimate."Copied from Cost Estimate";
          IF NOT CopyRec.FIND THEN
            CopyRec.INIT;
          EXIT(SubEstPart."Offer Price");
        END;
      END;
    END;

    PROCEDURE GetBedragStelpost@1000000025(TryOutQte@1000000000 : Code[20]) : Decimal;
    VAR
      EstimateLine@1000000001 : Record 11012154;
      TryoutSuccessor@1000000002 : Record 11012761;
      Stelpost@1000000003 : Decimal;
    BEGIN
      //Regelstatus PS (PM) aanbiedingsprijs
      TryoutSuccessor.SETRANGE("Try-out Quote",TryOutQte);
      TryoutSuccessor.SETFILTER("Estimate No.",'*V');
      TryoutSuccessor.SETRANGE("Leading Estimate",FALSE);
      IF TryoutSuccessor.FINDFIRST THEN BEGIN        //calculatienr.
        EstimateLine.SETRANGE("Estimate No.",TryoutSuccessor."Estimate No.");
        EstimateLine.SETFILTER("Line Status",'PS');
        IF EstimateLine.FINDSET THEN BEGIN
          REPEAT
            Stelpost := Stelpost + EstimateLine.Amount;
          UNTIL EstimateLine.NEXT = 0;
        END;
        EXIT(Stelpost);
      END ELSE
        EXIT(0);
    END;

    PROCEDURE GetEmployeeName@1000000039(EmployeeCode@1000000000 : Code[20]) : Text[50];
    VAR
      EmployeeRec@1000000001 : Record 5200;
    BEGIN
      IF EmployeeCode = '' THEN
        EXIT('');

      EmployeeRec.GET(EmployeeCode);
      EXIT(EmployeeRec."Full Name");
    END;

    PROCEDURE GetCountryCode@1000000003(CustomerNo@1000000000 : Code[20]) : Text[30];
    VAR
      Customer@1000000001 : Record 5050;
    BEGIN
      IF Customer.GET(CustomerNo) THEN
        EXIT(Customer."Country/Region Code");
    END;

    PROCEDURE GetABCD@1000000000(ContactNo@1000000000 : Code[20]) : Text[1];
    VAR
      ContactFeatureType@1000000001 : Record 11012753;
    BEGIN
      ContactFeatureType.SETRANGE( "Relation Type",  0            );
      ContactFeatureType.SETFILTER( Code          ,  ContactNo    );
      ContactFeatureType.SETRANGE( "Feature Group", 'ABCD Current');
      IF NOT ContactFeatureType.FINDFIRST THEN
        EXIT('')
      ELSE
        EXIT(COPYSTR(ContactFeatureType.Feature, 1, 1));
    END;

    PROCEDURE SetOrderInRange@1100485008(ISortRange@1100485000 : Text[30];IIndexRange1@1100485005 : Text[30];IIndexOrder1@1100485006 : Option;IIndexRange2@1100485008 : Text[30];IIndexOrder2@1100485007 : Option;IIndexRange3@1100485010 : Text[30];IIndexOrder3@1100485009 : Option;IHeader@1100485011 : Boolean);
    VAR
      RangeName1@1100485001 : Text[30];
      RangeName2@1100485002 : Text[30];
      RangeName3@1100485003 : Text[30];
      HeaderInt@1100485004 : Integer;
    BEGIN
      {
      //**4PS.n
      IF IIndexRange1 <> '' THEN BEGIN
        RangeName1 := Text11012001;
        xlSheet.Names.Add(RangeName1,'=' + IIndexRange1);
      END;
      IF IIndexRange2 <> '' THEN BEGIN
        RangeName2 := Text11012002;
        xlSheet.Names.Add(RangeName2,'=' + IIndexRange2);
      END;
      IF IIndexRange3 <> '' THEN BEGIN
        RangeName3 := Text11012003;
        xlSheet.Names.Add(RangeName3,'=' + IIndexRange3);
      END;

      IIndexOrder1 := IIndexOrder1 + 1; //IIndexOrder1 += 1;
      IIndexOrder2 := IIndexOrder2 + 1; //IIndexOrder2 += 1;
      IIndexOrder3 := IIndexOrder3 + 1; //IIndexOrder3 += 1;

      CASE IHeader OF
        TRUE : HeaderInt := 1;
        FALSE: HeaderInt := 0;
      END;

      xlSheet.Range(ISortRange).Sort(RangeName1,IIndexOrder1,0,RangeName2,IIndexOrder2,RangeName3,IIndexOrder3,HeaderInt);
      }
    END;

    PROCEDURE GetJobQuoteAmount@1000000009(JobNo@1000000000 : Code[20]) PrognosisAmount : Decimal;
    VAR
      Prognosis@1000000001 : Record 11012034;
    BEGIN
      Prognosis.SETRANGE("Project No."    , JobNo);
      Prognosis.SETRANGE("Prognosis Level", Prognosis."Prognosis Level"::Rough    );
      IF Prognosis.FINDLAST THEN BEGIN
        PrognosisAmount += Prognosis."Rough Prognosis Total Revenues";
      END;

      Margin := 0;
      Markup := 0;
    END;

    PROCEDURE GetJobQuoteCost@1000000011(JobNo@1000000000 : Code[20]) PrognosisCost : Decimal;
    VAR
      Prognosis@1000000001 : Record 11012034;
      JobAmount@1000000002 : Decimal;
    BEGIN
      Prognosis.SETRANGE("Project No."    , JobNo);
      Prognosis.SETRANGE("Prognosis Level", Prognosis."Prognosis Level"::Rough    );
      IF Prognosis.FINDSET(FALSE, FALSE) THEN REPEAT
        PrognosisCost += Prognosis."Rough Prognosis Total Cost";
        JobAmount     += Prognosis."Rough Prognosis Total Revenues";
      UNTIL Prognosis.NEXT = 0;

      IF JobAmount <> 0 THEN
        Margin       := ROUND((JobAmount - PrognosisCost) / JobAmount     , 0.01);

      IF PrognosisCost <> 0 THEN
        Markup       := ROUND((JobAmount - PrognosisCost) / PrognosisCost , 0.01);

      MarginAmount := JobAmount - PrognosisCost;
    END;

    PROCEDURE GetPath@1000000004(PathCode@1000000000 : Code[10]);
    VAR
      lStandardText@1000000001 : Record 7;
      lExtendedTextLine@1000000002 : Record 280;
      i@1000000003 : Integer;
    BEGIN
      //Tabelnaam,Nr.,Taal,Tekstnr.,Regelnr.
      IF NOT lStandardText.GET(PathCode) THEN
        ERROR(Text005)
      ELSE BEGIN
         lExtendedTextLine.SETRANGE("Table Name", lExtendedTextLine."Table Name"::"Standard Text");
         lExtendedTextLine.SETRANGE("No.",PathCode);
         IF lExtendedTextLine.FINDSET THEN BEGIN
           REPEAT
             i := i + 1;
             IF i < 3 THEN
               PathName += lExtendedTextLine.Text;
           UNTIL (lExtendedTextLine.NEXT = 0) OR (i = 3);
         END;
      END;
    END;

    PROCEDURE GetHoursBudget@1000000010(tryoutQuoteNo@1000000000 : Code[20]) : Text[50];
    VAR
      Kenmerken@1000000001 : Record 11012753;
    BEGIN
      Kenmerken.SETRANGE("Relation Type", Kenmerken."Relation Type"::"Try-out Quote");
      Kenmerken.SETRANGE(Code, tryoutQuoteNo);
      //Kenmerken.SETRANGE("Feature Group", 'Ureninschatting'); //29062011.GB.o
      Kenmerken.SETRANGE("Feature Group", '100% offerte');     //29062011.GB.n
      IF Kenmerken.FINDFIRST THEN BEGIN
        IF Kenmerken.Feature <> '' THEN
          EXIT(Kenmerken.Feature)
        ELSE
          EXIT(' ');
      END ELSE
        EXIT(' ');
    END;

    PROCEDURE CalcBudgetExt@1000000019(JobNo@1000000000 : Code[20];ExtContr@1000000001 : Code[20]) : Decimal;
    VAR
      BudgetLineRec@1000000002 : Record 11012001;
    BEGIN
      BudgetLineRec.SETRANGE("Project No.", JobNo);
      BudgetLineRec.SETRANGE("Extension Contract", ExtContr);
      IF BudgetLineRec.FINDSET THEN BEGIN
        BudgetLineRec.CALCSUMS(Amount);
        EXIT(BudgetLineRec.Amount);
      END ELSE
        EXIT(0);
    END;

    EVENT xlSheet1@1000000001::SelectionChange@1543(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet1@1000000001::BeforeDoubleClick@1537(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet1@1000000001::BeforeRightClick@1534(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet1@1000000001::Activate@304();
    BEGIN
    END;

    EVENT xlSheet1@1000000001::Deactivate@1530();
    BEGIN
    END;

    EVENT xlSheet1@1000000001::Calculate@279();
    BEGIN
    END;

    EVENT xlSheet1@1000000001::Change@1545(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet1@1000000001::FollowHyperlink@1470(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlSheet1@1000000001::PivotTableUpdate@2156(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlSheet1@1000000001::PivotTableAfterValueChange@2886(TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet1@1000000001::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet1@1000000001::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet1@1000000001::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlSheet1@1000000001::PivotTableChangeSync@2894(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook1@1000000002::Open@1923();
    BEGIN
    END;

    EVENT xlBook1@1000000002::Activate@304();
    BEGIN
    END;

    EVENT xlBook1@1000000002::Deactivate@1530();
    BEGIN
    END;

    EVENT xlBook1@1000000002::BeforeClose@1546(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::BeforeSave@1547(SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::BeforePrint@1549(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::NewSheet@1550(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook1@1000000002::AddinInstall@1552();
    BEGIN
    END;

    EVENT xlBook1@1000000002::AddinUninstall@1553();
    BEGIN
    END;

    EVENT xlBook1@1000000002::WindowResize@1554(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook1@1000000002::WindowActivate@1556(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook1@1000000002::WindowDeactivate@1557(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook1@1000000002::PivotTableCloseConnection@2158(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook1@1000000002::PivotTableOpenConnection@2159(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook1@1000000002::Sync@2266(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook1@1000000002::BeforeXmlImport@2283(Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::AfterXmlImport@2285(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook1@1000000002::BeforeXmlExport@2287(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::AfterXmlExport@2288(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook1@1000000002::RowsetComplete@2610(Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook1@1000000002::SheetPivotTableChangeSync@2899(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook1@1000000002::AfterSave@2900(Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook1@1000000002::NewChart@2901(Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT XlApp1@1000000003::NewWorkbook@1565(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookOpen@1567(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookActivate@1568(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookDeactivate@1569(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookBeforeClose@1570(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookBeforeSave@1571(Wb@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookBeforePrint@1572(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookNewSheet@1573(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookAddinInstall@1574(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookAddinUninstall@1575(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WindowResize@1554(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WindowActivate@1556(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WindowDeactivate@1557(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookPivotTableCloseConnection@2160(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookPivotTableOpenConnection@2161(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookSync@2289(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookBeforeXmlImport@2290(Wb@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookAfterXmlImport@2291(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookBeforeXmlExport@2292(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookAfterXmlExport@2293(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookRowsetComplete@2611(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::AfterCalculate@2612();
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlApp1@1000000003::ProtectedViewWindowOpen@2903(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp1@1000000003::ProtectedViewWindowBeforeEdit@2905(Pvw@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::ProtectedViewWindowBeforeClose@2906(Pvw@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";Reason@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::ProtectedViewWindowResize@2908(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp1@1000000003::ProtectedViewWindowActivate@2909(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp1@1000000003::ProtectedViewWindowDeactivate@2910(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookAfterSave@2911(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlApp1@1000000003::WorkbookNewChart@2912(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    BEGIN
    {
       1 = Status  traject                                  2 = Status Trajectofferte       3 = Traject
       4 = Hoofd traject                                    5 = Omschrijving                6 = Bestek
       7 = Offerte                                          8 = Klant                       9 = ABDC
      10 = Eindklant                                        11 = ABDC                       12 = Land van klant
      13 = Verwachtte orderdatum                            14 = Orderdatum                 15 = Verwachtte begindatum
      16 = Verw einddatum                                   17 = Planningsreservering       18 = Behandelaar
      19 = Accountmanager                                   20 = Projectmanager             21 = Projectnummers
      22 = Tellende Calculatie(s)                           23 = Offerte bedrag             24 = kostprijs
      25 = Marge                                            26 = Markup                     27 = Kans
      28 = Offerte bedrag gewogen                           29 = Kostprijs gewogen          30 = Marge gewogen
      31 = OH jaren                                         32 = OH Bedrag per jaar         33 = Stelpost Bedrag
      34 = Offer type                                       35 = Type of Work               36 = Role Peek
      37 = Category                                         38 = Products 1                 39 = Products 1 Amount
      40 = Products 2                                       41 = Products 2 Amount          42 = Kosten plaats
      43 = Tellende offerte                                 44 = Aanbiedingsbedrag          45 = Scoringskans
    }
    END.
  }
  RDLDATA
  {
  }
}

