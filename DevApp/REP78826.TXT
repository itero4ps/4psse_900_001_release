OBJECT Report 78826 Import werkrapport PEEK
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00.RISA.OK;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   GetPath('PWERKRAPPI');
                   //GetPath('PWERKTEST');
                 END;

    OnPreReport=BEGIN
                  DynniqSetup.GET;
                END;

    OnPostReport=BEGIN
                   IF (ErrCounter <> 0) AND (SuccCounter <> 0) THEN
                     MESSAGE(BothText, SuccCounter,ErrCounter);
                   IF (SuccCounter <> 0) AND (ErrCounter = 0) THEN
                     MESSAGE(SuccText, SuccCounter);
                   IF (SuccCounter = 0) AND (ErrCounter <> 0) THEN
                     MESSAGE(ErrText, ErrCounter);
                   IF (SuccCounter = 0) AND (ErrCounter = 0) THEN
                     MESSAGE(NoFiles);
                 END;

  }
  DATASET
  {
    { 1100525000;;DataItem;                  ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=VAR
                                  Counter@1100525000 : Integer;
                                  FileCount@1000000000 : Integer;
                                BEGIN
                                  SuccCounter := 0;
                                  ErrCounter := 0;

                                  DirectoryInfo := DirectoryInfo.DirectoryInfo(PathName);
                                  DirectoryArray := DirectoryInfo.GetFiles('*.XLS*');
                                  FileCount := DirectoryInfo.GetFiles('*.XLS*').Length;
                                  DirectoryEnumerator := DirectoryArray.GetEnumerator;
                                  WHILE DirectoryEnumerator.MoveNext DO BEGIN
                                    FileInfo := DirectoryEnumerator.Current;
                                    Counter += 1;

                                    IF Counter = 1 THEN
                                      WDialog.OPEN(STRSUBSTNO(DialogTxt1,FileCount,DialogTxt1))
                                    ELSE
                                      WDialog.OPEN(STRSUBSTNO(DialogTxt2,FileCount,DialogTxt1));
                                    IF CheckOrderNo(FileInfo.Name) THEN BEGIN
                                      ItemCounter := 0;
                                      ReadFile(FileInfo.FullName,FileInfo.Name);
                                      ExportDataFunc; //TODO
                                      IF FileErrCounter > 0 THEN BEGIN
                                        MoveFile(FileInfo.Name,FileInfo.DirectoryName + '\' + NotProcessed,FileInfo.DirectoryName + '\' ,FALSE);
                                        ModifyFile((FileInfo.DirectoryName + '\' + NotProcessed + FileInfo.Name),'Werkrapport');
                                        ErrCounter += 1;
                                      END ELSE BEGIN
                                        SuccCounter += 1;
                                        MoveFile(FileInfo.Name,FileInfo.DirectoryName + '\' + Processed,FileInfo.DirectoryName + '\' ,FALSE);
                                      END;
                                    END ELSE BEGIN
                                    //checken of het een projectwerkbon betreft
                                      IF CheckProjectNo(FileInfo.Name) THEN BEGIN
                                        SuccPCounter += 1;
                                        ReadFileProj(FileInfo.FullName,FileInfo.Name);
                                        ExportPData(FileInfo.Name);
                                        IF FileErrCounter > 0 THEN BEGIN
                                          MoveFile(FileInfo.Name,FileInfo.DirectoryName + '\' + NotProcessed,FileInfo.DirectoryName + '\' ,FALSE);
                                          ErrCounter += 1;
                                        END ELSE BEGIN
                                          SuccCounter += 1;
                                          MoveFile(FileInfo.Name,FileInfo.DirectoryName + '\' + Processed,FileInfo.DirectoryName + '\' ,FALSE);
                                        END;
                                      END ELSE BEGIN
                                        IF ShowMessage THEN
                                          MESSAGE('Niet mogelijk om bestand in te lezen');
                                        MoveFile(FileInfo.Name,FileInfo.DirectoryName + '\' + NotProcessed,FileInfo.DirectoryName + '\',FALSE);
                                        ErrCounter += 1;
                                      END;
                                    END;
                                    Counter := Counter - 1;
                                    WDialog.CLOSE;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525001;0;Container;
                  ContainerType=ContentArea }

      { 1100525000;1;Group  ;
                  Name=Options;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=ShowMessage;
                  CaptionML=ENU=Show messages;
                  SourceExpr=ShowMessage }

      { 1100525003;2;Field  ;
                  Name=PWERKRAPPI;
                  CaptionML=ENU=Report code;
                  SourceExpr='PWERKRAPPI' }

      { 1100525004;2;Field  ;
                  Name=PathName;
                  CaptionML=ENU=Read from folder;
                  SourceExpr=PathName }

      { 1100525005;2;Field  ;
                  Name=Processed;
                  CaptionML=ENU=Folder processed;
                  SourceExpr=Processed }

      { 1100525006;2;Field  ;
                  Name=NotProcessed;
                  CaptionML=ENU=Folder not processed;
                  SourceExpr=NotProcessed }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      JobSetup@1100525038 : Record 315;
      ExcelBuf@1100525037 : TEMPORARY Record 370;
      RecFile@1100525036 : Record 2000000022;
      HourRegLine@1100525035 : Record 11012039;
      ItemJournalLine@1100525034 : Record 83;
      TimeLineDateArr@1100525032 : ARRAY [10] OF Text[20];
      TimeLineStartArr@1100525031 : ARRAY [10] OF Text[20];
      TimeLineEndArr@1100525030 : ARRAY [10] OF Text[20];
      TimeLineKdArr@1100525029 : ARRAY [10] OF Text[20];
      TimeLineLcArr@1100525028 : ARRAY [10] OF Text[20];
      TimeLineCalcArr@1100525027 : ARRAY [10] OF Boolean;
      EmplNo@1100525026 : Code[20];
      DatetimeMgt@1100525025 : Codeunit 11020218;
      ExtDocManagement@1100525024 : Codeunit 11012403;
      ShowMessage@1100525023 : Boolean;
      MatLineItemNoArr@1100525022 : ARRAY [10] OF Text[20];
      MatLineQuantArr@1100525021 : ARRAY [10] OF Text[20];
      MatLineUOMArr@1100525020 : ARRAY [10] OF Text[20];
      MatLineMagArr@1100525019 : ARRAY [10] OF Text[20];
      MatLineCalcArr@1100525018 : ARRAY [10] OF Boolean;
      ItemCounter@1100525017 : Integer;
      GDocNo@1100525016 : Code[20];
      NoSeriesMgt@1100525015 : Codeunit 396;
      ItemJnlBatch@1100525014 : Record 233;
      SuccCounter@1100525009 : Integer;
      SuccPCounter@1100525008 : Integer;
      ErrCounter@1100525007 : Integer;
      FileErrCounter@1100525006 : Integer;
      FileErrMessArr@1100525005 : ARRAY [50,3,10] OF Text[50];
      WDialog@1100525004 : Dialog;
      int@1100525003 : Integer;
      PathName@1100525002 : Text[250];
      Processed@1100525001 : Text[50];
      NotProcessed@1100525000 : Text[50];
      BothText@1100525049 : TextConst;
      ErrText@1100525048 : TextConst;
      SuccText@1100525047 : TextConst;
      NoFiles@1100525046 : TextConst;
      VervolgTxt@1100525045 : TextConst;
      ErrItemNo@1100525044 : TextConst;
      ErrCostObj@1100525043 : TextConst;
      ErrWageComp@1100525042 : TextConst;
      DialogTxt1@1100525041 : TextConst;
      DialogTxt2@1100525040 : TextConst;
      Text005@1100525039 : TextConst;
      XlApp@1100525050 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlBook@1100525013 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
      xlSheet@1100525012 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      XlHelper@1100525051 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper";
      ExcelEnumeration@1100525011 : Codeunit 11012375;
      TypeMissing@1100525010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object" RUNONCLIENT;
      DirectoryInfo@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo" RUNONCLIENT;
      DirectoryArray@1000000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;
      DirectoryEnumerator@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator" RUNONCLIENT;
      FileInfo@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileInfo" RUNONCLIENT;
      Path@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      XlWrkBkReader@1100525052 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookReader" RUNONCLIENT;
      XlWrkShtReader@1100525033 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader" RUNONCLIENT;
      XlWrkBkWriter@1100525054 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookWriter" RUNONCLIENT;
      XlWrkShtWriter@1100525053 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter" RUNONCLIENT;
      Text035@1100525055 : TextConst 'ENU=The operation was canceled.';
      DynniqSetup@1100525056 : Record 50001;

    PROCEDURE CheckOrderNo@1000000000(FileName@1000000001 : Text[100]) : Boolean;
    VAR
      TempOrderNo@1000000002 : Code[20];
      lServOrder@1000000003 : Record 11012823;
    BEGIN
      TempOrderNo := COPYSTR(FileName,1,STRPOS(FileName,'.xls'));
      int := STRLEN(TempOrderNo);
      WHILE int > 0 DO BEGIN
        IF lServOrder.GET(COPYSTR(TempOrderNo,1,int)) THEN
          EXIT(TRUE);
        int -= 1;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ReadFile@1000000010(FilePath@1000000001 : Text[250];FileName@1000000000 : Text[100]);
    VAR
      TempOrderNo@1000000003 : Code[20];
      lServOrder@1000000002 : Record 11012823;
    BEGIN
      TempOrderNo := COPYSTR(FileName,1,int); //19082010 GB
      lServOrder.GET(TempOrderNo);

      OpenBook(FilePath,'Werkrapport');
      //ExcelBuf.UnProtectSheet('Werkrapport','');
      ReadSheet;
      ExcelBuf.RESET;
    END;

    PROCEDURE ReadFileProj@1000000013(FilePath@1000000001 : Text[250];FileName@1000000000 : Text[100]);
    VAR
      TempOrderNo@1000000003 : Code[20];
      lServOrder@1000000002 : Record 11012823;
    BEGIN
      //TempOrderNo := COPYSTR(FileName,1,int); //19082010 GB
      //lServOrder.GET(TempOrderNo);
      ExcelBuf.RESET;
      ExcelBuf.DELETEALL;
      OpenBook(FilePath,'Werkrapport');
      //ExcelBuf.UnProtectSheet('Werkrapport','');
      ReadSheet;
      ExcelBuf.RESET;
    END;

    PROCEDURE ExportDataFunc@1000000017() : Integer;
    VAR
      lOrderNo@1000000000 : Code[20];
      lServContr@1000000001 : Code[20];
      Cause@1000000002 : Text[250];
      Solution@1000000003 : Text[250];
      i@1000000004 : Integer;
      x@1000000005 : Integer;
      lDate@1000000006 : Date;
      lStartTime@1000000007 : Time;
      lEndTime@1000000008 : Time;
      Counter@1000000009 : Integer;
      lDec@1000000010 : Decimal;
      lItemNo@1000000011 : Code[20];
      lQuant@1000000012 : Decimal;
      lUOM@1000000013 : Code[20];
      lMag@1000000014 : Code[20];
      lOrderRec@1000000015 : Record 11012823;
    BEGIN
      FileErrCounter := 0;
      CLEAR(FileErrMessArr);
      ExcelBuf.RESET;
      CLEAR(TimeLineDateArr);
      CLEAR(MatLineItemNoArr);

      lOrderNo :=   ReadExcelField(4,6);
      lServContr := ReadExcelField(4,2);
      Cause :=      ReadExcelField(27,1) + ' ' + ReadExcelField(28,1) + ' ' + ReadExcelField(29,1);
      Solution :=   ReadExcelField(31,1) + ' ' + ReadExcelField(32,1) + ' ' + ReadExcelField(33,1);
      EmplNo :=   DELCHR(ReadExcelField(13,4),'=','.,''''');

      //Read timelines and material lines
      FOR i := 1 TO 10 DO BEGIN
        //Inlezen uren
        IF ReadExcelField(38 + i,1) <> '' THEN BEGIN
          FillTimeLine(i);
        END;
        //Inlezen materialen (51+ ABCD F(kolom 12346))
        IF ReadExcelField(50 + i,1) <> '' THEN
          FillMaterialLine(i);
      END;

      IF FileErrCounter > 0 THEN
        EXIT;

      lOrderRec.GET(lOrderNo);
      IF EmplNo = lOrderRec."Employee No." THEN BEGIN //alleen hoofdmonteur
        FillLogMoment(lOrderRec,ReadExcelField(36,2),ReadExcelField(36,3),DynniqSetup."Ref. Point On-Site");
        FillLogMoment(lOrderRec,ReadExcelField(63,2),ReadExcelField(63,3),DynniqSetup."Ref. Point Sign In");
        FillLogMoment(lOrderRec,ReadExcelField(39,1),ReadExcelField(39,2),DynniqSetup."Ref. Point Techn. at Work");
        FillLogMoment(lOrderRec,ReadExcelField(36,6),ReadExcelField(36,7),DynniqSetup."Ref. Point Func. Restored");
        FillLogMoment(lOrderRec,ReadExcelField(66,2),ReadExcelField(66,3),DynniqSetup."Ref. Point Sign Out");
        AddServiceText(lOrderNo, Cause, Solution);
      END;
      CheckVervolg(lOrderNo);

      FOR x := 1 TO 10 DO BEGIN
        IF TimeLineDateArr[x] <> '' THEN
          IF (EVALUATE(lDate,TimeLineDateArr[x])) THEN
            BEGIN
              EVALUATE(lStartTime,TimeLineStartArr[x]);
              EVALUATE(lEndTime,TimeLineEndArr[x]);
              IF ValAndInsertTimeLine(lOrderNo, lServContr, TimeLineLcArr[x], TimeLineKdArr[x], lDate, lStartTime,
                lEndTime, TimeLineCalcArr[x]) THEN
                Counter := Counter + 1;
            END;
      END;

      FOR x := 1 TO 10 DO BEGIN
        IF MatLineItemNoArr[x] <> '' THEN
          BEGIN
            lItemNo := MatLineItemNoArr[x];
            EVALUATE(lQuant, MatLineQuantArr[x]);
            EVALUATE(lUOM, MatLineUOMArr[x]);
            EVALUATE(lMag, MatLineMagArr[x]);
            IF ValAndInsertItemLine(lItemNo, lQuant, lUOM, lMag,lOrderNo,'AMO CS',MatLineCalcArr[x]) THEN
              ItemCounter := ItemCounter + 1;
          END;
      END;

      CheckInternalText(lOrderNo);

      EXIT(Counter);
    END;

    PROCEDURE ExportPData@1000000014(FileName@1000000019 : Text[50]) : Integer;
    VAR
      lOrderNo@1000000000 : Code[20];
      lServContr@1000000001 : Code[20];
      Cause@1000000002 : Text[250];
      Solution@1000000003 : Text[250];
      i@1000000004 : Integer;
      x@1000000005 : Integer;
      lDate@1000000006 : Date;
      lStartTime@1000000007 : Time;
      lEndTime@1000000008 : Time;
      Counter@1000000009 : Integer;
      lDec@1000000010 : Decimal;
      lItemNo@1000000011 : Code[20];
      lQuant@1000000012 : Decimal;
      lUOM@1000000013 : Code[20];
      lMag@1000000014 : Code[20];
      lOrderRec@1000000015 : Record 11012823;
      lProjectNo@1000000016 : Code[20];
      lElement@1000000017 : Code[20];
      lJobRec@1000000018 : Record 11072003;
      lProjElement@1000000020 : Record 11012010;
      Temp@1000000021 : Text[30];
      Temp2@1000000022 : Text[30];
      lvJobRec@1000000023 : Record 11072003;
    BEGIN
      FileErrCounter := 0;
      CLEAR(FileErrMessArr);
      ExcelBuf.RESET;
      CLEAR(TimeLineDateArr);
      CLEAR(MatLineItemNoArr);

      lProjectNo := ReadExcelField(4,2);
      IF NOT lvJobRec.GET(lProjectNo) THEN BEGIN
        FileErrCounter += 1;
        EXIT;
      END;

      lElement   := ReadExcelField(4,6);

      CASE STRLEN(lElement) OF
        8: lElement   := STRSUBSTNO('%1.%2.%3', COPYSTR(lElement, 1, 2), COPYSTR(lElement, 3, 3), COPYSTR(lElement, 6, 3));
        9: lElement   := STRSUBSTNO('%1.%2.%3', COPYSTR(lElement, 1, 3), COPYSTR(lElement, 4, 3), COPYSTR(lElement, 7, 3));
      END;

      IF NOT lProjElement.GET(lProjectNo, lElement) THEN
        FileErrCounter += 1;

      //EmplNo :=     STRSUBSTNO('0%1',DELCHR(ReadExcelField(13,4),'=','.,'));
      IF NOT GetEmplNoFromFileName(FileName, EmplNo) THEN
        FileErrCounter += 1;

      IF FileErrCounter > 0 THEN
        EXIT;

      FOR i := 1 TO 10 DO BEGIN
        //Inlezen uren
        IF ReadExcelField(38 + i,1) <> '' THEN BEGIN
          FillTimeLine(i);
        END;
      END;

      IF FileErrCounter > 0 THEN
        EXIT;

      lJobRec.GET(lProjectNo);
      FOR x := 1 TO 10 DO BEGIN
        IF TimeLineDateArr[x] <> '' THEN
          IF (EVALUATE(lDate,TimeLineDateArr[x])) THEN
            BEGIN
              EVALUATE(lStartTime,TimeLineStartArr[x]);
              EVALUATE(lEndTime,TimeLineEndArr[x]);
              IF ValAndInsertProjTimeLine(lProjectNo, lElement, TimeLineLcArr[x], TimeLineKdArr[x], lDate, lStartTime,
                lEndTime, TimeLineCalcArr[x]) THEN
                Counter := Counter + 1;
            END;
      END;

      EXIT(Counter);
    END;

    PROCEDURE ReadExcelField@1000000020(Rowno@1000000000 : Integer;ColumnNo@1000000001 : Integer) : Text[250];
    BEGIN
      IF ExcelBuf.GET(Rowno,ColumnNo) THEN
        EXIT(ExcelBuf."Cell Value as Text")
      ELSE
        EXIT('');
    END;

    PROCEDURE FillTimeLine@1000000027(Index@1000000000 : Integer);
    VAR
      CostObject@1000000001 : Record 349;
      WageComponent@1000000002 : Record 11012014;
      TempCode@1000000003 : Code[20];
    BEGIN
      TimeLineDateArr[Index] :=  ReadExcelField(38 + Index, 1);
      TimeLineStartArr[Index] := ReadExcelField(38 + Index, 2);
      TimeLineEndArr[Index] :=   ReadExcelField(38 + Index, 3);
      IF ReadExcelField(38 + Index, 5) = '' THEN BEGIN
        FileErrCounter += 1;
        FileErrMessArr[FileErrCounter][1][Index] := STRSUBSTNO(ErrCostObj);
      END;
      TimeLineKdArr[Index] :=    ReadExcelField(38 + Index, 5);
      IF ReadExcelField(38 + Index, 6) = '' THEN BEGIN
        FileErrCounter += 1;
        FileErrMessArr[FileErrCounter][2][Index] := STRSUBSTNO(ErrWageComp);
      END;
      TimeLineLcArr[Index] :=    ReadExcelField(38 + Index, 6);
      TimeLineCalcArr[Index] :=  UPPERCASE(ReadExcelField(38 + Index, 7)) = 'JA';
    END;

    PROCEDURE FillMaterialLine@1000000009(Index@1000000000 : Integer);
    VAR
      ItemRec@1000000001 : Record 27;
    BEGIN
      IF NOT ItemRec.GET(ReadExcelField(50 + Index, 1)) THEN BEGIN
        FileErrCounter += 1;
        FileErrMessArr[FileErrCounter][3][Index] := STRSUBSTNO(ErrItemNo,ReadExcelField(50 + Index, 1));
      END;
      MatLineItemNoArr[Index] := ReadExcelField(50 + Index, 1);
      MatLineQuantArr[Index]  := ReadExcelField(50 + Index, 3);
      MatLineUOMArr[Index]    := ReadExcelField(50 + Index, 4);
      MatLineMagArr[Index]    := ReadExcelField(50 + Index, 6);
      MatLineCalcArr[Index]   := UPPERCASE(ReadExcelField(50 + Index, 7)) = 'JA';
    END;

    PROCEDURE ValAndInsertTimeLine@1000000037(OrderNo@1000000000 : Code[20];ContractNo@1000000001 : Code[20];WageComp@1000000002 : Code[20];CostObj@1000000003 : Code[20];WorkDate@1000000006 : Date;StartTime@1000000004 : Time;EndTime@1000000005 : Time;CalcBool@1000000007 : Boolean) : Boolean;
    BEGIN
      CheckHeader(DATE2DWY(WorkDate, 3),DATE2DWY(WorkDate, 2),EmplNo);
      HourRegLine.INIT;
      HourRegLine.VALIDATE(Type,HourRegLine.Type::Service);
      HourRegLine.VALIDATE(Year,DATE2DWY(WorkDate, 3));
      HourRegLine.VALIDATE(Week,DATE2DWY(WorkDate, 2));
      HourRegLine.VALIDATE("Employee No.", EmplNo);
      HourRegLine."Line No." := DefineLineNo(HourRegLine.Year,HourRegLine.Week);
      HourRegLine.VALIDATE(Day,DefineWeekDay(WorkDate));
      HourRegLine.VALIDATE("Service Order No.", OrderNo);
      CheckAdditionalCostService(OrderNo,HourRegLine);
      HourRegLine.VALIDATE("Cost Object", DELCHR(CostObj,'=','.,'));     //0106
      HourRegLine.VALIDATE("Wage Component", DELCHR(WageComp,'=','.,')); //0106
      HourRegLine.VALIDATE("Time From", StartTime);
      HourRegLine.VALIDATE("Time Until", EndTime);
      IF CalcBool THEN
        HourRegLine.VALIDATE("Additional Cost (Service)",TRUE);
      IF HourRegLine.INSERT(TRUE) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ValAndInsertItemLine@1000000023(ItemNo@1000000000 : Code[20];Quant@1000000001 : Decimal;UnitOfMeasure@1000000002 : Code[20];Magazijn@1000000003 : Code[20];OrderNo@1000000004 : Code[20];BatchNaam@1000000005 : Code[20];CalcBool@1000000007 : Boolean) : Boolean;
    VAR
      ServOrderRec@1000000006 : Record 11012823;
      ItemRec@1000000008 : Record 27;
    BEGIN
      ItemJournalLine.INIT;
      ItemJournalLine."Journal Template Name" := BatchNaam;
      ItemJournalLine."Journal Batch Name" := BatchNaam;
      GDocNo := '';
      ItemJournalLine."Line No." := DefineLineNo1(BatchNaam,GDocNo);
      ItemJournalLine."Entry Type" := ItemJournalLine."Entry Type"::Sale;
      ItemJournalLine."Source Code" := 'ARTDAGB';
      ItemJournalLine."Posting Date" := WORKDATE;
      ItemJournalLine."Document Date" := WORKDATE;
      COMMIT;
      ItemJnlBatch.GET(BatchNaam,BatchNaam);
      IF GDocNo <> '' THEN
        ItemJournalLine."Document No." := GDocNo
      ELSE
        ItemJournalLine."Document No." := NoSeriesMgt.TryGetNextNo(ItemJnlBatch."No. Series",WORKDATE);
      ItemJournalLine.VALIDATE("Service Order No.",OrderNo);
      ItemJournalLine.VALIDATE("Item No.",ItemNo);
      ItemJournalLine.VALIDATE(Quantity,Quant);
      ItemJournalLine."Location Code" := Magazijn;
      ServOrderRec.GET(OrderNo);
      ItemJournalLine."Shortcut Dimension 1 Code" := ServOrderRec."Global Dimension 1 Code";
      IF CalcBool THEN
        ItemJournalLine.VALIDATE("Additional Cost (Service)",TRUE);

      IF ItemJournalLine.INSERT(TRUE) THEN BEGIN
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ValAndInsertProjTimeLine@1000000018(JobNo@1000000000 : Code[20];ElementNo@1000000001 : Code[20];WageComp@1000000002 : Code[20];CostObj@1000000003 : Code[20];WorkDate@1000000006 : Date;StartTime@1000000004 : Time;EndTime@1000000005 : Time;CalcBool@1000000007 : Boolean) : Boolean;
    BEGIN
      CheckHeader(DATE2DWY(WorkDate, 3),DATE2DWY(WorkDate, 2),EmplNo);
      HourRegLine.INIT;
      HourRegLine.VALIDATE(Type,HourRegLine.Type::Project);
      HourRegLine.VALIDATE(Year,DATE2DWY(WorkDate, 3));
      HourRegLine.VALIDATE(Week,DATE2DWY(WorkDate, 2));
      HourRegLine.VALIDATE("Employee No.", EmplNo);
      HourRegLine."Line No." := DefineLineNo(HourRegLine.Year,HourRegLine.Week);
      HourRegLine.VALIDATE(Day,DefineWeekDay(WorkDate));
      HourRegLine.VALIDATE("Project No.", JobNo);
      HourRegLine.VALIDATE(Element, ElementNo);
      //CheckAdditionalCostService(OrderNo,HourRegLine);
      HourRegLine.VALIDATE("Cost Object", DELCHR(CostObj,'=','.,'));     //0106
      HourRegLine.VALIDATE("Wage Component", DELCHR(WageComp,'=','.,')); //0106
      HourRegLine.VALIDATE("Time From", StartTime);
      HourRegLine.VALIDATE("Time Until", EndTime);
      //IF CalcBool THEN
      //  HourRegLine.VALIDATE("Additional Cost (Service)",TRUE);
      IF HourRegLine.INSERT(TRUE) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CheckAdditionalCostService@1000000004(ServOrderNo@1000000000 : Code[20];VAR HourRegLine@1000000002 : Record 11012039);
    VAR
      ServOrderRec@1000000001 : Record 11012823;
    BEGIN
      // LET OP:
      // Deze functie is een gedeeltelijke kopie van de gelijknamige functie in de hour acc line tabel!!!!!!
      IF ServOrderNo = '' THEN
        EXIT;
      IF NOT ServOrderRec.GET(ServOrderNo) THEN
        EXIT;

      HourRegLine."Additional Cost (Service)" :=
        ServOrderRec.GetAdditionalCostService(ServOrderNo,HourRegLine."Cost Object",HourRegLine."Cost Type"+1,
        HourRegLine."Receiving Company",'');
      HourRegLine.VALIDATE("Cost Component");
    END;

    PROCEDURE CheckHeader@1000000003(YearNo@1000000000 : Integer;WeekNo@1000000001 : Integer;EmplCde@1000000002 : Code[20]);
    VAR
      HourAccounting@1000000003 : Record 11012038;
    BEGIN
      HourAccounting.SETRANGE(Year,YearNo);
      HourAccounting.SETRANGE(Week,WeekNo);
      HourAccounting.SETRANGE("Employee No.",EmplCde);
      IF NOT HourAccounting.FINDFIRST THEN BEGIN
        HourAccounting.INIT;
        HourAccounting.Year := YearNo;
        HourAccounting.Week := WeekNo;
        HourAccounting."Employee No." := EmplCde;
        HourAccounting.INSERT(TRUE);
      END;
    END;

    PROCEDURE DefineLineNo@1000000041(YearNo@1000000001 : Integer;WeekNo@1000000002 : Integer) : Integer;
    VAR
      Houraccountingline@1000000000 : Record 11012039;
    BEGIN
      Houraccountingline.SETRANGE(Year, YearNo);
      Houraccountingline.SETRANGE(Week, WeekNo);
      Houraccountingline.SETRANGE("Employee No.", EmplNo);
      IF Houraccountingline.FINDLAST THEN
        EXIT(Houraccountingline."Line No." + 1000)
      ELSE
        EXIT(1000);
    END;

    PROCEDURE DefineLineNo1@1000000028(Batchnaam@1000000000 : Code[20];DocNo@1000000002 : Code[20]) : Integer;
    VAR
      lItemJournLine@1000000001 : Record 83;
    BEGIN
      lItemJournLine.SETRANGE("Journal Template Name",Batchnaam);
      lItemJournLine.SETRANGE("Journal Batch Name",Batchnaam);
      IF lItemJournLine.FINDLAST THEN BEGIN
        DocNo := lItemJournLine."Document No.";
        EXIT(lItemJournLine."Line No." + 1000);
      END ELSE
        EXIT(1000);
    END;

    PROCEDURE DefineWeekDay@1000000042(WorkDate@1000000000 : Date) : Integer;
    BEGIN
      EXIT(DATE2DWY(WorkDate, 1));
    END;

    PROCEDURE AddServiceText@1000000050(OrderNo@1000000003 : Code[20];Cause@1000000000 : Text[250];Solution@1000000001 : Text[250]);
    VAR
      ServOrder@1000000002 : Record 11012823;
      ServOrderExtension@1100409000 : Record 11071727;
    BEGIN

      SetServiceText(OrderNo,Cause,'O');
      SetServiceText(OrderNo,Solution,'L');
    END;

    PROCEDURE MoveFile@1000000001(FileName@1000000000 : Text[250];TargetDir@1000000001 : Text[250];SourceDir@1000000002 : Text[250];CopyBool@1000000003 : Boolean);
    VAR
      LtxtNewFileName@1100525000 : Text;
    BEGIN
      LtxtNewFileName := COPYSTR(FileName,1,STRPOS(FileName,'.xls')-1) + '_' + DELCHR(FORMAT(CURRENTDATETIME),'<>=',' :-/') + COPYSTR(FileName,STRPOS(FileName,'.xls'));
      ExtDocManagement.MoveCopyFile(TargetDir,LtxtNewFileName,SourceDir,FileName,CopyBool);
    END;

    PROCEDURE FillLogMoment@1000000002(VAR PrecServiceOrder@1000000000 : Record 11012823;PtxtDate@1100525003 : Text;PtxtTime@1100525004 : Text;PintRefPoint@1100525005 : Integer);
    VAR
      LrecDocRefPoint@1100525000 : Record 11020296;
      Ltime@1100525001 : Time;
      Ldate@1100525002 : Date;
    BEGIN
      IF (PtxtDate <> '') AND (PtxtTime <> '') THEN BEGIN
        EVALUATE(Ldate,PtxtDate);
        EVALUATE(Ltime,PtxtTime);
        IF PintRefPoint <> 0 THEN BEGIN
          LrecDocRefPoint.InsertDocRefPointWithNo(LrecDocRefPoint.Type::ServOrder,PrecServiceOrder."No.",PintRefPoint,Ldate,Ltime);
          IF LrecDocRefPoint.GetNewActRefPoint >= 0 THEN BEGIN
            PrecServiceOrder."Actual Reference Point (Gantt)" := LrecDocRefPoint.GetNewActRefPoint;
            PrecServiceOrder.MODIFY(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE CheckInternalText@1000000005(OrderNo@1000000000 : Code[20]);
    VAR
      OrderRec@1000000001 : Record 11012823;
      ServiceText@1000000002 : Record 11012882;
      ServOrderExtension@1100409000 : Record 11071727;
      TempDate@1000000003 : Date;
      A@1000000004 : Integer;
      i@1000000005 : Integer;
      LtxtInternal@1100525000 : Text;
      LtxtInsert@1100525001 : Text;
      LintPos@1100525002 : Integer;
      LintLineNo@1100525003 : Integer;
    BEGIN
      LtxtInternal := ReadExcelField(23,1);
      LintPos := STRLEN(LtxtInternal);
      IF LtxtInternal <> '' THEN BEGIN
        ServiceText.SETRANGE("Table Name",ServiceText."Table Name"::"Service Order");
        ServiceText.SETRANGE("No.",OrderNo);
        ServiceText.SETRANGE("Table Field",91);
        IF NOT ServiceText.ISEMPTY THEN BEGIN
          IF ServiceText.FINDSET THEN BEGIN
            REPEAT
              IF UPPERCASE(ServiceText.Comment) <> COPYSTR(UPPERCASE(LtxtInternal),1,80) THEN BEGIN
                LtxtInsert += COPYSTR(LtxtInternal,1,80);
                IF STRLEN(LtxtInternal) > 80 THEN
                  LtxtInternal := COPYSTR(LtxtInternal,81)
                ELSE
                  LtxtInternal := '';
              END;
              LintLineNo := ServiceText."Line No.";
            UNTIL ServiceText.NEXT = 0;
          END;
        END ELSE
          LtxtInsert := LtxtInternal;

        IF (LintPos > STRLEN(LtxtInsert)) AND (LtxtInsert <> '') THEN //This happens when more text is in Excel then in service text lines
          LtxtInsert += COPYSTR(ReadExcelField(23,1),STRLEN(LtxtInsert) + 1);

        WHILE STRLEN(LtxtInsert) > 0 DO BEGIN
          LintLineNo += 10000;
          ServiceText.INIT;
          ServiceText."Table Name" := ServiceText."Table Name"::"Service Order";
          ServiceText."No." := OrderNo;
          ServiceText."Table Field" := 91;
          ServiceText."Line No." := LintLineNo;
          IF EVALUATE(TempDate, ReadExcelField(36, 2)) THEN
            ServiceText.Date := TempDate
          ELSE
            ServiceText.Date := TODAY;
          ServiceText.Comment := COPYSTR(LtxtInsert,1,80);
          IF STRLEN(LtxtInsert) > 80 THEN
            LtxtInsert := COPYSTR(LtxtInsert,81)
          ELSE
            LtxtInsert := '';
          ServiceText.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetLineNoServiceText@1000000007(OrderNo@1000000001 : Code[20]) : Integer;
    VAR
      ServiceText@1000000000 : Record 11012882;
    BEGIN
      ServiceText.SETRANGE("Table Name",ServiceText."Table Name"::"Service Order");
      ServiceText.SETRANGE("No.",OrderNo);
      ServiceText.SETRANGE("Table Field",91);
      IF ServiceText.FINDLAST THEN
        EXIT(ServiceText."Line No." + 1000)
      ELSE
        EXIT(1000);
    END;

    PROCEDURE CheckVervolg@1000000012(OrderNo@1000000000 : Code[20]);
    BEGIN
      IF (ReadExcelField(68, 2) = 'Ja') THEN
        IF (ReadExcelField(13, 2) <> '') THEN
          MESSAGE(VervolgTxt,OrderNo,ReadExcelField(13, 2))
        ELSE
          MESSAGE(VervolgTxt,OrderNo,'');
    END;

    PROCEDURE ModifyFile@1000000033(FileName@1000000000 : Text[250];SheetName@1000000001 : Text[100]);
    VAR
      Language@1000000002 : Integer;
      TempRange@1000000003 : Text[30];
      i@1000000004 : Integer;
      x@1000000005 : Integer;
    BEGIN
      QuitExcel;
      OpenBook(FileName,SheetName);
      ReadSheet;

      //xlSheet.Unprotect('');
      FOR i := 1 TO FileErrCounter DO BEGIN
        FOR x := 1 TO 10 DO BEGIN
          IF FileErrMessArr[i][1][x] <>'' THEN BEGIN       //Kostendragers
            TempRange := STRSUBSTNO('E%1',38 + x);
            xlSheet.Range(TempRange).AddComment := FileErrMessArr[i][1][x];
          END;
          IF FileErrMessArr[i][2][x] <>'' THEN BEGIN       //Looncomponenten
            TempRange := STRSUBSTNO('F%1',38 + x);
            xlSheet.Range(TempRange).AddComment := FileErrMessArr[i][2][x];
          END;
          IF FileErrMessArr[i][3][x] <>'' THEN BEGIN       //Artikelnummers
            TempRange := STRSUBSTNO('A%1',50 + x);
            xlSheet.Range(TempRange).AddComment := FileErrMessArr[i][3][x];
          END;
        END;
      END;

      XlBook.Save;
      XlBook.Close(FALSE, '', FALSE);
      XlHelper.CallQuit(XlApp);
      CLEAR(XlApp);
    END;

    PROCEDURE GetPath@1000000006(PathCode@1000000000 : Code[10]);
    VAR
      lStandardText@1000000001 : Record 7;
      lExtendedTextLine@1000000002 : Record 280;
      i@1000000003 : Integer;
    BEGIN
      //Tabelnaam,Nr.,Taal,Tekstnr.,Regelnr.
      IF NOT lStandardText.GET(PathCode) THEN
        ERROR(Text005)
      ELSE BEGIN
         lExtendedTextLine.SETRANGE("Table Name", lExtendedTextLine."Table Name"::"Standard Text");
         lExtendedTextLine.SETRANGE("No.",PathCode);
         IF lExtendedTextLine.FINDSET THEN BEGIN
           REPEAT
             i := i + 1;
             IF i < 3 THEN
               PathName += lExtendedTextLine.Text;
             IF i = 3 THEN
               Processed := lExtendedTextLine.Text;
             IF i =4 THEN
               NotProcessed := lExtendedTextLine.Text;
           UNTIL (lExtendedTextLine.NEXT = 0) OR (i = 4);
         END;
      END;
    END;

    PROCEDURE CheckProjectNo@1000000011(FileName@1000000000 : Text[100]) : Boolean;
    VAR
      x@1000000002 : Integer;
      LastPos@1000000003 : Integer;
      StartPos@1000000004 : Integer;
      TempJobNo@1000000005 : Code[20];
      JobRec@1000000006 : Record 11072003;
    BEGIN
      FOR x := STRLEN(FileName) DOWNTO 1 DO BEGIN
        IF (COPYSTR(FileName, x, 1) = '.') AND (LastPos = 0) THEN
          LastPos := x;
      END;
      StartPos := STRPOS(FileName, 'PJN');
      TempJobNo := COPYSTR(FileName, StartPos, LastPos - StartPos);
      IF JobRec.GET(TempJobNo) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetEmplNoFromFileName@1000000015(FileName@1000000000 : Text[100];VAR EmployeeNo@1000000001 : Code[20]) : Boolean;
    VAR
      x@1000000002 : Integer;
      LastPos@1000000003 : Integer;
      StartPos@1000000004 : Integer;
      TempJobNo@1000000005 : Code[20];
      EmployeeRec@1000000006 : Record 5200;
      TempEmployeeNo@1000000007 : Code[20];
    BEGIN
      TempEmployeeNo := COPYSTR(FileName, 10, 6);
      IF EmployeeRec.GET(TempEmployeeNo) THEN BEGIN
        EmployeeNo := TempEmployeeNo;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE SetServiceText@1100525000(PcodOrderNo@1100525004 : Code[20];PtxtService@1100525003 : Text;PcodTextCode@1100525000 : Code[1]);
    VAR
      lServiceTextRec@1100525001 : Record 11012882;
      lCommentTxt@1100525002 : Text;
      LintLineNo@1100525005 : Integer;
    BEGIN
      IF PtxtService = '' THEN
        EXIT;

      LintLineNo := 10000;
      lServiceTextRec.SETRANGE("Table Name",lServiceTextRec."Table Name"::"Service Order");
      lServiceTextRec.SETRANGE("No.",PcodOrderNo);
      CASE PcodTextCode OF
        'I': lServiceTextRec.SETRANGE("Table Field",91); //Interne tekst
        'O': lServiceTextRec.SETRANGE("Table Field",94); //Oorzaak tekst
        'L': lServiceTextRec.SETRANGE("Table Field",92); //Oplossing tekst
      END;
      IF NOT lServiceTextRec.ISEMPTY THEN BEGIN
        lServiceTextRec.FINDLAST;
        LintLineNo := lServiceTextRec."Line No.";
      END;

      WITH lServiceTextRec DO BEGIN
        IF PtxtService <> lServiceTextRec.Comment THEN BEGIN
          WHILE STRLEN(PtxtService) > 80 DO BEGIN
            LintLineNo += 10000;
            INIT;
            "Table Name" := "Table Name"::"Service Order";
            "No." := PcodOrderNo;
            CASE PcodTextCode OF
              'I': "Table Field" := 91; //Interne tekst
              'O': "Table Field" := 94; //Oorzaak tekst
              'L': "Table Field" := 92; //Oplossing tekst
            END;
            "Line No." := LintLineNo;
            Comment := COPYSTR(PtxtService,1,80);
            PtxtService := COPYSTR(PtxtService,81);
            INSERT;
          END;

          LintLineNo += 10000;
          INIT;
          "Table Name" := "Table Name"::"Service Order";
          "No." := PcodOrderNo;
          CASE PcodTextCode OF
            'I': "Table Field" := 91; //Interne tekst
            'O': "Table Field" := 94; //Oorzaak tekst
            'L': "Table Field" := 92; //Oplossing tekst
          END;
          "Line No." := LintLineNo;
          Comment := PtxtService;
          INSERT;
        END;
      END;

    END;

    PROCEDURE OpenBook@2(FileName@1000 : Text;SheetName@1001 : Text[250]);
    BEGIN
      XlWrkBkReader := XlWrkBkReader.Open(FileName);
      IF XlWrkBkReader.HasWorksheet(SheetName) THEN BEGIN
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName);
      END ELSE
        QuitExcel;
    END;

    PROCEDURE ReadSheet@4();
    VAR
      ExcelBufferDialogMgt@1003 : Codeunit 5370;
      CellData@1002 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellData" RUNONCLIENT;
      Enumerator@1001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator" RUNONCLIENT;
      i@1000 : Integer;
      RowCount@1009 : Integer;
      LastUpdate@1004 : DateTime;
      Text007@1100525000 : TextConst '@@@="{Locked=""Excel""}";ENU=Reading Excel worksheet...\\';
    BEGIN
      LastUpdate := CURRENTDATETIME;
      ExcelBufferDialogMgt.Open(Text007);
      WITH ExcelBuf DO BEGIN
        DELETEALL;

        Enumerator := XlWrkShtReader.GetEnumerator;
        RowCount := XlWrkShtReader.RowCount;
        WHILE Enumerator.MoveNext DO BEGIN
          CellData := Enumerator.Current;
          IF CellData.HasValue THEN BEGIN
            VALIDATE("Row No.",CellData.RowNumber);
            VALIDATE("Column No.",CellData.ColumnNumber);
            ParseCellValue(CellData.Value,CellData.Format);
            INSERT;
          END;

          i := i + 1;
          COMMIT;
          IF NOT UpdateProgressDialog(ExcelBufferDialogMgt,LastUpdate,i,RowCount) THEN BEGIN
            QuitExcel;
            ERROR(Text035)
          END;
        END;
      END;

      QuitExcel;
      ExcelBufferDialogMgt.Close;
    END;

    PROCEDURE QuitExcel@29();
    BEGIN
      // Close and clear the OpenXml book
      CloseBook;

      // Clear the worksheet automation
      IF NOT ISNULL(xlSheet) THEN
        CLEAR(xlSheet);

      // Clear the workbook automation
      IF NOT ISNULL(XlBook) THEN
        CLEAR(XlBook);

      // Clear and quit the Excel application automation
      IF NOT ISNULL(XlApp) THEN
        CLEAR(XlApp);
    END;

    PROCEDURE CloseBook@30();
    BEGIN
      IF NOT ISNULL(XlWrkBkWriter) THEN BEGIN
        XlWrkBkWriter.ClearFormulaCalculations;
        XlWrkBkWriter.ValidateDocument;
        XlWrkBkWriter.Close;
        CLEAR(XlWrkShtWriter);
        CLEAR(XlWrkBkWriter);
      END;

      IF NOT ISNULL(XlWrkBkReader) THEN BEGIN
        CLEAR(XlWrkShtReader);
        CLEAR(XlWrkBkReader);
      END;
    END;

    LOCAL PROCEDURE ParseCellValue@40(Value@1000 : Text;FormatString@1001 : Text);
    VAR
      Decimal@1004 : Decimal;
    BEGIN
      // The format contains only en-US number separators, this is an OpenXML standard requirement
      // The algorithm sieves the data based on formatting as follows (the steps must run in this order)
      // 1. FormatString = '@' -> Text
      // 2. FormatString.Contains(':') -> Time
      // 3. FormatString.ContainsOneOf('y', 'm', 'd') && FormatString.DoesNotContain('Red') -> Date
      // 4. anything else -> Decimal
      WITH ExcelBuf DO BEGIN
        NumberFormat := COPYSTR(FormatString,1,30);

        IF FormatString = '@' THEN BEGIN
          "Cell Type" := "Cell Type"::Text;
          "Cell Value as Text" := Value;
          EXIT;
        END;

        EVALUATE(Decimal,Value);

        IF STRPOS(FormatString,':') <> 0 THEN BEGIN
          // Excel Time is stored in OADate format
          "Cell Type" := "Cell Type"::Time;
          "Cell Value as Text" := FORMAT(DT2TIME(ConvertDateTimeDecimalToDateTime(Decimal)));
          EXIT;
        END;

        IF ((STRPOS(FormatString,'y') <> 0) OR
            (STRPOS(FormatString,'m') <> 0) OR
            (STRPOS(FormatString,'d') <> 0)) AND
           (STRPOS(FormatString,'Red') = 0)
        THEN BEGIN
          "Cell Type" := "Cell Type"::Date;
          "Cell Value as Text" := FORMAT(DT2DATE(ConvertDateTimeDecimalToDateTime(Decimal)));
          EXIT;
        END;

        "Cell Type" := "Cell Type"::Number;
        "Cell Value as Text" := FORMAT(ROUND(Decimal,0.000001),0,1);
      END;
    END;

    LOCAL PROCEDURE UpdateProgressDialog@36(VAR ExcelBufferDialogManagement@1000 : Codeunit 5370;VAR LastUpdate@1001 : DateTime;CurrentCount@1002 : Integer;TotalCount@1004 : Integer) : Boolean;
    VAR
      CurrentTime@1003 : DateTime;
    BEGIN
      // Refresh at 100%, and every second in between 0% to 100%
      // Duration is measured in miliseconds -> 1 sec = 1000 ms
      CurrentTime := CURRENTDATETIME;
      IF (CurrentCount = TotalCount) OR (CurrentTime - LastUpdate >= 1000) THEN BEGIN
        LastUpdate := CurrentTime;
        ExcelBufferDialogManagement.SetProgress(ROUND(CurrentCount / TotalCount * 10000,1));
        IF NOT ExcelBufferDialogManagement.RUN THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE)
    END;

    EVENT XlApp@1100525050::AppEvents_Event_NewWorkbook@424(Wb@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetSelectionChange@425(Sh@1100525001 : Variant;Target@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetBeforeDoubleClick@426(Sh@1100525002 : Variant;Target@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetBeforeRightClick@427(Sh@1100525002 : Variant;Target@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetActivate@428(Sh@1100525000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetDeactivate@429(Sh@1100525000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetCalculate@430(Sh@1100525000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetChange@431(Sh@1100525001 : Variant;Target@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookOpen@432(Wb@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookActivate@433(Wb@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookDeactivate@434(Wb@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookBeforeClose@435(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookBeforeSave@436(Wb@1100525002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";SaveAsUI@1100525001 : Boolean;VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookBeforePrint@437(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookNewSheet@438(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Sh@1100525000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookAddinInstall@439(Wb@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookAddinUninstall@440(Wb@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlApp@1100525050::WindowResize@441(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlApp@1100525050::WindowActivate@442(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlApp@1100525050::WindowDeactivate@443(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetFollowHyperlink@444(Sh@1100525001 : Variant;Target@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Hyperlink");
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetPivotTableUpdate@445(Sh@1100525001 : Variant;Target@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookPivotTableCloseConnection@446(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Target@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookPivotTableOpenConnection@447(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Target@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookSync@448(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";SyncEventType@1100525000 : DotNet "'office, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Core.MsoSyncEventType");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookBeforeXmlImport@449(Wb@1100525004 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1100525003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1100525002 : Text;IsRefresh@1100525001 : Boolean;VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookAfterXmlImport@450(Wb@1100525003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1100525002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";IsRefresh@1100525001 : Boolean;Result@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlXmlImportResult");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookBeforeXmlExport@451(Wb@1100525003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1100525002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1100525001 : Text;VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookAfterXmlExport@452(Wb@1100525003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1100525002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1100525001 : Text;Result@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlXmlExportResult");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookRowsetComplete@453(Wb@1100525003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Description@1100525002 : Text;Sheet@1100525001 : Text;Success@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::AfterCalculate@454();
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetPivotTableAfterValueChange@455(Sh@1100525002 : Variant;TargetPivotTable@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";TargetRange@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetPivotTableBeforeAllocateChanges@456(Sh@1100525004 : Variant;TargetPivotTable@1100525003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1100525002 : Integer;ValueChangeEnd@1100525001 : Integer;VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetPivotTableBeforeCommitChanges@457(Sh@1100525004 : Variant;TargetPivotTable@1100525003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1100525002 : Integer;ValueChangeEnd@1100525001 : Integer;VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetPivotTableBeforeDiscardChanges@458(Sh@1100525003 : Variant;TargetPivotTable@1100525002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1100525001 : Integer;ValueChangeEnd@1100525000 : Integer);
    BEGIN
    END;

    EVENT XlApp@1100525050::ProtectedViewWindowOpen@459(Pvw@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp@1100525050::ProtectedViewWindowBeforeEdit@460(Pvw@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow";VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::ProtectedViewWindowBeforeClose@461(Pvw@1100525002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow";Reason@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlProtectedViewCloseReason";VAR Cancel@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::ProtectedViewWindowResize@462(Pvw@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp@1100525050::ProtectedViewWindowActivate@463(Pvw@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp@1100525050::ProtectedViewWindowDeactivate@464(Pvw@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookAfterSave@465(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Success@1100525000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookNewChart@466(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Ch@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart");
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetLensGalleryRenderComplete@467(Sh@1100525000 : Variant);
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetTableUpdate@468(Sh@1100525001 : Variant;Target@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.TableObject");
    BEGIN
    END;

    EVENT XlApp@1100525050::WorkbookModelChange@469(Wb@1100525001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Changes@1100525000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ModelChanges");
    BEGIN
    END;

    EVENT XlApp@1100525050::SheetBeforeDelete@470(Sh@1100525000 : Variant);
    BEGIN
    END;

    BEGIN
    {
      Rework: Put servicetexts into service comment lines instead of the old service order extension text fields
    }
    END.
  }
  RDLDATA
  {
  }
}

