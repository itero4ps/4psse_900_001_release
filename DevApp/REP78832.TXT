OBJECT Report 78832 Calculatiesheet
{
  OBJECT-PROPERTIES
  {
    Date=17-01-13;
    Time=09:01:03;
    Version List=4PS9.00.SMART.OPLOSSEN;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnInitReport=BEGIN

                   GetPath('PCALCSHEET');
                   FileName := PathName;
                 END;

    OnPreReport=BEGIN

                  SurchargePercentage := 0.71;
                  TotalRowNo := 4;

                  IF UseExistingFile THEN
                    FileName := FileName2;

                  CREATE(xlApp,FALSE,TRUE);
                  SheetName := 'Calculatie';
                  xlApp.DisplayAlerts := FALSE;
                  xlApp.Workbooks.Open(FileName);
                  xlBook := xlApp.ActiveWorkbook;
                  xlSheet :=xlApp.Worksheets.Item(SheetName);
                  xlSheet.Select;

                  xlSheet := xlApp.Sheets.Add;
                  xlSheet.Name := FORMAT('Controle');
                  xlSheet.Select;

                  xlSheet.Range(Matrix(1,3)).Value := 'Deel calculatie';
                  xlSheet.Range(Matrix(1,3)).ColumnWidth := 12;
                  xlSheet.Range(Matrix(1,3)).RowHeight := 62;
                  xlSheet.Range(Matrix(1,3)).WrapText := TRUE;
                  xlSheet.Range(Matrix(1,3)).Font.Bold := TRUE;
                  xlSheet.Range(Matrix(2,3)).Value :='Onderdeel';
                  xlSheet.Range(Matrix(2,3)).ColumnWidth := 10;
                  xlSheet.Range(Matrix(2,3)).Font.Bold := TRUE;
                  xlSheet.Range(Matrix(3,3)).Value :='Omschrijving';
                  xlSheet.Range(Matrix(3,3)).ColumnWidth := 15;
                  xlSheet.Range(Matrix(3,3)).WrapText := TRUE;
                  xlSheet.Range(Matrix(3,3)).Font.Bold := TRUE;
                  xlSheet.Range(Matrix(4,3)).Value :='Kosten bedrag';
                  xlSheet.Range(Matrix(4,3)).WrapText := TRUE;
                  xlSheet.Range(Matrix(4,3)).ColumnWidth := 13;
                  xlSheet.Range(Matrix(4,3)).Font.Bold := TRUE;
                  xlSheet.Range(Matrix(5,3)).Value :='Berekende prijs (Integrale kostprijs)';
                  xlSheet.Range(Matrix(5,3)).ColumnWidth := 13;
                  xlSheet.Range(Matrix(5,3)).WrapText := TRUE;
                  xlSheet.Range(Matrix(5,3)).Font.Bold := TRUE;
                  xlSheet.Range(Matrix(6,3)).Value :='Opslag AK';
                  xlSheet.Range(Matrix(6,3)).ColumnWidth := 13;
                  xlSheet.Range(Matrix(6,3)).WrapText := TRUE;
                  xlSheet.Range(Matrix(6,3)).Font.Bold := TRUE;

                  ControlRowNo := 4;

                  xlSheet :=xlApp.Worksheets.Item(SheetName);
                  xlSheet.Select;

                  RowNo := 2;

                  Popup.OPEN('Exporteren van gegevens \Voortgang @1@@@@@@@@@@@');
                END;

    OnPostReport=BEGIN
                   xlApp.Visible:=TRUE;
                 END;

  }
  DATASET
  {
    { 1100525000;;DataItem;                  ;
               DataItemTable=Table11072073;
               DataItemTableView=SORTING(Estimate No.,Sub-Estimate No.,Part Group,Part);
               OnPreDataItem=BEGIN

                               RowNo := 33;

                               NumberOfEntries := COUNT;

                               FillHeading;
                             END;

               OnAfterGetRecord=VAR
                                  Estimate@1100525025 : Record 11012151;
                                  EstimateLine@1100525024 : Record 11072072;
                                  SubEstimate@1100525023 : Record 11072074;
                                  CumLaborDec@1100525022 : Decimal;
                                  CumMatDec@1100525021 : Decimal;
                                  CumSubcDec@1100525020 : Decimal;
                                  CumPlantDec@1100525019 : Decimal;
                                  CumHours@1000000000 : Decimal;
                                  CumSundry@1000000001 : Decimal;
                                  PartQuan@1100525018 : Decimal;
                                  PartSalesPrice@1100525017 : Decimal;
                                  PartSalesHours@1100525016 : Decimal;
                                  PartSalesAmount@1100525015 : Decimal;
                                  PartCostAmount@1100525014 : Decimal;
                                  PartCostPrice@1100525013 : Decimal;
                                  LaborDec@1100525012 : Decimal;
                                  MatDec@1100525011 : Decimal;
                                  SubcDec@1100525010 : Decimal;
                                  PlantDec@1100525009 : Decimal;
                                  PartCostHours@1100525008 : Decimal;
                                  CopyRec@1100525007 : Record 11072073;
                                  CopyPartQuan@1100525006 : Decimal;
                                  CalculatedCostPrice@1100525005 : Decimal;
                                  CalculatedCostAmount@1100525004 : Decimal;
                                  Margin@1100525003 : Decimal;
                                  VAR@1100525002 : Variant;
                                  i@1100525001 : Integer;
                                  SubEstQuant@1100525000 : Decimal;
                                  Textmark@1100525026 : TextConst 'NLD=''';
                                  SalesLaborDec@1000000007 : Decimal;
                                  SalesMatDec@1000000006 : Decimal;
                                  SalesSubcDec@1000000005 : Decimal;
                                  SalesPlantDec@1000000004 : Decimal;
                                  SalesHours@1000000003 : Decimal;
                                  SalesSundry@1000000002 : Decimal;
                                BEGIN
                                  CurrentEntry += 1;
                                  Popup.UPDATE(1, ROUND((CurrentEntry / NumberOfEntries) * 10000, 1));

                                  CALCFIELDS("Estimated Total","Hours Total",{"Cum. Estimated Total",}"Estimated Part", "Estimate Description");

                                  // Copied source from form 11012238
                                  CopyRec := "Estimate Part NEW";
                                  IF Estimate."No." <> CopyRec."Estimate No." THEN
                                    Estimate.GET(CopyRec."Estimate No.");
                                  Estimate.CALCFIELDS("Copied from Estimate Descr.");
                                  CopyRec."Estimate No." := Estimate."Copied from Cost Estimate";
                                  IF NOT CopyRec.FIND THEN CopyRec.INIT;

                                  // Calculate values
                                  IF Estimate."Estimate Type" = Estimate."Estimate Type"::Sales THEN BEGIN
                                  CASE Level OF
                                      0:BEGIN
                                          CopyRec.CALCFIELDS("Labor Total", "Material Total", "Subcontracting Total", "Plant Total", "Hours Total");
                                          LaborDec         := CopyRec."Labor Total";
                                          MatDec           := CopyRec."Material Total";
                                          SubcDec          := CopyRec."Subcontracting Total";
                                          PlantDec         := CopyRec."Plant Total";
                                          PartCostHours    := CopyRec."Hours Total";

                                          GetCumTotals(CumHours,CumLaborDec,CumMatDec,CumSubcDec,CumPlantDec,CumSundry,
                                                       SalesHours,SalesLaborDec,SalesMatDec,SalesSubcDec,SalesPlantDec,SalesSundry);
                                          PartSalesAmount := CumLaborDec+CumMatDec+CumSubcDec+CumPlantDec+CumSundry;
                                          PartSalesHours := CumHours;
                                        END;
                                      1:BEGIN

                                     {     CALCFIELDS("Estimated Chapter","Hours Chapter","Cum. Estimated Chapter");
                                          PartSalesHours   := "Hours Chapter";
                                          PartSalesAmount  := "Cum. Estimated Chapter";

                                          CopyRec.CALCFIELDS("Labor Chapter", "Material Chapter", "Subcontracting Chapter", "Plant Chapter", "Hours Chapter");
                                          LaborDec         := CopyRec."Labor Chapter";
                                          MatDec           := CopyRec."Material Chapter";
                                          SubcDec          := CopyRec."Subcontracting Chapter";
                                          PlantDec         := CopyRec."Plant Chapter";
                                          PartCostHours    := CopyRec."Hours Chapter";

                                          CopyRec.CALCFIELDS("Cum. Labor Chapter", "Cum. Material Chapter","Cum. Subcontracting Chapter", "Cum. Plant Chapter");
                                          CumLaborDec      := CopyRec."Cum. Labor Chapter";
                                          CumMatDec        := CopyRec."Cum. Material Chapter";
                                          CumSubcDec       := CopyRec."Cum. Subcontracting Chapter";
                                          CumPlantDec      := CopyRec."Cum. Plant Chapter";}
                                        END;
                                      2:BEGIN
                                       {   CALCFIELDS("Estimated Paragraph","Hours Paragraph","Cum. Estimated Paragraph");
                                          PartSalesHours   := "Hours Paragraph";
                                          PartSalesAmount  := "Cum. Estimated Paragraph";

                                          CopyRec.CALCFIELDS("Labor Paragraph","Material Paragraph","Subcontracting Paragraph", "Plant Paragraph", "Hours Paragraph");
                                          LaborDec         := CopyRec."Labor Paragraph";
                                          MatDec           := CopyRec."Material Paragraph";
                                          SubcDec          := CopyRec."Subcontracting Paragraph";
                                          PlantDec         := CopyRec."Plant Paragraph";
                                          PartCostHours    := CopyRec."Hours Paragraph";

                                          CopyRec.CALCFIELDS("Cum. Labor Paragraph","Cum. Material Paragraph","Cum. Subcontracting Paragraph","Cum. Plant Paragraph");
                                          CumLaborDec      := CopyRec."Cum. Labor Paragraph";
                                          CumMatDec        := CopyRec."Cum. Material Paragraph";
                                          CumSubcDec       := CopyRec."Cum. Subcontracting Paragraph";
                                          CumPlantDec      := CopyRec."Cum. Plant Paragraph";}
                                        END;
                                      3:BEGIN
                                         { CALCFIELDS("Estimated Part","Hours Part","Cum. Estimated Part");
                                          PartSalesHours   := "Hours Part";
                                          PartSalesAmount  := "Cum. Estimated Part";

                                          CopyRec.CALCFIELDS("Labor Part", "Material Part", "Subcontracting Part", "Plant Part", "Hours Part");
                                          LaborDec         := CopyRec."Labor Part";
                                          MatDec           := CopyRec."Material Part";
                                          SubcDec          := CopyRec."Subcontracting Part";
                                          PlantDec         := CopyRec."Plant Part";
                                          PartCostHours    := CopyRec."Hours Part";

                                          CopyRec.CALCFIELDS("Cum. Labor Part", "Cum. Material Part", "Cum. Subcontracting Part", "Cum. Plant Part");
                                          CumLaborDec      := CopyRec."Cum. Labor Part";
                                          CumMatDec        := CopyRec."Cum. Material Part";
                                          CumSubcDec       := CopyRec."Cum. Subcontracting Part";
                                          CumPlantDec      := CopyRec."Cum. Plant Part";}
                                        END;
                                    END;
                                  END;

                                  SubEstimate.SETRANGE("Estimate No.", "Estimate Part NEW"."Estimate No.");
                                  SubEstimate.SETRANGE("Sub-Estimate No.", "Estimate Part NEW"."Sub-Estimate No.");
                                  IF SubEstimate.FINDFIRST THEN
                                    SubEstQuant := SubEstimate.Frequency;

                                  PartQuan := GetPartQuantity;
                                  IF PartQuan <> 0 THEN
                                    PartSalesPrice := ROUND(PartSalesAmount/PartQuan)
                                  ELSE
                                    PartSalesPrice := PartSalesAmount;

                                  PartCostAmount := CumLaborDec + CumMatDec + CumSubcDec + CumPlantDec;
                                  CopyPartQuan := CopyRec.GetPartQuantity;
                                  IF CopyPartQuan <> 0 THEN
                                    PartCostPrice := ROUND(PartCostAmount/CopyPartQuan)
                                  ELSE
                                    PartCostPrice := PartCostAmount;

                                  CalculatedCostPrice  := CopyRec."Calculated Cost Price";
                                  CalculatedCostAmount := CalculatedCostPrice * CopyPartQuan;

                                  CALCFIELDS("Estimated Part");
                                  //GetSubEstTotals;

                                  "Markup %" := GetMarkup("Offer Price",CalculatedCostPrice);
                                  Margin := GetMargin("Offer Price",CalculatedCostPrice);

                                  xlSheet.Range(Matrix(  3,RowNo)).Value := "Sub-Estimate No.";
                                  xlSheet.Range(Matrix(  4,RowNo)).Value :=  Textmark + STRSUBSTNO('%1'      ,"Estimate Part NEW".Part);
                                  xlSheet.Range(Matrix(  5,RowNo)).Value := '';                    //  Recept
                                  xlSheet.Range(Matrix(  6,RowNo)).Value :=  Description;
                                  xlSheet.Range(Matrix(  7,RowNo)).Value :=  '';                   //  Artikel nummer
                                  xlSheet.Range(Matrix(  8,RowNo)).Value :=  PartQuan; //(SubEstQuant); //Quantity; //CopyRec.Quantity from form
                                  xlSheet.Range(Matrix(  9,RowNo)).Value :=  (PartCostHours * PartQuan); //  PartCostHours
                                  xlSheet.Range(Matrix( 10,RowNo)).Value :=  PartCostPrice;        //  PartCostPrice
                                  xlSheet.Range(Matrix( 11,RowNo)).Value :=  PartCostAmount;       //  PartCostAmount
                                  xlSheet.Range(Matrix( 12,RowNo)).Value :=  '';                   //  Kostendrager nieuw
                                  xlSheet.Range(Matrix( 13,RowNo)).Value :=  CalculatedCostPrice;  //  CalculatedCostPrice   12022015.GB ovv MM
                                  xlSheet.Range(Matrix( 14,RowNo)).Value :=  CalculatedCostAmount; //  CalculatedCostAmount
                                  xlSheet.Range(Matrix( 15,RowNo)).Value :=  Quantity;             //  Quantity
                                  xlSheet.Range(Matrix( 16,RowNo)).Value :=  PartSalesHours;       //  PartSalesHours
                                  xlSheet.Range(Matrix( 17,RowNo)).Value :=  PartSalesPrice;       //  PartSalesPrice
                                  xlSheet.Range(Matrix( 18,RowNo)).Value :=  PartSalesAmount;      //  PartSalesAmount
                                  xlSheet.Range(Matrix( 19,RowNo)).Value := "Calculated Cost Price";    // "Calculated Price"
                                  xlSheet.Range(Matrix( 20,RowNo)).Value := "Calculated Cost Amount";   // "Calculated Amount"
                                  xlSheet.Range(Matrix( 21,RowNo)).Value := "Offer Price";         // "Offer Price"
                                  xlSheet.Range(Matrix( 22,RowNo)).Value := "Offer Amount";        // "Offer Amount"
                                  xlSheet.Range(Matrix( 23,RowNo)).Value :=  FORMAT("Markup %", 0, getal);            // "Markup %"
                                  xlSheet.Range(Matrix( 24,RowNo)).Value :=  FORMAT(Margin, 0, getal);            // "Margin %"
                                  IF "Offer fixed" THEN
                                    xlSheet.Range(Matrix( 25,RowNo)).Value := 'Ja'                 // "Offer Fixed"
                                  ELSE
                                    xlSheet.Range(Matrix( 25,RowNo)).Value := '';                  // "Offer Fixed"
                                  xlSheet.Range(Matrix( 26,RowNo)).Value := "Sales Comment";        //  Verkoop opmerking

                                  // Format
                                  IF Level <> 0 THEN BEGIN
                                    "VAR"                := xlSheet.Range(Matrix( 4,RowNo)).Select;  // Hide errors. . .
                                    xlRange              := xlSheet.Range(Matrix( 4,RowNo));
                                    xlRange.InsertIndent := Level;
                                  END;

                                  IF "Estimate Part NEW".Part = '00.00.00' THEN BEGIN
                                    FOR i := 1 TO 26 DO
                                      xlSheet.Range(Matrix( i,RowNo)).Font.Bold := TRUE;
                                    //kolommen 3, 4, 6, 13, 21, 23, 24

                                    TotalRowNo += 1;
                                    xlSheet := xlApp.Worksheets.Item('Grand Total');
                                    xlSheet.Select;
                                    xlSheet.Range(Matrix( 1, TotalRowNo)).Value := "Sub-Estimate No.";
                                    xlSheet.Range(Matrix( 2, TotalRowNo)).Value := Textmark + STRSUBSTNO('%1',"Estimate Part NEW".Part);
                                    xlSheet.Range(Matrix( 3, TotalRowNo)).Value := Description;
                                    xlSheet.Range(Matrix( 4, TotalRowNo)).Value := CalculatedCostAmount;      //  CalculatedCostAmount
                                    xlSheet.Range(Matrix( 5, TotalRowNo)).Value := "Offer Price";                    // "Offer Price"
                                    xlSheet.Range(Matrix( 6, TotalRowNo)).Value := FORMAT("Markup %", 0, getal);    // "Markup %"
                                    xlSheet.Range(Matrix( 7, TotalRowNo)).Value := FORMAT(Margin, 0, getal);        // "Margin %"
                                    xlSheet := xlApp.Worksheets.Item('Calculatie');
                                    xlSheet.Select;
                                  END;

                                  RowNo += 1;

                                  // Add details
                                  Details(Estimate, EstimateLine);
                                END;

               OnPostDataItem=VAR
                                VarFrom@1100525002 : Variant;
                                VarTo@1100525001 : Variant;
                                Var@1100525000 : Variant;
                                PrintArea@1100525003 : TextConst 'NLD=$C$1:$AA$%1';
                              BEGIN

                                xlSheet.PageSetup.PrintArea(STRSUBSTNO(PrintArea, RowNo));
                                xlSheet.Outline.ShowLevels(1);

                                xlSheet.Range('C1').Select;
                              END;

               ReqFilterFields=Estimate No.,Sub-Estimate No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   SelectFilenameENABLED := (UseExistingFile);
                 END;

    }
    CONTROLS
    {
      { 1100525000;;Container;
                  Name=Main;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  Name=Opties;
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=Calculatiesheet;
                  SourceExpr=UseExistingFile }

      { 1100525006;2;Group  ;
                  Enabled=SelectFilenameENABLED;
                  GroupType=Group }

      { 1100525003;3;Field  ;
                  Name=Bestandnaam calculatiesheet;
                  SourceExpr=FileName2 }

      { 1100525004;2;Field  ;
                  Name=Padcode;
                  SourceExpr='PCALCSHEET';
                  Editable=False }

      { 1100525005;2;Field  ;
                  Name=Templatebestand;
                  SourceExpr=PathName;
                  Editable=False }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      UseExistingFile@1100525023 : Boolean;
      FileName@1100525022 : Text[250];
      FileName2@1100525021 : Text[1024];
      SheetName@1100525020 : Text[250];
      RowNo@1100525013 : Integer;
      ColumnNo@1100525012 : Integer;
      newsheetname@1100525011 : Text[30];
      CurrLEvel@1100525010 : Integer;
      TempEstimateLine@1100525009 : TEMPORARY Record 11072072;
      CalcultatedCostPrice@1100525008 : Decimal;
      "==="@1100525007 : Integer;
      Popup@1100525006 : Dialog;
      NumberOfEntries@1100525005 : Integer;
      CurrentEntry@1100525004 : Integer;
      PathName@1100525003 : Text[250];
      ControlRowNo@1100525002 : Integer;
      SurchargePercentage@1100525001 : Decimal;
      TotalRowNo@1100525000 : Integer;
      getal@1100525025 : TextConst 'NLD=<Sign><Integer><Decimals>';
      Text005@1100525024 : TextConst 'NLD=Padnaam template niet gevonden in standaardteksten\ probleem melden bij functioneel beheer a.u.b.';
      SelectFilenameENABLED@1100525026 : Boolean INDATASET;
      xlApp@1000000005 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlBook@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      xlSheet@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlSheets@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.6:{000208B1-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheets";
      xlRange@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.6:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      xlVPageBreaks@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.6:{00024402-0000-0000-C000-000000000046}:Unknown Automation Server.VPageBreak";

    PROCEDURE Matrix@1000000001(m_col@1000000000 : Integer;m_row@1000000001 : Integer) m_ret : Code[10];
    VAR
      xx@1000000002 : Integer;
      alf@1000000003 : Code[50];
      m_rest@1000000004 : Decimal;
      m_nu@1000000005 : Decimal;
      m_heel@1000000006 : Decimal;
      m_tus@1000000007 : Code[30];
    BEGIN
      IF m_col > 256 THEN BEGIN
       m_tus:='IV';
       ERROR('Selecteer minder artikelen (max 256)');
      END ELSE BEGIN
       alf:='ABCDEFGHIJKLMNOPQRSTUVWXYZ    ';
       REPEAT
         m_heel:=ROUND(m_col/26.000000001,1,'<');
         IF m_heel>0 THEN
          m_nu:=m_heel
         ELSE
          m_nu:=m_col;
         IF m_nu=0 THEN m_nu:=27;
         m_tus:=m_tus+COPYSTR(alf,m_nu,1);
         m_col:=ROUND(m_col-(m_heel*26),1);
       UNTIL m_heel<=0 ;
      END;
      m_ret:=DELCHR(STRSUBSTNO('%1 %2',m_tus,m_row));
    END;

    PROCEDURE FillHeading@1000000008();
    VAR
      Estimate@1000000006 : Record 11012151;
      TryOutSuccessor@1000000005 : Record 11012761;
      TryOutLine@1000000000 : Record 11012755;
      TryOutQuote@1000000001 : Record 11012758;
      TryOutList@1000000004 : Text[250];
      TryOutQuoteList@1000000003 : Text[250];
      kwoot@1000000002 : TextConst 'NLD=''';
    BEGIN
      IF "Estimate Part NEW".GETFILTER("Estimate No.") = '' THEN
        ERROR('Calculatienummer moet worden opgegeven in het filter');

      "Estimate Part NEW".COPYFILTER("Estimate No.", Estimate."No.");
      Estimate.FINDFIRST;

      FileName := COPYSTR(FileName, 1, STRLEN(FileName)-5) + ' ' + Estimate."No." + '.xlsx';

      TryOutSuccessor.SETCURRENTKEY("Estimate No.");
      TryOutSuccessor.SETRANGE("Estimate No.", Estimate."No.");
      IF TryOutSuccessor.FINDSET(FALSE, FALSE) THEN REPEAT
        IF TryOutSuccessor."Try-out No." <> '' THEN
          IF TryOutList = '' THEN BEGIN
            TryOutList     := TryOutSuccessor."Try-out No.";
            TryOutLine.SETRANGE("Try-out No.", TryOutSuccessor."Try-out No.");
          END ELSE
            TryOutList     := TryOutList + ', ' + TryOutSuccessor."Try-out No.";
        IF TryOutSuccessor."Try-out Quote" <> '' THEN
          IF TryOutQuoteList = '' THEN BEGIN
            TryOutQuoteList := TryOutSuccessor."Try-out Quote";
            IF TryOutQuote.GET(TryOutSuccessor."Try-out Quote") THEN
              TryOutQuote.CALCFIELDS("Salesperson Name");
          END ELSE
            TryOutQuoteList := TryOutList + ', ' + TryOutSuccessor."Try-out Quote";
      UNTIL TryOutSuccessor.NEXT = 0;

      Estimate.CALCFIELDS("Customer Name", "Name Estimator");

      TryOutLine.SETRANGE("Contact Type", 'END CUSTOMER');
      IF TryOutLine.FINDFIRST THEN
        TryOutLine.CALCFIELDS("Contact Name");

      // Fill header
      xlSheet.Range(Matrix(  4,  2 )).Value := FORMAT(WORKDATE);
      xlSheet.Range(Matrix(  4,  5 )).Value := kwoot + FORMAT(Estimate."Tender No.");
      xlSheet.Range(Matrix(  4,  8 )).Value := kwoot + FORMAT(Estimate."No.");
      xlSheet.Range(Matrix(  4,  4 )).Value := kwoot + Estimate.Description;
      xlSheet.Range(Matrix(  4,  6 )).Value := kwoot + TryOutList;
      xlSheet.Range(Matrix(  4,  7 )).Value := kwoot + TryOutQuoteList;
      xlSheet.Range(Matrix(  4, 10 )).Value := kwoot + Estimate."Customer Name";
      xlSheet.Range(Matrix(  4, 11 )).Value := kwoot + TryOutLine."Contact Name";
      xlSheet.Range(Matrix(  4, 12 )).Value := kwoot + Estimate."Name Estimator";
      xlSheet.Range(Matrix(  4, 13 )).Value := kwoot + TryOutQuote."Salesperson Name";
    END;

    PROCEDURE Details@1000000004(VAR Estimate@1000000008 : Record 11012151;VAR EstimateLine@1000000007 : Record 11072072);
    VAR
      EstimateLineCost@1000000011 : Record 11072072;
      TmpEstimateLineCost@1000000006 : TEMPORARY Record 11072072;
      CostEstimateNo@1000000004 : Code[20];
      GroupFrom@1000000005 : Integer;
      VarFrom@1000000003 : Variant;
      VarTo@1000000002 : Variant;
      Var@1000000001 : Variant;
      Discount@1000000000 : Decimal;
      Formula@1000000009 : Text[80];
      Vendor@1000000010 : Record 23;
      Details@1000000012 : Boolean;
    BEGIN
      //Ophalen regels
      //IF Level = 3 THEN BEGIN
      EstimateLine.SETRANGE("Estimate No."    , "Estimate Part NEW"."Estimate No."    );
      EstimateLine.SETRANGE("Sub-Estimate No.", "Estimate Part NEW"."Sub-Estimate No.");
      EstimateLine.SETRANGE("Part Group"      , "Estimate Part NEW"."Part Group"      );
      EstimateLine.SETRANGE( Part             , "Estimate Part NEW".Part              );

      //TEMP table vullen met kost-calculatie
      CostEstimateNo := COPYSTR("Estimate Part NEW"."Estimate No.", 1, STRLEN("Estimate Part NEW"."Estimate No.") - 1);
      EstimateLineCost.SETRANGE("Estimate No."    ,  CostEstimateNo                       );
      EstimateLineCost.SETRANGE("Sub-Estimate No.", "Estimate Part NEW"."Sub-Estimate No.");
      EstimateLineCost.SETRANGE("Part Group"      , "Estimate Part NEW"."Part Group"      );
      EstimateLineCost.SETRANGE( Part             , "Estimate Part NEW".Part              );
      IF EstimateLineCost.FINDSET(FALSE, FALSE) THEN REPEAT
        TmpEstimateLineCost := EstimateLineCost;
        TmpEstimateLineCost.INSERT(FALSE);
      UNTIL EstimateLineCost.NEXT = 0;
      TmpEstimateLineCost.RESET;

      // Loop over verkoopcalculatieregels
      IF EstimateLine.FINDSET THEN BEGIN
        GroupFrom := RowNo;
        Details   := FALSE;
        REPEAT
          // Ophalen kost-calculatieregel
          IF NOT TmpEstimateLineCost.GET(CostEstimateNo,
                                         EstimateLine."Sub-Estimate No.",
                                         EstimateLine."Part Group",
                                         EstimateLine.Part,
                                         EstimateLine."Line No.")
          THEN
            TmpEstimateLineCost.INIT;

          // Excel regel vullen
          WriteDetails(EstimateLine, TmpEstimateLineCost, Details);

          // Weggooien kost-calculatie regel uit TMP table
          IF TmpEstimateLineCost."Estimate No." <> '' THEN
            IF TmpEstimateLineCost.DELETE(FALSE) THEN;

        UNTIL EstimateLine.NEXT = 0;

        // Resterende regels uit TEMP table afdrukken
        IF TmpEstimateLineCost.FINDSET(FALSE, FALSE) THEN REPEAT
          //Excelregel is gebaseerd op Estimate Line; deze kopieren met lege aantallen en bedragen
          EstimateLine := TmpEstimateLineCost;
          EstimateLine.Quantity := 0;
          EstimateLine."Cost Amount" := 0;
          EstimateLine.Hours    := 0;

          // Excel regel vullen
          WriteDetails(EstimateLine, TmpEstimateLineCost, Details);
        UNTIL TmpEstimateLineCost.NEXT = 0;

        // Groep aanmaken in Excel
        IF Details THEN BEGIN
          VarFrom := Matrix(  3,GroupFrom);
          VarTo   := Matrix( 25,RowNo - 1) ;
          "Var"   := xlSheet.Range(VarFrom, VarTo).Select;  // Hide errors. . .
          xlRange := xlSheet.Range(VarFrom, VarTo);
          "Var"   := xlRange.Rows.Group;                    // Hide errors. . .
        END;
      END;
    END;

    PROCEDURE WriteDetails@1000000006(EstimateLineSales@1000000000 : Record 11072072;EstimateLineCost@1000000001 : Record 11072072;VAR DetailsExists@1000000004 : Boolean) : Boolean;
    VAR
      Formula@1000000002 : Text[250];
      RecVendor@1000000003 : Record 23;
      PartQuant@1000000005 : Decimal;
      Cnt@1000000006 : Integer;
      TempText@1000000007 : Text[50];
      IsReceptLine@1000000008 : Boolean;
      RecipeLine@1000000009 : Record 11072075;
    BEGIN
      IF (EstimateLineSales.Quantity = 0) AND (EstimateLineSales."Cost Amount"   = 0) AND (EstimateLineCost.Quantity  = 0) AND
         (EstimateLineCost."Cost Amount"    = 0) THEN
        EXIT;

      WITH EstimateLineSales DO BEGIN
        PartQuant := "Part Quantity";
        xlSheet.Range(Matrix( 3,RowNo)).Value := "Sub-Estimate No.";
        xlSheet.Range(Matrix( 4,RowNo)).Value := '';
        IF Recipe <> '' THEN BEGIN // Start afpellen receptregels
          xlSheet.Range(Matrix( 5,RowNo)).Value  := 'R';  //Recept
          IsReceptLine := TRUE;
        END;
        xlSheet.Range(Matrix(  6,RowNo)).Value   := Description;
        CALCFIELDS("Vendor Name");
        CASE TRUE OF
          "Trade Item"  <> '' :
            xlSheet.Range(Matrix(  7,RowNo)).Value   := "Trade Item";
          "Rate Code" <> '' :
            xlSheet.Range(Matrix(  7,RowNo)).Value   := 'Tarief code '  + "Rate Code";
          "Vendor Name" <> '':
            xlSheet.Range(Matrix(  7,RowNo)).Value   :=  "Vendor Name";
          Subcontractor <> '' :
            IF RecVendor.GET(Subcontractor) THEN
              xlSheet.Range(Matrix(  7,RowNo)).Value :=  RecVendor.Name;
        END;
        IF EstimateLineCost.Quantity <> 0 THEN
          xlSheet.Range(Matrix(  8,RowNo)).Value :=  (EstimateLineCost.Quantity * PartQuant);//CopyRec.Quantity from form
        IF EstimateLineCost.Hours <> 0 THEN
          xlSheet.Range(Matrix(  8,RowNo)).Value :=  (EstimateLineCost.Quantity * PartQuant);  //CopyRec.Quantity from form
        IF EstimateLineCost.Quantity <> 0 THEN
          Formula := '=' + FORMAT(EstimateLineCost."Cost Amount",0, getal) + '/' + FORMAT(EstimateLineCost.Quantity,0, getal)
        ELSE
          Formula := '=0';
        xlSheet.Range(Matrix( 10,RowNo)).Formula := Formula;
        xlSheet.Range(Matrix( 10,RowNo)).Calculate;
        xlSheet.Range(Matrix( 11,RowNo)).Formula := '=' + FORMAT(EstimateLineCost."Cost Amount" * PartQuant,0, getal) ;
        xlSheet.Range(Matrix( 11,RowNo)).Calculate;
        IF (EstimateLineCost."Cost Object Labor" <> '') THEN
          TempText := EstimateLineCost."Cost Object Labor";
        {IF (EstimateLineCost."Cost Object Material" <> '') THEN
          IF TempText = '' THEN
            TempText := EstimateLineCost."Cost Object Material"
          ELSE
            TempText := TempText + '-' + EstimateLineCost."Cost Object Material";}
        {IF (EstimateLineCost."Cost Object Subcontracting" <> '') THEN
          IF TempText = '' THEN
            TempText := EstimateLineCost."Cost Object Subcontracting"
          ELSE
            TempText := TempText + '-' + EstimateLineCost."Cost Object Subcontracting";}
       { IF (EstimateLineCost."Cost Object Plant" <> '') THEN
          IF TempText = '' THEN
            TempText := EstimateLineCost."Cost Object Plant"
          ELSE
            TempText := TempText + '-' + EstimateLineCost."Cost Object Plant";}
        xlSheet.Range(Matrix( 12,RowNo)).Value := TempText;
        IF (EstimateLineCost."Cost Object Labor" <> '')
          THEN Cnt += 1;
       // IF (EstimateLineCost."Cost Object Material" <> '') THEN
       //   Cnt += 1
        //ELSE
        BEGIN
          IF EstimateLineCost.Recipe <> '' THEN BEGIN
            Cnt := 1;


           // EstimateLineCost."Cost Object Material" := GetCostObject(EstimateLineCost);
            xlSheet.Range(Matrix( 12,RowNo)).Value := '';//EstimateLineCost."Cost Object Material";
          END;
        END;
        IF Cnt = 1 THEN BEGIN
          xlSheet.Range(Matrix( 13,RowNo)).Value   :=
            STRSUBSTNO('=+%1 + (VLOOKUP(%2;Opslag!A:B;2;FALSE) * %3)', Matrix( 10,RowNo), Matrix( 12,RowNo), Matrix( 10,RowNo));
          xlSheet.Range(Matrix( 14,RowNo)).Value   :=
            STRSUBSTNO('=+%1 + (VLOOKUP(%2;Opslag!A:B;2;FALSE) * %3)', Matrix( 11,RowNo), Matrix( 12,RowNo), Matrix( 11,RowNo));
        END ELSE BEGIN
          xlSheet.Range(Matrix( 13,RowNo)).Value   :=
            STRSUBSTNO('=+%1 + (VLOOKUP(%2;Opslag!A:B;2;FALSE) * %3) + (VLOOKUP(%4;Opslag!A:B;2;FALSE) * %5)'
              , Matrix( 10,RowNo), FORMAT(EstimateLineCost."Cost Object Labor"), Matrix( 10,RowNo)
              , FORMAT(EstimateLineCost."Cost Object Price"), Matrix( 10,RowNo));
          xlSheet.Range(Matrix( 14,RowNo)).Value   :=
            STRSUBSTNO('=+%1 + (VLOOKUP(%2;Opslag!A:B;2;FALSE) * %3) + (VLOOKUP(%4;Opslag!A:B;2;FALSE) * %5)'
            , Matrix( 11,RowNo), FORMAT(EstimateLineCost."Cost Object Labor"), Matrix( 11,RowNo)
            , FORMAT(EstimateLineCost."Cost Object Price"), Matrix( 11,RowNo));
        END;
        xlSheet.Range(Matrix( 15,RowNo)).Value   := PartQuant * Quantity;
        xlSheet.Range(Matrix( 16,RowNo)).Value   :=  Hours;
        IF Quantity <> 0 THEN
          xlSheet.Range(Matrix( 17,RowNo)).Value :=  ROUND("Cost Amount" / Quantity, 0.01)
        ELSE
          xlSheet.Range(Matrix( 17,RowNo)).Value :=  "Cost Amount";
        xlSheet.Range(Matrix( 18,RowNo)).Value   :=  "Cost Amount" * PartQuant;
        RowNo += 1;
        DetailsExists := TRUE;
      END;

      IF IsReceptLine THEN BEGIN
        RecipeLine.SETRANGE("Estimate No.", EstimateLineSales."Estimate No.");
        RecipeLine.SETRANGE("Sub-Estimate No.", EstimateLineSales."Sub-Estimate No.");
        RecipeLine.SETRANGE("Part Group", EstimateLineSales."Part Group");
        RecipeLine.SETRANGE(Part, EstimateLineSales.Part);
        RecipeLine.SETRANGE("Estimate Line", EstimateLineSales."Line No.");
        RecipeLine.SETRANGE("Recipe Group", EstimateLineSales."Recipe Group");
        RecipeLine.SETRANGE(Recipe, EstimateLineSales.Recipe);
        IF RecipeLine.FINDSET THEN BEGIN
          REPEAT
            CLEAR(TempText);
            CLEAR(Cnt);
            PartQuant := EstimateLineSales."Part Quantity";
            xlSheet.Range(Matrix( 3,RowNo)).Value := EstimateLineSales."Sub-Estimate No.";
            xlSheet.Range(Matrix( 4,RowNo)).Value := '';
            xlSheet.Range(Matrix( 5,RowNo)).Value  := 'RR';  //Recept
            xlSheet.Range(Matrix( 6,RowNo)).Value   :=  RecipeLine.Description;
            RecipeLine.CALCFIELDS("Vendor Name");
            CASE TRUE OF
              RecipeLine."Trade Item"  <> '' :
                xlSheet.Range(Matrix(  7,RowNo)).Value   := RecipeLine."Trade Item"; //RecipeLine."Item No.";
              RecipeLine."Rate Code" <> '' :
                xlSheet.Range(Matrix(  7,RowNo)).Value   := 'Tarief code '  + RecipeLine."Rate Code";
              RecipeLine."Vendor Name" <> '':
                xlSheet.Range(Matrix(  7,RowNo)).Value   :=  RecipeLine."Vendor Name";
              RecipeLine.Subcontractor <> '' :
                IF RecVendor.GET(RecipeLine.Subcontractor) THEN
                  xlSheet.Range(Matrix(  7,RowNo)).Value :=  RecVendor.Name;
            END;
            IF RecipeLine.Quantity <> 0 THEN
              xlSheet.Range(Matrix(  8,RowNo)).Value :=  (RecipeLine.Quantity * PartQuant);//CopyRec.Quantity from form
            IF RecipeLine.Hours <> 0 THEN
              xlSheet.Range(Matrix(  8,RowNo)).Value :=  (RecipeLine.Quantity * PartQuant);  //CopyRec.Quantity from form
            IF RecipeLine.Quantity <> 0 THEN
              Formula := '=' + FORMAT(RecipeLine."Cost Amount",0, getal) + '/' + FORMAT(RecipeLine.Quantity,0, getal)
            ELSE
              Formula :=                               '=0';
            xlSheet.Range(Matrix( 10,RowNo)).Formula := Formula;
            xlSheet.Range(Matrix( 10,RowNo)).Calculate;
            xlSheet.Range(Matrix( 11,RowNo)).Formula := '=' + FORMAT(RecipeLine."Cost Amount" * PartQuant,0, getal) ;
            xlSheet.Range(Matrix( 11,RowNo)).Calculate;
            IF (RecipeLine."Cost Object Labor" <> '') THEN
              TempText := RecipeLine."Cost Object Labor";
          {  IF (RecipeLine."Cost Object Material" <> '') THEN
              IF TempText = '' THEN
                TempText := RecipeLine."Cost Object Material"
              ELSE
                TempText := TempText + '-' + RecipeLine."Cost Object Material";
            IF (RecipeLine."Cost Object Subcontracting" <> '') THEN
              IF TempText = '' THEN
                TempText := RecipeLine."Cost Object Subcontracting"
              ELSE
                TempText := TempText + '-' + RecipeLine."Cost Object Subcontracting";
            IF (RecipeLine."Cost Object Plant" <> '') THEN
              IF TempText = '' THEN
                TempText := RecipeLine."Cost Object Plant"
              ELSE
                TempText := TempText + '-' + RecipeLine."Cost Object Plant";}
            xlSheet.Range(Matrix( 12,RowNo)).Value := TempText;
            IF (RecipeLine."Cost Object Labor" <> '') THEN
              Cnt += 1;
            IF (RecipeLine."Cost Object Price" <> '') THEN
              Cnt += 1
            ELSE BEGIN
              //RecipeLine."Cost Object Material" := GetCostObjectR(RecipeLine);
              xlSheet.Range(Matrix( 12,RowNo)).Value := RecipeLine."Cost Object Labor";
            END;
            IF Cnt = 1 THEN BEGIN
              xlSheet.Range(Matrix( 13,RowNo)).Value   :=
                STRSUBSTNO('=+%1 + (VLOOKUP(%2;Opslag!A:B;2;FALSE) * %3)', Matrix( 10,RowNo), Matrix( 12,RowNo), Matrix( 10,RowNo));
              xlSheet.Range(Matrix( 14,RowNo)).Value   :=
                STRSUBSTNO('=+%1 + (VLOOKUP(%2;Opslag!A:B;2;FALSE) * %3)', Matrix( 11,RowNo), Matrix( 12,RowNo), Matrix( 11,RowNo));
            END ELSE BEGIN
              xlSheet.Range(Matrix( 13,RowNo)).Value   :=
                STRSUBSTNO('=+%1 + (VLOOKUP(%2;Opslag!A:B;2;FALSE) * %3) + (VLOOKUP(%4;Opslag!A:B;2;FALSE) * %5)'
                  , Matrix( 10,RowNo), FORMAT(RecipeLine."Cost Object Labor"), Matrix( 10,RowNo)
                  , FORMAT(RecipeLine."Cost Object Price"), Matrix( 10,RowNo));
              xlSheet.Range(Matrix( 14,RowNo)).Value   :=
                STRSUBSTNO('=+%1 + (VLOOKUP(%2;Opslag!A:B;2;FALSE) * %3) + (VLOOKUP(%4;Opslag!A:B;2;FALSE) * %5)'
                , Matrix( 11,RowNo), FORMAT(RecipeLine."Cost Object Labor"), Matrix( 11,RowNo)
                , FORMAT(RecipeLine."Cost Object Price"), Matrix( 11,RowNo));
            END;
            xlSheet.Range(Matrix( 15,RowNo)).Value   := PartQuant * RecipeLine.Quantity;
            xlSheet.Range(Matrix( 16,RowNo)).Value   := RecipeLine.Hours;
            IF RecipeLine.Quantity <> 0 THEN
              xlSheet.Range(Matrix( 17,RowNo)).Value := ROUND(RecipeLine."Cost Amount" / RecipeLine.Quantity, 0.01)
            ELSE
              xlSheet.Range(Matrix( 17,RowNo)).Value := RecipeLine."Cost Amount" ;
            xlSheet.Range(Matrix( 18,RowNo)).Value   := RecipeLine."Cost Amount"  * PartQuant;
            RowNo += 1;
          UNTIL RecipeLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FieldValidate@1000000010();
    BEGIN
    END;

    PROCEDURE GetPath@1000000003(PathCode@1000000000 : Code[10]);
    VAR
      lStandardText@1000000001 : Record 7;
      lExtendedTextLine@1000000002 : Record 280;
      i@1000000003 : Integer;
    BEGIN
      //Tabelnaam,Nr.,Taal,Tekstnr.,Regelnr.
      IF NOT lStandardText.GET(PathCode) THEN
        ERROR(Text005)
      ELSE BEGIN
         lExtendedTextLine.SETRANGE("Table Name", lExtendedTextLine."Table Name"::"Standard Text");
         lExtendedTextLine.SETRANGE("No.",PathCode);
         IF lExtendedTextLine.FINDSET THEN BEGIN
           REPEAT
             i := i + 1;
             IF i < 3 THEN
               PathName += lExtendedTextLine.Text;
           UNTIL (lExtendedTextLine.NEXT = 0) OR (i = 3);
         END;
      END;
    END;

    PROCEDURE GetCostObject@1000000002(EstLine@1000000000 : Record 11012154) : Code[20];
    VAR
      ReceiptLine@1000000002 : Record 11012156;
    BEGIN
      ReceiptLine.SETRANGE("Estimate No.", EstLine."Estimate No.");
      ReceiptLine.SETRANGE("Sub-Estimate No.", EstLine."Sub-Estimate No.");
      ReceiptLine.SETRANGE("Part Group", EstLine."Part Group");
      ReceiptLine.SETRANGE(Part, EstLine.Part);
      ReceiptLine.SETRANGE("Estimate Line", EstLine."Line No.");
      ReceiptLine.SETRANGE("Recipe Group", EstLine."Recipe Group");
      ReceiptLine.SETRANGE(Recipe, EstLine.Recipe);
      ReceiptLine.SETFILTER("Cost Object Material", '<>%1', '');
      IF ReceiptLine.FINDFIRST THEN
        EXIT(ReceiptLine."Cost Object Material");
    END;

    PROCEDURE GetCostObjectR@1000000034(EstLine@1000000000 : Record 11012156) : Code[20];
    VAR
      ReceiptLine@1000000002 : Record 11012156;
    BEGIN
      ReceiptLine.SETRANGE("Estimate No.", EstLine."Estimate No.");
      ReceiptLine.SETRANGE("Sub-Estimate No.", EstLine."Sub-Estimate No.");
      ReceiptLine.SETRANGE("Part Group", EstLine."Part Group");
      ReceiptLine.SETRANGE(Part, EstLine.Part);
      ReceiptLine.SETRANGE("Estimate Line", EstLine."Line No.");
      ReceiptLine.SETRANGE("Recipe Group", EstLine."Recipe Group");
      ReceiptLine.SETRANGE(Recipe, EstLine.Recipe);
      ReceiptLine.SETFILTER("Cost Object Material", '<>%1', '');
      IF ReceiptLine.FINDFIRST THEN
        EXIT(ReceiptLine."Cost Object Material");
    END;

    EVENT xlSheet@1000000003::SelectionChange@1543(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1000000003::BeforeDoubleClick@1537(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1000000003::BeforeRightClick@1534(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1000000003::Activate@304();
    BEGIN
    END;

    EVENT xlSheet@1000000003::Deactivate@1530();
    BEGIN
    END;

    EVENT xlSheet@1000000003::Calculate@279();
    BEGIN
    END;

    EVENT xlSheet@1000000003::Change@1545(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1000000003::FollowHyperlink@1470(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlSheet@1000000003::PivotTableUpdate@2156(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlSheet@1000000003::PivotTableAfterValueChange@2886(TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlSheet@1000000003::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1000000003::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlSheet@1000000003::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlSheet@1000000003::PivotTableChangeSync@2894(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000004::Open@1923();
    BEGIN
    END;

    EVENT xlBook@1000000004::Activate@304();
    BEGIN
    END;

    EVENT xlBook@1000000004::Deactivate@1530();
    BEGIN
    END;

    EVENT xlBook@1000000004::BeforeClose@1546(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::BeforeSave@1547(SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::BeforePrint@1549(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::NewSheet@1550(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1000000004::AddinInstall@1552();
    BEGIN
    END;

    EVENT xlBook@1000000004::AddinUninstall@1553();
    BEGIN
    END;

    EVENT xlBook@1000000004::WindowResize@1554(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1000000004::WindowActivate@1556(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1000000004::WindowDeactivate@1557(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000004::PivotTableCloseConnection@2158(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000004::PivotTableOpenConnection@2159(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000004::Sync@2266(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1000000004::BeforeXmlImport@2283(Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::AfterXmlImport@2285(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1000000004::BeforeXmlExport@2287(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::AfterXmlExport@2288(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1000000004::RowsetComplete@2610(Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlBook@1000000004::SheetPivotTableChangeSync@2899(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlBook@1000000004::AfterSave@2900(Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlBook@1000000004::NewChart@2901(Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT xlApp@1000000005::NewWorkbook@1565(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookOpen@1567(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookActivate@1568(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookDeactivate@1569(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookBeforeClose@1570(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookBeforeSave@1571(Wb@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookBeforePrint@1572(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookNewSheet@1573(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookAddinInstall@1574(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookAddinUninstall@1575(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1000000005::WindowResize@1554(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1000000005::WindowActivate@1556(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1000000005::WindowDeactivate@1557(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookPivotTableCloseConnection@2160(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookPivotTableOpenConnection@2161(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookSync@2289(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookBeforeXmlImport@2290(Wb@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookAfterXmlImport@2291(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookBeforeXmlExport@2292(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookAfterXmlExport@2293(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookRowsetComplete@2611(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::AfterCalculate@2612();
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT xlApp@1000000005::ProtectedViewWindowOpen@2903(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1000000005::ProtectedViewWindowBeforeEdit@2905(Pvw@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::ProtectedViewWindowBeforeClose@2906(Pvw@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";Reason@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::ProtectedViewWindowResize@2908(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1000000005::ProtectedViewWindowActivate@2909(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1000000005::ProtectedViewWindowDeactivate@2910(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookAfterSave@2911(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1000000005::WorkbookNewChart@2912(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    BEGIN
    {
      23-11-2010.4PS.GB -- {} toegevoegd op verzoek van MM om controlesheet tijdelijk niet aan te maken
    }
    END.
  }
  RDLDATA
  {
  }
}

