OBJECT Report 78872 Verslag gereedmelding project
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00.BK.OK;
  }
  PROPERTIES
  {
    CaptionML=ENU=Close Projects;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF PostingDate = 0D THEN
                    ERROR(Text000);
                END;

    OnPostReport=BEGIN
                   ClosingProcedure.DisplayError;
                   ClosingProcedure.StartGenJnl;
                   CLEAR(ClosingProcedure);
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               OnPreDataItem=BEGIN
                               IF PostClosedProjects THEN BEGIN
                                 IF GETFILTER("Project Status") <> '' THEN
                                   IF NOT CONFIRM(Text006) THEN
                                     ERROR(Text007);

                                 SETRANGE("Project Status", "Project Status"::"Administrative Finished");
                               END ELSE BEGIN
                                 FILTERGROUP(6);
                                 SETFILTER("Project Status", '<=%1', "Project Status"::"Administrative Finished");
                                 ProjRec.FILTERGROUP(6);
                                 ProjRec.COPYFILTERS(Job);
                                 ProjRec.FILTERGROUP(0);
                                 FILTERGROUP(0);
                               END;

                               ProjRec.COPYFILTERS(Job);
                               IF NOT ProjRec.FINDFIRST THEN
                                 MESSAGE(Text001);
                             END;

               OnAfterGetRecord=VAR
                                  Language@1000000000 : Record 8;
                                BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
                                  CLEAR(ClosingProcedure); //Needed because each Project is committed now in ClosingProcedure.
                                  ClosingProcedure.SetSelection(gvType::Project, Job."No.", '', '', PostingDate,
                                                                IgnorePurchase, IgnoreSales, TRUE,TRUE, IgnoreFuturePostings, '', NOT PostClosedProjects);
                                  ClosingProcedure.SelSelectionProjInvent(IgnoreProjectInventory);
                                  ClosingProcedure.Check;

                                  //Openstaande Adviesorders
                                  IF NOT IgnoreProjectAdvOrders THEN
                                    CheckAdviseOrders("No.");
                                END;

               ReqFilterFields=No.,Project Status }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100409000;;Container;
                  Name=OptionsContainer;
                  ContainerType=ContentArea }

      { 1100409001;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1100409007;2;Field  ;
                  CaptionML=ENU=Posting Date;
                  SourceExpr=PostingDate }

      { 1100409002;2;Field  ;
                  CaptionML=ENU=Ignore Sales Control;
                  SourceExpr=IgnoreSales }

      { 1100409003;2;Field  ;
                  CaptionML=ENU=Ignore Purchase Control;
                  SourceExpr=IgnorePurchase }

      { 1100409004;2;Field  ;
                  CaptionML=ENU=Ignore Future Posting Control;
                  SourceExpr=IgnoreFuturePostings }

      { 1100409005;2;Field  ;
                  CaptionML=ENU=Ignore Project Inventory;
                  SourceExpr=IgnoreProjectInventory }

      { 1100409006;2;Field  ;
                  CaptionML=ENU=Ignore Project Advise Orders;
                  SourceExpr=IgnoreProjectAdvOrders }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012042 : TextConst 'ENU=Select Posting Date on Option Tab';
      Text001@11012043 : TextConst 'ENU=There are no Projects within the selected range';
      ProjRec@11012000 : Record 11072003;
      PostingDate@1210190001 : Date;
      PostClosedProjects@1210190006 : Boolean;
      IgnorePurchase@11012040 : Boolean;
      IgnoreSales@11012041 : Boolean;
      IgnoreFuturePostings@1100485002 : Boolean;
      IgnoreProjectInventory@1100525000 : Boolean;
      ClosingProcedure@1210190015 : Codeunit 11012046;
      Text002@1210190005 : TextConst 'ENU=Ignoring the Purchase Check could result in closing Projects too early.\';
      Text003@1210190004 : TextConst 'ENU=There could still be Purchase Orders present.';
      Text004@1210190003 : TextConst 'ENU=Ignoring the Sales Check could result in closing Projects too early.\';
      Text005@1210190002 : TextConst 'ENU=There could still not Invoiced Cost Plus Entries or Installment Lines present.';
      gvType@1210190000 : 'Project,Service Contract,Service Order';
      Text006@1100485000 : TextConst 'ENU="You have chosen to post and you''ve put a filter on Project Status. Would you like to continue posting Projects with Project Status Administrative Finished? "';
      Text007@1100485001 : TextConst 'ENU=Closing is stopped.';
      IgnoreProjectAdvOrders@1000000001 : Boolean;
      ErrorRec@1000000000 : Record 11012051;

    PROCEDURE FillSelectionRentalContractQte@1100485000();
    BEGIN
      //* Aanroep vanaf verhuurcontractofferte (F11071965) vanaf delete trigger.
      PostingDate := TODAY;
      IgnoreSales := FALSE;
      IgnorePurchase := FALSE;
      IgnoreFuturePostings := FALSE;
      PostClosedProjects := TRUE;
    END;

    PROCEDURE CheckAdviseOrders@1000000003(JobNo@1000000000 : Code[20]);
    VAR
      AdvOrders@1000000001 : Record 11012055;
    BEGIN
      AdvOrders.SETRANGE("Record Type", AdvOrders."Record Type"::Project);
      AdvOrders.SETRANGE("Project No.", JobNo);
      AdvOrders.SETRANGE("Process Status", AdvOrders."Process Status"::Open, AdvOrders."Process Status"::Released);
      IF AdvOrders.FINDSET THEN BEGIN
        REPEAT
          InsertError(AdvOrders);
        UNTIL AdvOrders.NEXT = 0;
      END;
    END;

    PROCEDURE InsertError@1000000008(pAdvOrders@1000000000 : Record 11012055);
    BEGIN
      ErrorRec.INIT;
      ErrorRec."User ID" := USERID;
      ErrorRec."Source Type" := ErrorRec."Source Type"::"Finish Service-Project";
      ErrorRec."Line No." := GetLineNo;
      ErrorRec."Error message" := 'Adviesorder open';
      ErrorRec.Description :=  pAdvOrders.Description;
      ErrorRec."Project No." := pAdvOrders."Project No.";
      ErrorRec."Item No." := pAdvOrders."Item No.";
      ErrorRec.INSERT;
    END;

    PROCEDURE GetLineNo@1000000010() : Integer;
    VAR
      lErrorRec@1000000000 : Record 11012051;
    BEGIN
      lErrorRec.RESET;
      lErrorRec.SETRANGE("User ID", USERID);
      lErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"Finish Service-Project");
      IF lErrorRec.FINDLAST THEN
        EXIT(lErrorRec."Line No." + 1)
      ELSE
        EXIT(1);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

