OBJECT Table 11012001 Budget Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11072003=rm;
    OnInsert=VAR
               lvSummarySheetLineRec@1100485000 : Record 11012064;
               lvBudgetLineRec@1100485001 : Record 11012001;
             BEGIN
               ProjRec.GET("Project No.");

               IF (ProjRec."Project Status" > ProjRec."Project Status"::Production) AND     //gb, 28-01-08
                  ("Extension Contract" = '')  THEN
                 ERROR(Text013,ProjRec."Project Status");

               IF (ProjRec."Project Status" > ProjRec."Project Status"::Finished) THEN
                 ERROR(Text013,ProjRec."Project Status");

               "Department Code" := ProjRec."Global Dimension 1 Code";  //**4PS.n DPA
               "Currency Code" := ProjRec."Currency Code";  //DP00883

               IF BudgetFixed(Rec) THEN
                 ERROR(Text014);

               FillMainProject;
               GetVersionDate;

               CLEAR("Purchase Action");
               CLEAR("Purchase Phase");
               CLEAR("Purchase Action Status");
               "Purch. Action Approval Date" := 0D;
               Advised := FALSE;
               "Copied to Adjustment" := FALSE;
               "Purchase Route Reference" := '';
               "Price Agreement" := FALSE;
               CLEAR("Option Line Type");

               UpdateCostControlStatus(UpdateAction::Insert);
               UpdateExtContractStatus;
               UpdateLogbook;

               IF NOT "Budget Summary Line" AND (Option = '') THEN BEGIN

                 IF ((ProjRec."Summary Sheet Project" <> '') AND ("Extension Contract" = '')) OR
                    ((ProjRec."Summary Sheet Contract" <> '') AND ("Extension Contract" <> '')) THEN BEGIN

                   lvBudgetLineRec.SETRANGE("Project No.", "Project No.");
                   lvBudgetLineRec.SETFILTER("Extension Contract", '%1', "Extension Contract");
                   lvBudgetLineRec.SETFILTER("Plot No.", '%1', '');
                   lvBudgetLineRec.SETFILTER(Option, '%1', '');
                   IF NOT lvBudgetLineRec.FINDFIRST THEN BEGIN
                     //Only add default summary sheet at insert of first line of a budget

                     lvSummarySheetLineRec.SETRANGE("Project No.", "Project No.");
                     lvSummarySheetLineRec.SETFILTER("Contract No.", '%1', "Extension Contract");
                     lvSummarySheetLineRec.SETFILTER("Plot No.", '%1', '');
                     lvSummarySheetLineRec.SETFILTER(Option, '%1', '');
                     IF NOT lvSummarySheetLineRec.FINDFIRST THEN BEGIN
                       lvSummarySheetLineRec.RESET;
                       IF "Extension Contract" <> '' THEN
                         lvSummarySheetLineRec.CopyTemplate2(ProjRec."Summary Sheet Contract", "Project No.", "Extension Contract",
                                                         '', '', '', '', '', '')
                       ELSE
                         lvSummarySheetLineRec.CopyTemplate2(ProjRec."Summary Sheet Project", "Project No.", '',
                                                         '', '', '', '', '', '');

                       lvSummarySheetLineRec.SETRANGE("Project No.", "Project No.");
                       lvSummarySheetLineRec.SETFILTER("Contract No.", '%1', "Extension Contract");
                       lvSummarySheetLineRec.SETFILTER("Plot No.", '%1', '');
                       lvSummarySheetLineRec.SETFILTER(Option, '%1', '');
                       IF lvSummarySheetLineRec.FINDFIRST THEN BEGIN
                         lvSummarySheetLineRec.ReCalcSummaryLines(Adjustment); //Summary Adjustment
                         lvSummarySheetLineRec.UpdateBudgetLines(TRUE,Adjustment);  //Summary Adjustment
                       END;
                     END;
                   END;
                END;

               END;
             END;

    OnModify=BEGIN
               UpdatePurchActionStatusInLine;
               UpdateCostControlStatus(UpdateAction::Modify);
               UpdateExtContractStatus;
               UpdateLogbook;
               IF "Source Type" = "Source Type"::"Recipe Header" THEN BEGIN  //db, 19-06-14
                 TESTFIELD(Hours, 0);
                 TESTFIELD(Amount, 0);
               END;
               IF (SalesPriceBudgetLine.GET("Project No.",Adjustment,"Extension Contract","Line No.")) THEN
                 SalesPriceBudgetLine.DELETE();  //DP00789-RFC20
             END;

    OnDelete=VAR
               lvBudgetLine@1100485000 : Record 11012001;
             BEGIN
               IF NOT DeleteCompleteProject THEN BEGIN  //*C004759.n
                 IF ("Purchase Action" <> '') AND ("Purchase Action Status" = "Purchase Action Status"::Definitive) THEN
                   FIELDERROR("Purchase Action Status",
                     STRSUBSTNO(Text015, FIELDCAPTION("Purchase Action"), "Purchase Action", "Purchase Action Status"));

                 IF "Line No." <> 0 THEN BEGIN   //db, 09-10-07 (when line no.=0 Navision will be closed; error probably caused by import)
                   lvBudgetLine.RESET;
                   lvBudgetLine.SETRANGE("Project No.","Project No.");
                   lvBudgetLine.SETRANGE("Attached to Line No.","Line No.");
                   lvBudgetLine.DELETEALL(TRUE);
                   IF ("Source Type" = "Source Type"::"Recipe Header") AND (Recipe <> '') THEN BEGIN
                     lvBudgetLine.SETRANGE("Attached to Line No.");
                     lvBudgetLine.SETRANGE("Attached to Recipe Line","Line No.");
                     lvBudgetLine.DELETEALL(TRUE);
                   END;
                 END;

                 UpdateCostControlStatus(UpdateAction::Delete);
                 UpdateLogbook;
               END;  //*C004759.n
               DeleteCommentLine(); // **4PS MVOS
               IF (SalesPriceBudgetLine.GET("Project No.",Adjustment,"Extension Contract","Line No.")) THEN
                  SalesPriceBudgetLine.DELETE();  //DP00789-RFC20
             END;

    OnRename=BEGIN
               UpdatePurchActionStatusInLine;
               UpdateLogbook;
             END;

    CaptionML=ENU=Budget Line;
    LookupPageID=Page11012005;
    DrillDownPageID=Page11012005;
  }
  FIELDS
  {
    { 1   ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No. }
    { 2   ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN BEGIN
                                                                  IF "Project No." = '' THEN BEGIN
                                                                    ElemRec.GET(Element);
                                                                    Chapter := ElemRec.Chapter;
                                                                    Paragraph := ElemRec.Paragraph;
                                                                  END ELSE BEGIN
                                                                    ProjElemRec.GET("Project No.",Element);
                                                                    Chapter := ProjElemRec.Chapter;
                                                                    Paragraph := ProjElemRec.Paragraph;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  CLEAR(Chapter);
                                                                  CLEAR(Paragraph);
                                                                END;
                                                                CALCFIELDS("Element Description");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 3   ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(Labor)) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor),
                                                                                                                           Global Dimension No.=CONST(2),
                                                                                                                           Project Filter=FIELD(Project No.))
                                                                                                                           ELSE IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                                                                                             Global Dimension No.=CONST(2),
                                                                                                                                                                                             Project Filter=FIELD(Project No.))
                                                                                                                                                                                             ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                            Project Filter=FIELD(Project No.))
                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                            Project Filter=FIELD(Project No.))
                                                                                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                                                                                                    Project Filter=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                JobsSetup@1100528000 : Record 315;
                                                                Selection@1100525000 : Integer;
                                                              BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");
                                                                  DimValRec.TESTFIELD(Blocked, FALSE);
                                                                  IF xRec."Cost Object" = '' THEN
                                                                    GetDefaultsCostObject(FALSE)
                                                                  ELSE BEGIN
                                                                    IF "Cost Object" <> xRec."Cost Object" THEN BEGIN
                                                                      IF "Item No." + "Basic Item" + "Trade Item" = '' THEN BEGIN
                                                                        Selection := STRMENU(Text018,3);
                                                                        IF Selection < 3 THEN
                                                                          GetDefaultsCostObject(Selection=2);
                                                                      END;
                                                                    END;
                                                                  END;
                                                                  //*C018222.sn
                                                                  JobsSetup.GET();
                                                                  IF (NOT JobsSetup."Cost Component Editable") AND (DimValRec."Cost Component" <> '') AND ("Cost Component" <> DimValRec."Cost Component") THEN
                                                                    VALIDATE("Cost Component", DimValRec."Cost Component");
                                                                  //*C018222.en
                                                                END;
                                                                IF ("Cost Object" <> xRec."Cost Object") AND ("FSC Type Code" = '') THEN  //*DP00129
                                                                  FillDefaultFscType();
                                                              END;

                                                   CaptionML=ENU=Cost Object }
    { 4   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 5   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 6   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CalcTotals;
                                                                IF CurrFieldNo = FIELDNO(Quantity) THEN
                                                                  CheckRecipeTotals;  //db, 02-02-09
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 7   ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN BEGIN
                                                                  IF ("Cost Type" = "Cost Type"::Material) THEN
                                                                    IF "Unit of Measure" <>  xRec."Unit of Measure" THEN  //db, 10-02-05
                                                                      CheckItemUnitConversion(Rec, xRec);
                                                                  CalcTotals;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 8   ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                // jhoek.080211.begin
                                                                // IF ("Cost Type" = "Cost Type"::Labor) THEN
                                                                IF ("Cost Type" = "Cost Type"::Labor) OR ("Cost Type" = "Cost Type"::Plant) THEN
                                                                // jhoek.080211.end
                                                                  CalcTotals
                                                                ELSE BEGIN
                                                                  MESSAGE(Text002, "Cost Type");
                                                                  Norm := 0;
                                                                END;

                                                                IF CurrFieldNo <> FIELDNO("Production Rate") THEN
                                                                  IF Norm <> 0 THEN
                                                                    "Production Rate" := 1 / Norm
                                                                  ELSE
                                                                    "Production Rate" := 0;
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 9   ;   ;Main Project No.    ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Main Project No. }
    { 10  ;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate".Code WHERE (Project Filter=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                BudgetHourRateManagement@1100528600 : Codeunit 11012358;
                                                                BudgetRateFoundAt@1100528601 : Text[250];
                                                              BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  Rate := 0;
                                                                  IF "Version Date" = 0D THEN
                                                                    GetVersionDate;
                                                                  Rate :=
                                                                    BudgetHourRateManagement.GetBudgetRate(
                                                                      0, "Project No.", '', '', "Department Code", "Rate Code", "Version Date", BudgetRateFoundAt);
                                                                  VALIDATE(Rate);  //DP00883
                                                                  CalcTotals;
                                                                END ELSE BEGIN
                                                                  IF CurrFieldNo = FIELDNO("Rate Code") THEN
                                                                    MESSAGE(Text003, "Cost Type");
                                                                  "Rate Code" := '';
                                                                  "Wage Component" := '';  //DP00236
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 11  ;   ;Rate                ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Rate (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(Rate, FALSE, TRUE, "Currency Code", "Project No.", '', 0D);  //DP00886

                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Rate;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 12  ;   ;Hours               ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Hours;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 13  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                CALCFIELDS("Total Amount","Total Hours","Total Labor","Total material","Total Subcontracting","Total Plant","Total Sundry");
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 14  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 15  ;   ;Project Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Project Description;
                                                   Editable=No }
    { 17  ;   ;Cost Object Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Code=FIELD(Cost Object),
                                                                                                    Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Cost Object Description;
                                                   Editable=No }
    { 18  ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=ENU=Element Description;
                                                   Editable=No }
    { 19  ;   ;Total Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Total Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 20  ;   ;Total Hours         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Hours WHERE (Project No.=FIELD(Project No.),
                                                                                              Adjustment=FIELD(Adjustment Filter),
                                                                                              Extension Contract=FIELD(Extension Filter),
                                                                                              Option=FIELD(Option Filter),
                                                                                              Purchase Action=FIELD(Purchase Action Filter),
                                                                                              Cost Type=FILTER(Labor)));
                                                   CaptionML=ENU=Total Hours;
                                                   Editable=No }
    { 21  ;   ;Line Quantity       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Budget Line");
                                                   CaptionML=ENU=Line Quantity;
                                                   Editable=No }
    { 22  ;   ;Cost Type           ;Option        ;OnValidate=VAR
                                                                BudgetRateManagement@1100528600 : Codeunit 11012358;
                                                                BudgetRateFoundAt@1100528601 : Text[250];
                                                              BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  IF "Cost Type" <> xRec."Cost Type" THEN
                                                                    IF CONFIRM(Text004,TRUE) THEN BEGIN
                                                                      "Cost Object" := '';
                                                                      "Cost Component" := '';
                                                                      //only fill fields below for cost type Material
                                                                      "Item No." := '';
                                                                      "Basic Item" := '';
                                                                      "Trade Item" := '';
                                                                      Manufacturer := '';
                                                                      "Vendor (Trade Item)" := '';
                                                                    END ELSE BEGIN
                                                                      "Cost Type" := xRec."Cost Type";
                                                                      EXIT;
                                                                    END;
                                                                END;
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  ProjRec.GET("Project No.");
                                                                  IF "Version Date" = 0D THEN
                                                                    GetVersionDate;
                                                                  Rate := BudgetRateManagement.GetBudgetRate(
                                                                    0, "Project No.", '', '', ProjRec."Global Dimension 1 Code", ProjRec."Default Rate Code", "Version Date", BudgetRateFoundAt);
                                                                  IF Rate = 0 THEN BEGIN
                                                                    IF Price <> 0 THEN
                                                                      ERROR(Text007);
                                                                  END ELSE
                                                                    "Rate Code" := ProjRec."Default Rate Code";
                                                                  IF (Rate <> 0) AND (Price <> 0) THEN BEGIN
                                                                    Norm := Price / Rate;
                                                                    "Production Rate" := 1 / Norm
                                                                  END;
                                                                  Price := 0;
                                                                END ELSE BEGIN
                                                                  IF (Rate <> 0) THEN
                                                                    Price := Norm * Rate;
                                                                  "Rate Code" := '';
                                                                  Rate := 0;
                                                                  Norm := 0;
                                                                  "Production Rate" := 0;
                                                                END;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry }
    { 23  ;   ;Price               ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(Price, FALSE, TRUE, "Currency Code", "Project No.", '', 0D);  //DP00886

                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  MESSAGE(Text005);
                                                                  Price := 0;
                                                                END ELSE BEGIN
                                                                  CalculateDiscount;  //db, 10-12-13: C007216
                                                                  CalcTotals;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 24  ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 25  ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 26  ;   ;Total Labor         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Labor),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Total Labor;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 27  ;   ;Total material      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Material),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Total material;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 28  ;   ;Total Subcontracting;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Subcontracting),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Total Subcontracting;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 29  ;   ;Total Plant         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Plant),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Total Plant;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 30  ;   ;Total Sundry        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Sundry),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter)));
                                                   CaptionML=ENU=Total Sundry;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 31  ;   ;Adjustment          ;Code10        ;TableRelation="Budget Adjustment".No. WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Adjustment }
    { 32  ;   ;Adjustment Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Adjustment Filter }
    { 33  ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Extension Contract }
    { 34  ;   ;Extension Filter    ;Code10        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Extension Filter }
    { 35  ;   ;Version Date        ;Date          ;CaptionML=ENU=Version Date }
    { 36  ;   ;Chapter             ;Code20        ;CaptionML=ENU=Chapter;
                                                   Editable=No }
    { 37  ;   ;Paragraph           ;Code20        ;CaptionML=ENU=Paragraph;
                                                   Editable=No }
    { 38  ;   ;Option              ;Code20        ;TableRelation=Option.Option WHERE (Project No.=FIELD(Project No.),
                                                                                      Plot No.=FIELD(Plot No.),
                                                                                      House Model=FIELD(House Model),
                                                                                      Main Group=FIELD(Main Group),
                                                                                      Group=FIELD(Group),
                                                                                      Sub Group=FIELD(Sub Group));
                                                   OnValidate=BEGIN
                                                                IF Option <> '' THEN BEGIN
                                                                  OptionRec.GET("Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option);
                                                                  IF NOT (OptionRec.Status IN [OptionRec.Status::Order, OptionRec.Status::Invoice]) THEN
                                                                    OptionRec.FIELDERROR(Status);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Option }
    { 39  ;   ;Option Filter       ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Option Filter }
    { 55  ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Department Code;
                                                   Editable=No }
    { 60  ;   ;Purchase Action     ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                ProjectPurchaseAction@1100525000 : Record 11012026;
                                                              BEGIN
                                                                IF "Purchase Action" <> xRec."Purchase Action" THEN BEGIN
                                                                  IF xRec."Purchase Action" <> '' THEN BEGIN
                                                                    IF ProjectPurchaseAction.GET("Project No.", xRec."Purchase Action") THEN BEGIN
                                                                      IF ProjectPurchaseAction.Status = ProjectPurchaseAction.Status::Definitive THEN
                                                                       FIELDERROR("Purchase Action Status", STRSUBSTNO(Text026, ProjectPurchaseAction.Status, FIELDCAPTION("Purchase Action")));
                                                                    END;
                                                                  END;
                                                                  IF "Purchase Action" <> '' THEN BEGIN
                                                                    IF ProjectPurchaseAction.GET("Project No.", "Purchase Action") THEN BEGIN
                                                                      IF ProjectPurchaseAction.Status = ProjectPurchaseAction.Status::Definitive THEN
                                                                       FIELDERROR("Purchase Action", STRSUBSTNO(Text027, "Purchase Action", FIELDCAPTION("Purchase Action Status"), ProjectPurchaseAction.Status));
                                                                    END;
                                                                  END;
                                                                END;
                                                                IF "Purchase Action" <> '' THEN
                                                                  IF ("Extension Contract" <> '') THEN BEGIN
                                                                    ExtensionRec.GET("Project No.","Extension Contract");
                                                                    IF NOT (ExtensionRec.Status IN [ExtensionRec.Status::Order, ExtensionRec.Status::"Invoicing Allowed"]) THEN
                                                                      ExtensionRec.FIELDERROR(Status);
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Purchase Action }
    { 65  ;   ;Purchase Action Filter;Code10      ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter }
    { 70  ;   ;Purchase Phase      ;Code10        ;CaptionML=ENU=Purchase Phase;
                                                   Numeric=Yes }
    { 80  ;   ;Purchase Action Status;Option      ;CaptionML=ENU=Purchase Action Status;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 85  ;   ;Purch. Action Approval Date;Date   ;CaptionML=ENU=Purch. Action Approval Date;
                                                   Editable=No }
    { 90  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                  ItemRec.TESTFIELD(Blocked,FALSE);
                                                                  ValidateVendor;   //db, 26-01-04
                                                                END;
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  "Variant Code" := '';
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 91  ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                                  ValidateVendor;   //db, 26-01-04
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 92  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 94  ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                TradeItemRec@1100525000 : Record 11012317;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 95  ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 101 ;   ;Advised             ;Boolean       ;CaptionML=ENU=Advised }
    { 105 ;   ;Copied to Adjustment;Boolean       ;CaptionML=ENU=Copied to Adjustment }
    { 110 ;   ;Extension Contract Status;Option   ;CaptionML=ENU=Extension Contract Status;
                                                   OptionCaptionML=ENU=Not Applicable,Applied,Offered,Order,Invoicing Allowed,Expired;
                                                   OptionString=Not Applicable,Applied,Offered,Order,Invoicing Allowed,Expired }
    { 115 ;   ;Total Summary       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter),
                                                                                               Budget Summary Line=CONST(Yes)));
                                                   CaptionML=ENU=Total Summary;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 120 ;   ;Total Amount Actual ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter),
                                                                                               Extension Contract Status=FILTER(Not Applicable|Order|Invoicing Allowed)));
                                                   CaptionML=ENU=Total Amount Actual;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;Total Hours Actual  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Hours WHERE (Project No.=FIELD(Project No.),
                                                                                              Adjustment=FIELD(Adjustment Filter),
                                                                                              Extension Contract=FIELD(Extension Filter),
                                                                                              Option=FIELD(Option Filter),
                                                                                              Purchase Action=FIELD(Purchase Action Filter),
                                                                                              Extension Contract Status=FILTER(Not Applicable|Order|Invoicing Allowed),
                                                                                              Cost Type=CONST(Labor)));
                                                   CaptionML=ENU=Total Hours Actual;
                                                   Description=DP01047;
                                                   Editable=No }
    { 140 ;   ;Total Labor Actual  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Labor),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter),
                                                                                               Extension Contract Status=FILTER(Not Applicable|Order|Invoicing Allowed)));
                                                   CaptionML=ENU=Total Labor Actual;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 150 ;   ;Total Material Actual;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Material),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter),
                                                                                               Extension Contract Status=FILTER(Not Applicable|Order|Invoicing Allowed)));
                                                   CaptionML=ENU=Total material Actual;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 160 ;   ;Total Subcontracting Actual;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Subcontracting),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter),
                                                                                               Extension Contract Status=FILTER(Not Applicable|Order|Invoicing Allowed)));
                                                   CaptionML=ENU=Total Subcontracting Actual;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 170 ;   ;Total Plant Actual  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Plant),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter),
                                                                                               Extension Contract Status=FILTER(Not Applicable|Order|Invoicing Allowed)));
                                                   CaptionML=ENU=Total Plant Actual;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 180 ;   ;Total Sundry Actual ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Cost Type=CONST(Sundry),
                                                                                               Adjustment=FIELD(Adjustment Filter),
                                                                                               Extension Contract=FIELD(Extension Filter),
                                                                                               Option=FIELD(Option Filter),
                                                                                               Purchase Action=FIELD(Purchase Action Filter),
                                                                                               Extension Contract Status=FILTER(Not Applicable|Order|Invoicing Allowed)));
                                                   CaptionML=ENU=Total Sundry Actual;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 190 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 191 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 195 ;   ;Project Related Name;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project - Cost Object".Name WHERE (Project No.=FIELD(Project No.),
                                                                                                          Cost Object=FIELD(Cost Object)));
                                                   CaptionML=ENU=Project Related Name;
                                                   Description=Name Cost Object;
                                                   Editable=No }
    { 200 ;   ;Plot No.            ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Plot No. }
    { 201 ;   ;Plot No. Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Plot No. Filter }
    { 210 ;   ;Budget Summary Line ;Boolean       ;CaptionML=ENU=Budget Summary Line }
    { 215 ;   ;Budget Summary Row No.;Code10      ;CaptionML=ENU=Budget Summary Row No. }
    { 220 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 225 ;   ;Reference No.       ;GUID          ;CaptionML=ENU=Reference No.;
                                                   Description=DP00042;
                                                   Editable=No }
    { 230 ;   ;Price Agreement     ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 240 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 250 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Gross Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, "Currency Code", "Project No.", '', 0D);  //DP00886

                                                                CalculateNettPrice;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 260 ;   ;Discount %          ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 270 ;   ;Option Line Type    ;Option        ;CaptionML=ENU=Option Line Type;
                                                   OptionCaptionML=ENU=" ,Option Budget,Option Surcharge";
                                                   OptionString=[ ,Option Budget,Option Surcharge];
                                                   Editable=No }
    { 271 ;   ;Budget Level for Options;Option    ;CaptionML=ENU=Budget Level for Options;
                                                   OptionCaptionML=ENU=Detailed,Option-Cost Type,Option-Cost Object,Option-Element-Cost Type,Option-Element-Cost Object;
                                                   OptionString=Detailed,Option-Cost Type,Option-Cost Object,Option-Element-Cost Type,Option-Element-Cost Object;
                                                   Editable=No }
    { 272 ;   ;Budget Level for Settl. Q.;Option  ;CaptionML=ENU=Budget Level for Settlement Quantities;
                                                   OptionCaptionML=ENU=Detailed,Cost Type,Cost Object,Element-Cost Type,Element-Cost Object;
                                                   OptionString=Detailed,SQ-Cost Type,SQ-Cost Object,SQ-Element-Cost Type,SQ-Element-Cost Object;
                                                   Editable=No }
    { 273 ;   ;Settl. Q. Line Type ;Option        ;CaptionML=ENU=Settlement Quantity Line Type;
                                                   OptionCaptionML=ENU=" ,Settlement Quantity Budget,Settlement Quantity Surcharge";
                                                   OptionString=[ ,SQ Budget,SQ Surcharge];
                                                   Editable=No }
    { 274 ;   ;Settl. Q. Line No.  ;Integer       ;CaptionML=ENU=Option Line No.;
                                                   Editable=No }
    { 275 ;   ;Option Line No.     ;Integer       ;CaptionML=ENU=Option Line No.;
                                                   Editable=No }
    { 280 ;   ;House Model         ;Code20        ;TableRelation="House Model".Model WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=House Model }
    { 290 ;   ;Main Group          ;Code20        ;TableRelation="Option Main Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Main Group }
    { 300 ;   ;Group               ;Code20        ;TableRelation="Option Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Group }
    { 310 ;   ;Sub Group           ;Code20        ;TableRelation="Option Sub Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Sub Group }
    { 320 ;   ;FSC Type Code       ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 400 ;   ;Tender Paragraph    ;Text10        ;TableRelation="Project Tender Paragraph"."Tender Paragraph" WHERE (Project No.=FIELD(Project No.),
                                                                                                                      Level=CONST(Tender Paragraph));
                                                   OnValidate=BEGIN
                                                                GWWMgtCU.FormatTenderElement("Tender Paragraph");
                                                                IF "Tender Paragraph" = '' THEN
                                                                  "Tender Paragraph Part" := ''
                                                                ELSE BEGIN
                                                                  IF "Tender Paragraph" <> xRec."Tender Paragraph" THEN BEGIN
                                                                    "Tender Paragraph Part" := '';
                                                                    FillDefaultTenderElementPart();
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph }
    { 405 ;   ;Description Tender Paragraph;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                                    Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Description Tender Paragraph;
                                                   Editable=No }
    { 406 ;   ;Tender Paragraph Text;Text80       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Text".Text WHERE (Project No.=FIELD(Project No.),
                                                                                                                  Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Tender Paragraph Text;
                                                   Editable=No }
    { 410 ;   ;Tender Paragraph Part;Text10       ;TableRelation="Project Tender Paragraph Part"."Tender Paragraph Part" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                Tender Paragraph=FIELD(Tender Paragraph));
                                                   OnValidate=BEGIN
                                                                GWWMgtCU.FormatTenderElementPart("Tender Paragraph Part");
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph Part }
    { 415 ;   ;Descr Tender Paragraph Part;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Part".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                                         Tender Paragraph=FIELD(Tender Paragraph),
                                                                                                                         Tender Paragraph Part=FIELD(Tender Paragraph Part)));
                                                   CaptionML=ENU=Description Tender Paragraph Part;
                                                   Editable=No }
    { 420 ;   ;Production Rate     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Production Rate" <> 0 THEN
                                                                  VALIDATE(Norm, 1 / "Production Rate")
                                                                ELSE
                                                                  VALIDATE(Norm,1);
                                                              END;

                                                   CaptionML=ENU=Production Rate;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=GWW }
    { 430 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 440 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Editable=No }
    { 441 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Editable=No }
    { 442 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Editable=No }
    { 443 ;   ;Scheme Code         ;Code15        ;CaptionML=ENU=Scheme Code }
    { 444 ;   ;Comments            ;Text50        ;CaptionML=ENU=Comments }
    { 445 ;   ;Supply              ;Boolean       ;CaptionML=ENU=Supply }
    { 446 ;   ;Comments for Logistics;Text50      ;CaptionML=ENU=Comments for Logistics }
    { 447 ;   ;Material Sheet      ;Option        ;CaptionML=ENU=Material Sheet;
                                                   OptionCaptionML=ENU=Customer and Assemly,Customer Only,Assembly only,Do not report;
                                                   OptionString=Customer and Assemly,Customer Only,Assembly only,Do not report }
    { 450 ;   ;Item Route Reference;Code20        ;CaptionML=ENU=Item Route Reference;
                                                   Editable=No }
    { 460 ;   ;Attached to Line No.;Integer       ;TableRelation="Budget Line"."Line No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 470 ;   ;Surcharge %         ;Decimal       ;OnValidate=BEGIN
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=rano }
    { 475 ;   ;Surcharge Price     ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Surcharge Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Surcharge Price", FALSE, TRUE, "Currency Code", "Project No.", '', 0D);  //DP00886

                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge Price;
                                                   BlankZero=Yes;
                                                   Description=rano;
                                                   AutoFormatType=2 }
    { 480 ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No.;
                                                   Editable=No }
    { 485 ;   ;Sub-Estimate No.    ;Code20        ;TableRelation="Sub-Estimate NEW"."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Sub-Estimate No.;
                                                   Description=DP00381;
                                                   Editable=No }
    { 490 ;   ;Line No. External Estimate;Integer ;CaptionML=ENU=Line No. External Estimate;
                                                   BlankZero=Yes }
    { 491 ;   ;Project Planning Activity No.;Code30;
                                                   TableRelation="Project Planning Activity".No. WHERE (Project No.=FIELD(Project No.),
                                                                                                        Type=CONST(Activity));
                                                   CaptionML=ENU=Project Planning Activity No. }
    { 492 ;   ;Proj. Plann. Parent Activ. No.;Code30;
                                                   TableRelation="Project Planning Activity".No. WHERE (Project No.=FIELD(Project No.),
                                                                                                        Type=CONST(Summary));
                                                   CaptionML=ENU=Proj. Plann. Parent Activ. No.;
                                                   Editable=No }
    { 493 ;   ;Proj. Plan. Par. Activ. Descr.;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Planning Activity".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                                     No.=FIELD(Project Planning Activity No.)));
                                                   CaptionML=ENU=Project Planning Activity Description;
                                                   Editable=No }
    { 499 ;   ;Converted           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Setup".Converted);
                                                   CaptionML=ENU=Converted;
                                                   Description=DP00381;
                                                   Editable=No }
    { 500 ;   ;Recipe Group        ;Code10        ;TableRelation=IF (Converted=CONST(Yes)) "Recipe Group".No.
                                                                 ELSE IF (Converted=CONST(No)) "Estimate Group".No. WHERE (Type=CONST(Recipe));
                                                   OnValidate=BEGIN
                                                                IF ("Recipe Group" = '') AND (Recipe <> '') THEN
                                                                  Recipe := '';
                                                              END;

                                                   CaptionML=ENU=Recipe Group;
                                                   Description=DP00381 }
    { 510 ;   ;Recipe              ;Code20        ;TableRelation=IF (Converted=CONST(Yes)) "Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group))
                                                                 ELSE IF (Converted=CONST(No)) "Recipe OLD".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   OnValidate=VAR
                                                                RecipeRec@1210190000 : Record 11020581;
                                                              BEGIN
                                                                IF (Recipe <> xRec.Recipe) AND (Recipe <> '') THEN BEGIN
                                                                  RecipeRec.GET("Recipe Group", Recipe);
                                                                  RecipeRec.TESTFIELD(Blocked, FALSE);
                                                                  Description := COPYSTR(RecipeRec.Description, 1, MAXSTRLEN(Description));
                                                                  "Description 2" := COPYSTR(RecipeRec.Description, MAXSTRLEN(Description) + 1);
                                                                  "Unit of Measure" := RecipeRec."Unit of Measure";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Recipe;
                                                   Description=DP00381 }
    { 520 ;   ;Source Type         ;Option        ;CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=" ,Recipe Header,Recipe Line";
                                                   OptionString=[ ,Recipe Header,Recipe Line] }
    { 530 ;   ;Attached to Recipe Line;Integer    ;TableRelation="Budget Line"."Line No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Attached to Recipe Line;
                                                   Editable=No }
    { 540 ;   ;Surcharge Amnt from Summary;Decimal;CaptionML=ENU=Overhead Surcharge Amount from Summary }
    { 550 ;   ;Overhead Surcharge from Summ.;Boolean;
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Overhead Surcharge from Summ.")) AND (NOT "Budget Summary Line") THEN BEGIN          //M25877 sn
                                                                  IF "Overhead Surcharge from Summ." THEN
                                                                    "Surcharge Amnt from Summary" := Amount
                                                                  ELSE
                                                                    "Surcharge Amnt from Summary" := 0;
                                                                END;  //M25877
                                                              END;

                                                   CaptionML=ENU=Overhead Surcharge from Summary }
    { 560 ;   ;Part of Line        ;Integer       ;TableRelation="Budget Line"."Line No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                DetermineBOMLevel("Part of Line","Level BOM");
                                                              END;

                                                   CaptionML=ENU=Part of Line }
    { 565 ;   ;Original Quantity   ;Decimal       ;CaptionML=ENU=Original Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 570 ;   ;Level BOM           ;Integer       ;CaptionML=ENU=Level BOM;
                                                   Description=Level after exploding BOM-Item;
                                                   Editable=No }
    { 575 ;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=BOM Item No.;
                                                   Description=Original Item before exploding BOM }
    { 580 ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD("Item No.");
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 590 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=VAR
                                                                PlantType@1100525000 : Record 11012551;
                                                              BEGIN
                                                                //mg, 03-03-11: M24448
                                                                TESTFIELD("Cost Type", "Cost Type"::Plant);

                                                                //**4PS.sn DPA Plant
                                                                PlantType.Code := "Plant Type";
                                                                PlantType.DPA_FindRecWithDPAFilterAppld;
                                                                //**4PS.en DPA Plant

                                                                IF ("Plant Type" <> xRec."Plant Type") OR (Description = '') THEN BEGIN
                                                                  PlantType.GET("Plant Type");
                                                                  Description := PlantType.Description;
                                                                  "Unit of Measure" := PlantType."Unit of Measure";
                                                                  "Cost Object" := PlantType."Cost Object";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 600 ;   ;Chapter Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Chapter)));
                                                   CaptionML=ENU=Chapter Description;
                                                   Editable=No }
    { 610 ;   ;Paragraph Description;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Paragraph)));
                                                   CaptionML=ENU=Paragraph Description;
                                                   Editable=No }
    { 620 ;   ;Cost Component Description;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cost Component".Description WHERE (Code=FIELD(Cost Component)));
                                                   CaptionML=ENU=Cost Component Description;
                                                   Editable=No }
    { 630 ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 640 ;   ;Purchase Order No.  ;Code20        ;CaptionML=ENU=Purchase Order No. }
    { 650 ;   ;Purchase Order Line No.;Integer    ;CaptionML=ENU=Purchase Order Line No. }
    { 660 ;   ;Price History 0 Exists;Boolean     ;CaptionML=ENU=Price History 0 Exists;
                                                   Editable=No }
    { 800 ;   ;Entity No.          ;Code20        ;CaptionML=ENU=Entity No.;
                                                   Description=DP00481;
                                                   Editable=No }
    { 810 ;   ;Rental Unit         ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Rental Unit }
    { 850 ;   ;Settlement Quantity Code;Code20    ;TableRelation="Settlement Quantity".Code WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF Option <> '' THEN BEGIN
                                                                  OptionRec.GET("Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option);
                                                                  IF NOT (OptionRec.Status IN [OptionRec.Status::Order, OptionRec.Status::Invoice]) THEN
                                                                    OptionRec.FIELDERROR(Status);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Settlement Quantity Code }
    { 851 ;   ;Settlement Quantity Cde Filter;Code20;
                                                   FieldClass=FlowFilter;
                                                   CaptionML=ENU=Settlement Quantity Code Filter }
    { 900 ;   ;Quantity Orig. Proj. Element;Decimal }
    { 1000;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                CheckCurrencyAgreement;  //db, 08-03-16
                                                                VALIDATE("Rate Code");
                                                                VALIDATE("Gross Price");
                                                                CalcTotals;
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Description=DP00883 }
    { 1001;   ;Currency Agreement  ;Boolean       ;CaptionML=ENU=Currency Agreement;
                                                   Description=DP00883 }
    { 1010;   ;Price (FCY)         ;Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE(Price, ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", '', 0D));  //DP00886
                                                              END;

                                                   CaptionML=ENU=Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   AutoFormatType=2 }
    { 1015;   ;Gross Price (FCY)   ;Decimal       ;OnValidate=VAR
                                                                SaveGrossPrice@1100525000 : Decimal;
                                                              BEGIN
                                                                //C026956.sn
                                                                //SetSkipValidateFCY(TRUE);
                                                                SaveGrossPrice := "Gross Price (FCY)";
                                                                VALIDATE("Gross Price", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Gross Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", '', 0D));  //DP00886
                                                                IF CurrFieldNo = FIELDNO("Gross Price (FCY)") THEN
                                                                  "Gross Price (FCY)" := SaveGrossPrice;  //function CalculateDiscount cleared input on validate GrossPrice
                                                                //C026956.en
                                                              END;

                                                   CaptionML=ENU=Gross Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   AutoFormatType=2 }
    { 1020;   ;Rate (FCY)          ;Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE(Rate, ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Rate (FCY)", FALSE, TRUE, "Currency Code", "Project No.", '', 0D));  //DP00886
                                                              END;

                                                   CaptionML=ENU=Rate (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1030;   ;Amount (FCY)        ;Decimal       ;CaptionML=ENU=Amount (FCY);
                                                   Description=DP00883;
                                                   Editable=No }
    { 1040;   ;Surcharge Price (FCY);Decimal      ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Surcharge Price", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Surcharge Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", '', 0D));  //DP00886
                                                              END;

                                                   CaptionML=ENU=Surcharge Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   AutoFormatType=2 }
  }
  KEYS
  {
    {    ;Project No.,Adjustment,Extension Contract,Option,Line No.;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Project No.,Element,Cost Object         ;SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Element,Cost Type,Cost Object,Extension Contract Status,Version Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Element,Extension Contract Status,Version Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Tender Paragraph,Tender Paragraph Part,Cost Object;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Chapter,Element,Cost Object ;SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Chapter,Cost Type,Extension Contract Status;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Paragraph,Cost Type,Extension Contract Status;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Purchase Action,Purchase Phase,Purchase Action Status;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Purchase Action,Cost Object,Description,Unit of Measure;
                                                   SumIndexFields=Quantity,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Cost Object,Purchase Action Status,Purch. Action Approval Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Cost Type,Adjustment,Extension Contract,Option,Line No.;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary }
    {    ;Project No.,Cost Type,Element,Cost Object,Version Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Cost Type,Purchase Action   ;SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Cost Type,Purchase Action Status,Purch. Action Approval Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Cost Type,Cost Object,Extension Contract Status,Version Date,Adjustment,Extension Contract,Option,Purchase Action,Budget Summary Line;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary }
    {    ;Project No.,Cost Type,Version Date      ;SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Extension Contract Status,Cost Type,Version Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Extension Contract,Cost Type,Cost Object,Extension Contract Status,Version Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Version Date                ;SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Element,Line No.            ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Extension Contract,Line No. ;MaintainSIFTIndex=No }
    {    ;Project No.,Adjustment,Line No.         ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Purchase Route Reference                ;MaintainSIFTIndex=No }
    {    ;Item Route Reference                     }
    {    ;Budget Summary Line,Project No.,Extension Contract,Element,Cost Type,Cost Object,Option;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Extension Contract Status,Cost Type,Version Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary }
    {    ;Main Project No.,Project No.,Purchase Action Status,Purch. Action Approval Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary }
    {    ;Main Project No.,Project No.,Cost Component,Adjustment,Extension Contract,Option,Cost Type,Line No.,Extension Contract Status,Purchase Action Status,Purch. Action Approval Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary }
    {    ;Main Project No.,Project No.,Cost Type,Cost Component,Version Date,Extension Contract Status;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Element,Chapter,Paragraph,Cost Type,Cost Object,Purchase Action Status,Extension Contract Status,Version Date,Purch. Action Approval Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Cost Object,Purchase Action Status,Purch. Action Approval Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary }
    {    ;Main Project No.,Project No.,Cost Type,Cost Object,Extension Contract Status,Version Date;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary,Quantity }
    {    ;Main Project No.,Cost Object            ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Cost Component          }
    {    ;Main Project No.,Element,Cost Object     }
    {    ;Project No.,Cost Component              ;MaintainSIFTIndex=No }
    {    ;Project No.,Project Planning Activity No.,Cost Object;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project Planning Activity No.,Cost Type,Cost Object;
                                                   SumIndexFields=Hours,Amount,Surcharge Amnt from Summary;
                                                   SQLIndex=Project Planning Activity No.,Cost Type,Cost Object,Amount }
    {    ;Proj. Plann. Parent Activ. No.          ;SumIndexFields=Hours,Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100525006 : TextConst 'ENU=%1 ''%2'' has %3 ''%4''. Material Requirement can''t be generated.';
      Text001@1100525007 : TextConst 'ENU=Material Requirement is already present for %1 ''%2''. This will be deleted first.\Continue?';
      Text002@11012015 : TextConst 'ENU=Cost Type of Line is %1, input of norm not allowed';
      Text003@11012016 : TextConst 'ENU=Cost Type of line is %1, input of rate code not allowed.';
      Text004@11012017 : TextConst 'ENU=Change Cost Type ?';
      Text005@11012018 : TextConst 'ENU=Unit Price not allowed because Cost Type of this record is Labor !';
      Text006@11012019 : TextConst 'ENU=Default Purchase Action %1 not present for Project %2.';
      DimValRec@11012001 : Record 349;
      ProjRec@11012002 : Record 11072003;
      AdjustmentRec@11012003 : Record 11012003;
      ExtensionRec@11012004 : Record 11012004;
      ElemRec@1210190003 : Record 11012060;
      ProjElemRec@11012005 : Record 11012010;
      ItemRec@1210190002 : Record 27;
      OptionRec@11012006 : Record 11012502;
      ProjPurchActRec@11012007 : Record 11012026;
      ElementFormat@11012010 : Codeunit 11012022;
      ValidateCu@11012011 : Codeunit 11012033;
      DimMgt@11012020 : Codeunit 408;
      GWWMgtCU@1100485000 : Codeunit 11012163;
      ItemTypeOpt@1100485006 : 'Item,Basic Item,Trade Item,Trade Vendor';
      UpdateAction@1100485004 : 'Insert,Modify,Delete';
      Text007@1210190004 : TextConst 'ENU=Switch to Cost Type Labor requires default Rate Code per Project (or there is no Budget Rate of this Budget Rate present before the current date).';
      Text008@1100485003 : TextConst 'ENU=Assign these Budget Lines to Purchase Action %1?';
      Text009@1100485001 : TextConst 'ENU=Do you want to remove Budget Lines from attached Purchase Actions  ?';
      Text011@1100485005 : TextConst 'ENU=Do you want to reverse quantities ?';
      Text012@1100485007 : TextConst 'ENU=%1 of %2 is not adopted, because Status is %3.';
      Text013@1100485008 : TextConst 'ENU=Adding Budget Lines is not allowed, job state is %1.';
      Text014@1100485009 : TextConst 'ENU=Budget is frozen, Changes not allowed.';
      Text015@1100525000 : TextConst 'ENU=of %1 ''%2'' is %3, delete budget line not allowed';
      Text016@1100525001 : TextConst 'ENU=Nothing to Apply';
      Text017@1100525002 : TextConst 'ENU=must be No (%1 ''%2'')';
      DeleteCompleteProject@1100409000 : Boolean;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text018@1100525003 : TextConst 'ENU=&Complete with Cost Object Data,Co&py Cost Object Data,&Don''t Copy Cost Object Data';
      Text019@1100525004 : TextConst 'ENU=Line is already adjusted. Continue?';
      Text020@1100525005 : TextConst 'ENU=%1 of %2 lines already adjusted. Continue?';
      Text021@1100525008 : TextConst 'ENU=%1 Material Requirement lines generated.';
      Text022@1100525013 : TextConst 'ENU=First select Purchase Budget Lines';
      Text023@1100525014 : TextConst 'ENU=First select Budget Lines';
      Text024@1100525015 : TextConst 'ENU=Copied %1 Line(s).';
      Text025@1100525009 : TextConst 'ENU=No lines with %1 selected.';
      SalesPriceBudgetLine@1100528000 : Record 11229910;
      SkipValidateFCY@1100525010 : Boolean;
      Text026@1100525011 : TextConst 'ENU=is ''%1'', modify %2 not allowed';
      Text027@1100525012 : TextConst 'ENU=''%1'' not allowed, %2 is ''%3''';
      ProjectCurrencyExchangeRate@1100525016 : Record 11020628;

    PROCEDURE CalcTotals@1();
    VAR
      WageCompRec@1100528901 : Record 11012014;
      OverTimeFactor@1100528900 : Decimal;
    BEGIN
      CASE "Cost Type" OF
        "Cost Type"::Labor:
          BEGIN
            Hours := ROUND("Time Quantity" * Quantity * Norm);
            IF (Quantity <> 0) OR // Amount can be entered manually when Quantity = 0 and Norm = 0;
               (Norm <> 0)
            THEN BEGIN
              Amount := ROUND("Time Quantity" * Quantity * Norm * Rate);
              "Amount (FCY)" := ROUND("Time Quantity" * Quantity * Norm * "Rate (FCY)");  //DP00883
            END;
            //DP00236.sn
            IF "Wage Component" <> '' THEN BEGIN
              OverTimeFactor := WageCompRec.GetBudgetOverTimeFactor("Estimate No.", "Wage Component");
              IF OverTimeFactor <> 0 THEN BEGIN
                Amount := Amount * OverTimeFactor;
                "Amount (FCY)" := "Amount (FCY)" * OverTimeFactor;  //DP00883
              END;
            END;
            //DP00236.en
          END;
        // jhoek.begin
        "Cost Type"::Plant:
          BEGIN
            CASE Norm = 0 OF
              TRUE: // "classic"
                BEGIN
                  Hours := 0;
                  Amount := ROUND("Time Quantity" * Quantity * (Price * ((100+"Surcharge %")/100) + "Surcharge Price"));
                  "Amount (FCY)" := ROUND("Time Quantity" * Quantity * ("Price (FCY)" * ((100+"Surcharge %")/100) + "Surcharge Price (FCY)"));  //DP00883
                END;
              FALSE: // GWW
                BEGIN
                  Hours := ROUND("Time Quantity" * Quantity * Norm);
                  Amount := ROUND("Time Quantity" * Quantity * Norm * Price);
                  "Amount (FCY)" := ROUND("Time Quantity" * Quantity * Norm * "Price (FCY)");  //DP00883
                END;
            END;
          END;
        // jhoek.end
        ELSE
          BEGIN
            Hours := 0;
            Amount := ROUND("Time Quantity" * Quantity * (Price * ((100+"Surcharge %")/100) + "Surcharge Price"));
            "Amount (FCY)" := ROUND("Time Quantity" * Quantity * ("Price (FCY)" * ((100+"Surcharge %")/100) + "Surcharge Price (FCY)"));  //DP00883
          END;
      END;
      IF (CurrFieldNo <> 0) THEN //Line is added for SQL performance when importing large number of lines
        CALCFIELDS("Total Amount","Total Hours","Total Labor","Total material","Total Subcontracting","Total Plant","Total Sundry");

      IF (CurrFieldNo <> 0)  AND ("Overhead Surcharge from Summ.") AND (NOT "Budget Summary Line") THEN   //M25877
        "Surcharge Amnt from Summary" := Amount;                                                          //M25877
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      //DP00883
      VALIDATE(Price, "Gross Price" - (("Gross Price"/100) * "Discount %"));
      "Price (FCY)" := "Gross Price (FCY)" - (("Gross Price (FCY)"/100) * "Discount %");
    END;

    PROCEDURE CalculateDiscount@1100525024();
    BEGIN
      //DP00883
      IF "Gross Price" <> 0 THEN BEGIN
        IF ("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Discount %" = 0) THEN BEGIN
          "Gross Price" := Price;
          "Gross Price (FCY)" := "Price (FCY)";
        END ELSE BEGIN
          "Discount %" := (("Gross Price" - Price) / "Gross Price") * 100;
        END;
      END ELSE BEGIN
        IF "Discount %" <> 100 THEN BEGIN
          "Gross Price" := Price / ((100 - "Discount %") / 100);
          "Gross Price (FCY)" := "Price (FCY)" / ((100 - "Discount %") / 100);
        END ELSE BEGIN
          "Gross Price" := Price;
          "Gross Price (FCY)" := "Price (FCY)";
        END;
      END;
    END;

    PROCEDURE GetDefaultsCostObject@3(Replace@1100525001 : Boolean);
    VAR
      ProjectPlanningActivity@1100525000 : Record 11012431;
      BudgetRateManagement@1100528601 : Codeunit 11012358;
      BudgetRateFoundAt@1100528602 : Text[250];
    BEGIN
      //Function can be used in 2 ways: 1. only add data, 2: replace data
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");
      DimValRec.TESTFIELD(Blocked, FALSE);

      IF (Description = '') OR Replace THEN
        Description := DimValRec.Name;
      IF ("Unit of Measure" = '') OR Replace  THEN
        VALIDATE("Unit of Measure", DimValRec."Unit of Measure");
      IF ("Unit of Time" = '') OR Replace  THEN
        VALIDATE("Unit of Time", DimValRec."Unit of Time");
      IF ("Cost Component" = '') OR Replace  THEN
        VALIDATE("Cost Component", DimValRec."Cost Component");

      CASE "Cost Type" OF
        "Cost Type"::Labor:
          BEGIN
            IF (Norm = 0) OR Replace  THEN
              VALIDATE(Norm, DimValRec.Norm);
            IF NOT ProjRec.GET("Project No.") THEN  //*C-025993.n
              ProjRec.INIT;
            //IF (("Rate Code" = '') AND (Rate = 0)) OR Replace THEN BEGIN  //*C-025993.o
            IF (("Rate Code" = '') AND (Rate = 0)) OR (Replace AND (ProjRec."Default Rate Code" = '')) THEN BEGIN  //*C-025993.n
              "Rate Code" := DimValRec."Rate Code";
              Rate := 0;
              IF "Version Date" = 0D THEN
                GetVersionDate;
              Rate := BudgetRateManagement.GetBudgetRate(
                0, "Project No.", '', '', ProjRec."Global Dimension 1 Code", "Rate Code", "Version Date", BudgetRateFoundAt);
            END;
          END;
        ELSE
          IF (Price = 0) OR Replace  THEN
            Price := DimValRec.Price;
      END;

      IF ("Purchase Action" = '') AND (DimValRec."Purchase Action" <> '') AND
         (("Extension Contract" = '') OR
          ("Extension Contract Status" IN ["Extension Contract Status"::Order, "Extension Contract Status"::"Invoicing Allowed" ]))
      THEN
        IF NOT ProjPurchActRec.GET("Project No.", DimValRec."Purchase Action") THEN
          MESSAGE(Text006, DimValRec."Purchase Action","Project No.")
        ELSE
          IF ProjPurchActRec.Status >= ProjPurchActRec.Status::Applied THEN
            MESSAGE(Text012, FIELDCAPTION("Purchase Action"), FIELDCAPTION("Cost Object"), FORMAT(ProjPurchActRec.Status))
          ELSE
            VALIDATE("Purchase Action", DimValRec."Purchase Action");

      //**4PS01.sn
      IF (DimValRec.Element <> '') AND ("Project No." <> '') THEN
      //Overwrite Element, even when it is already filled in the budget line, to keep the element-cost object consistent.
      //It also work this way in other tables (like Sales Line, Requisition Line, Purchase Line, ...
        VALIDATE(Element, DimValRec.Element);
      //**4PS01.en

      CalcTotals;

      // JH041208.begin
      IF DimValRec."Proj. Plann. Base Activ. Code" <> '' THEN BEGIN
        ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
        ProjectPlanningActivity.SETRANGE(Code, DimValRec."Proj. Plann. Base Activ. Code");

        IF ProjectPlanningActivity.FINDFIRST THEN
          VALIDATE("Project Planning Activity No.", ProjectPlanningActivity."No.");
      END;
      // JH041208.end
    END;

    PROCEDURE UpdateCostControlStatus@10(lUpdateAction@1100485002 : 'Insert,Modify,Delete');
    BEGIN
      IF ProjRec.GET("Project No.") THEN
        ProjRec.UpdateCostControlStatus(lUpdateAction, xRec."Cost Object", "Cost Object");
    END;

    PROCEDURE UpdatePurchActionStatusInLine@2();
    VAR
      ProjPurchActRec@11012000 : Record 11012026;
    BEGIN
      CLEAR("Purchase Action Status");
      "Purch. Action Approval Date" := 0D;
      IF "Purchase Action" <> '' THEN BEGIN
        IF ProjPurchActRec.GET("Project No.","Purchase Action") THEN BEGIN
          "Purchase Action Status" := ProjPurchActRec.Status;
          "Purch. Action Approval Date" := ProjPurchActRec."Approval Date";
        END;
      END;
    END;

    PROCEDURE UpdateExtContractStatus@1100525001();
    BEGIN
      IF "Extension Contract" <> '' THEN BEGIN
        IF ExtensionRec.GET("Project No.", "Extension Contract") THEN BEGIN
          IF (ExtensionRec.Status < ExtensionRec.Status::Order) AND ExtensionRec."Treat like Order" THEN
            "Extension Contract Status" := "Extension Contract Status"::Order
          ELSE
            "Extension Contract Status" := ExtensionRec.Status + 1;
        END ELSE
          "Extension Contract Status" := "Extension Contract Status"::Applied; //M25058
      END ELSE
        "Extension Contract Status" := "Extension Contract Status"::"Not Applicable";
    END;

    PROCEDURE UpdateLogbook@4();
    BEGIN
      IF Adjustment <> '' THEN
        IF AdjustmentRec.GET("Project No.",Adjustment) THEN
          AdjustmentRec.MODIFY(TRUE);

      //IF Option <> '' THEN BEGIN
      //  OptionRec.SETRANGE("Project No.","Project No.");
      //  OptionRec.SETRANGE(Option,Option);
      //  OptionRec.SETRANGE("Plot No.", "Plot No.");
      //  IF OptionRec.FINDSET(TRUE, FALSE) THEN
      //    REPEAT
      //      OptionRec.MODIFY(TRUE);
      //    UNTIL OptionRec.NEXT = 0;
      //END;

      IF "Extension Contract" <> '' THEN
        IF ExtensionRec.GET("Project No.","Extension Contract") THEN
          ExtensionRec.MODIFY(TRUE);

      //C010337.sn
      IF "Purchase Action" <> '' THEN BEGIN
        IF ProjPurchActRec.GET("Project No.","Purchase Action") THEN BEGIN
          ProjPurchActRec.MODIFY(TRUE);
        END;
      END;
      //C010337.en
    END;

    PROCEDURE ValidateItem@31(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      lvRefDate@11012001 : Date;
      lvDiscRef1@1100485002 : Code[20];
      lvDiscRef2@1100485001 : Code[20];
      lvDummyDate@1100485000 : Date;
    BEGIN
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
                              "Basic Item","Cost Object",Description,"Unit of Measure",Price,
                              "Discount %",lvDummyDate,"Gross Price","Description 2","Cost Component",
                              lvDiscRef1, lvDiscRef2, lvRefDate, '');  //db, 14-07-08

      IF LTypeArtOpt = LTypeArtOpt::"Trade Item" THEN
        "Price History 0 Exists" := ValidateCu.PriceHistory0Exists("Trade Item", "Vendor (Trade Item)", lvRefDate)
      ELSE
        "Price History 0 Exists" := FALSE;

      VALIDATE("Cost Object"); //call 8818

      IF ItemRec.GET("Item No.") THEN BEGIN
        IF ItemRec.Text <> '' THEN
          VALIDATE("External Text", ItemRec.Text);
      END;

      CheckItemRouteReference;
      VALIDATE("Gross Price");  //DP00883 (db, 29-10-15: calculate FCY-fields)
      CalcTotals;  //db, 21-08-07 (call 10188)
    END;

    PROCEDURE ValidateVendor@6506();
    VAR
      VendorRec@1210190000 : Record 23;
    BEGIN
      IF "Basic Item" = '' THEN EXIT;

      ProjRec.GET("Project No.");
      IF NOT VendorRec.GET(ProjRec."Project Supplier") THEN VendorRec.INIT;
      IF VendorRec."Vendor (Trade Item)" = '' THEN EXIT;

      xRec."Vendor (Trade Item)" := '';
      VALIDATE("Vendor (Trade Item)", VendorRec."Vendor (Trade Item)");

      IF "Trade Item" = '' THEN BEGIN
        xRec."Vendor (Trade Item)" := '';
        VALIDATE("Vendor (Trade Item)", Manufacturer);
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimensionManagement@1100525000 : Codeunit 408;
    BEGIN
      DimensionManagement.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") AND NOT BudgetFixed(Rec) THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1210190006 : Record 11012001;MainOldRec@1210190007 : Record 11012001);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF UnitFactorNew <> UnitFactorOld THEN BEGIN //db, 20-04-11: M26826
            IF "Gross Price" <> 0 THEN
              VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld))
            ELSE
              VALIDATE(Price, (Price * UnitFactorNew / UnitFactorOld));
          END;
        END;
      END;
    END;

    PROCEDURE GetDefaultPurchAction@1210190000();
    BEGIN
      "Purchase Action" := '';

      IF "Cost Object" = '' THEN
        EXIT;
      IF NOT
         (("Extension Contract" = '') OR
          ("Extension Contract Status" IN ["Extension Contract Status"::Order, "Extension Contract Status"::"Invoicing Allowed" ]))
      THEN
        EXIT;

      IF DimValRec.Code <> "Cost Object" THEN BEGIN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE,'');
        IF DimValRec.Code = '' THEN
          EXIT;
      END;

      IF DimValRec."Purchase Action" <> '' THEN
        IF ProjPurchActRec.GET("Project No.", DimValRec."Purchase Action") THEN
          IF ProjPurchActRec.Status < ProjPurchActRec.Status::Applied THEN
            "Purchase Action" := DimValRec."Purchase Action";
    END;

    PROCEDURE FillDefaultTenderElementPart@1100485000();
    VAR
      lvTenderElemPartRec@1100485000 : Record 11012264;
    BEGIN
      lvTenderElemPartRec.SETRANGE("Project No.", "Project No.");
      lvTenderElemPartRec.SETRANGE("Tender Paragraph", "Tender Paragraph");
      IF lvTenderElemPartRec.FINDFIRST THEN BEGIN
        IF lvTenderElemPartRec.NEXT = 0 THEN  //* Fill if one Part is present for Tender Paragraph
          "Tender Paragraph Part" := lvTenderElemPartRec."Tender Paragraph Part"
      END;
    END;

    PROCEDURE FillMainProject@1100485001();
    BEGIN
      IF "Project No." <> '' THEN BEGIN
        ProjRec.GET("Project No.");
        "Main Project No." := ProjRec."Main Project";
      END ELSE
        "Main Project No." := ''; //This occurs when using Budget Line is used as a temporary for import standard budget.
    END;

    PROCEDURE AssignToPurchaseAction@1100485003(PurchAction@11012000 : Code[20]);
    VAR
      lvBudgetLineRec@1210190000 : Record 11012001;
    BEGIN
      lvBudgetLineRec.COPY(Rec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(Text022);
          EXIT;
        END;
        IF CONFIRM(Text008,TRUE,PurchAction) THEN BEGIN
          FINDSET(TRUE,FALSE);
          REPEAT;
            "Purchase Action" := PurchAction;
            UpdatePurchActionStatusInLine;
            MODIFY(TRUE); //C010337.e
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DisconnectFromPurchaseAction@1100485002(PurchAction@1100485001 : Code[20]);
    VAR
      lvBudgetLineRec@1100485000 : Record 11012001;
    BEGIN
      lvBudgetLineRec.COPY(Rec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(Text022);
          EXIT;
        END;
        IF CONFIRM(Text009,TRUE,PurchAction) THEN BEGIN
          FILTERGROUP(9);
          IF PurchAction = '' THEN
            SETFILTER("Purchase Action", '<>%1', '');
          FILTERGROUP(0);
          //FINDSET(TRUE,FALSE);  //T003337.o
          IF NOT FINDSET(TRUE,FALSE) THEN  //T003337.n
            ERROR(Text025, FIELDCAPTION("Purchase Action"));
          REPEAT;
            IF Advised THEN  //* C-019130 (C-019131)
              FIELDERROR(Advised, STRSUBSTNO(Text017, FIELDCAPTION("Purchase Action"), "Purchase Action"));
            UpdateLogbook; //C010337.n
            "Purchase Action" := '';
            "Purchase Action Status" := 0;
            "Purch. Action Approval Date" := 0D;
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ReverseBudgetLines@1100485004();
    VAR
      lvBudgetLineRec@1100485000 : Record 11012001;
    BEGIN
      lvBudgetLineRec.COPY(Rec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDSET(FALSE,FALSE) THEN BEGIN
          MESSAGE(Text023);
          EXIT;
        END ELSE BEGIN
          REPEAT
            IF BudgetFixed(lvBudgetLineRec) THEN BEGIN
              MESSAGE(Text014);
              EXIT;
            END;
          UNTIL NEXT = 0;
        END;
        FINDFIRST;
        IF CONFIRM(Text011,TRUE) THEN BEGIN
          FINDSET(TRUE,FALSE);
          REPEAT;
            Quantity := Quantity * -1;
            Hours := Hours * -1;
            Amount := Amount * -1;
            CALCFIELDS("Total Amount","Total Hours","Total Labor","Total material",
              "Total Subcontracting","Total Plant","Total Sundry");
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE BudgetFixed@8(lvBudgetLineRec@1100485001 : Record 11012001) Fixed : Boolean;
    BEGIN
      Fixed := FALSE;

      WITH lvBudgetLineRec DO BEGIN
        CASE TRUE OF
          Adjustment <> '':
            IF AdjustmentRec.GET("Project No.", Adjustment) THEN
              Fixed := AdjustmentRec."Budget Correction Fixed";
          Option <> '':
            Fixed := FALSE; //Options can not be frozen
          "Extension Contract" <> '':
            IF ExtensionRec.GET("Project No.","Extension Contract") THEN
              Fixed := ExtensionRec."Budget Fixed";
          "Project No." <> '':
            IF ProjRec.GET("Project No.") THEN
              Fixed := ProjRec."Budget Fixed";
        END;
      END;

      EXIT(Fixed);
    END;

    PROCEDURE GetItemSpecifications@1100485006();
    BEGIN
      IF ItemRec.GET("Item No.") THEN BEGIN
        "Item Series" := ItemRec."Item Series";
        "Item Type" := ItemRec."Item Type";
        "Item Brand" := ItemRec."Item Brand";
      END;
    END;

    PROCEDURE CheckItemRouteReference@1100485005();
    VAR
      ItemFeatureRec@1100485000 : Record 11020301;
      DocFeatureRec@1100485002 : Record 11020303;
      LastRefNo@1100485001 : Code[20];
    BEGIN
      //db, 06-04-07 (rano)

      IF "Item No." <> xRec."Item No." THEN BEGIN
        DocFeatureRec.RESET;
        DocFeatureRec.SETRANGE("Document No.", "Item Route Reference");
        DocFeatureRec.SETRANGE("Item No.", xRec."Item No.");
        DocFeatureRec.DELETEALL;
        "Item Route Reference" := '';
      END;

      IF "Item No." = '' THEN EXIT;
      IF "Item Route Reference" = '' THEN BEGIN
        DocFeatureRec.RESET;
        IF DocFeatureRec.FINDLAST THEN
          LastRefNo := DocFeatureRec."Document No."
        ELSE
          LastRefNo := PADSTR('', MAXSTRLEN("Item Route Reference"), '0');
      END ELSE BEGIN
        EXIT;
      END;

      ItemFeatureRec.SETRANGE("Item No.", "Item No.");
      IF ItemFeatureRec.FINDSET THEN BEGIN
        LastRefNo := INCSTR(LastRefNo);
        "Item Route Reference" := LastRefNo;
        REPEAT
          DocFeatureRec.INIT;
          DocFeatureRec."Document No." := LastRefNo;
          DocFeatureRec."Item No." := ItemFeatureRec."Item No.";
          DocFeatureRec.Feature := ItemFeatureRec.Feature;
          DocFeatureRec.Value := ItemFeatureRec.Value;
          DocFeatureRec."Surcharge %" := ItemFeatureRec."Surcharge %";
          DocFeatureRec."Surcharge Price" := ItemFeatureRec."Surcharge Price";
          IF DocFeatureRec.INSERT THEN;
        UNTIL ItemFeatureRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetReferenceData@1100485008(VAR lvRefDate@1100485002 : Date;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485000 : Code[20]);
    BEGIN
      ProjRec.GET("Project No.");
      lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
      lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
      lvDiscRef2 := ProjRec."Purch Discount Term Group 2";
    END;

    PROCEDURE GetVersionDate@1100525000();
    BEGIN
      IF Adjustment <> '' THEN
        IF AdjustmentRec.GET("Project No.", Adjustment) THEN BEGIN
          "Version Date" := AdjustmentRec."Version Date";
          EXIT;
        END;

      IF "Extension Contract" <> '' THEN
        IF ExtensionRec.GET("Project No.","Extension Contract") THEN BEGIN
          "Version Date" := ExtensionRec."Version Date";
          EXIT;
        END;

      IF Option <> '' THEN BEGIN
        OptionRec.SETRANGE("Project No.","Project No.");
        OptionRec.SETRANGE(Option,Option);
        OptionRec.SETRANGE("Plot No.", "Plot No.");
        IF OptionRec.FINDFIRST THEN BEGIN
          "Version Date" := OptionRec."Version Date";
          EXIT;
        END;
      END;

      IF "Project No." <> '' THEN
        IF ProjRec.GET("Project No.") THEN
          "Version Date" := ProjRec."Version Date";
    END;

    PROCEDURE StartCopyAndApply@1100525003(lvStartfrom@1100525000 : 'Adjustment,Purchase Action';lvCostObjectCde@1100525001 : Code[20];lvAdjCde@1100525002 : Code[10]);
    VAR
      lvApplyBln@1100525003 : Boolean;
      lvText001@1100525004 : TextConst 'ENU=Do you immediately want to settle the Selected Lines?';
    BEGIN
      CASE lvStartfrom OF
        lvStartfrom::Adjustment:
          BEGIN
            lvApplyBln := CONFIRM(lvText001,TRUE);
            CopyAndApply(lvCostObjectCde,lvAdjCde,lvApplyBln);
          END;
        lvStartfrom::"Purchase Action":
          CopyAndApply(lvCostObjectCde,lvAdjCde,TRUE);
      END;
    END;

    PROCEDURE CopyAndApply@1100525002(lvCostObjectCde@1100525004 : Code[20];lvAdjCde@1100525001 : Code[10];lvApplyBln@1100525003 : Boolean);
    VAR
      lvBudgetLineRec@1100485000 : Record 11012001;
      NewBudgetLine@1100525000 : Record 11012001;
      TempNewBudgetLine@1100528400 : TEMPORARY Record 11012001;
      lvBudgetLine3Rec@1100525009 : Record 11012001;
      LastLineNo@1100525002 : Integer;
      lvBudgetAdjRec@1100525005 : Record 11012003;
      lvBudgetApplyFrm@1100525006 : Page 11012148;
      CounterAdjust@1100525010 : Integer;
      CounterMarked@1100525012 : Integer;
      lvAmntToApply@1100525007 : Decimal;
      lvDescription@1100525008 : Text[50];
      ConfirmText@1100525011 : Text[200];
    BEGIN
      lvBudgetLineRec.COPY(Rec);
      lvBudgetLineRec.Adjustment := lvAdjCde;
      IF BudgetFixed(lvBudgetLineRec) THEN
        ERROR(Text014);

      WITH lvBudgetLineRec DO BEGIN
        IF ISEMPTY THEN BEGIN
          MESSAGE(Text022);
          EXIT;
        END;

        SETRANGE("Copied to Adjustment", TRUE);
        CounterAdjust := COUNT;
        SETRANGE("Copied to Adjustment");  //Reset filter
        IF CounterAdjust > 0 THEN BEGIN
          CounterMarked := COUNT;
          IF CounterMarked = 1 THEN
            ConfirmText := Text019
          ELSE
            ConfirmText := STRSUBSTNO(Text020, CounterAdjust, CounterMarked);
          IF NOT CONFIRM(ConfirmText, FALSE) THEN
            EXIT;
        END;
        FINDSET(TRUE,FALSE);

        lvDescription := Description;
        LastLineNo := GetLastLineNo("Project No.", lvAdjCde, "Extension Contract", Option);
        REPEAT
          IF (Description <> lvDescription) AND (lvDescription <> '') THEN
            lvDescription := '';  //* Fill only when all processed budget lines have the same description
          TempNewBudgetLine := lvBudgetLineRec; //Call C-018496
          TempNewBudgetLine.Adjustment := lvAdjCde;
          TempNewBudgetLine."Copied to Adjustment" := FALSE;

          TempNewBudgetLine."Line No." := LastLineNo + 10000;
          LastLineNo := TempNewBudgetLine."Line No.";
          IF lvApplyBln THEN BEGIN
            TempNewBudgetLine.Quantity := TempNewBudgetLine.Quantity * -1;
            TempNewBudgetLine.Hours := TempNewBudgetLine.Hours * -1;
            TempNewBudgetLine.Amount := TempNewBudgetLine.Amount * -1;
          END;
          TempNewBudgetLine.GetVersionDate;
          TempNewBudgetLine.INSERT;
          lvAmntToApply := lvAmntToApply + Amount;

          "Copied to Adjustment" := TRUE;
          MODIFY;
        UNTIL NEXT = 0;

        IF TempNewBudgetLine.FINDSET THEN
          REPEAT
            NewBudgetLine := TempNewBudgetLine;
            NewBudgetLine.INSERT;
            NewBudgetLine.MARK(TRUE); //Call C-018496
          UNTIL TempNewBudgetLine.NEXT = 0;

        IF lvApplyBln THEN BEGIN
          IF lvAmntToApply = 0 THEN
            ERROR(Text016);

          COMMIT;
          lvBudgetAdjRec.GET("Project No.",lvAdjCde);
          lvBudgetApplyFrm.SetDefaults(lvBudgetAdjRec,lvAmntToApply,lvCostObjectCde,"Purchase Action");
          IF lvDescription <> '' THEN
            lvBudgetApplyFrm.SetDefaultNewDescription(lvDescription);

          NewBudgetLine.MARKEDONLY(TRUE); //Call C-018496
          lvBudgetApplyFrm.SetMarkedBudgetLines(NewBudgetLine, TRUE); //Call C-018496
          lvBudgetApplyFrm.RUNMODAL;

        END;
      END;
      CLEARMARKS;
    END;

    LOCAL PROCEDURE GetLastLineNo@1100528400(ProjectNo@1100528400 : Code[20];Adjustment@1100528401 : Code[10];ExtensionContract@1100528402 : Code[10];Option@1100528403 : Code[20]) LineNo : Integer;
    VAR
      BudgetLine@1100528404 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Project No.", ProjectNo);
      BudgetLine.SETRANGE(Adjustment, Adjustment);
      BudgetLine.SETRANGE("Extension Contract", ExtensionContract);
      BudgetLine.SETRANGE(Option, Option);
      IF BudgetLine.FINDLAST THEN
        LineNo := BudgetLine."Line No.";
    END;

    PROCEDURE CheckRecipeTotals@1210190002();
    VAR
      MainRec@1210190000 : Record 11012001;
      OldQuan@1210190001 : Decimal;
      NewQuan@1210190002 : Decimal;
    BEGIN
      //db, 02-02-09
      IF "Source Type" <> "Source Type"::"Recipe Header" THEN EXIT;

      IF xRec.Quantity = 0 THEN
        OldQuan := 1
      ELSE
        OldQuan := xRec.Quantity;
      IF Quantity = 0 THEN
        NewQuan := 1
      ELSE
        NewQuan := Quantity;

      MainRec.SETRANGE("Project No.", "Project No.");
      MainRec.SETRANGE("Extension Contract", "Extension Contract");
      MainRec.SETRANGE(Adjustment, Adjustment);
      MainRec.SETRANGE(Option, '');

      MainRec.SETRANGE("Source Type", MainRec."Source Type"::"Recipe Line");
      MainRec.SETRANGE("Recipe Group", "Recipe Group");
      MainRec.SETRANGE(Recipe, Recipe);
      MainRec.SETRANGE("Attached to Recipe Line", "Line No.");
      IF MainRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          MainRec.Quantity := MainRec.Quantity * NewQuan / OldQuan;
          MainRec.CalcTotals;
          MainRec.MODIFY(TRUE);
        UNTIL MainRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyAndPasteRTC@1100525508(ProjectNo@1100525004 : Code[20];ExtensionCode@1100525001 : Code[20];CurrLineNo@1100525006 : Integer);
    VAR
      BudgetLine2@1100525000 : Record 11012001;
      TempBudgetLine@1100525005 : TEMPORARY Record 11012001;
      NextLineNo@1100525002 : Integer;
      LineCount@1100525003 : Integer;
      PrevLineNo@1100525007 : Integer;
      Gap@1100525008 : Integer;
    BEGIN
      BudgetLine2.COPY(Rec);
      BudgetLine2."Project No." := ProjectNo;
      BudgetLine2."Extension Contract" := ExtensionCode;

      IF BudgetFixed(BudgetLine2) THEN
        ERROR(Text014);

      IF NOT FINDSET(FALSE,FALSE) THEN BEGIN
        MESSAGE(Text023);
        EXIT;
      END;

      LineCount := 0;
      REPEAT;
        LineCount += 1;
        //Temp Table is needed in case all records are selected
        TempBudgetLine := Rec;
        TempBudgetLine."Project No." := ProjectNo;
        TempBudgetLine."Extension Contract" := ExtensionCode;
        TempBudgetLine.Adjustment := '';
        TempBudgetLine.Option := '';
        TempBudgetLine."Line No." := LineCount;
        TempBudgetLine.INSERT;
      UNTIL NEXT = 0;

      IF TempBudgetLine.FINDSET THEN BEGIN
        BudgetLine2.RESET;
        BudgetLine2.SETCURRENTKEY("Project No.",Adjustment,"Extension Contract",Option,"Line No.");
        BudgetLine2.SETRANGE("Project No.", TempBudgetLine."Project No.");
        BudgetLine2.SETRANGE(Adjustment, TempBudgetLine.Adjustment);
        BudgetLine2.SETRANGE("Extension Contract", TempBudgetLine."Extension Contract");
        BudgetLine2.SETRANGE(Option,TempBudgetLine.Option);
        IF CurrLineNo > 0 THEN BEGIN
          BudgetLine2.SETFILTER("Line No.", '<%1', CurrLineNo);
          IF BudgetLine2.FINDLAST THEN
            PrevLineNo := BudgetLine2."Line No.";
          IF LineCount < (CurrLineNo - PrevLineNo) THEN BEGIN
            Gap := ROUND((CurrLineNo - PrevLineNo) / (LineCount + 1), 1);
            IF Gap > 10000 THEN
              Gap := 10000;
            NextLineNo := PrevLineNo + Gap;
          END;
          BudgetLine2.SETRANGE("Line No."); //Reset filter
        END;
        IF (Gap = 0) OR (NextLineNo = 0) THEN BEGIN
          Gap := 10000;
          NextLineNo := Gap;
          IF BudgetLine2.FINDLAST THEN
            NextLineNo := BudgetLine2."Line No." + Gap;
        END;
        REPEAT
          BudgetLine2 := TempBudgetLine;
          BudgetLine2."Line No." := NextLineNo;
          BudgetLine2.INSERT(TRUE);
          NextLineNo := NextLineNo + Gap;
        UNTIL TempBudgetLine.NEXT = 0;
      END;

      IF LineCount > 0 THEN
        MESSAGE(Text024, LineCount);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012001) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012001');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Budget Line", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE ChangeQuantityExplodedLines@1100525004(QuantityFactor@1100525000 : Decimal);
    VAR
      BudgetLine2@1100525001 : Record 11012001;
    BEGIN
      //**4PS
      BudgetLine2.RESET;
      BudgetLine2.SETRANGE("Project No.","Project No.");
      BudgetLine2.SETRANGE("Part of Line","Line No.");
      BudgetLine2.SETFILTER("Line No.", '<>%1', "Line No.");
      IF BudgetLine2.FINDSET(TRUE, FALSE) THEN
        REPEAT
          IF NOT ((BudgetLine2."Item No." = '') AND (BudgetLine2."Original Quantity" = 0)) THEN BEGIN
            IF BudgetLine2."Item No." = '' THEN BEGIN
              BudgetLine2.ChangeQuantityExplodedLines(QuantityFactor);
              BudgetLine2."Original Quantity" := QuantityFactor * BudgetLine2."Original Quantity";
            END ELSE
              BudgetLine2.VALIDATE(Quantity, QuantityFactor * BudgetLine2.Quantity);
            BudgetLine2.MODIFY;
          END;
        UNTIL BudgetLine2.NEXT = 0;
    END;

    PROCEDURE GenerateBudgetToMatReqLines@1100525005(ProjectNoFilter@1100525002 : Text[250]);
    VAR
      Job@1100525005 : Record 11072003;
      ProjectMaterialReqLine@1100525004 : Record 11012526;
      BudgetLine@1100525003 : Record 11012001;
      NoOfLinesGenerated@1210190000 : Integer;
    BEGIN
      //kzwerver, 110120, n
      //Checks are done upfront, because the input is a filter and not a single project number
      Job.SETFILTER("No.", '%1', ProjectNoFilter);
      IF Job.FINDSET THEN REPEAT
        IF Job."Project Status" >= Job."Project Status"::"Technical Finished" THEN BEGIN
          MESSAGE(Text000, Job.FIELDCAPTION(Job."No."), Job."No.", Job.FIELDCAPTION("Project Status"), Job."Project Status");
          EXIT;
        END;
        ProjectMaterialReqLine.SETRANGE("Project No.", Job."No.");
        ProjectMaterialReqLine.SETRANGE(Origin, ProjectMaterialReqLine.Origin::Budget);
        IF (ProjectMaterialReqLine.COUNT > 0) THEN BEGIN
          IF (NOT CONFIRM(Text001, FALSE, Job.FIELDCAPTION("No."), Job."No.")) THEN
            EXIT;
        END;
        DeleteMatReqLines(Job."No.");
      UNTIL (Job.NEXT = 0);

      BudgetLine.SETFILTER("Project No.", '%1', ProjectNoFilter);
      BudgetLine.SETFILTER("Cost Type", '%1|%2', BudgetLine."Cost Type"::Subcontracting, BudgetLine."Cost Type"::Material);
      IF BudgetLine.FINDSET THEN REPEAT
        GenerateBudgetToMatReqLine(BudgetLine);
        //db.sn, 30-09-15
        BudgetLine.Advised := TRUE;  //C024706: required for Available Quantity per period (page 353)
        BudgetLine.MODIFY;
        //db.en, 30-09-15
        NoOfLinesGenerated +=1;
      UNTIL (BudgetLine.NEXT = 0);
      MESSAGE(Text021, NoOfLinesGenerated);
    END;

    LOCAL PROCEDURE GenerateBudgetToMatReqLine@1100525006(BudgetLine@1100525002 : Record 11012001);
    VAR
      ProjectMaterialReqLine@1100525001 : Record 11012526;
      Job@1100525000 : Record 11072003;
      ProjectElement@1100525003 : Record 11012010;
    BEGIN
      //kzwerver, 110120, n
      ProjectMaterialReqLine.INIT;

      ProjectMaterialReqLine."Project No." := BudgetLine."Project No.";
      ProjectMaterialReqLine.Element := BudgetLine.Element;
      ProjectMaterialReqLine.Origin := ProjectMaterialReqLine.Origin::Budget;
      ProjectMaterialReqLine."Item No." := BudgetLine."Item No.";
      ProjectMaterialReqLine."Basic Item" := BudgetLine."Basic Item";
      ProjectMaterialReqLine."Trade Item" := BudgetLine."Trade Item";
      ProjectMaterialReqLine."Vendor (Trade Item)" := BudgetLine."Vendor (Trade Item)";
      ProjectMaterialReqLine.Manufacturer := BudgetLine.Manufacturer;
      ProjectMaterialReqLine.Description := BudgetLine.Description;
      ProjectMaterialReqLine.Description2 := BudgetLine."Description 2";
      ProjectMaterialReqLine."Variant Code" := BudgetLine."Variant Code";
      //DP00803.sn
      ProjectMaterialReqLine."Expected Price" := BudgetLine.Price;
      ProjectMaterialReqLine.VALIDATE(Quantity, BudgetLine.Quantity);  //db, 25-08-15 (validate Quantity to Procure and Expected Amount)
      //DP00803.en
      ProjectMaterialReqLine."Unit of Measure" := BudgetLine."Unit of Measure";
      ProjectMaterialReqLine."Cost Object" := BudgetLine."Cost Object";
      IF (BudgetLine.Element = '') THEN BEGIN
        Job.GET(BudgetLine."Project No.");
        ProjectMaterialReqLine."Delivery Date" := Job."Starting Date";
      END ELSE BEGIN
        ProjectElement.GET(BudgetLine."Project No.", BudgetLine.Element);
        ProjectMaterialReqLine."Delivery Date" := ProjectElement."Starting Date";
      END;
      ProjectMaterialReqLine."Unique Traceable" := TRUE;
      ProjectMaterialReqLine."Exclude Logistics" := FALSE;

      IF BudgetLine."Entity No." <> '' THEN BEGIN
        ProjectMaterialReqLine."Entity Type" := ProjectMaterialReqLine."Entity Type"::Position;
        ProjectMaterialReqLine."Entity No." := BudgetLine."Entity No.";
      END;

      ProjectMaterialReqLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE DeleteMatReqLines@1100525011(ProjectNo@1100525002 : Code[20]);
    VAR
      ProjectMaterialReqLine@1100525004 : Record 11012526;
    BEGIN
      //kzwerver, 110120, n
      ProjectMaterialReqLine.SETRANGE("Project No.", ProjectNo);
      ProjectMaterialReqLine.SETRANGE(Origin, ProjectMaterialReqLine.Origin::Budget);
      ProjectMaterialReqLine.DELETEALL;
    END;

    PROCEDURE DetermineBOMLevel@1100525007(LineNo@1100525000 : Integer;VAR BOMLevel@1100525002 : Integer);
    VAR
      BudgetLine3@1100525001 : Record 11012001;
    BEGIN
      //**4PS
      BudgetLine3.SETRANGE("Project No.","Project No.");
      BudgetLine3.SETRANGE(Adjustment,Adjustment);
      BudgetLine3.SETRANGE("Extension Contract","Extension Contract");
      BudgetLine3.SETRANGE(Option,Option);
      BudgetLine3.SETRANGE("Line No.",LineNo);
      IF BudgetLine3.FINDFIRST THEN
        BOMLevel := BudgetLine3."Level BOM" + 1;
    END;

    PROCEDURE DeleteCommentLine@1100529800();
    VAR
      CommentLine@1100529801 : Record 11020634;
      RecRef@1100529800 : RecordRef;
    BEGIN
      // **4PS MVOS
      RecRef.GETTABLE(Rec);

      CommentLine.RESET;
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Budget);
      CommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      CommentLine.DELETEALL(TRUE);
    END;

    PROCEDURE CommentLineExist@1210190011() : Boolean;
    VAR
      RecRef@1210190000 : RecordRef;
      CommentLine@1210190001 : Record 11020634;
    BEGIN
      RecRef.GETTABLE(Rec);
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::Budget);
      CommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF NOT CommentLine.ISEMPTY THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetProjPlanActivityDescription@1210190001() : Text[50];
    VAR
      ProjPlanAct@1210190000 : Record 11012431;
    BEGIN
      IF "Project Planning Activity No." <> '' THEN BEGIN
        IF ProjPlanAct.READPERMISSION THEN BEGIN
          IF ProjPlanAct.GET("Project Planning Activity No.") THEN
            EXIT(ProjPlanAct.Description);
        END;
      END;
      EXIT('');
    END;

    PROCEDURE SummaryAmount@1210190003() : Decimal;
    VAR
      BudgetLine@1210190000 : Record 11012001;
    BEGIN
      BudgetLine.SETCURRENTKEY(
        "Project No.","Cost Type","Cost Object","Extension Contract Status","Version Date",
        Adjustment,"Extension Contract",Option,"Purchase Action", "Budget Summary Line");
      BudgetLine.SETRANGE("Project No.","Project No.");
      BudgetLine.SETRANGE("Extension Contract", "Extension Contract");
      BudgetLine.SETRANGE(Adjustment, Adjustment);
      BudgetLine.SETRANGE("Budget Summary Line",TRUE);
      IF BudgetLine.FINDFIRST THEN BEGIN
        BudgetLine.CALCSUMS(Amount);
        EXIT(BudgetLine.Amount);
      END;
      EXIT(0);
    END;

    PROCEDURE DeleteSummaryLinesExtAdjust@1210190004() : Boolean;
    VAR
      BudgetLine@1210190000 : Record 11012001;
    BEGIN
      //call 29724
      //IF (Adjustment = '') OR ("Extension Contract" = '') THEN  //333795.o
      //IF (Adjustment = '') THEN  //333795.n  //29724-2.o
      //  EXIT;                                //29724-2.o
      IF (Adjustment = '') AND ("Extension Contract" = '') THEN  //29724-2.n
        EXIT(FALSE);                                             //29724-2.n

      BudgetLine.SETRANGE("Project No.","Project No.");
      BudgetLine.SETRANGE("Extension Contract", "Extension Contract");
      BudgetLine.SETRANGE(Adjustment, Adjustment);
      //BudgetLine.SETRANGE(Option, '');  //C000697.o
      BudgetLine.SETRANGE("Budget Summary Line", FALSE);
      IF BudgetLine.COUNT = 1 THEN BEGIN  // If last line of contract and/or adjusment is deleted
        BudgetLine.SETRANGE("Budget Summary Line", TRUE);
        BudgetLine.DELETEALL(TRUE);
        EXIT(TRUE);  //29724-2.n
      END;
      EXIT(FALSE);  //29724-2.n
    END;

    PROCEDURE FillDefaultFscType@1100529000();
    BEGIN
      //*DP00129
      IF ("Cost Object" = '') OR ("Project No."= '') THEN
        EXIT;
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
      IF NOT DimValRec."FSC Applicable" THEN
        EXIT;
      IF NOT ProjRec.GET("Project No.") THEN
        EXIT;
      IF ProjRec."FSC Type Code" <> '' THEN
        "FSC Type Code" :=  ProjRec."FSC Type Code";
    END;

    PROCEDURE SetDeleteCompleteProject@1100409000();
    BEGIN
      //*C004759
      DeleteCompleteProject := TRUE;
    END;

    PROCEDURE LookupRecipe@1100525008(iFixed@1100525002 : Boolean);
    VAR
      NEWRecipeFrm@1100525001 : Page 11125073;
      NEWRecipeRec@1100525000 : Record 11020581;
      OLDRecipeFrm@1100528001 : Page 11012164;
      OLDRecipeRec@1100528000 : Record 11012155;
    BEGIN
      //DP00381
      CALCFIELDS(Converted);  //db, 20-03-15: C018810
      IF Converted THEN BEGIN
        NEWRecipeFrm.LOOKUPMODE(TRUE);
        NEWRecipeFrm.SetSelection(
          DATABASE::"Budget Line","Project No.","Extension Contract",Adjustment,Element,'','','','','',TRUE,"Line No.");   //C027336
        IF "Recipe Group" <> '' THEN
          NEWRecipeRec.SETRANGE("Recipe Group","Recipe Group");
        NEWRecipeFrm.SETTABLEVIEW(NEWRecipeRec);
        IF NEWRecipeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          IF iFixed THEN EXIT;
          NEWRecipeFrm.GETRECORD(NEWRecipeRec);
          "Recipe Group" := NEWRecipeRec."Recipe Group";
          VALIDATE(Recipe, NEWRecipeRec."No.");
        END;
      END ELSE BEGIN
        OLDRecipeFrm.LOOKUPMODE(TRUE);
        OLDRecipeFrm.SetSelection(
          DATABASE::"Budget Line","Project No.","Extension Contract",Adjustment,Element,'','','','','', TRUE);
        IF "Recipe Group" <> '' THEN
          OLDRecipeRec.SETRANGE("Recipe Group","Recipe Group");
        OLDRecipeFrm.SETTABLEVIEW(OLDRecipeRec);
        IF OLDRecipeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          IF iFixed THEN EXIT;
          OLDRecipeFrm.GETRECORD(OLDRecipeRec);
          "Recipe Group" := OLDRecipeRec."Recipe Group";
          VALIDATE(Recipe, OLDRecipeRec."No.");
        END;
      END;
    END;

    PROCEDURE UndoAdvised@1100525009();
    VAR
      PurchaseLine@1100525000 : Record 39;
      BudgetLine@1100525001 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Project No.", "Project No.");
      BudgetLine.SETRANGE(Advised, TRUE);
      BudgetLine.SETFILTER("Purchase Order No.",'<>%1','');
      IF BudgetLine.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
          PurchaseLine.SETRANGE("Document No.",BudgetLine."Purchase Order No.");
          PurchaseLine.SETRANGE("Line No.",BudgetLine."Purchase Order Line No.");
          PurchaseLine.SETRANGE("Job No.",BudgetLine."Project No.");
          IF NOT PurchaseLine.FINDFIRST THEN BEGIN
            BudgetLine.Advised := FALSE;
            BudgetLine."Purchase Order No." := '';
            BudgetLine."Purchase Order Line No." := 0;
            BudgetLine.MODIFY;
          END;
        UNTIL BudgetLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetLineNoStepSize@1100528800(iBudgetLine@1100528800 : Record 11012001;NoOfNewLines@1100528804 : Integer) : Integer;
    VAR
      BudgetLine@1100528801 : Record 11012001;
      FirstLineNo@1100528802 : Integer;
      LastLineNo@1100528803 : Integer;
    BEGIN
      FirstLineNo := iBudgetLine."Line No.";

      BudgetLine.SETRANGE("Project No.",iBudgetLine."Project No.");
      BudgetLine.SETRANGE(Adjustment, iBudgetLine.Adjustment);
      BudgetLine.SETRANGE("Extension Contract", iBudgetLine."Extension Contract");
      BudgetLine.SETRANGE(Option, iBudgetLine.Option);

      IF BudgetLine.GET(
        iBudgetLine."Project No.",
        iBudgetLine.Adjustment,
        iBudgetLine."Extension Contract",
        iBudgetLine.Option,
        iBudgetLine."Line No.") THEN

        IF BudgetLine.NEXT = 0 THEN
          EXIT(10000)
        ELSE
          LastLineNo := BudgetLine."Line No.";

      EXIT(ROUND((((LastLineNo-1) - FirstLineNo)/(NoOfNewLines)), 1, '<'));
    END;

    PROCEDURE GetTotalHoursToBePlanned@1100528401() : Decimal;
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF "Project No." <> '' THEN
        IF NOT Job.GET("Project No.") THEN;

      CALCFIELDS("Total Hours Actual");
      EXIT("Total Hours Actual" - Job.GetBudgetHoursPlannedOnWO);
    END;

    PROCEDURE HandleAssistEditItem@1100528600(IFieldNo@1100528600 : Integer) ORefresh : Boolean;
    VAR
      "2baMgt"@1100528602 : Codeunit 11012306;
      RecRef@1100528601 : RecordRef;
    BEGIN
      IF IFieldNo = FIELDNO("Trade Item") THEN BEGIN
        RecRef.GETTABLE(Rec);
        "2baMgt".RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
        ORefresh := TRUE;
      END;
    END;

    LOCAL PROCEDURE CheckCurrencyAgreement@1100525013();
    BEGIN
      //db, 08-03-16
      IF "Currency Code" = '' THEN BEGIN
        "Currency Agreement" := FALSE;
      END ELSE BEGIN
        ProjRec.GET("Project No.");
        "Currency Agreement" := ("Currency Code" <> ProjRec."Currency Code");
      END;
    END;

    PROCEDURE SetSkipValidateFCY@1100528603(ISkipValidateFCY@1100528600 : Boolean);
    BEGIN
      //DP00883
      SkipValidateFCY := ISkipValidateFCY;
    END;

    PROCEDURE HandleLookupItem@1100525012(lvFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      ItemRec@1100525012 : Record 27;
      BasicItemRec@1100525011 : Record 11012316;
      TradeItemRec@1100525010 : Record 11012317;
      ItemFrm@1100525009 : Page 31;
      BasicItemFrm@1100525008 : Page 11012333;
      TradeItemFrm@1100525007 : Page 11012334;
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvDiscType@1100525000 : 'Purchase,Sales';
      g_ItemCode@1100525014 : Code[20];
      g_Vendor@1100525013 : Code[20];
      lvTempBudgetLine@1100525006 : TEMPORARY Record 11012001;
    BEGIN
      //db, 24-08-15
      IF lvFieldNo = FIELDNO("Item No.") THEN BEGIN
        CLEAR(ItemFrm);
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(
          DATABASE::"Budget Line","Project No.","Extension Contract",Adjustment,Element,0,'','',"Line No.",'','');
        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);
        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          VALIDATE("Cost Type", "Cost Type"::Material);
          IF "Cost Type" = "Cost Type"::Material THEN BEGIN
            ItemFrm.GETRECORD(ItemRec);
            VALIDATE("Item No.", ItemRec."No.");
          END;
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Budget Line",
          "Project No.","Extension Contract",Adjustment,Element,0,'','',"Line No.",'','');

        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
        BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          VALIDATE("Cost Type", "Cost Type"::Material);
          IF "Cost Type" = "Cost Type"::Material THEN BEGIN
            BasicItemFrm.GETRECORD(BasicItemRec);
            Manufacturer := BasicItemRec.Manufacturer;
            VALIDATE("Basic Item", BasicItemRec."Product Code");
          END;
        END ELSE BEGIN
          lvRefresh := BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          lvTempBudgetLine.COPY(Rec);  //db, 21-08-09: M15801
          lvTempBudgetLine.VALIDATE("Item No.","Item No.");
          g_ItemCode := lvTempBudgetLine."Trade Item";
          g_Vendor := lvTempBudgetLine."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Budget Line",
          "Project No.", "Extension Contract", Adjustment, Element, 0, '', '', "Line No.", '', '',
          "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", g_ItemCode, g_Vendor);

        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
        TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          VALIDATE("Cost Type", "Cost Type"::Material);
          IF "Cost Type" = "Cost Type"::Material THEN BEGIN
            TradeItemFrm.GETRECORD(TradeItemRec);
            Manufacturer := TradeItemRec.Manufacturer;
            "Basic Item" := TradeItemRec."Product Code";
            "Vendor (Trade Item)" := TradeItemRec.Vendor;
            VALIDATE("Trade Item", TradeItemRec."Item Code");
          END;
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;
      EXIT(lvRefresh);
    END;

    BEGIN
    {
      4PS, 07-09-11, call28927. Index "Project No.,Cost Type,Adjustment,Extension Contract,Option,Line No." MaintainSQLIndex and
        MaintainSIFTIndex changed from No to Yes.

      4PS, 08-02-2012, call 32744, SQL Index added because of performance problem in GPP
                                   (index:Project Planning Activity No.,Cost Type,Cost Object,Amount)
      DP00886: db, 11-03-16
      - local functions for ExchangeAmt (introduced by DP00883) moved to ProjectCurrencyExchangeRate.
    }
    END.
  }
}

