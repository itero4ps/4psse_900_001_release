OBJECT Table 11012005 Project Principal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Project No.,Principal,Principal Name;
    OnInsert=VAR
               lvProjSetupRec@1100525000 : Record 315;
             BEGIN
               TESTFIELD(Principal); //C017655

               IF ProjRec.GET("Project No.") THEN BEGIN
                 "Main Project No." := ProjRec."Main Project";
                 "Invoice Text Installments" := ProjRec.Text;
                 IF ("Price List" = '') THEN
                   "Price List" := ProjRec."Price List";
                 IF ("Ref. Date Unit Price" = 0D) THEN
                   "Ref. Date Unit Price" := ProjRec."Ref. Date Unit Price";
               END;

               lvProjSetupRec.GET;
               IF ProjRec."Internal Project" THEN BEGIN
                 TESTFIELD(Principal, lvProjSetupRec."Principal Internal Project");
               END ELSE BEGIN
                 IF Principal = lvProjSetupRec."Principal Internal Project" THEN BEGIN
                   ERROR(Text011, FIELDCAPTION(Principal), Principal);
                 END;
               END;

               //ProjRec.CheckProjectStatus(0);  //*29844.o
               ProjRec.CheckProjectStatus(ExtraStepProjectStatus());  //*29844.n

               InitRecord;
               GetDefaultSalesSurcharges;

               BuildRelationalStructure('INSERT');
               ProjectSiteMgt.LogProjectPrincipal(1, Rec); //**4PS.n
             END;

    OnModify=BEGIN
               BuildRelationalStructure('MODIFY');
               ProjectSiteMgt.LogProjectPrincipal(2, Rec); //**4PS.n
             END;

    OnDelete=VAR
               ProjInstalmRec@11012000 : Record 11012018;
               ProjCostPlusRec@1210190001 : Record 11012019;
               CommissionRec@11012001 : Record 11012020;
               ProjPrincHourRateRec@11012002 : Record 11012024;
               lvPrinTenderElemRec@1210190003 : Record 11012470;
               lvInstalMotRec@1210190002 : Record 11012471;
               ExtraConfirm@1210190000 : Boolean;
               lvCommentRec@1100485000 : Record 11020314;
             BEGIN
               IF NOT gDelCompleteProject THEN BEGIN
                 IF ProjRec.GET("Project No.") THEN
                   IF ProjRec."Project Status" >= ProjRec."Project Status"::Finished THEN
                     ExtraConfirm := FALSE
                   ELSE
                     ExtraConfirm := TRUE;

                 ProjCostPlusRec.SETRANGE("Project No.","Project No.");
                 ProjCostPlusRec.SETRANGE(Principal,Principal);
                 IF ProjCostPlusRec.FINDSET THEN BEGIN
                   REPEAT
                     ProjCostPlusRec.CALCFIELDS("Invoiced Price", "Invoice in Process");
                     IF ProjCostPlusRec."Invoiced Price" + ProjCostPlusRec."Invoice in Process" <> 0 THEN
                       ERROR(Text007);
                   UNTIL ProjCostPlusRec.NEXT = 0;
                 END;

                 ProjInstalmRec.SETRANGE("Project No.","Project No.");
                 ProjInstalmRec.SETRANGE(Principal,Principal);
                 IF ProjInstalmRec.FINDSET THEN BEGIN
                   REPEAT
                     ProjInstalmRec.CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)");
                     IF ProjInstalmRec."Invoiced Price (LCY)" + ProjInstalmRec."Invoice in Process (LCY)" <> 0 THEN
                       ERROR(Text004);
                   UNTIL ProjInstalmRec.NEXT = 0;
                   IF ExtraConfirm THEN
                     IF CONFIRM(Text005, FALSE) = FALSE THEN
                       ERROR(Text001);
                 END;
               END;

               ProjInstalmRec.SETRANGE("Project No.","Project No.");
               ProjInstalmRec.SETRANGE(Principal,Principal);
               IF ProjInstalmRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   ProjInstalmRec.DeleteInstallment(ProjInstalmRec."Project No.",
                                                    ProjInstalmRec.Principal,
                                                    ProjInstalmRec."Plot No.",
                                                    ProjInstalmRec."Installment No.",
                                                    gDelCompleteProject);
                 UNTIL ProjInstalmRec.NEXT = 0;
               END;

               CommissionRec.SETRANGE("Project No.","Project No.");
               CommissionRec.SETRANGE(Principal,Principal);
               CommissionRec.DELETEALL(TRUE);

               ProjPrincHourRateRec.SETRANGE("Project No.","Project No.");
               ProjPrincHourRateRec.SETRANGE(Principal,Principal);
               ProjPrincHourRateRec.DELETEALL(TRUE);

               lvInstalMotRec.SETRANGE("Project No.","Project No.");
               lvInstalMotRec.SETRANGE(Principal,Principal);
               //lvInstalMotRec.DELETEALL(TRUE);  //db, 14-08-15: C021865
               IF lvInstalMotRec.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   lvInstalMotRec.DeleteInstallmentMotivation(
                     lvInstalMotRec."Project No.", lvInstalMotRec.Principal,
                     lvInstalMotRec."Production Date", gDelCompleteProject);
                 UNTIL lvInstalMotRec.NEXT = 0;
               END;

               lvPrinTenderElemRec.SETRANGE("Project No.","Project No.");
               lvPrinTenderElemRec.SETRANGE(Principal,Principal);
               lvPrinTenderElemRec.DELETEALL;

               lvCommentRec.SETRANGE("Table1 Name", lvCommentRec."Table1 Name"::Job);
               lvCommentRec.SETRANGE("Table1 No.", "Project No.");
               lvCommentRec.SETRANGE("Table2 Name", lvCommentRec."Table2 Name"::"Project Principal");
               lvCommentRec.SETRANGE("Table2 No.", Principal);
               lvCommentRec.SETRANGE("Table3 Name", 0);
               lvCommentRec.DELETEALL(TRUE);

               CustSurchRec.RESET;
               CustSurchRec.SETRANGE("Record Type", CustSurchRec."Record Type"::ProjCust);
               CustSurchRec.SETRANGE("Customer No.", Principal);
               CustSurchRec.SETRANGE(Code, "Project No.");
               CustSurchRec.DELETEALL;

               BuildRelationalStructure('DELETE');
               ProjectSiteMgt.LogProjectPrincipal(3, Rec); //**4PS.n
             END;

    OnRename=BEGIN
               IF (Principal <> xRec.Principal) THEN BEGIN
                 ProjEntryRec.SETCURRENTKEY("Job No.");
                 ProjEntryRec.SETRANGE("Job No.", "Project No.");
                 ProjEntryRec.SETRANGE(Principal, xRec.Principal);
                 ProjEntryRec.SETRANGE("Entry Type", ProjEntryRec."Entry Type"::Sale);
                 IF ProjEntryRec.FIND('-') THEN BEGIN
                   IF CONFIRM(Text006, FALSE) = FALSE THEN
                     ERROR(Text001);
                 END;
                 GetDefaultSalesSurcharges;
                 BuildRelationalStructure('MODIFY');  //*27412
               END;
             END;

    CaptionML=ENU=Project Principal;
    LookupPageID=Page11012016;
    DrillDownPageID=Page11012016;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Settlement Method");
                                                              END;

                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Principal           ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=BEGIN
                                                                IF SkipValidation THEN
                                                                  EXIT;

                                                                CustomerRec.GET(Principal);
                                                                IF CustomerRec.Blocked IN [CustomerRec.Blocked::Invoice, CustomerRec.Blocked::All] THEN
                                                                  ERROR(Text012, FIELDCAPTION(Principal), Principal);

                                                                IF Principal <> xRec.Principal THEN BEGIN
                                                                  //call 28113.sn
                                                                  "Contact Person No." := '';
                                                                  CALCFIELDS("Contact No.");
                                                                  IF CustomerRec."Primary Contact No." <> "Contact No." THEN
                                                                    "Contact Person No." := CustomerRec."Primary Contact No.";
                                                                  CALCFIELDS("Contact Person Name");
                                                                  //call 28113.en

                                                                END;

                                                                "Cost Object" := CustomerRec."Cost Object";
                                                                "VAT Bus. Posting Group" := CustomerRec."VAT Bus. Posting Group";
                                                                "VAT Prod. Posting Group" := CustomerRec."VAT Prod. Posting Group";
                                                                IF ProjRec.GET("Project No.") THEN;
                                                                IF ((CustomerRec."% Labor" <> 0) OR
                                                                   (CustomerRec."% to B Account" <> 0 ) ) AND
                                                                   (ProjRec."Contract Type" = ProjRec."Contract Type"::Subcontracting)
                                                                THEN BEGIN
                                                                  "% Labor" := CustomerRec."% Labor";
                                                                  "% to B Account" := CustomerRec."% to B Account";
                                                                  "Specific WKA Percentages" := TRUE;
                                                                END;

                                                                IF CustomerRec."Bill-to Customer No." = '' THEN // Call 28027
                                                                  VALIDATE("Bill-to Customer No.", CustomerRec."No.") // Call 28027
                                                                ELSE // Call 28027
                                                                  VALIDATE("Bill-to Customer No.", CustomerRec."Bill-to Customer No.");

                                                                IF (CustomerRec."Currency Code" <> '') THEN
                                                                 IF  (CONFIRM(Text013, FALSE, CustomerRec."Currency Code") = TRUE) THEN
                                                                   VALIDATE("Currency Code", CustomerRec."Currency Code");  //Call C005375
                                                              END;

                                                   CaptionML=ENU=Principal;
                                                   NotBlank=Yes }
    { 21  ;   ;Principal Name      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Principal)));
                                                   CaptionML=ENU=Principal Name;
                                                   Editable=No }
    { 22  ;   ;Principal Reference ;Text50        ;CaptionML=ENU=Principal Reference }
    { 23  ;   ;Contact No.         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(Principal)));
                                                   CaptionML=ENU=Contact;
                                                   Editable=No }
    { 24  ;   ;Contact Person No.  ;Code20        ;TableRelation=IF (Contact No.=FILTER(<>'')) Contact.No. WHERE (Type=CONST(Person),
                                                                                                                  Company No.=FIELD(Contact No.))
                                                                                                                  ELSE IF (Contact No.=FILTER('')) Contact.No. WHERE (Company No.=CONST(____________________),
                                                                                                                                                                      Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Contact Person Name");
                                                              END;

                                                   CaptionML=ENU=Contact Person No. }
    { 25  ;   ;Settlement Method   ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Settlement Method" WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Settlement Method;
                                                   OptionCaptionML=ENU=Fixed Price,Cost Plus;
                                                   OptionString=Fixed Price,Cost Plus;
                                                   Editable=No }
    { 28  ;   ;Contact Person Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact Person No.)));
                                                   CaptionML=ENU=Contact Person Name;
                                                   Editable=No }
    { 30  ;   ;Contract Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD("Installments per Plot",FALSE);

                                                                ValidateContractAmountLCY;
                                                              END;

                                                   CaptionML=ENU=Contract Amount (LCY);
                                                   AutoFormatType=1 }
    { 31  ;   ;Contract Amount     ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100525000 : Date;
                                                                Currency2@1100528200 : Record 4;
                                                                ProjectInstallment@1100525001 : Record 11012018;
                                                                TotalContractInvoiced@1100525002 : Decimal;
                                                                TotalContractInvoicedLCY@1100525004 : Decimal;
                                                                ContractAmountRemaining@1100525003 : Decimal;
                                                                ContractAmountRemainingLCY@1100525005 : Decimal;
                                                              BEGIN
                                                                TESTFIELD("Installments per Plot",FALSE);

                                                                ProjRec.GET("Project No.");
                                                                //ProjRec.CheckProjectStatus(0);  //*29844.o
                                                                ProjRec.CheckProjectStatus(ExtraStepProjectStatus());  //*29844.n

                                                                IF ("Contract Amount" <> xRec."Contract Amount") AND "Installments Generated" THEN
                                                                  MESSAGE(Text000);

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := GetCurrencyDate;  //DP00886
                                                                  TotalContractInvoiced :=0;
                                                                  TotalContractInvoicedLCY := 0;

                                                                  ProjectInstallment.SETRANGE("Project No.", "Project No.");
                                                                  ProjectInstallment.SETRANGE(Principal, Principal);             //M26266
                                                                  ProjectInstallment.SETFILTER("Extension Contract", '%1', '');  //M26266
                                                                  IF ProjectInstallment.FINDSET THEN BEGIN
                                                                    REPEAT
                                                                      ProjectInstallment.CALCFIELDS("Invoice in Process","Invoice in Process (LCY)","Invoiced Price","Invoiced Price (LCY)");
                                                                      IF (ProjectInstallment."Invoice in Process" <> 0) OR (ProjectInstallment."Invoiced Price" <> 0) THEN BEGIN
                                                                        TotalContractInvoiced := TotalContractInvoiced + ProjectInstallment."Invoice in Process" +
                                                                        ProjectInstallment."Invoiced Price";
                                                                        TotalContractInvoicedLCY := TotalContractInvoicedLCY + ProjectInstallment."Invoice in Process (LCY)" +
                                                                        ProjectInstallment."Invoiced Price (LCY)";
                                                                      END;
                                                                    UNTIL ProjectInstallment.NEXT = 0;
                                                                  END;

                                                                  ContractAmountRemaining := "Contract Amount" - TotalContractInvoiced;
                                                                  ContractAmountRemainingLCY :=
                                                                    ROUND(
                                                                      CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
                                                                        1, "Project No.", CurrencyDate, "Currency Code", ContractAmountRemaining,
                                                                        CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                      Currency2."Amount Rounding Precision");

                                                                  "Contract Amount (LCY)" := ContractAmountRemainingLCY + TotalContractInvoicedLCY;
                                                                END ELSE BEGIN
                                                                  "Contract Amount (LCY)" := ROUND("Contract Amount",Currency2."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Contract Amount;
                                                   AutoFormatType=1 }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Contract Amount");
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 35  ;   ;Plot Price          ;Decimal       ;OnValidate=BEGIN
                                                                ProjRec.GET("Project No.");
                                                                //ProjRec.CheckProjectStatus(0);  //*29844.o
                                                                ProjRec.CheckProjectStatus(ExtraStepProjectStatus());  //*29844.n
                                                                TESTFIELD("Installments per Plot",FALSE);
                                                                IF ("Plot Price" <> xRec."Plot Price") AND "Installments Generated" THEN
                                                                  MESSAGE(Text000);
                                                              END;

                                                   CaptionML=ENU=Plot Price;
                                                   AutoFormatType=1 }
    { 37  ;   ;VAT Amount Long Lease;Decimal      ;CaptionML=ENU=VAT Amount Long Lease;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 40  ;   ;Installments per Plot;Boolean      ;OnValidate=BEGIN
                                                                IF "Installments per Plot" THEN BEGIN
                                                                  TESTFIELD("Installment Scheme",'');
                                                                  TESTFIELD("Generate Installments",FALSE);

                                                                  CALCFIELDS("Building Price Plot Nos.", "Additional Costs Nos.", "Plot Price Plot Nos.");
                                                                  "Contract Amount (LCY)" := "Building Price Plot Nos." + "Additional Costs Nos.";
                                                                  ValidateContractAmountLCY;
                                                                  "Plot Price" := "Plot Price Plot Nos.";
                                                                  "VAT Amount Long Lease" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Installments per Plot }
    { 60  ;   ;Installment Scheme  ;Code10        ;TableRelation="Installment Scheme".Code WHERE (Type=CONST(Project));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Installments per Plot",FALSE);
                                                              END;

                                                   CaptionML=ENU=Installment Scheme }
    { 70  ;   ;Generate Installments;Boolean      ;OnValidate=BEGIN
                                                                TESTFIELD("Installments per Plot",FALSE);
                                                              END;

                                                   CaptionML=ENU=Generate Installments }
    { 80  ;   ;Installments Generated;Boolean     ;CaptionML=ENU=Installments Generated }
    { 90  ;   ;Generation Date     ;Date          ;CaptionML=ENU=Generation Date;
                                                   Editable=No }
    { 100 ;   ;Alternative Bill-to Address;Code10 ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                               Billing Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                CheckInvoiceAddress;
                                                              END;

                                                   CaptionML=ENU=Alternative Bill-to Address }
    { 110 ;   ;Cost Plus Customer  ;Boolean       ;OnValidate=BEGIN
                                                                IF "Cost Plus Customer" THEN BEGIN
                                                                  ProjPrincipalRec.RESET;
                                                                  ProjPrincipalRec.SETFILTER("Project No.","Project No.");
                                                                  ProjPrincipalRec.SETFILTER(Principal,'<>%1',Principal);
                                                                  ProjPrincipalRec.SETRANGE("Cost Plus Customer", TRUE);
                                                                  IF ProjPrincipalRec.FIND('-') THEN
                                                                    ERROR(Text002,FIELDCAPTION("Cost Plus Customer"),ProjPrincipalRec.Principal);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Plus Customer }
    { 120 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 125 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 130 ;   ;Surcharge % Labor   ;Decimal       ;CaptionML=ENU=Surcharge % Labor }
    { 140 ;   ;Surcharge % Material;Decimal       ;CaptionML=ENU=Surcharge % Material }
    { 150 ;   ;Surcharge % Subcontr.;Decimal      ;CaptionML=ENU=Surcharge % Subcontracting }
    { 160 ;   ;Surcharge % Plant   ;Decimal       ;CaptionML=ENU=Surcharge % Plant }
    { 170 ;   ;Surcharge % Sundry  ;Decimal       ;CaptionML=ENU=Surcharge % Sundry }
    { 210 ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Revenue),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object }
    { 230 ;   ;Meeting Date        ;Date          ;CaptionML=ENU=Meeting Date }
    { 240 ;   ;Meeting Time        ;Text30        ;CaptionML=ENU=Meeting Time }
    { 250 ;   ;Invoice Text Installments;Text250  ;CaptionML=ENU=Invoice Text Installments }
    { 255 ;   ;Invoice Text Cost Plus;Text250     ;CaptionML=ENU=Invoice Text Cost Plus }
    { 260 ;   ;No. of Plots Bought ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Plot WHERE (Project No.=FIELD(Project No.),
                                                                                 Principal=FIELD(Principal)));
                                                   CaptionML=ENU=No. of Plots Bought;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 270 ;   ;First Plot No.      ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Min(Plot."Plot No." WHERE (Project No.=FIELD(Project No.),
                                                                                          Principal=FIELD(Principal)));
                                                   CaptionML=ENU=First Plot No.;
                                                   Editable=No }
    { 280 ;   ;Total Extension Contract;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Extension Contract"."Contract Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                       Principal=FIELD(Principal),
                                                                                                                       Status=FILTER(Order|Invoicing Allowed)));
                                                   CaptionML=ENU=Total Extension Contract;
                                                   Editable=No }
    { 300 ;   ;Building Price Plot Nos.;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum(Plot."Building Price" WHERE (Project No.=FIELD(Project No.),
                                                                                                Principal=FIELD(Principal)));
                                                   CaptionML=ENU=Building Price Plot Nos.;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 305 ;   ;Additional Costs Nos.;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum(Plot."Additional Costs" WHERE (Project No.=FIELD(Project No.),
                                                                                                  Principal=FIELD(Principal)));
                                                   CaptionML=ENU=Additional Costs Plot Nos.;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 310 ;   ;Plot Price Plot Nos.;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum(Plot."Plot Price" WHERE (Project No.=FIELD(Project No.),
                                                                                            Principal=FIELD(Principal)));
                                                   CaptionML=ENU=Plot Price Plot Nos.;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 320 ;   ;Installm.Motivation Method;Option  ;OnValidate=BEGIN
                                                                ProjRec.GET("Project No.");
                                                                IF ProjRec.RAW THEN BEGIN
                                                                  IF "Installm.Motivation Method" IN ["Installm.Motivation Method"::Points, "Installm.Motivation Method"::Percentages] THEN
                                                                    FIELDERROR("Installm.Motivation Method", STRSUBSTNO(Text010,"Installm.Motivation Method",ProjRec.FIELDCAPTION(RAW)));
                                                                END;

                                                                IF "Installm.Motivation Method" <> xRec."Installm.Motivation Method" THEN BEGIN
                                                                  CASE "Installm.Motivation Method" OF
                                                                    "Installm.Motivation Method"::Percentages:
                                                                      "Number of Points" := 100;
                                                                    ELSE
                                                                      "Number of Points" := 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Installm.Motivation Method;
                                                   OptionCaptionML=ENU=" ,Points,Percentages,Element Quantity";
                                                   OptionString=[ ,Points,Percentages,Element Quantity];
                                                   Description=Should be equal to options of table 11012004 (field 800) }
    { 330 ;   ;Number of Points    ;Decimal       ;CaptionML=ENU=Number of Points }
    { 340 ;   ;Invoice Installm.Motivation as;Option;
                                                   OnValidate=BEGIN
                                                                IF "Invoice Installm.Motivation as" <> xRec."Invoice Installm.Motivation as" THEN  BEGIN
                                                                  IF "Invoice Installm.Motivation as" <> "Invoice Installm.Motivation as"::"Fixed Installment Amounts" THEN BEGIN
                                                                    "Fixed Installment Amount (LCY)" := 0;
                                                                    "Fixed Installment Amount (FCY)" := 0;  //DP00886
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Installm.Motivation as;
                                                   OptionCaptionML=ENU=Installment per Motivation,Fixed Installment Amounts;
                                                   OptionString=Installment per Motivation,Fixed Installment Amounts }
    { 344 ;   ;Direct Settle Underrun Settlin;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Direct Settle Underrun Settlin" THEN BEGIN
                                                                  ProjRec.GET("Project No.");
                                                                  ProjRec.TESTFIELD(RAW, TRUE);
                                                                END;

                                                                IF "Direct Settle Underrun Settlin" <> xRec."Direct Settle Underrun Settlin" THEN
                                                                  IF InstallmentOverviewExists THEN
                                                                    ERROR(Text014);
                                                              END;

                                                   CaptionML=ENU=Direct Settle Underrun (Settling) }
    { 345 ;   ;Direct Settle Underrun;Boolean     ;OnValidate=BEGIN
                                                                //C008144.n
                                                                IF "Direct Settle Underrun" THEN BEGIN
                                                                  ProjRec.GET("Project No.");
                                                                  ProjRec.TESTFIELD(RAW, TRUE);
                                                                END;

                                                                IF "Direct Settle Underrun" <> xRec."Direct Settle Underrun" THEN
                                                                  IF InstallmentOverviewExists THEN
                                                                    ERROR(Text014);
                                                              END;

                                                   CaptionML=ENU=Direct Settle Underrun (Non Settling) }
    { 346 ;   ;Fictitious Amount Open (LCY);Decimal;
                                                   OnValidate=VAR
                                                                TenderElem@1100525000 : Record 11012470;
                                                                RaisePerc@1100525001 : Decimal;
                                                              BEGIN
                                                                //C001959
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Fictitious Amount Open (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Fictitious Amount Open (LCY)", FALSE, FALSE, "Currency Code", "Project No.", Principal, "Order Date");  //DP00886

                                                                ProjRec.GET("Project No.");
                                                                IF "Fictitious Amount Open (LCY)" <> 0 THEN
                                                                  ProjRec.TESTFIELD(RAW, TRUE);

                                                                IF ProjRec.RAW AND ("Fictitious Amount Open (LCY)" <> xRec."Fictitious Amount Open (LCY)") THEN BEGIN
                                                                  TenderElem.SETRANGE("Project No.", "Project No.");
                                                                  TenderElem.SETRANGE(Principal, Principal);
                                                                  TenderElem.SETRANGE("Contract No.", '');
                                                                  IF TenderElem.FINDFIRST THEN BEGIN
                                                                    RaisePerc := TenderElem.CalcRaisePerc(FALSE, "Fictitious Amount Open (LCY)");
                                                                    IF RaisePerc <> "Raise % Settlement Price" THEN
                                                                      VALIDATE("Raise % Settlement Price", RaisePerc);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Fictitious Amount for Open (LCY);
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Description=DP00886 }
    { 347 ;   ;Fictitious Amount Open (FCY);Decimal;
                                                   OnValidate=BEGIN
                                                                //DP00886
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Fictitious Amount Open (LCY)", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Fictitious Amount Open (FCY)", FALSE, FALSE, "Currency Code", "Project No.", Principal, "Order Date"));
                                                              END;

                                                   CaptionML=ENU=Fictitious Amount for Open (FCY);
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Description=DP00886 }
    { 350 ;   ;Fixed Installment Amount (LCY);Decimal;
                                                   OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Fixed Installment Amount (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Fixed Installment Amount (LCY)", FALSE, FALSE, "Currency Code", "Project No.", Principal, "Order Date");  //DP00886
                                                              END;

                                                   CaptionML=ENU=Fixed Installment Amount (LCY);
                                                   Description=DP00886 }
    { 351 ;   ;Fixed Installment Amount (FCY);Decimal;
                                                   OnValidate=BEGIN
                                                                //DP00886
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Fixed Installment Amount (LCY)", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Fixed Installment Amount (FCY)", FALSE, FALSE, "Currency Code", "Project No.", Principal, "Order Date"));
                                                              END;

                                                   CaptionML=ENU=Fixed Installment Amount (LCY);
                                                   Description=DP00886 }
    { 360 ;   ;Public notary       ;Code20        ;TableRelation=Customer.No.;
                                                   CaptionML=ENU=Public notary }
    { 370 ;   ;Withhold %          ;Decimal       ;CaptionML=ENU=Withhold % Last Installment }
    { 380 ;   ;Notary Case Number  ;Text30        ;CaptionML=ENU=Notary Case Number }
    { 390 ;   ;Specific WKA Percentages;Boolean   ;OnValidate=BEGIN
                                                                IF NOT "Specific WKA Percentages" THEN BEGIN
                                                                  "% Labor" := 0;
                                                                  "% to B Account":= 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Specific WKA Percentages }
    { 400 ;   ;% Labor             ;Decimal       ;CaptionML=ENU=% Labor;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   AutoFormatType=1 }
    { 410 ;   ;% to B Account      ;Decimal       ;CaptionML=ENU=% to B Account;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 415 ;   ;WKA Period          ;Text50        ;CaptionML=ENU=WKA Period }
    { 418 ;   ;Order No. Customer  ;Text50        ;OnValidate=BEGIN
                                                                SyncProject;
                                                              END;

                                                   CaptionML=ENU=Order No. Customer }
    { 420 ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                SyncProject;
                                                                VALIDATE("Contract Amount");
                                                              END;

                                                   CaptionML=ENU=Order Date }
    { 430 ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 440 ;   ;Main Project No.    ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Main Project No. }
    { 450 ;   ;Bill-to Contact Person;Code20      ;TableRelation=Contact.No. WHERE (Company No.=FIELD(Bill-to Contact No.),
                                                                                    Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                IF "Bill-to Contact Person" <> '' THEN //call 28113
                                                                  TESTFIELD("Bill-to Customer No."); //call 28113

                                                                CALCFIELDS("Bill-to Contact Person Name");
                                                              END;

                                                   CaptionML=ENU=Bill-to Contact Person }
    { 451 ;   ;Bill-to Contact Person Name;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Bill-to Contact Person)));
                                                   CaptionML=ENU=Bill-to Contact Person Name;
                                                   Editable=No }
    { 460 ;   ;Collect Installment Invoice By;Option;
                                                   CaptionML=ENU=Collect Installment Invoice By;
                                                   OptionCaptionML=ENU=Project,Principal,Plot,Contract Amount/Extensions;
                                                   OptionString=Project,Principal,Plot,Contract Amount/Extensions }
    { 470 ;   ;Raise % Settlement Price;Decimal   ;OnValidate=VAR
                                                                lvRAWCu@1100485000 : Codeunit 11012164;
                                                                lvProjRec@1100485001 : Record 11072003;
                                                              BEGIN
                                                                lvProjRec.GET("Project No.");
                                                                IF lvProjRec.RAW THEN BEGIN
                                                                  "Raise % Settlement Price" := ROUND("Raise % Settlement Price", 0.1);  //** 4PS01.n
                                                                  //"Raise % Settlement Price" := ROUND("Raise % Settlement Price", 0.01); //** 4PS01.o
                                                                  lvRAWCu.CalculateSettlementPrices("Project No.", Principal, '',"Raise % Settlement Price");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Raise % Settlement Price;
                                                   Description=RAW }
    { 475 ;   ;Surcharge %         ;Decimal       ;CaptionML=ENU=Percentage Surcharge;
                                                   Description=RAW }
    { 480 ;   ;Adviser             ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo > 0 THEN
                                                                  CALCFIELDS("Name Adviser");
                                                              END;

                                                   CaptionML=ENU=Adviser }
    { 485 ;   ;Name Adviser        ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Adviser)));
                                                   CaptionML=ENU=Name Adviser;
                                                   Editable=No }
    { 490 ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line Extended" WHERE (Table1 Name=CONST(Job),
                                                                                                    Table1 No.=FIELD(Project No.),
                                                                                                    Table2 Name=CONST(Project Principal),
                                                                                                    Table2 No.=FIELD(Principal)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 500 ;   ;Tender Paragraph Scheme;Code10     ;TableRelation="Tender Paragraph Scheme.";
                                                   CaptionML=ENU=Tender Paragraph Scheme }
    { 501 ;   ;Quantity (Tender Paragraph);Decimal;CaptionML=ENU=Quantity (Tender Paragraph);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 502 ;   ;Unit of Measure (Tender Par);Code10;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Unit of Measure (Tender Paragraph) }
    { 510 ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                BillToCustomer@1210190000 : Record 18;
                                                              BEGIN
                                                                IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN BEGIN
                                                                  IF "Bill-to Customer No." <> '' THEN BEGIN
                                                                    BillToCustomer.GET("Bill-to Customer No.");
                                                                    BillToCustomer.CheckCustomerStatus("Bill-to Customer No.");

                                                                    GetDefaultSalesSurcharges;
                                                                    ProjRec.VALIDATE("Purch Discount Term Group 1", BillToCustomer."Purch Discount Term Group");
                                                                    ProjRec.VALIDATE("Sales Discount Term Group 1", BillToCustomer."Sales Discount Term Group");
                                                                    //
                                                                    ProjRec."Calculate B Amounts based on" := BillToCustomer."Calculate B Amounts based on";
                                                                    //
                                                                    IF BillToCustomer."VAT Prod. Posting Group" <> '' THEN
                                                                      ProjRec."VAT Prod. P. Group Inst. Int." := BillToCustomer."VAT Prod. Posting Group";

                                                                    IF "Invoice Text Installments" = '' THEN
                                                                      "Invoice Text Installments" := BillToCustomer."Invoice Text Installments";
                                                                    // Confirm Text006?,  Invoice text has no relation with Job Entries
                                                                    // Also not needed because already done in GetDefaultSalesSurcharges
                                                                    //ELSE
                                                                    //  IF "Invoice Text Installments" <> BillToCustomer."Invoice Text Installments" THEN
                                                                    //    IF CONFIRM(Text006,FALSE,FIELDCAPTION("Invoice Text Installments")) THEN
                                                                    //      "Invoice Text Installments" := BillToCustomer."Invoice Text Installments";
                                                                  END;

                                                                  //call 28113.sn
                                                                  "Bill-to Contact Person" := '';
                                                                  CALCFIELDS("Bill-to Contact No.");
                                                                  IF BillToCustomer."Primary Contact No." <> "Bill-to Contact No." THEN
                                                                    "Bill-to Contact Person" := BillToCustomer."Primary Contact No.";
                                                                  CALCFIELDS("Bill-to Contact Person Name");
                                                                  //call 28113.en
                                                                END;

                                                                CheckInvoiceAddress;
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. }
    { 520 ;   ;Bill-to Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Name;
                                                   Editable=No }
    { 530 ;   ;Bill-to Name 2      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Name 2" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Name 2;
                                                   Editable=No }
    { 540 ;   ;Bill-to Address     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Address WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Address;
                                                   Editable=No }
    { 550 ;   ;Bill-to Address 2   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Address 2" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Address 2;
                                                   Editable=No }
    { 560 ;   ;Bill-to Post Code   ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Post Code" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Post Code;
                                                   Editable=No }
    { 570 ;   ;Bill-to City        ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.City WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to City;
                                                   Editable=No }
    { 580 ;   ;Bill-to Contact No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Business Relation"."Contact No." WHERE (Link to Table=CONST(Customer),
                                                                                                                       No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=ENU=Bill-to Contact No.;
                                                   Editable=No }
    { 590 ;   ;Price List          ;Code10        ;TableRelation="Price List".Code WHERE (Customer No.=FIELD(Principal),
                                                                                          Status=CONST(Open));
                                                   OnValidate=VAR
                                                                lvPriceListRec@1100485000 : Record 11020422;
                                                              BEGIN
                                                                IF "Price List" <> '' THEN BEGIN
                                                                  lvPriceListRec.GET(Principal, "Price List");
                                                                  lvPriceListRec.TESTFIELD(Status, lvPriceListRec.Status::Open);
                                                                  "Ref. Date Unit Price" := lvPriceListRec."Start Date";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Price List }
    { 600 ;   ;Ref. Date Unit Price;Date          ;CaptionML=ENU=Reference Date Unit Price }
    { 610 ;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                    Closed=CONST(No),
                                                                                                    Blocked=CONST(No),
                                                                                                    Mandate for Filter=CONST(Project),
                                                                                                    No. Mandate for Filter=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF "Direct Debit Mandate ID" <> '' THEN
                                                                  TESTFIELD("Bill-to Customer No.");
                                                              END;

                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 620 ;   ;Payment Method Code (Inv.);Code10  ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code (Invoicing) }
    { 630 ;   ;Estimated Amount    ;Decimal       ;OnValidate=BEGIN
                                                                IF "Estimated Amount" <> 0 THEN BEGIN
                                                                  CALCFIELDS("Settlement Method");
                                                                  TESTFIELD("Settlement Method", "Settlement Method"::"Cost Plus");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Estimated Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 635 ;   ;Estimate Date       ;Date          ;OnValidate=BEGIN
                                                                IF "Estimate Date" <> 0D THEN BEGIN
                                                                  CALCFIELDS("Settlement Method");
                                                                  TESTFIELD("Settlement Method", "Settlement Method"::"Cost Plus");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Estimate Date }
  }
  KEYS
  {
    {    ;Project No.,Principal                   ;MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Principal,Project No.                    }
    {    ;Main Project No.,Project No.             }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Project No.,Principal,Principal Name,Contact No.,Contact Person No.,Contact Person Name }
  }
  CODE
  {
    VAR
      Text000@11012004 : TextConst 'ENU=Project Installments generated. Change them manually.';
      Text001@1210190002 : TextConst 'ENU=Process stopped';
      Text002@11012006 : TextConst 'ENU=%1 for this Project is %2.';
      CustomerRec@11012000 : Record 18;
      ProjPrincipalRec@11012002 : Record 11012005;
      ProjEntryRec@1210190005 : Record 11072005;
      ProjRec@11012003 : Record 11072003;
      Text004@1210190000 : TextConst 'ENU="Invoiced Installment present; process stopped"';
      Text005@1210190001 : TextConst 'ENU="Installments present; continue ?"';
      Text006@1210190006 : TextConst 'ENU="Job Entry for Sales Invoice present; continue ?"';
      gDelCompleteProject@1210190007 : Boolean;
      Text007@1210190008 : TextConst 'ENU="Invoiced Cost Plus Entry present; process stopped"';
      Text010@1100485000 : TextConst 'ENU=''%1'' not allowed on Project with %2';
      CustSurchRec@1100485001 : Record 11020367;
      Text011@1100525000 : TextConst 'ENU=%1 %2 only allowed on internal Project.';
      CurrencyExchangeRateRec@1100525001 : Record 330;
      SkipValidation@1100525002 : Boolean;
      SkipCopySalesSurcharges@1210190003 : Boolean;
      ProjectSiteMgt@1100528300 : Codeunit 11012282;
      Text012@1100409000 : TextConst 'ENU=%1 %2 is blocked.';
      Text013@1100525003 : TextConst 'ENU=Copy Currency %1 from de Customer to the Principal';
      Text014@1100528700 : TextConst 'ENU=Changing not allowed. Installment overview already exists.';
      SkipValidateFCY@1100525004 : Boolean;
      ProjectCurrencyExchangeRate@1100525005 : Record 11020628;

    PROCEDURE GetDefaultSalesSurcharges@1();
    VAR
      lvCustRec@1100485002 : Record 18;
    BEGIN
      IF Principal = '' THEN
        EXIT;

      IF (Principal <> xRec.Principal) OR
         ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
      BEGIN
        IF "Bill-to Customer No." <> '' THEN
          lvCustRec.GET("Bill-to Customer No.")
        ELSE
          lvCustRec.GET(Principal);
        CopySalesSurcharges(lvCustRec);
        IF "Invoice Text Installments" = '' THEN
          "Invoice Text Installments" := lvCustRec."Invoice Text Installments";
        IF "Invoice Text Cost Plus" = '' THEN
          "Invoice Text Cost Plus" := lvCustRec."Invoice Text Cost Plus";
      END;
    END;

    PROCEDURE CopySalesSurcharges@1100525000(lvCustRec@1100525000 : Record 18);
    VAR
      lvCustSurchRec@1100525002 : Record 11020367;
      lvCustSurchRec2@1100525001 : Record 11020367;
    BEGIN
      "Surcharge % Labor" := lvCustRec."Surcharge % Labor";
      "Surcharge % Material" := lvCustRec."Surcharge % Material";
      "Surcharge % Subcontr." := lvCustRec."Surcharge % Subcontr.";
      "Surcharge % Plant" := lvCustRec."Surcharge % Plant";
      "Surcharge % Sundry" := lvCustRec."Surcharge % Sundry";

      //*32583.sn
      IF SkipCopySalesSurcharges THEN
        SkipCopySalesSurcharges := FALSE
      ELSE BEGIN
      //*32583.en
        lvCustSurchRec2.SETRANGE("Record Type", lvCustSurchRec2."Record Type"::ProjCust);
        lvCustSurchRec2.SETRANGE("Customer No.", xRec.Principal);
        lvCustSurchRec2.SETRANGE(Code, "Project No.");
        lvCustSurchRec2.DELETEALL;

        lvCustSurchRec.SETRANGE("Record Type", lvCustSurchRec."Record Type"::Customer);
        lvCustSurchRec.SETRANGE("Customer No.", Principal);
        IF lvCustSurchRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvCustSurchRec2 := lvCustSurchRec;
            lvCustSurchRec2."Record Type" := lvCustSurchRec2."Record Type"::ProjCust;
            lvCustSurchRec2."Customer No." := Principal;
            lvCustSurchRec2.Code := "Project No.";
            IF lvCustSurchRec2.INSERT THEN;
          UNTIL lvCustSurchRec.NEXT = 0;
        END;
      END;  //*32583.n

      //code below doubles with getdefaultssalessurcharges related to external call
      IF "Invoice Text Installments" = '' THEN
        "Invoice Text Installments" := lvCustRec."Invoice Text Installments";
      IF "Invoice Text Cost Plus" = '' THEN
         "Invoice Text Cost Plus" := lvCustRec."Invoice Text Cost Plus";
    END;

    PROCEDURE InitRecord@1210190000();
    VAR
      lvProjSetupRec@1100525000 : Record 315;
    BEGIN
      lvProjSetupRec.GET;
      "Installments Generated" := FALSE;
      "Generation Date" := 0D;
      VALIDATE("Installments per Plot");
      CALCFIELDS("Settlement Method");
      IF "Settlement Method" = "Settlement Method"::"Cost Plus" THEN BEGIN
        //First Principal is Cost Plus Customer
        ProjPrincipalRec.RESET;
        ProjPrincipalRec.SETFILTER("Project No.","Project No.");
        IF ProjPrincipalRec.ISEMPTY THEN
          "Cost Plus Customer" := TRUE;
      END;
      "Collect Installment Invoice By" := lvProjSetupRec."Default Collect Inst. Inv. By";
      //"OLDOne Plot per Installm. Inv." := lvProjSetupRec."OLDDef. One Plot p. Inst. Inv."; //mg.o, 27-07-11: C-019332
    END;

    PROCEDURE SetDeleteCompleteProject@1210190003();
    BEGIN
      //**4PS01.n
      gDelCompleteProject := TRUE;
    END;

    PROCEDURE GenerateTenderParagraphs@1100525001();
    VAR
      SchemeLineRec@1100525000 : Record 11012478;
      TenderLineRec@1100525001 : Record 11012470;
      lvText000@1100525002 : TextConst 'ENU=Already Tender Paragraphs generated for Project Principal';
      lvText001@1100525003 : TextConst 'ENU=Tender Paragraph Scheme copied: %1 lines created';
    BEGIN
      TESTFIELD("Tender Paragraph Scheme");
      TESTFIELD("Quantity (Tender Paragraph)");
      TESTFIELD("Number of Points");

      TenderLineRec.SETRANGE("Project No.", "Project No.");
      TenderLineRec.SETRANGE(Principal, Principal);
      TenderLineRec.SETFILTER("Contract No.", '%1', '');
      IF TenderLineRec.FINDFIRST THEN
        ERROR(lvText000);

      SchemeLineRec.SETRANGE(Scheme, "Tender Paragraph Scheme");
      IF SchemeLineRec.FINDSET THEN BEGIN
        REPEAT
          TenderLineRec."Project No." := "Project No.";
          TenderLineRec.Principal := Principal;
          TenderLineRec.FillDefaultSettleExcess();  //C-026862.n
          TenderLineRec.VALIDATE("No.", SchemeLineRec."Tender Paragraph");
          TenderLineRec.INSERT(TRUE);
          TenderLineRec.Description := SchemeLineRec.Description;
          TenderLineRec.Quantity := "Quantity (Tender Paragraph)";
          TenderLineRec."Unit of Measure" := "Unit of Measure (Tender Par)";
          TenderLineRec."Number of Points/Percentage" := SchemeLineRec."Number of Points/Percentage";
          TenderLineRec."Total Amount (LCY)" := "Contract Amount (LCY)" * (TenderLineRec."Number of Points/Percentage"/ "Number of Points");
          TenderLineRec."Unit Price (LCY)" := TenderLineRec."Total Amount (LCY)" / TenderLineRec.Quantity;
          TenderLineRec.MODIFY;
        UNTIL SchemeLineRec.NEXT = 0;
      END;

      MESSAGE(lvText001, SchemeLineRec.COUNT);
    END;

    PROCEDURE CheckInvoiceAddress@1210190002();
    VAR
      AdrsRec@1210190000 : Record 222;
    BEGIN
      IF AdrsRec.GET("Bill-to Customer No.", "Alternative Bill-to Address") THEN BEGIN
        "Bill-to Name" := AdrsRec.Name;
        "Bill-to Name 2" := AdrsRec."Name 2";
        "Bill-to Address" := AdrsRec.Address;
        "Bill-to Address 2" := AdrsRec."Address 2";
        "Bill-to Post Code" := AdrsRec."Post Code";
        "Bill-to City" := AdrsRec.City;
      END ELSE
        CALCFIELDS("Bill-to Name","Bill-to Name 2","Bill-to Address","Bill-to Address 2","Bill-to Post Code","Bill-to City");
    END;

    PROCEDURE BuildRelationalStructure@1100525008(Action@1100525000 : Text[30]);
    VAR
      RelationalStructureMgt@1100525001 : Codeunit 11012238;
    BEGIN
      RelationalStructureMgt.BuildFromPrincipal(Rec, xRec, Action);
    END;

    LOCAL PROCEDURE SyncProject@1100525002();
    BEGIN
      IF ("Order No. Customer" <> xRec."Order No. Customer") OR
         ("Order Date" <> xRec."Order Date") THEN
      BEGIN
        ProjRec.GET("Project No.");
        IF ProjRec."Order No. Customer" = xRec."Order No. Customer" THEN BEGIN
          ProjRec."Order No. Customer" := "Order No. Customer";
          ProjRec."Commision Date Principal" := "Order Date";
          ProjRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE ValidateContractAmountLCY@1100530000();
    VAR
      CurrencyDate@1100530001 : Date;
      Currency2@1100530000 : Record 4;
    BEGIN
      ProjRec.GET("Project No.");
      //ProjRec.CheckProjectStatus(0);  //*29844.o
      ProjRec.CheckProjectStatus(ExtraStepProjectStatus());  //*29844.n

      IF ("Contract Amount (LCY)" <> xRec."Contract Amount (LCY)") AND "Installments Generated" THEN
        MESSAGE(Text000);

      Currency2.InitRoundingPrecision;
      IF "Currency Code" <> '' THEN BEGIN
        CurrencyDate := GetCurrencyDate;  //DP00886
        "Contract Amount" :=
          ROUND(
            CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Contract Amount (LCY)",
              CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",TRUE),TRUE),
            Currency2."Amount Rounding Precision");
      END ELSE
        "Contract Amount" := ROUND("Contract Amount (LCY)",Currency2."Amount Rounding Precision");
    END;

    PROCEDURE SetSkipValidation@1100525003();
    BEGIN
      SkipValidation := TRUE;
    END;

    PROCEDURE SetSkipCopySalesSurcharges@1210190001(Skip@1210190000 : Boolean);
    BEGIN
      //*32583.sn
      SkipCopySalesSurcharges := Skip;
    END;

    PROCEDURE EditDocuments@1100528702(DocumentTemplateTypeFilter@1210190003 : Text[250];ContactNo@1210190004 : Code[20];ContactPersonNo@1210190005 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      Job@1210190006 : Record 11072003;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      IF Job.GET("Project No.") THEN BEGIN
        RecRef.GETTABLE(Job);
        DocumentLinkRIDs[2] := RecRef.RECORDID;
      END;

      DocumentMailing.EditDocuments(
        DocumentTemplateTypeFilter, DocumentLinkRIDs, '', ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE ExtraStepProjectStatus@1210190004() : Integer;
    VAR
      ProjSetupRec@1210190000 : Record 315;
    BEGIN
      //*29844.n
      ProjSetupRec.GET;
      IF ProjSetupRec."Provisions at Closure" THEN
        EXIT(-1);
      EXIT(0);
    END;

    PROCEDURE ShowDetails@1100528600();
    VAR
      Customer@1100528600 : Record 18;
    BEGIN
      Customer.GET(Principal);
      PAGE.RUN(PAGE::"Customer Card", Customer);
    END;

    PROCEDURE InstallmentOverviewExists@1100528700() : Boolean;
    VAR
      InstallmentOverview@1100528700 : Record 11012265;
    BEGIN
      InstallmentOverview.SETRANGE("Project No.", "Project No.");
      InstallmentOverview.SETRANGE(Principal, Principal);
      EXIT(NOT InstallmentOverview.ISEMPTY);
    END;

    LOCAL PROCEDURE GetCurrencyDate@1100525004() CurrencyDate : Date;
    BEGIN
      //DP00886
      CurrencyDate := "Order Date";
      IF (CurrencyDate = 0D) THEN
        CurrencyDate := ProjRec."Starting Date";
      IF (CurrencyDate = 0D) THEN
        CurrencyDate := TODAY;
      EXIT(CurrencyDate);
    END;

    PROCEDURE SetSkipValidateFCY@1100528603(ISkipValidateFCY@1100528600 : Boolean);
    BEGIN
      //DP00886
      SkipValidateFCY := ISkipValidateFCY;
    END;

    PROCEDURE UpdateTenderElementCurrencyData@1100525031(iProject@1100525001 : Code[20];iPrincipal@1100525004 : Code[20]);
    VAR
      ProjectPrincipal@1100525002 : Record 11012005;
      TenderParagraphbyPrincipal@1100525000 : Record 11012470;
      ProjectCurrencyExchangeRate@1100525003 : Record 11020628;
      InstallmentMotivationLine@1100525005 : Record 11012472;
      InstallmentOverviewLine@1100525006 : Record 11012266;
    BEGIN
      //DP00886
      ProjectPrincipal.GET(iProject, iPrincipal);

      WITH TenderParagraphbyPrincipal DO BEGIN
        SETFILTER("Project No.", iProject);
        SETFILTER(Principal, iPrincipal);
        IF FINDSET THEN BEGIN
          REPEAT
            VALIDATE("Unit Price (FCY)"); //including CalcRelatedFields (TotalAmount+SettlementPrice)
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;

      WITH InstallmentMotivationLine DO BEGIN
        SETFILTER("Project No.", iProject);
        SETFILTER(Principal, iPrincipal);
        IF FINDSET THEN BEGIN
          REPEAT
            VALIDATE("Production Value (FCY)");
            VALIDATE("Production Value Cum. (FCY)");
            VALIDATE("Excess Prod. Value Cum. (FCY)");
            GetLineTotal;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;

      WITH InstallmentOverviewLine DO BEGIN
        SETFILTER("Project No.", iProject);
        SETFILTER(Principal, iPrincipal);
        IF FINDSET THEN BEGIN
          REPEAT
            VALIDATE("Production Value Cum. (FCY)");
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    BEGIN
    {
      4PS01 JD July, 21 2008 Call C-012772 Rounding of Settlement Prices is not correct
      4PS, 17-06-2014, C015923, SumIndexFields Contract Amount (LCY),Plot Price removed for better performance :)
    }
    END.
  }
}

