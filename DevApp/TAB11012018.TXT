OBJECT Table 11012018 Project Installment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Project No.,Principal;
    OnInsert=BEGIN
               CheckProjStatus();
               TestSettlMeth();
               DetermineVATPPG("VAT Prod. Posting Group" = '');
             END;

    OnModify=BEGIN
               CheckProjStatus();
             END;

    OnDelete=BEGIN
               //**4PS01.sn
               IF NOT gDeleteCompleteProject THEN BEGIN
                 CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)");
                 IF "Invoiced Price (LCY)" + "Invoice in Process (LCY)" <> 0 THEN
                   ERROR(Text006);

                 CheckProjStatus();
                 CheckDeleteLastInstalmOfLevel;
                 CheckInterestInstallmentsDelete;
                 CheckInstallmentMotivation();
                 CheckInstallmentOverview();
               END;
               //**4PS01.en
             END;

    OnRename=BEGIN
               CheckInstallmentNo();  //C000414
               CheckInterestInstallmentsRename;
             END;

    CaptionML=ENU=Project Installment;
    LookupPageID=Page11012025;
    DrillDownPageID=Page11012025;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Principal           ;Code20        ;TableRelation="Project Principal".Principal WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF Principal <> '' THEN
                                                                  ValidatePrincipal;  //db, 30-06-15: C022459
                                                              END;

                                                   CaptionML=ENU=Principal;
                                                   NotBlank=Yes }
    { 30  ;   ;Installment No.     ;Code10        ;OnValidate=BEGIN
                                                                CheckInstallmentNo();  //C000414
                                                              END;

                                                   CaptionML=ENU=Installment No.;
                                                   SQL Data Type=Variant;
                                                   NotBlank=Yes;
                                                   Numeric=Yes }
    { 40  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 50  ;   ;Commission No.      ;Code20        ;TableRelation=Commission.No. WHERE (Project No.=FIELD(Project No.),
                                                                                       Principal=FIELD(Principal));
                                                   CaptionML=ENU=Commission No. }
    { 60  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Revenue),
                                                                                               Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                xDimValRec@1100485000 : Record 349;
                                                              BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");
                                                                  "Cost Component" := DimValRec."Cost Component";

                                                                  IF Description = '' THEN
                                                                    Description := DimValRec.Name
                                                                  ELSE BEGIN
                                                                    IF ("Cost Object" <> xRec."Cost Object") AND (xRec."Cost Object" <> '') THEN BEGIN
                                                                      DimMgt.GetDimValueRec(2, xRec."Cost Object", xDimValRec, FALSE, xRec."Project No.");
                                                                      IF (DimValRec.Name <> '') AND ((Description = xDimValRec.Name) OR (xDimValRec.Name = '')) THEN
                                                                        Description := DimValRec.Name;
                                                                    END;
                                                                  END;

                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object }
    { 70  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group".Code;
                                                   OnValidate=BEGIN
                                                                RecalculateAmountInclVAT;  //CALL  C016659 new
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 80  ;   ;Installment Amount (LCY);Decimal   ;OnValidate=VAR
                                                                CurrencyDate@1100525000 : Date;
                                                                CurrencyExchangeRateRec@1100525001 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                              BEGIN
                                                                CALCFIELDS("Invoiced Price (LCY)","Invoice in Process (LCY)","Credit Memo in Process (LCY)");

                                                                IF CurrFieldNo = FIELDNO("Installment Amount (LCY)") THEN
                                                                  IF "Invoiced Price (LCY)" <> 0 THEN
                                                                    MESSAGE(Text000);

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := GetCurrencyDate;  //DP00886
                                                                  "Installment Amount" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
                                                                      1, "Project No.", CurrencyDate, "Currency Code", "Installment Amount (LCY)",
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Installment Amount" := ROUND("Installment Amount (LCY)",Currency2."Amount Rounding Precision");
                                                                END;

                                                                IF Points > 0 THEN
                                                                  VALIDATE("Points to be invoiced")
                                                                ELSE BEGIN
                                                                  "Invoice Price (LCY)" := "Installment Amount (LCY)" - "Invoiced Price (LCY)" -
                                                                    "Invoice in Process (LCY)" - "Credit Memo in Process (LCY)";
                                                                  VALIDATE("Invoice Price (LCY)");
                                                                END;

                                                                RecalculateAmountInclVAT;  //CALL  C016659 new
                                                              END;

                                                   CaptionML=ENU=Installment Amount (LCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 81  ;   ;Installment Amount  ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100525000 : Date;
                                                                CurrencyExchangeRateRec@1100525001 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                              BEGIN
                                                                CALCFIELDS("Invoiced Price (LCY)","Invoice in Process (LCY)","Credit Memo in Process (LCY)");

                                                                IF CurrFieldNo = FIELDNO("Installment Amount") THEN
                                                                  IF "Invoiced Price (LCY)" <> 0 THEN
                                                                    MESSAGE(Text000);

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := GetCurrencyDate;  //DP00886
                                                                  "Installment Amount (LCY)" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
                                                                      1, "Project No.", CurrencyDate, "Currency Code", "Installment Amount",
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Installment Amount (LCY)" := ROUND("Installment Amount",Currency2."Amount Rounding Precision");
                                                                END;

                                                                IF Points > 0 THEN
                                                                  VALIDATE("Points to be invoiced")
                                                                ELSE BEGIN
                                                                  "Invoice Price" := "Installment Amount" - "Invoiced Price" -
                                                                    "Invoice in Process" - "Credit Memo in Process";
                                                                  VALIDATE("Invoice Price");
                                                                END;

                                                                // C-027114.sn
                                                                RecalculateAmountInclVAT;  //CALL  C016659 new  --> code moved to function
                                                                // C-027114.en
                                                              END;

                                                   CaptionML=ENU=Installment Amount;
                                                   AutoFormatType=1 }
    { 82  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Invoiced Price (LCY)","Invoice in Process (LCY)","Credit Memo in Process (LCY)");

                                                                //M26021
                                                                IF CurrFieldNo = FIELDNO("Currency Code") THEN
                                                                  IF ("Invoice in Process (LCY)" <> 0 ) OR
                                                                     ("Credit Memo in Process (LCY)" <> 0 ) OR
                                                                     ("Invoiced Price (LCY)" <> 0) THEN
                                                                    ERROR(Text010);

                                                                VALIDATE("Installment Amount");
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 83  ;   ;Installment Amount Incl. VAT;Decimal;
                                                   CaptionML=ENU=Installment Amount Including VAT;
                                                   Editable=No }
    { 90  ;   ;Chargeable          ;Boolean       ;OnValidate=BEGIN
                                                                IF Chargeable THEN
                                                                  CheckChargebleAllowed(TRUE);
                                                              END;

                                                   CaptionML=ENU=Chargeable }
    { 100 ;   ;Invoice Price (LCY) ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100525001 : Date;
                                                                CurrencyExchangeRateRec@1100525000 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                              BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Invoice Price (LCY)")) AND (Points > 0) THEN
                                                                  MESSAGE(Text003,FIELDCAPTION("Points to be invoiced"));

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := GetCurrencyDate;  //DP00886
                                                                  "Invoice Price" :=
                                                                    ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
                                                                      1, "Project No.", CurrencyDate, "Currency Code", "Invoice Price (LCY)",
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Invoice Price" := ROUND("Invoice Price (LCY)",Currency2."Amount Rounding Precision");
                                                                END;

                                                                CALCFIELDS("Invoiced Price (LCY)","Invoice in Process (LCY)","Credit Memo in Process (LCY)");

                                                                IF NOT SuspendAmountCheck THEN BEGIN
                                                                  IF "Installment Amount (LCY)" <> 0 THEN BEGIN
                                                                    IF (("Invoice Price (LCY)" + "Invoiced Price (LCY)" + "Invoice in Process (LCY)" +
                                                                        "Credit Memo in Process (LCY)") / "Installment Amount (LCY)") > 1 THEN
                                                                      MESSAGE(Text004);
                                                                  END ELSE
                                                                    IF ("Invoice Price (LCY)" + "Invoiced Price (LCY)" + "Invoice in Process (LCY)" +
                                                                        "Credit Memo in Process (LCY)") <> 0 THEN
                                                                      MESSAGE(Text004);

                                                                  CheckContractAmount;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Price (LCY);
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 101 ;   ;Invoice Price       ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100525001 : Date;
                                                                CurrencyExchangeRateRec@1100525000 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                              BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Invoice Price")) AND (Points > 0) THEN
                                                                  MESSAGE(Text003,FIELDCAPTION("Points to be invoiced"));

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := GetCurrencyDate;  //DP00886
                                                                  "Invoice Price (LCY)" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
                                                                      1, "Project No.", CurrencyDate, "Currency Code" , "Invoice Price",
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",TRUE),TRUE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Invoice Price (LCY)" := ROUND("Invoice Price",Currency2."Amount Rounding Precision");
                                                                END;

                                                                CALCFIELDS("Invoiced Price","Invoice in Process","Credit Memo in Process");

                                                                IF NOT SuspendAmountCheck THEN BEGIN
                                                                  IF "Installment Amount" <> 0 THEN BEGIN
                                                                    IF (("Invoice Price" + "Invoiced Price" + "Invoice in Process" +
                                                                        "Credit Memo in Process") / "Installment Amount") > 1 THEN
                                                                      MESSAGE(Text004);
                                                                  END ELSE
                                                                    IF ("Invoice Price" + "Invoiced Price" + "Invoice in Process" +
                                                                        "Credit Memo in Process") <> 0 THEN
                                                                      MESSAGE(Text004);

                                                                  CheckContractAmount;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Invoice Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 110 ;   ;Invoiced Price (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job Ledger Entry"."Total Price (LCY)" WHERE (Project Invoice=CONST(Yes),
                                                                                                                  Installment Invoice=CONST(Yes),
                                                                                                                  Job No.=FIELD(Project No.),
                                                                                                                  Principal=FIELD(Principal),
                                                                                                                  Installment No.=FIELD(Installment No.),
                                                                                                                  Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Invoiced Price (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 111 ;   ;Invoiced Price      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job Ledger Entry"."Total Price" WHERE (Project Invoice=CONST(Yes),
                                                                                                            Installment Invoice=CONST(Yes),
                                                                                                            Job No.=FIELD(Project No.),
                                                                                                            Principal=FIELD(Principal),
                                                                                                            Installment No.=FIELD(Installment No.),
                                                                                                            Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Invoiced Price;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 120 ;   ;Invoice in Process (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                      Project Invoice=CONST(Yes),
                                                                                                      Installment Invoice=CONST(Yes),
                                                                                                      Job No.=FIELD(Project No.),
                                                                                                      Sell-to Customer No.=FIELD(Principal),
                                                                                                      Installment No.=FIELD(Installment No.),
                                                                                                      Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Invoice in Process (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 121 ;   ;Invoice in Process  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=CONST(Invoice),
                                                                                              Project Invoice=CONST(Yes),
                                                                                              Installment Invoice=CONST(Yes),
                                                                                              Job No.=FIELD(Project No.),
                                                                                              Sell-to Customer No.=FIELD(Principal),
                                                                                              Installment No.=FIELD(Installment No.),
                                                                                              Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Invoice in Process;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;Credit Memo in Process (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Sales Line"."Amount (LCY)" WHERE (Document Type=CONST(Credit Memo),
                                                                                                       Project Invoice=CONST(Yes),
                                                                                                       Installment Invoice=CONST(Yes),
                                                                                                       Job No.=FIELD(Project No.),
                                                                                                       Sell-to Customer No.=FIELD(Principal),
                                                                                                       Installment No.=FIELD(Installment No.),
                                                                                                       Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Credit Memo in Process (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 131 ;   ;Credit Memo in Process;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Sales Line".Amount WHERE (Document Type=CONST(Credit Memo),
                                                                                               Project Invoice=CONST(Yes),
                                                                                               Installment Invoice=CONST(Yes),
                                                                                               Job No.=FIELD(Project No.),
                                                                                               Sell-to Customer No.=FIELD(Principal),
                                                                                               Installment No.=FIELD(Installment No.),
                                                                                               Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Credit Memo in Process;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 140 ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Description Extension Contract");
                                                              END;

                                                   CaptionML=ENU=Extension Contract }
    { 141 ;   ;Description Extension Contract;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Extension Contract".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                              Contract No.=FIELD(Extension Contract)));
                                                   CaptionML=ENU=Description Extension Contract;
                                                   Editable=No }
    { 150 ;   ;Plot No.            ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Plot No. }
    { 160 ;   ;Option              ;Code20        ;TableRelation=Option.Option WHERE (Project No.=FIELD(Project No.),
                                                                                      Plot No.=FIELD(Plot No.),
                                                                                      Main Group=FIELD(Main Group),
                                                                                      Group=FIELD(Group),
                                                                                      Sub Group=FIELD(Sub Group));
                                                   OnValidate=VAR
                                                                lvOptionRec@1100525000 : Record 11012502;
                                                              BEGIN
                                                                //* The 'TableRelation' was 'Option.Option WHERE (Project No.=FIELD(Project No.))', this was wrong.
                                                                //* So for call C-013665 alse where for the fields Plot, MainGroup, Group and SubGroup is added, this is correct.
                                                                //* Call 14016: Now there is a customer that made use of this error (for years). They only fill the 'Option' field,
                                                                //* and then this field is used in the customized invoice report. Now the old situation must be possible again.
                                                                //* It is not possible to set remove the added field from the 'TableRelation'. So 'ValidateTableRelation' is set
                                                                //* to "No", and the checks are done here in the OnValidate-trigger.
                                                                IF Option <> '' THEN BEGIN
                                                                  IF ("Plot No." = '') AND ("Main Group" = '') AND (Group = '') AND ("Sub Group" = '') THEN BEGIN
                                                                    lvOptionRec.SETRANGE("Project No.","Project No.");
                                                                    lvOptionRec.SETRANGE(Option,Option);
                                                                  END ELSE BEGIN
                                                                    lvOptionRec.SETRANGE("Project No.","Project No.");
                                                                    lvOptionRec.SETRANGE("Plot No.","Plot No.");
                                                                    lvOptionRec.SETRANGE("Main Group","Main Group");
                                                                    lvOptionRec.SETRANGE(Group,Group);
                                                                    lvOptionRec.SETRANGE("Sub Group","Sub Group");
                                                                    lvOptionRec.SETRANGE(Option,Option);
                                                                  END;
                                                                  lvOptionRec.FINDFIRST;  //* Must give an error in not be present, so do not use 'IF FINDFIRST THEN'
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Option }
    { 165 ;   ;Main Group          ;Code20        ;TableRelation="Option Main Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Main Group }
    { 170 ;   ;Group               ;Code20        ;TableRelation="Option Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Group }
    { 180 ;   ;Sub Group           ;Code20        ;TableRelation="Option Sub Group".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Sub Group }
    { 190 ;   ;Installment Total  (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Installment"."Installment Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                           Principal=FIELD(Principal),
                                                                                                                           Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Installment Total (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 191 ;   ;Installment Total   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Installment"."Installment Amount" WHERE (Project No.=FIELD(Project No.),
                                                                                                                     Principal=FIELD(Principal),
                                                                                                                     Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Installment Total;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 200 ;   ;Points              ;Integer       ;OnValidate=BEGIN
                                                                VALIDATE("Points to be invoiced");
                                                                IF Points = 0 THEN
                                                                  VALIDATE("Installment Amount (LCY)");
                                                              END;

                                                   CaptionML=ENU=Points;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 210 ;   ;Points to be invoiced;Integer      ;OnValidate=BEGIN
                                                                IF "Points to be invoiced" > Points THEN
                                                                  ERROR(Text005,FIELDCAPTION("Points to be invoiced"),FIELDCAPTION(Points));

                                                                IF Points = 0 THEN
                                                                  EXIT;

                                                                VALIDATE("Invoice Price",ROUND("Points to be invoiced"/Points * "Installment Amount"));
                                                              END;

                                                   CaptionML=ENU=Points to be invoiced;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 220 ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                ElementFormat@1210190005 : Codeunit 11012022;
                                                                lvInstalNo@1210190006 : Code[10];
                                                              BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN BEGIN
                                                                  ProjElemRec.GET("Project No.", Element);
                                                                  ProjElemRec.CheckProjectElementBlocked; //Call 6564
                                                                END;

                                                                IF NOT CheckElementAllowedOnInstall(
                                                                  "Project No.", Principal, "Plot No.", Element, Option, "Extension Contract", "Installment No.", lvInstalNo)
                                                                THEN
                                                                  ERROR(Text008, Element, lvInstalNo, "Project No.", Principal, "Plot No.");

                                                                CALCFIELDS("Element Description"); // jhoek.280611
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 221 ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=ENU=Element Description;
                                                   Description=jhoek.280611: call 23793;
                                                   Editable=No }
    { 230 ;   ;Installment Motivation Date;Date   ;TableRelation="Installment Motivation"."Production Date" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Principal=FIELD(Principal));
                                                   CaptionML=ENU=Installment Motivation Date;
                                                   Editable=No }
    { 240 ;   ;Percentage Points   ;Decimal       ;OnValidate=BEGIN
                                                                IF Points <> 0 THEN BEGIN
                                                                  VALIDATE("Points to be invoiced",ROUND((Points/100) * "Percentage Points",1,'='));
                                                                  IF CurrFieldNo <> FIELDNO("Total Percentage Points") THEN
                                                                    VALIDATE("Total Percentage Points", InvoicedPoints / Points * 100 + "Percentage Points");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Percentage Points }
    { 245 ;   ;Total Percentage Points;Decimal    ;OnValidate=BEGIN
                                                                IF Points <> 0 THEN
                                                                  IF CurrFieldNo = FIELDNO("Total Percentage Points") THEN
                                                                    VALIDATE("Percentage Points", "Total Percentage Points" - InvoicedPoints / Points * 100);
                                                              END;

                                                   CaptionML=ENU=Total Percentage Points }
    { 250 ;   ;Expected Invoice Date;Date         ;OnValidate=BEGIN
                                                                IF ("Orig Contract Installment Date" = 0D) THEN
                                                                  "Orig Contract Installment Date" := "Expected Invoice Date";
                                                              END;

                                                   CaptionML=ENU=Expected Invoice Date }
    { 260 ;   ;Last Installment    ;Boolean       ;CaptionML=ENU=Last Installment }
    { 270 ;   ;Due Date Base       ;Date          ;CaptionML=ENU=Due Date Base }
    { 290 ;   ;Due Date Actual     ;Date          ;CaptionML=ENU=Due Date Actual;
                                                   Editable=No }
    { 300 ;   ;Interest Installment;Option        ;CaptionML=ENU=Interest Installment;
                                                   OptionCaptionML=ENU=" ,Before Contract Date,Before Transfer Date";
                                                   OptionString=[ ,Before Contract Date,Before Transfer Date];
                                                   Editable=No }
    { 310 ;   ;Interest Inst. No. Contract;Code10 ;CaptionML=ENU=Interest Inst. No. Contract;
                                                   Editable=No }
    { 320 ;   ;Interest Inst. No. Transfer;Code10 ;CaptionML=ENU=Interest Inst. No. Transfer;
                                                   Editable=No }
    { 330 ;   ;Installment Scheme SerNo.;Code10   ;CaptionML=ENU=Installment Scheme Serial No.;
                                                   Editable=No }
    { 340 ;   ;Percentage Contract Amount;Decimal ;OnValidate=VAR
                                                                lvProjPrincipalRec@1100485000 : Record 11012005;
                                                                lvPlotRec@1100485001 : Record 11012500;
                                                                lvExtContract@1100485002 : Record 11012004;
                                                                lvOptionRec@1100485003 : Record 11012502;
                                                              BEGIN
                                                                IF "Installment No." = '0' THEN
                                                                  ERROR(Text11012000);

                                                                IF "Percentage Contract Amount" = 0 THEN
                                                                  EXIT;

                                                                IF "Extension Contract" <> '' THEN BEGIN
                                                                  IF lvExtContract.GET("Project No.","Extension Contract") THEN
                                                                    VALIDATE("Installment Amount (LCY)","Percentage Contract Amount" * lvExtContract."Contract Amount (LCY)" / 100);
                                                                END ELSE BEGIN
                                                                  IF Option <> '' THEN BEGIN
                                                                    lvOptionRec.SETRANGE("Project No.","Project No.");
                                                                    lvOptionRec.SETRANGE("Plot No.","Plot No.");
                                                                    lvOptionRec.SETRANGE("Main Group","Main Group");
                                                                    lvOptionRec.SETRANGE(Group,Group);
                                                                    lvOptionRec.SETRANGE("Sub Group","Sub Group");
                                                                    lvOptionRec.SETRANGE(Option,Option);
                                                                    IF lvOptionRec.FINDFIRST THEN
                                                                      VALIDATE("Installment Amount (LCY)","Percentage Contract Amount" * lvOptionRec."Contract Amount" / 100);
                                                                  END ELSE BEGIN
                                                                    IF "Plot No." <> '' THEN BEGIN
                                                                       IF lvPlotRec.GET("Project No.","Plot No.") THEN
                                                                         VALIDATE("Installment Amount (LCY)","Percentage Contract Amount" *
                                                                                   (lvPlotRec."Building Price" + lvPlotRec."Additional Costs")/ 100);
                                                                    END ELSE BEGIN
                                                                      IF Principal <> '' THEN BEGIN
                                                                        IF lvProjPrincipalRec.GET(xRec."Project No.",xRec.Principal) THEN
                                                                          VALIDATE("Installment Amount (LCY)","Percentage Contract Amount" *  lvProjPrincipalRec."Contract Amount (LCY)" / 100);
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Percentage of Contract Amount;
                                                   BlankZero=Yes }
    { 350 ;   ;Credit Restriction  ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Credit Restriction" WHERE (No.=FIELD(Principal)));
                                                   TableRelation="Credit Restriction";
                                                   CaptionML=ENU=Credit Restriction;
                                                   Editable=No }
    { 360 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 370 ;   ;House Model         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Plot."House Model" WHERE (Project No.=FIELD(Project No.),
                                                                                                Plot No.=FIELD(Plot No.)));
                                                   TableRelation="House Model".Model WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=House Model;
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 380 ;   ;Block No.           ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Plot."Block No." WHERE (Project No.=FIELD(Project No.),
                                                                                              Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Block No.;
                                                   Editable=No }
    { 390 ;   ;Seq. No. in Block   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Plot."Seq. No. in Block" WHERE (Project No.=FIELD(Project No.),
                                                                                                      Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Seq. No. in Block;
                                                   Editable=No }
    { 400 ;   ;Floor No.           ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Plot."Floor No." WHERE (Project No.=FIELD(Project No.),
                                                                                              Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Floor No.;
                                                   Editable=No }
    { 410 ;   ;Period Start        ;Date          ;CaptionML=ENU=Startdate Period }
    { 420 ;   ;Period End          ;Date          ;CaptionML=ENU=Enddate Period }
    { 430 ;   ;VAT Amount Long Lease;Decimal      ;OnValidate=BEGIN
                                                                IF "VAT Amount Long Lease" <> 0 THEN
                                                                  CheckLongLease;

                                                                "Invoice VAT Amount Long Lease" := "VAT Amount Long Lease";
                                                              END;

                                                   CaptionML=ENU=VAT Amount Long Lease;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 440 ;   ;Invoice VAT Amount Long Lease;Decimal;
                                                   OnValidate=BEGIN
                                                                IF "Invoice VAT Amount Long Lease" <> 0 THEN
                                                                  CheckLongLease;
                                                              END;

                                                   CaptionML=ENU=Invoice VAT Amount Long Lease;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 460 ;   ;Project Manager     ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Project Manager" WHERE (No.=FIELD(Project No.)));
                                                   TableRelation=Employee;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Manager;
                                                   Editable=No }
    { 500 ;   ;Project Activity No.;Code30        ;TableRelation="Project Planning Activity".No. WHERE (Type=CONST(Milestone),
                                                                                                        Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Project Activity No. }
    { 510 ;   ;RAW Final Installment;Boolean      ;CaptionML=ENU=RAW Final Installment;
                                                   Editable=No }
    { 520 ;   ;Orig Contract Installment Date;Date;CaptionML=ENU=Orig Contract Installment Date }
    { 530 ;   ;Remarks             ;Text30        ;CaptionML=ENU=Remarks }
    { 600 ;   ;Document (in Process);Code20       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Line"."Document No." WHERE (Document Type=FILTER(Invoice|Credit Memo),
                                                                                                         Project Invoice=CONST(Yes),
                                                                                                         Installment Invoice=CONST(Yes),
                                                                                                         Job No.=FIELD(Project No.),
                                                                                                         Sell-to Customer No.=FIELD(Principal),
                                                                                                         Installment No.=FIELD(Installment No.),
                                                                                                         Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Document (in Process);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 601 ;   ;Document (Invoiced) ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Job Ledger Entry"."Document No." WHERE (Project Invoice=CONST(Yes),
                                                                                                               Installment Invoice=CONST(Yes),
                                                                                                               Job No.=FIELD(Project No.),
                                                                                                               Principal=FIELD(Principal),
                                                                                                               Installment No.=FIELD(Installment No.),
                                                                                                               Plot No.=FIELD(Plot No.)));
                                                   CaptionML=ENU=Document (Invoiced);
                                                   Editable=No;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;Project No.,Principal,Plot No.,Installment No.;
                                                   SumIndexFields=Installment Amount (LCY),Installment Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Project No.,Principal,Installment No.   ;SumIndexFields=Installment Amount (LCY),Installment Amount;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Plot No.,Principal,Installment Motivation Date;
                                                   SumIndexFields=Installment Amount (LCY),Installment Amount }
    {    ;Project No.,Principal,Extension Contract,Plot No.,Main Group,Group,Sub Group,Option,VAT Prod. Posting Group;
                                                   SumIndexFields=Installment Amount (LCY),Installment Amount }
    {    ;Project Activity No.                    ;SumIndexFields=Installment Amount (LCY),Installment Amount }
    {    ;Project No.,Principal,Extension Contract,Plot No.,Main Group,Group,Sub Group,Option,Installment No.;
                                                   SumIndexFields=Installment Amount (LCY),Installment Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012003 : TextConst 'ENU=Warning, installment is already invoiced.';
      Text001@11012004 : TextConst 'ENU=Extension status should be Invoicing Allowed';
      Text002@11012005 : TextConst 'ENU=Option status should be Invoicing Allowed';
      Text003@11012006 : TextConst 'ENU=Warning, you negotiate %1.';
      Text004@11012007 : TextConst 'ENU=Warning, total invoice amount exceeds installment amount';
      Text005@11012008 : TextConst 'ENU=%1 should not be larger then %2';
      ProjectSetup@1210190006 : Record 315;
      ProjRec@1210190007 : Record 11072003;
      DimValRec@11012000 : Record 349;
      MM@11012001 : Record 11012004;
      OptionRec@11012002 : Record 11012502;
      PlotRec@1210190005 : Record 11012500;
      ProjElemRec@1210190008 : Record 11012010;
      DimMgt@11012009 : Codeunit 408;
      Text006@1210190002 : TextConst 'ENU=Installment is already invoiced, cannot remove.';
      gDeleteCompleteProject@1210190003 : Boolean;
      Text007@1210190004 : TextConst 'ENU=Total Installments %1 exceeds Contract Amount %2.';
      Text008@1210190009 : TextConst 'ENU=Element ''%1'' already present on Installment No. ''%2'' van Project ''%3'', Principal ''%4'', Plot No. ''%5''.';
      Text009@1100485001 : TextConst 'ENU=Plot Price Installment of %1 %2 contains Long Lease. Choose a %3 with a manual VAT Setup.';
      Text11012000@1100485000 : TextConst 'ENU=You cannot enter a percentage for a Plot Installment.';
      SuspendAmountCheck@1100530000 : Boolean;
      Text010@1210190000 : TextConst 'ENU=Installment is already invoiced, cannot remove.';
      Text012@1100525000 : TextConst 'ENU=may not start with a zero';
      Text013@1100525001 : TextConst 'ENU=There are both Invoices and Credit Memo''s for this Installment. Choose "Yes" for Invoices, "No" for Credit Memo''s.';

    PROCEDURE TestSettlMeth@1();
    VAR
      ProjRec@11012000 : Record 11072003;
    BEGIN
      IF ProjRec.GET("Project No.") THEN
        ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
    END;

    PROCEDURE DetermineVATPPG@2(FillFieldVatProdPostGrp@1210190000 : Boolean);
    VAR
      ProjPrincipalRec@11012000 : Record 11012005;
    BEGIN
      IF ProjPrincipalRec.GET("Project No.",Principal) THEN BEGIN
        IF FillFieldVatProdPostGrp THEN BEGIN  //* Mostly installments are generated and VatProdPostGrp is already filled, then it
          IF ProjPrincipalRec."VAT Prod. Posting Group" <> '' THEN  //* should not be overwrritten with that of the proj.principal
            "VAT Prod. Posting Group" := ProjPrincipalRec."VAT Prod. Posting Group";
        END;
        //*29882.so
        //IF ProjPrincipalRec."Cost Object" <> '' THEN BEGIN
        //  //kzwerver,sn, 08-12-2010, FO Vrijgeven meer-/minderwerk
        //  ProjectSetup.GET;
        //  IF (ProjectSetup."Cost Object from" <> ProjectSetup."Cost Object from"::"Installment Scheme") THEN BEGIN
        //  //kzwerver,en, 08-12-2010, FO Vrijgeven meer-/minderwerk
        //    "Cost Object" := ProjPrincipalRec."Cost Object";
        //    DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");
        //    "Cost Component" := DimValRec."Cost Component";
        //    Description := DimValRec.Name;  //*28250.n
        //  END;
        //END;
        //*29882.eo
      END;

      IF ("Installment No." = '0') AND ("Plot No." <> '') THEN BEGIN
        //the VAT Prod. Posting Group for the plot installment of the plot no. depends on building date and sales date
        PlotRec.GET("Project No.", "Plot No.");
        IF PlotRec.PlotVatProdPostingGroup <> '' THEN
          "VAT Prod. Posting Group" := PlotRec.PlotVatProdPostingGroup
      END;
    END;

    PROCEDURE InvoicedPoints@3() : Integer;
    BEGIN
      IF (Points = 0) OR ("Installment Amount (LCY)" = 0) THEN
        EXIT(0);

      CALCFIELDS("Invoiced Price (LCY)","Invoice in Process (LCY)","Credit Memo in Process (LCY)");

      EXIT(
        ROUND(("Invoiced Price (LCY)" + "Invoice in Process (LCY)" + "Credit Memo in Process (LCY)") /
        "Installment Amount (LCY)" * Points,1));
    END;

    PROCEDURE CheckDeleteLastInstalmOfLevel@1210190000();
    VAR
      lvInstRec@1210190000 : Record 11012018;
      lvExtRec@1210190003 : Record 11012004;
      lvProjCustRec@1210190002 : Record 11012005;
      lvPlotRec@1100485001 : Record 11012500;
      lvOptionRec@1100485002 : Record 11012502;
      lvReset@1100485003 : Boolean;
      lvLevel@1100485000 : Integer;
    BEGIN
      //* When deleting the last installment of a certain level, then switch off 'Installments Generated' on that level.

      IF ("Extension Contract" = '') AND ("Plot No." = '') AND (Option = '') THEN BEGIN
        IF (Principal <> '') THEN
          lvLevel := 1;
      END ELSE BEGIN
        IF ("Extension Contract" <> '') THEN
          lvLevel := 2
        ELSE BEGIN
          IF ("Plot No." <> '') THEN BEGIN
            IF (Option = '') THEN
              lvLevel := 3
            ELSE
              lvLevel := 4;  //* Check on filled field 'Option' is sufficient, check on groups not needed here
          END
        END;
      END;

      lvInstRec.SETRANGE("Project No.", "Project No.");
      lvInstRec.SETRANGE("Extension Contract", '');
      lvInstRec.SETRANGE("Plot No.", '');
      lvInstRec.SETRANGE(Option, '');
      CASE lvLevel OF
        1:  //* Project principal level
          lvInstRec.SETRANGE(Principal, Principal);
        2:  //* Extension contract level
          lvInstRec.SETRANGE("Extension Contract", "Extension Contract");
        3:  //* Plot no. level
          lvInstRec.SETRANGE("Plot No.", "Plot No.");
        4:  //* Option level (always per plot no.)
          BEGIN
            lvInstRec.SETRANGE("Plot No.", "Plot No.");
            lvInstRec.SETRANGE("Main Group", "Main Group");
            lvInstRec.SETRANGE(Group, Group);
            lvInstRec.SETRANGE("Sub Group", "Sub Group");
            lvInstRec.SETRANGE(Option, Option);
          END;
        ELSE
          EXIT;
      END;
      IF NOT lvInstRec.FINDFIRST THEN
        lvReset := TRUE
      ELSE BEGIN
        //* Only current to delete record present (check on all fields of index 1)
        IF (lvInstRec."Project No." = "Project No.") AND (lvInstRec.Principal = Principal) AND
           (lvInstRec."Plot No." = "Plot No.") AND (lvInstRec."Installment No." = "Installment No.")
        THEN BEGIN
          IF (lvInstRec.NEXT = 0) THEN
            lvReset := TRUE;
        END;
      END;
      IF NOT lvReset THEN
        EXIT;

      CASE lvLevel OF
        1:  //* Project principal level
          BEGIN
            IF lvProjCustRec.GET("Project No.", Principal) THEN BEGIN
              IF lvProjCustRec."Installments Generated" THEN BEGIN
                lvProjCustRec."Installments Generated" := FALSE;
                lvProjCustRec.MODIFY;
              END;
            END;
          END;
        2:  //* Extension contract level
          BEGIN
            IF lvExtRec.GET("Project No.", "Extension Contract") THEN BEGIN
              IF lvExtRec."Installments Generated" THEN BEGIN
                lvExtRec."Installments Generated" := FALSE;
                lvExtRec.MODIFY;
              END;
            END;
          END;
        3:  //* Plot No. level
          BEGIN
            IF lvPlotRec.GET("Project No.", "Plot No.") THEN BEGIN
              IF lvPlotRec."Installments Generated" THEN BEGIN
                lvPlotRec."Installments Generated" := FALSE;
                lvPlotRec.MODIFY;
              END;
            END;
          END;
        4:  //* Option level (always per plot no.)
          BEGIN
            IF lvPlotRec.GET("Project No.", "Plot No.") THEN BEGIN
              IF lvOptionRec.GET("Project No.", "Plot No.", lvPlotRec."House Model", "Main Group", Group, "Sub Group", Option) THEN
      BEGIN
                IF lvOptionRec."Installments Generated" THEN BEGIN
                  lvOptionRec."Installments Generated" := FALSE;
                  lvOptionRec.MODIFY;
                END;
              END;
            END;
          END;
        ELSE
          EXIT;
      END;
    END;

    PROCEDURE DeleteInstallment@1210190003(lvarProjectNo@1210190000 : Code[20];lvarPrincipal@1210190001 : Code[20];lvarPlotNo@1210190002 : Code[10];lvarInstallmentNo@1210190003 : Code[10];lvarDeleteCompleteProject@1210190004 : Boolean);
    BEGIN
      //**4PS01.sn
      //function: DeleteInstallment
      IF GET(lvarProjectNo,lvarPrincipal,lvarPlotNo,lvarInstallmentNo) THEN BEGIN
        gDeleteCompleteProject := lvarDeleteCompleteProject;
        DELETE(TRUE);
      END;
    END;

    PROCEDURE CheckContractAmount@1210190004();
    VAR
      ExtRec@1210190001 : Record 11012004;
      OptionRec@1210190006 : Record 11012502;
      MotivationRec@1210190007 : Record 11012471;
      ProjPrincRec@1210190002 : Record 11012005;
      MainRec@1210190003 : Record 11012018;
      lCustomerRec@1100485001 : Record 18;
      InstTotal@1210190004 : Decimal;
      ContrAmnt@1210190005 : Decimal;
      CurrentRecCounted@1100485000 : Boolean;
    BEGIN
      InstTotal := 0;

      IF ("Installment Motivation Date" <> 0D) THEN BEGIN
        //this is always in LCY according to design
        MotivationRec.GET("Project No.", Principal, "Installment Motivation Date");
        ContrAmnt := MotivationRec."Contract Amount (LCY)";

        CurrentRecCounted := FALSE; //**4PS02.n
        MainRec.RESET;
        MainRec.SETRANGE("Project No.", "Project No.");
        MainRec.SETRANGE(Principal, Principal);
        MainRec.SETRANGE("Installment Motivation Date", "Installment Motivation Date");
        MainRec.SETFILTER("Installment No.", '1..');
        IF MainRec.FINDSET THEN BEGIN
          REPEAT
            IF MainRec."Installment No." = "Installment No." THEN BEGIN
              InstTotal := InstTotal + "Installment Amount (LCY)";
              CurrentRecCounted := TRUE; //**4PS02.n
            END ELSE
              InstTotal := InstTotal + MainRec."Installment Amount (LCY)";
          UNTIL MainRec.NEXT = 0;
          IF NOT CurrentRecCounted AND ("Installment No." > '0') THEN         //**4PS02.sn
            InstTotal += "Installment Amount (LCY)";  //**4PS02.en
          IF InstTotal > ContrAmnt THEN
            MESSAGE(Text007, InstTotal, ContrAmnt);
        END;
        EXIT;
      END;

      IF (Option <> '') THEN BEGIN
        //this is always in LCY according to design
        PlotRec.GET("Project No.", "Plot No.");
        OptionRec.GET("Project No.", "Plot No.", PlotRec."House Model", "Main Group", Group, "Sub Group", Option);
        //OptionRec.CALCFIELDS(Principal);
        lCustomerRec.GET(OptionRec.Principal);
        IF lCustomerRec."Prices Including VAT" THEN
          ContrAmnt := OptionRec."Sales Amount incl. VAT"
        ELSE                                                   //**4PS03.en
          ContrAmnt := OptionRec."Contract Amount";


        CurrentRecCounted := FALSE; //**4PS02.n
        MainRec.RESET;
        MainRec.SETRANGE("Project No.", "Project No.");
        MainRec.SETRANGE("Plot No.", "Plot No.");
        MainRec.SETRANGE("Main Group", "Main Group");
        MainRec.SETRANGE(Group, Group);
        MainRec.SETRANGE("Sub Group", "Sub Group");
        MainRec.SETRANGE(Option, Option);
        MainRec.SETFILTER("Installment No.", '1..');
        IF MainRec.FINDSET THEN BEGIN
          REPEAT
            IF MainRec."Installment No." = "Installment No." THEN BEGIN
              InstTotal := InstTotal + "Installment Amount (LCY)";
              CurrentRecCounted := TRUE; //**4PS02.n
            END ELSE
              InstTotal := InstTotal + MainRec."Installment Amount (LCY)";
          UNTIL MainRec.NEXT = 0;
          IF NOT CurrentRecCounted AND ("Installment No." > '0') THEN         //**4PS02.sn
            InstTotal += "Installment Amount (LCY)";  //**4PS02.en
          IF InstTotal > ContrAmnt THEN
            MESSAGE(Text007, InstTotal, ContrAmnt);
        END;
        EXIT;
      END;

      IF ("Plot No." <> '') AND (Option = '') THEN BEGIN
        //this is always in LCY according to design
        PlotRec.GET("Project No.", "Plot No.");
        ContrAmnt := PlotRec."Building Price" + PlotRec."Additional Costs";

        CurrentRecCounted := FALSE; //**4PS02.n
        MainRec.RESET;
        MainRec.SETRANGE("Project No.", "Project No.");
        MainRec.SETRANGE("Plot No.", "Plot No.");
        MainRec.SETRANGE(Option, '');
        MainRec.SETFILTER("Installment No.", '1..');
        IF MainRec.FINDSET THEN BEGIN
          REPEAT
            IF MainRec."Installment No." = "Installment No." THEN BEGIN
              InstTotal := InstTotal + "Installment Amount (LCY)";
              CurrentRecCounted := TRUE; //**4PS02.n
            END ELSE
              InstTotal := InstTotal + MainRec."Installment Amount (LCY)";
          UNTIL MainRec.NEXT = 0;
          IF NOT CurrentRecCounted AND ("Installment No." > '0') THEN         //**4PS02.sn
            InstTotal += "Installment Amount (LCY)";  //**4PS02.en
          IF InstTotal > ContrAmnt THEN
            MESSAGE(Text007, InstTotal, ContrAmnt);
        END;
        EXIT;
      END;

      IF ("Extension Contract" <> '') THEN BEGIN
        //this is always in FCY according to design (FCY is leading)
        ExtRec.GET("Project No.", "Extension Contract");
        ContrAmnt := ExtRec."Contract Amount";

        CurrentRecCounted := FALSE; //**4PS02.n
        MainRec.RESET;
        MainRec.SETRANGE("Project No.", "Project No.");
        MainRec.SETRANGE("Extension Contract", "Extension Contract");
        MainRec.SETFILTER("Installment No.", '1..');
        IF MainRec.FINDSET THEN BEGIN
          REPEAT
            IF MainRec."Installment No." = "Installment No." THEN BEGIN
              InstTotal := InstTotal + "Installment Amount";
              CurrentRecCounted := TRUE; //**4PS02.n
            END ELSE
              InstTotal := InstTotal + MainRec."Installment Amount";
          UNTIL MainRec.NEXT = 0;
          IF NOT CurrentRecCounted AND ("Installment No." > '0') THEN         //**4PS02.sn
            InstTotal += "Installment Amount";                               //**4PS02.en
          IF InstTotal > ContrAmnt THEN
            MESSAGE(Text007, InstTotal, ContrAmnt);
        END;
        EXIT;
      END;

      IF ("Plot No." = '') AND (Option = '') AND ("Extension Contract" = '') THEN BEGIN
        //this is always in FCY according to design (FCY is leading)
        ProjPrincRec.GET("Project No.", Principal);
        ContrAmnt := ProjPrincRec."Contract Amount";

        CurrentRecCounted := FALSE; //**4PS02.n
        MainRec.RESET;
        MainRec.SETRANGE("Project No.", "Project No.");
        MainRec.SETRANGE(Principal, Principal);
        MainRec.SETFILTER("Plot No.", '%1', '');
        MainRec.SETFILTER(Option, Option, '%1', '');
        MainRec.SETFILTER("Extension Contract", '%1', '');
        MainRec.SETFILTER("Installment No.", '1..');
        IF MainRec.FINDSET THEN BEGIN
          REPEAT
            IF MainRec."Installment No." = "Installment No." THEN BEGIN
              InstTotal := InstTotal + "Installment Amount";
              CurrentRecCounted := TRUE; //**4PS02.n
            END ELSE
              InstTotal := InstTotal + MainRec."Installment Amount";
          UNTIL MainRec.NEXT = 0;
          IF NOT CurrentRecCounted AND ("Installment No." > '0') THEN         //**4PS02.sn
            InstTotal += "Installment Amount";                                //**4PS02.en
          IF InstTotal > ContrAmnt THEN
            MESSAGE(Text007, InstTotal, ContrAmnt);
        END;
      END;
    END;

    PROCEDURE CheckInstallmentMotivation@1100485000();
    VAR
      lvInstallMotivationRec@1100485000 : Record 11012471;
    BEGIN
      IF "Installment Motivation Date" <> 0D THEN BEGIN
        IF NOT lvInstallMotivationRec.READPERMISSION THEN
          EXIT;
        IF lvInstallMotivationRec.GET("Project No.", Principal, "Installment Motivation Date") THEN BEGIN
          lvInstallMotivationRec."Installments Created" := FALSE;
          lvInstallMotivationRec."Installments Created on" := 0D;
          lvInstallMotivationRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE CheckInstallmentOverview@1210190001();
    VAR
      lvInstallmOvRec@1210190000 : Record 11012265;
    BEGIN
      IF NOT "RAW Final Installment" THEN
        EXIT;

      lvInstallmOvRec.SETRANGE("Project No.","Project No.");
      lvInstallmOvRec.SETRANGE(Principal,Principal);
      IF lvInstallmOvRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvInstallmOvRec."Final Installment Created" := FALSE;
          lvInstallmOvRec."Final Installment Created on" := 0D;
          lvInstallmOvRec.MODIFY;
        UNTIL lvInstallmOvRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckInterestInstallmentsDelete@1210190005();
    VAR
      lProjInstRec@1210190000 : Record 11012018;
    BEGIN
      IF ("Project No." <> '') AND
         ("Plot No." <> '') AND
         ("Interest Installment" <> "Interest Installment"::" ") THEN
      BEGIN
        lProjInstRec.SETRANGE("Interest Installment", "Interest Installment"::" " );
        lProjInstRec.SETRANGE("Project No.", "Project No.");
        lProjInstRec.SETRANGE("Plot No.", "Plot No.");
        IF lProjInstRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF (lProjInstRec."Interest Inst. No. Contract" = "Installment No.") OR
               (lProjInstRec."Interest Inst. No. Transfer" = "Installment No.") THEN
            BEGIN
              IF (lProjInstRec."Interest Inst. No. Contract" = "Installment No.") THEN
                lProjInstRec."Interest Inst. No. Contract" := '';
              IF (lProjInstRec."Interest Inst. No. Transfer" = "Installment No.") THEN
                lProjInstRec."Interest Inst. No. Transfer" := '';
              lProjInstRec.MODIFY();
            END;
          UNTIL lProjInstRec.NEXT =0;
        END;
      END;
    END;

    PROCEDURE CheckInterestInstallmentsRename@1210190006();
    VAR
      lProjInstRec@1210190000 : Record 11012018;
    BEGIN
      IF ("Installment No." <> xRec."Installment No.") AND
         (xRec."Project No." <> '') AND
         (xRec."Plot No." <> '') AND
         ("Interest Installment" <> "Interest Installment"::" ") THEN
      BEGIN
        lProjInstRec.SETRANGE("Interest Installment", "Interest Installment"::" " );
        lProjInstRec.SETRANGE("Project No.", xRec."Project No.");
        lProjInstRec.SETRANGE("Plot No.", xRec."Plot No.");
        IF lProjInstRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF (lProjInstRec."Interest Inst. No. Contract" = xRec."Installment No.") OR
               (lProjInstRec."Interest Inst. No. Transfer" = xRec."Installment No.") THEN
            BEGIN
              IF (lProjInstRec."Interest Inst. No. Contract" = xRec."Installment No.") THEN
                lProjInstRec."Interest Inst. No. Contract" := "Installment No.";
              IF (lProjInstRec."Interest Inst. No. Transfer" = xRec."Installment No.") THEN
                lProjInstRec."Interest Inst. No. Transfer" := "Installment No.";
              lProjInstRec.MODIFY();
            END;
          UNTIL lProjInstRec.NEXT =0;
        END;
      END;
    END;

    PROCEDURE CheckElementAllowedOnInstall@1210190007(IProjectNo@1210190000 : Code[20];IPrincipal@1210190003 : Code[20];IPlotNo@1210190004 : Code[10];IElement@1210190001 : Code[20];IOption@1210190006 : Code[20];IExtensionContract@1100485000 : Code[10];ICurrentInstallNo@1210190002 : Code[10];VAR OInstallNo@1210190008 : Code[10]) : Boolean;
    VAR
      lvProjRec@1210190007 : Record 11072003;
      lvProjInstallRec@1210190005 : Record 11012018;
    BEGIN
      //* At 'Generate Progress from Installment Progress' an element can only exist once per combination of
      //* project/principal/plot no. (so for project- and plot no. installments). No need to test this for option installements
      //* and extension contracts, in these cases an element can exist at more installements.


      WITH lvProjInstallRec DO BEGIN
        OInstallNo := '';
        IF (IElement = '') OR (IOption <> '') OR (IExtensionContract <> '') THEN
          EXIT(TRUE);

        IF NOT lvProjRec.GET(IProjectNo) THEN
          EXIT(TRUE);

        //IF NOT lvProjRec."Progress from Instal. Progress" THEN  //C-019166.o
        IF (NOT lvProjRec."Progress from Instal. Progress") OR (NOT lvProjRec."Element per Installment") THEN  //C-019166.n
          EXIT(TRUE);

        SETRANGE("Project No.", IProjectNo);
        SETRANGE(Principal, IPrincipal);
        SETRANGE("Plot No.", IPlotNo);
        SETRANGE(Element, IElement);
        SETRANGE(Option, '');
        SETRANGE("Extension Contract", '');
        IF (ICurrentInstallNo <> '') THEN
          SETFILTER("Installment No.", '<>%1', ICurrentInstallNo);
        IF FINDFIRST THEN BEGIN
          OInstallNo := "Installment No.";
          EXIT(FALSE);
        END;

        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckProjStatus@1100485001();
    BEGIN
      ProjectSetup.GET;
      IF ProjRec.GET("Project No.") THEN
        IF (ProjectSetup."Provisions at Closure") THEN
          ProjRec.CheckProjectStatus(-1)
        ELSE
          ProjRec.CheckProjectStatus(1);
    END;

    PROCEDURE CheckChargebleAllowed@1100485002(IErrorMode@1100485000 : Boolean) : Boolean;
    BEGIN
      IF "Extension Contract" <> '' THEN BEGIN
        MM.GET("Project No.", "Extension Contract");
        IF MM.Status <> MM.Status::"Invoicing Allowed" THEN BEGIN
          IF IErrorMode THEN
            ERROR(Text001)
          ELSE
            EXIT(FALSE);
        END;
      END;

      IF Option <> '' THEN BEGIN
        IF PlotRec.GET("Project No.", "Plot No.") THEN BEGIN
          IF OptionRec.GET("Project No.", "Plot No.", PlotRec."House Model", "Main Group", Group, "Sub Group", Option) THEN BEGIN
            IF OptionRec.Status <> OptionRec.Status::Invoice THEN BEGIN
              IF IErrorMode THEN
                ERROR(Text002)
              ELSE
                EXIT(FALSE);
            END;
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckLongLease@1100485004();
    VAR
      VatPostingSetup@1100485000 : Record 325;
    BEGIN
      IF ProjRec.GET("Project No.") THEN
        ProjRec.TESTFIELD("Long Lease", TRUE);
      IF VatPostingSetup.GET(ProjRec."VAT Bus. Posting Group", "VAT Prod. Posting Group") THEN
        IF NOT VatPostingSetup.Manually THEN
          IF "Plot No." = '' THEN
            ERROR(Text009, FIELDCAPTION("Project No."), "Project No.", PlotRec.FIELDCAPTION("Installment Scheme"))
          ELSE
            ERROR(
             Text009,
             STRSUBSTNO('%1 %2', FIELDCAPTION("Project No."), "Project No."),
             STRSUBSTNO('%1 %2', FIELDCAPTION("Plot No."), "Plot No."),
             PlotRec.FIELDCAPTION("Installment Scheme"));
    END;

    PROCEDURE SetSuspendAmountCheck@1100530000();
    BEGIN
      SuspendAmountCheck := TRUE;
    END;

    PROCEDURE SetChargeable@1100528400(Value@1100528400 : Boolean);
    BEGIN
      IF Chargeable = Value THEN
        EXIT;//Nothing needs to be done, chargeable already has the requested value.

      IF Value THEN BEGIN
        IF CheckChargebleAllowed(FALSE) THEN
          Chargeable := Value;
      END ELSE
        Chargeable := Value;
    END;

    PROCEDURE SetChargeableCollective@1210190002();
    VAR
      ProjectInstallmentRec@1210190000 : Record 11012018;
    BEGIN
      //kzwerver, 110802, n, #23203
      ProjectInstallmentRec.COPY(Rec);
      IF ProjectInstallmentRec.FINDSET THEN
        REPEAT
          IF (ProjectInstallmentRec."Invoice Price" <> 0) OR
             NOT ProjectInstallmentRec.InvoiceHasBeenCreated
          THEN BEGIN
            ProjectInstallmentRec.SetChargeable(TRUE);
            ProjectInstallmentRec.MODIFY;
          END;
        UNTIL (ProjectInstallmentRec.NEXT = 0);
    END;

    PROCEDURE GetPaymentTermsCode@1210190008() : Code[10];
    VAR
      ProjectPrincipal@1210190003 : Record 11012005;
      Customer@1210190002 : Record 18;
    BEGIN
      //**4PS, 25692.n
      IF ProjectPrincipal.GET("Project No.", Principal) THEN BEGIN
        IF ProjectPrincipal."Payment Terms Code" <> '' THEN BEGIN
          EXIT(ProjectPrincipal."Payment Terms Code");
        END ELSE BEGIN
          IF Customer.GET(Principal) THEN BEGIN
            IF Customer."Payment Terms Code" <> '' THEN
              EXIT(Customer."Payment Terms Code");
          END;
        END;
      END;
      EXIT('');
    END;

    PROCEDURE CheckInstallmentNo@1100525000();
    BEGIN
      //C000414
      IF ("Installment No." <> '') AND ("Installment No." <> '0') THEN
        IF COPYSTR("Installment No.", 1, 1) = '0' THEN
          FIELDERROR("Installment No.", Text012);
    END;

    PROCEDURE ResetOrigContractInstDate@1100525001();
    VAR
      ProjectInstallment@1100525001 : Record 11012018;
      ChangeOrigContrInstallDate@1100525000 : Page 11125074;
    BEGIN
      ProjectInstallment.SETRANGE("Project No.", "Project No.");
      ProjectInstallment.SETRANGE("Extension Contract", "Extension Contract");

      ProjectInstallment.Principal := Principal;
      ProjectInstallment."Plot No." := "Plot No.";
      ProjectInstallment."Installment No." := "Installment No.";

      ChangeOrigContrInstallDate.SETTABLEVIEW(ProjectInstallment);
      ChangeOrigContrInstallDate.SETRECORD(ProjectInstallment);
      ChangeOrigContrInstallDate.RUNMODAL;
    END;

    PROCEDURE RecalculateAmountInclVAT@1100525002();
    VAR
      ProjPrincipalRec@1100525001 : Record 11012005;
      CreateProjectInvoicesReport@1100525000 : Report 11012014;
    BEGIN
      //CALL C016659
      IF ProjRec.GET("Project No.") THEN;

      IF NOT ProjPrincipalRec.GET("Project No.",Principal) THEN
        ProjPrincipalRec."VAT Bus. Posting Group" := '';

      "Installment Amount Incl. VAT" := CreateProjectInvoicesReport.CalcAmountInclVat("Installment Amount",
        "VAT Prod. Posting Group",ProjPrincipalRec."VAT Bus. Posting Group", ProjRec."VAT Bus. Posting Group");
    END;

    PROCEDURE InvoiceHasBeenCreated@1100528000() : Boolean;
    BEGIN
      CALCFIELDS("Document (in Process)", "Document (Invoiced)");
      IF ("Document (in Process)" <> '') OR
         ("Document (Invoiced)" <> '')
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetPrincipalName@1100525003() : Text;
    VAR
      ProjectPrincipal@1100525000 : Record 11012005;
    BEGIN
      IF ProjectPrincipal.GET("Project No.", Principal) THEN // call C023285
        ProjectPrincipal.CALCFIELDS("Principal Name");
      EXIT(ProjectPrincipal."Principal Name");
    END;

    PROCEDURE ShowPostedInvoices@1100525004();
    VAR
      JobLedgerEntry@1100525000 : Record 11072005;
      SalesInvoiceHeader@1100525001 : Record 112;
      SalesCrMemoHeader@1100525002 : Record 114;
    BEGIN
      //C018872
      JobLedgerEntry.SETRANGE("Project Invoice",TRUE);
      JobLedgerEntry.SETRANGE("Installment Invoice",TRUE);
      JobLedgerEntry.SETRANGE("Job No.","Project No.");
      JobLedgerEntry.SETRANGE(Principal,Principal);
      JobLedgerEntry.SETRANGE("Installment No.","Installment No.");
      JobLedgerEntry.SETRANGE("Plot No.","Plot No.");
      JobLedgerEntry.FINDSET(FALSE);
      REPEAT
        SalesInvoiceHeader."No." := JobLedgerEntry."Document No.";
        SalesInvoiceHeader.MARK(TRUE);

        SalesCrMemoHeader."No." := JobLedgerEntry."Document No.";
        SalesCrMemoHeader.MARK(TRUE);
      UNTIL JobLedgerEntry.NEXT = 0;
      SalesInvoiceHeader.MARKEDONLY(TRUE);
      SalesCrMemoHeader.MARKEDONLY(TRUE);

      IF SalesCrMemoHeader.COUNT = 0 THEN
        PAGE.RUNMODAL(0,SalesInvoiceHeader)
      ELSE
        IF SalesInvoiceHeader.COUNT = 0 THEN
          PAGE.RUNMODAL(0,SalesCrMemoHeader)
        ELSE
          IF CONFIRM(Text013,TRUE) THEN
            PAGE.RUNMODAL(0,SalesInvoiceHeader)
          ELSE
            PAGE.RUNMODAL(0,SalesCrMemoHeader);
    END;

    PROCEDURE ValidatePrincipal@1100525005();
    VAR
      ProjectPrincipal@1100525000 : Record 11012005;
    BEGIN
      //db, 30-06-15: C022459
      IF ProjectPrincipal.GET("Project No.",Principal) THEN BEGIN
        VALIDATE("Currency Code", ProjectPrincipal."Currency Code");
        //*29882.sn
        IF ProjectPrincipal."Cost Object" <> '' THEN BEGIN
          ProjectSetup.GET;
          IF (ProjectSetup."Cost Object from" = ProjectSetup."Cost Object from"::"Project Principal") THEN
            VALIDATE("Cost Object", ProjectPrincipal."Cost Object");
        END;
        //*29882.en
      END;
    END;

    LOCAL PROCEDURE GetCurrencyDate@1100525006() CurrencyDate : Date;
    BEGIN
      //DP00886
      CurrencyDate := "Installment Motivation Date";
      IF (CurrencyDate = 0D) THEN
        CurrencyDate := TODAY;
      EXIT(CurrencyDate);
    END;

    BEGIN
    END.
  }
}

