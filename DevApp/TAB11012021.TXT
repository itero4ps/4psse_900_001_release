OBJECT Table 11012021 Settlement Sheet
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Project No.,Principal,Commission No.;
    OnInsert=VAR
               JobSetup@1000000000 : Record 315;
             BEGIN
               //db, 04-04-10: moved to OnNewRecord on form because of ignoring manual input.
               //SettlRec.SETRANGE("Project No.","Project No.");
               //SettlRec.SETRANGE(Principal,Principal);
               //SettlRec.SETRANGE("Commision No.","Commision No.");
               //IF SettlRec.FIND('+') AND (SettlRec."No." <> '') THEN
               //  "No." := INCSTR(SettlRec."No.")
               //ELSE
               //  "No." := '1';

               TESTFIELD("Project No.");
               TESTFIELD(Principal);
               TESTFIELD("Commission No.");

               ProjRec.GET("Project No.");
               Text := ProjRec.Text;
               "Order No. Customer" := ProjRec."Order No. Customer";
               "Commision Date Principal" := ProjRec."Commision Date Principal"; //**4PS02.n

               ProjRec.CheckProjectStatus(0);
               VALIDATE(Principal);
               VALIDATE("Commission No.");

               //"Reference Date" := TODAY;  //db, 17-09-08
               "Reference Date" := ValidateCu.GetRefDateProject(ProjRec);

               //<< Itero.PR
               JobSetup.GET();
               VALIDATE(Status,JobSetup."Default Seattlement Status");
               //>>
             END;

    OnModify=BEGIN
               VALIDATE("Collective List No.");
             END;

    OnDelete=VAR
               CostPlusRec@11012000 : Record 11012019;
             BEGIN
               CostPlusRec.RESET;
               CostPlusRec.SETRANGE("Project No.","Project No.");
               CostPlusRec.SETRANGE(Principal,Principal);
               CostPlusRec.SETRANGE("Commission No.","Commission No.");
               CostPlusRec.SETRANGE("Settl.Sheet No.","No.");
               CostPlusRec.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Settlement Sheet;
    LookupPageID=Page11012047;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No. }
    { 20  ;   ;Principal           ;Code20        ;TableRelation="Project Principal".Principal WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Principal }
    { 30  ;   ;Commission No.      ;Code20        ;TableRelation=Commission.No. WHERE (Project No.=FIELD(Project No.),
                                                                                       Principal=FIELD(Principal));
                                                   CaptionML=ENU=Commission No. }
    { 40  ;   ;No.                 ;Code10        ;CaptionML=ENU=No.;
                                                   NotBlank=Yes;
                                                   Numeric=Yes }
    { 50  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 60  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF Status < xRec.Status THEN
                                                                  IF NOT CONFIRM(Text000,FALSE) THEN
                                                                    Status := xRec.Status;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Provisional,Offered,Approved,Invoice,Expired;
                                                   OptionString=Provisional,Offered,Approved,Invoice,Expired }
    { 70  ;   ;Text                ;Text250       ;CaptionML=ENU=Text }
    { 80  ;   ;Project Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Project Description;
                                                   Editable=No }
    { 90  ;   ;Principal Name      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Principal)));
                                                   CaptionML=ENU=Principal Name;
                                                   Editable=No }
    { 100 ;   ;Commision Description;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Commission.Description WHERE (Project No.=FIELD(Project No.),
                                                                                                    Principal=FIELD(Principal),
                                                                                                    No.=FIELD(Commission No.)));
                                                   CaptionML=ENU=Commision Description;
                                                   Editable=No }
    { 110 ;   ;Reference Date      ;Date          ;OnValidate=VAR
                                                                CostPlusRec@1210190000 : Record 11012019;
                                                              BEGIN
                                                                CostPlusRec.SETRANGE("Project No.","Project No.");
                                                                CostPlusRec.SETRANGE(Principal,Principal);
                                                                CostPlusRec.SETRANGE("Commission No.","Commission No.");
                                                                CostPlusRec.SETRANGE("Settl.Sheet No.","No.");
                                                                CostPlusRec.SETRANGE("Reference Date",xRec."Reference Date");
                                                                CostPlusRec.SETRANGE(Invoiced, FALSE);  //db, 05-12-08
                                                                IF CostPlusRec.FIND('-') THEN BEGIN
                                                                  REPEAT
                                                                    CostPlusRec.SetValidateHourRateCode(TRUE);  //* Prevent that a new 'Hour Rate Code' is determined
                                                                    CostPlusRec.VALIDATE("Reference Date","Reference Date");
                                                                    CostPlusRec.MODIFY;
                                                                  UNTIL CostPlusRec.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Reference Date }
    { 120 ;   ;Open (Purchase)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Outstanding Amount" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Open (Purchase);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;Received/Not Invoiced;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Amt. Rcd. Not Invoiced" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Received/Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 140 ;   ;Open Amount (Hours) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Open Amount (Hours);
                                                   Editable=No }
    { 150 ;   ;Order No. Customer  ;Text50        ;CaptionML=ENU=Order No. Customer }
    { 160 ;   ;Invoiced            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Cost Plus Entry"."Sales Amount" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Principal=FIELD(Principal),
                                                                                                                   Commission No.=FIELD(Commission No.),
                                                                                                                   Settl.Sheet No.=FIELD(No.),
                                                                                                                   Invoiced=CONST(Yes)));
                                                   CaptionML=ENU=Invoiced }
    { 170 ;   ;To Invoice          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Cost Plus Entry"."Sales Amount" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Principal=FIELD(Principal),
                                                                                                                   Commission No.=FIELD(Commission No.),
                                                                                                                   Settl.Sheet No.=FIELD(No.),
                                                                                                                   Invoiced=CONST(No)));
                                                   CaptionML=ENU=To Invoice }
    { 180 ;   ;Hash Total          ;Decimal       ;CaptionML=ENU=Hashtotal }
    { 190 ;   ;Commision Date Principal;Date      ;CaptionML=ENU=Commision Date Principal }
    { 200 ;   ;Collective List No. ;Code20        ;TableRelation="Project Collective-List";
                                                   OnValidate=VAR
                                                                ProjectCostPlusEntry@1100528600 : Record 11012019;
                                                                ProjectCollectiveList@1100528601 : Record 11071875;
                                                              BEGIN
                                                                IF xRec."Collective List No." = "Collective List No." THEN EXIT;

                                                                IF "Collective List No." <> '' THEN
                                                                  CheckCollectiveList
                                                                ELSE BEGIN
                                                                  ProjectCollectiveList.GET(xRec."Collective List No.");
                                                                  ProjectCollectiveList.TESTFIELD(Status, ProjectCollectiveList.Status::Open);
                                                                END;

                                                                ProjRec.GET("Project No.");
                                                                ProjRec.CheckProjectStatus(0);

                                                                ProjectCostPlusEntry.SETRANGE("Project No.", "Project No.");
                                                                ProjectCostPlusEntry.SETRANGE(Invoiced, FALSE);
                                                                //ProjectCostPlusEntry.SETRANGE(Chargeable, TRUE);
                                                                ProjectCostPlusEntry.SETRANGE(Principal, Principal);
                                                                ProjectCostPlusEntry.SETRANGE("Commission No.", "Commission No.");
                                                                ProjectCostPlusEntry.SETRANGE("Settl.Sheet No.", "No.");
                                                                ProjectCostPlusEntry.MODIFYALL("Collective List No.", "Collective List No.", TRUE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupCollectiveListNo();
                                                            END;

                                                   CaptionML=ENU=Collective List No. }
    { 250 ;   ;Expected Invoice Date;Date         ;CaptionML=ENU=Expected Invoice Date }
    { 500 ;   ;Total Cost (Settlement Sheet);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Cost Plus Entry"."Cost Amount" WHERE (Project No.=FIELD(Project No.),
                                                                                                                  Principal=FIELD(Principal),
                                                                                                                  Commission No.=FIELD(Commission No.),
                                                                                                                  Settl.Sheet No.=FIELD(No.)));
                                                   CaptionML=ENU=Total Cost (Settlement Sheet);
                                                   Description=jhoek.200611;
                                                   Editable=No }
    { 501 ;   ;Total Cost (Project);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Cost Plus Entry"."Cost Amount" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Total Cost (Project);
                                                   Description=jhoek.200611;
                                                   Editable=No }
    { 510 ;   ;Total Sales (Settlement Sheet);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Cost Plus Entry"."Sales Amount" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Principal=FIELD(Principal),
                                                                                                                   Commission No.=FIELD(Commission No.),
                                                                                                                   Settl.Sheet No.=FIELD(No.)));
                                                   CaptionML=ENU=Total Sales (Settlement Sheet);
                                                   Description=jhoek.200611;
                                                   Editable=No }
    { 511 ;   ;Total Sales (Project);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Project Cost Plus Entry"."Sales Amount" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Total Sales (Project);
                                                   Description=jhoek.200611;
                                                   Editable=No }
    { 520 ;   ;Date Last Status Change;DateTime   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Change Log Entry"."Date and Time" WHERE (Table No.=CONST(11012021),
                                                                                                             Field No.=CONST(60),
                                                                                                             Primary Key Field 1 Value=FIELD(Project No.),
                                                                                                             Primary Key Field 2 Value=FIELD(Principal),
                                                                                                             Primary Key Field 3 Value=FIELD(Commission No.),
                                                                                                             Primary Key Field 4 Value=FIELD(No.)));
                                                   CaptionML=ENU=Date Last Status Change;
                                                   Editable=No }
    { 600 ;   ;Supervisor          ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Commission.Supervisor WHERE (Project No.=FIELD(Project No.),
                                                                                                   Principal=FIELD(Principal),
                                                                                                   No.=FIELD(Commission No.)));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Supervisor;
                                                   Editable=No }
    { 610 ;   ;Bill-to Customer No.;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Bill-to Customer No." WHERE (Project No.=FIELD(Project No.),
                                                                                                                        Principal=FIELD(Principal)));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Bill-to Customer No.;
                                                   Editable=No }
    { 620 ;   ;Alternative Bill-to Address;Code10 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Alternative Bill-to Address" WHERE (Project No.=FIELD(Project No.),
                                                                                                                               Principal=FIELD(Principal)));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Alternative Bill-to Address;
                                                   Editable=No }
    { 630 ;   ;Main Project        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Main Project" WHERE (No.=FIELD(Project No.)));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Main Project;
                                                   Editable=No }
    { 640 ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Currency Code" WHERE (Project No.=FIELD(Project No.),
                                                                                                                 Principal=FIELD(Principal)));
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 650 ;   ;Global Dimension 1 Code;Code20     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Global Dimension 1 Code" WHERE (No.=FIELD(Project No.)));
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   Editable=No;
                                                   CaptionClass='1,1,1' }
  }
  KEYS
  {
    {    ;Project No.,Principal,Commission No.,No.;Clustered=Yes }
    {    ;Collective List No.                      }
    {    ;Principal                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012002 : TextConst 'ENU=Are you sure to reverse the status ?';
      ProjRec@11012001 : Record 11072003;
      ValidateCu@1100485000 : Codeunit 11012033;
      Text001@1100525000 : TextConst 'ENU=. (%1 % of %2)';
      TextWrongDiscount@1100285100 : TextConst 'ENU=Prices with to low margin found!\Would you like to se a list of them?';

    PROCEDURE InsertDefCustAgreementLines@1210190000(IProjectNo@1210190004 : Code[20];IPrincipalNo@1210190003 : Code[20];ICommisionNo@1210190002 : Code[20];ISettlSheetNo@1210190001 : Code[10];IRefDate@1210190005 : Date);
    VAR
      lvCostPlusRec@1210190006 : Record 11012019;
      lvDefCustAgreeRec@1210190007 : Record 11020203;
      lvDimValRec@1210190010 : Record 349;
      lvDimMgt@1210190000 : Codeunit 408;
      lvNextLineNo@1210190008 : Integer;
    BEGIN
      IF (IProjectNo = '') OR (IPrincipalNo = '') THEN
        EXIT;

      lvCostPlusRec.SETRANGE("Project No.",IProjectNo);
      lvCostPlusRec.SETRANGE(Principal,IPrincipalNo);
      lvCostPlusRec.SETRANGE("Commission No.",ICommisionNo);
      lvCostPlusRec.SETRANGE("Settl.Sheet No.",ISettlSheetNo);
      IF lvCostPlusRec.FIND('-') THEN
        EXIT;

      lvDefCustAgreeRec.SETRANGE("Customer No.", IPrincipalNo);
      IF NOT lvDefCustAgreeRec.FIND('-') THEN
        EXIT;

      lvNextLineNo := 10000;
      REPEAT
        lvCostPlusRec.INIT;
        lvCostPlusRec."Project No." := IProjectNo;
        lvCostPlusRec.Principal := IPrincipalNo;
        lvCostPlusRec."Commission No." := ICommisionNo;
        lvCostPlusRec."Settl.Sheet No." := ISettlSheetNo;
        lvCostPlusRec."Line No." := lvNextLineNo;
        lvNextLineNo := lvNextLineNo + 10000;
        lvCostPlusRec.INSERT(TRUE);  //db, 23-06-08

        lvCostPlusRec."Reference Date" := IRefDate;
        IF (lvDefCustAgreeRec."Cost Type" = lvDefCustAgreeRec."Cost Type"::Material) AND (lvDefCustAgreeRec."Item No." <> '') THEN
          lvCostPlusRec.VALIDATE("Item No.", lvDefCustAgreeRec."Item No.");
        lvCostPlusRec.VALIDATE("Cost Object", lvDefCustAgreeRec."Cost Object");
        IF (lvDefCustAgreeRec."Cost Type" = lvDefCustAgreeRec."Cost Type"::Labor) THEN
          lvCostPlusRec.VALIDATE("Hour Rate Code",lvDefCustAgreeRec."Hour Rate Code");
        lvCostPlusRec."Surcharge %" := lvCostPlusRec.GetSurcharge;  //db, 23-06-08
        lvCostPlusRec.VALIDATE("Basic Price");
        lvCostPlusRec.Description := lvDefCustAgreeRec.Description;
        IF lvDefCustAgreeRec."Cost Type" =  lvDefCustAgreeRec."Cost Type"::Labor THEN
          lvCostPlusRec.VALIDATE(Quantity, (lvDefCustAgreeRec.Quantity * lvDefCustAgreeRec.Norm))
        ELSE
          lvCostPlusRec.VALIDATE(Quantity, lvDefCustAgreeRec.Quantity);
        lvCostPlusRec."Unit of Measure" := lvDefCustAgreeRec."Unit of Measure";
        IF lvDefCustAgreeRec."Cost Type" =  lvDefCustAgreeRec."Cost Type"::Labor THEN BEGIN
          lvDimMgt.GetDimValueRec(2, lvCostPlusRec."Cost Object", lvDimValRec, FALSE, lvCostPlusRec."Project No.");
          IF lvDimValRec."Unit of Time" <> '' THEN
            lvCostPlusRec."Unit of Measure" := lvDimValRec."Unit of Time";
        END;
        lvCostPlusRec.MODIFY(TRUE);  //db, 23-06-08
      UNTIL lvDefCustAgreeRec.NEXT = 0;
    END;

    PROCEDURE CalcTotalRevenues@1100485000() Rev : Decimal;
    BEGIN
      //**4PS01.sn
      CALCFIELDS(Invoiced,"To Invoice");
      EXIT(Invoiced + "To Invoice" - CalcTotalBasicPrice);
    END;

    PROCEDURE CalcTotalBasicPrice@1100485001() Costs : Decimal;
    VAR
      lvCPEntryRec@1100485002 : Record 11012019;
      lvTotCostDec@1100485000 : Decimal;
    BEGIN
      //**4PS01.sn
      lvTotCostDec := 0;
      lvCPEntryRec.SETFILTER("Project No.", "Project No.");
      lvCPEntryRec.SETFILTER(Principal, Principal);
      lvCPEntryRec.SETFILTER("Commission No.", "Commission No.");
      lvCPEntryRec.SETFILTER("Settl.Sheet No.", "No.");
      IF lvCPEntryRec.FINDSET(FALSE, FALSE) THEN
        REPEAT
          //IF lvCPEntryRec."Cost Price" <> 0 THEN  //db, 20-08-07: testcall 1855
          //  lvTotCostDec += lvCPEntryRec."Cost Price" *  lvCPEntryRec.Quantity
          //ELSE
          lvTotCostDec += lvCPEntryRec."Basic Price" *  lvCPEntryRec.Quantity;
        UNTIL lvCPEntryRec.NEXT = 0;
      EXIT(lvTotCostDec);
    END;

    PROCEDURE CreateSurchargeLines@1100525000();
    VAR
      GLSetup@1100525010 : Record 98;
      ProjCostPlusEntry@1100525000 : Record 11012019;
      ProjCostPlusSurcharge@1100525001 : Record 11020561;
      RecRef@1100525009 : RecordRef;
      SalesPriceMgt@1100525008 : Codeunit 11012036;
      SurchargeFound@1100525002 : Boolean;
      SurchargeIsValid@1100525004 : Boolean;
      NextLineNo@1100525003 : Integer;
      TotBaseAmount@1100525005 : Decimal;
    BEGIN
      GLSetup.GET;

      //Remove previous generated surcharge lines first if not invoiced
      ProjCostPlusEntry.SETRANGE("Project No.", "Project No.");
      ProjCostPlusEntry.SETRANGE(Principal, Principal);
      ProjCostPlusEntry.SETRANGE("Commission No.", "Commission No.");
      ProjCostPlusEntry.SETRANGE("Settl.Sheet No.", "No.");
      ProjCostPlusEntry.SETRANGE("Generated Surcharge Line", TRUE);
      ProjCostPlusEntry.SETRANGE(Invoiced, FALSE);
      IF NOT ProjCostPlusEntry.ISEMPTY THEN
        ProjCostPlusEntry.DELETEALL;

      //find surcharges
      ProjCostPlusSurcharge.SETRANGE(Level, ProjCostPlusSurcharge.Level::"Project Principal");
      ProjCostPlusSurcharge.SETRANGE("Project No.", "Project No.");
      ProjCostPlusSurcharge.SETRANGE(Principal, Principal);
      SurchargeFound := ProjCostPlusSurcharge.FINDSET;
      IF NOT SurchargeFound THEN BEGIN
        ProjCostPlusSurcharge.RESET;
        ProjCostPlusSurcharge.SETRANGE(Level, ProjCostPlusSurcharge.Level::Customer);
        ProjCostPlusSurcharge.SETRANGE("Customer No.", Principal);
        SurchargeFound := ProjCostPlusSurcharge.FINDSET;
      END;
      IF NOT SurchargeFound THEN BEGIN
        ProjCostPlusSurcharge.RESET;
        ProjCostPlusSurcharge.SETRANGE(Level, ProjCostPlusSurcharge.Level::Base);
        SurchargeFound := ProjCostPlusSurcharge.FINDSET;
      END;
      IF NOT SurchargeFound THEN
        EXIT;

      //Find first free cost plus lineno.
      ProjCostPlusEntry.RESET;
      ProjCostPlusEntry.SETRANGE("Project No.", "Project No.");
      ProjCostPlusEntry.SETRANGE(Principal, Principal);
      ProjCostPlusEntry.SETRANGE("Commission No.", "Commission No.");
      ProjCostPlusEntry.SETRANGE("Settl.Sheet No.", "No.");
      IF NOT ProjCostPlusEntry.FINDLAST THEN
        EXIT;
      NextLineNo := ProjCostPlusEntry."Line No." + 10000;

      //Create cost plus surcharge lines
      REPEAT
        SurchargeIsValid := FALSE;
        TotBaseAmount := 0;
        IF ProjCostPlusSurcharge."Percentage or Fixed Amount" =
          ProjCostPlusSurcharge."Percentage or Fixed Amount"::Percentage THEN
        BEGIN
          SurchargeIsValid := ProjCostPlusSurcharge.Percentage <> 0;
          IF SurchargeIsValid THEN BEGIN
            ProjCostPlusEntry.RESET;
            ProjCostPlusEntry.SETRANGE("Project No.", "Project No.");
            ProjCostPlusEntry.SETRANGE(Principal, Principal);
            ProjCostPlusEntry.SETRANGE("Commission No.", "Commission No.");
            ProjCostPlusEntry.SETRANGE("Settl.Sheet No.", "No.");
            IF ProjCostPlusSurcharge."Cost Type Filter" > 0 THEN
              ProjCostPlusEntry.SETRANGE("Cost Type", ProjCostPlusSurcharge."Cost Type Filter" - 1);
            ProjCostPlusEntry.SETRANGE(Invoiced, FALSE);
            ProjCostPlusEntry.SETRANGE(Chargeable, TRUE);
            IF NOT ProjCostPlusSurcharge."Surcharge over Surcharge" THEN
              ProjCostPlusEntry.SETRANGE("Generated Surcharge Line", FALSE);
            IF ProjCostPlusEntry.FINDSET THEN
              REPEAT
                TotBaseAmount := TotBaseAmount + ProjCostPlusEntry."Sales Amount";
              UNTIL ProjCostPlusEntry.NEXT = 0;
            SurchargeIsValid := TotBaseAmount <> 0;
          END;
        END ELSE
          SurchargeIsValid := ProjCostPlusSurcharge."Fixed Amount" <> 0;
        IF SurchargeIsValid THEN BEGIN
          CLEAR(ProjCostPlusEntry);
          ProjCostPlusEntry."Project No." := "Project No.";
          ProjCostPlusEntry.VALIDATE(Principal, Principal); //validate gets VAT Prod. Posting Group
          ProjCostPlusEntry."Commission No." := "Commission No.";
          ProjCostPlusEntry."Settl.Sheet No." := "No.";
          ProjCostPlusEntry."Line No." := NextLineNo;
          NextLineNo := NextLineNo + 10000;
          ProjCostPlusEntry.INSERT(TRUE);

          ProjCostPlusEntry."Generated Surcharge Line" := TRUE;
          ProjCostPlusEntry.VALIDATE(Element, ProjCostPlusSurcharge.Element);
          ProjCostPlusEntry.VALIDATE("Cost Object", ProjCostPlusSurcharge."Cost Object");
          ProjCostPlusEntry.VALIDATE("Cost Component", ProjCostPlusSurcharge."Cost Component");
          ProjCostPlusEntry.Description := ProjCostPlusSurcharge.Description;
          ProjCostPlusEntry.Quantity := 1;
          RecRef.GETTABLE(ProjCostPlusSurcharge);

          ProjCostPlusEntry."Basic Price Found at" := SalesPriceMgt.FillSalesPriceFound(RecRef);
          IF ProjCostPlusSurcharge."Percentage or Fixed Amount" =
            ProjCostPlusSurcharge."Percentage or Fixed Amount"::Percentage THEN
          BEGIN
            ProjCostPlusEntry."Basic Price" := TotBaseAmount;
            ProjCostPlusEntry."Basic Price Found at" :=
              ProjCostPlusEntry."Basic Price Found at" + STRSUBSTNO(
                Text001, ProjCostPlusSurcharge.Percentage, ProjCostPlusEntry."Basic Price");
            ProjCostPlusEntry."Basic Price" := ROUND(
              (ProjCostPlusEntry."Basic Price" * ProjCostPlusSurcharge.Percentage/100), GLSetup."Amount Rounding Precision");
          END ELSE
            ProjCostPlusEntry."Basic Price" := ProjCostPlusSurcharge."Fixed Amount";
          ProjCostPlusEntry."Surcharge %" := 0;
          ProjCostPlusEntry."Sales Price" := ProjCostPlusEntry."Basic Price";
          ProjCostPlusEntry."Sales Amount" := ProjCostPlusEntry."Basic Price";
          ProjCostPlusEntry.Chargeable := TRUE;
          ProjCostPlusEntry.MODIFY;
        END;
      UNTIL ProjCostPlusSurcharge.NEXT = 0;
    END;

    PROCEDURE CheckCollectiveList@1100528602();
    VAR
      ProjectCollectiveList@1100528600 : Record 11071875;
      Customer@1100528601 : Record 18;
    BEGIN
      TESTFIELD("Collective List No.");
      TESTFIELD(Principal);
      CALCFIELDS(Supervisor,"Bill-to Customer No.","Alternative Bill-to Address",
        "Main Project","Currency Code","Global Dimension 1 Code");

      ProjectCollectiveList.GET("Collective List No.");

      ProjectCollectiveList.TESTFIELD(Status, ProjectCollectiveList.Status::Open);
      ProjectCollectiveList.TESTFIELD("Bill-to Customer No.", "Bill-to Customer No.");
      ProjectCollectiveList.TESTFIELD("Customer No.", Principal);

      IF ProjectCollectiveList.DPA_IsActive THEN
        ProjectCollectiveList.TESTFIELD("Global Dimension 1 Code","Global Dimension 1 Code");


      Customer.GET(Principal);

      IF ProjectCollectiveList."Alternative Bill-to Address" <> '' THEN
        ProjectCollectiveList.TESTFIELD("Alternative Bill-to Address", "Alternative Bill-to Address");

      IF ProjectCollectiveList.Supervisor <> '' THEN
        ProjectCollectiveList.TESTFIELD(Supervisor, Supervisor);

      IF ProjectCollectiveList."Collect Invoices By" = ProjectCollectiveList."Collect Invoices By"::"Main Project" THEN BEGIN
        IF ProjectCollectiveList."Project No." <> '' THEN
          ProjectCollectiveList.TESTFIELD("Project No.", "Main Project");
      END ELSE
        IF ProjectCollectiveList."Project No." <> '' THEN
          ProjectCollectiveList.TESTFIELD("Project No.", "Project No.");

      IF ProjectCollectiveList."Commission No." <> '' THEN
        ProjectCollectiveList.TESTFIELD("Commission No.", "Commission No.");

      IF ProjectCollectiveList."Settl.Sheet No." <> '' THEN
        ProjectCollectiveList.TESTFIELD("Settl.Sheet No.", "No.");

      IF ProjectCollectiveList."Currency Code" <> '' THEN
        ProjectCollectiveList.TESTFIELD("Currency Code", "Currency Code");

      ProjectCollectiveList.SETFILTER("Starting Date", '%1|<=%2', 0D, WORKDATE);
      ProjectCollectiveList.SETFILTER("Ending Date", '%1|>=%2', 0D, WORKDATE);
      ProjectCollectiveList.FIND;
    END;

    PROCEDURE HandleLookupCollectiveListNo@1100528603() : Boolean;
    VAR
      ProjectCollectiveList@1100528602 : Record 11071875;
      Customer@1100528603 : Record 18;
      ProjectCollectiveListsFRM@1100528600 : Page 11126483;
      Project@1100528200 : Record 11072003;
      Commission@1100528201 : Record 11012020;
    BEGIN
      CALCFIELDS(Supervisor, "Bill-to Customer No.", "Alternative Bill-to Address","Main Project");
      CALCFIELDS("Currency Code");

      TESTFIELD("Bill-to Customer No.");
      Customer.GET("Bill-to Customer No.");

      IF ("Project No." <> '') THEN
        Project.GET("Project No.");
      IF ("Project No." <> '') AND
         (Principal <> '') AND
         ("Commission No." <> '') THEN
      BEGIN
        IF NOT Commission.GET("Project No.", Principal, "Commission No.") THEN
           Commission."Collect Cost Plus Lines By" := Customer."Default Collect Invoices By";
      END;

      ProjectCollectiveList.SETRANGE("Bill-to Customer No.", "Bill-to Customer No.");
      ProjectCollectiveList.SETRANGE("Customer No.", Principal);
      ProjectCollectiveList.SETRANGE("Alternative Bill-to Address", "Alternative Bill-to Address");

      IF "Collective List No." = '' THEN
        ProjectCollectiveList.SETRANGE(Status, ProjectCollectiveList.Status::Open);

      CASE Commission."Collect Cost Plus Lines By" OF
        Commission."Collect Cost Plus Lines By"::Supervisor:
          BEGIN
            ProjectCollectiveList.SETRANGE(Supervisor, Commission.Supervisor);
            ProjectCollectiveList.SETFILTER("Project No.", '%1|%2', '', "Project No.");
            ProjectCollectiveList.SETFILTER(CombinedProjPrincComm, '%1|%2', '',
              "Project No."+Principal+"Commission No.");
            ProjectCollectiveList.SETFILTER(CombinedProjPrincCommSettl, '%1|%2', '',
               "Project No."+Principal+"Commission No."+"No.");
          END;
        Commission."Collect Cost Plus Lines By"::Principal:
          BEGIN
            ProjectCollectiveList.SETFILTER(Supervisor, '%1|%2', '', Supervisor);
            ProjectCollectiveList.SETFILTER("Project No.", '%1|%2', '', "Project No.");
            ProjectCollectiveList.SETFILTER("Project No.", '%1|%2', '',  Project."Main Project");
            ProjectCollectiveList.SETFILTER(CombinedProjPrincComm, '%1|%2', '',
              "Project No."+Principal+"Commission No.");
            ProjectCollectiveList.SETFILTER(CombinedProjPrincCommSettl, '%1|%2', '',
               "Project No."+Principal+"Commission No."+"No.");
           END;
        Commission."Collect Cost Plus Lines By"::Project:
          BEGIN
            ProjectCollectiveList.SETRANGE("Project No.", "Project No.");
            ProjectCollectiveList.SETFILTER("Commission No.", '%1|%2', '', "Commission No.");
            ProjectCollectiveList.SETFILTER(CombinedProjPrincCommSettl, '%1|%2', '',
               "Project No."+Principal+"Commission No."+"No.");
          END;
        Commission."Collect Cost Plus Lines By"::Commission:
          BEGIN
            ProjectCollectiveList.SETRANGE(Supervisor, Commission.Supervisor);
            ProjectCollectiveList.SETRANGE("Project No.", "Project No.");
            ProjectCollectiveList.SETRANGE("Commission No.", "Commission No.");
            ProjectCollectiveList.SETFILTER(CombinedProjPrincCommSettl, '%1|%2', '',
               "Project No."+Principal+"Commission No."+"No.");
          END;
        Commission."Collect Cost Plus Lines By"::"Settlement Sheet":
          BEGIN
            ProjectCollectiveList.SETRANGE(Supervisor, Commission.Supervisor);
            ProjectCollectiveList.SETRANGE("Project No.", "Project No.");
            ProjectCollectiveList.SETRANGE("Commission No.", "Commission No.");
            ProjectCollectiveList.SETRANGE("Settl.Sheet No.", "No.");
          END;
        Commission."Collect Cost Plus Lines By"::"Main Project":
          BEGIN
            ProjectCollectiveList.SETRANGE("Project No.", Project."Main Project");
          END;
      END;
      ProjectCollectiveList.SETRANGE(Status, ProjectCollectiveList.Status::Open);
      ProjectCollectiveList.SETRANGE("Currency Code", "Currency Code");

      ProjectCollectiveList.SETFILTER("Starting Date", '%1|<=%2', 0D, WORKDATE);
      ProjectCollectiveList.SETFILTER("Ending Date", '%1|>=%2', 0D, WORKDATE);
      ProjectCollectiveList."No." := "Collective List No.";
      ProjectCollectiveListsFRM.SetDefaults(Rec);

      ProjectCollectiveListsFRM.SETTABLEVIEW(ProjectCollectiveList);
      ProjectCollectiveListsFRM.SETRECORD(ProjectCollectiveList);
      ProjectCollectiveListsFRM.LOOKUPMODE(TRUE);
      IF ProjectCollectiveListsFRM.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ProjectCollectiveListsFRM.GETRECORD(ProjectCollectiveList);
        VALIDATE("Collective List No.", ProjectCollectiveList."No.");
      END;
    END;

    PROCEDURE CreateCollectiveListPerSettlem@1100409006();
    VAR
      ProjectCollectiveListMgt@1100409000 : Codeunit 11012359;
      ProjectCollectiveListFrm@1100528200 : Page 11126480;
      ProjectCollectiveListRec@1100528201 : Record 11071875;
    BEGIN
      TESTFIELD("No.");
      CALCFIELDS("Bill-to Customer No." , "Alternative Bill-to Address");
      IF "Collective List No." = '' THEN BEGIN
        VALIDATE("Collective List No.",
          ProjectCollectiveListMgt.CreateCollectiveListforSettlSh(
            Principal, "Bill-to Customer No.", "Alternative Bill-to Address", Rec));
        MODIFY(TRUE);
      END;

      ProjectCollectiveListRec.GET("Collective List No.");
      ProjectCollectiveListRec.SETRECFILTER;
      COMMIT; // Needs commit due to call to form
      ProjectCollectiveListFrm.SETTABLEVIEW(ProjectCollectiveListRec);
      ProjectCollectiveListFrm.RUNMODAL;
    END;

    PROCEDURE CheckMarginsByLine@1100285100(SettlementSheet@1100285105 : Record 11012021);
    VAR
      Default_Pricelist@1100285101 : Record 11128110;
      PercentControlAmt@1100285100 : Decimal;
      ProjectPrincipal@1100285102 : Record 11012005;
      Job@1100285103 : Record 11072003;
      ProjectCostPlusEntry@1100285104 : Record 11012019;
      TempProjectCostPlusEntry@1100285106 : TEMPORARY Record 11012019;
      JobsSetup@1100285107 : Record 315;
    BEGIN
      //RFC085
      JobsSetup.GET;
      IF NOT JobsSetup."Percent Control" THEN
        EXIT;

      Job.GET(SettlementSheet."Project No.");
      IF NOT Default_Pricelist.GET(Job."Global Dimension 1 Code") THEN
        EXIT;
      IF Default_Pricelist."Percent Control" = 0 THEN
        EXIT;

      ProjectCostPlusEntry.SETRANGE("Project No.", SettlementSheet."Project No.");
      ProjectCostPlusEntry.SETRANGE(Principal, SettlementSheet.Principal);
      ProjectCostPlusEntry.SETRANGE(Invoiced, FALSE);
      ProjectCostPlusEntry.SETRANGE(Chargeable, TRUE);
      ProjectCostPlusEntry.SETFILTER("Cost Price",'<>0');
      ProjectCostPlusEntry.SETRANGE("Cost Type",ProjectCostPlusEntry."Cost Type"::Material); //rfc085-2
      IF ProjectCostPlusEntry.FINDSET(FALSE) THEN BEGIN
        REPEAT
            //  "Project Cost Plus Entry"."Cost Price" + Default_Pricelist."Percent Control" >= "Project Cost Plus Entry"."Sales Amount"
          PercentControlAmt := ProjectCostPlusEntry."Cost Price" * (1+(Default_Pricelist."Percent Control"/100));
          IF PercentControlAmt > ProjectCostPlusEntry."Sales Price" THEN BEGIN
            TempProjectCostPlusEntry.COPY(ProjectCostPlusEntry);
            TempProjectCostPlusEntry.INSERT;
          END;

        UNTIL ProjectCostPlusEntry.NEXT = 0;

        IF NOT TempProjectCostPlusEntry.ISEMPTY THEN BEGIN
          IF CONFIRM(TextWrongDiscount,FALSE) THEN BEGIN
            PAGE.RUN(11012048,TempProjectCostPlusEntry);
            ERROR('');
          END;
        END;
      END;
    END;

    BEGIN
    {
      151218 ITERO.PR Status from Job Setup OnInsert
      151211 ITERO.DL RFC085 warning if wrong pricelist is used or missing, new function
      151223 ITERO.DL RFC085-2 warn only for costtype = material
    }
    END.
  }
}

