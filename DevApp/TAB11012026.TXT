OBJECT Table 11012026 Project Purchase Action
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Project No.,Project Description,Code,Description;
    OnInsert=VAR
               lCopyData@1100525000 : Boolean;
             BEGIN
               TESTFIELD(Code); //C017655

               PurchSetup.GET;

               "Changed by" := USERID;
               "Changed on" := TODAY;

               IF (NOT (Status IN [Status::Approved, Status::Definitive])) THEN
                 "Approval Date" := 0D
               ELSE
                 "Approval Date" := TODAY;

               IF PurchActionRec.GET(Code) THEN
                 IF SilentInsert THEN
                   lCopyData := TRUE
                 ELSE
                   lCopyData := CONFIRM(Text000);
                 IF lCopyData THEN BEGIN
                   TRANSFERFIELDS(PurchActionRec,FALSE);
                   PurchActTextRec.SETRANGE("Line Type", PurchActTextRec."Line Type"::"Purchase Action");
                   PurchActTextRec.SETRANGE("No.",'');
                   PurchActTextRec.SETRANGE("Purchase Action",Code);
                   IF PurchActTextRec.FIND('-') THEN BEGIN
                     REPEAT
                       PurchActText2Rec.TRANSFERFIELDS(PurchActTextRec,TRUE);
                       PurchActText2Rec."Line Type" := PurchActText2Rec."Line Type"::"Project Purchase Action";
                       PurchActText2Rec."No." := "Project No.";
                       PurchActText2Rec.INSERT;
                     UNTIL PurchActTextRec.NEXT = 0;
                   END;

                   PurchActFeatRec.SETRANGE("Estimate No.",'');
                   PurchActFeatRec.SETRANGE("Project No.",'');
                   PurchActFeatRec.SETRANGE("Purchase Action",Code);
                   IF PurchActFeatRec.FIND('-') THEN BEGIN
                     REPEAT
                       PurchActFeat2Rec.TRANSFERFIELDS(PurchActFeatRec,TRUE);
                       PurchActFeat2Rec."Project No." := "Project No.";
                       PurchActFeat2Rec.INSERT;
                     UNTIL PurchActFeatRec.NEXT = 0;
                   END;
                 END;

               ProjRec.GET("Project No.");
               "Requested Quote Receipt Date" := ProjRec."Requested Quote Receipt Date";
               "Vendors React before" := ProjRec."Vendors React before";

               //"Amounts Only" := PurchSetup."Default Only Amounts Orders";
               "Amounts Only" := PurchSetup."Only Amounts Purchase Actions"; //DP00477

               ProjectSiteMgt.LogProjectPurchaseAction(1, Rec); //**4PS.n
             END;

    OnModify=BEGIN
               "Changed by" := USERID;
               "Changed on" := TODAY;

               IF (Status <> xRec.Status) THEN BEGIN
                 IF (NOT (Status IN [Status::Approved, Status::Definitive])) THEN
                   "Approval Date" := 0D
                 ELSE BEGIN
                   IF (Status IN [Status::Approved, Status::Definitive]) AND
                      (NOT (xRec.Status IN [Status::Approved, Status::Definitive]))
                   THEN
                     "Approval Date" := TODAY;
                 END;

                 UpdatePurchStatusLines;
               END;

               ProjectSiteMgt.LogProjectPurchaseAction(2, Rec); //**4PS.n
             END;

    OnDelete=VAR
               lvPAVendRec@1100485000 : Record 11012068;
               lvQuoteCompRec@1210190000 : Record 11012074;
             BEGIN
               BudgetLineRec.RESET;
               BudgetLineRec.SETCURRENTKEY("Project No.", "Purchase Action");
               BudgetLineRec.SETRANGE("Project No.","Project No.");
               BudgetLineRec.SETRANGE("Purchase Action",Code);
               IF BudgetLineRec.FINDFIRST THEN
                 ERROR(STRSUBSTNO(
                   Text001,
                   TABLECAPTION, BudgetLineRec.TABLECAPTION));

               PurchActTextRec.SETRANGE("Line Type", PurchActTextRec."Line Type"::"Project Purchase Action");
               PurchActTextRec.SETRANGE("No.","Project No.");
               PurchActTextRec.SETRANGE("Purchase Action",Code);
               PurchActTextRec.DELETEALL;

               PurchActFeatRec.SETRANGE("Project No.","Project No.");
               PurchActFeatRec.SETRANGE("Purchase Action",Code);
               PurchActFeatRec.DELETEALL;

               DocRelRec.SETRANGE(Source, DocRelRec.Source::Project);
               DocRelRec.SETRANGE("Project No.","Project No.");
               DocRelRec.SETRANGE("Purchase Action",Code);
               DocRelRec.DELETEALL;

               ParRec.SETRANGE(Type,ParRec.Type::PurchAction);
               ParRec.SETRANGE("No.","Project No.");
               ParRec.SETRANGE("Purchase Action",Code);
               ParRec.DELETEALL;

               lvPAVendRec.SETRANGE("Project No.","Project No.");
               lvPAVendRec.SETRANGE("Purchase Action",Code);
               lvPAVendRec.DELETEALL;

               lvQuoteCompRec.SETRANGE("Project No.","Project No.");
               lvQuoteCompRec.SETRANGE("Purchase Action",Code);
               lvQuoteCompRec.DELETEALL;

               DeleteConsentLines(TRUE);

               ProjectSiteMgt.LogProjectPurchaseAction(3, Rec); //**4PS.n
             END;

    OnRename=BEGIN
               "Changed by" := USERID;
               "Changed on" := TODAY;
             END;

    CaptionML=ENU=Project Purchase Action;
    LookupPageID=Page11012034;
  }
  FIELDS
  {
    { 5   ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No. }
    { 10  ;   ;Code                ;Code10        ;TableRelation="Purchase Action";
                                                   AltSearchField=Search Name;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Purchase Action;
                                                   NotBlank=Yes;
                                                   Description=Purchase Action }
    { 20  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Description)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 30  ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 35  ;   ;Default Cost Object Purchase;Code20;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Cost Type=FILTER(<Revenue));
                                                   CaptionML=ENU=Default Cost Object Purchase }
    { 36  ;   ;Budget Adjustment Type;Code10      ;TableRelation="Budget Adjustment Type".Code;
                                                   CaptionML=ENU=Budget Adjustment Type }
    { 40  ;   ;Responsible Employee;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Responsible Employee }
    { 50  ;   ;Text                ;Text250       ;CaptionML=ENU=Text }
    { 60  ;   ;Status              ;Option        ;OnValidate=VAR
                                                                Job@1100528300 : Record 11072003;
                                                                DocumentPortalProject@1100528301 : Codeunit 11012948;
                                                              BEGIN
                                                                Job.GET("Project No.");
                                                                IF (Job.IsJobInProjectPortal) THEN
                                                                  DocumentPortalProject.UpdateQuoteStatus(Rec);
                                                                IF (Status IN [Status::Approved, Status::Definitive]) THEN
                                                                  UpdateConsentLines
                                                                ELSE
                                                                  DeleteConsentLines(FALSE);
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive }
    { 65  ;   ;Approval Date       ;Date          ;CaptionML=ENU=Approval Date;
                                                   Editable=No }
    { 70  ;   ;Changed by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Changed by;
                                                   Editable=No }
    { 80  ;   ;Changed on          ;Date          ;CaptionML=ENU=Changed on;
                                                   Editable=No }
    { 90  ;   ;Project Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Project Description;
                                                   Editable=No }
    { 100 ;   ;Activate for        ;Option        ;CaptionML=ENU=Activate for;
                                                   OptionCaptionML=ENU=" ,Quote,Advice,Purchase";
                                                   OptionString=[ ,Quote,Advice,Purchase] }
    { 110 ;   ;Document Template   ;Code20        ;TableRelation="Document Template"."Template Code" WHERE (Type=CONST(Purchase Quote));
                                                   CaptionML=ENU=Document Template }
    { 120 ;   ;Requested Quote Receipt Date;Date  ;CaptionML=ENU=Requested Quote Receipt Date }
    { 130 ;   ;Vendors React before;Date          ;CaptionML=ENU=Vendors React before }
    { 140 ;   ;Purchase Budget     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Purchase Action=FIELD(Code),
                                                                                               Purchase Action Status=FILTER(>=Approved)));
                                                   CaptionML=ENU=Purchase Budget;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 150 ;   ;Expected No. of Vendors;Integer    ;CaptionML=ENU=Expected No. of Vendors }
    { 160 ;   ;Name Employee       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Responsible Employee)));
                                                   CaptionML=ENU=Name Employee;
                                                   Editable=No }
    { 1000;   ;Document Fysical Template;BLOB     ;CaptionML=ENU=Document Fysical Template }
    { 1010;   ;Amounts Only        ;Boolean       ;CaptionML=ENU=Amounts Only }
    { 1020;   ;Default Cost Object Purch.Desc;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Code=FIELD(Default Cost Object Purchase),
                                                                                                    Global Dimension No.=CONST(2)));
                                                   CaptionML=ENU=Default Cost Object Purch.Desc;
                                                   Editable=No }
    { 1030;   ;Budget Neutral      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Budget Adjustment Type"."Budget Neutral" WHERE (Code=FIELD(Budget Adjustment Type)));
                                                   CaptionML=ENU=Budget Neutral;
                                                   Editable=No }
    { 1040;   ;Budget Adjustment Type Desc.;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Budget Adjustment Type".Description WHERE (Code=FIELD(Budget Adjustment Type)));
                                                   CaptionML=ENU=Budget Adjustment Type Desc.;
                                                   Editable=No }
    { 1050;   ;Created Budget Adjustments;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Budget Adjustment" WHERE (Project No.=FIELD(Project No.),
                                                                                                Created from Purchase Action=FIELD(Code)));
                                                   CaptionML=ENU=Created Budget Adjustment;
                                                   Editable=No }
    { 1060;   ;Final Delivery Date ;Date          ;CaptionML=ENU=Final Delivery Date }
    { 1070;   ;Consented Date-Time ;DateTime      ;CaptionML=ENU=Consented Date-Time;
                                                   Editable=No }
    { 1080;   ;Consent Lines Available;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Consent Line" WHERE (Type=CONST(Project),
                                                                                           Type No.=FIELD(Project No.),
                                                                                           Document No.=FIELD(Code),
                                                                                           Process=CONST(Purchase Action),
                                                                                           Consent=CONST(No)));
                                                   CaptionML=ENU=Consent Lines Available;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Code                        ;Clustered=Yes }
    {    ;Responsible Employee                     }
    {    ;Status                                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012002 : TextConst 'ENU=Copy Standard Purchase Action ?';
      Text001@11012003 : TextConst 'ENU=A %1 attached to a %2 cannot be deleted.';
      PurchSetup@1100485009 : Record 312;
      PurchActionRec@11012000 : Record 11012025;
      BudgetLineRec@11012001 : Record 11012001;
      PurchActTextRec@1210190005 : Record 11012067;
      PurchActText2Rec@1210190004 : Record 11012067;
      PurchActFeatRec@1210190003 : Record 11012069;
      PurchActFeat2Rec@1210190002 : Record 11012069;
      DocRelRec@1210190006 : Record 11012071;
      ParRec@1210190007 : Record 11012072;
      RMSetup@1100485000 : Record 5079;
      Text002@1100485001 : TextConst 'ENU=The Template is empty.';
      Text003@1100485002 : TextConst 'ENU=Attachment is already in use on this machine.';
      Text004@1100485003 : TextConst 'ENU=When you have saved and closed your document, click Yes to import the document.';
      Text005@1100485004 : TextConst 'ENU=Export Attachment';
      Text012@1100485005 : TextConst 'ENU=Doc';
      ProjRec@1100485006 : Record 11072003;
      WordAutomationCU@1100485008 : Codeunit 11012400;
      FileMgt@1100525500 : Codeunit 419;
      SilentInsert@1100525000 : Boolean;
      ProjectSiteMgt@1100528300 : Codeunit 11012282;

    PROCEDURE UpdatePurchStatusLines@1();
    VAR
      BudgetLineRec2@11012000 : Record 11012001;
    BEGIN
      BudgetLineRec.RESET;
      BudgetLineRec.SETCURRENTKEY("Project No.", "Purchase Action");
      BudgetLineRec.SETRANGE("Project No.","Project No.");
      BudgetLineRec.SETRANGE("Purchase Action",Code);
      IF BudgetLineRec.FINDSET(TRUE, TRUE) THEN
        REPEAT
          IF (BudgetLineRec."Purchase Action Status" <> Status) OR
             (BudgetLineRec."Purch. Action Approval Date" <> "Approval Date") THEN
          BEGIN
            BudgetLineRec2 := BudgetLineRec;
            BudgetLineRec2."Purchase Action Status" := Status;
            BudgetLineRec2."Purch. Action Approval Date" := "Approval Date";
            BudgetLineRec2.MODIFY;
          END;
        UNTIL BudgetLineRec.NEXT = 0;
    END;

    PROCEDURE ImportDocTemplate@5(ImportFromFile@1000 : Text[260]) : Boolean;
    VAR
      TempBlob@1100525500 : Record 99008535;
      FileName@1005 : Text[260];
      FileExtension@1100485000 : Text[250];
    BEGIN
      RMSetup.GET;

      FileName := ImportFromFile;
      IF FileName <> '' THEN BEGIN
        FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
        "Document Fysical Template" := TempBlob.Blob;
        FileExtension := '.' + COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
        IF NOT WordAutomationCU.ApplicableExtension(FileExtension, TRUE, TRUE) THEN BEGIN
          CLEAR("Document Fysical Template");
          EXIT(FALSE);
        END;
        Text :=  FileExtension;
        IF MODIFY(TRUE) THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE OpenDocTemplate@1100485000(Directory@1000 : Text[250]);
    VAR
      FileName@1004 : Text[260];
      ShortFileName@1100528400 : Text[250];
      FileExtension@1100485000 : Text[250];
      WordManagement@1100409000 : Codeunit 11072023;
    BEGIN
      CALCFIELDS("Document Fysical Template");
      IF NOT "Document Fysical Template".HASVALUE THEN
        ERROR(Text002);

      GetUniqueFilename(Directory, FileName, ShortFileName);
      IF FileMgt.ClientFileExists(FileName) THEN
        IF NOT DeleteFile(FileName) THEN
          ERROR(Text003);

      ExportDocTemplate(FileName);
      FileExtension := WordAutomationCU.DocfromDot(Text); //** doc of docx

      IF WordManagement.IsWordDocumentExtension(FileExtension) THEN
        EditWordDocument(FileName)
      ELSE
        HYPERLINK(FileName);

      IF CONFIRM(Text004,TRUE) THEN BEGIN
        ImportDocTemplate(FileName);
        MODIFY(TRUE);
      END;

      DeleteFile(FileName);
    END;

    PROCEDURE ExportDocTemplate@2(ExportToFile@1000 : Text[260]) : Boolean;
    VAR
      TempBlob@1100525500 : Record 99008535;
      FileName@1002 : Text[260];
      FileFilter@1003 : Text[260];
      FileExtension@1100485000 : Text[250];
    BEGIN
      RMSetup.GET;
      FileExtension := WordAutomationCU.DocfromDot(Text);

      CALCFIELDS("Document Fysical Template");
      IF "Document Fysical Template".HASVALUE THEN BEGIN
        IF ExportToFile = '' THEN BEGIN
          FileFilter := FileMgt.GetToFilterText('', FileExtension);
          FileName := FileMgt.SaveFileDialog(Text005, '', FileFilter);
        END ELSE
          FileName := ExportToFile;
        IF FileName <> '' THEN BEGIN
          TempBlob.Blob := "Document Fysical Template";
          FileMgt.BLOBExport4PS(TempBlob, FileName, FALSE, FALSE);
          EXIT(TRUE);
        END ELSE
          EXIT(FALSE)
      END ELSE
        EXIT(FALSE)
    END;

    PROCEDURE GetUniqueFilename@9(Directory@1100528400 : Text[250];VAR FileName@1100528401 : Text[260];VAR ShortFileName@1100528402 : Text[250]);
    VAR
      I@1001 : Integer;
      DocNo@1002 : Text[30];
      FileExtension@1100485000 : Text[250];
    BEGIN
      FileExtension := WordAutomationCU.DocfromDot(Text);

      REPEAT
        IF I <> 0 THEN
          DocNo := FORMAT(I);
        ShortFileName := Text012 + DocNo + FileExtension;
        FileName := DELCHR(Directory, '>', '\') + '\' + ShortFileName;
        IF NOT FileMgt.ClientFileExists(FileName) THEN
          EXIT;
        I := I +1;
      UNTIL I=999;
    END;

    PROCEDURE DeleteFile@10(FileName@1001 : Text[260]) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      IF FileName = '' THEN
        EXIT(FALSE);

      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL FileMgt.DeleteClientFile4PS(FileName, FALSE) OR (I = 25);
      EXIT(NOT FileMgt.ClientFileExists(FileName));
    END;

    PROCEDURE EditWordDocument@1100485001(iFileName@1100485000 : Text[250]);
    VAR
      lCduWord@1210190000 : Codeunit 11012400;
    BEGIN
      IF iFileName = '' THEN EXIT;
      CLEAR(lCduWord);
      lCduWord.Initialise;
      lCduWord.Open(FALSE,iFileName,FALSE);
      lCduWord.Display;
    END;

    PROCEDURE SetSilentInsert@1100525001(lSilentInsert@1100525000 : Boolean);
    BEGIN
      SilentInsert := lSilentInsert;
    END;

    LOCAL PROCEDURE UpdateConsentLines@1100528400();
    VAR
      PurchasesPayablesSetup@1100528401 : Record 312;
      ConsentLine@1100528402 : Record 11012226;
      ProjectPurchaseAction@1100528403 : Record 11012026;
      ConsentManagement@1100528400 : Codeunit 11012132;
    BEGIN
      IF NOT (Status IN [Status::Approved, Status::Definitive]) THEN
        EXIT;
      IF NOT PurchasesPayablesSetup.GET THEN
        EXIT;

      DeleteConsentLines(FALSE);

      IF PurchasesPayablesSetup."Use Consent Purchase Actions" AND
         ConsentLine.READPERMISSION
      THEN BEGIN
        ConsentManagement.HandlePurchaseAction(Rec);
        IF ProjectPurchaseAction.GET("Project No.", Code) THEN
          // Modify and Get are necessary because UpdateConsentLines is called from
          // OnValidate and current record may be changed by AutoConsentProjectPurchaseAction.
          MODIFY;
          ConsentManagement.AutoConsentProjectPurchaseAction(Rec);
          IF GET("Project No.", Code) THEN;
      END;
    END;

    LOCAL PROCEDURE DeleteConsentLines@1100528403(DeleteManualConsentLinesToo@1100525000 : Boolean);
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      IF NOT ConsentLine.READPERMISSION THEN
        EXIT;

      ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Purchase Action");
      ConsentLine.SETRANGE(Type, ConsentLine.Type::Project);
      ConsentLine.SETRANGE("Type No.","Project No.");
      ConsentLine.SETRANGE("Document No.", Code);
      IF NOT DeleteManualConsentLinesToo THEN
        ConsentLine.SETRANGE(Manual, FALSE);

      ConsentLine.DELETEALL;
    END;

    PROCEDURE EditConsentLines@1100485007();
    VAR
      ConsentLines@1100485000 : Page 11071869;
      ConsentLine@1100485001 : Record 11012226;
      ConsentProcess@1100528400 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      Type@1100528401 : ' ,Project,Service Order';
    BEGIN
      ConsentLines.SetDefaults(
        TRUE, '', ConsentProcess::"Purchase Action", Type::Project, "Project No.", 0);

      ConsentLine.SETRANGE(Type, ConsentLine.Type::Project);
      ConsentLine.SETRANGE("Type No.", "Project No.");
      ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Purchase Action");
      ConsentLine.SETRANGE("Document No.", Code);

      ConsentLines.SETTABLEVIEW(ConsentLine);
      ConsentLines.RUNMODAL;
    END;

    PROCEDURE CheckIfNoConsentLinesAvailable@1100528401();
    VAR
      PurchasesPayablesSetup@1100528401 : Record 312;
    BEGIN
      IF NOT PurchasesPayablesSetup.GET THEN
        EXIT;
      IF NOT PurchasesPayablesSetup."Use Consent Purchase Actions" THEN
        EXIT;

      CALCFIELDS("Consent Lines Available");
      TESTFIELD("Consent Lines Available", FALSE);
    END;

    BEGIN
    END.
  }
}

