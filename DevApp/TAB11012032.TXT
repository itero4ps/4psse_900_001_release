OBJECT Table 11012032 Invoice Approval Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               DPA_OnInsert;
               IF Quantity <> 0 THEN
                 ReservePurchInvApprLine.VerifyQuantity(Rec,xRec);  //**4PS.n C004829
               IF GLJournTemplRec.GET("Journal Template Name") THEN BEGIN
                 "Bal. Account No." := GLJournTemplRec."Bal. Account No.";
                 "Reason Code" := GLJournTemplRec."Reason Code";
                 "Source Code" := GLJournTemplRec."Source Code";
               END;

               GetHeader;

               IF "Posting Date" = 0D THEN
                 InitPostingDate;
             END;

    OnModify=BEGIN
               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND (xRec."Item No." <> '') THEN
                 ReservePurchInvApprLine.VerifyChange(Rec,xRec);  //**4PS.n C004829
             END;

    OnDelete=BEGIN
               //**4PS.sn C004829
               GetHeader;
               IF NOT AmountsOnly THEN BEGIN
                 IF ("Item No." <> '') THEN
                   ReservePurchInvApprLine.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 CALCFIELDS("Reserved NS Qty. (Base)");
                 TESTFIELD("Reserved NS Qty. (Base)",0);
               END;
               //**4PS.en C004829
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);  //**4PS.n C004829
             END;

    CaptionML=ENU=Invoice Approval Line;
    PasteIsValid=No;
  }
  FIELDS
  {
    { 10  ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 15  ;   ;Document No.        ;Code20        ;TableRelation=IF (Document Type=CONST(Purchase Invoice)) "Purch. Inv. Header".No.
                                                                 ELSE IF (Document Type=CONST(Credit Memo)) "Purch. Cr. Memo Hdr.".No.;
                                                   CaptionML=ENU=Document No. }
    { 30  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 31  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Purchase Invoice,Credit Memo;
                                                   OptionString=Purchase Invoice,Credit Memo }
    { 39  ;   ;Type                ;Option        ;InitValue=Account (G/L);
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",''); //call 25856
                                                                TempApprovalLine := Rec;
                                                                INIT;
                                                                Type := TempApprovalLine.Type;
                                                                GetTempApprovalLine();
                                                                VALIDATE("FA Posting Type");
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=,Account (G/L),,,Fixed Asset;
                                                   OptionString=,Account (G/L),,,Fixed Asset }
    { 40  ;   ;Account No.         ;Code20        ;TableRelation=IF (Type=CONST("Account (G/L)"),
                                                                     Receiving Company=FILTER('')) "G/L Account"
                                                                     ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",''); //call 25856
                                                                IF "Account No." <> '' THEN BEGIN
                                                                  CASE Type OF
                                                                    Type::"Account (G/L)":
                                                                      BEGIN
                                                                        CheckCompanyIC;
                                                                        GLAcc.GET("Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        IF ("Project No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '') AND
                                                                          NOT "System-Created Entry" THEN
                                                                        BEGIN
                                                                          //GLAcc.TESTFIELD("Direct Posting",TRUE);  //**4PS.o (call 9625)
                                                                          //**4PS.sn (call 9625)
                                                                          //* Temporary solution, actually you should have here also Type::Item (will not be done in a hotfix).
                                                                          //* Should be think about carefully (action for EK/MC).
                                                                          IF "Item No." = '' THEN
                                                                            GLAcc.TESTFIELD("Direct Posting",TRUE)
                                                                          ELSE BEGIN
                                                                            //Do not check on 'Direct posting' when item is filled and account is purchase account from General Posting Setup.
                                                                             IF NOT GLAcc."Direct Posting" THEN BEGIN
                                                                              IF NOT (GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group") AND
                                                                                      ("Account No." = GenPostingSetup."Purch. Account"))
                                                                              THEN
                                                                                GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                            END;
                                                                          END;
                                                                          //**4PS.en
                                                                          //Description previously filled with GLAcc.Name
                                                                          IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
                                                                            InvHeader.GET("Document No.");
                                                                            Description := InvHeader."Pay-to Name";
                                                                          END ELSE BEGIN
                                                                            CredMemoHeader.GET("Document No.");
                                                                            Description := CredMemoHeader."Pay-to Name";
                                                                          END;
                                                                        END;
                                                                        GetPlantPostingGroup;
                                                                        GetProjectDepartment;
                                                                      END;
                                                                    Type::"Fixed Asset":
                                                                      BEGIN
                                                                        FA.GET("Account No.");
                                                                        FA.TESTFIELD(Inactive,FALSE);
                                                                        FA.TESTFIELD(Blocked,FALSE);
                                                                        "Depreciation Book Code" := '';  //**4PS
                                                                        GetFAPostingGroup;
                                                                        Description := FA.Description;
                                                                      END;
                                                                  END;
                                                                END;

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(1),"Account No.",
                                                                  DATABASE::Item,"Item No.",   //** 4PS 09-06-2010
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n 19506
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DATABASE::Job,"Project No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");
                                                                VALIDATE("Shortcut Dimension 1 Code");
                                                              END;

                                                   OnLookup=VAR
                                                              PurchInvHeader@1210190001 : Record 122;
                                                              PurchCrMemoHdr@1210190002 : Record 124;
                                                              IsAccountNoEditable@1210190000 : Boolean;
                                                              IsInDocumentMgtSystemWorkflow@1210190003 : Boolean;
                                                            BEGIN
                                                              // jhoek.170311.begin
                                                              // Criteria taken from form 11012067
                                                              CASE "Document Type" OF
                                                                "Document Type"::"Purchase Invoice":
                                                                  BEGIN
                                                                    PurchInvHeader.GET("Document No.");
                                                                    IsInDocumentMgtSystemWorkflow :=
                                                                      ((PurchInvHeader."DMS Status" >= PurchInvHeader."DMS Status"::"Start Workflow") AND
                                                                       (PurchInvHeader."DMS Status" <> PurchInvHeader."DMS Status"::Rejected) AND // jhoek.270511
                                                                       (PurchInvHeader."DMS Status" <> PurchInvHeader."DMS Status"::Approved)); //call 28655
                                                                  END;
                                                                "Document Type"::"Credit Memo":
                                                                  BEGIN
                                                                    PurchCrMemoHdr.GET("Document No.");
                                                                    IsInDocumentMgtSystemWorkflow :=
                                                                      ((PurchCrMemoHdr."DMS Status" >= PurchCrMemoHdr."DMS Status"::"Start Workflow") AND
                                                                       (PurchCrMemoHdr."DMS Status" <> PurchCrMemoHdr."DMS Status"::Rejected) AND // jhoek.270511
                                                                       (PurchCrMemoHdr."DMS Status" <> PurchCrMemoHdr."DMS Status"::Approved)); //call 28655
                                                                  END;
                                                              END;

                                                              IsAccountNoEditable :=
                                                                ("Plant Type" = '') AND
                                                                ("Project No." = '') AND
                                                                ("Service Order No." = '') AND
                                                                ("Item No." = '') AND
                                                                (NOT IsInDocumentMgtSystemWorkflow);
                                                              // jhoek.170311.end

                                                              CASE Type OF
                                                                Type::"Account (G/L)":
                                                                  BEGIN
                                                                    CheckCompanyIC;
                                                                    GLAcc."No." := "Account No.";
                                                                    IF PAGE.RUNMODAL(0, GLAcc) = ACTION::LookupOK THEN
                                                                      // jhoek.170311.begin
                                                                      // IF "Project No." = '' THEN
                                                                      IF IsAccountNoEditable THEN
                                                                      // jhoek.170311.end
                                                                        VALIDATE("Account No.", GLAcc."No.");
                                                                  END;
                                                                Type::"Fixed Asset":
                                                                  BEGIN
                                                                    IF PAGE.RUNMODAL(0, FA) = ACTION::LookupOK THEN
                                                                      IF IsAccountNoEditable THEN // jhoek.170311
                                                                        VALIDATE("Account No.", FA."No.");
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Account No. }
    { 50  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 55  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 60  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                MaxQuan@1210190000 : Decimal;
                                                                MinQuan@1100485000 : Decimal;
                                                              BEGIN
                                                                IF ("Receipt No." <> '') THEN
                                                                  IF ReceiptRec.GET("Receipt No.","Receipt Line No.") THEN BEGIN
                                                                    IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
                                                                      IF ReceiptRec.Quantity > 0 THEN BEGIN
                                                                        MinQuan := -ReceiptRec."Quantity Invoiced";
                                                                        MaxQuan := ReceiptRec."Qty. Rcd. Not Invoiced";
                                                                      END ELSE BEGIN
                                                                        MinQuan := ReceiptRec."Qty. Rcd. Not Invoiced";
                                                                        MaxQuan := -ReceiptRec."Quantity Invoiced";
                                                                      END;
                                                                    END ELSE BEGIN
                                                                      IF ReceiptRec.Quantity < 0 THEN BEGIN
                                                                        MinQuan := ReceiptRec."Quantity Invoiced";
                                                                        MaxQuan := -(ReceiptRec."Qty. Rcd. Not Invoiced")
                                                                      END ELSE BEGIN
                                                                        MinQuan := -(ReceiptRec."Qty. Rcd. Not Invoiced");
                                                                        MaxQuan := ReceiptRec."Quantity Invoiced";
                                                                      END;
                                                                    END;
                                                                    IF (Quantity < MinQuan) OR (Quantity > MaxQuan) THEN
                                                                      IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text000,
                                                                        "Receipt No.",
                                                                        "Receipt Line No.",
                                                                        MinQuan,MaxQuan),FALSE)
                                                                      THEN BEGIN
                                                                        Quantity := xRec.Quantity;
                                                                        EXIT;
                                                                      END ELSE
                                                                        CheckReceipt;
                                                                  END;

                                                                //*27644.sn
                                                                IF (Quantity <> 0) AND ("Plant Type" <> '') AND ("Plant No." <> '') AND ("Cost Component Plant" <> '') THEN BEGIN
                                                                  //*31530.so
                                                                  //PlantNoRec.GET("Plant Type", "Plant No.");
                                                                  //PlantNoRec.CALCFIELDS(Bulk);  //*29418
                                                                  //IF NOT PlantNoRec.Bulk THEN BEGIN
                                                                  //*31530.eo
                                                                  //*31530.sn
                                                                  CheckCompanyIC;
                                                                  PlantTypeRec.GET("Plant Type");
                                                                  IF NOT PlantTypeRec.Bulk THEN BEGIN
                                                                  //*31530.en
                                                                    //IF CheckPlantAcqOrRent() IN [1, 2] THEN  //*28582.o
                                                                    IF CheckPlantAcqOrRent() = 1 THEN  //*28582.n
                                                                      TESTFIELD(Quantity, 1);
                                                                  END;
                                                                END;
                                                                //*27644.en
                                                                IF (xRec.Quantity <> Quantity) THEN
                                                                  ReservePurchInvApprLine.VerifyQuantity(Rec,xRec);  //**4PS.n C004829

                                                                CalculateAmount;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 70  ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",''); //call 25856
                                                                //db, 25-08-05: call C-006352
                                                                IF ItemRec.GET("Item No.") THEN BEGIN
                                                                  TESTFIELD("Qty. per Unit of Measure");
                                                                  VALIDATE(Quantity, Quantity * "Qty. per Unit of Measure");
                                                                  VALIDATE(Price, Price / "Qty. per Unit of Measure");
                                                                  "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code");
                                                                  VALIDATE(Quantity, Quantity / "Qty. per Unit of Measure");
                                                                  VALIDATE(Price, Price * "Qty. per Unit of Measure");
                                                                END ELSE BEGIN
                                                                  "Qty. per Unit of Measure" := 1;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;  //db, 25-08-05
                                                            END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 80  ;   ;Price               ;Decimal       ;OnValidate=BEGIN
                                                                CalculateAmount;
                                                                CheckReceipt;
                                                              END;

                                                   CaptionML=ENU=Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrCodeHeader }
    { 90  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");

                                                                PurchSetup.GET;
                                                                IF PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::"No VAT" THEN BEGIN
                                                                  IF "Manually VAT Posting" THEN BEGIN
                                                                    "VAT Base Amount" := Amount;
                                                                    "Amount Including VAT" := "VAT Amount" + Amount;
                                                                  END ELSE BEGIN
                                                                    CASE "VAT Calculation Type" OF
                                                                      "VAT Calculation Type"::"Normal VAT",
                                                                      "VAT Calculation Type"::"Reverse Charge VAT":
                                                                        BEGIN
                                                                          "VAT Base Amount" :=
                                                                            ROUND(Amount * (1 - VATBaseDiscount / 100),Currency."Amount Rounding Precision");
                                                                          "Amount Including VAT" :=
                                                                            ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                        END;
                                                                      "VAT Calculation Type"::"Full VAT":
                                                                        IF Amount <> 0 THEN
                                                                          FIELDERROR(Amount,
                                                                            STRSUBSTNO(
                                                                              Text011,FIELDCAPTION("VAT Calculation Type"),
                                                                              "VAT Calculation Type"));
                                                                      "VAT Calculation Type"::"Sales Tax":
                                                                        BEGIN
                                                                          //Not Supported
                                                                        END;
                                                                    END;
                                                                    "VAT Amount" := "Amount Including VAT" - Amount;
                                                                  END;
                                                                END;

                                                                IF (CurrFieldNo = FIELDNO(Amount)) OR (CurrFieldNo = 0)THEN BEGIN  //db, 27-08-09: M16334/16697
                                                                  IF AmountsOnly THEN BEGIN
                                                                    Price:= Amount;
                                                                  END ELSE BEGIN
                                                                    IF Quantity <> 0 THEN BEGIN
                                                                      Price := Amount / Quantity;
                                                                    END ELSE BEGIN
                                                                      Quantity := 1;
                                                                      Price := Amount;
                                                                    END;
                                                                  END;
                                                                END;

                                                                CheckReceipt;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrCodeHeader }
    { 95  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Amount Including VAT") THEN
                                                                  TESTFIELD("Manually VAT Posting",TRUE);

                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("VAT Indicator (Purchase)", PurchSetup."VAT Indicator (Purchase)"::"No VAT");

                                                                GetHeader;
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                IF "Manually VAT Posting" THEN
                                                                  "VAT Base Amount" := Amount
                                                                ELSE
                                                                  CASE "VAT Calculation Type" OF
                                                                    "VAT Calculation Type"::"Normal VAT",
                                                                    "VAT Calculation Type"::"Reverse Charge VAT":
                                                                      BEGIN
                                                                        Amount :=
                                                                          ROUND(
                                                                            "Amount Including VAT" /
                                                                            (1 + (1 - VATBaseDiscount / 100) * "VAT %" / 100),
                                                                            Currency."Amount Rounding Precision");
                                                                        "VAT Base Amount" :=
                                                                          ROUND(Amount * (1 - VATBaseDiscount / 100),Currency."Amount Rounding Precision");
                                                                      END;
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      BEGIN
                                                                        Amount := 0;
                                                                        "VAT Base Amount" := 0;
                                                                      END;
                                                                    "VAT Calculation Type"::"Sales Tax":
                                                                      BEGIN
                                                                        //Not Supported
                                                                      END;
                                                                  END;

                                                                "VAT Amount" := "Amount Including VAT" - Amount;
                                                                CheckReceipt;
                                                              END;

                                                   CaptionML=ENU=Amount Including VAT;
                                                   AutoFormatType=1 }
    { 100 ;   ;Project No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job.No.;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",''); //call 25856
                                                                CheckCompanyIC;
                                                                IF "Project No." <> '' THEN BEGIN
                                                                  CheckProjServPlantAllowed;
                                                                  ProjRec.GET("Project No.");
                                                                  "Project Description" := ProjRec.Description; //kkleermaker.n, 130902, C004024
                                                                  IF (ICProjSetupRec."Provisions at Closure") THEN
                                                                    ProjRec.CheckProjectStatus(-1)
                                                                  ELSE
                                                                    ProjRec.CheckProjectStatus(1);

                                                                  IF ("Rental Unit" <> '') THEN
                                                                    VALIDATE("Rental Unit");

                                                                  Type := Type::"Account (G/L)";
                                                                END ELSE BEGIN
                                                                  IF ("Rental Unit" <> '') THEN
                                                                    "Rental Unit" := '';
                                                                END;
                                                                FillSystemCreatedEntry;
                                                                IF (xRec."Project No." <> "Project No.") AND (Quantity <> 0) THEN
                                                                  ReservePurchInvApprLine.VerifyChange(Rec,xRec);  //**4PS.n C004829

                                                                IF ("Shortcut Dimension 1 Code" <> '') AND ("Project No." <> '') AND
                                                                   (CurrFieldNo = FIELDNO("Project No.")) AND ("Project No." <> xRec."Project No.") THEN
                                                                  "Shortcut Dimension 1 Code" := '';
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN
                                                                  VALIDATE("Shortcut Dimension 2 Code");

                                                                IF Element <> '' THEN
                                                                  IF NOT ProjElemRec.GET("Project No.",Element) THEN
                                                                    Element := '';

                                                                IF ("Receiving Company" <> '') AND                   //DP00387 sn, copied from table 39
                                                                   ("Project No." <> xRec."Project No.") AND
                                                                   (CurrFieldNo = FIELDNO("Project No.")) THEN
                                                                BEGIN
                                                                  "Shortcut Dimension 1 Code" := ProjRec."Global Dimension 1 Code";
                                                                END;                                                 //DP00387 en, copied from table 39

                                                                CreateDim(
                                                                  DATABASE::Job,"Project No.",
                                                                  DimMgt.TypeToTableID3(1),"Account No.",
                                                                  DATABASE::Item,"Item No.",   //** 4PS 09-06-2010
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n 19506
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");

                                                                IF ("Project No." <> xRec."Project No.") THEN  //*DP00129
                                                                  FillDefaultFscType();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupProjectNo();
                                                            END;

                                                   CaptionML=ENU=Project No. }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=No }
    { 110 ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation=IF (Cost Type=CONST(" "),
                                                                     Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(<Revenue),
                                                                                                                                 Global Dimension No.=CONST(2))
                                                                                                                                 ELSE IF (Cost Type=CONST(Labor),
                                                                                                                                          Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor),
                                                                                                                                                                                                      Global Dimension No.=CONST(2))
                                                                                                                                                                                                      ELSE IF (Cost Type=CONST(Material),
                                                                                                                                                                                                               Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                                                                                                                                                                           Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                                           ELSE IF (Cost Type=CONST(Subcontracting),
                                                                                                                                                                                                                                                                                    Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                                                                                                                                                                Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                                                                                                                ELSE IF (Cost Type=CONST(Plant),
                                                                                                                                                                                                                                                                                                                                                         Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                                                                                                                                                                                     Global Dimension No.=CONST(2))
                                                                                                                                                                                                                                                                                                                                                                                                                     ELSE IF (Cost Type=CONST(Sundry),
                                                                                                                                                                                                                                                                                                                                                                                                                              Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Global Dimension No.=CONST(2));
                                                   OnValidate=VAR
                                                                SaveCostObject@1210190000 : Code[20];
                                                              BEGIN
                                                                TESTFIELD("Receipt No.",''); //call 25856
                                                                SaveCostObject := "Shortcut Dimension 2 Code";  //db, 09-12-11: M31174
                                                                DetermineAccount;
                                                                "Shortcut Dimension 2 Code" := SaveCostObject;  //db, 09-12-11: M31174
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");

                                                                //**4PS01.sn
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, FALSE, "Project No.");
                                                                  "Cost Component" := DimValRec."Cost Component";
                                                                  IF (DimValRec.Element <> '') AND ("Project No." <> '') THEN
                                                                    VALIDATE(Element, DimValRec.Element);
                                                                END;
                                                                //**4PS01.en

                                                                CheckCostCompServOrderType;  //db, 19-05-10

                                                                IF ("Shortcut Dimension 2 Code" <> xRec."Shortcut Dimension 2 Code") AND ("FSC Type Code" = '') THEN  //*DP00129
                                                                  FillDefaultFscType();
                                                              END;

                                                   OnLookup=VAR
                                                              ShortcutDimension2Code@1210190000 : Text[20];
                                                            BEGIN
                                                              // jhoek.300511.begin
                                                              ShortcutDimension2Code := "Shortcut Dimension 2 Code";
                                                              LookupShortcutDimension2Code(ShortcutDimension2Code);
                                                              "Shortcut Dimension 2 Code" := ShortcutDimension2Code;
                                                              VALIDATE("Shortcut Dimension 2 Code");  //M 30156 n
                                                              // jhoek.300511.end
                                                            END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 120 ;   ;Bal. Account No.    ;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=ENU=Bal. Account No. }
    { 130 ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Interest Date");
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 140 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code }
    { 150 ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 160 ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Invoice Approval Line".Amount WHERE (Document No.=FIELD(Document No.)));
                                                   CaptionML=ENU=Balance;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 170 ;   ;Receipt No.         ;Code20        ;CaptionML=ENU=Receipt No.;
                                                   Editable=No }
    { 180 ;   ;Receipt Line No.    ;Integer       ;CaptionML=ENU=Receipt Line No.;
                                                   Editable=No }
    { 190 ;   ;Attached to Line No.;Integer       ;CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 200 ;   ;Item No.            ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=BEGIN
                                                                GetHeader;
                                                                IF ("Item No." <> '') AND AmountsOnly THEN
                                                                  TESTFIELD("Item No.", '');
                                                                TESTFIELD("Receipt No.",''); //call 25856
                                                                //IF "Item No." = '' THEN EXIT;  //*33895.o
                                                                //TESTFIELD("Plant Type", '');  //*C-028911.n  //*33895.o
                                                                IF ("Item No." <> '') AND (CheckPlantAcqOrRent() <> 0) THEN  //*33895.n
                                                                  FIELDERROR("Item No.", Text013);                           //*33895.n

                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::Item);

                                                                  ItemRec.TESTFIELD("Inventory Posting Group");
                                                                  ItemRec.TESTFIELD("Gen. Prod. Posting Group");
                                                                  "Posting Group" := ItemRec."Inventory Posting Group";
                                                                  "Gen. Prod. Posting Group" := ItemRec."Gen. Prod. Posting Group";

                                                                  GetHeader;
                                                                  IF "Document Type" = "Document Type"::"Purchase Invoice" THEN
                                                                    "Gen. Bus. Posting Group" := InvHeader."Gen. Bus. Posting Group"
                                                                  ELSE
                                                                    "Gen. Bus. Posting Group" := CredMemoHeader."Gen. Bus. Posting Group";

                                                                  "Unit of Measure Code" := ItemRec."Purch. Unit of Measure";
                                                                  "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec,"Unit of Measure Code");
                                                                  VALIDATE(Quantity, Quantity / "Qty. per Unit of Measure");  //db, 25-08-05
                                                                  VALIDATE(Price, Price * "Qty. per Unit of Measure");        //db, 25-08-05

                                                                  IF ("Project No." + "Service Order No.") = '' THEN BEGIN
                                                                    GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                    GenPostingSetup.TESTFIELD("Purch. Account");
                                                                    "Account No." := GenPostingSetup."Purch. Account";
                                                                  END;
                                                                END;

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n

                                                                IF ("Item No." <> xRec."Item No.") AND (Quantity <> 0) THEN
                                                                  ReservePurchInvApprLine.VerifyChange(Rec,xRec);  //**4PS.n C004829
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 201 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                //IF ("Basic Item" <> '') THEN    //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');  //*C-028911.n  //*33895.o
                                                                IF ("Basic Item" <> '') AND (CheckPlantAcqOrRent() <> 0) THEN  //*33895.n
                                                                  FIELDERROR("Basic Item", Text013);                           //*33895.n
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem((ItemTypeOpt::"Basic Item"));

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 202 ;   ;Trade Item          ;Code20        ;TableRelation=IF (Vendor (Trade Item)=FILTER(<>'')) "Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"))
                                                                 ELSE IF (Vendor (Trade Item)=FILTER('')) "Trade Item"."Item Code";
                                                   OnValidate=BEGIN
                                                                //IF ("Trade Item" <> '') THEN    //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');  //*C-028911.n  //*33895.o
                                                                IF ("Trade Item" <> '') AND (CheckPlantAcqOrRent() <> 0) THEN  //*33895.n
                                                                  FIELDERROR("Trade Item", Text013);                           //*33895.n
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem((ItemTypeOpt::"Trade Item"));

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 204 ;   ;Element             ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC;
                                                                ElementFormat.FormatElem(Element,2,"Receiving Company");

                                                                IF Element <> '' THEN BEGIN
                                                                  ProjElemRec.GET("Project No.", Element);
                                                                  ProjElemRec.CheckProjectElementBlocked; //Call 6564
                                                                END ELSE BEGIN
                                                                  ProjElemRec.INIT;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              ProjElemRec."Project No." := "Project No.";
                                                              ProjElemRec.Element := Element;
                                                              ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                              IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Element, ProjElemRec.Element);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 205 ;   ;Extension Contract  ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC;
                                                                ExtRec.GET("Project No.", "Extension Contract");
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              ExtRec."Project No." := "Project No.";
                                                              ExtRec."Contract No." := "Extension Contract";
                                                              ExtRec.SETRANGE("Project No.", "Project No.");
                                                              IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Extension Contract", ExtRec."Contract No.");
                                                            END;

                                                   CaptionML=ENU=Extension Contract }
    { 206 ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",''); //call 25856
                                                                IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
                                                                  IF "Cost Type" <> xRec."Cost Type" THEN BEGIN
                                                                    IF CONFIRM(Text002,TRUE) THEN BEGIN
                                                                      VALIDATE("Shortcut Dimension 2 Code",'');
                                                                      //Only fill fields below for cost type Material
                                                                      "Item No." := '';
                                                                      "Basic Item" := '';
                                                                      "Trade Item" := '';
                                                                      Manufacturer := '';
                                                                    END ELSE BEGIN
                                                                      "Cost Type" := xRec."Cost Type";
                                                                      EXIT;
                                                                    END;
                                                                  END;
                                                                END;

                                                                CheckAdditionalCostService(CurrFieldNo);  //db, 19-05-10
                                                              END;

                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant,Sundry";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry] }
    { 207 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=BEGIN
                                                                //IF (Manufacturer <> '') THEN    //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');  //*C-028911.n  //*33895.o
                                                                IF (Manufacturer <> '') AND (CheckPlantAcqOrRent() <> 0) THEN  //*33895.n
                                                                  FIELDERROR(Manufacturer, Text013);                           //*33895.n

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n
                                                              END;

                                                   CaptionML=ENU=Manufacturer }
    { 208 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 209 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=BEGIN
                                                                //IF ("Vendor (Trade Item)" <> '') THEN //*C-028911.n  //*33895.o
                                                                //  TESTFIELD("Plant Type", '');        //*C-028911.n  //*33895.o
                                                                IF ("Vendor (Trade Item)" <> '') AND (CheckPlantAcqOrRent() <> 0) THEN  //*33895.n
                                                                  FIELDERROR("Vendor (Trade Item)", Text013);                           //*33895.n

                                                                IF ("Plant Type" <> '') THEN  //*33895.n
                                                                  VALIDATE("Plant Type");     //*33895.n
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 210 ;   ;Vendor Item No.     ;Text20        ;CaptionML=ENU=Vendor Item No. }
    { 220 ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC;
                                                                IF "Shortcut Dimension 1 Code" <> '' THEN
                                                                  DimMgt.GetDimValueRec(1, "Shortcut Dimension 1 Code", DimValRec, TRUE, '');

                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   OnLookup=VAR
                                                              ShortcutDimension1Code@1210190000 : Text[20];
                                                            BEGIN
                                                              ShortcutDimension1Code := "Shortcut Dimension 1 Code";
                                                              LookupShortcutDimension1Code(ShortcutDimension1Code);
                                                              "Shortcut Dimension 1 Code" := ShortcutDimension1Code;
                                                              VALIDATE("Shortcut Dimension 1 Code");  //M 30156 n
                                                            END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 230 ;   ;Project Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Project Description;
                                                   Editable=No }
    { 240 ;   ;Receiving Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                ICLicenceCu@1210190000 : Codeunit 11012780;
                                                              BEGIN
                                                                ICLicenceCu.CheckICEntry("Receiving Company");
                                                                IF "Receiving Company" <> '' THEN BEGIN
                                                                  IF "Rental Unit" <> '' THEN
                                                                    "Rental Unit" := '';
                                                                  IF "Plant Location" <> '' THEN
                                                                    "Plant Location" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Receiving Company }
    { 250 ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Location Code" <> "Location Code") AND (Quantity <> 0) THEN
                                                                  ReservePurchInvApprLine.VerifyChange(Rec,xRec);  //**4PS.n C004829
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(1),"Account No.",
                                                                  DATABASE::Item,"Item No.",   //** 4PS 09-06-2010
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n 19506
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DATABASE::Job,"Project No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");

                                                                "Vendor Item No." := GetVendorItemNo;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 260 ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=ENU=Bin Code }
    { 270 ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN
                                                                  ReservePurchInvApprLine.VerifyChange(Rec,xRec);  //**4PS.n C004829

                                                                "Vendor Item No." := GetVendorItemNo;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 280 ;   ;Posting Group       ;Code10        ;TableRelation=IF (Item No.=FILTER(<>'')) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group"
                                                                 ELSE IF (Type=CONST("Account (G/L)"),
                                                                          Plant Type=FILTER(<>'')) "Plant Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=No }
    { 290 ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 300 ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 310 ;   ;Appl.-to Item Entry ;Integer       ;CaptionML=ENU=Appl.-to Item Entry }
    { 320 ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 330 ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 340 ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry Point }
    { 350 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 360 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 380 ;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 390 ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 400 ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                "Vendor Item No." := GetVendorItemNo;
                                                              END;

                                                   CaptionML=ENU=Buy-from Vendor No.;
                                                   Editable=No }
    { 410 ;   ;Item Tracking No.   ;Integer       ;CaptionML=ENU=Item Tracking No. }
    { 420 ;   ;Indirect Cost %     ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 430 ;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=ENU=Return Reason Code }
    { 440 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 450 ;   ;Item Rcpt. Entry No.;Integer       ;CaptionML=ENU=Item Rcpt. Entry No. }
    { 460 ;   ;Purchase Action     ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Project No.),
                                                                                                       Status=FILTER(>=Approved));
                                                   CaptionML=ENU=Purchase Action }
    { 470 ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Employee No. }
    { 475 ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 480 ;   ;FSC Type Code       ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 490 ;   ;Dimension Set ID    ;Integer       ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::"Fixed Asset" THEN BEGIN
                                                                  TESTFIELD("Project No.",'');
                                                                  IF "FA Posting Type" = "FA Posting Type"::" " THEN
                                                                    "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
                                                                  GetFAPostingGroup
                                                                END ELSE BEGIN
                                                                  "FA Posting Type" := "FA Posting Type"::" ";
                                                                  "Depreciation Book Code" := '';
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=FA Posting Type;
                                                   OptionCaptionML=ENU=" ,Acquisition Cost,Maintenance";
                                                   OptionString=[ ,Acquisition Cost,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=ENU=Depreciation Book Code }
    { 5605;   ;Depr. until FA Posting Date;Boolean;OnValidate=BEGIN
                                                                IF (Type <> Type::"Fixed Asset") THEN
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Depr. until FA Posting Date }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;OnValidate=BEGIN
                                                                IF (Type <> Type::"Fixed Asset") THEN
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                              END;

                                                   CaptionML=ENU=Depr. Acquisition Cost }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   CaptionML=ENU=Insurance No. }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset" WHERE (Budgeted Asset=CONST(Yes));
                                                   CaptionML=ENU=Budgeted FA No. }
    { 11012010;;Interest Date      ;Date          ;OnValidate=BEGIN
                                                                IF ("Interest Date" > "Posting Date") THEN
                                                                  FIELDERROR("Interest Date",STRSUBSTNO(Text009, "Interest Date", FIELDCAPTION("Posting Date"),"Posting Date"));
                                                              END;

                                                   CaptionML=ENU=Interest Date }
    { 11012020;;Manually VAT Posting;Boolean      ;CaptionML=ENU=Manually VAT Posting }
    { 11012030;;VAT %              ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11012035;;VAT Bus. Posting Group;Code10     ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 11012040;;VAT Prod. Posting Group;Code10    ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF NOT VatPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                  VatPostingSetup.INIT;
                                                                "VAT %" := VatPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VatPostingSetup."VAT Calculation Type";
                                                                "Manually VAT Posting" := VatPostingSetup.Manually;
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"Account (G/L)");
                                                                      VatPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                      TESTFIELD("Account No.",VatPostingSetup."Purchase VAT Account");
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 11012070;;VAT Amount         ;Decimal       ;OnValidate=BEGIN
                                                                "Amount Including VAT" := "VAT Amount" + Amount;
                                                              END;

                                                   CaptionML=ENU=VAT Amount;
                                                   AutoFormatType=1 }
    { 11012080;;VAT Base Amount    ;Decimal       ;CaptionML=ENU=VAT Base Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 11012085;;Plot No.           ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Plot No. }
    { 11012180;;Induction Note No. ;Text30        ;OnValidate=BEGIN
                                                                IF "Induction Note No." <> '' THEN BEGIN
                                                                  PurchHeader.RESET;
                                                                  PurchHeader.SETCURRENTKEY("Induction Note No.");
                                                                  PurchHeader.SETRANGE("Induction Note No.","Induction Note No.");
                                                                  PurchHeader.SETRANGE("Document Type", PurchHeader."Document Type"::Order);
                                                                  IF PurchHeader.FINDFIRST THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text006,
                                                                        FIELDCAPTION("Induction Note No."),
                                                                        "Induction Note No.",
                                                                        STRSUBSTNO('%1',PurchHeader."Document Type"),
                                                                        PurchHeader."No."),FALSE)
                                                                    THEN BEGIN
                                                                      "Induction Note No." := xRec."Induction Note No.";
                                                                      EXIT;
                                                                    END;

                                                                  ApprLine.RESET;
                                                                  ApprLine.SETRANGE("Document Type", "Document Type");
                                                                  ApprLine.SETFILTER("Document No.",'<> %1',"Document No.");
                                                                  ApprLine.SETRANGE("Induction Note No.","Induction Note No.");
                                                                  IF ApprLine.FINDFIRST THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text006,
                                                                        FIELDCAPTION("Induction Note No."),
                                                                        "Induction Note No.",
                                                                        STRSUBSTNO('%1',ApprLine."Document Type"),
                                                                        ApprLine."Document No."),FALSE)
                                                                    THEN BEGIN
                                                                      "Induction Note No." := xRec."Induction Note No.";
                                                                      EXIT;
                                                                    END;

                                                                  ReceiptHeaderRec.RESET;
                                                                  ReceiptHeaderRec.SETCURRENTKEY("Buy-from Vendor No.","Induction Note No.");
                                                                  ReceiptHeaderRec.SETRANGE("Induction Note No.","Induction Note No.");
                                                                  IF ReceiptHeaderRec.FINDFIRST THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text006,
                                                                        FIELDCAPTION("Induction Note No."),
                                                                        "Induction Note No.",
                                                                        ReceiptHeaderRec.TABLECAPTION,
                                                                        ReceiptHeaderRec."No."),FALSE)
                                                                    THEN BEGIN
                                                                      "Induction Note No." := xRec."Induction Note No.";
                                                                      EXIT;
                                                                    END;

                                                                  PurchInvLine.RESET;
                                                                  PurchInvLine.SETCURRENTKEY("Induction Note No.");
                                                                  PurchInvLine.SETRANGE("Induction Note No.","Induction Note No.");
                                                                  IF PurchInvLine.FINDFIRST THEN
                                                                    IF NOT CONFIRM(STRSUBSTNO(
                                                                        Text006,
                                                                        FIELDCAPTION("Induction Note No."),
                                                                        "Induction Note No.",
                                                                        InvHeader.TABLECAPTION,
                                                                        PurchInvLine."Document No."),FALSE)
                                                                    THEN BEGIN
                                                                      "Induction Note No." := xRec."Induction Note No.";
                                                                      EXIT;
                                                                    END;

                                                                END;
                                                              END;

                                                   CaptionML=ENU=Induction Note No. }
    { 11012200;;Text               ;Text250       ;OnValidate=BEGIN
                                                                "Text Block" := Text <> '';
                                                              END;

                                                   CaptionML=ENU=Text }
    { 11012201;;Text Block         ;Boolean       ;CaptionML=ENU=Text Block;
                                                   Editable=No }
    { 11012230;;Purchase Route Reference;Code20   ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 11012260;;Cost Plus Entry Created;Boolean   ;CaptionML=ENU=Cost Plus Entry Created }
    { 11012270;;Sales Price        ;Decimal       ;CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 11012280;;Reserved Qty. (Base);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source Type=CONST(11012032),
                                                                                                                Source Subtype=FIELD(Document Type),
                                                                                                                Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Description=See T39 Fld5495;
                                                   Editable=No }
    { 11012400;;Reserved NS Qty. (Base);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("NS Reservation Entry"."Quantity (Base)" WHERE (Source Type=CONST(11012032),
                                                                                                                   Source Subtype=FIELD(Document Type),
                                                                                                                   Source ID=FIELD(Document No.),
                                                                                                                   Source Ref. No.=FIELD(Line No.),
                                                                                                                   Reservation Status=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Non-stock Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Description=See T39 Fld11012400;
                                                   Editable=No }
    { 11012550;;Plant Type         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Type";
                                                   OnValidate=BEGIN
                                                                FillSystemCreatedEntry;
                                                                FillFixedAssetPlantRelation();

                                                                IF "Plant Type" = '' THEN BEGIN
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  EXIT;
                                                                //*C-028911.sn
                                                                END ELSE BEGIN
                                                                  IF (CheckPlantAcqOrRent() <> 0) THEN BEGIN  //*33895.n
                                                                    TESTFIELD("Item No.", '');
                                                                    TESTFIELD("Basic Item", '');
                                                                    TESTFIELD("Trade Item", '');
                                                                  END;  //*33895.n
                                                                //*C-028911.en
                                                                END;

                                                                CheckProjServPlantAllowed;
                                                                CheckCompanyIC;
                                                                PlantTypeRec.GET("Plant Type");

                                                                VALIDATE("Plant No.");
                                                                IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN EXIT;  //*33895.n
                                                                IF "Plant No." = '' THEN
                                                                  Description := PlantTypeRec.Description;

                                                                //**4PS.sn 25-03-2010
                                                                IF ("Receiving Company" <> '') AND
                                                                   ("Plant Type" <> xRec."Plant Type") AND
                                                                   (CurrFieldNo = FIELDNO("Plant Type")) THEN
                                                                BEGIN
                                                                  "Shortcut Dimension 1 Code" := PlantTypeRec."Department Code";
                                                                END;
                                                                //**4PS.en 25-03-2010

                                                                CreateDim(
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n 19506
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DimMgt.TypeToTableID3(1),"Account No.",
                                                                  DATABASE::Item,"Item No.",   //** 4PS 09-06-2010
                                                                  DATABASE::Job,"Project No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              OnLookupPlantType(TRUE);
                                                            END;

                                                   CaptionML=ENU=Plant Type }
    { 11012551;;Plant No.          ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                FillFixedAssetPlantRelation();

                                                                //IF "Plant No." = '' THEN  //*33895.o
                                                                //  EXIT;                   //*33895.o
                                                                //*33895.sn
                                                                IF "Plant No." = '' THEN BEGIN
                                                                  IF "Plant Type" <> '' THEN
                                                                    VALIDATE("Cost Component Plant");
                                                                  EXIT;
                                                                END;
                                                                //*33895.en

                                                                TESTFIELD("Plant Type");
                                                                CheckCompanyIC;
                                                                PlantNoRec.GET("Plant Type", "Plant No.");
                                                                VALIDATE("Cost Component Plant");  //*33895.n
                                                                IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN EXIT;  //*33895.n

                                                                Description := PlantNoRec.Description;

                                                                CreateDim(
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n 19506
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DimMgt.TypeToTableID3(1),"Account No.",
                                                                  DATABASE::Item,"Item No.",   //** 4PS 09-06-2010
                                                                  DATABASE::Job,"Project No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantNoRec."Plant Type" := "Plant Type";
                                                              PlantNoRec."No." := "Plant No.";
                                                              IF PAGE.RUNMODAL(0,PlantNoRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Plant No.", PlantNoRec."No.");
                                                            END;

                                                   CaptionML=ENU=Plant No. }
    { 11012552;;Bulk               ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 11012553;;Cost Component Plant;Code10       ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Component Plant";
                                                   OnValidate=VAR
                                                                lvPlantSetupRec@1100485000 : Record 11012550;
                                                                lvTypeNo@1100485001 : Integer;
                                                                lvModeInEx@1100485002 : Code[1];
                                                                lvVendorRec@1100525000 : Record 23;
                                                                lvVendor@1100525001 : Code[20];
                                                              BEGIN
                                                                IF "Cost Component Plant" = '' THEN BEGIN
                                                                  "Plant Location" := '';
                                                                  EXIT;
                                                                END;

                                                                GetHeader;
                                                                //**4PS-JTH 26-03-2010 sn
                                                                IF "Document Type" = "Document Type"::"Purchase Invoice" THEN
                                                                  lvVendor := InvHeader."Buy-from Vendor No."
                                                                ELSE
                                                                  lvVendor := CredMemoHeader."Buy-from Vendor No.";
                                                                //**4PS-JTH 26-03-2010 en

                                                                lvVendorRec.INIT;
                                                                IF lvVendorRec.GET(lvVendor) THEN;  //**4PS-JTH 26-03-2010

                                                                TESTFIELD("Plant Type");

                                                                CheckCompanyIC;
                                                                CostCompPlantRec.GET("Cost Component Plant");

                                                                PlantTypeRec.GET("Plant Type");

                                                                lvTypeNo := CheckPlantAcqOrRent();
                                                                IF (lvTypeNo <> 0) THEN BEGIN
                                                                  TESTFIELD("Plant No.");
                                                                  //*33895.sn
                                                                  IF ("Item No." <> '') THEN FIELDERROR("Item No.", Text013);
                                                                  IF ("Basic Item" <> '') THEN FIELDERROR("Basic Item", Text013);
                                                                  IF ("Trade Item" <> '') THEN FIELDERROR("Trade Item", Text013);
                                                                  //*33895.en
                                                                  IF ("Plant No." = '') THEN BEGIN
                                                                    IF PlantTypeRec.Bulk THEN BEGIN
                                                                      IF ("Receiving Company" <> '') THEN
                                                                        lvPlantSetupRec.CHANGECOMPANY("Receiving Company");
                                                                      lvPlantSetupRec.GET;
                                                                      IF (lvTypeNo = 1) THEN
                                                                        PlantTypeRec.TESTFIELD(External, FALSE);
                                                                      IF (lvTypeNo = 2) AND (NOT lvPlantSetupRec."Ext Bulk Plant with No. in Inv") THEN
                                                                        PlantTypeRec.TESTFIELD(External, TRUE);
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    PlantNoRec.GET("Plant Type", "Plant No.");
                                                                    IF (lvTypeNo = 1) THEN
                                                                      PlantNoRec.TESTFIELD(External, FALSE);
                                                                    IF (lvTypeNo = 2) THEN
                                                                      PlantNoRec.TESTFIELD(External, TRUE);
                                                                    IF (NOT PlantTypeRec.Bulk) AND (lvTypeNo IN [1, 2]) AND (Quantity <> 0) THEN
                                                                      TESTFIELD(Quantity, 1);
                                                                  END;
                                                                END;

                                                                IF (lvTypeNo <> 2) THEN
                                                                  "Ext. Rented Plant Invoiced to" := 0D;

                                                                IF NOT FillFixedAssetPlantRelation THEN BEGIN
                                                                  IF ("Plant No." = '') AND (lvTypeNo <> 0) THEN
                                                                    lvModeInEx := COPYSTR('IE', lvTypeNo, 1);  //* Internal/External


                                                                  IF NOT PlantPostingSetup.GET(PlantTypeRec.PlantPostingGrp("Plant No.",
                                                                                                                            "Receiving Company",
                                                                                                                            lvModeInEx),
                                                                                               lvVendorRec."Vendor Posting Group",
                                                                                               "Cost Component Plant")
                                                                  THEN
                                                                    PlantPostingSetup.GET(PlantTypeRec.PlantPostingGrp("Plant No.","Receiving Company",lvModeInEx),
                                                                                                                       '', //Field for vendor posting group
                                                                                                                       "Cost Component Plant");
                                                                  IF (Type <> Type::"Account (G/L)") THEN BEGIN
                                                                    Type := Type::"Account (G/L)";
                                                                    VALIDATE("FA Posting Type");
                                                                  END;
                                                                  "Account No." := PlantPostingSetup."Plant Cost Account";
                                                                //  Description := CostCompPlantRec.Description;
                                                                END;
                                                                VALIDATE("Account No.");

                                                                IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN EXIT;  //*33895.n

                                                                CreateDim(
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n 19506
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DimMgt.TypeToTableID3(1),"Account No.",
                                                                  DATABASE::Item,"Item No.",   //** 4PS 09-06-2010
                                                                  DATABASE::Job,"Project No.",
                                                                  DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
                                                                  DATABASE::Location,"Location Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              CostCompPlantRec.Code := "Cost Component Plant";
                                                              IF PAGE.RUNMODAL(0,CostCompPlantRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Cost Component Plant", CostCompPlantRec.Code);
                                                            END;

                                                   CaptionML=ENU=Cost Component Plant }
    { 11012554;;Ext. Rented Plant Invoiced to;Date;OnValidate=VAR
                                                                lvPlantSetupRec@1100485000 : Record 11012550;
                                                                lvDate@1100485001 : Date;
                                                                lvText11012001@1100485003 : TextConst 'ENU=New date ''External Rent Invoiced to'' (%1) is less than ''Already Invoiced to'' (%2). \The date ''External Rent Invoiced to'' of the Plant No. will be set to %1.\ \Are yoe sure?';
                                                                lvText11012002@1100485002 : TextConst 'ENU=New date ''External Rent Invoiced to'' (%1) is GREATER than ''Already Invoiced to'' (%2), are yoe sure?';
                                                              BEGIN
                                                                IF ("Ext. Rented Plant Invoiced to" <> 0D) THEN BEGIN
                                                                  TESTFIELD("Receiving Company", '');
                                                                  lvPlantSetupRec.GET;
                                                                  lvPlantSetupRec.TESTFIELD("Cost Component Rent");
                                                                  TESTFIELD("Plant Type");
                                                                  TESTFIELD("Plant No.");
                                                                  TESTFIELD("Cost Component Plant", lvPlantSetupRec."Cost Component Rent");
                                                                  IF CurrFieldNo = FIELDNO("Ext. Rented Plant Invoiced to") THEN BEGIN
                                                                    lvDate := PrevExtRentedPlantInvoicedTo();
                                                                    IF (lvDate <> 0D) THEN BEGIN
                                                                      IF ("Document Type" = "Document Type"::"Purchase Invoice") AND ("Ext. Rented Plant Invoiced to" < lvDate) THEN BEGIN
                                                                        IF NOT CONFIRM(lvText11012001, FALSE, "Ext. Rented Plant Invoiced to", lvDate) THEN
                                                                          ERROR('');
                                                                      END;
                                                                      IF ("Document Type" = "Document Type"::"Credit Memo") AND ("Ext. Rented Plant Invoiced to" > lvDate) THEN BEGIN
                                                                        IF NOT CONFIRM(lvText11012002, FALSE, "Ext. Rented Plant Invoiced to", lvDate) THEN
                                                                          ERROR('');
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ext. Rented Plant Invoiced to }
    { 11012555;;Plant Location     ;Code20        ;TableRelation="Plant Location" WHERE (Depot=CONST(No));
                                                   OnValidate=VAR
                                                                PlantCostComp@1100409000 : Record 11012575;
                                                              BEGIN
                                                                //*C001519
                                                                IF "Plant Location" <> '' THEN BEGIN
                                                                  TESTFIELD("Receiving Company", '');
                                                                  TESTFIELD("Cost Component Plant");
                                                                  PlantCostComp.GET("Cost Component Plant");
                                                                  PlantCostComp.TESTFIELD("Charge Purchase");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Location }
    { 11012600;;Cost Component     ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                ValidateCostComponent;  //db, 19-05-10
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 11012800;;Service Order No.  ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order".No.;
                                                   OnValidate=BEGIN
                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Contract No." := '';
                                                                  "Service Order Description" := '';
                                                                END ELSE BEGIN
                                                                  CheckCompanyIC;
                                                                  CheckProjServPlantAllowed;
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServOrderRec.CheckStatus(1);
                                                                  Type := Type::"Account (G/L)";
                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  "Service Order Description" := ServOrderRec.Description;
                                                                  CheckAdditionalCostService(CurrFieldNo);  //db, 19-05-10
                                                                END;
                                                                FillSystemCreatedEntry;
                                                                CheckCostCompServOrderType;  //db, 19-05-10
                                                                IF (xRec."Service Order No." <> "Service Order No.") AND (Quantity <> 0) THEN
                                                                  ReservePurchInvApprLine.VerifyChange(Rec,xRec);  //**4PS.n C004829

                                                                CreateDim(
                                                                  DATABASE::"Service Order","Service Order No.",
                                                                  DimMgt.TypeToTableID3(1),"Account No.",
                                                                  DATABASE::Item,"Item No.",
                                                                  DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n 19506
                                                                  DATABASE::"Plant Type","Plant Type",
                                                                  DATABASE::Job,"Project No.",
                                                                  DATABASE::Location,"Location Code");
                                                                VALIDATE("Shortcut Dimension 1 Code");
                                                                VALIDATE("Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceOrderNo();
                                                            END;

                                                   CaptionML=ENU=Service Order No. }
    { 11012801;;Service Location No.;Code20       ;TableRelation="Service Location".No.;
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 11012804;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 11012806;;Additional Cost (Service);Boolean ;OnValidate=BEGIN
                                                                ValidateAdditionalCost;  //db, 19-05-10
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 11012807;;Removal Contribution;Boolean      ;CaptionML=ENU=Removal Contribution }
    { 11012810;;Service Order Description;Text50  ;CaptionML=ENU=Service Order Description }
    { 11012900;;Expense Allowance Scheme;Boolean  ;CaptionML=ENU=Expense Allowance Scheme }
    { 11012940;;Rental Unit        ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF "Rental Unit" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Receiving Company", '');  //* IC for Rental Units is not supported (was already not this way i.a. general journals)
                                                              END;

                                                   CaptionML=ENU=Rental Unit }
    { 11012970;;Tariff No.         ;Code20        ;TableRelation="Tariff Number";
                                                   OnValidate=BEGIN
                                                                //M29056  new field
                                                              END;

                                                   CaptionML=ENU=Tariff No. }
    { 11012973;;Gross Weight       ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 11012975;;Net Weight         ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 11012980;;Entity Type        ;Option        ;CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                   OptionString=None,Cable,Device,ExtraNeed,CableTransit,,,,,Position;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012981;;System No.         ;Code20        ;CaptionML=ENU=System No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012982;;Entity No.         ;Code20        ;CaptionML=ENU=Entity No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012983;;Gland Position     ;Option        ;CaptionML=ENU=Cable Gland Postion;
                                                   OptionCaptionML=ENU=" ,From Side,To Side";
                                                   OptionString=[ ,From,To];
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012984;;Yard No.           ;Code20        ;CaptionML=ENU=Yard No.;
                                                   Description=Engineering;
                                                   Editable=No }
    { 11012997;;Line Type          ;Code10        ;TableRelation="Line Type"."Line Type" WHERE (Document Type=CONST(Purchase Invoice Approval));
                                                   CaptionML=ENU=Line Type }
  }
  KEYS
  {
    {    ;Journal Template Name,Document Type,Document No.,Line No.;
                                                   SumIndexFields=Amount,Amount Including VAT;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Purchase Route Reference                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100485000 : TextConst 'ENU=Record attached to Receipt %1 line %2, quantity is outside the range %3 ... %4, continue ?';
      Text001@1100529001 : TextConst 'ENU=You cannot rename a %1.';
      Text002@11012021 : TextConst 'ENU=Change Cost Type ?';
      Text004@11012023 : TextConst 'ENU=Combination Cost Type - Cost Object not allowed';
      Text005@11012024 : TextConst 'ENU=Line attached to receipt %1 line %2, amount is larger then open amount %3 on the receipt.';
      GLSetup@11012000 : Record 98;
      PurchSetup@11012001 : Record 312;
      PlantPostingSetup@1210190001 : Record 11012570;
      GLJournTemplRec@11012002 : Record 80;
      GLAcc@11012004 : Record 15;
      ReceiptHeaderRec@11012005 : Record 120;
      ReceiptRec@11012006 : Record 121;
      InvHeader@11012008 : Record 122;
      CredMemoHeader@11012009 : Record 124;
      Currency@11012010 : Record 4;
      ItemRec@11012011 : Record 27;
      ICProjSetupRec@1210190026 : Record 315;
      ProjRec@11012012 : Record 11072003;
      PtypRec@11012013 : Record 11012009;
      DimValRec@11012014 : Record 349;
      ProjElemRec@11012016 : Record 11012010;
      ExtRec@11012017 : Record 11012004;
      PlantTypeRec@1210190000 : Record 11012551;
      PlantNoRec@1210190017 : Record 11012552;
      CostCompPlantRec@1210190002 : Record 11012575;
      PurchHeader@1210190003 : Record 38;
      ApprLine@1210190006 : Record 11012032;
      PurchInvLine@1210190004 : Record 123;
      GenPostingSetup@1210190012 : Record 252;
      Text006@1210190005 : TextConst 'ENU=%1 %2 is in use for %3 %4. Use %1 anyway ?';
      Text008@1210190009 : TextConst 'ENU=Line attached to receipt %1 line %2, amount is larger than invoiced amount %3 on the receipt.';
      ServTypeRec@1210190024 : Record 11012814;
      ServOrderRec@1210190019 : Record 11012823;
      FASetup@1210190023 : Record 5603;
      FA@1210190022 : Record 5600;
      FADeprBook@1210190021 : Record 5612;
      TempApprovalLine@1210190020 : Record 11012032;
      VatPostingSetup@1100525000 : Record 325;
      ElementFormat@1210190016 : Codeunit 11012022;
      DimMgt@1210190014 : Codeunit 408;
      UOMMgt@1210190011 : Codeunit 5402;
      ValidateCu@1210190013 : Codeunit 11012033;
      ReservePurchInvApprLine@1100529000 : Codeunit 11012363;
      ItemTypeOpt@1210190015 : 'Item,Basic Item,Trade Item';
      AmountsOnly@1210190007 : Boolean;
      Text009@1210190027 : TextConst 'ENU=(%1) may not be greater than the de %2 (%3)';
      GLSetupRead@1100485001 : Boolean;
      VATBaseDiscount@1100525001 : Decimal;
      Text011@1100525002 : TextConst 'ENU=" must be 0 when %1 is %2."';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text012@1100525003 : TextConst 'ENU=Field %1 is not filled.';
      Text013@1210190008 : TextConst 'ENU=not allowed for acquisition/rent of plant';

    PROCEDURE CalculateAmount@1();
    BEGIN
      GetHeader;
      IF AmountsOnly THEN
        Amount := ROUND(Price,Currency."Amount Rounding Precision")
      ELSE
        Amount := ROUND(Quantity * Price,Currency."Amount Rounding Precision");
      VALIDATE(Amount);
    END;

    PROCEDURE DetermineAccount@3();
    VAR
      xDimValRec@1100485000 : Record 349;
      lvCompName@1100485001 : Text[50];
      lvVendor@1100525000 : Code[20];
    BEGIN
      CheckCompanyIC;
      IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Project No.");
        IF "Cost Type" = "Cost Type"::" " THEN
          "Cost Type" := DimValRec."Cost Type" + 1;
        IF "Cost Type" <> DimValRec."Cost Type" + 1 THEN
          ERROR(Text004);

        IF "Receiving Company" <> '' THEN
          lvCompName := "Receiving Company"
        ELSE
          lvCompName := COMPANYNAME;

        //No guarantee that vendor is present in the line. 24-10-2008
        GetHeader;
        IF "Document Type" = "Document Type"::"Purchase Invoice" THEN
          lvVendor := InvHeader."Buy-from Vendor No."
        ELSE
          lvVendor := CredMemoHeader."Buy-from Vendor No.";
        //

        IF "Service Order No." <> '' THEN BEGIN
          ServOrderRec.GET("Service Order No.");
          IF "Additional Cost (Service)" = TRUE THEN BEGIN //db, 24-11-05
            ServOrderRec.TESTFIELD("Service Type (Other)");
            ServTypeRec.GET(ServOrderRec."Service Type (Other)");
          END ELSE BEGIN
            ServOrderRec.TESTFIELD("Service Type");
            ServTypeRec.GET(ServOrderRec."Service Type");
          END;

          "Account No." := ServTypeRec.GetWipAcc(ServTypeRec.Code,
                                                 DimValRec."Cost Type",
                                                 lvCompName,
                                                 DimValRec."Cost Type",
                                                 lvVendor);

          VALIDATE("Account No.");
          IF "Additional Cost (Service)" = TRUE THEN  //db, 24-11-05
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
          ELSE
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
        END ELSE BEGIN
          IF "Project No." <> '' THEN BEGIN
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD("Project Type");
            PtypRec.GET(ProjRec."Project Type");

            "Account No." := PtypRec.GetWipAcc(ProjRec."Project Type",
                                               DimValRec."Cost Type",
                                               ProjRec."Project Status",
                                               ICProjSetupRec."Provisions at Closure",
                                               lvCompName,
                                               DimValRec."Cost Type", lvVendor);
            VALIDATE("Account No.");
          END;
        END;
        IF ("Item No." = '') AND (Manufacturer = '') AND ("Vendor (Trade Item)" = '') THEN BEGIN
          DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, "Project No.");
          IF "Shortcut Dimension 2 Code" <> xRec."Shortcut Dimension 2 Code" THEN BEGIN
            IF Description = '' THEN
              Description := DimValRec.Name
            ELSE BEGIN
              DimMgt.GetDimValueRec(2, xRec."Shortcut Dimension 2 Code", xDimValRec, FALSE, xRec."Project No.");
              IF Description = xDimValRec.Name THEN
                Description := DimValRec.Name;
            END;
            "Unit of Measure Code" := DimValRec."Unit of Measure";
          END;
        END;
      END;
    END;

    PROCEDURE CheckReceipt@2();
    VAR
      MaxReceiptAmount@1210190000 : Decimal;
      CostPriceRecInInvCurr@1210190001 : Decimal;
      MaxQuan@1210190002 : Decimal;
      MessTxt@1210190003 : Text[250];
    BEGIN
      //27452
      PurchSetup.GET;
      IF PurchSetup."No Check Inv.Amt. with Receipt" THEN
        EXIT;

      IF "Receipt No." <> '' THEN
        IF ReceiptRec.GET("Receipt No.","Receipt Line No.") THEN BEGIN
          GetHeader;
          IF AmountsOnly THEN BEGIN
            IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
              MaxReceiptAmount :=
                ROUND((ReceiptRec."Received (line)" - ReceiptRec."Invoiced (line)"),0.00001);
              MessTxt := Text005;
            END ELSE BEGIN
              IF ReceiptRec."Received (line)" < 0 THEN BEGIN
                MaxReceiptAmount := -ROUND(
                  (ReceiptRec."Received (line)" - ReceiptRec."Invoiced (line)"),0.00001);
                MessTxt := Text005;
              END ELSE BEGIN
                MaxReceiptAmount := ROUND(ReceiptRec."Invoiced (line)",0.00001);
                MessTxt := Text008;
              END;
            END;
          END ELSE BEGIN
            CostPriceRecInInvCurr := ROUND(ReceiptRec."Unit Cost",0.00001);
            IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
              MaxQuan := ReceiptRec.Quantity - ReceiptRec."Quantity Invoiced";
              MessTxt := Text005;
            END ELSE BEGIN
              IF ReceiptRec.Quantity < 0 THEN BEGIN
                MaxQuan := -(ReceiptRec.Quantity - ReceiptRec."Quantity Invoiced");
                MessTxt := Text005;
              END ELSE BEGIN
                MaxQuan := ReceiptRec."Quantity Invoiced";
                MessTxt := Text008;
              END;
            END;
            MaxReceiptAmount := MaxQuan * CostPriceRecInInvCurr
          END;
          MaxReceiptAmount := ROUND(MaxReceiptAmount, Currency."Amount Rounding Precision");
          IF Amount > MaxReceiptAmount THEN
            MESSAGE(
              MessTxt,
              "Receipt No.",
              "Receipt Line No.",
              MaxReceiptAmount);

        END;
    END;

    LOCAL PROCEDURE GetHeader@4();
    BEGIN
      IF "Document No." = '' THEN
        EXIT;

      IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
        IF NOT InvHeader.GET("Document No.") THEN   //JTH ?? necessary
          EXIT;
        IF InvHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          InvHeader.TESTFIELD("Currency Factor");
          Currency.GET(InvHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          Currency.TESTFIELD("Unit-Amount Rounding Precision");
        END;
        AmountsOnly := InvHeader."Amounts only";
        VATBaseDiscount := InvHeader."VAT Base Discount %";
      END ELSE BEGIN
        IF NOT CredMemoHeader.GET("Document No.") THEN //JTH ?? necessary
          EXIT;
        IF CredMemoHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          CredMemoHeader.TESTFIELD("Currency Factor");
          Currency.GET(CredMemoHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          Currency.TESTFIELD("Unit-Amount Rounding Precision");
        END;
        AmountsOnly := CredMemoHeader."Amounts only";
        VATBaseDiscount := CredMemoHeader."VAT Base Discount %";
        InvHeader."Shortcut Dimension 1 Code" := CredMemoHeader."Shortcut Dimension 1 Code";
          InvHeader."Shortcut Dimension 2 Code" := CredMemoHeader."Shortcut Dimension 2 Code";  //Call C004654
        InvHeader."Dimension Set ID" := CredMemoHeader."Dimension Set ID";
      END;
    END;

    PROCEDURE GetProjectDepartment@30();
    BEGIN
      IF ("Project No." = '') THEN
        EXIT;

      CheckCompanyIC;
      ProjRec.GET("Project No.");
      "Shortcut Dimension 1 Code" := ProjRec."Global Dimension 1 Code";  //FIXED, this is OK DP00387, Validate is done later in the process FIXED
    END;

    PROCEDURE CheckCompanyIC@6();
    VAR
      lvCompName@1210190000 : Text[50];
    BEGIN
      IF "Receiving Company" <> '' THEN
        lvCompName := "Receiving Company"
      ELSE
        lvCompName := COMPANYNAME;

      GLAcc.CHANGECOMPANY(lvCompName);
      ICProjSetupRec.CHANGECOMPANY(lvCompName);
      ProjRec.CHANGECOMPANY(lvCompName);
      DimValRec.CHANGECOMPANY(lvCompName);
      PtypRec.CHANGECOMPANY(lvCompName);
      ProjElemRec.CHANGECOMPANY(lvCompName);
      ExtRec.CHANGECOMPANY(lvCompName);
      PlantTypeRec.CHANGECOMPANY(lvCompName);
      PlantNoRec.CHANGECOMPANY(lvCompName);
      CostCompPlantRec.CHANGECOMPANY(lvCompName);
      PlantPostingSetup.CHANGECOMPANY(lvCompName);
      ServTypeRec.CHANGECOMPANY(lvCompName);
      ServOrderRec.CHANGECOMPANY(lvCompName);

      ICProjSetupRec.GET;
    END;

    PROCEDURE RefersToOtherCompany@1100525008() : Boolean;
    BEGIN
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE GetCurrCodeHeader@5() : Code[10];
    BEGIN
      IF "Document No." = '' THEN
        EXIT('');

      GetHeader;
      IF "Document Type" = "Document Type"::"Purchase Invoice" THEN
        EXIT(InvHeader."Currency Code")
      ELSE
        EXIT(CredMemoHeader."Currency Code");
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1100485001 : Integer;No3@1100485000 : Code[20];Type4@1100525003 : Integer;No4@1100525002 : Code[20];Type5@1100525001 : Integer;No5@1100525000 : Code[20];Type6@1100525004 : Integer;No6@1100525005 : Code[20];Type7@1100528251 : Integer;No7@1100528250 : Code[20]);
    VAR
      SourceCodeSetup@1008 : Record 242;
      TableID@1009 : ARRAY [10] OF Integer;
      No@1010 : ARRAY [10] OF Code[20];
      Dim1@1210190000 : Code[20];
      Dim2@1210190001 : Code[20];
      i@1210190002 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      //**4PS.sn
      No[4] := No4;         //*09-06-2010 sn
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;         //*09-06-2010 en
      TableID[6] := Type6;  //*19506.n
      No[6] := No6;         //*19506.n
      TableID[7] := Type7;
      No[7] := No7;
      //**4PS.en
      //*33895.sn
      IF ("Plant Type" <> '') AND ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
        IF CheckPlantAcqOrRent() = 0 THEN BEGIN
          FOR i := 1 TO ARRAYLEN(TableID) DO BEGIN
            IF TableID[i] IN [DATABASE::"Plant Type", DATABASE::"Plant Number"] THEN BEGIN
              TableID[i] := 0;
              No[i] := '';
            END;
          END;
        END;
      END;
      //*33895.en

      Dim1 := "Shortcut Dimension 1 Code";
      Dim2 := "Shortcut Dimension 2 Code";

      //"Shortcut Dimension 1 Code" := ''; //**4PS.o Must be kept for Department Authorization
      "Shortcut Dimension 2 Code" := '';
      DimMgt.SetCompany("Receiving Company"); //**4PS.n
      GetHeader;
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          InvHeader."Dimension Set ID",DATABASE::Vendor);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF (Dim1 <> '') AND ("Shortcut Dimension 1 Code" = '') THEN BEGIN
        "Shortcut Dimension 1 Code" := Dim1;
      //  ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");  //DP00387 old
      END;
      ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");  //DP00387 new

      IF (Dim2 <> '') AND
         (("Shortcut Dimension 2 Code" = '') OR
          (CurrFieldNo = FIELDNO("Shortcut Dimension 2 Code")))
      THEN BEGIN
        "Shortcut Dimension 2 Code" := Dim2;
        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@1210190001(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      IF FieldNumber = 1 THEN
        DimMgt.CheckDepartmentAuthorization(DATABASE::"Invoice Approval Line", ShortcutDimCode);
      DimMgt.SetCompany("Receiving Company");
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@1210190000(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company");
      DimMgt.LookupDimValueCodeCompany(FieldNumber,ShortcutDimCode,"Receiving Company");
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.SetCompany("Receiving Company"); //**4PS.n T005462
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowDimensions@25();
    VAR
      PurchInvHeader@1100525000 : Record 122;
      PurchCrMemoHdr@1100525001 : Record 124;
      DimensionsAreEditable@1100525002 : Boolean;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");

      DimensionsAreEditable := TRUE;
      CASE "Document Type" OF
        "Document Type"::"Purchase Invoice":
          BEGIN
            PurchInvHeader.GET("Document No.");
            DimensionsAreEditable :=
              (PurchInvHeader."DMS Status" < PurchInvHeader."DMS Status"::"Start Workflow") OR
              (PurchInvHeader."DMS Status" = PurchInvHeader."DMS Status"::Rejected) OR
              (PurchInvHeader."DMS Status" = PurchInvHeader."DMS Status"::Approved);
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            PurchCrMemoHdr.GET("Document No.");
            DimensionsAreEditable :=
              (PurchCrMemoHdr."DMS Status" < PurchCrMemoHdr."DMS Status"::"Start Workflow") OR
              (PurchCrMemoHdr."DMS Status" = PurchCrMemoHdr."DMS Status"::Rejected) OR
              (PurchCrMemoHdr."DMS Status" = PurchCrMemoHdr."DMS Status"::Approved);
          END;
      END;

      DimMgt.SetCompany("Receiving Company");
      DimMgt.SetTableID(DATABASE::"Invoice Approval Line");
      IF DimensionsAreEditable THEN BEGIN
        "Dimension Set ID" :=
          DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      //VerifyItemLineDim; //FIXED like table 39? DP00387 DOn't think so.
        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      END ELSE
        DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
    END;

    PROCEDURE InitRecord@1210190002();
    VAR
      ProjectNo@1210190000 : Code[20];
      ServOrderNo@1100485000 : Code[20];
    BEGIN
      IF "Document No." = '' THEN
        EXIT;

      PurchSetup.GET;
      GetHeader;
      IF ("Shortcut Dimension 1 Code" = '') AND (InvHeader."Shortcut Dimension 1 Code" <> '') THEN
        VALIDATE("Shortcut Dimension 1 Code", InvHeader."Shortcut Dimension 1 Code" );

      IF ("Shortcut Dimension 2 Code" = '') AND (InvHeader."Shortcut Dimension 2 Code" <> '') THEN
        VALIDATE("Shortcut Dimension 2 Code", InvHeader."Shortcut Dimension 2 Code");  //Call C004654

      IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
        IF InvHeader."Job No." <> '' THEN
          ProjectNo := InvHeader."Job No.";
        IF InvHeader."Service Order No." <> '' THEN
          ServOrderNo := InvHeader."Service Order No.";
        IF PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::"No VAT" THEN BEGIN
          "VAT Bus. Posting Group" := InvHeader."VAT Bus. Posting Group";
          "VAT Prod. Posting Group" := InvHeader."VAT Prod. Posting Group";
          VALIDATE("VAT Prod. Posting Group");
        END;
      END ELSE BEGIN
        IF CredMemoHeader."Job No." <> '' THEN
          ProjectNo := CredMemoHeader."Job No.";
        IF CredMemoHeader."Service Order No." <> '' THEN
          ServOrderNo := CredMemoHeader."Service Order No.";
        IF PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::"No VAT" THEN BEGIN
          "VAT Bus. Posting Group" := CredMemoHeader."VAT Bus. Posting Group";
          "VAT Prod. Posting Group" := CredMemoHeader."VAT Prod. Posting Group";
          VALIDATE("VAT Prod. Posting Group");
        END;
      END;

      InitPostingDate;

      IF ProjectNo <> '' THEN BEGIN
        CheckCompanyIC;
        IF ProjRec.GET(ProjectNo) THEN BEGIN
          IF ProjRec.Blocked < ProjRec.Blocked::All THEN BEGIN
            IF (ICProjSetupRec."Provisions at Closure") THEN BEGIN
              IF ProjRec."Project Status" < ProjRec."Project Status"::Archive THEN
                VALIDATE("Project No.", ProjectNo);
            END ELSE BEGIN
              IF ProjRec."Project Status" < ProjRec."Project Status"::"Administrative Finished" THEN
                VALIDATE("Project No.", ProjectNo);
            END;
          END;
        END;
      END;

      IF ServOrderNo <> '' THEN BEGIN
        CheckCompanyIC;
        IF ServOrderRec.GET(ServOrderNo) THEN
          IF ServOrderRec.Status < ServOrderRec.Status::"Administrative Finished" THEN
            VALIDATE("Service Order No.", ServOrderNo);
      END;
    END;

    PROCEDURE InitPostingDate@1100525001();
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Posting Date Invoice Approvals" = PurchSetup."Posting Date Invoice Approvals"::"Invoice Posting Date" THEN BEGIN
        IF "Document Type" = "Document Type"::"Purchase Invoice" THEN
          "Posting Date" := InvHeader."Posting Date"
        ELSE
          "Posting Date" := CredMemoHeader."Posting Date";
      END ELSE
        "Posting Date" := WORKDATE;
    END;

    PROCEDURE ValidateItem@6509(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@11012001 : Date;
      DummyDec@11012004 : Decimal;
      lvRefDate@1100485000 : Date;
      BasicItemRec@1210190001 : Record 11012316;
      TradeItemRec@1210190000 : Record 11012317;
      CurrencyExchRate@1100525002 : Record 330;
      CurrencyFactor@1100525000 : Decimal;
      CurrencyCode@1100525001 : Code[10];
    BEGIN
      IF ProjRec.GET("Project No.") THEN
        lvRefDate := ValidateCu.GetRefDateProject(ProjRec)
      ELSE
        CLEAR(ProjRec);

      ValidateCu.ValidateItem(
        LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)","Basic Item",
        "Shortcut Dimension 2 Code",Description,"Unit of Measure Code",Price,
        DummyDec,DummyDat,DummyDec,"Description 2","Cost Component",
        ProjRec."Purch Discount Term Group 1", ProjRec."Purch Discount Term Group 2", lvRefDate, '');

      //C007139.sn
      GetHeader;
      IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
        CurrencyCode := InvHeader."Currency Code";
        CurrencyFactor := InvHeader."Currency Factor";
      END ELSE BEGIN
        CurrencyCode := CredMemoHeader."Currency Code";
        CurrencyFactor := CredMemoHeader."Currency Factor";
      END;
      IF (CurrencyCode <> '') AND (Price <> 0) THEN
        Price := ROUND(CurrencyExchRate.ExchangeAmtLCYToFCY(0,'',"Posting Date",CurrencyCode,Price,CurrencyFactor,FALSE));
      //C007139.en

      CheckCostCompServOrderType;  //db, 19-05-10
      VALIDATE(Price);

      "Cost Type" := "Cost Type"::Material;
      VALIDATE("Shortcut Dimension 2 Code");

      IF ItemRec.GET("Item No.") THEN BEGIN
        ItemRec.TESTFIELD(Blocked,FALSE);
        CreateDim(
          DATABASE::Item,"Item No.",
          DimMgt.TypeToTableID3(1), "Account No.",
          DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo("Plant Type","Plant No."), //**4PS.n 19506
          DATABASE::"Plant Type","Plant Type",
          DATABASE::Job,"Project No.",                    //** 4PS 09-06-2010
          DATABASE::"Service Order","Service Order No.", //** 4PS 09-06-2010
          DATABASE::Location,"Location Code");
        VALIDATE(Text, ItemRec.Text);
      END;
      "Vendor Item No." := GetVendorItemNo;

      //M29056  sn
      IF "Trade Item" <> '' THEN BEGIN
        IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
        "Tariff No." := TradeItemRec."CBS Code";
        "Gross Weight" := TradeItemRec."Gross Weight";  // C006270.n
        "Net Weight" := TradeItemRec."Gross Weight";  // C006270.n
      END ELSE BEGIN
        IF "Basic Item" <> '' THEN BEGIN
          IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
          "Gross Weight" := BasicItemRec."Nett Weight"; // C006270.n
          "Net Weight" := BasicItemRec."Nett Weight"; // C006270.n
        END ELSE BEGIN
          IF "Item No." <> '' THEN BEGIN
            IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
            "Tariff No." := ItemRec."Tariff No.";
            "Gross Weight" := ItemRec."Gross Weight"; // C006270.n
            "Net Weight" := ItemRec."Net Weight"; // C006270.n
          END;
        END;
      END;
      //M29056 en
    END;

    PROCEDURE HandleLookupUnit@1210190016();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");

      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure Code") THEN BEGIN
        xRec := Rec; //db, 31-03-05: force update unit and avoid blanking price on new line
        VALIDATE("Unit of Measure Code", lvUnit);
      END;
    END;

    PROCEDURE CheckPlantAcqOrRent@1100485001() : Integer;
    VAR
      lvPlantSetupRec@1100485000 : Record 11012550;
    BEGIN
      IF ("Cost Component Plant" = '') THEN
        EXIT(0);

      IF ("Receiving Company" <> '') THEN
        lvPlantSetupRec.CHANGECOMPANY("Receiving Company");
      lvPlantSetupRec.GET;

      IF ("Cost Component Plant" = lvPlantSetupRec."Cost Component Acquisition") THEN
        EXIT(1);
      IF ("Cost Component Plant" = lvPlantSetupRec."Cost Component Rent") THEN
        EXIT(2);

      EXIT(0);
    END;

    PROCEDURE CheckFixedAssetPlantRelation@1210190010() : Boolean;
    VAR
      lvPlantSetup@1210190000 : Record 11012550;
      lvPlantTypeRec@1100485000 : Record 11012551;
    BEGIN
      IF ("Plant Type" = '') OR ("Plant No." = '') OR ("Cost Component Plant" = '') OR ("Receiving Company" <> '') THEN
        EXIT(FALSE);

      lvPlantTypeRec.GET("Plant Type");
      IF (lvPlantTypeRec."Rental Type" <> lvPlantTypeRec."Rental Type"::Rental) OR
         (NOT lvPlantTypeRec."Integration Fixed Assets")
      THEN
        EXIT(FALSE);

      lvPlantSetup.GET;
      IF NOT lvPlantSetup."Integration Fixed Assets" THEN
        EXIT(FALSE);
      IF lvPlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FillFixedAssetPlantRelation@1210190006() : Boolean;
    VAR
      lvPlantNumberRec@1210190001 : Record 11012552;
    BEGIN
      IF NOT CheckFixedAssetPlantRelation() THEN
        EXIT(FALSE);

      lvPlantNumberRec.GET("Plant Type", "Plant No.");
      lvPlantNumberRec.TESTFIELD("Fixed Asset");
      IF (Type <> Type::"Fixed Asset") THEN BEGIN
        Type := Type::"Fixed Asset";
      END;
      VALIDATE("FA Posting Type","FA Posting Type"::"Acquisition Cost");
      VALIDATE("Account No.", lvPlantNumberRec."Fixed Asset");
      Description := lvPlantNumberRec.Description;
      EXIT(TRUE);
    END;

    PROCEDURE GetTempApprovalLine@6504();
    BEGIN
      "Bal. Account No." := TempApprovalLine."Bal. Account No.";
      "Reason Code" := TempApprovalLine."Reason Code";
      "Source Code" := TempApprovalLine."Source Code";
      "Shortcut Dimension 1 Code" := TempApprovalLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := TempApprovalLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := TempApprovalLine."Dimension Set ID";
      "Posting Date" := TempApprovalLine."Posting Date";
      "Cost Component" := TempApprovalLine."Cost Component";
    END;

    LOCAL PROCEDURE GetFAPostingGroup@10();
    VAR
      LocalGLAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("Account No." = '') THEN
        EXIT;
      //**4PS.sn
      IF "Depreciation Book Code" = '' THEN
        "Depreciation Book Code" := FA.GetFA_MainDeprBook("Account No.",TRUE);
      //**4PS.en
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("Account No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      IF "FA Posting Type" = "FA Posting Type"::" " THEN
        "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
      FADeprBook.GET("Account No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
        FAPostingGr.TESTFIELD("Acquisition Cost Account");
        LocalGLAcc.GET(FAPostingGr."Acquisition Cost Account");
      END ELSE BEGIN
        FAPostingGr.TESTFIELD("Maintenance Expense Account");
        LocalGLAcc.GET(FAPostingGr."Maintenance Expense Account");
      END;
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
    END;

    LOCAL PROCEDURE CheckProjServPlantAllowed@1210190007();
    BEGIN
      //db, 05-05-14: C015019
      CASE CurrFieldNo OF
        FIELDNO("Service Order No."):
          BEGIN
            TESTFIELD("Project No.",'');
            TESTFIELD("Plant Type",'');
          END;
        FIELDNO("Project No."):
          BEGIN
            TESTFIELD("Service Order No.",'');
            TESTFIELD("Plant Type",'');
          END;
        FIELDNO("Plant Type"):
          BEGIN
            TESTFIELD("Project No.",'');
            TESTFIELD("Service Order No.",'');
          END;
      END;
    END;

    PROCEDURE AccountDescription@1210190011() : Text[50];
    BEGIN
      IF ("Account No." = '') OR (Type <> Type::"Account (G/L)") THEN
        EXIT('');

      CheckCompanyIC;
      GLAcc.GET("Account No.");
      EXIT(GLAcc.Name);
    END;

    PROCEDURE GetPlantPostingGroup@1210190019();
    VAR
      lvTypeNo@1100485001 : Integer;
      lvModeInEx@1100485000 : Code[1];
    BEGIN
      IF "Plant Type" = '' THEN
        EXIT;

      CheckCompanyIC;
      PlantTypeRec.GET("Plant Type");

      IF "Plant No." = '' THEN BEGIN
        lvTypeNo := CheckPlantAcqOrRent();
        IF (lvTypeNo <> 0) THEN
          lvModeInEx := COPYSTR('IE', lvTypeNo, 1);  //* Internal/External
      END;
      "Posting Group" := PlantTypeRec.PlantPostingGrp("Plant No.", "Receiving Company", lvModeInEx);
      "Gen. Prod. Posting Group" := PlantTypeRec."Gen. Prod. Posting Group";
    END;

    LOCAL PROCEDURE GetGLSetup@45();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE FillSystemCreatedEntry@1100485000();
    BEGIN
      "System-Created Entry" :=
        ("Service Order No." <> '') OR
        ("Project No." <> '') OR
        ("Plant Type" <> '');

      CASE CurrFieldNo OF
        FIELDNO("Service Order No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Project No."):
          TESTFIELD("Plant Type",'');
        FIELDNO("Plant Type"):
          BEGIN
            TESTFIELD("Project No.",'');
            TESTFIELD("Service Order No.",'');
          END;
      END;
    END;

    PROCEDURE PrevExtRentedPlantInvoicedTo@1100485002() : Date;
    VAR
      lvPlantSetupRec@1100485000 : Record 11012550;
      lvPlantNoRec@1100485001 : Record 11012552;
    BEGIN
      IF ("Receiving Company" <> '') OR ("Plant Type" = '') OR ("Plant No." = '') OR ("Cost Component Plant" = '') THEN
        EXIT(0D);
      IF NOT lvPlantSetupRec.GET THEN
        EXIT(0D);
      IF ("Cost Component Plant" <> lvPlantSetupRec."Cost Component Rent") THEN
        EXIT(0D);

      IF NOT lvPlantNoRec.GET("Plant Type", "Plant No.") THEN
        EXIT(0D)
      ELSE
        EXIT(lvPlantNoRec."Ext. Rented Invoiced to");
    END;

    PROCEDURE GetVendorPreferenceAccountNo@1100485021();
    VAR
      lvVendRec@1100485000 : Record 23;
      lvPurchInvHeadRec@1100485001 : Record 122;
      lvPurchCrMemoHeadRec@1100485002 : Record 122;
      lvVendNo@1100485003 : Code[20];
    BEGIN
      //**4PS.n  Call C-005887
      //* only fill when account is empty, because preference account no. is a default value for the purchase line.
      IF ("Document No." <> '') AND (Type = Type::"Account (G/L)") AND ("Account No." = '') AND
         ("Project No." = '') AND ("Service Order No." = '') AND ("Plant Type" = '')
      THEN BEGIN
        lvVendNo := '';
        IF "Document Type" <> "Document Type"::"Credit Memo" THEN BEGIN
          IF lvPurchInvHeadRec .GET("Document No.") THEN
            lvVendNo := lvPurchInvHeadRec."Buy-from Vendor No."
        END ELSE BEGIN
          IF lvPurchCrMemoHeadRec .GET("Document No.") THEN
            lvVendNo := lvPurchCrMemoHeadRec."Buy-from Vendor No."
        END;
        IF lvVendNo <> '' THEN BEGIN
          IF lvVendRec.GET(lvVendNo) THEN BEGIN
            IF lvVendRec."Preference Account No." <> '' THEN
              VALIDATE("Account No.", lvVendRec."Preference Account No.");
          END;
        END;
      END;
    END;

    PROCEDURE CheckCostCompServOrderType@1100485019();
    VAR
      lvCostCompRec@1100485000 : Record 11012012;
    BEGIN
      //db, 19-05-10
      lvCostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", "Receiving Company", "Cost Type"-1,
        "Additional Cost (Service)");
    END;

    PROCEDURE CheckAdditionalCostService@1100525017(CalledBy@1100525000 : Integer);
    BEGIN
      //db, 19-05-10
      IF "Service Order No." = '' THEN EXIT;
      CheckCompanyIC;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CalledBy = FIELDNO("Service Order No.")) OR (CalledBy = FIELDNO("Cost Type")) THEN BEGIN
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          "Additional Cost (Service)" :=
            ServOrderRec.GetAdditionalCostService("Service Order No.","Shortcut Dimension 2 Code","Cost Type","Receiving Company");
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Additional Cost (Service)" <> xRec."Additional Cost (Service)") THEN BEGIN
          IF "Additional Cost (Service)" THEN
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Department Code (Other)")
          ELSE
            VALIDATE("Shortcut Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE ValidateAdditionalCost@1100525021();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
      SaveDesc@1100525002 : Text[50];
    BEGIN
      //db, 19-05-10
      SaveCostComp := "Cost Component";
      SaveDesc := Description;
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");
      Description := SaveDesc;
      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;

      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525020();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        "Additional Cost (Service)" := CostCompRec."Additional Cost (Service)";
      END;
    END;

    PROCEDURE CompletionControl@1100525000(InvoiceApprovalLine@1100525000 : Record 11012032;VAR ErrorCounter@1100525006 : Integer;VAR ErrorText@1100525002 : ARRAY [99] OF Text[250]);
    VAR
      PurchLineComplControl@1100525001 : Record 11020415;
      RecRef@1100525005 : RecordRef;
      FieldRef@1100525003 : FieldRef;
    BEGIN
      IF InvoiceApprovalLine."Document Type" = InvoiceApprovalLine."Document Type"::"Purchase Invoice" THEN
        PurchLineComplControl.SETFILTER(
          "Document Type",'%1|%2',PurchLineComplControl."Document Type"::All,PurchLineComplControl."Document Type"::Invoice)
      ELSE
        PurchLineComplControl.SETFILTER(
          "Document Type",'%1|%2',PurchLineComplControl."Document Type"::All,PurchLineComplControl."Document Type"::"Credit Memo");
      PurchLineComplControl.SETRANGE("Related To Table No.",DATABASE::"Invoice Approval Line");
      PurchLineComplControl.SETRANGE(Type,InvoiceApprovalLine.Type);
      IF InvoiceApprovalLine."Project No." <> '' THEN
        PurchLineComplControl.SETRANGE("Sub Module Type",PurchLineComplControl."Sub Module Type"::Project)
      ELSE
        IF InvoiceApprovalLine."Service Order No." <> '' THEN
          PurchLineComplControl.SETRANGE("Sub Module Type",PurchLineComplControl."Sub Module Type"::Service)
        ELSE
          IF InvoiceApprovalLine."Plant Type" <> '' THEN
            PurchLineComplControl.SETRANGE("Sub Module Type",PurchLineComplControl."Sub Module Type"::Plant)
          ELSE
            PurchLineComplControl.SETRANGE("Sub Module Type",PurchLineComplControl."Sub Module Type"::None);
      IF PurchLineComplControl.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(InvoiceApprovalLine);
          FieldRef := RecRef.FIELD(PurchLineComplControl."Field No.");
          IF (FORMAT(FieldRef) = '') OR (FORMAT(FieldRef) = '0') THEN BEGIN
            PurchLineComplControl.CALCFIELDS(PurchLineComplControl."Field Name");
            ErrorCounter := ErrorCounter + 1;
            IF ErrorCounter < 100 THEN
              ErrorText[ErrorCounter] := STRSUBSTNO(Text012,PurchLineComplControl."Field Name");
          END;
        UNTIL PurchLineComplControl.NEXT = 0;
    END;

    PROCEDURE LookupProjectNo@1100525004();
    VAR
      PageNo@1100525000 : Integer;
    BEGIN
      CheckCompanyIC;
      ProjRec."No." := "Project No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN
        IF ("Service Order No." = '') THEN
          VALIDATE("Project No.", ProjRec."No.");
    END;

    PROCEDURE LookupServiceOrderNo@1100525002();
    BEGIN
      CheckCompanyIC;
      ServOrderRec."No." := "Service Order No.";
      IF PAGE.RUNMODAL(0, ServOrderRec) = ACTION::LookupOK THEN BEGIN
        xRec."Service Order No." := '';  //db, 07-06-10: M19676
        CurrFieldNo := FIELDNO("Service Order No.");  //If this function is called from formfield then CurrFieldNo = 0
        VALIDATE("Service Order No.", ServOrderRec."No.");
      END;
    END;

    PROCEDURE OnLookupPlantType@1100525034(EditableMode@1100525000 : Boolean);
    BEGIN
      //**4PS
      CheckCompanyIC;
      PlantTypeRec.Code := "Plant Type";
      IF NOT EditableMode THEN
        PAGE.RUNMODAL(0,PlantTypeRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0,PlantTypeRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Type", PlantTypeRec.Code);
      END;
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    BEGIN
      IF NOT DPA_IsActive THEN
        EXIT;

      IF "Shortcut Dimension 1 Code" <> '' THEN
        VALIDATE("Shortcut Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012032) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012032');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimMgt@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimMgt.CheckDepartmAuthWithFilterType(
        DATABASE::"Invoice Approval Line", "Shortcut Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Shortcut Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Shortcut Dimension 1 Code");
    END;

    PROCEDURE LookupShortcutDimension1Code@1210190005(VAR Text@1210190000 : Text[1024]) : Boolean;
    VAR
      DimensionValue@1210190001 : Record 349;
      lvCompName@1210190002 : Text[50];
    BEGIN
      CheckCompanyIC;
      //M 30156 sn
      IF "Receiving Company" <> '' THEN
        lvCompName := "Receiving Company"
      ELSE
        lvCompName := COMPANYNAME;
      DimensionValue.CHANGECOMPANY(lvCompName);
      //M 30156 en

      DimensionValue.Code := Text;
      DimensionValue.SETRANGE("Global Dimension No.", 1);

      IF PAGE.RUNMODAL(0, DimensionValue) = ACTION::LookupOK THEN BEGIN
        Text := DimensionValue.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupShortcutDimension2Code@1210190004(VAR Text@1210190000 : Text[1024]) : Boolean;
    VAR
      DimensionValue@1210190001 : Record 349;
      lvCompName@1210190002 : Text[50];
    BEGIN
      CheckCompanyIC;
      //M 30156 sn
      IF "Receiving Company" <> '' THEN
        lvCompName := "Receiving Company"
      ELSE
        lvCompName := COMPANYNAME;
      DimensionValue.CHANGECOMPANY(lvCompName);
      //M 30156 en

      DimensionValue.Code := Text;
      DimensionValue.SETRANGE("Global Dimension No.", 2);
      DimensionValue.SETRANGE("Project Filter", "Project No.");
      IF "Receiving Company" = '' THEN
        DimensionValue.SETRANGE("Company Filter")
      ELSE
        DimensionValue.SETRANGE("Company Filter", "Receiving Company");
      IF "Cost Type" <> "Cost Type"::" " THEN
        DimensionValue.SETRANGE("Cost Type", "Cost Type"-1)
      ELSE
        DimensionValue.SETFILTER("Cost Type", '<%1', DimensionValue."Cost Type"::Revenue);

      IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimensionValue) = ACTION::LookupOK THEN BEGIN
        Text := DimensionValue.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckDimensions@1100528300();
    VAR
      DimensionManagement@1100528303 : Codeunit 408;
      TableIdArr@1100528302 : ARRAY [10] OF Integer;
      NoArr@1100528301 : ARRAY [10] OF Code[20];
    BEGIN
      //DP00387 sn
      DimensionManagement.SetCompany("Receiving Company");

      IF (NOT DimensionManagement.CheckDimIDComb("Dimension Set ID")) THEN
        ERROR(DimensionManagement.GetDimCombErr);

      TableIdArr[1] := DimensionManagement.TypeToTableID3(Type);
      NoArr[1] := "Account No.";
      TableIdArr[2] := DATABASE::Job;
      NoArr[2] := "Project No.";
      IF NOT DimensionManagement.CheckDimValuePosting(TableIdArr,NoArr,"Dimension Set ID") THEN
        ERROR(DimensionManagement.GetDimValuePostingErr);

      DimensionManagement.SetCompany('');
      //DP00387 en

      //DP00387 so
      {FIXED see above,
      DimensionManagement.SetCompanyName("Receiving Company");

      DocumentDimension.SETRANGE("Table ID", DATABASE::"Invoice Approval Line");
      DocumentDimension.SETRANGE("Document No.", "Document No.");
      DocumentDimension.SETRANGE("Line No.", "Line No.");

      TempDocumentDimension.DELETEALL;
      TempDocumentDimension.RESET;
      CLEAR(TempDocumentDimension);

      DimensionManagement.CopyDocDimToDocDim(DocumentDimension,TempDocumentDimension);

      IF (NOT DimensionManagement.CheckDocDimComb(DocumentDimension)) THEN
        ERROR(DimensionManagement.GetDimCombErr);

      TableIdArr[1] := DimensionManagement.TypeToTableID3(Type);
      NoArr[1] := "Account No.";
      TableIdArr[2] := DATABASE::Job;
      NoArr[2] := "Project No.";
      IF (NOT DimensionManagement.CheckDocDimValuePosting(DocumentDimension, TableIdArr, NoArr)) THEN
        ERROR(DimensionManagement.GetDimValuePostingErr);

      DimensionManagement.SetCompanyName('');
      }
      //DP00387 eo
    END;

    PROCEDURE FillDefaultFscType@1100529000();
    BEGIN
      //*DP00129
      IF ("Shortcut Dimension 2 Code" = '') OR ("Project No."= '') THEN
        EXIT;
      DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, FALSE, '');
      IF NOT DimValRec."FSC Applicable" THEN
        EXIT;
      IF NOT ProjRec.GET("Project No.") THEN
        EXIT;
      IF ProjRec."FSC Type Code" <> '' THEN
        "FSC Type Code" :=  ProjRec."FSC Type Code";
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      //**4PS.n C004829
      TESTFIELD("Item No.");
      TESTFIELD(Quantity);
      ReservePurchInvApprLine.CallItemTracking(Rec);
    END;

    PROCEDURE QtyBase@1100529001() RetQty : Decimal;
    BEGIN
      //**4PS.n C004829
      RetQty := Quantity;
      IF ("Qty. per Unit of Measure" <> 0) AND ("Qty. per Unit of Measure" <> 1) THEN
        RetQty := ROUND((Quantity * "Qty. per Unit of Measure"), 0.00001);
    END;

    PROCEDURE ProjectDescrOtherCompany@1100528404();
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      //kkleermaker.n, 130902, C004024
      IF "Receiving Company" = '' THEN
        EXIT;

      "Project Description" := '';
      IF "Project No." <> '' THEN  BEGIN
        Job.CHANGECOMPANY("Receiving Company");
        IF Job.GET("Project No.") THEN
          "Project Description" := Job.Description;
      END;
    END;

    PROCEDURE ValidatePlantNo@1100525031();
    VAR
      PlantType@1100525000 : Record 11012551;
      PurchaseLine@1100525001 : Record 39;
      PlantSetup@1100525002 : Record 11012550;
    BEGIN
      //**4PS
      IF ("Document Type" = "Document Type"::"Purchase Invoice" ) OR ("Document Type" = "Document Type"::"Credit Memo") THEN
        IF ("Plant Type" <> '') AND ("Plant No." = '') THEN BEGIN
          PlantSetup.GET;
          IF PlantSetup."Posting on Unique Plant No." THEN
            IF PlantType.GET("Plant Type") THEN
              IF NOT PlantType.Bulk THEN
                IF PlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
                  TESTFIELD("Plant No.");
        END;
    END;

    LOCAL PROCEDURE GetVendorItemNo@1100528400() VendorItemNo : Text[20];
    VAR
      Item@1100528400 : Record 27;
      ItemVendor@1100528401 : Record 99;
      VendorNo@1100528402 : Code[20];
    BEGIN
      IF "Trade Item" <> '' THEN BEGIN
        VendorItemNo := "Trade Item";
        EXIT;
      END;

      IF "Item No." = '' THEN
        EXIT;
      IF NOT Item.GET("Item No.") THEN
        EXIT;

      VendorNo := GetBuyFromVendorNo;
      ItemVendor."Vendor No." := VendorNo;
      ItemVendor."Variant Code" := "Variant Code";
      Item.FindItemVend(ItemVendor, "Location Code");
      IF ItemVendor."Vendor Item No." <> '' THEN
        VendorItemNo := ItemVendor."Vendor Item No."
      ELSE
        IF (VendorNo = Item."Vendor No.") THEN
          VendorItemNo := Item."Vendor Item No.";
    END;

    LOCAL PROCEDURE GetBuyFromVendorNo@1100528402() BuyFromVendorNo : Code[20];
    VAR
      PurchInvHeader@1100528401 : Record 122;
      PurchCrMemoHdr@1100528400 : Record 124;
    BEGIN
      IF "Buy-from Vendor No." <> '' THEN BEGIN
        BuyFromVendorNo := "Buy-from Vendor No.";
        EXIT;
      END;

      IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
        IF PurchInvHeader.GET("Document No.") THEN
          BuyFromVendorNo := PurchInvHeader."Buy-from Vendor No.";
      END ELSE BEGIN
        IF PurchCrMemoHdr.GET("Document No.") THEN
          BuyFromVendorNo := PurchCrMemoHdr."Buy-from Vendor No.";
      END;
    END;

    PROCEDURE TestStatusOpen@1100528401();
    VAR
      PurchInvHeader@1100528400 : Record 122;
      PurchCrMemoHdr@1100528401 : Record 124;
    BEGIN
      IF "Document Type" = "Document Type"::"Purchase Invoice" THEN BEGIN
        IF PurchInvHeader.GET("Document No.") THEN
          PurchInvHeader.TESTFIELD("Status (Approval)", PurchInvHeader."Status (Approval)"::Open);
      END ELSE BEGIN
        IF PurchCrMemoHdr.GET("Document No.") THEN
          PurchCrMemoHdr.TESTFIELD("Status (Approval)", PurchCrMemoHdr."Status (Approval)"::Open);
      END;
    END;

    PROCEDURE EditConsentLines@1100528406();
    VAR
      PurchInvHeader@1100528401 : Record 122;
      PurchCrMemoHdr@1100528403 : Record 124;
      Type2@1100528400 : ' ,Project,Service Order';
      TypeNo@1100528402 : Code[20];
    BEGIN
      IF "Line No." = 0 THEN
        EXIT;

      CASE TRUE OF
        "Project No." <> '':
          BEGIN
            Type2 := Type2::Project;
            TypeNo := "Project No.";
          END;
        "Service Order No." <> '':
          BEGIN
            Type2 := Type2::"Service Order";
            TypeNo := "Service Order No.";
          END;
      END;
      CASE "Document Type" OF
        "Document Type"::"Purchase Invoice":
          IF PurchInvHeader.GET("Document No.") THEN
            PurchInvHeader.RunPageConsentLines("Line No.", Type2, TypeNo);
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN
            PurchCrMemoHdr.RunPageConsentLines("Line No.", Type2, TypeNo);
      END;
    END;

    BEGIN
    {
      4PS01 JD 10-10-07 Call 5091, Fill Element from cost object
      4PS02 HBK 03-08-2009 Added Field Supply No.

      db, 19-05-10: missing functions for service (additional cost - cost component);
    }
    END.
  }
}

