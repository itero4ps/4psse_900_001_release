OBJECT Table 11012038 Hour Accounting
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               VALIDATE(Week,Week);
               TESTFIELD("Employee No.");
               //"Delivery Date" := TODAY;
               //"Recorded By" := USERID;
               Received := TRUE;
               CheckPostedHours;
             END;

    OnModify=BEGIN
               "Recorded By" := USERID;
             END;

    OnDelete=BEGIN
               HourLineRec.SETRANGE(Year,Year);
               HourLineRec.SETRANGE(Week,Week);
               HourLineRec.SETRANGE("Employee No.","Employee No.");
               HourLineRec.DELETEALL(TRUE);
             END;

    OnRename=VAR
               lvProjHourAccHeadRec@1100485000 : Record 11020224;
             BEGIN
               VALIDATE(Week,Week);
               TESTFIELD("Employee No.");
               VALIDATE("Employee No.","Employee No."); //**4PS01.n
               CheckPostedHours;

               HourLineRec.SETRANGE(Year,xRec.Year);
               HourLineRec.SETRANGE(Week,xRec.Week);
               HourLineRec.SETRANGE("Employee No.",xRec."Employee No.");
               IF HourLineRec.FINDSET(TRUE, FALSE) THEN
                 REPEAT
                   //IF NOT HourLineRec.LineIsEditable THEN
                   //  ERROR('');
                   //* project-hour accounting not updated, remained with old values (year/week/employee).
                   //* Rename not allowed if connection.
                   IF HourLineRec."Connection No." <> 0 THEN
                     ERROR(Text007, HourLineRec.TABLECAPTION, HourLineRec."Line No.", lvProjHourAccHeadRec.TABLECAPTION);
                   HourLineRec2.TRANSFERFIELDS(HourLineRec);
                   HourLineRec2.Year := Year;
                   HourLineRec2.Week := Week;
                   HourLineRec2."Employee No." := "Employee No.";
                   HourLineRec2."Document No." := "Document No.";
                   HourLineRec2."Posting Date" := "Posting Date";
                   HourLineRec2.CheckPostingDate;
                   HourLineRec2.GetFixedEmployeeData;
                   HourLineRec2.CalcRateAndAmount;

                   HourLineRec2.SetRenameHeader(TRUE);
                   HourLineRec2.INSERT(TRUE);
                   HourLineRec.DELETE(TRUE);
                 UNTIL HourLineRec.NEXT = 0;

               //>>141104 ENH050
               UpdateDocumentDate;
               //<<141104 ENH050
             END;

    CaptionML=ENU=Hour Accounting;
    LookupPageID=Page11012039;
  }
  FIELDS
  {
    { 20  ;   ;Year                ;Integer       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO(Year) THEN //C014672
                                                                  TESTFIELD(Status, Status::Open);
                                                                Date.RESET;
                                                                Date.SETRANGE("Period Type",Date."Period Type"::Year);
                                                                Date.SETRANGE("Period No.",Year);
                                                                IF NOT Date.FINDFIRST THEN
                                                                  FIELDERROR(Year);

                                                                StartDateYear := Date."Period Start";
                                                                YearEndDate := Date."Period End";
                                                              END;

                                                   CaptionML=ENU=Year;
                                                   MinValue=1 }
    { 30  ;   ;Week                ;Integer       ;OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                IF Year = 0 THEN
                                                                  Year := DATE2DMY(TODAY, 3);
                                                                VALIDATE(Year,Year);
                                                                Date.RESET;
                                                                Date.SETRANGE("Period Type",Date."Period Type"::Week);
                                                                Date.SETRANGE("Period No.",Week);
                                                                Date.SETRANGE("Period Start",CALCDATE('<-3D>',StartDateYear),YearEndDate);
                                                                Date.SETRANGE("Period End",StartDateYear,CALCDATE('<+3D>',YearEndDate));
                                                                IF NOT Date.FINDFIRST THEN
                                                                  FIELDERROR(Week);

                                                                GetPostingDate(COMPANYNAME);
                                                                FillDocumentNo(COMPANYNAME);

                                                                IF ("Posting Date" <> xRec."Posting Date") OR
                                                                   ("Document No." <> xRec."Document No.") THEN
                                                                BEGIN
                                                                  HourLineRec.SETRANGE(Year, Year);
                                                                  HourLineRec.SETRANGE(Week, Week);
                                                                  HourLineRec.SETRANGE("Employee No.", "Employee No.");
                                                                  IF NOT HourLineRec.ISEMPTY THEN BEGIN    //**4PS02.sn
                                                                    HourLineRec.MODIFYALL("Posting Date", "Posting Date");
                                                                    HourLineRec.MODIFYALL("Document No.", "Document No.");
                                                                  END;
                                                                END;

                                                                VALIDATE("Employee No.","Employee No."); //**4PS01.n

                                                                //>>141104 ENH050
                                                                UpdateDocumentDate;
                                                                //<<141104 ENH050
                                                              END;

                                                   OnLookup=VAR
                                                              DateSelectionManagement@1100525000 : Codeunit 11130005;
                                                            BEGIN
                                                              DateSelectionManagement.GetWeekYear(Week, Year);
                                                              VALIDATE(Week);
                                                            END;

                                                   CaptionML=ENU=Week;
                                                   MinValue=1;
                                                   MaxValue=53 }
    { 39  ;   ;Supplying Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                              END;

                                                   CaptionML=ENU=Supplying Company }
    { 40  ;   ;Employee No.        ;Code20        ;TableRelation=IF (Supplying Company=FILTER('')) Employee.No.;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Employee No.") THEN
                                                                  //A validate will also be done at posting
                                                                  TESTFIELD(Status, Status::Open);
                                                                IF "Employee No." <> '' THEN BEGIN
                                                                  FillEmployeeRelatedFields;

                                                                  //**4PS01.sn
                                                                  IF (EmplRec.Status <> EmplRec.Status::Active) AND (Week <> 0) THEN BEGIN
                                                                    IF Year = 0 THEN Year := DATE2DMY(TODAY, 3);
                                                                    VALIDATE(Year,Year);
                                                                    Date.RESET;
                                                                    Date.SETRANGE("Period Type",Date."Period Type"::Week);
                                                                    Date.SETRANGE("Period No.",Week);
                                                                    Date.SETRANGE("Period Start",CALCDATE('<-3D',StartDateYear),YearEndDate);
                                                                    Date.SETRANGE("Period End",StartDateYear,CALCDATE('<+3D>',YearEndDate));
                                                                    IF Date.FINDFIRST THEN BEGIN
                                                                      IF (EmplRec."Termination Date" < Date."Period Start") AND (EmplRec."Termination Date" <> 0D) THEN
                                                                        ERROR(Text005, EmplRec."Termination Date", EmplRec."No.")
                                                                      ELSE BEGIN
                                                                        IF (EmplRec."Inactive Date" < Date."Period Start") AND (EmplRec."Inactive Date" <> 0D) AND (NOT gSuppressMess) THEN
                                                                          IF (("Employee No." <> xRec."Employee No.") AND (CurrFieldNo = FIELDNO("Employee No."))) OR
                                                                             ((Week <> xRec.Week) AND (CurrFieldNo = FIELDNO(Week))) OR
                                                                             (CurrFieldNo = 0)
                                                                          THEN
                                                                            MESSAGE(Text004, EmplRec."Inactive Date", EmplRec."No.");
                                                                      END;
                                                                    END;
                                                                  END;
                                                                  //**4PS01.en
                                                                  IF EmplRec."Account Hours" = EmplRec."Account Hours"::"Not allowed" THEN
                                                                    EmplRec.FIELDERROR("Account Hours");
                                                                  IF "Employee No." <> xRec."Employee No." THEN
                                                                    FillCheckByWithDefaultValue;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 41  ;   ;Document No.        ;Code20        ;OnValidate=VAR
                                                                HourLineRec@1100485000 : Record 11012039;
                                                              BEGIN
                                                                HourLineRec.SETRANGE(Year,Year);
                                                                HourLineRec.SETRANGE(Week,Week);
                                                                HourLineRec.SETRANGE("Employee No.","Employee No.");
                                                                HourLineRec.SETRANGE("Document No.",xRec."Document No.");
                                                                IF HourLineRec.FINDFIRST THEN
                                                                  HourLineRec.TESTFIELD("Document No.", "Document No.");
                                                              END;

                                                   CaptionML=ENU=Document No. }
    { 42  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date;
                                                   Editable=No }
    { 45  ;   ;First Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."First Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=First Name;
                                                   Editable=No }
    { 50  ;   ;Last Name           ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Last Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Last Name;
                                                   Editable=No }
    { 55  ;   ;Full Name           ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Full name;
                                                   Editable=No }
    { 70  ;   ;No. of Hour Lines   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Hour Accounting Line" WHERE (Year=FIELD(Year),
                                                                                                   Week=FIELD(Week),
                                                                                                   Employee No.=FIELD(Employee No.),
                                                                                                   Component Type=FILTER(Hours)));
                                                   CaptionML=ENU=No. of Hour Lines;
                                                   Editable=No }
    { 75  ;   ;No. of Expense Lines;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Hour Accounting Line" WHERE (Year=FIELD(Year),
                                                                                                   Week=FIELD(Week),
                                                                                                   Employee No.=FIELD(Employee No.),
                                                                                                   Component Type=FILTER(Expenses)));
                                                   CaptionML=ENU=No. of Expense Lines;
                                                   Editable=No }
    { 80  ;   ;External            ;Boolean       ;CaptionML=ENU=External;
                                                   Editable=No }
    { 90  ;   ;Employer            ;Code20        ;TableRelation=IF (External=CONST(Yes)) Vendor.No.
                                                                 ELSE IF (External=CONST(No)) Employer.Code;
                                                   CaptionML=ENU=Employer;
                                                   Editable=No }
    { 100 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Department Code }
    { 110 ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                ProjectSetup.GET;
                                                                IF NOT ProjectSetup."Activation Hour Log Entries" THEN
                                                                  EXIT;

                                                                IF Status <> xRec.Status THEN BEGIN
                                                                  IF Status = Status::Released THEN BEGIN
                                                                    //>>IME-107
                                                                    //IF HoursLogEntrRec.GET(Year,Week,"Employee No.") THEN
                                                                    IF HoursLogEntrRec.GET(Year,Week,"Employee No.") THEN BEGIN
                                                                       IF HoursLogEntrLinesRec."Consentor Change" <> '' THEN BEGIN
                                                                          IF HoursLogEntrLinesRec."Employee No." = HoursLogEntrLinesRec."Consentor Change" THEN BEGIN
                                                                             HoursLogEntrLinesRec.Informed := TRUE;
                                                                             HoursLogEntrLinesRec.MODIFY;
                                                                          END;
                                                                       END;
                                                                      //<<IME-107
                                                                      EXIT;
                                                                     END
                                                                    ELSE BEGIN
                                                                      HoursLogEntrRec.INIT;
                                                                      HoursLogEntrRec.Year := Year;
                                                                      HoursLogEntrRec.Week := Week;
                                                                      HoursLogEntrRec."Employee No." := "Employee No.";
                                                                      HoursLogEntrRec."Full Name" := "Full Name";
                                                                      HoursLogEntrRec."Document No." := "Document No.";
                                                                      HoursLogEntrRec."Posting Date" := "Posting Date";
                                                                      HoursLogEntrRec.Status := Status;
                                                                      IF UserSetupRec.GET(USERID) THEN
                                                                        HoursLogEntrRec."Released By" := UserSetupRec."Employee No."
                                                                      ELSE
                                                                        ERROR(Text011,USERID);
                                                                      IF HoursLogEntrRec.INSERT THEN BEGIN
                                                                        HoursLogEntrLinesRec."Line No." := 1000;
                                                                        HoursLogEntrLinesRec.Year := Year;
                                                                        HoursLogEntrLinesRec.Week := Week;
                                                                        HoursLogEntrLinesRec."Employee No." := "Employee No.";
                                                                        HoursLogEntrLinesRec.Date := TODAY;
                                                                        HoursLogEntrLinesRec.Time := TIME;
                                                                        IF UserSetupRec.GET(USERID) THEN
                                                                          HoursLogEntrLinesRec."Consentor Change" := UserSetupRec."Employee No."
                                                                        ELSE
                                                                          ERROR(Text011,USERID);
                                                                        HoursLogEntrLinesRec.Field := Text020;
                                                                        HoursLogEntrLinesRec."Old Value" := Text021;
                                                                        HoursLogEntrLinesRec."New Value" := Text022;

                                                                        HoursLogEntrLinesRec.Informed := TRUE; //ENH032

                                                                        IF HoursLogEntrLinesRec.INSERT THEN;
                                                                      END;
                                                                      //>>IME-107
                                                                      IF HoursLogEntrLinesRec."Consentor Change" <> '' THEN BEGIN
                                                                         IF HoursLogEntrLinesRec."Employee No." = HoursLogEntrLinesRec."Consentor Change" THEN BEGIN
                                                                            HoursLogEntrLinesRec.Informed := TRUE;
                                                                            HoursLogEntrLinesRec.MODIFY;
                                                                         END;
                                                                      END;
                                                                      //<<IME-107

                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,,Released;
                                                   OptionString=Open,,Released;
                                                   Editable=No }
    { 111 ;   ;Released by         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Released by;
                                                   Editable=No }
    { 120 ;   ;Delivery Date       ;Date          ;CaptionML=ENU=Delivery Date }
    { 130 ;   ;Recorded By         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Recorded by }
    { 140 ;   ;Received            ;Boolean       ;OnValidate=BEGIN
                                                                IF Received THEN
                                                                  "Delivery Date" := TODAY;
                                                              END;

                                                   CaptionML=ENU=Received }
    { 150 ;   ;Consented           ;Boolean       ;CaptionML=ENU=Consented }
    { 160 ;   ;Check by Empl. No.  ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Check by Employee No.;
                                                   Editable=No }
    { 161 ;   ;Check by Empl. Full Name;Text100   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Check by Empl. No.)));
                                                   CaptionML=ENU=Check by Employee Full Name;
                                                   Editable=No }
    { 170 ;   ;Date Checked        ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                                IF "Date Checked" <> 0D THEN BEGIN
                                                                  CheckIfCheckingHoursIsAllowed;
                                                                  FillCheckByWithCurrentEmpl;
                                                                  // When hour accounting is checked, it must also be released.
                                                                  SetStatus(TRUE, "Check by Empl. No.");
                                                                END ELSE
                                                                  FillCheckByWithDefaultValue;
                                                              END;

                                                   CaptionML=ENU=Date Checked }
    { 180 ;   ;Trade Association   ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Trade Association" WHERE (No.=FIELD(Employee No.)));
                                                   TableRelation="Trade Association";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Trade Association;
                                                   Editable=No }
    { 200 ;   ;Day Filter          ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Day Filter;
                                                   OptionCaptionML=ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday";
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] }
    { 210 ;   ;Manager No.         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Manager No." WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Manager No.;
                                                   Editable=No }
    { 11128200;;Pre-Registration Hours;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Pre-Registration Hours" WHERE (No.=FIELD(Employee No.)));
                                                   Editable=No }
    { 11128201;;Document Date      ;Date          ;Description=ENH050 }
  }
  KEYS
  {
    {    ;Year,Week,Employee No.                  ;Clustered=Yes }
    {    ;Employee No.,Document No.,Year,Week      }
    {    ;Consented                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HourLineRec@11012000 : Record 11012039;
      HourLineRec2@11012001 : Record 11012039;
      Date@11012004 : Record 2000000007;
      EmplRec@1210190006 : Record 5200;
      ProjectSetup@1100485007 : Record 315;
      HoursLogEntrRec@1100485008 : Record 11072024;
      HoursLogEntrLinesRec@1100485009 : Record 11072025;
      UserSetupRec@1100485013 : Record 91;
      HumanResourcesSetup@1100528400 : Record 5218;
      EmployeeRec@1100485022 : Record 5200;
      CheckHourLine@1100485027 : Codeunit 11012003;
      StartDateYear@11012006 : Date;
      YearEndDate@11012007 : Date;
      Text004@1210190002 : TextConst 'ENU=Employee %2 inactive since %1';
      Text005@1210190003 : TextConst 'ENU=Employee %2 not employed since %1';
      Text006@1210190004 : TextConst 'ENU=Watch out, %1 %2 already has hours posted in %3 %4 %5 %6.';
      Text007@1100485003 : TextConst 'ENU=%1 %2 is created from %3.\Changes must be made in %3.';
      Text008@1100485000 : TextConst 'ENU=%1 not present in User Setup of %2.';
      Text009@1100525000 : TextConst 'ENU=You are no approver for employee %1.';
      gSuppressMess@1100485004 : Boolean;
      Text010@1100485006 : TextConst 'ENU=No hour accounting lines present, release not allowed.';
      Text011@1100485014 : TextConst 'ENU=No Employee No. found for UserID %1';
      Text020@1100485010 : TextConst 'ENU=Status';
      Text021@1100485011 : TextConst 'ENU=Open';
      Text022@1100485012 : TextConst 'ENU=Released';
      Text025@1100485023 : TextConst 'ENU=Number of hours (%1) different from norm hours (%2)';
      TotalNormHours@1100485029 : Decimal;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text11128000@1100285003 : TextConst 'ENU=Team Code must be filled for Hours and Expense Hours';
      Text11128230@1100285000 : TextConst 'ENU=Create consent lines?';
      "***ITERO***"@1100285001 : Integer;
      WageCompRec@1100285002 : Record 11012014;

    PROCEDURE CheckPostedHours@1210190002();
    VAR
      lPostedHourHeader@1210190000 : Record 11012084;
    BEGIN
      IF ("Employee No." = '') OR gSuppressMess THEN
        EXIT;

      lPostedHourHeader.SETRANGE(Year, Year);
      lPostedHourHeader.SETRANGE(Week, Week);
      lPostedHourHeader.SETRANGE("Employee No.", "Employee No.");
      IF lPostedHourHeader.FINDFIRST THEN
        MESSAGE(
          Text006, FIELDCAPTION("Employee No."), "Employee No.",
          FIELDCAPTION(Year), Year, FIELDCAPTION(Week), Week);
    END;

    PROCEDURE GetPostingDate@1210190000(CurrCompany@1100525000 : Text[30]);
    VAR
      PostingDateRec@1210190000 : Record 11020202;
    BEGIN
      "Posting Date" := DWY2DATE(5,Week,Year);

      IF CurrCompany <> COMPANYNAME THEN
        PostingDateRec.CHANGECOMPANY(CurrCompany);
      IF PostingDateRec.GET(Year, Week) THEN
        IF PostingDateRec."Posting Date" <> 0D THEN
          "Posting Date" := PostingDateRec."Posting Date";
    END;

    PROCEDURE FillDocumentNo@1100525000(CurrCompany@1100525000 : Text[30]);
    VAR
      ProjSetUp@1100525002 : Record 315;
      Period@1100525001 : Integer;
    BEGIN
      IF CurrCompany <> COMPANYNAME THEN
        ProjSetUp.CHANGECOMPANY(CurrCompany);
      ProjSetUp.GET;
      ProjSetUp.TESTFIELD("Hours Document Nos.");  //* Call 13942
      CASE ProjSetUp."Hour Document No." OF
        ProjSetUp."Hour Document No."::Week:
          Period := Week;
        ProjSetUp."Hour Document No."::"4-Weeks":
          Period := ((Week-1) DIV 4) + 1;
        ProjSetUp."Hour Document No."::Month:
          Period := DATE2DMY(CALCDATE('<-1D>',"Posting Date"),2);
      END;
      //"Document No." := STRSUBSTNO(Text002, Year, FORMAT(Period,2));  //* OLD Text002:ENU=Hours %1-%2;NLD=Uren %1-%2
      "Document No." := STRSUBSTNO('%1 %2-%3', ProjSetUp."Hours Document Nos.", Year, FORMAT(Period,2));  //* Call 13942
    END;

    PROCEDURE EmplDescrOtherCompany@1210190005();
    BEGIN
      IF "Supplying Company" = '' THEN
        EXIT;

      "First Name" := '';
      "Last Name" := '';
      "Full Name" := '';
      IF "Employee No." <> '' THEN BEGIN
        EmplRec.CHANGECOMPANY("Supplying Company");
        IF EmplRec.GET("Employee No.") THEN BEGIN
          "First Name" := EmplRec."First Name";
          "Last Name" := EmplRec."Last Name";
          "Full Name" := EmplRec."Full Name";
        END;
      END;
    END;

    PROCEDURE LookUpEmployee@1210190004(Editable@1100485000 : Boolean);
    BEGIN
      EmplRec.CHANGECOMPANY("Supplying Company");
      EmplRec."No." := "Employee No.";
      IF NOT Editable THEN
        PAGE.RUNMODAL(0, EmplRec)
      ELSE
        IF PAGE.RUNMODAL(0, EmplRec) = ACTION::LookupOK THEN
          VALIDATE("Employee No.", EmplRec."No.");
    END;

    PROCEDURE SetStatus@1100485001(lRelease@1100485000 : Boolean;lControllerNo@1100485002 : Code[20]);
    VAR
      lHourControllerRec@1100485001 : Record 11012008;
      lHourAccLineRec@1100485003 : Record 11012039;
      JobsSetup@1100528700 : Record 315;
      HourAccountingLine@1100285000 : Record 11012039;
      WageComponent@1100285001 : Record 11012014;
      Employee@1100285002 : Record 5200;
    BEGIN
      JobsSetup.GET;
      HumanResourcesSetup.GET;

      lHourControllerRec.SETRANGE("Employee No.", "Employee No.");
      IF (NOT lHourControllerRec.ISEMPTY) THEN BEGIN
        IF lControllerNo = '' THEN
          ERROR(Text008, FIELDNAME("Employee No."), USERID);
        IF NOT EmployeeIsSuperConsenter(lControllerNo) THEN BEGIN
          lHourControllerRec.SETRANGE("Controller No.", lControllerNo);
          IF lHourControllerRec.ISEMPTY THEN
            ERROR(Text009, "Employee No.");
        END;
      END;


      IF lRelease THEN BEGIN

      //>>131210 ITERO.DJ
        HourAccountingLine.SETRANGE(Year, Year);
        HourAccountingLine.SETRANGE(Week, Week);
        HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
        HourAccountingLine.SETFILTER("Team Code",'%1','');
        HourAccountingLine.SETFILTER(Type, '%1|%2',HourAccountingLine.Type::Project,HourAccountingLine.Type::Service);

        IF JobsSetup."Team Code mandatory for Hours" THEN
          IF HourAccountingLine.FINDSET(FALSE) THEN REPEAT
            IF Employee.GET(HourAccountingLine."Employee No.") THEN
              IF (NOT Employee.UTA) AND
                  WageComponent.GET(HourAccountingLine."Wage Component") THEN
                IF (WageComponent."Component Type" IN [WageComponent."Component Type"::Hours,WageComponent."Component Type"::"Expense hours"]) THEN
                  ERROR(Text11128000);
          UNTIL HourAccountingLine.NEXT=0;
        //<<131210

        IF Status <> Status::Released THEN BEGIN
          lHourAccLineRec.SETRANGE(Year, Year);
          lHourAccLineRec.SETRANGE(Week, Week);
          lHourAccLineRec.SETRANGE("Employee No.", "Employee No.");
          IF NOT lHourAccLineRec.FINDFIRST THEN
            ERROR(Text010);
          Status := Status::Released;
          "Released by" := USERID;

          // SESB.031 VKO 26.07.2013 >>
          Consented := FALSE;
          MODIFY(TRUE);
          // SESB.031 VKO 26.07.2013 <<
          // SESB.I031 ASH 11.07.2013 >>
          IF JobsSetup."Explode Hour Lines at Release" THEN
            ExplodeLines;
          // SESB.I031 ASH 11.07.2013 <<

          IF JobsSetup."Check Hours on Release" THEN
            CheckLines;
          IF HumanResourcesSetup."Consent Hours" THEN BEGIN
            //create hour consent lines
            CreateConsentLines(lHourAccLineRec);
          END;
          IF HumanResourcesSetup."Norm Check" THEN BEGIN
            EmployeeRec.GET("Employee No.");
            IF EmployeeRec."Account Hours" = EmployeeRec."Account Hours"::"Required according to Norm" THEN
              IF NOT CheckNormHoursConsent(lHourAccLineRec) THEN
                ERROR(Text025,TotalNormHours,EmployeeRec."Norm Hours"); //40 hours check
          END;
          IF HoursMustBeChecked("Employee No.", "Supplying Company") THEN
            TESTFIELD("Date Checked");

          UpdateLinesStatus; // SESB.031 VKO 26.07.2013
        END;
      END ELSE BEGIN
        Status := Status::Open;
        "Released by" := '';
        VALIDATE("Date Checked", 0D);

        // SESB.031 VKO 26.07.2013 >>
        Consented := FALSE;
        MODIFY(TRUE);
        // SESB.031 VKO 26.07.2013 <<

        IF HumanResourcesSetup."Consent Hours" THEN BEGIN
          DeleteHoursConsentLines(Rec);
          UpdateLinesStatus; // SESB.I031 ASH 12.07.2013
        END;
      END;

      // SESB.031 VKO 26.07.2013 >>
      // Moved
      // Consented := FALSE;
      // MODIFY(TRUE);
      // SESB.031 VKO 26.07.2013 <<
    END;

    PROCEDURE SetSuppressMessages@1100485000(lvSuppressMess@1100485000 : Boolean);
    BEGIN
      //* Only to inhibit MESSAGE so no ERROR
      gSuppressMess := lvSuppressMess;
    END;

    PROCEDURE FindRec@1100485002(ShowMyEMployeesOnly@1100485000 : Boolean;VAR Rec@1100485001 : Record 11012038;Which@1100485002 : Text[30];ControllerNo@1100485005 : Code[20]) : Boolean;
    VAR
      HourRec2@1100485007 : Record 11012038;
      Steps@1100485003 : Integer;
      FindNext@1100485008 : Integer;
      HourControllerRec@1100485004 : Record 11012008;
      Found@1100485006 : Boolean;
    BEGIN
      IF ShowMyEMployeesOnly THEN BEGIN
        HourRec2.COPY(Rec);
        IF Which = '+' THEN
          Steps := -1
        ELSE
          Steps := 1;
        IF HourRec2.FIND(Which) THEN
          REPEAT
            HourControllerRec.SETRANGE("Employee No.", HourRec2."Employee No.");
            HourControllerRec.SETRANGE("Controller No.", ControllerNo);
            Found := HourControllerRec.FINDFIRST;
            IF NOT Found THEN BEGIN
              FindNext := HourRec2.NEXT(Steps);
              IF (FindNext = 0) AND (Steps = 1) THEN BEGIN
                //At the end of the table reverse order
                FindNext := -1;
                Steps := -1;
              END;
            END;
          UNTIL (FindNext = 0) OR Found;
        IF Found THEN
          Rec := HourRec2;
        EXIT(Found);
      END ELSE
        EXIT(FIND(Which));
    END;

    PROCEDURE GetRec@1100485003(ShowMyEmployeesOnly@1100485003 : Boolean;VAR HourAccounting@1100485002 : Record 11012038;Steps@1100485001 : Integer;ControllerNo@1100485000 : Code[20]) : Integer;
    VAR
      HourAccounting2@1100485006 : Record 11012038;
      ActualSteps@1100485004 : Integer;
      Step@1100528400 : Integer;
      NoOneFound@1100485005 : Boolean;
    BEGIN
      IF ShowMyEmployeesOnly THEN BEGIN
        //kkleermaker.sn, 130911, C007383
        HourAccounting2.COPY(HourAccounting);
        // Example taken from pag5114
        IF Steps < 0 THEN
          Step := -1
        ELSE
          Step := 1;

        REPEAT
          IF HourAccounting2.NEXT(Step) <> 0 THEN BEGIN
            IF HourAccBelongsToController(HourAccounting2, ControllerNo) THEN BEGIN
              ActualSteps := ActualSteps + Step;
              IF Steps <> 0 THEN
                HourAccounting := HourAccounting2;
            END;
          END ELSE
            NoOneFound := TRUE;
        UNTIL (ActualSteps = Steps) OR NoOneFound;
        EXIT(ActualSteps);
        //kkleermaker.en
      END ELSE
        EXIT(NEXT(Steps));
    END;

    PROCEDURE FillEmployeeRelatedFields@1100485004();
    BEGIN
      IF "Employee No." = '' THEN
        EXIT;

      EmplRec.CHANGECOMPANY("Supplying Company");
      EmplRec.GET("Employee No.");
      External := EmplRec.External;
      Employer := EmplRec.Employer;
      "Department Code" := EmplRec."Global Dimension 1 Code";
    END;

    LOCAL PROCEDURE CheckLines@1100528700();
    VAR
      HourAccountingLine@1100528700 : Record 11012039;
      CheckHourLine@1100528701 : Codeunit 11012003;
    BEGIN
      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      IF HourAccountingLine.FINDSET THEN
        REPEAT
          CheckHourLine.RunCheck(HourAccountingLine);
        UNTIL HourAccountingLine.NEXT = 0;
    END;

    PROCEDURE CreateConsentLines@1100485005(HourLine@1100485002 : Record 11012039);
    VAR
      LvHourLines@1100485000 : Record 11012039;
      UserSetup@1100285001 : Record 91;
      Employee@1100285000 : Record 5200;
      HoursConsentLine@1100285500 : Record 11020437;
    BEGIN
      LvHourLines.SETRANGE(Year,HourLine.Year);
      LvHourLines.SETRANGE(Week,HourLine.Week);
      LvHourLines.SETRANGE("Employee No.",HourLine."Employee No.");

      // SESB.I031 ASH 16.07.2013 >>
      UserSetup.GET(USERID);
      IF Employee.GET(UserSetup."Employee No.") AND Employee."Super Consenter" THEN
        IF NOT CONFIRM(Text11128230) THEN BEGIN
          LvHourLines.MODIFYALL(Status,LvHourLines.Status::Processed);
          //>>IME-164
          ChangeConsentSuperUser(HourLine);
          //<<IME-164
          EXIT;
        END;
      // SESB.I031 ASH 16.07.2013 <<

      IF LvHourLines.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          LvHourLines.CreateHoursConsentLine;
        UNTIL LvHourLines.NEXT = 0
      END;
    END;

    LOCAL PROCEDURE DeleteHoursConsentLines@1100485007(HourAccounting@1100528400 : Record 11012038);
    VAR
      HoursConsentLine@1100485001 : Record 11020437;
    BEGIN
      HoursConsentLine.SETRANGE(Year, HourAccounting.Year);
      HoursConsentLine.SETRANGE(Week, HourAccounting.Week);
      HoursConsentLine.SETRANGE(Employee, HourAccounting."Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
      HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Hour Accounting");
      HoursConsentLine.SETRANGE(Consent,FALSE); // SESB.I031 ASH 12.07.2013
      //>>Itero 130917, undo 131005
      //>>IME-114
      //HoursConsentLine.SETRANGE(Denied,FALSE); // SESB.I031 ASH 16.07.2013
      HoursConsentLine.SETRANGE(Denied,FALSE); // SESB.I031 ASH 16.07.2013
      //<<IME-114
      //HoursConsentLine.SETRANGE(Denied,TRUE);
      IF HoursConsentLine.FINDFIRST THEN
      //<<Itero 130917
      HoursConsentLine.DELETEALL(TRUE);
    END;

    PROCEDURE CheckNormHoursConsent@1100485008(HourLine@1100485001 : Record 11012039) : Boolean;
    VAR
      LvHourLines@1100485000 : Record 11012039;
      ErrMsg@1100528700 : Text[1024];
    BEGIN
      LvHourLines.SETRANGE(Year,HourLine.Year);
      LvHourLines.SETRANGE(Week,HourLine.Week);
      LvHourLines.SETRANGE("Employee No.",HourLine."Employee No.");
      IF LvHourLines.FINDFIRST THEN
        EXIT(CheckHourLine.CheckNormPostingHours(LvHourLines, TRUE, FALSE, ErrMsg));
      EXIT(TRUE);
    END;

    PROCEDURE HasOpenHoursConsentLines@1100528400() : Boolean;
    VAR
      HoursConsentLine@1100528400 : Record 11020437;
    BEGIN
      HoursConsentLine.SETRANGE(Year, Year);
      HoursConsentLine.SETRANGE(Week, Week);
      HoursConsentLine.SETRANGE(Employee, "Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
      HoursConsentLine.SETRANGE(Consent, FALSE);
      HoursConsentLine.SETRANGE(Denied, FALSE);
      HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Hour Accounting");
      EXIT(NOT HoursConsentLine.ISEMPTY);
    END;

    PROCEDURE SuperConsentHoursConsentLines@1100528401();
    VAR
      HoursConsentLine@1100528400 : Record 11020437;
    BEGIN
      HoursConsentLine.SETRANGE(Year, Year);
      HoursConsentLine.SETRANGE(Week, Week);
      HoursConsentLine.SETRANGE(Employee, "Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
      HoursConsentLine.SETRANGE(Consent, FALSE);
      HoursConsentLine.SETRANGE(Denied, FALSE);
      HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Hour Accounting");
      IF HoursConsentLine.FINDSET THEN
        REPEAT
          HoursConsentLine.SuperConsentNormalLine;
        UNTIL HoursConsentLine.NEXT = 0;
      GET(Year, Week, "Employee No."); //Refresh Rec because field Consented may have been changed.
    END;

    LOCAL PROCEDURE FillCheckByWithDefaultValue@1100528404();
    VAR
      Employee@1100528401 : Record 5200;
      JobsSetup@1100528400 : Record 315;
    BEGIN
      TESTFIELD("Date Checked", 0D);
      JobsSetup.GET;
      IF JobsSetup."Check Hours" AND ("Supplying Company" = '') THEN BEGIN
        Employee.GET("Employee No.");
        IF Employee."Check Hours" THEN
          "Check by Empl. No." := Employee."Manager No."
        ELSE
          "Check by Empl. No." := '';
      END ELSE
        "Check by Empl. No." := '';
    END;

    LOCAL PROCEDURE FillCheckByWithCurrentEmpl@1100528403();
    BEGIN
      "Check by Empl. No." := GetCurrentEmployeeNo;
    END;

    LOCAL PROCEDURE CheckIfCheckingHoursIsAllowed@1100528402();
    VAR
      CurrentEmployeeNo@1100528400 : Code[20];
      Employee@1100528401 : Record 5200;
    BEGIN
      CurrentEmployeeNo := GetCurrentEmployeeNo;
      IF "Check by Empl. No." = CurrentEmployeeNo THEN
        EXIT;

      Employee.GET(CurrentEmployeeNo);
      IF Employee."Super Consenter" THEN
        EXIT
      ELSE
        TESTFIELD("Check by Empl. No.", CurrentEmployeeNo);
    END;

    LOCAL PROCEDURE GetCurrentEmployeeNo@1100528405() : Code[20];
    VAR
      UserSetup@1100528400 : Record 91;
    BEGIN
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Employee No.");
      EXIT(UserSetup."Employee No.");
    END;

    LOCAL PROCEDURE HoursMustBeChecked@1100528406(EmployeeNo@1100528400 : Code[20];SupplyingCompany@1100409000 : Text[30]) : Boolean;
    VAR
      JobsSetup@1100528401 : Record 315;
      Employee@1100528402 : Record 5200;
    BEGIN
      JobsSetup.GET;
      IF JobsSetup."Check Hours" AND (SupplyingCompany = '') THEN BEGIN
        Employee.GET(EmployeeNo);
        EXIT(Employee."Check Hours");
      END;
    END;

    LOCAL PROCEDURE EmployeeIsSuperConsenter@1100528704(EmployeeNo@1100528700 : Code[20]) : Boolean;
    VAR
      Employee@1100528701 : Record 5200;
    BEGIN
      Employee.GET(EmployeeNo);
      EXIT(Employee."Super Consenter")
    END;

    PROCEDURE LinesHaveBeenRefreshed@1100525003() : Boolean;
    VAR
      HourAccountingLine@1100525000 : Record 11012039;
    BEGIN
      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      HourAccountingLine.SETRANGE("Registration Day", 0);
      EXIT(HourAccountingLine.ISEMPTY);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    LOCAL PROCEDURE HourAccBelongsToController@1100528407(HourAccounting@1100528400 : Record 11012038;ControllerNo@1100528401 : Code[20]) : Boolean;
    VAR
      HourController@1100528402 : Record 11012008;
    BEGIN
      //kkleermaker, 130911, C007383
      HourController.SETRANGE("Employee No.", HourAccounting."Employee No.");
      HourController.SETRANGE("Controller No.", ControllerNo);
      EXIT(NOT HourController.ISEMPTY);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012038) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012038');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Hour Accounting", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE ExplodeLines@1100294000();
    VAR
      HourLine@1100294000 : Record 11012039;
      TempHourLine@1100294001 : TEMPORARY Record 11012039;
      HourCommentLine@1100294005 : Record 11128234;
      TempHourCommentLine@1100294004 : TEMPORARY Record 11128234;
      HoursConsentLine@1100294007 : Record 11020437;
      TempHoursConsentLine@1100294008 : TEMPORARY Record 11020437;
      RecRef@1100294006 : RecordRef;
      LineNo@1100294002 : Integer;
      DayNo@1100294003 : Integer;
      i@1100294009 : Integer;
    BEGIN
      // SESB.I031 ASH 11.07.2013 >>
      HourLine.SETRANGE(Year,Year);
      HourLine.SETRANGE(Week,Week);
      HourLine.SETRANGE("Employee No.","Employee No.");
      HoursConsentLine.SETRANGE(Year, Year);
      HoursConsentLine.SETRANGE(Week, Week);
      HoursConsentLine.SETRANGE(Employee, "Employee No.");
      HoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);

      IF HourLine.FINDSET THEN
        REPEAT
          HourLine.CALCFIELDS("Component Type");
          IF TempHourLine.FINDLAST THEN
            LineNo := TempHourLine."Line No." + 10000
          ELSE
            LineNo := 10000;

          HoursConsentLine.SETRANGE("Line No.", HourLine."Line No.");
          IF HoursConsentLine.FINDSET THEN
            REPEAT
              TempHoursConsentLine := HoursConsentLine;
              TempHoursConsentLine."Line No." := LineNo;
              TempHoursConsentLine.INSERT;
            UNTIL HoursConsentLine.NEXT = 0;

          RecRef.GETTABLE(HourLine);
          HourCommentLine.SETRANGE("Table Name", HourCommentLine."Table Name"::"Hour Accounting Line");
          HourCommentLine.SETRANGE("Record ID", RecRef.RECORDID);

          IF HourLine."Component Type" IN [HourLine."Component Type"::Hours,HourLine."Component Type"::"Expense hours"] THEN BEGIN
            // SESB.I038 VKO 07.08.2013 >>
            CASE HourLine."Component Type" OF
              HourLine."Component Type"::Hours:
                i := 1;
              HourLine."Component Type"::"Expense hours":
      //>>4PSSE, 130919, email from Ward
                //i := 0;
                i := 1;
      //<<4PSSE, 130919
            END;
            // SESB.I038 VKO 07.08.2013 >>
            FOR DayNo := i TO 7 DO BEGIN
              TempHourLine := HourLine;
              //>>4PSSE, 130919, email from Ward
              // //SESB.I038 VKO 07.08.2013 >>
              //TempHourLine.Quantity := 0;
              //TempHourLine.Amount := 0;
              //TempHourLine."Amount (LCY)" := 0;
              // //SESB.I038 VKO 07.08.2013 <<
              //<<4PSSE, 130919
              TempHourLine.Monday := 0;
              TempHourLine.Tuesday := 0;
              TempHourLine.Wednesday := 0;
              TempHourLine.Thursday := 0;
              TempHourLine.Friday := 0;
              TempHourLine.Saturday := 0;
              TempHourLine.Sunday := 0;
              CASE DayNo OF
                // SESB.I038 VKO 07.08.2013 >>
                0: // For amount in case of "Expense hours"
                  BEGIN
                    TempHourLine.Quantity := HourLine.Quantity;
                    TempHourLine.Amount := HourLine.Amount;
                    TempHourLine."Amount (LCY)" := HourLine."Amount (LCY)";
                    TempHourLine."Time From" := 0T;
                    TempHourLine."Time Until" := 0T;
                    TempHourLine.Duration := 0;
                  END;
                // SESB.I038 VKO 07.08.2013 <<
                1:
                  TempHourLine.Monday    := HourLine.Monday;
                2:
                  TempHourLine.Tuesday   := HourLine.Tuesday;
                3:
                  TempHourLine.Wednesday := HourLine.Wednesday;
                4:
                  TempHourLine.Thursday  := HourLine.Thursday;
                5:
                  TempHourLine.Friday    := HourLine.Friday;
                6:
                  TempHourLine.Saturday  := HourLine.Saturday;
                7:
                  TempHourLine.Sunday    := HourLine.Sunday;
              END;
              TempHourLine."Total Line" :=
                TempHourLine.Monday + TempHourLine.Tuesday + TempHourLine.Wednesday +
                TempHourLine.Thursday + TempHourLine.Friday + TempHourLine.Saturday + TempHourLine.Sunday;
              // SESB.I038 VKO 07.08.2013 >>

              //>>4PSSE, 130919, email from Ward
              //IF (TempHourLine."Total Line" <> 0) OR (TempHourLine.Quantity <> 0) THEN BEGIN
              IF (TempHourLine."Total Line" <> 0) THEN BEGIN
              //<<4PSSE, 130919, email from Ward

                // SESB.I038 VKO 07.08.2013 >>
                // TempHourLine."Amount (LCY)" := ROUND(TempHourLine."Total Line" * TempHourLine."Unit Cost (LCY)");
                // SESB.I038 VKO 07.08.2013 <<
                TempHourLine.CheckPostingDate;
                TempHourLine."Line No." := LineNo;
                //>>IME-046
                TempHourLine.CalcRateAndAmount;
                //<<IME-046
                TempHourLine.INSERT;
                LineNo += 10000;

                RecRef.GETTABLE(TempHourLine);
                IF HourCommentLine.FINDSET THEN
                  REPEAT
                    TempHourCommentLine := HourCommentLine;
                    TempHourCommentLine."Record ID" := RecRef.RECORDID;
                    TempHourCommentLine.INSERT(TRUE);
                  UNTIL HourCommentLine.NEXT = 0;
              END;
            END;

          END ELSE BEGIN
            TempHourLine := HourLine;
            TempHourLine."Line No." := LineNo;
            TempHourLine.INSERT;

            RecRef.GETTABLE(TempHourLine);
            IF HourCommentLine.FINDSET THEN
              REPEAT
                TempHourCommentLine := HourCommentLine;
                TempHourCommentLine."Record ID" := RecRef.RECORDID;
                TempHourCommentLine.INSERT(TRUE);
              UNTIL HourCommentLine.NEXT = 0;
          END;
          HourLine.DeleteLineComments;
        UNTIL HourLine.NEXT = 0;
      HourLine.DELETEALL;

      IF TempHourLine.FINDSET THEN
        REPEAT
          HourLine := TempHourLine;
          HourLine.INSERT;
        UNTIL TempHourLine.NEXT = 0;

      HoursConsentLine.SETRANGE("Line No.");
      HoursConsentLine.DELETEALL(TRUE);
      IF TempHoursConsentLine.FINDSET THEN
        REPEAT
          HoursConsentLine := TempHoursConsentLine;
          HoursConsentLine.INSERT(TRUE);
          //>>4PS-028
          HoursConsentLine.HourAccountingCheck(HoursConsentLine);
          //<<4PS-028
        UNTIL TempHoursConsentLine.NEXT = 0;

      IF TempHourCommentLine.FINDSET THEN
        REPEAT
          HourCommentLine := TempHourCommentLine;
          HourCommentLine.INSERT;
        UNTIL TempHourCommentLine.NEXT = 0;
      // SESB.I031 ASH 11.07.2013 <<
    END;

    PROCEDURE UpdateLinesStatus@1100294001();
    VAR
      HourAccountingLine@1100294001 : Record 11012039;
    BEGIN
      // SESB.I031 ASH 12.07.2013 >>
      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      IF HourAccountingLine.FINDSET THEN
        REPEAT
      //>>141103, ENH050, save last used date with day-value
          HourAccountingLine.UpdateActualDateOnTheLine;
          HourAccountingLine.MODIFY(FALSE);
      //<<141103, ENH050
          HourAccountingLine.UpdateLineStatus;
        UNTIL HourAccountingLine.NEXT = 0;
      // SESB.I031 ASH 12.07.2013 <<
    END;

    PROCEDURE ChangeConsentSuperUser@1100285500(pHourLine@1100285500 : Record 11012039);
    VAR
      lvHourAccountingLines@1100285501 : Record 11012039;
      lvHoursConsentLines@1100285502 : Record 11020437;
      lvHourAccounting@1100285503 : Record 11012038;
    BEGIN
      //Remove ConsentLines for HourLines that are changed
      lvHourAccountingLines.SETRANGE(Year           , pHourLine.Year);
      lvHourAccountingLines.SETRANGE(Week           , pHourLine.Week);
      lvHourAccountingLines.SETRANGE("Employee No." , pHourLine."Employee No.");
      lvHourAccountingLines.SETRANGE(Changed        , TRUE);
      //IF lvHourAccountingLines.FINDFIRST THEN REPEAT
      IF lvHourAccountingLines.FINDSET(FALSE) THEN REPEAT
         CLEAR(lvHoursConsentLines);
         lvHoursConsentLines.SETRANGE(Year       , lvHourAccountingLines.Year);
         lvHoursConsentLines.SETRANGE(Week       , lvHourAccountingLines.Week);
         lvHoursConsentLines.SETRANGE(Employee   , lvHourAccountingLines."Employee No.");
         lvHoursConsentLines.SETRANGE("Line No." , lvHourAccountingLines."Line No." );
         IF lvHoursConsentLines.FINDSET THEN
            lvHoursConsentLines.DELETEALL;
      UNTIL lvHourAccountingLines.NEXT = 0;

      //>>ITERO.DL 140731 post-test result
      CLEAR(lvHoursConsentLines);
      lvHoursConsentLines.SETRANGE(Year       , pHourLine.Year);
      lvHoursConsentLines.SETRANGE(Week       , pHourLine.Week);
      lvHoursConsentLines.SETRANGE(Employee   , pHourLine."Employee No.");
      lvHoursConsentLines.SETRANGE(Denied     , TRUE);
      IF lvHoursConsentLines.FINDSET THEN
         lvHoursConsentLines.DELETEALL;
      //<<ITERO.DL 140731

      //
      //TimeSheet Consented
      Consented := TRUE;
      MODIFY(TRUE);
    END;

    PROCEDURE UpdateDocumentDate@1100285503();
    BEGIN
      "Document Date":= DWY2DATE(5,Week,Year);
    END;

    BEGIN
    {
      SESB.I025 Automatic posting of hours
         KD 11.07.2013 Key Consented added

      SESB.I031 Work Flow - Approval of hours
         ASH 11.07.2013 Trigger ExplodeLines added
         ASH 12.07.2013 Trigger UpdateLinesStatus added
         ASH 12.07.2013 Trigger SetStatus changed
         ASH 12.07.2013 Trigger CreateConsentLines changed
         ASH 12.07.2013 Trigger DeleteHoursConsentLines changed
         VKO 26.07.2013 Trigger SetStatus changed

      SESB.I038 New Wage Component type
         VKO 07.08.2013 Trigger ExplodeLines changed

      Itero 130917
          DeleteHoursConsentLines changed

      131024
      //>>IME-046
      131024 Itero GH : Amount Hour incorrect in Project Controle when exploding



      //>>131210 ITERO.DJ IME082 Added control for Team Code
      //>>131213 ITERO.DJ IME082 Adjustment to control

      //>>IME-107 ITERO.GH 140213

      140226 ITERO.GH 4PS-028 Check with AutoConsent - field Consented in Hour Accounting Table With ITERO.DJ
      140414 IME-114          Reopen Setrange Statement
      14072x IME-164          ChangeConsentSuperUser(HourLine);
      141103 ITERO.DL ENH-050 Save actual date on posted hour line, change in export file to Agda, UpdateLinesStatus() modified
      141104 ITERO.WG ENH-050 Added field "Document Date", will be filled based on Year and Week
      160225 ITERO.DL IME424x repace 'findfirst then repeat' (causes locking) with 'findset(false) then repeat'
    }
    END.
  }
}

