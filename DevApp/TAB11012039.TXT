OBJECT Table 11012039 Hour Accounting Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012000=r,
                TableData 11012038=rm,
                TableData 11020231=r,
                TableData 11020253=r,
                TableData 11020259=r,
                TableData 11020269=r,
                TableData 11020295=r,
                TableData 11020315=r,
                TableData 11020322=r,
                TableData 11020323=r,
                TableData 11020324=r,
                TableData 11020325=r,
                TableData 11020355=r,
                TableData 11020356=r,
                TableData 11020357=r,
                TableData 11020358=r,
                TableData 11020359=r,
                TableData 11020360=r,
                TableData 11020361=r,
                TableData 11020362=r,
                TableData 11020363=r,
                TableData 11020364=r,
                TableData 11020365=r,
                TableData 11020366=r,
                TableData 11020390=r;
    OnInsert=BEGIN
               TestStatusOpen(FALSE);
               InitRecord;
               FillDocNoPostingDate(NOT RenamingHeader);
               UpdateCostControlStatus(UpdateAction::Insert);
               UpdateServHoursGanttChart(UpdateAction::Insert);
               CalcOverheadSurcharge;
               UpdatePreregistration;
             END;

    OnModify=VAR
               RecRef@1100485001 : RecordRef;
               xRecRef@1100485000 : RecordRef;
             BEGIN
               CheckPostingDate;
               UpdateCostControlStatus(UpdateAction::Modify);
               UpdateProjectHourLine(UpdateAction::Modify);
               UpdateServHoursGanttChart(UpdateAction::Modify);
               CalcRateAndAmount;
               CalcOverheadSurcharge;

               xRecRef.GETTABLE(xRec);
               RecRef.GETTABLE(Rec);
               LogModification(RecRef,xRecRef);
               UpdatePreregistration;
             END;

    OnDelete=BEGIN
               TestStatusOpen(FALSE);
               UpdateCostControlStatus(UpdateAction::Delete);
               UpdateProjectHourLine(UpdateAction::Delete);
               UpdateServHoursGanttChart(UpdateAction::Delete);
               DeleteSurcharge;  //db, 12-06-07
             END;

    OnRename=BEGIN
               UpdateProjectHourLine(UpdateAction::Rename);
             END;

    CaptionML=ENU=Hour Accounting Line;
    LookupPageID=Page11012277;
    DrillDownPageID=Page11012277;
  }
  FIELDS
  {
    { 10  ;   ;Year                ;Integer       ;CaptionML=ENU=Year }
    { 20  ;   ;Week                ;Integer       ;CaptionML=ENU=Week }
    { 25  ;   ;Supplying Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF ("Supplying Company" <> '') AND ("Receiving Company" <> '') THEN
                                                                  FIELDERROR("Supplying Company", STRSUBSTNO(Text005,FIELDCAPTION("Receiving Company"))); // 'Double IC' not allowed.
                                                              END;

                                                   CaptionML=ENU=Supplying Company }
    { 30  ;   ;Employee No.        ;Code20        ;TableRelation=IF (Supplying Company=FILTER('')) Employee;
                                                   OnValidate=VAR
                                                                EmployeeCostPrice@1100528200 : Record 11020315;
                                                              BEGIN
                                                                IF "Employee No." <> '' THEN BEGIN
                                                                  FillDocNoPostingDate(FALSE);
                                                                  GetFixedEmployeeData;
                                                                  //Companychange is done in GetFixedEmployeeData
                                                                  EmplRec.GET("Employee No.");
                                                                  IF (Element = '') AND (EmplRec.Element <> '') AND ("Project No." <> '') THEN
                                                                    Element := EmplRec.Element;
                                                                  IF ("Cost Object" = '') AND (EmplRec."Global Dimension 2 Code" <> '') THEN BEGIN
                                                                    VALIDATE("Cost Object", EmplRec."Global Dimension 2 Code");
                                                                    CALCFIELDS(Description);
                                                                  END;
                                                                  "Currency Code" := '';
                                                                  IF EmplRec.External THEN BEGIN
                                                                    EmployeeCostPrice.SETRANGE("Employee No.", "Employee No.");
                                                                    IF EmployeeCostPrice.FINDFIRST THEN
                                                                      "Currency Code" := EmployeeCostPrice."Currency Code";
                                                                    END;
                                                                END;

                                                                IF gFromHourAccByProj THEN
                                                                  CalcRateAndAmount;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 36  ;   ;Hour Set            ;Code10        ;TableRelation="Hour Set";
                                                   CaptionML=ENU=Hour Set }
    { 37  ;   ;Connection No.      ;Integer       ;CaptionML=ENU=Connection No. }
    { 40  ;   ;Line No.            ;Integer       ;TableRelation="Hour Accounting" WHERE (Year=FIELD(Year),
                                                                                          Week=FIELD(Week),
                                                                                          Employee No.=FIELD(Employee No.));
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Line No. }
    { 41  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No.;
                                                   Editable=No }
    { 42  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                CALCFIELDS("Component Type");
                                                                IF "Component Type" = "Component Type"::Expenses THEN
                                                                  IF NOT (PostingDateRec.GET(Year, Week) AND (PostingDateRec."Posting Date" <> 0D)) THEN
                                                                    IF ("Posting Date" < DWY2DATE(1,Week,Year)) OR ("Posting Date" > DWY2DATE(7,Week,Year)) THEN
                                                                      ERROR(Text012);
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 50  ;   ;Receiving Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                ICLicenceCu@1210190000 : Codeunit 11012780;
                                                              BEGIN
                                                                ICLicenceCu.CheckICEntry("Receiving Company");   //db, 01-07-04

                                                                IF ("Supplying Company" <> '') AND ("Receiving Company" <> '') THEN
                                                                  FIELDERROR("Receiving Company", STRSUBSTNO(Text005,FIELDCAPTION("Supplying Company"))); // 'Double IC' not allowed.

                                                                IF (xRec."Receiving Company" <> "Receiving Company") AND (Type = Type::Project) AND ("Connection No." <> 0) THEN
                                                                  FIELDERROR("Receiving Company", STRSUBSTNO(Text011, TABLECAPTION, HourAccProjHeader.TABLECAPTION));

                                                                IF (xRec."Receiving Company" <> "Receiving Company") THEN BEGIN
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Plant Rate Code" := '';
                                                                  "Cost Component Plant" := '';
                                                                  FillDepartmentCode;
                                                                  //db.sn, 17-04-15: C016272
                                                                  CheckCompanyIC;
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, "Project No.");
                                                                  IF DimValRec.Blocked OR (DimValRec.Code = '') THEN
                                                                    "Cost Object" := '';
                                                                  //db.en, 17-04-15: C016272
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Receiving Company }
    { 65  ;   ;Calculate Wage Costs;Option        ;CaptionML=ENU=Calculate Wage Costs;
                                                   OptionCaptionML=ENU=Fixed Rate,Actual Rate;
                                                   OptionString=Fixed Rate,Actual Rate }
    { 70  ;   ;Project No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job.No.;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen(FALSE);

                                                                CheckCompanyIC;
                                                                IF "Project No." <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Project);
                                                                  CheckProjectStatus;

                                                                  IF "Project No." <> xRec."Project No." THEN BEGIN
                                                                    IF "Cost Object" <> '' THEN
                                                                      VALIDATE("Cost Object")
                                                                    ELSE
                                                                      DimValRec.INIT;
                                                                    IF (DimValRec.Element = '') AND ("Employee No." <> '') THEN BEGIN
                                                                      EmplRec.GET("Employee No.");
                                                                      Element := EmplRec.Element;
                                                                    END;
                                                                    "Extension Contract" := ''; //C010848.n
                                                                  END;
                                                                END;
                                                                FillMainProject;

                                                                IF NOT ProjElemRec.GET("Project No.",Element) THEN
                                                                  VALIDATE(Element, '');

                                                                IF "Project No." <> '' THEN BEGIN
                                                                  "Project Description" := ProjRec.Description;
                                                                  "Project City" := ProjRec.City;
                                                                  END ELSE BEGIN
                                                                  "Project Description" := '';
                                                                  "Project City" := '';
                                                                END;

                                                                IF "Rental Unit" <> '' THEN BEGIN
                                                                  IF NOT RentalUnitRec.GET("Project No.", "Rental Unit") THEN
                                                                    "Rental Unit" := '';
                                                                END;

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupProjectNo;
                                                            END;

                                                   CaptionML=ENU=Project No. }
    { 71  ;   ;Element             ;Code20        ;TableRelation=IF (Receiving Company=FILTER(<>''),
                                                                     Type=CONST(Project)) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                //* C-017858 (16-11-2009) Now also element for plant (if plant location is linked to a project)
                                                                IF Element <> '' THEN BEGIN
                                                                  IF Type <> Type::Plant THEN BEGIN
                                                                    CheckCompanyIC;
                                                                    ElementFormat.FormatElem(Element,2,"Receiving Company");
                                                                    ProjElemRec.GET("Project No.",Element);
                                                                  END ELSE BEGIN
                                                                    TESTFIELD("Plant Location");
                                                                    IF NOT CheckPlantLocLinkedToProject() THEN
                                                                      FIELDERROR(Element, Text016);
                                                                    ElementFormat.FormatElem(Element,2,PlantLocProjectCompany);
                                                                    ProjElemRec.GET(PlantLocRec."Project No.",Element);
                                                                  END;
                                                                  ProjElemRec.CheckProjectElementBlocked;     //Call 6564
                                                                  "Element Description" := ProjElemRec.Description;
                                                                END ELSE
                                                                  "Element Description" := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              //* C-017858 (16-11-2009) Now also element for plant (if plant location is linked to a project)
                                                              IF Type <> Type::Plant THEN BEGIN
                                                                CheckCompanyIC;
                                                                ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                                ProjElemRec."Project No." := "Project No.";
                                                              END ELSE BEGIN
                                                                IF NOT CheckPlantLocLinkedToProject() THEN
                                                                  EXIT;
                                                                ProjElemRec.SETRANGE("Project No.", PlantLocRec."Project No.");
                                                                ProjElemRec."Project No." := PlantLocRec."Project No.";
                                                              END;
                                                              ProjElemRec.SETRANGE(Blocked, FALSE);
                                                              ProjElemRec.Element := Element;
                                                              IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
                                                                IF (Type = Type::Project) OR (Type = Type::Plant) THEN  //db, 25-07-05
                                                                  VALIDATE(Element, ProjElemRec.Element);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 72  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                                                 Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF "Cost Object" = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");
                                                                DimValRec.TESTFIELD(Blocked, FALSE);
                                                                IF "Project No." <> '' THEN BEGIN
                                                                  DimValRec.CALCFIELDS("Cost Object Project Related", "Proj. Rel. Cost Object Blocked");
                                                                  IF DimValRec."Cost Object Project Related" THEN
                                                                    DimValRec.TESTFIELD("Proj. Rel. Cost Object Blocked", FALSE);
                                                                END;
                                                                "Cost Type" := DimValRec."Cost Type";
                                                                IF NOT ("Cost Type" < "Cost Type"::Revenue) THEN  //* Also check when 'Receiving Company' is filled (see TableRelation)
                                                                  FIELDERROR("Cost Type");
                                                                "Cost Object Description" := DimValRec.Name;

                                                                IF (DimValRec."Wage Component" <> '') AND ("Wage Component" <> DimValRec."Wage Component") THEN
                                                                  VALIDATE("Wage Component", DimValRec."Wage Component");

                                                                IF DimValRec.Element <> '' THEN
                                                                  IF "Project No." <> '' THEN
                                                                    VALIDATE(Element, DimValRec.Element);

                                                                CheckCostType(TRUE);  //C005137.c
                                                                "Cost Component" := DimValRec."Cost Component";
                                                                CheckCostCompServOrderType;

                                                                //mg.so, 20-09-11: M27549
                                                                //CALCFIELDS("Component Type");
                                                                //IF ("Cost Type" = "Cost Type"::Plant) AND ("Wage Component" <> '') AND ("Component Type" = "Component Type"::Hours) THEN
                                                                //  VALIDATE("Wage Component",'')
                                                                //ELSE
                                                                //mg.eo, 20-09-11: M27549
                                                                CalcRateAndAmount;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostObject;
                                                            END;

                                                   CaptionML=ENU=Cost Object }
    { 73  ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component".Code WHERE (Component Type=FILTER(Hours|Expenses));
                                                   OnValidate=BEGIN
                                                                IF "Wage Component" <> '' THEN BEGIN
                                                                  WageCompRec.GET("Wage Component");
                                                                  CheckCostType(TRUE);  //C005137.c
                                                                  Overtime := WageCompRec.Overtime;
                                                                  Chargeable := WageCompRec.Chargeable;  //db, 27-07-05
                                                                  "Leave Type" := WageCompRec."Leave Type";
                                                                  "Leave Factor" := WageCompRec."Leave Factor";
                                                                END ELSE BEGIN
                                                                  Overtime := FALSE;
                                                                  Chargeable := FALSE;
                                                                  "Leave Type" := '';
                                                                  "Leave Factor" := 0;
                                                                END;

                                                                CALCFIELDS("Component Type",Description);
                                                                IF "Component Type" = "Component Type"::Hours THEN
                                                                  Quantity := 0
                                                                ELSE BEGIN
                                                                  Monday := 0;
                                                                  Tuesday := 0;
                                                                  Wednesday := 0;
                                                                  Thursday := 0;
                                                                  Friday := 0;
                                                                  Saturday := 0;
                                                                  Sunday := 0;
                                                                  "Total Line" := 0;
                                                                  Day := Day::" ";
                                                                  "Time From" := 0T;
                                                                  "Time Until" := 0T;
                                                                  Duration := 0;
                                                                END;

                                                                //mg.sn, 29-06-11: M27722
                                                                IF CompTypeEditable THEN
                                                                  IF "Registration Day" <> "Registration Day"::" " THEN
                                                                    "Posting Date" := DWY2DATE("Registration Day", Week, Year);
                                                                //mg.en, 29-06-11: M27722

                                                                CalcRateAndAmount;
                                                              END;

                                                   CaptionML=ENU=Wage Component }
    { 74  ;   ;Overtime            ;Boolean       ;FieldClass=Normal;
                                                   CaptionML=ENU=Overtime;
                                                   Editable=No }
    { 75  ;   ;Extension Contract  ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF "Extension Contract" = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                ExtRec.GET("Project No.", "Extension Contract");
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              ExtRec."Project No." := "Project No.";
                                                              ExtRec."Contract No." := "Extension Contract";
                                                              ExtRec.SETRANGE("Project No.", "Project No.");
                                                              IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                                                IF Type = Type::Project THEN  //db, 25-07-05
                                                                  VALIDATE("Extension Contract", ExtRec."Contract No.");
                                                            END;

                                                   CaptionML=ENU=Extension Contract }
    { 80  ;   ;Description         ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component".Description WHERE (Code=FIELD(Wage Component)));
                                                   CaptionML=ENU=Description;
                                                   Editable=No }
    { 85  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 110 ;   ;Monday              ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=ENU=Monday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 120 ;   ;Tuesday             ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=ENU=Tuesday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 130 ;   ;Wednesday           ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=ENU=Wednesday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 140 ;   ;Thursday            ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=ENU=Thursday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 150 ;   ;Friday              ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=ENU=Friday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 160 ;   ;Saturday            ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=ENU=Saturday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 170 ;   ;Sunday              ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=ENU=Sunday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 180 ;   ;Total Line          ;Decimal       ;CaptionML=ENU=Total Line;
                                                   DecimalPlaces=0:3;
                                                   Editable=No }
    { 190 ;   ;Total Monday        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Monday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(No),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Total Monday;
                                                   Editable=No }
    { 200 ;   ;Total Tuesday       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Tuesday WHERE (Year=FIELD(Year),
                                                                                                         Week=FIELD(Week),
                                                                                                         Employee No.=FIELD(Employee No.),
                                                                                                         Overtime=CONST(No),
                                                                                                         Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                         Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Total Tuesday;
                                                   Editable=No }
    { 210 ;   ;Total Wednesday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Wednesday WHERE (Year=FIELD(Year),
                                                                                                           Week=FIELD(Week),
                                                                                                           Employee No.=FIELD(Employee No.),
                                                                                                           Overtime=CONST(No),
                                                                                                           Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                           Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Total Wednesday;
                                                   Editable=No }
    { 220 ;   ;Total Thursday      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Thursday WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=CONST(No),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Total Thursday;
                                                   Editable=No }
    { 230 ;   ;Total Friday        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Friday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(No),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Total Friday;
                                                   Editable=No }
    { 240 ;   ;Total Saturday      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Saturday WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=CONST(No),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Total Saturday;
                                                   Editable=No }
    { 250 ;   ;Total Sunday        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Sunday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(No),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Total Sunday;
                                                   Editable=No }
    { 260 ;   ;Overtime Monday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Monday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(Yes),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Overtime Monday;
                                                   Editable=No }
    { 270 ;   ;Overtime Tuesday    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Tuesday WHERE (Year=FIELD(Year),
                                                                                                         Week=FIELD(Week),
                                                                                                         Employee No.=FIELD(Employee No.),
                                                                                                         Overtime=CONST(Yes),
                                                                                                         Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                         Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Overtime Tuesday;
                                                   Editable=No }
    { 280 ;   ;Overtime Wednesday  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Wednesday WHERE (Year=FIELD(Year),
                                                                                                           Week=FIELD(Week),
                                                                                                           Employee No.=FIELD(Employee No.),
                                                                                                           Overtime=CONST(Yes),
                                                                                                           Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                           Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Overtime Wednesday;
                                                   Editable=No }
    { 290 ;   ;Overtime Thursday   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Thursday WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=CONST(Yes),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Overtime Thursday;
                                                   Editable=No }
    { 300 ;   ;Overtime Friday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Friday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(Yes),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Overtime Friday;
                                                   Editable=No }
    { 310 ;   ;Overtime Saturday   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Saturday WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=CONST(Yes),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Overtime Saturday;
                                                   Editable=No }
    { 320 ;   ;Overtime Sunday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Sunday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(Yes),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Overtime Sunday;
                                                   Editable=No }
    { 340 ;   ;Overtime Hours      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                              Week=FIELD(Week),
                                                                                                              Employee No.=FIELD(Employee No.),
                                                                                                              Overtime=CONST(Yes),
                                                                                                              Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                              Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Overtime Hours;
                                                   Editable=No }
    { 360 ;   ;Component Type      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component"."Component Type" WHERE (Code=FIELD(Wage Component)));
                                                   CaptionML=ENU=Component Type;
                                                   OptionCaptionML=ENU=Hours,Days,Expenses;
                                                   OptionString=Hours,Days,Expenses;
                                                   Editable=No }
    { 370 ;   ;Overtime Surcharge %;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component"."Overtime Surcharge %" WHERE (Code=FIELD(Wage Component)));
                                                   CaptionML=ENU=Overtime Surcharge %;
                                                   Editable=No }
    { 380 ;   ;Posted Normal Hours ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Posted Hour Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=FILTER(No),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Posted Normal Hours;
                                                   Editable=No }
    { 390 ;   ;Normal Hours        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                              Week=FIELD(Week),
                                                                                                              Employee No.=FIELD(Employee No.),
                                                                                                              Overtime=CONST(No),
                                                                                                              Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                              Wage Component=FILTER(<>'')));
                                                   CaptionML=ENU=Normal Hours;
                                                   Editable=No }
    { 410 ;   ;Norm Hours          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Norm Hours" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Norm Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 420 ;   ;Norm Days           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Norm Days" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Norm Days;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 421 ;   ;Source Code         ;Code10        ;TableRelation="Source Code".Code;
                                                   CaptionML=ENU=Source Code }
    { 422 ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code".Code;
                                                   CaptionML=ENU=Reason Code }
    { 423 ;   ;Name                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Last Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Name;
                                                   Editable=No }
    { 424 ;   ;External            ;Boolean       ;FieldClass=Normal;
                                                   CaptionML=ENU=External;
                                                   Editable=No }
    { 425 ;   ;Employer            ;Code20        ;TableRelation=IF (External=CONST(Yes)) Vendor.No.
                                                                 ELSE IF (External=CONST(No)) Employer.Code;
                                                   CaptionML=ENU=Employer }
    { 426 ;   ;Full Name           ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Full Name;
                                                   Editable=No }
    { 430 ;   ;Comment             ;Text50        ;CaptionML=ENU=Comment }
    { 440 ;   ;Project Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Project Description;
                                                   Editable=No }
    { 445 ;   ;Project City        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.City WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Project City;
                                                   Editable=No }
    { 450 ;   ;Service Order No.   ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order".No.;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen(FALSE);

                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Order Description" := '';
                                                                  "Service Control Year" := 0;
                                                                  "Base Service Order No." := '';
                                                                END ELSE BEGIN
                                                                  CheckCompanyIC;
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServOrderRec.CheckStatus(1);
                                                                  "Service Source Type" := ServOrderRec."Source Type";

                                                                  IF GetCurrFieldNo() = FIELDNO("Service Order No.") THEN
                                                                    CheckAdditionalCostService;  //db, 03-02-10

                                                                  CheckCostCompServOrderType;
                                                                  "Service Order Description" := ServOrderRec.Description;
                                                                  //C001714
                                                                  //VALIDATE("Service Location No.", ServOrderRec."Service Location No.");
                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  ServiceLocationDescription;
                                                                  //
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  VALIDATE(Element);
                                                                  "Base Service Order No." := ServOrderRec."Base Service Order No.";

                                                                END;

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              ServOrderRec."No." := "Service Order No.";
                                                              IF PAGE.RUNMODAL(0, ServOrderRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Service THEN BEGIN
                                                                  xRec."Service Order No." := '';  //db, 07-06-10: M19676
                                                                  VALIDATE("Service Order No.", ServOrderRec."No.");
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Service Order No. }
    { 455 ;   ;Service Order Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Description WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=ENU=Service Order Description;
                                                   Editable=No }
    { 460 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   OnValidate=BEGIN
                                                                ServiceLocationDescription; // 33633.n
                                                              END;

                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 462 ;   ;Service Location Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Description WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=ENU=Service Location Description;
                                                   Editable=No }
    { 465 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   OnValidate=BEGIN
                                                                FillDepartmentCode;
                                                              END;

                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 490 ;   ;Try-out No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Try-out;
                                                   OnValidate=BEGIN
                                                                //C007286
                                                                TestStatusOpen(FALSE);
                                                                IF "Try-out No." = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                "Try-out".GET("Try-out No.");
                                                                //
                                                              END;

                                                   OnLookup=BEGIN
                                                              //C007286
                                                              CheckCompanyIC;
                                                              "Try-out".Code := "Try-out No.";
                                                              IF PAGE.RUNMODAL(0, "Try-out") = ACTION::LookupOK THEN
                                                                VALIDATE("Try-out No.", "Try-out".Code);
                                                              //
                                                            END;

                                                   CaptionML=ENU=Try-out No. }
    { 500 ;   ;Estimate No.        ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Estimate.No.;
                                                   OnValidate=BEGIN
                                                                //db.sn, 05-05-15: C014120
                                                                TestStatusOpen(FALSE);
                                                                IF "Estimate No." <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  EstRec.GET("Estimate No.");
                                                                END;
                                                                //db.en, 05-05-15: C014120
                                                                "Try-out No." := DetermineTryOut;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //db.sn, 05-05-15: C014120
                                                              CheckCompanyIC;
                                                              EstRec."No." := "Estimate No.";
                                                              IF PAGE.RUNMODAL(0, EstRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Estimate No.", EstRec."No.");
                                                              //db.en, 05-05-15: C014120
                                                            END;

                                                   CaptionML=ENU=Estimate No. }
    { 510 ;   ;Export Document No. ;Code20        ;CaptionML=ENU=Export Document No. }
    { 520 ;   ;Department Code Employee;Code20    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Global Dimension 1 Code" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Department Code Employee;
                                                   Editable=No }
    { 530 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo  = FIELDNO("Department Code") THEN BEGIN
                                                                  IF (Type <> Type::Indirect) OR
                                                                     ( ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) ) THEN BEGIN
                                                                    TESTFIELD("Department Code", xRec."Department Code"); //no change allowed
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Department Code }
    { 540 ;   ;Cost Code           ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Code";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen(FALSE);
                                                                IF "Cost Code" <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  CostCodeRec.GET("Cost Code");
                                                                  CostCodeRec.TESTFIELD(Blocked, FALSE);
                                                                  //C005137.sn
                                                                  IF ("Cost Object" <> '') AND (Type = Type::Indirect) THEN BEGIN
                                                                    IF NOT CheckCostType(FALSE) THEN BEGIN
                                                                      "Cost Object" := '';
                                                                      "Cost Type" := "Cost Type"::Labor;
                                                                    END;
                                                                  END;
                                                                  //C005137.en
                                                                //For M26221 deleted.
                                                                //  IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) AND (CostCodeRec."No Ledger Entry" ) THEN
                                                                //    FIELDERROR("Cost Code", STRSUBSTNO(Text017, CostCodeRec.FIELDCAPTION("No Ledger Entry"), CostCodeRec.TABLECAPTION));
                                                                  IF CostCodeRec.Component <> '' THEN
                                                                    VALIDATE("Wage Component", CostCodeRec.Component);
                                                                  FillDepartmentCode;
                                                                END;
                                                                CALCFIELDS("Cost Code Description");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostCode;
                                                            END;

                                                   CaptionML=ENU=Cost Code }
    { 545 ;   ;Cost Code Description;Text30       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cost Code".Description WHERE (Code=FIELD(Cost Code)));
                                                   CaptionML=ENU=Cost Code Description;
                                                   Editable=No }
    { 550 ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF (xRec.Type = Type::Project) AND NOT LineIsEditable THEN
                                                                    FIELDERROR(Type, STRSUBSTNO(Text011, TABLECAPTION, HourAccProjHeader.TABLECAPTION));
                                                                  CASE Type OF
                                                                    Type::Project:
                                                                      BEGIN
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                        "Cost Code" := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No.":= '';
                                                                        "Plant Rate Code" := '';
                                                                        "Cost Component Plant" := '';
                                                                        "Department Code" := '';
                                                                      END;
                                                                    Type::Service:
                                                                      BEGIN
                                                                        TESTFIELD("Supplying Company", '');
                                                                        "Project No." := '';
                                                                        "Main Project No." := '';
                                                                        "Extension Contract" := '';
                                                                        Element := '';
                                                                        "Rental Unit" := '';
                                                                        "Cost Code" := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No.":= '';
                                                                        "Plant Rate Code" := '';
                                                                        "Cost Component Plant" := '';
                                                                        "Department Code" := '';
                                                                      END;
                                                                    Type::Indirect:
                                                                      BEGIN
                                                                        "Project No." := '';
                                                                        "Main Project No." := '';
                                                                        "Extension Contract" := '';
                                                                        Element := '';
                                                                        "Rental Unit" := '';
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No.":= '';
                                                                        "Plant Rate Code" := '';
                                                                        "Cost Component Plant" := '';
                                                                        "Department Code" := '';
                                                                      END;
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        "Receiving Company" := '';
                                                                        "Project No." := '';
                                                                        "Extension Contract" := '';
                                                                        Element := '';
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                        "Cost Code" := '';
                                                                        //"Cost Object" := '';
                                                                        "Cost Type" := "Cost Type"::Labor;
                                                                        "Department Code" := '';
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Project,Service,Indirect,,Plant;
                                                   OptionString=Project,Service,Indirect,,Plant }
    { 555 ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=ENU=Unit Cost (LCY);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 556 ;   ;Purchase Unit Cost (LCY);Decimal   ;CaptionML=ENU=Purchase Unit Cost (LCY);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 557 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 558 ;   ;Purchase Unit Cost  ;Decimal       ;CaptionML=ENU=Purchase Unit Cost;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 560 ;   ;Amount (LCY)        ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528202 : Date;
                                                                CurrencyExchangeRateRec@1100528201 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                              BEGIN
                                                                CALCFIELDS("Component Type");
                                                                TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                IF "Amount (LCY)" <> 0 THEN BEGIN
                                                                  //IF (Type = Type::Plant) THEN    //*C019484.o
                                                                  //  TESTFIELD("Plant Location");  //*C019484.o
                                                                  IF Quantity = 0 THEN
                                                                    Quantity := 1;
                                                                  "Unit Cost (LCY)" := "Amount (LCY)"/Quantity;
                                                                  "Cost Price Found at" :='';

                                                                  DimValRec.CHANGECOMPANY("Receiving Company");
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, "Cost Object" <> '', '');
                                                                  "Precalc. Surcharge Rate" :=
                                                                    "Unit Cost (LCY)" * DimValRec."Precalc. Surcharge Hours %"/(100 + DimValRec."Precalc. Surcharge Hours %");
                                                                  "Precalc. Surcharge Expenses" := ROUND(Quantity * "Precalc. Surcharge Rate");
                                                                END;

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := TODAY;
                                                                  Amount :=
                                                                    ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
                                                                      1, "Project No.", CurrencyDate, "Currency Code", "Amount (LCY)",
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  Amount := ROUND("Amount (LCY)",Currency2."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Amount (LCY);
                                                   AutoFormatType=1 }
    { 561 ;   ;Amount              ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528202 : Date;
                                                                CurrencyExchangeRateRec@1100528201 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                              BEGIN
                                                                IF Quantity = 0 THEN
                                                                  Quantity := 1;
                                                                "Unit Cost" := Amount/Quantity;

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := TODAY;
                                                                  "Amount (LCY)" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
                                                                      1, "Project No.", CurrencyDate, "Currency Code" , Amount,
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Amount (LCY)" := ROUND(Amount,Currency2."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1 }
    { 565 ;   ;Surcharge Overtime  ;Decimal       ;CaptionML=ENU=Surcharge Overtime }
    { 570 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                //IF (Quantity <> 0) AND (Type = Type::Plant) THEN  //*C019484.o
                                                                //  TESTFIELD("Plant Location");                    //*C019484.o
                                                                CalcRateAndAmount;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 581 ;   ;Overhead Surcharge Project;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Surcharge"."Overhead Surcharge Project" WHERE (Year=FIELD(Year),
                                                                                                                                   Week=FIELD(Week),
                                                                                                                                   Employee No.=FIELD(Employee No.),
                                                                                                                                   Hour Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Overhead Surcharge Project;
                                                   Editable=No }
    { 591 ;   ;Overhead Surcharge Service;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Surcharge"."Overhead Surcharge Service" WHERE (Year=FIELD(Year),
                                                                                                                                   Week=FIELD(Week),
                                                                                                                                   Employee No.=FIELD(Employee No.),
                                                                                                                                   Hour Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Overhead Surcharge Service;
                                                   Editable=No }
    { 600 ;   ;Cost Plus Entry Created;Boolean    ;CaptionML=ENU=Cost Plus Entry Created;
                                                   Editable=No }
    { 610 ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                CheckAdditionalCostService;  //db, 03-02-10
                                                              END;

                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue }
    { 620 ;   ;IC Tag No.          ;Integer       ;CaptionML=ENU=IC Tag No. }
    { 625 ;   ;Mercash Tag No.     ;Code20        ;CaptionML=ENU=Mercash Tag No. }
    { 630 ;   ;Cost Object Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Global Dimension No.=FILTER(2),
                                                                                                    Code=FIELD(Cost Object)));
                                                   CaptionML=ENU=Cost Object Description;
                                                   Editable=No }
    { 640 ;   ;Chargeable          ;Boolean       ;CaptionML=ENU=Chargeable;
                                                   Editable=No }
    { 650 ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 660 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                ValidateCostComponent;
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 700 ;   ;Plant Location      ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Location";
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC();
                                                                IF "Plant Location" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  PlantLocRec.GET("Plant Location");
                                                                  PlantLocRec.CheckBlockFromOtherCompany(1, FALSE, TRUE, "Receiving Company");
                                                                END;

                                                                IF "Plant Location" <> xRec."Plant Location" THEN BEGIN  //* C-017858 (16-11-2009)
                                                                  IF Element <> '' THEN
                                                                    VALIDATE(Element, '');
                                                                  IF "Plant Rate Code" <> '' THEN BEGIN
                                                                    IF NOT PlantRateCodeRec.CheckPlantRateCode("Plant Location", "Plant Rate Code", FALSE, "Receiving Company") THEN BEGIN
                                                                      "Plant Rate Code" := '';
                                                                      GetPlantDefaultsFromPlantSetup();  //DP00485.n C009408
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantLocRec.Code := "Plant Location";
                                                              IF PAGE.RUNMODAL(0, PlantLocRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Plant THEN
                                                                  VALIDATE("Plant Location", PlantLocRec.Code);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Plant Location }
    { 710 ;   ;Plant Type          ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Type";
                                                   OnValidate=BEGIN
                                                                IF "Plant Type" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  CheckCompanyIC();
                                                                  PlantTypeRec.GET("Plant Type");
                                                                  GetPlantDefaultsFromPlantSetup();
                                                                END;

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantTypeRec.Code := "Plant Type";
                                                              IF PAGE.RUNMODAL(0, PlantTypeRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Plant THEN
                                                                  VALIDATE("Plant Type", PlantTypeRec.Code);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Plant Type }
    { 720 ;   ;Plant No.           ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                IF "Plant No." <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  TESTFIELD("Plant Type");
                                                                  CheckCompanyIC();
                                                                  PlantNoRec.GET("Plant Type", "Plant No.");
                                                                END;

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantNoRec.SETRANGE("Plant Type", "Plant Type");
                                                              PlantNoRec."Plant Type" := "Plant Type";
                                                              PlantNoRec."No." := "Plant No.";
                                                              IF PAGE.RUNMODAL(0, PlantNoRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Plant THEN
                                                                  VALIDATE("Plant No.", PlantNoRec."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Plant No. }
    { 725 ;   ;Plant Rate Code     ;Code10        ;OnValidate=BEGIN
                                                                IF "Plant Rate Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  //CheckCompanyIC();
                                                                  //PlantRateCodeRec.GET("Plant Rate Code");
                                                                  PlantRateCodeRec.CheckPlantRateCode("Plant Location", "Plant Rate Code", TRUE, "Receiving Company");
                                                                END;
                                                                CalcRateAndAmount;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //CheckCompanyIC;
                                                              //PlantRateCodeRec.Code := "Plant Rate Code";
                                                              //IF PAGE.RUNMODAL(0, PlantRateCodeRec) = ACTION::LookupOK THEN BEGIN
                                                              //  IF Type = Type::Plant THEN
                                                              //    VALIDATE("Plant Rate Code", PlantRateCodeRec.Code);
                                                              //END;
                                                              PlantRateCodeRec.Code := PlantRateCodeRec.LookupPlantRateCode("Plant Location", "Plant Rate Code", TRUE, "Receiving Company");
                                                              IF (Type = Type::Plant) AND (PlantRateCodeRec.Code <> "Plant Rate Code") THEN
                                                                VALIDATE("Plant Rate Code", PlantRateCodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Plant Rate Code;
                                                   Description=Plant Rate Code }
    { 750 ;   ;Cost Component Plant;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Component Plant";
                                                   OnValidate=BEGIN
                                                                IF "Cost Component Plant" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  CheckCompanyIC();
                                                                  PlantCostCompRec.GET("Cost Component Plant");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantCostCompRec.Code := "Cost Component Plant";
                                                              IF PAGE.RUNMODAL(0, PlantCostCompRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Plant THEN
                                                                  VALIDATE("Cost Component Plant", PlantCostCompRec.Code);
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Cost Component Plant }
    { 760 ;   ;Job Notice No.      ;Code20        ;CaptionML=ENU=Job Notice No. (iMOS);
                                                   Description=iMos }
    { 761 ;   ;Job Notice Entry    ;Integer       ;CaptionML=ENU=Job Notice Entry No. (iMOS);
                                                   Description=iMos }
    { 762 ;   ;Job Notice Entry Date;Date         ;CaptionML=ENU=Job Notice Entry Date (iMOS);
                                                   Description=iMos }
    { 763 ;   ;Split (iMOS)        ;Boolean       ;CaptionML=ENU=Split (iMOS);
                                                   Description=iMos }
    { 780 ;   ;Additional Cost (Service);Boolean  ;OnValidate=BEGIN
                                                                ValidateAdditionalCost;
                                                                FillDepartmentCode;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 790 ;   ;Service Source Type ;Option        ;InitValue=Other;
                                                   CaptionML=ENU=Service Source Type;
                                                   OptionCaptionML=ENU=Call,Contract,Other,Estimate;
                                                   OptionString=Call,Contract,Other,Estimate;
                                                   Editable=No }
    { 800 ;   ;Leave Type          ;Code10        ;TableRelation="Leave Type";
                                                   CaptionML=ENU=Leave Type;
                                                   Editable=No }
    { 810 ;   ;Leave Factor        ;Decimal       ;CaptionML=ENU=Leave Factor;
                                                   Editable=No }
    { 820 ;   ;Main Project No.    ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Main Project No. }
    { 900 ;   ;Precalc. Surcharge Rate;Decimal    ;CaptionML=ENU=Precalc. Surcharge Rate }
    { 901 ;   ;Precalc. Surcharge Expenses;Decimal;CaptionML=ENU=Precalc. Surcharge Expenses }
    { 940 ;   ;Rental Unit         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF "Rental Unit" = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                RentalUnitRec.GET("Project No.", "Rental Unit");
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              RentalUnitRec.SETRANGE("Project No.", "Project No.");
                                                              RentalUnitRec."Project No." := "Project No.";
                                                              RentalUnitRec."Rental Unit" := "Rental Unit";
                                                              IF PAGE.RUNMODAL(0, RentalUnitRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Rental Unit", RentalUnitRec."Rental Unit");
                                                            END;

                                                   CaptionML=ENU=Rental Unit }
    { 950 ;   ;Day                 ;Option        ;OnValidate=BEGIN
                                                                IF Day <> xRec.Day THEN BEGIN
                                                                  CASE xRec.Day OF
                                                                    xRec.Day::Monday:Monday := 0;
                                                                    xRec.Day::Tuesday:Tuesday := 0;
                                                                    xRec.Day::Wednesday:Wednesday := 0;
                                                                    xRec.Day::Thursday:Thursday := 0;
                                                                    xRec.Day::Friday:Friday := 0;
                                                                    xRec.Day::Saturday:Saturday := 0;
                                                                    xRec.Day::Sunday:Sunday := 0;
                                                                  END;
                                                                  "Total Line"  := 0;
                                                                  VALIDATE(Duration);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Day;
                                                   OptionCaptionML=ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday";
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] }
    { 960 ;   ;Time From           ;Time          ;OnValidate=BEGIN
                                                                FromTimeToDuration;
                                                                IF ("Time From" <> 0T) AND ("Time Until" = 0T) AND (Duration <> 0) THEN
                                                                  "Time Until" := "Time From" + ABS(Duration);
                                                              END;

                                                   CaptionML=ENU=Time From }
    { 970 ;   ;Time Until          ;Time          ;OnValidate=BEGIN
                                                                FromTimeToDuration;
                                                                IF ("Time From" = 0T) AND ("Time Until" <> 0T) AND (Duration <> 0) THEN
                                                                  "Time From" := "Time Until" - ABS(Duration);
                                                              END;

                                                   CaptionML=ENU=Time Until }
    { 980 ;   ;Duration            ;Duration      ;OnValidate=BEGIN
                                                                IF NOT (
                                                                   ((GetCurrFieldNo() = FIELDNO("Time From")) OR (GetCurrFieldNo() = FIELDNO("Time Until"))) AND
                                                                   ("Time From" <> 0T) AND ("Time Until" <> 0T)
                                                                  )
                                                                THEN BEGIN
                                                                  IF Duration < 0 THEN BEGIN
                                                                    IF "Time Until" <> 0T THEN
                                                                      "Time From" := "Time Until" - ABS(Duration)
                                                                    ELSE
                                                                      "Time From" := 0T;
                                                                  END ELSE BEGIN
                                                                    IF "Time From" <> 0T THEN
                                                                      "Time Until" := "Time From" + ABS(Duration)
                                                                    ELSE
                                                                      "Time Until" := 0T;
                                                                  END;
                                                                END;


                                                                CASE Day OF
                                                                  Day::" ": ERROR(Text009);
                                                                  Day::Monday: Monday := FromDurationToHours(Duration);
                                                                  Day::Tuesday: Tuesday := FromDurationToHours(Duration);
                                                                  Day::Wednesday: Wednesday := FromDurationToHours(Duration);
                                                                  Day::Thursday: Thursday := FromDurationToHours(Duration);
                                                                  Day::Friday: Friday := FromDurationToHours(Duration);
                                                                  Day::Saturday: Saturday := FromDurationToHours(Duration);
                                                                  Day::Sunday: Sunday := FromDurationToHours(Duration);
                                                                END;

                                                                TotalHours;

                                                                IF "Total Line" <> FromDurationToHours(Duration) THEN
                                                                  ERROR(Text008);

                                                                CheckTimeOverlap;
                                                              END;

                                                   CaptionML=ENU=Duration }
    { 990 ;   ;Employee Portal Document No.;Code20;CaptionML=ENU=Employee Portal Document No. }
    { 1010;   ;Service Control Year;Integer       ;CaptionML=ENU=Service Control Year;
                                                   Editable=No }
    { 1020;   ;Cost Price Found at ;Text250       ;CaptionML=ENU=Cost Price Found at;
                                                   Editable=No }
    { 1030;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=ENU=Element Description;
                                                   Editable=No }
    { 1040;   ;Base Service Order No.;Code20      ;TableRelation="Service Order".No.;
                                                   CaptionML=ENU=Base Service Order No.;
                                                   Editable=No }
    { 1050;   ;Origin Hours        ;Option        ;CaptionML=ENU=Origin Hours;
                                                   OptionCaptionML=ENU=" ,HourAcc. Site Manager";
                                                   OptionString=[ ,HrAccSiteMgt];
                                                   Editable=No }
    { 1060;   ;Origin Company      ;Text30        ;TableRelation=Company;
                                                   CaptionML=ENU=Origin Company;
                                                   Description=NAV Company for hours with another origin (only if origin is a NAV Company);
                                                   Editable=No }
    { 1100;   ;Registration Day    ;Option        ;CaptionML=ENU=Registration Day;
                                                   OptionCaptionML=ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday";
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] }
    { 1110;   ;Purchase Order No.  ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=ENU=Purchase Order No.;
                                                   Editable=No }
    { 1115;   ;Purchase Order Line No.;Integer    ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                   Document No.=FIELD(Purchase Order No.));
                                                   CaptionML=ENU=Purchase Order Line No.;
                                                   Editable=No }
    { 1120;   ;Start Time          ;Time          ;CaptionML=ENU=Start Time;
                                                   Description=DP00530;
                                                   Editable=No }
    { 1130;   ;End Time            ;Time          ;CaptionML=ENU=End Time;
                                                   Description=DP00530;
                                                   Editable=No }
    { 1140;   ;Start Kilometer     ;Integer       ;CaptionML=ENU=Start kilometer }
    { 1150;   ;End Kilometer       ;Integer       ;CaptionML=ENU=End Kilometer }
    { 1160;   ;Travel Expenses     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Wage Component" WHERE (Code=FIELD(Wage Component),
                                                                                             Component Type=CONST(Expenses),
                                                                                             Kilometer Expense=CONST(Yes)));
                                                   CaptionML=ENU=Travel Expenses;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Year,Week,Employee No.,Line No.         ;SumIndexFields=Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Total Line;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Year,Week,Employee No.,Overtime,Cost Type;
                                                   SumIndexFields=Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Total Line;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document No.,Employee No.               ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document No.,Employer,Employee No.      ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Year,Week,Project No.,Employee No.      ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Year,Week,Employee No.,Project No.      ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Cost Type,Cost Object,Posting Date;
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Element,Extension Contract,Cost Type,Cost Object,Posting Date;
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Service Location No.,Service Order No.,Service Source Type,Cost Component,Service Control Year,Posting Date;
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Connection No.                          ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Posting Date;
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document No.,Employee No.,Year,Week,Wage Component;
                                                   SumIndexFields=Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Total Line;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Cost Type,Cost Object,Service Source Type,Service Control Year,Posting Date;
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Cost Component,Cost Type,Cost Object,Service Source Type,Service Control Year,Posting Date;
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Cost Component,Cost Type,Cost Object,Posting Date;
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Cost Type,Cost Object  ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Cost Component         ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Element                ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Cost Component              ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Try-out No.                             ;SumIndexFields=Total Line;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.                            ;SumIndexFields=Total Line;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Service Order No.,Cost Type,Cost Object,Cost Component,Posting Date,Additional Cost (Service);
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Year,Week,Employee No.,Day,Time From    ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Base Service Order No.,Service Order No.,Cost Component,Posting Date;
                                                   SumIndexFields=Amount (LCY),Total Line,Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Year,Week,Employee No.,Registration Day ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Element,Type,Cost Type      ;SumIndexFields=Total Line;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Employer,Project No.,Service Order No.,Plant Type,Cost Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjectSetup@11012002 : Record 315;
      PlantSetupRec@1100485021 : Record 11012550;
      GLSetup@1100525008 : Record 98;
      GenJournal@11012003 : Record 80;
      HourAccRec@1210190007 : Record 11012038;
      EmplRec@1210190008 : Record 5200;
      DimValRec@1210190005 : Record 349;
      WageCompRec@1210190006 : Record 11012014;
      ICProjSetup@1210190019 : Record 315;
      ICServiceSetup@1210190009 : Record 11012800;
      EstRec@1100525012 : Record 11012151;
      ProjRec@1210190004 : Record 11072003;
      ProjElemRec@11012006 : Record 11012010;
      ExtRec@1210190018 : Record 11012004;
      ServOrderRec@1210190000 : Record 11012823;
      Text001@1210190021 : TextConst 'ENU=may not be of Cost Type %1';
      PlantLocRec@1100525004 : Record 11012554;
      PlantTypeRec@1100525000 : Record 11012551;
      PlantNoRec@1100525001 : Record 11012552;
      PlantRateCodeRec@1100525002 : Record 11020502;
      PlantCostCompRec@1100525003 : Record 11012575;
      UserSetupRec@1100485036 : Record 91;
      PostingDateRec@1210190020 : Record 11020202;
      CostCodeRec@1210190015 : Record 11012083;
      RentalUnitRec@1100485000 : Record 11012940;
      EmplPriceCostObjectRec@1100485003 : Record 11020259;
      HourAccProjHeader@1100485011 : Record 11020224;
      TempServOrderRec@1100485033 : TEMPORARY Record 11012823;
      TempJobRec@1100485022 : TEMPORARY Record 11072003;
      TempHourLinesRec@1100485019 : TEMPORARY Record 11012039;
      TempField@1100485017 : TEMPORARY Record 2000000041;
      PostedHourLineRec@1100485016 : Record 11012085;
      HourAccountingLineRec@1100485012 : Record 11012039;
      HoursAccntLinesRec@1100485018 : Record 11012039;
      ServiceLocation@1100525011 : Record 11012801;
      "Try-out"@1100525009 : Record 11012750;
      DimMgt@1210190003 : Codeunit 408;
      ElementFormat@1210190002 : Codeunit 11012022;
      Text002@1100485013 : TextConst 'ENU="%1 must be %2 in %3 %4=''%5'',%6=''%7'',%8=''%9''."';
      Text003@1210190022 : TextConst 'ENU=%1 %2 is created from %3.\Changes must be made in %3.';
      Text004@1210190023 : TextConst 'ENU=in combination with %1 %2 may not be of Cost Type %3';
      Text005@1210190024 : TextConst 'ENU=and %1 may not be filled both';
      Text007@1100485005 : TextConst 'ENU=Line is recorded on time, hour accounting via day not possible.';
      Text008@1100485006 : TextConst 'ENU=Line is not recorded on time, hour accounting via time not possible.';
      Text009@1100485007 : TextConst 'ENU=Give day first.';
      Text010@1100485004 : TextConst 'ENU=There is a time overlap on this day.';
      Text011@1100485010 : TextConst 'ENU=may not be modified, %1 is created from %2';
      Text012@1100485001 : TextConst 'ENU="Posting Date should be within the week. "';
      GanttChartMgt@1100525005 : Codeunit 11012037;
      UpdateAction@1100485009 : 'Insert,Modify,Delete,Rename';
      gFromHourAccByProj@1100485041 : Boolean;
      gCurrFieldNo@1100485040 : Integer;
      LineNo@1100485023 : Integer;
      Globaldim2code@1100485024 : Code[20];
      WageComp@1100485025 : Code[10];
      WeekDec@1100485026 : Decimal;
      CurrentYear@1100485028 : Integer;
      CurrentWeek@1100485029 : Integer;
      Jaargang@1100485034 : Date;
      JaargangTxt@1100485035 : Text[10];
      Text013@1100485037 : TextConst 'ENU=No valid Employee No. by this UserID (user setup)';
      Text015@1100485008 : TextConst 'ENU="Table %1 ; %2"';
      Text016@1100525006 : TextConst 'ENU=only allowed for Plant Hours if a project is linked to the plant location';
      TotalLineCaption@1100485038 : TextConst 'ENU=Total Line';
      AmountCaption@1100485039 : TextConst 'ENU=Amount';
      PlantLocProjectCompany@1100525007 : Text[30];
      RenamingHeader@1100485002 : Boolean;
      UpdateFromProjHourLine@1100525010 : Boolean;
      DPA_Management@1100525013 : Codeunit 11012783;

    PROCEDURE InitRecord@1210190009();
    BEGIN
      ProjectSetup.GET;
      ProjectSetup.TESTFIELD("Hours Journal Template");
      GenJournal.GET(ProjectSetup."Hours Journal Template");
      "Source Code" := GenJournal."Source Code";
      "Reason Code" := GenJournal."Reason Code";
      //"Connection No." := 0;  Not allowed here, moved to OnInsertRecord on form
      "Cost Plus Entry Created" := FALSE;
      "Employee Portal Document No." := '';
      "Origin Hours" := "Origin Hours"::" ";  //* C-019595
      "Origin Company" := '';  //* C-027056

      FillMainProject;
      GetFixedEmployeeData;
    END;

    PROCEDURE TotalHours@1();
    BEGIN
      "Total Line" := Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday;
      CalcRateAndAmount;
    END;

    PROCEDURE FillDocNoPostingDate@3(HardGet@1100485000 : Boolean);
    VAR
      HeaderExists@1100485001 : Boolean;
    BEGIN
      CLEAR(HourAccRec);
      IF HardGet THEN BEGIN
        HourAccRec.GET(Year,Week,"Employee No.");
        HeaderExists := TRUE;
      END ELSE
        HeaderExists := HourAccRec.GET(Year,Week,"Employee No.");

      IF HeaderExists THEN BEGIN
        "Document No." := HourAccRec."Document No.";
        IF "Employee No." <> '' THEN
          "Supplying Company" := HourAccRec."Supplying Company";
      END;

      CheckPostingDate;
    END;

    PROCEDURE CheckPostingDate@1210190004();
    BEGIN
      IF PostingDateRec.GET(Year, Week) THEN
        IF PostingDateRec."Posting Date" <> 0D THEN BEGIN
          "Posting Date" := PostingDateRec."Posting Date";
          EXIT;
        END;

      CALCFIELDS("Component Type");
      IF "Component Type" = "Component Type"::Expenses THEN
        VALIDATE("Posting Date") //In this case Posting Date is editable, so don't fill it automatically
      ELSE BEGIN
        IF (Monday = 0) AND (Tuesday = 0) AND (Wednesday = 0) AND
           (Thursday = 0) AND (Friday = 0) AND (Saturday = 0) AND (Sunday = 0) AND
           ("Posting Date" <> 0D) AND
           ("Posting Date" >= DWY2DATE(1,Week,Year)) AND ("Posting Date" <= DWY2DATE(7,Week,Year))
        THEN
          EXIT;  //* From BDA also worden ook zero lines created, these should be posted on BDA-hour date

        IF HourAccRec.GET(Year,Week,"Employee No.") THEN
          "Posting Date" := HourAccRec."Posting Date";

        IF Monday <> 0 THEN "Posting Date" := DWY2DATE(1,Week,Year);
        IF Tuesday <> 0 THEN "Posting Date" := DWY2DATE(2,Week,Year);
        IF Wednesday <> 0 THEN "Posting Date" := DWY2DATE(3,Week,Year);
        IF Thursday <> 0 THEN "Posting Date" := DWY2DATE(4,Week,Year);
        IF Friday <> 0 THEN "Posting Date" := DWY2DATE(5,Week,Year);
        IF Saturday <> 0 THEN "Posting Date" := DWY2DATE(6,Week,Year);
        IF Sunday <> 0 THEN "Posting Date" := DWY2DATE(7,Week,Year);
      END;
    END;

    PROCEDURE GetFixedEmployeeData@2();
    BEGIN
      CheckCompanyIC;
      IF EmplRec.GET("Employee No.") THEN BEGIN
        "Calculate Wage Costs" := EmplRec."Calculate Wage Costs";
        External := EmplRec.External;
        Employer := EmplRec.Employer;
      END;
    END;

    PROCEDURE CheckCompanyIC@32();
    BEGIN
      ICProjSetup.CHANGECOMPANY("Receiving Company");
      ProjRec.CHANGECOMPANY("Receiving Company");
      ProjElemRec.CHANGECOMPANY("Receiving Company");
      ExtRec.CHANGECOMPANY("Receiving Company");
      DimValRec.CHANGECOMPANY("Receiving Company");
      ServOrderRec.CHANGECOMPANY("Receiving Company");
      CostCodeRec.CHANGECOMPANY("Receiving Company");
      RentalUnitRec.CHANGECOMPANY("Receiving Company");
      PlantSetupRec.CHANGECOMPANY("Receiving Company");
      PlantLocRec.CHANGECOMPANY("Receiving Company");
      PlantTypeRec.CHANGECOMPANY("Receiving Company");
      PlantNoRec.CHANGECOMPANY("Receiving Company");
      PlantRateCodeRec.CHANGECOMPANY("Receiving Company");
      PlantCostCompRec.CHANGECOMPANY("Receiving Company");
      "Try-out".CHANGECOMPANY("Receiving Company"); //C007286
      EstRec.CHANGECOMPANY("Receiving Company");  //db, 05-05-14: C014120
      EmplRec.CHANGECOMPANY("Supplying Company");

      ICProjSetup.GET;
    END;

    PROCEDURE RefersToOtherCompany@1100525008() : Boolean;
    BEGIN
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE DetermineTryOut@1210190000() : Code[20];
    VAR
      TryOutRelationRec@1210190000 : Record 11012761;
    BEGIN
      TryOutRelationRec.CHANGECOMPANY("Receiving Company"); //C007286
      IF TryOutRelationRec.READPERMISSION THEN BEGIN
        TryOutRelationRec.SETCURRENTKEY("Project No.");
        TryOutRelationRec.SETRANGE("Project No.", "Project No.");
        IF TryOutRelationRec.FINDFIRST THEN
          EXIT(TryOutRelationRec."Try-out No.");

        TryOutRelationRec.CHANGECOMPANY(COMPANYNAME); //C007286
        TryOutRelationRec.SETCURRENTKEY("Estimate No.");
        TryOutRelationRec.SETRANGE("Estimate No.", "Estimate No.");
        IF TryOutRelationRec.FINDFIRST THEN
          EXIT(TryOutRelationRec."Try-out No.");
      END;
      EXIT('');
    END;

    PROCEDURE ProjDescrOtherCompany@1210190005();
    BEGIN
      IF "Receiving Company" = '' THEN
        EXIT;

      "Project Description" := '';
      "Project City" := '';
      "Service Order Description" := '';

      IF Type = Type::Project THEN BEGIN
        IF "Project No." = '' THEN EXIT;
        ProjRec.CHANGECOMPANY("Receiving Company");
        IF ProjRec.GET("Project No.") THEN BEGIN
          "Project Description" := ProjRec.Description;
          "Project City" := ProjRec.City;
        END;
      END;

      IF Type = Type::Service THEN BEGIN
        IF "Service Order No." = '' THEN EXIT;
        ServOrderRec.CHANGECOMPANY("Receiving Company");
        IF ServOrderRec.GET("Service Order No.") THEN
          "Service Order Description" := ServOrderRec.Description;
      END;
    END;

    PROCEDURE CostObjDescr@1100485000();
    BEGIN
      "Cost Object Description" := '';
      IF "Cost Object" = '' THEN
        EXIT;

      DimValRec.CHANGECOMPANY("Receiving Company");
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, "Project No.");
      "Cost Object Description" := DimValRec.Name;
    END;

    PROCEDURE ServiceLocationDescription@1100525007();
    BEGIN
      // 33633.n
      "Service Location Description" := '';
      IF "Service Location No." = '' THEN
        EXIT;

      ServiceLocation.CHANGECOMPANY("Receiving Company");
      IF ServiceLocation.GET("Service Location No.") THEN
        "Service Location Description" := ServiceLocation.Description;
    END;

    PROCEDURE CalcRateAndAmount@1210190006();
    VAR
      lvRecRef@1100485000 : RecordRef;
      lCostObjectCostPriceRec@1100525000 : Record 11020356;
      HourAccountingLine@1100525001 : Record 11012039;
      CurrencyDate@1100528202 : Date;
      CurrencyExchangeRateRec@1100528201 : Record 330;
      Currency2@1100528200 : Record 4;
      FCurrency@1100525002 : Boolean;
      FCurrencyPurchase@1100525003 : Boolean;
      RateFound@1100525004 : Boolean;
    BEGIN
      CheckCompanyIC;

      "Purchase Unit Cost (LCY)" := 0;
      IF "Cost Type" = "Cost Type"::Plant THEN BEGIN
        IF ICProjSetup."Determine Plant Costs Hours" =
           ICProjSetup."Determine Plant Costs Hours"::"By Cost Object" THEN
        BEGIN //C000988
          "Precalc. Surcharge Rate" := 0;
          "Precalc. Surcharge Expenses" := 0;
          IF "Cost Object" <> '' THEN BEGIN
            DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');
            lCostObjectCostPriceRec.SETRANGE("Cost Object", "Cost Object");
            lCostObjectCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
            lCostObjectCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
            IF lCostObjectCostPriceRec.FINDLAST THEN BEGIN
              "Unit Cost (LCY)" := lCostObjectCostPriceRec."Cost Price";
              lvRecRef.GETTABLE(lCostObjectCostPriceRec);
              FillCostPriceFound(lvRecRef);
            END ELSE BEGIN
              "Unit Cost (LCY)" := DimValRec.Price;
              IF DimValRec.Price <> 0 THEN BEGIN
                lvRecRef.GETTABLE(DimValRec);
                FillCostPriceFound(lvRecRef);
              END ELSE
                "Cost Price Found at" := '';
            END;
            IF DimValRec."Precalc. Surcharge Hours %" <> 0 THEN
              "Unit Cost (LCY)" := "Unit Cost (LCY)" * (1 + DimValRec."Precalc. Surcharge Hours %"/100);
            "Amount (LCY)" := ROUND("Total Line" * "Unit Cost (LCY)");
            "Surcharge Overtime" := 0;
          END ELSE BEGIN
            "Unit Cost (LCY)" := 0;
            "Cost Price Found at" := '';
            "Amount (LCY)" := 0;
          END;

          //Call C022483 sn
          "Unit Cost" := "Unit Cost (LCY)";
          Amount := "Amount (LCY)";
          FCurrency := FALSE;
          FCurrencyPurchase := FALSE;
          IF External THEN
            IF (ICProjSetup."Internal Charge Rate Ext Hours" =
                ICProjSetup."Internal Charge Rate Ext Hours"::"Internal Rate")
            THEN BEGIN
              EmplRec."No." := "Employee No.";
              HourAccountingLine.COPY(Rec);
              "Purchase Unit Cost" := HourAccountingLine.GetCostPrice(TRUE,  FCurrencyPurchase);
            END ELSE
             "Purchase Unit Cost" := "Unit Cost"
          ELSE
             "Purchase Unit Cost" := 0;
          //Call C022483 en
          // EXIT;            //Call C02248 o
          RateFound := TRUE;  //Call C02248 n
        END; //C000988
      END;

      IF NOT RateFound THEN   //Call C02248 n
        IF ("Employee No." = '') OR ("Wage Component" = '') THEN BEGIN
          "Precalc. Surcharge Rate" := 0;
          "Precalc. Surcharge Expenses" := 0;
          "Unit Cost (LCY)" := 0;
          "Cost Price Found at" := '';
          "Amount (LCY)" := 0;
          "Surcharge Overtime" := 0;
          //Call C022483 sn
          "Unit Cost (LCY)" := 0;
          "Amount (LCY)" := 0;
          "Purchase Unit Cost (LCY)" := 0;
          "Purchase Unit Cost" := 0;
          //Call C022483 en
          EXIT;
        END;

      IF NOT RateFound THEN BEGIN   //Call C02248 n

        FCurrency := FALSE;  //M25781
        FCurrencyPurchase := FALSE; //M25781

        CALCFIELDS("Component Type");
        CASE "Component Type" OF
          "Component Type"::Hours:
            BEGIN
              "Precalc. Surcharge Rate" := 0;
              "Precalc. Surcharge Expenses" := 0;
              "Unit Cost" := GetCostPrice(FALSE, FCurrency);
              IF External THEN
                IF (ICProjSetup."Internal Charge Rate Ext Hours" =
                    ICProjSetup."Internal Charge Rate Ext Hours"::"Internal Rate")
                THEN BEGIN
                  EmplRec."No." := "Employee No.";
                  HourAccountingLine.COPY(Rec);
                  "Purchase Unit Cost" := HourAccountingLine.GetCostPrice(TRUE,  FCurrencyPurchase);
                END ELSE
                  "Purchase Unit Cost" := "Unit Cost"
              ELSE
                "Purchase Unit Cost" := 0;

              IF NOT WageCompRec.GET("Wage Component") THEN
                WageCompRec.INIT;

              IF WageCompRec."Surcharge %" <> 0 THEN BEGIN
                "Unit Cost" := "Unit Cost" * WageCompRec."Surcharge %"/100;
                "Purchase Unit Cost" := "Purchase Unit Cost" * WageCompRec."Surcharge %"/100;
              END;

              IF WageCompRec.Overtime THEN BEGIN
                "Surcharge Overtime" := ("Unit Cost" * WageCompRec."Overtime Surcharge %"/100) -
                                        "Unit Cost";
                "Unit Cost" := "Unit Cost" * WageCompRec."Overtime Surcharge %"/100;
                "Purchase Unit Cost" := "Purchase Unit Cost" * WageCompRec."Overtime Surcharge %"/100;
              END ELSE
                "Surcharge Overtime" := 0;

              DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
              "Unit Cost" := "Unit Cost" * (1 + DimValRec."Precalc. Surcharge Hours %"/100);
              "Purchase Unit Cost" := "Purchase Unit Cost" * (1 + DimValRec."Precalc. Surcharge Hours %"/100);

              Amount := ROUND("Total Line" * "Unit Cost");
            END;
          "Component Type"::Expenses:
            BEGIN
              IF ("Unit Cost (LCY)" = 0) OR (GetCurrFieldNo() = FIELDNO("Cost Object"))  OR
                 (GetCurrFieldNo() = FIELDNO("Wage Component")) OR (GetCurrFieldNo() = FIELDNO("Employee No."))
              THEN BEGIN
                DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, "Cost Object" <> '', '');

                lCostObjectCostPriceRec.CHANGECOMPANY("Receiving Company");
                lCostObjectCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                lCostObjectCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                lCostObjectCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                IF lCostObjectCostPriceRec.FINDLAST THEN BEGIN
                  "Unit Cost (LCY)" := lCostObjectCostPriceRec."Cost Price";
                  lvRecRef.GETTABLE(lCostObjectCostPriceRec);
                  FillCostPriceFound(lvRecRef);
                END ELSE BEGIN
                  "Unit Cost (LCY)" := DimValRec.Price;
                  IF DimValRec.Price <> 0 THEN BEGIN
                    lvRecRef.GETTABLE(DimValRec);
                    FillCostPriceFound(lvRecRef);
                  END ELSE
                    "Cost Price Found at" := '';
                END;

                EmplPriceCostObjectRec.SETRANGE("Employee No.","Employee No.");
                EmplPriceCostObjectRec.SETRANGE("Cost Object","Cost Object");
                EmplPriceCostObjectRec.SETRANGE("Starting Date",0D,"Posting Date");
                EmplPriceCostObjectRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                IF EmplPriceCostObjectRec.FINDLAST THEN BEGIN
                  "Unit Cost (LCY)" := EmplPriceCostObjectRec."Cost Price";
                  lvRecRef.GETTABLE(EmplPriceCostObjectRec);
                  FillCostPriceFound(lvRecRef);
                END;

                "Precalc. Surcharge Rate" := "Unit Cost (LCY)" * DimValRec."Precalc. Surcharge Hours %"/100;
                "Unit Cost (LCY)" := "Unit Cost (LCY)" * (1 + DimValRec."Precalc. Surcharge Hours %"/100);

              END;
              "Amount (LCY)" := ROUND(Quantity * "Unit Cost (LCY)");
              "Precalc. Surcharge Expenses" := ROUND(Quantity * "Precalc. Surcharge Rate");
              "Surcharge Overtime" := 0;

              //Assumption: expenses are always in local currency
              "Unit Cost" := "Unit Cost (LCY)";
              "Purchase Unit Cost" := "Purchase Unit Cost (LCY)";
              Amount := "Amount (LCY)";
            END;

        END;
      END;     //Call C02248 n


      Currency2.InitRoundingPrecision;
      IF "Currency Code" <> '' THEN BEGIN
        CurrencyDate := TODAY;

        IF FCurrency THEN BEGIN
          "Unit Cost (LCY)" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Unit Cost",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");

            "Amount (LCY)" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
              1, "Project No.", CurrencyDate, "Currency Code", Amount,
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");
        END ELSE BEGIN
          //M 25781 sn Rate in local currency
          "Unit Cost (LCY)" := "Unit Cost";
          "Amount (LCY)" := Amount;

          "Unit Cost" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Unit Cost (LCY)",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");

            Amount :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Amount (LCY)",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");
          //M 25781 en
        END;

        IF FCurrencyPurchase THEN BEGIN
          "Purchase Unit Cost (LCY)" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Purchase Unit Cost",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");
        END ELSE BEGIN
          //M 25781 sn
          "Purchase Unit Cost (LCY)" := "Purchase Unit Cost";
          "Purchase Unit Cost" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Purchase Unit Cost (LCY)",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");

          //M 25781 en
        END;

      END ELSE BEGIN
        "Unit Cost (LCY)" := ROUND("Unit Cost",Currency2."Amount Rounding Precision");
        "Purchase Unit Cost (LCY)" := ROUND("Purchase Unit Cost",Currency2."Amount Rounding Precision");
        "Amount (LCY)" := ROUND(Amount,Currency2."Amount Rounding Precision");
      END;
    END;

    PROCEDURE CalcOverheadSurcharge@1210190003();
    VAR
      lSurchargeRec@1210190000 : Record 11020208;
      lEmployeeRec@1100485000 : Record 5200;
      HourLineSurcharge@1100485003 : Record 11020308;
      SurchDimValRec@1100485004 : Record 349;
      lBaseAmount@1100485001 : Decimal;
      lTotSurchAmount@1100485008 : Decimal;
      lvServType@1100485002 : Code[20];
      DepartmentCode@1100525000 : Code[20];
    BEGIN
      HourLineSurcharge.RESET;
      HourLineSurcharge.SETRANGE(Year, Year);
      HourLineSurcharge.SETRANGE(Week, Week);
      HourLineSurcharge.SETRANGE("Employee No.", "Employee No.");
      HourLineSurcharge.SETRANGE("Hour Line No.", "Line No.");
      IF NOT HourLineSurcharge.ISEMPTY THEN
        HourLineSurcharge.DELETEALL;

      HourLineSurcharge.INIT;
      HourLineSurcharge.TRANSFERFIELDS(Rec);
      HourLineSurcharge."Line No." := 0;

      HourLineSurcharge."Overhead Surcharge Project" := 0;
      HourLineSurcharge."Overhead Surcharge Service" := 0;

      IF ("Cost Object" = '') OR NOT (Type IN [Type::Project, Type::Service]) OR ("Amount (LCY)" = 0) THEN
        EXIT;

      CheckCompanyIC;
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');

      IF ("Employee No." <> '') THEN BEGIN
        lEmployeeRec.CHANGECOMPANY("Supplying Company");
        IF lEmployeeRec.GET("Employee No.") THEN;
      END;
      IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Labor) AND
        ("Employee No." <> '') THEN
      BEGIN
        IF (lEmployeeRec.External) AND (lEmployeeRec."External Post No Surcharge") THEN
          EXIT;
      END;

      GLSetup.GET;

      IF ICProjSetup."Surcharge Overtime excl." THEN
        lBaseAmount := "Amount (LCY)" - ("Surcharge Overtime" * "Total Line")
      ELSE
        lBaseAmount := "Amount (LCY)";

      IF "Service Order No." <> '' THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        IF "Additional Cost (Service)" = TRUE THEN
          lvServType := ServOrderRec."Service Type (Other)"
        ELSE
          lvServType := ServOrderRec."Service Type";

        IF GLSetup."Source Department Surcharge" = GLSetup."Source Department Surcharge"::Employee THEN
          DepartmentCode := lEmployeeRec."Global Dimension 1 Code"
        ELSE
          DepartmentCode := ServOrderRec."Global Dimension 1 Code";
        IF lSurchargeRec.GetSurcharges(1, lvServType, '', TRUE, DimValRec."Cost Type", "Cost Object", "Wage Component",
          DepartmentCode,  lEmployeeRec."Trade Association", "Cost Component", "Posting Date",
          lSurchargeRec) THEN
          REPEAT
            IF lSurchargeRec.Percentage <> 0 THEN
              HourLineSurcharge."Overhead Surcharge Service" := ROUND(lBaseAmount * lSurchargeRec.Percentage/100)
            ELSE
              HourLineSurcharge."Overhead Surcharge Service" := ROUND(lSurchargeRec.Amount * "Total Line");

            IF HourLineSurcharge."Overhead Surcharge Service" <> 0 THEN BEGIN
              lSurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
              HourLineSurcharge."Cost Object" := SurchDimValRec.Code;
              HourLineSurcharge."Cost Type" := SurchDimValRec."Cost Type";
              IF SurchDimValRec."Cost Component" <> '' THEN
                HourLineSurcharge."Cost Component" := SurchDimValRec."Cost Component";

              HourLineSurcharge.INSERT(TRUE);
              HourLineSurcharge."Line No." += 1;
            END;
          UNTIL lSurchargeRec.NEXT = 0;
      END ELSE BEGIN
        IF "Project No." <> '' THEN BEGIN
          ProjRec.GET("Project No.");
          IF GLSetup."Source Department Surcharge" = GLSetup."Source Department Surcharge"::Employee THEN
            DepartmentCode := lEmployeeRec."Global Dimension 1 Code"
          ELSE
            DepartmentCode := ProjRec."Global Dimension 1 Code";

          IF lSurchargeRec.GetSurcharges(0, ProjRec."Project Type", "Project No.", TRUE, DimValRec."Cost Type", "Cost Object",
            "Wage Component", DepartmentCode, lEmployeeRec."Trade Association", "Cost Component",
            "Posting Date", lSurchargeRec) THEN
            REPEAT
              IF lSurchargeRec.Percentage <> 0 THEN
                IF lSurchargeRec."Surcharge over Surcharge" THEN
                  HourLineSurcharge."Overhead Surcharge Project" := ROUND(
                    (lBaseAmount + lTotSurchAmount) * lSurchargeRec.Percentage/100)
                ELSE
                  HourLineSurcharge."Overhead Surcharge Project" := ROUND(lBaseAmount * lSurchargeRec.Percentage/100)
              ELSE
                HourLineSurcharge."Overhead Surcharge Project" := ROUND(lSurchargeRec.Amount * "Total Line");

              IF HourLineSurcharge."Overhead Surcharge Project" <> 0 THEN BEGIN
                lSurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
                HourLineSurcharge."Cost Object" := SurchDimValRec.Code;
                HourLineSurcharge."Cost Type" := SurchDimValRec."Cost Type";
                IF SurchDimValRec."Cost Component" <> '' THEN
                  HourLineSurcharge."Cost Component" := SurchDimValRec."Cost Component";
                //call22080
                IF (lSurchargeRec."Element Surcharge" <> '') THEN
                  HourLineSurcharge.Element := lSurchargeRec."Element Surcharge";
                //
                HourLineSurcharge.INSERT(TRUE);
                HourLineSurcharge."Line No." += 1;
                lTotSurchAmount := lTotSurchAmount + HourLineSurcharge."Overhead Surcharge Project";
              END;
            UNTIL lSurchargeRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE EmptyLine@1210190007() : Boolean;
    BEGIN
      CALCFIELDS("Component Type");
      IF "Component Type" = "Component Type"::Hours THEN
        EXIT(
          (Monday = 0) AND (Tuesday = 0) AND (Wednesday = 0) AND (Thursday = 0) AND
          (Friday = 0) AND (Saturday = 0) AND (Sunday = 0) )
      ELSE
        EXIT(("Cost Object" = '') AND ("Wage Component" ='') AND (Quantity = 0) AND ("Amount (LCY)" = 0));
    END;

    PROCEDURE CheckCostType@1210190008(ErrorMode@1100525000 : Boolean) : Boolean;
    VAR
      ShowErrorMessage@1210190000 : Boolean;
    BEGIN
      IF "Cost Object" = '' THEN
        EXIT(TRUE);  //C005137.c

      ICProjSetup.CHANGECOMPANY("Receiving Company");
      ICProjSetup.GET;

      //mg.sn, 09-09-11: M27549
      IF Type = Type::Service THEN BEGIN //call 31396
        ICServiceSetup.CHANGECOMPANY("Receiving Company");
        ICServiceSetup.GET;
      END;
      //mg.en, 09-09-11: M27549

      //Checks irrespective of Component Type
      CASE "Cost Type" OF
        "Cost Type"::Material:
          ShowErrorMessage := TRUE;
      //DP01010.sn
        "Cost Type"::Subcontracting:
          IF NOT External THEN
            ShowErrorMessage := TRUE;
      //DP01010.en
        "Cost Type"::Plant:
          BEGIN
            //IF "Connection No." > 0 THEN    //*C-019491.o
            //  TESTFIELD("Employee No.",''); //*C-019491.o
            //IF External THEN BEGIN //C004448.o
            IF External AND (NOT (Type IN [Type::Project, Type::Service])) THEN BEGIN //C004448.n
              IF NOT ErrorMode THEN  //C005137.n
                EXIT(FALSE);
              FIELDERROR("Cost Object", STRSUBSTNO(Text004, FIELDCAPTION(External), External, "Cost Type"));
            END;
            IF NOT (Type IN [Type::Project, Type::Plant, Type::Service]) THEN BEGIN //mg, 09-09-11: M27549
              IF NOT ErrorMode THEN  //C005137.n
                EXIT(FALSE);
              FIELDERROR("Cost Object", STRSUBSTNO(Text004, FIELDCAPTION(Type), Type, "Cost Type"));
            END;
            IF (Type IN [Type::Project,Type::Service]) THEN //#C012006.n
              ShowErrorMessage := NOT ((ICProjSetup."Accept Plant Costs Hours" AND (Type = Type::Project)) OR
                (ICServiceSetup."Accept Plant Costs Hours" AND (Type = Type::Service))); //mg.c, 20-09-11: M27549
          END;
      END;
      IF (NOT ErrorMode) AND ShowErrorMessage THEN  //C005137.n
        EXIT(FALSE);
      IF ShowErrorMessage THEN
        FIELDERROR("Cost Object", STRSUBSTNO(Text001, "Cost Type"));

      IF "Wage Component" = '' THEN
        EXIT(TRUE);  //C005137.c

      //Checks depending on Component Type
      CALCFIELDS("Component Type");
      IF "Component Type" = "Component Type"::Hours THEN
        CASE "Cost Type" OF
          "Cost Type"::Labor:;
          "Cost Type"::Subcontracting:; //DP01010
          "Cost Type"::Plant:
            IF (Type IN [Type::Project,Type::Service]) THEN //#C012006.n
              ShowErrorMessage := NOT ((ICProjSetup."Accept Plant Costs Hours" AND (Type = Type::Project)) OR
                (ICServiceSetup."Accept Plant Costs Hours" AND (Type = Type::Service))); //mg.c, 20-09-11: M27549
          "Cost Type"::Sundry:
            ShowErrorMessage := (NOT ICProjSetup."Accept Sundry Costs Hours");
          ELSE
            ShowErrorMessage := TRUE;
        END;

      IF (NOT ErrorMode) AND ShowErrorMessage THEN  //C005137.n
        EXIT(FALSE);
      IF ShowErrorMessage THEN
        FIELDERROR("Cost Object", STRSUBSTNO(Text004, FIELDCAPTION("Component Type"), "Component Type", "Cost Type"));
      EXIT(TRUE);  //C005137.n
    END;

    PROCEDURE LineIsEditable@1210190011() : Boolean;
    BEGIN
      TestStatusOpen(TRUE);
      IF NOT (HourAccRec.Status = HourAccRec.Status::Open) THEN
        EXIT(FALSE);

      ProjectSetup.GET;

      IF ProjectSetup."Change Project Hours Allowed" THEN
        EXIT(TRUE);

      IF "Connection No." > 0 THEN
        MESSAGE(Text003, TABLECAPTION, "Line No.", HourAccProjHeader.TABLECAPTION);

      EXIT("Connection No." = 0);
    END;

    PROCEDURE GetHoursFromEmployeeAbsence@1100485001(HourAccounting@1100485000 : Record 11012038);
    VAR
      EmployeeAbsence@1100528400 : Record 5207;
      FirstDateOfWeek@1100528401 : Date;
      LastDateOfWeek@1100528402 : Date;
    BEGIN
      HourAccounting.TESTFIELD(Status, HourAccounting.Status::Open);

      FirstDateOfWeek := DWY2DATE(1, HourAccounting.Week, HourAccounting.Year);
      LastDateOfWeek := DWY2DATE(7, HourAccounting.Week, HourAccounting.Year);

      EmployeeAbsence.SETCURRENTKEY("Employee No.", "From Date");
      EmployeeAbsence.SETRANGE("Employee No.", HourAccounting."Employee No.");
      EmployeeAbsence.SETFILTER(EmployeeAbsence."From Date", '<=%1', LastDateOfWeek);
      EmployeeAbsence.SETFILTER(EmployeeAbsence."To Date", '>=%1', FirstDateOfWeek);

      IF EmployeeAbsence.FINDSET THEN
        REPEAT
          GetHoursFromEmployeeAbsenceEntry(HourAccounting, EmployeeAbsence);
        UNTIL EmployeeAbsence.NEXT = 0;
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntry@1100528407(HourAccounting@1100528402 : Record 11012038;EmployeeAbsence@1100528400 : Record 5207);
    VAR
      WeekDay@1100528401 : Integer;
    BEGIN
      EmployeeAbsence.TESTFIELD("From Date");
      EmployeeAbsence.TESTFIELD("To Date");
      IF EmployeeAbsence."From Time" = 0T THEN
        EmployeeAbsence.TESTFIELD("Until Time", 0T);
      IF EmployeeAbsence."From Time" > 0T THEN
        EmployeeAbsence.TESTFIELD("Until Time");

      FOR WeekDay := 1 TO 7 DO BEGIN
        GetHoursFromEmployeeAbsenceEntryForWeekDay(HourAccounting, EmployeeAbsence, WeekDay);
      END;
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntryForWeekDay@1100528413(HourAccounting@1100528403 : Record 11012038;EmployeeAbsence@1100528400 : Record 5207;WeekDay@1100528402 : Integer);
    VAR
      HourAccountingLine@1100528404 : Record 11012039;
      CurrentDate@1100528401 : Date;
      Hours@1100528405 : Decimal;
    BEGIN
      CurrentDate := DWY2DATE(WeekDay, HourAccounting.Week, HourAccounting.Year);
      IF CurrentDate < EmployeeAbsence."From Date" THEN
        EXIT;
      IF CurrentDate > EmployeeAbsence."To Date" THEN
        EXIT;

      Hours := CalcEmployeeAbsenceHours(EmployeeAbsence, CurrentDate, WeekDay);
      IF Hours = 0 THEN
        EXIT;

      HourAccountingLine.INIT;
      HourAccountingLine.Year := HourAccounting.Year;
      HourAccountingLine.Week := HourAccounting.Week;
      HourAccountingLine.VALIDATE("Employee No.", HourAccounting."Employee No.");
      HourAccountingLine.VALIDATE(Type, HourAccountingLine.Type::Indirect);
      HourAccountingLine.VALIDATE("Cost Code", EmployeeAbsence."Cost Code");
      IF GetHourAccountingLine(HourAccountingLine) THEN BEGIN
        HourAccountingLine.AddHoursToWeekDay(WeekDay, Hours);
        HourAccountingLine.MODIFY(TRUE);
      END ELSE BEGIN
        HourAccountingLine.AddHoursToWeekDay(WeekDay, Hours);
        HourAccountingLine."Line No." := HourAccountingLine.GetNextFreeLineNo;
        HourAccountingLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE CalcEmployeeAbsenceHours@1100528408(EmployeeAbsence@1100528400 : Record 5207;CurrentDate@1100528401 : Date;WeekDay@1100528402 : Integer) AbsenceHours : Decimal;
    VAR
      WorkFrom@1100528406 : Time;
      WorkUntil@1100528407 : Time;
      PauseFrom@1100528408 : Time;
      PauseUntil@1100528409 : Time;
      AbsenceFromTime@1100528403 : Time;
      AbsenceUntilTime@1100528411 : Time;
      Hours@1100528405 : Decimal;
    BEGIN
      GetEmployeeWorkingTimeForWeekDay(
        EmployeeAbsence, CurrentDate, WeekDay, Hours, WorkFrom, WorkUntil, PauseFrom, PauseUntil);

      IF (EmployeeAbsence."From Time" > WorkFrom) AND
         (EmployeeAbsence."From Date" = CurrentDate)
      THEN
        AbsenceFromTime := EmployeeAbsence."From Time";

      IF (EmployeeAbsence."Until Time" > 0T) AND
         (EmployeeAbsence."Until Time" < WorkUntil) AND
         (EmployeeAbsence."To Date" = CurrentDate)
      THEN
        AbsenceUntilTime := EmployeeAbsence."Until Time";

      AbsenceHours := CalcAbsenceHours(
        Hours, WorkFrom, WorkUntil, PauseFrom, PauseUntil, AbsenceFromTime, AbsenceUntilTime);
    END;

    LOCAL PROCEDURE CalcAbsenceHours@1100528418(Hours@1100528400 : Decimal;WorkFrom@1100528401 : Time;WorkUntil@1100528402 : Time;PauseFrom@1100528405 : Time;PauseUntil@1100528406 : Time;AbsenceFromTime@1100528403 : Time;AbsenceUntilTime@1100528404 : Time) AbsenceHours : Decimal;
    BEGIN
      IF (PauseFrom > 0T) AND
         (PauseUntil > 0T)
      THEN
        AbsenceHours := CalcAbsenceHoursForFixedPause(
          Hours, WorkFrom, WorkUntil, PauseFrom, PauseUntil, AbsenceFromTime, AbsenceUntilTime)
      ELSE
        AbsenceHours := CalcAbsenceHoursForFloatingPause(
          Hours, WorkFrom, WorkUntil, AbsenceFromTime, AbsenceUntilTime);
    END;

    LOCAL PROCEDURE GetEmployeeWorkingTimeForWeekDay@1100528415(EmployeeAbsence@1100528407 : Record 5207;CurrentDate@1100528406 : Date;WeekDay@1100528405 : Integer;VAR Hours@1100528404 : Decimal;VAR WorkFrom@1100528400 : Time;VAR WorkUntil@1100528401 : Time;VAR PauseFrom@1100528402 : Time;VAR PauseUntil@1100528403 : Time);
    VAR
      EmployeeTimeTable@1100528409 : Record 11012923;
      HumanResourcesSetup@1100528408 : Record 5218;
      CompanyInformation@1100528410 : Record 79;
      BaseCalendar@1100528411 : Record 11072014;
      CalendarManagement@1100528412 : Codeunit 7600;
      Description@1100528413 : Text;
      WorkDay@1100528414 : Boolean;
    BEGIN
      Hours := 0;
      WorkFrom := 0T;
      WorkUntil := 0T;
      PauseFrom := 0T;
      PauseUntil := 0T;

      WorkDay := TRUE;
      IF CompanyInformation.GET THEN;
      IF BaseCalendar.GET(CompanyInformation."Base Calendar Code") THEN
        WorkDay := NOT CalendarManagement.CheckDateStatus(
          CompanyInformation."Base Calendar Code", CurrentDate, Description);
      IF NOT WorkDay AND NOT EmployeeAbsence."Calendar Entry" THEN
        EXIT;

      EmployeeTimeTable.SETRANGE("Employee No.", EmployeeAbsence."Employee No.");
      EmployeeTimeTable.SETFILTER("Effective Date", '<%1', CurrentDate);
      IF EmployeeTimeTable.FINDLAST THEN
        EmployeeTimeTable.GetWorkingTimeForWeekDay(WeekDay, Hours, WorkFrom, WorkUntil, PauseFrom, PauseUntil)
      ELSE BEGIN
        HumanResourcesSetup.GET;
        HumanResourcesSetup.TESTFIELD("Norm Hours");
        Hours := HumanResourcesSetup."Norm Hours";
        WorkFrom := HumanResourcesSetup."Starting Time";
        WorkUntil := HumanResourcesSetup."Finishing Time";
      END;
    END;

    LOCAL PROCEDURE CalcAbsenceHoursForFixedPause@1100528430(Hours@1100528400 : Decimal;WorkFrom@1100528401 : Time;WorkUntil@1100528402 : Time;PauseFrom@1100528405 : Time;PauseUntil@1100528406 : Time;AbsenceFromTime@1100528403 : Time;AbsenceUntilTime@1100528404 : Time) AbsenceHours : Decimal;
    VAR
      StartTime@1100528407 : Time;
      EndTime@1100528408 : Time;
      HoursBeforePause@1100528409 : Decimal;
      HoursAfterPause@1100528410 : Decimal;
    BEGIN
      AbsenceHours := Hours;

      IF (AbsenceFromTime > WorkFrom) THEN
        StartTime := AbsenceFromTime
      ELSE
        StartTime := WorkFrom;

      IF (AbsenceUntilTime > 0T) AND
         (AbsenceUntilTime < WorkUntil)
      THEN
        EndTime := AbsenceUntilTime
      ELSE
        EndTime := WorkUntil;

      IF (StartTime = 0T) OR
         (EndTime = 0T)
      THEN
        EXIT;

      IF StartTime < PauseFrom THEN BEGIN
        IF EndTime > PauseFrom THEN
          HoursBeforePause := (PauseFrom - StartTime)/3600000
        ELSE
          HoursBeforePause := (EndTime - StartTime)/3600000;
        IF HoursBeforePause < 0 THEN
          HoursBeforePause := 0;
      END;

      IF EndTime > PauseUntil THEN BEGIN
        IF StartTime < PauseUntil THEN
          HoursAfterPause := (EndTime - PauseUntil)/3600000
        ELSE
          HoursAfterPause := (EndTime - StartTime)/3600000;
        IF HoursAfterPause < 0 THEN
          HoursAfterPause := 0;
      END;

      AbsenceHours := HoursBeforePause + HoursAfterPause;
    END;

    LOCAL PROCEDURE CalcAbsenceHoursForFloatingPause@1100528431(Hours@1100528400 : Decimal;WorkFrom@1100528401 : Time;WorkUntil@1100528402 : Time;AbsenceFromTime@1100528403 : Time;AbsenceUntilTime@1100528404 : Time) AbsenceHours : Decimal;
    BEGIN
      AbsenceHours := Hours;

      IF (AbsenceFromTime > WorkFrom) THEN
        AbsenceHours := AbsenceHours - (AbsenceFromTime - WorkFrom)/3600000;

      IF (AbsenceUntilTime > 0T) AND
         (AbsenceUntilTime < WorkUntil)
      THEN
        AbsenceHours := AbsenceHours - (WorkUntil - AbsenceUntilTime)/3600000;

      IF AbsenceHours < 0 THEN
        AbsenceHours := 0;
    END;

    PROCEDURE AddHoursToWeekDay@1100528425(WeekDay@1100528400 : Integer;Hours@1100528401 : Decimal);
    BEGIN
      CASE WeekDay OF
        1:
          VALIDATE(Monday, Monday + Hours);
        2:
          VALIDATE(Tuesday, Tuesday + Hours);
        3:
          VALIDATE(Wednesday, Wednesday + Hours);
        4:
          VALIDATE(Thursday, Thursday + Hours);
        5:
          VALIDATE(Friday, Friday + Hours);
        6:
          VALIDATE(Saturday, Saturday + Hours);
        7:
          VALIDATE(Sunday, Sunday + Hours);
      END;
    END;

    PROCEDURE GetHourAccountingLine@1100485002(VAR vHourAccountingLineRec@1100485000 : Record 11012039) : Boolean;
    VAR
      iHourAccountingLineRec@1100485001 : Record 11012039;
    BEGIN
      WITH iHourAccountingLineRec DO BEGIN
        RESET;
        SETRANGE(Year,vHourAccountingLineRec.Year);
        SETRANGE(Week,vHourAccountingLineRec.Week);
        SETRANGE("Employee No.",vHourAccountingLineRec."Employee No.");
        SETRANGE("Project No.",vHourAccountingLineRec."Project No.");
        SETRANGE(Element,vHourAccountingLineRec.Element);
        SETRANGE("Cost Object",vHourAccountingLineRec."Cost Object");
        SETRANGE("Wage Component",vHourAccountingLineRec."Wage Component");
        SETRANGE("Service Order No.",vHourAccountingLineRec."Service Order No.");
        SETRANGE("Service Location No.",vHourAccountingLineRec."Service Location No.");
        SETRANGE("Service Contract No.",vHourAccountingLineRec."Service Contract No.");
        SETRANGE("Cost Code",vHourAccountingLineRec."Cost Code");
        SETRANGE(Type,vHourAccountingLineRec.Type);
        IF FINDFIRST THEN BEGIN
          vHourAccountingLineRec := iHourAccountingLineRec;
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetHoursFromPostedHours@1100485003(iHourAccountingRec@1100485004 : Record 11012038);
    VAR
      PostedHourHeaderRec@1100485000 : Record 11012084;
      PostedHourLineRec@1100485001 : Record 11012085;
      HourAccountingLineRec@1100485002 : Record 11012039;
      PostedHourHeaderFrm@1100485005 : Page 11012272;
      NextLineNo@1100485003 : Integer;
    BEGIN
      iHourAccountingRec.TESTFIELD(Status, iHourAccountingRec.Status::Open);

      PostedHourHeaderRec.SETCURRENTKEY("Employee No.");
      PostedHourHeaderRec.SETRANGE("Employee No.",iHourAccountingRec."Employee No.");
      IF PostedHourHeaderRec.FINDLAST THEN;
      PostedHourHeaderFrm.SETTABLEVIEW(PostedHourHeaderRec);
      PostedHourHeaderFrm.SETRECORD(PostedHourHeaderRec);
      PostedHourHeaderFrm.LOOKUPMODE := TRUE;
      IF NOT (PostedHourHeaderFrm.RUNMODAL = ACTION::LookupOK) THEN
        EXIT;

      PostedHourHeaderFrm.GETRECORD(PostedHourHeaderRec);

      PostedHourLineRec.SETRANGE(Year,PostedHourHeaderRec.Year);
      PostedHourLineRec.SETRANGE(Week,PostedHourHeaderRec.Week);
      PostedHourLineRec.SETRANGE("Employee No.",PostedHourHeaderRec."Employee No.");
      PostedHourLineRec.SETFILTER("Component Type", '<>%1', PostedHourLineRec."Component Type"::Days);
      IF PostedHourLineRec.FINDSET THEN BEGIN
        HourAccountingLineRec.SETRANGE(Year,iHourAccountingRec.Year);
        HourAccountingLineRec.SETRANGE(Week,iHourAccountingRec.Week);
        HourAccountingLineRec.SETRANGE("Employee No.",iHourAccountingRec."Employee No.");
        IF HourAccountingLineRec.FINDLAST THEN
          NextLineNo := HourAccountingLineRec."Line No."
        ELSE
          NextLineNo := 0;
        REPEAT
          HourAccountingLineRec.INIT;
          HourAccountingLineRec.TRANSFERFIELDS(PostedHourLineRec);
          HourAccountingLineRec.Year := iHourAccountingRec.Year;
          HourAccountingLineRec.Week := iHourAccountingRec.Week;
          NextLineNo += 10000;
          IF HourAccountingLineRec.Type = 3 THEN
            HourAccountingLineRec.Type := HourAccountingLineRec.Type::Indirect;
          HourAccountingLineRec."Line No." := NextLineNo;
          HourAccountingLineRec.CALCFIELDS("Component Type");
          IF HourAccountingLineRec."Component Type" = "Component Type"::Expenses THEN
            HourAccountingLineRec."Posting Date" := iHourAccountingRec."Posting Date";
          HourAccountingLineRec.CalcRateAndAmount;
          HourAccountingLineRec.INSERT(TRUE);
        UNTIL PostedHourLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE FillMainProject@1100485004();
    BEGIN
      IF "Project No." <> '' THEN BEGIN
        ProjRec.CHANGECOMPANY("Receiving Company");
        ProjRec.GET("Project No.");
        "Main Project No." := ProjRec."Main Project";
      END ELSE
        "Main Project No." := '';
    END;

    PROCEDURE GetPlantDefaultsFromPlantSetup@1100485025();
    VAR
      RateCode@1100525000 : Code[10];
    BEGIN
      //* Be sure that the company for the plant tables is set before calling this function
      IF ("Plant Rate Code" <> '') AND ("Cost Component Plant" <> '') THEN //Call C001222
        EXIT;

      PlantSetupRec.GET;
      //DP00485.so
      //IF ("Plant Rate Code" = '') AND PlantSetupRec."Rate Codes" AND (PlantSetupRec."Default Rate Code Rental" <> '') THEN BEGIN
      //  IF PlantRateCodeRec.CheckPlantRateCode(
      //    "Plant Location", PlantSetupRec."Default Rate Code Rental", FALSE, "Receiving Company")
      //  THEN
      //    VALIDATE("Plant Rate Code", PlantSetupRec."Default Rate Code Rental");
      //END;
      //DP00485.eo
      //DP00485.sn C009408
      IF ("Plant Rate Code" = '') AND PlantSetupRec."Rate Codes" THEN BEGIN
        RateCode := PlantRateCodeRec.GetDefaultRateCodeRental("Plant Location",  FALSE, "Receiving Company");
        IF (RateCode <> '') AND PlantRateCodeRec.CheckPlantRateCode("Plant Location", RateCode, FALSE, "Receiving Company") THEN
          VALIDATE("Plant Rate Code", RateCode);
      END;
      //DP00485.en
      IF ("Cost Component Plant" = '') AND (PlantSetupRec."Cost Component Hour Costs" <> '') THEN
        VALIDATE("Cost Component Plant", PlantSetupRec."Cost Component Hour Costs");
    END;

    PROCEDURE InsertPlantHourRevLine@1100485092() : Integer;
    VAR
      lvPlantHourRevHeadRec@1100485000 : Record 11012573;
      lvPlantHourRevLineRec@1100485002 : Record 11012574;
      lvPlantHourRevLineRec2@1100525000 : Record 11012574;
    BEGIN
      IF (Type <> Type::Plant) OR ("Plant Location" = '') THEN
        EXIT(0);

      IF "Receiving Company" <> '' THEN BEGIN
        lvPlantHourRevHeadRec.CHANGECOMPANY("Receiving Company");
        lvPlantHourRevLineRec.CHANGECOMPANY("Receiving Company");
        lvPlantHourRevLineRec2.CHANGECOMPANY("Receiving Company");
      END;

      //Create Plant Hour Revenue Header if necessary (if not already exist)
      IF NOT lvPlantHourRevHeadRec.GET(Year, Week, "Plant Type", "Plant No.") THEN BEGIN
        lvPlantHourRevHeadRec.INIT;
        lvPlantHourRevHeadRec.Year := Year;
        lvPlantHourRevHeadRec.Week := Week;
        lvPlantHourRevHeadRec."Plant Type" := "Plant Type";
        lvPlantHourRevHeadRec."Plant No." := "Plant No.";
        lvPlantHourRevHeadRec.INSERT(FALSE);
      END;

      //Create Plant Hour Revenue Line
      lvPlantHourRevLineRec.INIT;
      TransferHoursToPlantHoursRev(lvPlantHourRevLineRec);
      lvPlantHourRevLineRec2.SETRANGE(Year, Year);
      lvPlantHourRevLineRec2.SETRANGE(Week, Week);
      lvPlantHourRevLineRec2.SETRANGE("Plant Type", "Plant Type");
      lvPlantHourRevLineRec2.SETRANGE("Plant No.", "Plant No.");
      IF lvPlantHourRevLineRec2.FINDLAST THEN
        lvPlantHourRevLineRec."Line No." := lvPlantHourRevLineRec2."Line No." + 10000
      ELSE
        lvPlantHourRevLineRec."Line No." := 10000;
      lvPlantHourRevLineRec.INSERT(FALSE);


      EXIT(lvPlantHourRevLineRec."Line No.");
    END;

    PROCEDURE TransferHoursToPlantHoursRev@1100485023(VAR PlantHourRevLine@1100485001 : Record 11012574);
    BEGIN
      CALCFIELDS("Component Type");
      PlantHourRevLine.Year := Year;
      PlantHourRevLine.Week := Week;
      PlantHourRevLine."Plant Type" := "Plant Type";
      PlantHourRevLine."Plant No." := "Plant No.";
      PlantHourRevLine."Plant Location" := "Plant Location";
      PlantHourRevLine."Employee No." := "Employee No.";
      PlantHourRevLine.Element := Element;
      IF "Component Type" <> "Component Type"::Expenses THEN BEGIN
        PlantHourRevLine.Type := PlantHourRevLine.Type::Hours;
        PlantHourRevLine."Rate Code" := "Plant Rate Code";
        PlantHourRevLine."Wage Component" := "Wage Component";  //DP00812
        PlantHourRevLine."Cost Object" := '';
        PlantHourRevLine.Quantity := 0;
        PlantHourRevLine."Unit Price" := 0;
        PlantHourRevLine.Amount := 0;
      END ELSE BEGIN
        PlantHourRevLine.Type := PlantHourRevLine.Type::Expenses;
        PlantHourRevLine."Rate Code" := '';
        PlantHourRevLine."Cost Object" := "Cost Object";
        PlantHourRevLine.Quantity := Quantity;
        PlantHourRevLine."Unit Price" := 0;
        //PlantHourRevLine.Amount := "Amount (LCY)";
        PlantHourRevLine.Amount := ExchangeToLCYInPlantCompany("Amount (LCY)", FALSE);
        IF Quantity <> 0 THEN
          PlantHourRevLine.VALIDATE(Amount);  //* Calculate 'Unit Price'
      END;
      PlantHourRevLine.Monday := Monday;
      PlantHourRevLine.Tuesday := Tuesday;
      PlantHourRevLine.Wednesday := Wednesday;
      PlantHourRevLine.Thursday := Thursday;
      PlantHourRevLine.Friday := Friday;
      PlantHourRevLine.Saturday := Saturday;
      PlantHourRevLine.Sunday := Sunday;
      PlantHourRevLine."Total Line" := "Total Line";
      PlantHourRevLine.Comment := Comment;
      PlantHourRevLine.Origin := PlantHourRevLine.Origin::HourAcc;
      PlantHourRevLine."Employee Company" := DetermineEmplCompanyForPlantHr("Supplying Company", "Receiving Company");
    END;

    PROCEDURE InsertPlantHourCostLine@1100485026() : Integer;
    VAR
      lvPlantHourCostHeadRec@1100485000 : Record 11012577;
      lvPlantHourCostLineRec@1100485002 : Record 11012578;
      lvPlantHourCostLineRec2@1100485003 : Record 11012578;
      lvSupplyingCompany@1100525000 : Text[30];
    BEGIN
      CALCFIELDS("Component Type");
      //IF (Type <> Type::Plant) OR ("Component Type" <> "Component Type"::Hours) THEN  //*C-019484.o
      IF (Type <> Type::Plant) THEN  //*C-019484.n
        EXIT(0);

      IF "Receiving Company" <> '' THEN BEGIN
        lvPlantHourCostHeadRec.CHANGECOMPANY("Receiving Company");
        lvPlantHourCostLineRec.CHANGECOMPANY("Receiving Company");
        lvPlantHourCostLineRec2.CHANGECOMPANY("Receiving Company");
      END;
      lvSupplyingCompany := DetermineEmplCompanyForPlantHr("Supplying Company", "Receiving Company");

      //Create Plant Hour Cost Header if necessary (if not already exist)
      IF NOT lvPlantHourCostHeadRec.GET(Year, Week, lvSupplyingCompany, "Employee No.") THEN BEGIN
        lvPlantHourCostHeadRec.INIT;
        lvPlantHourCostHeadRec.Year := Year;
        lvPlantHourCostHeadRec.Week := Week;
        lvPlantHourCostHeadRec."Employee Company" := lvSupplyingCompany;
        lvPlantHourCostHeadRec."Employee No." := "Employee No.";
        lvPlantHourCostHeadRec.INSERT(FALSE);
      END;

      //Create Plant Hour Cost Line
      lvPlantHourCostLineRec.INIT;
      TransferHoursToPlantHoursCost(lvPlantHourCostLineRec, lvSupplyingCompany, TRUE);
      lvPlantHourCostLineRec2.SETRANGE(Year, Year);
      lvPlantHourCostLineRec2.SETRANGE(Week, Week);
      lvPlantHourCostLineRec2.SETRANGE("Employee Company",lvSupplyingCompany);
      lvPlantHourCostLineRec2.SETRANGE("Employee No.","Employee No.");
      IF lvPlantHourCostLineRec2.FINDLAST THEN
        lvPlantHourCostLineRec."Line No." := lvPlantHourCostLineRec2."Line No." + 10000
      ELSE
        lvPlantHourCostLineRec."Line No." := 10000;
      lvPlantHourCostLineRec.INSERT(FALSE);

      EXIT(lvPlantHourCostLineRec."Line No.");
    END;

    PROCEDURE TransferHoursToPlantHoursCost@1100485027(VAR PlantHourCostLine@1100485001 : Record 11012578;ISupplyingCompany@1100525000 : Text[30];ExchangeRateCurrencycyAllowed@1100525001 : Boolean);
    BEGIN
      PlantHourCostLine.Year := Year;
      PlantHourCostLine.Week := Week;
      PlantHourCostLine."Employee Company" := ISupplyingCompany;
      PlantHourCostLine."Employee No." := "Employee No.";
      PlantHourCostLine."Plant Type" := "Plant Type";
      PlantHourCostLine."Plant No." := "Plant No.";
      PlantHourCostLine."Department Code" := "Department Code";
      PlantHourCostLine."Cost Component" := "Cost Component Plant";
      IF "Component Type" <> "Component Type"::Expenses THEN BEGIN //*C-019484.n
        PlantHourCostLine.Type := PlantHourCostLine.Type::Hours;   //*C-019484.n
        PlantHourCostLine.Monday := Monday;
        PlantHourCostLine.Tuesday := Tuesday;
        PlantHourCostLine.Wednesday := Wednesday;
        PlantHourCostLine.Thursday := Thursday;
        PlantHourCostLine.Friday := Friday;
        PlantHourCostLine.Saturday := Saturday;
        PlantHourCostLine.Sunday := Sunday;
        PlantHourCostLine."Total Line" := "Total Line";
        IF ExchangeRateCurrencycyAllowed THEN
          PlantHourCostLine.Amount := ExchangeToLCYInPlantCompany("Unit Cost (LCY)", TRUE)
        ELSE
          PlantHourCostLine."Unit Cost" := "Unit Cost (LCY)";
        PlantHourCostLine.Quantity := 0;    //*C-019484.n
        PlantHourCostLine."Unit Rate" := 0; //*C-019484.n
        PlantHourCostLine.Amount := 0;      //*C-019484.n
      //*C-019484.sn
      END ELSE BEGIN
        PlantHourCostLine.Type := PlantHourCostLine.Type::Expenses;
        PlantHourCostLine."Cost Object" := "Cost Object";
        PlantHourCostLine."Wage Component Expenses" := "Wage Component";
        PlantHourCostLine.Quantity := Quantity;
        PlantHourCostLine."Unit Rate" := 0;
        IF ExchangeRateCurrencycyAllowed THEN
          PlantHourCostLine.Amount := ExchangeToLCYInPlantCompany("Amount (LCY)", FALSE)
        ELSE
          PlantHourCostLine.Amount := "Amount (LCY)";
        IF Quantity <> 0 THEN
          PlantHourCostLine.VALIDATE(Amount);  //* Calculate 'Unit Rate'
        PlantHourCostLine."Posting Date (Exp.)" := "Posting Date";  //C015176.n
      END;
      //*C-019484.en
      PlantHourCostLine.Comment := Comment;
      PlantHourCostLine.Origin := PlantHourCostLine.Origin::HourAcc;
      PlantHourCostLine."Department Code" := "Department Code";
    END;

    LOCAL PROCEDURE ExchangeToLCYInPlantCompany@1100525009(Amt@1100525001 : Decimal;IsUnitAmount@1100525004 : Boolean) : Decimal;
    VAR
      GeneralLedgerSetup@1100525000 : Record 98;
      Currency@1100525005 : Record 4;
      CurrencyExchangeRate@1100525006 : Record 330;
      LCYCodeCurrCompany@1100525002 : Code[10];
      LCYCodePlantCompany@1100525003 : Code[10];
      CurrencyFactor@1100525007 : Decimal;
      RoundingPrecision@1100525008 : Decimal;
    BEGIN
      IF Amt = 0 THEN
        EXIT(Amt);
      IF ("Receiving Company" = '') OR ("Receiving Company" = COMPANYNAME) THEN
        EXIT(Amt);
      LCYCodeCurrCompany := GeneralLedgerSetup.GetLCYCode();
      GeneralLedgerSetup.CHANGECOMPANY("Receiving Company");
      LCYCodePlantCompany := GeneralLedgerSetup.GetLCYCode();
      IF (LCYCodeCurrCompany = '') OR (LCYCodePlantCompany = '') OR (LCYCodeCurrCompany = LCYCodePlantCompany) THEN
        EXIT(Amt);

      Currency.GET(LCYCodePlantCompany);
      CurrencyFactor := CurrencyExchangeRate.ExchangeRate(0, '', "Posting Date", LCYCodePlantCompany, FALSE);
      IF IsUnitAmount THEN
        RoundingPrecision := Currency."Unit-Amount Rounding Precision"
      ELSE
        RoundingPrecision := Currency."Amount Rounding Precision";

      EXIT(ROUND(
        CurrencyExchangeRate.ExchangeAmtLCYToFCY(
          0, '', "Posting Date", LCYCodePlantCompany, Amt, CurrencyFactor, FALSE),
        RoundingPrecision));
    END;

    PROCEDURE CreateTempPlantHourCostLine@1100525003(VAR lvTempPlantHoursCostRec@1100525001 : TEMPORARY Record 11012578) : Integer;
    VAR
      lvSupplyingCompany@1100525000 : Text[30];
    BEGIN
      CALCFIELDS("Component Type");
      //IF (Type <> Type::Plant) OR ("Component Type" <> "Component Type"::Hours) THEN  //*C-019484.o
      IF (Type <> Type::Plant) THEN  //*C-019484.n
        EXIT(0);

      lvSupplyingCompany := '';

      //Create Plant Hour Cost Line
      lvTempPlantHoursCostRec.INIT;
      TransferHoursToPlantHoursCost(lvTempPlantHoursCostRec, lvSupplyingCompany, FALSE);
                     //Exchange rate (if needed) will be done when IC-Entry is processed
      lvTempPlantHoursCostRec."Line No." := 10000;
      lvTempPlantHoursCostRec.INSERT(FALSE);

      EXIT(lvTempPlantHoursCostRec."Line No.");
    END;

    PROCEDURE DetermineEmplCompanyForPlantHr@1100525000(IEmplComp@1100525000 : Text[30];IPlantComp@1100525001 : Text[30]) : Text[30];
    VAR
      lvEmplComp@1100525003 : Text[30];
      lvPlantComp@1100525002 : Text[30];
    BEGIN
      IF (IEmplComp <> '') THEN
        lvEmplComp := IEmplComp
      ELSE
        lvEmplComp := COMPANYNAME;
      IF (IPlantComp <> '') THEN
        lvPlantComp := IPlantComp
      ELSE
        lvPlantComp := COMPANYNAME;

      IF (lvEmplComp <> lvPlantComp) THEN
        EXIT(lvEmplComp);

      EXIT(''); //* Empty, in plant hours the employee company may only be filled if unequal to the plant company
    END;

    PROCEDURE FromTimeToDuration@1100485008();
    VAR
      lvDuration@1100485000 : Duration;
    BEGIN
      IF ("Time From" <> 0T) AND ("Time Until" <> 0T) THEN BEGIN
        lvDuration := "Time Until" - "Time From";
        //IF "Time Until" < "Time From" THEN
        //  ERROR(Text006, FIELDCAPTION("Time From"), FIELDCAPTION("Time Until"));
        IF "Time Until" < "Time From" THEN
          lvDuration := (24 * 3600000) + lvDuration;  //* lvDuration is negative
        VALIDATE(Duration, lvDuration);
      END;
    END;

    PROCEDURE FromDurationToHours@1100485006(lDuration@1100485000 : Duration) Hours : Decimal;
    BEGIN
      Hours := lDuration / 3600000;  //* Duration in msec, so divide by 1000 * 60 * 60
    END;

    PROCEDURE CheckTimeOverlap@1100485014();
    VAR
      HourAccLine@1100485000 : Record 11012039;
    BEGIN
      { Klopt niet kan over de dag heen  bv 22:00 tot 02:00. Wordt dan allemaal wel erg complex om overlap te testen
        Ging toch al niet altijd goed, als nieuwe periode een bestaande volledig overlapte dan kreeg je toch al
        geen melding.
        GJK/PS:
         Besloten om maar helemaal niet meer te testen want waarom zou dit niet mogen. Ook kan al een deel van de uren
         geboekt zijn daar wordt ook niet op getest. En het kan zelfs nodig zijn voor correcties (negatief aantal uren).

      HourAccLine.SETRANGE(Year, Year);
      HourAccLine.SETRANGE(Week, Week);
      HourAccLine.SETRANGE("Employee No.", "Employee No.");
      HourAccLine.SETFILTER("Line No.", '<>%1', "Line No.");
      HourAccLine.SETRANGE(Day, Day);
      HourAccLine.SETFILTER("Time From", '..%1', "Time From");
      HourAccLine.SETFILTER("Time Until", '>%1', "Time From");
      IF HourAccLine.FINDFIRST THEN
        ERROR(Text010);

      HourAccLine.SETFILTER("Time From", '<%1', "Time Until");
      HourAccLine.SETFILTER("Time Until", '%1..', "Time Until");
      IF HourAccLine.FINDFIRST THEN
        ERROR(Text010);
      }
    END;

    PROCEDURE CompTypeEditable@1100485007() : Boolean;
    BEGIN
      CALCFIELDS("Component Type");
      IF "Component Type" = "Component Type"::Expenses THEN
        EXIT(NOT ( (PostingDateRec.GET(Year, Week)) AND (PostingDateRec."Posting Date" <> 0D)))
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateProjectHourLine@1100485009(UpdateAction@1210190001 : 'Insert,Modify,Delete,Rename');
    VAR
      HourProjLine@1210190002 : Record 11020225;
    BEGIN
      IF "Connection No." = 0 THEN
        EXIT;

      IF UpdateFromProjHourLine THEN
        EXIT;

      IF NOT LineIsEditable THEN
        ERROR('');

      CASE UpdateAction OF
        //UpdateAction::Insert: //No Action
        //* 30-08-2006 When this will ever happens, see dataport 11012425, possibily it should be delete there.
        UpdateAction::Modify:
          BEGIN
            HourProjLine.RESET;
            HourProjLine.SETCURRENTKEY("Connection No.");
            HourProjLine.SETRANGE("Connection No.", "Connection No.");
            IF HourProjLine.FINDFIRST THEN BEGIN
              IF ("Project No." = HourProjLine."Project No.") AND
                  ("Receiving Company" = HourProjLine."Receiving Company")
              THEN BEGIN
                HourProjLine.TRANSFERFIELDS(Rec,FALSE);
                HourProjLine.MODIFY;
              END ELSE BEGIN
                UpdateProjectHourLine(UpdateAction::Delete);
                //UpdateProjectHourLine(UpdateAction::Insert);
              END;
            END;
          END;
        UpdateAction::Delete:
          BEGIN
            HourProjLine.RESET;
            HourProjLine.SETCURRENTKEY("Connection No.");
            HourProjLine.SETRANGE("Connection No.", "Connection No.");
            IF HourProjLine.FINDFIRST THEN
              HourProjLine.DELETE;
            "Connection No." := 0;
            MODIFY;
          END;
        UpdateAction::Rename:
          BEGIN
            UpdateProjectHourLine(UpdateAction::Delete);
            //UpdateProjectHourLine(UpdateAction::Insert);
          END;
      END;
    END;

    PROCEDURE GetExecutionDate@1100485010() ReturnDate : Date;
    BEGIN
      ReturnDate := 0D;

      IF HourAccRec.GET(Year,Week,"Employee No.") THEN
        ReturnDate := HourAccRec."Posting Date";

      IF Monday <> 0 THEN ReturnDate := DWY2DATE(1,Week,Year);
      IF Tuesday <> 0 THEN ReturnDate := DWY2DATE(2,Week,Year);
      IF Wednesday <> 0 THEN ReturnDate := DWY2DATE(3,Week,Year);
      IF Thursday <> 0 THEN ReturnDate := DWY2DATE(4,Week,Year);
      IF Friday <> 0 THEN ReturnDate := DWY2DATE(5,Week,Year);
      IF Saturday <> 0 THEN ReturnDate := DWY2DATE(6,Week,Year);
      IF Sunday <> 0 THEN ReturnDate := DWY2DATE(7,Week,Year);
    END;

    PROCEDURE UpdateCostControlStatus@1100485013(lUpdateAction@1100485002 : 'Insert,Modify,Delete');
    VAR
      ActionType@1100528400 : 'Insert,Modify,Delete';
    BEGIN
      CASE lUpdateAction OF
        lUpdateAction::Insert, lUpdateAction::Delete:
          BEGIN
            IF ("Receiving Company" = '') AND ("Project No." <> '') THEN BEGIN
              ProjRec.CHANGECOMPANY("Receiving Company");
              IF ProjRec.GET("Project No.") THEN
                ProjRec.UpdateCostControlStatus(lUpdateAction, xRec."Cost Object", "Cost Object");
            END;
          END;
        lUpdateAction::Modify:
          BEGIN
            //Update xRec, handle as delete
            IF ((xRec."Receiving Company" <> "Receiving Company") OR (xRec."Project No." <> "Project No.")) AND
               ((xRec."Receiving Company" = '') AND (xRec."Project No." <> '')) THEN BEGIN
              ProjRec.CHANGECOMPANY(xRec."Receiving Company");
              IF ProjRec.GET(xRec."Project No.") THEN
                ProjRec.UpdateCostControlStatus(lUpdateAction::Delete, xRec."Cost Object", "Cost Object");
            END;

            //Update Rec
            IF ("Receiving Company" = '') AND ("Project No." <> '') THEN BEGIN
              ProjRec.CHANGECOMPANY("Receiving Company");
              IF "Project No." = xRec."Project No." THEN
                ActionType := ActionType::Modify
              ELSE
                ActionType := ActionType::Insert;
              IF ProjRec.GET("Project No.") THEN
                ProjRec.UpdateCostControlStatus(ActionType, xRec."Cost Object", "Cost Object");
            END;
          END;
      END;
    END;

    PROCEDURE TestStatusOpen@1100485011(lMessageOnly@1100485000 : Boolean);
    VAR
      lHourAccRec@1100485001 : Record 11012038;
    BEGIN
      IF NOT HourAccRec.GET(Year,Week,"Employee No.") THEN BEGIN
        CLEAR(HourAccRec);
        EXIT;
      END;

      IF lMessageOnly THEN BEGIN
        IF NOT (HourAccRec.Status = HourAccRec.Status::Open) THEN BEGIN
          lHourAccRec.Status := lHourAccRec.Status::Open;
          MESSAGE(Text002,
            HourAccRec.FIELDCAPTION(Status), lHourAccRec.Status, HourAccRec.TABLECAPTION,
            HourAccRec.FIELDCAPTION(Year), HourAccRec.Year, HourAccRec.FIELDCAPTION(Week), HourAccRec.Week,
            HourAccRec.FIELDCAPTION("Employee No."), HourAccRec."Employee No.");
        END;
      END ELSE
        HourAccRec.TESTFIELD(Status, HourAccRec.Status::Open);
    END;

    PROCEDURE DeleteSurcharge@1100485012();
    VAR
      HourLineSurcharge@1100485000 : Record 11020308;
    BEGIN
      //db, 12-06-07
      HourLineSurcharge.RESET;
      HourLineSurcharge.SETRANGE(Year, Year);
      HourLineSurcharge.SETRANGE(Week, Week);
      HourLineSurcharge.SETRANGE("Employee No.", "Employee No.");
      HourLineSurcharge.SETRANGE("Hour Line No.", "Line No.");
      HourLineSurcharge.DELETEALL;
    END;

    PROCEDURE GetLeaveTypeTotal@1100485016() : Decimal;
    VAR
      LeaveLedgEntry@1100485001 : Record 11020235;
    BEGIN
      //**4PS
      IF "Leave Type" <> '' THEN
      BEGIN
        LeaveLedgEntry.RESET;
        LeaveLedgEntry.SETCURRENTKEY("Employee No.","Leave Type");
        LeaveLedgEntry.SETRANGE("Employee No.", "Employee No.");
        LeaveLedgEntry.SETRANGE("Leave Type", "Leave Type");
        LeaveLedgEntry.CALCSUMS("No. of Hours");
        EXIT(LeaveLedgEntry."No. of Hours");
      END;
      EXIT(0);
    END;

    PROCEDURE GetCostObjectTotal@1100528701() Result : Decimal;
    VAR
      HourAccountingLine@1100528700 : Record 11012039;
      PostedHourLine@1100528701 : Record 11012085;
    BEGIN
      Result := 0;

      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      HourAccountingLine.SETRANGE("Cost Object", "Cost Object");
      IF HourAccountingLine.FINDSET THEN
        REPEAT
          Result := Result + HourAccountingLine.Quantity;
          Result := Result + HourAccountingLine."Total Line";
        UNTIL HourAccountingLine.NEXT = 0;

      PostedHourLine.SETRANGE(Year, Year);
      PostedHourLine.SETRANGE(Week, Week);
      PostedHourLine.SETRANGE("Employee No.", "Employee No.");
      PostedHourLine.SETRANGE("Cost Object", "Cost Object");
      IF PostedHourLine.FINDSET THEN
        REPEAT
          Result := Result + PostedHourLine.Quantity;
          Result := Result + PostedHourLine."Total Line";
        UNTIL PostedHourLine.NEXT = 0;

      EXIT(Result);
    END;

    PROCEDURE GetProjAndServiceOrderData@1100485017(iHourAccountingRec@1100485009 : Record 11012038);
    VAR
      EnterNoOfWeeksBack@1100525000 : Page 11126490;
      lWeeks@1100485000 : Integer;
      Text002@1100485001 : TextConst 'ENU=Number of weeks cannot be 0 or smaller than 0.';
      Text003@1100485007 : TextConst 'ENU=Number of weeks can not be greater than 52.';
      lWeekNumber@1100485004 : Integer;
    BEGIN
      TempJobRec.DELETEALL;
      TempServOrderRec.DELETEALL;
      TempHourLinesRec.DELETEALL;

      JaargangTxt := STRSUBSTNO('3112' + '%1',iHourAccountingRec.Year);
      EVALUATE(Jaargang,JaargangTxt);
      lWeekNumber := DATE2DWY(Jaargang,2);
      IF lWeekNumber = 1 THEN lWeekNumber := 52;

      EnterNoOfWeeksBack.LOOKUPMODE := TRUE;
      IF EnterNoOfWeeksBack.RUNMODAL = ACTION::LookupOK THEN
        EnterNoOfWeeksBack.GetField(lWeeks)
      ELSE
        EXIT;

      IF (lWeeks <=0)  THEN ERROR(Text002);
      IF (lWeeks > lWeekNumber) THEN ERROR(Text003);

      CurrentYear := iHourAccountingRec.Year;
      CurrentWeek := iHourAccountingRec.Week;

      HoursAccntLinesRec.RESET;
      HoursAccntLinesRec.SETRANGE(Year,iHourAccountingRec.Year);
      HoursAccntLinesRec.SETRANGE(Week,iHourAccountingRec.Week);
      HoursAccntLinesRec.SETRANGE("Employee No.",iHourAccountingRec."Employee No.");
      IF HoursAccntLinesRec.FINDLAST THEN
        LineNo := HoursAccntLinesRec."Line No." + 10000
      ELSE
        LineNo := 10000;

      EmplRec.GET(iHourAccountingRec."Employee No.");
      Globaldim2code := EmplRec."Global Dimension 2 Code";

      DimValRec.RESET;
      DimValRec.SETRANGE(Code,EmplRec."Global Dimension 2 Code");
      IF DimValRec.FINDFIRST THEN
        WageComp := DimValRec."Wage Component";

      ProjectSetup.GET;
      GenJournal.GET(ProjectSetup."Hours Journal Template");

      PostedHourLineRec.RESET;
      PostedHourLineRec.SETRANGE("Employee No.",iHourAccountingRec."Employee No.");
      PostedHourLineRec.SETFILTER("Supplying Company",'');

      IF lWeeks >= CurrentWeek THEN BEGIN
        WeekDec := lWeekNumber - (-(CurrentWeek - lWeeks));
        PostedHourLineRec.SETFILTER(Year,'=%1',CurrentYear - 1);
        PostedHourLineRec.SETFILTER(Week,'>=%1',WeekDec);
        FillTempTables;
        PostedHourLineRec.SETFILTER(Year,'%1',CurrentYear);
        PostedHourLineRec.SETFILTER(Week,'<=%1',CurrentWeek);
        FillTempTables;
      END ELSE BEGIN
        PostedHourLineRec.SETFILTER(Year,'%1',CurrentYear);
        PostedHourLineRec.SETFILTER(Week,'>=%1&<=%2',(CurrentWeek - lWeeks),CurrentWeek);
        FillTempTables;
      END;

      IF TempJobRec.FINDSET THEN
        REPEAT
          HoursAccntLinesRec.INIT;
          HoursAccntLinesRec.Year := CurrentYear;
          HoursAccntLinesRec.Week := CurrentWeek;
          HoursAccntLinesRec."Employee No." := iHourAccountingRec."Employee No.";
          HoursAccntLinesRec."Line No." := LineNo;
          HoursAccntLinesRec."Posting Date" := TODAY;
          HoursAccntLinesRec."Project No." := TempJobRec."No.";
          HoursAccntLinesRec.Type := HoursAccntLinesRec.Type::Project;
          HoursAccntLinesRec."Cost Object" := Globaldim2code;
          HoursAccntLinesRec."Wage Component" := WageComp;
          HoursAccntLinesRec."Source Code" := GenJournal."Source Code";
          HoursAccntLinesRec."Reason Code" := GenJournal."Reason Code";
          HoursAccntLinesRec."Component Type" := HoursAccntLinesRec."Component Type"::Hours;
          HoursAccntLinesRec.INSERT(TRUE);
          LineNo := LineNo + 10000;
        UNTIL TempJobRec.NEXT = 0;

      IF TempServOrderRec.FINDSET THEN
        REPEAT
          HoursAccntLinesRec.INIT;
          HoursAccntLinesRec.Year := CurrentYear;
          HoursAccntLinesRec.Week := CurrentWeek;
          HoursAccntLinesRec."Employee No." := iHourAccountingRec."Employee No.";
          HoursAccntLinesRec."Line No." := LineNo;
          HoursAccntLinesRec."Posting Date" := TODAY;
          HoursAccntLinesRec."Service Order No." := TempServOrderRec."No.";
          HoursAccntLinesRec.Type := HoursAccntLinesRec.Type::Service;
          HoursAccntLinesRec."Cost Object" := Globaldim2code;
          HoursAccntLinesRec."Wage Component" := WageComp;
          HoursAccntLinesRec."Source Code" := GenJournal."Source Code";
          HoursAccntLinesRec."Reason Code" := GenJournal."Reason Code";
          HoursAccntLinesRec."Component Type" := HoursAccntLinesRec."Component Type"::Hours;
          HoursAccntLinesRec.INSERT(TRUE);
          LineNo := LineNo + 10000;
        UNTIL TempServOrderRec.NEXT = 0;

      IF TempHourLinesRec.FINDSET THEN
        REPEAT
          HoursAccntLinesRec.INIT;
          HoursAccntLinesRec.Year := CurrentYear;
          HoursAccntLinesRec.Week := CurrentWeek;
          HoursAccntLinesRec."Employee No." := iHourAccountingRec."Employee No.";
          HoursAccntLinesRec."Line No." := LineNo;
          HoursAccntLinesRec."Posting Date" := TODAY;
          HoursAccntLinesRec.Type := HoursAccntLinesRec.Type::Indirect;
          HoursAccntLinesRec."Cost Object" := Globaldim2code;
          HoursAccntLinesRec."Wage Component" := TempHourLinesRec."Wage Component";
          HoursAccntLinesRec."Component Type" := HoursAccntLinesRec."Component Type"::Hours;
          HoursAccntLinesRec."Cost Code" := TempHourLinesRec."Cost Code";
          HoursAccntLinesRec."Cost Object" := TempHourLinesRec."Cost Object";
          HoursAccntLinesRec."Cost Component" := TempHourLinesRec."Cost Component";
          HoursAccntLinesRec.INSERT(TRUE);
          LineNo := LineNo + 10000;
        UNTIL TempHourLinesRec.NEXT = 0;
    END;

    PROCEDURE FillTempTables@1100485031();
    BEGIN
      IF PostedHourLineRec.FINDSET THEN BEGIN
        REPEAT
          IF PostedHourLineRec."Project No." <>'' THEN BEGIN
            TempJobRec.INIT;
            TempJobRec."No." := PostedHourLineRec."Project No.";
            IF TempJobRec.INSERT THEN;
          END ELSE
          IF PostedHourLineRec."Service Order No." <>'' THEN BEGIN
            TempServOrderRec.INIT;
            TempServOrderRec."No." :=  PostedHourLineRec."Service Order No.";
            IF TempServOrderRec.INSERT THEN;
          END;
          IF PostedHourLineRec.Type = PostedHourLineRec.Type::Indirect THEN BEGIN
            TempHourLinesRec.INIT;
            TempHourLinesRec."Wage Component" := PostedHourLineRec."Wage Component";
            TempHourLinesRec."Cost Code" := PostedHourLineRec."Cost Code";
            TempHourLinesRec."Cost Object" := PostedHourLineRec."Cost Object";
            TempHourLinesRec."Cost Component" := PostedHourLineRec."Cost Component";
            IF TempHourLinesRec.INSERT THEN;
          END;
        UNTIL PostedHourLineRec.NEXT = 0
      END;
    END;

    PROCEDURE CheckCostCompServOrderType@1100485018();
    VAR
      lvCostCompRec@1100485000 : Record 11012012;
    BEGIN
      lvCostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", "Receiving Company", "Cost Type",
        "Additional Cost (Service)");  //db, 24-02-10
    END;

    PROCEDURE LogModification@1100485030(VAR RecRef@1000 : RecordRef;VAR xRecRef@1001 : RecordRef);
    VAR
      FldRef@1003 : FieldRef;
      xFldRef@1004 : FieldRef;
      i@1002 : Integer;
      lHoursLogEntrRec@1100485001 : Record 11072024;
    BEGIN
      ProjectSetup.GET;
      IF NOT ProjectSetup."Activation Hour Log Entries" THEN
        EXIT;
      lHoursLogEntrRec.SETRANGE(Year, Year);
      lHoursLogEntrRec.SETRANGE(Week, Week);
      lHoursLogEntrRec.SETRANGE("Employee No.","Employee No.");
      IF lHoursLogEntrRec.FINDFIRST THEN BEGIN
        FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
          FldRef := RecRef.FIELDINDEX(i);
          xFldRef := xRecRef.FIELDINDEX(i);
          IF IsNormalField(RecRef.NUMBER,FldRef.NUMBER) THEN;
            IF FORMAT(FldRef.VALUE) <> FORMAT(xFldRef.VALUE) THEN
              InsertLogEntry(FldRef,xFldRef,RecRef,1);
        END;
      END;
    END;

    LOCAL PROCEDURE IsNormalField@12(TableNumber@1001 : Integer;FieldNumber@1002 : Integer) : Boolean;
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      GetField(TableNumber,FieldNumber,Field);
      EXIT(Field.Class = TempField.Class::Normal);
    END;

    LOCAL PROCEDURE GetField@7(TableNumber@1001 : Integer;FieldNumber@1002 : Integer;VAR Field2@1003 : Record 2000000041);
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      IF NOT TempField.GET(TableNumber,FieldNumber) THEN BEGIN
        Field.GET(TableNumber,FieldNumber);
        TempField := Field;
        TempField.INSERT;
      END;
      Field2 := TempField;
    END;

    LOCAL PROCEDURE InsertLogEntry@8(VAR FldRef@1000 : FieldRef;VAR xFldRef@1001 : FieldRef;VAR RecRef@1004 : RecordRef;TypeOfChange@1002 : 'Insertion,Modification,Deletion');
    VAR
      lHoursLogEntrLinesRec@1100485000 : Record 11072025;
    BEGIN
      lHoursLogEntrLinesRec.SETRANGE(Year,Year);
      lHoursLogEntrLinesRec.SETRANGE(Week,Week);
      lHoursLogEntrLinesRec.SETRANGE("Employee No.","Employee No.");
      IF lHoursLogEntrLinesRec.FINDLAST THEN
        LineNo := lHoursLogEntrLinesRec."Line No." + 100
      ELSE
        LineNo := 10000;

      lHoursLogEntrLinesRec.INIT;
      lHoursLogEntrLinesRec."Line No." := LineNo;
      lHoursLogEntrLinesRec.Year := Year;
      lHoursLogEntrLinesRec.Week := Week;
      lHoursLogEntrLinesRec."Employee No." := "Employee No.";
      lHoursLogEntrLinesRec.Date := TODAY;
      lHoursLogEntrLinesRec.Time := TIME;
      IF UserSetupRec.GET(USERID) THEN
        lHoursLogEntrLinesRec."Consentor Change" := UserSetupRec."Employee No."
      ELSE
        ERROR(Text013);
      lHoursLogEntrLinesRec.Field := FldRef.CAPTION;

      IF STRLEN(FormatValue(xFldRef)) < 50 THEN
        lHoursLogEntrLinesRec."Old Value" := FormatValue(xFldRef)
      ELSE
        lHoursLogEntrLinesRec."Old Value" := DELSTR((FormatValue(xFldRef)),50);
      IF STRLEN(FormatValue(FldRef)) < 50 THEN
        lHoursLogEntrLinesRec."New Value" := FormatValue(FldRef)
      ELSE
        lHoursLogEntrLinesRec."New Value" := DELSTR((FormatValue(FldRef)),50);

      lHoursLogEntrLinesRec.Type := Type;
      lHoursLogEntrLinesRec."Cost Code" := "Cost Code";
      lHoursLogEntrLinesRec."Receiving Company" := "Receiving Company";
      lHoursLogEntrLinesRec."Service Order No." := "Service Order No.";
      lHoursLogEntrLinesRec."Service Location No." := "Service Location No.";
      lHoursLogEntrLinesRec."Project No." := "Project No.";
      lHoursLogEntrLinesRec.Element := Element;
      lHoursLogEntrLinesRec."Extension Contract" := "Extension Contract";
      lHoursLogEntrLinesRec."Rental Unit" := "Rental Unit";
      lHoursLogEntrLinesRec."Estimate No." := "Estimate No.";
      lHoursLogEntrLinesRec."Try-out No." := "Try-out No.";
      lHoursLogEntrLinesRec."Plant Location" := "Plant Location";
      lHoursLogEntrLinesRec."Plant Type" := "Plant Type";
      lHoursLogEntrLinesRec."Plant No." := "Plant No.";
      lHoursLogEntrLinesRec."Plant Rate Code" := "Plant Rate Code";
      lHoursLogEntrLinesRec."Cost Component Plant" := "Cost Component Plant";
      lHoursLogEntrLinesRec."Cost Object" := "Cost Object";
      lHoursLogEntrLinesRec."Cost Component" := "Cost Component";
      lHoursLogEntrLinesRec."Wage Component" := "Wage Component";
      lHoursLogEntrLinesRec.Monday := Monday;
      lHoursLogEntrLinesRec.Tuesday := Tuesday;
      lHoursLogEntrLinesRec.Wednesday := Wednesday;
      lHoursLogEntrLinesRec.Thursday := Thursday;
      lHoursLogEntrLinesRec.Friday := Friday;
      lHoursLogEntrLinesRec.Saturday := Saturday;
      lHoursLogEntrLinesRec.Sunday := Sunday;
      lHoursLogEntrLinesRec.Comment := Comment;
      lHoursLogEntrLinesRec."Department Code Employee" := "Department Code Employee";
      lHoursLogEntrLinesRec."Department Code Project" := "Department Code";
      lHoursLogEntrLinesRec."Reason Code" := "Reason Code";
      lHoursLogEntrLinesRec.Amount := "Amount (LCY)";
      lHoursLogEntrLinesRec.Quantity := Quantity;
      lHoursLogEntrLinesRec."Unit Cost" := "Unit Cost (LCY)";

      lHoursLogEntrLinesRec.INSERT;

      IF lHoursLogEntrLinesRec.Field = TotalLineCaption THEN
        lHoursLogEntrLinesRec.DELETE;
      IF lHoursLogEntrLinesRec.Field = AmountCaption THEN
        lHoursLogEntrLinesRec.DELETE;
    END;

    LOCAL PROCEDURE FormatValue@17(VAR FldRef@1000 : FieldRef) : Text[250];
    BEGIN
      EXIT(FORMAT(FldRef.VALUE));
    END;

    PROCEDURE SetFromHourAccByProj@1100485019(ICurrFieldNo@1100485000 : Integer);
    BEGIN
      gFromHourAccByProj := TRUE;
      gCurrFieldNo := ICurrFieldNo;
    END;

    LOCAL PROCEDURE GetCurrFieldNo@1100485029() : Integer;
    BEGIN
      IF NOT gFromHourAccByProj THEN
        EXIT(CurrFieldNo)
      ELSE
        EXIT(gCurrFieldNo);
    END;

    PROCEDURE UpdatePreregistration@1100485020();
    VAR
      LvHourRec@1100485000 : Record 11012038;
    BEGIN
      IF LvHourRec.GET(Year,Week,"Employee No.") THEN BEGIN
        LvHourRec.Received := TRUE;
        LvHourRec."Delivery Date" := TODAY;
        LvHourRec."Recorded By" := USERID;
        LvHourRec.MODIFY;
      END;
    END;

    PROCEDURE GetCostPrice@1100485032(GetRentalPrice@1100525001 : Boolean;VAR FCurrency@1100525002 : Boolean) RetCostPrice : Decimal;
    VAR
      lCostPriceReadOrderLine@1100485022 : Record 11020355;
      lBudgetRateRec@1100485021 : Record 11012000;
      lProjBudgetRateRec@1100485020 : Record 11020231;
      lProjCostObjectCostPriceRec@1100485023 : Record 11020365;
      lProjEmplCostPriceRec@1100485019 : Record 11020253;
      lProjEmplWageCCostPriceRec@1100485017 : Record 11020366;
      lProjTradeAssCostPriceRec@1100485016 : Record 11020361;
      lProjTradeAssWageCostPriceRec@1100485015 : Record 11020362;
      lEmplCostPriceRec@1100485014 : Record 11020315;
      lEmplWageCCostPriceRec@1100525000 : Record 11020390;
      lEmplCostObjCostPriceRec@1100485013 : Record 11020259;
      lTradeAssCostPriceRec@1100485012 : Record 11020269;
      lTradeAssWageCCostPriceRec@1100485011 : Record 11020295;
      lServContEmplCostPriceRec@1100485010 : Record 11020322;
      lServTradeAssCostPriceRec@1100485009 : Record 11020323;
      lServCostObjCostPriceRec@1100485008 : Record 11020324;
      lServTradeWageCCostPriceRec@1100485007 : Record 11020325;
      lCostObjectCostPriceRec@1100485006 : Record 11020356;
      lDepartmentCostPriceRec@1100485005 : Record 11020357;
      lDepCostObjCostPriceRec@1100485004 : Record 11020358;
      lDepTradeAssCostPriceRec@1100485003 : Record 11020359;
      lDepTradeWageCostPriceRec@1100485002 : Record 11020360;
      lExceptionalCostPriceRec@1100485001 : Record 11020363;
      lExceptCostPriceperDateRec@1100485000 : Record 11020364;
      lRecRef@1100485018 : RecordRef;
    BEGIN
      CLEAR(DimValRec);
      CLEAR(EmplRec);
      "Cost Price Found at" := '';
      FCurrency := FALSE;   //M 25781
      IF GetPlantSalesPrice(RetCostPrice) THEN  //DP00812
        EXIT;

      CheckCompanyIC;

      IF "Cost Object" <> '' THEN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');
      IF "Employee No." <> '' THEN
        EmplRec.GET("Employee No.");

      WITH lCostPriceReadOrderLine DO BEGIN
        SETCURRENTKEY("Price Type", "Read Order");
        IF GetRentalPrice THEN
          SETRANGE("Price Type", "Price Type"::"Rental - External Employee")
        ELSE
          CASE Type OF
            Type::Project:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"Project - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::Project);
            Type::Service:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"Service - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::Service);
            Type::Indirect:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"Indirect - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::Indirect);
            Type::Plant:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"Plant - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::Plant);
          END;
        SETFILTER("Read Order",'1..');
        IF FINDSET THEN
          REPEAT
            CASE "Table No." OF
              DATABASE::"Budget Rate":
                BEGIN
                  lBudgetRateRec.CHANGECOMPANY("Receiving Company");
                  lBudgetRateRec.SETRANGE(Code, DimValRec."Rate Code");
                  lBudgetRateRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lBudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lBudgetRateRec.FINDLAST THEN BEGIN
                    RetCostPrice := lBudgetRateRec.Rate;
                    lRecRef.GETTABLE(lBudgetRateRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Project Budget Rate":
                BEGIN
                  lProjBudgetRateRec.CHANGECOMPANY("Receiving Company");
                  lProjBudgetRateRec.SETRANGE("Project No.", "Project No.");
                  lProjBudgetRateRec.SETRANGE("Rate Code", DimValRec."Rate Code");
                  lProjBudgetRateRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lProjBudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjBudgetRateRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjBudgetRateRec.Rate;
                    lRecRef.GETTABLE(lProjBudgetRateRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Proj - Cost Object Cost Price":
                BEGIN
                  lProjCostObjectCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjCostObjectCostPriceRec.SETRANGE("Project No.", "Project No.");
                  lProjCostObjectCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lProjCostObjectCostPriceRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lProjCostObjectCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjCostObjectCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjCostObjectCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lProjCostObjectCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Project - Employee Cost Price":
                BEGIN
                  lProjEmplCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjEmplCostPriceRec.SETRANGE("Project No.", "Project No." );
                  lProjEmplCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lProjEmplCostPriceRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lProjEmplCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjEmplCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjEmplCostPriceRec."Cost Price"; //29-12-2010, Multi Currency, instead of Cost Price (LCY)
                    lRecRef.GETTABLE(lProjEmplCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Proj - Empl - Wage Cost Price":
                BEGIN
                  lProjEmplWageCCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjEmplWageCCostPriceRec.SETRANGE("Project No.", "Project No." );
                  lProjEmplWageCCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lProjEmplWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lProjEmplWageCCostPriceRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lProjEmplWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjEmplWageCCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjEmplWageCCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lProjEmplWageCCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Project - Trade As. Cost Price":
                BEGIN
                  lProjTradeAssCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjTradeAssCostPriceRec.SETRANGE("Project No.", "Project No.");
                  lProjTradeAssCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lProjTradeAssCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lProjTradeAssCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjTradeAssCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjTradeAssCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lProjTradeAssCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Proj - Trade - Wage Cost Price":
                BEGIN
                  lProjTradeAssWageCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjTradeAssWageCostPriceRec.SETRANGE("Project No.", "Project No.");
                  lProjTradeAssWageCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lProjTradeAssWageCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lProjTradeAssWageCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lProjTradeAssWageCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjTradeAssWageCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjTradeAssWageCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lProjTradeAssWageCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Employee Cost Price":
                BEGIN
                  lEmplCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lEmplCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lEmplCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lEmplCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lEmplCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lEmplCostPriceRec."Cost Price"; //29-12-2010, Multi Currency, instead of Cost Price (LCY)
                    FCurrency := TRUE;  //M 25781
                    lRecRef.GETTABLE(lEmplCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Employee - Wage C. Cost Price":
                BEGIN
                  lEmplWageCCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lEmplWageCCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lEmplWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lEmplWageCCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lEmplWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lEmplWageCCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lEmplWageCCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lEmplWageCCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Empl. - Cost Obj. Cost Price":
                BEGIN
                  lEmplCostObjCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lEmplCostObjCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lEmplCostObjCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lEmplCostObjCostPriceRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lEmplCostObjCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lEmplCostObjCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lEmplCostObjCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lEmplCostObjCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Trade Association Cost Price":
                BEGIN
                  lTradeAssCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lTradeAssCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lTradeAssCostPriceRec.SETRANGE("Starting Date",0D,"Posting Date");
                  lTradeAssCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lTradeAssCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lTradeAssCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lTradeAssCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Trade As. - Wage C. Cost Price":
                BEGIN
                  lTradeAssWageCCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lTradeAssWageCCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lTradeAssWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lTradeAssWageCCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lTradeAssWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lTradeAssWageCCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice  := lTradeAssWageCCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lTradeAssWageCCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Serv. - Empl. Cost Price":
                BEGIN
                  lServContEmplCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lServContEmplCostPriceRec.SETRANGE("Service Contract No.", "Service Contract No.");
                  lServContEmplCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lServContEmplCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lServContEmplCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lServContEmplCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lServContEmplCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lServContEmplCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Serv. - Trade As. Cost Price":
                BEGIN
                  lServTradeAssCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lServTradeAssCostPriceRec.SETRANGE("Service Contract No.", "Service Contract No.");
                  lServTradeAssCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lServTradeAssCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lServTradeAssCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lServTradeAssCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lServTradeAssCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lServTradeAssCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Serv. - Cost Object Cost Price":
                BEGIN
                  lServCostObjCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lServCostObjCostPriceRec.SETRANGE("Service Contract No.", "Service Contract No.");
                  lServCostObjCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lServCostObjCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lServCostObjCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lServCostObjCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lServCostObjCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lServCostObjCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Serv. - Trade -Wage Cost Price":
                BEGIN
                  lServTradeWageCCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lServTradeWageCCostPriceRec.SETRANGE("Service Contract No.", "Service Contract No.");
                  lServTradeWageCCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lServTradeWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lServTradeWageCCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lServTradeWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lServTradeWageCCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lServTradeWageCCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lServTradeWageCCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Cost Object Cost Price":
                BEGIN
                  lCostObjectCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lCostObjectCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lCostObjectCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lCostObjectCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lCostObjectCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lCostObjectCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lCostObjectCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Department Cost Price":
                BEGIN
                  lDepartmentCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lDepartmentCostPriceRec.SETRANGE("Department Code", EmplRec."Global Dimension 1 Code");
                  lDepartmentCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lDepartmentCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lDepartmentCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lDepartmentCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lDepartmentCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Dep. - Cost Object Cost Price":
                BEGIN
                  lDepCostObjCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lDepCostObjCostPriceRec.SETRANGE("Department Code", EmplRec."Global Dimension 1 Code");
                  lDepCostObjCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lDepCostObjCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lDepCostObjCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lDepCostObjCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lDepCostObjCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lDepCostObjCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Dep. - Trade As. Cost Price":
                BEGIN
                  lDepTradeAssCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lDepTradeAssCostPriceRec.SETRANGE("Department Code", EmplRec."Global Dimension 1 Code");
                  lDepTradeAssCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lDepTradeAssCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lDepTradeAssCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lDepTradeAssCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lDepTradeAssCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lDepTradeAssCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Dep. - Trade - Wage Cost Price":
                BEGIN
                  lDepTradeWageCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lDepTradeWageCostPriceRec.SETRANGE("Department Code", EmplRec."Global Dimension 1 Code");
                  lDepTradeWageCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lDepTradeWageCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lDepTradeWageCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lDepTradeWageCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lDepTradeWageCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lDepTradeWageCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lDepTradeWageCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Exceptional Cost Price":
                BEGIN
                  IF lExceptionalCostPriceRec.FINDLAST THEN
                    REPEAT
                      IF TestExceptionalPrice(lExceptionalCostPriceRec) THEN BEGIN
                        lExceptCostPriceperDateRec.SETRANGE(Level, lExceptionalCostPriceRec.Level);
                        lExceptCostPriceperDateRec.SETRANGE("Starting Date", 0D, "Posting Date");
                        lExceptCostPriceperDateRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                        IF lExceptCostPriceperDateRec.FINDLAST THEN BEGIN
                          RetCostPrice := lExceptCostPriceperDateRec."Cost Price";
                          lRecRef.GETTABLE(lExceptCostPriceperDateRec);
                          FillCostPriceFound(lRecRef);
                          EXIT;
                        END;
                      END;
                    UNTIL lExceptionalCostPriceRec.NEXT(-1) = 0;
                END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TestExceptionalPrice@1100485035(IExceptionalCostPriceRec@1100485000 : Record 11020363) : Boolean;
    BEGIN
      IF (IExceptionalCostPriceRec."Employee No." <> '') AND (IExceptionalCostPriceRec."Employee No." <> "Employee No.") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Trade Association" <> '') AND
        (IExceptionalCostPriceRec."Trade Association" <> EmplRec."Trade Association") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Department Code" <> '') AND
         (IExceptionalCostPriceRec."Department Code" <> EmplRec."Global Dimension 1 Code") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Cost Object" <> '') AND (IExceptionalCostPriceRec."Cost Object" <> "Cost Object") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Project No." <> '') AND (IExceptionalCostPriceRec."Project No." <> "Project No.") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec.Element <> '') AND (IExceptionalCostPriceRec.Element <> Element) THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Wage Component" <> '') AND (IExceptionalCostPriceRec."Wage Component" <> "Wage Component") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Cost Component" <> '') AND (IExceptionalCostPriceRec."Cost Component" <> "Cost Component") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Extension Contract" <> '') AND
         (IExceptionalCostPriceRec."Extension Contract" <> "Extension Contract") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Service Order No." <> '') AND
         (IExceptionalCostPriceRec."Service Order No." <> "Service Order No.") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Service Contract No." <> '') AND
         (IExceptionalCostPriceRec."Service Contract No." <> "Service Contract No.") THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FillCostPriceFound@1100485033(lRecRef@1100485006 : RecordRef);
    VAR
      lAllObjWithCapRec@1100485001 : Record 2000000058;
    BEGIN
      lAllObjWithCapRec.SETRANGE("Object Type", lAllObjWithCapRec."Object Type"::Table);
      lAllObjWithCapRec.SETRANGE("Object ID", lRecRef.NUMBER);
      IF lAllObjWithCapRec.FINDFIRST THEN;

      lRecRef.RESET;
      lRecRef.SETRECFILTER;

      "Cost Price Found at" := COPYSTR(
        STRSUBSTNO(Text015, lAllObjWithCapRec."Object Caption", lRecRef.GETFILTERS), 1, MAXSTRLEN("Cost Price Found at"));
    END;

    PROCEDURE SetRenameHeader@1100485005(lRenamingHeader@1100485000 : Boolean);
    BEGIN
      RenamingHeader := lRenamingHeader;
    END;

    PROCEDURE ElementDescription@1100525001();
    BEGIN
      //* C-017858 (16-11-2009) Now also element for plant (if plant location is linked to a project)
      IF Type <> Type::Plant THEN BEGIN
        IF "Receiving Company" = '' THEN
          EXIT;
        "Element Description" := '';
        IF Element = '' THEN
          EXIT;
        ProjElemRec.CHANGECOMPANY("Receiving Company");
        IF ProjElemRec.GET("Project No.",Element) THEN
          "Element Description" := ProjElemRec.Description;
      END ELSE BEGIN
        "Element Description" := '';
        IF Element = '' THEN
          EXIT;
        IF NOT CheckPlantLocLinkedToProject() THEN
          EXIT;
        IF ProjElemRec.GET(PlantLocRec."Project No.",Element) THEN
          "Element Description" := ProjElemRec.Description;
      END;
    END;

    PROCEDURE UpdateServHoursGanttChart@1100525002(UpdateAction@1100525000 : 'Insert,Modify,Delete,Rename,Post');
    BEGIN
      GanttChartMgt.UpdateHourAcc(UpdateAction,Rec,xRec);
    END;

    PROCEDURE CheckPlantLocLinkedToProject@1100525005() : Boolean;
    BEGIN
      //* C-017858 (16-11-2009)
      IF (Type <> Type::Plant) OR ("Plant Location" = '') THEN
        EXIT(FALSE);
      CheckCompanyIC;
      IF NOT PlantLocRec.GET("Plant Location") THEN
        EXIT(FALSE);
      IF PlantLocRec."Project No." = '' THEN
        EXIT(FALSE);

      IF PlantLocRec."Company Name" <> '' THEN
        PlantLocProjectCompany := PlantLocRec."Company Name"
      ELSE
        PlantLocProjectCompany := "Receiving Company";
      IF PlantLocProjectCompany <> "Receiving Company" THEN
        ProjElemRec.CHANGECOMPANY(PlantLocProjectCompany);

      EXIT(TRUE);
    END;

    PROCEDURE CheckAdditionalCostService@1100525017();
    BEGIN
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      CheckCompanyIC;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Cost Type")) THEN BEGIN
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN
        BEGIN
          "Additional Cost (Service)" :=      //*** Validate doesn't work because of recursion
            ServOrderRec.GetAdditionalCostService("Service Order No.","Cost Object","Cost Type"+1,"Receiving Company");
          FillDepartmentCode;
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE SetUpdateFromProjHourLine@1100525004(NewUpdateFromProjHourLine@1100525000 : Boolean);
    BEGIN
      UpdateFromProjHourLine := NewUpdateFromProjHourLine;
    END;

    PROCEDURE ValidateAdditionalCost@1100525011();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      SaveCostComp := "Cost Component";
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");

      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;  //db, 18-03-10: T4641

      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525010();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        VALIDATE("Additional Cost (Service)", CostCompRec."Additional Cost (Service)");
      END;
    END;

    PROCEDURE CheckProjectStatus@1100525006();
    VAR
      BlockingCode@1100525000 : Record 11012027;
    BEGIN
      ProjRec.CHANGECOMPANY("Receiving Company");
      ProjRec.GET("Project No.");
      ICProjSetup.CHANGECOMPANY("Receiving Company");
      ICProjSetup.GET;

      IF (ProjRec."Blocking Code" <> '') AND
         ((ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
          (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished") OR
          ((ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND ICProjSetup."Provisions at Closure")
         ) THEN
      BEGIN
        IF NOT External THEN
          BlockingCode.Switch := BlockingCode.Switch::"Hour Accounting"
        ELSE
          BlockingCode.Switch := BlockingCode.Switch::"Post Hours External";
        BlockingCode.CheckBlocked(ProjRec."Blocking Code", BlockingCode.Switch, ProjRec, TRUE);
      END ELSE BEGIN
        IF (ICProjSetup."Provisions at Closure") THEN
          ProjRec.CheckProjectStatus(-1)
        ELSE
          ProjRec.CheckProjectStatus(1);
      END;
    END;

    PROCEDURE CreateHoursConsentLine@1100528400();
    VAR
      HoursConsentLine@1100528400 : Record 11020437;
      Employee@1100528402 : Record 5200;
      SerialNumber@1100528403 : Integer;
      Consenter@1100528404 : Code[50];
    BEGIN
      IF NOT GetHourConsenterInfo(SerialNumber, Consenter, -2147483647) THEN
        EXIT;

      Employee.GET("Employee No.");

      IF NOT HoursConsentLine.GET(
        Year,
        Week,
        "Employee No.",
        HoursConsentLine.LineType::Normal,
        SerialNumber,
        DetermineHoursConsentLineType(Rec),
        DetermineHoursConsentLineNo(Rec),
        "Line No.",
        Consenter,
        FALSE,
        FALSE,
        HoursConsentLine.Source::"Hour Accounting",
        "Supplying Company")
      THEN BEGIN
        HoursConsentLine.INIT;
        HoursConsentLine.Consenter := Consenter;
        HoursConsentLine.Year := Year;
        HoursConsentLine.Week := Week;
        HoursConsentLine.Employee := "Employee No.";
        HoursConsentLine."Wage Component" := "Wage Component";
        HoursConsentLine."Cost Object" := "Cost Object";
        HoursConsentLine.LineType := HoursConsentLine.LineType::Normal;
        HoursConsentLine."Serial Number" := SerialNumber;
        HoursConsentLine.Source := HoursConsentLine.Source::"Hour Accounting";
        HoursConsentLine."Line No." := "Line No.";
        HoursConsentLine."Hours Quantity" := "Total Line";
        HoursConsentLine.Amount := "Amount (LCY)";
        HoursConsentLine.Type := DetermineHoursConsentLineType(Rec);
        HoursConsentLine."No." := DetermineHoursConsentLineNo(Rec);
        HoursConsentLine."Global Dimension 1 Code" := Employee."Global Dimension 1 Code";
        HoursConsentLine."Supplying Company" := "Supplying Company";
        HoursConsentLine."Receiving Company" := "Receiving Company";
      //kkleermaker.sn, 110818, M28423
        HoursConsentLine.Element := Element;
        HoursConsentLine."Extension Contract" := "Extension Contract";
      //kkleermaker.en, 110818, M28423
        //Call C028290 sn
        HoursConsentLine."Plant Company" := "Receiving Company";
        HoursConsentLine."Plant Type" := "Plant Type";
        HoursConsentLine."Plant No." := "Plant No.";
        //Call C028290 en
        HoursConsentLine."Start Time" := "Start Time"; //Call C024380
        HoursConsentLine."End Time" := "End Time"; //Call C024380
        HoursConsentLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE GetHourConsenterInfo@1100528401(VAR SerialNumber@1100528400 : Integer;VAR Consenter@1100528401 : Code[50];MinimumSerialNo@1100528407 : Integer) : Boolean;
    VAR
      HoursConsentSetup@1100528406 : Record 11020436;
    BEGIN
      EXIT(HoursConsentSetup.GetHourConsenterInfo(
        SerialNumber, Consenter, HoursConsentSetup.Source::"Hour Accounting", DetermineHoursConsentLineType(Rec),
        "Project No.", "Service Contract No.", "Service Order No.", "Employee No.", "Plant Location", "Receiving Company",
        "Supplying Company", MinimumSerialNo));
    END;

    PROCEDURE GetApplicableHoursConsentSetup@1100528405(VAR HoursConsentSetup@1100528400 : Record 11020436;MinimumSerialNo@1100528401 : Integer) : Boolean;
    BEGIN
      EXIT(HoursConsentSetup.GetApplicableHoursConsentSetup(
        HoursConsentSetup, HoursConsentSetup.Source::"Hour Accounting", DetermineHoursConsentLineType(Rec), "Project No.",
        "Service Contract No.", "Service Order No.", "Employee No.", "Plant Location", MinimumSerialNo));
    END;

    LOCAL PROCEDURE DetermineHoursConsentLineType@1100528403(HourAccountingLine@1100528400 : Record 11012039) : Integer;
    VAR
      HoursConsentLine@1100528401 : Record 11020437;
    BEGIN
      CASE HourAccountingLine.Type OF
        HourAccountingLine.Type::Project:
          EXIT(HoursConsentLine.Type::Project);
        HourAccountingLine.Type::Service:
          EXIT(HoursConsentLine.Type::Service);
        HourAccountingLine.Type::Indirect:
          EXIT(HoursConsentLine.Type::Indirect);
        HourAccountingLine.Type::Plant:
          EXIT(HoursConsentLine.Type::Plant);
      END;
    END;

    LOCAL PROCEDURE DetermineHoursConsentLineNo@1100528402(HourAccountingLine@1100528400 : Record 11012039) : Code[20];
    BEGIN
      CASE HourAccountingLine.Type OF
        HourAccountingLine.Type::Project:
          EXIT(HourAccountingLine."Project No.");
        HourAccountingLine.Type::Service:
          EXIT(HourAccountingLine."Service Contract No.");
        HourAccountingLine.Type::Indirect:
          EXIT(HourAccountingLine."Cost Code");
        HourAccountingLine.Type::Plant:
          EXIT(HourAccountingLine."Plant Location");
      END;
    END;

    PROCEDURE GetNextFreeLineNo@1100528700() : Integer;
    VAR
      HourAccountingLine@1100528700 : Record 11012039;
    BEGIN
      HourAccountingLine := Rec;
      HourAccountingLine.RESET;
      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      IF HourAccountingLine.FINDLAST THEN
        EXIT(HourAccountingLine."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE FillDepartmentCode@1100409000() : Code[20];
    VAR
      TradeAssRec@1100409005 : Record 11012015;
      TableID@1100409001 : ARRAY [10] OF Integer;
      No@1100409000 : ARRAY [10] OF Code[20];
      GlobalDim1Code@1100409003 : Code[20];
      GlobalDim2Code@1100409002 : Code[20];
    BEGIN
      IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) THEN BEGIN
        VALIDATE("Department Code",  '');
        EXIT;
      END;

      IF ("Supplying Company" <> '') AND ("Supplying Company" <> COMPANYNAME) THEN BEGIN //**CALL C005231 snew
        IF Type = Type::Indirect THEN BEGIN
          VALIDATE("Department Code",  '');
          EXIT;
        END;
      END;                                                                               //**CALL C005231 enew

      IF Type <> Type::Indirect THEN BEGIN
        IF "Service Order No." <> '' THEN BEGIN
          ServOrderRec.GET("Service Order No.");
          IF "Additional Cost (Service)" THEN
            GlobalDim1Code := ServOrderRec."Department Code (Other)"
          ELSE
            GlobalDim1Code := ServOrderRec."Global Dimension 1 Code";
        END ELSE BEGIN
          TableID[1] := DATABASE::Job;
          No[1] := "Project No.";
          TableID[2] := DATABASE::"Service Order";
          No[2] := "Service Order No.";
          TableID[3] := DATABASE::"Service-Contract";
          No[3] := "Service Contract No.";
          TableID[4] := DATABASE::"Plant Number";
          No[4] := DimMgt.MakeCombinedPlantNo("Plant Type", "Plant No.");
          TableID[5] := DATABASE::"Plant Type";
          No[5] := "Plant Type";

          DimMgt.SetCompany("Receiving Company");
          "Dimension Set ID" :=
            DimMgt.GetDefaultDimID(TableID,No,'',GlobalDim1Code,GlobalDim2Code, 0,0);

          DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GlobalDim1Code,GlobalDim2Code);
        END;
      END ELSE BEGIN
        IF "Cost Code" = '' THEN BEGIN  //**CALL C005231 snew
          VALIDATE("Department Code",  '');
          EXIT;
        END;                            //**CALL C005231 enew
        EmplRec.GET("Employee No.");
        TradeAssRec.INIT; //**CALL T001981 new
        CostCodeRec.INIT; //**CALL T001981 new
        IF TradeAssRec.GET(EmplRec."Trade Association") THEN;  //**CALL T001981 changed
        IF CostCodeRec.GET("Cost Code") THEN;                  //**CALL T001981 changed
        IF CostCodeRec."Source Global Dim 1 Code" = CostCodeRec."Source Global Dim 1 Code"::Fixed THEN
          GlobalDim1Code := CostCodeRec."Global Dimension 1 Code"
        ELSE
          IF CostCodeRec."Source Global Dim 1 Code" = CostCodeRec."Source Global Dim 1 Code"::Employee THEN
            GlobalDim1Code := EmplRec."Global Dimension 1 Code"
          ELSE
            IF TradeAssRec."Source Department Code" = TradeAssRec."Source Department Code"::"Trade Association" THEN
              GlobalDim1Code := TradeAssRec."Department Code"
            ELSE
              GlobalDim1Code := EmplRec."Global Dimension 1 Code";
      END;

      VALIDATE("Department Code", GlobalDim1Code);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      //Show only, not editable
      DimMgt.SetCompany("Receiving Company");
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3 %4',Year,Week,"Employee No.","Line No."));
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012039) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012039');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Hour Accounting", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE ValidatePlantNo@1100525031();
    VAR
      PlantType@1100525000 : Record 11012551;
      PurchaseLine@1100525001 : Record 39;
      PlantSetup@1100525002 : Record 11012550;
    BEGIN
      //**4PS
      IF ("Plant Type" <> '') AND ("Plant No." = '') THEN BEGIN
        PlantSetup.GET;
        IF PlantSetup."Posting on Unique Plant No." THEN
          IF PlantType.GET("Plant Type") THEN
            IF NOT PlantType.Bulk THEN
              IF PlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
                TESTFIELD("Plant No.");
      END;
    END;

    PROCEDURE GetNoWageComponentTotal@1100528302() Result : Decimal;
    VAR
      HourAccountingLine@1100528700 : Record 11012039;
      PostedHourLine@1100528701 : Record 11012085;
    BEGIN
      Result := 0;

      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      HourAccountingLine.SETRANGE("Wage Component", '');
      IF HourAccountingLine.FINDSET THEN
        REPEAT
          Result += HourAccountingLine.Quantity;
          Result += HourAccountingLine."Total Line";
        UNTIL HourAccountingLine.NEXT = 0;

      PostedHourLine.SETRANGE(Year, Year);
      PostedHourLine.SETRANGE(Week, Week);
      PostedHourLine.SETRANGE("Employee No.", "Employee No.");
      PostedHourLine.SETRANGE("Wage Component", '');
      IF PostedHourLine.FINDSET THEN
        REPEAT
          Result += PostedHourLine.Quantity;
          Result += PostedHourLine."Total Line";
        UNTIL PostedHourLine.NEXT = 0;

      EXIT(Result);
    END;

    PROCEDURE GetHoursFromChangeRequestTasks@1100528301(HourAccounting@1100528302 : Record 11012038);
    VAR
      ServiceSetup@1100528304 : Record 11012800;
      ChangeRequestTaskHourAcc@1100528300 : Record 11072222;
      HourAccountingLine@1100528301 : Record 11012039;
      ChangeRequestTask@1100528303 : Record 11072214;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Default Hour Cost Cd ChangeReq");

      ChangeRequestTaskHourAcc.SETRANGE("Employee No.", HourAccounting."Employee No.");
      ChangeRequestTaskHourAcc.SETRANGE(Year, HourAccounting.Year);
      ChangeRequestTaskHourAcc.SETRANGE(Week, HourAccounting.Week);
      ChangeRequestTaskHourAcc.SETRANGE(Processed, FALSE);
      IF (NOT ChangeRequestTaskHourAcc.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        HourAccountingLine.InitRecord;
        HourAccountingLine.VALIDATE(Year, ChangeRequestTaskHourAcc.Year);
        HourAccountingLine.VALIDATE(Week, ChangeRequestTaskHourAcc.Week);
        HourAccountingLine.VALIDATE("Employee No.", ChangeRequestTaskHourAcc."Employee No.");
        HourAccountingLine.VALIDATE("Supplying Company", HourAccounting."Supplying Company");
        HourAccountingLine."Line No." := HourAccountingLine.GetNextFreeLineNo;
        HourAccountingLine.VALIDATE(Type, HourAccountingLine.Type::Indirect);
        HourAccountingLine.VALIDATE("Cost Code", ServiceSetup."Default Hour Cost Cd ChangeReq");
        CASE ChangeRequestTaskHourAcc.Day OF
          ChangeRequestTaskHourAcc.Day::Monday:
            HourAccountingLine.VALIDATE(Monday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Tuesday:
            HourAccountingLine.VALIDATE(Tuesday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Wednesday:
            HourAccountingLine.VALIDATE(Wednesday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Thursday:
            HourAccountingLine.VALIDATE(Thursday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Friday:
            HourAccountingLine.VALIDATE(Friday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Saturday:
            HourAccountingLine.VALIDATE(Saturday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Sunday:
            HourAccountingLine.VALIDATE(Sunday, ChangeRequestTaskHourAcc.Hours);
        END;
        IF (HourAccountingLine."Total Line" <> 0) THEN BEGIN
          HourAccountingLine.Comment := COPYSTR(STRSUBSTNO('%1: %2-%3', ChangeRequestTask.TABLECAPTION,
            ChangeRequestTaskHourAcc."Change Request No.", ChangeRequestTaskHourAcc.Task), 1, MAXSTRLEN(HourAccountingLine.Comment));
          HourAccountingLine.INSERT(TRUE);

          //ChangeRequestTaskHourAcc.Processed := true;
          //ChangeRequestTaskHourAcc.modify(true);
        END;
      UNTIL (ChangeRequestTaskHourAcc.NEXT = 0);
    END;

    PROCEDURE LookupCostCode@1100528406();
    BEGIN
      CheckCompanyIC;
      CostCodeRec.Code := "Cost Code";
      IF PAGE.RUNMODAL(0, CostCodeRec) = ACTION::LookupOK THEN
        IF Type = Type::Indirect THEN
          VALIDATE("Cost Code", CostCodeRec.Code);
    END;

    PROCEDURE LookupProjectNo@1100528409();
    VAR
      PageNo@1100528400 : Integer;
    BEGIN
      CheckCompanyIC;
      ProjRec."No." := "Project No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN
        IF (Type = Type::Project) AND ("Connection No." = 0) THEN
          VALIDATE("Project No.", ProjRec."No.");
    END;

    PROCEDURE LookupCostObject@1100528410();
    BEGIN
      CheckCompanyIC;

      DimValRec.RESET;
      DimValRec.Code := "Cost Object";
      DimValRec.SETRANGE("Global Dimension No.", 2);
      //DP01010.sn
      IF External THEN
        DimValRec.SETFILTER("Cost Type",'%1|%2|%3|%4',
          DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Subcontracting,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry)
      ELSE
      //DP01010.en
        DimValRec.SETFILTER("Cost Type",'%1|%2|%3',
          DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry);
      DimValRec.SETRANGE("Project Filter", "Project No.");
      IF "Receiving Company" = '' THEN
        DimValRec.SETRANGE("Company Filter")
      ELSE
        DimValRec.SETRANGE("Company Filter", "Receiving Company");
      IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
        VALIDATE("Cost Object", DimValRec.Code);
      DimValRec.RESET;
    END;

    PROCEDURE GetLastLineNo@1100528303() : Integer;
    VAR
      HourAccountingLine@1100528300 : Record 11012039;
    BEGIN
      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      IF (HourAccountingLine.FINDLAST) THEN
        EXIT(HourAccountingLine."Line No.");
      EXIT(0);
    END;

    PROCEDURE GetServiceOrProjectAddress@1100529100() Address : Text[250];
    VAR
      HourAccountingLine@1100529100 : Record 11012039;
      Job@1100529101 : Record 11072003;
      ServiceOrder@1100529102 : Record 11012823;
      ServiceContract@1100529103 : Record 11012812;
    BEGIN
      IF "Project No." <> '' THEN BEGIN
        Job.CHANGECOMPANY("Receiving Company");
        IF Job.GET("Project No.") THEN
          Address := Job.Address;
      END;
      IF ("Service Order No." = '') AND ("Service Contract No." <> '') THEN BEGIN
        ServiceContract.CHANGECOMPANY("Receiving Company");
        IF ServiceContract.GET("Service Contract No.") THEN
          Address := ServiceContract.Address;
      END;
      IF "Service Order No." <> '' THEN BEGIN
        ServiceOrder.CHANGECOMPANY("Receiving Company");
        IF ServiceOrder.GET("Service Order No.") THEN
          Address := ServiceOrder.Address;
      END;
    END;

    LOCAL PROCEDURE GetPlantSalesPrice@1100529000(VAR SalesPrice@1100529000 : Decimal) : Boolean;
    VAR
      SalesPriceReadOrderLine@1100529001 : Record 11020376;
      SalesPriceMgt@1100529002 : Codeunit 11012036;
    BEGIN
      //DP00812
      IF Type = Type::Plant THEN BEGIN
        CheckCompanyIC;
        PlantSetupRec.GET;
        IF PlantSetupRec."Empl. Sales Rate as Hour Rate" THEN BEGIN
          IF (NOT PlantLocRec.GET("Plant Location")) OR ("Plant Location" = '') THEN
            PlantLocRec."Customer No." := '';
          SalesPrice := SalesPriceMgt.GetSalesPrice(
            SalesPriceReadOrderLine."Price Type"::Plant,
            '', '', '', PlantLocRec."Customer No.", '', "Wage Component", "Supplying Company", "Employee No.",
            '', '', '', "Plant Location", "Receiving Company", "Posting Date", 0, "Cost Price Found at");
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    BEGIN
    {
      4PS, 15-11-13, DP00483, Performance tuning:
      - MaintainSIFTIndex disabled for all keys
      - MaintainSQLIndex disabled for all keys except the primary key
      DP00824: index on Employer+Type (project) to collect external hours on purchase order
    }
    END.
  }
}

