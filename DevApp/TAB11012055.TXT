OBJECT Table 11012055 Advice Order Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               FPSMobileItemUsage@1100528100 : Record 11125647;
             BEGIN
               CheckBlocked;
               CheckRecordType(0);
               GetDepartment;
               PurchSetup.GET;
               IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::Company THEN
                 "Price Agreement" := TRUE
               ELSE
                 "Price Agreement" := FALSE;
               "Purchase Route Reference" := '';
               "Shipping Detail Line" := 0;
               "Created by Employee No." := '';
               "Created by Employee Company" := '';
               "Created by Work Order No." := '';
               VALIDATE("Created by", USERID);
               "Date Created" := TODAY;
               "Modified by" := USERID;
               "Last Date Modified" := TODAY;

               VALIDATE("Cost Component");
               StrategicPurchMgt.FindContractForAdviceOrder(Rec);
               CheckEntityNo;

               IF FPSMobileItemUsage.READPERMISSION THEN              //**4PS.n DP00390
                 FPSMobileItemUsage.CreateModifyFromAdvOrdLine(Rec);  //**4PS.n DP00390
             END;

    OnModify=VAR
               FPSMobileItemUsage@1100528100 : Record 11125647;
             BEGIN
               CheckBlocked;
               CheckRecordType(1);
               GetDepartment;
               "Modified by" := USERID;
               "Last Date Modified" := TODAY;
               StrategicPurchMgt.FindContractForAdviceOrder(Rec);
               VALIDATE("Supplying Company Inventory");
               CheckEntityNo;

               IF FPSMobileItemUsage.READPERMISSION THEN              //**4PS.n DP00390
                 FPSMobileItemUsage.CreateModifyFromAdvOrdLine(Rec);  //**4PS.n DP00390
             END;

    OnDelete=VAR
               ProjectMaterialReqLine@1100526100 : Record 11012526;
               PurchaseLineDetail@1210190000 : Record 11020660;
               AdviceLine@1210190001 : Record 11012055;
               FPSMobileItemUsage@1100528100 : Record 11125647;
             BEGIN
               IF ConsentRec.READPERMISSION THEN
                 DeleteConsentLines(FALSE);

               //kzwerver, 110127, n
               IF ("Record Type" = "Record Type"::Project) AND
                  (NOT CalledFromCompressingLines)
               THEN BEGIN
                 //kzwerver, 111017, c, #29752
                 ProjectMaterialReqLine.SETRANGE("Project No.", "Project No.");
                 ProjectMaterialReqLine.SETRANGE("Advice Order Line No.", "Line No.");
                 //ProjectMaterialReqLine.SETRANGE("Processed (AdviceOrder)", TRUE);  //db.o, 09-10-15
                 IF (ProjectMaterialReqLine.FINDSET) THEN BEGIN
                   REPEAT
                     //ProjectMaterialReqLine."Processed (AdviceOrder)" := FALSE;  //db.o, 09-10-15
                     ProjectMaterialReqLine."Advice Order Line No." := 0;
                     ProjectMaterialReqLine.MODIFY;
                   UNTIL(ProjectMaterialReqLine.NEXT = 0);
                 END;
               END;
               //kzwerver, 110127, en

               //kzwerver, 110606, sn, #27784
               IF (PurchaseLineDetail.GET(PurchaseLineDetail."Line Type"::"Advice Order",
                 PurchaseLineDetail."Record Type"::Project, "Project No.", "Yard No.", "System No.",
                 "Entity Type", "Entity No.", "Service Order No.", '', "Line No."))
               THEN
                 PurchaseLineDetail.DELETE;
               //kzwerver, 110606, en, #27784

               //db.sn, 24-06-11: M15569
               IF "Line No." <> 0 THEN BEGIN   //when Line No.=0 Navision will be closed; possible error as a result of import
                 IF ("Source Type" = "Source Type"::"Recipe Header") AND (Recipe <> '') THEN BEGIN
                   //db.sn, 12-12-11: M31395
                   AdviceLine.SETRANGE("Record Type", "Record Type");
                   AdviceLine.SETFILTER("Project No.", "Project No.");
                   AdviceLine.SETFILTER("Service Order No.", "Service Order No.");
                   //db.sn, 12-12-11: M31395
                   AdviceLine.SETRANGE("Attached to Line No.","Line No.");
                   AdviceLine.DELETEALL(TRUE);
                 END;
               END;
               //db.en, 24-06-11: M15569

               DeleteCommentLine(); // **4PS MVOS

               DeleteDocumentLinks;

               IF FPSMobileItemUsage.READPERMISSION THEN        //**4PS.n DP00390
                 FPSMobileItemUsage.DeleteFromAdvOrdLine(Rec);  //**4PS.n DP00390
             END;

    CaptionML=ENU=Advice Order Line;
    PasteIsValid=No;
    LookupPageID=Page11012122;
    DrillDownPageID=Page11012122;
  }
  FIELDS
  {
    { 1   ;   ;Project No.         ;Code20        ;TableRelation=IF (Record Type=CONST(Project)) Job;
                                                   OnValidate=VAR
                                                                lvJobRec@1100525000 : Record 11072003;
                                                              BEGIN
                                                                UpdateConsentLines;
                                                                StrategicPurchMgt.FindContractForAdviceOrder(Rec);
                                                                IF "Project No." <> '' THEN BEGIN
                                                                  lvJobRec.GET("Project No.");
                                                                  "Main Project No." := lvJobRec."Main Project";
                                                                END;
                                                                ClearEditableAssemYardNoFields;

                                                                IF ("Project No." <> xRec."Project No.") THEN  //*DP00129
                                                                  FillDefaultFscType();
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 2   ;   ;Element             ;Code20        ;TableRelation=IF (Record Type=CONST(Project)) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN BEGIN
                                                                  ProjElemRec.GET("Project No.",Element);
                                                                  ProjElemRec.CheckProjectElementBlocked;
                                                                END;
                                                                CheckStatusAndElementMandatory;  //db, 01-02-11: M24423

                                                                EvaluateStartDate("Receipt Date");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 3   ;   ;Extension Contract  ;Code10        ;TableRelation=IF (Record Type=CONST(Project)) "Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                //Call 21488
                                                                IF "Extension Contract" <> '' THEN BEGIN
                                                                  ExtensionContract.GET("Project No.", "Extension Contract");
                                                                  IF ExtensionContract.Status = ExtensionContract.Status::Expired THEN
                                                                    ExtensionContract.FIELDERROR(Status);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Extension Contract }
    { 5   ;   ;Line No.            ;Integer       ;OnValidate=BEGIN
                                                                IF "Line No." = 0 THEN BEGIN
                                                                  //db.sn, 24-02-10 (force check additional cost for default cost type material)
                                                                  xRec."Cost Type":= -1;
                                                                  CurrFieldNo := FIELDNO("Cost Type");
                                                                  VALIDATE("Cost Type");
                                                                  //db.en, 24-02-10
                                                                  AdviceRec.RESET;
                                                                  AdviceRec.SETCURRENTKEY("Record Type", "Project No.", "Service Order No.", "Line No.");
                                                                  AdviceRec.SETRANGE("Record Type", "Record Type");
                                                                  IF "Record Type" = "Record Type"::Project THEN BEGIN
                                                                    AdviceRec.SETRANGE("Project No.", "Project No.");
                                                                    AdviceRec.SETRANGE("Service Order No.", '');
                                                                  END ELSE BEGIN
                                                                    AdviceRec.SETRANGE("Project No.", '');
                                                                    AdviceRec.SETRANGE("Service Order No.", "Service Order No.");
                                                                  END;
                                                                  IF AdviceRec.FINDLAST THEN
                                                                    "Line No." := AdviceRec."Line No." - (AdviceRec."Line No." MOD 10000) + 10000
                                                                  ELSE
                                                                    "Line No." := 10000;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Line No. }
    { 10  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> '' THEN
                                                                  TESTFIELD("Plant Type", ''); //mg, 07-07-11: RFC 605
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                                  //ItemRec.TESTFIELD("Logistics on Component Level",FALSE); //**4PS.n // Call 27339
                                                                  //IF ItemRec."Logistics on Component Level" THEN // Call 27339
                                                                  //  MESSAGE(Text013); // Call 27339
                                                                  IF CurrFieldNo = FIELDNO("Item No.") THEN  //db, 01-06-05: prevent other vendor choice at indirect validation
                                                                    ValidateVendor;
                                                                END;
                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  "Variant Code" := '';
                                                                  "Item Category Code" := '';
                                                                END;
                                                                StrategicPurchMgt.FindContractForAdviceOrder(Rec);
                                                                SetLocationCode;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 11  ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF "Basic Item" <> '' THEN
                                                                  TESTFIELD("Plant Type", ''); //mg, 07-07-11: RFC 605
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                                  IF CurrFieldNo = FIELDNO("Basic Item") THEN  //db, 01-06-05: prevent other vendor choice at indirect validation
                                                                    ValidateVendor;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 12  ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 13  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF "Trade Item" <> '' THEN BEGIN
                                                                  TESTFIELD("Plant Type", ''); //mg, 07-07-11: RFC605
                                                                  IF Transaction = Transaction::Plant THEN
                                                                    FIELDERROR(Transaction, STRSUBSTNO(Text012, Transaction));
                                                                END;
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                                StrategicPurchMgt.FindContractForAdviceOrder(Rec);
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 14  ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                TradeVendorRec@1100525000 : Record 11012304;
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  TradeVendorRec.HandleVendorValidate("Vendor (Trade Item)");  //db, 23-02-10: T4165
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 09-12-10: M22751
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 09-12-10: M22751
                                                                  CheckVendorRelation(FIELDNO("Vendor (Trade Item)"));  //db, 10-06-09
                                                                END;
                                                                CALCFIELDS("Vendor Name (Trade Item)");
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 16  ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                CheckVendorRelation(FIELDNO(Vendor));  //db, 10-06-09

                                                                IF Vendor <> '' THEN BEGIN
                                                                  Vend.GET(Vendor);
                                                                  CheckVendBlocked;
                                                                  IF (CurrFieldNo <> 0) AND
                                                                     ("Cost Object" = '') AND ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') THEN
                                                                    IF Vend.Subcontractor THEN
                                                                      "Cost Type" := "Cost Type"::Subcontracting;
                                                                  IF (Vendor <> xRec.Vendor) AND ("Plant Type" <> '') AND (Transaction = Transaction::Purchase) THEN
                                                                    GetPlantPurchaseOrRentRate();  //C021779.n
                                                                // Call 25912.sn
                                                                END ELSE BEGIN
                                                                  IF xRec.Vendor <> '' THEN BEGIN
                                                                    //IF Transaction = Transaction::Purchase THEN BEGIN
                                                                    IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN BEGIN
                                                                      ProcessOpenStatus;  //db, 09-12-11: M31310
                                                                      CheckMessageOpenAdvice;  //db, 09-12-11: M31310
                                                                    END;
                                                                  END;
                                                                // Call 25912.en
                                                                END;

                                                                CALCFIELDS("Vendor Name");

                                                                UpdateConsentLines;
                                                                StrategicPurchMgt.FindContractForAdviceOrder(Rec);

                                                                GetDefaultOrderAddress;
                                                              END;

                                                   CaptionML=ENU=Vendor }
    { 17  ;   ;Vendor Name (Trade Item);Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Vendor (Central Mgt)".Name WHERE (Code=FIELD("Vendor (Trade Item)")));
                                                   CaptionML=ENU=Vendor Name (Trade Item);
                                                   Editable=No }
    { 18  ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 19  ;   ;Manufacturer Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Vendor (Central Mgt)".Name WHERE (Code=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Manufacturer Name;
                                                   Editable=No }
    { 20  ;   ;Quantity (Budget)   ;Decimal       ;CaptionML=ENU=Quantity (Budget);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Quantity (Advice)   ;Decimal       ;OnValidate=BEGIN
                                                                IF "Quantity (Advice)" > "Quantity (Budget)" - "Quantity (Processed)" THEN
                                                                  IF "Quantity (Budget)" <> 0 THEN
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      MESSAGE(Text000);

                                                                //db.sn, 24-06-11: M15569
                                                                IF CurrFieldNo = FIELDNO("Quantity (Advice)") THEN
                                                                  CheckRecipeTotals;
                                                                //db.en, 24-06-11: M15569

                                                                //db.sn, 09-12-11: M31310
                                                                IF "Quantity (Advice)" <> xRec."Quantity (Advice)" THEN
                                                                  GetStatusOnProcess(FALSE);
                                                                //db.en, 09-12-11: M31310

                                                                IF "Quantity (Advice)" <> 0 THEN BEGIN
                                                                  IF xRec."Quantity (Advice)" = 0 THEN
                                                                    VALIDATE("Order Date", TODAY);
                                                                END;
                                                                CheckMessageOpenAdvice;  //db, 09-12-11: M31310

                                                                GetDefaults;
                                                                //Call C002711 sn
                                                                //IF Transaction = Transaction::Purchase THEN BEGIN
                                                                IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN BEGIN
                                                                  IF "Item No." <> '' THEN BEGIN
                                                                    IF ItemRec.GET("Item No.") THEN
                                                                      ItemRec.TESTFIELD("Purchase Blocked",FALSE);
                                                                  END;
                                                                END;
                                                                //Call C002711 en
                                                                CalculateTotal;
                                                              END;

                                                   CaptionML=ENU=Quantity (Advice);
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Quantity (Processed);Decimal       ;CaptionML=ENU=Quantity (Processed);
                                                   DecimalPlaces=0:5;
                                                   Editable=Yes }
    { 25  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN  //db, 10-02-05
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 26  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 27  ;   ;Price               ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY(Price, FALSE, TRUE, "Currency Code", "Project No.", '', 0D);  //DP00886

                                                                CalculateDiscount;  //db, 10-12-13: C007216
                                                                CalculateTotal;
                                                              END;

                                                   CaptionML=ENU=Price;
                                                   AutoFormatType=2 }
    { 30  ;   ;Transaction         ;Option        ;OnValidate=VAR
                                                                ProjectElement@1210190000 : Record 11012010;
                                                                PlantLocation@1210190001 : Record 11012554;
                                                              BEGIN
                                                                IF Transaction <> xRec.Transaction THEN BEGIN
                                                                  //IF Transaction = Transaction::Requisition THEN ERROR(''); //DP Breman Service Inkoopvoorstel
                                                                  //Provisional block
                                                                  "Location Code" := '';
                                                                  "Bin Code" := '';  //db, 02-11-10
                                                                  //mg.sn, 16-08-10: M22125
                                                                  "Order Date" := 0D;
                                                                  //kzwerver, 110530, sn, #27238
                                                                  IF (Element <> '') THEN BEGIN
                                                                    IF (ProjectElement.GET("Project No.", Element)) THEN
                                                                      "Receipt Date" := ProjectElement."Starting Date";
                                                                  END;
                                                                  VALIDATE("Delivery Period", '');
                                                                  //kzwerver, 110530, en, #27238
                                                                  IF Transaction = Transaction::Inventory THEN BEGIN
                                                                    //VALIDATE("Delivery Period", ''); //kzwerver, 110530, o, #27238
                                                                    GetDefaults;  //db, 10-12-10: M23792
                                                                  END;
                                                                  //mg.en, 16-08-10: M22125
                                                                  //C021779.sn
                                                                  IF (xRec.Transaction = Transaction::Purchase) AND (Transaction = Transaction::Plant) THEN BEGIN
                                                                    IF "Plant Type" <> '' THEN BEGIN
                                                                      Price := 0;
                                                                      "Gross Price" := 0;
                                                                      "Discount %" := 0;
                                                                      VALIDATE(Price);
                                                                    END;
                                                                  END;
                                                                  IF Transaction = Transaction::Purchase THEN BEGIN
                                                                    IF "Plant Type" <> '' THEN BEGIN
                                                                      FillPlantPurchOrRentPrefVendor();
                                                                      GetPlantPurchaseOrRentRate();
                                                                    END;
                                                                  END;
                                                                  //C021779.en
                                                                END;
                                                                //db.sn, 28-04-10: M17011
                                                                //IF (Transaction = Transaction::Purchase) THEN BEGIN
                                                                IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN BEGIN
                                                                  IF TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
                                                                    IF TradeItemRec.Expired THEN
                                                                      IF TradeItemRec."Item Code (Successor)" = '' THEN
                                                                        TradeItemRec.TESTFIELD(Expired,FALSE);
                                                                  END;
                                                                  IF ItemRec.GET("Item No.") THEN BEGIN
                                                                    ItemRec.TESTFIELD("Advice Blocked",FALSE);
                                                                    ItemRec.TESTFIELD(Blocked,FALSE);
                                                                    ItemRec.TESTFIELD("Purchase Blocked",FALSE);  //Call C002711 n
                                                                  END;
                                                                END;
                                                                //db.en, 28-04-10: M17011

                                                                //kzwerver, 130903, sn, C002778
                                                                IF (Transaction = Transaction::Inventory) THEN BEGIN
                                                                  IF ItemRec.GET("Item No.") THEN BEGIN
                                                                    ItemRec.TESTFIELD("Advice Blocked",FALSE);
                                                                    ItemRec.TESTFIELD(Blocked,FALSE);
                                                                    ItemRec.TESTFIELD("Inventory Blocked",FALSE);
                                                                  END;
                                                                END;
                                                                //kzwerver, 130903, sn, C002778

                                                                //mg.sn, 07-07-11: RFC605
                                                                IF Transaction = Transaction::Plant THEN BEGIN
                                                                  IF "Plant Location" = '' THEN BEGIN //call 32563
                                                                    PlantLocation.SETCURRENTKEY("Company Name", "Project No.");
                                                                    PlantLocation.SETRANGE("Project No.", "Project No.");
                                                                    //PlantLocation.SETFILTER("Company Name", '%1|%2', '', COMPANYNAME);
                                                                    PlantLocation.SETRANGE("Company Name", '');
                                                                    //Only for project and plant in the same company, then company is empty in plantloc
                                                                    IF PlantLocation.COUNT = 1 THEN BEGIN
                                                                      PlantLocation.FINDFIRST;
                                                                      VALIDATE("Plant Location", PlantLocation.Code);
                                                                    END;
                                                                  END; //call 32563
                                                                END;
                                                                //mg.en, 07-07-11: RFC605

                                                                SetLocationCode;

                                                                VALIDATE("Delivery Period", ''); //mg, 21-07-10, M20091

                                                                CheckVendBlocked;
                                                              END;

                                                   CaptionML=ENU=Transaction;
                                                   OptionCaptionML=ENU=Purchase,Inventory,Plant,Requisition;
                                                   OptionString=Purchase,Inventory,Plant,Requisition }
    { 31  ;   ;Deliver             ;Option        ;OnValidate=BEGIN
                                                                //C019936 Validation has changed
                                                                CASE Deliver OF
                                                                  Deliver::"Service Location":
                                                                    TESTFIELD("Record Type", "Record Type"::ServOrder);
                                                                  Deliver::"Project Location":
                                                                    TESTFIELD("Record Type", "Record Type"::Project);
                                                                END;

                                                                IF NOT ValidateShipToLocation(FALSE) THEN
                                                                  IF Deliver <> xRec.Deliver THEN
                                                                    GetDefaultShipToLocation;
                                                              END;

                                                   CaptionML=ENU=Deliver;
                                                   OptionCaptionML=ENU=" ,Location,Project Location,Service Location,,,,,Order Address";
                                                   OptionString=[ ,Location,Project Location,Service Location,,,,,Order Address] }
    { 32  ;   ;Processed           ;Boolean       ;OnValidate=BEGIN
                                                                //mg.sn, 03-10-11: M28950
                                                                IF NOT xRec.Processed AND Processed THEN
                                                                  ChangeStatusAttachedLine();
                                                                //mg.en, 03-10-11: M28950
                                                              END;

                                                   CaptionML=ENU=Processed;
                                                   Editable=No }
    { 35  ;   ;Process Status      ;Option        ;OnValidate=BEGIN
                                                                CheckStatusAndElementMandatory;  //db, 01-02-11: M24423
                                                                IF "Process Status" = "Process Status"::Released THEN
                                                                  CheckVendBlocked;  //db, 07-05-15: C017950
                                                                IF "Process Status" IN
                                                                   ["Process Status"::Open, "Process Status"::Released, "Process Status"::Cancelled]
                                                                THEN BEGIN
                                                                  DeleteConsentLines(FALSE);
                                                                  "Consented Date-Time" := 0DT;
                                                                END;
                                                                UpdateConsentLines;
                                                                IF ("Process Status" = "Process Status"::Open) THEN
                                                                  Processed := FALSE;  //db, 09-12-11: M31310
                                                              END;

                                                   CaptionML=ENU=Process Status;
                                                   OptionCaptionML=ENU=Open,Partly Processed,Released,Cancelled,Processed,On Hold;
                                                   OptionString=Open,Partly Processed,Released,Cancelled,Processed,On Hold }
    { 40  ;   ;Receipt Date        ;Date          ;OnValidate=VAR
                                                                MinimumReceiptDate@1100528804 : Date;
                                                                CompInfoRec@1100528803 : Record 79;
                                                                DateFormula@1100528800 : DateFormula;
                                                                NonWorkDate@1100528802 : Boolean;
                                                                dummyDesc@1100528801 : Text[30];
                                                              BEGIN
                                                                // dp00310.sn
                                                                PurchSetup.GET;
                                                                CompInfoRec.GET;
                                                                IF (PurchSetup."Allow Nonworking Receipt Date") AND ("Delivery Period" <> '') THEN BEGIN
                                                                  EVALUATE(DateFormula,"Delivery Period");
                                                                  MinimumReceiptDate := CALCDATE(DateFormula, "Order Date");
                                                                  NonWorkDate := CalendarMgmt.CheckDateStatus(CompInfoRec."Base Calendar Code", "Receipt Date", dummyDesc);
                                                                  IF NonWorkDate = TRUE THEN BEGIN
                                                                    IF "Receipt Date" < MinimumReceiptDate THEN
                                                                      BalanceDatesAndDeliveryPeriod(FIELDNO("Receipt Date"))
                                                                    ELSE
                                                                      MESSAGE(Text014)
                                                                  END ELSE
                                                                    BalanceDatesAndDeliveryPeriod(FIELDNO("Receipt Date"));
                                                                END ELSE
                                                                // dp00310.en
                                                                  BalanceDatesAndDeliveryPeriod(FIELDNO("Receipt Date"));

                                                                //GetDefaults;  //db, 10-12-10: M23792 //call 32347
                                                              END;

                                                   CaptionML=ENU=Receipt Date }
    { 41  ;   ;Delivery Period     ;Code20        ;OnValidate=BEGIN
                                                                BalanceDatesAndDeliveryPeriod(FIELDNO("Delivery Period"));
                                                              END;

                                                   CaptionML=ENU=Delivery Period }
    { 42  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                BalanceDatesAndDeliveryPeriod(FIELDNO("Order Date"));
                                                              END;

                                                   CaptionML=ENU=Order Date }
    { 45  ;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                //C004880
                                                              END;

                                                   CaptionML=ENU=Requested Receipt Date }
    { 50  ;   ;Location Code       ;Code10        ;TableRelation=Location.Code WHERE (Project Filter=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF (Transaction = Transaction::Inventory) AND
                                                                   ("Supplying Company Inventory" = '')
                                                                THEN BEGIN
                                                                  InventorySetup.GET;
                                                                  IF InventorySetup."Location Mandatory" THEN
                                                                    LocRec.GET("Location Code");
                                                                END;

                                                                CheckInventoryOnLocation;
                                                                VALIDATE("Delivery Period", ''); //mg, 21-07-10, M20091

                                                                //*C000175.so
                                                                //IF Deliver = Deliver::Location THEN
                                                                //  IF "Location Code"  <> '' THEN
                                                                //    VALIDATE("Ship To Location", "Location Code");
                                                                //*C000175.so

                                                                //C019044.sn
                                                                IF (Transaction = Transaction::Inventory) THEN
                                                                  IF ("Location Code" <> xRec."Location Code") AND ("Location Code" <> '') THEN
                                                                    GetDefaultBin("Location Code","Bin Code","Bin Code (Project Inventory)");
                                                                //C019044.en
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 55  ;   ;Ship To Location    ;Code10        ;TableRelation=IF (Deliver=CONST(Project Location)) "Project Location".Code WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Deliver=CONST(Location)) Location.Code
                                                                 ELSE IF (Deliver=CONST(Service Location)) "Service Order Location".Code WHERE (Service Order No.=FIELD(Service Order No.))
                                                                 ELSE IF (Deliver=CONST(Order Address)) "Order Address".Code WHERE (Vendor No.=FIELD(Vendor));
                                                   OnValidate=BEGIN
                                                                ValidateShipToLocation(TRUE); //C019936

                                                                IF Deliver = Deliver::Location THEN
                                                                  IF ("Ship To Location" <> xRec."Ship To Location") AND ("Ship To Location" <> '') THEN
                                                                    GetDefaultBin("Ship To Location", "Bin Code", "Bin Code (Project Inventory)");
                                                              END;

                                                   CaptionML=ENU=Ship To Location }
    { 60  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                              Global Dimension No.=CONST(2),
                                                                                                                              Project Filter=FIELD(Project No.))
                                                                                                                              ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                      Global Dimension No.=CONST(2),
                                                                                                                                                                                                      Project Filter=FIELD(Project No.))
                                                                                                                                                                                                      ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                                     Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                     Project Filter=FIELD(Project No.))
                                                                                                                                                                                                                                                                     ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                                     Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                                     Project Filter=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                lvText000@1100485001 : TextConst 'ENU=Copy Data from new Cost Object?\\';
                                                                lvText001@1100485000 : TextConst 'ENU=Empty fields only will be updated. Existing data will not be overruled.';
                                                              BEGIN
                                                                IF ("Cost Object" <> '') AND ("Item No." + "Trade Item" + "Basic Item" = '') THEN BEGIN
                                                                  IF xRec."Cost Object" = '' THEN
                                                                    GetDefaultsCostObject()
                                                                  ELSE
                                                                    IF "Cost Object" <> xRec."Cost Object" THEN
                                                                      IF CONFIRM(lvText000 + lvText001) THEN
                                                                        GetDefaultsCostObject();
                                                                  IF "Cost Type" = "Cost Type"::Material THEN
                                                                    VALIDATE("Delivery Period", '');  //db, 02-09-13: C003187
                                                                END;

                                                                IF (CurrFieldNo = FIELDNO("Cost Object")) THEN
                                                                  SetCostComponent; //kzwerver, 110729, n, #27962

                                                                IF ("Cost Object" <> xRec."Cost Object") AND ("FSC Type Code" = '') THEN  //*DP00129
                                                                  FillDefaultFscType();

                                                                UpdateConsentLines;
                                                              END;

                                                   CaptionML=ENU=Cost Object;
                                                   NotBlank=Yes }
    { 61  ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Cost Type") THEN BEGIN   //db, 16-11-09: M13846
                                                                  CheckAdditionalCostService;  //db, 24-02-10
                                                                  CheckDeliveryPeriod;  //db, 08-12-10: M19841
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Type;
                                                   OptionCaptionML=ENU=Material,Subcontracting,Plant,Sundry;
                                                   OptionString=Material,Subcontracting,Plant,Sundry }
    { 70  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 80  ;   ;Purchase Action     ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Purchase Action }
    { 81  ;   ;Purchase Phase      ;Code10        ;CaptionML=ENU=Purchase Phase;
                                                   Numeric=Yes }
    { 82  ;   ;Shelf No. (Item)    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Shelf No." WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=ENU=Shelf No. (Item);
                                                   Editable=No }
    { 83  ;   ;Sort Shelf          ;Code20        ;CaptionML=ENU=Sort Shelf }
    { 84  ;   ;Sort Location       ;Code50        ;CaptionML=ENU=Sort Location;
                                                   Description=Project+Deliver+Ship to Location }
    { 85  ;   ;Shelf No. (SKU)     ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Stockkeeping Unit"."Shelf No." WHERE (Item No.=FIELD(Item No.),
                                                                                                             Location Code=FIELD(Location Code)));
                                                   CaptionML=ENU=Shelf No. (SKU);
                                                   Editable=No }
    { 90  ;   ;Negotiation recommended;Boolean    ;CaptionML=ENU=Negotiation recommended }
    { 100 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 101 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 110 ;   ;Description Project ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Description Project;
                                                   Editable=No }
    { 111 ;   ;Description Element ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=ENU=Description Element;
                                                   Editable=No }
    { 112 ;   ;Description Extension;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Extension Contract".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                              Contract No.=FIELD(Extension Contract)));
                                                   CaptionML=ENU=Description Extension Contract;
                                                   Editable=No }
    { 115 ;   ;Project Status      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Project Status" WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Project Status;
                                                   OptionCaptionML=ENU=Estimation,Preparation,Production,Technical Finished,Administrative Finished,Finished,Archive,Archived;
                                                   OptionString=Estimation,Preparation,Production,Technical Finished,Administrative Finished,Finished,Archive,Archived;
                                                   Editable=No }
    { 140 ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserSetup@1100525000 : Record 91;
                                                              BEGIN
                                                                IF UserSetup.GET("Created by") THEN
                                                                  "Created by Employee No." := UserSetup."Employee No.";
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1210190000 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "Created by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Created by;
                                                   Editable=No }
    { 150 ;   ;Date Created        ;Date          ;CaptionML=ENU=Date Created;
                                                   Editable=No }
    { 160 ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1210190000 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "Modified by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 170 ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 180 ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Purchaser Code }
    { 190 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 200 ;   ;Ask for Quote       ;Boolean       ;CaptionML=ENU=Ask for Quote }
    { 210 ;   ;Price Agreement     ;Boolean       ;OnValidate=BEGIN
                                                                PurchSetup.GET;
                                                                IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::" " THEN
                                                                  TESTFIELD("Price Agreement", FALSE);
                                                                IF PurchSetup."Price Agreement" = PurchSetup."Price Agreement"::Company THEN
                                                                  TESTFIELD("Price Agreement", TRUE);
                                                              END;

                                                   CaptionML=ENU=Price Agreement }
    { 220 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Gross Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Gross Price", FALSE, TRUE, "Currency Code", "Project No.", '', 0D);  //DP00886

                                                                CalculateNettPrice;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 230 ;   ;Discount %          ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                              END;

                                                   CaptionML=ENU=Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 240 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Editable=No }
    { 241 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Editable=No }
    { 242 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Editable=No }
    { 250 ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 260 ;   ;Alternative Vendor  ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Alternative Vendor }
    { 270 ;   ;Alternative Item    ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD(Alternative Vendor));
                                                   CaptionML=ENU=Alternative Item }
    { 280 ;   ;Alternative Price   ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Alternative Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Alternative Price", FALSE, TRUE, "Currency Code", "Project No.", '', 0D);  //DP00886
                                                              END;

                                                   CaptionML=ENU=Alternative Price;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 290 ;   ;Sales Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Sales Price (FCY)" := ProjectCurrencyExchangeRate.ExchangeAmtLCYToFCY("Sales Price", FALSE, TRUE, "Currency Code", "Project No.", '', 0D);  //DP00886
                                                              END;

                                                   CaptionML=ENU=Sales Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 300 ;   ;ICK Order           ;Code20        ;CaptionML=ENU=ICK Order;
                                                   Editable=No }
    { 310 ;   ;Bin Code            ;Code20        ;OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                                LocCode@1100526201 : Code[20];
                                                              BEGIN
                                                                //db, 02-11-10
                                                                LocCode := SetLocationForBin;
                                                                IF "Bin Code" <> '' THEN
                                                                  WMSManagement.FindBin(LocCode,"Bin Code","Variant Code");
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              LocCode@1100526200 : Code[10];
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              //db, 02-11-10
                                                              LocCode := SetLocationForBin;
                                                              BinCode := WMSManagement.BinLookUpSpecific(LocCode,"Item No.","Variant Code",'',"Project No.","Service Order No.","Bin Code");
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code }
    { 320 ;   ;Bin Code (Project Inventory);Code20;OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                                Location@1100526200 : Record 14;
                                                                PrefBin@1100525000 : Record 11020629;
                                                                LocCode@1210190000 : Code[10];
                                                              BEGIN
                                                                //db, 30-03-11
                                                                LocCode := SetLocationForBin;
                                                                IF "Bin Code (Project Inventory)" <> '' THEN
                                                                  WMSManagement.FindBin(LocCode,"Bin Code (Project Inventory)","Variant Code");
                                                                IF Transaction = Transaction::Inventory THEN
                                                                  TESTFIELD("Location Code")
                                                                ELSE
                                                                  TESTFIELD(Deliver, Deliver::Location);
                                                                IF "Bin Code (Project Inventory)" <> '' THEN BEGIN
                                                                  Location.GET(LocCode);
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                END;

                                                                //PrefBin.CheckBinLocationBinding("Project No.",'',"Location Code","Bin Code (Project Inventory)"); //C019936.o
                                                                PrefBin.CheckBinLocationBinding("Project No.",'',LocCode,"Bin Code (Project Inventory)"); //C019936.n
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              LocCode@1210190000 : Code[10];
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              //db, 30-03-11
                                                              LocCode := SetLocationForBin;
                                                              BinCode := WMSManagement.BinLookUpSpecific(LocCode,"Item No.","Variant Code",'',"Project No.","Service Order No.","Bin Code (Project Inventory)");
                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code (Project Inventory)",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code (Project Inventory) }
    { 350 ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD("Item No.");
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 360 ;   ;FSC Type Code       ;Code10        ;TableRelation="FSC Type";
                                                   CaptionML=ENU=FSC Type Code }
    { 400 ;   ;Tender Paragraph    ;Text10        ;TableRelation="Project Tender Paragraph"."Tender Paragraph" WHERE (Project No.=FIELD(Project No.),
                                                                                                                      Level=CONST(Tender Paragraph));
                                                   OnValidate=BEGIN
                                                                GWWMgtCU.FormatTenderElement("Tender Paragraph");
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph }
    { 405 ;   ;Description Tender Paragraph;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                                    Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Description Tender Paragraph;
                                                   Editable=No }
    { 406 ;   ;Tender Paragraph Text;Text80       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Text".Text WHERE (Project No.=FIELD(Project No.),
                                                                                                                  Tender Paragraph=FIELD(Tender Paragraph)));
                                                   CaptionML=ENU=Tender Paragraph Text;
                                                   Editable=No }
    { 410 ;   ;Tender Paragraph Part;Text10       ;TableRelation="Project Tender Paragraph Part"."Tender Paragraph Part" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                Tender Paragraph=FIELD(Tender Paragraph));
                                                   OnValidate=BEGIN
                                                                GWWMgtCU.FormatTenderElementPart("Tender Paragraph Part");
                                                              END;

                                                   CaptionML=ENU=Tender Paragraph Part }
    { 415 ;   ;Descr Tender Paragraph Part;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Tender Paragraph Part".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                                         Tender Paragraph=FIELD(Tender Paragraph),
                                                                                                                         Tender Paragraph Part=FIELD(Tender Paragraph Part)));
                                                   CaptionML=ENU=Description Tender Paragraph Part;
                                                   Editable=No }
    { 500 ;   ;Recipe Group        ;Code10        ;TableRelation=IF (Converted=CONST(Yes)) "Recipe Group".No.
                                                                 ELSE IF (Converted=CONST(No)) "Estimate Group".No. WHERE (Type=CONST(Recipe));
                                                   CaptionML=ENU=Recipe Group;
                                                   Description=DP00381 }
    { 510 ;   ;Recipe              ;Code20        ;TableRelation=IF (Converted=CONST(Yes)) "Base Recipe".No. WHERE (Recipe Group=FIELD(Recipe Group))
                                                                 ELSE IF (Converted=CONST(No)) "Recipe OLD".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   CaptionML=ENU=Recipe;
                                                   Description=DP00381 }
    { 520 ;   ;Source Type         ;Option        ;CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=" ,Recipe Header,Recipe Line,BOM Header,BOM Line";
                                                   OptionString=[ ,Recipe Header,Recipe Line,BOM Header,BOM Line] }
    { 530 ;   ;Attached to Line No.;Integer       ;TableRelation=IF (Record Type=CONST(Project)) "Advice Order Line"."Line No." WHERE (Record Type=CONST(Project),
                                                                                                                                       Project No.=FIELD(Project No.))
                                                                                                                                       ELSE IF (Record Type=CONST(ServOrder)) "Advice Order Line"."Line No." WHERE (Record Type=CONST(ServOrder),
                                                                                                                                                                                                                    Service Order No.=FIELD(Service Order No.));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 600 ;   ;Sort Purchase       ;Code100       ;CaptionML=ENU=Sort Purchase;
                                                   Description=DP00137;
                                                   Editable=No }
    { 800 ;   ;Record Type         ;Option        ;CaptionML=ENU=Record Type;
                                                   OptionCaptionML=ENU=Project,Service Order;
                                                   OptionString=Project,ServOrder;
                                                   Editable=No }
    { 810 ;   ;Service Order No.   ;Code20        ;TableRelation=IF (Record Type=CONST(ServOrder)) "Service Order";
                                                   OnValidate=VAR
                                                                ServiceOrder@1100525000 : Record 11012823;
                                                              BEGIN
                                                                UpdateConsentLines;
                                                                IF "Service Order No." <> '' THEN //mg, 31-05-11
                                                                  ServiceOrder.GET("Service Order No.");
                                                                "Base Service Order No." := ServiceOrder."Base Service Order No.";
                                                              END;

                                                   CaptionML=ENU=Service Order No. }
    { 811 ;   ;Description Service Order;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Description WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=ENU=Description Service Order;
                                                   Editable=No }
    { 815 ;   ;Service Order Status;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Status WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=ENU=Service Order Status;
                                                   OptionCaptionML=ENU=Open,,In Process,Technical Finished,Administrative Finished,Finished,Cancelled;
                                                   OptionString=Open,,In Process,Technical Finished,Administrative Finished,Finished,Cancelled;
                                                   Editable=No }
    { 840 ;   ;Shipping Detail Line;Integer       ;CaptionML=ENU=Shipping Detail Line }
    { 850 ;   ;Service Contract No.;Code20        ;TableRelation=IF (Record Type=CONST(ServOrder)) Service-Contract;
                                                   OnValidate=BEGIN
                                                                UpdateConsentLines;
                                                                StrategicPurchMgt.FindContractForAdviceOrder(Rec);
                                                              END;

                                                   CaptionML=ENU=Service Contract No. }
    { 860 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 870 ;   ;Additional Cost (Service);Boolean  ;OnValidate=BEGIN
                                                                ValidateAdditionalCost;
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 880 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                ValidateCostComponent;
                                                                IF CurrFieldNo <> FIELDNO("Cost Component") THEN BEGIN
                                                                  CostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", '', "Cost Type"+1,
                                                                    "Additional Cost (Service)");  //db, 24-02-10
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Component }
    { 890 ;   ;Scheme Code         ;Code15        ;CaptionML=ENU=Scheme Code }
    { 900 ;   ;E-Plan Item         ;Code50        ;TableRelation="E-Plan Item".No.;
                                                   CaptionML=ENU=E-Plan Item;
                                                   Editable=No }
    { 910 ;   ;Comments for Logistics;Text50      ;CaptionML=ENU=Comments for Logistics }
    { 920 ;   ;Plot No.            ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Plot No. }
    { 940 ;   ;Consent Lines Available;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Consent Line" WHERE (Type=CONST(Project),
                                                                                           Type No.=FIELD(Project No.),
                                                                                           Document Line No.=FIELD(Line No.),
                                                                                           Process=CONST(Advice Order),
                                                                                           Consent=CONST(No)));
                                                   CaptionML=ENU=Consent Lines Available;
                                                   Editable=No }
    { 950 ;   ;Consent Lines Serv. Available;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Consent Line" WHERE (Type=CONST(Service Order),
                                                                                           Type No.=FIELD(Service Order No.),
                                                                                           Document Line No.=FIELD(Line No.),
                                                                                           Process=CONST(Advice Order),
                                                                                           Consent=CONST(No)));
                                                   CaptionML=ENU=Consent Lines Service Available;
                                                   Editable=No }
    { 955 ;   ;Yard No.            ;Code20        ;TableRelation=IF (Record Type=CONST(Project)) "Assembly Yard Number Object"."Yard No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Yard No.;
                                                   Description=Engineering }
    { 960 ;   ;Entity Type         ;Option        ;OnValidate=BEGIN
                                                                ValidateEntityType;
                                                              END;

                                                   CaptionML=ENU=Entity Type;
                                                   OptionCaptionML=ENU=None,Cable,Device,Extra Need,Cable Transit,,,,,Position;
                                                   OptionString=None,Cable,Device,ExtraNeed,CableTransit,,,,,Position;
                                                   Description=Engineering }
    { 970 ;   ;System No.          ;Code20        ;TableRelation=IF (Record Type=CONST(Project)) "Assembly Yard Number Object"."System No." WHERE (Project No.=FIELD(Project No.),
                                                                                                                                                   Yard No.=FIELD(Yard No.),
                                                                                                                                                   Entity Type=FIELD(Entity Type));
                                                   CaptionML=ENU=System No.;
                                                   Description=Engineering }
    { 980 ;   ;Entity No.          ;Code20        ;TableRelation=IF (Record Type=CONST(Project)) "Assembly Yard Number Object"."Entity No." WHERE (Project No.=FIELD(Project No.),
                                                                                                                                                   Yard No.=FIELD(Yard No.),
                                                                                                                                                   Entity Type=FIELD(Entity Type),
                                                                                                                                                   System No.=FIELD(System No.));
                                                   CaptionML=ENU=Entity No.;
                                                   Description=Engineering }
    { 990 ;   ;Cable Transit Pos.  ;Option        ;CaptionML=ENU=Cable Transit Postion;
                                                   OptionCaptionML=ENU=" ,From Side,To Side";
                                                   OptionString=[ ,From,To];
                                                   Description=Engineering;
                                                   Editable=No }
    { 1000;   ;Contract Type       ;Option        ;CaptionML=ENU=Contract Type;
                                                   OptionCaptionML=ENU=No Contract,Contract,Contract with Discount Terms,General Blanket Order,Project Blanket Order,Service Blanket Order;
                                                   OptionString=No Contract,Contract,Contract with Discount Terms,General Blanket Order,Project Blanket Order,Service Blanket Order;
                                                   Editable=No }
    { 1002;   ;Process Status Filter;Option       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Process Status Filter;
                                                   OptionCaptionML=ENU=Open,Partly Processed,Released,Cancelled,Processed;
                                                   OptionString=Open,Partly Processed,Released,Cancelled,Processed }
    { 1010;   ;Main Project No.    ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Main Project No.;
                                                   Editable=No }
    { 1020;   ;Created by Employee No.;Code20     ;TableRelation=IF (Created by Employee Company=FILTER('')) Employee;
                                                   CaptionML=ENU=Created by Employee No.;
                                                   Description=(Mobile);
                                                   Editable=No }
    { 1021;   ;Created by Employee Company;Text30 ;TableRelation=Company;
                                                   CaptionML=ENU=Created by Employee Company;
                                                   Description=Mobile;
                                                   Editable=No }
    { 1022;   ;Created by Work Order No.;Code20   ;TableRelation="Work Order";
                                                   CaptionML=ENU=Created by Work Order No.;
                                                   Description=Mobile;
                                                   Editable=No }
    { 1025;   ;Purchase by Field Service;Boolean  ;CaptionML=ENU=Purchase by Field Service }
    { 1030;   ;Decentral Created   ;Boolean       ;CaptionML=ENU=Decentral Created;
                                                   Editable=No }
    { 1035;   ;Decentral Created Guid;Text32      ;CaptionML=ENU=Decentral Created Guid }
    { 1040;   ;Base Service Order No.;Code20      ;TableRelation="Service Order".No.;
                                                   CaptionML=ENU=Base Service Order No.;
                                                   Editable=No }
    { 1050;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Vendor));
                                                   CaptionML=ENU=Order Address Code }
    { 1200;   ;Glazing Service Call No.;Code20    ;TableRelation="Glazing Service Call";
                                                   CaptionML=ENU=Glazing Service Call No.;
                                                   Editable=No }
    { 1210;   ;Glazing Service Call Line No.;Integer;
                                                   TableRelation="Glazing Service Call Line"."Line No." WHERE (Glazing Service Call No.=FIELD(Glazing Service Call No.));
                                                   CaptionML=ENU=Glazing Service Call Line No.;
                                                   Editable=No }
    { 1220;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=VAR
                                                                PlantType@1210190000 : Record 11012551;
                                                              BEGIN
                                                                IF "Plant Type" = '' THEN  //*29772.n  For instance if empty 'Transaction' should not become 'Plant'
                                                                  EXIT;                    //*29772.n

                                                                //IF "Plant Type" <> '' THEN BEGIN  //*29772.o
                                                                  PlantType.Code := "Plant Type";
                                                                  PlantType.DPA_FindRecWithDPAFilterAppld;
                                                                //END;  //*29772.o

                                                                IF ("Plant Type" <> xRec."Plant Type") OR (Description = '') THEN BEGIN
                                                                  //IF "Plant Type" <> '' THEN  //*29772.o
                                                                    PlantType.GET("Plant Type");
                                                                  Description := PlantType.Description;
                                                                  "Unit of Measure" := PlantType."Unit of Measure";
                                                                  "Cost Object" := PlantType."Cost Object";
                                                                  "Cost Type" := "Cost Type"::Plant;
                                                                  "Item No." := '';
                                                                  "Basic Item" := '';
                                                                  Manufacturer := '';
                                                                  "Trade Item" := '';
                                                                  "Vendor (Trade Item)" := '';
                                                                  //C021779.so
                                                                  //Vendor := '';
                                                                  //VALIDATE(Transaction, Transaction::Plant);
                                                                  //C021779.eo
                                                                  //C021779.sn
                                                                  Price := 0;
                                                                  "Gross Price" := 0;
                                                                  "Discount %" := 0;
                                                                  IF (xRec."Plant Type" = '') OR ((Transaction <> Transaction::Plant) AND (Transaction <> Transaction::Purchase)) THEN
                                                                    VALIDATE(Transaction, Transaction::Plant);
                                                                  IF Transaction <> Transaction::Purchase THEN BEGIN
                                                                    Vendor := '';
                                                                    VALIDATE(Price);
                                                                  END ELSE BEGIN
                                                                    FillPlantPurchOrRentPrefVendor();
                                                                    GetPlantPurchaseOrRentRate();
                                                                  END;
                                                                  //C021779.en
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 1230;   ;Plant Location      ;Code20        ;TableRelation="Plant Location";
                                                   OnValidate=VAR
                                                                PlantLocation@1210190000 : Record 11012554;
                                                              BEGIN
                                                                IF (xRec."Plant Location" <> "Plant Location") AND ("Plant Location" <> '') THEN BEGIN
                                                                  PlantLocation.Code := "Plant Location";
                                                                  PlantLocation.DPA_FindRecWithDPAFilterAppld;
                                                                  PlantLocation.CheckBlock(0,TRUE,FALSE);
                                                                  //call 32653
                                                                  IF PlantLocation."Project No." <> '' THEN
                                                                    PlantLocation.TESTFIELD("Project No.", "Project No.")
                                                                  //
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Location }
    { 1240;   ;Expected return on  ;Date          ;CaptionML=ENU=Expected return on (Plant) }
    { 1250;   ;Logistics on Component Level;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Logistics on Component Level" WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=ENU=Logistics on Component Level;
                                                   Editable=No }
    { 1260;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 1270;   ;Project Planning Activity No.;Code30;
                                                   TableRelation="Project Planning Activity".No. WHERE (Project No.=FIELD(Project No.),
                                                                                                        Type=CONST(Activity));
                                                   CaptionML=ENU=Project Planning Activity No. }
    { 1280;   ;Supplying Company Inventory;Text30 ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF ("Supplying Company Inventory" = COMPANYNAME) OR
                                                                   ("Cost Type" <> "Cost Type"::Material) OR
                                                                   ("Item No." = '') OR
                                                                   (Transaction <> Transaction::Inventory)
                                                                THEN
                                                                  "Supplying Company Inventory" := '';

                                                                IF ("Supplying Company Inventory" <> '') THEN BEGIN
                                                                  "Location Code" := '';
                                                                  "Bin Code" := '';
                                                                  "Bin Code (Project Inventory)" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Supplying Company Inventory }
    { 1290;   ;Delivery Time       ;Time          ;CaptionML=ENU=Delivery Time }
    { 1300;   ;Vendor No. (Item Card);Code20      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Vendor No." WHERE (No.=FIELD(Item No.)));
                                                   TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor No. (Item Card);
                                                   Editable=No }
    { 1310;   ;Vendor Item No. (Item Card);Text20 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Vendor Item No." WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=ENU=Vendor Item No. (Item Card);
                                                   Editable=No }
    { 1320;   ;Work Order No.      ;Code20        ;TableRelation="Work Order";
                                                   OnValidate=VAR
                                                                WorkOrder@1100528600 : Record 11229279;
                                                                Resource@1100528601 : Record 11229278;
                                                              BEGIN
                                                                TESTFIELD("Cost Type", "Cost Type"::Subcontracting);
                                                                WorkOrder.GET("Work Order No.");
                                                                WorkOrder.TESTFIELD("Resource No.");
                                                                Resource.GET(WorkOrder."Resource No.");
                                                                Resource.TESTFIELD(Type, Resource.Type::Subcontractor);
                                                                IF Resource."Source No." <> Vendor THEN
                                                                  MESSAGE(Text015, Vendor, Resource."Source No.", Resource.TABLECAPTION);
                                                                EvaluateStartDate("Receipt Date");
                                                              END;

                                                   CaptionML=ENU=Work Order No.;
                                                   Editable=No }
    { 1330;   ;Price History 0 Exists;Boolean     ;CaptionML=ENU=Price History 0 Exists;
                                                   Editable=No }
    { 1340;   ;Consented Date-Time ;DateTime      ;CaptionML=ENU=Consented Date-Time;
                                                   Editable=No }
    { 1400;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                CheckCurrencyAgreement;  //db, 08-03-16
                                                                VALIDATE("Gross Price");
                                                                CalculateTotal;
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Description=DP00884 }
    { 1401;   ;Currency Agreement  ;Boolean       ;CaptionML=ENU=Currency Agreement;
                                                   Description=DP00884 }
    { 1410;   ;Price (FCY)         ;Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE(Price, ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", '', 0D));  //DP00886
                                                              END;

                                                   CaptionML=ENU=Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP00884;
                                                   AutoFormatType=2 }
    { 1420;   ;Gross Price (FCY)   ;Decimal       ;OnValidate=VAR
                                                                SaveGrossPrice@1100525000 : Decimal;
                                                              BEGIN
                                                                //C026956.sn
                                                                //SetSkipValidateFCY(TRUE);
                                                                SaveGrossPrice := "Gross Price (FCY)";
                                                                VALIDATE("Gross Price", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Gross Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", '', 0D));  //DP00886
                                                                IF CurrFieldNo = FIELDNO("Gross Price (FCY)") THEN
                                                                  "Gross Price (FCY)" := SaveGrossPrice;  //function CalculateDiscount cleared input on validate GrossPrice
                                                                //C026956.en
                                                              END;

                                                   CaptionML=ENU=Gross Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP00884;
                                                   AutoFormatType=2 }
    { 1430;   ;Alternative Price (FCY);Decimal    ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Alternative Price", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Alternative Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", '', 0D));  //DP00886
                                                              END;

                                                   CaptionML=ENU=Alternative Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP00884;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1440;   ;Sales Price (FCY)   ;Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Sales Price", ProjectCurrencyExchangeRate.ExchangeAmtFCYToLCY("Sales Price (FCY)", FALSE, TRUE, "Currency Code", "Project No.", '', 0D));  //DP00886
                                                              END;

                                                   CaptionML=ENU=Sales Price (FCY);
                                                   BlankZero=Yes;
                                                   Description=DP00884;
                                                   AutoFormatType=2 }
    { 1450;   ;Amount (FCY)        ;Decimal       ;CaptionML=ENU=Amount (FCY);
                                                   Description=DP00884;
                                                   Editable=No }
    { 1500;No ;Reserved Breman start;Code20       ;Description=RESERVED }
    { 1515;No ;Reserved Breman end ;Code20        ;Description=RESERVED }
    { 2000;   ;Converted           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Setup".Converted);
                                                   CaptionML=ENU=Converted;
                                                   Description=DP00381;
                                                   Editable=No }
    { 2010;No ;Reserved Field 2010 ;Option        ;OptionCaptionML=ENU=Manual,Company Preferred Vendor,Project Preferred Vendor,Lowest Price,MRL Price;
                                                   OptionString=Manual,Company Preferred Vendor,Project Preferred Vendor,Lowest Price,MRL Price;
                                                   Description=inherit from UK: DP00786 (Source of Price);
                                                   Editable=No }
    { 2020;No ;Reserved Field 2020 ;Integer       ;Description=inherit from UK: DP00784 (Advice Order Batch No.) }
  }
  KEYS
  {
    {    ;Record Type,Project No.,Service Order No.,Line No.;
                                                   Clustered=Yes }
    {    ;Project No.,Element,Extension Contract,Item No.,Manufacturer,Basic Item,Vendor (Trade Item),Trade Item }
    {    ;Project No.,Service Order No.,Deliver,Ship To Location,Sort Location,Sort Shelf }
    {    ;Item No.,Manufacturer,Basic Item,Vendor (Trade Item),Trade Item,Project No.,Element,Extension Contract }
    {    ;Processed,Item No.,Manufacturer,Basic Item,Vendor (Trade Item),Trade Item,Project No.,Element,Extension Contract }
    {    ;Purchase Route Reference                 }
    {    ;Receipt Date                             }
    {    ;Item No.,Location Code,Process Status,Receipt Date;
                                                   SumIndexFields=Quantity (Advice) }
    {    ;Base Service Order No.                   }
    {    ;Project No.,Plant Location,Receipt Date  }
    {    ;Item No.,Description 2,Project No.,Service Order No. }
    {    ;Sort Purchase                            }
    {    ;Service Order No.                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012012 : TextConst 'ENU=Proposal is greater then budget';
      Text001@1100525010 : TextConst 'ENU=%1 ''%2'' has %3 ''%4''. Material Requirement can''t be generated.';
      Text002@1100525011 : TextConst 'ENU=Material Requirement is already present for %1 ''%2''. This will be deleted first.\Continue?';
      Text003@11012015 : TextConst 'ENU=%1 not filled.';
      InventorySetup@1100525007 : Record 313;
      AdviceRec@11012000 : Record 11012055;
      ProjRec@1210190003 : Record 11072003;
      ItemRec@11012001 : Record 27;
      BasicItemRec@11012002 : Record 11012316;
      TradeItemRec@11012003 : Record 11012317;
      CostCompRec@1100525004 : Record 11012012;
      ServLocRec@1210190012 : Record 11012801;
      ServContrRec@1210190013 : Record 11012812;
      ServOrderRec@1100485000 : Record 11012823;
      ServOrderLocRec@1100525006 : Record 11071688;
      ProjElemRec@11012006 : Record 11012010;
      LocRec@11012010 : Record 14;
      ProjLocRec@11012011 : Record 11012011;
      DimValRec@1210190008 : Record 349;
      PurchSetup@1210190009 : Record 312;
      ExtensionContract@1210190002 : Record 11012004;
      DimMgt@1210190007 : Codeunit 408;
      ElementFormat@1210190005 : Codeunit 11012022;
      ValidateCu@1210190004 : Codeunit 11012033;
      gFrom4PSMobile@1100525000 : Boolean;
      ItemTypeOpt@1210190006 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text004@1100485006 : TextConst 'ENU=Changing Price Not Allowed By State: %1';
      Text005@1210190010 : TextConst 'ENU=Inventory Stock sufficient for Item %1, but not present on Location %2';
      UserCode@1210190011 : Code[50];
      ConsentRec@1100485003 : Record 11012226;
      ConsentManCU@1100485008 : Codeunit 11012132;
      Text006@1100485009 : TextConst 'ENU=Changing Quantity Not Allowed By State: %1';
      CalendarMgmt@1100485013 : Codeunit 7600;
      CalChange@1100485015 : Record 11072016;
      StrategicPurchMgt@1100525001 : Codeunit 11020211;
      GWWMgtCU@1100525003 : Codeunit 11012163;
      Vend@1100525005 : Record 23;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text007@1100525012 : TextConst 'ENU=%1 Material Requirement lines generated.';
      Text009@1100525013 : TextConst 'ENU=Total Amount value 0, nothing to divide';
      Text010@1100525009 : TextConst 'ENU=Agreed Amount value 0 not allowed';
      Text011@1100525015 : TextConst 'ENU=Advice Order Line is reopend';
      CalledFromCompressingLines@1100526100 : Boolean;
      Text012@1210190001 : TextConst 'ENU=can not be %1';
      Text013@1100525016 : TextConst 'ENU=First select lines.';
      Text014@1100528800 : TextConst 'ENU=Receipt Date is a free day';
      Text015@1100528600 : TextConst 'ENU=Vendor (%1) doesn''t match Subcontractor (%2) om %3';
      SkipValidateFCY@1100525002 : Boolean;
      ProjectCurrencyExchangeRate@1100525008 : Record 11020628;

    PROCEDURE InitRecord@1100485009();
    VAR
      ProjSetup@1100525000 : Record 315;
    BEGIN
      CLEAR(xRec.Deliver);  //db, 14-07-15: C024037
      "Purchaser Code" := GetDefaultPurchaser("Project No.");
      IF "Record Type" = "Record Type"::Project THEN BEGIN
        IF ProjRec.GET("Project No.") THEN BEGIN
          CASE ProjRec.Deliver OF
            ProjRec.Deliver::Location:
              VALIDATE(Deliver, Deliver::Location);
            ProjRec.Deliver::"Project Location":
              VALIDATE(Deliver, Deliver::"Project Location");
          END;
        END;
      END;
      //db.sn, 18-12-12: C000433
      IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
        IF ServOrderRec.GET("Service Order No.") THEN BEGIN
          IF NOT ServLocRec.GET(ServOrderRec."Service Location No.") THEN ServLocRec.INIT;
          //db, 29-05-13.sn: C005195
          IF (ServOrderRec."Service Location No." = '') OR
             (ServLocRec."Ship To Location" = '' ) THEN BEGIN
            ProjSetup.GET;
            IF ProjSetup.Deliver = ProjSetup.Deliver::Location THEN
              ServLocRec.Deliver := ServLocRec.Deliver::Location;
          END;
          //db, 29-05-13.en: C005195
          CASE ServLocRec.Deliver OF
            ServLocRec.Deliver::Location:
              VALIDATE(Deliver, Deliver::Location);
          END;
        END;
      END;
      //db.en, 18-12-12: C000433
      //NAV2013
      "Process Status" := "Process Status"::Open;
      Processed := FALSE;
      //
    END;

    PROCEDURE ValidateItem@31(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDat@11012001 : Date;
      lvText000@1100485000 : TextConst 'ENU=Trade Item %1 is expired: Vendor %2 suggested %3 as alternative Item.';
      lvRefDate@1100485004 : Date;
      lvDiscRef1@1100485003 : Code[20];
      lvDiscRef2@1100485002 : Code[20];
      lvRefPrio@1100525002 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
      lvLanguage@1100525000 : Code[10];
      ProjSetup@1100525003 : Record 315;
    BEGIN
      //db.sn, 11-08-15: C023137
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
      IF "Record Type" = "Record Type"::Project THEN BEGIN
        ProjRec.GET("Project No.");
        IF NOT "Currency Agreement" THEN  //db, 08-03-16
          "Currency Code" := ProjRec."Currency Code";  //DP00884
        lvLanguage := ProjRec."Language Code";
        lvRefPrio := ValidateCu.GetRefPrioProject(ProjRec, lvDiscType::Purchase);
      END ELSE BEGIN
        ServOrderRec.GET("Service Order No.");
        IF NOT ServLocRec.GET(ServOrderRec."Service Location No.") THEN ServLocRec.INIT;
        lvLanguage := ServLocRec."Language Code";
        IF NOT ServContrRec.GET(ServOrderRec."Service Contract No.") THEN ServContrRec.INIT;
        IF lvLanguage = '' THEN lvLanguage := ServContrRec."Language Code";
        lvRefPrio := ValidateCu.GetRefPrioServContract(ServContrRec, lvDiscType::Purchase);
      END;
      ValidateCu.SetLanguageCode(lvLanguage);
      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
                              "Basic Item","Cost Object",Description,"Unit of Measure",Price,
                              "Discount %",DummyDat,"Gross Price","Description 2","Cost Component",
                              lvDiscRef1,lvDiscRef2,lvRefDate,lvRefPrio);
      //db.en, 11-08-15: C023137

      IF LTypeArtOpt = LTypeArtOpt::"Trade Item" THEN
        "Price History 0 Exists" := ValidateCu.PriceHistory0Exists("Trade Item", "Vendor (Trade Item)", lvRefDate)
      ELSE
        "Price History 0 Exists" := FALSE;

      VALIDATE("Cost Type", "Cost Type"::Material);
      VALIDATE("Cost Component");

      IF "Trade Item" <> '' THEN BEGIN
        TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
        IF TradeItemRec.Expired THEN BEGIN
          IF TradeItemRec."Item Code (Successor)" = '' THEN BEGIN
            IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN
              TradeItemRec.TESTFIELD(Expired,FALSE);
          END ELSE BEGIN
            TradeItemRec.CALCFIELDS("Vendor Name");
            ERROR(lvText000, "Trade Item", TradeItemRec."Vendor Name", TradeItemRec."Item Code (Successor)");
          END;
        END;
      END ELSE BEGIN
        IF "Basic Item" <> '' THEN BEGIN
          BasicItemRec.GET(Manufacturer, "Basic Item");
          IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN
            BasicItemRec.TESTFIELD(Expired,FALSE);
        END ELSE BEGIN
          IF "Item No." <> '' THEN BEGIN
            ItemRec.GET("Item No.");
            ItemRec.TESTFIELD("Advice Blocked",FALSE);
            //C014851.sn
            CASE ItemRec."Advice Order allways" OF
              ItemRec."Advice Order allways"::Inventory: Transaction := Transaction::Inventory;
              ItemRec."Advice Order allways"::Purchase: Transaction := Transaction::Purchase;
              ItemRec."Advice Order allways"::Requisition: Transaction := Transaction::Requisition;
              ItemRec."Advice Order allways"::"Not Set":   //db, 04-03-16: C028844
                BEGIN
                   IF "Line No." = 0 THEN BEGIN
                     ProjSetup.GET;
                     IF ProjSetup."Advice Order Transaction" = ProjSetup."Advice Order Transaction"::Inventory THEN
                       Transaction := Transaction::Inventory;
                   END;
                END;
            END;
            IF Transaction IN [Transaction::Purchase,Transaction::Requisition] THEN
              ItemRec.TESTFIELD("Purchase Blocked",FALSE);
            IF Transaction = Transaction::Inventory THEN
              ItemRec.TESTFIELD("Inventory Blocked",FALSE);
            //C014851.en
            ItemRec.TESTFIELD(Blocked,FALSE);
          END;
        END;
      END;

      IF "Item No." <> '' THEN BEGIN  //Call C002711 c
        GetDefaults;
        //C002711.sn
        IF ItemRec.GET("Item No.") THEN BEGIN
          IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN
            ItemRec.TESTFIELD("Purchase Blocked",FALSE);
          //IF Transaction = Transaction::Inventory THEN
          //  ItemRec.TESTFIELD("Inventory Blocked",FALSE);
          ItemRec.TESTFIELD("Advice Blocked",FALSE);
          VALIDATE("External Text", ItemRec.Text);  //db, 04-05-15: C023210
        END;
        //C002711.en
      END;

      VALIDATE("Gross Price");  //DP00884 (db, 29-10-15: calculate FCY-fields)
      CalculateTotal;

      VALIDATE(Vendor, PreferredVendor);
      VALIDATE("Delivery Period", '');
      xRec."Order Date" := 0D;
      IF "Order Date" = 0D THEN
        "Order Date" := TODAY;
      VALIDATE("Order Date");

      EvaluateStartDate("Receipt Date");

      CheckGtinAlternative;
    END;

    PROCEDURE ValidateVendor@6506();
    VAR
      VendorRec@1210190000 : Record 23;
      lvVendor@1100485000 : Code[20];
      SaveItem@1100525004 : Code[20];
      SaveManufacturer@1100525003 : Code[20];
      SaveBasicItem@1100525002 : Code[20];
      SaveVendor@1100525001 : Code[20];
      SaveTradeItem@1100525000 : Code[20];
      SaveDesc@1100525005 : Text[100];
    BEGIN
      //db, 11-02-09: M10267+12433

      IF ("Basic Item" = '') THEN EXIT;  //db, 18-01-11: M24983

      lvVendor := '';
      IF ItemRec.GET("Item No.") THEN
        lvVendor := ItemRec."Vendor No.";

      IF "Record Type" = "Record Type"::Project THEN BEGIN
        ProjRec.GET("Project No.");
        IF ProjRec."Project Supplier" <> '' THEN
          lvVendor := ProjRec."Project Supplier";
      END;

      IF NOT VendorRec.GET(lvVendor) THEN VendorRec.INIT;
      lvVendor := VendorRec."Vendor (Trade Item)";   //db, 18-02-09: M14407

      SaveItem := "Item No.";
      SaveManufacturer := Manufacturer;
      SaveBasicItem := "Basic Item";
      SaveVendor := "Vendor (Trade Item)";
      SaveTradeItem := "Trade Item";
      SaveDesc := Description;

      //db.sn, 17-11-10: M23941
      //IF (lvVendor = '') OR (lvVendor = SaveVendor) THEN EXIT;  //db, 18-02-09: M14407
      IF lvVendor = '' THEN EXIT;
      IF lvVendor = SaveVendor THEN
        IF SaveTradeItem <> '' THEN
          EXIT;
      //db.en, 17-11-10: M23941

      xRec."Vendor (Trade Item)" := '';
      VALIDATE("Vendor (Trade Item)", lvVendor);  //db, 18-02-09: M14407

      IF (SaveItem <> "Item No.") THEN BEGIN
        "Item No." := SaveItem;
        Description := SaveDesc;
        IF "Item No." <> '' THEN
          ValidateItem(ItemTypeOpt::Item);
      END;

      IF (SaveManufacturer <> Manufacturer) OR (SaveBasicItem <> "Basic Item") THEN BEGIN
        Manufacturer := SaveManufacturer;
        "Basic Item" := SaveBasicItem;
        Description := SaveDesc;
        IF "Basic Item" <> '' THEN
          ValidateItem(ItemTypeOpt::"Basic Item");
      END;

      IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
        "Vendor (Trade Item)" := SaveVendor;
        "Trade Item" := SaveTradeItem;
        Description := SaveDesc;
        IF "Trade Item" <> '' THEN
          ValidateItem(ItemTypeOpt::"Trade Item");
      END;
    END;

    PROCEDURE PreferredVendor@13() : Code[20];
    VAR
      VendorRelationRec@11012001 : Record 11012313;
    BEGIN
      //db, 11-02-09: M10267+12433

      IF "Trade Item" <> '' THEN BEGIN
        IF VendorRelationRec.GET("Vendor (Trade Item)") THEN
          EXIT(VendorRelationRec."Vendor (Purchase)");
      END;

      IF "Item No." <> '' THEN BEGIN
        IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
        EXIT(ItemRec."Vendor No.");
      END;

      EXIT('');
    END;

    PROCEDURE CheckDeliver@1210190002();
    VAR
      LocRec@11012001 : Record 14;
      ProjLocRec@11012002 : Record 11012011;
    BEGIN
      CASE Deliver OF
        Deliver::" ":
          TESTFIELD("Ship To Location", '');
        Deliver::Location:
          BEGIN
            TESTFIELD("Ship To Location");
            LocRec.GET("Ship To Location");
          END;
        Deliver::"Project Location":
          BEGIN
            TESTFIELD("Ship To Location");
            ProjLocRec.GET("Project No.", "Ship To Location");
          END;
        Deliver::"Service Location":
          BEGIN  //db, 30-07-10: M14188
            //TESTFIELD("Ship To Location", '');
            IF "Ship To Location" <> '' THEN
              ServOrderLocRec.GET("Service Order No.", "Ship To Location");
          END;
      END;
    END;

    PROCEDURE GetDefaults@4();
    VAR
      ProjSetup@1210190000 : Record 315;
      ItemRec@11012000 : Record 27;
      PreferenceLocation@1100525000 : Record 11020353;
      LocationFound@1100525001 : Boolean;
      InventoryPrefLoc@1100525002 : Decimal;
      InventoryLoc@1100525003 : Decimal;
    BEGIN
      IF Transaction = Transaction::Plant THEN EXIT; //mg, 07-07-11: RFC605

      ProjSetup.GET;
      IF ProjSetup."Advice Order Transaction" = ProjSetup."Advice Order Transaction"::Purchase THEN BEGIN
        CheckVendBlocked;
        //IF Transaction = Transaction::Purchase THEN  //db, 10-12-10: M23792
        IF Transaction = ProjSetup."Default Advice Order Trans." THEN
          EXIT;
      END;

      InventorySetup.GET;
      //db.sn, 10-12-10: M23792
      IF NOT ProjSetup."Advice Order Inv. Neg. Inv." OR (CurrFieldNo <> FIELDNO(Transaction)) THEN //mg, 01-06-11: M23905
        Transaction := ProjSetup."Default Advice Order Trans.";  //reset transaction after check default from ProjSetup
      //db.en, 10-12-10: M23792

      IF ItemRec.GET("Item No.") THEN BEGIN
        ItemRec.SETRANGE("Project Filter","Project No."); //hbk, 02-06-2010
        IF (ItemRec."Replenishment System" = ItemRec."Replenishment System"::"Prod. Order")
           // OR ItemRec."Adv Ord allways via Inventory" //kkleermaker, 110819, M28688  //**CALL C014851 old
        THEN
          Transaction := Transaction::Inventory;
        //**CALL C014851 sn
        CASE ItemRec."Advice Order allways" OF
          ItemRec."Advice Order allways"::Inventory: Transaction := Transaction::Inventory;
          ItemRec."Advice Order allways"::Purchase: Transaction := Transaction::Purchase;
          ItemRec."Advice Order allways"::Requisition: Transaction := Transaction::Requisition;
        END;

        IF ItemRec."Advice Order allways" IN [ItemRec."Advice Order allways"::"Not Set",ItemRec."Advice Order allways"::Inventory] THEN BEGIN
        //When transaction is Inventory then location will be filled
        //When transaction is not forced set to Purchase, transaction may be set to Inventory and Location wil be filled if item is in stock..
        //**CALL C014851 en
          PreferenceLocation.SETRANGE(Type,"Record Type");
          CASE "Record Type" OF
            "Record Type"::Project: PreferenceLocation.SETRANGE("No.","Project No.");
            "Record Type"::ServOrder: PreferenceLocation.SETRANGE("No.","Service Order No.");
          END;
          PreferenceLocation.SETCURRENTKEY(Priority);
          IF PreferenceLocation.FINDSET THEN BEGIN
            REPEAT
              InventoryLoc := GetInventory(PreferenceLocation."Location Code",ItemRec,FALSE);
              InventoryPrefLoc += InventoryLoc;
              IF (InventoryLoc >= "Quantity (Advice)") AND (InventoryLoc > 0) THEN BEGIN  //db, 11-03-11: M25921
                LocationFound := TRUE;
                "Location Code" := PreferenceLocation."Location Code";
                Transaction := Transaction::Inventory;
              END;
            UNTIL (PreferenceLocation.NEXT = 0) OR LocationFound;
            IF (NOT LocationFound) THEN
              IF (InventoryPrefLoc >= "Quantity (Advice)") AND (InventoryPrefLoc > 0) THEN  //db, 11-03-11: M25921
                Transaction := Transaction::Inventory
              //mg.sn, 20-05-11: M27691
              ELSE BEGIN
                InventoryLoc := GetInventory("Location Code",ItemRec,FALSE);
                IF (InventoryLoc >= "Quantity (Advice)") AND (InventoryLoc > 0) THEN
                  Transaction := Transaction::Inventory;
              END;
              //mg.en, 20-05-11: M27691
          END ELSE BEGIN
            //Try Current Location First
            IF ("Location Code" = '') AND NOT InventorySetup."Location Mandatory" THEN BEGIN
              ItemRec.SETRANGE("Location Filter", "Location Code");
              ItemRec.CALCFIELDS(Inventory);
              IF (ItemRec.Inventory >= "Quantity (Advice)") AND (ItemRec.Inventory > 0) THEN BEGIN
                LocationFound := TRUE;
                Transaction := Transaction::Inventory;
              END;
            END;
            //
            IF NOT LocationFound THEN
              IF LocRec.FINDSET THEN BEGIN
                REPEAT
                  //mg.sc, 28-06-11: M27068
        //          ItemRec.SETRANGE("Location Filter", LocRec.Code);
        //          ItemRec.CALCFIELDS(Inventory);
                  InventoryLoc := GetInventory(LocRec.Code,ItemRec,FALSE);
                  IF (InventoryLoc >= "Quantity (Advice)") AND (InventoryLoc > 0) THEN BEGIN  //db, 05-01-09
                  //mg.ec, 28-06-11: M27068
                    LocationFound := TRUE;
                    "Location Code" := LocRec.Code;
                    Transaction := Transaction::Inventory;  //db, 05-01-09
                  END;
                UNTIL (LocRec.NEXT = 0) OR LocationFound;
              END;
            //mg.sn, 10-09-10: M22829
            IF NOT LocationFound THEN BEGIN
              //mg.sc, 28-06-11: M27068
        //      ItemRec.SETRANGE("Location Filter", '');
        //      ItemRec.CALCFIELDS(Inventory);
              InventoryLoc := GetInventory('',ItemRec,FALSE);
              IF (InventoryLoc >= "Quantity (Advice)") AND (InventoryLoc > 0) THEN BEGIN
              //mg.ec, 28-06-11: M27068
                LocationFound := TRUE;
                "Location Code" := '';
                Transaction := Transaction::Inventory;
              END;
            END;
            //mg.en, 10-09-10: M22829
            //IF NOT ItemRec."Adv Ord allways via Inventory" AND //kkleermaker, 110819, M28688          //**CALL C014851.old
            IF (ItemRec."Advice Order allways" = ItemRec."Advice Order allways"::"Not Set") AND  //**CALL C014851.new
               NOT LocationFound AND
               (CurrFieldNo <> FIELDNO(Transaction))
            THEN
              //Transaction := Transaction::Purchase; //mg, 24-05-11: M27143
              Transaction := ProjSetup."Default Advice Order Trans."; //mg, 24-05-11: M27143
          END;
        END;

        //db.sn, 02-11-10
        IF NOT LocationFound THEN BEGIN
          IF (Deliver = Deliver::Location) AND ("Ship To Location" <> '') THEN BEGIN
            //"Location Code" := "Ship To Location";
          END ELSE BEGIN
            "Location Code" := '';
            "Bin Code" := '';
          END;
        END;
        IF ("Location Code" <> xRec."Location Code") AND ("Location Code" <> '') THEN BEGIN
          GetDefaultBin("Location Code", "Bin Code", "Bin Code (Project Inventory)");
        END;
        //db.en, 02-11-10
      END;   //**CALL C014851
      CheckVendBlocked;
      IF Transaction <> xRec.Transaction THEN
        VALIDATE("Delivery Period", ''); //db, 27-07-10: M20091
    END;

    PROCEDURE GetDefaultPurchaser@1210190000(IProjectNo@1210190001 : Code[20]) : Code[10];
    VAR
      lvProjRec@1210190000 : Record 11072003;
    BEGIN
      IF NOT lvProjRec.GET(IProjectNo) THEN
        CLEAR(lvProjRec);

      EXIT(lvProjRec."Purchaser Code");
    END;

    PROCEDURE CheckInventoryOnLocation@1210190006();
    BEGIN
      IF (Transaction <> Transaction::Inventory) THEN
        EXIT;

      IF ("Location Code" = '') THEN BEGIN
        InventorySetup.GET;
        IF InventorySetup."Location Mandatory" THEN
          EXIT;
      END;

      IF ItemRec.GET("Item No.") THEN BEGIN
        ItemRec.SETRANGE("Location Filter", "Location Code");
        ItemRec.CALCFIELDS(Inventory);
        IF ItemRec.Inventory < "Quantity (Advice)" THEN BEGIN
          ItemRec.SETRANGE("Location Filter");
          ItemRec.CALCFIELDS(Inventory);
          IF ItemRec.Inventory >= "Quantity (Advice)" THEN
            MESSAGE(Text005, "Item No.", "Location Code");
        END;
      END;
    END;

    PROCEDURE CheckBlocked@1210190003();
    BEGIN
      IF "Record Type" <> "Record Type"::Project THEN EXIT;

      ProjRec.GET("Project No.");
      ProjRec.TestBlocked;
    END;

    PROCEDURE CheckItemUnitConversion@1210190008(VAR MainNewRec@1210190006 : Record 11012055;MainOldRec@1210190007 : Record 11012055);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            "Quantity (Advice)","Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              "Quantity (Advice)","Unit of Measure",UnitFactorNew);
          END ELSE BEGIN
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                "Quantity (Advice)","Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF UnitFactorNew <> UnitFactorOld THEN BEGIN  //db, 20-04-11: M26826
            IF "Gross Price" <> 0 THEN
              VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld))
            ELSE
              VALIDATE(Price, (Price * UnitFactorNew / UnitFactorOld));
          END;
        END;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190004();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CalculateNettPrice@1210190005();
    BEGIN
      //DP00884
      Price := "Gross Price" - (("Gross Price"/100) * "Discount %");
      "Price (FCY)" := "Gross Price (FCY)" - (("Gross Price (FCY)"/100) * "Discount %");
      CalculateTotal;
    END;

    PROCEDURE CalculateDiscount@1100525024();
    BEGIN
      //DP00884
      IF "Gross Price" <> 0 THEN BEGIN
        IF ("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Discount %" = 0) THEN BEGIN
          "Gross Price" := Price;
          "Gross Price (FCY)" := "Price (FCY)";
        END ELSE BEGIN
          "Discount %" := (("Gross Price" - Price) / "Gross Price") * 100;
        END;
      END ELSE BEGIN
        IF "Discount %" <> 100 THEN BEGIN
          "Gross Price" := Price / ((100 - "Discount %") / 100);
          "Gross Price (FCY)" := "Price (FCY)" / ((100 - "Discount %") / 100);
        END ELSE BEGIN
          "Gross Price" := Price;
          "Gross Price (FCY)" := "Price (FCY)";
        END;
      END;
    END;

    PROCEDURE CheckRecordType@1100485000(lvAction@1100485000 : Integer);
    VAR
      ProjSetup@1100528000 : Record 315;
      BlockingCode@1100528001 : Record 11012027;
    BEGIN
      IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        IF NOT gFrom4PSMobile THEN
          ServOrderRec.CheckStatus(2)
        ELSE
          ServOrderRec.CheckStatus(1);  //* For 4PS-Mobile 'Technical Finished' must be possible (JH)
        "Service Contract No." := ServOrderRec."Service Contract No.";
        IF lvAction = 0 THEN BEGIN  //db.sn, 24-02-10
          CurrFieldNo := FIELDNO("Service Order No.");
          CheckAdditionalCostService;
        END;                        //db.en, 24-02-10
        TESTFIELD("Project No.", '');
      END ELSE BEGIN
        TESTFIELD("Service Order No.", '');
        ProjSetup.GET;
        ProjRec.GET("Project No.");
        IF NOT "Currency Agreement" THEN  //db, 08-03-16
          "Currency Code" := ProjRec."Currency Code";  //DP00884
        IF (ProjRec."Blocking Code" <> '') AND
           ((ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
            (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished") OR
            ((ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND ProjSetup."Provisions at Closure") )
        THEN
          BlockingCode.CheckBlocked(ProjRec."Blocking Code", BlockingCode.Switch::"Purchase Order", ProjRec, TRUE);
        //ProjRec.CheckProjectStatus(2);
        IF ProjSetup."Provisions at Closure" THEN
          ProjRec.CheckProjectStatus(-1)
        ELSE
          ProjRec.CheckProjectStatus(1);
      END;
    END;

    PROCEDURE ReceivedPurchaseQuantity@1100485001(Company@1100525000 : Text[30]) ReceivedQuan : Decimal;
    VAR
      PurchLineRec@1100485000 : Record 39;
    BEGIN
      ReceivedQuan := 0;
      IF "Purchase Route Reference" = '' THEN EXIT(0);

      IF Company <> '' THEN
        PurchLineRec.CHANGECOMPANY(Company);  //DP00465
      PurchLineRec.SETCURRENTKEY("Document Type", "Purchase Route Reference");
      PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Order);
      PurchLineRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
      IF PurchLineRec.FINDSET THEN BEGIN
        REPEAT
          IF PurchLineRec."Unit of Measure Code" = "Unit of Measure" THEN
            ReceivedQuan := ReceivedQuan + PurchLineRec."Quantity Received"
          ELSE
            ReceivedQuan := ReceivedQuan + PurchLineRec."Quantity Received" * PurchLineRec."Qty. per Unit of Measure";
        UNTIL PurchLineRec.NEXT = 0;
      END;

      EXIT (ReceivedQuan);
    END;

    PROCEDURE GetStatusOnProcess@1100485002(ResetQuantity@1210190000 : Boolean);
    BEGIN
      //db, 09-12-11: M31310 (function also called from codeunit 11012041 and 333)
      IF ResetQuantity THEN BEGIN
        "Quantity (Processed)" := "Quantity (Processed)" + "Quantity (Advice)";
        "Quantity (Advice)" := 0;
      END;
      //IF ("Quantity (Processed)" < "Quantity (Budget)" + "Quantity (Advice)") OR
      //   ("Quantity (Advice)" > "Quantity (Budget)") OR
      //   (("Quantity (Budget)" = 0) AND ("Quantity (Advice)" = 0) AND ("Quantity (Processed)" = 0)) THEN
      //kzwerver, 140522, c, #C014446
      IF ("Quantity (Processed)" < "Quantity (Budget)") OR ("Quantity (Advice)" > 0)
      THEN
        ProcessOpenStatus
      ELSE
        ProcessCloseStatus;
    END;

    PROCEDURE ProcessOpenStatus@1210190015();
    BEGIN
      //db, 09-12-11: M31310
      VALIDATE(Processed, FALSE);  //mg.c, 03-10-11: M28950
      IF "Quantity (Processed)" <> 0 THEN
        "Process Status" := "Process Status"::"Partly Processed"
      ELSE
        "Process Status" := "Process Status"::Open;
    END;

    PROCEDURE ProcessCloseStatus@1210190016();
    BEGIN
      //db, 09-12-11: M31310
      VALIDATE(Processed, TRUE);  //mg.c, 03-10-11: M28950
      "Process Status" := "Process Status"::Processed;
    END;

    PROCEDURE ChangeStatusAttachedLine@1210190012();
    VAR
      AdviceOrderLine@1210190000 : Record 11012055;
    BEGIN
      //mg, 03-10-11: M28950
      IF "Source Type" IN ["Source Type"::"Recipe Line", "Source Type"::"BOM Line"] THEN BEGIN
        AdviceOrderLine.SETRANGE("Record Type", "Record Type");
        AdviceOrderLine.SETRANGE("Project No.", "Project No.");
        AdviceOrderLine.SETRANGE("Service Order No.", "Service Order No.");
        AdviceOrderLine.SETRANGE("Source Type", "Source Type");
        AdviceOrderLine.SETRANGE("Attached to Line No.", "Attached to Line No.");
        AdviceOrderLine.SETFILTER("Line No.", '<>%1', "Line No.");
        //AdviceOrderLine.SETFILTER("Process Status", '..%1', AdviceOrderLine."Process Status"::Released);
        AdviceOrderLine.SETFILTER("Process Status", '..%1|%2', AdviceOrderLine."Process Status"::Released, AdviceOrderLine."Process Status"::"On Hold"); //CALL 27071
        AdviceOrderLine.SETRANGE(Processed, FALSE);
        IF AdviceOrderLine.ISEMPTY THEN BEGIN
          IF AdviceOrderLine.GET("Record Type", "Project No.", "Service Order No.", "Attached to Line No.") THEN BEGIN
            IF NOT AdviceOrderLine.Processed AND
               ((("Source Type" = "Source Type"::"Recipe Line") AND
                (AdviceOrderLine."Source Type" = AdviceOrderLine."Source Type"::"Recipe Header")) OR
                (("Source Type" = "Source Type"::"BOM Line") AND
                 (AdviceOrderLine."Source Type" = AdviceOrderLine."Source Type"::"BOM Header"))) THEN
            AdviceOrderLine.VALIDATE(Processed, TRUE);
            AdviceOrderLine."Process Status" := "Process Status"::Processed;
            AdviceOrderLine."Quantity (Processed)" += AdviceOrderLine."Quantity (Advice)";
            AdviceOrderLine."Quantity (Advice)" := 0;
            AdviceOrderLine.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE GetDepartment@1100485003();
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN BEGIN
        ProjRec.GET("Project No.");
        "Global Dimension 1 Code" := ProjRec."Global Dimension 1 Code";
      END;
      IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        IF "Additional Cost (Service)" = TRUE THEN  //db, 24-02-10
          VALIDATE("Global Dimension 1 Code", ServOrderRec."Department Code (Other)")
        ELSE
          VALIDATE("Global Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
      END;
    END;

    PROCEDURE GetItemSpecifications@1100485006();
    BEGIN
      IF ItemRec.GET("Item No.") THEN BEGIN
        "Item Series" := ItemRec."Item Series";
        "Item Type" := ItemRec."Item Type";
        "Item Brand" := ItemRec."Item Brand";
      END;
    END;

    PROCEDURE CheckVendorRelation@1100485004(CalledBy@1100525000 : Integer);
    VAR
      VendorRec@1100485001 : Record 23;
      VendorRelationRec@1100485000 : Record 11012313;
    BEGIN
      IF CalledBy = FIELDNO("Vendor (Trade Item)") THEN
        IF "Vendor (Trade Item)" <> '' THEN
          IF VendorRelationRec.GET("Vendor (Trade Item)") THEN
            IF VendorRelationRec."Vendor (Purchase)" <> '' THEN
              VALIDATE(Vendor, VendorRelationRec."Vendor (Purchase)"); //Validate to check vendor is blocked

      IF CalledBy = FIELDNO(Vendor) THEN
        IF Vendor <> '' THEN
          IF VendorRec.GET(Vendor) THEN
            IF VendorRec."Vendor (Trade Item)" <> '' THEN
              IF "Trade Item" = '' THEN
                "Vendor (Trade Item)" := VendorRec."Vendor (Trade Item)";
    END;

    PROCEDURE GetDefaultsCostObject@3();
    BEGIN
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');

      IF Description = '' THEN
        Description := DimValRec.Name;
      IF "Unit of Measure" = '' THEN
        "Unit of Measure" := DimValRec."Unit of Measure";
      IF "Cost Component" = '' THEN
        "Cost Component" := DimValRec."Cost Component";

      CheckDeliveryPeriod;  //db, 08-12-10: M19841
    END;

    PROCEDURE GetReferenceData@1100485008(VAR lvRefDate@1100485002 : Date;VAR lvDiscRef1@1100485001 : Code[20];VAR lvDiscRef2@1100485000 : Code[20]);
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN BEGIN
        ProjRec.GET("Project No.");
        lvRefDate := ValidateCu.GetRefDateProject(ProjRec);
        lvDiscRef1 := ProjRec."Purch Discount Term Group 1";
        lvDiscRef2 := ProjRec."Purch Discount Term Group 2";
      END;
      IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        lvRefDate := ValidateCu.GetRefDateServOrder(ServOrderRec);
        lvDiscRef1 := ServOrderRec."Purch Discount Term Group 1";
        lvDiscRef2 := ServOrderRec."Purch Discount Term Group 2";
      END;
    END;

    PROCEDURE CheckGtinAlternative@1100485010();
    VAR
      TradeItemRec@1100485000 : Record 11012317;
      TradeItemRec2@1100485001 : Record 11012317;
      AlterPrice@1100485002 : Decimal;
      lvRefDate@1100485004 : Date;
      lvDiscRef1@1100485005 : Code[20];
      lvDiscRef2@1100485006 : Code[20];
      ValidateCu@1100485003 : Codeunit 11012033;
    BEGIN
      "Alternative Vendor" := '';
      "Alternative Item" := '';
      "Alternative Price" := 0;

      IF "Trade Item" = '' THEN EXIT;

      IF TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN BEGIN
        IF TradeItemRec."GTIN Code (Item)" = '' THEN EXIT;

        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
        ValidateCu.GetPriceTradeItem(TradeItemRec, lvRefDate, lvDiscRef1, lvDiscRef2, '');
        IF TradeItemRec."Qty. per Unit of Measure" = 0 THEN  //db, 06-03-09
          AlterPrice := TradeItemRec."Nett Price"
        ELSE
          AlterPrice := TradeItemRec."Nett Price" / TradeItemRec."Qty. per Unit of Measure";

        TradeItemRec2.RESET;
        TradeItemRec2.SETCURRENTKEY("GTIN Code (Item)");
        TradeItemRec2.SETRANGE("GTIN Code (Item)", TradeItemRec."GTIN Code (Item)");
        IF TradeItemRec2.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            ValidateCu.GetPriceTradeItem(TradeItemRec2, lvRefDate, lvDiscRef1, lvDiscRef2, '');
            IF TradeItemRec2."Qty. per Unit of Measure" <> 0 THEN  //db, 06-03-09
              TradeItemRec2."Nett Price" := TradeItemRec2."Nett Price" / TradeItemRec2."Qty. per Unit of Measure";
            IF (TradeItemRec2.Vendor <> TradeItemRec.Vendor) AND (TradeItemRec2."Item Code" <> TradeItemRec."Item Code") THEN BEGIN
              IF (TradeItemRec2."Nett Price" < AlterPrice) AND (TradeItemRec2."Nett Price" <> 0) THEN BEGIN
                "Alternative Vendor" := TradeItemRec2.Vendor;
                "Alternative Item" := TradeItemRec2."Item Code";
                "Alternative Price" := TradeItemRec2."Nett Price";
                AlterPrice := "Alternative Price";
              END;
            END;
          UNTIL TradeItemRec2.NEXT = 0;
        END ELSE BEGIN
          TradeItemRec2.RESET;
          TradeItemRec2.SETCURRENTKEY("Product Code");
          TradeItemRec2.SETRANGE(Manufacturer, TradeItemRec.Manufacturer);
          TradeItemRec2.SETRANGE("Product Code", TradeItemRec."Product Code");
          IF TradeItemRec2.FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              ValidateCu.GetPriceTradeItem(TradeItemRec2, lvRefDate, lvDiscRef1, lvDiscRef2, '');
              IF (TradeItemRec2.Vendor <> TradeItemRec.Vendor) AND (TradeItemRec2."Item Code" <> TradeItemRec."Item Code") THEN BEGIN
                IF (TradeItemRec2."Nett Price" < AlterPrice) AND (TradeItemRec2."Nett Price" <> 0) THEN BEGIN
                  "Alternative Vendor" := TradeItemRec2.Vendor;
                  "Alternative Item" := TradeItemRec2."Item Code";
                  "Alternative Price" := TradeItemRec2."Nett Price";
                  AlterPrice := "Alternative Price";
                END;
              END;
            UNTIL TradeItemRec2.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE UpdateConsentLines@1100525000();
    VAR
      AdviceOrderLine@1100528400 : Record 11012055;
    BEGIN
      IF ConsentRec.READPERMISSION THEN BEGIN
        IF "Process Status" = "Process Status"::Released THEN BEGIN
          DeleteConsentLines(FALSE);
          ConsentManCU.HandleAdviceOrders(Rec,FALSE,TRUE);
          IF AdviceOrderLine.GET("Record Type", "Project No.", "Service Order No.", "Line No.") THEN BEGIN
            // Modify and Get are necessary because UpdateConsentLines is called from
            // OnValidate and current record may be changed by AutoConsentAdviceOrderLine.
            MODIFY;
            ConsentManCU.AutoConsentAdviceOrderLine(Rec);
            IF GET("Record Type", "Project No.", "Service Order No.", "Line No.") THEN;
          END;
        END;
      END;
    END;

    PROCEDURE DeleteConsentLines@1100525001(lvManualTooBln@1100525000 : Boolean);
    BEGIN
      ConsentRec.SETRANGE("Document Type",ConsentRec."Document Type"::"Advice Order");
      ConsentRec.SETRANGE("Document Line No.","Line No.");

      IF lvManualTooBln THEN
        ConsentRec.SETRANGE(Manual,TRUE)
      ELSE
        ConsentRec.SETRANGE(Manual,FALSE);

      CASE "Record Type" OF
        "Record Type"::Project:
          BEGIN
            ConsentRec.SETRANGE(Type,ConsentRec.Type::Project);
            ConsentRec.SETRANGE("Type No.","Project No.");
          END;
        "Record Type"::ServOrder:
          BEGIN
            ConsentRec.SETRANGE(Type,ConsentRec.Type::"Service Order");
            ConsentRec.SETRANGE("Type No.","Service Order No.");
          END;
      END;

      IF ConsentRec.FINDSET(FALSE,FALSE) THEN
        ConsentRec.DELETEALL;
    END;

    PROCEDURE GetVendorPrice@1100525002(iVendor@1100525000 : Code[20];iPrice@1100525004 : Decimal;VAR oCurrency@1100525002 : Code[20]) oPrice : Decimal;
    VAR
      VendorRec@1100525003 : Record 23;
      CurrExchRate@1100525006 : Record 330;
      CurrFactor@1100525005 : Decimal;
      lvText000@1100525001 : TextConst 'ENU=%1 not found';
      RefDate@1100525007 : Date;
    BEGIN
      oCurrency := '';
      IF VendorRec.GET(iVendor) THEN BEGIN
        oCurrency := VendorRec."Currency Code";
        //DP00884.sn
        RefDate := WORKDATE;
        //Type: 0=General, 1=Project, 2=Estimate
        IF ProjRec.GET("Project No.") THEN BEGIN
          IF ProjRec."Reference Date (Currency)" <> 0D THEN
            RefDate := ProjRec."Reference Date (Currency)";
          CurrFactor := CurrExchRate.ExchangeRate(1, "Project No.", RefDate, oCurrency, FALSE);
        END ELSE BEGIN
          CurrFactor := CurrExchRate.ExchangeRate(0, '', RefDate, oCurrency, FALSE);
        END;
        //DP00884.en
        IF CurrFactor = 0 THEN
          ERROR(lvText000, CurrExchRate.TABLECAPTION);
      END;
      IF oCurrency = '' THEN
        oPrice := iPrice
      ELSE
        oPrice := iPrice * CurrFactor;

      EXIT(oPrice);
    END;

    PROCEDURE ConvertVendorPrice@1100525006(iVendor@1100525000 : Code[20];iPrice@1100525004 : Decimal) oPrice : Decimal;
    VAR
      GLSetup@1100525007 : Record 98;
      VendorRec@1100525003 : Record 23;
      CurrExchRate@1100525006 : Record 330;
      CurrFactor@1100525005 : Decimal;
      lvText000@1100525001 : TextConst 'ENU=%1 not found';
      CurrencyCode@1100525002 : Code[20];
      RefDate@1100525008 : Date;
    BEGIN
      IF VendorRec.GET(iVendor) THEN BEGIN
        CurrencyCode := VendorRec."Currency Code";
        //DP00884.sn
        RefDate := WORKDATE;
        //Type: 0=General, 1=Project, 2=Estimate
        IF ProjRec.GET("Project No.") THEN BEGIN
          IF ProjRec."Reference Date (Currency)" <> 0D THEN
            RefDate := ProjRec."Reference Date (Currency)";
          CurrFactor := CurrExchRate.ExchangeRate(1, "Project No.", RefDate, CurrencyCode, FALSE);
        END ELSE BEGIN
          CurrFactor := CurrExchRate.ExchangeRate(0, '', RefDate, CurrencyCode, FALSE);
        END;
        //DP00884.en
        IF CurrFactor = 0 THEN
          ERROR(lvText000, CurrExchRate.TABLECAPTION);
      END;

      GLSetup.GET;
      IF CurrencyCode = '' THEN
        oPrice := iPrice
      ELSE
        oPrice := ROUND(iPrice / CurrFactor, GLSetup."Unit-Amount Rounding Precision");

      EXIT(oPrice);
    END;

    PROCEDURE InventoryPrefLocations@1100525004() Inventory : Decimal;
    VAR
      PreferenceLocation@1100525000 : Record 11020353;
      Item@1100525001 : Record 27;
    BEGIN
      IF ("Supplying Company Inventory" <> '') THEN BEGIN
        Item.CHANGECOMPANY("Supplying Company Inventory");
        PreferenceLocation.CHANGECOMPANY("Supplying Company Inventory");
      END;

      IF NOT Item.GET("Item No.") THEN
        EXIT;

      PreferenceLocation.SETRANGE(Type,"Record Type");
      CASE "Record Type" OF
        "Record Type"::Project:
          BEGIN
            PreferenceLocation.SETRANGE("No.","Project No.");
            Item.SETRANGE("Project Filter","Project No.");
          END;
        "Record Type"::ServOrder: PreferenceLocation.SETRANGE("No.","Service Order No.");
      END;
      IF PreferenceLocation.FINDSET THEN
        REPEAT
          Inventory += GetInventory(PreferenceLocation."Location Code",Item,FALSE);
        UNTIL PreferenceLocation.NEXT = 0;
    END;

    PROCEDURE GetInventory@1100525003(Location@1100525000 : Code[10];VAR Item@1100525002 : Record 27;AllLocations@1100525001 : Boolean) Inventory : Decimal;
    VAR
      ItemAvailFormsMgt@1100525005 : Codeunit 353;
    BEGIN
      ItemAvailFormsMgt.SetCalledFromAdviceOrder;  //db, 11-10-13: C000902
      ItemAvailFormsMgt.SetCompany("Supplying Company Inventory");
      EXIT(ItemAvailFormsMgt.GetInventory(Location,Item,AllLocations,"Receipt Date"));
    END;

    PROCEDURE SetFrom4PSMobile@1100525007();
    BEGIN
      gFrom4PSMobile := TRUE;
    END;

    PROCEDURE SetLocationCode@1100525008();
    VAR
      Item@1100525000 : Record 27;
      PrefLocation@1100525001 : Record 11020353;
    BEGIN
      IF ("Item No." = '') OR
         ((Transaction <> Transaction::Purchase) AND (Transaction <> Transaction::Requisition)) OR
         ("Location Code" <> '') THEN
        EXIT;

      IF Item.GET("Item No.") THEN
        IF Item."Blanket Order Plan Item" THEN BEGIN
          CASE "Record Type" OF
            "Record Type"::Project:
              BEGIN
                PrefLocation.SETRANGE(Type,PrefLocation.Type::Job);
                PrefLocation.SETRANGE("No.","Project No.");
              END;
            "Record Type"::ServOrder:
              BEGIN
                PrefLocation.SETRANGE(Type,PrefLocation.Type::"Service Order");
                PrefLocation.SETRANGE("No.","Service Order No.");
              END;
          END;
          PrefLocation.SETCURRENTKEY(Priority);
          IF PrefLocation.FINDFIRST THEN
            "Location Code" := PrefLocation."Location Code";
        END;

      //db.sn, 02-11-10
      IF ("Location Code" <> xRec."Location Code") AND ("Location Code" <> '') THEN
        GetDefaultBin("Location Code", "Bin Code", "Bin Code (Project Inventory)");
      //db.en, 02-11-10
    END;

    PROCEDURE CheckAdditionalCostService@1100525017();
    BEGIN
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Cost Type")) THEN BEGIN
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          "Additional Cost (Service)" :=
            ServOrderRec.GetAdditionalCostService("Service Order No.","Cost Object","Cost Type"+2,'');
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Additional Cost (Service)" <> xRec."Additional Cost (Service)") THEN BEGIN
          IF "Additional Cost (Service)" = TRUE THEN
            VALIDATE("Global Dimension 1 Code", ServOrderRec."Department Code (Other)")
          ELSE
            VALIDATE("Global Dimension 1 Code", ServOrderRec."Global Dimension 1 Code");
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE GetDeliverableQuantity@1100525009() : Decimal;
    VAR
      OrigQuan@1100525000 : Decimal;
      NextQuan@1100525001 : Decimal;
      UnitFactor@1100525002 : Decimal;
      NextFactor@1100525003 : Decimal;
      ItemUnitRec@1100525004 : Record 5404;
    BEGIN
      //db, 08-03-10: M17673
      //db, 15-09-10: M22755
      OrigQuan := "Quantity (Advice)";

      IF (OrigQuan <= 0) THEN
        EXIT(OrigQuan);

      IF ("Trade Item" = '') THEN BEGIN
        IF ItemRec.GET("Item No.") THEN BEGIN
          IF ItemUnitRec.GET("Item No.", "Unit of Measure") THEN BEGIN
            EXIT(OrigQuan * ItemUnitRec."Qty. per Unit of Measure");
          END;
        END;
        EXIT(OrigQuan);
      END;

      IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN
        EXIT(OrigQuan);

      IF TradeItemRec."Application Unit Quantity" = 0 THEN
        TradeItemRec."Application Unit Quantity" := 1;
      IF TradeItemRec."Minimum Order Quantity" = 0 THEN
        TradeItemRec."Minimum Order Quantity" := 1;
      IF TradeItemRec."Lot Size Quantity" = 0 THEN
        TradeItemRec."Lot Size Quantity" := 1;
      UnitFactor := TradeItemRec."Application Unit Quantity" * TradeItemRec."Minimum Order Quantity";
      IF TradeItemRec."Application Unit Quantity" = 1 THEN
        NextFactor := TradeItemRec."Lot Size Quantity"
      ELSE
        NextFactor := UnitFactor;

      IF UnitFactor > 1 THEN BEGIN
        //db.sn, 25-05-11: M26369
        //IF "Unit of Measure" = UPPERCASE(TradeItemRec."Packaging Unit") THEN
        //  IF TradeItemRec."Application Unit Quantity" = 1 THEN
        //    EXIT( ROUND(OrigQuan, TradeItemRec."Application Unit Quantity", '>'))
        //  ELSE
        //    EXIT( ROUND(OrigQuan, TradeItemRec."Lot Size Quantity", '>'));
        //db.en, 25-05-11: M26369
        NextQuan := UnitFactor;
        IF OrigQuan <= NextQuan THEN
          EXIT( NextQuan);
        REPEAT
          NextQuan := NextQuan + NextFactor;
        UNTIL NextQuan >= OrigQuan;
        EXIT( NextQuan);
      END;

      EXIT( ROUND(OrigQuan, TradeItemRec."Lot Size Quantity", '>'));
    END;

    PROCEDURE ValidateAdditionalCost@1100525011();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      SaveCostComp := "Cost Component";
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");
      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;  //db, 18-03-10: T4641

      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525010();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        "Additional Cost (Service)" := CostCompRec."Additional Cost (Service)";
      END;
    END;

    PROCEDURE CalculateTotal@1100525012();
    VAR
      GLSetup@1100525000 : Record 98;
    BEGIN
      GLSetup.GET;
      Amount := ROUND(("Quantity (Advice)" * Price), GLSetup."Amount Rounding Precision");
      "Amount (FCY)" := ROUND(("Quantity (Advice)" * "Price (FCY)"), GLSetup."Amount Rounding Precision");  //DP00884
      UpdateConsentLines;
    END;

    PROCEDURE GetDeliveryPeriodLocation@1100525014(ILocation@1100525000 : Code[10]) retValue : Text[30];
    VAR
      Location@1100525001 : Record 14;
      InventorySetup@1100525002 : Record 313;
    BEGIN
      //mg, 21-07-10, M20091
      IF ILocation <> '' THEN
        IF Location.GET(ILocation) THEN
          retValue := FORMAT(Location."Outbound Whse. Handling Time");

      IF retValue = '' THEN BEGIN
        InventorySetup.GET;
        retValue := FORMAT(InventorySetup."Outbound Whse. Handling Time");
      END;
    END;

    PROCEDURE CheckVendBlocked@1100525018();
    BEGIN
      IF Vendor = '' THEN
        EXIT;

      IF Vendor <> Vend."No." THEN
        Vend.GET(Vendor);

      Vend.CheckBlockedVendOnDocs(Vend,FALSE);
      //IF Transaction = Transaction::Purchase THEN
      IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN
        Vend.TESTFIELD("Block Purchase Order",FALSE);
    END;

    PROCEDURE GetDefaultOrderAddress@1100525013();
    VAR
      OrderAddress@1100525000 : Record 224;
    BEGIN
      OrderAddress.SETRANGE("Vendor No.", Vendor);
      OrderAddress.SETRANGE("Default Order Address",TRUE);
      IF OrderAddress.FINDFIRST THEN
        "Order Address Code" := OrderAddress.Code;

      IF NOT OrderAddress.GET(Vendor, "Order Address Code") THEN
        "Order Address Code" := '';
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012055) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012055');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Advice Order Line", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE LookupItemData@1210190001(VAR ZoomType@1210190000 : Integer;ItemCode@1100525001 : Code[20];VendorCode@1100525000 : Code[20]);
    VAR
      ItemFrm@1210190003 : Page 31;
      BasicItemFrm@1210190002 : Page 11012333;
      TradeItemFrm@1210190001 : Page 11012334;
      lvRefDate@1100485002 : Date;
      lvDiscRef1@1100485001 : Code[20];
      lvDiscRef2@1100485000 : Code[20];
      GabiVendorRec@1210190004 : Record 11012304;
      ProjSetup@1100525002 : Record 315;
    BEGIN
      //db, 30-11-10: M23941: function removed from codeunit 11012041 due to problem with CurrFieldNo
      ProjSetup.GET;  // 34377.n

      IF ZoomType = 0 THEN BEGIN
        CurrFieldNo := FIELDNO("Vendor (Trade Item)");
        IF "Basic Item" = '' THEN BEGIN
          GabiVendorRec.SETCURRENTKEY(Code);
          GabiVendorRec.Code := "Vendor (Trade Item)";
          IF PAGE.RUNMODAL(PAGE::"ETIM Vendor List", GabiVendorRec) = ACTION::LookupOK THEN BEGIN
            // 34377.sn
            IF (NOT ProjSetup."Released AdvOrder not editable") OR
               ((ProjSetup."Released AdvOrder not editable") AND
                ("Process Status" < "Process Status"::Released))
            THEN
            // 34377.en
              VALIDATE("Vendor (Trade Item)", GabiVendorRec.Code);
          END;
        END ELSE BEGIN
          ZoomType := 3;
        END;
      END;

      IF ZoomType = 1 THEN BEGIN
        CurrFieldNo := FIELDNO("Item No.");
        CLEAR(ItemFrm);
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Advice Order Line",
          "Project No.",Element,"Extension Contract","Service Order No.",
          "Record Type",'','',"Line No.",'','');
        ItemRec.SETRANGE("Location Filter", "Location Code");
        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);
        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemFrm.GETRECORD(ItemRec);
          // 34377.sn
          IF (NOT ProjSetup."Released AdvOrder not editable") OR
             ((ProjSetup."Released AdvOrder not editable") AND
              ("Process Status" < "Process Status"::Released))
          THEN
          // 34377.en
            VALIDATE("Item No.", ItemRec."No.");
        END ELSE BEGIN
          IF ItemFrm.CheckMultiCopy THEN
            ZoomType := -1;
        END;
      END;

      IF ZoomType = 2 THEN BEGIN
        CurrFieldNo := FIELDNO("Basic Item");
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Advice Order Line",
          "Project No.",Element,"Extension Contract","Service Order No.",
          "Record Type",'','',"Line No.",'','');

        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
        BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemFrm.GETRECORD(BasicItemRec);
          Manufacturer := BasicItemRec.Manufacturer;
          // 34377.sn
          IF (NOT ProjSetup."Released AdvOrder not editable") OR
             ((ProjSetup."Released AdvOrder not editable") AND
              ("Process Status" < "Process Status"::Released))
          THEN
          // 34377.en
            VALIDATE("Basic Item", BasicItemRec."Product Code");
        END ELSE BEGIN
          IF BasicItemFrm.CheckMultiCopy THEN
            ZoomType := -1;
        END;
      END;

      IF ZoomType = 3 THEN BEGIN
        CurrFieldNo := FIELDNO("Trade Item");
        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Advice Order Line",
          "Project No.",Element,"Extension Contract","Service Order No.",
          "Record Type",'','',"Line No.",'','',
          "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", ItemCode, VendorCode);

        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2);
        TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemFrm.GETRECORD(TradeItemRec);
          Manufacturer := TradeItemRec.Manufacturer;
          "Basic Item" := TradeItemRec."Product Code";
          "Vendor (Trade Item)" := TradeItemRec.Vendor;
          VALIDATE("Trade Item", TradeItemRec."Item Code");
          CheckVendorRelation(FIELDNO("Vendor (Trade Item)"));
        END ELSE BEGIN
          IF TradeItemFrm.CheckMultiCopy THEN
            ZoomType := -1;
        END;
      END;
    END;

    PROCEDURE AssistEditItemData@1100528300(VAR ZoomType@1210190000 : Integer);
    VAR
      "2baMgt"@1100528300 : Codeunit 11012306;
      RecRef@1100528301 : RecordRef;
    BEGIN
      IF ZoomType = 3 THEN BEGIN
        RecRef.GETTABLE(Rec);
        "2baMgt".RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
        ZoomType := -1;
      END;
    END;

    PROCEDURE CheckDeliveryPeriod@1100525015();
    BEGIN
      //db, 08-12-10: M19841
      IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN EXIT;
      IF ("Delivery Period" <> '') OR ("Order Date" <> 0D) OR ("Receipt Date" <> 0D) THEN EXIT;

      EvaluateStartDate("Receipt Date"); //mg, 06-09-10: M22317
    END;

    PROCEDURE EvaluateStartDate@1100525005(iReceiptDate@1100525001 : Date);
    VAR
      WorkOrder@1100528600 : Record 11229279;
    BEGIN
      //db, 30-11-10: M23941: function removed from codeunit 11012041 due to problem with CurrFieldNo
      //call 31907 several modifications
      //db, 29-01-13: UseStartDateProjElem (form-option 11012104, call 31907) disabled: default JobSetup copied to each Project.
      IF "Record Type" = "Record Type"::Project THEN BEGIN
        IF NOT ProjRec.GET("Project No.") THEN
          ProjRec.INIT;
        IF ProjRec."Use Starting Date ProjectElem" THEN BEGIN  //db, 29-01-13: C004646
          IF NOT ProjElemRec.GET("Project No.", Element) THEN
            ProjElemRec.INIT;
          IF (ProjRec."Starting Date" > 0D) THEN BEGIN
            IF "Cost Type" = "Cost Type"::Subcontracting THEN
              iReceiptDate := ProjRec."Starting Date"
            ELSE
              iReceiptDate := ProjRec."Starting Date" - 1;
          END;
          IF (ProjElemRec."Starting Date" > 0D) THEN BEGIN
            IF "Cost Type" = "Cost Type"::Subcontracting THEN
              iReceiptDate := ProjElemRec."Starting Date"
            ELSE
              iReceiptDate := ProjElemRec."Starting Date" - 1;
          END;
        END;
      END;

      IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
        IF ServOrderRec."No." <> "Service Order No." THEN
          ServOrderRec.GET("Service Order No.");
        IF NOT WorkOrder.GET("Work Order No.") THEN
          WorkOrder.INIT;
        IF ServOrderRec."Starting Date" > 0D THEN BEGIN
          IF "Cost Type" = "Cost Type"::Subcontracting THEN
            iReceiptDate := ServOrderRec."Starting Date"
          ELSE
            iReceiptDate := ServOrderRec."Starting Date" -1;
        END;
        IF DT2DATE(WorkOrder."Starting Date/Time") > 0D THEN BEGIN
          IF "Cost Type" = "Cost Type"::Subcontracting THEN
            iReceiptDate := DT2DATE(WorkOrder."Starting Date/Time")
          ELSE
            iReceiptDate := DT2DATE(WorkOrder."Starting Date/Time") - 1;
        END;
      END;
      IF iReceiptDate < TODAY THEN
        iReceiptDate := TODAY;
      IF iReceiptDate <> "Receipt Date" THEN
        VALIDATE("Receipt Date", iReceiptDate);
    END;

    PROCEDURE SetLocationForBin@1100526201() LocCode : Code[20];
    BEGIN
      //db, 02-11-10
      IF Transaction = Transaction::Inventory THEN
        LocCode := "Location Code";
      //IF Transaction = Transaction::Purchase THEN
      IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN
        LocCode := "Ship To Location";
    END;

    PROCEDURE GetDefaultBin@1100526200(iLoc@1100526202 : Code[20];VAR varBin1@1210190000 : Code[20];VAR varBin2@1210190001 : Code[20]);
    VAR
      Location@1100526204 : Record 14;
      Bin@1210190002 : Record 7354;
      WMSManagement@1100526203 : Codeunit 7302;
    BEGIN
      //db, 30-03-11
      Location.GET(iLoc);
      IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
        IF (Transaction = Transaction::Inventory) THEN
          varBin1 := WMSManagement.GetDefaultBinLocation(
            "Project No.","Service Order No.","Location Code","Item No.","Variant Code",FALSE);
        IF DoGetDefaultProjBin(varBin2) THEN //C019936.n
          varBin2 := WMSManagement.GetDefaultBinLocation(
            "Project No.","Service Order No.","Location Code","Item No.","Variant Code",TRUE);
      END;

      IF NOT Bin.GET(iLoc, varBin1) THEN
        varBin1 := '';
      IF NOT Bin.GET(iLoc, varBin2) THEN
        varBin2 := '';
    END;

    PROCEDURE FieldIsEditable@1100526202(iField@1100526200 : Integer) : Boolean;
    BEGIN
      //db, 02-11-10
      CASE iField OF
        FIELDNO("Location Code"):
          BEGIN
            //IF Transaction = Transaction::Purchase THEN BEGIN
            IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN BEGIN
              IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
              EXIT(ItemRec."Blanket Order Plan Item");  //assumed to be processed by blanket order, controled by location
            END;
          END;
        FIELDNO("Bin Code"):
          BEGIN
            //IF Transaction = Transaction::Purchase THEN
            IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN
              EXIT(Deliver = Deliver::Location);
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GenerateAdvOrderToMatReqLines@1100525016(ProjectNoFilter@1100525000 : Text[250]);
    VAR
      Job@1100525001 : Record 11072003;
      AdviceOrderLine@1100525002 : Record 11012055;
      ProjectMaterialReqLine@1100525003 : Record 11012526;
      NoOfLinesGenerated@1210190000 : Integer;
    BEGIN
      //kzwerver, 110120, n
      //Checks are done upfront, because the input is a filter and not a single project number
      Job.SETFILTER("No.", '%1', ProjectNoFilter);
      IF Job.FINDSET THEN
        REPEAT
          IF Job."Project Status" >= Job."Project Status"::"Technical Finished" THEN BEGIN
            MESSAGE(Text001, Job.FIELDCAPTION(Job."No."), Job."No.", Job.FIELDCAPTION("Project Status"), Job."Project Status");
            EXIT;
          END;
          ProjectMaterialReqLine.SETRANGE("Project No.", Job."No.");
          ProjectMaterialReqLine.SETRANGE(Origin, ProjectMaterialReqLine.Origin::"Advice Order");
          IF (ProjectMaterialReqLine.COUNT > 0) THEN BEGIN
            IF (NOT CONFIRM(Text002, FALSE, Job.FIELDCAPTION("No."), Job."No.")) THEN
              EXIT;
          END;
          DeleteMatReqLines(Job."No.");
        UNTIL (Job.NEXT = 0);

      AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::Project);
      AdviceOrderLine.SETFILTER("Project No.", '%1', ProjectNoFilter);
      AdviceOrderLine.SETFILTER("Process Status", '%1|%2',
        AdviceOrderLine."Process Status"::Released, AdviceOrderLine."Process Status"::Processed);
      IF AdviceOrderLine.FINDSET THEN REPEAT
        GenerateAdvOrderToMatReqLine(AdviceOrderLine);
        NoOfLinesGenerated += 1;
      UNTIL (AdviceOrderLine.NEXT = 0);
      MESSAGE(Text007, NoOfLinesGenerated);
    END;

    LOCAL PROCEDURE GenerateAdvOrderToMatReqLine@1100525019(AdviceOrderLine@1100525000 : Record 11012055);
    VAR
      ProjectMaterialReqLine@1100525001 : Record 11012526;
    BEGIN
      //kzwerver, 110120, n
      ProjectMaterialReqLine.INIT;

      ProjectMaterialReqLine."Project No." := AdviceOrderLine."Project No.";
      ProjectMaterialReqLine.Element := AdviceOrderLine.Element;
      ProjectMaterialReqLine."Yard No." := AdviceOrderLine."Yard No.";
      ProjectMaterialReqLine."Entity Type" := AdviceOrderLine."Entity Type";
      ProjectMaterialReqLine."System No." := AdviceOrderLine."System No.";
      ProjectMaterialReqLine."Entity No." := AdviceOrderLine."Entity No.";
      ProjectMaterialReqLine.Origin := ProjectMaterialReqLine.Origin::"Advice Order";
      ProjectMaterialReqLine."Cable Transit Pos." := AdviceOrderLine."Cable Transit Pos.";
      ProjectMaterialReqLine."Item No." := AdviceOrderLine."Item No.";
      ProjectMaterialReqLine."Basic Item" := AdviceOrderLine."Basic Item";
      ProjectMaterialReqLine."Trade Item" := AdviceOrderLine."Trade Item";
      ProjectMaterialReqLine."Vendor (Trade Item)" := AdviceOrderLine."Vendor (Trade Item)";
      ProjectMaterialReqLine.Manufacturer := AdviceOrderLine.Manufacturer;
      ProjectMaterialReqLine.Description := AdviceOrderLine.Description;
      ProjectMaterialReqLine.Description2 := AdviceOrderLine."Description 2";
      ProjectMaterialReqLine."Variant Code" := AdviceOrderLine."Variant Code";
      ProjectMaterialReqLine."Item Category Code" := AdviceRec."Item Category Code";
      ProjectMaterialReqLine.Quantity :=  AdviceOrderLine."Quantity (Advice)";
      IF (AdviceOrderLine."Process Status" = AdviceOrderLine."Process Status"::Processed) THEN
        ProjectMaterialReqLine.Quantity :=  AdviceOrderLine."Quantity (Processed)";
      ProjectMaterialReqLine."Unit of Measure" := AdviceOrderLine."Unit of Measure";
      ProjectMaterialReqLine."Cost Object" := AdviceOrderLine."Cost Object";
      ProjectMaterialReqLine."Delivery Date" := AdviceOrderLine."Receipt Date";
      ProjectMaterialReqLine."Unique Traceable" := TRUE;
      ProjectMaterialReqLine."Exclude Logistics" := FALSE;

      ProjectMaterialReqLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE DeleteMatReqLines@1100525020(ProjectNo@1100525000 : Code[20]);
    VAR
      ProjectMaterialReqLine@1100525001 : Record 11012526;
    BEGIN
      //kzwerver, 110120, n
      ProjectMaterialReqLine.SETRANGE("Project No.", ProjectNo);
      ProjectMaterialReqLine.SETRANGE(Origin, ProjectMaterialReqLine.Origin::"Advice Order");
      ProjectMaterialReqLine.DELETEALL;
    END;

    PROCEDURE CheckStatusAndElementMandatory@1100525021();
    VAR
      PlantSetup@1210190000 : Record 11012550;
      PlantLocation@1210190001 : Record 11012554;
      CheckElementMandatory@1210190002 : Boolean;
    BEGIN
      //db, 01-02-11: M24423
      IF ("Record Type" = "Record Type"::Project) AND
         (Element = '') AND ("Process Status" = "Process Status"::Released) THEN
      BEGIN
        IF "Plant Location" <> '' THEN BEGIN //call 33062
          PlantSetup.GET;
          IF PlantSetup."Plant - Element Mandatory" THEN BEGIN
            PlantLocation.GET("Plant Location");
            IF PlantLocation."Project No." = "Project No." THEN
              CheckElementMandatory := TRUE;
          END;
        END ELSE
          CheckElementMandatory := TRUE;
        IF CheckElementMandatory THEN
          IF ProjRec.GET("Project No.") THEN
            IF ProjRec."Posting Element Mandatory" THEN
              FIELDERROR(Element);
      END;
      // Call 25912.sn
      IF ((Transaction = Transaction::Purchase) OR (Transaction = Transaction::Requisition)) AND
         (Vendor = '') AND
         ("Process Status" = "Process Status"::Released)
      THEN
        FIELDERROR(Vendor);
      IF ("Quantity (Advice)" = 0) AND ("Process Status" = "Process Status"::Released) THEN
        FIELDERROR("Quantity (Advice)");
      // Call 25912.en
      IF ("Cost Object" = '') AND ("Process Status" = "Process Status"::Released) THEN
        FIELDERROR("Cost Object");
    END;

    PROCEDURE DivideAgreedAmount@1100530000(VAR IAdviceOrderLine@1100525000 : Record 11012055);
    VAR
      AdviceOrderLine@1100530000 : Record 11012055;
      AdviceOrderAgreedAmountForm@1100530003 : Page 11124962;
      GeneralLedgerSetup@1100530006 : Record 98;
      TotalAmount@1100530001 : Decimal;
      AgreedAmount@1100530002 : Decimal;
      LineAmount@1100530004 : Decimal;
      LinePrice@1100530005 : Decimal;
    BEGIN
      //mg, 08-02-11: M24388
      GeneralLedgerSetup.GET;

      AdviceOrderLine.COPY(IAdviceOrderLine);
      IF NOT AdviceOrderLine.FINDSET THEN
        ERROR(Text013);

      AdviceOrderLine.SETFILTER(Amount, '<>%1', 0);
      AdviceOrderLine.SETFILTER("Quantity (Advice)", '<>%1', 0);
      REPEAT
        TotalAmount += AdviceOrderLine.Amount;
      UNTIL AdviceOrderLine.NEXT = 0;

      IF TotalAmount = 0 THEN
        ERROR(Text009);

      AdviceOrderAgreedAmountForm.SetDefaults(TotalAmount);
      IF AdviceOrderAgreedAmountForm.RUNMODAL <> ACTION::OK THEN
        EXIT;

      AdviceOrderAgreedAmountForm.GetDefaults(AgreedAmount);

      IF AgreedAmount = 0 THEN
        ERROR(Text010);

      PurchSetup.GET; //mg, 08-04-11: M26789
      AdviceOrderLine.FINDSET(TRUE);
      REPEAT
        LineAmount := AdviceOrderLine.Amount * (1 + (AgreedAmount - TotalAmount) / TotalAmount);
        LinePrice := ROUND(LineAmount / AdviceOrderLine."Quantity (Advice)", GeneralLedgerSetup."Unit-Amount Rounding Precision");
        AdviceOrderLine.VALIDATE(Price, LinePrice);
        IF PurchSetup."Price Agreement" <> PurchSetup."Price Agreement"::" " THEN //mg, 08-04-11: M26789
          AdviceOrderLine.VALIDATE("Price Agreement", TRUE);
        AdviceOrderLine.MODIFY;
      UNTIL AdviceOrderLine.NEXT = 0;

      AdviceOrderLine.FINDSET;
      TotalAmount := 0;
      REPEAT
        TotalAmount += AdviceOrderLine.Amount;
      UNTIL AdviceOrderLine.NEXT = 0;

      IF TotalAmount <> AgreedAmount THEN BEGIN
        AdviceOrderLine.VALIDATE(Price, AdviceOrderLine.Price + (AgreedAmount - TotalAmount) / AdviceOrderLine."Quantity (Advice)");
        AdviceOrderLine.MODIFY();
      END;

      IAdviceOrderLine.CLEARMARKS;
    END;

    PROCEDURE SetCalledFromCompressingLines@1100526102(CalledFromFlag@1100526100 : Boolean);
    BEGIN
      //kzwerver, 110215, n
      CalledFromCompressingLines := CalledFromFlag;
    END;

    PROCEDURE HasDocumentLinks@1210190007() : Boolean;
    VAR
      DocumentLink@1100528400 : Record 11012747;
      DocumentLinkMgt@1100525000 : Codeunit 11012401;
      RecRef@1100525001 : RecordRef;
    BEGIN
      IF NOT DocumentLink.READPERMISSION THEN
        EXIT(FALSE);

      RecRef.GETTABLE(Rec);
      EXIT(DocumentLinkMgt.EntityHasDocumentLinks(RecRef));
    END;

    PROCEDURE CheckRecipeTotals@1210190009();
    VAR
      MainRec@1210190000 : Record 11012055;
      OldQuan@1210190001 : Decimal;
      NewQuan@1210190002 : Decimal;
    BEGIN
      //db, 24-06-11: M15569
      IF "Source Type" <> "Source Type"::"Recipe Header" THEN EXIT;

      IF xRec."Quantity (Advice)" = 0 THEN
        OldQuan := 1
      ELSE
        OldQuan := xRec."Quantity (Advice)";
      IF "Quantity (Advice)" = 0 THEN
        NewQuan := 1
      ELSE
        NewQuan := "Quantity (Advice)";

      MainRec.SETRANGE("Project No.", "Project No.");
      MainRec.SETRANGE("Source Type", MainRec."Source Type"::"Recipe Line");
      MainRec.SETRANGE("Recipe Group", "Recipe Group");
      MainRec.SETRANGE(Recipe, Recipe);
      MainRec.SETRANGE("Attached to Line No.", "Line No.");
      IF MainRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          MainRec.VALIDATE("Quantity (Advice)", MainRec."Quantity (Advice)" * NewQuan / OldQuan);
          MainRec.MODIFY(TRUE);
        UNTIL MainRec.NEXT = 0;
      END;
    END;

    PROCEDURE SetCostComponent@1210190013();
    VAR
      DimensionValue@1210190000 : Record 349;
    BEGIN
      //kzwerver, 110729, n, #27962
      DimensionValue.SETCURRENTKEY(Code, "Global Dimension No.");
      DimensionValue.SETRANGE(Code, "Cost Object");
      DimensionValue.SETRANGE("Global Dimension No.", 2);
      IF (DimensionValue.FINDSET) THEN
        VALIDATE("Cost Component", DimensionValue."Cost Component");
    END;

    PROCEDURE DeleteCommentLine@1100529800();
    VAR
      CommentLine@1100529800 : Record 11020634;
      RecRef@1100529801 : RecordRef;
    BEGIN
      // **4PS MVOS
      RecRef.GETTABLE(Rec);

      CommentLine.RESET;
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Advice Order");
      CommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      CommentLine.DELETEALL(TRUE);
    END;

    PROCEDURE CommentLineExist@1210190011() : Boolean;
    VAR
      RecRef@1210190000 : RecordRef;
      CommentLine@1210190001 : Record 11020634;
    BEGIN
      RecRef.GETTABLE(Rec);
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Advice Order");
      CommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF NOT CommentLine.ISEMPTY THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE DeleteDocumentLinks@1100528400();
    VAR
      DocumentLink@1100528402 : Record 11012747;
      DocumentLinkMgt@1100528400 : Codeunit 11012401;
      RecRef@1100528401 : RecordRef;
    BEGIN
      IF NOT DocumentLink.READPERMISSION THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DocumentLinkMgt.DeleteDocumentLinksFromObject(RecRef);
    END;

    LOCAL PROCEDURE ClearEditableAssemYardNoFields@1100528405();
    BEGIN
      IF "Project No." <> xRec."Project No." THEN BEGIN
        "Entity Type" := "Entity Type"::None;
        "Entity No." := '';
      END;
    END;

    LOCAL PROCEDURE ValidateEntityType@1100528408();
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF "Entity Type" <> "Entity Type" ::None THEN BEGIN
        Job.GET("Project No.");
        Job.TESTFIELD("Assembly Project", TRUE);
      END;

      IF "Entity Type" <> xRec."Entity Type" THEN
        "Entity No." := '';
    END;

    PROCEDURE CheckMessageOpenAdvice@1210190014();
    VAR
      ProjSetup@1210190000 : Record 315;
    BEGIN
      //db, 09-12-11: M31310
      ProjSetup.GET;
      IF NOT ProjSetup."Message after Reopen Adv Order" THEN EXIT;

      IF ("Process Status" = "Process Status"::Open) AND
         (xRec."Process Status" <> "Process Status"::Open) THEN
        MESSAGE(Text011);
    END;

    PROCEDURE BalanceDatesAndDeliveryPeriod@1210190018(FromFieldNo@1210190000 : Integer);
    VAR
      FieldToCalculate@1210190001 : 'None,ReceiptDate,OrderDate';
    BEGIN
      CASE FromFieldNo OF
        FIELDNO("Order Date"):
          BEGIN
            IF ("Order Date" <> 0D) AND ("Order Date" < TODAY) THEN
              "Order Date" := TODAY;
            FieldToCalculate := FieldToCalculate::ReceiptDate;
          END;
        FIELDNO("Delivery Period"):
          BEGIN
            IF ("Delivery Period" = '') AND (CurrFieldNo <> FIELDNO("Delivery Period")) THEN BEGIN
              //db, 11-03-13: get default period if validate forced by functional switch, but allow empty field
              //IF Transaction = Transaction::Purchase THEN
              IF Transaction IN [Transaction::Purchase, Transaction::Requisition] THEN
                "Delivery Period" := ValidateCu.GetDeliveryTimeItem("Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)",
                  "Trade Item", 0, '', Vendor)
              ELSE
                "Delivery Period" := GetDeliveryPeriodLocation("Location Code");
            END;
            //validation
            IF "Delivery Period" <> '' THEN
              FieldToCalculate := FieldToCalculate::OrderDate;
          END;
        FIELDNO("Receipt Date"):
          BEGIN
            IF ("Receipt Date" <> 0D) AND ("Receipt Date" < TODAY) THEN
              "Receipt Date" := TODAY;
            IF "Receipt Date" <> xRec."Receipt Date" THEN
              FieldToCalculate := FieldToCalculate::OrderDate;
          END;
      END;

      CASE FieldToCalculate OF
        FieldToCalculate::ReceiptDate:
          BEGIN
            IF "Delivery Period" = '' THEN
              "Receipt Date" := "Order Date"
            ELSE
              "Receipt Date" := CalendarMgmt.CalcDateBOC(
                 '+' + "Delivery Period", "Order Date",
                 CalChange."Source Type"::Company, '', '',
                 CalChange."Source Type"::Vendor, Vendor, '', FALSE);
          END;
        FieldToCalculate::OrderDate:
          BEGIN
            IF "Delivery Period" = '' THEN
              "Order Date" := "Receipt Date"
            ELSE
              "Order Date" := CalendarMgmt.CalcDateBOC(
                 '-' + "Delivery Period", "Receipt Date",
                 CalChange."Source Type"::Company, '', '',
                 CalChange."Source Type"::Vendor, Vendor, '', FALSE);
            VALIDATE("Order Date");
          END;
      END;
    END;

    PROCEDURE FillDefaultFscType@1100529000();
    BEGIN
      //*DP00129
      IF ("Cost Object" = '') OR ("Project No."= '') THEN
        EXIT;
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
      IF NOT DimValRec."FSC Applicable" THEN
        EXIT;
      IF NOT ProjRec.GET("Project No.") THEN
        EXIT;
      IF ProjRec."FSC Type Code" <> '' THEN
        "FSC Type Code" :=  ProjRec."FSC Type Code";
    END;

    LOCAL PROCEDURE CheckEntityNo@1100528401();
    VAR
      JobsSetup@1100528400 : Record 315;
    BEGIN
      IF "Entity Type" = "Entity Type"::None THEN
        EXIT;

      IF JobsSetup.GET AND
         JobsSetup."Entity No. Mandatory"
      THEN
        TESTFIELD("Entity No.");
    END;

    PROCEDURE QtyReservedInventory@1100525026() : Decimal;
    VAR
      ItemJnlLine@1100525000 : Record 83;
      TotalQty@1100525001 : Decimal;
    BEGIN
      //DP00629
      IF AdvOrderLineLinkWithInventory() THEN BEGIN
        SetLinkToItemJnlLines(ItemJnlLine);
        IF ItemJnlLine.FINDSET THEN BEGIN
          REPEAT
            TotalQty := TotalQty + ItemJnlLine.Quantity;
          UNTIL ItemJnlLine.NEXT = 0;
        END;
      END;
      EXIT(TotalQty);
    END;

    PROCEDURE QtyDeliveredInventory@1100525028() : Decimal;
    VAR
      ItemLedgEntry@1100525000 : Record 32;
      TotalQty@1100525001 : Decimal;
    BEGIN
      //DP00629
      IF AdvOrderLineLinkWithInventory THEN BEGIN
        SetLinkToItemLedgEntries(ItemLedgEntry);
        IF ItemLedgEntry.FINDSET THEN BEGIN
          REPEAT
            TotalQty := TotalQty + -ItemLedgEntry.Quantity;
          UNTIL ItemLedgEntry.NEXT = 0;
        END;
      END;
      EXIT(TotalQty);
    END;

    PROCEDURE DrilDownReservedInventory@1100525031();
    VAR
      ItemJnlLine@1100525000 : Record 83;
    BEGIN
      //DP00629
      IF AdvOrderLineLinkWithInventory() THEN BEGIN
        SetLinkToItemJnlLines(ItemJnlLine);
        PAGE.RUNMODAL(0, ItemJnlLine);
      END;
    END;

    PROCEDURE DrillDownDeliveredInventory@1100525032();
    VAR
      ItemLedgEntry@1100525000 : Record 32;
    BEGIN
      //DP00629
      IF AdvOrderLineLinkWithInventory() THEN BEGIN
        SetLinkToItemLedgEntries(ItemLedgEntry);
        PAGE.RUNMODAL(0, ItemLedgEntry);
      END;
    END;

    LOCAL PROCEDURE AdvOrderLineLinkWithInventory@1100525033() : Boolean;
    BEGIN
      //DP00629
      EXIT(
        (Transaction = Transaction::Inventory) AND
        ("Item No." <> '') AND
        ("Purchase Route Reference" <> ''));
    END;

    LOCAL PROCEDURE SetLinkToItemJnlLines@1100525034(VAR ItemJnlLine@1100525000 : Record 83);
    BEGIN
      //DP00629
      ItemJnlLine.RESET;
      ItemJnlLine.SETCURRENTKEY("Item No.");
      ItemJnlLine.SETRANGE("Item No.", "Item No.");
      ItemJnlLine.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
      CASE "Record Type" OF
        "Record Type"::Project:
          ItemJnlLine.SETRANGE("Job No.", "Project No.");
        "Record Type"::ServOrder:
          ItemJnlLine.SETRANGE("Service Order No.", "Service Order No.");
      END;
    END;

    LOCAL PROCEDURE SetLinkToItemLedgEntries@1100525035(VAR ItemLedgEntry@1100525000 : Record 32);
    BEGIN
      //DP00629
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.", "Item No.");
      ItemLedgEntry.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
      CASE "Record Type" OF
        "Record Type"::Project:
          ItemLedgEntry.SETRANGE("Job No.", "Project No.");
        "Record Type"::ServOrder:
          ItemLedgEntry.SETRANGE("Service Order No.", "Service Order No.");
      END;
    END;

    LOCAL PROCEDURE ValidateShipToLocation@1100528000(GiveMessage@1100528000 : Boolean) ShipToLocIsValid : Boolean;
    VAR
      OrderAddress@1100528001 : Record 224;
    BEGIN
      //C019936
      ShipToLocIsValid := TRUE;
      CASE Deliver OF
        Deliver::" ":
          BEGIN
            IF "Ship To Location" <> '' THEN
              IF GiveMessage THEN
                ERROR(Text003, FIELDCAPTION(Deliver))
              ELSE
                ShipToLocIsValid := FALSE;
          END;
        Deliver::Location:
          BEGIN
            IF "Ship To Location" = '' THEN
              IF GiveMessage THEN
                ERROR(Text003, FIELDCAPTION("Ship To Location"))
              ELSE
                ShipToLocIsValid := FALSE
            ELSE
              IF GiveMessage THEN
                LocRec.GET("Ship To Location")
              ELSE
                ShipToLocIsValid := LocRec.GET("Ship To Location");
          END;
        Deliver::"Project Location":
          BEGIN
            IF "Ship To Location" = '' THEN
              IF GiveMessage THEN
                ERROR(Text003, FIELDCAPTION("Ship To Location"))
              ELSE
                ShipToLocIsValid := FALSE
            ELSE
              IF GiveMessage THEN
                ProjLocRec.GET("Project No.", "Ship To Location")
              ELSE
                ShipToLocIsValid := ProjLocRec.GET("Project No.", "Ship To Location");
          END;
        Deliver::"Service Location":  //C029620
          BEGIN
            IF "Ship To Location" <> '' THEN //Empty allowed
              IF GiveMessage THEN
                ServOrderLocRec.GET("Service Order No.", "Ship To Location")
              ELSE
                ShipToLocIsValid := ServOrderLocRec.GET("Service Order No.", "Ship To Location");
          END;
        Deliver::"Order Address":
          BEGIN
            IF GiveMessage THEN
              OrderAddress.GET(Vendor, "Ship To Location")
            ELSE
              ShipToLocIsValid := OrderAddress.GET(Vendor, "Ship To Location");
          END;
      END;
    END;

    LOCAL PROCEDURE GetDefaultShipToLocation@1100528004();
    VAR
      ProjSetup@1100528000 : Record 315;
    BEGIN
      //C019936
      "Ship To Location" := '';

      CASE Deliver OF
        Deliver::Location:
          BEGIN
            IF "Record Type" = "Record Type"::Project THEN BEGIN
              ProjRec.GET("Project No.");
              IF ProjRec.Deliver = ProjRec.Deliver::Location THEN
                "Ship To Location" := ProjRec."Ship To Location";
            END;
            IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
              ServOrderRec.GET("Service Order No.");
              IF NOT ServLocRec.GET(ServOrderRec."Service Location No.") THEN
                ServLocRec.INIT;
              IF ServLocRec.Deliver = ServLocRec.Deliver::Location THEN
                "Ship To Location" := ServLocRec."Ship To Location";
              IF ServLocRec."Ship To Location" = '' THEN BEGIN
                ProjSetup.GET;
                IF ProjSetup.Deliver = ProjSetup.Deliver::Location THEN
                  "Ship To Location" := ProjSetup."Ship To Location";
              END;
            END;
          END;
        Deliver::"Service Location":
          BEGIN
            ServOrderLocRec.RESET;
            ServOrderLocRec.SETRANGE("Service Order No.", "Service Order No.");
            IF ServOrderLocRec.FINDFIRST THEN
              IF ServOrderLocRec.NEXT = 0 THEN
                "Ship To Location" := ServOrderLocRec.Code;
          END;
        Deliver::"Project Location":
          BEGIN
            ProjRec.GET("Project No.");
            IF ProjRec.Deliver = ProjRec.Deliver::"Project Location" THEN BEGIN
              IF ProjRec."Ship To Location" <> '' THEN
                "Ship To Location" := ProjRec."Ship To Location"
              ELSE BEGIN
                ProjLocRec.RESET;
                ProjLocRec.SETRANGE("Project No.", "Project No.");
                IF ProjLocRec.FINDFIRST THEN
                  IF ProjLocRec.NEXT = 0 THEN
                    "Ship To Location" := ProjLocRec.Code;
              END;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE DoGetDefaultProjBin@1100528001(ProjBin@1100528000 : Code[20]) : Boolean;
    BEGIN
      //C019936
      IF (ProjBin = '') OR
         ("Project No." <> xRec."Project No.") OR
         ("Item No." <> xRec."Item No.") OR
         ("Variant Code" <> xRec."Variant Code") THEN
        EXIT(TRUE);

      IF (Transaction = Transaction::Inventory) AND (xRec.Transaction = xRec.Transaction::Purchase) AND
         ("Location Code" = xRec."Ship To Location") THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE LookupItemVendor@1100528402(VendorIsEditable@1100528401 : Boolean);
    VAR
      ItemVendor@1100528400 : Record 99;
    BEGIN
      ItemVendor.SETRANGE("Item No.", "Item No.");
      ItemVendor."Item No." := "Item No.";
      ItemVendor."Vendor No." := Vendor;
      IF PAGE.RUNMODAL(0, ItemVendor) = ACTION::LookupOK THEN
        IF VendorIsEditable THEN
          VALIDATE(Vendor, ItemVendor."Vendor No.");
    END;

    PROCEDURE EditConsentLines@1100528404();
    VAR
      ConsentLine@1100528404 : Record 11012226;
      ConsentLines@1100528403 : Page 11071869;
      ConsentProcess@1100528402 : 'Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval';
      Type@1100528401 : ' ,Project,Service Order';
      TypeNo@1100528400 : Code[20];
    BEGIN
      CASE TRUE OF
        "Project No." <> '':
          BEGIN
            Type := Type::Project;
            TypeNo := "Project No.";
          END;
        "Service Order No." <> '':
          BEGIN
            Type := Type::"Service Order";
            TypeNo := "Service Order No.";
          END;
      END;
      ConsentProcess := ConsentProcess::"Advice Order";
      ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Advice Order");
      ConsentLine.SETRANGE("Document Line No.", "Line No.");
      ConsentLine.SETRANGE(Type, Type);
      ConsentLine.SETRANGE("Type No.", TypeNo);
      ConsentLines.SETTABLEVIEW(ConsentLine);
      ConsentLines.SetDefaults(TRUE, Vendor, ConsentProcess, Type, TypeNo, "Line No.");
      ConsentLines.RUNMODAL;
    END;

    PROCEDURE ShowConsentLines@1100528406(ShowOnlyConsentLinesOfCurrentAdviceOrderLine@1100528400 : Boolean);
    VAR
      ConsentLine@1100528401 : Record 11012226;
      Consenter@1100528404 : Record 11012229;
      ConsentLineList@1100528403 : Page 11071870;
    BEGIN
      IF NOT Consenter.READPERMISSION THEN
        EXIT;

      CASE TRUE OF
        "Project No." <> '':
          BEGIN
            ConsentLine.SETRANGE(Type, ConsentLine.Type::Project);
            ConsentLine.SETRANGE("Type No.", "Project No.");
          END;
        "Service Order No." <> '':
          BEGIN
            ConsentLine.SETRANGE(Type, ConsentLine.Type::"Service Order");
            ConsentLine.SETRANGE("Type No.", "Service Order No.");
          END;
        ELSE
          EXIT;
      END;
      ConsentLine.SETRANGE("Document Type", ConsentLine."Document Type"::"Advice Order");
      IF ShowOnlyConsentLinesOfCurrentAdviceOrderLine THEN
        ConsentLine.SETRANGE("Document Line No.", "Line No.");
      ConsentLineList.SETTABLEVIEW(ConsentLine);
      ConsentLineList.RUN;
    END;

    LOCAL PROCEDURE FillPlantPurchOrRentPrefVendor@1100525027();
    VAR
      PlantType@1100525001 : Record 11012551;
      PlantVendor@1100525000 : Record 11012596;
    BEGIN
      //C021779
      IF ("Plant Type" = '') OR (Transaction <> Transaction::Purchase) THEN
        EXIT;
      IF NOT PlantType.GET("Plant Type") THEN
        EXIT;
      PlantVendor.SETRANGE("Plant Type", "Plant Type");
      IF PlantType.External THEN
        PlantVendor.SETRANGE(Type, PlantVendor.Type::Rent)
      ELSE
        PlantVendor.SETRANGE(Type, PlantVendor.Type::Purchase);
      PlantVendor.SETRANGE("Preferred Vendor", TRUE);
      PlantVendor.SETFILTER("Vendor No.", '<>%1', '');
      IF PlantVendor.FINDFIRST THEN BEGIN
        IF PlantVendor."Vendor No." <> Vendor THEN BEGIN
          Vendor := PlantVendor."Vendor No.";
          VALIDATE(Vendor);
        END;
      END;
    END;

    LOCAL PROCEDURE GetPlantPurchaseOrRentRate@1100525022();
    VAR
      PlantType@1100525003 : Record 11012551;
      PurchHead@1100525001 : Record 38;
      PurchLine@1100525002 : Record 39;
      PurchPriceCalcMgt@1100525000 : Codeunit 7010;
      TypeNo@1100525004 : Integer;
    BEGIN
      //C021779
      IF ("Plant Type" = '') OR (Transaction <> Transaction::Purchase) OR (Vendor = '') THEN
        EXIT;
      IF NOT PlantType.GET("Plant Type") THEN
        EXIT;
      IF PlantType.External THEN
        TypeNo := 2   // Rent
      ELSE
        TypeNo := 1;  // Purchase

      IF "Unit of Measure" <> PlantType."Unit of Measure" THEN
        "Unit of Measure" := PlantType."Unit of Measure";

      PurchHead.INIT;
      PurchHead."Document Type" := PurchHead."Document Type"::Order;
      PurchHead."Buy-from Vendor No."  := Vendor;
      PurchHead."Pay-to Vendor No."  := Vendor;
      PurchHead."Currency Code" := '';
      PurchHead."Prices Including VAT" := FALSE;
      IF "Order Date" = 0D THEN
        PurchHead."Order Date" := TODAY
      ELSE
        PurchHead."Order Date" := "Order Date";

      PurchLine.INIT;
      PurchLine."Document Type" := PurchHead."Document Type";
      PurchLine."Buy-from Vendor No."  := Vendor;
      PurchLine."Pay-to Vendor No."  := Vendor;
      PurchLine."Plant Type" := "Plant Type";
      PurchLine."Plant No." := '';
      PurchLine."Receiving Company" := '';
      PurchLine.Quantity := "Quantity (Advice)";
      PurchLine."Qty. per Unit of Measure" := 1;
      PurchLine."Unit of Measure Code" := "Unit of Measure";
      PurchLine."Direct Unit Cost" := 0;
      PurchLine."Line Discount %" := 0;

      Price := 0;
      IF PurchPriceCalcMgt.FindPurchLinePricePlant(PurchHead, PurchLine, 0, -TypeNo) > 0 THEN BEGIN // Neg. TypeMo
        Price := PurchLine."Direct Unit Cost";
        IF PurchPriceCalcMgt.FindPurchLineLineDiscPlant(PurchHead, PurchLine, TypeNo) > 0 THEN
          Price := Price - (PurchLine."Line Discount %" / 100 * Price);
      END;
      VALIDATE(Price);
    END;

    LOCAL PROCEDURE CheckCurrencyAgreement@1100525025();
    BEGIN
      //db, 08-03-16
      IF "Currency Code" = '' THEN  BEGIN
        "Currency Agreement" := FALSE;
      END ELSE BEGIN
        ProjRec.GET("Project No.");
        "Currency Agreement" := ("Currency Code" <> ProjRec."Currency Code");
      END;
    END;

    PROCEDURE SetSkipValidateFCY@1100528603(ISkipValidateFCY@1100528600 : Boolean);
    BEGIN
      //DP00884
      SkipValidateFCY := ISkipValidateFCY;
    END;

    BEGIN
    {
      4PS HBK 14-07-09 Added Function NumberOfBlanketOrderLines and fields "Blanket Order No.", "Blanket Order Line No."
      4PS HBK 16-07-09 Added key: Item No.,Location,Process Status,Shipment Date for cu 99000854
      4PS HBK 07-08-09 Fields Added: "Contract Found In" and "Blanket Order No." and "Process Status Filter"
      4PS HBK 03-06-10 M15722 Field "Order Address Code" added
      4PS HBK 09-06-10 Added Projectfiltyer in InventoryPrefLocations
      120131, kzwerver: The key below is used in report 11012654 Advice Orders by Company (Msquared)
        Item No.,Description 2,Project No.,Service Order No.

      DP00886: db, 11-03-16
      - local functions for ExchangeAmt (introduced by DP00884) moved to ProjectCurrencyExchangeRate.
    }
    END.
  }
}

