OBJECT Table 11012058 Intercompany Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               CheckPostingDateAllowed();
               "Currency Code" := GenLedgerSetup.GetLCYCode;
             END;

    OnDelete=BEGIN
               //ICDimRec.SETRANGE("Line No.", "Line No."); DP00387 old
               //ICDimRec.DELETEALL(TRUE);                  DP00387 old
             END;

    CaptionML=ENU=Intercompany Entry;
    LookupPageID=Page11012113;
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 2   ;   ;Supplying Company   ;Text30        ;TableRelation=Company;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Supplying Company }
    { 3   ;   ;Receiving Company   ;Text30        ;TableRelation=Company;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Receiving Company }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation="G/L Account".No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Account No. }
    { 5   ;   ;Bal. Account No.    ;Code20        ;TableRelation="G/L Account".No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Bal. Account No. }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   OnLookup=BEGIN
                                                              ProjRec.CHANGECOMPANY("Receiving Company");
                                                              ProjRec."No." := "Project No.";
                                                              PAGE.RUNMODAL(0, ProjRec);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project No. }
    { 8   ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                UpdateDimension(2);
                                                              END;

                                                   OnLookup=BEGIN
                                                              DimValRec.CHANGECOMPANY("Receiving Company");
                                                              DimValRec.Code := "Cost Object";
                                                              DimValRec.SETRANGE("Global Dimension No.", 2);
                                                              PAGE.RUNMODAL(0, DimValRec);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Cost Object }
    { 9   ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 10  ;   ;Unit of Measure Code;Code10        ;CaptionML=ENU=Unit of Measure Code }
    { 12  ;   ;Price               ;Decimal       ;CaptionML=ENU=Price;
                                                   AutoFormatType=2 }
    { 13  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1 }
    { 14  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 15  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Vendor No. }
    { 16  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 17  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 18  ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Extension Contract }
    { 20  ;   ;Item No.            ;Code20        ;TableRelation=Item.No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Item No. }
    { 21  ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Basic Item }
    { 22  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Trade Item }
    { 24  ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)".Code;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Manufacturer }
    { 25  ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)".Code;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 30  ;   ;Account Type        ;Option        ;CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 31  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                UpdateDimension(1);
                                                              END;

                                                   OnLookup=BEGIN
                                                              DimValRec.CHANGECOMPANY("Receiving Company");
                                                              DimValRec.Code := "Global Dimension 1 Code";
                                                              DimValRec.SETRANGE("Global Dimension No.", 1);
                                                              PAGE.RUNMODAL(0, DimValRec);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 32  ;   ;Gen. Posting Type   ;Option        ;CaptionML=ENU=Gen. Posting Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sale,Settlement";
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 33  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 34  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 35  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 36  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 37  ;   ;Posting Group       ;Code10        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "FA Posting Group"
                                                                 ELSE IF (Account Type=CONST(G/L Account),
                                                                          Plant Type=FILTER(<>'')) "Plant Posting Group";
                                                   CaptionML=ENU=Posting Group }
    { 40  ;   ;Post in Company     ;Text30        ;TableRelation=Company;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Post in Company }
    { 60  ;   ;IC Hours Tag No.    ;Integer       ;CaptionML=ENU=IC Hours Tag No. }
    { 70  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder] }
    { 80  ;   ;Applies-to Doc. No. ;Code20        ;CaptionML=ENU=Applies-to Doc. No. }
    { 90  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 100 ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 11012000;;Surcharge          ;Boolean       ;CaptionML=ENU=Surcharge }
    { 11012010;;Interest Date      ;Date          ;CaptionML=ENU=Interest Date }
    { 11012020;;Wage Component     ;Code10        ;TableRelation="Wage Component";
                                                   CaptionML=ENU=Wage Component }
    { 11012030;;Description 2      ;Text50        ;CaptionML=ENU=Description 2 }
    { 11012140;;Try-out No.        ;Code20        ;TableRelation=Try-out;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Try-out No. }
    { 11012150;;Estimate No.       ;Code20        ;TableRelation=Estimate;
                                                   CaptionML=ENU=Estimate No. }
    { 11012160;;Currency Code      ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 11012320;;Execution Date Hours;Date         ;CaptionML=ENU=Execution Date }
    { 11012330;;Origin Salary Application;Boolean ;CaptionML=ENU=Origin Salary Application;
                                                   Editable=No }
    { 11012550;;Rental Period      ;Text30        ;CaptionML=ENU=Rental Period }
    { 11012551;;Plant Type         ;Code20        ;TableRelation="Plant Type";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Plant Type }
    { 11012552;;Plant No.          ;Code10        ;TableRelation=IF (Bulk=CONST(No)) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Plant No. }
    { 11012553;;Bulk               ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=ENU=Bulk;
                                                   Editable=No }
    { 11012554;;Cost Component Plant;Code10       ;TableRelation="Cost Component Plant";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Cost Component Plant }
    { 11012555;;Plant Invoice      ;Boolean       ;CaptionML=ENU=Plant Invoice;
                                                   Editable=No }
    { 11012556;;Rental Periode to Date;Date       ;CaptionML=ENU=Rental Periode to Date }
    { 11012800;;Service Order No.  ;Code20        ;TableRelation="Service Order".No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Service Order No. }
    { 11012801;;Service Location No.;Code20       ;TableRelation="Service Location".No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Service Location No.;
                                                   Editable=No }
    { 11012804;;Service Contract No.;Code20       ;TableRelation=Service-Contract.No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Service Contract No.;
                                                   Editable=No }
    { 11012805;;Additional Cost (Service);Boolean ;OnValidate=BEGIN
                                                                TESTFIELD("Service Order No.");
                                                                VALIDATE("Service Order No.");
                                                              END;

                                                   CaptionML=ENU=Additional Cost (Service) }
    { 11012840;;Cost Component     ;Code20        ;TableRelation="Cost Component".Code;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Cost Component }
    { 11012880;;Year               ;Integer       ;CaptionML=ENU=Year }
    { 11012881;;Week               ;Integer       ;CaptionML=ENU=Week }
    { 11012882;;Monday             ;Decimal       ;CaptionML=ENU=Monday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 11012883;;Tuesday            ;Decimal       ;CaptionML=ENU=Tuesday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 11012884;;Wednesday          ;Decimal       ;CaptionML=ENU=Wednesday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 11012885;;Thursday           ;Decimal       ;CaptionML=ENU=Thursday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 11012886;;Friday             ;Decimal       ;CaptionML=ENU=Friday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 11012887;;Saturday           ;Decimal       ;CaptionML=ENU=Saturday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 11012888;;Sunday             ;Decimal       ;CaptionML=ENU=Sunday;
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 11012890;;Type Plant Hour Cost;Option       ;CaptionML=ENU=Type Plant Hour Cost;
                                                   OptionCaptionML=ENU=" ,Hours,Expenses";
                                                   OptionString=[ ,Hours,Expenses] }
    { 11012940;;Rental Unit        ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Project No.));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Rental Unit }
    { 11012993;;Employee No.       ;Code20        ;TableRelation=Employee.No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Employee No.;
                                                   NotBlank=Yes }
    { 11012994;;Service Type Receiving Comp.;Code20;
                                                   CaptionML=ENU=Service Type Receiving Comp. }
    { 11012995;;Project Type Receiving Comp.;Code20;
                                                   CaptionML=ENU=Project Type Receiving Comp. }
    { 11012996;;Cost Type Receiving Comp.;Option  ;CaptionML=ENU=Cost Type Receiving Comp.;
                                                   OptionCaptionML=ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue }
    { 11012997;;Use IC Vendor Posting Group;Boolean;
                                                   CaptionML=ENU=Use IC Vendor Posting Group }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
    {    ;Post in Company,IC Hours Tag No.,Document No.,Employee No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjSetup@1210190000 : Record 315;
      GenLedgerSetup@1210190004 : Record 98;
      ProjRec@1210190024 : Record 11072003;
      ProjTypeRec@1100525001 : Record 11012009;
      ServTypeRec@1100525002 : Record 11012814;
      JobJnlLine@1210190022 : Record 11072008;
      JobJnlLine2@1210190021 : Record 11072008;
      ServOrderRec@1210190030 : Record 11012823;
      ServJnlLine@1210190029 : Record 11012820;
      ServJnlLine2@1210190031 : Record 11012820;
      GenJnlLine@1210190025 : Record 81;
      GenJnlLine2@1210190020 : Record 81;
      DimValRec@1210190002 : Record 349;
      ICRelationRec@1210190006 : Record 11012057;
      ICEntryRec@1210190026 : Record 11012058;
      SurchargeRec@1210190015 : Record 11020208;
      SurchDimValRec@1210190016 : Record 349;
      EmplRec@1100485000 : Record 5200;
      GenJournalTemplate@1100485002 : Record 80;
      GenJournalBatch@1100409000 : Record 232;
      CompanyData@1100485005 : Record 11020674;
      ItemRec@1100525000 : Record 27;
      WageCompRec@1100525003 : Record 11012014;
      TmpCompressJobJnlLineRec@1100485006 : TEMPORARY Record 11072008;
      PostJobJnl@1210190019 : Codeunit 11072003;
      PostGenJnl@1210190018 : Codeunit 12;
      PostServJnl@1210190028 : Codeunit 11012802;
      DimMgt@1210190005 : Codeunit 408;
      Text000@1210190013 : TextConst 'ENU=Processing Intercompany Entries  @1@@@@@@@@@@@@@';
      LicenceCu@1210190023 : Codeunit 11012780;
      Window@1210190012 : Dialog;
      Progress@1210190011 : Integer;
      NoOfRecords@1210190010 : Integer;
      Counter@1210190009 : Integer;
      CompressNextLineNo@1100485007 : Integer;
      LastUpdateTime@1210190008 : Time;
      EntryNo@1210190017 : Integer;
      NextLeaveEntryNo@1100485004 : Integer;
      Text001@1100485003 : TextConst 'ENU=Insert ''%1'' for company ''%2'' is not allowed. The posting date %3 is not within allowed range of this company.';
      NextIntercompanyLedgerEntryNo@1100528400 : Integer;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text002@1100525004 : TextConst 'ENU=This Shortcut Dimension is not defined in the %1.';

    PROCEDURE ProcessICEntries@1();
    VAR
      Reason@1100527000 : Record 231;
      lvOrigin@1100525000 : 'Project,Service';
      CurrExchRate@1100525003 : Record 330;
      Currency@1100525002 : Record 4;
      IntercompanyLedgerEntryNo@1100528400 : Integer;
    BEGIN
      LicenceCu.CheckICProcess;

      CLEAR(PostGenJnl);

      CLEAR(PostJobJnl);   //Call 31184 new
      CLEAR(PostServJnl);  //Call 31184 new

      ProjSetup.GET;
      GenLedgerSetup.GET;

      //C002135 firm test on template and batch
      GenLedgerSetup.TESTFIELD("Intercompany Journal Template");
      GenLedgerSetup.TESTFIELD("Intercompany Batch Name");
      GenJournalTemplate.GET(GenLedgerSetup."Intercompany Journal Template");
      GenJournalBatch.GET(GenLedgerSetup."Intercompany Journal Template", GenLedgerSetup."Intercompany Batch Name");
      GenJournalBatch.TESTFIELD("Copy VAT Setup to Jnl. Lines", FALSE);
      //

      ICEntryRec.COPY(Rec);

      LastUpdateTime := TIME;

      IF GUIALLOWED THEN
        Window.OPEN(Text000);

      ICEntryRec.LOCKTABLE;
      ICEntryRec.SETRANGE("Post in Company", COMPANYNAME);
      NoOfRecords := ICEntryRec.COUNT;
      Counter := 0;
      EntryNo := 10000;  //M28785
      IF GenJnlLine.FINDLAST THEN
        EntryNo := GenJnlLine."Line No." + 10000;

      IF ICEntryRec.FINDSET(TRUE,FALSE) THEN BEGIN
        IF CompanyData.GET(COMPANYNAME) THEN;
        TmpCompressJobJnlLineRec.RESET;
        TmpCompressJobJnlLineRec.DELETEALL;
        CompressNextLineNo := 1;
        REPEAT
          Counter := Counter + 1;
          IF GUIALLOWED THEN
            UpdateProgressWindow(Counter);

          IntercompanyLedgerEntryNo := InsertIntercompanyLedgerEntry(ICEntryRec);
          CLEAR(GenJnlLine);
          WITH GenJnlLine DO BEGIN
            "Intercompany Transaction" := TRUE;
            "Supplying Company" := ICEntryRec."Supplying Company";
            "Journal Template Name" := GenLedgerSetup."Intercompany Journal Template";
            "Journal Batch Name" := GenLedgerSetup."Intercompany Batch Name";
            "Reason Code" := GenJournalTemplate."Reason Code";
            IF ICEntryRec."Reason Code" <> '' THEN BEGIN
              IF Reason.GET(ICEntryRec."Reason Code") THEN
                "Reason Code" := ICEntryRec."Reason Code";
            END;

            IF ICRelationRec.GET(ICEntryRec."Supplying Company", ICEntryRec."Receiving Company") THEN
              "Source Code" := ICRelationRec."Source Code"
            ELSE
              "Source Code" := GenJournalTemplate."Source Code";

            "Line No." := EntryNo;
            "Posting Date" := ICEntryRec."Posting Date";
            "Account Type" := ICEntryRec."Account Type";
            "Shortcut Dimension 1 Code" := ICEntryRec."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := ICEntryRec."Cost Object";
            "Dimension Set ID" := ICEntryRec."Dimension Set ID";
            "Cost Component" := ICEntryRec."Cost Component";
            "Job No." := ICEntryRec."Project No.";
            Element := ICEntryRec.Element;
            IF ("Job No." <> '') AND (Element = '') THEN
              Element := GetStandardProjElement("Job No.",
                                                ICEntryRec."Receiving Company"); //**4PS02.n
            "Extension Contract" := ICEntryRec."Extension Contract";
            "System-Created Entry" := TRUE; //26-10-06
            VALIDATE("Account No.", ICEntryRec."Bal. Account No.");
            "Applies-to Doc. Type" := ICEntryRec."Applies-to Doc. Type";
            "Applies-to Doc. No." := ICEntryRec."Applies-to Doc. No.";
            "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
            VALIDATE("Bal. Account No.", ICEntryRec."Account No.");
            IF ICEntryRec."Item No." <> '' THEN
              IF ItemRec.GET(ICEntryRec."Item No.") THEN
               "Item No." := ICEntryRec."Item No."; //Fill only if item exist in this company
            "Basic Item" := ICEntryRec."Basic Item";
            "Trade Item" := ICEntryRec."Trade Item";
            Manufacturer := ICEntryRec.Manufacturer;
            "Vendor (Trade Item)" := ICEntryRec."Vendor (Trade Item)";
            Quantity := ICEntryRec.Quantity;
            "Unit of Measure Code" := ICEntryRec."Unit of Measure Code";
            "System-Created Entry" := TRUE;
            VALIDATE("Gen. Prod. Posting Group",ICEntryRec."Gen. Prod. Posting Group");
            VALIDATE("Gen. Bus. Posting Group",ICEntryRec."Gen. Bus. Posting Group");
            VALIDATE("VAT Prod. Posting Group",ICEntryRec."VAT Prod. Posting Group");
            VALIDATE("VAT Bus. Posting Group",ICEntryRec."VAT Bus. Posting Group");
            VALIDATE("Gen. Posting Type",ICEntryRec."Gen. Posting Type");
            IF ("Gen. Posting Type" = 0) AND    //M23139
               ("VAT Prod. Posting Group" = '') AND
               ("VAT Bus. Posting Group" = '') THEN
            BEGIN
               GenJnlLine."Block VAT Posting" := TRUE;
            END;                                //M23139
            "Bal. Gen. Prod. Posting Group" := '';
            "Bal. Gen. Bus. Posting Group" := '';
            "Bal. VAT Prod. Posting Group" := '';
            "Bal. VAT Bus. Posting Group" := '';
            "Bal. Gen. Posting Type" := 0;
            //VALIDATE(Amount, ICEntryRec.Amount);   //** CALL C012290 o
            //** CALL C012290 sn
            IF "Currency Code" = '' THEN
              VALIDATE(Amount, ICEntryRec.GetAmountLCYPostInCompany)
            ELSE BEGIN
              GetCurrency("Currency Code", Currency);
              Amount := ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  0, '', "Posting Date", "Currency Code", ICEntryRec.GetAmountLCYPostInCompany,
                  "Currency Factor", "Account Type" = "Account Type"::Customer),
                Currency."Amount Rounding Precision");

              VALIDATE(Amount);
            END;
            //** CALL C012290 en

            Description := ICEntryRec.Description;
            "Description 2" := ICEntryRec."Description 2";
            "Document Type" := ICEntryRec."Document Type";
            "Document No." := ICEntryRec."Document No.";
            "Interest Date" := ICEntryRec."Interest Date";
            //IF "Interest Date" = 0D THEN "Interest Date" := "Posting Date";  // Only happens in CU11 when parameter is on.
                                                  //When parameter off, then mutation of interest date also possible at IC-mutations.
            "Wage Component" := ICEntryRec."Wage Component";
            //db.sn, 14-03-13: C001129
            IF WageCompRec.GET("Wage Component") THEN
              IF WageCompRec."Component Type" = WageCompRec."Component Type"::Expenses THEN
                IF ICEntryRec.GetPriceLCYPostInCompany <> 0 THEN
                  Quantity := ICEntryRec.GetAmountLCYPostInCompany / ICEntryRec.GetPriceLCYPostInCompany;
            //db.en, 14-03-13: C001129
            "Employee No." := ICEntryRec."Employee No.";
            "Plant Type" := ICEntryRec."Plant Type";
            "Plant No." := ICEntryRec."Plant No.";
            "Cost Component Plant" := ICEntryRec."Cost Component Plant";
            "Posting Group" := ICEntryRec."Posting Group";
            "Service Order No." := ICEntryRec."Service Order No.";
            "Service Contract No." := ICEntryRec."Service Contract No.";
            "Service Location No." := ICEntryRec."Service Location No.";
            "Additional Cost (Service)" := ICEntryRec."Additional Cost (Service)";
            Surcharge :=  ICEntryRec.Surcharge; //call 34240
            IF "Service Order No." <> '' THEN
              "Origin Type" := "Origin Type"::Service;
            "Rental Unit" := ICEntryRec."Rental Unit";
            "Origin Salary Application" := ICEntryRec."Origin Salary Application";

             //Call C008846 sn
            //rtc2013 fixed create different construction to retain dimensions from other company
            GenJnlLine.CreateDim(
              DimMgt.TypeToTableID1(GenJnlLine."Account Type"),GenJnlLine."Account No.",
              DimMgt.TypeToTableID1("Bal. Account Type"),GenJnlLine."Bal. Account No.",
              DATABASE::"Plant Number", DimMgt.MakeCombinedPlantNo(GenJnlLine."Plant Type",GenJnlLine."Plant No."),
              DATABASE::"Plant Type", GenJnlLine."Plant Type",
              DATABASE::Job, GenJnlLine."Job No.",
              DATABASE::"Service Order", GenJnlLine."Service Order No.",
              DATABASE::"Salesperson/Purchaser", GenJnlLine."Salespers./Purch. Code",
              DATABASE::Campaign, GenJnlLine."Campaign No.");
            //Call C008846 en
            //DP00387, Created dimension set overwrited by delivered dimension set, fix for above
            "Dimension Set ID" := DimMgt.GetDeltaDimSetID("Dimension Set ID",ICEntryRec."Dimension Set ID",0); // DP000387 new
            DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code"); //T005529
            DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec,
                                  ("Job No." <> '') OR ("Service Order No." <> ''),'');

            GenJnlLine2 := GenJnlLine;
      //MC-028627.sn provisional only for direct postings on account, because of dimensions linked to account
            IF (("Job No." = '') AND ("Service Order No." = '') AND
                ("Plant Type" = '') AND ("Account Type" = "Account Type"::"G/L Account")) AND
                ((GenJnlLine2."Account No." <> '') AND (GenJnlLine2."Bal. Account No." <> '')) THEN  //M 30792
            BEGIN
              VALIDATE("Bal. Account No.", '');
              VALIDATE("Account No.", GenJnlLine2."Account No.");
              "Dimension Set ID" := DimMgt.GetDeltaDimSetID("Dimension Set ID",ICEntryRec."Dimension Set ID",0); //T005529
              DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code"); //T005529

              PostGenJnl.RunWithCheck(GenJnlLine);

              GenJnlLine := GenJnlLine2;
              VALIDATE("Bal. Account No.", '');
              VALIDATE("Account No.", GenJnlLine2."Bal. Account No.");
              "Dimension Set ID" := DimMgt.GetDeltaDimSetID("Dimension Set ID",ICEntryRec."Dimension Set ID",0); //T005529
              DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code"); //T005529

              //VALIDATE(Amount, -1 * GenJnlLine2.Amount);  //** CALL C012290
              //** CALL C012290 sn
              IF "Currency Code" = '' THEN
                VALIDATE(Amount, -1 * GenJnlLine2.Amount)
              ELSE BEGIN
                GetCurrency("Currency Code", Currency);
                Amount := ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  0, '', "Posting Date","Currency Code",
                  (-1 * GenJnlLine2.Amount),"Currency Factor","Account Type" = "Account Type"::Customer),
                  Currency."Amount Rounding Precision");

                VALIDATE(Amount);
              END;
              //** CALL C012290 en

              PostGenJnl.RunWithCheck(GenJnlLine);
            END ELSE
      //MC-028627.en
              PostGenJnl.RunWithCheck(GenJnlLine);
            GenJnlLine := GenJnlLine2;

            IF "Job No." <> '' THEN BEGIN
              PostProject(IntercompanyLedgerEntryNo);
              IF NOT ICEntryRec.Surcharge THEN
                PostSurcharge(0);
            END;
            IF "Service Order No." <> '' THEN BEGIN
              PostService(IntercompanyLedgerEntryNo);
              IF NOT ICEntryRec.Surcharge THEN
                PostSurcharge(1);
            END;
            IF "Plant Type" <> '' THEN
              PostPlant(IntercompanyLedgerEntryNo);

            IF ICEntryRec."IC Hours Tag No." > 0 THEN
              CreatePostedHours;

            //Extra WIP postings in supplying company is applied to linked hours
            //Input hours in receiving company.
            //This posting will only be created when field:"??????? Type Receiving Comp." is filled in receiving company.
            IF ("Job No."= '') AND ("Service Order No." = '') AND ("Plant Type" = '') AND
               (ICEntryRec."Supplying Company" = ICEntryRec."Post in Company") THEN
            BEGIN
              IF ICEntryRec."Service Type Receiving Comp." <> '' THEN BEGIN
                ServTypeRec.CHANGECOMPANY("Receiving Company");
                ServTypeRec.GET(ICEntryRec."Service Type Receiving Comp.");
                IF ServTypeRec."Post Complementary Costs" THEN BEGIN
                  AssignServiceToProjectEntry(ServJnlLine, '');
                  ComplementaryWIPICEntry(lvOrigin::Service, GenJnlLine);
                END;
              END;
              IF ICEntryRec."Project Type Receiving Comp." <> '' THEN BEGIN
                ProjTypeRec.CHANGECOMPANY("Receiving Company");
                ProjTypeRec.GET(ICEntryRec."Project Type Receiving Comp.");
                IF ProjTypeRec."Post Complementary Costs" THEN BEGIN
                  ComplementaryWIPICEntry(lvOrigin::Project, GenJnlLine);
                END;
              END;
            END;

          END;
        UNTIL ICEntryRec.NEXT = 0;

        PostCompressedPlantJobEntries();
        ICEntryRec.DELETEALL(TRUE);
      END;

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE UpdateDimension@1210190000(GlobalDimension@1210190000 : Integer);
    VAR
      DimManagement@1100525000 : Codeunit 408;
    BEGIN
      DimManagement.SetCompany("Post in Company");

      IF GlobalDimension = 1 THEN
        DimManagement.ValidateShortcutDimValues(1,"Global Dimension 1 Code","Dimension Set ID");

      IF GlobalDimension = 2 THEN
        DimManagement.ValidateShortcutDimValues(2,"Cost Object","Dimension Set ID");
    END;

    PROCEDURE PostProject@1210190005(IntercompanyLedgerEntryNo@1100528400 : Integer);
    VAR
      lvGenJnlLine@1100525000 : Record 81;
    BEGIN
      WITH GenJnlLine DO BEGIN
        // Post project entries
        JobJnlLine.INIT;
        JobJnlLine."Posting Date" := "Posting Date";
        JobJnlLine."Document Date" := "Document Date";
        JobJnlLine."Job No." := "Job No.";
        JobJnlLine."No." := "Account No.";
        JobJnlLine.Description := Description;
        JobJnlLine."Description 2" := "Description 2";
        JobJnlLine."Posting Group" := "Posting Group";
        JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        JobJnlLine."Dimension Set ID" := "Dimension Set ID";
        JobJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        JobJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        JobJnlLine."Document No." := "Document No.";
        JobJnlLine."External Document No." := "External Document No.";
        JobJnlLine.Vendor := ICEntryRec."Vendor No.";
        JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
        JobJnlLine.Quantity := Quantity;
        JobJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue THEN BEGIN
          JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Sale;    //db, 01-03-04: change of sign
          IF Quantity = 0 THEN
            JobJnlLine."Unit Price (LCY)" := -"VAT Base Amount"
          ELSE
            JobJnlLine."Unit Price (LCY)" := -"VAT Base Amount"/Quantity;
          JobJnlLine."Total Price (LCY)" := -ROUND("VAT Base Amount");
          JobJnlLine."Source Currency Total Price" := -ROUND("Source Currency Amount");
        END ELSE BEGIN
          JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;
          IF Quantity = 0 THEN
            JobJnlLine."Direct Unit Cost (LCY)" := "VAT Base Amount"
          ELSE
            JobJnlLine."Direct Unit Cost (LCY)" := "VAT Base Amount"/Quantity;
          JobJnlLine."Total Cost (LCY)" := ROUND("VAT Base Amount");
          JobJnlLine."Source Currency Total Cost" := ROUND("Source Currency Amount");
        END;
        JobJnlLine."Reason Code" := "Reason Code";
        JobJnlLine."Source Code" := "Source Code";
        //JobJnlLine."Post Job Entry Only" := TRUE; //Removed in NAV2009
        JobJnlLine."Posting No. Series" := "Posting No. Series";
        JobJnlLine."Source Currency Code" := "Currency Code";
        IF ICEntryRec."Supplying Company" <> COMPANYNAME THEN
          JobJnlLine."Supplying Company" := ICEntryRec."Supplying Company";
        JobJnlLine."Employee No." := "Employee No.";
        JobJnlLine.Element := Element;
        JobJnlLine."Extension Contract" := "Extension Contract";
        JobJnlLine."Item No." := "Item No.";
        JobJnlLine."Basic Item" := "Basic Item";
        JobJnlLine."Trade Item" := "Trade Item";
        JobJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        JobJnlLine.Manufacturer := Manufacturer;
        JobJnlLine."Service Order No." := "Service Order No.";
        JobJnlLine."Service Contract No." := "Service Contract No.";
        JobJnlLine."Service Location No." := "Service Location No.";
        JobJnlLine."Rental Unit" := "Rental Unit";
        JobJnlLine."Rental Period" := "Rental Period";
        JobJnlLine."Wage Component" := "Wage Component";
        //db.sn, 14-03-13: C001129
        IF WageCompRec.GET("Wage Component") THEN BEGIN
          IF WageCompRec."Component Type" = WageCompRec."Component Type"::Expenses THEN BEGIN
            IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN  //** CALL C011153 n
              JobJnlLine.Quantity := 0;
              JobJnlLine."Unit Cost (LCY)" := JobJnlLine."Direct Unit Cost (LCY)";  //db, 14-03-13: C001129 (checked on CostPlusEntry)
            END;
          END;
        END;
        //db.en, 14-03-13: C001129
        JobJnlLine."Cost Component" := "Cost Component";
        JobJnlLine."Execution Date" := ICEntryRec."Execution Date Hours";
        JobJnlLine."Created from Intercompany":= TRUE;
        JobJnlLine.Surcharge := Surcharge; //call 34240

        IF NOT CheckCompressPlantJobEntries() THEN BEGIN
          PostJobJnl.SetOriginSalaryApplication("Origin Salary Application");
          //FIXED DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim, lvTempJnlLineDim); //MC-026627 save dims NO FIX REQUIRED  DP00387
          JobJnlLine."Intercompany Ledger Entry No." := IntercompanyLedgerEntryNo;
          PostJobJnl.RunWithCheck(JobJnlLine);
          lvGenJnlLine := GenJnlLine;
          ProjRec.CHANGECOMPANY("Receiving Company");
          ProjRec.GET("Job No.");
          ProjTypeRec.CHANGECOMPANY("Receiving Company");
          ProjTypeRec.GET(ProjRec."Project Type");
          IF ProjTypeRec."Post Complementary Costs" OR
             ProjTypeRec."Post Complementary Revenues" THEN //Call C-029414
          BEGIN
            //FIXED TempJnlLineDim.DELETEALL;  //MC-026627 reset dims
            //FIXED DimMgt.CopyJnlLineDimToJnlLineDim(lvTempJnlLineDim, TempJnlLineDim); //MC-026627 reset dims
            //NO FIX REQUIRED, JobJnlLine is not changed after posting. DP00387
            ComplementaryWIPProj(JobJnlLine);
          END;
          GenJnlLine := lvGenJnlLine;
          PostJobJnl.SetOriginSalaryApplication(FALSE);
        END ELSE BEGIN
          CompressPlantJobEntries(JobJnlLine);
        END;

      END;
    END;

    PROCEDURE PostPlant@1210190003(IntercompanyLedgerEntryNo@1100528400 : Integer);
    VAR
      PlantLedgEntryRec@1210190001 : Record 11012572;
      PlantTypeRec@1210190002 : Record 11012551;
      PostPlantEntryCU@1210190000 : Codeunit 11012569;
    BEGIN
      WITH GenJnlLine DO BEGIN
        PlantLedgEntryRec.INIT;
        PlantLedgEntryRec."Vendor No." := ICEntryRec."Vendor No.";
        PlantLedgEntryRec."Document No." := "Document No.";
        PlantLedgEntryRec."Posting Date" := "Posting Date";
        PlantLedgEntryRec."Document Date" := "Document Date";
        PlantLedgEntryRec."Account No." := "Account No.";
        PlantLedgEntryRec.Description := Description;
        PlantLedgEntryRec."Description 2" := "Description 2";
        PlantLedgEntryRec.Quantity := Quantity;
        IF Quantity <> 0 THEN
          PlantLedgEntryRec."Direct Unit Cost" := "VAT Base Amount" / Quantity
        ELSE
          PlantLedgEntryRec."Direct Unit Cost" := "VAT Base Amount";
        PlantLedgEntryRec."Unit Cost" := PlantLedgEntryRec."Direct Unit Cost";
        PlantLedgEntryRec."Total Cost" := ROUND("VAT Base Amount");
        PlantLedgEntryRec."Unit of Measure Code" := "Unit of Measure Code";
        PlantLedgEntryRec."Department Code" := "Shortcut Dimension 1 Code";
        PlantLedgEntryRec."Cost Object" := "Shortcut Dimension 2 Code";
        PlantLedgEntryRec."Dimension Set ID" := "Dimension Set ID";
        PlantLedgEntryRec."Source Code" := "Source Code";
        PlantLedgEntryRec."Reason Code" := "Reason Code";
        PlantLedgEntryRec."Plant Type" := "Plant Type";
        PlantLedgEntryRec."Plant No." := "Plant No.";
        PlantLedgEntryRec."Cost Component" := "Cost Component Plant";
        //PlantLedgEntryRec."Plant Posting Group" := "Posting Group";  //*27818.o.
        //*27818.sn
        IF PlantLedgEntryRec."Plant Type" <> '' THEN BEGIN
          IF PlantTypeRec.GET(PlantLedgEntryRec."Plant Type") THEN
            PlantLedgEntryRec."Plant Posting Group" := PlantTypeRec.PlantPostingGrp(PlantLedgEntryRec."Plant No.", '', '');
        END;
        //*27818.en
        PlantLedgEntryRec."Intercompany Ledger Entry No." := IntercompanyLedgerEntryNo;
        PostPlantEntryCU.RUN(PlantLedgEntryRec);
      END;

      //C-019664 In 'ProcessICEntry' record 'ICEntryRec' is used (and not Rec), so 'ICEntryRec' is added
      IF (ICEntryRec."Receiving Company" = COMPANYNAME) AND
         (ICEntryRec."Receiving Company" = ICEntryRec."Post in Company") AND
         (ICEntryRec.Year <> 0) AND (ICEntryRec.Week <> 0) AND
         ("Type Plant Hour Cost" IN ["Type Plant Hour Cost"::Hours, "Type Plant Hour Cost"::Expenses])  //*C019484.n
      THEN
        InsertPlantHourCostLine;
    END;

    PROCEDURE InsertPlantHourCostLine@1100485026() : Integer;
    VAR
      lvPlantHourCostHeadRec@1100485000 : Record 11012577;
      lvPlantHourCostLineRec@1100485002 : Record 11012578;
      lvPlantHourCostLineRec2@1100485003 : Record 11012578;
      lvSupplyingCompany@1100525000 : Text[30];
    BEGIN
      WITH ICEntryRec DO BEGIN  //C-019664.n  In 'ProcessICEntry' record 'ICEntryRec' is used (and not Rec)
        lvSupplyingCompany := "Supplying Company";

        //Create Plant Hour Cost Header if necessary (if not already exist)
        IF NOT lvPlantHourCostHeadRec.GET(Year, Week, lvSupplyingCompany, "Employee No.") THEN BEGIN
          lvPlantHourCostHeadRec.INIT;
          lvPlantHourCostHeadRec.Year := Year;
          lvPlantHourCostHeadRec.Week := Week;
          lvPlantHourCostHeadRec."Employee Company" := lvSupplyingCompany;
          lvPlantHourCostHeadRec."Employee No." := "Employee No.";
          lvPlantHourCostHeadRec.INSERT(FALSE);
        END;

        //Create Plant Hour Cost Line
        lvPlantHourCostLineRec.INIT;
        lvPlantHourCostLineRec.Year := Year;
        lvPlantHourCostLineRec.Week := Week;
        lvPlantHourCostLineRec."Employee Company" := lvSupplyingCompany;
        lvPlantHourCostLineRec."Employee No." := "Employee No.";
        lvPlantHourCostLineRec."Plant Type" := "Plant Type";
        lvPlantHourCostLineRec."Plant No." := "Plant No.";
        lvPlantHourCostLineRec."Cost Component" := "Cost Component Plant";
        IF ("Type Plant Hour Cost" <> "Type Plant Hour Cost"::Expenses) THEN BEGIN  //*C019484.n
          lvPlantHourCostLineRec.Monday := Monday;
          lvPlantHourCostLineRec.Tuesday := Tuesday;
          lvPlantHourCostLineRec.Wednesday := Wednesday;
          lvPlantHourCostLineRec.Thursday := Thursday;
          lvPlantHourCostLineRec.Friday := Friday;
          lvPlantHourCostLineRec.Saturday := Saturday;
          lvPlantHourCostLineRec.Sunday := Sunday;
          lvPlantHourCostLineRec."Total Line" := Quantity;
          lvPlantHourCostLineRec."Unit Cost" := ICEntryRec.GetPriceLCYPostInCompany;
          lvPlantHourCostLineRec.Origin := lvPlantHourCostLineRec.Origin::HourAcc;
        //*C019484.sn
        END ELSE BEGIN
          lvPlantHourCostLineRec."Cost Object" := "Cost Object";
          lvPlantHourCostLineRec."Wage Component Expenses" := "Wage Component";
          lvPlantHourCostLineRec.Quantity := Quantity;
          lvPlantHourCostLineRec."Unit Rate" := ICEntryRec.GetPriceLCYPostInCompany;
          lvPlantHourCostLineRec.Amount := ICEntryRec.GetAmountLCYPostInCompany;
        END;
        //*C019484.en
        lvPlantHourCostLineRec2.SETRANGE(Year, Year);
        lvPlantHourCostLineRec2.SETRANGE(Week, Week);
        lvPlantHourCostLineRec2.SETRANGE("Employee Company",lvSupplyingCompany);
        lvPlantHourCostLineRec2.SETRANGE("Employee No.","Employee No.");
        IF lvPlantHourCostLineRec2.FINDLAST THEN
          lvPlantHourCostLineRec."Line No." := lvPlantHourCostLineRec2."Line No." + 10000
        ELSE
          lvPlantHourCostLineRec."Line No." := 10000;

        lvPlantHourCostLineRec.Status := lvPlantHourCostLineRec.Status::Posted;

        lvPlantHourCostLineRec.INSERT(FALSE);

        EXIT(lvPlantHourCostLineRec."Line No.");
      END;  //C-019664.n
    END;

    PROCEDURE PostService@1210190002(IntercompanyLedgerEntryNo@1100528400 : Integer);
    VAR
      lvGenJnlLine@1100525000 : Record 81;
      lvType@1100525001 : Code[20];
    BEGIN
      WITH GenJnlLine DO BEGIN
        ServJnlLine.INIT;
        ServJnlLine."Service Contract No." := "Service Contract No.";
        ServJnlLine."Service Order No." := "Service Order No.";
        ServJnlLine."Service Location No." := "Service Location No.";
        ServJnlLine."Additional Cost" := "Additional Cost (Service)";
        ServJnlLine."Document No." := "Document No.";
        ServJnlLine."G/L Account" := "Account No.";
        ServJnlLine."Posting Date" := "Posting Date";
        ServJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ServJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ServJnlLine."Dimension Set ID" := "Dimension Set ID";
        ServJnlLine.Description := Description;
        ServJnlLine."Description 2" := "Description 2";
        ServJnlLine.Quantity := Quantity;
        ServJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ServJnlLine."Currency Code" := "Currency Code"; // dp00116.n
        //db.sn, 01-07-09: M15531
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue THEN BEGIN
          //db, 07-09-09: M16322 (change of sign)
          IF Quantity = 0 THEN
            ServJnlLine.VALIDATE("Sales Price (LCY)", -"VAT Base Amount")
          ELSE
            ServJnlLine.VALIDATE("Sales Price (LCY)", -"VAT Base Amount" / Quantity);
          ServJnlLine.VALIDATE("Total Revenue (LCY)", -ROUND("VAT Base Amount"));
        END ELSE BEGIN
          IF Quantity = 0 THEN
            ServJnlLine.VALIDATE("Unit Cost (LCY)", "VAT Base Amount")
          ELSE
            ServJnlLine.VALIDATE("Unit Cost (LCY)", "VAT Base Amount" / Quantity);
          ServJnlLine.VALIDATE("Total Cost (LCY)", ROUND("VAT Base Amount"));
        END;
        //db.sn, 01-07-09: M15531
        IF ICEntryRec."Supplying Company" <> COMPANYNAME THEN
          ServJnlLine."Supplying Company" := ICEntryRec."Supplying Company";
        ServJnlLine."Employee No." := "Employee No.";
        ServJnlLine."Wage Component" := "Wage Component";
        //db.sn, 14-03-13: C001129
        IF WageCompRec.GET("Wage Component") THEN
          IF WageCompRec."Component Type" = WageCompRec."Component Type"::Expenses THEN
            IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN  //** CALL C011153 n
              ServJnlLine.Quantity := 0;
        //db.en, 14-03-13: C001129
        ServJnlLine."Source Code" := "Source Code";
        ServJnlLine."Reason Code" := "Reason Code";
        ServJnlLine."Item No." := "Item No.";
        ServJnlLine."Basic Item" := "Basic Item";
        ServJnlLine."Trade Item" := "Trade Item";
        ServJnlLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        ServJnlLine.Manufacturer := Manufacturer;
        ServJnlLine."Project No." := "Job No.";
        ServJnlLine."Vendor No." := ICEntryRec."Vendor No.";
        ServJnlLine."Wage Component" := "Wage Component";
        ServJnlLine."Cost Component" := "Cost Component";
        ServJnlLine."Rental Period" := "Rental Period";
        ServJnlLine.Surcharge := Surcharge; //call 34240
        ServJnlLine."Intercompany Ledger Entry No." := IntercompanyLedgerEntryNo;

        PostServJnl.RunWithCheck(ServJnlLine);

        lvGenJnlLine := GenJnlLine;
        ServOrderRec.CHANGECOMPANY("Receiving Company");
        ServOrderRec.GET("Service Order No.");
        IF "Additional Cost (Service)" = TRUE THEN
          lvType := ServOrderRec."Service Type (Other)"
        ELSE
          lvType := ServOrderRec."Service Type";

        ServTypeRec.CHANGECOMPANY("Receiving Company");
        ServTypeRec.GET(lvType);
        IF ServTypeRec."Post Complementary Costs" OR
             ProjTypeRec."Post Complementary Revenues" THEN //Call C-029414
        BEGIN
          AssignServiceToProjectEntry(ServJnlLine, '');
          ComplementaryWIPServ(JobJnlLine);
        END;
        GenJnlLine := lvGenJnlLine;
      END;
    END;

    PROCEDURE PostSurcharge@1210190006(lvOrigin@1210190000 : 'Project,Service');
    VAR
      lvType@1210190008 : Code[20];
      lvOrigDim1@1210190007 : Code[20];
      lvOrigDim2@1210190006 : Code[20];
      lvDim1@1210190005 : Code[20];
      lvDim2@1210190004 : Code[20];
      lvAccount@1210190003 : Code[20];
      lvDepartmentCode@1100525004 : Code[20];
      lvCostComp@1100525005 : Code[20];
      lvDesc@1210190002 : Text[50];
      lvDesc2@1100485000 : Text[50];
      lvCostTotal@1210190001 : Decimal;
      lvTotSurchAmount@1100485002 : Decimal;
      lvTotSurchAmount2@1100485003 : Decimal;
      lvGenJnlLineSurcharge1@1100525000 : Record 81;
      lvGenJnlLineSurcharge2@1100525001 : Record 81;
      lvGenJnlLine@1100525002 : Record 81;
      CalcSurcharge@1100525003 : Boolean;
      DimSetID@1100409000 : Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN

        ICRelationRec."Vendor Posting Group" := '';
        IF ICEntryRec."Use IC Vendor Posting Group" THEN BEGIN
          IF ICRelationRec.GET(ICEntryRec."Supplying Company", ICEntryRec."Receiving Company") THEN;
        END;

        IF lvOrigin = lvOrigin::Project THEN BEGIN
          IF "Service Order No." <> '' THEN EXIT;
          ProjRec.GET("Job No.");
          lvType := ProjRec."Project Type";
          ProjTypeRec.CHANGECOMPANY(ICEntryRec."Receiving Company");
          ProjTypeRec.GET(lvType);
        END;
        IF lvOrigin = lvOrigin::Service THEN BEGIN
          ServOrderRec.GET("Service Order No.");
          IF "Additional Cost (Service)" = TRUE THEN
            lvType := ServOrderRec."Service Type (Other)"
          ELSE
            lvType := ServOrderRec."Service Type";
          ServTypeRec.CHANGECOMPANY(ICEntryRec."Receiving Company");
          ServTypeRec.GET(lvType);
        END;

        lvOrigDim1 := "Shortcut Dimension 1 Code";
        lvOrigDim2 := "Shortcut Dimension 2 Code";
        DimMgt.GetDimValueRec(2, lvOrigDim2, DimValRec, TRUE, '');

        CLEAR(EmplRec);
        EmplRec.CHANGECOMPANY(ICEntryRec."Supplying Company");  //CALL 30540

        IF ("Employee No." <> '') THEN
          IF EmplRec.GET("Employee No.") THEN;

        IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Labor) AND ("Employee No." <> '') THEN
          IF (EmplRec.External) AND (EmplRec."External Post No Surcharge") THEN
            EXIT;

        IF ("Employee No." <> '') AND
           (GenLedgerSetup."Source Department Surcharge" =
            GenLedgerSetup."Source Department Surcharge"::Employee) THEN
        BEGIN
          lvDepartmentCode := EmplRec."Global Dimension 1 Code";
        END ELSE BEGIN
          lvDepartmentCode := lvOrigDim1;
        END;

        IF SurchargeRec.GetSurcharges(
          lvOrigin, lvType, "Job No.", TRUE, DimValRec."Cost Type",
          DimValRec.Code, "Wage Component",
          lvDepartmentCode, EmplRec."Trade Association",
          "Cost Component", "Posting Date",
          SurchargeRec) THEN
        BEGIN
          REPEAT

            CalcSurcharge := TRUE;

            //Call 32885 so
            //IF ((DimValRec."Cost Type" = DimValRec."Cost Type"::Labor) AND ("Employee No." <> ''))
            //   AND (SurchargeRec."No Surcharge over InterCompany") THEN
            //  CalcSurcharge := FALSE;
            //Call 32885 eo
            IF SurchargeRec."No Surcharge over InterCompany" THEN   //Call 32885 n
              CalcSurcharge := FALSE;                               //Call 32885 n


            IF CalcSurcharge THEN BEGIN

              SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
              SurchargeRec.TESTFIELD("Coverage Account");

              IF lvOrigin = lvOrigin::Project THEN BEGIN
                JobJnlLine2 := JobJnlLine;
                JobJnlLine2."Intercompany Ledger Entry No." := 0;
                JobJnlLine2.InitSurcharge(
                  JobJnlLine2, DimValRec, SurchDimValRec,
                  SurchargeRec, lvOrigDim1, lvType, lvTotSurchAmount,
                  ICRelationRec."Vendor Posting Group");
                lvDim1 := JobJnlLine2."Shortcut Dimension 1 Code";
                lvDim2 := JobJnlLine2."Shortcut Dimension 2 Code";
                DimSetID := JobJnlLine2."Dimension Set ID";
                lvCostComp := JobJnlLine2."Cost Component";
                lvDesc := JobJnlLine2.Description;
                lvDesc2 := JobJnlLine2."Description 2";
                lvCostTotal := JobJnlLine2."Total Cost (LCY)";
                lvAccount:= JobJnlLine2."No.";
              END;

              IF lvOrigin = lvOrigin::Service THEN BEGIN
                ServJnlLine2 := ServJnlLine;
                ServJnlLine2."Intercompany Ledger Entry No." := 0;
                ServJnlLine2.InitSurcharge(
                  ServJnlLine2, DimValRec, SurchDimValRec,
                  SurchargeRec, lvOrigDim1, lvType, lvTotSurchAmount,
                  ICRelationRec."Vendor Posting Group");
                lvDim1 := ServJnlLine2."Shortcut Dimension 1 Code";
                lvDim2 := ServJnlLine2."Shortcut Dimension 2 Code";
                DimSetID := ServJnlLine2."Dimension Set ID";
                lvCostComp := ServJnlLine2."Cost Component";
                lvDesc := ServJnlLine2.Description;
                lvDesc2 := ServJnlLine2."Description 2";
                lvCostTotal := ServJnlLine2."Total Cost (LCY)";
                lvAccount:= ServJnlLine2."G/L Account";
              END;

              IF lvOrigin = lvOrigin::Project THEN BEGIN
                IF NOT CheckCompressPlantJobEntries() THEN BEGIN
                  PostJobJnl.SetOriginSalaryApplication("Origin Salary Application");
                  PostJobJnl.RunWithCheck(JobJnlLine2);
                  PostJobJnl.SetOriginSalaryApplication(FALSE);
                END ELSE BEGIN
                  CompressPlantJobEntries(JobJnlLine2);
                END;
              END;

              IF lvOrigin = lvOrigin::Service THEN BEGIN
                PostServJnl.RunWithCheck(ServJnlLine2);
                IF "Job No." <> '' THEN BEGIN
                  ProjRec.GET("Job No.");
                  lvType := ProjRec."Project Type";
                  JobJnlLine2 := JobJnlLine;
                  JobJnlLine2.InitSurcharge(
                    JobJnlLine2, DimValRec, SurchDimValRec,
                    SurchargeRec, lvOrigDim1, lvType, lvTotSurchAmount2,
                    ICRelationRec."Vendor Posting Group");
                  JobJnlLine2."Direct Unit Cost (LCY)" := lvCostTotal;
                  JobJnlLine2."Unit Cost (LCY)" := lvCostTotal;
                  JobJnlLine2."Total Cost (LCY)" := lvCostTotal;
                  JobJnlLine2."No." := lvAccount;
                  PostJobJnl.SetOriginSalaryApplication("Origin Salary Application");
                  PostJobJnl.RunWithCheck(JobJnlLine2);
                  PostJobJnl.SetOriginSalaryApplication(FALSE);
                END;
              END;

              GenJnlLine2.INIT;
              GenJnlLine2."Line No." := EntryNo;
              GenJnlLine2."Intercompany Transaction" := TRUE;
              GenJnlLine2."Journal Template Name" := "Journal Template Name";
              GenJnlLine2."Journal Batch Name" := "Journal Batch Name";
              GenJnlLine2."Source Code" := "Source Code";
              GenJnlLine2."Reason Code" := "Reason Code";
              GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";
              GenJnlLine2."Account No." := lvAccount;
              GenJnlLine2."Posting Date" := "Posting Date";
              GenJnlLine2."Document Type" := "Document Type";
              GenJnlLine2."Document No." := "Document No.";
              GenJnlLine2."Document Date" := "Document Date";
              GenJnlLine2."System-Created Entry" := TRUE;
              GenJnlLine2."Job No." := "Job No.";
              IF ("Job No." <> '') AND (SurchargeRec."Element Surcharge" <> '') THEN
                GenJnlLine2.Element := SurchargeRec."Element Surcharge"
              ELSE
                GenJnlLine2.Element := Element;
              GenJnlLine2."Extension Contract" := "Extension Contract";
              GenJnlLine2."Service Order No." := "Service Order No.";
              GenJnlLine2."Service Location No." := "Service Location No.";
              GenJnlLine2."Service Contract No." := "Service Contract No.";
              GenJnlLine2."Additional Cost (Service)" := "Additional Cost (Service)";
              GenJnlLine2."Rental Unit" := "Rental Unit";
              GenJnlLine2."Shortcut Dimension 1 Code" := lvDim1;
              GenJnlLine2."Shortcut Dimension 2 Code" := lvDim2;
              GenJnlLine2."Dimension Set ID" := DimSetID;
              GenJnlLine2."Cost Component" := lvCostComp;
              GenJnlLine2.Description := lvDesc;
              GenJnlLine2."Description 2" := lvDesc2;
              GenJnlLine2.Amount := lvCostTotal;
              GenJnlLine2.VALIDATE(Amount);
              GenJnlLine2."Interest Date" := "Interest Date";

              lvGenJnlLineSurcharge1 := GenJnlLine2;

              //Post Debit Line
              PostGenJnl.RunWithoutCheck(GenJnlLine2);

              //Post Credit Line
              GenJnlLine2."Account No." := SurchargeRec."Coverage Account";
              GenJnlLine2."Shortcut Dimension 1 Code" := '';
              CASE SurchargeRec."Source Type Department" OF
                SurchargeRec."Source Type Department"::Employee:
                  IF EmplRec.GET("Employee No.") THEN
                    GenJnlLine2."Shortcut Dimension 1 Code" := EmplRec."Global Dimension 1 Code";
                SurchargeRec."Source Type Department"::Job:
                  GenJnlLine2."Shortcut Dimension 1 Code" := lvDim1;
                SurchargeRec."Source Type Department"::Fixed:
                  GenJnlLine2."Shortcut Dimension 1 Code" := SurchargeRec."Coverage Department"
              END;
              GenJnlLine2."Shortcut Dimension 2 Code" := lvDim2;
              DimMgt.ValidateShortcutDimValues(1,GenJnlLine2."Shortcut Dimension 1 Code",GenJnlLine2."Dimension Set ID");


              IF SurchargeRec."Compress Coverage Posting" THEN BEGIN  //Call C006064 n
                GenJnlLine2."Cost Component" := '';
                GenJnlLine2."Job No." := '';
                GenJnlLine2.Element := '';
                GenJnlLine2."Extension Contract" := '';
                GenJnlLine2."Service Order No." := '';
                GenJnlLine2."Service Location No." := '';
                GenJnlLine2."Service Contract No." := '';
                GenJnlLine2."Rental Unit" := '';
              END;                                                  //Call C006064 n

              GenJnlLine2.Amount := lvCostTotal * -1;

              lvGenJnlLineSurcharge2 := GenJnlLine2;

              PostGenJnl.RunWithoutCheck(GenJnlLine2);

              lvGenJnlLine := GenJnlLine;

              IF lvOrigin = lvOrigin::Project THEN
                IF ProjTypeRec."Post Complementary Surcharge" THEN    //M22478
                  ComplementaryWIPSurcharges(lvOrigin, lvGenJnlLineSurcharge2, lvGenJnlLineSurcharge1);

              IF lvOrigin = lvOrigin::Service THEN
                IF ServTypeRec."Post Complementary Surcharge" THEN    //M22478
                  ComplementaryWIPSurcharges(lvOrigin, lvGenJnlLineSurcharge2, lvGenJnlLineSurcharge1);

              GenJnlLine := lvGenJnlLine;

            END;
          UNTIL SurchargeRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetStandardProjElement@1210190004(IProjectNo@1210190003 : Code[20];IRecevComp@1100485000 : Text[30]) lvElement@1210190002 : Code[20];
    VAR
      lvProjElementRec@1210190000 : Record 11012010;
      lvText001@1210190001 : TextConst 'ENU=Standard element of project %1 not present';
      lvProjRec@1100485001 : Record 11072003;
    BEGIN
      lvElement := '';
      IF IRecevComp <> '' THEN                        //**4PS02.sn
        lvProjRec.CHANGECOMPANY(IRecevComp);          //**4PS02.en
      lvProjRec.GET(IProjectNo);
      IF NOT lvProjRec."Posting Element Mandatory" THEN
        EXIT;

      IF IRecevComp <> '' THEN                        //**4PS02.sn
        lvProjElementRec.CHANGECOMPANY(IRecevComp);   //**4PS02.en
      lvProjElementRec.SETRANGE("Project No.", IProjectNo);
      lvProjElementRec.SETRANGE(Level, 0);
      IF lvProjElementRec.FIND('-') THEN
        lvElement := lvProjElementRec.Element;

      IF lvElement = '' THEN
        ERROR(lvText001, IProjectNo);
    END;

    PROCEDURE UpdateProgressWindow@9(NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) OR (TIME > LastUpdateTime + 5000) THEN BEGIN
          Window.UPDATE(1,100 * NewProgress);
          LastUpdateTime := TIME;
        END;
        Progress := NewProgress;
      END;
    END;

    PROCEDURE CreatePostedHours@1210190007();
    VAR
      lPostedHourHeaderSourceCompany@1210190004 : Record 11012084;
      lPostedHourLineSourceCompany@1210190000 : Record 11012085;
      lPostedHourHeader@1210190002 : Record 11012084;
      lPostedHourLine@1210190001 : Record 11012085;
      lGenerateDays@1210190006 : Codeunit 11012028;
      lLineNo@1210190003 : Integer;
    BEGIN
      WITH lPostedHourLineSourceCompany DO BEGIN
        CHANGECOMPANY(ICEntryRec."Receiving Company");
        SETCURRENTKEY("Receiving Company", "IC Tag No.");
        SETFILTER("Receiving Company", '%1', '');
        SETRANGE("IC Tag No.", ICEntryRec."IC Hours Tag No.");
        FINDFIRST;

        lPostedHourHeaderSourceCompany.CHANGECOMPANY(ICEntryRec."Receiving Company");
        lPostedHourHeaderSourceCompany.GET(Year, Week, "Employee No.");

        lPostedHourHeader := lPostedHourHeaderSourceCompany;
        IF lPostedHourHeader.INSERT THEN;

        lPostedHourLine.SETRANGE(Year, Year);
        lPostedHourLine.SETRANGE(Week, Week);
        lPostedHourLine.SETRANGE("Employee No.", "Employee No.");
        IF lPostedHourLine.FINDLAST THEN
          lLineNo := lPostedHourLine."Line No." + 1
        ELSE
          lLineNo := 1;
        lPostedHourLine := lPostedHourLineSourceCompany;
        lPostedHourLine."Line No." := lLineNo;
        lPostedHourLine.Status := lPostedHourLine.Status::Open;
        lPostedHourLine."Cost Plus Entry Created" := FALSE;
        lPostedHourLine."Supplying Company" := '';
        lPostedHourLine."Receiving Company" := ICEntryRec."Receiving Company";
        lPostedHourLine.INSERT;

        IF ProjSetup."Posting Days Mandatory" THEN BEGIN
          lPostedHourHeader.SETRANGE(Year, Year);
          lPostedHourHeader.SETRANGE(Week, Week);
          lPostedHourHeader.SETRANGE("Employee No.", "Employee No.");
          lPostedHourHeader.SETRANGE("Document No.", "Document No.");
          lGenerateDays.SetDialog;
          lGenerateDays.RUN(lPostedHourHeader);
        END;
        PostLeaveHours(lPostedHourLine);

      END;
    END;

    PROCEDURE CheckProjStatusReceivingComp@1100485000();
    VAR
      lvProjSetupRec@1100485001 : Record 315;
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      IF ("Project No." = '') THEN
        EXIT;

      IF ("Post in Company" <> '') THEN BEGIN
        lvProjSetupRec.CHANGECOMPANY("Post in Company");
        lvProjRec.CHANGECOMPANY("Post in Company");
      END;

      lvProjSetupRec.GET;
      lvProjRec.GET("Project No.");

      IF (lvProjSetupRec."Provisions at Closure") THEN
        lvProjRec.CheckProjectStatus(-1)
      ELSE
        lvProjRec.CheckProjectStatus(0);
    END;

    PROCEDURE CheckProjElemBlockedRecComp@1100485001();
    VAR
      lvProjElemRec@1100485000 : Record 11012010;
    BEGIN
      //Call 6564
      IF ("Project No." = '') THEN
        EXIT;

      IF (Element = '') THEN
        EXIT;

      IF ("Post in Company" <> '') THEN BEGIN
        lvProjElemRec.CHANGECOMPANY("Post in Company");
      END;

      lvProjElemRec.GET("Project No.", Element);
      lvProjElemRec.CheckProjectElementBlocked;
    END;

    PROCEDURE CheckServOrderStatusReceivComp@1100525002();
    VAR
      lvServOrderRec@1100485000 : Record 11012823;
    BEGIN
      IF ("Service Order No." = '') THEN
        EXIT;

      IF ("Post in Company" <> '') THEN
        lvServOrderRec.CHANGECOMPANY("Post in Company");

      lvServOrderRec.GET("Service Order No.");
      lvServOrderRec.CheckStatus(1);
    END;

    PROCEDURE CheckPostingDateAllowed@1100485002();
    VAR
      lvUserSetupRec@1100485000 : Record 91;
      lvGLSetupRec@1100485001 : Record 98;
      lvAllowPostingFrom@1100485002 : Date;
      lvAllowPostingTo@1100485003 : Date;
    BEGIN
      IF ("Post in Company" <> '') THEN BEGIN
        lvUserSetupRec.CHANGECOMPANY("Post in Company");
        lvGLSetupRec.CHANGECOMPANY("Post in Company");
      END;

      IF USERID <> '' THEN
        IF lvUserSetupRec.GET(USERID) THEN BEGIN
          lvAllowPostingFrom := lvUserSetupRec."Allow Posting From";
          lvAllowPostingTo := lvUserSetupRec."Allow Posting To";
        END;
      IF (lvAllowPostingFrom = 0D) AND (lvAllowPostingTo = 0D) THEN BEGIN
        lvGLSetupRec.GET;
        lvAllowPostingFrom := lvGLSetupRec."Allow Posting From";
        lvAllowPostingTo := lvGLSetupRec."Allow Posting To";
      END;
      IF lvAllowPostingTo = 0D THEN
        lvAllowPostingTo := 99991231D;

      IF ("Posting Date" < lvAllowPostingFrom) OR ("Posting Date" > lvAllowPostingTo) THEN
        ERROR(Text001, TABLECAPTION, "Post in Company", "Posting Date");
    END;

    PROCEDURE CheckGlobalDimAllowed@1100525005(FieldNumber@1100525001 : Integer;ShortcutDimCode@1100525000 : Code[20]);
    VAR
      lvGLSetupRec@1100525003 : Record 98;
      GLSetupShortcutDimCode@1100525004 : ARRAY [8] OF Code[20];
      ErrorTxt@1100525002 : Text[300];
    BEGIN
      lvGLSetupRec.CHANGECOMPANY("Receiving Company");
      lvGLSetupRec.GET;

      GLSetupShortcutDimCode[1] := lvGLSetupRec."Shortcut Dimension 1 Code";
      GLSetupShortcutDimCode[2] := lvGLSetupRec."Shortcut Dimension 2 Code";
      GLSetupShortcutDimCode[3] := lvGLSetupRec."Shortcut Dimension 3 Code";
      GLSetupShortcutDimCode[4] := lvGLSetupRec."Shortcut Dimension 4 Code";
      GLSetupShortcutDimCode[5] := lvGLSetupRec."Shortcut Dimension 5 Code";
      GLSetupShortcutDimCode[6] := lvGLSetupRec."Shortcut Dimension 6 Code";
      GLSetupShortcutDimCode[7] := lvGLSetupRec."Shortcut Dimension 7 Code";
      GLSetupShortcutDimCode[8] := lvGLSetupRec."Shortcut Dimension 8 Code";

      IF GLSetupShortcutDimCode[FieldNumber] = '' THEN
        ERROR(Text002,lvGLSetupRec.TABLECAPTION);

      IF NOT DimMgt.CheckDimValueCompany(GLSetupShortcutDimCode[FieldNumber],
        ShortcutDimCode, "Receiving Company") THEN
      BEGIN
        ErrorTxt := DimMgt.GetDimErr();
        ErrorTxt := ErrorTxt + ' ' + FIELDCAPTION("Receiving Company") + ': ' + "Receiving Company";
        ERROR(ErrorTxt);
      END;
    END;

    PROCEDURE PostLeaveHours@1100485090(lPostedHourLine@1100485003 : Record 11012085);
    VAR
      LeaveLedgEntry@1100485001 : Record 11020235;
    BEGIN
      WITH GenJnlLine DO BEGIN

        IF (lPostedHourLine."Leave Type" = '') OR (lPostedHourLine."Supplying Company" <> '') THEN
          EXIT;

        IF NextLeaveEntryNo = 0 THEN BEGIN
          LeaveLedgEntry.LOCKTABLE;
          IF LeaveLedgEntry.FIND('+') THEN
            NextLeaveEntryNo := LeaveLedgEntry."Entry No.";
        END;
        NextLeaveEntryNo := NextLeaveEntryNo + 1;

        LeaveLedgEntry.INIT;
        LeaveLedgEntry."Entry No." := NextLeaveEntryNo;
        LeaveLedgEntry."Posting Date" := "Posting Date";
        LeaveLedgEntry."Document No." := "Document No.";
        IF lPostedHourLine."Leave Factor" = 0 THEN
          LeaveLedgEntry."No. of Hours" := ROUND(lPostedHourLine."Total Line")
        ELSE
          LeaveLedgEntry."No. of Hours" := ROUND(lPostedHourLine."Total Line" * lPostedHourLine."Leave Factor");
        LeaveLedgEntry."Employee No." := "Employee No.";
        LeaveLedgEntry."Leave Type" := lPostedHourLine."Leave Type";
        LeaveLedgEntry."User ID" := USERID;
        LeaveLedgEntry."Document Date" := "Posting Date";
        LeaveLedgEntry."Source Code" := "Source Code";
        LeaveLedgEntry."Reason Code" := "Reason Code";
        LeaveLedgEntry.INSERT;

      END;
    END;

    PROCEDURE CheckCompressPlantJobEntries@1100485003() : Boolean;
    BEGIN
      IF ICEntryRec."Plant Invoice" AND (ICEntryRec."Project No." <> '') AND (CompanyData."Compr. Proj.Ledg. Plant Entr.") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CompressPlantJobEntries@5819(IJobJnlLineRec@1100485001 : Record 11072008);
    VAR
      lvText11012001@1100485000 : TextConst 'ENU=Plant %1 %2';
    BEGIN
      //* Like in codeunit 80, but here also compress per documentno. (invoice) (in cu80 always one at a time)

      WITH TmpCompressJobJnlLineRec DO BEGIN
        SETRANGE("Document No.",IJobJnlLineRec."Document No.");
        SETRANGE("No.",IJobJnlLineRec."No.");
        SETRANGE("Posting Group",IJobJnlLineRec."Posting Group");
        SETRANGE("Gen. Prod. Posting Group",IJobJnlLineRec."Gen. Prod. Posting Group");
        SETRANGE("Gen. Bus. Posting Group",IJobJnlLineRec."Gen. Bus. Posting Group");
        SETRANGE("Shortcut Dimension 1 Code",IJobJnlLineRec."Shortcut Dimension 1 Code");
        SETRANGE("Shortcut Dimension 2 Code",IJobJnlLineRec."Shortcut Dimension 2 Code");
        SETRANGE("Dimension Set ID",IJobJnlLineRec."Dimension Set ID");
        IF FINDFIRST THEN BEGIN
          "Total Cost (LCY)" := "Total Cost (LCY)" + IJobJnlLineRec."Total Cost (LCY)";
          "Source Currency Total Cost" := "Source Currency Total Cost" + IJobJnlLineRec."Source Currency Total Cost";
          MODIFY;
        END ELSE BEGIN
          TRANSFERFIELDS(IJobJnlLineRec);
          "Line No." := CompressNextLineNo;
          Description := STRSUBSTNO(lvText11012001,
            ICEntryRec.FIELDCAPTION("Rental Periode to Date"), ICEntryRec."Rental Periode to Date");
          Quantity := 0;
          "Unit of Measure Code" := '';
          INSERT;
          CompressNextLineNo := CompressNextLineNo + 1;
        END;
      END;
    END;

    PROCEDURE PostCompressedPlantJobEntries@1100485006();
    BEGIN
      WITH TmpCompressJobJnlLineRec DO BEGIN
        RESET;
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            PostJobJnl.RUN(TmpCompressJobJnlLineRec);
          UNTIL NEXT = 0;
          DELETEALL;
        END;
      END;
    END;

    PROCEDURE ComplementaryWIPProj@1100525000(lvJobJnlLine@1100485004 : Record 11072008);
    VAR
      lvVendorRec@1100525003 : Record 23;
      lvVendPostGrpLedgerAccRec@1100485000 : Record 11020252;
      lvVendPostGrpRec@1100485001 : Record 93;
      lvProjTypeRec@1100485003 : Record 11012009;
      lvWIPBalanceAccount@1100525001 : Code[20];
      lvWIPAccountCosts@1100525002 : Code[20];
    BEGIN
      IF (lvJobJnlLine."Total Cost (LCY)" = 0) AND
         (lvJobJnlLine."Total Price (LCY)" = 0) THEN  //Call C-029414 n
        EXIT;

      //Call C-029414 sn
      DimMgt.GetDimValueRec(2, lvJobJnlLine."Shortcut Dimension 2 Code", DimValRec, TRUE, '');
      IF DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue THEN BEGIN
        IF (lvJobJnlLine."Total Cost (LCY)" = 0) OR
           (NOT ProjTypeRec."Post Complementary Costs") THEN
          EXIT;
      END ELSE BEGIN
        IF (lvJobJnlLine."Total Price (LCY)" = 0) OR
           (NOT ProjTypeRec."Post Complementary Revenues") THEN
          EXIT;
      END;
      //Call C-029414 en

      // vendor postinggroup should come from setup
      IF NOT ICRelationRec.GET(ICEntryRec."Supplying Company", ICEntryRec."Receiving Company") THEN
        ICRelationRec."Vendor Posting Group" := '';

      IF NOT ICEntryRec."Use IC Vendor Posting Group" THEN
        ICRelationRec."Vendor Posting Group" := '';

      IF (ICRelationRec."Vendor Posting Group" = '') AND (lvJobJnlLine.Vendor <> '') THEN
      BEGIN
        IF lvVendorRec.GET(lvJobJnlLine.Vendor) THEN    //only goes well at central management vendors
          ICRelationRec."Vendor Posting Group" := lvVendorRec."Vendor Posting Group";
      END;

      lvProjTypeRec := ProjTypeRec;
      IF (ICRelationRec."Vendor Posting Group" <> '') THEN BEGIN
        lvVendPostGrpRec.GET(ICRelationRec."Vendor Posting Group");
        lvVendPostGrpLedgerAccRec.INIT;
        IF lvVendPostGrpLedgerAccRec.GET(lvProjTypeRec.Code,lvVendPostGrpRec.Code) THEN BEGIN
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Labor" <> '' THEN
            lvProjTypeRec."Compl. WIP Acc. Labor" := lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Labor";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Material" <> '' THEN
            lvProjTypeRec."Compl. WIP Acc. Material" := lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Material";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Subc." <> '' THEN
            lvProjTypeRec."Compl. WIP Acc. Subc." := lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Subc.";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Plant" <> '' THEN
            lvProjTypeRec."Compl. WIP Acc. Plant" := lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Plant";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry" <> '' THEN
            lvProjTypeRec."Compl. WIP Acc. Sundry" := lvVendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor" <> '' THEN
            lvProjTypeRec."Compl. WIP Cover Acc. Labor" := lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material" <> '' THEN
            lvProjTypeRec."Compl. WIP Cover Acc. Material" := lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc." <> '' THEN
            lvProjTypeRec."Compl. WIP Cover Acc. Subc." := lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc.";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant" <> '' THEN
            lvProjTypeRec."Compl. WIP Cover Acc. Plant" := lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant";
          IF lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry" <> '' THEN
            lvProjTypeRec."Compl. WIP Cover Acc. Sundry" := lvVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry";
        END;
      END;

      DimMgt.GetDimValueRec(2, lvJobJnlLine."Shortcut Dimension 2 Code", DimValRec, TRUE, '');

      //Post Credit Line
      CASE DimValRec."Cost Type" OF
        DimValRec."Cost Type"::Labor:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Cover Acc. Labor");
            lvWIPBalanceAccount := lvProjTypeRec."Compl. WIP Cover Acc. Labor";
          END;
        DimValRec."Cost Type"::Material:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Cover Acc. Material");
            lvWIPBalanceAccount := lvProjTypeRec."Compl. WIP Cover Acc. Material";
          END;
        DimValRec."Cost Type"::Subcontracting:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Cover Acc. Subc.");
            lvWIPBalanceAccount := lvProjTypeRec."Compl. WIP Cover Acc. Subc.";
          END;
        DimValRec."Cost Type"::Plant:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Cover Acc. Plant");
            lvWIPBalanceAccount := lvProjTypeRec."Compl. WIP Cover Acc. Plant";
          END;
        DimValRec."Cost Type"::Sundry:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Cover Acc. Sundry");
            lvWIPBalanceAccount := lvProjTypeRec."Compl. WIP Cover Acc. Sundry";
          END;
        DimValRec."Cost Type"::Revenue:  //Call C-029414 sn
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. Revenues Account");
            lvWIPBalanceAccount:= lvProjTypeRec."Compl. Revenues Account";
          END;                         //Call C-029414 en
      END;

      //Post Debit Line
      CASE DimValRec."Cost Type" OF
        DimValRec."Cost Type"::Labor:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Acc. Labor");
            lvWIPAccountCosts := lvProjTypeRec."Compl. WIP Acc. Labor";
          END;
        DimValRec."Cost Type"::Material:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Acc. Material");
            lvWIPAccountCosts := lvProjTypeRec."Compl. WIP Acc. Material";
          END;
        DimValRec."Cost Type"::Subcontracting:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Acc. Subc.");
            lvWIPAccountCosts := lvProjTypeRec."Compl. WIP Acc. Subc.";
          END;
        DimValRec."Cost Type"::Plant:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Acc. Plant");
            lvWIPAccountCosts := lvProjTypeRec."Compl. WIP Acc. Plant";
          END;
        DimValRec."Cost Type"::Sundry:
          BEGIN
            lvProjTypeRec.TESTFIELD("Compl. WIP Acc. Sundry");
            lvWIPAccountCosts := lvProjTypeRec."Compl. WIP Acc. Sundry";
          END;
        DimValRec."Cost Type"::Revenue:       //Call C-029414 sn
          BEGIN
            lvProjTypeRec.TESTFIELD("Bal. Account Compl. Revenues");
            lvWIPAccountCosts := lvProjTypeRec."Bal. Account Compl. Revenues";
          END;                              //Call C-029414 en
      END;

      PostComplWIP(lvJobJnlLine, lvWIPBalanceAccount, lvWIPAccountCosts);
    END;

    PROCEDURE ComplementaryWIPServ@1100485005(iJobJnlLine@1100485004 : Record 11072008);
    VAR
      lvVendorRec@1100525003 : Record 23;
      VendPostGrpLedgerAccRec@1100485000 : Record 11012889;
      lvVendPostGrpRec@1100485001 : Record 93;
      lvServTypeRec@1100485003 : Record 11012814;
      lvWIPBalanceAccount@1100525001 : Code[20];
      lvWIPAccountCosts@1100525000 : Code[20];
    BEGIN
      IF (iJobJnlLine."Total Cost (LCY)" = 0) AND
         (iJobJnlLine."Total Price (LCY)" = 0) THEN  //Call C-029414 n
        EXIT;

      //Call C-029414 sn
      DimMgt.GetDimValueRec(2, iJobJnlLine."Shortcut Dimension 2 Code", DimValRec, TRUE, '');
      IF DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue THEN BEGIN
        IF (iJobJnlLine."Total Cost (LCY)" = 0) OR
           (NOT ServTypeRec."Post Complementary Costs") THEN
          EXIT;
      END ELSE BEGIN
        IF (iJobJnlLine."Total Price (LCY)" = 0) OR
           (NOT ServTypeRec."Post Complementary Revenues") THEN
          EXIT;
      END;
      //Call C-029414 en

      // vendor postinggroup should come from setup
      IF NOT ICRelationRec.GET(ICEntryRec."Supplying Company", ICEntryRec."Receiving Company") THEN
        ICRelationRec."Vendor Posting Group" := '';

      IF NOT ICEntryRec."Use IC Vendor Posting Group" THEN
        ICRelationRec."Vendor Posting Group" := '';

      IF (ICRelationRec."Vendor Posting Group" = '') AND (iJobJnlLine.Vendor <> '') THEN
      BEGIN
        IF lvVendorRec.GET(iJobJnlLine.Vendor) THEN //only goes well at central management vendors
          ICRelationRec."Vendor Posting Group" := lvVendorRec."Vendor Posting Group";
      END;

      lvServTypeRec := ServTypeRec;

      IF (ICRelationRec."Vendor Posting Group" <> '') THEN BEGIN
        lvVendPostGrpRec.GET(ICRelationRec."Vendor Posting Group");
        VendPostGrpLedgerAccRec.INIT;
        IF VendPostGrpLedgerAccRec.GET(lvServTypeRec.Code, lvVendPostGrpRec.Code) THEN BEGIN
          IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Labor" <> '' THEN
            lvServTypeRec."Compl. WIP Acc. Labor" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Labor";
          IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Material" <> '' THEN
            lvServTypeRec."Compl. WIP Acc. Material" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Material";
          IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Subc." <> '' THEN
            lvServTypeRec."Compl. WIP Acc. Subc." := VendPostGrpLedgerAccRec."Compl. WIP Acc. Subc.";
          IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Plant" <> '' THEN
            lvServTypeRec."Compl. WIP Acc. Plant" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Plant";
          IF VendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry" <> '' THEN
            lvServTypeRec."Compl. WIP Acc. Sundry" := VendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry";

          IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor" <> '' THEN
            lvServTypeRec."Compl. WIP Cover Acc. Labor" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor";
          IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material" <> '' THEN
            lvServTypeRec."Compl. WIP Cover Acc. Material" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material";
          IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc." <> '' THEN
            lvServTypeRec."Compl. WIP Cover Acc. Subc." := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc.";
          IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant" <> '' THEN
            lvServTypeRec."Compl. WIP Cover Acc. Plant" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant";
          IF VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry" <> '' THEN
            lvServTypeRec."Compl. WIP Cover Acc. Sundry" := VendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry";

        END;
      END;

      DimMgt.GetDimValueRec(2, iJobJnlLine."Shortcut Dimension 2 Code",DimValRec,TRUE,'');

      //Post Credit Line
      CASE DimValRec."Cost Type" OF
        DimValRec."Cost Type"::Labor:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Labor");
          lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Labor";
        END;
        DimValRec."Cost Type"::Material:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Material");
          lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Material";
        END;
        DimValRec."Cost Type"::Subcontracting:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Subc.");
          lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Subc.";
        END;
        DimValRec."Cost Type"::Plant:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Plant");
          lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Plant";
        END;
        DimValRec."Cost Type"::Sundry:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Sundry");
          lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Sundry";
        END;
        DimValRec."Cost Type"::Revenue:  //Call C-029414 sn
        BEGIN
          CASE ServOrderRec."Source Type" OF
          ServOrderRec."Source Type"::Call:
            BEGIN
              lvServTypeRec.TESTFIELD("Compl. Revenues Acc. Call");
              lvWIPBalanceAccount := lvServTypeRec."Compl. Revenues Acc. Call";
            END;
          ServOrderRec."Source Type"::Contract:
            BEGIN
              lvServTypeRec.TESTFIELD("Compl. Revenues Acc. Contract");
              lvWIPBalanceAccount := lvServTypeRec."Compl. Revenues Acc. Contract";
            END;
          ServOrderRec."Source Type"::Estimate:
            BEGIN
              lvServTypeRec.TESTFIELD("Compl. Revenues Acc. Estimate");
              lvWIPBalanceAccount := lvServTypeRec."Compl. Revenues Acc. Estimate";
            END;
          ServOrderRec."Source Type"::Direct:
            BEGIN
              lvServTypeRec.TESTFIELD("Compl. Revenues Acc. Other");
              lvWIPBalanceAccount := lvServTypeRec."Compl. Revenues Acc. Other";
            END;
          END;
        END;                            //Call C-029414 en

      END;

      //Post Debit Line
      CASE DimValRec."Cost Type" OF
        DimValRec."Cost Type"::Labor:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Acc. Labor");
          lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Labor";
        END;
        DimValRec."Cost Type"::Material:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Acc. Material");
          lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Material";
        END;
        DimValRec."Cost Type"::Subcontracting:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Acc. Subc.");
          lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Subc.";
        END;
        DimValRec."Cost Type"::Plant:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Acc. Plant");
          lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Plant";
        END;
        DimValRec."Cost Type"::Sundry:
        BEGIN
          lvServTypeRec.TESTFIELD("Compl. WIP Acc. Sundry");
          lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Sundry";
        END;
        DimValRec."Cost Type"::Revenue:       //Call C-029414 sn
        BEGIN
          lvServTypeRec.TESTFIELD("Bal. Account Compl. Revenues");
          lvWIPAccountCosts := lvServTypeRec."Bal. Account Compl. Revenues";
        END;                                  //Call C-029414 en
      END;

      PostComplWIP(iJobJnlLine, lvWIPBalanceAccount, lvWIPAccountCosts);
    END;

    PROCEDURE PostComplWIP@1100525003(lvJobJnlLine@1100525000 : Record 11072008;iWIPBalanceAccount@1100525002 : Code[20];iWIPAccountCosts@1100525003 : Code[20]);
    BEGIN
      WITH lvJobJnlLine DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Source Code" := "Source Code";
        GenJnlLine."Reason Code":= "Reason Code";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine."Bal. Account No." := iWIPBalanceAccount;
        GenJnlLine."Account No." := iWIPAccountCosts;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document No." := "Document No.";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := Description;
        GenJnlLine."Description 2" := "Description 2";
        GenJnlLine.VALIDATE(Amount, "Total Cost (LCY)");
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Revenue THEN   //Call C-029414 sn
          GenJnlLine.VALIDATE(Amount, "Total Price (LCY)")
        ELSE                                                             //Call C-029414 sn
          GenJnlLine.VALIDATE(Amount, "Total Cost (LCY)");
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine."Cost Component" := "Cost Component";
        GenJnlLine."Closed Project No." := "Job No.";
        GenJnlLine."Closed Service Order No." := "Service Order No.";
        GenJnlLine."Closed Service Contract No." := "Service Contract No.";
        GenJnlLine."Origin Type" :=  GenJnlLine."Origin Type"::Project;

        PostGenJnl.RunWithCheck(GenJnlLine);
      END;
    END;

    PROCEDURE ComplementaryWIPSurcharges@1100525004(lvOrigin@1100525000 : 'Project,Service';iGenJnlLineDebet@1100525002 : Record 81;iGenJnlLineCredit@1100525003 : Record 81);
    VAR
      lvProjTypeRec@1100525004 : Record 11012009;
      lvWIPBalanceAccount@1100525006 : Code[20];
      lvWIPAccountCosts@1100525005 : Code[20];
      ServVendPostGrpLedgerAccRec@1100525009 : Record 11012889;
      lvVendPostGrpRec@1100525008 : Record 93;
      lvServTypeRec@1100525010 : Record 11012814;
      JobVendPostGrpLedgerAccRec@1100525011 : Record 11020252;
    BEGIN
      ICRelationRec."Vendor Posting Group" := '';

      iGenJnlLineDebet."Shortcut Dimension 1 Code" := iGenJnlLineCredit."Shortcut Dimension 1 Code"; //** Call C-025806
      DimMgt.ValidateShortcutDimValues(1,iGenJnlLineDebet."Shortcut Dimension 1 Code",iGenJnlLineDebet."Dimension Set ID");
      IF lvOrigin = lvOrigin::Project THEN BEGIN
        lvProjTypeRec := ProjTypeRec;
        IF (ICRelationRec."Vendor Posting Group" <> '') AND
           (ICEntryRec."Use IC Vendor Posting Group") THEN BEGIN

          lvVendPostGrpRec.GET(ICRelationRec."Vendor Posting Group");
          JobVendPostGrpLedgerAccRec.INIT;
          IF JobVendPostGrpLedgerAccRec.GET(lvProjTypeRec.Code, lvVendPostGrpRec.Code) THEN BEGIN

            IF JobVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Surch." <> '' THEN
              lvProjTypeRec."Compl. WIP Cover Acc. Surch." := JobVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Surch.";
            IF JobVendPostGrpLedgerAccRec."Compl. WIP Acc. Surcharge"  <> '' THEN
              lvProjTypeRec."Compl. WIP Acc. Surcharge" := JobVendPostGrpLedgerAccRec."Compl. WIP Acc. Surcharge";

          END;
        END;

        DimMgt.GetDimValueRec(2, iGenJnlLineDebet."Shortcut Dimension 2 Code", DimValRec, TRUE, '');

        //Post Credit Line
        lvProjTypeRec.TESTFIELD("Compl. WIP Acc. Surcharge");
        lvWIPAccountCosts := lvProjTypeRec."Compl. WIP Acc. Surcharge";
        iGenJnlLineCredit."Account No." := lvWIPAccountCosts;

        PostGenJnl.RunWithoutCheck(iGenJnlLineCredit);

        //Post Debit Line
        lvProjTypeRec.TESTFIELD("Compl. WIP Cover Acc. Surch.");
        lvWIPBalanceAccount := lvProjTypeRec."Compl. WIP Cover Acc. Surch.";
        iGenJnlLineDebet."Account No." := lvWIPBalanceAccount;
        PostGenJnl.RunWithoutCheck(iGenJnlLineDebet);


      END;

      IF lvOrigin = lvOrigin::Service THEN BEGIN
        lvServTypeRec := ServTypeRec;
        IF (ICRelationRec."Vendor Posting Group" <> '') AND
           (ICEntryRec."Use IC Vendor Posting Group") THEN BEGIN

          lvVendPostGrpRec.GET(ICRelationRec."Vendor Posting Group");
          ServVendPostGrpLedgerAccRec.INIT;
          IF ServVendPostGrpLedgerAccRec.GET(lvServTypeRec.Code, lvVendPostGrpRec.Code) THEN BEGIN

      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Labor" <> '' THEN
      //        lvServTypeRec."Compl. WIP Acc. Labor" := ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Labor";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Material" <> '' THEN
      //        lvServTypeRec."Compl. WIP Acc. Material" := ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Material";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Subc." <> '' THEN
      //        lvServTypeRec."Compl. WIP Acc. Subc." := ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Subc.";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Plant" <> '' THEN
      //        lvServTypeRec."Compl. WIP Acc. Plant" := ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Plant";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry" <> '' THEN
      //        lvServTypeRec."Compl. WIP Acc. Sundry" := ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Sundry";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor" <> '' THEN
      //        lvServTypeRec."Compl. WIP Cover Acc. Labor" := ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Labor";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material" <> '' THEN
      //       lvServTypeRec."Compl. WIP Cover Acc. Material" := ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Material";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc." <> '' THEN
      //        lvServTypeRec."Compl. WIP Cover Acc. Subc." := ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Subc.";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant" <> '' THEN
      //        lvServTypeRec."Compl. WIP Cover Acc. Plant" := ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Plant";
      //      IF ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry" <> '' THEN
      //        lvServTypeRec."Compl. WIP Cover Acc. Sundry" := ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Sundry";

       // Variables below are not yet present in the table: Ledger by Serv.Type Vendor Gr. (11012889)
       //     IF ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Surch." <> '' THEN
       //       lvServTypeRec."Compl. WIP Cover Acc. Surch." := ServVendPostGrpLedgerAccRec."Compl. WIP Cover Acc. Surch.";
       //     IF ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Surcharge"  <> '' THEN
       //       lvServTypeRec."Compl. WIP Acc. Surcharge" := ServVendPostGrpLedgerAccRec."Compl. WIP Acc. Surcharge";


          END;
        END;

        DimMgt.GetDimValueRec(2, iGenJnlLineDebet."Shortcut Dimension 2 Code", DimValRec, TRUE, '');

        //Post Debit Line
        //CASE DimValRec."Cost Type" OF
        //  DimValRec."Cost Type"::Labor:
        //    BEGIN
        //      lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Labor");
        //      lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Labor";
        //    END;
        //  DimValRec."Cost Type"::Material:
        //    BEGIN
        //      lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Material");
        //      lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Material";
        //    END;
        //  DimValRec."Cost Type"::Subcontracting:
        //    BEGIN
        //      lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Subc.");
        //      lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Subc.";
        //    END;
        //  DimValRec."Cost Type"::Plant:
        //    BEGIN
        //      lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Plant");
        //      lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Plant";
        //    END;
        //  DimValRec."Cost Type"::Sundry:
        //    BEGIN
        //      lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Sundry");
        //      lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Sundry";
        //    END;
        //END;

        lvServTypeRec.TESTFIELD("Compl. WIP Cover Acc. Surch.");
        lvWIPBalanceAccount := lvServTypeRec."Compl. WIP Cover Acc. Surch.";

        iGenJnlLineDebet."Account No." := lvWIPBalanceAccount;
        PostGenJnl.RunWithoutCheck(iGenJnlLineDebet);

        //Post Credit Line
        //CASE DimValRec."Cost Type" OF
        //DimValRec."Cost Type"::Labor:
        //  BEGIN
        //    lvServTypeRec.TESTFIELD("Compl. WIP Acc. Labor");
        //    lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Labor"; //13-03-2008
        //  END;
        //DimValRec."Cost Type"::Material:
        //  BEGIN
        //    lvServTypeRec.TESTFIELD("Compl. WIP Acc. Material");
        //    lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Material";
        //  END;
        //DimValRec."Cost Type"::Subcontracting:
        //  BEGIN
        //    lvServTypeRec.TESTFIELD("Compl. WIP Acc. Subc.");
        //    lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Subc.";
        //  END;
        //DimValRec."Cost Type"::Plant:
        //  BEGIN
        //    lvServTypeRec.TESTFIELD("Compl. WIP Acc. Plant");
        //    lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Plant";
        //  END;
        //DimValRec."Cost Type"::Sundry:
        //  BEGIN
        //    lvServTypeRec.TESTFIELD("Compl. WIP Acc. Sundry");
        //    lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Sundry";
        //  END;
        //END;

        lvServTypeRec.TESTFIELD("Compl. WIP Acc. Surcharge");
        lvWIPAccountCosts := lvServTypeRec."Compl. WIP Acc. Surcharge";

        iGenJnlLineCredit."Account No." := lvWIPAccountCosts;
        PostGenJnl.RunWithoutCheck(iGenJnlLineCredit);

      END;
    END;

    PROCEDURE AssignServiceToProjectEntry@1100525006(iServJnlRec@1210190000 : Record 11012820;IRentalUnit@1100485000 : Code[20]);
    BEGIN
      WITH iServJnlRec DO BEGIN
        JobJnlLine.INIT;
        JobJnlLine."Line No." := "Line No.";
        JobJnlLine."Employee No." := "Employee No.";
        JobJnlLine."Document No." := "Document No.";
        JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
        JobJnlLine."Job No." := "Project No.";
        JobJnlLine."Rental Unit" := IRentalUnit;
        JobJnlLine."Service Order No." := "Service Order No.";
        JobJnlLine."Service Contract No." := "Service Contract No.";
        JobJnlLine."Service Location No." := "Service Location No.";
        JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        JobJnlLine."Dimension Set ID" := "Dimension Set ID";
        JobJnlLine."Source Code" := "Source Code";
        JobJnlLine."Reason Code" := "Reason Code";
        JobJnlLine."Posting Date" := "Posting Date";
        JobJnlLine.Description := Description;
        JobJnlLine."No." := "WIP Account Costs";
        JobJnlLine.Quantity := Quantity;
        JobJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        JobJnlLine."Unit Cost (LCY)" := "Unit Cost (LCY)";
        JobJnlLine."Total Cost (LCY)" := "Total Cost (LCY)";
        JobJnlLine."Currency Code" := '';
        JobJnlLine."Currency Factor" := 1;
        JobJnlLine."Unit Cost" := JobJnlLine."Unit Cost (LCY)";    //* Currency Factor is 1
        JobJnlLine."Total Cost" := JobJnlLine."Total Cost (LCY)";  //*
        JobJnlLine.Surcharge := Surcharge;
        JobJnlLine."Wage Component" := "Wage Component";
        JobJnlLine."Cost Component" := "Cost Component";
      END;
    END;

    PROCEDURE ComplementaryWIPICEntry@1100525001(lvOrigin@1100525000 : 'Project,Service';iGenJnlLine@1100525002 : Record 81);
    VAR
      lvWIPBalanceAccount@1100525006 : Code[20];
      lvWIPAccountCosts@1100525005 : Code[20];
      lvPostingSetup@1100525003 : Record 11020565;
    BEGIN
      IF lvPostingSetup.GET(iGenJnlLine."Source Code", "Supplying Company", "Receiving Company") THEN BEGIN

        //Post Debit Line
        lvPostingSetup.TESTFIELD("Prod. Account Debit");
        lvWIPBalanceAccount := lvPostingSetup."Prod. Account Debit";

        //Post Credit Line
        lvPostingSetup.TESTFIELD("Prod. Account Credit");
        lvWIPAccountCosts := lvPostingSetup."Prod. Account Credit";

        iGenJnlLine."Account No." := lvWIPBalanceAccount;
        iGenJnlLine."Bal. Account No." := lvWIPAccountCosts;

        PostGenJnl.RunWithoutCheck(iGenJnlLine);
      END;
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.SetCompany("Post in Company"); //**4PS.n
      DimMgt.SetTableID(DATABASE::"Intercompany Entry");
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1',"Line No."));
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Global Dimension 1 Code","Cost Object");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012058) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012058');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Intercompany Entry", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    LOCAL PROCEDURE GetCurrency@3(CurrencyCode@1100525001 : Code[10];VAR Currency@1100525000 : Record 4);
    BEGIN
      //** CALL C012290 new
      IF CurrencyCode = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      END ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    PROCEDURE GetAmountLCYPostInCompany@1100528400() : Decimal;
    BEGIN
      EXIT(ExchangeAmtFCYToLCYPostInCompany(Amount, FALSE));
    END;

    PROCEDURE GetPriceLCYPostInCompany@1100528401() : Decimal;
    BEGIN
      EXIT(ExchangeAmtFCYToLCYPostInCompany(Price, TRUE));
    END;

    LOCAL PROCEDURE ExchangeAmtFCYToLCYPostInCompany@1100528405(Amt@1100528400 : Decimal;IsUnitAmount@1100528405 : Boolean) : Decimal;
    VAR
      GeneralLedgerSetup@1100528401 : Record 98;
      CurrencyExchangeRate@1100528403 : Record 330;
      Currency@1100528406 : Record 4;
      CurrencyFactor@1100528402 : Decimal;
      AmtLCYPostInCompany@1100528404 : Decimal;
      RoundingPrecision@1100528407 : Decimal;
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(Amt);
      IF NOT GeneralLedgerSetup.GET THEN
        EXIT(Amt);
      IF "Currency Code" = GeneralLedgerSetup."LCY Code" THEN
        EXIT(Amt);
      IF NOT Currency.GET("Currency Code") THEN
        EXIT(Amt); // If currency cannot be found in table Currency, it is supposed to be local currency.

      CurrencyFactor := CurrencyExchangeRate.ExchangeRate(
        0, '', "Posting Date", "Currency Code", "Account Type" = "Account Type"::Customer);
      IF IsUnitAmount THEN
        RoundingPrecision := GeneralLedgerSetup."Unit-Amount Rounding Precision"
      ELSE
        RoundingPrecision := GeneralLedgerSetup."Amount Rounding Precision";
      AmtLCYPostInCompany := ROUND(
        CurrencyExchangeRate.ExchangeAmtFCYToLCY(
          0, '', "Posting Date", "Currency Code", Amt, CurrencyFactor,
          "Account Type" = "Account Type"::Customer),
        RoundingPrecision);
      EXIT(AmtLCYPostInCompany);
    END;

    LOCAL PROCEDURE InsertIntercompanyLedgerEntry@1100528403(IntercompanyEntry@1100528401 : Record 11012058) : Integer;
    VAR
      IntercompanyLedgerEntry@1100528400 : Record 11229313;
    BEGIN
      IF NextIntercompanyLedgerEntryNo = 0 THEN BEGIN
        IntercompanyLedgerEntry.LOCKTABLE;
        IF IntercompanyLedgerEntry.FINDLAST THEN
          NextIntercompanyLedgerEntryNo := IntercompanyLedgerEntry."Entry No." + 1
        ELSE
          NextIntercompanyLedgerEntryNo := 1;
      END;
      IntercompanyLedgerEntry.TRANSFERFIELDS(IntercompanyEntry);
      IntercompanyLedgerEntry."Entry No." := NextIntercompanyLedgerEntryNo;
      IntercompanyLedgerEntry.INSERT;
      NextIntercompanyLedgerEntryNo := NextIntercompanyLedgerEntryNo + 1;
      EXIT(IntercompanyLedgerEntry."Entry No.");
    END;

    PROCEDURE GetICAccountNoOfCurrentCompany@1100528402() : Code[20];
    VAR
      IntercompanyRelation@1100528400 : Record 11012057;
    BEGIN
      IntercompanyRelation.GET("Supplying Company", "Receiving Company");
      EXIT(IntercompanyRelation.GetICAccountOfCurrentCompany)
    END;

    BEGIN
    END.
  }
}

