OBJECT Table 11012074 Purchase Quote Comparison Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Purchase Quote Comparison Line;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No. }
    { 15  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate;
                                                   CaptionML=ENU=Estimate No. }
    { 20  ;   ;Purchase Action     ;Code10        ;TableRelation=IF (Project No.=FILTER(<>'')) "Project Purchase Action".Code WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Estimate No.=FILTER(<>'')) "Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                                            Code=FIELD(Purchase Action));
                                                   CaptionML=ENU=Purchase Action }
    { 25  ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Cost Object,Total;
                                                   OptionString=Cost Object,Total }
    { 27  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 30  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Project No.));
                                                   CaptionML=ENU=Cost Object }
    { 40  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 50  ;   ;Quantity            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Quantity WHERE (Project No.=FIELD(Project No.),
                                                                                                 Purchase Action=FIELD(Purchase Action),
                                                                                                 Cost Object=FIELD(Cost Object),
                                                                                                 Unit of Measure=FIELD(Unit of Measure Code),
                                                                                                 Description=FIELD(Description)));
                                                   CaptionML=ENU=Quantity;
                                                   Editable=No }
    { 60  ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Measure Code }
    { 65  ;   ;Unit of Measure     ;Text10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Unit of Measure".Description WHERE (Code=FIELD(Unit of Measure Code)));
                                                   CaptionML=ENU=Unit of Measure;
                                                   Editable=No }
    { 70  ;   ;Budget              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Purchase Action=FIELD(Purchase Action),
                                                                                               Cost Object=FIELD(Cost Object),
                                                                                               Description=FIELD(Description),
                                                                                               Unit of Measure=FIELD(Unit of Measure Code)));
                                                   CaptionML=ENU=Budget;
                                                   Editable=No }
    { 71  ;   ;Total Budget        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                               Purchase Action=FIELD(Purchase Action)));
                                                   CaptionML=ENU=Total Budget;
                                                   Editable=No }
    { 80  ;   ;Present in Actual Budget;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Budget Line" WHERE (Project No.=FIELD(Project No.),
                                                                                          Purchase Action=FIELD(Purchase Action),
                                                                                          Cost Object=FIELD(Cost Object),
                                                                                          Description=FIELD(Description),
                                                                                          Unit of Measure=FIELD(Unit of Measure)));
                                                   CaptionML=ENU=Present in Actual Budget;
                                                   Editable=No }
    { 90  ;   ;Present in Quote    ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Document Type=CONST(Quote),
                                                                                            Job No.=FIELD(Project No.),
                                                                                            Purchase Action=FIELD(Purchase Action),
                                                                                            Shortcut Dimension 2 Code=FIELD(Cost Object),
                                                                                            Description=FIELD(Description),
                                                                                            Unit of Measure Code=FIELD(Unit of Measure)));
                                                   CaptionML=ENU=Present in Quote;
                                                   Editable=No }
    { 100 ;   ;Estimate Quantity   ;Decimal       ;CaptionML=ENU=Quantity Estimate;
                                                   Editable=No }
    { 110 ;   ;Estimate Amount     ;Decimal       ;CaptionML=ENU=Estimate;
                                                   Editable=No }
    { 120 ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=ENU=Element Description;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Estimate No.,Purchase Action,Type,Element,Cost Object,Description,Unit of Measure Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'ENU=Total Quote';

    PROCEDURE CreateLines@1(VAR IOQuoteCompRec@1210190005 : Record 11012074;IProject@1210190000 : Code[20];IPurchAction@1210190001 : Code[10];ITotalMode@1210190006 : Boolean;IElementLevel@1100525000 : Boolean);
    VAR
      lvBudgetLineRec@1210190002 : Record 11012001;
      lvQuoteLineRec@1210190003 : Record 39;
      lvQuoteHeadRec@1210190004 : Record 38;
      lvElementCde@1100525001 : Code[20];
    BEGIN
      // Budget Lines
      lvElementCde := ''; // Call jth
      lvBudgetLineRec.SETCURRENTKEY("Project No.", "Purchase Action");
      lvBudgetLineRec.SETRANGE("Project No.",IProject);
      lvBudgetLineRec.SETRANGE("Purchase Action",IPurchAction);
      IF lvBudgetLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF IElementLevel THEN                          // Call jth
            lvElementCde := lvBudgetLineRec.Element;      // Call jth
          IF NOT IOQuoteCompRec.GET(
                   IProject,
                   '',
                   IPurchAction,
                   IOQuoteCompRec.Type::"Cost Object",
                   lvElementCde,      // Call jth
                   lvBudgetLineRec."Cost Object",
                   lvBudgetLineRec.Description,
                   lvBudgetLineRec."Unit of Measure")
          THEN BEGIN
            IOQuoteCompRec.INIT;
            IOQuoteCompRec."Project No." := IProject;
            IOQuoteCompRec."Purchase Action" := IPurchAction;
            IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
            IOQuoteCompRec.Element := lvElementCde;       // Call jth
            IOQuoteCompRec."Cost Object" := lvBudgetLineRec."Cost Object";
            IOQuoteCompRec.Description := lvBudgetLineRec.Description;
            IOQuoteCompRec."Unit of Measure Code" := lvBudgetLineRec."Unit of Measure";
            IOQuoteCompRec.INSERT;
          END;
        UNTIL lvBudgetLineRec.NEXT = 0;
      END;

      // Purchase Quote Lines
      lvQuoteLineRec.SETCURRENTKEY("Document Type", "Job No.");
      lvQuoteLineRec.SETRANGE("Document Type",lvQuoteHeadRec."Document Type"::Quote);
      lvQuoteLineRec.SETRANGE("Job No.",IProject);
      lvQuoteLineRec.SETRANGE("Purchase Action",IPurchAction);
      IF lvQuoteLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF IElementLevel THEN                          // Call jth
            lvElementCde := lvQuoteLineRec.Element;      // Call jth
          IF NOT IOQuoteCompRec.GET(
                   IProject,
                   '',
                   IPurchAction,
                   IOQuoteCompRec.Type::"Cost Object",
                   lvElementCde,                         // Call jth
                   lvQuoteLineRec."Shortcut Dimension 2 Code",
                   lvQuoteLineRec.Description,
                   lvQuoteLineRec."Unit of Measure Code")
          THEN BEGIN
            IOQuoteCompRec.INIT;
            IOQuoteCompRec."Project No." := IProject;
            IOQuoteCompRec."Purchase Action" := IPurchAction;
            IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
            IOQuoteCompRec.Element := lvElementCde;       // Call jth
            IOQuoteCompRec."Cost Object" := lvQuoteLineRec."Shortcut Dimension 2 Code";
            IOQuoteCompRec.Description := lvQuoteLineRec.Description;
            IOQuoteCompRec."Unit of Measure Code" := lvQuoteLineRec."Unit of Measure Code";
            IOQuoteCompRec.INSERT;
          END;
        UNTIL lvQuoteLineRec.NEXT = 0;
      END;

      IF ITotalMode THEN BEGIN
        IOQuoteCompRec.INIT;
        IOQuoteCompRec."Project No." := IProject;
        IOQuoteCompRec."Purchase Action" := IPurchAction;
        IOQuoteCompRec.Type := IOQuoteCompRec.Type::Total;
        IOQuoteCompRec.Element := '';       // Call jth
        IOQuoteCompRec."Cost Object" := '';
        IOQuoteCompRec.Description := Text001;
        IOQuoteCompRec."Unit of Measure Code" := '';
        IOQuoteCompRec.INSERT;
      END;
    END;

    PROCEDURE DeleteLines@1210190000(IProject@1210190000 : Code[20];IEstimate@1100485000 : Code[20];IPurchAction@1210190001 : Code[10]);
    VAR
      lvQuoteCompRec@1210190005 : Record 11012074;
    BEGIN
      lvQuoteCompRec.SETRANGE("Project No.",IProject);
      lvQuoteCompRec.SETRANGE("Estimate No.",IEstimate);
      lvQuoteCompRec.SETRANGE("Purchase Action",IPurchAction);
      lvQuoteCompRec.DELETEALL;
    END;

    PROCEDURE CreateLinesfromEstimate@1100485001(VAR IOQuoteCompRec@1210190005 : Record 11012074;IEstimate@1210190000 : Code[20];IPurchAction@1210190001 : Code[10];ITotalMode@1210190006 : Boolean);
    VAR
      lvEstLineRec@1210190002 : Record 11072072;
      lvQuoteLineRec@1210190003 : Record 39;
      lvQuoteHeadRec@1210190004 : Record 38;
      lvRcpLineRec@1100485003 : Record 11072075;
      LoopCount@1100485000 : Integer;
      lvCostObject@1100485001 : Code[20];
      lvFactor@1100485002 : Decimal;
      EstimateLineTotal@1100525000 : Record 11072077;
    BEGIN
      // Estimate Lines
      lvEstLineRec.SETRANGE("Estimate No.",IEstimate);
      FOR LoopCount := 1 TO 3 DO BEGIN
        CASE LoopCount OF
          1: lvEstLineRec.SETRANGE("Purchase Action Mat.",IPurchAction);
          2: lvEstLineRec.SETRANGE("Purchase Action Subc.",IPurchAction);
          3: lvEstLineRec.SETRANGE("Purchase Action Plant",IPurchAction);
        END;
        IF lvEstLineRec.FINDSET THEN BEGIN
          REPEAT
            IF NOT EstimateLineTotal.GET(lvEstLineRec."Estimate No.", lvEstLineRec."Sub-Estimate No.", lvEstLineRec."Part Group", lvEstLineRec.Part, lvEstLineRec."Line No.") THEN
              EstimateLineTotal.INIT;  //db, 31-03-16: use tables of new estimate module
            CASE LoopCount OF
              1: BEGIN
                   IF (lvEstLineRec."Cost Object Price" <> '') AND (lvEstLineRec."Cost Type (Price)" = lvEstLineRec."Cost Type (Price)"::Material) THEN BEGIN
                     lvCostObject := lvEstLineRec."Cost Object Price";
                   END ELSE BEGIN
                     lvCostObject := GetAdmiCodeCostobject(LoopCount, lvEstLineRec.Admicode);
                   END;
                 END;
              2: BEGIN
                   IF (lvEstLineRec."Cost Object Price" <> '') AND (lvEstLineRec."Cost Type (Price)" = lvEstLineRec."Cost Type (Price)"::Subcontracting) THEN BEGIN
                     lvCostObject := lvEstLineRec."Cost Object Price";
                   END ELSE BEGIN
                     lvCostObject := GetAdmiCodeCostobject(LoopCount, lvEstLineRec.Admicode);
                   END;
                 END;
              3: BEGIN
                   IF (lvEstLineRec."Cost Object Price" <> '') AND (lvEstLineRec."Cost Type (Price)" = lvEstLineRec."Cost Type (Price)"::Plant) THEN BEGIN
                     lvCostObject := lvEstLineRec."Cost Object Price";
                   END ELSE BEGIN
                     lvCostObject := GetAdmiCodeCostobject(LoopCount, lvEstLineRec.Admicode);
                   END;
                 END;
            END;
            IF lvCostObject <> '' THEN BEGIN
              IF NOT IOQuoteCompRec.GET(
                       '',
                       IEstimate,
                       IPurchAction,
                       IOQuoteCompRec.Type::"Cost Object",
                       '',                         // Call jth
                       lvCostObject,
                       COPYSTR(lvEstLineRec.Description,1,50),
                       lvEstLineRec."Unit of Measure")
              THEN BEGIN
                IOQuoteCompRec.INIT;
                IOQuoteCompRec."Project No." := '';
                IOQuoteCompRec."Estimate No." := IEstimate;
                IOQuoteCompRec."Purchase Action" := IPurchAction;
                IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
                IOQuoteCompRec."Cost Object" := lvCostObject;
                IOQuoteCompRec.Description := COPYSTR(lvEstLineRec.Description,1,50);
                IOQuoteCompRec."Unit of Measure Code" := lvEstLineRec."Unit of Measure";

                IF lvEstLineRec."Ignore Part Quantity" THEN
                  lvFactor := 1
                ELSE
                  lvFactor := lvEstLineRec."Part Quantity";

                IOQuoteCompRec."Estimate Quantity" := lvEstLineRec."Time Quantity" * lvEstLineRec.Quantity * lvFactor;
                CASE LoopCount OF
                  1: BEGIN
                       IOQuoteCompRec."Estimate Amount" := EstimateLineTotal."Cumulative Material";
                     END;
                  2: BEGIN
                       IOQuoteCompRec."Estimate Amount" := EstimateLineTotal."Cumulative Subcontracting";
                     END;
                  3: BEGIN
                       IOQuoteCompRec."Estimate Amount" := EstimateLineTotal."Cumulative Plant";
                     END;
                END;
                IOQuoteCompRec.INSERT;
              END ELSE BEGIN
                IF lvEstLineRec."Ignore Part Quantity" THEN
                  lvFactor := 1
                ELSE
                  lvFactor := lvEstLineRec."Part Quantity";
                IOQuoteCompRec."Estimate Quantity" += lvEstLineRec."Time Quantity" * lvEstLineRec.Quantity * lvFactor;
                CASE LoopCount OF
                  1: BEGIN
                       IOQuoteCompRec."Estimate Amount" += EstimateLineTotal."Cumulative Material";
                     END;
                  2: BEGIN
                       IOQuoteCompRec."Estimate Amount" += EstimateLineTotal."Cumulative Subcontracting";
                     END;
                  3: BEGIN
                       IOQuoteCompRec."Estimate Amount" += EstimateLineTotal."Cumulative Plant";
                     END;
                END;
                IOQuoteCompRec.MODIFY;
              END;
            END;
          UNTIL lvEstLineRec.NEXT = 0;
        END;
      END;
      //

      // Recipe Lines
      lvRcpLineRec.SETRANGE("Estimate No.",IEstimate);
      FOR LoopCount := 1 TO 3 DO BEGIN
        CASE LoopCount OF
          1: lvRcpLineRec.SETRANGE("Purchase Action Mat.",IPurchAction);
          2: lvRcpLineRec.SETRANGE("Purchase Action Subc.",IPurchAction);
          3: lvRcpLineRec.SETRANGE("Purchase Action Plant",IPurchAction);
        END;
        IF lvRcpLineRec.FINDSET THEN BEGIN
          REPEAT
            CASE LoopCount OF
              1: BEGIN
                   IF (lvRcpLineRec."Cost Object Price" <> '') AND (lvRcpLineRec."Cost Type (Price)" = lvRcpLineRec."Cost Type (Price)"::Material) THEN BEGIN
                     lvCostObject := lvRcpLineRec."Cost Object Price";
                   END ELSE BEGIN
                     lvCostObject := GetAdmiCodeCostobject(LoopCount, lvRcpLineRec.Admicode);
                   END;
                 END;
              2: BEGIN
                   IF (lvRcpLineRec."Cost Object Price" <> '') AND (lvRcpLineRec."Cost Type (Price)" = lvRcpLineRec."Cost Type (Price)"::Subcontracting) THEN BEGIN
                     lvCostObject := lvRcpLineRec."Cost Object Price";
                   END ELSE BEGIN
                     lvCostObject := GetAdmiCodeCostobject(LoopCount, lvRcpLineRec.Admicode);
                   END;
                 END;
              3: BEGIN
                   IF (lvRcpLineRec."Cost Object Price" <> '') AND (lvRcpLineRec."Cost Type (Price)" = lvRcpLineRec."Cost Type (Price)"::Plant) THEN BEGIN
                     lvCostObject := lvRcpLineRec."Cost Object Price";
                   END ELSE BEGIN
                     lvCostObject := GetAdmiCodeCostobject(LoopCount, lvRcpLineRec.Admicode);
                   END;
                 END;
            END;
            IF lvCostObject <> '' THEN BEGIN
              IF NOT IOQuoteCompRec.GET(
                       '',
                       IEstimate,
                       IPurchAction,
                       IOQuoteCompRec.Type::"Cost Object",
                       '',                         // Call jth
                       lvCostObject,
                       COPYSTR(lvRcpLineRec.Description,1,50),
                       lvRcpLineRec."Unit of Measure")
              THEN BEGIN
                IOQuoteCompRec.INIT;
                IOQuoteCompRec."Project No." := '';
                IOQuoteCompRec."Estimate No." := IEstimate;
                IOQuoteCompRec."Purchase Action" := IPurchAction;
                IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
                IOQuoteCompRec."Cost Object" := lvCostObject;
                IOQuoteCompRec.Description := COPYSTR(lvRcpLineRec.Description,1,50);
                IOQuoteCompRec."Unit of Measure Code" := lvRcpLineRec."Unit of Measure";
                //IF lvRcpLineRec."Ignore Part Quantity" THEN
                  lvFactor := 1;
                //ELSE
                //  lvFactor := lvRcpLineRec."Part Quantity";
                IOQuoteCompRec."Estimate Quantity" := lvRcpLineRec."Time Quantity" * lvRcpLineRec.Quantity * lvFactor;
                CASE LoopCount OF
                  1: BEGIN
                       IOQuoteCompRec."Estimate Amount" := lvRcpLineRec."Cumulative Nett Amount";
                     END;
                  2: BEGIN
                       IOQuoteCompRec."Estimate Amount" := lvRcpLineRec."Cumulative Nett Amount";
                     END;
                  3: BEGIN
                       IOQuoteCompRec."Estimate Amount" := lvRcpLineRec."Cumulative Nett Amount";
                     END;
                END;
                IOQuoteCompRec.INSERT;
              END ELSE BEGIN
                //IF lvRcpLineRec."Ignore Part Quantity" THEN
                  lvFactor := 1;
                //ELSE
                //  lvFactor := lvRcpLineRec."Part Quantity";
                IOQuoteCompRec."Estimate Quantity" += lvRcpLineRec."Time Quantity" * lvRcpLineRec.Quantity * lvFactor;
                CASE LoopCount OF
                  1: BEGIN
                       IOQuoteCompRec."Estimate Amount" += lvRcpLineRec."Cumulative Nett Amount";
                     END;
                  2: BEGIN
                       IOQuoteCompRec."Estimate Amount" += lvRcpLineRec."Cumulative Nett Amount";
                     END;
                  3: BEGIN
                       IOQuoteCompRec."Estimate Amount" += lvRcpLineRec."Cumulative Nett Amount";
                     END;
                END;
                IOQuoteCompRec.MODIFY;
              END;
            END;
          UNTIL lvRcpLineRec.NEXT = 0;
        END;
      END;

      //Purchase Quote Lines
      lvQuoteLineRec.SETCURRENTKEY("Document Type", "Job No.");
      lvQuoteLineRec.SETRANGE("Document Type",lvQuoteHeadRec."Document Type"::Quote);
      lvQuoteLineRec.SETRANGE("Estimate No.",IEstimate);
      lvQuoteLineRec.SETRANGE("Purchase Action",IPurchAction);
      IF lvQuoteLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF NOT IOQuoteCompRec.GET(
                   '',
                   IEstimate,
                   IPurchAction,
                   IOQuoteCompRec.Type::"Cost Object",
                   '',                         // Call jth
                   lvQuoteLineRec."Shortcut Dimension 2 Code",
                   lvQuoteLineRec.Description,
                   lvQuoteLineRec."Unit of Measure Code")
          THEN BEGIN
            IOQuoteCompRec.INIT;
            IOQuoteCompRec."Project No." := '';
            IOQuoteCompRec."Estimate No." := IEstimate;
            IOQuoteCompRec."Purchase Action" := IPurchAction;
            IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
            IOQuoteCompRec."Cost Object" := lvQuoteLineRec."Shortcut Dimension 2 Code";
            IOQuoteCompRec.Description := lvQuoteLineRec.Description;
            IOQuoteCompRec."Unit of Measure Code" := lvQuoteLineRec."Unit of Measure Code";
            IOQuoteCompRec.INSERT;
          END;
        UNTIL lvQuoteLineRec.NEXT = 0;
      END;

      IF ITotalMode THEN BEGIN
        IOQuoteCompRec.INIT;
        IOQuoteCompRec."Estimate No." := IEstimate;
        IOQuoteCompRec."Purchase Action" := IPurchAction;
        IOQuoteCompRec.Type := IOQuoteCompRec.Type::Total;
        IOQuoteCompRec."Cost Object" := '';
        IOQuoteCompRec.Description := Text001;
        IOQuoteCompRec."Unit of Measure Code" := '';
        IOQuoteCompRec.INSERT;
      END;
    END;

    PROCEDURE GetAdmiCodeCostobject@1100485002(lvType@1100485000 : Integer;lvAdmicode@1100485001 : Code[20]) lvCostObject : Code[20];
    VAR
      lvAdmiCodeRec@1100485002 : Record 11012390;
    BEGIN
      lvCostObject := '';
      IF lvAdmicode = '' THEN
        EXIT;

      IF lvAdmiCodeRec.GET(lvAdmicode) THEN BEGIN
        CASE lvType OF
          1: lvCostObject := lvAdmiCodeRec."Cost Object Material";
          2: lvCostObject := lvAdmiCodeRec."Cost Object Subcontracting";
          3: lvCostObject := lvAdmiCodeRec."Cost Object Plant";
        END;
      END;
    END;

    BEGIN
    END.
  }
}

