OBJECT Table 11012148 Queued External Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               QueuedExternalDocument@1100525000 : Record 11012148;
               HigherFileNameFound@1210190000 : Boolean;
             BEGIN
               TESTFIELD(User);
               IF "Line No." = 0 THEN BEGIN
                 QueuedExternalDocument.SETRANGE(User, User);
                 IF QueuedExternalDocument.FINDLAST THEN
                   "Line No." := QueuedExternalDocument."Line No." + 1
                 ELSE
                   "Line No." := 1;
               END;
               QueuedExternalDocument.SETCURRENTKEY("Seq. No.");
               //find where in the alphabetical order this record should be inserted
               //increase Seq. No. records that are higher in the order
               IF QueuedExternalDocument.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   IF NOT HigherFileNameFound AND ("File Name" < QueuedExternalDocument."File Name") THEN BEGIN
                     "Seq. No." := QueuedExternalDocument."Seq. No.";
                     HigherFileNameFound := TRUE;
                   END;
                   IF HigherFileNameFound THEN BEGIN
                     QueuedExternalDocument."Seq. No." += 10;
                     QueuedExternalDocument.MODIFY;
                   END;
                 UNTIL QueuedExternalDocument.NEXT = 0;
                 IF NOT HigherFileNameFound THEN BEGIN
                   "Seq. No." := QueuedExternalDocument."Seq. No." + 10;
                 END;
               END ELSE BEGIN
                 "Seq. No." := 10;
               END;
             END;

    CaptionML=ENU=Queued External Document;
  }
  FIELDS
  {
    { 10  ;   ;User                ;Code50        ;CaptionML=ENU=User }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 30  ;   ;Folder              ;Text250       ;CaptionML=ENU=Folder;
                                                   Editable=No }
    { 40  ;   ;File Name           ;Text250       ;OnValidate=BEGIN
                                                                IF ("File Name" <> '') AND (Folder <> '') THEN
                                                                  IF NOT FileMgt.ClientFileExists(Folder + "File Name") THEN
                                                                    ERROR(Text001, Folder + "File Name");
                                                              END;

                                                   CaptionML=ENU=File Name;
                                                   Editable=No }
    { 50  ;   ;Seq. No.            ;Integer       ;CaptionML=ENU=Seq. No. }
    { 100 ;   ;Source              ;Option        ;CaptionML=ENU=Source;
                                                   OptionString=User,System;
                                                   Editable=No }
    { 200 ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 210 ;   ;Reference           ;Text80        ;CaptionML=ENU=Reference }
    { 220 ;   ;Subject             ;Text100       ;CaptionML=ENU=Subject }
    { 230 ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Contact No. }
    { 240 ;   ;Contact Person No.  ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Person),
                                                                                    Company No.=FIELD(Contact No.));
                                                   CaptionML=ENU=Contact Person No. }
    { 250 ;   ;Addressed to        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=ENU=Addressed to }
    { 260 ;   ;Original to         ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=ENU=Original to }
    { 270 ;   ;Document Type       ;Code10        ;TableRelation="Document Type".Type;
                                                   CaptionML=ENU=Document Type }
    { 280 ;   ;Document Category   ;Code5         ;TableRelation="Document Category";
                                                   CaptionML=ENU=Document Category }
    { 290 ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 300 ;   ;Version External Doc.;Text10       ;CaptionML=ENU=Document Version }
    { 310 ;   ;Modification Date   ;Date          ;CaptionML=ENU=Modification Date }
    { 320 ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 330 ;   ;Scale               ;Text20        ;CaptionML=ENU=Scale }
    { 340 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=" ,Concept,Provisional,Definite,Expired";
                                                   OptionString=[ ,Concept,Provisional,Definite,Expired] }
    { 350 ;   ;Content             ;BLOB          ;CaptionML=ENU=Content }
  }
  KEYS
  {
    {    ;User,Line No.                           ;Clustered=Yes }
    {    ;Seq. No.                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1199197400 : TextConst 'ENU=File ''%1'' does not exist.';
      FileMgt@1100525500 : Codeunit 419;

    PROCEDURE RegisterDocument@1199197400(InitialDocumentProperties@1199197400 : Record 11012746;Relate@1100525006 : Boolean;RelateToType@1100525005 : 'Document,Purchase Quote,Purchase Order,Try-out Quote,Blanket Order,,Plant Transport Order,Plant Exit Order,Service Order,Sales Invoice,Sales Cr.Memo,Posted Sales Invoice,Posted Sales Cr.Memo';RelateToCode@1100525004 : Code[20];VAR oErrorMessage@1100525002 : Text[250];VAR oDocumentProperties@1100525003 : Record 11012746) : Boolean;
    VAR
      QueuedDocumentLink@1199197401 : Record 11125736;
      DocumentLink@1199197402 : Record 11012747;
      DocumentRelation@1100525007 : Record 11012407;
      DocumentProperties@1100409000 : Record 11012746;
      ExternalDocumentManagement@1199197404 : Codeunit 11012403;
      FolderAndFile@1210190000 : Text[250];
    BEGIN
      //insert the document properties
      oDocumentProperties.TRANSFERFIELDS(InitialDocumentProperties);
      oDocumentProperties."No." := '';
      FillDocPropsFromQueuedExtDoc(oDocumentProperties);
      oDocumentProperties.INSERT(TRUE);
      FillModDateFromQueuedExtDoc(oDocumentProperties);

      //copy the file and modify the file location to the target location
      IF "File Name" <> '' THEN BEGIN
        FolderAndFile := Folder + "File Name"; //call 26655
        ExternalDocumentManagement.RegisterFile(FolderAndFile, oDocumentProperties."Document Type");
        oDocumentProperties.VALIDATE(File, FolderAndFile); //call 26655
        oDocumentProperties.MODIFY(TRUE);
      END;

      //create the document links
      QueuedDocumentLink.SETRANGE(User, USERID);
      IF QueuedDocumentLink.FINDFIRST THEN
        REPEAT
          DocumentLink.TRANSFERFIELDS(QueuedDocumentLink);
          DocumentLink."Document No." := oDocumentProperties."No.";
          DocumentLink."Internal Company" := oDocumentProperties."Internal Company";
          DocumentLink.INSERT(TRUE);
        UNTIL QueuedDocumentLink.NEXT = 0;

      //create document relations if needed
      IF Relate THEN BEGIN
        DocumentRelation."Document Type" := RelateToType;
        DocumentRelation."No." := RelateToCode;
        DocumentRelation.VALIDATE("Related Document No.", oDocumentProperties."No.");  //this validates also determines the field Photo
        DocumentRelation."Print Photo" := DocumentRelation.Photo; //this is for Kimmenade that wants to print photos
        DocumentRelation."Seq. No." := "Seq. No.";
        DocumentRelation.Description := oDocumentProperties.Description;
        DocumentRelation."Send by E-Mail" := TRUE;
        IF oDocumentProperties.FileCanBeConvertedToPDF THEN
          DocumentRelation.Print := TRUE;
        DocumentRelation.INSERT(TRUE);

        IF RelateToType = RelateToType::Document THEN BEGIN
          IF DocumentProperties.GET(RelateToCode) THEN BEGIN
            DocumentRelation."Document Type" := RelateToType;
            DocumentRelation."No." := oDocumentProperties."No.";
            DocumentRelation.VALIDATE("Related Document No.", RelateToCode);
            DocumentRelation."Print Photo" := DocumentRelation.Photo;
            DocumentRelation.Description := DocumentProperties.Description;
            DocumentRelation."Send by E-Mail" := TRUE;
            IF DocumentProperties.FileCanBeConvertedToPDF THEN
              DocumentRelation.Print := TRUE;
            DocumentRelation.INSERT(TRUE);
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillDocPropsFromQueuedExtDoc@1100528402(VAR DocumentProperties@1100528400 : Record 11012746);
    BEGIN
      IF Description <> '' THEN
        DocumentProperties.Description := Description;
      IF Reference <> '' THEN
        DocumentProperties.Reference := Reference;
      IF Subject <> '' THEN
        DocumentProperties.Subject := Subject;
      IF "Contact No." <> '' THEN
        DocumentProperties.VALIDATE("Contact No.", "Contact No.");
      IF "Contact Person No." <> '' THEN
        DocumentProperties.VALIDATE("Contact Person No.", "Contact Person No.");
      IF "Addressed to" <> '' THEN
        DocumentProperties."Addressed To" := "Addressed to";
      IF "Original to" <> '' THEN
        DocumentProperties."Original To" := "Original to";
      IF "Document Type" <> '' THEN
        DocumentProperties."Document Type" := "Document Type";
      IF "Document Category" <> '' THEN
        DocumentProperties."Document Category" := "Document Category";
      IF "Document Date" <> 0D THEN
        DocumentProperties."Document Date" := "Document Date";
      IF "Version External Doc." <> '' THEN
        DocumentProperties."Version External Doc." := "Version External Doc.";
      IF "Document No." <> '' THEN
        DocumentProperties."Document No." := "Document No.";
      IF Scale <> '' THEN
        DocumentProperties.Scale := Scale;
      IF Status <> Status::" " THEN
        DocumentProperties.Status := Status;
    END;

    PROCEDURE FillModDateFromQueuedExtDoc@1100528700(DocumentProperties@1100528700 : Record 11012746);
    VAR
      DocumentModificationDate@1100528701 : Record 11012406;
    BEGIN
      IF "Modification Date" <> 0D THEN BEGIN
        DocumentModificationDate."Document No." := DocumentProperties."No.";
        DocumentModificationDate."Line No." := DocumentModificationDate.GetNextFreeLineNo(DocumentModificationDate."Document No.");
        DocumentModificationDate.Date := "Modification Date";
        DocumentModificationDate.INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

