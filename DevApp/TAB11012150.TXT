OBJECT Table 11012150 Estimate Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               IF "Rates Based On" = "Rates Based On"::"Rate Group" THEN BEGIN
               //TESTFIELD("Rate Group");  //db, 11-02-09: M14324
               END ELSE BEGIN
                 TESTFIELD("Rate Group", '');
               END;
               IF Converted THEN BEGIN  //DP00381
                 //db.sn, 02-06-14: C012973
                 //TESTFIELD("Rate Group", '');
                 //TESTFIELD("Rates Based On", "Rates Based On"::"Budget Rate");
                 //db.en, 02-06-14: C012973
                 TESTFIELD("Estimate Type", "Estimate Type"::Cost);
               END;
             END;

    CaptionML=ENU=Estimation Setup;
  }
  FIELDS
  {
    { 10  ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 20  ;   ;Estimate Nos.       ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Estimate Nos. }
    { 25  ;   ;Quantity Sheet Nos. ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Quantity Sheet Nos.;
                                                   Description=DP00686 }
    { 30  ;   ;Path Name Norm Groups;Text250      ;OnValidate=BEGIN
                                                                FileMgt.AddBackSlashToDirectoryName("Path Name Norm Groups");
                                                              END;

                                                   CaptionML=ENU=Path Name Norm Groups }
    { 40  ;   ;Operations          ;Text30        ;CaptionML=ENU=Operations }
    { 50  ;   ;Sub-Operations      ;Text30        ;CaptionML=ENU=Sub-Operations }
    { 60  ;   ;Sub Operation Texts ;Text30        ;CaptionML=ENU=Sub Operation Texts }
    { 70  ;   ;Operation Text Relation;Text30     ;CaptionML=ENU=Operation Text Relation }
    { 80  ;   ;Norms               ;Text30        ;CaptionML=ENU=Norms }
    { 90  ;   ;Search Directory    ;BLOB          ;CaptionML=ENU=Search Directory;
                                                   SubType=User-Defined }
    { 100 ;   ;Import Operations   ;Boolean       ;CaptionML=ENU=Import Operations }
    { 110 ;   ;Import Sub-Operations;Boolean      ;CaptionML=ENU=Import Sub-Operations }
    { 120 ;   ;Import Sub-Operation Texts;Boolean ;CaptionML=ENU=Import Sub-Operation Texts }
    { 130 ;   ;Import Operation Text Relation;Boolean;
                                                   CaptionML=ENU=Import Operation Text Relation }
    { 140 ;   ;Import Norms        ;Boolean       ;CaptionML=ENU=Import Norms }
    { 141 ;   ;Copy Experience Result;Boolean     ;CaptionML=ENU=Copy Experience Result }
    { 150 ;   ;Pathname Excel Sheets;Text250      ;OnValidate=BEGIN
                                                                FileMgt.AddBackSlashToDirectoryName("Pathname Excel Sheets");
                                                              END;

                                                   CaptionML=ENU=Pathname Excel Sheets }
    { 155 ;   ;Pathname Excel Templates;Text250   ;OnValidate=BEGIN
                                                                FileMgt.AddBackSlashToDirectoryName("Pathname Excel Templates");
                                                              END;

                                                   CaptionML=ENU=Pathname Excel Templates }
    { 160 ;   ;Part Format         ;Code20        ;CaptionML=ENU=Part Format }
    { 165 ;   ;Sub-Estimate Format ;Code20        ;CaptionML=ENU=Sub-Estimate Format }
    { 170 ;   ;Absence Value Labor ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Absence Value Labor }
    { 180 ;   ;Absence Value Material;Code20      ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Material),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Absence Value Material }
    { 190 ;   ;Absence Value Subcontracting;Code20;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Subcontracting),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Absence Value Subcontracting }
    { 200 ;   ;Absence Value Plant ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Plant),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Absence Value Plant }
    { 210 ;   ;Absence Value Sundry Cost;Code20   ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Absence Value Sundry Cost }
    { 220 ;   ;Rates Based On      ;Option        ;CaptionML=ENU=Rates Based On;
                                                   OptionCaptionML=ENU=Rate Group,Budget Rate;
                                                   OptionString=Rate Group,Budget Rate }
    { 230 ;   ;Estimate Based On   ;Option        ;CaptionML=ENU=Estimate Based On;
                                                   OptionCaptionML=ENU=Item,Cost Object;
                                                   OptionString=Item,CostObject }
    { 245 ;   ;Line Disc. Applies To;Option       ;CaptionML=ENU=Line Disc. Applies To;
                                                   OptionCaptionML=ENU=Material only, Material or Plant;
                                                   OptionString=Material only, Material or Plant }
    { 250 ;   ;Pathname Excel Estimates;Text250   ;OnValidate=BEGIN
                                                                FileMgt.AddBackSlashToDirectoryName("Pathname Excel Sheets");
                                                              END;

                                                   CaptionML=ENU=Pathname Excel Estimates }
    { 260 ;   ;Worksheet Excel Estimates;Text50   ;CaptionML=ENU=Worksheet }
    { 270 ;   ;Excel Estimate Template;Text50     ;CaptionML=ENU=Excel Estimate Template }
    { 275 ;   ;Excel Serv. Estimate Template;Text50;
                                                   CaptionML=ENU=Excel Service Estimate Template }
    { 280 ;   ;First Worksheet Data Line;Integer  ;CaptionML=ENU=First Worksheet Data Line }
    { 290 ;   ;Pathname Excel Est. Template;Text250;
                                                   CaptionML=ENU=Pathname Excel Estimate Templates }
    { 300 ;   ;Rate Group          ;Code10        ;TableRelation="Rate Group".No.;
                                                   CaptionML=ENU=Rate Group }
    { 305 ;   ;Rate Code           ;Code10        ;TableRelation=IF (Rates Based On=CONST(Budget Rate)) "Budget Rate".Code WHERE (Apply as Estimate Rate=CONST(Yes))
                                                                 ELSE IF (Rates Based On=CONST(Rate Group)) "Rate by Group"."Rate Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Rate Code }
    { 310 ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   OnValidate=BEGIN
                                                                ValidateRecipeGroup;  //db, 07-02-14: C013041
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Recipe Group }
    { 320 ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   CaptionML=ENU=Norm Group }
    { 330 ;   ;Part Group          ;Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Part));
                                                   CaptionML=ENU=Part Group }
    { 340 ;   ;Copy Part Lines     ;Boolean       ;CaptionML=ENU=Copy Part Lines }
    { 350 ;   ;Estimate Source     ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate Source }
    { 360 ;   ;Summary Source (Cost);Code10       ;TableRelation="Summary Sheet".Summary WHERE (Estimate No.=FIELD(Estimate Source),
                                                                                                Summary Type=CONST(Cost));
                                                   CaptionML=ENU=Summary Source (Cost) }
    { 361 ;   ;Summary Source (Sales);Code10      ;TableRelation="Summary Sheet".Summary WHERE (Estimate No.=FIELD(Estimate Source),
                                                                                                Summary Type=CONST(Sales));
                                                   CaptionML=ENU=Summary Source (Sales) }
    { 370 ;   ;Default Purchase Action;Boolean    ;CaptionML=ENU=Default Purchase Action from Cost Object }
    { 380 ;   ;Path Quote Comp. Excel Files;Text250;
                                                   OnValidate=BEGIN
                                                                FileMgt.AddBackSlashToDirectoryName("Path Quote Comp. Excel Files");
                                                              END;

                                                   CaptionML=ENU=Path Quote Comp. Excel Files }
    { 390 ;   ;Quantity Sheet with Relations;Boolean;
                                                   CaptionML=ENU=Estimate Quantity Sheet with extra Relations }
    { 400 ;   ;Serv. Estimate Source;Code20       ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Service Estimate Source }
    { 401 ;   ;Serv. Summary Source (Cost);Code10 ;TableRelation="Summary Sheet".Summary WHERE (Estimate No.=FIELD(Serv. Estimate Source),
                                                                                                Summary Type=CONST(Cost));
                                                   CaptionML=ENU=Service Summary Source (Cost) }
    { 402 ;   ;Serv. Summary Source (Sales);Code10;TableRelation="Summary Sheet".Summary WHERE (Estimate No.=FIELD(Serv. Estimate Source),
                                                                                                Summary Type=CONST(Sales));
                                                   CaptionML=ENU=Service Summary Source (Sales) }
    { 410 ;   ;Upd. Cost Object by Rate Code;Boolean;
                                                   CaptionML=ENU=Update Cost Object by Rate Code }
    { 420 ;   ;Estimate Type       ;Option        ;CaptionML=ENU=Estimate Type;
                                                   OptionCaptionML=ENU=Cost,Sales;
                                                   OptionString=Cost,Sales }
    { 430 ;   ;Converted           ;Boolean       ;OnValidate=BEGIN
                                                                //DP00381
                                                                IF Converted THEN BEGIN
                                                                  "Rates Based On" := "Rates Based On"::"Budget Rate";
                                                                  "Rate Group" := '';
                                                                  "Estimate Type" := "Estimate Type"::Cost;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Converted;
                                                   Description=DP00381 }
    { 440 ;   ;Surcharge % Labor   ;Decimal       ;CaptionML=ENU=Surcharge % Labor;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 441 ;   ;Surcharge % Material;Decimal       ;CaptionML=ENU=Surcharge % Material;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 442 ;   ;Surcharge % Subcontracting;Decimal ;CaptionML=ENU=Surcharge % Subcontracting;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 443 ;   ;Surcharge % Plant   ;Decimal       ;CaptionML=ENU=Surcharge % Plant;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 445 ;   ;Surcharge % Sundry  ;Decimal       ;CaptionML=ENU=Surcharge % Sundry;
                                                   BlankZero=Yes;
                                                   Description=DP00381 }
    { 450 ;   ;Norm Group (Sales)  ;Code10        ;TableRelation="Norm Group".Code;
                                                   CaptionML=ENU=Norm Group (Sales);
                                                   Description=DP00381 }
    { 460 ;   ;Item Sales Price Based On;Option   ;CaptionML=ENU=Item Sales Price Based On;
                                                   OptionCaptionML=ENU=CostPrice,Gross Price - Sales Discount;
                                                   OptionString=CostPrice,GrossMin;
                                                   Description=DP00381 }
    { 470 ;   ;Init Sales From Cost;Boolean       ;CaptionML=ENU=Iintialize Sales From Cost;
                                                   Description=DP00381 }
    { 480 ;   ;Copy Norm Group from Target;Boolean;CaptionML=ENU=Copy Norm Group from Target instead of Source }
    { 490 ;   ;Plant Rates in Hours;Boolean       ;CaptionML=ENU=Plant Rates in Hours;
                                                   Description=DP01047 }
    { 491 ;   ;Kind of Plant Rate  ;Option        ;InitValue=Intern;
                                                   CaptionML=ENU=Kind of Plant Rate;
                                                   OptionCaptionML=ENU=Intern,Extern;
                                                   OptionString=Intern,Extern;
                                                   Description=DP01047 }
    { 11128270;;Status Code Preparation;Code10    ;TableRelation="Estimate Status";
                                                   CaptionML=ENU=Status Code Preparation;
                                                   Description=EVRY }
    { 11128271;;Status Code Open   ;Code10        ;TableRelation="Estimate Status";
                                                   CaptionML=ENU=Status Code Open;
                                                   Description=EVRY }
    { 11128272;;Status Code Order  ;Code10        ;TableRelation="Estimate Status";
                                                   CaptionML=ENU=Status Code Order;
                                                   Description=EVRY }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012000 : TextConst 'ENU=Do you want to import Norm Groups ?';
      JobSetup@1210190000 : Record 315;
      FileMgt@1100525003 : Codeunit 419;

    PROCEDURE Import@2(InputRec@11012000 : Record 11012150);
    VAR
      TempBlob@1100525004 : Record 99008535;
      ImportOperations@1100525001 : XMLport 11012150;
      ImportSubOperations@1100525002 : XMLport 11012151;
      ImportSubOperationTexts@1100525006 : XMLport 11012152;
      ImportOperationTextRelation@1100525007 : XMLport 11012153;
      ImportNormsUneto@1100525008 : XMLport 11012154;
      IStream@1100525005 : InStream;
      FileName@1100525000 : Text[1024];
    BEGIN
      TESTFIELD("Path Name Norm Groups");
      IF COPYSTR("Path Name Norm Groups", STRLEN("Path Name Norm Groups"), 1) <> '\' THEN
                 "Path Name Norm Groups" := "Path Name Norm Groups" + '\';

      IF NOT CONFIRM(Text000) THEN
        EXIT;

      IF "Import Operations" THEN BEGIN
        TESTFIELD(Operations);
        FileName := "Path Name Norm Groups" + Operations;
        FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
        TempBlob.Blob.CREATEINSTREAM(IStream);
        ImportOperations.SETSOURCE(IStream);
        ImportOperations.IMPORT;
      END;

      IF "Import Sub-Operations" THEN BEGIN
        TESTFIELD("Sub-Operations");
        FileName := "Path Name Norm Groups" + "Sub-Operations";
        FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
        TempBlob.Blob.CREATEINSTREAM(IStream);
        ImportSubOperations.SETSOURCE(IStream);
        ImportSubOperations.IMPORT;
      END;

      IF "Import Sub-Operation Texts" THEN BEGIN
        TESTFIELD("Sub Operation Texts");
        FileName := "Path Name Norm Groups" + "Sub Operation Texts";
        FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
        TempBlob.Blob.CREATEINSTREAM(IStream);
        ImportSubOperationTexts.SETSOURCE(IStream);
        ImportSubOperationTexts.IMPORT;
      END;

      IF "Import Operation Text Relation" THEN BEGIN
        TESTFIELD("Operation Text Relation");
        FileName := "Path Name Norm Groups" + "Operation Text Relation";
        FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
        TempBlob.Blob.CREATEINSTREAM(IStream);
        ImportOperationTextRelation.SETSOURCE(IStream);
        ImportOperationTextRelation.IMPORT;
      END;

      IF "Import Norms" THEN BEGIN
        TESTFIELD(Norms);
        FileName := "Path Name Norm Groups" + Norms;
        FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
        TempBlob.Blob.CREATEINSTREAM(IStream);
        ImportNormsUneto.SETSOURCE(IStream);
        ImportNormsUneto.IMPORT;
      END;
    END;

    PROCEDURE LookupRecipeGroup@1100525020();
    VAR
      RecipeGroupRec@1100525000 : Record 11020580;
      EstimateGroupRec@1100525001 : Record 11012157;
    BEGIN
      //db, 07-02-14: C013041
      IF Converted THEN BEGIN
        IF PAGE.RUNMODAL(0, RecipeGroupRec) = ACTION::LookupOK THEN
          "Recipe Group":= RecipeGroupRec."No.";
      END ELSE BEGIN
        EstimateGroupRec.SETRANGE(Type, EstimateGroupRec.Type::Recipe);
        IF PAGE.RUNMODAL(0, EstimateGroupRec) = ACTION::LookupOK THEN
          "Recipe Group":= EstimateGroupRec."No.";
      END;
    END;

    PROCEDURE ValidateRecipeGroup@1100525022();
    VAR
      RecipeGroupRec@1100525000 : Record 11020580;
      EstimateGroupRec@1100525001 : Record 11012157;
    BEGIN
      //db, 07-02-14: C013041
      IF "Recipe Group" = '' THEN EXIT;

      IF Converted THEN BEGIN
        RecipeGroupRec.GET("Recipe Group");
      END ELSE BEGIN
        EstimateGroupRec.GET("Recipe Group", EstimateGroupRec.Type::Recipe);
      END;
    END;

    BEGIN
    {
      -SE EVRY-
      LAHE 121214 3 Status Code fields
    }
    END.
  }
}

