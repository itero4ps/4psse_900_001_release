OBJECT Table 11012151 Estimate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012151=d,
                TableData 11012188=rimd;
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               EstimateRAWSurcharges@1100529900 : Record 11012236;
               EstimateRAWSurcharges2@1100529901 : Record 11012236;
             BEGIN
               EstSetup.GET;
               IF "RAW Estimate" THEN BEGIN
                 CompInfoRec.GET;
                 "Contractor Name" := CompInfoRec.Name;
                 "Contractor Address" := CompInfoRec.Address; //mg, 05-12-11: M30254
                 "Contractor City" := CompInfoRec.City;
                 GWWSetup.GET;
                 "VAT Prod. Posting Group (H)" := GWWSetup."VAT Prod. Posting Group (H)";
                 "VAT Prod. Posting Group (L)" := GWWSetup."VAT Prod. Posting Group (L)";
                 "VAT Prod. Posting Group (Z)" := GWWSetup."VAT Prod. Posting Group (Z)";
                 EstimateRAWSetup.GET;
                 IF "No." = '' THEN BEGIN
                   EstimateRAWSetup.TESTFIELD("Estimate Nos.");
                   NoSeriesMgt.InitSeries(EstimateRAWSetup."Estimate Nos.",xRec."No. Series",0D,"No.","No. Series");
                 END;
                 //DP00433 sn.
                 "Surcharge % Labor" :=  EstimateRAWSetup."Surcharge % Labor";
                 "Surcharge % Material" := EstimateRAWSetup."Surcharge % Material";
                 "Surcharge % Subcontracting" := EstimateRAWSetup."Surcharge % Subcontracting";
                 "Surcharge % Plant" := EstimateRAWSetup."Surcharge % Plant";

                 EstimateRAWSurcharges.SETRANGE("Estimate No.", '');
                 REPEAT
                   EstimateRAWSurcharges2 := EstimateRAWSurcharges;
                   EstimateRAWSurcharges2."Estimate No." := "No.";
                   IF EstimateRAWSurcharges2."Global Dimension 2 Code" <> '' THEN
                     EstimateRAWSurcharges2.INSERT
                 UNTIL EstimateRAWSurcharges.NEXT = 0;
                 //DP00433 en.
               END;
               IF "No." = '' THEN BEGIN
                 EstSetup.TESTFIELD("Estimate Nos.");
                 NoSeriesMgt.InitSeries(EstSetup."Estimate Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               TESTFIELD("No.");
               "Creation Date" := TODAY;
               Fixed := FALSE;
               Finished := FALSE;
               InheritDataFromSource('');  //db, 02-02-15: C020972
               Converted := EstSetup.Converted;  //DP00381
               RateGrp := EstSetup."Rate Group";
               "Rate Code" := EstSetup."Rate Code";
               "Recipe Group" := EstSetup."Recipe Group";
               "Norm Group" := EstSetup."Norm Group";
               "Norm Group (Sales)" := EstSetup."Norm Group (Sales)";  //DP00381
               "Part Group" := EstSetup."Part Group";
               "Copy Part Lines" := EstSetup."Copy Part Lines";
               "Estimate Based On" := EstSetup."Estimate Based On";
               "Plant Rates in Hours" := EstSetup."Plant Rates in Hours";  //DP01047
               "Kind of Plant Rate" := EstSetup."Kind of Plant Rate";  //DP01047
               //mg.sn, 04-03-11: M25258
               IF NOT "RAW Estimate" THEN BEGIN
                 //DP00381.sn: default for relation; will be overruled by validate customer
                 "Surcharge % Labor" := EstSetup."Surcharge % Labor";
                 "Surcharge % Material" := EstSetup."Surcharge % Material";
                 "Surcharge % Subcontracting" := EstSetup."Surcharge % Subcontracting";
                 "Surcharge % Plant" := EstSetup."Surcharge % Plant";
                 "Surcharge % Sundry" := EstSetup."Surcharge % Sundry";
                 //DP00381.en
                 IF ("Estimate Type" = "Estimate Type"::Cost) AND (EstSetup."Estimate Type" = EstSetup."Estimate Type"::Sales) THEN
                   "Estimate Type" := EstSetup."Estimate Type";
               END;
               //mg.en, 04-03-11: M25258
               //db.sn, 13-03-15: C022058
               "Estimate Source" := EstSetup."Estimate Source";
               "Summary Source (Cost)" := EstSetup."Summary Source (Cost)";
               "Summary Source (Sales)" := EstSetup."Summary Source (Sales)";
               //db.en, 13-03-15: C022058

               //DP00381.sn
               "Item Sales Price Based On":= EstSetup."Item Sales Price Based On";  //DP00594
               //DP00381.en

               IF CustRec.GET("Customer No.") THEN BEGIN
                 "Item Sales Price Based On":= CustRec."Item Price Estimate";  //DP00381: 06-05-14 (T004718)
                 IF (CustRec."Rate Group (Nett)" <> '') AND ("Estimate Type" = "Estimate Type"::Cost) THEN
                   RateGrp := CustRec."Rate Group (Nett)";
                 IF (CustRec."Rate Group (Gross)" <> '') AND ("Estimate Type" = "Estimate Type"::Sales) THEN
                   RateGrp := CustRec."Rate Group (Gross)";
                 //db.sn, 13-03-15: C022058
                 IF (CustRec."Summary (Cost)" <> '') THEN
                   "Summary Source (Cost)" := CustRec."Summary (Cost)";
                 IF (CustRec."Summary (Sales)" <> '') THEN
                   "Summary Source (Sales)" := CustRec."Summary (Sales)";
                 //db.en, 13-03-15: C022058
               END;
               IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group" THEN BEGIN  //db, 02-06-14: C012973
                 xRec."Rate Group" := '';
                 VALIDATE("Rate Group", RateGrp);
               END;

               IF (EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Budget Rate") THEN BEGIN
                 EstRateRec.SETRANGE("Estimate No.","No.");
                 IF NOT EstRateRec.FINDFIRST THEN BEGIN
                   GetCostRate;  //DP00381
                   GetSalesRate;  //DP00381
                 END;
               END;

               IF UserSetup.GET(USERID) THEN
                 Estimator := UserSetup.Estimator;  //db, 20-12-12: C25975

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=BEGIN
               IF Fixed = xRec.Fixed THEN
                 TESTFIELD(Fixed,FALSE);
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
               "Modified by" := USERID;
             END;

    OnDelete=VAR
               SubEstRecNEW@1100525007 : Record 11072074;
               EstPartRecNEW@1100525008 : Record 11072073;
               EstLineRecNEW@1100525009 : Record 11072072;
               RcpLineRecNEW@1100525010 : Record 11072075;
               EstCodeRecNEW@1100528001 : Record 11229772;
               ChrgRecNEW@1100528000 : Record 11229771;
               TextRec@1210190005 : Record 11020595;
               QuanSheetRec@1210190006 : Record 11012186;
               QuanModelRec@1210190008 : Record 11012197;
               ModelRec@1210190009 : Record 11012196;
               RateRec@11012006 : Record 11012160;
               RespRec@11012007 : Record 11012159;
               PrinRec@1210190000 : Record 11012170;
               SumRec@11012008 : Record 11012172;
               SumLineRec@11012010 : Record 11012171;
               SumRelRec@11012011 : Record 11012173;
               EstFeatureRec@11012012 : Record 11012177;
               EstFeaturePartRec@11012013 : Record 11012178;
               ConfigPartRec@11012014 : Record 11012176;
               ConfigLevelRec@1210190003 : Record 11012191;
               ConfigRowQuanRec@1210190004 : Record 11012192;
               CompRecNEW@1100525011 : Record 11020458;
               CompQuoteRec@1210190011 : Record 11012193;
               CommLineRec@1210190002 : Record 97;
               EstimateElementRAW@1100525001 : Record 11125679;
               EstElemVATSpecRAW@1100525005 : Record 11125678;
               EstimateLineRAW@1100525000 : Record 11125680;
               CommentLineRAW@1100525012 : Record 11125684;
               QuantSheetHeader@1100525004 : Record 11020462;
               QuantRelation@1100525003 : Record 11020463;
               QuantSheetLine@1100525002 : Record 11020464;
               EstLineTotal@1100528900 : Record 11072077;
               EstPartTotal@1100525006 : Record 11229767;
               EstimateCurrExchangeRate@1100528600 : Record 11229770;
             BEGIN
               TESTFIELD(Fixed,FALSE);

               //DP00381.sn, 23-01-14
               SubEstRecNEW.SETRANGE("Estimate No.","No.");
               SubEstRecNEW.DELETEALL;

               EstPartRecNEW.SETRANGE("Estimate No.","No.");
               EstPartRecNEW.DELETEALL;

               EstPartTotal.SETRANGE("Estimate No.", "No.");
               EstPartTotal.DELETEALL;

               EstLineRecNEW.SETRANGE("Estimate No.","No.");
               EstLineRecNEW.DELETEALL;

               EstLineTotal.SETRANGE("Estimate No.","No.");
               EstLineTotal.DELETEALL;
               //DP00381.en, 23-01-14

               IF "No." <> '' THEN BEGIN
                 //DP00381.sn, 23-01-14
                 RcpLineRecNEW.SETRANGE("Estimate No.","No.");
                 RcpLineRecNEW.DELETEALL;
                 //DP00381.en, 23-01-14

                 TextRec.SETRANGE("Table Name",TextRec."Table Name"::Estimate);
                 TextRec.SETRANGE("Estimate No.","No.");
                 TextRec.DELETEALL;

                 ChrgRecNEW.SETRANGE("Estimate No.","No.");
                 ChrgRecNEW.DELETEALL;

                 EstCodeRecNEW.SETRANGE("Estimate No.","No.");
                 EstCodeRecNEW.DELETEALL;
               END;

               QuanSheetRec.SETRANGE("Estimate No.","No.");
               QuanSheetRec.DELETEALL;

               QuanModelRec.SETRANGE("Estimate No.","No.");
               QuanModelRec.DELETEALL;

               ModelRec.SETRANGE("Estimate No.","No.");
               ModelRec.DELETEALL;

               RateRec.SETRANGE("Estimate No.","No.");
               RateRec.DELETEALL(TRUE);  //db, 08-11-12: C003765 (delete RateByDate)

               RespRec.SETRANGE("Estimate No.","No.");
               RespRec.DELETEALL;

               PrinRec.SETRANGE("Estimate No.","No.");
               PrinRec.DELETEALL;

               SumRec.SETRANGE("Estimate No.","No.");
               SumRec.DELETEALL;

               SumLineRec.SETRANGE("Estimate No.","No.");
               SumLineRec.DELETEALL;

               SumRelRec.SETRANGE("Estimate No.","No.");
               SumRelRec.DELETEALL;

               EstFeatureRec.SETRANGE("Estimate No.","No.");
               EstFeatureRec.DELETEALL;

               EstFeaturePartRec.SETRANGE("Estimate No.","No.");
               EstFeaturePartRec.DELETEALL;

               //DP00381.sn, 23-01-14
               CompRecNEW.SETRANGE("Estimate No.","No.");
               CompRecNEW.DELETEALL;
               //DP00381.en, 23-01-14

               CompQuoteRec.SETRANGE("Estimate No.","No.");
               CompQuoteRec.DELETEALL;

               ConfigPartRec.SETRANGE("Estimate No.","No.");
               ConfigPartRec.DELETEALL;

               ConfigLevelRec.SETRANGE("Estimate No.","No.");
               ConfigLevelRec.DELETEALL;

               ConfigRowQuanRec.SETRANGE("Estimate No.","No.");
               ConfigRowQuanRec.DELETEALL;

               CommLineRec.SETRANGE("Table Name",CommLineRec."Table Name"::Estimate);
               CommLineRec.SETRANGE("No.","No.");
               CommLineRec.DELETEALL;

               IF TryOutRec.READPERMISSION THEN BEGIN
                 TryOutRec.SETCURRENTKEY("Estimate No.");
                 TryOutRec.SETRANGE("Estimate No.", "No.");
                 IF TryOutRec.FINDSET(TRUE,FALSE) THEN BEGIN
                   REPEAT
                     IF (TryOutRec."Project No." = '') AND
                        (TryOutRec."Service Location No." = '') AND
                        (TryOutRec."Service Contract No." = '') AND
                        (TryOutRec."Service Order No." = '') THEN BEGIN
                       TryOutRec.DELETE(TRUE);
                     END ELSE BEGIN
                       TryOutRec."Estimate No." := '';
                       TryOutRec.MODIFY(TRUE);
                     END;
                   UNTIL TryOutRec.NEXT = 0;
                 END;
               END;

               IF "RAW Estimate" THEN BEGIN
                 EstimateElementRAW.SETRANGE("Estimate No.", "No.");
                 EstimateElementRAW.DELETEALL;

                 EstimateLineRAW.SETRANGE("Estimate No.", "No.");
                 EstimateLineRAW.DELETEALL;

                 EstElemVATSpecRAW.SETRANGE("Estimate No.", "No.");
                 EstElemVATSpecRAW.DELETEALL;   //db, 08-09-10

                 CommentLineRAW.SETFILTER("Table No.", '%1|%2', DATABASE::"Estimate Element (RAW)",  DATABASE::"Estimate Line (RAW)");
                 CommentLineRAW.SETRANGE("Estimate No.", "No.");
                 CommentLineRAW.DELETEALL;
               END;

               QuantSheetHeader.SETRANGE("Estimate No.","No.");
               QuantSheetHeader.DELETEALL;

               QuantSheetLine.SETRANGE("Estimate No.","No.");
               QuantSheetLine.DELETEALL;

               QuantRelation.SETRANGE("Estimate No.","No.");
               QuantRelation.DELETEALL;

               EstimateCurrExchangeRate.SETRANGE("Estimate No.","No.");
               EstimateCurrExchangeRate.DELETEALL;
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
               "Modified by" := USERID;
             END;

    CaptionML=ENU=Estimate;
    LookupPageID=Page11012160;
    DrillDownPageID=Page11012160;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF "RAW Estimate" THEN BEGIN
                                                                    EstimateRAWSetup.GET;
                                                                    NoSeriesMgt.TestManual(EstimateRAWSetup."Estimate Nos.");
                                                                  END ELSE BEGIN
                                                                    EstSetup.GET;
                                                                    NoSeriesMgt.TestManual(EstSetup."Estimate Nos.");
                                                                  END;
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Description)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 10  ;   ;Status              ;Code10        ;TableRelation="Estimate Status";
                                                   CaptionML=ENU=Status }
    { 12  ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date;
                                                   Editable=No }
    { 13  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                  FIELDERROR("Starting Date",STRSUBSTNO(Text000,FIELDCAPTION("Ending Date")));
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 14  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
                                                                  FIELDERROR("Ending Date",STRSUBSTNO(Text001,FIELDCAPTION("Starting Date")));
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 15  ;   ;Tender Date         ;Date          ;CaptionML=ENU=Tender Date }
    { 16  ;   ;Register Date       ;Date          ;CaptionML=ENU=Register Date }
    { 20  ;   ;Responsible Employee;Code20        ;TableRelation=Resource;
                                                   CaptionML=ENU=Responsible Employee }
    { 28  ;   ;Modified by         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserCode@1210190000 : Code[50];
                                                              UserMgt@1210190001 : Codeunit 418;
                                                            BEGIN
                                                              UserCode := "Modified by";
                                                              UserMgt.LookupUserID(UserCode);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified by;
                                                   Editable=No }
    { 29  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Estimate),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 50  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                EstPrincRec@11012000 : Record 11012170;
                                                              BEGIN
                                                                IF ("Customer No." <> xRec."Customer No.") AND ("Customer No." <> '') THEN BEGIN
                                                                  CustRec.GET("Customer No.");

                                                                  IF "RAW Estimate" THEN BEGIN
                                                                    CustRec.TESTFIELD("VAT Bus. Posting Group");
                                                                    "VAT Bus. Posting Group" := CustRec."VAT Bus. Posting Group";
                                                                  END;

                                                                  //db.sn, 13-03-15: C022058
                                                                  IF (CustRec."Summary (Cost)" <> '') THEN
                                                                    "Summary Source (Cost)" := CustRec."Summary (Cost)";
                                                                  IF (CustRec."Summary (Sales)" <> '') THEN
                                                                    "Summary Source (Sales)" := CustRec."Summary (Sales)";
                                                                  //db.en, 13-03-15: C022058

                                                                  "Customer Disc. Group" := CustRec."Customer Disc. Group";
                                                                  //db.sn, 09-03-15: C017681
                                                                  VALIDATE("Purch Discount Term Group 1", CustRec."Purch Discount Term Group");
                                                                  VALIDATE("Sales Discount Term Group 1", CustRec."Sales Discount Term Group");
                                                                  //db.en, 09-03-15: C017681
                                                                //"Reference Date (Item)" := CustRec."Reference Date (Item)";
                                                                  //DP00381.sn
                                                                  "Item Sales Price Based On":= CustRec."Item Price Estimate";  //db, 06-05-14 (T004718)
                                                                  IF NOT "RAW Estimate" THEN BEGIN //DP00433
                                                                    //db, 06-05-14: T004687 (seperate surcharges for Estimate and CostPlusEntry)
                                                                    VALIDATE("Surcharge % Labor", CustRec."Surcharge % Labor (Est)");
                                                                    VALIDATE("Surcharge % Material", CustRec."Surcharge % Material (Est)");
                                                                    VALIDATE("Surcharge % Subcontracting", CustRec."Surcharge % Subcontr. (Est)");
                                                                    VALIDATE("Surcharge % Plant", CustRec."Surcharge % Plant (Est)");
                                                                    VALIDATE("Surcharge % Sundry", CustRec."Surcharge % Sundry (Est)");
                                                                  END;
                                                                  GetSalesRate;
                                                                  //DP00381.en
                                                                  IF NOT EstPrincRec.GET("No.", "Customer No.") THEN BEGIN
                                                                    EstPrincRec.INIT;
                                                                    EstPrincRec."Estimate No." := "No.";
                                                                    EstPrincRec.Principal := "Customer No.";
                                                                    EstPrincRec.INSERT;
                                                                  END;

                                                                  ContBusRel.RESET;
                                                                  ContBusRel.SETCURRENTKEY("Link to Table", "No.");
                                                                  ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
                                                                  ContBusRel.SETRANGE("No.", "Customer No.");
                                                                  IF ContBusRel.FINDFIRST THEN
                                                                    IF ContRec.GET(ContBusRel."Contact No.") THEN BEGIN
                                                                      ContRec.TESTFIELD(Blocked, FALSE);
                                                                      "Contact No." := ContBusRel."Contact No.";
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Customer No. }
    { 51  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 52  ;   ;Type                ;Code10        ;TableRelation=Type;
                                                   CaptionML=ENU=Type }
    { 53  ;   ;Customer Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Customer Name;
                                                   Editable=No }
    { 58  ;   ;Name                ;Text50        ;CaptionML=ENU=Name;
                                                   Editable=Yes }
    { 59  ;   ;Address             ;Text50        ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=Address;
                                                   Editable=Yes }
    { 60  ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2;
                                                   Editable=Yes }
    { 61  ;   ;City                ;Text30        ;FieldClass=Normal;
                                                   TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City;
                                                   Editable=Yes }
    { 63  ;   ;County              ;Text30        ;FieldClass=Normal;
                                                   CaptionML=ENU=County;
                                                   Editable=Yes }
    { 64  ;   ;Post Code           ;Code20        ;FieldClass=Normal;
                                                   TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code;
                                                   Editable=Yes }
    { 65  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 66  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 70  ;No ;Hours OLD           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Cumulative Hours" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Hours;
                                                   Editable=No }
    { 71  ;   ;Hours (RAW)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Cumulative Hours" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Hours (RAW);
                                                   Description=RAW;
                                                   Editable=No }
    { 72  ;   ;Hours (Cost)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Hours" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Hours;
                                                   Editable=No }
    { 73  ;   ;Hours (Sales)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Hours (Sales)" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Hours (Sales);
                                                   Editable=No }
    { 80  ;No ;Labor OLD           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Cumulative Labor" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Labor;
                                                   Editable=No }
    { 81  ;   ;Labor (RAW)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Cumulative Labor" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Labor (RAW);
                                                   Description=RAW;
                                                   Editable=No }
    { 82  ;   ;Labor Cost Amount   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Labor" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Labor Cost Amount;
                                                   Editable=No }
    { 83  ;   ;Labor Sales Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Labor (Sales)" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Labor Sales Amount;
                                                   Editable=No }
    { 90  ;No ;Material OLD        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Cumulative Material" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Material;
                                                   Editable=No }
    { 91  ;No ;Gross Price OLD     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Cumulative Gross Price" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Gross Price;
                                                   Editable=No }
    { 92  ;   ;Material (RAW)      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Cumulative Material" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Material (RAW);
                                                   Description=RAW;
                                                   Editable=No }
    { 95  ;   ;Material Cost Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Material" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Material Cost Amount;
                                                   Editable=No }
    { 96  ;   ;Material Sales Amount;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Material (Sales)" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Material Sales Amount;
                                                   Editable=No }
    { 100 ;No ;Subcontracting OLD  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Cumulative Subcontracting" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Subcontracting;
                                                   Editable=No }
    { 101 ;   ;Subcontracting (RAW);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Cumulative Subcontracting" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Subcontracting (RAW);
                                                   Description=RAW;
                                                   Editable=No }
    { 102 ;   ;Subcontracting Cost Amount;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Subcontracting" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Subcontracting Cost Amount;
                                                   Editable=No }
    { 103 ;   ;Subcontracting Sales Amount;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Subcontr. (Sales)" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Subcontracting Sales Amount;
                                                   Editable=No }
    { 110 ;No ;Plant OLD           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Cumulative Plant" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Plant;
                                                   Editable=No }
    { 111 ;   ;Plant (RAW)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Cumulative Plant" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Plant (RAW);
                                                   Description=RAW;
                                                   Editable=No }
    { 112 ;   ;Plant Cost Amount   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Plant" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Plant Cost Amount;
                                                   Editable=No }
    { 113 ;   ;Plant Sales Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Plant (Sales)" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Plant Sales Amount;
                                                   Editable=No }
    { 115 ;   ;Sundry (RAW)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Cumulative Sundry" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Sundry (RAW);
                                                   Description=RAW;
                                                   Editable=No }
    { 116 ;   ;Sundry Cost Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Sundry" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Sundry Cost Amount;
                                                   Editable=No }
    { 117 ;   ;Sundry Sales Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line Total"."Cumulative Sundry (Sales)" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Sundry Sales Amount;
                                                   Editable=No }
    { 120 ;No ;Total OLD           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Cumulative Total" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Total;
                                                   Editable=No }
    { 121 ;   ;Total (RAW)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Cumulative Total" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Total (RAW);
                                                   Description=RAW;
                                                   Editable=No }
    { 125 ;   ;Converted           ;Boolean       ;CaptionML=ENU=Converted }
    { 130 ;   ;Rate Group          ;Code10        ;TableRelation="Rate Group".No.;
                                                   OnValidate=VAR
                                                                EstRateRec@11012000 : Record 11012160;
                                                                RateGroupRec@11012001 : Record 11012162;
                                                                DateRateRec@1100485000 : Record 11012188;
                                                                DateRateRec2@1100485001 : Record 11012188;
                                                              BEGIN
                                                                //db.sn, 02-06-14: C012973
                                                                EstSetup.GET;
                                                                IF EstSetup."Rates Based On" <> EstSetup."Rates Based On"::"Rate Group" THEN EXIT;
                                                                //db.en, 02-06-14: C012973

                                                                IF "Rate Group" = xRec."Rate Group" THEN
                                                                  EXIT;

                                                                EstRateRec.SETRANGE("Estimate No.","No.");
                                                                IF EstRateRec.FINDFIRST THEN
                                                                  ERROR(Text002)
                                                                ELSE
                                                                  GetRateByRateGroup;  //C025953
                                                              END;

                                                   CaptionML=ENU=Rate Group }
    { 131 ;   ;Rate Code           ;Code10        ;TableRelation="Estimate Rate"."Rate Code" WHERE (Estimate No.=FIELD(No.));
                                                   CaptionML=ENU=Rate Code }
    { 140 ;   ;Recipe Group        ;Code10        ;TableRelation="Recipe Group".No.;
                                                   OnValidate=BEGIN
                                                                ValidateRecipeGroup;  //db, 07-02-14: C013041
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Recipe Group }
    { 150 ;   ;Fixed               ;Boolean       ;OnValidate=BEGIN
                                                                IF Fixed <> xRec.Fixed THEN
                                                                  IF UserSetup.GET(USERID) THEN
                                                                    IF UserSetup."No Access Estimate Fixed" THEN
                                                                      ERROR(Text11012002,FIELDCAPTION(Fixed));  //db, 25-07-14: C010030
                                                              END;

                                                   CaptionML=ENU=Fixed }
    { 180 ;   ;Estimator           ;Code20        ;TableRelation=Employee.No.;
                                                   OnValidate=BEGIN
                                                                UpdateResponsibility(FIELDNO(Estimator), xRec.Estimator, Estimator);  //db, 12-09-13: C007282
                                                              END;

                                                   CaptionML=ENU=Estimator }
    { 190 ;   ;Consultancy Firm No.;Code20        ;TableRelation=Contact.No.;
                                                   CaptionML=ENU=Consultancy Firm No. }
    { 200 ;   ;Consultancy Firm Name;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Consultancy Firm No.)));
                                                   CaptionML=ENU=Consultancy Firm Name;
                                                   Editable=No }
    { 210 ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   CaptionML=ENU=Norm Group }
    { 215 ;   ;Norm Group (Sales)  ;Code10        ;TableRelation="Norm Group".Code;
                                                   CaptionML=ENU=Norm Group (Sales) }
    { 230 ;   ;Part Group          ;Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Part));
                                                   CaptionML=ENU=Part Group }
    { 240 ;   ;Element             ;Code20        ;TableRelation="Base Element".Code;
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.", Element) THEN
                                                                      ElemRec.GET(Element);
                                                                  END ELSE
                                                                    ElemRec.GET(Element);

                                                                UpdateProjElem(1);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                                ProjElemRec.Element := Element;
                                                                IF PAGE.RUNMODAL(PAGE::"Project Element List", ProjElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ProjElemRec.Element);
                                                              END ELSE BEGIN
                                                                ElemRec.Code := Element;
                                                                IF PAGE.RUNMODAL(PAGE::Elements, ElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ElemRec.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 250 ;   ;Copy Part Lines     ;Boolean       ;CaptionML=ENU=Copy Part Lines }
    { 260 ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   OnValidate=BEGIN
                                                                UpdateProjElem(0);
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 270 ;   ;Estimate Type       ;Option        ;OnValidate=VAR
                                                                SumRec@1100485000 : Record 11012172;
                                                              BEGIN
                                                                IF "Estimate Type" <> xRec."Estimate Type" THEN BEGIN
                                                                  SumRec.SETRANGE("Estimate No.", "No.");
                                                                  SumRec.SETRANGE("Summary Type", "Estimate Type");
                                                                  IF NOT SumRec.FINDFIRST THEN BEGIN
                                                                    //db.sn, 17-09-10: M17532
                                                                    EstSetup.GET;
                                                                    IF "Estimate Type" = "Estimate Type"::Cost THEN
                                                                      "Summary Source (Cost)" := EstSetup."Summary Source (Cost)"
                                                                    ELSE
                                                                      "Summary Source (Sales)" := EstSetup."Summary Source (Sales)";
                                                                    IF CustRec.GET("Customer No.") THEN BEGIN
                                                                      IF (CustRec."Summary (Cost)" <> '') AND ("Estimate Type" = "Estimate Type"::Cost) THEN
                                                                        "Summary Source (Cost)" := CustRec."Summary (Cost)";
                                                                      IF (CustRec."Summary (Sales)" <> '') AND ("Estimate Type" = "Estimate Type"::Sales) THEN
                                                                        "Summary Source (Sales)" := CustRec."Summary (Sales)";
                                                                    END;
                                                                    //db.en, 17-09-10: M17532
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Estimate Type;
                                                   OptionCaptionML=ENU=Cost,Sales;
                                                   OptionString=Cost,Sales }
    { 280 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 290 ;   ;Finished            ;Boolean       ;CaptionML=ENU=Estimate Finished }
    { 300 ;   ;Text                ;Text250       ;CaptionML=ENU=Text }
    { 310 ;   ;Last Time Modified  ;Time          ;CaptionML=ENU=Last Time Modified }
    { 320 ;   ;Hide Zero Lines     ;Boolean       ;CaptionML=ENU=Hide Zero Lines;
                                                   Description=C025240: expired->UserSetup }
    { 330 ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                //call 28971
                                                                IF "Contact No." <> xRec."Contact No." THEN
                                                                  "Contact Person No." := '';

                                                                IF "Contact No." <> '' THEN BEGIN
                                                                  ContRec.GET("Contact No.");
                                                                  ContRec.TESTFIELD(Blocked, FALSE);
                                                                  IF (ContRec.Type = ContRec.Type::Person) AND
                                                                     (ContRec."Company No." <> '') THEN
                                                                    ERROR(Text013);
                                                                //
                                                                  ContBusRel.RESET;
                                                                  ContBusRel.SETCURRENTKEY("Contact No.", "Business Relation Code");
                                                                  ContBusRel.SETRANGE("Contact No.", "Contact No.");
                                                                  ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
                                                                  IF ContBusRel.FINDFIRST THEN
                                                                    VALIDATE("Customer No.", ContBusRel."No.")
                                                                  ELSE
                                                                    VALIDATE("Customer No.", '');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Contact No. }
    { 331 ;   ;Contact Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact No.)));
                                                   CaptionML=ENU=Contact Name;
                                                   Editable=No }
    { 340 ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Purchaser Name");
                                                              END;

                                                   CaptionML=ENU=Purchaser Code }
    { 341 ;   ;Purchaser Name      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Purchaser Code)));
                                                   CaptionML=ENU=Purchaser Name;
                                                   Editable=No }
    { 350 ;   ;Coding System       ;Code10        ;TableRelation="Coding System";
                                                   OnValidate=VAR
                                                                EstLineRec@1210190002 : Record 11072072;
                                                                RcpLineRec@1210190001 : Record 11072075;
                                                                EstCodeRecNEW@1100528000 : Record 11229772;
                                                              BEGIN
                                                                EstLineRec.SETRANGE("Estimate No.", "No.");
                                                                EstLineRec.MODIFYALL(Code, '');

                                                                RcpLineRec.SETRANGE("Estimate No.", "No.");
                                                                RcpLineRec.MODIFYALL(Code, '');

                                                                IF Converted THEN BEGIN  //db, 16-04-15: C014713
                                                                  EstCodeRecNEW.SETRANGE("Estimate No.", "No.");
                                                                  EstCodeRecNEW.SETRANGE("Coding System", "Coding System");
                                                                  IF EstCodeRecNEW.FINDSET THEN BEGIN
                                                                    REPEAT
                                                                      IF EstCodeRecNEW."Recipe Line" = 0 THEN BEGIN
                                                                        IF EstLineRec.GET(EstCodeRecNEW."Estimate No.", EstCodeRecNEW."Sub-Estimate No.",
                                                                                          EstCodeRecNEW."Part Group", EstCodeRecNEW.Part,
                                                                                          EstCodeRecNEW."Estimate Line") THEN
                                                                        BEGIN
                                                                          EstLineRec.Code := EstCodeRecNEW.Code;
                                                                          EstLineRec.MODIFY;
                                                                        END;
                                                                      END ELSE BEGIN
                                                                        IF RcpLineRec.GET(EstCodeRecNEW."Estimate No.", EstCodeRecNEW."Sub-Estimate No.",
                                                                                          EstCodeRecNEW."Part Group", EstCodeRecNEW.Part,
                                                                                          EstCodeRecNEW."Estimate Line", EstCodeRecNEW."Recipe Group",
                                                                                          EstCodeRecNEW.Recipe, EstCodeRecNEW."Recipe Line") THEN
                                                                        BEGIN
                                                                          RcpLineRec.Code := EstCodeRecNEW.Code;
                                                                          RcpLineRec.MODIFY;
                                                                        END;
                                                                      END;
                                                                    UNTIL EstCodeRecNEW.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Coding System }
    { 360 ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                UpdateEst@1100525000 : Codeunit 11012155;
                                                                UpdateMgt@1100525001 : Codeunit 11012229;
                                                                CodingSystem@1100525002 : Record 11012088;
                                                              BEGIN
                                                                TESTFIELD("Coding System");

                                                                IF Code <> '' THEN BEGIN
                                                                  CodingSystem.GET("Coding System");
                                                                  IF CodingSystem."Deviant Code allowed" = FALSE THEN BEGIN  //db, 26-06-15
                                                                    FormatMgt.SetSelection("Coding System");
                                                                    FormatMgt.FormatElem(Code,4,'');
                                                                    CodeRec.GET("Coding System", Code);
                                                                  END;
                                                                END;

                                                                MODIFY;
                                                                IF Converted THEN
                                                                  UpdateMgt.UpdateCode("No.", '', '', Code)  //DP00381
                                                                ELSE
                                                                  UpdateEst.UpdateCode("No.", '', '', Code, TRUE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Coding System");
                                                              CodeRec.SETRANGE("Coding System", "Coding System");
                                                              CodeRec.Code := Code;
                                                              IF PAGE.RUNMODAL(PAGE::"Codes per Coding System", CodeRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Code, CodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Code }
    { 370 ;   ;Estimate Based On   ;Option        ;CaptionML=ENU=Estimate Based On;
                                                   OptionCaptionML=ENU=Item,Cost Object;
                                                   OptionString=Item,CostObject }
    { 380 ;   ;Name Estimator      ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Estimator)));
                                                   CaptionML=ENU=Name Estimator;
                                                   Editable=No }
    { 390 ;   ;Reference Date (Rate);Date         ;OnValidate=VAR
                                                                lvEstRateRec@1210190000 : Record 11012160;
                                                                lvDateRateRec@1210190001 : Record 11012188;
                                                              BEGIN
                                                                lvEstRateRec.SETRANGE("Estimate No.", "No.");
                                                                IF lvEstRateRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                  REPEAT
                                                                    lvDateRateRec.SETCURRENTKEY("Estimate No.", "Rate Code", "Starting Date");
                                                                    lvDateRateRec.SETRANGE("Record Type", lvDateRateRec."Record Type"::Estimate);
                                                                    lvDateRateRec.SETRANGE("Estimate No.", lvEstRateRec."Estimate No.");
                                                                    lvDateRateRec.SETRANGE("Rate Code", lvEstRateRec."Rate Code");
                                                                    lvDateRateRec.SETRANGE("Starting Date",0D,"Reference Date (Rate)");
                                                                    IF lvDateRateRec.FINDLAST THEN BEGIN
                                                                      lvEstRateRec."Cost Rate" := lvDateRateRec."Cost Rate";
                                                                      lvEstRateRec."Sales Rate" := lvDateRateRec."Sales Rate";  //db, 02-06-14: C012973
                                                                      lvEstRateRec."Currency Code" := lvDateRateRec."Currency Code";
                                                                      lvEstRateRec."Cost Rate (FCY)" := lvDateRateRec."Cost Rate (FCY)";
                                                                      lvEstRateRec."Sales Rate (FCY)" := lvDateRateRec."Sales Rate (FCY)";
                                                                      lvEstRateRec.MODIFY(TRUE);
                                                                    END;
                                                                  UNTIL lvEstRateRec.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Reference Date Rates }
    { 400 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");  //db, 19-08-09
                                                                IF ("Global Dimension 1 Code" <> xRec."Global Dimension 1 Code") AND ("Global Dimension 1 Code" <> '') THEN BEGIN
                                                                  GetCostRate;  //DP00381
                                                                  GetSalesRate;  //DP00381
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 410 ;   ;Estimate Model Total;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Model".Quantity WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Estimate Model Total;
                                                   Editable=No }
    { 420 ;   ;Condition           ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Condition }
    { 430 ;   ;Tender No.          ;Code20        ;CaptionML=ENU=Tender No. }
    { 440 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   OnValidate=BEGIN
                                                                //db, 06-11-08
                                                                IF ServLocRec.GET("Service Location No.") THEN BEGIN
                                                                  IF "Customer No." = '' THEN BEGIN
                                                                    VALIDATE("Customer No.", ServLocRec."Customer No.");
                                                                  END ELSE BEGIN
                                                                    IF ServLocRec."Customer No." <> '' THEN
                                                                      TESTFIELD("Customer No.", ServLocRec."Customer No.");
                                                                  END;
                                                                  IF CurrFieldNo = FIELDNO("Service Location No.") THEN
                                                                    CheckAddressServiceLocation;  //db, 10-12-09: M14821
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Location No. }
    { 451 ;   ;Estimate Project    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Estimate Project" THEN
                                                                  TESTFIELD("RAW Estimate", FALSE);
                                                              END;

                                                   CaptionML=ENU=Estimate Project }
    { 460 ;   ;Contact Person No.  ;Code20        ;TableRelation=Contact WHERE (Company No.=FIELD(Contact No.),
                                                                                Type=CONST(Person),
                                                                                Blocked=CONST(No));
                                                   CaptionML=ENU=Contact Person No. }
    { 470 ;   ;Contact Person Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact Person No.)));
                                                   CaptionML=ENU=Contact Person Name;
                                                   Editable=No }
    { 480 ;   ;Reference Date (Item);Date         ;CaptionML=ENU=Reference Date Item Prices }
    { 481 ;   ;Reference Date (Company);Date      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Inventory Setup"."Reference Date (Item)");
                                                   CaptionML=ENU=Reference Date Item Prices (Company);
                                                   Editable=No }
    { 482 ;   ;Reference Date (Customer);Date     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Reference Date (Item)" WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=ENU=Reference Date Item Prices (Customer);
                                                   Editable=No }
    { 490 ;   ;Quantity Model Exist;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Model" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Quantity Model Exist;
                                                   Editable=No }
    { 500 ;   ;Estimate Source     ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate Source }
    { 510 ;   ;Summary Source (Cost);Code10       ;TableRelation="Summary Sheet".Summary WHERE (Estimate No.=FIELD(Estimate Source),
                                                                                                Summary Type=CONST(Cost));
                                                   CaptionML=ENU=Summary Source (Cost) }
    { 511 ;   ;Summary Source (Sales);Code10      ;TableRelation="Summary Sheet".Summary WHERE (Estimate No.=FIELD(Estimate Source),
                                                                                                Summary Type=CONST(Sales));
                                                   CaptionML=ENU=Summary Source (Sales) }
    { 520 ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=ENU=Customer Disc. Group }
    { 530 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   OnValidate=VAR
                                                                ServiceContractDepartment@1210190000 : Record 11012809;
                                                                ApplicationManagement@1210190001 : Codeunit 1;
                                                              BEGIN
                                                                IF ServContrRec.GET("Service Contract No.") THEN BEGIN
                                                                  IF "Customer No." = '' THEN BEGIN
                                                                    VALIDATE("Customer No.", ServContrRec."Customer No.");
                                                                  END ELSE BEGIN
                                                                    IF ServContrRec."Customer No." <> '' THEN
                                                                      TESTFIELD("Customer No.", ServContrRec."Customer No.");
                                                                  END;

                                                                  //DP00381.sn
                                                                  //db.sn, 09-03-15: C017681
                                                                  VALIDATE("Purch Discount Term Group 1", ServContrRec."Purch Discount Term Group 1");
                                                                  VALIDATE("Purch Discount Term Group 2", ServContrRec."Purch Discount Term Group 2");
                                                                  VALIDATE("Sales Discount Term Group 1", ServContrRec."Sales Discount Term Group 1");
                                                                  VALIDATE("Sales Discount Term Group 2", ServContrRec."Sales Discount Term Group 2");
                                                                  //db.en, 09-03-15: C017681
                                                                  IF NOT "RAW Estimate" THEN BEGIN //DP00433
                                                                    //db, 17-04-14: T004686+T004687 (temporary solution because of divergent surcharge estimate-cost plus)
                                                                    //VALIDATE("Surcharge % Labor", ServContrRec."Surcharge % Labor");
                                                                    //VALIDATE("Surcharge % Material", ServContrRec."Surcharge % Material");
                                                                    //VALIDATE("Surcharge % Subcontracting", ServContrRec."Surcharge % Subcontr.");
                                                                    //VALIDATE("Surcharge % Plant", ServContrRec."Surcharge % Plant");
                                                                    //VALIDATE("Surcharge % Sundry", ServContrRec."Surcharge % Sundry");
                                                                  END;
                                                                  GetSalesRate;
                                                                  //DP00381.en

                                                                  IF "Global Dimension 1 Code" <> '' THEN
                                                                    IF ServContrRec."Global Dimension 1 Code" <> "Global Dimension 1 Code" THEN //mg, 11-06-12: M34063
                                                                      IF NOT ServiceContractDepartment.GET("Service Contract No.", "Global Dimension 1 Code") THEN
                                                                        IF NOT CONFIRM(Text012, FALSE, ApplicationManagement.CaptionClassTranslate(GLOBALLANGUAGE, '1,1,1'),
                                                                          "Global Dimension 1 Code", ServiceContractDepartment.TABLECAPTION) THEN
                                                                          ERROR('');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Contract No. }
    { 540 ;   ;Copied from Cost Estimate;Code20   ;TableRelation=Estimate;
                                                   CaptionML=ENU=Copied from Cost Estimate }
    { 545 ;   ;Copied from Estimate Descr.;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.Description WHERE (No.=FIELD(Copied from Cost Estimate)));
                                                   CaptionML=ENU=Copied from Estimate Description;
                                                   Editable=No }
    { 550 ;   ;Order No. Customer  ;Text50        ;CaptionML=ENU=Order No. Customer }
    { 580 ;   ;Plant Location      ;Code20        ;TableRelation=IF (Customer No.=FILTER(<>''),
                                                                     Project No.=FILTER(<>'')) "Plant Location" WHERE (Customer No.=FIELD(Customer No.),
                                                                                                                       Project No.=FIELD(Project No.))
                                                                                                                       ELSE IF (Customer No.=FILTER(<>'')) "Plant Location" WHERE (Customer No.=FIELD(Customer No.))
                                                                                                                       ELSE IF (Project No.=FILTER(<>'')) "Plant Location" WHERE (Project No.=FIELD(Project No.))
                                                                                                                       ELSE "Plant Location";
                                                   OnValidate=VAR
                                                                PlantLocation@1100525000 : Record 11012554;
                                                              BEGIN
                                                                IF "Plant Location" <> xRec."Plant Location" THEN BEGIN
                                                                  CALCFIELDS("Transf. to Plant Need");
                                                                  TESTFIELD("Transf. to Plant Need",FALSE);
                                                                  IF "Plant Location" <> '' THEN BEGIN
                                                                    PlantLocation.GET("Plant Location");
                                                                    "Kind of Plant Rate" := PlantLocation."Kind of Rate";  //DP01047
                                                                    IF "Customer No." = '' THEN
                                                                      VALIDATE("Customer No.",PlantLocation."Customer No.");
                                                                    IF "Project No." = '' THEN
                                                                      VALIDATE("Project No.",PlantLocation."Project No.");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Location }
    { 590 ;   ;Transf. to Plant Need;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Plant Need" WHERE (Transf. from Estimate=FIELD(No.)));
                                                   CaptionML=ENU=Transf. to Plant Need;
                                                   Editable=No }
    { 600 ;   ;Requested Quote Receipt Date;Date  ;CaptionML=ENU=Requested Quote Receipt Date }
    { 610 ;   ;Vendors React before;Date          ;CaptionML=ENU=Vendors React before }
    { 620 ;   ;Purch Discount Term Group 1;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   OnValidate=BEGIN
                                                                IF "Purch Discount Term Group 1" = '' THEN BEGIN
                                                                  "Priority Purch Disc Term Grp 1" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Purch Disc Term Grp 0" := '0';
                                                                  "Priority Purch Disc Term Grp 1" := '1';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount Term Group (Customer) }
    { 621 ;   ;Purch Discount Term Group 2;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Purchase));
                                                   OnValidate=BEGIN
                                                                IF "Purch Discount Term Group 2" = '' THEN BEGIN
                                                                  "Priority Purch Disc Term Grp 2" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Purch Disc Term Grp 0" := '0';
                                                                  "Priority Purch Disc Term Grp 2" := '2';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount Term Group (Job) }
    { 625 ;   ;Priority Purch Disc Term Grp 0;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Company);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 626 ;   ;Priority Purch Disc Term Grp 1;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Customer);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 627 ;   ;Priority Purch Disc Term Grp 2;Code1;
                                                   CaptionML=ENU=Priority Purchase Discount Term Group (Job);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 630 ;   ;Sales Discount Term Group 1;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Customer),
                                                                                                   Type=FILTER(Common|Sales));
                                                   OnValidate=BEGIN
                                                                IF "Sales Discount Term Group 1" = '' THEN BEGIN
                                                                  "Priority Sales Disc Term Grp 1" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Sales Disc Term Grp 0" := '0';
                                                                  "Priority Sales Disc Term Grp 1" := '1';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Discount Sales Term Group (Customer) }
    { 631 ;   ;Sales Discount Term Group 2;Code20 ;TableRelation="Discount Term Group".Code WHERE (Level=CONST(Job),
                                                                                                   Type=FILTER(Common|Sales));
                                                   OnValidate=BEGIN
                                                                IF "Sales Discount Term Group 2" = '' THEN BEGIN
                                                                  "Priority Sales Disc Term Grp 2" := '';
                                                                END ELSE BEGIN
                                                                  "Priority Sales Disc Term Grp 0" := '0';
                                                                  "Priority Sales Disc Term Grp 2" := '2';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Discount Term Group (Job) }
    { 635 ;   ;Priority Sales Disc Term Grp 0;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Company);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 636 ;   ;Priority Sales Disc Term Grp 1;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Customer);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 637 ;   ;Priority Sales Disc Term Grp 2;Code1;
                                                   CaptionML=ENU=Priority Sales Discount Term Group (Job);
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes }
    { 640 ;   ;Full Cost/Sales Price Updated;Boolean;
                                                   CaptionML=ENU=Full Cost/Sales Price Updated }
    { 650 ;   ;Project Planning Activity Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningActivity@1100528401 : Record 11012431;
                                                                ProjectPlanningBaseActivity@1100528402 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Planning Activity Code", 20, '');
                                                                IF "Project Planning Activity Code" <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjectPlanningActivity.GET("Project No." + "Project Planning Activity Code") THEN
                                                                      ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                                  END ELSE
                                                                    ProjectPlanningBaseActivity.GET("Project Planning Activity Code");

                                                                UpdateProjPlanActCode;
                                                              END;

                                                   OnLookup=VAR
                                                              ProjectPlanningActivity@1100528401 : Record 11012431;
                                                              ProjectPlanningBaseActivity@1100528400 : Record 11012434;
                                                            BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
                                                                ProjectPlanningActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Project Planning Activity List", ProjectPlanningActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningActivity.Code);
                                                              END ELSE BEGIN
                                                                ProjectPlanningBaseActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Proj. Planning Base Activities", ProjectPlanningBaseActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningBaseActivity.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Planning Activity Code }
    { 660 ;   ;Not Posted Hours    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Not Posted Hours;
                                                   Editable=No }
    { 665 ;   ;Posted Hours        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Posted Hour Line"."Total Line" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Posted Hours;
                                                   Editable=No }
    { 670 ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                UpdateExtensionContract;  //DP00260
                                                              END;

                                                   CaptionML=ENU=Extension Contract }
    { 690 ;   ;Apply Surcharge Recipe;Boolean     ;CaptionML=ENU=Apply Surcharge Recipe }
    { 700 ;   ;Surcharge % Labor   ;Decimal       ;OnValidate=BEGIN
                                                                UpdateSurcharge(0);
                                                              END;

                                                   CaptionML=ENU=Surcharge % Labor;
                                                   BlankZero=Yes }
    { 701 ;   ;Surcharge % Material;Decimal       ;OnValidate=BEGIN
                                                                UpdateSurcharge(1);
                                                              END;

                                                   CaptionML=ENU=Surcharge % Material;
                                                   BlankZero=Yes }
    { 702 ;   ;Surcharge % Subcontracting;Decimal ;OnValidate=BEGIN
                                                                UpdateSurcharge(2);
                                                              END;

                                                   CaptionML=ENU=Surcharge % Subcontracting;
                                                   BlankZero=Yes }
    { 703 ;   ;Surcharge % Plant   ;Decimal       ;OnValidate=BEGIN
                                                                UpdateSurcharge(3);
                                                              END;

                                                   CaptionML=ENU=Surcharge % Plant;
                                                   BlankZero=Yes }
    { 704 ;   ;Surcharge % Sundry  ;Decimal       ;OnValidate=BEGIN
                                                                UpdateSurcharge(4);
                                                              END;

                                                   CaptionML=ENU=Surcharge % Sundry;
                                                   BlankZero=Yes }
    { 710 ;   ;RAW Estimate        ;Boolean       ;OnValidate=BEGIN
                                                                IF "RAW Estimate" THEN
                                                                  TESTFIELD("Estimate Project", FALSE);
                                                              END;

                                                   CaptionML=ENU=RAW Estimate;
                                                   Description=RAW }
    { 720 ;   ;Percentage (Surcharge);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD(Fixed, FALSE);
                                                                TestElementExists(FIELDNO("Percentage (Surcharge)"));
                                                                CheckPercentageAllowed(FIELDNO("Percentage (Surcharge)"));
                                                              END;

                                                   CaptionML=ENU=Percentage (Surcharge);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=RAW }
    { 721 ;   ;Percentage (Profit/Risk);Decimal   ;OnValidate=BEGIN
                                                                TESTFIELD(Fixed, FALSE);
                                                                TestElementExists(FIELDNO("Percentage (Profit/Risk)"));
                                                                CheckPercentageAllowed(FIELDNO("Percentage (Profit/Risk)"));
                                                              END;

                                                   CaptionML=ENU=Percentage (Profit/Risk);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=RAW }
    { 730 ;   ;VAT Prod. Posting Group (H);Code10 ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group (High);
                                                   Description=RAW }
    { 731 ;   ;VAT Prod. Posting Group (L);Code10 ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group (Low);
                                                   Description=RAW }
    { 732 ;   ;VAT Prod. Posting Group (Z);Code10 ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group (Zero);
                                                   Description=RAW }
    { 735 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group;
                                                   Description=RAW }
    { 737 ;   ;VAT Amount (Full)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."VAT Amount" WHERE (Estimate No.=FIELD(No.),
                                                                                                             VAT Calculation Type=CONST(Full VAT)));
                                                   CaptionML=ENU=VAT Amount (Full);
                                                   Description=RAW;
                                                   Editable=No }
    { 738 ;   ;VAT Amount (Reverse Charge);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."VAT Amount" WHERE (Estimate No.=FIELD(No.),
                                                                                                             VAT Calculation Type=CONST(Reverse Charge VAT)));
                                                   CaptionML=ENU=VAT Amount VAT Amount (Reverse Charge);
                                                   Description=RAW;
                                                   Editable=No }
    { 739 ;   ;VAT Amount (Normal) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."VAT Amount" WHERE (Estimate No.=FIELD(No.),
                                                                                                             VAT Calculation Type=CONST(Normal VAT)));
                                                   CaptionML=ENU=VAT Amount (Normal);
                                                   Description=RAW;
                                                   Editable=No }
    { 740 ;   ;Subtotal (Actual)   ;Decimal       ;CaptionML=ENU=Subtotal (Actual);
                                                   Description=RAW;
                                                   Editable=No }
    { 741 ;   ;Subtotal (Calculated);Decimal      ;CaptionML=ENU=Subtotal (Calculated);
                                                   Description=RAW;
                                                   Editable=No }
    { 750 ;   ;Contract Amount (Actual);Decimal   ;CaptionML=ENU=Contract Amount (Actual);
                                                   Description=RAW;
                                                   Editable=No }
    { 751 ;   ;Contract Amount (Calculated);Decimal;
                                                   CaptionML=ENU=Contract Amount (Calculated);
                                                   Description=RAW;
                                                   Editable=No }
    { 760 ;   ;Contractor Name     ;Text50        ;CaptionML=ENU=Contractor Name;
                                                   Description=RAW }
    { 761 ;   ;Contractor City     ;Text30        ;CaptionML=ENU=Contractor City;
                                                   Description=RAW }
    { 762 ;   ;Contractor 2 Name   ;Text50        ;CaptionML=ENU=Contractor 2 Name;
                                                   Description=RAW }
    { 763 ;   ;Contractor 2 City   ;Text30        ;CaptionML=ENU=Contractor 2 City;
                                                   Description=RAW }
    { 764 ;   ;Contractor 3 Name   ;Text50        ;CaptionML=ENU=Contractor 3 Name;
                                                   Description=RAW }
    { 765 ;   ;Contractor 3 City   ;Text30        ;CaptionML=ENU=Contractor 3 City;
                                                   Description=RAW }
    { 766 ;   ;Contractor Address  ;Text50        ;CaptionML=ENU=Contractor Address;
                                                   Description=RAW }
    { 767 ;   ;Contractor 2 Address;Text50        ;CaptionML=ENU=Contractor 2 Address;
                                                   Description=RAW }
    { 768 ;   ;Contractor 3 Address;Text50        ;CaptionML=ENU=Contractor 3 Address;
                                                   Description=RAW }
    { 770 ;   ;Construction Spec. No.;Code20      ;TableRelation="Construction Spec. (RAW)".No.;
                                                   CaptionML=ENU=Construction Spec. No.;
                                                   Description=RAW;
                                                   Editable=No }
    { 771 ;   ;Construction Spec. No. (Cust.);Text27;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Construction Spec. (RAW)"."Specification ID" WHERE (No.=FIELD(Construction Spec. No.)));
                                                   CaptionML=ENU=Construction Spec. No. (Cust.);
                                                   Description=RAW;
                                                   Editable=No }
    { 780 ;   ;Summary (Sales)     ;Code10        ;TableRelation="Summary Sheet".Summary WHERE (Estimate No.=FIELD(No.),
                                                                                                Summary Type=CONST(Sales));
                                                   CaptionML=ENU=Summary (Sales) }
    { 781 ;   ;Summary (Cost)      ;Code10        ;TableRelation="Summary Sheet".Summary WHERE (Estimate No.=FIELD(No.),
                                                                                                Summary Type=CONST(Cost));
                                                   CaptionML=ENU=Summary (Cost) }
    { 790 ;   ;Item Sales Price Based On;Option   ;CaptionML=ENU=Item Sales Price Based On;
                                                   OptionCaptionML=ENU=CostPrice,Gross Price - Sales Discount;
                                                   OptionString=CostPrice,GrossMin }
    { 800 ;   ;Plant Rates in Hours;Boolean       ;OnValidate=VAR
                                                                EstimateLineRAW@1100525000 : Record 11125680;
                                                              BEGIN
                                                                IF "RAW Estimate" THEN BEGIN  //DP01047
                                                                  EstimateLineRAW.SETRANGE("Estimate No.", "No.");
                                                                  IF EstimateLineRAW.FINDSET(TRUE) THEN BEGIN
                                                                    REPEAT
                                                                      IF NOT "Plant Rates in Hours" THEN BEGIN
                                                                        EstimateLineRAW."Norm (Plant)" := 0;
                                                                        EstimateLineRAW."Production Rate (Plant)" := 0;
                                                                        EstimateLineRAW."Hours (Plant)" := 0;
                                                                      END;
                                                                      EstimateLineRAW.DeterminePlantPrice;
                                                                      EstimateLineRAW.MODIFY;
                                                                    UNTIL EstimateLineRAW.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Rates in Hours;
                                                   Description=DP01047 }
    { 810 ;   ;Kind of Plant Rate  ;Option        ;InitValue=Intern;
                                                   CaptionML=ENU=Kind of Plant Rate;
                                                   OptionCaptionML=ENU=Intern,Extern;
                                                   OptionString=Intern,Extern;
                                                   Description=DP01047 }
    { 900 ;   ;Surcharge Amount Labor;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Surcharge Amount Labor" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Surcharge Amount Labor;
                                                   Description=RAW;
                                                   Editable=No }
    { 901 ;   ;Surcharge Amount Material;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Surcharge Amount Material" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Surcharge Amount Material;
                                                   Description=RAW;
                                                   Editable=No }
    { 902 ;   ;Surcharge Amount Subcontr.;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Surcharge Amount Subcontr." WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Surcharge Amount Subcontr.;
                                                   Description=RAW;
                                                   Editable=No }
    { 903 ;   ;Surcharge Amount Plant;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Surcharge Amount Plant" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Surcharge Amount Plant;
                                                   Description=RAW;
                                                   Editable=No }
    { 904 ;   ;Total Surcharge Amount;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line (RAW)"."Total Surcharge Amount" WHERE (Estimate No.=FIELD(No.)));
                                                   CaptionML=ENU=Total Surcharge Amount;
                                                   Description=RAW;
                                                   Editable=No }
    { 1000;   ;Expected Est. Completion Date;Date ;CaptionML=ENU=Expected Est. Completion Date;
                                                   Description=RAW }
    { 1010;   ;Report Currency Code;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                EstimatePartNEW@1100528600 : Record 11072073;
                                                              BEGIN
                                                                IF "Report Currency Code" <> xRec."Report Currency Code" THEN BEGIN
                                                                  MODIFY;
                                                                  EstimatePartNEW.SETRANGE("Estimate No.", "No.");
                                                                  IF EstimatePartNEW.FINDSET THEN
                                                                    REPEAT
                                                                      EstimatePartNEW.VALIDATE("Offer Amount");
                                                                      EstimatePartNEW.MODIFY;
                                                                    UNTIL EstimatePartNEW.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Report Currency Code }
    { 1020;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 1030;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 1040;   ;Margin % (Offer Price);Decimal     ;CaptionML=ENU=Margin % (Offer Price) }
    { 1045;   ;Markup % (Offer Price);Decimal     ;CaptionML=ENU=Markup % (Offer Price) }
    { 1050;   ;Offer Price Based On;Option        ;CaptionML=ENU=Offer Price Based On;
                                                   OptionCaptionML=ENU=Cost,Sales;
                                                   OptionString=Cost,Sales }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Customer No.                             }
    {    ;City,Address                             }
    {    ;Project No.,Element                      }
    {    ;Plant Location                           }
    {    ;Status                                   }
    {    ;Expected Est. Completion Date            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012009 : TextConst 'ENU=must occur before %1';
      Text001@11012010 : TextConst 'ENU=Must occur after  %1';
      Text002@11012011 : TextConst 'ENU=Rates already present.';
      UserSetup@1100409000 : Record 91;
      ProjSetup@1100525002 : Record 315;
      ServiceSetup@1100485000 : Record 11012800;
      EstSetup@11012000 : Record 11012150;
      GWWSetup@1100525004 : Record 11012260;
      EstimateRAWSetup@1100525003 : Record 11125673;
      CompInfoRec@1100525005 : Record 79;
      EstRec@1210190004 : Record 11012151;
      EstRateRec@1210190009 : Record 11012160;
      CustRec@1100485003 : Record 18;
      ElemRec@1210190012 : Record 11012060;
      CodeRec@1210190014 : Record 11012089;
      ProjElemRec@1210190011 : Record 11012010;
      PostCode@11012003 : Record 225;
      ContBusRel@1210190017 : Record 5054;
      ContRec@1210190016 : Record 5050;
      TryOutRec@1100485002 : Record 11012761;
      ServLocRec@1100525001 : Record 11012801;
      ServContrRec@1100525000 : Record 11012812;
      NoSeriesMgt@1210190005 : Codeunit 396;
      FormatMgt@1210190013 : Codeunit 11012022;
      RateGrp@1100485001 : Text[30];
      FirstServLoc@1100485005 : Text[30];
      LastServLoc@1100485004 : Text[30];
      Text003@1100525009 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text010@1100525006 : TextConst 'ENU=Do you want to change Address Data: \\Old: \%1 \%2 \%3 \\New: \%4 \%5 \%6';
      Text011@1100525007 : TextConst 'ENU=cannot be set because element %1 does not exist';
      DPA_Management@1100000999 : Codeunit 11012783;
      Text012@1210190000 : TextConst 'ENU=%1 %2 doesn''t exist in %3, continue?';
      Text013@1210190001 : TextConst 'ENU=Only Relations of Type Company or Person without Company allowed';
      Text014@1100529000 : TextConst 'ENU=must be zero, already estimate lines present for %1 ''%2''';
      Text999@1100525008 : TextConst 'ENU=This option is only available for estimates with 1 sub-estimate and 1 part: Estimate Index will be started.';
      Text11012002@1100409001 : TextConst 'ENU=You have no permission to change %1';

    PROCEDURE AssistEdit@2(OldEst@11012000 : Record 11012151) : Boolean;
    BEGIN
      WITH EstRec DO BEGIN
        EstRec := Rec;
        IF "RAW Estimate" THEN BEGIN
          EstimateRAWSetup.GET;
          EstimateRAWSetup.TESTFIELD("Estimate Nos.");
          IF NoSeriesMgt.SelectSeries(EstimateRAWSetup."Estimate Nos.",OldEst."No. Series","No. Series") THEN BEGIN
            NoSeriesMgt.SetSeries("No.");
            Rec := EstRec;
            EXIT(TRUE);
          END;
        END ELSE BEGIN
          EstSetup.GET;
          EstSetup.TESTFIELD("Estimate Nos.");
          IF NoSeriesMgt.SelectSeries(EstSetup."Estimate Nos.",OldEst."No. Series","No. Series") THEN BEGIN
            NoSeriesMgt.SetSeries("No.");
            Rec := EstRec;
            EXIT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1100525000 : Codeunit 408;
      DimValRec@1100525001 : Record 349;
    BEGIN
      //db, 19-08-09: M15896
      IF ShortcutDimCode = '' THEN EXIT;
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.GetDimValueRec(FieldNumber, ShortcutDimCode, DimValRec, TRUE,'');
      IF NOT DimMgt.CheckDimValue(DimValRec."Dimension Code",ShortcutDimCode) THEN
        ERROR(DimMgt.GetDimErr);
    END;

    PROCEDURE EstimatorName@3() : Text[100];
    VAR
      EmplRec@11012000 : Record 5200;
      EstNameTxt@11012001 : Text[100];
    BEGIN
      IF EmplRec.GET(Estimator) THEN
        EstNameTxt := EmplRec.FullName
      ELSE
        EstNameTxt := '';
      EXIT(EstNameTxt);
    END;

    PROCEDURE UpdateLogbook@1000000000(lvEstNo@1000000000 : Code[20]);
    VAR
      lvEstRec@1000000001 : Record 11012151;
    BEGIN
      IF lvEstRec.GET(lvEstNo) THEN BEGIN
        lvEstRec."Last Date Modified" := TODAY;
        lvEstRec."Last Time Modified" := TIME;
        lvEstRec."Modified by" := USERID;
        lvEstRec.MODIFY;
      END;
    END;

    PROCEDURE UpdateProjElem@1100485000(lvAction@1100485000 : Integer);
    VAR
      SubEstRecNew@1100525000 : Record 11072074;
    BEGIN
      IF "Project No." = '' THEN
        "Extension Contract" := '';  //DP00260

      IF Converted THEN BEGIN  //db, 04-04-14
        SubEstRecNew.SETRANGE("Estimate No.", "No.");
        IF lvAction = 0 THEN
          SubEstRecNew.SETFILTER("Project No.", '%1|%2', '', xRec."Project No.")
        ELSE
          SubEstRecNew.SETFILTER(Element, '%1|%2', '', xRec.Element);
        IF SubEstRecNew.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF lvAction = 0 THEN
              SubEstRecNew.VALIDATE("Project No.", "Project No.")
            ELSE
              SubEstRecNew.VALIDATE(Element, Element);
            IF "Project No."= '' THEN
              SubEstRecNew."Extension Contract" := '';  //DP00260
            SubEstRecNew.MODIFY;
          UNTIL SubEstRecNew.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckRateConditions@1100485012();
    VAR
      UpdateEst@1100525000 : Codeunit 11012155;
      UpdateMgt@1100525001 : Codeunit 11012229;
    BEGIN
      IF NOT CustRec.GET("Customer No.") THEN EXIT;
      EstSetup.GET;

      RateGrp := "Rate Group";
      IF (CustRec."Rate Group (Nett)" <> '') AND ("Estimate Type" = "Estimate Type"::Cost) THEN
        RateGrp := CustRec."Rate Group (Nett)";
      IF (CustRec."Rate Group (Gross)" <> '') AND ("Estimate Type" = "Estimate Type"::Sales) THEN
        RateGrp := CustRec."Rate Group (Gross)";

      IF RateGrp <> "Rate Group" THEN BEGIN
        IF Converted THEN
          UpdateMgt.UpdateRate("No.", "Rate Group", RateGrp)  //C025953
        ELSE
          UpdateEst.ReplaceRateGroup("No.", "Rate Group", RateGrp, TRUE);
        "Rate Group" := RateGrp;
      END;
    END;

    PROCEDURE LookupServiceContract@1210190007();
    VAR
      ServiceSetup@1100525000 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServContrRec.RESET;
      IF "Customer No." <> '' THEN
        ServContrRec.SETFILTER("Customer No.", '%1|%2', "Customer No.", '');
      IF NOT ServContrRec.GET("Service Contract No.") THEN ServContrRec.INIT;
      IF PAGE.RUNMODAL(PAGE::"Service Contracts List", ServContrRec) = ACTION::LookupOK THEN
        VALIDATE("Service Contract No.", ServContrRec."No.");
    END;

    PROCEDURE LookupServiceLocation@1100525000();
    BEGIN
      ServLocRec.RESET;
      IF "Service Contract No." <> '' THEN BEGIN
        ServContrRec.GET("Service Contract No.");
        ServLocRec.SETFILTER("Customer No.", ServContrRec."Customer No.");
      END ELSE BEGIN
        IF "Customer No." <> '' THEN
          ServLocRec.SETFILTER("Customer No.", '%1|%2', "Customer No.", '');
      END;

      IF NOT ServLocRec.GET("Service Location No.") THEN ServLocRec.INIT;
      IF PAGE.RUNMODAL(PAGE::"Service Location List", ServLocRec) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Service Location No.", ServLocRec."No.");
        CheckAddressServiceLocation;  //db, 10-12-09: M14821
      END;
    END;

    PROCEDURE LookupServiceOrder@1100525017();
    VAR
      ServOrderRec@1100525000 : Record 11012823;
    BEGIN
      //db, 01-07-10: M17238
      ServOrderRec.RESET;
      GetFilterTransferToServOrder(ServOrderRec);
      PAGE.RUNMODAL(0, ServOrderRec);
    END;

    PROCEDURE GetNumServiceOrder@1100525015() : Text[30];
    VAR
      ServOrderRec@1100525000 : Record 11012823;
      NumOrder@1100525002 : Integer;
    BEGIN
      //db, 01-07-10: M17238
      IF "No." = '' THEN EXIT('');  //C026176

      IF NOT ServOrderRec.READPERMISSION THEN
        EXIT('');

      ServOrderRec.RESET;
      NumOrder := GetFilterTransferToServOrder(ServOrderRec);

      IF NumOrder = 0 THEN
        EXIT('');

      IF NumOrder = 1 THEN
        EXIT(ServOrderRec."No.");

      EXIT(STRSUBSTNO('[%1]', NumOrder));
    END;

    PROCEDURE GetFilterTransferToServOrder@1100525021(VAR ServOrderRec@1100525000 : Record 11012823) NumOrder : Integer;
    VAR
      TmpOrderRec@1100525003 : TEMPORARY Record 11012823;
      SubEstRecNew@1100525001 : Record 11072074;
    BEGIN
      //db, 01-07-10: M17238
      IF Converted THEN BEGIN  //db, 04-04-14
        SubEstRecNew.SETRANGE("Estimate No.", "No.");
        SubEstRecNew.SETRANGE("Transfer to Service", SubEstRecNew."Transfer to Service"::ServOrder);
        IF SubEstRecNew.FINDSET THEN BEGIN
          REPEAT
            IF SubEstRecNew."Service Order No." <> '' THEN BEGIN
              TmpOrderRec."No." := SubEstRecNew."Service Order No.";
              IF TmpOrderRec.INSERT THEN;
            END;
          UNTIL SubEstRecNew.NEXT = 0;

          ServOrderRec.SETCURRENTKEY("Estimate No.");
          ServOrderRec.SETRANGE("Estimate No.", "No.");
          IF ServOrderRec.FINDSET THEN BEGIN
            REPEAT
              TmpOrderRec."No." := ServOrderRec."No.";
              IF TmpOrderRec.INSERT THEN;
            UNTIL ServOrderRec.NEXT = 0;
          END;
        END;
      END;

      IF TmpOrderRec.FINDFIRST THEN BEGIN
        REPEAT
          ServOrderRec."No." := TmpOrderRec."No.";
          ServOrderRec.MARK := TRUE;
          NumOrder := NumOrder + 1;
        UNTIL TmpOrderRec.NEXT = 0;
        ServOrderRec.SETCURRENTKEY("No.");
        ServOrderRec.SETRANGE("Estimate No.");  //db, 10-09-10
        ServOrderRec.MARKEDONLY(TRUE);
      END;

      EXIT(NumOrder);
    END;

    PROCEDURE CheckAddressServiceLocation@1100525003();
    BEGIN
      //db, 10-12-09: M14821
      IF (ServLocRec.Name + ServLocRec.Address + ServLocRec.City) <> (Name + Address + City) THEN BEGIN
        IF CONFIRM(Text010, TRUE,
          Name, Address, ("Post Code" + '  ' + City),
          ServLocRec.Name, ServLocRec.Address, (ServLocRec."Post Code" + '  ' + ServLocRec.City)) THEN
        BEGIN
          Address := ServLocRec.Address;
          "Address 2" := ServLocRec."Address 2";
          City := ServLocRec.City;
          "Post Code" := ServLocRec."Post Code";
          County := ServLocRec.County;
          "Country/Region Code":= ServLocRec."Country/Region Code";
          "Territory Code":= ServLocRec."Territory Code";
        END;
      END;
    END;

    PROCEDURE CalculateAdditionalCost@1100525001(iType@1100525001 : Integer;iTotal@1100525003 : Decimal) Result : Decimal;
    VAR
      lvPerc@1100525002 : Decimal;
    BEGIN
      //ISS
      IF (iType = 0) OR (iType = 1) THEN
        lvPerc := lvPerc + "Percentage (Surcharge)";
      IF (iType = 0) OR (iType = 2) THEN
        lvPerc := lvPerc + "Percentage (Profit/Risk)";

      //calculate iTotal or fixed field ?
      Result := ROUND(iTotal * (lvPerc/100));
      IF (iType = 0) THEN
        Result := iTotal + Result;
      EXIT(Result);
    END;

    PROCEDURE SafeDivision@1100525004(Numerator@1100525000 : Decimal;Denominator@1100525001 : Decimal) : Decimal;
    BEGIN
      IF Denominator = 0 THEN
        EXIT(0);
      EXIT(Numerator / Denominator);
    END;

    PROCEDURE SurchargePct@1100525005() Result : Decimal;
    BEGIN
      CALCFIELDS("Labor (RAW)", "Material (RAW)", "Subcontracting (RAW)", "Plant (RAW)", "Total Surcharge Amount");
      Result := SafeDivision("Total Surcharge Amount", "Labor (RAW)" + "Material (RAW)" + "Subcontracting (RAW)" + "Plant (RAW)") * 100;
    END;

    PROCEDURE MarginPct@1100525006() Result : Decimal;
    BEGIN
      CALCFIELDS(
        "Labor (RAW)",
        "Surcharge Amount Labor",
        "Material (RAW)",
        "Surcharge Amount Material",
        "Subcontracting (RAW)",
        "Surcharge Amount Subcontr.",
        "Plant (RAW)",
        "Surcharge Amount Plant",
        "Total Surcharge Amount");

      Result :=
        SafeDivision(
          "Total Surcharge Amount",
          "Labor (RAW)" +
          "Surcharge Amount Labor" +
          "Material (RAW)" +
          "Surcharge Amount Material" +
          "Subcontracting (RAW)" +
          "Surcharge Amount Subcontr." +
          "Plant (RAW)" +
          "Surcharge Amount Plant") * 100;
    END;

    PROCEDURE SurchargePctLabor@1100525007() : Decimal;
    BEGIN
      CALCFIELDS("Labor (RAW)", "Surcharge Amount Labor");
      EXIT(SafeDivision("Surcharge Amount Labor", "Labor (RAW)") * 100);
    END;

    PROCEDURE SurchargePctMaterial@1100525008() : Decimal;
    BEGIN
      CALCFIELDS("Material (RAW)", "Surcharge Amount Material");
      EXIT(SafeDivision("Surcharge Amount Material", "Material (RAW)") * 100);
    END;

    PROCEDURE SurchargePctSubcontracting@1100525009() : Decimal;
    BEGIN
      CALCFIELDS("Subcontracting (RAW)", "Surcharge Amount Subcontr.");
      EXIT(SafeDivision("Surcharge Amount Subcontr.", "Subcontracting (RAW)") * 100);
    END;

    PROCEDURE SurchargePctPlant@1100525010() : Decimal;
    BEGIN
      CALCFIELDS("Plant (RAW)", "Surcharge Amount Plant");
      EXIT(SafeDivision("Surcharge Amount Plant", "Plant (RAW)") * 100);
    END;

    PROCEDURE InitRecord@1100525011();
    VAR
      EstimateRAWSetup@1100525000 : Record 11125673;
    BEGIN
      IF "RAW Estimate" THEN BEGIN
        EstimateRAWSetup.GET;
        //"Plant Rates in Hours" := EstimateRAWSetup."Plant Rates in Hrs. by Default";  //DP01047: moved to Estimate Setup
      END;
    END;

    PROCEDURE TestElementExists@1100525012(FieldNo@1100525000 : Integer);
    VAR
      EstimateElementRAW@1100525001 : Record 11125679;
    BEGIN
      //db, 22-02-16: skip hardcode check
      EstimateRAWSetup.GET;

      EstimateElementRAW.SETCURRENTKEY("Estimate No.", "Element No.", "Construction Spec. Line No.");
      EstimateElementRAW.SETRANGE("Estimate No.", "No.");
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');

      CASE FieldNo OF
        Rec.FIELDNO("Percentage (Surcharge)"):
          BEGIN
            EstimateRAWSetup.TESTFIELD("Element No.(Surcharge)");
            EstimateElementRAW.SETRANGE("Element No.", EstimateRAWSetup."Element No.(Surcharge)");
            IF EstimateElementRAW.ISEMPTY THEN
              FIELDERROR("Percentage (Surcharge)", STRSUBSTNO(Text011, EstimateRAWSetup."Element No.(Surcharge)"));
          END;
        Rec.FIELDNO("Percentage (Profit/Risk)"):
          BEGIN
            EstimateRAWSetup.TESTFIELD("Element No.(Profit/Risc)");
            EstimateElementRAW.SETRANGE("Element No.", EstimateRAWSetup."Element No.(Profit/Risc)");
            IF EstimateElementRAW.ISEMPTY THEN
              FIELDERROR("Percentage (Profit/Risk)", STRSUBSTNO(Text011, EstimateRAWSetup."Element No.(Profit/Risc)"));
          END;
      END;
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::Estimate,GETPOSITION)
      ELSE
        MESSAGE(Text003);
    END;

    PROCEDURE CheckSummaryPresent@1100525013();
    VAR
      SumRec@1100525000 : Record 11012172;
      CopyFrm@1100525001 : Page 11012239;
      lvText000@1100525002 : TextConst 'ENU=Generate Summary by Sub-Estimate';
      SkipQuestion@1100528900 : Boolean;
      SubEstRecNEW@1100525004 : Record 11072074;
      NumSubEst@1100525005 : Integer;
      SkipGenerate@1100525006 : Boolean;
    BEGIN
      //db, 25-05-10: M19426
      SumRec."Estimate No." := "No.";
      SumRec.SETRANGE("Estimate No.", "No.");
      IF NOT SumRec.FINDFIRST THEN BEGIN
        //DP00381.sn
        IF Converted THEN BEGIN
          SubEstRecNEW.SETRANGE("Estimate No.", "No.");
          NumSubEst := SubEstRecNEW.COUNT;
        END;
        //DP00381.en
        SkipGenerate := (Converted = FALSE) AND ("Estimate Type" = "Estimate Type"::Sales);  //db, 13-03-15: C022058
        IF ("Summary Source (Cost)" <> '') AND (SkipGenerate = FALSE) THEN BEGIN
          CopyFrm.FillDefaultsSource("Estimate Source", '', "Summary Source (Cost)", "No.", "Summary Source (Cost)");
          CopyFrm.CopySummary;
          IF NumSubEst > 1 THEN BEGIN  //db, 07-11-13: DP00260 (28567)
            IF CONFIRM(lvText000,TRUE) THEN BEGIN
              CopyFrm.GenerateSummary;
              SkipQuestion := TRUE;
            END;
          END;
        END;
        SkipGenerate := (Converted = FALSE) AND ("Estimate Type" = "Estimate Type"::Cost);  //db, 13-03-15: C022058
        IF ("Summary Source (Sales)" <> '') AND (SkipGenerate = FALSE) THEN BEGIN
          CopyFrm.FillDefaultsSource("Estimate Source", '', "Summary Source (Sales)", "No.", "Summary Source (Sales)");
          CopyFrm.CopySummary;
          IF NumSubEst > 1 THEN BEGIN  //db, 07-11-13: DP00260 (28567)
            IF SkipQuestion THEN
              CopyFrm.GenerateSummary;
          END;
        END;
      END;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Summary Sheet List (Restr.)", SumRec, SumRec.Summary);
    END;

    PROCEDURE ShowTargetAmount@1100525018();
    VAR
      TargetAmtRec@1100525001 : Record 11012199;
      TargetAmtFrm@1100525000 : Page 11012243;
    BEGIN
      //db, 24-08-10
      IF ("No." = '') THEN
        EXIT;

      TargetAmtFrm.InitSelections("No.");
      TargetAmtRec.FILTERGROUP(6);
      TargetAmtRec.SETRANGE("Estimate No.", "No.");
      TargetAmtRec.FILTERGROUP(0);
      TargetAmtFrm.SETTABLEVIEW(TargetAmtRec);
      TargetAmtFrm.RUNMODAL;
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Global Dimension 1 Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::Estimate);
      IF Dimension1Code <> '' THEN
        "Global Dimension 1 Code" := Dimension1Code;

      IF "Global Dimension 1 Code" <> '' THEN
        VALIDATE("Global Dimension 1 Code");
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::Estimate, "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012151) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012151');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION)
    END;

    PROCEDURE DPA_CanFindRecWithDPAFltrAppld@1210190002() : Boolean;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT(FIND);

      IF NOT DPA_Management.HasTableHardFilter(11012151) THEN
        EXIT(FIND);

      DPA_SetFilters('Table 11012151');
        EXIT(FIND);
    END;

    PROCEDURE EditDocuments@1100528702(ContactNo@1210190003 : Code[20];ContactPersonNo@1210190004 : Code[20];SendMail@1210190002 : Boolean;Recipient@1100528700 : Text[120]);
    VAR
      DocumentTemplate@1210190001 : Record 11012401;
      DocumentMailing@1210190000 : Codeunit 11012278;
      RecRef@1100525000 : RecordRef;
      DocumentLinkRIDs@1100525001 : ARRAY [5] OF RecordID;
    BEGIN
      RecRef.GETTABLE(Rec);
      DocumentLinkRIDs[1] := RecRef.RECORDID;

      DocumentMailing.EditDocuments(
        STRSUBSTNO('%1', DocumentTemplate.Type::Estimate), DocumentLinkRIDs,
        "Global Dimension 1 Code", ContactNo, ContactPersonNo, SendMail, Recipient);
    END;

    PROCEDURE GetTryOut@1210190000(iAction@1210190000 : Integer) Result : Text[30];
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //db, 05-05-11
      IF "No." = '' THEN EXIT('');  //C026176

      IF TryOutRelationRec.READPERMISSION THEN
        Result := TryOutRelationRec.GetTryOut('', "No.", '', '', '', '', '', iAction);

      EXIT(Result);
    END;

    PROCEDURE ShowTryOut@1210190001(iAction@1210190000 : Integer) Result : Text[30];
    VAR
      TryOutRelationRec@1210190001 : Record 11012761;
    BEGIN
      //db, 05-05-11
      Result := TryOutRelationRec.ShowTryOut('', "No.", '', '', '', '', '', iAction);
      EXIT(Result);  //db, 22-01-15: C020309
    END;

    PROCEDURE UpdateProjPlanActCode@1210190022();
    VAR
      SubEstRecNew@1100525000 : Record 11072074;
    BEGIN
      IF Converted THEN BEGIN  //db, 04-04-14
        SubEstRecNew.SETRANGE("Estimate No.", "No.");
        SubEstRecNew.SETFILTER("Project Planning Activity Code", '%1|%2', '', xRec."Project Planning Activity Code");
        IF SubEstRecNew.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            SubEstRecNew.VALIDATE("Project Planning Activity Code", "Project Planning Activity Code");
            SubEstRecNew.MODIFY;
          UNTIL SubEstRecNew.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateExtensionContract@1100525019();
    VAR
      SubEstRecNew@1100525000 : Record 11072074;
    BEGIN
      //DP00260
      IF Converted THEN BEGIN  //db, 04-04-14
        SubEstRecNew.SETRANGE("Estimate No.", "No.");
        SubEstRecNew.SETFILTER("Extension Contract", '%1|%2', '', xRec."Extension Contract");
        IF SubEstRecNew.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF SubEstRecNew."Project No." <> '' THEN
              SubEstRecNew.VALIDATE("Extension Contract", "Extension Contract");
            SubEstRecNew.MODIFY;
          UNTIL SubEstRecNew.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE LookupRateCode@1210190006();
    VAR
      EstRateRec@1210190000 : Record 11012160;
      EstimateRateList@1100528800 : Page 11012168;
    BEGIN
      // 33429.so
      //db, 07-02-12: M32465
      //EstRateRec.SETRANGE("Estimate No.", "No.");
      //PAGE.RUNMODAL(0, EstRateRec);
      // 33429.eo

      // 33429.sn
      EstRateRec.SETRANGE("Estimate No.", "No.");
      EstimateRateList.SETTABLEVIEW(EstRateRec);
      IF EstRateRec.GET("No.", "Rate Code") THEN
        EstimateRateList.SETRECORD(EstRateRec);
      EstimateRateList.LOOKUPMODE(TRUE);
      IF EstimateRateList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        GET("No.");
        EstimateRateList.GETRECORD(EstRateRec);
        VALIDATE("Rate Code", EstRateRec."Rate Code");
      END ELSE
        GET("No.");
      // 33429.en
    END;

    PROCEDURE GetRateByRateGroup@1100525029();
    VAR
      EstRateRec@1100525003 : Record 11012160;
      RateGroupRec@1100525002 : Record 11012162;
      DateRateRec@1100525001 : Record 11012188;
      DateRateRec2@1100525000 : Record 11012188;
    BEGIN
      //C025953
      {
      //oude versie uit validate Rate Group
      RateGroupRec.SETRANGE("Rate Group","Rate Group");
      IF RateGroupRec.FINDSET THEN BEGIN
        REPEAT
          EstRateRec.INIT;
          EstRateRec."Estimate No." := "No.";
          EstRateRec."Rate Code" := RateGroupRec."Rate Code";
          EstRateRec.Description := RateGroupRec.Description;
          EstRateRec."Cost Rate" := RateGroupRec."Cost Rate";
          EstRateRec."Sales Rate" := RateGroupRec."Sales Rate";
          EstRateRec."Rate Type" := RateGroupRec."Rate Type";
          EstRateRec."Team Size" := RateGroupRec."Team Size";
          EstRateRec."Cost Object" := RateGroupRec."Cost Object";
          EstRateRec.INSERT;
        UNTIL RateGroupRec.NEXT = 0;
      END;
      DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Standard);
      DateRateRec.SETRANGE("Rate Group", "Rate Group");
      IF DateRateRec.FINDSET THEN BEGIN
        REPEAT
          DateRateRec2.COPY(DateRateRec);
          DateRateRec2."Record Type" := DateRateRec."Record Type"::Estimate;
          DateRateRec2."Estimate No." := "No.";
          DateRateRec2."Rate Group" := '';
          IF DateRateRec2.INSERT THEN;
        UNTIL DateRateRec.NEXT = 0;
      END;
      }
      //nieuwe versie uit codeunit voor functie ReplaceRateGroup
      RateGroupRec.SETRANGE("Rate Group", "Rate Group");
      IF RateGroupRec.FINDSET THEN BEGIN
        REPEAT
          IF EstRateRec.GET("No.", RateGroupRec."Rate Code") THEN BEGIN
            EstRateRec.Description := RateGroupRec.Description;
            EstRateRec."Cost Rate" := RateGroupRec."Cost Rate";
            EstRateRec."Sales Rate" := RateGroupRec."Sales Rate";
            EstRateRec."Rate Type" := RateGroupRec."Rate Type";
            EstRateRec."Team Size" := RateGroupRec."Team Size";
            EstRateRec."Cost Object" := RateGroupRec."Cost Object";
            EstRateRec.MODIFY;
          END ELSE BEGIN
            EstRateRec."Estimate No." := "No.";
            EstRateRec."Rate Code" := RateGroupRec."Rate Code";
            EstRateRec.Description := RateGroupRec.Description;
            EstRateRec."Cost Rate" := RateGroupRec."Cost Rate";
            EstRateRec."Sales Rate" := RateGroupRec."Sales Rate";
            EstRateRec."Rate Type" := RateGroupRec."Rate Type";
            EstRateRec."Team Size" := RateGroupRec."Team Size";
            EstRateRec."Cost Object" := RateGroupRec."Cost Object";
            EstRateRec.INSERT;
          END;
        UNTIL RateGroupRec.NEXT = 0;
      END;
      DateRateRec.RESET;
      DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Estimate);
      DateRateRec.SETRANGE("Estimate No.", "No.");
      DateRateRec.DELETEALL;

      DateRateRec.RESET;
      DateRateRec.SETRANGE("Record Type", DateRateRec."Record Type"::Standard);
      DateRateRec.SETRANGE("Rate Group", "Rate Group");
      IF DateRateRec.FIND('-') THEN BEGIN
        REPEAT
          DateRateRec2.COPY(DateRateRec);
          DateRateRec2."Record Type" := DateRateRec."Record Type"::Estimate;
          DateRateRec2."Estimate No." := "No.";
          DateRateRec2."Rate Group" := '';
          IF DateRateRec2.INSERT THEN;
        UNTIL DateRateRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetCostRate@1100528901();
    VAR
      RefDate@1100525000 : Date;
      BudgetRateRec@1100525002 : Record 11012000;
      DepartmentBudgetRateRec@1100525001 : Record 11071895;
    BEGIN
      //DP00381
      EstSetup.GET;
      IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group" THEN EXIT;  //db, 02-06-14: C012973

      RefDate := "Reference Date (Rate)";
      IF RefDate = 0D THEN
        RefDate := TODAY;

      BudgetRateRec.SETRANGE("Apply as Estimate Rate", TRUE);  //db, 13-12-13
      BudgetRateRec.SETRANGE("Starting Date", 0D, RefDate);
      BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, RefDate);
      IF BudgetRateRec.FINDSET THEN BEGIN
        REPEAT
          IF NOT EstRateRec.GET("No.", BudgetRateRec.Code) THEN BEGIN
            EstRateRec.INIT;
            EstRateRec."Estimate No." := "No.";
            EstRateRec."Rate Code" := BudgetRateRec.Code;
            EstRateRec.Description := BudgetRateRec.Description;
            EstRateRec.INSERT;
          END;
          //db.sn, 13-12-13
          EstRateRec.VALIDATE("Cost Rate", BudgetRateRec."Estimate Rate");
          EstRateRec."Rate Type" := BudgetRateRec."Rate Type";
          EstRateRec."Team Size" := BudgetRateRec."Team Size";
          EstRateRec."Cost Object" := BudgetRateRec."Cost Object";
          EstRateRec.MODIFY;
          //db.en, 13-12-13
        UNTIL BudgetRateRec.NEXT = 0;
      END;

      DepartmentBudgetRateRec.SETRANGE("Department Code", "Global Dimension 1 Code");
      DepartmentBudgetRateRec.SETRANGE("Starting Date", 0D, RefDate);
      DepartmentBudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, RefDate);
      IF DepartmentBudgetRateRec.FINDSET THEN BEGIN
        REPEAT
          //IF NOT EstRateRec.GET("No.", DepartmentBudgetRateRec."Rate Code") THEN BEGIN
          //  EstRateRec.INIT;
          //  EstRateRec."Estimate No." := "No.";
          //  EstRateRec."Rate Code" := DepartmentBudgetRateRec."Rate Code";
          //  EstRateRec.Description := DepartmentBudgetRateRec.Description;
          //  EstRateRec.INSERT;
          //END;
          //db.sn, 13-12-13
          IF EstRateRec.GET("No.", DepartmentBudgetRateRec."Rate Code") THEN BEGIN  //db, 21-02-14: C012274
            EstRateRec.VALIDATE("Cost Rate", DepartmentBudgetRateRec."Estimate Rate");
            EstRateRec."Rate Type" := DepartmentBudgetRateRec."Rate Type";
            EstRateRec."Team Size" := DepartmentBudgetRateRec."Team Size";
            EstRateRec."Cost Object" := DepartmentBudgetRateRec."Cost Object";
            EstRateRec.MODIFY;
          END;
          //db.en, 13-12-13
        UNTIL DepartmentBudgetRateRec.NEXT = 0;
      END;
    END;

    PROCEDURE GetSalesRate@1100528900();
    VAR
      HourRateRec@1100528901 : Record 11012022;
      CustHourRateRec@1100528900 : Record 11012023;
      DepartmentHourRateRec@1100525001 : Record 11071896;
      DepartmentCustHourRateRec@1100525002 : Record 11071897;
      ServContractHourRateRec@1100525003 : Record 11012815;
      RefDate@1100525000 : Date;
    BEGIN
      //DP00381
      EstSetup.GET;
      IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Rate Group" THEN EXIT;  //db, 02-06-14: C012973

      RefDate := "Reference Date (Rate)";
      IF RefDate = 0D THEN
        RefDate := TODAY;

      HourRateRec.SETRANGE("Starting Date", 0D, RefDate);
      HourRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, RefDate);
      IF HourRateRec.FINDSET THEN BEGIN
        REPEAT
          //IF NOT EstRateRec.GET("No.", HourRateRec.Code) THEN BEGIN
          //  EstRateRec.INIT;
          //  EstRateRec."Estimate No." := "No.";
          //  EstRateRec."Rate Code" := HourRateRec.Code;
          //  EstRateRec.Description := HourRateRec.Description;
          //  EstRateRec.INSERT;
          //END;
          IF EstRateRec.GET("No.", HourRateRec.Code) THEN BEGIN  //db, 21-02-14: C012274
            EstRateRec.VALIDATE("Sales Rate", HourRateRec."Hour Rate");
            EstRateRec.MODIFY;
          END;
        UNTIL HourRateRec.NEXT = 0;
      END;

      DepartmentHourRateRec.SETRANGE("Department Code", "Global Dimension 1 Code");
      DepartmentHourRateRec.SETRANGE("Starting Date", 0D, RefDate);
      DepartmentHourRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, RefDate);
      IF DepartmentHourRateRec.FINDSET THEN BEGIN
        REPEAT
          //IF NOT EstRateRec.GET("No.", DepartmentHourRateRec."Hour Rate Code") THEN BEGIN
          //  EstRateRec.INIT;
          //  EstRateRec."Estimate No." := "No.";
          //  EstRateRec."Rate Code" := DepartmentHourRateRec."Hour Rate Code";
          //  EstRateRec.Description := DepartmentHourRateRec.Description;
          //  EstRateRec.INSERT;
          //END;
          IF EstRateRec.GET("No.", DepartmentHourRateRec."Hour Rate Code") THEN BEGIN  //db, 21-02-14: C012274
            EstRateRec.VALIDATE("Sales Rate", DepartmentHourRateRec."Hour Rate");
            EstRateRec.MODIFY;
          END;
        UNTIL DepartmentHourRateRec.NEXT = 0;
      END;

      CustHourRateRec.SETRANGE("Customer No.", "Customer No.");
      CustHourRateRec.SETRANGE("Starting Date", 0D, RefDate);
      CustHourRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, RefDate);
      IF CustHourRateRec.FINDSET THEN BEGIN
        REPEAT
          //IF NOT EstRateRec.GET("No.", CustHourRateRec."Hour Rate Code") THEN BEGIN
          //  EstRateRec.INIT;
          //  EstRateRec."Estimate No." := "No.";
          //  EstRateRec."Rate Code" := CustHourRateRec."Hour Rate Code";
          //  EstRateRec.Description := CustHourRateRec.Description;
          //  EstRateRec.INSERT;
          //END;
          IF EstRateRec.GET("No.", CustHourRateRec."Hour Rate Code") THEN BEGIN  //db, 21-02-14: C012274
            EstRateRec.VALIDATE("Sales Rate", CustHourRateRec."Hour Rate");
            EstRateRec.MODIFY;
          END;
        UNTIL CustHourRateRec.NEXT = 0;
      END;

      DepartmentCustHourRateRec.SETRANGE("Department Code", "Global Dimension 1 Code");
      DepartmentCustHourRateRec.SETRANGE("Customer No.", "Customer No.");
      DepartmentCustHourRateRec.SETRANGE("Starting Date", 0D, RefDate);
      DepartmentCustHourRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, RefDate);
      IF DepartmentCustHourRateRec.FINDSET THEN BEGIN
        REPEAT
          //IF NOT EstRateRec.GET("No.", DepartmentCustHourRateRec."Hour Rate Code") THEN BEGIN
          //  EstRateRec.INIT;
          //  EstRateRec."Estimate No." := "No.";
          //  EstRateRec."Rate Code" := DepartmentCustHourRateRec."Hour Rate Code";
          //  EstRateRec.Description := DepartmentCustHourRateRec.Description;
          //  EstRateRec.INSERT;
          //END;
          IF EstRateRec.GET("No.", DepartmentCustHourRateRec."Hour Rate Code") THEN BEGIN  //db, 21-02-14: C012274
            EstRateRec.VALIDATE("Sales Rate", DepartmentCustHourRateRec."Hour Rate");
            EstRateRec.MODIFY;
          END;
        UNTIL DepartmentCustHourRateRec.NEXT = 0;
      END;

      //db.sn, 23-01-14: C011627
      ServContractHourRateRec.SETRANGE("Service Contract No.", "Service Contract No.");
      ServContractHourRateRec.SETRANGE("Starting Date", 0D, RefDate);
      ServContractHourRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, RefDate);
      IF ServContractHourRateRec.FINDSET THEN BEGIN
        REPEAT
          //IF NOT EstRateRec.GET("No.", ServContractHourRateRec."Hour Rate Code") THEN BEGIN
          //  EstRateRec.INIT;
          //  EstRateRec."Estimate No." := "No.";
          //  EstRateRec."Rate Code" := ServContractHourRateRec."Hour Rate Code";
          //  EstRateRec.Description := ServContractHourRateRec.Description;
          //  EstRateRec.INSERT;
          //END;
          IF EstRateRec.GET("No.", ServContractHourRateRec."Hour Rate Code") THEN BEGIN  //db, 21-02-14: C012274
            EstRateRec.VALIDATE("Sales Rate", ServContractHourRateRec."Hour Rate");
            EstRateRec.MODIFY;
          END;
        UNTIL ServContractHourRateRec.NEXT = 0;
      END;
      //db.en, 23-01-14: C011627
    END;

    PROCEDURE UpdateSurcharge@1100528902(CostType@1100485000 : Integer);
    VAR
      SubEstRec@1100485001 : Record 11072074;
    BEGIN
      //DP00381
      IF "RAW Estimate" THEN EXIT;

      SubEstRec.SETRANGE("Estimate No.", "No.");
      IF CostType = 0 THEN
        SubEstRec.SETFILTER("Surcharge % Labor", '%1|%2', 0, xRec."Surcharge % Labor");
      IF CostType = 1 THEN
        SubEstRec.SETFILTER("Surcharge % Material", '%1|%2', 0, xRec."Surcharge % Material");
      IF CostType = 2 THEN
        SubEstRec.SETFILTER("Surcharge % Subcontracting", '%1|%2', 0, xRec."Surcharge % Subcontracting");
      IF CostType = 3 THEN
        SubEstRec.SETFILTER("Surcharge % Plant", '%1|%2', 0, xRec."Surcharge % Plant");
      IF CostType = 4 THEN
        SubEstRec.SETFILTER("Surcharge % Sundry", '%1|%2', 0, xRec."Surcharge % Sundry");
      IF SubEstRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF CostType = 0 THEN
            SubEstRec.VALIDATE("Surcharge % Labor", "Surcharge % Labor");
          IF CostType = 1 THEN
            SubEstRec.VALIDATE("Surcharge % Material", "Surcharge % Material");
          IF CostType = 2 THEN
            SubEstRec.VALIDATE("Surcharge % Subcontracting", "Surcharge % Subcontracting");
          IF CostType = 3 THEN
            SubEstRec.VALIDATE("Surcharge % Plant", "Surcharge % Plant");
          IF CostType = 4 THEN
            SubEstRec.VALIDATE("Surcharge % Sundry", "Surcharge % Sundry");
          SubEstRec.MODIFY;
        UNTIL SubEstRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateResponsibility@1100525002(IFieldNo@1100525000 : Integer;IOldEmplNo@1100525001 : Code[20];INewEmplNo@1100525002 : Code[20]);
    VAR
      lvEstRespPersRec@1100525004 : Record 11012159;
      lvEstRespPersRec2@1100525006 : Record 11012159;
      lvRespCode@1100525003 : Code[10];
      JobSetup@1100525005 : Record 315;
    BEGIN
      //db, 12-09-13: C007282
      IF INewEmplNo = IOldEmplNo THEN
        EXIT;

      JobSetup.GET;
      CASE IFieldNo OF
        FIELDNO(Estimator):
          lvRespCode := JobSetup."Responsibility Estimator";
      END;

      IF lvRespCode = '' THEN
        EXIT;

      //db.sn, 08-05-14: C015005
      lvEstRespPersRec.SETRANGE("Estimate No.", "No.");
      lvEstRespPersRec.SETRANGE(Responsibility, lvRespCode);
      lvEstRespPersRec.DELETEALL(FALSE);

      IF INewEmplNo <> '' THEN BEGIN
        lvEstRespPersRec2.INIT;
        lvEstRespPersRec2."Estimate No." := "No.";
        lvEstRespPersRec2.Responsibility := lvRespCode;
        lvEstRespPersRec2."Employee No." := INewEmplNo;
        lvEstRespPersRec2.INSERT;
      END;
      //db.en, 08-05-14: C015005

      {
      //db, 08-05-14: C015005: old version copied from Job Responsibility (including linenumber)
      lvEstRespPersRec.SETRANGE("Estimate No.", "No.");
      lvEstRespPersRec.SETRANGE(Responsibility, lvRespCode);
      lvEstRespPersRec2.SETRANGE("Estimate No.", "No.");
      lvEstRespPersRec2.SETRANGE(Responsibility, lvRespCode);
      IF IOldEmplNo <> '' THEN BEGIN
        lvEstRespPersRec.SETRANGE("Employee No.", IOldEmplNo);
        IF lvEstRespPersRec.FINDFIRST THEN BEGIN
          lvEstRespPersRec2.SETRANGE("Employee No.", INewEmplNo);
          IF lvEstRespPersRec2.FINDFIRST OR (INewEmplNo = '') THEN BEGIN
            lvEstRespPersRec.DELETE(FALSE);
          END ELSE BEGIN
            lvEstRespPersRec."Employee No." := INewEmplNo;
            lvEstRespPersRec.MODIFY(TRUE);
          END;
          EXIT;
        END;
      END;

      IF INewEmplNo <> '' THEN BEGIN
        lvEstRespPersRec.SETRANGE("Employee No.", INewEmplNo);
        IF NOT lvEstRespPersRec.FINDFIRST THEN BEGIN
          lvEstRespPersRec2.RESET;
          lvEstRespPersRec2.SETRANGE("Estimate No.", "No.");
          IF NOT lvEstRespPersRec2.FINDLAST THEN;
          //  lvEstRespPersRec2."Line No." := 0;
          lvEstRespPersRec.RESET;
          lvEstRespPersRec.INIT;
          lvEstRespPersRec."Estimate No." := "No.";
          //lvEstRespPersRec."Line No." := lvEstRespPersRec2."Line No." + 10000;
          lvEstRespPersRec.Responsibility := lvRespCode;
          lvEstRespPersRec."Employee No." := INewEmplNo;
          lvEstRespPersRec.INSERT;
        END;
      END;
      }
    END;

    PROCEDURE LookupRecipeGroup@1100525020();
    VAR
      RecipeGroupRec@1100525000 : Record 11020580;
      EstimateGroupRec@1100525001 : Record 11012157;
    BEGIN
      //db, 07-02-14: C013041
      IF Converted THEN BEGIN
        IF PAGE.RUNMODAL(0, RecipeGroupRec) = ACTION::LookupOK THEN
          "Recipe Group":= RecipeGroupRec."No.";
      END ELSE BEGIN
        EstimateGroupRec.SETRANGE(Type, EstimateGroupRec.Type::Recipe);
        IF PAGE.RUNMODAL(0, EstimateGroupRec) = ACTION::LookupOK THEN
          "Recipe Group":= EstimateGroupRec."No.";
      END;
    END;

    PROCEDURE ValidateRecipeGroup@1100525022();
    VAR
      RecipeGroupRec@1100525000 : Record 11020580;
      EstimateGroupRec@1100525001 : Record 11012157;
    BEGIN
      //db, 07-02-14: C013041
      IF "Recipe Group" = '' THEN EXIT;

      IF Converted THEN BEGIN
        RecipeGroupRec.GET("Recipe Group");
      END ELSE BEGIN
        EstimateGroupRec.GET("Recipe Group", EstimateGroupRec.Type::Recipe);
      END;
    END;

    PROCEDURE InheritDataFromSource@1100525023(EstFrom@1100525001 : Code[20]);
    VAR
      OrigEstRec@1100525000 : Record 11012151;
    BEGIN
      //db, 02-02-15: C020972
      IF EstFrom = '' THEN BEGIN
        EstSetup.GET;
        IF NOT OrigEstRec.GET(EstSetup."Estimate Source") THEN EXIT;
      END ELSE BEGIN
        OrigEstRec.GET(EstFrom);  //call from TryOutSuccesor (report 11012758)
      END;

      "Estimate Type" := OrigEstRec."Estimate Type";
      "Norm Group" := OrigEstRec."Norm Group";
      "Norm Group (Sales)" := OrigEstRec."Norm Group (Sales)";
      "Rate Group" := OrigEstRec."Rate Group";
      "Rate Code" := OrigEstRec."Rate Code";
      "Part Group" := OrigEstRec."Part Group";
      "Recipe Group" := OrigEstRec."Recipe Group";
      "Reference Date (Item)" := OrigEstRec."Reference Date (Item)";
      "Purch Discount Term Group 1" := OrigEstRec."Purch Discount Term Group 1";
      "Purch Discount Term Group 2" := OrigEstRec."Purch Discount Term Group 2";
      "Priority Purch Disc Term Grp 0" := OrigEstRec."Priority Purch Disc Term Grp 0";
      "Priority Purch Disc Term Grp 1" := OrigEstRec."Priority Purch Disc Term Grp 1";
      "Priority Purch Disc Term Grp 2" := OrigEstRec."Priority Purch Disc Term Grp 2";
      "Sales Discount Term Group 1" := OrigEstRec."Sales Discount Term Group 1";
      "Sales Discount Term Group 2" := OrigEstRec."Sales Discount Term Group 2";
      "Priority Sales Disc Term Grp 0" := OrigEstRec."Priority Sales Disc Term Grp 0";
      "Priority Sales Disc Term Grp 1" := OrigEstRec."Priority Sales Disc Term Grp 1";
      "Priority Sales Disc Term Grp 2" := OrigEstRec."Priority Sales Disc Term Grp 2";
      Element := OrigEstRec.Element;
      "Coding System" := OrigEstRec."Coding System";
      Code := OrigEstRec.Code;
      "Copy Part Lines" := OrigEstRec."Copy Part Lines";
      "Apply Surcharge Recipe" := OrigEstRec."Apply Surcharge Recipe";
      "Estimate Based On" := OrigEstRec."Estimate Based On";
      "Item Sales Price Based On" := OrigEstRec."Item Sales Price Based On";
    END;

    PROCEDURE OpenCard@1100526100();
    BEGIN
      //db, 06-03-15: C019947
      IF "RAW Estimate" THEN BEGIN
        PAGE.RUN(PAGE::"Estimate (RAW) Card",Rec);
      END ELSE BEGIN
        IF Converted THEN BEGIN
          PAGE.RUN(PAGE::"Estimate Card NEW",Rec);
        END ELSE BEGIN
          IF "Estimate Project" THEN
            PAGE.RUN(PAGE::"Estimate Card (Project)",Rec)
          ELSE
            PAGE.RUN(PAGE::"Estimate Card",Rec);
        END;
      END;
    END;

    PROCEDURE UpdateBudgetRate@1100525025();
    VAR
      EstimateRate@1100525000 : Record 11012160;
    BEGIN
      //DP00883
      EstimateRate.SETRANGE("Estimate No.", "No.");
      IF EstimateRate.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          EstimateRate.VALIDATE("Currency Code", "Currency Code");
          EstimateRate.MODIFY;
        UNTIL EstimateRate.NEXT = 0;
      END;

      UpdateBudgetLineCurrencyData("No.", '');
    END;

    PROCEDURE UpdateBudgetLineCurrencyData@1100525026(iEstimate@1100525001 : Code[20];iRateCode@1100525002 : Code[10]);
    VAR
      EstimateLine@1100525000 : Record 11072072;
      RecipeLine@1100525003 : Record 11072075;
    BEGIN
      //DP00883
      EstimateLine.SETFILTER("Estimate No.", iEstimate);
      EstimateLine.SETFILTER("Rate Code", iRateCode);
      EstimateLine.SETFILTER(Recipe, '%1', '');
      IF EstimateLine.FINDSET THEN BEGIN
        REPEAT
          EstimateLine."Currency Code" := "Currency Code";
          EstimateLine."Cost Rate (FCY)" := EstimateLine.ExchangeAmtLCYToFCY(EstimateLine."Cost Rate", FALSE, TRUE, FALSE);
          EstimateLine."Sales Rate (FCY)" := EstimateLine.ExchangeAmtLCYToFCY(EstimateLine."Sales Rate", FALSE, TRUE, FALSE);
          EstimateLine."Gross Price (FCY)" := EstimateLine.ExchangeAmtLCYToFCY(EstimateLine."Gross Price", FALSE, TRUE, FALSE);
          EstimateLine."Nett Cost Price (FCY)" := EstimateLine.ExchangeAmtLCYToFCY(EstimateLine."Nett Cost Price", FALSE, TRUE, FALSE);
          EstimateLine."Nett Sales Price (FCY)" := EstimateLine.ExchangeAmtLCYToFCY(EstimateLine."Nett Sales Price", FALSE, TRUE, FALSE);
          EstimateLine.CalculateTotals;
          EstimateLine.MODIFY;
        UNTIL EstimateLine.NEXT = 0;
      END;

      RecipeLine.SETFILTER("Estimate No.", iEstimate);
      RecipeLine.SETFILTER("Rate Code", iRateCode);
      IF RecipeLine.FINDSET THEN BEGIN
        REPEAT
          RecipeLine."Currency Code" := "Currency Code";
          RecipeLine."Cost Rate (FCY)" := RecipeLine.ExchangeAmtLCYToFCY(RecipeLine."Cost Rate", FALSE, TRUE, FALSE);
          RecipeLine."Sales Rate (FCY)" := RecipeLine.ExchangeAmtLCYToFCY(RecipeLine."Sales Rate", FALSE, TRUE, FALSE);
          RecipeLine."Gross Price (FCY)" := RecipeLine.ExchangeAmtLCYToFCY(RecipeLine."Gross Price", FALSE, TRUE, FALSE);
          RecipeLine."Nett Cost Price (FCY)" := RecipeLine.ExchangeAmtLCYToFCY(RecipeLine."Nett Cost Price", FALSE, TRUE, FALSE);
          RecipeLine."Nett Sales Price (FCY)" := RecipeLine.ExchangeAmtLCYToFCY(RecipeLine."Nett Sales Price", FALSE, TRUE, FALSE);
          RecipeLine.CalculateTotals;
          RecipeLine.MODIFY;
        UNTIL RecipeLine.NEXT = 0;
      END;
    END;

    PROCEDURE StructurePresent@1100525014(CurrEst@1100525002 : Code[20]) : Boolean;
    VAR
      EstPartRec@1100525000 : Record 11072073;
      NumPart@1100525001 : Integer;
    BEGIN
      //DP00909
      EstPartRec.SETRANGE("Estimate No.", CurrEst);
      NumPart := EstPartRec.COUNT;
      EXIT(NumPart>1);
    END;

    PROCEDURE ModelPresent@1100525016(CurrEst@1100525000 : Code[20]) : Boolean;
    VAR
      EstModelRec@1100525001 : Record 11012196;
      NumModel@1100525002 : Integer;
    BEGIN
      //DP00909
      EstModelRec.SETRANGE("Estimate No.", CurrEst);
      NumModel := EstModelRec.COUNT;
      EXIT(NumModel>1);
    END;

    PROCEDURE StartEstimateLines@1100525027();
    VAR
      EstRec@1210190000 : Record 11012151;
      EstLineFrm@1100528900 : Page 11229779;
      EstPartRec@1100525001 : Record 11072073;
      EstimateManagementRTC@1100525000 : Codeunit 11130010;
    BEGIN
      //DP00909
      IF StructurePresent("No.") THEN BEGIN
        MESSAGE(Text999);
        ShowIndex("No.",'','','',FALSE);
        EXIT;
      END;

      GenerateSubEstimateWithPartLevelZero;
      EstPartRec.SETRANGE("Estimate No.", "No.");
      EstPartRec.FINDFIRST;
      EstimateManagementRTC.EditViewEstimateLinesNEW(EstPartRec."Estimate No.", EstPartRec."Sub-Estimate No.", EstPartRec."Part Group", EstPartRec.Part, 0);

      {
      EstRec.COPY(Rec);
      EstLineFrm.FillDefaults("No.");
      EstLineFrm.SETTABLEVIEW(EstRec);
      EstLineFrm.RUNMODAL;
      CLEAR(EstLineFrm);  //Estimate Lines MF NEW: out-of-usage; should be revised (temp)
      }
    END;

    PROCEDURE GenerateSubEstimateWithPartLevelZero@1100525024();
    VAR
      SubEstRec@1100525000 : Record 11072074;
      DummyCode@1100525001 : Code[20];
    BEGIN
      //DP00909
      SubEstRec.SETRANGE("Estimate No.", "No.");
      IF NOT SubEstRec.FINDFIRST THEN BEGIN
        DummyCode := '1';
        SubEstRec.INIT;
        SubEstRec."Estimate No." := "No.";
        SubEstRec.VALIDATE("Sub-Estimate No.", DummyCode);
        SubEstRec.Description := SubEstRec.TABLECAPTION + ' ' + DummyCode;
        SubEstRec.INSERT(TRUE);
        SubEstRec.SetOptionToCreatePartLevelZero;
        SubEstRec.CheckPartLevelZeroExist;
        COMMIT;
      END;
    END;

    PROCEDURE ShowIndex@1100525028(iEst@1100525000 : Code[20];iSubEst@1100525001 : Code[20];iPartGrp@1100525002 : Code[20];iPart@1100525003 : Code[20];CalledFromLine@1100525005 : Boolean);
    VAR
      EstimatePart@1100485000 : Record 11072073;
      IndexPage@1100525004 : Page 11020468;
    BEGIN
      //DP00909
      EstimatePart.SETRANGE("Estimate No.",iEst);
      EstimatePart."Estimate No." := iEst;
      EstimatePart."Sub-Estimate No." := iSubEst;
      EstimatePart."Part Group" := iPartGrp;
      EstimatePart.Part := iPart;
      IndexPage.SETRECORD(EstimatePart);
      IndexPage.SETTABLEVIEW(EstimatePart);
      IF CalledFromLine THEN BEGIN
        IndexPage.CalledFromLevel(DATABASE::"Estimate Line NEW");
      END ELSE BEGIN
        IF iPart <> '' THEN BEGIN
          IndexPage.CalledFromLevel(DATABASE::"Estimate Part NEW");
        END ELSE BEGIN
          IF iSubEst <> '' THEN BEGIN
            IndexPage.CalledFromLevel(DATABASE::"Sub-Estimate NEW");
          END ELSE BEGIN
            IndexPage.CalledFromLevel(DATABASE::Estimate);
          END;
        END;
      END;
      IndexPage.RUN; //C017535
    END;

    PROCEDURE GetDataCaptionEstimateLevel@1100528001(iEstimate@1100525001 : Code[20];iSubEstimate@1100525002 : Code[20];iPartGroup@1100525003 : Code[20];iPart@1100525004 : Code[20]) : Text[250];
    VAR
      Estimate@1100525000 : Record 11012151;
      SubEstimate@1100525005 : Record 11072074;
      EstimatePart@1100525006 : Record 11072073;
    BEGIN
      //DP00909
      IF NOT Estimate.GET(iEstimate) THEN Estimate.INIT;
      IF iSubEstimate = '' THEN
        EXIT(STRSUBSTNO('%1 - %2', Estimate."No.", Estimate.Description));

      IF NOT SubEstimate.GET(iEstimate, iSubEstimate) THEN SubEstimate.INIT;
      IF iPart = '' THEN
        EXIT(STRSUBSTNO('%1 - %2 - %3 - %4', Estimate."No.", Estimate.Description, SubEstimate."Sub-Estimate No.", SubEstimate.Description));

      IF NOT EstimatePart.GET(iEstimate, iSubEstimate, iPartGroup, iPart) THEN EstimatePart.INIT;
      EXIT(STRSUBSTNO('%1 - %2 - %3 - %4 - %5 - %6', Estimate."No.", Estimate.Description, SubEstimate."Sub-Estimate No.", SubEstimate.Description,
        EstimatePart.Part, EstimatePart.Description));
    END;

    PROCEDURE StartCopyEstimate@1100525030(ActivateCard@1100525003 : Boolean);
    VAR
      CopyEstimate@1100525002 : Page 11012210;
      NewEstimate@1100525001 : Code[20];
      Estimate@1100525000 : Record 11012151;
      CopyEstimateRaw@1100525004 : Page 11125697;
    BEGIN
      //C027531: db, 24-12-15
      IF "RAW Estimate" THEN BEGIN  //C028591 (db, 19-01-16)
        CopyEstimateRaw.FillDefaults("No.");
        CopyEstimateRaw.StdDialogRunModal;
        NewEstimate := CopyEstimateRaw.GetNewEstimate;
      END ELSE BEGIN
        CopyEstimate.FillDefaults("No.");
        CopyEstimate.StdDialogRunModal;
        NewEstimate := CopyEstimate.GetNewEstimate;
      END;
      IF Estimate.GET(NewEstimate) THEN BEGIN
        IF ActivateCard THEN
          Estimate.OpenCard
        ELSE;
          GET(NewEstimate);
      END;
    END;

    PROCEDURE StartCopySubEstimateByModel@1100525031(ActivateCard@1100525003 : Boolean);
    VAR
      CopyPage@1100525002 : Page 11012215;
      NewEstimate@1100525001 : Code[20];
      Estimate@1100525000 : Record 11012151;
    BEGIN
       //C027729: db, 24-12-15
      CopyPage.FillDefaults("No.");
      CopyPage.StdDialogRunModal;
      NewEstimate := CopyPage.GetNewEstimate;
      IF Estimate.GET(NewEstimate) THEN
        GET(NewEstimate);
    END;

    LOCAL PROCEDURE CheckPercentageAllowed@1100529000(FieldNumber@1100529000 : Integer);
    VAR
      EstimateLineRAW@1100529001 : Record 11125680;
    BEGIN
      //C026965
      EstimateRAWSetup.GET;

      EstimateLineRAW.SETRANGE("Estimate No.", "No.");
      EstimateLineRAW.SETRANGE("Summary Line", FALSE);
      CASE FieldNumber OF
        FIELDNO("Percentage (Surcharge)"):
          BEGIN
            IF "Percentage (Surcharge)" <> 0 THEN BEGIN
              EstimateLineRAW.SETRANGE("Element No.", EstimateRAWSetup."Element No.(Surcharge)");
              IF NOT EstimateLineRAW.ISEMPTY THEN
                FIELDERROR("Percentage (Surcharge)",
                  STRSUBSTNO(Text014, EstimateLineRAW.FIELDCAPTION("Element No."), EstimateRAWSetup."Element No.(Surcharge)"));
            END;
          END;
        FIELDNO("Percentage (Profit/Risk)"):
          BEGIN
            IF "Percentage (Profit/Risk)" <> 0 THEN BEGIN
              EstimateLineRAW.SETRANGE("Element No.", EstimateRAWSetup."Element No.(Profit/Risc)");
              IF NOT EstimateLineRAW.ISEMPTY THEN
                FIELDERROR("Percentage (Profit/Risk)",
                  STRSUBSTNO(Text014, EstimateLineRAW.FIELDCAPTION("Element No."), EstimateRAWSetup."Element No.(Profit/Risc)"));
            END;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

