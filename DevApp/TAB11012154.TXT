OBJECT Table 11012154 Estimate Line OLD
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 91=rm;
    OnInsert=BEGIN
               ERROR(Text999);  //db, 14-03-16: old estimate expired in Nav2016
               VALIDATE(Part);
               VALIDATE("Sub-Estimate No.");

               IF Recipe = '' THEN BEGIN
                 IF "Rate Code" = '' THEN
                   "Rate Code" := EstRec."Rate Code";
                 xRec."Rate Type" := "Rate Type";  //disable function ConvertNorm by next validate
                 xRec."Team Size" := "Team Size";
                 VALIDATE("Rate Code");            //get actual rate (if copied from old template)
                 DetermineNormGroup;
               END;

               InitEstimateLine(FALSE);  //db, 11-11-09: M16810
               InitAdjustmentFactor;
               IF Quantity <> 0 THEN
                 VALIDATE(Quantity);  //if Ctrl C+V used, force update hours based on adjustment factor

               "Attached to Line No." := GetAttachedToLineNo(Rec);
             END;

    OnModify=BEGIN
               ERROR(Text999);  //db, 14-03-16: old estimate expired in Nav2016
               IF Recipe <> '' THEN BEGIN
                 "Rate Code" := '';
                 "Rate Type" := "Rate Type"::Hours;
               END ELSE BEGIN
                 Condition := '';
               END;

               EstRec.UpdateLogbook("Estimate No.");
             END;

    OnDelete=VAR
               ChrgRec@11012000 : Record 11012175;
               ChrgRec2@1100409000 : Record 11012175;
               QuanSheetRec@1210190000 : Record 11012186;
               QuanSheetRelRec@1100525000 : Record 11020463;
               QuanModelRec@1210190001 : Record 11012197;
               BufferRec@1100485002 : Record 11012195;
               SurchLine@1100485001 : Integer;
             BEGIN
               EstRec.UpdateLogbook("Estimate No.");

               EstimateMgmt.ModifyLinkedEstLines(0,Rec,0); //0:delete

               IF Recipe <> '' THEN BEGIN
                 //DELETE;  //db, 06-09-06 //Call 30195

                 RecipeLineRec.RESET;
                 RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
                 RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
                 RecipeLineRec.SETRANGE("Part Group","Part Group");
                 RecipeLineRec.SETRANGE(Part,Part);
                 RecipeLineRec.SETRANGE("Estimate Line","Line No.");
                 IF NOT RecipeLineRec.ISEMPTY THEN BEGIN//Call 23762
                   //RecipeLineRec.DELETEALL(TRUE); //Call 30195
                   RecipeLineRec.FINDSET; //Call 30195
                   REPEAT //Call 30195
                     RecipeLineRec.SetFromEstimateLineDelete(TRUE); //Call 23762
                     RecipeLineRec.DELETE(TRUE);
                   UNTIL RecipeLineRec.NEXT = 0; //Call 30195
                   RecipeLineRec.SetFromEstimateLineDelete(FALSE); //Call 30195
                 END; //Call 30195
                 //INSERT;  //db, 06-09-06: skip sql-problem when deleting recipelines and updating recipetotal //Call 30195
               END;

               TextRec.RESET;
               TextRec.SETRANGE("Table Name",TextRec."Table Name"::Estimate);
               TextRec.SETRANGE("Estimate No.","Estimate No.");
               TextRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               TextRec.SETRANGE("Part Group","Part Group");
               TextRec.SETRANGE(Part,Part);
               TextRec.SETRANGE("Estimate Line No.","Line No.");
               IF NOT TextRec.ISEMPTY THEN //Call 23762
                 TextRec.DELETEALL;

               EstCodeRec.RESET;
               EstCodeRec.SETRANGE("Estimate No.","Estimate No.");
               EstCodeRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               EstCodeRec.SETRANGE("Part Group","Part Group");
               EstCodeRec.SETRANGE(Part,Part);
               EstCodeRec.SETRANGE("Estimate Line","Line No.");
               IF NOT EstCodeRec.ISEMPTY THEN //Call 23762
                 EstCodeRec.DELETEALL;

               //db.sn, 26-01-15: C020404
               ChrgRec.RESET;
               ChrgRec.SETRANGE("Estimate No.","Estimate No.");
               ChrgRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               ChrgRec.SETRANGE("Part Group","Part Group");
               ChrgRec.SETRANGE(Part,Part);
               ChrgRec.SETRANGE("Recipe Line",0);  //don't remove surcharge of recipe lines
               ChrgRec.SETRANGE("Basic Line","Line No.");  //remove estimated lines included in surcharge
               IF ChrgRec.FINDSET THEN BEGIN
                 REPEAT
                   SurchLine := ChrgRec."Surcharge Line";
                   ChrgRec.DELETE;
                   IF Amount <> 0 THEN BEGIN  //skip calculate charge if current line will not change result
                     IF EstLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, SurchLine) THEN BEGIN
                       EstLineRec.CheckEstimateCharge;
                       //db, 30-01-15: if last basic line deleted for surcharge, initialise surcharge line to disable totals
                       ChrgRec2.COPY(ChrgRec);
                       ChrgRec2.SETFILTER("Basic Line", '<>%1', "Line No.");
                       ChrgRec2.SETRANGE("Surcharge Line",SurchLine);
                       IF NOT ChrgRec2.FINDFIRST THEN BEGIN
                         EstLineRec.InitNormPrice;
                         EstLineRec.CalculateTotals;
                         EstLineRec.MODIFY;
                       END;
                     END;
                   END;
                 UNTIL ChrgRec.NEXT = 0;
               END;

               ChrgRec.SETRANGE("Basic Line");
               ChrgRec.SETRANGE("Surcharge Line","Line No.");  //delete surcharge lines
               ChrgRec.DELETEALL;
               //db.en, 26-01-15: C020404

               QuanSheetRec.RESET;
               QuanSheetRec.SETRANGE("Estimate No.","Estimate No.");
               QuanSheetRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuanSheetRec.SETRANGE("Part Group","Part Group");
               QuanSheetRec.SETRANGE(Part,Part);
               QuanSheetRec.SETRANGE("Estimate Line","Line No.");
               IF NOT QuanSheetRec.ISEMPTY THEN //Call 23762
                 QuanSheetRec.DELETEALL;

               QuanSheetRelRec.RESET;
               QuanSheetRelRec.SETRANGE("Estimate No.","Estimate No.");
               QuanSheetRelRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuanSheetRelRec.SETRANGE("Part Group","Part Group");
               QuanSheetRelRec.SETRANGE(Part,Part);
               QuanSheetRelRec.SETRANGE("Estimate Line","Line No.");
               IF NOT QuanSheetRelRec.ISEMPTY THEN //Call 23762
                QuanSheetRelRec.DELETEALL;

               QuanModelRec.RESET;
               QuanModelRec.SETRANGE("Estimate No.","Estimate No.");
               QuanModelRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuanModelRec.SETRANGE("Part Group","Part Group");
               QuanModelRec.SETRANGE(Part,Part);
               QuanModelRec.SETRANGE("Estimate Line","Line No.");
               IF NOT QuanModelRec.ISEMPTY THEN //Call 23762
                 QuanModelRec.DELETEALL;

               BufferRec.RESET;
               BufferRec.SETRANGE("Estimate No.","Estimate No.");
               BufferRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               BufferRec.SETRANGE("Part Group","Part Group");
               BufferRec.SETRANGE(Part,Part);
               BufferRec.SETRANGE("Estimate Line","Line No.");
               IF NOT BufferRec.ISEMPTY THEN //Call 23762
                 BufferRec.DELETEALL;
             END;

    CaptionML=ENU=Estimate Line OLD;
    LookupPageID=Page11012163;
    DrillDownPageID=Page11012163;
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No.;
                                                   Description=Fields above 2000 reserved for EstLineNEW (11072072) }
    { 20  ;   ;Estimate Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Estimate.Description WHERE (No.=FIELD(Estimate No.)));
                                                   CaptionML=ENU=Estimate Description;
                                                   Editable=No }
    { 30  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation="Sub-Estimate OLD"."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=BEGIN
                                                                IF "Sub-Estimate No." <> '' THEN BEGIN
                                                                  GetSubEstimate("Estimate No.", "Sub-Estimate No.", FALSE); //Call 23762
                                                                  "Chapter (Sub-Estimate)" := SubEstRec.Chapter;
                                                                  "Paragraph (Sub-Estimate)" := SubEstRec.Paragraph;
                                                                END ELSE BEGIN
                                                                  CLEAR("Chapter (Sub-Estimate)");
                                                                  CLEAR("Paragraph (Sub-Estimate)");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sub-Estimate No. }
    { 40  ;   ;Sub-Estimate Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sub-Estimate OLD".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                            Sub-Estimate No.=FIELD(Sub-Estimate No.)));
                                                   CaptionML=ENU=Estimate Part Description;
                                                   Editable=No }
    { 45  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Part OLD"."Part Group" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   CaptionML=ENU=Part Group }
    { 50  ;   ;Part                ;Code20        ;TableRelation="Estimate Part OLD".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                 Part Group=FIELD(Part Group));
                                                   OnValidate=BEGIN
                                                                IF Part <> '' THEN BEGIN
                                                                  EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part);
                                                                  Chapter := EstPartRec.Chapter;
                                                                  Paragraph := EstPartRec.Paragraph;
                                                                END ELSE BEGIN
                                                                  CLEAR(Chapter);
                                                                  CLEAR(Paragraph);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Part }
    { 60  ;   ;Part Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Part OLD".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part=FIELD(Part)));
                                                   CaptionML=ENU=Part Description;
                                                   Editable=No }
    { 65  ;   ;Recipe Group        ;Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Recipe));
                                                   OnValidate=BEGIN
                                                                IF "Recipe Group" <> xRec."Recipe Group" THEN
                                                                  CheckRenameRecipe;
                                                              END;

                                                   CaptionML=ENU=Recipe Group }
    { 70  ;   ;Recipe              ;Code20        ;TableRelation="Recipe OLD".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   OnValidate=BEGIN
                                                                IF Recipe <> xRec.Recipe THEN BEGIN
                                                                  IF Recipe <> '' THEN
                                                                    TESTFIELD("Surcharge Type", "Surcharge Type"::" ");
                                                                  IF EstLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.") THEN BEGIN
                                                                    IF FORMAT(Rec) <> FORMAT(EstLineRec) THEN //Call 23762
                                                                      MODIFY;  //save possible changes
                                                                    IF xRec.Recipe <> '' THEN
                                                                      IF NOT RecipeRec.GET("Recipe Group", Recipe) THEN
                                                                        CheckRenameRecipe;
                                                                    EstLineRec.COPY(Rec);
                                                                    EstRcpLineRec.RESET;
                                                                    EstRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
                                                                    EstRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
                                                                    EstRcpLineRec.SETRANGE("Part Group", "Part Group");
                                                                    EstRcpLineRec.SETRANGE(Part, Part);
                                                                    EstRcpLineRec.SETRANGE("Estimate Line", "Line No.");
                                                                    IF NOT EstRcpLineRec.ISEMPTY THEN //Call 23762
                                                                      EstRcpLineRec.DELETEALL(TRUE);  //contains update-action for totals of estimate line
                                                                    Rec := EstLineRec;
                                                                    FIND;
                                                                    Recipe := EstLineRec.Recipe;
                                                                    IF RecipeRec.GET("Recipe Group", Recipe) THEN BEGIN
                                                                      CopyRecipe;
                                                                      //CalculateTotals; //Call 23762 already happens in CopyRecipe
                                                                    END;
                                                                  END;
                                                                  IF NOT RecipeRec.GET("Recipe Group", Recipe) THEN BEGIN
                                                                    IF xRec.Recipe = '' THEN
                                                                      IF NOT CONFIRM(Text001, TRUE) THEN
                                                                        Recipe := xRec.Recipe;
                                                                  END ELSE BEGIN
                                                                    RecipeRec.TESTFIELD(Blocked, FALSE);
                                                                    Volume := RecipeRec.Volume;
                                                                    Description := RecipeRec.Description;
                                                                    "Unit of Measure" := RecipeRec."Unit of Measure";
                                                                    Condition := RecipeRec.Condition;
                                                                  END;
                                                                  "Norm Group" := '';  //db, 27-07-10: M20092
                                                                  "Sub Operation Code" := '';  //db, 27-07-10: M20092
                                                                  "Cost Object Labor" := '';
                                                                  "Cost Object Material" := '';
                                                                  "Cost Object Subcontracting" := '';
                                                                  "Cost Object Plant" := '';
                                                                  InitAdjustmentFactor;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe }
    { 75  ;   ;Recipe Lines Exist  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Recipe Line OLD" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                              Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                              Part Group=FIELD(Part Group),
                                                                                              Part=FIELD(Part),
                                                                                              Estimate Line=FIELD(Line No.),
                                                                                              Recipe Group=FIELD(Recipe Group),
                                                                                              Recipe=FIELD(Recipe)));
                                                   OnLookup=VAR
                                                              EstimateManagementRTC@1100525000 : Codeunit 11130010;
                                                            BEGIN
                                                            END;

                                                   CaptionML=ENU=Rcp. Lines;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 80  ;   ;Line No.            ;Integer       ;ValidateTableRelation=No;
                                                   CaptionML=ENU=Line No. }
    { 85  ;   ;Attached to Line No.;Integer       ;TableRelation="Estimate Line OLD"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part Group=FIELD(Part Group),
                                                                                                       Part=FIELD(Part));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=No }
    { 87  ;   ;Set Level           ;Integer       ;CaptionML=ENU=Set Level }
    { 90  ;   ;Set Code            ;Code10        ;TableRelation="Plant Set";
                                                   OnValidate=VAR
                                                                PlantSet@1100525000 : Record 11012587;
                                                              BEGIN
                                                                IF NOT PlantSet.GET("Set Code") THEN
                                                                  PlantSet.INIT;
                                                                Description := PlantSet.Description;
                                                                "Unit of Measure" := PlantSet."Unit of Measure";

                                                                EstimateMgmt.ModifyLinkedEstLines(0,Rec,0); //0:delete
                                                              END;

                                                   CaptionML=ENU=Set Code }
    { 100 ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                UpdateEst.CheckBackSlash(Description);
                                                              END;

                                                   CaptionML=ENU=Description }
    { 110 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                IF (Recipe <> '') THEN BEGIN  //db, 02-03-09: M14329
                                                                  IF CurrFieldNo = FIELDNO("Time Quantity") THEN
                                                                    UpdateTimeQuanRecipeLines;
                                                                  TESTFIELD("Time Quantity" , 1);
                                                                END;

                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 120 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 140 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Part Quantity");
                                                                UpdateRecipeTotals;
                                                                CheckIgnoreRecipeQuantity;  //db, 27-05-10: M13221

                                                                IF xRec.Quantity = 0 THEN
                                                                  EstimateMgmt.SetQuantityRatio(1)
                                                                ELSE
                                                                  EstimateMgmt.SetQuantityRatio(Quantity / xRec.Quantity);
                                                                EstimateMgmt.ModifyLinkedEstLines(1,Rec,0); //1:modify quantity

                                                                CalculateTotals;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF EnterQuantity(4) THEN
                                                                EditQuanSheet;
                                                            END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN BEGIN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 155 ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   OnValidate=BEGIN
                                                                DetermineNorm;
                                                              END;

                                                   CaptionML=ENU=Norm Group }
    { 157 ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   OnValidate=VAR
                                                                SubOperRec@11012000 : Record 11012166;
                                                                OperRec@11012001 : Record 11012165;
                                                              BEGIN
                                                                DetermineNormGroup;
                                                                DetermineNorm;

                                                                IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
                                                                  SubOperRec.TESTFIELD(Expired,FALSE);  //db, 07-12-09
                                                                  IF OperRec.GET(SubOperRec.Operation) THEN BEGIN
                                                                    IF ("Cost Object Labor" = '') OR (OldSubOperationDefault = TRUE) THEN BEGIN
                                                                      VALIDATE("Cost Object Labor", OperRec."Cost Object");
                                                                      CheckCostObject("Cost Object Labor",FALSE);
                                                                    END;
                                                                    IF OperRec."Rate Code" <> '' THEN
                                                                      VALIDATE("Rate Code", OperRec."Rate Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sub Operation Code }
    { 160 ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> FIELDNO("Production Rate") THEN
                                                                  IF Norm <> 0 THEN
                                                                    "Production Rate" := 1 / Norm
                                                                  ELSE
                                                                    "Production Rate" := 0;

                                                                CalculateTotals;  //db, 24-09-12: norm and production rate used to calculate hours
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 165 ;   ;Production Rate     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Production Rate" <> 0 THEN
                                                                  VALIDATE(Norm, 1 / "Production Rate")
                                                                ELSE
                                                                  VALIDATE(Norm,1);
                                                              END;

                                                   CaptionML=ENU=Production Rate;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 170 ;   ;Rate Code           ;Code10        ;TableRelation="Estimate Rate"."Rate Code" WHERE (Estimate No.=FIELD(Estimate No.));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;

                                                                IF GetRate THEN BEGIN //Call 23762
                                                                  IF "Cost Object Labor" = '' THEN
                                                                    "Cost Object Labor" := RateRec."Cost Object";  //db, 14-06-07
                                                                  IF (EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Budget Rate") OR  //db, 28-03-08 (M5480)
                                                                     (EstSetup."Upd. Cost Object by Rate Code") THEN //mg, 10-12-10: M20042
                                                                    IF RateRec."Cost Object" <> '' THEN
                                                                      "Cost Object Labor" := RateRec."Cost Object";  //db, 14-06-07
                                                                  Rate := RateRec."Cost Rate";
                                                                  "Rate Type" := RateRec."Rate Type";
                                                                  IF "Rate Type" = "Rate Type"::Minuts THEN
                                                                    "Team Size" := RateRec."Team Size"
                                                                  ELSE
                                                                    "Team Size" := 0;
                                                                  //check conversion norm after change of rate type and team size:
                                                                  IF ("Rate Type" <> xRec."Rate Type") OR ("Team Size" <> xRec."Team Size") THEN
                                                                    ConvertNorm(("Rate Type" <> xRec."Rate Type"), ("Team Size" <> xRec."Team Size"));
                                                                END ELSE BEGIN
                                                                  IF "Sub Operation Code" <> '' THEN
                                                                    TESTFIELD("Rate Code");
                                                                  Norm := 0;
                                                                  "Production Rate" := 0;
                                                                  Rate := 0;
                                                                  CLEAR("Rate Type");
                                                                  "Team Size" := 0;
                                                                  "Wage Component" := '';  //DP00236
                                                                END;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 180 ;   ;Rate                ;Decimal       ;CaptionML=ENU=Rate;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 190 ;   ;Material Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Material Price" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeEstLineIsPlant(Rec) THEN BEGIN
                                                                    ChkFieldsEmpty(2); //BuyBack
                                                                    IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
                                                                      ChkFieldsEmpty(3); //Discount
                                                                  END;
                                                                CalculateDiscount;
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",0,"Material Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Material Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 200 ;   ;Subcontracting Price;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Subcontracting Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 210 ;   ;Plant Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Plant Price" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeEstLineIsMat(Rec) THEN BEGIN
                                                                    ChkFieldsEmpty(2); //BuyBack
                                                                    IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
                                                                      ChkFieldsEmpty(3); //Discount
                                                                  END;

                                                                CalculateDiscount;
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",0,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Plant Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 211 ;   ;Buy Back Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Buy Back Price" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeEstLineIsMat(Rec) = EstimateMgmt.CostTypeEstLineIsPlant(Rec) THEN
                                                                    ERROR(Text010);

                                                                IF EstimateMgmt.CostTypeEstLineIsMat(Rec) THEN
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",1,"Material Price","Buy Back Price","Buy Back %")
                                                                ELSE
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",1,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 214 ;   ;Buy Back %          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Buy Back %" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeEstLineIsMat(Rec) = EstimateMgmt.CostTypeEstLineIsPlant(Rec) THEN
                                                                    ERROR(Text010);

                                                                IF EstimateMgmt.CostTypeEstLineIsMat(Rec) THEN
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",2,"Material Price","Buy Back Price","Buy Back %")
                                                                ELSE
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",2,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 220 ;   ;Hours               ;Decimal       ;CaptionML=ENU=Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 230 ;   ;Labor Amount        ;Decimal       ;CaptionML=ENU=Labor Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 240 ;   ;Material Amount     ;Decimal       ;CaptionML=ENU=Material Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 241 ;   ;Gross Amount        ;Decimal       ;CaptionML=ENU=Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 250 ;   ;Subcontracting Amount;Decimal      ;CaptionML=ENU=Subcontracting Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 260 ;   ;Plant Amount        ;Decimal       ;CaptionML=ENU=Plant Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 261 ;   ;Buy Back Amount     ;Decimal       ;CaptionML=ENU=Buy Back Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 265 ;No ;Sundry Amount       ;Decimal       ;CaptionML=ENU=Sundry Amount;
                                                   Description=DP00381;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 280 ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                UpdateProjElem(0);
                                                              END;

                                                   CaptionML=ENU=Project No. }
    { 290 ;   ;Element             ;Code20        ;TableRelation="Base Element";
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.", Element) THEN
                                                                      ElemRec.GET(Element);
                                                                  END ELSE
                                                                    ElemRec.GET(Element);

                                                                UpdateProjElem(1);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                                ProjElemRec.Element := Element;
                                                                IF PAGE.RUNMODAL(PAGE::"Project Element List", ProjElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ProjElemRec.Element);
                                                              END ELSE BEGIN
                                                                ElemRec.Code := Element;
                                                                IF PAGE.RUNMODAL(PAGE::Elements, ElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ElemRec.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 300 ;   ;Total Recipe        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD".Amount WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                   Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                   Part Group=FIELD(Part Group),
                                                                                                   Part=FIELD(Part),
                                                                                                   Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Total Recipe;
                                                   Description=DP00381: range 301-399 reserved flowfields;
                                                   Editable=No }
    { 340 ;   ;Hours Part          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD".Hours WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                    Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                    Part Group=FIELD(Part Group),
                                                                                                    Part=FIELD(Part)));
                                                   CaptionML=ENU=Hours Part;
                                                   Editable=No }
    { 350 ;   ;Labor Part          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Labor Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part Group=FIELD(Part Group),
                                                                                                             Part=FIELD(Part)));
                                                   CaptionML=ENU=Labor Part;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 360 ;   ;Material Part       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Material Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                Part Group=FIELD(Part Group),
                                                                                                                Part=FIELD(Part)));
                                                   CaptionML=ENU=Material Part;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 361 ;   ;Gross Price Part    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Gross Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part Group=FIELD(Part Group),
                                                                                                             Part=FIELD(Part)));
                                                   CaptionML=ENU=Gross Price Part;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 370 ;   ;Subcontracting Part ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Subcontracting Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                      Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                      Part Group=FIELD(Part Group),
                                                                                                                      Part=FIELD(Part)));
                                                   CaptionML=ENU=Subcontracting Part;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 380 ;   ;Plant Part          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD"."Plant Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part Group=FIELD(Part Group),
                                                                                                             Part=FIELD(Part)));
                                                   CaptionML=ENU=Plant Part;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 390 ;   ;Total Part          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Estimate Line OLD".Amount WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                     Part Group=FIELD(Part Group),
                                                                                                     Part=FIELD(Part)));
                                                   CaptionML=ENU=Total Part;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 400 ;   ;Text Composition    ;Text50        ;CaptionML=ENU=Text Composition;
                                                   Description=X055 }
    { 401 ;   ;Rounding Line       ;Boolean       ;CaptionML=ENU=Rounding Line;
                                                   Description=X007 }
    { 460 ;   ;Chapter             ;Code10        ;CaptionML=ENU=Chapter }
    { 470 ;   ;Paragraph           ;Code10        ;CaptionML=ENU=Paragraph }
    { 475 ;   ;Chapter (Sub-Estimate);Code10      ;CaptionML=ENU=Chapter Sub-Estimate }
    { 476 ;   ;Paragraph (Sub-Estimate);Code10    ;CaptionML=ENU=Paragraph Sub-Estimate }
    { 480 ;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Labor }
    { 490 ;   ;Cost Object Material;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Material),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Material" <> '' THEN
                                                                    IF xRec."Cost Object Material" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Material, "Cost Object Material" )
                                                                    ELSE
                                                                      IF "Cost Object Material" <> xRec."Cost Object Material" THEN
                                                                        IF "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Material, "Cost Object Material" );
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Material }
    { 500 ;   ;Cost Object Subcontracting;Code20  ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Subcontracting),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Subcontracting" <> '' THEN
                                                                    IF xRec."Cost Object Subcontracting" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Subcontracting, "Cost Object Subcontracting" )
                                                                    ELSE
                                                                      IF "Cost Object Subcontracting" <> xRec."Cost Object Subcontracting" THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Subcontracting, "Cost Object Subcontracting");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Subcontracting }
    { 510 ;   ;Cost Object Plant   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Plant),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                EstSetup.GET;
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Plant" <> '' THEN
                                                                    IF xRec."Cost Object Plant" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Plant, "Cost Object Plant")
                                                                    ELSE
                                                                      IF "Cost Object Plant" <> xRec."Cost Object Plant" THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Plant, "Cost Object Plant");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Plant }
    { 515 ;No ;Cost Object Sundry  ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Sundry;
                                                   Description=DP00381 }
    { 520 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ClearFields(1); //Plant
                                                                  GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::Item, EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 530 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 531 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Editable=No }
    { 532 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Editable=No }
    { 533 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Editable=No }
    { 540 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 560 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item",EstRec,TRUE)
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor",EstRec,TRUE);
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 570 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 580 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 588 ;   ;Purchase Discount % ;Decimal       ;OnValidate=VAR
                                                                Estimate@1100528600 : Record 11012151;
                                                              BEGIN
                                                                IF CurrFieldNo = FIELDNO("Purchase Discount %") THEN BEGIN
                                                                  IF Estimate.GET("Estimate No.") THEN
                                                                    Estimate.TESTFIELD("Estimate Type", Estimate."Estimate Type"::Sales);
                                                                  IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN
                                                                    ERROR(Text012, FIELDCAPTION("Purchase Discount %"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 589 ;   ;Sales Discount %    ;Decimal       ;OnValidate=VAR
                                                                Estimate@1100528600 : Record 11012151;
                                                              BEGIN
                                                                IF CurrFieldNo = FIELDNO("Sales Discount %") THEN BEGIN
                                                                  IF Estimate.GET("Estimate No.") THEN
                                                                    Estimate.TESTFIELD("Estimate Type", Estimate."Estimate Type"::Cost);
                                                                  IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN
                                                                    ERROR(Text012, FIELDCAPTION("Sales Discount %"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 590 ;   ;Discount %          ;Decimal       ;OnValidate=VAR
                                                                Estimate@1100528600 : Record 11012151;
                                                              BEGIN
                                                                CalculateNettPrice;
                                                                CalculateTotals;

                                                                IF "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                  IF Estimate.GET("Estimate No.") THEN BEGIN
                                                                    CASE Estimate."Estimate Type" OF
                                                                      Estimate."Estimate Type"::Cost:
                                                                        "Purchase Discount %" := "Discount %";
                                                                      Estimate."Estimate Type"::Sales:
                                                                        "Sales Discount %" := "Discount %";
                                                                    END;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 591 ;   ;Surcharge %         ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Part Quantity");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 594 ;   ;Surcharge Type      ;Option        ;OnValidate=BEGIN
                                                                IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
                                                                  IF (xRec."Surcharge Type" = xRec."Surcharge Type"::" ") AND
                                                                     (Quantity + Norm + "Material Price" + "Subcontracting Price" + "Plant Price" <> 0) THEN
                                                                        ERROR(Text005);
                                                                  "Norm Group" := '';
                                                                  "Sub Operation Code" := '';
                                                                  InitAdjustmentFactor;
                                                                END ELSE BEGIN
                                                                  ERROR(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Surcharge Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant] }
    { 600 ;   ;Price Reference Date;Date          ;CaptionML=ENU=Price Reference Date;
                                                   Editable=No }
    { 610 ;   ;Part Quantity       ;Decimal       ;OnValidate=BEGIN
                                                                "Part Quantity" := GetPartQuantity;
                                                              END;

                                                   CaptionML=ENU=Part Quantity;
                                                   Editable=No }
    { 620 ;   ;Cumulative Hours    ;Decimal       ;CaptionML=ENU=Cumulative Hours }
    { 630 ;   ;Cumulative Labor    ;Decimal       ;CaptionML=ENU=Cumulative Labor;
                                                   AutoFormatType=1 }
    { 640 ;   ;Cumulative Material ;Decimal       ;CaptionML=ENU=Cumulative Material;
                                                   AutoFormatType=1 }
    { 641 ;   ;Cumulative Gross Price;Decimal     ;CaptionML=ENU=Cumulative Gross Price;
                                                   AutoFormatType=1 }
    { 650 ;   ;Cumulative Subcontracting;Decimal  ;CaptionML=ENU=Cumulative Subcontracting;
                                                   AutoFormatType=1 }
    { 660 ;   ;Cumulative Plant    ;Decimal       ;CaptionML=ENU=Cumulative Plant;
                                                   AutoFormatType=1 }
    { 661 ;   ;Cumulative Buy Back ;Decimal       ;CaptionML=ENU=Cumulative Buy Back;
                                                   AutoFormatType=1 }
    { 670 ;   ;Cumulative Total    ;Decimal       ;CaptionML=ENU=Cumulative Total;
                                                   AutoFormatType=1 }
    { 671 ;   ;Cumulative Weight   ;Decimal       ;CaptionML=ENU=Cumulative Weight;
                                                   DecimalPlaces=0:2 }
    { 680 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   OnValidate=BEGIN
                                                                ValidateStatus;
                                                              END;

                                                   CaptionML=ENU=Line Status }
    { 690 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 691 ;   ;Internal Text Block ;Boolean       ;CaptionML=ENU=Internal Text Block;
                                                   Editable=No }
    { 692 ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line (Group)" WHERE (Table Name=CONST(Estimate),
                                                                                                   Estimate No.=FIELD(Estimate No.),
                                                                                                   Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                   Part Group=FIELD(Part Group),
                                                                                                   Part=FIELD(Part),
                                                                                                   Estimate Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 693 ;   ;Print on Quote      ;Boolean       ;CaptionML=ENU=Print on Quote;
                                                   Description=X007 }
    { 694 ;   ;Extension           ;Boolean       ;CaptionML=ENU=Extension;
                                                   Description=X007 }
    { 700 ;   ;Rate Type           ;Option        ;CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=Hours,Minuts;
                                                   OptionString=Hours,Minuts;
                                                   Editable=No }
    { 710 ;   ;Team Size           ;Decimal       ;CaptionML=ENU=Team Size;
                                                   Editable=No }
    { 720 ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 730 ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 735 ;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 740 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 741 ;   ;Internal Text       ;Text250       ;OnValidate=BEGIN
                                                                "Internal Text Block" := "Internal Text" <> '';
                                                              END;

                                                   CaptionML=ENU=Internal Text }
    { 750 ;   ;Volume              ;Decimal       ;CaptionML=ENU=Volume;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 755 ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 756 ;   ;Total Weight        ;Decimal       ;CaptionML=ENU=Total Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 760 ;   ;Uncoded Labor       ;Boolean       ;CaptionML=ENU=Uncoded Labor;
                                                   Editable=No }
    { 761 ;   ;Uncoded Material    ;Boolean       ;CaptionML=ENU=Uncoded Material;
                                                   Editable=No }
    { 762 ;   ;Uncoded Subcontracting;Boolean     ;CaptionML=ENU=Uncoded Subcontracting;
                                                   Editable=No }
    { 764 ;   ;Uncoded Plant       ;Boolean       ;CaptionML=ENU=Uncoded Plant;
                                                   Editable=No }
    { 765 ;   ;Uncoded Line        ;Boolean       ;CaptionML=ENU=Uncoded Line;
                                                   Editable=No }
    { 770 ;   ;Adjustment Factor Hours;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(1);
                                                              END;

                                                   CaptionML=ENU=Hours Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 771 ;   ;Adjustment Factor Material;Decimal ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(2);
                                                              END;

                                                   CaptionML=ENU=Material Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 772 ;   ;Adjustment Factor Subcontr.;Decimal;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(3);
                                                              END;

                                                   CaptionML=ENU=Subcontr. Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 773 ;   ;Adjustment Factor Plant;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(4);
                                                              END;

                                                   CaptionML=ENU=Plant Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 775 ;   ;Cum. Adj. Factor Hours;Decimal     ;CaptionML=ENU=Hours Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 776 ;   ;Cum. Adj. Factor Material;Decimal  ;CaptionML=ENU=Material Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 777 ;   ;Cum. Adj. Factor Subcontr.;Decimal ;CaptionML=ENU=Subcontr. Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 778 ;   ;Cum. Adj. Factor Plant;Decimal     ;CaptionML=ENU=Plant Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 780 ;   ;Ask for Quote       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Ask for Quote" THEN BEGIN
                                                                  IF (("Material Price" = 0) AND ("Cost Object Material" = '')) AND
                                                                     (("Subcontracting Price" = 0) AND ("Cost Object Subcontracting" = '')) AND
                                                                     (("Plant Price" = 0) AND ("Cost Object Plant" = '')) THEN BEGIN
                                                                    "Ask for Quote" := FALSE;
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      FIELDERROR("Ask for Quote", Text002);
                                                                  END ELSE BEGIN
                                                                    IF ( (("Material Price" <> 0) OR ("Cost Object Material" <> '')) AND
                                                                         (("Subcontracting Price" <> 0) OR ("Cost Object Subcontracting" <> '')) ) OR
                                                                       ( (("Material Price" <> 0) OR ("Cost Object Material" <> '')) AND
                                                                         (("Plant Price" <> 0) OR ("Cost Object Plant" <> '')) ) OR
                                                                       ( (("Subcontracting Price" <> 0) OR ("Cost Object Subcontracting" <> '')) AND
                                                                         (("Plant Price" <> 0) OR ("Cost Object Plant" <> '')) ) THEN BEGIN
                                                                      "Ask for Quote" := FALSE;
                                                                      IF CurrFieldNo <> 0 THEN
                                                                        FIELDERROR("Ask for Quote", Text003);
                                                                    END;
                                                                  END;
                                                                END;

                                                                RecipeLineRec.RESET;
                                                                RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
                                                                RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
                                                                RecipeLineRec.SETRANGE("Part Group","Part Group");
                                                                RecipeLineRec.SETRANGE(Part,Part);
                                                                RecipeLineRec.SETRANGE("Estimate Line","Line No.");
                                                                IF RecipeLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
                                                                  REPEAT
                                                                    RecipeLineRec.VALIDATE("Ask for Quote", "Ask for Quote");
                                                                    RecipeLineRec.MODIFY;
                                                                  UNTIL RecipeLineRec.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ask for Quote }
    { 790 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 800 ;   ;Document No.        ;Code20        ;TableRelation="Document Properties";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Document No. }
    { 810 ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                EstRec.TESTFIELD("Coding System");

                                                                IF Code <> '' THEN BEGIN
                                                                  FormatMgt.SetSelection(EstRec."Coding System");
                                                                  FormatMgt.FormatElem(Code,4,'');
                                                                  CodeRec.GET(EstRec."Coding System", Code);
                                                                END;

                                                                EstCodeRec.RESET;
                                                                EstCodeRec.SETRANGE("Estimate No.", "Estimate No.");
                                                                EstCodeRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
                                                                EstCodeRec.SETRANGE("Part Group", "Part Group");
                                                                EstCodeRec.SETRANGE(Part, Part);
                                                                EstCodeRec.SETRANGE("Estimate Line", "Line No.");
                                                                EstCodeRec.SETRANGE("Coding System", EstRec."Coding System");
                                                                EstCodeRec.DELETEALL;

                                                                IF Code <> '' THEN BEGIN
                                                                  EstCodeRec.INIT;
                                                                  EstCodeRec."Estimate No." := "Estimate No.";
                                                                  EstCodeRec."Sub-Estimate No." := "Sub-Estimate No.";
                                                                  EstCodeRec."Part Group" := "Part Group";
                                                                  EstCodeRec.Part := Part;
                                                                  EstCodeRec."Estimate Line" := "Line No.";
                                                                  EstCodeRec."Recipe Group" := '';
                                                                  EstCodeRec.Recipe := '';
                                                                  EstCodeRec."Recipe Line" := 0;
                                                                  EstCodeRec."Coding System" := EstRec."Coding System";
                                                                  EstCodeRec.Code := Code;
                                                                  EstCodeRec.INSERT;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetEstimate("Estimate No.", FALSE); //Call 23762
                                                              EstRec.TESTFIELD("Coding System");
                                                              CodeRec.SETRANGE("Coding System", EstRec."Coding System");
                                                              CodeRec.Code := Code;
                                                              IF PAGE.RUNMODAL(PAGE::"Codes per Coding System", CodeRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Code, CodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Code }
    { 820 ;   ;Price Agreement     ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 821 ;   ;Norm Agreement      ;Boolean       ;CaptionML=ENU=Norm Agreement }
    { 822 ;   ;Subcontracting Agreement;Boolean   ;CaptionML=ENU=Subcontracting Agreement }
    { 823 ;   ;Plant Agreement     ;Boolean       ;CaptionML=ENU=Plant Agreement }
    { 830 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 831 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 840 ;   ;Condition           ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Condition;
                                                   Editable=No }
    { 850 ;   ;Removal Contribution;Boolean       ;CaptionML=ENU=Removal Contribution }
    { 860 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 870 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 871 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality }
    { 872 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=ENU=Trade Expertise }
    { 890 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor.No. WHERE (Subcontractor=CONST(Yes));
                                                   CaptionML=ENU=Subcontractor }
    { 891 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 892 ;   ;Scheme Code         ;Code15        ;CaptionML=ENU=Scheme Code }
    { 893 ;   ;Comments            ;Text50        ;CaptionML=ENU=Comments }
    { 894 ;   ;Supply              ;Boolean       ;CaptionML=ENU=Supply }
    { 895 ;   ;Comments for Logistics;Text50      ;CaptionML=ENU=Comments for Logistics }
    { 896 ;   ;Material Sheet      ;Option        ;CaptionML=ENU=Material Sheet;
                                                   OptionCaptionML=ENU=Customer and Assemly,Customer Only,Assembly only,Do not report;
                                                   OptionString=Customer and Assemly,Customer Only,Assembly only,Do not report }
    { 897 ;   ;E-Plan Item         ;Code50        ;TableRelation="E-Plan Item".No.;
                                                   CaptionML=ENU=E-Plan Item;
                                                   Editable=No }
    { 900 ;   ;Quantity Model Exist;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Model Line Quantity" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                           Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                           Part Group=FIELD(Part Group),
                                                                                                           Part=FIELD(Part),
                                                                                                           Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Quantity Model Exist;
                                                   Editable=No }
    { 901 ;   ;Quantity Sheet Exist;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Quantity Sheet" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                      Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                      Part Group=FIELD(Part Group),
                                                                                                      Part=FIELD(Part),
                                                                                                      Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Quantity Sheet Exist;
                                                   Editable=No }
    { 905 ;   ;Quantity Sheet Relation Exist;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Quantity Relation" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                         Part Group=FIELD(Part Group),
                                                                                                         Part=FIELD(Part),
                                                                                                         Estimate Line=FIELD(Line No.)));
                                                   CaptionML=ENU=Quantity Sheet Relation Exist;
                                                   Editable=No }
    { 910 ;   ;Object No.          ;Code20        ;TableRelation="Standard Object".No.;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Object No. }
    { 911 ;   ;Object Customer     ;Code20        ;CaptionML=ENU=Object Customer }
    { 920 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                IF ("Plant Type" <> xRec."Plant Type") AND ("Plant Type" <> '') THEN BEGIN
                                                                  IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
                                                                    ClearFields(0); //Material
                                                                  GetDefaultsPlantType;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 921 ;   ;Plant Price Type    ;Option        ;CaptionML=ENU=Plant Price Type;
                                                   OptionCaptionML=ENU=" ,Day,Week,,Month,,,,,Hour";
                                                   OptionString=[ ,Day,Week,,Month,,,,,Hour];
                                                   Description=DP01047: synchronise options;
                                                   Editable=No }
    { 922 ;   ;Start Rental Period ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;

                                                                EstimateMgmt.ModifyLinkedEstLines(3,Rec,FIELDNO("Start Rental Period")); //3:fields
                                                                //Call 32328 2-9-13 sn.
                                                                IF Recipe <> '' THEN BEGIN
                                                                  RecipeLineRec.RESET;
                                                                  RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
                                                                  RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
                                                                  RecipeLineRec.SETRANGE("Part Group","Part Group");
                                                                  RecipeLineRec.SETRANGE(Part,Part);
                                                                  RecipeLineRec.SETRANGE("Estimate Line","Line No.");
                                                                  IF RecipeLineRec.FINDSET() THEN BEGIN
                                                                    REPEAT
                                                                      IF (RecipeLineRec."Plant Type" <> '') OR (RecipeLineRec."Set Code" <> '') THEN
                                                                        RecipeLineRec.VALIDATE("Start Rental Period", "Start Rental Period");
                                                                        RecipeLineRec.MODIFY;
                                                                    UNTIL RecipeLineRec.NEXT = 0;
                                                                  END;
                                                                END;
                                                                //Call 32328 2-9-13 en.
                                                              END;

                                                   CaptionML=ENU=Start Rental Period }
    { 923 ;   ;End Rental Period   ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;

                                                                EstimateMgmt.ModifyLinkedEstLines(3,Rec,FIELDNO("End Rental Period")); //3:fields

                                                                //Call 32328 2-9-13 sn.
                                                                IF Recipe <> '' THEN BEGIN
                                                                  RecipeLineRec.RESET;
                                                                  RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
                                                                  RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
                                                                  RecipeLineRec.SETRANGE("Part Group","Part Group");
                                                                  RecipeLineRec.SETRANGE(Part,Part);
                                                                  RecipeLineRec.SETRANGE("Estimate Line","Line No.");
                                                                  IF RecipeLineRec.FINDSET() THEN BEGIN
                                                                    REPEAT
                                                                      IF (RecipeLineRec."Plant Type" <> '') OR (RecipeLineRec."Set Code" <> '') THEN
                                                                        RecipeLineRec.VALIDATE("End Rental Period", "End Rental Period");
                                                                        RecipeLineRec.MODIFY;
                                                                    UNTIL RecipeLineRec.NEXT = 0;
                                                                  END;
                                                                END;
                                                                //Call 32328 2-9-13 en.
                                                              END;

                                                   CaptionML=ENU=End Rental Period }
    { 924 ;   ;Rental Period Formula;DateFormula  ;OnValidate=BEGIN
                                                                IF FORMAT("Rental Period Formula") <> '' THEN BEGIN
                                                                  IF ("Set Code" = '') AND (Recipe = '') THEN
                                                                    TESTFIELD("Plant Price Type");
                                                                  VALIDATE("Time Quantity",EstimateMgmt.ConvPlantCalcPeriod("Rental Period Formula","Plant Price Type"));
                                                                END ELSE BEGIN
                                                                  IF "Rental Time Units" <> 0 THEN
                                                                    VALIDATE("Time Quantity","Rental Time Units")
                                                                  ELSE
                                                                    VALIDATE("Time Quantity",1);
                                                                END;

                                                                EstimateMgmt.ModifyLinkedEstLines(3,Rec,FIELDNO("Rental Period Formula")); //3:fields

                                                                //Call 32328 2-9-13 sn.
                                                                IF Recipe <> '' THEN BEGIN
                                                                  RecipeLineRec.RESET;
                                                                  RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
                                                                  RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
                                                                  RecipeLineRec.SETRANGE("Part Group","Part Group");
                                                                  RecipeLineRec.SETRANGE(Part,Part);
                                                                  RecipeLineRec.SETRANGE("Estimate Line","Line No.");
                                                                  IF RecipeLineRec.FINDSET() THEN BEGIN
                                                                    REPEAT
                                                                      IF (RecipeLineRec."Plant Type" <> '') OR (RecipeLineRec."Set Code" <> '') THEN
                                                                        RecipeLineRec.VALIDATE("Rental Period Formula", "Rental Period Formula");
                                                                        RecipeLineRec.MODIFY;
                                                                    UNTIL RecipeLineRec.NEXT = 0;
                                                                  END;
                                                                END;
                                                                //Call 32328 2-9-13 en.
                                                              END;

                                                   CaptionML=ENU=Rental Period Formula }
    { 925 ;   ;Rental Time Units   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Rental Period Formula");

                                                                EstimateMgmt.ModifyLinkedEstLines(3,Rec,FIELDNO("Rental Time Units")); //3:fields
                                                              END;

                                                   CaptionML=ENU=Rental Time Units;
                                                   BlankZero=Yes }
    { 930 ;   ;Admicode            ;Code10        ;TableRelation="Admi Code";
                                                   OnValidate=VAR
                                                                lvAdmiCodeRec@1100485000 : Record 11012390;
                                                              BEGIN
                                                                IF Admicode <> '' THEN BEGIN
                                                                  lvAdmiCodeRec.GET(Admicode);
                                                                  IF Description = '' THEN
                                                                    Description := lvAdmiCodeRec.Description;

                                                                  IF ("Cost Object Material" = '') AND (lvAdmiCodeRec."Cost Object Material" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Material, lvAdmiCodeRec."Cost Object Material");
                                                                  END;

                                                                  IF ("Cost Object Subcontracting" = '') AND (lvAdmiCodeRec."Cost Object Subcontracting" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Subcontracting, lvAdmiCodeRec."Cost Object Subcontracting");
                                                                  END;

                                                                  IF ("Cost Object Plant" = '') AND (lvAdmiCodeRec."Cost Object Plant" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Plant, lvAdmiCodeRec."Cost Object Plant");
                                                                  END;

                                                                 END;
                                                              END;

                                                   CaptionML=ENU=Admi Code }
    { 940 ;   ;Purchase Action Mat.;Code10        ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Material }
    { 950 ;   ;Purchase Action Filter Mat.;Code10 ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Material }
    { 960 ;   ;Purchase Phase Mat. ;Code10        ;CaptionML=ENU=Purchase Phase Material;
                                                   Numeric=Yes }
    { 970 ;   ;Purchase Action Status Mat.;Option ;CaptionML=ENU=Purchase Action Status Material;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 980 ;   ;Purch. Action Appr. Date Mat.;Date ;CaptionML=ENU=Purch. Action Approval Date Material;
                                                   Editable=No }
    { 990 ;   ;Advised Mat.        ;Boolean       ;CaptionML=ENU=Advised Material }
    { 1000;   ;Purchase Action Subc.;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Subcontracting }
    { 1010;   ;Purchase Action Filter Subc.;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Subcontracting }
    { 1020;   ;Purchase Phase Subc.;Code10        ;CaptionML=ENU=Purchase Phase Subcontracting;
                                                   Numeric=Yes }
    { 1030;   ;Purchase Action Status Subc.;Option;CaptionML=ENU=Purchase Action Status Subcontracting;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1040;   ;Purch. Action Appr. Date Subc.;Date;CaptionML=ENU=Purch. Action Approval Date Subcontracting;
                                                   Editable=No }
    { 1050;   ;Advised Subc.       ;Boolean       ;CaptionML=ENU=Advised Subcontracting }
    { 1060;   ;Purchase Action Plant;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Plant }
    { 1070;   ;Purchase Action Filter Plant;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Plant }
    { 1080;   ;Purchase Phase Plant;Code10        ;CaptionML=ENU=Purchase Phase Plant;
                                                   Numeric=Yes }
    { 1090;   ;Purchase Action Status Plant;Option;CaptionML=ENU=Purchase Action Status Plant;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1100;   ;Purch. Action Appr. Date Plant;Date;CaptionML=ENU=Purch. Action Approval Date Plant;
                                                   Editable=No }
    { 1110;   ;Advised Plant       ;Boolean       ;CaptionML=ENU=Advised Plant }
    { 1120;   ;Ignore Part Quantity;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Ignore Part Quantity }
    { 1130;   ;Rental Contract Type;Option        ;CaptionML=ENU=Rental Contract Type;
                                                   OptionCaptionML=ENU=Quote,Order;
                                                   OptionString=Quote,Order;
                                                   Editable=No }
    { 1131;   ;Rental Contract No. ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Rental Contract Type),
                                                                                           Sales Document Type=CONST(RentalContract));
                                                   CaptionML=ENU=Rental Contract No.;
                                                   Editable=No }
    { 1135;   ;Rental Contract Copied on;Date     ;CaptionML=ENU=Rental Contract Copied on;
                                                   Editable=No }
    { 1140;   ;Service Order No.   ;Code20        ;TableRelation="Service Order".No. WHERE (No.=FIELD(Service Order No.));
                                                   CaptionML=ENU=Service Order No. }
    { 1200;   ;Capacity            ;Decimal       ;CaptionML=ENU=Capacity;
                                                   BlankNumbers=BlankZero;
                                                   Description=expired 6.0 }
    { 1201;   ;Capacity Unit       ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Capacity Unit;
                                                   Description=expired 6.0 }
    { 1202;   ;Construction Year   ;Integer       ;CaptionML=ENU=Construction Year;
                                                   BlankNumbers=BlankZero;
                                                   Description=expired 6.0 }
    { 1203;   ;Theoretical Life Span;DateFormula  ;CaptionML=ENU=Theoretical Life Span;
                                                   Description=expired 6.0 }
    { 1204;   ;Expected Life Span  ;DateFormula   ;CaptionML=ENU=Expected Life Span;
                                                   Description=expired 6.0 }
    { 1205;   ;Desired Condition   ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Desired Condition;
                                                   Description=expired 6.0 }
    { 1206;   ;Actual Condition    ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Actual Condition;
                                                   Description=expired 6.0 }
    { 1207;   ;Use Time            ;Decimal       ;CaptionML=ENU=Use Time (Hours/Week);
                                                   DecimalPlaces=2:;
                                                   Description=expired 6.0 }
    { 1208;   ;Object Type         ;Text30        ;CaptionML=ENU=Object Type }
    { 1209;   ;Object Brand        ;Text30        ;CaptionML=ENU=Object Brand }
    { 1215;   ;Part of Line        ;Integer       ;TableRelation="Estimate Line OLD"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part Group=FIELD(Part Group),
                                                                                                       Part=FIELD(Part));
                                                   OnValidate=BEGIN
                                                                DetermineBOMLevel("Part of Line","Level BOM");
                                                              END;

                                                   CaptionML=ENU=Part of Line }
    { 1220;   ;Original Quantity   ;Decimal       ;CaptionML=ENU=Original Quantity BOM;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 1225;   ;Level BOM           ;Integer       ;CaptionML=ENU=Level BOM;
                                                   Description=Level after exploding BOM-Item;
                                                   Editable=No }
    { 1230;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=BOM Item No.;
                                                   Description=Original Item before exploding BOM }
    { 1240;   ;Project Planning Activity Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningActivity@1100528402 : Record 11012431;
                                                                ProjectPlanningBaseActivity@1100528401 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Planning Activity Code", 20, '');
                                                                IF "Project Planning Activity Code" <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjectPlanningActivity.GET("Project No." + "Project Planning Activity Code") THEN
                                                                      ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                                  END ELSE
                                                                    ProjectPlanningBaseActivity.GET("Project Planning Activity Code");

                                                                UpdateProjPlanActCode;
                                                              END;

                                                   OnLookup=VAR
                                                              ProjectPlanningActivity@1100528401 : Record 11012431;
                                                              ProjectPlanningBaseActivity@1100528400 : Record 11012434;
                                                            BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
                                                                ProjectPlanningActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Project Planning Activity List", ProjectPlanningActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningActivity.Code);
                                                              END ELSE BEGIN
                                                                ProjectPlanningBaseActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Proj. Planning Base Activities", ProjectPlanningBaseActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningBaseActivity.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Planning Activity Code }
    { 1250;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   OnValidate=BEGIN
                                                                CalculateTotals;  //C026032
                                                              END;

                                                   CaptionML=ENU=Wage Component }
    { 1260;No ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Extension Contract;
                                                   Description=DP00260 }
    { 1270;   ;Price History 0 Exists;Boolean     ;CaptionML=ENU=Price History 0 Exists;
                                                   Editable=No }
    { 1280;   ;Quantity Sheet Feature;Code10      ;TableRelation="Est. Quantity Sheet Feature";
                                                   CaptionML=ENU=Quantity Sheet Feature;
                                                   Description=DP00686 }
    { 2000;No ;Reserved range DP00381;Text1       ;CaptionML=ENU=Cost Type (Price);
                                                   Description=DP00381: range above 2000 reserved }
    { 11128270;;Price History Found;Boolean       ;CaptionML=ENU=Price History Found;
                                                   Description=EVRY }
    { 11128271;;Price History Vendor No.;Code20   ;Description=EVRY }
  }
  KEYS
  {
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Line No.;
                                                   SumIndexFields=Hours,Labor Amount,Material Amount,Gross Amount,Subcontracting Amount,Plant Amount,Amount,Cumulative Hours,Cumulative Labor,Cumulative Material,Cumulative Gross Price,Cumulative Subcontracting,Cumulative Plant,Cumulative Total,Volume;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Estimate No.,Chapter (Sub-Estimate)     ;SumIndexFields=Hours,Labor Amount,Material Amount,Gross Amount,Subcontracting Amount,Plant Amount,Amount,Cumulative Hours,Cumulative Labor,Cumulative Material,Cumulative Gross Price,Cumulative Subcontracting,Cumulative Plant,Cumulative Total;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Paragraph (Sub-Estimate)   ;SumIndexFields=Hours,Labor Amount,Material Amount,Gross Amount,Subcontracting Amount,Plant Amount,Amount,Cumulative Hours,Cumulative Labor,Cumulative Material,Cumulative Gross Price,Cumulative Subcontracting,Cumulative Plant,Cumulative Total;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Chapter   ;SumIndexFields=Hours,Labor Amount,Material Amount,Gross Amount,Subcontracting Amount,Plant Amount,Amount,Cumulative Hours,Cumulative Labor,Cumulative Material,Cumulative Gross Price,Cumulative Subcontracting,Cumulative Plant,Cumulative Total;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Paragraph ;SumIndexFields=Hours,Labor Amount,Material Amount,Gross Amount,Subcontracting Amount,Plant Amount,Amount,Cumulative Hours,Cumulative Labor,Cumulative Material,Cumulative Gross Price,Cumulative Subcontracting,Cumulative Plant,Cumulative Total;
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Recipe Group,Recipe }
    {    ;Purchase Route Reference,Ask for Quote   }
    {    ;Estimate No.,Purchase Action Mat.        }
    {    ;Estimate No.,Plant Type                 ;KeyGroups=PLTEST }
    {    ;Estimate No.,Code                        }
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Attached to Line No. }
    {    ;Text Composition                         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012012 : TextConst 'ENU=Rename not allowed, already lines present for recipe %1';
      EstSetup@1100485004 : Record 11012150;
      EstRec@11012000 : Record 11012151;
      SubEstRec@11012001 : Record 11012152;
      EstPartRec@11012002 : Record 11012153;
      EstLineRec@1210190000 : Record 11012154;
      RecipeRec@11012006 : Record 11012155;
      RecipeLineRec@11012003 : Record 11012156;
      StdRcpLineRec@11012004 : Record 11012156;
      EstRcpLineRec@11012005 : Record 11012156;
      TmpStdRcpLine@1210190021 : TEMPORARY Record 11012156;
      TmpStdChrgRec@1210190022 : TEMPORARY Record 11012175;
      TmpRcpLineRec@1100525007 : TEMPORARY Record 11012156;
      TmpChrgRec@1210190014 : TEMPORARY Record 11012175;
      TmpRecipe@1210190025 : TEMPORARY Record 11012155;
      TextRec@1100525000 : Record 11020595;
      EstModelRec@1100485001 : Record 11012196;
      EstModelLineRec@1100485000 : Record 11012197;
      EstCodeRec@1210190011 : Record 11012194;
      CodeRec@1210190012 : Record 11012089;
      RateRec@11012007 : Record 11012160;
      TradeItemRec@1210190018 : Record 11012317;
      BasicItemRec@1210190005 : Record 11012316;
      ItemRec@1210190003 : Record 27;
      DimValRec@1210190001 : Record 349;
      ElemRec@1210190020 : Record 11012060;
      ProjElemRec@1210190019 : Record 11012010;
      TradeExpRec@1100485002 : Record 11020286;
      DimMgt@1210190002 : Codeunit 408;
      FormatMgt@11012008 : Codeunit 11012022;
      UpdateEst@1210190007 : Codeunit 11012155;
      ValidateCu@1210190008 : Codeunit 11012033;
      SearchRateCu@1100525001 : Codeunit 11012567;
      EstimateMgmt@1100525002 : Codeunit 11012153;
      ItemTypeOpt@11012010 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text001@1210190004 : TextConst 'ENU="Standard Recipe not present; create Estimate Recipe ?"';
      Text002@1210190010 : TextConst 'ENU=only allowed for material, subcontracting or plant (fill one of the prices or cost objects)';
      Text003@1210190009 : TextConst 'ENU=not allowed  for a combination of cost types (material, subcontracting and/or plant), split the estimate line';
      Text004@1210190013 : TextConst 'ENU=Remove Charge Line';
      Text005@1210190015 : TextConst 'ENU=Switch to Surcharge Line not allowed for Estimate Line with filled Quantity, Norm or Price';
      gvCostType@1100485005 : 'Labor,Material,Subcontracting,Plant,Sundry';
      Text006@1100485007 : TextConst 'ENU=Default Purchase Action %1 not present for Estimate %2.';
      Text007@1100485006 : TextConst 'ENU=%1 of %2 is not adopted, because Status is %3.';
      Text008@1100485009 : TextConst 'ENU=Copy Purchase action from new Cost Object?\\';
      Text009@1100485008 : TextConst 'ENU=Only empty fields will be filled. Existing data will not be changed.';
      Text010@1100525003 : TextConst 'ENU=Discount and/or Buy Back cannot be assigned properly. Cost type should be either Material or Plant (but not both).';
      TotalWeight@1100525005 : Decimal;
      TotalBuyBack@1100525006 : Decimal;
      Text011@1100525004 : TextConst 'ENU=Add Line first.';
      EstimateCodesPresent@1210190026 : Boolean;
      EstimateCodesPresentChecked@1210190024 : Boolean;
      RatePresent@1210190016 : Boolean;
      SubEstPresent@1210190017 : Boolean;
      UseTempTables@1210190023 : Boolean;
      Text012@1100528600 : TextConst 'ENU=%1 can only be changed with lines without Items';
      Text999@1100525008 : TextConst 'ENU=Convert Estimate: old Estimate Module is expired';

    PROCEDURE CalculateTotals@1();
    VAR
      WageCompRec@1100528900 : Record 11012014;
      OverTimeFactor@1100528901 : Decimal;
    BEGIN
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
        "Time Quantity" := 1;
        "Unit of Time" := '';
        Quantity := "Surcharge %" / 100;
      END;

      IF "Production Rate" > 100000 THEN  //db, 28-09-12: C002769
        Hours := "Time Quantity" * Quantity / "Production Rate"
      ELSE
        Hours := "Time Quantity" * Quantity * Norm;
      IF "Cum. Adj. Factor Hours" <> 0 THEN
        Hours := Hours * "Cum. Adj. Factor Hours";
      "Labor Amount"  := Hours * Rate;
      //DP00236.sn
      IF "Wage Component" <> '' THEN BEGIN
        OverTimeFactor := WageCompRec.GetBudgetOverTimeFactor("Estimate No.", "Wage Component");
        IF OverTimeFactor <> 0 THEN
          "Labor Amount" := "Labor Amount" * OverTimeFactor;
      END;
      //DP00236.en
      IF "Rate Type" = "Rate Type"::Minuts THEN
        Hours := Hours * "Team Size" / 60;

      "Material Amount" := "Time Quantity" * Quantity * "Material Price";
      "Gross Amount" := "Time Quantity" * Quantity * "Gross Price";
      "Subcontracting Amount" := "Time Quantity" * Quantity * "Subcontracting Price";
      "Plant Amount" := "Time Quantity" * Quantity * "Plant Price";
      IF "Cum. Adj. Factor Material" <> 0 THEN BEGIN
        "Material Amount" := "Material Amount" * "Cum. Adj. Factor Material";
        "Gross Amount" := "Gross Amount" * "Cum. Adj. Factor Material";
      END;
      IF "Cum. Adj. Factor Subcontr." <> 0 THEN
        "Subcontracting Amount" := "Subcontracting Amount" * "Cum. Adj. Factor Subcontr.";
      IF "Cum. Adj. Factor Plant" <> 0 THEN
        "Plant Amount" := "Plant Amount" * "Cum. Adj. Factor Plant";

      //db.sn, 29-07-10: M10904
      //RoundFactor := 0.00001;  prev 0.01
      //"Labor Amount" := ROUND("Labor Amount", RoundFactor);
      //"Material Amount" := ROUND("Material Amount", RoundFactor);
      //"Gross Amount" := ROUND("Gross Amount", RoundFactor);
      //"Subcontracting Amount" := ROUND("Subcontracting Amount", RoundFactor);
      //"Plant Amount" := ROUND("Plant Amount", RoundFactor);
      //db.en, 29-07-10: M10904

      Amount := "Labor Amount" + "Material Amount" + "Subcontracting Amount" + "Plant Amount";
      "Total Weight" := ROUND(Quantity * Weight);
      "Buy Back Amount" := ROUND(Quantity * "Buy Back Price");

      IF "Part Quantity" = 0 THEN BEGIN  //db, 09-09-13: C005143
        //disable totals for flowfields SubEst+Part (on Chapter+Paragraph)
        Hours := 0;
        "Labor Amount" := 0;
        "Material Amount" := 0;
        "Gross Amount" := 0;
        "Subcontracting Amount" := 0;
        "Plant Amount" := 0;
        Amount := 0;
        Weight := 0;
        "Buy Back Amount" := 0;
      END;

      "Cumulative Hours" := Hours * "Part Quantity";
      "Cumulative Labor" := "Labor Amount" * "Part Quantity";
      "Cumulative Material" := "Material Amount" * "Part Quantity";
      "Cumulative Gross Price" := "Gross Amount" * "Part Quantity";
      "Cumulative Subcontracting" := "Subcontracting Amount" * "Part Quantity";
      "Cumulative Plant" := "Plant Amount" * "Part Quantity";
      "Cumulative Total" := Amount * "Part Quantity";
      "Cumulative Weight" := "Total Weight" * "Part Quantity";
      "Cumulative Buy Back" := "Buy Back Amount" * "Part Quantity";
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
        Quantity := 1;
        Length := 0;
        Width := 0;
      END;

      IF Recipe <> '' THEN
        IF RecipeRec.GET("Recipe Group", Recipe) THEN
          Volume := RecipeRec.Volume * Quantity * "Part Quantity";
    END;

    PROCEDURE UpdateRecipeTotals@1210190001();
    BEGIN
      IF Recipe <> '' THEN BEGIN
        RecipeLineRec.RESET;
        RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
        RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
        RecipeLineRec.SETRANGE("Part Group","Part Group");
        RecipeLineRec.SETRANGE(Part,Part);
        RecipeLineRec.SETRANGE("Estimate Line","Line No.");
        IF RecipeLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            RecipeLineRec.CalculateTotals;
            RecipeLineRec.UpdateCumTotals(Rec);
            RecipeLineRec.MODIFY;
          UNTIL RecipeLineRec.NEXT = 0;
        END ELSE BEGIN
          InitNormPrice;  //db, 29-11-11: disable incorrect use of Ctrl C+V: M31109
        END;
      END;
    END;

    PROCEDURE CheckIgnoreRecipeQuantity@1100525013();
    VAR
      RcpLineRec@1100525000 : Record 11012156;
    BEGIN
      //db, 27-05-10: M13221
      IF Recipe = '' THEN EXIT;

      RcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      RcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      RcpLineRec.SETRANGE("Part Group", "Part Group");
      RcpLineRec.SETRANGE(Part, Part);
      RcpLineRec.SETRANGE("Estimate Line", "Line No.");
      RcpLineRec.SETRANGE("Ignore Recipe Quantity", TRUE);
      IF RcpLineRec.FINDFIRST THEN BEGIN
         IF MODIFY THEN;
         RcpLineRec.UpdateEstLines;
         IF GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.") THEN;
      END;
    END;

    PROCEDURE CreateCharge@4();
    VAR
      EstimateLine@1100485004 : Record 11012154;
      ChrgRec@11012000 : Record 11012175;
      ChrgLine@11012001 : Integer;
      ChrgDesc@11012002 : Text[100];
      lvText001@1100485003 : TextConst 'ENU=Current line is not a surcharge line.';
      lvText003@1100485001 : TextConst 'ENU=Are these estimate lines the basis for calculating surcharge for %1 ?';
      lvText004@1210190000 : TextConst 'ENU=First select records';
    BEGIN
      EstimateLine.COPY(Rec);

      WITH EstimateLine DO BEGIN
        ChrgLine := "Line No.";
        ChrgDesc := Description;
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;

        //db.sn, 29-01-15
        SETFILTER("Surcharge Type", '%1', "Surcharge Type"::" ");
        SETFILTER("Line No.", '<>%1', "Line No.");
        //db.en, 29-01-15

        IF NOT FINDFIRST THEN
          MESSAGE(lvText004)
        ELSE BEGIN
          IF CONFIRM(lvText003, TRUE, ChrgDesc) THEN BEGIN
            FINDSET(FALSE, FALSE);
            REPEAT;
      //        IF NOT ChrgRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, 0, '', '', ChrgLine, "Line No.") THEN BEGIN
              IF NOT ChrgRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, 0, 0, '', 0, '', '', ChrgLine, "Line No.") THEN BEGIN //DP00481
                ChrgRec.INIT;
                ChrgRec."Estimate No." := "Estimate No.";
                ChrgRec."Sub-Estimate No." := "Sub-Estimate No.";
                ChrgRec."Part Group" := "Part Group";
                ChrgRec.Part := Part;
                ChrgRec."Surcharge Line" := ChrgLine;
                ChrgRec."Basic Line" := "Line No.";
                ChrgRec.INSERT;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        MARKEDONLY(FALSE);
      END;

      CLEARMARKS;
    END;

    PROCEDURE CheckEstimateCharge@8();
    VAR
      ChrgRec1@11012000 : Record 11012175;
      ChrgRec2@11012001 : Record 11012175;
      EstLineRec1@11012002 : Record 11012154;
      EstLineRec2@11012003 : Record 11012154;
      EstimateLineOriginal@1210190000 : Record 11012154;
    BEGIN
      //read with current estimate line in surcharge table whether this is a basic line for surcharge lines.
      ChrgRec1.SETRANGE("Estimate No.", "Estimate No.");
      ChrgRec1.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      ChrgRec1.SETRANGE("Part Group", "Part Group");
      ChrgRec1.SETRANGE(Part, Part);
      ChrgRec1.SETFILTER("Recipe Group", '%1', '');
      ChrgRec1.SETFILTER(Recipe, '%1', '');
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN
        ChrgRec1.SETRANGE("Surcharge Line", "Line No.")
      ELSE
        ChrgRec1.SETRANGE("Basic Line", "Line No.");
      IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          //make surcharge line in estimate current
          EstLineRec2.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, ChrgRec1."Surcharge Line");
          EstimateLineOriginal := EstLineRec2; //call 30195
          EstLineRec2.InitNormPrice;  //db, 29-11-11
          //check all basic lines in surcharge table for surcharge line
          ChrgRec2.COPY(ChrgRec1);  //db, 15-06-10
          ChrgRec2.SETRANGE("Surcharge Line", ChrgRec1."Surcharge Line");
          ChrgRec2.SETRANGE("Basic Line");
          IF ChrgRec2.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              //determine Line Total per Cost Type for Basic Lines belonging to Surcharge
              IF EstLineRec1.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, ChrgRec2."Basic Line") THEN BEGIN
                CASE EstLineRec2."Surcharge Type" OF
                  EstLineRec2."Surcharge Type"::Labor:
                    EstLineRec2.Norm := EstLineRec2.Norm + EstLineRec1.Hours;
                  EstLineRec2."Surcharge Type"::Material:
                    BEGIN
                      EstLineRec2."Material Price" := EstLineRec2."Material Price" + EstLineRec1."Material Amount";
                      EstLineRec2."Gross Price" := EstLineRec2."Gross Price" + EstLineRec1."Gross Amount";
                    END;
                  EstLineRec2."Surcharge Type"::Subcontracting:
                    EstLineRec2."Subcontracting Price" := EstLineRec2."Subcontracting Price" + EstLineRec1."Subcontracting Amount";
                  EstLineRec2."Surcharge Type"::Plant:
                    EstLineRec2."Plant Price" := EstLineRec2."Plant Price" + EstLineRec1."Plant Amount";
                END;
              END;
            UNTIL ChrgRec2.NEXT = 0;
          END;
          //update surcharge line with totals by Cost Type of basic lines
          IF EstLineRec2."Gross Price" <> 0 THEN
            EstLineRec2."Discount %" :=
              100 * (EstLineRec2."Gross Price" - EstLineRec2."Material Price") / EstLineRec2."Gross Price";
          IF EstLineRec2."Surcharge Type" = EstLineRec2."Surcharge Type"::Labor THEN BEGIN
            RateRec.GET(EstLineRec2."Estimate No.",EstLineRec2."Rate Code") ;
            IF RateRec."Rate Type" = RateRec."Rate Type"::Minuts THEN BEGIN
              EstLineRec2.Norm := EstLineRec2.Norm * 60;
              IF RateRec."Team Size" <> 0 THEN
                EstLineRec2.Norm := EstLineRec2.Norm / RateRec."Team Size";
            END;
            IF EstLineRec2.Norm <> 0 THEN
              EstLineRec2."Production Rate" := 1 / EstLineRec2.Norm
            ELSE
              EstLineRec2."Production Rate" := 0;
          END;
          EstLineRec2.CalculateTotals;
          IF FORMAT(EstimateLineOriginal) <> FORMAT(EstLineRec2) THEN //call 30195
            EstLineRec2.MODIFY;
        UNTIL ChrgRec1.NEXT = 0;
      END;
    END;

    PROCEDURE CopyPartLines@1210190000(PartRec@1210190002 : Record 11012153;VAR PartLineRec@1100485004 : Record 11012187;SelectLine@1100485003 : Boolean);
    VAR
      ChrgRec1@1100485001 : Record 11012175;
      ChrgRec2@1100485000 : Record 11012175;
      StdRateRec@1100485002 : Record 11012162;
      PartLine2@1210190000 : Record 11012187;
      LastLino@1210190001 : Integer;
    BEGIN
      GetEstimate(PartRec."Estimate No.", FALSE); //Call 23762
      IF SelectLine = FALSE THEN  //db, 28-08-07
        IF EstRec."Copy Part Lines" = FALSE THEN EXIT;
      //Call 23762.sn
      //Call 31832.sn
      PartLine2.COPY(PartLineRec);
      PartLine2.SETRANGE("Part Group", PartRec."Part Group");
      PartLine2.SETRANGE(Part, PartRec.Part);
      PartLine2.SETFILTER(Recipe, '<>%1', '');
      IF PartLine2.FINDSET(FALSE, FALSE) THEN
        REPEAT
          IF NOT TmpRecipe.GET(PartLine2."Recipe Group", PartLine2.Recipe) THEN BEGIN
            TmpRecipe."Recipe Group" := PartLine2."Recipe Group";
            TmpRecipe."No." := PartLine2.Recipe;
            TmpRecipe.INSERT;

            StdRcpLineRec.RESET;
            StdRcpLineRec.SETRANGE("Estimate No.",'');
            StdRcpLineRec.SETRANGE("Sub-Estimate No.",'');
            StdRcpLineRec.SETRANGE("Part Group",'');
            StdRcpLineRec.SETRANGE(Part,'');
            StdRcpLineRec.SETRANGE("Estimate Line",0);
            StdRcpLineRec.SETRANGE("Recipe Group", PartLine2."Recipe Group");
            StdRcpLineRec.SETRANGE(Recipe, PartLine2.Recipe);
            IF StdRcpLineRec.FINDSET(FALSE, FALSE) THEN
              REPEAT
                TmpStdRcpLine := StdRcpLineRec;
                TmpStdRcpLine.INSERT;
              UNTIL StdRcpLineRec.NEXT = 0;

            ChrgRec1.SETRANGE("Estimate No.", '');
            ChrgRec1.SETRANGE("Sub-Estimate No.", '');
            ChrgRec1.SETRANGE("Part Group",'');
            ChrgRec1.SETRANGE(Part,'');
            ChrgRec1.SETRANGE("Recipe Group", PartLine2."Recipe Group");
            ChrgRec1.SETRANGE(Recipe, PartLine2.Recipe);
            IF ChrgRec1.FINDSET(FALSE, FALSE) THEN
              REPEAT
                TmpStdChrgRec := ChrgRec1;
                TmpStdChrgRec.INSERT;
              UNTIL ChrgRec1.NEXT = 0;
          END;
        UNTIL PartLine2.NEXT = 0;
      //Call 31832.en

      EstLineRec.LOCKTABLE(TRUE);
      //Call 23762.en

      LastLino := 0;
      EstLineRec.SETRANGE("Estimate No.", PartRec."Estimate No.");
      EstLineRec.SETRANGE("Sub-Estimate No.", PartRec."Sub-Estimate No.");
      EstLineRec.SETRANGE("Part Group", PartRec."Part Group");
      EstLineRec.SETRANGE(Part, PartRec.Part);
      IF EstLineRec.FINDLAST THEN
        LastLino := EstLineRec."Line No.";

      IF SelectLine THEN  //db, 14-06-07 (call 8434)
        PartLineRec.MARKEDONLY(TRUE);
      PartLineRec.SETRANGE("Part Group", PartRec."Part Group");
      PartLineRec.SETRANGE(Part, PartRec.Part);
      IF PartLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          EstLineRec.INIT;
          EstLineRec."Estimate No." := PartRec."Estimate No.";
          EstLineRec."Sub-Estimate No." := PartRec."Sub-Estimate No.";
          EstLineRec."Part Group" := PartRec."Part Group";
          EstLineRec.Part := PartRec.Part;
          EstLineRec."Line No." := PartLineRec."Line No." + LastLino;  //db, 14-06-07
          IF PartLineRec.Recipe <> '' THEN BEGIN
            EstLineRec.VALIDATE("Recipe Group", PartLineRec."Recipe Group");
            EstLineRec.VALIDATE(Recipe, PartLineRec.Recipe);
          END ELSE BEGIN
            EstLineRec.VALIDATE("Item No.", PartLineRec."Item No.");
            //db.sn, 27-04-10: M18992
            IF PartLineRec."Trade Item" <> '' THEN BEGIN
              EstLineRec."Vendor (Trade Item)" := PartLineRec."Vendor (Trade Item)";
              EstLineRec.VALIDATE("Trade Item", PartLineRec."Trade Item");
            END ELSE BEGIN
              IF PartLineRec."Basic Item" <> '' THEN BEGIN
                EstLineRec.Manufacturer := PartLineRec.Manufacturer;
                EstLineRec.VALIDATE("Basic Item", PartLineRec."Basic Item");
              END;
            END;
            //db.sn, 27-04-10: M18992
            IF PartLineRec."Rate Code" <> '' THEN
              EstLineRec.VALIDATE("Rate Code", PartLineRec."Rate Code")
            ELSE
              EstLineRec.VALIDATE("Rate Code", EstRec."Rate Code");
            IF PartLineRec."Sub Operation Code" <> '' THEN
              EstLineRec."Sub Operation Code" := PartLineRec."Sub Operation Code";
            EstLineRec.VALIDATE("Sub Operation Code");
            EstLineRec.VALIDATE("Cost Object Labor", PartLineRec."Cost Object Labor");
            EstLineRec.VALIDATE("Cost Object Material", PartLineRec."Cost Object Material");
            EstLineRec.VALIDATE("Cost Object Subcontracting", PartLineRec."Cost Object Subcontracting");
            EstLineRec.VALIDATE("Cost Object Plant", PartLineRec."Cost Object Plant");
            EstLineRec."Cost Component" := PartLineRec."Cost Component";

            IF (PartLineRec.Norm <> 0) AND (PartLineRec."Sub Operation Code" = '') THEN BEGIN //db, 30-01-07
              EstLineRec.Norm := PartLineRec.Norm;
              IF EstLineRec.Norm <> 0 THEN
                EstLineRec."Production Rate" := 1 / EstLineRec.Norm
              ELSE
                EstLineRec."Production Rate" := 0;
            END;
            IF StdRateRec.GET('', PartLineRec."Rate Code") THEN BEGIN  //db, 11-10-06: check conversion
              xRec."Rate Type" := StdRateRec."Rate Type";
              xRec."Team Size" := StdRateRec."Team Size";
              IF (EstLineRec."Rate Type" <> StdRateRec."Rate Type") OR (EstLineRec."Team Size" <> StdRateRec."Team Size") THEN
                EstLineRec.ConvertNorm(
                  (EstLineRec."Rate Type" <> StdRateRec."Rate Type"),
                  (EstLineRec."Team Size" <> StdRateRec."Team Size"));
            END;
            IF PartLineRec."Material Price" <> 0 THEN
              EstLineRec."Material Price" := PartLineRec."Material Price";
            IF PartLineRec."Gross Price" <> 0 THEN
              EstLineRec."Gross Price" := PartLineRec."Gross Price";
            IF PartLineRec."Discount %" <> 0 THEN
              EstLineRec."Discount %" := PartLineRec."Discount %";
            IF PartLineRec."Subcontracting Price" <> 0 THEN
              EstLineRec."Subcontracting Price" := PartLineRec."Subcontracting Price";
            IF PartLineRec."Plant Price" <> 0 THEN
              EstLineRec."Plant Price" := PartLineRec."Plant Price";
            EstLineRec."Time Quantity" := PartLineRec."Time Quantity";  //db, 01-05-08
            EstLineRec."Unit of Time" := PartLineRec."Unit of Time";  //db, 01-05-08
          END;

          xRec := EstLineRec;
          EstLineRec.VALIDATE("Unit of Measure", PartLineRec."Unit of Measure");
          IF xRec."Unit of Measure" <> PartLineRec."Unit of Measure" THEN  //db, 25-05-07
            CheckItemUnitConversion(EstLineRec, xRec);

          //IF (PartLineRec.Quantity <> Quantity) OR (Quantity = 0) THEN //Call 23762; db, 01-12-11: M31247
          IF CheckRecipeCondition(EstLineRec) THEN
            EstLineRec.VALIDATE(Quantity, PartLineRec.Quantity);

          EstLineRec.Description := PartLineRec.Description;
          EstLineRec.VALIDATE("Internal Text", PartLineRec."Internal Text");
          EstLineRec.VALIDATE("External Text", PartLineRec."External Text");
          EstLineRec."Line Status" := PartLineRec."Line Status";
          EstLineRec.Vendor := PartLineRec.Vendor;
          EstLineRec.Subcontractor := PartLineRec.Subcontractor;
          EstLineRec.Element := PartLineRec.Element;
          EstLineRec."Project Planning Activity Code" := PartLineRec."Project Plann. Base Act. Code";
          EstLineRec."Surcharge Type" := PartLineRec."Surcharge Type";
          EstLineRec."Surcharge %" := PartLineRec."Surcharge %";
          EstLineRec.Discipline := PartLineRec.Discipline;
          EstLineRec."Trade Speciality" := PartLineRec."Trade Speciality";
          EstLineRec."Trade Expertise" := PartLineRec."Trade Expertise";
          EstLineRec.INSERT(TRUE);

          IF EstLineRec."Surcharge Type" = EstLineRec."Surcharge Type"::" " THEN BEGIN
            IF PartLineRec.Quantity <> 0 THEN  //db, 11-10-07 (call 10459)
              CopyModelQuantity(EstLineRec, PartLineRec.Quantity);
          END ELSE BEGIN
            //search original surcharge line:
            //Call 23762 ChrgRec1.SETCURRENTKEY("Part Group", Part);  //db, 31-05-10: M19367
            ChrgRec1.SETRANGE("Estimate No.", '');
            ChrgRec1.SETRANGE("Sub-Estimate No.", '');
            ChrgRec1.SETRANGE("Part Group", PartLineRec."Part Group");
            ChrgRec1.SETRANGE(Part, PartLineRec.Part);
            ChrgRec1.SETRANGE("Recipe Line", 0);
            ChrgRec1.SETRANGE("Surcharge Line", PartLineRec."Line No.");
            IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
              REPEAT
                ChrgRec2.INIT;
                ChrgRec2."Estimate No." := EstLineRec."Estimate No.";
                ChrgRec2."Sub-Estimate No." := EstLineRec."Sub-Estimate No.";
                ChrgRec2."Part Group" := EstLineRec."Part Group";
                ChrgRec2.Part := EstLineRec.Part;
                //db.sn, 14-06-07
                ChrgRec2."Basic Line" := ChrgRec1."Basic Line" + LastLino;
                ChrgRec2."Surcharge Line" := ChrgRec1."Surcharge Line" + LastLino;
                IF SelectLine THEN BEGIN
                  ChrgRec1.CALCFIELDS("Part Line Description OLD");
                  ChrgRec2.CALCFIELDS("Estimate Line Description OLD");
                  IF ChrgRec1."Part Line Description OLD" = ChrgRec2."Estimate Line Description OLD" THEN
                    ChrgRec2.INSERT;
                END ELSE BEGIN
                  ChrgRec2.INSERT;
                END;
                //db.en, 14-06-07
              UNTIL ChrgRec1.NEXT = 0;
              EstLineRec.CheckEstimateCharge;
              EstLineRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
                EstLineRec."Part Group", EstLineRec.Part, EstLineRec."Line No.");
            END;
          END;

          EstLineRec.Code := CopyPartCodes(
            EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.",
            EstLineRec."Part Group", EstLineRec.Part, '', '',
            PartLineRec."Line No.", EstLineRec."Line No.");
          IF (PartLineRec."Adjustment Factor Hours" <> 0) AND (PartLineRec."Adjustment Factor Hours" <> 1) THEN
            EstLineRec.VALIDATE("Adjustment Factor Hours", PartLineRec."Adjustment Factor Hours");
          IF (PartLineRec."Adjustment Factor Material" <> 0) AND (PartLineRec."Adjustment Factor Material" <> 1) THEN
            EstLineRec.VALIDATE("Adjustment Factor Material", PartLineRec."Adjustment Factor Material");
          IF (PartLineRec."Adjustment Factor Subcontr." <> 0) AND (PartLineRec."Adjustment Factor Subcontr." <> 1) THEN
            EstLineRec.VALIDATE("Adjustment Factor Subcontr.", PartLineRec."Adjustment Factor Subcontr.");
          IF (PartLineRec."Adjustment Factor Plant" <> 0) AND (PartLineRec."Adjustment Factor Plant" <> 1) THEN
            EstLineRec.VALIDATE("Adjustment Factor Plant", PartLineRec."Adjustment Factor Plant");
          EstLineRec.MODIFY(TRUE);

          IF PartLineRec.Recipe <> '' THEN BEGIN
            Rec.COPY(EstLineRec);
            UseTempTables := TRUE; //Call 23762
            CopyRecipe;
            UseTempTables := FALSE; //Call 23762
            Rec.MODIFY;
          END;
        UNTIL PartLineRec.NEXT = 0;
      END;

      COMMIT; //Commit each part To Keep transaction Duration beneath 10 Seconds call 23762
    END;

    PROCEDURE CopyPartCodes@1210190014(lvEst@1210190003 : Code[20];lvSubEst@1210190004 : Code[20];lvPartGrp@1210190000 : Code[20];lvPart@1210190001 : Code[20];lvRcpGrp@1210190008 : Code[20];lvRcp@1210190007 : Code[20];lvOriginLine@1210190002 : Integer;lvEstLine@1210190006 : Integer) CurrCode : Code[20];
    VAR
      EstCodeRec2@1210190005 : Record 11012194;
    BEGIN
      //Call 23762.sn
      IF (NOT EstimateCodesPresent) AND EstimateCodesPresentChecked THEN
        EXIT;
      //Call 23762.en

      GetEstimate(lvEst, TRUE); //Call 23762

      EstCodeRec.RESET;
      EstCodeRec.SETFILTER("Estimate No.", '%1', '');
      EstCodeRec.SETFILTER("Sub-Estimate No.", '%1', '');
      //Call 23762.sn
      IF NOT EstimateCodesPresentChecked THEN BEGIN
        EstimateCodesPresent := NOT EstCodeRec.ISEMPTY;
        EstimateCodesPresentChecked := TRUE;
      END;
      //Call 23762.en
      IF lvRcp = '' THEN BEGIN
        EstCodeRec.SETCURRENTKEY("Part Group", Part);  //db, 31-05-10: M19367
        EstCodeRec.SETRANGE("Part Group", lvPartGrp);
        EstCodeRec.SETRANGE(Part, lvPart);
        EstCodeRec.SETRANGE("Estimate Line", lvOriginLine);
      END ELSE BEGIN
        EstCodeRec.SETCURRENTKEY("Recipe Group", Recipe);  //db, 31-05-10: M19367
        EstCodeRec.SETFILTER("Part Group", '%1', '');
        EstCodeRec.SETFILTER(Part, '%1', '');
        EstCodeRec.SETRANGE("Estimate Line", 0);
        EstCodeRec.SETRANGE("Recipe Group", lvRcpGrp);
        EstCodeRec.SETRANGE(Recipe, lvRcp);
        EstCodeRec.SETRANGE("Recipe Line", lvOriginLine);
      END;
      IF EstCodeRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF EstCodeRec."Coding System" = EstRec."Coding System" THEN
            CurrCode := EstCodeRec.Code;
          EstCodeRec2 := EstCodeRec;
          EstCodeRec2."Estimate No." := lvEst;
          EstCodeRec2."Sub-Estimate No." := lvSubEst;
          IF lvRcp = '' THEN BEGIN
            EstCodeRec2."Estimate Line" := lvEstLine;
          END ELSE BEGIN
            EstCodeRec2."Part Group" := lvPartGrp;
            EstCodeRec2.Part := lvPart;
            EstCodeRec2."Estimate Line" := lvEstLine;
          END;
          EstCodeRec2.INSERT;
        UNTIL EstCodeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyModelQuantity@1100485003(VAR EstLineRec@1100485000 : Record 11012154;lvQuan@1100485001 : Decimal);
    BEGIN
      WITH EstLineRec DO BEGIN
        EstModelRec.SETRANGE("Estimate No.", "Estimate No.");
        IF EstModelRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            //fill quantity per house type
            CLEAR(EstModelLineRec);
            EstModelLineRec."Estimate No." := "Estimate No.";
            EstModelLineRec."Sub-Estimate No." := "Sub-Estimate No.";
            EstModelLineRec."Part Group" := "Part Group";
            EstModelLineRec.Part := Part;
            EstModelLineRec."Estimate Line" := "Line No.";
            EstModelLineRec.Model := EstModelRec.Model;
            EstModelLineRec.Quantity := lvQuan;
            EstModelLineRec.INSERT;
          UNTIL EstModelRec.NEXT = 0;
          //rewrite quantity estimate line and after that determine surcharge
          VALIDATE(Quantity, EstModelLineRec.DetermineTotalQuan);
          MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE CopyRecipe@2();
    VAR
      TmpChrgRec@1100525001 : TEMPORARY Record 11012175;
      ChrgPresent@1100525000 : Boolean;
      ChildRcp@1100525002 : Boolean;
    BEGIN
      GetEstimate("Estimate No.", FALSE); //Call 23762
      RecipeRec.GET("Recipe Group",Recipe);
      //Call 23762.sn
      IF UseTempTables THEN BEGIN
        TmpStdRcpLine.SETRANGE("Recipe Group","Recipe Group");
        TmpStdRcpLine.SETRANGE(Recipe,Recipe);
        IF TmpStdRcpLine.FINDSET THEN
          REPEAT
            StdRcpLineRec := TmpStdRcpLine;
            CopyRecipeLine(TmpChrgRec, ChrgPresent, ChildRcp);
          UNTIL TmpStdRcpLine.NEXT = 0;
      END ELSE BEGIN
      //Call 23762.en
        //Call 23762 StdRcpLineRec.SETCURRENTKEY("Recipe Group", Recipe);  //db, 31-05-10: M19367
        StdRcpLineRec.SETFILTER("Estimate No.", '%1', '');
        StdRcpLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
        StdRcpLineRec.SETFILTER("Part Group", '%1', '');
        StdRcpLineRec.SETFILTER(Part, '%1', '');
        StdRcpLineRec.SETRANGE("Estimate Line",0);
        StdRcpLineRec.SETRANGE("Recipe Group","Recipe Group");
        StdRcpLineRec.SETRANGE(Recipe,Recipe);
        IF StdRcpLineRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            CopyRecipeLine(TmpChrgRec, ChrgPresent, ChildRcp); //Call 23762
          UNTIL StdRcpLineRec.NEXT = 0;
      END;

      IF ChrgPresent THEN
        EstRcpLineRec.CheckRecipeCharge2(TmpChrgRec);  //db, 16-06-10: M19367

      IF ChildRcp THEN
        ExplodeRecipe;  //db, 08-10-10: M22182

      CalculateRecipe;
      CopyRecipeText;
    END;

    PROCEDURE CopyRecipeLine@1210190019(VAR TmpChrgRec@1210190003 : Record 11012175;VAR ChrgPresent@1210190000 : Boolean;VAR ChildRcp@1210190001 : Boolean);
    VAR
      ChrgRec1@1210190002 : Record 11012175;
      RecipeLine@1100525003 : Record 11012156;
      Estimate@1100528600 : Record 11012151;
    BEGIN
      //Call 23762
      EstRcpLineRec.SetSkipCalculateTotals(TRUE);
      CopyLine;
      EstRcpLineRec."Line No." := StdRcpLineRec."Line No.";
      EstRcpLineRec."Purchase Route Reference" := '';

      IF EstRcpLineRec."Trade Item" <> '' THEN BEGIN
        IF EstRcpLineRec."Price Agreement" = FALSE THEN  //db, 17-06-08
          EstRcpLineRec."Trade Item" := '';
        EstRcpLineRec.VALIDATE("Trade Item", StdRcpLineRec."Trade Item");
      END ELSE BEGIN
        IF EstRcpLineRec."Basic Item" <> '' THEN BEGIN
          IF EstRcpLineRec."Price Agreement" = FALSE THEN  //db, 17-06-08
            EstRcpLineRec."Basic Item" := '';
          EstRcpLineRec.VALIDATE("Basic Item", StdRcpLineRec."Basic Item");
        END ELSE BEGIN
          IF EstRcpLineRec."Item No." <> '' THEN BEGIN
            IF EstRcpLineRec."Price Agreement" = FALSE THEN  //db, 17-06-08
              EstRcpLineRec."Item No." := '';
            EstRcpLineRec.VALIDATE("Item No.", StdRcpLineRec."Item No.");
          END;
        END;
      END;
      //mg.sn, 08-02-11: M25396
      RecipeLine := EstRcpLineRec;
      EstRcpLineRec.VALIDATE("Unit of Measure", StdRcpLineRec."Unit of Measure");
      IF RecipeLine."Unit of Measure" <> EstRcpLineRec."Unit of Measure" THEN BEGIN
        EstRcpLineRec.CheckItemUnitConversion(EstRcpLineRec, RecipeLine);
        EstRcpLineRec.VALIDATE(Quantity, StdRcpLineRec.Quantity);
      END;
      //mg.en, 08-02-11: M25396

      IF EstRcpLineRec."Rate Code" = '' THEN
        EstRcpLineRec."Rate Code" := EstRec."Rate Code";
      EstRcpLineRec.VALIDATE("Rate Code");
      IF StdRcpLineRec."Sub Operation Code" <> '' THEN
        EstRcpLineRec."Sub Operation Code" := StdRcpLineRec."Sub Operation Code";  //db, 21-11-11: M30942
      EstRcpLineRec.VALIDATE("Sub Operation Code");
      EstRcpLineRec."Cost Object Material" := StdRcpLineRec."Cost Object Material";  //db, 17-06-08
      EstRcpLineRec.Description := StdRcpLineRec.Description;  //db, 17-06-08
      EstRcpLineRec."Cost Component" := StdRcpLineRec."Cost Component";  //db, 03-11-11: M30335
      EstRcpLineRec.InitAdjustmentFactor;
      IF EstRcpLineRec."Item No." + EstRcpLineRec."Basic Item" + EstRcpLineRec."Trade Item" = '' THEN BEGIN
        IF NOT Estimate.GET(EstRcpLineRec."Estimate No.") THEN
          Estimate.INIT;
        CASE Estimate."Estimate Type" OF
          Estimate."Estimate Type"::Cost:
            IF StdRcpLineRec."Purchase Discount %" <> 0 THEN
              EstRcpLineRec.VALIDATE("Discount %", StdRcpLineRec."Purchase Discount %");
          Estimate."Estimate Type"::Sales:
            IF StdRcpLineRec."Sales Discount %" <> 0 THEN
              EstRcpLineRec.VALIDATE("Discount %", StdRcpLineRec."Sales Discount %");
        END;
      END;
      //EstRcpLineRec.VALIDATE("Discount %", StdRcpLineRec."Discount %");  //db, 18-10-12: C003079

      EstRcpLineRec.SetSkipCalculateTotals(FALSE);
      EstRcpLineRec.CalculateTotals;
      EstRcpLineRec.Code := CopyPartCodes(
        EstRcpLineRec."Estimate No.", EstRcpLineRec."Sub-Estimate No.",
        EstRcpLineRec."Part Group", EstRcpLineRec.Part,
        EstRcpLineRec."Recipe Group", EstRcpLineRec.Recipe,
        EstRcpLineRec."Line No.", EstRcpLineRec."Estimate Line");
      // 34595.sn
      InitRecord;
      EstRcpLineRec."Project No." := "Project No.";
      IF StdRcpLineRec.Element <> '' THEN  //db, 21-09-12: C002436
        EstRcpLineRec.Element := StdRcpLineRec.Element
      ELSE
        EstRcpLineRec.Element := Element;
      // 34595.en
      IF StdRcpLineRec."Project Planning Activity Code" <> '' THEN
        EstRcpLineRec."Project Planning Activity Code" := StdRcpLineRec."Project Planning Activity Code"
      ELSE
        EstRcpLineRec."Project Planning Activity Code" := "Project Planning Activity Code";

      EstRcpLineRec.INSERT; //Call 23762

      IF EstRcpLineRec."Recipe (Child)" <> '' THEN
        ChildRcp := TRUE;  //db, 08-10-10: M22182

      //search original surcharge line:
      IF StdRcpLineRec."Surcharge Type" <> StdRcpLineRec."Surcharge Type"::" " THEN BEGIN  //db, 08-06-10: M19367
        //Call 23762.sn
        IF UseTempTables THEN BEGIN
          TmpStdChrgRec.RESET;
          TmpStdChrgRec.SETRANGE("Estimate No.", StdRcpLineRec."Estimate No.");
          TmpStdChrgRec.SETRANGE("Sub-Estimate No.", StdRcpLineRec."Sub-Estimate No.");
          TmpStdChrgRec.SETRANGE("Part Group", StdRcpLineRec."Part Group");
          TmpStdChrgRec.SETRANGE(Part, StdRcpLineRec.Part);
          TmpStdChrgRec.SETRANGE("Recipe Line", StdRcpLineRec."Estimate Line");
          TmpStdChrgRec.SETRANGE("Recipe Group", StdRcpLineRec."Recipe Group");
          TmpStdChrgRec.SETRANGE(Recipe, StdRcpLineRec.Recipe);
          TmpStdChrgRec.SETRANGE("Surcharge Line", StdRcpLineRec."Line No.");
          IF TmpStdChrgRec.FINDSET THEN
            REPEAT
              CopyChrgLine(TmpStdChrgRec, TmpChrgRec, ChrgPresent);
            UNTIL TmpStdChrgRec.NEXT = 0;
        END ELSE BEGIN
        //Call 23762.en
          //Call 23762 ChrgRec1.SETCURRENTKEY("Recipe Group", Recipe);  //db, 31-05-10: M19367
          ChrgRec1.SETRANGE("Estimate No.", StdRcpLineRec."Estimate No.");
          ChrgRec1.SETRANGE("Sub-Estimate No.", StdRcpLineRec."Sub-Estimate No.");
          ChrgRec1.SETRANGE("Part Group", StdRcpLineRec."Part Group");
          ChrgRec1.SETRANGE(Part, StdRcpLineRec.Part);
          ChrgRec1.SETRANGE("Recipe Line", StdRcpLineRec."Estimate Line");
          ChrgRec1.SETRANGE("Recipe Group", StdRcpLineRec."Recipe Group");
          ChrgRec1.SETRANGE(Recipe, StdRcpLineRec.Recipe);
          ChrgRec1.SETRANGE("Surcharge Line", StdRcpLineRec."Line No.");
          //db.sn, 19-01-16
          ChrgRec1.SETFILTER("Sales Document No.", '%1', '');
          ChrgRec1.SETRANGE("Sales Line No.", 0);
          //db.en, 19-01-16
          IF ChrgRec1.FINDSET(FALSE, FALSE) THEN
            REPEAT
              CopyChrgLine(ChrgRec1, TmpChrgRec, ChrgPresent);
            UNTIL ChrgRec1.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CopyChrgLine@1210190017(StdChrgRec@1210190003 : Record 11012175;VAR TmpChrgRec@1210190001 : Record 11012175;VAR ChrgPresent@1210190000 : Boolean);
    VAR
      ChrgRec2@1210190002 : Record 11012175;
    BEGIN
      ChrgRec2.INIT;
      ChrgRec2."Estimate No." := "Estimate No.";
      ChrgRec2."Sub-Estimate No." := "Sub-Estimate No.";
      ChrgRec2."Part Group" := "Part Group";
      ChrgRec2.Part := Part;
      ChrgRec2."Recipe Group" := "Recipe Group";
      ChrgRec2.Recipe := Recipe;
      ChrgRec2."Recipe Line" := "Line No.";
      ChrgRec2."Basic Line" := StdChrgRec."Basic Line";
      ChrgRec2."Surcharge Line" := StdChrgRec."Surcharge Line";
      ChrgRec2.INSERT;
      //db.sn, 16-06-10: M19367
      ChrgPresent := TRUE;
      TmpChrgRec := ChrgRec2;
      TmpChrgRec.INSERT;
      //db.en, 16-06-10: M19367
    END;

    PROCEDURE CopyLine@5();
    BEGIN
      EstRcpLineRec.COPY(StdRcpLineRec);
      EstRcpLineRec."Estimate No." := "Estimate No.";
      EstRcpLineRec."Sub-Estimate No." := "Sub-Estimate No.";
      EstRcpLineRec."Part Group" := "Part Group";
      EstRcpLineRec.Part := Part;
      EstRcpLineRec."Estimate Line" := "Line No.";
      EstRcpLineRec."Recipe Group" := "Recipe Group";
      EstRcpLineRec.Recipe := Recipe;
    END;

    PROCEDURE CalculateRecipe@9();
    VAR
      RoundFactor@1100525000 : Decimal;
    BEGIN
      //set filter to calculate totals
      EstRcpLineRec.RESET;
      EstRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstRcpLineRec.SETRANGE("Part Group", "Part Group");
      EstRcpLineRec.SETRANGE(Part, Part);
      EstRcpLineRec.SETRANGE("Estimate Line", "Line No.");

      EstRcpLineRec.CALCFIELDS(
        "Hours Recipe","Labor Recipe","Buy Back Recipe","Weight Recipe",
        "Original Hours Recipe","Original Material Recipe","Original Gross Price Recipe",
        "Original Subcontracting Recipe","Original Plant Recipe");  //db, 07-09-12: C002155

      Weight := EstRcpLineRec."Weight Recipe";
      "Buy Back Price" := EstRcpLineRec."Buy Back Recipe";
      //db.sn, 07-09-12: C002155
      "Plant Price" := EstRcpLineRec."Original Plant Recipe";
      "Material Price" := EstRcpLineRec."Original Material Recipe";
      "Gross Price" := EstRcpLineRec."Original Gross Price Recipe";
      "Subcontracting Price" := EstRcpLineRec."Original Subcontracting Recipe";
      Norm := EstRcpLineRec."Original Hours Recipe";
      //db.en, 07-09-12: C002155
      IF Norm <> 0 THEN
        "Production Rate" := 1 / Norm
      ELSE
        "Production Rate" := 0;
      IF "Gross Price" = 0 THEN
        "Discount %" := 0
      ELSE
        "Discount %" := 100 * ("Gross Price" - "Material Price") / "Gross Price";  //db, 04-11-11: M29602

      IF EstRcpLineRec."Hours Recipe" <> 0 THEN BEGIN
        RoundFactor := 0.00001;
        Rate := ROUND((EstRcpLineRec."Labor Recipe" / EstRcpLineRec."Hours Recipe"), RoundFactor);
      END;
      CalculateTotals;
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      //dbeekman.so, 26-07-10: 20026
      //IF ("Gross Price" = 0) AND ("Discount %" = 0) THEN
      //  EXIT;
      //dbeekman.eo

      //dbeekman.sn, 08-01-10: 17495
      IF EstimateMgmt.IsLineDiscountMaterialOnly THEN BEGIN
        VALIDATE("Material Price","Gross Price" - (("Gross Price"/100) * "Discount %"));
        EXIT;
      END;
      //dbeekman.en

      IF EstimateMgmt.CostTypeEstLineIsMat(Rec) = EstimateMgmt.CostTypeEstLineIsPlant(Rec) THEN
        ERROR(Text010);

      IF EstimateMgmt.CostTypeEstLineIsMat(Rec) THEN
        VALIDATE("Material Price","Gross Price" - (("Gross Price"/100) * "Discount %"))
      ELSE
        VALIDATE("Plant Price","Gross Price" - (("Gross Price"/100) * "Discount %"));
    END;

    PROCEDURE CalculateDiscount@1210190012();
    VAR
      NettPrice@1100525000 : Decimal;
    BEGIN
      IF NOT (
        (EstimateMgmt.CostTypeEstLineIsMat(Rec) OR EstimateMgmt.IsLineDiscountMaterialOnly) OR //dbeekman, 08-01-10: 17495
        EstimateMgmt.CostTypeEstLineIsPlant(Rec))
      THEN BEGIN
        "Discount %" := 0;
        EXIT;
      END;

      IF EstimateMgmt.CostTypeEstLineIsMat(Rec) OR EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
        NettPrice := "Material Price"
      ELSE
        NettPrice := "Plant Price";

      IF "Gross Price" <> 0 THEN BEGIN
        IF  ("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Discount %" = 0) THEN
          "Gross Price" := NettPrice  //db, 04-06-07
        ELSE
          "Discount %" := (("Gross Price" - NettPrice) / "Gross Price") * 100;
      END ELSE BEGIN
        IF "Discount %" <> 100 THEN BEGIN
          IF NOT (("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Discount %" = 0)) THEN
            "Gross Price" := NettPrice / ((100 - "Discount %") / 100);
        END ELSE BEGIN
          "Gross Price" := NettPrice;
          NettPrice := 0;
        END;
      END;

      IF EstimateMgmt.CostTypeEstLineIsMat(Rec) OR EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
        "Material Price" := NettPrice
      ELSE
        "Plant Price" := NettPrice;
    END;

    PROCEDURE CalculateGrossPrice@1100485000();
    BEGIN
      IF "Discount %" <> 100 THEN BEGIN
        IF EstimateMgmt.IsLineDiscountMaterialOnly THEN  //dbeekman, 08-01-10: 17495
          "Gross Price" := "Material Price" * 100 / (100 - "Discount %")
        ELSE
          "Gross Price" := ("Material Price" + "Plant Price") * 100 / (100 - "Discount %");
      END;
    END;

    PROCEDURE CalculateQuantity@11012000();
    VAR
      lv1@1210190000 : Decimal;
      lv2@1210190001 : Decimal;
      lv3@1210190002 : Decimal;
    BEGIN
      lv1 := Length;
      lv2 := Width;
      lv3 := Height;

      IF Length = 0 THEN lv1 := 1;
      IF Width = 0 THEN lv2 := 1;
      IF Height = 0 THEN lv3 := 1;

      VALIDATE(Quantity, lv1 * lv2 * lv3);
    END;

    PROCEDURE DetermineNormGroup@10();
    BEGIN
      IF "Norm Group" = '' THEN BEGIN
        IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN
          IF EstPartRec."Norm Group" = '' THEN BEGIN
            IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN //Call 23762
              IF SubEstRec."Norm Group" = '' THEN BEGIN
                GetEstimate("Estimate No.", TRUE); //Call 23762
                IF EstRec."No." = "Estimate No." THEN //Call 23762
                  "Norm Group" := EstRec."Norm Group";
              END ELSE
                "Norm Group" := SubEstRec."Norm Group";
          END ELSE
            "Norm Group" := EstPartRec."Norm Group";
      END;
    END;

    PROCEDURE DetermineNorm@7();
    VAR
      NormRec@11012000 : Record 11012163;
    BEGIN
      IF NormRec.GET("Sub Operation Code","Norm Group") THEN BEGIN
        VALIDATE(Norm, NormRec.Norm);
        ConvertNorm(FALSE, FALSE);
      END ELSE BEGIN
        IF ("Norm Group" <> '') AND ("Sub Operation Code" <> '') THEN BEGIN
          VALIDATE(Norm, 0);
        END;
      END;
      CalculateTotals;
    END;

    PROCEDURE ConvertNorm@1210190002(SwitchType@1210190001 : Boolean;SwitchSize@1210190002 : Boolean);
    VAR
      NormGrpRec@1210190000 : Record 11012164;
    BEGIN
      IF (SwitchType = FALSE) AND (SwitchSize = FALSE) THEN BEGIN
        IF NormGrpRec.GET("Norm Group") THEN BEGIN
          IF NormGrpRec."Rate Type" <> "Rate Type" THEN
            SwitchType := TRUE;
          IF NormGrpRec."Team Size" <> "Team Size" THEN BEGIN
            SwitchSize := TRUE;
            xRec."Team Size" := NormGrpRec."Team Size";
          END;
        END;
      END;

      IF SwitchType = TRUE THEN
        IF "Rate Type" = "Rate Type"::Hours THEN
          Norm := Norm / 60
        ELSE
          Norm := Norm * 60;

      IF SwitchSize = TRUE THEN BEGIN
        IF "Team Size" <> 0 THEN
          Norm := Norm / "Team Size";
        IF xRec."Team Size" <> 0 THEN
          Norm := Norm * xRec."Team Size";
      END;

      IF SwitchType OR SwitchSize THEN
        IF Norm <> 0 THEN
          "Production Rate" := 1 / Norm
        ELSE
          "Production Rate" := 0;
    END;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item,Trade Vendor';lvEstRec@1210190000 : Record 11012151;lvSwitchItem@1210190002 : Boolean);
    VAR
      Desc1Txt@1210190001 : Text[50];
      Desc2Txt@1210190003 : Text[50];
      lvItemOper@1100485002 : Code[20];
      lvRefDate@1100485001 : Date;
      lvDiscRef1@1100485004 : Code[20];
      lvDiscRef2@1100485003 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      IF lvSwitchItem = TRUE THEN
        "Price Agreement" := FALSE;

      "Price History 0 Exists" := FALSE;

      IF ("Purchase Route Reference" = '') AND ("Price Agreement" = FALSE) THEN BEGIN
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Purchase);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Purchase);
        IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN //Call 23762
          ValidateCu.SetLanguageCode(SubEstRec."Language Code");

        ValidateCu.ValidateItem(
          LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)", "Basic Item",
          "Cost Object Material", Desc1Txt, "Unit of Measure", "Material Price",
          "Purchase Discount %", "Price Reference Date", "Gross Price", Desc2Txt, "Cost Component",
          lvDiscRef1, lvDiscRef2, lvRefDate, lvRefPrio);
        IF LTypeArtOpt = LTypeArtOpt::"Trade Item" THEN
          "Price History 0 Exists" := ValidateCu.PriceHistory0Exists("Trade Item", "Vendor (Trade Item)", lvRefDate);
        "Discount %" := "Purchase Discount %";  //db, 10-06-08

        IF "Cost Object Material" <> xRec."Cost Object Material" THEN
          GetDefaultsCostObject(gvCostType::Material, "Cost Object Material");

        //dbeekman.sn, 31-03-09, calculate BuyBack
        ClearFields(2); //Buyback
        IF LTypeArtOpt = LTypeArtOpt::Item THEN BEGIN
          IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
          IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN  //db, 06-06-11: M27669 (skip validate for normal items)
            ValidateCu.GetSalesBuyBackRates("Item No.", EstRec."Plant Location",lvRefDate,
              "Gross Price","Buy Back Price");  //db, 06-06-11: M27669 (use SalesRate as GrossPrice)
            VALIDATE("Buy Back Price");
            VALIDATE("Material Price");
          END;
        END;
        //dbeekman.en

        IF Desc2Txt = '' THEN
          Description := Desc1Txt
        ELSE
          Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));
        //EstRec.GET("Estimate No.");  //because of temporary tables from copy/update processes
        IF lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales THEN BEGIN
          GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
          lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
          ValidateCu.GetSalesDiscount(
            lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
            "Material Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          "Discount %" := "Sales Discount %";  //db, 10-06-08
        END;
      END;

      IF lvSwitchItem = TRUE THEN BEGIN
        lvItemOper := '';  //db, 02-02-07: operation not per basis/trade item
        IF ItemRec.GET("Item No.") THEN BEGIN
          VALIDATE("External Text", ItemRec.Text);
          lvItemOper := ItemRec."Sub Operation Code";
        END;
        IF (Recipe = '') AND ("Rate Code" = '') THEN
          VALIDATE("Rate Code", lvEstRec."Rate Code");

        CASE LTypeArtOpt OF
          LTypeArtOpt::Item:
            BEGIN
              IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
              ItemRec.TESTFIELD(Blocked,FALSE);
              Weight := ItemRec.Weight;
            END;
          LTypeArtOpt::"Basic Item":
            BEGIN
              IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
              BasicItemRec.TESTFIELD(Expired,FALSE);
              Weight := BasicItemRec."Nett Weight";
              IF BasicItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := BasicItemRec."Sub Operation Code";
            END;
          LTypeArtOpt::"Trade Item",
          LTypeArtOpt::"Trade Vendor":
            BEGIN
              IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
              TradeItemRec.TESTFIELD(Expired,FALSE);
              Weight := TradeItemRec."Gross Weight";
              IF TradeItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := TradeItemRec."Sub Operation Code";
            END;
        END;
        IF lvItemOper <> '' THEN   //db, 24-05-07 (call 9441 + problem at replacing trade item as a result of preferred vendor)
          VALIDATE("Sub Operation Code", lvItemOper);
      END;

      CalculateTotals;
    END;

    PROCEDURE ValidateStatus@1100485001();
    BEGIN
      IF Recipe = '' THEN EXIT;

      RecipeLineRec.RESET;
      RecipeLineRec.SETRANGE("Estimate No.","Estimate No.");
      RecipeLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
      RecipeLineRec.SETRANGE("Part Group","Part Group");
      RecipeLineRec.SETRANGE(Part,Part);
      RecipeLineRec.SETRANGE("Estimate Line","Line No.");
      RecipeLineRec.SETRANGE("Line Status",xRec."Line Status");
      RecipeLineRec.MODIFYALL("Line Status", "Line Status");
    END;

    PROCEDURE HandleLookupOperationNorm@1100528910() lvRefresh : Boolean;
    VAR
      NormGroupFrm@1100528902 : Page 11012174;
      SubOperationCode@1100528900 : Code[20];
    BEGIN
      //DP00381
      IF (Recipe <> '') OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN EXIT;

      CLEAR(NormGroupFrm);
      NormGroupFrm.SetSelection(DATABASE::"Estimate Line OLD","Estimate No.","Sub-Estimate No.",
        "Part Group",Part,0,'','');
      //db.sn, 14-01-14
      NormGroupFrm.SetSubOperation("Sub Operation Code");
      NormGroupFrm.LOOKUPMODE(TRUE);
      IF NormGroupFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        lvRefresh := NormGroupFrm.ApplySelection;
        IF lvRefresh = FALSE THEN BEGIN
          NormGroupFrm.GetSubOperation(SubOperationCode);
          IF SubOperationCode <> '' THEN BEGIN
            VALIDATE("Sub Operation Code", SubOperationCode);
            ProcessSubOperation;  //db, 28-02-14: C013489
          END;
        END;
      END;
      //db.en, 14-01-14

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupRecipe@1100528909() lvRefresh : Boolean;
    VAR
      RecipeFrm@1100528903 : Page 11012164;
      RecipeRec@1100528902 : Record 11012155;
      PartLineRec@1100528901 : Record 11012187;
      ShowPartLines@1100528900 : Boolean;
    BEGIN
      //db, 03-02-15 (copy from new estimate)
      IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') OR
         ("Surcharge Type" <> "Surcharge Type"::" ")
      THEN EXIT;

      CLEAR(RecipeFrm);
      RecipeFrm.LOOKUPMODE(TRUE);
      RecipeFrm.SetSelection(DATABASE::"Estimate Line OLD","Estimate No.","Sub-Estimate No.","Part Group",Part,'','','','','',TRUE);

      RecipeRec.RESET;
      ShowPartLines := FALSE;
      EstRec.GET("Estimate No.");
      IF EstRec."Copy Part Lines" = FALSE THEN BEGIN
        PartLineRec.SETRANGE(Part, Part);
        PartLineRec.SETRANGE("Part Group", "Part Group");
        PartLineRec.SETFILTER(Recipe, '<>%1', '');
        IF PartLineRec.FIND('-') THEN BEGIN
          ShowPartLines := TRUE;
          REPEAT
            RecipeRec.GET(PartLineRec."Recipe Group", PartLineRec.Recipe);
            RecipeRec.MARK(TRUE);
          UNTIL PartLineRec.NEXT = 0;
          RecipeRec.MARKEDONLY(TRUE);
        END;
      END;

      IF EstRec.Condition <> '' THEN
        RecipeRec.SETRANGE(Condition, EstRec.Condition);
      RecipeRec.SETRANGE("Recipe Group","Recipe Group");
      IF RecipeRec.GET("Recipe Group",Recipe) THEN
        RecipeFrm.SETRECORD(RecipeRec);
      RecipeFrm.SETTABLEVIEW(RecipeRec);
      IF RecipeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        RecipeFrm.GETRECORD(RecipeRec);
        "Recipe Group" := RecipeRec."Recipe Group";
        VALIDATE(Recipe, RecipeRec."No.");
      END ELSE BEGIN
        lvRefresh := RecipeFrm.CheckMultiCopy;
      END;

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupItem@1100525003(lvFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      ItemRec@1100525012 : Record 27;
      BasicItemRec@1100525011 : Record 11012316;
      TradeItemRec@1100525010 : Record 11012317;
      ItemFrm@1100525009 : Page 31;
      BasicItemFrm@1100525008 : Page 11012333;
      TradeItemFrm@1100525007 : Page 11012334;
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvDiscType@1100525000 : 'Purchase,Sales';
      lvTempEstimateLine@1100525005 : TEMPORARY Record 11012154;
      g_ItemCode@1100525014 : Code[20];
      g_Vendor@1100525013 : Code[20];
    BEGIN
      IF Recipe <> '' THEN EXIT;

      GetEstimate("Estimate No.", FALSE); //Call 23762
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, EstRec, lvDiscType::Purchase);

      IF lvFieldNo = FIELDNO("Item No.") THEN BEGIN
        CLEAR(ItemFrm);
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Estimate Line OLD",
          "Estimate No.","Sub-Estimate No.",Part,'',0,'',"Part Group","Line No.",'','');

        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);

        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemFrm.GETRECORD(ItemRec);
          VALIDATE("Item No.", ItemRec."No.");
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Estimate Line OLD",
          "Estimate No.","Sub-Estimate No.",Part,'',0,'',"Part Group","Line No.",'','');

        BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemFrm.GETRECORD(BasicItemRec);
          Manufacturer := BasicItemRec.Manufacturer;
          VALIDATE("Basic Item", BasicItemRec."Product Code");
        END ELSE BEGIN
          lvRefresh := BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          lvTempEstimateLine.COPY(Rec);  //db, 10-07-09: M15801
          lvTempEstimateLine.VALIDATE("Item No.","Item No.");
          g_ItemCode := lvTempEstimateLine."Trade Item";
          g_Vendor := lvTempEstimateLine."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Estimate Line OLD",
          "Estimate No.", "Sub-Estimate No.", Part, '', 0, '', "Part Group", "Line No.", '', '',
          "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", g_ItemCode, g_Vendor);

        TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemFrm.GETRECORD(TradeItemRec);
          Manufacturer := TradeItemRec.Manufacturer;
          "Basic Item" := TradeItemRec."Product Code";
          "Vendor (Trade Item)" := TradeItemRec.Vendor;
          VALIDATE("Trade Item", TradeItemRec."Item Code");
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;
      EXIT(lvRefresh);
    END;

    PROCEDURE HandleAssistEditItem@1100528300(lvFieldNo@1210190000 : Integer) lvRefresh : Boolean;
    VAR
      "2baMgt"@1100528300 : Codeunit 11012306;
      RecRef@1100528301 : RecordRef;
    BEGIN
      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        RecRef.GETTABLE(Rec);
        "2baMgt".RunModalDialogForMultipleItems("Vendor (Trade Item)", "Trade Item", RecRef);
        lvRefresh := TRUE;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190011();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1210190006 : Record 11012154;MainOldRec@1210190007 : Record 11012154);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN BEGIN
          IF UnitFactorNew <> UnitFactorOld THEN BEGIN //db, 20-04-11: M26826
            VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld));
            VALIDATE(Weight,(Weight * UnitFactorNew / UnitFactorOld));
          END;
        END;
      END;
    END;

    PROCEDURE CheckSameValue@1210190009(lvCostType@1210190001 : Integer;lvCostObjectOld@1210190002 : Code[20]);
    VAR
      lvEstLineRec@1210190000 : Record 11012154;
    BEGIN
      lvEstLineRec.SETRANGE("Estimate No.", "Estimate No.");
      IF lvCostType = 1 THEN
        lvEstLineRec.SETFILTER("Cost Object Labor", '%1', lvCostObjectOld);
      IF lvCostType = 2 THEN
        lvEstLineRec.SETFILTER("Cost Object Material", '%1', lvCostObjectOld);
      IF lvCostType = 3 THEN
        lvEstLineRec.SETFILTER("Cost Object Subcontracting", '%1', lvCostObjectOld);
      IF lvCostType = 4 THEN
        lvEstLineRec.SETFILTER("Cost Object Plant", '%1', lvCostObjectOld);
      lvEstLineRec.SETRANGE(Description, Description);
      lvEstLineRec.SETRANGE("Unit of Measure", "Unit of Measure");
      IF lvEstLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvCostType = 1 THEN
            lvEstLineRec."Cost Object Labor" := "Cost Object Labor";
          IF lvCostType = 2 THEN
            lvEstLineRec."Cost Object Material" := "Cost Object Material";
          IF lvCostType = 3 THEN
            lvEstLineRec."Cost Object Subcontracting" := "Cost Object Subcontracting";
          IF lvCostType = 4 THEN
            lvEstLineRec."Cost Object Plant" := "Cost Object Plant";
          lvEstLineRec.MODIFY;
        UNTIL lvEstLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCostObject@1210190005(CostObject@1210190000 : Code[20];DirectValidate@1210190001 : Boolean);
    BEGIN
      //Do not call function by table field, only from form field CostObject
      GetEstimate("Estimate No.", FALSE); //Call 23762
      //IF EstRec."Estimate Based On" <> EstRec."Estimate Based On"::CostObject THEN EXIT;  //db, 02-10-09: M15745

      IF CostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
        IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
          IF DirectValidate = TRUE THEN BEGIN
            DimValRec.TESTFIELD("Cost Type", DimValRec."Cost Type"::Material);
            EXIT;
          END;
        END;
        //db.sn, 02-10-09: M15745
        VALIDATE("Cost Component", DimValRec."Cost Component");
        IF EstRec."Estimate Based On" <> EstRec."Estimate Based On"::CostObject THEN EXIT;
        //db.en, 02-10-09: M15745
        IF "Sub Operation Code" <> '' THEN BEGIN
          ProcessSubOperation;
          EXIT;
        END;
        IF "Norm Agreement" OR "Price Agreement" OR "Subcontracting Agreement" OR "Plant Agreement" THEN BEGIN  //db, 16-01-08
          IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
            IF DimValRec."Rate Code" = '' THEN
              VALIDATE("Rate Code", EstRec."Rate Code")
            ELSE
              VALIDATE("Rate Code", DimValRec."Rate Code");
          END;
          EXIT;
        END;
        Description := DimValRec.Name;
        InitNormPrice;  //db, 29-11-11
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
          IF DimValRec."Rate Code" = '' THEN
            VALIDATE("Rate Code", EstRec."Rate Code")
          ELSE
            VALIDATE("Rate Code", DimValRec."Rate Code");
          IF "Sub Operation Code" <> '' THEN
            DetermineNorm
          ELSE
            VALIDATE(Norm, DimValRec.Norm);
        END;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
          VALIDATE("Gross Price", DimValRec.Price)
        ELSE
          "Discount %" := 0;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
          VALIDATE("Subcontracting Price", DimValRec.Price);
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
          VALIDATE("Plant Price", DimValRec.Price);
      END;
      //VALIDATE("Cost Component", DimValRec."Cost Component");  //db, 02-10-09: M15745
    END;

    PROCEDURE OldSubOperationDefault@1210190006() : Boolean;
    VAR
      OldSubOperRec@1210190001 : Record 11012166;
      OldOperRec@1210190000 : Record 11012165;
    BEGIN
      OldOperRec.INIT;
      IF OldSubOperRec.GET(xRec."Sub Operation Code") THEN
        IF NOT OldOperRec.GET(OldSubOperRec.Operation) THEN OldOperRec.INIT;

      EXIT(xRec."Cost Object Labor" = OldOperRec."Cost Object");
    END;

    PROCEDURE ProcessSubOperation@1100485002();
    VAR
      SubOperRec@1100485000 : Record 11012166;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
        Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Description));
        IF SubOperRec."Unit of Measure" <> '' THEN
          "Unit of Measure" := SubOperRec."Unit of Measure";
      END;
    END;

    PROCEDURE EnterQuantity@1210190013(lvOrigin@1210190002 : Integer) : Boolean;
    VAR
      QuanRec@1210190000 : Record 11012186;
      EstModelRec@1100485000 : Record 11012196;
      QuantityRelation@1100525000 : Record 11020463;
    BEGIN
      //DP00686
      //lvOrigin:
      //  1 = Lengtt, Width and Height
      //  2 = quantity (input)
      //  3 = house type
      //  4 = quantity (lookup)

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN EXIT(FALSE);

      IF lvOrigin <> 1 THEN BEGIN
        IF Length <> 0 THEN EXIT(FALSE);
        IF Width <> 0 THEN EXIT(FALSE);
        IF Height <> 0 THEN EXIT(FALSE);
      END;

      EstSetup.GET;
      IF lvOrigin <> 4 THEN BEGIN
        IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
          QuanRec.SETRANGE("Estimate No.", "Estimate No.");
          QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          QuanRec.SETRANGE("Part Group", "Part Group");
          QuanRec.SETRANGE(Part, Part);
          QuanRec.SETRANGE("Estimate Line", "Line No.");
          IF QuanRec.FINDFIRST THEN EXIT(FALSE);
        END ELSE
          IF QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.",'','',0) THEN
            EXIT(FALSE);
      END;

      IF lvOrigin <> 3 THEN BEGIN
        EstModelRec.SETRANGE("Estimate No.", "Estimate No.");
        IF EstModelRec.FINDFIRST THEN EXIT(FALSE);
      END ELSE BEGIN
        EstModelRec.SETRANGE("Estimate No.", "Estimate No.");
        IF NOT EstModelRec.FINDFIRST THEN EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE EditQuanSheet@1210190008();
    VAR
      QuanRec@1210190000 : Record 11012186;
      QuanSheetRec@1100525001 : Record 11020462;
      QuanSheetFrm@1100525002 : Page 11020462;
      QuantityRelation@1100409001 : Record 11020463;
      RecipeLine@1100409000 : Record 11012156;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN
        ERROR(Text011);

      EstSetup.GET;
      IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
        QuanRec.RESET;
        QuanRec.SETRANGE("Estimate No.", "Estimate No.");
        QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
        QuanRec.SETRANGE("Part Group", "Part Group");
        QuanRec.SETRANGE(Part, Part);
        QuanRec.SETRANGE("Estimate Line", "Line No.");
        QuanRec.SETFILTER("Recipe Group", '%1', '');
        QuanRec.SETFILTER(Recipe, '%1', '');
        QuanRec.SETRANGE("Recipe Line", 0);
        PAGE.RUNMODAL(PAGE::"Estimate Quantity Sheet", QuanRec);
        QuanRec.SETRANGE("Row No.", 0);
        IF QuanRec.FINDFIRST THEN
          VALIDATE(Quantity, QuanRec.Result);
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Estimate No.","Estimate No.");
        QuanSheetRec.SETFILTER("Sub-Estimate No.",'%1|%2', '', "Sub-Estimate No.");
        QuanSheetRec.SETFILTER("Part Group", '%1|%2', '',"Part Group");
        QuanSheetRec.SETFILTER(Part,'%1|%2', '',Part);
        QuanSheetFrm.SETTABLEVIEW(QuanSheetRec);
        IF NOT QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.",'','',0) THEN QuantityRelation.INIT;
        IF NOT QuanSheetRec.GET("Estimate No.", QuantityRelation."Quantity Sheet") THEN QuanSheetRec.INIT;
        QuanSheetFrm.SETRECORD(QuanSheetRec);
        QuanSheetFrm.SetDefaultOLD(Rec,RecipeLine,TRUE,QuantityRelation);
        QuanSheetFrm.RUNMODAL;
        IF QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.",'','',0) THEN
          IF GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Line No.") THEN
            VALIDATE(Quantity);
      END;
    END;

    PROCEDURE GetPartQuantity@1210190007() PartQuan@1210190000 : Decimal;
    VAR
      lvEstPartRec@1210190001 : Record 11012153;
      CurrLevel@1210190002 : Integer;
    BEGIN
      PartQuan := 1;

      //IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN //Call 23762
      IF SubEstRec.GET("Estimate No.", "Sub-Estimate No.") THEN  //db, 09-11-11: M30437
        PartQuan := PartQuan * SubEstRec."Cumulative Frequency";

      IF "Ignore Part Quantity" THEN
        EXIT(PartQuan);

      IF lvEstPartRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part) THEN BEGIN
        PartQuan := PartQuan * lvEstPartRec.Quantity;
        CurrLevel := lvEstPartRec.Level;

        lvEstPartRec.RESET;
        lvEstPartRec.SETRANGE("Estimate No.", lvEstPartRec."Estimate No.");
        lvEstPartRec.SETRANGE("Sub-Estimate No.", lvEstPartRec."Sub-Estimate No.");
        lvEstPartRec.SETRANGE("Part Group", lvEstPartRec."Part Group");
        IF CurrLevel = 3 THEN BEGIN
          CurrLevel := CurrLevel - 1;
          lvEstPartRec.SETRANGE(Part, lvEstPartRec.Paragraph);
          IF lvEstPartRec.FINDFIRST THEN BEGIN
            PartQuan := PartQuan * lvEstPartRec.Quantity;
            CurrLevel := lvEstPartRec.Level;
          END;
        END;
        IF CurrLevel = 2 THEN BEGIN
          CurrLevel := CurrLevel - 1;
          lvEstPartRec.SETRANGE(Part, lvEstPartRec.Chapter);
          IF lvEstPartRec.FINDFIRST THEN BEGIN
            PartQuan := PartQuan * lvEstPartRec.Quantity;
            CurrLevel := lvEstPartRec.Level;
          END;
        END;
        IF CurrLevel = 1 THEN BEGIN
          CurrLevel := CurrLevel - 1;
          lvEstPartRec.SETRANGE(Part);
          lvEstPartRec.SETRANGE(Level, 0);
          IF lvEstPartRec.FINDFIRST THEN BEGIN
            PartQuan := PartQuan * lvEstPartRec.Quantity;
            CurrLevel := lvEstPartRec.Level;
          END;
        END;
      END;

      EXIT(PartQuan);
    END;

    PROCEDURE InitAdjustmentFactor@1210190003();
    BEGIN
      IF "Adjustment Factor Hours" = 0 THEN
        "Adjustment Factor Hours" := 1;
      IF "Adjustment Factor Material" = 0 THEN
        "Adjustment Factor Material" := 1;
      IF "Adjustment Factor Subcontr." = 0 THEN
        "Adjustment Factor Subcontr." := 1;
      IF "Adjustment Factor Plant" = 0 THEN
        "Adjustment Factor Plant" := 1;

      EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part);
      //db.sn, 07-09-12: C002155
      IF (EstPartRec."Cum. Adj. Factor Hours" = 0) OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN
        "Cum. Adj. Factor Hours" := "Adjustment Factor Hours"
      ELSE
        "Cum. Adj. Factor Hours" := "Adjustment Factor Hours" * EstPartRec."Cum. Adj. Factor Hours";
      IF (EstPartRec."Cum. Adj. Factor Material" = 0) OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN
        "Cum. Adj. Factor Material" := "Adjustment Factor Material"
      ELSE
        "Cum. Adj. Factor Material" := "Adjustment Factor Material" * EstPartRec."Cum. Adj. Factor Material";
      IF (EstPartRec."Cum. Adj. Factor Subcontr." = 0) OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN
        "Cum. Adj. Factor Subcontr." := "Adjustment Factor Subcontr."
      ELSE
        "Cum. Adj. Factor Subcontr." := "Adjustment Factor Subcontr." * EstPartRec."Cum. Adj. Factor Subcontr.";
      IF (EstPartRec."Cum. Adj. Factor Plant" = 0) OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN
        "Cum. Adj. Factor Plant" := "Adjustment Factor Plant"
      ELSE
        "Cum. Adj. Factor Plant" := "Adjustment Factor Plant" * EstPartRec."Cum. Adj. Factor Plant";
      //db.en, 07-09-12: C002155
    END;

    PROCEDURE ProcessAdjustmentFactor@1210190004(IAdjType@1210190000 : Integer);
    BEGIN
      CASE IAdjType OF
        1:
          IF "Adjustment Factor Hours" = 0 THEN
            "Adjustment Factor Hours" := 1;
        2:
          IF "Adjustment Factor Material" = 0 THEN
            "Adjustment Factor Material" := 1;
        3:
          IF "Adjustment Factor Subcontr." = 0 THEN
            "Adjustment Factor Subcontr." := 1;
        4:
          IF "Adjustment Factor Plant" = 0 THEN
            "Adjustment Factor Plant" := 1;
      END;
      MODIFY;

      UpdateEst.ResetAdjustmentFactor("Estimate No.", "Sub-Estimate No.", "Part Group", Part,
        "Line No.", TRUE, 3, IAdjType);

      GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Line No.");
    END;

    PROCEDURE CheckRenameRecipe@1100485004();
    BEGIN
      EstRcpLineRec.RESET;
      EstRcpLineRec.SETRANGE("Estimate No.","Estimate No.");
      EstRcpLineRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
      EstRcpLineRec.SETRANGE("Part Group","Part Group");
      EstRcpLineRec.SETRANGE(Part,Part);
      EstRcpLineRec.SETRANGE("Estimate Line","Line No.");
      IF EstRcpLineRec.FINDFIRST THEN
        ERROR(Text000,xRec.Recipe);
    END;

    PROCEDURE CheckRecipeCondition@1100485005(lvEstLineRec@1100485000 : Record 11012154) : Boolean;
    BEGIN
      WITH lvEstLineRec DO BEGIN
        IF Recipe = '' THEN EXIT(TRUE);

        IF NOT RecipeRec.GET("Recipe Group", Recipe) THEN RecipeRec.INIT;
        IF RecipeRec.Condition = '' THEN EXIT(TRUE);

        GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE); //Call 23762
        IF SubEstRec.Condition = RecipeRec.Condition THEN EXIT(TRUE);
        IF SubEstRec.Condition <> '' THEN EXIT(FALSE);

        GetEstimate("Estimate No.", TRUE); //Call 23762
        IF EstRec.Condition = RecipeRec.Condition THEN EXIT(TRUE);
        IF EstRec.Condition <> '' THEN EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetItemSpecifications@1100485006();
    BEGIN
      IF ItemRec.GET("Item No.") THEN BEGIN
        "Item Series" := ItemRec."Item Series";
        "Item Type" := ItemRec."Item Type";
        "Item Brand" := ItemRec."Item Brand";
      END;
    END;

    PROCEDURE CopyEntry@1100485008();
    VAR
      JobEntryRec@1210190000 : Record 11072005;
      JobEntryFrm@1210190001 : Page 11072005;
      lvSelection@1210190002 : Integer;
      lvText000@1210190003 : TextConst 'ENU=Job Entry,Service Entry';
      ServEntryRec@1210190005 : Record 11012819;
      ServEntryFrm@1210190004 : Page 11012826;
      lvCompName@1210190006 : Text[50];
    BEGIN
      lvSelection := STRMENU(lvText000, 1);  //1=Project; 2=Service
      IF lvSelection = 0 THEN EXIT;

      IF lvSelection = 1 THEN BEGIN
        GetEstimate("Estimate No.", FALSE); //Call 23762
        lvCompName := COMPANYNAME;

        CLEAR(JobEntryFrm);
        JobEntryFrm.SetSelection(DATABASE::"Estimate Line OLD",
          "Estimate No.","Sub-Estimate No.",Part,'',0,'',"Part Group","Line No.",
          lvCompName);

        JobEntryRec.SETCURRENTKEY("Job No.", "Cost Type", "Global Dimension 2 Code");  //db, 03-09-08
      //JobEntryRec.SETFILTER(Principal, EstRec."Customer No.");
        JobEntryRec.SETRANGE("Cost Type", JobEntryRec."Cost Type"::Material);
        JobEntryRec.SETRANGE(Surcharge, FALSE);

        JobEntryFrm.SETTABLEVIEW(JobEntryRec);
        JobEntryFrm.RUNMODAL;
      END;

      IF lvSelection = 2 THEN BEGIN
        CLEAR(ServEntryFrm);
        ServEntryFrm.SetSelection(DATABASE::"Estimate Line OLD",
          "Estimate No.","Sub-Estimate No.",Part,'',0,'',"Part Group","Line No.");

        ServEntryRec.SETCURRENTKEY("Service Contract No.", "Cost Type", "Global Dimension 2 Code");  //db, 03-09-08
      //ServEntryRec.SETFILTER("Customer No.", EstRec."Customer No.");
        ServEntryRec.SETRANGE("Cost Type", ServEntryRec."Cost Type"::Material);
        ServEntryRec.SETRANGE(Surcharge, FALSE);

        ServEntryFrm.SETTABLEVIEW(ServEntryRec);
        ServEntryFrm.RUNMODAL;
      END;
    END;

    PROCEDURE GetMinuts@1100485009(lvType@1100485002 : Integer) Result : Decimal;
    VAR
      RcpLineRec@1100485000 : Record 11012156;
      RcpTotal@1100485001 : Decimal;
    BEGIN
      IF Recipe = '' THEN BEGIN
        IF "Rate Type" = "Rate Type"::Hours THEN
          Result := Norm * 60
        ELSE
          Result := Norm;
        IF "Surcharge Type" <> "Surcharge Type"::" " THEN
          Result := Result * "Surcharge %" / 100;
        IF "Cum. Adj. Factor Hours" <> 0 THEN
          Result := Result * "Cum. Adj. Factor Hours";
        IF "Team Size" > 0 THEN
          Result := Result * "Team Size";
      END ELSE BEGIN
        RcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
        RcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
        RcpLineRec.SETRANGE("Part Group", "Part Group");
        RcpLineRec.SETRANGE(Part, Part);
        RcpLineRec.SETRANGE("Estimate Line", "Line No.");
        IF RcpLineRec.FINDSET THEN BEGIN
          REPEAT
            IF RcpLineRec."Rate Type" = "Rate Type"::Hours THEN
              RcpTotal := RcpLineRec.Quantity * RcpLineRec.Norm * 60
            ELSE
              RcpTotal := RcpLineRec.Quantity * RcpLineRec.Norm;
            IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
              RcpTotal := RcpTotal * RcpLineRec."Surcharge %" / 100;
            IF RcpLineRec."Cum. Adj. Factor Hours" <> 0 THEN
              RcpTotal := RcpTotal * RcpLineRec."Cum. Adj. Factor Hours";
            IF RcpLineRec."Team Size" > 0 THEN
              RcpTotal := RcpTotal * RcpLineRec."Team Size";
            Result := Result + RcpTotal;
          UNTIL RcpLineRec.NEXT = 0;
        END;
      END;
      IF lvType = 1 THEN
        Result := Result * Quantity;

      EXIT(Result);
    END;

    PROCEDURE GetDefaultsPlantType@1100485010();
    VAR
      PlantTypeRec@1100485000 : Record 11012551;
    BEGIN
      PlantTypeRec.GET("Plant Type");
      Description := PlantTypeRec.Description;
      "Unit of Measure" := PlantTypeRec."Unit of Measure";
      "Cost Object Plant" := PlantTypeRec."Cost Object";
      Weight := PlantTypeRec.Weight;
      CLEAR("Plant Agreement");
      ClearFields(2); //Buyback
      IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
        ClearFields(3); //Discount
      DeterminePlantPrice;

      IF "Attached to Line No." <> 0 THEN
        GetRentalPeriodFromSet;
    END;

    PROCEDURE DeterminePlantPrice@1100485011();
    VAR
      SearchRateCu@1100485000 : Codeunit 11012567;
      RefDate@1100485001 : Date;
      RentalType@1100525006 : Option;
      DummyPlantPriceType@1100525005 : Option;
      DummyRentalType@1100525004 : Option;
      PlantDiscount@1100525003 : Decimal;
      PlantPrice@1100525002 : Decimal;
      BuyBackPrice@1100525001 : Decimal;
      PlantTypeRec@1100525000 : Record 11012551;
    BEGIN
      IF ("Plant Type" = '') OR "Plant Agreement" THEN
        EXIT;

      GetEstimate("Estimate No.", TRUE);
      IF "Start Rental Period" <> 0D THEN
        RefDate := "Start Rental Period"
      ELSE BEGIN
        IF EstRec."Reference Date (Rate)" <> 0D THEN
          RefDate := EstRec."Reference Date (Rate)"
        ELSE
          RefDate := TODAY;
      END;

      //DP01047.sn
      RentalType := -1;  //0=rental, 1=sales, 2=buy-back, 3= hours
      PlantTypeRec.GET("Plant Type");
      IF EstRec."Plant Rates in Hours" AND (PlantTypeRec."Rental Type" <> PlantTypeRec."Rental Type"::"Sales/Buy Back") THEN
        RentalType := 3;

      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Cost THEN
        PlantPrice := SearchRateCu.CostRateFromEstimate("Plant Type",'', EstRec."Plant Location",RefDate,RentalType,"Plant Price Type");
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Sales THEN
        PlantPrice := SearchRateCu.SalesRateFromEstimate(
          "Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",EstRec."Kind of Plant Rate"+1,RefDate,RentalType,"Plant Price Type");
      IF RentalType = 1 THEN BEGIN
        DummyRentalType := 2;
        BuyBackPrice := SearchRateCu.SalesRateFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",0,RefDate,DummyRentalType,DummyPlantPriceType);
      END;
      PlantDiscount := SearchRateCu.SalesDiscountFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",RefDate,RentalType);
      VALIDATE("Buy Back Price", BuyBackPrice * (100-PlantDiscount)/100);
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Cost THEN
        VALIDATE("Plant Price", PlantPrice);
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Sales THEN
        VALIDATE("Plant Price", PlantPrice * (100-PlantDiscount)/100);
      IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
        VALIDATE("Gross Price","Plant Price");
      //DP01047.en
    END;

    PROCEDURE GetDefaultsCostObject@1100485012(lvCostType@1100485000 : 'Labor,Material,Subcontracting,Plant,Sundry';lvCostObject@1100485001 : Code[20]);
    VAR
      lvDimValRec@1100485002 : Record 349;
      lvEstPurchActRec@1100485003 : Record 11012366;
    BEGIN
      EstSetup.GET;
      IF NOT EstSetup."Default Purchase Action" THEN
        EXIT;

      DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, '');
      lvDimValRec.TESTFIELD(Blocked, FALSE);

      CASE lvCostType OF
        lvCostType::Material: BEGIN

          IF ("Purchase Action Mat." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Mat."), FIELDCAPTION("Cost Object Material"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Mat.", lvDimValRec."Purchase Action");

          END;
        lvCostType::Subcontracting: BEGIN

          IF ("Purchase Action Subc." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Subcontracting"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Subc.", lvDimValRec."Purchase Action");

          END;
        lvCostType::Plant: BEGIN

          IF ("Purchase Action Plant" = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Plant"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Plant", lvDimValRec."Purchase Action");

          END;
      END;
    END;

    PROCEDURE UpdateProjElem@1100525000(lvAction@1100485000 : Integer);
    VAR
      lvRcpLineRec@1100485001 : Record 11012156;
    BEGIN
      //db, 09-10-08: M12124
      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      lvRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      lvRcpLineRec.SETRANGE("Part Group", "Part Group");
      lvRcpLineRec.SETRANGE(Part, Part);
      lvRcpLineRec.SETRANGE("Estimate Line", "Line No.");
      IF lvAction = 0 THEN
        lvRcpLineRec.SETFILTER("Project No.", '%1|%2', '', xRec."Project No.")
      ELSE
        lvRcpLineRec.SETFILTER(Element, '%1|%2', '', xRec.Element);
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvAction = 0 THEN
            lvRcpLineRec.VALIDATE("Project No.", "Project No.")
          ELSE
            lvRcpLineRec.VALIDATE(Element, Element);
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateTimeQuanRecipeLines@1100525001();
    VAR
      lvRcpLineRec@1100525000 : Record 11012156;
      NewTimeQuan@1100525002 : Decimal;
      lvText000@1100525004 : TextConst 'ENU="Changing %1 for Estimate Lines not allowed; update related Recipe Lines?"';
      lvFieldName@1100525005 : Text[100];
    BEGIN
      //db, 02-03-09: M14329
      NewTimeQuan := "Time Quantity";
      "Time Quantity" := 1;
      IF MODIFY THEN;
      COMMIT;

      IF CurrFieldNo = FIELDNO("Time Quantity") THEN
        lvFieldName := FIELDCAPTION("Time Quantity");
      IF NOT CONFIRM(lvText000, TRUE, lvFieldName) THEN EXIT;

      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      lvRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      lvRcpLineRec.SETRANGE("Part Group", "Part Group");
      lvRcpLineRec.SETRANGE(Part, Part);
      lvRcpLineRec.SETRANGE("Estimate Line", "Line No.");
      lvRcpLineRec.SETRANGE("Surcharge Type", lvRcpLineRec."Surcharge Type"::" ");
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF CurrFieldNo = FIELDNO("Time Quantity") THEN BEGIN
            lvRcpLineRec.VALIDATE("Time Quantity", NewTimeQuan);
          END;
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;

      lvRcpLineRec.SETFILTER("Surcharge Type", '<>%1', lvRcpLineRec."Surcharge Type"::" ");
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvRcpLineRec.CheckRecipeCharge;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;

      lvRcpLineRec.UpdateEstLines;
    END;

    PROCEDURE GetReferenceData@1100525002(VAR lvRefDate@1100525003 : Date;VAR lvDiscRef1@1100525002 : Code[20];VAR lvDiscRef2@1100525001 : Code[20];lvEstRec@1100525000 : Record 11012151;lvDiscType@1100525004 : 'Purchase,Sales');
    BEGIN
      lvRefDate := ValidateCu.GetRefDateEstimate(lvEstRec);
      ValidateCu.GetRefDiscEstimate(lvEstRec, lvDiscRef1, lvDiscRef2, lvDiscType);
    END;

    PROCEDURE CalcRentalUnits@1100525007();
    VAR
      PlantLocation@1100525000 : Record 11012554;
      RateTypeUsed@1100525002 : Option;
      CalcRentalPeriodsCu@1100525001 : Codeunit 11012568;
    BEGIN
      PlantLocation.INIT;
      PlantLocation.InitRecord;

      GetEstimate("Estimate No.", FALSE); //Call 23762
      IF EstRec."Plant Location" <> '' THEN
        PlantLocation.GET(EstRec."Plant Location");

      VALIDATE("Rental Time Units",
        CalcRentalPeriodsCu.NumberRentalPeriods(
          PlantLocation,"Start Rental Period","End Rental Period","Plant Type",'',RateTypeUsed));

      IF ("Set Code" = '') AND (Recipe = '') THEN
        TESTFIELD("Plant Price Type",RateTypeUsed + 1);
    END;

    PROCEDURE ClearFields@1100525004(FieldGroup@1100525000 : 'Material,Plant,BuyBack,Discount');
    BEGIN
      //dbeekman, 6-7-09: PlantEstimates
      CASE FieldGroup OF
        FieldGroup::Material:
          BEGIN
            CLEAR("Material Price");
            CLEAR("Item No.");
            CLEAR("Cost Object Material");
            CLEAR("Basic Item");
            CLEAR("Vendor (Trade Item)");
            CLEAR("Trade Item");
          END;
        FieldGroup::Plant:
          BEGIN
            CLEAR("Plant Price");
            CLEAR("Plant Type");
            CLEAR("Plant Price Type");
            CLEAR("Cost Object Plant")
          END;
        FieldGroup::BuyBack:
          BEGIN
            CLEAR("Buy Back Price");
            CLEAR("Buy Back %");
          END;
        FieldGroup::Discount:
          BEGIN
            CLEAR("Gross Price");
            CLEAR("Discount %");
          END;
      END;
    END;

    PROCEDURE ChkFieldsEmpty@1100525028(FieldGroup@1100525000 : 'Material,Plant,BuyBack,Discount');
    BEGIN
      //dbeekman, 6-7-09: PlantEstimates
      CASE FieldGroup OF
        FieldGroup::Material:
          BEGIN
            //dbeekman, Currently not used
            //TESTFIELD("Material Price",0);
            //TESTFIELD("Item No.",0)
          END;
        FieldGroup::Plant:
          BEGIN
            //dbeekman, Currently not used
            //TESTFIELD("Plant Price",0);
            //TESTFIELD("Plant Type",0);
            //TESTFIELD("Plant Price Type",0);
          END;
        FieldGroup::BuyBack:
          BEGIN
            TESTFIELD("Buy Back Price",0);
            TESTFIELD("Buy Back %",0);
          END;
        FieldGroup::Discount:
          BEGIN
            TESTFIELD("Discount %",0);
            TESTFIELD("Gross Price",0);
          END;
      END;
    END;

    PROCEDURE GetAttachedToLineNo@1100525005(Rec2@1100525000 : Record 11012154) : Integer;
    BEGIN
      //dbeekman, 6-7-09: PlantEstimates
      Rec2.SETRANGE("Estimate No.",Rec2."Estimate No.");
      Rec2.SETRANGE("Sub-Estimate No.",Rec2."Sub-Estimate No.");
      Rec2.SETRANGE("Part Group",Rec2."Part Group");
      Rec2.SETRANGE(Part,Rec2.Part);

      IF Rec2.NEXT <> 0 THEN
        IF (Rec2."Attached to Line No." <> 0) THEN BEGIN
          "Set Level" := Rec2."Set Level";
          EXIT(Rec2."Attached to Line No.");
        END;
      "Set Level" := 0;
      EXIT(0);
    END;

    PROCEDURE GetTotalWeight@1100525009() : Decimal;
    BEGIN
      //dbeekman, 6-7-09: PlantEstimates
      EXIT(TotalWeight);
    END;

    PROCEDURE GetTotalBuyBack@1100525010() : Decimal;
    BEGIN
      //dbeekman, 6-7-09: PlantEstimates
      EXIT(TotalBuyBack);
    END;

    PROCEDURE CalcNonIndexedTotals@1100525011();
    BEGIN
      //dbeekman, 6-7-09: PlantEstimates
      CLEAR(TotalWeight);
      CLEAR(TotalBuyBack);

      IF FINDSET THEN
        REPEAT
          TotalWeight := TotalWeight + "Cumulative Weight";
          TotalBuyBack := TotalBuyBack + "Cumulative Buy Back";
        UNTIL NEXT = 0;
    END;

    PROCEDURE InitEstimateLine@1100525006(SaveOrig@1100525000 : Boolean);
    BEGIN
      InitRecord; // 34595.n
      // 34595.so
      //db, 11-11-09: M16810
      //"Project No." := '' ;
      //IF NOT ElemRec.GET(Element) THEN
      //  Element := '' ;
      // 34595.eo

      "Object No." := '';
      "Object Customer" := '';
      "Service Order No." := '';

      "Purchase Route Reference" := '';
      IF SaveOrig = FALSE THEN BEGIN
        "Price Agreement" := FALSE;
        "Norm Agreement" := FALSE;
        "Subcontracting Agreement" := FALSE;
        "Plant Agreement" := FALSE;
      END;

      "Rental Contract No." := '';
      "Rental Contract Copied on" := 0D;

      CLEAR("Purchase Action Mat.");
      CLEAR("Purchase Phase Mat.");
      CLEAR("Purchase Action Status Mat.");
      "Purch. Action Appr. Date Mat." := 0D;
      "Advised Mat." := FALSE;

      CLEAR("Purchase Action Subc.");
      CLEAR("Purchase Phase Subc.");
      CLEAR("Purchase Action Status Subc.");
      "Purch. Action Appr. Date Subc." := 0D;
      "Advised Subc." := FALSE;

      CLEAR("Purchase Action Plant");
      CLEAR("Purchase Phase Plant");
      CLEAR("Purchase Action Status Plant");
      "Purch. Action Appr. Date Plant" := 0D;
      "Advised Plant" := FALSE;

      //db, 21-02-11: disable BOM-Item data
      "Part of Line" := 0;
      "Original Quantity" := 0;
      "Level BOM" := 0;
      "BOM Item No." := '';
    END;

    LOCAL PROCEDURE GetRentalPeriodFromSet@1100525014();
    VAR
      EstimateLine2@1100525000 : Record 11012154;
    BEGIN
      IF "Attached to Line No." = 0 THEN
        EXIT;

      EstimateLine2.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Attached to Line No.");
      IF EstimateLine2."Set Code" = '' THEN
        EXIT;

      VALIDATE("Start Rental Period", EstimateLine2."Start Rental Period");
      VALIDATE("End Rental Period", EstimateLine2."End Rental Period");
      VALIDATE("Rental Period Formula", EstimateLine2."Rental Period Formula");
      VALIDATE("Rental Time Units", EstimateLine2."Rental Time Units");
    END;

    PROCEDURE CopyRecipeText@1100485026();
    VAR
      TextRec@1100485000 : Record 11020595;
      TextRec2@1100485001 : Record 11020595;
      CurrLino@1100525001 : Integer;
    BEGIN
      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETFILTER(Group, '%1', '');
      TextRec.SETFILTER("No.", '%1', '');
      TextRec.SETRANGE("Estimate No.", "Estimate No.");
      TextRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      TextRec.SETRANGE("Part Group", "Part Group");
      TextRec.SETRANGE(Part, Part);
      TextRec.SETRANGE("Estimate Line No.", "Line No.");
      IF TextRec.FINDFIRST THEN
        EXIT;

      TextRec.RESET;
      TextRec.SETRANGE("Table Name", TextRec."Table Name"::Estimate);
      TextRec.SETRANGE(Group, "Recipe Group");
      TextRec.SETRANGE("No.", Recipe);
      TextRec.SETFILTER("Estimate No.", '%1', '');
      CurrLino := 0;
      IF TextRec.FINDSET THEN BEGIN
        REPEAT
          TextRec2.COPY(TextRec);
          TextRec2.Group := '';
          TextRec2."No." := '';

          TextRec2."Created by" := USERID;
          TextRec2."Time Created" := TIME;

          TextRec2."Estimate No." := "Estimate No.";
          TextRec2."Sub-Estimate No." := "Sub-Estimate No.";
          TextRec2."Part Group" := "Part Group";
          TextRec2.Part := Part;
          TextRec2."Estimate Line No." := "Line No.";
          CurrLino := CurrLino + 10000;
          TextRec2."Line No." := CurrLino;
          TextRec2.INSERT;
        UNTIL TextRec.NEXT = 0;
      END;
    END;

    PROCEDURE ExplodeRecipe@1100525015();
    VAR
      EstRcpLineRec@1100485004 : Record 11012156;
      EstChrgRec@1210190000 : Record 11012175;
      LastLino@1100485000 : Integer;
      CurrLevel@1100485001 : Integer;
    BEGIN
      //db, 08-10-10: M22182
      TmpRcpLineRec.DELETEALL;
      TmpChrgRec.DELETEALL;  //db, 28-03-11: M26527

      CurrLevel := -1;
      LastLino := 0;

      EstRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      EstRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      EstRcpLineRec.SETRANGE("Part Group", "Part Group");
      EstRcpLineRec.SETRANGE(Part, Part);
      EstRcpLineRec.SETRANGE("Estimate Line", "Line No.");
      IF EstRcpLineRec.FINDSET THEN BEGIN
        EstRcpLineRec.SetFromEstimateLineDelete(TRUE); //mg, 21-06-12: T000421
        REPEAT
          IF EstRcpLineRec."Recipe (Child)" = '' THEN BEGIN
            TmpRcpLineRec.TRANSFERFIELDS(EstRcpLineRec);
            TmpRcpLineRec."Line No." := LastLino + 10000;
            LastLino := TmpRcpLineRec."Line No.";
            TmpRcpLineRec.INSERT;
          END ELSE BEGIN
            ProcessRecipeChild(EstRcpLineRec."Recipe Group (Child)", EstRcpLineRec."Recipe (Child)",
              EstRcpLineRec.Quantity, LastLino, CurrLevel, EstRcpLineRec);
          END;
          EstRcpLineRec.DELETE(TRUE); //mg, 21-06-12: T000421
        UNTIL EstRcpLineRec.NEXT = 0;
        //EstRcpLineRec.DELETEALL(TRUE);
      END;

      //db.sn, 28-03-11: M26527
      IF TmpChrgRec.FIND('-') THEN BEGIN
        REPEAT
          EstChrgRec := TmpChrgRec;
          EstChrgRec.INSERT;
        UNTIL TmpChrgRec.NEXT = 0;
      END;
      //db.en, 28-03-11: M26527

      IF TmpRcpLineRec.FIND('-') THEN BEGIN
        REPEAT
          EstRcpLineRec := TmpRcpLineRec;
          EstRcpLineRec."Recipe Group" := "Recipe Group";
          EstRcpLineRec.Recipe := Recipe;
          IF TmpRcpLineRec."Rate Code" <> '' THEN
            EstRcpLineRec.VALIDATE("Rate Code", TmpRcpLineRec."Rate Code");
          EstRcpLineRec."Recipe Group (Child)" := '';
          EstRcpLineRec."Recipe (Child)" := '';
          //mg,sn, 10-10-12: C002271
          EstRcpLineRec.DetermineNormGroup;
          EstRcpLineRec.VALIDATE("Sub Operation Code");
          //mg.en, 10-10-12: C002271
          //mg.sc, 06-12-06: C000053
          EstRcpLineRec.CalculateTotals;
          EstRcpLineRec.INSERT;
          IF EstRcpLineRec."Surcharge Type" <> EstRcpLineRec."Surcharge Type"::" " THEN
            EstRcpLineRec.CheckRecipeCharge;
          //mg.ec, 06-12-06: C000053
        UNTIL TmpRcpLineRec.NEXT = 0;
        CalculateRecipe; //mg, 21-06-12: T000421
      END;
    END;

    PROCEDURE ProcessRecipeChild@1100525016(iRcpGrp@1100485000 : Code[20];iRcp@1100485001 : Code[20];iQuan@1100485004 : Decimal;VAR LastLino@1100485005 : Integer;VAR varLevel@1100485006 : Integer;EstRcpLineRec@1100485007 : Record 11012156);
    VAR
      RcpRec@1100485002 : Record 11012155;
      RcpLineRec@1100485003 : Record 11012156;
      ChrgRec1@1100525000 : Record 11012175;
      ChrgRec2@1100525001 : Record 11012175;
      TmpLineRec@1100525002 : TEMPORARY Record 11012156;
    BEGIN
      //db, 08-10-10: M22182
      varLevel := varLevel + 1;
      IF RcpRec.GET(iRcpGrp, iRcp) THEN BEGIN
        TmpRcpLineRec.INIT;
        TmpRcpLineRec."Estimate No." := EstRcpLineRec."Estimate No.";
        TmpRcpLineRec."Sub-Estimate No." := EstRcpLineRec."Sub-Estimate No.";
        TmpRcpLineRec."Part Group" := EstRcpLineRec."Part Group";
        TmpRcpLineRec.Part := EstRcpLineRec.Part;
        TmpRcpLineRec."Estimate Line" := EstRcpLineRec."Estimate Line";
        TmpRcpLineRec."Recipe Group" := EstRcpLineRec."Recipe Group";
        TmpRcpLineRec.Recipe := EstRcpLineRec.Recipe;
        TmpRcpLineRec."Line No." := LastLino + 10000;
        LastLino := TmpRcpLineRec."Line No.";
        TmpRcpLineRec."Recipe Group (Child)" := iRcpGrp;
        TmpRcpLineRec."Recipe (Child)" := iRcp;
        TmpRcpLineRec."Recipe Header" := TRUE;
        TmpRcpLineRec."Recipe Level" := varLevel;
        TmpRcpLineRec.Description := RcpRec.Description;
        TmpRcpLineRec."Unit of Measure" := RcpRec."Unit of Measure";
        TmpRcpLineRec.VALIDATE("Rate Code", '');
        IF TmpRcpLineRec.INSERT THEN
          TmpRcpLineRec.Quantity := 0;
        TmpRcpLineRec.Quantity := TmpRcpLineRec.Quantity + iQuan;
        TmpRcpLineRec."Ignore Recipe Quantity" := EstRcpLineRec."Ignore Recipe Quantity"; //mg, 19-09-11: M27994
        TmpRcpLineRec.MODIFY;
      END;

      RcpLineRec.SETFILTER("Estimate No.", '%1', '');
      RcpLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
      RcpLineRec.SETFILTER("Part Group", '%1', '');
      RcpLineRec.SETFILTER(Part, '%1', '');
      RcpLineRec.SETFILTER("Estimate Line", '%1', 0);
      RcpLineRec.SETRANGE("Recipe Group", iRcpGrp);
      RcpLineRec.SETRANGE(Recipe, iRcp);
      IF RcpLineRec.FINDSET THEN BEGIN
        REPEAT
          TmpRcpLineRec.TRANSFERFIELDS(RcpLineRec);
          TmpRcpLineRec."Estimate No." := EstRcpLineRec."Estimate No.";
          TmpRcpLineRec."Sub-Estimate No." := EstRcpLineRec."Sub-Estimate No.";
          TmpRcpLineRec."Part Group" := EstRcpLineRec."Part Group";
          TmpRcpLineRec.Part := EstRcpLineRec.Part;
          TmpRcpLineRec."Estimate Line" := EstRcpLineRec."Estimate Line";
          IF RcpLineRec."Recipe (Child)" <> '' THEN BEGIN
            IF NOT TmpRcpLineRec."Ignore Recipe Quantity" THEN //mg, 19-09-11: M27994
              ProcessRecipeChild(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)",
                iQuan * RcpLineRec.Quantity, LastLino, varLevel, EstRcpLineRec)
            ELSE
              ProcessRecipeChild(RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)",
                RcpLineRec.Quantity, LastLino, varLevel, EstRcpLineRec);
          END ELSE BEGIN
            TmpRcpLineRec."Recipe Group" := EstRcpLineRec."Recipe Group";
            TmpRcpLineRec.Recipe := EstRcpLineRec.Recipe;
            TmpRcpLineRec."Line No." := LastLino + 10000;
            LastLino := TmpRcpLineRec."Line No.";
            TmpRcpLineRec."Recipe Group (Child)" := iRcpGrp;
            TmpRcpLineRec."Recipe (Child)" := iRcp;
            TmpRcpLineRec."Recipe Header" := FALSE;
            TmpRcpLineRec."Recipe Level" := varLevel + 1;
            //db.sn, 11-12-12: C003018
            //TmpRcpLineRec."Ignore Recipe Quantity" :=
            //  TmpRcpLineRec."Ignore Recipe Quantity" OR EstRcpLineRec."Ignore Recipe Quantity";  //mg, 19-09-11: M27994
            //db.en, 11-12-12: C003018
            IF TmpRcpLineRec.INSERT THEN
              TmpRcpLineRec.Quantity := 0;
            IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
              RcpLineRec.Quantity := RcpLineRec.Quantity * RcpLineRec."Surcharge %"/100;
            IF NOT TmpRcpLineRec."Ignore Recipe Quantity" THEN //mg, 19-09-11: M27994
              TmpRcpLineRec.Quantity := TmpRcpLineRec.Quantity + iQuan * RcpLineRec.Quantity
            ELSE
              TmpRcpLineRec.Quantity := TmpRcpLineRec.Quantity + RcpLineRec.Quantity;
            TmpRcpLineRec."Ignore Recipe Quantity" :=
              TmpRcpLineRec."Ignore Recipe Quantity" OR EstRcpLineRec."Ignore Recipe Quantity";  //db, 11-12-12: C003018
            IF TmpRcpLineRec."Rate Code" = '' THEN
              TmpRcpLineRec."Rate Code" := EstRec."Rate Code";  //db, 07-03-13: C006069
            TmpRcpLineRec.MODIFY;

            //search original surcharge line:
            IF RcpLineRec."Surcharge Type" = RcpLineRec."Surcharge Type"::" " THEN BEGIN
              TmpLineRec := RcpLineRec;
              TmpLineRec.Quantity := LastLino;
              TmpLineRec.INSERT;
            END ELSE BEGIN
              ChrgRec1.SETCURRENTKEY("Recipe Group", Recipe);
              ChrgRec1.SETRANGE("Estimate No.", RcpLineRec."Estimate No.");
              ChrgRec1.SETRANGE("Sub-Estimate No.", RcpLineRec."Sub-Estimate No.");
              ChrgRec1.SETRANGE("Part Group", RcpLineRec."Part Group");
              ChrgRec1.SETRANGE(Part, RcpLineRec.Part);
              ChrgRec1.SETRANGE("Recipe Line", RcpLineRec."Estimate Line");
              ChrgRec1.SETRANGE("Recipe Group", RcpLineRec."Recipe Group");
              ChrgRec1.SETRANGE(Recipe, RcpLineRec.Recipe);
              ChrgRec1.SETRANGE("Surcharge Line", RcpLineRec."Line No.");
              IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
                REPEAT
                  ChrgRec2.INIT;
                  ChrgRec2."Estimate No." := EstRcpLineRec."Estimate No.";
                  ChrgRec2."Sub-Estimate No." := EstRcpLineRec."Sub-Estimate No.";
                  ChrgRec2."Part Group" := EstRcpLineRec."Part Group";
                  ChrgRec2.Part := EstRcpLineRec.Part;
                  ChrgRec2."Recipe Group" := EstRcpLineRec."Recipe Group";
                  ChrgRec2.Recipe := EstRcpLineRec.Recipe;
                  ChrgRec2."Recipe Line" := EstRcpLineRec."Estimate Line";
                  TmpLineRec.SETRANGE("Line No.", ChrgRec1."Basic Line");
                  IF TmpLineRec.FINDFIRST THEN
                    ChrgRec2."Basic Line" := TmpLineRec.Quantity
                  ELSE
                    ChrgRec2."Basic Line" := 0;
                  ChrgRec2."Surcharge Line" := TmpRcpLineRec."Line No.";
                  //db.sn, 28-03-11: M26527
                  //ChrgRec2.INSERT;
                  TmpChrgRec := ChrgRec2;
                  TmpChrgRec.INSERT;
                  //db.en, 28-03-11: M26527
                UNTIL ChrgRec1.NEXT = 0;
              END;
            END;
          END;
        UNTIL RcpLineRec.NEXT = 0;
      END;
      varLevel := varLevel - 1;
    END;

    PROCEDURE ChangeQuantityExplodedLines@1100525018(QuantityFactor@1100525000 : Decimal);
    VAR
      EstimateLine2@1100525001 : Record 11012154;
    BEGIN
      EstimateLine2.RESET;
      EstimateLine2.SETRANGE("Project No.","Project No.");
      EstimateLine2.SETRANGE("Part of Line","Line No.");
      EstimateLine2.SETFILTER("Line No.", '<>%1', "Line No.");
      IF EstimateLine2.FINDSET(TRUE, FALSE) THEN
        REPEAT
          IF NOT ((EstimateLine2."Item No." = '') AND (EstimateLine2."Original Quantity" = 0)) THEN BEGIN
            IF EstimateLine2."Item No." = '' THEN BEGIN
              EstimateLine2.ChangeQuantityExplodedLines(QuantityFactor);
              EstimateLine2."Original Quantity" := QuantityFactor * EstimateLine2."Original Quantity";
            END ELSE
              EstimateLine2.VALIDATE(Quantity, QuantityFactor * EstimateLine2.Quantity);
            EstimateLine2.MODIFY;
          END;
        UNTIL EstimateLine2.NEXT = 0;
    END;

    PROCEDURE CalculateSalesDiscount@1100525017(lvEstRec@1100525001 : Record 11012151);
    VAR
      lvRefDate@1100525005 : Date;
      lvDiscRef1@1100525004 : Code[20];
      lvDiscRef2@1100525003 : Code[20];
      lvRefPrio@1100525002 : Code[10];
      lvDiscType@1100525000 : 'Purchase,Sales';
    BEGIN
      //mg, 12-11-10: M23481
      IF lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales THEN BEGIN
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
        ValidateCu.GetSalesDiscount(
          lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
          "Material Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
          lvDiscRef1, lvDiscRef2, lvRefPrio);
        "Discount %" := "Sales Discount %";
      END;
      CalculateTotals;
    END;

    PROCEDURE DetermineBOMLevel@1100525019(LineNo@1100525000 : Integer;VAR BOMLevel@1100525002 : Integer);
    VAR
      EstimateLine3@1100525003 : Record 11012154;
    BEGIN
      EstimateLine3.SETRANGE("Estimate No.","Estimate No.");
      EstimateLine3.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
      EstimateLine3.SETRANGE("Part Group","Part Group");
      EstimateLine3.SETRANGE(Part,Part);
      EstimateLine3.SETRANGE("Line No.",LineNo);
      IF EstimateLine3.FINDFIRST THEN
        BOMLevel := EstimateLine3."Level BOM" + 1;
    END;

    PROCEDURE GetEstimate@1210190018(EstimateNo@1210190000 : Code[20];CatchRead@1210190001 : Boolean);
    BEGIN
      //Call 23762
      IF (EstRec."No." = EstimateNo) THEN
        EXIT;

      IF CatchRead THEN BEGIN
        IF NOT EstRec.GET(EstimateNo) THEN
          EstRec.INIT;
      END ELSE
        EstRec.GET(EstimateNo);
    END;

    PROCEDURE GetSubEstimate@1210190016(EstimateNo@1210190000 : Code[20];SubEstimateNo@1210190002 : Code[20];CatchRead@1210190001 : Boolean) : Boolean;
    BEGIN
      //Call 23762
      IF (SubEstRec."Estimate No." = EstimateNo) AND (SubEstRec."Sub-Estimate No." = SubEstimateNo) THEN
        EXIT(TRUE);  //db, 09-02-11: M32143

      IF CatchRead THEN BEGIN
        SubEstPresent := SubEstRec.GET(EstimateNo, SubEstimateNo);
        IF NOT SubEstPresent THEN
          SubEstRec.INIT;
      END ELSE
        SubEstPresent := SubEstRec.GET(EstimateNo, SubEstimateNo);

      EXIT(SubEstPresent);
    END;

    PROCEDURE GetRate@1210190015() : Boolean;
    BEGIN
      //Call 23762
      IF "Rate Code" = '' THEN
        EXIT(FALSE);

      //IF (RateRec."Estimate No." <> "Estimate No.") OR (RateRec."Rate Code" <> "Rate Code") THEN  //db, 15-04-13: C005855
        RatePresent := RateRec.GET("Estimate No.","Rate Code");

      EXIT(RatePresent);
    END;

    PROCEDURE GetDeliverableQuantity@1210190020(OrigQuan@1210190000 : Decimal) : Decimal;
    VAR
      NextQuan@1100525001 : Decimal;
      UnitFactor@1100525002 : Decimal;
      NextFactor@1100525003 : Decimal;
      ItemUnitRec@1100525004 : Record 5404;
    BEGIN
      //X007
      IF (OrigQuan <= 0) THEN
        EXIT(OrigQuan);

      IF ("Trade Item" = '') THEN BEGIN
        IF ItemRec.GET("Item No.") THEN BEGIN
          IF ItemUnitRec.GET("Item No.", "Unit of Measure") THEN BEGIN
            EXIT(OrigQuan * ItemUnitRec."Qty. per Unit of Measure");
          END;
        END;
        EXIT(OrigQuan);
      END;

      IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN
        EXIT(OrigQuan);

      IF TradeItemRec."Application Unit Quantity" = 0 THEN
        TradeItemRec."Application Unit Quantity" := 1;
      IF TradeItemRec."Minimum Order Quantity" = 0 THEN
        TradeItemRec."Minimum Order Quantity" := 1;
      IF TradeItemRec."Lot Size Quantity" = 0 THEN
        TradeItemRec."Lot Size Quantity" := 1;
      UnitFactor := TradeItemRec."Application Unit Quantity" * TradeItemRec."Minimum Order Quantity";
      IF TradeItemRec."Application Unit Quantity" = 1 THEN
        NextFactor := TradeItemRec."Lot Size Quantity"
      ELSE
        NextFactor := UnitFactor;

      IF UnitFactor > 1 THEN BEGIN
        NextQuan := UnitFactor;
        IF OrigQuan <= NextQuan THEN
          EXIT( NextQuan);
        REPEAT
          NextQuan := NextQuan + NextFactor;
        UNTIL NextQuan >= OrigQuan;
        EXIT( NextQuan);
      END;

      EXIT( ROUND(OrigQuan, TradeItemRec."Lot Size Quantity", '>'));
    END;

    PROCEDURE InitNormPrice@1210190021();
    BEGIN
       //db, 29-11-11: M31109
       Norm := 0;
       "Production Rate" := 0;
       "Material Price" := 0;
       "Discount %" := 0;
       "Gross Price" := 0;
       "Subcontracting Price" := 0;
       "Plant Price" := 0;
    END;

    PROCEDURE UpdateProjPlanActCode@1210190022();
    VAR
      lvRcpLineRec@1100485001 : Record 11012156;
    BEGIN
      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      lvRcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      lvRcpLineRec.SETRANGE("Part Group", "Part Group");
      lvRcpLineRec.SETRANGE(Part, Part);
      lvRcpLineRec.SETRANGE("Estimate Line", "Line No.");

      lvRcpLineRec.SETFILTER("Project Planning Activity Code", '%1|%2', '', xRec."Project Planning Activity Code");

      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvRcpLineRec.VALIDATE("Project Planning Activity Code", "Project Planning Activity Code");
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE InitRecord@1210190023();
    VAR
      BaseActRec@1100409000 : Record 11012434;
    BEGIN
      // 34595.n
      IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN BEGIN
        "Project No." := EstPartRec."Project No.";
        IF NOT ElemRec.GET(Element) THEN  //db, 28-09-12: C002764
          Element := EstPartRec.Element;
        IF NOT BaseActRec.GET("Project Planning Activity Code") THEN  //db, 26-10-12
          "Project Planning Activity Code" := EstPartRec."Project Planning Activity Code";
      END;
    END;

    PROCEDURE SetFilterZeroLinesByUser@1100525025(VAR EstimateLine@1100525002 : Record 11012154);
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      WITH EstimateLine DO BEGIN
        UserSetup.GET(USERID);
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          UserSetup."Hide Zero Lines" := TRUE;
        END ELSE BEGIN
          UserSetup."Hide Zero Lines" := FALSE;
        END;
        UserSetup.MODIFY;
      END;
      GetFilterZeroLinesByUser(EstimateLine);
    END;

    PROCEDURE GetFilterZeroLinesByUser@1100525012(VAR EstimateLine@1100525002 : Record 11012154);
    VAR
      UserSetup@1100525001 : Record 91;
      EstRec@1100525000 : Record 11012151;
    BEGIN
      //C025240
      WITH EstimateLine DO BEGIN
        UserSetup.GET(USERID);
        IF NOT EstRec.GET("Estimate No.") THEN
          EstRec.INIT;  //due to problems with filter on mainpage (EstPart) with subpage-link (EstLine)
        EstRec.CALCFIELDS("Quantity Model Exist");
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          IF EstRec."Quantity Model Exist" THEN
            SETRANGE("Quantity Model Exist")
          ELSE
            SETRANGE(Quantity);
        END ELSE BEGIN
          IF EstRec."Quantity Model Exist" THEN
            SETRANGE("Quantity Model Exist", TRUE)
          ELSE
            SETFILTER(Quantity, '<>%1', 0);
        END;
      END;
    END;

    PROCEDURE CheckHideZeroLines@1100525008();
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Hide Zero Lines", FALSE);
    END;

    BEGIN
    {
      dbeekman, 15-4-09
        - discount and gross price is not only used for material but also for plant, => calculatediscount changed

      X055: line estimate (db, 01-09-11)
    }
    END.
  }
}

