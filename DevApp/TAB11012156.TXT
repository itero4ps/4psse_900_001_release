OBJECT Table 11012156 Recipe Line OLD
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 91=rm;
    OnInsert=BEGIN
               IF EstRec.GET("Estimate No.") THEN BEGIN
                 IF NOT EstRec."RAW Estimate" THEN  //db, 14-03-16: raw-estimate should be redesigned to use new base recipe(line)
                   ERROR(Text999);  //db, 14-03-16: old estimate expired in Nav2016
               END;

               IF "Recipe (Child)" = '' THEN BEGIN
                 CheckDefaultRate;
                 xRec."Rate Type" := "Rate Type";  //disable function ConvertNorm by next validate
                 xRec."Team Size" := "Team Size";
                 VALIDATE("Rate Code");            //get actual rate (if copied from old template)
                 DetermineNormGroup;
               END;

               InitRecipeLine(FALSE);  //db, 11-11-09: M16810
               InitAdjustmentFactor;
               IF Quantity <> 0 THEN
                 VALIDATE(Quantity);  //if Ctrl C+V used, force update hours based on adjustment factor

               "Attached to Line No." := GetAttachedToLineNo(Rec);
             END;

    OnModify=BEGIN
               IF "Estimate No." <> '' THEN BEGIN
                 EstRec.UpdateLogbook("Estimate No.");
                 IF EstRec.GET("Estimate No.") THEN BEGIN
                   IF NOT EstRec."RAW Estimate" THEN  //db, 14-03-16: raw-estimate should be redesigned to use new base recipe(line)
                     ERROR(Text999);  //db, 14-03-16: old estimate expired in Nav2016
                 END;
               END ELSE BEGIN
                 CentrManagementCU.EditRecipeLine(Rec,2,xRec);
               END;
             END;

    OnDelete=VAR
               EstLineRec@11012000 : Record 11012154;
               QuanSheetRec@1210190001 : Record 11012186;
               QuantityRelation@1100409000 : Record 11020463;
               BufferRec@1100485002 : Record 11012195;
               SurchLine@1100485001 : Integer;
               ChrgRec2@1100409001 : Record 11012175;
             BEGIN
               EstimateMgmt.ModifyLinkedRcpLines(0,Rec,0); //0:delete

               IF "Estimate No." <> '' THEN BEGIN
                 IF NOT FromRecipeLineDelete THEN BEGIN //Call 23762
                   IF EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN BEGIN
                     CALCFIELDS("Hours Recipe","Labor Recipe","Material Recipe","Gross Price Recipe",
                       "Subcontracting Recipe","Plant Recipe","Total Recipe","Buy Back Recipe","Weight Recipe");
                     //db.sn, 03-11-11: M27731
                     CALCFIELDS("Original Hours Recipe","Original Material Recipe","Original Gross Price Recipe",
                       "Original Subcontracting Recipe","Original Plant Recipe");
                     //db.en, 03-11-11: M27731

                     EstLineRec.Weight := "Weight Recipe" - "Total Weight";
                     EstLineRec."Buy Back Price" := "Buy Back Recipe" - "Buy Back Amount";
                     //db.sn, 03-11-11: M27731
                     EstLineRec."Plant Price" := "Original Plant Recipe" - "Original Plant Amount";
                     EstLineRec."Material Price" := "Original Material Recipe" - "Original Material Amount";
                     EstLineRec."Gross Price" := "Original Gross Price Recipe" - "Original Gross Amount";
                     EstLineRec."Subcontracting Price" := "Original Subcontracting Recipe" - "Original Subcontracting Amount";
                     EstLineRec.Norm := "Original Hours Recipe" - "Original Hours";
                     IF EstLineRec.Norm <> 0 THEN
                       EstLineRec."Production Rate" := 1 / EstLineRec.Norm
                     ELSE
                       EstLineRec."Production Rate" := 0;
                     IF EstLineRec."Gross Price" = 0 THEN
                       EstLineRec."Discount %" := 0
                     ELSE
                       EstLineRec."Discount %" :=
                         100 * (EstLineRec."Gross Price" - EstLineRec."Material Price") / EstLineRec."Gross Price";
                     //db.en, 03-11-11: M27731

                     EstLineRec.Rate := CheckRate(1);
                     EstLineRec.CalculateTotals;
                     EstLineRec.MODIFY;
                   END;
                   EstRec.UpdateLogbook("Estimate No.");
                 END; //Call 23762
               END ELSE BEGIN
                 CentrManagementCU.EditRecipeLine(Rec,4,xRec);
               END;

               EstCodeRec.RESET;
               EstCodeRec.SETRANGE("Estimate No.","Estimate No.");
               EstCodeRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               EstCodeRec.SETRANGE("Part Group","Part Group");
               EstCodeRec.SETRANGE(Part,Part);
               EstCodeRec.SETRANGE("Estimate Line","Estimate Line");
               EstCodeRec.SETRANGE("Recipe Group","Recipe Group");
               EstCodeRec.SETRANGE(Recipe,Recipe);
               EstCodeRec.SETRANGE("Recipe Line","Line No.");
               IF NOT EstCodeRec.ISEMPTY THEN //Call 23762
                 EstCodeRec.DELETEALL;

               //db.sn, 26-01-15: C020404
               ChrgRec.RESET;
               ChrgRec.SETRANGE("Estimate No.","Estimate No.");
               ChrgRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               ChrgRec.SETRANGE("Part Group","Part Group");
               ChrgRec.SETRANGE(Part,Part);
               ChrgRec.SETRANGE("Recipe Line","Estimate Line");
               ChrgRec.SETRANGE("Recipe Group","Recipe Group");
               ChrgRec.SETRANGE(Recipe,Recipe);
               ChrgRec.SETRANGE("Basic Line","Line No."); //remove estimated lines included in surcharge
               IF ChrgRec.FINDSET THEN BEGIN
                 REPEAT
                   SurchLine := ChrgRec."Surcharge Line";
                   ChrgRec.DELETE;
                   IF Amount <> 0 THEN BEGIN  //skip calculate charge if current line will not change result
                     IF RcpLineRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part,
                       "Estimate Line", "Recipe Group", Recipe, SurchLine) THEN BEGIN
                       RcpLineRec.CheckRecipeCharge;
                       //db, 30-01-15: if last basic line deleted for surcharge, initialise surcharge line to disable totals
                       ChrgRec2.COPY(ChrgRec);
                       ChrgRec2.SETFILTER("Basic Line", '<>%1', "Line No.");
                       ChrgRec2.SETRANGE("Surcharge Line",SurchLine);
                       IF NOT ChrgRec2.FINDFIRST THEN BEGIN
                         RcpLineRec.InitNormPrice;
                         RcpLineRec.CalculateTotals;
                         RcpLineRec.MODIFY;
                       END;
                     END;
                   END;
                 UNTIL ChrgRec.NEXT = 0;
               END;

               ChrgRec.SETRANGE("Basic Line");
               ChrgRec.SETRANGE("Surcharge Line","Line No.");  //delete surcharge lines
               ChrgRec.DELETEALL;
               //db.en, 26-01-15: C020404

               QuanSheetRec.RESET;
               QuanSheetRec.SETRANGE("Estimate No.","Estimate No.");
               QuanSheetRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuanSheetRec.SETRANGE("Part Group","Part Group");
               QuanSheetRec.SETRANGE(Part,Part);
               QuanSheetRec.SETRANGE("Estimate Line","Estimate Line");
               QuanSheetRec.SETRANGE("Recipe Group","Recipe Group");
               QuanSheetRec.SETRANGE(Recipe,Recipe);
               QuanSheetRec.SETRANGE("Recipe Line","Line No.");
               IF NOT QuanSheetRec.ISEMPTY THEN //Call 23762
                 QuanSheetRec.DELETEALL;

               //DP00686.sn
               QuantityRelation.RESET;
               QuantityRelation.SETRANGE("Estimate No.","Estimate No.");
               QuantityRelation.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               QuantityRelation.SETRANGE("Part Group","Part Group");
               QuantityRelation.SETRANGE(Part,Part);
               QuantityRelation.SETRANGE("Estimate Line","Estimate Line");
               QuantityRelation.SETRANGE("Recipe Group","Recipe Group");
               QuantityRelation.SETRANGE(Recipe,Recipe);
               QuantityRelation.SETRANGE("Recipe Line","Line No.");
               IF NOT QuantityRelation.ISEMPTY THEN //Call 23762
                 QuantityRelation.DELETEALL;
               //DP00686.en

               BufferRec.RESET;
               BufferRec.SETRANGE("Estimate No.","Estimate No.");
               BufferRec.SETRANGE("Sub-Estimate No.","Sub-Estimate No.");
               BufferRec.SETRANGE("Part Group","Part Group");
               BufferRec.SETRANGE(Part,Part);
               BufferRec.SETRANGE("Estimate Line","Estimate Line");
               BufferRec.SETRANGE("Recipe Group","Recipe Group");
               BufferRec.SETRANGE(Recipe,Recipe);
               BufferRec.SETRANGE("Recipe Line","Line No.");
               IF NOT BufferRec.ISEMPTY THEN //Call 23762
                 BufferRec.DELETEALL;

               IF "Estimate No." = '' THEN BEGIN //Call 23762
                 DELETE;
                 UpdateRelatedRecipe("Recipe Group", Recipe);
                 INSERT;
               END; //Call 23762
             END;

    CaptionML=ENU=Recipe Line OLD;
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=ENU=Estimate No. }
    { 20  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation="Sub-Estimate OLD"."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Sub-Estimate No. }
    { 21  ;   ;Sub-Estimate Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sub-Estimate OLD".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                            Sub-Estimate No.=FIELD(Sub-Estimate No.)));
                                                   CaptionML=ENU=Sub-Estimate Description;
                                                   Editable=No }
    { 25  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Part OLD"."Part Group" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   CaptionML=ENU=Part Group }
    { 30  ;   ;Part                ;Code20        ;TableRelation="Estimate Part OLD".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                 Part Group=FIELD(Part Group));
                                                   CaptionML=ENU=Part }
    { 31  ;   ;Part Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Part OLD".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part=FIELD(Part)));
                                                   CaptionML=ENU=Part Description;
                                                   Editable=No }
    { 40  ;   ;Estimate Line       ;Integer       ;TableRelation="Estimate Line OLD"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                       Part=FIELD(Part));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Estimate Line }
    { 41  ;   ;Recipe              ;Code20        ;TableRelation="Recipe OLD".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe }
    { 42  ;   ;Recipe Group        ;Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Recipe));
                                                   CaptionML=ENU=Recipe Group }
    { 50  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 51  ;   ;Attached to Line No.;Integer       ;TableRelation="Recipe Line OLD"."Line No." WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                     Part Group=FIELD(Part Group),
                                                                                                     Part=FIELD(Part),
                                                                                                     Estimate Line=FIELD(Estimate Line),
                                                                                                     Recipe=FIELD(Recipe),
                                                                                                     Recipe Group=FIELD(Recipe Group));
                                                   CaptionML=ENU=Attached to Line No. }
    { 52  ;   ;Set Level           ;Integer       ;CaptionML=ENU=Set Level }
    { 55  ;   ;Set Code            ;Code10        ;TableRelation="Plant Set";
                                                   OnValidate=VAR
                                                                PlantSet@1100525000 : Record 11012587;
                                                              BEGIN
                                                                IF NOT PlantSet.GET("Set Code") THEN
                                                                  PlantSet.INIT;
                                                                Description := PlantSet.Description;
                                                                "Unit of Measure" := PlantSet."Unit of Measure";

                                                                IF "Line No." <> 0 THEN // T000129
                                                                  EstimateMgmt.ModifyLinkedRcpLines(0,Rec,0); //0:delete
                                                              END;

                                                   CaptionML=ENU=Set Code }
    { 60  ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                UpdateEst.CheckBackSlash(Description);
                                                              END;

                                                   CaptionML=ENU=Description }
    { 70  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec.Quantity = 0 THEN
                                                                  EstimateMgmt.SetQuantityRatio(1)
                                                                ELSE
                                                                  EstimateMgmt.SetQuantityRatio(Quantity / xRec.Quantity);
                                                                EstimateMgmt.ModifyLinkedRcpLines(1,Rec,0); //1:modify quantity

                                                                CalculateTotals;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF EnterQuantity(4) THEN
                                                                EditQuanSheet;
                                                            END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 75  ;   ;Estimate Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Line OLD".Quantity WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                          Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                          Part Group=FIELD(Part Group),
                                                                                                          Part=FIELD(Part),
                                                                                                          Line No.=FIELD(Estimate Line)));
                                                   CaptionML=ENU=Estimate Quantity;
                                                   Editable=No }
    { 80  ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN BEGIN
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                                  CalculateTotals;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 85  ;   ;Norm Group          ;Code10        ;TableRelation="Norm Group".Code;
                                                   OnValidate=BEGIN
                                                                DetermineNorm;
                                                              END;

                                                   CaptionML=ENU=Norm Group }
    { 87  ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   OnValidate=VAR
                                                                ValidateNewCostObject@1210190000 : Boolean;
                                                              BEGIN
                                                                DetermineNormGroup;
                                                                DetermineNorm;

                                                                IF "Sub Operation Code" <> '' THEN //Call 23762
                                                                  IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
                                                                    SubOperRec.TESTFIELD(Expired,FALSE);  //db, 07-12-09
                                                                    IF SubOperRec.Operation <> '' THEN //Call 23762
                                                                      IF OperRec.GET(SubOperRec.Operation) THEN BEGIN
                                                                        //Call 23762
                                                                        IF ("Cost Object Labor" = '') THEN
                                                                          ValidateNewCostObject := TRUE
                                                                        ELSE
                                                                          ValidateNewCostObject := OldSubOperationDefault;
                                                                        IF ValidateNewCostObject THEN BEGIN
                                                                        //Call 23762
                                                                          VALIDATE("Cost Object Labor", OperRec."Cost Object");
                                                                          CheckCostObject("Cost Object Labor",FALSE);
                                                                        END;
                                                                        IF OperRec."Rate Code" <> '' THEN
                                                                          IF "Rate Code" <> OperRec."Rate Code" THEN //Call 23762
                                                                            VALIDATE("Rate Code", OperRec."Rate Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Sub Operation Code }
    { 90  ;   ;Norm                ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> FIELDNO("Production Rate") THEN
                                                                  IF Norm <> 0 THEN
                                                                    "Production Rate" := 1 / Norm
                                                                  ELSE
                                                                    "Production Rate" := 0;

                                                                CalculateTotals;  //db, 24-09-12: norm and production rate used to calculate hours
                                                              END;

                                                   CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 95  ;   ;Production Rate     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Production Rate" <> 0 THEN
                                                                  VALIDATE(Norm, 1 / "Production Rate")
                                                                ELSE
                                                                  VALIDATE(Norm,1);
                                                              END;

                                                   CaptionML=ENU=Production Rate;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 100 ;   ;Rate Code           ;Code10        ;TableRelation=IF (Estimate No.=FILTER(<>'')) "Estimate Rate"."Rate Code" WHERE (Estimate No.=FIELD(Estimate No.))
                                                                 ELSE IF (Estimate No.=FILTER(''),
                                                                          Rates Based On=CONST(Rate Group)) "Rate by Group"."Rate Code"
                                                                          ELSE IF (Estimate No.=FILTER(''),
                                                                                   Rates Based On=CONST(Budget Rate)) "Budget Rate".Code;
                                                   OnValidate=BEGIN
                                                                IF "Rate Code" = '' THEN BEGIN
                                                                  IF ("Sub Operation Code" <> '') AND ("Estimate No." <> '') THEN //mg.c, 29-09-11: M28465
                                                                    TESTFIELD("Rate Code");
                                                                  Norm := 0;
                                                                  "Production Rate" := 0;
                                                                  Rate := 0;
                                                                  CLEAR("Rate Type");
                                                                  "Team Size" := 0;
                                                                  "Wage Component" := '';  //DP00236
                                                                END;

                                                                GetEstSetup; //Call 23762
                                                                IF "Estimate No." <> '' THEN BEGIN
                                                                  GetEstRate; //Call 23762
                                                                  IF "Cost Object Labor" = '' THEN
                                                                    "Cost Object Labor" := EstRateRec."Cost Object";  //db, 14-06-07
                                                                  IF (EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Budget Rate") OR  //db, 28-03-08 (M5480)
                                                                     (EstSetup."Upd. Cost Object by Rate Code") THEN  //db, 08-09-11: M29034
                                                                    IF EstRateRec."Cost Object" <> '' THEN
                                                                      "Cost Object Labor" := EstRateRec."Cost Object";  //db, 14-06-07
                                                                  Rate := EstRateRec."Cost Rate";
                                                                  "Rate Type" := EstRateRec."Rate Type";
                                                                  IF "Rate Type" = "Rate Type"::Minuts THEN
                                                                    "Team Size" := EstRateRec."Team Size"
                                                                  ELSE
                                                                    "Team Size" := 0;  //db, 21-03-13: C004083
                                                                END ELSE BEGIN
                                                                  IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Budget Rate" THEN BEGIN
                                                                    BudgetRateRec.SETRANGE(Code,"Rate Code");
                                                                    BudgetRateRec.SETRANGE("Starting Date",0D,TODAY);
                                                                    BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
                                                                    IF NOT BudgetRateRec.FINDLAST THEN
                                                                      BudgetRateRec.INIT;
                                                                    Rate := BudgetRateRec.Rate;
                                                                    "Rate Type" := "Rate Type"::Hours;
                                                                  END ELSE BEGIN
                                                                    RecipeRec.GET("Recipe Group", Recipe);
                                                                    IF "Rate Code" = '' THEN
                                                                      SetRateRec.INIT
                                                                    ELSE
                                                                      SetRateRec.GET(RecipeRec."Rate Group","Rate Code");
                                                                    IF "Cost Object Labor" = '' THEN
                                                                      "Cost Object Labor" := SetRateRec."Cost Object";  //db, 22-08-11: M28643
                                                                    IF (EstSetup."Upd. Cost Object by Rate Code") THEN  //db, 08-09-11: M29034
                                                                      IF SetRateRec."Cost Object" <> '' THEN
                                                                        "Cost Object Labor" := SetRateRec."Cost Object";
                                                                    Rate := SetRateRec."Cost Rate";
                                                                    "Rate Type" := SetRateRec."Rate Type";
                                                                    IF "Rate Type" = "Rate Type"::Minuts THEN
                                                                      "Team Size" := SetRateRec."Team Size"
                                                                    ELSE
                                                                      "Team Size" := 0;  //db, 21-03-13: C004083
                                                                  END;
                                                                END;

                                                                //check conversion norm after change of rate type and team size:
                                                                IF ("Rate Type" <> xRec."Rate Type") OR ("Team Size" <> xRec."Team Size") THEN
                                                                  ConvertNorm(("Rate Type" <> xRec."Rate Type"), ("Team Size" <> xRec."Team Size"));

                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Rate Code }
    { 110 ;   ;Rate                ;Decimal       ;CaptionML=ENU=Rate;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 120 ;   ;Material Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Material Price" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeRcpLineIsPlant(Rec) THEN BEGIN
                                                                    ChkFieldsEmpty(2); //BuyBack
                                                                    IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
                                                                      ChkFieldsEmpty(3); //Discount
                                                                  END;
                                                                CalculateDiscount;
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",0,"Material Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Material Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 130 ;   ;Subcontracting Price;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Subcontracting Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 140 ;   ;Plant Price         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Plant Price" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) THEN BEGIN
                                                                    ChkFieldsEmpty(2); //BuyBack
                                                                    IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
                                                                      ChkFieldsEmpty(3); //Discount
                                                                  END;
                                                                CalculateDiscount;
                                                                EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",0,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Plant Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 141 ;   ;Buy Back Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Buy Back Price" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) = EstimateMgmt.CostTypeRcpLineIsPlant(Rec) THEN
                                                                    ERROR(Text010);

                                                                IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) THEN
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",1,"Material Price","Buy Back Price","Buy Back %")
                                                                ELSE
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",1,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 144 ;   ;Buy Back %          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Buy Back %" <> 0 THEN
                                                                  IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) = EstimateMgmt.CostTypeRcpLineIsPlant(Rec) THEN
                                                                    ERROR(Text010);

                                                                IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) THEN
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",2,"Material Price","Buy Back Price","Buy Back %")
                                                                ELSE
                                                                  EstimateMgmt.CalcBuyBackRates("Item No.","Plant Type",2,"Plant Price","Buy Back Price","Buy Back %");
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Buy Back %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 150 ;   ;Hours               ;Decimal       ;CaptionML=ENU=Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 155 ;   ;Original Hours      ;Decimal       ;CaptionML=ENU=Original Hours;
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 160 ;   ;Labor Amount        ;Decimal       ;CaptionML=ENU=Labor Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 170 ;   ;Material Amount     ;Decimal       ;CaptionML=ENU=Material Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 171 ;   ;Gross Amount        ;Decimal       ;CaptionML=ENU=Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 175 ;   ;Original Material Amount;Decimal   ;CaptionML=ENU=Original Material Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 176 ;   ;Original Gross Amount;Decimal      ;CaptionML=ENU=Original Gross Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 180 ;   ;Subcontracting Amount;Decimal      ;CaptionML=ENU=Subcontracting Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 185 ;   ;Original Subcontracting Amount;Decimal;
                                                   CaptionML=ENU=Original Subcontracting Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 190 ;   ;Plant Amount        ;Decimal       ;CaptionML=ENU=Plant Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 191 ;   ;Buy Back Amount     ;Decimal       ;CaptionML=ENU=Buy Back Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 195 ;   ;Original Plant Amount;Decimal      ;CaptionML=ENU=Original Plant Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 200 ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   NotBlank=No;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                //dbeekman.sn, 10-3-2010: 18121
                                                                IF ("Plant Type" <> xRec."Plant Type") AND ("Plant Type" <> '') THEN BEGIN
                                                                  IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
                                                                    ClearFields(0); //Material
                                                                  GetDefaultsPlantType;
                                                                END;
                                                                //dbeekman.en
                                                              END;

                                                   CaptionML=ENU=Plant Type }
    { 271 ;   ;Plant Price Type    ;Option        ;CaptionML=ENU=Plant Price Type;
                                                   OptionCaptionML=ENU=" ,Day,Week,,Month,,,,,Hour";
                                                   OptionString=[ ,Day,Week,,Month,,,,,Hour];
                                                   Editable=No }
    { 272 ;   ;Start Rental Period ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;

                                                                EstimateMgmt.ModifyLinkedRcpLines(3,Rec,FIELDNO("Start Rental Period")); //3:fields //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Start Rental Period }
    { 273 ;   ;End Rental Period   ;Date          ;OnValidate=BEGIN
                                                                CalcRentalUnits;

                                                                EstimateMgmt.ModifyLinkedRcpLines(3,Rec,FIELDNO("End Rental Period")); //3:fields //**4PS.n
                                                              END;

                                                   CaptionML=ENU=End Rental Period }
    { 274 ;   ;Rental Period Formula;DateFormula  ;OnValidate=BEGIN
                                                                IF FORMAT("Rental Period Formula") <> '' THEN BEGIN
                                                                  IF ("Set Code" = '') AND ("Plant Type" = '') THEN
                                                                    TESTFIELD("Plant Price Type");
                                                                  VALIDATE("Time Quantity",EstimateMgmt.ConvPlantCalcPeriod("Rental Period Formula","Plant Price Type"));
                                                                END ELSE BEGIN
                                                                  IF "Rental Time Units" <> 0 THEN
                                                                    VALIDATE("Time Quantity","Rental Time Units")
                                                                  ELSE
                                                                    VALIDATE("Time Quantity",1);
                                                                END;

                                                                EstimateMgmt.ModifyLinkedRcpLines(3,Rec,FIELDNO("Rental Period Formula")); //3:fields //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Rental Period Formula }
    { 275 ;   ;Rental Time Units   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Rental Period Formula");

                                                                EstimateMgmt.ModifyLinkedRcpLines(3,Rec,FIELDNO("Rental Time Units")); //3:fields //**4PS.n
                                                              END;

                                                   CaptionML=ENU=Rental Time Units;
                                                   BlankZero=Yes }
    { 280 ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Project No. }
    { 290 ;   ;Element             ;Code20        ;TableRelation="Base Element";
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.", Element) THEN
                                                                      ElemRec.GET(Element);
                                                                  END ELSE
                                                                    ElemRec.GET(Element);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                                ProjElemRec.Element := Element;
                                                                IF PAGE.RUNMODAL(PAGE::"Project Element List", ProjElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ProjElemRec.Element);
                                                              END ELSE BEGIN
                                                                ElemRec.Code := Element;
                                                                IF PAGE.RUNMODAL(PAGE::Elements, ElemRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Element, ElemRec.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 295 ;No ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Extension Contract;
                                                   Description=DP00260 }
    { 300 ;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Labor }
    { 310 ;   ;Cost Object Material;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Material),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                GetEstSetup; //Call 23762
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Material" <> '' THEN
                                                                    IF xRec."Cost Object Material" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Material, "Cost Object Material" )
                                                                    ELSE
                                                                      IF "Cost Object Material" <> xRec."Cost Object Material" THEN
                                                                        IF "Item No." + "Basic Item" + "Trade Item" = '' THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Material, "Cost Object Material" );
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Material }
    { 320 ;   ;Cost Object Subcontracting;Code20  ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Subcontracting),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                GetEstSetup; //Call 23762
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Subcontracting" <> '' THEN
                                                                    IF xRec."Cost Object Subcontracting" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Subcontracting, "Cost Object Subcontracting" )
                                                                    ELSE
                                                                      IF "Cost Object Subcontracting" <> xRec."Cost Object Subcontracting" THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Subcontracting, "Cost Object Subcontracting");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Subcontracting }
    { 330 ;   ;Cost Object Plant   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Plant),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                GetEstSetup; //Call 23762
                                                                IF EstSetup."Default Purchase Action" THEN BEGIN
                                                                  IF "Cost Object Plant" <> '' THEN
                                                                    IF xRec."Cost Object Plant" = '' THEN
                                                                      GetDefaultsCostObject(gvCostType::Plant, "Cost Object Plant")
                                                                    ELSE
                                                                      IF "Cost Object Plant" <> xRec."Cost Object Plant" THEN
                                                                          IF CONFIRM(Text008 + Text009) THEN
                                                                            GetDefaultsCostObject(gvCostType::Plant, "Cost Object Plant");
                                                                 END;
                                                              END;

                                                   CaptionML=ENU=Cost Object Plant }
    { 335 ;No ;Cost Object Sundry  ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Sundry;
                                                   Description=DP00381 }
    { 340 ;   ;Hours Recipe        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD".Hours WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                  Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                  Part Group=FIELD(Part Group),
                                                                                                  Part=FIELD(Part),
                                                                                                  Estimate Line=FIELD(Estimate Line),
                                                                                                  Recipe Group=FIELD(Recipe Group),
                                                                                                  Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Hours Recipe;
                                                   Editable=No }
    { 345 ;   ;Original Hours Recipe;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Original Hours" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                             Part Group=FIELD(Part Group),
                                                                                                             Part=FIELD(Part),
                                                                                                             Estimate Line=FIELD(Estimate Line),
                                                                                                             Recipe Group=FIELD(Recipe Group),
                                                                                                             Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Original Hours Recipe;
                                                   Editable=No }
    { 350 ;   ;Labor Recipe        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Labor Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                           Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                           Part Group=FIELD(Part Group),
                                                                                                           Part=FIELD(Part),
                                                                                                           Estimate Line=FIELD(Estimate Line),
                                                                                                           Recipe Group=FIELD(Recipe Group),
                                                                                                           Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Labor Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 360 ;   ;Material Recipe     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Material Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                              Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                              Part Group=FIELD(Part Group),
                                                                                                              Part=FIELD(Part),
                                                                                                              Estimate Line=FIELD(Estimate Line),
                                                                                                              Recipe Group=FIELD(Recipe Group),
                                                                                                              Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Material Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 361 ;   ;Gross Price Recipe  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Gross Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                           Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                           Part Group=FIELD(Part Group),
                                                                                                           Part=FIELD(Part),
                                                                                                           Estimate Line=FIELD(Estimate Line),
                                                                                                           Recipe Group=FIELD(Recipe Group),
                                                                                                           Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Gross Price Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 365 ;   ;Original Material Recipe;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Original Material Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                       Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                       Part Group=FIELD(Part Group),
                                                                                                                       Part=FIELD(Part),
                                                                                                                       Estimate Line=FIELD(Estimate Line),
                                                                                                                       Recipe Group=FIELD(Recipe Group),
                                                                                                                       Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Original Material Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 366 ;   ;Original Gross Price Recipe;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Original Gross Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                    Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                    Part Group=FIELD(Part Group),
                                                                                                                    Part=FIELD(Part),
                                                                                                                    Estimate Line=FIELD(Estimate Line),
                                                                                                                    Recipe Group=FIELD(Recipe Group),
                                                                                                                    Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Original Gross Price Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 370 ;   ;Subcontracting Recipe;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Subcontracting Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                    Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                    Part Group=FIELD(Part Group),
                                                                                                                    Part=FIELD(Part),
                                                                                                                    Estimate Line=FIELD(Estimate Line),
                                                                                                                    Recipe Group=FIELD(Recipe Group),
                                                                                                                    Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Subcontracting Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 375 ;   ;Original Subcontracting Recipe;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Original Subcontracting Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                             Part Group=FIELD(Part Group),
                                                                                                                             Part=FIELD(Part),
                                                                                                                             Estimate Line=FIELD(Estimate Line),
                                                                                                                             Recipe Group=FIELD(Recipe Group),
                                                                                                                             Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Original Subcontracting Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 380 ;   ;Plant Recipe        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Plant Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                           Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                           Part Group=FIELD(Part Group),
                                                                                                           Part=FIELD(Part),
                                                                                                           Estimate Line=FIELD(Estimate Line),
                                                                                                           Recipe Group=FIELD(Recipe Group),
                                                                                                           Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Plant Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 381 ;   ;Buy Back Recipe     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Buy Back Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                              Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                              Part Group=FIELD(Part Group),
                                                                                                              Part=FIELD(Part),
                                                                                                              Estimate Line=FIELD(Estimate Line),
                                                                                                              Recipe Group=FIELD(Recipe Group),
                                                                                                              Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Buy Back Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 385 ;   ;Original Plant Recipe;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Plant Amount" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                           Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                           Part Group=FIELD(Part Group),
                                                                                                           Part=FIELD(Part),
                                                                                                           Estimate Line=FIELD(Estimate Line),
                                                                                                           Recipe Group=FIELD(Recipe Group),
                                                                                                           Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Original Plant Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 390 ;   ;Total Recipe        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD".Amount WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                   Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                   Part Group=FIELD(Part Group),
                                                                                                   Part=FIELD(Part),
                                                                                                   Estimate Line=FIELD(Estimate Line),
                                                                                                   Recipe Group=FIELD(Recipe Group),
                                                                                                   Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Total Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 391 ;   ;Weight Recipe       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Recipe Line OLD"."Total Weight" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                           Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                           Part Group=FIELD(Part Group),
                                                                                                           Part=FIELD(Part),
                                                                                                           Estimate Line=FIELD(Estimate Line),
                                                                                                           Recipe Group=FIELD(Recipe Group),
                                                                                                           Recipe=FIELD(Recipe)));
                                                   CaptionML=ENU=Weight Recipe;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 400 ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN BEGIN
                                                                  ClearFields(1); //Plant
                                                                  GetEstimate("Estimate No.", TRUE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::Item, EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 410 ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN BEGIN
                                                                  GetEstimate("Estimate No.", TRUE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::"Basic Item", EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 411 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Basic Item),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Editable=No }
    { 412 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Basic Item),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Editable=No }
    { 413 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Basic Item),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Editable=No }
    { 420 ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN BEGIN
                                                                  GetEstimate("Estimate No.", TRUE); //Call 23762
                                                                  ValidateItem(ItemTypeOpt::"Trade Item", EstRec, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 440 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    GetEstimate("Estimate No.", TRUE); //Call 23762
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item",EstRec,TRUE)
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor",EstRec,TRUE);
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 450 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 460 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 468 ;   ;Purchase Discount % ;Decimal       ;OnValidate=VAR
                                                                Estimate@1100528600 : Record 11012151;
                                                              BEGIN
                                                                IF CurrFieldNo = FIELDNO("Purchase Discount %") THEN BEGIN
                                                                  IF Estimate.GET("Estimate No.") THEN
                                                                    Estimate.TESTFIELD("Estimate Type", Estimate."Estimate Type"::Sales);
                                                                  IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN
                                                                    ERROR(Text012, FIELDCAPTION("Purchase Discount %"));
                                                                  IF ("Estimate No." = '') AND ("Item No." + "Basic Item" + "Trade Item" = '') THEN
                                                                    VALIDATE("Discount %", "Purchase Discount %");   //db, 18-10-12: C003079
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Purchase Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 469 ;   ;Sales Discount %    ;Decimal       ;OnValidate=VAR
                                                                Estimate@1100528600 : Record 11012151;
                                                              BEGIN
                                                                IF CurrFieldNo = FIELDNO("Sales Discount %") THEN BEGIN
                                                                  IF Estimate.GET("Estimate No.") THEN
                                                                    Estimate.TESTFIELD("Estimate Type", Estimate."Estimate Type"::Cost);
                                                                  IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN
                                                                    ERROR(Text012, FIELDCAPTION("Sales Discount %"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Sales Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 470 ;   ;Discount %          ;Decimal       ;OnValidate=VAR
                                                                Estimate@1100528600 : Record 11012151;
                                                              BEGIN
                                                                CalculateNettPrice;
                                                                CalculateTotals;

                                                                IF "Item No." + "Basic Item" + "Trade Item" = '' THEN BEGIN
                                                                  IF Estimate.GET("Estimate No.") THEN BEGIN
                                                                    CASE Estimate."Estimate Type" OF
                                                                      Estimate."Estimate Type"::Cost:
                                                                        "Purchase Discount %" := "Discount %";
                                                                      Estimate."Estimate Type"::Sales:
                                                                        "Sales Discount %" := "Discount %";
                                                                    END;
                                                                  END;
                                                                END;
                                                                IF ("Estimate No." = '') AND ("Item No." + "Basic Item" + "Trade Item" = '') THEN
                                                                  "Purchase Discount %" := "Discount %";  //db, 18-10-12: C003079
                                                              END;

                                                   CaptionML=ENU=Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 480 ;   ;Price Reference Date;Date          ;CaptionML=ENU=Price Reference Date;
                                                   Editable=No }
    { 490 ;   ;Variable            ;Boolean       ;CaptionML=ENU=Variable }
    { 500 ;   ;Rate Type           ;Option        ;CaptionML=ENU=Rate Type;
                                                   OptionCaptionML=ENU=Hours,Minuts;
                                                   OptionString=Hours,Minuts;
                                                   Editable=No }
    { 510 ;   ;Team Size           ;Decimal       ;CaptionML=ENU=Team Size;
                                                   Editable=No }
    { 520 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 530 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 540 ;   ;Surcharge %         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Surcharge %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 545 ;   ;Surcharge Type      ;Option        ;OnValidate=BEGIN
                                                                IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
                                                                  IF (xRec."Surcharge Type" = xRec."Surcharge Type"::" ") AND
                                                                     (Quantity + Norm + "Material Price" + "Subcontracting Price" + "Plant Price" <> 0) THEN
                                                                        ERROR(Text005);
                                                                  "Norm Group" := '';
                                                                  "Sub Operation Code" := '';
                                                                  InitAdjustmentFactor;
                                                                END ELSE BEGIN
                                                                  ERROR(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Surcharge Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant] }
    { 547 ;   ;Recipe Level        ;Integer       ;CaptionML=ENU=Recipe Level }
    { 550 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=ENU=Line Status }
    { 555 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor.No. WHERE (Subcontractor=CONST(Yes));
                                                   CaptionML=ENU=Subcontractor }
    { 556 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 560 ;   ;Cumulative Hours    ;Decimal       ;CaptionML=ENU=Cumulative Hours }
    { 565 ;   ;Cumulative Labor    ;Decimal       ;CaptionML=ENU=Cumulative Labor;
                                                   AutoFormatType=1 }
    { 566 ;   ;Cumulative Material ;Decimal       ;CaptionML=ENU=Cumulative Material;
                                                   AutoFormatType=1 }
    { 567 ;   ;Cumulative Subcontracting;Decimal  ;CaptionML=ENU=Cumulative Subcontracting;
                                                   AutoFormatType=1 }
    { 568 ;   ;Cumulative Plant    ;Decimal       ;CaptionML=ENU=Cumulative Plant;
                                                   AutoFormatType=1 }
    { 569 ;   ;Cumulative Buy Back ;Decimal       ;CaptionML=ENU=Cumulative Buy Back;
                                                   AutoFormatType=1 }
    { 570 ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Length;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   CaptionClass='11125667,1' }
    { 571 ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Width;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   CaptionClass='11125667,2' }
    { 572 ;   ;Height              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateQuantity;
                                                              END;

                                                   CaptionML=ENU=Height;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   CaptionClass='11125667,3' }
    { 573 ;   ;Estimate Part Quantity;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Line OLD"."Part Quantity" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                 Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                                 Part Group=FIELD(Part Group),
                                                                                                                 Part=FIELD(Part),
                                                                                                                 Line No.=FIELD(Estimate Line)));
                                                   CaptionML=ENU=Estimate Part Quantity;
                                                   Editable=No }
    { 575 ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 576 ;   ;Total Weight        ;Decimal       ;CaptionML=ENU=Total Weight;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 577 ;   ;Cumulative Weight   ;Decimal       ;CaptionML=ENU=Cumulative Weight;
                                                   DecimalPlaces=0:2 }
    { 580 ;   ;Uncoded Labor       ;Boolean       ;CaptionML=ENU=Uncoded Labor;
                                                   Editable=No }
    { 581 ;   ;Uncoded Material    ;Boolean       ;CaptionML=ENU=Uncoded Material;
                                                   Editable=No }
    { 582 ;   ;Uncoded Subcontracting;Boolean     ;CaptionML=ENU=Uncoded Subcontracting;
                                                   Editable=No }
    { 583 ;   ;Uncoded Plant       ;Boolean       ;CaptionML=ENU=Uncoded Plant;
                                                   Editable=No }
    { 584 ;   ;Uncoded Line        ;Boolean       ;CaptionML=ENU=Uncoded Line;
                                                   Editable=No }
    { 590 ;   ;Adjustment Factor Hours;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(1);
                                                              END;

                                                   CaptionML=ENU=Hours Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 591 ;   ;Adjustment Factor Material;Decimal ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(2);
                                                              END;

                                                   CaptionML=ENU=Material Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 592 ;   ;Adjustment Factor Subcontr.;Decimal;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(3);
                                                              END;

                                                   CaptionML=ENU=Subcontr. Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 593 ;   ;Adjustment Factor Plant;Decimal    ;OnValidate=BEGIN
                                                                ProcessAdjustmentFactor(4);
                                                              END;

                                                   CaptionML=ENU=Plant Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 595 ;   ;Cum. Adj. Factor Hours;Decimal     ;CaptionML=ENU=Hours Cum. Adjustment Factor;
                                                   DecimalPlaces=0:6 }
    { 596 ;   ;Cum. Adj. Factor Material;Decimal  ;CaptionML=ENU=Material Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 597 ;   ;Cum. Adj. Factor Subcontr.;Decimal ;CaptionML=ENU=Subcontr. Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 598 ;   ;Cum. Adj. Factor Plant;Decimal     ;CaptionML=ENU=Plant Cum. Adj. Factor;
                                                   DecimalPlaces=0:6 }
    { 600 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 601 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 605 ;   ;Internal Text       ;Text250       ;OnValidate=BEGIN
                                                                "Internal Text Block" := "Internal Text" <> '';
                                                              END;

                                                   CaptionML=ENU=Internal Text }
    { 606 ;   ;Internal Text Block ;Boolean       ;CaptionML=ENU=Internal Text Block;
                                                   Editable=No }
    { 620 ;   ;Ask for Quote       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Ask for Quote" THEN BEGIN
                                                                  IF ("Estimate No." = '') THEN
                                                                    "Ask for Quote" := FALSE
                                                                  ELSE BEGIN
                                                                    IF (("Material Price" = 0) AND ("Cost Object Material" = '')) AND
                                                                       (("Subcontracting Price" = 0) AND ("Cost Object Subcontracting" = '')) AND
                                                                       (("Plant Price" = 0) AND ("Cost Object Plant" = '')) THEN BEGIN
                                                                      "Ask for Quote" := FALSE;
                                                                      IF CurrFieldNo <> 0 THEN
                                                                        FIELDERROR("Ask for Quote", Text000);
                                                                    END ELSE BEGIN
                                                                      IF ( (("Material Price" <> 0) OR ("Cost Object Material" <> '')) AND
                                                                           (("Subcontracting Price" <> 0) OR ("Cost Object Subcontracting" <> '')) ) OR
                                                                         ( (("Material Price" <> 0) OR ("Cost Object Material" <> '')) AND
                                                                           (("Plant Price" <> 0) OR ("Cost Object Plant" <> '')) ) OR
                                                                         ( (("Subcontracting Price" <> 0) OR ("Cost Object Subcontracting" <> '')) AND
                                                                           (("Plant Price" <> 0) OR ("Cost Object Plant" <> '')) ) THEN BEGIN
                                                                        "Ask for Quote" := FALSE;
                                                                        IF CurrFieldNo <> 0 THEN
                                                                          FIELDERROR("Ask for Quote", Text001);
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Ask for Quote }
    { 630 ;   ;Purchase Route Reference;Code20    ;OnLookup=VAR
                                                              lvRouteRefMgtCU@1210190000 : Codeunit 11012045;
                                                            BEGIN
                                                              IF ("Estimate No." <> '') THEN
                                                                lvRouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
                                                            END;

                                                   CaptionML=ENU=Purchase Route Reference;
                                                   Editable=No }
    { 640 ;   ;Document No.        ;Code20        ;TableRelation="Document Properties";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Document No. }
    { 650 ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                CodingSystem@1210190005 : Code[20];
                                                              BEGIN
                                                                IF "Estimate No." = '' THEN BEGIN
                                                                  RecipeRec.GET("Recipe Group", Recipe);
                                                                  RecipeRec.TESTFIELD("Coding System");
                                                                  CodingSystem := RecipeRec."Coding System";
                                                                END ELSE BEGIN
                                                                  GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                  EstRec.TESTFIELD("Coding System");
                                                                  CodingSystem := EstRec."Coding System";
                                                                END;

                                                                IF Code <> '' THEN BEGIN
                                                                  FormatMgt.SetSelection(CodingSystem);
                                                                  FormatMgt.FormatElem(Code,4,'');
                                                                  CodeRec.GET(CodingSystem, Code);
                                                                END;

                                                                EstCodeRec.RESET;
                                                                EstCodeRec.SETRANGE("Estimate No.", "Estimate No.");
                                                                EstCodeRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
                                                                EstCodeRec.SETRANGE("Part Group", "Part Group");
                                                                EstCodeRec.SETRANGE(Part, Part);
                                                                EstCodeRec.SETRANGE("Estimate Line", "Estimate Line");
                                                                EstCodeRec.SETRANGE("Recipe Group", "Recipe Group");
                                                                EstCodeRec.SETRANGE(Recipe, Recipe);
                                                                EstCodeRec.SETRANGE("Recipe Line", "Line No.");
                                                                EstCodeRec.SETRANGE("Coding System", EstRec."Coding System");
                                                                EstCodeRec.DELETEALL;

                                                                IF Code <> '' THEN BEGIN
                                                                  EstCodeRec.INIT;
                                                                  EstCodeRec."Estimate No." := "Estimate No.";
                                                                  EstCodeRec."Sub-Estimate No." := "Sub-Estimate No.";
                                                                  EstCodeRec."Part Group" := "Part Group";
                                                                  EstCodeRec.Part := Part;
                                                                  EstCodeRec."Estimate Line" := "Estimate Line";
                                                                  EstCodeRec."Recipe Group" := "Recipe Group";
                                                                  EstCodeRec.Recipe := Recipe;
                                                                  EstCodeRec."Recipe Line" := "Line No.";
                                                                  EstCodeRec."Coding System" := CodingSystem;
                                                                  EstCodeRec.Code := Code;
                                                                  EstCodeRec.INSERT;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Estimate No." = '' THEN BEGIN
                                                                RecipeRec.GET("Recipe Group", Recipe);
                                                                RecipeRec.TESTFIELD("Coding System");
                                                                CodeRec.SETRANGE("Coding System", RecipeRec."Coding System");
                                                              END ELSE BEGIN
                                                                GetEstimate("Estimate No.", FALSE); //Call 23762
                                                                EstRec.TESTFIELD("Coding System");
                                                                CodeRec.SETRANGE("Coding System", EstRec."Coding System");
                                                              END;
                                                              CodeRec.Code := Code;
                                                              IF ("Estimate No." = '') AND RecipeRec.Fixed THEN
                                                                PAGE.RUNMODAL(PAGE::"Codes per Coding System", CodeRec)
                                                              ELSE
                                                                IF PAGE.RUNMODAL(PAGE::"Codes per Coding System", CodeRec) = ACTION::LookupOK THEN
                                                                  VALIDATE(Code, CodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Code }
    { 660 ;   ;Price Agreement     ;Boolean       ;CaptionML=ENU=Price Agreement }
    { 661 ;   ;Norm Agreement      ;Boolean       ;CaptionML=ENU=Norm Agreement }
    { 662 ;   ;Subcontracting Agreement;Boolean   ;CaptionML=ENU=Subcontracting Agreement }
    { 663 ;   ;Plant Agreement     ;Boolean       ;CaptionML=ENU=Plant Agreement }
    { 670 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 671 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 680 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 685 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality }
    { 690 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=ENU=Trade Expertise }
    { 700 ;   ;Recipe (Child)      ;Code20        ;TableRelation="Recipe OLD".No. WHERE (Recipe Group=FIELD("Recipe Group (Child)"));
                                                   OnValidate=BEGIN
                                                                CheckParentChildRecipe("Recipe Group (Child)", "Recipe (Child)");

                                                                IF "Recipe (Child)" <> '' THEN BEGIN
                                                                  RecipeRec.GET("Recipe Group (Child)", "Recipe (Child)");
                                                                  RecipeRec.CALCFIELDS(Hours, "Labor Amount",
                                                                    "Material Amount (Gross)", "Material Amount (Nett)", "Subcontracting Amount", "Plant Amount");
                                                                END ELSE BEGIN
                                                                  CLEAR(RecipeRec);
                                                                END;

                                                                Description := RecipeRec.Description;
                                                                "Unit of Measure" := RecipeRec."Unit of Measure";
                                                                Norm := RecipeRec.Hours;
                                                                "Norm Group" := '';  //db, 24-06-14: C010709

                                                                IF Norm <> 0 THEN
                                                                  "Production Rate" := 1 / Norm
                                                                ELSE
                                                                  "Production Rate" := 0;

                                                                "Material Price" := RecipeRec."Material Amount (Nett)";
                                                                "Gross Price" := RecipeRec."Material Amount (Gross)";
                                                                "Subcontracting Price" := RecipeRec."Subcontracting Amount";
                                                                "Plant Price" := RecipeRec."Plant Amount";

                                                                CheckDefaultRate;
                                                                IF "Rate Code" = '' THEN BEGIN
                                                                  IF RecipeRec.Hours = 0 THEN
                                                                    Rate := 0
                                                                  ELSE
                                                                    Rate := RecipeRec."Labor Amount" / RecipeRec.Hours;
                                                                END ELSE BEGIN
                                                                  xRec."Rate Type" := "Rate Type"::Hours;
                                                                  xRec."Team Size" := 0;
                                                                  VALIDATE("Rate Code");
                                                                END;

                                                                CalculateDiscount;
                                                                CalculateTotals;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe (Child) }
    { 705 ;   ;Recipe Header       ;Boolean       ;CaptionML=ENU=Recipe Header }
    { 710 ;   ;Recipe Group (Child);Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Recipe));
                                                   CaptionML=ENU=Recipe Group (Child) }
    { 720 ;   ;Additional Cost     ;Boolean       ;CaptionML=ENU=Additional Cost }
    { 740 ;   ;Removal Contribution;Boolean       ;CaptionML=ENU=Removal Contribution }
    { 750 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 755 ;   ;Comments            ;Text50        ;CaptionML=ENU=Comments }
    { 770 ;   ;Supply              ;Boolean       ;CaptionML=ENU=Supply }
    { 780 ;   ;Comments for Logistics;Text50      ;CaptionML=ENU=Comments for Logistics }
    { 790 ;   ;Material Sheet      ;Option        ;CaptionML=ENU=Material Sheet;
                                                   OptionCaptionML=ENU=Customer and Assemly,Customer Only,Assembly only,Do not report;
                                                   OptionString=Customer and Assemly,Customer Only,Assembly only,Do not report }
    { 791 ;   ;Scheme Code         ;Code15        ;CaptionML=ENU=Scheme Code }
    { 800 ;   ;Capacity            ;Decimal       ;CaptionML=ENU=Capacity;
                                                   BlankZero=Yes;
                                                   Description=expired 6.0 }
    { 801 ;   ;Capacity Unit       ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Capacity Unit;
                                                   Description=expired 6.0 }
    { 802 ;   ;Construction Year   ;Integer       ;CaptionML=ENU=Construction Year;
                                                   BlankNumbers=BlankZero;
                                                   Description=expired 6.0 }
    { 803 ;   ;Theoretical Life Span;DateFormula  ;CaptionML=ENU=Theoretical Life Span;
                                                   Description=expired 6.0 }
    { 804 ;   ;Expected Life Span  ;DateFormula   ;CaptionML=ENU=Expected Life Span;
                                                   Description=expired 6.0 }
    { 805 ;   ;Desired Condition   ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Desired Condition;
                                                   Description=expired 6.0 }
    { 806 ;   ;Actual Condition    ;Code10        ;TableRelation=Condition.Code;
                                                   CaptionML=ENU=Actual Condition;
                                                   Description=expired 6.0 }
    { 807 ;   ;Use Time            ;Decimal       ;CaptionML=ENU=Use Time (Hours/Week);
                                                   DecimalPlaces=2:;
                                                   Description=expired 6.0 }
    { 808 ;   ;Object Type         ;Text30        ;CaptionML=ENU=Object Type }
    { 809 ;   ;Object Brand        ;Text30        ;CaptionML=ENU=Object Brand }
    { 930 ;   ;Admicode            ;Code10        ;TableRelation="Admi Code";
                                                   OnValidate=VAR
                                                                lvAdmiCodeRec@1100485000 : Record 11012390;
                                                              BEGIN
                                                                IF Admicode <> '' THEN BEGIN
                                                                  lvAdmiCodeRec.GET(Admicode);
                                                                  IF Description = '' THEN
                                                                    Description := lvAdmiCodeRec.Description;

                                                                  IF ("Cost Object Material" = '') AND (lvAdmiCodeRec."Cost Object Material" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Material, lvAdmiCodeRec."Cost Object Material");
                                                                  END;

                                                                  IF ("Cost Object Subcontracting" = '') AND (lvAdmiCodeRec."Cost Object Subcontracting" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Subcontracting, lvAdmiCodeRec."Cost Object Subcontracting");
                                                                  END;

                                                                  IF ("Cost Object Plant" = '') AND (lvAdmiCodeRec."Cost Object Plant" <> '') THEN BEGIN
                                                                    GetDefaultsCostObject(gvCostType::Plant, lvAdmiCodeRec."Cost Object Plant");
                                                                  END;

                                                                 END;
                                                              END;

                                                   CaptionML=ENU=Admi Code }
    { 940 ;   ;Purchase Action Mat.;Code10        ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Material }
    { 950 ;   ;Purchase Action Filter Mat.;Code10 ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Material }
    { 960 ;   ;Purchase Phase Mat. ;Code10        ;CaptionML=ENU=Purchase Phase Material;
                                                   Numeric=Yes }
    { 970 ;   ;Purchase Action Status Mat.;Option ;CaptionML=ENU=Purchase Action Status Material;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 980 ;   ;Purch. Action Appr. Date Mat.;Date ;CaptionML=ENU=Purch. Action Approval Date Material;
                                                   Editable=No }
    { 990 ;   ;Advised Mat.        ;Boolean       ;CaptionML=ENU=Advised Material }
    { 1000;   ;Purchase Action Subc.;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Subcontracting }
    { 1010;   ;Purchase Action Filter Subc.;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Subcontracting }
    { 1020;   ;Purchase Phase Subc.;Code10        ;CaptionML=ENU=Purchase Phase Subcontracting;
                                                   Numeric=Yes }
    { 1030;   ;Purchase Action Status Subc.;Option;CaptionML=ENU=Purchase Action Status Subcontracting;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1040;   ;Purch. Action Appr. Date Subc.;Date;CaptionML=ENU=Purch. Action Approval Date Subcontracting;
                                                   Editable=No }
    { 1050;   ;Advised Subc.       ;Boolean       ;CaptionML=ENU=Advised Subcontracting }
    { 1060;   ;Purchase Action Plant;Code10       ;TableRelation="Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=ENU=Purchase Action Plant }
    { 1070;   ;Purchase Action Filter Plant;Code10;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Purchase Action Filter Plant }
    { 1080;   ;Purchase Phase Plant;Code10        ;CaptionML=ENU=Purchase Phase Plant;
                                                   Numeric=Yes }
    { 1090;   ;Purchase Action Status Plant;Option;CaptionML=ENU=Purchase Action Status Plant;
                                                   OptionCaptionML=ENU=Concept,Applied,Approved,Definitive;
                                                   OptionString=Concept,Applied,Approved,Definitive;
                                                   Editable=No }
    { 1100;   ;Purch. Action Appr. Date Plant;Date;CaptionML=ENU=Purch. Action Approval Date Plant;
                                                   Editable=No }
    { 1110;   ;Advised Plant       ;Boolean       ;CaptionML=ENU=Advised Plant }
    { 1120;   ;Ignore Recipe Quantity;Boolean     ;OnValidate=BEGIN
                                                                //db.so, 03-11-11: M27731
                                                                //IF MODIFY THEN;  //db, 27-05-10: M13221;
                                                                //db.eo, 03-11-11: M27731
                                                                CalculateTotals;
                                                              END;

                                                   CaptionML=ENU=Ignore Recipe Quantity }
    { 1130;   ;Rates Based On      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Setup"."Rates Based On");
                                                   CaptionML=ENU=Rates Based On;
                                                   OptionCaptionML=ENU=Rate Group,Budget Rate;
                                                   OptionString=Rate Group,Budget Rate;
                                                   Editable=No }
    { 1140;   ;Wage Component      ;Code10        ;TableRelation="Wage Component";
                                                   OnValidate=BEGIN
                                                                CalculateTotals;  //C026032
                                                              END;

                                                   CaptionML=ENU=Wage Component }
    { 1150;   ;Price History 0 Exists;Boolean     ;CaptionML=ENU=Price History 0 Exists;
                                                   Editable=No }
    { 1160;   ;Quantity Sheet Feature;Code10      ;TableRelation="Est. Quantity Sheet Feature";
                                                   CaptionML=ENU=Quantity Sheet Feature;
                                                   Description=DP00686 }
    { 2000;No ;Reserved range DP00381;Text1       ;CaptionML=ENU=Cost Type (Price);
                                                   Description=DP00381: range above 2000 reserved }
    { 11012434;;Project Planning Activity Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningActivity@1100528402 : Record 11012431;
                                                                ProjectPlanningBaseActivity@1100528401 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Planning Activity Code", 20, '');
                                                                IF "Project Planning Activity Code" <> '' THEN
                                                                  IF "Project No." <> '' THEN BEGIN
                                                                    IF NOT ProjectPlanningActivity.GET("Project No." + "Project Planning Activity Code") THEN
                                                                      ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                                  END ELSE
                                                                    ProjectPlanningBaseActivity.GET("Project Planning Activity Code");
                                                              END;

                                                   OnLookup=VAR
                                                              ProjectPlanningActivity@1100528401 : Record 11012431;
                                                              ProjectPlanningBaseActivity@1100528400 : Record 11012434;
                                                            BEGIN
                                                              IF "Project No." <> '' THEN BEGIN
                                                                ProjectPlanningActivity.SETRANGE("Project No.", "Project No.");
                                                                ProjectPlanningActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Project Planning Activity List", ProjectPlanningActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningActivity.Code);
                                                              END ELSE BEGIN
                                                                ProjectPlanningBaseActivity.Code := "Project Planning Activity Code";
                                                                IF PAGE.RUNMODAL(PAGE::"Proj. Planning Base Activities", ProjectPlanningBaseActivity) = ACTION::LookupOK THEN
                                                                  VALIDATE("Project Planning Activity Code", ProjectPlanningBaseActivity.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Planning Activity Code;
                                                   Description=RAW }
    { 11125671;;VAT Prod. Posting Group;Code10    ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=VAR
                                                                GWWSetup@1100525000 : Record 11012260;
                                                              BEGIN
                                                                GWWSetup.GET;
                                                                CASE "VAT Prod. Posting Group" OF
                                                                  GWWSetup."VAT Prod. Posting Group (L)": "VAT Type" := "VAT Type"::Low;
                                                                  GWWSetup."VAT Prod. Posting Group (Z)": "VAT Type" := "VAT Type"::Zero;
                                                                  ELSE BEGIN
                                                                    "VAT Type" := "VAT Type"::High;
                                                                    IF "VAT Prod. Posting Group" <> '' THEN
                                                                      TESTFIELD("VAT Prod. Posting Group", GWWSetup."VAT Prod. Posting Group (H)");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group;
                                                   Description=RAW }
    { 11125672;;VAT Type           ;Option        ;CaptionML=ENU=VAT Type;
                                                   OptionCaptionML=ENU=High,Low,Zero;
                                                   OptionString=High,Low,Zero;
                                                   Description=RAW;
                                                   Editable=No }
    { 11125678;;Norm (Plant)       ;Decimal       ;OnValidate=VAR
                                                                Recipe2@1100525000 : Record 11012155;
                                                              BEGIN
                                                                // jhoek.050210.begin
                                                                IF "Norm (Plant)" <> 0 THEN BEGIN
                                                                  TESTFIELD("Estimate No.", '');
                                                                  IF NOT Recipe2.GET("Recipe Group", Recipe) THEN
                                                                    Recipe2.INIT;
                                                                  Recipe2.TESTFIELD("Plant Rates in Hours");
                                                                END;

                                                                CalculateTotals;

                                                                IF CurrFieldNo <> FIELDNO("Production Rate (Plant)") THEN
                                                                  IF "Norm (Plant)" <> 0 THEN
                                                                    "Production Rate (Plant)" := 1 / "Norm (Plant)"
                                                                  ELSE
                                                                    "Production Rate (Plant)" := 0;
                                                                // jhoek.050210.end
                                                              END;

                                                   CaptionML=ENU=Norm (Plant);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=RAW }
    { 11125679;;Production Rate (Plant);Decimal   ;OnValidate=VAR
                                                                Recipe2@1100525000 : Record 11012155;
                                                              BEGIN
                                                                // jhoek.050210.begin
                                                                IF "Norm (Plant)" <> 0 THEN BEGIN
                                                                  TESTFIELD("Estimate No.", '');
                                                                  IF NOT Recipe2.GET("Recipe Group", Recipe) THEN
                                                                    Recipe2.INIT;
                                                                  Recipe2.TESTFIELD("Plant Rates in Hours");
                                                                END;

                                                                IF "Production Rate (Plant)" <> 0 THEN
                                                                  VALIDATE("Norm (Plant)", 1 / "Production Rate (Plant)")
                                                                ELSE
                                                                  VALIDATE("Norm (Plant)", 1);
                                                                // jhoek.050210.end
                                                              END;

                                                   CaptionML=ENU=Production Rate (Plant);
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=RAW }
    { 11125680;;Hours (Plant)      ;Decimal       ;CaptionML=ENU=Hours (Plant);
                                                   DecimalPlaces=2:5;
                                                   Description=RAW;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Estimate Line,Recipe Group,Recipe,Line No.;
                                                   SumIndexFields=Hours,Labor Amount,Material Amount,Subcontracting Amount,Plant Amount,Amount,Gross Amount,Buy Back Amount,Total Weight;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Purchase Route Reference,Ask for Quote   }
    {    ;Recipe Group (Child),Recipe (Child)      }
    {    ;Recipe Group,Recipe                      }
    {    ;Project Planning Activity Code           }
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Estimate Line,Attached to Line No.;
                                                   SumIndexFields=Original Hours,Original Material Amount,Original Subcontracting Amount,Original Plant Amount,Original Gross Amount;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EstSetup@1210190001 : Record 11012150;
      EstRateRec@11012000 : Record 11012160;
      SetRateRec@11012001 : Record 11012162;
      BudgetRateRec@1210190007 : Record 11012000;
      EstRec@11012002 : Record 11012151;
      SubEstRec@11012003 : Record 11012152;
      EstPartRec@11012004 : Record 11012153;
      EstLineRec@1210190005 : Record 11012154;
      RecipeRec@11012005 : Record 11012155;
      RcpLineRec@1100485000 : Record 11012156;
      EstCodeRec@1210190014 : Record 11012194;
      CodeRec@1210190015 : Record 11012089;
      ChrgRec@1210190000 : Record 11012175;
      RateRec@1210190006 : Record 11012160;
      OperRec@11012006 : Record 11012165;
      SubOperRec@11012007 : Record 11012166;
      TradeItemRec@1210190019 : Record 11012317;
      BasicItemRec@11012008 : Record 11012316;
      ItemRec@1210190004 : Record 27;
      DimValRec@1210190002 : Record 349;
      ElemRec@1210190021 : Record 11012060;
      ProjElemRec@1210190020 : Record 11012010;
      TradeExpRec@1100485001 : Record 11020286;
      FormatMgt@11012009 : Codeunit 11012022;
      UpdateEst@1210190009 : Codeunit 11012155;
      ValidateCu@11012010 : Codeunit 11012033;
      CentrManagementCU@11012012 : Codeunit 11012010;
      DimMgt@1210190003 : Codeunit 408;
      EstimateMgmt@1100525000 : Codeunit 11012153;
      ItemTypeOpt@1210190011 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text000@1210190013 : TextConst 'ENU=only allowed for material, subcontracting or plant (fill one of the prices or cost objects)';
      Text001@1210190012 : TextConst 'ENU=not allowed  for a combination of cost types (material, subcontracting and/or plant), split the recipe line';
      Text004@1210190016 : TextConst 'ENU=Remove Charge Line';
      Text005@1210190017 : TextConst 'ENU=Switch to Surcharge Line not allowed for Recipe Line with filled Quantity, Norm or Price';
      Text006@1100485004 : TextConst 'ENU=Default Purchase Action %1 not present for Estimate %2.';
      Text007@1100485003 : TextConst 'ENU=%1 of %2 is not adopted, because Status is %3.';
      gvCostType@1100485005 : 'Labor,Material,Subcontracting,Plant,Sundry';
      Text008@1100485007 : TextConst 'ENU=Copy Purchase action from new Cost Object?\\';
      Text009@1100485006 : TextConst 'ENU=Only empty fields will be filled. Existing data will not be changed.';
      Text010@1100525002 : TextConst 'ENU=Discount and/or Buy Back cannot be assigned properly. Cost type should be either Material or Plant (but not both).';
      EstSetupRead@1210190028 : Boolean;
      SkipCalculateTotals@1210190010 : Boolean;
      NormPresent@1210190018 : Boolean;
      NormGroupPresent@1210190022 : Boolean;
      SubEstPresent@1210190023 : Boolean;
      FromRecipeLineDelete@1210190024 : Boolean;
      Text011@1100409000 : TextConst 'ENU=Add Line first.';
      Text012@1100528600 : TextConst 'ENU=%1 can only be changed with lines without Items';
      Text999@1100525001 : TextConst 'ENU=Convert Estimate: old Estimate Module is expired';

    PROCEDURE CalculateTotals@1();
    VAR
      EstLineRec@1210190000 : Record 11012154;
      WageCompRec@1100528900 : Record 11012014;
      OverTimeFactor@1100528901 : Decimal;
    BEGIN
      IF SkipCalculateTotals THEN //Call 23762
        EXIT; //Call 23762

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
        "Time Quantity" := 1;
        "Unit of Time" := '';
        Quantity := "Surcharge %" / 100;
      END;

      IF "Recipe (Child)" <> '' THEN BEGIN  //db, 23-05-07 (call 9504)
        IF ("Recipe Header" = FALSE) AND ("Recipe Level" = 0) THEN BEGIN  //db, 22-03-11: M26419
          IF RecipeRec.GET("Recipe Group (Child)", "Recipe (Child)") THEN BEGIN
            RecipeRec.CALCFIELDS(
              Hours,"Material Amount (Gross)","Material Amount (Nett)","Subcontracting Amount",
              "Plant Amount","Buy Back Amount","Total Weight");
            Norm := RecipeRec.Hours;
            IF Norm <> 0 THEN
              "Production Rate" := 1 / Norm
            ELSE
              "Production Rate" := 0;

            "Material Price" := RecipeRec."Material Amount (Nett)";
            "Gross Price" := RecipeRec."Material Amount (Gross)";
            "Subcontracting Price" := RecipeRec."Subcontracting Amount";
            "Plant Price" := RecipeRec."Plant Amount";
            "Buy Back Price" := RecipeRec."Buy Back Amount";
            Weight := RecipeRec."Total Weight";
          END;
        END;
      END;
      //db.sn, 21-01-14: C012356
      IF ("Recipe Header" = TRUE) AND ("Estimate No." <> '') THEN BEGIN
        //next fields should not be filled for child-recipeline (error in codeunit 11012155)
        Norm := 0;
        "Material Price" := 0;
        "Gross Price" := 0;
        "Subcontracting Price" := 0;
        "Plant Price" := 0;
        "Discount %" := 0;
      END;
      //db.en, 21-01-14: C012356

      Hours := "Time Quantity" * Quantity * Norm;
      "Hours (Plant)" := "Time Quantity" * Quantity * "Norm (Plant)";

      //db.sn, 03-11-11: M27731
      IF NOT EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN
        EstLineRec.INIT;

      IF ("Ignore Recipe Quantity" = TRUE) AND (EstLineRec.Quantity <> 0) THEN
        Hours := Hours / EstLineRec.Quantity;

      "Original Hours" := Hours;
      IF "Rate Type" = "Rate Type"::Minuts THEN
        "Original Hours" := "Original Hours" * "Team Size" / 60;
      //db.en, 03-11-11: M27731
      IF "Cum. Adj. Factor Hours" <> 0 THEN
        Hours := Hours * "Cum. Adj. Factor Hours";
      "Labor Amount"  := Hours * Rate;
      //DP00236.sn
      IF "Wage Component" <> '' THEN BEGIN
        OverTimeFactor := WageCompRec.GetBudgetOverTimeFactor("Estimate No.", "Wage Component");
        IF OverTimeFactor <> 0 THEN
          "Labor Amount" := "Labor Amount" * OverTimeFactor;
      END;
      //DP00236.en
      IF "Rate Type" = "Rate Type"::Minuts THEN
        Hours := Hours * "Team Size" / 60;

      "Material Amount" := "Time Quantity" * Quantity * "Material Price";
      "Subcontracting Amount" := "Time Quantity" * Quantity * "Subcontracting Price";

      // jhoek.begin
      CASE ("Norm (Plant)" = 0) OR ("Estimate No." <> '') OF
        TRUE:
          BEGIN
            "Plant Amount" := "Time Quantity" * Quantity * "Plant Price";
            "Gross Amount" := "Time Quantity" * Quantity * "Gross Price";
          END;
        FALSE:
          BEGIN
            "Plant Amount" := "Hours (Plant)" * "Plant Price";
            "Gross Amount" := "Hours (Plant)" * "Gross Price";
          END;
      END;
      // jhoek.end

      //db.sn, 03-11-11: M27731
      IF ("Ignore Recipe Quantity" = TRUE) AND (EstLineRec.Quantity <> 0) THEN BEGIN
        "Material Amount" := "Material Amount" / EstLineRec.Quantity;
        "Gross Amount" := "Gross Amount" / EstLineRec.Quantity;
        "Subcontracting Amount" := "Subcontracting Amount" / EstLineRec.Quantity;
        "Plant Amount" := "Plant Amount" / EstLineRec.Quantity;
      END;
      "Original Material Amount" := "Material Amount";
      "Original Gross Amount" := "Gross Amount";
      "Original Subcontracting Amount" := "Subcontracting Amount";
      "Original Plant Amount" := "Plant Amount";
      //db.en, 03-11-11: M27731
      IF "Cum. Adj. Factor Material" <> 0 THEN BEGIN
        "Material Amount" := "Material Amount" * "Cum. Adj. Factor Material";
        "Gross Amount" := "Gross Amount" * "Cum. Adj. Factor Material";
      END;
      IF "Cum. Adj. Factor Subcontr." <> 0 THEN
        "Subcontracting Amount" := "Subcontracting Amount" * "Cum. Adj. Factor Subcontr.";
      IF "Cum. Adj. Factor Plant" <> 0 THEN
        "Plant Amount" := "Plant Amount" * "Cum. Adj. Factor Plant";
      //db.sn, 29-07-10: M10904
      //"Material Amount" := ROUND("Material Amount");
      //"Gross Amount" := ROUND("Gross Amount");
      //"Subcontracting Amount" := ROUND("Subcontracting Amount");
      //"Plant Amount" := ROUND("Plant Amount");
      //db.en, 29-07-10: M10904
      Amount := "Labor Amount" + "Material Amount" + "Subcontracting Amount" + "Plant Amount";
      "Total Weight" := ROUND(Quantity * Weight);
      "Buy Back Amount" := ROUND(Quantity * "Buy Back Price");

      //db.so, 03-11-11: M27731
      //IF NOT EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN
      //  EstLineRec.INIT;
      //db.eo, 03-11-11: M27731
      UpdateCumTotals(EstLineRec);

      IF CurrFieldNo <> 0 THEN
        UpdateEstLines;  //db, 27-05-10: moved from OnValidate several fields (as Quantity, Norm, Price)

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN
        Quantity := 1;
    END;

    PROCEDURE CalculateQuantity@11012000();
    VAR
      lv1@1210190000 : Decimal;
      lv2@1210190001 : Decimal;
      lv3@1210190002 : Decimal;
    BEGIN
      lv1 := Length;
      lv2 := Width;
      lv3 := Height;

      IF Length = 0 THEN lv1 := 1;
      IF Width = 0 THEN lv2 := 1;
      IF Height = 0 THEN lv3 := 1;

      VALIDATE(Quantity, lv1 * lv2 * lv3);
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      //dbeekman.so, 26-07-10: 20026
      //IF ("Gross Price" = 0) AND ("Discount %" = 0) THEN
      //  EXIT;
      //dbeekman.eo

      //dbeekman.sn, 08-01-10: 17495
      IF EstimateMgmt.IsLineDiscountMaterialOnly THEN BEGIN
        VALIDATE("Material Price","Gross Price" - (("Gross Price"/100) * "Discount %"));
        EXIT;
      END;
      //dbeekman.en

      IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) = EstimateMgmt.CostTypeRcpLineIsPlant(Rec) THEN
        ERROR(Text010);

      IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) THEN
        VALIDATE("Material Price","Gross Price" - (("Gross Price"/100) * "Discount %"))
      ELSE
        VALIDATE("Plant Price","Gross Price" - (("Gross Price"/100) * "Discount %"));
    END;

    PROCEDURE CalculateDiscount@1210190012();
    VAR
      NettPrice@1100525000 : Decimal;
    BEGIN
      IF NOT (
        (EstimateMgmt.CostTypeRcpLineIsMat(Rec) OR EstimateMgmt.IsLineDiscountMaterialOnly) OR //dbeekman, 08-01-10: 17495
        EstimateMgmt.CostTypeRcpLineIsPlant(Rec))
      THEN BEGIN
        "Discount %" := 0;
        EXIT;
      END;

      IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) OR EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
        NettPrice := "Material Price"
      ELSE
        NettPrice := "Plant Price";

      IF "Gross Price" <> 0 THEN BEGIN
        IF  ("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Discount %" = 0) THEN
          "Gross Price" := NettPrice  //copy of EstLine: db, 04-06-07
        ELSE
          "Discount %" := (("Gross Price" - NettPrice) / "Gross Price") * 100;
      END ELSE BEGIN
        IF "Discount %" <> 100 THEN BEGIN
          IF NOT (("Item No." + "Basic Item" + "Trade Item" + "Plant Type" = '') AND ("Discount %" = 0)) THEN
            "Gross Price" := NettPrice / ((100 - "Discount %") / 100);
        END ELSE BEGIN
          "Gross Price" := NettPrice;
          NettPrice := 0;
        END;
      END;

      IF EstimateMgmt.CostTypeRcpLineIsMat(Rec) OR EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
        "Material Price" := NettPrice
      ELSE
        "Plant Price" := NettPrice;
    END;

    PROCEDURE CalculateGrossPrice@1100485000();
    BEGIN
      IF "Discount %" <> 100 THEN BEGIN
        IF EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 08-01-10: 17495
          "Gross Price" := "Material Price" * 100 / (100 - "Discount %")
        ELSE
          "Gross Price" := ("Material Price" + "Plant Price") * 100 / (100 - "Discount %");
      END;
    END;

    PROCEDURE UpdateCumTotals@1210190001(EstLineRec@1210190000 : Record 11012154);
    BEGIN
      "Cumulative Hours" := Hours * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Labor" := "Labor Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Material" := "Material Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Subcontracting" := "Subcontracting Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Plant" := "Plant Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Weight" := "Total Weight" * EstLineRec.Quantity * EstLineRec."Part Quantity";
      "Cumulative Buy Back" := "Buy Back Amount" * EstLineRec.Quantity * EstLineRec."Part Quantity";

      //db.so, 03-11-11: M27731
      //IF "Ignore Recipe Quantity" = TRUE THEN BEGIN  //db, 27-05-10: M13221
      //  IF EstLineRec.Quantity <> 0 THEN BEGIN
      //    "Cumulative Hours" := "Cumulative Hours" / EstLineRec.Quantity;
      //    "Cumulative Labor" := "Cumulative Labor" / EstLineRec.Quantity;
      //    "Cumulative Material" := "Cumulative Material" / EstLineRec.Quantity;
      //    "Cumulative Subcontracting" := "Cumulative Subcontracting" / EstLineRec.Quantity;
      //    "Cumulative Plant" := "Cumulative Plant" / EstLineRec.Quantity;
      //    "Cumulative Buy Back" := "Cumulative Buy Back" / EstLineRec.Quantity;
      //  END;
      //END;
      //db.eo, 03-11-11: M27731
    END;

    PROCEDURE UpdateEstLines@2();
    VAR
      EstLineRec@11012000 : Record 11012154;
      EstimateLineOriginal@1210190005 : Record 11012154;
      RcpLineRec@1100525000 : Record 11012156;
      OrigHoursRecipe@1210190000 : Decimal;
      AdjustHoursRecipe@1210190002 : Decimal;
      AdjustMaterialRecipe@1210190004 : Decimal;
      AdjustSubcRecipe@1210190003 : Decimal;
      AdjustPlantRecipe@1210190001 : Decimal;
    BEGIN
      IF "Estimate No." <> '' THEN BEGIN
        IF EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN BEGIN
          IF EstLineRec.Recipe = '' THEN
            EXIT;  //X055 (db, 19-10-11): problem on form (LineEstimate) while timer on recipe lines activates this function
          EstimateLineOriginal := EstLineRec; //call 30195
          CALCFIELDS("Hours Recipe","Labor Recipe","Material Recipe","Gross Price Recipe",
            "Subcontracting Recipe","Plant Recipe","Total Recipe","Buy Back Recipe","Weight Recipe");
          //db.sn, 03-11-11: M27731
          CALCFIELDS("Original Hours Recipe","Original Material Recipe","Original Gross Price Recipe",
            "Original Subcontracting Recipe","Original Plant Recipe");

          //db.sn, 27-05-10: M13221 (overbodig: zie aanpassing in CalculateTotals)
          //RcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
          //RcpLineRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          //RcpLineRec.SETRANGE("Part Group", "Part Group");
          //RcpLineRec.SETRANGE(Part, Part);
          //RcpLineRec.SETRANGE("Estimate Line", "Estimate Line");
          //RcpLineRec.SETRANGE("Ignore Recipe Quantity", TRUE);
          //IF RcpLineRec.FINDSET THEN BEGIN
          //  REPEAT
          //    IF EstLineRec.Quantity <> 0 THEN BEGIN
          //      "Hours Recipe" := "Hours Recipe" -
          //        RcpLineRec.Hours + RcpLineRec.Hours / EstLineRec.Quantity;
          //      "Labor Recipe" := "Labor Recipe" -
          //        RcpLineRec."Labor Amount" + RcpLineRec."Labor Amount" / EstLineRec.Quantity;
          //      "Material Recipe" := "Material Recipe" -
          //        RcpLineRec."Material Amount" + RcpLineRec."Material Amount" / EstLineRec.Quantity;
          //      "Gross Price Recipe" := "Gross Price Recipe" -
          //        RcpLineRec."Gross Amount" + RcpLineRec."Gross Amount" / EstLineRec.Quantity;
          //      "Subcontracting Recipe" := "Subcontracting Recipe" -
          //        RcpLineRec."Subcontracting Amount" + RcpLineRec."Subcontracting Amount" / EstLineRec.Quantity;
          //      "Plant Recipe" := "Plant Recipe" -
          //        RcpLineRec."Plant Amount" + RcpLineRec."Plant Amount" / EstLineRec.Quantity;
          //      "Buy Back Recipe" := "Buy Back Recipe" -
          //        RcpLineRec."Buy Back Amount" + RcpLineRec."Buy Back Amount" / EstLineRec.Quantity;
          //    END;
          //  UNTIL RcpLineRec.NEXT = 0;
          //END;
          //db.en, 27-05-10: M13221

          EstPartRec.GET(EstLineRec."Estimate No.", EstLineRec."Sub-Estimate No.", EstLineRec."Part Group", EstLineRec.Part);

          IF EstPartRec."Cum. Adj. Factor Hours" = 0 THEN
            EstPartRec."Cum. Adj. Factor Hours" := 1;
          AdjustHoursRecipe := "Hours Recipe" / EstPartRec."Cum. Adj. Factor Hours";

          IF EstPartRec."Cum. Adj. Factor Material" = 0 THEN
            EstPartRec."Cum. Adj. Factor Material" := 1;
          AdjustMaterialRecipe := "Material Recipe" / EstPartRec."Cum. Adj. Factor Material";

          IF EstPartRec."Cum. Adj. Factor Subcontr." = 0 THEN
            EstPartRec."Cum. Adj. Factor Subcontr." := 1;
          AdjustSubcRecipe := "Subcontracting Recipe" / EstPartRec."Cum. Adj. Factor Subcontr.";

          IF EstPartRec."Cum. Adj. Factor Plant" = 0 THEN
            EstPartRec."Cum. Adj. Factor Plant" := 1;
          AdjustPlantRecipe := "Plant Recipe" / EstPartRec."Cum. Adj. Factor Plant";
          //db.en, 03-11-11: M27731
          EstLineRec.Weight := "Weight Recipe";
          EstLineRec."Buy Back Price" := "Buy Back Recipe";
          //db.sn, 03-11-11: M27731
          EstLineRec."Plant Price" := "Original Plant Recipe";
          EstLineRec."Material Price" := "Original Material Recipe";
          EstLineRec."Gross Price" := "Original Gross Price Recipe";
          EstLineRec."Subcontracting Price" := "Original Subcontracting Recipe";
          EstLineRec.Norm := "Original Hours Recipe";
          IF EstLineRec.Norm <> 0 THEN
            EstLineRec."Production Rate" := 1 / EstLineRec.Norm
          ELSE
            EstLineRec."Production Rate" := 0;
          IF EstLineRec."Gross Price" = 0 THEN
            EstLineRec."Discount %" := 0
          ELSE
            EstLineRec."Discount %" := 100 * (EstLineRec."Gross Price" - EstLineRec."Material Price") / EstLineRec."Gross Price";

          IF "Original Hours Recipe" = 0 THEN
            EstLineRec."Adjustment Factor Hours" := 1
          ELSE
            EstLineRec."Adjustment Factor Hours" := AdjustHoursRecipe / "Original Hours Recipe";
          EstLineRec."Cum. Adj. Factor Hours" := EstLineRec."Adjustment Factor Hours" * EstPartRec."Cum. Adj. Factor Hours";

          IF "Original Material Recipe" = 0 THEN
            EstLineRec."Adjustment Factor Material" := 1
          ELSE
            EstLineRec."Adjustment Factor Material" := AdjustMaterialRecipe / "Original Material Recipe";
          EstLineRec."Cum. Adj. Factor Material" := EstLineRec."Adjustment Factor Material" * EstPartRec."Cum. Adj. Factor Material";

          IF "Original Subcontracting Recipe" = 0 THEN
            EstLineRec."Adjustment Factor Subcontr." := 1
          ELSE
            EstLineRec."Adjustment Factor Subcontr." := AdjustSubcRecipe / "Original Subcontracting Recipe";
          EstLineRec."Cum. Adj. Factor Subcontr." := EstLineRec."Adjustment Factor Subcontr." * EstPartRec."Cum. Adj. Factor Subcontr.";

          IF "Original Plant Recipe" = 0 THEN
            EstLineRec."Adjustment Factor Plant" := 1
          ELSE
            EstLineRec."Adjustment Factor Plant" := AdjustPlantRecipe / "Original Plant Recipe";
          EstLineRec."Cum. Adj. Factor Plant" := EstLineRec."Adjustment Factor Plant" * EstPartRec."Cum. Adj. Factor Plant";
          //db.en, 03-11-11: M27731

          EstLineRec.Rate := CheckRate(2);
          EstLineRec.CalculateTotals;
          IF FORMAT(EstLineRec) <> FORMAT(EstimateLineOriginal) THEN //call 30195
            EstLineRec.MODIFY;
          //check for surcharges over recipe lines in estimate (after update)
          EstLineRec.CheckEstimateCharge;
        END;
      END;
    END;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item,Trade Vendor';lvEstRec@1210190000 : Record 11012151;lvSwitchItem@1210190001 : Boolean);
    VAR
      Desc1Txt@1210190002 : Text[50];
      Desc2Txt@1210190003 : Text[50];
      lvRefDate@1100485001 : Date;
      lvDiscRef1@1100485004 : Code[20];
      lvDiscRef2@1100485003 : Code[20];
      lvRefPrio@1100525000 : Code[10];
      lvItemOper@1100485002 : Code[20];
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      IF lvSwitchItem = TRUE THEN
        "Price Agreement" := FALSE;

      "Price History 0 Exists" := FALSE;

      IF ("Purchase Route Reference" = '') AND ("Price Agreement" = FALSE) THEN BEGIN
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Purchase);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Purchase);
        IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN //Call 23762
          ValidateCu.SetLanguageCode(SubEstRec."Language Code");

        ValidateCu.ValidateItem(
          LTypeArtOpt, "Trade Item", "Item No.", Manufacturer, "Vendor (Trade Item)", "Basic Item",
          "Cost Object Material", Desc1Txt, "Unit of Measure", "Material Price",
          "Purchase Discount %", "Price Reference Date", "Gross Price", Desc2Txt, "Cost Component",
          lvDiscRef1, lvDiscRef2, lvRefDate, lvRefPrio);
        "Price History 0 Exists" := ValidateCu.PriceHistory0Exists("Trade Item", "Vendor (Trade Item)", lvRefDate);
        "Discount %" := "Purchase Discount %";  //db, 10-06-08

        IF "Cost Object Material" <> xRec."Cost Object Material" THEN
          GetDefaultsCostObject(gvCostType::Material, "Cost Object Material");

        //dbeekman.sn, 31-03-09, calculate BuyBack
        ClearFields(2); //Buyback
        IF LTypeArtOpt = LTypeArtOpt::Item THEN BEGIN
          IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
          IF ItemRec."Sales/Buy-Back Item (Plant)" THEN BEGIN  //db, 06-06-11: M27669 (skip validate for normal items)
            ValidateCu.GetSalesBuyBackRates("Item No.", lvEstRec."Plant Location",lvRefDate,
              "Gross Price","Buy Back Price");  //db, 06-06-11: M27669 (use SalesRate as GrossPrice)
            VALIDATE("Buy Back Price");
            VALIDATE("Material Price");
          END;
        END;
        //dbeekman.en

        IF Desc2Txt = '' THEN
          Description := Desc1Txt
        ELSE
          Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));
        //IF NOT EstRec.GET("Estimate No.") THEN EstRec.INIT;  db, 05-02-03 (because of temporary tables from copy/update-processes
        IF lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales THEN BEGIN
          GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
          lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
          ValidateCu.GetSalesDiscount(
            lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
            "Material Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
            lvDiscRef1, lvDiscRef2, lvRefPrio);
          "Discount %" := "Sales Discount %";  //db, 10-06-08
        END;
      END;

      IF lvSwitchItem = TRUE THEN BEGIN
        lvItemOper := '';  //db, 02-02-07: operation not per basis/trade item
        IF ItemRec.GET("Item No.") THEN BEGIN
          VALIDATE("External Text", ItemRec.Text);
          lvItemOper := ItemRec."Sub Operation Code";
        END;
        IF "Rate Code" = '' THEN
          IF "Rate Code" <> lvEstRec."Rate Code" THEN //Call 23762
            VALIDATE("Rate Code", lvEstRec."Rate Code");

        CASE LTypeArtOpt OF
          LTypeArtOpt::Item:
            BEGIN
              IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
              ItemRec.TESTFIELD(Blocked,FALSE);
              Weight := ItemRec.Weight;
            END;
          LTypeArtOpt::"Basic Item":
            BEGIN
              IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
              BasicItemRec.TESTFIELD(Expired,FALSE);
              Weight := BasicItemRec."Nett Weight";
              IF BasicItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := BasicItemRec."Sub Operation Code";
            END;
          LTypeArtOpt::"Trade Item",
          LTypeArtOpt::"Trade Vendor":
            BEGIN
              IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
              TradeItemRec.TESTFIELD(Expired,FALSE);
              Weight := TradeItemRec."Gross Weight";
              IF TradeItemRec."Sub Operation Code" <> '' THEN
                lvItemOper := TradeItemRec."Sub Operation Code";
            END;
        END;
        IF lvItemOper <> '' THEN   //db, 24-05-07 (call 9441 + problem at replacing trade item as a result of preferred vendor)
          VALIDATE("Sub Operation Code", lvItemOper);
      END;

      CalculateTotals;
    END;

    PROCEDURE DetermineNormGroup@4();
    BEGIN
      IF "Estimate No." <> '' THEN BEGIN
        IF "Norm Group" = '' THEN BEGIN
          IF GetEstPart THEN //Call 23762
            IF EstPartRec."Norm Group" = '' THEN BEGIN
              IF GetSubEstimate("Estimate No.", "Sub-Estimate No.", TRUE) THEN //Call 23762
                IF SubEstRec."Norm Group" = '' THEN BEGIN
                  GetEstimate("Estimate No.", TRUE); //Call 23762
                  IF EstRec."No." = "Estimate No." THEN //Call 23762
                    "Norm Group" := EstRec."Norm Group";
                END ELSE
                  "Norm Group" := SubEstRec."Norm Group";
            END ELSE
              "Norm Group" := EstPartRec."Norm Group";
        END;
      END ELSE BEGIN
        IF "Norm Group" = '' THEN
          IF ("Recipe Group" <> '') AND (Recipe <> '') THEN //Call 23762
            IF RecipeRec.GET("Recipe Group",Recipe) THEN
              "Norm Group" := RecipeRec."Norm Group";
      END;
    END;

    PROCEDURE DetermineNorm@7();
    VAR
      NormRec@11012000 : Record 11012163;
    BEGIN
      IF (NormRec."Sub Operation Code" <> "Sub Operation Code") OR (NormRec."Norm Group" <> "Norm Group") THEN //Call 23762
        NormPresent := NormRec.GET("Sub Operation Code","Norm Group"); //Call 23762
      IF NormPresent THEN BEGIN //Call 23762
        VALIDATE(Norm, NormRec.Norm);
        ConvertNorm(FALSE, FALSE);
      END ELSE BEGIN
        IF ("Norm Group" <> '') AND ("Sub Operation Code" <> '') THEN BEGIN
          VALIDATE(Norm, 0);
        END;
      END;
      CalculateTotals;
    END;

    PROCEDURE ConvertNorm@1210190002(SwitchType@1210190001 : Boolean;SwitchSize@1210190002 : Boolean);
    VAR
      NormGrpRec@1210190000 : Record 11012164;
    BEGIN
      IF (SwitchType = FALSE) AND (SwitchSize = FALSE) THEN BEGIN
        IF NormGrpRec.Code <> "Norm Group" THEN //Call 23762
          NormGroupPresent := NormGrpRec.GET("Norm Group"); //Call 23762
        IF NormGroupPresent THEN BEGIN //Call 23762
          IF NormGrpRec."Rate Type" <> "Rate Type" THEN
            SwitchType := TRUE;
          IF NormGrpRec."Team Size" <> "Team Size" THEN BEGIN
            SwitchSize := TRUE;
            xRec."Team Size" := NormGrpRec."Team Size";
          END;
        END;
      END;

      IF SwitchType = TRUE THEN
        IF "Rate Type" = "Rate Type"::Hours THEN
          Norm := Norm / 60
        ELSE
          Norm := Norm * 60;

      IF SwitchSize = TRUE THEN BEGIN
        IF "Team Size" <> 0 THEN
          Norm := Norm / "Team Size";
        IF xRec."Team Size" <> 0 THEN
          Norm := Norm * xRec."Team Size";
      END;

      IF SwitchSize OR SwitchType THEN
        IF Norm <> 0 THEN
          "Production Rate" := 1 / Norm
        ELSE
          "Production Rate" := 0;
    END;

    PROCEDURE HandleLookupOperationNorm@1100528902() lvRefresh : Boolean;
    VAR
      NormGroupFrm@1100528902 : Page 11012174;
      SubOperationCode@1100528900 : Code[20];
    BEGIN
      //DP00381
      IF ("Recipe (Child)" <> '') OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN EXIT;

      CLEAR(NormGroupFrm);
      NormGroupFrm.SetSelection(DATABASE::"Recipe Line OLD","Estimate No.","Sub-Estimate No.",
        "Part Group",Part,"Estimate Line","Recipe Group",Recipe);
      //db.sn, 14-01-14
      NormGroupFrm.SetSubOperation("Sub Operation Code");
      NormGroupFrm.LOOKUPMODE(TRUE);
      IF NormGroupFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        lvRefresh := NormGroupFrm.ApplySelection;
        IF lvRefresh = FALSE THEN BEGIN
          NormGroupFrm.GetSubOperation(SubOperationCode);
          IF SubOperationCode <> '' THEN BEGIN
            VALIDATE("Sub Operation Code", SubOperationCode);
            ProcessSubOperation;  //db, 28-02-14: C013489
          END;
        END;
      END;
      //db.en, 14-01-14

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupItem@1100525003(lvFieldNo@1100525004 : Integer) lvRefresh : Boolean;
    VAR
      ItemRec@1100525012 : Record 27;
      BasicItemRec@1100525011 : Record 11012316;
      TradeItemRec@1100525010 : Record 11012317;
      ItemFrm@1100525009 : Page 31;
      BasicItemFrm@1100525008 : Page 11012333;
      TradeItemFrm@1100525007 : Page 11012334;
      lvRefDate@1100525003 : Date;
      lvDiscRef1@1100525002 : Code[20];
      lvDiscRef2@1100525001 : Code[20];
      lvDiscType@1100525000 : 'Purchase,Sales';
      lvTempRecipeLine@1100525005 : TEMPORARY Record 11012156;
      g_ItemCode@1100525014 : Code[20];
      g_Vendor@1100525013 : Code[20];
    BEGIN
      IF "Recipe (Child)" <> '' THEN EXIT;

      GetEstimate("Estimate No.", TRUE); //Call 23762
      GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, EstRec, lvDiscType::Purchase);

      IF lvFieldNo = FIELDNO("Item No.") THEN BEGIN
        CLEAR(ItemFrm);
        ItemFrm.LOOKUPMODE(TRUE);
        ItemFrm.DetermineInterface(DATABASE::"Recipe Line OLD","Estimate No.","Sub-Estimate No.",
          Part,Recipe,"Estimate Line","Recipe Group","Part Group","Line No.",'','');

        IF ItemRec.GET("Item No.") THEN
          ItemFrm.SETRECORD(ItemRec);

        IF ItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemFrm.GETRECORD(ItemRec);
          VALIDATE("Item No.", ItemRec."No.");
        END ELSE BEGIN
          lvRefresh := ItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Basic Item") THEN BEGIN
        CLEAR(BasicItemFrm);
        BasicItemFrm.LOOKUPMODE(TRUE);
        BasicItemFrm.SetSelection(DATABASE::"Recipe Line OLD","Estimate No.","Sub-Estimate No.",
          Part,Recipe,"Estimate Line","Recipe Group","Part Group","Line No.",'','');

        BasicItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        BasicItemRec.InitLookup(BasicItemRec, "Basic Item", Manufacturer);
        BasicItemFrm.SETRECORD(BasicItemRec);

        IF BasicItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BasicItemFrm.GETRECORD(BasicItemRec);
          Manufacturer := BasicItemRec.Manufacturer;
          VALIDATE("Basic Item", BasicItemRec."Product Code");
        END ELSE BEGIN
          lvRefresh :=  BasicItemFrm.CheckMultiCopy;
        END;
      END;

      IF lvFieldNo = FIELDNO("Trade Item") THEN BEGIN
        IF "Item No." <> '' THEN BEGIN
          lvTempRecipeLine.COPY(Rec);  //db, 10-07-09: M15801
          lvTempRecipeLine.VALIDATE("Item No.","Item No.");
          g_ItemCode := lvTempRecipeLine."Trade Item";
          g_Vendor := lvTempRecipeLine."Vendor (Trade Item)";
        END ELSE BEGIN
          g_ItemCode := '';
          g_Vendor := '';
        END;

        CLEAR(TradeItemFrm);
        TradeItemFrm.LOOKUPMODE(TRUE);
        TradeItemFrm.SetSelection(DATABASE::"Recipe Line OLD",
          "Estimate No.", "Sub-Estimate No.", Part, Recipe, "Estimate Line",
          "Recipe Group", "Part Group", "Line No.", '', '',
          "Vendor (Trade Item)", "Trade Item", Manufacturer, "Basic Item", g_ItemCode, g_Vendor);

        TradeItemFrm.SetReference(lvRefDate, lvDiscRef1, lvDiscRef2);

        TradeItemRec.InitLookup(TradeItemRec, "Basic Item", Manufacturer, "Trade Item", "Vendor (Trade Item)");
        TradeItemFrm.SETRECORD(TradeItemRec);

        IF TradeItemFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          TradeItemFrm.GETRECORD(TradeItemRec);
          Manufacturer := TradeItemRec.Manufacturer;
          "Basic Item" := TradeItemRec."Product Code";
          "Vendor (Trade Item)" := TradeItemRec.Vendor;
          VALIDATE("Trade Item", TradeItemRec."Item Code");
        END ELSE BEGIN
          lvRefresh := TradeItemFrm.CheckMultiCopy;
        END;
      END;

      EXIT(lvRefresh);
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1210190000 : Record 5404;
      lvUnit@1210190001 : Code[10];
    BEGIN
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)");
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1210190006 : Record 11012156;MainOldRec@1210190007 : Record 11012156);
    VAR
      ItemRec@1210190004 : Record 27;
      UnitFactor@1210190005 : Decimal;
      UnitFactorOld@1210190003 : Decimal;
      UnitFactorNew@1210190002 : Decimal;
      UnitControl@1210190001 : Codeunit 5402;
    BEGIN
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        ValidateCu.SkipErrorUnitConversion(CurrFieldNo=0);  //db, 10-03-15: C017415
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,"Vendor (Trade Item)",
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
        IF (UnitFactorNew * UnitFactorOld) <> 0 THEN
          IF UnitFactorNew <> UnitFactorOld THEN  //db, 20-04-11: M26826
            VALIDATE("Gross Price", ("Gross Price" * UnitFactorNew / UnitFactorOld));
      END;
    END;

    PROCEDURE CreateCharge@1100485005();
    VAR
      RecipeLine@1100485004 : Record 11012156;
      ChrgRec@11012000 : Record 11012175;
      ChrgLine@11012001 : Integer;
      ChrgDesc@11012002 : Text[100];
      lvText001@1100485003 : TextConst 'ENU=Current line is not a surcharge line.';
      lvText003@1100485001 : TextConst 'ENU=Are these recipe lines the basis for calculating surcharge for %1 ?';
      lvText004@1100525000 : TextConst 'ENU=First select Lines';
    BEGIN
      RecipeLine.COPY(Rec);

      WITH RecipeLine DO BEGIN
        ChrgLine := "Line No.";
        ChrgDesc := Description;
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;

        //db.sn, 29-01-15
        SETFILTER("Surcharge Type", '%1', "Surcharge Type"::" ");
        SETFILTER("Line No.", '<>%1', "Line No.");
        //db.en, 29-01-15

        IF NOT FINDFIRST THEN
          MESSAGE(lvText004)
        ELSE BEGIN
          IF CONFIRM(lvText003, TRUE, ChrgDesc) THEN BEGIN
            FINDSET(FALSE, FALSE);
            REPEAT;
              IF NOT ChrgRec.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line", 0, '', 0,  //DP00481
                                 "Recipe Group", Recipe, ChrgLine, "Line No.") THEN
              BEGIN
                ChrgRec.INIT;
                ChrgRec."Estimate No." := "Estimate No.";
                ChrgRec."Sub-Estimate No." := "Sub-Estimate No.";
                ChrgRec."Part Group" := "Part Group";
                ChrgRec.Part := Part;
                ChrgRec."Recipe Line" := "Estimate Line";
                ChrgRec."Recipe Group" := "Recipe Group";
                ChrgRec.Recipe := Recipe;
                ChrgRec."Surcharge Line" := ChrgLine;
                ChrgRec."Basic Line" := "Line No.";
                ChrgRec.INSERT(TRUE);
              END;
            UNTIL NEXT = 0;
          END;
        END;
        MARKEDONLY(FALSE);
      END;

      CLEARMARKS;
    END;

    PROCEDURE CheckRecipeCharge@8();
    VAR
      ChrgRec1@11012000 : Record 11012175;
      ChrgRec2@11012001 : Record 11012175;
      RcpLineRec1@11012002 : Record 11012156;
      RcpLineRec2@11012003 : Record 11012156;
      RecipeLineOriginal@1210190000 : Record 11012156;
    BEGIN
      //read with current recipe line in surcharge table whether this is a basic line for surcharge lines.
      ChrgRec1.SETRANGE("Estimate No.", "Estimate No.");
      ChrgRec1.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      ChrgRec1.SETRANGE("Part Group", "Part Group");
      ChrgRec1.SETRANGE(Part, Part);
      ChrgRec1.SETRANGE("Recipe Line", "Estimate Line");
      ChrgRec1.SETRANGE("Recipe Group", "Recipe Group");
      ChrgRec1.SETRANGE(Recipe, Recipe);
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN
        ChrgRec1.SETRANGE("Surcharge Line", "Line No.")
      ELSE
        ChrgRec1.SETRANGE("Basic Line", "Line No.");
      IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          //make surcharge line in estimate current
          RcpLineRec2.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
            "Recipe Group", Recipe, ChrgRec1."Surcharge Line");
          RecipeLineOriginal := RcpLineRec2; //call 30195
          RcpLineRec2.InitNormPrice;
          //check all basic lines in surcharge table for surcharge line
          ChrgRec2.COPY(ChrgRec1);  //db, 15-06-10
          ChrgRec2.SETRANGE("Surcharge Line", ChrgRec1."Surcharge Line");
          ChrgRec2.SETRANGE("Basic Line");
          IF ChrgRec2.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              //determine Line Total per Cost Type for Basic Lines belonging to Surcharge
              IF RcpLineRec1.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
                 "Recipe Group", Recipe, ChrgRec2."Basic Line") THEN BEGIN
                CASE RcpLineRec2."Surcharge Type" OF
                  RcpLineRec2."Surcharge Type"::Labor:
                    RcpLineRec2.Norm := RcpLineRec2.Norm + RcpLineRec1.Hours;
                  RcpLineRec2."Surcharge Type"::Material:
                    BEGIN
                      RcpLineRec2."Material Price" := RcpLineRec2."Material Price" + RcpLineRec1."Material Amount";
                      RcpLineRec2."Gross Price" := RcpLineRec2."Gross Price" + RcpLineRec1."Gross Amount";
                    END;
                  RcpLineRec2."Surcharge Type"::Subcontracting:
                    RcpLineRec2."Subcontracting Price" := RcpLineRec2."Subcontracting Price" + RcpLineRec1."Subcontracting Amount";
                  RcpLineRec2."Surcharge Type"::Plant:
                    RcpLineRec2."Plant Price" := RcpLineRec2."Plant Price" + RcpLineRec1."Plant Amount";
                END;
              END;
            UNTIL ChrgRec2.NEXT = 0;
          END;
          //update surcharge line with totals by Cost Type of basic lines
          IF RcpLineRec2."Gross Price" <> 0 THEN
            RcpLineRec2."Discount %" :=
              100 * (RcpLineRec2."Gross Price" - RcpLineRec2."Material Price") / RcpLineRec2."Gross Price";
          IF RcpLineRec2."Surcharge Type" = RcpLineRec2."Surcharge Type"::Labor THEN BEGIN
            IF RcpLineRec2."Estimate No." <> '' THEN BEGIN
              RateRec.GET(RcpLineRec2."Estimate No.",RcpLineRec2."Rate Code");
            END ELSE BEGIN
              RecipeRec.GET("Recipe Group", Recipe);
              IF NOT SetRateRec.GET(RecipeRec."Rate Group", RcpLineRec2."Rate Code") THEN
                SetRateRec.INIT;  //db, 23-06-11: M27346
              RateRec."Rate Type" := SetRateRec."Rate Type";
              RateRec."Team Size" := SetRateRec."Team Size";
            END;
            IF RateRec."Rate Type" = RateRec."Rate Type"::Minuts THEN BEGIN
              RcpLineRec2.Norm := RcpLineRec2.Norm * 60;
              IF RateRec."Team Size" <> 0 THEN
                RcpLineRec2.Norm := RcpLineRec2.Norm / RateRec."Team Size";
            END;
            IF RcpLineRec2.Norm <> 0 THEN
              RcpLineRec2."Production Rate" := 1 / RcpLineRec2.Norm
            ELSE
              RcpLineRec2."Production Rate" := 0;
          END;
          RcpLineRec2.CalculateTotals;
          IF FORMAT(RcpLineRec2) <> FORMAT(RecipeLineOriginal) THEN //call 30195
            RcpLineRec2.MODIFY("Estimate No."='');   //db, 20-04-10: M19083 (Central Mgt)
        UNTIL ChrgRec1.NEXT = 0;
      END;
    END;

    PROCEDURE CheckRecipeCharge2@1100525008(VAR ChrgRec1@1100525000 : Record 11012175);
    VAR
      ChrgRec2@11012001 : Record 11012175;
      RcpLineRec1@11012002 : Record 11012156;
      RcpLineRec2@11012003 : Record 11012156;
      RecipeLineOriginal@1210190000 : Record 11012156;
    BEGIN
      //db, 16-06-10: M19367: filter based on tmp-table

      //read with current recipe line in surcharge table whether this is a basic line for surcharge lines.
      IF ChrgRec1.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          //make surcharge line in estimate current
          RcpLineRec2.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
            "Recipe Group", Recipe, ChrgRec1."Surcharge Line");
          RecipeLineOriginal := RcpLineRec2; //call 30195
          RcpLineRec2.Norm := 0;
          RcpLineRec2."Material Price" := 0;
          RcpLineRec2."Gross Price" := 0;
          RcpLineRec2."Discount %" := 0;
          RcpLineRec2."Subcontracting Price" := 0;
          RcpLineRec2."Plant Price" := 0;
          //check all basic lines in surcharge table for surcharge line
          ChrgRec2.SETRANGE("Estimate No.", "Estimate No.");
          ChrgRec2.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          ChrgRec2.SETRANGE("Part Group", "Part Group");
          ChrgRec2.SETRANGE(Part, Part);
          ChrgRec2.SETRANGE("Recipe Line", "Estimate Line");
          ChrgRec2.SETRANGE("Recipe Group", "Recipe Group");
          ChrgRec2.SETRANGE(Recipe, Recipe);
          ChrgRec2.SETRANGE("Surcharge Line", ChrgRec1."Surcharge Line");
          ChrgRec2.SETRANGE("Basic Line");
          IF ChrgRec2.FINDSET(FALSE, FALSE) THEN BEGIN
            REPEAT
              //determine Line Total per Cost Type for Basic Lines belonging to Surcharge
              IF RcpLineRec1.GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
                 "Recipe Group", Recipe, ChrgRec2."Basic Line") THEN BEGIN
                CASE RcpLineRec2."Surcharge Type" OF
                  RcpLineRec2."Surcharge Type"::Labor:
                    RcpLineRec2.Norm := RcpLineRec2.Norm + RcpLineRec1.Hours;
                  RcpLineRec2."Surcharge Type"::Material:
                    BEGIN
                      RcpLineRec2."Material Price" := RcpLineRec2."Material Price" + RcpLineRec1."Material Amount";
                      RcpLineRec2."Gross Price" := RcpLineRec2."Gross Price" + RcpLineRec1."Gross Amount";
                    END;
                  RcpLineRec2."Surcharge Type"::Subcontracting:
                    RcpLineRec2."Subcontracting Price" := RcpLineRec2."Subcontracting Price" + RcpLineRec1."Subcontracting Amount";
                  RcpLineRec2."Surcharge Type"::Plant:
                    RcpLineRec2."Plant Price" := RcpLineRec2."Plant Price" + RcpLineRec1."Plant Amount";
                END;
              END;
            UNTIL ChrgRec2.NEXT = 0;
          END;
          //update surcharge line with totals by Cost Type of basic lines
          IF RcpLineRec2."Gross Price" <> 0 THEN
            RcpLineRec2."Discount %" :=
              100 * (RcpLineRec2."Gross Price" - RcpLineRec2."Material Price") / RcpLineRec2."Gross Price";
          IF RcpLineRec2."Surcharge Type" = RcpLineRec2."Surcharge Type"::Labor THEN BEGIN
            IF RcpLineRec2."Estimate No." <> '' THEN BEGIN
              RateRec.GET(RcpLineRec2."Estimate No.",RcpLineRec2."Rate Code");
            END ELSE BEGIN
              RecipeRec.GET("Recipe Group", Recipe);
              IF NOT SetRateRec.GET(RecipeRec."Rate Group", RcpLineRec2."Rate Code") THEN
                SetRateRec.INIT;  //db, 23-06-11: M27346
              RateRec."Rate Type" := SetRateRec."Rate Type";
              RateRec."Team Size" := SetRateRec."Team Size";
            END;
            IF RateRec."Rate Type" = RateRec."Rate Type"::Minuts THEN BEGIN
              RcpLineRec2.Norm := RcpLineRec2.Norm * 60;
              IF RateRec."Team Size" <> 0 THEN
                RcpLineRec2.Norm := RcpLineRec2.Norm / RateRec."Team Size";
            END;
            IF RcpLineRec2.Norm <> 0 THEN
              RcpLineRec2."Production Rate" := 1 / RcpLineRec2.Norm
            ELSE
              RcpLineRec2."Production Rate" := 0;
          END;
          RcpLineRec2.CalculateTotals;
          IF FORMAT(RcpLineRec2) <> FORMAT(RecipeLineOriginal) THEN //call 30195
            RcpLineRec2.MODIFY("Estimate No."='');
        UNTIL ChrgRec1.NEXT = 0;
      END;
    END;

    PROCEDURE CheckRate@1210190000(lvAction@1210190001 : Integer) : Decimal;
    VAR
      lvRcpLine@1210190000 : Record 11012156;
    BEGIN
      lvRcpLine.SETRANGE("Estimate No.", "Estimate No.");
      lvRcpLine.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
      lvRcpLine.SETRANGE("Part Group", "Part Group");
      lvRcpLine.SETRANGE(Part, Part);
      lvRcpLine.SETRANGE("Estimate Line", "Estimate Line");
      lvRcpLine.SETFILTER("Line No.", '<>%1', "Line No.");
      lvRcpLine.SETFILTER("Rate Code", '<>%1', "Rate Code");
      IF lvRcpLine.FINDFIRST THEN BEGIN
        IF lvAction = 1 THEN
          IF ("Hours Recipe" - Hours) <> 0 THEN
            EXIT(ROUND(("Labor Recipe"-"Labor Amount") / ("Hours Recipe" - Hours), 0.00001));
        IF lvAction = 2 THEN
          IF "Hours Recipe" <> 0 THEN
            EXIT(ROUND(("Labor Recipe" / "Hours Recipe"), 0.00001));
      END ELSE BEGIN
        //db.sn, 22-01-13: C005089
        //GetEstRate; //Call 23762
        IF NOT EstRateRec.GET("Estimate No.","Rate Code") THEN EstRateRec.INIT;
      //force read-action: Rate can be changed by other process
        //db.en, 22-01-13: C005089
        IF EstRateRec."Rate Type" = EstRateRec."Rate Type"::Minuts THEN
          IF EstRateRec."Team Size" <> 0 THEN
            EXIT(EstRateRec."Cost Rate" * 60 / EstRateRec."Team Size")
          ELSE
            EXIT(EstRateRec."Cost Rate" * 60)
        ELSE
          EXIT(EstRateRec."Cost Rate");
      END;
      EXIT(0);
    END;

    PROCEDURE CheckSameValue@1210190009(lvCostType@1210190001 : Integer;lvCostObjectOld@1210190002 : Code[20]);
    VAR
      lvRcpLineRec@1210190000 : Record 11012156;
    BEGIN
      lvRcpLineRec.SETRANGE("Estimate No.", "Estimate No.");
      IF lvCostType = 1 THEN
        lvRcpLineRec.SETFILTER("Cost Object Labor", '%1', lvCostObjectOld);
      IF lvCostType = 2 THEN
        lvRcpLineRec.SETFILTER("Cost Object Material", '%1', lvCostObjectOld);
      IF lvCostType = 3 THEN
        lvRcpLineRec.SETFILTER("Cost Object Subcontracting", '%1', lvCostObjectOld);
      IF lvCostType = 4 THEN
        lvRcpLineRec.SETFILTER("Cost Object Plant", '%1', lvCostObjectOld);
      lvRcpLineRec.SETRANGE(Description, Description);
      lvRcpLineRec.SETRANGE("Unit of Measure", "Unit of Measure");
      IF lvRcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF lvCostType = 1 THEN
            lvRcpLineRec."Cost Object Labor" := "Cost Object Labor";
          IF lvCostType = 2 THEN
            lvRcpLineRec."Cost Object Material" := "Cost Object Material";
          IF lvCostType = 3 THEN
            lvRcpLineRec."Cost Object Subcontracting" := "Cost Object Subcontracting";
          IF lvCostType = 4 THEN
            lvRcpLineRec."Cost Object Plant" := "Cost Object Plant";
          lvRcpLineRec.MODIFY;
        UNTIL lvRcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckCostObject@1210190005(CostObject@1210190000 : Code[20];DirectValidate@1210190001 : Boolean);
    VAR
      DefRate@1100485000 : Code[10];
      EstimateBasedOn@1100525000 : 'Item,CostObject';
    BEGIN
      //db, 30-01-04: do not call by table field, only from form field CostObject
      IF "Estimate No." <> '' THEN BEGIN
        GetEstimate("Estimate No.", FALSE); //Call 23762
        DefRate := EstRec."Rate Code";
        EstimateBasedOn := EstRec."Estimate Based On";  //db, 02-10-09: M15745
      END ELSE BEGIN
        RecipeRec.GET("Recipe Group", Recipe);
        DefRate := RecipeRec."Rate Code";
        GetEstSetup; //Call 23762
        EstimateBasedOn := EstSetup."Estimate Based On";  //db, 02-10-09: M15745
      END;

      IF CostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
        IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
          IF DirectValidate = TRUE THEN BEGIN
            DimValRec.TESTFIELD("Cost Type", DimValRec."Cost Type"::Material);
            EXIT;
          END;
        END;
        //db.sn, 02-10-09: M15745
        VALIDATE("Cost Component", DimValRec."Cost Component");
        IF EstSetup."Estimate Based On" <> EstSetup."Estimate Based On"::CostObject THEN EXIT;
        //db.en, 02-10-09: M15745
        IF "Sub Operation Code" <> '' THEN BEGIN
          ProcessSubOperation;
          EXIT;
        END;
        IF "Norm Agreement" OR "Price Agreement" OR "Subcontracting Agreement" OR "Plant Agreement" THEN BEGIN  //db, 16-01-08
          IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
            IF DimValRec."Rate Code" = '' THEN
              VALIDATE("Rate Code", DefRate)
            ELSE
              VALIDATE("Rate Code", DimValRec."Rate Code");
          END;
          EXIT;
        END;
        Description := DimValRec.Name;
        Norm := 0;
        "Production Rate" := 0;
        "Material Price" := 0;
        "Gross Price" := 0;
        "Subcontracting Price" := 0;
        "Plant Price" := 0;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
          IF DimValRec."Rate Code" = '' THEN
            VALIDATE("Rate Code", DefRate)
          ELSE
            VALIDATE("Rate Code", DimValRec."Rate Code");
          VALIDATE(Norm, DimValRec.Norm);
        END;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
          VALIDATE("Gross Price", DimValRec.Price)
        ELSE
          "Discount %" := 0;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
          VALIDATE("Subcontracting Price", DimValRec.Price);
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
          VALIDATE("Plant Price", DimValRec.Price);
      END;
    END;

    PROCEDURE OldSubOperationDefault@1210190006() : Boolean;
    VAR
      OldSubOperRec@1210190001 : Record 11012166;
      OldOperRec@1210190000 : Record 11012165;
    BEGIN
      IF xRec."Sub Operation Code" <> '' THEN //Call 23762
        IF OldSubOperRec.GET(xRec."Sub Operation Code") THEN
          IF OldSubOperRec.Operation <> '' THEN //Call 23762
            IF OldOperRec.GET(OldSubOperRec.Operation) THEN;

      EXIT(xRec."Cost Object Labor" = OldOperRec."Cost Object");
    END;

    PROCEDURE ProcessSubOperation@1100485002();
    VAR
      SubOperRec@1100485000 : Record 11012166;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      //IF "Sub Operation Code" <> '' THEN //Call 23762 //db, 09-02-12: M32143
      IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
        Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Description));
        IF SubOperRec."Unit of Measure" <> '' THEN
          "Unit of Measure" := SubOperRec."Unit of Measure";
      END;
    END;

    PROCEDURE EnterQuantity@1210190013(lvOrigin@1210190002 : Integer) : Boolean;
    VAR
      QuanRec@1210190000 : Record 11012186;
      QuantityRelation@1100409000 : Record 11020463;
    BEGIN
      //DP00686
      //lvOrigin:
      //  1 = Length, Width and Height
      //  2 = quantity (input)
      //  3 = house type
      //  4 = quantity (lookup)

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN EXIT(FALSE);

      IF lvOrigin <> 1 THEN BEGIN
        IF Length <> 0 THEN EXIT(FALSE);
        IF Width <> 0 THEN EXIT(FALSE);
        IF Height <> 0 THEN EXIT(FALSE);
      END;

      EstSetup.GET;
      IF lvOrigin <> 4 THEN BEGIN
        IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
          QuanRec.SETRANGE("Estimate No.", "Estimate No.");
          QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
          QuanRec.SETRANGE("Part Group", "Part Group");
          QuanRec.SETRANGE(Part, Part);
          QuanRec.SETRANGE("Estimate Line", "Estimate Line");
          QuanRec.SETRANGE("Recipe Group", "Recipe Group");
          QuanRec.SETRANGE(Recipe, Recipe);
          QuanRec.SETRANGE("Recipe Line", "Line No.");
          IF QuanRec.FINDFIRST THEN EXIT(FALSE);
        END ELSE
          IF QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line","Recipe Group",Recipe,"Line No.") THEN
            EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE EditQuanSheet@1210190007();
    VAR
      QuanRec@1210190000 : Record 11012186;
      QuanSheetRec@1100409004 : Record 11020462;
      QuanSheetFrm@1100409003 : Page 11020462;
      QuantityRelation@1100409002 : Record 11020463;
      EstimateLine@1100409000 : Record 11012154;
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN
        ERROR(Text011);

      EstSetup.GET;
      IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
        QuanRec.SETRANGE("Estimate No.", "Estimate No.");
        QuanRec.SETRANGE("Sub-Estimate No.", "Sub-Estimate No.");
        QuanRec.SETRANGE("Part Group", "Part Group");
        QuanRec.SETRANGE(Part, Part);
        QuanRec.SETRANGE("Estimate Line", "Estimate Line");
        QuanRec.SETRANGE("Recipe Group", "Recipe Group");
        QuanRec.SETRANGE(Recipe, Recipe);
        QuanRec.SETRANGE("Recipe Line", "Line No.");
        PAGE.RUNMODAL(PAGE::"Estimate Quantity Sheet", QuanRec);
        QuanRec.SETRANGE("Row No.", 0);
        IF QuanRec.FINDFIRST THEN
          VALIDATE(Quantity, QuanRec.Result);
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Estimate No.","Estimate No.");
        QuanSheetRec.SETFILTER("Sub-Estimate No.",'%1|%2', '', "Sub-Estimate No.");
        QuanSheetRec.SETFILTER("Part Group", '%1|%2', '',"Part Group");
        QuanSheetRec.SETFILTER(Part,'%1|%2', '',Part);
        QuanSheetFrm.SETTABLEVIEW(QuanSheetRec);
        IF NOT QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line","Recipe Group",Recipe,"Line No.") THEN QuantityRelation.INIT;
        IF NOT QuanSheetRec.GET("Estimate No.", QuantityRelation."Quantity Sheet") THEN QuanSheetRec.INIT;
        QuanSheetFrm.SETRECORD(QuanSheetRec);
        EstimateLine.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line");
        QuanSheetFrm.SetDefaultOLD(EstimateLine,Rec,TRUE,QuantityRelation);
        QuanSheetFrm.RUNMODAL;
        IF QuantityRelation.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line","Recipe Group",Recipe,"Line No.") THEN
          IF GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line","Recipe Group",Recipe,"Line No.") THEN
            VALIDATE(Quantity);
      END;
    END;

    PROCEDURE InitAdjustmentFactor@1210190003();
    BEGIN
      IF "Adjustment Factor Hours" = 0 THEN
        "Adjustment Factor Hours" := 1;
      IF "Adjustment Factor Material" = 0 THEN
        "Adjustment Factor Material" := 1;
      IF "Adjustment Factor Subcontr." = 0 THEN
        "Adjustment Factor Subcontr." := 1;
      IF "Adjustment Factor Plant" = 0 THEN
        "Adjustment Factor Plant" := 1;

      IF NOT GetEstPart THEN //Call 23762
        EstPartRec.INIT;

      IF (EstPartRec."Cum. Adj. Factor Hours" = 0) OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN
        "Cum. Adj. Factor Hours" := "Adjustment Factor Hours"
      ELSE
        "Cum. Adj. Factor Hours" := "Adjustment Factor Hours" * EstPartRec."Cum. Adj. Factor Hours";
      IF (EstPartRec."Cum. Adj. Factor Material" = 0) OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN
        "Cum. Adj. Factor Material" := "Adjustment Factor Material"
      ELSE
        "Cum. Adj. Factor Material" := "Adjustment Factor Material" * EstPartRec."Cum. Adj. Factor Material";
      IF (EstPartRec."Cum. Adj. Factor Subcontr." = 0) OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN
        "Cum. Adj. Factor Subcontr." := "Adjustment Factor Subcontr."
      ELSE
        "Cum. Adj. Factor Subcontr." := "Adjustment Factor Subcontr." * EstPartRec."Cum. Adj. Factor Subcontr.";
      IF (EstPartRec."Cum. Adj. Factor Plant" = 0) OR ("Surcharge Type" <> "Surcharge Type"::" ") THEN
        "Cum. Adj. Factor Plant" := "Adjustment Factor Plant"
      ELSE
        "Cum. Adj. Factor Plant" := "Adjustment Factor Plant" * EstPartRec."Cum. Adj. Factor Plant";
    END;

    PROCEDURE ProcessAdjustmentFactor@1210190004(IAdjType@1210190000 : Integer);
    BEGIN
      CASE IAdjType OF
        1:
          IF "Adjustment Factor Hours" = 0 THEN
            "Adjustment Factor Hours" := 1;
        2:
          IF "Adjustment Factor Material" = 0 THEN
            "Adjustment Factor Material" := 1;
        3:
          IF "Adjustment Factor Subcontr." = 0 THEN
            "Adjustment Factor Subcontr." := 1;
        4:
          IF "Adjustment Factor Plant" = 0 THEN
            "Adjustment Factor Plant" := 1;
      END;
      MODIFY;

      IF "Estimate No." <> '' THEN
        UpdateEst.ResetAdjustmentFactor("Estimate No.", "Sub-Estimate No.", "Part Group", Part,
        "Estimate Line", TRUE, 4, IAdjType)
      ELSE
        UpdateEst.ResetAdjustmentFactor('', '', "Recipe Group", Recipe, "Line No.", TRUE, 5, IAdjType);

      GET("Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
          "Recipe Group", Recipe, "Line No.");
    END;

    PROCEDURE UpdateRelatedRecipe@1100485001(lvRcpGrp@1210190002 : Code[20];lvRcp@1210190001 : Code[20]);
    VAR
      lvRcpLineRec@1210190000 : Record 11012156;
      OldRcpLineRec@1100409000 : Record 11012156;
    BEGIN
      //db, 01-08-05: call after changing receipt lines (form 11012158)
      IF "Estimate No." <> '' THEN //Call 23762
        EXIT; //Call 23762

      lvRcpLineRec.RESET;
      lvRcpLineRec.SETCURRENTKEY("Recipe Group (Child)", "Recipe (Child)");
      lvRcpLineRec.SETRANGE("Recipe Group (Child)", lvRcpGrp);
      lvRcpLineRec.SETRANGE("Recipe (Child)", lvRcp);
      lvRcpLineRec.SETFILTER("Estimate No.", '%1', '');  //update limited to standard receipt
      IF lvRcpLineRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          OldRcpLineRec := lvRcpLineRec;
          lvRcpLineRec.VALIDATE("Recipe (Child)");
          IF FORMAT(OldRcpLineRec) <> FORMAT(lvRcpLineRec) THEN  //db, 21-01-13: if record not changed, avoid update related companies
            lvRcpLineRec.MODIFY(TRUE);
          UpdateRelatedRecipe(lvRcpLineRec."Recipe Group", lvRcpLineRec.Recipe);
        UNTIL lvRcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckParentChildRecipe@1210190011(lvRcpGrp@1210190002 : Code[20];lvRcp@1210190001 : Code[20]);
    VAR
      lvRcpLineRec@1210190000 : Record 11012156;
      lvText000@1100485000 : TextConst 'ENU=Recursion';
    BEGIN
      IF ("Recipe Group" = "Recipe Group (Child)") AND (Recipe = "Recipe (Child)") THEN
        ERROR(lvText000);

      WHILE lvRcp <> '' DO BEGIN
        lvRcpLineRec.SETFILTER("Estimate No.", '%1', '');
        lvRcpLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
        lvRcpLineRec.SETFILTER("Part Group", '%1', '');
        lvRcpLineRec.SETFILTER(Part, '%1', '');
        lvRcpLineRec.SETRANGE("Estimate Line", 0);
        lvRcpLineRec.SETRANGE("Recipe Group", lvRcpGrp);
        lvRcpLineRec.SETRANGE(Recipe, lvRcp);
        lvRcpLineRec.SETFILTER("Recipe Group (Child)", '<>%1', '');
        lvRcpLineRec.SETFILTER("Recipe (Child)", '<>%1', '');
        IF lvRcpLineRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            lvRcpGrp := lvRcpLineRec."Recipe Group (Child)";
            lvRcp := lvRcpLineRec."Recipe (Child)";
            IF ("Recipe Group" = lvRcpGrp) AND (Recipe = lvRcp) THEN
              ERROR(lvText000)
            ELSE
              CheckParentChildRecipe(lvRcpGrp, lvRcp);
          UNTIL lvRcpLineRec.NEXT = 0;
        END;
        lvRcp := '';
      END;
    END;

    PROCEDURE CheckDefaultRate@1100485003();
    BEGIN
      IF "Estimate No." <> '' THEN BEGIN
        GetEstimate("Estimate No.", FALSE); //Call 23762
        IF "Rate Code" = '' THEN
          "Rate Code" := EstRec."Rate Code";
      END ELSE BEGIN
        RecipeRec.GET("Recipe Group", Recipe);
        IF "Rate Code" = '' THEN
          "Rate Code" := RecipeRec."Rate Code";
      END;
    END;

    PROCEDURE GetItemSpecifications@1100485006();
    BEGIN
      IF ItemRec.GET("Item No.") THEN BEGIN
        "Item Series" := ItemRec."Item Series";
        "Item Type" := ItemRec."Item Type";
        "Item Brand" := ItemRec."Item Brand";
      END;
    END;

    PROCEDURE GetDefaultsPlantType@1100485010();
    VAR
      PlantTypeRec@1100485000 : Record 11012551;
    BEGIN
      PlantTypeRec.GET("Plant Type");
      Description := PlantTypeRec.Description;
      "Unit of Measure" := PlantTypeRec."Unit of Measure";
      "Cost Object Plant" := PlantTypeRec."Cost Object";
      Weight := PlantTypeRec.Weight;
      CLEAR("Plant Agreement");
      ClearFields(2); //Buyback
      IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 10-3-2010: 18121
        ClearFields(3); //Discount
      DeterminePlantPrice;

      IF "Attached to Line No." <> 0 THEN
        GetRentalPeriodFromSet;
    END;

    PROCEDURE DeterminePlantPrice@1100485011();
    VAR
      Recipe2@1100525000 : Record 11012155;
      SearchRateCu@1100485000 : Codeunit 11012567;
      RefDate@1100485001 : Date;
      RentalType@1100525007 : Option;
      DummyPlantPriceType@1100525006 : Option;
      DummyRentalType@1100525005 : Option;
      PlantDiscount@1100525004 : Decimal;
      PlantPrice@1100525003 : Decimal;
      BuyBackPrice@1100525002 : Decimal;
      PlantTypeRec@1100525001 : Record 11012551;
    BEGIN
      IF ("Plant Type" = '') OR "Plant Agreement" THEN
        EXIT;

      GetEstimate("Estimate No.", FALSE);
      IF "Start Rental Period" <> 0D THEN
        RefDate := "Start Rental Period"
      ELSE BEGIN
        IF EstRec."Reference Date (Rate)" <> 0D THEN
          RefDate := EstRec."Reference Date (Rate)"
        ELSE
          RefDate := TODAY;
      END;

      IF "Estimate No." = '' THEN BEGIN
        IF NOT RecipeRec.GET("Recipe Group", Recipe) THEN RecipeRec.INIT;
        EstRec."Plant Rates in Hours" := RecipeRec."Plant Rates in Hours";
      END;

      //DP01047.sn
      RentalType := -1;  //0=rental, 1=sales, 2=buy-back, 3= hours
      PlantTypeRec.GET("Plant Type");
      IF EstRec."Plant Rates in Hours" AND (PlantTypeRec."Rental Type" <> PlantTypeRec."Rental Type"::"Sales/Buy Back") THEN
        RentalType := 3;

      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Cost THEN
        PlantPrice := SearchRateCu.CostRateFromEstimate("Plant Type",'', EstRec."Plant Location",RefDate,RentalType,"Plant Price Type");
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Sales THEN
        PlantPrice := SearchRateCu.SalesRateFromEstimate(
          "Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",EstRec."Kind of Plant Rate"+1,RefDate,RentalType,"Plant Price Type");
      IF RentalType = 1 THEN BEGIN
        DummyRentalType := 2;
        BuyBackPrice := SearchRateCu.SalesRateFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",0,RefDate,DummyRentalType,DummyPlantPriceType);
      END;
      PlantDiscount := SearchRateCu.SalesDiscountFromEstimate("Plant Type",'',EstRec."Plant Location",EstRec."Customer No.",RefDate,RentalType);
      VALIDATE("Buy Back Price", BuyBackPrice * (100-PlantDiscount)/100);
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Cost THEN
        VALIDATE("Plant Price", PlantPrice);
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Sales THEN
        VALIDATE("Plant Price", PlantPrice * (100-PlantDiscount)/100);
      IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN
        VALIDATE("Gross Price","Plant Price");
      //DP01047.en

      {
      CASE (Recipe2."Plant Rates in Hours") AND ("Estimate No." = '') OF
        FALSE:
          BEGIN
            //dbeekman.sn, 6-4-09
            IF EstRec."Estimate Type" <> EstRec."Estimate Type"::Sales THEN
              SearchRateCu.RateFromCostEst(
                EstRec."Plant Location","Plant Type",'','',lvRefDate,0,0,'',"Plant Price","Buy Back Price")
            ELSE
              SearchRateCu.RateFromSalesEst(
                EstRec."Plant Location",EstRec."Customer No.","Plant Type",'','',lvRefDate,0,0,'',"Plant Price","Buy Back Price");
            VALIDATE("Buy Back Price");
            VALIDATE("Plant Price");
            "Plant Price Type" := SearchRateCu.GetRateType + 1; //field starts with empty value
            IF NOT EstimateMgmt.IsLineDiscountMaterialOnly THEN //dbeekman, 10-3-2010: 18121
              VALIDATE("Gross Price","Plant Price");
          END;
        TRUE:
          BEGIN
            SearchRateCu.SetForceRateTypeHours(TRUE);
            VALIDATE("Plant Price", SearchRateCu.RateWithCust('', '', "Plant Type", '', '', lvRefDate, 3, 0, ''));
            SearchRateCu.SetForceRateTypeHours(FALSE);
            "Plant Price Type" := "Plant Price Type"::Hour;
            VALIDATE("Gross Price", "Plant Price");
          END;
      END;
      IF EstRec."Estimate Type" = EstRec."Estimate Type"::Sales THEN
        VALIDATE("Discount %",SearchRateCu.RentalDiscount(EstRec."Plant Location",EstRec."Customer No.","Plant Type",'',lvRefDate))
      ELSE
        VALIDATE("Discount %",0);
      }
    END;

    PROCEDURE GetDefaultsCostObject@1100485012(lvCostType@1100485000 : 'Labor,Material,Subcontracting,Plant,Sundry';lvCostObject@1100485001 : Code[20]);
    VAR
      lvDimValRec@1100485002 : Record 349;
      lvEstPurchActRec@1100485003 : Record 11012366;
    BEGIN
      GetEstSetup; //Call 23762
      IF NOT EstSetup."Default Purchase Action" THEN
        EXIT;

      DimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, '');
      lvDimValRec.TESTFIELD(Blocked, FALSE);

      CASE lvCostType OF
        lvCostType::Material: BEGIN

          IF ("Purchase Action Mat." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Mat."), FIELDCAPTION("Cost Object Material"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Mat.", lvDimValRec."Purchase Action");

          END;
        lvCostType::Subcontracting: BEGIN

          IF ("Purchase Action Subc." = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Subcontracting"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Subc.", lvDimValRec."Purchase Action");

          END;
        lvCostType::Plant: BEGIN

          IF ("Purchase Action Plant" = '') AND (lvDimValRec."Purchase Action" <> '') THEN
            IF NOT lvEstPurchActRec.GET("Estimate No.", lvDimValRec."Purchase Action") THEN
              MESSAGE(Text006, lvDimValRec."Purchase Action","Estimate No.")
            ELSE
              IF lvEstPurchActRec.Status >= lvEstPurchActRec.Status::Applied THEN
                MESSAGE(Text007, FIELDCAPTION("Purchase Action Subc."), FIELDCAPTION("Cost Object Plant"),
                                 FORMAT(lvEstPurchActRec.Status))
              ELSE
                VALIDATE("Purchase Action Plant", lvDimValRec."Purchase Action");

          END;
      END;
    END;

    PROCEDURE GetReferenceData@1100525002(VAR lvRefDate@1100525003 : Date;VAR lvDiscRef1@1100525002 : Code[20];VAR lvDiscRef2@1100525001 : Code[20];lvEstRec@1100525000 : Record 11012151;lvDiscType@1100525004 : 'Purchase,Sales');
    BEGIN
      lvRefDate := ValidateCu.GetRefDateEstimate(lvEstRec);
      ValidateCu.GetRefDiscEstimate(lvEstRec, lvDiscRef1, lvDiscRef2, lvDiscType);
    END;

    PROCEDURE CalcRentalUnits@1100525007();
    VAR
      PlantLocation@1100525000 : Record 11012554;
      RateTypeUsed@1100525002 : Option;
      CalcRentalPeriodsCu@1100525001 : Codeunit 11012568;
    BEGIN
      PlantLocation.INIT;
      PlantLocation.InitRecord;

      GetEstimate("Estimate No.", FALSE); //Call 23762
      IF EstRec."Plant Location" <> '' THEN
        PlantLocation.GET(EstRec."Plant Location");

      VALIDATE("Rental Time Units",
        CalcRentalPeriodsCu.NumberRentalPeriods(
          PlantLocation,"Start Rental Period","End Rental Period","Plant Type",'',RateTypeUsed));

      IF "Set Code" = '' THEN
        TESTFIELD("Plant Price Type", RateTypeUsed + 1);
    END;

    PROCEDURE ClearFields@1100525004(FieldGroup@1100525000 : 'Item,PlantType,BuyBack');
    BEGIN
      CASE FieldGroup OF
        FieldGroup::Item:
          BEGIN
            VALIDATE("Material Price",0);
            VALIDATE("Item No.",'')
          END;
        FieldGroup::PlantType:
          BEGIN
            VALIDATE("Plant Price",0);
            VALIDATE("Plant Type",'');
          END;
        FieldGroup::BuyBack:
          BEGIN
            CLEAR("Buy Back Price");
            CLEAR("Buy Back %");
          END;
      END;
    END;

    PROCEDURE ChkFieldsEmpty@1100525028(FieldGroup@1100525000 : 'Material,Plant,BuyBack,Discount');
    BEGIN
      CASE FieldGroup OF
        FieldGroup::Material:
          BEGIN
            //TESTFIELD("Material Price",0);
            //TESTFIELD("Item No.",0)
          END;
        FieldGroup::Plant:
          BEGIN
            //TESTFIELD("Plant Price",0);
            //TESTFIELD("Plant Type",0);
            //TESTFIELD("Plant Price Type",0);
          END;
        FieldGroup::BuyBack:
          BEGIN
            TESTFIELD("Buy Back Price",0);
            TESTFIELD("Buy Back %",0);
          END;
        FieldGroup::Discount:
          BEGIN
            TESTFIELD("Discount %",0);
            TESTFIELD("Gross Price",0);
          END;
      END;
    END;

    PROCEDURE GetAttachedToLineNo@1100525005(Rec2@1100525000 : Record 11012156) : Integer;
    BEGIN
      Rec2.SETRANGE("Estimate No.",Rec2."Estimate No.");
      Rec2.SETRANGE("Sub-Estimate No.",Rec2."Sub-Estimate No.");
      Rec2.SETRANGE("Part Group",Rec2."Part Group");
      Rec2.SETRANGE(Part,Rec2.Part);
      Rec2.SETRANGE("Estimate Line",Rec2."Estimate Line");
      Rec2.SETRANGE("Recipe Group",Rec2."Recipe Group");
      Rec2.SETRANGE(Recipe,Rec2.Recipe);

      IF Rec2.NEXT <> 0 THEN
        IF (Rec2."Attached to Line No." <> 0) THEN BEGIN
          "Set Level" := Rec2."Set Level";
          EXIT(Rec2."Attached to Line No.");
        END;
      "Set Level" := 0;
      EXIT(0);
    END;

    PROCEDURE InitRecipeLine@1100525000(SaveOrig@1100525000 : Boolean);
    BEGIN
      InitRecord; // 34595.n
      // 34595.so
      //db, 11-11-09: M16810
      //"Project No." := '' ;
      //IF Element <> '' THEN //Call 23762
      //  IF NOT ElemRec.GET(Element) THEN
      //    Element := '' ;
      // 34595.eo

      "Purchase Route Reference" := '';
      IF SaveOrig = FALSE THEN BEGIN
        "Price Agreement" := FALSE;
        "Norm Agreement" := FALSE;
        "Subcontracting Agreement" := FALSE;
        "Plant Agreement" := FALSE;
      END;

      IF "Estimate No." = '' THEN BEGIN
        "Sub-Estimate No." := '';
        "Part Group" := '';
        Part := '';
        "Estimate Line" := 0;
        CentrManagementCU.EditRecipeLine(Rec,1,xRec);
      END;
    END;

    LOCAL PROCEDURE GetRentalPeriodFromSet@1100525014();
    VAR
      RecipeLine2@1100525000 : Record 11012156;
    BEGIN
      IF "Attached to Line No." = 0 THEN
        EXIT;

      RecipeLine2.GET(
        "Estimate No.", "Sub-Estimate No.", "Part Group", Part, "Estimate Line",
        "Recipe Group", Recipe, "Attached to Line No.");

      IF RecipeLine2."Set Code" = '' THEN
        EXIT;

      VALIDATE("Start Rental Period", RecipeLine2."Start Rental Period");
      VALIDATE("End Rental Period", RecipeLine2."End Rental Period");
      VALIDATE("Rental Period Formula", RecipeLine2."Rental Period Formula");
      VALIDATE("Rental Time Units", RecipeLine2."Rental Time Units");
    END;

    PROCEDURE GetEstSetup@1210190014();
    BEGIN
      //Call 23762
      IF NOT EstSetupRead THEN BEGIN
        EstSetup.GET;
        EstSetupRead := TRUE;
      END;
    END;

    PROCEDURE GetEstPart@1210190018() : Boolean;
    BEGIN
      //Call 23762
      IF (EstPartRec."Estimate No." = "Estimate No.") AND
         (EstPartRec."Sub-Estimate No." = "Sub-Estimate No.") AND
         (EstPartRec."Part Group" = "Part Group") AND
         (EstPartRec.Part = Part) THEN
        EXIT(TRUE);

      EXIT(EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part));
    END;

    PROCEDURE GetEstimate@1210190015(EstimateNo@1210190000 : Code[20];CatchRead@1210190001 : Boolean);
    BEGIN
      //Call 23762
      IF (EstRec."No." = EstimateNo) THEN
        EXIT;

      IF CatchRead THEN BEGIN
        IF NOT EstRec.GET(EstimateNo) THEN
          EstRec.INIT;
      END ELSE
        EstRec.GET(EstimateNo);
    END;

    PROCEDURE GetSubEstimate@1210190017(EstimateNo@1210190000 : Code[20];SubEstimateNo@1210190002 : Code[20];CatchRead@1210190001 : Boolean) : Boolean;
    BEGIN
      //Call 23762
      IF (SubEstRec."Estimate No." = EstimateNo) AND (SubEstRec."Sub-Estimate No." = SubEstimateNo) THEN
        EXIT(TRUE);  //db, 09-02-11: M32143

      IF CatchRead THEN BEGIN
        SubEstPresent := SubEstRec.GET(EstimateNo, SubEstimateNo);
        IF NOT SubEstPresent THEN
          SubEstRec.INIT;
      END ELSE
        SubEstPresent := SubEstRec.GET(EstimateNo, SubEstimateNo);

      EXIT(SubEstPresent);
    END;

    PROCEDURE GetEstRate@1210190019();
    BEGIN
      //Call 23762
      IF (EstRateRec."Estimate No." = "Estimate No.") AND (EstRateRec."Rate Code" = "Rate Code") THEN
        EXIT;

      IF "Rate Code" = '' THEN
        CLEAR(EstRateRec) //mg.c, 14-05-12: M34326
      ELSE
        EstRateRec.GET("Estimate No.","Rate Code");
    END;

    PROCEDURE SetSkipCalculateTotals@1210190016(SetCalculateTotals@1210190000 : Boolean);
    BEGIN
      //Call 23762
      SkipCalculateTotals := SetCalculateTotals;
    END;

    PROCEDURE SetFromEstimateLineDelete@1210190020(FromRecipeLine@1210190000 : Boolean);
    BEGIN
      //Call 23762
      FromRecipeLineDelete := FromRecipeLine;
    END;

    PROCEDURE CalculateSalesDiscount@1100525017(lvEstRec@1100525001 : Record 11012151);
    VAR
      lvRefDate@1100525005 : Date;
      lvDiscRef1@1100525004 : Code[20];
      lvDiscRef2@1100525003 : Code[20];
      lvRefPrio@1100525002 : Code[10];
      lvDiscType@1100525000 : 'Purchase,Sales';
    BEGIN
      //mg, 11-10-11: M29108
      IF lvEstRec."Estimate Type" = lvEstRec."Estimate Type"::Sales THEN BEGIN
        GetReferenceData(lvRefDate, lvDiscRef1, lvDiscRef2, lvEstRec, lvDiscType::Sales);
        lvRefPrio := ValidateCu.GetRefPrioEstimate(lvEstRec, lvDiscType::Sales);
        ValidateCu.GetSalesDiscount(
          lvEstRec."Customer No.", "Item No.", "Basic Item", "Trade Item", Manufacturer, "Vendor (Trade Item)",
          "Material Price", "Sales Discount %", "Gross Price", lvRefDate, lvEstRec."Customer Disc. Group",
          lvDiscRef1, lvDiscRef2, lvRefPrio);
        "Discount %" := "Sales Discount %";
      END;
      CalculateTotals;
    END;

    PROCEDURE InitRecord@1210190023();
    VAR
      BaseActRec@1100409000 : Record 11012434;
    BEGIN
      // 34595.n
      IF EstPartRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part) THEN BEGIN
        "Project No." := EstPartRec."Project No.";
        IF NOT ElemRec.GET(Element) THEN  //db, 25-10-12: C002867
          Element := EstPartRec.Element;
        IF NOT BaseActRec.GET("Project Planning Activity Code") THEN  //db, 26-10-12
          "Project Planning Activity Code" := EstPartRec."Project Planning Activity Code";
      END;
      IF EstLineRec.GET("Estimate No.","Sub-Estimate No.","Part Group",Part,"Estimate Line") THEN BEGIN  //db, 30-06-14: T003580
        IF ("Plant Type" <> '') OR ("Set Code" <> '') THEN BEGIN
          "Rental Period Formula" := EstLineRec."Rental Period Formula";
          "Start Rental Period" := EstLineRec."Start Rental Period";
          "End Rental Period" := EstLineRec."End Rental Period";
        END;
      END;
    END;

    PROCEDURE IsFixed@1210190021() : Boolean;
    VAR
      Estimate@1210190000 : Record 11012151;
      RecipeHeader@1210190001 : Record 11012155;
    BEGIN
      IF "Estimate No." = '' THEN BEGIN
        IF RecipeHeader.GET("Recipe Group", Recipe) THEN
          EXIT(RecipeHeader.Fixed);
      END ELSE BEGIN
        IF Estimate.GET("Estimate No.") THEN
          EXIT(Estimate.Fixed);
      END;
    END;

    PROCEDURE GetTotalQuantityEstimate@1100409001() TotalQuantity : Decimal;
    VAR
      RecipeQuantity@1100409000 : Decimal;
    BEGIN
      //db, 24-09-12: C002156
      IF "Ignore Recipe Quantity" THEN
        RecipeQuantity := 1
      ELSE
        RecipeQuantity := "Estimate Quantity";
      TotalQuantity := ROUND(RecipeQuantity * Quantity * "Estimate Part Quantity");
      EXIT(TotalQuantity);
    END;

    PROCEDURE GetMinuts@1100485009(lvType@1100485002 : Integer) Result : Decimal;
    VAR
      RcpLineRec@1100485000 : Record 11012156;
      RcpTotal@1100485001 : Decimal;
    BEGIN
      //DP00260
      IF "Rate Type" = "Rate Type"::Hours THEN
        Result := Norm * 60
      ELSE
        Result := Norm;
      IF "Surcharge Type" <> "Surcharge Type"::" " THEN
        Result := Result * "Surcharge %" / 100;
      IF "Cum. Adj. Factor Hours" <> 0 THEN
        Result := Result * "Cum. Adj. Factor Hours";
      IF "Team Size" > 0 THEN
        Result := Result * "Team Size";
      IF lvType = 1 THEN
        Result := Result * Quantity;
      EXIT(Result);
    END;

    PROCEDURE InitNormPrice@1100528909();
    BEGIN
       //db, 29-11-11: M31109
       Norm := 0;
       "Production Rate" := 0;
       "Material Price" := 0;
       "Discount %" := 0;
       "Gross Price" := 0;
       "Subcontracting Price" := 0;
       "Plant Price" := 0;
    END;

    PROCEDURE HandleZeroLinesByUser@1100525025(VAR RecipeLine@1100525001 : Record 11012156);
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      WITH RecipeLine DO BEGIN
        UserSetup.GET(USERID);
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          UserSetup."Hide Zero Lines" := TRUE;
        END ELSE BEGIN
          UserSetup."Hide Zero Lines" := FALSE;
        END;
        UserSetup.MODIFY;
      END;
      GetFilterZeroLinesByUser(RecipeLine);
    END;

    PROCEDURE GetFilterZeroLinesByUser@1100525012(VAR RecipeLine@1100525000 : Record 11012156);
    VAR
      UserSetup@1100525001 : Record 91;
    BEGIN
      //C025240
      WITH RecipeLine DO BEGIN
        UserSetup.GET(USERID);
        IF UserSetup."Hide Zero Lines" = FALSE THEN BEGIN
          SETRANGE(Quantity);
        END ELSE BEGIN
          SETFILTER(Quantity, '<>%1', 0);
        END;
      END;
    END;

    PROCEDURE CheckHideZeroLines@1100525001();
    VAR
      UserSetup@1100525000 : Record 91;
    BEGIN
      //C025240
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Hide Zero Lines", FALSE);
    END;

    BEGIN
    END.
  }
}

