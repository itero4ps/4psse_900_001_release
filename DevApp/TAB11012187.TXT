OBJECT Table 11012187 Estimate Part Line OLD
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckNormPrice;
             END;

    OnModify=BEGIN
               CheckNormPrice;
             END;

    OnDelete=BEGIN
               EstCodeRec.RESET;
               EstCodeRec.SETRANGE("Estimate No.", '');
               EstCodeRec.SETRANGE("Sub-Estimate No.", '');
               EstCodeRec.SETRANGE("Part Group", "Part Group");
               EstCodeRec.SETRANGE(Part, Part);
               EstCodeRec.SETRANGE("Estimate Line", "Line No.");
               EstCodeRec.DELETEALL;

               ChrgRec.RESET;
               ChrgRec.SETRANGE("Estimate No.",'');
               ChrgRec.SETRANGE("Sub-Estimate No.",'');
               ChrgRec.SETRANGE("Part Group","Part Group");
               ChrgRec.SETRANGE(Part,Part);
               ChrgRec.SETRANGE("Recipe Line",0);  //db, 28-10-03: don't remove surcharge of recipe lines
               ChrgRec.SETRANGE("Basic Line","Line No.");      //remove estimated lines included in surcharge
               ChrgRec.DELETEALL;
               ChrgRec.SETRANGE("Basic Line");
               ChrgRec.SETRANGE("Surcharge Line","Line No.");  //delete surcharge lines
               ChrgRec.DELETEALL;

               BufferRec.RESET;
               BufferRec.SETRANGE("Estimate No.", '');
               BufferRec.SETRANGE("Sub-Estimate No.", '');
               BufferRec.SETRANGE("Part Group", "Part Group");
               BufferRec.SETRANGE(Part, Part);
               BufferRec.SETRANGE("Estimate Line", "Line No.");
               BufferRec.DELETEALL;
             END;

    CaptionML=ENU=Estimate Part Line OLD;
  }
  FIELDS
  {
    { 10  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Part));
                                                   CaptionML=ENU=Part Group }
    { 20  ;   ;Part                ;Code20        ;TableRelation="Estimate Base Part".Code WHERE (Part Group=FIELD(Part Group));
                                                   CaptionML=ENU=Part;
                                                   NotBlank=Yes }
    { 30  ;   ;Line No.            ;Integer       ;ValidateTableRelation=No;
                                                   CaptionML=ENU=Line No. }
    { 40  ;   ;Recipe Group        ;Code10        ;TableRelation="Estimate Group".No. WHERE (Type=CONST(Recipe));
                                                   OnValidate=BEGIN
                                                                IF ("Recipe Group" = '') AND (Recipe <> '') THEN BEGIN
                                                                  Recipe := '';
                                                                  "Rate Code" := '';
                                                                  "Sub Operation Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Recipe Group }
    { 50  ;   ;Recipe              ;Code20        ;TableRelation="Recipe OLD".No. WHERE (Recipe Group=FIELD(Recipe Group));
                                                   OnValidate=VAR
                                                                RecipeRec@1210190000 : Record 11012155;
                                                              BEGIN
                                                                IF (Recipe <> xRec.Recipe) AND (Recipe <> '') THEN BEGIN
                                                                  RecipeRec.GET("Recipe Group", Recipe);
                                                                  RecipeRec.TESTFIELD(Blocked, FALSE);
                                                                  Description := RecipeRec.Description;
                                                                  "Unit of Measure" := RecipeRec."Unit of Measure";
                                                                  "Rate Code" := '';
                                                                  "Sub Operation Code" := '';
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Recipe }
    { 60  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") AND ("Item No." <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::Item);
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 70  ;   ;Basic Item          ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   OnValidate=BEGIN
                                                                IF ("Basic Item" <> xRec."Basic Item") AND ("Basic Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Basic Item");
                                                              END;

                                                   CaptionML=ENU=Basic Item }
    { 80  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   OnValidate=BEGIN
                                                                IF ("Trade Item" <> xRec."Trade Item") AND ("Trade Item" <> '') THEN
                                                                  ValidateItem(ItemTypeOpt::"Trade Item");
                                                              END;

                                                   CaptionML=ENU=Trade Item }
    { 100 ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   OnValidate=VAR
                                                                lvExecValidate@1100485000 : Boolean;
                                                              BEGIN
                                                                IF ("Vendor (Trade Item)" <> xRec."Vendor (Trade Item)") AND ("Vendor (Trade Item)" <> '') THEN BEGIN
                                                                  IF "Basic Item" <> '' THEN BEGIN
                                                                    "Trade Item" := '';
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  IF "Trade Item" <> '' THEN BEGIN
                                                                    VALIDATE("Trade Item");
                                                                    lvExecValidate := TRUE;
                                                                  END;
                                                                  //db.sn, 17-12-10: M18021
                                                                  IF lvExecValidate THEN BEGIN
                                                                    IF TradeItemRec.CheckReplaceVendor(
                                                                      xRec."Vendor (Trade Item)", xRec."Trade Item",
                                                                      "Vendor (Trade Item)", "Trade Item") THEN
                                                                      ValidateItem(ItemTypeOpt::"Trade Item")
                                                                    ELSE
                                                                      ValidateItem(ItemTypeOpt::"Trade Vendor");
                                                                  END;
                                                                  //db.en, 17-12-10: M18021
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Vendor (Trade Item) }
    { 110 ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 120 ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 130 ;   ;Time Quantity       ;Decimal       ;InitValue=1;
                                                   CaptionML=ENU=Time Quantity;
                                                   BlankZero=Yes }
    { 140 ;   ;Unit of Time        ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=ENU=Unit of Time }
    { 150 ;   ;Quantity            ;Decimal       ;OnLookup=BEGIN
                                                              //DP00686
                                                              IF EnterQuantity(4) THEN
                                                                EditQuanSheet;
                                                            END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 160 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Unit of Measure") THEN  //db, 21-11-05
                                                                  IF "Unit of Measure" <>  xRec."Unit of Measure" THEN
                                                                    CheckItemUnitConversion(Rec, xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              HandleLookupUnit;  //db, 21-11-05
                                                            END;

                                                   CaptionML=ENU=Unit of Measure }
    { 170 ;   ;External Text       ;Text250       ;OnValidate=BEGIN
                                                                "External Text Block" := "External Text" <> '';
                                                              END;

                                                   CaptionML=ENU=External Text }
    { 171 ;   ;External Text Block ;Boolean       ;CaptionML=ENU=External Text Block;
                                                   Editable=No }
    { 175 ;   ;Internal Text       ;Text250       ;OnValidate=BEGIN
                                                                "Internal Text Block" := "Internal Text" <> '';
                                                              END;

                                                   CaptionML=ENU=Internal Text }
    { 176 ;   ;Internal Text Block ;Boolean       ;CaptionML=ENU=Internal Text Block;
                                                   Editable=No }
    { 180 ;   ;Cost Object Labor   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Labor),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                FillDescriptionFromCostObject("Cost Object Labor",xRec."Cost Object Labor");
                                                              END;

                                                   CaptionML=ENU=Cost Object Labor }
    { 190 ;   ;Cost Object Material;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Material),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                FillDescriptionFromCostObject("Cost Object Material",xRec."Cost Object Material");
                                                              END;

                                                   CaptionML=ENU=Cost Object Material }
    { 200 ;   ;Cost Object Subcontracting;Code20  ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Subcontracting),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                FillDescriptionFromCostObject("Cost Object Subcontracting",xRec."Cost Object Subcontracting");
                                                              END;

                                                   CaptionML=ENU=Cost Object Subcontracting }
    { 210 ;   ;Cost Object Plant   ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Plant),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                FillDescriptionFromCostObject("Cost Object Plant",xRec."Cost Object Plant");
                                                              END;

                                                   CaptionML=ENU=Cost Object Plant }
    { 215 ;No ;Cost Object Sundry  ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=CONST(Sundry),
                                                                                               Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object Sundry;
                                                   Description=DP00381 }
    { 220 ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   OnValidate=VAR
                                                                SubOperRec@1210190001 : Record 11012166;
                                                                OperRec@1210190000 : Record 11012165;
                                                              BEGIN
                                                                //mg, 08-03-11: M25913
                                                                IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
                                                                  SubOperRec.TESTFIELD(Expired,FALSE);  //db, 07-12-09
                                                                  IF OperRec.GET(SubOperRec.Operation) THEN BEGIN
                                                                    IF ("Cost Object Labor" = '') OR (OldSubOperationDefault = TRUE) THEN BEGIN
                                                                      VALIDATE("Cost Object Labor", OperRec."Cost Object");
                                                                      CheckCostObject("Cost Object Labor",FALSE);
                                                                    END;
                                                                    IF OperRec."Rate Code" <> '' THEN
                                                                      VALIDATE("Rate Code", OperRec."Rate Code");
                                                                  END;
                                                                END;
                                                                ProcessSubOperation;
                                                              END;

                                                   CaptionML=ENU=Sub Operation Code }
    { 230 ;   ;Rate Code           ;Code10        ;TableRelation="Rate by Group"."Rate Code";
                                                   OnValidate=BEGIN
                                                                CheckRateCode(0);
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckRateCode(1);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Rate Code }
    { 240 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=ENU=Line Status }
    { 250 ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                GrpRec.GET("Part Group", GrpRec.Type::Part);
                                                                GrpRec.TESTFIELD("Coding System");

                                                                IF Code <> '' THEN BEGIN
                                                                  FormatMgt.SetSelection(GrpRec."Coding System");
                                                                  FormatMgt.FormatElem(Code,4,'');
                                                                  CodeRec.GET(GrpRec."Coding System", Code);
                                                                END;

                                                                EstCodeRec.RESET;
                                                                EstCodeRec.SETFILTER("Estimate No.", '%1', '');
                                                                EstCodeRec.SETFILTER("Sub-Estimate No.", '%1', '');
                                                                EstCodeRec.SETRANGE("Part Group", "Part Group");
                                                                EstCodeRec.SETRANGE(Part, Part);
                                                                EstCodeRec.SETRANGE("Estimate Line", "Line No.");
                                                                EstCodeRec.SETRANGE("Coding System", GrpRec."Coding System");
                                                                EstCodeRec.DELETEALL;

                                                                IF Code <> '' THEN BEGIN
                                                                  EstCodeRec.INIT;
                                                                  EstCodeRec."Estimate No." := '';
                                                                  EstCodeRec."Sub-Estimate No." := '';
                                                                  EstCodeRec."Part Group" := "Part Group";
                                                                  EstCodeRec.Part := Part;
                                                                  EstCodeRec."Estimate Line" := "Line No.";
                                                                  EstCodeRec."Recipe Group" := '';
                                                                  EstCodeRec.Recipe := '';
                                                                  EstCodeRec."Recipe Line" := 0;
                                                                  EstCodeRec."Coding System" := GrpRec."Coding System";
                                                                  EstCodeRec.Code := Code;
                                                                  EstCodeRec.INSERT;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GrpRec.GET("Part Group", GrpRec.Type::Part);
                                                              GrpRec.TESTFIELD("Coding System");

                                                              CodeRec.SETRANGE("Coding System", GrpRec."Coding System");
                                                              CodeRec.Code := Code;
                                                              IF PAGE.RUNMODAL(PAGE::"Codes per Coding System", CodeRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Code, CodeRec.Code);
                                                            END;

                                                   CaptionML=ENU=Code }
    { 260 ;   ;Vendor              ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor }
    { 261 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 270 ;   ;Adjustment Factor Hours;Decimal    ;CaptionML=ENU=Hours Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 271 ;   ;Adjustment Factor Material;Decimal ;CaptionML=ENU=Material Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 272 ;   ;Adjustment Factor Subcontr.;Decimal;CaptionML=ENU=Subcontr. Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 273 ;   ;Adjustment Factor Plant;Decimal    ;CaptionML=ENU=Plant Adjustment Factor;
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 280 ;   ;Surcharge %         ;Decimal       ;CaptionML=ENU=Surcharge %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 285 ;   ;Surcharge Type      ;Option        ;OnValidate=BEGIN
                                                                IF "Surcharge Type" <> "Surcharge Type"::" " THEN BEGIN
                                                                  Quantity := 1;
                                                                  "Sub Operation Code" := '';
                                                                  "Adjustment Factor Hours" := 0;
                                                                  "Adjustment Factor Material" := 0;
                                                                  "Adjustment Factor Subcontr." := 0;
                                                                  "Adjustment Factor Plant" := 0;
                                                                END ELSE BEGIN
                                                                  ERROR(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Surcharge Type;
                                                   OptionCaptionML=ENU=" ,Labor,Material,Subcontracting,Plant";
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant] }
    { 290 ;   ;Element             ;Code20        ;TableRelation="Base Element".Code;
                                                   OnValidate=BEGIN
                                                                FormatMgt.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN
                                                                  ElemRec.GET(Element);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Element }
    { 300 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=ENU=Cost Component }
    { 310 ;   ;Norm                ;Decimal       ;CaptionML=ENU=Norm;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 320 ;   ;Material Price      ;Decimal       ;OnValidate=BEGIN
                                                                CalculateDiscount(Rec);
                                                              END;

                                                   CaptionML=ENU=Material Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 321 ;   ;Gross Price         ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                              END;

                                                   CaptionML=ENU=Gross Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 322 ;   ;Discount %          ;Decimal       ;OnValidate=BEGIN
                                                                CalculateNettPrice;
                                                              END;

                                                   CaptionML=ENU=Discount %;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 323 ;   ;Subcontracting Price;Decimal       ;CaptionML=ENU=Subcontracting Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 324 ;   ;Plant Price         ;Decimal       ;CaptionML=ENU=Plant Price;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 330 ;   ;Discipline          ;Code10        ;TableRelation=Discipline;
                                                   CaptionML=ENU=Discipline }
    { 331 ;   ;Trade Speciality    ;Code10        ;TableRelation="Trade Speciality".Code WHERE (Discipline=FIELD(Discipline));
                                                   CaptionML=ENU=Trade Speciality }
    { 332 ;   ;Trade Expertise     ;Code10        ;TableRelation="Trade Expertise";
                                                   OnValidate=BEGIN
                                                                TradeExpRec.GetRelatedValue(Discipline, "Trade Speciality", "Trade Expertise");
                                                              END;

                                                   CaptionML=ENU=Trade Expertise }
    { 340 ;No ;Maintenance Interval;DateFormula   ;CaptionML=ENU=Maintenance Interval;
                                                   Description=expired }
    { 341 ;No ;Maintenance Relation;Code20        ;CaptionML=ENU=Maintenance Relation;
                                                   Description=expired }
    { 350 ;   ;Subcontractor       ;Code20        ;TableRelation=Vendor.No. WHERE (Subcontractor=CONST(Yes));
                                                   CaptionML=ENU=Subcontractor }
    { 351 ;   ;Subcontractor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Subcontractor)));
                                                   CaptionML=ENU=Subcontractor Name;
                                                   Editable=No }
    { 360 ;   ;Project Plann. Base Act. Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   OnValidate=VAR
                                                                ProjectPlanningBaseActivity@1100528401 : Record 11012434;
                                                                FormatManagement@1100528400 : Codeunit 11012022;
                                                              BEGIN
                                                                FormatManagement.FormatElem("Project Plann. Base Act. Code", 20, '');
                                                                IF "Project Plann. Base Act. Code" <> '' THEN
                                                                  ProjectPlanningBaseActivity.GET("Project Plann. Base Act. Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Project Plann. Base Act. Code }
    { 370 ;   ;Ignore Part Quantity;Boolean       ;CaptionML=ENU=Ignore Part Quantity;
                                                   Description=DP00686 }
    { 380 ;   ;Quantity Sheet Feature;Code10      ;TableRelation="Est. Quantity Sheet Feature";
                                                   CaptionML=ENU=Quantity Sheet Feature;
                                                   Description=DP00686 }
    { 2000;No ;Reserved range DP00381;Text1       ;CaptionML=ENU=Cost Type (Price);
                                                   Description=DP00381: range above 2000 reserved }
  }
  KEYS
  {
    {    ;Part Group,Part,Line No.                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GrpRec@1210190005 : Record 11012157;
      CodeRec@1210190006 : Record 11012089;
      ChrgRec@1100485001 : Record 11012175;
      EstCodeRec@1210190007 : Record 11012194;
      BufferRec@1100485007 : Record 11012195;
      ItemRec@1210190002 : Record 27;
      BasicItemRec@1100485005 : Record 11012316;
      TradeItemRec@1100485006 : Record 11012317;
      DimValRec@1210190004 : Record 349;
      ElemRec@1210190009 : Record 11012060;
      ValidateCu@1210190001 : Codeunit 11012033;
      DimMgt@1210190003 : Codeunit 408;
      FormatMgt@1210190008 : Codeunit 11012022;
      ItemTypeOpt@1210190000 : 'Item,Basic Item,Trade Item,Trade Vendor';
      Text004@1100485000 : TextConst 'ENU=Remove Charge Line';
      TmpPartLineRec@1100485002 : TEMPORARY Record 11012187;
      TradeExpRec@1100485003 : Record 11020286;

    PROCEDURE ValidateItem@3(LTypeArtOpt@11012000 : 'Item,Basic Item,Trade Item');
    VAR
      DummyDec@1210190000 : Decimal;
      DummyDate@1210190002 : Date;
      DummyCode@1100485000 : Code[20];
      Desc1Txt@1210190001 : Text[50];
      Desc2Txt@1210190004 : Text[50];
      lvCostObjectMaterial@1210190003 : Code[20];
      lvRefDate@1100485001 : Date;
    BEGIN
      lvRefDate := ValidateCu.CheckRefDateLevel('');

      ValidateCu.ValidateItem(LTypeArtOpt,"Trade Item","Item No.",Manufacturer,"Vendor (Trade Item)",
                              "Basic Item",lvCostObjectMaterial,Desc1Txt,"Unit of Measure",DummyDec,
                              DummyDec,DummyDate,DummyDec,Desc2Txt,DummyCode,
                              DummyCode,DummyCode,lvRefDate,'');  //db, 14-07-08
      IF Desc2Txt = '' THEN
        Description := Desc1Txt
      ELSE
        Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(Description));

      IF (lvCostObjectMaterial <> '') AND (STRLEN(lvCostObjectMaterial) <= MAXSTRLEN("Cost Object Material")) THEN
        "Cost Object Material" := lvCostObjectMaterial;

      IF ItemRec.GET("Item No.") THEN
        VALIDATE("External Text", ItemRec.Text);

      //db.sn, 30-01-07
      IF "Sub Operation Code" <> '' THEN
        Norm := 0;

      CASE LTypeArtOpt OF
        LTypeArtOpt::Item:
          BEGIN
            IF NOT ItemRec.GET("Item No.") THEN ItemRec.INIT;
            ItemRec.TESTFIELD(Blocked,FALSE);
            VALIDATE("Sub Operation Code", ItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Basic Item":
          BEGIN
            IF NOT BasicItemRec.GET(Manufacturer, "Basic Item") THEN BasicItemRec.INIT;
            BasicItemRec.TESTFIELD(Expired,FALSE);
            VALIDATE("Sub Operation Code", BasicItemRec."Sub Operation Code");
          END;
        LTypeArtOpt::"Trade Item":
          BEGIN
            IF NOT TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN TradeItemRec.INIT;
            TradeItemRec.TESTFIELD(Expired,FALSE);
            VALIDATE("Sub Operation Code", TradeItemRec."Sub Operation Code");
          END;
      END;
      //db.en, 30-01-07
    END;

    PROCEDURE FillDescriptionFromCostObject@1210190005(ICostObject@1210190000 : Code[20];IxCostObject@1210190001 : Code[20]);
    BEGIN
      IF (ICostObject <> '') AND ((ICostObject <> IxCostObject) OR (Description = '')) AND
         ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') THEN BEGIN
        IF Description = '' THEN BEGIN
          DimMgt.GetDimValueRec(2, ICostObject, DimValRec, FALSE,'');
          Description := DimValRec.Name;
          EXIT;
        END;
        IF IxCostObject <> '' THEN BEGIN
          DimMgt.GetDimValueRec(2, IxCostObject, DimValRec, FALSE,'');
          IF Description = DimValRec.Name THEN BEGIN
            DimMgt.GetDimValueRec(2, ICostObject, DimValRec, FALSE,'');
            IF DimValRec.Name <> '' THEN
              Description := DimValRec.Name;
          END
        END;
      END;
    END;

    PROCEDURE HandleLookupUnit@1210190008();
    VAR
      ItemUnitRec@1100485001 : Record 5404;
      lvUnit@1100485000 : Code[10];
    BEGIN
      //db, 21-11-05
      lvUnit := ItemUnitRec.HandleLookupUnit("Item No.", "Basic Item", "Trade Item", Manufacturer, Vendor);
      IF (lvUnit <> '') AND (lvUnit <> "Unit of Measure") THEN BEGIN
        xRec."Unit of Measure" := "Unit of Measure";  //db, 01-07-04: standard bug
        VALIDATE("Unit of Measure", lvUnit);
      END;
    END;

    PROCEDURE CheckItemUnitConversion@1210190010(VAR MainNewRec@1100485001 : Record 11012187;MainOldRec@1100485000 : Record 11012187);
    VAR
      ItemRec@1100485007 : Record 27;
      UnitFactor@1100485006 : Decimal;
      UnitFactorOld@1100485005 : Decimal;
      UnitFactorNew@1100485004 : Decimal;
      UnitControl@1100485002 : Codeunit 5402;
    BEGIN
      //db, 21-11-05
      WITH MainNewRec DO BEGIN
        UnitFactorOld := 1;
        UnitFactorNew := 1;
        IF "Trade Item" <> '' THEN BEGIN
          ValidateCu.ValidateUnit(ItemTypeOpt::"Trade Item",
            "Item No.","Basic Item","Trade Item",Manufacturer,Vendor,
            Quantity,"Unit of Measure",UnitFactorNew);
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            ValidateCu.ValidateUnit(ItemTypeOpt::"Basic Item",
              "Item No.","Basic Item","Trade Item",Manufacturer,Vendor,
              Quantity,"Unit of Measure",UnitFactorNew);
          END ELSE BEGIN  //db, 07-04-08: M10070
            IF "Item No." <> '' THEN BEGIN
              ItemRec.GET("Item No.");
              UnitFactorOld := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, MainOldRec."Unit of Measure");
              UnitFactorNew := UnitControl.GetQtyPerUnitOfMeasure(ItemRec, "Unit of Measure");
              UnitFactor := UnitFactorOld;
              ValidateCu.ValidateUnit(ItemTypeOpt::Item,
                "Item No.","Basic Item","Trade Item",Manufacturer,Vendor,
                Quantity,"Unit of Measure",UnitFactor);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CreateCharge@4();
    VAR
      lvPartLineRec@1100485000 : Record 11012187;
      ChrgRec@11012000 : Record 11012175;
      ChrgLine@11012001 : Integer;
      ChrgDesc@11012002 : Text[100];
      lvText001@1100485006 : TextConst 'ENU=Current line is not a surcharge line.';
      lvText003@1100485004 : TextConst 'ENU=Are these Part lines the basis for calculating surcharge for %1 ?';
      lvText004@1100409000 : TextConst 'ENU=Select lines first';
    BEGIN
      lvPartLineRec.COPY(Rec);

      WITH lvPartLineRec DO BEGIN
        ChrgLine := "Line No.";
        ChrgDesc := Description;
        IF "Surcharge Type" = "Surcharge Type"::" " THEN BEGIN
          MESSAGE(lvText001);
          EXIT;
        END;

        //db.sn, 29-01-15
        SETFILTER("Surcharge Type", '%1', "Surcharge Type"::" ");
        SETFILTER("Line No.", '<>%1', "Line No.");
        //db.en, 29-01-15

        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(lvText004);
        END ELSE BEGIN
          IF CONFIRM(lvText003, TRUE, ChrgDesc) THEN BEGIN
            REPEAT;
              //IF NOT ChrgRec.GET('', '', "Part Group", Part, 0, '', '', ChrgLine, "Line No.") THEN BEGIN
              IF NOT ChrgRec.GET('', '', "Part Group", Part, 0, 0, '', 0, '', '', ChrgLine, "Line No.") THEN BEGIN  //DP00481

                ChrgRec.INIT;
                ChrgRec."Estimate No." := '';
                ChrgRec."Sub-Estimate No." := '';
                ChrgRec."Part Group" := "Part Group";
                ChrgRec.Part := Part;
                ChrgRec."Surcharge Line" := ChrgLine;
                ChrgRec."Basic Line" := "Line No.";
                ChrgRec.INSERT;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        MARKEDONLY(FALSE);
      END;
      CLEARMARKS;
    END;

    PROCEDURE CompressLines@1100485000(lvPartGrp@1100485002 : Code[20];lvPart@1100485003 : Code[20]);
    VAR
      lvPartLineRec@1100485000 : Record 11012187;
      lvPartLineRec2@1100485001 : Record 11012187;
    BEGIN
      lvPartLineRec.SETRANGE("Part Group", lvPartGrp);
      lvPartLineRec.SETRANGE(Part, lvPart);
      lvPartLineRec.SETRANGE("Surcharge Type", lvPartLineRec."Surcharge Type"::" ");
      lvPartLineRec.SETFILTER("Item No.", '%1', '');
      lvPartLineRec.SETFILTER("Basic Item", '%1', '');
      lvPartLineRec.SETFILTER("Trade Item", '%1', '');
      IF lvPartLineRec.FIND('-') THEN BEGIN
        REPEAT
          lvPartLineRec2.COPY(lvPartLineRec);
          lvPartLineRec2.SETFILTER("Line No.", '>%1', lvPartLineRec."Line No.");
          lvPartLineRec2.SETRANGE("Recipe Group", lvPartLineRec."Recipe Group");
          lvPartLineRec2.SETRANGE(Recipe, lvPartLineRec.Recipe);

          //db.sn, 08-09-15
          lvPartLineRec2.SETRANGE(Description, lvPartLineRec.Description);
          lvPartLineRec2.SETRANGE(Norm, lvPartLineRec.Norm);
          lvPartLineRec2.SETRANGE("Gross Price", lvPartLineRec."Gross Price");
          lvPartLineRec2.SETRANGE("Material Price", lvPartLineRec."Material Price");
          lvPartLineRec2.SETRANGE("Subcontracting Price", lvPartLineRec."Subcontracting Price");
          lvPartLineRec2.SETRANGE("Plant Price", lvPartLineRec."Plant Price");
          //lvPartLineRec2.SETRANGE(Quantity, lvPartLineRec.Quantity);
          //db.en, 08-09-15
          lvPartLineRec2.SETRANGE("Unit of Measure", lvPartLineRec."Unit of Measure");
          lvPartLineRec2.SETRANGE("Time Quantity", lvPartLineRec."Time Quantity");
          lvPartLineRec2.SETRANGE("Unit of Time", lvPartLineRec."Unit of Time");
          lvPartLineRec2.SETRANGE("Rate Code", lvPartLineRec."Rate Code");
          lvPartLineRec2.SETRANGE("Line Status", lvPartLineRec."Line Status");

          lvPartLineRec2.SETRANGE("Cost Object Labor", lvPartLineRec."Cost Object Labor");
          lvPartLineRec2.SETRANGE("Cost Object Material", lvPartLineRec."Cost Object Material");
          lvPartLineRec2.SETRANGE("Cost Object Subcontracting", lvPartLineRec."Cost Object Subcontracting");
          lvPartLineRec2.SETRANGE("Cost Object Plant", lvPartLineRec."Cost Object Plant");

          lvPartLineRec2.SETRANGE("Cost Component", lvPartLineRec."Cost Component");
          lvPartLineRec2.SETRANGE(Discipline, lvPartLineRec.Discipline);
          lvPartLineRec2.SETRANGE("Trade Speciality", lvPartLineRec."Trade Speciality");
          lvPartLineRec2.SETRANGE("Trade Expertise", lvPartLineRec."Trade Expertise");

          IF lvPartLineRec2.FIND('-') THEN BEGIN
            REPEAT
              //db.sn, 08-09-15
              lvPartLineRec.Quantity := lvPartLineRec.Quantity + lvPartLineRec2.Quantity;
              //lvPartLineRec.Description := COPYSTR(
              //  lvPartLineRec.Discipline + ' ' + lvPartLineRec."Trade Speciality" + ' ' + lvPartLineRec."Trade Expertise" + ' ' +
              //  lvPartLineRec."Rate Code" ,
              //  1, MAXSTRLEN(lvPartLineRec.Description));
              //lvPartLineRec.Norm := lvPartLineRec.Norm + lvPartLineRec2.Norm;
              //lvPartLineRec."Material Price" := lvPartLineRec."Material Price" + lvPartLineRec2."Material Price";
              //lvPartLineRec."Gross Price" := lvPartLineRec."Gross Price" + lvPartLineRec2."Gross Price";
              //CalculateDiscount (lvPartLineRec);
              //lvPartLineRec."Subcontracting Price" := lvPartLineRec."Subcontracting Price" + lvPartLineRec2."Subcontracting Price";
              //lvPartLineRec."Plant Price" := lvPartLineRec."Plant Price" + lvPartLineRec2."Plant Price";
              //db.en, 08-09-15
              lvPartLineRec.MODIFY(TRUE);
              lvPartLineRec2.DELETE(TRUE);
            UNTIL lvPartLineRec2.NEXT = 0;
          END;
        UNTIL lvPartLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE ExplodeRecipe@1100485002(lvPartGrp@1100485005 : Code[20];lvPart@1100485002 : Code[20]);
    VAR
      lvPartLineRec@1100485004 : Record 11012187;
      LastLino@1100485000 : Integer;
    BEGIN
      TmpPartLineRec.DELETEALL;

      LastLino := 0;

      lvPartLineRec.SETRANGE("Part Group", lvPartGrp);
      lvPartLineRec.SETRANGE(Part, lvPart);
      IF lvPartLineRec.FIND('-') THEN BEGIN
        REPEAT
          IF lvPartLineRec.Recipe = '' THEN BEGIN
            TmpPartLineRec.TRANSFERFIELDS(lvPartLineRec);
            TmpPartLineRec."Line No." := LastLino + 10000;
            LastLino := TmpPartLineRec."Line No.";
            TmpPartLineRec.INSERT;
          END ELSE BEGIN
            ProcessRecipeChild(lvPartLineRec."Part Group", lvPartLineRec.Part,
              lvPartLineRec."Recipe Group", lvPartLineRec.Recipe,
              lvPartLineRec.Quantity, LastLino);
          END;
        UNTIL lvPartLineRec.NEXT = 0;
        lvPartLineRec.DELETEALL(TRUE);
      END;

      IF TmpPartLineRec.FIND('-') THEN BEGIN
        REPEAT
          lvPartLineRec := TmpPartLineRec;
          IF TmpPartLineRec."Rate Code" <> '' THEN
            lvPartLineRec.VALIDATE("Rate Code", TmpPartLineRec."Rate Code");
          lvPartLineRec.INSERT;
        UNTIL TmpPartLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE ProcessRecipeChild@1100485001(lvPartGrp@1100485008 : Code[20];lvPart@1100485007 : Code[20];lvRcpGrp@1100485000 : Code[20];lvRcp@1100485001 : Code[20];lvQuan@1100485004 : Decimal;VAR LastLino@1100485005 : Integer);
    VAR
      RcpRec@1100485002 : Record 11012155;
      RcpLineRec@1100485003 : Record 11012156;
    BEGIN
      {db, 16-08-06: geen 'lege' kopregels met alleen receptcode
      IF RcpRec.GET(lvRcpGrp, lvRcp) THEN BEGIN
        TmpPartLineRec.INIT;
        TmpPartLineRec."Part Group" := lvPartGrp;
        TmpPartLineRec.Part := lvPart;
        TmpPartLineRec."Line No." := LastLino + 10000;
        LastLino := TmpPartLineRec."Line No.";
        TmpPartLineRec.Description := RcpRec.Description;
        TmpPartLineRec."Unit of Measure" := RcpRec."Unit of Measure";
        TmpPartLineRec.VALIDATE("Rate Code", '');
        IF TmpPartLineRec.INSERT THEN
          TmpPartLineRec.Quantity := 0;
        TmpPartLineRec.Quantity := TmpPartLineRec.Quantity + lvQuan;
        TmpPartLineRec.MODIFY;
      END;
      }
      RcpLineRec.SETFILTER("Estimate No.", '%1', '');
      RcpLineRec.SETFILTER("Sub-Estimate No.", '%1', '');
      RcpLineRec.SETFILTER("Part Group", '%1', '');
      RcpLineRec.SETFILTER(Part, '%1', '');
      RcpLineRec.SETFILTER("Estimate Line", '%1', 0);
      RcpLineRec.SETRANGE("Recipe Group", lvRcpGrp);
      RcpLineRec.SETRANGE(Recipe, lvRcp);
      IF RcpLineRec.FINDSET THEN BEGIN
        REPEAT
          TmpPartLineRec."Part Group" := lvPartGrp;
          TmpPartLineRec.Part := lvPart;
          AssignRecipeLineToPartLine(RcpLineRec, TmpPartLineRec);

          IF RcpLineRec."Recipe (Child)" <> '' THEN BEGIN
            ProcessRecipeChild(lvPartGrp, lvPart,
              RcpLineRec."Recipe Group (Child)", RcpLineRec."Recipe (Child)",
              lvQuan * RcpLineRec.Quantity, LastLino);
          END ELSE BEGIN
            TmpPartLineRec."Line No." := LastLino + 10000;
            LastLino := TmpPartLineRec."Line No.";
            IF TmpPartLineRec.INSERT THEN
              TmpPartLineRec.Quantity := 0;
            TmpPartLineRec.Quantity := TmpPartLineRec.Quantity + lvQuan * RcpLineRec.Quantity;
            TmpPartLineRec.MODIFY;
          END;
        UNTIL RcpLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE AssignRecipeLineToPartLine@1100485003(lvRcpLineRec@1100485000 : Record 11012156;VAR lvPartLineRec@1100485001 : Record 11012187);
    VAR
      ProjectPlanningBaseActivity@1100528400 : Record 11012434;
    BEGIN
      WITH lvPartLineRec DO BEGIN
        "Item No." := lvRcpLineRec."Item No.";
        "Basic Item" := lvRcpLineRec."Basic Item";
        "Trade Item" := lvRcpLineRec."Trade Item";
        "Vendor (Trade Item)" := lvRcpLineRec."Vendor (Trade Item)";
        Manufacturer := lvRcpLineRec.Manufacturer;
        Description := lvRcpLineRec.Description;
        "Time Quantity" := lvRcpLineRec."Time Quantity";
        "Unit of Time" := lvRcpLineRec."Unit of Time";
        Quantity := lvRcpLineRec.Quantity;
        "Unit of Measure" := lvRcpLineRec."Unit of Measure";
        "External Text" := lvRcpLineRec."External Text";
        "External Text Block" := lvRcpLineRec."External Text Block";
        "Internal Text" := lvRcpLineRec."Internal Text";
        "Internal Text Block" := lvRcpLineRec."Internal Text Block";
        "Cost Object Labor" := lvRcpLineRec."Cost Object Labor";
        "Cost Object Material" := lvRcpLineRec."Cost Object Material";
        "Cost Object Subcontracting" := lvRcpLineRec."Cost Object Subcontracting";
        "Cost Object Plant" := lvRcpLineRec."Cost Object Plant";
        "Sub Operation Code" := lvRcpLineRec."Sub Operation Code";
        "Rate Code" := lvRcpLineRec."Rate Code";
        "Line Status" := lvRcpLineRec."Line Status";
        Code := lvRcpLineRec.Code;
        Vendor := lvRcpLineRec.Vendor;
        "Adjustment Factor Hours" := lvRcpLineRec."Adjustment Factor Hours";
        "Adjustment Factor Material" := lvRcpLineRec."Adjustment Factor Material";
        "Adjustment Factor Subcontr." := lvRcpLineRec."Adjustment Factor Subcontr.";
        "Adjustment Factor Plant" := lvRcpLineRec."Adjustment Factor Plant";
        "Surcharge %" := lvRcpLineRec."Surcharge %";
        "Surcharge Type" := lvRcpLineRec."Surcharge Type";
        Element := lvRcpLineRec.Element;
        IF lvRcpLineRec."Project Planning Activity Code" <> '' THEN
          IF ProjectPlanningBaseActivity.GET(lvRcpLineRec."Project Planning Activity Code") THEN
            "Project Plann. Base Act. Code" := lvRcpLineRec."Project Planning Activity Code";
        "Cost Component" := lvRcpLineRec."Cost Component";
        //db.sn, 06-06-11 (fill norm/price based on same conditions as used in function CheckNormPrice)
        IF ("Item No." + "Basic Item" + "Trade Item" = '') AND
           ("Surcharge Type" = "Surcharge Type"::" ") THEN BEGIN
          Norm := lvRcpLineRec.Norm;
          "Material Price" := lvRcpLineRec."Material Price";
          "Gross Price" := lvRcpLineRec."Gross Price";
          "Discount %" := lvRcpLineRec."Discount %";
          "Subcontracting Price" := lvRcpLineRec."Subcontracting Price";
          "Plant Price" := lvRcpLineRec."Plant Price";
        END;
        //db.en, 06-06-11
        Discipline := lvRcpLineRec.Discipline;
        "Trade Speciality" := lvRcpLineRec."Trade Speciality";
        "Trade Expertise" := lvRcpLineRec."Trade Expertise";
      END;
    END;

    PROCEDURE CalculateNettPrice@13();
    BEGIN
      "Material Price" := "Gross Price" - (("Gross Price"/100) * "Discount %");
    END;

    PROCEDURE CalculateDiscount@1210190012(VAR lvPartLineRec@1100485000 : Record 11012187);
    BEGIN
      WITH lvPartLineRec DO BEGIN
        IF "Gross Price" <> 0 THEN BEGIN
          "Discount %" := (("Gross Price" - "Material Price") / "Gross Price") * 100;
        END ELSE BEGIN
          IF "Discount %" <> 100 THEN BEGIN
            "Gross Price" := "Material Price" / ((100 - "Discount %") / 100);
          END ELSE BEGIN
            "Gross Price" := "Material Price";
            "Material Price" := 0;
          END;
        END;
      END;
    END;

    PROCEDURE CalculateGrossPrice@1100485007();
    BEGIN
      IF "Discount %" <> 100 THEN
        "Gross Price" := "Material Price" * 100 / (100 - "Discount %");
    END;

    PROCEDURE CheckNormPrice@1100485005();
    BEGIN
      IF ("Surcharge Type" <> "Surcharge Type"::" ") OR (Recipe <> '') OR
         ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
        IF "Sub Operation Code" <> '' THEN  //db, 12-08-10: M17908
          TESTFIELD(Norm, 0);
        TESTFIELD("Material Price", 0);
        TESTFIELD("Gross Price", 0);
        TESTFIELD("Discount %", 0);
        TESTFIELD("Subcontracting Price", 0);
        TESTFIELD("Plant Price", 0);
      END;
    END;

    PROCEDURE CheckRateCode@1100485006(lvAction@1210190000 : Integer);
    VAR
      EstSetup@1100485000 : Record 11012150;
      RateGroupRec@1210190002 : Record 11012162;
      BudgetRateRec@1210190003 : Record 11012000;
      RateType@1100485001 : 'Rate Group,Budget Rate';
    BEGIN
      EstSetup.GET;
      RateType := EstSetup."Rates Based On";

      IF lvAction = 0 THEN BEGIN
        IF "Rate Code" <> '' THEN BEGIN
          IF RateType = RateType::"Budget Rate" THEN BEGIN
            BudgetRateRec.SETRANGE(Code, "Rate Code");
            BudgetRateRec.FINDFIRST;
          END ELSE
            RateGroupRec.GET('', "Rate Code");
        END;
      END ELSE BEGIN
        IF RateType = RateType::"Budget Rate" THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Budget Rates", BudgetRateRec) = ACTION::LookupOK THEN
            VALIDATE("Rate Code", BudgetRateRec.Code);
        END ELSE BEGIN
          RateGroupRec.SETFILTER("Rate Group", '%1', '');
          IF PAGE.RUNMODAL(PAGE::"Rates per Group",RateGroupRec) = ACTION::LookupOK THEN
            VALIDATE("Rate Code", RateGroupRec."Rate Code");
        END;
      END;
    END;

    PROCEDURE ProcessSubOperation@1210190000();
    VAR
      SubOperRec@1100485000 : Record 11012166;
    BEGIN
      IF "Item No." + "Basic Item" + "Trade Item" <> '' THEN EXIT;

      IF SubOperRec.GET("Sub Operation Code") THEN BEGIN
        Description := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Description));
        IF SubOperRec."Unit of Measure" <> '' THEN
          "Unit of Measure" := SubOperRec."Unit of Measure";
      END;
    END;

    PROCEDURE CheckCostObject@1210190001(CostObject@1210190000 : Code[20];DirectValidate@1210190001 : Boolean);
    BEGIN
      IF CostObject <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, CostObject, DimValRec, TRUE,'');
        IF ("Item No." + "Basic Item" + "Trade Item" <> '') THEN BEGIN
          IF DirectValidate = TRUE THEN BEGIN
            DimValRec.TESTFIELD("Cost Type", DimValRec."Cost Type"::Material);
            EXIT;
          END;
        END;
        //db.sn, 02-10-09: M15745
        VALIDATE("Cost Component", DimValRec."Cost Component");
      //  IF EstRec."Estimate Based On" <> EstRec."Estimate Based On"::CostObject THEN EXIT;
        //db.en, 02-10-09: M15745
        IF "Sub Operation Code" <> '' THEN BEGIN
          ProcessSubOperation;
          EXIT;
        END;
        Description := DimValRec.Name;
        Norm := 0;
      //  "Production Rate" := 0;
        "Material Price" := 0;
        "Gross Price" := 0;
        "Subcontracting Price" := 0;
        "Plant Price" := 0;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Labor THEN BEGIN
          IF DimValRec."Rate Code" <> '' THEN
            VALIDATE("Rate Code", DimValRec."Rate Code");
          IF "Sub Operation Code" = '' THEN
            VALIDATE(Norm, DimValRec.Norm);
        END;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Material THEN
          VALIDATE("Gross Price", DimValRec.Price)
        ELSE
          "Discount %" := 0;
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Subcontracting THEN
          VALIDATE("Subcontracting Price", DimValRec.Price);
        IF DimValRec."Cost Type" = DimValRec."Cost Type"::Plant THEN
          VALIDATE("Plant Price", DimValRec.Price);
      END;
    END;

    PROCEDURE OldSubOperationDefault@1210190006() : Boolean;
    VAR
      OldSubOperRec@1210190001 : Record 11012166;
      OldOperRec@1210190000 : Record 11012165;
    BEGIN
      OldOperRec.INIT;
      IF OldSubOperRec.GET(xRec."Sub Operation Code") THEN
        IF NOT OldOperRec.GET(OldSubOperRec.Operation) THEN OldOperRec.INIT;

      EXIT(xRec."Cost Object Labor" = OldOperRec."Cost Object");
    END;

    PROCEDURE EditQuanSheet@1100409000();
    VAR
      EstSetup@1100409001 : Record 11012150;
      QuanRec@1210190000 : Record 11012186;
      QuantityRelation@1100525000 : Record 11020463;
      QuanSheetRec@1100525001 : Record 11020459;
      QuanSheetFrm@1100525002 : Page 11229781;
      Text011@1100409000 : TextConst 'ENU=Add Line first.';
    BEGIN
      //DP00686
      IF "Line No." = 0 THEN
        ERROR(Text011);

      EstSetup.GET;
      IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
        QuanRec.RESET;
        QuanRec.SETFILTER("Estimate No.", '%1', '');
        QuanRec.SETFILTER("Sub-Estimate No.", '%1', '');
        QuanRec.SETRANGE("Part Group", "Part Group");
        QuanRec.SETRANGE(Part, Part);
        QuanRec.SETRANGE("Estimate Line", "Line No.");
        QuanRec.SETFILTER("Recipe Group", '%1', '');
        QuanRec.SETFILTER(Recipe, '%1', '');
        QuanRec.SETRANGE("Recipe Line", 0);
        PAGE.RUNMODAL(PAGE::"Estimate Quantity Sheet", QuanRec);
        QuanRec.SETRANGE("Row No.", 0);
        IF QuanRec.FINDFIRST THEN
          VALIDATE(Quantity, QuanRec.Result);
      END ELSE BEGIN
        QuanSheetRec.SETRANGE("Part Group","Part Group");
        QuanSheetRec.SETRANGE(Part,Part);
        QuanSheetFrm.SETTABLEVIEW(QuanSheetRec);
        IF NOT QuantityRelation.GET('','',"Part Group",Part,"Line No.",'','',0) THEN QuantityRelation.INIT;
        IF NOT QuanSheetRec.GET("Part Group",Part,QuantityRelation."Quantity Sheet") THEN QuanSheetRec.INIT;
        QuanSheetFrm.SETRECORD(QuanSheetRec);
        QuanSheetFrm.SetDefaultOLD(Rec,TRUE,QuantityRelation);
        QuanSheetFrm.RUNMODAL;
        IF QuantityRelation.GET('','',"Part Group",Part,"Line No.",'','',0) THEN
          IF GET("Part Group",Part,"Line No.") THEN
            VALIDATE(Quantity);
      END;
    END;

    PROCEDURE EnterQuantity@1210190013(lvOrigin@1210190002 : Integer) : Boolean;
    VAR
      EstSetup@1100409000 : Record 11012150;
      QuanRec@1210190000 : Record 11012186;
      QuantityRelation@1100525000 : Record 11020463;
    BEGIN
      //DP00686
      //lvOrigin:
      //  1 = Length, Width and Height (n.a.)
      //  2 = quantity (input)
      //  3 = house type (n.a.)
      //  4 = quantity (lookup)

      IF "Surcharge Type" <> "Surcharge Type"::" " THEN EXIT(FALSE);

      //IF lvOrigin <> 1 THEN BEGIN
      //  IF Length <> 0 THEN EXIT(FALSE);
      //  IF Width <> 0 THEN EXIT(FALSE);
      //  IF Height <> 0 THEN EXIT(FALSE);
      //END;

      EstSetup.GET;
      IF lvOrigin <> 4 THEN BEGIN
        IF NOT EstSetup."Quantity Sheet with Relations" THEN BEGIN
          QuanRec.SETFILTER("Estimate No.", '%1', '');
          QuanRec.SETFILTER("Sub-Estimate No.", '%1', '');
          QuanRec.SETRANGE("Part Group", "Part Group");
          QuanRec.SETRANGE(Part, Part);
          QuanRec.SETRANGE("Estimate Line", "Line No.");
          QuanRec.SETFILTER("Recipe Group", '%1', '');
          QuanRec.SETFILTER(Recipe, '%1', '');
          QuanRec.SETRANGE("Recipe Line", 0);
          IF QuanRec.FINDFIRST THEN EXIT(FALSE);
        END ELSE
          IF QuantityRelation.GET('','',"Part Group",Part,"Line No.",'','',0) THEN
            EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    BEGIN
    {
      db, 24-11-14: maintenance interval/relation removed
    }
    END.
  }
}

