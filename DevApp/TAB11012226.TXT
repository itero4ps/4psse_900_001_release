OBJECT Table 11012226 Consent Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rim,
                TableData 122=rim,
                TableData 124=rim;
    OnInsert=VAR
               Consenter@1100525000 : Record 11012229;
             BEGIN
               Consenter.GET(USERID);
               "Creation  Date" := TODAY;
               "Created by" := USERID;
               Manual := TRUE;
             END;

    OnModify=BEGIN
               FinishPhase;
             END;

    OnDelete=VAR
               Consenter@1100525000 : Record 11012229;
             BEGIN
               IF NOT IsManualConsentLineCreatedByCurrentUser THEN BEGIN
                 Consenter.GET(USERID);
                 Consenter.TESTFIELD("Super Consenter");
               END;
             END;

    OnRename=BEGIN
               xRec.TESTFIELD("Consenter Group Code", '');
               IF NOT xRec.IsManualConsentLineCreatedByCurrentUser THEN
                 ConsentManCU.CheckUser("User ID");
               //kkleermaker.sn, 110901, M28818
               IF (xRec."User ID" <> "User ID") AND
                  ("User ID" <> '') AND
                  IsTemporary
               THEN
                 UpdateUserID(xRec."User ID", "User ID");
               //kkleermaker.sn, 110901, M28818
             END;

    CaptionML=ENU=Consent Line;
    LookupPageID=Page11071873;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;InitValue=Invoice;
                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote;
                                                   OptionString=Order,Invoice,Posted Invoice,Credit Memo,Posted Credit Memo,Advice Order,Purchase Action,Purchase Quote }
    { 2   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 3   ;   ;User ID             ;Code50        ;TableRelation=Consenter."User ID";
                                                   OnValidate=BEGIN
                                                                IF "User ID" <> '' THEN
                                                                  TESTFIELD("Consenter Group Code", '');
                                                                IF NOT IsManualConsentLineCreatedByCurrentUser THEN
                                                                  ConsentManCU.CheckUser(xRec."User ID");
                                                              END;

                                                   CaptionML=ENU=User ID;
                                                   NotBlank=Yes }
    { 4   ;   ;Handled By          ;Text200       ;CaptionML=ENU=Handled By;
                                                   Editable=No }
    { 5   ;   ;Consent             ;Boolean       ;OnValidate=VAR
                                                                ConsenterGroupMember@1100528400 : Record 11012232;
                                                              BEGIN
                                                                IF "User ID" <> '' THEN
                                                                  ConsentManCU.CheckUser("User ID")
                                                                ELSE
                                                                  ConsenterGroupMember.GET("Consenter Group Code", USERID);

                                                                IF "Return To Previous" AND Consent THEN
                                                                  ERROR(Text003);

                                                                AddUserIdToHandledBy(Rec);

                                                                IF Consent THEN BEGIN
                                                                  "Consent Date" := TODAY;
                                                                  "Consent By" := USERID;
                                                                  MODIFY; //25434
                                                                  ConsentManCU.UpdateHigherLevel(Rec);
                                                                END ELSE BEGIN
                                                                  MODIFY;
                                                                  ConsentManCU.ValidateConsentUndo(Rec);
                                                                END;

                                                                UpdateDocument;
                                                              END;

                                                   CaptionML=ENU=Consent }
    { 6   ;   ;Consent Date        ;Date          ;CaptionML=ENU=Consent Date }
    { 8   ;   ;Amount From         ;Decimal       ;CaptionML=ENU=Amount From }
    { 9   ;   ;Amount To           ;Decimal       ;CaptionML=ENU=Amount To }
    { 10  ;   ;Comment adm         ;Text100       ;OnValidate=BEGIN
                                                                ConsentManCU.CheckUser("User ID");
                                                              END;

                                                   CaptionML=ENU=Comment adm }
    { 11  ;   ;Ignore Temporary    ;Boolean       ;OnValidate=BEGIN
                                                                ConsentManCU.CheckUser("User ID");
                                                              END;

                                                   CaptionML=ENU=Ignore Temporary }
    { 13  ;   ;Level               ;Integer       ;CaptionML=ENU=Level;
                                                   Editable=No }
    { 14  ;   ;Creation  Date      ;Date          ;CaptionML=ENU=Create Date;
                                                   Editable=No }
    { 16  ;   ;Last Consent User ID;Code50        ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Last Consent User ID }
    { 17  ;   ;Return To Previous  ;Boolean       ;OnValidate=BEGIN
                                                                IF "Return To Previous" AND Consent THEN
                                                                  ERROR(Text003);

                                                                AddUserIdToHandledBy(Rec);

                                                                IF "Return To Previous" THEN BEGIN
                                                                  "Date Return to Previous" := TODAY;
                                                                  ConsentManCU.UpdateLowerLevel(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Return To Previous }
    { 18  ;   ;Last Consenter Group Code;Code10   ;TableRelation="Consenter Group";
                                                   CaptionML=ENU=Last Consenter Group Code }
    { 20  ;   ;Consent By          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Consent By;
                                                   Editable=No }
    { 30  ;   ;Consenter Group Code;Code10        ;TableRelation="Consenter Group";
                                                   CaptionML=ENU=Consenter Group Code;
                                                   Editable=No }
    { 49  ;   ;Next Consent User ID;Code50        ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Next Consent;
                                                   Editable=No }
    { 50  ;   ;Data Type OLD       ;Option        ;CaptionML=ENU=Data Type OLD;
                                                   OptionCaptionML=ENU=Vendor,Job,G/L Account,Dim 1,Dim 2,Dim 3,Dim 4,Dim 5,Dim 6,Dim 7,Dim 8,Manual,Service Order,Service Contract,Location;
                                                   OptionString=Vendor,Job,G/L Account,Dim 1,Dim 2,Dim 3,Dim 4,Dim 5,Dim 6,Dim 7,Dim 8,Manual,Service Order,Service Contract,Location;
                                                   Editable=No }
    { 55  ;   ;Next Consenter Group Code;Code10   ;TableRelation="Consenter Group";
                                                   CaptionML=ENU=Next Consenter Group Code }
    { 60  ;   ;Data Type No. OLD   ;Code20        ;CaptionML=ENU=Data Type No. OLD;
                                                   Editable=No }
    { 65  ;   ;Advanced Consent OLD;Boolean       ;CaptionML=ENU=Advanced Consent OLD }
    { 70  ;   ;Input Consent       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Input Consent" = TRUE THEN BEGIN
                                                                  "Input Return to Previous" := FALSE;
                                                                  "Input Deny" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Consent }
    { 80  ;   ;Input Return to Previous;Boolean   ;OnValidate=BEGIN
                                                                IF "Input Return to Previous" = TRUE THEN BEGIN
                                                                  "Input Consent" := FALSE;
                                                                  "Input Deny" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Return to Previous }
    { 85  ;   ;Date Return to Previous;Date       ;CaptionML=ENU=Date Return to Previous }
    { 90  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor.No.;
                                                   CaptionML=ENU=Buy-from Vendor No.;
                                                   Editable=No }
    { 100 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor No.)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Editable=No }
    { 105 ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Project,Service Order";
                                                   OptionString=[ ,Project,Service Order];
                                                   Editable=No }
    { 110 ;   ;Type No.            ;Code20        ;TableRelation=IF (Type=CONST(Project)) Job
                                                                 ELSE IF (Type=CONST(Service Order)) "Service Order";
                                                   CaptionML=ENU=Type No.;
                                                   Editable=No }
    { 130 ;   ;Process             ;Option        ;CaptionML=ENU=Process;
                                                   OptionCaptionML=ENU=Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval;
                                                   OptionString=Invoice,Invoice Approval,Advice Order,Purchase Order,Purchase Action,Purchase Quote,Credit Memo,Credit Memo Approval;
                                                   Editable=No }
    { 140 ;   ;Manual              ;Boolean       ;CaptionML=ENU=Manual }
    { 150 ;   ;Document Line No.   ;Integer       ;OnValidate=VAR
                                                                PurchLineRec@1100525005 : Record 39;
                                                                PurchInvLine@1100525004 : Record 123;
                                                                ApprovalLine@1100525003 : Record 11012032;
                                                                PurchInvHeaderRec@1100525002 : Record 122;
                                                                PurchCrMemoLine@1100525001 : Record 125;
                                                                PurchCrMemoHeader@1100525000 : Record 124;
                                                              BEGIN
                                                                IF NOT Manual THEN BEGIN
                                                                  "Document Line No." := 0;
                                                                  EXIT;
                                                                END;

                                                                IF "Document Line No." = 0 THEN BEGIN
                                                                  Type := Type::" ";
                                                                  "Type No." := '';
                                                                  EXIT;
                                                                END;

                                                                CASE "Document Type" OF
                                                                  "Document Type"::Order:;

                                                                  "Document Type"::Invoice:
                                                                    BEGIN
                                                                      PurchLineRec.GET(PurchLineRec."Document Type"::Invoice,"Document No.","Document Line No.");
                                                                      IF PurchLineRec."Job No." <> '' THEN BEGIN
                                                                        Type := Type::Project;
                                                                        "Type No." := PurchLineRec."Job No.";
                                                                      END ELSE BEGIN
                                                                        IF PurchLineRec."Service Order No." <> '' THEN BEGIN
                                                                          Type := Type::"Service Order";
                                                                          "Type No." := PurchLineRec."Service Order No.";
                                                                        END;
                                                                      END;
                                                                    END;

                                                                  "Document Type"::"Posted Invoice":
                                                                    CASE Process OF
                                                                      Process::Invoice:
                                                                        BEGIN
                                                                          PurchInvLine.GET("Document No.","Document Line No.");
                                                                          IF PurchInvLine."Job No." <> '' THEN BEGIN
                                                                            Type := Type::Project;
                                                                            "Type No." := PurchInvLine."Job No.";
                                                                          END ELSE BEGIN
                                                                            IF PurchInvLine."Service Order No." <> '' THEN BEGIN
                                                                              Type := Type::"Service Order";
                                                                              "Type No." := PurchInvLine."Service Order No.";
                                                                            END;
                                                                          END;
                                                                        END;

                                                                      Process::"Invoice Approval":
                                                                        BEGIN
                                                                          PurchInvHeaderRec.GET("Document No.");
                                                                          ApprovalLine.GET(
                                                                            PurchInvHeaderRec."Journal Template",ApprovalLine."Document Type"::"Purchase Invoice",
                                                                            "Document No.","Document Line No.");
                                                                          IF ApprovalLine."Project No." <> '' THEN BEGIN
                                                                            Type := Type::Project;
                                                                            "Type No." := ApprovalLine."Project No.";
                                                                          END ELSE BEGIN
                                                                            IF ApprovalLine."Service Order No." <> '' THEN BEGIN
                                                                              Type := Type::"Service Order";
                                                                              "Type No." := ApprovalLine."Service Order No.";
                                                                            END;
                                                                        END;
                                                                      END;
                                                                    END;

                                                                  "Document Type"::"Credit Memo":
                                                                    BEGIN
                                                                      PurchLineRec.GET(PurchLineRec."Document Type"::"Credit Memo","Document No.","Document Line No.");
                                                                      IF  PurchLineRec."Job No." <> '' THEN BEGIN
                                                                        Type := Type::Project;
                                                                        "Type No." := PurchLineRec."Job No.";
                                                                      END ELSE BEGIN
                                                                        IF PurchLineRec."Service Order No." <> '' THEN BEGIN
                                                                          Type := Type::"Service Order";
                                                                          "Type No." := PurchLineRec."Service Order No.";
                                                                        END;
                                                                      END;
                                                                    END;

                                                                  "Document Type"::"Posted Credit Memo":
                                                                    CASE Process OF
                                                                      Process::"Credit Memo":
                                                                        BEGIN
                                                                          PurchCrMemoLine.GET("Document No.","Document Line No.");
                                                                          IF PurchCrMemoLine."Job No." <> '' THEN BEGIN
                                                                            Type := Type::Project;
                                                                            "Type No." :=  PurchCrMemoLine."Job No.";
                                                                          END ELSE BEGIN
                                                                            IF PurchCrMemoLine."Service Order No." <> '' THEN BEGIN
                                                                              Type := Type::"Service Order";
                                                                              "Type No." :=  PurchCrMemoLine."Service Order No.";
                                                                            END;
                                                                          END;
                                                                        END;
                                                                      Process::"Credit Memo Approval":
                                                                        BEGIN
                                                                          PurchCrMemoHeader.GET("Document No.");
                                                                          ApprovalLine.GET(
                                                                            PurchCrMemoHeader."Journal Template",ApprovalLine."Document Type"::"Credit Memo",
                                                                            "Document No.","Document Line No.");
                                                                          IF ApprovalLine."Project No." <> '' THEN BEGIN
                                                                            Type := Type::Project;
                                                                            "Type No." := ApprovalLine."Project No.";
                                                                          END ELSE BEGIN
                                                                            IF ApprovalLine."Service Order No." <> '' THEN BEGIN
                                                                              Type := Type::"Service Order";
                                                                              "Type No." := ApprovalLine."Service Order No.";
                                                                            END;
                                                                          END;
                                                                        END;
                                                                    END;

                                                                  "Document Type"::"Advice Order":;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Document Line No.;
                                                   Editable=No }
    { 160 ;   ;Consent Rule Line No.;Integer      ;TableRelation="Consent Rule"."Line No.";
                                                   CaptionML=ENU=Consent Rule Line No. }
    { 170 ;   ;Temporary Line      ;Boolean       ;CaptionML=ENU=Temporary Line;
                                                   Editable=No }
    { 180 ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount }
    { 190 ;   ;Input Deny          ;Boolean       ;OnValidate=BEGIN
                                                                IF "Input Deny" = TRUE THEN BEGIN
                                                                  "Input Consent" := FALSE;
                                                                  "Input Return to Previous" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Input Deny }
    { 195 ;   ;Date Denied         ;Date          ;CaptionML=ENU=Date Denied }
    { 200 ;   ;Compressed Document Line;Boolean   ;CaptionML=ENU=Compressed Document Line }
    { 210 ;   ;To be Consented Automatically;Boolean;
                                                   CaptionML=ENU=To be Consented Automatically }
    { 220 ;   ;Consented Automatically;Boolean    ;CaptionML=ENU=Consented Automatically }
    { 230 ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserManagement@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserManagement.LookupUserID("Created by");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Created by;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Document Line No.,User ID,Consenter Group Code,Type,Type No.;
                                                   Clustered=Yes }
    {    ;User ID,Ignore Temporary                 }
    {    ;Ignore Temporary,User ID                 }
    {    ;Document Type,Document No.,Level         }
    {    ;Document Type,User ID,Type No.           }
    {    ;Consenter Group Code                     }
    {    ;Consent Rule Line No.                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528400 : TextConst 'ENU=There are unprocessed %1s present. Please process these %1s first.';
      Text003@1100485003 : TextConst 'ENU=Consent and Back to previous Consenter entered.';
      ConsentManCU@1100485004 : Codeunit 11012132;

    PROCEDURE ReadTypeNoDescription@1100485000() TypeDescTxt : Text[50];
    VAR
      lProjRec@1100485001 : Record 11072003;
      lServOrderRec@1100485000 : Record 11012823;
    BEGIN
      CASE Type OF
        Type::" ":EXIT('');
        Type::Project:
          IF lProjRec.GET("Type No.") THEN
            EXIT(lProjRec.Description)
          ELSE
            EXIT('');
        Type::"Service Order":
          IF lServOrderRec.GET("Type No.") THEN
            EXIT(lProjRec.Description)
          ELSE
            EXIT('');
      END;
    END;

    PROCEDURE FinishPhase@1100525013();
    VAR
      PhasePlanMgt@1100525000 : Codeunit 11012242;
    BEGIN
      PhasePlanMgt.FinishConsentPhase(Rec);
    END;

    PROCEDURE ProcessConsentLines@1100528400();
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      IF FINDSET THEN BEGIN
        REPEAT
          IF "Input Consent" OR "Input Return to Previous" OR "Input Deny" THEN BEGIN
            ProcessConsentLine(Rec);
            DELETE;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ProcessConsentLine@1100528404(ConsentLine2@1100528400 : Record 11012226);
    VAR
      ConsentLine@1100528401 : Record 11012226;
    BEGIN
      ConsentLine.SETRANGE("Document Type", ConsentLine2."Document Type");
      ConsentLine.SETRANGE("Document No.", ConsentLine2."Document No.");
      IF ConsentLine2."Compressed Document Line" THEN BEGIN
        ConsentLine.SETFILTER("Document Line No.", '<>%1', 0);
        ConsentLine.SETRANGE(Level, ConsentLine2.Level);
      END ELSE
        ConsentLine.SETRANGE("Document Line No.", ConsentLine2."Document Line No.");
      ConsentLine.SETRANGE("User ID", ConsentLine2."User ID");
      ConsentLine.SETRANGE("Consenter Group Code", ConsentLine2."Consenter Group Code");
      IF ConsentLine2."Document Type" IN
         [ConsentLine2."Document Type"::"Advice Order", ConsentLine2."Document Type"::"Purchase Action"]
      THEN BEGIN
        ConsentLine.SETRANGE(Type, ConsentLine2.Type);
        ConsentLine.SETRANGE("Type No.", ConsentLine2."Type No.");
      END;

      IF ConsentLine.FINDSET THEN
        REPEAT
          CASE TRUE OF
            ConsentLine2."Input Consent":
              BEGIN
                ConsentLine."Return To Previous" := FALSE; //Call 26129
                ConsentLine.VALIDATE(Consent,"Input Consent");
                ConsentLine.MODIFY(TRUE);
              END;
            ConsentLine2."Input Return to Previous":
              BEGIN
                ConsentLine.Consent := FALSE; //Call 26129
                ConsentLine.VALIDATE("Return To Previous","Input Return to Previous");
                ConsentLine.MODIFY(TRUE);
              END;
            ConsentLine2."Input Deny":
              DenyConsentLine(ConsentLine);
          END;
        UNTIL ConsentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE DenyConsentLine@1100528401(ConsentLine@1100528400 : Record 11012226);
    VAR
      ConsentLine2@1100528401 : Record 11012226;
      SuperConsenterUserID@1100528402 : Code[50];
    BEGIN
      ConsentLine.DELETE;

      SuperConsenterUserID := GetSuperConsenter(ConsentLine);

      IF ConsentLine2.GET(
        ConsentLine."Document Type",
        ConsentLine."Document No.",
        ConsentLine."Document Line No.",
        SuperConsenterUserID,
        '',
        ConsentLine.Type,
        ConsentLine."Type No.")
      THEN
        ConsentLine2.DELETE; //For 1 document (line) there can be only 1 consent line for the super user.

      AddUserIdToHandledBy(ConsentLine);
      ConsentLine.Consent := FALSE;
      ConsentLine."User ID" := SuperConsenterUserID;
      ConsentLine."Consenter Group Code" := '';
      ConsentLine."Date Denied" := TODAY;
      ConsentLine.INSERT;
    END;

    PROCEDURE AddUserIdToHandledBy@1100528402(VAR ConsentLine@1100528400 : Record 11012226);
    BEGIN
      IF STRLEN(ConsentLine."Handled By" + '; ' + USERID) <= MAXSTRLEN(ConsentLine."Handled By") THEN BEGIN
        IF ConsentLine."Handled By" = '' THEN
          ConsentLine."Handled By" := USERID
        ELSE
          ConsentLine."Handled By" := ConsentLine."Handled By" + '; ' + USERID;
      END;
    END;

    LOCAL PROCEDURE GetSuperConsenter@1100528405(ConsentLine@1100528400 : Record 11012226) SuperConsenter : Code[50];
    VAR
      ConsentRule@1100528401 : Record 11012227;
    BEGIN
      IF NOT ConsentRule.GET(ConsentLine."Consent Rule Line No.") THEN
        ConsentRule.INIT;
      SuperConsenter := ConsentRule.GetSuperConsenter;
    END;

    PROCEDURE UpdateUserID@1210190000(OldUserID@1210190001 : Code[50];NewUserID@1210190002 : Code[50]);
    VAR
      ConsentLine@1210190000 : Record 11012226;
    BEGIN
      //kkleermaker, 110831, M28818
      IF ConsentLine.GET(
        "Document Type","Document No.","Document Line No.", OldUserID, '', Type, "Type No.")
      THEN BEGIN
        ConsentLine.DELETE;
        ConsentLine.VALIDATE("User ID", NewUserID);
        ConsentLine.INSERT;
      END;
    END;

    PROCEDURE ValidateIgnoreTemporary@1100528406();
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      IF NOT IsTemporary THEN
        EXIT;

      ConsentLine.SETRANGE("Document Type", "Document Type");
      ConsentLine.SETRANGE("Document No.", "Document No.");
      IF "Compressed Document Line" THEN
        ConsentLine.SETFILTER("Document Line No.", '<>%1', 0)
      ELSE
        ConsentLine.SETRANGE("Document Line No.", "Document Line No.");
      ConsentLine.SETRANGE("User ID", "User ID");
      ConsentLine.SETRANGE("Consenter Group Code", "Consenter Group Code");
      IF "Document Type" IN
         ["Document Type"::"Advice Order", "Document Type"::"Purchase Action"]
      THEN BEGIN
        ConsentLine.SETRANGE(Type, Type);
        ConsentLine.SETRANGE("Type No.", "Type No.");
      END;
      IF ConsentLine.FINDSET THEN
        REPEAT
          ConsentLine."Ignore Temporary" := "Ignore Temporary";
          ConsentLine.MODIFY;
        UNTIL ConsentLine.NEXT = 0;
    END;

    PROCEDURE IsTemporary@1100528407() : Boolean;
    VAR
      RecRef@1100528400 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      EXIT(RecRef.ISTEMPORARY);
    END;

    PROCEDURE ShowDocument@1100528403();
    VAR
      PurchaseHeader@1100485002 : Record 38;
      PurchaseInvoiceheader@1100485001 : Record 122;
      PurchCreditMemoHeader@1100485000 : Record 124;
      ProjectPurchaseAction@1100528400 : Record 11012026;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          BEGIN
            PurchaseHeader.GET(PurchaseHeader."Document Type"::Invoice,"Document No.");
            PAGE.RUN(PAGE::"Purchase Invoice",PurchaseHeader);
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            PurchaseHeader.GET(PurchaseHeader."Document Type"::"Credit Memo","Document No.");
            PAGE.RUN(PAGE::"Purchase Credit Memo",PurchaseHeader);
          END;
        "Document Type"::"Posted Invoice":
          BEGIN
            PurchaseInvoiceheader.GET("Document No.");
            PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchaseInvoiceheader);
          END;
        "Document Type"::"Posted Credit Memo":
          BEGIN
            PurchCreditMemoHeader.GET("Document No.");
            PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCreditMemoHeader);
          END;
        "Document Type"::"Advice Order":
          ShowAdviceOrderLine;
        "Document Type"::"Purchase Quote":
          BEGIN
            PurchaseHeader.GET(PurchaseHeader."Document Type"::Quote,"Document No.");
            PAGE.RUN(PAGE::"Purchase Quote",PurchaseHeader);
          END;
        "Document Type"::Order:
          BEGIN
            PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,"Document No.");
            PAGE.RUN(PAGE::"Purchase Order",PurchaseHeader);
          END;
        "Document Type"::"Purchase Action":
          BEGIN
            ProjectPurchaseAction.GET("Type No.", "Document No.");
            ProjectPurchaseAction.SETRECFILTER;
            PAGE.RUN(PAGE::"Project Purchase Action", ProjectPurchaseAction);
          END;
      END;
    END;

    PROCEDURE ShowRelatedPurchOrder@1100529101();
    VAR
      PurchaseHeader@1100529101 : Record 38;
      RelatedPurchOrderNo@1100529100 : Code[20];
    BEGIN
      RelatedPurchOrderNo := GetRelatedPurchOrderNo;
      IF RelatedPurchOrderNo = '' THEN
        EXIT;

      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, RelatedPurchOrderNo);
      PAGE.RUN(PAGE::"Purchase Order", PurchaseHeader);
    END;

    LOCAL PROCEDURE ShowAdviceOrderLine@1100485002();
    VAR
      AdviceOrderLine@1100485001 : Record 11012055;
    BEGIN
      CASE Type OF
        Type::Project:
          BEGIN
            AdviceOrderLine.GET(AdviceOrderLine."Record Type"::Project, "Type No.", '', "Document Line No.");
          END;
        Type::"Service Order":
          BEGIN
            AdviceOrderLine.GET(AdviceOrderLine."Record Type"::ServOrder, '', "Type No.", "Document Line No.");
          END;
      END;
      PAGE.RUNMODAL(PAGE::"Advice Order Card", AdviceOrderLine);
    END;

    PROCEDURE AddTempDetailedConsentLines@1100528460(ConsentLinesOfAllConsentersAreShown@1100528401 : Boolean);
    VAR
      CompressionLevel@1100528404 : 'Default,Detailed,Compressed';
    BEGIN
      AddTempConsentLines(ConsentLinesOfAllConsentersAreShown, CompressionLevel::Detailed);
    END;

    PROCEDURE AddTempCompressedConsentLines@1100528408(ConsentLinesOfAllConsentersAreShown@1100528401 : Boolean);
    VAR
      CompressionLevel@1100528404 : 'Default,Detailed,Compressed';
    BEGIN
      AddTempConsentLines(ConsentLinesOfAllConsentersAreShown, CompressionLevel::Compressed);
    END;

    LOCAL PROCEDURE AddTempConsentLines@1100528461(ConsentLinesOfAllConsentersAreShown@1100528401 : Boolean;CompressionLevel@1100528404 : 'Default,Detailed,Compressed');
    VAR
      CurrentConsentLine@1100528403 : Record 11012226;
      TempConsentLine@1100528400 : TEMPORARY Record 11012226;
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      IF NOT IsTemporary THEN
        EXIT;

      CurrentConsentLine := Rec;

      ConsentManagement.FillTempConsentLines(
        TempConsentLine, TRUE, ConsentLinesOfAllConsentersAreShown, 0, '', USERID, CompressionLevel);

      IF TempConsentLine.FINDSET THEN
        REPEAT
          IF NOT GET(
            TempConsentLine."Document Type", TempConsentLine."Document No.", TempConsentLine."Document Line No.",
            TempConsentLine."User ID", TempConsentLine."Consenter Group Code", TempConsentLine.Type,
            TempConsentLine."Type No.")
          THEN BEGIN
            Rec := TempConsentLine;
            INSERT;
          END;
        UNTIL TempConsentLine.NEXT = 0;

      FindCurrentConsentLine(CurrentConsentLine);
    END;

    PROCEDURE ConsentDetailedForCompressedLine@1100528409(ConsentLinesOfAllConsentersAreShown@1100528401 : Boolean);
    VAR
      CurrentConsentLine@1100528400 : Record 11012226;
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      IF NOT IsTemporary THEN
        EXIT;

      CurrentConsentLine := Rec;
      ConsentManagement.ShowDetailedConsentLinesForCompressedLine(Rec);

      //Refresh compressed consent lines.
      DELETE;
      AddTempCompressedConsentLines(ConsentLinesOfAllConsentersAreShown);

      IF FindCurrentConsentLine(CurrentConsentLine) THEN BEGIN
        "Input Consent" := CurrentConsentLine."Input Consent";
        "Input Return to Previous" := CurrentConsentLine."Input Return to Previous";
        "Input Deny" := CurrentConsentLine."Input Deny";
        MODIFY;
      END;
    END;

    PROCEDURE ShowAllDetailedConsentLinesFromCompressedConsentPage@1100528442(ConsentLinesOfAllConsentersAreShown@1100528401 : Boolean);
    VAR
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      IF NOT IsTemporary THEN
        EXIT;
      IF UnprocessedLinesPresent THEN
        ERROR(Text000, TABLECAPTION);

      ConsentManagement.ShowAllDetailedConsentLinesFromCompressedConsentPage;

      //Refresh compressed consent lines.
      DELETEALL;
      AddTempCompressedConsentLines(ConsentLinesOfAllConsentersAreShown);
    END;

    PROCEDURE ShowAllCompressedConsentLinesFromDetailedConsentPage@1100528454(ConsentLinesOfAllConsentersAreShown@1100528401 : Boolean);
    VAR
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      IF NOT IsTemporary THEN
        EXIT;
      IF UnprocessedLinesPresent THEN
        ERROR(Text000, TABLECAPTION);

      ConsentManagement.ShowAllCompressedConsentLinesFromDetailedConsentPage;

      //Refresh compressed consent lines.
      DELETEALL;
      AddTempDetailedConsentLines(ConsentLinesOfAllConsentersAreShown);
    END;

    PROCEDURE ShowScannedDocument@1100525000();
    VAR
      PurchasesPayablesSetup@1100525000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.ShowScannedDocumentWithDocNo("Document No.");
    END;

    PROCEDURE ShowComment@19063718();
    VAR
      PurchaseText@1100528407 : Record 11012067;
      CommentLineJobText@1100528406 : Record 11020634;
      PurchCommentLine@1100485000 : Record 43;
      PurchaseActionText@1100528402 : Page 11012126;
      PurchCommentSheet@1100528400 : Page 66;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Advice Order":
          BEGIN
            SetFilterOnCommentLineJobText(CommentLineJobText);
            PAGE.RUNMODAL(0, CommentLineJobText);
          END;
        "Document Type"::"Purchase Action":
          BEGIN
            SetFilterOnPurchaseText(PurchaseText);
            PurchaseActionText.SETTABLEVIEW(PurchaseText);
            PurchaseActionText.RUNMODAL;
          END;
        ELSE BEGIN
          SetFilterOnPurchCommentLine(PurchCommentLine);
          PurchCommentSheet.SETTABLEVIEW(PurchCommentLine);
          PurchCommentSheet.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE HasCommentLines@1100528426() CommentLinesExist : Boolean;
    VAR
      AdviceOrderLine@1100528401 : Record 11012055;
      CommentLineJobText@1100528400 : Record 11020634;
      PurchaseText@1100528402 : Record 11012067;
      PurchCommentLine@1100528405 : Record 43;
      RecRef@1100528403 : RecordRef;
      RID@1100528404 : RecordID;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Advice Order":
          BEGIN
            SetFilterOnCommentLineJobText(CommentLineJobText);
            CommentLinesExist := NOT CommentLineJobText.ISEMPTY;
          END;
        "Document Type"::"Purchase Action":
          BEGIN
            SetFilterOnPurchaseText(PurchaseText);
            CommentLinesExist := NOT PurchaseText.ISEMPTY;
          END;
        ELSE BEGIN
          SetFilterOnPurchCommentLine(PurchCommentLine);
          CommentLinesExist := NOT PurchCommentLine.ISEMPTY;
        END;
      END;
    END;

    LOCAL PROCEDURE SetFilterOnCommentLineJobText@1100528433(VAR CommentLineJobText@1100528401 : Record 11020634);
    VAR
      AdviceOrderLine@1100528406 : Record 11012055;
      RecRef@1100528402 : RecordRef;
      RID@1100528400 : RecordID;
    BEGIN
      IF Type = Type::Project THEN BEGIN
        IF AdviceOrderLine.GET(
          AdviceOrderLine."Record Type"::Project, "Type No.", '', "Document Line No.")
        THEN;
      END ELSE BEGIN
        IF Type = Type::"Service Order" THEN BEGIN
          IF AdviceOrderLine.GET(
            AdviceOrderLine."Record Type"::ServOrder, '', "Type No.", "Document Line No.")
          THEN;
        END;
      END;
      RecRef.GETTABLE(AdviceOrderLine);
      RID := RecRef.RECORDID;
      CommentLineJobText.FILTERGROUP(2);
      CommentLineJobText.SETRANGE("Table Name", CommentLineJobText."Table Name"::"Advice Order");
      CommentLineJobText.SETFILTER("Record ID", FORMAT(RID));
      CommentLineJobText.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE SetFilterOnPurchaseText@1100528434(VAR PurchaseText@1100528401 : Record 11012067);
    BEGIN
      PurchaseText.SETRANGE("Line Type", PurchaseText."Line Type"::"Project Purchase Action");
      PurchaseText.SETRANGE("No.", "Type No.");
      PurchaseText.SETRANGE("Purchase Action", "Document No.");
    END;

    LOCAL PROCEDURE SetFilterOnPurchCommentLine@1100528439(VAR PurchCommentLine@1100528401 : Record 43);
    BEGIN
      PurchCommentLine.SETRANGE("Document Type", GetPurchCommentDocumentType);
      PurchCommentLine.SETRANGE("No.", "Document No.");
    END;

    LOCAL PROCEDURE GetPurchCommentDocumentType@1100528414() DocumentType : Integer;
    VAR
      PurchCommentLine@1100528400 : Record 43;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Posted Invoice":
          DocumentType := PurchCommentLine."Document Type"::"Posted Invoice";
        "Document Type"::"Posted Credit Memo":
          DocumentType := PurchCommentLine."Document Type"::"Posted Credit Memo";
        "Document Type"::"Purchase Quote":
          DocumentType := PurchCommentLine."Document Type"::Quote;
        "Document Type"::Order:
          DocumentType := PurchCommentLine."Document Type"::Order;
        "Document Type"::Invoice:
          DocumentType := PurchCommentLine."Document Type"::Invoice;
        "Document Type"::"Credit Memo":
          DocumentType := PurchCommentLine."Document Type"::"Credit Memo";
      END;
    END;

    PROCEDURE ShowConsentLinesOfDocument@1100528410();
    VAR
      ConsentLine@1100528401 : Record 11012226;
      ConsentLineList@1100528400 : Page 11071870;
    BEGIN
      ConsentLine.SETRANGE("Document Type", "Document Type");
      ConsentLine.SETRANGE("Document No.", "Document No.");
      IF "Document Type" IN ["Document Type"::"Advice Order", "Document Type"::"Purchase Action"] THEN BEGIN
        ConsentLine.SETRANGE("Document Line No.", "Document Line No.");
        ConsentLine.SETRANGE(Type, Type);
        ConsentLine.SETRANGE("Type No.", "Type No.");
      END;
      ConsentLineList.SETTABLEVIEW(ConsentLine);
      ConsentLine.SETRANGE("User ID", "User ID");
      IF ConsentLine.FINDFIRST THEN
        ConsentLineList.SETRECORD(ConsentLine);
      ConsentLineList.RUN;
    END;

    PROCEDURE ShowConsentRule@1100528411();
    VAR
      ConsentRule@1100528401 : Record 11012227;
      ConsentRules@1100528400 : Page 11071877;
    BEGIN
      IF ConsentRule.GET("Consent Rule Line No.") THEN BEGIN
        ConsentRule.SETRANGE("Line No.", "Consent Rule Line No.");
        ConsentRules.SETRECORD(ConsentRule);
        ConsentRules.RUNMODAL;
      END;
    END;

    PROCEDURE ValidateCommentAdm@1100528412();
    VAR
      ConsentLine@1100528400 : Record 11012226;
    BEGIN
      IF ConsentLine.GET(
        "Document Type","Document No.","Document Line No.","User ID","Consenter Group Code",Type,"Type No.")
      THEN BEGIN
        ConsentLine."Comment adm" := "Comment adm";
        ConsentLine.MODIFY;
      END;
    END;

    PROCEDURE GetNoOfDetailLines@1100528413() : Integer;
    VAR
      TempConsentLine@1100528401 : TEMPORARY Record 11012226;
      ConsentManagement@1100528400 : Codeunit 11012132;
    BEGIN
      ConsentManagement.FillTempDetailedConsentLinesForCompressedLine(TempConsentLine, Rec);
      EXIT(TempConsentLine.COUNT);
    END;

    PROCEDURE UpdateDocument@1100528415();
    VAR
      ConsentManagement@1100528400 : Codeunit 11012132;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Posted Invoice":
          ConsentManagement.UpdateConsentPurchaseInvoice(Rec);
        "Document Type"::"Posted Credit Memo":
          ConsentManagement.UpdateConsentCredPurchInvoice(Rec);
        "Document Type"::"Purchase Quote", "Document Type"::Order:
          ConsentManagement.UpdateConsentPurchHeader(Rec);
        "Document Type"::"Advice Order":
          ConsentManagement.UpdateConsentAdviceOrderLine(Rec);
        "Document Type"::"Purchase Action":
          ConsentManagement.UpdateConsentPurchaseAction(Rec);
      END;
    END;

    PROCEDURE EditConsentLinesFromDetailedConsentPage@1100528416();
    VAR
      ConsentLine@1100528404 : Record 11012226;
      CurrentConsentLine@1100528405 : Record 11012226;
      ConsentManagement@1100528406 : Codeunit 11012132;
      ConsentLines@1100528403 : Page 11071869;
    BEGIN
      ConsentLine.SETRANGE("Document Type", "Document Type");
      ConsentLine.SETRANGE("Document No.", "Document No.");
      ConsentLine.SETRANGE("Document Line No.", "Document Line No.");
      ConsentLine.SETRANGE(Type, Type);
      ConsentLine.SETRANGE("Type No.", "Type No.");
      ConsentLines.SETTABLEVIEW(ConsentLine);
      ConsentLines.SetDefaults(TRUE, "Vendor No.", Process, Type, "Type No.", "Document Line No.");
      ConsentLines.SetHandledBy("Handled By");
      ConsentLines.RUNMODAL;

      //Refresh detailed consent page
      CurrentConsentLine := Rec;
      IF FINDSET THEN
        REPEAT
          IF ConsentManagement.LowerLevelExists(Rec) AND
             IsTemporary
          THEN
            DELETE;
        UNTIL NEXT = 0;
      Rec := CurrentConsentLine;
    END;

    PROCEDURE FillInputConsentOfAllTempConsentLines@1100528417();
    VAR
      CurrentConsentLine@1100528400 : Record 11012226;
    BEGIN
      CurrentConsentLine := Rec;
      IF FINDSET THEN
        REPEAT
          VALIDATE("Input Consent", TRUE);
          MODIFY;
        UNTIL NEXT = 0;
      FindCurrentConsentLine(CurrentConsentLine);
    END;

    PROCEDURE ClearAllTempConsentLines@1100528418();
    VAR
      CurrentConsentLine@1100528400 : Record 11012226;
    BEGIN
      CurrentConsentLine := Rec;
      IF FINDSET THEN
        REPEAT
          "Input Consent" := FALSE;
          "Input Return to Previous" := FALSE;
          "Input Deny" := FALSE;
          MODIFY;
        UNTIL NEXT = 0;
      FindCurrentConsentLine(CurrentConsentLine);
    END;

    LOCAL PROCEDURE FindCurrentConsentLine@1100528419(CurrentConsentLine@1100528400 : Record 11012226) : Boolean;
    BEGIN
      "Document Type" := CurrentConsentLine."Document Type";
      "Document No." := CurrentConsentLine."Document No.";
      "Document Line No." := CurrentConsentLine."Document Line No.";
      "User ID" := CurrentConsentLine."User ID";
      "Consenter Group Code" := CurrentConsentLine."Consenter Group Code";
      Type := CurrentConsentLine.Type;
      "Type No." := CurrentConsentLine."Type No.";
      IF FIND THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetTotalAmountOfDocument@1100528429() AmountLCY : Decimal;
    VAR
      Element@1100528400 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528403 : Code[20];
      ShortcutDimCode@1100528402 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[50];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528404 : Decimal;
    BEGIN
      GetDocumentData(
        AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
    END;

    PROCEDURE GetProjectNo@1100528420() : Code[20];
    BEGIN
      IF Type = Type::Project THEN
        EXIT("Type No.");
    END;

    PROCEDURE GetProjectDescription@1100528441() : Text[50];
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF Type = Type::Project THEN
        IF Job.GET("Type No.") THEN
          EXIT(Job.Description);
    END;

    PROCEDURE GetElement@1100528421() Element : Code[20];
    VAR
      AmountLCY@1100528403 : Decimal;
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[50];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528404 : Decimal;
    BEGIN
      GetDocumentData(
        AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
    END;

    PROCEDURE GetProjectManager@1100528422() : Code[20];
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF Type = Type::Project THEN
        IF Job.GET("Type No.") THEN
          EXIT(Job."Project Manager");
    END;

    PROCEDURE GetNameProjectManager@1100528432() : Text[100];
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF Type = Type::Project THEN
        IF Job.GET("Type No.") THEN BEGIN
          Job.CALCFIELDS("Name Project Manager");
          EXIT(Job."Name Project Manager");
        END
    END;

    PROCEDURE GetServiceOrderNo@1100528423() : Code[20];
    BEGIN
      IF Type = Type::"Service Order" THEN
        EXIT("Type No.");
    END;

    PROCEDURE GetServiceOrderDescription@1100528445() : Text[50];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      IF Type = Type::"Service Order" THEN
        IF ServiceOrder.GET("Type No.") THEN
          EXIT(ServiceOrder.Description);
    END;

    PROCEDURE GetServiceOrderKind@1100528447() : Code[10];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      IF Type = Type::"Service Order" THEN
        IF ServiceOrder.GET("Type No.") THEN
          EXIT(ServiceOrder."Order Kind");
    END;

    PROCEDURE GetServiceOrderManager@1100528424() : Code[10];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      IF Type = Type::"Service Order" THEN
        IF ServiceOrder.GET("Type No.") THEN
          EXIT(ServiceOrder."Order Manager");
    END;

    PROCEDURE GetServiceOrderManagerName@1100528453() : Text[50];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      IF Type = Type::"Service Order" THEN
        IF ServiceOrder.GET("Type No.") THEN BEGIN
          ServiceOrder.CALCFIELDS("Order Manager Name");
          EXIT(ServiceOrder."Order Manager Name");
        END;
    END;

    PROCEDURE GetServiceContractNo@1100528435() : Code[20];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
    BEGIN
      IF Type = Type::"Service Order" THEN
        IF ServiceOrder.GET("Type No.") THEN
          EXIT(ServiceOrder."Service Contract No.");
    END;

    PROCEDURE GetServiceContractManager@1100528437() : Code[10];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
      ServiceContract@1100528401 : Record 11012812;
    BEGIN
      IF Type = Type::"Service Order" THEN
        IF ServiceOrder.GET("Type No.") THEN
          IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN
            EXIT(ServiceContract."Contract Manager");
    END;

    PROCEDURE GetServiceContractManagerName@1100528459() : Text[50];
    VAR
      ServiceOrder@1100528400 : Record 11012823;
      ServiceContract@1100528401 : Record 11012812;
    BEGIN
      IF Type = Type::"Service Order" THEN
        IF ServiceOrder.GET("Type No.") THEN
          IF ServiceContract.GET(ServiceOrder."Service Contract No.") THEN BEGIN
            ServiceContract.CALCFIELDS("Contract Manager Name");
            EXIT(ServiceContract."Contract Manager Name");
          END;
    END;

    PROCEDURE GetGLAccountNo@1100528425() GLAccountNo : Code[20];
    VAR
      AmountLCY@1100528403 : Decimal;
      Element@1100528401 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      ShortcutDimCode@1100528402 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[50];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528404 : Decimal;
    BEGIN
      GetDocumentData(
        AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
    END;

    PROCEDURE GetRelatedPurchOrderNo@1100529100() RelatedPurchOrderNo : Code[20];
    VAR
      AmountLCY@1100529106 : Decimal;
      Element@1100529105 : Code[20];
      GLAccountNo@1100529103 : Code[20];
      ShortcutDimCode@1100529102 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100529107 : Text[50];
      DocumentLineQuantity@1100529101 : Decimal;
      DocumentLineAmountLCY@1100529100 : Decimal;
    BEGIN
      GetDocumentData(
        AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
    END;

    PROCEDURE GetShortcutDimCode@1100528427(I@1100528407 : Integer) : Code[20];
    VAR
      AmountLCY@1100528404 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528400 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[50];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528401 : Decimal;
    BEGIN
      GetDocumentData(
        AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
      EXIT(ShortcutDimCode[I]);
    END;

    PROCEDURE GetDocumentLineDescription@1100528455() DocumentLineDescription : Text[50];
    VAR
      AmountLCY@1100528404 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineQuantity@1100528405 : Decimal;
      DocumentLineAmountLCY@1100528400 : Decimal;
    BEGIN
      GetDocumentData(
        AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
    END;

    PROCEDURE GetDocumentLineQuantity@1100528456() DocumentLineQuantity : Decimal;
    VAR
      AmountLCY@1100528404 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[50];
      DocumentLineAmountLCY@1100528400 : Decimal;
    BEGIN
      GetDocumentData(
        AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
    END;

    PROCEDURE GetDocumentLineAmount@1100528457() DocumentLineAmountLCY : Decimal;
    VAR
      AmountLCY@1100528404 : Decimal;
      Element@1100528403 : Code[20];
      RelatedPurchOrderNo@1100529100 : Code[20];
      GLAccountNo@1100528402 : Code[20];
      ShortcutDimCode@1100528401 : ARRAY [8] OF Code[20];
      DocumentLineDescription@1100528406 : Text[50];
      DocumentLineQuantity@1100528405 : Decimal;
    BEGIN
      GetDocumentData(
        AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
        DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
    END;

    LOCAL PROCEDURE GetDocumentData@1100528431(VAR AmountLCY@1100528406 : Decimal;VAR Element@1100528401 : Code[20];VAR RelatedPurchOrderNo@1100529100 : Code[20];VAR GLAccountNo@1100528409 : Code[20];VAR ShortcutDimCode@1100528407 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528410 : Text[50];VAR DocumentLineQuantity@1100528411 : Decimal;VAR DocumentLineAmountLCY@1100528412 : Decimal);
    VAR
      PurchaseHeader@1100528400 : Record 38;
      PurchInvHeader@1100528402 : Record 122;
      PurchCrMemoHdr@1100528403 : Record 124;
      AdviceOrderLine@1100528404 : Record 11012055;
      ProjectPurchaseAction@1100528405 : Record 11012026;
    BEGIN
      CLEAR(AmountLCY);
      CLEAR(Element);
      CLEAR(RelatedPurchOrderNo);
      CLEAR(GLAccountNo);
      CLEAR(ShortcutDimCode);
      CLEAR(DocumentLineDescription);
      CLEAR(DocumentLineQuantity);
      CLEAR(DocumentLineAmountLCY);
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Invoice, "Document No.") THEN
            GetPurchaseData(
              PurchaseHeader, AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
        "Document Type"::"Credit Memo":
          IF PurchaseHeader.GET(PurchaseHeader."Document Type"::"Credit Memo", "Document No.") THEN
            GetPurchaseData(
              PurchaseHeader, AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
        "Document Type"::"Posted Invoice":
          IF PurchInvHeader.GET("Document No.") THEN
            GetPurchInvData(
              PurchInvHeader, AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
        "Document Type"::"Posted Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN
            GetPurchCrMemoData(
              PurchCrMemoHdr, AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
        "Document Type"::"Advice Order":
          CASE Type OF
            Type::Project:
              IF AdviceOrderLine.GET(
                AdviceOrderLine."Record Type"::Project, "Type No.", '', "Document Line No.")
              THEN
                GetAdviceOrderLineData(
                  AdviceOrderLine, AmountLCY, Element, ShortcutDimCode,
                  DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
            Type::"Service Order":
              IF AdviceOrderLine.GET(
                AdviceOrderLine."Record Type"::ServOrder, '', "Type No.", "Document Line No.")
              THEN
                GetAdviceOrderLineData(
                  AdviceOrderLine, AmountLCY, Element, ShortcutDimCode,
                  DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
          END;
        "Document Type"::"Purchase Quote":
          IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Quote, "Document No.") THEN
            GetPurchaseData(
              PurchaseHeader, AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
        "Document Type"::Order:
          IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, "Document No.") THEN
            GetPurchaseData(
              PurchaseHeader, AmountLCY, Element, RelatedPurchOrderNo, GLAccountNo, ShortcutDimCode,
              DocumentLineDescription, DocumentLineQuantity, DocumentLineAmountLCY);
        "Document Type"::"Purchase Action":
          IF ProjectPurchaseAction.GET("Type No.", "Document No.") THEN
            GetProjectPurchaseActionData(ProjectPurchaseAction, AmountLCY);
      END;
    END;

    LOCAL PROCEDURE GetPurchaseData@1100528430(PurchaseHeader@1100528401 : Record 38;VAR AmountLCY@1100528400 : Decimal;VAR Element@1100528404 : Code[20];VAR RelatedPurchOrderNo@1100529100 : Code[20];VAR GLAccountNo@1100528407 : Code[20];VAR ShortcutDimCode@1100528405 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528410 : Text[50];VAR DocumentLineQuantity@1100528409 : Decimal;VAR DocumentLineAmountLCY@1100528408 : Decimal);
    VAR
      PurchaseLine@1100528403 : Record 39;
      ConsentManagement@1100528402 : Codeunit 11012132;
      DimensionManagement@1100528406 : Codeunit 408;
      DocumentLineAmount@1100528411 : Decimal;
    BEGIN
      PurchaseHeader.CALCFIELDS(Amount);
      AmountLCY := ConsentManagement.CalcAmountLCY(
        PurchaseHeader.Amount, PurchaseHeader."Currency Code", PurchaseHeader."Currency Factor",
        PurchaseHeader."Job No.", PurchaseHeader."Posting Date");

      IF "Document Line No." = 0 THEN BEGIN
        ShortcutDimCode[1] := PurchaseHeader."Shortcut Dimension 1 Code";
        ShortcutDimCode[2] := PurchaseHeader."Shortcut Dimension 2 Code";
        DimensionManagement.GetShortcutDimensions(PurchaseHeader."Dimension Set ID", ShortcutDimCode);
      END ELSE BEGIN
        IF PurchaseLine.GET(
          PurchaseHeader."Document Type", PurchaseHeader."No.", "Document Line No.")
        THEN BEGIN
          Element := PurchaseLine.Element;
          PurchaseLine.CALCFIELDS("Account No.");
          RelatedPurchOrderNo := PurchaseHeader."Related Purch. Order No.";
          GLAccountNo := PurchaseLine."Account No.";
          ShortcutDimCode[1] := PurchaseLine."Shortcut Dimension 1 Code";
          ShortcutDimCode[2] := PurchaseLine."Shortcut Dimension 2 Code";
          PurchaseLine.ShowShortcutDimCode(ShortcutDimCode);
          DocumentLineDescription := PurchaseLine.Description;
          DocumentLineQuantity := PurchaseLine.Quantity;
          DocumentLineAmount := PurchaseLine.Amount;
        END;
        DocumentLineAmountLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmount, PurchaseHeader."Currency Code", PurchaseHeader."Currency Factor",
          PurchaseHeader."Job No.", PurchaseHeader."Posting Date");
      END;
    END;

    LOCAL PROCEDURE GetPurchInvData@1100528436(PurchInvHeader@1100528401 : Record 122;VAR AmountLCY@1100528400 : Decimal;VAR Element@1100528404 : Code[20];VAR RelatedPurchOrderNo@1100529100 : Code[20];VAR GLAccountNo@1100528407 : Code[20];VAR ShortcutDimCode@1100528406 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528411 : Text[50];VAR DocumentLineQuantity@1100528410 : Decimal;VAR DocumentLineAmountLCY@1100528409 : Decimal);
    VAR
      InvoiceApprovalLine@1100528408 : Record 11012032;
      PurchInvLine@1100528403 : Record 123;
      ConsentManagement@1100528402 : Codeunit 11012132;
      DimensionManagement@1100528405 : Codeunit 408;
      DocumentLineAmount@1100528412 : Decimal;
    BEGIN
      PurchInvHeader.CALCFIELDS(Amount);
      AmountLCY := ConsentManagement.CalcAmountLCY(
        PurchInvHeader.Amount, PurchInvHeader."Currency Code", PurchInvHeader."Currency Factor",
        PurchInvHeader."Job No.", PurchInvHeader."Posting Date");
      RelatedPurchOrderNo := PurchInvHeader."Related Purch. Order No.";

      IF "Document Line No." = 0 THEN BEGIN
        ShortcutDimCode[1] := PurchInvHeader."Shortcut Dimension 1 Code";
        ShortcutDimCode[2] := PurchInvHeader."Shortcut Dimension 2 Code";
        DimensionManagement.GetShortcutDimensions(PurchInvHeader."Dimension Set ID", ShortcutDimCode);
      END ELSE BEGIN
        IF InvoiceApprovalLine.GET(
          PurchInvHeader."Journal Template", InvoiceApprovalLine."Document Type"::"Purchase Invoice",
          PurchInvHeader."No.", "Document Line No.")
        THEN BEGIN
          Element := InvoiceApprovalLine.Element;
          GLAccountNo := InvoiceApprovalLine."Account No.";
          ShortcutDimCode[1] := InvoiceApprovalLine."Shortcut Dimension 1 Code";
          ShortcutDimCode[2] := InvoiceApprovalLine."Shortcut Dimension 2 Code";
          InvoiceApprovalLine.ShowShortcutDimCode(ShortcutDimCode);
          DocumentLineDescription := InvoiceApprovalLine.Description;
          DocumentLineQuantity := InvoiceApprovalLine.Quantity;
          DocumentLineAmount := InvoiceApprovalLine.Amount;
        END ELSE
          IF PurchInvLine.GET(
            PurchInvHeader."No.", "Document Line No.")
          THEN BEGIN
            Element := PurchInvLine.Element;
            PurchInvLine.CALCFIELDS("Account No.");
            GLAccountNo := PurchInvLine."Account No.";
            ShortcutDimCode[1] := PurchInvLine."Shortcut Dimension 1 Code";
            ShortcutDimCode[2] := PurchInvLine."Shortcut Dimension 2 Code";
            PurchInvLine.ShowShortcutDimCode(ShortcutDimCode);
            DocumentLineDescription := PurchInvLine.Description;
            DocumentLineQuantity := PurchInvLine.Quantity;
            DocumentLineAmount := PurchInvLine.Amount;
          END;
        DocumentLineAmountLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmount, PurchInvHeader."Currency Code", PurchInvHeader."Currency Factor",
          PurchInvHeader."Job No.", PurchInvHeader."Posting Date");
      END;
    END;

    LOCAL PROCEDURE GetPurchCrMemoData@1100528438(PurchCrMemoHdr@1100528401 : Record 124;VAR AmountLCY@1100528400 : Decimal;VAR Element@1100528403 : Code[20];VAR RelatedPurchOrderNo@1100529100 : Code[20];VAR GLAccountNo@1100528407 : Code[20];VAR ShortcutDimCode@1100528406 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528411 : Text[50];VAR DocumentLineQuantity@1100528410 : Decimal;VAR DocumentLineAmountLCY@1100528409 : Decimal);
    VAR
      InvoiceApprovalLine@1100528408 : Record 11012032;
      PurchCrMemoLine@1100528404 : Record 125;
      ConsentManagement@1100528402 : Codeunit 11012132;
      DimensionManagement@1100528405 : Codeunit 408;
      DocumentLineAmount@1100528412 : Decimal;
    BEGIN
      PurchCrMemoHdr.CALCFIELDS(Amount);
      AmountLCY := ConsentManagement.CalcAmountLCY(
        PurchCrMemoHdr.Amount, PurchCrMemoHdr."Currency Code", PurchCrMemoHdr."Currency Factor",
        PurchCrMemoHdr."Job No.", PurchCrMemoHdr."Posting Date");
      RelatedPurchOrderNo := PurchCrMemoHdr."Related Purch. Order No.";

      IF "Document Line No." = 0 THEN BEGIN
        ShortcutDimCode[1] := PurchCrMemoHdr."Shortcut Dimension 1 Code";
        ShortcutDimCode[2] := PurchCrMemoHdr."Shortcut Dimension 2 Code";
        DimensionManagement.GetShortcutDimensions(PurchCrMemoHdr."Dimension Set ID", ShortcutDimCode);
      END ELSE BEGIN
        IF InvoiceApprovalLine.GET(
          PurchCrMemoHdr."Journal Template", InvoiceApprovalLine."Document Type"::"Credit Memo",
          PurchCrMemoHdr."No.", "Document Line No.")
        THEN BEGIN
          Element := InvoiceApprovalLine.Element;
          GLAccountNo := InvoiceApprovalLine."Account No.";
          ShortcutDimCode[1] := InvoiceApprovalLine."Shortcut Dimension 1 Code";
          ShortcutDimCode[2] := InvoiceApprovalLine."Shortcut Dimension 2 Code";
          InvoiceApprovalLine.ShowShortcutDimCode(ShortcutDimCode);
          DocumentLineDescription := InvoiceApprovalLine.Description;
          DocumentLineQuantity := InvoiceApprovalLine.Quantity;
          DocumentLineAmount := InvoiceApprovalLine.Amount;
        END ELSE
          IF PurchCrMemoLine.GET(
            PurchCrMemoHdr."No.", "Document Line No.")
          THEN BEGIN
            Element := PurchCrMemoLine.Element;
            PurchCrMemoLine.CALCFIELDS("Account No.");
            GLAccountNo := PurchCrMemoLine."Account No.";
            ShortcutDimCode[1] := PurchCrMemoLine."Shortcut Dimension 1 Code";
            ShortcutDimCode[2] := PurchCrMemoLine."Shortcut Dimension 2 Code";
            PurchCrMemoLine.ShowShortcutDimCode(ShortcutDimCode);
            DocumentLineDescription := PurchCrMemoLine.Description;
            DocumentLineQuantity := PurchCrMemoLine.Quantity;
            DocumentLineAmount := PurchCrMemoLine.Amount;
          END;
        DocumentLineAmountLCY := ConsentManagement.CalcAmountLCY(
          DocumentLineAmount, PurchCrMemoHdr."Currency Code", PurchCrMemoHdr."Currency Factor",
          PurchCrMemoHdr."Job No.", PurchCrMemoHdr."Posting Date");
      END;
    END;

    LOCAL PROCEDURE GetAdviceOrderLineData@1100528443(AdviceOrderLine@1100528401 : Record 11012055;VAR AmountLCY@1100528400 : Decimal;VAR Element@1100528402 : Code[20];VAR ShortcutDimCode@1100528404 : ARRAY [8] OF Code[20];VAR DocumentLineDescription@1100528407 : Text[50];VAR DocumentLineQuantity@1100528406 : Decimal;VAR DocumentLineAmount@1100528405 : Decimal);
    BEGIN
      AmountLCY := AdviceOrderLine.Amount;
      Element := AdviceOrderLine.Element;
      ShortcutDimCode[1] := AdviceOrderLine."Global Dimension 1 Code";
      ShortcutDimCode[2] := AdviceOrderLine."Cost Object";
      DocumentLineDescription := AdviceOrderLine.Description;
      DocumentLineQuantity := AdviceOrderLine."Quantity (Advice)";
      DocumentLineAmount := AdviceOrderLine.Amount;
    END;

    LOCAL PROCEDURE GetProjectPurchaseActionData@1100528444(ProjectPurchaseAction@1100528401 : Record 11012026;VAR AmountLCY@1100528400 : Decimal);
    VAR
      ConsentManagement@1100528402 : Codeunit 11012132;
    BEGIN
      AmountLCY := ConsentManagement.CalcPurchaseActionAmount(ProjectPurchaseAction);
    END;

    PROCEDURE ShowJobCard@1100528428(JobNo@1100528400 : Code[20]);
    VAR
      Job@1100528401 : Record 11072003;
    BEGIN
      IF Job.GET(JobNo) THEN BEGIN
        Job.SETRECFILTER;
        PAGE.RUN(PAGE::"Job Card", Job);
      END;
    END;

    PROCEDURE ShowServiceOrderCard@1100528440(ServiceOrderNo@1100528400 : Code[20]);
    VAR
      ServiceOrder@1100528401 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(ServiceOrderNo) THEN BEGIN
        ServiceOrder.SETRECFILTER;
        PAGE.RUN(PAGE::"Service Order (General)", ServiceOrder);
      END;
    END;

    PROCEDURE IsManualConsentLineCreatedByCurrentUser@1100525002() : Boolean;
    VAR
      ConsentLine@1100525000 : Record 11012226;
    BEGIN
      IF (USERID = "Created by") AND
         Manual AND
         (Level = 0)
      THEN
        EXIT(TRUE);

      IF NOT IsTemporary AND
         ("Creation  Date" = 0D) AND
         ("Created by" = '')
      THEN
        EXIT(TRUE); //Consent line does not exist in database yet.
    END;

    LOCAL PROCEDURE UnprocessedLinesPresent@1100528446() UnprocLinesPresent : Boolean;
    VAR
      OrigFilter@1100528400 : Text;
    BEGIN
      OrigFilter := GETFILTER("Input Consent");
      SETRANGE("Input Consent", TRUE);
      IF NOT ISEMPTY THEN
        UnprocLinesPresent := TRUE;
      SETFILTER("Input Consent", OrigFilter);

      OrigFilter := GETFILTER("Input Return to Previous");
      SETRANGE("Input Return to Previous", TRUE);
      IF NOT ISEMPTY THEN
        UnprocLinesPresent := TRUE;
      SETFILTER("Input Return to Previous", OrigFilter);

      OrigFilter := GETFILTER("Input Deny");
      SETRANGE("Input Deny", TRUE);
      IF NOT ISEMPTY THEN
        UnprocLinesPresent := TRUE;
      SETFILTER("Input Deny", OrigFilter);
    END;

    BEGIN
    END.
  }
}

