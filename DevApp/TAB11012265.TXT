OBJECT Table 11012265 Installment Overview
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lvInstallmentMotRec@1100485000 : Record 11012471;
               lvInstallmentOvRec@1100485001 : Record 11012265;
               lvNextNo@1100485002 : Integer;
             BEGIN
               //Select the right installment motivation and take care of sequential numbering
               lvInstallmentOvRec.SETRANGE("Project No.", "Project No.");
               lvInstallmentOvRec.SETRANGE(Principal, Principal);
               IF NOT lvInstallmentOvRec.FINDLAST THEN BEGIN
                 lvInstallmentOvRec."Last Motivation Date" := 0D;
                 lvNextNo := 1;
               END ELSE BEGIN
                 lvNextNo := lvInstallmentOvRec."No." + 1;
               END;
               IF "No." = 0 THEN
                 "No." := lvNextNo;
               IF lvNextNo <> "No." THEN
                 ERROR(Text004, lvNextNo);
               lvInstallmentMotRec.SETRANGE("Project No.", "Project No.");
               lvInstallmentMotRec.SETRANGE(Principal, Principal);
               lvInstallmentMotRec.SETFILTER("Production Date", '>%1', lvInstallmentOvRec."Last Motivation Date");
               lvInstallmentMotRec.SETRANGE(Status, lvInstallmentMotRec.Status::Approved); //mg, 13-10-11: M29363
               IF lvInstallmentMotRec.FINDFIRST THEN
                 "First Motivation Date" := lvInstallmentMotRec."Production Date"
               ELSE
                 ERROR(Text001);
               IF lvInstallmentMotRec.FINDLAST THEN
                 "Last Motivation Date" := lvInstallmentMotRec."Production Date";
               //CreateInstallOverviewLines;  //*DP00089.o
             END;

    OnDelete=VAR
               lvInstallmOvLinesRec@1100485000 : Record 11012266;
             BEGIN
               lvInstallmOvLinesRec.SETRANGE("Project No.","Project No.");
               lvInstallmOvLinesRec.SETRANGE(Principal,Principal);
               lvInstallmOvLinesRec.SETRANGE("Installment Overview","No.");
               lvInstallmOvLinesRec.DELETEALL;
             END;

    CaptionML=ENU=Installment Overview;
    LookupPageID=Page11020557;
    DrillDownPageID=Page11020557;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=ENU=Project No.;
                                                   NotBlank=Yes }
    { 20  ;   ;Principal           ;Code20        ;TableRelation="Project Principal".Principal WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Principal;
                                                   NotBlank=Yes }
    { 30  ;   ;No.                 ;Integer       ;CaptionML=ENU=No. }
    { 40  ;   ;First Motivation Date;Date         ;TableRelation="Installment Motivation"."Production Date";
                                                   CaptionML=ENU=From Installment Motivation }
    { 50  ;   ;Last Motivation Date;Date          ;TableRelation="Installment Motivation"."Production Date";
                                                   CaptionML=ENU=To Installment Motivation }
    { 60  ;   ;First Motivation Description;Text30;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Installment Motivation".Comment WHERE (Project No.=FIELD(Project No.),
                                                                                                              Principal=FIELD(Principal),
                                                                                                              Production Date=FIELD(First Motivation Date)));
                                                   CaptionML=ENU=From Installment Motivation Description;
                                                   Editable=No }
    { 70  ;   ;Last Motivation Description;Text30 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Installment Motivation".Comment WHERE (Project No.=FIELD(Project No.),
                                                                                                              Principal=FIELD(Principal),
                                                                                                              Production Date=FIELD(Last Motivation Date)));
                                                   CaptionML=ENU=To Installment Motivation Description;
                                                   Editable=No }
    { 80  ;   ;Installments Created;Boolean       ;CaptionML=ENU=Installments Created;
                                                   Editable=No }
    { 90  ;   ;Installments Created on;Date       ;CaptionML=ENU=Installments Created on;
                                                   Editable=No }
    { 100 ;   ;Production Value Cum. (LCY);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Normal)));
                                                   CaptionML=ENU=Production Value Cumulative (LCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 101 ;   ;Production Value Cum. (FCY);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (FCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Normal)));
                                                   CaptionML=ENU=Production Value Cumulative (FCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 110 ;   ;Excess Prod. Value Cum. (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Excess)));
                                                   CaptionML=ENU=Excess Prod. Value Cumulative (LCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 111 ;   ;Excess Prod. Value Cum. (FCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (FCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Excess)));
                                                   CaptionML=ENU=Excess Prod. Value Cumulative (FCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 120 ;   ;Extra Prod. Value Cum. (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Extra)));
                                                   CaptionML=ENU=Extra Production Value Cumulative (LCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 121 ;   ;Extra Prod. Value Cum. (FCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (FCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Extra)));
                                                   CaptionML=ENU=Extra Production Value Cumulative (FCY);
                                                   Description=DP00886;
                                                   Editable=No }
    { 130 ;   ;Final Installment Created;Boolean  ;CaptionML=ENU=Final Installment Created;
                                                   Editable=No }
    { 140 ;   ;Final Installment Created on;Date  ;CaptionML=ENU=Final Installment Created on;
                                                   Editable=No }
    { 200 ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Currency Code" WHERE (Project No.=FIELD(Project No.),
                                                                                                                 Principal=FIELD(Principal)));
                                                   TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Description=DP00886;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Principal,No.               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100485000 : TextConst 'ENU=There is no Installment Motivation that is not part of an Installment Overview yet.';
      Text002@1100485001 : TextConst 'ENU=%1 - %2';
      Text003@1100485002 : TextConst 'ENU=Final Installment';
      Text004@1100485003 : TextConst 'ENU=Installment OVerviews must be numbered sequential. The next free number is %1.';
      Text007@1100529001 : TextConst 'ENU="Not allowed, already %1 present "';
      Text008@1100528800 : TextConst 'ENU=Invoicing with Fixed Installment Amounts is not possible when using different VAT-percentages';
      Text009@1210190000 : TextConst 'ENU=Fixed Installment Amount may not be equal to 0';
      VATCalcOnly@1210190001 : Boolean;
      VATAmountToInvoice@1210190002 : Decimal;

    PROCEDURE RunCreateInstallOverviewLines@1100529000();
    VAR
      InstallmOvLine@1100529000 : Record 11012266;
      InstallmMot@1100529003 : Record 11012471;
      ProdDateSelection@1100529001 : Report 11012181;
      ProdDateTo@1100529002 : Date;
    BEGIN
      //*DP00089.n
      TESTFIELD("Project No.");
      TESTFIELD(Principal);
      TESTFIELD("No.");

      InstallmOvLine.SETRANGE("Project No.","Project No.");
      InstallmOvLine.SETRANGE(Principal,Principal);
      InstallmOvLine.SETRANGE("Installment Overview","No.");
      IF NOT InstallmOvLine.ISEMPTY THEN
        ERROR(Text007, InstallmOvLine.TABLECAPTION);

      ProdDateSelection.SetSelections(Rec);
      ProdDateSelection.RUNMODAL;
      ProdDateTo := ProdDateSelection.GetProdDateTo();
      IF ProdDateTo = 0D THEN
        ERROR('');
      IF ProdDateTo < "Last Motivation Date" THEN BEGIN
        InstallmMot.SETRANGE("Project No.", "Project No.");
        InstallmMot.SETRANGE(Principal, Principal);
        InstallmMot.SETRANGE("Production Date", "First Motivation Date", "Last Motivation Date");
        InstallmMot.FILTERGROUP(1);
        InstallmMot.SETFILTER("Production Date", '<=%1', ProdDateTo);
        InstallmMot.FILTERGROUP(0);
        InstallmMot.SETRANGE(Status, InstallmMot.Status::Approved);
        IF NOT InstallmMot.FINDLAST THEN
          ERROR('');
        "Last Motivation Date" := InstallmMot."Production Date";
        MODIFY;
      END;
      CreateInstallOverviewLines();
    END;

    PROCEDURE CreateInstallOverviewLines@1100485000();
    VAR
      lvInstallmMotLineRec@1100485000 : Record 11012472;
      lvInstallmOvLineRec@1100485001 : Record 11012266;
      lvPrevInstallmOvLineRec@1100485010 : Record 11012266;
      lvLinePrev@1100485002 : Record 11012472;
      lvProjPrinRec@1100485005 : Record 11012005;
      lvTendElemRec@1100485014 : Record 11012470;
      lvRAWCU@1100485008 : Codeunit 11012164;
      lvNormalProd@1100485004 : Decimal;
      SettledExcessProd@1100485003 : Decimal;
      lvPrevNormalProd@1100485007 : Decimal;
      PrevSettledExcessProd@1100485006 : Decimal;
      lvProdValThisPeriod@1100485009 : Decimal;
      lvContractAmount@1100485015 : Decimal;
      TotalExcessProd@1210190000 : Decimal;
      PrevTotalExcessProd@1210190001 : Decimal;
      AmountExceedingMaximum@1210190002 : Decimal;
    BEGIN
      lvProdValThisPeriod := 0;
      lvInstallmMotLineRec.SETRANGE("Project No.", "Project No.");
      lvInstallmMotLineRec.SETRANGE(Principal, Principal);
      lvInstallmMotLineRec.SETRANGE("Production Date", "Last Motivation Date");
      lvInstallmMotLineRec.SETFILTER("Extension Contract", '%1', '');
      lvInstallmMotLineRec.SETFILTER(Type, '<>%1&<>%2', lvInstallmMotLineRec.Type::Surcharge, lvInstallmMotLineRec.Type::Execution);
      IF lvInstallmMotLineRec.FINDFIRST THEN BEGIN
        WITH lvInstallmOvLineRec DO BEGIN
          //search last installment motivation line of the previous installment overview
          lvLinePrev.SETRANGE("Project No.", Rec."Project No.");
          lvLinePrev.SETRANGE(Principal, Rec.Principal);
          lvLinePrev.SETFILTER("Production Date", '<%1', "First Motivation Date");
          REPEAT
            //first insert line for normal consumption
            lvLinePrev.SETRANGE("Extension Contract", lvInstallmMotLineRec."Extension Contract");
            lvLinePrev.SETRANGE("Tender Paragraph No.", lvInstallmMotLineRec."Tender Paragraph No.");
            IF NOT lvLinePrev.FINDLAST THEN BEGIN
              lvLinePrev."Production Cumulative" := 0;
              lvLinePrev."Production Value Cum. (LCY)" := 0;
              lvLinePrev."Production Value Cum. (FCY)" := 0;  //DP00886
            END;
            "Project No." := Rec."Project No.";
            Principal := Rec.Principal;
            "Installment Overview" := Rec."No.";
            "Tender Paragraph" := lvInstallmMotLineRec."Tender Paragraph No.";
            "Entry Type" := "Entry Type"::Normal;
            //cumulatives of last motivation are the ones we want here
            SetCurrencyCode;  //DP00886
            "Production Value Cum. (LCY)" := lvInstallmMotLineRec."Production Value Cum. (LCY)";
            "Production Value Cum. (FCY)" := lvInstallmMotLineRec."Production Value Cum. (FCY)";  //DP00886
            "Production Cumulative" := lvInstallmMotLineRec."Production Cumulative";
            lvRAWCU.DetermineExcessProd(
              lvInstallmMotLineRec, lvNormalProd ,SettledExcessProd, TotalExcessProd);
            lvRAWCU.DetermineExcessProd(
              lvLinePrev, lvPrevNormalProd, PrevSettledExcessProd, PrevTotalExcessProd);
            Production := lvNormalProd - lvPrevNormalProd + TotalExcessProd - PrevTotalExcessProd;
            //determine total amount for determination profit & risk
            lvInstallmMotLineRec.CALCFIELDS(Type);
            IF lvInstallmMotLineRec.Type = lvInstallmMotLineRec.Type::Normal THEN BEGIN
              //determine total amount of installment overview for determination of profit & risk entry.
              //profit * risk not over contributions
              IF lvInstallmMotLineRec."Currency Code" <> '' THEN  //DP00886
                lvProdValThisPeriod += lvInstallmMotLineRec."Production Value Cum. (FCY)" - lvLinePrev."Production Value Cum. (FCY)"
              ELSE
                lvProdValThisPeriod += lvInstallmMotLineRec."Production Value Cum. (LCY)" - lvLinePrev."Production Value Cum. (LCY)";
            END;
            INSERT;
            IF (lvInstallmMotLineRec."Excess Prod. Value Cum. (LCY)" <> 0) OR
               (lvInstallmMotLineRec."Excess Prod. Value Cum. (FCY)" <> 0) THEN BEGIN  //DP00886
              CALCFIELDS("Settlement Type");
              CASE "Settlement Type" OF
                "Settlement Type"::Settling:
                  BEGIN
                    //then insert line for excess
                    "Entry Type" := "Entry Type"::Excess;
                    "Production Value Cum. (LCY)" := lvInstallmMotLineRec."Excess Prod. Value Cum. (LCY)";
                    "Production Value Cum. (FCY)" := lvInstallmMotLineRec."Excess Prod. Value Cum. (FCY)";  //DP00886
                    "Production Cumulative" := SettledExcessProd;
                    Production := SettledExcessProd - PrevSettledExcessProd;
                    INSERT;
                  END;
                "Settlement Type"::"Non Settling":
                  BEGIN
                    //then insert line for extra declarations
                    "Entry Type" := "Entry Type"::Extra;
                    "Production Value Cum. (LCY)" := lvInstallmMotLineRec."Excess Prod. Value Cum. (LCY)";
                    "Production Value Cum. (FCY)" := lvInstallmMotLineRec."Excess Prod. Value Cum. (FCY)";  //DP00886
                    "Production Cumulative" := SettledExcessProd;
                    Production := SettledExcessProd - PrevSettledExcessProd;
                    INSERT;
                    IF TotalExcessProd <> 0 THEN BEGIN
                      "Entry Type" := "Entry Type"::Excess;
                      "Production Value Cum. (LCY)" := 0;
                      "Production Value Cum. (FCY)" := 0;  //DP00886
                      "Production Cumulative" := TotalExcessProd;
                      Production := TotalExcessProd - PrevTotalExcessProd;
                      INSERT;
                    END;
                  END;
              END;
            END;
          UNTIL lvInstallmMotLineRec.NEXT = 0;
        END;
      END;

      //now add execution costs, profit * risk entries
      //production will not be filled or calculated on the installment motivation, but on the installment overview (so here)
      //add profit/risc and execution costs like it is meant in RAW regulations 01.02.03 part 3a
      lvProjPrinRec.GET("Project No.", Principal);
      lvInstallmMotLineRec.SETFILTER(Type, '%1|%2', lvInstallmMotLineRec.Type::Surcharge, lvInstallmMotLineRec.Type::Execution);
      lvRAWCU.CalculateSubTotal(Rec, lvContractAmount);
      IF lvInstallmMotLineRec.FINDFIRST THEN BEGIN
        WITH lvInstallmOvLineRec DO BEGIN
          REPEAT
            lvTendElemRec.SETRANGE("Project No.",lvInstallmMotLineRec."Project No.");
            lvTendElemRec.SETRANGE(Principal,lvInstallmMotLineRec.Principal);
            lvTendElemRec.SETRANGE("Contract No.", lvInstallmMotLineRec."Extension Contract");
            lvTendElemRec.SETRANGE("No.", lvInstallmMotLineRec."Tender Paragraph No.");
            IF NOT lvTendElemRec.FINDFIRST THEN
              lvTendElemRec."Total Amount (LCY)" := 0;
            //Charge these entries in the same ratio, as they are part of the whole
            //Not able to use lvProjPrinRec."Surcharge %" because there can be more then one entry of type Surcharge
            Production := lvProdValThisPeriod * ROUND(lvTendElemRec."Total Amount (LCY)"/lvContractAmount*100, 0.1) / 100; //C000367.n
            Production := ROUND(Production); //C000367.n (T000279)
            "Project No." := Rec."Project No.";
            Principal := Rec.Principal;
            "Installment Overview" := Rec."No.";
            "Tender Paragraph" := lvInstallmMotLineRec."Tender Paragraph No.";
            "Entry Type" := "Entry Type"::Normal;
            SetCurrencyCode;  //DP00886
            "Production Value Cum. (LCY)" := Production;
            VALIDATE("Production Value Cum. (LCY)");  //DP00886
            "Production Cumulative" := Production;
            IF lvPrevInstallmOvLineRec.GET("Project No.",Principal,"Installment Overview" -1,
                "Tender Paragraph","Entry Type") THEN BEGIN
              "Production Value Cum. (LCY)" += lvPrevInstallmOvLineRec."Production Value Cum. (LCY)";
              VALIDATE("Production Value Cum. (LCY)");  //DP00886
              "Production Cumulative" += lvPrevInstallmOvLineRec."Production Cumulative";
            END;
            //call T000306
            IF lvProjPrinRec."Installm.Motivation Method" =
              lvProjPrinRec."Installm.Motivation Method"::"Element Quantity" THEN
            BEGIN
              CALCFIELDS("Element Quantity");
              IF "Production Cumulative" > "Element Quantity" THEN BEGIN
                AmountExceedingMaximum := "Production Cumulative" - "Element Quantity";
                Production -= AmountExceedingMaximum;
                "Production Value Cum. (LCY)" -= AmountExceedingMaximum;
                VALIDATE("Production Value Cum. (LCY)");  //DP00886
                "Production Cumulative" -= AmountExceedingMaximum;
              END;
            END;
            //
            INSERT;
          UNTIL lvInstallmMotLineRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ReCreateInstallOverviewLines@1100485008();
    VAR
      lvInstallmOvLinesRec@1100485000 : Record 11012266;
    BEGIN
      lvInstallmOvLinesRec.SETRANGE("Project No.","Project No.");
      lvInstallmOvLinesRec.SETRANGE(Principal,Principal);
      lvInstallmOvLinesRec.SETRANGE("Installment Overview","No.");
      lvInstallmOvLinesRec.DELETEALL;
      CreateInstallOverviewLines;
    END;

    PROCEDURE Invoiced@1100485002(VATCode@1100525000 : Code[10]) Result : Decimal;
    VAR
      lvInstallment@1100485000 : Record 11012018;
    BEGIN
      CALCFIELDS("Currency Code");  //DP00886
      lvInstallment.SETRANGE("Project No." , "Project No.");
      lvInstallment.SETRANGE(Principal, Principal);
      IF VATCode <> '' THEN
        lvInstallment.SETRANGE("VAT Prod. Posting Group", VATCode);
      IF lvInstallment.FINDSET THEN BEGIN
        REPEAT
          IF "Currency Code" <> '' THEN BEGIN  //DP00886
            Result := Result + lvInstallment."Installment Amount";
          END ELSE BEGIN
            Result := Result + lvInstallment."Installment Amount (LCY)";
          END;
        UNTIL lvInstallment.NEXT = 0;
      END;
      EXIT(Result);
    END;

    PROCEDURE ToInvoice@1100485003() : Decimal;
    BEGIN
      CALCFIELDS("Currency Code");  //DP00886
      IF "Currency Code" <> '' THEN BEGIN  //DP00886
        CALCFIELDS("Excess Prod. Value Cum. (FCY)", "Extra Prod. Value Cum. (FCY)", "Production Value Cum. (FCY)");
        EXIT("Excess Prod. Value Cum. (FCY)" + "Extra Prod. Value Cum. (FCY)" + "Production Value Cum. (FCY)" - Invoiced(''));
      END ELSE BEGIN
        CALCFIELDS("Excess Prod. Value Cum. (LCY)", "Extra Prod. Value Cum. (LCY)", "Production Value Cum. (LCY)");
        EXIT("Excess Prod. Value Cum. (LCY)" + "Extra Prod. Value Cum. (LCY)" + "Production Value Cum. (LCY)" - Invoiced(''));
      END;
    END;

    PROCEDURE VATToInvoice@1210190001() : Decimal;
    BEGIN
      //call T000305
      VATAmountToInvoice := 0;
      VATCalcOnly := TRUE;
      CreateInstallments; //Virtual
      EXIT(VATAmountToInvoice);
    END;

    PROCEDURE GetProductionValue@1100485004(TotalType@1100525000 : Integer) Result : Decimal;
    VAR
      lvInstallmOvRec@1100485000 : Record 11012265;
    BEGIN
      CALCFIELDS("Currency Code");  //DP00886
      IF "Currency Code" <> '' THEN BEGIN  //DP00886
        CALCFIELDS("Production Value Cum. (FCY)");
        Result := "Production Value Cum. (FCY)";
        IF (TotalType <> 0) THEN BEGIN
          IF lvInstallmOvRec.GET("Project No.", Principal, "No."- 1) THEN BEGIN
            lvInstallmOvRec.CALCFIELDS("Production Value Cum. (FCY)");
            Result := Result - lvInstallmOvRec."Production Value Cum. (FCY)";
          END;
        END;
      END ELSE BEGIN
        CALCFIELDS("Production Value Cum. (LCY)");
        Result := "Production Value Cum. (LCY)";
        IF (TotalType <> 0) THEN BEGIN
          IF lvInstallmOvRec.GET("Project No.", Principal, "No."- 1) THEN BEGIN
            lvInstallmOvRec.CALCFIELDS("Production Value Cum. (LCY)");
            Result := Result - lvInstallmOvRec."Production Value Cum. (LCY)";
          END;
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE GetExcessProductionValue@1100485007(TotalType@1100525000 : Integer) Result : Decimal;
    VAR
      lvInstallmOvRec@1100485000 : Record 11012265;
    BEGIN
      CALCFIELDS("Currency Code");  //DP00886
      IF "Currency Code" <> '' THEN BEGIN  //DP00886
        CALCFIELDS("Excess Prod. Value Cum. (FCY)");
        Result := "Excess Prod. Value Cum. (FCY)";
        IF (TotalType <> 0) THEN BEGIN
          IF lvInstallmOvRec.GET("Project No.", Principal, "No."- 1) THEN BEGIN
            lvInstallmOvRec.CALCFIELDS("Excess Prod. Value Cum. (FCY)");
            Result := Result - lvInstallmOvRec."Excess Prod. Value Cum. (FCY)";
          END;
        END;
      END ELSE BEGIN
        CALCFIELDS("Excess Prod. Value Cum. (LCY)");
        Result := "Excess Prod. Value Cum. (LCY)";
        IF (TotalType <> 0) THEN BEGIN
          IF lvInstallmOvRec.GET("Project No.", Principal, "No."- 1) THEN BEGIN
            lvInstallmOvRec.CALCFIELDS("Excess Prod. Value Cum. (LCY)");
            Result := Result - lvInstallmOvRec."Excess Prod. Value Cum. (LCY)";
          END;
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE GetExtraProductionValue@1100485005(TotalType@1100525000 : Integer) Result : Decimal;
    VAR
      lvInstallmOvRec@1100485000 : Record 11012265;
    BEGIN
      CALCFIELDS("Currency Code");  //DP00886
      IF "Currency Code" <> '' THEN BEGIN  //DP00886
        CALCFIELDS("Extra Prod. Value Cum. (FCY)");
        Result := "Extra Prod. Value Cum. (FCY)";
        IF (TotalType <> 0) THEN BEGIN
          IF lvInstallmOvRec.GET("Project No.", Principal, "No."- 1) THEN BEGIN
            lvInstallmOvRec.CALCFIELDS("Extra Prod. Value Cum. (FCY)");
            Result := Result - lvInstallmOvRec."Extra Prod. Value Cum. (FCY)";
          END;
        END;
      END ELSE BEGIN
        CALCFIELDS("Extra Prod. Value Cum. (LCY)");
        Result := "Extra Prod. Value Cum. (LCY)";
        IF (TotalType <> 0) THEN BEGIN
          IF lvInstallmOvRec.GET("Project No.", Principal, "No."- 1) THEN BEGIN
            lvInstallmOvRec.CALCFIELDS("Extra Prod. Value Cum. (LCY)");
            Result := Result - lvInstallmOvRec."Extra Prod. Value Cum. (LCY)";
          END;
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE CreateInstallments@1210190012();
    VAR
      lvProjPrinRec@1100485004 : Record 11012005;
      lvInstallmOvRec@1100485000 : Record 11012265;
      lvInstallmOvLineRec@1100525002 : Record 11012266;
      lvInstallmMotRec@1100485002 : Record 11012471;
      lvInstallmMotLineRec@1100525001 : Record 11012472;
      TenderElementVATSpec@1100525003 : Record 11012476;
      TempInstallmentLines@1100525004 : TEMPORARY Record 11012018;
      VatPostingSetup@1210190000 : Record 325;
      ratio@1100525005 : Decimal;
      TotProdValueRemaining@1100528801 : Decimal;
      FirstVATProdPostingGroup@1100528802 : Code[10];
      VATBaseAmount@1210190001 : Decimal;
      InstallmentAmount@1100525000 : Decimal;
      FixedInstallmentAmount@1100525006 : Decimal;
    BEGIN
      //create installments for project principal, for installment overviews for which this is not done yet
      lvProjPrinRec.GET("Project No.",Principal);
      lvInstallmOvRec.SETRANGE("Project No.","Project No.");
      lvInstallmOvRec.SETRANGE(Principal,Principal);
      lvInstallmOvRec.SETRANGE("No.",0, "No."); //all installment overviews before and this one
      lvInstallmOvRec.SETRANGE("Installments Created", FALSE);
      IF (lvProjPrinRec."Installm.Motivation Method" <> lvProjPrinRec."Installm.Motivation Method"::" ") THEN BEGIN
        IF lvInstallmOvRec.FINDFIRST THEN BEGIN
          REPEAT
            //Put amounts to be invoiced for this motivation in a temp buffer
            TempInstallmentLines.RESET;
            TempInstallmentLines.DELETEALL;
            lvInstallmOvLineRec.SETRANGE("Project No.","Project No.");
            lvInstallmOvLineRec.SETRANGE(Principal,Principal);
            lvInstallmOvLineRec.SETRANGE("Installment Overview", "No.");
            IF lvInstallmOvLineRec.FINDSET THEN BEGIN
              REPEAT
                TenderElementVATSpec.SETRANGE("Project No.", lvInstallmOvLineRec."Project No.");
                TenderElementVATSpec.SETRANGE(Principal, lvInstallmOvLineRec.Principal);
                TenderElementVATSpec.SETRANGE("Contract No.", '');
                TenderElementVATSpec.SETRANGE("Tender Paragraph", lvInstallmOvLineRec."Tender Paragraph");
                IF TenderElementVATSpec.FINDSET THEN BEGIN
                  REPEAT
                    TenderElementVATSpec.CALCFIELDS("Total Amount");
                    ratio := TenderElementVATSpec.Amount/TenderElementVATSpec."Total Amount";
                    lvInstallmMotLineRec.BufferAmountVAT(TempInstallmentLines,
                      lvInstallmOvLineRec."Project No.",
                      lvInstallmOvLineRec.Principal,
                      TenderElementVATSpec."VAT Prod. Posting Group",
                      ratio * lvInstallmOvLineRec."Production Value Cum. (LCY)",
                      ratio * lvInstallmOvLineRec."Production Value Cum. (FCY)");  //DP00886
                  UNTIL TenderElementVATSpec.NEXT = 0;
                END ELSE BEGIN
                  lvInstallmMotLineRec.BufferAmountVAT(TempInstallmentLines,
                    lvInstallmOvLineRec."Project No.",
                    lvInstallmOvLineRec.Principal,
                    lvProjPrinRec."VAT Prod. Posting Group",
                    lvInstallmOvLineRec."Production Value Cum. (LCY)",
                    lvInstallmOvLineRec."Production Value Cum. (FCY)");  //DP00886
                END;
              UNTIL lvInstallmOvLineRec.NEXT = 0;
            END;

            IF VATCalcOnly THEN BEGIN
              IF TempInstallmentLines.FINDSET THEN
                REPEAT
                  //DP00886.sn
                  IF TempInstallmentLines."Currency Code" <> '' THEN
                    InstallmentAmount := TempInstallmentLines."Installment Amount"
                  ELSE
                    InstallmentAmount := TempInstallmentLines."Installment Amount (LCY)";
                  VATBaseAmount := InstallmentAmount - Invoiced(TempInstallmentLines."VAT Prod. Posting Group");
                  //DP00886.en
                  IF VatPostingSetup.GET(
                       lvProjPrinRec."VAT Bus. Posting Group",TempInstallmentLines."VAT Prod. Posting Group") THEN
                    VATAmountToInvoice += ROUND(VATBaseAmount * VatPostingSetup."VAT %" / 100);
                UNTIL TempInstallmentLines.NEXT = 0;
              EXIT;
            END;

            //Create installments for the amounts that are found above
            IF lvProjPrinRec."Invoice Installm.Motivation as" =
               lvProjPrinRec."Invoice Installm.Motivation as"::"Installment per Motivation" THEN BEGIN
              IF TempInstallmentLines.FINDSET THEN BEGIN
                REPEAT
                  //DP00886.sn
                  IF TempInstallmentLines."Currency Code" <> '' THEN
                    InstallmentAmount := TempInstallmentLines."Installment Amount"
                  ELSE
                    InstallmentAmount := TempInstallmentLines."Installment Amount (LCY)";
                  lvInstallmOvRec.CreateInstallmentLine(InstallmentAmount -
                    Invoiced(TempInstallmentLines."VAT Prod. Posting Group"), TempInstallmentLines."VAT Prod. Posting Group",'', FALSE);
                  //DP00886.en
                UNTIL TempInstallmentLines.NEXT = 0;
              END;
            END ELSE BEGIN
              // For RAW we don't support Fixed Amounts
              // dp00109, now also create installments for based on 'Fixed Amounts'
              // dp00109.so
              //lvProjPrinRec.TESTFIELD("Invoice Installm.Motivation as",
              //  lvProjPrinRec."Invoice Installm.Motivation as"::"Installment per Motivation");
              // dp00109.eo
              // dp00109.sn
              FirstVATProdPostingGroup := '';
              TenderElementVATSpec.SETRANGE("Project No.", lvInstallmOvLineRec."Project No.");
              TenderElementVATSpec.SETRANGE(Principal, lvInstallmOvLineRec.Principal);
              TenderElementVATSpec.SETRANGE("Contract No.", '');
              TenderElementVATSpec.SETRANGE("Tender Paragraph", lvInstallmOvLineRec."Tender Paragraph");
              IF TenderElementVATSpec.FINDSET THEN
                REPEAT
                  IF FirstVATProdPostingGroup = '' THEN
                    FirstVATProdPostingGroup := TenderElementVATSpec."VAT Prod. Posting Group";

                  IF FirstVATProdPostingGroup <> TenderElementVATSpec."VAT Prod. Posting Group" THEN
                    ERROR(Text008);

                UNTIL TenderElementVATSpec.NEXT = 0;

              //DP00886.sn
              IF lvProjPrinRec."Currency Code" <> '' THEN
                FixedInstallmentAmount := lvProjPrinRec."Fixed Installment Amount (FCY)"
              ELSE
                FixedInstallmentAmount := lvProjPrinRec."Fixed Installment Amount (LCY)";
              IF FixedInstallmentAmount = 0 THEN
                ERROR(Text009);

              IF TempInstallmentLines."Currency Code" <> '' THEN
                InstallmentAmount := TempInstallmentLines."Installment Amount"
              ELSE
                InstallmentAmount := TempInstallmentLines."Installment Amount (LCY)";
              TotProdValueRemaining := InstallmentAmount - Invoiced(TempInstallmentLines."VAT Prod. Posting Group");
              //DP00886.en

              WHILE TotProdValueRemaining >= FixedInstallmentAmount DO BEGIN  //DP00886
                TotProdValueRemaining := TotProdValueRemaining - FixedInstallmentAmount;  //DP00886
                IF TempInstallmentLines.FINDSET THEN BEGIN
                  REPEAT
                    lvInstallmOvRec.CreateInstallmentLine(FixedInstallmentAmount,  //DP00886
                      TempInstallmentLines."VAT Prod. Posting Group",'', FALSE);
                  UNTIL TempInstallmentLines.NEXT = 0;
                END;
              END;
              // dp00109.en
            END;

            //set installment motivations on "Installments Created"
            lvInstallmMotRec.SETRANGE("Project No.","Project No.");
            lvInstallmMotRec.SETRANGE(Principal,Principal);
            lvInstallmMotRec.SETRANGE("Production Date", "First Motivation Date", "Last Motivation Date");
            IF lvInstallmMotRec.FINDFIRST THEN BEGIN
              REPEAT
                lvInstallmMotRec."Installments Created" := TRUE;
                lvInstallmMotRec."Installments Created on" := TODAY;
                lvInstallmMotRec.MODIFY;
              UNTIL lvInstallmMotRec.NEXT = 0;
            END;
            //set installment overview on "Installments Created"
            lvInstallmOvRec."Installments Created" := TRUE;
            lvInstallmOvRec."Installments Created on" := TODAY;
            lvInstallmOvRec.MODIFY;

          UNTIL lvInstallmOvRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CreateFinalInstallment@1100485006(iAmount@1100485001 : Decimal);
    VAR
      lvProjPrinRec@1100485000 : Record 11012005;
      lvInstallmOvRec@1100485002 : Record 11012265;
      TempProjectInstallment@1100409001 : TEMPORARY Record 11012018;
      TotalInstallmentAmount@1100409000 : Decimal;
    BEGIN
      //report RAW Final Installment contains the calculation
      lvProjPrinRec.GET("Project No.",Principal);

      //CreateInstallmentLine(iAmount, lvProjPrinRec."VAT Prod. Posting Group", Text003, TRUE); //T000396.o
      //T000396.sn
      GetFinalInstallmentsPerVATProd(iAmount,TempProjectInstallment,TotalInstallmentAmount);
      IF TempProjectInstallment.FINDSET THEN
        REPEAT
          CreateInstallmentLine(
              ROUND(iAmount * TempProjectInstallment."Installment Amount (LCY)"/TotalInstallmentAmount),
              TempProjectInstallment."VAT Prod. Posting Group", Text003, TRUE);
        UNTIL TempProjectInstallment.NEXT = 0;
      //T000396.en

      lvInstallmOvRec.SETRANGE("Project No.","Project No.");
      lvInstallmOvRec.SETRANGE(Principal,Principal);
      IF lvInstallmOvRec.FINDFIRST THEN BEGIN
        REPEAT
          lvInstallmOvRec."Final Installment Created" := TRUE;
          lvInstallmOvRec."Final Installment Created on" := TODAY;
          lvInstallmOvRec.MODIFY;
        UNTIL lvInstallmOvRec.NEXT = 0;
      END;
    END;

    PROCEDURE CreateInstallmentLine@1210190000(iAmnt@1210190000 : Decimal;iVATPostingGrp@1100485000 : Code[10];iDesc@1100485003 : Text[50];iFinalInstallment@1100525000 : Boolean);
    VAR
      lvProjPrinRec@1100485001 : Record 11012005;
      lvProjInstallmRec@1100485002 : Record 11012018;
      lvProjInstallmCU@1100485004 : Codeunit 11012007;
    BEGIN
      //create the regular installment based on the Installment Overview
      lvProjInstallmRec.INIT;
      lvProjInstallmRec."Project No." := "Project No.";
      lvProjInstallmRec.Principal := Principal;
      lvProjInstallmRec."Plot No." := '';
      lvProjInstallmRec."Installment No." := lvProjInstallmCU.GetFreeInstallmentNo("Project No.", Principal, '');  //30-01-2008

      lvProjPrinRec.GET("Project No.",Principal);  //*29882.n
      lvProjInstallmRec.VALIDATE("Cost Object", lvProjPrinRec."Cost Object");  //*29882.n
      lvProjInstallmRec."Currency Code" := lvProjPrinRec."Currency Code";  //DP00886
      CALCFIELDS("First Motivation Description", "Last Motivation Description");
      IF iDesc = '' THEN BEGIN
        IF "First Motivation Description" = "Last Motivation Description" THEN
          lvProjInstallmRec.Description := "First Motivation Description"
        ELSE
          lvProjInstallmRec.Description := STRSUBSTNO(Text002,"First Motivation Description", "Last Motivation Description");
      END ELSE BEGIN
        lvProjInstallmRec.Description := iDesc;
      END;
      //lvProjPrinRec.GET("Project No.",Principal);  //*29882.o
      //lvProjInstallmRec.VALIDATE("Cost Object", lvProjPrinRec."Cost Object");  //*29882.o Description can be modified by Validate
      lvProjInstallmRec."VAT Prod. Posting Group" := iVATPostingGrp;
      lvProjInstallmRec.VALIDATE("Installment Amount",ROUND(iAmnt)); //DP00886
      lvProjInstallmRec."Installment Motivation Date" := "Last Motivation Date";
      lvProjInstallmRec."RAW Final Installment" := iFinalInstallment;
      lvProjInstallmRec.CheckProjStatus();
      lvProjInstallmRec.INSERT;
    END;

    PROCEDURE ToInvoicePrevPeriods@1100528801() Result : Decimal;
    VAR
      InstallmentOverview@1100528800 : Record 11012265;
    BEGIN
      IF GetPrevInstallmentOverview(InstallmentOverview) THEN
        Result := InstallmentOverview.GetExcessProductionValue(0) +
         InstallmentOverview.GetExtraProductionValue(0) +
         InstallmentOverview.GetProductionValue(0) - InstallmentOverview.Invoiced('');
      EXIT(Result);
    END;

    PROCEDURE GetPrevInstallmentOverview@1100528805(VAR InstallmentOverview@1100528800 : Record 11012265) : Boolean;
    BEGIN
      InstallmentOverview := Rec;
      InstallmentOverview.SETCURRENTKEY("Project No.",Principal,"No.");
      InstallmentOverview.SETFILTER("Project No.","Project No.");
      InstallmentOverview.SETFILTER(Principal,Principal);
      EXIT(InstallmentOverview.NEXT(-1) <> 0);
    END;

    PROCEDURE InvoiceAccordingFixedAmount@1100528806() Result : Decimal;
    VAR
      ProjectPrincipal@1100528800 : Record 11012005;
    BEGIN
      IF ProjectPrincipal.GET("Project No.", Principal) THEN BEGIN
        IF ProjectPrincipal."Currency Code" <> '' THEN BEGIN  //DP00886
          IF ProjectPrincipal."Fixed Installment Amount (FCY)" <> 0 THEN
            Result := ROUND(( ToInvoice() / ProjectPrincipal."Fixed Installment Amount (FCY)"), 1, '<') * ProjectPrincipal."Fixed Installment Amount (FCY)";
        END ELSE BEGIN
          IF ProjectPrincipal."Fixed Installment Amount (LCY)" <> 0 THEN
            Result := ROUND(( ToInvoice() / ProjectPrincipal."Fixed Installment Amount (LCY)"), 1, '<') * ProjectPrincipal."Fixed Installment Amount (LCY)";
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE VATFinalInstallment@1210190002(VATBaseAmount@1210190000 : Decimal) : Decimal;
    VAR
      ProjectPrincipal@1210190001 : Record 11012005;
      VATPostingSetup@1210190002 : Record 325;
      TempProjectInstallment@1100409001 : TEMPORARY Record 11012018;
      VATAmount@1100409004 : Decimal;
      TotalInstallmentAmount@1100409000 : Decimal;
    BEGIN
      //call T000380

      ProjectPrincipal.GET("Project No.",Principal);
      {T000396.so
      IF VATPostingSetup.GET(
           ProjectPrincipal."VAT Bus. Posting Group",
           ProjectPrincipal."VAT Prod. Posting Group") THEN
        EXIT(ROUND(VATBaseAmount * VATPostingSetup."VAT %" / 100));
      }

      //T000396.sn
      GetFinalInstallmentsPerVATProd(VATBaseAmount,TempProjectInstallment,TotalInstallmentAmount);

      IF TempProjectInstallment.FINDSET THEN
        REPEAT
          IF VATPostingSetup.GET(
               ProjectPrincipal."VAT Bus. Posting Group",
               TempProjectInstallment."VAT Prod. Posting Group")
          THEN
            VATAmount += ROUND(VATBaseAmount *
                TempProjectInstallment."Installment Amount (LCY)"/TotalInstallmentAmount *
                VATPostingSetup."VAT %" / 100)

        UNTIL TempProjectInstallment.NEXT = 0;

      EXIT(VATAmount);
    END;

    LOCAL PROCEDURE GetFinalInstallmentsPerVATProd@1100409000(VATBaseAmount@1100409004 : Decimal;VAR TempProjectInstallment@1100409000 : TEMPORARY Record 11012018;VAR TotalInstallmentAmount@1100409007 : Decimal);
    VAR
      ProjectPrincipal@1100409003 : Record 11012005;
      ProjectInstallment@1100409001 : Record 11012018;
      InstallmentNo@1100409006 : Integer;
    BEGIN
      //T000396
      IF VATBaseAmount = 0 THEN
        EXIT;

      ProjectPrincipal.GET("Project No.",Principal);

      ProjectInstallment.SETRANGE("Project No.","Project No.");
      ProjectInstallment.SETRANGE(Principal,Principal);
      ProjectInstallment.SETRANGE("RAW Final Installment", FALSE);
      IF NOT ProjectInstallment.FINDSET THEN BEGIN
        TempProjectInstallment."Installment No." := '1';
        TempProjectInstallment."VAT Prod. Posting Group" := ProjectPrincipal."VAT Prod. Posting Group";
        TempProjectInstallment."Installment Amount (LCY)" := VATBaseAmount;
        TempProjectInstallment.INSERT;
        EXIT;
      END;

      REPEAT
        TotalInstallmentAmount += ProjectInstallment."Installment Amount (LCY)";
        //Cumulate per VAT Prod.
        TempProjectInstallment.SETRANGE("VAT Prod. Posting Group", ProjectInstallment."VAT Prod. Posting Group");
        IF TempProjectInstallment.FINDFIRST THEN BEGIN
          TempProjectInstallment."Installment Amount (LCY)" += ProjectInstallment."Installment Amount (LCY)";
          TempProjectInstallment.MODIFY;
        END ELSE BEGIN
          InstallmentNo += 1;
          TempProjectInstallment."Installment No." := STRSUBSTNO('%1',InstallmentNo);
          TempProjectInstallment."VAT Prod. Posting Group" := ProjectInstallment."VAT Prod. Posting Group";
          TempProjectInstallment."Installment Amount (LCY)" := ProjectInstallment."Installment Amount (LCY)";
          TempProjectInstallment.INSERT;
        END;
      UNTIL ProjectInstallment.NEXT = 0;

      TempProjectInstallment.RESET;
    END;

    BEGIN
    END.
  }
}

