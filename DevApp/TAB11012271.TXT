OBJECT Table 11012271 Exchange Logbook (FSA)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               DeleteErrors();
               DeleteImportLines();

               //* NB: Not allowed to delete complete processed export-files (on 4PS side).
               //*     These files should be imported and moved/deleted by BDA.
               IF (Direction = Direction::Import) OR
                  ((Direction = Direction::Export) AND (Status <> Status::Processed))
               THEN BEGIN
                 IF (Directory <> '') AND ("File Name" <> '') THEN BEGIN
                   IF FileMgt.ClientFileExists(Directory + "File Name") THEN
                     FileMgt.DeleteClientFile4PS(Directory + "File Name", TRUE);
                 END;
               END;
             END;

    CaptionML=ENU=Exchange Logbook Field Service;
  }
  FIELDS
  {
    { 10  ;   ;Date/Time           ;DateTime      ;CaptionML=ENU=Date/Time }
    { 20  ;   ;Message Type        ;Option        ;CaptionML=ENU=Message Type;
                                                   OptionCaptionML=ENU=Reference Data,Employees,Service Orders,Items,Customers,Service Locations,,,,,,,,Status,Debrief,Text,Hours (Service),Indirect Hours;
                                                   OptionString=RefData,Empl,ServOrder,Item,Cust,ServLoc,,,,,,,,Status,Debrief,Text,ServHours,IndirectHours;
                                                   Description=Options in tables 11012271, 11012272 and 11012273 should be equal }
    { 25  ;   ;Direction           ;Option        ;CaptionML=ENU=Direction;
                                                   OptionCaptionML=ENU=Export,Import;
                                                   OptionString=Export,Import }
    { 30  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=In Process,Error,Processed;
                                                   OptionString=In Process,Error,Processed }
    { 40  ;   ;Directory           ;Text250       ;CaptionML=ENU=Directory }
    { 45  ;   ;File Name           ;Text50        ;CaptionML=ENU=File Name }
    { 50  ;   ;Quantity            ;Integer       ;CaptionML=ENU=Quantity }
    { 60  ;   ;No. of Errors       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Exchange Error (FSA)" WHERE (Date/Time=FIELD(Date/Time),
                                                                                                   Message Type=FIELD(Message Type),
                                                                                                   Type=CONST(Error)));
                                                   CaptionML=ENU=Errors;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 61  ;   ;No. of Notes        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Exchange Error (FSA)" WHERE (Date/Time=FIELD(Date/Time),
                                                                                                   Message Type=FIELD(Message Type),
                                                                                                   Type=CONST(Note)));
                                                   CaptionML=ENU=Notes;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 65  ;   ;No. of Calls        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Exchange Error (FSA)" WHERE (Date/Time=FIELD(Date/Time),
                                                                                                   Message Type=FIELD(Message Type)));
                                                   CaptionML=ENU=Calls;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 70  ;   ;No. not Processed   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Import Line (FSA)" WHERE (Date/Time=FIELD(Date/Time),
                                                                                                Message Type=FIELD(Message Type)));
                                                   CaptionML=ENU=Not Processed;
                                                   BlankZero=Yes;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Date/Time,Message Type                  ;Clustered=Yes }
    {    ;Message Type,Date/Time                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100485000 : TextConst 'ENU=File ''%1'' is not (completely) processed, delete not allowed.';
      Text001@1100485001 : TextConst 'ENU=File ''%1'' is not (completely) processed, after deleting the logbook line this is not possible anymore.\ \Are you sure you want to delete this logbook line?';
      FileMgt@1100525500 : Codeunit 419;

    PROCEDURE CheckDeleteLogbookAllowed@1100485003(IMode@1100485000 : Integer) : Boolean;
    BEGIN
      //* Mode: 0=No error/question (further depening on calling process), 1=Error, 2=Question
      //* Delete a record (from logbook form) should be possible when manual (then question).

      IF (Status = Status::Processed) THEN
        EXIT(TRUE);

      IF (Direction = Direction::Export) THEN BEGIN
        IF Quantity = 0 THEN
          EXIT(TRUE);
        IF (Directory = '') OR ("File Name" = '') THEN
          EXIT(TRUE);
        IF NOT FileMgt.ClientFileExists(Directory + "File Name") THEN
          EXIT(TRUE);
      END;

      IF (Direction = Direction::Import) THEN BEGIN
        CALCFIELDS("No. not Processed");
        IF ("No. not Processed" <= 0) THEN BEGIN
          IF (Directory = '') OR ("File Name" = '') THEN
            EXIT(TRUE);
          IF NOT FileMgt.ClientFileExists(Directory + "File Name") THEN
            EXIT(TRUE);
        END;
      END;

      IF IMode = 1 THEN
        ERROR(Text000, "File Name");
      IF IMode = 2 THEN BEGIN
        IF CONFIRM(Text001, FALSE, "File Name") THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE WriteExchangeError@1100485000(IErrorText@1100485001 : Text[250];IType@1100485002 : Option;IImportLineNo@1100485003 : Integer) : Integer;
    VAR
      lvErrorRec@1100485000 : Record 11012272;
    BEGIN
      lvErrorRec.INIT;
      lvErrorRec."Date/Time" := "Date/Time";
      lvErrorRec."Message Type" := "Message Type";
      lvErrorRec."Line No." := 0;  //* Will be determined at Insert(True) on the Insert trigger of the error table
      lvErrorRec.Type := IType;
      lvErrorRec.Description := COPYSTR(IErrorText, 1, MAXSTRLEN(lvErrorRec.Description));
      lvErrorRec."Import Line No." := IImportLineNo;
      lvErrorRec.INSERT(TRUE);

      EXIT(lvErrorRec."Line No.");
    END;

    PROCEDURE DeleteErrors@1100485001();
    VAR
      lvErrorRec@1100485000 : Record 11012272;
    BEGIN
      //* Before calling this function, determine if deleting is allowed (if necessary), add no tests to this function
      lvErrorRec.SETRANGE("Date/Time", "Date/Time");
      lvErrorRec.SETRANGE("Message Type", "Message Type");
      lvErrorRec.DELETEALL;
    END;

    PROCEDURE DeleteImportLines@1100485002();
    VAR
      lvImportLineRec@1100485000 : Record 11012273;
    BEGIN
      //* Before calling this function, determine if deleting is allowed (if necessary), add no tests to this function
      lvImportLineRec.SETRANGE("Date/Time", "Date/Time");
      lvImportLineRec.SETRANGE("Message Type", "Message Type");
      lvImportLineRec.DELETEALL(FALSE);  //* FALSE!
    END;

    BEGIN
    END.
  }
}

