OBJECT Table 11012317 Trade Item
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               TESTFIELD(Vendor);
               TESTFIELD("Item Code");
             END;

    OnDelete=BEGIN
               ReplaceItemRec.ReplaceTradeItem(Rec);

               PriceHistRec.SETRANGE("Item Code", "Item Code");
               PriceHistRec.SETRANGE(Vendor, Vendor);
               PriceHistRec.DELETEALL;

               DiscHistRec.SETRANGE("Item Code", "Item Code");
               DiscHistRec.SETRANGE(Vendor, Vendor);
               DiscHistRec.DELETEALL(TRUE);  //db, 28-10-14: C017984 (activate Central Mgt)

               ChargeRec.SETRANGE("Item Code", "Item Code");
               ChargeRec.SETRANGE(Vendor, Vendor);
               ChargeRec.DELETEALL;

               //DP00065.so
               //lvTradeItemDiscRec.SETRANGE("GLN Vendor", Vendor);
               //lvTradeItemDiscRec.SETRANGE("Item No. Vendor", "Item Code");
               //lvTradeItemDiscRec.SETRANGE(Status, lvTradeItemDiscRec.Status::"1");
               //lvTradeItemDiscRec.DELETEALL;
               //DP00065.eo
             END;

    CaptionML=ENU=Trade Item;
    LookupPageID=Page11012334;
  }
  FIELDS
  {
    { 10  ;   ;Product Code        ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   CaptionML=ENU=Product Code }
    { 20  ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Manufacturer }
    { 30  ;   ;Item Code           ;Code20        ;AltSearchField=Search Argument;
                                                   CaptionML=ENU=Item Code;
                                                   NotBlank=Yes }
    { 40  ;   ;Vendor              ;Code15        ;TableRelation="ETIM Vendor (Central Mgt)";
                                                   CaptionML=ENU=Vendor;
                                                   NotBlank=Yes }
    { 50  ;   ;GTIN Code (Item)    ;Code20        ;CaptionML=ENU=GTIN Code (Item) }
    { 51  ;   ;GTIN Code (Product) ;Code20        ;CaptionML=ENU=GTIN Code (Product) }
    { 55  ;   ;CBS Code            ;Code20        ;CaptionML=ENU=CBS Code }
    { 60  ;   ;Processable         ;Boolean       ;CaptionML=ENU=Processable }
    { 65  ;   ;Deliverable         ;Boolean       ;CaptionML=ENU=Deliverable }
    { 75  ;   ;Application ID      ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=ENU=Application ID }
    { 80  ;   ;Purchase ID         ;Code10        ;TableRelation="ETIM Unit";
                                                   OnValidate=BEGIN
                                                                IF "Purchase ID" <> '' THEN
                                                                  ERROR('Veld Purchase ID (besteleenheid) vervallen met ingang van pab2.0; vervangend veld: Order ID (afname-eenheid)');
                                                              END;

                                                   CaptionML=ENU=Purchase ID;
                                                   Description=expired from pab2.0 (see Order ID) }
    { 85  ;   ;Order ID            ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=ENU=Order ID }
    { 90  ;   ;Minimum Order Quantity;Decimal     ;CaptionML=ENU=Minimum Order Quantity;
                                                   BlankZero=Yes }
    { 95  ;   ;Factor Price-Purchase Unit;Decimal ;CaptionML=ENU=Factor Price-Purchase Unit;
                                                   BlankZero=Yes }
    { 100 ;   ;Item Code (Successor);Code20       ;CaptionML=ENU=Item Code (Successor) }
    { 101 ;   ;Item Code (Predecessor);Code20     ;CaptionML=ENU=Item Code (Predecessor) }
    { 102 ;   ;Item Code (Manufacturer);Code20    ;CaptionML=ENU=Item Code (Manufacturer) }
    { 105 ;   ;GTIN Code (Successor);Code20       ;CaptionML=ENU=GTIN Code (Successor) }
    { 106 ;   ;GTIN Code (Predecessor);Code20     ;CaptionML=ENU=GTIN Code (Predecessor) }
    { 107 ;   ;GTIN Code (Manufacturer);Code20    ;CaptionML=ENU=GTIN Code (Manufacturer) }
    { 110 ;   ;Lot Size Quantity   ;Decimal       ;CaptionML=ENU=Lot Size Quantity;
                                                   BlankZero=Yes }
    { 115 ;   ;Application Unit Quantity;Decimal  ;CaptionML=ENU=Application Unit Quantity;
                                                   BlankZero=Yes }
    { 120 ;   ;Discount Group Code ;Code35        ;TableRelation="Discount Term History"."Discount Group" WHERE (Vendor=FIELD(Vendor),
                                                                                                                 Discount Level=CONST(Company));
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Discount Group Code }
    { 130 ;   ;Delivery Period     ;Decimal       ;CaptionML=ENU=Delivery Period;
                                                   BlankZero=Yes }
    { 134 ;   ;Delivery Time ID    ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=ENU=Delivery Time ID }
    { 135 ;   ;Delivery Time Unit  ;Text10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Unit"."Unit of Measure" WHERE (Code=FIELD(Delivery Time ID)));
                                                   CaptionML=ENU=Delivery Time Unit;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 140 ;   ;Delivery Group Code ;Code20        ;TableRelation="Delivery Group".Code WHERE (Vendor=FIELD(Vendor));
                                                   CaptionML=ENU=Delivery Group Code;
                                                   Description=DP00065 }
    { 150 ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   BlankZero=Yes }
    { 155 ;   ;Weight ID           ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=ENU=Weight ID }
    { 160 ;   ;Weight Unit         ;Text10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Unit"."Unit of Measure" WHERE (Code=FIELD(Weight ID)));
                                                   CaptionML=ENU=Weight Unit;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 170 ;   ;Packaging Code      ;Code10        ;TableRelation="ETIM Package".Code;
                                                   CaptionML=ENU=Packaging Code }
    { 180 ;   ;Length              ;Decimal       ;CaptionML=ENU=Length;
                                                   BlankZero=Yes }
    { 190 ;   ;Width               ;Decimal       ;CaptionML=ENU=Width;
                                                   BlankZero=Yes }
    { 200 ;   ;Height              ;Decimal       ;CaptionML=ENU=Height;
                                                   BlankZero=Yes }
    { 205 ;   ;Size ID             ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=ENU=Size ID }
    { 210 ;   ;Size Unit           ;Text10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Unit"."Unit of Measure" WHERE (Code=FIELD(Size ID)));
                                                   CaptionML=ENU=Size Unit;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 215 ;   ;Packaging Unit      ;Text10        ;CaptionML=ENU=Packaging Unit;
                                                   Description=NAVISION }
    { 220 ;   ;Status Code         ;Code10        ;CaptionML=ENU=Status Code }
    { 225 ;   ;Starting Date Item  ;Date          ;CaptionML=ENU=Starting Date Item }
    { 230 ;   ;Item Description    ;Text50        ;CaptionML=ENU=Item Description }
    { 235 ;   ;Item Description 2  ;Text50        ;CaptionML=ENU=Item Description 2;
                                                   Description=NAVISION }
    { 240 ;   ;Gross Price         ;Decimal       ;CaptionML=ENU=Gross Price;
                                                   Description=NAVISION (import pab2.0);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 241 ;   ;Nett Price          ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Nett Price") THEN
                                                                   CalcDiscPrice := TRUE;

                                                                IF CalcDiscPrice = TRUE THEN BEGIN
                                                                  IF "Gross Price" = 0 THEN
                                                                    "Discount Percentage" := 0
                                                                  ELSE
                                                                    "Discount Percentage" := ROUND(100 * ("Gross Price" - "Nett Price") / "Gross Price", 0.00001);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Nett Price;
                                                   Description=NAVISION (import pab2.0);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 242 ;   ;Discount Percentage ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Discount Percentage") THEN
                                                                   CalcDiscPrice := TRUE;

                                                                IF CalcDiscPrice = TRUE THEN BEGIN
                                                                  GLSetup.GET;
                                                                  "Nett Price" :=
                                                                  ROUND("Gross Price" * (100-"Discount Percentage")/100, GLSetup."Unit-Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Discount Percentage;
                                                   DecimalPlaces=0:5;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 243 ;   ;Packaging Form      ;Text30        ;CaptionML=ENU=Packaging Form;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 244 ;   ;Packaging Size      ;Text30        ;CaptionML=ENU=Packaging Size;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 245 ;   ;Price Reference Date;Date          ;CaptionML=ENU=Price Reference Date;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 246 ;   ;Application Unit    ;Text10        ;CaptionML=ENU=Application Unit;
                                                   Description=NAVISION }
    { 247 ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Description=NAVISION }
    { 250 ;   ;Expired             ;Boolean       ;OnValidate=BEGIN
                                                                IF Expired THEN
                                                                  "Expiry Date" := TODAY
                                                                ELSE
                                                                  "Expiry Date" := 0D;  //db, 08-12-08
                                                              END;

                                                   CaptionML=ENU=Expired;
                                                   Description=NAVISION }
    { 251 ;   ;Expiry Date         ;Date          ;CaptionML=ENU=Expiry Date;
                                                   Description=NAVISION }
    { 260 ;   ;Import Date-Time    ;Decimal       ;CaptionML=ENU=Import Date-Time;
                                                   DecimalPlaces=2:;
                                                   Description=NAVISION;
                                                   AutoFormatType=10;
                                                   AutoFormatExpr='DATETIME' }
    { 280 ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                //DP00065.n
                                                                "Cost Object changed Manually" := GetCostObjectChanged();
                                                              END;

                                                   CaptionML=ENU=Cost Object;
                                                   Description=NAVISION }
    { 290 ;   ;Search Argument     ;Code20        ;CaptionML=ENU=Search Argument;
                                                   Description=NAVISION }
    { 295 ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   CaptionML=ENU=Sub Operation Code;
                                                   Description=NAVISION }
    { 300 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Product Code),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Brand;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 301 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Product Code),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Series;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 302 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Product Code),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=ENU=Item Type;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 310 ;   ;Removal Contribution;Decimal       ;CaptionML=ENU=Removal Contribution;
                                                   Description=NAVISION;
                                                   AutoFormatType=2 }
    { 320 ;   ;Cost Object (Removal);Code20       ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Cost Object (Removal Contribution);
                                                   Description=NAVISION }
    { 330 ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Vendor (Central Mgt)".Name WHERE (Code=FIELD(Vendor)));
                                                   CaptionML=ENU=Vendor Name;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 340 ;   ;Basic Item Exists   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Basic Item" WHERE (Manufacturer=FIELD(Manufacturer),
                                                                                         Product Code=FIELD(Product Code)));
                                                   CaptionML=ENU=Basic Item Exists;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 350 ;   ;Price on Demand     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Price History Trade Item" WHERE (Item Code=FIELD(Item Code),
                                                                                                       Vendor=FIELD(Vendor),
                                                                                                       Gross Price=CONST(0)));
                                                   CaptionML=ENU=Price on Demand;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 360 ;   ;Cost Object changed Manually;Boolean;
                                                   CaptionML=ENU=Cost Object changed Manually;
                                                   Description=NAVISION }
    { 1030;   ;Starting Date Price ;Date          ;CaptionML=ENU=Starting Date Price }
    { 1060;   ;Quantity Per Price  ;Decimal       ;CaptionML=ENU=Quantity Per Price;
                                                   DecimalPlaces=0:5 }
    { 1065;   ;Price ID            ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=ENU=Price ID }
    { 1090;   ;Currency Code       ;Code10        ;CaptionML=ENU=Currency Code }
    { 1100;   ;Gross Price Operation Surch.;Decimal;
                                                   CaptionML=ENU=Gross Price Operation Surcharge;
                                                   AutoFormatType=2 }
    { 1105;   ;Price Manufacturer  ;Boolean       ;CaptionML=ENU=Price Manufacturer }
    { 1110;   ;VAT Code            ;Code10        ;CaptionML=ENU=VAT Code }
    { 1115;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5 }
    { 1120;   ;Maintained by 2ba   ;Boolean       ;CaptionML=ENU=Maintained by 2ba;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 1130;   ;Trade Item Guid (2ba);Text36       ;CaptionML=ENU=Trade Item Guid (2ba);
                                                   Editable=No }
    { 1140;   ;Product ID Guid (2ba);Text36       ;CaptionML=ENU=Product ID Guid (2ba);
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Vendor,Item Code                        ;Clustered=No }
    {    ;Item Code,Vendor,Product Code,Manufacturer;
                                                   Clustered=Yes }
    {    ;Product Code,Manufacturer,Item Code,Vendor }
    {    ;GTIN Code (Item)                         }
    {    ;Import Date-Time                         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PriceHistRec@11012000 : Record 11012315;
      ReplaceItemRec@1100485000 : Record 11012322;
      GLSetup@1210190001 : Record 98;
      DiscHistRec@1210190002 : Record 11012312;
      ChargeRec@1100485001 : Record 11012332;
      CalcDiscPrice@1100485005 : Boolean;
      ItemMgt@1210190000 : Codeunit 11012033;

    PROCEDURE InitLookup@1000000000(VAR TradeItemRec@1000000000 : Record 11012317;BasicItem@1000000001 : Code[20];Manufacturer@1000000002 : Code[20];TradeItem@1000000003 : Code[20];Vendor@1000000004 : Code[20]);
    BEGIN
      IF NOT TradeItemRec.GET(Vendor, TradeItem) THEN BEGIN
        TradeItemRec.RESET;
        IF BasicItem + Manufacturer <> '' THEN BEGIN
          TradeItemRec.SETCURRENTKEY("Product Code", Manufacturer);
          TradeItemRec.SETRANGE("Product Code", BasicItem);
          TradeItemRec.SETRANGE(Manufacturer, Manufacturer);
        END;
        IF Vendor <> '' THEN BEGIN
          TradeItemRec.SETCURRENTKEY(Vendor, "Item Code");
          TradeItemRec.SETRANGE(Vendor, Vendor);
        END;
        IF TradeItem <> '' THEN BEGIN
          TradeItemRec.SETCURRENTKEY("Item Code", Vendor);
          TradeItemRec.SETRANGE("Item Code", TradeItem);
        END;
        IF NOT TradeItemRec.FINDFIRST THEN BEGIN
          TradeItemRec.SETCURRENTKEY(Vendor, "Item Code");
          CLEAR(TradeItemRec);
          TradeItemRec.Vendor := Vendor;
        END;
      END;
    END;

    PROCEDURE CheckReplaceVendor@1100485002(lVendor@1100485000 : Code[20];lTradeItem@1100485001 : Code[20];VAR lNewVendor@1100485002 : Code[20];VAR lNewTradeItem@1100485003 : Code[20]) : Boolean;
    VAR
      lTradeItemRec@1100485004 : Record 11012317;
    BEGIN
      IF (lVendor = '') OR (lTradeItem = '') THEN
        EXIT(FALSE);

      lTradeItemRec.RESET;
      lTradeItemRec.SETCURRENTKEY(Vendor, "Item Code");
      lTradeItemRec.SETRANGE(Vendor, lVendor);
      lTradeItemRec.SETRANGE("Item Code", lTradeItem);

      //search first existing record
      IF lTradeItemRec.FINDFIRST THEN BEGIN
        //search then unique replacing record
        lTradeItemRec.RESET;
        IF lTradeItemRec."GTIN Code (Item)" <> '' THEN BEGIN
          lTradeItemRec.SETRANGE(Expired, FALSE);
          lTradeItemRec.SETCURRENTKEY("GTIN Code (Item)");
          lTradeItemRec.SETRANGE("GTIN Code (Item)",lTradeItemRec."GTIN Code (Item)");
          lTradeItemRec.SETRANGE(Vendor, lNewVendor);
          lTradeItemRec.SETFILTER("Item Code", '<>%1', '');
          IF NOT lTradeItemRec.FINDFIRST THEN BEGIN
            lTradeItemRec.RESET;
            lTradeItemRec.SETRANGE(Expired, FALSE);
            lTradeItemRec.SETCURRENTKEY("Product Code", Manufacturer, "Item Code", Vendor);
            lTradeItemRec.SETRANGE("Product Code", lTradeItemRec."Product Code");
            lTradeItemRec.SETRANGE(Manufacturer, lTradeItemRec.Manufacturer);
            lTradeItemRec.SETRANGE(Vendor, lNewVendor);
            lTradeItemRec.SETFILTER("Item Code", '<>%1', '');
          END;
        END ELSE BEGIN
          lTradeItemRec.SETCURRENTKEY("Product Code", Manufacturer, "Item Code", Vendor);
          lTradeItemRec.SETRANGE(Expired, FALSE);
          lTradeItemRec.SETRANGE("Product Code", lTradeItemRec."Product Code");
          lTradeItemRec.SETRANGE(Manufacturer, lTradeItemRec.Manufacturer);
          lTradeItemRec.SETRANGE(Vendor, lNewVendor);
          lTradeItemRec.SETFILTER("Item Code", '<>%1', '');
        END;
        IF lTradeItemRec.COUNT = 1 THEN BEGIN
          lTradeItemRec.FINDFIRST;
          lNewVendor := lTradeItemRec.Vendor;
          lNewTradeItem := lTradeItemRec."Item Code";
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetNetWeight@1100525000(iUnitOfMeasure@1100525002 : Code[10]) : Decimal;
    VAR
      lvBasisItemRec@1100525001 : Record 11012316;
      lvQuantityPerUnit@1100525000 : Decimal;
    BEGIN
      //**4PS02.n
      //This function returns the net weight in kilos

      IF iUnitOfMeasure <> "Application Unit" THEN
        lvQuantityPerUnit := "Qty. per Unit of Measure"
      ELSE
        lvQuantityPerUnit := 1;

      IF lvBasisItemRec.GET(Manufacturer, "Product Code") THEN BEGIN
        // Weight must be in Kilo
        // 2BA Will probably stick to these 3 units, therefore hardcode the conversion
        CASE lvBasisItemRec."Weight ID" OF
          'TNE' : EXIT(lvBasisItemRec."Nett Weight" * lvQuantityPerUnit * 1000);
          'KGM' : EXIT(lvBasisItemRec."Nett Weight" * lvQuantityPerUnit);
          'GRM' : EXIT(lvBasisItemRec."Nett Weight" * lvQuantityPerUnit/ 1000);
          ELSE EXIT(0); //we don't know the conversion factor to kilos
        END;
      END ELSE BEGIN
        //On Trade Item we only have Gross Weight which is also not reliable.
        EXIT(0);
      END;
    END;

    PROCEDURE GetActualPrice@1100525003(RefDate@1100525005 : Date;DiscRef1@1100525006 : Code[20];DiscRef2@1100525007 : Code[20]);
    VAR
      lvTradeItemRec@1100525000 : Record 11012317;
      lvGrossPrice@1100525001 : Decimal;
      lvNettPrice@1100525002 : Decimal;
      lvDiscPerc@1100525003 : Decimal;
      ValidateCu@1100525004 : Codeunit 11012033;
    BEGIN
      //db, 26-01-09: M14149
      lvTradeItemRec := Rec;
      ValidateCu.GetPriceTradeItem(lvTradeItemRec, RefDate, DiscRef1, DiscRef2, '');
      lvGrossPrice := lvTradeItemRec."Gross Price";
      lvNettPrice := lvTradeItemRec."Nett Price";
      lvDiscPerc := lvTradeItemRec."Discount Percentage";

      Rec := lvTradeItemRec;
      "Gross Price" := lvGrossPrice;
      "Nett Price" := lvNettPrice;
      "Discount Percentage" := lvDiscPerc;
    END;

    PROCEDURE GetUnitPrices@1100525004(VAR GrossPriceInventoryUnit@1100525003 : Decimal;VAR NettPriceInventoryUnit@1100525002 : Decimal;VAR GrossPricePurchaseUnit@1100525001 : Decimal;VAR NettPricePurchaseUnit@1100525000 : Decimal;VAR DiscPerc@1100525004 : Decimal);
    BEGIN
      //db, 05-03-09
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" :=  1;
      IF "Application Unit Quantity" = 0 THEN
        "Application Unit Quantity" := 1;
      IF "Minimum Order Quantity" = 0 THEN
        "Minimum Order Quantity" := 1;

      GrossPriceInventoryUnit := "Gross Price" / "Qty. per Unit of Measure";
      NettPriceInventoryUnit := "Nett Price" / "Qty. per Unit of Measure";

      GrossPricePurchaseUnit := GrossPriceInventoryUnit * ("Application Unit Quantity" * "Minimum Order Quantity");
      NettPricePurchaseUnit := NettPriceInventoryUnit * ("Application Unit Quantity" * "Minimum Order Quantity");

      DiscPerc := "Discount Percentage";  //db, 06-01-10: M13789
    END;

    PROCEDURE PriceOnDemand@1210190000(RefDate@1210190001 : Date) : Boolean;
    VAR
      PriceHistRec@1210190000 : Record 11012315;
    BEGIN
      //db, 28-11-11: M30850
      PriceHistRec.SETRANGE(Vendor, Vendor);
      PriceHistRec.SETRANGE("Item Code", "Item Code");
      PriceHistRec.SETFILTER("Starting Date", '..%1', RefDate);
      IF PriceHistRec.FINDLAST THEN
        IF (PriceHistRec."Gross Price" = 0) AND (PriceHistRec."Price on Demand") THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetUnitData@1210190052();
    VAR
      lvInvtSetup@1100485005 : Record 313;
      lvPackageRec@1100485002 : Record 11012309;
      lvUnitRec@1100485004 : Record 204;
      lvItemUnitRec@1100485003 : Record 5404;
      lvFactorInt@1100485001 : Integer;
      lvFactorDec@1100485000 : Decimal;
      lvSameUnitDiffQuan@1100525000 : Boolean;
    BEGIN
      //DP00065: moved from codeunit 11012303 to tabel 11012317
      lvInvtSetup.GET;
      lvInvtSetup.TESTFIELD("Default Item");

      "Packaging Unit" := '';
      "Packaging Form" := '';
      "Packaging Size" := '';

      IF "Application ID" <> '' THEN
        "Application Unit" :=  ItemMgt.CheckUnitConversion("Application ID");

      IF "Application Unit" = '' THEN
        "Application Unit" :=  ItemMgt.CheckUnitConversion("Price ID");

      IF "Order ID" <> '' THEN
        "Packaging Unit" :=  ItemMgt.CheckUnitConversion("Order ID");

      "Qty. per Unit of Measure" := "Application Unit Quantity";  //db, 25-06-09: M15814
      IF "Application Unit Quantity" > "Minimum Order Quantity" THEN  //db, 11-02-09: M10186
        lvSameUnitDiffQuan := CheckSameUnitDiffQuan;

      IF "Qty. per Unit of Measure" = 0 THEN "Qty. per Unit of Measure" := 1;
      lvFactorDec := ROUND("Qty. per Unit of Measure", 0.01);
      lvFactorInt := ROUND("Qty. per Unit of Measure", 1);

      IF lvSameUnitDiffQuan THEN  //db, 11-02-09: M10186
        "Packaging Unit" := '';

      IF "Packaging Code" <> '' THEN BEGIN  //DP00065.n
        IF lvPackageRec.GET("Packaging Code") THEN BEGIN
          IF lvFactorInt > lvFactorDec THEN
            "Packaging Form" := COPYSTR(
              (lvPackageRec.Description + STRSUBSTNO(' / %1 ', lvFactorDec) + "Application Unit"),
              1, MAXSTRLEN("Packaging Form"))
          ELSE
            "Packaging Form" := COPYSTR(
              (lvPackageRec.Description + STRSUBSTNO(' / %1 ', lvFactorInt) + "Application Unit"),
              1, MAXSTRLEN("Packaging Form"));
          IF lvPackageRec."Unit (Navision)" <> '' THEN
            "Packaging Unit" := lvPackageRec."Unit (Navision)";
        END;
      END;

      IF "Packaging Unit" = '' THEN BEGIN
        IF lvFactorDec = 1 THEN
          "Packaging Unit" := "Application Unit"
        ELSE
          IF lvFactorInt > lvFactorDec THEN
            "Packaging Unit" := COPYSTR(
              (STRSUBSTNO('%1', lvFactorDec) + "Application Unit"),
              1, MAXSTRLEN("Packaging Unit"))
          ELSE
            "Packaging Unit" := COPYSTR(
              (STRSUBSTNO('%1', lvFactorInt) + "Application Unit"),
              1, MAXSTRLEN("Packaging Unit"));
      END;

      IF Length <> 0 THEN
        "Packaging Size" := STRSUBSTNO('%1', Length);
      IF Width <> 0 THEN BEGIN
        IF "Packaging Size" <> '' THEN "Packaging Size" := "Packaging Size" + 'x';
        "Packaging Size" := "Packaging Size" + STRSUBSTNO('%1', Width);
      END;
      IF Height <> 0 THEN BEGIN
        IF "Packaging Size" <> '' THEN "Packaging Size" := "Packaging Size" + 'x';
        "Packaging Size" := "Packaging Size" + STRSUBSTNO('%1', Height);
      END;
      IF "Packaging Size" <> '' THEN "Packaging Size" := "Packaging Size" + ' ' + "Size Unit";

      IF UPPERCASE("Packaging Unit") <> UPPERCASE("Application Unit") THEN BEGIN
        IF NOT lvUnitRec.GET("Packaging Unit") THEN BEGIN
          lvUnitRec.INIT;
          lvUnitRec.Code := "Packaging Unit";
          lvUnitRec.INSERT;
        END;
        IF NOT lvItemUnitRec.GET(lvInvtSetup."Default Item", "Packaging Unit") THEN BEGIN
          lvItemUnitRec.INIT;
          lvItemUnitRec."Item No." := lvInvtSetup."Default Item";
          lvItemUnitRec.Code := "Packaging Unit";
          lvItemUnitRec."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
          lvItemUnitRec.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckSameUnitDiffQuan@1210190051() SameUnitDiffQuan : Boolean;
    BEGIN
      //DP00065: moved from codeunit 11012303 to table 11012317
      IF "Application ID" = "Order ID" THEN BEGIN
        IF ("Qty. per Unit of Measure" = 0) OR ("Qty. per Unit of Measure" = 1) THEN
          SameUnitDiffQuan := FALSE
        ELSE
          SameUnitDiffQuan := TRUE;
      END;
      EXIT(SameUnitDiffQuan);
    END;

    PROCEDURE GetRemovalContribution@1210190050(lvLimitPriceDate@1100485002 : Date);
    VAR
      lvChargeRec@1100485000 : Record 11012332;
    BEGIN
      //DP00065: moved from codeunit 11012303 to table 11012317
      "Removal Contribution" := 0;
      lvChargeRec.SETRANGE(Vendor, Vendor);
      lvChargeRec.SETRANGE("Item Code", "Item Code");
      lvChargeRec.SETRANGE("Discount/Charge Code", 'CRS');
      lvChargeRec.SETRANGE("Starting Date", 0D, lvLimitPriceDate);
      IF lvChargeRec.FINDLAST THEN BEGIN
        "Removal Contribution" := lvChargeRec.Amount;
        IF CheckSameUnitDiffQuan THEN  //db, 11-02-09: M10186
          IF "Qty. per Unit of Measure" <> 0 THEN
            "Removal Contribution" := "Removal Contribution" / "Qty. per Unit of Measure";
      END;
    END;

    PROCEDURE GetRefDateHistPrice@1210190053();
    VAR
      HistRec@1100525000 : Record 11012315;
    BEGIN
      //DP00065: moved from codeunit 11012303 to table 11012317
      HistRec.SETRANGE(Vendor, Vendor);
      HistRec.SETRANGE("Item Code", "Item Code");
      IF NOT HistRec.FINDLAST THEN
        "Price Reference Date" := 0D
      ELSE
        "Price Reference Date" := HistRec."Starting Date";
    END;

    PROCEDURE GetDefaultCostObject@1210190055(Removal@1100529000 : Boolean) : Code[20];
    VAR
      InventorySetup@1210190000 : Record 313;
      ItemSetup@1100528900 : Record 11012300;
      DeliveryGroupRec@1210190001 : Record 11012320;
      ProductGroupRec@1210190002 : Record 11012302;
      BasicItemRec@1210190003 : Record 11012316;
      DeliveryGroupCode@1210190004 : Code[250];
      VendorRec@1100409000 : Record 11012304;
      CostObject@1100409002 : Code[20];
      CostObjectRemoval@1100409001 : Code[20];
    BEGIN
      //DP00065:
      //db, 30-08-12: priority: 1=delivery/discount group; 2=productgroup; 3=default (setup)
      ItemSetup.GET;
      IF ItemSetup."Apply DiscGroup as DelivGroup" THEN
        DeliveryGroupCode := "Discount Group Code"
      ELSE
        DeliveryGroupCode := "Delivery Group Code";

      //db.sn, 12-11-12: C003707
      IF NOT VendorRec.GET(Vendor) THEN VendorRec.INIT;

      IF DeliveryGroupRec.GET(Vendor, DeliveryGroupCode) THEN BEGIN
        CostObject := DeliveryGroupRec."Cost Object";
        CostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
      END ELSE BEGIN
        CheckFormatCondition(VendorRec, Vendor, DeliveryGroupCode, CostObject, CostObjectRemoval);
      END;
      IF NOT Removal THEN BEGIN
        IF CostObject <> '' THEN
          EXIT(CostObject);
      END ELSE BEGIN
        IF CostObjectRemoval <> '' THEN
          EXIT(CostObjectRemoval);
      END;

      IF DeliveryGroupRec.GET('', DeliveryGroupCode) THEN BEGIN
        CostObject := DeliveryGroupRec."Cost Object";
        CostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
      END ELSE BEGIN
        //due to performanceproblem skipped (index on DeliveryGroup required)
        //CheckFormatCondition(VendorRec, '', DeliveryGroupCode, CostObject, CostObjectRemoval);
      END;
      IF NOT Removal THEN BEGIN
        IF CostObject <> '' THEN
          EXIT(CostObject);
      END ELSE BEGIN
        IF CostObjectRemoval <> '' THEN
          EXIT(CostObjectRemoval);
      END;
      //db.en, 12-11-12: C003707

      IF (Manufacturer <> '') AND ("Product Code" <> '') THEN BEGIN
        IF BasicItemRec.GET(Manufacturer, "Product Code") THEN BEGIN
          IF ProductGroupRec.GET(BasicItemRec."Product Group") THEN BEGIN
            IF NOT Removal THEN BEGIN
              IF ProductGroupRec."Cost Object" <> '' THEN
                EXIT(ProductGroupRec."Cost Object");
            END ELSE BEGIN
              IF ProductGroupRec."Cost Object (Removal)" <> '' THEN
                EXIT(ProductGroupRec."Cost Object (Removal)");
            END;
          END;
        END;
      END;

      InventorySetup.GET;
      IF NOT Removal THEN BEGIN
        IF InventorySetup."Cost Object" <> '' THEN
          EXIT(InventorySetup."Cost Object");
      END ELSE BEGIN
        IF InventorySetup."Cost Object (Removal)" <> '' THEN
          EXIT(InventorySetup."Cost Object (Removal)");
      END;

      EXIT('');
    END;

    PROCEDURE GetCostObjectChanged@1100529000() : Boolean;
    BEGIN
      //DP00065  Unequal to default Cost Object
      EXIT("Cost Object" <> GetDefaultCostObject(FALSE));  // False: Normal Cost Object
    END;

    PROCEDURE GetItemCode@1100528300() : Code[20];
    VAR
      ItemRelation@1100528300 : Record 11012319;
    BEGIN
      ItemRelation.SETCURRENTKEY(Vendor, "Trade Item");
      ItemRelation.SETRANGE("Trade Item", "Item Code");
      ItemRelation.SETRANGE(Vendor, Vendor);
      IF (ItemRelation.FINDFIRST) THEN
        EXIT(ItemRelation."Navision Item");

      EXIT('');
    END;

    PROCEDURE DrillDownNavisionItem@1100528301();
    VAR
      Item@1100528300 : Record 27;
      ItemRelation@1210190000 : Record 11012319;
      ItemRelationFound@1100525000 : Boolean;
    BEGIN
      ItemRelation.RESET;
      ItemRelation.SETCURRENTKEY(Vendor, "Trade Item");
      ItemRelation.SETRANGE("Trade Item", "Item Code");
      ItemRelation.SETRANGE(Vendor, Vendor);
      IF ItemRelation.FINDFIRST THEN
        ItemRelationFound := TRUE;

      IF NOT ItemRelationFound THEN BEGIN
        ItemRelation.RESET;
        ItemRelation.SETCURRENTKEY("GTIN Code");
        ItemRelation.SETRANGE("GTIN Code", "GTIN Code (Item)");
        IF ItemRelation.FINDFIRST THEN
          ItemRelationFound := TRUE;
      END;

      IF NOT ItemRelationFound THEN BEGIN
        ItemRelation.RESET;
        ItemRelation.SETCURRENTKEY(Manufacturer, "Basic Item");
        ItemRelation.SETRANGE(Manufacturer, Manufacturer);
        ItemRelation.SETRANGE("Basic Item", "Product Code");
        IF ItemRelation.FINDFIRST THEN
          ItemRelationFound := TRUE;
      END;

      IF NOT ItemRelationFound THEN EXIT;

      REPEAT
        Item.GET(ItemRelation."Navision Item");
        Item.MARK(TRUE);
      UNTIL (ItemRelation.NEXT = 0);

      Item.MARKEDONLY(TRUE);
      IF (NOT Item.ISEMPTY) THEN
        PAGE.RUNMODAL(0, Item);
    END;

    PROCEDURE CheckFormatCondition@1100409001(VendorRec@1100409005 : Record 11012304;iVendor@1100409008 : Code[20];iCode@1100409003 : Code[250];VAR varCostObject@1100409006 : Code[20];VAR varCostObjectRemoval@1100409007 : Code[20]) : Boolean;
    VAR
      DeliveryGroupRec@1100409004 : Record 11012320;
      HGSCode@1100409002 : Text[250];
      lenHGS@1100409001 : Integer;
      posWildCard@1100409000 : Integer;
    BEGIN
      //db, 12-11-12: C003707 (copy from function CheckDiscountLevel codeunit 11012033)
      IF VendorRec."Format Discount Term" = VendorRec."Format Discount Term"::Wildcard THEN BEGIN
        HGSCode := iCode;
        lenHGS := STRLEN(HGSCode);
        WHILE lenHGS > 0 DO BEGIN
          IF iVendor = '' THEN
            DeliveryGroupRec.SETFILTER(Vendor, '%1', '')
          ELSE
            DeliveryGroupRec.SETRANGE(Vendor, Vendor);
          DeliveryGroupRec.SETFILTER(Code, '%1', HGSCode + '*');
          IF DeliveryGroupRec.FINDSET THEN BEGIN
            REPEAT
              posWildCard := STRPOS(DeliveryGroupRec.Code, '*');
              IF (posWildCard = lenHGS + 1) THEN BEGIN
                IF DeliveryGroupRec."Cost Object" <> '' THEN
                  varCostObject := DeliveryGroupRec."Cost Object";
                IF DeliveryGroupRec."Cost Object (Removal)" <> '' THEN
                  varCostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
                EXIT(TRUE);
              END;
            UNTIL DeliveryGroupRec.NEXT = 0;
          END;
          lenHGS := lenHGS - 1;
          IF lenHGS > 0 THEN
            HGSCode := COPYSTR(iCode, 1, lenHGS);
        END;
        EXIT(FALSE);
      END;

      IF VendorRec."Format Discount Term" = VendorRec."Format Discount Term"::HGS THEN BEGIN
        IF COPYSTR(iCode, 5, 2) < '80' THEN BEGIN
          //With subgroup higher then 80 don't search for discount on higher level
          //TU supplies discount groups in format hhggss
          HGSCode := COPYSTR(iCode, 1, 4) + '99';
          IF iVendor = '' THEN
            DeliveryGroupRec.SETFILTER(Vendor, '%1', '')
          ELSE
            DeliveryGroupRec.SETRANGE(Vendor, Vendor);
          DeliveryGroupRec.SETRANGE(Code, HGSCode);
          IF DeliveryGroupRec.FINDFIRST THEN BEGIN
            IF DeliveryGroupRec."Cost Object" <> '' THEN
              varCostObject := DeliveryGroupRec."Cost Object";
            IF DeliveryGroupRec."Cost Object (Removal)" <> '' THEN
              varCostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
            EXIT;
          END;
          HGSCode := COPYSTR(iCode, 1, 2) + '9999';
          IF iVendor = '' THEN
            DeliveryGroupRec.SETFILTER(Vendor, '%1', '')
          ELSE
            DeliveryGroupRec.SETRANGE(Vendor, Vendor);
          DeliveryGroupRec.SETRANGE(Code, HGSCode);
          IF DeliveryGroupRec.FINDFIRST THEN BEGIN
            IF DeliveryGroupRec."Cost Object" <> '' THEN
              varCostObject := DeliveryGroupRec."Cost Object";
            IF DeliveryGroupRec."Cost Object (Removal)" <> '' THEN
              varCostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
            EXIT(TRUE);
          END;
        END;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE FindRec@1100525001(ShowPriceOnDemandOnly@1100485000 : Boolean;VAR TradeItem@1100485001 : Record 11012317;Which@1100485002 : Text[30];RefDate@1100525000 : Date) : Boolean;
    VAR
      TradeItem2@1100485007 : Record 11012317;
      Steps@1100485003 : Integer;
      FindNext@1100485008 : Integer;
      PriceHistoryTradeItem@1100485004 : Record 11012315;
      Found@1100485006 : Boolean;
    BEGIN
      //CALL C006542 NEW
      IF ShowPriceOnDemandOnly THEN BEGIN
        TradeItem2.COPY(TradeItem);
        IF Which = '+' THEN
          Steps := -1
        ELSE
          Steps := 1;
        IF TradeItem2.FIND(Which) THEN
          REPEAT
            Found := TradeItem2.PriceOnDemand(RefDate);  //Use variable because of performance
            IF NOT Found THEN BEGIN
              FindNext := TradeItem2.NEXT(Steps);
              IF (FindNext = 0) AND (Steps = 1) THEN BEGIN
                //At the end of the table reverse order
                FindNext := -1;
                Steps := -1;
              END;
            END;
          UNTIL (FindNext = 0) OR Found;
        IF Found THEN
          TradeItem := TradeItem2;
        EXIT(Found);
      END ELSE
        EXIT(FIND(Which));
    END;

    PROCEDURE GetRec@1100485003(PriceOnDemandOnly@1100485003 : Boolean;VAR TradeItem@1100485002 : Record 11012317;Steps@1100485001 : Integer;RefDate@1100525000 : Date) : Integer;
    VAR
      TradeItem2@1100485006 : Record 11012317;
      ActualSteps@1100485004 : Integer;
      Step@1100528400 : Integer;
      NoOneFound@1100485005 : Boolean;
    BEGIN
      //CALL C006542 NEW
      IF PriceOnDemandOnly THEN BEGIN
        TradeItem2.COPY(TradeItem);

        IF Steps < 0 THEN
          Step := -1
        ELSE
          Step := 1;

        REPEAT
          IF TradeItem2.NEXT(Step) <> 0 THEN BEGIN
            IF TradeItem2.PriceOnDemand(RefDate) THEN BEGIN
              ActualSteps := ActualSteps + Step;
              IF Steps <> 0 THEN
               TradeItem := TradeItem2;
            END;
          END ELSE
            NoOneFound := TRUE;
        UNTIL (ActualSteps = Steps) OR NoOneFound;
        EXIT(ActualSteps);
      END ELSE
        EXIT(NEXT(Steps));
    END;

    PROCEDURE ConvertImportDateTime@1100409000() DateTimeTxt : Text[250];
    VAR
      DatetimeMgt@1100409000 : Codeunit 11020218;
    BEGIN
      //db, 30-09-14
      DateTimeTxt := DatetimeMgt.OLDDatetime2Text("Import Date-Time");
      EXIT(DateTimeTxt);
    END;

    PROCEDURE LookupDiscountHistory@1100525002(RefDate@1100525003 : Date;DiscRef1@1100525002 : Code[20];DiscRef2@1100525001 : Code[20]);
    VAR
      DiscountHistory@1100525000 : Record 11012312;
      DiscountHistoryList@1100525004 : Page 11020421;
    BEGIN
      //db, 11-06-15: C017270
      //new version derived from CheckDiscountLevel in codeunit ValidateItem (11012033)
      DiscountHistory.SETRANGE(Vendor, Vendor);
      DiscountHistory.SETFILTER("Discount Group", '%1', '');
      DiscountHistory.SETRANGE("Item Code", "Item Code");
      DiscountHistory.SETRANGE("Starting Date", 0D, RefDate);
      DiscountHistory.SETFILTER("Ending Date", '%1|>=%2', 0D, RefDate);
      IF NOT DiscountHistory.FINDLAST THEN BEGIN
        DiscountHistory.SETRANGE("Discount Group", "Discount Group Code");
        DiscountHistory.SETFILTER("Item Code", '%1', '');
        IF NOT DiscountHistory.FINDLAST THEN BEGIN
          DiscountHistory.RESET;
          DiscountHistory.SETRANGE(Vendor, Vendor);
          IF "Discount Group Code" <> '' THEN
            DiscountHistory."Discount Group" := "Discount Group Code"
          ELSE
            DiscountHistory."Item Code" := "Item Code";
        END;
      END;

      DiscountHistoryList.SETTABLEVIEW(DiscountHistory);
      DiscountHistoryList.SetReference(DiscRef1, DiscRef2, 0D, RefDate, '');
      DiscountHistoryList.RUNMODAL;

      {
      //db, 07-05-15: C017270 (old version)
      IF "Discount Group Code" <> '' THEN BEGIN
        DiscountHistory.SETRANGE(Vendor, Vendor);
        DiscountHistory.SETRANGE("Discount Group", "Discount Group Code");
      END ELSE BEGIN
        DiscountHistory.SETRANGE(Vendor, Vendor);
        DiscountHistory.SETRANGE("Item Code", "Item Code");
      END;
      FORM.RUNMODAL(0, DiscountHistory);
      }
    END;

    BEGIN
    {
      4PS01 JD 30-10-2008, Improvements for intrastat
      4PS, C009570, 06-03-14, Performance issue solved: Clustered index changed from Vendor,Item Code to Item Code,Vendor,Product Code,Manufacturer
    }
    END.
  }
}

