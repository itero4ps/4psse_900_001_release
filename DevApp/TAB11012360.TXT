OBJECT Table 11012360 Site Mngmnt. Hours Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Inserted := TODAY;
               "Inserted By" := USERID;
             END;

    OnModify=BEGIN
               SetStatus;
               Modified := CURRENTDATETIME;
               "Modified By" := USERID;
             END;

    OnDelete=VAR
               HoursLine@1100525000 : Record 11012361;
             BEGIN
               HoursLine.RESET;
               HoursLine.SETRANGE(Year,Year);
               HoursLine.SETRANGE(Week,Week);
               HoursLine.SETRANGE("Supplying Company","Supplying Company");
               HoursLine.SETRANGE("Employee No.","Employee No.");
               HoursLine.DELETEALL(TRUE);
             END;

    OnRename=VAR
               HoursLine@1100525000 : Record 11012361;
             BEGIN
               HoursLine.RESET;
               HoursLine.SETRANGE(Year,xRec.Year);
               HoursLine.SETRANGE(Week,xRec.Week);
               HoursLine.SETRANGE("Supplying Company",xRec."Supplying Company");
               HoursLine.SETRANGE("Employee No.",xRec."Employee No.");
               IF NOT HoursLine.ISEMPTY THEN
                 ERROR(Text001);
             END;

    CaptionML=ENU=Site Mngmnt. Hours Header;
    LookupPageID=Page11072229;
  }
  FIELDS
  {
    { 20  ;   ;Year                ;Integer       ;OnValidate=BEGIN
                                                                Date.RESET;
                                                                Date.SETRANGE("Period Type",Date."Period Type"::Year);
                                                                Date.SETRANGE("Period No.",Year);
                                                                IF NOT Date.FINDFIRST THEN
                                                                  FIELDERROR(Year);

                                                                StartDateYear := Date."Period Start";
                                                                YearEndDate := Date."Period End";
                                                              END;

                                                   CaptionML=ENU=Year;
                                                   MinValue=1 }
    { 30  ;   ;Week                ;Integer       ;OnValidate=VAR
                                                                ProjSetUp@11012000 : Record 315;
                                                                Period@11012001 : Integer;
                                                              BEGIN
                                                                IF Year = 0 THEN
                                                                  Year := DATE2DMY(TODAY, 3);

                                                                VALIDATE(Year,Year);
                                                                Date.RESET;
                                                                Date.SETRANGE("Period Type",Date."Period Type"::Week);
                                                                Date.SETRANGE("Period No.",Week);
                                                                Date.SETRANGE("Period Start",CALCDATE('<-3D>',StartDateYear),YearEndDate);
                                                                Date.SETRANGE("Period End",StartDateYear,CALCDATE('<+3D>',YearEndDate));
                                                                IF NOT Date.FINDFIRST THEN
                                                                  FIELDERROR(Week);

                                                                GetPostingDate;

                                                                ProjSetUp.GET;
                                                                ProjSetUp.TESTFIELD("Hours Document Nos.");  //* Call 13942
                                                                CASE ProjSetUp."Hour Document No." OF
                                                                  ProjSetUp."Hour Document No."::Week:
                                                                    Period := Week;
                                                                  ProjSetUp."Hour Document No."::"4-Weeks":
                                                                    Period := ((Week-1) DIV 4) + 1;
                                                                  ProjSetUp."Hour Document No."::Month:
                                                                    Period := DATE2DMY(CALCDATE('<-1D>',"Posting Date"),2);
                                                                END;
                                                                //"Document No." := STRSUBSTNO(Text002, Year, FORMAT(Period,2));  //* OLD Text002:ENU=Hours %1-%2;NLD=Uren %1-%2
                                                                "Document No." := STRSUBSTNO('%1 %2-%3', ProjSetUp."Hours Document Nos.", Year, FORMAT(Period,2));  //* Call 13942
                                                              END;

                                                   OnLookup=VAR
                                                              DateSelectionManagement@1100525500 : Codeunit 11130005;
                                                            BEGIN
                                                              DateSelectionManagement.GetWeekYear(Week, Year);
                                                              VALIDATE(Week);
                                                            END;

                                                   CaptionML=ENU=Week;
                                                   MinValue=1;
                                                   MaxValue=53 }
    { 39  ;   ;Supplying Company   ;Text50        ;TableRelation="Site Mngmnt. Hours Companies".Company;
                                                   OnValidate=VAR
                                                                EmployeeRec@1100485000 : Record 11012357;
                                                              BEGIN
                                                                IF "Employee No." <> '' THEN
                                                                  EmployeeRec.GET("Supplying Company","Employee No.");
                                                              END;

                                                   CaptionML=ENU=Supplying Company }
    { 40  ;   ;Employee No.        ;Code20        ;TableRelation="Site Mngmnt. Hours Employee".No.;
                                                   OnValidate=VAR
                                                                EmployeeRec@1100485000 : Record 11012357;
                                                                EmployeeFrm@1100485001 : Page 11072212;
                                                              BEGIN
                                                                {
                                                                CLEAR(EmployeeFrm);
                                                                EmployeeRec.SETCURRENTKEY("No.");
                                                                EmployeeRec.SETRANGE("No.","Employee No.");
                                                                EmployeeRec.SETRANGE(Company,"Supplying Company");
                                                                {IF EmployeeRec.COUNT > 1 THEN BEGIN
                                                                  EmployeeFrm.LOOKUPMODE(TRUE);
                                                                  EmployeeFrm.SETTABLEVIEW(EmployeeRec);
                                                                  IF EmployeeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                    EmployeeFrm.GETRECORD(EmployeeRec);
                                                                    "Supplying Company" := EmployeeRec.Company;
                                                                    "Employee No." := EmployeeRec."No.";
                                                                  END;
                                                                END ELSE BEGIN}
                                                                  IF EmployeeRec.FINDFIRST THEN BEGIN            // 'IF' was already eliminated by { }. Before range on Empl and Comp is
                                                                    "Supplying Company" := EmployeeRec.Company;  // set, then the record is found with these values. It has no use to
                                                                    "Employee No." := EmployeeRec."No.";         // fill the fields with the values they already have.
                                                                  END;                                           // So this is not also not needed, so eliminate hole also 'ELSE.
                                                                //END;
                                                                }

                                                                // TableRelation only on 'Employee No.', so must be checked if combination Comp/Empl exists
                                                                IF "Employee No." <> '' THEN BEGIN
                                                                  IF ("Supplying Company" = '') OR (NOT EmployeeRec.GET("Supplying Company", "Employee No.")) THEN BEGIN
                                                                    EmployeeRec.SETCURRENTKEY("No.");
                                                                    EmployeeRec.SETRANGE("No.","Employee No.");
                                                                    IF EmployeeRec.FINDFIRST THEN BEGIN
                                                                      IF EmployeeRec.NEXT = 0 THEN  //* If only in one company
                                                                        "Supplying Company" := EmployeeRec.Company;
                                                                    END;
                                                                  END;
                                                                  EmployeeRec.GET("Supplying Company", "Employee No.");
                                                                  IF EmployeeRec."Account Hours" = EmployeeRec."Account Hours"::"Not allowed" THEN
                                                                    EmployeeRec.FIELDERROR("Account Hours");
                                                                  "Department Code" := EmployeeRec."Department Code";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Employee No. }
    { 41  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 42  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date;
                                                   Editable=No }
    { 60  ;   ;Inserted            ;Date          ;CaptionML=ENU=Inserted on }
    { 70  ;   ;Modified            ;DateTime      ;CaptionML=ENU=Modified }
    { 80  ;   ;Inserted By         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Inserted By }
    { 90  ;   ;Modified By         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Modified By }
    { 100 ;   ;Generated           ;Boolean       ;CaptionML=ENU=Generated }
    { 110 ;   ;Name Employee       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Employee"."Full Name" WHERE (Company=FIELD(Supplying Company),
                                                                                                                       No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Name Employee;
                                                   Editable=No }
    { 120 ;   ;Shift Code Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Shift (SMF)";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Shift Code Filter;
                                                   Editable=No }
    { 130 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,,,,,Released,,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   OptionString=Open,,,,,Released,,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   Editable=No }
    { 140 ;   ;Norm Hours Employee ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Employee"."Norm Hours" WHERE (Company=FIELD(Supplying Company),
                                                                                                                        No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Norm Hours Employee;
                                                   Editable=No }
    { 150 ;   ;Account Hours Employee;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Employee"."Account Hours" WHERE (Company=FIELD(Supplying Company),
                                                                                                                           No.=FIELD(Employee No.)));
                                                   CaptionML=ENU=Account Hours;
                                                   OptionCaptionML=ENU=Required according to Norm,Optional,Not allowed;
                                                   OptionString=Required according to Norm,Optional,Not allowed;
                                                   Editable=No }
    { 200 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Department Code }
  }
  KEYS
  {
    {    ;Year,Week,Supplying Company,Employee No.;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Date@1100485000 : Record 2000000007;
      GenericTempTable@1100525002 : TEMPORARY Record 11020579;
      HourPortalSetup@1100525001 : Record 11020454;
      StartDateYear@1100485002 : Date;
      YearEndDate@1100485001 : Date;
      Text001@1100525000 : TextConst 'ENU=Rename not allowed, already lines present.';
      SiteMngmntHoursSetup@1100525003 : Record 11012355;
      DPA_Management@1100525004 : Codeunit 11012783;

    PROCEDURE GetPostingDate@1210190000();
    VAR
      PostingDateRec@1210190000 : Record 11020202;
    BEGIN
      "Posting Date" := DWY2DATE(5,Week,Year);

      IF PostingDateRec.GET(Year, Week) THEN
        IF PostingDateRec."Posting Date" <> 0D THEN
          "Posting Date" := PostingDateRec."Posting Date";
    END;

    PROCEDURE PostHoursBatch@1100485000();
    VAR
      SiteMngmntHoursCU@1100485000 : Codeunit 11012178;
    BEGIN
      SiteMngmntHoursCU.CreateLines(Rec,FALSE,FALSE,'',FALSE,TRUE);
    END;

    PROCEDURE ReleaseLines@1100528400();
    VAR
      SiteMngmntHoursLine@1100528400 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Open);
      IF SiteMngmntHoursLine.FINDSET THEN
        REPEAT
          SiteMngmntHoursLine.Release;
        UNTIL SiteMngmntHoursLine.NEXT = 0;
    END;

    PROCEDURE ReopenLines@1100528401();
    VAR
      SiteMngmntHoursLine@1100528400 : Record 11012361;
    BEGIN
      SiteMngmntHoursSetup.GET;

      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");

      IF SiteMngmntHoursSetup."Consent Hours" THEN
        SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Released)
      ELSE
        SiteMngmntHoursLine.SETFILTER(Status, '%1|%2', SiteMngmntHoursLine.Status::Released, SiteMngmntHoursLine.Status::Posted);

      IF SiteMngmntHoursLine.FINDSET THEN
        REPEAT
          SiteMngmntHoursLine.Reopen;
        UNTIL SiteMngmntHoursLine.NEXT = 0;
    END;

    PROCEDURE SetStatus@1100528300();
    VAR
      SiteMngmntHoursLine@1100528300 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      IF (SiteMngmntHoursLine.FINDFIRST) THEN BEGIN
        Status := SiteMngmntHoursLine.GetLineStatusForHeader(FALSE);
      END;
    END;

    PROCEDURE AddNonWorkingDays@1100528301(AutoFill@1100525000 : Boolean);
    VAR
      CompanyInformation@1100528302 : Record 79;
      DateRec@1100528306 : Record 2000000007;
      EmployeeAbsence@1100525005 : Record 5207;
      CalendarMgt@1100528305 : Codeunit 7600;
      StartDate@1100528303 : Date;
      EndDate@1100528304 : Date;
      Description@1100528307 : Text[50];
      AbsenceCode@1100528308 : Code[10];
      WeekDay@1100525003 : Integer;
      HoursQty@1100525004 : Decimal;
    BEGIN
      TESTFIELD(Year);
      TESTFIELD(Week);
      TESTFIELD(Status, Status::Open);

      CompanyInformation.GET;
      IF (AutoFill) AND (CompanyInformation."Base Calendar Code" = '') THEN
        EXIT;

      CompanyInformation.TESTFIELD("Base Calendar Code");
      StartDate := DWY2DATE(1, Week, Year);
      EndDate := DWY2DATE(7, Week, Year);
      GenericTempTable.DELETEALL;
      IF (NOT HourPortalSetup.GET) THEN
        HourPortalSetup.INIT;

      EmployeeAbsence.SETCURRENTKEY("Employee No.", "From Date");
      EmployeeAbsence.SETRANGE("Employee No.", "Employee No.");
      EmployeeAbsence.SETFILTER(EmployeeAbsence."From Date", '<=%1', EndDate);
      EmployeeAbsence.SETFILTER(EmployeeAbsence."To Date", '>=%1', StartDate);
      EmployeeAbsence.SETFILTER("Cause of Absence Code", '<>%1', '');
      IF (EmployeeAbsence.FINDSET) THEN BEGIN
        REPEAT
          GetHoursFromEmployeeAbsenceEntry(EmployeeAbsence);
        UNTIL (EmployeeAbsence.NEXT = 0);
      END;

      IF (GenericTempTable.FINDSET) THEN BEGIN
        REPEAT
          IF (GenericTempTable.Dec1 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable."Key Code1", 1, GenericTempTable.Dec1);
          IF (GenericTempTable.Dec2 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable."Key Code1", 2, GenericTempTable.Dec2);
          IF (GenericTempTable.Dec3 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable."Key Code1", 3, GenericTempTable.Dec3);
          IF (GenericTempTable.Dec4 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable."Key Code1", 4, GenericTempTable.Dec4);
          IF (GenericTempTable.Dec5 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable."Key Code1", 5, GenericTempTable.Dec5);
          IF (GenericTempTable.Dec6 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable."Key Code1", 6, GenericTempTable.Dec6);
          IF (GenericTempTable.Dec7 <> 0) THEN
            CreateOrUpdateSiteMgtHoursLine(GenericTempTable."Key Code1", 7, GenericTempTable.Dec7);
        UNTIL (GenericTempTable.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntry@1100525005(EmployeeAbsence@1100525001 : Record 5207);
    VAR
      WeekDay@1100525002 : Integer;
    BEGIN
      EmployeeAbsence.TESTFIELD("From Date");
      EmployeeAbsence.TESTFIELD("To Date");
      IF (EmployeeAbsence."From Time" = 0T) THEN
        EmployeeAbsence.TESTFIELD("Until Time", 0T);
      IF (EmployeeAbsence."From Time" > 0T) THEN
        EmployeeAbsence.TESTFIELD("Until Time");

      FOR WeekDay := 1 TO 7 DO BEGIN
        GetHoursFromEmployeeAbsenceEntryForWeekDay(EmployeeAbsence, WeekDay);
      END;
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntryForWeekDay@1100525006(EmployeeAbsence@1100525001 : Record 5207;WeekDay@1100525003 : Integer);
    VAR
      HourAccountingLine@1100525005 : Record 11012039;
      HoursQty@1100525000 : Decimal;
      CurrentDate@1100525004 : Date;
    BEGIN
      CurrentDate := DWY2DATE(WeekDay, Week, Year);
      IF (CurrentDate < EmployeeAbsence."From Date") THEN
        EXIT;
      IF (CurrentDate > EmployeeAbsence."To Date") THEN
        EXIT;

      HoursQty := HourAccountingLine.CalcEmployeeAbsenceHours(EmployeeAbsence, CurrentDate, WeekDay);
      IF (HoursQty <> 0) THEN
        CreateGenericTempTableLine(EmployeeAbsence."Cause of Absence Code", WeekDay, HoursQty);
    END;

    LOCAL PROCEDURE GetSiteMngmntHoursLine@1100525003(VAR SiteMngmntHoursLine@1100525000 : Record 11012361) : Boolean;
    VAR
      lvSiteMngmntHoursLine@1100525001 : Record 11012361;
    BEGIN
      lvSiteMngmntHoursLine.SETRANGE(Year, SiteMngmntHoursLine.Year);
      lvSiteMngmntHoursLine.SETRANGE(Week, SiteMngmntHoursLine.Week);
      lvSiteMngmntHoursLine.SETRANGE("Employee No.", SiteMngmntHoursLine."Employee No.");
      lvSiteMngmntHoursLine.SETRANGE("Object No.", SiteMngmntHoursLine."Object No.");
      lvSiteMngmntHoursLine.SETRANGE(Element, SiteMngmntHoursLine.Element);
      lvSiteMngmntHoursLine.SETRANGE("Cost Object", SiteMngmntHoursLine."Cost Object");
      lvSiteMngmntHoursLine.SETRANGE("Wage Component", SiteMngmntHoursLine."Wage Component");
      lvSiteMngmntHoursLine.SETRANGE(Type, SiteMngmntHoursLine.Type);
      IF (lvSiteMngmntHoursLine.FINDFIRST) THEN BEGIN
        SiteMngmntHoursLine := lvSiteMngmntHoursLine;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateGenericTempTableLine@1100525001(AbsenceCode@1100525000 : Code[20];WeekDay@1100525001 : Integer;HoursQty@1100525002 : Decimal);
    BEGIN
      IF (NOT GenericTempTable.GET(AbsenceCode, FORMAT(Week), '', '', '', '')) THEN BEGIN
        GenericTempTable.INIT;
        GenericTempTable."Key Code1" := AbsenceCode;
        GenericTempTable."Key Code2" := FORMAT(Week);
        GenericTempTable.INSERT;
      END;

      CASE WeekDay OF
        1: GenericTempTable.Dec1 += HoursQty;
        2: GenericTempTable.Dec2 += HoursQty;
        3: GenericTempTable.Dec3 += HoursQty;
        4: GenericTempTable.Dec4 += HoursQty;
        5: GenericTempTable.Dec5 += HoursQty;
        6: GenericTempTable.Dec6 += HoursQty;
        7: GenericTempTable.Dec7 += HoursQty;
      END;
      GenericTempTable.MODIFY;
    END;

    LOCAL PROCEDURE CreateOrUpdateSiteMgtHoursLine@1100528303(AbsenceCode@1100525002 : Code[20];WeekDay@1100525000 : Integer;HoursQty@1100525001 : Decimal);
    VAR
      SiteMngmntHoursLine@1100528301 : Record 11012361;
      CauseofAbsence@1100525003 : Record 5206;
    BEGIN
      CauseofAbsence.GET(AbsenceCode);
      CauseofAbsence.TESTFIELD("Hour Line Template Code");

      InitSiteMngmntHoursLine(SiteMngmntHoursLine, CauseofAbsence."Hour Line Template Code");
      IF (GetSiteMngmntHoursLine(SiteMngmntHoursLine)) THEN BEGIN
        IF (NOT HourPortalSetup."Hour Portal Active") THEN BEGIN
          AddHoursToWeekDay(SiteMngmntHoursLine, WeekDay, HoursQty);
          SiteMngmntHoursLine.MODIFY(TRUE);
        END ELSE BEGIN
          InitSiteMngmntHoursLine(SiteMngmntHoursLine, CauseofAbsence."Hour Line Template Code");
          SiteMngmntHoursLine."Line No." := SiteMngmntHoursLine.GetLastLineNo + 10000;
          AddHoursToWeekDay(SiteMngmntHoursLine, WeekDay, HoursQty);
          SiteMngmntHoursLine.INSERT(TRUE);
        END;
      END ELSE BEGIN
        InitSiteMngmntHoursLine(SiteMngmntHoursLine, CauseofAbsence."Hour Line Template Code");
        SiteMngmntHoursLine."Line No." := SiteMngmntHoursLine.GetLastLineNo + 10000;
        AddHoursToWeekDay(SiteMngmntHoursLine, WeekDay, HoursQty);
        SiteMngmntHoursLine.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE AddHoursToWeekDay@1100525004(VAR SiteMngmntHoursLine@1100525002 : Record 11012361;WeekDay@1100525000 : Integer;HoursQty@1100525001 : Decimal);
    BEGIN
      CASE WeekDay OF
        1: SiteMngmntHoursLine.VALIDATE(Monday, SiteMngmntHoursLine.Monday + HoursQty);
        2: SiteMngmntHoursLine.VALIDATE(Tuesday, SiteMngmntHoursLine.Tuesday + HoursQty);
        3: SiteMngmntHoursLine.VALIDATE(Wednesday, SiteMngmntHoursLine.Wednesday + HoursQty);
        4: SiteMngmntHoursLine.VALIDATE(Thursday, SiteMngmntHoursLine.Thursday + HoursQty);
        5: SiteMngmntHoursLine.VALIDATE(Friday, SiteMngmntHoursLine.Friday + HoursQty);
        6: SiteMngmntHoursLine.VALIDATE(Saturday, SiteMngmntHoursLine.Saturday + HoursQty);
        7: SiteMngmntHoursLine.VALIDATE(Sunday, SiteMngmntHoursLine.Sunday + HoursQty);
      END;
    END;

    LOCAL PROCEDURE InitSiteMngmntHoursLine@1100525000(VAR SiteMngmntHoursLine@1100525000 : Record 11012361;LineTemplateCode@1100525002 : Code[20]);
    BEGIN
      SiteMngmntHoursLine.INIT;
      SiteMngmntHoursLine.VALIDATE(Year, Year);
      SiteMngmntHoursLine.VALIDATE(Week, Week);
      SiteMngmntHoursLine.VALIDATE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.VALIDATE("Employee No.", "Employee No.");
      SiteMngmntHoursLine.VALIDATE("Receiving Company", "Supplying Company");
      SiteMngmntHoursLine.VALIDATE("Line Template Code", LineTemplateCode);
      //SiteMngmntHoursLine.VALIDATE(Type, SiteMngmntHoursLine.Type::Indirect);
      SiteMngmntHoursLine."Object No." := GenericTempTable."Key Code1";
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DepartmentAuthorizObject.READPERMISSION THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012038) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012360');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Hour Accounting", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    BEGIN
    END.
  }
}

